Sample: 0 AbstractInterruptibleChannel
----------------------------------------------------------------

@@ Context
Here is the description of the package Service-provider classes for the java.nio.channels package.
Here is the description of the class Base implementation class for interruptible channels.

@@ Instruction
I want to use java.nio.channels.spi.AbstractInterruptibleChannel package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public boolean isOpen()`: This method returns true if this channel is open.
2. `public void close() throws IOException`: This method closes this channel.
3. `public void closeForRead() throws IOException`: This method closes this channel for reading.
4. `public void closeForWrite() throws IOException`: This method closes this channel for writing.
5. `public void configureBlocking(boolean block) throws IOException`: This method configures this channel's blocking mode.
================================================================

Sample: 1 AbstractSelectableChannel
----------------------------------------------------------------

@@ Context
Here is the description of the package Service-provider classes for the java.nio.channels package.
Here is the description of the class Base implementation class for selectable channels.

@@ Instruction
I want to use java.nio.channels.spi.AbstractSelectableChannel package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public abstract SelectorProvider provider()`: This method returns the provider of this channel.

2. `public abstract boolean isOpen()`: This method returns true if and only if this channel is open.

3. `public abstract void close() throws IOException`: This method closes this channel.

4. `public abstract boolean isConnected()`: This method returns true if and only if this channel is connected.

5. `public abstract void configureBlocking(boolean block) throws IOException`: This method configures this channel's blocking mode.
================================================================

Sample: 2 AbstractSelectionKey
----------------------------------------------------------------

@@ Context
Here is the description of the package Service-provider classes for the java.nio.channels package.
Here is the description of the class Base implementation class for selection keys.

@@ Instruction
I want to use java.nio.channels.spi.AbstractSelectionKey package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public abstract SelectableChannel channel()`: This method returns the channel that is associated with this key.
2. `public abstract SelectionKey interestOps(int ops)`: This method sets the interest set for this key to the given set of operations.
3. `public abstract int interestOps()`: This method returns the interest set for this key.
4. `public abstract SelectionKey interestOps(int ops)`: This method sets the interest set for this key to the given set of operations.
5. `public abstract boolean isValid()`: This method returns true if and only if this key's channel is open.
================================================================

Sample: 3 AbstractSelector
----------------------------------------------------------------

@@ Context
Here is the description of the package Service-provider classes for the java.nio.channels package.
Here is the description of the class Base implementation class for selectors.

@@ Instruction
I want to use java.nio.channels.spi.AbstractSelector package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `SelectorProvider openSelector()`: This method opens a new selector.
2. `SelectorProvider openServerSocketChannel()`: This method opens a new server-socket channel.
3. `SelectorProvider openSocketChannel()`: This method opens a new socket channel.
4. `SelectorProvider openDatagramChannel()`: This method opens a new datagram channel.
5. `SelectorProvider openPipe()`: This method opens a new pipe.

Note: The methods `openSelector()`, `openServerSocketChannel()`, `openSocketChannel()`, `openDatagramChannel()`, and `openPipe()` are used to open a new selector, server-socket channel, socket channel, datagram channel, or pipe, respectively.
================================================================

Sample: 4 AsynchronousChannelProvider
----------------------------------------------------------------

@@ Context
Here is the description of the package Service-provider classes for the java.nio.channels package.
Here is the description of the class Service-provider class for asynchronous channels.

@@ Instruction
I want to use java.nio.channels.spi.AsynchronousChannelProvider package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `AsynchronousChannelProvider.openAsynchronousChannel(AsynchronousServerSocketChannel)`: This method opens an asynchronous channel for the given server socket channel.

2. `AsynchronousChannelProvider.openAsynchronousChannel(AsynchronousSocketChannel)`: This method opens an asynchronous channel for the given socket channel.

3. `AsynchronousChannelProvider.openAsynchronousChannel(AsynchronousFileChannel)`: This method opens an asynchronous channel for the given file channel.

4. `AsynchronousChannelProvider.openAsynchronousChannel(AsynchronousChannel)`: This method opens an asynchronous channel for the given channel.

5. `AsynchronousChannelProvider.openAsynchronousChannel(AsynchronousChannelGroup)`: This method opens an asynchronous channel for the given channel group.
================================================================

Sample: 5 SelectorProvider
----------------------------------------------------------------

@@ Context
Here is the description of the package Service-provider classes for the java.nio.channels package.
Here is the description of the class Service-provider class for selectors and selectable channels.

@@ Instruction
I want to use java.nio.channels.spi.SelectorProvider package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `SelectorProvider newSelector()`: This method creates a new Selector.

2. `SelectorProvider openSelector()`: This method opens a new Selector.

3. `SelectorProvider openServerSocketChannel()`: This method opens a new ServerSocketChannel.

4. `SelectorProvider openSocketChannel()`: This method opens a new SocketChannel.

5. `SelectorProvider openDatagramChannel()`: This method opens a new DatagramChannel.
================================================================

