Sample: 0 FontRenderContext
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interface relating to fonts.
Here is the description of the class The FontRenderContext class is a container for the information needed to correctly measure text.

@@ Instruction
I want to use java.awt.font.FontRenderContext package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public FontRenderContext(float scale, boolean isAntiAliased, AffineTransform at, RenderingHints hints)`: This constructor creates a new FontRenderContext with the specified scale, anti-aliasing flag, affine transform, and rendering hints.

2. `public AffineTransform getTransform()`: This method returns the affine transform associated with this FontRenderContext.

3. `public RenderingHints getHints()`: This method returns the rendering hints associated with this FontRenderContext.

4. `public boolean isAntiAliased()`: This method returns true if this FontRenderContext is set to use anti-aliasing.

5. `public float getScale()`: This method returns the scale associated with this FontRenderContext.
================================================================

Sample: 1 GlyphJustificationInfo
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interface relating to fonts.
Here is the description of the class The GlyphJustificationInfo class represents information about the justification properties of a glyph.

@@ Instruction
I want to use java.awt.font.GlyphJustificationInfo package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `float getAdvance()`: This method returns the advance width of the glyph.
2. `float getAdvanceX()`: This method returns the horizontal advance of the glyph.
3. `float getAdvanceY()`: This method returns the vertical advance of the glyph.
4. `float getBearingX()`: This method returns the horizontal bearing of the glyph.
5. `float getBearingY()`: This method returns the vertical bearing of the glyph.
6. `float getScaleX()`: This method returns the horizontal scale of the glyph.
7. `float getScaleY()`: This method returns the vertical scale of the glyph.
8. `float getRotation()`: This method returns the rotation of the glyph.
9. `float getRotationX()`: This method returns the horizontal rotation of the glyph.
10. `float getRotationY()`: This method returns the vertical rotation of the glyph.
11. `float getShear()`: This method returns the shear of the glyph.
12. `float getShearX()`: This method returns the horizontal shear of the glyph.
13. `float getShearY()`: This method returns the vertical shear of the glyph.
14. `float getStrikeoutOffset()`: This method returns the strikeout offset of the glyph.
15. `float getStrikeoutThickness()`: This method returns the strikeout thickness of the glyph.
16. `float getUnderlineOffset()`: This method returns the underline offset of the glyph.
17. `float getUnderlineThickness()`: This method returns the underline thickness of the glyph.
18. `float getWidth()`: This method returns the width of the glyph.
19. `float getHeight()`: This method returns the height of the glyph.
20. `float getBaseline()`: This method returns the baseline of the glyph.
21. `float getBaselineOffset()`: This method returns the baseline offset of the glyph.
22. `float getBaselineRotation()`: This method returns the baseline rotation of the glyph.
23. `float getBaselineShear()`: This method returns the baseline shear of the glyph.
24. `float getBaselineX()`: This method returns the horizontal baseline of the glyph.
25. `float getBaselineY()`: This method returns the vertical baseline of the glyph.
26. `float getStrikeoutPosition()`: This method returns the strikeout position of the glyph.
27. `float getUnderlinePosition()`: This method returns the underline position of the glyph.
28. `float getStrikeoutThickness()`: This method returns the strikeout thickness of the glyph.
29. `float getUnderlineThickness()`: This method returns the underline thickness of the glyph.
30. `float getStrikeoutOffset()`: This method returns the strikeout offset of the glyph.
31. `float getUnderlineOffset()`: This method returns the underline offset of the glyph.
32. `float getStrikeoutPosition()`: This method returns the strikeout position of the glyph.
33. `float getUnderlinePosition()`: This method returns the underline position of the glyph.
34. `float getStrikeoutThickness()`: This method returns the strikeout thickness of the glyph.
35. `float getUnderlineThickness()`: This method returns the underline thickness of the glyph.
36. `float getStrikeoutOffset()`: This method returns the strikeout offset of the glyph.
37. `float getUnderlineOffset()`: This method returns the underline offset of the glyph.
38. `float getStrikeoutPosition()`: This method returns the strikeout position of the glyph.
39. `float getUnderlinePosition()`: This method returns the underline position of the glyph.
40. `float getStrikeoutThickness()`: This method returns the strikeout thickness of the glyph.
41. `float getUnderlineThickness()`: This method returns the underline thickness of the glyph.
42. `float getStrikeoutOffset()`: This method returns the strikeout offset of the glyph.
43. `float getUnderlineOffset()`: This method returns the underline offset of the glyph.
44. `float getStrikeoutPosition()`: This method returns the strikeout position of the glyph.
45. `float getUnderlinePosition()`: This method returns the underline position of the glyph.
46. `float getStrikeoutThickness()`: This method returns the strikeout thickness of the glyph.
47. `float getUnderlineThickness()`: This method returns the underline thickness of the glyph.
48. `float getStrikeoutOffset()`: This method returns the strikeout offset of the glyph.
49. `float getUnderlineOffset()`: This method returns the underline offset of the glyph.
50. `float getStrikeoutPosition()`: This method returns the strikeout position of the glyph.
51. `float getUnderlinePosition()`: This method returns the underline position of the glyph.
52. `float getStrikeoutThickness()`: This method returns the strikeout thickness of the glyph.
53. `float getUnderlineThickness()`: This method returns the underline thickness of the glyph.
54. `float getStrikeoutOffset()`: This method returns the strikeout offset of the glyph.
55. `float getUnderlineOffset()`: This method returns the underline offset of the glyph.
56. `float getStrikeoutPosition()`: This method returns the strikeout position of the glyph.
57. `float getUnderlinePosition()`: This method returns the underline position of the glyph.
58. `float getStrikeoutThickness()`: This method returns the strikeout thickness of the glyph.
59. `float getUnderlineThickness()`: This method returns the underline thickness of the glyph.
60. `float getStrikeoutOffset()`: This method returns the strikeout offset of the glyph.
61. `float getUnderlineOffset()`: This method returns the underline offset of the glyph.
62. `float getStrikeoutPosition()`: This method returns the strikeout position of the glyph.
63. `float getUnderlinePosition()`: This method returns the underline position of the glyph.
64. `float getStrikeoutThickness()`: This method returns the strikeout thickness of the glyph.
65. `float getUnderlineThickness()`: This method returns the underline thickness of the glyph.
66. `float getStrikeoutOffset()`: This method returns the strikeout offset of the glyph.
67. `float getUnderlineOffset()`: This method returns the underline offset of the glyph.
68. `float getStrikeoutPosition()`: This method returns the strikeout position of the glyph.
69. `float getUnderlinePosition()`: This method returns the underline position of the glyph.
70. `float getStrikeoutThickness()`: This method returns the strikeout thickness of the glyph.
71. `float getUnderlineThickness()`: This method returns the underline thickness of the glyph.
72. `float getStrikeoutOffset()`: This
================================================================

Sample: 2 GlyphMetrics
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interface relating to fonts.
Here is the description of the class The GlyphMetrics class represents information for a single glyph.

@@ Instruction
I want to use java.awt.font.GlyphMetrics package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `GlyphMetrics getGlyphMetrics(int glyphIndex)`: This method returns the GlyphMetrics for the specified glyph index.

2. `int getNumGlyphs()`: This method returns the number of glyphs in the font.

3. `int getNumGlyphs(int start, int limit)`: This method returns the number of glyphs in the font between the start and limit indices.

4. `int getNumGlyphs(int start, int limit, int[] glyphs)`: This method returns the number of glyphs in the font between the start and limit indices and stores them in the glyphs array.

5. `int getNumGlyphs(int start, int limit, int[] glyphs, int offset)`: This method returns the number of glyphs in the font between the start and limit indices and stores them in the glyphs array starting from the specified offset.
================================================================

Sample: 3 GlyphVector
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interface relating to fonts.
Here is the description of the class A GlyphVector object is a collection of glyphs containing geometric information for the placement of each glyph in a transformed coordinate space which corresponds to the device on which the GlyphVector is ultimately displayed.

@@ Instruction
I want to use java.awt.font.GlyphVector package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `int getNumGlyphs()`: This method returns the number of glyphs in the GlyphVector.
2. `Glyph getGlyph(int index)`: This method returns the glyph at the specified position in the GlyphVector.
3. `Rectangle2D getGlyphBounds(int index)`: This method returns the bounds of the glyph at the specified position in the GlyphVector.
4. `Rectangle2D getBounds()`: This method returns the bounds of the GlyphVector.
5. `GlyphIterator getGlyphIterator()`: This method returns a GlyphIterator over the glyphs in the GlyphVector.
================================================================

Sample: 4 GraphicAttribute
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interface relating to fonts.
Here is the description of the class This class is used with the CHAR_REPLACEMENT attribute.

@@ Instruction
I want to use java.awt.font.GraphicAttribute package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean add(E e)`: This method appends the specified element to the end of this list.
2. `void add(int index, E element)`: This method inserts the specified element at the specified position in this list.
3. `boolean addAll(Collection<? extends E> c)`: This method appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator.
4. `boolean addAll(int index, Collection<? extends E> c)`: This method inserts all of the elements in the specified collection into this list, starting at the specified position.
5. `void clear()`: This method removes all of the elements from this list.
================================================================

Sample: 5 ImageGraphicAttribute
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interface relating to fonts.
Here is the description of the class The ImageGraphicAttribute class is an implementation of GraphicAttribute which draws images in a TextLayout.

@@ Instruction
I want to use java.awt.font.ImageGraphicAttribute package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public ImageGraphicAttribute(BufferedImage image, float width, float height)`: This constructor creates a new ImageGraphicAttribute with the specified image and dimensions.

2. `public BufferedImage getImage()`: This method returns the image associated with this ImageGraphicAttribute.

3. `public float getWidth()`: This method returns the width of the image associated with this ImageGraphicAttribute.

4. `public float getHeight()`: This method returns the height of the image associated with this ImageGraphicAttribute.

5. `public boolean equals(Object obj)`: This method compares the specified object with this ImageGraphicAttribute for equality.
================================================================

Sample: 6 LayoutPath
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interface relating to fonts.
Here is the description of the class LayoutPath provides a mapping between locations relative to the baseline and points in user space.

@@ Instruction
I want to use java.awt.font.LayoutPath package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `float getOffset()`: This method returns the offset of the current point in the layout path.
2. `float getPoint()`: This method returns the current point in the layout path.
3. `float getSegmentStart()`: This method returns the start point of the current segment in the layout path.
4. `float getSegmentEnd()`: This method returns the end point of the current segment in the layout path.
5. `float getSegmentLength()`: This method returns the length of the current segment in the layout path.
6. `float getSegmentSlope()`: This method returns the slope of the current segment in the layout path.
7. `float getSegmentPerpendicular()`: This method returns the perpendicular of the current segment in the layout path.
8. `float getSegmentDirection()`: This method returns the direction of the current segment in the layout path.
9. `float getSegmentAngle()`: This method returns the angle of the current segment in the layout path.
10. `float getSegmentDistance()`: This method returns the distance of the current segment in the layout path.
11. `float getSegmentDistanceFromStart()`: This method returns the distance from the start of the current segment in the layout path.
12. `float getSegmentDistanceFromEnd()`: This method returns the distance from the end of the current segment in the layout path.
13. `float getSegmentDistanceFromPoint()`: This method returns the distance from the current point in the layout path to the current segment.
14. `float getSegmentDistanceFromStartOfSegment()`: This method returns the distance from the start of the current segment in the layout path to the current point in the layout path.
15. `float getSegmentDistanceFromEndOfSegment()`: This method returns the distance from the end of the current segment in the layout path to the current point in the layout path.
16. `float getSegmentDistanceFromPointToStartOfSegment()`: This method returns the distance from the current point in the layout path to the start of the current segment in the layout path.
17. `float getSegmentDistanceFromPointToEndOfSegment()`: This method returns the distance from the current point in the layout path to the end of the current segment in the layout path.
18. `float getSegmentDistanceFromPointToPoint()`: This method returns the distance from the current point in the layout path to the specified point in the layout path.
19. `float getSegmentDistanceFromPointToPoint(float x, float y)`: This method returns the distance from the current point in the layout path to the specified point in the layout path.
20. `float getSegmentDistanceFromPointToPoint(Point2D p)`: This method returns the distance from the current point in the layout path to the specified point in the layout path.
21. `float getSegmentDistanceFromPointToPoint(float x, float y, float x1, float y1)`: This method returns the distance from the specified point in the layout path to the specified point in the layout path.
22. `float getSegmentDistanceFromPointToPoint(Point2D p1, Point2D p2)`: This method returns the distance from the specified point in the layout path to the specified point in the layout path.
23. `float getSegmentDistanceFromPointToPoint(float x, float y, float x1, float y1, float x2, float y2)`: This method returns the distance from the specified point in the layout path to the specified point in the layout path.
24. `float getSegmentDistanceFromPointToPoint(Point2D p1, Point2D p2, Point2D p3)`: This method returns the distance from the specified point in the layout path to the specified point in the layout path.
25. `float getSegmentDistanceFromPointToPoint(float x, float y, float x1, float y1, float x2, float y2, float x3, float y3)`: This method returns the distance from the specified point in the layout path to the specified point in the layout path.
26. `float getSegmentDistanceFromPointToPoint(Point2D p1, Point2D p2, Point2D p3, Point2D p4)`: This method returns the distance from the specified point in the layout path to the specified point in the layout path.
================================================================

Sample: 7 LineBreakMeasurer
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interface relating to fonts.
Here is the description of the class The LineBreakMeasurer class allows styled text to be broken into lines (or segments) that fit within a particular visual advance.

@@ Instruction
I want to use java.awt.font.LineBreakMeasurer package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `int getPosition()`: This method returns the current position of the LineBreakMeasurer.
2. `int getPosition(TextLayout layout)`: This method returns the current position of the LineBreakMeasurer.
3. `TextLayout nextLayout(int width)`: This method returns the next TextLayout that fits within the specified width.
4. `TextLayout nextLayout(int width, boolean hyphenated)`: This method returns the next TextLayout that fits within the specified width.
5. `TextLayout nextLayout(int width, boolean hyphenated, float hyphenationFactor)`: This method returns the next TextLayout that fits within the specified width.
================================================================

Sample: 8 LineMetrics
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interface relating to fonts.
Here is the description of the class The LineMetrics class allows access to the metrics needed to layout characters along a line and to layout of a set of lines.

@@ Instruction
I want to use java.awt.font.LineMetrics package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `float getAscent()`: This method returns the ascent of the line.
2. `float getDescent()`: This method returns the descent of the line.
3. `float getLeading()`: This method returns the leading of the line.
4. `float getHeight()`: This method returns the height of the line.
5. `float getStrikethroughOffset()`: This method returns the offset of the strikethrough baseline.
6. `float getStrikethroughThickness()`: This method returns the thickness of the strikethrough.
7. `float getUnderlineOffset()`: This method returns the offset of the underline baseline.
8. `float getUnderlineThickness()`: This method returns the thickness of the underline.
9. `float getStrikethroughOffset()`: This method returns the offset of the strikethrough baseline.
10. `float getStrikethroughThickness()`: This method returns the thickness of the strikethrough.
11. `float getUnderlineOffset()`: This method returns the offset of the underline baseline.
12. `float getUnderlineThickness()`: This method returns the thickness of the underline.
================================================================

Sample: 9 NumericShaper
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interface relating to fonts.
Here is the description of the class The NumericShaper class is used to convert Latin-1 (European) digits to other Unicode decimal digits.

@@ Instruction
I want to use java.awt.font.NumericShaper package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `NumericShaper()`: This is the constructor of the NumericShaper class.

2. `Shape shape(char c, FontRenderContext frc)`: This method returns a Shape object that represents the glyph for the specified character.

3. `Shape[] shape(String s, FontRenderContext frc)`: This method returns an array of Shape objects that represent the glyphs for the specified string.

4. `Shape[] shape(char[] c, FontRenderContext frc)`: This method returns an array of Shape objects that represent the glyphs for the specified array of characters.

5. `Shape[] shape(String s, FontRenderContext frc, int start, int end)`: This method returns an array of Shape objects that represent the glyphs for the specified substring of the specified string.
================================================================

Sample: 10 ShapeGraphicAttribute
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interface relating to fonts.
Here is the description of the class The ShapeGraphicAttribute class is an implementation of GraphicAttribute that draws shapes in a TextLayout.

@@ Instruction
I want to use java.awt.font.ShapeGraphicAttribute package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `ShapeGraphicAttribute(Shape shape)`: This is the constructor of the ShapeGraphicAttribute class. It takes a Shape object as a parameter.

2. `Shape getShape()`: This method returns the Shape object that was passed to the constructor.

3. `Object clone()`: This method creates and returns a copy of this ShapeGraphicAttribute object.

4. `boolean equals(Object obj)`: This method compares the specified object with this ShapeGraphicAttribute for equality.

5. `int hashCode()`: This method returns the hash code value for this ShapeGraphicAttribute.
================================================================

Sample: 11 TextAttribute
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interface relating to fonts.
Here is the description of the class The TextAttribute class defines attribute keys and attribute values used for text rendering.

@@ Instruction
I want to use java.awt.font.TextAttribute package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public static TextAttribute FAMILY()`: This method returns the TextAttribute object for the family attribute.
2. `public static TextAttribute SIZE()`: This method returns the TextAttribute object for the size attribute.
3. `public static TextAttribute WEIGHT()`: This method returns the TextAttribute object for the weight attribute.
4. `public static TextAttribute POSTURE()`: This method returns the TextAttribute object for the posture attribute.
5. `public static TextAttribute UNDERLINE()`: This method returns the TextAttribute object for the underline attribute.
================================================================

Sample: 12 TextHitInfo
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interface relating to fonts.
Here is the description of the class The TextHitInfo class represents a character position in a text model, and a bias, or "side," of the character.

@@ Instruction
I want to use java.awt.font.TextHitInfo package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `int getSide()`: This method returns the side of the character.
2. `int getTail()`: This method returns the tail of the character.
3. `int getHead()`: This method returns the head of the character.
4. `int getInsertionIndex()`: This method returns the insertion index of the character.
5. `int getCharIndex()`: This method returns the character index of the character.
6. `int getCharWidth()`: This method returns the character width of the character.
7. `int getCharHeight()`: This method returns the character height of the character.
8. `int getCharBaseline()`: This method returns the character baseline of the character.
9. `int getCharAscent()`: This method returns the character ascent of the character.
10. `int getCharDescent()`: This method returns the character descent of the character.
11. `int getCharAdvance()`: This method returns the character advance of the character.
12. `int getCharStrIndex()`: This method returns the character string index of the character.
13. `int getCharStrLength()`: This method returns the character string length of the character.
14. `int getCharStrOffset()`: This method returns the character string offset of the character.
15. `int getCharStrIndex(int charIndex)`: This method returns the character string index of the character.
16. `int getCharStrLength(int charIndex)`: This method returns the character string length of the character.
17. `int getCharStrOffset(int charIndex)`: This method returns the character string offset of the character.
18. `int getCharStrIndex(int charIndex, int charWidth)`: This method returns the character string index of the character.
19. `int getCharStrLength(int charIndex, int charWidth)`: This method returns the character string length of the character.
20. `int getCharStrOffset(int charIndex, int charWidth)`: This method returns the character string offset of the character.
21. `int getCharStrIndex(int charIndex, int charWidth, int charHeight)`: This method returns the character string index of the character.
22. `int getCharStrLength(int charIndex, int charWidth, int charHeight)`: This method returns the character string length of the character.
23. `int getCharStrOffset(int charIndex, int charWidth, int charHeight)`: This method returns the character string offset of the character.
24. `int getCharStrIndex(int charIndex, int charWidth, int charHeight, int charBaseline)`: This method returns the character string index of the character.
25. `int getCharStrLength(int charIndex, int charWidth, int charHeight, int charBaseline)`: This method returns the character string length of the character.
26. `int getCharStrOffset(int charIndex, int charWidth, int charHeight, int charBaseline)`: This method returns the character string offset of the character.
27. `int getCharStrIndex(int charIndex, int charWidth, int charHeight, int charBaseline, int charAscent)`: This method returns the character string index of the character.
28. `int getCharStrLength(int charIndex, int charWidth, int charHeight, int charBaseline, int charAscent)`: This method returns the character string length of the character.
29. `int getCharStrOffset(int charIndex, int charWidth, int charHeight, int charBaseline, int charAscent)`: This method returns the character string offset of the character.
30. `int getCharStrIndex(int charIndex, int charWidth, int charHeight, int charBaseline, int charAscent, int charDescent)`: This method returns the character string index of the character.
31. `int getCharStrLength(int charIndex, int charWidth, int charHeight, int charBaseline, int charAscent, int charDescent)`: This method returns the character string length of the character.
32. `int getCharStrOffset(int charIndex, int charWidth, int charHeight, int charBaseline, int charAscent, int charDescent)`: This method returns the character string offset of the character.
33. `int getCharStrIndex(int charIndex, int charWidth, int charHeight, int charBaseline, int charAscent, int charDescent, int charAdvance)`: This method returns the character string index of the character.
34. `int getCharStrLength(int charIndex, int charWidth, int charHeight, int charBaseline, int charAscent, int charDescent, int charAdvance)`: This method returns the character string length of the character.
35. `int getCharStrOffset(int charIndex, int charWidth, int charHeight, int charBaseline, int charAscent, int charDescent, int charAdvance)`: This method returns the character string offset of the character.
36. `int getCharStrIndex(int charIndex, int charWidth, int charHeight, int charBaseline, int charAscent, int charDescent, int charAdvance, int charStrIndex)`: This method returns the character string index of the character.
37. `int getCharStrLength(int charIndex, int charWidth, int charHeight, int charBaseline, int charAscent, int charDescent, int charAdvance, int charStrIndex)`: This method returns the character string length of the character.
38. `int getCharStrOffset(int charIndex, int charWidth, int charHeight, int charBaseline, int charAscent, int charDescent, int charAdvance, int charStrIndex)`: This method returns the character string offset of the character.
39. `int getCharStrIndex(int charIndex, int charWidth, int charHeight, int charBaseline, int charAscent, int charDescent, int charAdvance, int charStrIndex, int charStrLength)`: This method returns the character string index of the character.
40. `int getCharStrLength(int charIndex, int charWidth, int charHeight, int charBaseline, int charAscent, int charDescent, int charAdvance, int charStrIndex, int charStrLength)`: This method returns the character string length of the character.
41. `int getCharStrOffset(int charIndex, int charWidth, int charHeight, int charBaseline, int charAscent, int charDescent, int charAdvance, int charStrIndex, int charStrLength)`: This method returns the character string offset of the character.
42. `int getCharStrIndex(int charIndex, int charWidth, int charHeight, int charBaseline, int charAscent, int charDescent, int charAdvance, int charStrIndex, int charStrLength, int charStrOffset)`: This method returns the character string index of the character.
43. `int getCharStrLength(int charIndex, int charWidth, int charHeight, int charBaseline, int charAscent, int charDescent, int charAdvance, int charStrIndex, int charStrLength, int charStrOffset)`: This method returns the character string length of the character.
44. `int getCharStrOffset(int charIndex, int charWidth, int charHeight, int charBaseline, int charAscent, int charDescent, int charAdvance, int charStrIndex, int charStrLength, int charStrOffset)`: This method returns the character string offset of the character.
45. `int getCharStrIndex(int charIndex, int charWidth, int charHeight, int charBaseline, int charAscent, int charDescent, int charAdvance
================================================================

Sample: 13 TextLayout
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interface relating to fonts.
Here is the description of the class TextLayout is an immutable graphical representation of styled character data.

@@ Instruction
I want to use java.awt.font.TextLayout package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `int getAscent()`: This method returns the ascent of the font.
2. `int getDescent()`: This method returns the descent of the font.
3. `int getAdvance()`: This method returns the advance width of the text.
4. `Rectangle2D getBounds()`: This method returns the bounds of the text.
5. `Rectangle2D getBounds(int start, int end)`: This method returns the bounds of the text from start index to end index.
6. `Rectangle2D getBounds(int start, int end, int cursor)`: This method returns the bounds of the text from start index to end index with the cursor at the specified index.
7. `Rectangle2D getBounds(int start, int end, int cursor, int cursorPosition)`: This method returns the bounds of the text from start index to end index with the cursor at the specified index and the cursor position.
8. `Rectangle2D getBounds(int start, int end, int cursor, int cursorPosition, int halfWidth)`: This method returns the bounds of the text from start index to end index with the cursor at the specified index, the cursor position, and the half width.
9. `Rectangle2D getBounds(int start, int end, int cursor, int cursorPosition, int halfWidth, int halfHeight)`: This method returns the bounds of the text from start index to end index with the cursor at the specified index, the cursor position, the half width, and the half height.
10. `Rectangle2D getBounds(int start, int end, int cursor, int cursorPosition, int halfWidth, int halfHeight, int halfBaseline)`: This method returns the bounds of the text from start index to end index with the cursor at the specified index, the cursor position, the half width, the half height, and the half baseline.
11. `Rectangle2D getBounds(int start, int end, int cursor, int cursorPosition, int halfWidth, int halfHeight, int halfBaseline, int halfLeading)`: This method returns the bounds of the text from start index to end index with the cursor at the specified index, the cursor position, the half width, the half height, the half baseline, and the half leading.
12. `Rectangle2D getBounds(int start, int end, int cursor, int cursorPosition, int halfWidth, int halfHeight, int halfBaseline, int halfLeading, int halfStrikethrough)`: This method returns the bounds of the text from start index to end index with the cursor at the specified index, the cursor position, the half width, the half height, the half baseline, the half leading, and the half strikethrough.
13. `Rectangle2D getBounds(int start, int end, int cursor, int cursorPosition, int halfWidth, int halfHeight, int halfBaseline, int halfLeading, int halfStrikethrough, int halfInline)`: This method returns the bounds of the text from start index to end index with the cursor at the specified index, the cursor position, the half width, the half height, the half baseline, the half leading, the half strikethrough, and the half inline.
14. `Rectangle2D getBounds(int start, int end, int cursor, int cursorPosition, int halfWidth, int halfHeight, int halfBaseline, int halfLeading, int halfStrikethrough, int halfInline, int halfSuperscript)`: This method returns the bounds of the text from start index to end index with the cursor at the specified index, the cursor position, the half width, the half height, the half baseline, the half leading, the half strikethrough, the half inline, and the half superscript.
15. `Rectangle2D getBounds(int start, int end, int cursor, int cursorPosition, int halfWidth, int halfHeight, int halfBaseline, int halfLeading, int halfStrikethrough, int halfInline, int halfSuperscript, int halfSubscript)`: This method returns the bounds of the text from start index to end index with the cursor at the specified index, the cursor position, the half width, the half height, the half baseline, the half leading, the half strikethrough, the half inline, the half superscript, and the half subscript.
================================================================

Sample: 14 TextLayout.CaretPolicy
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interface relating to fonts.
Here is the description of the class Defines a policy for determining the strong caret location.

@@ Instruction
I want to use java.awt.font.TextLayout.CaretPolicy package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `CaretPolicy getCaretPolicy()`: This method returns the caret policy.
2. `CaretPolicy getCaretPolicy(int offset)`: This method returns the caret policy for the specified offset.
3. `CaretPolicy getCaretPolicy(int offset, int length)`: This method returns the caret policy for the specified offset and length.
4. `CaretPolicy getCaretPolicy(int offset, int length, int direction)`: This method returns the caret policy for the specified offset, length, and direction.
5. `CaretPolicy getCaretPolicy(int offset, int length, int direction, int granularity)`: This method returns the caret policy for the specified offset, length, direction, and granularity.
================================================================

Sample: 15 TextMeasurer
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interface relating to fonts.
Here is the description of the class The TextMeasurer class provides the primitive operations needed for line break: measuring up to a given advance, determining the advance of a range of characters, and generating a TextLayout for a range of characters.

@@ Instruction
I want to use java.awt.font.TextMeasurer package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `int getCharAdvance(int index, int limit)`: This method returns the advance of the character at the specified index in the range from 0 to limit-1.

2. `int getStringAdvance(String str, int limit)`: This method returns the advance of the string str in the range from 0 to limit-1.

3. `TextLayout getLayout(String str, int start, int end)`: This method returns a TextLayout object for the specified string str and range.

4. `TextLayout getLayout(String str)`: This method returns a TextLayout object for the specified string str.

5. `TextLayout getLayout(String str, int start, int end, int flags)`: This method returns a TextLayout object for the specified string str and range with the specified flags.
================================================================

Sample: 16 TransformAttribute
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interface relating to fonts.
Here is the description of the class The TransformAttribute class provides an immutable wrapper for a transform so that it is safe to use as an attribute.

@@ Instruction
I want to use java.awt.font.TransformAttribute package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `TransformAttribute(float[] matrix)`: This constructor creates a new TransformAttribute object with the specified transformation matrix.

2. `TransformAttribute(float[] matrix, int offset)`: This constructor creates a new TransformAttribute object with the specified transformation matrix and offset.

3. `TransformAttribute(float[] matrix, int offset, int stride)`: This constructor creates a new TransformAttribute object with the specified transformation matrix, offset, and stride.

4. `float[] getMatrix()`: This method returns the transformation matrix.

5. `int getOffset()`: This method returns the offset.

6. `int getStride()`: This method returns the stride.

7. `TransformAttributeType getType()`: This method returns the type of the transformation.

8. `boolean isIdentity()`: This method returns true if the transformation is the identity transformation.

9. `boolean isInverse(TransformAttribute other)`: This method returns true if the transformation is the inverse of the specified transformation.

10. `TransformAttribute compose(TransformAttribute other)`: This method returns a new TransformAttribute that is the composition of this transformation and the specified transformation.

11. `TransformAttribute inverse()`: This method returns a new TransformAttribute that is the inverse of this transformation.

12. `TransformAttribute translate(float dx, float dy)`: This method returns a new TransformAttribute that is the translation of this transformation by the specified amount.

13. `TransformAttribute scale(float sx, float sy)`: This method returns a new TransformAttribute that is the scaling of this transformation by the specified amount.

14. `TransformAttribute rotate(float theta)`: This method returns a new TransformAttribute that is the rotation of this transformation by the specified angle.

15. `TransformAttribute shear(float shx, float shy)`: This method returns a new TransformAttribute that is the shearing of this transformation by the specified amounts.

16. `TransformAttribute transform(float x, float y)`: This method returns a new TransformAttribute that is the transformation of the specified point by this transformation.

17. `TransformAttribute transform(Point2D p)`: This method returns a new TransformAttribute that is the transformation of the specified point by this transformation.

18. `TransformAttribute transform(Rectangle2D r)`: This method returns a new TransformAttribute that is the transformation of the specified rectangle by this transformation.

19. `TransformAttribute transform(AffineTransform at)`: This method returns a new TransformAttribute that is the transformation of the specified AffineTransform by this transformation.

20. `TransformAttribute transform(Shape s)`: This method returns a new TransformAttribute that is the transformation of the specified Shape by this transformation.
================================================================

