ClassName,Method,Return Type,Description
IIOImage,getMetadata(),IIOMetadata,"Returns a reference to the current IIOMetadata object, or null is none is set."
IIOImage,getNumThumbnails(),int,Returns the number of thumbnails stored in this IIOImage.
IIOImage,getRaster(),Raster,"Returns the currently set Raster, or null if only a RenderedImage is available."
IIOImage,getRenderedImage(),RenderedImage,"Returns the currently set RenderedImage, or null if only a Raster is available."
IIOImage,getThumbnail(int index),BufferedImage,Returns a thumbnail associated with the main image.
IIOImage,getThumbnails(),List<? extends BufferedImage>,"Returns the current List of thumbnail BufferedImages, or null if none is set."
IIOImage,hasRaster(),boolean,Returns true if this IIOImage stores a Raster rather than a RenderedImage.
IIOImage,setMetadata(IIOMetadata metadata),void,"Sets the IIOMetadata to a new object, or null."
IIOImage,setRaster(Raster raster),void,Sets the current Raster.
IIOImage,setRenderedImage(RenderedImage image),void,Sets the current RenderedImage.
IIOImage,setThumbnails(List<? extends BufferedImage> thumbnails),void,"Sets the list of thumbnails to a new List of BufferedImages, or to null."
IIOParam,activateController(),boolean,Activates the installed IIOParamController for this IIOParam object and returns the resulting value.
IIOParam,getController(),IIOParamController,Returns whatever IIOParamController is currently installed.
IIOParam,getDefaultController(),IIOParamController,"Returns the default IIOParamController, if there is one, regardless of the currently installed controller."
IIOParam,getDestinationOffset(),Point,Returns the offset in the destination image at which pixels are to be placed.
IIOParam,getDestinationType(),ImageTypeSpecifier,"Returns the type of image to be returned by the read, if one was set by a call to setDestination(ImageTypeSpecifier), as an ImageTypeSpecifier."
IIOParam,getSourceBands(),int[],Returns the set of of source bands to be used.
IIOParam,getSourceRegion(),Rectangle,Returns the source region to be used.
IIOParam,getSourceXSubsampling(),int,Returns the number of source columns to advance for each pixel.
IIOParam,getSourceYSubsampling(),int,Returns the number of rows to advance for each pixel.
IIOParam,getSubsamplingXOffset(),int,Returns the horizontal offset of the subsampling grid.
IIOParam,getSubsamplingYOffset(),int,Returns the vertical offset of the subsampling grid.
IIOParam,hasController(),boolean,Returns true if there is a controller installed for this IIOParam object.
IIOParam,setController(IIOParamController controller),void,"Sets the IIOParamController to be used to provide settings for this IIOParam object when the activateController method is called, overriding any default controller."
IIOParam,setDestinationOffset(Point destinationOffset),void,"Specifies the offset in the destination image at which future decoded pixels are to be placed, when reading, or where a region will be written, when writing."
IIOParam,setDestinationType(ImageTypeSpecifier destinationType),void,"Sets the desired image type for the destination image, using an ImageTypeSpecifier."
IIOParam,setSourceBands(int[] sourceBands),void,Sets the indices of the source bands to be used.
IIOParam,setSourceRegion(Rectangle sourceRegion),void,Sets the source region of interest.
IIOParam,"setSourceSubsampling(int sourceXSubsampling, int sourceYSubsampling, int subsamplingXOffset, int subsamplingYOffset)",void,Specifies a decimation subsampling to apply on I/O.
ImageIO,createImageInputStream(Object input),static ImageInputStream,Returns an ImageInputStream that will take its input from the given Object.
ImageIO,createImageOutputStream(Object output),static ImageOutputStream,Returns an ImageOutputStream that will send its output to the given Object.
ImageIO,getCacheDirectory(),static File,"Returns the current value set by setCacheDirectory, or null if no explicit setting has been made."
ImageIO,getImageReader(ImageWriter writer),static ImageReader,"Returns an ImageReadercorresponding to the given ImageWriter, if there is one, or null if the plug-in for this ImageWriter does not specify a corresponding ImageReader, or if the given ImageWriter is not registered."
ImageIO,getImageReaders(Object input),static Iterator<ImageReader>,"Returns an Iterator containing all currently registered ImageReaders that claim to be able to decode the supplied Object, typically an ImageInputStream."
ImageIO,getImageReadersByFormatName(String formatName),static Iterator<ImageReader>,Returns an Iterator containing all currently registered ImageReaders that claim to be able to decode the named format.
ImageIO,getImageReadersByMIMEType(String MIMEType),static Iterator<ImageReader>,Returns an Iterator containing all currently registered ImageReaders that claim to be able to decode files with the given MIME type.
ImageIO,getImageReadersBySuffix(String fileSuffix),static Iterator<ImageReader>,Returns an Iterator containing all currently registered ImageReaders that claim to be able to decode files with the given suffix.
ImageIO,"getImageTranscoders(ImageReader reader, ImageWriter writer)",static Iterator<ImageTranscoder>,Returns an Iterator containing all currently registered ImageTranscoders that claim to be able to transcode between the metadata of the given ImageReader and ImageWriter.
ImageIO,getImageWriter(ImageReader reader),static ImageWriter,"Returns an ImageWritercorresponding to the given ImageReader, if there is one, or null if the plug-in for this ImageReader does not specify a corresponding ImageWriter, or if the given ImageReader is not registered."
ImageIO,"getImageWriters(ImageTypeSpecifier type, String formatName)",static Iterator<ImageWriter>,Returns an Iterator containing all currently registered ImageWriters that claim to be able to encode images of the given layout (specified using an ImageTypeSpecifier) in the given format.
ImageIO,getImageWritersByFormatName(String formatName),static Iterator<ImageWriter>,Returns an Iterator containing all currently registered ImageWriters that claim to be able to encode the named format.
ImageIO,getImageWritersByMIMEType(String MIMEType),static Iterator<ImageWriter>,Returns an Iterator containing all currently registered ImageWriters that claim to be able to encode files with the given MIME type.
ImageIO,getImageWritersBySuffix(String fileSuffix),static Iterator<ImageWriter>,Returns an Iterator containing all currently registered ImageWriters that claim to be able to encode files with the given suffix.
ImageIO,getReaderFileSuffixes(),static String[],Returns an array of Strings listing all of the file suffixes associated with the formats understood by the current set of registered readers.
ImageIO,getReaderFormatNames(),static String[],Returns an array of Strings listing all of the informal format names understood by the current set of registered readers.
ImageIO,getReaderMIMETypes(),static String[],Returns an array of Strings listing all of the MIME types understood by the current set of registered readers.
ImageIO,getUseCache(),static boolean,"Returns the current value set by setUseCache, or true if no explicit setting has been made."
ImageIO,getWriterFileSuffixes(),static String[],Returns an array of Strings listing all of the file suffixes associated with the formats understood by the current set of registered writers.
ImageIO,getWriterFormatNames(),static String[],Returns an array of Strings listing all of the informal format names understood by the current set of registered writers.
ImageIO,getWriterMIMETypes(),static String[],Returns an array of Strings listing all of the MIME types understood by the current set of registered writers.
ImageIO,read(File input),static BufferedImage,Returns a BufferedImage as the result of decoding a supplied File with an ImageReader chosen automatically from among those currently registered.
ImageIO,read(ImageInputStream stream),static BufferedImage,Returns a BufferedImage as the result of decoding a supplied ImageInputStream with an ImageReader chosen automatically from among those currently registered.
ImageIO,read(InputStream input),static BufferedImage,Returns a BufferedImage as the result of decoding a supplied InputStream with an ImageReader chosen automatically from among those currently registered.
ImageIO,read(URL input),static BufferedImage,Returns a BufferedImage as the result of decoding a supplied URL with an ImageReader chosen automatically from among those currently registered.
ImageIO,scanForPlugins(),static void,"Scans for plug-ins on the application class path, loads their service provider classes, and registers a service provider instance for each one found with the IIORegistry."
ImageIO,setCacheDirectory(File cacheDirectory),static void,Sets the directory where cache files are to be created.
ImageIO,setUseCache(boolean useCache),static void,Sets a flag indicating whether a disk-based cache file should be used when creating ImageInputStreams and ImageOutputStreams.
ImageIO,"write(RenderedImage im, String formatName, File output)",static boolean,Writes an image using an arbitrary ImageWriter that supports the given format to a File.
ImageIO,"write(RenderedImage im, String formatName, ImageOutputStream output)",static boolean,Writes an image using the an arbitrary ImageWriter that supports the given format to an ImageOutputStream.
ImageIO,"write(RenderedImage im, String formatName, OutputStream output)",static boolean,Writes an image using an arbitrary ImageWriter that supports the given format to an OutputStream.
ImageReader,abort(),void,Requests that any current read operation be aborted.
ImageReader,abortRequested(),protected boolean,Returns true if a request to abort the current read operation has been made since the reader was instantiated or clearAbortRequest was called.
ImageReader,addIIOReadProgressListener(IIOReadProgressListener listener),void,Adds an IIOReadProgressListener to the list of registered progress listeners.
ImageReader,addIIOReadUpdateListener(IIOReadUpdateListener listener),void,Adds an IIOReadUpdateListener to the list of registered update listeners.
ImageReader,addIIOReadWarningListener(IIOReadWarningListener listener),void,Adds an IIOReadWarningListener to the list of registered warning listeners.
ImageReader,canReadRaster(),boolean,Returns true if this plug-in supports reading just a Raster of pixel data.
ImageReader,"checkReadParamBandSettings(ImageReadParam param, int numSrcBands, int numDstBands)",protected static void,A utility method that may be used by readers to test the validity of the source and destination band settings of an ImageReadParam.
ImageReader,clearAbortRequest(),protected void,Clears any previous abort request.
ImageReader,"computeRegions(ImageReadParam param, int srcWidth, int srcHeight, BufferedImage image, Rectangle srcRegion, Rectangle destRegion)",protected static void,"Computes the source region of interest and the destination region of interest, taking the width and height of the source image, an optional destination image, and an optional ImageReadParam into account."
ImageReader,dispose(),void,Allows any resources held by this object to be released.
ImageReader,getAspectRatio(int imageIndex),float,"Returns the aspect ratio of the given image (that is, its width divided by its height) as a float."
ImageReader,getAvailableLocales(),Locale[],Returns an array of Locales that may be used to localize warning listeners and compression settings.
ImageReader,getDefaultReadParam(),ImageReadParam,Returns a default ImageReadParam object appropriate for this format.
ImageReader,"getDestination(ImageReadParam param, Iterator<ImageTypeSpecifier> imageTypes, int width, int height)",protected static BufferedImage,Returns the BufferedImage to which decoded pixel data should be written.
ImageReader,getFormatName(),String,Returns a String identifying the format of the input source.
ImageReader,getHeight(int imageIndex),abstract int,Returns the height in pixels of the given image within the input source.
ImageReader,getImageMetadata(int imageIndex),abstract IIOMetadata,"Returns an IIOMetadata object containing metadata associated with the given image, or null if the reader does not support reading metadata, is set to ignore metadata, or if no metadata is available."
ImageReader,"getImageMetadata(int imageIndex, String formatName, Set<String> nodeNames)",IIOMetadata,"Returns an IIOMetadata object representing the metadata associated with the given image, or null if the reader does not support reading metadata or none is available."
ImageReader,getImageTypes(int imageIndex),abstract Iterator<ImageTypeSpecifier>,"Returns an Iterator containing possible image types to which the given image may be decoded, in the form of ImageTypeSpecifierss."
ImageReader,getInput(),Object,Returns the ImageInputStream or other Object previously set as the input source.
ImageReader,getLocale(),Locale,"Returns the currently set Locale, or null if none has been set."
ImageReader,getMinIndex(),int,"Returns the lowest valid index for reading an image, thumbnail, or image metadata."
ImageReader,getNumImages(boolean allowSearch),abstract int,"Returns the number of images, not including thumbnails, available from the current input source."
ImageReader,getNumThumbnails(int imageIndex),int,Returns the number of thumbnail preview images associated with the given image.
ImageReader,getOriginatingProvider(),ImageReaderSpi,Returns the ImageReaderSpi that was passed in on the constructor.
ImageReader,getRawImageType(int imageIndex),ImageTypeSpecifier,"Returns an ImageTypeSpecifier indicating the SampleModel and ColorModel which most closely represents the ""raw"" internal format of the image."
ImageReader,"getSourceRegion(ImageReadParam param, int srcWidth, int srcHeight)",protected static Rectangle,"A utility method that may be used by readers to compute the region of the source image that should be read, taking into account any source region and subsampling offset settings in the supplied ImageReadParam."
ImageReader,getStreamMetadata(),abstract IIOMetadata,"Returns an IIOMetadata object representing the metadata associated with the input source as a whole (i.e., not associated with any particular image), or null if the reader does not support reading metadata, is set to ignore metadata, or if no metadata is available."
ImageReader,"getStreamMetadata(String formatName, Set<String> nodeNames)",IIOMetadata,"Returns an IIOMetadata object representing the metadata associated with the input source as a whole (i.e., not associated with any particular image)."
ImageReader,"getThumbnailHeight(int imageIndex, int thumbnailIndex)",int,"Returns the height of the thumbnail preview image indexed by thumbnailIndex, associated with the image indexed by ImageIndex."
ImageReader,"getThumbnailWidth(int imageIndex, int thumbnailIndex)",int,"Returns the width of the thumbnail preview image indexed by thumbnailIndex, associated with the image indexed by ImageIndex."
ImageReader,getTileGridXOffset(int imageIndex),int,"Returns the X coordinate of the upper-left corner of tile (0, 0) in the given image."
ImageReader,getTileGridYOffset(int imageIndex),int,"Returns the Y coordinate of the upper-left corner of tile (0, 0) in the given image."
ImageReader,getTileHeight(int imageIndex),int,Returns the height of a tile in the given image.
ImageReader,getTileWidth(int imageIndex),int,Returns the width of a tile in the given image.
ImageReader,getWidth(int imageIndex),abstract int,Returns the width in pixels of the given image within the input source.
ImageReader,hasThumbnails(int imageIndex),boolean,Returns true if the given image has thumbnail preview images associated with it.
ImageReader,isIgnoringMetadata(),boolean,Returns true if the current input source has been marked as allowing metadata to be ignored by passing true as the ignoreMetadata argument to the setInput method.
ImageReader,isImageTiled(int imageIndex),boolean,"Returns true if the image is organized into tiles, that is, equal-sized non-overlapping rectangles."
ImageReader,isRandomAccessEasy(int imageIndex),boolean,Returns true if the storage format of the given image places no inherent impediment on random access to pixels.
ImageReader,isSeekForwardOnly(),boolean,Returns true if the current input source has been marked as seek forward only by passing true as the seekForwardOnly argument to the setInput method.
ImageReader,processImageComplete(),protected void,Broadcasts the completion of an image read to all registered IIOReadProgressListeners by calling their imageComplete method.
ImageReader,processImageProgress(float percentageDone),protected void,Broadcasts the current percentage of image completion to all registered IIOReadProgressListeners by calling their imageProgress method.
ImageReader,processImageStarted(int imageIndex),protected void,Broadcasts the start of an image read to all registered IIOReadProgressListeners by calling their imageStarted method.
ImageReader,"processImageUpdate(BufferedImage theImage, int minX, int minY, int width, int height, int periodX, int periodY, int[] bands)",protected void,Broadcasts the update of a set of samples to all registered IIOReadUpdateListeners by calling their imageUpdate method.
ImageReader,processPassComplete(BufferedImage theImage),protected void,Broadcasts the end of a progressive pass to all registered IIOReadUpdateListeners by calling their passComplete method.
ImageReader,"processPassStarted(BufferedImage theImage, int pass, int minPass, int maxPass, int minX, int minY, int periodX, int periodY, int[] bands)",protected void,Broadcasts the beginning of a progressive pass to all registered IIOReadUpdateListeners by calling their passStarted method.
ImageReader,processReadAborted(),protected void,Broadcasts that the read has been aborted to all registered IIOReadProgressListeners by calling their readAborted method.
ImageReader,processSequenceComplete(),protected void,Broadcasts the completion of an sequence of image reads to all registered IIOReadProgressListeners by calling their sequenceComplete method.
ImageReader,processSequenceStarted(int minIndex),protected void,Broadcasts the start of an sequence of image reads to all registered IIOReadProgressListeners by calling their sequenceStarted method.
ImageReader,processThumbnailComplete(),protected void,Broadcasts the completion of a thumbnail read to all registered IIOReadProgressListeners by calling their thumbnailComplete method.
ImageReader,processThumbnailPassComplete(BufferedImage theThumbnail),protected void,Broadcasts the end of a thumbnail progressive pass to all registered IIOReadUpdateListeners by calling their thumbnailPassComplete method.
ImageReader,"processThumbnailPassStarted(BufferedImage theThumbnail, int pass, int minPass, int maxPass, int minX, int minY, int periodX, int periodY, int[] bands)",protected void,Broadcasts the beginning of a thumbnail progressive pass to all registered IIOReadUpdateListeners by calling their thumbnailPassStarted method.
ImageReader,processThumbnailProgress(float percentageDone),protected void,Broadcasts the current percentage of thumbnail completion to all registered IIOReadProgressListeners by calling their thumbnailProgress method.
ImageReader,"processThumbnailStarted(int imageIndex, int thumbnailIndex)",protected void,Broadcasts the start of a thumbnail read to all registered IIOReadProgressListeners by calling their thumbnailStarted method.
ImageReader,"processThumbnailUpdate(BufferedImage theThumbnail, int minX, int minY, int width, int height, int periodX, int periodY, int[] bands)",protected void,Broadcasts the update of a set of samples in a thumbnail image to all registered IIOReadUpdateListeners by calling their thumbnailUpdate method.
ImageReader,processWarningOccurred(String warning),protected void,Broadcasts a warning message to all registered IIOReadWarningListeners by calling their warningOccurred method.
ImageReader,"processWarningOccurred(String baseName, String keyword)",protected void,Broadcasts a localized warning message to all registered IIOReadWarningListeners by calling their warningOccurred method with a string taken from a ResourceBundle.
ImageReader,read(int imageIndex),BufferedImage,"Reads the image indexed by imageIndex and returns it as a complete BufferedImage, using a default ImageReadParam."
ImageReader,"read(int imageIndex, ImageReadParam param)",abstract BufferedImage,"Reads the image indexed by imageIndex and returns it as a complete BufferedImage, using a supplied ImageReadParam."
ImageReader,"readAll(int imageIndex, ImageReadParam param)",IIOImage,"Reads the image indexed by imageIndex and returns an IIOImage containing the image, thumbnails, and associated image metadata, using a supplied ImageReadParam."
ImageReader,readAll(Iterator<? extends ImageReadParam> params),Iterator<IIOImage>,"Returns an Iterator containing all the images, thumbnails, and metadata, starting at the index given by getMinIndex, from the input source in the form of IIOImage objects."
ImageReader,"readAsRenderedImage(int imageIndex, ImageReadParam param)",RenderedImage,Returns a RenderedImage object that contains the contents of the image indexed by imageIndex.
ImageReader,readerSupportsThumbnails(),boolean,Returns true if the image format understood by this reader supports thumbnail preview images associated with it.
ImageReader,"readRaster(int imageIndex, ImageReadParam param)",Raster,"Returns a new Raster object containing the raw pixel data from the image stream, without any color conversion applied."
ImageReader,"readThumbnail(int imageIndex, int thumbnailIndex)",BufferedImage,"Returns the thumbnail preview image indexed by thumbnailIndex, associated with the image indexed by ImageIndex as a BufferedImage."
ImageReader,"readTile(int imageIndex, int tileX, int tileY)",BufferedImage,"Reads the tile indicated by the tileX and tileY arguments, returning it as a BufferedImage."
ImageReader,"readTileRaster(int imageIndex, int tileX, int tileY)",Raster,"Returns a new Raster object containing the raw pixel data from the tile, without any color conversion applied."
ImageReader,removeAllIIOReadProgressListeners(),void,Removes all currently registered IIOReadProgressListener objects.
ImageReader,removeAllIIOReadUpdateListeners(),void,Removes all currently registered IIOReadUpdateListener objects.
ImageReader,removeAllIIOReadWarningListeners(),void,Removes all currently registered IIOReadWarningListener objects.
ImageReader,removeIIOReadProgressListener(IIOReadProgressListener listener),void,Removes an IIOReadProgressListener from the list of registered progress listeners.
ImageReader,removeIIOReadUpdateListener(IIOReadUpdateListener listener),void,Removes an IIOReadUpdateListener from the list of registered update listeners.
ImageReader,removeIIOReadWarningListener(IIOReadWarningListener listener),void,Removes an IIOReadWarningListener from the list of registered error listeners.
ImageReader,reset(),void,Restores the ImageReader to its initial state.
ImageReader,setInput(Object input),void,Sets the input source to use to the given ImageInputStream or other Object.
ImageReader,"setInput(Object input, boolean seekForwardOnly)",void,Sets the input source to use to the given ImageInputStream or other Object.
ImageReader,"setInput(Object input, boolean seekForwardOnly, boolean ignoreMetadata)",void,Sets the input source to use to the given ImageInputStream or other Object.
ImageReader,setLocale(Locale locale),void,Sets the current Locale of this ImageReader to the given value.
ImageReadParam,canSetSourceRenderSize(),boolean,"Returns true if this reader allows the source image to be rendered at an arbitrary size as part of the decoding process, by means of the setSourceRenderSize method."
ImageReadParam,getDestination(),BufferedImage,"Returns the BufferedImage currently set by the setDestination method, or null if none is set."
ImageReadParam,getDestinationBands(),int[],Returns the set of band indices where data will be placed.
ImageReadParam,getSourceMaxProgressivePass(),int,"If getSourceNumProgressivePasses is equal to Integer.MAX_VALUE, returns Integer.MAX_VALUE."
ImageReadParam,getSourceMinProgressivePass(),int,Returns the index of the first progressive pass that will be decoded.
ImageReadParam,getSourceNumProgressivePasses(),int,Returns the number of the progressive passes that will be decoded.
ImageReadParam,getSourceRenderSize(),Dimension,"Returns the width and height of the source image as it will be rendered during decoding, if they have been set via the setSourceRenderSize method."
ImageReadParam,setDestination(BufferedImage destination),void,Supplies a BufferedImage to be used as the destination for decoded pixel data.
ImageReadParam,setDestinationBands(int[] destinationBands),void,Sets the indices of the destination bands where data will be placed.
ImageReadParam,setDestinationType(ImageTypeSpecifier destinationType),void,"Sets the desired image type for the destination image, using an ImageTypeSpecifier."
ImageReadParam,"setSourceProgressivePasses(int minPass, int numPasses)",void,Sets the range of progressive passes that will be decoded.
ImageReadParam,setSourceRenderSize(Dimension size),void,"If the image is able to be rendered at an arbitrary size, sets the source width and height to the supplied values."
ImageTypeSpecifier,"createBanded(ColorSpace colorSpace, int[] bankIndices, int[] bandOffsets, int dataType, boolean hasAlpha, boolean isAlphaPremultiplied)",static ImageTypeSpecifier,Returns a specifier for a banded image format that will use a ComponentColorModel and a BandedSampleModel to store each channel in a separate array.
ImageTypeSpecifier,"createBufferedImage(int width, int height)",BufferedImage,Creates a BufferedImage with a given width and height according to the specification embodied in this object.
ImageTypeSpecifier,createFromBufferedImageType(int bufferedImageType),static ImageTypeSpecifier,Returns an ImageTypeSpecifier that encodes one of the standard BufferedImage types (other than TYPE_CUSTOM).
ImageTypeSpecifier,createFromRenderedImage(RenderedImage image),static ImageTypeSpecifier,Returns an ImageTypeSpecifier that encodes the layout of a RenderedImage (which may be a BufferedImage).
ImageTypeSpecifier,"createGrayscale(int bits, int dataType, boolean isSigned)",static ImageTypeSpecifier,Returns a specifier for a grayscale image format that will pack pixels of the given bit depth into array elements of the specified data type.
ImageTypeSpecifier,"createGrayscale(int bits, int dataType, boolean isSigned, boolean isAlphaPremultiplied)",static ImageTypeSpecifier,Returns a specifier for a grayscale plus alpha image format that will pack pixels of the given bit depth into array elements of the specified data type.
ImageTypeSpecifier,"createIndexed(byte[] redLUT, byte[] greenLUT, byte[] blueLUT, byte[] alphaLUT, int bits, int dataType)",static ImageTypeSpecifier,Returns a specifier for an indexed-color image format that will pack index values of the given bit depth into array elements of the specified data type.
ImageTypeSpecifier,"createInterleaved(ColorSpace colorSpace, int[] bandOffsets, int dataType, boolean hasAlpha, boolean isAlphaPremultiplied)",static ImageTypeSpecifier,"Returns a specifier for an interleaved image format that will use a ComponentColorModel and a PixelInterleavedSampleModel to store each pixel component in a separate byte, short, or int."
ImageTypeSpecifier,"createPacked(ColorSpace colorSpace, int redMask, int greenMask, int blueMask, int alphaMask, int transferType, boolean isAlphaPremultiplied)",static ImageTypeSpecifier,"Returns a specifier for a packed image format that will use a DirectColorModel and a packed SampleModel to store each pixel packed into in a single byte, short, or int."
ImageTypeSpecifier,equals(Object o),boolean,Returns true if the given Object is an ImageTypeSpecifier and has a SampleModel and ColorModel that are equal to those of this object.
ImageTypeSpecifier,getBitsPerBand(int band),int,Return the number of bits used to represent samples of the given band.
ImageTypeSpecifier,getBufferedImageType(),int,Returns an int containing one of the enumerated constant values describing image formats from BufferedImage.
ImageTypeSpecifier,getColorModel(),ColorModel,Returns the ColorModel specified by this object.
ImageTypeSpecifier,getNumBands(),int,Return the number of bands specified by this object.
ImageTypeSpecifier,getNumComponents(),int,Return the number of color components specified by this object.
ImageTypeSpecifier,getSampleModel(),SampleModel,Returns a SampleModel based on the settings encapsulated within this object.
ImageTypeSpecifier,"getSampleModel(int width, int height)",SampleModel,Returns a SampleModel based on the settings encapsulated within this object.
ImageTypeSpecifier,hashCode(),int,Returns the hash code for this ImageTypeSpecifier.
ImageWriteParam,canOffsetTiles(),boolean,Returns true if the writer can perform tiling with non-zero grid offsets while writing.
ImageWriteParam,canWriteCompressed(),boolean,Returns true if this writer supports compression.
ImageWriteParam,canWriteProgressive(),boolean,Returns true if the writer can write out images as a series of passes of progressively increasing quality.
ImageWriteParam,canWriteTiles(),boolean,Returns true if the writer can perform tiling while writing.
ImageWriteParam,getBitRate(float quality),float,Returns a float indicating an estimate of the number of bits of output data for each bit of input image data at the given quality level.
ImageWriteParam,getCompressionMode(),int,"Returns the current compression mode, if compression is supported."
ImageWriteParam,getCompressionQuality(),float,Returns the current compression quality setting.
ImageWriteParam,getCompressionQualityDescriptions(),String[],Returns an array of Strings that may be used along with getCompressionQualityValues as part of a user interface for setting or displaying the compression quality level.
ImageWriteParam,getCompressionQualityValues(),float[],Returns an array of floats that may be used along with getCompressionQualityDescriptions as part of a user interface for setting or displaying the compression quality level.
ImageWriteParam,getCompressionType(),String,"Returns the currently set compression type, or null if none has been set."
ImageWriteParam,getCompressionTypes(),String[],"Returns a list of available compression types, as an array or Strings, or null if a compression type may not be chosen using these interfaces."
ImageWriteParam,getLocale(),Locale,"Returns the currently set Locale, or null if only a default Locale is supported."
ImageWriteParam,getLocalizedCompressionTypeName(),String,"Returns a localized version of the name of the current compression type, using the Locale returned by getLocale."
ImageWriteParam,getPreferredTileSizes(),Dimension[],Returns an array of Dimensions indicating the legal size ranges for tiles as they will be encoded in the output file or stream.
ImageWriteParam,getProgressiveMode(),int,Returns the current mode for writing the stream in a progressive manner.
ImageWriteParam,getTileGridXOffset(),int,Returns the horizontal tile grid offset of an image as it will be written to the output stream.
ImageWriteParam,getTileGridYOffset(),int,Returns the vertical tile grid offset of an image as it will be written to the output stream.
ImageWriteParam,getTileHeight(),int,Returns the height of each tile in an image as it will be written to the output stream.
ImageWriteParam,getTileWidth(),int,Returns the width of each tile in an image as it will be written to the output stream.
ImageWriteParam,getTilingMode(),int,"Returns the current tiling mode, if tiling is supported."
ImageWriteParam,isCompressionLossless(),boolean,Returns true if the current compression type provides lossless compression.
ImageWriteParam,setCompressionMode(int mode),void,"Specifies whether compression is to be performed, and if so how compression parameters are to be determined."
ImageWriteParam,setCompressionQuality(float quality),void,Sets the compression quality to a value between 0 and 1.
ImageWriteParam,setCompressionType(String compressionType),void,Sets the compression type to one of the values indicated by getCompressionTypes.
ImageWriteParam,setProgressiveMode(int mode),void,Specifies that the writer is to write the image out in a progressive mode such that the stream will contain a series of scans of increasing quality.
ImageWriteParam,"setTiling(int tileWidth, int tileHeight, int tileGridXOffset, int tileGridYOffset)",void,Specifies that the image should be tiled in the output stream.
ImageWriteParam,setTilingMode(int mode),void,"Determines whether the image will be tiled in the output stream and, if it will, how the tiling parameters will be determined."
ImageWriteParam,unsetCompression(),void,Removes any previous compression type and quality settings.
ImageWriteParam,unsetTiling(),void,Removes any previous tile grid parameters specified by calls to setTiling.
ImageWriter,abort(),void,Requests that any current write operation be aborted.
ImageWriter,abortRequested(),protected boolean,Returns true if a request to abort the current write operation has been made since the writer was instantiated or clearAbortRequest was called.
ImageWriter,addIIOWriteProgressListener(IIOWriteProgressListener listener),void,Adds an IIOWriteProgressListener to the list of registered progress listeners.
ImageWriter,addIIOWriteWarningListener(IIOWriteWarningListener listener),void,Adds an IIOWriteWarningListener to the list of registered warning listeners.
ImageWriter,canInsertEmpty(int imageIndex),boolean,"Returns true if the writer supports the insertion of a new, empty image at the given index."
ImageWriter,canInsertImage(int imageIndex),boolean,Returns true if the writer supports the insertion of a new image at the given index.
ImageWriter,canRemoveImage(int imageIndex),boolean,Returns true if the writer supports the removal of an existing image at the given index.
ImageWriter,canReplaceImageMetadata(int imageIndex),boolean,Returns true if it is possible to replace the image metadata associated with an existing image with index imageIndex.
ImageWriter,canReplacePixels(int imageIndex),boolean,Returns true if the writer allows pixels of the given image to be replaced using the replacePixels methods.
ImageWriter,canReplaceStreamMetadata(),boolean,Returns true if it is possible to replace the stream metadata already present in the output.
ImageWriter,canWriteEmpty(),boolean,Returns true if the writer supports the writing of a complete image stream consisting of a single image with undefined pixel values and associated metadata and thumbnails to the output.
ImageWriter,canWriteRasters(),boolean,Returns true if the methods that take an IIOImage parameter are capable of dealing with a Raster (as opposed to RenderedImage) source image.
ImageWriter,canWriteSequence(),boolean,Returns true if the writer is able to append an image to an image stream that already contains header information and possibly prior images.
ImageWriter,clearAbortRequest(),protected void,Clears any previous abort request.
ImageWriter,"convertImageMetadata(IIOMetadata inData, ImageTypeSpecifier imageType, ImageWriteParam param)",abstract IIOMetadata,Returns an IIOMetadata object that may be used for encoding and optionally modified using its document interfaces or other interfaces specific to the writer plug-in that will be used for encoding.
ImageWriter,"convertStreamMetadata(IIOMetadata inData, ImageWriteParam param)",abstract IIOMetadata,Returns an IIOMetadata object that may be used for encoding and optionally modified using its document interfaces or other interfaces specific to the writer plug-in that will be used for encoding.
ImageWriter,dispose(),void,Allows any resources held by this object to be released.
ImageWriter,endInsertEmpty(),void,Completes the insertion of a new image that was begun with a prior call to prepareInsertEmpty.
ImageWriter,endReplacePixels(),void,Terminates a sequence of calls to replacePixels.
ImageWriter,endWriteEmpty(),void,Completes the writing of a new image that was begun with a prior call to prepareWriteEmpty.
ImageWriter,endWriteSequence(),void,Completes the writing of a sequence of images begun with prepareWriteSequence.
ImageWriter,getAvailableLocales(),Locale[],Returns an array of Locales that may be used to localize warning listeners and compression settings.
ImageWriter,"getDefaultImageMetadata(ImageTypeSpecifier imageType, ImageWriteParam param)",abstract IIOMetadata,Returns an IIOMetadata object containing default values for encoding an image of the given type.
ImageWriter,getDefaultStreamMetadata(ImageWriteParam param),abstract IIOMetadata,Returns an IIOMetadata object containing default values for encoding a stream of images.
ImageWriter,getDefaultWriteParam(),ImageWriteParam,"Returns a new ImageWriteParam object of the appropriate type for this file format containing default values, that is, those values that would be used if no ImageWriteParam object were specified."
ImageWriter,getLocale(),Locale,"Returns the currently set Locale, or null if none has been set."
ImageWriter,"getNumThumbnailsSupported(ImageTypeSpecifier imageType, ImageWriteParam param, IIOMetadata streamMetadata, IIOMetadata imageMetadata)",int,"Returns the number of thumbnails supported by the format being written, given the image type and any additional write parameters and metadata objects that will be used during encoding."
ImageWriter,getOriginatingProvider(),ImageWriterSpi,"Returns the ImageWriterSpi object that created this ImageWriter, or null if this object was not created through the IIORegistry."
ImageWriter,getOutput(),Object,Returns the ImageOutputStream or other Object set by the most recent call to the setOutput method.
ImageWriter,"getPreferredThumbnailSizes(ImageTypeSpecifier imageType, ImageWriteParam param, IIOMetadata streamMetadata, IIOMetadata imageMetadata)",Dimension[],Returns an array of Dimensions indicating the legal size ranges for thumbnail images as they will be encoded in the output file or stream.
ImageWriter,"prepareInsertEmpty(int imageIndex, ImageTypeSpecifier imageType, int width, int height, IIOMetadata imageMetadata, List<? extends BufferedImage> thumbnails, ImageWriteParam param)",void,Begins the insertion of a new image with undefined pixel values into an existing image stream.
ImageWriter,"prepareReplacePixels(int imageIndex, Rectangle region)",void,Prepares the writer to handle a series of calls to the replacePixels methods.
ImageWriter,"prepareWriteEmpty(IIOMetadata streamMetadata, ImageTypeSpecifier imageType, int width, int height, IIOMetadata imageMetadata, List<? extends BufferedImage> thumbnails, ImageWriteParam param)",void,"Begins the writing of a complete image stream, consisting of a single image with undefined pixel values and associated metadata and thumbnails, to the output."
ImageWriter,prepareWriteSequence(IIOMetadata streamMetadata),void,"Prepares a stream to accept a series of subsequent writeToSequence calls, using the provided stream metadata object."
ImageWriter,processImageComplete(),protected void,Broadcasts the completion of an image write to all registered IIOWriteProgressListeners by calling their imageComplete method.
ImageWriter,processImageProgress(float percentageDone),protected void,Broadcasts the current percentage of image completion to all registered IIOWriteProgressListeners by calling their imageProgress method.
ImageWriter,processImageStarted(int imageIndex),protected void,Broadcasts the start of an image write to all registered IIOWriteProgressListeners by calling their imageStarted method.
ImageWriter,processThumbnailComplete(),protected void,Broadcasts the completion of a thumbnail write to all registered IIOWriteProgressListeners by calling their thumbnailComplete method.
ImageWriter,processThumbnailProgress(float percentageDone),protected void,Broadcasts the current percentage of thumbnail completion to all registered IIOWriteProgressListeners by calling their thumbnailProgress method.
ImageWriter,"processThumbnailStarted(int imageIndex, int thumbnailIndex)",protected void,Broadcasts the start of a thumbnail write to all registered IIOWriteProgressListeners by calling their thumbnailStarted method.
ImageWriter,"processWarningOccurred(int imageIndex, String warning)",protected void,Broadcasts a warning message to all registered IIOWriteWarningListeners by calling their warningOccurred method.
ImageWriter,"processWarningOccurred(int imageIndex, String baseName, String keyword)",protected void,Broadcasts a localized warning message to all registered IIOWriteWarningListeners by calling their warningOccurred method with a string taken from a ResourceBundle.
ImageWriter,processWriteAborted(),protected void,Broadcasts that the write has been aborted to all registered IIOWriteProgressListeners by calling their writeAborted method.
ImageWriter,removeAllIIOWriteProgressListeners(),void,Removes all currently registered IIOWriteProgressListener objects.
ImageWriter,removeAllIIOWriteWarningListeners(),void,Removes all currently registered IIOWriteWarningListener objects.
ImageWriter,removeIIOWriteProgressListener(IIOWriteProgressListener listener),void,Removes an IIOWriteProgressListener from the list of registered progress listeners.
ImageWriter,removeIIOWriteWarningListener(IIOWriteWarningListener listener),void,Removes an IIOWriteWarningListener from the list of registered warning listeners.
ImageWriter,removeImage(int imageIndex),void,Removes an image from the stream.
ImageWriter,"replaceImageMetadata(int imageIndex, IIOMetadata imageMetadata)",void,Replaces the image metadata associated with an existing image.
ImageWriter,"replacePixels(Raster raster, ImageWriteParam param)",void,Replaces a portion of an image already present in the output with a portion of the given Raster.
ImageWriter,"replacePixels(RenderedImage image, ImageWriteParam param)",void,Replaces a portion of an image already present in the output with a portion of the given image.
ImageWriter,replaceStreamMetadata(IIOMetadata streamMetadata),void,Replaces the stream metadata in the output with new information.
ImageWriter,reset(),void,Restores the ImageWriter to its initial state.
ImageWriter,setLocale(Locale locale),void,Sets the current Locale of this ImageWriter to the given value.
ImageWriter,setOutput(Object output),void,Sets the destination to the given ImageOutputStream or other Object.
ImageWriter,write(IIOImage image),void,Appends a complete image stream containing a single image with default metadata and thumbnails to the output.
ImageWriter,"write(IIOMetadata streamMetadata, IIOImage image, ImageWriteParam param)",abstract void,Appends a complete image stream containing a single image and associated stream and image metadata and thumbnails to the output.
ImageWriter,write(RenderedImage image),void,Appends a complete image stream consisting of a single image with default metadata and thumbnails to the output.
ImageWriter,"writeInsert(int imageIndex, IIOImage image, ImageWriteParam param)",void,Inserts a new image into an existing image stream.
ImageWriter,"writeToSequence(IIOImage image, ImageWriteParam param)",void,"Appends a single image and possibly associated metadata and thumbnails, to the output."
