ClassName,Method,Return Type,Description
AccessControlContext,checkPermission(Permission perm),void,"Determines whether the access request indicated by the specified permission should be allowed or denied, based on the security policy currently in effect, and the context in this object."
AccessControlContext,equals(Object obj),boolean,Checks two AccessControlContext objects for equality.
AccessControlContext,getDomainCombiner(),DomainCombiner,Get the DomainCombiner associated with this AccessControlContext.
AccessControlContext,hashCode(),int,Returns the hash code value for this context.
AccessController,checkPermission(Permission perm),static void,"Determines whether the access request indicated by the specified permission should be allowed or denied, based on the current AccessControlContext and security policy."
AccessController,doPrivileged(PrivilegedAction<T> action),static <T> T,Performs the specified PrivilegedAction with privileges enabled.
AccessController,"doPrivileged(PrivilegedAction<T> action, AccessControlContext context)",static <T> T,Performs the specified PrivilegedAction with privileges enabled and restricted by the specified AccessControlContext.
AccessController,"doPrivileged(PrivilegedAction<T> action, AccessControlContext context, Permission... perms)",static <T> T,Performs the specified PrivilegedAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments.
AccessController,doPrivileged(PrivilegedExceptionAction<T> action),static <T> T,Performs the specified PrivilegedExceptionAction with privileges enabled.
AccessController,"doPrivileged(PrivilegedExceptionAction<T> action, AccessControlContext context)",static <T> T,Performs the specified PrivilegedExceptionAction with privileges enabled and restricted by the specified AccessControlContext.
AccessController,"doPrivileged(PrivilegedExceptionAction<T> action, AccessControlContext context, Permission... perms)",static <T> T,Performs the specified PrivilegedExceptionAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments.
AccessController,doPrivilegedWithCombiner(PrivilegedAction<T> action),static <T> T,Performs the specified PrivilegedAction with privileges enabled.
AccessController,"doPrivilegedWithCombiner(PrivilegedAction<T> action, AccessControlContext context, Permission... perms)",static <T> T,Performs the specified PrivilegedAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments.
AccessController,doPrivilegedWithCombiner(PrivilegedExceptionAction<T> action),static <T> T,Performs the specified PrivilegedExceptionAction with privileges enabled.
AccessController,"doPrivilegedWithCombiner(PrivilegedExceptionAction<T> action, AccessControlContext context, Permission... perms)",static <T> T,Performs the specified PrivilegedExceptionAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments.
AccessController,getContext(),static AccessControlContext,"This method takes a ""snapshot"" of the current calling context, which includes the current Thread's inherited AccessControlContext and any limited privilege scope, and places it in an AccessControlContext object."
AlgorithmParameterGenerator,generateParameters(),AlgorithmParameters,Generates the parameters.
AlgorithmParameterGenerator,getAlgorithm(),String,Returns the standard name of the algorithm this parameter generator is associated with.
AlgorithmParameterGenerator,getInstance(String algorithm),static AlgorithmParameterGenerator,Returns an AlgorithmParameterGenerator object for generating a set of parameters to be used with the specified algorithm.
AlgorithmParameterGenerator,"getInstance(String algorithm, Provider provider)",static AlgorithmParameterGenerator,Returns an AlgorithmParameterGenerator object for generating a set of parameters to be used with the specified algorithm.
AlgorithmParameterGenerator,"getInstance(String algorithm, String provider)",static AlgorithmParameterGenerator,Returns an AlgorithmParameterGenerator object for generating a set of parameters to be used with the specified algorithm.
AlgorithmParameterGenerator,getProvider(),Provider,Returns the provider of this algorithm parameter generator object.
AlgorithmParameterGenerator,init(AlgorithmParameterSpec genParamSpec),void,Initializes this parameter generator with a set of algorithm-specific parameter generation values.
AlgorithmParameterGenerator,"init(AlgorithmParameterSpec genParamSpec, SecureRandom random)",void,Initializes this parameter generator with a set of algorithm-specific parameter generation values.
AlgorithmParameterGenerator,init(int size),void,Initializes this parameter generator for a certain size.
AlgorithmParameterGenerator,"init(int size, SecureRandom random)",void,Initializes this parameter generator for a certain size and source of randomness.
AlgorithmParameterGeneratorSpi,engineGenerateParameters(),protected abstract AlgorithmParameters,Generates the parameters.
AlgorithmParameterGeneratorSpi,"engineInit(AlgorithmParameterSpec genParamSpec, SecureRandom random)",protected abstract void,Initializes this parameter generator with a set of algorithm-specific parameter generation values.
AlgorithmParameterGeneratorSpi,"engineInit(int size, SecureRandom random)",protected abstract void,Initializes this parameter generator for a certain size and source of randomness.
AlgorithmParameters,getAlgorithm(),String,Returns the name of the algorithm associated with this parameter object.
AlgorithmParameters,getEncoded(),byte[],Returns the parameters in their primary encoding format.
AlgorithmParameters,getEncoded(String format),byte[],Returns the parameters encoded in the specified scheme.
AlgorithmParameters,getInstance(String algorithm),static AlgorithmParameters,Returns a parameter object for the specified algorithm.
AlgorithmParameters,"getInstance(String algorithm, Provider provider)",static AlgorithmParameters,Returns a parameter object for the specified algorithm.
AlgorithmParameters,"getInstance(String algorithm, String provider)",static AlgorithmParameters,Returns a parameter object for the specified algorithm.
AlgorithmParameters,getParameterSpec(Class<T> paramSpec),<T extends AlgorithmParameterSpec>T,Returns a (transparent) specification of this parameter object.
AlgorithmParameters,getProvider(),Provider,Returns the provider of this parameter object.
AlgorithmParameters,init(AlgorithmParameterSpec paramSpec),void,Initializes this parameter object using the parameters specified in paramSpec.
AlgorithmParameters,init(byte[] params),void,Imports the specified parameters and decodes them according to the primary decoding format for parameters.
AlgorithmParameters,"init(byte[] params, String format)",void,Imports the parameters from params and decodes them according to the specified decoding scheme.
AlgorithmParameters,toString(),String,Returns a formatted string describing the parameters.
AlgorithmParametersSpi,engineGetEncoded(),protected abstract byte[],Returns the parameters in their primary encoding format.
AlgorithmParametersSpi,engineGetEncoded(String format),protected abstract byte[],Returns the parameters encoded in the specified format.
AlgorithmParametersSpi,engineGetParameterSpec(Class<T> paramSpec),protected abstract <T extends AlgorithmParameterSpec>T,Returns a (transparent) specification of this parameters object.
AlgorithmParametersSpi,engineInit(AlgorithmParameterSpec paramSpec),protected abstract void,Initializes this parameters object using the parameters specified in paramSpec.
AlgorithmParametersSpi,engineInit(byte[] params),protected abstract void,Imports the specified parameters and decodes them according to the primary decoding format for parameters.
AlgorithmParametersSpi,"engineInit(byte[] params, String format)",protected abstract void,Imports the parameters from params and decodes them according to the specified decoding format.
AlgorithmParametersSpi,engineToString(),protected abstract String,Returns a formatted string describing the parameters.
AllPermission,equals(Object obj),boolean,Checks two AllPermission objects for equality.
AllPermission,getActions(),String,Returns the canonical string representation of the actions.
AllPermission,hashCode(),int,Returns the hash code value for this object.
AllPermission,implies(Permission p),boolean,"Checks if the specified permission is ""implied"" by this object."
AllPermission,newPermissionCollection(),PermissionCollection,Returns a new PermissionCollection object for storing AllPermission objects.
AuthProvider,"login(Subject subject, CallbackHandler handler)",abstract void,Log in to this provider.
AuthProvider,logout(),abstract void,Log out from this provider.
AuthProvider,setCallbackHandler(CallbackHandler handler),abstract void,Set a CallbackHandler.
BasicPermission,equals(Object obj),boolean,Checks two BasicPermission objects for equality.
BasicPermission,getActions(),String,"Returns the canonical string representation of the actions, which currently is the empty string """", since there are no actions for a BasicPermission."
BasicPermission,hashCode(),int,Returns the hash code value for this object.
BasicPermission,implies(Permission p),boolean,"Checks if the specified permission is ""implied"" by this object."
BasicPermission,newPermissionCollection(),PermissionCollection,Returns a new PermissionCollection object for storing BasicPermission objects.
CodeSigner,equals(Object obj),boolean,Tests for equality between the specified object and this code signer.
CodeSigner,getSignerCertPath(),CertPath,Returns the signer's certificate path.
CodeSigner,getTimestamp(),Timestamp,Returns the signature timestamp.
CodeSigner,hashCode(),int,Returns the hash code value for this code signer.
CodeSigner,toString(),String,Returns a string describing this code signer.
CodeSource,equals(Object obj),boolean,Tests for equality between the specified object and this object.
CodeSource,getCertificates(),Certificate[],Returns the certificates associated with this CodeSource.
CodeSource,getCodeSigners(),CodeSigner[],Returns the code signers associated with this CodeSource.
CodeSource,getLocation(),URL,Returns the location associated with this CodeSource.
CodeSource,hashCode(),int,Returns the hash code value for this object.
CodeSource,implies(CodeSource codesource),boolean,"Returns true if this CodeSource object ""implies"" the specified CodeSource."
CodeSource,toString(),String,"Returns a string describing this CodeSource, telling its URL and certificates."
DigestInputStream,getMessageDigest(),MessageDigest,Returns the message digest associated with this stream.
DigestInputStream,on(boolean on),void,Turns the digest function on or off.
DigestInputStream,read(),int,"Reads a byte, and updates the message digest (if the digest function is on)."
DigestInputStream,"read(byte[] b, int off, int len)",int,"Reads into a byte array, and updates the message digest (if the digest function is on)."
DigestInputStream,setMessageDigest(MessageDigest digest),void,Associates the specified message digest with this stream.
DigestInputStream,toString(),String,Prints a string representation of this digest input stream and its associated message digest object.
DigestOutputStream,getMessageDigest(),MessageDigest,Returns the message digest associated with this stream.
DigestOutputStream,on(boolean on),void,Turns the digest function on or off.
DigestOutputStream,setMessageDigest(MessageDigest digest),void,Associates the specified message digest with this stream.
DigestOutputStream,toString(),String,Prints a string representation of this digest output stream and its associated message digest object.
DigestOutputStream,"write(byte[] b, int off, int len)",void,"Updates the message digest (if the digest function is on) using the specified subarray, and in any case writes the subarray to the output stream."
DigestOutputStream,write(int b),void,"Updates the message digest (if the digest function is on) using the specified byte, and in any case writes the byte to the output stream."
DomainLoadStoreParameter,getConfiguration(),URI,Gets the identifier for the domain configuration data.
DomainLoadStoreParameter,getProtectionParameter(),KeyStore.ProtectionParameter,Gets the keystore protection parameters for this domain.
DomainLoadStoreParameter,getProtectionParams(),"Map<String,KeyStore.ProtectionParameter>",Gets the keystore protection parameters for keystores in this domain.
GuardedObject,getObject(),Object,"Retrieves the guarded object, or throws an exception if access to the guarded object is denied by the guard."
Identity,addCertificate(Certificate certificate),void,Deprecated.
Identity,certificates(),Certificate[],Deprecated.
Identity,equals(Object identity),boolean,Deprecated.
Identity,getInfo(),String,Deprecated.
Identity,getName(),String,Deprecated.
Identity,getPublicKey(),PublicKey,Deprecated.
Identity,getScope(),IdentityScope,Deprecated.
Identity,hashCode(),int,Deprecated.
Identity,identityEquals(Identity identity),protected boolean,Deprecated.
Identity,removeCertificate(Certificate certificate),void,Deprecated.
Identity,setInfo(String info),void,Deprecated.
Identity,setPublicKey(PublicKey key),void,Deprecated.
Identity,toString(),String,Deprecated.
Identity,toString(boolean detailed),String,Deprecated.
IdentityScope,addIdentity(Identity identity),abstract void,Deprecated.
IdentityScope,getIdentity(Principal principal),Identity,Deprecated.
IdentityScope,getIdentity(PublicKey key),abstract Identity,Deprecated.
IdentityScope,getIdentity(String name),abstract Identity,Deprecated.
IdentityScope,getSystemScope(),static IdentityScope,Deprecated.
IdentityScope,identities(),abstract Enumeration<Identity>,Deprecated.
IdentityScope,removeIdentity(Identity identity),abstract void,Deprecated.
IdentityScope,setSystemScope(IdentityScope scope),protected static void,Deprecated.
IdentityScope,size(),abstract int,Deprecated.
IdentityScope,toString(),String,Deprecated.
KeyFactory,generatePrivate(KeySpec keySpec),PrivateKey,Generates a private key object from the provided key specification (key material).
KeyFactory,generatePublic(KeySpec keySpec),PublicKey,Generates a public key object from the provided key specification (key material).
KeyFactory,getAlgorithm(),String,Gets the name of the algorithm associated with this KeyFactory.
KeyFactory,getInstance(String algorithm),static KeyFactory,Returns a KeyFactory object that converts public/private keys of the specified algorithm.
KeyFactory,"getInstance(String algorithm, Provider provider)",static KeyFactory,Returns a KeyFactory object that converts public/private keys of the specified algorithm.
KeyFactory,"getInstance(String algorithm, String provider)",static KeyFactory,Returns a KeyFactory object that converts public/private keys of the specified algorithm.
KeyFactory,"getKeySpec(Key key, Class<T> keySpec)",<T extends KeySpec>T,Returns a specification (key material) of the given key object.
KeyFactory,getProvider(),Provider,Returns the provider of this key factory object.
KeyFactory,translateKey(Key key),Key,"Translates a key object, whose provider may be unknown or potentially untrusted, into a corresponding key object of this key factory."
KeyFactorySpi,engineGeneratePrivate(KeySpec keySpec),protected abstract PrivateKey,Generates a private key object from the provided key specification (key material).
KeyFactorySpi,engineGeneratePublic(KeySpec keySpec),protected abstract PublicKey,Generates a public key object from the provided key specification (key material).
KeyFactorySpi,"engineGetKeySpec(Key key, Class<T> keySpec)",protected abstract <T extends KeySpec>T,Returns a specification (key material) of the given key object.
KeyFactorySpi,engineTranslateKey(Key key),protected abstract Key,"Translates a key object, whose provider may be unknown or potentially untrusted, into a corresponding key object of this key factory."
KeyPair,getPrivate(),PrivateKey,Returns a reference to the private key component of this key pair.
KeyPair,getPublic(),PublicKey,Returns a reference to the public key component of this key pair.
KeyPairGenerator,generateKeyPair(),KeyPair,Generates a key pair.
KeyPairGenerator,genKeyPair(),KeyPair,Generates a key pair.
KeyPairGenerator,getAlgorithm(),String,Returns the standard name of the algorithm for this key pair generator.
KeyPairGenerator,getInstance(String algorithm),static KeyPairGenerator,Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm.
KeyPairGenerator,"getInstance(String algorithm, Provider provider)",static KeyPairGenerator,Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm.
KeyPairGenerator,"getInstance(String algorithm, String provider)",static KeyPairGenerator,Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm.
KeyPairGenerator,getProvider(),Provider,Returns the provider of this key pair generator object.
KeyPairGenerator,initialize(AlgorithmParameterSpec params),void,Initializes the key pair generator using the specified parameter set and the SecureRandom implementation of the highest-priority installed provider as the source of randomness.
KeyPairGenerator,"initialize(AlgorithmParameterSpec params, SecureRandom random)",void,Initializes the key pair generator with the given parameter set and source of randomness.
KeyPairGenerator,initialize(int keysize),void,Initializes the key pair generator for a certain keysize using a default parameter set and the SecureRandom implementation of the highest-priority installed provider as the source of randomness.
KeyPairGenerator,"initialize(int keysize, SecureRandom random)",void,Initializes the key pair generator for a certain keysize with the given source of randomness (and a default parameter set).
KeyPairGeneratorSpi,generateKeyPair(),abstract KeyPair,Generates a key pair.
KeyPairGeneratorSpi,"initialize(AlgorithmParameterSpec params, SecureRandom random)",void,Initializes the key pair generator using the specified parameter set and user-provided source of randomness.
KeyPairGeneratorSpi,"initialize(int keysize, SecureRandom random)",abstract void,"Initializes the key pair generator for a certain keysize, using the default parameter set."
KeyRep,readResolve(),protected Object,Resolve the Key object.
KeyStore,aliases(),Enumeration<String>,Lists all the alias names of this keystore.
KeyStore,containsAlias(String alias),boolean,Checks if the given alias exists in this keystore.
KeyStore,deleteEntry(String alias),void,Deletes the entry identified by the given alias from this keystore.
KeyStore,"entryInstanceOf(String alias, Class<? extends KeyStore.Entry> entryClass)",boolean,Determines if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass.
KeyStore,getCertificate(String alias),Certificate,Returns the certificate associated with the given alias.
KeyStore,getCertificateAlias(Certificate cert),String,Returns the (alias) name of the first keystore entry whose certificate matches the given certificate.
KeyStore,getCertificateChain(String alias),Certificate[],Returns the certificate chain associated with the given alias.
KeyStore,getCreationDate(String alias),Date,Returns the creation date of the entry identified by the given alias.
KeyStore,getDefaultType(),static String,"Returns the default keystore type as specified by the keystore.type security property, or the string ""jks"" (acronym for ""Java keystore"") if no such property exists."
KeyStore,"getEntry(String alias, KeyStore.ProtectionParameter protParam)",KeyStore.Entry,Gets a keystore Entry for the specified alias with the specified protection parameter.
KeyStore,getInstance(String type),static KeyStore,Returns a keystore object of the specified type.
KeyStore,"getInstance(String type, Provider provider)",static KeyStore,Returns a keystore object of the specified type.
KeyStore,"getInstance(String type, String provider)",static KeyStore,Returns a keystore object of the specified type.
KeyStore,"getKey(String alias, char[] password)",Key,"Returns the key associated with the given alias, using the given password to recover it."
KeyStore,getProvider(),Provider,Returns the provider of this keystore.
KeyStore,getType(),String,Returns the type of this keystore.
KeyStore,isCertificateEntry(String alias),boolean,"Returns true if the entry identified by the given alias was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry."
KeyStore,isKeyEntry(String alias),boolean,"Returns true if the entry identified by the given alias was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry or a SecretKeyEntry."
KeyStore,"load(InputStream stream, char[] password)",void,Loads this KeyStore from the given input stream.
KeyStore,load(KeyStore.LoadStoreParameter param),void,Loads this keystore using the given LoadStoreParameter.
KeyStore,"setCertificateEntry(String alias, Certificate cert)",void,Assigns the given trusted certificate to the given alias.
KeyStore,"setEntry(String alias, KeyStore.Entry entry, KeyStore.ProtectionParameter protParam)",void,Saves a keystore Entry under the specified alias.
KeyStore,"setKeyEntry(String alias, byte[] key, Certificate[] chain)",void,Assigns the given key (that has already been protected) to the given alias.
KeyStore,"setKeyEntry(String alias, Key key, char[] password, Certificate[] chain)",void,"Assigns the given key to the given alias, protecting it with the given password."
KeyStore,size(),int,Retrieves the number of entries in this keystore.
KeyStore,store(KeyStore.LoadStoreParameter param),void,Stores this keystore using the given LoadStoreParameter.
KeyStore,"store(OutputStream stream, char[] password)",void,"Stores this keystore to the given output stream, and protects its integrity with the given password."
KeyStore.Builder,getKeyStore(),abstract KeyStore,Returns the KeyStore described by this object.
KeyStore.Builder,getProtectionParameter(String alias),abstract KeyStore.ProtectionParameter,Returns the ProtectionParameters that should be used to obtain the Entry with the given alias.
KeyStore.Builder,"newInstance(KeyStore keyStore, KeyStore.ProtectionParameter protectionParameter)",static KeyStore.Builder,Returns a new Builder that encapsulates the given KeyStore.
KeyStore.Builder,"newInstance(String type, Provider provider, File file, KeyStore.ProtectionParameter protection)",static KeyStore.Builder,Returns a new Builder object.
KeyStore.Builder,"newInstance(String type, Provider provider, KeyStore.ProtectionParameter protection)",static KeyStore.Builder,Returns a new Builder object.
KeyStore.CallbackHandlerProtection,getCallbackHandler(),CallbackHandler,Returns the CallbackHandler.
KeyStore.PasswordProtection,destroy(),void,Clears the password.
KeyStore.PasswordProtection,getPassword(),char[],Gets the password.
KeyStore.PasswordProtection,getProtectionAlgorithm(),String,Gets the name of the protection algorithm.
KeyStore.PasswordProtection,getProtectionParameters(),AlgorithmParameterSpec,Gets the parameters supplied for the protection algorithm.
KeyStore.PasswordProtection,isDestroyed(),boolean,Determines if password has been cleared.
KeyStore.PrivateKeyEntry,getAttributes(),Set<KeyStore.Entry.Attribute>,Retrieves the attributes associated with an entry.
KeyStore.PrivateKeyEntry,getCertificate(),Certificate,Gets the end entity Certificate from the certificate chain in this entry.
KeyStore.PrivateKeyEntry,getCertificateChain(),Certificate[],Gets the Certificate chain from this entry.
KeyStore.PrivateKeyEntry,getPrivateKey(),PrivateKey,Gets the PrivateKey from this entry.
KeyStore.PrivateKeyEntry,toString(),String,Returns a string representation of this PrivateKeyEntry.
KeyStore.SecretKeyEntry,getAttributes(),Set<KeyStore.Entry.Attribute>,Retrieves the attributes associated with an entry.
KeyStore.SecretKeyEntry,getSecretKey(),SecretKey,Gets the SecretKey from this entry.
KeyStore.SecretKeyEntry,toString(),String,Returns a string representation of this SecretKeyEntry.
KeyStore.TrustedCertificateEntry,getAttributes(),Set<KeyStore.Entry.Attribute>,Retrieves the attributes associated with an entry.
KeyStore.TrustedCertificateEntry,getTrustedCertificate(),Certificate,Gets the trusted Certficate from this entry.
KeyStore.TrustedCertificateEntry,toString(),String,Returns a string representation of this TrustedCertificateEntry.
KeyStoreSpi,engineAliases(),abstract Enumeration<String>,Lists all the alias names of this keystore.
KeyStoreSpi,engineContainsAlias(String alias),abstract boolean,Checks if the given alias exists in this keystore.
KeyStoreSpi,engineDeleteEntry(String alias),abstract void,Deletes the entry identified by the given alias from this keystore.
KeyStoreSpi,"engineEntryInstanceOf(String alias, Class<? extends KeyStore.Entry> entryClass)",boolean,Determines if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass.
KeyStoreSpi,engineGetCertificate(String alias),abstract Certificate,Returns the certificate associated with the given alias.
KeyStoreSpi,engineGetCertificateAlias(Certificate cert),abstract String,Returns the (alias) name of the first keystore entry whose certificate matches the given certificate.
KeyStoreSpi,engineGetCertificateChain(String alias),abstract Certificate[],Returns the certificate chain associated with the given alias.
KeyStoreSpi,engineGetCreationDate(String alias),abstract Date,Returns the creation date of the entry identified by the given alias.
KeyStoreSpi,"engineGetEntry(String alias, KeyStore.ProtectionParameter protParam)",KeyStore.Entry,Gets a KeyStore.Entry for the specified alias with the specified protection parameter.
KeyStoreSpi,"engineGetKey(String alias, char[] password)",abstract Key,"Returns the key associated with the given alias, using the given password to recover it."
KeyStoreSpi,engineIsCertificateEntry(String alias),abstract boolean,"Returns true if the entry identified by the given alias was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry."
KeyStoreSpi,engineIsKeyEntry(String alias),abstract boolean,"Returns true if the entry identified by the given alias was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry or a SecretKeyEntry."
KeyStoreSpi,"engineLoad(InputStream stream, char[] password)",abstract void,Loads the keystore from the given input stream.
KeyStoreSpi,engineLoad(KeyStore.LoadStoreParameter param),void,Loads the keystore using the given KeyStore.LoadStoreParameter.
KeyStoreSpi,"engineSetCertificateEntry(String alias, Certificate cert)",abstract void,Assigns the given certificate to the given alias.
KeyStoreSpi,"engineSetEntry(String alias, KeyStore.Entry entry, KeyStore.ProtectionParameter protParam)",void,Saves a KeyStore.Entry under the specified alias.
KeyStoreSpi,"engineSetKeyEntry(String alias, byte[] key, Certificate[] chain)",abstract void,Assigns the given key (that has already been protected) to the given alias.
KeyStoreSpi,"engineSetKeyEntry(String alias, Key key, char[] password, Certificate[] chain)",abstract void,"Assigns the given key to the given alias, protecting it with the given password."
KeyStoreSpi,engineSize(),abstract int,Retrieves the number of entries in this keystore.
KeyStoreSpi,engineStore(KeyStore.LoadStoreParameter param),void,Stores this keystore using the given KeyStore.LoadStoreParmeter.
KeyStoreSpi,"engineStore(OutputStream stream, char[] password)",abstract void,"Stores this keystore to the given output stream, and protects its integrity with the given password."
MessageDigest,clone(),Object,Returns a clone if the implementation is cloneable.
MessageDigest,digest(),byte[],Completes the hash computation by performing final operations such as padding.
MessageDigest,digest(byte[] input),byte[],"Performs a final update on the digest using the specified array of bytes, then completes the digest computation."
MessageDigest,"digest(byte[] buf, int offset, int len)",int,Completes the hash computation by performing final operations such as padding.
MessageDigest,getAlgorithm(),String,"Returns a string that identifies the algorithm, independent of implementation details."
MessageDigest,getDigestLength(),int,"Returns the length of the digest in bytes, or 0 if this operation is not supported by the provider and the implementation is not cloneable."
MessageDigest,getInstance(String algorithm),static MessageDigest,Returns a MessageDigest object that implements the specified digest algorithm.
MessageDigest,"getInstance(String algorithm, Provider provider)",static MessageDigest,Returns a MessageDigest object that implements the specified digest algorithm.
MessageDigest,"getInstance(String algorithm, String provider)",static MessageDigest,Returns a MessageDigest object that implements the specified digest algorithm.
MessageDigest,getProvider(),Provider,Returns the provider of this message digest object.
MessageDigest,"isEqual(byte[] digesta, byte[] digestb)",static boolean,Compares two digests for equality.
MessageDigest,reset(),void,Resets the digest for further use.
MessageDigest,toString(),String,Returns a string representation of this message digest object.
MessageDigest,update(byte input),void,Updates the digest using the specified byte.
MessageDigest,update(byte[] input),void,Updates the digest using the specified array of bytes.
MessageDigest,"update(byte[] input, int offset, int len)",void,"Updates the digest using the specified array of bytes, starting at the specified offset."
MessageDigest,update(ByteBuffer input),void,Update the digest using the specified ByteBuffer.
MessageDigestSpi,clone(),Object,Returns a clone if the implementation is cloneable.
MessageDigestSpi,engineDigest(),protected abstract byte[],Completes the hash computation by performing final operations such as padding.
MessageDigestSpi,"engineDigest(byte[] buf, int offset, int len)",protected int,Completes the hash computation by performing final operations such as padding.
MessageDigestSpi,engineGetDigestLength(),protected int,Returns the digest length in bytes.
MessageDigestSpi,engineReset(),protected abstract void,Resets the digest for further use.
MessageDigestSpi,engineUpdate(byte input),protected abstract void,Updates the digest using the specified byte.
MessageDigestSpi,"engineUpdate(byte[] input, int offset, int len)",protected abstract void,"Updates the digest using the specified array of bytes, starting at the specified offset."
MessageDigestSpi,engineUpdate(ByteBuffer input),protected void,Update the digest using the specified ByteBuffer.
Permission,checkGuard(Object object),void,Implements the guard interface for a permission.
Permission,equals(Object obj),abstract boolean,Checks two Permission objects for equality.
Permission,getActions(),abstract String,Returns the actions as a String.
Permission,getName(),String,Returns the name of this Permission.
Permission,hashCode(),abstract int,Returns the hash code value for this Permission object.
Permission,implies(Permission permission),abstract boolean,"Checks if the specified permission's actions are ""implied by"" this object's actions."
Permission,newPermissionCollection(),PermissionCollection,"Returns an empty PermissionCollection for a given Permission object, or null if one is not defined."
Permission,toString(),String,Returns a string describing this Permission.
PermissionCollection,add(Permission permission),abstract void,Adds a permission object to the current collection of permission objects.
PermissionCollection,elements(),abstract Enumeration<Permission>,Returns an enumeration of all the Permission objects in the collection.
PermissionCollection,implies(Permission permission),abstract boolean,Checks to see if the specified permission is implied by the collection of Permission objects held in this PermissionCollection.
PermissionCollection,isReadOnly(),boolean,Returns true if this PermissionCollection object is marked as readonly.
PermissionCollection,setReadOnly(),void,"Marks this PermissionCollection object as ""readonly""."
PermissionCollection,toString(),String,"Returns a string describing this PermissionCollection object, providing information about all the permissions it contains."
Permissions,add(Permission permission),void,Adds a permission object to the PermissionCollection for the class the permission belongs to.
Permissions,elements(),Enumeration<Permission>,Returns an enumeration of all the Permission objects in all the PermissionCollections in this Permissions object.
Permissions,implies(Permission permission),boolean,Checks to see if this object's PermissionCollection for permissions of the specified permission's class implies the permissions expressed in the permission object.
PKCS12Attribute,equals(Object obj),boolean,Compares this PKCS12Attribute and a specified object for equality.
PKCS12Attribute,getEncoded(),byte[],Returns the attribute's ASN.1 DER encoding.
PKCS12Attribute,getName(),String,Returns the attribute's ASN.1 Object Identifier represented as a list of dot-separated integers.
PKCS12Attribute,getValue(),String,Returns the attribute's ASN.1 DER-encoded value as a string.
PKCS12Attribute,hashCode(),int,Returns the hashcode for this PKCS12Attribute.
PKCS12Attribute,toString(),String,Returns a string representation of this PKCS12Attribute.
Policy,"getInstance(String type, Policy.Parameters params)",static Policy,Returns a Policy object of the specified type.
Policy,"getInstance(String type, Policy.Parameters params, Provider provider)",static Policy,Returns a Policy object of the specified type.
Policy,"getInstance(String type, Policy.Parameters params, String provider)",static Policy,Returns a Policy object of the specified type.
Policy,getParameters(),Policy.Parameters,Return Policy parameters.
Policy,getPermissions(CodeSource codesource),PermissionCollection,Return a PermissionCollection object containing the set of permissions granted to the specified CodeSource.
Policy,getPermissions(ProtectionDomain domain),PermissionCollection,Return a PermissionCollection object containing the set of permissions granted to the specified ProtectionDomain.
Policy,getPolicy(),static Policy,Returns the installed Policy object.
Policy,getProvider(),Provider,Return the Provider of this Policy.
Policy,getType(),String,Return the type of this Policy.
Policy,"implies(ProtectionDomain domain, Permission permission)",boolean,Evaluates the global policy for the permissions granted to the ProtectionDomain and tests whether the permission is granted.
Policy,refresh(),void,Refreshes/reloads the policy configuration.
Policy,setPolicy(Policy p),static void,Sets the system-wide Policy object.
PolicySpi,engineGetPermissions(CodeSource codesource),protected PermissionCollection,Return a PermissionCollection object containing the set of permissions granted to the specified CodeSource.
PolicySpi,engineGetPermissions(ProtectionDomain domain),protected PermissionCollection,Return a PermissionCollection object containing the set of permissions granted to the specified ProtectionDomain.
PolicySpi,"engineImplies(ProtectionDomain domain, Permission permission)",protected abstract boolean,Check whether the policy has granted a Permission to a ProtectionDomain.
PolicySpi,engineRefresh(),protected void,Refreshes/reloads the policy configuration.
ProtectionDomain,getClassLoader(),ClassLoader,Returns the ClassLoader of this domain.
ProtectionDomain,getCodeSource(),CodeSource,Returns the CodeSource of this domain.
ProtectionDomain,getPermissions(),PermissionCollection,Returns the static permissions granted to this domain.
ProtectionDomain,getPrincipals(),Principal[],Returns an array of principals for this domain.
ProtectionDomain,implies(Permission permission),boolean,Check and see if this ProtectionDomain implies the permissions expressed in the Permission object.
ProtectionDomain,toString(),String,Convert a ProtectionDomain to a String.
Provider,clear(),void,Clears this provider so that it no longer contains the properties used to look up facilities implemented by the provider.
Provider,"compute(Object key, BiFunction<? super Object,? super Object,? extends Object> remappingFunction)",Object,Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).
Provider,"computeIfAbsent(Object key, Function<? super Object,? extends Object> mappingFunction)",Object,"If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null."
Provider,"computeIfPresent(Object key, BiFunction<? super Object,? super Object,? extends Object> remappingFunction)",Object,"If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value."
Provider,elements(),Enumeration<Object>,Returns an enumeration of the values in this hashtable.
Provider,entrySet(),"Set<Map.Entry<Object,Object>>",Returns an unmodifiable Set view of the property entries contained in this Provider.
Provider,"forEach(BiConsumer<? super Object,? super Object> action)",void,Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.
Provider,get(Object key),Object,"Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key."
Provider,getInfo(),String,Returns a human-readable description of the provider and its services.
Provider,getName(),String,Returns the name of this provider.
Provider,"getOrDefault(Object key, Object defaultValue)",Object,"Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key."
Provider,getProperty(String key),String,Searches for the property with the specified key in this property list.
Provider,"getService(String type, String algorithm)",Provider.Service,Get the service describing this Provider's implementation of the specified type of this algorithm or alias.
Provider,getServices(),Set<Provider.Service>,Get an unmodifiable Set of all services supported by this Provider.
Provider,getVersion(),double,Returns the version number for this provider.
Provider,keys(),Enumeration<Object>,Returns an enumeration of the keys in this hashtable.
Provider,keySet(),Set<Object>,Returns an unmodifiable Set view of the property keys contained in this provider.
Provider,load(InputStream inStream),void,Reads a property list (key and element pairs) from the input stream.
Provider,"merge(Object key, Object value, BiFunction<? super Object,? super Object,? extends Object> remappingFunction)",Object,"If the specified key is not already associated with a value or is associated with null, associates it with the given value."
Provider,"put(Object key, Object value)",Object,Sets the key property to have the specified value.
Provider,"putAll(Map<?,?> t)",void,Copies all of the mappings from the specified Map to this provider.
Provider,"putIfAbsent(Object key, Object value)",Object,"If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value."
Provider,putService(Provider.Service s),protected void,Add a service.
Provider,remove(Object key),Object,Removes the key property (and its corresponding value).
Provider,"remove(Object key, Object value)",boolean,Removes the entry for the specified key only if it is currently mapped to the specified value.
Provider,removeService(Provider.Service s),protected void,Remove a service previously added using putService().
Provider,"replace(Object key, Object value)",Object,Replaces the entry for the specified key only if it is currently mapped to some value.
Provider,"replace(Object key, Object oldValue, Object newValue)",boolean,Replaces the entry for the specified key only if currently mapped to the specified value.
Provider,"replaceAll(BiFunction<? super Object,? super Object,? extends Object> function)",void,"Replaces each entry's value with the result of invoking the given function on that entry, in the order entries are returned by an entry set iterator, until all entries have been processed or the function throws an exception."
Provider,toString(),String,Returns a string with the name and the version number of this provider.
Provider,values(),Collection<Object>,Returns an unmodifiable Collection view of the property values contained in this provider.
Provider.Service,getAlgorithm(),String,Return the name of the algorithm of this service.
Provider.Service,getAttribute(String name),String,Return the value of the specified attribute or null if this attribute is not set for this Service.
Provider.Service,getClassName(),String,Return the name of the class implementing this service.
Provider.Service,getProvider(),Provider,Return the Provider of this service.
Provider.Service,getType(),String,Get the type of this service.
Provider.Service,newInstance(Object constructorParameter),Object,Return a new instance of the implementation described by this service.
Provider.Service,supportsParameter(Object parameter),boolean,Test whether this Service can use the specified parameter.
Provider.Service,toString(),String,Return a String representation of this service.
SecureClassLoader,"defineClass(String name, byte[] b, int off, int len, CodeSource cs)",protected Class<?>,"Converts an array of bytes into an instance of class Class, with an optional CodeSource."
SecureClassLoader,"defineClass(String name, ByteBuffer b, CodeSource cs)",protected Class<?>,"Converts a ByteBuffer into an instance of class Class, with an optional CodeSource."
SecureClassLoader,getPermissions(CodeSource codesource),protected PermissionCollection,Returns the permissions for the given CodeSource object.
SecureRandom,generateSeed(int numBytes),byte[],"Returns the given number of seed bytes, computed using the seed generation algorithm that this class uses to seed itself."
SecureRandom,getAlgorithm(),String,Returns the name of the algorithm implemented by this SecureRandom object.
SecureRandom,getInstance(String algorithm),static SecureRandom,Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm.
SecureRandom,"getInstance(String algorithm, Provider provider)",static SecureRandom,Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm.
SecureRandom,"getInstance(String algorithm, String provider)",static SecureRandom,Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm.
SecureRandom,getInstanceStrong(),static SecureRandom,Returns a SecureRandom object that was selected by using the algorithms/providers specified in the securerandom.strongAlgorithms Security property.
SecureRandom,getProvider(),Provider,Returns the provider of this SecureRandom object.
SecureRandom,getSeed(int numBytes),static byte[],"Returns the given number of seed bytes, computed using the seed generation algorithm that this class uses to seed itself."
SecureRandom,next(int numBits),protected int,"Generates an integer containing the user-specified number of pseudo-random bits (right justified, with leading zeros)."
SecureRandom,nextBytes(byte[] bytes),void,Generates a user-specified number of random bytes.
SecureRandom,setSeed(byte[] seed),void,Reseeds this random object.
SecureRandom,setSeed(long seed),void,"Reseeds this random object, using the eight bytes contained in the given long seed."
SecureRandomSpi,engineGenerateSeed(int numBytes),protected abstract byte[],Returns the given number of seed bytes.
SecureRandomSpi,engineNextBytes(byte[] bytes),protected abstract void,Generates a user-specified number of random bytes.
SecureRandomSpi,engineSetSeed(byte[] seed),protected abstract void,Reseeds this random object.
Security,addProvider(Provider provider),static int,Adds a provider to the next position available.
Security,"getAlgorithmProperty(String algName, String propName)",static String,"Deprecated. This method used to return the value of a proprietary property in the master file of the ""SUN"" Cryptographic Service Provider in order to determine how to parse algorithm-specific parameters. Use the new provider-based and algorithm-independent AlgorithmParameters and KeyFactory engine classes (introduced in the J2SE version 1.2 platform) instead."
Security,getAlgorithms(String serviceName),static Set<String>,"Returns a Set of Strings containing the names of all available algorithms or types for the specified Java cryptographic service (e.g., Signature, MessageDigest, Cipher, Mac, KeyStore)."
Security,getProperty(String key),static String,Gets a security property value.
Security,getProvider(String name),static Provider,"Returns the provider installed with the specified name, if any."
Security,getProviders(),static Provider[],Returns an array containing all the installed providers.
Security,"getProviders(Map<String,String> filter)",static Provider[],"Returns an array containing all installed providers that satisfy the specified* selection criteria, or null if no such providers have been installed."
Security,getProviders(String filter),static Provider[],"Returns an array containing all installed providers that satisfy the specified selection criterion, or null if no such providers have been installed."
Security,"insertProviderAt(Provider provider, int position)",static int,"Adds a new provider, at a specified position."
Security,removeProvider(String name),static void,Removes the provider with the specified name.
Security,"setProperty(String key, String datum)",static void,Sets a security property value.
Signature,clone(),Object,Returns a clone if the implementation is cloneable.
Signature,getAlgorithm(),String,Returns the name of the algorithm for this signature object.
Signature,getInstance(String algorithm),static Signature,Returns a Signature object that implements the specified signature algorithm.
Signature,"getInstance(String algorithm, Provider provider)",static Signature,Returns a Signature object that implements the specified signature algorithm.
Signature,"getInstance(String algorithm, String provider)",static Signature,Returns a Signature object that implements the specified signature algorithm.
Signature,getParameter(String param),Object,Deprecated.
Signature,getParameters(),AlgorithmParameters,Returns the parameters used with this signature object.
Signature,getProvider(),Provider,Returns the provider of this signature object.
Signature,initSign(PrivateKey privateKey),void,Initialize this object for signing.
Signature,"initSign(PrivateKey privateKey, SecureRandom random)",void,Initialize this object for signing.
Signature,initVerify(Certificate certificate),void,"Initializes this object for verification, using the public key from the given certificate."
Signature,initVerify(PublicKey publicKey),void,Initializes this object for verification.
Signature,setParameter(AlgorithmParameterSpec params),void,Initializes this signature engine with the specified parameter set.
Signature,"setParameter(String param, Object value)",void,Deprecated. Use setParameter.
Signature,sign(),byte[],Returns the signature bytes of all the data updated.
Signature,"sign(byte[] outbuf, int offset, int len)",int,"Finishes the signature operation and stores the resulting signature bytes in the provided buffer outbuf, starting at offset."
Signature,toString(),String,"Returns a string representation of this signature object, providing information that includes the state of the object and the name of the algorithm used."
Signature,update(byte b),void,Updates the data to be signed or verified by a byte.
Signature,update(byte[] data),void,"Updates the data to be signed or verified, using the specified array of bytes."
Signature,"update(byte[] data, int off, int len)",void,"Updates the data to be signed or verified, using the specified array of bytes, starting at the specified offset."
Signature,update(ByteBuffer data),void,Updates the data to be signed or verified using the specified ByteBuffer.
Signature,verify(byte[] signature),boolean,Verifies the passed-in signature.
Signature,"verify(byte[] signature, int offset, int length)",boolean,"Verifies the passed-in signature in the specified array of bytes, starting at the specified offset."
SignatureSpi,clone(),Object,Returns a clone if the implementation is cloneable.
SignatureSpi,engineGetParameter(String param),protected abstract Object,Deprecated.
SignatureSpi,engineGetParameters(),protected AlgorithmParameters,This method is overridden by providers to return the parameters used with this signature engine.
SignatureSpi,engineInitSign(PrivateKey privateKey),protected abstract void,Initializes this signature object with the specified private key for signing operations.
SignatureSpi,"engineInitSign(PrivateKey privateKey, SecureRandom random)",protected void,Initializes this signature object with the specified private key and source of randomness for signing operations.
SignatureSpi,engineInitVerify(PublicKey publicKey),protected abstract void,Initializes this signature object with the specified public key for verification operations.
SignatureSpi,engineSetParameter(AlgorithmParameterSpec params),protected void,This method is overridden by providers to initialize this signature engine with the specified parameter set.
SignatureSpi,"engineSetParameter(String param, Object value)",protected abstract void,Deprecated. Replaced by engineSetParameter.
SignatureSpi,engineSign(),protected abstract byte[],Returns the signature bytes of all the data updated so far.
SignatureSpi,"engineSign(byte[] outbuf, int offset, int len)",protected int,"Finishes this signature operation and stores the resulting signature bytes in the provided buffer outbuf, starting at offset."
SignatureSpi,engineUpdate(byte b),protected abstract void,Updates the data to be signed or verified using the specified byte.
SignatureSpi,"engineUpdate(byte[] b, int off, int len)",protected abstract void,"Updates the data to be signed or verified, using the specified array of bytes, starting at the specified offset."
SignatureSpi,engineUpdate(ByteBuffer input),protected void,Updates the data to be signed or verified using the specified ByteBuffer.
SignatureSpi,engineVerify(byte[] sigBytes),protected abstract boolean,Verifies the passed-in signature.
SignatureSpi,"engineVerify(byte[] sigBytes, int offset, int length)",protected boolean,"Verifies the passed-in signature in the specified array of bytes, starting at the specified offset."
SignedObject,getAlgorithm(),String,Retrieves the name of the signature algorithm.
SignedObject,getObject(),Object,Retrieves the encapsulated object.
SignedObject,getSignature(),byte[],"Retrieves the signature on the signed object, in the form of a byte array."
SignedObject,"verify(PublicKey verificationKey, Signature verificationEngine)",boolean,"Verifies that the signature in this SignedObject is the valid signature for the object stored inside, with the given verification key, using the designated verification engine."
Signer,getPrivateKey(),PrivateKey,Deprecated.
Signer,setKeyPair(KeyPair pair),void,Deprecated.
Signer,toString(),String,Deprecated.
Timestamp,equals(Object obj),boolean,Tests for equality between the specified object and this timestamp.
Timestamp,getSignerCertPath(),CertPath,Returns the certificate path for the Timestamping Authority.
Timestamp,getTimestamp(),Date,Returns the date and time when the timestamp was generated.
Timestamp,hashCode(),int,Returns the hash code value for this timestamp.
Timestamp,toString(),String,Returns a string describing this timestamp.
UnresolvedPermission,equals(Object obj),boolean,Checks two UnresolvedPermission objects for equality.
UnresolvedPermission,getActions(),String,"Returns the canonical string representation of the actions, which currently is the empty string """", since there are no actions for an UnresolvedPermission."
UnresolvedPermission,getUnresolvedActions(),String,Get the actions for the underlying permission that has not been resolved.
UnresolvedPermission,getUnresolvedCerts(),Certificate[],Get the signer certificates (without any supporting chain) for the underlying permission that has not been resolved.
UnresolvedPermission,getUnresolvedName(),String,Get the target name of the underlying permission that has not been resolved.
UnresolvedPermission,getUnresolvedType(),String,Get the type (class name) of the underlying permission that has not been resolved.
UnresolvedPermission,hashCode(),int,Returns the hash code value for this object.
UnresolvedPermission,implies(Permission p),boolean,This method always returns false for unresolved permissions.
UnresolvedPermission,newPermissionCollection(),PermissionCollection,Returns a new PermissionCollection object for storing UnresolvedPermission objects.
UnresolvedPermission,toString(),String,Returns a string describing this UnresolvedPermission.
URIParameter,getURI(),URI,Returns the URI.
