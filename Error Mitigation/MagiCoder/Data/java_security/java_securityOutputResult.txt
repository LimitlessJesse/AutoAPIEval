Sample: AccessController_1
----------------------------------------------------------------
stdout:
Permission denied: access denied ("java.lang.RuntimePermission" "createClassLoader")

stderr:
./Data/java_security/javaFiles/AccessController_1.java:8: warning: [removal] AccessController in java.security has been deprecated and marked for removal
            AccessController.checkPermission(new RuntimePermission("createClassLoader"));
            ^
./Data/java_security/javaFiles/AccessController_1.java:10: warning: [removal] AccessControlException in java.security has been deprecated and marked for removal
        } catch (AccessControlException e) {
                 ^
2 warnings

================================================================

Sample: AccessController_6
----------------------------------------------------------------
stdout:
Hello, World!

stderr:
./Data/java_security/javaFiles/AccessController_6.java:8: warning: [removal] AccessController in java.security has been deprecated and marked for removal
            String result = AccessController.doPrivileged(new PrivilegedExceptionAction<String>() {
                            ^
1 warning

================================================================

Sample: AccessController_8
----------------------------------------------------------------
stdout:
Hello, World!

stderr:
./Data/java_security/javaFiles/AccessController_8.java:9: warning: [removal] AccessController in java.security has been deprecated and marked for removal
            String result = AccessController.doPrivileged(new PrivilegedExceptionAction<String>() {
                            ^
1 warning

================================================================

Sample: AlgorithmParameters_1
----------------------------------------------------------------
================================================================

Sample: AlgorithmParameters_2
----------------------------------------------------------------
================================================================

Sample: AlgorithmParameters_3
----------------------------------------------------------------
================================================================

Sample: AllPermission_1
----------------------------------------------------------------
output:
./Data/java_security/javaFiles/AllPermission_1.java:7: error: <anonymous AllPermission_1$1> is not abstract and does not override abstract method getActions() in Permission
        Permission permission = new Permission("some.permission") {
                                                                  ^
1 error


================================================================

Sample: AllPermission_2
----------------------------------------------------------------
stdout:
Are the permissions equal? true

================================================================

Sample: AllPermission_3
----------------------------------------------------------------
stdout:
<all actions>

================================================================

Sample: AllPermission_4
----------------------------------------------------------------
stdout:
Hash code value: 1

================================================================

Sample: BasicPermission_2
----------------------------------------------------------------
output:
./Data/java_security/javaFiles/BasicPermission_2.java:5: error: BasicPermission is abstract; cannot be instantiated
        BasicPermission permission = new BasicPermission("test");
                                     ^
1 error


================================================================

Sample: BasicPermission_3
----------------------------------------------------------------
output:
./Data/java_security/javaFiles/BasicPermission_3.java:7: error: BasicPermission is abstract; cannot be instantiated
        BasicPermission permission1 = new BasicPermission("a.b.c");
                                      ^
./Data/java_security/javaFiles/BasicPermission_3.java:10: error: BasicPermission is abstract; cannot be instantiated
        BasicPermission permission2 = new BasicPermission("a.b.*");
                                      ^
2 errors


================================================================

Sample: BasicPermission_4
----------------------------------------------------------------
output:
./Data/java_security/javaFiles/BasicPermission_4.java:5: error: BasicPermission is abstract; cannot be instantiated
        BasicPermission permission1 = new BasicPermission("test");
                                      ^
./Data/java_security/javaFiles/BasicPermission_4.java:6: error: BasicPermission is abstract; cannot be instantiated
        BasicPermission permission2 = new BasicPermission("test");
                                      ^
./Data/java_security/javaFiles/BasicPermission_4.java:7: error: BasicPermission is abstract; cannot be instantiated
        BasicPermission permission3 = new BasicPermission("test2");
                                      ^
3 errors


================================================================

Sample: BasicPermission_5
----------------------------------------------------------------
output:
./Data/java_security/javaFiles/BasicPermission_5.java:5: error: BasicPermission is abstract; cannot be instantiated
        BasicPermission permission = new BasicPermission("test");
                                     ^
1 error


================================================================

Sample: CodeSigner_4
----------------------------------------------------------------
output:
./Data/java_security/javaFiles/CodeSigner_4.java:11: error: incompatible types: X509Certificate cannot be converted to CertPath
        CodeSigner signer1 = new CodeSigner(getCertificate("cert1.der"), "timestamp1");
                                                          ^
./Data/java_security/javaFiles/CodeSigner_4.java:12: error: incompatible types: X509Certificate cannot be converted to CertPath
        CodeSigner signer2 = new CodeSigner(getCertificate("cert2.der"), "timestamp2");
                                                          ^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
2 errors


================================================================

Sample: CodeSigner_5
----------------------------------------------------------------
output:
./Data/java_security/javaFiles/CodeSigner_5.java:17: error: incompatible types: X509Certificate cannot be converted to CertPath
        CodeSigner codeSigner = new CodeSigner(x509Cert, null);
                                               ^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
1 error


================================================================

Sample: CodeSource_2
----------------------------------------------------------------
stdout:
Location: file:/home/yixi/comp4522/Rag_fullDescription/./Data/java_security/javaFiles/CodeSource_2.java

================================================================

Sample: CodeSource_3
----------------------------------------------------------------
output:
./Data/java_security/javaFiles/CodeSource_3.java:11: error: unreported exception MalformedURLException; must be caught or declared to be thrown
        URL url1 = new URL("http://example.com");
                   ^
./Data/java_security/javaFiles/CodeSource_3.java:18: error: unreported exception MalformedURLException; must be caught or declared to be thrown
        URL url2 = new URL("http://example.com");
                   ^
2 errors


================================================================

Sample: CodeSource_4
----------------------------------------------------------------
output:
./Data/java_security/javaFiles/CodeSource_4.java:14: error: incompatible types: Collection<CAP#1> cannot be converted to Certificate[]
            Certificate[] certs = CertificateFactory.getInstance("X.509").generateCertificates(new FileInputStream("path_to_certificate_file"));
                                                                                              ^
  where CAP#1 is a fresh type-variable:
    CAP#1 extends Certificate from capture of ? extends Certificate
./Data/java_security/javaFiles/CodeSource_4.java:18: error: Alternatives in a multi-catch statement cannot be related by subclassing
        } catch (MalformedURLException | CertificateException | IOException e) {
                                                                ^
  Alternative MalformedURLException is a subclass of alternative IOException
2 errors


================================================================

Sample: CodeSource_5
----------------------------------------------------------------
stdout:
CodeSource: (file:/home/yixi/comp4522/Rag_fullDescription/./Data/java_security/javaFiles/CodeSource_5.java <no signer certificates>)
Location: file:/home/yixi/comp4522/Rag_fullDescription/./Data/java_security/javaFiles/CodeSource_5.java
Certificates: 

stderr:
java.lang.NullPointerException: Cannot read the array length because "<local4>" is null
	at CodeSource_5.main(CodeSource_5.java:15)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.execute(Main.java:419)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:192)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)

================================================================

Sample: DigestInputStream_2
----------------------------------------------------------------
stdout:
105
110
32
99
97
115
101
��)�lgjΑ*��U[@R��A"�߅]���,<��

================================================================

Sample: DigestInputStream_4
----------------------------------------------------------------
stdout:
S�3D�G˲'X�; |���a_�v��G��2

================================================================

Sample: DigestOutputStream_2
----------------------------------------------------------------
stdout:
A559aead08264d5795d3909718cdd05abd49572e84fe55590eef31a88a08fdffd
================================================================

Sample: DigestOutputStream_4
----------------------------------------------------------------
stdout:
Hello, World!
Digest:
dffd6021bb2bd5b0af676290809ec3a53191dd81c7f70a4b28688a362182986f
================================================================

Sample: GuardedObject_2
----------------------------------------------------------------
output:
./Data/java_security/javaFiles/GuardedObject_2.java:15: error: method does not override or implement a method from a supertype
            @Override
            ^
1 error


================================================================

Sample: KeyFactory_1
----------------------------------------------------------------
stdout:
java.security.KeyFactory@530612ba

================================================================

Sample: KeyFactory_2
----------------------------------------------------------------
stdout:
java.security.KeyFactory@1442d7b5

================================================================

Sample: KeyFactory_3
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.IllegalArgumentException: Illegal base64 character 2e
	at java.base/java.util.Base64$Decoder.decode0(Base64.java:848)
	at java.base/java.util.Base64$Decoder.decode(Base64.java:566)
	at java.base/java.util.Base64$Decoder.decode(Base64.java:589)
	at KeyFactory_3.main(KeyFactory_3.java:18)

================================================================

Sample: KeyStore_PrivateKeyEntry_2
----------------------------------------------------------------
output:
./Data/java_security/javaFiles/KeyStore_PrivateKeyEntry_2.java:11: error: unreported exception IOException; must be caught or declared to be thrown
            keyStore.load(null, null);
                         ^
./Data/java_security/javaFiles/KeyStore_PrivateKeyEntry_2.java:12: error: unreported exception UnrecoverableEntryException; must be caught or declared to be thrown
            KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry) keyStore.getEntry("alias", new KeyStore.PasswordProtection("password".toCharArray()));
                                                                                                   ^
2 errors


================================================================

Sample: KeyStore_PrivateKeyEntry_3
----------------------------------------------------------------
output:
./Data/java_security/javaFiles/KeyStore_PrivateKeyEntry_3.java:13: error: unreported exception UnrecoverableEntryException; must be caught or declared to be thrown
            KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry) keyStore.getEntry("alias", new KeyStore.PasswordProtection("password".toCharArray()));
                                                                                                   ^
1 error


================================================================

Sample: MessageDigest_1
----------------------------------------------------------------
stdout:
SHA-256 Message Digest from SUN, <initialized>


================================================================

Sample: MessageDigest_2
----------------------------------------------------------------
stdout:
dffd6021bb2bd5b0af676290809ec3a53191dd81c7f70a4b28688a362182986f

================================================================

Sample: MessageDigest_3
----------------------------------------------------------------
stdout:
dffd6021bb2bd5b0af676290809ec3a53191dd81c7f70a4b28688a362182986f
================================================================

Sample: MessageDigest_4
----------------------------------------------------------------
stdout:
a591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b57b277d9ad9f146ea591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b57b277d9ad9f146e
================================================================

Sample: MessageDigest_5
----------------------------------------------------------------
stdout:
The length of the digest in bytes is: 32

================================================================

Sample: Permission_1
----------------------------------------------------------------
stdout:
false

================================================================

Sample: Permission_2
----------------------------------------------------------------
stdout:
Are the permissions equal? true

================================================================

Sample: Permission_3
----------------------------------------------------------------
output:
./Data/java_security/javaFiles/Permission_3.java:3: error: cannot find symbol
        MyPermission permission = new MyPermission("my.permission");
        ^
  symbol:   class MyPermission
  location: class Permission_3
./Data/java_security/javaFiles/Permission_3.java:3: error: cannot find symbol
        MyPermission permission = new MyPermission("my.permission");
                                      ^
  symbol:   class MyPermission
  location: class Permission_3
2 errors


================================================================

Sample: Permission_4
----------------------------------------------------------------
output:
./Data/java_security/javaFiles/Permission_4.java:7: error: constructor Permission in class Permission cannot be applied to given types;
        Permission permission = new Permission("test.permission", "read,write") {
                                ^
  required: String
  found:    String,String
  reason: actual and formal argument lists differ in length
./Data/java_security/javaFiles/Permission_4.java:32: error: cannot find symbol
        String actions = permissions.getReadableActions();
                                    ^
  symbol:   method getReadableActions()
  location: variable permissions of type PermissionCollection
2 errors


================================================================

Sample: Permission_5
----------------------------------------------------------------
output:
./Data/java_security/javaFiles/Permission_5.java:7: error: incompatible types: Permissions cannot be converted to Permission
        Permission permission = new Permissions();
                                ^
./Data/java_security/javaFiles/Permission_5.java:8: error: cannot find symbol
        permission.add(new java.io.FilePermission("/home/user/file.txt", "read"));
                  ^
  symbol:   method add(FilePermission)
  location: variable permission of type Permission
2 errors


================================================================

Sample: PermissionCollection_2
----------------------------------------------------------------
stdout:
true

================================================================

Sample: PermissionCollection_4
----------------------------------------------------------------
stdout:
java.security.Permissions@5579bb86 (
 ("java.lang.RuntimePermission" "createClassLoader")
)

PermissionCollection is read-only. Cannot add new permission.

================================================================

Sample: PermissionCollection_5
----------------------------------------------------------------
stdout:
false
false
true
Caught expected SecurityException: attempt to add a Permission to a readonly Permissions object

================================================================

Sample: Permissions_2
----------------------------------------------------------------
stdout:
true

================================================================

Sample: ProtectionDomain_2
----------------------------------------------------------------
stdout:
null

================================================================

Sample: ProtectionDomain_3
----------------------------------------------------------------
output:
./Data/java_security/javaFiles/ProtectionDomain_3.java:6: error: cannot find symbol
        ProtectionDomain domain = ProtectionDomain.getProtectionDomain(ProtectionDomain_3.class);
                                                  ^
  symbol:   method getProtectionDomain(Class<ProtectionDomain_3>)
  location: class ProtectionDomain
1 error


================================================================

Sample: ProtectionDomain_4
----------------------------------------------------------------
stdout:
(file:/home/yixi/comp4522/Rag_fullDescription/./Data/java_security/javaFiles/ProtectionDomain_4.java <no signer certificates>)

================================================================

Sample: Provider_3
----------------------------------------------------------------
stdout:
Provider Name: SUN

================================================================

Sample: Provider_4
----------------------------------------------------------------
stdout:
SUN (DSA key/parameter generation; DSA signing; SHA-1, MD5 digests; SecureRandom; X.509 certificates; PKCS12, JKS & DKS keystores; PKIX CertPathValidator; PKIX CertPathBuilder; LDAP, Collection CertStores, JavaPolicy Policy; JavaLoginConfig Configuration)

================================================================

Sample: Provider_6
----------------------------------------------------------------
output:
./Data/java_security/javaFiles/Provider_6.java:6: error: cannot find symbol
        Provider provider = Provider.getDefault();
                                    ^
  symbol:   method getDefault()
  location: class Provider
1 error


================================================================

Sample: Provider_Service_1
----------------------------------------------------------------
stdout:
KeyPairGenerator
MessageDigest
CertPathBuilder
MessageDigest
MessageDigest
SecureRandom
MessageDigest
MessageDigest
MessageDigest
Signature
Signature
Signature
Signature
MessageDigest
Signature
Signature
MessageDigest
Signature
Signature
Signature
Signature
Configuration
MessageDigest
Signature
Signature
Signature
Signature
Signature
MessageDigest
CertStore
SecureRandom
CertificateFactory
Signature
AlgorithmParameters
MessageDigest
KeyFactory
MessageDigest
KeyStore
Signature
AlgorithmParameterGenerator
CertPathValidator
MessageDigest
Signature
SecureRandom
Signature
SecureRandom
KeyStore
KeyStore
SecureRandom
Signature
KeyStore
CertStore
Policy
KeyFactory
KeyPairGenerator
KeyPairGenerator
Signature
Signature
Signature
AlgorithmParameters
KeyFactory
Signature
Signature
Signature
Signature
Signature
Signature
Signature
Signature
Signature
Signature
Signature
Signature
KeyFactory
KeyAgreement
Signature
KeyPairGenerator
KeyFactory
KeyPairGenerator
KeyAgreement
KeyFactory
KeyPairGenerator
KeyFactory
KeyPairGenerator
Signature
AlgorithmParameters
KeyPairGenerator
Signature
KeyFactory
Signature
KeyPairGenerator
Signature
Signature
Signature
Signature
Signature
Signature
Signature
KeyPairGenerator
Signature
KeyFactory
Signature
Signature
KeyAgreement
Signature
Signature
Signature
KeyFactory
Signature
Signature
Signature
Signature
KeyAgreement
Signature
SSLContext
TrustManagerFactory
KeyManagerFactory
SSLContext
SSLContext
SSLContext
SSLContext
SSLContext
SSLContext
SSLContext
Signature
KeyStore
SSLContext
TrustManagerFactory
KeyManagerFactory
Mac
Mac
KeyGenerator
AlgorithmParameters
Mac
Mac
Cipher
KeyGenerator
Mac
Mac
Cipher
Mac
Mac
Cipher
KeyGenerator
KeyGenerator
Cipher
AlgorithmParameters
Cipher
Cipher
KeyGenerator
SecretKeyFactory
AlgorithmParameters
SecretKeyFactory
AlgorithmParameters
AlgorithmParameters
AlgorithmParameters
KeyPairGenerator
Cipher
Cipher
Cipher
Cipher
Mac
Cipher
Cipher
Cipher
SecretKeyFactory
SecretKeyFactory
Cipher
SecretKeyFactory
SecretKeyFactory
Mac
AlgorithmParameters
SecretKeyFactory
AlgorithmParameters
Cipher
AlgorithmParameters
KeyGenerator
KeyAgreement
KeyGenerator
KeyGenerator
Cipher
Cipher
Cipher
KeyGenerator
Cipher
Mac
KeyGenerator
AlgorithmParameters
SecretKeyFactory
Cipher
Mac
Cipher
Cipher
KeyGenerator
Cipher
AlgorithmParameters
Cipher
KeyGenerator
Cipher
Cipher
SecretKeyFactory
KeyFactory
SecretKeyFactory
Cipher
Cipher
AlgorithmParameters
KeyGenerator
Cipher
Mac
KeyGenerator
KeyGenerator
Mac
AlgorithmParameters
Mac
SecretKeyFactory
SecretKeyFactory
Cipher
SecretKeyFactory
Cipher
Mac
KeyGenerator
Cipher
AlgorithmParameters
KeyGenerator
KeyGenerator
Cipher
AlgorithmParameterGenerator
Cipher
Cipher
Cipher
Cipher
Mac
SecretKeyFactory
AlgorithmParameters
Mac
Mac
AlgorithmParameters
Cipher
Cipher
SecretKeyFactory
Mac
SecretKeyFactory
Cipher
Mac
SecretKeyFactory
Mac
KeyGenerator
KeyGenerator
AlgorithmParameters
Cipher
Cipher
SecretKeyFactory
Cipher
AlgorithmParameters
Mac
KeyGenerator
Cipher
AlgorithmParameters
Cipher
Cipher
AlgorithmParameters
Mac
AlgorithmParameters
AlgorithmParameters
Mac
Cipher
AlgorithmParameters
SecretKeyFactory
KeyGenerator
Cipher
SecretKeyFactory
Cipher
AlgorithmParameters
SecretKeyFactory
AlgorithmParameters
Cipher
Cipher
Cipher
AlgorithmParameters
SecretKeyFactory
KeyGenerator
KeyStore
Cipher
Cipher
AlgorithmParameters
SecretKeyFactory
KeyGenerator
SecretKeyFactory
Mac
Cipher
GssApiMechanism
GssApiMechanism
SaslClientFactory
SaslServerFactory
SaslClientFactory
SaslClientFactory
SaslServerFactory
SaslClientFactory
SaslServerFactory
SaslClientFactory
TransformService
TransformService
TransformService
TransformService
TransformService
TransformService
TransformService
TransformService
TransformService
KeyInfoFactory
TransformService
TransformService
XMLSignatureFactory
TerminalFactory
CertStore
SaslClientFactory
SaslServerFactory

================================================================

Sample: Provider_Service_2
----------------------------------------------------------------
stdout:
Algorithm: DSA
Algorithm: SHA-1
Algorithm: PKIX
Algorithm: MD2
Algorithm: MD5
Algorithm: SHA1PRNG
Algorithm: SHA-512/256
Algorithm: SHA3-512
Algorithm: SHA-256
Algorithm: SHA3-256withDSAinP1363Format
Algorithm: SHA512withDSAinP1363Format
Algorithm: SHA3-512withDSAinP1363Format
Algorithm: SHA1withDSA
Algorithm: SHA-384
Algorithm: SHA1withDSAinP1363Format
Algorithm: SHA256withDSAinP1363Format
Algorithm: SHA-512/224
Algorithm: SHA3-224withDSAinP1363Format
Algorithm: SHA384withDSA
Algorithm: SHA3-384withDSA
Algorithm: SHA3-512withDSA
Algorithm: JavaLoginConfig
Algorithm: SHA-512
Algorithm: SHA512withDSA
Algorithm: SHA3-224withDSA
Algorithm: SHA3-256withDSA
Algorithm: SHA224withDSA
Algorithm: SHA256withDSA
Algorithm: SHA3-256
Algorithm: Collection
Algorithm: NativePRNGBlocking
Algorithm: X.509
Algorithm: SHA384withDSAinP1363Format
Algorithm: DSA
Algorithm: SHA-224
Algorithm: DSA
Algorithm: SHA3-384
Algorithm: JKS
Algorithm: SHA3-384withDSAinP1363Format
Algorithm: DSA
Algorithm: PKIX
Algorithm: SHA3-224
Algorithm: NONEwithDSAinP1363Format
Algorithm: NativePRNG
Algorithm: NONEwithDSA
Algorithm: NativePRNGNonBlocking
Algorithm: CaseExactJKS
Algorithm: PKCS12
Algorithm: DRBG
Algorithm: SHA224withDSAinP1363Format
Algorithm: DKS
Algorithm: com.sun.security.IndexedCollection
Algorithm: JavaPolicy
Algorithm: RSASSA-PSS
Algorithm: RSA
Algorithm: RSASSA-PSS
Algorithm: RSASSA-PSS
Algorithm: SHA224withRSA
Algorithm: SHA3-224withRSA
Algorithm: RSASSA-PSS
Algorithm: RSA
Algorithm: SHA1withRSA
Algorithm: MD5withRSA
Algorithm: MD2withRSA
Algorithm: SHA256withRSA
Algorithm: SHA384withRSA
Algorithm: SHA3-256withRSA
Algorithm: SHA3-384withRSA
Algorithm: SHA3-512withRSA
Algorithm: SHA512/224withRSA
Algorithm: SHA512/256withRSA
Algorithm: SHA512withRSA
Algorithm: Ed448
Algorithm: X25519
Algorithm: X448
Algorithm: Ed25519
Algorithm: EC
Algorithm: X448
Algorithm: X448
Algorithm: X25519
Algorithm: EC
Algorithm: X25519
Algorithm: Ed25519
Algorithm: Ed25519
Algorithm: EdDSA
Algorithm: EC
Algorithm: Ed448
Algorithm: SHA256withECDSA
Algorithm: Ed448
Algorithm: SHA3-512withECDSA
Algorithm: EdDSA
Algorithm: SHA224withECDSAinP1363Format
Algorithm: SHA256withECDSAinP1363Format
Algorithm: SHA3-224withECDSA
Algorithm: SHA3-256withECDSAinP1363Format
Algorithm: SHA3-384withECDSA
Algorithm: SHA224withECDSA
Algorithm: SHA384withECDSA
Algorithm: XDH
Algorithm: SHA512withECDSA
Algorithm: EdDSA
Algorithm: SHA3-256withECDSA
Algorithm: SHA3-384withECDSAinP1363Format
Algorithm: XDH
Algorithm: NONEwithECDSA
Algorithm: NONEwithECDSAinP1363Format
Algorithm: SHA3-224withECDSAinP1363Format
Algorithm: XDH
Algorithm: SHA3-512withECDSAinP1363Format
Algorithm: SHA384withECDSAinP1363Format
Algorithm: SHA512withECDSAinP1363Format
Algorithm: SHA1withECDSA
Algorithm: ECDH
Algorithm: SHA1withECDSAinP1363Format
Algorithm: TLSv1
Algorithm: PKIX
Algorithm: NewSunX509
Algorithm: DTLSv1.0
Algorithm: DTLS
Algorithm: DTLSv1.2
Algorithm: TLS
Algorithm: Default
Algorithm: TLSv1.2
Algorithm: TLSv1.1
Algorithm: MD5andSHA1withRSA
Algorithm: PKCS12
Algorithm: TLSv1.3
Algorithm: SunX509
Algorithm: SunX509
Algorithm: HmacSHA512
Algorithm: HmacSHA3-384
Algorithm: HmacSHA3-224
Algorithm: AES
Algorithm: HmacSHA384
Algorithm: HmacSHA3-512
Algorithm: PBEWithMD5AndDES
Algorithm: HmacSHA384
Algorithm: HmacSHA512/256
Algorithm: HmacSHA3-224
Algorithm: AES/GCM/NoPadding
Algorithm: HmacSHA512/224
Algorithm: HmacSHA3-256
Algorithm: PBEWithSHA1AndRC2_128
Algorithm: HmacSHA512/224
Algorithm: HmacSHA512
Algorithm: AES_192/ECB/NoPadding
Algorithm: RC2
Algorithm: AES_128/KW/NoPadding
Algorithm: PBEWithSHA1AndRC2_40
Algorithm: HmacSHA512/256
Algorithm: PBEWithMD5AndDES
Algorithm: PBEWithSHA1AndRC4_128
Algorithm: DESede
Algorithm: PBEWithSHA1AndDESede
Algorithm: PBEWithSHA1AndRC4_40
Algorithm: PBEWithSHA1AndRC2_128
Algorithm: DiffieHellman
Algorithm: PBEWithSHA1AndRC4_128
Algorithm: DESedeWrap
Algorithm: AES_256/KW/NoPadding
Algorithm: AES/KW/NoPadding
Algorithm: HmacSHA256
Algorithm: PBEWithSHA1AndDESede
Algorithm: PBEWithSHA1AndRC4_40
Algorithm: AES_192/KWP/NoPadding
Algorithm: PBEWithSHA1AndRC4_40
Algorithm: PBEWithSHA1AndDESede
Algorithm: PBEWithHmacSHA224AndAES_128
Algorithm: PBEWithSHA1AndRC4_128
Algorithm: PBEWithSHA1AndRC2_40
Algorithm: HmacPBESHA512/224
Algorithm: PBEWithMD5AndTripleDES
Algorithm: PBEWithSHA1AndRC2_128
Algorithm: ChaCha20-Poly1305
Algorithm: AES
Algorithm: PBEWithSHA1AndRC2_40
Algorithm: HmacSHA3-512
Algorithm: DiffieHellman
Algorithm: HmacSHA3-256
Algorithm: HmacSHA3-384
Algorithm: AES_192/OFB/NoPadding
Algorithm: AES_192/CFB/NoPadding
Algorithm: AES_192/KW/NoPadding
Algorithm: SunTlsPrf
Algorithm: AES_192/GCM/NoPadding
Algorithm: SslMacMD5
Algorithm: HmacSHA224
Algorithm: PBEWithMD5AndDES
Algorithm: PBKDF2WithHmacSHA1
Algorithm: AES_192/CBC/NoPadding
Algorithm: PBEWithHmacSHA512
Algorithm: AES_128/KW/PKCS5Padding
Algorithm: DESede
Algorithm: SunTlsKeyMaterial
Algorithm: AES_256/KW/PKCS5Padding
Algorithm: OAEP
Algorithm: AES_128/ECB/NoPadding
Algorithm: SunTlsMasterSecret
Algorithm: AES_256/ECB/NoPadding
Algorithm: ChaCha20-Poly1305
Algorithm: PBEWithHmacSHA224AndAES_128
Algorithm: DiffieHellman
Algorithm: PBKDF2WithHmacSHA384
Algorithm: AES/KW/PKCS5Padding
Algorithm: ARCFOUR
Algorithm: DESede
Algorithm: ARCFOUR
Algorithm: AES_256/GCM/NoPadding
Algorithm: HmacPBESHA512/256
Algorithm: SunTls12Prf
Algorithm: Blowfish
Algorithm: PBEWithHmacSHA256
Algorithm: PBEWithHmacSHA224AndAES_128
Algorithm: HmacPBESHA384
Algorithm: PBEWithHmacSHA1AndAES_256
Algorithm: PBKDF2WithHmacSHA256
Algorithm: RC2
Algorithm: PBEWithHmacSHA384AndAES_256
Algorithm: RSA
Algorithm: HmacPBESHA256
Algorithm: HmacSHA256
Algorithm: AES_128/CFB/NoPadding
Algorithm: PBES2
Algorithm: HmacSHA1
Algorithm: AES
Algorithm: AES_128/KWP/NoPadding
Algorithm: DiffieHellman
Algorithm: AES_128/OFB/NoPadding
Algorithm: AES_256/KWP/NoPadding
Algorithm: ChaCha20
Algorithm: PBEWithHmacSHA224AndAES_256
Algorithm: HmacSHA224
Algorithm: PBEWithMD5AndTripleDES
Algorithm: DES
Algorithm: SslMacSHA1
Algorithm: PBEWithHmacSHA384
Algorithm: PBEWithHmacSHA224AndAES_256
Algorithm: DES
Algorithm: AES_256/CBC/NoPadding
Algorithm: PBEWithHmacSHA384AndAES_128
Algorithm: HmacSHA1
Algorithm: PBKDF2WithHmacSHA224
Algorithm: PBEWithHmacSHA256AndAES_256
Algorithm: HmacPBESHA224
Algorithm: PBEWithHmacSHA512AndAES_256
Algorithm: HmacMD5
Algorithm: HmacMD5
Algorithm: DESede
Algorithm: PBEWithHmacSHA512AndAES_128
Algorithm: PBEWithHmacSHA256AndAES_128
Algorithm: AES/KWP/NoPadding
Algorithm: PBEWithHmacSHA512AndAES_128
Algorithm: AES_192/KW/PKCS5Padding
Algorithm: PBEWithHmacSHA512AndAES_256
Algorithm: HmacPBESHA1
Algorithm: SunTlsRsaPremasterSecret
Algorithm: AES_256/CFB/NoPadding
Algorithm: PBEWithHmacSHA256AndAES_128
Algorithm: PBEWithHmacSHA512AndAES_128
Algorithm: PBEWithHmacSHA1AndAES_128
Algorithm: Blowfish
Algorithm: PBEWithHmacSHA224
Algorithm: PBEWithHmacSHA256AndAES_256
Algorithm: DiffieHellman
Algorithm: PBEWithHmacSHA1
Algorithm: PBEWithHmacSHA512AndAES_256
Algorithm: PBEWithHmacSHA384AndAES_256
Algorithm: PBEWithHmacSHA1AndAES_128
Algorithm: DES
Algorithm: AES_128/CBC/NoPadding
Algorithm: PBEWithHmacSHA224AndAES_256
Algorithm: AES_256/OFB/NoPadding
Algorithm: PBEWithHmacSHA384AndAES_128
Algorithm: DES
Algorithm: PBEWithHmacSHA1AndAES_128
Algorithm: PBEWithHmacSHA1AndAES_256
Algorithm: PBEWithHmacSHA384AndAES_256
Algorithm: AES_128/GCM/NoPadding
Algorithm: PBEWithHmacSHA1AndAES_256
Algorithm: PBEWithHmacSHA256AndAES_256
Algorithm: RC2
Algorithm: JCEKS
Algorithm: PBEWithHmacSHA384AndAES_128
Algorithm: Blowfish
Algorithm: GCM
Algorithm: PBKDF2WithHmacSHA512
Algorithm: ChaCha20
Algorithm: PBEWithHmacSHA256AndAES_128
Algorithm: HmacPBESHA512
Algorithm: PBEWithMD5AndTripleDES
Algorithm: 1.2.840.113554.1.2.2
Algorithm: 1.3.6.1.5.5.2
Algorithm: DIGEST-MD5
Algorithm: DIGEST-MD5
Algorithm: EXTERNAL
Algorithm: CRAM-MD5
Algorithm: CRAM-MD5
Algorithm: PLAIN
Algorithm: NTLM
Algorithm: NTLM
Algorithm: http://www.w3.org/2001/10/xml-exc-c14n#
Algorithm: http://www.w3.org/2000/09/xmldsig#enveloped-signature
Algorithm: http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments
Algorithm: http://www.w3.org/2002/06/xmldsig-filter2
Algorithm: http://www.w3.org/2006/12/xml-c14n11
Algorithm: http://www.w3.org/2001/10/xml-exc-c14n#WithComments
Algorithm: http://www.w3.org/TR/1999/REC-xslt-19991116
Algorithm: http://www.w3.org/2006/12/xml-c14n11#WithComments
Algorithm: http://www.w3.org/TR/1999/REC-xpath-19991116
Algorithm: DOM
Algorithm: http://www.w3.org/2000/09/xmldsig#base64
Algorithm: http://www.w3.org/TR/2001/REC-xml-c14n-20010315
Algorithm: DOM
Algorithm: PC/SC
Algorithm: LDAP
Algorithm: GSSAPI
Algorithm: GSSAPI

================================================================

Sample: Provider_Service_4
----------------------------------------------------------------
output:
./Data/java_security/javaFiles/Provider_Service_4.java:6: error: Provider is abstract; cannot be instantiated
        Provider provider = new Provider("MyProvider", 1.0, "My Provider");
                            ^
./Data/java_security/javaFiles/Provider_Service_4.java:7: error: no suitable constructor found for Service(String,String,String,boolean,<null>,<null>,<null>)
        Service service = new Service("MyService", "MyService", "MyService", true, null, null, null);
                          ^
    constructor Service.Service(Provider,String,String) is not applicable
      (actual and formal argument lists differ in length)
    constructor Service.Service(Provider,String,String,String,List<String>,Map<String,String>) is not applicable
      (actual and formal argument lists differ in length)
./Data/java_security/javaFiles/Provider_Service_4.java:8: error: cannot find symbol
        service.setProvider(provider);
               ^
  symbol:   method setProvider(Provider)
  location: variable service of type Service
3 errors


================================================================

Sample: SecureRandom_2
----------------------------------------------------------------
================================================================

Sample: SecureRandom_3
----------------------------------------------------------------
stdout:
-106 46 -98 -13 -10 -72 -69 -50 -127 99 
================================================================

Sample: SecureRandom_12
----------------------------------------------------------------
================================================================

Sample: Security_1
----------------------------------------------------------------
================================================================

Sample: Security_2
----------------------------------------------------------------
stdout:
Value of property key is: null

================================================================

Sample: Security_5
----------------------------------------------------------------
stdout:
Provider found: SUN

================================================================

Sample: Signature_1
----------------------------------------------------------------
output:
./Data/java_security/javaFiles/Signature_1.java:9: error: illegal start of expression
            PublicKey publicKey =...; // replace with your public key
                                 ^
1 error


================================================================

Sample: Signature_2
----------------------------------------------------------------
output:
./Data/java_security/javaFiles/Signature_2.java:9: error: illegal start of expression
            PrivateKey privateKey =...; // provide your private key here
                                   ^
1 error


================================================================

Sample: Signature_3
----------------------------------------------------------------
stderr:
java.security.SignatureException: object not initialized for signature or verification
	at java.base/java.security.Signature.update(Signature.java:904)
	at java.base/java.security.Signature.update(Signature.java:871)
	at Signature_3.main(Signature_3.java:8)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.execute(Main.java:419)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:192)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)

================================================================

Sample: Signature_4
----------------------------------------------------------------
output:
./Data/java_security/javaFiles/Signature_4.java:17: error: unreported exception InvalidKeyException; must be caught or declared to be thrown
            signature.initVerify(keyPair.getPublic());
                                ^
./Data/java_security/javaFiles/Signature_4.java:26: error: unreported exception InvalidKeyException; must be caught or declared to be thrown
            signature.initVerify(keyPair.getPublic());
                                ^
2 errors


================================================================

Sample: Signature_5
----------------------------------------------------------------
output:
./Data/java_security/javaFiles/Signature_5.java:21: error: unreported exception InvalidKeyException; must be caught or declared to be thrown
            signature.initSign(privateKey);
                              ^
1 error


================================================================

Sample: SignedObject_2
----------------------------------------------------------------
output:
./Data/java_security/javaFiles/SignedObject_2.java:10: error: constructor SignedObject in class SignedObject cannot be applied to given types;
            SignedObject signedObject = new SignedObject(new Object(), "myKey");
                                        ^
  required: Serializable,PrivateKey,Signature
  found:    Object,String
  reason: actual and formal argument lists differ in length
1 error


================================================================

Sample: SignedObject_3
----------------------------------------------------------------
output:
./Data/java_security/javaFiles/SignedObject_3.java:25: error: constructor SignedObject in class SignedObject cannot be applied to given types;
        SignedObject signedObject = new SignedObject(data, signature);
                                    ^
  required: Serializable,PrivateKey,Signature
  found:    byte[],byte[]
  reason: actual and formal argument lists differ in length
1 error


================================================================

Sample: SignedObject_5
----------------------------------------------------------------
output:
./Data/java_security/javaFiles/SignedObject_5.java:11: error: constructor SignedObject in class SignedObject cannot be applied to given types;
            SignedObject signedObject = new SignedObject(new Object(), "SHA1withRSA");
                                        ^
  required: Serializable,PrivateKey,Signature
  found:    Object,String
  reason: actual and formal argument lists differ in length
./Data/java_security/javaFiles/SignedObject_5.java:14: error: cannot find symbol
            PublicKey publicKey = signedObject.getPublicKey();
                                              ^
  symbol:   method getPublicKey()
  location: variable signedObject of type SignedObject
./Data/java_security/javaFiles/SignedObject_5.java:17: error: incompatible types: byte[] cannot be converted to Signature
            Signature signature = signedObject.getSignature();
                                                           ^
3 errors


================================================================

Sample: UnresolvedPermission_1
----------------------------------------------------------------
output:
./Data/java_security/javaFiles/UnresolvedPermission_1.java:6: error: constructor UnresolvedPermission in class UnresolvedPermission cannot be applied to given types;
        UnresolvedPermission permission1 = new UnresolvedPermission("some.permission", "some.actions");
                                           ^
  required: String,String,String,Certificate[]
  found:    String,String
  reason: actual and formal argument lists differ in length
./Data/java_security/javaFiles/UnresolvedPermission_1.java:7: error: constructor UnresolvedPermission in class UnresolvedPermission cannot be applied to given types;
        UnresolvedPermission permission2 = new UnresolvedPermission("some.permission", "some.actions");
                                           ^
  required: String,String,String,Certificate[]
  found:    String,String
  reason: actual and formal argument lists differ in length
./Data/java_security/javaFiles/UnresolvedPermission_1.java:8: error: constructor UnresolvedPermission in class UnresolvedPermission cannot be applied to given types;
        UnresolvedPermission permission3 = new UnresolvedPermission("some.other.permission", "some.actions");
                                           ^
  required: String,String,String,Certificate[]
  found:    String,String
  reason: actual and formal argument lists differ in length
3 errors


================================================================

Sample: UnresolvedPermission_2
----------------------------------------------------------------
output:
./Data/java_security/javaFiles/UnresolvedPermission_2.java:5: error: constructor UnresolvedPermission in class UnresolvedPermission cannot be applied to given types;
        UnresolvedPermission permission = new UnresolvedPermission("read");
                                          ^
  required: String,String,String,Certificate[]
  found:    String
  reason: actual and formal argument lists differ in length
1 error


================================================================

Sample: UnresolvedPermission_3
----------------------------------------------------------------
output:
./Data/java_security/javaFiles/UnresolvedPermission_3.java:5: error: constructor UnresolvedPermission in class UnresolvedPermission cannot be applied to given types;
        UnresolvedPermission unresolvedPermission = new UnresolvedPermission("");
                                                    ^
  required: String,String,String,Certificate[]
  found:    String
  reason: actual and formal argument lists differ in length
1 error


================================================================

Sample: UnresolvedPermission_5
----------------------------------------------------------------
output:
./Data/java_security/javaFiles/UnresolvedPermission_5.java:6: error: constructor UnresolvedPermission in class UnresolvedPermission cannot be applied to given types;
        Permission permission = new UnresolvedPermission("ClassName", "name", "actions");
                                ^
  required: String,String,String,Certificate[]
  found:    String,String,String
  reason: actual and formal argument lists differ in length
1 error


================================================================

