ClassName,Method,Return Type,Description
IIORegistry,getDefaultInstance(),static IIORegistry,Returns the default IIORegistry instance used by the Image I/O API.
IIORegistry,registerApplicationClasspathSpis(),void,"Registers all available service providers found on the application class path, using the default ClassLoader."
IIOServiceProvider,getDescription(Locale locale),abstract String,"Returns a brief, human-readable description of this service provider and its associated implementation."
IIOServiceProvider,getVendorName(),String,Returns the name of the vendor responsible for creating this service provider and its associated implementation.
IIOServiceProvider,getVersion(),String,Returns a string describing the version number of this service provider and its associated implementation.
IIOServiceProvider,"onDeregistration(ServiceRegistry registry, Class<?> category)",void,A callback that will be whenever the Spi class has been deregistered from a ServiceRegistry.
IIOServiceProvider,"onRegistration(ServiceRegistry registry, Class<?> category)",void,A callback that will be called exactly once after the Spi class has been instantiated and registered in a ServiceRegistry.
ImageInputStreamSpi,canUseCacheFile(),boolean,Returns true if the ImageInputStream implementation associated with this service provider can optionally make use of a cache file for improved performance and/or memory footrprint.
ImageInputStreamSpi,createInputStreamInstance(Object input),ImageInputStream,Returns an instance of the ImageInputStream implementation associated with this service provider.
ImageInputStreamSpi,"createInputStreamInstance(Object input, boolean useCache, File cacheDir)",abstract ImageInputStream,Returns an instance of the ImageInputStream implementation associated with this service provider.
ImageInputStreamSpi,getInputClass(),Class<?>,"Returns a Class object representing the class or interface type that must be implemented by an input source in order to be ""wrapped"" in an ImageInputStream via the createInputStreamInstance method."
ImageInputStreamSpi,needsCacheFile(),boolean,Returns true if the ImageInputStream implementation associated with this service provider requires the use of a cache File.
ImageOutputStreamSpi,canUseCacheFile(),boolean,Returns true if the ImageOutputStream implementation associated with this service provider can optionally make use of a cache File for improved performance and/or memory footrprint.
ImageOutputStreamSpi,createOutputStreamInstance(Object output),ImageOutputStream,Returns an instance of the ImageOutputStream implementation associated with this service provider.
ImageOutputStreamSpi,"createOutputStreamInstance(Object output, boolean useCache, File cacheDir)",abstract ImageOutputStream,Returns an instance of the ImageOutputStream implementation associated with this service provider.
ImageOutputStreamSpi,getOutputClass(),Class<?>,"Returns a Class object representing the class or interface type that must be implemented by an output destination in order to be ""wrapped"" in an ImageOutputStream via the createOutputStreamInstance method."
ImageOutputStreamSpi,needsCacheFile(),boolean,Returns true if the ImageOutputStream implementation associated with this service provider requires the use of a cache File.
ImageReaderSpi,canDecodeInput(Object source),abstract boolean,Returns true if the supplied source object appears to be of the format supported by this reader.
ImageReaderSpi,createReaderInstance(),ImageReader,Returns an instance of the ImageReader implementation associated with this service provider.
ImageReaderSpi,createReaderInstance(Object extension),abstract ImageReader,Returns an instance of the ImageReader implementation associated with this service provider.
ImageReaderSpi,getImageWriterSpiNames(),String[],"Returns an array of Strings containing the fully qualified names of all the ImageWriterSpi classes that can understand the internal metadata representation used by the ImageReader associated with this service provider, or null if there are no such ImageWriters specified."
ImageReaderSpi,getInputTypes(),Class[],Returns an array of Class objects indicating what types of objects may be used as arguments to the reader's setInput method.
ImageReaderSpi,isOwnReader(ImageReader reader),boolean,Returns true if the ImageReader object passed in is an instance of the ImageReader associated with this service provider.
ImageReaderWriterSpi,getExtraImageMetadataFormatNames(),String[],"Returns an array of Strings containing the names of additional document formats, other than the native and standard formats, recognized by the getAsTree and setFromTree methods on the image metadata objects produced or consumed by this plug-in."
ImageReaderWriterSpi,getExtraStreamMetadataFormatNames(),String[],"Returns an array of Strings containing the names of additional document formats, other than the native and standard formats, recognized by the getAsTree and setFromTree methods on the stream metadata objects produced or consumed by this plug-in."
ImageReaderWriterSpi,getFileSuffixes(),String[],Returns an array of Strings containing a list of file suffixes associated with the formats that are generally usable by the ImageReader or ImageWriter implementation associated with this service provider.
ImageReaderWriterSpi,getFormatNames(),String[],Returns an array of Strings containing human-readable names for the formats that are generally usable by the ImageReader or ImageWriter implementation associated with this service provider.
ImageReaderWriterSpi,getImageMetadataFormat(String formatName),IIOMetadataFormat,"Returns an IIOMetadataFormat object describing the given image metadata format, or null if no description is available."
ImageReaderWriterSpi,getMIMETypes(),String[],Returns an array of Strings containing a list of MIME types associated with the formats that are generally usable by the ImageReader or ImageWriter implementation associated with this service provider.
ImageReaderWriterSpi,getNativeImageMetadataFormatName(),String,"Returns the name of the ""native"" image metadata format for this plug-in, which typically allows for lossless encoding and transmission of the image metadata stored in the format handled by this plug-in."
ImageReaderWriterSpi,getNativeStreamMetadataFormatName(),String,"Returns the name of the ""native"" stream metadata format for this plug-in, which typically allows for lossless encoding and transmission of the stream metadata stored in the format handled by this plug-in."
ImageReaderWriterSpi,getPluginClassName(),String,Returns the fully-qualified class name of the ImageReader or ImageWriter plug-in associated with this service provider.
ImageReaderWriterSpi,getStreamMetadataFormat(String formatName),IIOMetadataFormat,"Returns an IIOMetadataFormat object describing the given stream metadata format, or null if no description is available."
ImageReaderWriterSpi,isStandardImageMetadataFormatSupported(),boolean,Returns true if the standard metadata format is among the document formats recognized by the getAsTree and setFromTree methods on the image metadata objects produced or consumed by this plug-in.
ImageReaderWriterSpi,isStandardStreamMetadataFormatSupported(),boolean,Returns true if the standard metadata format is among the document formats recognized by the getAsTree and setFromTree methods on the stream metadata objects produced or consumed by this plug-in.
ImageTranscoderSpi,createTranscoderInstance(),abstract ImageTranscoder,Returns an instance of the ImageTranscoder implementation associated with this service provider.
ImageTranscoderSpi,getReaderServiceProviderName(),abstract String,Returns the fully qualified class name of an ImageReaderSpi class that generates IIOMetadata objects that may be used as input to this transcoder.
ImageTranscoderSpi,getWriterServiceProviderName(),abstract String,Returns the fully qualified class name of an ImageWriterSpi class that generates IIOMetadata objects that may be used as input to this transcoder.
ImageWriterSpi,canEncodeImage(ImageTypeSpecifier type),abstract boolean,Returns true if the ImageWriter implementation associated with this service provider is able to encode an image with the given layout.
ImageWriterSpi,canEncodeImage(RenderedImage im),boolean,Returns true if the ImageWriter implementation associated with this service provider is able to encode the given RenderedImage instance.
ImageWriterSpi,createWriterInstance(),ImageWriter,Returns an instance of the ImageWriter implementation associated with this service provider.
ImageWriterSpi,createWriterInstance(Object extension),abstract ImageWriter,Returns an instance of the ImageWriter implementation associated with this service provider.
ImageWriterSpi,getImageReaderSpiNames(),String[],"Returns an array of Strings containing all the fully qualified names of all the ImageReaderSpi classes that can understand the internal metadata representation used by the ImageWriter associated with this service provider, or null if there are no such ImageReaders specified."
ImageWriterSpi,getOutputTypes(),Class[],Returns an array of Class objects indicating what types of objects may be used as arguments to the writer's setOutput method.
ImageWriterSpi,isFormatLossless(),boolean,Returns true if the format that this writer outputs preserves pixel data bit-accurately.
ImageWriterSpi,isOwnWriter(ImageWriter writer),boolean,Returns true if the ImageWriter object passed in is an instance of the ImageWriter associated with this service provider.
ServiceRegistry,contains(Object provider),boolean,Returns true if provider is currently registered.
ServiceRegistry,deregisterAll(),void,Deregisters all currently registered service providers from all categories.
ServiceRegistry,deregisterAll(Class<?> category),void,Deregisters all service provider object currently registered under the given category.
ServiceRegistry,deregisterServiceProvider(Object provider),void,Removes a service provider object from all categories that contain it.
ServiceRegistry,"deregisterServiceProvider(T provider, Class<T> category)",<T> boolean,Removes a service provider object from the given category.
ServiceRegistry,finalize(),void,Finalizes this object prior to garbage collection.
ServiceRegistry,getCategories(),Iterator<Class<?>>,Returns an Iterator of Class objects indicating the current set of categories.
ServiceRegistry,getServiceProviderByClass(Class<T> providerClass),<T> T,Returns the currently registered service provider object that is of the given class type.
ServiceRegistry,"getServiceProviders(Class<T> category, boolean useOrdering)",<T> Iterator<T>,Returns an Iterator containing all registered service providers in the given category.
ServiceRegistry,"getServiceProviders(Class<T> category, ServiceRegistry.Filter filter, boolean useOrdering)",<T> Iterator<T>,Returns an Iterator containing service provider objects within a given category that satisfy a criterion imposed by the supplied ServiceRegistry.Filter object's filter method.
ServiceRegistry,lookupProviders(Class<T> providerClass),static <T> Iterator<T>,Locates and incrementally instantiates the available providers of a given service using the context class loader.
ServiceRegistry,"lookupProviders(Class<T> providerClass, ClassLoader loader)",static <T> Iterator<T>,Searches for implementations of a particular service class using the given class loader.
ServiceRegistry,registerServiceProvider(Object provider),void,Adds a service provider object to the registry.
ServiceRegistry,"registerServiceProvider(T provider, Class<T> category)",<T> boolean,Adds a service provider object to the registry.
ServiceRegistry,registerServiceProviders(Iterator<?> providers),void,"Adds a set of service provider objects, taken from an Iterator to the registry."
ServiceRegistry,"setOrdering(Class<T> category, T firstProvider, T secondProvider)",<T> boolean,Sets a pairwise ordering between two service provider objects within a given category.
ServiceRegistry,"unsetOrdering(Class<T> category, T firstProvider, T secondProvider)",<T> boolean,Sets a pairwise ordering between two service provider objects within a given category.
