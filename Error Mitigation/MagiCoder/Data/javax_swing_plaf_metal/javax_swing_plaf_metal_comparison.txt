Sample: 0 DefaultMetalTheme
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class A concrete implementation of MetalTheme providing the original look of the Java Look and Feel, code-named "Steel".

@@ Instruction
I want to use javax.swing.plaf.metal.DefaultMetalTheme package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `void setCurrentTheme(MetalTheme theme)`: This method sets the current theme.
2. `void setUserInterfaceTheme(Theme theme)`: This method sets the user interface theme.
3. `void setDefaultTheme(MetalTheme theme)`: This method sets the default theme.
4. `void setDefaultMetalTheme(MetalTheme theme)`: This method sets the default metal theme.
5. `void setDefaultMetalTheme(MetalTheme theme, boolean isNimbus)`: This method sets the default metal theme and whether it is Nimbus.
================================================================

Sample: 1 MetalBorders
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class Factory object that can vend Borders appropriate for the metal L & F.

@@ Instruction
I want to use javax.swing.plaf.metal.MetalBorders package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public static Border createEtchedBorder()`: This method creates an etched border.
2. `public static Border createBevelBorder()`: This method creates a bevel border.
3. `public static Border createRaisedBevelBorder()`: This method creates a raised bevel border.
4. `public static Border createLoweredBevelBorder()`: This method creates a lowered bevel border.
5. `public static Border createLineBorder()`: This method creates a line border.
================================================================

Sample: 2 MetalBorders.ButtonBorder
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class NULL

@@ Instruction
I want to use javax.swing.plaf.metal.MetalBorders.ButtonBorder package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean isOpaque()`: This method returns true if the border is opaque; false otherwise.
2. `Insets getBorderInsets(Component c)`: This method returns the insets of the border.
3. `boolean isBorderOpaque()`: This method returns true if the border is opaque; false otherwise.
4. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component with the specified graphics, x, y, width, and height.
5. `Insets getBorderInsets(Component c, Insets insets)`: This method returns the insets of the border for the specified component.
================================================================

Sample: 3 MetalBorders.Flush3DBorder
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class NULL

@@ Instruction
I want to use javax.swing.plaf.metal.MetalBorders.Flush3DBorder package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `Flush3DBorder(int type, Color color, int thickness, int shadowSize, boolean highlight)`: This constructor creates a new Flush3DBorder with the specified parameters.

2. `Flush3DBorder(int type, Color color, int thickness, int shadowSize, boolean highlight, boolean highlightOnHover)`: This constructor creates a new Flush3DBorder with the specified parameters.

3. `Flush3DBorder(int type, Color color, int thickness, int shadowSize, boolean highlight, boolean highlightOnHover, boolean highlightOnPress)`: This constructor creates a new Flush3DBorder with the specified parameters.

4. `Flush3DBorder(int type, Color color, int thickness, int shadowSize, boolean highlight, boolean highlightOnHover, boolean highlightOnPress, boolean highlightOnFocus)`: This constructor creates a new Flush3DBorder with the specified parameters.

5. `Flush3DBorder(int type, Color color, int thickness, int shadowSize, boolean highlight, boolean highlightOnHover, boolean highlightOnPress, boolean highlightOnFocus, boolean highlightOnSelected)`: This constructor creates a new Flush3DBorder with the specified parameters.
================================================================

Sample: 4 MetalBorders.InternalFrameBorder
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class NULL

@@ Instruction
I want to use javax.swing.plaf.metal.MetalBorders.InternalFrameBorder package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean isOpaque()`: This method returns true if the border is opaque; false otherwise.
2. `Insets getBorderInsets(Component c)`: This method returns the insets of the border.
3. `boolean isBorderOpaque()`: This method returns true if the border is opaque; false otherwise.
4. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component with the specified graphics, x, y, width, and height.
5. `Insets getBorderInsets(Component c, Insets insets)`: This method returns the insets of the border for the specified component.
================================================================

Sample: 5 MetalBorders.MenuBarBorder
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class NULL

@@ Instruction
I want to use javax.swing.plaf.metal.MetalBorders.MenuBarBorder package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean isOpaque()`: This method returns true if the border is opaque; false otherwise.
2. `Insets getBorderInsets(Component c)`: This method returns the insets of the border.
3. `boolean isBorderOpaque()`: This method returns true if the border is opaque; false otherwise.
4. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component with the specified graphics, x, y, width, and height.
5. `Insets getInteriorInsets()`: This method returns the interior insets of the border.
================================================================

Sample: 6 MetalBorders.MenuItemBorder
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class NULL

@@ Instruction
I want to use javax.swing.plaf.metal.MetalBorders.MenuItemBorder package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean isOpaque()`: This method returns true if the border is opaque; false otherwise.
2. `Insets getBorderInsets(Component c)`: This method returns the insets of the border.
3. `boolean isBorderOpaque()`: This method returns true if the border is opaque; false otherwise.
4. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component with the specified position and dimension.
5. `Insets getBorderInsets(Component c, Insets insets)`: This method returns the insets of the border for the specified component.
================================================================

Sample: 7 MetalBorders.OptionDialogBorder
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class NULL

@@ Instruction
I want to use javax.swing.plaf.metal.MetalBorders.OptionDialogBorder package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `OptionDialogBorder(int type, Insets insets, Color highlight, Color shadow)`: This is the constructor of the OptionDialogBorder class. It takes four parameters: type (an integer representing the type of border), insets (an Insets object representing the border insets), highlight (a Color object representing the highlight color), and shadow (a Color object representing the shadow color).

2. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border of the specified component. It takes six parameters: c (the component to paint the border of), g (the Graphics object to paint on), x (the x-coordinate of the border), y (the y-coordinate of the border), width (the width of the border), and height (the height of the border).

3. `Insets getBorderInsets(Component c)`: This method returns the insets of the border. It takes one parameter: c (the component to get the border insets of).

4. `boolean isBorderOpaque()`: This method returns whether the border is opaque.

5. `void setColor(Color color)`: This method sets the color of the border. It takes one parameter: color (the Color object to set the border color to).
================================================================

Sample: 8 MetalBorders.PaletteBorder
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class Border for a Palette.

@@ Instruction
I want to use javax.swing.plaf.metal.MetalBorders.PaletteBorder package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean add(E e)`: This method appends the specified element to the end of this list.
2. `boolean addAll(Collection<? extends E> c)`: This method appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator.
3. `void clear()`: This method removes all of the elements from this list.
4. `boolean contains(Object o)`: This method returns true if this list contains the specified element.
5. `boolean containsAll(Collection<?> c)`: This method returns true if this list contains all of the elements of the specified collection.
6. `boolean equals(Object o)`: This method compares the specified object with this list for equality.
7. `E get(int index)`: This method returns the element at the specified position in this list.
8. `int indexOf(Object o)`: This method returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.
9. `boolean isEmpty()`: This method returns true if this list contains no elements.
10. `Iterator<E> iterator()`: This method returns an iterator over the elements in this list in proper sequence.
11. `int lastIndexOf(Object o)`: This method returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.
12. `ListIterator<E> listIterator()`: This method returns a list-iterator of the elements in this list (in proper sequence).
13. `ListIterator<E> listIterator(int index)`: This method returns a list-iterator of the elements in this list (in proper sequence), starting at the specified position in the list.
14. `boolean remove(Object o)`: This method removes the first occurrence of the specified element from this list, if it is present.
15. `E remove(int index)`: This method removes the element at the specified position in this list.
16. `boolean removeAll(Collection<?> c)`: This method removes from this list all of its elements that are contained in the specified collection.
17. `boolean retainAll(Collection<?> c)`: This method retains only the elements in this list that are contained in the specified collection.
18. `E set(int index, E element)`: This method replaces the element at the specified position in this list with the specified element.
19. `int size()`: This method returns the number of elements in this list.
20. `List<E> subList(int fromIndex, int toIndex)`: This method returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.
21. `Object[] toArray()`: This method returns an array containing all of the elements in this list in proper sequence (from first to last element).
22. `<T> T[] toArray(T[] a)`: This method returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.
23. `String toString()`: This method returns a string representation of this list.
================================================================

Sample: 9 MetalBorders.PopupMenuBorder
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class NULL

@@ Instruction
I want to use javax.swing.plaf.metal.MetalBorders.PopupMenuBorder package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean isBorderOpaque()`: This method returns true if the border is opaque; false otherwise.
2. `Insets getBorderInsets(Component c)`: This method returns the insets of the border.
3. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component with the specified position and dimension.
4. `void install(Component c)`: This method installs the border in the specified component.
5. `void uninstall(Component c)`: This method uninstalls the border from the specified component.
================================================================

Sample: 10 MetalBorders.RolloverButtonBorder
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class NULL

@@ Instruction
I want to use javax.swing.plaf.metal.MetalBorders.RolloverButtonBorder package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `RolloverButtonBorder(int style, Color base, Color shadow, Color highlight, Color darkShadow, Color lightHighlight, Color highlight2, Color shadow2, Color highlight3, Color shadow3, Color highlight4, Color shadow4, Color highlight5, Color shadow5, Color highlight6, Color shadow6, Color highlight7, Color shadow7, Color highlight8, Color shadow8, Color highlight9, Color shadow9, Color highlight10, Color shadow10, Color highlight11, Color shadow11, Color highlight12, Color shadow12, Color highlight13, Color shadow13, Color highlight14, Color shadow14, Color highlight15, Color shadow15, Color highlight16, Color shadow16, Color highlight17, Color shadow17, Color highlight18, Color shadow18, Color highlight19, Color shadow19, Color highlight20, Color shadow20, Color highlight21, Color shadow21, Color highlight22, Color shadow22, Color highlight23, Color shadow23, Color highlight24, Color shadow24, Color highlight25, Color shadow25, Color highlight26, Color shadow26, Color highlight27, Color shadow27, Color highlight28, Color shadow28, Color highlight29, Color shadow29, Color highlight30, Color shadow30, Color highlight31, Color shadow31, Color highlight32, Color shadow32, Color highlight33, Color shadow33, Color highlight34, Color shadow34, Color highlight35, Color shadow35, Color highlight36, Color shadow36, Color highlight37, Color shadow37, Color highlight38, Color shadow38, Color highlight39, Color shadow39, Color highlight40, Color shadow40, Color highlight41, Color shadow41, Color highlight42, Color shadow42, Color highlight43, Color shadow43, Color highlight44, Color shadow44, Color highlight45, Color shadow45, Color highlight46, Color shadow46, Color highlight47, Color shadow47, Color highlight48, Color shadow48, Color highlight49, Color shadow49, Color highlight50, Color shadow50, Color highlight51, Color shadow51, Color highlight52, Color shadow52, Color highlight53, Color shadow53, Color highlight54, Color shadow54, Color highlight55, Color shadow55, Color highlight56, Color shadow56, Color highlight57, Color shadow57, Color highlight58, Color shadow58, Color highlight59, Color shadow59, Color highlight60, Color shadow60, Color highlight61, Color shadow61, Color highlight62, Color shadow62, Color highlight63, Color shadow63, Color highlight64, Color shadow64, Color highlight65, Color shadow65, Color highlight66, Color shadow66, Color highlight67, Color shadow67, Color highlight68, Color shadow68, Color highlight69, Color shadow69, Color highlight70, Color shadow70, Color highlight71, Color shadow71, Color highlight72, Color shadow72, Color highlight73, Color shadow73, Color highlight74, Color shadow74, Color highlight75, Color shadow75, Color highlight76, Color shadow76, Color highlight77, Color shadow77, Color highlight78, Color shadow78, Color highlight79, Color shadow79, Color highlight80, Color shadow80, Color highlight81, Color shadow81, Color highlight82, Color shadow82, Color highlight83, Color shadow83, Color highlight84, Color shadow84, Color highlight85, Color shadow85, Color highlight86, Color shadow86, Color highlight87, Color shadow87, Color highlight88, Color shadow88, Color highlight89, Color shadow89, Color highlight90, Color shadow90, Color highlight91, Color shadow91, Color highlight92, Color shadow92, Color highlight93, Color shadow93, Color highlight94, Color shadow94, Color highlight95, Color shadow95, Color highlight96, Color shadow96, Color highlight97, Color shadow97, Color highlight98, Color shadow98, Color highlight99, Color shadow99, Color highlight100, Color shadow100, Color highlight101, Color shadow101, Color highlight102, Color shadow102, Color highlight103, Color shadow103, Color highlight104, Color shadow104, Color highlight105, Color shadow105, Color highlight106, Color shadow106, Color highlight107, Color shadow107, Color highlight108, Color shadow108, Color highlight109, Color shadow109, Color highlight110, Color shadow110, Color highlight111, Color shadow111, Color highlight112, Color shadow112, Color highlight113, Color shadow113, Color highlight114, Color shadow114, Color highlight115, Color shadow115, Color highlight116, Color shadow116, Color highlight117, Color shadow117, Color highlight118, Color shadow118, Color highlight119, Color shadow119, Color highlight120, Color shadow120, Color highlight121, Color shadow121, Color highlight122, Color shadow122, Color highlight123, Color shadow123, Color highlight124, Color shadow124, Color highlight125, Color shadow125, Color highlight126, Color shadow126, Color highlight127, Color shadow127, Color highlight128, Color shadow128, Color highlight129, Color shadow129, Color highlight130, Color shadow130, Color highlight131, Color shadow131, Color highlight132, Color shadow132, Color highlight133, Color shadow133, Color highlight134, Color shadow134, Color highlight135, Color shadow135, Color highlight136, Color shadow136, Color highlight137, Color shadow137, Color highlight138, Color shadow138, Color highlight139, Color shadow139, Color highlight140, Color shadow140, Color highlight141, Color shadow141, Color highlight142, Color shadow142, Color highlight143, Color shadow143, Color highlight144, Color shadow144, Color highlight145, Color shadow145, Color highlight146, Color shadow146, Color highlight147, Color shadow147, Color highlight148, Color shadow148, Color highlight149, Color shadow149, Color highlight150, Color shadow150, Color highlight151, Color shadow151, Color highlight152, Color shadow152, Color highlight153, Color shadow153, Color highlight154, Color shadow154, Color highlight155, Color shadow155, Color highlight156, Color shadow156, Color highlight157, Color shadow157, Color highlight158, Color shadow158, Color highlight159, Color shadow159, Color highlight160, Color shadow160, Color highlight161, Color shadow161, Color highlight162, Color shadow162, Color highlight163, Color shadow163, Color highlight164, Color shadow164, Color highlight165, Color shadow165, Color highlight166, Color shadow166, Color highlight167, Color shadow167, Color highlight168, Color shadow168, Color highlight16
================================================================

Sample: 11 MetalBorders.ScrollPaneBorder
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class NULL

@@ Instruction
I want to use javax.swing.plaf.metal.MetalBorders.ScrollPaneBorder package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean isOpaque()`: This method returns true if the border is opaque; false otherwise.
2. `Insets getBorderInsets(Component c)`: This method returns the insets of the border.
3. `boolean isBorderOpaque()`: This method returns true if the border is opaque; false otherwise.
4. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component with the specified graphics, x, y, width, and height.
5. `Insets getInteriorInsets()`: This method returns the insets of the interior of the border.
================================================================

Sample: 12 MetalBorders.TableHeaderBorder
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class Border for a Table Header

@@ Instruction
I want to use javax.swing.plaf.metal.MetalBorders.TableHeaderBorder package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean isOpaque()`: This method returns true if the border is opaque; false otherwise.
2. `Insets getBorderInsets(Component c)`: This method returns the insets of the border.
3. `boolean isBorderOpaque()`: This method returns true if the border is opaque; false otherwise.
4. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component with the specified position and dimension.
5. `Insets getBorderInsets(Component c, Insets insets)`: This method returns the insets of the border for the specified component.
================================================================

Sample: 13 MetalBorders.TextFieldBorder
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class NULL

@@ Instruction
I want to use javax.swing.plaf.metal.MetalBorders.TextFieldBorder package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean isOpaque()`: This method returns true if the border is opaque; false otherwise.
2. `Insets getBorderInsets(Component c)`: This method returns the insets of the border.
3. `boolean isBorderOpaque()`: This method returns true if the border is opaque; false otherwise.
4. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component with the specified graphics, x, y, width, and height.
5. `Insets getInteriorInsets()`: This method returns the insets of the interior of the border.
================================================================

Sample: 14 MetalBorders.ToggleButtonBorder
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class NULL

@@ Instruction
I want to use javax.swing.plaf.metal.MetalBorders.ToggleButtonBorder package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean isToggleButton()`: This method returns true if the button is a toggle button.

2. `void setToggleButton(boolean toggleButton)`: This method sets the button as a toggle button.

3. `boolean isSelected()`: This method returns true if the button is selected.

4. `void setSelected(boolean selected)`: This method sets the button as selected.

5. `void setToggleButtonState(boolean pressed)`: This method sets the state of the toggle button.
================================================================

Sample: 15 MetalBorders.ToolBarBorder
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class NULL

@@ Instruction
I want to use javax.swing.plaf.metal.MetalBorders.ToolBarBorder package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean isBorderOpaque()`: This method returns true if the border is opaque; false otherwise.

2. `Insets getBorderInsets(Component c)`: This method returns the insets of the border.

3. `boolean isBorderOpaque()`: This method returns true if the border is opaque; false otherwise.

4. `Insets getBorderInsets(Component c)`: This method returns the insets of the border.

5. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component with the specified position and dimension.
================================================================

Sample: 16 MetalButtonUI
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class MetalButtonUI implementation

@@ Instruction
I want to use javax.swing.plaf.metal.MetalButtonUI package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public void installDefaults(JComponent c)`: This method installs the default look and feel for the specified component.

2. `public void installColorsAndFont(JComponent c, JComponent.Painter painter)`: This method installs the colors and font for the specified component.

3. `public void installFocus(JComponent c)`: This method installs the focus for the specified component.

4. `public void installProperties(JComponent c, JComponent.Painter painter)`: This method installs the properties for the specified component.

5. `public void uninstall(JComponent c)`: This method uninstalls the look and feel for the specified component.
================================================================

Sample: 17 MetalCheckBoxIcon
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class CheckboxIcon implementation for OrganicCheckBoxUI

@@ Instruction
I want to use javax.swing.plaf.metal.MetalCheckBoxIcon package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean isSelected()`: This method returns the current state of the checkbox.
2. `void setSelected(boolean b)`: This method sets the current state of the checkbox.
3. `void paintIcon(Component c, Graphics g, int x, int y)`: This method paints the icon.
4. `int getIconWidth()`: This method returns the width of the icon.
5. `int getIconHeight()`: This method returns the height of the icon.
================================================================

Sample: 18 MetalCheckBoxUI
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class CheckboxUI implementation for MetalCheckboxUI

@@ Instruction
I want to use javax.swing.plaf.metal.MetalCheckBoxUI package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public void installDefaults(JComponent c)`: This method installs the default look and feel for the specified component.

2. `public void installColorsAndFont(JComponent c, JLabel.LabelPlacement labelPlacement, int iconTextGap)`: This method installs the colors and font for the specified component.

3. `public void paint(Graphics g, JComponent c)`: This method paints the specified component.

4. `public void update(Graphics g, JComponent c)`: This method updates the specified component.

5. `public Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the specified component.
================================================================

Sample: 19 MetalComboBoxButton
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class JButton subclass to help out MetalComboBoxUI

@@ Instruction
I want to use javax.swing.plaf.metal.MetalComboBoxButton package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean add(E e)`: This method appends the specified element to the end of this list.
2. `void addActionListener(ActionListener l)`: This method adds an ActionListener to the list that's notified each time an action occurs.
3. `void addItem(Object item)`: This method adds the specified object as a new item in the list.
4. `void addItemListener(ItemListener l)`: This method adds an ItemListener to the list that's notified each time an item is selected or deselected.
5. `void addKeyListener(KeyListener l)`: This method adds a KeyListener to the list that's notified each time a key is typed, pressed, or released.
================================================================

Sample: 20 MetalComboBoxEditor
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class The default editor for Metal editable combo boxes

@@ Instruction
I want to use javax.swing.plaf.metal.MetalComboBoxEditor package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean add(E e)`: This method appends the specified element to the end of this list.
2. `void addActionListener(ActionListener l)`: This method adds an ActionListener to the list that's notified each time an action occurs.
3. `void addItem(Object item)`: This method adds the specified object as a new item in the list.
4. `void addItemListener(ItemListener l)`: This method adds an ItemListener to the list that's notified each time an item is added or removed.
5. `void addKeyListener(KeyListener l)`: This method adds a KeyListener to the list that's notified each time a key is typed, pressed, or released.
================================================================

Sample: 21 MetalComboBoxEditor.UIResource
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class A subclass of BasicComboBoxEditor that implements UIResource.

@@ Instruction
I want to use javax.swing.plaf.metal.MetalComboBoxEditor.UIResource package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean add(E e)`: This method appends the specified element to the end of this list.
2. `void addActionListener(ActionListener l)`: This method adds an ActionListener to the list that's notified each time an action occurs.
3. `void addItemListener(ItemListener l)`: This method adds an ItemListener to the list that's notified each time an item is added or removed.
4. `void removeActionListener(ActionListener l)`: This method removes an ActionListener from the list.
5. `void removeItemListener(ItemListener l)`: This method removes an ItemListener from the list.
================================================================

Sample: 22 MetalComboBoxIcon
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class This utility class draws the horizontal bars which indicate a MetalComboBox

@@ Instruction
I want to use javax.swing.plaf.metal.MetalComboBoxIcon package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean add(E e)`: This method appends the specified element to the end of this list.
2. `void addActionListener(ActionListener l)`: This method adds an ActionListener to the list that's notified each time an action occurs.
3. `void addItem(Object item)`: This method adds the specified object as a new item in the list.
4. `void addItemListener(ItemListener l)`: This method adds an ItemListener to the list that's notified each time an item is selected or deselected.
5. `void addKeyListener(KeyListener l)`: This method adds a KeyListener to the list that's notified each time a key is typed, pressed, or released.
================================================================

Sample: 23 MetalComboBoxUI
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class Metal UI for JComboBox

@@ Instruction
I want to use javax.swing.plaf.metal.MetalComboBoxUI package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public void installComboBox(JComboBox comboBox)`: This method installs the combo box.
2. `public void uninstallComboBox()`: This method uninstalls the combo box.
3. `public void paint(Graphics g, JComboBox comboBox)`: This method paints the combo box.
4. `public void paintItem(Graphics g, int index, Rectangle area, boolean selected, boolean focused)`: This method paints the item at the specified index.
5. `public void paintFocus(Graphics g, int x, int y, int w, int h)`: This method paints the focus rectangle.
================================================================

Sample: 24 MetalDesktopIconUI
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class Metal desktop icon.

@@ Instruction
I want to use javax.swing.plaf.metal.MetalDesktopIconUI package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public void installDefaults(JComponent c)`: This method installs the default look and feel for the specified component.

2. `public void uninstallDefaults(JComponent c)`: This method uninstalls the default look and feel for the specified component.

3. `public void paint(Graphics g, JComponent c)`: This method paints the specified component.

4. `public void installColorsAndFont(JComponent c, JComponent.PaintContext pc)`: This method installs the colors and fonts for the specified component.

5. `public void uninstallColorsAndFont(JComponent c, JComponent.PaintContext pc)`: This method uninstalls the colors and fonts for the specified component.

6. `public void installFocus(JComponent c)`: This method installs the focus for the specified component.

7. `public void uninstallFocus(JComponent c)`: This method uninstalls the focus for the specified component.

8. `public void installProperties(JComponent c, JComponent.PaintContext pc)`: This method installs the properties for the specified component.

9. `public void uninstallProperties(JComponent c, JComponent.PaintContext pc)`: This method uninstalls the properties for the specified component.

10. `public void installDimension(JComponent c)`: This method installs the dimension for the specified component.

11. `public void uninstallDimension(JComponent c)`: This method uninstalls the dimension for the specified component.

12. `public void installIcon(JComponent c)`: This method installs the icon for the specified component.

13. `public void uninstallIcon(JComponent c)`: This method uninstalls the icon for the specified component.

14. `public void installText(JComponent c)`: This method installs the text for the specified component.

15. `public void uninstallText(JComponent c)`: This method uninstalls the text for the specified component.

16. `public void installBorder(JComponent c)`: This method installs the border for the specified component.

17. `public void uninstallBorder(JComponent c)`: This method uninstalls the border for the specified component.

18. `public void installComponents(JComponent c)`: This method installs the components for the specified component.

19. `public void uninstallComponents(JComponent c)`: This method uninstalls the components for the specified component.

20. `public void installComponent(JComponent c)`: This method installs the component for the specified component.

21. `public void uninstallComponent(JComponent c)`: This method uninstalls the component for the specified component.

22. `public void installDecoration(JComponent c)`: This method installs the decoration for the specified component.

23. `public void uninstallDecoration(JComponent c)`: This method uninstalls the decoration for the specified component.

24. `public void installDecorations(JComponent c)`: This method installs the decorations for the specified component.

25. `public void uninstallDecorations(JComponent c)`: This method uninstalls the decorations for the specified component.
================================================================

Sample: 25 MetalFileChooserUI
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class Metal L&F implementation of a FileChooser.

@@ Instruction
I want to use javax.swing.plaf.metal.MetalFileChooserUI package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public void setFile(File file)`: This method sets the file that the file chooser is currently displaying.

2. `public void setCurrentDirectory(File directory)`: This method sets the current directory of the file chooser.

3. `public void setDialogTitle(String title)`: This method sets the title of the file chooser dialog.

4. `public void setApproveButtonText(String text)`: This method sets the text of the approve button.

5. `public void setCancelButtonText(String text)`: This method sets the text of the cancel button.

6. `public void setFileSelectionMode(int mode)`: This method sets the file selection mode.

7. `public void setFileFilter(FileFilter filter)`: This method sets the file filter.

8. `public void setAcceptAllFileFilterUsed(boolean b)`: This method sets whether the accept all file filter is used.

9. `public void setMultiSelectionEnabled(boolean b)`: This method sets whether multiple selections are enabled.

10. `public void setSelectedFiles(File[] files)`: This method sets the selected files.

11. `public void setSelectedFile(File file)`: This method sets the selected file.

12. `public void setDialogType(int dialogType)`: This method sets the dialog type.

13. `public void setFileHidingEnabled(boolean b)`: This method sets whether file hiding is enabled.

14. `public void setFileView(FileView fv)`: This method sets the file view.

15. `public void setAccessory(JComponent comp)`: This method sets the accessory component.

16. `public void setOptionPane(JOptionPane pane)`: This method sets the option pane.

17. `public void setFileSelectionListener(FileSelectionListener listener)`: This method sets the file selection listener.

18. `public void setApproveAction(ActionListener listener)`: This method sets the approve action listener.

19. `public void setCancelAction(ActionListener listener)`: This method sets the cancel action listener.

20. `public void setFileView(FileView fv)`: This method sets the file view.
================================================================

Sample: 26 MetalIconFactory
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class Factory object that vends Icons for the Java™ look and feel (Metal).

@@ Instruction
I want to use javax.swing.plaf.metal.MetalIconFactory package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `Icon getIcon(String iconName)`: This method returns an Icon object for the specified icon name.
2. `Icon getIcon(String iconName, int iconType)`: This method returns an Icon object for the specified icon name and type.
3. `Icon getIcon(String iconName, int iconType, int size)`: This method returns an Icon object for the specified icon name, type, and size.
4. `Icon getIcon(String iconName, int iconType, int size, boolean isSelected, boolean hasFocus)`: This method returns an Icon object for the specified icon name, type, size, selection state, and focus state.
5. `Icon getIcon(String iconName, int iconType, int size, boolean isSelected, boolean hasFocus, boolean isPressed)`: This method returns an Icon object for the specified icon name, type, size, selection state, focus state, and pressed state.
================================================================

Sample: 27 MetalIconFactory.FileIcon16
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class Warning: Serialized objects of this class will not be compatible with future Swing releases.

@@ Instruction
I want to use javax.swing.plaf.metal.MetalIconFactory.FileIcon16 package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public static Icon getFileIcon16()`: This method returns a 16x16 icon representing a file.
2. `public static Icon getFolderIcon16()`: This method returns a 16x16 icon representing a folder.
3. `public static Icon getFolderOpenIcon16()`: This method returns a 16x16 icon representing an open folder.
4. `public static Icon getFolderClosedIcon16()`: This method returns a 16x16 icon representing a closed folder.
5. `public static Icon getFolderNewIcon16()`: This method returns a 16x16 icon representing a new folder.
6. `public static Icon getFolderSavedIcon16()`: This method returns a 16x16 icon representing a saved folder.
7. `public static Icon getFolderOpenSavedIcon16()`: This method returns a 16x16 icon representing an open and saved folder.
8. `public static Icon getFolderClosedSavedIcon16()`: This method returns a 16x16 icon representing a closed and saved folder.
9. `public static Icon getFolderNewSavedIcon16()`: This method returns a 16x16 icon representing a new and saved folder.
10. `public static Icon getFolderOpenNewIcon16()`: This method returns a 16x16 icon representing an open, new, and saved folder.
11. `public static Icon getFolderClosedNewIcon16()`: This method returns a 16x16 icon representing a closed, new, and saved folder.
12. `public static Icon getFolderOpenNewSavedIcon16()`: This method returns a 16x16 icon representing an open, new, and saved folder.
13. `public static Icon getFolderClosedNewSavedIcon16()`: This method returns a 16x16 icon representing a closed, new, and saved folder.
14. `public static Icon getFileNewIcon16()`: This method returns a 16x16 icon representing a new file.
15. `public static Icon getFileSavedIcon16()`: This method returns a 16x16 icon representing a saved file.
16. `public static Icon getFileOpenIcon16()`: This method returns a 16x16 icon representing an open file.
17. `public static Icon getFileClosedIcon16()`: This method returns a 16x16 icon representing a closed file.
18. `public static Icon getFileNewSavedIcon16()`: This method returns a 16x16 icon representing a new and saved file.
19. `public static Icon getFileOpenNewIcon16()`: This method returns a 16x16 icon representing an open, new, and saved file.
20. `public static Icon getFileClosedNewIcon16()`: This method returns a 16x16 icon representing a closed, new, and saved file.
21. `public static Icon getFileOpenNewSavedIcon16()`: This method returns a 16x16 icon representing an open, new, and saved file.
22. `public static Icon getFileClosedNewSavedIcon16()`: This method returns a 16x16 icon representing a closed, new, and saved file.
23. `public static Icon getFileOpenSavedIcon16()`: This method returns a 16x16 icon representing an open and saved file.
24. `public static Icon getFileClosedSavedIcon16()`: This method returns a 16x16 icon representing a closed and saved file.
25. `public static Icon getFileNewOpenIcon16()`: This method returns a 16x16 icon representing a new and open file.
26. `public static Icon getFileNewClosedIcon16()`: This method returns a 16x16 icon representing a new and closed file.
27. `public static Icon getFileNewOpenSavedIcon16()`: This method returns a 16x16 icon representing a new, open, and saved file.
28. `public static Icon getFileNewClosedSavedIcon16()`: This method returns a 16x16 icon representing a new, closed, and saved file.
29. `public static Icon getFileSavedOpenIcon16()`: This method returns a 16x16 icon representing a saved and open file.
30. `public static Icon getFileSavedClosedIcon16()`: This method returns a 16x16 icon representing a saved and closed file.
31. `public static Icon getFileSavedOpenSavedIcon16()`: This method returns a 16x16 icon representing a saved, open, and saved file.
32. `public static Icon getFileSavedClosedSavedIcon16()`: This method returns a 16x16 icon representing a saved, closed, and saved file.
33. `public static Icon getFileOpenNewSavedIcon16()`: This method returns a 16x16 icon representing an open, new, and saved file.
34. `public static Icon getFileClosedNewSavedIcon16()`: This method returns a 16x16 icon representing a closed, new, and saved file.
35. `public static Icon getFileOpenSavedIcon16()`: This method returns a 16x16 icon representing an open and saved file.
36. `public static Icon getFileClosedSavedIcon16()`: This method returns a 16x16 icon representing a closed and saved file.
37. `public static Icon getFileNewOpenIcon16()`: This method returns a 16x16 icon representing a new and open file.
38. `public static Icon getFileNewClosedIcon16()`: This method returns a 16x16 icon representing a new and closed file.
39. `public static Icon getFileNewOpenSavedIcon16()`: This method returns a 16x16 icon representing a new, open, and saved file.
40. `public static Icon getFileNewClosedSavedIcon16()`: This method returns a 16x16 icon representing a new, closed, and saved file.
================================================================

Sample: 28 MetalIconFactory.FolderIcon16
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class Warning: Serialized objects of this class will not be compatible with future Swing releases.

@@ Instruction
I want to use javax.swing.plaf.metal.MetalIconFactory.FolderIcon16 package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean add(E e)`: This method appends the specified element to the end of this list.
2. `void add(int index, E element)`: This method inserts the specified element at the specified position in this list.
3. `boolean addAll(Collection<? extends E> c)`: This method appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator.
4. `boolean addAll(int index, Collection<? extends E> c)`: This method inserts all of the elements in the specified collection into this list, starting at the specified position.
5. `void clear()`: This method removes all of the elements from this list.
================================================================

Sample: 29 MetalIconFactory.PaletteCloseIcon
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class Defines an icon for Palette close

@@ Instruction
I want to use javax.swing.plaf.metal.MetalIconFactory.PaletteCloseIcon package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public Icon getIcon()`: This method returns the icon.
2. `public int getIconHeight()`: This method returns the icon's height.
3. `public int getIconWidth()`: This method returns the icon's width.
4. `public void paintIcon(Component c, Graphics g, int x, int y)`: This method paints the icon.
5. `public void paintIcon(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the icon.
================================================================

Sample: 30 MetalIconFactory.TreeControlIcon
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class Warning: Serialized objects of this class will not be compatible with future Swing releases.

@@ Instruction
I want to use javax.swing.plaf.metal.MetalIconFactory.TreeControlIcon package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean isCollapsed()`: This method returns true if the tree control icon is collapsed.
2. `boolean isExpanded()`: This method returns true if the tree control icon is expanded.
3. `void setCollapsed(boolean collapsed)`: This method sets the collapsed state of the tree control icon.
4. `void setExpanded(boolean expanded)`: This method sets the expanded state of the tree control icon.
5. `void setSelected(boolean selected)`: This method sets the selected state of the tree control icon.
================================================================

Sample: 31 MetalIconFactory.TreeFolderIcon
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class Warning: Serialized objects of this class will not be compatible with future Swing releases.

@@ Instruction
I want to use javax.swing.plaf.metal.MetalIconFactory.TreeFolderIcon package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean add(E e)`: This method appends the specified element to the end of this list.
2. `boolean addAll(Collection<? extends E> c)`: This method appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator.
3. `void clear()`: This method removes all of the elements from this list.
4. `boolean contains(Object o)`: This method returns true if this list contains the specified element.
5. `boolean containsAll(Collection<?> c)`: This method returns true if this list contains all of the elements of the specified collection.
6. `boolean equals(Object o)`: This method compares the specified object with this list for equality.
7. `E get(int index)`: This method returns the element at the specified position in this list.
8. `int indexOf(Object o)`: This method returns the index in this list of the first occurrence of the specified element, or -1 if this list does not contain this element.
9. `boolean isEmpty()`: This method returns true if this list contains no elements.
10. `Iterator<E> iterator()`: This method returns an iterator over the elements in this list in proper sequence.
11. `int lastIndexOf(Object o)`: This method returns the index in this list of the last occurrence of the specified element, or -1 if this list does not contain this element.
12. `ListIterator<E> listIterator()`: This method returns a list-iterator of the elements in this list (in proper sequence).
13. `ListIterator<E> listIterator(int index)`: This method returns a list-iterator of the elements in this list (in proper sequence), starting at the specified position in the list.
14. `E remove(int index)`: This method removes the element at the specified position in this list.
15. `boolean remove(Object o)`: This method removes the first occurrence of the specified element from this list, if it is present.
16. `boolean removeAll(Collection<?> c)`: This method removes all of this list's elements that are also contained in the specified collection.
17. `boolean retainAll(Collection<?> c)`: This method retains only the elements in this list that are contained in the specified collection.
18. `E set(int index, E element)`: This method replaces the element at the specified position in this list with the specified element.
19. `int size()`: This method returns the number of elements in this list.
20. `List<E> subList(int fromIndex, int toIndex)`: This method returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.
21. `Object[] toArray()`: This method returns an array containing all of the elements in this list in proper sequence (from first to last element).
22. `<T> T[] toArray(T[] a)`: This method returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.
23. `String toString()`: This method returns a string representation of this list.
24. `List<E> subList(int fromIndex, int toIndex)`: This method returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.
25. `List<E> subList(int fromIndex, int toIndex)`: This method returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.
================================================================

Sample: 32 MetalIconFactory.TreeLeafIcon
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class NULL

@@ Instruction
I want to use javax.swing.plaf.metal.MetalIconFactory.TreeLeafIcon package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean isLeaf()`: This method returns true if the node is a leaf node.
2. `void setLeaf(boolean leaf)`: This method sets the leaf property of the node.
3. `boolean isExpanded()`: This method returns true if the node is expanded.
4. `void setExpanded(boolean expanded)`: This method sets the expanded property of the node.
5. `void setSelected(boolean selected)`: This method sets the selected property of the node.
================================================================

Sample: 33 MetalInternalFrameTitlePane
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class Class that manages a JLF title bar

@@ Instruction
I want to use javax.swing.plaf.metal.MetalInternalFrameTitlePane package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `void setIconifiable(boolean b)`: This method sets whether the internal frame can be iconified.
2. `void setMaximizable(boolean b)`: This method sets whether the internal frame can be maximized.
3. `void setMinimizable(boolean b)`: This method sets whether the internal frame can be minimized.
4. `void setResizable(boolean b)`: This method sets whether the internal frame can be resized.
5. `void setTitle(String title)`: This method sets the title of the internal frame.
================================================================

Sample: 34 MetalInternalFrameUI
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class Metal implementation of JInternalFrame.

@@ Instruction
I want to use javax.swing.plaf.metal.MetalInternalFrameUI package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public void installDefaults(JComponent c)`: This method installs the default look and feel for the specified component.

2. `public void installColorsAndFont(JComponent c, JLabel.FlatClientProperties properties)`: This method installs the colors and font for the specified component.

3. `public void installDimensions(JComponent c)`: This method installs the dimensions for the specified component.

4. `public void installIcon(JComponent c)`: This method installs the icon for the specified component.

5. `public void installKeys(JComponent c)`: This method installs the keys for the specified component.

6. `public void installUI(JComponent c)`: This method installs the UI for the specified component.

7. `public void uninstallUI(JComponent c)`: This method uninstalls the UI for the specified component.

8. `public void update(Graphics g, JComponent c)`: This method updates the UI for the specified component.

9. `public void paint(Graphics g, JComponent c)`: This method paints the UI for the specified component.

10. `public void paintFocus(Graphics g, JComponent c)`: This method paints the focus for the specified component.

11. `public void paintBorder(Graphics g, JComponent c, int x, int y, int w, int h)`: This method paints the border for the specified component.

12. `public void paintChildren(Graphics g, JComponent c)`: This method paints the children for the specified component.

13. `public void paintComponent(Graphics g, JComponent c)`: This method paints the component for the specified component.

14. `public void paint(Graphics g, JComponent c, int x, int y, int w, int h)`: This method paints the UI for the specified component.

15. `public void paint(Graphics g, JComponent c, int x, int y, int w, int h, Object[] a, int aa, int ab)`: This method paints the UI for the specified component.

16. `public void paint(Graphics g, JComponent c, int x, int y, int w, int h, Object[] a, int aa, int ab, int ac)`: This method paints the UI for the specified component.

17. `public void paint(Graphics g, JComponent c, int x, int y, int w, int h, Object[] a, int aa, int ab, int ac, int ad)`: This method paints the UI for the specified component.

18. `public void paint(Graphics g, JComponent c, int x, int y, int w, int h, Object[] a, int aa, int ab, int ac, int ad, int ae)`: This method paints the UI for the specified component.

19. `public void paint(Graphics g, JComponent c, int x, int y, int w, int h, Object[] a, int aa, int ab, int ac, int ad, int ae, int af)`: This method paints the UI for the specified component.

20. `public void paint(Graphics g, JComponent c, int x, int y, int w, int h, Object[] a, int aa, int ab, int ac, int ad, int ae, int af, int ag)`: This method paints the UI for the specified component.
================================================================

Sample: 35 MetalLabelUI
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class A Windows L&F implementation of LabelUI.

@@ Instruction
I want to use javax.swing.plaf.metal.MetalLabelUI package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public void installDefaults(JComponent c)`: This method installs the default look and feel for the specified component.

2. `public void installColorsAndFont(JComponent c, JLabel l)`: This method installs the colors and font for the specified component.

3. `public void paint(Graphics g, JComponent c)`: This method paints the label.

4. `public Dimension getPreferredSize(JLabel l)`: This method returns the preferred size of the label.

5. `public void paintFocus(Graphics g, Rectangle r)`: This method paints the focus rectangle.
================================================================

Sample: 36 MetalLookAndFeel
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class The Java Look and Feel, otherwise known as Metal.

@@ Instruction
I want to use javax.swing.plaf.metal.MetalLookAndFeel package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `void setCurrentTheme(Theme theme)`: This method sets the current theme.
2. `Theme getCurrentTheme()`: This method returns the current theme.
3. `void setNativeMenuBar(boolean b)`: This method sets whether the native menu bar should be used.
4. `boolean isNativeMenuBar()`: This method returns whether the native menu bar is used.
5. `void setNativeWindowOpaque(boolean b)`: This method sets whether the native window should be opaque.
6. `boolean isNativeWindowOpaque()`: This method returns whether the native window is opaque.
7. `void setNativeMenuBarTransparency(boolean b)`: This method sets whether the native menu bar should be transparent.
8. `boolean isNativeMenuBarTransparency()`: This method returns whether the native menu bar is transparent.
9. `void setNativeContextMenu(boolean b)`: This method sets whether the native context menu should be used.
10. `boolean isNativeContextMenu()`: This method returns whether the native context menu is used.
11. `void setNativeFileDialog(boolean b)`: This method sets whether the native file dialog should be used.
12. `boolean isNativeFileDialog()`: This method returns whether the native file dialog is used.
13. `void setNativeFileDialogFilter(boolean b)`: This method sets whether the native file dialog filter should be used.
14. `boolean isNativeFileDialogFilter()`: This method returns whether the native file dialog filter is used.
15. `void setNativeFileDialogDirectory(boolean b)`: This method sets whether the native file dialog directory should be used.
16. `boolean isNativeFileDialogDirectory()`: This method returns whether the native file dialog directory is used.
17. `void setNativeFileDialogMultipleMode(boolean b)`: This method sets whether the native file dialog multiple mode should be used.
18. `boolean isNativeFileDialogMultipleMode()`: This method returns whether the native file dialog multiple mode is used.
19. `void setNativeFileDialogShowHiddenFiles(boolean b)`: This method sets whether the native file dialog should show hidden files.
20. `boolean isNativeFileDialogShowHiddenFiles()`: This method returns whether the native file dialog shows hidden files.
21. `void setNativeFileDialogShowFiles(boolean b)`: This method sets whether the native file dialog should show files.
22. `boolean isNativeFileDialogShowFiles()`: This method returns whether the native file dialog shows files.
23. `void setNativeFileDialogShowDirectories(boolean b)`: This method sets whether the native file dialog should show directories.
24. `boolean isNativeFileDialogShowDirectories()`: This method returns whether the native file dialog shows directories.
25. `void setNativeFileDialogShowHiddenDirectories(boolean b)`: This method sets whether the native file dialog should show hidden directories.
26. `boolean isNativeFileDialogShowHiddenDirectories()`: This method returns whether the native file dialog shows hidden directories.
27. `void setNativeFileDialogShowAllFiles(boolean b)`: This method sets whether the native file dialog should show all files.
28. `boolean isNativeFileDialogShowAllFiles()`: This method returns whether the native file dialog shows all files.
29. `void setNativeFileDialogShowAllDirectories(boolean b)`: This method sets whether the native file dialog should show all directories.
30. `boolean isNativeFileDialogShowAllDirectories()`: This method returns whether the native file dialog shows all directories.
31. `void setNativeFileDialogShowAllFilesAndDirectories(boolean b)`: This method sets whether the native file dialog should show all files and directories.
32. `boolean isNativeFileDialogShowAllFilesAndDirectories()`: This method returns whether the native file dialog shows all files and directories.
33. `void setNativeFileDialogShowAllFilesAndDirectoriesIncludingHidden(boolean b)`: This method sets whether the native file dialog should show all files and directories including hidden.
34. `boolean isNativeFileDialogShowAllFilesAndDirectoriesIncludingHidden()`: This method returns whether the native file dialog shows all files and directories including hidden.
35. `void setNativeFileDialogShowAllFilesAndDirectoriesExcludingHidden(boolean b)`: This method sets whether the native file dialog should show all files and directories excluding hidden.
36. `boolean isNativeFileDialogShowAllFilesAndDirectoriesExcludingHidden()`: This method returns whether the native file dialog shows all files and directories excluding hidden.
37. `void setNativeFileDialogShowAllFilesAndDirectoriesExcludingSystem(boolean b)`: This method sets whether the native file dialog should show all files and directories excluding system.
38. `boolean isNativeFileDialogShowAllFilesAndDirectoriesExcludingSystem()`: This method returns whether the native file dialog shows all files and directories excluding system.
39. `void setNativeFileDialogShowAllFilesAndDirectoriesExcludingSystemAndHidden(boolean b)`: This method sets whether the native file dialog should show all files and directories excluding system and hidden.
40. `boolean isNativeFileDialogShowAllFilesAndDirectoriesExcludingSystemAndHidden()`: This method returns whether the native file dialog shows all files and directories excluding system and hidden.
41. `void setNativeFileDialogShowAllFilesAndDirectoriesExcludingSystemAndHiddenAndReadOnly(boolean b)`: This method sets whether the native file dialog should show all files and directories excluding system, hidden, and read-only.
42. `boolean isNativeFileDialogShowAllFilesAndDirectoriesExcludingSystemAndHiddenAndReadOnly()`: This method returns whether the native file dialog shows all files and directories excluding system, hidden, and read-only.
43. `void setNativeFileDialogShowAllFilesAndDirectoriesExcludingSystemAndHiddenAndReadOnlyAndExecutable(boolean b)`: This method sets whether the native file dialog should show all files and directories excluding system, hidden, read-only, and executable.
44. `boolean isNativeFileDialogShowAllFilesAndDirectoriesExcludingSystemAndHiddenAndReadOnlyAndExecutable()`: This method returns whether the native file dialog shows all files and directories excluding system, hidden, read-only, and executable.
45. `void setNativeFileDialogShowAllFilesAndDirectoriesExcludingSystemAndHiddenAndReadOnlyAndExecutableAndArchive(boolean b)`: This method sets whether the native file dialog should show all files and directories excluding system, hidden, read-only, executable, and archive.
46. `boolean isNativeFileDialogShowAllFilesAndDirectoriesExcludingSystemAndHiddenAndReadOnlyAndExecutableAndArchive()`: This method returns whether the native file dialog shows all files and directories excluding system, hidden, read-only, executable, and archive.
47. `void setNativeFileDialogShowAllFilesAndDirectoriesExcludingSystemAndHiddenAndReadOnlyAndExecutableAndArchiveAndCompressed(boolean b)`: This method sets whether the native file dialog should show all files and directories excluding system, hidden, read-only, executable, archive, and compressed.
48. `boolean isNativeFileDialogShowAllFilesAndDirectoriesExcludingSystemAndHiddenAndReadOnlyAndExecutableAndArchiveAndCompressed()`: This method returns whether the native file dialog shows all files and directories excluding system, hidden, read-only, executable, archive, and compressed.
49. `void setNativeFileDialogShowAllFilesAndDirectoriesExcludingSystemAndHiddenAndReadOnlyAndExecutableAndArchiveAndCompressedAndSpecial(boolean b)`: This method sets whether the native file dialog should show all files and directories excluding system, hidden, read-only, executable, archive, compressed, and special.
50. `boolean
================================================================

Sample: 37 MetalMenuBarUI
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class Metal implementation of MenuBarUI.

@@ Instruction
I want to use javax.swing.plaf.metal.MetalMenuBarUI package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public void installDefaults(JComponent c)`: This method installs the default look and feel for the specified component.

2. `public void installColorsAndFont(JComponent c, JMenuItem m)`: This method installs the colors and fonts for the specified component and menu item.

3. `public void paint(Graphics g, JComponent c)`: This method paints the specified component.

4. `public void update(Graphics g, JComponent c)`: This method updates the specified component.

5. `public void uninstallDefaults(JComponent c)`: This method uninstalls the default look and feel for the specified component.
================================================================

Sample: 38 MetalPopupMenuSeparatorUI
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class A Metal L&F implementation of PopupMenuSeparatorUI.

@@ Instruction
I want to use javax.swing.plaf.metal.MetalPopupMenuSeparatorUI package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `void installDefaults(JComponent c)`: This method installs the default look and feel for the specified component.

2. `void installColorsAndFont(JComponent c, JPopupMenu.BoundedRangeModel m, JSlider.PaintScale scale)`: This method installs the colors and fonts for the specified component.

3. `void paint(Graphics g, JComponent c)`: This method paints the specified component.

4. `void update(Graphics g, JComponent c)`: This method updates the specified component.

5. `void uninstallDefaults(JComponent c)`: This method uninstalls the default look and feel for the specified component.
================================================================

Sample: 39 MetalProgressBarUI
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class The Metal implementation of ProgressBarUI.

@@ Instruction
I want to use javax.swing.plaf.metal.MetalProgressBarUI package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public void setProgressBar(JProgressBar pb)`: This method sets the progress bar.
2. `public void paint(Graphics g, JComponent c)`: This method paints the progress bar.
3. `public Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the progress bar.
4. `public void installUI(JComponent c)`: This method installs the UI.
5. `public void uninstallUI(JComponent c)`: This method uninstalls the UI.
================================================================

Sample: 40 MetalRadioButtonUI
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class RadioButtonUI implementation for MetalRadioButtonUI

@@ Instruction
I want to use javax.swing.plaf.metal.MetalRadioButtonUI package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public void installDefaults(JComponent c)`: This method installs the default look and feel for the specified component.

2. `public void installColorsAndFont(JComponent c, JLabel.LabelPlacement labelPlacement, int iconTextGap)`: This method installs the colors and font for the specified component.

3. `public void paint(Graphics g, JComponent c)`: This method paints the specified component.

4. `public void update(Graphics g, JComponent c)`: This method updates the specified component.

5. `public Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the specified component.
================================================================

Sample: 41 MetalRootPaneUI
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class Provides the metal look and feel implementation of RootPaneUI.

@@ Instruction
I want to use javax.swing.plaf.metal.MetalRootPaneUI package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public void installDefaults(JComponent c)`: This method installs the default look and feel for the specified component.

2. `public void installColorsAndFont(JComponent c, JLabel.FlatClientProperties properties)`: This method installs the colors and fonts for the specified component.

3. `public void installComponents(JComponent c)`: This method installs the components for the specified component.

4. `public void installIcons(JComponent c)`: This method installs the icons for the specified component.

5. `public void installBorder(JComponent c)`: This method installs the border for the specified component.
================================================================

Sample: 42 MetalScrollBarUI
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class Implementation of ScrollBarUI for the Metal Look and Feel

@@ Instruction
I want to use javax.swing.plaf.metal.MetalScrollBarUI package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public void setThumbBounds(int x, int y, int width, int height)`: This method sets the bounds of the thumb.
2. `public void paintThumb(Graphics g, JComponent c, Rectangle thumbBounds)`: This method paints the thumb.
3. `public void paintTrack(Graphics g, JComponent c, Rectangle trackBounds)`: This method paints the track.
4. `public void paintDecreaseButton(Graphics g, JComponent c, Rectangle buttonBounds)`: This method paints the decrease button.
5. `public void paintIncreaseButton(Graphics g, JComponent c, Rectangle buttonBounds)`: This method paints the increase button.
================================================================

Sample: 43 MetalScrollButton
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class JButton object for Metal scrollbar arrows.

@@ Instruction
I want to use javax.swing.plaf.metal.MetalScrollButton package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean isOpaque()`: This method returns true if the button is opaque; false otherwise.

2. `void setIcon(Icon icon)`: This method sets the icon of the button.

3. `void setRolloverIcon(Icon rolloverIcon)`: This method sets the rollover icon of the button.

4. `void setPressedIcon(Icon pressedIcon)`: This method sets the pressed icon of the button.

5. `void setDisabledIcon(Icon disabledIcon)`: This method sets the disabled icon of the button.

6. `void setRolloverSelectedIcon(Icon rolloverSelectedIcon)`: This method sets the rollover selected icon of the button.

7. `void setPressedSelectedIcon(Icon pressedSelectedIcon)`: This method sets the pressed selected icon of the button.

8. `void setDisabledSelectedIcon(Icon disabledSelectedIcon)`: This method sets the disabled selected icon of the button.

9. `void setRolloverEnabled(boolean b)`: This method sets whether the button is rollover enabled.

10. `void setPressedEnabled(boolean b)`: This method sets whether the button is pressed enabled.

11. `void setDisabledEnabled(boolean b)`: This method sets whether the button is disabled enabled.

12. `void setRolloverSelectedEnabled(boolean b)`: This method sets whether the button is rollover selected enabled.

13. `void setPressedSelectedEnabled(boolean b)`: This method sets whether the button is pressed selected enabled.

14. `void setDisabledSelectedEnabled(boolean b)`: This method sets whether the button is disabled selected enabled.

15. `void setRolloverSelected(boolean b)`: This method sets whether the button is rollover selected.

16. `void setPressedSelected(boolean b)`: This method sets whether the button is pressed selected.

17. `void setDisabledSelected(boolean b)`: This method sets whether the button is disabled selected.

18. `void setRollover(boolean b)`: This method sets whether the button is rollover.

19. `void setPressed(boolean b)`: This method sets whether the button is pressed.

20. `void setDisabled(boolean b)`: This method sets whether the button is disabled.

21. `void setRolloverEnabled(boolean b)`: This method sets whether the button is rollover enabled.

22. `void setPressedEnabled(boolean b)`: This method sets whether the button is pressed enabled.

23. `void setDisabledEnabled(boolean b)`: This method sets whether the button is disabled enabled.

24. `void setRolloverSelectedEnabled(boolean b)`: This method sets whether the button is rollover selected enabled.

25. `void setPressedSelectedEnabled(boolean b)`: This method sets whether the button is pressed selected enabled.

26. `void setDisabledSelectedEnabled(boolean b)`: This method sets whether the button is disabled selected enabled.

27. `void setRolloverSelected(boolean b)`: This method sets whether the button is rollover selected.

28. `void setPressedSelected(boolean b)`: This method sets whether the button is pressed selected.

29. `void setDisabledSelected(boolean b)`: This method sets whether the button is disabled selected.

30. `void setRollover(boolean b)`: This method sets whether the button is rollover.

31. `void setPressed(boolean b)`: This method sets whether the button is pressed.

32. `void setDisabled(boolean b)`: This method sets whether the button is disabled.
================================================================

Sample: 44 MetalScrollPaneUI
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class A Metal L&F implementation of ScrollPaneUI.

@@ Instruction
I want to use javax.swing.plaf.metal.MetalScrollPaneUI package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public void installDefaults(JComponent c)`: This method installs the default look and feel for the specified component.

2. `public void installColorsAndFont(JComponent c, JLabel label)`: This method installs the colors and fonts for the specified component.

3. `public void installDimensions(JComponent c)`: This method installs the dimensions for the specified component.

4. `public void installScrollBars(JComponent c)`: This method installs the scroll bars for the specified component.

5. `public void installComponents(JComponent c)`: This method installs the components for the specified component.
================================================================

Sample: 45 MetalSeparatorUI
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class A Metal L&F implementation of SeparatorUI.

@@ Instruction
I want to use javax.swing.plaf.metal.MetalSeparatorUI package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public void paint(Graphics g, JComponent c)`: This method paints the separator.
2. `public Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the separator.
3. `public void installDefaults(JComponent c)`: This method installs the default properties for the separator.
4. `public void uninstallDefaults(JComponent c)`: This method uninstalls the default properties for the separator.
5. `public void update(Graphics g, JComponent c)`: This method updates the separator.
================================================================

Sample: 46 MetalSliderUI
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class A Java L&F implementation of SliderUI.

@@ Instruction
I want to use javax.swing.plaf.metal.MetalSliderUI package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public void setThumbBounds(int x, int y, int width, int height)`: This method sets the bounds of the thumb.

2. `public void paintThumb(Graphics g)`: This method paints the thumb.

3. `public void paintTrack(Graphics g)`: This method paints the track.

4. `public void paintTickMarks(Graphics g)`: This method paints the tick marks.

5. `public void paintLabel(Graphics g)`: This method paints the label.
================================================================

Sample: 47 MetalSplitPaneUI
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class Metal split pane.

@@ Instruction
I want to use javax.swing.plaf.metal.MetalSplitPaneUI package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public void installDefaults(JComponent c)`: This method installs the default look and feel for the specified component.

2. `public void installColorsAndFont(JComponent c, JLabel.FlatClientProperties properties)`: This method installs the colors and fonts for the specified component.

3. `public void installDimension(JComponent c)`: This method installs the dimension for the specified component.

4. `public void installFocus(JComponent c)`: This method installs the focus for the specified component.

5. `public void installKeys(JComponent c)`: This method installs the keys for the specified component.

6. `public void installUI(JComponent c)`: This method installs the UI for the specified component.

7. `public void installDefaults(JComponent c)`: This method installs the defaults for the specified component.

8. `public void installColorsAndFont(JComponent c, JLabel.FlatClientProperties properties)`: This method installs the colors and fonts for the specified component.

9. `public void installDimension(JComponent c)`: This method installs the dimension for the specified component.

10. `public void installFocus(JComponent c)`: This method installs the focus for the specified component.

11. `public void installKeys(JComponent c)`: This method installs the keys for the specified component.

12. `public void installUI(JComponent c)`: This method installs the UI for the specified component.

13. `public void installDefaults(JComponent c)`: This method installs the defaults for the specified component.

14. `public void installColorsAndFont(JComponent c, JLabel.FlatClientProperties properties)`: This method installs the colors and fonts for the specified component.

15. `public void installDimension(JComponent c)`: This method installs the dimension for the specified component.

16. `public void installFocus(JComponent c)`: This method installs the focus for the specified component.

17. `public void installKeys(JComponent c)`: This method installs the keys for the specified component.

18. `public void installUI(JComponent c)`: This method installs the UI for the specified component.

19. `public void installDefaults(JComponent c)`: This method installs the defaults for the specified component.

20. `public void installColorsAndFont(JComponent c, JLabel.FlatClientProperties properties)`: This method installs the colors and fonts for the specified component.
================================================================

Sample: 48 MetalTabbedPaneUI
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class The Metal subclass of BasicTabbedPaneUI.

@@ Instruction
I want to use javax.swing.plaf.metal.MetalTabbedPaneUI package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `void addTab(String title, Icon icon, Component component, String tip)`: This method adds a new tab to the tabbed pane.

2. `void removeTab(int index)`: This method removes the tab at the specified position.

3. `void setSelectedIndex(int index)`: This method sets the currently selected tab.

4. `int getSelectedIndex()`: This method returns the index of the currently selected tab.

5. `void setTabComponentAt(int index, Component component)`: This method sets the component for the tab at the specified position.
================================================================

Sample: 49 MetalTextFieldUI
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class Basis of a look and feel for a JTextField.

@@ Instruction
I want to use javax.swing.plaf.metal.MetalTextFieldUI package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public void installDefaults(JComponent c)`: This method installs the default look and feel for the specified component.

2. `public void installColorsAndFont(JComponent c, JLabel.LabelPlacement labelPlacement)`: This method installs the colors and font for the specified component.

3. `public void paint(Graphics g, JComponent c)`: This method paints the specified component.

4. `public void update(Graphics g, JComponent c)`: This method updates the specified component.

5. `public void installFocus(JComponent c)`: This method installs the focus for the specified component.
================================================================

Sample: 50 MetalTheme
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class MetalTheme provides the color palette and fonts used by the Java Look and Feel.

@@ Instruction
I want to use javax.swing.plaf.metal.MetalTheme package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public Color getSystemTextColor()`: This method returns the system text color.
2. `public Color getSystemHighlightColor()`: This method returns the system highlight color.
3. `public Color getSystemHighlightTextColor()`: This method returns the system highlight text color.
4. `public Color getSystemInactiveTextColor()`: This method returns the system inactive text color.
5. `public Color getSystemInfoColor()`: This method returns the system info color.
6. `public Color getSystemWarningColor()`: This method returns the system warning color.
7. `public Color getSystemErrorColor()`: This method returns the system error color.
8. `public Color getSystemTextInactiveColor()`: This method returns the system text inactive color.
9. `public Color getSystemTextAltColor()`: This method returns the system text alternate color.
10. `public Color getSystemTextHighlightColor()`: This method returns the system text highlight color.
11. `public Color getSystemTextHighlightTextColor()`: This method returns the system text highlight text color.
12. `public Color getSystemTextInactiveTextColor()`: This method returns the system text inactive text color.
13. `public Color getSystemTextAltInactiveColor()`: This method returns the system text alternate inactive color.
14. `public Color getSystemTextAltHighlightColor()`: This method returns the system text alternate highlight color.
15. `public Color getSystemTextAltHighlightTextColor()`: This method returns the system text alternate highlight text color.
16. `public Color getSystemTextFieldBackground()`: This method returns the system text field background color.
17. `public Color getSystemTextFieldForeground()`: This method returns the system text field foreground color.
18. `public Color getSystemTextFieldSelectionBackground()`: This method returns the system text field selection background color.
19. `public Color getSystemTextFieldSelectionForeground()`: This method returns the system text field selection foreground color.
20. `public Color getSystemTextFieldInactiveBackground()`: This method returns the system text field inactive background color.
21. `public Color getSystemTextFieldInactiveForeground()`: This method returns the system text field inactive foreground color.
22. `public Color getSystemTextFieldInactiveSelectionBackground()`: This method returns the system text field inactive selection background color.
23. `public Color getSystemTextFieldInactiveSelectionForeground()`: This method returns the system text field inactive selection foreground color.
24. `public Color getSystemTextAreaBackground()`: This method returns the system text area background color.
25. `public Color getSystemTextAreaForeground()`: This method returns the system text area foreground color.
26. `public Color getSystemTextAreaSelectionBackground()`: This method returns the system text area selection background color.
27. `public Color getSystemTextAreaSelectionForeground()`: This method returns the system text area selection foreground color.
28. `public Color getSystemTextAreaInactiveBackground()`: This method returns the system text area inactive background color.
29. `public Color getSystemTextAreaInactiveForeground()`: This method returns the system text area inactive foreground color.
30. `public Color getSystemTextAreaInactiveSelectionBackground()`: This method returns the system text area inactive selection background color.
31. `public Color getSystemTextAreaInactiveSelectionForeground()`: This method returns the system text area inactive selection foreground color.
32. `public Color getSystemMenuBackground()`: This method returns the system menu background color.
33. `public Color getSystemMenuForeground()`: This method returns the system menu foreground color.
34. `public Color getSystemMenuSelectionBackground()`: This method returns the system menu selection background color.
35. `public Color getSystemMenuSelectionForeground()`: This method returns the system menu selection foreground color.
36. `public Color getSystemMenuInactiveBackground()`: This method returns the system menu inactive background color.
37. `public Color getSystemMenuInactiveForeground()`: This method returns the system menu inactive foreground color.
38. `public Color getSystemMenuInactiveSelectionBackground()`: This method returns the system menu inactive selection background color.
39. `public Color getSystemMenuInactiveSelectionForeground()`: This method returns the system menu inactive selection foreground color.
40. `public Color getSystemMenuTextFieldBackground()`: This method returns the system menu text field background color.
41. `public Color getSystemMenuTextFieldForeground()`: This method returns the system menu text field foreground color.
42. `public Color getSystemMenuTextFieldSelectionBackground()`: This method returns the system menu text field selection background color.
43. `public Color getSystemMenuTextFieldSelectionForeground()`: This method returns the system menu text field selection foreground color.
44. `public Color getSystemMenuTextFieldInactiveBackground()`: This method returns the system menu text field inactive background color.
45. `public Color getSystemMenuTextFieldInactiveForeground()`: This method returns the system menu text field inactive foreground color.
46. `public Color getSystemMenuTextFieldInactiveSelectionBackground()`: This method returns the system menu text field inactive selection background color.
47. `public Color getSystemMenuTextFieldInactiveSelectionForeground()`: This method returns the system menu text field inactive selection foreground color.
48. `public Color getSystemMenuBarBackground()`: This method returns the system menu bar background color.
49. `public Color getSystemMenuBarForeground()`: This method returns the system menu bar foreground color.
50. `public Color getSystemMenuBarSelectionBackground()`: This method returns the system menu bar selection background color.
51. `public Color getSystemMenuBarSelectionForeground()`: This method returns the system menu bar selection foreground color.
52. `public Color getSystemMenuBarInactiveBackground()`: This method returns the system menu bar inactive background color.
53. `public Color getSystemMenuBarInactiveForeground()`: This method returns the system menu bar inactive foreground color.
54. `public Color getSystemMenuBarInactiveSelectionBackground()`: This method returns the system menu bar inactive selection background color.
55. `public Color getSystemMenuBarInactiveSelectionForeground()`: This method returns the system menu bar inactive selection foreground color.
56. `public Color getSystemMenuBarTextFieldBackground()`: This method returns the system menu bar text field background color.
57. `public Color getSystemMenuBarTextFieldForeground()`: This method returns the system menu bar text field foreground color.
58. `public Color getSystemMenuBarTextFieldSelectionBackground()`: This method returns the system menu bar text field selection background color.
59. `public Color getSystemMenuBarTextFieldSelectionForeground()`: This method returns the system menu bar text field selection foreground color.
60. `public Color getSystemMenuBarTextFieldInactiveBackground()`: This method returns the system menu bar text field inactive background color.
61. `public Color getSystemMenuBarTextFieldInactiveForeground()`: This method returns the system menu bar text field inactive foreground color.
62. `public Color getSystemMenuBarTextFieldInactiveSelectionBackground()`: This method returns the system menu bar text field inactive selection background color.
63. `public Color getSystemMenuBarTextFieldInactiveSelectionForeground()`: This method returns the system menu bar text field inactive selection foreground color.
64. `public Color getSystemWindowBackground()`: This method returns the system window background color.
65.
================================================================

Sample: 51 MetalToggleButtonUI
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class MetalToggleButton implementation

@@ Instruction
I want to use javax.swing.plaf.metal.MetalToggleButtonUI package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public void setSelected(boolean b)`: This method sets the selected state of the toggle button.

2. `public boolean isSelected()`: This method returns the selected state of the toggle button.

3. `public void setArmed(boolean b)`: This method sets the armed state of the toggle button.

4. `public boolean isArmed()`: This method returns the armed state of the toggle button.

5. `public void setPushed(boolean b)`: This method sets the pushed state of the toggle button.

6. `public boolean isPushed()`: This method returns the pushed state of the toggle button.

7. `public void setRollover(boolean b)`: This method sets the rollover state of the toggle button.

8. `public boolean isRollover()`: This method returns the rollover state of the toggle button.

9. `public void setEnabled(boolean b)`: This method sets the enabled state of the toggle button.

10. `public boolean isEnabled()`: This method returns the enabled state of the toggle button.

11. `public void setFocus(boolean b)`: This method sets the focus state of the toggle button.

12. `public boolean isFocus()`: This method returns the focus state of the toggle button.

13. `public void setModel(ButtonModel m)`: This method sets the model of the toggle button.

14. `public ButtonModel getModel()`: This method returns the model of the toggle button.

15. `public void setPressedIcon(Icon icon)`: This method sets the pressed icon of the toggle button.

16. `public Icon getPressedIcon()`: This method returns the pressed icon of the toggle button.

17. `public void setRolloverIcon(Icon icon)`: This method sets the rollover icon of the toggle button.

18. `public Icon getRolloverIcon()`: This method returns the rollover icon of the toggle button.

19. `public void setSelectedIcon(Icon icon)`: This method sets the selected icon of the toggle button.

20. `public Icon getSelectedIcon()`: This method returns the selected icon of the toggle button.

21. `public void setDisabledIcon(Icon icon)`: This method sets the disabled icon of the toggle button.

22. `public Icon getDisabledIcon()`: This method returns the disabled icon of the toggle button.

23. `public void setBorderPainted(boolean b)`: This method sets the border painted state of the toggle button.

24. `public boolean isBorderPainted()`: This method returns the border painted state of the toggle button.

25. `public void setContentAreaFilled(boolean b)`: This method sets the content area filled state of the toggle button.

26. `public boolean isContentAreaFilled()`: This method returns the content area filled state of the toggle button.

27. `public void setRolloverEnabled(boolean b)`: This method sets the rollover enabled state of the toggle button.

28. `public boolean isRolloverEnabled()`: This method returns the rollover enabled state of the toggle button.

29. `public void setFocusPainted(boolean b)`: This method sets the focus painted state of the toggle button.

30. `public boolean isFocusPainted()`: This method returns the focus painted state of the toggle button.

31. `public void setBorder(Border b)`: This method sets the border of the toggle button.

32. `public Border getBorder()`: This method returns the border of the toggle button.

33. `public void setIcon(Icon icon)`: This method sets the icon of the toggle button.

34. `public Icon getIcon()`: This method returns the icon of the toggle button.

35. `public void setText(String text)`: This method sets the text of the toggle button.

36. `public String getText()`: This method returns the text of the toggle button.

37. `public void setMargin(Insets insets)`: This method sets the margin of the toggle button.

38. `public Insets getMargin()`: This method returns the margin of the toggle button.

39. `public void setPadding(Insets insets)`: This method sets the padding of the toggle button.

40. `public Insets getPadding()`: This method returns the padding of the toggle button.

41. `public void setAlignmentX(float alignment)`: This method sets the alignment of the toggle button along the x-axis.

42. `public float getAlignmentX()`: This method returns the alignment of the toggle button along the x-axis.

43. `public void setAlignmentY(float alignment)`: This method sets the alignment of the toggle button along the y-axis.

44. `public float getAlignmentY()`: This method returns the alignment of the toggle button along the y-axis.

45. `public void setMaximumSize(Dimension d)`: This method sets the maximum size of the toggle button.

46. `public Dimension getMaximumSize()`: This method returns the maximum size of the toggle button.

47. `public void setMinimumSize(Dimension d)`: This method sets the minimum size of the toggle button.

48. `public Dimension getMinimumSize()`: This method returns the minimum size of the toggle button.

49. `public void setPreferredSize(Dimension d)`: This method sets the preferred size of the toggle button.

50. `public Dimension getPreferredSize()`: This method returns the preferred size of the toggle button.

51. `public void setSize(Dimension d)`: This method sets the size of the toggle button.

52. `public Dimension getSize()`: This method returns the size of the toggle button.

53. `public void setLayout(LayoutManager mgr)`: This method sets the layout manager of the toggle button.

54. `public LayoutManager getLayout()`: This method returns the layout manager of the toggle button.

55. `public void setVisible(boolean b)`: This method sets the visibility of the toggle button.

56. `public boolean isVisible()`: This method returns the visibility of the toggle button.

57. `public void setEnabled(boolean b)`: This method sets the enabled state of the toggle button.

58. `public boolean isEnabled()`: This method returns the enabled state of the toggle button.

59. `public void setFocusable(boolean b)`: This method sets the focusable state of the toggle button.

60. `public boolean isFocusable()`: This method returns the focusable state of the toggle button.

61. `public void setFocusTraversalKeysEnabled(boolean b)`: This method sets the focus traversal keys enabled state of the toggle button.

62. `public boolean isFocusTraversalKeysEnabled()`: This method returns the focus traversal keys enabled state of the toggle button.

63. `public void setFont(Font f)`: This method sets the font of the toggle button.

64. `public Font getFont()`: This method returns the font of the toggle button.

65. `public void setForeground(Color c)`: This method sets the foreground color of the toggle button.

66. `public Color getForeground()`: This method returns the foreground color of the toggle button.

67. `public void setBackground(Color c)`: This method sets
================================================================

Sample: 52 MetalToolBarUI
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class A Metal Look and Feel implementation of ToolBarUI.

@@ Instruction
I want to use javax.swing.plaf.metal.MetalToolBarUI package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `void add(JComponent c)`: This method adds the specified component to the toolbar.
2. `void add(JComponent c, int index)`: This method adds the specified component to the toolbar at the specified index.
3. `void add(JComponent c, Object constraints)`: This method adds the specified component to the toolbar with the specified constraints.
4. `void add(JComponent c, Object constraints, int index)`: This method adds the specified component to the toolbar with the specified constraints at the specified index.
5. `void add(JComponent c, String constraints)`: This method adds the specified component to the toolbar with the specified constraints.
6. `void add(JComponent c, String constraints, int index)`: This method adds the specified component to the toolbar with the specified constraints at the specified index.
7. `void add(JComponent c, Object constraints, int index, int alignment)`: This method adds the specified component to the toolbar with the specified constraints at the specified index with the specified alignment.
8. `void add(JComponent c, String constraints, int index, int alignment)`: This method adds the specified component to the toolbar with the specified constraints at the specified index with the specified alignment.
9. `void add(JComponent c, Object constraints, int index, int alignment, int fill)`: This method adds the specified component to the toolbar with the specified constraints at the specified index with the specified alignment and fill.
10. `void add(JComponent c, String constraints, int index, int alignment, int fill)`: This method adds the specified component to the toolbar with the specified constraints at the specified index with the specified alignment and fill.
11. `void add(JComponent c, Object constraints, int index, int alignment, int fill, int group)`: This method adds the specified component to the toolbar with the specified constraints at the specified index with the specified alignment, fill, and group.
12. `void add(JComponent c, String constraints, int index, int alignment, int fill, int group)`: This method adds the specified component to the toolbar with the specified constraints at the specified index with the specified alignment, fill, and group.
13. `void add(JComponent c, Object constraints, int index, int alignment, int fill, int group, int priority)`: This method adds the specified component to the toolbar with the specified constraints at the specified index with the specified alignment, fill, group, and priority.
14. `void add(JComponent c, String constraints, int index, int alignment, int fill, int group, int priority)`: This method adds the specified component to the toolbar with the specified constraints at the specified index with the specified alignment, fill, group, and priority.
15. `void add(JComponent c, Object constraints, int index, int alignment, int fill, int group, int priority, int weightx, int weighty)`: This method adds the specified component to the toolbar with the specified constraints at the specified index with the specified alignment, fill, group, priority, weightx, and weighty.
16. `void add(JComponent c, String constraints, int index, int alignment, int fill, int group, int priority, int weightx, int weighty)`: This method adds the specified component to the toolbar with the specified constraints at the specified index with the specified alignment, fill, group, priority, weightx, and weighty.
17. `void add(JComponent c, Object constraints, int index, int alignment, int fill, int group, int priority, int weightx, int weighty, int minwidth, int minheight)`: This method adds the specified component to the toolbar with the specified constraints at the specified index with the specified alignment, fill, group, priority, weightx, weighty, minwidth, and minheight.
18. `void add(JComponent c, String constraints, int index, int alignment, int fill, int group, int priority, int weightx, int weighty, int minwidth, int minheight)`: This method adds the specified component to the toolbar with the specified constraints at the specified index with the specified alignment, fill, group, priority, weightx, weighty, minwidth, and minheight.
19. `void add(JComponent c, Object constraints, int index, int alignment, int fill, int group, int priority, int weightx, int weighty, int minwidth, int minheight, int maxwidth, int maxheight)`: This method adds the specified component to the toolbar with the specified constraints at the specified index with the specified alignment, fill, group, priority, weightx, weighty, minwidth, maxwidth, minheight, and maxheight.
20. `void add(JComponent c, String constraints, int index, int alignment, int fill, int group, int priority, int weightx, int weighty, int minwidth, int minheight, int maxwidth, int maxheight)`: This method adds the specified component to the toolbar with the specified constraints at the specified index with the specified alignment, fill, group, priority, weightx, weighty, minwidth, maxwidth, minheight, and maxheight.
21. `void add(JComponent c, Object constraints, int index, int alignment, int fill, int group, int priority, int weightx, int weighty, int minwidth, int minheight, int maxwidth, int maxheight, int spanx, int spany)`: This method adds the specified component to the toolbar with the specified constraints at the specified index with the specified alignment, fill, group, priority, weightx, weighty, minwidth, maxwidth, minheight, maxheight, spanx, and spany.
22. `void add(JComponent c, String constraints, int index, int alignment, int fill, int group, int priority, int weightx, int weighty, int minwidth, int minheight, int maxwidth, int maxheight, int spanx, int spany)`: This method adds the specified component to the toolbar with the specified constraints at the specified index with the specified alignment, fill, group, priority, weightx, weighty, minwidth, maxwidth, minheight, maxheight, spanx, and spany.
23. `void add(JComponent c, Object constraints, int index, int alignment, int fill, int group, int priority, int weightx, int weighty, int minwidth, int minheight, int maxwidth, int maxheight, int spanx, int spany, int minsize, int maxsize)`: This method adds the specified component to the toolbar with the specified constraints at the specified index with the specified alignment, fill, group, priority, weightx, weighty, minwidth, maxwidth, minheight, maxheight, spanx, spany, minsize, and maxsize.
24. `void add(JComponent c, String constraints, int index, int alignment, int fill, int group, int priority, int weightx, int weighty, int minwidth, int minheight, int maxwidth, int maxheight, int spanx, int spany, int minsize, int maxsize)`: This method adds the specified component to the toolbar with the specified constraints at the specified index with the specified alignment, fill, group, priority, weightx, weighty, minwidth, maxwidth, minheight, maxheight, spanx, spany, minsize, and maxsize.
25. `void add(JComponent c, Object constraints, int index, int alignment, int fill, int group, int priority, int weightx, int weighty, int minwidth, int minheight, int maxwidth, int maxheight, int spanx, int spany, int minsize, int maxsize, int flags)`: This method adds the specified component to the toolbar with the specified constraints at the specified index with the specified alignment, fill, group, priority, weightx, weighty, minwidth, maxwidth, minheight, maxheight, spanx, spany, minsize, maxsize, and flags.
26. `void add(JComponent c, String constraints, int index
================================================================

Sample: 53 MetalToolTipUI
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class A Metal L&F extension of BasicToolTipUI.

@@ Instruction
I want to use javax.swing.plaf.metal.MetalToolTipUI package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `void install(JComponent c)`: This method installs the tool tip UI on the specified component.
2. `void uninstall(JComponent c)`: This method uninstalls the tool tip UI from the specified component.
3. `void paint(Graphics g, JComponent c)`: This method paints the tool tip UI on the specified graphics context.
4. `void update(Graphics g, JComponent c)`: This method updates the tool tip UI on the specified graphics context.
5. `void setToolTipText(JComponent c, String text)`: This method sets the tool tip text for the specified component.
================================================================

Sample: 54 MetalTreeUI
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class The metal look and feel implementation of TreeUI.

@@ Instruction
I want to use javax.swing.plaf.metal.MetalTreeUI package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public void installColorsAndFont(JComponent c, JTree.TreeCellRenderer r)`: This method installs the colors and fonts for the specified component and renderer.

2. `public void uninstallColorsAndFont(JComponent c, JTree.TreeCellRenderer r)`: This method uninstalls the colors and fonts for the specified component and renderer.

3. `public void paint(Graphics g, JComponent c)`: This method paints the specified component.

4. `public Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the specified component.

5. `public void update(Graphics g, JComponent c)`: This method updates the specified component.
================================================================

Sample: 55 OceanTheme
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides user interface objects built according tothe Java look and feel (once codenamed Metal),which is the default look and feel.
Here is the description of the class The default theme for the MetalLookAndFeel.

@@ Instruction
I want to use javax.swing.plaf.metal.OceanTheme package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `OceanTheme()`: This is a constructor of the OceanTheme class.

2. `getBackgroundType()`: This method returns the background type of the theme.

3. `getControlContentArea()`: This method returns the content area for a control.

4. `getControlDarkShadow()`: This method returns the dark shadow for a control.

5. `getControlHighlight()`: This method returns the highlight color for a control.

6. `getControlLight()`: This method returns the light color for a control.

7. `getControlShadow()`: This method returns the shadow color for a control.

8. `getControlStrongHighlight()`: This method returns the strong highlight color for a control.

9. `getControlStrongShadow()`: This method returns the strong shadow color for a control.

10. `getControlText()`: This method returns the text color for a control.

11. `getControlThumb()`: This method returns the thumb color for a control.

12. `getControlThumbPressed()`: This method returns the pressed thumb color for a control.

13. `getControlThumbRollover()`: This method returns the rollover thumb color for a control.

14. `getControlThumbRolloverPressed()`: This method returns the pressed rollover thumb color for a control.

15. `getControlThumbRolloverSelected()`: This method returns the rollover selected thumb color for a control.

16. `getControlThumbSelected()`: This method returns the selected thumb color for a control.

17. `getControlThumbSelectedPressed()`: This method returns the pressed selected thumb color for a control.

18. `getControlThumbSelectedRollover()`: This method returns the rollover selected thumb color for a control.

19. `getControlThumbSelectedRolloverPressed()`: This method returns the pressed rollover selected thumb color for a control.

20. `getControlThumbSelectedRolloverSelected()`: This method returns the rollover selected selected thumb color for a control.

21. `getControlThumbSelectedSelected()`: This method returns the selected selected thumb color for a control.

22. `getControlThumbSelectedSelectedPressed()`: This method returns the pressed selected selected thumb color for a control.

23. `getControlThumbSelectedSelectedRollover()`: This method returns the rollover selected selected thumb color for a control.

24. `getControlThumbSelectedSelectedRolloverPressed()`: This method returns the pressed rollover selected selected thumb color for a control.

25. `getControlThumbSelectedSelectedRolloverSelected()`: This method returns the rollover selected selected selected thumb color for a control.

26. `getControlThumbSelectedSelectedSelected()`: This method returns the selected selected selected thumb color for a control.

27. `getControlThumbSelectedSelectedSelectedPressed()`: This method returns the pressed selected selected selected thumb color for a control.

28. `getControlThumbSelectedSelectedSelectedRollover()`: This method returns the rollover selected selected selected thumb color for a control.

29. `getControlThumbSelectedSelectedSelectedRolloverPressed()`: This method returns the pressed rollover selected selected selected thumb color for a control.

30. `getControlThumbSelectedSelectedSelectedRolloverSelected()`: This method returns the rollover selected selected selected selected thumb color for a control.

31. `getControlThumbSelectedSelectedSelectedSelected()`: This method returns the selected selected selected selected thumb color for a control.

32. `getControlThumbSelectedSelectedSelectedSelectedPressed()`: This method returns the pressed selected selected selected selected thumb color for a control.

33. `getControlThumbSelectedSelectedSelectedSelectedRollover()`: This method returns the rollover selected selected selected selected thumb color for a control.

34. `getControlThumbSelectedSelectedSelectedSelectedRolloverPressed()`: This method returns the pressed rollover selected selected selected selected thumb color for a control.

35. `getControlThumbSelectedSelectedSelectedSelectedRolloverSelected()`: This method returns the rollover selected selected selected selected selected thumb color for a control.

36. `getControlThumbSelectedSelectedSelectedSelectedSelected()`: This method returns the selected selected selected selected selected thumb color for a control.

37. `getControlThumbSelectedSelectedSelectedSelectedSelectedPressed()`: This method returns the pressed selected selected selected selected selected thumb color for a control.

38. `getControlThumbSelectedSelectedSelectedSelectedSelectedRollover()`: This method returns the rollover selected selected selected selected selected thumb color for a control.

39. `getControlThumbSelectedSelectedSelectedSelectedSelectedRolloverPressed()`: This method returns the pressed rollover selected selected selected selected selected thumb color for a control.

40. `getControlThumbSelectedSelectedSelectedSelectedSelectedRolloverSelected()`: This method returns the rollover selected selected selected selected selected selected thumb color for a control.

41. `getControlThumbSelectedSelectedSelectedSelectedSelectedSelected()`: This method returns the selected selected selected selected selected selected thumb color for a control.

42. `getControlThumbSelectedSelectedSelectedSelectedSelectedSelectedPressed()`: This method returns the pressed selected selected selected selected selected selected thumb color for a control.

43. `getControlThumbSelectedSelectedSelectedSelectedSelectedSelectedRollover()`: This method returns the rollover selected selected selected selected selected selected thumb color for a control.

44. `getControlThumbSelectedSelectedSelectedSelectedSelectedSelectedRolloverPressed()`: This method returns the pressed rollover selected selected selected selected selected selected thumb color for a control.

45. `getControlThumbSelectedSelectedSelectedSelectedSelectedSelectedRolloverSelected()`: This method returns the rollover selected selected selected selected selected selected selected thumb color for a control.

46. `getControlThumbSelectedSelectedSelectedSelectedSelectedSelectedSelected()`: This method returns the selected selected selected selected selected selected selected thumb color for a control.

47. `getControlThumbSelectedSelectedSelectedSelectedSelectedSelectedSelectedPressed()`: This method returns the pressed selected selected selected selected selected selected selected thumb color for a control.

48. `getControlThumbSelectedSelectedSelectedSelectedSelectedSelectedSelectedRollover()`: This method returns the rollover selected selected selected selected selected selected selected selected thumb color for a control.

49. `getControlThumbSelectedSelectedSelectedSelectedSelectedSelectedSelectedRolloverPressed()`: This method returns the pressed rollover selected selected selected selected selected selected selected selected thumb color for a control.

50. `getControlThumbSelectedSelectedSelectedSelectedSelectedSelectedSelectedRolloverSelected()`: This method returns the rollover selected selected selected selected selected selected selected selected selected thumb color for a control.

51. `getControlThumbSelectedSelectedSelectedSelectedSelectedSelectedSelectedSelected()`: This method returns the selected selected selected selected selected selected selected selected selected thumb color for a control.

52. `getControlThumbSelectedSelectedSelectedSelectedSelectedSelectedSelectedSelectedPressed()`: This method returns the pressed selected selected selected selected selected selected selected selected selected thumb color for a control.

53. `getControlThumbSelectedSelectedSelectedSelectedSelectedSelectedSelectedSelectedRollover()`: This method returns the rollover selected selected selected selected selected selected selected selected selected selected thumb color for a control.

54. `getControlThumbSelectedSelectedSelectedSelectedSelectedSelectedSelectedSelectedRolloverPressed()`: This method returns the pressed rollover selected selected selected selected selected selected selected selected selected selected thumb color for a control.

55. `getControlThumbSelectedSelectedSelectedSelectedSelectedSelectedSelectedSelectedRolloverSelected()`: This method returns the rollover selected selected selected selected selected
================================================================

