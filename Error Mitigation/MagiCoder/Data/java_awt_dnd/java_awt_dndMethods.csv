ClassName,Method,Return Type,Description
DragGestureEvent,getComponent(),Component,Returns the Component associated with this DragGestureEvent.
DragGestureEvent,getDragAction(),int,Returns an int representing the action selected by the user.
DragGestureEvent,getDragOrigin(),Point,Returns a Point in the coordinates of the Component over which the drag originated.
DragGestureEvent,getDragSource(),DragSource,Returns the DragSource.
DragGestureEvent,getSourceAsDragGestureRecognizer(),DragGestureRecognizer,Returns the source as a DragGestureRecognizer.
DragGestureEvent,getTriggerEvent(),InputEvent,Returns the initial event that triggered the gesture.
DragGestureEvent,iterator(),Iterator<InputEvent>,Returns an Iterator for the events comprising the gesture.
DragGestureEvent,"startDrag(Cursor dragCursor, Image dragImage, Point imageOffset, Transferable transferable, DragSourceListener dsl)",void,"Start the drag given the initial Cursor to display, a drag Image, the offset of the Image, the Transferable object, and the DragSourceListener to use."
DragGestureEvent,"startDrag(Cursor dragCursor, Transferable transferable)",void,Starts the drag operation given the Cursor for this drag operation and the Transferable representing the source data for this drag operation.
DragGestureEvent,"startDrag(Cursor dragCursor, Transferable transferable, DragSourceListener dsl)",void,"Starts the drag given the initial Cursor to display, the Transferable object, and the DragSourceListener to use."
DragGestureEvent,toArray(),Object[],Returns an Object array of the events comprising the drag gesture.
DragGestureEvent,toArray(Object[] array),Object[],Returns an array of the events comprising the drag gesture.
DragGestureRecognizer,addDragGestureListener(DragGestureListener dgl),void,Register a new DragGestureListener.
DragGestureRecognizer,appendEvent(InputEvent awtie),protected void,Listeners registered on the Component by this Recognizer shall record all Events that are recognized as part of the series of Events that go to comprise a Drag and Drop initiating gesture via this API.
DragGestureRecognizer,"fireDragGestureRecognized(int dragAction, Point p)",protected void,Notify the DragGestureListener that a Drag and Drop initiating gesture has occurred.
DragGestureRecognizer,getComponent(),Component,"This method returns the Component that is to be ""observed"" by the DragGestureRecognizer for drag initiating gestures."
DragGestureRecognizer,getDragSource(),DragSource,This method returns the DragSource this DragGestureRecognizer will use in order to process the Drag and Drop operation.
DragGestureRecognizer,getSourceActions(),int,This method returns an int representing the type of action(s) this Drag and Drop operation will support.
DragGestureRecognizer,getTriggerEvent(),InputEvent,This method returns the first event in the series of events that initiated the Drag and Drop operation.
DragGestureRecognizer,registerListeners(),protected abstract void,register this DragGestureRecognizer's Listeners with the Component subclasses must override this method
DragGestureRecognizer,removeDragGestureListener(DragGestureListener dgl),void,unregister the current DragGestureListener
DragGestureRecognizer,resetRecognizer(),void,"Reset the Recognizer, if its currently recognizing a gesture, ignore it."
DragGestureRecognizer,setComponent(Component c),void,set the Component that the DragGestureRecognizer is associated with registerListeners() and unregisterListeners() are called as a side effect as appropriate.
DragGestureRecognizer,setSourceActions(int actions),void,This method sets the permitted source drag action(s) for this Drag and Drop operation.
DragGestureRecognizer,unregisterListeners(),protected abstract void,unregister this DragGestureRecognizer's Listeners with the Component subclasses must override this method
DragSource,addDragSourceListener(DragSourceListener dsl),void,Adds the specified DragSourceListener to this DragSource to receive drag source events during drag operations intiated with this DragSource.
DragSource,addDragSourceMotionListener(DragSourceMotionListener dsml),void,Adds the specified DragSourceMotionListener to this DragSource to receive drag motion events during drag operations intiated with this DragSource.
DragSource,"createDefaultDragGestureRecognizer(Component c, int actions, DragGestureListener dgl)",DragGestureRecognizer,"Creates a new DragGestureRecognizer that implements the default abstract subclass of DragGestureRecognizer for this DragSource, and sets the specified Component and DragGestureListener on the newly created object."
DragSource,"createDragGestureRecognizer(Class<T> recognizerAbstractClass, Component c, int actions, DragGestureListener dgl)",<T extends DragGestureRecognizer>T,"Creates a new DragGestureRecognizer that implements the specified abstract subclass of DragGestureRecognizer, and sets the specified Component and DragGestureListener on the newly created object."
DragSource,"createDragSourceContext(java.awt.dnd.peer.DragSourceContextPeer dscp, DragGestureEvent dgl, Cursor dragCursor, Image dragImage, Point imageOffset, Transferable t, DragSourceListener dsl)",protected DragSourceContext,Creates the DragSourceContext to handle the current drag operation.
DragSource,getDefaultDragSource(),static DragSource,Gets the DragSource object associated with the underlying platform.
DragSource,getDragSourceListeners(),DragSourceListener[],Gets all the DragSourceListeners registered with this DragSource.
DragSource,getDragSourceMotionListeners(),DragSourceMotionListener[],Gets all of the DragSourceMotionListeners registered with this DragSource.
DragSource,getDragThreshold(),static int,Returns the drag gesture motion threshold.
DragSource,getFlavorMap(),FlavorMap,This method returns the FlavorMap for this DragSource.
DragSource,getListeners(Class<T> listenerType),<T extends EventListener>T[],Gets all the objects currently registered as FooListeners upon this DragSource.
DragSource,isDragImageSupported(),static boolean,Reports whether or not drag Image support is available on the underlying platform.
DragSource,removeDragSourceListener(DragSourceListener dsl),void,Removes the specified DragSourceListener from this DragSource.
DragSource,removeDragSourceMotionListener(DragSourceMotionListener dsml),void,Removes the specified DragSourceMotionListener from this DragSource.
DragSource,"startDrag(DragGestureEvent trigger, Cursor dragCursor, Image dragImage, Point dragOffset, Transferable transferable, DragSourceListener dsl)",void,"Start a drag, given the DragGestureEvent that initiated the drag, the initial Cursor to use, the Image to drag, the offset of the Image origin from the hotspot of the Cursor at the instant of the trigger, the subject data of the drag, and the DragSourceListener."
DragSource,"startDrag(DragGestureEvent trigger, Cursor dragCursor, Image dragImage, Point imageOffset, Transferable transferable, DragSourceListener dsl, FlavorMap flavorMap)",void,"Start a drag, given the DragGestureEvent that initiated the drag, the initial Cursor to use, the Image to drag, the offset of the Image origin from the hotspot of the Cursor at the instant of the trigger, the Transferable subject data of the drag, the DragSourceListener, and the FlavorMap."
DragSource,"startDrag(DragGestureEvent trigger, Cursor dragCursor, Transferable transferable, DragSourceListener dsl)",void,"Start a drag, given the DragGestureEvent that initiated the drag, the initial Cursor to use, the Transferable subject data of the drag, and the DragSourceListener."
DragSource,"startDrag(DragGestureEvent trigger, Cursor dragCursor, Transferable transferable, DragSourceListener dsl, FlavorMap flavorMap)",void,"Start a drag, given the DragGestureEvent that initiated the drag, the initial Cursor to use, the Transferable subject data of the drag, the DragSourceListener, and the FlavorMap."
DragSourceAdapter,dragDropEnd(DragSourceDropEvent dsde),void,This method is invoked to signify that the Drag and Drop operation is complete.
DragSourceAdapter,dragEnter(DragSourceDragEvent dsde),void,Called as the cursor's hotspot enters a platform-dependent drop site.
DragSourceAdapter,dragExit(DragSourceEvent dse),void,Called as the cursor's hotspot exits a platform-dependent drop site.
DragSourceAdapter,dragMouseMoved(DragSourceDragEvent dsde),void,Called whenever the mouse is moved during a drag operation.
DragSourceAdapter,dragOver(DragSourceDragEvent dsde),void,Called as the cursor's hotspot moves over a platform-dependent drop site.
DragSourceAdapter,dropActionChanged(DragSourceDragEvent dsde),void,Called when the user has modified the drop gesture.
DragSourceContext,addDragSourceListener(DragSourceListener dsl),void,Add a DragSourceListener to this DragSourceContext if one has not already been added.
DragSourceContext,dragDropEnd(DragSourceDropEvent dsde),void,"Calls dragDropEnd on the DragSourceListeners registered with this DragSourceContext and with the associated DragSource, and passes them the specified DragSourceDropEvent."
DragSourceContext,dragEnter(DragSourceDragEvent dsde),void,"Calls dragEnter on the DragSourceListeners registered with this DragSourceContext and with the associated DragSource, and passes them the specified DragSourceDragEvent."
DragSourceContext,dragExit(DragSourceEvent dse),void,"Calls dragExit on the DragSourceListeners registered with this DragSourceContext and with the associated DragSource, and passes them the specified DragSourceEvent."
DragSourceContext,dragMouseMoved(DragSourceDragEvent dsde),void,"Calls dragMouseMoved on the DragSourceMotionListeners registered with the DragSource associated with this DragSourceContext, and them passes the specified DragSourceDragEvent."
DragSourceContext,dragOver(DragSourceDragEvent dsde),void,"Calls dragOver on the DragSourceListeners registered with this DragSourceContext and with the associated DragSource, and passes them the specified DragSourceDragEvent."
DragSourceContext,dropActionChanged(DragSourceDragEvent dsde),void,"Calls dropActionChanged on the DragSourceListeners registered with this DragSourceContext and with the associated DragSource, and passes them the specified DragSourceDragEvent."
DragSourceContext,getComponent(),Component,Returns the Component associated with this DragSourceContext.
DragSourceContext,getCursor(),Cursor,Returns the current drag Cursor.
DragSourceContext,getDragSource(),DragSource,Returns the DragSource that instantiated this DragSourceContext.
DragSourceContext,getSourceActions(),int,Returns a bitwise mask of DnDConstants that represent the set of drop actions supported by the drag source for the drag operation associated with this DragSourceContext.
DragSourceContext,getTransferable(),Transferable,Returns the Transferable associated with this DragSourceContext.
DragSourceContext,getTrigger(),DragGestureEvent,Returns the DragGestureEvent that initially triggered the drag.
DragSourceContext,removeDragSourceListener(DragSourceListener dsl),void,Removes the specified DragSourceListener from this DragSourceContext.
DragSourceContext,setCursor(Cursor c),void,Sets the cursor for this drag operation to the specified Cursor.
DragSourceContext,transferablesFlavorsChanged(),void,Notifies the peer that the Transferable's DataFlavors have changed.
DragSourceContext,"updateCurrentCursor(int sourceAct, int targetAct, int status)",protected void,"If the default drag cursor behavior is active, this method sets the default drag cursor for the specified actions supported by the drag source, the drop target action, and status, otherwise this method does nothing."
DragSourceDragEvent,getDropAction(),int,This method returns the logical intersection of the target drop action and the set of drop actions supported by the drag source.
DragSourceDragEvent,getGestureModifiers(),int,This method returns an int representing the current state of the input device modifiers associated with the user's gesture.
DragSourceDragEvent,getGestureModifiersEx(),int,This method returns an int representing the current state of the input device extended modifiers associated with the user's gesture.
DragSourceDragEvent,getTargetActions(),int,This method returns the target drop action.
DragSourceDragEvent,getUserAction(),int,This method returns the user drop action.
DragSourceDropEvent,getDropAction(),int,This method returns an int representing the action performed by the target on the subject of the drop.
DragSourceDropEvent,getDropSuccess(),boolean,This method returns a boolean indicating if the drop was successful.
DragSourceEvent,getDragSourceContext(),DragSourceContext,This method returns the DragSourceContext that originated the event.
DragSourceEvent,getLocation(),Point,"This method returns a Point indicating the cursor location in screen coordinates at the moment this event occurred, or null if the cursor location is not specified for this event."
DragSourceEvent,getX(),int,"This method returns the horizontal coordinate of the cursor location in screen coordinates at the moment this event occurred, or zero if the cursor location is not specified for this event."
DragSourceEvent,getY(),int,"This method returns the vertical coordinate of the cursor location in screen coordinates at the moment this event occurred, or zero if the cursor location is not specified for this event."
DropTarget,addDropTargetListener(DropTargetListener dtl),void,Adds a new DropTargetListener (UNICAST SOURCE).
DropTarget,addNotify(java.awt.peer.ComponentPeer peer),void,Notify the DropTarget that it has been associated with a Component This method is usually called from java.awt.Component.addNotify() of the Component associated with this DropTarget to notify the DropTarget that a ComponentPeer has been associated with that Component.
DropTarget,clearAutoscroll(),protected void,clear autoscrolling
DropTarget,"createDropTargetAutoScroller(Component c, Point p)",protected DropTarget.DropTargetAutoScroller,create an embedded autoscroller
DropTarget,createDropTargetContext(),protected DropTargetContext,Creates the DropTargetContext associated with this DropTarget.
DropTarget,dragEnter(DropTargetDragEvent dtde),void,Calls dragEnter on the registered DropTargetListener and passes it the specified DropTargetDragEvent.
DropTarget,dragExit(DropTargetEvent dte),void,Calls dragExit on the registered DropTargetListener and passes it the specified DropTargetEvent.
DropTarget,dragOver(DropTargetDragEvent dtde),void,Calls dragOver on the registered DropTargetListener and passes it the specified DropTargetDragEvent.
DropTarget,drop(DropTargetDropEvent dtde),void,Calls drop on the registered DropTargetListener and passes it the specified DropTargetDropEvent if this DropTarget is active.
DropTarget,dropActionChanged(DropTargetDragEvent dtde),void,Calls dropActionChanged on the registered DropTargetListener and passes it the specified DropTargetDragEvent.
DropTarget,getComponent(),Component,Gets the Component associated with this DropTarget.
DropTarget,getDefaultActions(),int,Gets an int representing the current action(s) supported by this DropTarget.
DropTarget,getDropTargetContext(),DropTargetContext,Gets the DropTargetContext associated with this DropTarget.
DropTarget,getFlavorMap(),FlavorMap,Gets the FlavorMap associated with this DropTarget.
DropTarget,initializeAutoscrolling(Point p),protected void,initialize autoscrolling
DropTarget,isActive(),boolean,Reports whether or not this DropTarget is currently active (ready to accept drops).
DropTarget,removeDropTargetListener(DropTargetListener dtl),void,Removes the current DropTargetListener (UNICAST SOURCE).
DropTarget,removeNotify(java.awt.peer.ComponentPeer peer),void,Notify the DropTarget that it has been disassociated from a Component This method is usually called from java.awt.Component.removeNotify() of the Component associated with this DropTarget to notify the DropTarget that a ComponentPeer has been disassociated with that Component.
DropTarget,setActive(boolean isActive),void,"Sets the DropTarget active if true, inactive if false."
DropTarget,setComponent(Component c),void,"Note: this interface is required to permit the safe association of a DropTarget with a Component in one of two ways, either: component.setDropTarget(droptarget); or droptarget.setComponent(component);"
DropTarget,setDefaultActions(int ops),void,Sets the default acceptable actions for this DropTarget
DropTarget,setFlavorMap(FlavorMap fm),void,Sets the FlavorMap associated with this DropTarget.
DropTarget,updateAutoscroll(Point dragCursorLocn),protected void,update autoscrolling with current cursor location
DropTarget.DropTargetAutoScroller,actionPerformed(ActionEvent e),void,cause autoscroll to occur
DropTarget.DropTargetAutoScroller,stop(),protected void,cause autoscrolling to stop
DropTarget.DropTargetAutoScroller,updateLocation(Point newLocn),protected void,cause autoscroll to occur
DropTargetAdapter,dragEnter(DropTargetDragEvent dtde),void,"Called while a drag operation is ongoing, when the mouse pointer enters the operable part of the drop site for the DropTarget registered with this listener."
DropTargetAdapter,dragExit(DropTargetEvent dte),void,"Called while a drag operation is ongoing, when the mouse pointer has exited the operable part of the drop site for the DropTarget registered with this listener."
DropTargetAdapter,dragOver(DropTargetDragEvent dtde),void,"Called when a drag operation is ongoing, while the mouse pointer is still over the operable part of the drop site for the DropTarget registered with this listener."
DropTargetAdapter,dropActionChanged(DropTargetDragEvent dtde),void,Called if the user has modified the current drop gesture.
DropTargetContext,acceptDrag(int dragOperation),protected void,accept the Drag.
DropTargetContext,acceptDrop(int dropOperation),protected void,called to signal that the drop is acceptable using the specified operation.
DropTargetContext,addNotify(java.awt.dnd.peer.DropTargetContextPeer dtcp),void,Called when associated with the DropTargetContextPeer.
DropTargetContext,"createTransferableProxy(Transferable t, boolean local)",protected Transferable,Creates a TransferableProxy to proxy for the specified Transferable.
DropTargetContext,dropComplete(boolean success),void,This method signals that the drop is completed and if it was successful or not.
DropTargetContext,getComponent(),Component,This method returns the Component associated with this DropTargetContext.
DropTargetContext,getCurrentDataFlavors(),protected DataFlavor[],get the available DataFlavors of the Transferable operand of this operation.
DropTargetContext,getCurrentDataFlavorsAsList(),protected List<DataFlavor>,This method returns a the currently available DataFlavors of the Transferable operand as a java.util.List.
DropTargetContext,getDropTarget(),DropTarget,This method returns the DropTarget associated with this DropTargetContext.
DropTargetContext,getTargetActions(),protected int,This method returns an int representing the current actions this DropTarget will accept.
DropTargetContext,getTransferable(),protected Transferable,get the Transferable (proxy) operand of this operation
DropTargetContext,isDataFlavorSupported(DataFlavor df),protected boolean,This method returns a boolean indicating if the given DataFlavor is supported by this DropTargetContext.
DropTargetContext,rejectDrag(),protected void,reject the Drag.
DropTargetContext,rejectDrop(),protected void,called to signal that the drop is unacceptable.
DropTargetContext,removeNotify(),void,Called when disassociated with the DropTargetContextPeer.
DropTargetContext,setTargetActions(int actions),protected void,This method sets the current actions acceptable to this DropTarget.
DropTargetDragEvent,acceptDrag(int dragOperation),void,Accepts the drag.
DropTargetDragEvent,getCurrentDataFlavors(),DataFlavor[],This method returns the current DataFlavors from the DropTargetContext.
DropTargetDragEvent,getCurrentDataFlavorsAsList(),List<DataFlavor>,This method returns the current DataFlavors as a java.util.List
DropTargetDragEvent,getDropAction(),int,This method returns the user drop action.
DropTargetDragEvent,getLocation(),Point,This method returns a Point indicating the Cursor's current location within the Component's coordinates.
DropTargetDragEvent,getSourceActions(),int,This method returns the source drop actions.
DropTargetDragEvent,getTransferable(),Transferable,This method returns the Transferable object that represents the data associated with the current drag operation.
DropTargetDragEvent,isDataFlavorSupported(DataFlavor df),boolean,This method returns a boolean indicating if the specified DataFlavor is supported.
DropTargetDragEvent,rejectDrag(),void,Rejects the drag as a result of examining either the dropAction or the available DataFlavor types.
DropTargetDropEvent,acceptDrop(int dropAction),void,"accept the drop, using the specified action."
DropTargetDropEvent,dropComplete(boolean success),void,This method notifies the DragSource that the drop transfer(s) are completed.
DropTargetDropEvent,getCurrentDataFlavors(),DataFlavor[],This method returns the current DataFlavors.
DropTargetDropEvent,getCurrentDataFlavorsAsList(),List<DataFlavor>,This method returns the currently available DataFlavors as a java.util.List.
DropTargetDropEvent,getDropAction(),int,This method returns the user drop action.
DropTargetDropEvent,getLocation(),Point,This method returns a Point indicating the Cursor's current location in the Component's coordinates.
DropTargetDropEvent,getSourceActions(),int,This method returns the source drop actions.
DropTargetDropEvent,getTransferable(),Transferable,This method returns the Transferable object associated with the drop.
DropTargetDropEvent,isDataFlavorSupported(DataFlavor df),boolean,This method returns a boolean indicating if the specified DataFlavor is available from the source.
DropTargetDropEvent,isLocalTransfer(),boolean,This method returns an int indicating if the source is in the same JVM as the target.
DropTargetDropEvent,rejectDrop(),void,reject the Drop.
DropTargetEvent,getDropTargetContext(),DropTargetContext,This method returns the DropTargetContext associated with this DropTargetEvent.
MouseDragGestureRecognizer,mouseClicked(MouseEvent e),void,Invoked when the mouse has been clicked on a component.
MouseDragGestureRecognizer,mouseDragged(MouseEvent e),void,Invoked when a mouse button is pressed on a component.
MouseDragGestureRecognizer,mouseEntered(MouseEvent e),void,Invoked when the mouse enters a component.
MouseDragGestureRecognizer,mouseExited(MouseEvent e),void,Invoked when the mouse exits a component.
MouseDragGestureRecognizer,mouseMoved(MouseEvent e),void,Invoked when the mouse button has been moved on a component (with no buttons no down).
MouseDragGestureRecognizer,mousePressed(MouseEvent e),void,Invoked when a mouse button has been pressed on a Component.
MouseDragGestureRecognizer,mouseReleased(MouseEvent e),void,Invoked when a mouse button has been released on a component.
MouseDragGestureRecognizer,registerListeners(),protected void,register this DragGestureRecognizer's Listeners with the Component
MouseDragGestureRecognizer,unregisterListeners(),protected void,unregister this DragGestureRecognizer's Listeners with the Component subclasses must override this method
