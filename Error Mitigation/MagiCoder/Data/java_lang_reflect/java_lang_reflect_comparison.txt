Sample: 0 AccessibleObject
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for obtaining reflective information about classes and objects.
Here is the description of the class The AccessibleObject class is the base class for Field, Method and Constructor objects.

@@ Instruction
I want to use java.lang.reflect.AccessibleObject package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean isAccessible()`: This method returns true if this object is accessible; otherwise, it returns false.

2. `void setAccessible(boolean flag)`: This method sets the accessible flag for this object.

3. `void setAccessible(AccessibleObject[] accessibleObjects, boolean flag)`: This method sets the accessible flag for the specified array of objects.

4. `void setAccessible(AccessibleObject[] accessibleObjects, boolean flag, boolean flag1)`: This method sets the accessible flag for the specified array of objects.

5. `void setAccessible(AccessibleObject[] accessibleObjects, boolean flag, boolean flag1, boolean flag2)`: This method sets the accessible flag for the specified array of objects.
================================================================

Sample: 1 Array
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for obtaining reflective information about classes and objects.
Here is the description of the class The Array class provides static methods to dynamically create and access Java arrays.

@@ Instruction
I want to use java.lang.reflect.Array package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public static Object newInstance(Class<?> componentType, int length)`: This method creates a new array of the specified component type and length.

2. `public static int getLength(Object array)`: This method returns the length of the specified array.

3. `public static Object get(Object array, int index)`: This method returns the element at the specified position in the specified array.

4. `public static void set(Object array, int index, Object element)`: This method sets the element at the specified position in the specified array to the specified value.

5. `public static void set(Object array, int index, Object element)`: This method sets the element at the specified position in the specified array to the specified value.
================================================================

Sample: 2 Constructor
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for obtaining reflective information about classes and objects.
Here is the description of the class Constructor provides information about, and access to, a single constructor for a class.

@@ Instruction
I want to use java.lang.reflect.Constructor package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `Constructor<T> getDeclaredConstructor(Class<?>... parameterTypes)`: This method returns a Constructor object that reflects the specified constructor of the class represented by this Class object.

2. `T newInstance(Object... initargs)`: This method creates a new instance of the Constructor object represented by this Constructor object.

3. `void setAccessible(boolean flag)`: This method sets the accessible flag for this Constructor.

4. `Class<?> getDeclaringClass()`: This method returns the Class object that represents the class or interface that declares the constructor represented by this Constructor object.

5. `Parameter[] getParameters()`: This method returns an array of Parameter objects that reflects all the formal parameters of the constructor represented by this Constructor object.
================================================================

Sample: 3 Executable
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for obtaining reflective information about classes and objects.
Here is the description of the class A shared superclass for the common functionality of Method and Constructor.

@@ Instruction
I want to use java.lang.reflect.Executable package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean isVarArgs()`: This method returns true if this executable is a method with variable arguments.

2. `Class<?> getDeclaringClass()`: This method returns the class or interface that declares the executable.

3. `String getName()`: This method returns the simple name of the executable.

4. `int getModifiers()`: This method returns the modifiers of the executable.

5. `Class<?>[] getParameterTypes()`: This method returns an array of Class objects that represent the types of the parameters.

6. `TypeVariable<D>[] getTypeParameters()`: This method returns an array of TypeVariable objects that represent the type parameters of the executable.

7. `Class<?> getReturnType()`: This method returns the Class object that represents the return type of the executable.

8. `AnnotatedType getAnnotatedReturnType()`: This method returns the annotated return type of the executable.

9. `Type getGenericReturnType()`: This method returns the generic return type of the executable.

10. `Type[] getGenericExceptionTypes()`: This method returns an array of Type objects that represent the generic exception types of the executable.

11. `Type[] getThrownTypes()`: This method returns an array of Type objects that represent the thrown types of the executable.

12. `Annotation[] getDeclaredAnnotations()`: This method returns an array of Annotation objects that represent the annotations declared on the executable.

13. `Annotation[] getAnnotations()`: This method returns an array of Annotation objects that represent the annotations of the executable.

14. `Annotation[] getDeclaredAnnotationsByType(Class<? extends Annotation> annotationClass)`: This method returns an array of Annotation objects that represent the annotations of the specified type declared on the executable.

15. `Annotation[] getAnnotationsByType(Class<? extends Annotation> annotationClass)`: This method returns an array of Annotation objects that represent the annotations of the specified type on the executable.
================================================================

Sample: 4 Field
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for obtaining reflective information about classes and objects.
Here is the description of the class A Field provides information about, and dynamic access to, a single field of a class or an interface.

@@ Instruction
I want to use java.lang.reflect.Field package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `get(Object obj)`: This method returns the value of the field in the specified object.

2. `set(Object obj, Object value)`: This method sets the specified value to the field in the specified object.

3. `getType()`: This method returns the Class object that represents the declared type of the field.

4. `getModifiers()`: This method returns the modifiers of the field.

5. `getDeclaringClass()`: This method returns the Class object that declares the field.
================================================================

Sample: 5 Method
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for obtaining reflective information about classes and objects.
Here is the description of the class A Method provides information about, and access to, a single method on a class or interface.

@@ Instruction
I want to use java.lang.reflect.Method package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public Object invoke(Object obj, Object... args)`: This method invokes the underlying method represented by this Method object.

2. `public Class<?> getReturnType()`: This method returns the return type of the method represented by this Method object.

3. `public Class<?> getDeclaringClass()`: This method returns the class or interface that declares the underlying method, which may be a member of the class represented by this Method object.

4. `public String getName()`: This method returns the simple name of the underlying method.

5. `public Class<?>[] getParameterTypes()`: This method returns an array of Class objects that represent the types of the parameters of the underlying method.
================================================================

Sample: 6 Modifier
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for obtaining reflective information about classes and objects.
Here is the description of the class The Modifier class provides static methods and constants to decode class and member access modifiers.

@@ Instruction
I want to use java.lang.reflect.Modifier package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public static int toString(int mod)`: This method returns a string describing the specified modifier.

2. `public static boolean isPublic(int mod)`: This method returns true if the specified modifier includes the public modifier.

3. `public static boolean isProtected(int mod)`: This method returns true if the specified modifier includes the protected modifier.

4. `public static boolean isPrivate(int mod)`: This method returns true if the specified modifier includes the private modifier.

5. `public static boolean isAbstract(int mod)`: This method returns true if the specified modifier includes the abstract modifier.

6. `public static boolean isStatic(int mod)`: This method returns true if the specified modifier includes the static modifier.

7. `public static boolean isFinal(int mod)`: This method returns true if the specified modifier includes the final modifier.

8. `public static boolean isSynchronized(int mod)`: This method returns true if the specified modifier includes the synchronized modifier.

9. `public static boolean isVolatile(int mod)`: This method returns true if the specified modifier includes the volatile modifier.

10. `public static boolean isTransient(int mod)`: This method returns true if the specified modifier includes the transient modifier.

11. `public static boolean isNative(int mod)`: This method returns true if the specified modifier includes the native modifier.

12. `public static boolean isInterface(int mod)`: This method returns true if the specified modifier includes the interface modifier.

13. `public static boolean isStrict(int mod)`: This method returns true if the specified modifier includes the strictfp modifier.

14. `public static boolean isBridge(int mod)`: This method returns true if the specified modifier includes the bridge modifier.

15. `public static boolean isSynthetic(int mod)`: This method returns true if the specified modifier includes the synthetic modifier.

16. `public static boolean isAnnotation(int mod)`: This method returns true if the specified modifier includes the annotation modifier.

17. `public static boolean isEnum(int mod)`: This method returns true if the specified modifier includes the enum modifier.
================================================================

Sample: 7 Parameter
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for obtaining reflective information about classes and objects.
Here is the description of the class Information about method parameters.

@@ Instruction
I want to use java.lang.reflect.Parameter package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean isAnnotationPresent(Class<? extends Annotation> annotationClass)`: This method returns true if the parameterized type is present on the method parameter.

2. `Annotation[] getAnnotations()`: This method returns an array of all annotations present on the method parameter.

3. `Annotation getAnnotation(Class<? extends Annotation> annotationClass)`: This method returns the annotation for the specified type if it is present on the method parameter.

4. `String getName()`: This method returns the name of the method parameter.

5. `int getModifiers()`: This method returns the modifiers of the method parameter.

6. `Class<?> getType()`: This method returns the type of the method parameter.

7. `boolean isSynthetic()`: This method returns true if the method parameter is synthetic.

8. `boolean isVarArgs()`: This method returns true if the method parameter is a variable argument.

9. `Type getGenericType()`: This method returns the generic type of the method parameter.

10. `AnnotatedType getAnnotatedType()`: This method returns the annotated type of the method parameter.

11. `<T extends Annotation> T getAnnotation(Class<T> annotationClass)`: This method returns the annotation of the specified type if it is present on the method parameter.

12. `Annotation[] getDeclaredAnnotations()`: This method returns an array of all annotations present on the method parameter.

13. `<T extends Annotation> T[] getDeclaredAnnotationsByType(Class<T> annotationClass)`: This method returns an array of all annotations of the specified type present on the method parameter.

14. `boolean isAnnotationPresent(Class<? extends Annotation> annotationClass)`: This method returns true if the parameterized type is present on the method parameter.

15. `boolean isSynthetic()`: This method returns true if the method parameter is synthetic.

16. `boolean isVarArgs()`: This method returns true if the method parameter is a variable argument.

17. `Type getGenericType()`: This method returns the generic type of the method parameter.

18. `AnnotatedType getAnnotatedType()`: This method returns the annotated type of the method parameter.

19. `<T extends Annotation> T getAnnotation(Class<T> annotationClass)`: This method returns the annotation of the specified type if it is present on the method parameter.

20. `Annotation[] getDeclaredAnnotations()`: This method returns an array of all annotations present on the method parameter.

21. `<T extends Annotation> T[] getDeclaredAnnotationsByType(Class<T> annotationClass)`: This method returns an array of all annotations of the specified type present on the method parameter.
================================================================

Sample: 8 Proxy
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for obtaining reflective information about classes and objects.
Here is the description of the class Proxy provides static methods for creating dynamic proxy classes and instances, and it is also the superclass of all dynamic proxy classes created by those methods.

@@ Instruction
I want to use java.lang.reflect.Proxy package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h)`: This method creates a new proxy instance.

2. `public static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h, int proxyType)`: This method creates a new proxy instance.

3. `public static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h, Class<?>[] proxiedInterfaces)`: This method creates a new proxy instance.

4. `public static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h, Class<?>[] proxiedInterfaces, Object[] proxiedInstances)`: This method creates a new proxy instance.

5. `public static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h, Class<?>[] proxiedInterfaces, Object[] proxiedInstances, int proxyType)`: This method creates a new proxy instance.
================================================================

Sample: 9 ReflectPermission
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for obtaining reflective information about classes and objects.
Here is the description of the class The Permission class for reflective operations.

@@ Instruction
I want to use java.lang.reflect.ReflectPermission package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public boolean implies(Permission p)`: Tests if this permission implies the specified permission.
2. `public boolean equals(Object obj)`: Compares this object against the specified object.
3. `public int hashCode()`: Returns a hash code for this object.
4. `public String getActions()`: Returns the actions string of this Permission object.
5. `public String getName()`: Returns the name of this Permission object.
================================================================

