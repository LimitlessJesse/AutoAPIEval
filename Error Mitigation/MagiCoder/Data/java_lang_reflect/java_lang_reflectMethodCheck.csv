Sample Number,ClassName,Snippet Number,Method,Exist,Description
0,AccessibleObject,1,boolean isAccessible(),True,Get the value of the accessible flag for this object.
0,AccessibleObject,2,void setAccessible(boolean flag),True,Set the accessible flag for this object to the indicated boolean value.
0,AccessibleObject,3,"void setAccessible(AccessibleObject[] accessibleObjects, boolean flag)",True,Convenience method to set the accessible flag for an array of objects with a single security check (for efficiency).
0,AccessibleObject,4,"void setAccessible(AccessibleObject[] accessibleObjects, boolean flag, boolean flag1)",False,NULL
0,AccessibleObject,5,"void setAccessible(AccessibleObject[] accessibleObjects, boolean flag, boolean flag1, boolean flag2)",False,NULL
1,Array,1,"Object newInstance(Class<?> componentType, int length)",True,Creates a new array with the specified component type and length.
1,Array,2,int getLength(Object array),True,"Returns the length of the specified array object, as an int."
1,Array,3,"Object get(Object array, int index)",True,Returns the value of the indexed component in the specified array object.
1,Array,4,"void set(Object array, int index, Object element)",True,Sets the value of the indexed component of the specified array object to the specified new value.
1,Array,5,"void set(Object array, int index, Object element)",True,Sets the value of the indexed component of the specified array object to the specified new value.
2,Constructor,1,Constructor<T> getDeclaredConstructor(Class<?>... parameterTypes),False,NULL
2,Constructor,2,T newInstance(Object... initargs),True,"Uses the constructor represented by this Constructor object to create and initialize a new instance of the constructor's declaring class, with the specified initialization parameters."
2,Constructor,3,void setAccessible(boolean flag),False,NULL
2,Constructor,4,Class<?> getDeclaringClass(),False,NULL
2,Constructor,5,Parameter[] getParameters(),False,NULL
3,Executable,1,boolean isVarArgs(),True,Returns true if this executable was declared to take a variable number of arguments; returns false otherwise.
3,Executable,2,Class<?> getDeclaringClass(),True,Returns the Class object representing the class or interface that declares the executable represented by this object.
3,Executable,3,String getName(),True,Returns the name of the executable represented by this object.
3,Executable,4,int getModifiers(),True,Returns the Java language modifiers for the executable represented by this object.
3,Executable,5,Class<?>[] getParameterTypes(),True,"Returns an array of Class objects that represent the formal parameter types, in declaration order, of the executable represented by this object."
3,Executable,6,TypeVariable<D>[] getTypeParameters(),False,NULL
3,Executable,7,Class<?> getReturnType(),False,NULL
3,Executable,8,AnnotatedType getAnnotatedReturnType(),True,Returns an AnnotatedType object that represents the use of a type to specify the return type of the method/constructor represented by this Executable.
3,Executable,9,Type getGenericReturnType(),False,NULL
3,Executable,10,Type[] getGenericExceptionTypes(),True,Returns an array of Type objects that represent the exceptions declared to be thrown by this executable object.
3,Executable,11,Type[] getThrownTypes(),False,NULL
3,Executable,12,Annotation[] getDeclaredAnnotations(),True,Returns annotations that are directly present on this element.
3,Executable,13,Annotation[] getAnnotations(),False,NULL
3,Executable,14,Annotation[] getDeclaredAnnotationsByType(Class<? extends Annotation> annotationClass),False,NULL
3,Executable,15,Annotation[] getAnnotationsByType(Class<? extends Annotation> annotationClass),False,NULL
4,Field,1,get(Object obj),False,NULL
4,Field,2,"set(Object obj, Object value)",False,NULL
4,Field,3,getType(),False,NULL
4,Field,4,getModifiers(),False,NULL
4,Field,5,getDeclaringClass(),False,NULL
5,Method,1,"Object invoke(Object obj, Object... args)",True,"Invokes the underlying method represented by this Method object, on the specified object with the specified parameters."
5,Method,2,Class<?> getReturnType(),True,Returns a Class object that represents the formal return type of the method represented by this Method object.
5,Method,3,Class<?> getDeclaringClass(),True,Returns the Class object representing the class or interface that declares the executable represented by this object.
5,Method,4,String getName(),True,"Returns the name of the method represented by this Method object, as a String."
5,Method,5,Class<?>[] getParameterTypes(),True,"Returns an array of Class objects that represent the formal parameter types, in declaration order, of the executable represented by this object."
6,Modifier,1,int toString(int mod),False,NULL
6,Modifier,2,boolean isPublic(int mod),True,"Return true if the integer argument includes the public modifier, false otherwise."
6,Modifier,3,boolean isProtected(int mod),True,"Return true if the integer argument includes the protected modifier, false otherwise."
6,Modifier,4,boolean isPrivate(int mod),True,"Return true if the integer argument includes the private modifier, false otherwise."
6,Modifier,5,boolean isAbstract(int mod),True,"Return true if the integer argument includes the abstract modifier, false otherwise."
6,Modifier,6,boolean isStatic(int mod),True,"Return true if the integer argument includes the static modifier, false otherwise."
6,Modifier,7,boolean isFinal(int mod),True,"Return true if the integer argument includes the final modifier, false otherwise."
6,Modifier,8,boolean isSynchronized(int mod),True,"Return true if the integer argument includes the synchronized modifier, false otherwise."
6,Modifier,9,boolean isVolatile(int mod),True,"Return true if the integer argument includes the volatile modifier, false otherwise."
6,Modifier,10,boolean isTransient(int mod),True,"Return true if the integer argument includes the transient modifier, false otherwise."
6,Modifier,11,boolean isNative(int mod),True,"Return true if the integer argument includes the native modifier, false otherwise."
6,Modifier,12,boolean isInterface(int mod),True,"Return true if the integer argument includes the interface modifier, false otherwise."
6,Modifier,13,boolean isStrict(int mod),True,"Return true if the integer argument includes the strictfp modifier, false otherwise."
6,Modifier,14,boolean isBridge(int mod),False,NULL
6,Modifier,15,boolean isSynthetic(int mod),False,NULL
6,Modifier,16,boolean isAnnotation(int mod),False,NULL
6,Modifier,17,boolean isEnum(int mod),False,NULL
7,Parameter,1,boolean isAnnotationPresent(Class<? extends Annotation> annotationClass),False,NULL
7,Parameter,2,Annotation[] getAnnotations(),True,Returns annotations that are present on this element.
7,Parameter,3,Annotation getAnnotation(Class<? extends Annotation> annotationClass),False,NULL
7,Parameter,4,String getName(),True,Returns the name of the parameter.
7,Parameter,5,int getModifiers(),True,Get the modifier flags for this the parameter represented by this Parameter object.
7,Parameter,6,Class<?> getType(),True,Returns a Class object that identifies the declared type for the parameter represented by this Parameter object.
7,Parameter,7,boolean isSynthetic(),True,Returns true if this parameter is neither implicitly nor explicitly declared in source code; returns false otherwise.
7,Parameter,8,boolean isVarArgs(),True,Returns true if this parameter represents a variable argument list; returns false otherwise.
7,Parameter,9,Type getGenericType(),False,NULL
7,Parameter,10,AnnotatedType getAnnotatedType(),True,Returns an AnnotatedType object that represents the use of a type to specify the type of the formal parameter represented by this Parameter.
7,Parameter,11,<T extends Annotation> T getAnnotation(Class<T> annotationClass),False,NULL
7,Parameter,12,Annotation[] getDeclaredAnnotations(),True,Returns annotations that are directly present on this element.
7,Parameter,13,<T extends Annotation> T[] getDeclaredAnnotationsByType(Class<T> annotationClass),False,NULL
7,Parameter,14,boolean isAnnotationPresent(Class<? extends Annotation> annotationClass),False,NULL
7,Parameter,15,boolean isSynthetic(),True,Returns true if this parameter is neither implicitly nor explicitly declared in source code; returns false otherwise.
7,Parameter,16,boolean isVarArgs(),True,Returns true if this parameter represents a variable argument list; returns false otherwise.
7,Parameter,17,Type getGenericType(),False,NULL
7,Parameter,18,AnnotatedType getAnnotatedType(),True,Returns an AnnotatedType object that represents the use of a type to specify the type of the formal parameter represented by this Parameter.
7,Parameter,19,<T extends Annotation> T getAnnotation(Class<T> annotationClass),False,NULL
7,Parameter,20,Annotation[] getDeclaredAnnotations(),True,Returns annotations that are directly present on this element.
7,Parameter,21,<T extends Annotation> T[] getDeclaredAnnotationsByType(Class<T> annotationClass),False,NULL
8,Proxy,1,"Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h)",True,Returns an instance of a proxy class for the specified interfaces that dispatches method invocations to the specified invocation handler.
8,Proxy,2,"Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h, int proxyType)",False,NULL
8,Proxy,3,"Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h, Class<?>[] proxiedInterfaces)",False,NULL
8,Proxy,4,"Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h, Class<?>[] proxiedInterfaces, Object[] proxiedInstances)",False,NULL
8,Proxy,5,"Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h, Class<?>[] proxiedInterfaces, Object[] proxiedInstances, int proxyType)",False,NULL
9,ReflectPermission,1,boolean implies(Permission p),False,NULL
9,ReflectPermission,2,boolean equals(Object obj),False,NULL
9,ReflectPermission,3,int hashCode(),False,NULL
9,ReflectPermission,4,String getActions(),False,NULL
9,ReflectPermission,5,String getName(),False,NULL
