ClassName,Method,Return Type,Description
MBeanServerNotificationFilter,disableAllObjectNames(),void,Disables any MBeanServerNotification (all ObjectNames are deselected).
MBeanServerNotificationFilter,disableObjectName(ObjectName objectName),void,Disables MBeanServerNotifications concerning given ObjectName.
MBeanServerNotificationFilter,enableAllObjectNames(),void,Enables all MBeanServerNotifications (all ObjectNames are selected).
MBeanServerNotificationFilter,enableObjectName(ObjectName objectName),void,Enables MBeanServerNotifications concerning given ObjectName.
MBeanServerNotificationFilter,getDisabledObjectNames(),Vector<ObjectName>,Gets all the ObjectNames disabled.
MBeanServerNotificationFilter,getEnabledObjectNames(),Vector<ObjectName>,Gets all the ObjectNames enabled.
MBeanServerNotificationFilter,isNotificationEnabled(Notification notif),boolean,Invoked before sending the specified notification to the listener.
RelationNotification,getMBeansToUnregister(),List<ObjectName>,Returns the list of ObjectNames of MBeans expected to be unregistered due to a relation removal (only for relation removal).
RelationNotification,getNewRoleValue(),List<ObjectName>,Returns new value of updated role (only for role update).
RelationNotification,getObjectName(),ObjectName,Returns the ObjectName of the created/removed/updated relation.
RelationNotification,getOldRoleValue(),List<ObjectName>,Returns old value of updated role (only for role update).
RelationNotification,getRelationId(),String,Returns the relation identifier of created/removed/updated relation.
RelationNotification,getRelationTypeName(),String,Returns the relation type name of created/removed/updated relation.
RelationNotification,getRoleName(),String,Returns name of updated role of updated relation (only for role update).
RelationService,addRelation(ObjectName relationObjectName),void,Adds an MBean created by the user (and registered by him in the MBean Server) as a relation in the Relation Service.
RelationService,addRelationType(RelationType relationTypeObj),void,Adds given object as a relation type.
RelationService,"checkRoleReading(String roleName, String relationTypeName)",Integer,Checks if given Role can be read in a relation of the given type.
RelationService,"checkRoleWriting(Role role, String relationTypeName, Boolean initFlag)",Integer,Checks if given Role can be set in a relation of given type.
RelationService,"createRelation(String relationId, String relationTypeName, RoleList roleList)",void,"Creates a simple relation (represented by a RelationSupport object) of given relation type, and adds it in the Relation Service."
RelationService,"createRelationType(String relationTypeName, RoleInfo[] roleInfoArray)",void,"Creates a relation type (a RelationTypeSupport object) with given role infos (provided by the RoleInfo objects), and adds it in the Relation Service."
RelationService,"findAssociatedMBeans(ObjectName mbeanName, String relationTypeName, String roleName)","Map<ObjectName,List<String>>",Retrieves the MBeans associated to given one in a relation.
RelationService,"findReferencingRelations(ObjectName mbeanName, String relationTypeName, String roleName)","Map<String,List<String>>",Retrieves the relations where a given MBean is referenced.
RelationService,findRelationsOfType(String relationTypeName),List<String>,Returns the relation ids for relations of the given type.
RelationService,getAllRelationIds(),List<String>,Returns all the relation ids for all the relations handled by the Relation Service.
RelationService,getAllRelationTypeNames(),List<String>,Retrieves names of all known relation types.
RelationService,getAllRoles(String relationId),RoleResult,Returns all roles present in the relation.
RelationService,getNotificationInfo(),MBeanNotificationInfo[],Returns a NotificationInfo object containing the name of the Java class of the notification and the notification types sent.
RelationService,getPurgeFlag(),boolean,"Returns the flag to indicate if when a notification is received for the unregistration of an MBean referenced in a relation, if an immediate ""purge"" of the relations (look for the relations no longer valid) has to be performed , or if that will be performed only when the purgeRelations method will be explicitly called."
RelationService,getReferencedMBeans(String relationId),"Map<ObjectName,List<String>>",Retrieves MBeans referenced in the various roles of the relation.
RelationService,getRelationTypeName(String relationId),String,Returns name of associated relation type for given relation.
RelationService,"getRole(String relationId, String roleName)",List<ObjectName>,Retrieves role value for given role name in given relation.
RelationService,"getRoleCardinality(String relationId, String roleName)",Integer,Retrieves the number of MBeans currently referenced in the given role.
RelationService,"getRoleInfo(String relationTypeName, String roleInfoName)",RoleInfo,Retrieves role info for given role name of a given relation type.
RelationService,getRoleInfos(String relationTypeName),List<RoleInfo>,Retrieves list of role infos (RoleInfo objects) of a given relation type.
RelationService,"getRoles(String relationId, String[] roleNameArray)",RoleResult,Retrieves values of roles with given names in given relation.
RelationService,"handleNotification(Notification notif, Object handback)",void,Invoked when a JMX notification occurs.
RelationService,hasRelation(String relationId),Boolean,Checks if there is a relation identified in Relation Service with given relation id.
RelationService,isActive(),void,Checks if the Relation Service is active.
RelationService,isRelation(ObjectName objectName),String,Returns the relation id associated to the given ObjectName if the MBean has been added as a relation in the Relation Service.
RelationService,isRelationMBean(String relationId),ObjectName,"If the relation is represented by an MBean (created by the user and added as a relation in the Relation Service), returns the ObjectName of the MBean."
RelationService,postDeregister(),void,Allows the MBean to perform any operations needed after having been unregistered in the MBean server.
RelationService,postRegister(Boolean registrationDone),void,Allows the MBean to perform any operations needed after having been registered in the MBean server or after the registration has failed.
RelationService,preDeregister(),void,Allows the MBean to perform any operations it needs before being unregistered by the MBean server.
RelationService,"preRegister(MBeanServer server, ObjectName name)",ObjectName,Allows the MBean to perform any operations it needs before being registered in the MBean Server.
RelationService,purgeRelations(),void,Purges the relations.
RelationService,removeRelation(String relationId),void,Removes given relation from the Relation Service.
RelationService,removeRelationType(String relationTypeName),void,Removes given relation type from Relation Service.
RelationService,sendRelationCreationNotification(String relationId),void,Sends a notification (RelationNotification) for a relation creation.
RelationService,"sendRelationRemovalNotification(String relationId, List<ObjectName> unregMBeanList)",void,Sends a notification (RelationNotification) for a relation removal.
RelationService,"sendRoleUpdateNotification(String relationId, Role newRole, List<ObjectName> oldValue)",void,Sends a notification (RelationNotification) for a role update in the given relation.
RelationService,setPurgeFlag(boolean purgeFlag),void,"Sets the flag to indicate if when a notification is received for the unregistration of an MBean referenced in a relation, if an immediate ""purge"" of the relations (look for the relations no longer valid) has to be performed , or if that will be performed only when the purgeRelations method will be explicitly called."
RelationService,"setRole(String relationId, Role role)",void,Sets the given role in given relation.
RelationService,"setRoles(String relationId, RoleList roleList)",RoleResult,Sets the given roles in given relation.
RelationService,"updateRoleMap(String relationId, Role newRole, List<ObjectName> oldValue)",void,Handles update of the Relation Service role map for the update of given role in given relation.
RelationSupport,getAllRoles(),RoleResult,Returns all roles present in the relation.
RelationSupport,getReferencedMBeans(),"Map<ObjectName,List<String>>",Retrieves MBeans referenced in the various roles of the relation.
RelationSupport,getRelationId(),String,Returns relation identifier (used to uniquely identify the relation inside the Relation Service).
RelationSupport,getRelationServiceName(),ObjectName,Returns ObjectName of the Relation Service handling the relation.
RelationSupport,getRelationTypeName(),String,Returns name of associated relation type.
RelationSupport,getRole(String roleName),List<ObjectName>,Retrieves role value for given role name.
RelationSupport,getRoleCardinality(String roleName),Integer,Returns the number of MBeans currently referenced in the given role.
RelationSupport,getRoles(String[] roleNameArray),RoleResult,Retrieves values of roles with given names.
RelationSupport,"handleMBeanUnregistration(ObjectName objectName, String roleName)",void,Callback used by the Relation Service when a MBean referenced in a role is unregistered.
RelationSupport,isInRelationService(),Boolean,Returns an internal flag specifying if the object is still handled by the Relation Service.
RelationSupport,postDeregister(),void,Allows the MBean to perform any operations needed after having been unregistered in the MBean server.
RelationSupport,postRegister(Boolean registrationDone),void,Allows the MBean to perform any operations needed after having been registered in the MBean server or after the registration has failed.
RelationSupport,preDeregister(),void,Allows the MBean to perform any operations it needs before being unregistered by the MBean server.
RelationSupport,"preRegister(MBeanServer server, ObjectName name)",ObjectName,Allows the MBean to perform any operations it needs before being registered in the MBean Server.
RelationSupport,retrieveAllRoles(),RoleList,Returns all roles in the relation without checking read mode.
RelationSupport,setRelationServiceManagementFlag(Boolean flag),void,Specifies whether this relation is handled by the Relation Service.
RelationSupport,setRole(Role role),void,Sets the given role.
RelationSupport,setRoles(RoleList list),RoleResult,Sets the given roles.
RelationTypeSupport,addRoleInfo(RoleInfo roleInfo),protected void,Add a role info.
RelationTypeSupport,getRelationTypeName(),String,Returns the relation type name.
RelationTypeSupport,getRoleInfo(String roleInfoName),RoleInfo,Returns the role info (RoleInfo object) for the given role info name (null if not found).
RelationTypeSupport,getRoleInfos(),List<RoleInfo>,Returns the list of role definitions (ArrayList of RoleInfo objects).
Role,clone(),Object,Clone the role object.
Role,getRoleName(),String,Retrieves role name.
Role,getRoleValue(),List<ObjectName>,Retrieves role value.
Role,roleValueToString(List<ObjectName> roleValue),static String,Returns a string for the given role value.
Role,setRoleName(String roleName),void,Sets role name.
Role,setRoleValue(List<ObjectName> roleValue),void,Sets role value.
Role,toString(),String,Returns a string describing the role.
RoleInfo,checkMaxDegree(int value),boolean,"Returns true if the value parameter is lower than or equal to the expected maximum degree, false otherwise."
RoleInfo,checkMinDegree(int value),boolean,"Returns true if the value parameter is greater than or equal to the expected minimum degree, false otherwise."
RoleInfo,getDescription(),String,Returns description text for the role.
RoleInfo,getMaxDegree(),int,Returns maximum degree for corresponding role reference.
RoleInfo,getMinDegree(),int,Returns minimum degree for corresponding role reference.
RoleInfo,getName(),String,Returns the name of the role.
RoleInfo,getRefMBeanClassName(),String,Returns name of type of MBean expected to be referenced in corresponding role.
RoleInfo,isReadable(),boolean,Returns read access mode for the role (true if it is readable).
RoleInfo,isWritable(),boolean,Returns write access mode for the role (true if it is writable).
RoleInfo,toString(),String,Returns a string describing the role info.
RoleList,"add(int index, Object element)",void,Inserts the specified element at the specified position in this list.
RoleList,"add(int index, Role role)",void,Inserts the role specified as an element at the position specified.
RoleList,add(Object o),boolean,Appends the specified element to the end of this list.
RoleList,add(Role role),void,Adds the Role specified as the last element of the list.
RoleList,addAll(Collection<?> c),boolean,"Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator."
RoleList,"addAll(int index, Collection<?> c)",boolean,"Inserts all of the elements in the specified collection into this list, starting at the specified position."
RoleList,"addAll(int index, RoleList roleList)",boolean,"Inserts all of the elements in the RoleList specified into this list, starting at the specified position, in the order in which they are returned by the Iterator of the RoleList specified."
RoleList,addAll(RoleList roleList),boolean,"Appends all the elements in the RoleList specified to the end of the list, in the order in which they are returned by the Iterator of the RoleList specified."
RoleList,asList(),List<Role>,Return a view of this list as a List<Role>.
RoleList,"set(int index, Object element)",Object,Replaces the element at the specified position in this list with the specified element.
RoleList,"set(int index, Role role)",void,Sets the element at the position specified to be the role specified.
RoleResult,getRoles(),RoleList,Retrieves list of roles successfully accessed.
RoleResult,getRolesUnresolved(),RoleUnresolvedList,Retrieves list of roles unsuccessfully accessed.
RoleResult,setRoles(RoleList list),void,Sets list of roles successfully accessed.
RoleResult,setRolesUnresolved(RoleUnresolvedList unresolvedList),void,Sets list of roles unsuccessfully accessed.
RoleStatus,isRoleStatus(int status),static boolean,"Returns true if given value corresponds to a known role status, false otherwise."
RoleUnresolved,clone(),Object,Clone this object.
RoleUnresolved,getProblemType(),int,Retrieves problem type.
RoleUnresolved,getRoleName(),String,Retrieves role name.
RoleUnresolved,getRoleValue(),List<ObjectName>,Retrieves role value.
RoleUnresolved,setProblemType(int pbType),void,Sets problem type.
RoleUnresolved,setRoleName(String name),void,Sets role name.
RoleUnresolved,setRoleValue(List<ObjectName> value),void,Sets role value.
RoleUnresolved,toString(),String,Return a string describing this object.
RoleUnresolvedList,"add(int index, Object element)",void,Inserts the specified element at the specified position in this list.
RoleUnresolvedList,"add(int index, RoleUnresolved role)",void,Inserts the unresolved role specified as an element at the position specified.
RoleUnresolvedList,add(Object o),boolean,Appends the specified element to the end of this list.
RoleUnresolvedList,add(RoleUnresolved role),void,Adds the RoleUnresolved specified as the last element of the list.
RoleUnresolvedList,addAll(Collection<?> c),boolean,"Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator."
RoleUnresolvedList,"addAll(int index, Collection<?> c)",boolean,"Inserts all of the elements in the specified collection into this list, starting at the specified position."
RoleUnresolvedList,"addAll(int index, RoleUnresolvedList roleList)",boolean,"Inserts all of the elements in the RoleUnresolvedList specified into this list, starting at the specified position, in the order in which they are returned by the Iterator of the RoleUnresolvedList specified."
RoleUnresolvedList,addAll(RoleUnresolvedList roleList),boolean,"Appends all the elements in the RoleUnresolvedList specified to the end of the list, in the order in which they are returned by the Iterator of the RoleUnresolvedList specified."
RoleUnresolvedList,asList(),List<RoleUnresolved>,Return a view of this list as a List<RoleUnresolved>.
RoleUnresolvedList,"set(int index, Object element)",Object,Replaces the element at the specified position in this list with the specified element.
RoleUnresolvedList,"set(int index, RoleUnresolved role)",void,Sets the element at the position specified to be the unresolved role specified.
