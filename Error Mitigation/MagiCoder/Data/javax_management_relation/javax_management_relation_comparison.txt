Sample: 0 MBeanServerNotificationFilter
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides the definition of the Relation Service.
Here is the description of the class Filter for MBeanServerNotification.

@@ Instruction
I want to use javax.management.relation.MBeanServerNotificationFilter package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean add(E e)`: This method appends the specified element to the end of this list.
2. `void clear()`: This method removes all of the elements from this list.
3. `boolean contains(Object o)`: This method returns true if this list contains the specified element.
4. `boolean remove(Object o)`: This method removes the first occurrence of the specified element from this list, if it is present.
5. `int size()`: This method returns the number of elements in this list.
================================================================

Sample: 1 RelationNotification
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides the definition of the Relation Service.
Here is the description of the class A notification of a change in the Relation Service.

@@ Instruction
I want to use javax.management.relation.RelationNotification package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `void setRelationType(String relationType)`: This method sets the relation type of the notification.
2. `String getRelationType()`: This method returns the relation type of the notification.
3. `void setSource(String source)`: This method sets the source of the notification.
4. `String getSource()`: This method returns the source of the notification.
5. `void setTarget(String target)`: This method sets the target of the notification.
6. `String getTarget()`: This method returns the target of the notification.
7. `void setType(String type)`: This method sets the type of the notification.
8. `String getType()`: This method returns the type of the notification.
9. `void setUserData(Object userData)`: This method sets the user data of the notification.
10. `Object getUserData()`: This method returns the user data of the notification.
11. `void setSequenceNumber(long sequenceNumber)`: This method sets the sequence number of the notification.
12. `long getSequenceNumber()`: This method returns the sequence number of the notification.
13. `void setTimeStamp(Date timeStamp)`: This method sets the time stamp of the notification.
14. `Date getTimeStamp()`: This method returns the time stamp of the notification.
15. `void setMessage(String message)`: This method sets the message of the notification.
16. `String getMessage()`: This method returns the message of the notification.
17. `void setNotificationType(int notificationType)`: This method sets the notification type of the notification.
18. `int getNotificationType()`: This method returns the notification type of the notification.
19. `void setRelationId(String relationId)`: This method sets the relation id of the notification.
20. `String getRelationId()`: This method returns the relation id of the notification.
================================================================

Sample: 2 RelationService
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides the definition of the Relation Service.
Here is the description of the class The Relation Service is in charge of creating and deleting relation types and relations, of handling the consistency and of providing query mechanisms.

@@ Instruction
I want to use javax.management.relation.RelationService package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `RelationService createRelationService()`: This method creates a new RelationService object.

2. `RelationType createRelationType(String name)`: This method creates a new RelationType with the specified name.

3. `void deleteRelationType(RelationType type)`: This method deletes the specified RelationType.

4. `Relation createRelation(RelationType type, ObjectIdentifier[] identifiers)`: This method creates a new Relation of the specified type and with the specified identifiers.

5. `void deleteRelation(Relation relation)`: This method deletes the specified Relation.
================================================================

Sample: 3 RelationSupport
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides the definition of the Relation Service.
Here is the description of the class A RelationSupport object is used internally by the Relation Service to represent simple relations (only roles, no properties or methods), with an unlimited number of roles, of any relation type.

@@ Instruction
I want to use javax.management.relation.RelationSupport package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean add(E e)`: This method appends the specified element to the end of this list.
2. `boolean addAll(Collection<? extends E> c)`: This method appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator.
3. `void clear()`: This method removes all of the elements from this list.
4. `boolean contains(Object o)`: This method returns true if this list contains the specified element.
5. `boolean containsAll(Collection<?> c)`: This method returns true if this list contains all of the elements of the specified collection.
6. `boolean equals(Object o)`: This method compares the specified object with this list for equality.
7. `E get(int index)`: This method returns the element at the specified position in this list.
8. `int indexOf(Object o)`: This method returns the index in this list of the first occurrence of the specified element, or -1 if this list does not contain this element.
9. `boolean isEmpty()`: This method returns true if this list contains no elements.
10. `Iterator<E> iterator()`: This method returns an iterator over the elements in this list in proper sequence.
11. `int lastIndexOf(Object o)`: This method returns the index in this list of the last occurrence of the specified element, or -1 if this list does not contain this element.
12. `ListIterator<E> listIterator()`: This method returns a list-iterator of the elements in this list (in proper sequence).
13. `ListIterator<E> listIterator(int index)`: This method returns a list-iterator of the elements in this list (in proper sequence), starting at the specified position in the list.
14. `boolean remove(Object o)`: This method removes the first occurrence of the specified element from this list, if it is present.
15. `E remove(int index)`: This method removes the element at the specified position in this list.
16. `boolean removeAll(Collection<?> c)`: This method removes all of this list's elements that are also contained in the specified collection.
17. `boolean retainAll(Collection<?> c)`: This method retains only the elements in this list that are contained in the specified collection.
18. `E set(int index, E element)`: This method replaces the element at the specified position in this list with the specified element.
19. `int size()`: This method returns the number of elements in this list.
20. `List<E> subList(int fromIndex, int toIndex)`: This method returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.
================================================================

Sample: 4 RelationTypeSupport
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides the definition of the Relation Service.
Here is the description of the class A RelationTypeSupport object implements the RelationType interface.

@@ Instruction
I want to use javax.management.relation.RelationTypeSupport package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean add(E e)`: This method appends the specified element to the end of this list.
2. `boolean addAll(Collection<? extends E> c)`: This method appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator.
3. `void clear()`: This method removes all of the elements from this list.
4. `boolean contains(Object o)`: This method returns true if this list contains the specified element.
5. `boolean containsAll(Collection<?> c)`: This method returns true if this list contains all of the elements of the specified collection.
6. `boolean equals(Object o)`: This method compares the specified object with this list for equality.
7. `E get(int index)`: This method returns the element at the specified position in this list.
8. `int indexOf(Object o)`: This method returns the index in this list of the first occurrence of the specified element, or -1 if this list does not contain this element.
9. `boolean isEmpty()`: This method returns true if this list contains no elements.
10. `Iterator<E> iterator()`: This method returns an iterator over the elements in this list in proper sequence.
11. `int lastIndexOf(Object o)`: This method returns the index in this list of the last occurrence of the specified element, or -1 if this list does not contain this element.
12. `ListIterator<E> listIterator()`: This method returns a list-iterator of the elements in this list (in proper sequence).
13. `ListIterator<E> listIterator(int index)`: This method returns a list-iterator of the elements in this list (in proper sequence), starting at the specified position in the list.
14. `boolean remove(Object o)`: This method removes the first occurrence of the specified element from this list, if it is present.
15. `E remove(int index)`: This method removes the element at the specified position in this list.
16. `boolean removeAll(Collection<?> c)`: This method removes all of this list's elements that are also contained in the specified collection.
17. `boolean retainAll(Collection<?> c)`: This method retains only the elements in this list that are contained in the specified collection.
18. `E set(int index, E element)`: This method replaces the element at the specified position in this list with the specified element.
19. `int size()`: This method returns the number of elements in this list.
20. `List<E> subList(int fromIndex, int toIndex)`: This method returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.
21. `Object[] toArray()`: This method returns an array containing all of the elements in this list in proper sequence (from first to last element).
22. `<T> T[] toArray(T[] a)`: This method returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.
23. `String toString()`: This method returns a string representation of this list.
================================================================

Sample: 5 Role
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides the definition of the Relation Service.
Here is the description of the class Represents a role: includes a role name and referenced MBeans (via their ObjectNames).

@@ Instruction
I want to use javax.management.relation.Role package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean add(Role role)`: This method appends the specified role to the end of this list.
2. `boolean remove(Role role)`: This method removes the first occurrence of the specified role from this list, if it is present.
3. `boolean contains(Role role)`: This method returns true if this list contains the specified role.
4. `int size()`: This method returns the number of roles in this list.
5. `Role get(int index)`: This method returns the role at the specified position in this list.
================================================================

Sample: 6 RoleInfo
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides the definition of the Relation Service.
Here is the description of the class A RoleInfo object summarises a role in a relation type.

@@ Instruction
I want to use javax.management.relation.RoleInfo package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `RoleInfo getRoleName()`: This method returns the name of the role.
2. `RoleInfo getRoleType()`: This method returns the type of the role.
3. `RoleInfo getRoleDescription()`: This method returns the description of the role.
4. `RoleInfo getRoleMBean()`: This method returns the MBean of the role.
5. `RoleInfo getRoleValue()`: This method returns the value of the role.
================================================================

Sample: 7 RoleList
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides the definition of the Relation Service.
Here is the description of the class A RoleList represents a list of roles (Role objects).

@@ Instruction
I want to use javax.management.relation.RoleList package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean add(E e)`: This method appends the specified element to the end of this list.
2. `void add(int index, E element)`: This method inserts the specified element at the specified position in this list.
3. `boolean addAll(Collection<? extends E> c)`: This method appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator.
4. `boolean contains(Object o)`: This method returns true if this list contains the specified element.
5. `E get(int index)`: This method returns the element at the specified position in this list.
================================================================

Sample: 8 RoleResult
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides the definition of the Relation Service.
Here is the description of the class Represents the result of a multiple access to several roles of a relation (either for reading or writing).

@@ Instruction
I want to use javax.management.relation.RoleResult package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean add(E e)`: This method appends the specified element to the end of this list.
2. `void add(int index, E element)`: This method inserts the specified element at the specified position in this list.
3. `boolean addAll(Collection<? extends E> c)`: This method appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator.
4. `boolean addAll(int index, Collection<? extends E> c)`: This method inserts all of the elements in the specified collection into this list, starting at the specified position.
5. `void clear()`: This method removes all of the elements from this list.
================================================================

Sample: 9 RoleStatus
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides the definition of the Relation Service.
Here is the description of the class This class describes the various problems which can be encountered when accessing a role.

@@ Instruction
I want to use javax.management.relation.RoleStatus package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `RoleStatus getRoleStatus()`: This method returns the status of the role.
2. `String getRoleName()`: This method returns the name of the role.
3. `String getRoleDescription()`: This method returns the description of the role.
4. `String getRoleType()`: This method returns the type of the role.
5. `String getRoleIdentifier()`: This method returns the identifier of the role.
================================================================

Sample: 10 RoleUnresolved
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides the definition of the Relation Service.
Here is the description of the class Represents an unresolved role: a role not retrieved from a relation due to a problem.

@@ Instruction
I want to use javax.management.relation.RoleUnresolved package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean add(E e)`: This method appends the specified element to the end of this list.
2. `void add(int index, E element)`: This method inserts the specified element at the specified position in this list.
3. `boolean addAll(Collection<? extends E> c)`: This method appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator.
4. `boolean addAll(int index, Collection<? extends E> c)`: This method inserts all of the elements in the specified collection into this list, starting at the specified position.
5. `void clear()`: This method removes all of the elements from this list.
================================================================

Sample: 11 RoleUnresolvedList
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides the definition of the Relation Service.
Here is the description of the class A RoleUnresolvedList represents a list of RoleUnresolved objects, representing roles not retrieved from a relation due to a problem encountered when trying to access (read or write) the roles.

@@ Instruction
I want to use javax.management.relation.RoleUnresolvedList package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean add(E e)`: This method appends the specified element to the end of this list.
2. `void add(int index, E element)`: This method inserts the specified element at the specified position in this list.
3. `boolean addAll(Collection<? extends E> c)`: This method appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator.
4. `boolean addAll(int index, Collection<? extends E> c)`: This method inserts all of the elements in the specified collection into this list, starting at the specified position.
5. `void clear()`: This method removes all of the elements from this list.
================================================================

