ClassName,Method,Return Type,Description
BufferedInputStream,available(),int,Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream.
BufferedInputStream,close(),void,Closes this input stream and releases any system resources associated with the stream.
BufferedInputStream,mark(int readlimit),void,See the general contract of the mark method of InputStream.
BufferedInputStream,markSupported(),boolean,Tests if this input stream supports the mark and reset methods.
BufferedInputStream,read(),int,See the general contract of the read method of InputStream.
BufferedInputStream,"read(byte[] b, int off, int len)",int,"Reads bytes from this byte-input stream into the specified byte array, starting at the given offset."
BufferedInputStream,reset(),void,See the general contract of the reset method of InputStream.
BufferedInputStream,skip(long n),long,See the general contract of the skip method of InputStream.
BufferedOutputStream,flush(),void,Flushes this buffered output stream.
BufferedOutputStream,"write(byte[] b, int off, int len)",void,Writes len bytes from the specified byte array starting at offset off to this buffered output stream.
BufferedOutputStream,write(int b),void,Writes the specified byte to this buffered output stream.
BufferedReader,close(),void,Closes the stream and releases any system resources associated with it.
BufferedReader,lines(),Stream<String>,"Returns a Stream, the elements of which are lines read from this BufferedReader."
BufferedReader,mark(int readAheadLimit),void,Marks the present position in the stream.
BufferedReader,markSupported(),boolean,"Tells whether this stream supports the mark() operation, which it does."
BufferedReader,read(),int,Reads a single character.
BufferedReader,"read(char[] cbuf, int off, int len)",int,Reads characters into a portion of an array.
BufferedReader,readLine(),String,Reads a line of text.
BufferedReader,ready(),boolean,Tells whether this stream is ready to be read.
BufferedReader,reset(),void,Resets the stream to the most recent mark.
BufferedReader,skip(long n),long,Skips characters.
BufferedWriter,close(),void,"Closes the stream, flushing it first."
BufferedWriter,flush(),void,Flushes the stream.
BufferedWriter,newLine(),void,Writes a line separator.
BufferedWriter,"write(char[] cbuf, int off, int len)",void,Writes a portion of an array of characters.
BufferedWriter,write(int c),void,Writes a single character.
BufferedWriter,"write(String s, int off, int len)",void,Writes a portion of a String.
ByteArrayInputStream,available(),int,Returns the number of remaining bytes that can be read (or skipped over) from this input stream.
ByteArrayInputStream,close(),void,Closing a ByteArrayInputStream has no effect.
ByteArrayInputStream,mark(int readAheadLimit),void,Set the current marked position in the stream.
ByteArrayInputStream,markSupported(),boolean,Tests if this InputStream supports mark/reset.
ByteArrayInputStream,read(),int,Reads the next byte of data from this input stream.
ByteArrayInputStream,"read(byte[] b, int off, int len)",int,Reads up to len bytes of data into an array of bytes from this input stream.
ByteArrayInputStream,reset(),void,Resets the buffer to the marked position.
ByteArrayInputStream,skip(long n),long,Skips n bytes of input from this input stream.
ByteArrayOutputStream,close(),void,Closing a ByteArrayOutputStream has no effect.
ByteArrayOutputStream,reset(),void,"Resets the count field of this byte array output stream to zero, so that all currently accumulated output in the output stream is discarded."
ByteArrayOutputStream,size(),int,Returns the current size of the buffer.
ByteArrayOutputStream,toByteArray(),byte[],Creates a newly allocated byte array.
ByteArrayOutputStream,toString(),String,Converts the buffer's contents into a string decoding bytes using the platform's default character set.
ByteArrayOutputStream,toString(int hibyte),String,"Deprecated. This method does not properly convert bytes into characters. As of JDK 1.1, the preferred way to do this is via the toString(String enc) method, which takes an encoding-name argument, or the toString() method, which uses the platform's default character encoding."
ByteArrayOutputStream,toString(String charsetName),String,Converts the buffer's contents into a string by decoding the bytes using the named charset.
ByteArrayOutputStream,"write(byte[] b, int off, int len)",void,Writes len bytes from the specified byte array starting at offset off to this byte array output stream.
ByteArrayOutputStream,write(int b),void,Writes the specified byte to this byte array output stream.
ByteArrayOutputStream,writeTo(OutputStream out),void,"Writes the complete contents of this byte array output stream to the specified output stream argument, as if by calling the output stream's write method using out.write(buf, 0, count)."
CharArrayReader,close(),void,Closes the stream and releases any system resources associated with it.
CharArrayReader,mark(int readAheadLimit),void,Marks the present position in the stream.
CharArrayReader,markSupported(),boolean,"Tells whether this stream supports the mark() operation, which it does."
CharArrayReader,read(),int,Reads a single character.
CharArrayReader,"read(char[] b, int off, int len)",int,Reads characters into a portion of an array.
CharArrayReader,ready(),boolean,Tells whether this stream is ready to be read.
CharArrayReader,reset(),void,"Resets the stream to the most recent mark, or to the beginning if it has never been marked."
CharArrayReader,skip(long n),long,Skips characters.
CharArrayWriter,append(char c),CharArrayWriter,Appends the specified character to this writer.
CharArrayWriter,append(CharSequence csq),CharArrayWriter,Appends the specified character sequence to this writer.
CharArrayWriter,"append(CharSequence csq, int start, int end)",CharArrayWriter,Appends a subsequence of the specified character sequence to this writer.
CharArrayWriter,close(),void,Close the stream.
CharArrayWriter,flush(),void,Flush the stream.
CharArrayWriter,reset(),void,Resets the buffer so that you can use it again without throwing away the already allocated buffer.
CharArrayWriter,size(),int,Returns the current size of the buffer.
CharArrayWriter,toCharArray(),char[],Returns a copy of the input data.
CharArrayWriter,toString(),String,Converts input data to a string.
CharArrayWriter,"write(char[] c, int off, int len)",void,Writes characters to the buffer.
CharArrayWriter,write(int c),void,Writes a character to the buffer.
CharArrayWriter,"write(String str, int off, int len)",void,Write a portion of a string to the buffer.
CharArrayWriter,writeTo(Writer out),void,Writes the contents of the buffer to another character stream.
Console,flush(),void,Flushes the console and forces any buffered output to be written immediately .
Console,"format(String fmt, Object... args)",Console,Writes a formatted string to this console's output stream using the specified format string and arguments.
Console,"printf(String format, Object... args)",Console,A convenience method to write a formatted string to this console's output stream using the specified format string and arguments.
Console,reader(),Reader,Retrieves the unique Reader object associated with this console.
Console,readLine(),String,Reads a single line of text from the console.
Console,"readLine(String fmt, Object... args)",String,"Provides a formatted prompt, then reads a single line of text from the console."
Console,readPassword(),char[],Reads a password or passphrase from the console with echoing disabled
Console,"readPassword(String fmt, Object... args)",char[],"Provides a formatted prompt, then reads a password or passphrase from the console with echoing disabled."
Console,writer(),PrintWriter,Retrieves the unique PrintWriter object associated with this console.
DataInputStream,read(byte[] b),int,Reads some number of bytes from the contained input stream and stores them into the buffer array b.
DataInputStream,"read(byte[] b, int off, int len)",int,Reads up to len bytes of data from the contained input stream into an array of bytes.
DataInputStream,readBoolean(),boolean,See the general contract of the readBoolean method of DataInput.
DataInputStream,readByte(),byte,See the general contract of the readByte method of DataInput.
DataInputStream,readChar(),char,See the general contract of the readChar method of DataInput.
DataInputStream,readDouble(),double,See the general contract of the readDouble method of DataInput.
DataInputStream,readFloat(),float,See the general contract of the readFloat method of DataInput.
DataInputStream,readFully(byte[] b),void,See the general contract of the readFully method of DataInput.
DataInputStream,"readFully(byte[] b, int off, int len)",void,See the general contract of the readFully method of DataInput.
DataInputStream,readInt(),int,See the general contract of the readInt method of DataInput.
DataInputStream,readLine(),String,"Deprecated. This method does not properly convert bytes to characters. As of JDK 1.1, the preferred way to read lines of text is via the BufferedReader.readLine() method. Programs that use the DataInputStream class to read lines can be converted to use the BufferedReader class by replacing code of the form: DataInputStream d = new DataInputStream(in); with: BufferedReader d = new BufferedReader(new InputStreamReader(in));"
DataInputStream,readLong(),long,See the general contract of the readLong method of DataInput.
DataInputStream,readShort(),short,See the general contract of the readShort method of DataInput.
DataInputStream,readUnsignedByte(),int,See the general contract of the readUnsignedByte method of DataInput.
DataInputStream,readUnsignedShort(),int,See the general contract of the readUnsignedShort method of DataInput.
DataInputStream,readUTF(),String,See the general contract of the readUTF method of DataInput.
DataInputStream,readUTF(DataInput in),static String,Reads from the stream in a representation of a Unicode character string encoded in modified UTF-8 format; this string of characters is then returned as a String.
DataInputStream,skipBytes(int n),int,See the general contract of the skipBytes method of DataInput.
DataOutputStream,flush(),void,Flushes this data output stream.
DataOutputStream,size(),int,"Returns the current value of the counter written, the number of bytes written to this data output stream so far."
DataOutputStream,"write(byte[] b, int off, int len)",void,Writes len bytes from the specified byte array starting at offset off to the underlying output stream.
DataOutputStream,write(int b),void,Writes the specified byte (the low eight bits of the argument b) to the underlying output stream.
DataOutputStream,writeBoolean(boolean v),void,Writes a boolean to the underlying output stream as a 1-byte value.
DataOutputStream,writeByte(int v),void,Writes out a byte to the underlying output stream as a 1-byte value.
DataOutputStream,writeBytes(String s),void,Writes out the string to the underlying output stream as a sequence of bytes.
DataOutputStream,writeChar(int v),void,"Writes a char to the underlying output stream as a 2-byte value, high byte first."
DataOutputStream,writeChars(String s),void,Writes a string to the underlying output stream as a sequence of characters.
DataOutputStream,writeDouble(double v),void,"Converts the double argument to a long using the doubleToLongBits method in class Double, and then writes that long value to the underlying output stream as an 8-byte quantity, high byte first."
DataOutputStream,writeFloat(float v),void,"Converts the float argument to an int using the floatToIntBits method in class Float, and then writes that int value to the underlying output stream as a 4-byte quantity, high byte first."
DataOutputStream,writeInt(int v),void,"Writes an int to the underlying output stream as four bytes, high byte first."
DataOutputStream,writeLong(long v),void,"Writes a long to the underlying output stream as eight bytes, high byte first."
DataOutputStream,writeShort(int v),void,"Writes a short to the underlying output stream as two bytes, high byte first."
DataOutputStream,writeUTF(String str),void,Writes a string to the underlying output stream using modified UTF-8 encoding in a machine-independent manner.
File,canExecute(),boolean,Tests whether the application can execute the file denoted by this abstract pathname.
File,canRead(),boolean,Tests whether the application can read the file denoted by this abstract pathname.
File,canWrite(),boolean,Tests whether the application can modify the file denoted by this abstract pathname.
File,compareTo(File pathname),int,Compares two abstract pathnames lexicographically.
File,createNewFile(),boolean,"Atomically creates a new, empty file named by this abstract pathname if and only if a file with this name does not yet exist."
File,"createTempFile(String prefix, String suffix)",static File,"Creates an empty file in the default temporary-file directory, using the given prefix and suffix to generate its name."
File,"createTempFile(String prefix, String suffix, File directory)",static File,"Creates a new empty file in the specified directory, using the given prefix and suffix strings to generate its name."
File,delete(),boolean,Deletes the file or directory denoted by this abstract pathname.
File,deleteOnExit(),void,Requests that the file or directory denoted by this abstract pathname be deleted when the virtual machine terminates.
File,equals(Object obj),boolean,Tests this abstract pathname for equality with the given object.
File,exists(),boolean,Tests whether the file or directory denoted by this abstract pathname exists.
File,getAbsoluteFile(),File,Returns the absolute form of this abstract pathname.
File,getAbsolutePath(),String,Returns the absolute pathname string of this abstract pathname.
File,getCanonicalFile(),File,Returns the canonical form of this abstract pathname.
File,getCanonicalPath(),String,Returns the canonical pathname string of this abstract pathname.
File,getFreeSpace(),long,Returns the number of unallocated bytes in the partition named by this abstract path name.
File,getName(),String,Returns the name of the file or directory denoted by this abstract pathname.
File,getParent(),String,"Returns the pathname string of this abstract pathname's parent, or null if this pathname does not name a parent directory."
File,getParentFile(),File,"Returns the abstract pathname of this abstract pathname's parent, or null if this pathname does not name a parent directory."
File,getPath(),String,Converts this abstract pathname into a pathname string.
File,getTotalSpace(),long,Returns the size of the partition named by this abstract pathname.
File,getUsableSpace(),long,Returns the number of bytes available to this virtual machine on the partition named by this abstract pathname.
File,hashCode(),int,Computes a hash code for this abstract pathname.
File,isAbsolute(),boolean,Tests whether this abstract pathname is absolute.
File,isDirectory(),boolean,Tests whether the file denoted by this abstract pathname is a directory.
File,isFile(),boolean,Tests whether the file denoted by this abstract pathname is a normal file.
File,isHidden(),boolean,Tests whether the file named by this abstract pathname is a hidden file.
File,lastModified(),long,Returns the time that the file denoted by this abstract pathname was last modified.
File,length(),long,Returns the length of the file denoted by this abstract pathname.
File,list(),String[],Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname.
File,list(FilenameFilter filter),String[],Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter.
File,listFiles(),File[],Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname.
File,listFiles(FileFilter filter),File[],Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter.
File,listFiles(FilenameFilter filter),File[],Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter.
File,listRoots(),static File[],List the available filesystem roots.
File,mkdir(),boolean,Creates the directory named by this abstract pathname.
File,mkdirs(),boolean,"Creates the directory named by this abstract pathname, including any necessary but nonexistent parent directories."
File,renameTo(File dest),boolean,Renames the file denoted by this abstract pathname.
File,setExecutable(boolean executable),boolean,A convenience method to set the owner's execute permission for this abstract pathname.
File,"setExecutable(boolean executable, boolean ownerOnly)",boolean,Sets the owner's or everybody's execute permission for this abstract pathname.
File,setLastModified(long time),boolean,Sets the last-modified time of the file or directory named by this abstract pathname.
File,setReadable(boolean readable),boolean,A convenience method to set the owner's read permission for this abstract pathname.
File,"setReadable(boolean readable, boolean ownerOnly)",boolean,Sets the owner's or everybody's read permission for this abstract pathname.
File,setReadOnly(),boolean,Marks the file or directory named by this abstract pathname so that only read operations are allowed.
File,setWritable(boolean writable),boolean,A convenience method to set the owner's write permission for this abstract pathname.
File,"setWritable(boolean writable, boolean ownerOnly)",boolean,Sets the owner's or everybody's write permission for this abstract pathname.
File,toPath(),Path,Returns a java.nio.file.Path object constructed from the this abstract path.
File,toString(),String,Returns the pathname string of this abstract pathname.
File,toURI(),URI,Constructs a file: URI that represents this abstract pathname.
File,toURL(),URL,"Deprecated. This method does not automatically escape characters that are illegal in URLs. It is recommended that new code convert an abstract pathname into a URL by first converting it into a URI, via the toURI method, and then converting the URI into a URL via the URI.toURL method."
FileDescriptor,sync(),void,Force all system buffers to synchronize with the underlying device.
FileDescriptor,valid(),boolean,Tests if this file descriptor object is valid.
FileInputStream,available(),int,Returns an estimate of the number of remaining bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream.
FileInputStream,close(),void,Closes this file input stream and releases any system resources associated with the stream.
FileInputStream,finalize(),protected void,Ensures that the close method of this file input stream is called when there are no more references to it.
FileInputStream,getChannel(),FileChannel,Returns the unique FileChannel object associated with this file input stream.
FileInputStream,getFD(),FileDescriptor,Returns the FileDescriptor object that represents the connection to the actual file in the file system being used by this FileInputStream.
FileInputStream,read(),int,Reads a byte of data from this input stream.
FileInputStream,read(byte[] b),int,Reads up to b.length bytes of data from this input stream into an array of bytes.
FileInputStream,"read(byte[] b, int off, int len)",int,Reads up to len bytes of data from this input stream into an array of bytes.
FileInputStream,skip(long n),long,Skips over and discards n bytes of data from the input stream.
FileOutputStream,close(),void,Closes this file output stream and releases any system resources associated with this stream.
FileOutputStream,finalize(),protected void,"Cleans up the connection to the file, and ensures that the close method of this file output stream is called when there are no more references to this stream."
FileOutputStream,getChannel(),FileChannel,Returns the unique FileChannel object associated with this file output stream.
FileOutputStream,getFD(),FileDescriptor,Returns the file descriptor associated with this stream.
FileOutputStream,write(byte[] b),void,Writes b.length bytes from the specified byte array to this file output stream.
FileOutputStream,"write(byte[] b, int off, int len)",void,Writes len bytes from the specified byte array starting at offset off to this file output stream.
FileOutputStream,write(int b),void,Writes the specified byte to this file output stream.
FilePermission,equals(Object obj),boolean,Checks two FilePermission objects for equality.
FilePermission,getActions(),String,"Returns the ""canonical string representation"" of the actions."
FilePermission,hashCode(),int,Returns the hash code value for this object.
FilePermission,implies(Permission p),boolean,"Checks if this FilePermission object ""implies"" the specified permission."
FilePermission,newPermissionCollection(),PermissionCollection,Returns a new PermissionCollection object for storing FilePermission objects.
FilterInputStream,available(),int,Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next caller of a method for this input stream.
FilterInputStream,close(),void,Closes this input stream and releases any system resources associated with the stream.
FilterInputStream,mark(int readlimit),void,Marks the current position in this input stream.
FilterInputStream,markSupported(),boolean,Tests if this input stream supports the mark and reset methods.
FilterInputStream,read(),int,Reads the next byte of data from this input stream.
FilterInputStream,read(byte[] b),int,Reads up to byte.length bytes of data from this input stream into an array of bytes.
FilterInputStream,"read(byte[] b, int off, int len)",int,Reads up to len bytes of data from this input stream into an array of bytes.
FilterInputStream,reset(),void,Repositions this stream to the position at the time the mark method was last called on this input stream.
FilterInputStream,skip(long n),long,Skips over and discards n bytes of data from the input stream.
FilterOutputStream,close(),void,Closes this output stream and releases any system resources associated with the stream.
FilterOutputStream,flush(),void,Flushes this output stream and forces any buffered output bytes to be written out to the stream.
FilterOutputStream,write(byte[] b),void,Writes b.length bytes to this output stream.
FilterOutputStream,"write(byte[] b, int off, int len)",void,Writes len bytes from the specified byte array starting at offset off to this output stream.
FilterOutputStream,write(int b),void,Writes the specified byte to this output stream.
FilterReader,close(),void,Closes the stream and releases any system resources associated with it.
FilterReader,mark(int readAheadLimit),void,Marks the present position in the stream.
FilterReader,markSupported(),boolean,Tells whether this stream supports the mark() operation.
FilterReader,read(),int,Reads a single character.
FilterReader,"read(char[] cbuf, int off, int len)",int,Reads characters into a portion of an array.
FilterReader,ready(),boolean,Tells whether this stream is ready to be read.
FilterReader,reset(),void,Resets the stream.
FilterReader,skip(long n),long,Skips characters.
FilterWriter,close(),void,"Closes the stream, flushing it first."
FilterWriter,flush(),void,Flushes the stream.
FilterWriter,"write(char[] cbuf, int off, int len)",void,Writes a portion of an array of characters.
FilterWriter,write(int c),void,Writes a single character.
FilterWriter,"write(String str, int off, int len)",void,Writes a portion of a string.
InputStream,available(),int,Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream.
InputStream,close(),void,Closes this input stream and releases any system resources associated with the stream.
InputStream,mark(int readlimit),void,Marks the current position in this input stream.
InputStream,markSupported(),boolean,Tests if this input stream supports the mark and reset methods.
InputStream,read(),abstract int,Reads the next byte of data from the input stream.
InputStream,read(byte[] b),int,Reads some number of bytes from the input stream and stores them into the buffer array b.
InputStream,"read(byte[] b, int off, int len)",int,Reads up to len bytes of data from the input stream into an array of bytes.
InputStream,reset(),void,Repositions this stream to the position at the time the mark method was last called on this input stream.
InputStream,skip(long n),long,Skips over and discards n bytes of data from this input stream.
InputStreamReader,close(),void,Closes the stream and releases any system resources associated with it.
InputStreamReader,getEncoding(),String,Returns the name of the character encoding being used by this stream.
InputStreamReader,read(),int,Reads a single character.
InputStreamReader,"read(char[] cbuf, int offset, int length)",int,Reads characters into a portion of an array.
InputStreamReader,ready(),boolean,Tells whether this stream is ready to be read.
LineNumberInputStream,available(),int,Deprecated.
LineNumberInputStream,getLineNumber(),int,Deprecated.
LineNumberInputStream,mark(int readlimit),void,Deprecated.
LineNumberInputStream,read(),int,Deprecated.
LineNumberInputStream,"read(byte[] b, int off, int len)",int,Deprecated.
LineNumberInputStream,reset(),void,Deprecated.
LineNumberInputStream,setLineNumber(int lineNumber),void,Deprecated.
LineNumberInputStream,skip(long n),long,Deprecated.
LineNumberReader,getLineNumber(),int,Get the current line number.
LineNumberReader,mark(int readAheadLimit),void,Mark the present position in the stream.
LineNumberReader,read(),int,Read a single character.
LineNumberReader,"read(char[] cbuf, int off, int len)",int,Read characters into a portion of an array.
LineNumberReader,readLine(),String,Read a line of text.
LineNumberReader,reset(),void,Reset the stream to the most recent mark.
LineNumberReader,setLineNumber(int lineNumber),void,Set the current line number.
LineNumberReader,skip(long n),long,Skip characters.
ObjectInputStream,available(),int,Returns the number of bytes that can be read without blocking.
ObjectInputStream,close(),void,Closes the input stream.
ObjectInputStream,defaultReadObject(),void,Read the non-static and non-transient fields of the current class from this stream.
ObjectInputStream,enableResolveObject(boolean enable),protected boolean,Enable the stream to allow objects read from the stream to be replaced.
ObjectInputStream,read(),int,Reads a byte of data.
ObjectInputStream,"read(byte[] buf, int off, int len)",int,Reads into an array of bytes.
ObjectInputStream,readBoolean(),boolean,Reads in a boolean.
ObjectInputStream,readByte(),byte,Reads an 8 bit byte.
ObjectInputStream,readChar(),char,Reads a 16 bit char.
ObjectInputStream,readClassDescriptor(),protected ObjectStreamClass,Read a class descriptor from the serialization stream.
ObjectInputStream,readDouble(),double,Reads a 64 bit double.
ObjectInputStream,readFields(),ObjectInputStream.GetField,Reads the persistent fields from the stream and makes them available by name.
ObjectInputStream,readFloat(),float,Reads a 32 bit float.
ObjectInputStream,readFully(byte[] buf),void,"Reads bytes, blocking until all bytes are read."
ObjectInputStream,"readFully(byte[] buf, int off, int len)",void,"Reads bytes, blocking until all bytes are read."
ObjectInputStream,readInt(),int,Reads a 32 bit int.
ObjectInputStream,readLine(),String,Deprecated. This method does not properly convert bytes to characters. see DataInputStream for the details and alternatives.
ObjectInputStream,readLong(),long,Reads a 64 bit long.
ObjectInputStream,readObject(),Object,Read an object from the ObjectInputStream.
ObjectInputStream,readObjectOverride(),protected Object,This method is called by trusted subclasses of ObjectInputStream that constructed ObjectInputStream using the protected no-arg constructor.
ObjectInputStream,readShort(),short,Reads a 16 bit short.
ObjectInputStream,readStreamHeader(),protected void,The readStreamHeader method is provided to allow subclasses to read and verify their own stream headers.
ObjectInputStream,readUnshared(),Object,"Reads an ""unshared"" object from the ObjectInputStream."
ObjectInputStream,readUnsignedByte(),int,Reads an unsigned 8 bit byte.
ObjectInputStream,readUnsignedShort(),int,Reads an unsigned 16 bit short.
ObjectInputStream,readUTF(),String,Reads a String in modified UTF-8 format.
ObjectInputStream,"registerValidation(ObjectInputValidation obj, int prio)",void,Register an object to be validated before the graph is returned.
ObjectInputStream,resolveClass(ObjectStreamClass desc),protected Class<?>,Load the local class equivalent of the specified stream class description.
ObjectInputStream,resolveObject(Object obj),protected Object,This method will allow trusted subclasses of ObjectInputStream to substitute one object for another during deserialization.
ObjectInputStream,resolveProxyClass(String[] interfaces),protected Class<?>,"Returns a proxy class that implements the interfaces named in a proxy class descriptor; subclasses may implement this method to read custom data from the stream along with the descriptors for dynamic proxy classes, allowing them to use an alternate loading mechanism for the interfaces and the proxy class."
ObjectInputStream,skipBytes(int len),int,Skips bytes.
ObjectInputStream.GetField,defaulted(String name),abstract boolean,Return true if the named field is defaulted and has no value in this stream.
ObjectInputStream.GetField,"get(String name, boolean val)",abstract boolean,Get the value of the named boolean field from the persistent field.
ObjectInputStream.GetField,"get(String name, byte val)",abstract byte,Get the value of the named byte field from the persistent field.
ObjectInputStream.GetField,"get(String name, char val)",abstract char,Get the value of the named char field from the persistent field.
ObjectInputStream.GetField,"get(String name, double val)",abstract double,Get the value of the named double field from the persistent field.
ObjectInputStream.GetField,"get(String name, float val)",abstract float,Get the value of the named float field from the persistent field.
ObjectInputStream.GetField,"get(String name, int val)",abstract int,Get the value of the named int field from the persistent field.
ObjectInputStream.GetField,"get(String name, long val)",abstract long,Get the value of the named long field from the persistent field.
ObjectInputStream.GetField,"get(String name, Object val)",abstract Object,Get the value of the named Object field from the persistent field.
ObjectInputStream.GetField,"get(String name, short val)",abstract short,Get the value of the named short field from the persistent field.
ObjectInputStream.GetField,getObjectStreamClass(),abstract ObjectStreamClass,Get the ObjectStreamClass that describes the fields in the stream.
ObjectOutputStream,annotateClass(Class<?> cl),protected void,Subclasses may implement this method to allow class data to be stored in the stream.
ObjectOutputStream,annotateProxyClass(Class<?> cl),protected void,Subclasses may implement this method to store custom data in the stream along with descriptors for dynamic proxy classes.
ObjectOutputStream,close(),void,Closes the stream.
ObjectOutputStream,defaultWriteObject(),void,Write the non-static and non-transient fields of the current class to this stream.
ObjectOutputStream,drain(),protected void,Drain any buffered data in ObjectOutputStream.
ObjectOutputStream,enableReplaceObject(boolean enable),protected boolean,Enable the stream to do replacement of objects in the stream.
ObjectOutputStream,flush(),void,Flushes the stream.
ObjectOutputStream,putFields(),ObjectOutputStream.PutField,Retrieve the object used to buffer persistent fields to be written to the stream.
ObjectOutputStream,replaceObject(Object obj),protected Object,This method will allow trusted subclasses of ObjectOutputStream to substitute one object for another during serialization.
ObjectOutputStream,reset(),void,Reset will disregard the state of any objects already written to the stream.
ObjectOutputStream,useProtocolVersion(int version),void,Specify stream protocol version to use when writing the stream.
ObjectOutputStream,write(byte[] buf),void,Writes an array of bytes.
ObjectOutputStream,"write(byte[] buf, int off, int len)",void,Writes a sub array of bytes.
ObjectOutputStream,write(int val),void,Writes a byte.
ObjectOutputStream,writeBoolean(boolean val),void,Writes a boolean.
ObjectOutputStream,writeByte(int val),void,Writes an 8 bit byte.
ObjectOutputStream,writeBytes(String str),void,Writes a String as a sequence of bytes.
ObjectOutputStream,writeChar(int val),void,Writes a 16 bit char.
ObjectOutputStream,writeChars(String str),void,Writes a String as a sequence of chars.
ObjectOutputStream,writeClassDescriptor(ObjectStreamClass desc),protected void,Write the specified class descriptor to the ObjectOutputStream.
ObjectOutputStream,writeDouble(double val),void,Writes a 64 bit double.
ObjectOutputStream,writeFields(),void,Write the buffered fields to the stream.
ObjectOutputStream,writeFloat(float val),void,Writes a 32 bit float.
ObjectOutputStream,writeInt(int val),void,Writes a 32 bit int.
ObjectOutputStream,writeLong(long val),void,Writes a 64 bit long.
ObjectOutputStream,writeObject(Object obj),void,Write the specified object to the ObjectOutputStream.
ObjectOutputStream,writeObjectOverride(Object obj),protected void,Method used by subclasses to override the default writeObject method.
ObjectOutputStream,writeShort(int val),void,Writes a 16 bit short.
ObjectOutputStream,writeStreamHeader(),protected void,The writeStreamHeader method is provided so subclasses can append or prepend their own header to the stream.
ObjectOutputStream,writeUnshared(Object obj),void,"Writes an ""unshared"" object to the ObjectOutputStream."
ObjectOutputStream,writeUTF(String str),void,Primitive data write of this String in modified UTF-8 format.
ObjectOutputStream.PutField,"put(String name, boolean val)",abstract void,Put the value of the named boolean field into the persistent field.
ObjectOutputStream.PutField,"put(String name, byte val)",abstract void,Put the value of the named byte field into the persistent field.
ObjectOutputStream.PutField,"put(String name, char val)",abstract void,Put the value of the named char field into the persistent field.
ObjectOutputStream.PutField,"put(String name, double val)",abstract void,Put the value of the named double field into the persistent field.
ObjectOutputStream.PutField,"put(String name, float val)",abstract void,Put the value of the named float field into the persistent field.
ObjectOutputStream.PutField,"put(String name, int val)",abstract void,Put the value of the named int field into the persistent field.
ObjectOutputStream.PutField,"put(String name, long val)",abstract void,Put the value of the named long field into the persistent field.
ObjectOutputStream.PutField,"put(String name, Object val)",abstract void,Put the value of the named Object field into the persistent field.
ObjectOutputStream.PutField,"put(String name, short val)",abstract void,Put the value of the named short field into the persistent field.
ObjectOutputStream.PutField,write(ObjectOutput out),abstract void,"Deprecated. This method does not write the values contained by this PutField object in a proper format, and may result in corruption of the serialization stream. The correct way to write PutField data is by calling the ObjectOutputStream.writeFields() method."
ObjectStreamClass,forClass(),Class<?>,Return the class in the local VM that this version is mapped to.
ObjectStreamClass,getField(String name),ObjectStreamField,Get the field of this class by name.
ObjectStreamClass,getFields(),ObjectStreamField[],Return an array of the fields of this serializable class.
ObjectStreamClass,getName(),String,Returns the name of the class described by this descriptor.
ObjectStreamClass,getSerialVersionUID(),long,Return the serialVersionUID for this class.
ObjectStreamClass,lookup(Class<?> cl),static ObjectStreamClass,Find the descriptor for a class that can be serialized.
ObjectStreamClass,lookupAny(Class<?> cl),static ObjectStreamClass,"Returns the descriptor for any class, regardless of whether it implements Serializable."
ObjectStreamClass,toString(),String,Return a string describing this ObjectStreamClass.
ObjectStreamField,compareTo(Object obj),int,Compare this field with another ObjectStreamField.
ObjectStreamField,getName(),String,Get the name of this field.
ObjectStreamField,getOffset(),int,Offset of field within instance data.
ObjectStreamField,getType(),Class<?>,Get the type of the field.
ObjectStreamField,getTypeCode(),char,Returns character encoding of field type.
ObjectStreamField,getTypeString(),String,Return the JVM type signature.
ObjectStreamField,isPrimitive(),boolean,Return true if this field has a primitive type.
ObjectStreamField,isUnshared(),boolean,Returns boolean value indicating whether or not the serializable field represented by this ObjectStreamField instance is unshared.
ObjectStreamField,setOffset(int offset),protected void,Offset within instance data.
ObjectStreamField,toString(),String,Return a string that describes this field.
OutputStream,close(),void,Closes this output stream and releases any system resources associated with this stream.
OutputStream,flush(),void,Flushes this output stream and forces any buffered output bytes to be written out.
OutputStream,write(byte[] b),void,Writes b.length bytes from the specified byte array to this output stream.
OutputStream,"write(byte[] b, int off, int len)",void,Writes len bytes from the specified byte array starting at offset off to this output stream.
OutputStream,write(int b),abstract void,Writes the specified byte to this output stream.
OutputStreamWriter,close(),void,"Closes the stream, flushing it first."
OutputStreamWriter,flush(),void,Flushes the stream.
OutputStreamWriter,getEncoding(),String,Returns the name of the character encoding being used by this stream.
OutputStreamWriter,"write(char[] cbuf, int off, int len)",void,Writes a portion of an array of characters.
OutputStreamWriter,write(int c),void,Writes a single character.
OutputStreamWriter,"write(String str, int off, int len)",void,Writes a portion of a string.
PipedInputStream,available(),int,Returns the number of bytes that can be read from this input stream without blocking.
PipedInputStream,close(),void,Closes this piped input stream and releases any system resources associated with the stream.
PipedInputStream,connect(PipedOutputStream src),void,Causes this piped input stream to be connected to the piped output stream src.
PipedInputStream,read(),int,Reads the next byte of data from this piped input stream.
PipedInputStream,"read(byte[] b, int off, int len)",int,Reads up to len bytes of data from this piped input stream into an array of bytes.
PipedInputStream,receive(int b),protected void,Receives a byte of data.
PipedOutputStream,close(),void,Closes this piped output stream and releases any system resources associated with this stream.
PipedOutputStream,connect(PipedInputStream snk),void,Connects this piped output stream to a receiver.
PipedOutputStream,flush(),void,Flushes this output stream and forces any buffered output bytes to be written out.
PipedOutputStream,"write(byte[] b, int off, int len)",void,Writes len bytes from the specified byte array starting at offset off to this piped output stream.
PipedOutputStream,write(int b),void,Writes the specified byte to the piped output stream.
PipedReader,close(),void,Closes this piped stream and releases any system resources associated with the stream.
PipedReader,connect(PipedWriter src),void,Causes this piped reader to be connected to the piped writer src.
PipedReader,read(),int,Reads the next character of data from this piped stream.
PipedReader,"read(char[] cbuf, int off, int len)",int,Reads up to len characters of data from this piped stream into an array of characters.
PipedReader,ready(),boolean,Tell whether this stream is ready to be read.
PipedWriter,close(),void,Closes this piped output stream and releases any system resources associated with this stream.
PipedWriter,connect(PipedReader snk),void,Connects this piped writer to a receiver.
PipedWriter,flush(),void,Flushes this output stream and forces any buffered output characters to be written out.
PipedWriter,"write(char[] cbuf, int off, int len)",void,Writes len characters from the specified character array starting at offset off to this piped output stream.
PipedWriter,write(int c),void,Writes the specified char to the piped output stream.
PrintStream,append(char c),PrintStream,Appends the specified character to this output stream.
PrintStream,append(CharSequence csq),PrintStream,Appends the specified character sequence to this output stream.
PrintStream,"append(CharSequence csq, int start, int end)",PrintStream,Appends a subsequence of the specified character sequence to this output stream.
PrintStream,checkError(),boolean,Flushes the stream and checks its error state.
PrintStream,clearError(),protected void,Clears the internal error state of this stream.
PrintStream,close(),void,Closes the stream.
PrintStream,flush(),void,Flushes the stream.
PrintStream,"format(Locale l, String format, Object... args)",PrintStream,Writes a formatted string to this output stream using the specified format string and arguments.
PrintStream,"format(String format, Object... args)",PrintStream,Writes a formatted string to this output stream using the specified format string and arguments.
PrintStream,print(boolean b),void,Prints a boolean value.
PrintStream,print(char c),void,Prints a character.
PrintStream,print(char[] s),void,Prints an array of characters.
PrintStream,print(double d),void,Prints a double-precision floating-point number.
PrintStream,print(float f),void,Prints a floating-point number.
PrintStream,print(int i),void,Prints an integer.
PrintStream,print(long l),void,Prints a long integer.
PrintStream,print(Object obj),void,Prints an object.
PrintStream,print(String s),void,Prints a string.
PrintStream,"printf(Locale l, String format, Object... args)",PrintStream,A convenience method to write a formatted string to this output stream using the specified format string and arguments.
PrintStream,"printf(String format, Object... args)",PrintStream,A convenience method to write a formatted string to this output stream using the specified format string and arguments.
PrintStream,println(),void,Terminates the current line by writing the line separator string.
PrintStream,println(boolean x),void,Prints a boolean and then terminate the line.
PrintStream,println(char x),void,Prints a character and then terminate the line.
PrintStream,println(char[] x),void,Prints an array of characters and then terminate the line.
PrintStream,println(double x),void,Prints a double and then terminate the line.
PrintStream,println(float x),void,Prints a float and then terminate the line.
PrintStream,println(int x),void,Prints an integer and then terminate the line.
PrintStream,println(long x),void,Prints a long and then terminate the line.
PrintStream,println(Object x),void,Prints an Object and then terminate the line.
PrintStream,println(String x),void,Prints a String and then terminate the line.
PrintStream,setError(),protected void,Sets the error state of the stream to true.
PrintStream,"write(byte[] buf, int off, int len)",void,Writes len bytes from the specified byte array starting at offset off to this stream.
PrintStream,write(int b),void,Writes the specified byte to this stream.
PrintWriter,append(char c),PrintWriter,Appends the specified character to this writer.
PrintWriter,append(CharSequence csq),PrintWriter,Appends the specified character sequence to this writer.
PrintWriter,"append(CharSequence csq, int start, int end)",PrintWriter,Appends a subsequence of the specified character sequence to this writer.
PrintWriter,checkError(),boolean,Flushes the stream if it's not closed and checks its error state.
PrintWriter,clearError(),protected void,Clears the error state of this stream.
PrintWriter,close(),void,Closes the stream and releases any system resources associated with it.
PrintWriter,flush(),void,Flushes the stream.
PrintWriter,"format(Locale l, String format, Object... args)",PrintWriter,Writes a formatted string to this writer using the specified format string and arguments.
PrintWriter,"format(String format, Object... args)",PrintWriter,Writes a formatted string to this writer using the specified format string and arguments.
PrintWriter,print(boolean b),void,Prints a boolean value.
PrintWriter,print(char c),void,Prints a character.
PrintWriter,print(char[] s),void,Prints an array of characters.
PrintWriter,print(double d),void,Prints a double-precision floating-point number.
PrintWriter,print(float f),void,Prints a floating-point number.
PrintWriter,print(int i),void,Prints an integer.
PrintWriter,print(long l),void,Prints a long integer.
PrintWriter,print(Object obj),void,Prints an object.
PrintWriter,print(String s),void,Prints a string.
PrintWriter,"printf(Locale l, String format, Object... args)",PrintWriter,A convenience method to write a formatted string to this writer using the specified format string and arguments.
PrintWriter,"printf(String format, Object... args)",PrintWriter,A convenience method to write a formatted string to this writer using the specified format string and arguments.
PrintWriter,println(),void,Terminates the current line by writing the line separator string.
PrintWriter,println(boolean x),void,Prints a boolean value and then terminates the line.
PrintWriter,println(char x),void,Prints a character and then terminates the line.
PrintWriter,println(char[] x),void,Prints an array of characters and then terminates the line.
PrintWriter,println(double x),void,Prints a double-precision floating-point number and then terminates the line.
PrintWriter,println(float x),void,Prints a floating-point number and then terminates the line.
PrintWriter,println(int x),void,Prints an integer and then terminates the line.
PrintWriter,println(long x),void,Prints a long integer and then terminates the line.
PrintWriter,println(Object x),void,Prints an Object and then terminates the line.
PrintWriter,println(String x),void,Prints a String and then terminates the line.
PrintWriter,setError(),protected void,Indicates that an error has occurred.
PrintWriter,write(char[] buf),void,Writes an array of characters.
PrintWriter,"write(char[] buf, int off, int len)",void,Writes A Portion of an array of characters.
PrintWriter,write(int c),void,Writes a single character.
PrintWriter,write(String s),void,Writes a string.
PrintWriter,"write(String s, int off, int len)",void,Writes a portion of a string.
PushbackInputStream,available(),int,Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream.
PushbackInputStream,close(),void,Closes this input stream and releases any system resources associated with the stream.
PushbackInputStream,mark(int readlimit),void,Marks the current position in this input stream.
PushbackInputStream,markSupported(),boolean,"Tests if this input stream supports the mark and reset methods, which it does not."
PushbackInputStream,read(),int,Reads the next byte of data from this input stream.
PushbackInputStream,"read(byte[] b, int off, int len)",int,Reads up to len bytes of data from this input stream into an array of bytes.
PushbackInputStream,reset(),void,Repositions this stream to the position at the time the mark method was last called on this input stream.
PushbackInputStream,skip(long n),long,Skips over and discards n bytes of data from this input stream.
PushbackInputStream,unread(byte[] b),void,Pushes back an array of bytes by copying it to the front of the pushback buffer.
PushbackInputStream,"unread(byte[] b, int off, int len)",void,Pushes back a portion of an array of bytes by copying it to the front of the pushback buffer.
PushbackInputStream,unread(int b),void,Pushes back a byte by copying it to the front of the pushback buffer.
PushbackReader,close(),void,Closes the stream and releases any system resources associated with it.
PushbackReader,mark(int readAheadLimit),void,Marks the present position in the stream.
PushbackReader,markSupported(),boolean,"Tells whether this stream supports the mark() operation, which it does not."
PushbackReader,read(),int,Reads a single character.
PushbackReader,"read(char[] cbuf, int off, int len)",int,Reads characters into a portion of an array.
PushbackReader,ready(),boolean,Tells whether this stream is ready to be read.
PushbackReader,reset(),void,Resets the stream.
PushbackReader,skip(long n),long,Skips characters.
PushbackReader,unread(char[] cbuf),void,Pushes back an array of characters by copying it to the front of the pushback buffer.
PushbackReader,"unread(char[] cbuf, int off, int len)",void,Pushes back a portion of an array of characters by copying it to the front of the pushback buffer.
PushbackReader,unread(int c),void,Pushes back a single character by copying it to the front of the pushback buffer.
RandomAccessFile,close(),void,Closes this random access file stream and releases any system resources associated with the stream.
RandomAccessFile,getChannel(),FileChannel,Returns the unique FileChannel object associated with this file.
RandomAccessFile,getFD(),FileDescriptor,Returns the opaque file descriptor object associated with this stream.
RandomAccessFile,getFilePointer(),long,Returns the current offset in this file.
RandomAccessFile,length(),long,Returns the length of this file.
RandomAccessFile,read(),int,Reads a byte of data from this file.
RandomAccessFile,read(byte[] b),int,Reads up to b.length bytes of data from this file into an array of bytes.
RandomAccessFile,"read(byte[] b, int off, int len)",int,Reads up to len bytes of data from this file into an array of bytes.
RandomAccessFile,readBoolean(),boolean,Reads a boolean from this file.
RandomAccessFile,readByte(),byte,Reads a signed eight-bit value from this file.
RandomAccessFile,readChar(),char,Reads a character from this file.
RandomAccessFile,readDouble(),double,Reads a double from this file.
RandomAccessFile,readFloat(),float,Reads a float from this file.
RandomAccessFile,readFully(byte[] b),void,"Reads b.length bytes from this file into the byte array, starting at the current file pointer."
RandomAccessFile,"readFully(byte[] b, int off, int len)",void,"Reads exactly len bytes from this file into the byte array, starting at the current file pointer."
RandomAccessFile,readInt(),int,Reads a signed 32-bit integer from this file.
RandomAccessFile,readLine(),String,Reads the next line of text from this file.
RandomAccessFile,readLong(),long,Reads a signed 64-bit integer from this file.
RandomAccessFile,readShort(),short,Reads a signed 16-bit number from this file.
RandomAccessFile,readUnsignedByte(),int,Reads an unsigned eight-bit number from this file.
RandomAccessFile,readUnsignedShort(),int,Reads an unsigned 16-bit number from this file.
RandomAccessFile,readUTF(),String,Reads in a string from this file.
RandomAccessFile,seek(long pos),void,"Sets the file-pointer offset, measured from the beginning of this file, at which the next read or write occurs."
RandomAccessFile,setLength(long newLength),void,Sets the length of this file.
RandomAccessFile,skipBytes(int n),int,Attempts to skip over n bytes of input discarding the skipped bytes.
RandomAccessFile,write(byte[] b),void,"Writes b.length bytes from the specified byte array to this file, starting at the current file pointer."
RandomAccessFile,"write(byte[] b, int off, int len)",void,Writes len bytes from the specified byte array starting at offset off to this file.
RandomAccessFile,write(int b),void,Writes the specified byte to this file.
RandomAccessFile,writeBoolean(boolean v),void,Writes a boolean to the file as a one-byte value.
RandomAccessFile,writeByte(int v),void,Writes a byte to the file as a one-byte value.
RandomAccessFile,writeBytes(String s),void,Writes the string to the file as a sequence of bytes.
RandomAccessFile,writeChar(int v),void,"Writes a char to the file as a two-byte value, high byte first."
RandomAccessFile,writeChars(String s),void,Writes a string to the file as a sequence of characters.
RandomAccessFile,writeDouble(double v),void,"Converts the double argument to a long using the doubleToLongBits method in class Double, and then writes that long value to the file as an eight-byte quantity, high byte first."
RandomAccessFile,writeFloat(float v),void,"Converts the float argument to an int using the floatToIntBits method in class Float, and then writes that int value to the file as a four-byte quantity, high byte first."
RandomAccessFile,writeInt(int v),void,"Writes an int to the file as four bytes, high byte first."
RandomAccessFile,writeLong(long v),void,"Writes a long to the file as eight bytes, high byte first."
RandomAccessFile,writeShort(int v),void,"Writes a short to the file as two bytes, high byte first."
RandomAccessFile,writeUTF(String str),void,Writes a string to the file using modified UTF-8 encoding in a machine-independent manner.
Reader,close(),abstract void,Closes the stream and releases any system resources associated with it.
Reader,mark(int readAheadLimit),void,Marks the present position in the stream.
Reader,markSupported(),boolean,Tells whether this stream supports the mark() operation.
Reader,read(),int,Reads a single character.
Reader,read(char[] cbuf),int,Reads characters into an array.
Reader,"read(char[] cbuf, int off, int len)",abstract int,Reads characters into a portion of an array.
Reader,read(CharBuffer target),int,Attempts to read characters into the specified character buffer.
Reader,ready(),boolean,Tells whether this stream is ready to be read.
Reader,reset(),void,Resets the stream.
Reader,skip(long n),long,Skips characters.
SequenceInputStream,available(),int,Returns an estimate of the number of bytes that can be read (or skipped over) from the current underlying input stream without blocking by the next invocation of a method for the current underlying input stream.
SequenceInputStream,close(),void,Closes this input stream and releases any system resources associated with the stream.
SequenceInputStream,read(),int,Reads the next byte of data from this input stream.
SequenceInputStream,"read(byte[] b, int off, int len)",int,Reads up to len bytes of data from this input stream into an array of bytes.
StreamTokenizer,commentChar(int ch),void,Specified that the character argument starts a single-line comment.
StreamTokenizer,eolIsSignificant(boolean flag),void,Determines whether or not ends of line are treated as tokens.
StreamTokenizer,lineno(),int,Return the current line number.
StreamTokenizer,lowerCaseMode(boolean fl),void,Determines whether or not word token are automatically lowercased.
StreamTokenizer,nextToken(),int,Parses the next token from the input stream of this tokenizer.
StreamTokenizer,ordinaryChar(int ch),void,"Specifies that the character argument is ""ordinary"" in this tokenizer."
StreamTokenizer,"ordinaryChars(int low, int hi)",void,"Specifies that all characters c in the range low <= c <= high are ""ordinary"" in this tokenizer."
StreamTokenizer,parseNumbers(),void,Specifies that numbers should be parsed by this tokenizer.
StreamTokenizer,pushBack(),void,"Causes the next call to the nextToken method of this tokenizer to return the current value in the ttype field, and not to modify the value in the nval or sval field."
StreamTokenizer,quoteChar(int ch),void,Specifies that matching pairs of this character delimit string constants in this tokenizer.
StreamTokenizer,resetSyntax(),void,"Resets this tokenizer's syntax table so that all characters are ""ordinary."" See the ordinaryChar method for more information on a character being ordinary."
StreamTokenizer,slashSlashComments(boolean flag),void,Determines whether or not the tokenizer recognizes C++-style comments.
StreamTokenizer,slashStarComments(boolean flag),void,Determines whether or not the tokenizer recognizes C-style comments.
StreamTokenizer,toString(),String,Returns the string representation of the current stream token and the line number it occurs on.
StreamTokenizer,"whitespaceChars(int low, int hi)",void,Specifies that all characters c in the range low <= c <= high are white space characters.
StreamTokenizer,"wordChars(int low, int hi)",void,Specifies that all characters c in the range low <= c <= high are word constituents.
StringBufferInputStream,available(),int,Deprecated.
StringBufferInputStream,read(),int,Deprecated.
StringBufferInputStream,"read(byte[] b, int off, int len)",int,Deprecated.
StringBufferInputStream,reset(),void,Deprecated.
StringBufferInputStream,skip(long n),long,Deprecated.
StringReader,close(),void,Closes the stream and releases any system resources associated with it.
StringReader,mark(int readAheadLimit),void,Marks the present position in the stream.
StringReader,markSupported(),boolean,"Tells whether this stream supports the mark() operation, which it does."
StringReader,read(),int,Reads a single character.
StringReader,"read(char[] cbuf, int off, int len)",int,Reads characters into a portion of an array.
StringReader,ready(),boolean,Tells whether this stream is ready to be read.
StringReader,reset(),void,"Resets the stream to the most recent mark, or to the beginning of the string if it has never been marked."
StringReader,skip(long ns),long,Skips the specified number of characters in the stream.
StringWriter,append(char c),StringWriter,Appends the specified character to this writer.
StringWriter,append(CharSequence csq),StringWriter,Appends the specified character sequence to this writer.
StringWriter,"append(CharSequence csq, int start, int end)",StringWriter,Appends a subsequence of the specified character sequence to this writer.
StringWriter,close(),void,Closing a StringWriter has no effect.
StringWriter,flush(),void,Flush the stream.
StringWriter,getBuffer(),StringBuffer,Return the string buffer itself.
StringWriter,toString(),String,Return the buffer's current value as a string.
StringWriter,"write(char[] cbuf, int off, int len)",void,Write a portion of an array of characters.
StringWriter,write(int c),void,Write a single character.
StringWriter,write(String str),void,Write a string.
StringWriter,"write(String str, int off, int len)",void,Write a portion of a string.
Writer,append(char c),Writer,Appends the specified character to this writer.
Writer,append(CharSequence csq),Writer,Appends the specified character sequence to this writer.
Writer,"append(CharSequence csq, int start, int end)",Writer,Appends a subsequence of the specified character sequence to this writer.
Writer,close(),abstract void,"Closes the stream, flushing it first."
Writer,flush(),abstract void,Flushes the stream.
Writer,write(char[] cbuf),void,Writes an array of characters.
Writer,"write(char[] cbuf, int off, int len)",abstract void,Writes a portion of an array of characters.
Writer,write(int c),void,Writes a single character.
Writer,write(String str),void,Writes a string.
Writer,"write(String str, int off, int len)",void,Writes a portion of a string.
