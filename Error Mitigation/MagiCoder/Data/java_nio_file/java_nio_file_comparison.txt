Sample: 0 Files
----------------------------------------------------------------

@@ Context
Here is the description of the package Defines interfaces and classes for the Java virtual machine to access files, file attributes, and file systems.
Here is the description of the class This class consists exclusively of static methods that operate on files, directories, or other types of files.

@@ Instruction
I want to use java.nio.file.Files package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `Path createDirectory(Path dir, FileAttribute<?>... attrs)`: This method creates a directory.
2. `Path createFile(Path path, FileAttribute<?>... attrs)`: This method creates a new file.
3. `Path copy(Path source, Path target, CopyOption... options)`: This method copies a file to another file.
4. `Path move(Path source, Path target, CopyOption... options)`: This method moves a file to another file.
5. `boolean delete(Path path)`: This method deletes a file.
6. `boolean exists(Path path, LinkOption... options)`: This method checks if a file exists.
7. `boolean isDirectory(Path path, LinkOption... options)`: This method checks if a path is a directory.
8. `boolean isRegularFile(Path path, LinkOption... options)`: This method checks if a path is a regular file.
9. `boolean isSymbolicLink(Path path)`: This method checks if a path is a symbolic link.
10. `boolean isHidden(Path path)`: This method checks if a file is hidden.
11. `FileTime getLastModifiedTime(Path path, LinkOption... options)`: This method gets the last modified time of a file.
12. `FileTime getLastAccessTime(Path path, LinkOption... options)`: This method gets the last access time of a file.
13. `FileTime getCreationTime(Path path, LinkOption... options)`: This method gets the creation time of a file.
14. `FileAttributeView readAttributes(Path path, Class<? extends FileAttributeView> type, LinkOption... options)`: This method reads the attributes of a file.
15. `void setAttribute(Path path, String attribute, Object value, LinkOption... options)`: This method sets the attribute of a file.
16. `Object getAttribute(Path path, String attribute, LinkOption... options)`: This method gets the attribute of a file.
17. `Stream<Path> walk(Path start, FileVisitOption... options)`: This method walks a file tree.
18. `Stream<Path> find(Path start, int maxDepth, BiPredicate<? super Path,BasicFileAttributes> matcher, FileVisitOption... options)`: This method finds files in a directory tree.
19. `Path getPath(URI uri)`: This method gets the path of a URI.
20. `URI toUri(Path path)`: This method gets the URI of a path.
21. `Path getTempDirectory()`: This method gets the temporary directory.
22. `Path createTempFile(String prefix, String suffix, FileAttribute<?>... attrs)`: This method creates a temporary file.
23. `Path createTempDirectory(String prefix, FileAttribute<?>... attrs)`: This method creates a temporary directory.
24. `Path createLink(Path existing, Path link)`: This method creates a symbolic link.
25. `Path readSymbolicLink(Path link)`: This method reads the symbolic link.
26. `Path resolve(Path path, String first, String... more)`: This method resolves a path.
27. `Path relativize(Path path, Path relativeTo)`: This method relativizes a path.
28. `Path normalize(Path path)`: This method normalizes a path.
29. `Path toRealPath(Path path, LinkOption... options)`: This method gets the real path of a path.
30. `Path toAbsolutePath(Path path)`: This method gets the absolute path of a path.
31. `Path toUri(Path path)`: This method gets the URI of a path.
32. `Path toRealPath(Path path, LinkOption... options)`: This method gets the real path of a path.
33. `Path toAbsolutePath(Path path)`: This method gets the absolute path of a path.
34. `Path toUri(Path path)`: This method gets the URI of a path.
35. `Path toRealPath(Path path, LinkOption... options)`: This method gets the real path of a path.
36. `Path toAbsolutePath(Path path)`: This method gets the absolute path of a path.
37. `Path toUri(Path path)`: This method gets the URI of a path.
38. `Path toRealPath(Path path, LinkOption... options)`: This method gets the real path of a path.
39. `Path toAbsolutePath(Path path)`: This method gets the absolute path of a path.
40. `Path toUri(Path path)`: This method gets the URI of a path.
41. `Path toRealPath(Path path, LinkOption... options)`: This method gets the real path of a path.
42. `Path toAbsolutePath(Path path)`: This method gets the absolute path of a path.
43. `Path toUri(Path path)`: This method gets the URI of a path.
44. `Path toRealPath(Path path, LinkOption... options)`: This method gets the real path of a path.
45. `Path toAbsolutePath(Path path)`: This method gets the absolute path of a path.
46. `Path toUri(Path path)`: This method gets the URI of a path.
47. `Path toRealPath(Path path, LinkOption... options)`: This method gets the real path of a path.
48. `Path toAbsolutePath(Path path)`: This method gets the absolute path of a path.
49. `Path toUri(Path path)`: This method gets the URI of a path.
50. `Path toRealPath(Path path, LinkOption... options)`: This method gets the real path of a path.
51. `Path toAbsolutePath(Path path)`: This method gets the absolute path of a path.
52. `Path toUri(Path path)`: This method gets the URI of a path.
53. `Path toRealPath(Path path, LinkOption... options)`: This method gets the real path of a path.
54. `Path toAbsolutePath(Path path)`: This method gets the absolute path of a path.
55. `Path toUri(Path path)`: This method gets the URI of a path.
56. `Path toRealPath(Path path, LinkOption... options)`: This method gets the real path of a path.
57. `Path toAbsolutePath(Path path)`: This method gets the absolute path of a path.
58. `Path toUri(Path path)`: This method gets the URI of a path.
59. `Path toRealPath(Path path, LinkOption... options)`: This method gets the real path of a path.
60. `Path toAbsolutePath(Path path)`: This method gets the absolute path of a path.
61. `Path toUri(Path path)`: This method gets the URI of a path.
62. `Path toRealPath(Path path, LinkOption... options)`: This method gets the real path of a path.
63. `Path toAbsolutePath(Path path)`: This method gets the absolute path of a path.
64. `Path toUri(Path path)`: This method gets the URI of a path.
65. `Path toRealPath(Path path, LinkOption... options)`: This method gets the real path of a path.
66. `Path toAbsolutePath(Path path)`: This method gets the absolute path of a path.
67. `Path toUri(Path path)`: This method gets the URI of a
================================================================

Sample: 1 FileStore
----------------------------------------------------------------

@@ Context
Here is the description of the package Defines interfaces and classes for the Java virtual machine to access files, file attributes, and file systems.
Here is the description of the class Storage for files.

@@ Instruction
I want to use java.nio.file.FileStore package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `long getTotalSpace()`: This method returns the total size, in bytes, of the file system.
2. `long getUsableSpace()`: This method returns the remaining space, in bytes, that can be directly allocated for use by applications.
3. `long getUnallocatedSpace()`: This method returns the amount of space, in bytes, that is not allocated to any file.
4. `boolean isReadOnly()`: This method returns true if the file system is read-only.
5. `String name()`: This method returns the name of the file system.
================================================================

Sample: 2 FileSystem
----------------------------------------------------------------

@@ Context
Here is the description of the package Defines interfaces and classes for the Java virtual machine to access files, file attributes, and file systems.
Here is the description of the class Provides an interface to a file system and is the factory for objects to access files and other objects in the file system.

@@ Instruction
I want to use java.nio.file.FileSystem package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `FileSystem getFileSystem()`: This method returns the file system that this file system provider is associated with.

2. `Path getPath(String first, String... more)`: This method returns a Path instance that represents a path to a file or directory.

3. `FileStore getFileStore(Path path)`: This method returns the FileStore object for the file system that contains the given path.

4. `Iterable<Path> getRootDirectories()`: This method returns an iterable of the root directories of the file system.

5. `Map<String, String> readAttributes(Path path, String... attributes)`: This method reads the specified attributes of the file or directory at the given path.
================================================================

Sample: 3 FileSystems
----------------------------------------------------------------

@@ Context
Here is the description of the package Defines interfaces and classes for the Java virtual machine to access files, file attributes, and file systems.
Here is the description of the class Factory methods for file systems.

@@ Instruction
I want to use java.nio.file.FileSystems package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `FileSystem getFileSystem()`: This method returns the file system for the default file system.
2. `FileSystemProvider getFileSystemProvider()`: This method returns the provider of the file system.
3. `PathMatcher newPathMatcher(String syntaxAndPattern)`: This method creates a new path matcher for the specified syntax and pattern.
4. `FileSystem newFileSystem(URI uri, Map<String,?> env)`: This method creates a new file system for the specified URI.
5. `FileSystem newFileSystem(URI uri, Map<String,?> env, ClassLoader loader)`: This method creates a new file system for the specified URI with the specified class loader.
================================================================

Sample: 4 LinkPermission
----------------------------------------------------------------

@@ Context
Here is the description of the package Defines interfaces and classes for the Java virtual machine to access files, file attributes, and file systems.
Here is the description of the class The Permission class for link creation operations.

@@ Instruction
I want to use java.nio.file.LinkPermission package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public boolean implies(Permission p)`: Tests if this permission implies the specified permission.
2. `public boolean equals(Object obj)`: Compares this object against the specified object.
3. `public int hashCode()`: Returns a hash code for this object.
4. `public String getActions()`: Returns the actions of this permission.
5. `public String toString()`: Returns a string representation of this permission.
================================================================

Sample: 5 Paths
----------------------------------------------------------------

@@ Context
Here is the description of the package Defines interfaces and classes for the Java virtual machine to access files, file attributes, and file systems.
Here is the description of the class This class consists exclusively of static methods that return a Path by converting a path string or URI.

@@ Instruction
I want to use java.nio.file.Paths package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `Paths.get(String first, String... more)`: This method returns a Path object by converting a path string or URI.
2. `Paths.get(URI uri)`: This method returns a Path object by converting a URI.
3. `Paths.get(File file)`: This method returns a Path object by converting a File object.
4. `Paths.get(URI uri, String... more)`: This method returns a Path object by converting a URI and additional strings.
5. `Paths.get(String first, String... more)`: This method returns a Path object by converting a path string and additional strings.
================================================================

Sample: 6 SimpleFileVisitor
----------------------------------------------------------------

@@ Context
Here is the description of the package Defines interfaces and classes for the Java virtual machine to access files, file attributes, and file systems.
Here is the description of the class A simple visitor of files with default behavior to visit all files and to re-throw I/O errors.

@@ Instruction
I want to use java.nio.file.SimpleFileVisitor package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `FileVisitResult visitFile(Path file, BasicFileAttributes attrs)`: This method is invoked for a file in a directory.
2. `FileVisitResult visitFileFailed(Path file, IOException exc)`: This method is invoked when an I/O error occurs.
3. `FileVisitResult postVisitDirectory(Path dir, IOException exc)`: This method is invoked after visiting a directory.
4. `FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs)`: This method is invoked before visiting a directory.
5. `FileVisitResult visitFile(Path file, ReadOnlyFileAttributeView attrs)`: This method is invoked for a file in a directory.
================================================================

Sample: 7 StandardWatchEventKinds
----------------------------------------------------------------

@@ Context
Here is the description of the package Defines interfaces and classes for the Java virtual machine to access files, file attributes, and file systems.
Here is the description of the class Defines the standard event kinds.

@@ Instruction
I want to use java.nio.file.StandardWatchEventKinds package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `StandardWatchEventKinds.ENTRY_CREATE`: This method returns a new instance of `StandardWatchEventKinds` that represents a file creation event.

2. `StandardWatchEventKinds.ENTRY_DELETE`: This method returns a new instance of `StandardWatchEventKinds` that represents a file deletion event.

3. `StandardWatchEventKinds.ENTRY_MODIFY`: This method returns a new instance of `StandardWatchEventKinds` that represents a file modification event.

4. `StandardWatchEventKinds.OVERFLOW`: This method returns a new instance of `StandardWatchEventKinds` that represents an overflow event.

5. `StandardWatchEventKinds.ENTRY_MODIFY`: This method returns a new instance of `StandardWatchEventKinds` that represents a file attribute modification event.
================================================================

