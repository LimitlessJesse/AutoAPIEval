Sample: 0 DiagnosticCollector
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces for tools which can be invoked from a program, for example, compilers.
Here is the description of the class Provides an easy way to collect diagnostics in a list.

@@ Instruction
I want to use javax.tools.DiagnosticCollector package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean add(E e)`: This method appends the specified element to the end of this list.
2. `void clear()`: This method removes all of the elements from this list.
3. `boolean contains(Object o)`: This method returns true if this list contains the specified element.
4. `boolean isEmpty()`: This method returns true if this list contains no elements.
5. `int size()`: This method returns the number of elements in this list.
================================================================

Sample: 1 ForwardingFileObject
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces for tools which can be invoked from a program, for example, compilers.
Here is the description of the class Forwards calls to a given file object.

@@ Instruction
I want to use javax.tools.ForwardingFileObject package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public boolean isOpen()`: This method returns true if this file object is open.
2. `public OutputStream openOutputStream()`: This method opens an output stream to write to this file object.
3. `public Reader openReader(boolean ignoreEncodingErrors)`: This method opens a reader to read from this file object.
4. `public Writer openWriter()`: This method opens a writer to write to this file object.
5. `public URI toUri()`: This method returns the URI for this file object.
================================================================

Sample: 2 ForwardingJavaFileManager
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces for tools which can be invoked from a program, for example, compilers.
Here is the description of the class Forwards calls to a given file manager.

@@ Instruction
I want to use javax.tools.ForwardingJavaFileManager package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `getJavaFileForInput(Location location, String className, JavaFileObject.Kind kind)`: This method returns a JavaFileObject for reading the specified file.

2. `getJavaFileForOutput(Location location, String className, JavaFileObject.Kind kind, FileObject sibling)`: This method returns a JavaFileObject for writing the specified file.

3. `getLocation(Location location)`: This method returns the location of the specified file.

4. `getLocation(FileObject file)`: This method returns the location of the specified file object.

5. `getLocation(Location location, String packageName)`: This method returns the location of the specified package.
================================================================

Sample: 3 ForwardingJavaFileObject
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces for tools which can be invoked from a program, for example, compilers.
Here is the description of the class Forwards calls to a given file object.

@@ Instruction
I want to use javax.tools.ForwardingJavaFileObject package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public boolean isNameCompatible(String simpleName, Kind kind)`: This method checks if the given name is compatible with the kind of this file object.

2. `public Kind getKind()`: This method returns the kind of this file object.

3. `public String getName()`: This method returns the name of this file object.

4. `public InputStream openInputStream()`: This method opens an input stream to read the content of this file object.

5. `public OutputStream openOutputStream()`: This method opens an output stream to write to the content of this file object.

6. `public Reader openReader(boolean ignoreEncodingErrors)`: This method opens a reader to read the content of this file object.

7. `public CharSequence getCharContent(boolean ignoreEncodingErrors)`: This method returns the content of this file object as a CharSequence.

8. `public Writer openWriter()`: This method opens a writer to write to the content of this file object.

9. `public OutputStream openOutputStream()`: This method opens an output stream to write to the content of this file object.

10. `public URI toUri()`: This method returns the URI of this file object.
================================================================

Sample: 4 SimpleJavaFileObject
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces for tools which can be invoked from a program, for example, compilers.
Here is the description of the class Provides simple implementations for most methods in JavaFileObject.

@@ Instruction
I want to use javax.tools.SimpleJavaFileObject package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public boolean isNameCompatible(String simpleName, Kind kind)`: This method checks if the given name is compatible with the given kind.

2. `public Kind getKind()`: This method returns the kind of this file object.

3. `public String getName()`: This method returns the name of this file object.

4. `public CharSequence getCharContent(boolean ignoreEncodingErrors)`: This method returns the content of this file object as a CharSequence.

5. `public OutputStream openOutputStream()`: This method opens an output stream to write to this file object.
================================================================

Sample: 5 ToolProvider
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces for tools which can be invoked from a program, for example, compilers.
Here is the description of the class Provides methods for locating tool providers, for example, providers of compilers.

@@ Instruction
I want to use javax.tools.ToolProvider package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `ToolProvider.getSystemTool(String name)`: This method returns a Tool object for the named tool.

2. `ToolProvider.getSystemJavaCompiler()`: This method returns a JavaCompiler object for the system Java compiler.

3. `ToolProvider.getSystemJavaFileManager(JavaFileManager.Location location, String... options)`: This method returns a JavaFileManager object for the system Java compiler.

4. `ToolProvider.getSystemJavaFileObject(URI uri, JavaFileManager.Location location)`: This method returns a JavaFileObject for the specified URI.

5. `ToolProvider.getSystemJavaFileObjects(Iterable<? extends CharSequence> sources, JavaFileManager.Location location)`: This method returns a collection of JavaFileObjects for the specified sources.
================================================================

