Sample: 0 IIOMetadata
----------------------------------------------------------------

@@ Context
Here is the description of the package A package of the Java Image I/O API dealing with reading and writingmetadata.
Here is the description of the class An abstract class to be extended by objects that represent metadata (non-image data) associated with images and streams.

@@ Instruction
I want to use javax.imageio.metadata.IIOMetadata package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `IIOMetadata.getNativeMetadataFormatName()`: This method returns the name of the native metadata format.

2. `IIOMetadata.getAsTree(String key)`: This method returns the metadata value as a tree.

3. `IIOMetadata.getAsDirectory(String key)`: This method returns the metadata value as a directory.

4. `IIOMetadata.getAsString(String key)`: This method returns the metadata value as a string.

5. `IIOMetadata.getAsLong(String key)`: This method returns the metadata value as a long integer.

6. `IIOMetadata.getAsRational(String key)`: This method returns the metadata value as a rational number.

7. `IIOMetadata.getAsIntArray(String key)`: This method returns the metadata value as an array of integers.

8. `IIOMetadata.getAsDirectory(String key)`: This method returns the metadata value as a directory.

9. `IIOMetadata.getAsString(String key)`: This method returns the metadata value as a string.

10. `IIOMetadata.getAsLong(String key)`: This method returns the metadata value as a long integer.

11. `IIOMetadata.getAsRational(String key)`: This method returns the metadata value as a rational number.

12. `IIOMetadata.getAsIntArray(String key)`: This method returns the metadata value as an array of integers.

13. `IIOMetadata.getAsDirectory(String key)`: This method returns the metadata value as a directory.

14. `IIOMetadata.getAsString(String key)`: This method returns the metadata value as a string.

15. `IIOMetadata.getAsLong(String key)`: This method returns the metadata value as a long integer.

16. `IIOMetadata.getAsRational(String key)`: This method returns the metadata value as a rational number.

17. `IIOMetadata.getAsIntArray(String key)`: This method returns the metadata value as an array of integers.

18. `IIOMetadata.getAsDirectory(String key)`: This method returns the metadata value as a directory.

19. `IIOMetadata.getAsString(String key)`: This method returns the metadata value as a string.

20. `IIOMetadata.getAsLong(String key)`: This method returns the metadata value as a long integer.

21. `IIOMetadata.getAsRational(String key)`: This method returns the metadata value as a rational number.

22. `IIOMetadata.getAsIntArray(String key)`: This method returns the metadata value as an array of integers.

23. `IIOMetadata.getAsDirectory(String key)`: This method returns the metadata value as a directory.

24. `IIOMetadata.getAsString(String key)`: This method returns the metadata value as a string.

25. `IIOMetadata.getAsLong(String key)`: This method returns the metadata value as a long integer.

26. `IIOMetadata.getAsRational(String key)`: This method returns the metadata value as a rational number.

27. `IIOMetadata.getAsIntArray(String key)`: This method returns the metadata value as an array of integers.

28. `IIOMetadata.getAsDirectory(String key)`: This method returns the metadata value as a directory.

29. `IIOMetadata.getAsString(String key)`: This method returns the metadata value as a string.

30. `IIOMetadata.getAsLong(String key)`: This method returns the metadata value as a long integer.

31. `IIOMetadata.getAsRational(String key)`: This method returns the metadata value as a rational number.

32. `IIOMetadata.getAsIntArray(String key)`: This method returns the metadata value as an array of integers.

33. `IIOMetadata.getAsDirectory(String key)`: This method returns the metadata value as a directory.

34. `IIOMetadata.getAsString(String key)`: This method returns the metadata value as a string.

35. `IIOMetadata.getAsLong(String key)`: This method returns the metadata value as a long integer.

36. `IIOMetadata.getAsRational(String key)`: This method returns the metadata value as a rational number.

37. `IIOMetadata.getAsIntArray(String key)`: This method returns the metadata value as an array of integers.

38. `IIOMetadata.getAsDirectory(String key)`: This method returns the metadata value as a directory.

39. `IIOMetadata.getAsString(String key)`: This method returns the metadata value as a string.

40. `IIOMetadata.getAsLong(String key)`: This method returns the metadata value as a long integer.

41. `IIOMetadata.getAsRational(String key)`: This method returns the metadata value as a rational number.

42. `IIOMetadata.getAsIntArray(String key)`: This method returns the metadata value as an array of integers.

43. `IIOMetadata.getAsDirectory(String key)`: This method returns the metadata value as a directory.

44. `IIOMetadata.getAsString(String key)`: This method returns the metadata value as a string.

45. `IIOMetadata.getAsLong(String key)`: This method returns the metadata value as a long integer.

46. `IIOMetadata.getAsRational(String key)`: This method returns the metadata value as a rational number.

47. `IIOMetadata.getAsIntArray(String key)`: This method returns the metadata value as an array of integers.

48. `IIOMetadata.getAsDirectory(String key)`: This method returns the metadata value as a directory.

49. `IIOMetadata.getAsString(String key)`: This method returns the metadata value as a string.

50. `IIOMetadata.getAsLong(String key)`: This method returns the metadata value as a long integer.

51. `IIOMetadata.getAsRational(String key)`: This method returns the metadata value as a rational number.

52. `IIOMetadata.getAsIntArray(String key)`: This method returns the metadata value as an array of integers.

53. `IIOMetadata.getAsDirectory(String key)`: This method returns the metadata value as a directory.

54. `IIOMetadata.getAsString(String key)`: This method returns the metadata value as a string.

55. `IIOMetadata.getAsLong(String key)`: This method returns the metadata value as a long integer.

56. `IIOMetadata.getAsRational(String key)`: This method returns the metadata value as a rational number.

57. `IIOMetadata.getAsIntArray(String key)`: This method returns the metadata value as an array of integers.

58. `IIOMetadata.getAsDirectory(String key)`: This method returns the metadata value as a directory.

59. `IIOMetadata.getAsString(String key)`: This method returns the metadata value as a string.
================================================================

Sample: 1 IIOMetadataFormatImpl
----------------------------------------------------------------

@@ Context
Here is the description of the package A package of the Java Image I/O API dealing with reading and writingmetadata.
Here is the description of the class A concrete class providing a reusable implementation of the IIOMetadataFormat interface.

@@ Instruction
I want to use javax.imageio.metadata.IIOMetadataFormatImpl package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean canNodeAppear(String elementName, String attributeName)`: This method checks if a node can appear in the metadata format.
2. `boolean canNodeBeValue(String elementName, String attributeName)`: This method checks if a node can have a value.
3. `boolean canNodeContainText(String elementName, String attributeName)`: This method checks if a node can contain text.
4. `boolean canNodeHaveAttribute(String elementName, String attributeName)`: This method checks if a node can have an attribute.
5. `boolean canNodeHaveChildren(String elementName, String attributeName)`: This method checks if a node can have children.
6. `boolean canNodeHaveValue(String elementName, String attributeName)`: This method checks if a node can have a value.
7. `boolean canNodeHaveText(String elementName, String attributeName)`: This method checks if a node can have text.
8. `boolean canNodeHaveType(String elementName, String attributeName)`: This method checks if a node can have a type.
9. `boolean canNodeHaveName(String elementName, String attributeName)`: This method checks if a node can have a name.
10. `boolean canNodeHaveNamespace(String elementName, String attributeName)`: This method checks if a node can have a namespace.
11. `boolean canNodeHaveParent(String elementName, String attributeName)`: This method checks if a node can have a parent.
12. `boolean canNodeHaveSiblings(String elementName, String attributeName)`: This method checks if a node can have siblings.
13. `boolean canNodeHaveChildren(String elementName, String attributeName)`: This method checks if a node can have children.
14. `boolean canNodeHaveSiblings(String elementName, String attributeName)`: This method checks if a node can have siblings.
15. `boolean canNodeHaveParent(String elementName, String attributeName)`: This method checks if a node can have a parent.
16. `boolean canNodeHaveType(String elementName, String attributeName)`: This method checks if a node can have a type.
17. `boolean canNodeHaveName(String elementName, String attributeName)`: This method checks if a node can have a name.
18. `boolean canNodeHaveNamespace(String elementName, String attributeName)`: This method checks if a node can have a namespace.
19. `boolean canNodeHaveValue(String elementName, String attributeName)`: This method checks if a node can have a value.
20. `boolean canNodeHaveText(String elementName, String attributeName)`: This method checks if a node can have text.
================================================================

Sample: 2 IIOMetadataNode
----------------------------------------------------------------

@@ Context
Here is the description of the package A package of the Java Image I/O API dealing with reading and writingmetadata.
Here is the description of the class A class representing a node in a meta-data tree, which implements the org.w3c.dom.Element interface and additionally allows for the storage of non-textual objects via the getUserObject and setUserObject methods.

@@ Instruction
I want to use javax.imageio.metadata.IIOMetadataNode package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `IIOMetadataNode(String name)`: This constructor creates a new IIOMetadataNode with the specified name.
2. `String getName()`: This method returns the name of this node.
3. `String getValue()`: This method returns the value of this node.
4. `void setValue(String value)`: This method sets the value of this node.
5. `void setUserObject(Object userObject)`: This method sets the user object for this node.
6. `Object getUserObject()`: This method returns the user object for this node.
7. `void setAttribute(String name, String value)`: This method sets the attribute of this node.
8. `String getAttribute(String name)`: This method returns the attribute of this node.
9. `void setAttributeNS(String namespaceURI, String qualifiedName, String value)`: This method sets the attribute of this node in the specified namespace.
10. `String getAttributeNS(String namespaceURI, String localName)`: This method returns the attribute of this node in the specified namespace.
11. `void setTextContent(String textContent)`: This method sets the text content of this node.
12. `String getTextContent()`: This method returns the text content of this node.
13. `void setNodeValue(String nodeValue)`: This method sets the node value of this node.
14. `String getNodeValue()`: This method returns the node value of this node.
15. `void setNodeType(short nodeType)`: This method sets the node type of this node.
16. `short getNodeType()`: This method returns the node type of this node.
17. `void setParentNode(Node parentNode)`: This method sets the parent node of this node.
18. `Node getParentNode()`: This method returns the parent node of this node.
19. `NodeList getChildNodes()`: This method returns a NodeList of all children of this node.
20. `Node getFirstChild()`: This method returns the first child of this node.
21. `Node getLastChild()`: This method returns the last child of this node.
22. `Node getPreviousSibling()`: This method returns the previous sibling of this node.
23. `Node getNextSibling()`: This method returns the next sibling of this node.
24. `Node insertBefore(Node newChild, Node refChild)`: This method inserts a new child before the reference child.
25. `Node insertAfter(Node newChild, Node refChild)`: This method inserts a new child after the reference child.
26. `Node replaceChild(Node newChild, Node oldChild)`: This method replaces an old child with a new child.
27. `Node removeChild(Node oldChild)`: This method removes an old child.
28. `Node cloneNode(boolean deep)`: This method clones this node.
29. `boolean hasAttributes()`: This method returns true if this node has attributes.
30. `NamedNodeMap getAttributes()`: This method returns a NamedNodeMap of all attributes of this node.
31. `Node getOwnerDocument()`: This method returns the owner document of this node.
32. `String getNamespaceURI()`: This method returns the namespace URI of this node.
33. `String getPrefix()`: This method returns the prefix of this node.
34. `String getLocalName()`: This method returns the local name of this node.
35. `String getBaseURI()`: This method returns the base URI of this node.
36. `boolean isSupported(String feature, String version)`: This method returns true if this node supports the specified feature and version.
37. `Object getFeature(String feature, String version)`: This method returns the feature of this node.
38. `Object setUserData(String key, Object data, UserDataHandler handler)`: This method sets the user data of this node.
39. `Object getUserData(String key)`: This method returns the user data of this node.
40. `void setNodeName(String name)`: This method sets the node name of this node.
41. `String getNodeName()`: This method returns the node name of this node.
42. `void setNodeType(short type)`: This method sets the node type of this node.
43. `short getNodeType()`: This method returns the node type of this node.
44. `void setNodeValue(String value)`: This method sets the node value of this node.
45. `String getNodeValue()`: This method returns the node value of this node.
46. `void setParentNode(Node parent)`: This method sets the parent node of this node.
47. `Node getParentNode()`: This method returns the parent node of this node.
48. `NodeList getChildNodes()`: This method returns a NodeList of all children of this node.
49. `Node getFirstChild()`: This method returns the first child of this node.
50. `Node getLastChild()`: This method returns the last child of this node.
51. `Node getPreviousSibling()`: This method returns the previous sibling of this node.
52. `Node getNextSibling()`: This method returns the next sibling of this node.
53. `Node insertBefore(Node newChild, Node refChild)`: This method inserts a new child before the reference child.
54. `Node insertAfter(Node newChild, Node refChild)`: This method inserts a new child after the reference child.
55. `Node replaceChild(Node newChild, Node oldChild)`: This method replaces an old child with a new child.
56. `Node removeChild(Node oldChild)`: This method removes an old child.
57. `Node cloneNode(boolean deep)`: This method clones this node.
58. `boolean hasAttributes()`: This method returns true if this node has attributes.
59. `NamedNodeMap getAttributes()`: This method returns a NamedNodeMap of all attributes of this node.
60. `Node getOwnerDocument()`: This method returns the owner document of this node.
61. `String getNamespaceURI()`: This method returns the namespace URI of this node.
62. `String getPrefix()`: This method returns the prefix of this node.
63. `String getLocalName()`: This method returns the local name of this node.
64. `String getBaseURI()`: This method returns the base URI of this node.
65. `boolean isSupported(String feature, String version)`: This method returns true if this node supports the specified feature and version.
66. `Object getFeature(String feature, String version)`: This method returns the feature of this node.
67. `Object setUserData(String key, Object data, UserDataHandler handler)`: This method sets the user data of this node.
68. `Object getUserData(String key)`: This method returns the user data of this node.
69. `void setNodeName(String name)`: This method sets the node name of this node.
70. `String getNodeName()`: This method returns the node name of this node.
71. `void setNodeType(short type)`: This method sets the node type of this node.
72. `short getNodeType()`: This method returns the node type of this node.
73. `void setNodeValue(String value)`: This method
================================================================

