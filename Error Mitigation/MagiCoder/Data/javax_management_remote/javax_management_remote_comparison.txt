Sample: 0 JMXConnectionNotification
----------------------------------------------------------------

@@ Context
Here is the description of the package Interfaces for remote access to JMX MBean servers.
Here is the description of the class Notification emitted when a client connection is opened or closed or when notifications are lost.

@@ Instruction
I want to use javax.management.remote.JMXConnectionNotification package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `void setConnectionId(String connectionId)`: This method sets the connection id.
2. `String getConnectionId()`: This method returns the connection id.
3. `void setConnectionTimeout(long timeout)`: This method sets the connection timeout.
4. `long getConnectionTimeout()`: This method returns the connection timeout.
5. `void setNotificationFilter(NotificationFilter filter)`: This method sets the notification filter.
6. `NotificationFilter getNotificationFilter()`: This method returns the notification filter.
7. `void setNotificationBroadcaster(NotificationBroadcaster broadcaster)`: This method sets the notification broadcaster.
8. `NotificationBroadcaster getNotificationBroadcaster()`: This method returns the notification broadcaster.
9. `void setNotificationSink(NotificationSink sink)`: This method sets the notification sink.
10. `NotificationSink getNotificationSink()`: This method returns the notification sink.
11. `void setNotificationListener(NotificationListener listener)`: This method sets the notification listener.
12. `NotificationListener getNotificationListener()`: This method returns the notification listener.
13. `void setNotificationBufferSize(int size)`: This method sets the notification buffer size.
14. `int getNotificationBufferSize()`: This method returns the notification buffer size.
15. `void setNotificationFilter(NotificationFilter filter)`: This method sets the notification filter.
16. `NotificationFilter getNotificationFilter()`: This method returns the notification filter.
17. `void setNotificationBroadcaster(NotificationBroadcaster broadcaster)`: This method sets the notification broadcaster.
18. `NotificationBroadcaster getNotificationBroadcaster()`: This method returns the notification broadcaster.
19. `void setNotificationSink(NotificationSink sink)`: This method sets the notification sink.
20. `NotificationSink getNotificationSink()`: This method returns the notification sink.
21. `void setNotificationListener(NotificationListener listener)`: This method sets the notification listener.
22. `NotificationListener getNotificationListener()`: This method returns the notification listener.
23. `void setNotificationBufferSize(int size)`: This method sets the notification buffer size.
24. `int getNotificationBufferSize()`: This method returns the notification buffer size.
25. `void setNotificationFilter(NotificationFilter filter)`: This method sets the notification filter.
26. `NotificationFilter getNotificationFilter()`: This method returns the notification filter.
27. `void setNotificationBroadcaster(NotificationBroadcaster broadcaster)`: This method sets the notification broadcaster.
28. `NotificationBroadcaster getNotificationBroadcaster()`: This method returns the notification broadcaster.
29. `void setNotificationSink(NotificationSink sink)`: This method sets the notification sink.
30. `NotificationSink getNotificationSink()`: This method returns the notification sink.
31. `void setNotificationListener(NotificationListener listener)`: This method sets the notification listener.
32. `NotificationListener getNotificationListener()`: This method returns the notification listener.
33. `void setNotificationBufferSize(int size)`: This method sets the notification buffer size.
34. `int getNotificationBufferSize()`: This method returns the notification buffer size.
35. `void setNotificationFilter(NotificationFilter filter)`: This method sets the notification filter.
36. `NotificationFilter getNotificationFilter()`: This method returns the notification filter.
37. `void setNotificationBroadcaster(NotificationBroadcaster broadcaster)`: This method sets the notification broadcaster.
38. `NotificationBroadcaster getNotificationBroadcaster()`: This method returns the notification broadcaster.
39. `void setNotificationSink(NotificationSink sink)`: This method sets the notification sink.
40. `NotificationSink getNotificationSink()`: This method returns the notification sink.
41. `void setNotificationListener(NotificationListener listener)`: This method sets the notification listener.
42. `NotificationListener getNotificationListener()`: This method returns the notification listener.
43. `void setNotificationBufferSize(int size)`: This method sets the notification buffer size.
44. `int getNotificationBufferSize()`: This method returns the notification buffer size.
45. `void setNotificationFilter(NotificationFilter filter)`: This method sets the notification filter.
46. `NotificationFilter getNotificationFilter()`: This method returns the notification filter.
47. `void setNotificationBroadcaster(NotificationBroadcaster broadcaster)`: This method sets the notification broadcaster.
48. `NotificationBroadcaster getNotificationBroadcaster()`: This method returns the notification broadcaster.
49. `void setNotificationSink(NotificationSink sink)`: This method sets the notification sink.
50. `NotificationSink getNotificationSink()`: This method returns the notification sink.
51. `void setNotificationListener(NotificationListener listener)`: This method sets the notification listener.
52. `NotificationListener getNotificationListener()`: This method returns the notification listener.
53. `void setNotificationBufferSize(int size)`: This method sets the notification buffer size.
54. `int getNotificationBufferSize()`: This method returns the notification buffer size.
55. `void setNotificationFilter(NotificationFilter filter)`: This method sets the notification filter.
56. `NotificationFilter getNotificationFilter()`: This method returns the notification filter.
57. `void setNotificationBroadcaster(NotificationBroadcaster broadcaster)`: This method sets the notification broadcaster.
58. `NotificationBroadcaster getNotificationBroadcaster()`: This method returns the notification broadcaster.
59. `void setNotificationSink(NotificationSink sink)`: This method sets the notification sink.
60. `NotificationSink getNotificationSink()`: This method returns the notification sink.
61. `void setNotificationListener(NotificationListener listener)`: This method sets the notification listener.
62. `NotificationListener getNotificationListener()`: This method returns the notification listener.
63. `void setNotificationBufferSize(int size)`: This method sets the notification buffer size.
64. `int getNotificationBufferSize()`: This method returns the notification buffer size.
65. `void setNotificationFilter(NotificationFilter filter)`: This method sets the notification filter.
66. `NotificationFilter getNotificationFilter()`: This method returns the notification filter.
67. `void setNotificationBroadcaster(NotificationBroadcaster broadcaster)`: This method sets the notification broadcaster.
68. `NotificationBroadcaster getNotificationBroadcaster()`: This method returns the notification broadcaster.
69. `void setNotificationSink(NotificationSink sink)`: This method sets the notification sink.
70. `NotificationSink getNotificationSink()`: This method returns the notification sink.
71. `void setNotificationListener(NotificationListener listener)`: This method sets the notification listener.
72. `NotificationListener getNotificationListener()`: This method returns the notification listener.
73. `void setNotificationBufferSize(int size)`: This method sets the notification buffer size.
74. `int getNotificationBufferSize()`: This method returns the notification buffer size.
75. `void setNotificationFilter(NotificationFilter filter)`: This method sets the notification filter.
76. `NotificationFilter getNotificationFilter()`: This method returns the notification filter.
77. `void setNotificationBroadcaster(NotificationBroadcaster broadcaster)`: This method sets the notification broadcaster.
78. `NotificationBroadcaster getNotification
================================================================

Sample: 1 JMXConnectorFactory
----------------------------------------------------------------

@@ Context
Here is the description of the package Interfaces for remote access to JMX MBean servers.
Here is the description of the class Factory to create JMX API connector clients.

@@ Instruction
I want to use javax.management.remote.JMXConnectorFactory package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `JMXConnectorFactory.newJMXConnector(URL, Map<String,?>)`: This method creates a new JMXConnector object that can be used to connect to a JMX MBean server.

2. `JMXConnectorFactory.getEnv(Map<String,?>)`: This method returns a Map that can be used to create a JMXConnector.

3. `JMXConnectorFactory.getDefaultOptions()`: This method returns a Map that can be used to create a JMXConnector.

4. `JMXConnectorFactory.getDefaultOptions(Map<String,?>)`: This method returns a Map that can be used to create a JMXConnector.

5. `JMXConnectorFactory.getDefaultOptions(Map<String,?>, Map<String,?>)`: This method returns a Map that can be used to create a JMXConnector.
================================================================

Sample: 2 JMXConnectorServer
----------------------------------------------------------------

@@ Context
Here is the description of the package Interfaces for remote access to JMX MBean servers.
Here is the description of the class Superclass of every connector server.

@@ Instruction
I want to use javax.management.remote.JMXConnectorServer package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `JMXConnectorServer newJMXConnector(JMXServiceURL serviceURL, Map environment, MBeanServerConnection mbsc)`: This method creates a new JMXConnectorServer that is bound to the specified service URL and uses the specified environment and MBeanServerConnection.

2. `void start()`: This method starts the JMXConnectorServer.

3. `void stop()`: This method stops the JMXConnectorServer.

4. `JMXServiceURL getAddress()`: This method returns the address of the JMXConnectorServer.

5. `JMXConnectorContext getConnectorContext()`: This method returns the JMXConnectorContext of the JMXConnectorServer.

6. `MBeanServerConnection getMBeanServerConnection()`: This method returns the MBeanServerConnection of the JMXConnectorServer.

7. `JMXConnectorServer newJMXConnector(JMXServiceURL serviceURL, Map environment, MBeanServerConnection mbsc, JMXConnectorServerHandler handler)`: This method creates a new JMXConnectorServer that is bound to the specified service URL and uses the specified environment, MBeanServerConnection, and JMXConnectorServerHandler.

8. `JMXConnectorServer newJMXConnector(JMXServiceURL serviceURL, Map environment, MBeanServerConnection mbsc, JMXConnectorServerHandler handler, JMXConnectorServerListener listener)`: This method creates a new JMXConnectorServer that is bound to the specified service URL and uses the specified environment, MBeanServerConnection, JMXConnectorServerHandler, and JMXConnectorServerListener.

9. `JMXConnectorServer newJMXConnector(JMXServiceURL serviceURL, Map environment, MBeanServerConnection mbsc, JMXConnectorServerHandler handler, JMXConnectorServerListener listener, JMXConnectorServerListener... listeners)`: This method creates a new JMXConnectorServer that is bound to the specified service URL and uses the specified environment, MBeanServerConnection, JMXConnectorServerHandler, JMXConnectorServerListener, and additional JMXConnectorServerListeners.

10. `JMXConnectorServer newJMXConnector(JMXServiceURL serviceURL, Map environment, MBeanServerConnection mbsc, JMXConnectorServerHandler handler, JMXConnectorServerListener listener, JMXConnectorServerListener... listeners, JMXConnectorServerListenerFactory listenerFactory)`: This method creates a new JMXConnectorServer that is bound to the specified service URL and uses the specified environment, MBeanServerConnection, JMXConnectorServerHandler, JMXConnectorServerListener, additional JMXConnectorServerListeners, and JMXConnectorServerListenerFactory.
================================================================

Sample: 3 JMXConnectorServerFactory
----------------------------------------------------------------

@@ Context
Here is the description of the package Interfaces for remote access to JMX MBean servers.
Here is the description of the class Factory to create JMX API connector servers.

@@ Instruction
I want to use javax.management.remote.JMXConnectorServerFactory package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `JMXConnectorServerFactory.newJMXConnectorServer(URL, Map, MBeanServerConnection)`: This method creates a new JMXConnectorServer that uses the specified URL, environment, and MBeanServerConnection.

2. `JMXConnectorServerFactory.newJMXConnectorServer(URL, Map, MBeanServerConnection, JMXConnectorServer)`: This method creates a new JMXConnectorServer that uses the specified URL, environment, MBeanServerConnection, and parent JMXConnectorServer.

3. `JMXConnectorServerFactory.newJMXConnectorServer(URL, Map, MBeanServerConnection, JMXConnectorServer, JMXConnectorServerNotifier)`: This method creates a new JMXConnectorServer that uses the specified URL, environment, MBeanServerConnection, parent JMXConnectorServer, and JMXConnectorServerNotifier.

4. `JMXConnectorServerFactory.newJMXConnectorServer(URL, Map, MBeanServerConnection, JMXConnectorServer, JMXConnectorServerNotifier, JMXServiceURL)`: This method creates a new JMXConnectorServer that uses the specified URL, environment, MBeanServerConnection, parent JMXConnectorServer, JMXConnectorServerNotifier, and JMXServiceURL.

5. `JMXConnectorServerFactory.newJMXConnectorServer(URL, Map, MBeanServerConnection, JMXConnectorServer, JMXConnectorServerNotifier, JMXServiceURL, JMXConnectorServerHandler)`: This method creates a new JMXConnectorServer that uses the specified URL, environment, MBeanServerConnection, parent JMXConnectorServer, JMXConnectorServerNotifier, JMXServiceURL, and JMXConnectorServerHandler.
================================================================

Sample: 4 JMXPrincipal
----------------------------------------------------------------

@@ Context
Here is the description of the package Interfaces for remote access to JMX MBean servers.
Here is the description of the class The identity of a remote client of the JMX Remote API.

@@ Instruction
I want to use javax.management.remote.JMXPrincipal package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `JMXPrincipal(String name, String password)`: This is the constructor of the JMXPrincipal class. It takes two parameters, name and password, and initializes a new JMXPrincipal with these values.

2. `String getName()`: This method returns the name of the principal.

3. `String getPassword()`: This method returns the password of the principal.

4. `boolean implies(Subject subject)`: This method checks if the specified subject implies this principal.

5. `boolean equals(Object obj)`: This method checks if the specified object is equal to this principal.

6. `int hashCode()`: This method returns the hash code value for this principal.

7. `String toString()`: This method returns a string representation of this principal.
================================================================

Sample: 5 JMXServiceURL
----------------------------------------------------------------

@@ Context
Here is the description of the package Interfaces for remote access to JMX MBean servers.
Here is the description of the class The address of a JMX API connector server.

@@ Instruction
I want to use javax.management.remote.JMXServiceURL package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `JMXServiceURL(String url)`: This constructor creates a JMXServiceURL object using the specified URL string.

2. `String getAddress()`: This method returns the address of the JMX API connector server.

3. `String getHostAddress()`: This method returns the host address of the JMX API connector server.

4. `int getPort()`: This method returns the port number of the JMX API connector server.

5. `String getProtocol()`: This method returns the protocol of the JMX API connector server.

6. `String getRMIServerURLString()`: This method returns the RMI server URL string of the JMX API connector server.

7. `String getServiceName()`: This method returns the service name of the JMX API connector server.

8. `String getServicePath()`: This method returns the service path of the JMX API connector server.

9. `String toString()`: This method returns a string representation of the JMXServiceURL object.

10. `boolean equals(Object obj)`: This method compares this JMXServiceURL object with the specified object.

11. `int hashCode()`: This method returns the hash code value for this JMXServiceURL object.
================================================================

Sample: 6 NotificationResult
----------------------------------------------------------------

@@ Context
Here is the description of the package Interfaces for remote access to JMX MBean servers.
Here is the description of the class Result of a query for buffered notifications.

@@ Instruction
I want to use javax.management.remote.NotificationResult package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean add(E e)`: This method appends the specified element to the end of this list.
2. `void clear()`: This method removes all of the elements from this list.
3. `boolean contains(Object o)`: This method returns true if this list contains the specified element.
4. `boolean isEmpty()`: This method returns true if this list contains no elements.
5. `boolean remove(Object o)`: This method removes the first occurrence of the specified element from this list, if it is present.
================================================================

Sample: 7 SubjectDelegationPermission
----------------------------------------------------------------

@@ Context
Here is the description of the package Interfaces for remote access to JMX MBean servers.
Here is the description of the class Permission required by an authentication identity to perform operations on behalf of an authorization identity.

@@ Instruction
I want to use javax.management.remote.SubjectDelegationPermission package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean implies(SubjectDelegationPermission sdp)`: Tests if this permission implies the specified permission.
2. `boolean equals(Object obj)`: Compares this object against the specified object.
3. `int hashCode()`: Returns a hash code for this object.
4. `String getActions()`: Returns the actions string of this Permission object.
5. `String getPrincipals()`: Returns the principals string of this Permission object.
6. `String getRoles()`: Returns the roles string of this Permission object.
7. `String getName()`: Returns the name of this Permission object.
8. `String toString()`: Returns a string representation of the Permission object.
================================================================

Sample: 8 TargetedNotification
----------------------------------------------------------------

@@ Context
Here is the description of the package Interfaces for remote access to JMX MBean servers.
Here is the description of the class A (Notification, Listener ID) pair.

@@ Instruction
I want to use javax.management.remote.TargetedNotification package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean add(E e)`: This method appends the specified element to the end of this list.
2. `void add(int index, E element)`: This method inserts the specified element at the specified position in this list.
3. `boolean addAll(Collection<? extends E> c)`: This method appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator.
4. `boolean addAll(int index, Collection<? extends E> c)`: This method inserts all of the elements in the specified collection into this list, starting at the specified position.
5. `void clear()`: This method removes all of the elements from this list.
================================================================

