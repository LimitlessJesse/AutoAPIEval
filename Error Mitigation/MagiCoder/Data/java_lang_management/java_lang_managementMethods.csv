ClassName,Method,Return Type,Description
LockInfo,from(CompositeData cd),static LockInfo,Returns a LockInfo object represented by the given CompositeData.
LockInfo,getClassName(),String,Returns the fully qualified name of the class of the lock object.
LockInfo,getIdentityHashCode(),int,Returns the identity hash code of the lock object returned from the System.identityHashCode(java.lang.Object) method.
LockInfo,toString(),String,Returns a string representation of a lock.
ManagementFactory,getClassLoadingMXBean(),static ClassLoadingMXBean,Returns the managed bean for the class loading system of the Java virtual machine.
ManagementFactory,getCompilationMXBean(),static CompilationMXBean,Returns the managed bean for the compilation system of the Java virtual machine.
ManagementFactory,getGarbageCollectorMXBeans(),static List<GarbageCollectorMXBean>,Returns a list of GarbageCollectorMXBean objects in the Java virtual machine.
ManagementFactory,getMemoryManagerMXBeans(),static List<MemoryManagerMXBean>,Returns a list of MemoryManagerMXBean objects in the Java virtual machine.
ManagementFactory,getMemoryMXBean(),static MemoryMXBean,Returns the managed bean for the memory system of the Java virtual machine.
ManagementFactory,getMemoryPoolMXBeans(),static List<MemoryPoolMXBean>,Returns a list of MemoryPoolMXBean objects in the Java virtual machine.
ManagementFactory,getOperatingSystemMXBean(),static OperatingSystemMXBean,Returns the managed bean for the operating system on which the Java virtual machine is running.
ManagementFactory,getPlatformManagementInterfaces(),static Set<Class<? extends PlatformManagedObject>>,"Returns the set of Class objects, subinterface of PlatformManagedObject, representing all management interfaces for monitoring and managing the Java platform."
ManagementFactory,getPlatformMBeanServer(),static MBeanServer,Returns the platform MBeanServer.
ManagementFactory,getPlatformMXBean(Class<T> mxbeanInterface),static <T extends PlatformManagedObject>T,Returns the platform MXBean implementing the given mxbeanInterface which is specified to have one single instance in the Java virtual machine.
ManagementFactory,"getPlatformMXBean(MBeanServerConnection connection, Class<T> mxbeanInterface)",static <T extends PlatformManagedObject>T,Returns the platform MXBean proxy for mxbeanInterface which is specified to have one single instance in a Java virtual machine and the proxy will forward the method calls through the given MBeanServerConnection.
ManagementFactory,getPlatformMXBeans(Class<T> mxbeanInterface),static <T extends PlatformManagedObject>List<T>,Returns the list of platform MXBeans implementing the given mxbeanInterface in the Java virtual machine.
ManagementFactory,"getPlatformMXBeans(MBeanServerConnection connection, Class<T> mxbeanInterface)",static <T extends PlatformManagedObject>List<T>,Returns the list of the platform MXBean proxies for forwarding the method calls of the mxbeanInterface through the given MBeanServerConnection.
ManagementFactory,getRuntimeMXBean(),static RuntimeMXBean,Returns the managed bean for the runtime system of the Java virtual machine.
ManagementFactory,getThreadMXBean(),static ThreadMXBean,Returns the managed bean for the thread system of the Java virtual machine.
ManagementFactory,"newPlatformMXBeanProxy(MBeanServerConnection connection, String mxbeanName, Class<T> mxbeanInterface)",static <T> T,Returns a proxy for a platform MXBean interface of a given MXBean name that forwards its method calls through the given MBeanServerConnection.
MemoryNotificationInfo,from(CompositeData cd),static MemoryNotificationInfo,Returns a MemoryNotificationInfo object represented by the given CompositeData.
MemoryNotificationInfo,getCount(),long,Returns the number of times that the memory usage has crossed a threshold when the notification was constructed.
MemoryNotificationInfo,getPoolName(),String,Returns the name of the memory pool that triggers this notification.
MemoryNotificationInfo,getUsage(),MemoryUsage,Returns the memory usage of the memory pool when this notification was constructed.
MemoryUsage,from(CompositeData cd),static MemoryUsage,Returns a MemoryUsage object represented by the given CompositeData.
MemoryUsage,getCommitted(),long,Returns the amount of memory in bytes that is committed for the Java virtual machine to use.
MemoryUsage,getInit(),long,Returns the amount of memory in bytes that the Java virtual machine initially requests from the operating system for memory management.
MemoryUsage,getMax(),long,Returns the maximum amount of memory in bytes that can be used for memory management.
MemoryUsage,getUsed(),long,Returns the amount of used memory in bytes.
MemoryUsage,toString(),String,Returns a descriptive representation of this memory usage.
MonitorInfo,from(CompositeData cd),static MonitorInfo,Returns a MonitorInfo object represented by the given CompositeData.
MonitorInfo,getLockedStackDepth(),int,Returns the depth in the stack trace where the object monitor was locked.
MonitorInfo,getLockedStackFrame(),StackTraceElement,Returns the stack frame that locked the object monitor.
ThreadInfo,from(CompositeData cd),static ThreadInfo,Returns a ThreadInfo object represented by the given CompositeData.
ThreadInfo,getBlockedCount(),long,Returns the total number of times that the thread associated with this ThreadInfo blocked to enter or reenter a monitor.
ThreadInfo,getBlockedTime(),long,Returns the approximate accumulated elapsed time (in milliseconds) that the thread associated with this ThreadInfo has blocked to enter or reenter a monitor since thread contention monitoring is enabled.
ThreadInfo,getLockedMonitors(),MonitorInfo[],"Returns an array of MonitorInfo objects, each of which represents an object monitor currently locked by the thread associated with this ThreadInfo."
ThreadInfo,getLockedSynchronizers(),LockInfo[],"Returns an array of LockInfo objects, each of which represents an ownable synchronizer currently locked by the thread associated with this ThreadInfo."
ThreadInfo,getLockInfo(),LockInfo,Returns the LockInfo of an object for which the thread associated with this ThreadInfo is blocked waiting.
ThreadInfo,getLockName(),String,Returns the string representation of an object for which the thread associated with this ThreadInfo is blocked waiting.
ThreadInfo,getLockOwnerId(),long,Returns the ID of the thread which owns the object for which the thread associated with this ThreadInfo is blocked waiting.
ThreadInfo,getLockOwnerName(),String,Returns the name of the thread which owns the object for which the thread associated with this ThreadInfo is blocked waiting.
ThreadInfo,getStackTrace(),StackTraceElement[],Returns the stack trace of the thread associated with this ThreadInfo.
ThreadInfo,getThreadId(),long,Returns the ID of the thread associated with this ThreadInfo.
ThreadInfo,getThreadName(),String,Returns the name of the thread associated with this ThreadInfo.
ThreadInfo,getThreadState(),Thread.State,Returns the state of the thread associated with this ThreadInfo.
ThreadInfo,getWaitedCount(),long,Returns the total number of times that the thread associated with this ThreadInfo waited for notification.
ThreadInfo,getWaitedTime(),long,Returns the approximate accumulated elapsed time (in milliseconds) that the thread associated with this ThreadInfo has waited for notification since thread contention monitoring is enabled.
ThreadInfo,isInNative(),boolean,Tests if the thread associated with this ThreadInfo is executing native code via the Java Native Interface (JNI).
ThreadInfo,isSuspended(),boolean,Tests if the thread associated with this ThreadInfo is suspended.
ThreadInfo,toString(),String,Returns a string representation of this thread info.
