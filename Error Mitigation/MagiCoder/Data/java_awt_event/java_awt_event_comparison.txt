Sample: 0 ActionEvent
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for dealing with differenttypes of events fired by AWT components.
Here is the description of the class A semantic event which indicates that a component-defined action occurred.

@@ Instruction
I want to use java.awt.event.ActionEvent package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `ActionEvent(Object source, int id)`: This constructor creates an ActionEvent object with the specified source and id.

2. `ActionEvent(Object source, int id, String command)`: This constructor creates an ActionEvent object with the specified source, id, and command.

3. `ActionEvent(Object source, int id, String command, long when)`: This constructor creates an ActionEvent object with the specified source, id, command, and when.

4. `ActionEvent(Object source, int id, String command, long when, int modifiers)`: This constructor creates an ActionEvent object with the specified source, id, command, when, and modifiers.

5. `ActionEvent(Object source, int id, String command, long when, int modifiers, InputEvent e)`: This constructor creates an ActionEvent object with the specified source, id, command, when, modifiers, and e.
================================================================

Sample: 1 AdjustmentEvent
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for dealing with differenttypes of events fired by AWT components.
Here is the description of the class The adjustment event emitted by Adjustable objects like Scrollbar and ScrollPane.

@@ Instruction
I want to use java.awt.event.AdjustmentEvent package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `AdjustmentEvent(Object source, int id)`: This constructor creates an AdjustmentEvent object with the specified source and id.

2. `AdjustmentEvent(Object source, int id, int adjustType)`: This constructor creates an AdjustmentEvent object with the specified source, id, and adjustType.

3. `int getAdjustType()`: This method returns the type of adjustment that occurred.

4. `int getValue()`: This method returns the value of the adjustment.

5. `int getValueIsAdjusting()`: This method returns whether the value is being adjusted.
================================================================

Sample: 2 AWTEventListenerProxy
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for dealing with differenttypes of events fired by AWT components.
Here is the description of the class A class which extends the EventListenerProxy specifically for adding an AWTEventListener for a specific event mask.

@@ Instruction
I want to use java.awt.event.AWTEventListenerProxy package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public void eventDispatched(AWTEvent event)`: This method is called when an event is dispatched.

2. `public void eventDispatched(Event event)`: This method is called when an event is dispatched.

3. `public void eventDispatched(EventObject event)`: This method is called when an event is dispatched.

4. `public void eventDispatched(java.util.EventObject event)`: This method is called when an event is dispatched.

5. `public void eventDispatched(java.util.concurrent.atomic.AtomicReference<Event> event)`: This method is called when an event is dispatched.
================================================================

Sample: 3 ComponentAdapter
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for dealing with differenttypes of events fired by AWT components.
Here is the description of the class An abstract adapter class for receiving component events.

@@ Instruction
I want to use java.awt.event.ComponentAdapter package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `void componentHidden(ComponentEvent e)`: This method is called when a component becomes hidden.
2. `void componentMoved(ComponentEvent e)`: This method is called when a component is moved.
3. `void componentResized(ComponentEvent e)`: This method is called when a component is resized.
4. `void componentShown(ComponentEvent e)`: This method is called when a component becomes visible.
5. `void componentMoved(ComponentEvent e)`: This method is called when a component is moved.
================================================================

Sample: 4 ComponentEvent
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for dealing with differenttypes of events fired by AWT components.
Here is the description of the class A low-level event which indicates that a component moved, changed size, or changed visibility (also, the root class for the other component-level events).

@@ Instruction
I want to use java.awt.event.ComponentEvent package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `ComponentEvent(Component source, int id)`: This is the constructor of the ComponentEvent class. It takes two parameters, a Component source and an int id.

2. `Component getSource()`: This method returns the Component that originated the event.

3. `int getID()`: This method returns the identifier for the event.

4. `void paramChanged()`: This method is used to notify the listener that the event has occurred.

5. `void setSource(Component source)`: This method sets the source of the event.
================================================================

Sample: 5 ContainerAdapter
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for dealing with differenttypes of events fired by AWT components.
Here is the description of the class An abstract adapter class for receiving container events.

@@ Instruction
I want to use java.awt.event.ContainerAdapter package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `void componentAdded(ComponentEvent e)`: This method is called when a component is added to the container.
2. `void componentRemoved(ComponentEvent e)`: This method is called when a component is removed from the container.
3. `void addChild(ContainerEvent e)`: This method is called when a child is added to the container.
4. `void removeChild(ContainerEvent e)`: This method is called when a child is removed from the container.
5. `void childAdded(ContainerEvent e)`: This method is called when a child is added to the container.
6. `void childRemoved(ContainerEvent e)`: This method is called when a child is removed from the container.
================================================================

Sample: 6 ContainerEvent
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for dealing with differenttypes of events fired by AWT components.
Here is the description of the class A low-level event which indicates that a container's contents changed because a component was added or removed.

@@ Instruction
I want to use java.awt.event.ContainerEvent package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `ContainerEvent(Component source, int id)`: This is the constructor of the ContainerEvent class. It takes two parameters, a Component source and an int id.

2. `Component getSource()`: This method returns the Component that is the source of the event.

3. `int getID()`: This method returns the id of the event.

4. `void setSource(Component source)`: This method sets the source of the event.

5. `void setID(int id)`: This method sets the id of the event.
================================================================

Sample: 7 FocusAdapter
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for dealing with differenttypes of events fired by AWT components.
Here is the description of the class An abstract adapter class for receiving keyboard focus events.

@@ Instruction
I want to use java.awt.event.FocusAdapter package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `void focusGained(FocusEvent e)`: This method is called when a component gains the keyboard focus.

2. `void focusLost(FocusEvent e)`: This method is called when a component loses the keyboard focus.

3. `void focusGained(FocusEvent e)`: This method is called when a component gains the keyboard focus.

4. `void focusLost(FocusEvent e)`: This method is called when a component loses the keyboard focus.

5. `void focusGained(FocusEvent e)`: This method is called when a component gains the keyboard focus.

6. `void focusLost(FocusEvent e)`: This method is called when a component loses the keyboard focus.

7. `void focusGained(FocusEvent e)`: This method is called when a component gains the keyboard focus.

8. `void focusLost(FocusEvent e)`: This method is called when a component loses the keyboard focus.

9. `void focusGained(FocusEvent e)`: This method is called when a component gains the keyboard focus.

10. `void focusLost(FocusEvent e)`: This method is called when a component loses the keyboard focus.
================================================================

Sample: 8 FocusEvent
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for dealing with differenttypes of events fired by AWT components.
Here is the description of the class A low-level event which indicates that a Component has gained or lost the input focus.

@@ Instruction
I want to use java.awt.event.FocusEvent package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public boolean isTemporary()`: This method returns true if the event is a temporary focus loss event.

2. `public Component getOppositeComponent()`: This method returns the Component that lost the focus.

3. `public Component getComponent()`: This method returns the Component that gained the focus.

4. `public boolean isFocusGained()`: This method returns true if the event is a focus gain event.

5. `public boolean isFocusLost()`: This method returns true if the event is a focus loss event.
================================================================

Sample: 9 HierarchyBoundsAdapter
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for dealing with differenttypes of events fired by AWT components.
Here is the description of the class An abstract adapter class for receiving ancestor moved and resized events.

@@ Instruction
I want to use java.awt.event.HierarchyBoundsAdapter package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `void ancestorMoved(HierarchyEvent e)`: This method is called when the ancestor of a component has been moved.
2. `void ancestorResized(HierarchyEvent e)`: This method is called when the ancestor of a component has been resized.
3. `void hierarchyChanged(HierarchyEvent e)`: This method is called when the structure of the component tree has changed.
4. `void hierarchyBoundsChanged(HierarchyEvent e)`: This method is called when the bounds of a component or its ancestors have changed.
5. `void componentMoved(ComponentEvent e)`: This method is called when a component has been moved.
6. `void componentResized(ComponentEvent e)`: This method is called when a component has been resized.
7. `void componentShown(ComponentEvent e)`: This method is called when a component has been made visible.
8. `void componentHidden(ComponentEvent e)`: This method is called when a component has been made invisible.
9. `void componentMoved(ContainerEvent e)`: This method is called when a component has been moved within the container.
10. `void componentRemoved(ContainerEvent e)`: This method is called when a component has been removed from the container.
================================================================

Sample: 10 HierarchyEvent
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for dealing with differenttypes of events fired by AWT components.
Here is the description of the class An event which indicates a change to the Component hierarchy to which Component belongs.

@@ Instruction
I want to use java.awt.event.HierarchyEvent package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public int getChangeFlags()`: Returns the flags indicating the type of change that occurred.
2. `public Component getChanged()`: Returns the Component that changed.
3. `public Component[] getChangedPath()`: Returns an array of Components that form the path from the root to the changed Component.
4. `public Component getRoot()`: Returns the root Component of the hierarchy.
5. `public int getID()`: Returns the ID of the event.
================================================================

Sample: 11 InputEvent
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for dealing with differenttypes of events fired by AWT components.
Here is the description of the class The root event class for all component-level input events.

@@ Instruction
I want to use java.awt.event.InputEvent package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean getAltGraphDown()`: Returns whether the ALT_GRAPH key is down.
2. `boolean getControlDown()`: Returns whether the CONTROL key is down.
3. `boolean getMetaDown()`: Returns whether the META key is down.
4. `boolean getShiftDown()`: Returns whether the SHIFT key is down.
5. `int getX()`: Returns the X coordinate of the mouse pointer.
6. `int getY()`: Returns the Y coordinate of the mouse pointer.
7. `int getXOnScreen()`: Returns the X coordinate of the mouse pointer on the screen.
8. `int getYOnScreen()`: Returns the Y coordinate of the mouse pointer on the screen.
9. `int getClickCount()`: Returns the number of times the mouse button was clicked.
10. `int getButton()`: Returns the button that was pressed.
11. `int getModifiers()`: Returns the modifiers that were pressed.
12. `int getModifiersEx()`: Returns the modifiers that were pressed.
13. `int getModifiersMask()`: Returns the modifiers that were pressed.
14. `int getModifiersExMask()`: Returns the modifiers that were pressed.
15. `int getModifiersMaskEx()`: Returns the modifiers that were pressed.
16. `int getModifiersExMaskEx()`: Returns the modifiers that were pressed.
17. `int getModifiersMaskExEx()`: Returns the modifiers that were pressed.
18. `int getModifiersExMaskExEx()`: Returns the modifiers that were pressed.
19. `int getModifiersMaskExExEx()`: Returns the modifiers that were pressed.
20. `int getModifiersExMaskExExEx()`: Returns the modifiers that were pressed.
21. `int getModifiersMaskExExExEx()`: Returns the modifiers that were pressed.
22. `int getModifiersExMaskExExExEx()`: Returns the modifiers that were pressed.
23. `int getModifiersMaskExExExExEx()`: Returns the modifiers that were pressed.
24. `int getModifiersExMaskExExExExEx()`: Returns the modifiers that were pressed.
25. `int getModifiersMaskExExExExExEx()`: Returns the modifiers that were pressed.
26. `int getModifiersExMaskExExExExExEx()`: Returns the modifiers that were pressed.
27. `int getModifiersMaskExExExExExExEx()`: Returns the modifiers that were pressed.
28. `int getModifiersExMaskExExExExExExEx()`: Returns the modifiers that were pressed.
29. `int getModifiersMaskExExExExExExExEx()`: Returns the modifiers that were pressed.
30. `int getModifiersExMaskExExExExExExExEx()`: Returns the modifiers that were pressed.
31. `int getModifiersMaskExExExExExExExExEx()`: Returns the modifiers that were pressed.
32. `int getModifiersExMaskExExExExExExExExEx()`: Returns the modifiers that were pressed.
33. `int getModifiersMaskExExExExExExExExExEx()`: Returns the modifiers that were pressed.
34. `int getModifiersExMaskExExExExExExExExExEx()`: Returns the modifiers that were pressed.
35. `int getModifiersMaskExExExExExExExExExExEx()`: Returns the modifiers that were pressed.
36. `int getModifiersExMaskExExExExExExExExExExEx()`: Returns the modifiers that were pressed.
37. `int getModifiersMaskExExExExExExExExExExExEx()`: Returns the modifiers that were pressed.
38. `int getModifiersExMaskExExExExExExExExExExExEx()`: Returns the modifiers that were pressed.
39. `int getModifiersMaskExExExExExExExExExExExExEx()`: Returns the modifiers that were pressed.
40. `int getModifiersExMaskExExExExExExExExExExExExEx()`: Returns the modifiers that were pressed.
41. `int getModifiersMaskExExExExExExExExExExExExExEx()`: Returns the modifiers that were pressed.
42. `int getModifiersExMaskExExExExExExExExExExExExExEx()`: Returns the modifiers that were pressed.
43. `int getModifiersMaskExExExExExExExExExExExExExExEx()`: Returns the modifiers that were pressed.
44. `int getModifiersExMaskExExExExExExExExExExExExExExEx()`: Returns the modifiers that were pressed.
45. `int getModifiersMaskExExExExExExExExExExExExExExExEx()`: Returns the modifiers that were pressed.
46. `int getModifiersExMaskExExExExExExExExExExExExExExExEx()`: Returns the modifiers that were pressed.
47. `int getModifiersMaskExExExExExExExExExExExExExExExExEx()`: Returns the modifiers that were pressed.
48. `int getModifiersExMaskExExExExExExExExExExExExExExExExEx()`: Returns the modifiers that were pressed.
49. `int getModifiersMaskExExExExExExExExExExExExExExExExExEx()`: Returns the modifiers that were pressed.
50. `int getModifiersExMaskExExExExExExExExExExExExExExExExExEx()`: Returns the modifiers that were pressed.
51. `int getModifiersMaskExExExExExExExExExExExExExExExExExExEx()`: Returns the modifiers that were pressed.
52. `int getModifiersExMaskExExExExExExExExExExExExExExExExExExEx()`: Returns the modifiers that were pressed.
53. `int getModifiersMaskExExExExExExExExExExExExExExExExExExExEx()`: Returns the modifiers that were pressed.
54. `int getModifiersExMaskExExExExExExExExExExExExExExExExExExExEx()`: Returns the modifiers that were pressed.
55. `int getModifiersMaskExExExExExExExExExExExExExExExExExExExExExEx()`: Returns the modifiers that were pressed.
56. `int getModifiersExMaskExExExExExExExExExExExExExExExExExExExExExEx()`: Returns the modifiers that were pressed.
57. `int getModifiersMaskExExExExExExExExExExExExExExExExExExExExExExEx()`: Returns the modifiers that were pressed.
58. `int getModifiersExMaskExExExExExExExExExExExExExExExExExExExExExExEx()`: Returns the modifiers that were pressed.
59. `int getModifiersMaskExExExExExExExExExExExExExExExExExExExExExExExEx()`: Returns the modifiers that were pressed.
60. `int getModifiersExMaskExExExExExExExExExExExExExExExExExExExExExExExEx()`: Returns the
================================================================

Sample: 12 InputMethodEvent
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for dealing with differenttypes of events fired by AWT components.
Here is the description of the class Input method events contain information about text that is being composed using an input method.

@@ Instruction
I want to use java.awt.event.InputMethodEvent package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean isCommitAction()`: This method returns true if the event represents a commit action.

2. `String getCommittedString()`: This method returns the string that was committed.

3. `String getDeletedString()`: This method returns the string that was deleted.

4. `String getInsertedString()`: This method returns the string that was inserted.

5. `String getReplacedString()`: This method returns the string that was replaced.

6. `String getReplacedRangeStart()`: This method returns the start index of the range that was replaced.

7. `String getReplacedRangeEnd()`: This method returns the end index of the range that was replaced.

8. `String getComposition()`: This method returns the current composition.

9. `int getCursorPosition()`: This method returns the current cursor position.

10. `int getSelectionStart()`: This method returns the start index of the selection.

11. `int getSelectionEnd()`: This method returns the end index of the selection.

12. `int getModifiers()`: This method returns the modifiers that were pressed when the event was generated.

13. `int getKeyEventType()`: This method returns the type of the key event.

14. `int getKeyChar()`: This method returns the character that was typed.

15. `int getKeyLocation()`: This method returns the location of the key.

16. `int getKeyCode()`: This method returns the code of the key.

17. `int getKeyID()`: This method returns the ID of the key.

18. `int getKeyText()`: This method returns the text of the key.

19. `int getKeyRune()`: This method returns the rune of the key.

20. `int getKeyModifiers()`: This method returns the modifiers of the key.

21. `int getKeyIndex()`: This method returns the index of the key.

22. `int getKeyCharIndex()`: This method returns the character index of the key.

23. `int getKeyPlane()`: This method returns the plane of the key.

24. `int getKeyLevel()`: This method returns the level of the key.

25. `int getKeySecondaryCode()`: This method returns the secondary code of the key.

26. `int getKeySecondaryLevel()`: This method returns the secondary level of the key.

27. `int getKeySecondaryPlane()`: This method returns the secondary plane of the key.

28. `int getKeySecondaryVariant()`: This method returns the secondary variant of the key.

29. `int getKeySecondaryLocation()`: This method returns the secondary location of the key.

30. `int getKeySecondaryModifiers()`: This method returns the secondary modifiers of the key.

31. `int getKeySecondaryID()`: This method returns the secondary ID of the key.

32. `int getKeySecondaryText()`: This method returns the secondary text of the key.

33. `int getKeySecondaryRune()`: This method returns the secondary rune of the key.

34. `int getKeySecondaryIndex()`: This method returns the secondary index of the key.

35. `int getKeySecondaryCharIndex()`: This method returns the secondary character index of the key.

36. `int getKeySecondaryPlane()`: This method returns the secondary plane of the key.

37. `int getKeySecondaryLevel()`: This method returns the secondary level of the key.

38. `int getKeySecondaryVariant()`: This method returns the secondary variant of the key.

39. `int getKeySecondaryLocation()`: This method returns the secondary location of the key.

40. `int getKeySecondaryModifiers()`: This method returns the secondary modifiers of the key.

41. `int getKeySecondaryID()`: This method returns the secondary ID of the key.

42. `int getKeySecondaryText()`: This method returns the secondary text of the key.

43. `int getKeySecondaryRune()`: This method returns the secondary rune of the key.

44. `int getKeySecondaryIndex()`: This method returns the secondary index of the key.

45. `int getKeySecondaryCharIndex()`: This method returns the secondary character index of the key.

46. `int getKeySecondaryPlane()`: This method returns the secondary plane of the key.

47. `int getKeySecondaryLevel()`: This method returns the secondary level of the key.

48. `int getKeySecondaryVariant()`: This method returns the secondary variant of the key.

49. `int getKeySecondaryLocation()`: This method returns the secondary location of the key.

50. `int getKeySecondaryModifiers()`: This method returns the secondary modifiers of the key.

51. `int getKeySecondaryID()`: This method returns the secondary ID of the key.

52. `int getKeySecondaryText()`: This method returns the secondary text of the key.

53. `int getKeySecondaryRune()`: This method returns the secondary rune of the key.

54. `int getKeySecondaryIndex()`: This method returns the secondary index of the key.

55. `int getKeySecondaryCharIndex()`: This method returns the secondary character index of the key.

56. `int getKeySecondaryPlane()`: This method returns the secondary plane of the key.

57. `int getKeySecondaryLevel()`: This method returns the secondary level of the key.

58. `int getKeySecondaryVariant()`: This method returns the secondary variant of the key.

59. `int getKeySecondaryLocation()`: This method returns the secondary location of the key.

60. `int getKeySecondaryModifiers()`: This method returns the secondary modifiers of the key.

61. `int getKeySecondaryID()`: This method returns the secondary ID of the key.

62. `int getKeySecondaryText()`: This method returns the secondary text of the key.

63. `int getKeySecondaryRune()`: This method returns the secondary rune of the key.

64. `int getKeySecondaryIndex()`: This method returns the secondary index of the key.

65. `int getKeySecondaryCharIndex()`: This method returns the secondary character index of the key.

66. `int getKeySecondaryPlane()`: This method returns the secondary plane of the key.

67. `int getKeySecondaryLevel()`: This method returns the secondary level of the key.

68. `int getKeySecondaryVariant()`: This method returns the secondary variant of the key.

69. `int getKeySecondaryLocation()`: This method returns the secondary location of the key.

70. `int getKeySecondaryModifiers()`: This method returns the secondary modifiers of the key.

71. `int getKeySecondaryID()`: This method returns the secondary ID of the key.

72. `int getKeySecondaryText()`: This method returns the secondary text of the key.

73. `int getKeySecondaryRune()`: This method returns the secondary rune of the key.

74. `int getKeySecondaryIndex()`: This method returns
================================================================

Sample: 13 InvocationEvent
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for dealing with differenttypes of events fired by AWT components.
Here is the description of the class An event which executes the run() method on a Runnable when dispatched by the AWT event dispatcher thread.

@@ Instruction
I want to use java.awt.event.InvocationEvent package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public InvocationEvent(Object source, int id)`: This constructor creates an InvocationEvent object with the specified source and id.

2. `public int getID()`: This method returns the id of this InvocationEvent.

3. `public Object getSource()`: This method returns the object that originated the event.

4. `public void setSource(Object source)`: This method sets the object that originated the event.

5. `public void setID(int id)`: This method sets the id of this InvocationEvent.
================================================================

Sample: 14 ItemEvent
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for dealing with differenttypes of events fired by AWT components.
Here is the description of the class A semantic event which indicates that an item was selected or deselected.

@@ Instruction
I want to use java.awt.event.ItemEvent package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean isSelected()`: This method returns true if the item is selected, false otherwise.

2. `int getStateChange()`: This method returns the state change of the item.

3. `ItemSelectable getItemSelectable()`: This method returns the ItemSelectable object that generated the event.

4. `int getIndex()`: This method returns the index of the item that generated the event.

5. `ItemEvent(Object source, int id, boolean selected, int stateChange, int index)`: This is the constructor of the ItemEvent class. It takes in the source of the event, the id of the event, whether the item is selected, the state change of the item, and the index of the item as parameters.
================================================================

Sample: 15 KeyAdapter
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for dealing with differenttypes of events fired by AWT components.
Here is the description of the class An abstract adapter class for receiving keyboard events.

@@ Instruction
I want to use java.awt.event.KeyAdapter package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public void keyPressed(KeyEvent e)`: This method is called when a key is pressed.
2. `public void keyReleased(KeyEvent e)`: This method is called when a key is released.
3. `public void keyTyped(KeyEvent e)`: This method is called when a key is typed.
4. `public void keyPressed(KeyEvent e)`: This method is called when a key is pressed.
5. `public void keyReleased(KeyEvent e)`: This method is called when a key is released.
6. `public void keyTyped(KeyEvent e)`: This method is called when a key is typed.
7. `public void keyPressed(KeyEvent e)`: This method is called when a key is pressed.
8. `public void keyReleased(KeyEvent e)`: This method is called when a key is released.
9. `public void keyTyped(KeyEvent e)`: This method is called when a key is typed.
10. `public void keyPressed(KeyEvent e)`: This method is called when a key is pressed.
11. `public void keyReleased(KeyEvent e)`: This method is called when a key is released.
12. `public void keyTyped(KeyEvent e)`: This method is called when a key is typed.
13. `public void keyPressed(KeyEvent e)`: This method is called when a key is pressed.
14. `public void keyReleased(KeyEvent e)`: This method is called when a key is released.
15. `public void keyTyped(KeyEvent e)`: This method is called when a key is typed.
================================================================

Sample: 16 KeyEvent
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for dealing with differenttypes of events fired by AWT components.
Here is the description of the class An event which indicates that a keystroke occurred in a component.

@@ Instruction
I want to use java.awt.event.KeyEvent package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `int getKeyCode()`: This method returns the integer value representing the physical key pressed.

2. `int getKeyLocation()`: This method returns the location of the key on the keyboard.

3. `boolean isAltDown()`: This method returns true if the ALT key is down.

4. `boolean isControlDown()`: This method returns true if the CTRL key is down.

5. `boolean isMetaDown()`: This method returns true if the META key is down.

6. `boolean isShiftDown()`: This method returns true if the SHIFT key is down.

7. `boolean isAltGraphDown()`: This method returns true if the ALT GRAPH key is down.

8. `boolean isExtendedKey()`: This method returns true if the key is an extended key.

9. `boolean isKeyDown(int keyCode)`: This method returns true if the specified key is down.

10. `boolean isKeyLocation(int keyLocation)`: This method returns true if the key is located at the specified location.

11. `boolean isKeyRepeat()`: This method returns true if the key is being held down and is repeating.

12. `boolean isKeypad()`: This method returns true if the key is a keypad key.

13. `boolean isModifierKeyDown(int modifiers)`: This method returns true if any of the specified modifier keys are down.

14. `boolean isModifierKeyDown(int modifiers, int keyCode)`: This method returns true if any of the specified modifier keys are down and the specified key is down.

15. `boolean isModifierKeyDown(int modifiers, int keyCode, int keyLocation)`: This method returns true if any of the specified modifier keys are down, the specified key is down, and the key is located at the specified location.

16. `boolean isModifierKeyDown(int modifiers, int keyCode, int keyLocation, int keyChar)`: This method returns true if any of the specified modifier keys are down, the specified key is down, the key is located at the specified location, and the key character is the specified character.

17. `boolean isModifierKeyDown(int modifiers, int keyCode, int keyLocation, int keyChar, int keyChar2)`: This method returns true if any of the specified modifier keys are down, the specified key is down, the key is located at the specified location, the key character is the specified character, and the second key character is the specified character.

18. `boolean isModifierKeyDown(int modifiers, int keyCode, int keyLocation, int keyChar, int keyChar2, int keyChar3)`: This method returns true if any of the specified modifier keys are down, the specified key is down, the key is located at the specified location, the key character is the specified character, the second key character is the specified character, and the third key character is the specified character.

19. `boolean isModifierKeyDown(int modifiers, int keyCode, int keyLocation, int keyChar, int keyChar2, int keyChar3, int keyChar4)`: This method returns true if any of the specified modifier keys are down, the specified key is down, the key is located at the specified location, the key character is the specified character, the second key character is the specified character, the third key character is the specified character, and the fourth key character is the specified character.

20. `boolean isModifierKeyDown(int modifiers, int keyCode, int keyLocation, int keyChar, int keyChar2, int keyChar3, int keyChar4, int keyChar5)`: This method returns true if any of the specified modifier keys are down, the specified key is down, the key is located at the specified location, the key character is the specified character, the second key character is the specified character, the third key character is the specified character, the fourth key character is the specified character, and the fifth key character is the specified character.
================================================================

Sample: 17 MouseAdapter
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for dealing with differenttypes of events fired by AWT components.
Here is the description of the class An abstract adapter class for receiving mouse events.

@@ Instruction
I want to use java.awt.event.MouseAdapter package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `void mouseClicked(MouseEvent e)`: This method is called when a mouse button has been clicked (pressed and released) on a component.
2. `void mousePressed(MouseEvent e)`: This method is called when a mouse button has been pressed on a component.
3. `void mouseReleased(MouseEvent e)`: This method is called when a mouse button has been released on a component.
4. `void mouseEntered(MouseEvent e)`: This method is called when the mouse cursor enters a component.
5. `void mouseExited(MouseEvent e)`: This method is called when the mouse cursor exits a component.
================================================================

Sample: 18 MouseEvent
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for dealing with differenttypes of events fired by AWT components.
Here is the description of the class An event which indicates that a mouse action occurred in a component.

@@ Instruction
I want to use java.awt.event.MouseEvent package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `int getX()`: Returns the x-coordinate of the mouse cursor relative to the component.
2. `int getY()`: Returns the y-coordinate of the mouse cursor relative to the component.
3. `int getClickCount()`: Returns the number of times the mouse button was clicked.
4. `int getButton()`: Returns the button that was pressed.
5. `int getModifiers()`: Returns the modifier keys that were pressed.
6. `int getID()`: Returns the ID of the event.
7. `Component getComponent()`: Returns the component that generated the event.
8. `Object getSource()`: Returns the object that originated the event.
9. `void consume()`: Consumes the event.
10. `void setLocation(int x, int y)`: Sets the location of the event.
11. `void setID(int id)`: Sets the ID of the event.
12. `void setWhen(long when)`: Sets the time when the event occurred.
13. `void setModifiers(int modifiers)`: Sets the modifier keys that were pressed.
14. `void setComponent(Component c)`: Sets the component that generated the event.
15. `void setSource(Object source)`: Sets the object that originated the event.
16. `void setButton(int button)`: Sets the button that was pressed.
17. `void setClickCount(int clickCount)`: Sets the number of times the mouse button was clicked.
18. `void setModifiersEx(int modifiersEx)`: Sets the modifier keys that were pressed.
19. `void setModifiers(int modifiers)`: Sets the modifier keys that were pressed.
20. `void setModifiersEx(int modifiersEx)`: Sets the modifier keys that were pressed.
21. `void setModifiers(int modifiers)`: Sets the modifier keys that were pressed.
22. `void setModifiersEx(int modifiersEx)`: Sets the modifier keys that were pressed.
23. `void setModifiers(int modifiers)`: Sets the modifier keys that were pressed.
24. `void setModifiersEx(int modifiersEx)`: Sets the modifier keys that were pressed.
25. `void setModifiers(int modifiers)`: Sets the modifier keys that were pressed.
26. `void setModifiersEx(int modifiersEx)`: Sets the modifier keys that were pressed.
27. `void setModifiers(int modifiers)`: Sets the modifier keys that were pressed.
28. `void setModifiersEx(int modifiersEx)`: Sets the modifier keys that were pressed.
29. `void setModifiers(int modifiers)`: Sets the modifier keys that were pressed.
30. `void setModifiersEx(int modifiersEx)`: Sets the modifier keys that were pressed.
31. `void setModifiers(int modifiers)`: Sets the modifier keys that were pressed.
32. `void setModifiersEx(int modifiersEx)`: Sets the modifier keys that were pressed.
33. `void setModifiers(int modifiers)`: Sets the modifier keys that were pressed.
34. `void setModifiersEx(int modifiersEx)`: Sets the modifier keys that were pressed.
35. `void setModifiers(int modifiers)`: Sets the modifier keys that were pressed.
36. `void setModifiersEx(int modifiersEx)`: Sets the modifier keys that were pressed.
37. `void setModifiers(int modifiers)`: Sets the modifier keys that were pressed.
38. `void setModifiersEx(int modifiersEx)`: Sets the modifier keys that were pressed.
39. `void setModifiers(int modifiers)`: Sets the modifier keys that were pressed.
40. `void setModifiersEx(int modifiersEx)`: Sets the modifier keys that were pressed.
41. `void setModifiers(int modifiers)`: Sets the modifier keys that were pressed.
42. `void setModifiersEx(int modifiersEx)`: Sets the modifier keys that were pressed.
43. `void setModifiers(int modifiers)`: Sets the modifier keys that were pressed.
44. `void setModifiersEx(int modifiersEx)`: Sets the modifier keys that were pressed.
45. `void setModifiers(int modifiers)`: Sets the modifier keys that were pressed.
46. `void setModifiersEx(int modifiersEx)`: Sets the modifier keys that were pressed.
47. `void setModifiers(int modifiers)`: Sets the modifier keys that were pressed.
48. `void setModifiersEx(int modifiersEx)`: Sets the modifier keys that were pressed.
49. `void setModifiers(int modifiers)`: Sets the modifier keys that were pressed.
50. `void setModifiersEx(int modifiersEx)`: Sets the modifier keys that were pressed.
51. `void setModifiers(int modifiers)`: Sets the modifier keys that were pressed.
52. `void setModifiersEx(int modifiersEx)`: Sets the modifier keys that were pressed.
53. `void setModifiers(int modifiers)`: Sets the modifier keys that were pressed.
54. `void setModifiersEx(int modifiersEx)`: Sets the modifier keys that were pressed.
55. `void setModifiers(int modifiers)`: Sets the modifier keys that were pressed.
56. `void setModifiersEx(int modifiersEx)`: Sets the modifier keys that were pressed.
57. `void setModifiers(int modifiers)`: Sets the modifier keys that were pressed.
58. `void setModifiersEx(int modifiersEx)`: Sets the modifier keys that were pressed.
59. `void setModifiers(int modifiers)`: Sets the modifier keys that were pressed.
60. `void setModifiersEx(int modifiersEx)`: Sets the modifier keys that were pressed.
61. `void setModifiers(int modifiers)`: Sets the modifier keys that were pressed.
62. `void setModifiersEx(int modifiersEx)`: Sets the modifier keys that were pressed.
63. `void setModifiers(int modifiers)`: Sets the modifier keys that were pressed.
64. `void setModifiersEx(int modifiersEx)`: Sets the modifier keys that were pressed.
65. `void setModifiers(int modifiers)`: Sets the modifier keys that were pressed.
66. `void setModifiersEx(int modifiersEx)`: Sets the modifier keys that were pressed.
67. `void setModifiers(int modifiers)`: Sets the modifier keys that were pressed.
68. `void setModifiersEx(int modifiersEx)`: Sets the modifier keys that were pressed.
69. `void setModifiers(int modifiers)`: Sets the modifier keys that were pressed.
70. `void setModifiersEx(int modifiersEx)`: Sets the modifier keys that were pressed.
71. `void setModifiers(int modifiers)`: Sets the modifier keys that were pressed.
72. `void setModifiersEx(int modifiersEx)`: Sets the modifier keys that were pressed.
73. `void setModifiers(int modifiers)`: Sets the modifier keys that were pressed.
74. `void setModifiersEx(int modifiersEx)`: Sets
================================================================

Sample: 19 MouseMotionAdapter
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for dealing with differenttypes of events fired by AWT components.
Here is the description of the class An abstract adapter class for receiving mouse motion events.

@@ Instruction
I want to use java.awt.event.MouseMotionAdapter package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `void mouseDragged(MouseEvent e)`: This method is called when the mouse is dragged.
2. `void mouseMoved(MouseEvent e)`: This method is called when the mouse cursor has been moved to a new location.
3. `void mouseEntered(MouseEvent e)`: This method is called when the mouse cursor has entered the component.
4. `void mouseExited(MouseEvent e)`: This method is called when the mouse cursor has exited the component.
5. `void mouseClicked(MouseEvent e)`: This method is called when a mouse button has been clicked (pressed and released).
================================================================

Sample: 20 MouseWheelEvent
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for dealing with differenttypes of events fired by AWT components.
Here is the description of the class An event which indicates that the mouse wheel was rotated in a component.

@@ Instruction
I want to use java.awt.event.MouseWheelEvent package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `int getScrollType()`: This method returns the type of scroll event.
2. `int getUnitsToScroll()`: This method returns the number of clicks the mouse wheel was rotated.
3. `int getWheelRotation()`: This method returns the rotation of the mouse wheel.
4. `int getScrollAmount()`: This method returns the amount of scrolling.
5. `int getScrollPrecision()`: This method returns the precision of the scroll.
================================================================

Sample: 21 PaintEvent
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for dealing with differenttypes of events fired by AWT components.
Here is the description of the class The component-level paint event.

@@ Instruction
I want to use java.awt.event.PaintEvent package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `PaintEvent(Component c, Graphics g)`: This is the constructor of the PaintEvent class. It takes two parameters, a Component and a Graphics object.

2. `Graphics getGraphics()`: This method returns the Graphics object associated with this PaintEvent.

3. `Component getComponent()`: This method returns the Component on which the event occurred.

4. `void setComponent(Component c)`: This method sets the Component on which the event occurred.

5. `void setGraphics(Graphics g)`: This method sets the Graphics object associated with this PaintEvent.
================================================================

Sample: 22 TextEvent
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for dealing with differenttypes of events fired by AWT components.
Here is the description of the class A semantic event which indicates that an object's text changed.

@@ Instruction
I want to use java.awt.event.TextEvent package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public TextEvent(Object source, String text)`: This constructor creates a new TextEvent object with the specified source and text.

2. `public String getText()`: This method returns the text of this TextEvent.

3. `public Object getSource()`: This method returns the source of this TextEvent.

4. `public void setSource(Object source)`: This method sets the source of this TextEvent.

5. `public void setText(String text)`: This method sets the text of this TextEvent.
================================================================

Sample: 23 WindowAdapter
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for dealing with differenttypes of events fired by AWT components.
Here is the description of the class An abstract adapter class for receiving window events.

@@ Instruction
I want to use java.awt.event.WindowAdapter package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `void windowActivated(WindowEvent e)`: This method is called when the window is activated.
2. `void windowClosed(WindowEvent e)`: This method is called when the user attempts to close the window from the window's system menu.
3. `void windowClosing(WindowEvent e)`: This method is called when the user attempts to close the window from the window's own system menu.
4. `void windowDeactivated(WindowEvent e)`: This method is called when the window is deactivated.
5. `void windowDeiconified(WindowEvent e)`: This method is called when the window is made non-minimized.
6. `void windowIconified(WindowEvent e)`: This method is called when the window is made minimized.
7. `void windowOpened(WindowEvent e)`: This method is called when the window is opened.
8. `void windowGainedFocus(WindowEvent e)`: This method is called when the window is given the focus.
9. `void windowLostFocus(WindowEvent e)`: This method is called when the window loses the focus.
10. `void windowStateChanged(WindowEvent e)`: This method is called when the window's state changes.
================================================================

Sample: 24 WindowEvent
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for dealing with differenttypes of events fired by AWT components.
Here is the description of the class A low-level event that indicates that a window has changed its status.

@@ Instruction
I want to use java.awt.event.WindowEvent package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `WindowEvent(Component source, int id)`: This is the constructor of WindowEvent class. It takes two parameters, a Component source and an int id.

2. `getID()`: This method returns the id of the WindowEvent.

3. `getSource()`: This method returns the source of the WindowEvent.

4. `getWindow()`: This method returns the window that is the source of the event.

5. `getModifiers()`: This method returns the modifiers of the event.
================================================================

