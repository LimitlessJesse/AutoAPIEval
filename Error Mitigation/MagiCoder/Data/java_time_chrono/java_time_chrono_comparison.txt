Sample: 0 AbstractChronology
----------------------------------------------------------------

@@ Context
Here is the description of the package Generic API for calendar systems other than the default ISO.
Here is the description of the class An abstract implementation of a calendar system, used to organize and identify dates.

@@ Instruction
I want to use java.time.chrono.AbstractChronology package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean isSupported(TemporalField field)`: This method checks if the chronology supports the specified temporal field.

2. `TemporalField getTemporalField(String fieldName)`: This method returns the temporal field with the specified name.

3. `TemporalAdjuster getTemporalAdjuster(String adjusterName)`: This method returns the temporal adjuster with the specified name.

4. `TemporalUnit getDurationUnit()`: This method returns the temporal unit used to measure durations in this chronology.

5. `TemporalUnit getPeriodUnit()`: This method returns the temporal unit used to measure periods in this chronology.

6. `TemporalUnit getUnit(String unitName)`: This method returns the temporal unit with the specified name.

7. `TemporalUnit getSmallestUnit(TemporalField field)`: This method returns the smallest temporal unit supported by the specified temporal field.

8. `TemporalUnit getRangeUnit(TemporalField field)`: This method returns the temporal unit used to measure ranges in the specified temporal field.

9. `TemporalUnit getDurationUnit(TemporalField field)`: This method returns the temporal unit used to measure durations in the specified temporal field.

10. `TemporalUnit getPeriodUnit(TemporalField field)`: This method returns the temporal unit used to measure periods in the specified temporal field.

11. `TemporalUnit getSmallestUnit(TemporalField field, TemporalAmount amount)`: This method returns the smallest temporal unit supported by the specified temporal field and amount.

12. `TemporalUnit getRangeUnit(TemporalField field, TemporalAmount amount)`: This method returns the temporal unit used to measure ranges in the specified temporal field and amount.

13. `TemporalUnit getDurationUnit(TemporalField field, TemporalAmount amount)`: This method returns the temporal unit used to measure durations in the specified temporal field and amount.

14. `TemporalUnit getPeriodUnit(TemporalField field, TemporalAmount amount)`: This method returns the temporal unit used to measure periods in the specified temporal field and amount.

15. `TemporalUnit getSmallestUnit(TemporalField field, TemporalAmount amount, TemporalUnit unit)`: This method returns the smallest temporal unit supported by the specified temporal field, amount, and unit.

16. `TemporalUnit getRangeUnit(TemporalField field, TemporalAmount amount, TemporalUnit unit)`: This method returns the temporal unit used to measure ranges in the specified temporal field, amount, and unit.

17. `TemporalUnit getDurationUnit(TemporalField field, TemporalAmount amount, TemporalUnit unit)`: This method returns the temporal unit used to measure durations in the specified temporal field, amount, and unit.

18. `TemporalUnit getPeriodUnit(TemporalField field, TemporalAmount amount, TemporalUnit unit)`: This method returns the temporal unit used to measure periods in the specified temporal field, amount, and unit.

19. `TemporalUnit getSmallestUnit(TemporalField field, TemporalAmount amount, TemporalUnit unit, TemporalAmount amount2)`: This method returns the smallest temporal unit supported by the specified temporal field, amount, unit, and amount2.

20. `TemporalUnit getRangeUnit(TemporalField field, TemporalAmount amount, TemporalUnit unit, TemporalAmount amount2)`: This method returns the temporal unit used to measure ranges in the specified temporal field, amount, unit, and amount2.

21. `TemporalUnit getDurationUnit(TemporalField field, TemporalAmount amount, TemporalUnit unit, TemporalAmount amount2)`: This method returns the temporal unit used to measure durations in the specified temporal field, amount, unit, and amount2.

22. `TemporalUnit getPeriodUnit(TemporalField field, TemporalAmount amount, TemporalUnit unit, TemporalAmount amount2)`: This method returns the temporal unit used to measure periods in the specified temporal field, amount, unit, and amount2.
================================================================

Sample: 1 HijrahChronology
----------------------------------------------------------------

@@ Context
Here is the description of the package Generic API for calendar systems other than the default ISO.
Here is the description of the class The Hijrah calendar is a lunar calendar supporting Islamic calendars.

@@ Instruction
I want to use java.time.chrono.HijrahChronology package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `HijrahChronology getInstance(Locale locale)`: This method returns the HijrahChronology instance for the specified locale.

2. `HijrahDate date(int prolepticYear, int month, int dayOfMonth)`: This method returns a HijrahDate instance for the specified proleptic year, month, and day of month.

3. `HijrahDate date(int prolepticYear, int month, int dayOfMonth, int era)`: This method returns a HijrahDate instance for the specified proleptic year, month, day of month, and era.

4. `HijrahDate date(int prolepticYear, int month, int dayOfMonth, int era, int zoneOffset)`: This method returns a HijrahDate instance for the specified proleptic year, month, day of month, era, and zone offset.

5. `HijrahDate date(int prolepticYear, int month, int dayOfMonth, int era, int zoneOffset, ZoneId zoneId)`: This method returns a HijrahDate instance for the specified proleptic year, month, day of month, era, zone offset, and zone ID.
================================================================

Sample: 2 HijrahDate
----------------------------------------------------------------

@@ Context
Here is the description of the package Generic API for calendar systems other than the default ISO.
Here is the description of the class A date in the Hijrah calendar system.

@@ Instruction
I want to use java.time.chrono.HijrahDate package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `HijrahDate ofEpochDay(long epochDay)`: This method returns the HijrahDate instance for the specified epoch day.
2. `HijrahDate of(int year, int month, int dayOfMonth)`: This method returns the HijrahDate instance for the specified year, month, and day of month.
3. `int getDayOfMonth()`: This method returns the day-of-month represented by this HijrahDate.
4. `int getDayOfYear()`: This method returns the day-of-year represented by this HijrahDate.
5. `int getMonthValue()`: This method returns the month-of-year represented by this HijrahDate.
6. `int getYear()`: This method returns the year represented by this HijrahDate.
7. `HijrahDate withYear(int year)`: This method returns a HijrahDate with the year altered.
8. `HijrahDate withMonth(int month)`: This method returns a HijrahDate with the month altered.
9. `HijrahDate withDayOfMonth(int dayOfMonth)`: This method returns a HijrahDate with the day-of-month altered.
10. `HijrahDate withDayOfYear(int dayOfYear)`: This method returns a HijrahDate with the day-of-year altered.
11. `HijrahDate plusDays(long days)`: This method returns a HijrahDate that is the specified number of days later than this HijrahDate.
12. `HijrahDate minusDays(long days)`: This method returns a HijrahDate that is the specified number of days earlier than this HijrahDate.
13. `long until(HijrahDate endDate, ChronoUnit unit)`: This method returns the amount of time until the specified HijrahDate.
14. `boolean isLeapYear()`: This method returns true if this HijrahDate is in a leap year.
15. `boolean isBefore(HijrahDate other)`: This method returns true if this HijrahDate is before the specified HijrahDate.
16. `boolean isAfter(HijrahDate other)`: This method returns true if this HijrahDate is after the specified HijrahDate.
17. `boolean isEqual(HijrahDate other)`: This method returns true if this HijrahDate is equal to the specified HijrahDate.
18. `int compareTo(HijrahDate other)`: This method compares this HijrahDate to the specified HijrahDate.
19. `String toString()`: This method returns a string representation of this HijrahDate.
20. `int hashCode()`: This method returns the hash code value for this HijrahDate.
21. `boolean equals(Object obj)`: This method compares this HijrahDate to the specified object.
22. `int compareTo(Object obj)`: This method compares this HijrahDate to the specified object.
23. `int compareTo(HijrahDate other, ChronoUnit unit)`: This method compares this HijrahDate to the specified HijrahDate.
24. `int compareTo(HijrahDate other, ChronoField field)`: This method compares this HijrahDate to the specified HijrahDate.
25. `HijrahDate with(TemporalAdjuster adjuster)`: This method adjusts this HijrahDate.
26. `HijrahDate with(TemporalAdjusters adjuster)`: This method adjusts this HijrahDate.
27. `HijrahDate with(TemporalField field, long newValue)`: This method adjusts this HijrahDate.
28. `HijrahDate with(TemporalAdjusters adjuster)`: This method adjusts this HijrahDate.
29. `HijrahDate with(TemporalAdjuster adjuster)`: This method adjusts this HijrahDate.
30. `HijrahDate with(TemporalAdjuster adjuster)`: This method adjusts this HijrahDate.
31. `HijrahDate with(TemporalAdjuster adjuster)`: This method adjusts this HijrahDate.
32. `HijrahDate with(TemporalAdjuster adjuster)`: This method adjusts this HijrahDate.
33. `HijrahDate with(TemporalAdjuster adjuster)`: This method adjusts this HijrahDate.
34. `HijrahDate with(TemporalAdjuster adjuster)`: This method adjusts this HijrahDate.
35. `HijrahDate with(TemporalAdjuster adjuster)`: This method adjusts this HijrahDate.
36. `HijrahDate with(TemporalAdjuster adjuster)`: This method adjusts this HijrahDate.
37. `HijrahDate with(TemporalAdjuster adjuster)`: This method adjusts this HijrahDate.
38. `HijrahDate with(TemporalAdjuster adjuster)`: This method adjusts this HijrahDate.
39. `HijrahDate with(TemporalAdjuster adjuster)`: This method adjusts this HijrahDate.
40. `HijrahDate with(TemporalAdjuster adjuster)`: This method adjusts this HijrahDate.
41. `HijrahDate with(TemporalAdjuster adjuster)`: This method adjusts this HijrahDate.
42. `HijrahDate with(TemporalAdjuster adjuster)`: This method adjusts this HijrahDate.
43. `HijrahDate with(TemporalAdjuster adjuster)`: This method adjusts this HijrahDate.
44. `HijrahDate with(TemporalAdjuster adjuster)`: This method adjusts this HijrahDate.
45. `HijrahDate with(TemporalAdjuster adjuster)`: This method adjusts this HijrahDate.
46. `HijrahDate with(TemporalAdjuster adjuster)`: This method adjusts this HijrahDate.
47. `HijrahDate with(TemporalAdjuster adjuster)`: This method adjusts this HijrahDate.
48. `HijrahDate with(TemporalAdjuster adjuster)`: This method adjusts this HijrahDate.
49. `HijrahDate with(TemporalAdjuster adjuster)`: This method adjusts this HijrahDate.
50. `HijrahDate with(TemporalAdjuster adjuster)`: This method adjusts this HijrahDate.
51. `HijrahDate with(TemporalAdjuster adjuster)`: This method adjusts this HijrahDate.
52. `HijrahDate with(TemporalAdjuster adjuster)`: This method adjusts this HijrahDate.
53. `HijrahDate with(TemporalAdjuster adjuster)`: This method adjusts this HijrahDate.
54. `HijrahDate with(TemporalAdjuster adjuster)`: This method adjusts this HijrahDate.
55. `HijrahDate with(TemporalAdjuster adjuster)`: This method adjusts this HijrahDate.
56. `HijrahDate with(TemporalAdjuster adjuster)`: This method adjusts this HijrahDate.
57. `HijrahDate with(TemporalAdjuster adjuster)`: This method adjust
================================================================

Sample: 3 IsoChronology
----------------------------------------------------------------

@@ Context
Here is the description of the package Generic API for calendar systems other than the default ISO.
Here is the description of the class The ISO calendar system.

@@ Instruction
I want to use java.time.chrono.IsoChronology package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `IsoChronology getInstance(Locale locale)`: This method returns the IsoChronology instance for the specified locale.

2. `IsoChronology getInstanceUTC()`: This method returns the IsoChronology instance for the UTC time zone.

3. `IsoChronology getInstance(ZoneId zone)`: This method returns the IsoChronology instance for the specified time zone.

4. `IsoChronology getInstance(ZoneOffset offset)`: This method returns the IsoChronology instance for the specified offset.

5. `IsoChronology getInstance(ZoneId zone, Locale locale)`: This method returns the IsoChronology instance for the specified time zone and locale.
================================================================

Sample: 4 JapaneseChronology
----------------------------------------------------------------

@@ Context
Here is the description of the package Generic API for calendar systems other than the default ISO.
Here is the description of the class The Japanese Imperial calendar system.

@@ Instruction
I want to use java.time.chrono.JapaneseChronology package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `JapaneseChronology getInstance(Locale locale)`: This method returns the JapaneseChronology for the specified locale.

2. `JapaneseDate date(int era, int yearOfEra, int month, int dayOfMonth)`: This method returns a JapaneseDate object for the specified era, year, month, and day.

3. `JapaneseDate date(int era, int yearOfEra, int month, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute)`: This method returns a JapaneseDate object for the specified era, year, month, day, hour, minute, and second.

4. `JapaneseDate date(int era, int yearOfEra, int month, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int nanoOfSecond)`: This method returns a JapaneseDate object for the specified era, year, month, day, hour, minute, second, and nano of second.

5. `JapaneseDate date(int era, int yearOfEra, int month, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int nanoOfSecond, ZoneOffset offset)`: This method returns a JapaneseDate object for the specified era, year, month, day, hour, minute, second, nano of second, and offset.
================================================================

Sample: 5 JapaneseDate
----------------------------------------------------------------

@@ Context
Here is the description of the package Generic API for calendar systems other than the default ISO.
Here is the description of the class A date in the Japanese Imperial calendar system.

@@ Instruction
I want to use java.time.chrono.JapaneseDate package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `JapaneseDate of(int era, int yearOfEra, int month, int dayOfMonth)`: This method returns a JapaneseDate instance representing the specified date.

2. `int getYear()`: This method returns the year in the Japanese calendar system.

3. `int getMonthValue()`: This method returns the month in the Japanese calendar system.

4. `int getDayOfMonth()`: This method returns the day of the month in the Japanese calendar system.

5. `JapaneseDate plusYears(long years)`: This method adds the specified years to the JapaneseDate.

6. `JapaneseDate plusMonths(long months)`: This method adds the specified months to the JapaneseDate.

7. `JapaneseDate plusDays(long days)`: This method adds the specified days to the JapaneseDate.

8. `JapaneseDate minusYears(long years)`: This method subtracts the specified years from the JapaneseDate.

9. `JapaneseDate minusMonths(long months)`: This method subtracts the specified months from the JapaneseDate.

10. `JapaneseDate minusDays(long days)`: This method subtracts the specified days from the JapaneseDate.

11. `int compareTo(JapaneseDate other)`: This method compares this JapaneseDate with the specified JapaneseDate.

12. `boolean isLeapYear()`: This method checks if the year is a leap year in the Japanese calendar system.

13. `boolean isValidYear(int year)`: This method checks if the year is valid in the Japanese calendar system.

14. `boolean isValidMonth(int month)`: This method checks if the month is valid in the Japanese calendar system.

15. `boolean isValidDayOfMonth(int dayOfMonth)`: This method checks if the day of the month is valid in the Japanese calendar system.

16. `boolean isValidDate(int year, int month, int dayOfMonth)`: This method checks if the date is valid in the Japanese calendar system.

17. `boolean isBefore(JapaneseDate other)`: This method checks if this JapaneseDate is before the specified JapaneseDate.

18. `boolean isAfter(JapaneseDate other)`: This method checks if this JapaneseDate is after the specified JapaneseDate.

19. `boolean isEqual(JapaneseDate other)`: This method checks if this JapaneseDate is equal to the specified JapaneseDate.

20. `boolean isBeforeOrEqual(JapaneseDate other)`: This method checks if this JapaneseDate is before or equal to the specified JapaneseDate.

21. `boolean isAfterOrEqual(JapaneseDate other)`: This method checks if this JapaneseDate is after or equal to the specified JapaneseDate.

22. `boolean isEqualOrBefore(JapaneseDate other)`: This method checks if this JapaneseDate is equal or before the specified JapaneseDate.

23. `boolean isEqualOrAfter(JapaneseDate other)`: This method checks if this JapaneseDate is equal or after the specified JapaneseDate.

24. `boolean isEqualOrBeforeOrAfter(JapaneseDate other)`: This method checks if this JapaneseDate is equal or before or after the specified JapaneseDate.

25. `boolean isEqualOrBeforeOrAfterOrEqual(JapaneseDate other)`: This method checks if this JapaneseDate is equal or before or after or equal to the specified JapaneseDate.
================================================================

Sample: 6 JapaneseEra
----------------------------------------------------------------

@@ Context
Here is the description of the package Generic API for calendar systems other than the default ISO.
Here is the description of the class An era in the Japanese Imperial calendar system.

@@ Instruction
I want to use java.time.chrono.JapaneseEra package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `JapaneseEra getEra(int eraValue)`: This method returns the JapaneseEra for the specified era value.

2. `JapaneseEra getEra(String eraName)`: This method returns the JapaneseEra for the specified era name.

3. `int getValue()`: This method returns the value of this era.

4. `String getName()`: This method returns the name of this era.

5. `String getDisplayName()`: This method returns the localized name of this era.
================================================================

Sample: 7 MinguoChronology
----------------------------------------------------------------

@@ Context
Here is the description of the package Generic API for calendar systems other than the default ISO.
Here is the description of the class The Minguo calendar system.

@@ Instruction
I want to use java.time.chrono.MinguoChronology package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `MinguoChronology getInstance()`: This method returns the singleton instance of the Minguo chronology.

2. `MinguoDate date(int era, int yearOfEra, int month, int dayOfMonth)`: This method returns a MinguoDate with the specified era, year of era, month, and day of month.

3. `MinguoDate date(int era, int yearOfEra, int month, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute)`: This method returns a MinguoDate with the specified era, year of era, month, day of month, hour of day, minute of hour, and second of minute.

4. `MinguoDate date(int era, int yearOfEra, int month, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int nanoOfSecond)`: This method returns a MinguoDate with the specified era, year of era, month, day of month, hour of day, minute of hour, second of minute, and nano of second.

5. `MinguoDate date(int era, int yearOfEra, int month, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int nanoOfSecond, int zoneOffset)`: This method returns a MinguoDate with the specified era, year of era, month, day of month, hour of day, minute of hour, second of minute, nano of second, and zone offset.
================================================================

Sample: 8 MinguoDate
----------------------------------------------------------------

@@ Context
Here is the description of the package Generic API for calendar systems other than the default ISO.
Here is the description of the class A date in the Minguo calendar system.

@@ Instruction
I want to use java.time.chrono.MinguoDate package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `MinguoDate getDate()`: This method returns the date of the MinguoDate.
2. `int getDayOfMonth()`: This method returns the day-of-month in the MinguoDate.
3. `int getDayOfWeek()`: This method returns the day-of-week in the MinguoDate.
4. `int getDayOfYear()`: This method returns the day-of-year in the MinguoDate.
5. `int getMonthValue()`: This method returns the month-of-year in the MinguoDate.
6. `int getYear()`: This method returns the year in the MinguoDate.
7. `MinguoDate plusDays(long days)`: This method adds the given number of days to the MinguoDate.
8. `MinguoDate plusMonths(long months)`: This method adds the given number of months to the MinguoDate.
9. `MinguoDate plusYears(long years)`: This method adds the given number of years to the MinguoDate.
10. `MinguoDate withDayOfMonth(int dayOfMonth)`: This method returns a MinguoDate with the specified day-of-month.
11. `MinguoDate withDayOfYear(int dayOfYear)`: This method returns a MinguoDate with the specified day-of-year.
12. `MinguoDate withMonth(int month)`: This method returns a MinguoDate with the specified month.
13. `MinguoDate withYear(int year)`: This method returns a MinguoDate with the specified year.
================================================================

Sample: 9 ThaiBuddhistChronology
----------------------------------------------------------------

@@ Context
Here is the description of the package Generic API for calendar systems other than the default ISO.
Here is the description of the class The Thai Buddhist calendar system.

@@ Instruction
I want to use java.time.chrono.ThaiBuddhistChronology package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `ThaiBuddhistChronology getInstance()`: This method returns the singleton instance of the ThaiBuddhistChronology.

2. `LocalDate date(int prolepticYear, int month, int dayOfMonth)`: This method returns a LocalDate based on the specified proleptic year, month, and day of month.

3. `LocalDate date(int prolepticYear, int month, int dayOfMonth, int era)`: This method returns a LocalDate based on the specified proleptic year, month, day of month, and era.

4. `LocalDate date(int prolepticYear, int month, int dayOfMonth, int era, int leapAmount)`: This method returns a LocalDate based on the specified proleptic year, month, day of month, era, and leap amount.

5. `LocalDate date(int prolepticYear, int month, int dayOfMonth, int era, int leapAmount, int leapDay)`: This method returns a LocalDate based on the specified proleptic year, month, day of month, era, leap amount, and leap day.
================================================================

Sample: 10 ThaiBuddhistDate
----------------------------------------------------------------

@@ Context
Here is the description of the package Generic API for calendar systems other than the default ISO.
Here is the description of the class A date in the Thai Buddhist calendar system.

@@ Instruction
I want to use java.time.chrono.ThaiBuddhistDate package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `ThaiBuddhistDate of(int prolepticYear, int month, int dayOfMonth)`: This method returns a ThaiBuddhistDate instance representing the specified date.

2. `int getDayOfMonth()`: This method returns the day-of-month represented by this date.

3. `int getMonthValue()`: This method returns the month-of-year represented by this date.

4. `int getYear()`: This method returns the year represented by this date.

5. `boolean isLeapYear()`: This method returns true if this date is in a leap year in the Thai Buddhist calendar system.
================================================================

