Sample: 0 AttachmentMarshaller
----------------------------------------------------------------

@@ Context
Here is the description of the package This package is implemented by a MIME-based package processor that enables the interpretation and creation of optimized binary data within an MIME-based package format.
Here is the description of the class Enable JAXB marshalling to optimize storage of binary data.

@@ Instruction
I want to use javax.xml.bind.attachment.AttachmentMarshaller package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `AttachmentMarshaller.add(String contentId, InputStream is)`: This method adds an attachment to the marshaller.
2. `AttachmentMarshaller.add(String contentId, byte[] bytes)`: This method adds an attachment to the marshaller.
3. `AttachmentMarshaller.add(String contentId, String mimeType, InputStream is)`: This method adds an attachment to the marshaller.
4. `AttachmentMarshaller.add(String contentId, String mimeType, byte[] bytes)`: This method adds an attachment to the marshaller.
5. `AttachmentMarshaller.add(String contentId, String mimeType, String filename, InputStream is)`: This method adds an attachment to the marshaller.
6. `AttachmentMarshaller.add(String contentId, String mimeType, String filename, byte[] bytes)`: This method adds an attachment to the marshaller.
7. `AttachmentMarshaller.add(String contentId, String mimeType, String filename, String description, InputStream is)`: This method adds an attachment to the marshaller.
8. `AttachmentMarshaller.add(String contentId, String mimeType, String filename, String description, byte[] bytes)`: This method adds an attachment to the marshaller.
9. `AttachmentMarshaller.add(String contentId, String mimeType, String filename, String description, String disposition, InputStream is)`: This method adds an attachment to the marshaller.
10. `AttachmentMarshaller.add(String contentId, String mimeType, String filename, String description, String disposition, byte[] bytes)`: This method adds an attachment to the marshaller.
11. `AttachmentMarshaller.add(String contentId, String mimeType, String filename, String description, String disposition, String cid, InputStream is)`: This method adds an attachment to the marshaller.
12. `AttachmentMarshaller.add(String contentId, String mimeType, String filename, String description, String disposition, String cid, byte[] bytes)`: This method adds an attachment to the marshaller.
13. `AttachmentMarshaller.add(String contentId, String mimeType, String filename, String description, String disposition, String cid, String encoding, InputStream is)`: This method adds an attachment to the marshaller.
14. `AttachmentMarshaller.add(String contentId, String mimeType, String filename, String description, String disposition, String cid, String encoding, byte[] bytes)`: This method adds an attachment to the marshaller.
15. `AttachmentMarshaller.add(String contentId, String mimeType, String filename, String description, String disposition, String cid, String encoding, String charset, InputStream is)`: This method adds an attachment to the marshaller.
16. `AttachmentMarshaller.add(String contentId, String mimeType, String filename, String description, String disposition, String cid, String encoding, String charset, byte[] bytes)`: This method adds an attachment to the marshaller.
17. `AttachmentMarshaller.add(String contentId, String mimeType, String filename, String description, String disposition, String cid, String encoding, String charset, String language, InputStream is)`: This method adds an attachment to the marshaller.
18. `AttachmentMarshaller.add(String contentId, String mimeType, String filename, String description, String disposition, String cid, String encoding, String charset, String language, byte[] bytes)`: This method adds an attachment to the marshaller.
19. `AttachmentMarshaller.add(String contentId, String mimeType, String filename, String description, String disposition, String cid, String encoding, String charset, String language, String location, InputStream is)`: This method adds an attachment to the marshaller.
20. `AttachmentMarshaller.add(String contentId, String mimeType, String filename, String description, String disposition, String cid, String encoding, String charset, String language, String location, byte[] bytes)`: This method adds an attachment to the marshaller.
================================================================

Sample: 1 AttachmentUnmarshaller
----------------------------------------------------------------

@@ Context
Here is the description of the package This package is implemented by a MIME-based package processor that enables the interpretation and creation of optimized binary data within an MIME-based package format.
Here is the description of the class Enables JAXB unmarshalling of a root document containing optimized binary data formats.

@@ Instruction
I want to use javax.xml.bind.attachment.AttachmentUnmarshaller package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `AttachmentUnmarshaller.unmarshal(Source source)`: This method unmarshals the contents of the specified source into an object graph.

2. `AttachmentUnmarshaller.unmarshal(Source source, Class<T> resultType)`: This method unmarshals the contents of the specified source into an object graph of the specified type.

3. `AttachmentUnmarshaller.unmarshal(Source source, QName resultType)`: This method unmarshals the contents of the specified source into an object graph of the specified type.

4. `AttachmentUnmarshaller.unmarshal(Source source, Class<T> resultType, ValidationEventHandler errorHandler)`: This method unmarshals the contents of the specified source into an object graph of the specified type, using the specified error handler.

5. `AttachmentUnmarshaller.unmarshal(Source source, QName resultType, ValidationEventHandler errorHandler)`: This method unmarshals the contents of the specified source into an object graph of the specified type, using the specified error handler.
================================================================

