Sample: 0 Collectors
----------------------------------------------------------------

@@ Context
Here is the description of the package Classes to support functional-style operations on streams of elements, such as map-reduce transformations on collections.
Here is the description of the class Implementations of Collector that implement various useful reduction operations, such as accumulating elements into collections, summarizing elements according to various criteria, etc.

@@ Instruction
I want to use java.util.stream.Collectors package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `Collectors.toList()`: This method returns a Collector that accumulates the input elements into a new List.
2. `Collectors.toSet()`: This method returns a Collector that accumulates the input elements into a new Set.
3. `Collectors.toCollection(Supplier<C> collectionFactory)`: This method returns a Collector that accumulates the input elements into a new Collection, obtained by calling the provided collection factory.
4. `Collectors.joining()`: This method returns a Collector that concatenates the input elements, converting each to a string, and then concatenates the resulting strings, separating them with the specified delimiter.
5. `Collectors.averagingInt(ToIntFunction<? super T> mapper)`: This method returns a Collector that calculates the average of a Integer-valued function applied to the input elements.
================================================================

Sample: 1 StreamSupport
----------------------------------------------------------------

@@ Context
Here is the description of the package Classes to support functional-style operations on streams of elements, such as map-reduce transformations on collections.
Here is the description of the class Low-level utility methods for creating and manipulating streams.

@@ Instruction
I want to use java.util.stream.StreamSupport package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `Stream<T> stream(Spliterator<T> spliterator, boolean parallel)`: This method creates a sequential or parallel Stream from the provided Spliterator.

2. `Stream<T> stream(Spliterator<T> spliterator)`: This method creates a sequential Stream from the provided Spliterator.

3. `Stream<T> stream(Iterable<T> iterable, Spliterator.OfRef<T> spliterator)`: This method creates a Stream from the provided Iterable and Spliterator.

4. `Stream<T> stream(Iterable<T> iterable)`: This method creates a Stream from the provided Iterable.

5. `Stream<T> stream(T[] array, int startInclusive, int endExclusive)`: This method creates a Stream from the provided array, starting at the specified index (inclusive) and ending at the specified index (exclusive).
================================================================

