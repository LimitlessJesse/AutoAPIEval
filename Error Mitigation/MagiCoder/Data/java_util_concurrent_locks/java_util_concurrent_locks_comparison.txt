Sample: 0 AbstractOwnableSynchronizer
----------------------------------------------------------------

@@ Context
Here is the description of the package Interfaces and classes providing a framework for locking and waiting for conditions that is distinct from built-in synchronization and monitors.
Here is the description of the class A synchronizer that may be exclusively owned by a thread.

@@ Instruction
I want to use java.util.concurrent.locks.AbstractOwnableSynchronizer package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean isHeldByCurrentThread()`: This method returns true if the current thread holds the lock, false otherwise.

2. `void setExclusiveOwnerThread(Thread thread)`: This method sets the owner of the lock to the specified thread.

3. `Thread getExclusiveOwnerThread()`: This method returns the thread that holds the lock.

4. `boolean tryAcquire(int arg)`: This method attempts to acquire the lock.

5. `boolean release(int arg)`: This method releases the lock.
================================================================

Sample: 1 AbstractQueuedLongSynchronizer
----------------------------------------------------------------

@@ Context
Here is the description of the package Interfaces and classes providing a framework for locking and waiting for conditions that is distinct from built-in synchronization and monitors.
Here is the description of the class A version of AbstractQueuedSynchronizer in which synchronization state is maintained as a long.

@@ Instruction
I want to use java.util.concurrent.locks.AbstractQueuedLongSynchronizer package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `protected long tryAcquireShared(long arg)`: This method is used to try to acquire a shared lock.
2. `protected boolean tryReleaseShared(long arg)`: This method is used to try to release a shared lock.
3. `protected boolean isHeldExclusively()`: This method is used to check if the current thread holds the lock exclusively.
4. `protected long getState()`: This method is used to get the current state of the lock.
5. `protected void setState(long newState)`: This method is used to set the new state of the lock.
================================================================

Sample: 2 AbstractQueuedSynchronizer
----------------------------------------------------------------

@@ Context
Here is the description of the package Interfaces and classes providing a framework for locking and waiting for conditions that is distinct from built-in synchronization and monitors.
Here is the description of the class Provides a framework for implementing blocking locks and related synchronizers (semaphores, events, etc) that rely on first-in-first-out (FIFO) wait queues.

@@ Instruction
I want to use java.util.concurrent.locks.AbstractQueuedSynchronizer package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `int getState()`: This method returns the current state of the synchronizer.
2. `boolean compareAndSetState(int expect, int update)`: This method atomically sets the state to the given updated value if the current state equals to the expected value.
3. `void acquire(int arg)`: This method acquires in shared mode (shared = 1) if it is free and throws `InterruptedException` if the current thread is interrupted.
4. `boolean tryAcquire(int arg)`: This method acquires in shared mode (shared = 1) if it is free and returns `true` if successful.
5. `void release(int arg)`: This method releases a shared mode lock.
================================================================

Sample: 3 LockSupport
----------------------------------------------------------------

@@ Context
Here is the description of the package Interfaces and classes providing a framework for locking and waiting for conditions that is distinct from built-in synchronization and monitors.
Here is the description of the class Basic thread blocking primitives for creating locks and other synchronization classes.

@@ Instruction
I want to use java.util.concurrent.locks.LockSupport package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `void park(Object blocker)`: This method causes the current thread to wait until another thread invokes the unpark method for this object.

2. `void unpark(Thread thread)`: This method unparks the specified thread.

3. `void parkNanos(Object blocker, long nanos)`: This method causes the current thread to wait until another thread invokes the unpark method for this object, or the specified waiting time has elapsed.

4. `void parkUntil(Object blocker, long deadline)`: This method causes the current thread to wait until another thread invokes the unpark method for this object, or the specified time has passed.

5. `void parkNanos(Object blocker, long nanos)`: This method causes the current thread to wait until another thread invokes the unpark method for this object, or the specified waiting time has elapsed.
================================================================

Sample: 4 ReentrantLock
----------------------------------------------------------------

@@ Context
Here is the description of the package Interfaces and classes providing a framework for locking and waiting for conditions that is distinct from built-in synchronization and monitors.
Here is the description of the class A reentrant mutual exclusion Lock with the same basic behavior and semantics as the implicit monitor lock accessed using synchronized methods and statements, but with extended capabilities.

@@ Instruction
I want to use java.util.concurrent.locks.ReentrantLock package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `void lock()`: This method acquires the lock. If the lock is not available then the current thread becomes disabled for thread scheduling purposes and lies dormant until the lock has been acquired.

2. `void lockInterruptibly()`: This method is similar to `lock()` but it also provides the ability to interrupt the current thread. If the current thread is interrupted while acquiring the lock, it releases the lock and throws an `InterruptedException`.

3. `boolean tryLock()`: This method tries to acquire this lock only if it is free at the time of invocation. If it is free, the lock is acquired and the method returns true. If the lock is not available then the current thread becomes disabled for thread scheduling purposes and lies dormant until the lock has been acquired or the thread is interrupted.

4. `boolean tryLock(long time, TimeUnit unit)`: This method is similar to `tryLock()` but it also provides the ability to interrupt the current thread. If the current thread is interrupted while acquiring the lock, it releases the lock and throws an `InterruptedException`.

5. `void unlock()`: This method releases the lock. If the current thread is the holder of this lock, then the lock is released and the state of the lock becomes available and no longer held by any thread. If the current thread is not the holder of this lock, then a `IllegalMonitorStateException` is thrown.
================================================================

Sample: 5 ReentrantReadWriteLock
----------------------------------------------------------------

@@ Context
Here is the description of the package Interfaces and classes providing a framework for locking and waiting for conditions that is distinct from built-in synchronization and monitors.
Here is the description of the class An implementation of ReadWriteLock supporting similar semantics to ReentrantLock.

@@ Instruction
I want to use java.util.concurrent.locks.ReentrantReadWriteLock package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `ReentrantReadWriteLock()`: This is the constructor of the ReentrantReadWriteLock class.

2. `Lock readLock()`: This method returns the lock used for reading.

3. `Lock writeLock()`: This method returns the lock used for writing.

4. `boolean isFair()`: This method returns true if this lock is fair (i.e., it makes a reasonable attempt to provide equal access to all threads).

5. `boolean isWriteLocked()`: This method returns true if the current thread holds the write lock.

6. `boolean isWriteLockedByCurrentThread()`: This method returns true if the current thread holds the write lock.

7. `boolean isReadLocked()`: This method returns true if the current thread holds the read lock.

8. `boolean isReadLockedByCurrentThread()`: This method returns true if the current thread holds the read lock.

9. `int getReadLockCount()`: This method returns the number of currently blocked threads waiting for the read lock.

10. `int getWriteLockCount()`: This method returns the number of currently blocked threads waiting for the write lock.

11. `Condition newCondition()`: This method creates a new Condition instance.

12. `void lock()`: This method acquires the write lock.

13. `void lockInterruptibly()`: This method acquires the write lock.

14. `boolean tryLock()`: This method attempts to acquire the write lock.

15. `boolean tryLock(long time, TimeUnit unit)`: This method attempts to acquire the write lock.

16. `void unlock()`: This method releases the write lock.

17. `void readLock()`: This method acquires the read lock.

18. `void readLockInterruptibly()`: This method acquires the read lock.

19. `boolean tryReadLock()`: This method attempts to acquire the read lock.

20. `boolean tryReadLock(long time, TimeUnit unit)`: This method attempts to acquire the read lock.

21. `void unlockRead()`: This method releases the read lock.

22. `void writeLock()`: This method acquires the write lock.

23. `void writeLockInterruptibly()`: This method acquires the write lock.

24. `boolean tryWriteLock()`: This method attempts to acquire the write lock.

25. `boolean tryWriteLock(long time, TimeUnit unit)`: This method attempts to acquire the write lock.

26. `void unlockWrite()`: This method releases the write lock.
================================================================

Sample: 6 ReentrantReadWriteLock.ReadLock
----------------------------------------------------------------

@@ Context
Here is the description of the package Interfaces and classes providing a framework for locking and waiting for conditions that is distinct from built-in synchronization and monitors.
Here is the description of the class The lock returned by method ReentrantReadWriteLock.readLock().

@@ Instruction
I want to use java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `void lock()`: This method acquires the lock.
2. `boolean tryLock()`: This method attempts to acquire the lock without blocking.
3. `boolean tryLock(long time, TimeUnit unit)`: This method attempts to acquire the lock, waiting up to the specified wait time if necessary.
4. `void unlock()`: This method releases the lock.
5. `Condition newCondition()`: This method creates a new condition variable associated with this lock.
================================================================

Sample: 7 ReentrantReadWriteLock.WriteLock
----------------------------------------------------------------

@@ Context
Here is the description of the package Interfaces and classes providing a framework for locking and waiting for conditions that is distinct from built-in synchronization and monitors.
Here is the description of the class The lock returned by method ReentrantReadWriteLock.writeLock().

@@ Instruction
I want to use java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `void lock()`: This method acquires the write lock if it is available at the time of invocation.
2. `boolean tryLock()`: This method attempts to acquire the write lock if it is available at the time of invocation.
3. `boolean tryLock(long time, TimeUnit unit)`: This method attempts to acquire the write lock if it is available at the time of invocation.
4. `void unlock()`: This method releases the write lock.
5. `Condition newCondition()`: This method creates a new condition variable associated with this lock.
================================================================

Sample: 8 StampedLock
----------------------------------------------------------------

@@ Context
Here is the description of the package Interfaces and classes providing a framework for locking and waiting for conditions that is distinct from built-in synchronization and monitors.
Here is the description of the class A capability-based lock with three modes for controlling read/write access.

@@ Instruction
I want to use java.util.concurrent.locks.StampedLock package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `long writeLock()`: This method acquires a write lock. If the lock is not already held by another writer, the current thread becomes the exclusive owner of the lock.

2. `boolean tryWriteLock()`: This method attempts to acquire a write lock. If the lock is not already held by another writer, the current thread becomes the exclusive owner of the lock.

3. `long tryOptimisticRead()`: This method attempts to acquire a read lock. If the lock is not already held by another writer, the current thread becomes the exclusive owner of the lock.

4. `long readLock()`: This method acquires a read lock. If the lock is not already held by another writer, the current thread becomes the exclusive owner of the lock.

5. `void unlock(long stamp)`: This method releases the lock associated with the given stamp. If the stamp is not valid, the method throws IllegalMonitorStateException.
================================================================

