Sample: AbstractOwnableSynchronizer_2
----------------------------------------------------------------
output:
./Data/java_util_concurrent_locks/javaFiles/AbstractOwnableSynchronizer_2.java:5: error: AbstractOwnableSynchronizer is abstract; cannot be instantiated
        AbstractOwnableSynchronizer synchronizer = new AbstractOwnableSynchronizer();
                                                   ^
./Data/java_util_concurrent_locks/javaFiles/AbstractOwnableSynchronizer_2.java:7: error: setExclusiveOwnerThread(Thread) has protected access in AbstractOwnableSynchronizer
        synchronizer.setExclusiveOwnerThread(thread);
                    ^
2 errors


================================================================

Sample: AbstractOwnableSynchronizer_3
----------------------------------------------------------------
output:
./Data/java_util_concurrent_locks/javaFiles/AbstractOwnableSynchronizer_3.java:5: error: AbstractOwnableSynchronizer is abstract; cannot be instantiated
        AbstractOwnableSynchronizer synchronizer = new AbstractOwnableSynchronizer();
                                                   ^
./Data/java_util_concurrent_locks/javaFiles/AbstractOwnableSynchronizer_3.java:6: error: getExclusiveOwnerThread() has protected access in AbstractOwnableSynchronizer
        Thread ownerThread = synchronizer.getExclusiveOwnerThread();
                                         ^
2 errors


================================================================

Sample: AbstractQueuedSynchronizer_1
----------------------------------------------------------------
output:
./Data/java_util_concurrent_locks/javaFiles/AbstractQueuedSynchronizer_1.java:17: error: getState() has protected access in AbstractQueuedSynchronizer
        int state = aqs.getState();
                       ^
1 error


================================================================

Sample: AbstractQueuedSynchronizer_2
----------------------------------------------------------------
output:
./Data/java_util_concurrent_locks/javaFiles/AbstractQueuedSynchronizer_2.java:12: error: compareAndSetState(int,int) in AQS cannot override compareAndSetState(int,int) in AbstractQueuedSynchronizer
    protected boolean compareAndSetState(int expect, int update) {
                      ^
  overridden method is final
1 error


================================================================

Sample: AbstractQueuedSynchronizer_3
----------------------------------------------------------------
timeout: process took too long
================================================================

Sample: AbstractQueuedSynchronizer_4
----------------------------------------------------------------
output:
./Data/java_util_concurrent_locks/javaFiles/AbstractQueuedSynchronizer_4.java:14: error: tryAcquire(int) has protected access in AbstractQueuedSynchronizer
        boolean acquired = synchronizer.tryAcquire(1);
                                       ^
1 error


================================================================

Sample: LockSupport_1
----------------------------------------------------------------
stdout:
Thread is waiting...
LockSupport_1 thread is unparking the thread...
Thread is resumed.

================================================================

Sample: LockSupport_2
----------------------------------------------------------------
stdout:
Thread is waiting...
Unparking the thread...
Thread is unparked!

================================================================

Sample: LockSupport_3
----------------------------------------------------------------
stdout:
Thread is waiting...
Thread is resumed.
LockSupport_3 thread is unparking the thread...

================================================================

Sample: LockSupport_4
----------------------------------------------------------------
stdout:
Thread is parked
LockSupport_4 thread is unparking the other thread
Thread is unparked

================================================================

Sample: LockSupport_5
----------------------------------------------------------------
stdout:
Thread is waiting...
Thread is resumed.
LockSupport_5 thread is unparking the thread...

================================================================

Sample: ReentrantLock_1
----------------------------------------------------------------
================================================================

Sample: ReentrantLock_2
----------------------------------------------------------------
stdout:
Lock acquired by Thread-0

================================================================

Sample: ReentrantLock_3
----------------------------------------------------------------
stdout:
Lock acquired and operations performed

================================================================

Sample: ReentrantLock_4
----------------------------------------------------------------
stdout:
Lock acquired

================================================================

Sample: ReentrantLock_5
----------------------------------------------------------------
================================================================

Sample: ReentrantReadWriteLock_4
----------------------------------------------------------------
stdout:
Is the lock fair? false

================================================================

Sample: ReentrantReadWriteLock_5
----------------------------------------------------------------
stdout:
Is write lock held? false

================================================================

Sample: ReentrantReadWriteLock_6
----------------------------------------------------------------
stdout:
true

================================================================

Sample: ReentrantReadWriteLock_9
----------------------------------------------------------------
output:
./Data/java_util_concurrent_locks/javaFiles/ReentrantReadWriteLock_9.java:6: error: cannot find symbol
        int readLockCount = lock.readLock().getReadLockCount();
                                           ^
  symbol:   method getReadLockCount()
  location: class ReadLock
1 error


================================================================

Sample: ReentrantReadWriteLock_ReadLock_1
----------------------------------------------------------------
================================================================

Sample: ReentrantReadWriteLock_ReadLock_2
----------------------------------------------------------------
stdout:
Read lock acquired

================================================================

Sample: ReentrantReadWriteLock_ReadLock_3
----------------------------------------------------------------
stdout:
Read lock acquired

================================================================

Sample: ReentrantReadWriteLock_ReadLock_4
----------------------------------------------------------------
stdout:
Reading...

================================================================

Sample: ReentrantReadWriteLock_ReadLock_5
----------------------------------------------------------------
================================================================

Sample: ReentrantReadWriteLock_WriteLock_1
----------------------------------------------------------------
================================================================

Sample: ReentrantReadWriteLock_WriteLock_2
----------------------------------------------------------------
stdout:
Write lock acquired

================================================================

Sample: ReentrantReadWriteLock_WriteLock_3
----------------------------------------------------------------
stdout:
Write lock acquired

================================================================

Sample: ReentrantReadWriteLock_WriteLock_4
----------------------------------------------------------------
================================================================

Sample: ReentrantReadWriteLock_WriteLock_5
----------------------------------------------------------------
================================================================

Sample: StampedLock_1
----------------------------------------------------------------
================================================================

Sample: StampedLock_3
----------------------------------------------------------------
stdout:
Stamp: 256

================================================================

Sample: StampedLock_4
----------------------------------------------------------------
================================================================

Sample: StampedLock_5
----------------------------------------------------------------
================================================================

