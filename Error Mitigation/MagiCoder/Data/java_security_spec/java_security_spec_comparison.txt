Sample: 0 DSAGenParameterSpec
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for key specifications and algorithm parameter specifications.
Here is the description of the class This immutable class specifies the set of parameters used for generating DSA parameters as specified in FIPS 186-3 Digital Signature Standard (DSS).

@@ Instruction
I want to use java.security.spec.DSAGenParameterSpec package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `DSAGenParameterSpec(int keySize, int certainty)`: This constructor creates a new DSAGenParameterSpec with the specified key size and certainty.

2. `int getKeySize()`: This method returns the key size.

3. `int getCertainty()`: This method returns the certainty.

4. `boolean equals(Object obj)`: This method compares this DSAGenParameterSpec with the specified object.

5. `int hashCode()`: This method returns the hash code value for this DSAGenParameterSpec.
================================================================

Sample: 1 DSAParameterSpec
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for key specifications and algorithm parameter specifications.
Here is the description of the class This class specifies the set of parameters used with the DSA algorithm.

@@ Instruction
I want to use java.security.spec.DSAParameterSpec package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `DSAParameterSpec(BigInteger p, BigInteger q, BigInteger g)`: This constructor creates a new DSAParameterSpec with the specified parameters.

2. `BigInteger getG()`: This method returns the generator g.

3. `BigInteger getP()`: This method returns the prime number p.

4. `BigInteger getQ()`: This method returns the prime number q.

5. `int getL()`: This method returns the length in bits of the prime numbers p and q.

6. `boolean equals(Object obj)`: This method compares this DSAParameterSpec with the specified object.

7. `int hashCode()`: This method returns a hash code for this DSAParameterSpec.

8. `String toString()`: This method returns a string representation of this DSAParameterSpec.
================================================================

Sample: 2 DSAPrivateKeySpec
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for key specifications and algorithm parameter specifications.
Here is the description of the class This class specifies a DSA private key with its associated parameters.

@@ Instruction
I want to use java.security.spec.DSAPrivateKeySpec package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `DSAPrivateKeySpec(BigInteger x, BigInteger p, BigInteger q, BigInteger g)`: This constructor creates a new DSAPrivateKeySpec with the specified parameters.

2. `BigInteger getX()`: Returns the private key value x.

3. `BigInteger getP()`: Returns the prime number p.

4. `BigInteger getQ()`: Returns the prime number q.

5. `BigInteger getG()`: Returns the base g.
================================================================

Sample: 3 DSAPublicKeySpec
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for key specifications and algorithm parameter specifications.
Here is the description of the class This class specifies a DSA public key with its associated parameters.

@@ Instruction
I want to use java.security.spec.DSAPublicKeySpec package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `DSAPublicKeySpec(BigInteger s, BigInteger p, BigInteger q, BigInteger g)`: This constructor creates a new DSAPublicKeySpec with the specified parameters.

2. `BigInteger getG()`: This method returns the value of the public key's g parameter.

3. `BigInteger getP()`: This method returns the value of the public key's p parameter.

4. `BigInteger getQ()`: This method returns the value of the public key's q parameter.

5. `BigInteger getS()`: This method returns the value of the public key's s parameter.
================================================================

Sample: 4 ECFieldF2m
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for key specifications and algorithm parameter specifications.
Here is the description of the class This immutable class defines an elliptic curve (EC) characteristic 2 finite field.

@@ Instruction
I want to use java.security.spec.ECFieldF2m package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `ECFieldF2m(int m, int n)`: This is the constructor of the class ECFieldF2m. It takes two parameters, m and n, which are the lengths of the field elements.

2. `int getM()`: This method returns the value of the field parameter m.

3. `int getN()`: This method returns the value of the field parameter n.

4. `ECFieldF2m getField()`: This method returns the field of this ECFieldF2m.

5. `ECFieldF2mParams getParams()`: This method returns the parameters of this ECFieldF2m.
================================================================

Sample: 5 ECFieldFp
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for key specifications and algorithm parameter specifications.
Here is the description of the class This immutable class defines an elliptic curve (EC) prime finite field.

@@ Instruction
I want to use java.security.spec.ECFieldFp package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `ECFieldFp(BigInteger p)`: This is the constructor of the class ECFieldFp. It takes a BigInteger as a parameter and sets the value of the field.

2. `BigInteger getP()`: This method returns the prime modulus p of the field.

3. `ECFieldFp getField()`: This method returns the field of the ECFieldFp.

4. `ECFieldFp getField(BigInteger p)`: This method returns a new instance of ECFieldFp with the specified prime modulus p.

5. `ECFieldFp getField(int bits)`: This method returns a new instance of ECFieldFp with a prime modulus of the specified number of bits.
================================================================

Sample: 6 ECGenParameterSpec
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for key specifications and algorithm parameter specifications.
Here is the description of the class This immutable class specifies the set of parameters used for generating elliptic curve (EC) domain parameters.

@@ Instruction
I want to use java.security.spec.ECGenParameterSpec package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `ECGenParameterSpec(String algorithm)`: This constructor creates a new ECGenParameterSpec object with the specified algorithm.

2. `String getAlgorithm()`: This method returns the name of the algorithm associated with this parameter set.

3. `ECGenParameterSpec(String algorithm)`: This constructor creates a new ECGenParameterSpec object with the specified algorithm.

4. `String getAlgorithm()`: This method returns the name of the algorithm associated with this parameter set.

5. `ECGenParameterSpec(String algorithm)`: This constructor creates a new ECGenParameterSpec object with the specified algorithm.

6. `String getAlgorithm()`: This method returns the name of the algorithm associated with this parameter set.

7. `ECGenParameterSpec(String algorithm)`: This constructor creates a new ECGenParameterSpec object with the specified algorithm.

8. `String getAlgorithm()`: This method returns the name of the algorithm associated with this parameter set.

9. `ECGenParameterSpec(String algorithm)`: This constructor creates a new ECGenParameterSpec object with the specified algorithm.

10. `String getAlgorithm()`: This method returns the name of the algorithm associated with this parameter set.
================================================================

Sample: 7 ECParameterSpec
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for key specifications and algorithm parameter specifications.
Here is the description of the class This immutable class specifies the set of domain parameters used with elliptic curve cryptography (ECC).

@@ Instruction
I want to use java.security.spec.ECParameterSpec package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `ECParameterSpec(BigInteger p, BigInteger a, BigInteger b, BigInteger g, BigInteger n, BigInteger h)`: This constructor creates a new ECParameterSpec with the specified parameters.

2. `BigInteger getA()`: Returns the value of the parameter a.

3. `BigInteger getB()`: Returns the value of the parameter b.

4. `BigInteger getG()`: Returns the value of the base point g.

5. `BigInteger getN()`: Returns the value of the order n.

6. `BigInteger getH()`: Returns the value of the cofactor h.

7. `BigInteger getP()`: Returns the value of the prime p.

8. `ECParameterSpec getParams()`: Returns the parameters of this ECParameterSpec.

9. `ECParameterSpec getSpec()`: Returns the parameters of this ECParameterSpec.

10. `ECParameterSpec getParameterSpec()`: Returns the parameters of this ECParameterSpec.
================================================================

Sample: 8 ECPoint
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for key specifications and algorithm parameter specifications.
Here is the description of the class This immutable class represents a point on an elliptic curve (EC) in affine coordinates.

@@ Instruction
I want to use java.security.spec.ECPoint package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `ECPoint(byte[] w)`: This constructor creates an ECPoint from a byte array.
2. `ECPoint(BigInteger x, BigInteger y)`: This constructor creates an ECPoint from two BigInteger objects.
3. `ECPoint(ECFieldElement x, ECFieldElement y)`: This constructor creates an ECPoint from two ECFieldElement objects.
4. `ECPoint(ECFieldElement x, ECFieldElement y, boolean isInfinity)`: This constructor creates an ECPoint from two ECFieldElement objects and a boolean value.
5. `ECPoint(ECFieldElement x, ECFieldElement y, boolean isInfinity, boolean isValid)`: This constructor creates an ECPoint from two ECFieldElement objects, a boolean value, and another boolean value.
6. `ECPoint(ECFieldElement x, ECFieldElement y, boolean isInfinity, boolean isValid, boolean isInfinityOrValid)`: This constructor creates an ECPoint from two ECFieldElement objects, three boolean values.
7. `ECPoint(ECFieldElement x, ECFieldElement y, boolean isInfinity, boolean isValid, boolean isInfinityOrValid, boolean isValidOrInfinity)`: This constructor creates an ECPoint from two ECFieldElement objects, four boolean values.
8. `ECPoint(ECFieldElement x, ECFieldElement y, boolean isInfinity, boolean isValid, boolean isInfinityOrValid, boolean isValidOrInfinity, boolean isInfinityOrValidOrValid)`: This constructor creates an ECPoint from two ECFieldElement objects, five boolean values.
9. `ECPoint(ECFieldElement x, ECFieldElement y, boolean isInfinity, boolean isValid, boolean isInfinityOrValid, boolean isValidOrInfinity, boolean isInfinityOrValidOrValid, boolean isValidOrInfinityOrValidOrInfinity)`: This constructor creates an ECPoint from two ECFieldElement objects, six boolean values.
10. `ECPoint(ECFieldElement x, ECFieldElement y, boolean isInfinity, boolean isValid, boolean isInfinityOrValid, boolean isValidOrInfinity, boolean isInfinityOrValidOrValid, boolean isValidOrInfinityOrValidOrInfinity, boolean isInfinityOrValidOrValidOrInfinityOrValidOrInfinity)`: This constructor creates an ECPoint from two ECFieldElement objects, seven boolean values.
11. `ECPoint(ECFieldElement x, ECFieldElement y, boolean isInfinity, boolean isValid, boolean isInfinityOrValid, boolean isValidOrInfinity, boolean isInfinityOrValidOrValid, boolean isValidOrInfinityOrValidOrInfinity, boolean isInfinityOrValidOrValidOrInfinityOrValidOrInfinity, boolean isValidOrInfinityOrValidOrInfinityOrValidOrValidOrInfinityOrValidOrInfinityOrValidOrInfinity)`: This constructor creates an ECPoint from two ECFieldElement objects, eight boolean values.
12. `ECPoint(ECFieldElement x, ECFieldElement y, boolean isInfinity, boolean isValid, boolean isInfinityOrValid, boolean isValidOrInfinity, boolean isInfinityOrValidOrValid, boolean isValidOrInfinityOrValidOrInfinity, boolean isInfinityOrValidOrValidOrInfinityOrValidOrInfinity, boolean isValidOrInfinityOrValidOrInfinityOrValidOrValidOrInfinityOrValidOrInfinityOrValidOrInfinity, boolean isInfinityOrValidOrValidOrInfinityOrValidOrInfinityOrValidOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOrInfinityOrValidOr
================================================================

Sample: 9 ECPrivateKeySpec
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for key specifications and algorithm parameter specifications.
Here is the description of the class This immutable class specifies an elliptic curve private key with its associated parameters.

@@ Instruction
I want to use java.security.spec.ECPrivateKeySpec package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `ECPrivateKeySpec(BigInteger s, ECParameterSpec spec)`: This constructor creates a new ECPrivateKeySpec with the specified private value and parameter specification.

2. `BigInteger getS()`: This method returns the private value s for this ECPrivateKeySpec.

3. `ECParameterSpec getParams()`: This method returns the parameter specification for this ECPrivateKeySpec.

4. `boolean equals(Object obj)`: This method compares this ECPrivateKeySpec with the specified object.

5. `int hashCode()`: This method returns the hash code value for this ECPrivateKeySpec.
================================================================

Sample: 10 ECPublicKeySpec
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for key specifications and algorithm parameter specifications.
Here is the description of the class This immutable class specifies an elliptic curve public key with its associated parameters.

@@ Instruction
I want to use java.security.spec.ECPublicKeySpec package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `ECPublicKeySpec(ECPoint w, ECParameterSpec spec)`: This constructor creates a new ECPublicKeySpec with the specified point and parameter specification.

2. `ECPoint getW()`: This method returns the point W.

3. `ECParameterSpec getParams()`: This method returns the parameter specification associated with this public key.

4. `boolean equals(Object obj)`: This method compares this ECPublicKeySpec with the specified object.

5. `int hashCode()`: This method returns the hash code value for this ECPublicKeySpec.
================================================================

Sample: 11 EllipticCurve
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for key specifications and algorithm parameter specifications.
Here is the description of the class This immutable class holds the necessary values needed to represent an elliptic curve.

@@ Instruction
I want to use java.security.spec.EllipticCurve package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `EllipticCurveSpec(BigInteger a, BigInteger b, BigInteger field)`: This constructor creates a new EllipticCurveSpec with the specified parameters.

2. `BigInteger getA()`: This method returns the value of the parameter a.

3. `BigInteger getB()`: This method returns the value of the parameter b.

4. `BigInteger getField()`: This method returns the value of the field.

5. `boolean equals(Object obj)`: This method compares this EllipticCurveSpec with the specified object for equality.

6. `int hashCode()`: This method returns the hash code value for this EllipticCurveSpec.
================================================================

Sample: 12 EncodedKeySpec
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for key specifications and algorithm parameter specifications.
Here is the description of the class This class represents a public or private key in encoded format.

@@ Instruction
I want to use java.security.spec.EncodedKeySpec package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `EncodedKeySpec(byte[] encodedKey)`: This constructor creates a new `EncodedKeySpec` with the specified encoded key.

2. `byte[] getEncoded()`: This method returns the encoded form of this key.

3. `String getFormat()`: This method returns the name of the format of the encoded key.

4. `boolean isEncrypted()`: This method returns true if the key is encrypted, false otherwise.

5. `void setEncoded(byte[] encodedKey)`: This method sets the encoded form of this key.

6. `void setFormat(String format)`: This method sets the name of the format of the encoded key.

7. `void setEncrypted(boolean isEncrypted)`: This method sets whether the key is encrypted.
================================================================

Sample: 13 MGF1ParameterSpec
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for key specifications and algorithm parameter specifications.
Here is the description of the class This class specifies the set of parameters used with mask generation function MGF1 in OAEP Padding and RSASSA-PSS signature scheme, as defined in the PKCS#1 v2.2 standard.

@@ Instruction
I want to use java.security.spec.MGF1ParameterSpec package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `MGF1ParameterSpec(int hashAlgorithm, byte[] salt)`: This constructor creates a new MGF1ParameterSpec with the specified hash algorithm and salt.

2. `int getHashAlgorithm()`: This method returns the hash algorithm used in the MGF1ParameterSpec.

3. `byte[] getSalt()`: This method returns the salt used in the MGF1ParameterSpec.

4. `void setHashAlgorithm(int hashAlgorithm)`: This method sets the hash algorithm used in the MGF1ParameterSpec.

5. `void setSalt(byte[] salt)`: This method sets the salt used in the MGF1ParameterSpec.
================================================================

Sample: 14 PKCS8EncodedKeySpec
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for key specifications and algorithm parameter specifications.
Here is the description of the class This class represents the ASN.1 encoding of a private key, encoded according to the ASN.1 type PrivateKeyInfo.

@@ Instruction
I want to use java.security.spec.PKCS8EncodedKeySpec package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `PKCS8EncodedKeySpec(byte[] encoded)`: This constructor creates a new PKCS8EncodedKeySpec with the specified encoded key.

2. `byte[] getEncoded()`: This method returns the encoded form of this key.

3. `String getFormat()`: This method returns the name of the format used to encode the key.

4. `AlgorithmParameterSpec getParams()`: This method returns the algorithm parameters for this key.

5. `KeySpec getKeySpec(PrivateKey key, Class keySpec)`: This method returns a KeySpec object that represents the given private key.
================================================================

Sample: 15 PSSParameterSpec
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for key specifications and algorithm parameter specifications.
Here is the description of the class This class specifies a parameter spec for RSASSA-PSS signature scheme, as defined in the PKCS#1 v2.2 standard.

@@ Instruction
I want to use java.security.spec.PSSParameterSpec package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `PSSParameterSpec(int saltLength, int trailingDigitCount)`: This constructor creates a new PSSParameterSpec with the specified salt length and trailing digit count.

2. `int getSaltLength()`: This method returns the salt length.

3. `int getTrailingDigitCount()`: This method returns the trailing digit count.

4. `boolean equals(Object obj)`: This method compares this PSSParameterSpec with the specified object.

5. `int hashCode()`: This method returns the hash code value for this PSSParameterSpec.
================================================================

Sample: 16 RSAKeyGenParameterSpec
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for key specifications and algorithm parameter specifications.
Here is the description of the class This class specifies the set of parameters used to generate an RSA key pair.

@@ Instruction
I want to use java.security.spec.RSAKeyGenParameterSpec package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public BigInteger getPublicExponent()`: Returns the public exponent.
2. `public int getKeysize()`: Returns the keysize.
3. `public BigInteger getPrimeP()`: Returns the primeP.
4. `public BigInteger getPrimeQ()`: Returns the primeQ.
5. `public BigInteger getPrimeExponentP()`: Returns the primeExponentP.
6. `public BigInteger getPrimeExponentQ()`: Returns the primeExponentQ.
7. `public BigInteger getCrtCoefficient()`: Returns the CRT coefficient.
8. `public BigInteger getPrimeP()`: Returns the primeP.
9. `public BigInteger getPrimeQ()`: Returns the primeQ.
10. `public BigInteger getPrimeExponentP()`: Returns the primeExponentP.
11. `public BigInteger getPrimeExponentQ()`: Returns the primeExponentQ.
12. `public BigInteger getCrtCoefficient()`: Returns the CRT coefficient.
================================================================

Sample: 17 RSAMultiPrimePrivateCrtKeySpec
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for key specifications and algorithm parameter specifications.
Here is the description of the class This class specifies an RSA multi-prime private key, as defined in the PKCS#1 v2.2 standard using the Chinese Remainder Theorem (CRT) information values for efficiency.

@@ Instruction
I want to use java.security.spec.RSAMultiPrimePrivateCrtKeySpec package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `RSAMultiPrimePrivateCrtKeySpec(BigInteger modulus, BigInteger publicExponent, BigInteger privateExponent, BigInteger primeP, BigInteger primeQ, BigInteger primeExponentP, BigInteger primeExponentQ, BigInteger crtCoefficient)`: This constructor creates a new RSAMultiPrimePrivateCrtKeySpec with the specified values.

2. `BigInteger getModulus()`: Returns the modulus.

3. `BigInteger getPublicExponent()`: Returns the public exponent.

4. `BigInteger getPrivateExponent()`: Returns the private exponent.

5. `BigInteger getPrimeP()`: Returns the primeP.

6. `BigInteger getPrimeQ()`: Returns the primeQ.

7. `BigInteger getPrimeExponentP()`: Returns the primeExponentP.

8. `BigInteger getPrimeExponentQ()`: Returns the primeExponentQ.

9. `BigInteger getCrtCoefficient()`: Returns the crtCoefficient.
================================================================

Sample: 18 RSAOtherPrimeInfo
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for key specifications and algorithm parameter specifications.
Here is the description of the class This class represents the triplet (prime, exponent, and coefficient) inside RSA's OtherPrimeInfo structure, as defined in the PKCS#1 v2.2 standard.

@@ Instruction
I want to use java.security.spec.RSAOtherPrimeInfo package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `BigInteger getCoefficient()`: This method returns the coefficient of the RSAOtherPrimeInfo.

2. `BigInteger getExponent()`: This method returns the exponent of the RSAOtherPrimeInfo.

3. `BigInteger getPrime()`: This method returns the prime of the RSAOtherPrimeInfo.

4. `BigInteger getPrimitive()`: This method returns the primitive of the RSAOtherPrimeInfo.

5. `BigInteger getRM()`: This method returns the RM of the RSAOtherPrimeInfo.
================================================================

Sample: 19 RSAPrivateCrtKeySpec
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for key specifications and algorithm parameter specifications.
Here is the description of the class This class specifies an RSA private key, as defined in the PKCS#1 v2.2 standard, using the Chinese Remainder Theorem (CRT) information values for efficiency.

@@ Instruction
I want to use java.security.spec.RSAPrivateCrtKeySpec package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `RSAPrivateCrtKeySpec(BigInteger modulus, BigInteger publicExponent, BigInteger privateExponent, BigInteger primeP, BigInteger primeQ, BigInteger primeExponentP, BigInteger primeExponentQ, BigInteger crtCoefficient)`: This constructor creates a new RSAPrivateCrtKeySpec with the specified modulus, publicExponent, privateExponent, primeP, primeQ, primeExponentP, primeExponentQ, and crtCoefficient.

2. `BigInteger getModulus()`: Returns the modulus.

3. `BigInteger getPublicExponent()`: Returns the publicExponent.

4. `BigInteger getPrivateExponent()`: Returns the privateExponent.

5. `BigInteger getPrimeP()`: Returns the primeP.

6. `BigInteger getPrimeQ()`: Returns the primeQ.

7. `BigInteger getPrimeExponentP()`: Returns the primeExponentP.

8. `BigInteger getPrimeExponentQ()`: Returns the primeExponentQ.

9. `BigInteger getCrtCoefficient()`: Returns the crtCoefficient.
================================================================

Sample: 20 RSAPrivateKeySpec
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for key specifications and algorithm parameter specifications.
Here is the description of the class This class specifies an RSA private key.

@@ Instruction
I want to use java.security.spec.RSAPrivateKeySpec package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `RSAPrivateKeySpec(BigInteger modulus, BigInteger privateExponent)`: This constructor creates a new RSAPrivateKeySpec with the specified modulus and privateExponent.

2. `BigInteger getModulus()`: This method returns the modulus of this RSAPrivateKeySpec.

3. `BigInteger getPrivateExponent()`: This method returns the privateExponent of this RSAPrivateKeySpec.

4. `int hashCode()`: This method returns the hash code value for this RSAPrivateKeySpec.

5. `boolean equals(Object obj)`: This method compares this RSAPrivateKeySpec with the specified object for equality.
================================================================

Sample: 21 RSAPublicKeySpec
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for key specifications and algorithm parameter specifications.
Here is the description of the class This class specifies an RSA public key.

@@ Instruction
I want to use java.security.spec.RSAPublicKeySpec package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `RSAPublicKeySpec(BigInteger modulus, BigInteger publicExponent)`: This constructor creates a new RSAPublicKeySpec with the specified modulus and publicExponent.

2. `BigInteger getModulus()`: This method returns the modulus of this RSAPublicKeySpec.

3. `BigInteger getPublicExponent()`: This method returns the publicExponent of this RSAPublicKeySpec.

4. `int hashCode()`: This method returns the hash code value for this RSAPublicKeySpec.

5. `boolean equals(Object obj)`: This method compares this RSAPublicKeySpec with the specified object for equality.
================================================================

Sample: 22 X509EncodedKeySpec
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes and interfaces for key specifications and algorithm parameter specifications.
Here is the description of the class This class represents the ASN.1 encoding of a public key, encoded according to the ASN.1 type SubjectPublicKeyInfo.

@@ Instruction
I want to use java.security.spec.X509EncodedKeySpec package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `X509EncodedKeySpec(byte[] encoded)`: This constructor creates a new X509EncodedKeySpec with the specified encoded key.

2. `byte[] getEncoded()`: This method returns the encoded form of this key.

3. `String getFormat()`: This method returns the name of the primary encoding format of the key.

4. `KeySpec getKeySpec()`: This method returns the key specification.

5. `PublicKey getPublicKey()`: This method returns the public key.

6. `PrivateKey getPrivateKey()`: This method returns the private key.

7. `AlgorithmParameterSpec getParams()`: This method returns the algorithm parameters.

8. `AlgorithmParameterSpec getAlgorithmParameters()`: This method returns the algorithm parameters.

9. `AlgorithmParameterSpec getAlgorithmParameterSpec()`: This method returns the algorithm parameters.

10. `AlgorithmParameterSpec getAlgorithmParameterSpecs()`: This method returns the algorithm parameters.

11. `AlgorithmParameterSpec getAlgorithmParameterSpecification()`: This method returns the algorithm parameters.

12. `AlgorithmParameterSpec getAlgorithmParameterSpecifications()`: This method returns the algorithm parameters.

13. `AlgorithmParameterSpec getAlgorithmParameterSpecification()`: This method returns the algorithm parameters.

14. `AlgorithmParameterSpec getAlgorithmParameterSpecifications()`: This method returns the algorithm parameters.

15. `AlgorithmParameterSpec getAlgorithmParameterSpecification()`: This method returns the algorithm parameters.

16. `AlgorithmParameterSpec getAlgorithmParameterSpecifications()`: This method returns the algorithm parameters.

17. `AlgorithmParameterSpec getAlgorithmParameterSpecification()`: This method returns the algorithm parameters.

18. `AlgorithmParameterSpec getAlgorithmParameterSpecifications()`: This method returns the algorithm parameters.

19. `AlgorithmParameterSpec getAlgorithmParameterSpecification()`: This method returns the algorithm parameters.

20. `AlgorithmParameterSpec getAlgorithmParameterSpecifications()`: This method returns the algorithm parameters.
================================================================

