Sample: 0 AtomicBoolean
----------------------------------------------------------------

@@ Context
Here is the description of the package A small toolkit of classes that support lock-free thread-safe programming on single variables.
Here is the description of the class A boolean value that may be updated atomically.

@@ Instruction
I want to use java.util.concurrent.atomic.AtomicBoolean package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean compareAndSet(boolean expect, boolean update)`: Atomically sets the value to the given updated value if the current value == the expected value.
2. `boolean get()`: Gets the current value.
3. `void set(boolean newValue)`: Sets to the given value.
4. `boolean weakCompareAndSet(boolean expect, boolean update)`: Atomically sets the value to the given updated value if the current value == the expected value.
5. `boolean weakCompareAndSetPlain(boolean expect, boolean update)`: Atomically sets the value to the given updated value if the current value == the expected value.
================================================================

Sample: 1 AtomicInteger
----------------------------------------------------------------

@@ Context
Here is the description of the package A small toolkit of classes that support lock-free thread-safe programming on single variables.
Here is the description of the class An int value that may be updated atomically.

@@ Instruction
I want to use java.util.concurrent.atomic.AtomicInteger package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `int get()`: This method atomically reads the current value.
2. `int getAndSet(int newValue)`: This method atomically sets to the given value and returns the previous value.
3. `int getAndIncrement()`: This method atomically increments by one the current value and returns the previous value.
4. `int getAndDecrement()`: This method atomically decrements by one the current value and returns the previous value.
5. `int incrementAndGet()`: This method atomically increments by one the current value and returns the updated value.
6. `int decrementAndGet()`: This method atomically decrements by one the current value and returns the updated value.
7. `boolean compareAndSet(int expect, int update)`: This method atomically sets the value to the given updated value if the current value == the expected value.
8. `void lazySet(int newValue)`: This method atomically sets to the given value but may not be immediately visible to other threads.
9. `int addAndGet(int delta)`: This method atomically adds the given value to the current value.
10. `int getAndAdd(int delta)`: This method atomically adds the given value to the current value and returns the previous value.
11. `boolean weakCompareAndSet(int expect, int update)`: This method atomically sets to the given value if the current value == the expected value.
12. `int getAndUpdate(IntUnaryOperator updateFunction)`: This method atomically updates the current value with the results of the given function.
13. `int updateAndGet(IntUnaryOperator updateFunction)`: This method atomically updates the current value with the results of the given function and returns the updated value.
14. `int getAndAccumulate(int x, IntBinaryOperator accumulatorFunction)`: This method atomically updates the current value with the results of the given function and returns the previous value.
15. `int accumulateAndGet(int x, IntBinaryOperator accumulatorFunction)`: This method atomically updates the current value with the results of the given function and returns the updated value.
16. `void set(int newValue)`: This method atomically sets to the given value.
17. `void lazySet(int newValue)`: This method atomically sets to the given value but may not be immediately visible to other threads.
18. `boolean weakCompareAndSet(int expect, int update)`: This method atomically sets to the given value if the current value == the expected value.
19. `boolean compareAndSet(int expect, int update)`: This method atomically sets to the given value if the current value == the expected value.
20. `int getAndSet(int newValue)`: This method atomically sets to the given value and returns the previous value.
================================================================

Sample: 2 AtomicIntegerArray
----------------------------------------------------------------

@@ Context
Here is the description of the package A small toolkit of classes that support lock-free thread-safe programming on single variables.
Here is the description of the class An int array in which elements may be updated atomically.

@@ Instruction
I want to use java.util.concurrent.atomic.AtomicIntegerArray package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `int get(int i)`: This method atomically reads the value at index i.
2. `void set(int i, int newValue)`: This method atomically sets the value at index i to the newValue.
3. `int getAndSet(int i, int newValue)`: This method atomically sets the value at index i to the newValue and returns the old value.
4. `boolean compareAndSet(int i, int expect, int update)`: This method atomically sets the value at index i to the newValue if the current value at index i is equal to the expected value.
5. `void lazySet(int i, int newValue)`: This method atomically sets the value at index i to the newValue, but does not force other threads to see the change immediately.
================================================================

Sample: 3 AtomicIntegerFieldUpdater
----------------------------------------------------------------

@@ Context
Here is the description of the package A small toolkit of classes that support lock-free thread-safe programming on single variables.
Here is the description of the class A reflection-based utility that enables atomic updates to designated volatile int fields of designated classes.

@@ Instruction
I want to use java.util.concurrent.atomic.AtomicIntegerFieldUpdater package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `AtomicIntegerFieldUpdater<T> newUpdater(Class<? super T> tClass, String fieldName)`: This method creates a new AtomicIntegerFieldUpdater for the specified class and field.

2. `boolean compareAndSet(T t, int expect, int update)`: This method atomically sets the field to the given updated value if the current value is equal to the expected value.

3. `int get(T t)`: This method atomically gets the current value of the field.

4. `int getAndAdd(T t, int delta)`: This method atomically adds the given value to the current value of the field and returns the updated value.

5. `int getAndSet(T t, int newValue)`: This method atomically sets the field to the given value and returns the old value.
================================================================

Sample: 4 AtomicLong
----------------------------------------------------------------

@@ Context
Here is the description of the package A small toolkit of classes that support lock-free thread-safe programming on single variables.
Here is the description of the class A long value that may be updated atomically.

@@ Instruction
I want to use java.util.concurrent.atomic.AtomicLong package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `AtomicLong(long initialValue)`: This constructor initializes the AtomicLong with the given initial value.
2. `long get()`: This method returns the current value.
3. `long getAndSet(long newValue)`: This method atomically sets to the given value and returns the previous value.
4. `long getAndIncrement()`: This method atomically increments by one the current value and returns the previous value.
5. `long getAndDecrement()`: This method atomically decrements by one the current value and returns the previous value.
6. `long incrementAndGet()`: This method atomically increments by one the current value and returns the updated value.
7. `long decrementAndGet()`: This method atomically decrements by one the current value and returns the updated value.
8. `void lazySet(long newValue)`: This method sets the value to the given updated value only if the current value == the expected value.
9. `boolean compareAndSet(long expect, long update)`: This method atomically sets the value to the given updated value only if the current value == the expected value.
10. `long addAndGet(long delta)`: This method atomically adds the given value to the current value.
11. `long getAndAdd(long delta)`: This method atomically adds the given value to the current value and returns the previous value.
12. `long getAndAccumulate(long x, BiFunction<Long,Long,Long> accumulator)`: This method atomically updates the current value with the results of accumulating the given value with the current value.
13. `long accumulateAndGet(long x, BiFunction<Long,Long,Long> accumulator)`: This method atomically updates the current value with the results of accumulating the given value with the current value and returns the updated value.
14. `long getAndUpdate(UnaryOperator<Long> updateFunction)`: This method atomically updates the current value with the results of applying the given function to the current value and returns the previous value.
15. `long updateAndGet(UnaryOperator<Long> updateFunction)`: This method atomically updates the current value with the results of applying the given function to the current value and returns the updated value.
16. `long getAndThen(LongUnaryOperator updateFunction)`: This method atomically updates the current value with the results of applying the given function to the current value and returns the previous value.
17. `long thenAccumulate(long x, LongBinaryOperator accumulator)`: This method atomically updates the current value with the results of accumulating the given value with the current value and returns the updated value.
18. `long getAndAccumulate(long x, LongBinaryOperator accumulator)`: This method atomically updates the current value with the results of accumulating the given value with the current value and returns the previous value.
19. `long updateAndGet(LongUnaryOperator updateFunction)`: This method atomically updates the current value with the results of applying the given function to the current value and returns the updated value.
20. `long getAndUpdate(LongUnaryOperator updateFunction)`: This method atomically updates the current value with the results of applying the given function to the current value and returns the previous value.
================================================================

Sample: 5 AtomicLongArray
----------------------------------------------------------------

@@ Context
Here is the description of the package A small toolkit of classes that support lock-free thread-safe programming on single variables.
Here is the description of the class A long array in which elements may be updated atomically.

@@ Instruction
I want to use java.util.concurrent.atomic.AtomicLongArray package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `AtomicLongArray(int length)`: This method creates a new AtomicLongArray of the given length.
2. `long get(int index)`: This method atomically gets the value at the given index.
3. `void set(int index, long newValue)`: This method atomically sets the value at the given index to the given updated value.
4. `long getAndSet(int index, long newValue)`: This method atomically sets the value at the given index to the given updated value and returns the old value.
5. `long getAndIncrement(int index)`: This method atomically increments by one the value at the given index and returns the old value.
6. `long getAndDecrement(int index)`: This method atomically decrements by one the value at the given index and returns the old value.
7. `long getAndAdd(int index, long delta)`: This method atomically adds the given value to the current value at the given index and returns the old value.
8. `long incrementAndGet(int index)`: This method atomically increments by one the value at the given index and returns the updated value.
9. `long decrementAndGet(int index)`: This method atomically decrements by one the value at the given index and returns the updated value.
10. `long addAndGet(int index, long delta)`: This method atomically adds the given value to the current value at the given index and returns the updated value.
11. `void lazySet(int index, long newValue)`: This method sets the value at the given index to the given updated value.
12. `boolean compareAndSet(int index, long expect, long update)`: This method atomically sets the value at the given index to the given updated value if the current value == the expected value.
================================================================

Sample: 6 AtomicLongFieldUpdater
----------------------------------------------------------------

@@ Context
Here is the description of the package A small toolkit of classes that support lock-free thread-safe programming on single variables.
Here is the description of the class A reflection-based utility that enables atomic updates to designated volatile long fields of designated classes.

@@ Instruction
I want to use java.util.concurrent.atomic.AtomicLongFieldUpdater package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `AtomicLongFieldUpdater<T> newUpdater(Class<T> tClass, String fieldName)`: This method creates a new AtomicLongFieldUpdater for the specified class and field.

2. `boolean compareAndSet(T t, long expect, long update)`: This method atomically sets the field to the given updated value if the current value is equal to the expected value.

3. `long get(T t)`: This method atomically gets the current value of the field.

4. `void lazySet(T t, long newValue)`: This method atomically sets the field to the given value, but if the field is already set, it does nothing.

5. `boolean weakCompareAndSet(T t, long expect, long update)`: This method atomically sets the field to the given updated value if the current value is equal to the expected value. This method is a weak compare and set operation, which means that it may fail spuriously.
================================================================

Sample: 7 AtomicMarkableReference
----------------------------------------------------------------

@@ Context
Here is the description of the package A small toolkit of classes that support lock-free thread-safe programming on single variables.
Here is the description of the class An AtomicMarkableReference maintains an object reference along with a mark bit, that can be updated atomically.

@@ Instruction
I want to use java.util.concurrent.atomic.AtomicMarkableReference package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `AtomicMarkableReference(V initialRef, boolean initialMark)`: This is the constructor of AtomicMarkableReference class. It initializes the reference to the given value and mark.

2. `V getReference()`: This method returns the current reference.

3. `boolean isMarked()`: This method returns the current mark.

4. `boolean compareAndSet(V expectedReference, V newReference, boolean expectedMark, boolean newMark)`: This method atomically sets the reference to the given updated value and mark if the current reference is equal to the expected reference and the current mark is equal to the expected mark.

5. `void set(V newReference, boolean newMark)`: This method atomically sets the reference to the given value and mark.
================================================================

Sample: 8 AtomicReference
----------------------------------------------------------------

@@ Context
Here is the description of the package A small toolkit of classes that support lock-free thread-safe programming on single variables.
Here is the description of the class An object reference that may be updated atomically.

@@ Instruction
I want to use java.util.concurrent.atomic.AtomicReference package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `AtomicReference(V initialValue)`: This constructor is used to create an AtomicReference with the given initial value.

2. `V get()`: This method atomically retrieves the current value.

3. `V getAndSet(V newValue)`: This method atomically sets to the given value and returns the previous value.

4. `boolean compareAndSet(V expect, V update)`: This method atomically sets the value to the given updated value if the current value == the expected value.

5. `void lazySet(V newValue)`: This method atomically sets the value to the given updated value, but if the current thread is interrupted, the value remains unchanged.
================================================================

Sample: 9 AtomicReferenceArray
----------------------------------------------------------------

@@ Context
Here is the description of the package A small toolkit of classes that support lock-free thread-safe programming on single variables.
Here is the description of the class An array of object references in which elements may be updated atomically.

@@ Instruction
I want to use java.util.concurrent.atomic.AtomicReferenceArray package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `AtomicReferenceArray(int length)`: This method creates a new AtomicReferenceArray of the given length.
2. `AtomicReferenceArray(Object[] array)`: This method creates a new AtomicReferenceArray with the same length and content as the given array.
3. `Object get(int index)`: This method atomically retrieves the value at the given index.
4. `void set(int index, Object newValue)`: This method atomically sets the value at the given index to the given updated value.
5. `Object getAndSet(int index, Object newValue)`: This method atomically sets the value at the given index to the given updated value and returns the old value.
================================================================

Sample: 10 AtomicReferenceFieldUpdater
----------------------------------------------------------------

@@ Context
Here is the description of the package A small toolkit of classes that support lock-free thread-safe programming on single variables.
Here is the description of the class A reflection-based utility that enables atomic updates to designated volatile reference fields of designated classes.

@@ Instruction
I want to use java.util.concurrent.atomic.AtomicReferenceFieldUpdater package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `AtomicReferenceFieldUpdater<T, V> newUpdater(Class<T> tClass, String fieldName)`: This method creates a new AtomicReferenceFieldUpdater for the specified class and field.

2. `boolean compareAndSet(T t, V expect, V update)`: This method atomically updates the field of the given object to the given updated value if the current value is equal to the expected value.

3. `V get(T t)`: This method atomically reads the current value of the field of the given object.

4. `boolean weakCompareAndSet(T t, V expect, V update)`: This method atomically updates the field of the given object to the given updated value if the current value is equal to the expected value. This method is a weak compare and set operation.

5. `void set(T t, V newValue)`: This method atomically sets the field of the given object to the given value.
================================================================

Sample: 11 AtomicStampedReference
----------------------------------------------------------------

@@ Context
Here is the description of the package A small toolkit of classes that support lock-free thread-safe programming on single variables.
Here is the description of the class An AtomicStampedReference maintains an object reference along with an integer "stamp", that can be updated atomically.

@@ Instruction
I want to use java.util.concurrent.atomic.AtomicStampedReference package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `AtomicStampedReference(V initialRef, int initialStamp)`: This constructor initializes the reference and stamp to the given values.

2. `V getReference()`: This method returns the current reference.

3. `int getStamp()`: This method returns the current stamp.

4. `boolean compareAndSet(V expectedReference, V newReference, int expectedStamp, int newStamp)`: This method atomically sets the reference and stamp to the given updated values if the current reference and stamp match the expected values.

5. `void set(V newReference, int newStamp)`: This method atomically sets the reference and stamp to the given values.
================================================================

Sample: 12 DoubleAccumulator
----------------------------------------------------------------

@@ Context
Here is the description of the package A small toolkit of classes that support lock-free thread-safe programming on single variables.
Here is the description of the class One or more variables that together maintain a running double value updated using a supplied function.

@@ Instruction
I want to use java.util.concurrent.atomic.DoubleAccumulator package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `DoubleAccumulator(DoubleBinaryOperator accumulatorFunction, double identity)`: This constructor creates a new DoubleAccumulator with the given accumulator function and identity.

2. `double get()`: This method returns the current value of the accumulator.

3. `void accumulate(double x)`: This method accumulates the given value into the accumulator.

4. `void reset()`: This method resets the accumulator to its initial state.

5. `DoubleAccumulator copy()`: This method returns a copy of this accumulator.
================================================================

Sample: 13 DoubleAdder
----------------------------------------------------------------

@@ Context
Here is the description of the package A small toolkit of classes that support lock-free thread-safe programming on single variables.
Here is the description of the class One or more variables that together maintain an initially zero double sum.

@@ Instruction
I want to use java.util.concurrent.atomic.DoubleAdder package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `double add(double x)`: This method adds the given value to the current value.
2. `double sum()`: This method returns the current sum.
3. `void reset()`: This method resets the sum to zero.
4. `double doubleValue()`: This method returns the current sum as a double.
5. `long longValue()`: This method returns the current sum as a long.
6. `int intValue()`: This method returns the current sum as an int.
7. `float floatValue()`: This method returns the current sum as a float.
8. `double sumThenReset()`: This method returns the current sum and then resets the sum to zero.
9. `double get()`: This method returns the current sum.
10. `void set(double newValue)`: This method sets the current sum to the given value.
11. `void reset()`: This method resets the sum to zero.
12. `void accumulate(double x)`: This method adds the given value to the current sum.
13. `void increment()`: This method adds one to the current sum.
14. `void decrement()`: This method subtracts one from the current sum.
15. `void set(double newValue)`: This method sets the current sum to the given value.
16. `void reset()`: This method resets the sum to zero.
17. `void accumulate(double x)`: This method adds the given value to the current sum.
18. `void increment()`: This method adds one to the current sum.
19. `void decrement()`: This method subtracts one from the current sum.
20. `void set(double newValue)`: This method sets the current sum to the given value.
21. `void reset()`: This method resets the sum to zero.
22. `void accumulate(double x)`: This method adds the given value to the current sum.
23. `void increment()`: This method adds one to the current sum.
24. `void decrement()`: This method subtracts one from the current sum.
25. `void set(double newValue)`: This method sets the current sum to the given value.
26. `void reset()`: This method resets the sum to zero.
27. `void accumulate(double x)`: This method adds the given value to the current sum.
28. `void increment()`: This method adds one to the current sum.
29. `void decrement()`: This method subtracts one from the current sum.
30. `void set(double newValue)`: This method sets the current sum to the given value.
31. `void reset()`: This method resets the sum to zero.
32. `void accumulate(double x)`: This method adds the given value to the current sum.
33. `void increment()`: This method adds one to the current sum.
34. `void decrement()`: This method subtracts one from the current sum.
35. `void set(double newValue)`: This method sets the current sum to the given value.
36. `void reset()`: This method resets the sum to zero.
37. `void accumulate(double x)`: This method adds the given value to the current sum.
38. `void increment()`: This method adds one to the current sum.
39. `void decrement()`: This method subtracts one from the current sum.
40. `void set(double newValue)`: This method sets the current sum to the given value.
41. `void reset()`: This method resets the sum to zero.
42. `void accumulate(double x)`: This method adds the given value to the current sum.
43. `void increment()`: This method adds one to the current sum.
44. `void decrement()`: This method subtracts one from the current sum.
45. `void set(double newValue)`: This method sets the current sum to the given value.
46. `void reset()`: This method resets the sum to zero.
47. `void accumulate(double x)`: This method adds the given value to the current sum.
48. `void increment()`: This method adds one to the current sum.
49. `void decrement()`: This method subtracts one from the current sum.
50. `void set(double newValue)`: This method sets the current sum to the given value.
51. `void reset()`: This method resets the sum to zero.
52. `void accumulate(double x)`: This method adds the given value to the current sum.
53. `void increment()`: This method adds one to the current sum.
54. `void decrement()`: This method subtracts one from the current sum.
55. `void set(double newValue)`: This method sets the current sum to the given value.
56. `void reset()`: This method resets the sum to zero.
57. `void accumulate(double x)`: This method adds the given value to the current sum.
58. `void increment()`: This method adds one to the current sum.
59. `void decrement()`: This method subtracts one from the current sum.
60. `void set(double newValue)`: This method sets the current sum to the given value.
61. `void reset()`: This method resets the sum to zero.
62. `void accumulate(double x)`: This method adds the given value to the current sum.
63. `void increment()`: This method adds one to the current sum.
64. `void decrement()`: This method subtracts one from the current sum.
65. `void set(double newValue)`: This method sets the current sum to the given value.
66. `void reset()`: This method resets the sum to zero.
67. `void accumulate(double x)`: This method adds the given value to the current sum.
68. `void increment()`: This method adds one to the current sum.
69. `void decrement()`: This method subtracts one from the current sum.
70. `void set(double newValue)`: This method sets the current sum to the given value.
71. `void reset()`: This method resets the sum to zero.
72. `void accumulate(double x)`: This method adds the given value to the current sum.
73. `void increment()`: This method adds one to the current sum.
74. `void decrement()`: This method subtracts one from the current sum.
75. `void set(double newValue)`: This method sets the current sum to the given value.
76. `void reset()`: This method resets the sum to zero.
77. `void accumulate(double x)`: This method adds the given value to the current sum.
78. `void increment()`: This method adds one to the current sum.
79. `void decrement()`: This method subtracts one from the current sum.
80. `void set(double newValue)`: This method sets the current sum to the given value.
81. `void reset()`: This method resets the sum to zero.
82. `void accumulate(double x)`: This method adds the given value to the current sum.
83. `void increment()`: This method adds one to the current sum.
84. `void decrement()`: This method subtracts one from the current sum.
85.
================================================================

Sample: 14 LongAccumulator
----------------------------------------------------------------

@@ Context
Here is the description of the package A small toolkit of classes that support lock-free thread-safe programming on single variables.
Here is the description of the class One or more variables that together maintain a running long value updated using a supplied function.

@@ Instruction
I want to use java.util.concurrent.atomic.LongAccumulator package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `LongAccumulator(LongBinaryOperator accumulatorFunction, long identity)`: This constructor creates a new LongAccumulator with the given accumulator function and identity.

2. `void accumulate(long x)`: This method accumulates the given value into the LongAccumulator.

3. `long get()`: This method returns the current value of the LongAccumulator.

4. `void reset()`: This method resets the LongAccumulator to its initial state.

5. `LongBinaryOperator getFunction()`: This method returns the accumulator function of the LongAccumulator.
================================================================

Sample: 15 LongAdder
----------------------------------------------------------------

@@ Context
Here is the description of the package A small toolkit of classes that support lock-free thread-safe programming on single variables.
Here is the description of the class One or more variables that together maintain an initially zero long sum.

@@ Instruction
I want to use java.util.concurrent.atomic.LongAdder package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `void increment()`: This method atomically increments the current value by one.
2. `void add(long x)`: This method atomically adds the given value to the current value.
3. `long sum()`: This method returns the current sum.
4. `void reset()`: This method sets the value of this LongAdder to zero, as if a new LongAdder had been created.
5. `long sumThenReset()`: This method returns the current sum and then resets to zero.
================================================================

