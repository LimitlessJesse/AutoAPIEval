Sample Number,ClassName,Snippet Number,Method,Exist,Description
0,AtomicBoolean,1,"boolean compareAndSet(boolean expect, boolean update)",True,Atomically sets the value to the given updated value if the current value == the expected value.
0,AtomicBoolean,2,boolean get(),True,Returns the current value.
0,AtomicBoolean,3,void set(boolean newValue),True,Unconditionally sets to the given value.
0,AtomicBoolean,4,"boolean weakCompareAndSet(boolean expect, boolean update)",True,Atomically sets the value to the given updated value if the current value == the expected value.
0,AtomicBoolean,5,"boolean weakCompareAndSetPlain(boolean expect, boolean update)",False,NULL
1,AtomicInteger,1,int get(),True,Gets the current value.
1,AtomicInteger,2,int getAndSet(int newValue),True,Atomically sets to the given value and returns the old value.
1,AtomicInteger,3,int getAndIncrement(),True,Atomically increments by one the current value.
1,AtomicInteger,4,int getAndDecrement(),True,Atomically decrements by one the current value.
1,AtomicInteger,5,int incrementAndGet(),True,Atomically increments by one the current value.
1,AtomicInteger,6,int decrementAndGet(),True,Atomically decrements by one the current value.
1,AtomicInteger,7,"boolean compareAndSet(int expect, int update)",True,Atomically sets the value to the given updated value if the current value == the expected value.
1,AtomicInteger,8,void lazySet(int newValue),True,Eventually sets to the given value.
1,AtomicInteger,9,int addAndGet(int delta),True,Atomically adds the given value to the current value.
1,AtomicInteger,10,int getAndAdd(int delta),True,Atomically adds the given value to the current value.
1,AtomicInteger,11,"boolean weakCompareAndSet(int expect, int update)",True,Atomically sets the value to the given updated value if the current value == the expected value.
1,AtomicInteger,12,int getAndUpdate(IntUnaryOperator updateFunction),True,"Atomically updates the current value with the results of applying the given function, returning the previous value."
1,AtomicInteger,13,int updateAndGet(IntUnaryOperator updateFunction),True,"Atomically updates the current value with the results of applying the given function, returning the updated value."
1,AtomicInteger,14,"int getAndAccumulate(int x, IntBinaryOperator accumulatorFunction)",True,"Atomically updates the current value with the results of applying the given function to the current and given values, returning the previous value."
1,AtomicInteger,15,"int accumulateAndGet(int x, IntBinaryOperator accumulatorFunction)",True,"Atomically updates the current value with the results of applying the given function to the current and given values, returning the updated value."
1,AtomicInteger,16,void set(int newValue),True,Sets to the given value.
1,AtomicInteger,17,void lazySet(int newValue),True,Eventually sets to the given value.
1,AtomicInteger,18,"boolean weakCompareAndSet(int expect, int update)",True,Atomically sets the value to the given updated value if the current value == the expected value.
1,AtomicInteger,19,"boolean compareAndSet(int expect, int update)",True,Atomically sets the value to the given updated value if the current value == the expected value.
1,AtomicInteger,20,int getAndSet(int newValue),True,Atomically sets to the given value and returns the old value.
2,AtomicIntegerArray,1,int get(int i),True,Gets the current value at position i.
2,AtomicIntegerArray,2,"void set(int i, int newValue)",True,Sets the element at position i to the given value.
2,AtomicIntegerArray,3,"int getAndSet(int i, int newValue)",True,Atomically sets the element at position i to the given value and returns the old value.
2,AtomicIntegerArray,4,"boolean compareAndSet(int i, int expect, int update)",True,Atomically sets the element at position i to the given updated value if the current value == the expected value.
2,AtomicIntegerArray,5,"void lazySet(int i, int newValue)",True,Eventually sets the element at position i to the given value.
3,AtomicIntegerFieldUpdater,1,"AtomicIntegerFieldUpdater<T> newUpdater(Class<? super T> tClass, String fieldName)",False,NULL
3,AtomicIntegerFieldUpdater,2,"boolean compareAndSet(T t, int expect, int update)",True,Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value.
3,AtomicIntegerFieldUpdater,3,int get(T t),True,Gets the current value held in the field of the given object managed by this updater.
3,AtomicIntegerFieldUpdater,4,"int getAndAdd(T t, int delta)",True,Atomically adds the given value to the current value of the field of the given object managed by this updater.
3,AtomicIntegerFieldUpdater,5,"int getAndSet(T t, int newValue)",True,Atomically sets the field of the given object managed by this updater to the given value and returns the old value.
4,AtomicLong,1,AtomicLong(long initialValue),False,NULL
4,AtomicLong,2,long get(),True,Gets the current value.
4,AtomicLong,3,long getAndSet(long newValue),True,Atomically sets to the given value and returns the old value.
4,AtomicLong,4,long getAndIncrement(),True,Atomically increments by one the current value.
4,AtomicLong,5,long getAndDecrement(),True,Atomically decrements by one the current value.
4,AtomicLong,6,long incrementAndGet(),True,Atomically increments by one the current value.
4,AtomicLong,7,long decrementAndGet(),True,Atomically decrements by one the current value.
4,AtomicLong,8,void lazySet(long newValue),True,Eventually sets to the given value.
4,AtomicLong,9,"boolean compareAndSet(long expect, long update)",True,Atomically sets the value to the given updated value if the current value == the expected value.
4,AtomicLong,10,long addAndGet(long delta),True,Atomically adds the given value to the current value.
4,AtomicLong,11,long getAndAdd(long delta),True,Atomically adds the given value to the current value.
4,AtomicLong,12,"long getAndAccumulate(long x, BiFunction<Long,Long,Long> accumulator)",False,NULL
4,AtomicLong,13,"long accumulateAndGet(long x, BiFunction<Long,Long,Long> accumulator)",False,NULL
4,AtomicLong,14,long getAndUpdate(UnaryOperator<Long> updateFunction),False,NULL
4,AtomicLong,15,long updateAndGet(UnaryOperator<Long> updateFunction),False,NULL
4,AtomicLong,16,long getAndThen(LongUnaryOperator updateFunction),False,NULL
4,AtomicLong,17,"long thenAccumulate(long x, LongBinaryOperator accumulator)",False,NULL
4,AtomicLong,18,"long getAndAccumulate(long x, LongBinaryOperator accumulator)",True,"Atomically updates the current value with the results of applying the given function to the current and given values, returning the previous value."
4,AtomicLong,19,long updateAndGet(LongUnaryOperator updateFunction),True,"Atomically updates the current value with the results of applying the given function, returning the updated value."
4,AtomicLong,20,long getAndUpdate(LongUnaryOperator updateFunction),True,"Atomically updates the current value with the results of applying the given function, returning the previous value."
5,AtomicLongArray,1,AtomicLongArray(int length),False,NULL
5,AtomicLongArray,2,long get(int index),True,Gets the current value at position i.
5,AtomicLongArray,3,"void set(int index, long newValue)",True,Sets the element at position i to the given value.
5,AtomicLongArray,4,"long getAndSet(int index, long newValue)",True,Atomically sets the element at position i to the given value and returns the old value.
5,AtomicLongArray,5,long getAndIncrement(int index),True,Atomically increments by one the element at index i.
5,AtomicLongArray,6,long getAndDecrement(int index),True,Atomically decrements by one the element at index i.
5,AtomicLongArray,7,"long getAndAdd(int index, long delta)",True,Atomically adds the given value to the element at index i.
5,AtomicLongArray,8,long incrementAndGet(int index),True,Atomically increments by one the element at index i.
5,AtomicLongArray,9,long decrementAndGet(int index),True,Atomically decrements by one the element at index i.
5,AtomicLongArray,10,"long addAndGet(int index, long delta)",True,Atomically adds the given value to the element at index i.
5,AtomicLongArray,11,"void lazySet(int index, long newValue)",True,Eventually sets the element at position i to the given value.
5,AtomicLongArray,12,"boolean compareAndSet(int index, long expect, long update)",True,Atomically sets the element at position i to the given updated value if the current value == the expected value.
6,AtomicLongFieldUpdater,1,"AtomicLongFieldUpdater<T> newUpdater(Class<T> tClass, String fieldName)",False,NULL
6,AtomicLongFieldUpdater,2,"boolean compareAndSet(T t, long expect, long update)",True,Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value.
6,AtomicLongFieldUpdater,3,long get(T t),True,Gets the current value held in the field of the given object managed by this updater.
6,AtomicLongFieldUpdater,4,"void lazySet(T t, long newValue)",True,Eventually sets the field of the given object managed by this updater to the given updated value.
6,AtomicLongFieldUpdater,5,"boolean weakCompareAndSet(T t, long expect, long update)",True,Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value.
7,AtomicMarkableReference,1,"AtomicMarkableReference(V initialRef, boolean initialMark)",False,NULL
7,AtomicMarkableReference,2,V getReference(),True,Returns the current value of the reference.
7,AtomicMarkableReference,3,boolean isMarked(),True,Returns the current value of the mark.
7,AtomicMarkableReference,4,"boolean compareAndSet(V expectedReference, V newReference, boolean expectedMark, boolean newMark)",True,Atomically sets the value of both the reference and mark to the given update values if the current reference is == to the expected reference and the current mark is equal to the expected mark.
7,AtomicMarkableReference,5,"void set(V newReference, boolean newMark)",True,Unconditionally sets the value of both the reference and mark.
8,AtomicReference,1,AtomicReference(V initialValue),False,NULL
8,AtomicReference,2,V get(),True,Gets the current value.
8,AtomicReference,3,V getAndSet(V newValue),True,Atomically sets to the given value and returns the old value.
8,AtomicReference,4,"boolean compareAndSet(V expect, V update)",True,Atomically sets the value to the given updated value if the current value == the expected value.
8,AtomicReference,5,void lazySet(V newValue),True,Eventually sets to the given value.
9,AtomicReferenceArray,1,AtomicReferenceArray(int length),False,NULL
9,AtomicReferenceArray,2,AtomicReferenceArray(Object[] array),False,NULL
9,AtomicReferenceArray,3,Object get(int index),False,NULL
9,AtomicReferenceArray,4,"void set(int index, Object newValue)",False,NULL
9,AtomicReferenceArray,5,"Object getAndSet(int index, Object newValue)",False,NULL
10,AtomicReferenceFieldUpdater,1,"AtomicReferenceFieldUpdater<T, V> newUpdater(Class<T> tClass, String fieldName)",False,NULL
10,AtomicReferenceFieldUpdater,2,"boolean compareAndSet(T t, V expect, V update)",True,Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value.
10,AtomicReferenceFieldUpdater,3,V get(T t),True,Gets the current value held in the field of the given object managed by this updater.
10,AtomicReferenceFieldUpdater,4,"boolean weakCompareAndSet(T t, V expect, V update)",True,Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value.
10,AtomicReferenceFieldUpdater,5,"void set(T t, V newValue)",True,Sets the field of the given object managed by this updater to the given updated value.
11,AtomicStampedReference,1,"AtomicStampedReference(V initialRef, int initialStamp)",False,NULL
11,AtomicStampedReference,2,V getReference(),True,Returns the current value of the reference.
11,AtomicStampedReference,3,int getStamp(),True,Returns the current value of the stamp.
11,AtomicStampedReference,4,"boolean compareAndSet(V expectedReference, V newReference, int expectedStamp, int newStamp)",True,Atomically sets the value of both the reference and stamp to the given update values if the current reference is == to the expected reference and the current stamp is equal to the expected stamp.
11,AtomicStampedReference,5,"void set(V newReference, int newStamp)",True,Unconditionally sets the value of both the reference and stamp.
12,DoubleAccumulator,1,"DoubleAccumulator(DoubleBinaryOperator accumulatorFunction, double identity)",False,NULL
12,DoubleAccumulator,2,double get(),True,Returns the current value.
12,DoubleAccumulator,3,void accumulate(double x),True,Updates with the given value.
12,DoubleAccumulator,4,void reset(),True,Resets variables maintaining updates to the identity value.
12,DoubleAccumulator,5,DoubleAccumulator copy(),False,NULL
13,DoubleAdder,1,double add(double x),False,NULL
13,DoubleAdder,2,double sum(),True,Returns the current sum.
13,DoubleAdder,3,void reset(),True,Resets variables maintaining the sum to zero.
13,DoubleAdder,4,double doubleValue(),True,Equivalent to sum().
13,DoubleAdder,5,long longValue(),True,Returns the sum() as a long after a narrowing primitive conversion.
13,DoubleAdder,6,int intValue(),True,Returns the sum() as an int after a narrowing primitive conversion.
13,DoubleAdder,7,float floatValue(),True,Returns the sum() as a float after a narrowing primitive conversion.
13,DoubleAdder,8,double sumThenReset(),True,Equivalent in effect to sum() followed by reset().
13,DoubleAdder,9,double get(),False,NULL
13,DoubleAdder,10,void set(double newValue),False,NULL
13,DoubleAdder,11,void reset(),True,Resets variables maintaining the sum to zero.
13,DoubleAdder,12,void accumulate(double x),False,NULL
13,DoubleAdder,13,void increment(),False,NULL
13,DoubleAdder,14,void decrement(),False,NULL
13,DoubleAdder,15,void set(double newValue),False,NULL
13,DoubleAdder,16,void reset(),True,Resets variables maintaining the sum to zero.
13,DoubleAdder,17,void accumulate(double x),False,NULL
13,DoubleAdder,18,void increment(),False,NULL
13,DoubleAdder,19,void decrement(),False,NULL
13,DoubleAdder,20,void set(double newValue),False,NULL
13,DoubleAdder,21,void reset(),True,Resets variables maintaining the sum to zero.
13,DoubleAdder,22,void accumulate(double x),False,NULL
13,DoubleAdder,23,void increment(),False,NULL
13,DoubleAdder,24,void decrement(),False,NULL
13,DoubleAdder,25,void set(double newValue),False,NULL
13,DoubleAdder,26,void reset(),True,Resets variables maintaining the sum to zero.
13,DoubleAdder,27,void accumulate(double x),False,NULL
13,DoubleAdder,28,void increment(),False,NULL
13,DoubleAdder,29,void decrement(),False,NULL
13,DoubleAdder,30,void set(double newValue),False,NULL
13,DoubleAdder,31,void reset(),True,Resets variables maintaining the sum to zero.
13,DoubleAdder,32,void accumulate(double x),False,NULL
13,DoubleAdder,33,void increment(),False,NULL
13,DoubleAdder,34,void decrement(),False,NULL
13,DoubleAdder,35,void set(double newValue),False,NULL
13,DoubleAdder,36,void reset(),True,Resets variables maintaining the sum to zero.
13,DoubleAdder,37,void accumulate(double x),False,NULL
13,DoubleAdder,38,void increment(),False,NULL
13,DoubleAdder,39,void decrement(),False,NULL
13,DoubleAdder,40,void set(double newValue),False,NULL
13,DoubleAdder,41,void reset(),True,Resets variables maintaining the sum to zero.
13,DoubleAdder,42,void accumulate(double x),False,NULL
13,DoubleAdder,43,void increment(),False,NULL
13,DoubleAdder,44,void decrement(),False,NULL
13,DoubleAdder,45,void set(double newValue),False,NULL
13,DoubleAdder,46,void reset(),True,Resets variables maintaining the sum to zero.
13,DoubleAdder,47,void accumulate(double x),False,NULL
13,DoubleAdder,48,void increment(),False,NULL
13,DoubleAdder,49,void decrement(),False,NULL
13,DoubleAdder,50,void set(double newValue),False,NULL
13,DoubleAdder,51,void reset(),True,Resets variables maintaining the sum to zero.
13,DoubleAdder,52,void accumulate(double x),False,NULL
13,DoubleAdder,53,void increment(),False,NULL
13,DoubleAdder,54,void decrement(),False,NULL
13,DoubleAdder,55,void set(double newValue),False,NULL
13,DoubleAdder,56,void reset(),True,Resets variables maintaining the sum to zero.
13,DoubleAdder,57,void accumulate(double x),False,NULL
13,DoubleAdder,58,void increment(),False,NULL
13,DoubleAdder,59,void decrement(),False,NULL
13,DoubleAdder,60,void set(double newValue),False,NULL
13,DoubleAdder,61,void reset(),True,Resets variables maintaining the sum to zero.
13,DoubleAdder,62,void accumulate(double x),False,NULL
13,DoubleAdder,63,void increment(),False,NULL
13,DoubleAdder,64,void decrement(),False,NULL
13,DoubleAdder,65,void set(double newValue),False,NULL
13,DoubleAdder,66,void reset(),True,Resets variables maintaining the sum to zero.
13,DoubleAdder,67,void accumulate(double x),False,NULL
13,DoubleAdder,68,void increment(),False,NULL
13,DoubleAdder,69,void decrement(),False,NULL
13,DoubleAdder,70,void set(double newValue),False,NULL
13,DoubleAdder,71,void reset(),True,Resets variables maintaining the sum to zero.
13,DoubleAdder,72,void accumulate(double x),False,NULL
13,DoubleAdder,73,void increment(),False,NULL
13,DoubleAdder,74,void decrement(),False,NULL
13,DoubleAdder,75,void set(double newValue),False,NULL
13,DoubleAdder,76,void reset(),True,Resets variables maintaining the sum to zero.
13,DoubleAdder,77,void accumulate(double x),False,NULL
13,DoubleAdder,78,void increment(),False,NULL
13,DoubleAdder,79,void decrement(),False,NULL
13,DoubleAdder,80,void set(double newValue),False,NULL
13,DoubleAdder,81,void reset(),True,Resets variables maintaining the sum to zero.
13,DoubleAdder,82,void accumulate(double x),False,NULL
13,DoubleAdder,83,void increment(),False,NULL
13,DoubleAdder,84,void decrement(),False,NULL
14,LongAccumulator,1,"LongAccumulator(LongBinaryOperator accumulatorFunction, long identity)",False,NULL
14,LongAccumulator,2,void accumulate(long x),True,Updates with the given value.
14,LongAccumulator,3,long get(),True,Returns the current value.
14,LongAccumulator,4,void reset(),True,Resets variables maintaining updates to the identity value.
14,LongAccumulator,5,LongBinaryOperator getFunction(),False,NULL
15,LongAdder,1,void increment(),True,Equivalent to add(1).
15,LongAdder,2,void add(long x),True,Adds the given value.
15,LongAdder,3,long sum(),True,Returns the current sum.
15,LongAdder,4,void reset(),True,Resets variables maintaining the sum to zero.
15,LongAdder,5,long sumThenReset(),True,Equivalent in effect to sum() followed by reset().
