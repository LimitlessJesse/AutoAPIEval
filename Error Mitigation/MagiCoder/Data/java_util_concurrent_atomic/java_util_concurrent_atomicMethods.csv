ClassName,Method,Return Type,Description
AtomicBoolean,"compareAndSet(boolean expect, boolean update)",boolean,Atomically sets the value to the given updated value if the current value == the expected value.
AtomicBoolean,get(),boolean,Returns the current value.
AtomicBoolean,getAndSet(boolean newValue),boolean,Atomically sets to the given value and returns the previous value.
AtomicBoolean,lazySet(boolean newValue),void,Eventually sets to the given value.
AtomicBoolean,set(boolean newValue),void,Unconditionally sets to the given value.
AtomicBoolean,toString(),String,Returns the String representation of the current value.
AtomicBoolean,"weakCompareAndSet(boolean expect, boolean update)",boolean,Atomically sets the value to the given updated value if the current value == the expected value.
AtomicInteger,"accumulateAndGet(int x, IntBinaryOperator accumulatorFunction)",int,"Atomically updates the current value with the results of applying the given function to the current and given values, returning the updated value."
AtomicInteger,addAndGet(int delta),int,Atomically adds the given value to the current value.
AtomicInteger,"compareAndSet(int expect, int update)",boolean,Atomically sets the value to the given updated value if the current value == the expected value.
AtomicInteger,decrementAndGet(),int,Atomically decrements by one the current value.
AtomicInteger,doubleValue(),double,Returns the value of this AtomicInteger as a double after a widening primitive conversion.
AtomicInteger,floatValue(),float,Returns the value of this AtomicInteger as a float after a widening primitive conversion.
AtomicInteger,get(),int,Gets the current value.
AtomicInteger,"getAndAccumulate(int x, IntBinaryOperator accumulatorFunction)",int,"Atomically updates the current value with the results of applying the given function to the current and given values, returning the previous value."
AtomicInteger,getAndAdd(int delta),int,Atomically adds the given value to the current value.
AtomicInteger,getAndDecrement(),int,Atomically decrements by one the current value.
AtomicInteger,getAndIncrement(),int,Atomically increments by one the current value.
AtomicInteger,getAndSet(int newValue),int,Atomically sets to the given value and returns the old value.
AtomicInteger,getAndUpdate(IntUnaryOperator updateFunction),int,"Atomically updates the current value with the results of applying the given function, returning the previous value."
AtomicInteger,incrementAndGet(),int,Atomically increments by one the current value.
AtomicInteger,intValue(),int,Returns the value of this AtomicInteger as an int.
AtomicInteger,lazySet(int newValue),void,Eventually sets to the given value.
AtomicInteger,longValue(),long,Returns the value of this AtomicInteger as a long after a widening primitive conversion.
AtomicInteger,set(int newValue),void,Sets to the given value.
AtomicInteger,toString(),String,Returns the String representation of the current value.
AtomicInteger,updateAndGet(IntUnaryOperator updateFunction),int,"Atomically updates the current value with the results of applying the given function, returning the updated value."
AtomicInteger,"weakCompareAndSet(int expect, int update)",boolean,Atomically sets the value to the given updated value if the current value == the expected value.
AtomicIntegerArray,"accumulateAndGet(int i, int x, IntBinaryOperator accumulatorFunction)",int,"Atomically updates the element at index i with the results of applying the given function to the current and given values, returning the updated value."
AtomicIntegerArray,"addAndGet(int i, int delta)",int,Atomically adds the given value to the element at index i.
AtomicIntegerArray,"compareAndSet(int i, int expect, int update)",boolean,Atomically sets the element at position i to the given updated value if the current value == the expected value.
AtomicIntegerArray,decrementAndGet(int i),int,Atomically decrements by one the element at index i.
AtomicIntegerArray,get(int i),int,Gets the current value at position i.
AtomicIntegerArray,"getAndAccumulate(int i, int x, IntBinaryOperator accumulatorFunction)",int,"Atomically updates the element at index i with the results of applying the given function to the current and given values, returning the previous value."
AtomicIntegerArray,"getAndAdd(int i, int delta)",int,Atomically adds the given value to the element at index i.
AtomicIntegerArray,getAndDecrement(int i),int,Atomically decrements by one the element at index i.
AtomicIntegerArray,getAndIncrement(int i),int,Atomically increments by one the element at index i.
AtomicIntegerArray,"getAndSet(int i, int newValue)",int,Atomically sets the element at position i to the given value and returns the old value.
AtomicIntegerArray,"getAndUpdate(int i, IntUnaryOperator updateFunction)",int,"Atomically updates the element at index i with the results of applying the given function, returning the previous value."
AtomicIntegerArray,incrementAndGet(int i),int,Atomically increments by one the element at index i.
AtomicIntegerArray,"lazySet(int i, int newValue)",void,Eventually sets the element at position i to the given value.
AtomicIntegerArray,length(),int,Returns the length of the array.
AtomicIntegerArray,"set(int i, int newValue)",void,Sets the element at position i to the given value.
AtomicIntegerArray,toString(),String,Returns the String representation of the current values of array.
AtomicIntegerArray,"updateAndGet(int i, IntUnaryOperator updateFunction)",int,"Atomically updates the element at index i with the results of applying the given function, returning the updated value."
AtomicIntegerArray,"weakCompareAndSet(int i, int expect, int update)",boolean,Atomically sets the element at position i to the given updated value if the current value == the expected value.
AtomicIntegerFieldUpdater,"accumulateAndGet(T obj, int x, IntBinaryOperator accumulatorFunction)",int,"Atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the updated value."
AtomicIntegerFieldUpdater,"addAndGet(T obj, int delta)",int,Atomically adds the given value to the current value of the field of the given object managed by this updater.
AtomicIntegerFieldUpdater,"compareAndSet(T obj, int expect, int update)",abstract boolean,Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value.
AtomicIntegerFieldUpdater,decrementAndGet(T obj),int,Atomically decrements by one the current value of the field of the given object managed by this updater.
AtomicIntegerFieldUpdater,get(T obj),abstract int,Gets the current value held in the field of the given object managed by this updater.
AtomicIntegerFieldUpdater,"getAndAccumulate(T obj, int x, IntBinaryOperator accumulatorFunction)",int,"Atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the previous value."
AtomicIntegerFieldUpdater,"getAndAdd(T obj, int delta)",int,Atomically adds the given value to the current value of the field of the given object managed by this updater.
AtomicIntegerFieldUpdater,getAndDecrement(T obj),int,Atomically decrements by one the current value of the field of the given object managed by this updater.
AtomicIntegerFieldUpdater,getAndIncrement(T obj),int,Atomically increments by one the current value of the field of the given object managed by this updater.
AtomicIntegerFieldUpdater,"getAndSet(T obj, int newValue)",int,Atomically sets the field of the given object managed by this updater to the given value and returns the old value.
AtomicIntegerFieldUpdater,"getAndUpdate(T obj, IntUnaryOperator updateFunction)",int,"Atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the previous value."
AtomicIntegerFieldUpdater,incrementAndGet(T obj),int,Atomically increments by one the current value of the field of the given object managed by this updater.
AtomicIntegerFieldUpdater,"lazySet(T obj, int newValue)",abstract void,Eventually sets the field of the given object managed by this updater to the given updated value.
AtomicIntegerFieldUpdater,"newUpdater(Class<U> tclass, String fieldName)",static <U> AtomicIntegerFieldUpdater<U>,Creates and returns an updater for objects with the given field.
AtomicIntegerFieldUpdater,"set(T obj, int newValue)",abstract void,Sets the field of the given object managed by this updater to the given updated value.
AtomicIntegerFieldUpdater,"updateAndGet(T obj, IntUnaryOperator updateFunction)",int,"Atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the updated value."
AtomicIntegerFieldUpdater,"weakCompareAndSet(T obj, int expect, int update)",abstract boolean,Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value.
AtomicLong,"accumulateAndGet(long x, LongBinaryOperator accumulatorFunction)",long,"Atomically updates the current value with the results of applying the given function to the current and given values, returning the updated value."
AtomicLong,addAndGet(long delta),long,Atomically adds the given value to the current value.
AtomicLong,"compareAndSet(long expect, long update)",boolean,Atomically sets the value to the given updated value if the current value == the expected value.
AtomicLong,decrementAndGet(),long,Atomically decrements by one the current value.
AtomicLong,doubleValue(),double,Returns the value of this AtomicLong as a double after a widening primitive conversion.
AtomicLong,floatValue(),float,Returns the value of this AtomicLong as a float after a widening primitive conversion.
AtomicLong,get(),long,Gets the current value.
AtomicLong,"getAndAccumulate(long x, LongBinaryOperator accumulatorFunction)",long,"Atomically updates the current value with the results of applying the given function to the current and given values, returning the previous value."
AtomicLong,getAndAdd(long delta),long,Atomically adds the given value to the current value.
AtomicLong,getAndDecrement(),long,Atomically decrements by one the current value.
AtomicLong,getAndIncrement(),long,Atomically increments by one the current value.
AtomicLong,getAndSet(long newValue),long,Atomically sets to the given value and returns the old value.
AtomicLong,getAndUpdate(LongUnaryOperator updateFunction),long,"Atomically updates the current value with the results of applying the given function, returning the previous value."
AtomicLong,incrementAndGet(),long,Atomically increments by one the current value.
AtomicLong,intValue(),int,Returns the value of this AtomicLong as an int after a narrowing primitive conversion.
AtomicLong,lazySet(long newValue),void,Eventually sets to the given value.
AtomicLong,longValue(),long,Returns the value of this AtomicLong as a long.
AtomicLong,set(long newValue),void,Sets to the given value.
AtomicLong,toString(),String,Returns the String representation of the current value.
AtomicLong,updateAndGet(LongUnaryOperator updateFunction),long,"Atomically updates the current value with the results of applying the given function, returning the updated value."
AtomicLong,"weakCompareAndSet(long expect, long update)",boolean,Atomically sets the value to the given updated value if the current value == the expected value.
AtomicLongArray,"accumulateAndGet(int i, long x, LongBinaryOperator accumulatorFunction)",long,"Atomically updates the element at index i with the results of applying the given function to the current and given values, returning the updated value."
AtomicLongArray,"addAndGet(int i, long delta)",long,Atomically adds the given value to the element at index i.
AtomicLongArray,"compareAndSet(int i, long expect, long update)",boolean,Atomically sets the element at position i to the given updated value if the current value == the expected value.
AtomicLongArray,decrementAndGet(int i),long,Atomically decrements by one the element at index i.
AtomicLongArray,get(int i),long,Gets the current value at position i.
AtomicLongArray,"getAndAccumulate(int i, long x, LongBinaryOperator accumulatorFunction)",long,"Atomically updates the element at index i with the results of applying the given function to the current and given values, returning the previous value."
AtomicLongArray,"getAndAdd(int i, long delta)",long,Atomically adds the given value to the element at index i.
AtomicLongArray,getAndDecrement(int i),long,Atomically decrements by one the element at index i.
AtomicLongArray,getAndIncrement(int i),long,Atomically increments by one the element at index i.
AtomicLongArray,"getAndSet(int i, long newValue)",long,Atomically sets the element at position i to the given value and returns the old value.
AtomicLongArray,"getAndUpdate(int i, LongUnaryOperator updateFunction)",long,"Atomically updates the element at index i with the results of applying the given function, returning the previous value."
AtomicLongArray,incrementAndGet(int i),long,Atomically increments by one the element at index i.
AtomicLongArray,"lazySet(int i, long newValue)",void,Eventually sets the element at position i to the given value.
AtomicLongArray,length(),int,Returns the length of the array.
AtomicLongArray,"set(int i, long newValue)",void,Sets the element at position i to the given value.
AtomicLongArray,toString(),String,Returns the String representation of the current values of array.
AtomicLongArray,"updateAndGet(int i, LongUnaryOperator updateFunction)",long,"Atomically updates the element at index i with the results of applying the given function, returning the updated value."
AtomicLongArray,"weakCompareAndSet(int i, long expect, long update)",boolean,Atomically sets the element at position i to the given updated value if the current value == the expected value.
AtomicLongFieldUpdater,"accumulateAndGet(T obj, long x, LongBinaryOperator accumulatorFunction)",long,"Atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the updated value."
AtomicLongFieldUpdater,"addAndGet(T obj, long delta)",long,Atomically adds the given value to the current value of the field of the given object managed by this updater.
AtomicLongFieldUpdater,"compareAndSet(T obj, long expect, long update)",abstract boolean,Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value.
AtomicLongFieldUpdater,decrementAndGet(T obj),long,Atomically decrements by one the current value of the field of the given object managed by this updater.
AtomicLongFieldUpdater,get(T obj),abstract long,Gets the current value held in the field of the given object managed by this updater.
AtomicLongFieldUpdater,"getAndAccumulate(T obj, long x, LongBinaryOperator accumulatorFunction)",long,"Atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the previous value."
AtomicLongFieldUpdater,"getAndAdd(T obj, long delta)",long,Atomically adds the given value to the current value of the field of the given object managed by this updater.
AtomicLongFieldUpdater,getAndDecrement(T obj),long,Atomically decrements by one the current value of the field of the given object managed by this updater.
AtomicLongFieldUpdater,getAndIncrement(T obj),long,Atomically increments by one the current value of the field of the given object managed by this updater.
AtomicLongFieldUpdater,"getAndSet(T obj, long newValue)",long,Atomically sets the field of the given object managed by this updater to the given value and returns the old value.
AtomicLongFieldUpdater,"getAndUpdate(T obj, LongUnaryOperator updateFunction)",long,"Atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the previous value."
AtomicLongFieldUpdater,incrementAndGet(T obj),long,Atomically increments by one the current value of the field of the given object managed by this updater.
AtomicLongFieldUpdater,"lazySet(T obj, long newValue)",abstract void,Eventually sets the field of the given object managed by this updater to the given updated value.
AtomicLongFieldUpdater,"newUpdater(Class<U> tclass, String fieldName)",static <U> AtomicLongFieldUpdater<U>,Creates and returns an updater for objects with the given field.
AtomicLongFieldUpdater,"set(T obj, long newValue)",abstract void,Sets the field of the given object managed by this updater to the given updated value.
AtomicLongFieldUpdater,"updateAndGet(T obj, LongUnaryOperator updateFunction)",long,"Atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the updated value."
AtomicLongFieldUpdater,"weakCompareAndSet(T obj, long expect, long update)",abstract boolean,Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value.
AtomicMarkableReference,"attemptMark(V expectedReference, boolean newMark)",boolean,Atomically sets the value of the mark to the given update value if the current reference is == to the expected reference.
AtomicMarkableReference,"compareAndSet(V expectedReference, V newReference, boolean expectedMark, boolean newMark)",boolean,Atomically sets the value of both the reference and mark to the given update values if the current reference is == to the expected reference and the current mark is equal to the expected mark.
AtomicMarkableReference,get(boolean[] markHolder),V,Returns the current values of both the reference and the mark.
AtomicMarkableReference,getReference(),V,Returns the current value of the reference.
AtomicMarkableReference,isMarked(),boolean,Returns the current value of the mark.
AtomicMarkableReference,"set(V newReference, boolean newMark)",void,Unconditionally sets the value of both the reference and mark.
AtomicMarkableReference,"weakCompareAndSet(V expectedReference, V newReference, boolean expectedMark, boolean newMark)",boolean,Atomically sets the value of both the reference and mark to the given update values if the current reference is == to the expected reference and the current mark is equal to the expected mark.
AtomicReference,"accumulateAndGet(V x, BinaryOperator<V> accumulatorFunction)",V,"Atomically updates the current value with the results of applying the given function to the current and given values, returning the updated value."
AtomicReference,"compareAndSet(V expect, V update)",boolean,Atomically sets the value to the given updated value if the current value == the expected value.
AtomicReference,get(),V,Gets the current value.
AtomicReference,"getAndAccumulate(V x, BinaryOperator<V> accumulatorFunction)",V,"Atomically updates the current value with the results of applying the given function to the current and given values, returning the previous value."
AtomicReference,getAndSet(V newValue),V,Atomically sets to the given value and returns the old value.
AtomicReference,getAndUpdate(UnaryOperator<V> updateFunction),V,"Atomically updates the current value with the results of applying the given function, returning the previous value."
AtomicReference,lazySet(V newValue),void,Eventually sets to the given value.
AtomicReference,set(V newValue),void,Sets to the given value.
AtomicReference,toString(),String,Returns the String representation of the current value.
AtomicReference,updateAndGet(UnaryOperator<V> updateFunction),V,"Atomically updates the current value with the results of applying the given function, returning the updated value."
AtomicReference,"weakCompareAndSet(V expect, V update)",boolean,Atomically sets the value to the given updated value if the current value == the expected value.
AtomicReferenceArray,"accumulateAndGet(int i, E x, BinaryOperator<E> accumulatorFunction)",E,"Atomically updates the element at index i with the results of applying the given function to the current and given values, returning the updated value."
AtomicReferenceArray,"compareAndSet(int i, E expect, E update)",boolean,Atomically sets the element at position i to the given updated value if the current value == the expected value.
AtomicReferenceArray,get(int i),E,Gets the current value at position i.
AtomicReferenceArray,"getAndAccumulate(int i, E x, BinaryOperator<E> accumulatorFunction)",E,"Atomically updates the element at index i with the results of applying the given function to the current and given values, returning the previous value."
AtomicReferenceArray,"getAndSet(int i, E newValue)",E,Atomically sets the element at position i to the given value and returns the old value.
AtomicReferenceArray,"getAndUpdate(int i, UnaryOperator<E> updateFunction)",E,"Atomically updates the element at index i with the results of applying the given function, returning the previous value."
AtomicReferenceArray,"lazySet(int i, E newValue)",void,Eventually sets the element at position i to the given value.
AtomicReferenceArray,length(),int,Returns the length of the array.
AtomicReferenceArray,"set(int i, E newValue)",void,Sets the element at position i to the given value.
AtomicReferenceArray,toString(),String,Returns the String representation of the current values of array.
AtomicReferenceArray,"updateAndGet(int i, UnaryOperator<E> updateFunction)",E,"Atomically updates the element at index i with the results of applying the given function, returning the updated value."
AtomicReferenceArray,"weakCompareAndSet(int i, E expect, E update)",boolean,Atomically sets the element at position i to the given updated value if the current value == the expected value.
AtomicReferenceFieldUpdater,"accumulateAndGet(T obj, V x, BinaryOperator<V> accumulatorFunction)",V,"Atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the updated value."
AtomicReferenceFieldUpdater,"compareAndSet(T obj, V expect, V update)",abstract boolean,Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value.
AtomicReferenceFieldUpdater,get(T obj),abstract V,Gets the current value held in the field of the given object managed by this updater.
AtomicReferenceFieldUpdater,"getAndAccumulate(T obj, V x, BinaryOperator<V> accumulatorFunction)",V,"Atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the previous value."
AtomicReferenceFieldUpdater,"getAndSet(T obj, V newValue)",V,Atomically sets the field of the given object managed by this updater to the given value and returns the old value.
AtomicReferenceFieldUpdater,"getAndUpdate(T obj, UnaryOperator<V> updateFunction)",V,"Atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the previous value."
AtomicReferenceFieldUpdater,"lazySet(T obj, V newValue)",abstract void,Eventually sets the field of the given object managed by this updater to the given updated value.
AtomicReferenceFieldUpdater,"newUpdater(Class<U> tclass, Class<W> vclass, String fieldName)","static <U,W> AtomicReferenceFieldUpdater<U,W>",Creates and returns an updater for objects with the given field.
AtomicReferenceFieldUpdater,"set(T obj, V newValue)",abstract void,Sets the field of the given object managed by this updater to the given updated value.
AtomicReferenceFieldUpdater,"updateAndGet(T obj, UnaryOperator<V> updateFunction)",V,"Atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the updated value."
AtomicReferenceFieldUpdater,"weakCompareAndSet(T obj, V expect, V update)",abstract boolean,Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value.
AtomicStampedReference,"attemptStamp(V expectedReference, int newStamp)",boolean,Atomically sets the value of the stamp to the given update value if the current reference is == to the expected reference.
AtomicStampedReference,"compareAndSet(V expectedReference, V newReference, int expectedStamp, int newStamp)",boolean,Atomically sets the value of both the reference and stamp to the given update values if the current reference is == to the expected reference and the current stamp is equal to the expected stamp.
AtomicStampedReference,get(int[] stampHolder),V,Returns the current values of both the reference and the stamp.
AtomicStampedReference,getReference(),V,Returns the current value of the reference.
AtomicStampedReference,getStamp(),int,Returns the current value of the stamp.
AtomicStampedReference,"set(V newReference, int newStamp)",void,Unconditionally sets the value of both the reference and stamp.
AtomicStampedReference,"weakCompareAndSet(V expectedReference, V newReference, int expectedStamp, int newStamp)",boolean,Atomically sets the value of both the reference and stamp to the given update values if the current reference is == to the expected reference and the current stamp is equal to the expected stamp.
DoubleAccumulator,accumulate(double x),void,Updates with the given value.
DoubleAccumulator,doubleValue(),double,Equivalent to get().
DoubleAccumulator,floatValue(),float,Returns the current value as a float after a narrowing primitive conversion.
DoubleAccumulator,get(),double,Returns the current value.
DoubleAccumulator,getThenReset(),double,Equivalent in effect to get() followed by reset().
DoubleAccumulator,intValue(),int,Returns the current value as an int after a narrowing primitive conversion.
DoubleAccumulator,longValue(),long,Returns the current value as a long after a narrowing primitive conversion.
DoubleAccumulator,reset(),void,Resets variables maintaining updates to the identity value.
DoubleAccumulator,toString(),String,Returns the String representation of the current value.
DoubleAdder,add(double x),void,Adds the given value.
DoubleAdder,doubleValue(),double,Equivalent to sum().
DoubleAdder,floatValue(),float,Returns the sum() as a float after a narrowing primitive conversion.
DoubleAdder,intValue(),int,Returns the sum() as an int after a narrowing primitive conversion.
DoubleAdder,longValue(),long,Returns the sum() as a long after a narrowing primitive conversion.
DoubleAdder,reset(),void,Resets variables maintaining the sum to zero.
DoubleAdder,sum(),double,Returns the current sum.
DoubleAdder,sumThenReset(),double,Equivalent in effect to sum() followed by reset().
DoubleAdder,toString(),String,Returns the String representation of the sum().
LongAccumulator,accumulate(long x),void,Updates with the given value.
LongAccumulator,doubleValue(),double,Returns the current value as a double after a widening primitive conversion.
LongAccumulator,floatValue(),float,Returns the current value as a float after a widening primitive conversion.
LongAccumulator,get(),long,Returns the current value.
LongAccumulator,getThenReset(),long,Equivalent in effect to get() followed by reset().
LongAccumulator,intValue(),int,Returns the current value as an int after a narrowing primitive conversion.
LongAccumulator,longValue(),long,Equivalent to get().
LongAccumulator,reset(),void,Resets variables maintaining updates to the identity value.
LongAccumulator,toString(),String,Returns the String representation of the current value.
LongAdder,add(long x),void,Adds the given value.
LongAdder,decrement(),void,Equivalent to add(-1).
LongAdder,doubleValue(),double,Returns the sum() as a double after a widening primitive conversion.
LongAdder,floatValue(),float,Returns the sum() as a float after a widening primitive conversion.
LongAdder,increment(),void,Equivalent to add(1).
LongAdder,intValue(),int,Returns the sum() as an int after a narrowing primitive conversion.
LongAdder,longValue(),long,Equivalent to sum().
LongAdder,reset(),void,Resets variables maintaining the sum to zero.
LongAdder,sum(),long,Returns the current sum.
LongAdder,sumThenReset(),long,Equivalent in effect to sum() followed by reset().
LongAdder,toString(),String,Returns the String representation of the sum().
