Sample: 0 CollapsedStringAdapter
----------------------------------------------------------------

@@ Context
Here is the description of the package XmlAdapter and its spec-defined sub-classes to allow arbitrary Java classes to be used with JAXB.
Here is the description of the class Built-in XmlAdapter to handle xs:token and its derived types.

@@ Instruction
I want to use javax.xml.bind.annotation.adapters.CollapsedStringAdapter package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean add(E e)`: This method appends the specified element to the end of this list.
2. `void add(int index, E element)`: This method inserts the specified element at the specified position in this list.
3. `boolean addAll(Collection<? extends E> c)`: This method appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator.
4. `boolean addAll(int index, Collection<? extends E> c)`: This method inserts all of the elements in the specified collection into this list, starting at the specified position.
5. `void clear()`: This method removes all of the elements from this list.
6. `boolean contains(Object o)`: This method returns true if this list contains the specified element.
7. `boolean containsAll(Collection<?> c)`: This method returns true if this list contains all of the elements of the specified collection.
8. `E get(int index)`: This method returns the element at the specified position in this list.
9. `int indexOf(Object o)`: This method returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.
10. `boolean isEmpty()`: This method returns true if this list contains no elements.
11. `int lastIndexOf(Object o)`: This method returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.
12. `ListIterator<E> listIterator()`: This method returns a list-iterator of the elements in this list (in proper sequence).
13. `ListIterator<E> listIterator(int index)`: This method returns a list-iterator of the elements in this list (in proper sequence), starting at the specified position in the list.
14. `E remove(int index)`: This method removes the element at the specified position in this list.
15. `boolean remove(Object o)`: This method removes the first occurrence of the specified element from this list, if it is present.
16. `boolean removeAll(Collection<?> c)`: This method removes from this list all of its elements that are contained in the specified collection.
17. `boolean retainAll(Collection<?> c)`: This method retains only the elements in this list that are contained in the specified collection.
18. `E set(int index, E element)`: This method replaces the element at the specified position in this list with the specified element.
19. `List<E> subList(int fromIndex, int toIndex)`: This method returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.
20. `Object[] toArray()`: This method returns an array containing all of the elements in this list in proper sequence (from first to last element).
21. `<T> T[] toArray(T[] a)`: This method returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.
22. `int size()`: This method returns the number of elements in this list.
23. `Iterator<E> iterator()`: This method returns an iterator over the elements in this list in proper sequence.
24. `ListIterator<E> descendingIterator()`: This method returns a list-iterator of the elements in this list (in reverse sequential order).
25. `void addFirst(E e)`: This method inserts the specified element at the front of this list.
26. `void addLast(E e)`: This method appends the specified element to the end of this list.
27. `boolean contains(Object o)`: This method returns true if this list contains the specified element.
28. `E element()`: This method retrieves, but does not remove, the head of this list.
29. `boolean equals(Object o)`: This method compares the specified object with this list for equality.
30. `E getFirst()`: This method retrieves, but does not remove, the first element of this list.
31. `E getLast()`: This method retrieves, but does not remove, the last element of this list.
32. `int hashCode()`: This method returns the hash code value for this list.
33. `E peek()`: This method retrieves, but does not remove, the head of this list.
34. `E peekFirst()`: This method retrieves, but does not remove, the first element of this list.
35. `E peekLast()`: This method retrieves, but does not remove, the last element of this list.
36. `E poll()`: This method retrieves and removes the head of this list.
37. `E pollFirst()`: This method retrieves and removes the first element of this list.
38. `E pollLast()`: This method retrieves and removes the last element of this list.
39. `E pop()`: This method retrieves and removes the head of this list.
40. `void push(E e)`: This method pushes an element onto the stack represented by this list.
41. `void remove()`: This method removes the head of this list.
42. `boolean remove(Object o)`: This method removes the first occurrence of the specified element from this list, if it is present.
43. `boolean removeFirstOccurrence(Object o)`: This method removes the first occurrence of the specified element from this list, if it is present.
44. `boolean removeLastOccurrence(Object o)`: This method removes the last occurrence of the specified element from this list, if it is present.
45. `boolean retainAll(Collection<?> c)`: This method retains only the elements in this list that are contained in the specified collection.
46. `int size()`: This method returns the number of elements in this list.
47. `Object[] toArray()`: This method returns an array containing all of the elements in this list in proper sequence (from first to last element).
48. `<T> T[] toArray(T[] a)`: This method returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.
49. `ListIterator<E> descendingIterator()`: This method returns a list-iterator of the elements in this list (in reverse sequential order).
50. `Iterator<E> iterator()`: This method returns an iterator over the elements in this list in proper sequence.
51. `ListIterator<E> listIterator()`: This method returns a list-iterator of the elements in this list (in proper sequence).
52. `ListIterator<E> listIterator(int index)`: This method returns a list-iterator of the elements in this list (in proper sequence), starting at the specified position in the list.
53. `List<E> subList(int fromIndex, int toIndex)`: This method returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.
================================================================

Sample: 1 HexBinaryAdapter
----------------------------------------------------------------

@@ Context
Here is the description of the package XmlAdapter and its spec-defined sub-classes to allow arbitrary Java classes to be used with JAXB.
Here is the description of the class XmlAdapter for xs:hexBinary.

@@ Instruction
I want to use javax.xml.bind.annotation.adapters.HexBinaryAdapter package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public String marshal(byte[] v)`: This method converts a byte array to a hexadecimal string.

2. `public byte[] unmarshal(String v)`: This method converts a hexadecimal string to a byte array.

3. `public String printHexBinary(byte[] bytes)`: This method converts a byte array to a hexadecimal string.

4. `public byte[] parseHexBinary(String s)`: This method converts a hexadecimal string to a byte array.

5. `public String toString(byte[] bytes)`: This method converts a byte array to a hexadecimal string.

6. `public byte[] fromString(String s)`: This method converts a hexadecimal string to a byte array.

7. `public String toHexString(byte[] bytes)`: This method converts a byte array to a hexadecimal string.

8. `public byte[] fromHexString(String s)`: This method converts a hexadecimal string to a byte array.

9. `public String toHex(byte[] bytes)`: This method converts a byte array to a hexadecimal string.

10. `public byte[] fromHex(String s)`: This method converts a hexadecimal string to a byte array.
================================================================

Sample: 2 NormalizedStringAdapter
----------------------------------------------------------------

@@ Context
Here is the description of the package XmlAdapter and its spec-defined sub-classes to allow arbitrary Java classes to be used with JAXB.
Here is the description of the class XmlAdapter to handle xs:normalizedString.

@@ Instruction
I want to use javax.xml.bind.annotation.adapters.NormalizedStringAdapter package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean equals(Object obj)`: Compares this object to the specified object.
2. `int hashCode()`: Returns a hash code value for the object.
3. `String marshal(String v)`: This method is called by JAXB to convert a value type into a primitive or string type for the XML representation.
4. `String unmarshal(String v)`: This method is called by JAXB to convert a primitive or string type value into a value type.
5. `String valueOf(String v)`: This method is called by JAXB to convert a value type into a primitive or string type for the XML representation.
================================================================

Sample: 3 XmlAdapter
----------------------------------------------------------------

@@ Context
Here is the description of the package XmlAdapter and its spec-defined sub-classes to allow arbitrary Java classes to be used with JAXB.
Here is the description of the class Adapts a Java type for custom marshaling.

@@ Instruction
I want to use javax.xml.bind.annotation.adapters.XmlAdapter package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public abstract E unmarshal(V v)`: This method is used to convert the XML value to the Java object.
2. `public abstract V marshal(E e)`: This method is used to convert the Java object to the XML value.
3. `public abstract V parseValue(String s)`: This method is used to parse the string value to the XML value.
4. `public abstract String printValue(V v)`: This method is used to print the XML value to the string value.
5. `public abstract V parse(String value)`: This method is used to parse the string value to the XML value.
6. `public abstract String print(V value)`: This method is used to print the XML value to the string value.
7. `public abstract V valueOf(String v)`: This method is used to convert the string value to the XML value.
8. `public abstract String toString(V v)`: This method is used to print the XML value to the string value.
9. `public abstract V parse(String value, Class<V> clazz)`: This method is used to parse the string value to the XML value.
10. `public abstract String print(V value, Class<V> clazz)`: This method is used to print the XML value to the string value.
11. `public abstract V valueOf(String v, Class<V> clazz)`: This method is used to convert the string value to the XML value.
12. `public abstract String toString(V v, Class<V> clazz)`: This method is used to print the XML value to the string value.
13. `public abstract V parse(String value, Class<V> clazz, Class<?> bindingClass)`: This method is used to parse the string value to the XML value.
14. `public abstract String print(V value, Class<V> clazz, Class<?> bindingClass)`: This method is used to print the XML value to the string value.
15. `public abstract V valueOf(String v, Class<V> clazz, Class<?> bindingClass)`: This method is used to convert the string value to the XML value.
16. `public abstract String toString(V v, Class<V> clazz, Class<?> bindingClass)`: This method is used to print the XML value to the string value.
================================================================

Sample: 4 XmlJavaTypeAdapter.DEFAULT
----------------------------------------------------------------

@@ Context
Here is the description of the package XmlAdapter and its spec-defined sub-classes to allow arbitrary Java classes to be used with JAXB.
Here is the description of the class Used in XmlJavaTypeAdapter.type() to signal that the type be inferred from the signature of the field, property, parameter or the class.

@@ Instruction
I want to use javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter.DEFAULT package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean add(E e)`: This method appends the specified element to the end of this list.
2. `void add(int index, E element)`: This method inserts the specified element at the specified position in this list.
3. `boolean addAll(Collection<? extends E> c)`: This method appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator.
4. `boolean addAll(int index, Collection<? extends E> c)`: This method inserts all of the elements in the specified collection into this list, starting at the specified position.
5. `void clear()`: This method removes all of the elements from this list.
6. `boolean contains(Object o)`: This method returns true if this list contains the specified element.
7. `boolean containsAll(Collection<?> c)`: This method returns true if this list contains all of the elements of the specified collection.
8. `E get(int index)`: This method returns the element at the specified position in this list.
9. `int indexOf(Object o)`: This method returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.
10. `boolean isEmpty()`: This method returns true if this list contains no elements.
11. `int lastIndexOf(Object o)`: This method returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.
12. `ListIterator<E> listIterator()`: This method returns a list-iterator of the elements in this list (in proper sequence).
13. `ListIterator<E> listIterator(int index)`: This method returns a list-iterator of the elements in this list (in proper sequence), starting at the specified position in the list.
14. `E remove(int index)`: This method removes the element at the specified position in this list.
15. `boolean remove(Object o)`: This method removes the first occurrence of the specified element from this list, if it is present.
16. `boolean removeAll(Collection<?> c)`: This method removes from this list all of its elements that are contained in the specified collection.
17. `boolean retainAll(Collection<?> c)`: This method retains only the elements in this list that are contained in the specified collection.
18. `E set(int index, E element)`: This method replaces the element at the specified position in this list with the specified element.
19. `List<E> subList(int fromIndex, int toIndex)`: This method returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.
20. `Object[] toArray()`: This method returns an array containing all of the elements in this list in proper sequence (from first to last element).
21. `<T> T[] toArray(T[] a)`: This method returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.
22. `int size()`: This method returns the number of elements in this list.
23. `Iterator<E> iterator()`: This method returns an iterator over the elements in this list in proper sequence.
24. `ListIterator<E> descendingIterator()`: This method returns a list-iterator of the elements in this list (in reverse sequential order).
25. `void addFirst(E e)`: This method inserts the specified element at the front of this list.
26. `void addLast(E e)`: This method appends the specified element to the end of this list.
27. `boolean contains(Object o)`: This method returns true if this list contains the specified element.
28. `E element()`: This method retrieves, but does not remove, the head of this list.
29. `boolean offer(E e)`: This method inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions.
30. `E peek()`: This method retrieves, but does not remove, the head of this list, or returns null if this list is empty.
31. `E poll()`: This method retrieves and removes the head of this list, or returns null if this list is empty.
32. `E remove()`: This method retrieves and removes the head of this list.
33. `boolean remove(Object o)`: This method removes the first occurrence of the specified element from this list, if it is present.
34. `boolean removeFirstOccurrence(Object o)`: This method removes the first occurrence of the specified element in this list.
35. `boolean removeLastOccurrence(Object o)`: This method removes the last occurrence of the specified element in this list.
36. `void push(E e)`: This method pushes an element onto the stack represented by this list.
37. `E pop()`: This method pops an element from the stack represented by this list.
38. `E peek()`: This method looks at the object at the top of this stack without removing it from the stack.
39. `boolean empty()`: This method tests if this stack is empty.
40. `int search(Object o)`: This method determines the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.
================================================================

