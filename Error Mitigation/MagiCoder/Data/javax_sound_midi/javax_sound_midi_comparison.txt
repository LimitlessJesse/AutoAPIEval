Sample: 0 Instrument
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for I/O, sequencing, and synthesis of MIDI (Musical Instrument Digital Interface) data.
Here is the description of the class An instrument is a sound-synthesis algorithm with certain parameter settings, usually designed to emulate a specific real-world musical instrument or to achieve a specific sort of sound effect.

@@ Instruction
I want to use javax.sound.midi.Instrument package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `getPatch()`: This method returns the patch number of the instrument.
2. `getBank()`: This method returns the bank number of the instrument.
3. `getPatchName()`: This method returns the name of the patch of the instrument.
4. `getBankName()`: This method returns the name of the bank of the instrument.
5. `getMidiChannel()`: This method returns the MIDI channel of the instrument.
6. `getMidiChannelName()`: This method returns the name of the MIDI channel of the instrument.
7. `getMidiChannelType()`: This method returns the type of the MIDI channel of the instrument.
8. `getMidiChannelTypeName()`: This method returns the name of the type of the MIDI channel of the instrument.
9. `getMidiChannelProgram()`: This method returns the program of the MIDI channel of the instrument.
10. `getMidiChannelProgramName()`: This method returns the name of the program of the MIDI channel of the instrument.
11. `getMidiChannelVolume()`: This method returns the volume of the MIDI channel of the instrument.
12. `getMidiChannelVolumeName()`: This method returns the name of the volume of the MIDI channel of the instrument.
13. `getMidiChannelBalance()`: This method returns the balance of the MIDI channel of the instrument.
14. `getMidiChannelBalanceName()`: This method returns the name of the balance of the MIDI channel of the instrument.
15. `getMidiChannelExpression()`: This method returns the expression of the MIDI channel of the instrument.
16. `getMidiChannelExpressionName()`: This method returns the name of the expression of the MIDI channel of the instrument.
17. `getMidiChannelModulation()`: This method returns the modulation of the MIDI channel of the instrument.
18. `getMidiChannelModulationName()`: This method returns the name of the modulation of the MIDI channel of the instrument.
19. `getMidiChannelPan()`: This method returns the pan of the MIDI channel of the instrument.
20. `getMidiChannelPanName()`: This method returns the name of the pan of the MIDI channel of the instrument.
21. `getMidiChannelSustain()`: This method returns the sustain of the MIDI channel of the instrument.
22. `getMidiChannelSustainName()`: This method returns the name of the sustain of the MIDI channel of the instrument.
23. `getMidiChannelOmni()`: This method returns the omni of the MIDI channel of the instrument.
24. `getMidiChannelOmniName()`: This method returns the name of the omni of the MIDI channel of the instrument.
25. `getMidiChannelMono()`: This method returns the mono of the MIDI channel of the instrument.
26. `getMidiChannelMonoName()`: This method returns the name of the mono of the MIDI channel of the instrument.
27. `getMidiChannelPoly()`: This method returns the poly of the MIDI channel of the instrument.
28. `getMidiChannelPolyName()`: This method returns the name of the poly of the MIDI channel of the instrument.
29. `getMidiChannelSolo()`: This method returns the solo of the MIDI channel of the instrument.
30. `getMidiChannelSoloName()`: This method returns the name of the solo of the MIDI channel of the instrument.
31. `getMidiChannelRpn()`: This method returns the RPN of the MIDI channel of the instrument.
32. `getMidiChannelRpnName()`: This method returns the name of the RPN of the MIDI channel of the instrument.
33. `getMidiChannelNrpn()`: This method returns the NRPN of the MIDI channel of the instrument.
34. `getMidiChannelNrpnName()`: This method returns the name of the NRPN of the MIDI channel of the instrument.
35. `getMidiChannelTuning()`: This method returns the tuning of the MIDI channel of the instrument.
36. `getMidiChannelTuningName()`: This method returns the name of the tuning of the MIDI channel of the instrument.
37. `getMidiChannelSmpteOffset()`: This method returns the SMPTE offset of the MIDI channel of the instrument.
38. `getMidiChannelSmpteOffsetName()`: This method returns the name of the SMPTE offset of the MIDI channel of the instrument.
39. `getMidiChannelTempo()`: This method returns the tempo of the MIDI channel of the instrument.
40. `getMidiChannelTempoName()`: This method returns the name of the tempo of the MIDI channel of the instrument.
41. `getMidiChannelTimeSignature()`: This method returns the time signature of the MIDI channel of the instrument.
42. `getMidiChannelTimeSignatureName()`: This method returns the name of the time signature of the MIDI channel of the instrument.
43. `getMidiChannelKeySignature()`: This method returns the key signature of the MIDI channel of the instrument.
44. `getMidiChannelKeySignatureName()`: This method returns the name of the key signature of the MIDI channel of the instrument.
45. `getMidiChannelSequencer()`: This method returns the sequencer of the MIDI channel of the instrument.
46. `getMidiChannelSequencerName()`: This method returns the name of the sequencer of the MIDI channel of the instrument.
47. `getMidiChannelSequencerTickPosition()`: This method returns the tick position of the sequencer of the MIDI channel of the instrument.
48. `getMidiChannelSequencerTickPositionName()`: This method returns the name of the tick position of the sequencer of the MIDI channel of the instrument.
49. `getMidiChannelSequencerTickPositionIncrement()`: This method returns the tick position increment of the sequencer of the MIDI channel of the instrument.
50. `getMidiChannelSequencerTickPositionIncrementName()`: This method returns the name of the tick position increment of the sequencer of the MIDI channel of the instrument.
51. `getMidiChannelSequencerTickPositionIncrementType()`: This method returns the tick position increment type of the sequencer of the MIDI channel of the instrument.
52. `getMidiChannelSequencerTickPositionIncrementTypeName()`: This method returns the name of the tick position increment type of the sequencer of the MIDI channel of the instrument.
53. `getMidiChannelSequencerTickPositionIncrementValue()`: This method returns the tick position increment value of the sequencer of the MIDI channel of the instrument.
54. `getMidiChannelSequencerTickPositionIncrementValueName()`: This method returns the name of the tick position increment value of the sequencer of the MIDI channel of the instrument.
55. `getMidiChannelSequencerTickPositionIncrementValueType()`: This method returns the tick position increment value type of the sequencer of the MIDI channel of the instrument.

================================================================

Sample: 1 MetaMessage
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for I/O, sequencing, and synthesis of MIDI (Musical Instrument Digital Interface) data.
Here is the description of the class A MetaMessage is a MidiMessage that is not meaningful to synthesizers, but that can be stored in a MIDI file and interpreted by a sequencer program.

@@ Instruction
I want to use javax.sound.midi.MetaMessage package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `MetaMessage(int command, byte[] data)`: This is the constructor of the MetaMessage class. It takes two parameters, the command and the data.

2. `int getCommand()`: This method returns the command of the MetaMessage.

3. `byte[] getData()`: This method returns the data of the MetaMessage.

4. `int getLength()`: This method returns the length of the MetaMessage.

5. `void setMessage(int command, byte[] data, int length)`: This method sets the command, data, and length of the MetaMessage.
================================================================

Sample: 2 MidiDevice.Info
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for I/O, sequencing, and synthesis of MIDI (Musical Instrument Digital Interface) data.
Here is the description of the class A MidiDevice.Info object contains assorted data about a MidiDevice, including its name, the company who created it, and descriptive text.

@@ Instruction
I want to use javax.sound.midi.MidiDevice.Info package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `MidiDevice.Info getDeviceInfo()`: This method returns a MidiDevice.Info object that contains information about the device.

2. `String getName()`: This method returns the name of the device.

3. `String getVendor()`: This method returns the vendor of the device.

4. `String getDescription()`: This method returns a description of the device.

5. `String getVersion()`: This method returns the version of the device.
================================================================

Sample: 3 MidiEvent
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for I/O, sequencing, and synthesis of MIDI (Musical Instrument Digital Interface) data.
Here is the description of the class MIDI events contain a MIDI message and a corresponding time-stamp expressed in ticks, and can represent the MIDI event information stored in a MIDI file or a Sequence object.

@@ Instruction
I want to use javax.sound.midi.MidiEvent package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `MidiEvent(MidiMessage message, long tick)`: This constructor creates a new MidiEvent with the specified MidiMessage and tick.

2. `MidiMessage getMessage()`: This method returns the MidiMessage associated with this MidiEvent.

3. `long getTick()`: This method returns the tick associated with this MidiEvent.

4. `void setMessage(MidiMessage message)`: This method sets the MidiMessage associated with this MidiEvent.

5. `void setTick(long tick)`: This method sets the tick associated with this MidiEvent.
================================================================

Sample: 4 MidiFileFormat
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for I/O, sequencing, and synthesis of MIDI (Musical Instrument Digital Interface) data.
Here is the description of the class A MidiFileFormat object encapsulates a MIDI file's type, as well as its length and timing information.

@@ Instruction
I want to use javax.sound.midi.MidiFileFormat package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `MidiFileFormat(int type, int divisionType, int resolution)`: This constructor creates a MidiFileFormat object with the specified type, division type, and resolution.

2. `int getDivisionType()`: This method returns the division type of this MidiFileFormat object.

3. `int getResolution()`: This method returns the resolution of this MidiFileFormat object.

4. `int getType()`: This method returns the type of this MidiFileFormat object.

5. `void setDivisionType(int divisionType)`: This method sets the division type of this MidiFileFormat object to the specified value.

6. `void setResolution(int resolution)`: This method sets the resolution of this MidiFileFormat object to the specified value.

7. `void setType(int type)`: This method sets the type of this MidiFileFormat object to the specified value.

8. `String toString()`: This method returns a string representation of this MidiFileFormat object.
================================================================

Sample: 5 MidiMessage
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for I/O, sequencing, and synthesis of MIDI (Musical Instrument Digital Interface) data.
Here is the description of the class MidiMessage is the base class for MIDI messages.

@@ Instruction
I want to use javax.sound.midi.MidiMessage package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `MidiMessage getMessage()`: This method returns the MIDI message.
2. `int getStatus()`: This method returns the status byte of the MIDI message.
3. `int getLength()`: This method returns the length of the MIDI message.
4. `byte[] getMessage()`: This method returns the MIDI message as an array of bytes.
5. `int getTick()`: This method returns the tick position of the MIDI message.
================================================================

Sample: 6 MidiSystem
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for I/O, sequencing, and synthesis of MIDI (Musical Instrument Digital Interface) data.
Here is the description of the class The MidiSystem class provides access to the installed MIDI system resources, including devices such as synthesizers, sequencers, and MIDI input and output ports.

@@ Instruction
I want to use javax.sound.midi.MidiSystem package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `MidiSystem.getMidiDeviceInfo()`: This method returns an array of MidiDevice.Info objects that describe the MIDI devices available on the system.

2. `MidiSystem.getMidiDevice()`: This method returns a MidiDevice object that represents the specified MIDI device.

3. `MidiSystem.getSynthesizer()`: This method returns a Synthesizer object that represents the default synthesizer on the system.

4. `MidiSystem.getTransmitter()`: This method returns a Transmitter object that represents the default transmitter on the system.

5. `MidiSystem.getReceiver()`: This method returns a Receiver object that represents the default receiver on the system.
================================================================

Sample: 7 Patch
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for I/O, sequencing, and synthesis of MIDI (Musical Instrument Digital Interface) data.
Here is the description of the class A Patch object represents a location, on a MIDI synthesizer, into which a single instrument is stored (loaded).

@@ Instruction
I want to use javax.sound.midi.Patch package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `getPatchName()`: This method returns the name of the patch.
2. `getPatchBank()`: This method returns the bank number of the patch.
3. `getPatchProgram()`: This method returns the program number of the patch.
4. `getPatchNumber()`: This method returns the patch number.
5. `getPatchClass()`: This method returns the class of the patch.
================================================================

Sample: 8 Sequence
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for I/O, sequencing, and synthesis of MIDI (Musical Instrument Digital Interface) data.
Here is the description of the class A Sequence is a data structure containing musical information (often an entire song or composition) that can be played back by a Sequencer object.

@@ Instruction
I want to use javax.sound.midi.Sequence package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `Sequence getSequence(Track[] tracks, int resolution)`: This method creates a new Sequence object with the specified tracks and resolution.

2. `Track[] getTracks()`: This method returns an array of the tracks in this sequence.

3. `int getResolution()`: This method returns the resolution of this sequence.

4. `void setResolution(int resolution)`: This method sets the resolution of this sequence.

5. `void setTickLength(long tickLength)`: This method sets the length of a tick in this sequence.
================================================================

Sample: 9 Sequencer.SyncMode
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for I/O, sequencing, and synthesis of MIDI (Musical Instrument Digital Interface) data.
Here is the description of the class A SyncMode object represents one of the ways in which a MIDI sequencer's notion of time can be synchronized with a master or slave device.

@@ Instruction
I want to use javax.sound.midi.Sequencer.SyncMode package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `getMasterSyncMode()`: This method returns the master synchronization mode of the sequencer.
2. `getMasterSyncMode(int track)`: This method returns the master synchronization mode of the specified track.
3. `getMasterSyncMode(int track, int channel)`: This method returns the master synchronization mode of the specified track and channel.
4. `getMasterSyncMode(int track, int channel, int noteNumber)`: This method returns the master synchronization mode of the specified track, channel, and note number.
5. `getMasterSyncMode(int track, int channel, int noteNumber, int noteValue)`: This method returns the master synchronization mode of the specified track, channel, note number, and note value.
6. `getMasterSyncMode(int track, int channel, int noteNumber, int noteValue, int noteLength)`: This method returns the master synchronization mode of the specified track, channel, note number, note value, and note length.
7. `getMasterSyncMode(int track, int channel, int noteNumber, int noteValue, int noteLength, int noteVelocity)`: This method returns the master synchronization mode of the specified track, channel, note number, note value, note length, and note velocity.
8. `getMasterSyncMode(int track, int channel, int noteNumber, int noteValue, int noteLength, int noteVelocity, int noteStartTime)`: This method returns the master synchronization mode of the specified track, channel, note number, note value, note length, note velocity, and note start time.
9. `getMasterSyncMode(int track, int channel, int noteNumber, int noteValue, int noteLength, int noteVelocity, int noteStartTime, int noteEndTime)`: This method returns the master synchronization mode of the specified track, channel, note number, note value, note length, note velocity, note start time, and note end time.
10. `getMasterSyncMode(int track, int channel, int noteNumber, int noteValue, int noteLength, int noteVelocity, int noteStartTime, int noteEndTime, int noteTick)`: This method returns the master synchronization mode of the specified track, channel, note number, note value, note length, note velocity, note start time, note end time, and note tick.
11. `getMasterSyncMode(int track, int channel, int noteNumber, int noteValue, int noteLength, int noteVelocity, int noteStartTime, int noteEndTime, int noteTick, int noteDuration)`: This method returns the master synchronization mode of the specified track, channel, note number, note value, note length, note velocity, note start time, note end time, note tick, and note duration.
12. `getMasterSyncMode(int track, int channel, int noteNumber, int noteValue, int noteLength, int noteVelocity, int noteStartTime, int noteEndTime, int noteTick, int noteDuration, int noteTempo)`: This method returns the master synchronization mode of the specified track, channel, note number, note value, note length, note velocity, note start time, note end time, note tick, note duration, and note tempo.
13. `getMasterSyncMode(int track, int channel, int noteNumber, int noteValue, int noteLength, int noteVelocity, int noteStartTime, int noteEndTime, int noteTick, int noteDuration, int noteTempo, int noteTimeSignature)`: This method returns the master synchronization mode of the specified track, channel, note number, note value, note length, note velocity, note start time, note end time, note tick, note duration, note tempo, and note time signature.
14. `getMasterSyncMode(int track, int channel, int noteNumber, int noteValue, int noteLength, int noteVelocity, int noteStartTime, int noteEndTime, int noteTick, int noteDuration, int noteTempo, int noteTimeSignature, int noteKeySignature)`: This method returns the master synchronization mode of the specified track, channel, note number, note value, note length, note velocity, note start time, note end time, note tick, note duration, note tempo, note time signature, and note key signature.
15. `getMasterSyncMode(int track, int channel, int noteNumber, int noteValue, int noteLength, int noteVelocity, int noteStartTime, int noteEndTime, int noteTick, int noteDuration, int noteTempo, int noteTimeSignature, int noteKeySignature, int notePitchBend)`: This method returns the master synchronization mode of the specified track, channel, note number, note value, note length, note velocity, note start time, note end time, note tick, note duration, note tempo, note time signature, note key signature, and note pitch bend.
16. `getMasterSyncMode(int track, int channel, int noteNumber, int noteValue, int noteLength, int noteVelocity, int noteStartTime, int noteEndTime, int noteTick, int noteDuration, int noteTempo, int noteTimeSignature, int noteKeySignature, int notePitchBend, int noteChannelPressure)`: This method returns the master synchronization mode of the specified track, channel, note number, note value, note length, note velocity, note start time, note end time, note tick, note duration, note tempo, note time signature, note key signature, note pitch bend, and note channel pressure.
17. `getMasterSyncMode(int track, int channel, int noteNumber, int noteValue, int noteLength, int noteVelocity, int noteStartTime, int noteEndTime, int noteTick, int noteDuration, int noteTempo, int noteTimeSignature, int noteKeySignature, int notePitchBend, int noteChannelPressure, int notePolyPressure)`: This method returns the master synchronization mode of the specified track, channel, note number, note value, note length, note velocity, note start time, note end time, note tick, note duration, note tempo, note time signature, note key signature, note pitch bend, note channel pressure, and note poly pressure.
18. `getMasterSyncMode(int track, int channel, int noteNumber, int noteValue, int noteLength, int noteVelocity, int noteStartTime, int noteEndTime, int noteTick, int noteDuration, int noteTempo, int noteTimeSignature, int noteKeySignature, int notePitchBend, int noteChannelPressure, int notePolyPressure, int noteSysEx)`: This method returns the master synchronization mode of the specified track, channel, note number, note value, note length, note velocity, note start time, note end time, note tick, note duration, note tempo, note time signature, note key signature, note pitch bend, note channel pressure, note poly pressure, and note system exclusive.
19. `getMasterSyncMode(int track, int channel, int noteNumber, int noteValue, int noteLength, int noteVelocity, int noteStartTime, int noteEndTime, int noteTick, int noteDuration, int noteTempo, int noteTimeSignature, int noteKeySignature, int notePitchBend, int noteChannelPressure, int notePolyPressure, int noteSysEx, int noteSysExLength)`: This method returns the master synchronization mode of the specified track, channel, note number, note value, note length, note velocity, note start time, note end time, note tick, note duration, note tempo, note time signature, note key signature, note pitch bend, note channel pressure, note poly pressure, note system exclusive, and note system exclusive length.
20. `getMasterSyncMode(int track, int channel, int noteNumber, int noteValue, int noteLength, int noteVelocity, int noteStartTime, int note
================================================================

Sample: 10 ShortMessage
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for I/O, sequencing, and synthesis of MIDI (Musical Instrument Digital Interface) data.
Here is the description of the class A ShortMessage contains a MIDI message that has at most two data bytes following its status byte.

@@ Instruction
I want to use javax.sound.midi.ShortMessage package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `ShortMessage()`: This is a constructor of the ShortMessage class. It initializes a ShortMessage object.

2. `setMessage(int command, int channel, int data1, int data2)`: This method sets the MIDI message.

3. `getCommand()`: This method returns the command of the MIDI message.

4. `getChannel()`: This method returns the channel of the MIDI message.

5. `getData1()`: This method returns the first data byte of the MIDI message.

6. `getData2()`: This method returns the second data byte of the MIDI message.

7. `setMessage(byte[] message, int length)`: This method sets the MIDI message from a byte array.

8. `getLength()`: This method returns the length of the MIDI message.

9. `getStatus()`: This method returns the status byte of the MIDI message.

10. `getData()`: This method returns the data bytes of the MIDI message.
================================================================

Sample: 11 SoundbankResource
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for I/O, sequencing, and synthesis of MIDI (Musical Instrument Digital Interface) data.
Here is the description of the class A SoundbankResource represents any audio resource stored in a Soundbank.

@@ Instruction
I want to use javax.sound.midi.SoundbankResource package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public int getBankSize()`: This method returns the number of instruments in the bank.
2. `public Instrument getInstrument(int bank, int program)`: This method returns the instrument at the specified bank and program.
3. `public String getInstrumentName(int bank, int program)`: This method returns the name of the instrument at the specified bank and program.
4. `public String getProgramName(int bank, int program)`: This method returns the name of the program at the specified bank and program.
5. `public String getBankName(int bank)`: This method returns the name of the bank at the specified bank.
================================================================

Sample: 12 SysexMessage
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for I/O, sequencing, and synthesis of MIDI (Musical Instrument Digital Interface) data.
Here is the description of the class A SysexMessage object represents a MIDI system exclusive message.

@@ Instruction
I want to use javax.sound.midi.SysexMessage package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `SysexMessage(byte[] data)`: This constructor creates a new SysexMessage object with the specified MIDI data.

2. `byte[] getData()`: This method returns the MIDI data of this SysexMessage object.

3. `int getLength()`: This method returns the length of the MIDI data in this SysexMessage object.

4. `int getType()`: This method returns the type of this SysexMessage object.

5. `int getSequenceNumber()`: This method returns the sequence number of this SysexMessage object.

6. `int getManufacturerId()`: This method returns the manufacturer ID of this SysexMessage object.

7. `int getDeviceId()`: This method returns the device ID of this SysexMessage object.

8. `int getCommand()`: This method returns the command of this SysexMessage object.

9. `int getChannel()`: This method returns the channel of this SysexMessage object.

10. `int getData(int index)`: This method returns the MIDI data at the specified index in this SysexMessage object.

11. `int getDataLength()`: This method returns the length of the MIDI data in this SysexMessage object.

12. `int getStatus()`: This method returns the status of this SysexMessage object.

13. `int getStatus(int index)`: This method returns the status at the specified index in this SysexMessage object.

14. `int getStatusLength()`: This method returns the length of the status in this SysexMessage object.

15. `int getType0()`: This method returns the type 0 of this SysexMessage object.

16. `int getType1()`: This method returns the type 1 of this SysexMessage object.

17. `int getType2()`: This method returns the type 2 of this SysexMessage object.

18. `int getType3()`: This method returns the type 3 of this SysexMessage object.

19. `int getType4()`: This method returns the type 4 of this SysexMessage object.

20. `int getType5()`: This method returns the type 5 of this SysexMessage object.

21. `int getType6()`: This method returns the type 6 of this SysexMessage object.

22. `int getType7()`: This method returns the type 7 of this SysexMessage object.

23. `int getType8()`: This method returns the type 8 of this SysexMessage object.

24. `int getType9()`: This method returns the type 9 of this SysexMessage object.

25. `int getTypeA()`: This method returns the type A of this SysexMessage object.

26. `int getTypeB()`: This method returns the type B of this SysexMessage object.

27. `int getTypeC()`: This method returns the type C of this SysexMessage object.

28. `int getTypeD()`: This method returns the type D of this SysexMessage object.

29. `int getTypeE()`: This method returns the type E of this SysexMessage object.

30. `int getTypeF()`: This method returns the type F of this SysexMessage object.
================================================================

Sample: 13 Track
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for I/O, sequencing, and synthesis of MIDI (Musical Instrument Digital Interface) data.
Here is the description of the class A MIDI track is an independent stream of MIDI events (time-stamped MIDI data) that can be stored along with other tracks in a standard MIDI file.

@@ Instruction
I want to use javax.sound.midi.Track package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `int getSize()`: This method returns the number of MIDI events in the track.
2. `MidiEvent get(int index)`: This method returns the MIDI event at the specified position in this track.
3. `void add(MidiEvent event)`: This method appends the specified MIDI event to the end of this track.
4. `void insert(MidiEvent event, int index)`: This method inserts the specified MIDI event at the specified position in this track.
5. `void remove(int index)`: This method removes the MIDI event at the specified position in this track.
================================================================

Sample: 14 VoiceStatus
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides interfaces and classes for I/O, sequencing, and synthesis of MIDI (Musical Instrument Digital Interface) data.
Here is the description of the class A VoiceStatus object contains information about the current status of one of the voices produced by a Synthesizer.

@@ Instruction
I want to use javax.sound.midi.VoiceStatus package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `getCurrentMicrosecondPosition()`: This method returns the current microsecond position of the voice.

2. `getCurrentNote()`: This method returns the current note of the voice.

3. `getCurrentNoteOnVelocity()`: This method returns the current note on velocity of the voice.

4. `getCurrentNoteOffVelocity()`: This method returns the current note off velocity of the voice.

5. `getCurrentController()`: This method returns the current controller of the voice.

6. `getCurrentControllerValue()`: This method returns the current controller value of the voice.

7. `getCurrentPatch()`: This method returns the current patch of the voice.

8. `getCurrentPatchBank()`: This method returns the current patch bank of the voice.

9. `getCurrentProgram()`: This method returns the current program of the voice.

10. `getCurrentProgramChange()`: This method returns the current program change of the voice.

11. `getCurrentSustainPedalOn()`: This method returns the current sustain pedal on of the voice.

12. `getCurrentSustainPedalOff()`: This method returns the current sustain pedal off of the voice.

13. `getCurrentPolyPressure()`: This method returns the current poly pressure of the voice.

14. `getCurrentChannelPressure()`: This method returns the current channel pressure of the voice.

15. `getCurrentPitchBend()`: This method returns the current pitch bend of the voice.

16. `getCurrentPitchBendSensitivity()`: This method returns the current pitch bend sensitivity of the voice.

17. `getCurrentAftertouch()`: This method returns the current aftertouch of the voice.

18. `getCurrentAftertouchSensitivity()`: This method returns the current aftertouch sensitivity of the voice.

19. `getCurrentNoteLength()`: This method returns the current note length of the voice.

20. `getCurrentNoteLengthCounter()`: This method returns the current note length counter of the voice.

21. `getCurrentNoteLengthCounterReset()`: This method returns the current note length counter reset of the voice.

22. `getCurrentNoteLengthCounterResetValue()`: This method returns the current note length counter reset value of the voice.

23. `getCurrentNoteLengthCounterResetValue()`: This method returns the current note length counter reset value of the voice.

24. `getCurrentNoteLengthCounterResetValue()`: This method returns the current note length counter reset value of the voice.

25. `getCurrentNoteLengthCounterResetValue()`: This method returns the current note length counter reset value of the voice.
================================================================

