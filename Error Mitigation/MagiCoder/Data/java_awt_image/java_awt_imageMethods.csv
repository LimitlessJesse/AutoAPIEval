ClassName,Method,Return Type,Description
AffineTransformOp,"createCompatibleDestImage(BufferedImage src, ColorModel destCM)",BufferedImage,Creates a zeroed destination image with the correct size and number of bands.
AffineTransformOp,createCompatibleDestRaster(Raster src),WritableRaster,Creates a zeroed destination Raster with the correct size and number of bands.
AffineTransformOp,"filter(BufferedImage src, BufferedImage dst)",BufferedImage,Transforms the source BufferedImage and stores the results in the destination BufferedImage.
AffineTransformOp,"filter(Raster src, WritableRaster dst)",WritableRaster,Transforms the source Raster and stores the results in the destination Raster.
AffineTransformOp,getBounds2D(BufferedImage src),Rectangle2D,Returns the bounding box of the transformed destination.
AffineTransformOp,getBounds2D(Raster src),Rectangle2D,Returns the bounding box of the transformed destination.
AffineTransformOp,getInterpolationType(),int,Returns the interpolation type used by this op.
AffineTransformOp,"getPoint2D(Point2D srcPt, Point2D dstPt)",Point2D,Returns the location of the corresponding destination point given a point in the source.
AffineTransformOp,getRenderingHints(),RenderingHints,Returns the rendering hints used by this transform operation.
AffineTransformOp,getTransform(),AffineTransform,Returns the affine transform used by this transform operation.
AreaAveragingScaleFilter,setHints(int hints),void,Detect if the data is being delivered with the necessary hints to allow the averaging algorithm to do its work.
AreaAveragingScaleFilter,"setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize)",void,Combine the components for the delivered byte pixels into the accumulation arrays and send on any averaged data for rows of pixels that are complete.
AreaAveragingScaleFilter,"setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize)",void,Combine the components for the delivered int pixels into the accumulation arrays and send on any averaged data for rows of pixels that are complete.
BandCombineOp,createCompatibleDestRaster(Raster src),WritableRaster,Creates a zeroed destination Raster with the correct size and number of bands.
BandCombineOp,"filter(Raster src, WritableRaster dst)",WritableRaster,Transforms the Raster using the matrix specified in the constructor.
BandCombineOp,getBounds2D(Raster src),Rectangle2D,Returns the bounding box of the transformed destination.
BandCombineOp,getMatrix(),float[][],Returns a copy of the linear combination matrix.
BandCombineOp,"getPoint2D(Point2D srcPt, Point2D dstPt)",Point2D,Returns the location of the corresponding destination point given a point in the source Raster.
BandCombineOp,getRenderingHints(),RenderingHints,Returns the rendering hints for this operation.
BandedSampleModel,"createCompatibleSampleModel(int w, int h)",SampleModel,Creates a new BandedSampleModel with the specified width and height.
BandedSampleModel,createDataBuffer(),DataBuffer,"Creates a DataBuffer that corresponds to this BandedSampleModel, The DataBuffer's data type, number of banks, and size will be consistent with this BandedSampleModel."
BandedSampleModel,createSubsetSampleModel(int[] bands),SampleModel,Creates a new BandedSampleModel with a subset of the bands of this BandedSampleModel.
BandedSampleModel,"getDataElements(int x, int y, Object obj, DataBuffer data)",Object,Returns data for a single pixel in a primitive array of type TransferType.
BandedSampleModel,"getPixel(int x, int y, int[] iArray, DataBuffer data)",int[],Returns all samples for the specified pixel in an int array.
BandedSampleModel,"getPixels(int x, int y, int w, int h, int[] iArray, DataBuffer data)",int[],"Returns all samples for the specified rectangle of pixels in an int array, one sample per data array element."
BandedSampleModel,"getSample(int x, int y, int b, DataBuffer data)",int,"Returns as int the sample in a specified band for the pixel located at (x,y)."
BandedSampleModel,"getSampleDouble(int x, int y, int b, DataBuffer data)",double,"Returns the sample in a specified band for a pixel located at (x,y) as a double."
BandedSampleModel,"getSampleFloat(int x, int y, int b, DataBuffer data)",float,"Returns the sample in a specified band for the pixel located at (x,y) as a float."
BandedSampleModel,"getSamples(int x, int y, int w, int h, int b, int[] iArray, DataBuffer data)",int[],"Returns the samples in a specified band for the specified rectangle of pixels in an int array, one sample per data array element."
BandedSampleModel,hashCode(),int,Returns a hash code value for the object.
BandedSampleModel,"setDataElements(int x, int y, Object obj, DataBuffer data)",void,Sets the data for a single pixel in the specified DataBuffer from a primitive array of type TransferType.
BandedSampleModel,"setPixel(int x, int y, int[] iArray, DataBuffer data)",void,Sets a pixel in the DataBuffer using an int array of samples for input.
BandedSampleModel,"setPixels(int x, int y, int w, int h, int[] iArray, DataBuffer data)",void,Sets all samples for a rectangle of pixels from an int array containing one sample per array element.
BandedSampleModel,"setSample(int x, int y, int b, double s, DataBuffer data)",void,"Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a double for input."
BandedSampleModel,"setSample(int x, int y, int b, float s, DataBuffer data)",void,"Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a float for input."
BandedSampleModel,"setSample(int x, int y, int b, int s, DataBuffer data)",void,"Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using an int for input."
BandedSampleModel,"setSamples(int x, int y, int w, int h, int b, int[] iArray, DataBuffer data)",void,Sets the samples in the specified band for the specified rectangle of pixels from an int array containing one sample per data array element.
BufferedImage,addTileObserver(TileObserver to),void,Adds a tile observer.
BufferedImage,coerceData(boolean isAlphaPremultiplied),void,Forces the data to match the state specified in the isAlphaPremultiplied variable.
BufferedImage,copyData(WritableRaster outRaster),WritableRaster,Computes an arbitrary rectangular region of the BufferedImage and copies it into a specified WritableRaster.
BufferedImage,createGraphics(),Graphics2D,"Creates a Graphics2D, which can be used to draw into this BufferedImage."
BufferedImage,getAlphaRaster(),WritableRaster,"Returns a WritableRaster representing the alpha channel for BufferedImage objects with ColorModel objects that support a separate spatial alpha channel, such as ComponentColorModel and DirectColorModel."
BufferedImage,getColorModel(),ColorModel,Returns the ColorModel.
BufferedImage,getData(),Raster,Returns the image as one large tile.
BufferedImage,getData(Rectangle rect),Raster,Computes and returns an arbitrary region of the BufferedImage.
BufferedImage,getGraphics(),Graphics,"This method returns a Graphics2D, but is here for backwards compatibility."
BufferedImage,getHeight(),int,Returns the height of the BufferedImage.
BufferedImage,getHeight(ImageObserver observer),int,Returns the height of the BufferedImage.
BufferedImage,getMinTileX(),int,Returns the minimum tile index in the x direction.
BufferedImage,getMinTileY(),int,Returns the minimum tile index in the y direction.
BufferedImage,getMinX(),int,Returns the minimum x coordinate of this BufferedImage.
BufferedImage,getMinY(),int,Returns the minimum y coordinate of this BufferedImage.
BufferedImage,getNumXTiles(),int,Returns the number of tiles in the x direction.
BufferedImage,getNumYTiles(),int,Returns the number of tiles in the y direction.
BufferedImage,getProperty(String name),Object,Returns a property of the image by name.
BufferedImage,"getProperty(String name, ImageObserver observer)",Object,Returns a property of the image by name.
BufferedImage,getPropertyNames(),String[],"Returns an array of names recognized by getProperty(String) or null, if no property names are recognized."
BufferedImage,getRaster(),WritableRaster,Returns the WritableRaster.
BufferedImage,"getRGB(int x, int y)",int,Returns an integer pixel in the default RGB color model (TYPE_INT_ARGB) and default sRGB colorspace.
BufferedImage,"getRGB(int startX, int startY, int w, int h, int[] rgbArray, int offset, int scansize)",int[],"Returns an array of integer pixels in the default RGB color model (TYPE_INT_ARGB) and default sRGB color space, from a portion of the image data."
BufferedImage,getSampleModel(),SampleModel,Returns the SampleModel associated with this BufferedImage.
BufferedImage,getSource(),ImageProducer,Returns the object that produces the pixels for the image.
BufferedImage,getSources(),Vector<RenderedImage>,"Returns a Vector of RenderedImage objects that are the immediate sources, not the sources of these immediate sources, of image data for this BufferedImage."
BufferedImage,"getSubimage(int x, int y, int w, int h)",BufferedImage,Returns a subimage defined by a specified rectangular region.
BufferedImage,"getTile(int tileX, int tileY)",Raster,"Returns tile (tileX, tileY)."
BufferedImage,getTileGridXOffset(),int,"Returns the x offset of the tile grid relative to the origin, For example, the x coordinate of the location of tile (0, 0)."
BufferedImage,getTileGridYOffset(),int,"Returns the y offset of the tile grid relative to the origin, For example, the y coordinate of the location of tile (0, 0)."
BufferedImage,getTileHeight(),int,Returns the tile height in pixels.
BufferedImage,getTileWidth(),int,Returns the tile width in pixels.
BufferedImage,getTransparency(),int,Returns the transparency.
BufferedImage,getType(),int,Returns the image type.
BufferedImage,getWidth(),int,Returns the width of the BufferedImage.
BufferedImage,getWidth(ImageObserver observer),int,Returns the width of the BufferedImage.
BufferedImage,"getWritableTile(int tileX, int tileY)",WritableRaster,Checks out a tile for writing.
BufferedImage,getWritableTileIndices(),Point[],Returns an array of Point objects indicating which tiles are checked out for writing.
BufferedImage,hasTileWriters(),boolean,Returns whether or not any tile is checked out for writing.
BufferedImage,isAlphaPremultiplied(),boolean,Returns whether or not the alpha has been premultiplied.
BufferedImage,"isTileWritable(int tileX, int tileY)",boolean,Returns whether or not a tile is currently checked out for writing.
BufferedImage,"releaseWritableTile(int tileX, int tileY)",void,Relinquishes permission to write to a tile.
BufferedImage,removeTileObserver(TileObserver to),void,Removes a tile observer.
BufferedImage,setData(Raster r),void,"Sets a rectangular region of the image to the contents of the specified Raster r, which is assumed to be in the same coordinate space as the BufferedImage."
BufferedImage,"setRGB(int x, int y, int rgb)",void,Sets a pixel in this BufferedImage to the specified RGB value.
BufferedImage,"setRGB(int startX, int startY, int w, int h, int[] rgbArray, int offset, int scansize)",void,"Sets an array of integer pixels in the default RGB color model (TYPE_INT_ARGB) and default sRGB color space, into a portion of the image data."
BufferedImage,toString(),String,Returns a String representation of this BufferedImage object and its values.
BufferedImageFilter,getBufferedImageOp(),BufferedImageOp,Returns the BufferedImageOp.
BufferedImageFilter,imageComplete(int status),void,Filters the information provided in the imageComplete method of the ImageConsumer interface.
BufferedImageFilter,setColorModel(ColorModel model),void,Filters the information provided in the setColorModel method of the ImageConsumer interface.
BufferedImageFilter,"setDimensions(int width, int height)",void,Filters the information provided in the setDimensions method of the ImageConsumer interface.
BufferedImageFilter,"setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize)",void,Filters the information provided in the setPixels method of the ImageConsumer interface which takes an array of bytes.
BufferedImageFilter,"setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize)",void,Filters the information provided in the setPixels method of the ImageConsumer interface which takes an array of integers.
BufferStrategy,contentsLost(),abstract boolean,Returns whether the drawing buffer was lost since the last call to getDrawGraphics.
BufferStrategy,contentsRestored(),abstract boolean,Returns whether the drawing buffer was recently restored from a lost state and reinitialized to the default background color (white).
BufferStrategy,dispose(),void,Releases system resources currently consumed by this BufferStrategy and removes it from the associated Component.
BufferStrategy,getCapabilities(),abstract BufferCapabilities,Returns the BufferCapabilities for this BufferStrategy.
BufferStrategy,getDrawGraphics(),abstract Graphics,Creates a graphics context for the drawing buffer.
BufferStrategy,show(),abstract void,Makes the next available buffer visible by either copying the memory (blitting) or changing the display pointer (flipping).
ByteLookupTable,getTable(),byte[][],Returns the lookup table data by reference.
ByteLookupTable,"lookupPixel(byte[] src, byte[] dst)",byte[],"Returns an array of samples of a pixel, translated with the lookup table."
ByteLookupTable,"lookupPixel(int[] src, int[] dst)",int[],"Returns an array of samples of a pixel, translated with the lookup table."
ColorConvertOp,"createCompatibleDestImage(BufferedImage src, ColorModel destCM)",BufferedImage,"Creates a zeroed destination image with the correct size and number of bands, given this source."
ColorConvertOp,createCompatibleDestRaster(Raster src),WritableRaster,"Creates a zeroed destination Raster with the correct size and number of bands, given this source."
ColorConvertOp,"filter(BufferedImage src, BufferedImage dest)",BufferedImage,ColorConverts the source BufferedImage.
ColorConvertOp,"filter(Raster src, WritableRaster dest)",WritableRaster,ColorConverts the image data in the source Raster.
ColorConvertOp,getBounds2D(BufferedImage src),Rectangle2D,"Returns the bounding box of the destination, given this source."
ColorConvertOp,getBounds2D(Raster src),Rectangle2D,"Returns the bounding box of the destination, given this source."
ColorConvertOp,getICC_Profiles(),ICC_Profile[],Returns the array of ICC_Profiles used to construct this ColorConvertOp.
ColorConvertOp,"getPoint2D(Point2D srcPt, Point2D dstPt)",Point2D,Returns the location of the destination point given a point in the source.
ColorConvertOp,getRenderingHints(),RenderingHints,Returns the rendering hints used by this op.
ColorModel,"coerceData(WritableRaster raster, boolean isAlphaPremultiplied)",ColorModel,"Forces the raster data to match the state specified in the isAlphaPremultiplied variable, assuming the data is currently correctly described by this ColorModel."
ColorModel,"createCompatibleSampleModel(int w, int h)",SampleModel,Creates a SampleModel with the specified width and height that has a data layout compatible with this ColorModel.
ColorModel,"createCompatibleWritableRaster(int w, int h)",WritableRaster,Creates a WritableRaster with the specified width and height that has a data layout (SampleModel) compatible with this ColorModel.
ColorModel,equals(Object obj),boolean,Tests if the specified Object is an instance of ColorModel and if it equals this ColorModel.
ColorModel,finalize(),void,Disposes of system resources associated with this ColorModel once this ColorModel is no longer referenced.
ColorModel,getAlpha(int pixel),abstract int,"Returns the alpha component for the specified pixel, scaled from 0 to 255."
ColorModel,getAlpha(Object inData),int,"Returns the alpha component for the specified pixel, scaled from 0 to 255."
ColorModel,getAlphaRaster(WritableRaster raster),WritableRaster,"Returns a Raster representing the alpha channel of an image, extracted from the input Raster, provided that pixel values of this ColorModel represent color and alpha information as separate spatial bands (e.g."
ColorModel,getBlue(int pixel),abstract int,"Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB."
ColorModel,getBlue(Object inData),int,"Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB."
ColorModel,getColorSpace(),ColorSpace,Returns the ColorSpace associated with this ColorModel.
ColorModel,"getComponents(int pixel, int[] components, int offset)",int[],Returns an array of unnormalized color/alpha components given a pixel in this ColorModel.
ColorModel,"getComponents(Object pixel, int[] components, int offset)",int[],Returns an array of unnormalized color/alpha components given a pixel in this ColorModel.
ColorModel,getComponentSize(),int[],Returns an array of the number of bits per color/alpha component.
ColorModel,getComponentSize(int componentIdx),int,Returns the number of bits for the specified color/alpha component.
ColorModel,"getDataElement(float[] normComponents, int normOffset)",int,"Returns a pixel value represented as an int in this ColorModel, given an array of normalized color/alpha components."
ColorModel,"getDataElement(int[] components, int offset)",int,"Returns a pixel value represented as an int in this ColorModel, given an array of unnormalized color/alpha components."
ColorModel,"getDataElements(float[] normComponents, int normOffset, Object obj)",Object,"Returns a data element array representation of a pixel in this ColorModel, given an array of normalized color/alpha components."
ColorModel,"getDataElements(int[] components, int offset, Object obj)",Object,"Returns a data element array representation of a pixel in this ColorModel, given an array of unnormalized color/alpha components."
ColorModel,"getDataElements(int rgb, Object pixel)",Object,"Returns a data element array representation of a pixel in this ColorModel, given an integer pixel representation in the default RGB color model."
ColorModel,getGreen(int pixel),abstract int,"Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB."
ColorModel,getGreen(Object inData),int,"Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB."
ColorModel,"getNormalizedComponents(int[] components, int offset, float[] normComponents, int normOffset)",float[],"Returns an array of all of the color/alpha components in normalized form, given an unnormalized component array."
ColorModel,"getNormalizedComponents(Object pixel, float[] normComponents, int normOffset)",float[],"Returns an array of all of the color/alpha components in normalized form, given a pixel in this ColorModel."
ColorModel,getNumColorComponents(),int,Returns the number of color components in this ColorModel.
ColorModel,getNumComponents(),int,"Returns the number of components, including alpha, in this ColorModel."
ColorModel,getPixelSize(),int,Returns the number of bits per pixel described by this ColorModel.
ColorModel,getRed(int pixel),abstract int,"Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB."
ColorModel,getRed(Object inData),int,"Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB."
ColorModel,getRGB(int pixel),int,Returns the color/alpha components of the pixel in the default RGB color model format.
ColorModel,getRGB(Object inData),int,Returns the color/alpha components for the specified pixel in the default RGB color model format.
ColorModel,getRGBdefault(),static ColorModel,Returns a DirectColorModel that describes the default format for integer RGB values used in many of the methods in the AWT image interfaces for the convenience of the programmer.
ColorModel,getTransferType(),int,Returns the transfer type of this ColorModel.
ColorModel,getTransparency(),int,Returns the transparency.
ColorModel,"getUnnormalizedComponents(float[] normComponents, int normOffset, int[] components, int offset)",int[],"Returns an array of all of the color/alpha components in unnormalized form, given a normalized component array."
ColorModel,hasAlpha(),boolean,Returns whether or not alpha is supported in this ColorModel.
ColorModel,hashCode(),int,Returns the hash code for this ColorModel.
ColorModel,isAlphaPremultiplied(),boolean,Returns whether or not the alpha has been premultiplied in the pixel values to be translated by this ColorModel.
ColorModel,isCompatibleRaster(Raster raster),boolean,Returns true if raster is compatible with this ColorModel and false if it is not.
ColorModel,isCompatibleSampleModel(SampleModel sm),boolean,Checks if the SampleModel is compatible with this ColorModel.
ColorModel,toString(),String,Returns the String representation of the contents of this ColorModelobject.
ComponentColorModel,"coerceData(WritableRaster raster, boolean isAlphaPremultiplied)",ColorModel,"Forces the raster data to match the state specified in the isAlphaPremultiplied variable, assuming the data is currently correctly described by this ColorModel."
ComponentColorModel,"createCompatibleSampleModel(int w, int h)",SampleModel,"Creates a SampleModel with the specified width and height, that has a data layout compatible with this ColorModel."
ComponentColorModel,"createCompatibleWritableRaster(int w, int h)",WritableRaster,"Creates a WritableRaster with the specified width and height, that has a data layout (SampleModel) compatible with this ColorModel."
ComponentColorModel,equals(Object obj),boolean,Compares this color model with another for equality.
ComponentColorModel,getAlpha(int pixel),int,"Returns the alpha component for the specified pixel, scaled from 0 to 255."
ComponentColorModel,getAlpha(Object inData),int,"Returns the alpha component for the specified pixel, scaled from 0 to 255."
ComponentColorModel,getAlphaRaster(WritableRaster raster),WritableRaster,"Returns a Raster representing the alpha channel of an image, extracted from the input Raster."
ComponentColorModel,getBlue(int pixel),int,"Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB."
ComponentColorModel,getBlue(Object inData),int,"Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB."
ComponentColorModel,"getComponents(int pixel, int[] components, int offset)",int[],Returns an array of unnormalized color/alpha components given a pixel in this ColorModel.
ComponentColorModel,"getComponents(Object pixel, int[] components, int offset)",int[],Returns an array of unnormalized color/alpha components given a pixel in this ColorModel.
ComponentColorModel,"getDataElement(float[] normComponents, int normOffset)",int,"Returns a pixel value represented as an int in this ColorModel, given an array of normalized color/alpha components."
ComponentColorModel,"getDataElement(int[] components, int offset)",int,"Returns a pixel value represented as an int in this ColorModel, given an array of unnormalized color/alpha components."
ComponentColorModel,"getDataElements(float[] normComponents, int normOffset, Object obj)",Object,"Returns a data element array representation of a pixel in this ColorModel, given an array of normalized color/alpha components."
ComponentColorModel,"getDataElements(int[] components, int offset, Object obj)",Object,"Returns a data element array representation of a pixel in this ColorModel, given an array of unnormalized color/alpha components."
ComponentColorModel,"getDataElements(int rgb, Object pixel)",Object,"Returns a data element array representation of a pixel in this ColorModel, given an integer pixel representation in the default RGB color model."
ComponentColorModel,getGreen(int pixel),int,"Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB."
ComponentColorModel,getGreen(Object inData),int,"Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB."
ComponentColorModel,"getNormalizedComponents(int[] components, int offset, float[] normComponents, int normOffset)",float[],"Returns an array of all of the color/alpha components in normalized form, given an unnormalized component array."
ComponentColorModel,"getNormalizedComponents(Object pixel, float[] normComponents, int normOffset)",float[],"Returns an array of all of the color/alpha components in normalized form, given a pixel in this ColorModel."
ComponentColorModel,getRed(int pixel),int,"Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB."
ComponentColorModel,getRed(Object inData),int,"Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB."
ComponentColorModel,getRGB(int pixel),int,Returns the color/alpha components of the pixel in the default RGB color model format.
ComponentColorModel,getRGB(Object inData),int,Returns the color/alpha components for the specified pixel in the default RGB color model format.
ComponentColorModel,"getUnnormalizedComponents(float[] normComponents, int normOffset, int[] components, int offset)",int[],"Returns an array of all of the color/alpha components in unnormalized form, given a normalized component array."
ComponentColorModel,isCompatibleRaster(Raster raster),boolean,Returns true if raster is compatible with this ColorModel; false if it is not.
ComponentColorModel,isCompatibleSampleModel(SampleModel sm),boolean,Checks whether or not the specified SampleModel is compatible with this ColorModel.
ComponentSampleModel,"createCompatibleSampleModel(int w, int h)",SampleModel,Creates a new ComponentSampleModel with the specified width and height.
ComponentSampleModel,createDataBuffer(),DataBuffer,Creates a DataBuffer that corresponds to this ComponentSampleModel.
ComponentSampleModel,createSubsetSampleModel(int[] bands),SampleModel,Creates a new ComponentSampleModel with a subset of the bands of this ComponentSampleModel.
ComponentSampleModel,equals(Object o),boolean,"Indicates whether some other object is ""equal to"" this one."
ComponentSampleModel,getBandOffsets(),int[],Returns the band offset for all bands.
ComponentSampleModel,getBankIndices(),int[],Returns the bank indices for all bands.
ComponentSampleModel,"getDataElements(int x, int y, Object obj, DataBuffer data)",Object,Returns data for a single pixel in a primitive array of type TransferType.
ComponentSampleModel,getNumDataElements(),int,"Returns the number of data elements needed to transfer a pixel with the getDataElements(int, int, Object, DataBuffer) and setDataElements(int, int, Object, DataBuffer) methods."
ComponentSampleModel,"getOffset(int x, int y)",int,"Gets the offset for the first band of pixel (x,y)."
ComponentSampleModel,"getOffset(int x, int y, int b)",int,"Gets the offset for band b of pixel (x,y)."
ComponentSampleModel,"getPixel(int x, int y, int[] iArray, DataBuffer data)",int[],"Returns all samples for the specified pixel in an int array, one sample per array element."
ComponentSampleModel,"getPixels(int x, int y, int w, int h, int[] iArray, DataBuffer data)",int[],"Returns all samples for the specified rectangle of pixels in an int array, one sample per array element."
ComponentSampleModel,getPixelStride(),int,Returns the pixel stride of this ComponentSampleModel.
ComponentSampleModel,"getSample(int x, int y, int b, DataBuffer data)",int,"Returns as int the sample in a specified band for the pixel located at (x,y)."
ComponentSampleModel,"getSampleDouble(int x, int y, int b, DataBuffer data)",double,"Returns the sample in a specified band for a pixel located at (x,y) as a double."
ComponentSampleModel,"getSampleFloat(int x, int y, int b, DataBuffer data)",float,"Returns the sample in a specified band for the pixel located at (x,y) as a float."
ComponentSampleModel,"getSamples(int x, int y, int w, int h, int b, int[] iArray, DataBuffer data)",int[],"Returns the samples in a specified band for the specified rectangle of pixels in an int array, one sample per data array element."
ComponentSampleModel,getSampleSize(),int[],Returns the number of bits per sample for all bands.
ComponentSampleModel,getSampleSize(int band),int,Returns the number of bits per sample for the specified band.
ComponentSampleModel,getScanlineStride(),int,Returns the scanline stride of this ComponentSampleModel.
ComponentSampleModel,hashCode(),int,Returns a hash code value for the object.
ComponentSampleModel,"setDataElements(int x, int y, Object obj, DataBuffer data)",void,Sets the data for a single pixel in the specified DataBuffer from a primitive array of type TransferType.
ComponentSampleModel,"setPixel(int x, int y, int[] iArray, DataBuffer data)",void,Sets a pixel in the DataBuffer using an int array of samples for input.
ComponentSampleModel,"setPixels(int x, int y, int w, int h, int[] iArray, DataBuffer data)",void,Sets all samples for a rectangle of pixels from an int array containing one sample per array element.
ComponentSampleModel,"setSample(int x, int y, int b, double s, DataBuffer data)",void,"Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a double for input."
ComponentSampleModel,"setSample(int x, int y, int b, float s, DataBuffer data)",void,"Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a float for input."
ComponentSampleModel,"setSample(int x, int y, int b, int s, DataBuffer data)",void,"Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using an int for input."
ComponentSampleModel,"setSamples(int x, int y, int w, int h, int b, int[] iArray, DataBuffer data)",void,Sets the samples in the specified band for the specified rectangle of pixels from an int array containing one sample per data array element.
ConvolveOp,"createCompatibleDestImage(BufferedImage src, ColorModel destCM)",BufferedImage,Creates a zeroed destination image with the correct size and number of bands.
ConvolveOp,createCompatibleDestRaster(Raster src),WritableRaster,"Creates a zeroed destination Raster with the correct size and number of bands, given this source."
ConvolveOp,"filter(BufferedImage src, BufferedImage dst)",BufferedImage,Performs a convolution on BufferedImages.
ConvolveOp,"filter(Raster src, WritableRaster dst)",WritableRaster,Performs a convolution on Rasters.
ConvolveOp,getBounds2D(BufferedImage src),Rectangle2D,Returns the bounding box of the filtered destination image.
ConvolveOp,getBounds2D(Raster src),Rectangle2D,Returns the bounding box of the filtered destination Raster.
ConvolveOp,getEdgeCondition(),int,Returns the edge condition.
ConvolveOp,getKernel(),Kernel,Returns the Kernel.
ConvolveOp,"getPoint2D(Point2D srcPt, Point2D dstPt)",Point2D,Returns the location of the destination point given a point in the source.
ConvolveOp,getRenderingHints(),RenderingHints,Returns the rendering hints for this op.
CropImageFilter,"setDimensions(int w, int h)",void,Override the source image's dimensions and pass the dimensions of the rectangular cropped region to the ImageConsumer.
CropImageFilter,"setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize)",void,Determine whether the delivered byte pixels intersect the region to be extracted and passes through only that subset of pixels that appear in the output region.
CropImageFilter,"setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize)",void,Determine if the delivered int pixels intersect the region to be extracted and pass through only that subset of pixels that appear in the output region.
CropImageFilter,"setProperties(Hashtable<?,?> props)",void,Passes along the properties from the source object after adding a property indicating the cropped region.
DataBuffer,getDataType(),int,Returns the data type of this DataBuffer.
DataBuffer,getDataTypeSize(int type),static int,"Returns the size (in bits) of the data type, given a datatype tag."
DataBuffer,getElem(int i),int,Returns the requested data array element from the first (default) bank as an integer.
DataBuffer,"getElem(int bank, int i)",abstract int,Returns the requested data array element from the specified bank as an integer.
DataBuffer,getElemDouble(int i),double,Returns the requested data array element from the first (default) bank as a double.
DataBuffer,"getElemDouble(int bank, int i)",double,Returns the requested data array element from the specified bank as a double.
DataBuffer,getElemFloat(int i),float,Returns the requested data array element from the first (default) bank as a float.
DataBuffer,"getElemFloat(int bank, int i)",float,Returns the requested data array element from the specified bank as a float.
DataBuffer,getNumBanks(),int,Returns the number of banks in this DataBuffer.
DataBuffer,getOffset(),int,Returns the offset of the default bank in array elements.
DataBuffer,getOffsets(),int[],Returns the offsets (in array elements) of all the banks.
DataBuffer,getSize(),int,Returns the size (in array elements) of all banks.
DataBuffer,"setElem(int i, int val)",void,Sets the requested data array element in the first (default) bank from the given integer.
DataBuffer,"setElem(int bank, int i, int val)",abstract void,Sets the requested data array element in the specified bank from the given integer.
DataBuffer,"setElemDouble(int i, double val)",void,Sets the requested data array element in the first (default) bank from the given double.
DataBuffer,"setElemDouble(int bank, int i, double val)",void,Sets the requested data array element in the specified bank from the given double.
DataBuffer,"setElemFloat(int i, float val)",void,Sets the requested data array element in the first (default) bank from the given float.
DataBuffer,"setElemFloat(int bank, int i, float val)",void,Sets the requested data array element in the specified bank from the given float.
DataBufferByte,getBankData(),byte[][],Returns the data arrays for all banks.
DataBufferByte,getData(),byte[],Returns the default (first) byte data array.
DataBufferByte,getData(int bank),byte[],Returns the data array for the specified bank.
DataBufferByte,getElem(int i),int,Returns the requested data array element from the first (default) bank.
DataBufferByte,"getElem(int bank, int i)",int,Returns the requested data array element from the specified bank.
DataBufferByte,"setElem(int i, int val)",void,Sets the requested data array element in the first (default) bank to the specified value.
DataBufferByte,"setElem(int bank, int i, int val)",void,Sets the requested data array element in the specified bank from the given integer.
DataBufferDouble,getBankData(),double[][],Returns the data array for all banks.
DataBufferDouble,getData(),double[],Returns the default (first) double data array.
DataBufferDouble,getData(int bank),double[],Returns the data array for the specified bank.
DataBufferDouble,getElem(int i),int,Returns the requested data array element from the first (default) bank as an int.
DataBufferDouble,"getElem(int bank, int i)",int,Returns the requested data array element from the specified bank as an int.
DataBufferDouble,getElemDouble(int i),double,Returns the requested data array element from the first (default) bank as a double.
DataBufferDouble,"getElemDouble(int bank, int i)",double,Returns the requested data array element from the specified bank as a double.
DataBufferDouble,getElemFloat(int i),float,Returns the requested data array element from the first (default) bank as a float.
DataBufferDouble,"getElemFloat(int bank, int i)",float,Returns the requested data array element from the specified bank as a float.
DataBufferDouble,"setElem(int i, int val)",void,Sets the requested data array element in the first (default) bank to the given int.
DataBufferDouble,"setElem(int bank, int i, int val)",void,Sets the requested data array element in the specified bank to the given int.
DataBufferDouble,"setElemDouble(int i, double val)",void,Sets the requested data array element in the first (default) bank to the given double.
DataBufferDouble,"setElemDouble(int bank, int i, double val)",void,Sets the requested data array element in the specified bank to the given double.
DataBufferDouble,"setElemFloat(int i, float val)",void,Sets the requested data array element in the first (default) bank to the given float.
DataBufferDouble,"setElemFloat(int bank, int i, float val)",void,Sets the requested data array element in the specified bank to the given float.
DataBufferFloat,getBankData(),float[][],Returns the data array for all banks.
DataBufferFloat,getData(),float[],Returns the default (first) float data array.
DataBufferFloat,getData(int bank),float[],Returns the data array for the specified bank.
DataBufferFloat,getElem(int i),int,Returns the requested data array element from the first (default) bank as an int.
DataBufferFloat,"getElem(int bank, int i)",int,Returns the requested data array element from the specified bank as an int.
DataBufferFloat,getElemDouble(int i),double,Returns the requested data array element from the first (default) bank as a double.
DataBufferFloat,"getElemDouble(int bank, int i)",double,Returns the requested data array element from the specified bank as a double.
DataBufferFloat,getElemFloat(int i),float,Returns the requested data array element from the first (default) bank as a float.
DataBufferFloat,"getElemFloat(int bank, int i)",float,Returns the requested data array element from the specified bank as a float.
DataBufferFloat,"setElem(int i, int val)",void,Sets the requested data array element in the first (default) bank to the given int.
DataBufferFloat,"setElem(int bank, int i, int val)",void,Sets the requested data array element in the specified bank to the given int.
DataBufferFloat,"setElemDouble(int i, double val)",void,Sets the requested data array element in the first (default) bank to the given double.
DataBufferFloat,"setElemDouble(int bank, int i, double val)",void,Sets the requested data array element in the specified bank to the given double.
DataBufferFloat,"setElemFloat(int i, float val)",void,Sets the requested data array element in the first (default) bank to the given float.
DataBufferFloat,"setElemFloat(int bank, int i, float val)",void,Sets the requested data array element in the specified bank to the given float.
DataBufferInt,getBankData(),int[][],Returns the data arrays for all banks.
DataBufferInt,getData(),int[],Returns the default (first) int data array in DataBuffer.
DataBufferInt,getData(int bank),int[],Returns the data array for the specified bank.
DataBufferInt,getElem(int i),int,Returns the requested data array element from the first (default) bank.
DataBufferInt,"getElem(int bank, int i)",int,Returns the requested data array element from the specified bank.
DataBufferInt,"setElem(int i, int val)",void,Sets the requested data array element in the first (default) bank to the specified value.
DataBufferInt,"setElem(int bank, int i, int val)",void,Sets the requested data array element in the specified bank to the integer value i.
DataBufferShort,getBankData(),short[][],Returns the data arrays for all banks.
DataBufferShort,getData(),short[],Returns the default (first) byte data array.
DataBufferShort,getData(int bank),short[],Returns the data array for the specified bank.
DataBufferShort,getElem(int i),int,Returns the requested data array element from the first (default) bank.
DataBufferShort,"getElem(int bank, int i)",int,Returns the requested data array element from the specified bank.
DataBufferShort,"setElem(int i, int val)",void,Sets the requested data array element in the first (default) bank to the specified value.
DataBufferShort,"setElem(int bank, int i, int val)",void,Sets the requested data array element in the specified bank from the given integer.
DataBufferUShort,getBankData(),short[][],Returns the data arrays for all banks.
DataBufferUShort,getData(),short[],Returns the default (first) unsigned-short data array.
DataBufferUShort,getData(int bank),short[],Returns the data array for the specified bank.
DataBufferUShort,getElem(int i),int,Returns the requested data array element from the first (default) bank.
DataBufferUShort,"getElem(int bank, int i)",int,Returns the requested data array element from the specified bank.
DataBufferUShort,"setElem(int i, int val)",void,Sets the requested data array element in the first (default) bank to the specified value.
DataBufferUShort,"setElem(int bank, int i, int val)",void,Sets the requested data array element in the specified bank from the given integer.
DirectColorModel,"coerceData(WritableRaster raster, boolean isAlphaPremultiplied)",ColorModel,"Forces the raster data to match the state specified in the isAlphaPremultiplied variable, assuming the data is currently correctly described by this ColorModel."
DirectColorModel,"createCompatibleWritableRaster(int w, int h)",WritableRaster,Creates a WritableRaster with the specified width and height that has a data layout (SampleModel) compatible with this ColorModel.
DirectColorModel,getAlpha(int pixel),int,"Returns the alpha component for the specified pixel, scaled from 0 to 255."
DirectColorModel,getAlpha(Object inData),int,"Returns the alpha component for the specified pixel, scaled from 0 to 255."
DirectColorModel,getAlphaMask(),int,Returns the mask indicating which bits in an int pixel representation contain the alpha component.
DirectColorModel,getBlue(int pixel),int,"Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB."
DirectColorModel,getBlue(Object inData),int,"Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB."
DirectColorModel,getBlueMask(),int,Returns the mask indicating which bits in an int pixel representation contain the blue color component.
DirectColorModel,"getComponents(int pixel, int[] components, int offset)",int[],Returns an array of unnormalized color/alpha components given a pixel in this ColorModel.
DirectColorModel,"getComponents(Object pixel, int[] components, int offset)",int[],Returns an array of unnormalized color/alpha components given a pixel in this ColorModel.
DirectColorModel,"getDataElement(int[] components, int offset)",int,"Returns a pixel value represented as an int in this ColorModel, given an array of unnormalized color/alpha components."
DirectColorModel,"getDataElements(int[] components, int offset, Object obj)",Object,"Returns a data element array representation of a pixel in this ColorModel, given an array of unnormalized color/alpha components."
DirectColorModel,"getDataElements(int rgb, Object pixel)",Object,"Returns a data element array representation of a pixel in this ColorModel, given an integer pixel representation in the default RGB color model."
DirectColorModel,getGreen(int pixel),int,"Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB."
DirectColorModel,getGreen(Object inData),int,"Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB."
DirectColorModel,getGreenMask(),int,Returns the mask indicating which bits in an int pixel representation contain the green color component.
DirectColorModel,getRed(int pixel),int,"Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB."
DirectColorModel,getRed(Object inData),int,"Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB."
DirectColorModel,getRedMask(),int,Returns the mask indicating which bits in an int pixel representation contain the red color component.
DirectColorModel,getRGB(int pixel),int,Returns the color/alpha components of the pixel in the default RGB color model format.
DirectColorModel,getRGB(Object inData),int,Returns the color/alpha components for the specified pixel in the default RGB color model format.
DirectColorModel,isCompatibleRaster(Raster raster),boolean,Returns true if raster is compatible with this ColorModel and false if it is not.
DirectColorModel,toString(),String,Returns a String that represents this DirectColorModel.
FilteredImageSource,addConsumer(ImageConsumer ic),void,Adds the specified ImageConsumer to the list of consumers interested in data for the filtered image.
FilteredImageSource,isConsumer(ImageConsumer ic),boolean,Determines whether an ImageConsumer is on the list of consumers currently interested in data for this image.
FilteredImageSource,removeConsumer(ImageConsumer ic),void,Removes an ImageConsumer from the list of consumers interested in data for this image.
FilteredImageSource,requestTopDownLeftRightResend(ImageConsumer ic),void,"Requests that a given ImageConsumer have the image data delivered one more time in top-down, left-right order."
FilteredImageSource,startProduction(ImageConsumer ic),void,Starts production of the filtered image.
ImageFilter,clone(),Object,Clones this object.
ImageFilter,getFilterInstance(ImageConsumer ic),ImageFilter,Returns a unique instance of an ImageFilter object which will actually perform the filtering for the specified ImageConsumer.
ImageFilter,imageComplete(int status),void,Filters the information provided in the imageComplete method of the ImageConsumer interface.
ImageFilter,resendTopDownLeftRight(ImageProducer ip),void,Responds to a request for a TopDownLeftRight (TDLR) ordered resend of the pixel data from an ImageConsumer.
ImageFilter,setColorModel(ColorModel model),void,Filter the information provided in the setColorModel method of the ImageConsumer interface.
ImageFilter,"setDimensions(int width, int height)",void,Filters the information provided in the setDimensions method of the ImageConsumer interface.
ImageFilter,setHints(int hints),void,Filters the information provided in the setHints method of the ImageConsumer interface.
ImageFilter,"setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize)",void,Filters the information provided in the setPixels method of the ImageConsumer interface which takes an array of bytes.
ImageFilter,"setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize)",void,Filters the information provided in the setPixels method of the ImageConsumer interface which takes an array of integers.
ImageFilter,"setProperties(Hashtable<?,?> props)",void,Passes the properties from the source object along after adding a property indicating the stream of filters it has been run through.
IndexColorModel,"convertToIntDiscrete(Raster raster, boolean forceARGB)",BufferedImage,Returns a new BufferedImage of TYPE_INT_ARGB or TYPE_INT_RGB that has a Raster with pixel data computed by expanding the indices in the source Raster using the color/alpha component arrays of this ColorModel.
IndexColorModel,"createCompatibleSampleModel(int w, int h)",SampleModel,Creates a SampleModel with the specified width and height that has a data layout compatible with this ColorModel.
IndexColorModel,"createCompatibleWritableRaster(int w, int h)",WritableRaster,Creates a WritableRaster with the specified width and height that has a data layout (SampleModel) compatible with this ColorModel.
IndexColorModel,finalize(),void,Disposes of system resources associated with this ColorModel once this ColorModel is no longer referenced.
IndexColorModel,getAlpha(int pixel),int,"Returns the alpha component for the specified pixel, scaled from 0 to 255."
IndexColorModel,getAlphas(byte[] a),void,Copies the array of alpha transparency components into the specified array.
IndexColorModel,getBlue(int pixel),int,"Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB."
IndexColorModel,getBlues(byte[] b),void,Copies the array of blue color components into the specified array.
IndexColorModel,"getComponents(int pixel, int[] components, int offset)",int[],Returns an array of unnormalized color/alpha components for a specified pixel in this ColorModel.
IndexColorModel,"getComponents(Object pixel, int[] components, int offset)",int[],Returns an array of unnormalized color/alpha components for a specified pixel in this ColorModel.
IndexColorModel,getComponentSize(),int[],Returns an array of the number of bits for each color/alpha component.
IndexColorModel,"getDataElement(int[] components, int offset)",int,Returns a pixel value represented as an int in this ColorModel given an array of unnormalized color/alpha components.
IndexColorModel,"getDataElements(int[] components, int offset, Object pixel)",Object,Returns a data element array representation of a pixel in this ColorModel given an array of unnormalized color/alpha components.
IndexColorModel,"getDataElements(int rgb, Object pixel)",Object,"Returns a data element array representation of a pixel in this ColorModel, given an integer pixel representation in the default RGB color model."
IndexColorModel,getGreen(int pixel),int,"Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB."
IndexColorModel,getGreens(byte[] g),void,Copies the array of green color components into the specified array.
IndexColorModel,getMapSize(),int,Returns the size of the color/alpha component arrays in this IndexColorModel.
IndexColorModel,getRed(int pixel),int,"Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB."
IndexColorModel,getReds(byte[] r),void,Copies the array of red color components into the specified array.
IndexColorModel,getRGB(int pixel),int,Returns the color/alpha components of the pixel in the default RGB color model format.
IndexColorModel,getRGBs(int[] rgb),void,Converts data for each index from the color and alpha component arrays to an int in the default RGB ColorModel format and copies the resulting 32-bit ARGB values into the specified array.
IndexColorModel,getTransparency(),int,Returns the transparency.
IndexColorModel,getTransparentPixel(),int,Returns the index of a transparent pixel in this IndexColorModel or -1 if there is no pixel with an alpha value of 0.
IndexColorModel,getValidPixels(),BigInteger,Returns a BigInteger that indicates the valid/invalid pixels in the colormap.
IndexColorModel,isCompatibleRaster(Raster raster),boolean,Returns true if raster is compatible with this ColorModel or false if it is not compatible with this ColorModel.
IndexColorModel,isCompatibleSampleModel(SampleModel sm),boolean,Checks if the specified SampleModel is compatible with this ColorModel.
IndexColorModel,isValid(),boolean,Returns whether or not all of the pixels are valid.
IndexColorModel,isValid(int pixel),boolean,Returns whether or not the pixel is valid.
IndexColorModel,toString(),String,Returns the String representation of the contents of this ColorModelobject.
Kernel,clone(),Object,Clones this object.
Kernel,getHeight(),int,Returns the height of this Kernel.
Kernel,getKernelData(float[] data),float[],Returns the kernel data in row major order.
Kernel,getWidth(),int,Returns the width of this Kernel.
Kernel,getXOrigin(),int,Returns the X origin of this Kernel.
Kernel,getYOrigin(),int,Returns the Y origin of this Kernel.
LookupOp,"createCompatibleDestImage(BufferedImage src, ColorModel destCM)",BufferedImage,Creates a zeroed destination image with the correct size and number of bands.
LookupOp,createCompatibleDestRaster(Raster src),WritableRaster,"Creates a zeroed-destination Raster with the correct size and number of bands, given this source."
LookupOp,"filter(BufferedImage src, BufferedImage dst)",BufferedImage,Performs a lookup operation on a BufferedImage.
LookupOp,"filter(Raster src, WritableRaster dst)",WritableRaster,Performs a lookup operation on a Raster.
LookupOp,getBounds2D(BufferedImage src),Rectangle2D,Returns the bounding box of the filtered destination image.
LookupOp,getBounds2D(Raster src),Rectangle2D,Returns the bounding box of the filtered destination Raster.
LookupOp,"getPoint2D(Point2D srcPt, Point2D dstPt)",Point2D,Returns the location of the destination point given a point in the source.
LookupOp,getRenderingHints(),RenderingHints,Returns the rendering hints for this op.
LookupOp,getTable(),LookupTable,Returns the LookupTable.
LookupTable,getNumComponents(),int,Returns the number of components in the lookup table.
LookupTable,getOffset(),int,Returns the offset.
LookupTable,"lookupPixel(int[] src, int[] dest)",abstract int[],Returns an int array of components for one pixel.
MemoryImageSource,addConsumer(ImageConsumer ic),void,Adds an ImageConsumer to the list of consumers interested in data for this image.
MemoryImageSource,isConsumer(ImageConsumer ic),boolean,Determines if an ImageConsumer is on the list of consumers currently interested in data for this image.
MemoryImageSource,newPixels(),void,Sends a whole new buffer of pixels to any ImageConsumers that are currently interested in the data for this image and notify them that an animation frame is complete.
MemoryImageSource,"newPixels(byte[] newpix, ColorModel newmodel, int offset, int scansize)",void,Changes to a new byte array to hold the pixels for this image.
MemoryImageSource,"newPixels(int[] newpix, ColorModel newmodel, int offset, int scansize)",void,Changes to a new int array to hold the pixels for this image.
MemoryImageSource,"newPixels(int x, int y, int w, int h)",void,Sends a rectangular region of the buffer of pixels to any ImageConsumers that are currently interested in the data for this image and notify them that an animation frame is complete.
MemoryImageSource,"newPixels(int x, int y, int w, int h, boolean framenotify)",void,Sends a rectangular region of the buffer of pixels to any ImageConsumers that are currently interested in the data for this image.
MemoryImageSource,removeConsumer(ImageConsumer ic),void,Removes an ImageConsumer from the list of consumers interested in data for this image.
MemoryImageSource,requestTopDownLeftRightResend(ImageConsumer ic),void,"Requests that a given ImageConsumer have the image data delivered one more time in top-down, left-right order."
MemoryImageSource,setAnimated(boolean animated),void,Changes this memory image into a multi-frame animation or a single-frame static image depending on the animated parameter.
MemoryImageSource,setFullBufferUpdates(boolean fullbuffers),void,Specifies whether this animated memory image should always be updated by sending the complete buffer of pixels whenever there is a change.
MemoryImageSource,startProduction(ImageConsumer ic),void,Adds an ImageConsumer to the list of consumers interested in data for this image and immediately starts delivery of the image data through the ImageConsumer interface.
MultiPixelPackedSampleModel,"createCompatibleSampleModel(int w, int h)",SampleModel,Creates a new MultiPixelPackedSampleModel with the specified width and height.
MultiPixelPackedSampleModel,createDataBuffer(),DataBuffer,Creates a DataBuffer that corresponds to this MultiPixelPackedSampleModel.
MultiPixelPackedSampleModel,createSubsetSampleModel(int[] bands),SampleModel,Creates a new MultiPixelPackedSampleModel with a subset of the bands of this MultiPixelPackedSampleModel.
MultiPixelPackedSampleModel,equals(Object o),boolean,"Indicates whether some other object is ""equal to"" this one."
MultiPixelPackedSampleModel,getBitOffset(int x),int,"Returns the offset, in bits, into the data element in which it is stored for the xth pixel of a scanline."
MultiPixelPackedSampleModel,getDataBitOffset(),int,Returns the data bit offset in bits.
MultiPixelPackedSampleModel,"getDataElements(int x, int y, Object obj, DataBuffer data)",Object,Returns data for a single pixel in a primitive array of type TransferType.
MultiPixelPackedSampleModel,getNumDataElements(),int,"Returns the number of data elements needed to transfer one pixel via the getDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer) and setDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer) methods."
MultiPixelPackedSampleModel,"getOffset(int x, int y)",int,"Returns the offset of pixel (x, y) in data array elements."
MultiPixelPackedSampleModel,"getPixel(int x, int y, int[] iArray, DataBuffer data)",int[],Returns the specified single band pixel in the first element of an int array.
MultiPixelPackedSampleModel,getPixelBitStride(),int,Returns the pixel bit stride in bits.
MultiPixelPackedSampleModel,"getSample(int x, int y, int b, DataBuffer data)",int,"Returns as int the sample in a specified band for the pixel located at (x, y)."
MultiPixelPackedSampleModel,getSampleSize(),int[],Returns the number of bits per sample for all bands.
MultiPixelPackedSampleModel,getSampleSize(int band),int,Returns the number of bits per sample for the specified band.
MultiPixelPackedSampleModel,getScanlineStride(),int,Returns the scanline stride.
MultiPixelPackedSampleModel,getTransferType(),int,Returns the TransferType used to transfer pixels by way of the getDataElements and setDataElements methods.
MultiPixelPackedSampleModel,hashCode(),int,Returns a hash code value for the object.
MultiPixelPackedSampleModel,"setDataElements(int x, int y, Object obj, DataBuffer data)",void,Sets the data for a single pixel in the specified DataBuffer from a primitive array of type TransferType.
MultiPixelPackedSampleModel,"setPixel(int x, int y, int[] iArray, DataBuffer data)",void,Sets a pixel in the DataBuffer using an int array for input.
MultiPixelPackedSampleModel,"setSample(int x, int y, int b, int s, DataBuffer data)",void,"Sets a sample in the specified band for the pixel located at (x, y) in the DataBuffer using an int for input."
PackedColorModel,"createCompatibleSampleModel(int w, int h)",SampleModel,Creates a SampleModel with the specified width and height that has a data layout compatible with this ColorModel.
PackedColorModel,equals(Object obj),boolean,Tests if the specified Object is an instance of PackedColorModel and equals this PackedColorModel.
PackedColorModel,getAlphaRaster(WritableRaster raster),WritableRaster,"Returns a WritableRaster representing the alpha channel of an image, extracted from the input WritableRaster."
PackedColorModel,getMask(int index),int,Returns the mask indicating which bits in a pixel contain the specified color/alpha sample.
PackedColorModel,getMasks(),int[],Returns a mask array indicating which bits in a pixel contain the color and alpha samples.
PackedColorModel,isCompatibleSampleModel(SampleModel sm),boolean,Checks if the specified SampleModel is compatible with this ColorModel.
PixelGrabber,abortGrabbing(),void,Request the PixelGrabber to abort the image fetch.
PixelGrabber,getColorModel(),ColorModel,Get the ColorModel for the pixels stored in the array.
PixelGrabber,getHeight(),int,Get the height of the pixel buffer (after adjusting for image height).
PixelGrabber,getPixels(),Object,Get the pixel buffer.
PixelGrabber,getStatus(),int,Return the status of the pixels.
PixelGrabber,getWidth(),int,Get the width of the pixel buffer (after adjusting for image width).
PixelGrabber,grabPixels(),boolean,Request the Image or ImageProducer to start delivering pixels and wait for all of the pixels in the rectangle of interest to be delivered.
PixelGrabber,grabPixels(long ms),boolean,Request the Image or ImageProducer to start delivering pixels and wait for all of the pixels in the rectangle of interest to be delivered or until the specified timeout has elapsed.
PixelGrabber,imageComplete(int status),void,The imageComplete method is part of the ImageConsumer API which this class must implement to retrieve the pixels.
PixelGrabber,setColorModel(ColorModel model),void,The setColorModel method is part of the ImageConsumer API which this class must implement to retrieve the pixels.
PixelGrabber,"setDimensions(int width, int height)",void,The setDimensions method is part of the ImageConsumer API which this class must implement to retrieve the pixels.
PixelGrabber,setHints(int hints),void,The setHints method is part of the ImageConsumer API which this class must implement to retrieve the pixels.
PixelGrabber,"setPixels(int srcX, int srcY, int srcW, int srcH, ColorModel model, byte[] pixels, int srcOff, int srcScan)",void,The setPixels method is part of the ImageConsumer API which this class must implement to retrieve the pixels.
PixelGrabber,"setPixels(int srcX, int srcY, int srcW, int srcH, ColorModel model, int[] pixels, int srcOff, int srcScan)",void,The setPixels method is part of the ImageConsumer API which this class must implement to retrieve the pixels.
PixelGrabber,"setProperties(Hashtable<?,?> props)",void,The setProperties method is part of the ImageConsumer API which this class must implement to retrieve the pixels.
PixelGrabber,startGrabbing(),void,Request the PixelGrabber to start fetching the pixels.
PixelGrabber,status(),int,Returns the status of the pixels.
PixelInterleavedSampleModel,"createCompatibleSampleModel(int w, int h)",SampleModel,Creates a new PixelInterleavedSampleModel with the specified width and height.
PixelInterleavedSampleModel,createSubsetSampleModel(int[] bands),SampleModel,Creates a new PixelInterleavedSampleModel with a subset of the bands of this PixelInterleavedSampleModel.
PixelInterleavedSampleModel,hashCode(),int,Returns a hash code value for the object.
Raster,"createBandedRaster(DataBuffer dataBuffer, int w, int h, int scanlineStride, int[] bankIndices, int[] bandOffsets, Point location)",static WritableRaster,"Creates a Raster based on a BandedSampleModel with the specified DataBuffer, width, height, scanline stride, bank indices, and band offsets."
Raster,"createBandedRaster(int dataType, int w, int h, int scanlineStride, int[] bankIndices, int[] bandOffsets, Point location)",static WritableRaster,"Creates a Raster based on a BandedSampleModel with the specified data type, width, height, scanline stride, bank indices and band offsets."
Raster,"createBandedRaster(int dataType, int w, int h, int bands, Point location)",static WritableRaster,"Creates a Raster based on a BandedSampleModel with the specified data type, width, height, and number of bands."
Raster,"createChild(int parentX, int parentY, int width, int height, int childMinX, int childMinY, int[] bandList)",Raster,Returns a new Raster which shares all or part of this Raster's DataBuffer.
Raster,createCompatibleWritableRaster(),WritableRaster,Create a compatible WritableRaster the same size as this Raster with the same SampleModel and a new initialized DataBuffer.
Raster,"createCompatibleWritableRaster(int w, int h)",WritableRaster,"Create a compatible WritableRaster with the specified size, a new SampleModel, and a new initialized DataBuffer."
Raster,"createCompatibleWritableRaster(int x, int y, int w, int h)",WritableRaster,"Create a compatible WritableRaster with the specified location (minX, minY) and size (width, height), a new SampleModel, and a new initialized DataBuffer."
Raster,createCompatibleWritableRaster(Rectangle rect),WritableRaster,"Create a compatible WritableRaster with location (minX, minY) and size (width, height) specified by rect, a new SampleModel, and a new initialized DataBuffer."
Raster,"createInterleavedRaster(DataBuffer dataBuffer, int w, int h, int scanlineStride, int pixelStride, int[] bandOffsets, Point location)",static WritableRaster,"Creates a Raster based on a PixelInterleavedSampleModel with the specified DataBuffer, width, height, scanline stride, pixel stride, and band offsets."
Raster,"createInterleavedRaster(int dataType, int w, int h, int scanlineStride, int pixelStride, int[] bandOffsets, Point location)",static WritableRaster,"Creates a Raster based on a PixelInterleavedSampleModel with the specified data type, width, height, scanline stride, pixel stride, and band offsets."
Raster,"createInterleavedRaster(int dataType, int w, int h, int bands, Point location)",static WritableRaster,"Creates a Raster based on a PixelInterleavedSampleModel with the specified data type, width, height, and number of bands."
Raster,"createPackedRaster(DataBuffer dataBuffer, int w, int h, int scanlineStride, int[] bandMasks, Point location)",static WritableRaster,"Creates a Raster based on a SinglePixelPackedSampleModel with the specified DataBuffer, width, height, scanline stride, and band masks."
Raster,"createPackedRaster(DataBuffer dataBuffer, int w, int h, int bitsPerPixel, Point location)",static WritableRaster,"Creates a Raster based on a MultiPixelPackedSampleModel with the specified DataBuffer, width, height, and bits per pixel."
Raster,"createPackedRaster(int dataType, int w, int h, int[] bandMasks, Point location)",static WritableRaster,"Creates a Raster based on a SinglePixelPackedSampleModel with the specified data type, width, height, and band masks."
Raster,"createPackedRaster(int dataType, int w, int h, int bands, int bitsPerBand, Point location)",static WritableRaster,"Creates a Raster based on a packed SampleModel with the specified data type, width, height, number of bands, and bits per band."
Raster,"createRaster(SampleModel sm, DataBuffer db, Point location)",static Raster,Creates a Raster with the specified SampleModel and DataBuffer.
Raster,"createTranslatedChild(int childMinX, int childMinY)",Raster,"Create a Raster with the same size, SampleModel and DataBuffer as this one, but with a different location."
Raster,"createWritableRaster(SampleModel sm, DataBuffer db, Point location)",static WritableRaster,Creates a WritableRaster with the specified SampleModel and DataBuffer.
Raster,"createWritableRaster(SampleModel sm, Point location)",static WritableRaster,Creates a WritableRaster with the specified SampleModel.
Raster,getBounds(),Rectangle,Returns the bounding Rectangle of this Raster.
Raster,getDataBuffer(),DataBuffer,Returns the DataBuffer associated with this Raster.
Raster,"getDataElements(int x, int y, int w, int h, Object outData)",Object,Returns the pixel data for the specified rectangle of pixels in a primitive array of type TransferType.
Raster,"getDataElements(int x, int y, Object outData)",Object,Returns data for a single pixel in a primitive array of type TransferType.
Raster,getHeight(),int,Returns the height in pixels of the Raster.
Raster,getMinX(),int,Returns the minimum valid X coordinate of the Raster.
Raster,getMinY(),int,Returns the minimum valid Y coordinate of the Raster.
Raster,getNumBands(),int,Returns the number of bands (samples per pixel) in this Raster.
Raster,getNumDataElements(),int,Returns the number of data elements needed to transfer one pixel via the getDataElements and setDataElements methods.
Raster,getParent(),Raster,Returns the parent Raster (if any) of this Raster or null.
Raster,"getPixel(int x, int y, double[] dArray)",double[],Returns the samples in an array of double for the specified pixel.
Raster,"getPixel(int x, int y, float[] fArray)",float[],Returns the samples in an array of float for the specified pixel.
Raster,"getPixel(int x, int y, int[] iArray)",int[],Returns the samples in an array of int for the specified pixel.
Raster,"getPixels(int x, int y, int w, int h, double[] dArray)",double[],"Returns a double array containing all samples for a rectangle of pixels, one sample per array element."
Raster,"getPixels(int x, int y, int w, int h, float[] fArray)",float[],"Returns a float array containing all samples for a rectangle of pixels, one sample per array element."
Raster,"getPixels(int x, int y, int w, int h, int[] iArray)",int[],"Returns an int array containing all samples for a rectangle of pixels, one sample per array element."
Raster,"getSample(int x, int y, int b)",int,"Returns the sample in a specified band for the pixel located at (x,y) as an int."
Raster,"getSampleDouble(int x, int y, int b)",double,"Returns the sample in a specified band for a pixel located at (x,y) as a double."
Raster,"getSampleFloat(int x, int y, int b)",float,"Returns the sample in a specified band for the pixel located at (x,y) as a float."
Raster,getSampleModel(),SampleModel,Returns the SampleModel that describes the layout of the image data.
Raster,getSampleModelTranslateX(),int,Returns the X translation from the coordinate system of the SampleModel to that of the Raster.
Raster,getSampleModelTranslateY(),int,Returns the Y translation from the coordinate system of the SampleModel to that of the Raster.
Raster,"getSamples(int x, int y, int w, int h, int b, double[] dArray)",double[],"Returns the samples for a specified band for a specified rectangle of pixels in a double array, one sample per array element."
Raster,"getSamples(int x, int y, int w, int h, int b, float[] fArray)",float[],"Returns the samples for a specified band for the specified rectangle of pixels in a float array, one sample per array element."
Raster,"getSamples(int x, int y, int w, int h, int b, int[] iArray)",int[],"Returns the samples for a specified band for the specified rectangle of pixels in an int array, one sample per array element."
Raster,getTransferType(),int,Returns the TransferType used to transfer pixels via the getDataElements and setDataElements methods.
Raster,getWidth(),int,Returns the width in pixels of the Raster.
ReplicateScaleFilter,"setDimensions(int w, int h)",void,Override the dimensions of the source image and pass the dimensions of the new scaled size to the ImageConsumer.
ReplicateScaleFilter,"setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize)",void,"Choose which rows and columns of the delivered byte pixels are needed for the destination scaled image and pass through just those rows and columns that are needed, replicated as necessary."
ReplicateScaleFilter,"setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize)",void,"Choose which rows and columns of the delivered int pixels are needed for the destination scaled image and pass through just those rows and columns that are needed, replicated as necessary."
ReplicateScaleFilter,"setProperties(Hashtable<?,?> props)",void,Passes along the properties from the source object after adding a property indicating the scale applied.
RescaleOp,"createCompatibleDestImage(BufferedImage src, ColorModel destCM)",BufferedImage,Creates a zeroed destination image with the correct size and number of bands.
RescaleOp,createCompatibleDestRaster(Raster src),WritableRaster,"Creates a zeroed-destination Raster with the correct size and number of bands, given this source."
RescaleOp,"filter(BufferedImage src, BufferedImage dst)",BufferedImage,Rescales the source BufferedImage.
RescaleOp,"filter(Raster src, WritableRaster dst)",WritableRaster,Rescales the pixel data in the source Raster.
RescaleOp,getBounds2D(BufferedImage src),Rectangle2D,Returns the bounding box of the rescaled destination image.
RescaleOp,getBounds2D(Raster src),Rectangle2D,Returns the bounding box of the rescaled destination Raster.
RescaleOp,getNumFactors(),int,Returns the number of scaling factors and offsets used in this RescaleOp.
RescaleOp,getOffsets(float[] offsets),float[],Returns the offsets in the given array.
RescaleOp,"getPoint2D(Point2D srcPt, Point2D dstPt)",Point2D,Returns the location of the destination point given a point in the source.
RescaleOp,getRenderingHints(),RenderingHints,Returns the rendering hints for this op.
RescaleOp,getScaleFactors(float[] scaleFactors),float[],Returns the scale factors in the given array.
RGBImageFilter,filterIndexColorModel(IndexColorModel icm),IndexColorModel,Filters an IndexColorModel object by running each entry in its color tables through the filterRGB function that RGBImageFilter subclasses must provide.
RGBImageFilter,"filterRGB(int x, int y, int rgb)",abstract int,Subclasses must specify a method to convert a single input pixel in the default RGB ColorModel to a single output pixel.
RGBImageFilter,"filterRGBPixels(int x, int y, int w, int h, int[] pixels, int off, int scansize)",void,Filters a buffer of pixels in the default RGB ColorModel by passing them one by one through the filterRGB method.
RGBImageFilter,setColorModel(ColorModel model),void,"If the ColorModel is an IndexColorModel and the subclass has set the canFilterIndexColorModel flag to true, we substitute a filtered version of the color model here and wherever that original ColorModel object appears in the setPixels methods."
RGBImageFilter,"setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize)",void,"If the ColorModel object is the same one that has already been converted, then simply passes the pixels through with the converted ColorModel."
RGBImageFilter,"setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize)",void,"If the ColorModel object is the same one that has already been converted, then simply passes the pixels through with the converted ColorModel, otherwise converts the buffer of integer pixels to the default RGB ColorModel and passes the converted buffer to the filterRGBPixels method to be converted one by one."
RGBImageFilter,"substituteColorModel(ColorModel oldcm, ColorModel newcm)",void,Registers two ColorModel objects for substitution.
SampleModel,"createCompatibleSampleModel(int w, int h)",abstract SampleModel,"Creates a SampleModel which describes data in this SampleModel's format, but with a different width and height."
SampleModel,createDataBuffer(),abstract DataBuffer,Creates a DataBuffer that corresponds to this SampleModel.
SampleModel,createSubsetSampleModel(int[] bands),abstract SampleModel,Creates a new SampleModel with a subset of the bands of this SampleModel.
SampleModel,"getDataElements(int x, int y, int w, int h, Object obj, DataBuffer data)",Object,Returns the pixel data for the specified rectangle of pixels in a primitive array of type TransferType.
SampleModel,"getDataElements(int x, int y, Object obj, DataBuffer data)",abstract Object,Returns data for a single pixel in a primitive array of type TransferType.
SampleModel,getDataType(),int,Returns the data type of the DataBuffer storing the pixel data.
SampleModel,getHeight(),int,Returns the height in pixels.
SampleModel,getNumBands(),int,Returns the total number of bands of image data.
SampleModel,getNumDataElements(),abstract int,Returns the number of data elements needed to transfer a pixel via the getDataElements and setDataElements methods.
SampleModel,"getPixel(int x, int y, double[] dArray, DataBuffer data)",double[],Returns the samples for the specified pixel in an array of double.
SampleModel,"getPixel(int x, int y, float[] fArray, DataBuffer data)",float[],Returns the samples for the specified pixel in an array of float.
SampleModel,"getPixel(int x, int y, int[] iArray, DataBuffer data)",int[],"Returns the samples for a specified pixel in an int array, one sample per array element."
SampleModel,"getPixels(int x, int y, int w, int h, double[] dArray, DataBuffer data)",double[],"Returns all samples for a rectangle of pixels in a double array, one sample per array element."
SampleModel,"getPixels(int x, int y, int w, int h, float[] fArray, DataBuffer data)",float[],"Returns all samples for a rectangle of pixels in a float array, one sample per array element."
SampleModel,"getPixels(int x, int y, int w, int h, int[] iArray, DataBuffer data)",int[],"Returns all samples for a rectangle of pixels in an int array, one sample per array element."
SampleModel,"getSample(int x, int y, int b, DataBuffer data)",abstract int,"Returns the sample in a specified band for the pixel located at (x,y) as an int."
SampleModel,"getSampleDouble(int x, int y, int b, DataBuffer data)",double,"Returns the sample in a specified band for a pixel located at (x,y) as a double."
SampleModel,"getSampleFloat(int x, int y, int b, DataBuffer data)",float,"Returns the sample in a specified band for the pixel located at (x,y) as a float."
SampleModel,"getSamples(int x, int y, int w, int h, int b, double[] dArray, DataBuffer data)",double[],"Returns the samples for a specified band for a specified rectangle of pixels in a double array, one sample per array element."
SampleModel,"getSamples(int x, int y, int w, int h, int b, float[] fArray, DataBuffer data)",float[],"Returns the samples for a specified band for the specified rectangle of pixels in a float array, one sample per array element."
SampleModel,"getSamples(int x, int y, int w, int h, int b, int[] iArray, DataBuffer data)",int[],"Returns the samples for a specified band for the specified rectangle of pixels in an int array, one sample per array element."
SampleModel,getSampleSize(),abstract int[],Returns the size in bits of samples for all bands.
SampleModel,getSampleSize(int band),abstract int,Returns the size in bits of samples for the specified band.
SampleModel,getTransferType(),int,Returns the TransferType used to transfer pixels via the getDataElements and setDataElements methods.
SampleModel,getWidth(),int,Returns the width in pixels.
SampleModel,"setDataElements(int x, int y, int w, int h, Object obj, DataBuffer data)",void,Sets the data for a rectangle of pixels in the specified DataBuffer from a primitive array of type TransferType.
SampleModel,"setDataElements(int x, int y, Object obj, DataBuffer data)",abstract void,Sets the data for a single pixel in the specified DataBuffer from a primitive array of type TransferType.
SampleModel,"setPixel(int x, int y, double[] dArray, DataBuffer data)",void,Sets a pixel in the DataBuffer using a double array of samples for input.
SampleModel,"setPixel(int x, int y, float[] fArray, DataBuffer data)",void,Sets a pixel in the DataBuffer using a float array of samples for input.
SampleModel,"setPixel(int x, int y, int[] iArray, DataBuffer data)",void,Sets a pixel in the DataBuffer using an int array of samples for input.
SampleModel,"setPixels(int x, int y, int w, int h, double[] dArray, DataBuffer data)",void,Sets all samples for a rectangle of pixels from a double array containing one sample per array element.
SampleModel,"setPixels(int x, int y, int w, int h, float[] fArray, DataBuffer data)",void,Sets all samples for a rectangle of pixels from a float array containing one sample per array element.
SampleModel,"setPixels(int x, int y, int w, int h, int[] iArray, DataBuffer data)",void,Sets all samples for a rectangle of pixels from an int array containing one sample per array element.
SampleModel,"setSample(int x, int y, int b, double s, DataBuffer data)",void,"Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a double for input."
SampleModel,"setSample(int x, int y, int b, float s, DataBuffer data)",void,"Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a float for input."
SampleModel,"setSample(int x, int y, int b, int s, DataBuffer data)",abstract void,"Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using an int for input."
SampleModel,"setSamples(int x, int y, int w, int h, int b, double[] dArray, DataBuffer data)",void,Sets the samples in the specified band for the specified rectangle of pixels from a double array containing one sample per array element.
SampleModel,"setSamples(int x, int y, int w, int h, int b, float[] fArray, DataBuffer data)",void,Sets the samples in the specified band for the specified rectangle of pixels from a float array containing one sample per array element.
SampleModel,"setSamples(int x, int y, int w, int h, int b, int[] iArray, DataBuffer data)",void,Sets the samples in the specified band for the specified rectangle of pixels from an int array containing one sample per array element.
ShortLookupTable,getTable(),short[][],Returns the lookup table data by reference.
ShortLookupTable,"lookupPixel(int[] src, int[] dst)",int[],"Returns an array of samples of a pixel, translated with the lookup table."
ShortLookupTable,"lookupPixel(short[] src, short[] dst)",short[],"Returns an array of samples of a pixel, translated with the lookup table."
SinglePixelPackedSampleModel,"createCompatibleSampleModel(int w, int h)",SampleModel,Creates a new SinglePixelPackedSampleModel with the specified width and height.
SinglePixelPackedSampleModel,createDataBuffer(),DataBuffer,Creates a DataBuffer that corresponds to this SinglePixelPackedSampleModel.
SinglePixelPackedSampleModel,createSubsetSampleModel(int[] bands),SampleModel,This creates a new SinglePixelPackedSampleModel with a subset of the bands of this SinglePixelPackedSampleModel.
SinglePixelPackedSampleModel,equals(Object o),boolean,"Indicates whether some other object is ""equal to"" this one."
SinglePixelPackedSampleModel,getBitMasks(),int[],Returns the bit masks for all bands.
SinglePixelPackedSampleModel,getBitOffsets(),int[],Returns the bit offsets into the data array element representing a pixel for all bands.
SinglePixelPackedSampleModel,"getDataElements(int x, int y, Object obj, DataBuffer data)",Object,Returns data for a single pixel in a primitive array of type TransferType.
SinglePixelPackedSampleModel,getNumDataElements(),int,Returns the number of data elements needed to transfer one pixel via the getDataElements and setDataElements methods.
SinglePixelPackedSampleModel,"getOffset(int x, int y)",int,"Returns the offset (in data array elements) of pixel (x,y)."
SinglePixelPackedSampleModel,"getPixel(int x, int y, int[] iArray, DataBuffer data)",int[],Returns all samples in for the specified pixel in an int array.
SinglePixelPackedSampleModel,"getPixels(int x, int y, int w, int h, int[] iArray, DataBuffer data)",int[],"Returns all samples for the specified rectangle of pixels in an int array, one sample per array element."
SinglePixelPackedSampleModel,"getSample(int x, int y, int b, DataBuffer data)",int,"Returns as int the sample in a specified band for the pixel located at (x,y)."
SinglePixelPackedSampleModel,"getSamples(int x, int y, int w, int h, int b, int[] iArray, DataBuffer data)",int[],"Returns the samples for a specified band for the specified rectangle of pixels in an int array, one sample per array element."
SinglePixelPackedSampleModel,getSampleSize(),int[],Returns the number of bits per sample for all bands.
SinglePixelPackedSampleModel,getSampleSize(int band),int,Returns the number of bits per sample for the specified band.
SinglePixelPackedSampleModel,getScanlineStride(),int,Returns the scanline stride of this SinglePixelPackedSampleModel.
SinglePixelPackedSampleModel,hashCode(),int,Returns a hash code value for the object.
SinglePixelPackedSampleModel,"setDataElements(int x, int y, Object obj, DataBuffer data)",void,Sets the data for a single pixel in the specified DataBuffer from a primitive array of type TransferType.
SinglePixelPackedSampleModel,"setPixel(int x, int y, int[] iArray, DataBuffer data)",void,Sets a pixel in the DataBuffer using an int array of samples for input.
SinglePixelPackedSampleModel,"setPixels(int x, int y, int w, int h, int[] iArray, DataBuffer data)",void,Sets all samples for a rectangle of pixels from an int array containing one sample per array element.
SinglePixelPackedSampleModel,"setSample(int x, int y, int b, int s, DataBuffer data)",void,"Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using an int for input."
SinglePixelPackedSampleModel,"setSamples(int x, int y, int w, int h, int b, int[] iArray, DataBuffer data)",void,Sets the samples in the specified band for the specified rectangle of pixels from an int array containing one sample per array element.
VolatileImage,contentsLost(),abstract boolean,Returns true if rendering data was lost since last validate call.
VolatileImage,createGraphics(),abstract Graphics2D,"Creates a Graphics2D, which can be used to draw into this VolatileImage."
VolatileImage,getCapabilities(),abstract ImageCapabilities,Returns an ImageCapabilities object which can be inquired as to the specific capabilities of this VolatileImage.
VolatileImage,getGraphics(),Graphics,"This method returns a Graphics2D, but is here for backwards compatibility."
VolatileImage,getHeight(),abstract int,Returns the height of the VolatileImage.
VolatileImage,getSnapshot(),abstract BufferedImage,Returns a static snapshot image of this object.
VolatileImage,getSource(),ImageProducer,This returns an ImageProducer for this VolatileImage.
VolatileImage,getTransparency(),int,Returns the transparency.
VolatileImage,getWidth(),abstract int,Returns the width of the VolatileImage.
VolatileImage,validate(GraphicsConfiguration gc),abstract int,Attempts to restore the drawing surface of the image if the surface had been lost since the last validate call.
WritableRaster,"createWritableChild(int parentX, int parentY, int w, int h, int childMinX, int childMinY, int[] bandList)",WritableRaster,Returns a new WritableRaster which shares all or part of this WritableRaster's DataBuffer.
WritableRaster,"createWritableTranslatedChild(int childMinX, int childMinY)",WritableRaster,"Create a WritableRaster with the same size, SampleModel and DataBuffer as this one, but with a different location."
WritableRaster,getWritableParent(),WritableRaster,"Returns the parent WritableRaster (if any) of this WritableRaster, or else null."
WritableRaster,"setDataElements(int x, int y, int w, int h, Object inData)",void,Sets the data for a rectangle of pixels from a primitive array of type TransferType.
WritableRaster,"setDataElements(int x, int y, Object inData)",void,Sets the data for a single pixel from a primitive array of type TransferType.
WritableRaster,"setDataElements(int x, int y, Raster inRaster)",void,Sets the data for a rectangle of pixels from an input Raster.
WritableRaster,"setPixel(int x, int y, double[] dArray)",void,Sets a pixel in the DataBuffer using a double array of samples for input.
WritableRaster,"setPixel(int x, int y, float[] fArray)",void,Sets a pixel in the DataBuffer using a float array of samples for input.
WritableRaster,"setPixel(int x, int y, int[] iArray)",void,Sets a pixel in the DataBuffer using an int array of samples for input.
WritableRaster,"setPixels(int x, int y, int w, int h, double[] dArray)",void,Sets all samples for a rectangle of pixels from a double array containing one sample per array element.
WritableRaster,"setPixels(int x, int y, int w, int h, float[] fArray)",void,Sets all samples for a rectangle of pixels from a float array containing one sample per array element.
WritableRaster,"setPixels(int x, int y, int w, int h, int[] iArray)",void,Sets all samples for a rectangle of pixels from an int array containing one sample per array element.
WritableRaster,"setRect(int dx, int dy, Raster srcRaster)",void,Copies pixels from Raster srcRaster to this WritableRaster.
WritableRaster,setRect(Raster srcRaster),void,Copies pixels from Raster srcRaster to this WritableRaster.
WritableRaster,"setSample(int x, int y, int b, double s)",void,"Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a double for input."
WritableRaster,"setSample(int x, int y, int b, float s)",void,"Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a float for input."
WritableRaster,"setSample(int x, int y, int b, int s)",void,"Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using an int for input."
WritableRaster,"setSamples(int x, int y, int w, int h, int b, double[] dArray)",void,Sets the samples in the specified band for the specified rectangle of pixels from a double array containing one sample per array element.
WritableRaster,"setSamples(int x, int y, int w, int h, int b, float[] fArray)",void,Sets the samples in the specified band for the specified rectangle of pixels from a float array containing one sample per array element.
WritableRaster,"setSamples(int x, int y, int w, int h, int b, int[] iArray)",void,Sets the samples in the specified band for the specified rectangle of pixels from an int array containing one sample per array element.
