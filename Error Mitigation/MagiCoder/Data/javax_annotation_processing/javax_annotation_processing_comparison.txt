Sample: 0 AbstractProcessor
----------------------------------------------------------------

@@ Context
Here is the description of the package Facilities for declaring annotation processors and for allowing annotation processors to communicate with an annotation processing tool environment.
Here is the description of the class An abstract annotation processor designed to be a convenient superclass for most concrete annotation processors.

@@ Instruction
I want to use javax.annotation.processing.AbstractProcessor package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)`: This method is used to process the annotations. It takes a set of annotation types and a round environment as parameters and returns a boolean value.

2. `Set<String> getSupportedAnnotationTypes()`: This method returns a set of strings that represent the annotation types that this processor supports.

3. `SourceVersion getSupportedSourceVersion()`: This method returns the source version that this processor supports.

4. `boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)`: This method is used to process the annotations. It takes a set of annotation types and a round environment as parameters and returns a boolean value.

5. `Set<String> getSupportedAnnotationTypes()`: This method returns a set of strings that represent the annotation types that this processor supports.

6. `SourceVersion getSupportedSourceVersion()`: This method returns the source version that this processor supports.

7. `boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)`: This method is used to process the annotations. It takes a set of annotation types and a round environment as parameters and returns a boolean value.

8. `Set<String> getSupportedAnnotationTypes()`: This method returns a set of strings that represent the annotation types that this processor supports.

9. `SourceVersion getSupportedSourceVersion()`: This method returns the source version that this processor supports.

10. `boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)`: This method is used to process the annotations. It takes a set of annotation types and a round environment as parameters and returns a boolean value.
================================================================

Sample: 1 Completions
----------------------------------------------------------------

@@ Context
Here is the description of the package Facilities for declaring annotation processors and for allowing annotation processors to communicate with an annotation processing tool environment.
Here is the description of the class Utility class for assembling Completion objects.

@@ Instruction
I want to use javax.annotation.processing.Completions package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean add(E e)`: This method appends the specified element to the end of this list.
2. `void add(int index, E element)`: This method inserts the specified element at the specified position in this list.
3. `boolean addAll(Collection<? extends E> c)`: This method appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator.
4. `boolean addAll(int index, Collection<? extends E> c)`: This method inserts all of the elements in the specified collection into this list, starting at the specified position.
5. `void clear()`: This method removes all of the elements from this list.
================================================================

