Sample: 0 CallSite
----------------------------------------------------------------

@@ Context
Here is the description of the package The java.lang.invoke package contains dynamic language support provided directly by the Java core class libraries and virtual machine.
Here is the description of the class A CallSite is a holder for a variable MethodHandle, which is called its target.

@@ Instruction
I want to use java.lang.invoke.CallSite package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `CallSite call(Object... args)`: This method is used to call the target method of the CallSite with the given arguments.

2. `MethodType type()`: This method returns the MethodType of the target method of the CallSite.

3. `MethodHandle methodHandle()`: This method returns the MethodHandle of the target method of the CallSite.

4. `MethodType dynamicType()`: This method returns the dynamic type of the target method of the CallSite.

5. `MethodHandle dynamicInvoker()`: This method returns the dynamic invoker of the target method of the CallSite.
================================================================

Sample: 1 ConstantCallSite
----------------------------------------------------------------

@@ Context
Here is the description of the package The java.lang.invoke package contains dynamic language support provided directly by the Java core class libraries and virtual machine.
Here is the description of the class A ConstantCallSite is a CallSite whose target is permanent, and can never be changed.

@@ Instruction
I want to use java.lang.invoke.ConstantCallSite package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `ConstantCallSite(MethodType type, MethodHandle target)`: This constructor creates a new ConstantCallSite with the specified MethodType and MethodHandle.

2. `MethodType getMethodType()`: This method returns the MethodType of this ConstantCallSite.

3. `MethodHandle getTarget()`: This method returns the MethodHandle of this ConstantCallSite.

4. `CallSite lambdaMetafactory(MethodHandles.Lookup caller, String implMethodName, MethodType implMethodType, MethodType invokerMethodType, MethodHandle invoker)`: This method creates a new CallSite that represents a lambda expression.

5. `CallSite spoofaxMetafactory(MethodHandles.Lookup caller, String implMethodName, MethodType implMethodType, MethodType invokerMethodType, MethodHandle invoker)`: This method creates a new CallSite that represents a spoofax expression.
================================================================

Sample: 2 LambdaMetafactory
----------------------------------------------------------------

@@ Context
Here is the description of the package The java.lang.invoke package contains dynamic language support provided directly by the Java core class libraries and virtual machine.
Here is the description of the class Methods to facilitate the creation of simple "function objects" that implement one or more interfaces by delegation to a provided MethodHandle, possibly after type adaptation and partial evaluation of arguments.

@@ Instruction
I want to use java.lang.invoke.LambdaMetafactory package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `MethodType getMethodType()`: This method returns the MethodType of the method represented by this MethodHandle.

2. `MethodHandle resolve()`: This method resolves this MethodHandle.

3. `MethodHandle unreflect(Method method)`: This method returns a MethodHandle for the specified method.

4. `MethodHandle unreflectSpecial(MethodType type, MethodHandle var0, MethodHandle var1, MethodHandle var2)`: This method returns a MethodHandle for the specified method.

5. `MethodHandle lambdaMetafactory(MethodType type, MethodHandle callSite, MethodType callerType)`: This method returns a MethodHandle for the specified method.
================================================================

Sample: 3 MethodHandle
----------------------------------------------------------------

@@ Context
Here is the description of the package The java.lang.invoke package contains dynamic language support provided directly by the Java core class libraries and virtual machine.
Here is the description of the class A method handle is a typed, directly executable reference to an underlying method, constructor, field, or similar low-level operation, with optional transformations of arguments or return values.

@@ Instruction
I want to use java.lang.invoke.MethodHandle package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `MethodHandle lookup()`: This method returns a MethodHandle that can be used to invoke the method represented by this MethodHandle.

2. `MethodHandle lookup(MethodType type)`: This method returns a MethodHandle that can be used to invoke the method represented by this MethodHandle.

3. `MethodHandle lookup(MethodType type, MethodHandles.Lookup lookup)`: This method returns a MethodHandle that can be used to invoke the method represented by this MethodHandle.

4. `MethodHandle lookup(MethodType type, MethodHandles.Lookup lookup, MethodHandle filter)`: This method returns a MethodHandle that can be used to invoke the method represented by this MethodHandle.

5. `MethodHandle lookup(MethodType type, MethodHandles.Lookup lookup, MethodHandle filter, int flags)`: This method returns a MethodHandle that can be used to invoke the method represented by this MethodHandle.
================================================================

Sample: 4 MethodHandleProxies
----------------------------------------------------------------

@@ Context
Here is the description of the package The java.lang.invoke package contains dynamic language support provided directly by the Java core class libraries and virtual machine.
Here is the description of the class This class consists exclusively of static methods that help adapt method handles to other JVM types, such as interfaces.

@@ Instruction
I want to use java.lang.invoke.MethodHandleProxies package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `static MethodHandle lookup()`: This method returns a MethodHandle for the specified method.
2. `static MethodHandle lookupGetter(Class<?> type, String name)`: This method returns a MethodHandle for the specified getter method.
3. `static MethodHandle lookupSetter(Class<?> type, String name)`: This method returns a MethodHandle for the specified setter method.
4. `static MethodHandle lookupConstructor(Class<?> type, Class<?>... parameterTypes)`: This method returns a MethodHandle for the specified constructor.
5. `static MethodHandle lookupStatic(Class<?> type, String name)`: This method returns a MethodHandle for the specified static method.
6. `static MethodHandle lookupVirtual(Class<?> type, String name, MethodType methodType)`: This method returns a MethodHandle for the specified virtual method.
7. `static MethodHandle lookupSpecial(Class<?> type, String name, MethodType methodType)`: This method returns a MethodHandle for the specified special method.
8. `static MethodHandle lookupStatic(Class<?> type, String name, MethodType methodType)`: This method returns a MethodHandle for the specified static method.
9. `static MethodHandle lookupVirtual(Class<?> type, String name, MethodType methodType)`: This method returns a MethodHandle for the specified virtual method.
10. `static MethodHandle lookupSpecial(Class<?> type, String name, MethodType methodType)`: This method returns a MethodHandle for the specified special method.
================================================================

Sample: 5 MethodHandles
----------------------------------------------------------------

@@ Context
Here is the description of the package The java.lang.invoke package contains dynamic language support provided directly by the Java core class libraries and virtual machine.
Here is the description of the class This class consists exclusively of static methods that operate on or return method handles.

@@ Instruction
I want to use java.lang.invoke.MethodHandles package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public static MethodType lookup()`: This method returns a MethodType object that represents the method type of the method handle.

2. `public static MethodHandle unreflect(Method method)`: This method returns a MethodHandle object that represents the method handle of the specified method.

3. `public static MethodHandle unreflectGetter(Field field)`: This method returns a MethodHandle object that represents the getter method handle of the specified field.

4. `public static MethodHandle unreflectSetter(Field field)`: This method returns a MethodHandle object that represents the setter method handle of the specified field.

5. `public static MethodHandle privateLookupIn(Class<?> clazz, MethodHandles.Lookup lookup)`: This method returns a MethodHandle object that represents the method handle of the specified method in the specified class using the specified lookup object.
================================================================

Sample: 6 MethodHandles.Lookup
----------------------------------------------------------------

@@ Context
Here is the description of the package The java.lang.invoke package contains dynamic language support provided directly by the Java core class libraries and virtual machine.
Here is the description of the class A lookup object is a factory for creating method handles, when the creation requires access checking.

@@ Instruction
I want to use java.lang.invoke.MethodHandles.Lookup package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public static MethodHandles.Lookup publicLookup()`: This method returns a lookup object that can be used to create method handles for public methods.

2. `public static MethodHandles.Lookup privateLookupIn(Class<?> clazz, MethodHandles.Lookup lookup)`: This method returns a lookup object that can be used to create method handles for private methods in the specified class.

3. `public static MethodHandles.Lookup lookup()`: This method returns a lookup object that can be used to create method handles for public methods in the caller's class loader.

4. `public static MethodHandles.Lookup lookupIn(Class<?> clazz)`: This method returns a lookup object that can be used to create method handles for public methods in the specified class.

5. `public static MethodHandles.Lookup lookupIn(Class<?> clazz, MethodHandles.Lookup lookup)`: This method returns a lookup object that can be used to create method handles for public methods in the specified class.
================================================================

Sample: 7 MethodType
----------------------------------------------------------------

@@ Context
Here is the description of the package The java.lang.invoke package contains dynamic language support provided directly by the Java core class libraries and virtual machine.
Here is the description of the class A method type represents the arguments and return type accepted and returned by a method handle, or the arguments and return type passed and expected by a method handle caller.

@@ Instruction
I want to use java.lang.invoke.MethodType package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `MethodType.methodType(returnType, parameterTypes...)`: This method creates a new MethodType instance representing a method with the specified return type and parameter types.

2. `MethodType.methodType(returnType, varargType)`: This method creates a new MethodType instance representing a method with the specified return type and a varargs parameter type.

3. `MethodType.methodType(returnType)`: This method creates a new MethodType instance representing a method with the specified return type and no parameters.

4. `MethodType.methodType(void)`: This method creates a new MethodType instance representing a method with no return type and no parameters.

5. `MethodType.methodType(void, parameterTypes...)`: This method creates a new MethodType instance representing a method with no return type and the specified parameter types.
================================================================

Sample: 8 MutableCallSite
----------------------------------------------------------------

@@ Context
Here is the description of the package The java.lang.invoke package contains dynamic language support provided directly by the Java core class libraries and virtual machine.
Here is the description of the class A MutableCallSite is a CallSite whose target variable behaves like an ordinary field.

@@ Instruction
I want to use java.lang.invoke.MutableCallSite package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `MutableCallSite()`: This is the constructor of the MutableCallSite class.

2. `void setTarget(MethodType targetType)`: This method sets the target type of the CallSite.

3. `void setTarget(MethodHandle target)`: This method sets the target of the CallSite.

4. `void setTarget(MethodHandle target, MethodType targetType)`: This method sets the target of the CallSite and its type.

5. `MethodHandle getTarget()`: This method returns the target of the CallSite.
================================================================

Sample: 9 SerializedLambda
----------------------------------------------------------------

@@ Context
Here is the description of the package The java.lang.invoke package contains dynamic language support provided directly by the Java core class libraries and virtual machine.
Here is the description of the class Serialized form of a lambda expression.

@@ Instruction
I want to use java.lang.invoke.SerializedLambda package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `getThis()`: `Object getThis()`: This method returns the `this` reference of the instance that the lambda expression represents.

2. `getSuper()`: `Object getSuper()`: This method returns the `super` reference of the instance that the lambda expression represents.

3. `getFunctionalInterface()`: `Class<?> getFunctionalInterface()`: This method returns the functional interface that the lambda expression represents.

4. `getNumOfParameters()`: `int getNumOfParameters()`: This method returns the number of parameters in the lambda expression.

5. `getNumOfCapturedLocals()`: `int getNumOfCapturedLocals()`: This method returns the number of captured locals in the lambda expression.

6. `getCapturedLocals()`: `Object[] getCapturedLocals()`: This method returns the captured locals in the lambda expression.

7. `getFunctionalInterfaceMethod()`: `Method getFunctionalInterfaceMethod()`: This method returns the method of the functional interface that the lambda expression represents.

8. `getInstructionSlots()`: `int getInstructionSlots()`: This method returns the number of instruction slots in the lambda expression.

9. `getInstruction()`: `int[] getInstruction()`: This method returns the instruction slots in the lambda expression.

10. `getCapturedArgsSize()`: `int getCapturedArgsSize()`: This method returns the size of the captured arguments in the lambda expression.

11. `getCapturedArgs()`: `Object[] getCapturedArgs()`: This method returns the captured arguments in the lambda expression.

12. `getCapturedArgsTable()`: `Object getCapturedArgsTable()`: This method returns the captured arguments table in the lambda expression.

13. `getCapturedArgsTableSize()`: `int getCapturedArgsTableSize()`: This method returns the size of the captured arguments table in the lambda expression.

14. `getCapturedArgsTableEntry()`: `Object getCapturedArgsTableEntry(int index)`: This method returns the entry in the captured arguments table at the specified index.

15. `getCapturedArgsTableEntrySize()`: `int getCapturedArgsTableEntrySize(int index)`: This method returns the size of the entry in the captured arguments table at the specified index.

16. `getCapturedArgsTableEntryValue()`: `Object getCapturedArgsTableEntryValue(int index, int valueIndex)`: This method returns the value in the entry in the captured arguments table at the specified index and value index.

17. `getCapturedArgsTableEntryValueSize()`: `int getCapturedArgsTableEntryValueSize(int index, int valueIndex)`: This method returns the size of the value in the entry in the captured arguments table at the specified index and value index.

18. `getCapturedArgsTableEntryValueData()`: `byte[] getCapturedArgsTableEntryValueData(int index, int valueIndex)`: This method returns the data in the value in the entry in the captured arguments table at the specified index and value index.

19. `getCapturedArgsTableEntryValueDataSize()`: `int getCapturedArgsTableEntryValueDataSize(int index, int valueIndex)`: This method returns the size of the data in the value in the entry in the captured arguments table at the specified index and value index.

20. `getCapturedArgsTableEntryValueDataOffset()`: `int getCapturedArgsTableEntryValueDataOffset(int index, int valueIndex)`: This method returns the offset in the data in the value in the entry in the captured arguments table at the specified index and value index.
================================================================

Sample: 10 SwitchPoint
----------------------------------------------------------------

@@ Context
Here is the description of the package The java.lang.invoke package contains dynamic language support provided directly by the Java core class libraries and virtual machine.
Here is the description of the class A SwitchPoint is an object which can publish state transitions to other threads.

@@ Instruction
I want to use java.lang.invoke.SwitchPoint package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `SwitchPoint newSwitchPoint()`: This method creates a new SwitchPoint.
2. `void signal()`: This method signals the SwitchPoint, causing any threads waiting on it to proceed.
3. `void reset()`: This method resets the SwitchPoint, causing any threads waiting on it to block again.
4. `boolean isOpen()`: This method returns true if the SwitchPoint is open, meaning it can be signaled.
5. `boolean isClosed()`: This method returns true if the SwitchPoint is closed, meaning it cannot be signaled.
================================================================

Sample: 11 VolatileCallSite
----------------------------------------------------------------

@@ Context
Here is the description of the package The java.lang.invoke package contains dynamic language support provided directly by the Java core class libraries and virtual machine.
Here is the description of the class A VolatileCallSite is a CallSite whose target acts like a volatile variable.

@@ Instruction
I want to use java.lang.invoke.VolatileCallSite package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `VolatileCallSite(MethodHandles.Lookup lookup, MethodType type, MethodHandle target)`: This constructor creates a new VolatileCallSite that targets the specified method handle.

2. `VolatileCallSite(MethodHandles.Lookup lookup, MethodType type, MethodHandle target, MethodHandle filter)`: This constructor creates a new VolatileCallSite that targets the specified method handle and has the specified filter.

3. `MethodType type()`: This method returns the MethodType of this CallSite.

4. `MethodHandle target()`: This method returns the MethodHandle of this CallSite.

5. `MethodHandle filter()`: This method returns the filter MethodHandle of this CallSite.
================================================================

