ClassName,Method,Return Type,Description
AbstractLayoutCache,"getBounds(TreePath path, Rectangle placeIn)",abstract Rectangle,Returns a rectangle giving the bounds needed to draw path.
AbstractLayoutCache,getExpandedState(TreePath path),abstract boolean,"Returns true if the path is expanded, and visible."
AbstractLayoutCache,getModel(),TreeModel,Returns the TreeModel that is providing the data.
AbstractLayoutCache,getNodeDimensions(),AbstractLayoutCache.NodeDimensions,"Returns the object that renders nodes in the tree, and which is responsible for calculating the dimensions of individual nodes."
AbstractLayoutCache,"getNodeDimensions(Object value, int row, int depth, boolean expanded, Rectangle placeIn)",protected Rectangle,"Returns, by reference in placeIn, the size needed to represent value."
AbstractLayoutCache,"getPathClosestTo(int x, int y)",abstract TreePath,"Returns the path to the node that is closest to x,y."
AbstractLayoutCache,getPathForRow(int row),abstract TreePath,Returns the path for passed in row.
AbstractLayoutCache,getPreferredHeight(),int,Returns the preferred height.
AbstractLayoutCache,getPreferredWidth(Rectangle bounds),int,Returns the preferred width for the passed in region.
AbstractLayoutCache,getRowCount(),abstract int,Number of rows being displayed.
AbstractLayoutCache,getRowForPath(TreePath path),abstract int,Returns the row that the last item identified in path is visible at.
AbstractLayoutCache,getRowHeight(),int,Returns the height of each row.
AbstractLayoutCache,getRowsForPaths(TreePath[] paths),int[],Returns the rows that the TreePath instances in path are being displayed at.
AbstractLayoutCache,getSelectionModel(),TreeSelectionModel,Returns the model used to maintain the selection.
AbstractLayoutCache,getVisibleChildCount(TreePath path),abstract int,Returns the number of visible children for row.
AbstractLayoutCache,getVisiblePathsFrom(TreePath path),abstract Enumeration<TreePath>,Returns an Enumerator that increments over the visible paths starting at the passed in location.
AbstractLayoutCache,invalidatePathBounds(TreePath path),abstract void,"Instructs the LayoutCache that the bounds for path are invalid, and need to be updated."
AbstractLayoutCache,invalidateSizes(),abstract void,Informs the TreeState that it needs to recalculate all the sizes it is referencing.
AbstractLayoutCache,isExpanded(TreePath path),abstract boolean,Returns true if the value identified by row is currently expanded.
AbstractLayoutCache,isFixedRowHeight(),protected boolean,Returns true if the height of each row is a fixed size.
AbstractLayoutCache,isRootVisible(),boolean,Returns true if the root node of the tree is displayed.
AbstractLayoutCache,"setExpandedState(TreePath path, boolean isExpanded)",abstract void,Marks the path path expanded state to isExpanded.
AbstractLayoutCache,setModel(TreeModel newModel),void,Sets the TreeModel that will provide the data.
AbstractLayoutCache,setNodeDimensions(AbstractLayoutCache.NodeDimensions nd),void,Sets the renderer that is responsible for drawing nodes in the tree and which is therefore responsible for calculating the dimensions of individual nodes.
AbstractLayoutCache,setRootVisible(boolean rootVisible),void,Determines whether or not the root node from the TreeModel is visible.
AbstractLayoutCache,setRowHeight(int rowHeight),void,Sets the height of each cell.
AbstractLayoutCache,setSelectionModel(TreeSelectionModel newLSM),void,Sets the TreeSelectionModel used to manage the selection to new LSM.
AbstractLayoutCache,treeNodesChanged(TreeModelEvent e),abstract void,Invoked after a node (or a set of siblings) has changed in some way.
AbstractLayoutCache,treeNodesInserted(TreeModelEvent e),abstract void,Invoked after nodes have been inserted into the tree.
AbstractLayoutCache,treeNodesRemoved(TreeModelEvent e),abstract void,Invoked after nodes have been removed from the tree.
AbstractLayoutCache,treeStructureChanged(TreeModelEvent e),abstract void,Invoked after the tree has drastically changed structure from a given node down.
AbstractLayoutCache.NodeDimensions,"getNodeDimensions(Object value, int row, int depth, boolean expanded, Rectangle bounds)",abstract Rectangle,"Returns, by reference in bounds, the size and x origin to place value at."
DefaultMutableTreeNode,add(MutableTreeNode newChild),void,Removes newChild from its parent and makes it a child of this node by adding it to the end of this node's child array.
DefaultMutableTreeNode,breadthFirstEnumeration(),Enumeration,Creates and returns an enumeration that traverses the subtree rooted at this node in breadth-first order.
DefaultMutableTreeNode,children(),Enumeration,Creates and returns a forward-order enumeration of this node's children.
DefaultMutableTreeNode,clone(),Object,Overridden to make clone public.
DefaultMutableTreeNode,depthFirstEnumeration(),Enumeration,Creates and returns an enumeration that traverses the subtree rooted at this node in depth-first order.
DefaultMutableTreeNode,getAllowsChildren(),boolean,Returns true if this node is allowed to have children.
DefaultMutableTreeNode,getChildAfter(TreeNode aChild),TreeNode,"Returns the child in this node's child array that immediately follows aChild, which must be a child of this node."
DefaultMutableTreeNode,getChildAt(int index),TreeNode,Returns the child at the specified index in this node's child array.
DefaultMutableTreeNode,getChildBefore(TreeNode aChild),TreeNode,"Returns the child in this node's child array that immediately precedes aChild, which must be a child of this node."
DefaultMutableTreeNode,getChildCount(),int,Returns the number of children of this node.
DefaultMutableTreeNode,getDepth(),int,Returns the depth of the tree rooted at this node -- the longest distance from this node to a leaf.
DefaultMutableTreeNode,getFirstChild(),TreeNode,Returns this node's first child.
DefaultMutableTreeNode,getFirstLeaf(),DefaultMutableTreeNode,Finds and returns the first leaf that is a descendant of this node -- either this node or its first child's first leaf.
DefaultMutableTreeNode,getIndex(TreeNode aChild),int,Returns the index of the specified child in this node's child array.
DefaultMutableTreeNode,getLastChild(),TreeNode,Returns this node's last child.
DefaultMutableTreeNode,getLastLeaf(),DefaultMutableTreeNode,Finds and returns the last leaf that is a descendant of this node -- either this node or its last child's last leaf.
DefaultMutableTreeNode,getLeafCount(),int,Returns the total number of leaves that are descendants of this node.
DefaultMutableTreeNode,getLevel(),int,Returns the number of levels above this node -- the distance from the root to this node.
DefaultMutableTreeNode,getNextLeaf(),DefaultMutableTreeNode,Returns the leaf after this node or null if this node is the last leaf in the tree.
DefaultMutableTreeNode,getNextNode(),DefaultMutableTreeNode,Returns the node that follows this node in a preorder traversal of this node's tree.
DefaultMutableTreeNode,getNextSibling(),DefaultMutableTreeNode,Returns the next sibling of this node in the parent's children array.
DefaultMutableTreeNode,getParent(),TreeNode,Returns this node's parent or null if this node has no parent.
DefaultMutableTreeNode,getPath(),TreeNode[],"Returns the path from the root, to get to this node."
DefaultMutableTreeNode,"getPathToRoot(TreeNode aNode, int depth)",protected TreeNode[],"Builds the parents of node up to and including the root node, where the original node is the last element in the returned array."
DefaultMutableTreeNode,getPreviousLeaf(),DefaultMutableTreeNode,Returns the leaf before this node or null if this node is the first leaf in the tree.
DefaultMutableTreeNode,getPreviousNode(),DefaultMutableTreeNode,Returns the node that precedes this node in a preorder traversal of this node's tree.
DefaultMutableTreeNode,getPreviousSibling(),DefaultMutableTreeNode,Returns the previous sibling of this node in the parent's children array.
DefaultMutableTreeNode,getRoot(),TreeNode,Returns the root of the tree that contains this node.
DefaultMutableTreeNode,getSharedAncestor(DefaultMutableTreeNode aNode),TreeNode,Returns the nearest common ancestor to this node and aNode.
DefaultMutableTreeNode,getSiblingCount(),int,Returns the number of siblings of this node.
DefaultMutableTreeNode,getUserObject(),Object,Returns this node's user object.
DefaultMutableTreeNode,getUserObjectPath(),Object[],"Returns the user object path, from the root, to get to this node."
DefaultMutableTreeNode,"insert(MutableTreeNode newChild, int childIndex)",void,"Removes newChild from its present parent (if it has a parent), sets the child's parent to this node, and then adds the child to this node's child array at index childIndex."
DefaultMutableTreeNode,isLeaf(),boolean,Returns true if this node has no children.
DefaultMutableTreeNode,isNodeAncestor(TreeNode anotherNode),boolean,"Returns true if anotherNode is an ancestor of this node -- if it is this node, this node's parent, or an ancestor of this node's parent."
DefaultMutableTreeNode,isNodeChild(TreeNode aNode),boolean,Returns true if aNode is a child of this node.
DefaultMutableTreeNode,isNodeDescendant(DefaultMutableTreeNode anotherNode),boolean,"Returns true if anotherNode is a descendant of this node -- if it is this node, one of this node's children, or a descendant of one of this node's children."
DefaultMutableTreeNode,isNodeRelated(DefaultMutableTreeNode aNode),boolean,Returns true if and only if aNode is in the same tree as this node.
DefaultMutableTreeNode,isNodeSibling(TreeNode anotherNode),boolean,Returns true if anotherNode is a sibling of (has the same parent as) this node.
DefaultMutableTreeNode,isRoot(),boolean,Returns true if this node is the root of the tree.
DefaultMutableTreeNode,pathFromAncestorEnumeration(TreeNode ancestor),Enumeration,Creates and returns an enumeration that follows the path from ancestor to this node.
DefaultMutableTreeNode,postorderEnumeration(),Enumeration,Creates and returns an enumeration that traverses the subtree rooted at this node in postorder.
DefaultMutableTreeNode,preorderEnumeration(),Enumeration,Creates and returns an enumeration that traverses the subtree rooted at this node in preorder.
DefaultMutableTreeNode,remove(int childIndex),void,Removes the child at the specified index from this node's children and sets that node's parent to null.
DefaultMutableTreeNode,remove(MutableTreeNode aChild),void,"Removes aChild from this node's child array, giving it a null parent."
DefaultMutableTreeNode,removeAllChildren(),void,"Removes all of this node's children, setting their parents to null."
DefaultMutableTreeNode,removeFromParent(),void,"Removes the subtree rooted at this node from the tree, giving this node a null parent."
DefaultMutableTreeNode,setAllowsChildren(boolean allows),void,Determines whether or not this node is allowed to have children.
DefaultMutableTreeNode,setParent(MutableTreeNode newParent),void,Sets this node's parent to newParent but does not change the parent's child array.
DefaultMutableTreeNode,setUserObject(Object userObject),void,Sets the user object for this node to userObject.
DefaultMutableTreeNode,toString(),String,"Returns the result of sending toString() to this node's user object, or the empty string if the node has no user object."
DefaultTreeCellEditor,actionPerformed(ActionEvent e),void,"Messaged when the timer fires, this will start the editing session."
DefaultTreeCellEditor,addCellEditorListener(CellEditorListener l),void,Adds the CellEditorListener.
DefaultTreeCellEditor,cancelCellEditing(),void,Messages cancelCellEditing to the realEditor and removes it from this instance.
DefaultTreeCellEditor,canEditImmediately(EventObject event),protected boolean,"Returns true if event is null, or it is a MouseEvent with a click count > 2 and inHitRegion returns true."
DefaultTreeCellEditor,createContainer(),protected Container,Creates the container to manage placement of editingComponent.
DefaultTreeCellEditor,createTreeCellEditor(),protected TreeCellEditor,This is invoked if a TreeCellEditor is not supplied in the constructor.
DefaultTreeCellEditor,"determineOffset(JTree tree, Object value, boolean isSelected, boolean expanded, boolean leaf, int row)",protected void,NULL
DefaultTreeCellEditor,getBorderSelectionColor(),Color,Returns the color the border is drawn.
DefaultTreeCellEditor,getCellEditorListeners(),CellEditorListener[],Returns an array of all the CellEditorListeners added to this DefaultTreeCellEditor with addCellEditorListener().
DefaultTreeCellEditor,getCellEditorValue(),Object,Returns the value currently being edited.
DefaultTreeCellEditor,getFont(),Font,Gets the font used for editing.
DefaultTreeCellEditor,"getTreeCellEditorComponent(JTree tree, Object value, boolean isSelected, boolean expanded, boolean leaf, int row)",Component,Configures the editor.
DefaultTreeCellEditor,"inHitRegion(int x, int y)",protected boolean,Returns true if the passed in location is a valid mouse location to start editing from.
DefaultTreeCellEditor,isCellEditable(EventObject event),boolean,"If the realEditor returns true to this message, prepareForEditing is messaged and true is returned."
DefaultTreeCellEditor,prepareForEditing(),protected void,Invoked just before editing is to start.
DefaultTreeCellEditor,removeCellEditorListener(CellEditorListener l),void,Removes the previously added CellEditorListener.
DefaultTreeCellEditor,setBorderSelectionColor(Color newColor),void,Sets the color to use for the border.
DefaultTreeCellEditor,setFont(Font font),void,Sets the font to edit with.
DefaultTreeCellEditor,setTree(JTree newTree),protected void,Sets the tree currently editing for.
DefaultTreeCellEditor,shouldSelectCell(EventObject event),boolean,Messages the realEditor for the return value.
DefaultTreeCellEditor,shouldStartEditingTimer(EventObject event),protected boolean,Returns true if event is a MouseEvent and the click count is 1.
DefaultTreeCellEditor,startEditingTimer(),protected void,Starts the editing timer.
DefaultTreeCellEditor,stopCellEditing(),boolean,"If the realEditor will allow editing to stop, the realEditor is removed and true is returned, otherwise false is returned."
DefaultTreeCellEditor,valueChanged(TreeSelectionEvent e),void,Resets lastPath.
DefaultTreeCellRenderer,"firePropertyChange(String propertyName, boolean oldValue, boolean newValue)",void,Overridden for performance reasons.
DefaultTreeCellRenderer,"firePropertyChange(String propertyName, byte oldValue, byte newValue)",void,Overridden for performance reasons.
DefaultTreeCellRenderer,"firePropertyChange(String propertyName, char oldValue, char newValue)",void,Overridden for performance reasons.
DefaultTreeCellRenderer,"firePropertyChange(String propertyName, double oldValue, double newValue)",void,Overridden for performance reasons.
DefaultTreeCellRenderer,"firePropertyChange(String propertyName, float oldValue, float newValue)",void,Overridden for performance reasons.
DefaultTreeCellRenderer,"firePropertyChange(String propertyName, int oldValue, int newValue)",void,Overridden for performance reasons.
DefaultTreeCellRenderer,"firePropertyChange(String propertyName, long oldValue, long newValue)",void,Overridden for performance reasons.
DefaultTreeCellRenderer,"firePropertyChange(String propertyName, Object oldValue, Object newValue)",protected void,Overridden for performance reasons.
DefaultTreeCellRenderer,"firePropertyChange(String propertyName, short oldValue, short newValue)",void,Overridden for performance reasons.
DefaultTreeCellRenderer,getBackgroundNonSelectionColor(),Color,Returns the background color to be used for non selected nodes.
DefaultTreeCellRenderer,getBackgroundSelectionColor(),Color,Returns the color to use for the background if node is selected.
DefaultTreeCellRenderer,getBorderSelectionColor(),Color,Returns the color the border is drawn.
DefaultTreeCellRenderer,getClosedIcon(),Icon,Returns the icon used to represent non-leaf nodes that are not expanded.
DefaultTreeCellRenderer,getDefaultClosedIcon(),Icon,"Returns the default icon, for the current laf, that is used to represent non-leaf nodes that are not expanded."
DefaultTreeCellRenderer,getDefaultLeafIcon(),Icon,"Returns the default icon, for the current laf, that is used to represent leaf nodes."
DefaultTreeCellRenderer,getDefaultOpenIcon(),Icon,"Returns the default icon, for the current laf, that is used to represent non-leaf nodes that are expanded."
DefaultTreeCellRenderer,getFont(),Font,Gets the font of this component.
DefaultTreeCellRenderer,getLeafIcon(),Icon,Returns the icon used to represent leaf nodes.
DefaultTreeCellRenderer,getOpenIcon(),Icon,Returns the icon used to represent non-leaf nodes that are expanded.
DefaultTreeCellRenderer,getPreferredSize(),Dimension,Overrides JComponent.getPreferredSize to return slightly wider preferred size value.
DefaultTreeCellRenderer,getTextNonSelectionColor(),Color,Returns the color the text is drawn with when the node isn't selected.
DefaultTreeCellRenderer,getTextSelectionColor(),Color,Returns the color the text is drawn with when the node is selected.
DefaultTreeCellRenderer,"getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean expanded, boolean leaf, int row, boolean hasFocus)",Component,Configures the renderer based on the passed in components.
DefaultTreeCellRenderer,invalidate(),void,Overridden for performance reasons.
DefaultTreeCellRenderer,paint(Graphics g),void,Paints the value.
DefaultTreeCellRenderer,repaint(),void,Overridden for performance reasons.
DefaultTreeCellRenderer,"repaint(long tm, int x, int y, int width, int height)",void,Overridden for performance reasons.
DefaultTreeCellRenderer,repaint(Rectangle r),void,Overridden for performance reasons.
DefaultTreeCellRenderer,revalidate(),void,Overridden for performance reasons.
DefaultTreeCellRenderer,setBackground(Color color),void,Subclassed to map ColorUIResources to null.
DefaultTreeCellRenderer,setBackgroundNonSelectionColor(Color newColor),void,Sets the background color to be used for non selected nodes.
DefaultTreeCellRenderer,setBackgroundSelectionColor(Color newColor),void,Sets the color to use for the background if node is selected.
DefaultTreeCellRenderer,setBorderSelectionColor(Color newColor),void,Sets the color to use for the border.
DefaultTreeCellRenderer,setClosedIcon(Icon newIcon),void,Sets the icon used to represent non-leaf nodes that are not expanded.
DefaultTreeCellRenderer,setFont(Font font),void,Subclassed to map FontUIResources to null.
DefaultTreeCellRenderer,setLeafIcon(Icon newIcon),void,Sets the icon used to represent leaf nodes.
DefaultTreeCellRenderer,setOpenIcon(Icon newIcon),void,Sets the icon used to represent non-leaf nodes that are expanded.
DefaultTreeCellRenderer,setTextNonSelectionColor(Color newColor),void,Sets the color the text is drawn with when the node isn't selected.
DefaultTreeCellRenderer,setTextSelectionColor(Color newColor),void,Sets the color the text is drawn with when the node is selected.
DefaultTreeCellRenderer,updateUI(),void,Resets the UI property to a value from the current look and feel.
DefaultTreeCellRenderer,validate(),void,Overridden for performance reasons.
DefaultTreeModel,addTreeModelListener(TreeModelListener l),void,Adds a listener for the TreeModelEvent posted after the tree changes.
DefaultTreeModel,asksAllowsChildren(),boolean,Tells how leaf nodes are determined.
DefaultTreeModel,"fireTreeNodesChanged(Object source, Object[] path, int[] childIndices, Object[] children)",protected void,Notifies all listeners that have registered interest for notification on this event type.
DefaultTreeModel,"fireTreeNodesInserted(Object source, Object[] path, int[] childIndices, Object[] children)",protected void,Notifies all listeners that have registered interest for notification on this event type.
DefaultTreeModel,"fireTreeNodesRemoved(Object source, Object[] path, int[] childIndices, Object[] children)",protected void,Notifies all listeners that have registered interest for notification on this event type.
DefaultTreeModel,"fireTreeStructureChanged(Object source, Object[] path, int[] childIndices, Object[] children)",protected void,Notifies all listeners that have registered interest for notification on this event type.
DefaultTreeModel,"getChild(Object parent, int index)",Object,Returns the child of parent at index index in the parent's child array.
DefaultTreeModel,getChildCount(Object parent),int,Returns the number of children of parent.
DefaultTreeModel,"getIndexOfChild(Object parent, Object child)",int,Returns the index of child in parent.
DefaultTreeModel,getListeners(Class<T> listenerType),<T extends EventListener>T[],Returns an array of all the objects currently registered as FooListeners upon this model.
DefaultTreeModel,getPathToRoot(TreeNode aNode),TreeNode[],"Builds the parents of node up to and including the root node, where the original node is the last element in the returned array."
DefaultTreeModel,"getPathToRoot(TreeNode aNode, int depth)",protected TreeNode[],"Builds the parents of node up to and including the root node, where the original node is the last element in the returned array."
DefaultTreeModel,getRoot(),Object,Returns the root of the tree.
DefaultTreeModel,getTreeModelListeners(),TreeModelListener[],Returns an array of all the tree model listeners registered on this model.
DefaultTreeModel,"insertNodeInto(MutableTreeNode newChild, MutableTreeNode parent, int index)",void,Invoked this to insert newChild at location index in parents children.
DefaultTreeModel,isLeaf(Object node),boolean,Returns whether the specified node is a leaf node.
DefaultTreeModel,nodeChanged(TreeNode node),void,Invoke this method after you've changed how node is to be represented in the tree.
DefaultTreeModel,"nodesChanged(TreeNode node, int[] childIndices)",void,Invoke this method after you've changed how the children identified by childIndicies are to be represented in the tree.
DefaultTreeModel,nodeStructureChanged(TreeNode node),void,Invoke this method if you've totally changed the children of node and its children's children...
DefaultTreeModel,"nodesWereInserted(TreeNode node, int[] childIndices)",void,Invoke this method after you've inserted some TreeNodes into node.
DefaultTreeModel,"nodesWereRemoved(TreeNode node, int[] childIndices, Object[] removedChildren)",void,Invoke this method after you've removed some TreeNodes from node.
DefaultTreeModel,reload(),void,Invoke this method if you've modified the TreeNodes upon which this model depends.
DefaultTreeModel,reload(TreeNode node),void,Invoke this method if you've modified the TreeNodes upon which this model depends.
DefaultTreeModel,removeNodeFromParent(MutableTreeNode node),void,Message this to remove node from its parent.
DefaultTreeModel,removeTreeModelListener(TreeModelListener l),void,Removes a listener previously added with addTreeModelListener().
DefaultTreeModel,setAsksAllowsChildren(boolean newValue),void,Sets whether or not to test leafness by asking getAllowsChildren() or isLeaf() to the TreeNodes.
DefaultTreeModel,setRoot(TreeNode root),void,Sets the root to root.
DefaultTreeModel,"valueForPathChanged(TreePath path, Object newValue)",void,This sets the user object of the TreeNode identified by path and posts a node changed.
DefaultTreeSelectionModel,addPropertyChangeListener(PropertyChangeListener listener),void,Adds a PropertyChangeListener to the listener list.
DefaultTreeSelectionModel,addSelectionPath(TreePath path),void,Adds path to the current selection.
DefaultTreeSelectionModel,addSelectionPaths(TreePath[] paths),void,Adds paths to the current selection.
DefaultTreeSelectionModel,addTreeSelectionListener(TreeSelectionListener x),void,Adds x to the list of listeners that are notified each time the set of selected TreePaths changes.
DefaultTreeSelectionModel,arePathsContiguous(TreePath[] paths),protected boolean,"Returns true if the paths are contiguous, or this object has no RowMapper."
DefaultTreeSelectionModel,canPathsBeAdded(TreePath[] paths),protected boolean,Used to test if a particular set of TreePaths can be added.
DefaultTreeSelectionModel,canPathsBeRemoved(TreePath[] paths),protected boolean,Returns true if the paths can be removed without breaking the continuity of the model.
DefaultTreeSelectionModel,clearSelection(),void,Empties the current selection.
DefaultTreeSelectionModel,clone(),Object,Returns a clone of this object with the same selection.
DefaultTreeSelectionModel,fireValueChanged(TreeSelectionEvent e),protected void,Notifies all listeners that are registered for tree selection events on this object.
DefaultTreeSelectionModel,getLeadSelectionPath(),TreePath,Returns the last path that was added.
DefaultTreeSelectionModel,getLeadSelectionRow(),int,Returns the lead selection index.
DefaultTreeSelectionModel,getListeners(Class<T> listenerType),<T extends EventListener>T[],Returns an array of all the objects currently registered as FooListeners upon this model.
DefaultTreeSelectionModel,getMaxSelectionRow(),int,Returns the largest value obtained from the RowMapper for the current set of selected TreePaths.
DefaultTreeSelectionModel,getMinSelectionRow(),int,Returns the smallest value obtained from the RowMapper for the current set of selected TreePaths.
DefaultTreeSelectionModel,getPropertyChangeListeners(),PropertyChangeListener[],Returns an array of all the property change listeners registered on this DefaultTreeSelectionModel.
DefaultTreeSelectionModel,getRowMapper(),RowMapper,Returns the RowMapper instance that is able to map a TreePath to a row.
DefaultTreeSelectionModel,getSelectionCount(),int,Returns the number of paths that are selected.
DefaultTreeSelectionModel,getSelectionMode(),int,"Returns the selection mode, one of SINGLE_TREE_SELECTION, DISCONTIGUOUS_TREE_SELECTION or CONTIGUOUS_TREE_SELECTION."
DefaultTreeSelectionModel,getSelectionPath(),TreePath,Returns the first path in the selection.
DefaultTreeSelectionModel,getSelectionPaths(),TreePath[],Returns the selection.
DefaultTreeSelectionModel,getSelectionRows(),int[],Returns the selection in terms of rows.
DefaultTreeSelectionModel,getTreeSelectionListeners(),TreeSelectionListener[],Returns an array of all the tree selection listeners registered on this model.
DefaultTreeSelectionModel,insureRowContinuity(),protected void,Makes sure the currently selected TreePaths are valid for the current selection mode.
DefaultTreeSelectionModel,insureUniqueness(),protected void,This method is obsolete and its implementation is now a noop.
DefaultTreeSelectionModel,isPathSelected(TreePath path),boolean,"Returns true if the path, path, is in the current selection."
DefaultTreeSelectionModel,isRowSelected(int row),boolean,Returns true if the row identified by row is selected.
DefaultTreeSelectionModel,isSelectionEmpty(),boolean,Returns true if the selection is currently empty.
DefaultTreeSelectionModel,"notifyPathChange(Vector<?> changedPaths, TreePath oldLeadSelection)",protected void,Deprecated. As of JDK version 1.7
DefaultTreeSelectionModel,removePropertyChangeListener(PropertyChangeListener listener),void,Removes a PropertyChangeListener from the listener list.
DefaultTreeSelectionModel,removeSelectionPath(TreePath path),void,Removes path from the selection.
DefaultTreeSelectionModel,removeSelectionPaths(TreePath[] paths),void,Removes paths from the selection.
DefaultTreeSelectionModel,removeTreeSelectionListener(TreeSelectionListener x),void,Removes x from the list of listeners that are notified each time the set of selected TreePaths changes.
DefaultTreeSelectionModel,resetRowSelection(),void,Updates this object's mapping from TreePath to rows.
DefaultTreeSelectionModel,setRowMapper(RowMapper newMapper),void,Sets the RowMapper instance.
DefaultTreeSelectionModel,setSelectionMode(int mode),void,"Sets the selection model, which must be one of SINGLE_TREE_SELECTION, CONTIGUOUS_TREE_SELECTION or DISCONTIGUOUS_TREE_SELECTION."
DefaultTreeSelectionModel,setSelectionPath(TreePath path),void,Sets the selection to path.
DefaultTreeSelectionModel,setSelectionPaths(TreePath[] pPaths),void,Sets the selection.
DefaultTreeSelectionModel,toString(),String,Returns a string that displays and identifies this object's properties.
DefaultTreeSelectionModel,updateLeadIndex(),protected void,Updates the leadIndex instance variable.
FixedHeightLayoutCache,"getBounds(TreePath path, Rectangle placeIn)",Rectangle,Returns a rectangle giving the bounds needed to draw path.
FixedHeightLayoutCache,getExpandedState(TreePath path),boolean,"Returns true if the path is expanded, and visible."
FixedHeightLayoutCache,"getPathClosestTo(int x, int y)",TreePath,"Returns the path to the node that is closest to x,y."
FixedHeightLayoutCache,getPathForRow(int row),TreePath,Returns the path for passed in row.
FixedHeightLayoutCache,getRowCount(),int,Returns the number of visible rows.
FixedHeightLayoutCache,getRowForPath(TreePath path),int,Returns the row that the last item identified in path is visible at.
FixedHeightLayoutCache,getVisibleChildCount(TreePath path),int,Returns the number of visible children for row.
FixedHeightLayoutCache,getVisiblePathsFrom(TreePath path),Enumeration<TreePath>,Returns an Enumerator that increments over the visible paths starting at the passed in location.
FixedHeightLayoutCache,invalidatePathBounds(TreePath path),void,"Does nothing, FixedHeightLayoutCache doesn't cache width, and that is all that could change."
FixedHeightLayoutCache,invalidateSizes(),void,Informs the TreeState that it needs to recalculate all the sizes it is referencing.
FixedHeightLayoutCache,isExpanded(TreePath path),boolean,Returns true if the value identified by row is currently expanded.
FixedHeightLayoutCache,"setExpandedState(TreePath path, boolean isExpanded)",void,Marks the path path expanded state to isExpanded.
FixedHeightLayoutCache,setModel(TreeModel newModel),void,Sets the TreeModel that will provide the data.
FixedHeightLayoutCache,setRootVisible(boolean rootVisible),void,Determines whether or not the root node from the TreeModel is visible.
FixedHeightLayoutCache,setRowHeight(int rowHeight),void,Sets the height of each cell.
FixedHeightLayoutCache,treeNodesChanged(TreeModelEvent e),void,Invoked after a node (or a set of siblings) has changed in some way.
FixedHeightLayoutCache,treeNodesInserted(TreeModelEvent e),void,Invoked after nodes have been inserted into the tree.
FixedHeightLayoutCache,treeNodesRemoved(TreeModelEvent e),void,Invoked after nodes have been removed from the tree.
FixedHeightLayoutCache,treeStructureChanged(TreeModelEvent e),void,Invoked after the tree has drastically changed structure from a given node down.
TreePath,equals(Object o),boolean,Compares this TreePath to the specified object.
TreePath,getLastPathComponent(),Object,Returns the last element of this path.
TreePath,getParentPath(),TreePath,Returns the TreePath of the parent.
TreePath,getPath(),Object[],Returns an ordered array of the elements of this TreePath.
TreePath,getPathComponent(int index),Object,Returns the path element at the specified index.
TreePath,getPathCount(),int,Returns the number of elements in the path.
TreePath,hashCode(),int,Returns the hash code of this TreePath.
TreePath,isDescendant(TreePath aTreePath),boolean,Returns true if aTreePath is a descendant of this TreePath.
TreePath,pathByAddingChild(Object child),TreePath,Returns a new path containing all the elements of this path plus child.
TreePath,toString(),String,Returns a string that displays and identifies this object's properties.
VariableHeightLayoutCache,"getBounds(TreePath path, Rectangle placeIn)",Rectangle,Returns the Rectangle enclosing the label portion into which the item identified by path will be drawn.
VariableHeightLayoutCache,getExpandedState(TreePath path),boolean,"Returns true if the path is expanded, and visible."
VariableHeightLayoutCache,"getPathClosestTo(int x, int y)",TreePath,"Returns the path to the node that is closest to x,y."
VariableHeightLayoutCache,getPathForRow(int row),TreePath,Returns the path for row.
VariableHeightLayoutCache,getPreferredHeight(),int,Returns the preferred height.
VariableHeightLayoutCache,getPreferredWidth(Rectangle bounds),int,Returns the preferred width and height for the region in visibleRegion.
VariableHeightLayoutCache,getRowCount(),int,Returns the number of visible rows.
VariableHeightLayoutCache,getRowForPath(TreePath path),int,Returns the row where the last item identified in path is visible.
VariableHeightLayoutCache,getVisibleChildCount(TreePath path),int,Returns the number of visible children for path.
VariableHeightLayoutCache,getVisiblePathsFrom(TreePath path),Enumeration<TreePath>,Returns an Enumerator that increments over the visible paths starting at the passed in location.
VariableHeightLayoutCache,invalidatePathBounds(TreePath path),void,"Instructs the LayoutCache that the bounds for path are invalid, and need to be updated."
VariableHeightLayoutCache,invalidateSizes(),void,Informs the TreeState that it needs to recalculate all the sizes it is referencing.
VariableHeightLayoutCache,isExpanded(TreePath path),boolean,Returns true if the value identified by path is currently expanded.
VariableHeightLayoutCache,"setExpandedState(TreePath path, boolean isExpanded)",void,Marks the path path expanded state to isExpanded.
VariableHeightLayoutCache,setModel(TreeModel newModel),void,Sets the TreeModel that will provide the data.
VariableHeightLayoutCache,setNodeDimensions(AbstractLayoutCache.NodeDimensions nd),void,Sets the renderer that is responsible for drawing nodes in the tree.
VariableHeightLayoutCache,setRootVisible(boolean rootVisible),void,Determines whether or not the root node from the TreeModel is visible.
VariableHeightLayoutCache,setRowHeight(int rowHeight),void,Sets the height of each cell.
VariableHeightLayoutCache,treeNodesChanged(TreeModelEvent e),void,Invoked after a node (or a set of siblings) has changed in some way.
VariableHeightLayoutCache,treeNodesInserted(TreeModelEvent e),void,Invoked after nodes have been inserted into the tree.
VariableHeightLayoutCache,treeNodesRemoved(TreeModelEvent e),void,Invoked after nodes have been removed from the tree.
VariableHeightLayoutCache,treeStructureChanged(TreeModelEvent e),void,Invoked after the tree has drastically changed structure from a given node down.
