ClassName,Method,Return Type,Description
CertPathTrustManagerParameters,getParameters(),CertPathParameters,Return a clone of the CertPathParameters encapsulated by this class.
ExtendedSSLSession,getLocalSupportedSignatureAlgorithms(),abstract String[],Obtains an array of supported signature algorithms that the local side is willing to use.
ExtendedSSLSession,getPeerSupportedSignatureAlgorithms(),abstract String[],Obtains an array of supported signature algorithms that the peer is able to use.
ExtendedSSLSession,getRequestedServerNames(),List<SNIServerName>,Obtains a List containing all SNIServerNames of the requested Server Name Indication (SNI) extension.
HandshakeCompletedEvent,getCipherSuite(),String,Returns the cipher suite in use by the session which was produced by the handshake.
HandshakeCompletedEvent,getLocalCertificates(),Certificate[],Returns the certificate(s) that were sent to the peer during handshaking.
HandshakeCompletedEvent,getLocalPrincipal(),Principal,Returns the principal that was sent to the peer during handshaking.
HandshakeCompletedEvent,getPeerCertificateChain(),X509Certificate[],Returns the identity of the peer which was identified as part of defining the session.
HandshakeCompletedEvent,getPeerCertificates(),Certificate[],Returns the identity of the peer which was established as part of defining the session.
HandshakeCompletedEvent,getPeerPrincipal(),Principal,Returns the identity of the peer which was established as part of defining the session.
HandshakeCompletedEvent,getSession(),SSLSession,Returns the session that triggered this event.
HandshakeCompletedEvent,getSocket(),SSLSocket,Returns the socket which is the source of this event.
HttpsURLConnection,getCipherSuite(),abstract String,Returns the cipher suite in use on this connection.
HttpsURLConnection,getDefaultHostnameVerifier(),static HostnameVerifier,Gets the default HostnameVerifier that is inherited by new instances of this class.
HttpsURLConnection,getDefaultSSLSocketFactory(),static SSLSocketFactory,Gets the default static SSLSocketFactory that is inherited by new instances of this class.
HttpsURLConnection,getHostnameVerifier(),HostnameVerifier,Gets the HostnameVerifier in place on this instance.
HttpsURLConnection,getLocalCertificates(),abstract Certificate[],Returns the certificate(s) that were sent to the server during handshaking.
HttpsURLConnection,getLocalPrincipal(),Principal,Returns the principal that was sent to the server during handshaking.
HttpsURLConnection,getPeerPrincipal(),Principal,Returns the server's principal which was established as part of defining the session.
HttpsURLConnection,getServerCertificates(),abstract Certificate[],Returns the server's certificate chain which was established as part of defining the session.
HttpsURLConnection,getSSLSocketFactory(),SSLSocketFactory,Gets the SSL socket factory to be used when creating sockets for secure https URL connections.
HttpsURLConnection,setDefaultHostnameVerifier(HostnameVerifier v),static void,Sets the default HostnameVerifier inherited by a new instance of this class.
HttpsURLConnection,setDefaultSSLSocketFactory(SSLSocketFactory sf),static void,Sets the default SSLSocketFactory inherited by new instances of this class.
HttpsURLConnection,setHostnameVerifier(HostnameVerifier v),void,Sets the HostnameVerifier for this instance.
HttpsURLConnection,setSSLSocketFactory(SSLSocketFactory sf),void,Sets the SSLSocketFactory to be used when this instance creates sockets for secure https URL connections.
KeyManagerFactory,getAlgorithm(),String,Returns the algorithm name of this KeyManagerFactory object.
KeyManagerFactory,getDefaultAlgorithm(),static String,Obtains the default KeyManagerFactory algorithm name.
KeyManagerFactory,getInstance(String algorithm),static KeyManagerFactory,Returns a KeyManagerFactory object that acts as a factory for key managers.
KeyManagerFactory,"getInstance(String algorithm, Provider provider)",static KeyManagerFactory,Returns a KeyManagerFactory object that acts as a factory for key managers.
KeyManagerFactory,"getInstance(String algorithm, String provider)",static KeyManagerFactory,Returns a KeyManagerFactory object that acts as a factory for key managers.
KeyManagerFactory,getKeyManagers(),KeyManager[],Returns one key manager for each type of key material.
KeyManagerFactory,getProvider(),Provider,Returns the provider of this KeyManagerFactory object.
KeyManagerFactory,"init(KeyStore ks, char[] password)",void,Initializes this factory with a source of key material.
KeyManagerFactory,init(ManagerFactoryParameters spec),void,Initializes this factory with a source of provider-specific key material.
KeyManagerFactorySpi,engineGetKeyManagers(),protected abstract KeyManager[],Returns one key manager for each type of key material.
KeyManagerFactorySpi,"engineInit(KeyStore ks, char[] password)",protected abstract void,Initializes this factory with a source of key material.
KeyManagerFactorySpi,engineInit(ManagerFactoryParameters spec),protected abstract void,Initializes this factory with a source of key material.
KeyStoreBuilderParameters,getParameters(),List<KeyStore.Builder>,Return the unmodifiable List of the KeyStore.Builders encapsulated by this object.
SNIHostName,createSNIMatcher(String regex),static SNIMatcher,Creates an SNIMatcher object for SNIHostNames.
SNIHostName,equals(Object other),boolean,Compares this server name to the specified object.
SNIHostName,getAsciiName(),String,Returns the StandardCharsets.US_ASCII-compliant hostname of this SNIHostName object.
SNIHostName,hashCode(),int,Returns a hash code value for this SNIHostName.
SNIHostName,toString(),String,"Returns a string representation of the object, including the DNS hostname in this SNIHostName object."
SNIMatcher,getType(),int,Returns the server name type of this SNIMatcher object.
SNIMatcher,matches(SNIServerName serverName),abstract boolean,Attempts to match the given SNIServerName.
SNIServerName,equals(Object other),boolean,"Indicates whether some other object is ""equal to"" this server name."
SNIServerName,getEncoded(),byte[],Returns a copy of the encoded server name value of this server name.
SNIServerName,getType(),int,Returns the name type of this server name.
SNIServerName,hashCode(),int,Returns a hash code value for this server name.
SNIServerName,toString(),String,"Returns a string representation of this server name, including the server name type and the encoded server name value in this SNIServerName object."
SSLContext,createSSLEngine(),SSLEngine,Creates a new SSLEngine using this context.
SSLContext,"createSSLEngine(String peerHost, int peerPort)",SSLEngine,Creates a new SSLEngine using this context using advisory peer information.
SSLContext,getClientSessionContext(),SSLSessionContext,"Returns the client session context, which represents the set of SSL sessions available for use during the handshake phase of client-side SSL sockets."
SSLContext,getDefault(),static SSLContext,Returns the default SSL context.
SSLContext,getDefaultSSLParameters(),SSLParameters,Returns a copy of the SSLParameters indicating the default settings for this SSL context.
SSLContext,getInstance(String protocol),static SSLContext,Returns a SSLContext object that implements the specified secure socket protocol.
SSLContext,"getInstance(String protocol, Provider provider)",static SSLContext,Returns a SSLContext object that implements the specified secure socket protocol.
SSLContext,"getInstance(String protocol, String provider)",static SSLContext,Returns a SSLContext object that implements the specified secure socket protocol.
SSLContext,getProtocol(),String,Returns the protocol name of this SSLContext object.
SSLContext,getProvider(),Provider,Returns the provider of this SSLContext object.
SSLContext,getServerSessionContext(),SSLSessionContext,"Returns the server session context, which represents the set of SSL sessions available for use during the handshake phase of server-side SSL sockets."
SSLContext,getServerSocketFactory(),SSLServerSocketFactory,Returns a ServerSocketFactory object for this context.
SSLContext,getSocketFactory(),SSLSocketFactory,Returns a SocketFactory object for this context.
SSLContext,getSupportedSSLParameters(),SSLParameters,Returns a copy of the SSLParameters indicating the supported settings for this SSL context.
SSLContext,"init(KeyManager[] km, TrustManager[] tm, SecureRandom random)",void,Initializes this context.
SSLContext,setDefault(SSLContext context),static void,Sets the default SSL context.
SSLContextSpi,engineCreateSSLEngine(),protected abstract SSLEngine,Creates a new SSLEngine using this context.
SSLContextSpi,"engineCreateSSLEngine(String host, int port)",protected abstract SSLEngine,Creates a SSLEngine using this context.
SSLContextSpi,engineGetClientSessionContext(),protected abstract SSLSessionContext,Returns a client SSLSessionContext object for this context.
SSLContextSpi,engineGetDefaultSSLParameters(),protected SSLParameters,Returns a copy of the SSLParameters indicating the default settings for this SSL context.
SSLContextSpi,engineGetServerSessionContext(),protected abstract SSLSessionContext,Returns a server SSLSessionContext object for this context.
SSLContextSpi,engineGetServerSocketFactory(),protected abstract SSLServerSocketFactory,Returns a ServerSocketFactory object for this context.
SSLContextSpi,engineGetSocketFactory(),protected abstract SSLSocketFactory,Returns a SocketFactory object for this context.
SSLContextSpi,engineGetSupportedSSLParameters(),protected SSLParameters,Returns a copy of the SSLParameters indicating the maximum supported settings for this SSL context.
SSLContextSpi,"engineInit(KeyManager[] km, TrustManager[] tm, SecureRandom sr)",protected abstract void,Initializes this context.
SSLEngine,beginHandshake(),abstract void,Initiates handshaking (initial or renegotiation) on this SSLEngine.
SSLEngine,closeInbound(),abstract void,Signals that no more inbound network data will be sent to this SSLEngine.
SSLEngine,closeOutbound(),abstract void,Signals that no more outbound application data will be sent on this SSLEngine.
SSLEngine,getApplicationProtocol(),String,Returns the most recent application protocol value negotiated for this connection.
SSLEngine,getDelegatedTask(),abstract Runnable,Returns a delegated Runnable task for this SSLEngine.
SSLEngine,getEnabledCipherSuites(),abstract String[],Returns the names of the SSL cipher suites which are currently enabled for use on this engine.
SSLEngine,getEnabledProtocols(),abstract String[],Returns the names of the protocol versions which are currently enabled for use with this SSLEngine.
SSLEngine,getEnableSessionCreation(),abstract boolean,Returns true if new SSL sessions may be established by this engine.
SSLEngine,getHandshakeApplicationProtocol(),String,Returns the application protocol value negotiated on a SSL/TLS handshake currently in progress.
SSLEngine,getHandshakeApplicationProtocolSelector(),"BiFunction<SSLEngine,List<String>,String>",Retrieves the callback function that selects an application protocol value during a SSL/TLS/DTLS handshake.
SSLEngine,getHandshakeSession(),SSLSession,Returns the SSLSession being constructed during a SSL/TLS handshake.
SSLEngine,getHandshakeStatus(),abstract SSLEngineResult.HandshakeStatus,Returns the current handshake status for this SSLEngine.
SSLEngine,getNeedClientAuth(),abstract boolean,Returns true if the engine will require client authentication.
SSLEngine,getPeerHost(),String,Returns the host name of the peer.
SSLEngine,getPeerPort(),int,Returns the port number of the peer.
SSLEngine,getSession(),abstract SSLSession,Returns the SSLSession in use in this SSLEngine.
SSLEngine,getSSLParameters(),SSLParameters,Returns the SSLParameters in effect for this SSLEngine.
SSLEngine,getSupportedCipherSuites(),abstract String[],Returns the names of the cipher suites which could be enabled for use on this engine.
SSLEngine,getSupportedProtocols(),abstract String[],Returns the names of the protocols which could be enabled for use with this SSLEngine.
SSLEngine,getUseClientMode(),abstract boolean,Returns true if the engine is set to use client mode when handshaking.
SSLEngine,getWantClientAuth(),abstract boolean,Returns true if the engine will request client authentication.
SSLEngine,isInboundDone(),abstract boolean,"Returns whether unwrap(ByteBuffer, ByteBuffer) will accept any more inbound data messages."
SSLEngine,isOutboundDone(),abstract boolean,"Returns whether wrap(ByteBuffer, ByteBuffer) will produce any more outbound data messages."
SSLEngine,setEnabledCipherSuites(String[] suites),abstract void,Sets the cipher suites enabled for use on this engine.
SSLEngine,setEnabledProtocols(String[] protocols),abstract void,Set the protocol versions enabled for use on this engine.
SSLEngine,setEnableSessionCreation(boolean flag),abstract void,Controls whether new SSL sessions may be established by this engine.
SSLEngine,"setHandshakeApplicationProtocolSelector(BiFunction<SSLEngine,List<String>,String> selector)",void,Registers a callback function that selects an application protocol value for a SSL/TLS/DTLS handshake.
SSLEngine,setNeedClientAuth(boolean need),abstract void,Configures the engine to require client authentication.
SSLEngine,setSSLParameters(SSLParameters params),void,Applies SSLParameters to this engine.
SSLEngine,setUseClientMode(boolean mode),abstract void,Configures the engine to use client (or server) mode when handshaking.
SSLEngine,setWantClientAuth(boolean want),abstract void,Configures the engine to request client authentication.
SSLEngine,"unwrap(ByteBuffer src, ByteBuffer dst)",SSLEngineResult,Attempts to decode SSL/TLS network data into a plaintext application data buffer.
SSLEngine,"unwrap(ByteBuffer src, ByteBuffer[] dsts)",SSLEngineResult,Attempts to decode SSL/TLS network data into a sequence of plaintext application data buffers.
SSLEngine,"unwrap(ByteBuffer src, ByteBuffer[] dsts, int offset, int length)",abstract SSLEngineResult,Attempts to decode SSL/TLS network data into a subsequence of plaintext application data buffers.
SSLEngine,"wrap(ByteBuffer[] srcs, ByteBuffer dst)",SSLEngineResult,Attempts to encode plaintext bytes from a sequence of data buffers into SSL/TLS network data.
SSLEngine,"wrap(ByteBuffer[] srcs, int offset, int length, ByteBuffer dst)",abstract SSLEngineResult,Attempts to encode plaintext bytes from a subsequence of data buffers into SSL/TLS network data.
SSLEngine,"wrap(ByteBuffer src, ByteBuffer dst)",SSLEngineResult,Attempts to encode a buffer of plaintext application data into SSL/TLS network data.
SSLEngineResult,bytesConsumed(),int,Returns the number of bytes consumed from the input buffer.
SSLEngineResult,bytesProduced(),int,Returns the number of bytes written to the output buffer.
SSLEngineResult,getHandshakeStatus(),SSLEngineResult.HandshakeStatus,Gets the handshake status of this SSLEngine operation.
SSLEngineResult,getStatus(),SSLEngineResult.Status,Gets the return value of this SSLEngine operation.
SSLEngineResult,toString(),String,Returns a String representation of this object.
SSLParameters,getAlgorithmConstraints(),AlgorithmConstraints,Returns the cryptographic algorithm constraints.
SSLParameters,getApplicationProtocols(),String[],Returns a prioritized array of application-layer protocol names that can be negotiated over the SSL/TLS/DTLS protocols.
SSLParameters,getCipherSuites(),String[],Returns a copy of the array of ciphersuites or null if none have been set.
SSLParameters,getEndpointIdentificationAlgorithm(),String,Gets the endpoint identification algorithm.
SSLParameters,getNeedClientAuth(),boolean,Returns whether client authentication should be required.
SSLParameters,getProtocols(),String[],Returns a copy of the array of protocols or null if none have been set.
SSLParameters,getServerNames(),List<SNIServerName>,"Returns a List containing all SNIServerNames of the Server Name Indication (SNI) parameter, or null if none has been set."
SSLParameters,getSNIMatchers(),Collection<SNIMatcher>,"Returns a Collection containing all SNIMatchers of the Server Name Indication (SNI) parameter, or null if none has been set."
SSLParameters,getUseCipherSuitesOrder(),boolean,Returns whether the local cipher suites preference should be honored.
SSLParameters,getWantClientAuth(),boolean,Returns whether client authentication should be requested.
SSLParameters,setAlgorithmConstraints(AlgorithmConstraints constraints),void,"Sets the cryptographic algorithm constraints, which will be used in addition to any configured by the runtime environment."
SSLParameters,setApplicationProtocols(String[] protocols),void,Sets the prioritized array of application-layer protocol names that can be negotiated over the SSL/TLS/DTLS protocols.
SSLParameters,setCipherSuites(String[] cipherSuites),void,Sets the array of ciphersuites.
SSLParameters,setEndpointIdentificationAlgorithm(String algorithm),void,Sets the endpoint identification algorithm.
SSLParameters,setNeedClientAuth(boolean needClientAuth),void,Sets whether client authentication should be required.
SSLParameters,setProtocols(String[] protocols),void,Sets the array of protocols.
SSLParameters,setServerNames(List<SNIServerName> serverNames),void,Sets the desired SNIServerNames of the Server Name Indication (SNI) parameter.
SSLParameters,setSNIMatchers(Collection<SNIMatcher> matchers),void,Sets the SNIMatchers of the Server Name Indication (SNI) parameter.
SSLParameters,setUseCipherSuitesOrder(boolean honorOrder),void,Sets whether the local cipher suites preference should be honored.
SSLParameters,setWantClientAuth(boolean wantClientAuth),void,Sets whether client authentication should be requested.
SSLServerSocket,getEnabledCipherSuites(),abstract String[],Returns the list of cipher suites which are currently enabled for use by newly accepted connections.
SSLServerSocket,getEnabledProtocols(),abstract String[],Returns the names of the protocols which are currently enabled for use by the newly accepted connections.
SSLServerSocket,getEnableSessionCreation(),abstract boolean,Returns true if new SSL sessions may be established by the sockets which are created from this server socket.
SSLServerSocket,getNeedClientAuth(),abstract boolean,Returns true if client authentication will be required on newly accepted server-mode SSLSockets.
SSLServerSocket,getSSLParameters(),SSLParameters,Returns the SSLParameters in effect for newly accepted connections.
SSLServerSocket,getSupportedCipherSuites(),abstract String[],Returns the names of the cipher suites which could be enabled for use on an SSL connection.
SSLServerSocket,getSupportedProtocols(),abstract String[],Returns the names of the protocols which could be enabled for use.
SSLServerSocket,getUseClientMode(),abstract boolean,Returns true if accepted connections will be in SSL client mode.
SSLServerSocket,getWantClientAuth(),abstract boolean,Returns true if client authentication will be requested on newly accepted server-mode connections.
SSLServerSocket,setEnabledCipherSuites(String[] suites),abstract void,Sets the cipher suites enabled for use by accepted connections.
SSLServerSocket,setEnabledProtocols(String[] protocols),abstract void,Controls which particular protocols are enabled for use by accepted connections.
SSLServerSocket,setEnableSessionCreation(boolean flag),abstract void,Controls whether new SSL sessions may be established by the sockets which are created from this server socket.
SSLServerSocket,setNeedClientAuth(boolean need),abstract void,Controls whether accepted server-mode SSLSockets will be initially configured to require client authentication.
SSLServerSocket,setSSLParameters(SSLParameters params),void,Applies SSLParameters to newly accepted connections.
SSLServerSocket,setUseClientMode(boolean mode),abstract void,"Controls whether accepted connections are in the (default) SSL server mode, or the SSL client mode."
SSLServerSocket,setWantClientAuth(boolean want),abstract void,Controls whether accepted server-mode SSLSockets will be initially configured to request client authentication.
SSLServerSocketFactory,getDefault(),static ServerSocketFactory,Returns the default SSL server socket factory.
SSLServerSocketFactory,getDefaultCipherSuites(),abstract String[],Returns the list of cipher suites which are enabled by default.
SSLServerSocketFactory,getSupportedCipherSuites(),abstract String[],Returns the names of the cipher suites which could be enabled for use on an SSL connection created by this factory.
SSLSessionBindingEvent,getName(),String,"Returns the name to which the object is being bound, or the name from which the object is being unbound."
SSLSessionBindingEvent,getSession(),SSLSession,Returns the SSLSession into which the listener is being bound or from which the listener is being unbound.
SSLSocket,addHandshakeCompletedListener(HandshakeCompletedListener listener),abstract void,Registers an event listener to receive notifications that an SSL handshake has completed on this connection.
SSLSocket,getApplicationProtocol(),String,Returns the most recent application protocol value negotiated for this connection.
SSLSocket,getEnabledCipherSuites(),abstract String[],Returns the names of the SSL cipher suites which are currently enabled for use on this connection.
SSLSocket,getEnabledProtocols(),abstract String[],Returns the names of the protocol versions which are currently enabled for use on this connection.
SSLSocket,getEnableSessionCreation(),abstract boolean,Returns true if new SSL sessions may be established by this socket.
SSLSocket,getHandshakeApplicationProtocol(),String,Returns the application protocol value negotiated on a SSL/TLS handshake currently in progress.
SSLSocket,getHandshakeApplicationProtocolSelector(),"BiFunction<SSLSocket,List<String>,String>",Retrieves the callback function that selects an application protocol value during a SSL/TLS/DTLS handshake.
SSLSocket,getHandshakeSession(),SSLSession,Returns the SSLSession being constructed during a SSL/TLS handshake.
SSLSocket,getNeedClientAuth(),abstract boolean,Returns true if the socket will require client authentication.
SSLSocket,getSession(),abstract SSLSession,Returns the SSL Session in use by this connection.
SSLSocket,getSSLParameters(),SSLParameters,Returns the SSLParameters in effect for this SSLSocket.
SSLSocket,getSupportedCipherSuites(),abstract String[],Returns the names of the cipher suites which could be enabled for use on this connection.
SSLSocket,getSupportedProtocols(),abstract String[],Returns the names of the protocols which could be enabled for use on an SSL connection.
SSLSocket,getUseClientMode(),abstract boolean,Returns true if the socket is set to use client mode when handshaking.
SSLSocket,getWantClientAuth(),abstract boolean,Returns true if the socket will request client authentication.
SSLSocket,removeHandshakeCompletedListener(HandshakeCompletedListener listener),abstract void,Removes a previously registered handshake completion listener.
SSLSocket,setEnabledCipherSuites(String[] suites),abstract void,Sets the cipher suites enabled for use on this connection.
SSLSocket,setEnabledProtocols(String[] protocols),abstract void,Sets the protocol versions enabled for use on this connection.
SSLSocket,setEnableSessionCreation(boolean flag),abstract void,Controls whether new SSL sessions may be established by this socket.
SSLSocket,"setHandshakeApplicationProtocolSelector(BiFunction<SSLSocket,List<String>,String> selector)",void,Registers a callback function that selects an application protocol value for a SSL/TLS/DTLS handshake.
SSLSocket,setNeedClientAuth(boolean need),abstract void,Configures the socket to require client authentication.
SSLSocket,setSSLParameters(SSLParameters params),void,Applies SSLParameters to this socket.
SSLSocket,setUseClientMode(boolean mode),abstract void,Configures the socket to use client (or server) mode when handshaking.
SSLSocket,setWantClientAuth(boolean want),abstract void,Configures the socket to request client authentication.
SSLSocket,startHandshake(),abstract void,Starts an SSL handshake on this connection.
SSLSocketFactory,"createSocket(Socket s, InputStream consumed, boolean autoClose)",Socket,"Creates a server mode Socket layered over an existing connected socket, and is able to read data which has already been consumed/removed from the Socket's underlying InputStream."
SSLSocketFactory,"createSocket(Socket s, String host, int port, boolean autoClose)",abstract Socket,"Returns a socket layered over an existing socket connected to the named host, at the given port."
SSLSocketFactory,getDefault(),static SocketFactory,Returns the default SSL socket factory.
SSLSocketFactory,getDefaultCipherSuites(),abstract String[],Returns the list of cipher suites which are enabled by default.
SSLSocketFactory,getSupportedCipherSuites(),abstract String[],Returns the names of the cipher suites which could be enabled for use on an SSL connection.
TrustManagerFactory,getAlgorithm(),String,Returns the algorithm name of this TrustManagerFactory object.
TrustManagerFactory,getDefaultAlgorithm(),static String,Obtains the default TrustManagerFactory algorithm name.
TrustManagerFactory,getInstance(String algorithm),static TrustManagerFactory,Returns a TrustManagerFactory object that acts as a factory for trust managers.
TrustManagerFactory,"getInstance(String algorithm, Provider provider)",static TrustManagerFactory,Returns a TrustManagerFactory object that acts as a factory for trust managers.
TrustManagerFactory,"getInstance(String algorithm, String provider)",static TrustManagerFactory,Returns a TrustManagerFactory object that acts as a factory for trust managers.
TrustManagerFactory,getProvider(),Provider,Returns the provider of this TrustManagerFactory object.
TrustManagerFactory,getTrustManagers(),TrustManager[],Returns one trust manager for each type of trust material.
TrustManagerFactory,init(KeyStore ks),void,Initializes this factory with a source of certificate authorities and related trust material.
TrustManagerFactory,init(ManagerFactoryParameters spec),void,Initializes this factory with a source of provider-specific trust material.
TrustManagerFactorySpi,engineGetTrustManagers(),protected abstract TrustManager[],Returns one trust manager for each type of trust material.
TrustManagerFactorySpi,engineInit(KeyStore ks),protected abstract void,Initializes this factory with a source of certificate authorities and related trust material.
TrustManagerFactorySpi,engineInit(ManagerFactoryParameters spec),protected abstract void,Initializes this factory with a source of provider-specific key material.
X509ExtendedKeyManager,"chooseEngineClientAlias(String[] keyType, Principal[] issuers, SSLEngine engine)",String,Choose an alias to authenticate the client side of an SSLEngine connection given the public key type and the list of certificate issuer authorities recognized by the peer (if any).
X509ExtendedKeyManager,"chooseEngineServerAlias(String keyType, Principal[] issuers, SSLEngine engine)",String,Choose an alias to authenticate the server side of an SSLEngine connection given the public key type and the list of certificate issuer authorities recognized by the peer (if any).
X509ExtendedTrustManager,"checkClientTrusted(X509Certificate[] chain, String authType, Socket socket)",abstract void,"Given the partial or complete certificate chain provided by the peer, build and validate the certificate path based on the authentication type and ssl parameters."
X509ExtendedTrustManager,"checkClientTrusted(X509Certificate[] chain, String authType, SSLEngine engine)",abstract void,"Given the partial or complete certificate chain provided by the peer, build and validate the certificate path based on the authentication type and ssl parameters."
X509ExtendedTrustManager,"checkServerTrusted(X509Certificate[] chain, String authType, Socket socket)",abstract void,"Given the partial or complete certificate chain provided by the peer, build and validate the certificate path based on the authentication type and ssl parameters."
X509ExtendedTrustManager,"checkServerTrusted(X509Certificate[] chain, String authType, SSLEngine engine)",abstract void,"Given the partial or complete certificate chain provided by the peer, build and validate the certificate path based on the authentication type and ssl parameters."
