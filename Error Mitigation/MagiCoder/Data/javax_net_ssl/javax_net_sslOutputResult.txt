Sample: HandshakeCompletedEvent_3
----------------------------------------------------------------
output:
./Data/javax_net_ssl/javaFiles/HandshakeCompletedEvent_3.java:7: error: constructor HandshakeCompletedEvent in class HandshakeCompletedEvent cannot be applied to given types;
        HandshakeCompletedEvent event = new HandshakeCompletedEvent(null, null, null);
                                        ^
  required: SSLSocket,SSLSession
  found:    <null>,<null>,<null>
  reason: actual and formal argument lists differ in length
1 error


================================================================

Sample: SNIHostName_3
----------------------------------------------------------------
stdout:
true
false

================================================================

Sample: SNIHostName_4
----------------------------------------------------------------
stdout:
Hash code: 209901772

================================================================

Sample: SNIHostName_5
----------------------------------------------------------------
stdout:
type=host_name (0), value=www.example.com

================================================================

Sample: SNIMatcher_1
----------------------------------------------------------------
output:
./Data/javax_net_ssl/javaFiles/SNIMatcher_1.java:8: error: SNIServerName is abstract; cannot be instantiated
        SNIServerName serverName = new SNIServerName(hostName);
                                   ^
./Data/javax_net_ssl/javaFiles/SNIMatcher_1.java:10: error: constructor SNIMatcher in class SNIMatcher cannot be applied to given types;
        SNIMatcher matcher = new SNIMatcher() {
                             ^
  required: int
  found:    no arguments
  reason: actual and formal argument lists differ in length
./Data/javax_net_ssl/javaFiles/SNIMatcher_1.java:13: error: cannot find symbol
                return this.serverName.equals(serverName);
                           ^
  symbol: variable serverName
3 errors


================================================================

Sample: SNIServerName_1
----------------------------------------------------------------
output:
./Data/javax_net_ssl/javaFiles/SNIServerName_1.java:5: error: SNIServerName is abstract; cannot be instantiated
        SNIServerName sniServerName1 = new SNIServerName("example.com");
                                       ^
./Data/javax_net_ssl/javaFiles/SNIServerName_1.java:6: error: SNIServerName is abstract; cannot be instantiated
        SNIServerName sniServerName2 = new SNIServerName("example.com");
                                       ^
./Data/javax_net_ssl/javaFiles/SNIServerName_1.java:7: error: SNIServerName is abstract; cannot be instantiated
        SNIServerName sniServerName3 = new SNIServerName("example.org");
                                       ^
3 errors


================================================================

Sample: SNIServerName_2
----------------------------------------------------------------
output:
./Data/javax_net_ssl/javaFiles/SNIServerName_2.java:6: error: SNIServerName is abstract; cannot be instantiated
        SNIServerName serverName = new SNIServerName("example.com");
                                   ^
1 error


================================================================

Sample: SNIServerName_5
----------------------------------------------------------------
output:
./Data/javax_net_ssl/javaFiles/SNIServerName_5.java:15: error: cannot find symbol
            List<SNIServerName> serverNames = event.getSSLSession().getPeerCertificates()[0].getSubjectAlternativeNames();
                                                   ^
  symbol:   method getSSLSession()
  location: variable event of type HandshakeCompletedEvent
1 error


================================================================

Sample: SSLContext_1
----------------------------------------------------------------
output:
./Data/javax_net_ssl/javaFiles/SSLContext_1.java:2: error: cannot find symbol
import javax.net.ssl.NoSuchAlgorithmException;
                    ^
  symbol:   class NoSuchAlgorithmException
  location: package javax.net.ssl
./Data/javax_net_ssl/javaFiles/SSLContext_1.java:9: error: cannot find symbol
        } catch (NoSuchAlgorithmException e) {
                 ^
  symbol:   class NoSuchAlgorithmException
  location: class SSLContext_1
2 errors


================================================================

Sample: SSLContext_2
----------------------------------------------------------------
output:
./Data/javax_net_ssl/javaFiles/SSLContext_2.java:2: error: cannot find symbol
import javax.net.ssl.NoSuchAlgorithmException;
                    ^
  symbol:   class NoSuchAlgorithmException
  location: package javax.net.ssl
./Data/javax_net_ssl/javaFiles/SSLContext_2.java:3: error: cannot find symbol
import javax.net.ssl.NoSuchProviderException;
                    ^
  symbol:   class NoSuchProviderException
  location: package javax.net.ssl
./Data/javax_net_ssl/javaFiles/SSLContext_2.java:10: error: cannot find symbol
        } catch (NoSuchAlgorithmException | NoSuchProviderException e) {
                 ^
  symbol:   class NoSuchAlgorithmException
  location: class SSLContext_2
./Data/javax_net_ssl/javaFiles/SSLContext_2.java:10: error: cannot find symbol
        } catch (NoSuchAlgorithmException | NoSuchProviderException e) {
                                            ^
  symbol:   class NoSuchProviderException
  location: class SSLContext_2
./Data/javax_net_ssl/javaFiles/SSLContext_2.java:11: error: <null> cannot be dereferenced
            e.printStackTrace();
             ^
5 errors


================================================================

Sample: SSLContext_3
----------------------------------------------------------------
output:
./Data/javax_net_ssl/javaFiles/SSLContext_3.java:9: error: Provider is abstract; cannot be instantiated
            Provider provider = new Provider("MyProvider", 1.0, "My Provider");
                                ^
1 error


================================================================

Sample: TrustManagerFactory_1
----------------------------------------------------------------
stdout:
javax.net.ssl.TrustManagerFactory@6cc7b4de

================================================================

Sample: TrustManagerFactory_2
----------------------------------------------------------------
stdout:
javax.net.ssl.TrustManagerFactory@4df828d7

================================================================

Sample: TrustManagerFactory_3
----------------------------------------------------------------
output:
./Data/javax_net_ssl/javaFiles/TrustManagerFactory_3.java:8: error: Provider is abstract; cannot be instantiated
            Provider provider = new Provider("SunJSSE", 1.0, "Sun JSSE Provider");
                                ^
1 error


================================================================

Sample: TrustManagerFactory_5
----------------------------------------------------------------
stdout:
Provider: SunJSSE

================================================================

Sample: X509ExtendedTrustManager_4
----------------------------------------------------------------
output:
./Data/javax_net_ssl/javaFiles/X509ExtendedTrustManager_4.java:8: error: <anonymous X509ExtendedTrustManager_4$1> is not abstract and does not override abstract method checkServerTrusted(X509Certificate[],String,SSLEngine) in X509ExtendedTrustManager
        X509ExtendedTrustManager trustManager = new X509ExtendedTrustManager() {
                                                                               ^
1 error


================================================================

