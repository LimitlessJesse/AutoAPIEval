Sample: 0 AsynchronousChannelGroup
----------------------------------------------------------------

@@ Context
Here is the description of the package Defines channels, which represent connections to entities that are capable of performing I/O operations, such as files and sockets; defines selectors, for multiplexed, non-blocking I/O operations.
Here is the description of the class A grouping of asynchronous channels for the purpose of resource sharing.

@@ Instruction
I want to use java.nio.channels.AsynchronousChannelGroup package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `AsynchronousChannelGroup newInstance(int nThreads, ThreadFactory threadFactory, ExecutorService executor)`: This method creates a new asynchronous channel group with the specified number of threads and executor service.

2. `AsynchronousChannelGroup newInstance(ExecutorService executor, AsynchronousChannelGroup parent)`: This method creates a new asynchronous channel group with the specified executor service and parent group.

3. `AsynchronousChannelGroup newInstance(ExecutorService executor)`: This method creates a new asynchronous channel group with the specified executor service.

4. `AsynchronousChannelGroup newInstance()`: This method creates a new asynchronous channel group with the default number of threads and executor service.

5. `AsynchronousChannelGroup open()`: This method opens an existing asynchronous channel group.
================================================================

Sample: 1 AsynchronousFileChannel
----------------------------------------------------------------

@@ Context
Here is the description of the package Defines channels, which represent connections to entities that are capable of performing I/O operations, such as files and sockets; defines selectors, for multiplexed, non-blocking I/O operations.
Here is the description of the class An asynchronous channel for reading, writing, and manipulating a file.

@@ Instruction
I want to use java.nio.channels.AsynchronousFileChannel package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `int read(ByteBuffer dst, long position)`: This method reads bytes from this channel's file into the given buffer.
2. `Future<Integer> read(ByteBuffer dst, long position, Executor executor)`: This method is similar to the previous method, but it uses the given executor to execute the I/O operations.
3. `int write(ByteBuffer src, long position)`: This method writes bytes from the given buffer into this channel's file.
4. `Future<Integer> write(ByteBuffer src, long position, Executor executor)`: This method is similar to the previous method, but it uses the given executor to execute the I/O operations.
5. `long size()`: This method returns the size of the file represented by this channel.
================================================================

Sample: 2 AsynchronousServerSocketChannel
----------------------------------------------------------------

@@ Context
Here is the description of the package Defines channels, which represent connections to entities that are capable of performing I/O operations, such as files and sockets; defines selectors, for multiplexed, non-blocking I/O operations.
Here is the description of the class An asynchronous channel for stream-oriented listening sockets.

@@ Instruction
I want to use java.nio.channels.AsynchronousServerSocketChannel package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `AsynchronousServerSocketChannel open()`: This method opens a new asynchronous server socket channel.
2. `AsynchronousServerSocketChannel bind(SocketAddress localAddress)`: This method binds this channel's socket to a local address.
3. `AsynchronousServerSocketChannel accept(CompletionHandler<AsynchronousSocketChannel,? super A attachment> handler)`: This method accepts a connection made to this channel's socket.
4. `AsynchronousServerSocketChannel accept(CompletionHandler<AsynchronousSocketChannel,? super A attachment> handler, A attachment)`: This method accepts a connection made to this channel's socket.
5. `AsynchronousServerSocketChannel accept(Executor executor, CompletionHandler<AsynchronousSocketChannel,? super A attachment> handler)`: This method accepts a connection made to this channel's socket.
================================================================

Sample: 3 AsynchronousSocketChannel
----------------------------------------------------------------

@@ Context
Here is the description of the package Defines channels, which represent connections to entities that are capable of performing I/O operations, such as files and sockets; defines selectors, for multiplexed, non-blocking I/O operations.
Here is the description of the class An asynchronous channel for stream-oriented connecting sockets.

@@ Instruction
I want to use java.nio.channels.AsynchronousSocketChannel package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `AsynchronousSocketChannel open()`: This method opens a new asynchronous socket channel.
2. `AsynchronousSocketChannel bind(SocketAddress local)`: This method binds this channel's socket to a local address.
3. `AsynchronousSocketChannel connect(SocketAddress remote)`: This method initiates a connection to a remote address.
4. `AsynchronousSocketChannel finishConnect()`: This method completes the connection process.
5. `AsynchronousSocketChannel read(ByteBuffer dst, A attachment, CompletionHandler<Integer,? super A> handler)`: This method initiates a read operation on this channel's socket.
6. `AsynchronousSocketChannel write(ByteBuffer src, A attachment, CompletionHandler<Integer,? super A> handler)`: This method initiates a write operation on this channel's socket.
7. `AsynchronousSocketChannel close()`: This method closes this channel.
8. `AsynchronousSocketChannel isOpen()`: This method returns true if, and only if, this channel is open.
9. `AsynchronousSocketChannel getLocalAddress()`: This method returns the local address of this channel's socket.
10. `AsynchronousSocketChannel getRemoteAddress()`: This method returns the remote address of this channel's socket.
11. `AsynchronousSocketChannel setOption(SocketOption<T> name, T value)`: This method sets the socket option to the given value.
12. `AsynchronousSocketChannel getOption(SocketOption<T> name)`: This method gets the value of the socket option.
13. `AsynchronousSocketChannel supportedOptions()`: This method returns a set of the socket options supported by this channel.
14. `AsynchronousSocketChannel bind(SocketAddress local, A attachment, CompletionHandler<Void,? super A> handler)`: This method initiates a bind operation on this channel's socket.
15. `AsynchronousSocketChannel connect(SocketAddress remote, A attachment, CompletionHandler<Void,? super A> handler)`: This method initiates a connection operation on this channel's socket.
16. `AsynchronousSocketChannel finishConnect(A attachment, CompletionHandler<Void,? super A> handler)`: This method completes the connection process.
17. `AsynchronousSocketChannel read(ByteBuffer dst, A attachment, Long timeout, TimeUnit unit, CompletionHandler<Integer,? super A> handler)`: This method initiates a read operation on this channel's socket.
18. `AsynchronousSocketChannel write(ByteBuffer src, A attachment, Long timeout, TimeUnit unit, CompletionHandler<Integer,? super A> handler)`: This method initiates a write operation on this channel's socket.
19. `AsynchronousSocketChannel close(A attachment, CompletionHandler<Void,? super A> handler)`: This method initiates a close operation on this channel.
20. `AsynchronousSocketChannel isOpen(A attachment, CompletionHandler<Boolean,? super A> handler)`: This method initiates a check if the channel is open operation.
21. `AsynchronousSocketChannel getLocalAddress(A attachment, CompletionHandler<SocketAddress,? super A> handler)`: This method initiates a get local address operation.
22. `AsynchronousSocketChannel getRemoteAddress(A attachment, CompletionHandler<SocketAddress,? super A> handler)`: This method initiates a get remote address operation.
23. `AsynchronousSocketChannel setOption(SocketOption<T> name, T value, A attachment, CompletionHandler<Void,? super A> handler)`: This method initiates a set option operation.
24. `AsynchronousSocketChannel getOption(SocketOption<T> name, A attachment, CompletionHandler<T,? super A> handler)`: This method initiates a get option operation.
25. `AsynchronousSocketChannel supportedOptions(A attachment, CompletionHandler<Set<SocketOption<?>>,? super A> handler)`: This method initiates a get supported options operation.
================================================================

Sample: 4 Channels
----------------------------------------------------------------

@@ Context
Here is the description of the package Defines channels, which represent connections to entities that are capable of performing I/O operations, such as files and sockets; defines selectors, for multiplexed, non-blocking I/O operations.
Here is the description of the class Utility methods for channels and streams.

@@ Instruction
I want to use java.nio.channels.Channels package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `FileChannel getChannel()`: This method returns a FileChannel object that is bound to this file.

2. `SocketChannel socket()`: This method returns a new socket channel.

3. `ServerSocketChannel serverSocket()`: This method returns a new server socket channel.

4. `DatagramChannel datagram()`: This method returns a new datagram channel.

5. `AsynchronousFileChannel asyncFileChannel()`: This method returns a new asynchronous file channel.
================================================================

Sample: 5 DatagramChannel
----------------------------------------------------------------

@@ Context
Here is the description of the package Defines channels, which represent connections to entities that are capable of performing I/O operations, such as files and sockets; defines selectors, for multiplexed, non-blocking I/O operations.
Here is the description of the class A selectable channel for datagram-oriented sockets.

@@ Instruction
I want to use java.nio.channels.DatagramChannel package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public DatagramChannel open()`: This method opens a new datagram channel.
2. `public DatagramChannel bind(SocketAddress local)`: This method binds the channel's socket to a local address.
3. `public int read(ByteBuffer dst)`: This method reads a sequence of bytes from this channel into the given buffer.
4. `public int write(ByteBuffer src)`: This method writes a sequence of bytes to this channel from the given buffer.
5. `public long read(ByteBuffer[] dsts, int offset, int length)`: This method reads bytes from this channel into the given buffers.
6. `public long write(ByteBuffer[] srcs, int offset, int length)`: This method writes bytes to this channel from the given buffers.
7. `public SocketAddress receive(ByteBuffer dst)`: This method receives a datagram packet and stores it in the given buffer.
8. `public SocketAddress send(ByteBuffer src, SocketAddress target)`: This method sends a datagram packet from the given buffer to the specified target address.
9. `public long read(ByteBuffer dst, SocketAddress target)`: This method reads a datagram packet from this channel and stores it in the given buffer.
10. `public long write(ByteBuffer src, SocketAddress target)`: This method writes a datagram packet to this channel from the given buffer.
11. `public void close()`: This method closes this channel.
12. `public boolean isOpen()`: This method returns true if, and only if, this channel is open.
13. `public SelectableChannel configureBlocking(boolean block)`: This method configures this channel to be in blocking or non-blocking mode.
14. `public SelectorProvider provider()`: This method returns the provider of this channel.
15. `public SelectionKey register(Selector sel, int ops, Object att)`: This method registers this channel with the given selector.
16. `public SelectionKey register(Selector sel, int ops)`: This method registers this channel with the given selector.
17. `public SelectionKey keyFor(Selector sel)`: This method returns the key for this channel that is registered on the given selector.
18. `public void close(Selector sel)`: This method closes this channel and removes it from the given selector.
19. `public void close(Selector sel, SelectorKey key)`: This method closes this channel and removes it from the given selector.
20. `public void close(Selector sel, SelectorKey key, Object att)`: This method closes this channel and removes it from the given selector.
21. `public void close(Selector sel, SelectorKey key, Object att, boolean cancel)`: This method closes this channel and removes it from the given selector.
22. `public void close(Selector sel, SelectorKey key, Object att, boolean cancel, boolean wakeup)`: This method closes this channel and removes it from the given selector.
23. `public void close(Selector sel, SelectorKey key, Object att, boolean cancel, boolean wakeup, boolean interrupt)`: This method closes this channel and removes it from the given selector.
24. `public void close(Selector sel, SelectorKey key, Object att, boolean cancel, boolean wakeup, boolean interrupt, boolean nowait)`: This method closes this channel and removes it from the given selector.
25. `public void close(Selector sel, SelectorKey key, Object att, boolean cancel, boolean wakeup, boolean interrupt, boolean nowait, boolean notify)`: This method closes this channel and removes it from the given selector.
================================================================

Sample: 6 FileChannel
----------------------------------------------------------------

@@ Context
Here is the description of the package Defines channels, which represent connections to entities that are capable of performing I/O operations, such as files and sockets; defines selectors, for multiplexed, non-blocking I/O operations.
Here is the description of the class A channel for reading, writing, mapping, and manipulating a file.

@@ Instruction
I want to use java.nio.channels.FileChannel package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `FileChannel.open(Path path, OpenOption... options)`: This method opens a new file channel.
2. `FileChannel.position()`: This method returns the current position of this channel's file pointer.
3. `FileChannel.size()`: This method returns the size of this channel's file.
4. `FileChannel.read(ByteBuffer dst)`: This method reads bytes from this channel into the given buffer.
5. `FileChannel.write(ByteBuffer src)`: This method writes bytes from the given buffer into this channel.
================================================================

Sample: 7 FileChannel.MapMode
----------------------------------------------------------------

@@ Context
Here is the description of the package Defines channels, which represent connections to entities that are capable of performing I/O operations, such as files and sockets; defines selectors, for multiplexed, non-blocking I/O operations.
Here is the description of the class A typesafe enumeration for file-mapping modes.

@@ Instruction
I want to use java.nio.channels.FileChannel.MapMode package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `FileChannel.MapMode.READ_ONLY`: This method returns a read-only map of the file's contents.
2. `FileChannel.MapMode.READ_WRITE`: This method returns a read-write map of the file's contents.
3. `FileChannel.MapMode.PRIVATE`: This method returns a private map of the file's contents.
4. `FileChannel.MapMode.COPY_ON_WRITE`: This method returns a copy-on-write map of the file's contents.
5. `FileChannel.MapMode.DIRECT`: This method returns a direct map of the file's contents.
================================================================

Sample: 8 FileLock
----------------------------------------------------------------

@@ Context
Here is the description of the package Defines channels, which represent connections to entities that are capable of performing I/O operations, such as files and sockets; defines selectors, for multiplexed, non-blocking I/O operations.
Here is the description of the class A token representing a lock on a region of a file.

@@ Instruction
I want to use java.nio.channels.FileLock package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `FileChannel.lock(long position, long size, boolean shared)`: This method attempts to establish a lock on the specified portion of this channel's file.

2. `FileLock tryLock(long position, long size, boolean shared)`: This method attempts to establish a lock on the specified portion of this channel's file.

3. `FileLock tryLock(long position, long size, boolean shared, long timeout, TimeUnit unit)`: This method attempts to establish a lock on the specified portion of this channel's file.

4. `FileLock tryLock()`: This method attempts to establish a lock on the entire file.

5. `FileLock tryLock(long timeout, TimeUnit unit)`: This method attempts to establish a lock on the entire file.
================================================================

Sample: 9 MembershipKey
----------------------------------------------------------------

@@ Context
Here is the description of the package Defines channels, which represent connections to entities that are capable of performing I/O operations, such as files and sockets; defines selectors, for multiplexed, non-blocking I/O operations.
Here is the description of the class A token representing the membership of an Internet Protocol (IP) multicast group.

@@ Instruction
I want to use java.nio.channels.MembershipKey package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `MembershipKey join(MulticastChannel channel)`: This method is used to join a multicast group.
2. `boolean isValid()`: This method is used to check if the membership key is valid.
3. `void drop()`: This method is used to drop the membership key.
4. `MulticastChannel channel()`: This method is used to get the MulticastChannel associated with this membership key.
5. `InetAddress group()`: This method is used to get the group address associated with this membership key.
================================================================

Sample: 10 Pipe
----------------------------------------------------------------

@@ Context
Here is the description of the package Defines channels, which represent connections to entities that are capable of performing I/O operations, such as files and sockets; defines selectors, for multiplexed, non-blocking I/O operations.
Here is the description of the class A pair of channels that implements a unidirectional pipe.

@@ Instruction
I want to use java.nio.channels.Pipe package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `Pipe.SourceChannel source()`: This method returns the source channel of this pipe.
2. `Pipe.SinkChannel sink()`: This method returns the sink channel of this pipe.
3. `void close()`: This method closes this channel.
4. `boolean isOpen()`: This method returns true if, and only if, this channel is open.
5. `Set<SelectionKey> keys()`: This method returns a set of the selection keys associated with this channel's selector.
================================================================

Sample: 11 Pipe.SinkChannel
----------------------------------------------------------------

@@ Context
Here is the description of the package Defines channels, which represent connections to entities that are capable of performing I/O operations, such as files and sockets; defines selectors, for multiplexed, non-blocking I/O operations.
Here is the description of the class A channel representing the writable end of a Pipe.

@@ Instruction
I want to use java.nio.channels.Pipe.SinkChannel package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `Pipe.SinkChannel open()`: This method opens a new channel for writing to the pipe.
2. `void write(ByteBuffer src)`: This method writes a sequence of bytes to the pipe.
3. `int read(ByteBuffer dst)`: This method reads a sequence of bytes from the pipe.
4. `void close()`: This method closes the channel.
5. `boolean isOpen()`: This method returns true if, and only if, this channel is open.
================================================================

Sample: 12 Pipe.SourceChannel
----------------------------------------------------------------

@@ Context
Here is the description of the package Defines channels, which represent connections to entities that are capable of performing I/O operations, such as files and sockets; defines selectors, for multiplexed, non-blocking I/O operations.
Here is the description of the class A channel representing the readable end of a Pipe.

@@ Instruction
I want to use java.nio.channels.Pipe.SourceChannel package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `Pipe.SourceChannel.open()`: This method opens a new pipe source channel.
2. `Pipe.SourceChannel.read(ByteBuffer dst)`: This method attempts to read bytes from this channel into the given buffer.
3. `Pipe.SourceChannel.read(ByteBuffer[] dsts)`: This method attempts to read bytes from this channel into the given buffers.
4. `Pipe.SourceChannel.read(ByteBuffer dst, long position)`: This method attempts to read bytes from this channel into the given buffer at the given position.
5. `Pipe.SourceChannel.read(ByteBuffer[] dsts, int offset, int length)`: This method attempts to read bytes from this channel into the given buffers at the given offset and length.
================================================================

Sample: 13 SelectableChannel
----------------------------------------------------------------

@@ Context
Here is the description of the package Defines channels, which represent connections to entities that are capable of performing I/O operations, such as files and sockets; defines selectors, for multiplexed, non-blocking I/O operations.
Here is the description of the class A channel that can be multiplexed via a Selector.

@@ Instruction
I want to use java.nio.channels.SelectableChannel package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `SocketChannel`: `SocketChannel` is a channel that can be used for reading and writing data over a network.

2. `ServerSocketChannel`: `ServerSocketChannel` is a channel that can be used to accept incoming connection attempts.

3. `DatagramChannel`: `DatagramChannel` is a channel that can be used for reading and writing datagram packets over a network.

4. `AsynchronousChannel`: `AsynchronousChannel` is a channel that can be used for asynchronous I/O operations.

5. `Pipe.SinkChannel`: `Pipe.SinkChannel` is a channel that can be used to write data to a pipe.

6. `Pipe.SourceChannel`: `Pipe.SourceChannel` is a channel that can be used to read data from a pipe.

7. `FileChannel`: `FileChannel` is a channel that can be used for reading and writing data from a file.

8. `AsynchronousFileChannel`: `AsynchronousFileChannel` is a channel that can be used for asynchronous I/O operations on a file.

9. `Selector`: `Selector` is a class that can be used to monitor multiple `SelectableChannel` objects for I/O events.

10. `SelectionKey`: `SelectionKey` is an object that represents the registration of a `SelectableChannel` with a `Selector`.
================================================================

Sample: 14 SelectionKey
----------------------------------------------------------------

@@ Context
Here is the description of the package Defines channels, which represent connections to entities that are capable of performing I/O operations, such as files and sockets; defines selectors, for multiplexed, non-blocking I/O operations.
Here is the description of the class A token representing the registration of a SelectableChannel with a Selector.

@@ Instruction
I want to use java.nio.channels.SelectionKey package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `public int interestOps()`: Returns the operations that are currently enabled for this key.
2. `public SelectionKey interestOps(int ops)`: Sets the operations that are currently enabled for this key.
3. `public SelectableChannel channel()`: Returns the channel that this key is registered with.
4. `public Selector selector()`: Returns the selector that this key is registered with.
5. `public boolean isValid()`: Returns true if this key's channel is still open.
================================================================

Sample: 15 Selector
----------------------------------------------------------------

@@ Context
Here is the description of the package Defines channels, which represent connections to entities that are capable of performing I/O operations, such as files and sockets; defines selectors, for multiplexed, non-blocking I/O operations.
Here is the description of the class A multiplexor of SelectableChannel objects.

@@ Instruction
I want to use java.nio.channels.Selector package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `Selector.open()`: This method opens a new selector.
2. `Selector.select()`: This method waits for one or more of the registered channels to be ready for I/O operations.
3. `Selector.selectNow()`: This method is similar to the select() method, but it does not block.
4. `Selector.wakeup()`: This method wakes up a selector that is in blocking mode.
5. `Selector.select(long timeout)`: This method waits for one or more of the registered channels to be ready for I/O operations, or until the specified timeout expires.
================================================================

Sample: 16 ServerSocketChannel
----------------------------------------------------------------

@@ Context
Here is the description of the package Defines channels, which represent connections to entities that are capable of performing I/O operations, such as files and sockets; defines selectors, for multiplexed, non-blocking I/O operations.
Here is the description of the class A selectable channel for stream-oriented listening sockets.

@@ Instruction
I want to use java.nio.channels.ServerSocketChannel package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `ServerSocketChannel open()`: This method opens a new server-socket channel.
2. `ServerSocketChannel bind(SocketAddress local)`: This method binds this channel's socket to a local address.
3. `ServerSocketChannel accept()`: This method accepts a connection made to this channel's socket.
4. `SelectionKey register(Selector sel, int ops, Object att)`: This method registers this channel with the given selector.
5. `SelectionKey register(Selector sel, int ops)`: This method registers this channel with the given selector.
================================================================

Sample: 17 SocketChannel
----------------------------------------------------------------

@@ Context
Here is the description of the package Defines channels, which represent connections to entities that are capable of performing I/O operations, such as files and sockets; defines selectors, for multiplexed, non-blocking I/O operations.
Here is the description of the class A selectable channel for stream-oriented connecting sockets.

@@ Instruction
I want to use java.nio.channels.SocketChannel package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `SocketChannel socketChannel = SocketChannel.open()`: This method opens a new socket channel.

2. `SocketChannel socketChannel = SocketChannel.open(address)`: This method opens a new socket channel connected to the specified remote address.

3. `int read(ByteBuffer dst)`: This method attempts to read bytes from this channel into the given buffer.

4. `int write(ByteBuffer src)`: This method attempts to write bytes from the given buffer into this channel.

5. `void close()`: This method closes this channel.
================================================================

