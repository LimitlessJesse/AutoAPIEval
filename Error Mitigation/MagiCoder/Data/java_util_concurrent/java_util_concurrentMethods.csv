ClassName,Method,Return Type,Description
AbstractExecutorService,invokeAll(Collection<? extends Callable<T>> tasks),<T> List<Future<T>>,"Executes the given tasks, returning a list of Futures holding their status and results when all complete."
AbstractExecutorService,"invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)",<T> List<Future<T>>,"Executes the given tasks, returning a list of Futures holding their status and results when all complete or the timeout expires, whichever happens first."
AbstractExecutorService,invokeAny(Collection<? extends Callable<T>> tasks),<T> T,"Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do."
AbstractExecutorService,"invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)",<T> T,"Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do before the given timeout elapses."
AbstractExecutorService,newTaskFor(Callable<T> callable),protected <T> RunnableFuture<T>,Returns a RunnableFuture for the given callable task.
AbstractExecutorService,"newTaskFor(Runnable runnable, T value)",protected <T> RunnableFuture<T>,Returns a RunnableFuture for the given runnable and default value.
AbstractExecutorService,submit(Callable<T> task),<T> Future<T>,Submits a value-returning task for execution and returns a Future representing the pending results of the task.
AbstractExecutorService,submit(Runnable task),Future<?>,Submits a Runnable task for execution and returns a Future representing that task.
AbstractExecutorService,"submit(Runnable task, T result)",<T> Future<T>,Submits a Runnable task for execution and returns a Future representing that task.
ArrayBlockingQueue,add(E e),boolean,"Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning true upon success and throwing an IllegalStateException if this queue is full."
ArrayBlockingQueue,clear(),void,Atomically removes all of the elements from this queue.
ArrayBlockingQueue,contains(Object o),boolean,Returns true if this queue contains the specified element.
ArrayBlockingQueue,drainTo(Collection<? super E> c),int,Removes all available elements from this queue and adds them to the given collection.
ArrayBlockingQueue,"drainTo(Collection<? super E> c, int maxElements)",int,Removes at most the given number of available elements from this queue and adds them to the given collection.
ArrayBlockingQueue,iterator(),Iterator<E>,Returns an iterator over the elements in this queue in proper sequence.
ArrayBlockingQueue,offer(E e),boolean,"Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning true upon success and false if this queue is full."
ArrayBlockingQueue,"offer(E e, long timeout, TimeUnit unit)",boolean,"Inserts the specified element at the tail of this queue, waiting up to the specified wait time for space to become available if the queue is full."
ArrayBlockingQueue,peek(),E,"Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty."
ArrayBlockingQueue,poll(),E,"Retrieves and removes the head of this queue, or returns null if this queue is empty."
ArrayBlockingQueue,"poll(long timeout, TimeUnit unit)",E,"Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available."
ArrayBlockingQueue,put(E e),void,"Inserts the specified element at the tail of this queue, waiting for space to become available if the queue is full."
ArrayBlockingQueue,remainingCapacity(),int,Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking.
ArrayBlockingQueue,remove(Object o),boolean,"Removes a single instance of the specified element from this queue, if it is present."
ArrayBlockingQueue,size(),int,Returns the number of elements in this queue.
ArrayBlockingQueue,spliterator(),Spliterator<E>,Returns a Spliterator over the elements in this queue.
ArrayBlockingQueue,take(),E,"Retrieves and removes the head of this queue, waiting if necessary until an element becomes available."
ArrayBlockingQueue,toArray(),Object[],"Returns an array containing all of the elements in this queue, in proper sequence."
ArrayBlockingQueue,toArray(T[] a),<T> T[],"Returns an array containing all of the elements in this queue, in proper sequence; the runtime type of the returned array is that of the specified array."
ArrayBlockingQueue,toString(),String,Returns a string representation of this collection.
CompletableFuture,"acceptEither(CompletionStage<? extends T> other, Consumer<? super T> action)",CompletableFuture<Void>,"Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed with the corresponding result as argument to the supplied action."
CompletableFuture,"acceptEitherAsync(CompletionStage<? extends T> other, Consumer<? super T> action)",CompletableFuture<Void>,"Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed using this stage's default asynchronous execution facility, with the corresponding result as argument to the supplied action."
CompletableFuture,"acceptEitherAsync(CompletionStage<? extends T> other, Consumer<? super T> action, Executor executor)",CompletableFuture<Void>,"Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed using the supplied executor, with the corresponding result as argument to the supplied function."
CompletableFuture,allOf(CompletableFuture<?>... cfs),static CompletableFuture<Void>,Returns a new CompletableFuture that is completed when all of the given CompletableFutures complete.
CompletableFuture,anyOf(CompletableFuture<?>... cfs),static CompletableFuture<Object>,"Returns a new CompletableFuture that is completed when any of the given CompletableFutures complete, with the same result."
CompletableFuture,"applyToEither(CompletionStage<? extends T> other, Function<? super T,U> fn)",<U> CompletableFuture<U>,"Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed with the corresponding result as argument to the supplied function."
CompletableFuture,"applyToEitherAsync(CompletionStage<? extends T> other, Function<? super T,U> fn)",<U> CompletableFuture<U>,"Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed using this stage's default asynchronous execution facility, with the corresponding result as argument to the supplied function."
CompletableFuture,"applyToEitherAsync(CompletionStage<? extends T> other, Function<? super T,U> fn, Executor executor)",<U> CompletableFuture<U>,"Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed using the supplied executor, with the corresponding result as argument to the supplied function."
CompletableFuture,cancel(boolean mayInterruptIfRunning),boolean,"If not already completed, completes this CompletableFuture with a CancellationException."
CompletableFuture,complete(T value),boolean,"If not already completed, sets the value returned by get() and related methods to the given value."
CompletableFuture,completedFuture(U value),static <U> CompletableFuture<U>,Returns a new CompletableFuture that is already completed with the given value.
CompletableFuture,completeExceptionally(Throwable ex),boolean,"If not already completed, causes invocations of get() and related methods to throw the given exception."
CompletableFuture,"exceptionally(Function<Throwable,? extends T> fn)",CompletableFuture<T>,"Returns a new CompletableFuture that is completed when this CompletableFuture completes, with the result of the given function of the exception triggering this CompletableFuture's completion when it completes exceptionally; otherwise, if this CompletableFuture completes normally, then the returned CompletableFuture also completes normally with the same value."
CompletableFuture,get(),T,"Waits if necessary for this future to complete, and then returns its result."
CompletableFuture,"get(long timeout, TimeUnit unit)",T,"Waits if necessary for at most the given time for this future to complete, and then returns its result, if available."
CompletableFuture,getNow(T valueIfAbsent),T,"Returns the result value (or throws any encountered exception) if completed, else returns the given valueIfAbsent."
CompletableFuture,getNumberOfDependents(),int,Returns the estimated number of CompletableFutures whose completions are awaiting completion of this CompletableFuture.
CompletableFuture,"handle(BiFunction<? super T,Throwable,? extends U> fn)",<U> CompletableFuture<U>,"Returns a new CompletionStage that, when this stage completes either normally or exceptionally, is executed with this stage's result and exception as arguments to the supplied function."
CompletableFuture,"handleAsync(BiFunction<? super T,Throwable,? extends U> fn)",<U> CompletableFuture<U>,"Returns a new CompletionStage that, when this stage completes either normally or exceptionally, is executed using this stage's default asynchronous execution facility, with this stage's result and exception as arguments to the supplied function."
CompletableFuture,"handleAsync(BiFunction<? super T,Throwable,? extends U> fn, Executor executor)",<U> CompletableFuture<U>,"Returns a new CompletionStage that, when this stage completes either normally or exceptionally, is executed using the supplied executor, with this stage's result and exception as arguments to the supplied function."
CompletableFuture,isCancelled(),boolean,Returns true if this CompletableFuture was cancelled before it completed normally.
CompletableFuture,isCompletedExceptionally(),boolean,"Returns true if this CompletableFuture completed exceptionally, in any way."
CompletableFuture,isDone(),boolean,"Returns true if completed in any fashion: normally, exceptionally, or via cancellation."
CompletableFuture,join(),T,"Returns the result value when complete, or throws an (unchecked) exception if completed exceptionally."
CompletableFuture,obtrudeException(Throwable ex),void,"Forcibly causes subsequent invocations of method get() and related methods to throw the given exception, whether or not already completed."
CompletableFuture,obtrudeValue(T value),void,"Forcibly sets or resets the value subsequently returned by method get() and related methods, whether or not already completed."
CompletableFuture,"runAfterBoth(CompletionStage<?> other, Runnable action)",CompletableFuture<Void>,"Returns a new CompletionStage that, when this and the other given stage both complete normally, executes the given action."
CompletableFuture,"runAfterBothAsync(CompletionStage<?> other, Runnable action)",CompletableFuture<Void>,"Returns a new CompletionStage that, when this and the other given stage complete normally, executes the given action using this stage's default asynchronous execution facility."
CompletableFuture,"runAfterBothAsync(CompletionStage<?> other, Runnable action, Executor executor)",CompletableFuture<Void>,"Returns a new CompletionStage that, when this and the other given stage complete normally, executes the given action using the supplied executor."
CompletableFuture,"runAfterEither(CompletionStage<?> other, Runnable action)",CompletableFuture<Void>,"Returns a new CompletionStage that, when either this or the other given stage complete normally, executes the given action."
CompletableFuture,"runAfterEitherAsync(CompletionStage<?> other, Runnable action)",CompletableFuture<Void>,"Returns a new CompletionStage that, when either this or the other given stage complete normally, executes the given action using this stage's default asynchronous execution facility."
CompletableFuture,"runAfterEitherAsync(CompletionStage<?> other, Runnable action, Executor executor)",CompletableFuture<Void>,"Returns a new CompletionStage that, when either this or the other given stage complete normally, executes the given action using the supplied executor."
CompletableFuture,runAsync(Runnable runnable),static CompletableFuture<Void>,Returns a new CompletableFuture that is asynchronously completed by a task running in the ForkJoinPool.commonPool() after it runs the given action.
CompletableFuture,"runAsync(Runnable runnable, Executor executor)",static CompletableFuture<Void>,Returns a new CompletableFuture that is asynchronously completed by a task running in the given executor after it runs the given action.
CompletableFuture,supplyAsync(Supplier<U> supplier),static <U> CompletableFuture<U>,Returns a new CompletableFuture that is asynchronously completed by a task running in the ForkJoinPool.commonPool() with the value obtained by calling the given Supplier.
CompletableFuture,"supplyAsync(Supplier<U> supplier, Executor executor)",static <U> CompletableFuture<U>,Returns a new CompletableFuture that is asynchronously completed by a task running in the given executor with the value obtained by calling the given Supplier.
CompletableFuture,thenAccept(Consumer<? super T> action),CompletableFuture<Void>,"Returns a new CompletionStage that, when this stage completes normally, is executed with this stage's result as the argument to the supplied action."
CompletableFuture,thenAcceptAsync(Consumer<? super T> action),CompletableFuture<Void>,"Returns a new CompletionStage that, when this stage completes normally, is executed using this stage's default asynchronous execution facility, with this stage's result as the argument to the supplied action."
CompletableFuture,"thenAcceptAsync(Consumer<? super T> action, Executor executor)",CompletableFuture<Void>,"Returns a new CompletionStage that, when this stage completes normally, is executed using the supplied Executor, with this stage's result as the argument to the supplied action."
CompletableFuture,"thenAcceptBoth(CompletionStage<? extends U> other, BiConsumer<? super T,? super U> action)",<U> CompletableFuture<Void>,"Returns a new CompletionStage that, when this and the other given stage both complete normally, is executed with the two results as arguments to the supplied action."
CompletableFuture,"thenAcceptBothAsync(CompletionStage<? extends U> other, BiConsumer<? super T,? super U> action)",<U> CompletableFuture<Void>,"Returns a new CompletionStage that, when this and the other given stage complete normally, is executed using this stage's default asynchronous execution facility, with the two results as arguments to the supplied action."
CompletableFuture,"thenAcceptBothAsync(CompletionStage<? extends U> other, BiConsumer<? super T,? super U> action, Executor executor)",<U> CompletableFuture<Void>,"Returns a new CompletionStage that, when this and the other given stage complete normally, is executed using the supplied executor, with the two results as arguments to the supplied function."
CompletableFuture,"thenApply(Function<? super T,? extends U> fn)",<U> CompletableFuture<U>,"Returns a new CompletionStage that, when this stage completes normally, is executed with this stage's result as the argument to the supplied function."
CompletableFuture,"thenApplyAsync(Function<? super T,? extends U> fn)",<U> CompletableFuture<U>,"Returns a new CompletionStage that, when this stage completes normally, is executed using this stage's default asynchronous execution facility, with this stage's result as the argument to the supplied function."
CompletableFuture,"thenApplyAsync(Function<? super T,? extends U> fn, Executor executor)",<U> CompletableFuture<U>,"Returns a new CompletionStage that, when this stage completes normally, is executed using the supplied Executor, with this stage's result as the argument to the supplied function."
CompletableFuture,"thenCombine(CompletionStage<? extends U> other, BiFunction<? super T,? super U,? extends V> fn)","<U,V> CompletableFuture<V>","Returns a new CompletionStage that, when this and the other given stage both complete normally, is executed with the two results as arguments to the supplied function."
CompletableFuture,"thenCombineAsync(CompletionStage<? extends U> other, BiFunction<? super T,? super U,? extends V> fn)","<U,V> CompletableFuture<V>","Returns a new CompletionStage that, when this and the other given stage complete normally, is executed using this stage's default asynchronous execution facility, with the two results as arguments to the supplied function."
CompletableFuture,"thenCombineAsync(CompletionStage<? extends U> other, BiFunction<? super T,? super U,? extends V> fn, Executor executor)","<U,V> CompletableFuture<V>","Returns a new CompletionStage that, when this and the other given stage complete normally, is executed using the supplied executor, with the two results as arguments to the supplied function."
CompletableFuture,"thenCompose(Function<? super T,? extends CompletionStage<U>> fn)",<U> CompletableFuture<U>,"Returns a new CompletionStage that, when this stage completes normally, is executed with this stage as the argument to the supplied function."
CompletableFuture,"thenComposeAsync(Function<? super T,? extends CompletionStage<U>> fn)",<U> CompletableFuture<U>,"Returns a new CompletionStage that, when this stage completes normally, is executed using this stage's default asynchronous execution facility, with this stage as the argument to the supplied function."
CompletableFuture,"thenComposeAsync(Function<? super T,? extends CompletionStage<U>> fn, Executor executor)",<U> CompletableFuture<U>,"Returns a new CompletionStage that, when this stage completes normally, is executed using the supplied Executor, with this stage's result as the argument to the supplied function."
CompletableFuture,thenRun(Runnable action),CompletableFuture<Void>,"Returns a new CompletionStage that, when this stage completes normally, executes the given action."
CompletableFuture,thenRunAsync(Runnable action),CompletableFuture<Void>,"Returns a new CompletionStage that, when this stage completes normally, executes the given action using this stage's default asynchronous execution facility."
CompletableFuture,"thenRunAsync(Runnable action, Executor executor)",CompletableFuture<Void>,"Returns a new CompletionStage that, when this stage completes normally, executes the given action using the supplied Executor."
CompletableFuture,toCompletableFuture(),CompletableFuture<T>,Returns this CompletableFuture.
CompletableFuture,toString(),String,"Returns a string identifying this CompletableFuture, as well as its completion state."
CompletableFuture,"whenComplete(BiConsumer<? super T,? super Throwable> action)",CompletableFuture<T>,"Returns a new CompletionStage with the same result or exception as this stage, that executes the given action when this stage completes."
CompletableFuture,"whenCompleteAsync(BiConsumer<? super T,? super Throwable> action)",CompletableFuture<T>,"Returns a new CompletionStage with the same result or exception as this stage, that executes the given action using this stage's default asynchronous execution facility when this stage completes."
CompletableFuture,"whenCompleteAsync(BiConsumer<? super T,? super Throwable> action, Executor executor)",CompletableFuture<T>,"Returns a new CompletionStage with the same result or exception as this stage, that executes the given action using the supplied Executor when this stage completes."
ConcurrentHashMap,clear(),void,Removes all of the mappings from this map.
ConcurrentHashMap,"compute(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)",V,Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).
ConcurrentHashMap,"computeIfAbsent(K key, Function<? super K,? extends V> mappingFunction)",V,"If the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless null."
ConcurrentHashMap,"computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)",V,"If the value for the specified key is present, attempts to compute a new mapping given the key and its current mapped value."
ConcurrentHashMap,contains(Object value),boolean,Legacy method testing if some key maps into the specified value in this table.
ConcurrentHashMap,containsKey(Object key),boolean,Tests if the specified object is a key in this table.
ConcurrentHashMap,containsValue(Object value),boolean,Returns true if this map maps one or more keys to the specified value.
ConcurrentHashMap,elements(),Enumeration<V>,Returns an enumeration of the values in this table.
ConcurrentHashMap,entrySet(),"Set<Map.Entry<K,V>>",Returns a Set view of the mappings contained in this map.
ConcurrentHashMap,equals(Object o),boolean,Compares the specified object with this map for equality.
ConcurrentHashMap,"forEach(BiConsumer<? super K,? super V> action)",void,Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.
ConcurrentHashMap,"forEach(long parallelismThreshold, BiConsumer<? super K,? super V> action)",void,"Performs the given action for each (key, value)."
ConcurrentHashMap,"forEach(long parallelismThreshold, BiFunction<? super K,? super V,? extends U> transformer, Consumer<? super U> action)",<U> void,"Performs the given action for each non-null transformation of each (key, value)."
ConcurrentHashMap,"forEachEntry(long parallelismThreshold, Consumer<? super Map.Entry<K,V>> action)",void,Performs the given action for each entry.
ConcurrentHashMap,"forEachEntry(long parallelismThreshold, Function<Map.Entry<K,V>,? extends U> transformer, Consumer<? super U> action)",<U> void,Performs the given action for each non-null transformation of each entry.
ConcurrentHashMap,"forEachKey(long parallelismThreshold, Consumer<? super K> action)",void,Performs the given action for each key.
ConcurrentHashMap,"forEachKey(long parallelismThreshold, Function<? super K,? extends U> transformer, Consumer<? super U> action)",<U> void,Performs the given action for each non-null transformation of each key.
ConcurrentHashMap,"forEachValue(long parallelismThreshold, Consumer<? super V> action)",void,Performs the given action for each value.
ConcurrentHashMap,"forEachValue(long parallelismThreshold, Function<? super V,? extends U> transformer, Consumer<? super U> action)",<U> void,Performs the given action for each non-null transformation of each value.
ConcurrentHashMap,get(Object key),V,"Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key."
ConcurrentHashMap,"getOrDefault(Object key, V defaultValue)",V,"Returns the value to which the specified key is mapped, or the given default value if this map contains no mapping for the key."
ConcurrentHashMap,hashCode(),int,"Returns the hash code value for this Map, i.e., the sum of, for each key-value pair in the map, key.hashCode() ^ value.hashCode()."
ConcurrentHashMap,isEmpty(),boolean,Returns true if this map contains no key-value mappings.
ConcurrentHashMap,keys(),Enumeration<K>,Returns an enumeration of the keys in this table.
ConcurrentHashMap,keySet(),"ConcurrentHashMap.KeySetView<K,V>",Returns a Set view of the keys contained in this map.
ConcurrentHashMap,keySet(V mappedValue),"ConcurrentHashMap.KeySetView<K,V>","Returns a Set view of the keys in this map, using the given common mapped value for any additions (i.e., Collection.add(E) and Collection.addAll(Collection))."
ConcurrentHashMap,mappingCount(),long,Returns the number of mappings.
ConcurrentHashMap,"merge(K key, V value, BiFunction<? super V,? super V,? extends V> remappingFunction)",V,"If the specified key is not already associated with a (non-null) value, associates it with the given value."
ConcurrentHashMap,newKeySet(),"static <K> ConcurrentHashMap.KeySetView<K,Boolean>",Creates a new Set backed by a ConcurrentHashMap from the given type to Boolean.TRUE.
ConcurrentHashMap,newKeySet(int initialCapacity),"static <K> ConcurrentHashMap.KeySetView<K,Boolean>",Creates a new Set backed by a ConcurrentHashMap from the given type to Boolean.TRUE.
ConcurrentHashMap,"put(K key, V value)",V,Maps the specified key to the specified value in this table.
ConcurrentHashMap,"putAll(Map<? extends K,? extends V> m)",void,Copies all of the mappings from the specified map to this one.
ConcurrentHashMap,"putIfAbsent(K key, V value)",V,"If the specified key is not already associated with a value, associate it with the given value."
ConcurrentHashMap,"reduce(long parallelismThreshold, BiFunction<? super K,? super V,? extends U> transformer, BiFunction<? super U,? super U,? extends U> reducer)",<U> U,"Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, or null if none."
ConcurrentHashMap,"reduceEntries(long parallelismThreshold, BiFunction<Map.Entry<K,V>,Map.Entry<K,V>,? extends Map.Entry<K,V>> reducer)","Map.Entry<K,V>","Returns the result of accumulating all entries using the given reducer to combine values, or null if none."
ConcurrentHashMap,"reduceEntries(long parallelismThreshold, Function<Map.Entry<K,V>,? extends U> transformer, BiFunction<? super U,? super U,? extends U> reducer)",<U> U,"Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, or null if none."
ConcurrentHashMap,"reduceEntriesToDouble(long parallelismThreshold, ToDoubleFunction<Map.Entry<K,V>> transformer, double basis, DoubleBinaryOperator reducer)",double,"Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value."
ConcurrentHashMap,"reduceEntriesToInt(long parallelismThreshold, ToIntFunction<Map.Entry<K,V>> transformer, int basis, IntBinaryOperator reducer)",int,"Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value."
ConcurrentHashMap,"reduceEntriesToLong(long parallelismThreshold, ToLongFunction<Map.Entry<K,V>> transformer, long basis, LongBinaryOperator reducer)",long,"Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value."
ConcurrentHashMap,"reduceKeys(long parallelismThreshold, BiFunction<? super K,? super K,? extends K> reducer)",K,"Returns the result of accumulating all keys using the given reducer to combine values, or null if none."
ConcurrentHashMap,"reduceKeys(long parallelismThreshold, Function<? super K,? extends U> transformer, BiFunction<? super U,? super U,? extends U> reducer)",<U> U,"Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, or null if none."
ConcurrentHashMap,"reduceKeysToDouble(long parallelismThreshold, ToDoubleFunction<? super K> transformer, double basis, DoubleBinaryOperator reducer)",double,"Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value."
ConcurrentHashMap,"reduceKeysToInt(long parallelismThreshold, ToIntFunction<? super K> transformer, int basis, IntBinaryOperator reducer)",int,"Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value."
ConcurrentHashMap,"reduceKeysToLong(long parallelismThreshold, ToLongFunction<? super K> transformer, long basis, LongBinaryOperator reducer)",long,"Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value."
ConcurrentHashMap,"reduceToDouble(long parallelismThreshold, ToDoubleBiFunction<? super K,? super V> transformer, double basis, DoubleBinaryOperator reducer)",double,"Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value."
ConcurrentHashMap,"reduceToInt(long parallelismThreshold, ToIntBiFunction<? super K,? super V> transformer, int basis, IntBinaryOperator reducer)",int,"Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value."
ConcurrentHashMap,"reduceToLong(long parallelismThreshold, ToLongBiFunction<? super K,? super V> transformer, long basis, LongBinaryOperator reducer)",long,"Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value."
ConcurrentHashMap,"reduceValues(long parallelismThreshold, BiFunction<? super V,? super V,? extends V> reducer)",V,"Returns the result of accumulating all values using the given reducer to combine values, or null if none."
ConcurrentHashMap,"reduceValues(long parallelismThreshold, Function<? super V,? extends U> transformer, BiFunction<? super U,? super U,? extends U> reducer)",<U> U,"Returns the result of accumulating the given transformation of all values using the given reducer to combine values, or null if none."
ConcurrentHashMap,"reduceValuesToDouble(long parallelismThreshold, ToDoubleFunction<? super V> transformer, double basis, DoubleBinaryOperator reducer)",double,"Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value."
ConcurrentHashMap,"reduceValuesToInt(long parallelismThreshold, ToIntFunction<? super V> transformer, int basis, IntBinaryOperator reducer)",int,"Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value."
ConcurrentHashMap,"reduceValuesToLong(long parallelismThreshold, ToLongFunction<? super V> transformer, long basis, LongBinaryOperator reducer)",long,"Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value."
ConcurrentHashMap,remove(Object key),V,Removes the key (and its corresponding value) from this map.
ConcurrentHashMap,"remove(Object key, Object value)",boolean,Removes the entry for a key only if currently mapped to a given value.
ConcurrentHashMap,"replace(K key, V value)",V,Replaces the entry for a key only if currently mapped to some value.
ConcurrentHashMap,"replace(K key, V oldValue, V newValue)",boolean,Replaces the entry for a key only if currently mapped to a given value.
ConcurrentHashMap,"replaceAll(BiFunction<? super K,? super V,? extends V> function)",void,Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.
ConcurrentHashMap,"search(long parallelismThreshold, BiFunction<? super K,? super V,? extends U> searchFunction)",<U> U,"Returns a non-null result from applying the given search function on each (key, value), or null if none."
ConcurrentHashMap,"searchEntries(long parallelismThreshold, Function<Map.Entry<K,V>,? extends U> searchFunction)",<U> U,"Returns a non-null result from applying the given search function on each entry, or null if none."
ConcurrentHashMap,"searchKeys(long parallelismThreshold, Function<? super K,? extends U> searchFunction)",<U> U,"Returns a non-null result from applying the given search function on each key, or null if none."
ConcurrentHashMap,"searchValues(long parallelismThreshold, Function<? super V,? extends U> searchFunction)",<U> U,"Returns a non-null result from applying the given search function on each value, or null if none."
ConcurrentHashMap,size(),int,Returns the number of key-value mappings in this map.
ConcurrentHashMap,toString(),String,Returns a string representation of this map.
ConcurrentHashMap,values(),Collection<V>,Returns a Collection view of the values contained in this map.
ConcurrentHashMap.KeySetView,add(K e),boolean,"Adds the specified key to this set view by mapping the key to the default mapped value in the backing map, if defined."
ConcurrentHashMap.KeySetView,addAll(Collection<? extends K> c),boolean,"Adds all of the elements in the specified collection to this set, as if by calling add(K) on each one."
ConcurrentHashMap.KeySetView,clear(),void,"Removes all of the elements from this view, by removing all the mappings from the map backing this view."
ConcurrentHashMap.KeySetView,contains(Object o),boolean,Returns true if this collection contains the specified element.
ConcurrentHashMap.KeySetView,containsAll(Collection<?> c),boolean,Returns true if this collection contains all of the elements in the specified collection.
ConcurrentHashMap.KeySetView,equals(Object o),boolean,"Indicates whether some other object is ""equal to"" this one."
ConcurrentHashMap.KeySetView,forEach(Consumer<? super K> action),void,Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.
ConcurrentHashMap.KeySetView,getMap(),"ConcurrentHashMap<K,V>",Returns the map backing this view.
ConcurrentHashMap.KeySetView,getMappedValue(),V,"Returns the default mapped value for additions, or null if additions are not supported."
ConcurrentHashMap.KeySetView,hashCode(),int,Returns a hash code value for the object.
ConcurrentHashMap.KeySetView,isEmpty(),boolean,Returns true if this collection contains no elements.
ConcurrentHashMap.KeySetView,iterator(),Iterator<K>,Returns an iterator over the elements in this collection.
ConcurrentHashMap.KeySetView,remove(Object o),boolean,"Removes the key from this map view, by removing the key (and its corresponding value) from the backing map."
ConcurrentHashMap.KeySetView,removeAll(Collection<?> c),boolean,Removes all of this collection's elements that are also contained in the specified collection (optional operation).
ConcurrentHashMap.KeySetView,retainAll(Collection<?> c),boolean,Retains only the elements in this collection that are contained in the specified collection (optional operation).
ConcurrentHashMap.KeySetView,size(),int,Returns the number of elements in this collection.
ConcurrentHashMap.KeySetView,spliterator(),Spliterator<K>,Creates a Spliterator over the elements in this set.
ConcurrentHashMap.KeySetView,toArray(),Object[],Returns an array containing all of the elements in this collection.
ConcurrentHashMap.KeySetView,toArray(T[] a),<T> T[],Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array.
ConcurrentHashMap.KeySetView,toString(),String,Returns a string representation of this collection.
ConcurrentLinkedDeque,add(E e),boolean,Inserts the specified element at the tail of this deque.
ConcurrentLinkedDeque,addAll(Collection<? extends E> c),boolean,"Appends all of the elements in the specified collection to the end of this deque, in the order that they are returned by the specified collection's iterator."
ConcurrentLinkedDeque,addFirst(E e),void,Inserts the specified element at the front of this deque.
ConcurrentLinkedDeque,addLast(E e),void,Inserts the specified element at the end of this deque.
ConcurrentLinkedDeque,clear(),void,Removes all of the elements from this deque.
ConcurrentLinkedDeque,contains(Object o),boolean,Returns true if this deque contains at least one element e such that o.equals(e).
ConcurrentLinkedDeque,descendingIterator(),Iterator<E>,Returns an iterator over the elements in this deque in reverse sequential order.
ConcurrentLinkedDeque,element(),E,"Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque)."
ConcurrentLinkedDeque,getFirst(),E,"Retrieves, but does not remove, the first element of this deque."
ConcurrentLinkedDeque,getLast(),E,"Retrieves, but does not remove, the last element of this deque."
ConcurrentLinkedDeque,isEmpty(),boolean,Returns true if this collection contains no elements.
ConcurrentLinkedDeque,iterator(),Iterator<E>,Returns an iterator over the elements in this deque in proper sequence.
ConcurrentLinkedDeque,offer(E e),boolean,Inserts the specified element at the tail of this deque.
ConcurrentLinkedDeque,offerFirst(E e),boolean,Inserts the specified element at the front of this deque.
ConcurrentLinkedDeque,offerLast(E e),boolean,Inserts the specified element at the end of this deque.
ConcurrentLinkedDeque,peek(),E,"Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty."
ConcurrentLinkedDeque,peekFirst(),E,"Retrieves, but does not remove, the first element of this deque, or returns null if this deque is empty."
ConcurrentLinkedDeque,peekLast(),E,"Retrieves, but does not remove, the last element of this deque, or returns null if this deque is empty."
ConcurrentLinkedDeque,poll(),E,"Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty."
ConcurrentLinkedDeque,pollFirst(),E,"Retrieves and removes the first element of this deque, or returns null if this deque is empty."
ConcurrentLinkedDeque,pollLast(),E,"Retrieves and removes the last element of this deque, or returns null if this deque is empty."
ConcurrentLinkedDeque,pop(),E,Pops an element from the stack represented by this deque.
ConcurrentLinkedDeque,push(E e),void,"Pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available."
ConcurrentLinkedDeque,remove(),E,"Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque)."
ConcurrentLinkedDeque,remove(Object o),boolean,"Removes the first element e such that o.equals(e), if such an element exists in this deque."
ConcurrentLinkedDeque,removeFirst(),E,Retrieves and removes the first element of this deque.
ConcurrentLinkedDeque,removeFirstOccurrence(Object o),boolean,"Removes the first element e such that o.equals(e), if such an element exists in this deque."
ConcurrentLinkedDeque,removeLast(),E,Retrieves and removes the last element of this deque.
ConcurrentLinkedDeque,removeLastOccurrence(Object o),boolean,"Removes the last element e such that o.equals(e), if such an element exists in this deque."
ConcurrentLinkedDeque,size(),int,Returns the number of elements in this deque.
ConcurrentLinkedDeque,spliterator(),Spliterator<E>,Returns a Spliterator over the elements in this deque.
ConcurrentLinkedDeque,toArray(),Object[],"Returns an array containing all of the elements in this deque, in proper sequence (from first to last element)."
ConcurrentLinkedDeque,toArray(T[] a),<T> T[],"Returns an array containing all of the elements in this deque, in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array."
ConcurrentLinkedQueue,add(E e),boolean,Inserts the specified element at the tail of this queue.
ConcurrentLinkedQueue,addAll(Collection<? extends E> c),boolean,"Appends all of the elements in the specified collection to the end of this queue, in the order that they are returned by the specified collection's iterator."
ConcurrentLinkedQueue,contains(Object o),boolean,Returns true if this queue contains the specified element.
ConcurrentLinkedQueue,isEmpty(),boolean,Returns true if this queue contains no elements.
ConcurrentLinkedQueue,iterator(),Iterator<E>,Returns an iterator over the elements in this queue in proper sequence.
ConcurrentLinkedQueue,offer(E e),boolean,Inserts the specified element at the tail of this queue.
ConcurrentLinkedQueue,peek(),E,"Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty."
ConcurrentLinkedQueue,poll(),E,"Retrieves and removes the head of this queue, or returns null if this queue is empty."
ConcurrentLinkedQueue,remove(Object o),boolean,"Removes a single instance of the specified element from this queue, if it is present."
ConcurrentLinkedQueue,size(),int,Returns the number of elements in this queue.
ConcurrentLinkedQueue,spliterator(),Spliterator<E>,Returns a Spliterator over the elements in this queue.
ConcurrentLinkedQueue,toArray(),Object[],"Returns an array containing all of the elements in this queue, in proper sequence."
ConcurrentLinkedQueue,toArray(T[] a),<T> T[],"Returns an array containing all of the elements in this queue, in proper sequence; the runtime type of the returned array is that of the specified array."
ConcurrentSkipListMap,ceilingEntry(K key),"Map.Entry<K,V>","Returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such entry."
ConcurrentSkipListMap,ceilingKey(K key),K,"Returns the least key greater than or equal to the given key, or null if there is no such key."
ConcurrentSkipListMap,clear(),void,Removes all of the mappings from this map.
ConcurrentSkipListMap,clone(),"ConcurrentSkipListMap<K,V>",Returns a shallow copy of this ConcurrentSkipListMap instance.
ConcurrentSkipListMap,comparator(),Comparator<? super K>,"Returns the comparator used to order the keys in this map, or null if this map uses the natural ordering of its keys."
ConcurrentSkipListMap,"compute(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)",V,Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).
ConcurrentSkipListMap,"computeIfAbsent(K key, Function<? super K,? extends V> mappingFunction)",V,"If the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless null."
ConcurrentSkipListMap,"computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)",V,"If the value for the specified key is present, attempts to compute a new mapping given the key and its current mapped value."
ConcurrentSkipListMap,containsKey(Object key),boolean,Returns true if this map contains a mapping for the specified key.
ConcurrentSkipListMap,containsValue(Object value),boolean,Returns true if this map maps one or more keys to the specified value.
ConcurrentSkipListMap,descendingKeySet(),NavigableSet<K>,Returns a reverse order NavigableSet view of the keys contained in this map.
ConcurrentSkipListMap,descendingMap(),"ConcurrentNavigableMap<K,V>",Returns a reverse order view of the mappings contained in this map.
ConcurrentSkipListMap,entrySet(),"Set<Map.Entry<K,V>>",Returns a Set view of the mappings contained in this map.
ConcurrentSkipListMap,equals(Object o),boolean,Compares the specified object with this map for equality.
ConcurrentSkipListMap,firstEntry(),"Map.Entry<K,V>","Returns a key-value mapping associated with the least key in this map, or null if the map is empty."
ConcurrentSkipListMap,firstKey(),K,Returns the first (lowest) key currently in this map.
ConcurrentSkipListMap,floorEntry(K key),"Map.Entry<K,V>","Returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key."
ConcurrentSkipListMap,floorKey(K key),K,"Returns the greatest key less than or equal to the given key, or null if there is no such key."
ConcurrentSkipListMap,"forEach(BiConsumer<? super K,? super V> action)",void,Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.
ConcurrentSkipListMap,get(Object key),V,"Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key."
ConcurrentSkipListMap,"getOrDefault(Object key, V defaultValue)",V,"Returns the value to which the specified key is mapped, or the given defaultValue if this map contains no mapping for the key."
ConcurrentSkipListMap,headMap(K toKey),"ConcurrentNavigableMap<K,V>",Returns a view of the portion of this map whose keys are strictly less than toKey.
ConcurrentSkipListMap,"headMap(K toKey, boolean inclusive)","ConcurrentNavigableMap<K,V>","Returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey."
ConcurrentSkipListMap,higherEntry(K key),"Map.Entry<K,V>","Returns a key-value mapping associated with the least key strictly greater than the given key, or null if there is no such key."
ConcurrentSkipListMap,higherKey(K key),K,"Returns the least key strictly greater than the given key, or null if there is no such key."
ConcurrentSkipListMap,isEmpty(),boolean,Returns true if this map contains no key-value mappings.
ConcurrentSkipListMap,keySet(),NavigableSet<K>,Returns a NavigableSet view of the keys contained in this map.
ConcurrentSkipListMap,lastEntry(),"Map.Entry<K,V>","Returns a key-value mapping associated with the greatest key in this map, or null if the map is empty."
ConcurrentSkipListMap,lastKey(),K,Returns the last (highest) key currently in this map.
ConcurrentSkipListMap,lowerEntry(K key),"Map.Entry<K,V>","Returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key."
ConcurrentSkipListMap,lowerKey(K key),K,"Returns the greatest key strictly less than the given key, or null if there is no such key."
ConcurrentSkipListMap,"merge(K key, V value, BiFunction<? super V,? super V,? extends V> remappingFunction)",V,"If the specified key is not already associated with a value, associates it with the given value."
ConcurrentSkipListMap,navigableKeySet(),NavigableSet<K>,Returns a NavigableSet view of the keys contained in this map.
ConcurrentSkipListMap,pollFirstEntry(),"Map.Entry<K,V>","Removes and returns a key-value mapping associated with the least key in this map, or null if the map is empty."
ConcurrentSkipListMap,pollLastEntry(),"Map.Entry<K,V>","Removes and returns a key-value mapping associated with the greatest key in this map, or null if the map is empty."
ConcurrentSkipListMap,"put(K key, V value)",V,Associates the specified value with the specified key in this map.
ConcurrentSkipListMap,"putIfAbsent(K key, V value)",V,"If the specified key is not already associated with a value, associate it with the given value."
ConcurrentSkipListMap,remove(Object key),V,Removes the mapping for the specified key from this map if present.
ConcurrentSkipListMap,"remove(Object key, Object value)",boolean,Removes the entry for a key only if currently mapped to a given value.
ConcurrentSkipListMap,"replace(K key, V value)",V,Replaces the entry for a key only if currently mapped to some value.
ConcurrentSkipListMap,"replace(K key, V oldValue, V newValue)",boolean,Replaces the entry for a key only if currently mapped to a given value.
ConcurrentSkipListMap,"replaceAll(BiFunction<? super K,? super V,? extends V> function)",void,Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.
ConcurrentSkipListMap,size(),int,Returns the number of key-value mappings in this map.
ConcurrentSkipListMap,"subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)","ConcurrentNavigableMap<K,V>",Returns a view of the portion of this map whose keys range from fromKey to toKey.
ConcurrentSkipListMap,"subMap(K fromKey, K toKey)","ConcurrentNavigableMap<K,V>","Returns a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive."
ConcurrentSkipListMap,tailMap(K fromKey),"ConcurrentNavigableMap<K,V>",Returns a view of the portion of this map whose keys are greater than or equal to fromKey.
ConcurrentSkipListMap,"tailMap(K fromKey, boolean inclusive)","ConcurrentNavigableMap<K,V>","Returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey."
ConcurrentSkipListMap,values(),Collection<V>,Returns a Collection view of the values contained in this map.
ConcurrentSkipListSet,add(E e),boolean,Adds the specified element to this set if it is not already present.
ConcurrentSkipListSet,ceiling(E e),E,"Returns the least element in this set greater than or equal to the given element, or null if there is no such element."
ConcurrentSkipListSet,clear(),void,Removes all of the elements from this set.
ConcurrentSkipListSet,clone(),ConcurrentSkipListSet<E>,Returns a shallow copy of this ConcurrentSkipListSet instance.
ConcurrentSkipListSet,comparator(),Comparator<? super E>,"Returns the comparator used to order the elements in this set, or null if this set uses the natural ordering of its elements."
ConcurrentSkipListSet,contains(Object o),boolean,Returns true if this set contains the specified element.
ConcurrentSkipListSet,descendingIterator(),Iterator<E>,Returns an iterator over the elements in this set in descending order.
ConcurrentSkipListSet,descendingSet(),NavigableSet<E>,Returns a reverse order view of the elements contained in this set.
ConcurrentSkipListSet,equals(Object o),boolean,Compares the specified object with this set for equality.
ConcurrentSkipListSet,first(),E,Returns the first (lowest) element currently in this set.
ConcurrentSkipListSet,floor(E e),E,"Returns the greatest element in this set less than or equal to the given element, or null if there is no such element."
ConcurrentSkipListSet,headSet(E toElement),NavigableSet<E>,Returns a view of the portion of this set whose elements are strictly less than toElement.
ConcurrentSkipListSet,"headSet(E toElement, boolean inclusive)",NavigableSet<E>,"Returns a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toElement."
ConcurrentSkipListSet,higher(E e),E,"Returns the least element in this set strictly greater than the given element, or null if there is no such element."
ConcurrentSkipListSet,isEmpty(),boolean,Returns true if this set contains no elements.
ConcurrentSkipListSet,iterator(),Iterator<E>,Returns an iterator over the elements in this set in ascending order.
ConcurrentSkipListSet,last(),E,Returns the last (highest) element currently in this set.
ConcurrentSkipListSet,lower(E e),E,"Returns the greatest element in this set strictly less than the given element, or null if there is no such element."
ConcurrentSkipListSet,pollFirst(),E,"Retrieves and removes the first (lowest) element, or returns null if this set is empty."
ConcurrentSkipListSet,pollLast(),E,"Retrieves and removes the last (highest) element, or returns null if this set is empty."
ConcurrentSkipListSet,remove(Object o),boolean,Removes the specified element from this set if it is present.
ConcurrentSkipListSet,removeAll(Collection<?> c),boolean,Removes from this set all of its elements that are contained in the specified collection.
ConcurrentSkipListSet,size(),int,Returns the number of elements in this set.
ConcurrentSkipListSet,spliterator(),Spliterator<E>,Returns a Spliterator over the elements in this set.
ConcurrentSkipListSet,"subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)",NavigableSet<E>,Returns a view of the portion of this set whose elements range from fromElement to toElement.
ConcurrentSkipListSet,"subSet(E fromElement, E toElement)",NavigableSet<E>,"Returns a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive."
ConcurrentSkipListSet,tailSet(E fromElement),NavigableSet<E>,Returns a view of the portion of this set whose elements are greater than or equal to fromElement.
ConcurrentSkipListSet,"tailSet(E fromElement, boolean inclusive)",NavigableSet<E>,"Returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive is true) fromElement."
CopyOnWriteArrayList,add(E e),boolean,Appends the specified element to the end of this list.
CopyOnWriteArrayList,"add(int index, E element)",void,Inserts the specified element at the specified position in this list.
CopyOnWriteArrayList,addAll(Collection<? extends E> c),boolean,"Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator."
CopyOnWriteArrayList,"addAll(int index, Collection<? extends E> c)",boolean,"Inserts all of the elements in the specified collection into this list, starting at the specified position."
CopyOnWriteArrayList,addAllAbsent(Collection<? extends E> c),int,"Appends all of the elements in the specified collection that are not already contained in this list, to the end of this list, in the order that they are returned by the specified collection's iterator."
CopyOnWriteArrayList,addIfAbsent(E e),boolean,"Appends the element, if not present."
CopyOnWriteArrayList,clear(),void,Removes all of the elements from this list.
CopyOnWriteArrayList,clone(),Object,Returns a shallow copy of this list.
CopyOnWriteArrayList,contains(Object o),boolean,Returns true if this list contains the specified element.
CopyOnWriteArrayList,containsAll(Collection<?> c),boolean,Returns true if this list contains all of the elements of the specified collection.
CopyOnWriteArrayList,equals(Object o),boolean,Compares the specified object with this list for equality.
CopyOnWriteArrayList,forEach(Consumer<? super E> action),void,Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.
CopyOnWriteArrayList,get(int index),E,Returns the element at the specified position in this list.
CopyOnWriteArrayList,hashCode(),int,Returns the hash code value for this list.
CopyOnWriteArrayList,"indexOf(E e, int index)",int,"Returns the index of the first occurrence of the specified element in this list, searching forwards from index, or returns -1 if the element is not found."
CopyOnWriteArrayList,indexOf(Object o),int,"Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element."
CopyOnWriteArrayList,isEmpty(),boolean,Returns true if this list contains no elements.
CopyOnWriteArrayList,iterator(),Iterator<E>,Returns an iterator over the elements in this list in proper sequence.
CopyOnWriteArrayList,"lastIndexOf(E e, int index)",int,"Returns the index of the last occurrence of the specified element in this list, searching backwards from index, or returns -1 if the element is not found."
CopyOnWriteArrayList,lastIndexOf(Object o),int,"Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element."
CopyOnWriteArrayList,listIterator(),ListIterator<E>,Returns a list iterator over the elements in this list (in proper sequence).
CopyOnWriteArrayList,listIterator(int index),ListIterator<E>,"Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list."
CopyOnWriteArrayList,remove(int index),E,Removes the element at the specified position in this list.
CopyOnWriteArrayList,remove(Object o),boolean,"Removes the first occurrence of the specified element from this list, if it is present."
CopyOnWriteArrayList,removeAll(Collection<?> c),boolean,Removes from this list all of its elements that are contained in the specified collection.
CopyOnWriteArrayList,removeIf(Predicate<? super E> filter),boolean,Removes all of the elements of this collection that satisfy the given predicate.
CopyOnWriteArrayList,replaceAll(UnaryOperator<E> operator),void,Replaces each element of this list with the result of applying the operator to that element.
CopyOnWriteArrayList,retainAll(Collection<?> c),boolean,Retains only the elements in this list that are contained in the specified collection.
CopyOnWriteArrayList,"set(int index, E element)",E,Replaces the element at the specified position in this list with the specified element.
CopyOnWriteArrayList,size(),int,Returns the number of elements in this list.
CopyOnWriteArrayList,sort(Comparator<? super E> c),void,Sorts this list according to the order induced by the specified Comparator.
CopyOnWriteArrayList,spliterator(),Spliterator<E>,Returns a Spliterator over the elements in this list.
CopyOnWriteArrayList,"subList(int fromIndex, int toIndex)",List<E>,"Returns a view of the portion of this list between fromIndex, inclusive, and toIndex, exclusive."
CopyOnWriteArrayList,toArray(),Object[],Returns an array containing all of the elements in this list in proper sequence (from first to last element).
CopyOnWriteArrayList,toArray(T[] a),<T> T[],Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.
CopyOnWriteArrayList,toString(),String,Returns a string representation of this list.
CopyOnWriteArraySet,add(E e),boolean,Adds the specified element to this set if it is not already present.
CopyOnWriteArraySet,addAll(Collection<? extends E> c),boolean,Adds all of the elements in the specified collection to this set if they're not already present.
CopyOnWriteArraySet,clear(),void,Removes all of the elements from this set.
CopyOnWriteArraySet,contains(Object o),boolean,Returns true if this set contains the specified element.
CopyOnWriteArraySet,containsAll(Collection<?> c),boolean,Returns true if this set contains all of the elements of the specified collection.
CopyOnWriteArraySet,equals(Object o),boolean,Compares the specified object with this set for equality.
CopyOnWriteArraySet,forEach(Consumer<? super E> action),void,Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.
CopyOnWriteArraySet,isEmpty(),boolean,Returns true if this set contains no elements.
CopyOnWriteArraySet,iterator(),Iterator<E>,Returns an iterator over the elements contained in this set in the order in which these elements were added.
CopyOnWriteArraySet,remove(Object o),boolean,Removes the specified element from this set if it is present.
CopyOnWriteArraySet,removeAll(Collection<?> c),boolean,Removes from this set all of its elements that are contained in the specified collection.
CopyOnWriteArraySet,removeIf(Predicate<? super E> filter),boolean,Removes all of the elements of this collection that satisfy the given predicate.
CopyOnWriteArraySet,retainAll(Collection<?> c),boolean,Retains only the elements in this set that are contained in the specified collection.
CopyOnWriteArraySet,size(),int,Returns the number of elements in this set.
CopyOnWriteArraySet,spliterator(),Spliterator<E>,Returns a Spliterator over the elements in this set in the order in which these elements were added.
CopyOnWriteArraySet,toArray(),Object[],Returns an array containing all of the elements in this set.
CopyOnWriteArraySet,toArray(T[] a),<T> T[],Returns an array containing all of the elements in this set; the runtime type of the returned array is that of the specified array.
CountDownLatch,await(),void,"Causes the current thread to wait until the latch has counted down to zero, unless the thread is interrupted."
CountDownLatch,"await(long timeout, TimeUnit unit)",boolean,"Causes the current thread to wait until the latch has counted down to zero, unless the thread is interrupted, or the specified waiting time elapses."
CountDownLatch,countDown(),void,"Decrements the count of the latch, releasing all waiting threads if the count reaches zero."
CountDownLatch,getCount(),long,Returns the current count.
CountDownLatch,toString(),String,"Returns a string identifying this latch, as well as its state."
CountedCompleter,addToPendingCount(int delta),void,Adds (atomically) the given value to the pending count.
CountedCompleter,"compareAndSetPendingCount(int expected, int count)",boolean,Sets (atomically) the pending count to the given count only if it currently holds the given expected value.
CountedCompleter,complete(T rawResult),void,"Regardless of pending count, invokes onCompletion(CountedCompleter), marks this task as complete and further triggers tryComplete() on this task's completer, if one exists."
CountedCompleter,compute(),abstract void,The main computation performed by this task.
CountedCompleter,decrementPendingCountUnlessZero(),int,"If the pending count is nonzero, (atomically) decrements it."
CountedCompleter,exec(),protected boolean,Implements execution conventions for CountedCompleters.
CountedCompleter,firstComplete(),CountedCompleter<?>,"If this task's pending count is zero, returns this task; otherwise decrements its pending count and returns null."
CountedCompleter,getCompleter(),CountedCompleter<?>,"Returns the completer established in this task's constructor, or null if none."
CountedCompleter,getPendingCount(),int,Returns the current pending count.
CountedCompleter,getRawResult(),T,Returns the result of the computation.
CountedCompleter,getRoot(),CountedCompleter<?>,"Returns the root of the current computation; i.e., this task if it has no completer, else its completer's root."
CountedCompleter,helpComplete(int maxTasks),void,"If this task has not completed, attempts to process at most the given number of other unprocessed tasks for which this task is on the completion path, if any are known to exist."
CountedCompleter,nextComplete(),CountedCompleter<?>,"If this task does not have a completer, invokes ForkJoinTask.quietlyComplete() and returns null."
CountedCompleter,onCompletion(CountedCompleter<?> caller),void,"Performs an action when method tryComplete() is invoked and the pending count is zero, or when the unconditional method complete(T) is invoked."
CountedCompleter,"onExceptionalCompletion(Throwable ex, CountedCompleter<?> caller)",boolean,"Performs an action when method ForkJoinTask.completeExceptionally(Throwable) is invoked or method compute() throws an exception, and this task has not already otherwise completed normally."
CountedCompleter,propagateCompletion(),void,"Equivalent to tryComplete() but does not invoke onCompletion(CountedCompleter) along the completion path: If the pending count is nonzero, decrements the count; otherwise, similarly tries to complete this task's completer, if one exists, else marks this task as complete."
CountedCompleter,quietlyCompleteRoot(),void,Equivalent to getRoot().quietlyComplete().
CountedCompleter,setPendingCount(int count),void,Sets the pending count to the given value.
CountedCompleter,setRawResult(T t),protected void,A method that result-bearing CountedCompleters may optionally use to help maintain result data.
CountedCompleter,tryComplete(),void,"If the pending count is nonzero, decrements the count; otherwise invokes onCompletion(CountedCompleter) and then similarly tries to complete this task's completer, if one exists, else marks this task as complete."
CyclicBarrier,await(),int,Waits until all parties have invoked await on this barrier.
CyclicBarrier,"await(long timeout, TimeUnit unit)",int,"Waits until all parties have invoked await on this barrier, or the specified waiting time elapses."
CyclicBarrier,getNumberWaiting(),int,Returns the number of parties currently waiting at the barrier.
CyclicBarrier,getParties(),int,Returns the number of parties required to trip this barrier.
CyclicBarrier,isBroken(),boolean,Queries if this barrier is in a broken state.
CyclicBarrier,reset(),void,Resets the barrier to its initial state.
DelayQueue,add(E e),boolean,Inserts the specified element into this delay queue.
DelayQueue,clear(),void,Atomically removes all of the elements from this delay queue.
DelayQueue,drainTo(Collection<? super E> c),int,Removes all available elements from this queue and adds them to the given collection.
DelayQueue,"drainTo(Collection<? super E> c, int maxElements)",int,Removes at most the given number of available elements from this queue and adds them to the given collection.
DelayQueue,iterator(),Iterator<E>,Returns an iterator over all the elements (both expired and unexpired) in this queue.
DelayQueue,offer(E e),boolean,Inserts the specified element into this delay queue.
DelayQueue,"offer(E e, long timeout, TimeUnit unit)",boolean,Inserts the specified element into this delay queue.
DelayQueue,peek(),E,"Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty."
DelayQueue,poll(),E,"Retrieves and removes the head of this queue, or returns null if this queue has no elements with an expired delay."
DelayQueue,"poll(long timeout, TimeUnit unit)",E,"Retrieves and removes the head of this queue, waiting if necessary until an element with an expired delay is available on this queue, or the specified wait time expires."
DelayQueue,put(E e),void,Inserts the specified element into this delay queue.
DelayQueue,remainingCapacity(),int,Always returns Integer.MAX_VALUE because a DelayQueue is not capacity constrained.
DelayQueue,remove(Object o),boolean,"Removes a single instance of the specified element from this queue, if it is present, whether or not it has expired."
DelayQueue,size(),int,Returns the number of elements in this collection.
DelayQueue,take(),E,"Retrieves and removes the head of this queue, waiting if necessary until an element with an expired delay is available on this queue."
DelayQueue,toArray(),Object[],Returns an array containing all of the elements in this queue.
DelayQueue,toArray(T[] a),<T> T[],Returns an array containing all of the elements in this queue; the runtime type of the returned array is that of the specified array.
Exchanger,exchange(V x),V,"Waits for another thread to arrive at this exchange point (unless the current thread is interrupted), and then transfers the given object to it, receiving its object in return."
Exchanger,"exchange(V x, long timeout, TimeUnit unit)",V,"Waits for another thread to arrive at this exchange point (unless the current thread is interrupted or the specified waiting time elapses), and then transfers the given object to it, receiving its object in return."
ExecutorCompletionService,poll(),Future<V>,"Retrieves and removes the Future representing the next completed task, or null if none are present."
ExecutorCompletionService,"poll(long timeout, TimeUnit unit)",Future<V>,"Retrieves and removes the Future representing the next completed task, waiting if necessary up to the specified wait time if none are yet present."
ExecutorCompletionService,submit(Callable<V> task),Future<V>,Submits a value-returning task for execution and returns a Future representing the pending results of the task.
ExecutorCompletionService,"submit(Runnable task, V result)",Future<V>,Submits a Runnable task for execution and returns a Future representing that task.
ExecutorCompletionService,take(),Future<V>,"Retrieves and removes the Future representing the next completed task, waiting if none are yet present."
Executors,callable(PrivilegedAction<?> action),static Callable<Object>,"Returns a Callable object that, when called, runs the given privileged action and returns its result."
Executors,callable(PrivilegedExceptionAction<?> action),static Callable<Object>,"Returns a Callable object that, when called, runs the given privileged exception action and returns its result."
Executors,callable(Runnable task),static Callable<Object>,"Returns a Callable object that, when called, runs the given task and returns null."
Executors,"callable(Runnable task, T result)",static <T> Callable<T>,"Returns a Callable object that, when called, runs the given task and returns the given result."
Executors,defaultThreadFactory(),static ThreadFactory,Returns a default thread factory used to create new threads.
Executors,newCachedThreadPool(),static ExecutorService,"Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available."
Executors,newCachedThreadPool(ThreadFactory threadFactory),static ExecutorService,"Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available, and uses the provided ThreadFactory to create new threads when needed."
Executors,newFixedThreadPool(int nThreads),static ExecutorService,Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue.
Executors,"newFixedThreadPool(int nThreads, ThreadFactory threadFactory)",static ExecutorService,"Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue, using the provided ThreadFactory to create new threads when needed."
Executors,newScheduledThreadPool(int corePoolSize),static ScheduledExecutorService,"Creates a thread pool that can schedule commands to run after a given delay, or to execute periodically."
Executors,"newScheduledThreadPool(int corePoolSize, ThreadFactory threadFactory)",static ScheduledExecutorService,"Creates a thread pool that can schedule commands to run after a given delay, or to execute periodically."
Executors,newSingleThreadExecutor(),static ExecutorService,Creates an Executor that uses a single worker thread operating off an unbounded queue.
Executors,newSingleThreadExecutor(ThreadFactory threadFactory),static ExecutorService,"Creates an Executor that uses a single worker thread operating off an unbounded queue, and uses the provided ThreadFactory to create a new thread when needed."
Executors,newSingleThreadScheduledExecutor(),static ScheduledExecutorService,"Creates a single-threaded executor that can schedule commands to run after a given delay, or to execute periodically."
Executors,newSingleThreadScheduledExecutor(ThreadFactory threadFactory),static ScheduledExecutorService,"Creates a single-threaded executor that can schedule commands to run after a given delay, or to execute periodically."
Executors,newWorkStealingPool(),static ExecutorService,Creates a work-stealing thread pool using all available processors as its target parallelism level.
Executors,newWorkStealingPool(int parallelism),static ExecutorService,"Creates a thread pool that maintains enough threads to support the given parallelism level, and may use multiple queues to reduce contention."
Executors,privilegedCallable(Callable<T> callable),static <T> Callable<T>,"Returns a Callable object that will, when called, execute the given callable under the current access control context."
Executors,privilegedCallableUsingCurrentClassLoader(Callable<T> callable),static <T> Callable<T>,"Returns a Callable object that will, when called, execute the given callable under the current access control context, with the current context class loader as the context class loader."
Executors,privilegedThreadFactory(),static ThreadFactory,Returns a thread factory used to create new threads that have the same permissions as the current thread.
Executors,unconfigurableExecutorService(ExecutorService executor),static ExecutorService,"Returns an object that delegates all defined ExecutorService methods to the given executor, but not any other methods that might otherwise be accessible using casts."
Executors,unconfigurableScheduledExecutorService(ScheduledExecutorService executor),static ScheduledExecutorService,"Returns an object that delegates all defined ScheduledExecutorService methods to the given executor, but not any other methods that might otherwise be accessible using casts."
ForkJoinPool,"awaitQuiescence(long timeout, TimeUnit unit)",boolean,"If called by a ForkJoinTask operating in this pool, equivalent in effect to ForkJoinTask.helpQuiesce()."
ForkJoinPool,"awaitTermination(long timeout, TimeUnit unit)",boolean,"Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first."
ForkJoinPool,commonPool(),static ForkJoinPool,Returns the common pool instance.
ForkJoinPool,drainTasksTo(Collection<? super ForkJoinTask<?>> c),protected int,"Removes all available unexecuted submitted and forked tasks from scheduling queues and adds them to the given collection, without altering their execution status."
ForkJoinPool,execute(ForkJoinTask<?> task),void,Arranges for (asynchronous) execution of the given task.
ForkJoinPool,execute(Runnable task),void,Executes the given command at some time in the future.
ForkJoinPool,getActiveThreadCount(),int,Returns an estimate of the number of threads that are currently stealing or executing tasks.
ForkJoinPool,getAsyncMode(),boolean,Returns true if this pool uses local first-in-first-out scheduling mode for forked tasks that are never joined.
ForkJoinPool,getCommonPoolParallelism(),static int,Returns the targeted parallelism level of the common pool.
ForkJoinPool,getFactory(),ForkJoinPool.ForkJoinWorkerThreadFactory,Returns the factory used for constructing new workers.
ForkJoinPool,getParallelism(),int,Returns the targeted parallelism level of this pool.
ForkJoinPool,getPoolSize(),int,Returns the number of worker threads that have started but not yet terminated.
ForkJoinPool,getQueuedSubmissionCount(),int,Returns an estimate of the number of tasks submitted to this pool that have not yet begun executing.
ForkJoinPool,getQueuedTaskCount(),long,Returns an estimate of the total number of tasks currently held in queues by worker threads (but not including tasks submitted to the pool that have not begun executing).
ForkJoinPool,getRunningThreadCount(),int,Returns an estimate of the number of worker threads that are not blocked waiting to join tasks or for other managed synchronization.
ForkJoinPool,getStealCount(),long,Returns an estimate of the total number of tasks stolen from one thread's work queue by another.
ForkJoinPool,getUncaughtExceptionHandler(),Thread.UncaughtExceptionHandler,Returns the handler for internal worker threads that terminate due to unrecoverable errors encountered while executing tasks.
ForkJoinPool,hasQueuedSubmissions(),boolean,Returns true if there are any tasks submitted to this pool that have not yet begun executing.
ForkJoinPool,invoke(ForkJoinTask<T> task),<T> T,"Performs the given task, returning its result upon completion."
ForkJoinPool,invokeAll(Collection<? extends Callable<T>> tasks),<T> List<Future<T>>,"Executes the given tasks, returning a list of Futures holding their status and results when all complete."
ForkJoinPool,isQuiescent(),boolean,Returns true if all worker threads are currently idle.
ForkJoinPool,isShutdown(),boolean,Returns true if this pool has been shut down.
ForkJoinPool,isTerminated(),boolean,Returns true if all tasks have completed following shut down.
ForkJoinPool,isTerminating(),boolean,Returns true if the process of termination has commenced but not yet completed.
ForkJoinPool,managedBlock(ForkJoinPool.ManagedBlocker blocker),static void,Runs the given possibly blocking task.
ForkJoinPool,newTaskFor(Callable<T> callable),protected <T> RunnableFuture<T>,Returns a RunnableFuture for the given callable task.
ForkJoinPool,"newTaskFor(Runnable runnable, T value)",protected <T> RunnableFuture<T>,Returns a RunnableFuture for the given runnable and default value.
ForkJoinPool,pollSubmission(),protected ForkJoinTask<?>,Removes and returns the next unexecuted submission if one is available.
ForkJoinPool,shutdown(),void,"Possibly initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted."
ForkJoinPool,shutdownNow(),List<Runnable>,"Possibly attempts to cancel and/or stop all tasks, and reject all subsequently submitted tasks."
ForkJoinPool,submit(Callable<T> task),<T> ForkJoinTask<T>,Submits a value-returning task for execution and returns a Future representing the pending results of the task.
ForkJoinPool,submit(ForkJoinTask<T> task),<T> ForkJoinTask<T>,Submits a ForkJoinTask for execution.
ForkJoinPool,submit(Runnable task),ForkJoinTask<?>,Submits a Runnable task for execution and returns a Future representing that task.
ForkJoinPool,"submit(Runnable task, T result)",<T> ForkJoinTask<T>,Submits a Runnable task for execution and returns a Future representing that task.
ForkJoinPool,toString(),String,"Returns a string identifying this pool, as well as its state, including indications of run state, parallelism level, and worker and task counts."
ForkJoinTask,adapt(Callable<? extends T> callable),static <T> ForkJoinTask<T>,"Returns a new ForkJoinTask that performs the call method of the given Callable as its action, and returns its result upon join(), translating any checked exceptions encountered into RuntimeException."
ForkJoinTask,adapt(Runnable runnable),static ForkJoinTask<?>,"Returns a new ForkJoinTask that performs the run method of the given Runnable as its action, and returns a null result upon join()."
ForkJoinTask,"adapt(Runnable runnable, T result)",static <T> ForkJoinTask<T>,"Returns a new ForkJoinTask that performs the run method of the given Runnable as its action, and returns the given result upon join()."
ForkJoinTask,cancel(boolean mayInterruptIfRunning),boolean,Attempts to cancel execution of this task.
ForkJoinTask,"compareAndSetForkJoinTaskTag(short e, short tag)",boolean,Atomically conditionally sets the tag value for this task.
ForkJoinTask,complete(V value),void,"Completes this task, and if not already aborted or cancelled, returning the given value as the result of subsequent invocations of join and related operations."
ForkJoinTask,completeExceptionally(Throwable ex),void,"Completes this task abnormally, and if not already aborted or cancelled, causes it to throw the given exception upon join and related operations."
ForkJoinTask,exec(),protected abstract boolean,"Immediately performs the base action of this task and returns true if, upon return from this method, this task is guaranteed to have completed normally."
ForkJoinTask,fork(),ForkJoinTask<V>,"Arranges to asynchronously execute this task in the pool the current task is running in, if applicable, or using the ForkJoinPool.commonPool() if not inForkJoinPool()."
ForkJoinTask,get(),V,"Waits if necessary for the computation to complete, and then retrieves its result."
ForkJoinTask,"get(long timeout, TimeUnit unit)",V,"Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available."
ForkJoinTask,getException(),Throwable,"Returns the exception thrown by the base computation, or a CancellationException if cancelled, or null if none or if the method has not yet completed."
ForkJoinTask,getForkJoinTaskTag(),short,Returns the tag for this task.
ForkJoinTask,getPool(),static ForkJoinPool,"Returns the pool hosting the current task execution, or null if this task is executing outside of any ForkJoinPool."
ForkJoinTask,getQueuedTaskCount(),static int,Returns an estimate of the number of tasks that have been forked by the current worker thread but not yet executed.
ForkJoinTask,getRawResult(),abstract V,"Returns the result that would be returned by join(), even if this task completed abnormally, or null if this task is not known to have been completed."
ForkJoinTask,getSurplusQueuedTaskCount(),static int,"Returns an estimate of how many more locally queued tasks are held by the current worker thread than there are other worker threads that might steal them, or zero if this thread is not operating in a ForkJoinPool."
ForkJoinTask,helpQuiesce(),static void,Possibly executes tasks until the pool hosting the current task is quiescent.
ForkJoinTask,inForkJoinPool(),static boolean,Returns true if the current thread is a ForkJoinWorkerThread executing as a ForkJoinPool computation.
ForkJoinTask,invoke(),V,"Commences performing this task, awaits its completion if necessary, and returns its result, or throws an (unchecked) RuntimeException or Error if the underlying computation did so."
ForkJoinTask,invokeAll(Collection<T> tasks),static <T extends ForkJoinTask<?>>Collection<T>,"Forks all tasks in the specified collection, returning when isDone holds for each task or an (unchecked) exception is encountered, in which case the exception is rethrown."
ForkJoinTask,invokeAll(ForkJoinTask<?>... tasks),static void,"Forks the given tasks, returning when isDone holds for each task or an (unchecked) exception is encountered, in which case the exception is rethrown."
ForkJoinTask,"invokeAll(ForkJoinTask<?> t1, ForkJoinTask<?> t2)",static void,"Forks the given tasks, returning when isDone holds for each task or an (unchecked) exception is encountered, in which case the exception is rethrown."
ForkJoinTask,isCancelled(),boolean,Returns true if this task was cancelled before it completed normally.
ForkJoinTask,isCompletedAbnormally(),boolean,Returns true if this task threw an exception or was cancelled.
ForkJoinTask,isCompletedNormally(),boolean,Returns true if this task completed without throwing an exception and was not cancelled.
ForkJoinTask,isDone(),boolean,Returns true if this task completed.
ForkJoinTask,join(),V,Returns the result of the computation when it is done.
ForkJoinTask,peekNextLocalTask(),protected static ForkJoinTask<?>,"Returns, but does not unschedule or execute, a task queued by the current thread but not yet executed, if one is immediately available."
ForkJoinTask,pollNextLocalTask(),protected static ForkJoinTask<?>,"Unschedules and returns, without executing, the next task queued by the current thread but not yet executed, if the current thread is operating in a ForkJoinPool."
ForkJoinTask,pollTask(),protected static ForkJoinTask<?>,"If the current thread is operating in a ForkJoinPool, unschedules and returns, without executing, the next task queued by the current thread but not yet executed, if one is available, or if not available, a task that was forked by some other thread, if available."
ForkJoinTask,quietlyComplete(),void,Completes this task normally without setting a value.
ForkJoinTask,quietlyInvoke(),void,"Commences performing this task and awaits its completion if necessary, without returning its result or throwing its exception."
ForkJoinTask,quietlyJoin(),void,"Joins this task, without returning its result or throwing its exception."
ForkJoinTask,reinitialize(),void,"Resets the internal bookkeeping state of this task, allowing a subsequent fork."
ForkJoinTask,setForkJoinTaskTag(short tag),short,Atomically sets the tag value for this task.
ForkJoinTask,setRawResult(V value),protected abstract void,Forces the given value to be returned as a result.
ForkJoinTask,tryUnfork(),boolean,Tries to unschedule this task for execution.
ForkJoinWorkerThread,getPool(),ForkJoinPool,Returns the pool hosting this thread.
ForkJoinWorkerThread,getPoolIndex(),int,Returns the unique index number of this thread in its pool.
ForkJoinWorkerThread,onStart(),protected void,Initializes internal state after construction but before processing any tasks.
ForkJoinWorkerThread,onTermination(Throwable exception),protected void,Performs cleanup associated with termination of this worker thread.
ForkJoinWorkerThread,run(),void,"This method is required to be public, but should never be called explicitly."
FutureTask,cancel(boolean mayInterruptIfRunning),boolean,Attempts to cancel execution of this task.
FutureTask,done(),protected void,Protected method invoked when this task transitions to state isDone (whether normally or via cancellation).
FutureTask,get(),V,"Waits if necessary for the computation to complete, and then retrieves its result."
FutureTask,"get(long timeout, TimeUnit unit)",V,"Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available."
FutureTask,isCancelled(),boolean,Returns true if this task was cancelled before it completed normally.
FutureTask,isDone(),boolean,Returns true if this task completed.
FutureTask,run(),void,Sets this Future to the result of its computation unless it has been cancelled.
FutureTask,runAndReset(),protected boolean,"Executes the computation without setting its result, and then resets this future to initial state, failing to do so if the computation encounters an exception or is cancelled."
FutureTask,set(V v),protected void,Sets the result of this future to the given value unless this future has already been set or has been cancelled.
FutureTask,setException(Throwable t),protected void,"Causes this future to report an ExecutionException with the given throwable as its cause, unless this future has already been set or has been cancelled."
LinkedBlockingDeque,add(E e),boolean,Inserts the specified element at the end of this deque unless it would violate capacity restrictions.
LinkedBlockingDeque,addFirst(E e),void,"Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available."
LinkedBlockingDeque,addLast(E e),void,"Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available."
LinkedBlockingDeque,clear(),void,Atomically removes all of the elements from this deque.
LinkedBlockingDeque,contains(Object o),boolean,Returns true if this deque contains the specified element.
LinkedBlockingDeque,descendingIterator(),Iterator<E>,Returns an iterator over the elements in this deque in reverse sequential order.
LinkedBlockingDeque,drainTo(Collection<? super E> c),int,Removes all available elements from this queue and adds them to the given collection.
LinkedBlockingDeque,"drainTo(Collection<? super E> c, int maxElements)",int,Removes at most the given number of available elements from this queue and adds them to the given collection.
LinkedBlockingDeque,element(),E,"Retrieves, but does not remove, the head of the queue represented by this deque."
LinkedBlockingDeque,getFirst(),E,"Retrieves, but does not remove, the first element of this deque."
LinkedBlockingDeque,getLast(),E,"Retrieves, but does not remove, the last element of this deque."
LinkedBlockingDeque,iterator(),Iterator<E>,Returns an iterator over the elements in this deque in proper sequence.
LinkedBlockingDeque,offer(E e),boolean,"Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available."
LinkedBlockingDeque,"offer(E e, long timeout, TimeUnit unit)",boolean,"Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque), waiting up to the specified wait time if necessary for space to become available."
LinkedBlockingDeque,offerFirst(E e),boolean,"Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available."
LinkedBlockingDeque,"offerFirst(E e, long timeout, TimeUnit unit)",boolean,"Inserts the specified element at the front of this deque, waiting up to the specified wait time if necessary for space to become available."
LinkedBlockingDeque,offerLast(E e),boolean,"Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available."
LinkedBlockingDeque,"offerLast(E e, long timeout, TimeUnit unit)",boolean,"Inserts the specified element at the end of this deque, waiting up to the specified wait time if necessary for space to become available."
LinkedBlockingDeque,peek(),E,"Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty."
LinkedBlockingDeque,peekFirst(),E,"Retrieves, but does not remove, the first element of this deque, or returns null if this deque is empty."
LinkedBlockingDeque,peekLast(),E,"Retrieves, but does not remove, the last element of this deque, or returns null if this deque is empty."
LinkedBlockingDeque,poll(),E,"Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty."
LinkedBlockingDeque,"poll(long timeout, TimeUnit unit)",E,"Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), waiting up to the specified wait time if necessary for an element to become available."
LinkedBlockingDeque,pollFirst(),E,"Retrieves and removes the first element of this deque, or returns null if this deque is empty."
LinkedBlockingDeque,"pollFirst(long timeout, TimeUnit unit)",E,"Retrieves and removes the first element of this deque, waiting up to the specified wait time if necessary for an element to become available."
LinkedBlockingDeque,pollLast(),E,"Retrieves and removes the last element of this deque, or returns null if this deque is empty."
LinkedBlockingDeque,"pollLast(long timeout, TimeUnit unit)",E,"Retrieves and removes the last element of this deque, waiting up to the specified wait time if necessary for an element to become available."
LinkedBlockingDeque,pop(),E,Pops an element from the stack represented by this deque.
LinkedBlockingDeque,push(E e),void,"Pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available."
LinkedBlockingDeque,put(E e),void,"Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque), waiting if necessary for space to become available."
LinkedBlockingDeque,putFirst(E e),void,"Inserts the specified element at the front of this deque, waiting if necessary for space to become available."
LinkedBlockingDeque,putLast(E e),void,"Inserts the specified element at the end of this deque, waiting if necessary for space to become available."
LinkedBlockingDeque,remainingCapacity(),int,Returns the number of additional elements that this deque can ideally (in the absence of memory or resource constraints) accept without blocking.
LinkedBlockingDeque,remove(),E,Retrieves and removes the head of the queue represented by this deque.
LinkedBlockingDeque,remove(Object o),boolean,Removes the first occurrence of the specified element from this deque.
LinkedBlockingDeque,removeFirst(),E,Retrieves and removes the first element of this deque.
LinkedBlockingDeque,removeFirstOccurrence(Object o),boolean,Removes the first occurrence of the specified element from this deque.
LinkedBlockingDeque,removeLast(),E,Retrieves and removes the last element of this deque.
LinkedBlockingDeque,removeLastOccurrence(Object o),boolean,Removes the last occurrence of the specified element from this deque.
LinkedBlockingDeque,size(),int,Returns the number of elements in this deque.
LinkedBlockingDeque,spliterator(),Spliterator<E>,Returns a Spliterator over the elements in this deque.
LinkedBlockingDeque,take(),E,"Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), waiting if necessary until an element becomes available."
LinkedBlockingDeque,takeFirst(),E,"Retrieves and removes the first element of this deque, waiting if necessary until an element becomes available."
LinkedBlockingDeque,takeLast(),E,"Retrieves and removes the last element of this deque, waiting if necessary until an element becomes available."
LinkedBlockingDeque,toArray(),Object[],"Returns an array containing all of the elements in this deque, in proper sequence (from first to last element)."
LinkedBlockingDeque,toArray(T[] a),<T> T[],"Returns an array containing all of the elements in this deque, in proper sequence; the runtime type of the returned array is that of the specified array."
LinkedBlockingDeque,toString(),String,Returns a string representation of this collection.
LinkedBlockingQueue,clear(),void,Atomically removes all of the elements from this queue.
LinkedBlockingQueue,contains(Object o),boolean,Returns true if this queue contains the specified element.
LinkedBlockingQueue,drainTo(Collection<? super E> c),int,Removes all available elements from this queue and adds them to the given collection.
LinkedBlockingQueue,"drainTo(Collection<? super E> c, int maxElements)",int,Removes at most the given number of available elements from this queue and adds them to the given collection.
LinkedBlockingQueue,iterator(),Iterator<E>,Returns an iterator over the elements in this queue in proper sequence.
LinkedBlockingQueue,offer(E e),boolean,"Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning true upon success and false if this queue is full."
LinkedBlockingQueue,"offer(E e, long timeout, TimeUnit unit)",boolean,"Inserts the specified element at the tail of this queue, waiting if necessary up to the specified wait time for space to become available."
LinkedBlockingQueue,peek(),E,"Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty."
LinkedBlockingQueue,poll(),E,"Retrieves and removes the head of this queue, or returns null if this queue is empty."
LinkedBlockingQueue,"poll(long timeout, TimeUnit unit)",E,"Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available."
LinkedBlockingQueue,put(E e),void,"Inserts the specified element at the tail of this queue, waiting if necessary for space to become available."
LinkedBlockingQueue,remainingCapacity(),int,Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking.
LinkedBlockingQueue,remove(Object o),boolean,"Removes a single instance of the specified element from this queue, if it is present."
LinkedBlockingQueue,size(),int,Returns the number of elements in this queue.
LinkedBlockingQueue,spliterator(),Spliterator<E>,Returns a Spliterator over the elements in this queue.
LinkedBlockingQueue,take(),E,"Retrieves and removes the head of this queue, waiting if necessary until an element becomes available."
LinkedBlockingQueue,toArray(),Object[],"Returns an array containing all of the elements in this queue, in proper sequence."
LinkedBlockingQueue,toArray(T[] a),<T> T[],"Returns an array containing all of the elements in this queue, in proper sequence; the runtime type of the returned array is that of the specified array."
LinkedBlockingQueue,toString(),String,Returns a string representation of this collection.
LinkedTransferQueue,add(E e),boolean,Inserts the specified element at the tail of this queue.
LinkedTransferQueue,contains(Object o),boolean,Returns true if this queue contains the specified element.
LinkedTransferQueue,drainTo(Collection<? super E> c),int,Removes all available elements from this queue and adds them to the given collection.
LinkedTransferQueue,"drainTo(Collection<? super E> c, int maxElements)",int,Removes at most the given number of available elements from this queue and adds them to the given collection.
LinkedTransferQueue,getWaitingConsumerCount(),int,Returns an estimate of the number of consumers waiting to receive elements via BlockingQueue.take() or timed poll.
LinkedTransferQueue,hasWaitingConsumer(),boolean,Returns true if there is at least one consumer waiting to receive an element via BlockingQueue.take() or timed poll.
LinkedTransferQueue,isEmpty(),boolean,Returns true if this queue contains no elements.
LinkedTransferQueue,iterator(),Iterator<E>,Returns an iterator over the elements in this queue in proper sequence.
LinkedTransferQueue,offer(E e),boolean,Inserts the specified element at the tail of this queue.
LinkedTransferQueue,"offer(E e, long timeout, TimeUnit unit)",boolean,Inserts the specified element at the tail of this queue.
LinkedTransferQueue,peek(),E,"Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty."
LinkedTransferQueue,poll(),E,"Retrieves and removes the head of this queue, or returns null if this queue is empty."
LinkedTransferQueue,"poll(long timeout, TimeUnit unit)",E,"Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available."
LinkedTransferQueue,put(E e),void,Inserts the specified element at the tail of this queue.
LinkedTransferQueue,remainingCapacity(),int,Always returns Integer.MAX_VALUE because a LinkedTransferQueue is not capacity constrained.
LinkedTransferQueue,remove(Object o),boolean,"Removes a single instance of the specified element from this queue, if it is present."
LinkedTransferQueue,size(),int,Returns the number of elements in this queue.
LinkedTransferQueue,spliterator(),Spliterator<E>,Returns a Spliterator over the elements in this queue.
LinkedTransferQueue,take(),E,"Retrieves and removes the head of this queue, waiting if necessary until an element becomes available."
LinkedTransferQueue,transfer(E e),void,"Transfers the element to a consumer, waiting if necessary to do so."
LinkedTransferQueue,tryTransfer(E e),boolean,"Transfers the element to a waiting consumer immediately, if possible."
LinkedTransferQueue,"tryTransfer(E e, long timeout, TimeUnit unit)",boolean,Transfers the element to a consumer if it is possible to do so before the timeout elapses.
Phaser,arrive(),int,"Arrives at this phaser, without waiting for others to arrive."
Phaser,arriveAndAwaitAdvance(),int,Arrives at this phaser and awaits others.
Phaser,arriveAndDeregister(),int,Arrives at this phaser and deregisters from it without waiting for others to arrive.
Phaser,awaitAdvance(int phase),int,"Awaits the phase of this phaser to advance from the given phase value, returning immediately if the current phase is not equal to the given phase value or this phaser is terminated."
Phaser,awaitAdvanceInterruptibly(int phase),int,"Awaits the phase of this phaser to advance from the given phase value, throwing InterruptedException if interrupted while waiting, or returning immediately if the current phase is not equal to the given phase value or this phaser is terminated."
Phaser,"awaitAdvanceInterruptibly(int phase, long timeout, TimeUnit unit)",int,"Awaits the phase of this phaser to advance from the given phase value or the given timeout to elapse, throwing InterruptedException if interrupted while waiting, or returning immediately if the current phase is not equal to the given phase value or this phaser is terminated."
Phaser,bulkRegister(int parties),int,Adds the given number of new unarrived parties to this phaser.
Phaser,forceTermination(),void,Forces this phaser to enter termination state.
Phaser,getArrivedParties(),int,Returns the number of registered parties that have arrived at the current phase of this phaser.
Phaser,getParent(),Phaser,"Returns the parent of this phaser, or null if none."
Phaser,getPhase(),int,Returns the current phase number.
Phaser,getRegisteredParties(),int,Returns the number of parties registered at this phaser.
Phaser,getRoot(),Phaser,"Returns the root ancestor of this phaser, which is the same as this phaser if it has no parent."
Phaser,getUnarrivedParties(),int,Returns the number of registered parties that have not yet arrived at the current phase of this phaser.
Phaser,isTerminated(),boolean,Returns true if this phaser has been terminated.
Phaser,"onAdvance(int phase, int registeredParties)",protected boolean,"Overridable method to perform an action upon impending phase advance, and to control termination."
Phaser,register(),int,Adds a new unarrived party to this phaser.
Phaser,toString(),String,"Returns a string identifying this phaser, as well as its state."
PriorityBlockingQueue,add(E e),boolean,Inserts the specified element into this priority queue.
PriorityBlockingQueue,clear(),void,Atomically removes all of the elements from this queue.
PriorityBlockingQueue,comparator(),Comparator<? super E>,"Returns the comparator used to order the elements in this queue, or null if this queue uses the natural ordering of its elements."
PriorityBlockingQueue,contains(Object o),boolean,Returns true if this queue contains the specified element.
PriorityBlockingQueue,drainTo(Collection<? super E> c),int,Removes all available elements from this queue and adds them to the given collection.
PriorityBlockingQueue,"drainTo(Collection<? super E> c, int maxElements)",int,Removes at most the given number of available elements from this queue and adds them to the given collection.
PriorityBlockingQueue,iterator(),Iterator<E>,Returns an iterator over the elements in this queue.
PriorityBlockingQueue,offer(E e),boolean,Inserts the specified element into this priority queue.
PriorityBlockingQueue,"offer(E e, long timeout, TimeUnit unit)",boolean,Inserts the specified element into this priority queue.
PriorityBlockingQueue,peek(),E,"Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty."
PriorityBlockingQueue,poll(),E,"Retrieves and removes the head of this queue, or returns null if this queue is empty."
PriorityBlockingQueue,"poll(long timeout, TimeUnit unit)",E,"Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available."
PriorityBlockingQueue,put(E e),void,Inserts the specified element into this priority queue.
PriorityBlockingQueue,remainingCapacity(),int,Always returns Integer.MAX_VALUE because a PriorityBlockingQueue is not capacity constrained.
PriorityBlockingQueue,remove(Object o),boolean,"Removes a single instance of the specified element from this queue, if it is present."
PriorityBlockingQueue,size(),int,Returns the number of elements in this collection.
PriorityBlockingQueue,spliterator(),Spliterator<E>,Returns a Spliterator over the elements in this queue.
PriorityBlockingQueue,take(),E,"Retrieves and removes the head of this queue, waiting if necessary until an element becomes available."
PriorityBlockingQueue,toArray(),Object[],Returns an array containing all of the elements in this queue.
PriorityBlockingQueue,toArray(T[] a),<T> T[],Returns an array containing all of the elements in this queue; the runtime type of the returned array is that of the specified array.
PriorityBlockingQueue,toString(),String,Returns a string representation of this collection.
RecursiveAction,compute(),protected abstract void,The main computation performed by this task.
RecursiveAction,exec(),protected boolean,Implements execution conventions for RecursiveActions.
RecursiveAction,getRawResult(),Void,Always returns null.
RecursiveAction,setRawResult(Void mustBeNull),protected void,Requires null completion value.
RecursiveTask,compute(),protected abstract V,The main computation performed by this task.
RecursiveTask,exec(),protected boolean,Implements execution conventions for RecursiveTask.
RecursiveTask,getRawResult(),V,"Returns the result that would be returned by ForkJoinTask.join(), even if this task completed abnormally, or null if this task is not known to have been completed."
RecursiveTask,setRawResult(V value),protected void,Forces the given value to be returned as a result.
ScheduledThreadPoolExecutor,"decorateTask(Callable<V> callable, RunnableScheduledFuture<V> task)",protected <V> RunnableScheduledFuture<V>,Modifies or replaces the task used to execute a callable.
ScheduledThreadPoolExecutor,"decorateTask(Runnable runnable, RunnableScheduledFuture<V> task)",protected <V> RunnableScheduledFuture<V>,Modifies or replaces the task used to execute a runnable.
ScheduledThreadPoolExecutor,execute(Runnable command),void,Executes command with zero required delay.
ScheduledThreadPoolExecutor,getContinueExistingPeriodicTasksAfterShutdownPolicy(),boolean,Gets the policy on whether to continue executing existing periodic tasks even when this executor has been shutdown.
ScheduledThreadPoolExecutor,getExecuteExistingDelayedTasksAfterShutdownPolicy(),boolean,Gets the policy on whether to execute existing delayed tasks even when this executor has been shutdown.
ScheduledThreadPoolExecutor,getQueue(),BlockingQueue<Runnable>,Returns the task queue used by this executor.
ScheduledThreadPoolExecutor,getRemoveOnCancelPolicy(),boolean,Gets the policy on whether cancelled tasks should be immediately removed from the work queue at time of cancellation.
ScheduledThreadPoolExecutor,"schedule(Callable<V> callable, long delay, TimeUnit unit)",<V> ScheduledFuture<V>,Creates and executes a ScheduledFuture that becomes enabled after the given delay.
ScheduledThreadPoolExecutor,"schedule(Runnable command, long delay, TimeUnit unit)",ScheduledFuture<?>,Creates and executes a one-shot action that becomes enabled after the given delay.
ScheduledThreadPoolExecutor,"scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)",ScheduledFuture<?>,"Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given period; that is executions will commence after initialDelay then initialDelay+period, then initialDelay + 2 * period, and so on."
ScheduledThreadPoolExecutor,"scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit)",ScheduledFuture<?>,"Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given delay between the termination of one execution and the commencement of the next."
ScheduledThreadPoolExecutor,setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean value),void,Sets the policy on whether to continue executing existing periodic tasks even when this executor has been shutdown.
ScheduledThreadPoolExecutor,setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean value),void,Sets the policy on whether to execute existing delayed tasks even when this executor has been shutdown.
ScheduledThreadPoolExecutor,setRemoveOnCancelPolicy(boolean value),void,Sets the policy on whether cancelled tasks should be immediately removed from the work queue at time of cancellation.
ScheduledThreadPoolExecutor,shutdown(),void,"Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted."
ScheduledThreadPoolExecutor,shutdownNow(),List<Runnable>,"Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution."
ScheduledThreadPoolExecutor,submit(Callable<T> task),<T> Future<T>,Submits a value-returning task for execution and returns a Future representing the pending results of the task.
ScheduledThreadPoolExecutor,submit(Runnable task),Future<?>,Submits a Runnable task for execution and returns a Future representing that task.
ScheduledThreadPoolExecutor,"submit(Runnable task, T result)",<T> Future<T>,Submits a Runnable task for execution and returns a Future representing that task.
Semaphore,acquire(),void,"Acquires a permit from this semaphore, blocking until one is available, or the thread is interrupted."
Semaphore,acquire(int permits),void,"Acquires the given number of permits from this semaphore, blocking until all are available, or the thread is interrupted."
Semaphore,acquireUninterruptibly(),void,"Acquires a permit from this semaphore, blocking until one is available."
Semaphore,acquireUninterruptibly(int permits),void,"Acquires the given number of permits from this semaphore, blocking until all are available."
Semaphore,availablePermits(),int,Returns the current number of permits available in this semaphore.
Semaphore,drainPermits(),int,Acquires and returns all permits that are immediately available.
Semaphore,getQueuedThreads(),protected Collection<Thread>,Returns a collection containing threads that may be waiting to acquire.
Semaphore,getQueueLength(),int,Returns an estimate of the number of threads waiting to acquire.
Semaphore,hasQueuedThreads(),boolean,Queries whether any threads are waiting to acquire.
Semaphore,isFair(),boolean,Returns true if this semaphore has fairness set true.
Semaphore,reducePermits(int reduction),protected void,Shrinks the number of available permits by the indicated reduction.
Semaphore,release(),void,"Releases a permit, returning it to the semaphore."
Semaphore,release(int permits),void,"Releases the given number of permits, returning them to the semaphore."
Semaphore,toString(),String,"Returns a string identifying this semaphore, as well as its state."
Semaphore,tryAcquire(),boolean,"Acquires a permit from this semaphore, only if one is available at the time of invocation."
Semaphore,tryAcquire(int permits),boolean,"Acquires the given number of permits from this semaphore, only if all are available at the time of invocation."
Semaphore,"tryAcquire(int permits, long timeout, TimeUnit unit)",boolean,"Acquires the given number of permits from this semaphore, if all become available within the given waiting time and the current thread has not been interrupted."
Semaphore,"tryAcquire(long timeout, TimeUnit unit)",boolean,"Acquires a permit from this semaphore, if one becomes available within the given waiting time and the current thread has not been interrupted."
SynchronousQueue,clear(),void,Does nothing.
SynchronousQueue,contains(Object o),boolean,Always returns false.
SynchronousQueue,containsAll(Collection<?> c),boolean,Returns false unless the given collection is empty.
SynchronousQueue,drainTo(Collection<? super E> c),int,Removes all available elements from this queue and adds them to the given collection.
SynchronousQueue,"drainTo(Collection<? super E> c, int maxElements)",int,Removes at most the given number of available elements from this queue and adds them to the given collection.
SynchronousQueue,isEmpty(),boolean,Always returns true.
SynchronousQueue,iterator(),Iterator<E>,Returns an empty iterator in which hasNext always returns false.
SynchronousQueue,offer(E e),boolean,"Inserts the specified element into this queue, if another thread is waiting to receive it."
SynchronousQueue,"offer(E e, long timeout, TimeUnit unit)",boolean,"Inserts the specified element into this queue, waiting if necessary up to the specified wait time for another thread to receive it."
SynchronousQueue,peek(),E,Always returns null.
SynchronousQueue,poll(),E,"Retrieves and removes the head of this queue, if another thread is currently making an element available."
SynchronousQueue,"poll(long timeout, TimeUnit unit)",E,"Retrieves and removes the head of this queue, waiting if necessary up to the specified wait time, for another thread to insert it."
SynchronousQueue,put(E e),void,"Adds the specified element to this queue, waiting if necessary for another thread to receive it."
SynchronousQueue,remainingCapacity(),int,Always returns zero.
SynchronousQueue,remove(Object o),boolean,Always returns false.
SynchronousQueue,removeAll(Collection<?> c),boolean,Always returns false.
SynchronousQueue,retainAll(Collection<?> c),boolean,Always returns false.
SynchronousQueue,size(),int,Always returns zero.
SynchronousQueue,spliterator(),Spliterator<E>,Returns an empty spliterator in which calls to Spliterator.trySplit() always return null.
SynchronousQueue,take(),E,"Retrieves and removes the head of this queue, waiting if necessary for another thread to insert it."
SynchronousQueue,toArray(),Object[],Returns a zero-length array.
SynchronousQueue,toArray(T[] a),<T> T[],Sets the zeroeth element of the specified array to null (if the array has non-zero length) and returns it.
ThreadLocalRandom,current(),static ThreadLocalRandom,Returns the current thread's ThreadLocalRandom.
ThreadLocalRandom,doubles(),DoubleStream,"Returns an effectively unlimited stream of pseudorandom double values, each between zero (inclusive) and one (exclusive)."
ThreadLocalRandom,"doubles(double randomNumberOrigin, double randomNumberBound)",DoubleStream,"Returns an effectively unlimited stream of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive)."
ThreadLocalRandom,doubles(long streamSize),DoubleStream,"Returns a stream producing the given streamSize number of pseudorandom double values, each between zero (inclusive) and one (exclusive)."
ThreadLocalRandom,"doubles(long streamSize, double randomNumberOrigin, double randomNumberBound)",DoubleStream,"Returns a stream producing the given streamSize number of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive)."
ThreadLocalRandom,ints(),IntStream,Returns an effectively unlimited stream of pseudorandom int values.
ThreadLocalRandom,"ints(int randomNumberOrigin, int randomNumberBound)",IntStream,"Returns an effectively unlimited stream of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive)."
ThreadLocalRandom,ints(long streamSize),IntStream,Returns a stream producing the given streamSize number of pseudorandom int values.
ThreadLocalRandom,"ints(long streamSize, int randomNumberOrigin, int randomNumberBound)",IntStream,"Returns a stream producing the given streamSize number of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive)."
ThreadLocalRandom,longs(),LongStream,Returns an effectively unlimited stream of pseudorandom long values.
ThreadLocalRandom,longs(long streamSize),LongStream,Returns a stream producing the given streamSize number of pseudorandom long values.
ThreadLocalRandom,"longs(long randomNumberOrigin, long randomNumberBound)",LongStream,"Returns an effectively unlimited stream of pseudorandom long values, each conforming to the given origin (inclusive) and bound (exclusive)."
ThreadLocalRandom,"longs(long streamSize, long randomNumberOrigin, long randomNumberBound)",LongStream,"Returns a stream producing the given streamSize number of pseudorandom long, each conforming to the given origin (inclusive) and bound (exclusive)."
ThreadLocalRandom,next(int bits),protected int,Generates the next pseudorandom number.
ThreadLocalRandom,nextBoolean(),boolean,Returns a pseudorandom boolean value.
ThreadLocalRandom,nextDouble(),double,Returns a pseudorandom double value between zero (inclusive) and one (exclusive).
ThreadLocalRandom,nextDouble(double bound),double,Returns a pseudorandom double value between 0.0 (inclusive) and the specified bound (exclusive).
ThreadLocalRandom,"nextDouble(double origin, double bound)",double,Returns a pseudorandom double value between the specified origin (inclusive) and bound (exclusive).
ThreadLocalRandom,nextFloat(),float,Returns a pseudorandom float value between zero (inclusive) and one (exclusive).
ThreadLocalRandom,nextGaussian(),double,"Returns the next pseudorandom, Gaussian (""normally"") distributed double value with mean 0.0 and standard deviation 1.0 from this random number generator's sequence."
ThreadLocalRandom,nextInt(),int,Returns a pseudorandom int value.
ThreadLocalRandom,nextInt(int bound),int,Returns a pseudorandom int value between zero (inclusive) and the specified bound (exclusive).
ThreadLocalRandom,"nextInt(int origin, int bound)",int,Returns a pseudorandom int value between the specified origin (inclusive) and the specified bound (exclusive).
ThreadLocalRandom,nextLong(),long,Returns a pseudorandom long value.
ThreadLocalRandom,nextLong(long bound),long,Returns a pseudorandom long value between zero (inclusive) and the specified bound (exclusive).
ThreadLocalRandom,"nextLong(long origin, long bound)",long,Returns a pseudorandom long value between the specified origin (inclusive) and the specified bound (exclusive).
ThreadLocalRandom,setSeed(long seed),void,Throws UnsupportedOperationException.
ThreadPoolExecutor,"afterExecute(Runnable r, Throwable t)",protected void,Method invoked upon completion of execution of the given Runnable.
ThreadPoolExecutor,allowCoreThreadTimeOut(boolean value),void,"Sets the policy governing whether core threads may time out and terminate if no tasks arrive within the keep-alive time, being replaced if needed when new tasks arrive."
ThreadPoolExecutor,allowsCoreThreadTimeOut(),boolean,"Returns true if this pool allows core threads to time out and terminate if no tasks arrive within the keepAlive time, being replaced if needed when new tasks arrive."
ThreadPoolExecutor,"awaitTermination(long timeout, TimeUnit unit)",boolean,"Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first."
ThreadPoolExecutor,"beforeExecute(Thread t, Runnable r)",protected void,Method invoked prior to executing the given Runnable in the given thread.
ThreadPoolExecutor,execute(Runnable command),void,Executes the given task sometime in the future.
ThreadPoolExecutor,finalize(),protected void,Invokes shutdown when this executor is no longer referenced and it has no threads.
ThreadPoolExecutor,getActiveCount(),int,Returns the approximate number of threads that are actively executing tasks.
ThreadPoolExecutor,getCompletedTaskCount(),long,Returns the approximate total number of tasks that have completed execution.
ThreadPoolExecutor,getCorePoolSize(),int,Returns the core number of threads.
ThreadPoolExecutor,getKeepAliveTime(TimeUnit unit),long,"Returns the thread keep-alive time, which is the amount of time that threads in excess of the core pool size may remain idle before being terminated."
ThreadPoolExecutor,getLargestPoolSize(),int,Returns the largest number of threads that have ever simultaneously been in the pool.
ThreadPoolExecutor,getMaximumPoolSize(),int,Returns the maximum allowed number of threads.
ThreadPoolExecutor,getPoolSize(),int,Returns the current number of threads in the pool.
ThreadPoolExecutor,getQueue(),BlockingQueue<Runnable>,Returns the task queue used by this executor.
ThreadPoolExecutor,getRejectedExecutionHandler(),RejectedExecutionHandler,Returns the current handler for unexecutable tasks.
ThreadPoolExecutor,getTaskCount(),long,Returns the approximate total number of tasks that have ever been scheduled for execution.
ThreadPoolExecutor,getThreadFactory(),ThreadFactory,Returns the thread factory used to create new threads.
ThreadPoolExecutor,isShutdown(),boolean,Returns true if this executor has been shut down.
ThreadPoolExecutor,isTerminated(),boolean,Returns true if all tasks have completed following shut down.
ThreadPoolExecutor,isTerminating(),boolean,Returns true if this executor is in the process of terminating after shutdown() or shutdownNow() but has not completely terminated.
ThreadPoolExecutor,prestartAllCoreThreads(),int,"Starts all core threads, causing them to idly wait for work."
ThreadPoolExecutor,prestartCoreThread(),boolean,"Starts a core thread, causing it to idly wait for work."
ThreadPoolExecutor,purge(),void,Tries to remove from the work queue all Future tasks that have been cancelled.
ThreadPoolExecutor,remove(Runnable task),boolean,"Removes this task from the executor's internal queue if it is present, thus causing it not to be run if it has not already started."
ThreadPoolExecutor,setCorePoolSize(int corePoolSize),void,Sets the core number of threads.
ThreadPoolExecutor,"setKeepAliveTime(long time, TimeUnit unit)",void,Sets the time limit for which threads may remain idle before being terminated.
ThreadPoolExecutor,setMaximumPoolSize(int maximumPoolSize),void,Sets the maximum allowed number of threads.
ThreadPoolExecutor,setRejectedExecutionHandler(RejectedExecutionHandler handler),void,Sets a new handler for unexecutable tasks.
ThreadPoolExecutor,setThreadFactory(ThreadFactory threadFactory),void,Sets the thread factory used to create new threads.
ThreadPoolExecutor,shutdown(),void,"Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted."
ThreadPoolExecutor,shutdownNow(),List<Runnable>,"Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution."
ThreadPoolExecutor,terminated(),protected void,Method invoked when the Executor has terminated.
ThreadPoolExecutor,toString(),String,"Returns a string identifying this pool, as well as its state, including indications of run state and estimated worker and task counts."
ThreadPoolExecutor.AbortPolicy,"rejectedExecution(Runnable r, ThreadPoolExecutor e)",void,Always throws RejectedExecutionException.
ThreadPoolExecutor.CallerRunsPolicy,"rejectedExecution(Runnable r, ThreadPoolExecutor e)",void,"Executes task r in the caller's thread, unless the executor has been shut down, in which case the task is discarded."
ThreadPoolExecutor.DiscardOldestPolicy,"rejectedExecution(Runnable r, ThreadPoolExecutor e)",void,"Obtains and ignores the next task that the executor would otherwise execute, if one is immediately available, and then retries execution of task r, unless the executor is shut down, in which case task r is instead discarded."
ThreadPoolExecutor.DiscardPolicy,"rejectedExecution(Runnable r, ThreadPoolExecutor e)",void,"Does nothing, which has the effect of discarding task r."
