Sample: ArrayBlockingQueue_1
----------------------------------------------------------------
stdout:
[Hello]

================================================================

Sample: ArrayBlockingQueue_3
----------------------------------------------------------------
stdout:
true
[Hello]

================================================================

Sample: ArrayBlockingQueue_4
----------------------------------------------------------------
stdout:
Hello
World
null

================================================================

Sample: ArrayBlockingQueue_5
----------------------------------------------------------------
stdout:
Hello

================================================================

Sample: CompletableFuture_1
----------------------------------------------------------------
stdout:
Running in a separate thread

================================================================

Sample: CompletableFuture_2
----------------------------------------------------------------
================================================================

Sample: CompletableFuture_3
----------------------------------------------------------------
stdout:
Received: Hello, World!

================================================================

Sample: CompletableFuture_4
----------------------------------------------------------------
================================================================

Sample: CompletableFuture_5
----------------------------------------------------------------
stdout:
Hello, World!
The result is: Hello, World!

================================================================

Sample: ConcurrentHashMap_2
----------------------------------------------------------------
stdout:
value1

================================================================

Sample: ConcurrentHashMap_3
----------------------------------------------------------------
stdout:
Value for key1: value1
Value for key2: value2
Value for key3: null

================================================================

Sample: ConcurrentHashMap_4
----------------------------------------------------------------
stdout:
Initial map: {One=1, Two=2, Three=3}
Removed value: 2
Updated map: {One=1, Three=3}

================================================================

Sample: ConcurrentHashMap_5
----------------------------------------------------------------
stdout:
true
newValue

================================================================

Sample: ConcurrentHashMap_KeySetView_3
----------------------------------------------------------------
stdout:
Before clear: [key1, key2]
After clear: []

================================================================

Sample: ConcurrentHashMap_KeySetView_4
----------------------------------------------------------------
stdout:
true
false

================================================================

Sample: ConcurrentHashMap_KeySetView_5
----------------------------------------------------------------
stdout:
true
false

================================================================

Sample: ConcurrentHashMap_KeySetView_6
----------------------------------------------------------------
stdout:
false

================================================================

Sample: ConcurrentHashMap_KeySetView_7
----------------------------------------------------------------
stdout:
Is the keySetView empty? false
Is the keySetView empty after clearing the map? true

================================================================

Sample: ConcurrentHashMap_KeySetView_9
----------------------------------------------------------------
stdout:
Before remove: [key1, key2]
After remove: [key2]
Is key1 removed? true

================================================================

Sample: ConcurrentHashMap_KeySetView_10
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ConcurrentHashMap_KeySetView_10.java:14: error: incompatible types: Set<String> cannot be converted to KeySetView<String,Integer>
        KeySetView<String, Integer> keySet = map.keySet();
                                                       ^
1 error


================================================================

Sample: ConcurrentHashMap_KeySetView_11
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ConcurrentHashMap_KeySetView_11.java:14: error: cannot infer type arguments for KeySetView<>
        Set<String> keysToRetain = new ConcurrentHashMap.KeySetView<>(map, true).newKeySet();
                                   ^
  reason: cannot infer type-variable(s) K,V
    (argument mismatch; ConcurrentMap<String,Integer> cannot be converted to ConcurrentHashMap<K,V>)
  where K,V are type-variables:
    K extends Object declared in class KeySetView
    V extends Object declared in class KeySetView
1 error


================================================================

Sample: ConcurrentHashMap_KeySetView_12
----------------------------------------------------------------
stdout:
Size of the key set view: 3

================================================================

Sample: ConcurrentHashMap_KeySetView_13
----------------------------------------------------------------
stdout:
One
Two
Three

================================================================

Sample: ConcurrentHashMap_KeySetView_14
----------------------------------------------------------------
stdout:
One
Two
Three

================================================================

Sample: ConcurrentHashMap_KeySetView_17
----------------------------------------------------------------
stdout:
Before clear: [key1, key2]
After clear: []

================================================================

Sample: ConcurrentHashMap_KeySetView_18
----------------------------------------------------------------
stdout:
true
false

================================================================

Sample: ConcurrentHashMap_KeySetView_19
----------------------------------------------------------------
stdout:
true
false

================================================================

Sample: ConcurrentHashMap_KeySetView_20
----------------------------------------------------------------
stdout:
false

================================================================

Sample: ConcurrentHashMap_KeySetView_21
----------------------------------------------------------------
stdout:
Is the keySetView empty? false
Is the keySetView empty after clearing the map? true

================================================================

Sample: ConcurrentHashMap_KeySetView_23
----------------------------------------------------------------
stdout:
Before remove: [key1, key2]
After remove: [key2]
Is key1 removed? true

================================================================

Sample: ConcurrentHashMap_KeySetView_24
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ConcurrentHashMap_KeySetView_24.java:14: error: incompatible types: Set<String> cannot be converted to KeySetView<String,Integer>
        KeySetView<String, Integer> keySet = map.keySet();
                                                       ^
1 error


================================================================

Sample: ConcurrentHashMap_KeySetView_25
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ConcurrentHashMap_KeySetView_25.java:14: error: cannot infer type arguments for KeySetView<>
        Set<String> keysToRetain = new ConcurrentHashMap.KeySetView<>(map, true).newKeySet();
                                   ^
  reason: cannot infer type-variable(s) K,V
    (argument mismatch; ConcurrentMap<String,Integer> cannot be converted to ConcurrentHashMap<K,V>)
  where K,V are type-variables:
    K extends Object declared in class KeySetView
    V extends Object declared in class KeySetView
1 error


================================================================

Sample: ConcurrentHashMap_KeySetView_26
----------------------------------------------------------------
stdout:
Size of the key set view: 3

================================================================

Sample: ConcurrentHashMap_KeySetView_27
----------------------------------------------------------------
stdout:
One
Two
Three

================================================================

Sample: ConcurrentHashMap_KeySetView_28
----------------------------------------------------------------
stdout:
One
Two
Three

================================================================

Sample: ConcurrentLinkedDeque_1
----------------------------------------------------------------
stdout:
[Hello]

================================================================

Sample: ConcurrentLinkedDeque_2
----------------------------------------------------------------
stdout:
true
[Hello]

================================================================

Sample: ConcurrentLinkedDeque_3
----------------------------------------------------------------
stdout:
Hello

================================================================

Sample: ConcurrentLinkedDeque_4
----------------------------------------------------------------
stdout:
Hello
World
null

================================================================

Sample: ConcurrentLinkedDeque_5
----------------------------------------------------------------
stdout:
Hello

================================================================

Sample: ConcurrentLinkedQueue_1
----------------------------------------------------------------
stdout:
[Hello]

================================================================

Sample: ConcurrentLinkedQueue_2
----------------------------------------------------------------
stdout:
[Hello]

================================================================

Sample: ConcurrentLinkedQueue_4
----------------------------------------------------------------
stdout:
Hello
World
null

================================================================

Sample: ConcurrentLinkedQueue_5
----------------------------------------------------------------
stdout:
Hello

================================================================

Sample: ConcurrentSkipListMap_3
----------------------------------------------------------------
stdout:
Initial Map: {One=1, Three=3, Two=2}
After clear(): {}

================================================================

Sample: ConcurrentSkipListMap_4
----------------------------------------------------------------
stdout:
Does the map contain the key 'key1'? true

================================================================

Sample: ConcurrentSkipListMap_5
----------------------------------------------------------------
stdout:
true

================================================================

Sample: ConcurrentSkipListSet_1
----------------------------------------------------------------
stdout:
true
[Hello]

================================================================

Sample: ConcurrentSkipListSet_2
----------------------------------------------------------------
stdout:
Before clear: [Hello, World]
After clear: []

================================================================

Sample: ConcurrentSkipListSet_3
----------------------------------------------------------------
stdout:
true
false

================================================================

Sample: ConcurrentSkipListSet_4
----------------------------------------------------------------
stdout:
Before removal: [Hello, World]
After removal: [World]

================================================================

Sample: ConcurrentSkipListSet_5
----------------------------------------------------------------
stdout:
2

================================================================

Sample: CopyOnWriteArrayList_1
----------------------------------------------------------------
stdout:
[Hello]

================================================================

Sample: CopyOnWriteArrayList_2
----------------------------------------------------------------
stdout:
[World, Hello]

================================================================

Sample: CopyOnWriteArrayList_3
----------------------------------------------------------------
stdout:
[Hello, World]
[]

================================================================

Sample: CopyOnWriteArrayList_4
----------------------------------------------------------------
stdout:
true
false

================================================================

Sample: CopyOnWriteArrayList_5
----------------------------------------------------------------
stdout:
Hello
World

================================================================

Sample: CopyOnWriteArrayList_6
----------------------------------------------------------------
stdout:
0
1
-1

================================================================

Sample: CopyOnWriteArrayList_7
----------------------------------------------------------------
stdout:
true
false

================================================================

Sample: CopyOnWriteArrayList_8
----------------------------------------------------------------
stdout:
[Hello, World]
[World]

================================================================

Sample: CopyOnWriteArrayList_9
----------------------------------------------------------------
stdout:
[Hello, World]
[World]

================================================================

Sample: CopyOnWriteArrayList_10
----------------------------------------------------------------
stdout:
[World]

================================================================

Sample: CopyOnWriteArrayList_11
----------------------------------------------------------------
stdout:
2

================================================================

Sample: CopyOnWriteArrayList_13
----------------------------------------------------------------
stdout:
Hello
World

================================================================

Sample: CopyOnWriteArrayList_14
----------------------------------------------------------------
stdout:
[Hello]
[Hello, World]
[Hello, World]

================================================================

Sample: CopyOnWriteArrayList_16
----------------------------------------------------------------
stdout:
Original list: [Hello, World]
List after replaceAll: [HELLO, WORLD]

================================================================

Sample: CopyOnWriteArrayList_17
----------------------------------------------------------------
stdout:
[Hello, Java, World]

================================================================

Sample: CopyOnWriteArrayList_19
----------------------------------------------------------------
stdout:
true
false

================================================================

Sample: CopyOnWriteArrayList_20
----------------------------------------------------------------
stdout:
Original list: [Hello, World, Java]
List after removing elements: [World]

================================================================

Sample: CopyOnWriteArrayList_21
----------------------------------------------------------------
stdout:
Original list: [Hello, World, Java]
Other list: [Hello, Java]
List after retainAll: [Hello, Java]
Result: true

================================================================

Sample: CopyOnWriteArrayList_24
----------------------------------------------------------------
stdout:
Before removing: [Hello, World, Java, Concurrent, Programming]
After removing: [Hello, World, Concurrent, Programming]

================================================================

Sample: CopyOnWriteArrayList_26
----------------------------------------------------------------
stdout:
Hello
World

================================================================

Sample: CopyOnWriteArrayList_27
----------------------------------------------------------------
stdout:
Hello
World

================================================================

Sample: CopyOnWriteArraySet_1
----------------------------------------------------------------
stdout:
[Hello]

================================================================

Sample: CopyOnWriteArraySet_2
----------------------------------------------------------------
stdout:
[Hello, World, Java, Programming]

================================================================

Sample: CopyOnWriteArraySet_3
----------------------------------------------------------------
stdout:
Before clear: [Hello, World]
After clear: []

================================================================

Sample: CopyOnWriteArraySet_4
----------------------------------------------------------------
stdout:
true
false

================================================================

Sample: CopyOnWriteArraySet_5
----------------------------------------------------------------
stdout:
true
false

================================================================

Sample: CopyOnWriteArraySet_6
----------------------------------------------------------------
stdout:
true
false

================================================================

Sample: CopyOnWriteArraySet_7
----------------------------------------------------------------
stdout:
Hello
World

================================================================

Sample: CopyOnWriteArraySet_8
----------------------------------------------------------------
stdout:
[Hello, World]
[World]

================================================================

Sample: CopyOnWriteArraySet_9
----------------------------------------------------------------
stdout:
Original Set: [Hello, World, Java]
Set after removeAll: [World]
Is removed: true

================================================================

Sample: CopyOnWriteArraySet_10
----------------------------------------------------------------
stdout:
Set 1: [Hello, World, Java]
Set 2: [Hello, Java]
Set 1 after retainAll: [Hello, Java]
Result: true

================================================================

Sample: CopyOnWriteArraySet_11
----------------------------------------------------------------
stdout:
2

================================================================

Sample: CopyOnWriteArraySet_12
----------------------------------------------------------------
stdout:
Hello
World

================================================================

Sample: CopyOnWriteArraySet_13
----------------------------------------------------------------
stdout:
Hello
World

================================================================

Sample: CopyOnWriteArraySet_14
----------------------------------------------------------------
stdout:
true

================================================================

Sample: CountDownLatch_2
----------------------------------------------------------------
stdout:
Waiting for all threads to finish...
Thread 1 finished
Thread 2 finished
Thread 3 finished
All threads finished.

================================================================

Sample: CountDownLatch_3
----------------------------------------------------------------
stdout:
Waiting for latch to count down to zero...
Count down 2
Count down 1
Count down 3
Latch count down to zero

================================================================

Sample: CountDownLatch_4
----------------------------------------------------------------
stdout:
Thread 1 finished
Thread 2 finished
Thread 3 finished
All threads finished

================================================================

Sample: CountDownLatch_5
----------------------------------------------------------------
timeout: process took too long
================================================================

Sample: CyclicBarrier_2
----------------------------------------------------------------
stdout:
Thread 1 is waiting at the barrier
Thread 2 is waiting at the barrier
Thread 3 is waiting at the barrier
Thread 3 has crossed the barrier
Thread 1 has crossed the barrier
Thread 2 has crossed the barrier

================================================================

Sample: CyclicBarrier_5
----------------------------------------------------------------
stdout:
3

================================================================

Sample: DelayQueue_1
----------------------------------------------------------------
stdout:
World
Hello

================================================================

Sample: DelayQueue_2
----------------------------------------------------------------
timeout: process took too long
================================================================

Sample: DelayQueue_3
----------------------------------------------------------------
stdout:
Element: First element is ready to be processed
Element: Third element is ready to be processed
Element: Second element is ready to be processed

================================================================

Sample: DelayQueue_4
----------------------------------------------------------------
stdout:
Peeked element: First element

================================================================

Sample: Exchanger_1
----------------------------------------------------------------
stdout:
Exchanged: Hello
Received: World

================================================================

Sample: Exchanger_2
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/Exchanger_2.java:12: error: cannot find symbol
            } catch (InterruptedException | TimeoutException e) {
                                            ^
  symbol:   class TimeoutException
  location: class Exchanger_2
1 error


================================================================

Sample: Exchanger_4
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/Exchanger_4.java:12: error: cannot find symbol
            } catch (InterruptedException | TimeoutException e) {
                                            ^
  symbol:   class TimeoutException
  location: class Exchanger_4
1 error


================================================================

Sample: Exchanger_5
----------------------------------------------------------------
stdout:
Exchanged: Hello
Received: World

================================================================

Sample: ExecutorCompletionService_2
----------------------------------------------------------------
stdout:
Hello, World!

================================================================

Sample: ExecutorCompletionService_3
----------------------------------------------------------------
stdout:
Hello

================================================================

Sample: ExecutorCompletionService_4
----------------------------------------------------------------
================================================================

Sample: ExecutorCompletionService_5
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ExecutorCompletionService_5.java:15: error: unreported exception ExecutionException; must be caught or declared to be thrown
            System.out.println(future.get());
                                         ^
1 error


================================================================

Sample: Executors_1
----------------------------------------------------------------
stdout:
pool-1-thread-3 is executing task 2
pool-1-thread-4 is executing task 3
pool-1-thread-3 is executing task 5
pool-1-thread-4 is executing task 6
pool-1-thread-1 is executing task 0
pool-1-thread-2 is executing task 1
pool-1-thread-5 is executing task 4
pool-1-thread-1 is executing task 9
pool-1-thread-4 is executing task 8
pool-1-thread-3 is executing task 7

================================================================

Sample: Executors_2
----------------------------------------------------------------
================================================================

Sample: Executors_3
----------------------------------------------------------------
================================================================

Sample: Executors_4
----------------------------------------------------------------
stdout:
Task executed by thread: pool-1-thread-1

================================================================

Sample: Executors_5
----------------------------------------------------------------
================================================================

Sample: ForkJoinTask_1
----------------------------------------------------------------
================================================================

Sample: ForkJoinTask_2
----------------------------------------------------------------
stdout:
null

================================================================

Sample: ForkJoinTask_5
----------------------------------------------------------------
stdout:
Task completed normally: false

================================================================

Sample: ForkJoinWorkerThread_6
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ForkJoinWorkerThread_6.java:7: error: cannot find symbol
        ForkJoinWorkerThread thread = pool.getForkJoinWorkerThread(Thread.currentThread());
                                          ^
  symbol:   method getForkJoinWorkerThread(Thread)
  location: variable pool of type ForkJoinPool
1 error


================================================================

Sample: FutureTask_1
----------------------------------------------------------------
stdout:
Task cancelled: false

================================================================

Sample: FutureTask_2
----------------------------------------------------------------
stdout:
Task was not cancelled

================================================================

Sample: FutureTask_3
----------------------------------------------------------------
stdout:
Is task done? true

================================================================

Sample: FutureTask_4
----------------------------------------------------------------
stdout:
Hello, World!

================================================================

Sample: FutureTask_5
----------------------------------------------------------------
stderr:
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.FutureTask.get(FutureTask.java:204)
	at FutureTask_5.main(FutureTask_5.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.execute(Main.java:419)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:192)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)

================================================================

Sample: LinkedBlockingDeque_1
----------------------------------------------------------------
stdout:
[Hello]

================================================================

Sample: LinkedBlockingDeque_2
----------------------------------------------------------------
stdout:
Hello

================================================================

Sample: LinkedBlockingDeque_3
----------------------------------------------------------------
stdout:
Before removing: [First, Second, Third]
Removed element: First
After removing: [Second, Third]

================================================================

Sample: LinkedBlockingDeque_4
----------------------------------------------------------------
stdout:
[Hello, World]
Removed last element: World
[Hello]

================================================================

Sample: LinkedBlockingDeque_5
----------------------------------------------------------------
stdout:
Offer result: true

================================================================

Sample: LinkedBlockingDeque_6
----------------------------------------------------------------
stdout:
Hello
World
null

================================================================

Sample: LinkedBlockingDeque_7
----------------------------------------------------------------
stdout:
Hello

================================================================

Sample: LinkedBlockingDeque_8
----------------------------------------------------------------
stdout:
Hello

================================================================

Sample: LinkedBlockingDeque_9
----------------------------------------------------------------
stdout:
true

================================================================

Sample: LinkedBlockingDeque_10
----------------------------------------------------------------
stdout:
true
[Hello]

================================================================

Sample: LinkedBlockingDeque_11
----------------------------------------------------------------
stdout:
First
Second
null

================================================================

Sample: LinkedBlockingDeque_12
----------------------------------------------------------------
stdout:
World
Hello
null

================================================================

Sample: LinkedBlockingDeque_13
----------------------------------------------------------------
stdout:
First

================================================================

Sample: LinkedBlockingDeque_14
----------------------------------------------------------------
stdout:
World

================================================================

Sample: LinkedBlockingDeque_15
----------------------------------------------------------------
stdout:
First

================================================================

Sample: LinkedBlockingDeque_16
----------------------------------------------------------------
stdout:
Last element: Third

================================================================

Sample: LinkedBlockingDeque_19
----------------------------------------------------------------
stdout:
Before removal: [Hello, World, Hello]
After removal: [World, Hello]
Removed: true

================================================================

Sample: LinkedBlockingDeque_20
----------------------------------------------------------------
stdout:
[Hello, World, Hello]
true
[Hello, World]

================================================================

Sample: LinkedBlockingQueue_2
----------------------------------------------------------------
stdout:
Hello

================================================================

Sample: LinkedBlockingQueue_3
----------------------------------------------------------------
stdout:
true
true
false

================================================================

Sample: LinkedBlockingQueue_4
----------------------------------------------------------------
stdout:
Hello
World
null

================================================================

Sample: LinkedTransferQueue_1
----------------------------------------------------------------
stdout:
[Hello]

================================================================

Sample: LinkedTransferQueue_2
----------------------------------------------------------------
stdout:
Hello

================================================================

Sample: LinkedTransferQueue_3
----------------------------------------------------------------
stdout:
false
false

================================================================

Sample: LinkedTransferQueue_4
----------------------------------------------------------------
stdout:
Hello
World
null

================================================================

Sample: LinkedTransferQueue_5
----------------------------------------------------------------
stdout:
true

================================================================

Sample: Phaser_1
----------------------------------------------------------------
stdout:
Phase: 0

================================================================

Sample: Phaser_2
----------------------------------------------------------------
================================================================

Sample: Phaser_3
----------------------------------------------------------------
================================================================

Sample: Phaser_4
----------------------------------------------------------------
================================================================

Sample: Phaser_5
----------------------------------------------------------------
stdout:
Initial phase: 0
Phase after first arriveAndAwaitAdvance: 1
Phase after deregister: -2147483646

================================================================

Sample: PriorityBlockingQueue_1
----------------------------------------------------------------
stdout:
[Hello]

================================================================

Sample: PriorityBlockingQueue_2
----------------------------------------------------------------
stdout:
Hello
World
null

================================================================

Sample: PriorityBlockingQueue_3
----------------------------------------------------------------
stdout:
Hello

================================================================

Sample: PriorityBlockingQueue_4
----------------------------------------------------------------
stdout:
[Hello]

================================================================

Sample: PriorityBlockingQueue_5
----------------------------------------------------------------
stdout:
Hello

================================================================

Sample: RecursiveAction_1
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/RecursiveAction_1.java:3: error: class MyRecursiveAction is public, should be declared in a file named MyRecursiveAction.java
public class MyRecursiveAction extends RecursiveAction {
       ^
1 error


================================================================

Sample: RecursiveTask_1
----------------------------------------------------------------
stdout:
null

================================================================

Sample: RecursiveTask_3
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/RecursiveTask_3.java:3: error: class MyTask is public, should be declared in a file named MyTask.java
public class MyTask extends RecursiveTask<Integer> {
       ^
./Data/java_util_concurrent/javaFiles/RecursiveTask_3.java:42: error: setRawResult(Integer) in MyTask cannot override setRawResult(V) in RecursiveTask
    protected void setRawResult(Integer value) {
                   ^
  overridden method is final
  where V is a type-variable:
    V extends Object declared in class RecursiveTask
2 errors


================================================================

Sample: ScheduledThreadPoolExecutor_5
----------------------------------------------------------------
timeout: process took too long
================================================================

Sample: Semaphore_2
----------------------------------------------------------------
stdout:
Semaphore acquired
Semaphore released

================================================================

Sample: Semaphore_3
----------------------------------------------------------------
stdout:
Acquired permit

================================================================

Sample: Semaphore_4
----------------------------------------------------------------
stdout:
Critical section is being executed

================================================================

Sample: Semaphore_5
----------------------------------------------------------------
stdout:
Acquired permit
Released permit

================================================================

Sample: SynchronousQueue_1
----------------------------------------------------------------
timeout: process took too long
================================================================

Sample: SynchronousQueue_2
----------------------------------------------------------------
stdout:
Hello

================================================================

Sample: SynchronousQueue_3
----------------------------------------------------------------
timeout: process took too long
================================================================

Sample: SynchronousQueue_4
----------------------------------------------------------------
stdout:
true

================================================================

Sample: SynchronousQueue_5
----------------------------------------------------------------
stdout:
0

================================================================

Sample: ThreadLocalRandom_1
----------------------------------------------------------------
stdout:
Random int: 1236170219

================================================================

Sample: ThreadLocalRandom_2
----------------------------------------------------------------
stdout:
Random long value: 6267372157103664079

================================================================

Sample: ThreadLocalRandom_3
----------------------------------------------------------------
stdout:
Random double: 0.5314794778707779

================================================================

Sample: ThreadLocalRandom_4
----------------------------------------------------------------
stdout:
Random boolean: false

================================================================

Sample: ThreadLocalRandom_5
----------------------------------------------------------------
stdout:
Random float: 0.7727775

================================================================

Sample: ThreadLocalRandom_6
----------------------------------------------------------------
stdout:
Random number between 0 (inclusive) and 10 (exclusive): 7

================================================================

Sample: ThreadLocalRandom_7
----------------------------------------------------------------
stdout:
Random long value: 51

================================================================

Sample: ThreadLocalRandom_8
----------------------------------------------------------------
stdout:
Random double between 1.0 and 10.0: 8.1005946630499

================================================================

Sample: ThreadLocalRandom_10
----------------------------------------------------------------
stdout:
Setting seeds in this generator is not supported.

================================================================

Sample: ThreadPoolExecutor_1
----------------------------------------------------------------
stdout:
Core Pool Size: 5

================================================================

Sample: ThreadPoolExecutor_2
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ThreadPoolExecutor_2.java:6: error: cannot find symbol
        ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(5);
                                                           ^
  symbol:   variable Executors
  location: class ThreadPoolExecutor_2
1 error


================================================================

Sample: ThreadPoolExecutor_3
----------------------------------------------------------------
stdout:
Current Pool Size: 0

================================================================

Sample: ThreadPoolExecutor_4
----------------------------------------------------------------
stdout:
Active Threads: 0

================================================================

Sample: ThreadPoolExecutor_5
----------------------------------------------------------------
stdout:
Is executor shutdown? false
Is executor shutdown? true

================================================================

Sample: ThreadPoolExecutor_CallerRunsPolicy_1
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ThreadPoolExecutor_CallerRunsPolicy_1.java:6: error: cannot find symbol
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>());
                                                                                                  ^
  symbol:   class LinkedBlockingQueue
  location: class ThreadPoolExecutor_CallerRunsPolicy_1
1 error


================================================================

Sample: ThreadPoolExecutor_DiscardPolicy_1
----------------------------------------------------------------
stdout:
Task 1 is running
Task 0 is running
Task 2 is running
Task 3 is running
Task 4 is running
Task 5 is running
Task 6 is running
Task 7 is running
Task 8 is running
Task 9 is running

================================================================

