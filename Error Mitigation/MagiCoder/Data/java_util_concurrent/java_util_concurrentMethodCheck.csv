Sample Number,ClassName,Snippet Number,Method,Exist,Description
0,AbstractExecutorService,1,boolean isShutdown(),False,NULL
0,AbstractExecutorService,2,boolean isTerminated(),False,NULL
0,AbstractExecutorService,3,void shutdown(),False,NULL
0,AbstractExecutorService,4,List<Runnable> shutdownNow(),False,NULL
0,AbstractExecutorService,5,"boolean awaitTermination(long timeout, TimeUnit unit)",False,NULL
1,ArrayBlockingQueue,1,boolean add(E e),True,"Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning true upon success and throwing an IllegalStateException if this queue is full."
1,ArrayBlockingQueue,2,E remove(),False,NULL
1,ArrayBlockingQueue,3,boolean offer(E e),True,"Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning true upon success and false if this queue is full."
1,ArrayBlockingQueue,4,E poll(),True,"Retrieves and removes the head of this queue, or returns null if this queue is empty."
1,ArrayBlockingQueue,5,E take(),True,"Retrieves and removes the head of this queue, waiting if necessary until an element becomes available."
2,CompletableFuture,1,CompletableFuture<Void> runAsync(Runnable runnable),True,Returns a new CompletableFuture that is asynchronously completed by a task running in the ForkJoinPool.commonPool() after it runs the given action.
2,CompletableFuture,2,"<U> CompletableFuture<U> thenApply(Function<? super T,? extends U> fn)",True,"Returns a new CompletionStage that, when this stage completes normally, is executed with this stage's result as the argument to the supplied function."
2,CompletableFuture,3,CompletableFuture<Void> thenAccept(Consumer<? super T> action),True,"Returns a new CompletionStage that, when this stage completes normally, is executed with this stage's result as the argument to the supplied action."
2,CompletableFuture,4,CompletableFuture<Void> thenRun(Runnable action),True,"Returns a new CompletionStage that, when this stage completes normally, executes the given action."
2,CompletableFuture,5,"CompletableFuture<T> whenComplete(BiConsumer<? super T,? super Throwable> action)",True,"Returns a new CompletionStage with the same result or exception as this stage, that executes the given action when this stage completes."
3,ConcurrentHashMap,1,"boolean putIfAbsent(K key, V value)",False,NULL
3,ConcurrentHashMap,2,"V put(K key, V value)",True,Maps the specified key to the specified value in this table.
3,ConcurrentHashMap,3,V get(Object key),True,"Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key."
3,ConcurrentHashMap,4,V remove(Object key),True,Removes the key (and its corresponding value) from this map.
3,ConcurrentHashMap,5,"boolean replace(K key, V oldValue, V newValue)",True,Replaces the entry for a key only if currently mapped to a given value.
4,ConcurrentHashMap.KeySetView,1,boolean add(E e),False,NULL
4,ConcurrentHashMap.KeySetView,2,boolean addAll(Collection<? extends E> c),False,NULL
4,ConcurrentHashMap.KeySetView,3,void clear(),True,"Removes all of the elements from this view, by removing all the mappings from the map backing this view."
4,ConcurrentHashMap.KeySetView,4,boolean contains(Object o),True,Returns true if this collection contains the specified element.
4,ConcurrentHashMap.KeySetView,5,boolean containsAll(Collection<?> c),True,Returns true if this collection contains all of the elements in the specified collection.
4,ConcurrentHashMap.KeySetView,6,boolean equals(Object o),True,"Indicates whether some other object is ""equal to"" this one."
4,ConcurrentHashMap.KeySetView,7,boolean isEmpty(),True,Returns true if this collection contains no elements.
4,ConcurrentHashMap.KeySetView,8,Iterator<E> iterator(),False,NULL
4,ConcurrentHashMap.KeySetView,9,boolean remove(Object o),True,"Removes the key from this map view, by removing the key (and its corresponding value) from the backing map."
4,ConcurrentHashMap.KeySetView,10,boolean removeAll(Collection<?> c),True,Removes all of this collection's elements that are also contained in the specified collection (optional operation).
4,ConcurrentHashMap.KeySetView,11,boolean retainAll(Collection<?> c),True,Retains only the elements in this collection that are contained in the specified collection (optional operation).
4,ConcurrentHashMap.KeySetView,12,int size(),True,Returns the number of elements in this collection.
4,ConcurrentHashMap.KeySetView,13,Object[] toArray(),True,Returns an array containing all of the elements in this collection.
4,ConcurrentHashMap.KeySetView,14,<T> T[] toArray(T[] a),True,Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array.
4,ConcurrentHashMap.KeySetView,15,boolean add(E e),False,NULL
4,ConcurrentHashMap.KeySetView,16,boolean addAll(Collection<? extends E> c),False,NULL
4,ConcurrentHashMap.KeySetView,17,void clear(),True,"Removes all of the elements from this view, by removing all the mappings from the map backing this view."
4,ConcurrentHashMap.KeySetView,18,boolean contains(Object o),True,Returns true if this collection contains the specified element.
4,ConcurrentHashMap.KeySetView,19,boolean containsAll(Collection<?> c),True,Returns true if this collection contains all of the elements in the specified collection.
4,ConcurrentHashMap.KeySetView,20,boolean equals(Object o),True,"Indicates whether some other object is ""equal to"" this one."
4,ConcurrentHashMap.KeySetView,21,boolean isEmpty(),True,Returns true if this collection contains no elements.
4,ConcurrentHashMap.KeySetView,22,Iterator<E> iterator(),False,NULL
4,ConcurrentHashMap.KeySetView,23,boolean remove(Object o),True,"Removes the key from this map view, by removing the key (and its corresponding value) from the backing map."
4,ConcurrentHashMap.KeySetView,24,boolean removeAll(Collection<?> c),True,Removes all of this collection's elements that are also contained in the specified collection (optional operation).
4,ConcurrentHashMap.KeySetView,25,boolean retainAll(Collection<?> c),True,Retains only the elements in this collection that are contained in the specified collection (optional operation).
4,ConcurrentHashMap.KeySetView,26,int size(),True,Returns the number of elements in this collection.
4,ConcurrentHashMap.KeySetView,27,Object[] toArray(),True,Returns an array containing all of the elements in this collection.
4,ConcurrentHashMap.KeySetView,28,<T> T[] toArray(T[] a),True,Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array.
5,ConcurrentLinkedDeque,1,boolean add(E e),True,Inserts the specified element at the tail of this deque.
5,ConcurrentLinkedDeque,2,boolean offer(E e),True,Inserts the specified element at the tail of this deque.
5,ConcurrentLinkedDeque,3,E remove(),True,"Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque)."
5,ConcurrentLinkedDeque,4,E poll(),True,"Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty."
5,ConcurrentLinkedDeque,5,E peek(),True,"Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty."
6,ConcurrentLinkedQueue,1,boolean add(E e),True,Inserts the specified element at the tail of this queue.
6,ConcurrentLinkedQueue,2,boolean offer(E e),True,Inserts the specified element at the tail of this queue.
6,ConcurrentLinkedQueue,3,E remove(),False,NULL
6,ConcurrentLinkedQueue,4,E poll(),True,"Retrieves and removes the head of this queue, or returns null if this queue is empty."
6,ConcurrentLinkedQueue,5,E peek(),True,"Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty."
7,ConcurrentSkipListMap,1,boolean add(E e),False,NULL
7,ConcurrentSkipListMap,2,"boolean addIfAbsent(K key, V value)",False,NULL
7,ConcurrentSkipListMap,3,void clear(),True,Removes all of the mappings from this map.
7,ConcurrentSkipListMap,4,boolean containsKey(Object key),True,Returns true if this map contains a mapping for the specified key.
7,ConcurrentSkipListMap,5,boolean containsValue(Object value),True,Returns true if this map maps one or more keys to the specified value.
8,ConcurrentSkipListSet,1,boolean add(E e),True,Adds the specified element to this set if it is not already present.
8,ConcurrentSkipListSet,2,void clear(),True,Removes all of the elements from this set.
8,ConcurrentSkipListSet,3,boolean contains(Object o),True,Returns true if this set contains the specified element.
8,ConcurrentSkipListSet,4,boolean remove(Object o),True,Removes the specified element from this set if it is present.
8,ConcurrentSkipListSet,5,int size(),True,Returns the number of elements in this set.
9,CopyOnWriteArrayList,1,boolean add(E e),True,Appends the specified element to the end of this list.
9,CopyOnWriteArrayList,2,"void add(int index, E element)",True,Inserts the specified element at the specified position in this list.
9,CopyOnWriteArrayList,3,void clear(),True,Removes all of the elements from this list.
9,CopyOnWriteArrayList,4,boolean contains(Object o),True,Returns true if this list contains the specified element.
9,CopyOnWriteArrayList,5,E get(int index),True,Returns the element at the specified position in this list.
9,CopyOnWriteArrayList,6,int indexOf(Object o),True,"Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element."
9,CopyOnWriteArrayList,7,boolean isEmpty(),True,Returns true if this list contains no elements.
9,CopyOnWriteArrayList,8,E remove(int index),True,Removes the element at the specified position in this list.
9,CopyOnWriteArrayList,9,boolean remove(Object o),True,"Removes the first occurrence of the specified element from this list, if it is present."
9,CopyOnWriteArrayList,10,"E set(int index, E element)",True,Replaces the element at the specified position in this list with the specified element.
9,CopyOnWriteArrayList,11,int size(),True,Returns the number of elements in this list.
9,CopyOnWriteArrayList,12,Object[] toArray(),True,Returns an array containing all of the elements in this list in proper sequence (from first to last element).
9,CopyOnWriteArrayList,13,<T> T[] toArray(T[] a),True,Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.
9,CopyOnWriteArrayList,14,boolean addIfAbsent(E e),True,"Appends the element, if not present."
9,CopyOnWriteArrayList,15,boolean removeIfPresent(Object o),False,NULL
9,CopyOnWriteArrayList,16,void replaceAll(UnaryOperator<E> operator),True,Replaces each element of this list with the result of applying the operator to that element.
9,CopyOnWriteArrayList,17,void sort(Comparator<? super E> c),True,Sorts this list according to the order induced by the specified Comparator.
9,CopyOnWriteArrayList,18,void trimToSize(),False,NULL
9,CopyOnWriteArrayList,19,boolean containsAll(Collection<?> c),True,Returns true if this list contains all of the elements of the specified collection.
9,CopyOnWriteArrayList,20,boolean removeAll(Collection<?> c),True,Removes from this list all of its elements that are contained in the specified collection.
9,CopyOnWriteArrayList,21,boolean retainAll(Collection<?> c),True,Retains only the elements in this list that are contained in the specified collection.
9,CopyOnWriteArrayList,22,void addAll(Collection<? extends E> c),False,NULL
9,CopyOnWriteArrayList,23,"void addAll(int index, Collection<? extends E> c)",False,NULL
9,CopyOnWriteArrayList,24,boolean removeIf(Predicate<? super E> filter),True,Removes all of the elements of this collection that satisfy the given predicate.
9,CopyOnWriteArrayList,25,"void replaceAll(BiFunction<? super E,? super E,? extends E> function)",False,NULL
9,CopyOnWriteArrayList,26,void forEach(Consumer<? super E> action),True,Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.
9,CopyOnWriteArrayList,27,Spliterator<E> spliterator(),True,Returns a Spliterator over the elements in this list.
9,CopyOnWriteArrayList,28,Stream<E> stream(),False,NULL
9,CopyOnWriteArrayList,29,Stream<E> parallelStream(),False,NULL
9,CopyOnWriteArrayList,30,void forEachOrdered(Consumer<? super E> action),False,NULL
10,CopyOnWriteArraySet,1,boolean add(E e),True,Adds the specified element to this set if it is not already present.
10,CopyOnWriteArraySet,2,boolean addAll(Collection<? extends E> c),True,Adds all of the elements in the specified collection to this set if they're not already present.
10,CopyOnWriteArraySet,3,void clear(),True,Removes all of the elements from this set.
10,CopyOnWriteArraySet,4,boolean contains(Object o),True,Returns true if this set contains the specified element.
10,CopyOnWriteArraySet,5,boolean containsAll(Collection<?> c),True,Returns true if this set contains all of the elements of the specified collection.
10,CopyOnWriteArraySet,6,boolean isEmpty(),True,Returns true if this set contains no elements.
10,CopyOnWriteArraySet,7,Iterator<E> iterator(),True,Returns an iterator over the elements contained in this set in the order in which these elements were added.
10,CopyOnWriteArraySet,8,boolean remove(Object o),True,Removes the specified element from this set if it is present.
10,CopyOnWriteArraySet,9,boolean removeAll(Collection<?> c),True,Removes from this set all of its elements that are contained in the specified collection.
10,CopyOnWriteArraySet,10,boolean retainAll(Collection<?> c),True,Retains only the elements in this set that are contained in the specified collection.
10,CopyOnWriteArraySet,11,int size(),True,Returns the number of elements in this set.
10,CopyOnWriteArraySet,12,Object[] toArray(),True,Returns an array containing all of the elements in this set.
10,CopyOnWriteArraySet,13,<T> T[] toArray(T[] a),True,Returns an array containing all of the elements in this set; the runtime type of the returned array is that of the specified array.
10,CopyOnWriteArraySet,14,boolean equals(Object o),True,Compares the specified object with this set for equality.
10,CopyOnWriteArraySet,15,int hashCode(),False,NULL
10,CopyOnWriteArraySet,16,String toString(),False,NULL
11,CountDownLatch,1,CountDownLatch(int count),False,NULL
11,CountDownLatch,2,void await(),True,"Causes the current thread to wait until the latch has counted down to zero, unless the thread is interrupted."
11,CountDownLatch,3,"boolean await(long timeout, TimeUnit unit)",True,"Causes the current thread to wait until the latch has counted down to zero, unless the thread is interrupted, or the specified waiting time elapses."
11,CountDownLatch,4,void countDown(),True,"Decrements the count of the latch, releasing all waiting threads if the count reaches zero."
11,CountDownLatch,5,long getCount(),True,Returns the current count.
12,CountedCompleter,1,CountedCompleter(),False,NULL
12,CountedCompleter,2,void addToCounter(long value),False,NULL
12,CountedCompleter,3,long getCounter(),False,NULL
12,CountedCompleter,4,void reset(),False,NULL
12,CountedCompleter,5,void fireCompletionAction(),False,NULL
13,CyclicBarrier,1,CyclicBarrier(int parties),False,NULL
13,CyclicBarrier,2,int await(),True,Waits until all parties have invoked await on this barrier.
13,CyclicBarrier,3,"int await(long timeout, TimeUnit unit)",True,"Waits until all parties have invoked await on this barrier, or the specified waiting time elapses."
13,CyclicBarrier,4,int getNumberWaiting(),True,Returns the number of parties currently waiting at the barrier.
13,CyclicBarrier,5,int getParties(),True,Returns the number of parties required to trip this barrier.
14,DelayQueue,1,boolean add(E e),True,Inserts the specified element into this delay queue.
14,DelayQueue,2,E take(),True,"Retrieves and removes the head of this queue, waiting if necessary until an element with an expired delay is available on this queue."
14,DelayQueue,3,E poll(),True,"Retrieves and removes the head of this queue, or returns null if this queue has no elements with an expired delay."
14,DelayQueue,4,E peek(),True,"Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty."
14,DelayQueue,5,long size(),False,NULL
15,Exchanger,1,V exchange(V x),True,"Waits for another thread to arrive at this exchange point (unless the current thread is interrupted), and then transfers the given object to it, receiving its object in return."
15,Exchanger,2,"V exchange(V x, long timeout, TimeUnit unit)",True,"Waits for another thread to arrive at this exchange point (unless the current thread is interrupted or the specified waiting time elapses), and then transfers the given object to it, receiving its object in return."
15,Exchanger,3,"V exchange(V x, long timeout)",False,NULL
15,Exchanger,4,"V exchange(V x, long timeout, TimeUnit unit)",True,"Waits for another thread to arrive at this exchange point (unless the current thread is interrupted or the specified waiting time elapses), and then transfers the given object to it, receiving its object in return."
15,Exchanger,5,V exchange(V x),True,"Waits for another thread to arrive at this exchange point (unless the current thread is interrupted), and then transfers the given object to it, receiving its object in return."
16,ExecutorCompletionService,1,CompletionService(Executor executor),False,NULL
16,ExecutorCompletionService,2,Future<V> submit(Callable<V> task),True,Submits a value-returning task for execution and returns a Future representing the pending results of the task.
16,ExecutorCompletionService,3,Future<V> take(),True,"Retrieves and removes the Future representing the next completed task, waiting if none are yet present."
16,ExecutorCompletionService,4,Future<V> poll(),True,"Retrieves and removes the Future representing the next completed task, or null if none are present."
16,ExecutorCompletionService,5,"Future<V> poll(long timeout, TimeUnit unit)",True,"Retrieves and removes the Future representing the next completed task, waiting if necessary up to the specified wait time if none are yet present."
17,Executors,1,ExecutorService newFixedThreadPool(int nThreads),True,Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue.
17,Executors,2,ExecutorService newCachedThreadPool(),True,"Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available."
17,Executors,3,ScheduledExecutorService newScheduledThreadPool(int corePoolSize),True,"Creates a thread pool that can schedule commands to run after a given delay, or to execute periodically."
17,Executors,4,ExecutorService newSingleThreadExecutor(),True,Creates an Executor that uses a single worker thread operating off an unbounded queue.
17,Executors,5,ExecutorService newWorkStealingPool(int parallelism),True,"Creates a thread pool that maintains enough threads to support the given parallelism level, and may use multiple queues to reduce contention."
18,ForkJoinPool,1,ForkJoinPool(),False,NULL
18,ForkJoinPool,2,submit(ForkJoinTask<V> task),False,NULL
18,ForkJoinPool,3,invoke(ForkJoinTask<V> task),False,NULL
18,ForkJoinPool,4,execute(Runnable task),False,NULL
18,ForkJoinPool,5,"execute(Runnable task, ForkJoinWorkerThread wt)",False,NULL
19,ForkJoinTask,1,ForkJoinTask<V> fork(),True,"Arranges to asynchronously execute this task in the pool the current task is running in, if applicable, or using the ForkJoinPool.commonPool() if not inForkJoinPool()."
19,ForkJoinTask,2,V getRawResult(),True,"Returns the result that would be returned by join(), even if this task completed abnormally, or null if this task is not known to have been completed."
19,ForkJoinTask,3,void setRawResult(V value),True,Forces the given value to be returned as a result.
19,ForkJoinTask,4,boolean isCompletedAbnormally(),True,Returns true if this task threw an exception or was cancelled.
19,ForkJoinTask,5,boolean isCompletedNormally(),True,Returns true if this task completed without throwing an exception and was not cancelled.
20,ForkJoinWorkerThread,1,ForkJoinWorkerThread(ForkJoinPool pool),False,NULL
20,ForkJoinWorkerThread,2,void start(),False,NULL
20,ForkJoinWorkerThread,3,void stop(),False,NULL
20,ForkJoinWorkerThread,4,void interrupt(),False,NULL
20,ForkJoinWorkerThread,5,boolean isInterrupted(),False,NULL
20,ForkJoinWorkerThread,6,ForkJoinPool getPool(),True,Returns the pool hosting this thread.
20,ForkJoinWorkerThread,7,void setPool(ForkJoinPool pool),False,NULL
20,ForkJoinWorkerThread,8,boolean isIdle(),False,NULL
20,ForkJoinWorkerThread,9,boolean isRunning(),False,NULL
20,ForkJoinWorkerThread,10,boolean isQueued(),False,NULL
20,ForkJoinWorkerThread,11,boolean isQueued(ForkJoinTask<?> task),False,NULL
20,ForkJoinWorkerThread,12,boolean isQueued(ForkJoinPool pool),False,NULL
20,ForkJoinWorkerThread,13,"boolean isQueued(ForkJoinPool pool, ForkJoinTask<?> task)",False,NULL
20,ForkJoinWorkerThread,14,"boolean isQueued(ForkJoinTask<?> task, boolean isAbsolute)",False,NULL
20,ForkJoinWorkerThread,15,"boolean isQueued(ForkJoinPool pool, ForkJoinTask<?> task, boolean isAbsolute)",False,NULL
20,ForkJoinWorkerThread,16,"boolean isQueued(ForkJoinTask<?> task, long timeout, TimeUnit unit)",False,NULL
20,ForkJoinWorkerThread,17,"boolean isQueued(ForkJoinPool pool, ForkJoinTask<?> task, long timeout, TimeUnit unit)",False,NULL
20,ForkJoinWorkerThread,18,"boolean isQueued(ForkJoinTask<?> task, long timeout, TimeUnit unit, boolean isAbsolute)",False,NULL
20,ForkJoinWorkerThread,19,"boolean isQueued(ForkJoinPool pool, ForkJoinTask<?> task, long timeout, TimeUnit unit, boolean isAbsolute)",False,NULL
21,FutureTask,1,boolean cancel(boolean mayInterruptIfRunning),True,Attempts to cancel execution of this task.
21,FutureTask,2,boolean isCancelled(),True,Returns true if this task was cancelled before it completed normally.
21,FutureTask,3,boolean isDone(),True,Returns true if this task completed.
21,FutureTask,4,V get(),True,"Waits if necessary for the computation to complete, and then retrieves its result."
21,FutureTask,5,"V get(long timeout, TimeUnit unit)",True,"Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available."
22,LinkedBlockingDeque,1,boolean add(E e),True,Inserts the specified element at the end of this deque unless it would violate capacity restrictions.
22,LinkedBlockingDeque,2,E remove(),True,Retrieves and removes the head of the queue represented by this deque.
22,LinkedBlockingDeque,3,E removeFirst(),True,Retrieves and removes the first element of this deque.
22,LinkedBlockingDeque,4,E removeLast(),True,Retrieves and removes the last element of this deque.
22,LinkedBlockingDeque,5,boolean offer(E e),True,"Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available."
22,LinkedBlockingDeque,6,E poll(),True,"Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty."
22,LinkedBlockingDeque,7,E peek(),True,"Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty."
22,LinkedBlockingDeque,8,E element(),True,"Retrieves, but does not remove, the head of the queue represented by this deque."
22,LinkedBlockingDeque,9,boolean offerFirst(E e),True,"Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available."
22,LinkedBlockingDeque,10,boolean offerLast(E e),True,"Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available."
22,LinkedBlockingDeque,11,E pollFirst(),True,"Retrieves and removes the first element of this deque, or returns null if this deque is empty."
22,LinkedBlockingDeque,12,E pollLast(),True,"Retrieves and removes the last element of this deque, or returns null if this deque is empty."
22,LinkedBlockingDeque,13,E getFirst(),True,"Retrieves, but does not remove, the first element of this deque."
22,LinkedBlockingDeque,14,E getLast(),True,"Retrieves, but does not remove, the last element of this deque."
22,LinkedBlockingDeque,15,E peekFirst(),True,"Retrieves, but does not remove, the first element of this deque, or returns null if this deque is empty."
22,LinkedBlockingDeque,16,E peekLast(),True,"Retrieves, but does not remove, the last element of this deque, or returns null if this deque is empty."
22,LinkedBlockingDeque,17,E removeFirstOccurrence(Object o),False,NULL
22,LinkedBlockingDeque,18,E removeLastOccurrence(Object o),False,NULL
22,LinkedBlockingDeque,19,boolean removeFirstOccurrence(Object o),True,Removes the first occurrence of the specified element from this deque.
22,LinkedBlockingDeque,20,boolean removeLastOccurrence(Object o),True,Removes the last occurrence of the specified element from this deque.
23,LinkedBlockingQueue,1,boolean add(E e),False,NULL
23,LinkedBlockingQueue,2,E take(),True,"Retrieves and removes the head of this queue, waiting if necessary until an element becomes available."
23,LinkedBlockingQueue,3,boolean offer(E e),True,"Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning true upon success and false if this queue is full."
23,LinkedBlockingQueue,4,E poll(),True,"Retrieves and removes the head of this queue, or returns null if this queue is empty."
23,LinkedBlockingQueue,5,boolean isEmpty(),False,NULL
24,LinkedTransferQueue,1,boolean add(E e),True,Inserts the specified element at the tail of this queue.
24,LinkedTransferQueue,2,E take(),True,"Retrieves and removes the head of this queue, waiting if necessary until an element becomes available."
24,LinkedTransferQueue,3,boolean tryTransfer(E e),True,"Transfers the element to a waiting consumer immediately, if possible."
24,LinkedTransferQueue,4,E poll(),True,"Retrieves and removes the head of this queue, or returns null if this queue is empty."
24,LinkedTransferQueue,5,boolean offer(E e),True,Inserts the specified element at the tail of this queue.
25,Phaser,1,int register(),True,Adds a new unarrived party to this phaser.
25,Phaser,2,int arrive(),True,"Arrives at this phaser, without waiting for others to arrive."
25,Phaser,3,int arriveAndAwaitAdvance(),True,Arrives at this phaser and awaits others.
25,Phaser,4,int arriveAndDeregister(),True,Arrives at this phaser and deregisters from it without waiting for others to arrive.
25,Phaser,5,int getPhase(),True,Returns the current phase number.
26,PriorityBlockingQueue,1,boolean add(E e),True,Inserts the specified element into this priority queue.
26,PriorityBlockingQueue,2,E poll(),True,"Retrieves and removes the head of this queue, or returns null if this queue is empty."
26,PriorityBlockingQueue,3,E peek(),True,"Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty."
26,PriorityBlockingQueue,4,boolean offer(E e),True,Inserts the specified element into this priority queue.
26,PriorityBlockingQueue,5,E take(),True,"Retrieves and removes the head of this queue, waiting if necessary until an element becomes available."
27,RecursiveAction,1,void compute(),True,The main computation performed by this task.
27,RecursiveAction,2,void join(),False,NULL
27,RecursiveAction,3,boolean isCompletedNormally(),False,NULL
27,RecursiveAction,4,boolean isDone(),False,NULL
27,RecursiveAction,5,void cancel(boolean mayInterruptIfRunning),False,NULL
28,RecursiveTask,1,V getRawResult(),True,"Returns the result that would be returned by ForkJoinTask.join(), even if this task completed abnormally, or null if this task is not known to have been completed."
28,RecursiveTask,2,protected abstract V compute(),False,NULL
28,RecursiveTask,3,void setRawResult(V value),True,Forces the given value to be returned as a result.
28,RecursiveTask,4,final V get(),False,NULL
28,RecursiveTask,5,"final V get(long timeout, TimeUnit unit)",False,NULL
29,ScheduledThreadPoolExecutor,1,ScheduledThreadPoolExecutor(int corePoolSize),False,NULL
29,ScheduledThreadPoolExecutor,2,"void schedule(Runnable command, long delay, TimeUnit unit)",False,NULL
29,ScheduledThreadPoolExecutor,3,"ScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)",True,"Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given period; that is executions will commence after initialDelay then initialDelay+period, then initialDelay + 2 * period, and so on."
29,ScheduledThreadPoolExecutor,4,"ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit)",True,"Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given delay between the termination of one execution and the commencement of the next."
29,ScheduledThreadPoolExecutor,5,void shutdown(),True,"Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted."
30,Semaphore,1,Semaphore(int permits),False,NULL
30,Semaphore,2,void acquire(),True,"Acquires a permit from this semaphore, blocking until one is available, or the thread is interrupted."
30,Semaphore,3,void acquire(int permits),True,"Acquires the given number of permits from this semaphore, blocking until all are available, or the thread is interrupted."
30,Semaphore,4,void release(),True,"Releases a permit, returning it to the semaphore."
30,Semaphore,5,void release(int permits),True,"Releases the given number of permits, returning them to the semaphore."
31,SynchronousQueue,1,boolean offer(E e),True,"Inserts the specified element into this queue, if another thread is waiting to receive it."
31,SynchronousQueue,2,E take(),True,"Retrieves and removes the head of this queue, waiting if necessary for another thread to insert it."
31,SynchronousQueue,3,E poll(),True,"Retrieves and removes the head of this queue, if another thread is currently making an element available."
31,SynchronousQueue,4,boolean isEmpty(),True,Always returns true.
31,SynchronousQueue,5,int size(),True,Always returns zero.
32,ThreadLocalRandom,1,int nextInt(),True,Returns a pseudorandom int value.
32,ThreadLocalRandom,2,long nextLong(),True,Returns a pseudorandom long value.
32,ThreadLocalRandom,3,double nextDouble(),True,Returns a pseudorandom double value between zero (inclusive) and one (exclusive).
32,ThreadLocalRandom,4,boolean nextBoolean(),True,Returns a pseudorandom boolean value.
32,ThreadLocalRandom,5,float nextFloat(),True,Returns a pseudorandom float value between zero (inclusive) and one (exclusive).
32,ThreadLocalRandom,6,int nextInt(int bound),True,Returns a pseudorandom int value between zero (inclusive) and the specified bound (exclusive).
32,ThreadLocalRandom,7,long nextLong(long bound),True,Returns a pseudorandom long value between zero (inclusive) and the specified bound (exclusive).
32,ThreadLocalRandom,8,"double nextDouble(double origin, double bound)",True,Returns a pseudorandom double value between the specified origin (inclusive) and bound (exclusive).
32,ThreadLocalRandom,9,"float nextFloat(float origin, float bound)",False,NULL
32,ThreadLocalRandom,10,void setSeed(long seed),True,Throws UnsupportedOperationException.
32,ThreadLocalRandom,11,long getSeed(),False,NULL
32,ThreadLocalRandom,12,void setCurrent(ThreadLocalRandom newInstance),False,NULL
32,ThreadLocalRandom,13,ThreadLocalRandom getInstance(),False,NULL
32,ThreadLocalRandom,14,ThreadLocalRandom getInstance(ThreadLocalRandom.SeedGenerator seedGenerator),False,NULL
32,ThreadLocalRandom,15,ThreadLocalRandom getInstance(long seed),False,NULL
32,ThreadLocalRandom,16,"ThreadLocalRandom getInstance(ThreadLocalRandom.SeedGenerator seedGenerator, long streamId)",False,NULL
32,ThreadLocalRandom,17,"ThreadLocalRandom getInstance(long seed, long streamId)",False,NULL
32,ThreadLocalRandom,18,"ThreadLocalRandom getInstance(ThreadLocalRandom.SeedGenerator seedGenerator, long streamId, long multiplier, long addend)",False,NULL
32,ThreadLocalRandom,19,"ThreadLocalRandom getInstance(long seed, long streamId, long multiplier, long addend)",False,NULL
32,ThreadLocalRandom,20,"ThreadLocalRandom getInstance(ThreadLocalRandom.SeedGenerator seedGenerator, long streamId, long multiplier, long addend, long bufferSize)",False,NULL
32,ThreadLocalRandom,21,"ThreadLocalRandom getInstance(long seed, long streamId, long multiplier, long addend, long bufferSize)",False,NULL
33,ThreadPoolExecutor,1,int getCorePoolSize(),True,Returns the core number of threads.
33,ThreadPoolExecutor,2,int getMaximumPoolSize(),True,Returns the maximum allowed number of threads.
33,ThreadPoolExecutor,3,int getPoolSize(),True,Returns the current number of threads in the pool.
33,ThreadPoolExecutor,4,int getActiveCount(),True,Returns the approximate number of threads that are actively executing tasks.
33,ThreadPoolExecutor,5,boolean isShutdown(),True,Returns true if this executor has been shut down.
34,ThreadPoolExecutor.AbortPolicy,1,"void rejectedExecution(Runnable r, ThreadPoolExecutor e)",True,Always throws RejectedExecutionException.
34,ThreadPoolExecutor.AbortPolicy,2,void execute(Runnable command),False,NULL
34,ThreadPoolExecutor.AbortPolicy,3,Future<?> submit(Runnable task),False,NULL
34,ThreadPoolExecutor.AbortPolicy,4,<T> Future<T> submit(Callable<T> task),False,NULL
34,ThreadPoolExecutor.AbortPolicy,5,"void execute(Runnable command, long startTimeout)",False,NULL
35,ThreadPoolExecutor.CallerRunsPolicy,1,"void rejectedExecution(Runnable r, ThreadPoolExecutor e)",True,"Executes task r in the caller's thread, unless the executor has been shut down, in which case the task is discarded."
35,ThreadPoolExecutor.CallerRunsPolicy,2,"void rejectedExecution(Runnable r, ThreadPoolExecutor e, ThreadPoolExecutor.DiscardPolicy policy)",False,NULL
35,ThreadPoolExecutor.CallerRunsPolicy,3,"void rejectedExecution(Runnable r, ThreadPoolExecutor e, ThreadPoolExecutor.DiscardOldestPolicy policy)",False,NULL
35,ThreadPoolExecutor.CallerRunsPolicy,4,"void rejectedExecution(Runnable r, ThreadPoolExecutor e, RejectedExecutionHandler handler)",False,NULL
35,ThreadPoolExecutor.CallerRunsPolicy,5,"void rejectedExecution(Runnable r, ThreadPoolExecutor e, ThreadPoolExecutor.CallerRunsPolicy policy)",False,NULL
36,ThreadPoolExecutor.DiscardOldestPolicy,1,boolean add(E e),False,NULL
36,ThreadPoolExecutor.DiscardOldestPolicy,2,void clear(),False,NULL
36,ThreadPoolExecutor.DiscardOldestPolicy,3,boolean contains(Object o),False,NULL
36,ThreadPoolExecutor.DiscardOldestPolicy,4,boolean isEmpty(),False,NULL
36,ThreadPoolExecutor.DiscardOldestPolicy,5,int size(),False,NULL
37,ThreadPoolExecutor.DiscardPolicy,1,"void rejectedExecution(Runnable r, ThreadPoolExecutor e)",True,"Does nothing, which has the effect of discarding task r."
37,ThreadPoolExecutor.DiscardPolicy,2,boolean remove(Object o),False,NULL
37,ThreadPoolExecutor.DiscardPolicy,3,boolean remove(int index),False,NULL
37,ThreadPoolExecutor.DiscardPolicy,4,boolean removeAll(Collection<?> c),False,NULL
37,ThreadPoolExecutor.DiscardPolicy,5,boolean retainAll(Collection<?> c),False,NULL
