Sample: 0 EventReaderDelegate
----------------------------------------------------------------

@@ Context
Here is the description of the package NULL
Here is the description of the class This is the base class for deriving an XMLEventReader filter.

@@ Instruction
I want to use javax.xml.stream.util.EventReaderDelegate package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean hasNext()`: This method returns true if the underlying EventReader has more events.

2. `XMLEvent nextEvent()`: This method returns the next XMLEvent from the underlying EventReader.

3. `void close()`: This method closes the underlying EventReader.

4. `void remove()`: This method is not supported by this class.

5. `void setParent(EventReader parent)`: This method sets the parent EventReader.
================================================================

Sample: 1 StreamReaderDelegate
----------------------------------------------------------------

@@ Context
Here is the description of the package NULL
Here is the description of the class This is the base class for deriving an XMLStreamReader filter This class is designed to sit between an XMLStreamReader and an application's XMLStreamReader.

@@ Instruction
I want to use javax.xml.stream.util.StreamReaderDelegate package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `boolean hasNext()`: This method returns true if the underlying XMLStreamReader has more elements.

2. `boolean next()`: This method moves the cursor to the next element in the XMLStreamReader.

3. `int getEventType()`: This method returns the type of the current event.

4. `String getText()`: This method returns the text of the current event.

5. `String getLocalName()`: This method returns the local name of the current event.

6. `String getNamespaceURI()`: This method returns the namespace URI of the current event.

7. `String getPrefix()`: This method returns the prefix of the current event.

8. `boolean isStartElement()`: This method returns true if the current event is a start element.

9. `boolean isEndElement()`: This method returns true if the current event is an end element.

10. `boolean isCharacters()`: This method returns true if the current event is a set of character data.

11. `boolean isWhiteSpace()`: This method returns true if the current event is white space.

12. `boolean isStartDocument()`: This method returns true if the current event is a start document event.

13. `boolean isEndDocument()`: This method returns true if the current event is an end document event.

14. `boolean isEntityReference()`: This method returns true if the current event is an entity reference.

15. `boolean isAttribute()`: This method returns true if the current event is an attribute.

16. `boolean isNamespace()`: This method returns true if the current event is a namespace.

17. `boolean isProcessingInstruction()`: This method returns true if the current event is a processing instruction.

18. `boolean isComment()`: This method returns true if the current event is a comment.

19. `boolean isCDATA()`: This method returns true if the current event is a CDATA section.

20. `boolean isStartPrefixMapping()`: This method returns true if the current event is a start prefix mapping.

21. `boolean isEndPrefixMapping()`: This method returns true if the current event is an end prefix mapping.

22. `boolean isEntityDeclaration()`: This method returns true if the current event is an entity declaration.

23. `boolean isNotationDeclaration()`: This method returns true if the current event is a notation declaration.

24. `boolean isAttributeDeclaration()`: This method returns true if the current event is an attribute declaration.

25. `boolean isElementDeclaration()`: This method returns true if the current event is an element declaration.

26. `boolean isNamespaceDeclaration()`: This method returns true if the current event is a namespace declaration.

27. `boolean isDefaultNamespace()`: This method returns true if the current event is a default namespace.

28. `boolean isAttributeModified()`: This method returns true if the current event is an attribute modified.

29. `boolean isAttributeReplaced()`: This method returns true if the current event is an attribute replaced.

30. `boolean isAttributeAdded()`: This method returns true if the current event is an attribute added.

31. `boolean isAttributeRemoved()`: This method returns true if the current event is an attribute removed.

32. `boolean isCharacterReplaced()`: This method returns true if the current event is a character replaced.

33. `boolean isIgnorableWhitespace()`: This method returns true if the current event is ignorable whitespace.

34. `boolean isEndElement()`: This method returns true if the current event is an end element.

35. `boolean isEntityReference()`: This method returns true if the current event is an entity reference.

36. `boolean isStartDocument()`: This method returns true if the current event is a start document event.

37. `boolean isEndDocument()`: This method returns true if the current event is an end document event.

38. `boolean isStartPrefixMapping()`: This method returns true if the current event is a start prefix mapping.

39. `boolean isEndPrefixMapping()`: This method returns true if the current event is an end prefix mapping.

40. `boolean isEntityDeclaration()`: This method returns true if the current event is an entity declaration.

41. `boolean isNotationDeclaration()`: This method returns true if the current event is a notation declaration.

42. `boolean isAttributeDeclaration()`: This method returns true if the current event is an attribute declaration.

43. `boolean isElementDeclaration()`: This method returns true if the current event is an element declaration.

44. `boolean isNamespaceDeclaration()`: This method returns true if the current event is a namespace declaration.

45. `boolean isDefaultNamespace()`: This method returns true if the current event is a default namespace.

46. `boolean isAttributeModified()`: This method returns true if the current event is an attribute modified.

47. `boolean isAttributeReplaced()`: This method returns true if the current event is an attribute replaced.

48. `boolean isAttributeAdded()`: This method returns true if the current event is an attribute added.

49. `boolean isAttributeRemoved()`: This method returns true if the current event is an attribute removed.

50. `boolean isCharacterReplaced()`: This method returns true if the current event is a character replaced.

51. `boolean isIgnorableWhitespace()`: This method returns true if the current event is ignorable whitespace.

52. `boolean isEndElement()`: This method returns true if the current event is an end element.

53. `boolean isEntityReference()`: This method returns true if the current event is an entity reference.

54. `boolean isStartDocument()`: This method returns true if the current event is a start document event.

55. `boolean isEndDocument()`: This method returns true if the current event is an end document event.

56. `boolean isStartPrefixMapping()`: This method returns true if the current event is a start prefix mapping.

57. `boolean isEndPrefixMapping()`: This method returns true if the current event is an end prefix mapping.

58. `boolean isEntityDeclaration()`: This method returns true if the current event is an entity declaration.

59. `boolean isNotationDeclaration()`: This method returns true if the current event is a notation declaration.

60. `boolean isAttributeDeclaration()`: This method returns true if the current event is an attribute declaration.

61. `boolean isElementDeclaration()`: This method returns true if the current event is an element declaration.

62. `boolean isNamespaceDeclaration()`: This method returns true if the current event is a namespace declaration.

63. `boolean isDefaultNamespace()`: This method returns true if the current event is a default namespace.

64. `boolean isAttributeModified()`: This method returns true if the current event is an attribute modified.

65. `boolean isAttributeReplaced()`: This method returns true if the current event is an attribute replaced.

66. `boolean isAttributeAdded()`: This method returns true if the current event is an attribute added.

67. `boolean isAttributeRemoved()`: This method returns true if the current event is an attribute removed.

68. `boolean isCharacterReplaced()`: This method returns true if the current event is a character replaced.

69. `boolean isIgnorableWhitespace()`: This method returns true if the current event is ignorable whitespace.

70. `boolean isEndElement()`: This method returns true if the current
================================================================

