Sample Number,ClassName,Snippet Number,Method,Exist,Description
0,AbstractAction,1,void actionPerformed(ActionEvent e),False,NULL
0,AbstractAction,2,"void putValue(Object key, Object value)",False,NULL
0,AbstractAction,3,Object getValue(Object key),False,NULL
0,AbstractAction,4,void setEnabled(boolean b),True,Sets whether the Action is enabled.
0,AbstractAction,5,boolean isEnabled(),True,Returns true if the action is enabled.
1,AbstractButton,1,void setActionCommand(String actionCommand),True,Sets the action command for this button.
1,AbstractButton,2,String getActionCommand(),True,Returns the action command for this button.
1,AbstractButton,3,void setSelected(boolean b),True,Sets the state of the button.
1,AbstractButton,4,boolean isSelected(),True,Returns the state of the button.
1,AbstractButton,5,void setEnabled(boolean b),True,Enables (or disables) the button.
1,AbstractButton,6,boolean isEnabled(),False,NULL
1,AbstractButton,7,void setFocusPainted(boolean b),True,"Sets the paintFocus property, which must be true for the focus state to be painted."
1,AbstractButton,8,boolean isFocusPainted(),True,Gets the paintFocus property.
1,AbstractButton,9,void setContentAreaFilled(boolean b),True,Sets the contentAreaFilled property.
1,AbstractButton,10,boolean isContentAreaFilled(),True,Gets the contentAreaFilled property.
1,AbstractButton,11,void setBorderPainted(boolean b),True,Sets the borderPainted property.
1,AbstractButton,12,boolean isBorderPainted(),True,Gets the borderPainted property.
1,AbstractButton,13,void setMargin(Insets insets),True,Sets space for margin between the button's border and the label.
1,AbstractButton,14,Insets getMargin(),True,Returns the margin between the button's border and the label.
1,AbstractButton,15,void setText(String text),True,Sets the button's text.
1,AbstractButton,16,String getText(),True,Returns the button's text.
1,AbstractButton,17,void setIcon(Icon icon),True,Sets the button's default icon.
1,AbstractButton,18,Icon getIcon(),True,Returns the default icon.
1,AbstractButton,19,void setHorizontalTextPosition(int position),True,Sets the horizontal position of the text relative to the icon.
1,AbstractButton,20,int getHorizontalTextPosition(),True,Returns the horizontal position of the text relative to the icon.
1,AbstractButton,21,void setVerticalTextPosition(int position),True,Sets the vertical position of the text relative to the icon.
1,AbstractButton,22,int getVerticalTextPosition(),True,Returns the vertical position of the text relative to the icon.
1,AbstractButton,23,void setRolloverEnabled(boolean b),True,"Sets the rolloverEnabled property, which must be true for rollover effects to occur."
1,AbstractButton,24,boolean isRolloverEnabled(),True,Gets the rolloverEnabled property.
1,AbstractButton,25,void setRolloverIcon(Icon icon),True,Sets the rollover icon for the button.
1,AbstractButton,26,Icon getRolloverIcon(),True,Returns the rollover icon for the button.
1,AbstractButton,27,void setPressedIcon(Icon icon),True,Sets the pressed icon for the button.
1,AbstractButton,28,Icon getPressedIcon(),True,Returns the pressed icon for the button.
1,AbstractButton,29,void setDisabledIcon(Icon icon),True,Sets the disabled icon for the button.
1,AbstractButton,30,Icon getDisabledIcon(),True,Returns the icon used by the button when it's disabled.
1,AbstractButton,31,void setFocusIcon(Icon icon),False,NULL
1,AbstractButton,32,Icon getFocusIcon(),False,NULL
1,AbstractButton,33,void setSelectedIcon(Icon icon),True,Sets the selected icon for the button.
1,AbstractButton,34,Icon getSelectedIcon(),True,Returns the selected icon for the button.
1,AbstractButton,35,void setRolloverSelectedIcon(Icon icon),True,Sets the rollover selected icon for the button.
1,AbstractButton,36,Icon getRolloverSelectedIcon(),True,Returns the rollover selection icon for the button.
1,AbstractButton,37,void setPressedSelectedIcon(Icon icon),False,NULL
1,AbstractButton,38,Icon getPressedSelectedIcon(),False,NULL
1,AbstractButton,39,void setDisabledSelectedIcon(Icon icon),True,Sets the disabled selection icon for the button.
1,AbstractButton,40,Icon getDisabledSelectedIcon(),True,Returns the icon used by the button when it's disabled and selected.
1,AbstractButton,41,void setFocusSelectedIcon(Icon icon),False,NULL
1,AbstractButton,42,Icon getFocusSelectedIcon(),False,NULL
1,AbstractButton,43,void setRolloverEnabled(boolean b),True,"Sets the rolloverEnabled property, which must be true for rollover effects to occur."
1,AbstractButton,44,boolean isRolloverEnabled(),True,Gets the rolloverEnabled property.
1,AbstractButton,45,void setRolloverIcon(Icon icon),True,Sets the rollover icon for the button.
1,AbstractButton,46,Icon getRolloverIcon(),True,Returns the rollover icon for the button.
1,AbstractButton,47,void setPressedIcon(Icon icon),True,Sets the pressed icon for the button.
1,AbstractButton,48,Icon getPressedIcon(),True,Returns the pressed icon for the button.
1,AbstractButton,49,void setDisabledIcon(Icon icon),True,Sets the disabled icon for the button.
1,AbstractButton,50,Icon getDisabledIcon(),True,Returns the icon used by the button when it's disabled.
1,AbstractButton,51,void setFocusIcon(Icon icon),False,NULL
1,AbstractButton,52,Icon getFocusIcon(),False,NULL
1,AbstractButton,53,void setSelectedIcon(Icon icon),True,Sets the selected icon for the button.
1,AbstractButton,54,Icon getSelectedIcon(),True,Returns the selected icon for the button.
1,AbstractButton,55,void setRolloverSelectedIcon(Icon icon),True,Sets the rollover selected icon for the button.
1,AbstractButton,56,Icon getRolloverSelectedIcon(),True,Returns the rollover selection icon for the button.
1,AbstractButton,57,void setPressedSelectedIcon(Icon icon),False,NULL
1,AbstractButton,58,Icon getPressedSelectedIcon(),False,NULL
1,AbstractButton,59,void setDisabledSelectedIcon(Icon icon),True,Sets the disabled selection icon for the button.
1,AbstractButton,60,Icon getDisabledSelectedIcon(),True,Returns the icon used by the button when it's disabled and selected.
1,AbstractButton,61,void setFocusSelectedIcon(Icon icon),False,NULL
1,AbstractButton,62,Icon getFocusSelectedIcon(),False,NULL
1,AbstractButton,63,void setRolloverEnabled(boolean b),True,"Sets the rolloverEnabled property, which must be true for rollover effects to occur."
1,AbstractButton,64,boolean isRolloverEnabled(),True,Gets the rolloverEnabled property.
1,AbstractButton,65,void setRolloverIcon(Icon icon),True,Sets the rollover icon for the button.
1,AbstractButton,66,Icon getRolloverIcon(),True,Returns the rollover icon for the button.
1,AbstractButton,67,void setPressedIcon(Icon icon),True,Sets the pressed icon for the button.
1,AbstractButton,68,Icon getPressedIcon(),True,Returns the pressed icon for the button.
1,AbstractButton,69,void setDisabledIcon(Icon icon),True,Sets the disabled icon for the button.
1,AbstractButton,70,Icon getDisabledIcon(),True,Returns the icon used by the button when it's disabled.
1,AbstractButton,71,void setFocusIcon(Icon icon),False,NULL
1,AbstractButton,72,Icon getFocusIcon(),False,NULL
2,AbstractCellEditor,1,boolean isCellEditable(EventObject anEvent),True,Returns true.
2,AbstractCellEditor,2,void cancelCellEditing(),True,Calls fireEditingCanceled.
2,AbstractCellEditor,3,void addCellEditorListener(CellEditorListener l),True,Adds a CellEditorListener to the listener list.
2,AbstractCellEditor,4,void removeCellEditorListener(CellEditorListener l),True,Removes a CellEditorListener from the listener list.
2,AbstractCellEditor,5,"Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column)",False,NULL
3,AbstractListModel,1,boolean add(E e),False,NULL
3,AbstractListModel,2,E getElementAt(int index),False,NULL
3,AbstractListModel,3,int getSize(),False,NULL
3,AbstractListModel,4,void remove(int index),False,NULL
3,AbstractListModel,5,"void setElementAt(E e, int index)",False,NULL
4,AbstractSpinnerModel,1,boolean isEditable(),False,NULL
4,AbstractSpinnerModel,2,void setValue(Object value),False,NULL
4,AbstractSpinnerModel,3,Object getNextValue(),False,NULL
4,AbstractSpinnerModel,4,Object getPreviousValue(),False,NULL
4,AbstractSpinnerModel,5,void addChangeListener(ChangeListener l),True,Adds a ChangeListener to the model's listener list.
5,ActionMap,1,"void put(Object key, Action action)",True,Adds a binding for key to action.
5,ActionMap,2,Action get(Object key),True,"Returns the binding for key, messaging the parent ActionMap if the binding is not locally defined."
5,ActionMap,3,Action remove(Object key),False,NULL
5,ActionMap,4,boolean containsKey(Object key),False,NULL
5,ActionMap,5,boolean containsValue(Object value),False,NULL
6,BorderFactory,1,"Border createBevelBorder(int bevelType, Color highlight, Color shadow)",True,"Creates a beveled border of the specified type, using the specified highlighting and shadowing."
6,BorderFactory,2,"Border createCompoundBorder(Border outsideBorder, Border insideBorder)",False,NULL
6,BorderFactory,3,"Border createEmptyBorder(int top, int left, int bottom, int right)",True,"Creates an empty border that takes up space but which does no drawing, specifying the width of the top, left, bottom, and right sides."
6,BorderFactory,4,Border createEtchedBorder(),True,"Creates a border with an ""etched"" look using the component's current background color for highlighting and shading."
6,BorderFactory,5,"Border createLineBorder(Color lineColor, int thickness)",True,Creates a line border with the specified color and width.
6,BorderFactory,6,"Border createMatteBorder(int top, int left, int bottom, int right, Color matteColor)",False,NULL
6,BorderFactory,7,"Border createTitledBorder(Border border, String title)",False,NULL
6,BorderFactory,8,"Border createTitledBorder(Border border, String title, int justification, int position, Font titleFont, Color titleColor)",False,NULL
6,BorderFactory,9,"Border createTitledBorder(Border border, String title, int justification, int position, Font titleFont, Color titleColor, Color titleShadowColor)",False,NULL
6,BorderFactory,10,"Border createTitledBorder(Border border, String title, int justification, int position, Font titleFont, Color titleColor, Color titleShadowColor, Color titleHighlightColor)",False,NULL
7,Box,1,boolean add(E e),False,NULL
7,Box,2,void add(Component comp),False,NULL
7,Box,3,"void add(Component comp, Object constraints)",False,NULL
7,Box,4,"void add(Component comp, Object constraints, int index)",False,NULL
7,Box,5,"void add(Component comp, Object constraints, int index)",False,NULL
8,Box.Filler,1,boolean add(E e),False,NULL
8,Box.Filler,2,"void add(int index, E element)",False,NULL
8,Box.Filler,3,boolean addAll(Collection<? extends E> c),False,NULL
8,Box.Filler,4,"boolean addAll(int index, Collection<? extends E> c)",False,NULL
8,Box.Filler,5,void clear(),False,NULL
9,BoxLayout,1,"BoxLayout(Container target, int axis)",False,NULL
9,BoxLayout,2,"void addLayoutComponent(String name, Component comp)",True,Not used by this class.
9,BoxLayout,3,"void addLayoutComponent(Component comp, Object constraints)",True,Not used by this class.
9,BoxLayout,4,"void addLayoutComponent(String name, Component comp, int index)",False,NULL
9,BoxLayout,5,"void addLayoutComponent(Component comp, Object constraints, int index)",False,NULL
9,BoxLayout,6,"void addLayoutComponent(String name, Component comp, int width, int height)",False,NULL
9,BoxLayout,7,"void addLayoutComponent(Component comp, Object constraints, int width, int height)",False,NULL
9,BoxLayout,8,"void addLayoutComponent(String name, Component comp, int width, int height, int hints)",False,NULL
9,BoxLayout,9,"void addLayoutComponent(Component comp, Object constraints, int width, int height, int hints)",False,NULL
9,BoxLayout,10,"void addLayoutComponent(String name, Component comp, int width, int height, float max, float weight)",False,NULL
9,BoxLayout,11,"void addLayoutComponent(Component comp, Object constraints, int width, int height, float max, float weight)",False,NULL
9,BoxLayout,12,"void addLayoutComponent(String name, Component comp, int width, int height, float max, float weight, int hints)",False,NULL
9,BoxLayout,13,"void addLayoutComponent(Component comp, Object constraints, int width, int height, float max, float weight, int hints)",False,NULL
9,BoxLayout,14,"void addLayoutComponent(String name, Component comp, int width, int height, float max, float weight, float min, float preferred)",False,NULL
9,BoxLayout,15,"void addLayoutComponent(Component comp, Object constraints, int width, int height, float max, float weight, float min, float preferred)",False,NULL
9,BoxLayout,16,"void addLayoutComponent(String name, Component comp, int width, int height, float max, float weight, float min, float preferred, int hints)",False,NULL
9,BoxLayout,17,"void addLayoutComponent(Component comp, Object constraints, int width, int height, float max, float weight, float min, float preferred, int hints)",False,NULL
9,BoxLayout,18,"void addLayoutComponent(String name, Component comp, int width, int height, float max, float weight, float min, float preferred, float alignmentX, float alignmentY)",False,NULL
9,BoxLayout,19,"void addLayoutComponent(Component comp, Object constraints, int width, int height, float max, float weight, float min, float preferred, float alignmentX, float alignmentY)",False,NULL
9,BoxLayout,20,"void addLayoutComponent(String name, Component comp, int width, int height, float max, float weight, float min, float preferred, float alignmentX, float alignmentY, int hints)",False,NULL
9,BoxLayout,21,"void addLayoutComponent(Component comp, Object constraints, int width, int height, float max, float weight, float min, float preferred, float alignmentX, float alignmentY, int hints)",False,NULL
9,BoxLayout,22,"void addLayoutComponent(String name, Component comp, int width, int height, float max, float weight, float min, float preferred, float alignmentX, float alignmentY, float alignmentZ, int hints)",False,NULL
9,BoxLayout,23,"void addLayoutComponent(Component comp, Object constraints, int width, int height, float max, float weight, float min, float preferred, float alignmentX, float alignmentY, float alignmentZ, int hints)",False,NULL
9,BoxLayout,24,"void addLayoutComponent(String name, Component comp, int width, int height, float max, float weight, float min, float preferred, float alignmentX, float alignmentY, float alignmentZ, float marginWidth, float marginHeight, int hints)",False,NULL
9,BoxLayout,25,"void addLayoutComponent(Component comp, Object constraints, int width, int height, float max, float weight, float min, float preferred, float alignmentX, float alignmentY, float alignmentZ, float marginWidth, float marginHeight, int hints)",False,NULL
10,ButtonGroup,1,boolean add(ButtonModel m),False,NULL
10,ButtonGroup,2,void add(AbstractButton b),True,Adds the button to the group.
10,ButtonGroup,3,void clearSelection(),True,Clears the selection such that none of the buttons in the ButtonGroup are selected.
10,ButtonGroup,4,ButtonModel getSelection(),True,Returns the model of the selected button.
10,ButtonGroup,5,"void setSelected(ButtonModel m, boolean b)",True,Sets the selected value for the ButtonModel.
11,CellRendererPane,1,void add(Component comp),False,NULL
11,CellRendererPane,2,"void add(Component comp, Object constraints)",False,NULL
11,CellRendererPane,3,"void add(Component comp, Object constraints, int index)",False,NULL
11,CellRendererPane,4,"void add(Component comp, Object constraints, int index, int weightx, int weighty)",False,NULL
11,CellRendererPane,5,"void add(Component comp, Object constraints, int index, double weightx, double weighty)",False,NULL
11,CellRendererPane,6,"void add(Component comp, Object constraints, int index, double weightx, double weighty, int anchor)",False,NULL
11,CellRendererPane,7,"void add(Component comp, Object constraints, int index, double weightx, double weighty, int anchor, int fill)",False,NULL
11,CellRendererPane,8,"void add(Component comp, Object constraints, int index, double weightx, double weighty, int anchor, int fill, double sizeweight)",False,NULL
11,CellRendererPane,9,"void add(Component comp, Object constraints, int index, double weightx, double weighty, int anchor, int fill, double sizeweight, int maxsize)",False,NULL
11,CellRendererPane,10,"void add(Component comp, Object constraints, int index, double weightx, double weighty, int anchor, int fill, double sizeweight, int maxsize, int minsize)",False,NULL
11,CellRendererPane,11,"void add(Component comp, Object constraints, int index, double weightx, double weighty, int anchor, int fill, double sizeweight, int maxsize, int minsize, int minwidth, int minheight)",False,NULL
11,CellRendererPane,12,"void add(Component comp, Object constraints, int index, double weightx, double weighty, int anchor, int fill, double sizeweight, int maxsize, int minsize, int minwidth, int minheight, int prefwidth, int prefheight)",False,NULL
11,CellRendererPane,13,"void add(Component comp, Object constraints, int index, double weightx, double weighty, int anchor, int fill, double sizeweight, int maxsize, int minsize, int minwidth, int minheight, int prefwidth, int prefheight, int maxwidth, int maxheight)",False,NULL
11,CellRendererPane,14,"void add(Component comp, Object constraints, int index, double weightx, double weighty, int anchor, int fill, double sizeweight, int maxsize, int minsize, int minwidth, int minheight, int prefwidth, int prefheight, int maxwidth, int maxheight, int minx, int miny)",False,NULL
11,CellRendererPane,15,"void add(Component comp, Object constraints, int index, double weightx, double weighty, int anchor, int fill, double sizeweight, int maxsize, int minsize, int minwidth, int minheight, int prefwidth, int prefheight, int maxwidth, int maxheight, int minx, int miny, int prefx, int prefy)",False,NULL
11,CellRendererPane,16,"void add(Component comp, Object constraints, int index, double weightx, double weighty, int anchor, int fill, double sizeweight, int maxsize, int minsize, int minwidth, int minheight, int prefwidth, int prefheight, int maxwidth, int maxheight, int minx, int miny, int prefx, int prefy, int maxx, int maxy)",False,NULL
11,CellRendererPane,17,"void add(Component comp, Object constraints, int index, double weightx, double weighty, int anchor, int fill, double sizeweight, int maxsize, int minsize, int minwidth, int minheight, int prefwidth, int prefheight, int maxwidth, int maxheight, int minx, int miny, int prefx, int prefy, int maxx, int maxy, int minz, int maxz)",False,NULL
11,CellRendererPane,18,"void add(Component comp, Object constraints, int index, double weightx, double weighty, int anchor, int fill, double sizeweight, int maxsize, int minsize, int minwidth, int minheight, int prefwidth, int prefheight, int maxwidth, int maxheight, int minx, int miny, int prefx, int prefy, int maxx, int maxy, int minz, int maxz, int prefz)",False,NULL
12,ComponentInputMap,1,"void add(KeyStroke keyStroke, Action action)",False,NULL
12,ComponentInputMap,2,Action get(KeyStroke keyStroke),False,NULL
12,ComponentInputMap,3,"void put(KeyStroke keyStroke, Action action)",False,NULL
12,ComponentInputMap,4,Action remove(KeyStroke keyStroke),False,NULL
12,ComponentInputMap,5,void clear(),True,Removes all the mappings from this object.
13,DebugGraphics,1,"void drawLine(int x1, int y1, int x2, int y2)",True,Overrides Graphics.drawLine.
13,DebugGraphics,2,"void drawRect(int x, int y, int width, int height)",True,Overrides Graphics.drawRect.
13,DebugGraphics,3,"void drawOval(int x, int y, int width, int height)",True,Overrides Graphics.drawOval.
13,DebugGraphics,4,"void drawArc(int x, int y, int width, int height, int startAngle, int arcAngle)",True,Overrides Graphics.drawArc.
13,DebugGraphics,5,"void drawPolygon(int[] xPoints, int[] yPoints, int nPoints)",True,Overrides Graphics.drawPolygon.
14,DefaultBoundedRangeModel,1,boolean isAdjusting(),False,NULL
14,DefaultBoundedRangeModel,2,int getExtent(),True,Returns the model's extent.
14,DefaultBoundedRangeModel,3,int getMaximum(),True,Returns the model's maximum.
14,DefaultBoundedRangeModel,4,int getMinimum(),True,Returns the model's minimum.
14,DefaultBoundedRangeModel,5,int getValue(),True,Returns the model's current value.
14,DefaultBoundedRangeModel,6,void setValueIsAdjusting(boolean b),True,Sets the valueIsAdjusting property.
14,DefaultBoundedRangeModel,7,void setExtent(int extent),True,Sets the extent to n after ensuring that n is greater than or equal to zero and falls within the model's constraints:
14,DefaultBoundedRangeModel,8,void setMaximum(int maximum),True,Sets the maximum to n after ensuring that n that the other three properties obey the model's constraints:
14,DefaultBoundedRangeModel,9,void setMinimum(int minimum),True,Sets the minimum to n after ensuring that n that the other three properties obey the model's constraints:
14,DefaultBoundedRangeModel,10,void setValue(int value),True,Sets the current value of the model.
15,DefaultButtonModel,1,boolean isArmed(),True,Indicates partial commitment towards triggering the button.
15,DefaultButtonModel,2,void setArmed(boolean b),True,Marks the button as armed or unarmed.
15,DefaultButtonModel,3,boolean isPressed(),True,Indicates if the button is pressed.
15,DefaultButtonModel,4,void setPressed(boolean b),True,Sets the button to pressed or unpressed.
15,DefaultButtonModel,5,boolean isRollover(),True,Indicates that the mouse is over the button.
15,DefaultButtonModel,6,void setRollover(boolean b),True,Sets or clears the button's rollover state
15,DefaultButtonModel,7,boolean isSelected(),True,Indicates if the button has been selected.
15,DefaultButtonModel,8,void setSelected(boolean b),True,Selects or deselects the button.
15,DefaultButtonModel,9,void setEnabled(boolean b),True,Enables or disables the button.
15,DefaultButtonModel,10,boolean isEnabled(),True,"Indicates if the button can be selected or triggered by an input device, such as a mouse pointer."
15,DefaultButtonModel,11,void setMnemonic(int mnemonic),True,Sets the keyboard mnemonic (shortcut key or accelerator key) for the button.
15,DefaultButtonModel,12,int getMnemonic(),True,Gets the keyboard mnemonic for the button.
15,DefaultButtonModel,13,void setActionCommand(String command),True,Sets the action command string that gets sent as part of the ActionEvent when the button is triggered.
15,DefaultButtonModel,14,String getActionCommand(),True,Returns the action command string for the button.
15,DefaultButtonModel,15,void setHorizontalAlignment(int alignment),False,NULL
15,DefaultButtonModel,16,int getHorizontalAlignment(),False,NULL
15,DefaultButtonModel,17,void setVerticalAlignment(int alignment),False,NULL
15,DefaultButtonModel,18,int getVerticalAlignment(),False,NULL
15,DefaultButtonModel,19,void setIcon(Icon icon),False,NULL
15,DefaultButtonModel,20,Icon getIcon(),False,NULL
15,DefaultButtonModel,21,void setRolloverIcon(Icon icon),False,NULL
15,DefaultButtonModel,22,Icon getRolloverIcon(),False,NULL
15,DefaultButtonModel,23,void setSelectedIcon(Icon icon),False,NULL
15,DefaultButtonModel,24,Icon getSelectedIcon(),False,NULL
15,DefaultButtonModel,25,void setDisabledIcon(Icon icon),False,NULL
15,DefaultButtonModel,26,Icon getDisabledIcon(),False,NULL
15,DefaultButtonModel,27,void setPressedIcon(Icon icon),False,NULL
15,DefaultButtonModel,28,Icon getPressedIcon(),False,NULL
15,DefaultButtonModel,29,void setContentAreaFilled(boolean b),False,NULL
15,DefaultButtonModel,30,boolean isContentAreaFilled(),False,NULL
15,DefaultButtonModel,31,void setBorderPainted(boolean b),False,NULL
15,DefaultButtonModel,32,boolean isBorderPainted(),False,NULL
15,DefaultButtonModel,33,void setFocusPainted(boolean b),False,NULL
15,DefaultButtonModel,34,boolean isFocusPainted(),False,NULL
15,DefaultButtonModel,35,void setDefaultCapable(boolean b),False,NULL
15,DefaultButtonModel,36,boolean isDefaultCapable(),False,NULL
15,DefaultButtonModel,37,void setDefaultButton(boolean b),False,NULL
15,DefaultButtonModel,38,boolean isDefaultButton(),False,NULL
15,DefaultButtonModel,39,void setRolloverEnabled(boolean b),False,NULL
15,DefaultButtonModel,40,boolean isRolloverEnabled(),False,NULL
15,DefaultButtonModel,41,void setPressed(boolean b),True,Sets the button to pressed or unpressed.
15,DefaultButtonModel,42,boolean isPressed(),True,Indicates if the button is pressed.
15,DefaultButtonModel,43,void setRollover(boolean b),True,Sets or clears the button's rollover state
15,DefaultButtonModel,44,boolean isRollover(),True,Indicates that the mouse is over the button.
15,DefaultButtonModel,45,void setSelected(boolean b),True,Selects or deselects the button.
15,DefaultButtonModel,46,boolean isSelected(),True,Indicates if the button has been selected.
15,DefaultButtonModel,47,void setEnabled(boolean b),True,Enables or disables the button.
15,DefaultButtonModel,48,boolean isEnabled(),True,"Indicates if the button can be selected or triggered by an input device, such as a mouse pointer."
15,DefaultButtonModel,49,void setMnemonic(int mnemonic),True,Sets the keyboard mnemonic (shortcut key or accelerator key) for the button.
15,DefaultButtonModel,50,int getMnemonic(),True,Gets the keyboard mnemonic for the button.
15,DefaultButtonModel,51,void setActionCommand(String command),True,Sets the action command string that gets sent as part of the ActionEvent when the button is triggered.
15,DefaultButtonModel,52,String getActionCommand(),True,Returns the action command string for the button.
15,DefaultButtonModel,53,void setHorizontalAlignment(int alignment),False,NULL
15,DefaultButtonModel,54,int getHorizontalAlignment(),False,NULL
15,DefaultButtonModel,55,void setVerticalAlignment(int alignment),False,NULL
15,DefaultButtonModel,56,int getVerticalAlignment(),False,NULL
15,DefaultButtonModel,57,void setIcon(Icon icon),False,NULL
15,DefaultButtonModel,58,Icon getIcon(),False,NULL
15,DefaultButtonModel,59,void setRolloverIcon(Icon icon),False,NULL
15,DefaultButtonModel,60,Icon getRolloverIcon(),False,NULL
15,DefaultButtonModel,61,void setSelectedIcon(Icon icon),False,NULL
15,DefaultButtonModel,62,Icon getSelectedIcon(),False,NULL
15,DefaultButtonModel,63,void setDisabledIcon(Icon icon),False,NULL
15,DefaultButtonModel,64,Icon getDisabledIcon(),False,NULL
15,DefaultButtonModel,65,void setPressedIcon(Icon icon),False,NULL
15,DefaultButtonModel,66,Icon getPressedIcon(),False,NULL
15,DefaultButtonModel,67,void setContentAreaFilled(boolean b),False,NULL
15,DefaultButtonModel,68,boolean isContentAreaFilled(),False,NULL
15,DefaultButtonModel,69,void setBorderPainted(boolean b),False,NULL
15,DefaultButtonModel,70,boolean isBorderPainted(),False,NULL
15,DefaultButtonModel,71,void setFocusPainted(boolean b),False,NULL
15,DefaultButtonModel,72,boolean isFocusPainted(),False,NULL
15,DefaultButtonModel,73,void setDefaultCapable(boolean b),False,NULL
16,DefaultCellEditor,1,boolean isCellEditable(EventObject anEvent),True,Forwards the message from the CellEditor to the delegate.
16,DefaultCellEditor,2,"Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column)",True,Implements the TableCellEditor interface.
16,DefaultCellEditor,3,Object getCellEditorValue(),True,Forwards the message from the CellEditor to the delegate.
16,DefaultCellEditor,4,void cancelCellEditing(),True,Forwards the message from the CellEditor to the delegate.
16,DefaultCellEditor,5,void addCellEditorListener(CellEditorListener l),False,NULL
17,DefaultComboBoxModel,1,boolean add(E e),False,NULL
17,DefaultComboBoxModel,2,"void add(int index, E element)",False,NULL
17,DefaultComboBoxModel,3,boolean addAll(Collection<? extends E> c),False,NULL
17,DefaultComboBoxModel,4,void clear(),False,NULL
17,DefaultComboBoxModel,5,boolean contains(Object o),False,NULL
18,DefaultDesktopManager,1,void beginDraggingFrame(JInternalFrame f),False,NULL
18,DefaultDesktopManager,2,void endDraggingFrame(JInternalFrame f),False,NULL
18,DefaultDesktopManager,3,"void dragFrame(JInternalFrame f, int newX, int newY)",False,NULL
18,DefaultDesktopManager,4,"void endResizingFrame(JInternalFrame f, int newWidth, int newHeight)",False,NULL
18,DefaultDesktopManager,5,"void beginResizingFrame(JInternalFrame f, int direction)",False,NULL
18,DefaultDesktopManager,6,void addNotify(),False,NULL
18,DefaultDesktopManager,7,void removeNotify(),False,NULL
18,DefaultDesktopManager,8,void addFrame(JInternalFrame f),False,NULL
18,DefaultDesktopManager,9,void removeFrame(JInternalFrame f),False,NULL
18,DefaultDesktopManager,10,void activateFrame(JInternalFrame f),True,This will activate f moving it to the front.
18,DefaultDesktopManager,11,void deactivateFrame(JInternalFrame f),True,"Generally, indicate that this frame has lost focus."
18,DefaultDesktopManager,12,void selectFrame(JInternalFrame f),False,NULL
18,DefaultDesktopManager,13,void unselectFrame(JInternalFrame f),False,NULL
18,DefaultDesktopManager,14,"void setBounds(int x, int y, int width, int height)",False,NULL
18,DefaultDesktopManager,15,void setBounds(Rectangle newBounds),False,NULL
18,DefaultDesktopManager,16,"void setBounds(Rectangle newBounds, Rectangle oldBounds)",False,NULL
18,DefaultDesktopManager,17,"void setBounds(Rectangle newBounds, Rectangle oldBounds, boolean animate)",False,NULL
18,DefaultDesktopManager,18,"void setBounds(Rectangle newBounds, Rectangle oldBounds, boolean animate, boolean immediate)",False,NULL
18,DefaultDesktopManager,19,"void setBounds(Rectangle newBounds, Rectangle oldBounds, boolean animate, boolean immediate, boolean forcibly)",False,NULL
18,DefaultDesktopManager,20,"void setBounds(Rectangle newBounds, Rectangle oldBounds, boolean animate, boolean immediate, boolean forcibly, boolean force)",False,NULL
19,DefaultFocusManager,1,void addFocusListener(FocusListener l),False,NULL
19,DefaultFocusManager,2,void addWindowFocusListener(WindowFocusListener l),False,NULL
19,DefaultFocusManager,3,void removeFocusListener(FocusListener l),False,NULL
19,DefaultFocusManager,4,void removeWindowFocusListener(WindowFocusListener l),False,NULL
19,DefaultFocusManager,5,void transferFocusBackward(),False,NULL
20,DefaultListCellRenderer,1,void setIcon(Icon icon),False,NULL
20,DefaultListCellRenderer,2,void setText(String text),False,NULL
20,DefaultListCellRenderer,3,void setBackground(Color background),False,NULL
20,DefaultListCellRenderer,4,void setForeground(Color foreground),False,NULL
20,DefaultListCellRenderer,5,void setEnabled(boolean enabled),False,NULL
21,DefaultListCellRenderer.UIResource,1,boolean isUIResource(),False,NULL
21,DefaultListCellRenderer.UIResource,2,void setIcon(Icon icon),False,NULL
21,DefaultListCellRenderer.UIResource,3,void setText(String text),False,NULL
21,DefaultListCellRenderer.UIResource,4,void setBackground(Color background),False,NULL
21,DefaultListCellRenderer.UIResource,5,void setForeground(Color foreground),False,NULL
22,DefaultListModel,1,boolean add(E e),False,NULL
22,DefaultListModel,2,E get(int index),True,Returns the element at the specified position in this list.
22,DefaultListModel,3,E remove(int index),True,Removes the element at the specified position in this list.
22,DefaultListModel,4,int size(),True,Returns the number of components in this list.
22,DefaultListModel,5,void clear(),True,Removes all of the elements from this list.
23,DefaultListSelectionModel,1,"void addSelectionInterval(int index0, int index1)",True,Changes the selection to be the set union of the current selection and the indices between index0 and index1 inclusive.
23,DefaultListSelectionModel,2,void clearSelection(),True,Change the selection to the empty set.
23,DefaultListSelectionModel,3,boolean isSelectedIndex(int index),True,Returns true if the specified index is selected.
23,DefaultListSelectionModel,4,"void setSelectionInterval(int index0, int index1)",True,Changes the selection to be between index0 and index1 inclusive.
23,DefaultListSelectionModel,5,void setValueIsAdjusting(boolean b),True,"Sets the valueIsAdjusting property, which indicates whether or not upcoming selection changes should be considered part of a single change."
24,DefaultRowSorter,1,void setSortKeys(List<? extends SortKey> keys),False,NULL
24,DefaultRowSorter,2,void toggleSortOrder(int column),True,"Reverses the sort order from ascending to descending (or descending to ascending) if the specified column is already the primary sorted column; otherwise, makes the specified column the primary sorted column, with an ascending sort order."
24,DefaultRowSorter,3,void sort(),True,"Sorts and filters the rows in the view based on the sort keys of the columns currently being sorted and the filter, if any, associated with this sorter."
24,DefaultRowSorter,4,"void sort(int columnIndex, boolean ascending)",False,NULL
24,DefaultRowSorter,5,"void sort(int columnIndex, int sortType)",False,NULL
25,DefaultRowSorter.ModelWrapper,1,boolean isSorted(),False,NULL
25,DefaultRowSorter.ModelWrapper,2,void setSortKeys(List<SortKey> sortKeys),False,NULL
25,DefaultRowSorter.ModelWrapper,3,List<SortKey> getSortKeys(),False,NULL
25,DefaultRowSorter.ModelWrapper,4,"void setSortable(int column, boolean sortable)",False,NULL
25,DefaultRowSorter.ModelWrapper,5,boolean isSortable(int column),False,NULL
26,DefaultSingleSelectionModel,1,boolean isSelected(int index),False,NULL
26,DefaultSingleSelectionModel,2,"void setSelected(int index, boolean b)",False,NULL
26,DefaultSingleSelectionModel,3,void clearSelection(),True,Clears the selection (to -1).
26,DefaultSingleSelectionModel,4,"void addSelectionInterval(int index0, int index1)",False,NULL
26,DefaultSingleSelectionModel,5,"void removeSelectionInterval(int index0, int index1)",False,NULL
27,FocusManager,1,void addFocusListener(FocusListener l),False,NULL
27,FocusManager,2,void addWindowFocusListener(WindowFocusListener l),False,NULL
27,FocusManager,3,Component getFocusOwner(),False,NULL
27,FocusManager,4,"void requestFocus(Component c, int direction)",False,NULL
27,FocusManager,5,void remove(FocusListener l),False,NULL
27,FocusManager,6,void remove(WindowFocusListener l),False,NULL
27,FocusManager,7,void setDefaultFocusOwner(Component c),False,NULL
27,FocusManager,8,void setFocusOwner(Component c),False,NULL
27,FocusManager,9,void transferFocus(Component c),False,NULL
27,FocusManager,10,void transferFocusBackward(),False,NULL
27,FocusManager,11,void transferFocusForward(),False,NULL
27,FocusManager,12,void updateFocusOwner(Component c),False,NULL
27,FocusManager,13,void updateWindowFocusOwner(Window w),False,NULL
27,FocusManager,14,void dispatchEvent(FocusEvent e),False,NULL
27,FocusManager,15,void dispatchEvent(WindowEvent e),False,NULL
28,GrayFilter,1,GrayFilter(float brightness),False,NULL
28,GrayFilter,2,"GrayFilter(float brightness, float contrast)",False,NULL
28,GrayFilter,3,ImageFilter getImageFilter(boolean b),False,NULL
28,GrayFilter,4,"ImageFilter getImageFilter(boolean b, float f)",False,NULL
28,GrayFilter,5,"ImageFilter getImageFilter(boolean b, float f, float f1)",False,NULL
29,GroupLayout,1,void setHorizontalGroup(javax.swing.GroupLayout.Group group),False,NULL
29,GroupLayout,2,void setVerticalGroup(javax.swing.GroupLayout.Group group),False,NULL
29,GroupLayout,3,"void linkSize(javax.swing.GroupLayout.SequentialGroup group, int constraint, int... constraints)",False,NULL
29,GroupLayout,4,"void linkInsets(javax.swing.GroupLayout.SequentialGroup group, int top, int left, int bottom, int right, int... insets)",False,NULL
29,GroupLayout,5,"void setPadding(int top, int left, int bottom, int right)",False,NULL
30,ImageIcon,1,ImageIcon(String filename),False,NULL
30,ImageIcon,2,ImageIcon(URL url),False,NULL
30,ImageIcon,3,ImageIcon(Image image),False,NULL
30,ImageIcon,4,"ImageIcon(Image image, String description)",False,NULL
30,ImageIcon,5,"ImageIcon(Image image, String description, int iconWidth, int iconHeight)",False,NULL
31,InputMap,1,"void put(KeyStroke keyStroke, Object value)",True,Adds a binding for keyStroke to actionMapKey.
31,InputMap,2,Object get(Object key),False,NULL
31,InputMap,3,Object remove(Object key),False,NULL
31,InputMap,4,boolean containsKey(Object key),False,NULL
31,InputMap,5,boolean containsValue(Object value),False,NULL
32,InputVerifier,1,boolean verify(JComponent input),True,Checks whether the JComponent's input is valid.
32,InputVerifier,2,boolean shouldYieldFocus(JComponent input),True,Calls verify(input) to ensure that the input is valid.
32,InputVerifier,3,void deinstall(JComponent input),False,NULL
32,InputVerifier,4,void install(JComponent input),False,NULL
32,InputVerifier,5,boolean shouldYieldFocusNext(JComponent input),False,NULL
33,InternalFrameFocusTraversalPolicy,1,"void setInitialComponent(JInternalFrame iframe, JComponent comp)",False,NULL
33,InternalFrameFocusTraversalPolicy,2,JComponent getInitialComponent(JInternalFrame iframe),False,NULL
33,InternalFrameFocusTraversalPolicy,3,"void setComponentAfter(JComponent comp, JComponent nextComp)",False,NULL
33,InternalFrameFocusTraversalPolicy,4,JComponent getComponentAfter(JComponent comp),False,NULL
33,InternalFrameFocusTraversalPolicy,5,"void setComponentBefore(JComponent comp, JComponent prevComp)",False,NULL
33,InternalFrameFocusTraversalPolicy,6,JComponent getComponentBefore(JComponent comp),False,NULL
33,InternalFrameFocusTraversalPolicy,7,void setFirstComponent(JComponent comp),False,NULL
33,InternalFrameFocusTraversalPolicy,8,JComponent getFirstComponent(),False,NULL
33,InternalFrameFocusTraversalPolicy,9,void setLastComponent(JComponent comp),False,NULL
33,InternalFrameFocusTraversalPolicy,10,JComponent getLastComponent(),False,NULL
33,InternalFrameFocusTraversalPolicy,11,"void setPriority(JComponent comp, int priority)",False,NULL
33,InternalFrameFocusTraversalPolicy,12,int getPriority(JComponent comp),False,NULL
33,InternalFrameFocusTraversalPolicy,13,"void setPriority(JComponent comp, int priority)",False,NULL
33,InternalFrameFocusTraversalPolicy,14,int getPriority(JComponent comp),False,NULL
33,InternalFrameFocusTraversalPolicy,15,"void setPriority(JComponent comp, int priority)",False,NULL
33,InternalFrameFocusTraversalPolicy,16,int getPriority(JComponent comp),False,NULL
33,InternalFrameFocusTraversalPolicy,17,"void setPriority(JComponent comp, int priority)",False,NULL
33,InternalFrameFocusTraversalPolicy,18,int getPriority(JComponent comp),False,NULL
33,InternalFrameFocusTraversalPolicy,19,"void setPriority(JComponent comp, int priority)",False,NULL
33,InternalFrameFocusTraversalPolicy,20,int getPriority(JComponent comp),False,NULL
34,JApplet,1,void init(),False,NULL
34,JApplet,2,void start(),False,NULL
34,JApplet,3,void stop(),False,NULL
34,JApplet,4,void destroy(),False,NULL
34,JApplet,5,void paint(Graphics g),False,NULL
35,JButton,1,JButton(),False,NULL
35,JButton,2,void setText(String text),False,NULL
35,JButton,3,String getText(),False,NULL
35,JButton,4,void setIcon(Icon icon),False,NULL
35,JButton,5,Icon getIcon(),False,NULL
36,JCheckBox,1,boolean isSelected(),False,NULL
36,JCheckBox,2,void setSelected(boolean b),False,NULL
36,JCheckBox,3,void setEnabled(boolean b),False,NULL
36,JCheckBox,4,"void setBounds(int x, int y, int width, int height)",False,NULL
36,JCheckBox,5,void setText(String text),False,NULL
37,JCheckBoxMenuItem,1,boolean isSelected(),False,NULL
37,JCheckBoxMenuItem,2,void setSelected(boolean aValue),False,NULL
37,JCheckBoxMenuItem,3,void setState(boolean aValue),True,Sets the selected-state of the item.
37,JCheckBoxMenuItem,4,void setEnabled(boolean aFlag),False,NULL
37,JCheckBoxMenuItem,5,void setActionCommand(String aCommand),False,NULL
38,JColorChooser,1,JColorChooser.getColor(),False,NULL
38,JColorChooser,2,JColorChooser.setColor(Color color),False,NULL
38,JColorChooser,3,"JColorChooser.showDialog(Component parent, String title, Color initialColor)",False,NULL
38,JColorChooser,4,"JColorChooser.showDialog(Component parent, String title, Color initialColor, ColorSelectionModel selectionModel)",False,NULL
38,JColorChooser,5,JColorChooser.createHSBColorPicker(),False,NULL
39,JComboBox,1,boolean add(E e),False,NULL
39,JComboBox,2,void addItem(Object item),False,NULL
39,JComboBox,3,void addItemListener(ItemListener l),True,Adds an ItemListener.
39,JComboBox,4,void addKeyListener(KeyListener l),False,NULL
39,JComboBox,5,void addMouseListener(MouseListener l),False,NULL
39,JComboBox,6,void addMouseMotionListener(MouseMotionListener l),False,NULL
39,JComboBox,7,void addMouseWheelListener(MouseWheelListener l),False,NULL
39,JComboBox,8,void addPopupMenuListener(PopupMenuListener l),True,Adds a PopupMenu listener which will listen to notification messages from the popup portion of the combo box.
39,JComboBox,9,void addSelectionListener(ListSelectionListener l),False,NULL
39,JComboBox,10,void addWindowListener(WindowListener l),False,NULL
39,JComboBox,11,void clearSelection(),False,NULL
39,JComboBox,12,Component getEditor(),False,NULL
39,JComboBox,13,Object getSelectedItem(),True,Returns the current selected item.
39,JComboBox,14,int getSelectedIndex(),True,Returns the first item in the list that matches the given item.
39,JComboBox,15,"void insertItemAt(Object item, int index)",False,NULL
39,JComboBox,16,void removeItem(Object item),True,Removes an item from the item list.
39,JComboBox,17,void removeItemListener(ItemListener l),True,Removes an ItemListener.
39,JComboBox,18,void removeKeyListener(KeyListener l),False,NULL
39,JComboBox,19,void removeMouseListener(MouseListener l),False,NULL
39,JComboBox,20,void removeMouseMotionListener(MouseMotionListener l),False,NULL
39,JComboBox,21,void removeMouseWheelListener(MouseWheelListener l),False,NULL
39,JComboBox,22,void removePopupMenuListener(PopupMenuListener l),True,Removes a PopupMenuListener.
39,JComboBox,23,void removeSelectionListener(ListSelectionListener l),False,NULL
39,JComboBox,24,void removeWindowListener(WindowListener l),False,NULL
39,JComboBox,25,void setSelectedItem(Object anObject),True,Sets the selected item in the combo box display area to the object in the argument.
39,JComboBox,26,void setSelectedIndex(int index),True,Selects the item at index anIndex.
39,JComboBox,27,void setModel(ComboBoxModel aModel),False,NULL
39,JComboBox,28,void setEditable(boolean aFlag),True,Determines whether the JComboBox field is editable.
39,JComboBox,29,void setRenderer(ListCellRenderer aRenderer),False,NULL
39,JComboBox,30,void setPrototypeDisplayValue(Object aValue),False,NULL
39,JComboBox,31,void setMaximumRowCount(int aCount),True,Sets the maximum number of rows the JComboBox displays.
39,JComboBox,32,void setVisibleRowCount(int aCount),False,NULL
39,JComboBox,33,void setEditable(boolean aFlag),True,Determines whether the JComboBox field is editable.
39,JComboBox,34,void setPrototypeDisplayValue(Object aValue),False,NULL
39,JComboBox,35,void setMaximumRowCount(int aCount),True,Sets the maximum number of rows the JComboBox displays.
39,JComboBox,36,void setVisibleRowCount(int aCount),False,NULL
39,JComboBox,37,void setEditable(boolean aFlag),True,Determines whether the JComboBox field is editable.
39,JComboBox,38,void setPrototypeDisplayValue(Object aValue),False,NULL
39,JComboBox,39,void setMaximumRowCount(int aCount),True,Sets the maximum number of rows the JComboBox displays.
39,JComboBox,40,void setVisibleRowCount(int aCount),False,NULL
40,JComponent,1,void add(Component comp),False,NULL
40,JComponent,2,"void add(Component comp, Object constraints)",False,NULL
40,JComponent,3,"void add(Component comp, Object constraints, int index)",False,NULL
40,JComponent,4,"void add(Component comp, int index)",False,NULL
40,JComponent,5,"void add(Component comp, Object constraints, int index)",False,NULL
41,JDesktopPane,1,JDesktopPane(),False,NULL
41,JDesktopPane,2,add(Component comp),False,NULL
41,JDesktopPane,3,remove(Component comp),False,NULL
41,JDesktopPane,4,setSize(Dimension d),False,NULL
41,JDesktopPane,5,"setSize(int width, int height)",False,NULL
41,JDesktopPane,6,setPreferredSize(Dimension preferredSize),False,NULL
41,JDesktopPane,7,setMaximumSize(Dimension maximumSize),False,NULL
41,JDesktopPane,8,setMinimumSize(Dimension minimumSize),False,NULL
41,JDesktopPane,9,setLayout(LayoutManager mgr),False,NULL
41,JDesktopPane,10,setBackground(Color bg),False,NULL
41,JDesktopPane,11,setBorder(Border b),False,NULL
41,JDesktopPane,12,setOpaque(boolean isOpaque),False,NULL
41,JDesktopPane,13,setVisible(boolean isVisible),False,NULL
41,JDesktopPane,14,setEnabled(boolean isEnabled),False,NULL
41,JDesktopPane,15,setFocusable(boolean focusable),False,NULL
41,JDesktopPane,16,setFont(Font font),False,NULL
41,JDesktopPane,17,setToolTipText(String toolTipText),False,NULL
41,JDesktopPane,18,setComponentOrientation(ComponentOrientation cOrientation),False,NULL
41,JDesktopPane,19,setAlignmentX(float alignment),False,NULL
41,JDesktopPane,20,setAlignmentY(float alignment),False,NULL
41,JDesktopPane,21,setBorder(Border border),False,NULL
41,JDesktopPane,22,setBackground(Color bg),False,NULL
41,JDesktopPane,23,setForeground(Color fg),False,NULL
41,JDesktopPane,24,setCursor(Cursor cursor),False,NULL
41,JDesktopPane,25,setEnabled(boolean isEnabled),False,NULL
41,JDesktopPane,26,setFocusable(boolean focusable),False,NULL
41,JDesktopPane,27,setFont(Font font),False,NULL
41,JDesktopPane,28,setToolTipText(String toolTipText),False,NULL
41,JDesktopPane,29,setComponentOrientation(ComponentOrientation cOrientation),False,NULL
41,JDesktopPane,30,setAlignmentX(float alignment),False,NULL
41,JDesktopPane,31,setAlignmentY(float alignment),False,NULL
41,JDesktopPane,32,setBorder(Border border),False,NULL
41,JDesktopPane,33,setBackground(Color bg),False,NULL
41,JDesktopPane,34,setForeground(Color fg),False,NULL
41,JDesktopPane,35,setCursor(Cursor cursor),False,NULL
41,JDesktopPane,36,setEnabled(boolean isEnabled),False,NULL
41,JDesktopPane,37,setFocusable(boolean focusable),False,NULL
41,JDesktopPane,38,setFont(Font font),False,NULL
41,JDesktopPane,39,setToolTipText(String toolTipText),False,NULL
41,JDesktopPane,40,setComponentOrientation(ComponentOrientation cOrientation),False,NULL
41,JDesktopPane,41,setAlignmentX(float alignment),False,NULL
41,JDesktopPane,42,setAlignmentY(float alignment),False,NULL
41,JDesktopPane,43,setBorder(Border border),False,NULL
41,JDesktopPane,44,setBackground(Color bg),False,NULL
41,JDesktopPane,45,setForeground(Color fg),False,NULL
41,JDesktopPane,46,setCursor(Cursor cursor),False,NULL
41,JDesktopPane,47,setEnabled(boolean isEnabled),False,NULL
41,JDesktopPane,48,setFocusable(boolean focusable),False,NULL
41,JDesktopPane,49,setFont(Font font),False,NULL
41,JDesktopPane,50,setToolTipText(String toolTipText),False,NULL
41,JDesktopPane,51,setComponentOrientation(ComponentOrientation cOrientation),False,NULL
41,JDesktopPane,52,setAlignmentX(float alignment),False,NULL
41,JDesktopPane,53,setAlignmentY(float alignment),False,NULL
41,JDesktopPane,54,setBorder(Border border),False,NULL
41,JDesktopPane,55,setBackground(Color bg),False,NULL
41,JDesktopPane,56,setForeground(Color fg),False,NULL
41,JDesktopPane,57,setCursor(Cursor cursor),False,NULL
41,JDesktopPane,58,setEnabled(boolean isEnabled),False,NULL
41,JDesktopPane,59,setFocusable(boolean focusable),False,NULL
41,JDesktopPane,60,setFont(Font font),False,NULL
41,JDesktopPane,61,setToolTipText(String toolTipText),False,NULL
41,JDesktopPane,62,setComponentOrientation(ComponentOrientation cOrientation),False,NULL
41,JDesktopPane,63,setAlignmentX(float alignment),False,NULL
41,JDesktopPane,64,setAlignmentY(float alignment),False,NULL
42,JDialog,1,"JDialog(Frame owner, String title, int modal)",False,NULL
42,JDialog,2,"void setSize(int width, int height)",False,NULL
42,JDialog,3,"void setLocation(int x, int y)",False,NULL
42,JDialog,4,void setVisible(boolean b),False,NULL
42,JDialog,5,void dispose(),False,NULL
43,JEditorPane,1,void setContentType(String type),True,Sets the type of content that this editor handles.
43,JEditorPane,2,void setText(String text),True,"Sets the text of this TextComponent to the specified content, which is expected to be in the format of the content type of this editor."
43,JEditorPane,3,String getText(),True,Returns the text contained in this TextComponent in terms of the content type of this editor.
43,JEditorPane,4,void addHyperlinkListener(HyperlinkListener l),True,"Adds a hyperlink listener for notification of any changes, for example when a link is selected and entered."
43,JEditorPane,5,void removeHyperlinkListener(HyperlinkListener l),True,Removes a hyperlink listener.
44,JFileChooser,1,int showOpenDialog(Frame owner),False,NULL
44,JFileChooser,2,int showSaveDialog(Frame owner),False,NULL
44,JFileChooser,3,void setDialogTitle(String title),True,Sets the string that goes in the JFileChooser window's title bar.
44,JFileChooser,4,void setDialogType(int dialogType),True,Sets the type of this dialog.
44,JFileChooser,5,void setFileSelectionMode(int mode),True,"Sets the JFileChooser to allow the user to just select files, just select directories, or select both files and directories."
45,JFormattedTextField,1,JFormattedTextField(NumberFormat format),False,NULL
45,JFormattedTextField,2,void setValue(Object value),True,Sets the value that will be formatted by an AbstractFormatter obtained from the current AbstractFormatterFactory.
45,JFormattedTextField,3,Object getValue(),True,Returns the last valid value.
45,JFormattedTextField,4,void setFormatterFactory(FormatterFactory factory),False,NULL
45,JFormattedTextField,5,FormatterFactory getFormatterFactory(),False,NULL
46,JFormattedTextField.AbstractFormatter,1,abstract String valueToString(Object value),False,NULL
46,JFormattedTextField.AbstractFormatter,2,abstract Object stringToValue(String text) throws ParseException,False,NULL
46,JFormattedTextField.AbstractFormatter,3,abstract AbstractFormatter getClone(),False,NULL
46,JFormattedTextField.AbstractFormatter,4,abstract AbstractFormatter getInstance(),False,NULL
46,JFormattedTextField.AbstractFormatter,5,abstract AbstractFormatter getInstance(AbstractFormatter formatter),False,NULL
47,JFormattedTextField.AbstractFormatterFactory,1,AbstractFormatterFactory(),False,NULL
47,JFormattedTextField.AbstractFormatterFactory,2,AbstractFormatter getFormatter(JFormattedTextField tf),False,NULL
47,JFormattedTextField.AbstractFormatterFactory,3,void install(JFormattedTextField tf),False,NULL
47,JFormattedTextField.AbstractFormatterFactory,4,void uninstall(JFormattedTextField tf),False,NULL
47,JFormattedTextField.AbstractFormatterFactory,5,void uninstallAll(),False,NULL
48,JFrame,1,JFrame(),False,NULL
48,JFrame,2,"setSize(int width, int height)",False,NULL
48,JFrame,3,setVisible(boolean b),False,NULL
48,JFrame,4,setDefaultCloseOperation(int operation),False,NULL
48,JFrame,5,add(Component comp),False,NULL
49,JInternalFrame,1,JInternalFrame(String title),False,NULL
49,JInternalFrame,2,void setClosable(boolean b),True,Sets whether this JInternalFrame can be closed by some user action.
49,JInternalFrame,3,void setIconifiable(boolean b),True,"Sets the iconable property, which must be true for the user to be able to make the JInternalFrame an icon."
49,JInternalFrame,4,void setMaximizable(boolean b),True,"Sets the maximizable property, which determines whether the JInternalFrame can be maximized by some user action."
49,JInternalFrame,5,void setResizable(boolean b),True,Sets whether the JInternalFrame can be resized by some user action.
49,JInternalFrame,6,void setTitle(String title),True,Sets the JInternalFrame title.
49,JInternalFrame,7,void setVisible(boolean b),False,NULL
49,JInternalFrame,8,"void setBounds(int x, int y, int width, int height)",False,NULL
49,JInternalFrame,9,void setDefaultCloseOperation(int operation),True,"Sets the operation that will happen by default when the user initiates a ""close"" on this internal frame."
49,JInternalFrame,10,void setContentPane(Container contentPane),True,Sets this JInternalFrame's contentPane property.
49,JInternalFrame,11,void setIconImage(Image img),False,NULL
49,JInternalFrame,12,void setJMenuBar(JMenuBar mbar),True,Sets the menuBar property for this JInternalFrame.
49,JInternalFrame,13,void setMenu(JMenu menu),False,NULL
49,JInternalFrame,14,"void setSize(int width, int height)",False,NULL
49,JInternalFrame,15,"void setLocation(int x, int y)",False,NULL
49,JInternalFrame,16,void setLocationRelativeTo(Component c),False,NULL
49,JInternalFrame,17,void setAlwaysOnTop(boolean b),False,NULL
49,JInternalFrame,18,void setType(int type),False,NULL
49,JInternalFrame,19,void setSelected(boolean b),True,Selects or deselects the internal frame if it's showing.
49,JInternalFrame,20,void setSelectedHierarchically(boolean b),False,NULL
49,JInternalFrame,21,void setSelectedHierarchically(boolean b),False,NULL
49,JInternalFrame,22,void setSelectedHierarchically(boolean b),False,NULL
49,JInternalFrame,23,void setSelectedHierarchically(boolean b),False,NULL
49,JInternalFrame,24,void setSelectedHierarchically(boolean b),False,NULL
49,JInternalFrame,25,void setSelectedHierarchically(boolean b),False,NULL
50,JInternalFrame.JDesktopIcon,1,boolean isIcon(),False,NULL
50,JInternalFrame.JDesktopIcon,2,void setIcon(boolean b),False,NULL
50,JInternalFrame.JDesktopIcon,3,"void setIcon(boolean b, boolean b1)",False,NULL
50,JInternalFrame.JDesktopIcon,4,"void setIcon(boolean b, boolean b1, boolean b2)",False,NULL
50,JInternalFrame.JDesktopIcon,5,"void setIcon(boolean b, boolean b1, boolean b2, boolean b3)",False,NULL
51,JLabel,1,void setText(String text),True,Defines the single line of text this component will display.
51,JLabel,2,void setIcon(Icon icon),True,Defines the icon this component will display.
51,JLabel,3,void setHorizontalAlignment(int alignment),True,Sets the alignment of the label's contents along the X axis.
51,JLabel,4,void setVerticalAlignment(int alignment),True,Sets the alignment of the label's contents along the Y axis.
51,JLabel,5,"void setBounds(int x, int y, int width, int height)",False,NULL
52,JLayer,1,JLayer(Component component),False,NULL
52,JLayer,2,void setView(LayerUI layerUI),False,NULL
52,JLayer,3,LayerUI getLayerUI(),False,NULL
52,JLayer,4,void setLayerEventMask(int mask),False,NULL
52,JLayer,5,int getLayerEventMask(),False,NULL
52,JLayer,6,"void setLayerProperty(Object key, Object value)",False,NULL
52,JLayer,7,Object getLayerProperty(Object key),False,NULL
52,JLayer,8,"void setLayerAttributes(Map<?,?> attributes)",False,NULL
52,JLayer,9,"Map<?,?> getLayerAttributes()",False,NULL
52,JLayer,10,void setLayerEventDispatcher(EventDispatcher dispatcher),False,NULL
52,JLayer,11,EventDispatcher getLayerEventDispatcher(),False,NULL
52,JLayer,12,void setLayerEventQueue(EventQueue eventQueue),False,NULL
52,JLayer,13,EventQueue getLayerEventQueue(),False,NULL
52,JLayer,14,void setLayerEventFilter(EventFilter filter),False,NULL
52,JLayer,15,EventFilter getLayerEventFilter(),False,NULL
52,JLayer,16,void setLayerEventMask(int mask),False,NULL
52,JLayer,17,int getLayerEventMask(),False,NULL
52,JLayer,18,void setLayerEventDispatcher(EventDispatcher dispatcher),False,NULL
52,JLayer,19,EventDispatcher getLayerEventDispatcher(),False,NULL
52,JLayer,20,void setLayerEventQueue(EventQueue eventQueue),False,NULL
52,JLayer,21,EventQueue getLayerEventQueue(),False,NULL
52,JLayer,22,void setLayerEventFilter(EventFilter filter),False,NULL
52,JLayer,23,EventFilter getLayerEventFilter(),False,NULL
52,JLayer,24,void setLayerEventMask(int mask),False,NULL
52,JLayer,25,int getLayerEventMask(),False,NULL
53,JLayeredPane,1,"void add(Component comp, Object constraints)",False,NULL
53,JLayeredPane,2,"void add(Component comp, Object constraints, int index)",False,NULL
53,JLayeredPane,3,"void add(Component comp, int x, int y)",False,NULL
53,JLayeredPane,4,"void add(Component comp, int x, int y, int width, int height)",False,NULL
53,JLayeredPane,5,void doLayout(),False,NULL
54,JList,1,boolean add(E e),False,NULL
54,JList,2,"void add(int index, E element)",False,NULL
54,JList,3,boolean addAll(Collection<? extends E> c),False,NULL
54,JList,4,"boolean addAll(int index, Collection<? extends E> c)",False,NULL
54,JList,5,void clear(),False,NULL
55,JList.DropLocation,1,int getIndex(),True,Returns the index where dropped data should be placed in the list.
55,JList.DropLocation,2,int getDropLocation(),False,NULL
55,JList.DropLocation,3,boolean isInsert(),True,Returns whether or not this location represents an insert location.
55,JList.DropLocation,4,boolean isBefore(),False,NULL
55,JList.DropLocation,5,boolean isAfter(),False,NULL
56,JMenu,1,JMenu(String label),False,NULL
56,JMenu,2,void add(JMenuItem item),False,NULL
56,JMenu,3,void add(JMenu submenu),False,NULL
56,JMenu,4,void setMnemonic(int mnemonic),False,NULL
56,JMenu,5,void setEnabled(boolean b),False,NULL
57,JMenuBar,1,JMenuBar(),False,NULL
57,JMenuBar,2,void add(JMenu c),False,NULL
57,JMenuBar,3,void remove(JMenu c),False,NULL
57,JMenuBar,4,JMenu[] getMenus(),False,NULL
57,JMenuBar,5,JMenu getMenu(int index),True,Returns the menu at the specified position in the menu bar.
58,JMenuItem,1,boolean add(E e),False,NULL
58,JMenuItem,2,void addActionListener(ActionListener l),False,NULL
58,JMenuItem,3,void addItemListener(ItemListener l),False,NULL
58,JMenuItem,4,void setEnabled(boolean b),True,Enables or disables the menu item.
58,JMenuItem,5,void setSelected(boolean b),False,NULL
59,JOptionPane,1,showInputDialog(Object message),False,NULL
59,JOptionPane,2,showMessageDialog(Object message),False,NULL
59,JOptionPane,3,showConfirmDialog(Object message),False,NULL
59,JOptionPane,4,showOptionDialog(Object message),False,NULL
59,JOptionPane,5,showInternalFrameDialog(Object message),False,NULL
60,JPanel,1,JPanel(),False,NULL
60,JPanel,2,void add(Component comp),False,NULL
60,JPanel,3,void remove(Component comp),False,NULL
60,JPanel,4,void setLayout(LayoutManager mgr),False,NULL
60,JPanel,5,void setBackground(Color bg),False,NULL
61,JPasswordField,1,JPasswordField(),False,NULL
61,JPasswordField,2,void setEchoChar(char c),True,Sets the echo character for this JPasswordField.
61,JPasswordField,3,char getEchoChar(),True,Returns the character to be used for echoing.
61,JPasswordField,4,void setEchoOn(boolean b),False,NULL
61,JPasswordField,5,boolean isEchoOn(),False,NULL
62,JPopupMenu,1,JPopupMenu(),False,NULL
62,JPopupMenu,2,void add(JMenuItem item),False,NULL
62,JPopupMenu,3,void add(JMenu subMenu),False,NULL
62,JPopupMenu,4,void addSeparator(),True,Appends a new separator at the end of the menu.
62,JPopupMenu,5,void setInvoker(Component invoker),True,Sets the invoker of this popup menu -- the component in which the popup menu menu is to be displayed.
63,JPopupMenu.Separator,1,boolean add(E e),False,NULL
63,JPopupMenu.Separator,2,void addSeparator(),False,NULL
63,JPopupMenu.Separator,3,void add(Component c),False,NULL
63,JPopupMenu.Separator,4,void add(Action a),False,NULL
63,JPopupMenu.Separator,5,void add(String label),False,NULL
64,JProgressBar,1,int getMaximum(),True,Returns the progress bar's maximum value from the BoundedRangeModel.
64,JProgressBar,2,int getMinimum(),True,Returns the progress bar's minimum value from the BoundedRangeModel.
64,JProgressBar,3,int getValue(),True,Returns the progress bar's current value from the BoundedRangeModel.
64,JProgressBar,4,void setMaximum(int newMax),True,Sets the progress bar's maximum value (stored in the progress bar's data model) to n.
64,JProgressBar,5,void setMinimum(int newMin),True,Sets the progress bar's minimum value (stored in the progress bar's data model) to n.
64,JProgressBar,6,void setValue(int newValue),True,Sets the progress bar's current value to n.
64,JProgressBar,7,void setString(String newString),True,Sets the value of the progress string.
64,JProgressBar,8,String getString(),True,Returns a String representation of the current progress.
64,JProgressBar,9,void setStringPainted(boolean b),True,"Sets the value of the stringPainted property, which determines whether the progress bar should render a progress string."
64,JProgressBar,10,boolean isStringPainted(),True,Returns the value of the stringPainted property.
65,JRadioButton,1,JRadioButton(),False,NULL
65,JRadioButton,2,void setSelected(boolean b),False,NULL
65,JRadioButton,3,boolean isSelected(),False,NULL
65,JRadioButton,4,void setActionCommand(String actionCommand),False,NULL
65,JRadioButton,5,String getActionCommand(),False,NULL
66,JRadioButtonMenuItem,1,boolean isSelected(),False,NULL
66,JRadioButtonMenuItem,2,void setSelected(boolean b),False,NULL
66,JRadioButtonMenuItem,3,void setActionCommand(String actionCommand),False,NULL
66,JRadioButtonMenuItem,4,String getActionCommand(),False,NULL
66,JRadioButtonMenuItem,5,void setEnabled(boolean b),False,NULL
67,JRootPane,1,JRootPane(),False,NULL
67,JRootPane,2,void setContentPane(Component contentPane),False,NULL
67,JRootPane,3,void setOpaque(boolean isOpaque),False,NULL
67,JRootPane,4,void setWindowDecorationStyle(int style),True,"Sets the type of Window decorations (such as borders, widgets for closing a Window, title ...) the JRootPane should provide."
67,JRootPane,5,void setTabbedPane(JTabbedPane tabbedPane),False,NULL
68,JScrollBar,1,int getValue(),True,Returns the scrollbar's value.
68,JScrollBar,2,void setValue(int value),True,Sets the scrollbar's value.
68,JScrollBar,3,int getMinimum(),True,Returns the minimum value supported by the scrollbar (usually zero).
68,JScrollBar,4,int getMaximum(),True,The maximum value of the scrollbar is maximum - extent.
68,JScrollBar,5,int getUnitIncrement(),True,For backwards compatibility with java.awt.Scrollbar.
69,JScrollPane,1,JScrollPane(),False,NULL
69,JScrollPane,2,void setViewportView(Component view),True,Creates a viewport if necessary and then sets its view.
69,JScrollPane,3,void setHorizontalScrollBarPolicy(int policy),True,Determines when the horizontal scrollbar appears in the scrollpane.
69,JScrollPane,4,void setVerticalScrollBarPolicy(int policy),True,Determines when the vertical scrollbar appears in the scrollpane.
69,JScrollPane,5,void getViewport().setViewPosition(Point p),False,NULL
70,JSeparator,1,JSeparator(),False,NULL
70,JSeparator,2,void setOrientation(int orientation),True,Sets the orientation of the separator.
70,JSeparator,3,int getOrientation(),True,Returns the orientation of this separator.
70,JSeparator,4,void setForeground(Color c),False,NULL
70,JSeparator,5,Color getForeground(),False,NULL
71,JSlider,1,int getMajorTickSpacing(),True,This method returns the major tick spacing.
71,JSlider,2,int getMinorTickSpacing(),True,This method returns the minor tick spacing.
71,JSlider,3,int getPaintTicks(),False,NULL
71,JSlider,4,int getPaintLabels(),False,NULL
71,JSlider,5,int getOrientation(),True,Return this slider's vertical or horizontal orientation.
71,JSlider,6,int getValue(),True,Returns the slider's current value from the BoundedRangeModel.
71,JSlider,7,int getMinimum(),True,Returns the minimum value supported by the slider from the BoundedRangeModel.
71,JSlider,8,int getMaximum(),True,Returns the maximum value supported by the slider from the BoundedRangeModel.
71,JSlider,9,int getMajorTickSpacing(),True,This method returns the major tick spacing.
71,JSlider,10,int getMinorTickSpacing(),True,This method returns the minor tick spacing.
71,JSlider,11,int getPaintTicks(),False,NULL
71,JSlider,12,int getPaintLabels(),False,NULL
71,JSlider,13,int getOrientation(),True,Return this slider's vertical or horizontal orientation.
71,JSlider,14,int getValue(),True,Returns the slider's current value from the BoundedRangeModel.
71,JSlider,15,int getMinimum(),True,Returns the minimum value supported by the slider from the BoundedRangeModel.
71,JSlider,16,int getMaximum(),True,Returns the maximum value supported by the slider from the BoundedRangeModel.
71,JSlider,17,int getMajorTickSpacing(),True,This method returns the major tick spacing.
71,JSlider,18,int getMinorTickSpacing(),True,This method returns the minor tick spacing.
71,JSlider,19,int getPaintTicks(),False,NULL
71,JSlider,20,int getPaintLabels(),False,NULL
71,JSlider,21,int getOrientation(),True,Return this slider's vertical or horizontal orientation.
71,JSlider,22,int getValue(),True,Returns the slider's current value from the BoundedRangeModel.
71,JSlider,23,int getMinimum(),True,Returns the minimum value supported by the slider from the BoundedRangeModel.
71,JSlider,24,int getMaximum(),True,Returns the maximum value supported by the slider from the BoundedRangeModel.
71,JSlider,25,int getMajorTickSpacing(),True,This method returns the major tick spacing.
71,JSlider,26,int getMinorTickSpacing(),True,This method returns the minor tick spacing.
71,JSlider,27,int getPaintTicks(),False,NULL
71,JSlider,28,int getPaintLabels(),False,NULL
71,JSlider,29,int getOrientation(),True,Return this slider's vertical or horizontal orientation.
71,JSlider,30,int getValue(),True,Returns the slider's current value from the BoundedRangeModel.
71,JSlider,31,int getMinimum(),True,Returns the minimum value supported by the slider from the BoundedRangeModel.
71,JSlider,32,int getMaximum(),True,Returns the maximum value supported by the slider from the BoundedRangeModel.
71,JSlider,33,int getMajorTickSpacing(),True,This method returns the major tick spacing.
71,JSlider,34,int getMinorTickSpacing(),True,This method returns the minor tick spacing.
71,JSlider,35,int getPaintTicks(),False,NULL
71,JSlider,36,int getPaintLabels(),False,NULL
71,JSlider,37,int getOrientation(),True,Return this slider's vertical or horizontal orientation.
71,JSlider,38,int getValue(),True,Returns the slider's current value from the BoundedRangeModel.
71,JSlider,39,int getMinimum(),True,Returns the minimum value supported by the slider from the BoundedRangeModel.
71,JSlider,40,int getMaximum(),True,Returns the maximum value supported by the slider from the BoundedRangeModel.
72,JSpinner,1,SpinnerModel getModel(),True,Returns the SpinnerModel that defines this spinners sequence of values.
72,JSpinner,2,void setModel(SpinnerModel model),True,Changes the model that represents the value of this spinner.
72,JSpinner,3,void setEditor(JComponent editor),True,Changes the JComponent that displays the current value of the SpinnerModel.
72,JSpinner,4,JComponent getEditor(),True,Returns the component that displays and potentially changes the model's value.
72,JSpinner,5,void setValue(Object value),True,"Changes current value of the model, typically this value is displayed by the editor."
73,JSpinner.DateEditor,1,boolean isEditable(),False,NULL
73,JSpinner.DateEditor,2,void setText(String text),False,NULL
73,JSpinner.DateEditor,3,String getText(),False,NULL
73,JSpinner.DateEditor,4,void selectAll(),False,NULL
73,JSpinner.DateEditor,5,void focusGained(FocusEvent e),False,NULL
74,JSpinner.DefaultEditor,1,SpinnerDateModel(),False,NULL
74,JSpinner.DefaultEditor,2,SpinnerListModel(List list),False,NULL
74,JSpinner.DefaultEditor,3,SpinnerModel(),False,NULL
74,JSpinner.DefaultEditor,4,SpinnerNumberModel(),False,NULL
74,JSpinner.DefaultEditor,5,SpinnerModel(),False,NULL
75,JSpinner.ListEditor,1,boolean add(E e),False,NULL
75,JSpinner.ListEditor,2,void addListDataListener(ListDataListener l),False,NULL
75,JSpinner.ListEditor,3,void clearSelection(),False,NULL
75,JSpinner.ListEditor,4,void removeListDataListener(ListDataListener l),False,NULL
75,JSpinner.ListEditor,5,"void setSelectedValue(Object value, boolean updateModel)",False,NULL
76,JSpinner.NumberEditor,1,boolean isEditable(),False,NULL
76,JSpinner.NumberEditor,2,void setValue(Object value),False,NULL
76,JSpinner.NumberEditor,3,Object getValue(),False,NULL
76,JSpinner.NumberEditor,4,void setFormats(String[] formats),False,NULL
76,JSpinner.NumberEditor,5,String[] getFormats(),False,NULL
77,JSplitPane,1,JSplitPane(),False,NULL
77,JSplitPane,2,void setDividerLocation(double location),True,Sets the divider location as a percentage of the JSplitPane's size.
77,JSplitPane,3,void setDividerSize(int size),True,Sets the size of the divider.
77,JSplitPane,4,void setOneTouchExpandable(boolean expandable),True,"Sets the value of the oneTouchExpandable property, which must be true for the JSplitPane to provide a UI widget on the divider to quickly expand/collapse the divider."
77,JSplitPane,5,void setOrientation(int orientation),True,"Sets the orientation, or how the splitter is divided."
78,JTabbedPane,1,"int addTab(String title, Icon icon, Component component, String tip)",False,NULL
78,JTabbedPane,2,"int addTab(String title, Icon icon, Component component)",False,NULL
78,JTabbedPane,3,"int insertTab(String title, Icon icon, Component component, String tip, int index)",False,NULL
78,JTabbedPane,4,"int insertTab(String title, Icon icon, Component component, int index)",False,NULL
78,JTabbedPane,5,void remove(int index),True,Removes the tab and component which corresponds to the specified index.
78,JTabbedPane,6,void removeAll(),True,Removes all the tabs and their corresponding components from the tabbedpane.
78,JTabbedPane,7,"void setEnabledAt(int index, boolean enabled)",True,Sets whether or not the tab at index is enabled.
78,JTabbedPane,8,"void setIconAt(int index, Icon icon)",True,Sets the icon at index to icon which can be null.
78,JTabbedPane,9,void setSelectedIndex(int index),True,Sets the selected index for this tabbedpane.
78,JTabbedPane,10,"void setTabComponentAt(int index, Component component)",True,Sets the component that is responsible for rendering the title for the specified tab.
78,JTabbedPane,11,void setTabPlacement(int placement),True,Sets the tab placement for this tabbedpane.
78,JTabbedPane,12,"void setTitleAt(int index, String title)",True,Sets the title at index to title which can be null.
78,JTabbedPane,13,"void setToolTipTextAt(int index, String tip)",True,Sets the tooltip text at index to toolTipText which can be null.
78,JTabbedPane,14,void setVisible(boolean aFlag),False,NULL
78,JTabbedPane,15,"void setVisible(int index, boolean aFlag)",False,NULL
78,JTabbedPane,16,void setTabLayoutPolicy(int policy),True,Sets the policy which the tabbedpane will use in laying out the tabs when all the tabs will not fit within a single run.
78,JTabbedPane,17,void setTabLocation(int location),False,NULL
78,JTabbedPane,18,void setTabSize(Dimension size),False,NULL
78,JTabbedPane,19,"void setTabSize(int width, int height)",False,NULL
78,JTabbedPane,20,void setTabSize(int width),False,NULL
78,JTabbedPane,21,void setTabSize(int height),False,NULL
78,JTabbedPane,22,"void setTabSize(float width, float height)",False,NULL
78,JTabbedPane,23,void setTabSize(float width),False,NULL
78,JTabbedPane,24,void setTabSize(float height),False,NULL
78,JTabbedPane,25,"void setTabSize(double width, double height)",False,NULL
78,JTabbedPane,26,void setTabSize(double width),False,NULL
78,JTabbedPane,27,void setTabSize(double height),False,NULL
78,JTabbedPane,28,"void setTabSize(int width, int height, int depth)",False,NULL
78,JTabbedPane,29,"void setTabSize(float width, float height, float depth)",False,NULL
78,JTabbedPane,30,"void setTabSize(double width, double height, double depth)",False,NULL
78,JTabbedPane,31,"void setTabSize(Dimension size, int depth)",False,NULL
78,JTabbedPane,32,"void setTabSize(int width, int height, int depth, int weight)",False,NULL
78,JTabbedPane,33,"void setTabSize(float width, float height, float depth, float weight)",False,NULL
78,JTabbedPane,34,"void setTabSize(double width, double height, double depth, double weight)",False,NULL
78,JTabbedPane,35,"void setTabSize(Dimension size, int depth, int weight)",False,NULL
78,JTabbedPane,36,"void setTabSize(int width, int height, int depth, int weight, int margin)",False,NULL
78,JTabbedPane,37,"void setTabSize(float width, float height, float depth, float weight, float margin)",False,NULL
78,JTabbedPane,38,"void setTabSize(double width, double height, double depth, double weight, double margin)",False,NULL
78,JTabbedPane,39,"void setTabSize(Dimension size, int depth, int weight, int margin)",False,NULL
78,JTabbedPane,40,"void setTabSize(int width, int height, int depth, int weight, int margin, int padding)",False,NULL
78,JTabbedPane,41,"void setTabSize(float width, float height, float depth, float weight, float margin, float padding)",False,NULL
78,JTabbedPane,42,"void setTabSize(double width, double height, double depth, double weight, double margin, double padding)",False,NULL
78,JTabbedPane,43,"void setTabSize(Dimension size, int depth, int weight, int margin, int padding)",False,NULL
78,JTabbedPane,44,"void setTabSize(int width, int height, int depth, int weight, int margin, int padding, int border)",False,NULL
78,JTabbedPane,45,"void setTabSize(float width, float height, float depth, float weight, float margin, float padding, float border)",False,NULL
78,JTabbedPane,46,"void setTabSize(double width, double height, double depth, double weight, double margin, double padding, double border)",False,NULL
78,JTabbedPane,47,"void setTabSize(Dimension size, int depth, int weight, int margin, int padding, int border)",False,NULL
78,JTabbedPane,48,"void setTabSize(int width, int height, int depth, int weight, int margin, int padding, int border, int marginType)",False,NULL
79,JTable,1,"JTable(int row, int column)",False,NULL
79,JTable,2,"void setValueAt(Object aValue, int rowIndex, int columnIndex)",True,Sets the value for the cell in the table model at row and column.
79,JTable,3,"Object getValueAt(int rowIndex, int columnIndex)",True,Returns the cell value at row and column.
79,JTable,4,void setRowCount(int rows),False,NULL
79,JTable,5,void setColumnCount(int columns),False,NULL
80,JTable.DropLocation,1,int getColumn(),True,Returns the column index where a dropped item should be placed in the table.
80,JTable.DropLocation,2,int getRow(),True,Returns the row index where a dropped item should be placed in the table.
80,JTable.DropLocation,3,boolean isInsert(),False,NULL
80,JTable.DropLocation,4,boolean isBefore(),False,NULL
80,JTable.DropLocation,5,boolean isAfter(),False,NULL
81,JTextArea,1,JTextArea(),False,NULL
81,JTextArea,2,void append(String str),True,Appends the given text to the end of the document.
81,JTextArea,3,void setText(String t),False,NULL
81,JTextArea,4,String getText(),False,NULL
81,JTextArea,5,void setLineWrap(boolean b),True,Sets the line-wrapping policy of the text area.
82,JTextField,1,JTextField(),False,NULL
82,JTextField,2,void setText(String text),False,NULL
82,JTextField,3,String getText(),False,NULL
82,JTextField,4,void setEditable(boolean b),False,NULL
82,JTextField,5,void setColumns(int columns),True,"Sets the number of columns in this TextField, and then invalidate the layout."
83,JTextPane,1,void setContentType(String type),False,NULL
83,JTextPane,2,String getContentType(),False,NULL
83,JTextPane,3,"void setCharacterAttributes(SimpleAttributeSet a, boolean b)",False,NULL
83,JTextPane,4,void addKeyListener(KeyListener l),False,NULL
83,JTextPane,5,void addMouseListener(MouseListener l),False,NULL
83,JTextPane,6,void addMouseMotionListener(MouseMotionListener l),False,NULL
83,JTextPane,7,void addCaretListener(CaretListener l),False,NULL
83,JTextPane,8,void addHyperlinkListener(HyperlinkListener l),False,NULL
83,JTextPane,9,void addDocumentListener(DocumentListener l),False,NULL
83,JTextPane,10,void addUndoableEditListener(UndoableEditListener l),False,NULL
83,JTextPane,11,void addInputMethodListener(InputMethodListener l),False,NULL
83,JTextPane,12,void addFocusListener(FocusListener l),False,NULL
83,JTextPane,13,void addKeyboardActionListener(KeyboardActionListener l),False,NULL
83,JTextPane,14,void addTextListener(TextListener l),False,NULL
83,JTextPane,15,void addEditorKit(EditorKit kit),False,NULL
83,JTextPane,16,void addElement(Element e),False,NULL
83,JTextPane,17,void add(String str),False,NULL
83,JTextPane,18,void add(Element e),False,NULL
83,JTextPane,19,void add(AbstractDocument.Content c),False,NULL
83,JTextPane,20,void add(AbstractDocument.Branch c),False,NULL
83,JTextPane,21,void add(AbstractDocument.Leaf c),False,NULL
83,JTextPane,22,"void add(AbstractDocument.Content c, int i)",False,NULL
83,JTextPane,23,"void add(AbstractDocument.Branch c, int i)",False,NULL
83,JTextPane,24,"void add(AbstractDocument.Leaf c, int i)",False,NULL
83,JTextPane,25,"void add(AbstractDocument.Content c, int i, int j)",False,NULL
83,JTextPane,26,"void add(AbstractDocument.Branch c, int i, int j)",False,NULL
83,JTextPane,27,"void add(AbstractDocument.Leaf c, int i, int j)",False,NULL
83,JTextPane,28,"void add(AbstractDocument.Content c, int i, int j, int k)",False,NULL
83,JTextPane,29,"void add(AbstractDocument.Branch c, int i, int j, int k)",False,NULL
83,JTextPane,30,"void add(AbstractDocument.Leaf c, int i, int j, int k)",False,NULL
83,JTextPane,31,"void add(AbstractDocument.Content c, int i, int j, int k, int l)",False,NULL
83,JTextPane,32,"void add(AbstractDocument.Branch c, int i, int j, int k, int l)",False,NULL
83,JTextPane,33,"void add(AbstractDocument.Leaf c, int i, int j, int k, int l)",False,NULL
83,JTextPane,34,"void add(AbstractDocument.Content c, int i, int j, int k, int l, int m)",False,NULL
83,JTextPane,35,"void add(AbstractDocument.Branch c, int i, int j, int k, int l, int m)",False,NULL
83,JTextPane,36,"void add(AbstractDocument.Leaf c, int i, int j, int k, int l, int m)",False,NULL
83,JTextPane,37,"void add(AbstractDocument.Content c, int i, int j, int k, int l, int m, int n)",False,NULL
83,JTextPane,38,"void add(AbstractDocument.Branch c, int i, int j, int k, int l, int m, int n)",False,NULL
83,JTextPane,39,"void add(AbstractDocument.Leaf c, int i, int j, int k, int l, int m, int n)",False,NULL
83,JTextPane,40,"void add(AbstractDocument.Content c, int i, int j, int k, int l, int m, int n, int o)",False,NULL
83,JTextPane,41,"void add(AbstractDocument.Branch c, int i, int j, int k, int l, int m, int n, int o)",False,NULL
83,JTextPane,42,"void add(AbstractDocument.Leaf c, int i, int j, int k, int l, int m, int n, int o)",False,NULL
83,JTextPane,43,"void add(AbstractDocument.Content c, int i, int j, int k, int l, int m, int n, int o, int p)",False,NULL
83,JTextPane,44,"void add(AbstractDocument.Branch c, int i, int j, int k, int l, int m, int n, int o, int p)",False,NULL
83,JTextPane,45,"void add(AbstractDocument.Leaf c, int i, int j, int k, int l, int m, int n, int o, int p)",False,NULL
84,JToggleButton,1,boolean isSelected(),False,NULL
84,JToggleButton,2,void setSelected(boolean b),False,NULL
84,JToggleButton,3,void setSelectedIcon(Icon icon),False,NULL
84,JToggleButton,4,void setIcon(Icon icon),False,NULL
84,JToggleButton,5,void setAction(Action a),False,NULL
85,JToggleButton.ToggleButtonModel,1,boolean isSelected(),True,Checks if the button is selected.
85,JToggleButton.ToggleButtonModel,2,void setSelected(boolean b),True,Sets the selected state of the button.
85,JToggleButton.ToggleButtonModel,3,void setEnabled(boolean b),False,NULL
85,JToggleButton.ToggleButtonModel,4,void setArmed(boolean b),False,NULL
85,JToggleButton.ToggleButtonModel,5,void setPressed(boolean b),True,Sets the pressed state of the toggle button.
85,JToggleButton.ToggleButtonModel,6,void setRollover(boolean b),False,NULL
85,JToggleButton.ToggleButtonModel,7,void setRolloverEnabled(boolean b),False,NULL
85,JToggleButton.ToggleButtonModel,8,void setSelected(boolean b),True,Sets the selected state of the button.
85,JToggleButton.ToggleButtonModel,9,void setSelected(boolean b),True,Sets the selected state of the button.
85,JToggleButton.ToggleButtonModel,10,void setSelected(boolean b),True,Sets the selected state of the button.
85,JToggleButton.ToggleButtonModel,11,void setSelected(boolean b),True,Sets the selected state of the button.
85,JToggleButton.ToggleButtonModel,12,void setSelected(boolean b),True,Sets the selected state of the button.
85,JToggleButton.ToggleButtonModel,13,void setSelected(boolean b),True,Sets the selected state of the button.
85,JToggleButton.ToggleButtonModel,14,void setSelected(boolean b),True,Sets the selected state of the button.
85,JToggleButton.ToggleButtonModel,15,void setSelected(boolean b),True,Sets the selected state of the button.
85,JToggleButton.ToggleButtonModel,16,void setSelected(boolean b),True,Sets the selected state of the button.
85,JToggleButton.ToggleButtonModel,17,void setSelected(boolean b),True,Sets the selected state of the button.
85,JToggleButton.ToggleButtonModel,18,void setSelected(boolean b),True,Sets the selected state of the button.
85,JToggleButton.ToggleButtonModel,19,void setSelected(boolean b),True,Sets the selected state of the button.
85,JToggleButton.ToggleButtonModel,20,void setSelected(boolean b),True,Sets the selected state of the button.
86,JToolBar,1,JToolBar(),False,NULL
86,JToolBar,2,void add(Action a),False,NULL
86,JToolBar,3,void add(Component c),False,NULL
86,JToolBar,4,"void add(Action a, String s)",False,NULL
86,JToolBar,5,"void add(Component c, String s)",False,NULL
86,JToolBar,6,"void add(Action a, String s, String t)",False,NULL
86,JToolBar,7,"void add(Component c, String s, String t)",False,NULL
86,JToolBar,8,"void add(Action a, String s, String t, String u)",False,NULL
86,JToolBar,9,"void add(Component c, String s, String t, String u)",False,NULL
86,JToolBar,10,"void add(Action a, String s, String t, String u, String v)",False,NULL
86,JToolBar,11,"void add(Component c, String s, String t, String u, String v)",False,NULL
86,JToolBar,12,"void add(Action a, String s, String t, String u, String v, String w)",False,NULL
86,JToolBar,13,"void add(Component c, String s, String t, String u, String v, String w)",False,NULL
86,JToolBar,14,"void add(Action a, String s, String t, String u, String v, String w, String x)",False,NULL
86,JToolBar,15,"void add(Component c, String s, String t, String u, String v, String w, String x)",False,NULL
87,JToolBar.Separator,1,boolean isSeparator(),False,NULL
87,JToolBar.Separator,2,void setSeparator(boolean separator),False,NULL
87,JToolBar.Separator,3,void setOrientation(int orientation),False,NULL
87,JToolBar.Separator,4,int getOrientation(),False,NULL
87,JToolBar.Separator,5,void setSize(Dimension size),False,NULL
87,JToolBar.Separator,6,Dimension getSize(),False,NULL
87,JToolBar.Separator,7,void setPreferredSize(Dimension preferredSize),False,NULL
87,JToolBar.Separator,8,Dimension getPreferredSize(),True,Returns the preferred size for the separator.
87,JToolBar.Separator,9,void setMinimumSize(Dimension minimumSize),False,NULL
87,JToolBar.Separator,10,Dimension getMinimumSize(),True,Returns the minimum size for the separator.
87,JToolBar.Separator,11,void setMaximumSize(Dimension maximumSize),False,NULL
87,JToolBar.Separator,12,Dimension getMaximumSize(),True,Returns the maximum size for the separator.
87,JToolBar.Separator,13,void setUI(SeparatorUI ui),False,NULL
87,JToolBar.Separator,14,SeparatorUI getUI(),False,NULL
87,JToolBar.Separator,15,void updateUI(),False,NULL
88,JToolTip,1,void setTipText(String text),True,Sets the text to show when the tool tip is displayed.
88,JToolTip,2,String getTipText(),True,Returns the text that is shown when the tool tip is displayed.
88,JToolTip,3,"void setTipText(String text, int x, int y)",False,NULL
88,JToolTip,4,"void setTipText(String text, int x, int y, int width, int height)",False,NULL
88,JToolTip,5,"void setTipText(String text, int x, int y, int width, int height, int delay, int duration)",False,NULL
89,JTree,1,TreeNode getRoot(),False,NULL
89,JTree,2,void setRootVisible(boolean b),True,Determines whether or not the root node from the TreeModel is visible.
89,JTree,3,void setShowsRootHandles(boolean b),True,"Sets the value of the showsRootHandles property, which specifies whether the node handles should be displayed."
89,JTree,4,void setCellRenderer(TreeCellRenderer renderer),True,Sets the TreeCellRenderer that will be used to draw each cell.
89,JTree,5,void setModel(TreeModel newModel),True,Sets the TreeModel that will provide the data.
90,JTree.DropLocation,1,int getChildIndex(),True,Returns the index where the dropped data should be inserted with respect to the path returned by getPath().
90,JTree.DropLocation,2,int getPath(),False,NULL
90,JTree.DropLocation,3,int getParentPath(),False,NULL
90,JTree.DropLocation,4,int getInsertPosition(),False,NULL
90,JTree.DropLocation,5,int getDropLocation(),False,NULL
91,JTree.DynamicUtilTreeNode,1,boolean add(E e),False,NULL
91,JTree.DynamicUtilTreeNode,2,boolean addAll(Collection<? extends E> c),False,NULL
91,JTree.DynamicUtilTreeNode,3,void clear(),False,NULL
91,JTree.DynamicUtilTreeNode,4,boolean contains(Object o),False,NULL
91,JTree.DynamicUtilTreeNode,5,boolean containsAll(Collection<?> c),False,NULL
92,JTree.EmptySelectionModel,1,boolean isSelectionEmpty(),False,NULL
92,JTree.EmptySelectionModel,2,void setSelectionPath(TreePath path),False,NULL
92,JTree.EmptySelectionModel,3,TreePath getSelectionPath(),False,NULL
92,JTree.EmptySelectionModel,4,void addSelectionPath(TreePath path),False,NULL
92,JTree.EmptySelectionModel,5,void removeSelectionPath(TreePath path),False,NULL
93,JViewport,1,void setView(Component view),True,"Sets the JViewport's one lightweight child (view), which can be null."
93,JViewport,2,Component getView(),True,Returns the JViewport's one child or null.
93,JViewport,3,void setViewPosition(Point p),True,"Sets the view coordinates that appear in the upper left hand corner of the viewport, does nothing if there's no view."
93,JViewport,4,Point getViewPosition(),True,"Returns the view coordinates that appear in the upper left hand corner of the viewport, or 0,0 if there's no view."
93,JViewport,5,void setViewSize(Dimension d),True,Sets the size of the view.
93,JViewport,6,Dimension getViewSize(),True,"If the view's size hasn't been explicitly set, return the preferred size, otherwise return the view's current size."
93,JViewport,7,void scrollRectToVisible(Rectangle r),True,Scrolls the view so that Rectangle within the view becomes visible.
93,JViewport,8,"void scrollRectToVisible(Rectangle r, Hint hint)",False,NULL
93,JViewport,9,void getViewRect(Rectangle r),False,NULL
93,JViewport,10,void getBounds(Rectangle r),False,NULL
93,JViewport,11,void setParent(Container parent),False,NULL
93,JViewport,12,Container getParent(),False,NULL
93,JViewport,13,void setViewportSize(Dimension d),False,NULL
93,JViewport,14,Dimension getViewportSize(),False,NULL
93,JViewport,15,void setViewportView(Component view),False,NULL
93,JViewport,16,Component getViewportView(),False,NULL
93,JViewport,17,void setCorner(int corner),False,NULL
93,JViewport,18,int getCorner(),False,NULL
93,JViewport,19,void setTransferHandler(TransferHandler handler),False,NULL
93,JViewport,20,TransferHandler getTransferHandler(),False,NULL
93,JViewport,21,void setDragMode(int mode),False,NULL
93,JViewport,22,int getDragMode(),False,NULL
93,JViewport,23,void setAutoscrolls(boolean autoscrolls),False,NULL
93,JViewport,24,boolean getAutoscrolls(),False,NULL
93,JViewport,25,void setAutoscrolls(boolean autoscrolls),False,NULL
93,JViewport,26,boolean getAutoscrolls(),False,NULL
93,JViewport,27,void setAutoscrolls(boolean autoscrolls),False,NULL
93,JViewport,28,boolean getAutoscrolls(),False,NULL
93,JViewport,29,void setAutoscrolls(boolean autoscrolls),False,NULL
93,JViewport,30,boolean getAutoscrolls(),False,NULL
94,JWindow,1,JWindow(),False,NULL
94,JWindow,2,"void setBounds(int x, int y, int width, int height)",False,NULL
94,JWindow,3,void setVisible(boolean b),False,NULL
94,JWindow,4,void dispose(),False,NULL
94,JWindow,5,void toFront(),False,NULL
95,KeyStroke,1,KeyStroke getKeyStrokeForEvent(KeyEvent e),True,Returns a KeyStroke which represents the stroke which generated a given KeyEvent.
95,KeyStroke,2,KeyStroke getKeyStroke(String keyEvent),True,Parses a string and returns a KeyStroke.
95,KeyStroke,3,"KeyStroke getKeyStroke(char keyChar, int modifiers)",False,NULL
95,KeyStroke,4,"KeyStroke getKeyStroke(String keyEvent, int modifiers)",False,NULL
95,KeyStroke,5,"KeyStroke getKeyStroke(int keyCode, int modifiers)",True,"Returns a shared instance of a KeyStroke, given a numeric key code and a set of modifiers."
96,LayoutFocusTraversalPolicy,1,boolean isFocusTraversable(Component c),False,NULL
96,LayoutFocusTraversalPolicy,2,void setInitialComponent(Component c),False,NULL
96,LayoutFocusTraversalPolicy,3,Component getInitialComponent(),False,NULL
96,LayoutFocusTraversalPolicy,4,void addComponent(Component c),False,NULL
96,LayoutFocusTraversalPolicy,5,void removeComponent(Component c),False,NULL
97,LayoutStyle,1,void setAlignment(int alignment),False,NULL
97,LayoutStyle,2,void setHgap(int hgap),False,NULL
97,LayoutStyle,3,void setVgap(int vgap),False,NULL
97,LayoutStyle,4,void setContainerGap(int containerGap),False,NULL
97,LayoutStyle,5,void setAncestorGap(int ancestorGap),False,NULL
98,LookAndFeel,1,void setDefaultLookAndFeelDecorated(boolean decorated),False,NULL
98,LookAndFeel,2,void setDefaultLookAndFeel(LookAndFeel lf),False,NULL
98,LookAndFeel,3,void setCurrentTheme(Theme theme),False,NULL
98,LookAndFeel,4,"void setCurrentTheme(Theme theme, boolean decorated)",False,NULL
98,LookAndFeel,5,"void setCurrentTheme(Theme theme, boolean decorated, boolean useSystemProperties)",False,NULL
99,MenuSelectionManager,1,"void setSelectedPath(MenuSelectionManager msm, MenuItem[] path)",False,NULL
99,MenuSelectionManager,2,MenuItem[] getSelectedPath(MenuSelectionManager msm),False,NULL
99,MenuSelectionManager,3,"void addMenuSelectionListener(MenuSelectionManager msm, MenuSelectionListener l)",False,NULL
99,MenuSelectionManager,4,"void removeMenuSelectionListener(MenuSelectionManager msm, MenuSelectionListener l)",False,NULL
99,MenuSelectionManager,5,"void setSelectedPath(MenuSelectionManager msm, MenuItem[] path)",False,NULL
100,OverlayLayout,1,"void addLayoutComponent(String name, Component comp)",True,Adds the specified component to the layout.
100,OverlayLayout,2,void removeLayoutComponent(Component comp),True,Removes the specified component from the layout.
100,OverlayLayout,3,Dimension preferredLayoutSize(Container parent),True,Returns the preferred dimensions for this layout given the components in the specified target container.
100,OverlayLayout,4,Dimension minimumLayoutSize(Container parent),True,Returns the minimum dimensions needed to lay out the components contained in the specified target container.
100,OverlayLayout,5,void layoutContainer(Container parent),True,Called by the AWT when the specified container needs to be laid out.
101,Popup,1,void show(),True,Makes the Popup visible.
101,Popup,2,void hide(),True,Hides and disposes of the Popup.
101,Popup,3,"void setLocation(int x, int y)",False,NULL
101,Popup,4,"void setSize(int width, int height)",False,NULL
101,Popup,5,void setVisible(boolean b),False,NULL
102,PopupFactory,1,"PopupFactory createPopup(Component owner, JComponent contents)",False,NULL
102,PopupFactory,2,"Popup createPopup(Component owner, JComponent contents, int x, int y)",False,NULL
102,PopupFactory,3,"Popup createPopup(Component owner, JComponent contents, int x, int y, boolean isModal)",False,NULL
102,PopupFactory,4,"Popup createPopup(Component owner, JComponent contents, int x, int y, boolean isModal, boolean isLightweight)",False,NULL
102,PopupFactory,5,"Popup createPopup(Component owner, JComponent contents, int x, int y, boolean isModal, boolean isLightweight, boolean isModalLocator)",False,NULL
103,ProgressMonitor,1,int getMaximum(),True,Returns the maximum value -- the higher end of the progress value.
103,ProgressMonitor,2,int getMinimum(),True,Returns the minimum value -- the lower end of the progress value.
103,ProgressMonitor,3,int getCurrent(),False,NULL
103,ProgressMonitor,4,void setCurrent(int current),False,NULL
103,ProgressMonitor,5,void setNote(String note),True,Specifies the additional note that is displayed along with the progress message.
103,ProgressMonitor,6,void setProgress(int current),True,Indicate the progress of the operation being monitored.
103,ProgressMonitor,7,void setMillisToPopup(int millis),True,Specifies the amount of time it will take for the popup to appear.
103,ProgressMonitor,8,void setMillisToPopup(int millis),True,Specifies the amount of time it will take for the popup to appear.
103,ProgressMonitor,9,void setMillisToPopup(int millis),True,Specifies the amount of time it will take for the popup to appear.
103,ProgressMonitor,10,void setMillisToPopup(int millis),True,Specifies the amount of time it will take for the popup to appear.
103,ProgressMonitor,11,void setMillisToPopup(int millis),True,Specifies the amount of time it will take for the popup to appear.
103,ProgressMonitor,12,void setMillisToPopup(int millis),True,Specifies the amount of time it will take for the popup to appear.
103,ProgressMonitor,13,void setMillisToPopup(int millis),True,Specifies the amount of time it will take for the popup to appear.
103,ProgressMonitor,14,void setMillisToPopup(int millis),True,Specifies the amount of time it will take for the popup to appear.
103,ProgressMonitor,15,void setMillisToPopup(int millis),True,Specifies the amount of time it will take for the popup to appear.
103,ProgressMonitor,16,void setMillisToPopup(int millis),True,Specifies the amount of time it will take for the popup to appear.
103,ProgressMonitor,17,void setMillisToPopup(int millis),True,Specifies the amount of time it will take for the popup to appear.
103,ProgressMonitor,18,void setMillisToPopup(int millis),True,Specifies the amount of time it will take for the popup to appear.
103,ProgressMonitor,19,void setMillisToPopup(int millis),True,Specifies the amount of time it will take for the popup to appear.
103,ProgressMonitor,20,void setMillisToPopup(int millis),True,Specifies the amount of time it will take for the popup to appear.
104,ProgressMonitorInputStream,1,ProgressMonitorInputStream(InputStream in),False,NULL
104,ProgressMonitorInputStream,2,void setProgress(int bytesRead),False,NULL
104,ProgressMonitorInputStream,3,void setMillisToPopup(long millisToPopup),False,NULL
104,ProgressMonitorInputStream,4,void setNote(String note),False,NULL
104,ProgressMonitorInputStream,5,void setMinimum(int minimum),False,NULL
104,ProgressMonitorInputStream,6,void setMaximum(int maximum),False,NULL
104,ProgressMonitorInputStream,7,void setMessage(String message),False,NULL
104,ProgressMonitorInputStream,8,void setDialogType(int dialogType),False,NULL
104,ProgressMonitorInputStream,9,void setCanceled(boolean canceled),False,NULL
104,ProgressMonitorInputStream,10,void setNote(String note),False,NULL
104,ProgressMonitorInputStream,11,void setProgress(int bytesRead),False,NULL
104,ProgressMonitorInputStream,12,void setMillisToPopup(long millisToPopup),False,NULL
104,ProgressMonitorInputStream,13,void setMinimum(int minimum),False,NULL
104,ProgressMonitorInputStream,14,void setMaximum(int maximum),False,NULL
104,ProgressMonitorInputStream,15,void setMessage(String message),False,NULL
104,ProgressMonitorInputStream,16,void setDialogType(int dialogType),False,NULL
104,ProgressMonitorInputStream,17,void setCanceled(boolean canceled),False,NULL
104,ProgressMonitorInputStream,18,void setNote(String note),False,NULL
104,ProgressMonitorInputStream,19,void setProgress(int bytesRead),False,NULL
104,ProgressMonitorInputStream,20,void setMillisToPopup(long millisToPopup),False,NULL
104,ProgressMonitorInputStream,21,void setMinimum(int minimum),False,NULL
104,ProgressMonitorInputStream,22,void setMaximum(int maximum),False,NULL
104,ProgressMonitorInputStream,23,void setMessage(String message),False,NULL
104,ProgressMonitorInputStream,24,void setDialogType(int dialogType),False,NULL
104,ProgressMonitorInputStream,25,void setCanceled(boolean canceled),False,NULL
105,RepaintManager,1,"void addDirtyRegion(int x, int y, int width, int height)",False,NULL
105,RepaintManager,2,void addDirtyRegion(Rectangle r),False,NULL
105,RepaintManager,3,void addInvalidComponent(Component c),False,NULL
105,RepaintManager,4,"void addDirtyRegion(int x, int y, int width, int height)",False,NULL
105,RepaintManager,5,void addDirtyRegion(Rectangle r),False,NULL
106,RowFilter,1,RowFilter.EntryFilter<Object> accept(RowFilter.Entry<?> entry),False,NULL
106,RowFilter,2,"RowFilter<Object, Object> andFilter(RowFilter<Object, Object> filter)",False,NULL
106,RowFilter,3,"RowFilter<Object, Object> orFilter(RowFilter<Object, Object> filter)",False,NULL
106,RowFilter,4,"RowFilter<Object, Object> notFilter(RowFilter<Object, Object> filter)",False,NULL
106,RowFilter,5,"RowFilter<Object, Object> equalsFilter(int column, Object value)",False,NULL
107,RowFilter.Entry,1,boolean include(Entry entry),False,NULL
107,RowFilter.Entry,2,Object getValue(int columnIndex),True,Returns the value at the specified index.
107,RowFilter.Entry,3,"Object getValue(int columnIndex, Class<?> type)",False,NULL
107,RowFilter.Entry,4,"Object getValue(int columnIndex, Class<?> type, boolean convert)",False,NULL
107,RowFilter.Entry,5,"Object getValue(int columnIndex, Class<?> type, boolean convert, boolean ignoreCase)",False,NULL
108,RowSorter,1,RowSorter(),False,NULL
108,RowSorter,2,void setModel(ListModel<? extends E> model),False,NULL
108,RowSorter,3,void setRowFilter(RowFilter<E> filter),False,NULL
108,RowSorter,4,void setSortKeys(List<? extends SortKey> keys),False,NULL
108,RowSorter,5,"void toggleSortKey(int columnIndex, int sortOrder)",False,NULL
109,RowSorter.SortKey,1,"SortKey(int columnIndex, int sortOrder)",False,NULL
109,RowSorter.SortKey,2,int getColumnIndex(),False,NULL
109,RowSorter.SortKey,3,int getSortOrder(),False,NULL
109,RowSorter.SortKey,4,void setColumnIndex(int columnIndex),False,NULL
109,RowSorter.SortKey,5,void setSortOrder(int sortOrder),False,NULL
110,ScrollPaneLayout,1,"void addLayoutComponent(String name, Component comp)",True,Adds the specified component to the layout.
110,ScrollPaneLayout,2,Dimension preferredLayoutSize(Container parent),True,"The preferred size of a ScrollPane is the size of the insets, plus the preferred size of the viewport, plus the preferred size of the visible headers, plus the preferred size of the scrollbars that will appear given the current view and the current scrollbar displayPolicies."
110,ScrollPaneLayout,3,Dimension minimumLayoutSize(Container parent),True,"The minimum size of a ScrollPane is the size of the insets plus minimum size of the viewport, plus the scrollpane's viewportBorder insets, plus the minimum size of the visible headers, plus the minimum size of the scrollbars whose displayPolicy isn't NEVER."
110,ScrollPaneLayout,4,void layoutContainer(Container parent),True,Lays out the scrollpane.
110,ScrollPaneLayout,5,void removeLayoutComponent(Component comp),True,Removes the specified component from the layout.
111,ScrollPaneLayout.UIResource,1,"void addLayoutComponent(String name, Component comp)",False,NULL
111,ScrollPaneLayout.UIResource,2,void removeLayoutComponent(Component comp),False,NULL
111,ScrollPaneLayout.UIResource,3,Dimension preferredLayoutSize(Container parent),False,NULL
111,ScrollPaneLayout.UIResource,4,Dimension minimumLayoutSize(Container parent),False,NULL
111,ScrollPaneLayout.UIResource,5,void layoutContainer(Container parent),False,NULL
112,SizeRequirements,1,int getHeight(),False,NULL
112,SizeRequirements,2,int getMaximumHeight(),False,NULL
112,SizeRequirements,3,int getMinimumHeight(),False,NULL
112,SizeRequirements,4,int getWidth(),False,NULL
112,SizeRequirements,5,int getMaximumWidth(),False,NULL
112,SizeRequirements,6,int getMinimumWidth(),False,NULL
113,SizeSequence,1,boolean add(E e),False,NULL
113,SizeSequence,2,"void add(int index, E element)",False,NULL
113,SizeSequence,3,void clear(),False,NULL
113,SizeSequence,4,boolean contains(Object o),False,NULL
113,SizeSequence,5,E get(int index),False,NULL
114,SortingFocusTraversalPolicy,1,SortingFocusTraversalPolicy(Comparator<? super Component> comparator),False,NULL
114,SortingFocusTraversalPolicy,2,void setComparator(Comparator<? super Component> comparator),True,Sets the Comparator which will be used to sort the Components in a focus traversal cycle.
114,SortingFocusTraversalPolicy,3,Comparator<? super Component> getComparator(),True,Returns the Comparator which will be used to sort the Components in a focus traversal cycle.
114,SortingFocusTraversalPolicy,4,void sort(List<Component> list),False,NULL
114,SortingFocusTraversalPolicy,5,void sort(Component[] array),False,NULL
115,SpinnerDateModel,1,SpinnerDateModel(),False,NULL
115,SpinnerDateModel,2,void setDate(Date date),False,NULL
115,SpinnerDateModel,3,Date getDate(),True,Returns the current element in this sequence of Dates.
115,SpinnerDateModel,4,void setCalendarField(int calendarField),True,Changes the size of the date value change computed by the nextValue and previousValue methods.
115,SpinnerDateModel,5,int getCalendarField(),True,Returns the Calendar field that is added to or subtracted from by the nextValue and previousValue methods.
116,SpinnerListModel,1,SpinnerListModel(),False,NULL
116,SpinnerListModel,2,void addListDataListener(ListDataListener l),False,NULL
116,SpinnerListModel,3,void removeListDataListener(ListDataListener l),False,NULL
116,SpinnerListModel,4,Object getNextValue(),True,Returns the next legal value of the underlying sequence or null if value is already the last element.
116,SpinnerListModel,5,Object getPreviousValue(),True,Returns the previous element of the underlying sequence or null if value is already the first element.
116,SpinnerListModel,6,Object getSelectedValue(),False,NULL
116,SpinnerListModel,7,"void setSelectedValue(Object value, boolean updateModel)",False,NULL
116,SpinnerListModel,8,int getSize(),False,NULL
116,SpinnerListModel,9,Object getElementAt(int index),False,NULL
116,SpinnerListModel,10,int getIndexOf(Object obj),False,NULL
116,SpinnerListModel,11,"void insertElementAt(Object obj, int index)",False,NULL
116,SpinnerListModel,12,void removeElementAt(int index),False,NULL
116,SpinnerListModel,13,void setListData(Object[] listData),False,NULL
116,SpinnerListModel,14,void setListData(List listData),False,NULL
116,SpinnerListModel,15,void add(Object obj),False,NULL
116,SpinnerListModel,16,"void add(int index, Object obj)",False,NULL
116,SpinnerListModel,17,void clear(),False,NULL
116,SpinnerListModel,18,boolean contains(Object obj),False,NULL
116,SpinnerListModel,19,Object get(int index),False,NULL
116,SpinnerListModel,20,int indexOf(Object obj),False,NULL
116,SpinnerListModel,21,boolean isEmpty(),False,NULL
116,SpinnerListModel,22,Iterator iterator(),False,NULL
116,SpinnerListModel,23,Object remove(int index),False,NULL
116,SpinnerListModel,24,boolean remove(Object obj),False,NULL
116,SpinnerListModel,25,"Object set(int index, Object element)",False,NULL
116,SpinnerListModel,26,int size(),False,NULL
116,SpinnerListModel,27,"List subList(int fromIndex, int toIndex)",False,NULL
116,SpinnerListModel,28,Object[] toArray(),False,NULL
116,SpinnerListModel,29,Object[] toArray(Object[] a),False,NULL
116,SpinnerListModel,30,ListIterator listIterator(),False,NULL
116,SpinnerListModel,31,ListIterator listIterator(int index),False,NULL
117,SpinnerNumberModel,1,"SpinnerNumberModel(int value, int minimum, int maximum, int stepSize)",False,NULL
117,SpinnerNumberModel,2,int getValue(),False,NULL
117,SpinnerNumberModel,3,void setValue(int value),False,NULL
117,SpinnerNumberModel,4,int getMinimum(),False,NULL
117,SpinnerNumberModel,5,int getMaximum(),False,NULL
117,SpinnerNumberModel,6,int getStepSize(),False,NULL
117,SpinnerNumberModel,7,void setStepSize(int stepSize),False,NULL
117,SpinnerNumberModel,8,"void setRange(int minimum, int maximum)",False,NULL
117,SpinnerNumberModel,9,"void setRange(int minimum, int maximum, int stepSize)",False,NULL
117,SpinnerNumberModel,10,void addChangeListener(ChangeListener l),False,NULL
117,SpinnerNumberModel,11,void removeChangeListener(ChangeListener l),False,NULL
117,SpinnerNumberModel,12,void fireStateChanged(),False,NULL
117,SpinnerNumberModel,13,void setValueIsAdjusting(boolean b),False,NULL
117,SpinnerNumberModel,14,boolean getValueIsAdjusting(),False,NULL
117,SpinnerNumberModel,15,void setExtendRange(boolean b),False,NULL
117,SpinnerNumberModel,16,boolean getExtendRange(),False,NULL
117,SpinnerNumberModel,17,void setInteger(boolean b),False,NULL
117,SpinnerNumberModel,18,boolean getInteger(),False,NULL
117,SpinnerNumberModel,19,void setFocus(boolean b),False,NULL
117,SpinnerNumberModel,20,boolean getFocus(),False,NULL
118,Spring,1,boolean add(E e),False,NULL
118,Spring,2,"void add(int index, E element)",False,NULL
118,Spring,3,boolean addAll(Collection<? extends E> c),False,NULL
118,Spring,4,"boolean addAll(int index, Collection<? extends E> c)",False,NULL
118,Spring,5,void clear(),False,NULL
119,SpringLayout,1,"void addLayoutComponent(Component comp, Object constraints)",True,"If constraints is an instance of SpringLayout.Constraints, associates the constraints with the specified component."
119,SpringLayout,2,"void addLayoutComponent(String name, Component comp)",True,"Has no effect, since this layout manager does not use a per-component string."
119,SpringLayout,3,"void addLayoutComponent(Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,4,"void addLayoutComponent(String name, Component comp, int index)",False,NULL
119,SpringLayout,5,"void addLayoutComponent(String name, Component comp, Object constraints)",False,NULL
119,SpringLayout,6,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,7,"void addLayoutComponent(Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,8,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,9,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,10,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,11,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,12,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,13,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,14,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,15,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,16,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,17,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,18,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,19,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,20,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,21,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,22,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,23,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,24,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,25,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,26,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,27,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,28,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,29,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,30,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,31,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,32,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,33,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,34,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,35,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,36,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,37,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,38,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,39,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,40,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,41,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,42,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,43,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,44,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,45,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,46,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,47,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,48,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,49,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,50,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,51,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,52,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,53,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
119,SpringLayout,54,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,NULL
120,SpringLayout.Constraints,1,void setConstraint(int constraint),False,NULL
120,SpringLayout.Constraints,2,"void setConstraint(int constraint, int value)",False,NULL
120,SpringLayout.Constraints,3,"void setConstraint(int constraint, int value, int weight)",False,NULL
120,SpringLayout.Constraints,4,"void setConstraint(int constraint, int value, int weight, int fill)",False,NULL
120,SpringLayout.Constraints,5,"void setConstraint(int constraint, int value, int weight, int fill, int align)",False,NULL
121,SwingUtilities,1,void invokeLater(Runnable runnable),True,Causes doRun.run() to be executed asynchronously on the AWT event dispatching thread.
121,SwingUtilities,2,void invokeAndWait(Runnable runnable),True,Causes doRun.run() to be executed synchronously on the AWT event dispatching thread.
121,SwingUtilities,3,boolean isEventDispatchThread(),True,Returns true if the current thread is an AWT event dispatching thread.
121,SwingUtilities,4,void groupAffinity(Object group),False,NULL
121,SwingUtilities,5,Object getGroupAffinity(Object group),False,NULL
122,SwingWorker,1,void execute(),True,Schedules this SwingWorker for execution on a worker thread.
122,SwingWorker,2,void cancel(boolean mayInterruptIfRunning),False,NULL
122,SwingWorker,3,boolean isCancelled(),True,Returns true if this task was cancelled before it completed normally.
122,SwingWorker,4,boolean isDone(),True,Returns true if this task completed.
122,SwingWorker,5,V get(),False,NULL
123,Timer,1,"Timer(int delay, ActionListener listener)",False,NULL
123,Timer,2,void start(),True,"Starts the Timer, causing it to start sending action events to its listeners."
123,Timer,3,void stop(),True,"Stops the Timer, causing it to stop sending action events to its listeners."
123,Timer,4,void setDelay(int delay),True,"Sets the Timer's between-event delay, the number of milliseconds between successive action events."
123,Timer,5,void setInitialDelay(int delay),True,"Sets the Timer's initial delay, the time in milliseconds to wait after the timer is started before firing the first event."
124,ToolTipManager,1,void setLightWeightPopupEnabled(boolean b),True,"When displaying the JToolTip, the ToolTipManager chooses to use a lightweight JPanel if it fits."
124,ToolTipManager,2,boolean isLightWeightPopupEnabled(),True,"Returns true if lightweight (all-Java) Tooltips are in use, or false if heavyweight (native peer) Tooltips are being used."
124,ToolTipManager,3,void setDismissDelay(int delay),True,Specifies the dismissal delay value.
124,ToolTipManager,4,int getDismissDelay(),True,Returns the dismissal delay value.
124,ToolTipManager,5,void setInitialDelay(int delay),True,Specifies the initial delay value.
125,TransferHandler,1,boolean canImport(TransferSupport support),False,NULL
125,TransferHandler,2,boolean importData(TransferSupport support),False,NULL
125,TransferHandler,3,boolean canExport(TransferSupport support),False,NULL
125,TransferHandler,4,"boolean exportAsFile(JComponent c, File file, int action)",False,NULL
125,TransferHandler,5,"void exportToClipboard(JComponent c, Clipboard clipboard, int action)",True,Causes a transfer from the given component to the given clipboard.
126,TransferHandler.DropLocation,1,int getDropLocation(),False,NULL
126,TransferHandler.DropLocation,2,int getInsertPosition(),False,NULL
126,TransferHandler.DropLocation,3,int getDropOperation(),False,NULL
126,TransferHandler.DropLocation,4,boolean isInsert(),False,NULL
126,TransferHandler.DropLocation,5,boolean isMove(),False,NULL
127,TransferHandler.TransferSupport,1,boolean canImport(TransferHandler.TransferSupport support),False,NULL
127,TransferHandler.TransferSupport,2,boolean canExport(TransferHandler.TransferSupport support),False,NULL
127,TransferHandler.TransferSupport,3,"void exportToClipboard(JComponent comp, Clipboard clipboard, Transferable t)",False,NULL
127,TransferHandler.TransferSupport,4,Transferable importData(TransferHandler.TransferSupport support),False,NULL
127,TransferHandler.TransferSupport,5,"void exportDone(JComponent comp, Transferable t, int action)",False,NULL
127,TransferHandler.TransferSupport,6,void importData(TransferHandler.TransferSupport support),False,NULL
127,TransferHandler.TransferSupport,7,void drop(TransferHandler.TransferSupport support),False,NULL
127,TransferHandler.TransferSupport,8,"void exportToDragboard(JComponent comp, DragSource ds, int action)",False,NULL
127,TransferHandler.TransferSupport,9,void importFromDragboard(TransferHandler.TransferSupport support),False,NULL
127,TransferHandler.TransferSupport,10,void drop(TransferHandler.TransferSupport support),False,NULL
127,TransferHandler.TransferSupport,11,"void exportToClipboard(JComponent comp, Clipboard clipboard, Transferable t)",False,NULL
127,TransferHandler.TransferSupport,12,void importData(TransferHandler.TransferSupport support),False,NULL
127,TransferHandler.TransferSupport,13,"void exportDone(JComponent comp, Transferable t, int action)",False,NULL
127,TransferHandler.TransferSupport,14,void importData(TransferHandler.TransferSupport support),False,NULL
127,TransferHandler.TransferSupport,15,void drop(TransferHandler.TransferSupport support),False,NULL
128,UIDefaults,1,"void put(Object key, Object value)",False,NULL
128,UIDefaults,2,Object get(Object key),True,Returns the value for key.
128,UIDefaults,3,Enumeration keys(),False,NULL
128,UIDefaults,4,void remove(Object key),False,NULL
128,UIDefaults,5,void clear(),False,NULL
129,UIDefaults.LazyInputMap,1,boolean add(E e),False,NULL
129,UIDefaults.LazyInputMap,2,"void add(int index, E element)",False,NULL
129,UIDefaults.LazyInputMap,3,boolean addAll(Collection<? extends E> c),False,NULL
129,UIDefaults.LazyInputMap,4,"boolean addAll(int index, Collection<? extends E> c)",False,NULL
129,UIDefaults.LazyInputMap,5,void clear(),False,NULL
130,UIDefaults.ProxyLazyValue,1,boolean isLoaded(),False,NULL
130,UIDefaults.ProxyLazyValue,2,Object get(),False,NULL
130,UIDefaults.ProxyLazyValue,3,void set(Object value),False,NULL
130,UIDefaults.ProxyLazyValue,4,void unload(),False,NULL
130,UIDefaults.ProxyLazyValue,5,Object clone(),False,NULL
131,UIManager,1,void setLookAndFeel(String className),True,"Loads the LookAndFeel specified by the given class name, using the current thread's context class loader, and passes it to setLookAndFeel(LookAndFeel)."
131,UIManager,2,String getDefaults().get(String key),False,NULL
131,UIManager,3,void addPropertyChangeListener(PropertyChangeListener listener),True,Adds a PropertyChangeListener to the listener list.
131,UIManager,4,void updateComponentTreeUI(Container root),False,NULL
131,UIManager,5,"void setLookAndFeel(String className, ClassLoader classLoader)",False,NULL
132,UIManager.LookAndFeelInfo,1,String getName(),True,Returns the name of the look and feel in a form suitable for a menu or other presentation
132,UIManager.LookAndFeelInfo,2,String getClassName(),True,Returns the name of the class that implements this look and feel.
132,UIManager.LookAndFeelInfo,3,String getStyle(),False,NULL
132,UIManager.LookAndFeelInfo,4,String getHierarchy(),False,NULL
132,UIManager.LookAndFeelInfo,5,String getID(),False,NULL
133,ViewportLayout,1,"void addLayoutComponent(String name, Component comp)",True,Adds the specified component to the layout.
133,ViewportLayout,2,"void addLayoutComponent(Component comp, Object constraints)",False,NULL
133,ViewportLayout,3,"void addLayoutComponent(String name, Component comp, int index)",False,NULL
133,ViewportLayout,4,"void addLayoutComponent(Component comp, Object constraints, int index)",False,NULL
133,ViewportLayout,5,void removeLayoutComponent(Component comp),True,Removes the specified component from the layout.
