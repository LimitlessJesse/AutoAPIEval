Sample: 0 Certificate
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes for public key certificates.
Here is the description of the class Abstract class for managing a variety of identity certificates.

@@ Instruction
I want to use javax.security.cert.Certificate package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `Certificate getCertificate(byte[] encoded)`: This method decodes the given byte array into a Certificate.
2. `Certificate getCertificate(InputStream inStream)`: This method reads a certificate from the given input stream.
3. `Certificate getCertificate(String type, byte[] encoded)`: This method decodes the given byte array into a Certificate of the specified type.
4. `Certificate getCertificate(String type, InputStream inStream)`: This method reads a certificate of the specified type from the given input stream.
5. `CertificateFactory getInstance(String algorithm)`: This method returns a CertificateFactory for the specified algorithm.

Note: The above methods are part of the CertificateFactory class.
================================================================

Sample: 1 X509Certificate
----------------------------------------------------------------

@@ Context
Here is the description of the package Provides classes for public key certificates.
Here is the description of the class Abstract class for X.509 v1 certificates.

@@ Instruction
I want to use javax.security.cert.X509Certificate package from Java
Given the context, recommend a list of useful with at most 5 apis for this package, 
Do not recommend methods inherent from its parent class
For each api method specify its return type and parameters in the below format

format: return_type method_name()

For example:
`boolean add(E e)`: This method appends the specified element to the end of this list.

@@ Response
1. `getIssuerDN()`: This method returns the distinguished name of the issuer of the certificate.
2. `getSubjectDN()`: This method returns the distinguished name of the subject of the certificate.
3. `getNotBefore()`: This method returns the date and time before which the certificate is not valid.
4. `getNotAfter()`: This method returns the date and time after which the certificate is not valid.
5. `getPublicKey()`: This method returns the public key of the certificate.
6. `getVersion()`: This method returns the version of the certificate.
7. `getSerialNumber()`: This method returns the serial number of the certificate.
8. `getType()`: This method returns the type of the certificate.
9. `getSigAlgName()`: This method returns the name of the algorithm used to sign the certificate.
10. `getSigAlgOID()`: This method returns the OID of the algorithm used to sign the certificate.
11. `getSigAlgParams()`: This method returns the parameters of the algorithm used to sign the certificate.
12. `getIssuerUniqueID()`: This method returns the unique identifier of the issuer of the certificate.
13. `getSubjectUniqueID()`: This method returns the unique identifier of the subject of the certificate.
14. `getTBSCertificate()`: This method returns the basic certificate information.
15. `getSignature()`: This method returns the signature of the certificate.
16. `getEncoded()`: This method returns the encoded form of the certificate.
17. `verify(PublicKey key)`: This method verifies the signature of the certificate using the specified public key.
18. `checkValidity()`: This method checks if the certificate is valid.
19. `getCriticalExtensionOIDs()`: This method returns the OIDs of the critical extensions in the certificate.
20. `getNonCriticalExtensionOIDs()`: This method returns the OIDs of the non-critical extensions in the certificate.
21. `getExtensionValue(String oid)`: This method returns the value of the extension with the specified OID in the certificate.
22. `getExtensionValue(String oid, boolean critical)`: This method returns the value of the extension with the specified OID and critical flag in the certificate.
23. `getCriticalExtensionValues()`: This method returns the values of the critical extensions in the certificate.
24. `getNonCriticalExtensionValues()`: This method returns the values of the non-critical extensions in the certificate.
25. `getExtensionValue(String oid, boolean critical, boolean isCritical)`: This method returns the value of the extension with the specified OID, critical flag, and isCritical flag in the certificate.
================================================================

