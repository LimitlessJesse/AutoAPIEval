Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,AbstractScriptEngine,1,"Object eval(String script, ScriptContext context)",False,,NULL
0,AbstractScriptEngine,2,"Object eval(Reader reader, ScriptContext context)",False,,NULL
0,AbstractScriptEngine,3,Object eval(String script),True,"Same as eval(Reader) except that the abstract eval(String, ScriptContext) is used.","

eval
public Object eval(String script)
            throws ScriptException
Same as eval(Reader) except that the abstract
 eval(String, ScriptContext) is used.

Specified by:
eval in interface ScriptEngine
Parameters:
script - A String containing the source of the script.
Returns:
The return value from eval(String, ScriptContext)
Throws:
ScriptException - if an error occurs in script.
NullPointerException - if any of the parameters is null.


"
0,AbstractScriptEngine,4,Object eval(Reader reader),True,"eval(Reader) calls the abstract eval(Reader, ScriptContext) passing the value of the context field.","

eval
public Object eval(Reader reader)
            throws ScriptException
eval(Reader) calls the abstract
 eval(Reader, ScriptContext) passing the value of the context
 field.

Specified by:
eval in interface ScriptEngine
Parameters:
reader - A Reader containing the source of the script.
Returns:
The return value from eval(Reader, ScriptContext)
Throws:
ScriptException - if an error occurs in script.
NullPointerException - if any of the parameters is null.


"
0,AbstractScriptEngine,5,Bindings createBindings(),False,,NULL
1,CompiledScript,1,CompiledScript compile(String script),False,,NULL
1,CompiledScript,2,CompiledScript compile(Reader reader),False,,NULL
1,CompiledScript,3,Object eval(Bindings bindings),True,Executes the program stored in the CompiledScript object using the supplied Bindings of attributes as the ENGINE_SCOPE of the associated ScriptEngine during script execution.,"

eval
public Object eval(Bindings bindings)
            throws ScriptException
Executes the program stored in the CompiledScript object using
 the supplied Bindings of attributes as the ENGINE_SCOPE of the
 associated ScriptEngine during script execution.  If bindings is null,
 then the effect of calling this method is same as that of eval(getEngine().getContext()).
 .
 The GLOBAL_SCOPE Bindings, Reader and Writer
 associated with the default ScriptContext of the associated ScriptEngine are used.

Parameters:
bindings - The bindings of attributes used for the ENGINE_SCOPE.
Returns:
The return value from the script execution
Throws:
ScriptException - if an error occurs.


"
1,CompiledScript,4,Object eval(),True,Executes the program stored in the CompiledScript object.,"

eval
public Object eval()
            throws ScriptException
Executes the program stored in the CompiledScript object.  The
 default ScriptContext of the associated ScriptEngine is used.
 The effect of calling this method is same as that of eval(getEngine().getContext()).

Returns:
The return value from the script execution
Throws:
ScriptException - if an error occurs.


"
1,CompiledScript,5,void discard(),False,,NULL
2,ScriptEngineManager,1,ScriptEngineManager(),False,,NULL
2,ScriptEngineManager,2,ScriptEngine getEngineByName(String engineName),True,Looks up and creates a ScriptEngine for a given name.,"

getEngineByName
public ScriptEngine getEngineByName(String shortName)
Looks up and creates a ScriptEngine for a given  name.
 The algorithm first searches for a ScriptEngineFactory that has been
 registered as a handler for the specified name using the registerEngineName
 method.
  If one is not found, it searches the set of ScriptEngineFactory instances
 stored by the constructor for one with the specified name.  If a ScriptEngineFactory
 is found by either method, it is used to create instance of ScriptEngine.

Parameters:
shortName - The short name of the ScriptEngine implementation.
 returned by the getNames method of its ScriptEngineFactory.
Returns:
A ScriptEngine created by the factory located in the search.  Returns null
 if no such factory was found.  The ScriptEngineManager sets its own globalScope
Bindings as the GLOBAL_SCOPE Bindings of the newly
 created ScriptEngine.
Throws:
NullPointerException - if shortName is null.


"
2,ScriptEngineManager,3,ScriptEngine getEngineByExtension(String extension),True,Look up and create a ScriptEngine for a given extension.,"

getEngineByExtension
public ScriptEngine getEngineByExtension(String extension)
Look up and create a ScriptEngine for a given extension.  The algorithm
 used by getEngineByName is used except that the search starts
 by looking for a ScriptEngineFactory registered to handle the
 given extension using registerEngineExtension.

Parameters:
extension - The given extension
Returns:
The engine to handle scripts with this extension.  Returns null
 if not found.
Throws:
NullPointerException - if extension is null.


"
2,ScriptEngineManager,4,ScriptEngine getEngineByMimeType(String mimeType),True,Look up and create a ScriptEngine for a given mime type.,"

getEngineByMimeType
public ScriptEngine getEngineByMimeType(String mimeType)
Look up and create a ScriptEngine for a given mime type.  The algorithm
 used by getEngineByName is used except that the search starts
 by looking for a ScriptEngineFactory registered to handle the
 given mime type using registerEngineMimeType.

Parameters:
mimeType - The given mime type
Returns:
The engine to handle scripts with this mime type.  Returns null
 if not found.
Throws:
NullPointerException - if mimeType is null.


"
2,ScriptEngineManager,5,"void put(String key, Object value)",True,Sets the specified key/value pair in the Global Scope.,"

put
public void put(String key,
                Object value)
Sets the specified key/value pair in the Global Scope.

Parameters:
key - Key to set
value - Value to set.
Throws:
NullPointerException - if key is null.
IllegalArgumentException - if key is empty string.


"
3,SimpleBindings,1,SimpleBindings(),False,,NULL
3,SimpleBindings,2,"Object put(String name, Object value)",True,Sets the specified key/value in the underlying map field.,"

put
public Object put(String name,
                  Object value)
Sets the specified key/value in the underlying map field.

Specified by:
put in interface Map<String,Object>
Specified by:
put in interface Bindings
Parameters:
name - Name of value
value - Value to set.
Returns:
Previous value for the specified key.  Returns null if key was previously
 unset.
Throws:
NullPointerException - if the name is null.
IllegalArgumentException - if the name is empty.


"
3,SimpleBindings,3,Object get(String name),False,,NULL
3,SimpleBindings,4,Set<String> keySet(),True,Returns a Set view of the keys contained in this map.,"

keySet
public Set<String> keySet()
Returns a Set view of the keys contained in this map.
 The set is backed by the map, so changes to the map are
 reflected in the set, and vice-versa.  If the map is modified
 while an iteration over the set is in progress (except through
 the iterator's own remove operation), the results of
 the iteration are undefined.  The set supports element removal,
 which removes the corresponding mapping from the map, via the
 Iterator.remove, Set.remove,
 removeAll, retainAll, and clear
 operations.  It does not support the add or addAll
 operations.

Specified by:
keySet in interface Map<String,Object>
Returns:
a set view of the keys contained in this map


"
3,SimpleBindings,5,void clear(),True,Removes all of the mappings from this map (optional operation).,"

clear
public void clear()
Removes all of the mappings from this map (optional operation).
 The map will be empty after this call returns.

Specified by:
clear in interface Map<String,Object>


"
4,SimpleScriptContext,1,Object getAttribute(String name),True,Retrieves the value of the attribute with the given name in the scope occurring earliest in the search order.,"

getAttribute
public Object getAttribute(String name)
Retrieves the value of the attribute with the given name in
 the scope occurring earliest in the search order.  The order
 is determined by the numeric value of the scope parameter (lowest
 scope values first.)

Specified by:
getAttribute in interface ScriptContext
Parameters:
name - The name of the the attribute to retrieve.
Returns:
The value of the attribute in the lowest scope for
 which an attribute with the given name is defined.  Returns
 null if no attribute with the name exists in any scope.
Throws:
NullPointerException - if the name is null.
IllegalArgumentException - if the name is empty.


"
4,SimpleScriptContext,2,"Object getAttribute(String name, int scope)",True,Gets the value of an attribute in a given scope.,"

getAttribute
public Object getAttribute(String name,
                           int scope)
Gets the value of an attribute in a given scope.

Specified by:
getAttribute in interface ScriptContext
Parameters:
name - The name of the attribute to retrieve.
scope - The scope in which to retrieve the attribute.
Returns:
The value of the attribute. Returns null is the name
 does not exist in the given scope.
Throws:
IllegalArgumentException - if the name is empty or if the value of scope is invalid.
NullPointerException - if the name is null.


"
4,SimpleScriptContext,3,Object removeAttribute(String name),False,,NULL
4,SimpleScriptContext,4,"Object removeAttribute(String name, int scope)",True,Remove an attribute in a given scope.,"

removeAttribute
public Object removeAttribute(String name,
                              int scope)
Remove an attribute in a given scope.

Specified by:
removeAttribute in interface ScriptContext
Parameters:
name - The name of the attribute to remove
scope - The scope in which to remove the attribute
Returns:
The removed value.
Throws:
IllegalArgumentException - if the name is empty or if the scope is invalid.
NullPointerException - if the name is null.


"
4,SimpleScriptContext,5,"void setAttribute(String name, Object value)",False,,NULL
4,SimpleScriptContext,6,"void setAttribute(String name, Object value, int scope)",True,Sets the value of an attribute in a given scope.,"

setAttribute
public void setAttribute(String name,
                         Object value,
                         int scope)
Sets the value of an attribute in a given scope.

Specified by:
setAttribute in interface ScriptContext
Parameters:
name - The name of the attribute to set
value - The value of the attribute
scope - The scope in which to set the attribute
Throws:
IllegalArgumentException - if the name is empty or if the scope is invalid.
NullPointerException - if the name is null.


"
