ClassName,Method,Return Type,Description,Full Description
AuthorizeCallback,getAuthenticationID(),String,Returns the authentication id to check.,"

getAuthenticationID
public String getAuthenticationID()
Returns the authentication id to check.

Returns:
The authentication id to check.


"
AuthorizeCallback,getAuthorizationID(),String,Returns the authorization id to check.,"

getAuthorizationID
public String getAuthorizationID()
Returns the authorization id to check.

Returns:
The authentication id to check.


"
AuthorizeCallback,getAuthorizedID(),String,Returns the id of the authorized user.,"

getAuthorizedID
public String getAuthorizedID()
Returns the id of the authorized user.

Returns:
The id of the authorized user. null means the
 authorization failed.
See Also:
setAuthorized(boolean), 
setAuthorizedID(java.lang.String)


"
AuthorizeCallback,isAuthorized(),boolean,Determines whether the authentication id is allowed to act on behalf of the authorization id.,"

isAuthorized
public boolean isAuthorized()
Determines whether the authentication id is allowed to
 act on behalf of the authorization id.

Returns:
true if authorization is allowed; false otherwise
See Also:
setAuthorized(boolean), 
getAuthorizedID()


"
AuthorizeCallback,setAuthorized(boolean ok),void,Sets whether the authorization is allowed.,"

setAuthorized
public void setAuthorized(boolean ok)
Sets whether the authorization is allowed.

Parameters:
ok - true if authorization is allowed; false otherwise
See Also:
isAuthorized(), 
setAuthorizedID(java.lang.String)


"
AuthorizeCallback,setAuthorizedID(String id),void,Sets the id of the authorized entity.,"

setAuthorizedID
public void setAuthorizedID(String id)
Sets the id of the authorized entity. Called by handler only when the id
 is different from getAuthorizationID(). For example, the id
 might need to be canonicalized for the environment in which it
 will be used.

Parameters:
id - The id of the authorized user.
See Also:
setAuthorized(boolean), 
getAuthorizedID()


"
Sasl,"createSaslClient(String[] mechanisms, String authorizationId, String protocol, String serverName, Map<String,?> props, CallbackHandler cbh)",static SaslClient,Creates a SaslClient using the parameters supplied.,"

createSaslClient
public static SaslClient createSaslClient(String[] mechanisms,
                                          String authorizationId,
                                          String protocol,
                                          String serverName,
                                          Map<String,?> props,
                                          CallbackHandler cbh)
                                   throws SaslException
Creates a SaslClient using the parameters supplied.

 This method uses the
JCA Security Provider Framework, described in the
 ""Java Cryptography Architecture API Specification & Reference"", for
 locating and selecting a SaslClient implementation.

 First, it
 obtains an ordered list of SaslClientFactory instances from
 the registered security providers for the ""SaslClientFactory"" service
 and the specified SASL mechanism(s). It then invokes
 createSaslClient() on each factory instance on the list
 until one produces a non-null SaslClient instance. It returns
 the non-null SaslClient instance, or null if the search fails
 to produce a non-null SaslClient instance.

 A security provider for SaslClientFactory registers with the
 JCA Security Provider Framework keys of the form 
SaslClientFactory.mechanism_name

 and values that are class names of implementations of
 javax.security.sasl.SaslClientFactory.

 For example, a provider that contains a factory class,
 com.wiz.sasl.digest.ClientFactory, that supports the
 ""DIGEST-MD5"" mechanism would register the following entry with the JCA:
 SaslClientFactory.DIGEST-MD5 com.wiz.sasl.digest.ClientFactory

 See the
 ""Java Cryptography Architecture API Specification & Reference""
 for information about how to install and configure security service
  providers.
 
 If a mechanism is listed in the jdk.sasl.disabledMechanisms
 security property, it will be ignored and won't be negotiated.

Parameters:
mechanisms - The non-null list of mechanism names to try. Each is the
 IANA-registered name of a SASL mechanism. (e.g. ""GSSAPI"", ""CRAM-MD5"").
authorizationId - The possibly null protocol-dependent
 identification to be used for authorization.
 If null or empty, the server derives an authorization
 ID from the client's authentication credentials.
 When the SASL authentication completes successfully,
 the specified entity is granted access.
protocol - The non-null string name of the protocol for which
 the authentication is being performed (e.g., ""ldap"").
serverName - The non-null fully-qualified host name of the server
 to authenticate to.
props - The possibly null set of properties used to
 select the SASL mechanism and to configure the authentication
 exchange of the selected mechanism.
 For example, if props contains the
 Sasl.POLICY_NOPLAINTEXT property with the value
 ""true"", then the selected
 SASL mechanism must not be susceptible to simple plain passive attacks.
 In addition to the standard properties declared in this class,
 other, possibly mechanism-specific, properties can be included.
 Properties not relevant to the selected mechanism are ignored,
 including any map entries with non-String keys.
cbh - The possibly null callback handler to used by the SASL
 mechanisms to get further information from the application/library
 to complete the authentication. For example, a SASL mechanism might
 require the authentication ID, password and realm from the caller.
 The authentication ID is requested by using a NameCallback.
 The password is requested by using a PasswordCallback.
 The realm is requested by using a RealmChoiceCallback if there is a list
 of realms to choose from, and by using a RealmCallback if
 the realm must be entered.
Returns:
A possibly null SaslClient created using the parameters
 supplied. If null, cannot find a SaslClientFactory
 that will produce one.
Throws:
SaslException - If cannot create a SaslClient because
 of an error.


"
Sasl,"createSaslServer(String mechanism, String protocol, String serverName, Map<String,?> props, CallbackHandler cbh)",static SaslServer,Creates a SaslServer for the specified mechanism.,"

createSaslServer
public static SaslServer createSaslServer(String mechanism,
                                          String protocol,
                                          String serverName,
                                          Map<String,?> props,
                                          CallbackHandler cbh)
                                   throws SaslException
Creates a SaslServer for the specified mechanism.

 This method uses the
JCA Security Provider Framework,
 described in the
 ""Java Cryptography Architecture API Specification & Reference"", for
 locating and selecting a SaslServer implementation.

 First, it
 obtains an ordered list of SaslServerFactory instances from
 the registered security providers for the ""SaslServerFactory"" service
 and the specified mechanism. It then invokes
 createSaslServer() on each factory instance on the list
 until one produces a non-null SaslServer instance. It returns
 the non-null SaslServer instance, or null if the search fails
 to produce a non-null SaslServer instance.

 A security provider for SaslServerFactory registers with the
 JCA Security Provider Framework keys of the form 
SaslServerFactory.mechanism_name

 and values that are class names of implementations of
 javax.security.sasl.SaslServerFactory.

 For example, a provider that contains a factory class,
 com.wiz.sasl.digest.ServerFactory, that supports the
 ""DIGEST-MD5"" mechanism would register the following entry with the JCA:
 SaslServerFactory.DIGEST-MD5  com.wiz.sasl.digest.ServerFactory

 See the
 ""Java Cryptography Architecture API Specification & Reference""
 for information about how to install and configure security
 service providers.
 
 If mechanism is listed in the jdk.sasl.disabledMechanisms
 security property, it will be ignored and this method returns null.

Parameters:
mechanism - The non-null mechanism name. It must be an
 IANA-registered name of a SASL mechanism. (e.g. ""GSSAPI"", ""CRAM-MD5"").
protocol - The non-null string name of the protocol for which
 the authentication is being performed (e.g., ""ldap"").
serverName - The fully qualified host name of the server, or null
 if the server is not bound to any specific host name. If the mechanism
 does not allow an unbound server, a SaslException will
 be thrown.
props - The possibly null set of properties used to
 select the SASL mechanism and to configure the authentication
 exchange of the selected mechanism.
 For example, if props contains the
 Sasl.POLICY_NOPLAINTEXT property with the value
 ""true"", then the selected
 SASL mechanism must not be susceptible to simple plain passive attacks.
 In addition to the standard properties declared in this class,
 other, possibly mechanism-specific, properties can be included.
 Properties not relevant to the selected mechanism are ignored,
 including any map entries with non-String keys.
cbh - The possibly null callback handler to used by the SASL
 mechanisms to get further information from the application/library
 to complete the authentication. For example, a SASL mechanism might
 require the authentication ID, password and realm from the caller.
 The authentication ID is requested by using a NameCallback.
 The password is requested by using a PasswordCallback.
 The realm is requested by using a RealmChoiceCallback if there is a list
 of realms to choose from, and by using a RealmCallback if
 the realm must be entered.
Returns:
A possibly null SaslServer created using the parameters
 supplied. If null, cannot find a SaslServerFactory
 that will produce one.
Throws:
SaslException - If cannot create a SaslServer because
 of an error.


"
Sasl,getSaslClientFactories(),static Enumeration<SaslClientFactory>,Gets an enumeration of known factories for producing SaslClient.,"

getSaslClientFactories
public static Enumeration<SaslClientFactory> getSaslClientFactories()
Gets an enumeration of known factories for producing SaslClient.
 This method uses the same algorithm for locating factories as
 createSaslClient().

Returns:
A non-null enumeration of known factories for producing
 SaslClient.
See Also:
createSaslClient(java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.util.Map<java.lang.String, ?>, javax.security.auth.callback.CallbackHandler)


"
Sasl,getSaslServerFactories(),static Enumeration<SaslServerFactory>,Gets an enumeration of known factories for producing SaslServer.,"

getSaslServerFactories
public static Enumeration<SaslServerFactory> getSaslServerFactories()
Gets an enumeration of known factories for producing SaslServer.
 This method uses the same algorithm for locating factories as
 createSaslServer().

Returns:
A non-null enumeration of known factories for producing
 SaslServer.
See Also:
createSaslServer(java.lang.String, java.lang.String, java.lang.String, java.util.Map<java.lang.String, ?>, javax.security.auth.callback.CallbackHandler)


"
