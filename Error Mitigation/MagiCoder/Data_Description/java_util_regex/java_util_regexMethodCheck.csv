Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,Matcher,1,Pattern compile(String regex),False,,NULL
0,Matcher,2,Matcher matcher(CharSequence input),False,,NULL
0,Matcher,3,boolean find(),True,Attempts to find the next subsequence of the input sequence that matches the pattern.,"

find
public boolean find()
Attempts to find the next subsequence of the input sequence that matches
 the pattern.

  This method starts at the beginning of this matcher's region, or, if
 a previous invocation of the method was successful and the matcher has
 not since been reset, at the first character not matched by the previous
 match.

  If the match succeeds then more information can be obtained via the
 start, end, and group methods.  

Returns:
true if, and only if, a subsequence of the input
          sequence matches this matcher's pattern


"
0,Matcher,4,boolean matches(),True,Attempts to match the entire region against the pattern.,"

matches
public boolean matches()
Attempts to match the entire region against the pattern.

  If the match succeeds then more information can be obtained via the
 start, end, and group methods.  

Returns:
true if, and only if, the entire region sequence
          matches this matcher's pattern


"
0,Matcher,5,boolean lookingAt(),True,"Attempts to match the input sequence, starting at the beginning of the region, against the pattern.","

lookingAt
public boolean lookingAt()
Attempts to match the input sequence, starting at the beginning of the
 region, against the pattern.

  Like the matches method, this method always starts
 at the beginning of the region; unlike that method, it does not
 require that the entire region be matched.

  If the match succeeds then more information can be obtained via the
 start, end, and group methods.  

Returns:
true if, and only if, a prefix of the input
          sequence matches this matcher's pattern


"
1,Pattern,1,Pattern compile(String regex),True,Compiles the given regular expression into a pattern.,"

compile
public static Pattern compile(String regex)
Compiles the given regular expression into a pattern.

Parameters:
regex - The expression to be compiled
Returns:
the given regular expression compiled into a pattern
Throws:
PatternSyntaxException - If the expression's syntax is invalid


"
1,Pattern,2,Matcher matcher(CharSequence input),True,Creates a matcher that will match the given input against this pattern.,"

matcher
public Matcher matcher(CharSequence input)
Creates a matcher that will match the given input against this pattern.

Parameters:
input - The character sequence to be matched
Returns:
A new matcher for this pattern


"
1,Pattern,3,String pattern(),True,Returns the regular expression from which this pattern was compiled.,"

pattern
public String pattern()
Returns the regular expression from which this pattern was compiled.

Returns:
The source of this pattern


"
1,Pattern,4,String[] split(CharSequence input),True,Splits the given input sequence around matches of this pattern.,"

split
public String[] split(CharSequence input)
Splits the given input sequence around matches of this pattern.

  This method works as if by invoking the two-argument split method with the given input
 sequence and a limit argument of zero.  Trailing empty strings are
 therefore not included in the resulting array. 
 The input ""boo:and:foo"", for example, yields the following
 results with these expressions:

 
Regex    
Result
:
{ ""boo"", ""and"", ""foo"" }
o
{ ""b"", """", "":and:f"" }


Parameters:
input - The character sequence to be split
Returns:
The array of strings computed by splitting the input
          around matches of this pattern


"
1,Pattern,5,"String[] split(CharSequence input, int limit)",True,Splits the given input sequence around matches of this pattern.,"

split
public String[] split(CharSequence input,
                      int limit)
Splits the given input sequence around matches of this pattern.

  The array returned by this method contains each substring of the
 input sequence that is terminated by another subsequence that matches
 this pattern or is terminated by the end of the input sequence.  The
 substrings in the array are in the order in which they occur in the
 input. If this pattern does not match any subsequence of the input then
 the resulting array has just one element, namely the input sequence in
 string form.

  When there is a positive-width match at the beginning of the input
 sequence then an empty leading substring is included at the beginning
 of the resulting array. A zero-width match at the beginning however
 never produces such empty leading substring.

  The limit parameter controls the number of times the
 pattern is applied and therefore affects the length of the resulting
 array.  If the limit n is greater than zero then the pattern
 will be applied at most n - 1 times, the array's
 length will be no greater than n, and the array's last entry
 will contain all input beyond the last matched delimiter.  If n
 is non-positive then the pattern will be applied as many times as
 possible and the array can have any length.  If n is zero then
 the pattern will be applied as many times as possible, the array can
 have any length, and trailing empty strings will be discarded.

  The input ""boo:and:foo"", for example, yields the following
 results with these parameters:

 
Regex    
Limit    
Result    
:
2
{ ""boo"", ""and:foo"" }
:
5
{ ""boo"", ""and"", ""foo"" }
:
-2
{ ""boo"", ""and"", ""foo"" }
o
5
{ ""b"", """", "":and:f"", """", """" }
o
-2
{ ""b"", """", "":and:f"", """", """" }
o
0
{ ""b"", """", "":and:f"" }


Parameters:
input - The character sequence to be split
limit - The result threshold, as described above
Returns:
The array of strings computed by splitting the input
          around matches of this pattern


"
