Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,BufferedInputStream,1,int read(),True,See the general contract of the read method of InputStream.,"

read
public int read()
         throws IOException
See
 the general contract of the read
 method of InputStream.

Overrides:
read in class FilterInputStream
Returns:
the next byte of data, or -1 if the end of the
             stream is reached.
Throws:
IOException - if this input stream has been closed by
                          invoking its close() method,
                          or an I/O error occurs.
See Also:
FilterInputStream.in


"
0,BufferedInputStream,2,int read(byte[] b),False,,NULL
0,BufferedInputStream,3,"int read(byte[] b, int off, int len)",True,"Reads bytes from this byte-input stream into the specified byte array, starting at the given offset.","

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads bytes from this byte-input stream into the specified byte array,
 starting at the given offset.

  This method implements the general contract of the corresponding
 read method of
 the InputStream class.  As an additional
 convenience, it attempts to read as many bytes as possible by repeatedly
 invoking the read method of the underlying stream.  This
 iterated read continues until one of the following
 conditions becomes true: 
 The specified number of bytes have been read,

    The read method of the underlying stream returns
   -1, indicating end-of-file, or

    The available method of the underlying stream
   returns zero, indicating that further input requests would block.

  If the first read on the underlying stream returns
 -1 to indicate end-of-file then this method returns
 -1.  Otherwise this method returns the number of bytes
 actually read.

  Subclasses of this class are encouraged, but not required, to
 attempt to read as many bytes as possible in the same fashion.

Overrides:
read in class FilterInputStream
Parameters:
b - destination buffer.
off - offset at which to start storing bytes.
len - maximum number of bytes to read.
Returns:
the number of bytes read, or -1 if the end of
             the stream has been reached.
Throws:
IOException - if this input stream has been closed by
                          invoking its close() method,
                          or an I/O error occurs.
See Also:
FilterInputStream.in


"
0,BufferedInputStream,4,long skip(long n),True,See the general contract of the skip method of InputStream.,"

skip
public long skip(long n)
          throws IOException
See the general contract of the skip
 method of InputStream.

Overrides:
skip in class FilterInputStream
Parameters:
n - the number of bytes to be skipped.
Returns:
the actual number of bytes skipped.
Throws:
IOException - if the stream does not support seek,
                          or if this input stream has been closed by
                          invoking its close() method, or an
                          I/O error occurs.


"
0,BufferedInputStream,5,int available(),True,Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream.,"

available
public int available()
              throws IOException
Returns an estimate of the number of bytes that can be read (or
 skipped over) from this input stream without blocking by the next
 invocation of a method for this input stream. The next invocation might be
 the same thread or another thread.  A single read or skip of this
 many bytes will not block, but may read or skip fewer bytes.
 
 This method returns the sum of the number of bytes remaining to be read in
 the buffer (count - pos) and the result of calling the
 in.available().

Overrides:
available in class FilterInputStream
Returns:
an estimate of the number of bytes that can be read (or skipped
             over) from this input stream without blocking.
Throws:
IOException - if this input stream has been closed by
                          invoking its close() method,
                          or an I/O error occurs.


"
1,BufferedOutputStream,1,BufferedOutputStream(OutputStream out),False,,NULL
1,BufferedOutputStream,2,void write(int b),True,Writes the specified byte to this buffered output stream.,"

write
public void write(int b)
           throws IOException
Writes the specified byte to this buffered output stream.

Overrides:
write in class FilterOutputStream
Parameters:
b - the byte to be written.
Throws:
IOException - if an I/O error occurs.


"
1,BufferedOutputStream,3,void write(byte[] b),False,,NULL
1,BufferedOutputStream,4,"void write(byte[] b, int off, int len)",True,Writes len bytes from the specified byte array starting at offset off to this buffered output stream.,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Writes len bytes from the specified byte array
 starting at offset off to this buffered output stream.

  Ordinarily this method stores bytes from the given array into this
 stream's buffer, flushing the buffer to the underlying output stream as
 needed.  If the requested length is at least as large as this stream's
 buffer, however, then this method will flush the buffer and write the
 bytes directly to the underlying output stream.  Thus redundant
 BufferedOutputStreams will not copy data unnecessarily.

Overrides:
write in class FilterOutputStream
Parameters:
b - the data.
off - the start offset in the data.
len - the number of bytes to write.
Throws:
IOException - if an I/O error occurs.
See Also:
FilterOutputStream.write(int)


"
1,BufferedOutputStream,5,void flush(),True,Flushes this buffered output stream.,"

flush
public void flush()
           throws IOException
Flushes this buffered output stream. This forces any buffered
 output bytes to be written out to the underlying output stream.

Specified by:
flush in interface Flushable
Overrides:
flush in class FilterOutputStream
Throws:
IOException - if an I/O error occurs.
See Also:
FilterOutputStream.out


"
2,BufferedReader,1,BufferedReader(Reader in),False,,NULL
2,BufferedReader,2,"BufferedReader(Reader in, int sz)",False,,NULL
2,BufferedReader,3,String readLine(),True,Reads a line of text.,"

readLine
public String readLine()
                throws IOException
Reads a line of text.  A line is considered to be terminated by any one
 of a line feed ('\n'), a carriage return ('\r'), or a carriage return
 followed immediately by a linefeed.

Returns:
A String containing the contents of the line, not including
             any line-termination characters, or null if the end of the
             stream has been reached
Throws:
IOException - If an I/O error occurs
See Also:
Files.readAllLines(java.nio.file.Path, java.nio.charset.Charset)


"
2,BufferedReader,4,"String readLine(char[] cbuf, int off, int len)",False,,NULL
2,BufferedReader,5,void close(),True,Closes the stream and releases any system resources associated with it.,"

close
public void close()
           throws IOException
Description copied from class: Reader
Closes the stream and releases any system resources associated with
 it.  Once the stream has been closed, further read(), ready(),
 mark(), reset(), or skip() invocations will throw an IOException.
 Closing a previously closed stream has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in class Reader
Throws:
IOException - If an I/O error occurs


"
3,BufferedWriter,1,BufferedWriter(Writer out),False,,NULL
3,BufferedWriter,2,void write(int c),True,Writes a single character.,"

write
public void write(int c)
           throws IOException
Writes a single character.

Overrides:
write in class Writer
Parameters:
c - int specifying a character to be written
Throws:
IOException - If an I/O error occurs


"
3,BufferedWriter,3,void write(char[] cbuf),False,,NULL
3,BufferedWriter,4,void write(String str),False,,NULL
3,BufferedWriter,5,void newLine(),True,Writes a line separator.,"

newLine
public void newLine()
             throws IOException
Writes a line separator.  The line separator string is defined by the
 system property line.separator, and is not necessarily a single
 newline ('\n') character.

Throws:
IOException - If an I/O error occurs


"
4,ByteArrayInputStream,1,ByteArrayInputStream(byte[] buf),False,,NULL
4,ByteArrayInputStream,2,int read(),True,Reads the next byte of data from this input stream.,"

read
public int read()
Reads the next byte of data from this input stream. The value
 byte is returned as an int in the range
 0 to 255. If no byte is available
 because the end of the stream has been reached, the value
 -1 is returned.
 
 This read method
 cannot block.

Specified by:
read in class InputStream
Returns:
the next byte of data, or -1 if the end of the
          stream has been reached.


"
4,ByteArrayInputStream,3,"int read(byte b[], int off, int len)",False,,NULL
4,ByteArrayInputStream,4,long skip(long n),True,Skips n bytes of input from this input stream.,"

skip
public long skip(long n)
Skips n bytes of input from this input stream. Fewer
 bytes might be skipped if the end of the input stream is reached.
 The actual number k
 of bytes to be skipped is equal to the smaller
 of n and  count-pos.
 The value k is added into pos
 and k is returned.

Overrides:
skip in class InputStream
Parameters:
n - the number of bytes to be skipped.
Returns:
the actual number of bytes skipped.


"
4,ByteArrayInputStream,5,int available(),True,Returns the number of remaining bytes that can be read (or skipped over) from this input stream.,"

available
public int available()
Returns the number of remaining bytes that can be read (or skipped over)
 from this input stream.
 
 The value returned is count - pos,
 which is the number of bytes remaining to be read from the input buffer.

Overrides:
available in class InputStream
Returns:
the number of remaining bytes that can be read (or skipped
          over) from this input stream without blocking.


"
5,ByteArrayOutputStream,1,ByteArrayOutputStream(),False,,NULL
5,ByteArrayOutputStream,2,void write(int b),True,Writes the specified byte to this byte array output stream.,"

write
public void write(int b)
Writes the specified byte to this byte array output stream.

Specified by:
write in class OutputStream
Parameters:
b - the byte to be written.


"
5,ByteArrayOutputStream,3,void write(byte[] b),False,,NULL
5,ByteArrayOutputStream,4,"void write(byte[] b, int off, int len)",True,Writes len bytes from the specified byte array starting at offset off to this byte array output stream.,"

write
public void write(byte[] b,
                  int off,
                  int len)
Writes len bytes from the specified byte array
 starting at offset off to this byte array output stream.

Overrides:
write in class OutputStream
Parameters:
b - the data.
off - the start offset in the data.
len - the number of bytes to write.


"
5,ByteArrayOutputStream,5,byte[] toByteArray(),True,Creates a newly allocated byte array.,"

toByteArray
public byte[] toByteArray()
Creates a newly allocated byte array. Its size is the current
 size of this output stream and the valid contents of the buffer
 have been copied into it.

Returns:
the current contents of this output stream, as a byte array.
See Also:
size()


"
6,CharArrayReader,1,CharArrayReader(char buf[]),False,,NULL
6,CharArrayReader,2,int read(),True,Reads a single character.,"

read
public int read()
         throws IOException
Reads a single character.

Overrides:
read in class Reader
Returns:
The character read, as an integer in the range 0 to 65535
             (0x00-0xffff), or -1 if the end of the stream has
             been reached
Throws:
IOException - If an I/O error occurs


"
6,CharArrayReader,3,"int read(char cbuf[], int off, int len)",False,,NULL
6,CharArrayReader,4,long skip(long n),True,Skips characters.,"

skip
public long skip(long n)
          throws IOException
Skips characters.  Returns the number of characters that were skipped.

 The n parameter may be negative, even though the
 skip method of the Reader superclass throws
 an exception in this case. If n is negative, then
 this method does nothing and returns 0.

Overrides:
skip in class Reader
Parameters:
n - The number of characters to skip
Returns:
The number of characters actually skipped
Throws:
IOException - If the stream is closed, or an I/O error occurs


"
6,CharArrayReader,5,boolean ready(),True,Tells whether this stream is ready to be read.,"

ready
public boolean ready()
              throws IOException
Tells whether this stream is ready to be read.  Character-array readers
 are always ready to be read.

Overrides:
ready in class Reader
Returns:
True if the next read() is guaranteed not to block for input,
 false otherwise.  Note that returning false does not guarantee that the
 next read will block.
Throws:
IOException - If an I/O error occurs


"
7,CharArrayWriter,1,CharArrayWriter(),False,,NULL
7,CharArrayWriter,2,CharArrayWriter(int initialSize),False,,NULL
7,CharArrayWriter,3,void write(int c),True,Writes a character to the buffer.,"

write
public void write(int c)
Writes a character to the buffer.

Overrides:
write in class Writer
Parameters:
c - int specifying a character to be written


"
7,CharArrayWriter,4,void write(char[] cbuf),False,,NULL
7,CharArrayWriter,5,"void write(char[] cbuf, int off, int len)",True,Writes characters to the buffer.,"

write
public void write(char[] c,
                  int off,
                  int len)
Writes characters to the buffer.

Specified by:
write in class Writer
Parameters:
c - the data to be written
off - the start offset in the data
len - the number of chars that are written


"
7,CharArrayWriter,6,void writeTo(Writer out),True,Writes the contents of the buffer to another character stream.,"

writeTo
public void writeTo(Writer out)
             throws IOException
Writes the contents of the buffer to another character stream.

Parameters:
out - the output stream to write to
Throws:
IOException - If an I/O error occurs.


"
7,CharArrayWriter,7,void reset(),True,Resets the buffer so that you can use it again without throwing away the already allocated buffer.,"

reset
public void reset()
Resets the buffer so that you can use it again without
 throwing away the already allocated buffer.

"
7,CharArrayWriter,8,char[] toCharArray(),True,Returns a copy of the input data.,"

toCharArray
public char[] toCharArray()
Returns a copy of the input data.

Returns:
an array of chars copied from the input data.


"
7,CharArrayWriter,9,String toString(),True,Converts input data to a string.,"

toString
public String toString()
Converts input data to a string.

Overrides:
toString in class Object
Returns:
the string.


"
7,CharArrayWriter,10,int size(),True,Returns the current size of the buffer.,"

size
public int size()
Returns the current size of the buffer.

Returns:
an int representing the current size of the buffer.


"
8,Console,1,Console console = System.console();,False,,NULL
8,Console,2,char[] readPassword(),True,Reads a password or passphrase from the console with echoing disabled,"

readPassword
public char[] readPassword()
Reads a password or passphrase from the console with echoing disabled

Returns:
A character array containing the password or passphrase read
          from the console, not including any line-termination characters,
          or null if an end of stream has been reached.
Throws:
IOError - If an I/O error occurs.


"
8,Console,3,String readLine(),True,Reads a single line of text from the console.,"

readLine
public String readLine()
Reads a single line of text from the console.

Returns:
A string containing the line read from the console, not
          including any line-termination characters, or null
          if an end of stream has been reached.
Throws:
IOError - If an I/O error occurs.


"
8,Console,4,"void printf(String format, Object... args)",False,,NULL
8,Console,5,void writer().print(String x),False,,NULL
9,DataInputStream,1,int read(),False,,NULL
9,DataInputStream,2,int read(byte[] b),True,Reads some number of bytes from the contained input stream and stores them into the buffer array b.,"

read
public final int read(byte[] b)
               throws IOException
Reads some number of bytes from the contained input stream and
 stores them into the buffer array b. The number of
 bytes actually read is returned as an integer. This method blocks
 until input data is available, end of file is detected, or an
 exception is thrown.

 If b is null, a NullPointerException is
 thrown. If the length of b is zero, then no bytes are
 read and 0 is returned; otherwise, there is an attempt
 to read at least one byte. If no byte is available because the
 stream is at end of file, the value -1 is returned;
 otherwise, at least one byte is read and stored into b.

 The first byte read is stored into element b[0], the
 next one into b[1], and so on. The number of bytes read
 is, at most, equal to the length of b. Let k
 be the number of bytes actually read; these bytes will be stored in
 elements b[0] through b[k-1], leaving
 elements b[k] through b[b.length-1]
 unaffected.

 The read(b) method has the same effect as:
 
 read(b, 0, b.length)
 

Overrides:
read in class FilterInputStream
Parameters:
b - the buffer into which the data is read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end
             of the stream has been reached.
Throws:
IOException - if the first byte cannot be read for any reason
 other than end of file, the stream has been closed and the underlying
 input stream does not support reading after close, or another I/O
 error occurs.
See Also:
FilterInputStream.in, 
InputStream.read(byte[], int, int)


"
9,DataInputStream,3,"int read(byte[] b, int off, int len)",True,Reads up to len bytes of data from the contained input stream into an array of bytes.,"

read
public final int read(byte[] b,
                      int off,
                      int len)
               throws IOException
Reads up to len bytes of data from the contained
 input stream into an array of bytes.  An attempt is made to read
 as many as len bytes, but a smaller number may be read,
 possibly zero. The number of bytes actually read is returned as an
 integer.

  This method blocks until input data is available, end of file is
 detected, or an exception is thrown.

  If len is zero, then no bytes are read and
 0 is returned; otherwise, there is an attempt to read at
 least one byte. If no byte is available because the stream is at end of
 file, the value -1 is returned; otherwise, at least one
 byte is read and stored into b.

  The first byte read is stored into element b[off], the
 next one into b[off+1], and so on. The number of bytes read
 is, at most, equal to len. Let k be the number of
 bytes actually read; these bytes will be stored in elements
 b[off] through b[off+k-1],
 leaving elements b[off+k] through
 b[off+len-1] unaffected.

  In every case, elements b[0] through
 b[off] and elements b[off+len] through
 b[b.length-1] are unaffected.

Overrides:
read in class FilterInputStream
Parameters:
b - the buffer into which the data is read.
off - the start offset in the destination array b
len - the maximum number of bytes read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end
             of the stream has been reached.
Throws:
NullPointerException - If b is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 b.length - off
IOException - if the first byte cannot be read for any reason
 other than end of file, the stream has been closed and the underlying
 input stream does not support reading after close, or another I/O
 error occurs.
See Also:
FilterInputStream.in, 
InputStream.read(byte[], int, int)


"
9,DataInputStream,4,String readUTF(),True,See the general contract of the readUTF method of DataInput.,"

readUTF
public final String readUTF()
                     throws IOException
See the general contract of the readUTF
 method of DataInput.
 
 Bytes
 for this operation are read from the contained
 input stream.

Specified by:
readUTF in interface DataInput
Returns:
a Unicode string.
Throws:
EOFException - if this input stream reaches the end before
               reading all the bytes.
IOException - the stream has been closed and the contained
             input stream does not support reading after close, or
             another I/O error occurs.
UTFDataFormatException - if the bytes do not represent a valid
             modified UTF-8 encoding of a string.
See Also:
readUTF(java.io.DataInput)


"
9,DataInputStream,5,long skip(long n),False,,NULL
10,DataOutputStream,1,writeBoolean(boolean v),False,,NULL
10,DataOutputStream,2,writeByte(int v),False,,NULL
10,DataOutputStream,3,writeShort(int v),False,,NULL
10,DataOutputStream,4,writeChar(int v),False,,NULL
10,DataOutputStream,5,writeInt(int v),False,,NULL
10,DataOutputStream,6,writeLong(long v),False,,NULL
10,DataOutputStream,7,writeFloat(float v),False,,NULL
10,DataOutputStream,8,writeDouble(double v),False,,NULL
10,DataOutputStream,9,writeBytes(String s),False,,NULL
10,DataOutputStream,10,writeChars(String s),False,,NULL
10,DataOutputStream,11,writeUTF(String str),False,,NULL
10,DataOutputStream,12,flush(),False,,NULL
10,DataOutputStream,13,close(),False,,NULL
11,File,1,boolean canRead(),True,Tests whether the application can read the file denoted by this abstract pathname.,"

canRead
public boolean canRead()
Tests whether the application can read the file denoted by this
 abstract pathname. On some platforms it may be possible to start the
 Java virtual machine with special privileges that allow it to read
 files that are marked as unreadable. Consequently this method may return
 true even though the file does not have read permissions.

Returns:
true if and only if the file specified by this
          abstract pathname exists and can be read by the
          application; false otherwise
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkRead(java.lang.String)
          method denies read access to the file


"
11,File,2,boolean canWrite(),True,Tests whether the application can modify the file denoted by this abstract pathname.,"

canWrite
public boolean canWrite()
Tests whether the application can modify the file denoted by this
 abstract pathname. On some platforms it may be possible to start the
 Java virtual machine with special privileges that allow it to modify
 files that are marked read-only. Consequently this method may return
 true even though the file is marked read-only.

Returns:
true if and only if the file system actually
          contains a file denoted by this abstract pathname and
          the application is allowed to write to the file;
          false otherwise.
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkWrite(java.lang.String)
          method denies write access to the file


"
11,File,3,boolean createNewFile(),True,"Atomically creates a new, empty file named by this abstract pathname if and only if a file with this name does not yet exist.","

createNewFile
public boolean createNewFile()
                      throws IOException
Atomically creates a new, empty file named by this abstract pathname if
 and only if a file with this name does not yet exist.  The check for the
 existence of the file and the creation of the file if it does not exist
 are a single operation that is atomic with respect to all other
 filesystem activities that might affect the file.
 
 Note: this method should not be used for file-locking, as
 the resulting protocol cannot be made to work reliably. The
 FileLock
 facility should be used instead.

Returns:
true if the named file does not exist and was
          successfully created; false if the named file
          already exists
Throws:
IOException - If an I/O error occurred
SecurityException - If a security manager exists and its SecurityManager.checkWrite(java.lang.String)
          method denies write access to the file
Since:
1.2


"
11,File,4,boolean delete(),True,Deletes the file or directory denoted by this abstract pathname.,"

delete
public boolean delete()
Deletes the file or directory denoted by this abstract pathname.  If
 this pathname denotes a directory, then the directory must be empty in
 order to be deleted.

  Note that the Files class defines the delete method to throw an IOException
 when a file cannot be deleted. This is useful for error reporting and to
 diagnose why a file cannot be deleted.

Returns:
true if and only if the file or directory is
          successfully deleted; false otherwise
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkDelete(java.lang.String) method denies
          delete access to the file


"
11,File,5,boolean deleteOnExit(),False,,NULL
12,FileDescriptor,1,FileDescriptor(),False,,NULL
12,FileDescriptor,2,FileDescriptor(int fd),False,,NULL
12,FileDescriptor,3,int getFD(),False,,NULL
12,FileDescriptor,4,void sync(),True,Force all system buffers to synchronize with the underlying device.,"

sync
public void sync()
          throws SyncFailedException
Force all system buffers to synchronize with the underlying
 device.  This method returns after all modified data and
 attributes of this FileDescriptor have been written to the
 relevant device(s).  In particular, if this FileDescriptor
 refers to a physical storage medium, such as a file in a file
 system, sync will not return until all in-memory modified copies
 of buffers associated with this FileDescriptor have been
 written to the physical medium.

 sync is meant to be used by code that requires physical
 storage (such as a file) to be in a known state  For
 example, a class that provided a simple transaction facility
 might use sync to ensure that all changes to a file caused
 by a given transaction were recorded on a storage medium.

 sync only affects buffers downstream of this FileDescriptor.  If
 any in-memory buffering is being done by the application (for
 example, by a BufferedOutputStream object), those buffers must
 be flushed into the FileDescriptor (for example, by invoking
 OutputStream.flush) before that data will be affected by sync.

Throws:
SyncFailedException - Thrown when the buffers cannot be flushed,
        or because the system cannot guarantee that all the
        buffers have been synchronized with physical media.
Since:
JDK1.1


"
12,FileDescriptor,5,void set(int fd),False,,NULL
13,FileInputStream,1,FileInputStream(String name),False,,NULL
13,FileInputStream,2,int read(),True,Reads a byte of data from this input stream.,"

read
public int read()
         throws IOException
Reads a byte of data from this input stream. This method blocks
 if no input is yet available.

Specified by:
read in class InputStream
Returns:
the next byte of data, or -1 if the end of the
             file is reached.
Throws:
IOException - if an I/O error occurs.


"
13,FileInputStream,3,int read(byte[] b),True,Reads up to b.length bytes of data from this input stream into an array of bytes.,"

read
public int read(byte[] b)
         throws IOException
Reads up to b.length bytes of data from this input
 stream into an array of bytes. This method blocks until some input
 is available.

Overrides:
read in class InputStream
Parameters:
b - the buffer into which the data is read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             the file has been reached.
Throws:
IOException - if an I/O error occurs.
See Also:
InputStream.read(byte[], int, int)


"
13,FileInputStream,4,"int read(byte[] b, int off, int len)",True,Reads up to len bytes of data from this input stream into an array of bytes.,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads up to len bytes of data from this input stream
 into an array of bytes. If len is not zero, the method
 blocks until some input is available; otherwise, no
 bytes are read and 0 is returned.

Overrides:
read in class InputStream
Parameters:
b - the buffer into which the data is read.
off - the start offset in the destination array b
len - the maximum number of bytes read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             the file has been reached.
Throws:
NullPointerException - If b is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 b.length - off
IOException - if an I/O error occurs.
See Also:
InputStream.read()


"
13,FileInputStream,5,void close(),True,Closes this file input stream and releases any system resources associated with the stream.,"

close
public void close()
           throws IOException
Closes this file input stream and releases any system resources
 associated with the stream.

  If this stream has an associated channel then the channel is closed
 as well.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class InputStream
Throws:
IOException - if an I/O error occurs.


"
14,FileOutputStream,1,FileOutputStream(File file),False,,NULL
14,FileOutputStream,2,"FileOutputStream(File file, boolean append)",False,,NULL
14,FileOutputStream,3,FileOutputStream(FileDescriptor fdObj),False,,NULL
14,FileOutputStream,4,FileOutputStream(String name),False,,NULL
14,FileOutputStream,5,"FileOutputStream(String name, boolean append)",False,,NULL
14,FileOutputStream,6,void write(int b),True,Writes the specified byte to this file output stream.,"

write
public void write(int b)
           throws IOException
Writes the specified byte to this file output stream. Implements
 the write method of OutputStream.

Specified by:
write in class OutputStream
Parameters:
b - the byte to be written.
Throws:
IOException - if an I/O error occurs.


"
14,FileOutputStream,7,void write(byte[] b),True,Writes b.length bytes from the specified byte array to this file output stream.,"

write
public void write(byte[] b)
           throws IOException
Writes b.length bytes from the specified byte array
 to this file output stream.

Overrides:
write in class OutputStream
Parameters:
b - the data.
Throws:
IOException - if an I/O error occurs.
See Also:
OutputStream.write(byte[], int, int)


"
14,FileOutputStream,8,"void write(byte[] b, int off, int len)",True,Writes len bytes from the specified byte array starting at offset off to this file output stream.,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Writes len bytes from the specified byte array
 starting at offset off to this file output stream.

Overrides:
write in class OutputStream
Parameters:
b - the data.
off - the start offset in the data.
len - the number of bytes to write.
Throws:
IOException - if an I/O error occurs.


"
14,FileOutputStream,9,void flush(),False,,NULL
14,FileOutputStream,10,void close(),True,Closes this file output stream and releases any system resources associated with this stream.,"

close
public void close()
           throws IOException
Closes this file output stream and releases any system resources
 associated with this stream. This file output stream may no longer
 be used for writing bytes.

  If this stream has an associated channel then the channel is closed
 as well.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class OutputStream
Throws:
IOException - if an I/O error occurs.


"
15,FilePermission,1,boolean canRead(),False,,NULL
15,FilePermission,2,boolean canWrite(),False,,NULL
15,FilePermission,3,boolean exists(),False,,NULL
15,FilePermission,4,boolean isDirectory(),False,,NULL
15,FilePermission,5,boolean isFile(),False,,NULL
16,FileReader,1,FileReader(String fileName),False,,NULL
16,FileReader,2,int read(),False,,NULL
16,FileReader,3,int read(char[] cbuf),False,,NULL
16,FileReader,4,"int read(char[] cbuf, int off, int len)",False,,NULL
16,FileReader,5,void close(),False,,NULL
17,FileWriter,1,FileWriter(String fileName),False,,NULL
17,FileWriter,2,"FileWriter(String fileName, boolean append)",False,,NULL
17,FileWriter,3,void write(int c),False,,NULL
17,FileWriter,4,void write(char[] cbuf),False,,NULL
17,FileWriter,5,void write(String str),False,,NULL
17,FileWriter,6,"void write(String str, int off, int len)",False,,NULL
17,FileWriter,7,"void write(char[] cbuf, int off, int len)",False,,NULL
17,FileWriter,8,void flush(),False,,NULL
17,FileWriter,9,void close(),False,,NULL
18,FilterInputStream,1,int read(),True,Reads the next byte of data from this input stream.,"

read
public int read()
         throws IOException
Reads the next byte of data from this input stream. The value
 byte is returned as an int in the range
 0 to 255. If no byte is available
 because the end of the stream has been reached, the value
 -1 is returned. This method blocks until input data
 is available, the end of the stream is detected, or an exception
 is thrown.
 
 This method
 simply performs in.read() and returns the result.

Specified by:
read in class InputStream
Returns:
the next byte of data, or -1 if the end of the
             stream is reached.
Throws:
IOException - if an I/O error occurs.
See Also:
in


"
18,FilterInputStream,2,int read(byte[] b),True,Reads up to byte.length bytes of data from this input stream into an array of bytes.,"

read
public int read(byte[] b)
         throws IOException
Reads up to byte.length bytes of data from this
 input stream into an array of bytes. This method blocks until some
 input is available.
 
 This method simply performs the call
 read(b, 0, b.length) and returns
 the  result. It is important that it does
 not do in.read(b) instead;
 certain subclasses of  FilterInputStream
 depend on the implementation strategy actually
 used.

Overrides:
read in class InputStream
Parameters:
b - the buffer into which the data is read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             the stream has been reached.
Throws:
IOException - if an I/O error occurs.
See Also:
read(byte[], int, int)


"
18,FilterInputStream,3,"int read(byte[] b, int off, int len)",True,Reads up to len bytes of data from this input stream into an array of bytes.,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads up to len bytes of data from this input stream
 into an array of bytes. If len is not zero, the method
 blocks until some input is available; otherwise, no
 bytes are read and 0 is returned.
 
 This method simply performs in.read(b, off, len)
 and returns the result.

Overrides:
read in class InputStream
Parameters:
b - the buffer into which the data is read.
off - the start offset in the destination array b
len - the maximum number of bytes read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             the stream has been reached.
Throws:
NullPointerException - If b is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 b.length - off
IOException - if an I/O error occurs.
See Also:
in


"
18,FilterInputStream,4,long skip(long n),True,Skips over and discards n bytes of data from the input stream.,"

skip
public long skip(long n)
          throws IOException
Skips over and discards n bytes of data from the
 input stream. The skip method may, for a variety of
 reasons, end up skipping over some smaller number of bytes,
 possibly 0. The actual number of bytes skipped is
 returned.
 
 This method simply performs in.skip(n).

Overrides:
skip in class InputStream
Parameters:
n - the number of bytes to be skipped.
Returns:
the actual number of bytes skipped.
Throws:
IOException - if the stream does not support seek,
                          or if some other I/O error occurs.


"
18,FilterInputStream,5,int available(),True,Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next caller of a method for this input stream.,"

available
public int available()
              throws IOException
Returns an estimate of the number of bytes that can be read (or
 skipped over) from this input stream without blocking by the next
 caller of a method for this input stream. The next caller might be
 the same thread or another thread.  A single read or skip of this
 many bytes will not block, but may read or skip fewer bytes.
 
 This method returns the result of in.available().

Overrides:
available in class InputStream
Returns:
an estimate of the number of bytes that can be read (or skipped
             over) from this input stream without blocking.
Throws:
IOException - if an I/O error occurs.


"
19,FilterOutputStream,1,FilterOutputStream(OutputStream out),False,,NULL
19,FilterOutputStream,2,void write(int b),True,Writes the specified byte to this output stream.,"

write
public void write(int b)
           throws IOException
Writes the specified byte to this output stream.
 
 The write method of FilterOutputStream
 calls the write method of its underlying output stream,
 that is, it performs out.write(b).
 
 Implements the abstract write method of OutputStream.

Specified by:
write in class OutputStream
Parameters:
b - the byte.
Throws:
IOException - if an I/O error occurs.


"
19,FilterOutputStream,3,void write(byte[] b),True,Writes b.length bytes to this output stream.,"

write
public void write(byte[] b)
           throws IOException
Writes b.length bytes to this output stream.
 
 The write method of FilterOutputStream
 calls its write method of three arguments with the
 arguments b, 0, and
 b.length.
 
 Note that this method does not call the one-argument
 write method of its underlying stream with the single
 argument b.

Overrides:
write in class OutputStream
Parameters:
b - the data to be written.
Throws:
IOException - if an I/O error occurs.
See Also:
write(byte[], int, int)


"
19,FilterOutputStream,4,"void write(byte[] b, int off, int len)",True,Writes len bytes from the specified byte array starting at offset off to this output stream.,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Writes len bytes from the specified
 byte array starting at offset off to
 this output stream.
 
 The write method of FilterOutputStream
 calls the write method of one argument on each
 byte to output.
 
 Note that this method does not call the write method
 of its underlying input stream with the same arguments. Subclasses
 of FilterOutputStream should provide a more efficient
 implementation of this method.

Overrides:
write in class OutputStream
Parameters:
b - the data.
off - the start offset in the data.
len - the number of bytes to write.
Throws:
IOException - if an I/O error occurs.
See Also:
write(int)


"
19,FilterOutputStream,5,void flush(),True,Flushes this output stream and forces any buffered output bytes to be written out to the stream.,"

flush
public void flush()
           throws IOException
Flushes this output stream and forces any buffered output bytes
 to be written out to the stream.
 
 The flush method of FilterOutputStream
 calls the flush method of its underlying output stream.

Specified by:
flush in interface Flushable
Overrides:
flush in class OutputStream
Throws:
IOException - if an I/O error occurs.
See Also:
out


"
20,FilterReader,1,int read(),True,Reads a single character.,"

read
public int read()
         throws IOException
Reads a single character.

Overrides:
read in class Reader
Returns:
The character read, as an integer in the range 0 to 65535
             (0x00-0xffff), or -1 if the end of the stream has
             been reached
Throws:
IOException - If an I/O error occurs


"
20,FilterReader,2,"int read(char[] cbuf, int off, int len)",True,Reads characters into a portion of an array.,"

read
public int read(char[] cbuf,
                int off,
                int len)
         throws IOException
Reads characters into a portion of an array.

Specified by:
read in class Reader
Parameters:
cbuf - Destination buffer
off - Offset at which to start storing characters
len - Maximum number of characters to read
Returns:
The number of characters read, or -1 if the end of the
             stream has been reached
Throws:
IOException - If an I/O error occurs


"
20,FilterReader,3,long skip(long n),True,Skips characters.,"

skip
public long skip(long n)
          throws IOException
Skips characters.

Overrides:
skip in class Reader
Parameters:
n - The number of characters to skip
Returns:
The number of characters actually skipped
Throws:
IOException - If an I/O error occurs


"
20,FilterReader,4,boolean ready(),True,Tells whether this stream is ready to be read.,"

ready
public boolean ready()
              throws IOException
Tells whether this stream is ready to be read.

Overrides:
ready in class Reader
Returns:
True if the next read() is guaranteed not to block for input,
 false otherwise.  Note that returning false does not guarantee that the
 next read will block.
Throws:
IOException - If an I/O error occurs


"
20,FilterReader,5,void close(),True,Closes the stream and releases any system resources associated with it.,"

close
public void close()
           throws IOException
Description copied from class: Reader
Closes the stream and releases any system resources associated with
 it.  Once the stream has been closed, further read(), ready(),
 mark(), reset(), or skip() invocations will throw an IOException.
 Closing a previously closed stream has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in class Reader
Throws:
IOException - If an I/O error occurs


"
21,FilterWriter,1,Writer append(char c),False,,NULL
21,FilterWriter,2,Writer append(CharSequence csq),False,,NULL
21,FilterWriter,3,"Writer append(CharSequence csq, int start, int end)",False,,NULL
21,FilterWriter,4,void close(),True,"Closes the stream, flushing it first.","

close
public void close()
           throws IOException
Description copied from class: Writer
Closes the stream, flushing it first. Once the stream has been closed,
 further write() or flush() invocations will cause an IOException to be
 thrown. Closing a previously closed stream has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in class Writer
Throws:
IOException - If an I/O error occurs


"
21,FilterWriter,5,void flush(),True,Flushes the stream.,"

flush
public void flush()
           throws IOException
Flushes the stream.

Specified by:
flush in interface Flushable
Specified by:
flush in class Writer
Throws:
IOException - If an I/O error occurs


"
22,InputStream,1,int read(),True,Reads the next byte of data from the input stream.,"

read
public abstract int read()
                  throws IOException
Reads the next byte of data from the input stream. The value byte is
 returned as an int in the range 0 to
 255. If no byte is available because the end of the stream
 has been reached, the value -1 is returned. This method
 blocks until input data is available, the end of the stream is detected,
 or an exception is thrown.

  A subclass must provide an implementation of this method.

Returns:
the next byte of data, or -1 if the end of the
             stream is reached.
Throws:
IOException - if an I/O error occurs.


"
22,InputStream,2,int read(byte[] b),True,Reads some number of bytes from the input stream and stores them into the buffer array b.,"

read
public int read(byte[] b)
         throws IOException
Reads some number of bytes from the input stream and stores them into
 the buffer array b. The number of bytes actually read is
 returned as an integer.  This method blocks until input data is
 available, end of file is detected, or an exception is thrown.

  If the length of b is zero, then no bytes are read and
 0 is returned; otherwise, there is an attempt to read at
 least one byte. If no byte is available because the stream is at the
 end of the file, the value -1 is returned; otherwise, at
 least one byte is read and stored into b.

  The first byte read is stored into element b[0], the
 next one into b[1], and so on. The number of bytes read is,
 at most, equal to the length of b. Let k be the
 number of bytes actually read; these bytes will be stored in elements
 b[0] through b[k-1],
 leaving elements b[k] through
 b[b.length-1] unaffected.

  The read(b) method for class InputStream
 has the same effect as:  read(b, 0, b.length) 

Parameters:
b - the buffer into which the data is read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             the stream has been reached.
Throws:
IOException - If the first byte cannot be read for any reason
 other than the end of the file, if the input stream has been closed, or
 if some other I/O error occurs.
NullPointerException - if b is null.
See Also:
read(byte[], int, int)


"
22,InputStream,3,"int read(byte[] b, int off, int len)",True,Reads up to len bytes of data from the input stream into an array of bytes.,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads up to len bytes of data from the input stream into
 an array of bytes.  An attempt is made to read as many as
 len bytes, but a smaller number may be read.
 The number of bytes actually read is returned as an integer.

  This method blocks until input data is available, end of file is
 detected, or an exception is thrown.

  If len is zero, then no bytes are read and
 0 is returned; otherwise, there is an attempt to read at
 least one byte. If no byte is available because the stream is at end of
 file, the value -1 is returned; otherwise, at least one
 byte is read and stored into b.

  The first byte read is stored into element b[off], the
 next one into b[off+1], and so on. The number of bytes read
 is, at most, equal to len. Let k be the number of
 bytes actually read; these bytes will be stored in elements
 b[off] through b[off+k-1],
 leaving elements b[off+k] through
 b[off+len-1] unaffected.

  In every case, elements b[0] through
 b[off] and elements b[off+len] through
 b[b.length-1] are unaffected.

  The read(b, off, len) method
 for class InputStream simply calls the method
 read() repeatedly. If the first such call results in an
 IOException, that exception is returned from the call to
 the read(b, off, len) method.  If
 any subsequent call to read() results in a
 IOException, the exception is caught and treated as if it
 were end of file; the bytes read up to that point are stored into
 b and the number of bytes read before the exception
 occurred is returned. The default implementation of this method blocks
 until the requested amount of input data len has been read,
 end of file is detected, or an exception is thrown. Subclasses are encouraged
 to provide a more efficient implementation of this method.

Parameters:
b - the buffer into which the data is read.
off - the start offset in array b
                   at which the data is written.
len - the maximum number of bytes to read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             the stream has been reached.
Throws:
IOException - If the first byte cannot be read for any reason
 other than end of file, or if the input stream has been closed, or if
 some other I/O error occurs.
NullPointerException - If b is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 b.length - off
See Also:
read()


"
22,InputStream,4,long skip(long n),True,Skips over and discards n bytes of data from this input stream.,"

skip
public long skip(long n)
          throws IOException
Skips over and discards n bytes of data from this input
 stream. The skip method may, for a variety of reasons, end
 up skipping over some smaller number of bytes, possibly 0.
 This may result from any of a number of conditions; reaching end of file
 before n bytes have been skipped is only one possibility.
 The actual number of bytes skipped is returned. If n is
 negative, the skip method for class InputStream always
 returns 0, and no bytes are skipped. Subclasses may handle the negative
 value differently.

  The skip method of this class creates a
 byte array and then repeatedly reads into it until n bytes
 have been read or the end of the stream has been reached. Subclasses are
 encouraged to provide a more efficient implementation of this method.
 For instance, the implementation may depend on the ability to seek.

Parameters:
n - the number of bytes to be skipped.
Returns:
the actual number of bytes skipped.
Throws:
IOException - if the stream does not support seek,
                          or if some other I/O error occurs.


"
22,InputStream,5,int available(),True,Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream.,"

available
public int available()
              throws IOException
Returns an estimate of the number of bytes that can be read (or
 skipped over) from this input stream without blocking by the next
 invocation of a method for this input stream. The next invocation
 might be the same thread or another thread.  A single read or skip of this
 many bytes will not block, but may read or skip fewer bytes.

  Note that while some implementations of InputStream will return
 the total number of bytes in the stream, many will not.  It is
 never correct to use the return value of this method to allocate
 a buffer intended to hold all data in this stream.

  A subclass' implementation of this method may choose to throw an
 IOException if this input stream has been closed by
 invoking the close() method.

  The available method for class InputStream always
 returns 0.

  This method should be overridden by subclasses.

Returns:
an estimate of the number of bytes that can be read (or skipped
             over) from this input stream without blocking or 0 when
             it reaches the end of the input stream.
Throws:
IOException - if an I/O error occurs.


"
23,InputStreamReader,1,int read(),True,Reads a single character.,"

read
public int read()
         throws IOException
Reads a single character.

Overrides:
read in class Reader
Returns:
The character read, or -1 if the end of the stream has been
         reached
Throws:
IOException - If an I/O error occurs


"
23,InputStreamReader,2,"int read(char cbuf[], int offset, int length)",False,,NULL
23,InputStreamReader,3,boolean ready(),True,Tells whether this stream is ready to be read.,"

ready
public boolean ready()
              throws IOException
Tells whether this stream is ready to be read.  An InputStreamReader is
 ready if its input buffer is not empty, or if bytes are available to be
 read from the underlying byte stream.

Overrides:
ready in class Reader
Returns:
True if the next read() is guaranteed not to block for input,
 false otherwise.  Note that returning false does not guarantee that the
 next read will block.
Throws:
IOException - If an I/O error occurs


"
23,InputStreamReader,4,void close(),True,Closes the stream and releases any system resources associated with it.,"

close
public void close()
           throws IOException
Description copied from class: Reader
Closes the stream and releases any system resources associated with
 it.  Once the stream has been closed, further read(), ready(),
 mark(), reset(), or skip() invocations will throw an IOException.
 Closing a previously closed stream has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in class Reader
Throws:
IOException - If an I/O error occurs


"
23,InputStreamReader,5,int skip(long n),False,,NULL
24,LineNumberInputStream,1,int readLine(),False,,NULL
24,LineNumberInputStream,2,"int readLine(char[] buf, int off, int len)",False,,NULL
24,LineNumberInputStream,3,int readLine(char[] buf),False,,NULL
24,LineNumberInputStream,4,"int readLines(char[] buf, int off, int len)",False,,NULL
24,LineNumberInputStream,5,int readLines(char[] buf),False,,NULL
24,LineNumberInputStream,6,"int readLines(char[] buf, int off, int len, boolean ignoreLF)",False,,NULL
24,LineNumberInputStream,7,"int readLines(char[] buf, boolean ignoreLF)",False,,NULL
24,LineNumberInputStream,8,"int readLines(char[] buf, int off, int len, boolean ignoreLF, boolean ignoreCR)",False,,NULL
24,LineNumberInputStream,9,"int readLines(char[] buf, boolean ignoreLF, boolean ignoreCR)",False,,NULL
24,LineNumberInputStream,10,"int readLines(char[] buf, int off, int len, boolean ignoreLF, boolean ignoreCR, boolean ignoreCRLF)",False,,NULL
24,LineNumberInputStream,11,"int readLines(char[] buf, boolean ignoreLF, boolean ignoreCR, boolean ignoreCRLF)",False,,NULL
25,LineNumberReader,1,LineNumberReader(Reader in),False,,NULL
25,LineNumberReader,2,int getLineNumber(),True,Get the current line number.,"

getLineNumber
public int getLineNumber()
Get the current line number.

Returns:
The current line number
See Also:
setLineNumber(int)


"
25,LineNumberReader,3,void setLineNumber(int lineNumber),True,Set the current line number.,"

setLineNumber
public void setLineNumber(int lineNumber)
Set the current line number.

Parameters:
lineNumber - An int specifying the line number
See Also:
getLineNumber()


"
25,LineNumberReader,4,String readLine(),True,Read a line of text.,"

readLine
public String readLine()
                throws IOException
Read a line of text.  Whenever a line terminator is
 read the current line number is incremented.

Overrides:
readLine in class BufferedReader
Returns:
A String containing the contents of the line, not including
          any line termination characters, or
          null if the end of the stream has been reached
Throws:
IOException - If an I/O error occurs
See Also:
Files.readAllLines(java.nio.file.Path, java.nio.charset.Charset)


"
25,LineNumberReader,5,void close(),False,,NULL
26,ObjectInputStream,1,ObjectInputStream(InputStream in),False,,NULL
26,ObjectInputStream,2,Object readObject(),True,Read an object from the ObjectInputStream.,"

readObject
public final Object readObject()
                        throws IOException,
                               ClassNotFoundException
Read an object from the ObjectInputStream.  The class of the object, the
 signature of the class, and the values of the non-transient and
 non-static fields of the class and all of its supertypes are read.
 Default deserializing for a class can be overridden using the writeObject
 and readObject methods.  Objects referenced by this object are read
 transitively so that a complete equivalent graph of objects is
 reconstructed by readObject.

 The root object is completely restored when all of its fields and the
 objects it references are completely restored.  At this point the object
 validation callbacks are executed in order based on their registered
 priorities. The callbacks are registered by objects (in the readObject
 special methods) as they are individually restored.

 Exceptions are thrown for problems with the InputStream and for
 classes that should not be deserialized.  All exceptions are fatal to
 the InputStream and leave it in an indeterminate state; it is up to the
 caller to ignore or recover the stream state.

Specified by:
readObject in interface ObjectInput
Returns:
the object read from the stream
Throws:
ClassNotFoundException - Class of a serialized object cannot be
          found.
InvalidClassException - Something is wrong with a class used by
          serialization.
StreamCorruptedException - Control information in the
          stream is inconsistent.
OptionalDataException - Primitive data was found in the
          stream instead of objects.
IOException - Any of the usual Input/Output related exceptions.


"
26,ObjectInputStream,3,Object readUnshared(),True,"Reads an ""unshared"" object from the ObjectInputStream.","

readUnshared
public Object readUnshared()
                    throws IOException,
                           ClassNotFoundException
Reads an ""unshared"" object from the ObjectInputStream.  This method is
 identical to readObject, except that it prevents subsequent calls to
 readObject and readUnshared from returning additional references to the
 deserialized instance obtained via this call.  Specifically:
 
If readUnshared is called to deserialize a back-reference (the
       stream representation of an object which has been written
       previously to the stream), an ObjectStreamException will be
       thrown.

   If readUnshared returns successfully, then any subsequent attempts
       to deserialize back-references to the stream handle deserialized
       by readUnshared will cause an ObjectStreamException to be thrown.
 
 Deserializing an object via readUnshared invalidates the stream handle
 associated with the returned object.  Note that this in itself does not
 always guarantee that the reference returned by readUnshared is unique;
 the deserialized object may define a readResolve method which returns an
 object visible to other parties, or readUnshared may return a Class
 object or enum constant obtainable elsewhere in the stream or through
 external means. If the deserialized object defines a readResolve method
 and the invocation of that method returns an array, then readUnshared
 returns a shallow clone of that array; this guarantees that the returned
 array object is unique and cannot be obtained a second time from an
 invocation of readObject or readUnshared on the ObjectInputStream,
 even if the underlying data stream has been manipulated.

 ObjectInputStream subclasses which override this method can only be
 constructed in security contexts possessing the
 ""enableSubclassImplementation"" SerializablePermission; any attempt to
 instantiate such a subclass without this permission will cause a
 SecurityException to be thrown.

Returns:
reference to deserialized object
Throws:
ClassNotFoundException - if class of an object to deserialize
          cannot be found
StreamCorruptedException - if control information in the stream
          is inconsistent
ObjectStreamException - if object to deserialize has already
          appeared in stream
OptionalDataException - if primitive data is next in stream
IOException - if an I/O error occurs during deserialization
Since:
1.4


"
26,ObjectInputStream,4,Object readObject(ObjectStreamClass desc),False,,NULL
26,ObjectInputStream,5,Object readUnshared(ObjectStreamClass desc),False,,NULL
27,ObjectInputStream.GetField,1,Object readObject(),False,,NULL
27,ObjectInputStream.GetField,2,Object readUnshared(),False,,NULL
27,ObjectInputStream.GetField,3,Object readObject(ObjectStreamClass desc),False,,NULL
27,ObjectInputStream.GetField,4,Object readUnshared(ObjectStreamClass desc),False,,NULL
27,ObjectInputStream.GetField,5,Object readObject(Class<?> desc),False,,NULL
27,ObjectInputStream.GetField,6,Object readUnshared(Class<?> desc),False,,NULL
27,ObjectInputStream.GetField,7,"Object readObject(Class<?> desc, ObjectStreamClass desc2)",False,,NULL
27,ObjectInputStream.GetField,8,"Object readUnshared(Class<?> desc, ObjectStreamClass desc2)",False,,NULL
27,ObjectInputStream.GetField,9,"Object readObject(ObjectStreamClass desc, Class<?> expected)",False,,NULL
27,ObjectInputStream.GetField,10,"Object readUnshared(ObjectStreamClass desc, Class<?> expected)",False,,NULL
27,ObjectInputStream.GetField,11,Object readObject(Class<?> expected),False,,NULL
27,ObjectInputStream.GetField,12,Object readUnshared(Class<?> expected),False,,NULL
27,ObjectInputStream.GetField,13,"Object readObject(ObjectStreamClass desc, Class<?> expected, ObjectStreamClass desc2)",False,,NULL
27,ObjectInputStream.GetField,14,"Object readUnshared(ObjectStreamClass desc, Class<?> expected, ObjectStreamClass desc2)",False,,NULL
27,ObjectInputStream.GetField,15,"Object readObject(Class<?> expected, ObjectStreamClass desc2)",False,,NULL
27,ObjectInputStream.GetField,16,"Object readUnshared(Class<?> expected, ObjectStreamClass desc2)",False,,NULL
27,ObjectInputStream.GetField,17,"Object readObject(ObjectStreamClass desc, Class<?> expected, Class<?> expected2)",False,,NULL
27,ObjectInputStream.GetField,18,"Object readUnshared(ObjectStreamClass desc, Class<?> expected, Class<?> expected2)",False,,NULL
27,ObjectInputStream.GetField,19,"Object readObject(Class<?> expected, Class<?> expected2)",False,,NULL
27,ObjectInputStream.GetField,20,"Object readUnshared(Class<?> expected, Class<?> expected2)",False,,NULL
28,ObjectOutputStream,1,ObjectOutputStream(OutputStream out),False,,NULL
28,ObjectOutputStream,2,void writeObject(Object obj),True,Write the specified object to the ObjectOutputStream.,"

writeObject
public final void writeObject(Object obj)
                       throws IOException
Write the specified object to the ObjectOutputStream.  The class of the
 object, the signature of the class, and the values of the non-transient
 and non-static fields of the class and all of its supertypes are
 written.  Default serialization for a class can be overridden using the
 writeObject and the readObject methods.  Objects referenced by this
 object are written transitively so that a complete equivalent graph of
 objects can be reconstructed by an ObjectInputStream.

 Exceptions are thrown for problems with the OutputStream and for
 classes that should not be serialized.  All exceptions are fatal to the
 OutputStream, which is left in an indeterminate state, and it is up to
 the caller to ignore or recover the stream state.

Specified by:
writeObject in interface ObjectOutput
Parameters:
obj - the object to be written
Throws:
InvalidClassException - Something is wrong with a class used by
          serialization.
NotSerializableException - Some object to be serialized does not
          implement the java.io.Serializable interface.
IOException - Any exception thrown by the underlying
          OutputStream.


"
28,ObjectOutputStream,3,void write(int b),True,Writes a byte.,"

write
public void write(int val)
           throws IOException
Writes a byte. This method will block until the byte is actually
 written.

Specified by:
write in interface DataOutput
Specified by:
write in interface ObjectOutput
Specified by:
write in class OutputStream
Parameters:
val - the byte to be written to the stream
Throws:
IOException - If an I/O error has occurred.


"
28,ObjectOutputStream,4,void writeBoolean(boolean v),True,Writes a boolean.,"

writeBoolean
public void writeBoolean(boolean val)
                  throws IOException
Writes a boolean.

Specified by:
writeBoolean in interface DataOutput
Parameters:
val - the boolean to be written
Throws:
IOException - if I/O errors occur while writing to the underlying
          stream


"
28,ObjectOutputStream,5,void writeByte(int v),True,Writes an 8 bit byte.,"

writeByte
public void writeByte(int val)
               throws IOException
Writes an 8 bit byte.

Specified by:
writeByte in interface DataOutput
Parameters:
val - the byte value to be written
Throws:
IOException - if I/O errors occur while writing to the underlying
          stream


"
28,ObjectOutputStream,6,void writeChar(int v),True,Writes a 16 bit char.,"

writeChar
public void writeChar(int val)
               throws IOException
Writes a 16 bit char.

Specified by:
writeChar in interface DataOutput
Parameters:
val - the char value to be written
Throws:
IOException - if I/O errors occur while writing to the underlying
          stream


"
28,ObjectOutputStream,7,void writeChars(String s),True,Writes a String as a sequence of chars.,"

writeChars
public void writeChars(String str)
                throws IOException
Writes a String as a sequence of chars.

Specified by:
writeChars in interface DataOutput
Parameters:
str - the String of chars to be written
Throws:
IOException - if I/O errors occur while writing to the underlying
          stream


"
28,ObjectOutputStream,8,void writeDouble(double v),True,Writes a 64 bit double.,"

writeDouble
public void writeDouble(double val)
                 throws IOException
Writes a 64 bit double.

Specified by:
writeDouble in interface DataOutput
Parameters:
val - the double value to be written
Throws:
IOException - if I/O errors occur while writing to the underlying
          stream


"
28,ObjectOutputStream,9,void writeFields(),True,Write the buffered fields to the stream.,"

writeFields
public void writeFields()
                 throws IOException
Write the buffered fields to the stream.

Throws:
IOException - if I/O errors occur while writing to the underlying
          stream
NotActiveException - Called when a classes writeObject method was
          not called to write the state of the object.
Since:
1.2


"
28,ObjectOutputStream,10,void writeFloat(float v),True,Writes a 32 bit float.,"

writeFloat
public void writeFloat(float val)
                throws IOException
Writes a 32 bit float.

Specified by:
writeFloat in interface DataOutput
Parameters:
val - the float value to be written
Throws:
IOException - if I/O errors occur while writing to the underlying
          stream


"
28,ObjectOutputStream,11,void writeInt(int v),True,Writes a 32 bit int.,"

writeInt
public void writeInt(int val)
              throws IOException
Writes a 32 bit int.

Specified by:
writeInt in interface DataOutput
Parameters:
val - the integer value to be written
Throws:
IOException - if I/O errors occur while writing to the underlying
          stream


"
28,ObjectOutputStream,12,void writeLong(long v),True,Writes a 64 bit long.,"

writeLong
public void writeLong(long val)
               throws IOException
Writes a 64 bit long.

Specified by:
writeLong in interface DataOutput
Parameters:
val - the long value to be written
Throws:
IOException - if I/O errors occur while writing to the underlying
          stream


"
28,ObjectOutputStream,13,void writeObject(Object obj),True,Write the specified object to the ObjectOutputStream.,"

writeObject
public final void writeObject(Object obj)
                       throws IOException
Write the specified object to the ObjectOutputStream.  The class of the
 object, the signature of the class, and the values of the non-transient
 and non-static fields of the class and all of its supertypes are
 written.  Default serialization for a class can be overridden using the
 writeObject and the readObject methods.  Objects referenced by this
 object are written transitively so that a complete equivalent graph of
 objects can be reconstructed by an ObjectInputStream.

 Exceptions are thrown for problems with the OutputStream and for
 classes that should not be serialized.  All exceptions are fatal to the
 OutputStream, which is left in an indeterminate state, and it is up to
 the caller to ignore or recover the stream state.

Specified by:
writeObject in interface ObjectOutput
Parameters:
obj - the object to be written
Throws:
InvalidClassException - Something is wrong with a class used by
          serialization.
NotSerializableException - Some object to be serialized does not
          implement the java.io.Serializable interface.
IOException - Any exception thrown by the underlying
          OutputStream.


"
28,ObjectOutputStream,14,void writeShort(int v),True,Writes a 16 bit short.,"

writeShort
public void writeShort(int val)
                throws IOException
Writes a 16 bit short.

Specified by:
writeShort in interface DataOutput
Parameters:
val - the short value to be written
Throws:
IOException - if I/O errors occur while writing to the underlying
          stream


"
28,ObjectOutputStream,15,void writeUTF(String str),True,Primitive data write of this String in modified UTF-8 format.,"

writeUTF
public void writeUTF(String str)
              throws IOException
Primitive data write of this String in
 modified UTF-8
 format.  Note that there is a
 significant difference between writing a String into the stream as
 primitive data or as an Object. A String instance written by writeObject
 is written into the stream as a String initially. Future writeObject()
 calls write references to the string into the stream.

Specified by:
writeUTF in interface DataOutput
Parameters:
str - the String to be written
Throws:
IOException - if I/O errors occur while writing to the underlying
          stream


"
28,ObjectOutputStream,16,void defaultWriteObject(),True,Write the non-static and non-transient fields of the current class to this stream.,"

defaultWriteObject
public void defaultWriteObject()
                        throws IOException
Write the non-static and non-transient fields of the current class to
 this stream.  This may only be called from the writeObject method of the
 class being serialized. It will throw the NotActiveException if it is
 called otherwise.

Throws:
IOException - if I/O errors occur while writing to the underlying
          OutputStream


"
28,ObjectOutputStream,17,void reset(),True,Reset will disregard the state of any objects already written to the stream.,"

reset
public void reset()
           throws IOException
Reset will disregard the state of any objects already written to the
 stream.  The state is reset to be the same as a new ObjectOutputStream.
 The current point in the stream is marked as reset so the corresponding
 ObjectInputStream will be reset at the same point.  Objects previously
 written to the stream will not be referred to as already being in the
 stream.  They will be written to the stream again.

Throws:
IOException - if reset() is invoked while serializing an object.


"
28,ObjectOutputStream,18,void close(),True,Closes the stream.,"

close
public void close()
           throws IOException
Closes the stream. This method must be called to release any resources
 associated with the stream.

Specified by:
close in interface Closeable
Specified by:
close in interface ObjectOutput
Specified by:
close in interface AutoCloseable
Overrides:
close in class OutputStream
Throws:
IOException - If an I/O error has occurred.


"
28,ObjectOutputStream,19,void flush(),True,Flushes the stream.,"

flush
public void flush()
           throws IOException
Flushes the stream. This will write any buffered output bytes and flush
 through to the underlying stream.

Specified by:
flush in interface Flushable
Specified by:
flush in interface ObjectOutput
Overrides:
flush in class OutputStream
Throws:
IOException - If an I/O error has occurred.


"
28,ObjectOutputStream,20,void write(byte[] b),True,Writes an array of bytes.,"

write
public void write(byte[] buf)
           throws IOException
Writes an array of bytes. This method will block until the bytes are
 actually written.

Specified by:
write in interface DataOutput
Specified by:
write in interface ObjectOutput
Overrides:
write in class OutputStream
Parameters:
buf - the data to be written
Throws:
IOException - If an I/O error has occurred.
See Also:
OutputStream.write(byte[], int, int)


"
29,ObjectOutputStream.PutField,1,void writeObject(Object obj),False,,NULL
29,ObjectOutputStream.PutField,2,void write(int b),False,,NULL
29,ObjectOutputStream.PutField,3,void write(byte[] b),False,,NULL
29,ObjectOutputStream.PutField,4,"void write(byte[] b, int off, int len)",False,,NULL
29,ObjectOutputStream.PutField,5,void writeBoolean(boolean v),False,,NULL
29,ObjectOutputStream.PutField,6,void writeByte(int v),False,,NULL
29,ObjectOutputStream.PutField,7,void writeBytes(String s),False,,NULL
29,ObjectOutputStream.PutField,8,void writeChar(int v),False,,NULL
29,ObjectOutputStream.PutField,9,void writeChars(String s),False,,NULL
29,ObjectOutputStream.PutField,10,void writeDouble(double v),False,,NULL
29,ObjectOutputStream.PutField,11,"void writeField(String name, Object value, int type)",False,,NULL
29,ObjectOutputStream.PutField,12,void writeFloat(float v),False,,NULL
29,ObjectOutputStream.PutField,13,void writeInt(int v),False,,NULL
29,ObjectOutputStream.PutField,14,void writeLong(long v),False,,NULL
29,ObjectOutputStream.PutField,15,void writeShort(int v),False,,NULL
29,ObjectOutputStream.PutField,16,void writeUTF(String str),False,,NULL
29,ObjectOutputStream.PutField,17,void writeUnshared(Object obj),False,,NULL
29,ObjectOutputStream.PutField,18,void defaultWriteObject(),False,,NULL
29,ObjectOutputStream.PutField,19,"void writeObject(Object obj, ObjectOutput out)",False,,NULL
29,ObjectOutputStream.PutField,20,void writeFields(),False,,NULL
30,ObjectStreamClass,1,ObjectStreamClass forName(String className),False,,NULL
30,ObjectStreamClass,2,ObjectStreamClass forClass(Class<?> cl),False,,NULL
30,ObjectStreamClass,3,String getName(),True,Returns the name of the class described by this descriptor.,"

getName
public String getName()
Returns the name of the class described by this descriptor.
 This method returns the name of the class in the format that
 is used by the Class.getName() method.

Returns:
a string representing the name of the class


"
30,ObjectStreamClass,4,Class<?> getClass(),False,,NULL
30,ObjectStreamClass,5,ObjectStreamField[] getFields(),True,Return an array of the fields of this serializable class.,"

getFields
public ObjectStreamField[] getFields()
Return an array of the fields of this serializable class.

Returns:
an array containing an element for each persistent field of
          this class. Returns an array of length zero if there are no
          fields.
Since:
1.2


"
31,ObjectStreamField,1,"ObjectStreamField(String name, Class<?> type, int offset, int size)",False,,NULL
31,ObjectStreamField,2,String getName(),True,Get the name of this field.,"

getName
public String getName()
Get the name of this field.

Returns:
a String representing the name of the serializable
          field


"
31,ObjectStreamField,3,Class<?> getType(),True,Get the type of the field.,"

getType
public Class<?> getType()
Get the type of the field.  If the type is non-primitive and this
 ObjectStreamField was obtained from a deserialized ObjectStreamClass instance, then Object.class is returned.
 Otherwise, the Class object for the type of the field is
 returned.

Returns:
a Class object representing the type of the
          serializable field


"
31,ObjectStreamField,4,int getOffset(),True,Offset of field within instance data.,"

getOffset
public int getOffset()
Offset of field within instance data.

Returns:
the offset of this field
See Also:
setOffset(int)


"
31,ObjectStreamField,5,int getSize(),False,,NULL
31,ObjectStreamField,6,"void set(Object obj, Object value)",False,,NULL
31,ObjectStreamField,7,Object get(Object obj),False,,NULL
31,ObjectStreamField,8,"void setBoolean(Object obj, boolean value)",False,,NULL
31,ObjectStreamField,9,boolean getBoolean(Object obj),False,,NULL
31,ObjectStreamField,10,"void setByte(Object obj, byte value)",False,,NULL
31,ObjectStreamField,11,byte getByte(Object obj),False,,NULL
31,ObjectStreamField,12,"void setChar(Object obj, char value)",False,,NULL
31,ObjectStreamField,13,char getChar(Object obj),False,,NULL
31,ObjectStreamField,14,"void setShort(Object obj, short value)",False,,NULL
31,ObjectStreamField,15,short getShort(Object obj),False,,NULL
31,ObjectStreamField,16,"void setInt(Object obj, int value)",False,,NULL
31,ObjectStreamField,17,int getInt(Object obj),False,,NULL
31,ObjectStreamField,18,"void setLong(Object obj, long value)",False,,NULL
31,ObjectStreamField,19,long getLong(Object obj),False,,NULL
31,ObjectStreamField,20,"void setFloat(Object obj, float value)",False,,NULL
31,ObjectStreamField,21,float getFloat(Object obj),False,,NULL
31,ObjectStreamField,22,"void setDouble(Object obj, double value)",False,,NULL
31,ObjectStreamField,23,double getDouble(Object obj),False,,NULL
31,ObjectStreamField,24,"void setObject(Object obj, Object value)",False,,NULL
31,ObjectStreamField,25,Object getObject(Object obj),False,,NULL
32,OutputStream,1,void write(int b),True,Writes the specified byte to this output stream.,"

write
public abstract void write(int b)
                    throws IOException
Writes the specified byte to this output stream. The general
 contract for write is that one byte is written
 to the output stream. The byte to be written is the eight
 low-order bits of the argument b. The 24
 high-order bits of b are ignored.
 
 Subclasses of OutputStream must provide an
 implementation for this method.

Parameters:
b - the byte.
Throws:
IOException - if an I/O error occurs. In particular,
             an IOException may be thrown if the
             output stream has been closed.


"
32,OutputStream,2,void write(byte[] b),True,Writes b.length bytes from the specified byte array to this output stream.,"

write
public void write(byte[] b)
           throws IOException
Writes b.length bytes from the specified byte array
 to this output stream. The general contract for write(b)
 is that it should have exactly the same effect as the call
 write(b, 0, b.length).

Parameters:
b - the data.
Throws:
IOException - if an I/O error occurs.
See Also:
write(byte[], int, int)


"
32,OutputStream,3,"void write(byte[] b, int off, int len)",True,Writes len bytes from the specified byte array starting at offset off to this output stream.,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Writes len bytes from the specified byte array
 starting at offset off to this output stream.
 The general contract for write(b, off, len) is that
 some of the bytes in the array b are written to the
 output stream in order; element b[off] is the first
 byte written and b[off+len-1] is the last byte written
 by this operation.
 
 The write method of OutputStream calls
 the write method of one argument on each of the bytes to be
 written out. Subclasses are encouraged to override this method and
 provide a more efficient implementation.
 
 If b is null, a
 NullPointerException is thrown.
 
 If off is negative, or len is negative, or
 off+len is greater than the length of the array
 b, then an IndexOutOfBoundsException is thrown.

Parameters:
b - the data.
off - the start offset in the data.
len - the number of bytes to write.
Throws:
IOException - if an I/O error occurs. In particular,
             an IOException is thrown if the output
             stream is closed.


"
32,OutputStream,4,void flush(),True,Flushes this output stream and forces any buffered output bytes to be written out.,"

flush
public void flush()
           throws IOException
Flushes this output stream and forces any buffered output bytes
 to be written out. The general contract of flush is
 that calling it is an indication that, if any bytes previously
 written have been buffered by the implementation of the output
 stream, such bytes should immediately be written to their
 intended destination.
 
 If the intended destination of this stream is an abstraction provided by
 the underlying operating system, for example a file, then flushing the
 stream guarantees only that bytes previously written to the stream are
 passed to the operating system for writing; it does not guarantee that
 they are actually written to a physical device such as a disk drive.
 
 The flush method of OutputStream does nothing.

Specified by:
flush in interface Flushable
Throws:
IOException - if an I/O error occurs.


"
32,OutputStream,5,void close(),True,Closes this output stream and releases any system resources associated with this stream.,"

close
public void close()
           throws IOException
Closes this output stream and releases any system resources
 associated with this stream. The general contract of close
 is that it closes the output stream. A closed stream cannot perform
 output operations and cannot be reopened.
 
 The close method of OutputStream does nothing.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Throws:
IOException - if an I/O error occurs.


"
33,OutputStreamWriter,1,OutputStreamWriter(OutputStream out),False,,NULL
33,OutputStreamWriter,2,"OutputStreamWriter(OutputStream out, String charsetName)",False,,NULL
33,OutputStreamWriter,3,void write(int c),True,Writes a single character.,"

write
public void write(int c)
           throws IOException
Writes a single character.

Overrides:
write in class Writer
Parameters:
c - int specifying a character to be written
Throws:
IOException - If an I/O error occurs


"
33,OutputStreamWriter,4,void write(char[] cbuf),False,,NULL
33,OutputStreamWriter,5,"void write(char[] cbuf, int off, int len)",True,Writes a portion of an array of characters.,"

write
public void write(char[] cbuf,
                  int off,
                  int len)
           throws IOException
Writes a portion of an array of characters.

Specified by:
write in class Writer
Parameters:
cbuf - Buffer of characters
off - Offset from which to start writing characters
len - Number of characters to write
Throws:
IOException - If an I/O error occurs


"
33,OutputStreamWriter,6,void write(String str),False,,NULL
33,OutputStreamWriter,7,"void write(String str, int off, int len)",True,Writes a portion of a string.,"

write
public void write(String str,
                  int off,
                  int len)
           throws IOException
Writes a portion of a string.

Overrides:
write in class Writer
Parameters:
str - A String
off - Offset from which to start writing characters
len - Number of characters to write
Throws:
IOException - If an I/O error occurs


"
33,OutputStreamWriter,8,void flush(),True,Flushes the stream.,"

flush
public void flush()
           throws IOException
Flushes the stream.

Specified by:
flush in interface Flushable
Specified by:
flush in class Writer
Throws:
IOException - If an I/O error occurs


"
33,OutputStreamWriter,9,void close(),True,"Closes the stream, flushing it first.","

close
public void close()
           throws IOException
Description copied from class: Writer
Closes the stream, flushing it first. Once the stream has been closed,
 further write() or flush() invocations will cause an IOException to be
 thrown. Closing a previously closed stream has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in class Writer
Throws:
IOException - If an I/O error occurs


"
34,PipedInputStream,1,int read(),True,Reads the next byte of data from this piped input stream.,"

read
public int read()
         throws IOException
Reads the next byte of data from this piped input stream. The
 value byte is returned as an int in the range
 0 to 255.
 This method blocks until input data is available, the end of the
 stream is detected, or an exception is thrown.

Specified by:
read in class InputStream
Returns:
the next byte of data, or -1 if the end of the
             stream is reached.
Throws:
IOException - if the pipe is
           unconnected,
            broken, closed,
           or if an I/O error occurs.


"
34,PipedInputStream,2,int read(byte[] b),False,,NULL
34,PipedInputStream,3,"int read(byte[] b, int off, int len)",True,Reads up to len bytes of data from this piped input stream into an array of bytes.,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads up to len bytes of data from this piped input
 stream into an array of bytes. Less than len bytes
 will be read if the end of the data stream is reached or if
 len exceeds the pipe's buffer size.
 If len  is zero, then no bytes are read and 0 is returned;
 otherwise, the method blocks until at least 1 byte of input is
 available, end of the stream has been detected, or an exception is
 thrown.

Overrides:
read in class InputStream
Parameters:
b - the buffer into which the data is read.
off - the start offset in the destination array b
len - the maximum number of bytes read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             the stream has been reached.
Throws:
NullPointerException - If b is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 b.length - off
IOException - if the pipe is  broken,
           unconnected,
           closed, or if an I/O error occurs.
See Also:
InputStream.read()


"
34,PipedInputStream,4,void connect(PipedOutputStream src),True,Causes this piped input stream to be connected to the piped output stream src.,"

connect
public void connect(PipedOutputStream src)
             throws IOException
Causes this piped input stream to be connected
 to the piped  output stream src.
 If this object is already connected to some
 other piped output  stream, an IOException
 is thrown.
 
 If src is an
 unconnected piped output stream and snk
 is an unconnected piped input stream, they
 may be connected by either the call:

 snk.connect(src) 

 or the call:

 src.connect(snk) 

 The two calls have the same effect.

Parameters:
src - The piped output stream to connect to.
Throws:
IOException - if an I/O error occurs.


"
34,PipedInputStream,5,void disconnect(),False,,NULL
35,PipedOutputStream,1,void connect(PipedInputStream snk) throws IOException,True,Connects this piped output stream to a receiver.,"

connect
public void connect(PipedInputStream snk)
             throws IOException
Connects this piped output stream to a receiver. If this object
 is already connected to some other piped input stream, an
 IOException is thrown.
 
 If snk is an unconnected piped input stream and
 src is an unconnected piped output stream, they may
 be connected by either the call:
 
 src.connect(snk)
 or the call:
 
 snk.connect(src)
 The two calls have the same effect.

Parameters:
snk - the piped input stream to connect to.
Throws:
IOException - if an I/O error occurs.


"
35,PipedOutputStream,2,void flush() throws IOException,True,Flushes this output stream and forces any buffered output bytes to be written out.,"

flush
public void flush()
           throws IOException
Flushes this output stream and forces any buffered output bytes
 to be written out.
 This will notify any readers that bytes are waiting in the pipe.

Specified by:
flush in interface Flushable
Overrides:
flush in class OutputStream
Throws:
IOException - if an I/O error occurs.


"
35,PipedOutputStream,3,void write(int b) throws IOException,True,Writes the specified byte to the piped output stream.,"

write
public void write(int b)
           throws IOException
Writes the specified byte to the piped output stream.
 
 Implements the write method of OutputStream.

Specified by:
write in class OutputStream
Parameters:
b - the byte to be written.
Throws:
IOException - if the pipe is  broken,
          unconnected,
          closed, or if an I/O error occurs.


"
35,PipedOutputStream,4,void write(byte[] b) throws IOException,False,,NULL
35,PipedOutputStream,5,"void write(byte[] b, int off, int len) throws IOException",True,Writes len bytes from the specified byte array starting at offset off to this piped output stream.,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Writes len bytes from the specified byte array
 starting at offset off to this piped output stream.
 This method blocks until all the bytes are written to the output
 stream.

Overrides:
write in class OutputStream
Parameters:
b - the data.
off - the start offset in the data.
len - the number of bytes to write.
Throws:
IOException - if the pipe is  broken,
          unconnected,
          closed, or if an I/O error occurs.


"
36,PipedReader,1,int read(),True,Reads the next character of data from this piped stream.,"

read
public int read()
         throws IOException
Reads the next character of data from this piped stream.
 If no character is available because the end of the stream
 has been reached, the value -1 is returned.
 This method blocks until input data is available, the end of
 the stream is detected, or an exception is thrown.

Overrides:
read in class Reader
Returns:
the next character of data, or -1 if the end of the
             stream is reached.
Throws:
IOException - if the pipe is
           broken,
          unconnected, closed,
          or an I/O error occurs.


"
36,PipedReader,2,"int read(char cbuf[], int off, int len)",False,,NULL
36,PipedReader,3,void connect(PipedWriter src) throws IOException,True,Causes this piped reader to be connected to the piped writer src.,"

connect
public void connect(PipedWriter src)
             throws IOException
Causes this piped reader to be connected
 to the piped  writer src.
 If this object is already connected to some
 other piped writer, an IOException
 is thrown.
 
 If src is an
 unconnected piped writer and snk
 is an unconnected piped reader, they
 may be connected by either the call:

 snk.connect(src) 

 or the call:

 src.connect(snk) 

 The two calls have the same effect.

Parameters:
src - The piped writer to connect to.
Throws:
IOException - if an I/O error occurs.


"
36,PipedReader,4,"void connect(PipedWriter src, int pipeSize) throws IOException",False,,NULL
36,PipedReader,5,void disconnect() throws IOException,False,,NULL
37,PipedWriter,1,void connect(PipedReader src),True,Connects this piped writer to a receiver.,"

connect
public void connect(PipedReader snk)
             throws IOException
Connects this piped writer to a receiver. If this object
 is already connected to some other piped reader, an
 IOException is thrown.
 
 If snk is an unconnected piped reader and
 src is an unconnected piped writer, they may
 be connected by either the call:
 
 src.connect(snk)
 or the call:
 
 snk.connect(src)
 The two calls have the same effect.

Parameters:
snk - the piped reader to connect to.
Throws:
IOException - if an I/O error occurs.


"
37,PipedWriter,2,void connect(PipedWriter snk),False,,NULL
37,PipedWriter,3,void flush(),True,Flushes this output stream and forces any buffered output characters to be written out.,"

flush
public void flush()
           throws IOException
Flushes this output stream and forces any buffered output characters
 to be written out.
 This will notify any readers that characters are waiting in the pipe.

Specified by:
flush in interface Flushable
Specified by:
flush in class Writer
Throws:
IOException - if the pipe is closed, or an I/O error occurs.


"
37,PipedWriter,4,void write(int c),True,Writes the specified char to the piped output stream.,"

write
public void write(int c)
           throws IOException
Writes the specified char to the piped output stream.
 If a thread was reading data characters from the connected piped input
 stream, but the thread is no longer alive, then an
 IOException is thrown.
 
 Implements the write method of Writer.

Overrides:
write in class Writer
Parameters:
c - the char to be written.
Throws:
IOException - if the pipe is
           broken,
          unconnected, closed
          or an I/O error occurs.


"
37,PipedWriter,5,void write(char[] buf),False,,NULL
37,PipedWriter,6,"void write(char[] buf, int off, int len)",True,Writes len characters from the specified character array starting at offset off to this piped output stream.,"

write
public void write(char[] cbuf,
                  int off,
                  int len)
           throws IOException
Writes len characters from the specified character array
 starting at offset off to this piped output stream.
 This method blocks until all the characters are written to the output
 stream.
 If a thread was reading data characters from the connected piped input
 stream, but the thread is no longer alive, then an
 IOException is thrown.

Specified by:
write in class Writer
Parameters:
cbuf - the data.
off - the start offset in the data.
len - the number of characters to write.
Throws:
IOException - if the pipe is
           broken,
          unconnected, closed
          or an I/O error occurs.


"
37,PipedWriter,7,void write(String s),False,,NULL
37,PipedWriter,8,"void write(String s, int off, int len)",False,,NULL
38,PrintStream,1,PrintStream(OutputStream out),False,,NULL
38,PrintStream,2,void print(String s),True,Prints a string.,"

print
public void print(String s)
Prints a string.  If the argument is null then the string
 ""null"" is printed.  Otherwise, the string's characters are
 converted into bytes according to the platform's default character
 encoding, and these bytes are written in exactly the manner of the
 write(int) method.

Parameters:
s - The String to be printed


"
38,PrintStream,3,void println(String x),True,Prints a String and then terminate the line.,"

println
public void println(String x)
Prints a String and then terminate the line.  This method behaves as
 though it invokes print(String) and then
 println().

Parameters:
x - The String to be printed.


"
38,PrintStream,4,void println(Object x),True,Prints an Object and then terminate the line.,"

println
public void println(Object x)
Prints an Object and then terminate the line.  This method calls
 at first String.valueOf(x) to get the printed object's string value,
 then behaves as
 though it invokes print(String) and then
 println().

Parameters:
x - The Object to be printed.


"
38,PrintStream,5,void println(),True,Terminates the current line by writing the line separator string.,"

println
public void println()
Terminates the current line by writing the line separator string.  The
 line separator string is defined by the system property
 line.separator, and is not necessarily a single newline
 character ('\n').

"
39,PrintWriter,1,PrintWriter(Writer out),False,,NULL
39,PrintWriter,2,"PrintWriter(Writer out, boolean autoFlush)",False,,NULL
39,PrintWriter,3,PrintWriter(OutputStream out),False,,NULL
39,PrintWriter,4,"PrintWriter(OutputStream out, boolean autoFlush)",False,,NULL
39,PrintWriter,5,void print(String s),True,Prints a string.,"

print
public void print(String s)
Prints a string.  If the argument is null then the string
 ""null"" is printed.  Otherwise, the string's characters are
 converted into bytes according to the platform's default character
 encoding, and these bytes are written in exactly the manner of the
 write(int) method.

Parameters:
s - The String to be printed


"
39,PrintWriter,6,void print(char[] s),True,Prints an array of characters.,"

print
public void print(char[] s)
Prints an array of characters.  The characters are converted into bytes
 according to the platform's default character encoding, and these bytes
 are written in exactly the manner of the write(int)
 method.

Parameters:
s - The array of chars to be printed
Throws:
NullPointerException - If s is null


"
39,PrintWriter,7,void print(Object obj),True,Prints an object.,"

print
public void print(Object obj)
Prints an object.  The string produced by the String.valueOf(Object) method is translated into bytes
 according to the platform's default character encoding, and these bytes
 are written in exactly the manner of the write(int)
 method.

Parameters:
obj - The Object to be printed
See Also:
Object.toString()


"
39,PrintWriter,8,void println(),True,Terminates the current line by writing the line separator string.,"

println
public void println()
Terminates the current line by writing the line separator string.  The
 line separator string is defined by the system property
 line.separator, and is not necessarily a single newline
 character ('\n').

"
39,PrintWriter,9,void println(String x),True,Prints a String and then terminates the line.,"

println
public void println(String x)
Prints a String and then terminates the line.  This method behaves as
 though it invokes print(String) and then
 println().

Parameters:
x - the String value to be printed


"
39,PrintWriter,10,void println(char[] x),True,Prints an array of characters and then terminates the line.,"

println
public void println(char[] x)
Prints an array of characters and then terminates the line.  This method
 behaves as though it invokes print(char[]) and then
 println().

Parameters:
x - the array of char values to be printed


"
39,PrintWriter,11,void println(Object x),True,Prints an Object and then terminates the line.,"

println
public void println(Object x)
Prints an Object and then terminates the line.  This method calls
 at first String.valueOf(x) to get the printed object's string value,
 then behaves as
 though it invokes print(String) and then
 println().

Parameters:
x - The Object to be printed.


"
39,PrintWriter,12,void flush(),True,Flushes the stream.,"

flush
public void flush()
Flushes the stream.

Specified by:
flush in interface Flushable
Specified by:
flush in class Writer
See Also:
checkError()


"
39,PrintWriter,13,void close(),True,Closes the stream and releases any system resources associated with it.,"

close
public void close()
Closes the stream and releases any system resources associated
 with it. Closing a previously closed stream has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in class Writer
See Also:
checkError()


"
40,PushbackInputStream,1,int read(),True,Reads the next byte of data from this input stream.,"

read
public int read()
         throws IOException
Reads the next byte of data from this input stream. The value
 byte is returned as an int in the range
 0 to 255. If no byte is available
 because the end of the stream has been reached, the value
 -1 is returned. This method blocks until input data
 is available, the end of the stream is detected, or an exception
 is thrown.

  This method returns the most recently pushed-back byte, if there is
 one, and otherwise calls the read method of its underlying
 input stream and returns whatever value that method returns.

Overrides:
read in class FilterInputStream
Returns:
the next byte of data, or -1 if the end of the
             stream has been reached.
Throws:
IOException - if this input stream has been closed by
             invoking its close() method,
             or an I/O error occurs.
See Also:
InputStream.read()


"
40,PushbackInputStream,2,int read(byte[] b),False,,NULL
40,PushbackInputStream,3,"int read(byte[] b, int off, int len)",True,Reads up to len bytes of data from this input stream into an array of bytes.,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads up to len bytes of data from this input stream into
 an array of bytes.  This method first reads any pushed-back bytes; after
 that, if fewer than len bytes have been read then it
 reads from the underlying input stream. If len is not zero, the method
 blocks until at least 1 byte of input is available; otherwise, no
 bytes are read and 0 is returned.

Overrides:
read in class FilterInputStream
Parameters:
b - the buffer into which the data is read.
off - the start offset in the destination array b
len - the maximum number of bytes read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             the stream has been reached.
Throws:
NullPointerException - If b is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 b.length - off
IOException - if this input stream has been closed by
             invoking its close() method,
             or an I/O error occurs.
See Also:
InputStream.read(byte[], int, int)


"
40,PushbackInputStream,4,void unread(int b),True,Pushes back a byte by copying it to the front of the pushback buffer.,"

unread
public void unread(int b)
            throws IOException
Pushes back a byte by copying it to the front of the pushback buffer.
 After this method returns, the next byte to be read will have the value
 (byte)b.

Parameters:
b - the int value whose low-order
                  byte is to be pushed back.
Throws:
IOException - If there is not enough room in the pushback
            buffer for the byte, or this input stream has been closed by
            invoking its close() method.


"
40,PushbackInputStream,5,int available(),True,Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream.,"

available
public int available()
              throws IOException
Returns an estimate of the number of bytes that can be read (or
 skipped over) from this input stream without blocking by the next
 invocation of a method for this input stream. The next invocation might be
 the same thread or another thread.  A single read or skip of this
 many bytes will not block, but may read or skip fewer bytes.

  The method returns the sum of the number of bytes that have been
 pushed back and the value returned by available.

Overrides:
available in class FilterInputStream
Returns:
the number of bytes that can be read (or skipped over) from
             the input stream without blocking.
Throws:
IOException - if this input stream has been closed by
             invoking its close() method,
             or an I/O error occurs.
See Also:
FilterInputStream.in, 
InputStream.available()


"
41,PushbackReader,1,PushbackReader(Reader in),False,,NULL
41,PushbackReader,2,"PushbackReader(Reader in, int size)",False,,NULL
41,PushbackReader,3,int read(),True,Reads a single character.,"

read
public int read()
         throws IOException
Reads a single character.

Overrides:
read in class FilterReader
Returns:
The character read, or -1 if the end of the stream has been
             reached
Throws:
IOException - If an I/O error occurs


"
41,PushbackReader,4,int read(char[] cbuf),False,,NULL
41,PushbackReader,5,"int read(char[] cbuf, int off, int len)",True,Reads characters into a portion of an array.,"

read
public int read(char[] cbuf,
                int off,
                int len)
         throws IOException
Reads characters into a portion of an array.

Overrides:
read in class FilterReader
Parameters:
cbuf - Destination buffer
off - Offset at which to start writing characters
len - Maximum number of characters to read
Returns:
The number of characters read, or -1 if the end of the
             stream has been reached
Throws:
IOException - If an I/O error occurs


"
41,PushbackReader,6,void unread(int c),True,Pushes back a single character by copying it to the front of the pushback buffer.,"

unread
public void unread(int c)
            throws IOException
Pushes back a single character by copying it to the front of the
 pushback buffer. After this method returns, the next character to be read
 will have the value (char)c.

Parameters:
c - The int value representing a character to be pushed back
Throws:
IOException - If the pushback buffer is full,
                          or if some other I/O error occurs


"
41,PushbackReader,7,"void unread(char[] cbuf, int off, int len)",True,Pushes back a portion of an array of characters by copying it to the front of the pushback buffer.,"

unread
public void unread(char[] cbuf,
                   int off,
                   int len)
            throws IOException
Pushes back a portion of an array of characters by copying it to the
 front of the pushback buffer.  After this method returns, the next
 character to be read will have the value cbuf[off], the
 character after that will have the value cbuf[off+1], and
 so forth.

Parameters:
cbuf - Character array
off - Offset of first character to push back
len - Number of characters to push back
Throws:
IOException - If there is insufficient room in the pushback
                          buffer, or if some other I/O error occurs


"
41,PushbackReader,8,void close(),True,Closes the stream and releases any system resources associated with it.,"

close
public void close()
           throws IOException
Closes the stream and releases any system resources associated with
 it. Once the stream has been closed, further read(),
 unread(), ready(), or skip() invocations will throw an IOException.
 Closing a previously closed stream has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class FilterReader
Throws:
IOException - If an I/O error occurs


"
41,PushbackReader,9,void mark(int readAheadLimit),True,Marks the present position in the stream.,"

mark
public void mark(int readAheadLimit)
          throws IOException
Marks the present position in the stream. The mark
 for class PushbackReader always throws an exception.

Overrides:
mark in class FilterReader
Parameters:
readAheadLimit - Limit on the number of characters that may be
                         read while still preserving the mark.  After
                         reading this many characters, attempting to
                         reset the stream may fail.
Throws:
IOException - Always, since mark is not supported


"
41,PushbackReader,10,void reset(),True,Resets the stream.,"

reset
public void reset()
           throws IOException
Resets the stream. The reset method of
 PushbackReader always throws an exception.

Overrides:
reset in class FilterReader
Throws:
IOException - Always, since reset is not supported


"
41,PushbackReader,11,boolean ready(),True,Tells whether this stream is ready to be read.,"

ready
public boolean ready()
              throws IOException
Tells whether this stream is ready to be read.

Overrides:
ready in class FilterReader
Returns:
True if the next read() is guaranteed not to block for input,
 false otherwise.  Note that returning false does not guarantee that the
 next read will block.
Throws:
IOException - If an I/O error occurs


"
41,PushbackReader,12,long skip(long n),True,Skips characters.,"

skip
public long skip(long n)
          throws IOException
Skips characters.  This method will block until some characters are
 available, an I/O error occurs, or the end of the stream is reached.

Overrides:
skip in class FilterReader
Parameters:
n - The number of characters to skip
Returns:
The number of characters actually skipped
Throws:
IllegalArgumentException - If n is negative.
IOException - If an I/O error occurs


"
41,PushbackReader,13,int read(CharBuffer target),False,,NULL
41,PushbackReader,14,"int read(CharBuffer target, int position, int limit)",False,,NULL
41,PushbackReader,15,"int read(CharBuffer target, int position)",False,,NULL
41,PushbackReader,16,"int read(CharBuffer target, int position, int limit)",False,,NULL
41,PushbackReader,17,"int read(CharBuffer target, int position, int limit)",False,,NULL
41,PushbackReader,18,"int read(CharBuffer target, int position, int limit)",False,,NULL
41,PushbackReader,19,"int read(CharBuffer target, int position, int limit)",False,,NULL
41,PushbackReader,20,"int read(CharBuffer target, int position, int limit)",False,,NULL
42,RandomAccessFile,1,"RandomAccessFile(String name, String mode)",False,,NULL
42,RandomAccessFile,2,int read(),True,Reads a byte of data from this file.,"

read
public int read()
         throws IOException
Reads a byte of data from this file. The byte is returned as an
 integer in the range 0 to 255 (0x00-0x0ff). This
 method blocks if no input is yet available.
 
 Although RandomAccessFile is not a subclass of
 InputStream, this method behaves in exactly the same
 way as the InputStream.read() method of
 InputStream.

Returns:
the next byte of data, or -1 if the end of the
             file has been reached.
Throws:
IOException - if an I/O error occurs. Not thrown if
                          end-of-file has been reached.


"
42,RandomAccessFile,3,int read(byte[] b),True,Reads up to b.length bytes of data from this file into an array of bytes.,"

read
public int read(byte[] b)
         throws IOException
Reads up to b.length bytes of data from this file
 into an array of bytes. This method blocks until at least one byte
 of input is available.
 
 Although RandomAccessFile is not a subclass of
 InputStream, this method behaves in exactly the
 same way as the InputStream.read(byte[]) method of
 InputStream.

Parameters:
b - the buffer into which the data is read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             this file has been reached.
Throws:
IOException - If the first byte cannot be read for any reason
 other than end of file, or if the random access file has been closed, or if
 some other I/O error occurs.
NullPointerException - If b is null.


"
42,RandomAccessFile,4,"int read(byte[] b, int off, int len)",True,Reads up to len bytes of data from this file into an array of bytes.,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads up to len bytes of data from this file into an
 array of bytes. This method blocks until at least one byte of input
 is available.
 
 Although RandomAccessFile is not a subclass of
 InputStream, this method behaves in exactly the
 same way as the InputStream.read(byte[], int, int) method of
 InputStream.

Parameters:
b - the buffer into which the data is read.
off - the start offset in array b
                   at which the data is written.
len - the maximum number of bytes read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             the file has been reached.
Throws:
IOException - If the first byte cannot be read for any reason
 other than end of file, or if the random access file has been closed, or if
 some other I/O error occurs.
NullPointerException - If b is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 b.length - off


"
42,RandomAccessFile,5,void write(int b),True,Writes the specified byte to this file.,"

write
public void write(int b)
           throws IOException
Writes the specified byte to this file. The write starts at
 the current file pointer.

Specified by:
write in interface DataOutput
Parameters:
b - the byte to be written.
Throws:
IOException - if an I/O error occurs.


"
42,RandomAccessFile,6,void write(byte[] b),True,"Writes b.length bytes from the specified byte array to this file, starting at the current file pointer.","

write
public void write(byte[] b)
           throws IOException
Writes b.length bytes from the specified byte array
 to this file, starting at the current file pointer.

Specified by:
write in interface DataOutput
Parameters:
b - the data.
Throws:
IOException - if an I/O error occurs.


"
42,RandomAccessFile,7,"void write(byte[] b, int off, int len)",True,Writes len bytes from the specified byte array starting at offset off to this file.,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Writes len bytes from the specified byte array
 starting at offset off to this file.

Specified by:
write in interface DataOutput
Parameters:
b - the data.
off - the start offset in the data.
len - the number of bytes to write.
Throws:
IOException - if an I/O error occurs.


"
42,RandomAccessFile,8,void seek(long pos),True,"Sets the file-pointer offset, measured from the beginning of this file, at which the next read or write occurs.","

seek
public void seek(long pos)
          throws IOException
Sets the file-pointer offset, measured from the beginning of this
 file, at which the next read or write occurs.  The offset may be
 set beyond the end of the file. Setting the offset beyond the end
 of the file does not change the file length.  The file length will
 change only by writing after the offset has been set beyond the end
 of the file.

Parameters:
pos - the offset position, measured in bytes from the
                   beginning of the file, at which to set the file
                   pointer.
Throws:
IOException - if pos is less than
                          0 or if an I/O error occurs.


"
42,RandomAccessFile,9,long length(),True,Returns the length of this file.,"

length
public long length()
            throws IOException
Returns the length of this file.

Returns:
the length of this file, measured in bytes.
Throws:
IOException - if an I/O error occurs.


"
42,RandomAccessFile,10,void setLength(long newLength),True,Sets the length of this file.,"

setLength
public void setLength(long newLength)
               throws IOException
Sets the length of this file.

  If the present length of the file as returned by the
 length method is greater than the newLength
 argument then the file will be truncated.  In this case, if the file
 offset as returned by the getFilePointer method is greater
 than newLength then after this method returns the offset
 will be equal to newLength.

  If the present length of the file as returned by the
 length method is smaller than the newLength
 argument then the file will be extended.  In this case, the contents of
 the extended portion of the file are not defined.

Parameters:
newLength - The desired length of the file
Throws:
IOException - If an I/O error occurs
Since:
1.2


"
42,RandomAccessFile,11,void close(),True,Closes this random access file stream and releases any system resources associated with the stream.,"

close
public void close()
           throws IOException
Closes this random access file stream and releases any system
 resources associated with the stream. A closed random access
 file cannot perform input or output operations and cannot be
 reopened.

  If this file has an associated channel then the channel is closed
 as well.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Throws:
IOException - if an I/O error occurs.


"
42,RandomAccessFile,12,void finalize(),False,,NULL
43,Reader,1,int read(),True,Reads a single character.,"

read
public int read()
         throws IOException
Reads a single character.  This method will block until a character is
 available, an I/O error occurs, or the end of the stream is reached.

  Subclasses that intend to support efficient single-character input
 should override this method.

Returns:
The character read, as an integer in the range 0 to 65535
             (0x00-0xffff), or -1 if the end of the stream has
             been reached
Throws:
IOException - If an I/O error occurs


"
43,Reader,2,int read(char[] cbuf),True,Reads characters into an array.,"

read
public int read(char[] cbuf)
         throws IOException
Reads characters into an array.  This method will block until some input
 is available, an I/O error occurs, or the end of the stream is reached.

Parameters:
cbuf - Destination buffer
Returns:
The number of characters read, or -1
              if the end of the stream
              has been reached
Throws:
IOException - If an I/O error occurs


"
43,Reader,3,"int read(char[] cbuf, int off, int len)",True,Reads characters into a portion of an array.,"

read
public abstract int read(char[] cbuf,
                         int off,
                         int len)
                  throws IOException
Reads characters into a portion of an array.  This method will block
 until some input is available, an I/O error occurs, or the end of the
 stream is reached.

Parameters:
cbuf - Destination buffer
off - Offset at which to start storing characters
len - Maximum number of characters to read
Returns:
The number of characters read, or -1 if the end of the
             stream has been reached
Throws:
IOException - If an I/O error occurs


"
43,Reader,4,long skip(long n),True,Skips characters.,"

skip
public long skip(long n)
          throws IOException
Skips characters.  This method will block until some characters are
 available, an I/O error occurs, or the end of the stream is reached.

Parameters:
n - The number of characters to skip
Returns:
The number of characters actually skipped
Throws:
IllegalArgumentException - If n is negative.
IOException - If an I/O error occurs


"
43,Reader,5,boolean ready(),True,Tells whether this stream is ready to be read.,"

ready
public boolean ready()
              throws IOException
Tells whether this stream is ready to be read.

Returns:
True if the next read() is guaranteed not to block for input,
 false otherwise.  Note that returning false does not guarantee that the
 next read will block.
Throws:
IOException - If an I/O error occurs


"
43,Reader,6,void close(),True,Closes the stream and releases any system resources associated with it.,"

close
public abstract void close()
                    throws IOException
Closes the stream and releases any system resources associated with
 it.  Once the stream has been closed, further read(), ready(),
 mark(), reset(), or skip() invocations will throw an IOException.
 Closing a previously closed stream has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Throws:
IOException - If an I/O error occurs


"
43,Reader,7,int mark(int readAheadLimit),False,,NULL
43,Reader,8,void reset(),True,Resets the stream.,"

reset
public void reset()
           throws IOException
Resets the stream.  If the stream has been marked, then attempt to
 reposition it at the mark.  If the stream has not been marked, then
 attempt to reset it in some way appropriate to the particular stream,
 for example by repositioning it to its starting point.  Not all
 character-input streams support the reset() operation, and some support
 reset() without supporting mark().

Throws:
IOException - If the stream has not been marked,
                          or if the mark has been invalidated,
                          or if the stream does not support reset(),
                          or if some other I/O error occurs


"
43,Reader,9,boolean markSupported(),True,Tells whether this stream supports the mark() operation.,"

markSupported
public boolean markSupported()
Tells whether this stream supports the mark() operation. The default
 implementation always returns false. Subclasses should override this
 method.

Returns:
true if and only if this stream supports the mark operation.


"
44,SequenceInputStream,1,SequenceInputStream(Enumeration<? extends InputStream> e),False,,NULL
44,SequenceInputStream,2,"SequenceInputStream(InputStream s1, InputStream s2)",False,,NULL
44,SequenceInputStream,3,int available() throws IOException,True,Returns an estimate of the number of bytes that can be read (or skipped over) from the current underlying input stream without blocking by the next invocation of a method for the current underlying input stream.,"

available
public int available()
              throws IOException
Returns an estimate of the number of bytes that can be read (or
 skipped over) from the current underlying input stream without
 blocking by the next invocation of a method for the current
 underlying input stream. The next invocation might be
 the same thread or another thread.  A single read or skip of this
 many bytes will not block, but may read or skip fewer bytes.
 
 This method simply calls available of the current underlying
 input stream and returns the result.

Overrides:
available in class InputStream
Returns:
an estimate of the number of bytes that can be read (or
         skipped over) from the current underlying input stream
         without blocking or 0 if this input stream
         has been closed by invoking its close() method
Throws:
IOException - if an I/O error occurs.
Since:
JDK1.1


"
44,SequenceInputStream,4,void close() throws IOException,True,Closes this input stream and releases any system resources associated with the stream.,"

close
public void close()
           throws IOException
Closes this input stream and releases any system resources
 associated with the stream.
 A closed SequenceInputStream
 cannot  perform input operations and cannot
 be reopened.
 
 If this stream was created
 from an enumeration, all remaining elements
 are requested from the enumeration and closed
 before the close method returns.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class InputStream
Throws:
IOException - if an I/O error occurs.


"
44,SequenceInputStream,5,void mark(int readlimit),False,,NULL
44,SequenceInputStream,6,boolean markSupported(),False,,NULL
44,SequenceInputStream,7,int read() throws IOException,True,Reads the next byte of data from this input stream.,"

read
public int read()
         throws IOException
Reads the next byte of data from this input stream. The byte is
 returned as an int in the range 0 to
 255. If no byte is available because the end of the
 stream has been reached, the value -1 is returned.
 This method blocks until input data is available, the end of the
 stream is detected, or an exception is thrown.
 
 This method
 tries to read one character from the current substream. If it
 reaches the end of the stream, it calls the close
 method of the current substream and begins reading from the next
 substream.

Specified by:
read in class InputStream
Returns:
the next byte of data, or -1 if the end of the
             stream is reached.
Throws:
IOException - if an I/O error occurs.


"
44,SequenceInputStream,8,"int read(byte[] b, int off, int len) throws IOException",True,Reads up to len bytes of data from this input stream into an array of bytes.,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads up to len bytes of data from this input stream
 into an array of bytes.  If len is not zero, the method
 blocks until at least 1 byte of input is available; otherwise, no
 bytes are read and 0 is returned.
 
 The read method of SequenceInputStream
 tries to read the data from the current substream. If it fails to
 read any characters because the substream has reached the end of
 the stream, it calls the close method of the current
 substream and begins reading from the next substream.

Overrides:
read in class InputStream
Parameters:
b - the buffer into which the data is read.
off - the start offset in array b
                   at which the data is written.
len - the maximum number of bytes read.
Returns:
int   the number of bytes read.
Throws:
NullPointerException - If b is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 b.length - off
IOException - if an I/O error occurs.
See Also:
InputStream.read()


"
44,SequenceInputStream,9,void reset() throws IOException,False,,NULL
44,SequenceInputStream,10,long skip(long n) throws IOException,False,,NULL
45,SerializablePermission,1,boolean equals(Object obj),False,,NULL
45,SerializablePermission,2,int hashCode(),False,,NULL
45,SerializablePermission,3,String getActions(),False,,NULL
45,SerializablePermission,4,String getName(),False,,NULL
45,SerializablePermission,5,String toString(),False,,NULL
46,StreamTokenizer,1,StreamTokenizer(),False,,NULL
46,StreamTokenizer,2,int nextToken(),True,Parses the next token from the input stream of this tokenizer.,"

nextToken
public int nextToken()
              throws IOException
Parses the next token from the input stream of this tokenizer.
 The type of the next token is returned in the ttype
 field. Additional information about the token may be in the
 nval field or the sval field of this
 tokenizer.
 
 Typical clients of this
 class first set up the syntax tables and then sit in a loop
 calling nextToken to parse successive tokens until TT_EOF
 is returned.

Returns:
the value of the ttype field.
Throws:
IOException - if an I/O error occurs.
See Also:
nval, 
sval, 
ttype


"
46,StreamTokenizer,3,int nextToken(StringBuffer sb),False,,NULL
46,StreamTokenizer,4,"int nextToken(char[] buffer, int offset, int length)",False,,NULL
46,StreamTokenizer,5,"int nextToken(StringBuffer sb, char[] buffer, int offset, int length)",False,,NULL
47,StringBufferInputStream,1,StringBufferInputStream(String s),False,,NULL
47,StringBufferInputStream,2,int read(),True,Deprecated.,"

read
public int read()
Deprecated. 
Reads the next byte of data from this input stream. The value
 byte is returned as an int in the range
 0 to 255. If no byte is available
 because the end of the stream has been reached, the value
 -1 is returned.
 
 The read method of
 StringBufferInputStream cannot block. It returns the
 low eight bits of the next character in this input stream's buffer.

Specified by:
read in class InputStream
Returns:
the next byte of data, or -1 if the end of the
             stream is reached.


"
47,StringBufferInputStream,3,"int read(byte b[], int off, int len)",False,,NULL
47,StringBufferInputStream,4,long skip(long n),True,Deprecated.,"

skip
public long skip(long n)
Deprecated. 
Skips n bytes of input from this input stream. Fewer
 bytes might be skipped if the end of the input stream is reached.

Overrides:
skip in class InputStream
Parameters:
n - the number of bytes to be skipped.
Returns:
the actual number of bytes skipped.


"
47,StringBufferInputStream,5,int available(),True,Deprecated.,"

available
public int available()
Deprecated. 
Returns the number of bytes that can be read from the input
 stream without blocking.

Overrides:
available in class InputStream
Returns:
the value of count - pos, which is the
             number of bytes remaining to be read from the input buffer.


"
48,StringReader,1,StringReader(String s),False,,NULL
48,StringReader,2,int read(),True,Reads a single character.,"

read
public int read()
         throws IOException
Reads a single character.

Overrides:
read in class Reader
Returns:
The character read, or -1 if the end of the stream has been
             reached
Throws:
IOException - If an I/O error occurs


"
48,StringReader,3,"int read(char[] cbuf, int off, int len)",True,Reads characters into a portion of an array.,"

read
public int read(char[] cbuf,
                int off,
                int len)
         throws IOException
Reads characters into a portion of an array.

Specified by:
read in class Reader
Parameters:
cbuf - Destination buffer
off - Offset at which to start writing characters
len - Maximum number of characters to read
Returns:
The number of characters read, or -1 if the end of the
             stream has been reached
Throws:
IOException - If an I/O error occurs


"
48,StringReader,4,long skip(long n),True,Skips the specified number of characters in the stream.,"

skip
public long skip(long ns)
          throws IOException
Skips the specified number of characters in the stream. Returns
 the number of characters that were skipped.

 The ns parameter may be negative, even though the
 skip method of the Reader superclass throws
 an exception in this case. Negative values of ns cause the
 stream to skip backwards. Negative return values indicate a skip
 backwards. It is not possible to skip backwards past the beginning of
 the string.

 If the entire string has been read or skipped, then this method has
 no effect and always returns 0.

Overrides:
skip in class Reader
Parameters:
ns - The number of characters to skip
Returns:
The number of characters actually skipped
Throws:
IOException - If an I/O error occurs


"
48,StringReader,5,boolean ready(),True,Tells whether this stream is ready to be read.,"

ready
public boolean ready()
              throws IOException
Tells whether this stream is ready to be read.

Overrides:
ready in class Reader
Returns:
True if the next read() is guaranteed not to block for input
Throws:
IOException - If the stream is closed


"
49,StringWriter,1,StringWriter(),False,,NULL
49,StringWriter,2,StringWriter(int initialSize),False,,NULL
49,StringWriter,3,String getBuffer(),False,,NULL
49,StringWriter,4,String toString(),True,Return the buffer's current value as a string.,"

toString
public String toString()
Return the buffer's current value as a string.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
49,StringWriter,5,void write(int c),True,Write a single character.,"

write
public void write(int c)
Write a single character.

Overrides:
write in class Writer
Parameters:
c - int specifying a character to be written


"
49,StringWriter,6,"void write(char[] cbuf, int off, int len)",True,Write a portion of an array of characters.,"

write
public void write(char[] cbuf,
                  int off,
                  int len)
Write a portion of an array of characters.

Specified by:
write in class Writer
Parameters:
cbuf - Array of characters
off - Offset from which to start writing characters
len - Number of characters to write


"
49,StringWriter,7,"void write(String str, int off, int len)",True,Write a portion of a string.,"

write
public void write(String str,
                  int off,
                  int len)
Write a portion of a string.

Overrides:
write in class Writer
Parameters:
str - String to be written
off - Offset from which to start writing characters
len - Number of characters to write


"
49,StringWriter,8,void write(String str),True,Write a string.,"

write
public void write(String str)
Write a string.

Overrides:
write in class Writer
Parameters:
str - String to be written


"
49,StringWriter,9,void flush(),True,Flush the stream.,"

flush
public void flush()
Flush the stream.

Specified by:
flush in interface Flushable
Specified by:
flush in class Writer


"
49,StringWriter,10,void close(),True,Closing a StringWriter has no effect.,"

close
public void close()
           throws IOException
Closing a StringWriter has no effect. The methods in this
 class can be called after the stream has been closed without generating
 an IOException.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in class Writer
Throws:
IOException - If an I/O error occurs


"
50,Writer,1,void write(int c),True,Writes a single character.,"

write
public void write(int c)
           throws IOException
Writes a single character.  The character to be written is contained in
 the 16 low-order bits of the given integer value; the 16 high-order bits
 are ignored.

  Subclasses that intend to support efficient single-character output
 should override this method.

Parameters:
c - int specifying a character to be written
Throws:
IOException - If an I/O error occurs


"
50,Writer,2,void write(char[] cbuf),True,Writes an array of characters.,"

write
public void write(char[] cbuf)
           throws IOException
Writes an array of characters.

Parameters:
cbuf - Array of characters to be written
Throws:
IOException - If an I/O error occurs


"
50,Writer,3,"void write(char[] cbuf, int off, int len)",True,Writes a portion of an array of characters.,"

write
public abstract void write(char[] cbuf,
                           int off,
                           int len)
                    throws IOException
Writes a portion of an array of characters.

Parameters:
cbuf - Array of characters
off - Offset from which to start writing characters
len - Number of characters to write
Throws:
IOException - If an I/O error occurs


"
50,Writer,4,void write(String str),True,Writes a string.,"

write
public void write(String str)
           throws IOException
Writes a string.

Parameters:
str - String to be written
Throws:
IOException - If an I/O error occurs


"
50,Writer,5,"void write(String str, int off, int len)",True,Writes a portion of a string.,"

write
public void write(String str,
                  int off,
                  int len)
           throws IOException
Writes a portion of a string.

Parameters:
str - A String
off - Offset from which to start writing characters
len - Number of characters to write
Throws:
IndexOutOfBoundsException - If off is negative, or len is negative,
          or off+len is negative or greater than the length
          of the given string
IOException - If an I/O error occurs


"
50,Writer,6,void flush(),True,Flushes the stream.,"

flush
public abstract void flush()
                    throws IOException
Flushes the stream.  If the stream has saved any characters from the
 various write() methods in a buffer, write them immediately to their
 intended destination.  Then, if that destination is another character or
 byte stream, flush it.  Thus one flush() invocation will flush all the
 buffers in a chain of Writers and OutputStreams.

  If the intended destination of this stream is an abstraction provided
 by the underlying operating system, for example a file, then flushing the
 stream guarantees only that bytes previously written to the stream are
 passed to the operating system for writing; it does not guarantee that
 they are actually written to a physical device such as a disk drive.

Specified by:
flush in interface Flushable
Throws:
IOException - If an I/O error occurs


"
50,Writer,7,void close(),True,"Closes the stream, flushing it first.","

close
public abstract void close()
                    throws IOException
Closes the stream, flushing it first. Once the stream has been closed,
 further write() or flush() invocations will cause an IOException to be
 thrown. Closing a previously closed stream has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Throws:
IOException - If an I/O error occurs


"
