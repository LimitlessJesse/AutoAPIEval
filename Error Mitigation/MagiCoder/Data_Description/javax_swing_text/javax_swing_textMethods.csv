ClassName,Method,Return Type,Description,Full Description
AbstractDocument,addDocumentListener(DocumentListener listener),void,Adds a document listener for notification of any changes.,"

addDocumentListener
public void addDocumentListener(DocumentListener listener)
Adds a document listener for notification of any changes.

Specified by:
addDocumentListener in interface Document
Parameters:
listener - the DocumentListener to add
See Also:
Document.addDocumentListener(javax.swing.event.DocumentListener)


"
AbstractDocument,addUndoableEditListener(UndoableEditListener listener),void,Adds an undo listener for notification of any changes.,"

addUndoableEditListener
public void addUndoableEditListener(UndoableEditListener listener)
Adds an undo listener for notification of any changes.
 Undo/Redo operations performed on the UndoableEdit
 will cause the appropriate DocumentEvent to be fired to keep
 the view(s) in sync with the model.

Specified by:
addUndoableEditListener in interface Document
Parameters:
listener - the UndoableEditListener to add
See Also:
Document.addUndoableEditListener(javax.swing.event.UndoableEditListener)


"
AbstractDocument,"createBranchElement(Element parent, AttributeSet a)",protected Element,"Creates a document branch element, that can contain other elements.","

createBranchElement
protected Element createBranchElement(Element parent,
                                      AttributeSet a)
Creates a document branch element, that can contain other elements.

Parameters:
parent - the parent element
a - the attributes
Returns:
the element


"
AbstractDocument,"createLeafElement(Element parent, AttributeSet a, int p0, int p1)",protected Element,Creates a document leaf element.,"

createLeafElement
protected Element createLeafElement(Element parent,
                                    AttributeSet a,
                                    int p0,
                                    int p1)
Creates a document leaf element.
 Hook through which elements are created to represent the
 document structure.  Because this implementation keeps
 structure and content separate, elements grow automatically
 when content is extended so splits of existing elements
 follow.  The document itself gets to decide how to generate
 elements to give flexibility in the type of elements used.

Parameters:
parent - the parent element
a - the attributes for the element
p0 - the beginning of the range >= 0
p1 - the end of the range >= p0
Returns:
the new element


"
AbstractDocument,createPosition(int offs),Position,Returns a position that will track change as the document is altered.,"

createPosition
public Position createPosition(int offs)
                        throws BadLocationException
Returns a position that will track change as the document
 is altered.
 
 This method is thread safe, although most Swing methods
 are not. Please see
 Concurrency
 in Swing for more information.

Specified by:
createPosition in interface Document
Parameters:
offs - the position in the model >= 0
Returns:
the position
Throws:
BadLocationException - if the given position does not
   represent a valid location in the associated document
See Also:
Document.createPosition(int)


"
AbstractDocument,dump(PrintStream out),void,Gives a diagnostic dump.,"

dump
public void dump(PrintStream out)
Gives a diagnostic dump.

Parameters:
out - the output stream


"
AbstractDocument,fireChangedUpdate(DocumentEvent e),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireChangedUpdate
protected void fireChangedUpdate(DocumentEvent e)
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is lazily created using the parameters passed into
 the fire method.

Parameters:
e - the event
See Also:
EventListenerList


"
AbstractDocument,fireInsertUpdate(DocumentEvent e),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireInsertUpdate
protected void fireInsertUpdate(DocumentEvent e)
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is lazily created using the parameters passed into
 the fire method.

Parameters:
e - the event
See Also:
EventListenerList


"
AbstractDocument,fireRemoveUpdate(DocumentEvent e),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireRemoveUpdate
protected void fireRemoveUpdate(DocumentEvent e)
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is lazily created using the parameters passed into
 the fire method.

Parameters:
e - the event
See Also:
EventListenerList


"
AbstractDocument,fireUndoableEditUpdate(UndoableEditEvent e),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireUndoableEditUpdate
protected void fireUndoableEditUpdate(UndoableEditEvent e)
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is lazily created using the parameters passed into
 the fire method.

Parameters:
e - the event
See Also:
EventListenerList


"
AbstractDocument,getAsynchronousLoadPriority(),int,Gets the asynchronous loading priority.,"

getAsynchronousLoadPriority
public int getAsynchronousLoadPriority()
Gets the asynchronous loading priority.  If less than zero,
 the document should not be loaded asynchronously.

Returns:
the asynchronous loading priority, or -1
   if the document should not be loaded asynchronously


"
AbstractDocument,getAttributeContext(),protected AbstractDocument.AttributeContext,Fetches the context for managing attributes.,"

getAttributeContext
protected final AbstractDocument.AttributeContext getAttributeContext()
Fetches the context for managing attributes.  This
 method effectively establishes the strategy used
 for compressing AttributeSet information.

Returns:
the context


"
AbstractDocument,getBidiRootElement(),Element,Returns the root element of the bidirectional structure for this document.,"

getBidiRootElement
public Element getBidiRootElement()
Returns the root element of the bidirectional structure for this
 document.  Its children represent character runs with a given
 Unicode bidi level.

"
AbstractDocument,getContent(),protected AbstractDocument.Content,Gets the content for the document.,"

getContent
protected final AbstractDocument.Content getContent()
Gets the content for the document.

Returns:
the content


"
AbstractDocument,getCurrentWriter(),protected Thread,Fetches the current writing thread if there is one.,"

getCurrentWriter
protected final Thread getCurrentWriter()
Fetches the current writing thread if there is one.
 This can be used to distinguish whether a method is
 being called as part of an existing modification or
 if a lock needs to be acquired and a new transaction
 started.

Returns:
the thread actively modifying the document
  or null if there are no modifications in progress


"
AbstractDocument,getDefaultRootElement(),abstract Element,Returns the root element that views should be based upon unless some other mechanism for assigning views to element structures is provided.,"

getDefaultRootElement
public abstract Element getDefaultRootElement()
Returns the root element that views should be based upon
 unless some other mechanism for assigning views to element
 structures is provided.

Specified by:
getDefaultRootElement in interface Document
Returns:
the root element
See Also:
Document.getDefaultRootElement()


"
AbstractDocument,getDocumentFilter(),DocumentFilter,Returns the DocumentFilter that is responsible for filtering of insertion/removal.,"

getDocumentFilter
public DocumentFilter getDocumentFilter()
Returns the DocumentFilter that is responsible for
 filtering of insertion/removal. A null return value
 implies no filtering is to occur.

Returns:
the DocumentFilter
Since:
1.4
See Also:
setDocumentFilter(javax.swing.text.DocumentFilter)


"
AbstractDocument,getDocumentListeners(),DocumentListener[],Returns an array of all the document listeners registered on this document.,"

getDocumentListeners
public DocumentListener[] getDocumentListeners()
Returns an array of all the document listeners
 registered on this document.

Returns:
all of this document's DocumentListeners
         or an empty array if no document listeners are
         currently registered
Since:
1.4
See Also:
addDocumentListener(javax.swing.event.DocumentListener), 
removeDocumentListener(javax.swing.event.DocumentListener)


"
AbstractDocument,getDocumentProperties(),"Dictionary<Object,Object>",Supports managing a set of properties.,"

getDocumentProperties
public Dictionary<Object,Object> getDocumentProperties()
Supports managing a set of properties. Callers
 can use the documentProperties dictionary
 to annotate the document with document-wide properties.

Returns:
a non-null Dictionary
See Also:
setDocumentProperties(java.util.Dictionary<java.lang.Object, java.lang.Object>)


"
AbstractDocument,getEndPosition(),Position,Returns a position that represents the end of the document.,"

getEndPosition
public final Position getEndPosition()
Returns a position that represents the end of the document.  The
 position returned can be counted on to track change and stay
 located at the end of the document.

Specified by:
getEndPosition in interface Document
Returns:
the position


"
AbstractDocument,getLength(),int,Returns the length of the data.,"

getLength
public int getLength()
Returns the length of the data.  This is the number of
 characters of content that represents the users data.

Specified by:
getLength in interface Document
Returns:
the length >= 0
See Also:
Document.getLength()


"
AbstractDocument,getListeners(Class<T> listenerType),<T extends EventListener> T[],Returns an array of all the objects currently registered as FooListeners upon this document.,"

getListeners
public <T extends EventListener> T[] getListeners(Class<T> listenerType)
Returns an array of all the objects currently registered
 as FooListeners
 upon this document.
 FooListeners are registered using the
 addFooListener method.

 
 You can specify the listenerType argument
 with a class literal, such as
 FooListener.class.
 For example, you can query a
 document d
 for its document listeners with the following code:

 DocumentListener[] mls = (DocumentListener[])(d.getListeners(DocumentListener.class));

 If no such listeners exist, this method returns an empty array.

Parameters:
listenerType - the type of listeners requested; this parameter
          should specify an interface that descends from
          java.util.EventListener
Returns:
an array of all objects registered as
          FooListeners on this component,
          or an empty array if no such
          listeners have been added
Throws:
ClassCastException - if listenerType
          doesn't specify a class or interface that implements
          java.util.EventListener
Since:
1.3
See Also:
getDocumentListeners(), 
getUndoableEditListeners()


"
AbstractDocument,getParagraphElement(int pos),abstract Element,Get the paragraph element containing the given position.,"

getParagraphElement
public abstract Element getParagraphElement(int pos)
Get the paragraph element containing the given position.  Sub-classes
 must define for themselves what exactly constitutes a paragraph.  They
 should keep in mind however that a paragraph should at least be the
 unit of text over which to run the Unicode bidirectional algorithm.

Parameters:
pos - the starting offset >= 0
Returns:
the element


"
AbstractDocument,getProperty(Object key),Object,A convenience method for looking up a property value.,"

getProperty
public final Object getProperty(Object key)
A convenience method for looking up a property value. It is
 equivalent to:
 
 getDocumentProperties().get(key);
 

Specified by:
getProperty in interface Document
Parameters:
key - the non-null property key
Returns:
the value of this property or null
See Also:
getDocumentProperties()


"
AbstractDocument,getRootElements(),Element[],Gets all root elements defined.,"

getRootElements
public Element[] getRootElements()
Gets all root elements defined.  Typically, there
 will only be one so the default implementation
 is to return the default root element.

Specified by:
getRootElements in interface Document
Returns:
the root element


"
AbstractDocument,getStartPosition(),Position,Returns a position that represents the start of the document.,"

getStartPosition
public final Position getStartPosition()
Returns a position that represents the start of the document.  The
 position returned can be counted on to track change and stay
 located at the beginning of the document.

Specified by:
getStartPosition in interface Document
Returns:
the position


"
AbstractDocument,"getText(int offset, int length)",String,Gets a sequence of text from the document.,"

getText
public String getText(int offset,
                      int length)
               throws BadLocationException
Gets a sequence of text from the document.

Specified by:
getText in interface Document
Parameters:
offset - the starting offset >= 0
length - the number of characters to retrieve >= 0
Returns:
the text
Throws:
BadLocationException - the range given includes a position
   that is not a valid position within the document
See Also:
Document.getText(int, int)


"
AbstractDocument,"getText(int offset, int length, Segment txt)",void,Fetches the text contained within the given portion of the document.,"

getText
public void getText(int offset,
                    int length,
                    Segment txt)
             throws BadLocationException
Fetches the text contained within the given portion
 of the document.
 
 If the partialReturn property on the txt parameter is false, the
 data returned in the Segment will be the entire length requested and
 may or may not be a copy depending upon how the data was stored.
 If the partialReturn property is true, only the amount of text that
 can be returned without creating a copy is returned.  Using partial
 returns will give better performance for situations where large
 parts of the document are being scanned.  The following is an example
 of using the partial return to access the entire document:

 
   int nleft = doc.getDocumentLength();
   Segment text = new Segment();
   int offs = 0;
   text.setPartialReturn(true);
   while (nleft > 0) {
       doc.getText(offs, nleft, text);
       // do something with text
       nleft -= text.count;
       offs += text.count;
   }
 

Specified by:
getText in interface Document
Parameters:
offset - the starting offset >= 0
length - the number of characters to retrieve >= 0
txt - the Segment object to retrieve the text into
Throws:
BadLocationException - the range given includes a position
   that is not a valid position within the document


"
AbstractDocument,getUndoableEditListeners(),UndoableEditListener[],Returns an array of all the undoable edit listeners registered on this document.,"

getUndoableEditListeners
public UndoableEditListener[] getUndoableEditListeners()
Returns an array of all the undoable edit listeners
 registered on this document.

Returns:
all of this document's UndoableEditListeners
         or an empty array if no undoable edit listeners are
         currently registered
Since:
1.4
See Also:
addUndoableEditListener(javax.swing.event.UndoableEditListener), 
removeUndoableEditListener(javax.swing.event.UndoableEditListener)


"
AbstractDocument,"insertString(int offs, String str, AttributeSet a)",void,Inserts some content into the document.,"

insertString
public void insertString(int offs,
                         String str,
                         AttributeSet a)
                  throws BadLocationException
Inserts some content into the document.
 Inserting content causes a write lock to be held while the
 actual changes are taking place, followed by notification
 to the observers on the thread that grabbed the write lock.
 
 This method is thread safe, although most Swing methods
 are not. Please see
 Concurrency
 in Swing for more information.

Specified by:
insertString in interface Document
Parameters:
offs - the starting offset >= 0
str - the string to insert; does nothing with null/empty strings
a - the attributes for the inserted content
Throws:
BadLocationException - the given insert position is not a valid
   position within the document
See Also:
Document.insertString(int, java.lang.String, javax.swing.text.AttributeSet)


"
AbstractDocument,"insertUpdate(AbstractDocument.DefaultDocumentEvent chng, AttributeSet attr)",protected void,Updates document structure as a result of text insertion.,"

insertUpdate
protected void insertUpdate(AbstractDocument.DefaultDocumentEvent chng,
                            AttributeSet attr)
Updates document structure as a result of text insertion.  This
 will happen within a write lock.  If a subclass of
 this class reimplements this method, it should delegate to the
 superclass as well.

Parameters:
chng - a description of the change
attr - the attributes for the change


"
AbstractDocument,postRemoveUpdate(AbstractDocument.DefaultDocumentEvent chng),protected void,Updates any document structure as a result of text removal.,"

postRemoveUpdate
protected void postRemoveUpdate(AbstractDocument.DefaultDocumentEvent chng)
Updates any document structure as a result of text removal.  This
 method is called after the text has been removed from the Content.
 This will happen within a write lock. If a subclass
 of this class reimplements this method, it should delegate to the
 superclass as well.

Parameters:
chng - a description of the change


"
AbstractDocument,"putProperty(Object key, Object value)",void,A convenience method for storing up a property value.,"

putProperty
public final void putProperty(Object key,
                              Object value)
A convenience method for storing up a property value.  It is
 equivalent to:
 
 getDocumentProperties().put(key, value);
 
 If value is null this method will
 remove the property.

Specified by:
putProperty in interface Document
Parameters:
key - the non-null key
value - the property value
See Also:
getDocumentProperties()


"
AbstractDocument,readLock(),void,Acquires a lock to begin reading some state from the document.,"

readLock
public final void readLock()
Acquires a lock to begin reading some state from the
 document.  There can be multiple readers at the same time.
 Writing blocks the readers until notification of the change
 to the listeners has been completed.  This method should
 be used very carefully to avoid unintended compromise
 of the document.  It should always be balanced with a
 readUnlock.

See Also:
readUnlock()


"
AbstractDocument,readUnlock(),void,Does a read unlock.,"

readUnlock
public final void readUnlock()
Does a read unlock.  This signals that one
 of the readers is done.  If there are no more readers
 then writing can begin again.  This should be balanced
 with a readLock, and should occur in a finally statement
 so that the balance is guaranteed.  The following is an
 example.
 
     readLock();
     try {
         // do something
     } finally {
         readUnlock();
     }
 

See Also:
readLock()


"
AbstractDocument,"remove(int offs, int len)",void,Removes some content from the document.,"

remove
public void remove(int offs,
                   int len)
            throws BadLocationException
Removes some content from the document.
 Removing content causes a write lock to be held while the
 actual changes are taking place.  Observers are notified
 of the change on the thread that called this method.
 
 This method is thread safe, although most Swing methods
 are not. Please see
 Concurrency
 in Swing for more information.

Specified by:
remove in interface Document
Parameters:
offs - the starting offset >= 0
len - the number of characters to remove >= 0
Throws:
BadLocationException - the given remove position is not a valid
   position within the document
See Also:
Document.remove(int, int)


"
AbstractDocument,removeDocumentListener(DocumentListener listener),void,Removes a document listener.,"

removeDocumentListener
public void removeDocumentListener(DocumentListener listener)
Removes a document listener.

Specified by:
removeDocumentListener in interface Document
Parameters:
listener - the DocumentListener to remove
See Also:
Document.removeDocumentListener(javax.swing.event.DocumentListener)


"
AbstractDocument,removeUndoableEditListener(UndoableEditListener listener),void,Removes an undo listener.,"

removeUndoableEditListener
public void removeUndoableEditListener(UndoableEditListener listener)
Removes an undo listener.

Specified by:
removeUndoableEditListener in interface Document
Parameters:
listener - the UndoableEditListener to remove
See Also:
Document.removeDocumentListener(javax.swing.event.DocumentListener)


"
AbstractDocument,removeUpdate(AbstractDocument.DefaultDocumentEvent chng),protected void,Updates any document structure as a result of text removal.,"

removeUpdate
protected void removeUpdate(AbstractDocument.DefaultDocumentEvent chng)
Updates any document structure as a result of text removal.  This
 method is called before the text is actually removed from the Content.
 This will happen within a write lock. If a subclass
 of this class reimplements this method, it should delegate to the
 superclass as well.

Parameters:
chng - a description of the change


"
AbstractDocument,render(Runnable r),void,"This allows the model to be safely rendered in the presence of currency, if the model supports being updated asynchronously.","

render
public void render(Runnable r)
This allows the model to be safely rendered in the presence
 of currency, if the model supports being updated asynchronously.
 The given runnable will be executed in a way that allows it
 to safely read the model with no changes while the runnable
 is being executed.  The runnable itself may not
 make any mutations.
 
 This is implemented to acquire a read lock for the duration
 of the runnables execution.  There may be multiple runnables
 executing at the same time, and all writers will be blocked
 while there are active rendering runnables.  If the runnable
 throws an exception, its lock will be safely released.
 There is no protection against a runnable that never exits,
 which will effectively leave the document locked for it's
 lifetime.
 
 If the given runnable attempts to make any mutations in
 this implementation, a deadlock will occur.  There is
 no tracking of individual rendering threads to enable
 detecting this situation, but a subclass could incur
 the overhead of tracking them and throwing an error.
 
 This method is thread safe, although most Swing methods
 are not. Please see
 Concurrency
 in Swing for more information.

Specified by:
render in interface Document
Parameters:
r - the renderer to execute


"
AbstractDocument,"replace(int offset, int length, String text, AttributeSet attrs)",void,"Deletes the region of text from offset to offset + length, and replaces it with text.","

replace
public void replace(int offset,
                    int length,
                    String text,
                    AttributeSet attrs)
             throws BadLocationException
Deletes the region of text from offset to
 offset + length, and replaces it with text.
 It is up to the implementation as to how this is implemented, some
 implementations may treat this as two distinct operations: a remove
 followed by an insert, others may treat the replace as one atomic
 operation.

Parameters:
offset - index of child element
length - length of text to delete, may be 0 indicating don't
               delete anything
text - text to insert, null indicates no text to insert
attrs - AttributeSet indicating attributes of inserted text,
              null
              is legal, and typically treated as an empty attributeset,
              but exact interpretation is left to the subclass
Throws:
BadLocationException - the given position is not a valid
            position within the document
Since:
1.4


"
AbstractDocument,setAsynchronousLoadPriority(int p),void,Sets the asynchronous loading priority.,"

setAsynchronousLoadPriority
public void setAsynchronousLoadPriority(int p)
Sets the asynchronous loading priority.

Parameters:
p - the new asynchronous loading priority; a value
   less than zero indicates that the document should not be
   loaded asynchronously


"
AbstractDocument,setDocumentFilter(DocumentFilter filter),void,Sets the DocumentFilter.,"

setDocumentFilter
public void setDocumentFilter(DocumentFilter filter)
Sets the DocumentFilter. The DocumentFilter
 is passed insert and remove to conditionally
 allow inserting/deleting of the text.  A null value
 indicates that no filtering will occur.

Parameters:
filter - the DocumentFilter used to constrain text
Since:
1.4
See Also:
getDocumentFilter()


"
AbstractDocument,"setDocumentProperties(Dictionary<Object,Object> x)",void,Replaces the document properties dictionary for this document.,"

setDocumentProperties
public void setDocumentProperties(Dictionary<Object,Object> x)
Replaces the document properties dictionary for this document.

Parameters:
x - the new dictionary
See Also:
getDocumentProperties()


"
AbstractDocument,writeLock(),protected void,Acquires a lock to begin mutating the document this lock protects.,"

writeLock
protected final void writeLock()
Acquires a lock to begin mutating the document this lock
 protects.  There can be no writing, notification of changes, or
 reading going on in order to gain the lock.  Additionally a thread is
 allowed to gain more than one writeLock,
 as long as it doesn't attempt to gain additional writeLocks
 from within document notification.  Attempting to gain a
 writeLock from within a DocumentListener notification will
 result in an IllegalStateException.  The ability
 to obtain more than one writeLock per thread allows
 subclasses to gain a writeLock, perform a number of operations, then
 release the lock.
 
 Calls to writeLock
 must be balanced with calls to writeUnlock, else the
 Document will be left in a locked state so that no
 reading or writing can be done.

Throws:
IllegalStateException - thrown on illegal lock
  attempt.  If the document is implemented properly, this can
  only happen if a document listener attempts to mutate the
  document.  This situation violates the bean event model
  where order of delivery is not guaranteed and all listeners
  should be notified before further mutations are allowed.


"
AbstractDocument,writeUnlock(),protected void,Releases a write lock previously obtained via writeLock.,"

writeUnlock
protected final void writeUnlock()
Releases a write lock previously obtained via writeLock.
 After decrementing the lock count if there are no outstanding locks
 this will allow a new writer, or readers.

See Also:
writeLock()


"
AbstractDocument.ElementEdit,getChildrenAdded(),Element[],Gets a list of children that were added.,"

getChildrenAdded
public Element[] getChildrenAdded()
Gets a list of children that were added.

Specified by:
getChildrenAdded in interface DocumentEvent.ElementChange
Returns:
the list


"
AbstractDocument.ElementEdit,getChildrenRemoved(),Element[],Gets a list of children that were removed.,"

getChildrenRemoved
public Element[] getChildrenRemoved()
Gets a list of children that were removed.

Specified by:
getChildrenRemoved in interface DocumentEvent.ElementChange
Returns:
the list


"
AbstractDocument.ElementEdit,getElement(),Element,Returns the underlying element.,"

getElement
public Element getElement()
Returns the underlying element.

Specified by:
getElement in interface DocumentEvent.ElementChange
Returns:
the element


"
AbstractDocument.ElementEdit,getIndex(),int,Returns the index into the list of elements.,"

getIndex
public int getIndex()
Returns the index into the list of elements.

Specified by:
getIndex in interface DocumentEvent.ElementChange
Returns:
the index >= 0


"
AbstractDocument.ElementEdit,redo(),void,Redoes a change.,"

redo
public void redo()
          throws CannotRedoException
Redoes a change.

Specified by:
redo in interface UndoableEdit
Overrides:
redo in class AbstractUndoableEdit
Throws:
CannotRedoException - if the change cannot be redone
See Also:
AbstractUndoableEdit.canRedo()


"
AbstractDocument.ElementEdit,undo(),void,Undoes a change.,"

undo
public void undo()
          throws CannotUndoException
Undoes a change.

Specified by:
undo in interface UndoableEdit
Overrides:
undo in class AbstractUndoableEdit
Throws:
CannotUndoException - if the change cannot be undone
See Also:
AbstractUndoableEdit.canUndo()


"
AbstractWriter,decrIndent(),protected void,Decrements the indent level.,"

decrIndent
protected void decrIndent()
Decrements the indent level.

"
AbstractWriter,getCanWrapLines(),protected boolean,Returns whether or not the lines can be wrapped.,"

getCanWrapLines
protected boolean getCanWrapLines()
Returns whether or not the lines can be wrapped. If this is false
 no lineSeparator's will be output.

Since:
1.3


"
AbstractWriter,getCurrentLineLength(),protected int,Returns the current line length.,"

getCurrentLineLength
protected int getCurrentLineLength()
Returns the current line length.

Since:
1.3


"
AbstractWriter,getDocument(),protected Document,Fetches the document.,"

getDocument
protected Document getDocument()
Fetches the document.

Returns:
the Document.


"
AbstractWriter,getElementIterator(),protected ElementIterator,Fetches the ElementIterator.,"

getElementIterator
protected ElementIterator getElementIterator()
Fetches the ElementIterator.

Returns:
the ElementIterator.


"
AbstractWriter,getEndOffset(),int,Returns the last offset to be output.,"

getEndOffset
public int getEndOffset()
Returns the last offset to be output.

Since:
1.3


"
AbstractWriter,getIndentLevel(),protected int,Returns the current indentation level.,"

getIndentLevel
protected int getIndentLevel()
Returns the current indentation level. That is, the number of times
 incrIndent has been invoked minus the number of times
 decrIndent has been invoked.

Since:
1.3


"
AbstractWriter,getIndentSpace(),protected int,Returns the amount of space to indent.,"

getIndentSpace
protected int getIndentSpace()
Returns the amount of space to indent.

Since:
1.3


"
AbstractWriter,getLineLength(),protected int,Returns the maximum line length.,"

getLineLength
protected int getLineLength()
Returns the maximum line length.

Since:
1.3


"
AbstractWriter,getLineSeparator(),String,Returns the string used to represent newlines.,"

getLineSeparator
public String getLineSeparator()
Returns the string used to represent newlines.

Since:
1.3


"
AbstractWriter,getStartOffset(),int,Returns the first offset to be output.,"

getStartOffset
public int getStartOffset()
Returns the first offset to be output.

Since:
1.3


"
AbstractWriter,getText(Element elem),protected String,Returns the text associated with the element.,"

getText
protected String getText(Element elem)
                  throws BadLocationException
Returns the text associated with the element.
 The assumption here is that the element is a
 leaf element.  Throws a BadLocationException
 when encountered.

Parameters:
elem - an Element
Returns:
the text as a String
Throws:
BadLocationException - if pos represents an invalid
            location within the document


"
AbstractWriter,getWriter(),protected Writer,Returns the Writer that is used to output the content.,"

getWriter
protected Writer getWriter()
Returns the Writer that is used to output the content.

Since:
1.3


"
AbstractWriter,incrIndent(),protected void,Increments the indent level.,"

incrIndent
protected void incrIndent()
Increments the indent level. If indenting would cause
 getIndentSpace() *getIndentLevel() to be >
 than getLineLength() this will not cause an indent.

"
AbstractWriter,indent(),protected void,Does indentation.,"

indent
protected void indent()
               throws IOException
Does indentation. The number of spaces written
 out is indent level times the space to map mapping. If the current
 line is empty, this will not make it so that the current line is
 still considered empty.

Throws:
IOException - on any I/O error


"
AbstractWriter,inRange(Element next),protected boolean,This method determines whether the current element is in the range specified.,"

inRange
protected boolean inRange(Element next)
This method determines whether the current element
 is in the range specified.  When no range is specified,
 the range is initialized to be the entire document.
 inRange() returns true if the range specified intersects
 with the element's range.

Parameters:
next - an Element.
Returns:
boolean that indicates whether the element
         is in the range.


"
AbstractWriter,isLineEmpty(),protected boolean,Returns true if the current line should be considered empty.,"

isLineEmpty
protected boolean isLineEmpty()
Returns true if the current line should be considered empty. This
 is true when getCurrentLineLength == 0 ||
 indent has been invoked on an empty line.

Since:
1.3


"
AbstractWriter,"output(char[] content, int start, int length)",protected void,The last stop in writing out content.,"

output
protected void output(char[] content,
                      int start,
                      int length)
               throws IOException
The last stop in writing out content. All the write methods eventually
 make it to this method, which invokes write on the
 Writer.
 This method also updates the line length based on
 length. If this is invoked to output a newline, the
 current line length will need to be reset as will no longer be
 valid. If it is up to the caller to do this. Use
 writeLineSeparator to write out a newline, which will
 property update the current line length.

Throws:
IOException
Since:
1.3


"
AbstractWriter,setCanWrapLines(boolean newValue),protected void,Sets whether or not lines can be wrapped.,"

setCanWrapLines
protected void setCanWrapLines(boolean newValue)
Sets whether or not lines can be wrapped. This can be toggled
 during the writing of lines. For example, outputting HTML might
 set this to false when outputting a quoted string.

Since:
1.3


"
AbstractWriter,setCurrentLineLength(int length),protected void,Sets the current line length.,"

setCurrentLineLength
protected void setCurrentLineLength(int length)
Sets the current line length.

Since:
1.3


"
AbstractWriter,setIndentSpace(int space),protected void,Enables subclasses to specify how many spaces an indent maps to.,"

setIndentSpace
protected void setIndentSpace(int space)
Enables subclasses to specify how many spaces an indent
 maps to. When indentation takes place, the indent level
 is multiplied by this mapping.  The default is 2.

Parameters:
space - an int representing the space to indent mapping.


"
AbstractWriter,setLineLength(int l),protected void,Enables subclasses to set the number of characters they want written per line.,"

setLineLength
protected void setLineLength(int l)
Enables subclasses to set the number of characters they
 want written per line.   The default is 100.

Parameters:
l - the maximum line length.


"
AbstractWriter,setLineSeparator(String value),void,Sets the String used to represent newlines.,"

setLineSeparator
public void setLineSeparator(String value)
Sets the String used to represent newlines. This is initialized
 in the constructor from either the Document, or the System property
 line.separator.

Since:
1.3


"
AbstractWriter,text(Element elem),protected void,Writes out text.,"

text
protected void text(Element elem)
             throws BadLocationException,
                    IOException
Writes out text.  If a range is specified when the constructor
 is invoked, then only the appropriate range of text is written
 out.

Parameters:
elem - an Element.
Throws:
IOException - on any I/O error
BadLocationException - if pos represents an invalid
            location within the document.


"
AbstractWriter,write(),protected abstract void,This abstract method needs to be implemented by subclasses.,"

write
protected abstract void write()
                       throws IOException,
                              BadLocationException
This abstract method needs to be implemented
 by subclasses.  Its responsibility is to
 iterate over the elements and use the write()
 methods to generate output in the desired format.

Throws:
IOException
BadLocationException


"
AbstractWriter,write(char ch),protected void,Writes out a character.,"

write
protected void write(char ch)
              throws IOException
Writes out a character. This is implemented to invoke
 the write method that takes a char[].

Parameters:
ch - a char.
Throws:
IOException - on any I/O error


"
AbstractWriter,"write(char[] chars, int startIndex, int length)",protected void,All write methods call into this one.,"

write
protected void write(char[] chars,
                     int startIndex,
                     int length)
              throws IOException
All write methods call into this one. If getCanWrapLines()
 returns false, this will call output with each sequence
 of chars that doesn't contain a NEWLINE, followed
 by a call to writeLineSeparator. On the other hand,
 if getCanWrapLines() returns true, this will split the
 string, as necessary, so getLineLength is honored.
 The only exception is if the current string contains no whitespace,
 and won't fit in which case the line length will exceed
 getLineLength.

Throws:
IOException
Since:
1.3


"
AbstractWriter,write(String content),protected void,Writes out a string.,"

write
protected void write(String content)
              throws IOException
Writes out a string. This is implemented to invoke the
 write method that takes a char[].

Parameters:
content - a String.
Throws:
IOException - on any I/O error


"
AbstractWriter,writeAttributes(AttributeSet attr),protected void,"Writes out the set of attributes as "" <name>=<value>"" pairs.","

writeAttributes
protected void writeAttributes(AttributeSet attr)
                        throws IOException
Writes out the set of attributes as "" <name>=<value>""
 pairs. It throws an IOException when encountered.

Parameters:
attr - an AttributeSet.
Throws:
IOException - on any I/O error


"
AbstractWriter,writeLineSeparator(),protected void,Writes the line separator.,"

writeLineSeparator
protected void writeLineSeparator()
                           throws IOException
Writes the line separator. This invokes output directly
 as well as setting the lineLength to 0.

Throws:
IOException
Since:
1.3


"
AsyncBoxView,createChildState(View v),protected AsyncBoxView.ChildState,New ChildState records are created through this method to allow subclasses the extend the ChildState records to do/hold more,"

createChildState
protected AsyncBoxView.ChildState createChildState(View v)
New ChildState records are created through
 this method to allow subclasses the extend
 the ChildState records to do/hold more

"
AsyncBoxView,flushRequirementChanges(),protected void,Publish the changes in preferences upward to the parent view.,"

flushRequirementChanges
protected void flushRequirementChanges()
Publish the changes in preferences upward to the parent
 view.  This is normally called by the layout thread.

"
AsyncBoxView,getBottomInset(),float,Get the bottom part of the margin around the view.,"

getBottomInset
public float getBottomInset()
Get the bottom part of the margin around the view.

"
AsyncBoxView,"getChildAllocation(int index, Shape a)",Shape,Fetches the allocation for the given child view.,"

getChildAllocation
public Shape getChildAllocation(int index,
                                Shape a)
Fetches the allocation for the given child view.
 This enables finding out where various views
 are located, without assuming the views store
 their location.  This returns null since the
 default is to not have any child views.

Overrides:
getChildAllocation in class View
Parameters:
index - the index of the child, >= 0 && < getViewCount()
a - the allocation to this view.
Returns:
the allocation to the child


"
AsyncBoxView,getChildState(int index),protected AsyncBoxView.ChildState,Fetch the object representing the layout state of of the child at the given index.,"

getChildState
protected AsyncBoxView.ChildState getChildState(int index)
Fetch the object representing the layout state of
 of the child at the given index.

Parameters:
index - the child index.  This should be a
   value >= 0 and < getViewCount().


"
AsyncBoxView,getEstimatedMajorSpan(),protected boolean,Is the major span currently estimated?,"

getEstimatedMajorSpan
protected boolean getEstimatedMajorSpan()
Is the major span currently estimated?

Since:
1.4


"
AsyncBoxView,getInsetSpan(int axis),protected float,Fetch the span along an axis that is taken up by the insets.,"

getInsetSpan
protected float getInsetSpan(int axis)
Fetch the span along an axis that is taken up by the insets.

Parameters:
axis - the axis to determine the total insets along,
  either X_AXIS or Y_AXIS.
Since:
1.4


"
AsyncBoxView,getLayoutQueue(),protected LayoutQueue,Fetch the queue to use for layout.,"

getLayoutQueue
protected LayoutQueue getLayoutQueue()
Fetch the queue to use for layout.

"
AsyncBoxView,getLeftInset(),float,Get the left part of the margin around the view.,"

getLeftInset
public float getLeftInset()
Get the left part of the margin around the view.

"
AsyncBoxView,getMajorAxis(),int,Fetch the major axis (the axis the children are tiled along).,"

getMajorAxis
public int getMajorAxis()
Fetch the major axis (the axis the children
 are tiled along).  This will have a value of
 either X_AXIS or Y_AXIS.

"
AsyncBoxView,getMaximumSpan(int axis),float,Determines the maximum span for this view along an axis.,"

getMaximumSpan
public float getMaximumSpan(int axis)
Determines the maximum span for this view along an
 axis.

Overrides:
getMaximumSpan in class View
Parameters:
axis - may be either View.X_AXIS or View.Y_AXIS
Returns:
the span the view would like to be rendered into >= 0.
           Typically the view is told to render into the span
           that is returned, although there is no guarantee.
           The parent may choose to resize or break the view.
Throws:
IllegalArgumentException - for an invalid axis type
See Also:
View.getPreferredSpan(int)


"
AsyncBoxView,getMinimumSpan(int axis),float,Determines the minimum span for this view along an axis.,"

getMinimumSpan
public float getMinimumSpan(int axis)
Determines the minimum span for this view along an
 axis.

Overrides:
getMinimumSpan in class View
Parameters:
axis - may be either View.X_AXIS or View.Y_AXIS
Returns:
the span the view would like to be rendered into >= 0.
           Typically the view is told to render into the span
           that is returned, although there is no guarantee.
           The parent may choose to resize or break the view.
Throws:
IllegalArgumentException - for an invalid axis type
See Also:
View.getPreferredSpan(int)


"
AsyncBoxView,getMinorAxis(),int,Fetch the minor axis (the axis orthogonal to the tiled axis).,"

getMinorAxis
public int getMinorAxis()
Fetch the minor axis (the axis orthogonal
 to the tiled axis).  This will have a value of
 either X_AXIS or Y_AXIS.

"
AsyncBoxView,"getNextVisualPositionFrom(int pos, Position.Bias b, Shape a, int direction, Position.Bias[] biasRet)",int,Provides a way to determine the next visually represented model location that one might place a caret.,"

getNextVisualPositionFrom
public int getNextVisualPositionFrom(int pos,
                                     Position.Bias b,
                                     Shape a,
                                     int direction,
                                     Position.Bias[] biasRet)
                              throws BadLocationException
Provides a way to determine the next visually represented model
 location that one might place a caret.  Some views may not be visible,
 they might not be in the same order found in the model, or they just
 might not allow access to some of the locations in the model.
 This method enables specifying a position to convert
 within the range of >=0.  If the value is -1, a position
 will be calculated automatically.  If the value < -1,
 the BadLocationException will be thrown.

Overrides:
getNextVisualPositionFrom in class View
Parameters:
pos - the position to convert
a - the allocated region to render into
direction - the direction from the current position that can
  be thought of as the arrow keys typically found on a keyboard;
  this may be one of the following:
  
SwingConstants.WEST
SwingConstants.EAST
SwingConstants.NORTH
SwingConstants.SOUTH

biasRet - an array contain the bias that was checked
Returns:
the location within the model that best represents the next
  location visual position
Throws:
BadLocationException - the given position is not a valid
                                 position within the document
IllegalArgumentException - if direction is invalid


"
AsyncBoxView,getPreferredSpan(int axis),float,Determines the preferred span for this view along an axis.,"

getPreferredSpan
public float getPreferredSpan(int axis)
Determines the preferred span for this view along an
 axis.

Specified by:
getPreferredSpan in class View
Parameters:
axis - may be either View.X_AXIS or View.Y_AXIS
Returns:
the span the view would like to be rendered into >= 0.
           Typically the view is told to render into the span
           that is returned, although there is no guarantee.
           The parent may choose to resize or break the view.
Throws:
IllegalArgumentException - for an invalid axis type
See Also:
View.getPreferredSpan(int)


"
AsyncBoxView,getRightInset(),float,Get the right part of the margin around the view.,"

getRightInset
public float getRightInset()
Get the right part of the margin around the view.

"
AsyncBoxView,getTopInset(),float,Get the top part of the margin around the view.,"

getTopInset
public float getTopInset()
Get the top part of the margin around the view.

"
AsyncBoxView,getView(int n),View,Gets the nth child view.,"

getView
public View getView(int n)
Gets the nth child view.  Since there are no
 children by default, this returns null.

Overrides:
getView in class View
Parameters:
n - the number of the view to get, >= 0 && < getViewCount()
Returns:
the view


"
AsyncBoxView,getViewCount(),int,Returns the number of views in this view.,"

getViewCount
public int getViewCount()
Returns the number of views in this view.  Since
 the default is to not be a composite view this
 returns 0.

Overrides:
getViewCount in class View
Returns:
the number of views >= 0
See Also:
View.getViewCount()


"
AsyncBoxView,"getViewIndex(int pos, Position.Bias b)",int,Returns the child view index representing the given position in the model.,"

getViewIndex
public int getViewIndex(int pos,
                        Position.Bias b)
Returns the child view index representing the given position in
 the model.  By default a view has no children so this is implemented
 to return -1 to indicate there is no valid child index for any
 position.

Overrides:
getViewIndex in class View
Parameters:
pos - the position >= 0
Returns:
index of the view representing the given position, or
   -1 if no view represents that position
Since:
1.3


"
AsyncBoxView,"getViewIndexAtPosition(int pos, Position.Bias b)",protected int,Fetches the child view index representing the given position in the model.,"

getViewIndexAtPosition
protected int getViewIndexAtPosition(int pos,
                                     Position.Bias b)
Fetches the child view index representing the given position in
 the model.  This is implemented to fetch the view in the case
 where there is a child view for each child element.

Parameters:
pos - the position >= 0
Returns:
index of the view representing the given position, or
   -1 if no view represents that position


"
AsyncBoxView,loadChildren(ViewFactory f),protected void,Loads all of the children to initialize the view.,"

loadChildren
protected void loadChildren(ViewFactory f)
Loads all of the children to initialize the view.
 This is called by the setParent
 method.  Subclasses can reimplement this to initialize
 their child views in a different manner.  The default
 implementation creates a child view for each
 child element.
 
 Normally a write-lock is held on the Document while
 the children are being changed, which keeps the rendering
 and layout threads safe.  The exception to this is when
 the view is initialized to represent an existing element
 (via this method), so it is synchronized to exclude
 preferenceChanged while we are initializing.

Parameters:
f - the view factory
See Also:
setParent(javax.swing.text.View)


"
AsyncBoxView,"majorRequirementChange(AsyncBoxView.ChildState cs, float delta)",protected void,Requirements changed along the major axis.,"

majorRequirementChange
protected void majorRequirementChange(AsyncBoxView.ChildState cs,
                                      float delta)
Requirements changed along the major axis.
 This is called by the thread doing layout for
 the given ChildState object when it has completed
 fetching the child views new preferences.
 Typically this would be the layout thread, but
 might be the event thread if it is trying to update
 something immediately (such as to perform a
 model/view translation).
 
 This is implemented to mark the major axis as having
 changed so that a future check to see if the requirements
 need to be published to the parent view will consider
 the major axis.  If the span along the major axis is
 not estimated, it is updated by the given delta to reflect
 the incremental change.  The delta is ignored if the
 major span is estimated.

"
AsyncBoxView,minorRequirementChange(AsyncBoxView.ChildState cs),protected void,Requirements changed along the minor axis.,"

minorRequirementChange
protected void minorRequirementChange(AsyncBoxView.ChildState cs)
Requirements changed along the minor axis.
 This is called by the thread doing layout for
 the given ChildState object when it has completed
 fetching the child views new preferences.
 Typically this would be the layout thread, but
 might be the GUI thread if it is trying to update
 something immediately (such as to perform a
 model/view translation).

"
AsyncBoxView,"modelToView(int pos, Shape a, Position.Bias b)",Shape,Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.,"

modelToView
public Shape modelToView(int pos,
                         Shape a,
                         Position.Bias b)
                  throws BadLocationException
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.

Specified by:
modelToView in class View
Parameters:
pos - the position to convert >= 0
a - the allocated region to render into
b - the bias toward the previous character or the
  next character represented by the offset, in case the
  position is a boundary of two views.
Returns:
the bounding box of the given position is returned
Throws:
BadLocationException - if the given position does
   not represent a valid location in the associated document
IllegalArgumentException - for an invalid bias argument
See Also:
View.viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[])


"
AsyncBoxView,"paint(Graphics g, Shape alloc)",void,Render the view using the given allocation and rendering surface.,"

paint
public void paint(Graphics g,
                  Shape alloc)
Render the view using the given allocation and
 rendering surface.
 
 This is implemented to determine whether or not the
 desired region to be rendered (i.e. the unclipped
 area) is up to date or not.  If up-to-date the children
 are rendered.  If not up-to-date, a task to build
 the desired area is placed on the layout queue as
 a high priority task.  This keeps by event thread
 moving by rendering if ready, and postponing until
 a later time if not ready (since paint requests
 can be rescheduled).

Specified by:
paint in class View
Parameters:
g - the rendering surface to use
alloc - the allocated region to render into
See Also:
View.paint(java.awt.Graphics, java.awt.Shape)


"
AsyncBoxView,"preferenceChanged(View child, boolean width, boolean height)",void,Child views can call this on the parent to indicate that the preference has changed and should be reconsidered for layout.,"

preferenceChanged
public void preferenceChanged(View child,
                              boolean width,
                              boolean height)
Child views can call this on the parent to indicate that
 the preference has changed and should be reconsidered
 for layout.  This is reimplemented to queue new work
 on the layout thread.  This method gets messaged from
 multiple threads via the children.

Overrides:
preferenceChanged in class View
Parameters:
child - the child view
width - true if the width preference has changed
height - true if the height preference has changed
See Also:
JComponent.revalidate()


"
AsyncBoxView,"replace(int offset, int length, View[] views)",void,"Calls the superclass to update the child views, and updates the status records for the children.","

replace
public void replace(int offset,
                    int length,
                    View[] views)
Calls the superclass to update the child views, and
 updates the status records for the children.  This
 is expected to be called while a write lock is held
 on the model so that interaction with the layout
 thread will not happen (i.e. the layout thread
 acquires a read lock before doing anything).

Overrides:
replace in class View
Parameters:
offset - the starting offset into the child views >= 0
length - the number of existing views to replace >= 0
views - the child views to insert


"
AsyncBoxView,setBottomInset(float i),void,Set the bottom part of the margin around the view.,"

setBottomInset
public void setBottomInset(float i)
Set the bottom part of the margin around the view.

Parameters:
i - the value of the inset


"
AsyncBoxView,setEstimatedMajorSpan(boolean isEstimated),protected void,Set the estimatedMajorSpan property that determines if the major span should be treated as being estimated.,"

setEstimatedMajorSpan
protected void setEstimatedMajorSpan(boolean isEstimated)
Set the estimatedMajorSpan property that determines if the
 major span should be treated as being estimated.  If this
 property is true, the value of setSize along the major axis
 will change the requirements along the major axis and incremental
 changes will be ignored until all of the children have been updated
 (which will cause the property to automatically be set to false).
 If the property is false the value of the majorSpan will be
 considered to be accurate and incremental changes will be
 added into the total as they are calculated.

Since:
1.4


"
AsyncBoxView,setLeftInset(float i),void,Set the left part of the margin around the view.,"

setLeftInset
public void setLeftInset(float i)
Set the left part of the margin around the view.

Parameters:
i - the value of the inset


"
AsyncBoxView,setParent(View parent),void,Sets the parent of the view.,"

setParent
public void setParent(View parent)
Sets the parent of the view.
 This is reimplemented to provide the superclass
 behavior as well as calling the loadChildren
 method if this view does not already have children.
 The children should not be loaded in the
 constructor because the act of setting the parent
 may cause them to try to search up the hierarchy
 (to get the hosting Container for example).
 If this view has children (the view is being moved
 from one place in the view hierarchy to another),
 the loadChildren method will not be called.

Overrides:
setParent in class View
Parameters:
parent - the parent of the view, null if none


"
AsyncBoxView,setRightInset(float i),void,Set the right part of the margin around the view.,"

setRightInset
public void setRightInset(float i)
Set the right part of the margin around the view.

Parameters:
i - the value of the inset


"
AsyncBoxView,"setSize(float width, float height)",void,Sets the size of the view.,"

setSize
public void setSize(float width,
                    float height)
Sets the size of the view.  This should cause
 layout of the view if the view caches any layout
 information.
 
 Since the major axis is updated asynchronously and should be
 the sum of the tiled children the call is ignored for the major
 axis.  Since the minor axis is flexible, work is queued to resize
 the children if the minor span changes.

Overrides:
setSize in class View
Parameters:
width - the width >= 0
height - the height >= 0


"
AsyncBoxView,setTopInset(float i),void,Set the top part of the margin around the view.,"

setTopInset
public void setTopInset(float i)
Set the top part of the margin around the view.

Parameters:
i - the value of the inset


"
AsyncBoxView,"updateLayout(DocumentEvent.ElementChange ec, DocumentEvent e, Shape a)",protected void,Update the layout in response to receiving notification of change from the model.,"

updateLayout
protected void updateLayout(DocumentEvent.ElementChange ec,
                            DocumentEvent e,
                            Shape a)
Update the layout in response to receiving notification of
 change from the model.  This is implemented to note the
 change on the ChildLocator so that offsets of the children
 will be correctly computed.

Overrides:
updateLayout in class View
Parameters:
ec - changes to the element this view is responsible
  for (may be null if there were no changes).
e - the change information from the associated document
a - the current allocation of the view
See Also:
View.insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory), 
View.removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory), 
View.changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
AsyncBoxView,"viewToModel(float x, float y, Shape a, Position.Bias[] biasReturn)",int,Provides a mapping from the view coordinate space to the logical coordinate space of the model.,"

viewToModel
public int viewToModel(float x,
                       float y,
                       Shape a,
                       Position.Bias[] biasReturn)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.  The biasReturn argument will be
 filled in to indicate that the point given is closer to the next
 character in the model or the previous character in the model.
 
 This is expected to be called by the GUI thread, holding a
 read-lock on the associated model.  It is implemented to
 locate the child view and determine it's allocation with a
 lock on the ChildLocator object, and to call viewToModel
 on the child view with a lock on the ChildState object
 to avoid interaction with the layout thread.

Specified by:
viewToModel in class View
Parameters:
x - the X coordinate >= 0
y - the Y coordinate >= 0
a - the allocated region to render into
Returns:
the location within the model that best represents the
  given point in the view >= 0.  The biasReturn argument will be
 filled in to indicate that the point given is closer to the next
 character in the model or the previous character in the model.


"
BoxView,"baselineLayout(int targetSpan, int axis, int[] offsets, int[] spans)",protected void,"Computes the location and extent of each child view in this BoxView given the targetSpan, which is the width (or height) of the region we have to work with.","

baselineLayout
protected void baselineLayout(int targetSpan,
                              int axis,
                              int[] offsets,
                              int[] spans)
Computes the location and extent of each child view
 in this BoxView given the targetSpan,
 which is the width (or height) of the region we have to
 work with.

Parameters:
targetSpan - the total span given to the view, which
  would be used to layout the children
axis - the axis being studied, either
          View.X_AXIS or View.Y_AXIS
offsets - an empty array filled by this method with
          values specifying the location  of each child view
spans - an empty array filled by this method with
          values specifying the extent of each child view


"
BoxView,"baselineRequirements(int axis, SizeRequirements r)",protected SizeRequirements,Calculates the size requirements for this BoxView by examining the size of each child view.,"

baselineRequirements
protected SizeRequirements baselineRequirements(int axis,
                                                SizeRequirements r)
Calculates the size requirements for this BoxView
 by examining the size of each child view.

Parameters:
axis - the axis being studied
r - the SizeRequirements object;
          if null one will be created
Returns:
the newly initialized SizeRequirements object


"
BoxView,"calculateMajorAxisRequirements(int axis, SizeRequirements r)",protected SizeRequirements,Calculates the size requirements for the major axis axis.,"

calculateMajorAxisRequirements
protected SizeRequirements calculateMajorAxisRequirements(int axis,
                                                          SizeRequirements r)
Calculates the size requirements for the major axis
 axis.

Parameters:
axis - the axis being studied
r - the SizeRequirements object;
          if null one will be created
Returns:
the newly initialized SizeRequirements object
See Also:
SizeRequirements


"
BoxView,"calculateMinorAxisRequirements(int axis, SizeRequirements r)",protected SizeRequirements,Calculates the size requirements for the minor axis axis.,"

calculateMinorAxisRequirements
protected SizeRequirements calculateMinorAxisRequirements(int axis,
                                                          SizeRequirements r)
Calculates the size requirements for the minor axis
 axis.

Parameters:
axis - the axis being studied
r - the SizeRequirements object;
          if null one will be created
Returns:
the newly initialized SizeRequirements object
See Also:
SizeRequirements


"
BoxView,"childAllocation(int index, Rectangle alloc)",protected void,Allocates a region for a child view.,"

childAllocation
protected void childAllocation(int index,
                               Rectangle alloc)
Allocates a region for a child view.

Specified by:
childAllocation in class CompositeView
Parameters:
index - the index of the child view to
   allocate, >= 0 && < getViewCount()
alloc - the allocated region


"
BoxView,"flipEastAndWestAtEnds(int position, Position.Bias bias)",protected boolean,Determines in which direction the next view lays.,"

flipEastAndWestAtEnds
protected boolean flipEastAndWestAtEnds(int position,
                                        Position.Bias bias)
Determines in which direction the next view lays.
 Consider the View at index n. Typically the Views
 are layed out from left to right, so that the View
 to the EAST will be at index n + 1, and the View
 to the WEST will be at index n - 1. In certain situations,
 such as with bidirectional text, it is possible
 that the View to EAST is not at index n + 1,
 but rather at index n - 1, or that the View
 to the WEST is not at index n - 1, but index n + 1.
 In this case this method would return true,
 indicating the Views are layed out in
 descending order. Otherwise the method would return false
 indicating the Views are layed out in ascending order.
 
 If the receiver is laying its Views along the
 Y_AXIS, this will will return the value from
 invoking the same method on the View
 responsible for rendering position and
 bias. Otherwise this will return false.

Overrides:
flipEastAndWestAtEnds in class CompositeView
Parameters:
position - position into the model
bias - either Position.Bias.Forward or
          Position.Bias.Backward
Returns:
true if the Views surrounding the
          View responding for rendering
          position and bias
          are layed out in descending order; otherwise false


"
BoxView,"forwardUpdate(DocumentEvent.ElementChange ec, DocumentEvent e, Shape a, ViewFactory f)",protected void,Forwards the given DocumentEvent to the child views that need to be notified of the change to the model.,"

forwardUpdate
protected void forwardUpdate(DocumentEvent.ElementChange ec,
                             DocumentEvent e,
                             Shape a,
                             ViewFactory f)
Forwards the given DocumentEvent to the child views
 that need to be notified of the change to the model.
 If a child changed its requirements and the allocation
 was valid prior to forwarding the portion of the box
 from the starting child to the end of the box will
 be repainted.

Overrides:
forwardUpdate in class View
Parameters:
ec - changes to the element this view is responsible
  for (may be null if there were no changes)
e - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
Since:
1.3
See Also:
View.insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory), 
View.removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory), 
View.changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
BoxView,getAlignment(int axis),float,Determines the desired alignment for this view along an axis.,"

getAlignment
public float getAlignment(int axis)
Determines the desired alignment for this view along an
 axis.  This is implemented to give the total alignment
 needed to position the children with the alignment points
 lined up along the axis orthogonal to the axis that is
 being tiled.  The axis being tiled will request to be
 centered (i.e. 0.5f).

Overrides:
getAlignment in class View
Parameters:
axis - may be either View.X_AXIS
   or View.Y_AXIS
Returns:
the desired alignment >= 0.0f && <= 1.0f; this should
   be a value between 0.0 and 1.0 where 0 indicates alignment at the
   origin and 1.0 indicates alignment to the full span
   away from the origin; an alignment of 0.5 would be the
   center of the view
Throws:
IllegalArgumentException - for an invalid axis


"
BoxView,getAxis(),int,Fetches the tile axis property.,"

getAxis
public int getAxis()
Fetches the tile axis property.  This is the axis along which
 the child views are tiled.

Returns:
the major axis of the box, either
  View.X_AXIS or View.Y_AXIS
Since:
1.3


"
BoxView,"getChildAllocation(int index, Shape a)",Shape,Fetches the allocation for the given child view.,"

getChildAllocation
public Shape getChildAllocation(int index,
                                Shape a)
Fetches the allocation for the given child view.
 This enables finding out where various views
 are located.  This is implemented to return
 null if the layout is invalid,
 otherwise the superclass behavior is executed.

Overrides:
getChildAllocation in class CompositeView
Parameters:
index - the index of the child, >= 0 && > getViewCount()
a - the allocation to this view
Returns:
the allocation to the child; or null
          if a is null;
          or null if the layout is invalid


"
BoxView,getHeight(),int,Returns the current height of the box.,"

getHeight
public int getHeight()
Returns the current height of the box.  This is the height that
 it was last allocated.

Returns:
the current height of the box


"
BoxView,getMaximumSpan(int axis),float,Determines the maximum span for this view along an axis.,"

getMaximumSpan
public float getMaximumSpan(int axis)
Determines the maximum span for this view along an
 axis.

Overrides:
getMaximumSpan in class View
Parameters:
axis - may be either View.X_AXIS
           or View.Y_AXIS
Returns:
the span the view would like to be rendered into >= 0;
           typically the view is told to render into the span
           that is returned, although there is no guarantee;
           the parent may choose to resize or break the view
Throws:
IllegalArgumentException - for an invalid axis type
See Also:
View.getPreferredSpan(int)


"
BoxView,getMinimumSpan(int axis),float,Determines the minimum span for this view along an axis.,"

getMinimumSpan
public float getMinimumSpan(int axis)
Determines the minimum span for this view along an
 axis.

Overrides:
getMinimumSpan in class View
Parameters:
axis - may be either View.X_AXIS
           or View.Y_AXIS
Returns:
the span the view would like to be rendered into >= 0;
           typically the view is told to render into the span
           that is returned, although there is no guarantee;
           the parent may choose to resize or break the view
Throws:
IllegalArgumentException - for an invalid axis type
See Also:
View.getPreferredSpan(int)


"
BoxView,"getOffset(int axis, int childIndex)",protected int,Fetches the offset of a particular child's current layout.,"

getOffset
protected int getOffset(int axis,
                        int childIndex)
Fetches the offset of a particular child's current layout.

Parameters:
axis - the axis being studied
childIndex - the index of the requested child
Returns:
the offset (location) for the specified child


"
BoxView,getPreferredSpan(int axis),float,Determines the preferred span for this view along an axis.,"

getPreferredSpan
public float getPreferredSpan(int axis)
Determines the preferred span for this view along an
 axis.

Specified by:
getPreferredSpan in class View
Parameters:
axis - may be either View.X_AXIS
           or View.Y_AXIS
Returns:
the span the view would like to be rendered into >= 0;
           typically the view is told to render into the span
           that is returned, although there is no guarantee;
           the parent may choose to resize or break the view
Throws:
IllegalArgumentException - for an invalid axis type
See Also:
View.getPreferredSpan(int)


"
BoxView,getResizeWeight(int axis),int,Gets the resize weight.,"

getResizeWeight
public int getResizeWeight(int axis)
Gets the resize weight.  A value of 0 or less is not resizable.

Overrides:
getResizeWeight in class View
Parameters:
axis - may be either View.X_AXIS or
          View.Y_AXIS
Returns:
the weight
Throws:
IllegalArgumentException - for an invalid axis


"
BoxView,"getSpan(int axis, int childIndex)",protected int,Fetches the span of a particular child's current layout.,"

getSpan
protected int getSpan(int axis,
                      int childIndex)
Fetches the span of a particular child's current layout.

Parameters:
axis - the axis being studied
childIndex - the index of the requested child
Returns:
the span (width or height) of the specified child


"
BoxView,"getViewAtPoint(int x, int y, Rectangle alloc)",protected View,Fetches the child view at the given coordinates.,"

getViewAtPoint
protected View getViewAtPoint(int x,
                              int y,
                              Rectangle alloc)
Fetches the child view at the given coordinates.

Specified by:
getViewAtPoint in class CompositeView
Parameters:
x - the X coordinate >= 0
y - the Y coordinate >= 0
alloc - the parents inner allocation on entry, which should
   be changed to the child's allocation on exit
Returns:
the view


"
BoxView,getWidth(),int,Returns the current width of the box.,"

getWidth
public int getWidth()
Returns the current width of the box.  This is the width that
 it was last allocated.

Returns:
the current width of the box


"
BoxView,"isAfter(int x, int y, Rectangle innerAlloc)",protected boolean,Determines if a point falls after an allocated region.,"

isAfter
protected boolean isAfter(int x,
                          int y,
                          Rectangle innerAlloc)
Determines if a point falls after an allocated region.

Specified by:
isAfter in class CompositeView
Parameters:
x - the X coordinate >= 0
y - the Y coordinate >= 0
innerAlloc - the allocated region; this is the area
   inside of the insets
Returns:
true if the point lies after the region else false


"
BoxView,isAllocationValid(),protected boolean,Are the allocations for the children still valid?,"

isAllocationValid
protected boolean isAllocationValid()
Are the allocations for the children still
 valid?

Returns:
true if allocations still valid


"
BoxView,"isBefore(int x, int y, Rectangle innerAlloc)",protected boolean,Determines if a point falls before an allocated region.,"

isBefore
protected boolean isBefore(int x,
                           int y,
                           Rectangle innerAlloc)
Determines if a point falls before an allocated region.

Specified by:
isBefore in class CompositeView
Parameters:
x - the X coordinate >= 0
y - the Y coordinate >= 0
innerAlloc - the allocated region; this is the area
   inside of the insets
Returns:
true if the point lies before the region else false


"
BoxView,isLayoutValid(int axis),protected boolean,Determines if the layout is valid along the given axis.,"

isLayoutValid
protected boolean isLayoutValid(int axis)
Determines if the layout is valid along the given axis.

Parameters:
axis - either View.X_AXIS or View.Y_AXIS
Since:
1.4


"
BoxView,"layout(int width, int height)",protected void,Perform layout on the box,"

layout
protected void layout(int width,
                      int height)
Perform layout on the box

Parameters:
width - the width (inside of the insets) >= 0
height - the height (inside of the insets) >= 0


"
BoxView,layoutChanged(int axis),void,Invalidates the layout along an axis.,"

layoutChanged
public void layoutChanged(int axis)
Invalidates the layout along an axis.  This happens
 automatically if the preferences have changed for
 any of the child views.  In some cases the layout
 may need to be recalculated when the preferences
 have not changed.  The layout can be marked as
 invalid by calling this method.  The layout will
 be updated the next time the setSize method
 is called on this view (typically in paint).

Parameters:
axis - either View.X_AXIS or View.Y_AXIS
Since:
1.3


"
BoxView,"layoutMajorAxis(int targetSpan, int axis, int[] offsets, int[] spans)",protected void,Performs layout for the major axis of the box (i.e.,"

layoutMajorAxis
protected void layoutMajorAxis(int targetSpan,
                               int axis,
                               int[] offsets,
                               int[] spans)
Performs layout for the major axis of the box (i.e. the
 axis that it represents). The results of the layout (the
 offset and span for each children) are placed in the given
 arrays which represent the allocations to the children
 along the major axis.

Parameters:
targetSpan - the total span given to the view, which
  would be used to layout the children
axis - the axis being layed out
offsets - the offsets from the origin of the view for
  each of the child views; this is a return value and is
  filled in by the implementation of this method
spans - the span of each child view; this is a return
  value and is filled in by the implementation of this method


"
BoxView,"layoutMinorAxis(int targetSpan, int axis, int[] offsets, int[] spans)",protected void,Performs layout for the minor axis of the box (i.e.,"

layoutMinorAxis
protected void layoutMinorAxis(int targetSpan,
                               int axis,
                               int[] offsets,
                               int[] spans)
Performs layout for the minor axis of the box (i.e. the
 axis orthogonal to the axis that it represents). The results
 of the layout (the offset and span for each children) are
 placed in the given arrays which represent the allocations to
 the children along the minor axis.

Parameters:
targetSpan - the total span given to the view, which
  would be used to layout the children
axis - the axis being layed out
offsets - the offsets from the origin of the view for
  each of the child views; this is a return value and is
  filled in by the implementation of this method
spans - the span of each child view; this is a return
  value and is filled in by the implementation of this method


"
BoxView,"modelToView(int pos, Shape a, Position.Bias b)",Shape,Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.,"

modelToView
public Shape modelToView(int pos,
                         Shape a,
                         Position.Bias b)
                  throws BadLocationException
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.  This makes
 sure the allocation is valid before calling the superclass.

Overrides:
modelToView in class CompositeView
Parameters:
pos - the position to convert >= 0
a - the allocated region to render into
b - a bias value of either Position.Bias.Forward
  or Position.Bias.Backward
Returns:
the bounding box of the given position
Throws:
BadLocationException - if the given position does
  not represent a valid location in the associated document
See Also:
View.modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias)


"
BoxView,"paint(Graphics g, Shape allocation)",void,Renders the BoxView using the given rendering surface and area on that surface.,"

paint
public void paint(Graphics g,
                  Shape allocation)
Renders the BoxView using the given
 rendering surface and area
 on that surface.  Only the children that intersect
 the clip bounds of the given Graphics
 will be rendered.

Specified by:
paint in class View
Parameters:
g - the rendering surface to use
allocation - the allocated region to render into
See Also:
View.paint(java.awt.Graphics, java.awt.Shape)


"
BoxView,"paintChild(Graphics g, Rectangle alloc, int index)",protected void,Paints a child.,"

paintChild
protected void paintChild(Graphics g,
                          Rectangle alloc,
                          int index)
Paints a child.  By default
 that is all it does, but a subclass can use this to paint
 things relative to the child.

Parameters:
g - the graphics context
alloc - the allocated region to paint into
index - the child index, >= 0 && < getViewCount()


"
BoxView,"preferenceChanged(View child, boolean width, boolean height)",void,This is called by a child to indicate its preferred span has changed.,"

preferenceChanged
public void preferenceChanged(View child,
                              boolean width,
                              boolean height)
This is called by a child to indicate its
 preferred span has changed.  This is implemented to
 throw away cached layout information so that new
 calculations will be done the next time the children
 need an allocation.

Overrides:
preferenceChanged in class View
Parameters:
child - the child view
width - true if the width preference should change
height - true if the height preference should change
See Also:
JComponent.revalidate()


"
BoxView,"replace(int index, int length, View[] elems)",void,Invalidates the layout and resizes the cache of requests/allocations.,"

replace
public void replace(int index,
                    int length,
                    View[] elems)
Invalidates the layout and resizes the cache of
 requests/allocations.  The child allocations can still
 be accessed for the old layout, but the new children
 will have an offset and span of 0.

Overrides:
replace in class CompositeView
Parameters:
index - the starting index into the child views to insert
   the new views; this should be a value >= 0 and <= getViewCount
length - the number of existing child views to remove;
   This should be a value >= 0 and <= (getViewCount() - offset)
elems - the child views to add; this value can be
   nullto indicate no children are being added
   (useful to remove)


"
BoxView,setAxis(int axis),void,Sets the tile axis property.,"

setAxis
public void setAxis(int axis)
Sets the tile axis property.  This is the axis along which
 the child views are tiled.

Parameters:
axis - either View.X_AXIS or View.Y_AXIS
Since:
1.3


"
BoxView,"setSize(float width, float height)",void,Sets the size of the view.,"

setSize
public void setSize(float width,
                    float height)
Sets the size of the view.  This should cause
 layout of the view if the view caches any layout
 information.  This is implemented to call the
 layout method with the sizes inside of the insets.

Overrides:
setSize in class View
Parameters:
width - the width >= 0
height - the height >= 0


"
BoxView,"viewToModel(float x, float y, Shape a, Position.Bias[] bias)",int,Provides a mapping from the view coordinate space to the logical coordinate space of the model.,"

viewToModel
public int viewToModel(float x,
                       float y,
                       Shape a,
                       Position.Bias[] bias)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.

Overrides:
viewToModel in class CompositeView
Parameters:
x - x coordinate of the view location to convert >= 0
y - y coordinate of the view location to convert >= 0
a - the allocated region to render into
bias - either Position.Bias.Forward or
  Position.Bias.Backward
Returns:
the location within the model that best represents the
  given point in the view >= 0
See Also:
View.viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[])


"
ComponentView,createComponent(),protected Component,Create the component that is associated with this view.,"

createComponent
protected Component createComponent()
Create the component that is associated with
 this view.  This will be called when it has
 been determined that a new component is needed.
 This would result from a call to setParent or
 as a result of being notified that attributes
 have changed.

"
ComponentView,getAlignment(int axis),float,Determines the desired alignment for this view along an axis.,"

getAlignment
public float getAlignment(int axis)
Determines the desired alignment for this view along an
 axis.  This is implemented to give the alignment of the
 embedded component.

Overrides:
getAlignment in class View
Parameters:
axis - may be either View.X_AXIS or View.Y_AXIS
Returns:
the desired alignment.  This should be a value
   between 0.0 and 1.0 where 0 indicates alignment at the
   origin and 1.0 indicates alignment to the full span
   away from the origin.  An alignment of 0.5 would be the
   center of the view.


"
ComponentView,getComponent(),Component,Fetch the component associated with the view.,"

getComponent
public final Component getComponent()
Fetch the component associated with the view.

"
ComponentView,getMaximumSpan(int axis),float,Determines the maximum span for this view along an axis.,"

getMaximumSpan
public float getMaximumSpan(int axis)
Determines the maximum span for this view along an
 axis.  This is implemented to return the value
 returned by Component.getMaximumSize along the
 axis of interest.

Overrides:
getMaximumSpan in class View
Parameters:
axis - may be either View.X_AXIS or View.Y_AXIS
Returns:
the span the view would like to be rendered into >=0.
           Typically the view is told to render into the span
           that is returned, although there is no guarantee.
           The parent may choose to resize or break the view.
Throws:
IllegalArgumentException - for an invalid axis
See Also:
View.getPreferredSpan(int)


"
ComponentView,getMinimumSpan(int axis),float,Determines the minimum span for this view along an axis.,"

getMinimumSpan
public float getMinimumSpan(int axis)
Determines the minimum span for this view along an
 axis.  This is implemented to return the value
 returned by Component.getMinimumSize along the
 axis of interest.

Overrides:
getMinimumSpan in class View
Parameters:
axis - may be either View.X_AXIS or View.Y_AXIS
Returns:
the span the view would like to be rendered into >=0.
           Typically the view is told to render into the span
           that is returned, although there is no guarantee.
           The parent may choose to resize or break the view.
Throws:
IllegalArgumentException - for an invalid axis
See Also:
View.getPreferredSpan(int)


"
ComponentView,getPreferredSpan(int axis),float,Determines the preferred span for this view along an axis.,"

getPreferredSpan
public float getPreferredSpan(int axis)
Determines the preferred span for this view along an
 axis.  This is implemented to return the value
 returned by Component.getPreferredSize along the
 axis of interest.

Specified by:
getPreferredSpan in class View
Parameters:
axis - may be either View.X_AXIS or View.Y_AXIS
Returns:
the span the view would like to be rendered into >=0.
           Typically the view is told to render into the span
           that is returned, although there is no guarantee.
           The parent may choose to resize or break the view.
Throws:
IllegalArgumentException - for an invalid axis
See Also:
View.getPreferredSpan(int)


"
ComponentView,"modelToView(int pos, Shape a, Position.Bias b)",Shape,Provides a mapping from the coordinate space of the model to that of the view.,"

modelToView
public Shape modelToView(int pos,
                         Shape a,
                         Position.Bias b)
                  throws BadLocationException
Provides a mapping from the coordinate space of the model to
 that of the view.

Specified by:
modelToView in class View
Parameters:
pos - the position to convert >=0
a - the allocated region to render into
b - the bias toward the previous character or the
  next character represented by the offset, in case the
  position is a boundary of two views; b will have one
  of these values:
 
 Position.Bias.Forward
 Position.Bias.Backward

Returns:
the bounding box of the given position is returned
Throws:
BadLocationException - if the given position does not
   represent a valid location in the associated document
See Also:
View.modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias)


"
ComponentView,"paint(Graphics g, Shape a)",void,The real paint behavior occurs naturally from the association that the component has with its parent container (the same container hosting this view).,"

paint
public void paint(Graphics g,
                  Shape a)
The real paint behavior occurs naturally from the association
 that the component has with its parent container (the same
 container hosting this view).  This is implemented to do nothing.

Specified by:
paint in class View
Parameters:
g - the graphics context
a - the shape
See Also:
View.paint(java.awt.Graphics, java.awt.Shape)


"
ComponentView,setParent(View p),void,Sets the parent for a child view.,"

setParent
public void setParent(View p)
Sets the parent for a child view.
 The parent calls this on the child to tell it who its
 parent is, giving the view access to things like
 the hosting Container.  The superclass behavior is
 executed, followed by a call to createComponent if
 the parent view parameter is non-null and a component
 has not yet been created. The embedded components parent
 is then set to the value returned by getContainer.
 If the parent view parameter is null, this view is being
 cleaned up, thus the component is removed from its parent.
 
 The changing of the component hierarchy will
 touch the component lock, which is the one thing
 that is not safe from the View hierarchy.  Therefore,
 this functionality is executed immediately if on the
 event thread, or is queued on the event queue if
 called from another thread (notification of change
 from an asynchronous update).

Overrides:
setParent in class View
Parameters:
p - the parent


"
ComponentView,"viewToModel(float x, float y, Shape a, Position.Bias[] bias)",int,Provides a mapping from the view coordinate space to the logical coordinate space of the model.,"

viewToModel
public int viewToModel(float x,
                       float y,
                       Shape a,
                       Position.Bias[] bias)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.

Specified by:
viewToModel in class View
Parameters:
x - the X coordinate >=0
y - the Y coordinate >=0
a - the allocated region to render into
Returns:
the location within the model that best represents
    the given point in the view
See Also:
View.viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[])


"
CompositeView,"childAllocation(int index, Rectangle a)",protected abstract void,Returns the allocation for a given child.,"

childAllocation
protected abstract void childAllocation(int index,
                                        Rectangle a)
Returns the allocation for a given child.

Parameters:
index - the index of the child, >= 0 && < getViewCount()
a - the allocation to the interior of the box on entry,
   and the allocation of the child view at the index on exit.


"
CompositeView,"flipEastAndWestAtEnds(int position, Position.Bias bias)",protected boolean,Determines in which direction the next view lays.,"

flipEastAndWestAtEnds
protected boolean flipEastAndWestAtEnds(int position,
                                        Position.Bias bias)
Determines in which direction the next view lays.
 Consider the View at index n. Typically the
 Views are layed out from left to right,
 so that the View to the EAST will be
 at index n + 1, and the View to the WEST
 will be at index n - 1. In certain situations,
 such as with bidirectional text, it is possible
 that the View to EAST is not at index n + 1,
 but rather at index n - 1, or that the View
 to the WEST is not at index n - 1, but index n + 1.
 In this case this method would return true, indicating the
 Views are layed out in descending order.
 
 This unconditionally returns false, subclasses should override this
 method if there is the possibility for laying Views in
 descending order.

Parameters:
position - position into the model
bias - either Position.Bias.Forward or
          Position.Bias.Backward
Returns:
false


"
CompositeView,getBottomInset(),protected short,Gets the bottom inset.,"

getBottomInset
protected short getBottomInset()
Gets the bottom inset.

Returns:
the inset >= 0


"
CompositeView,"getChildAllocation(int index, Shape a)",Shape,Fetches the allocation for the given child view to render into.,"

getChildAllocation
public Shape getChildAllocation(int index,
                                Shape a)
Fetches the allocation for the given child view to
 render into. This enables finding out where various views
 are located.

Overrides:
getChildAllocation in class View
Parameters:
index - the index of the child, >= 0 && < getViewCount()
a - the allocation to this view
Returns:
the allocation to the child


"
CompositeView,getInsideAllocation(Shape a),protected Rectangle,Translates the immutable allocation given to the view to a mutable allocation that represents the interior allocation (i.e.,"

getInsideAllocation
protected Rectangle getInsideAllocation(Shape a)
Translates the immutable allocation given to the view
 to a mutable allocation that represents the interior
 allocation (i.e. the bounds of the given allocation
 with the top, left, bottom, and right insets removed.
 It is expected that the returned value would be further
 mutated to represent an allocation to a child view.
 This is implemented to reuse an instance variable so
 it avoids creating excessive Rectangles.  Typically
 the result of calling this method would be fed to
 the childAllocation method.

Parameters:
a - the allocation given to the view
Returns:
the allocation that represents the inside of the
   view after the margins have all been removed; if the
   given allocation was null,
   the return value is null


"
CompositeView,getLeftInset(),protected short,Gets the left inset.,"

getLeftInset
protected short getLeftInset()
Gets the left inset.

Returns:
the inset >= 0


"
CompositeView,"getNextEastWestVisualPositionFrom(int pos, Position.Bias b, Shape a, int direction, Position.Bias[] biasRet)",protected int,"Returns the next visual position for the cursor, in either the east or west direction.","

getNextEastWestVisualPositionFrom
protected int getNextEastWestVisualPositionFrom(int pos,
                                                Position.Bias b,
                                                Shape a,
                                                int direction,
                                                Position.Bias[] biasRet)
                                         throws BadLocationException
Returns the next visual position for the cursor, in either the
 east or west direction.

Parameters:
pos - the position to convert >= 0
b - a bias value of either Position.Bias.Forward
  or Position.Bias.Backward
a - the allocated region to render into
direction - the direction from the current position that can
  be thought of as the arrow keys typically found on a keyboard;
  this may be one of the following:
  
SwingConstants.WEST
SwingConstants.EAST

biasRet - an array containing the bias that was checked
Returns:
the location within the model that best represents the next
  west or east location
Throws:
BadLocationException
IllegalArgumentException - if direction is invalid
See Also:
getNextVisualPositionFrom(int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[])


"
CompositeView,"getNextNorthSouthVisualPositionFrom(int pos, Position.Bias b, Shape a, int direction, Position.Bias[] biasRet)",protected int,"Returns the next visual position for the cursor, in either the north or south direction.","

getNextNorthSouthVisualPositionFrom
protected int getNextNorthSouthVisualPositionFrom(int pos,
                                                  Position.Bias b,
                                                  Shape a,
                                                  int direction,
                                                  Position.Bias[] biasRet)
                                           throws BadLocationException
Returns the next visual position for the cursor, in either the
 north or south direction.

Parameters:
pos - the position to convert >= 0
b - a bias value of either Position.Bias.Forward
  or Position.Bias.Backward
a - the allocated region to render into
direction - the direction from the current position that can
  be thought of as the arrow keys typically found on a keyboard;
  this may be one of the following:
  
SwingConstants.NORTH
SwingConstants.SOUTH

biasRet - an array containing the bias that was checked
Returns:
the location within the model that best represents the next
  north or south location
Throws:
BadLocationException
IllegalArgumentException - if direction is invalid
See Also:
getNextVisualPositionFrom(int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[])


"
CompositeView,"getNextVisualPositionFrom(int pos, Position.Bias b, Shape a, int direction, Position.Bias[] biasRet)",int,Provides a way to determine the next visually represented model location that one might place a caret.,"

getNextVisualPositionFrom
public int getNextVisualPositionFrom(int pos,
                                     Position.Bias b,
                                     Shape a,
                                     int direction,
                                     Position.Bias[] biasRet)
                              throws BadLocationException
Provides a way to determine the next visually represented model
 location that one might place a caret.  Some views may not be visible,
 they might not be in the same order found in the model, or they just
 might not allow access to some of the locations in the model.
 This is a convenience method for getNextNorthSouthVisualPositionFrom(int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[])
 and getNextEastWestVisualPositionFrom(int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[]).
 This method enables specifying a position to convert
 within the range of >=0.  If the value is -1, a position
 will be calculated automatically.  If the value < -1,
 the BadLocationException will be thrown.

Overrides:
getNextVisualPositionFrom in class View
Parameters:
pos - the position to convert
b - a bias value of either Position.Bias.Forward
  or Position.Bias.Backward
a - the allocated region to render into
direction - the direction from the current position that can
  be thought of as the arrow keys typically found on a keyboard;
  this may be one of the following:
  
SwingConstants.WEST
SwingConstants.EAST
SwingConstants.NORTH
SwingConstants.SOUTH

biasRet - an array containing the bias that was checked
Returns:
the location within the model that best represents the next
  location visual position
Throws:
BadLocationException - the given position is not a valid
                                 position within the document
IllegalArgumentException - if direction is invalid


"
CompositeView,getRightInset(),protected short,Gets the right inset.,"

getRightInset
protected short getRightInset()
Gets the right inset.

Returns:
the inset >= 0


"
CompositeView,getTopInset(),protected short,Gets the top inset.,"

getTopInset
protected short getTopInset()
Gets the top inset.

Returns:
the inset >= 0


"
CompositeView,getView(int n),View,Returns the n-th view in this container.,"

getView
public View getView(int n)
Returns the n-th view in this container.

Overrides:
getView in class View
Parameters:
n - the number of the desired view, >= 0 && < getViewCount()
Returns:
the view at index n


"
CompositeView,"getViewAtPoint(int x, int y, Rectangle alloc)",protected abstract View,Fetches the child view at the given coordinates.,"

getViewAtPoint
protected abstract View getViewAtPoint(int x,
                                       int y,
                                       Rectangle alloc)
Fetches the child view at the given coordinates.

Parameters:
x - the X coordinate >= 0
y - the Y coordinate >= 0
alloc - the parent's allocation on entry, which should
   be changed to the child's allocation on exit
Returns:
the child view


"
CompositeView,"getViewAtPosition(int pos, Rectangle a)",protected View,Fetches the child view that represents the given position in the model.,"

getViewAtPosition
protected View getViewAtPosition(int pos,
                                 Rectangle a)
Fetches the child view that represents the given position in
 the model.  This is implemented to fetch the view in the case
 where there is a child view for each child element.

Parameters:
pos - the position >= 0
a - the allocation to the interior of the box on entry,
   and the allocation of the view containing the position on exit
Returns:
the view representing the given position, or
   null if there isn't one


"
CompositeView,getViewCount(),int,Returns the number of child views of this view.,"

getViewCount
public int getViewCount()
Returns the number of child views of this view.

Overrides:
getViewCount in class View
Returns:
the number of views >= 0
See Also:
getView(int)


"
CompositeView,"getViewIndex(int pos, Position.Bias b)",int,Returns the child view index representing the given position in the model.,"

getViewIndex
public int getViewIndex(int pos,
                        Position.Bias b)
Returns the child view index representing the given
 position in the model.  This is implemented to call the
 getViewIndexByPosition
 method for backward compatibility.

Overrides:
getViewIndex in class View
Parameters:
pos - the position >= 0
Returns:
index of the view representing the given position, or
   -1 if no view represents that position
Since:
1.3


"
CompositeView,getViewIndexAtPosition(int pos),protected int,Fetches the child view index representing the given position in the model.,"

getViewIndexAtPosition
protected int getViewIndexAtPosition(int pos)
Fetches the child view index representing the given position in
 the model.  This is implemented to fetch the view in the case
 where there is a child view for each child element.

Parameters:
pos - the position >= 0
Returns:
index of the view representing the given position, or
   -1 if no view represents that position


"
CompositeView,"isAfter(int x, int y, Rectangle alloc)",protected abstract boolean,Tests whether a point lies after the rectangle range.,"

isAfter
protected abstract boolean isAfter(int x,
                                   int y,
                                   Rectangle alloc)
Tests whether a point lies after the rectangle range.

Parameters:
x - the X coordinate >= 0
y - the Y coordinate >= 0
alloc - the rectangle
Returns:
true if the point is after the specified range


"
CompositeView,"isBefore(int x, int y, Rectangle alloc)",protected abstract boolean,Tests whether a point lies before the rectangle range.,"

isBefore
protected abstract boolean isBefore(int x,
                                    int y,
                                    Rectangle alloc)
Tests whether a point lies before the rectangle range.

Parameters:
x - the X coordinate >= 0
y - the Y coordinate >= 0
alloc - the rectangle
Returns:
true if the point is before the specified range


"
CompositeView,loadChildren(ViewFactory f),protected void,Loads all of the children to initialize the view.,"

loadChildren
protected void loadChildren(ViewFactory f)
Loads all of the children to initialize the view.
 This is called by the setParent(javax.swing.text.View)
 method.  Subclasses can reimplement this to initialize
 their child views in a different manner.  The default
 implementation creates a child view for each
 child element.

Parameters:
f - the view factory
See Also:
setParent(javax.swing.text.View)


"
CompositeView,"modelToView(int p0, Position.Bias b0, int p1, Position.Bias b1, Shape a)",Shape,Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.,"

modelToView
public Shape modelToView(int p0,
                         Position.Bias b0,
                         int p1,
                         Position.Bias b1,
                         Shape a)
                  throws BadLocationException
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.

Overrides:
modelToView in class View
Parameters:
p0 - the position to convert >= 0
b0 - the bias toward the previous character or the
  next character represented by p0, in case the
  position is a boundary of two views; either
  Position.Bias.Forward or
  Position.Bias.Backward
p1 - the position to convert >= 0
b1 - the bias toward the previous character or the
  next character represented by p1, in case the
  position is a boundary of two views
a - the allocated region to render into
Returns:
the bounding box of the given position is returned
Throws:
BadLocationException - if the given position does
   not represent a valid location in the associated document
IllegalArgumentException - for an invalid bias argument
See Also:
View.viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[])


"
CompositeView,"modelToView(int pos, Shape a, Position.Bias b)",Shape,Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.,"

modelToView
public Shape modelToView(int pos,
                         Shape a,
                         Position.Bias b)
                  throws BadLocationException
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.

Specified by:
modelToView in class View
Parameters:
pos - the position to convert >= 0
a - the allocated region to render into
b - a bias value of either Position.Bias.Forward
  or Position.Bias.Backward
Returns:
the bounding box of the given position
Throws:
BadLocationException - if the given position does
   not represent a valid location in the associated document
See Also:
View.modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias)


"
CompositeView,"replace(int offset, int length, View[] views)",void,Replaces child views.,"

replace
public void replace(int offset,
                    int length,
                    View[] views)
Replaces child views.  If there are no views to remove
 this acts as an insert.  If there are no views to
 add this acts as a remove.  Views being removed will
 have the parent set to null,
 and the internal reference to them removed so that they
 may be garbage collected.

Overrides:
replace in class View
Parameters:
offset - the starting index into the child views to insert
   the new views; >= 0 and <= getViewCount
length - the number of existing child views to remove;
   this should be a value >= 0 and <= (getViewCount() - offset)
views - the child views to add; this value can be
  null
   to indicate no children are being added (useful to remove)


"
CompositeView,"setInsets(short top, short left, short bottom, short right)",protected void,Sets the insets for the view.,"

setInsets
protected void setInsets(short top,
                         short left,
                         short bottom,
                         short right)
Sets the insets for the view.

Parameters:
top - the top inset >= 0
left - the left inset >= 0
bottom - the bottom inset >= 0
right - the right inset >= 0


"
CompositeView,setParagraphInsets(AttributeSet attr),protected void,Sets the insets from the paragraph attributes specified in the given attributes.,"

setParagraphInsets
protected void setParagraphInsets(AttributeSet attr)
Sets the insets from the paragraph attributes specified in
 the given attributes.

Parameters:
attr - the attributes


"
CompositeView,setParent(View parent),void,Sets the parent of the view.,"

setParent
public void setParent(View parent)
Sets the parent of the view.
 This is reimplemented to provide the superclass
 behavior as well as calling the loadChildren
 method if this view does not already have children.
 The children should not be loaded in the
 constructor because the act of setting the parent
 may cause them to try to search up the hierarchy
 (to get the hosting Container for example).
 If this view has children (the view is being moved
 from one place in the view hierarchy to another),
 the loadChildren method will not be called.

Overrides:
setParent in class View
Parameters:
parent - the parent of the view, null if none


"
CompositeView,"viewToModel(float x, float y, Shape a, Position.Bias[] bias)",int,Provides a mapping from the view coordinate space to the logical coordinate space of the model.,"

viewToModel
public int viewToModel(float x,
                       float y,
                       Shape a,
                       Position.Bias[] bias)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.

Specified by:
viewToModel in class View
Parameters:
x - x coordinate of the view location to convert >= 0
y - y coordinate of the view location to convert >= 0
a - the allocated region to render into
bias - either Position.Bias.Forward or
  Position.Bias.Backward
Returns:
the location within the model that best represents the
  given point in the view >= 0
See Also:
View.viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[])


"
DateFormatter,setFormat(DateFormat format),void,Sets the format that dictates the legal values that can be edited and displayed.,"

setFormat
public void setFormat(DateFormat format)
Sets the format that dictates the legal values that can be edited
 and displayed.
 
 If you have used the nullary constructor the value of this property
 will be determined for the current locale by way of the
 Dateformat.getDateInstance() method.

Parameters:
format - DateFormat instance used for converting from/to Strings


"
DefaultCaret,addChangeListener(ChangeListener l),void,Adds a listener to track whenever the caret position has been changed.,"

addChangeListener
public void addChangeListener(ChangeListener l)
Adds a listener to track whenever the caret position has
 been changed.

Specified by:
addChangeListener in interface Caret
Parameters:
l - the listener
See Also:
Caret.addChangeListener(javax.swing.event.ChangeListener)


"
DefaultCaret,adjustVisibility(Rectangle nloc),protected void,Scrolls the associated view (if necessary) to make the caret visible.,"

adjustVisibility
protected void adjustVisibility(Rectangle nloc)
Scrolls the associated view (if necessary) to make
 the caret visible.  Since how this should be done
 is somewhat of a policy, this method can be
 reimplemented to change the behavior.  By default
 the scrollRectToVisible method is called on the
 associated component.

Parameters:
nloc - the new position to scroll to


"
DefaultCaret,damage(Rectangle r),protected void,Damages the area surrounding the caret to cause it to be repainted in a new location.,"

damage
protected void damage(Rectangle r)
Damages the area surrounding the caret to cause
 it to be repainted in a new location.  If paint()
 is reimplemented, this method should also be
 reimplemented.  This method should update the
 caret bounds (x, y, width, and height).

Parameters:
r - the current location of the caret
See Also:
paint(java.awt.Graphics)


"
DefaultCaret,deinstall(JTextComponent c),void,Called when the UI is being removed from the interface of a JTextComponent.,"

deinstall
public void deinstall(JTextComponent c)
Called when the UI is being removed from the
 interface of a JTextComponent.  This is used to
 unregister any listeners that were attached.

Specified by:
deinstall in interface Caret
Parameters:
c - the component
See Also:
Caret.deinstall(javax.swing.text.JTextComponent)


"
DefaultCaret,equals(Object obj),boolean,Compares this object to the specified object.,"

equals
public boolean equals(Object obj)
Compares this object to the specified object.
 The superclass behavior of comparing rectangles
 is not desired, so this is changed to the Object
 behavior.

Overrides:
equals in class Rectangle
Parameters:
obj - the object to compare this font with
Returns:
true if the objects are equal;
            false otherwise
See Also:
Object.hashCode(), 
HashMap


"
DefaultCaret,fireStateChanged(),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireStateChanged
protected void fireStateChanged()
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is lazily created using the parameters passed into
 the fire method.  The listener list is processed last to first.

See Also:
EventListenerList


"
DefaultCaret,focusGained(FocusEvent e),void,Called when the component containing the caret gains focus.,"

focusGained
public void focusGained(FocusEvent e)
Called when the component containing the caret gains
 focus.  This is implemented to set the caret to visible
 if the component is editable.

Specified by:
focusGained in interface FocusListener
Parameters:
e - the focus event
See Also:
FocusListener.focusGained(java.awt.event.FocusEvent)


"
DefaultCaret,focusLost(FocusEvent e),void,Called when the component containing the caret loses focus.,"

focusLost
public void focusLost(FocusEvent e)
Called when the component containing the caret loses
 focus.  This is implemented to set the caret to visibility
 to false.

Specified by:
focusLost in interface FocusListener
Parameters:
e - the focus event
See Also:
FocusListener.focusLost(java.awt.event.FocusEvent)


"
DefaultCaret,getBlinkRate(),int,Gets the caret blink rate.,"

getBlinkRate
public int getBlinkRate()
Gets the caret blink rate.

Specified by:
getBlinkRate in interface Caret
Returns:
the delay in milliseconds.  If this is
  zero the caret will not blink.
See Also:
Caret.getBlinkRate()


"
DefaultCaret,getChangeListeners(),ChangeListener[],Returns an array of all the change listeners registered on this caret.,"

getChangeListeners
public ChangeListener[] getChangeListeners()
Returns an array of all the change listeners
 registered on this caret.

Returns:
all of this caret's ChangeListeners
         or an empty
         array if no change listeners are currently registered
Since:
1.4
See Also:
addChangeListener(javax.swing.event.ChangeListener), 
removeChangeListener(javax.swing.event.ChangeListener)


"
DefaultCaret,getComponent(),protected JTextComponent,Gets the text editor component that this caret is is bound to.,"

getComponent
protected final JTextComponent getComponent()
Gets the text editor component that this caret is
 is bound to.

Returns:
the component


"
DefaultCaret,getDot(),int,Fetches the current position of the caret.,"

getDot
public int getDot()
Fetches the current position of the caret.

Specified by:
getDot in interface Caret
Returns:
the position >= 0
See Also:
Caret.getDot()


"
DefaultCaret,getDotBias(),Position.Bias,Returns the bias of the caret position.,"

getDotBias
public Position.Bias getDotBias()
Returns the bias of the caret position.

Returns:
the bias of the caret position
Since:
1.6


"
DefaultCaret,getListeners(Class<T> listenerType),<T extends EventListener> T[],Returns an array of all the objects currently registered as FooListeners upon this caret.,"

getListeners
public <T extends EventListener> T[] getListeners(Class<T> listenerType)
Returns an array of all the objects currently registered
 as FooListeners
 upon this caret.
 FooListeners are registered using the
 addFooListener method.

 

 You can specify the listenerType argument
 with a class literal,
 such as
 FooListener.class.
 For example, you can query a
 DefaultCaret c
 for its change listeners with the following code:

 ChangeListener[] cls = (ChangeListener[])(c.getListeners(ChangeListener.class));

 If no such listeners exist, this method returns an empty array.

Parameters:
listenerType - the type of listeners requested; this parameter
          should specify an interface that descends from
          java.util.EventListener
Returns:
an array of all objects registered as
          FooListeners on this component,
          or an empty array if no such
          listeners have been added
Throws:
ClassCastException - if listenerType
          doesn't specify a class or interface that implements
          java.util.EventListener
Since:
1.3
See Also:
getChangeListeners()


"
DefaultCaret,getMagicCaretPosition(),Point,Gets the saved caret position.,"

getMagicCaretPosition
public Point getMagicCaretPosition()
Gets the saved caret position.

Specified by:
getMagicCaretPosition in interface Caret
Returns:
the position
 see #setMagicCaretPosition
See Also:
Caret.setMagicCaretPosition(java.awt.Point)


"
DefaultCaret,getMark(),int,Fetches the current position of the mark.,"

getMark
public int getMark()
Fetches the current position of the mark.  If there is a selection,
 the dot and mark will not be the same.

Specified by:
getMark in interface Caret
Returns:
the position >= 0
See Also:
Caret.getMark()


"
DefaultCaret,getMarkBias(),Position.Bias,Returns the bias of the mark.,"

getMarkBias
public Position.Bias getMarkBias()
Returns the bias of the mark.

Returns:
the bias of the mark
Since:
1.6


"
DefaultCaret,getSelectionPainter(),protected Highlighter.HighlightPainter,Gets the painter for the Highlighter.,"

getSelectionPainter
protected Highlighter.HighlightPainter getSelectionPainter()
Gets the painter for the Highlighter.

Returns:
the painter


"
DefaultCaret,getUpdatePolicy(),int,Gets the caret movement policy on document updates.,"

getUpdatePolicy
public int getUpdatePolicy()
Gets the caret movement policy on document updates.

Returns:
one of the following values : UPDATE_WHEN_ON_EDT,
 NEVER_UPDATE, ALWAYS_UPDATE
Since:
1.5
See Also:
setUpdatePolicy(int), 
UPDATE_WHEN_ON_EDT, 
NEVER_UPDATE, 
ALWAYS_UPDATE


"
DefaultCaret,install(JTextComponent c),void,Called when the UI is being installed into the interface of a JTextComponent.,"

install
public void install(JTextComponent c)
Called when the UI is being installed into the
 interface of a JTextComponent.  This can be used
 to gain access to the model that is being navigated
 by the implementation of this interface.  Sets the dot
 and mark to 0, and establishes document, property change,
 focus, mouse, and mouse motion listeners.

Specified by:
install in interface Caret
Parameters:
c - the component
See Also:
Caret.install(javax.swing.text.JTextComponent)


"
DefaultCaret,isActive(),boolean,Determines if the caret is currently active.,"

isActive
public boolean isActive()
Determines if the caret is currently active.
 
 This method returns whether or not the Caret
 is currently in a blinking state. It does not provide
 information as to whether it is currently blinked on or off.
 To determine if the caret is currently painted use the
 isVisible method.

Returns:
true if active else false
Since:
1.5
See Also:
isVisible()


"
DefaultCaret,isSelectionVisible(),boolean,Checks whether the current selection is visible.,"

isSelectionVisible
public boolean isSelectionVisible()
Checks whether the current selection is visible.

Specified by:
isSelectionVisible in interface Caret
Returns:
true if the selection is visible


"
DefaultCaret,isVisible(),boolean,Indicates whether or not the caret is currently visible.,"

isVisible
public boolean isVisible()
Indicates whether or not the caret is currently visible. As the
 caret flashes on and off the return value of this will change
 between true, when the caret is painted, and false, when the
 caret is not painted. isActive indicates whether
 or not the caret is in a blinking state, such that it can
 be visible, and isVisible indicates whether or not
 the caret is actually visible.
 
 Subclasses that wish to render a different flashing caret
 should override paint and only paint the caret if this method
 returns true.

Specified by:
isVisible in interface Caret
Returns:
true if visible else false
See Also:
Caret.isVisible(), 
isActive()


"
DefaultCaret,mouseClicked(MouseEvent e),void,Called when the mouse is clicked.,"

mouseClicked
public void mouseClicked(MouseEvent e)
Called when the mouse is clicked.  If the click was generated
 from button1, a double click selects a word,
 and a triple click the current line.

Specified by:
mouseClicked in interface MouseListener
Parameters:
e - the mouse event
See Also:
MouseListener.mouseClicked(java.awt.event.MouseEvent)


"
DefaultCaret,mouseDragged(MouseEvent e),void,Moves the caret position according to the mouse pointer's current location.,"

mouseDragged
public void mouseDragged(MouseEvent e)
Moves the caret position
 according to the mouse pointer's current
 location.  This effectively extends the
 selection.  By default, this is only done
 for mouse button 1.

Specified by:
mouseDragged in interface MouseMotionListener
Parameters:
e - the mouse event
See Also:
MouseMotionListener.mouseDragged(java.awt.event.MouseEvent)


"
DefaultCaret,mouseEntered(MouseEvent e),void,Called when the mouse enters a region.,"

mouseEntered
public void mouseEntered(MouseEvent e)
Called when the mouse enters a region.

Specified by:
mouseEntered in interface MouseListener
Parameters:
e - the mouse event
See Also:
MouseListener.mouseEntered(java.awt.event.MouseEvent)


"
DefaultCaret,mouseExited(MouseEvent e),void,Called when the mouse exits a region.,"

mouseExited
public void mouseExited(MouseEvent e)
Called when the mouse exits a region.

Specified by:
mouseExited in interface MouseListener
Parameters:
e - the mouse event
See Also:
MouseListener.mouseExited(java.awt.event.MouseEvent)


"
DefaultCaret,mouseMoved(MouseEvent e),void,Called when the mouse is moved.,"

mouseMoved
public void mouseMoved(MouseEvent e)
Called when the mouse is moved.

Specified by:
mouseMoved in interface MouseMotionListener
Parameters:
e - the mouse event
See Also:
MouseMotionListener.mouseMoved(java.awt.event.MouseEvent)


"
DefaultCaret,mousePressed(MouseEvent e),void,"If button 1 is pressed, this is implemented to request focus on the associated text component, and to set the caret position.","

mousePressed
public void mousePressed(MouseEvent e)
If button 1 is pressed, this is implemented to
 request focus on the associated text component,
 and to set the caret position. If the shift key is held down,
 the caret will be moved, potentially resulting in a selection,
 otherwise the
 caret position will be set to the new location.  If the component
 is not enabled, there will be no request for focus.

Specified by:
mousePressed in interface MouseListener
Parameters:
e - the mouse event
See Also:
MouseListener.mousePressed(java.awt.event.MouseEvent)


"
DefaultCaret,mouseReleased(MouseEvent e),void,Called when the mouse is released.,"

mouseReleased
public void mouseReleased(MouseEvent e)
Called when the mouse is released.

Specified by:
mouseReleased in interface MouseListener
Parameters:
e - the mouse event
See Also:
MouseListener.mouseReleased(java.awt.event.MouseEvent)


"
DefaultCaret,moveCaret(MouseEvent e),protected void,"Tries to move the position of the caret from the coordinates of a mouse event, using viewToModel().","

moveCaret
protected void moveCaret(MouseEvent e)
Tries to move the position of the caret from
 the coordinates of a mouse event, using viewToModel().
 This will cause a selection if the dot and mark
 are different.

Parameters:
e - the mouse event


"
DefaultCaret,moveDot(int dot),void,"Moves the caret position to the specified position, with a forward bias.","

moveDot
public void moveDot(int dot)
Moves the caret position to the specified position,
 with a forward bias.

Specified by:
moveDot in interface Caret
Parameters:
dot - the position >= 0
See Also:
moveDot(int, javax.swing.text.Position.Bias), 
Caret.moveDot(int)


"
DefaultCaret,"moveDot(int dot, Position.Bias dotBias)",void,"Moves the caret position to the specified position, with the specified bias.","

moveDot
public void moveDot(int dot,
                    Position.Bias dotBias)
Moves the caret position to the specified position, with the
 specified bias.

Parameters:
dot - the position >= 0
dotBias - the bias for this position, not null
Throws:
IllegalArgumentException - if the bias is null
Since:
1.6
See Also:
Caret.moveDot(int)


"
DefaultCaret,paint(Graphics g),void,Renders the caret as a vertical line.,"

paint
public void paint(Graphics g)
Renders the caret as a vertical line.  If this is reimplemented
 the damage method should also be reimplemented as it assumes the
 shape of the caret is a vertical line.  Sets the caret color to
 the value returned by getCaretColor().
 
 If there are multiple text directions present in the associated
 document, a flag indicating the caret bias will be rendered.
 This will occur only if the associated document is a subclass
 of AbstractDocument and there are multiple bidi levels present
 in the bidi element structure (i.e. the text has multiple
 directions associated with it).

Specified by:
paint in interface Caret
Parameters:
g - the graphics context
See Also:
damage(java.awt.Rectangle)


"
DefaultCaret,positionCaret(MouseEvent e),protected void,"Tries to set the position of the caret from the coordinates of a mouse event, using viewToModel().","

positionCaret
protected void positionCaret(MouseEvent e)
Tries to set the position of the caret from
 the coordinates of a mouse event, using viewToModel().

Parameters:
e - the mouse event


"
DefaultCaret,removeChangeListener(ChangeListener l),void,Removes a listener that was tracking caret position changes.,"

removeChangeListener
public void removeChangeListener(ChangeListener l)
Removes a listener that was tracking caret position changes.

Specified by:
removeChangeListener in interface Caret
Parameters:
l - the listener
See Also:
Caret.removeChangeListener(javax.swing.event.ChangeListener)


"
DefaultCaret,repaint(),protected void,Cause the caret to be painted.,"

repaint
protected final void repaint()
Cause the caret to be painted.  The repaint
 area is the bounding box of the caret (i.e.
 the caret rectangle or this).
 
 This method is thread safe, although most Swing methods
 are not. Please see
 Concurrency
 in Swing for more information.

"
DefaultCaret,setBlinkRate(int rate),void,Sets the caret blink rate.,"

setBlinkRate
public void setBlinkRate(int rate)
Sets the caret blink rate.

Specified by:
setBlinkRate in interface Caret
Parameters:
rate - the rate in milliseconds, 0 to stop blinking
See Also:
Caret.setBlinkRate(int)


"
DefaultCaret,setDot(int dot),void,"Sets the caret position and mark to the specified position, with a forward bias.","

setDot
public void setDot(int dot)
Sets the caret position and mark to the specified position,
 with a forward bias. This implicitly sets the
 selection range to zero.

Specified by:
setDot in interface Caret
Parameters:
dot - the position >= 0
See Also:
setDot(int, Position.Bias), 
Caret.setDot(int)


"
DefaultCaret,"setDot(int dot, Position.Bias dotBias)",void,"Sets the caret position and mark to the specified position, with the specified bias.","

setDot
public void setDot(int dot,
                   Position.Bias dotBias)
Sets the caret position and mark to the specified position, with the
 specified bias. This implicitly sets the selection range
 to zero.

Parameters:
dot - the position >= 0
dotBias - the bias for this position, not null
Throws:
IllegalArgumentException - if the bias is null
Since:
1.6
See Also:
Caret.setDot(int)


"
DefaultCaret,setMagicCaretPosition(Point p),void,Saves the current caret position.,"

setMagicCaretPosition
public void setMagicCaretPosition(Point p)
Saves the current caret position.  This is used when
 caret up/down actions occur, moving between lines
 that have uneven end positions.

Specified by:
setMagicCaretPosition in interface Caret
Parameters:
p - the position
See Also:
getMagicCaretPosition()


"
DefaultCaret,setSelectionVisible(boolean vis),void,Changes the selection visibility.,"

setSelectionVisible
public void setSelectionVisible(boolean vis)
Changes the selection visibility.

Specified by:
setSelectionVisible in interface Caret
Parameters:
vis - the new visibility


"
DefaultCaret,setUpdatePolicy(int policy),void,Sets the caret movement policy on the document updates.,"

setUpdatePolicy
public void setUpdatePolicy(int policy)
Sets the caret movement policy on the document updates. Normally
 the caret updates its absolute position within the document on
 insertions occurred before or at the caret position and
 on removals before the caret position. 'Absolute position'
 means here the position relative to the start of the document.
 For example if
 a character is typed within editable text component it is inserted
 at the caret position and the caret moves to the next absolute
 position within the document due to insertion and if
 BACKSPACE is typed then caret decreases its absolute
 position due to removal of a character before it. Sometimes
 it may be useful to turn off the caret position updates so that
 the caret stays at the same absolute position within the
 document position regardless of any document updates.
 
 The following update policies are allowed:
 
NEVER_UPDATE: the caret stays at the same
       absolute position in the document regardless of any document
       updates, except when document length becomes less than
       the current caret position due to removal. In that case caret
       position is adjusted to the end of the document.
       The caret doesn't try to keep itself visible by scrolling
       the associated view when using this policy. 
ALWAYS_UPDATE: the caret always tracks document
       changes. For regular changes it increases its position
       if an insertion occurs before or at its current position,
       and decreases position if a removal occurs before
       its current position. For undo/redo updates it is always
       moved to the position where update occurred. The caret
       also tries to keep itself visible by calling
       adjustVisibility method.
UPDATE_WHEN_ON_EDT: acts like ALWAYS_UPDATE
       if the document updates are performed on the Event Dispatching Thread
       and like NEVER_UPDATE if updates are performed on
       other thread. 
 
 The default property value is UPDATE_WHEN_ON_EDT.

Parameters:
policy - one of the following values : UPDATE_WHEN_ON_EDT,
 NEVER_UPDATE, ALWAYS_UPDATE
Throws:
IllegalArgumentException - if invalid value is passed
Since:
1.5
See Also:
getUpdatePolicy(), 
adjustVisibility(java.awt.Rectangle), 
UPDATE_WHEN_ON_EDT, 
NEVER_UPDATE, 
ALWAYS_UPDATE


"
DefaultCaret,setVisible(boolean e),void,"Sets the caret visibility, and repaints the caret.","

setVisible
public void setVisible(boolean e)
Sets the caret visibility, and repaints the caret.
 It is important to understand the relationship between this method,
 isVisible and isActive.
 Calling this method with a value of true activates the
 caret blinking. Setting it to false turns it completely off.
 To determine whether the blinking is active, you should call
 isActive. In effect, isActive is an
 appropriate corresponding ""getter"" method for this one.
 isVisible can be used to fetch the current
 visibility status of the caret, meaning whether or not it is currently
 painted. This status will change as the caret blinks on and off.
 
 Here's a list showing the potential return values of both
 isActive and isVisible
 after calling this method:
 
setVisible(true):
 
isActive(): true
isVisible(): true or false depending on whether
         or not the caret is blinked on or off


setVisible(false):
 
isActive(): false
isVisible(): false


Specified by:
setVisible in interface Caret
Parameters:
e - the visibility specifier
See Also:
isActive(), 
Caret.setVisible(boolean)


"
DefaultCaret,toString(),String,Returns a String representing this Rectangle and its values.,"

toString
public String toString()
Description copied from class: Rectangle
Returns a String representing this
 Rectangle and its values.

Overrides:
toString in class Rectangle
Returns:
a String representing this
               Rectangle object's coordinate and size values.


"
DefaultEditorKit,createCaret(),Caret,Fetches a caret that can navigate through views produced by the associated ViewFactory.,"

createCaret
public Caret createCaret()
Fetches a caret that can navigate through views
 produced by the associated ViewFactory.

Specified by:
createCaret in class EditorKit
Returns:
the caret


"
DefaultEditorKit,createDefaultDocument(),Document,Creates an uninitialized text storage model (PlainDocument) that is appropriate for this type of editor.,"

createDefaultDocument
public Document createDefaultDocument()
Creates an uninitialized text storage model (PlainDocument)
 that is appropriate for this type of editor.

Specified by:
createDefaultDocument in class EditorKit
Returns:
the model


"
DefaultEditorKit,getActions(),Action[],Fetches the set of commands that can be used on a text component that is using a model and view produced by this kit.,"

getActions
public Action[] getActions()
Fetches the set of commands that can be used
 on a text component that is using a model and
 view produced by this kit.

Specified by:
getActions in class EditorKit
Returns:
the command list


"
DefaultEditorKit,getContentType(),String,Gets the MIME type of the data that this kit represents support for.,"

getContentType
public String getContentType()
Gets the MIME type of the data that this
 kit represents support for.  The default
 is text/plain.

Specified by:
getContentType in class EditorKit
Returns:
the type


"
DefaultEditorKit,getViewFactory(),ViewFactory,Fetches a factory that is suitable for producing views of any models that are produced by this kit.,"

getViewFactory
public ViewFactory getViewFactory()
Fetches a factory that is suitable for producing
 views of any models that are produced by this
 kit.  The default is to have the UI produce the
 factory, so this method has no implementation.

Specified by:
getViewFactory in class EditorKit
Returns:
the view factory


"
DefaultEditorKit,"read(InputStream in, Document doc, int pos)",void,Inserts content from the given stream which is expected to be in a format appropriate for this kind of content handler.,"

read
public void read(InputStream in,
                 Document doc,
                 int pos)
          throws IOException,
                 BadLocationException
Inserts content from the given stream which is expected
 to be in a format appropriate for this kind of content
 handler.

Specified by:
read in class EditorKit
Parameters:
in - The stream to read from
doc - The destination for the insertion.
pos - The location in the document to place the
   content >=0.
Throws:
IOException - on any I/O error
BadLocationException - if pos represents an invalid
   location within the document.


"
DefaultEditorKit,"read(Reader in, Document doc, int pos)",void,"Inserts content from the given stream, which will be treated as plain text.","

read
public void read(Reader in,
                 Document doc,
                 int pos)
          throws IOException,
                 BadLocationException
Inserts content from the given stream, which will be
 treated as plain text.

Specified by:
read in class EditorKit
Parameters:
in - The stream to read from
doc - The destination for the insertion.
pos - The location in the document to place the
   content >=0.
Throws:
IOException - on any I/O error
BadLocationException - if pos represents an invalid
   location within the document.


"
DefaultEditorKit,"write(OutputStream out, Document doc, int pos, int len)",void,Writes content from a document to the given stream in a format appropriate for this kind of content handler.,"

write
public void write(OutputStream out,
                  Document doc,
                  int pos,
                  int len)
           throws IOException,
                  BadLocationException
Writes content from a document to the given stream
 in a format appropriate for this kind of content handler.

Specified by:
write in class EditorKit
Parameters:
out - The stream to write to
doc - The source for the write.
pos - The location in the document to fetch the
   content >=0.
len - The amount to write out >=0.
Throws:
IOException - on any I/O error
BadLocationException - if pos represents an invalid
   location within the document.


"
DefaultEditorKit,"write(Writer out, Document doc, int pos, int len)",void,Writes content from a document to the given stream as plain text.,"

write
public void write(Writer out,
                  Document doc,
                  int pos,
                  int len)
           throws IOException,
                  BadLocationException
Writes content from a document to the given stream
 as plain text.

Specified by:
write in class EditorKit
Parameters:
out - The stream to write to
doc - The source for the write.
pos - The location in the document to fetch the
   content from >=0.
len - The amount to write out >=0.
Throws:
IOException - on any I/O error
BadLocationException - if pos is not within 0 and
   the length of the document.


"
DefaultEditorKit.BeepAction,actionPerformed(ActionEvent e),void,The operation to perform when this action is triggered.,"

actionPerformed
public void actionPerformed(ActionEvent e)
The operation to perform when this action is triggered.

Parameters:
e - the action event


"
DefaultEditorKit.CopyAction,actionPerformed(ActionEvent e),void,The operation to perform when this action is triggered.,"

actionPerformed
public void actionPerformed(ActionEvent e)
The operation to perform when this action is triggered.

Parameters:
e - the action event


"
DefaultEditorKit.CutAction,actionPerformed(ActionEvent e),void,The operation to perform when this action is triggered.,"

actionPerformed
public void actionPerformed(ActionEvent e)
The operation to perform when this action is triggered.

Parameters:
e - the action event


"
DefaultEditorKit.DefaultKeyTypedAction,actionPerformed(ActionEvent e),void,The operation to perform when this action is triggered.,"

actionPerformed
public void actionPerformed(ActionEvent e)
The operation to perform when this action is triggered.

Parameters:
e - the action event


"
DefaultEditorKit.InsertBreakAction,actionPerformed(ActionEvent e),void,The operation to perform when this action is triggered.,"

actionPerformed
public void actionPerformed(ActionEvent e)
The operation to perform when this action is triggered.

Parameters:
e - the action event


"
DefaultEditorKit.InsertContentAction,actionPerformed(ActionEvent e),void,The operation to perform when this action is triggered.,"

actionPerformed
public void actionPerformed(ActionEvent e)
The operation to perform when this action is triggered.

Parameters:
e - the action event


"
DefaultEditorKit.InsertTabAction,actionPerformed(ActionEvent e),void,The operation to perform when this action is triggered.,"

actionPerformed
public void actionPerformed(ActionEvent e)
The operation to perform when this action is triggered.

Parameters:
e - the action event


"
DefaultEditorKit.PasteAction,actionPerformed(ActionEvent e),void,The operation to perform when this action is triggered.,"

actionPerformed
public void actionPerformed(ActionEvent e)
The operation to perform when this action is triggered.

Parameters:
e - the action event


"
DefaultFormatter,clone(),Object,Creates a copy of the DefaultFormatter.,"

clone
public Object clone()
             throws CloneNotSupportedException
Creates a copy of the DefaultFormatter.

Overrides:
clone in class JFormattedTextField.AbstractFormatter
Returns:
copy of the DefaultFormatter
Throws:
CloneNotSupportedException - if the object's class does not
               support the Cloneable interface. Subclasses
               that override the clone method can also
               throw this exception to indicate that an instance cannot
               be cloned.
See Also:
Cloneable


"
DefaultFormatter,getAllowsInvalid(),boolean,Returns whether or not the value being edited is allowed to be invalid for a length of time.,"

getAllowsInvalid
public boolean getAllowsInvalid()
Returns whether or not the value being edited is allowed to be invalid
 for a length of time.

Returns:
false if the edited value must always be valid


"
DefaultFormatter,getCommitsOnValidEdit(),boolean,Returns when edits are published back to the JFormattedTextField.,"

getCommitsOnValidEdit
public boolean getCommitsOnValidEdit()
Returns when edits are published back to the
 JFormattedTextField.

Returns:
true if edits are committed after every valid edit


"
DefaultFormatter,getDocumentFilter(),protected DocumentFilter,Returns the DocumentFilter used to restrict the characters that can be input into the JFormattedTextField.,"

getDocumentFilter
protected DocumentFilter getDocumentFilter()
Returns the DocumentFilter used to restrict the characters
 that can be input into the JFormattedTextField.

Overrides:
getDocumentFilter in class JFormattedTextField.AbstractFormatter
Returns:
DocumentFilter to restrict edits


"
DefaultFormatter,getNavigationFilter(),protected NavigationFilter,Returns the NavigationFilter used to restrict where the cursor can be placed.,"

getNavigationFilter
protected NavigationFilter getNavigationFilter()
Returns the NavigationFilter used to restrict where the
 cursor can be placed.

Overrides:
getNavigationFilter in class JFormattedTextField.AbstractFormatter
Returns:
NavigationFilter to restrict navigation


"
DefaultFormatter,getOverwriteMode(),boolean,Returns the behavior when inserting characters.,"

getOverwriteMode
public boolean getOverwriteMode()
Returns the behavior when inserting characters.

Returns:
true if newly inserted characters overwrite existing characters


"
DefaultFormatter,getValueClass(),Class<?>,Returns that class that is used to create new Objects.,"

getValueClass
public Class<?> getValueClass()
Returns that class that is used to create new Objects.

Returns:
Class used to construct return value from stringToValue


"
DefaultFormatter,install(JFormattedTextField ftf),void,Installs the DefaultFormatter onto a particular JFormattedTextField.,"

install
public void install(JFormattedTextField ftf)
Installs the DefaultFormatter onto a particular
 JFormattedTextField.
 This will invoke valueToString to convert the
 current value from the JFormattedTextField to
 a String. This will then install the Actions from
 getActions, the DocumentFilter
 returned from getDocumentFilter and the
 NavigationFilter returned from
 getNavigationFilter onto the
 JFormattedTextField.
 
 Subclasses will typically only need to override this if they
 wish to install additional listeners on the
 JFormattedTextField.
 
 If there is a ParseException in converting the
 current value to a String, this will set the text to an empty
 String, and mark the JFormattedTextField as being
 in an invalid state.
 
 While this is a public method, this is typically only useful
 for subclassers of JFormattedTextField.
 JFormattedTextField will invoke this method at
 the appropriate times when the value changes, or its internal
 state changes.

Overrides:
install in class JFormattedTextField.AbstractFormatter
Parameters:
ftf - JFormattedTextField to format for, may be null indicating
            uninstall from current JFormattedTextField.


"
DefaultFormatter,setAllowsInvalid(boolean allowsInvalid),void,"Sets whether or not the value being edited is allowed to be invalid for a length of time (that is, stringToValue throws a ParseException).","

setAllowsInvalid
public void setAllowsInvalid(boolean allowsInvalid)
Sets whether or not the value being edited is allowed to be invalid
 for a length of time (that is, stringToValue throws
 a ParseException).
 It is often convenient to allow the user to temporarily input an
 invalid value.

Parameters:
allowsInvalid - Used to indicate if the edited value must always
        be valid


"
DefaultFormatter,setCommitsOnValidEdit(boolean commit),void,Sets when edits are published back to the JFormattedTextField.,"

setCommitsOnValidEdit
public void setCommitsOnValidEdit(boolean commit)
Sets when edits are published back to the
 JFormattedTextField. If true, commitEdit
 is invoked after every valid edit (any time the text is edited). On
 the other hand, if this is false than the DefaultFormatter
 does not publish edits back to the JFormattedTextField.
 As such, the only time the value of the JFormattedTextField
 will change is when commitEdit is invoked on
 JFormattedTextField, typically when enter is pressed
 or focus leaves the JFormattedTextField.

Parameters:
commit - Used to indicate when edits are committed back to the
               JTextComponent


"
DefaultFormatter,setOverwriteMode(boolean overwriteMode),void,Configures the behavior when inserting characters.,"

setOverwriteMode
public void setOverwriteMode(boolean overwriteMode)
Configures the behavior when inserting characters. If
 overwriteMode is true (the default), new characters
 overwrite existing characters in the model.

Parameters:
overwriteMode - Indicates if overwrite or overstrike mode is used


"
DefaultFormatter,setValueClass(Class<?> valueClass),void,Sets that class that is used to create new Objects.,"

setValueClass
public void setValueClass(Class<?> valueClass)
Sets that class that is used to create new Objects. If the
 passed in class does not have a single argument constructor that
 takes a String, String values will be used.

Parameters:
valueClass - Class used to construct return value from
        stringToValue


"
DefaultFormatter,stringToValue(String string),Object,Converts the passed in String into an instance of getValueClass by way of the constructor that takes a String argument.,"

stringToValue
public Object stringToValue(String string)
                     throws ParseException
Converts the passed in String into an instance of
 getValueClass by way of the constructor that
 takes a String argument. If getValueClass
 returns null, the Class of the current value in the
 JFormattedTextField will be used. If this is null, a
 String will be returned. If the constructor throws an exception, a
 ParseException will be thrown. If there is no single
 argument String constructor, string will be returned.

Specified by:
stringToValue in class JFormattedTextField.AbstractFormatter
Parameters:
string - String to convert
Returns:
Object representation of text
Throws:
ParseException - if there is an error in the conversion


"
DefaultFormatter,valueToString(Object value),String,Converts the passed in Object into a String by way of the toString method.,"

valueToString
public String valueToString(Object value)
                     throws ParseException
Converts the passed in Object into a String by way of the
 toString method.

Specified by:
valueToString in class JFormattedTextField.AbstractFormatter
Parameters:
value - Value to convert
Returns:
String representation of value
Throws:
ParseException - if there is an error in the conversion


"
DefaultFormatterFactory,getDefaultFormatter(),JFormattedTextField.AbstractFormatter,"Returns the JFormattedTextField.AbstractFormatter to use as a last resort, eg in case a display, edit or null JFormattedTextField.AbstractFormatter has not been specified.","

getDefaultFormatter
public JFormattedTextField.AbstractFormatter getDefaultFormatter()
Returns the JFormattedTextField.AbstractFormatter to use
 as a last resort, eg in case a display, edit or null
 JFormattedTextField.AbstractFormatter
 has not been specified.

Returns:
JFormattedTextField.AbstractFormatter used if a more specific
         one is not specified.


"
DefaultFormatterFactory,getDisplayFormatter(),JFormattedTextField.AbstractFormatter,"Returns the JFormattedTextField.AbstractFormatter to use if the JFormattedTextField is not being edited and either the value is not-null, or the value is null and a null formatter has has not been specified.","

getDisplayFormatter
public JFormattedTextField.AbstractFormatter getDisplayFormatter()
Returns the JFormattedTextField.AbstractFormatter to use
 if the JFormattedTextField is not being edited and either
 the value is not-null, or the value is null and a null formatter has
 has not been specified.

Returns:
JFormattedTextField.AbstractFormatter to use when the
         JFormattedTextField does not have focus


"
DefaultFormatterFactory,getEditFormatter(),JFormattedTextField.AbstractFormatter,"Returns the JFormattedTextField.AbstractFormatter to use if the JFormattedTextField is being edited and either the value is not-null, or the value is null and a null formatter has has not been specified.","

getEditFormatter
public JFormattedTextField.AbstractFormatter getEditFormatter()
Returns the JFormattedTextField.AbstractFormatter to use
 if the JFormattedTextField is being edited and either
 the value is not-null, or the value is null and a null formatter has
 has not been specified.

Returns:
JFormattedTextField.AbstractFormatter to use when the
         component has focus


"
DefaultFormatterFactory,getFormatter(JFormattedTextField source),JFormattedTextField.AbstractFormatter,"Returns either the default formatter, display formatter, editor formatter or null formatter based on the state of the JFormattedTextField.","

getFormatter
public JFormattedTextField.AbstractFormatter getFormatter(JFormattedTextField source)
Returns either the default formatter, display formatter, editor
 formatter or null formatter based on the state of the
 JFormattedTextField.

Specified by:
getFormatter in class JFormattedTextField.AbstractFormatterFactory
Parameters:
source - JFormattedTextField requesting
               JFormattedTextField.AbstractFormatter
Returns:
JFormattedTextField.AbstractFormatter to handle
         formatting duties.


"
DefaultFormatterFactory,getNullFormatter(),JFormattedTextField.AbstractFormatter,Returns the formatter to use if the value is null.,"

getNullFormatter
public JFormattedTextField.AbstractFormatter getNullFormatter()
Returns the formatter to use if the value is null.

Returns:
JFormattedTextField.AbstractFormatter to use when the value is
         null


"
DefaultFormatterFactory,setDefaultFormatter(JFormattedTextField.AbstractFormatter atf),void,"Sets the JFormattedTextField.AbstractFormatter to use as a last resort, eg in case a display, edit or null JFormattedTextField.AbstractFormatter has not been specified.","

setDefaultFormatter
public void setDefaultFormatter(JFormattedTextField.AbstractFormatter atf)
Sets the JFormattedTextField.AbstractFormatter to use as
 a last resort, eg in case a display, edit or null
 JFormattedTextField.AbstractFormatter has not been
 specified.

Parameters:
atf - JFormattedTextField.AbstractFormatter used if a more
            specific is not specified


"
DefaultFormatterFactory,setDisplayFormatter(JFormattedTextField.AbstractFormatter atf),void,"Sets the JFormattedTextField.AbstractFormatter to use if the JFormattedTextField is not being edited and either the value is not-null, or the value is null and a null formatter has has not been specified.","

setDisplayFormatter
public void setDisplayFormatter(JFormattedTextField.AbstractFormatter atf)
Sets the JFormattedTextField.AbstractFormatter to use if
 the JFormattedTextField is not being edited and either
 the value is not-null, or the value is null and a null formatter has
 has not been specified.

Parameters:
atf - JFormattedTextField.AbstractFormatter to use when the
            JFormattedTextField does not have focus


"
DefaultFormatterFactory,setEditFormatter(JFormattedTextField.AbstractFormatter atf),void,"Sets the JFormattedTextField.AbstractFormatter to use if the JFormattedTextField is being edited and either the value is not-null, or the value is null and a null formatter has has not been specified.","

setEditFormatter
public void setEditFormatter(JFormattedTextField.AbstractFormatter atf)
Sets the JFormattedTextField.AbstractFormatter to use if
 the JFormattedTextField is being edited and either
 the value is not-null, or the value is null and a null formatter has
 has not been specified.

Parameters:
atf - JFormattedTextField.AbstractFormatter to use when the
            component has focus


"
DefaultFormatterFactory,setNullFormatter(JFormattedTextField.AbstractFormatter atf),void,Sets the formatter to use if the value of the JFormattedTextField is null.,"

setNullFormatter
public void setNullFormatter(JFormattedTextField.AbstractFormatter atf)
Sets the formatter to use if the value of the JFormattedTextField is
 null.

Parameters:
atf - JFormattedTextField.AbstractFormatter to use when
 the value of the JFormattedTextField is null.


"
DefaultHighlighter,"addHighlight(int p0, int p1, Highlighter.HighlightPainter p)",Object,Adds a highlight to the view.,"

addHighlight
public Object addHighlight(int p0,
                           int p1,
                           Highlighter.HighlightPainter p)
                    throws BadLocationException
Adds a highlight to the view.  Returns a tag that can be used
 to refer to the highlight.

Parameters:
p0 - the start offset of the range to highlight >= 0
p1 - the end offset of the range to highlight >= p0
p - the painter to use to actually render the highlight
Returns:
an object that can be used as a tag
   to refer to the highlight
Throws:
BadLocationException - if the specified location is invalid


"
DefaultHighlighter,"changeHighlight(Object tag, int p0, int p1)",void,Changes a highlight.,"

changeHighlight
public void changeHighlight(Object tag,
                            int p0,
                            int p1)
                     throws BadLocationException
Changes a highlight.

Parameters:
tag - the highlight tag
p0 - the beginning of the range >= 0
p1 - the end of the range >= p0
Throws:
BadLocationException - if the specified location is invalid


"
DefaultHighlighter,deinstall(JTextComponent c),void,Called when the UI is being removed from the interface of a JTextComponent.,"

deinstall
public void deinstall(JTextComponent c)
Called when the UI is being removed from the interface of
 a JTextComponent.

Parameters:
c - the component
See Also:
Highlighter.deinstall(javax.swing.text.JTextComponent)


"
DefaultHighlighter,getDrawsLayeredHighlights(),boolean,NULL,"

getDrawsLayeredHighlights
public boolean getDrawsLayeredHighlights()

"
DefaultHighlighter,getHighlights(),Highlighter.Highlight[],Makes a copy of the highlights.,"

getHighlights
public Highlighter.Highlight[] getHighlights()
Makes a copy of the highlights.  Does not actually clone each highlight,
 but only makes references to them.

Returns:
the copy
See Also:
Highlighter.getHighlights()


"
DefaultHighlighter,install(JTextComponent c),void,Called when the UI is being installed into the interface of a JTextComponent.,"

install
public void install(JTextComponent c)
Called when the UI is being installed into the
 interface of a JTextComponent.  Installs the editor, and
 removes any existing highlights.

Parameters:
c - the editor component
See Also:
Highlighter.install(javax.swing.text.JTextComponent)


"
DefaultHighlighter,paint(Graphics g),void,Renders the highlights.,"

paint
public void paint(Graphics g)
Renders the highlights.

Parameters:
g - the graphics context


"
DefaultHighlighter,"paintLayeredHighlights(Graphics g, int p0, int p1, Shape viewBounds, JTextComponent editor, View view)",void,When leaf Views (such as LabelView) are rendering they should call into this method.,"

paintLayeredHighlights
public void paintLayeredHighlights(Graphics g,
                                   int p0,
                                   int p1,
                                   Shape viewBounds,
                                   JTextComponent editor,
                                   View view)
When leaf Views (such as LabelView) are rendering they should
 call into this method. If a highlight is in the given region it will
 be drawn immediately.

Specified by:
paintLayeredHighlights in class LayeredHighlighter
Parameters:
g - Graphics used to draw
p0 - starting offset of view
p1 - ending offset of view
viewBounds - Bounds of View
editor - JTextComponent
view - View instance being rendered


"
DefaultHighlighter,removeAllHighlights(),void,Removes all highlights.,"

removeAllHighlights
public void removeAllHighlights()
Removes all highlights.

"
DefaultHighlighter,removeHighlight(Object tag),void,Removes a highlight from the view.,"

removeHighlight
public void removeHighlight(Object tag)
Removes a highlight from the view.

Parameters:
tag - the reference to the highlight


"
DefaultHighlighter,setDrawsLayeredHighlights(boolean newValue),void,"If true, highlights are drawn as the Views draw the text.","

setDrawsLayeredHighlights
public void setDrawsLayeredHighlights(boolean newValue)
If true, highlights are drawn as the Views draw the text. That is
 the Views will call into paintLayeredHighlight which
 will result in a rectangle being drawn before the text is drawn
 (if the offsets are in a highlighted region that is). For this to
 work the painter supplied must be an instance of
 LayeredHighlightPainter.

"
DefaultHighlighter.DefaultHighlightPainter,getColor(),Color,Returns the color of the highlight.,"

getColor
public Color getColor()
Returns the color of the highlight.

Returns:
the color


"
DefaultHighlighter.DefaultHighlightPainter,"paint(Graphics g, int offs0, int offs1, Shape bounds, JTextComponent c)",void,Paints a highlight.,"

paint
public void paint(Graphics g,
                  int offs0,
                  int offs1,
                  Shape bounds,
                  JTextComponent c)
Paints a highlight.

Parameters:
g - the graphics context
offs0 - the starting model offset >= 0
offs1 - the ending model offset >= offs1
bounds - the bounding box for the highlight
c - the editor


"
DefaultHighlighter.DefaultHighlightPainter,"paintLayer(Graphics g, int offs0, int offs1, Shape bounds, JTextComponent c, View view)",Shape,Paints a portion of a highlight.,"

paintLayer
public Shape paintLayer(Graphics g,
                        int offs0,
                        int offs1,
                        Shape bounds,
                        JTextComponent c,
                        View view)
Paints a portion of a highlight.

Specified by:
paintLayer in class LayeredHighlighter.LayerPainter
Parameters:
g - the graphics context
offs0 - the starting model offset >= 0
offs1 - the ending model offset >= offs1
bounds - the bounding box of the view, which is not
        necessarily the region to paint.
c - the editor
view - View painting for
Returns:
region drawing occurred in


"
DefaultStyledDocument,addDocumentListener(DocumentListener listener),void,Adds a document listener for notification of any changes.,"

addDocumentListener
public void addDocumentListener(DocumentListener listener)
Adds a document listener for notification of any changes.

Specified by:
addDocumentListener in interface Document
Overrides:
addDocumentListener in class AbstractDocument
Parameters:
listener - the listener
See Also:
Document.addDocumentListener(javax.swing.event.DocumentListener)


"
DefaultStyledDocument,"addStyle(String nm, Style parent)",Style,Adds a new style into the logical style hierarchy.,"

addStyle
public Style addStyle(String nm,
                      Style parent)
Adds a new style into the logical style hierarchy.  Style attributes
 resolve from bottom up so an attribute specified in a child
 will override an attribute specified in the parent.

Specified by:
addStyle in interface StyledDocument
Parameters:
nm - the name of the style (must be unique within the
   collection of named styles).  The name may be null if the style
   is unnamed, but the caller is responsible
   for managing the reference returned as an unnamed style can't
   be fetched by name.  An unnamed style may be useful for things
   like character attribute overrides such as found in a style
   run.
parent - the parent style.  This may be null if unspecified
   attributes need not be resolved in some other style.
Returns:
the style


"
DefaultStyledDocument,create(DefaultStyledDocument.ElementSpec[] data),protected void,Initialize the document to reflect the given element structure (i.e.,"

create
protected void create(DefaultStyledDocument.ElementSpec[] data)
Initialize the document to reflect the given element
 structure (i.e. the structure reported by the
 getDefaultRootElement method.  If the
 document contained any data it will first be removed.

"
DefaultStyledDocument,createDefaultRoot(),protected AbstractDocument.AbstractElement,Creates the root element to be used to represent the default document structure.,"

createDefaultRoot
protected AbstractDocument.AbstractElement createDefaultRoot()
Creates the root element to be used to represent the
 default document structure.

Returns:
the element base


"
DefaultStyledDocument,getBackground(AttributeSet attr),Color,Gets the background color from an attribute set.,"

getBackground
public Color getBackground(AttributeSet attr)
Gets the background color from an attribute set.

Specified by:
getBackground in interface StyledDocument
Parameters:
attr - the attribute set
Returns:
the color


"
DefaultStyledDocument,getCharacterElement(int pos),Element,Gets a character element based on a position.,"

getCharacterElement
public Element getCharacterElement(int pos)
Gets a character element based on a position.

Specified by:
getCharacterElement in interface StyledDocument
Parameters:
pos - the position in the document >= 0
Returns:
the element


"
DefaultStyledDocument,getDefaultRootElement(),Element,Gets the default root element.,"

getDefaultRootElement
public Element getDefaultRootElement()
Gets the default root element.

Specified by:
getDefaultRootElement in interface Document
Specified by:
getDefaultRootElement in class AbstractDocument
Returns:
the root
See Also:
Document.getDefaultRootElement()


"
DefaultStyledDocument,getFont(AttributeSet attr),Font,Gets the font from an attribute set.,"

getFont
public Font getFont(AttributeSet attr)
Gets the font from an attribute set.

Specified by:
getFont in interface StyledDocument
Parameters:
attr - the attribute set
Returns:
the font


"
DefaultStyledDocument,getForeground(AttributeSet attr),Color,Gets the foreground color from an attribute set.,"

getForeground
public Color getForeground(AttributeSet attr)
Gets the foreground color from an attribute set.

Specified by:
getForeground in interface StyledDocument
Parameters:
attr - the attribute set
Returns:
the color


"
DefaultStyledDocument,getLogicalStyle(int p),Style,Fetches the logical style assigned to the paragraph represented by the given position.,"

getLogicalStyle
public Style getLogicalStyle(int p)
Fetches the logical style assigned to the paragraph
 represented by the given position.

Specified by:
getLogicalStyle in interface StyledDocument
Parameters:
p - the location to translate to a paragraph
  and determine the logical style assigned >= 0.  This
  is an offset from the start of the document.
Returns:
the style, null if none


"
DefaultStyledDocument,getParagraphElement(int pos),Element,Gets the paragraph element at the offset pos.,"

getParagraphElement
public Element getParagraphElement(int pos)
Gets the paragraph element at the offset pos.
 A paragraph consists of at least one child Element, which is usually
 a leaf.

Specified by:
getParagraphElement in interface StyledDocument
Specified by:
getParagraphElement in class AbstractDocument
Parameters:
pos - the starting offset >= 0
Returns:
the element


"
DefaultStyledDocument,getStyle(String nm),Style,Fetches a named style previously added.,"

getStyle
public Style getStyle(String nm)
Fetches a named style previously added.

Specified by:
getStyle in interface StyledDocument
Parameters:
nm - the name of the style
Returns:
the style


"
DefaultStyledDocument,getStyleNames(),Enumeration<?>,Fetches the list of of style names.,"

getStyleNames
public Enumeration<?> getStyleNames()
Fetches the list of of style names.

Returns:
all the style names


"
DefaultStyledDocument,"insert(int offset, DefaultStyledDocument.ElementSpec[] data)",protected void,Inserts new elements in bulk.,"

insert
protected void insert(int offset,
                      DefaultStyledDocument.ElementSpec[] data)
               throws BadLocationException
Inserts new elements in bulk.  This is useful to allow
 parsing with the document in an unlocked state and
 prepare an element structure modification.  This method
 takes an array of tokens that describe how to update an
 element structure so the time within a write lock can
 be greatly reduced in an asynchronous update situation.
 
 This method is thread safe, although most Swing methods
 are not. Please see
 Concurrency
 in Swing for more information.

Parameters:
offset - the starting offset >= 0
data - the element data
Throws:
BadLocationException - for an invalid starting offset


"
DefaultStyledDocument,"insertUpdate(AbstractDocument.DefaultDocumentEvent chng, AttributeSet attr)",protected void,Updates document structure as a result of text insertion.,"

insertUpdate
protected void insertUpdate(AbstractDocument.DefaultDocumentEvent chng,
                            AttributeSet attr)
Updates document structure as a result of text insertion.  This
 will happen within a write lock.  This implementation simply
 parses the inserted content for line breaks and builds up a set
 of instructions for the element buffer.

Overrides:
insertUpdate in class AbstractDocument
Parameters:
chng - a description of the document change
attr - the attributes


"
DefaultStyledDocument,removeDocumentListener(DocumentListener listener),void,Removes a document listener.,"

removeDocumentListener
public void removeDocumentListener(DocumentListener listener)
Removes a document listener.

Specified by:
removeDocumentListener in interface Document
Overrides:
removeDocumentListener in class AbstractDocument
Parameters:
listener - the listener
See Also:
Document.removeDocumentListener(javax.swing.event.DocumentListener)


"
DefaultStyledDocument,removeElement(Element elem),void,Removes an element from this document.,"

removeElement
public void removeElement(Element elem)
Removes an element from this document.

 The element is removed from its parent element, as well as
 the text in the range identified by the element.  If the
 element isn't associated with the document, IllegalArgumentException is thrown.
As empty branch elements are not allowed in the document, if the
 element is the sole child, its parent element is removed as well,
 recursively.  This means that when replacing all the children of a
 particular element, new children should be added before
 removing old children.

 Element removal results in two events being fired, the
 DocumentEvent for changes in element structure and UndoableEditEvent for changes in document content.
If the element contains end-of-content mark (the last ""\n"" character in document), this character is not removed;
 instead, preceding leaf element is extended to cover the
 character.  If the last leaf already ends with ""\n"", it is
 included in content removal.
If the element is null, NullPointerException is
 thrown.  If the element structure would become invalid after the removal,
 for example if the element is the document root element, IllegalArgumentException is thrown.  If the current element structure is
 invalid, IllegalStateException is thrown.

Parameters:
elem - the element to remove
Throws:
NullPointerException - if the element is null
IllegalArgumentException - if the element could not be removed
IllegalStateException - if the element structure is invalid
Since:
1.7


"
DefaultStyledDocument,removeStyle(String nm),void,Removes a named style previously added to the document.,"

removeStyle
public void removeStyle(String nm)
Removes a named style previously added to the document.

Specified by:
removeStyle in interface StyledDocument
Parameters:
nm - the name of the style to remove


"
DefaultStyledDocument,removeUpdate(AbstractDocument.DefaultDocumentEvent chng),protected void,Updates document structure as a result of text removal.,"

removeUpdate
protected void removeUpdate(AbstractDocument.DefaultDocumentEvent chng)
Updates document structure as a result of text removal.

Overrides:
removeUpdate in class AbstractDocument
Parameters:
chng - a description of the document change


"
DefaultStyledDocument,"setCharacterAttributes(int offset, int length, AttributeSet s, boolean replace)",void,Sets attributes for some part of the document.,"

setCharacterAttributes
public void setCharacterAttributes(int offset,
                                   int length,
                                   AttributeSet s,
                                   boolean replace)
Sets attributes for some part of the document.
 A write lock is held by this operation while changes
 are being made, and a DocumentEvent is sent to the listeners
 after the change has been successfully completed.
 
 This method is thread safe, although most Swing methods
 are not. Please see
 Concurrency
 in Swing for more information.

Specified by:
setCharacterAttributes in interface StyledDocument
Parameters:
offset - the offset in the document >= 0
length - the length >= 0
s - the attributes
replace - true if the previous attributes should be replaced
  before setting the new attributes


"
DefaultStyledDocument,"setLogicalStyle(int pos, Style s)",void,Sets the logical style to use for the paragraph at the given position.,"

setLogicalStyle
public void setLogicalStyle(int pos,
                            Style s)
Sets the logical style to use for the paragraph at the
 given position.  If attributes aren't explicitly set
 for character and paragraph attributes they will resolve
 through the logical style assigned to the paragraph, which
 in turn may resolve through some hierarchy completely
 independent of the element hierarchy in the document.
 
 This method is thread safe, although most Swing methods
 are not. Please see
 Concurrency
 in Swing for more information.

Specified by:
setLogicalStyle in interface StyledDocument
Parameters:
pos - the offset from the start of the document >= 0
s - the logical style to assign to the paragraph, null if none


"
DefaultStyledDocument,"setParagraphAttributes(int offset, int length, AttributeSet s, boolean replace)",void,Sets attributes for a paragraph.,"

setParagraphAttributes
public void setParagraphAttributes(int offset,
                                   int length,
                                   AttributeSet s,
                                   boolean replace)
Sets attributes for a paragraph.
 
 This method is thread safe, although most Swing methods
 are not. Please see
 Concurrency
 in Swing for more information.

Specified by:
setParagraphAttributes in interface StyledDocument
Parameters:
offset - the offset into the paragraph >= 0
length - the number of characters affected >= 0
s - the attributes
replace - whether to replace existing attributes, or merge them


"
DefaultStyledDocument,styleChanged(Style style),protected void,Called when any of this document's styles have changed.,"

styleChanged
protected void styleChanged(Style style)
Called when any of this document's styles have changed.
 Subclasses may wish to be intelligent about what gets damaged.

Parameters:
style - The Style that has changed.


"
DefaultStyledDocument.AttributeUndoableEdit,redo(),void,Redoes a change.,"

redo
public void redo()
          throws CannotRedoException
Redoes a change.

Specified by:
redo in interface UndoableEdit
Overrides:
redo in class AbstractUndoableEdit
Throws:
CannotRedoException - if the change cannot be redone
See Also:
AbstractUndoableEdit.canRedo()


"
DefaultStyledDocument.AttributeUndoableEdit,undo(),void,Undoes a change.,"

undo
public void undo()
          throws CannotUndoException
Undoes a change.

Specified by:
undo in interface UndoableEdit
Overrides:
undo in class AbstractUndoableEdit
Throws:
CannotUndoException - if the change cannot be undone
See Also:
AbstractUndoableEdit.canUndo()


"
DefaultStyledDocument.ElementSpec,getArray(),char[],Gets the array of characters.,"

getArray
public char[] getArray()
Gets the array of characters.

Returns:
the array


"
DefaultStyledDocument.ElementSpec,getAttributes(),AttributeSet,Gets the element attributes.,"

getAttributes
public AttributeSet getAttributes()
Gets the element attributes.

Returns:
the attribute set


"
DefaultStyledDocument.ElementSpec,getDirection(),short,Gets the direction.,"

getDirection
public short getDirection()
Gets the direction.

Returns:
the direction (JoinPreviousDirection, JoinNextDirection)


"
DefaultStyledDocument.ElementSpec,getLength(),int,Gets the length.,"

getLength
public int getLength()
Gets the length.

Returns:
the length >= 0


"
DefaultStyledDocument.ElementSpec,getOffset(),int,Gets the starting offset.,"

getOffset
public int getOffset()
Gets the starting offset.

Returns:
the offset >= 0


"
DefaultStyledDocument.ElementSpec,getType(),short,Gets the element type.,"

getType
public short getType()
Gets the element type.

Returns:
the type of the element (StartTagType, EndTagType,
  ContentType)


"
DefaultStyledDocument.ElementSpec,setDirection(short direction),void,Sets the direction.,"

setDirection
public void setDirection(short direction)
Sets the direction.

Parameters:
direction - the direction (JoinPreviousDirection,
   JoinNextDirection)


"
DefaultStyledDocument.ElementSpec,setType(short type),void,Sets the element type.,"

setType
public void setType(short type)
Sets the element type.

Parameters:
type - the type of the element (StartTagType, EndTagType,
  ContentType)


"
DefaultStyledDocument.ElementSpec,toString(),String,Converts the element to a string.,"

toString
public String toString()
Converts the element to a string.

Overrides:
toString in class Object
Returns:
the string


"
DocumentFilter,"insertString(DocumentFilter.FilterBypass fb, int offset, String string, AttributeSet attr)",void,Invoked prior to insertion of text into the specified Document.,"

insertString
public void insertString(DocumentFilter.FilterBypass fb,
                         int offset,
                         String string,
                         AttributeSet attr)
                  throws BadLocationException
Invoked prior to insertion of text into the
 specified Document. Subclasses that want to conditionally allow
 insertion should override this and only call supers implementation as
 necessary, or call directly into the FilterBypass.

Parameters:
fb - FilterBypass that can be used to mutate Document
offset - the offset into the document to insert the content >= 0.
    All positions that track change at or after the given location
    will move.
string - the string to insert
attr - the attributes to associate with the inserted
   content.  This may be null if there are no attributes.
Throws:
BadLocationException - the given insert position is not a
   valid position within the document


"
DocumentFilter,"remove(DocumentFilter.FilterBypass fb, int offset, int length)",void,Invoked prior to removal of the specified region in the specified Document.,"

remove
public void remove(DocumentFilter.FilterBypass fb,
                   int offset,
                   int length)
            throws BadLocationException
Invoked prior to removal of the specified region in the
 specified Document. Subclasses that want to conditionally allow
 removal should override this and only call supers implementation as
 necessary, or call directly into the FilterBypass as
 necessary.

Parameters:
fb - FilterBypass that can be used to mutate Document
offset - the offset from the beginning >= 0
length - the number of characters to remove >= 0
Throws:
BadLocationException - some portion of the removal range
   was not a valid part of the document.  The location in the exception
   is the first bad position encountered.


"
DocumentFilter,"replace(DocumentFilter.FilterBypass fb, int offset, int length, String text, AttributeSet attrs)",void,Invoked prior to replacing a region of text in the specified Document.,"

replace
public void replace(DocumentFilter.FilterBypass fb,
                    int offset,
                    int length,
                    String text,
                    AttributeSet attrs)
             throws BadLocationException
Invoked prior to replacing a region of text in the
 specified Document. Subclasses that want to conditionally allow
 replace should override this and only call supers implementation as
 necessary, or call directly into the FilterBypass.

Parameters:
fb - FilterBypass that can be used to mutate Document
offset - Location in Document
length - Length of text to delete
text - Text to insert, null indicates no text to insert
attrs - AttributeSet indicating attributes of inserted text,
              null is legal.
Throws:
BadLocationException - the given insert position is not a
   valid position within the document


"
DocumentFilter.FilterBypass,getDocument(),abstract Document,Returns the Document the mutation is occurring on.,"

getDocument
public abstract Document getDocument()
Returns the Document the mutation is occurring on.

Returns:
Document that remove/insertString will operate on


"
DocumentFilter.FilterBypass,"insertString(int offset, String string, AttributeSet attr)",abstract void,"Inserts the specified text, bypassing the DocumentFilter.","

insertString
public abstract void insertString(int offset,
                                  String string,
                                  AttributeSet attr)
                           throws BadLocationException
Inserts the specified text, bypassing the
 DocumentFilter.

Parameters:
offset - the offset into the document to insert the
   content >= 0. All positions that track change at or after the
   given location will move.
string - the string to insert
attr - the attributes to associate with the inserted
   content.  This may be null if there are no attributes.
Throws:
BadLocationException - the given insert position is not a
   valid position within the document


"
DocumentFilter.FilterBypass,"remove(int offset, int length)",abstract void,"Removes the specified region of text, bypassing the DocumentFilter.","

remove
public abstract void remove(int offset,
                            int length)
                     throws BadLocationException
Removes the specified region of text, bypassing the
 DocumentFilter.

Parameters:
offset - the offset from the beginning >= 0
length - the number of characters to remove >= 0
Throws:
BadLocationException - some portion of the removal range
   was not a valid part of the document.  The location in the
   exception is the first bad position encountered.


"
DocumentFilter.FilterBypass,"replace(int offset, int length, String string, AttributeSet attrs)",abstract void,"Deletes the region of text from offset to offset + length, and replaces it with text.","

replace
public abstract void replace(int offset,
                             int length,
                             String string,
                             AttributeSet attrs)
                      throws BadLocationException
Deletes the region of text from offset to
 offset + length, and replaces it with
  text.

Parameters:
offset - Location in Document
length - Length of text to delete
string - Text to insert, null indicates no text to insert
attrs - AttributeSet indicating attributes of inserted text,
              null is legal.
Throws:
BadLocationException - the given insert is not a
   valid position within the document


"
EditorKit,clone(),Object,Creates a copy of the editor kit.,"

clone
public Object clone()
Creates a copy of the editor kit.  This is implemented
 to use Object.clone().  If the kit cannot be cloned,
 null is returned.

Overrides:
clone in class Object
Returns:
the copy
See Also:
Cloneable


"
EditorKit,createCaret(),abstract Caret,Fetches a caret that can navigate through views produced by the associated ViewFactory.,"

createCaret
public abstract Caret createCaret()
Fetches a caret that can navigate through views
 produced by the associated ViewFactory.

Returns:
the caret


"
EditorKit,createDefaultDocument(),abstract Document,Creates an uninitialized text storage model that is appropriate for this type of editor.,"

createDefaultDocument
public abstract Document createDefaultDocument()
Creates an uninitialized text storage model
 that is appropriate for this type of editor.

Returns:
the model


"
EditorKit,deinstall(JEditorPane c),void,Called when the kit is being removed from the JEditorPane.,"

deinstall
public void deinstall(JEditorPane c)
Called when the kit is being removed from the
 JEditorPane.  This is used to unregister any
 listeners that were attached.

Parameters:
c - the JEditorPane


"
EditorKit,getActions(),abstract Action[],Fetches the set of commands that can be used on a text component that is using a model and view produced by this kit.,"

getActions
public abstract Action[] getActions()
Fetches the set of commands that can be used
 on a text component that is using a model and
 view produced by this kit.

Returns:
the set of actions


"
EditorKit,getContentType(),abstract String,Gets the MIME type of the data that this kit represents support for.,"

getContentType
public abstract String getContentType()
Gets the MIME type of the data that this
 kit represents support for.

Returns:
the type


"
EditorKit,getViewFactory(),abstract ViewFactory,Fetches a factory that is suitable for producing views of any models that are produced by this kit.,"

getViewFactory
public abstract ViewFactory getViewFactory()
Fetches a factory that is suitable for producing
 views of any models that are produced by this
 kit.

Returns:
the factory


"
EditorKit,install(JEditorPane c),void,Called when the kit is being installed into the a JEditorPane.,"

install
public void install(JEditorPane c)
Called when the kit is being installed into the
 a JEditorPane.

Parameters:
c - the JEditorPane


"
EditorKit,"read(InputStream in, Document doc, int pos)",abstract void,Inserts content from the given stream which is expected to be in a format appropriate for this kind of content handler.,"

read
public abstract void read(InputStream in,
                          Document doc,
                          int pos)
                   throws IOException,
                          BadLocationException
Inserts content from the given stream which is expected
 to be in a format appropriate for this kind of content
 handler.

Parameters:
in - The stream to read from
doc - The destination for the insertion.
pos - The location in the document to place the
   content >= 0.
Throws:
IOException - on any I/O error
BadLocationException - if pos represents an invalid
   location within the document.


"
EditorKit,"read(Reader in, Document doc, int pos)",abstract void,Inserts content from the given stream which is expected to be in a format appropriate for this kind of content handler.,"

read
public abstract void read(Reader in,
                          Document doc,
                          int pos)
                   throws IOException,
                          BadLocationException
Inserts content from the given stream which is expected
 to be in a format appropriate for this kind of content
 handler.
 
 Since actual text editing is unicode based, this would
 generally be the preferred way to read in the data.
 Some types of content are stored in an 8-bit form however,
 and will favor the InputStream.

Parameters:
in - The stream to read from
doc - The destination for the insertion.
pos - The location in the document to place the
   content >= 0.
Throws:
IOException - on any I/O error
BadLocationException - if pos represents an invalid
   location within the document.


"
EditorKit,"write(OutputStream out, Document doc, int pos, int len)",abstract void,Writes content from a document to the given stream in a format appropriate for this kind of content handler.,"

write
public abstract void write(OutputStream out,
                           Document doc,
                           int pos,
                           int len)
                    throws IOException,
                           BadLocationException
Writes content from a document to the given stream
 in a format appropriate for this kind of content handler.

Parameters:
out - The stream to write to
doc - The source for the write.
pos - The location in the document to fetch the
   content from >= 0.
len - The amount to write out >= 0.
Throws:
IOException - on any I/O error
BadLocationException - if pos represents an invalid
   location within the document.


"
EditorKit,"write(Writer out, Document doc, int pos, int len)",abstract void,Writes content from a document to the given stream in a format appropriate for this kind of content handler.,"

write
public abstract void write(Writer out,
                           Document doc,
                           int pos,
                           int len)
                    throws IOException,
                           BadLocationException
Writes content from a document to the given stream
 in a format appropriate for this kind of content handler.
 
 Since actual text editing is unicode based, this would
 generally be the preferred way to write the data.
 Some types of content are stored in an 8-bit form however,
 and will favor the OutputStream.

Parameters:
out - The stream to write to
doc - The source for the write.
pos - The location in the document to fetch the
   content >= 0.
len - The amount to write out >= 0.
Throws:
IOException - on any I/O error
BadLocationException - if pos represents an invalid
   location within the document.


"
ElementIterator,clone(),Object,Clones the ElementIterator.,"

clone
public Object clone()
Clones the ElementIterator.

Overrides:
clone in class Object
Returns:
a cloned ElementIterator Object.
See Also:
Cloneable


"
ElementIterator,current(),Element,Fetches the current Element.,"

current
public Element current()
Fetches the current Element.

Returns:
element on top of the stack or
          null if the root element is null


"
ElementIterator,depth(),int,Fetches the current depth of element tree.,"

depth
public int depth()
Fetches the current depth of element tree.

Returns:
the depth.


"
ElementIterator,first(),Element,Fetches the first element.,"

first
public Element first()
Fetches the first element.

Returns:
an Element.


"
ElementIterator,next(),Element,Fetches the next Element.,"

next
public Element next()
Fetches the next Element. The strategy
 used to locate the next element is
 a depth-first search.

Returns:
the next element or null
          at the end of the list.


"
ElementIterator,previous(),Element,Fetches the previous Element.,"

previous
public Element previous()
Fetches the previous Element. If however the current
 element is the last element, or the current element
 is null, then null is returned.

Returns:
previous Element if available


"
FieldView,adjustAllocation(Shape a),protected Shape,Adjusts the allocation given to the view to be a suitable allocation for a text field.,"

adjustAllocation
protected Shape adjustAllocation(Shape a)
Adjusts the allocation given to the view
 to be a suitable allocation for a text field.
 If the view has been allocated more than the
 preferred span vertically, the allocation is
 changed to be centered vertically.  Horizontally
 the view is adjusted according to the horizontal
 alignment property set on the associated JTextField
 (if that is the type of the hosting component).

Parameters:
a - the allocation given to the view, which may need
  to be adjusted.
Returns:
the allocation that the superclass should use.


"
FieldView,getFontMetrics(),protected FontMetrics,Fetches the font metrics associated with the component hosting this view.,"

getFontMetrics
protected FontMetrics getFontMetrics()
Fetches the font metrics associated with the component hosting
 this view.

Returns:
the metrics


"
FieldView,getPreferredSpan(int axis),float,Determines the preferred span for this view along an axis.,"

getPreferredSpan
public float getPreferredSpan(int axis)
Determines the preferred span for this view along an
 axis.

Overrides:
getPreferredSpan in class PlainView
Parameters:
axis - may be either View.X_AXIS or View.Y_AXIS
Returns:
the span the view would like to be rendered into >= 0.
           Typically the view is told to render into the span
           that is returned, although there is no guarantee.
           The parent may choose to resize or break the view.
See Also:
View.getPreferredSpan(int)


"
FieldView,getResizeWeight(int axis),int,Determines the resizability of the view along the given axis.,"

getResizeWeight
public int getResizeWeight(int axis)
Determines the resizability of the view along the
 given axis.  A value of 0 or less is not resizable.

Overrides:
getResizeWeight in class View
Parameters:
axis - View.X_AXIS or View.Y_AXIS
Returns:
the weight -> 1 for View.X_AXIS, else 0


"
FieldView,"insertUpdate(DocumentEvent changes, Shape a, ViewFactory f)",void,Gives notification that something was inserted into the document in a location that this view is responsible for.,"

insertUpdate
public void insertUpdate(DocumentEvent changes,
                         Shape a,
                         ViewFactory f)
Gives notification that something was inserted into the document
 in a location that this view is responsible for.

Overrides:
insertUpdate in class PlainView
Parameters:
changes - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
View.insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
FieldView,"modelToView(int pos, Shape a, Position.Bias b)",Shape,Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.,"

modelToView
public Shape modelToView(int pos,
                         Shape a,
                         Position.Bias b)
                  throws BadLocationException
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.

Overrides:
modelToView in class PlainView
Parameters:
pos - the position to convert >= 0
a - the allocated region to render into
b - the bias toward the previous character or the
  next character represented by the offset, in case the
  position is a boundary of two views; b will have one
  of these values:
 
 Position.Bias.Forward
 Position.Bias.Backward

Returns:
the bounding box of the given position
Throws:
BadLocationException - if the given position does not
   represent a valid location in the associated document
See Also:
View.modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias)


"
FieldView,"paint(Graphics g, Shape a)",void,Renders using the given rendering surface and area on that surface.,"

paint
public void paint(Graphics g,
                  Shape a)
Renders using the given rendering surface and area on that surface.
 The view may need to do layout and create child views to enable
 itself to render into the given allocation.

Overrides:
paint in class PlainView
Parameters:
g - the rendering surface to use
a - the allocated region to render into
See Also:
View.paint(java.awt.Graphics, java.awt.Shape)


"
FieldView,"removeUpdate(DocumentEvent changes, Shape a, ViewFactory f)",void,Gives notification that something was removed from the document in a location that this view is responsible for.,"

removeUpdate
public void removeUpdate(DocumentEvent changes,
                         Shape a,
                         ViewFactory f)
Gives notification that something was removed from the document
 in a location that this view is responsible for.

Overrides:
removeUpdate in class PlainView
Parameters:
changes - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
View.removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
FieldView,"viewToModel(float fx, float fy, Shape a, Position.Bias[] bias)",int,Provides a mapping from the view coordinate space to the logical coordinate space of the model.,"

viewToModel
public int viewToModel(float fx,
                       float fy,
                       Shape a,
                       Position.Bias[] bias)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.

Overrides:
viewToModel in class PlainView
Parameters:
fx - the X coordinate >= 0.0f
fy - the Y coordinate >= 0.0f
a - the allocated region to render into
Returns:
the location within the model that best represents the
  given point in the view
See Also:
View.viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[])


"
FlowView,"calculateMinorAxisRequirements(int axis, SizeRequirements r)",protected SizeRequirements,Calculate requirements along the minor axis.,"

calculateMinorAxisRequirements
protected SizeRequirements calculateMinorAxisRequirements(int axis,
                                                          SizeRequirements r)
Calculate requirements along the minor axis.  This
 is implemented to forward the request to the logical
 view by calling getMinimumSpan, getPreferredSpan, and
 getMaximumSpan on it.

Overrides:
calculateMinorAxisRequirements in class BoxView
Parameters:
axis - the axis being studied
r - the SizeRequirements object;
          if null one will be created
Returns:
the newly initialized SizeRequirements object
See Also:
SizeRequirements


"
FlowView,"changedUpdate(DocumentEvent changes, Shape a, ViewFactory f)",void,Gives notification from the document that attributes were changed in a location that this view is responsible for.,"

changedUpdate
public void changedUpdate(DocumentEvent changes,
                          Shape a,
                          ViewFactory f)
Gives notification from the document that attributes were changed
 in a location that this view is responsible for.

Overrides:
changedUpdate in class View
Parameters:
changes - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
View.changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
FlowView,createRow(),protected abstract View,Create a View that should be used to hold a a rows worth of children in a flow.,"

createRow
protected abstract View createRow()
Create a View that should be used to hold a
 a rows worth of children in a flow.  This is
 called by the FlowStrategy when new children
 are added or removed (i.e. rows are added or
 removed) in the process of updating the flow.

"
FlowView,getFlowAxis(),int,Fetches the axis along which views should be flowed.,"

getFlowAxis
public int getFlowAxis()
Fetches the axis along which views should be
 flowed.  By default, this will be the axis
 orthogonal to the axis along which the flow
 rows are tiled (the axis of the default flow
 rows themselves).  This is typically used
 by the FlowStrategy.

"
FlowView,getFlowSpan(int index),int,Fetch the constraining span to flow against for the given child index.,"

getFlowSpan
public int getFlowSpan(int index)
Fetch the constraining span to flow against for
 the given child index.  This is called by the
 FlowStrategy while it is updating the flow.
 A flow can be shaped by providing different values
 for the row constraints.  By default, the entire
 span inside of the insets along the flow axis
 is returned.

Parameters:
index - the index of the row being updated.
   This should be a value >= 0 and < getViewCount().
See Also:
getFlowStart(int)


"
FlowView,getFlowStart(int index),int,Fetch the location along the flow axis that the flow span will start at.,"

getFlowStart
public int getFlowStart(int index)
Fetch the location along the flow axis that the
 flow span will start at.  This is called by the
 FlowStrategy while it is updating the flow.
 A flow can be shaped by providing different values
 for the row constraints.

Parameters:
index - the index of the row being updated.
   This should be a value >= 0 and < getViewCount().
See Also:
getFlowSpan(int)


"
FlowView,getViewIndexAtPosition(int pos),protected int,Fetches the child view index representing the given position in the model.,"

getViewIndexAtPosition
protected int getViewIndexAtPosition(int pos)
Fetches the child view index representing the given position in
 the model.

Overrides:
getViewIndexAtPosition in class CompositeView
Parameters:
pos - the position >= 0
Returns:
index of the view representing the given position, or
   -1 if no view represents that position


"
FlowView,"insertUpdate(DocumentEvent changes, Shape a, ViewFactory f)",void,Gives notification that something was inserted into the document in a location that this view is responsible for.,"

insertUpdate
public void insertUpdate(DocumentEvent changes,
                         Shape a,
                         ViewFactory f)
Gives notification that something was inserted into the document
 in a location that this view is responsible for.

Overrides:
insertUpdate in class View
Parameters:
changes - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
View.insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
FlowView,"layout(int width, int height)",protected void,Lays out the children.,"

layout
protected void layout(int width,
                      int height)
Lays out the children.  If the span along the flow
 axis has changed, layout is marked as invalid which
 which will cause the superclass behavior to recalculate
 the layout along the box axis.  The FlowStrategy.layout
 method will be called to rebuild the flow rows as
 appropriate.  If the height of this view changes
 (determined by the preferred size along the box axis),
 a preferenceChanged is called.  Following all of that,
 the normal box layout of the superclass is performed.

Overrides:
layout in class BoxView
Parameters:
width - the width to lay out against >= 0.  This is
   the width inside of the inset area.
height - the height to lay out against >= 0 This
   is the height inside of the inset area.


"
FlowView,loadChildren(ViewFactory f),protected void,Loads all of the children to initialize the view.,"

loadChildren
protected void loadChildren(ViewFactory f)
Loads all of the children to initialize the view.
 This is called by the setParent method.
 This is reimplemented to not load any children directly
 (as they are created in the process of formatting).
 If the layoutPool variable is null, an instance of
 LogicalView is created to represent the logical view
 that is used in the process of formatting.

Overrides:
loadChildren in class CompositeView
Parameters:
f - the view factory
See Also:
CompositeView.setParent(javax.swing.text.View)


"
FlowView,"removeUpdate(DocumentEvent changes, Shape a, ViewFactory f)",void,Gives notification that something was removed from the document in a location that this view is responsible for.,"

removeUpdate
public void removeUpdate(DocumentEvent changes,
                         Shape a,
                         ViewFactory f)
Gives notification that something was removed from the document
 in a location that this view is responsible for.

Overrides:
removeUpdate in class View
Parameters:
changes - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
View.removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
FlowView,setParent(View parent),void,Sets the parent of the view.,"

setParent
public void setParent(View parent)
Sets the parent of the view.
 This is reimplemented to provide the superclass
 behavior as well as calling the loadChildren
 method if this view does not already have children.
 The children should not be loaded in the
 constructor because the act of setting the parent
 may cause them to try to search up the hierarchy
 (to get the hosting Container for example).
 If this view has children (the view is being moved
 from one place in the view hierarchy to another),
 the loadChildren method will not be called.

Overrides:
setParent in class CompositeView
Parameters:
parent - the parent of the view, null if none


"
FlowView.FlowStrategy,"adjustRow(FlowView fv, int rowIndex, int desiredSpan, int x)",protected void,Adjusts the given row if possible to fit within the layout span.,"

adjustRow
protected void adjustRow(FlowView fv,
                         int rowIndex,
                         int desiredSpan,
                         int x)
Adjusts the given row if possible to fit within the
 layout span.  By default this will try to find the
 highest break weight possible nearest the end of
 the row.  If a forced break is encountered, the
 break will be positioned there.

Parameters:
rowIndex - the row to adjust to the current layout
  span.
desiredSpan - the current layout span >= 0
x - the location r starts at.


"
FlowView.FlowStrategy,"changedUpdate(FlowView fv, DocumentEvent e, Rectangle alloc)",void,Gives notification from the document that attributes were changed in a location that this view is responsible for.,"

changedUpdate
public void changedUpdate(FlowView fv,
                          DocumentEvent e,
                          Rectangle alloc)
Gives notification from the document that attributes were changed
 in a location that this view is responsible for.

Parameters:
fv - the FlowView containing the changes
e - the DocumentEvent describing the changes
               done to the Document
alloc - Bounds of the View
See Also:
View.changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
FlowView.FlowStrategy,"createView(FlowView fv, int startOffset, int spanLeft, int rowIndex)",protected View,Creates a view that can be used to represent the current piece of the flow.,"

createView
protected View createView(FlowView fv,
                          int startOffset,
                          int spanLeft,
                          int rowIndex)
Creates a view that can be used to represent the current piece
 of the flow.  This can be either an entire view from the
 logical view, or a fragment of the logical view.

Parameters:
fv - the view holding the flow
startOffset - the start location for the view being created
spanLeft - the about of span left to fill in the row
rowIndex - the row the view will be placed into


"
FlowView.FlowStrategy,getLogicalView(FlowView fv),protected View,This method gives flow strategies access to the logical view of the FlowView.,"

getLogicalView
protected View getLogicalView(FlowView fv)
This method gives flow strategies access to the logical
 view of the FlowView.

"
FlowView.FlowStrategy,"insertUpdate(FlowView fv, DocumentEvent e, Rectangle alloc)",void,Gives notification that something was inserted into the document in a location that the given flow view is responsible for.,"

insertUpdate
public void insertUpdate(FlowView fv,
                         DocumentEvent e,
                         Rectangle alloc)
Gives notification that something was inserted into the document
 in a location that the given flow view is responsible for.  The
 strategy should update the appropriate changed region (which
 depends upon the strategy used for repair).

Parameters:
e - the change information from the associated document
alloc - the current allocation of the view inside of the insets.
   This value will be null if the view has not yet been displayed.
See Also:
View.insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
FlowView.FlowStrategy,layout(FlowView fv),void,Update the flow on the given FlowView.,"

layout
public void layout(FlowView fv)
Update the flow on the given FlowView.  By default, this causes
 all of the rows (child views) to be rebuilt to match the given
 constraints for each row.  This is called by a FlowView.layout
 to update the child views in the flow.

Parameters:
fv - the view to reflow


"
FlowView.FlowStrategy,"layoutRow(FlowView fv, int rowIndex, int pos)",protected int,Creates a row of views that will fit within the layout span of the row.,"

layoutRow
protected int layoutRow(FlowView fv,
                        int rowIndex,
                        int pos)
Creates a row of views that will fit within the
 layout span of the row.  This is called by the layout method.
 This is implemented to fill the row by repeatedly calling
 the createView method until the available span has been
 exhausted, a forced break was encountered, or the createView
 method returned null.  If the remaining span was exhausted,
 the adjustRow method will be called to perform adjustments
 to the row to try and make it fit into the given span.

Parameters:
rowIndex - the index of the row to fill in with views.  The
   row is assumed to be empty on entry.
pos - The current position in the children of
   this views element from which to start.
Returns:
the position to start the next row


"
FlowView.FlowStrategy,"removeUpdate(FlowView fv, DocumentEvent e, Rectangle alloc)",void,Gives notification that something was removed from the document in a location that the given flow view is responsible for.,"

removeUpdate
public void removeUpdate(FlowView fv,
                         DocumentEvent e,
                         Rectangle alloc)
Gives notification that something was removed from the document
 in a location that the given flow view is responsible for.

Parameters:
e - the change information from the associated document
alloc - the current allocation of the view inside of the insets.
See Also:
View.removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
GapContent,allocateArray(int len),protected Object,Allocate an array to store items of the type appropriate (which is determined by the subclass).,"

allocateArray
protected Object allocateArray(int len)
Allocate an array to store items of the type
 appropriate (which is determined by the subclass).

"
GapContent,createPosition(int offset),Position,Creates a position within the content that will track change as the content is mutated.,"

createPosition
public Position createPosition(int offset)
                        throws BadLocationException
Creates a position within the content that will
 track change as the content is mutated.

Specified by:
createPosition in interface AbstractDocument.Content
Parameters:
offset - the offset to track >= 0
Returns:
the position
Throws:
BadLocationException - if the specified position is invalid


"
GapContent,getArray(),protected Object,Access to the array.,"

getArray
protected final Object getArray()
Access to the array.  The actual type
 of the array is known only by the subclass.

"
GapContent,getArrayLength(),protected int,Get the length of the allocated array.,"

getArrayLength
protected int getArrayLength()
Get the length of the allocated array.

"
GapContent,"getChars(int where, int len, Segment chars)",void,Retrieves a portion of the content.,"

getChars
public void getChars(int where,
                     int len,
                     Segment chars)
              throws BadLocationException
Retrieves a portion of the content.  If the desired content spans
 the gap, we copy the content.  If the desired content does not
 span the gap, the actual store is returned to avoid the copy since
 it is contiguous.

Specified by:
getChars in interface AbstractDocument.Content
Parameters:
where - the starting position >= 0, where + len <= length()
len - the number of characters to retrieve >= 0
chars - the Segment object to return the characters in
Throws:
BadLocationException - if the specified position is invalid
See Also:
AbstractDocument.Content.getChars(int, int, javax.swing.text.Segment)


"
GapContent,getGapEnd(),protected int,Access to the end of the gap.,"

getGapEnd
protected final int getGapEnd()
Access to the end of the gap.

"
GapContent,getGapStart(),protected int,Access to the start of the gap.,"

getGapStart
protected final int getGapStart()
Access to the start of the gap.

"
GapContent,"getPositionsInRange(Vector v, int offset, int length)",protected Vector,Returns a Vector containing instances of UndoPosRef for the Positions in the range offset to offset + length.,"

getPositionsInRange
protected Vector getPositionsInRange(Vector v,
                                     int offset,
                                     int length)
Returns a Vector containing instances of UndoPosRef for the
 Positions in the range
 offset to offset + length.
 If v is not null the matching Positions are placed in
 there. The vector with the resulting Positions are returned.

Parameters:
v - the Vector to use, with a new one created on null
offset - the starting offset >= 0
length - the length >= 0
Returns:
the set of instances


"
GapContent,"getString(int where, int len)",String,Retrieves a portion of the content.,"

getString
public String getString(int where,
                        int len)
                 throws BadLocationException
Retrieves a portion of the content.

Specified by:
getString in interface AbstractDocument.Content
Parameters:
where - the starting position >= 0
len - the length to retrieve >= 0
Returns:
a string representing the content
Throws:
BadLocationException - if the specified position is invalid
See Also:
AbstractDocument.Content.getString(int, int)


"
GapContent,"insertString(int where, String str)",UndoableEdit,Inserts a string into the content.,"

insertString
public UndoableEdit insertString(int where,
                                 String str)
                          throws BadLocationException
Inserts a string into the content.

Specified by:
insertString in interface AbstractDocument.Content
Parameters:
where - the starting position >= 0, < length()
str - the non-null string to insert
Returns:
an UndoableEdit object for undoing
Throws:
BadLocationException - if the specified position is invalid
See Also:
AbstractDocument.Content.insertString(int, java.lang.String)


"
GapContent,length(),int,Returns the length of the content.,"

length
public int length()
Returns the length of the content.

Specified by:
length in interface AbstractDocument.Content
Returns:
the length >= 1
See Also:
AbstractDocument.Content.length()


"
GapContent,"remove(int where, int nitems)",UndoableEdit,Removes part of the content.,"

remove
public UndoableEdit remove(int where,
                           int nitems)
                    throws BadLocationException
Removes part of the content.

Specified by:
remove in interface AbstractDocument.Content
Parameters:
where - the starting position >= 0, where + nitems < length()
nitems - the number of characters to remove >= 0
Returns:
an UndoableEdit object for undoing
Throws:
BadLocationException - if the specified position is invalid
See Also:
AbstractDocument.Content.remove(int, int)


"
GapContent,"replace(int position, int rmSize, Object addItems, int addSize)",protected void,Replace the given logical position in the storage with the given new items.,"

replace
protected void replace(int position,
                       int rmSize,
                       Object addItems,
                       int addSize)
Replace the given logical position in the storage with
 the given new items.  This will move the gap to the area
 being changed if the gap is not currently located at the
 change location.

Parameters:
position - the location to make the replacement.  This
  is not the location in the underlying storage array, but
  the location in the contiguous space being modeled.
rmSize - the number of items to remove
addItems - the new items to place in storage.


"
GapContent,resetMarksAtZero(),protected void,Resets all the marks that have an offset of 0 to have an index of zero as well.,"

resetMarksAtZero
protected void resetMarksAtZero()
Resets all the marks that have an offset of 0 to have an index of
 zero as well.

"
GapContent,shiftEnd(int newSize),protected void,"Make the gap bigger, moving any necessary data and updating the appropriate marks","

shiftEnd
protected void shiftEnd(int newSize)
Make the gap bigger, moving any necessary data and updating
 the appropriate marks

"
GapContent,shiftGap(int newGapStart),protected void,"Move the start of the gap to a new location, without changing the size of the gap.","

shiftGap
protected void shiftGap(int newGapStart)
Move the start of the gap to a new location,
 without changing the size of the gap.  This
 moves the data in the array and updates the
 marks accordingly.

"
GapContent,shiftGapEndUp(int newGapEnd),protected void,Adjust the gap end upward.,"

shiftGapEndUp
protected void shiftGapEndUp(int newGapEnd)
Adjust the gap end upward.  This doesn't move
 any data, but it does update any marks affected
 by the boundary change. All marks from the old
 gap end up to the new gap end are squeezed
 to the end of the gap (their location has been
 removed).

"
GapContent,shiftGapStartDown(int newGapStart),protected void,Adjust the gap end downward.,"

shiftGapStartDown
protected void shiftGapStartDown(int newGapStart)
Adjust the gap end downward.  This doesn't move
 any data, but it does update any marks affected
 by the boundary change.  All marks from the old
 gap start down to the new gap start are squeezed
 to the end of the gap (their location has been
 removed).

"
GapContent,"updateUndoPositions(Vector positions, int offset, int length)",protected void,Resets the location for all the UndoPosRef instances in positions.,"

updateUndoPositions
protected void updateUndoPositions(Vector positions,
                                   int offset,
                                   int length)
Resets the location for all the UndoPosRef instances
 in positions.
 
 This is meant for internal usage, and is generally not of interest
 to subclasses.

Parameters:
positions - the UndoPosRef instances to reset


"
GlyphView,"breakView(int axis, int p0, float pos, float len)",View,Breaks this view on the given axis at the given length.,"

breakView
public View breakView(int axis,
                      int p0,
                      float pos,
                      float len)
Breaks this view on the given axis at the given length.
 This is implemented to attempt to break on a whitespace
 location, and returns a fragment with the whitespace at
 the end.  If a whitespace location can't be found, the
 nearest character is used.

Overrides:
breakView in class View
Parameters:
axis - may be either View.X_AXIS or View.Y_AXIS
p0 - the location in the model where the
  fragment should start it's representation >= 0.
pos - the position along the axis that the
  broken view would occupy >= 0.  This may be useful for
  things like tab calculations.
len - specifies the distance along the axis
  where a potential break is desired >= 0.
Returns:
the fragment of the view that represents the
  given span, if the view can be broken.  If the view
  doesn't support breaking behavior, the view itself is
  returned.
See Also:
View.breakView(int, int, float, float)


"
GlyphView,"changedUpdate(DocumentEvent e, Shape a, ViewFactory f)",void,Gives notification from the document that attributes were changed in a location that this view is responsible for.,"

changedUpdate
public void changedUpdate(DocumentEvent e,
                          Shape a,
                          ViewFactory f)
Gives notification from the document that attributes were changed
 in a location that this view is responsible for.
 This is implemented to call preferenceChanged along both the
 horizontal and vertical axis.

Overrides:
changedUpdate in class View
Parameters:
e - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
View.changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
GlyphView,checkPainter(),protected void,Check to see that a glyph painter exists.,"

checkPainter
protected void checkPainter()
Check to see that a glyph painter exists.  If a painter
 doesn't exist, a default glyph painter will be installed.

"
GlyphView,clone(),protected Object,Creates a shallow copy.,"

clone
protected final Object clone()
Creates a shallow copy.  This is used by the
 createFragment and breakView methods.

Overrides:
clone in class Object
Returns:
the copy
See Also:
Cloneable


"
GlyphView,"createFragment(int p0, int p1)",View,Creates a view that represents a portion of the element.,"

createFragment
public View createFragment(int p0,
                           int p1)
Creates a view that represents a portion of the element.
 This is potentially useful during formatting operations
 for taking measurements of fragments of the view.  If
 the view doesn't support fragmenting (the default), it
 should return itself.
 
 This view does support fragmenting.  It is implemented
 to return a nested class that shares state in this view
 representing only a portion of the view.

Overrides:
createFragment in class View
Parameters:
p0 - the starting offset >= 0.  This should be a value
   greater or equal to the element starting offset and
   less than the element ending offset.
p1 - the ending offset > p0.  This should be a value
   less than or equal to the elements end offset and
   greater than the elements starting offset.
Returns:
the view fragment, or itself if the view doesn't
   support breaking into fragments
See Also:
LabelView


"
GlyphView,getAlignment(int axis),float,Determines the desired alignment for this view along an axis.,"

getAlignment
public float getAlignment(int axis)
Determines the desired alignment for this view along an
 axis.  For the label, the alignment is along the font
 baseline for the y axis, and the superclasses alignment
 along the x axis.

Overrides:
getAlignment in class View
Parameters:
axis - may be either View.X_AXIS or View.Y_AXIS
Returns:
the desired alignment.  This should be a value
   between 0.0 and 1.0 inclusive, where 0 indicates alignment at the
   origin and 1.0 indicates alignment to the full span
   away from the origin.  An alignment of 0.5 would be the
   center of the view.


"
GlyphView,getBackground(),Color,Fetch the background color to use to render the glyphs.,"

getBackground
public Color getBackground()
Fetch the background color to use to render the
 glyphs.  If there is no background color, null should
 be returned.  This is implemented to call
 StyledDocument.getBackground if the associated
 document is a styled document, otherwise it returns null.

"
GlyphView,"getBreakWeight(int axis, float pos, float len)",int,Determines how attractive a break opportunity in this view is.,"

getBreakWeight
public int getBreakWeight(int axis,
                          float pos,
                          float len)
Determines how attractive a break opportunity in
 this view is.  This can be used for determining which
 view is the most attractive to call breakView
 on in the process of formatting.  The
 higher the weight, the more attractive the break.  A
 value equal to or lower than View.BadBreakWeight
 should not be considered for a break.  A value greater
 than or equal to View.ForcedBreakWeight should
 be broken.
 
 This is implemented to forward to the superclass for
 the Y_AXIS.  Along the X_AXIS the following values
 may be returned.
 
View.ExcellentBreakWeight
if there is whitespace proceeding the desired break
   location.
 View.BadBreakWeight
if the desired break location results in a break
   location of the starting offset.
 View.GoodBreakWeight
if the other conditions don't occur.
 
 This will normally result in the behavior of breaking
 on a whitespace location if one can be found, otherwise
 breaking between characters.

Overrides:
getBreakWeight in class View
Parameters:
axis - may be either View.X_AXIS or View.Y_AXIS
pos - the potential location of the start of the
   broken view >= 0.  This may be useful for calculating tab
   positions.
len - specifies the relative length from pos
   where a potential break is desired >= 0.
Returns:
the weight, which should be a value between
   View.ForcedBreakWeight and View.BadBreakWeight.
See Also:
LabelView, 
ParagraphView, 
View.BadBreakWeight, 
View.GoodBreakWeight, 
View.ExcellentBreakWeight, 
View.ForcedBreakWeight


"
GlyphView,getEndOffset(),int,Fetches the portion of the model that this view is responsible for.,"

getEndOffset
public int getEndOffset()
Fetches the portion of the model that this view is responsible for.

Overrides:
getEndOffset in class View
Returns:
the ending offset into the model
See Also:
View.getEndOffset()


"
GlyphView,getFont(),Font,Fetch the font that the glyphs should be based upon.,"

getFont
public Font getFont()
Fetch the font that the glyphs should be based
 upon.  This is implemented to call
 StyledDocument.getFont if the associated
 document is a StyledDocument.  If the associated document
 is not a StyledDocument, the associated components font
 is used.  If there is no associated component, null
 is returned.

"
GlyphView,getForeground(),Color,Fetch the foreground color to use to render the glyphs.,"

getForeground
public Color getForeground()
Fetch the foreground color to use to render the
 glyphs.  If there is no foreground color, null should
 be returned.  This is implemented to call
 StyledDocument.getBackground if the associated
 document is a StyledDocument.  If the associated document
 is not a StyledDocument, the associated components foreground
 color is used.  If there is no associated component, null
 is returned.

"
GlyphView,getGlyphPainter(),GlyphView.GlyphPainter,Fetch the currently installed glyph painter.,"

getGlyphPainter
public GlyphView.GlyphPainter getGlyphPainter()
Fetch the currently installed glyph painter.
 If a painter has not yet been installed, and
 a default was not yet needed, null is returned.

"
GlyphView,getMinimumSpan(int axis),float,Determines the minimum span for this view along an axis.,"

getMinimumSpan
public float getMinimumSpan(int axis)
Determines the minimum span for this view along an axis.

 This implementation returns the longest non-breakable area within
 the view as a minimum span for View.X_AXIS.

Overrides:
getMinimumSpan in class View
Parameters:
axis - may be either View.X_AXIS or View.Y_AXIS
Returns:
the minimum span the view can be rendered into
Throws:
IllegalArgumentException - if the axis parameter is invalid
See Also:
View.getMinimumSpan(int)


"
GlyphView,"getNextVisualPositionFrom(int pos, Position.Bias b, Shape a, int direction, Position.Bias[] biasRet)",int,Provides a way to determine the next visually represented model location that one might place a caret.,"

getNextVisualPositionFrom
public int getNextVisualPositionFrom(int pos,
                                     Position.Bias b,
                                     Shape a,
                                     int direction,
                                     Position.Bias[] biasRet)
                              throws BadLocationException
Provides a way to determine the next visually represented model
 location that one might place a caret.  Some views may not be
 visible, they might not be in the same order found in the model, or
 they just might not allow access to some of the locations in the
 model.
 This method enables specifying a position to convert
 within the range of >=0.  If the value is -1, a position
 will be calculated automatically.  If the value < -1,
 the BadLocationException will be thrown.

Overrides:
getNextVisualPositionFrom in class View
Parameters:
pos - the position to convert
a - the allocated region to render into
direction - the direction from the current position that can
  be thought of as the arrow keys typically found on a keyboard.
  This may be SwingConstants.WEST, SwingConstants.EAST,
  SwingConstants.NORTH, or SwingConstants.SOUTH.
Returns:
the location within the model that best represents the next
  location visual position.
Throws:
BadLocationException - the given position is not a valid
                                 position within the document
IllegalArgumentException - for an invalid direction


"
GlyphView,"getPartialSpan(int p0, int p1)",float,Determines the span along the same axis as tab expansion for a portion of the view.,"

getPartialSpan
public float getPartialSpan(int p0,
                            int p1)
Determines the span along the same axis as tab
 expansion for a portion of the view.  This is
 intended for use by the TabExpander for cases
 where the tab expansion involves aligning the
 portion of text that doesn't have whitespace
 relative to the tab stop.  There is therefore
 an assumption that the range given does not
 contain tabs.
 
 This method can be called while servicing the
 getTabbedSpan or getPreferredSize.  It has to
 arrange for its own text buffer to make the
 measurements.

Specified by:
getPartialSpan in interface TabableView
Parameters:
p0 - the starting document offset >= 0
p1 - the ending document offset >= p0
Returns:
the span >= 0


"
GlyphView,getPreferredSpan(int axis),float,Determines the preferred span for this view along an axis.,"

getPreferredSpan
public float getPreferredSpan(int axis)
Determines the preferred span for this view along an
 axis.

Specified by:
getPreferredSpan in class View
Parameters:
axis - may be either View.X_AXIS or View.Y_AXIS
Returns:
the span the view would like to be rendered into >= 0.
           Typically the view is told to render into the span
           that is returned, although there is no guarantee.
           The parent may choose to resize or break the view.
See Also:
View.getPreferredSpan(int)


"
GlyphView,getStartOffset(),int,Fetches the portion of the model that this view is responsible for.,"

getStartOffset
public int getStartOffset()
Fetches the portion of the model that this view is responsible for.

Overrides:
getStartOffset in class View
Returns:
the starting offset into the model
See Also:
View.getStartOffset()


"
GlyphView,"getTabbedSpan(float x, TabExpander e)",float,Determines the desired span when using the given tab expansion implementation.,"

getTabbedSpan
public float getTabbedSpan(float x,
                           TabExpander e)
Determines the desired span when using the given
 tab expansion implementation.

Specified by:
getTabbedSpan in interface TabableView
Parameters:
x - the position the view would be located
  at for the purpose of tab expansion >= 0.
e - how to expand the tabs when encountered.
Returns:
the desired span >= 0
See Also:
TabableView.getTabbedSpan(float, javax.swing.text.TabExpander)


"
GlyphView,getTabExpander(),TabExpander,Fetch the TabExpander to use if tabs are present in this view.,"

getTabExpander
public TabExpander getTabExpander()
Fetch the TabExpander to use if tabs are present in this view.

"
GlyphView,"getText(int p0, int p1)",Segment,Fetch a reference to the text that occupies the given range.,"

getText
public Segment getText(int p0,
                       int p1)
Fetch a reference to the text that occupies
 the given range.  This is normally used by
 the GlyphPainter to determine what characters
 it should render glyphs for.

Parameters:
p0 - the starting document offset >= 0
p1 - the ending document offset >= p0
Returns:
the Segment containing the text


"
GlyphView,"insertUpdate(DocumentEvent e, Shape a, ViewFactory f)",void,Gives notification that something was inserted into the document in a location that this view is responsible for.,"

insertUpdate
public void insertUpdate(DocumentEvent e,
                         Shape a,
                         ViewFactory f)
Gives notification that something was inserted into
 the document in a location that this view is responsible for.
 This is implemented to call preferenceChanged along the
 axis the glyphs are rendered.

Overrides:
insertUpdate in class View
Parameters:
e - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
View.insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
GlyphView,isStrikeThrough(),boolean,Determine if the glyphs should have a strikethrough line.,"

isStrikeThrough
public boolean isStrikeThrough()
Determine if the glyphs should have a strikethrough
 line.  If true, a line should be drawn through the center
 of the glyphs.

"
GlyphView,isSubscript(),boolean,Determine if the glyphs should be rendered as superscript.,"

isSubscript
public boolean isSubscript()
Determine if the glyphs should be rendered as superscript.

"
GlyphView,isSuperscript(),boolean,Determine if the glyphs should be rendered as subscript.,"

isSuperscript
public boolean isSuperscript()
Determine if the glyphs should be rendered as subscript.

"
GlyphView,isUnderline(),boolean,Determine if the glyphs should be underlined.,"

isUnderline
public boolean isUnderline()
Determine if the glyphs should be underlined.  If true,
 an underline should be drawn through the baseline.

"
GlyphView,"modelToView(int pos, Shape a, Position.Bias b)",Shape,Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.,"

modelToView
public Shape modelToView(int pos,
                         Shape a,
                         Position.Bias b)
                  throws BadLocationException
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.

Specified by:
modelToView in class View
Parameters:
pos - the position to convert >= 0
a - the allocated region to render into
b - either Position.Bias.Forward
                or Position.Bias.Backward
Returns:
the bounding box of the given position
Throws:
BadLocationException - if the given position does not represent a
   valid location in the associated document
See Also:
View.modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias)


"
GlyphView,"paint(Graphics g, Shape a)",void,Renders a portion of a text style run.,"

paint
public void paint(Graphics g,
                  Shape a)
Renders a portion of a text style run.

Specified by:
paint in class View
Parameters:
g - the rendering surface to use
a - the allocated region to render into


"
GlyphView,"removeUpdate(DocumentEvent e, Shape a, ViewFactory f)",void,Gives notification that something was removed from the document in a location that this view is responsible for.,"

removeUpdate
public void removeUpdate(DocumentEvent e,
                         Shape a,
                         ViewFactory f)
Gives notification that something was removed from the document
 in a location that this view is responsible for.
 This is implemented to call preferenceChanged along the
 axis the glyphs are rendered.

Overrides:
removeUpdate in class View
Parameters:
e - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
View.removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
GlyphView,setGlyphPainter(GlyphView.GlyphPainter p),void,Sets the painter to use for rendering glyphs.,"

setGlyphPainter
public void setGlyphPainter(GlyphView.GlyphPainter p)
Sets the painter to use for rendering glyphs.

"
GlyphView,"viewToModel(float x, float y, Shape a, Position.Bias[] biasReturn)",int,Provides a mapping from the view coordinate space to the logical coordinate space of the model.,"

viewToModel
public int viewToModel(float x,
                       float y,
                       Shape a,
                       Position.Bias[] biasReturn)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.

Specified by:
viewToModel in class View
Parameters:
x - the X coordinate >= 0
y - the Y coordinate >= 0
a - the allocated region to render into
biasReturn - either Position.Bias.Forward
  or Position.Bias.Backward is returned as the
  zero-th element of this array
Returns:
the location within the model that best represents the
  given point of view >= 0
See Also:
View.viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[])


"
GlyphView.GlyphPainter,getAscent(GlyphView v),abstract float,NULL,"

getAscent
public abstract float getAscent(GlyphView v)

"
GlyphView.GlyphPainter,"getBoundedPosition(GlyphView v, int p0, float x, float len)",abstract int,Determines the model location that represents the maximum advance that fits within the given span.,"

getBoundedPosition
public abstract int getBoundedPosition(GlyphView v,
                                       int p0,
                                       float x,
                                       float len)
Determines the model location that represents the
 maximum advance that fits within the given span.
 This could be used to break the given view.  The result
 should be a location just shy of the given advance.  This
 differs from viewToModel which returns the closest
 position which might be proud of the maximum advance.

Parameters:
v - the view to find the model location to break at.
p0 - the location in the model where the
  fragment should start it's representation >= 0.
x - the graphic location along the axis that the
  broken view would occupy >= 0.  This may be useful for
  things like tab calculations.
len - specifies the distance into the view
  where a potential break is desired >= 0.
Returns:
the maximum model location possible for a break.
See Also:
View.breakView(int, int, float, float)


"
GlyphView.GlyphPainter,getDescent(GlyphView v),abstract float,NULL,"

getDescent
public abstract float getDescent(GlyphView v)

"
GlyphView.GlyphPainter,getHeight(GlyphView v),abstract float,NULL,"

getHeight
public abstract float getHeight(GlyphView v)

"
GlyphView.GlyphPainter,"getNextVisualPositionFrom(GlyphView v, int pos, Position.Bias b, Shape a, int direction, Position.Bias[] biasRet)",int,Provides a way to determine the next visually represented model location that one might place a caret.,"

getNextVisualPositionFrom
public int getNextVisualPositionFrom(GlyphView v,
                                     int pos,
                                     Position.Bias b,
                                     Shape a,
                                     int direction,
                                     Position.Bias[] biasRet)
                              throws BadLocationException
Provides a way to determine the next visually represented model
 location that one might place a caret.  Some views may not be
 visible, they might not be in the same order found in the model, or
 they just might not allow access to some of the locations in the
 model.

Parameters:
v - the view to use
pos - the position to convert >= 0
b - either Position.Bias.Forward
                or Position.Bias.Backward
a - the allocated region to render into
direction - the direction from the current position that can
  be thought of as the arrow keys typically found on a keyboard.
  This may be SwingConstants.WEST, SwingConstants.EAST,
  SwingConstants.NORTH, or SwingConstants.SOUTH.
biasRet - either Position.Bias.Forward
                 or Position.Bias.Backward
                 is returned as the zero-th element of this array
Returns:
the location within the model that best represents the next
  location visual position.
Throws:
BadLocationException
IllegalArgumentException - for an invalid direction


"
GlyphView.GlyphPainter,"getPainter(GlyphView v, int p0, int p1)",GlyphView.GlyphPainter,Create a painter to use for the given GlyphView.,"

getPainter
public GlyphView.GlyphPainter getPainter(GlyphView v,
                                         int p0,
                                         int p1)
Create a painter to use for the given GlyphView.  If
 the painter carries state it can create another painter
 to represent a new GlyphView that is being created.  If
 the painter doesn't hold any significant state, it can
 return itself.  The default behavior is to return itself.

Parameters:
v - the GlyphView to provide a painter for
p0 - the starting document offset >= 0
p1 - the ending document offset >= p0


"
GlyphView.GlyphPainter,"getSpan(GlyphView v, int p0, int p1, TabExpander e, float x)",abstract float,Determine the span the glyphs given a start location (for tab expansion).,"

getSpan
public abstract float getSpan(GlyphView v,
                              int p0,
                              int p1,
                              TabExpander e,
                              float x)
Determine the span the glyphs given a start location
 (for tab expansion).

"
GlyphView.GlyphPainter,"modelToView(GlyphView v, int pos, Position.Bias bias, Shape a)",abstract Shape,Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.,"

modelToView
public abstract Shape modelToView(GlyphView v,
                                  int pos,
                                  Position.Bias bias,
                                  Shape a)
                           throws BadLocationException
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.
 This is shared by the broken views.

Parameters:
v - the GlyphView containing the
              destination coordinate space
pos - the position to convert
bias - either Position.Bias.Forward
                  or Position.Bias.Backward
a - Bounds of the View
Returns:
the bounding box of the given position
Throws:
BadLocationException - if the given position does not represent a
   valid location in the associated document
See Also:
View.modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias)


"
GlyphView.GlyphPainter,"paint(GlyphView v, Graphics g, Shape a, int p0, int p1)",abstract void,Paint the glyphs representing the given range.,"

paint
public abstract void paint(GlyphView v,
                           Graphics g,
                           Shape a,
                           int p0,
                           int p1)
Paint the glyphs representing the given range.

"
GlyphView.GlyphPainter,"viewToModel(GlyphView v, float x, float y, Shape a, Position.Bias[] biasReturn)",abstract int,Provides a mapping from the view coordinate space to the logical coordinate space of the model.,"

viewToModel
public abstract int viewToModel(GlyphView v,
                                float x,
                                float y,
                                Shape a,
                                Position.Bias[] biasReturn)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.

Parameters:
v - the GlyphView to provide a mapping for
x - the X coordinate
y - the Y coordinate
a - the allocated region to render into
biasReturn - either Position.Bias.Forward
                   or Position.Bias.Backward
                   is returned as the zero-th element of this array
Returns:
the location within the model that best represents the
         given point of view
See Also:
View.viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[])


"
IconView,getAlignment(int axis),float,Determines the desired alignment for this view along an axis.,"

getAlignment
public float getAlignment(int axis)
Determines the desired alignment for this view along an
 axis.  This is implemented to give the alignment to the
 bottom of the icon along the y axis, and the default
 along the x axis.

Overrides:
getAlignment in class View
Parameters:
axis - may be either View.X_AXIS or View.Y_AXIS
Returns:
the desired alignment >= 0.0f && <= 1.0f.  This should be
   a value between 0.0 and 1.0 where 0 indicates alignment at the
   origin and 1.0 indicates alignment to the full span
   away from the origin.  An alignment of 0.5 would be the
   center of the view.


"
IconView,getPreferredSpan(int axis),float,Determines the preferred span for this view along an axis.,"

getPreferredSpan
public float getPreferredSpan(int axis)
Determines the preferred span for this view along an
 axis.

Specified by:
getPreferredSpan in class View
Parameters:
axis - may be either View.X_AXIS or View.Y_AXIS
Returns:
the span the view would like to be rendered into
           Typically the view is told to render into the span
           that is returned, although there is no guarantee.
           The parent may choose to resize or break the view.
Throws:
IllegalArgumentException - for an invalid axis
See Also:
View.getPreferredSpan(int)


"
IconView,"modelToView(int pos, Shape a, Position.Bias b)",Shape,Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.,"

modelToView
public Shape modelToView(int pos,
                         Shape a,
                         Position.Bias b)
                  throws BadLocationException
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.

Specified by:
modelToView in class View
Parameters:
pos - the position to convert >= 0
a - the allocated region to render into
b - the bias toward the previous character or the
  next character represented by the offset, in case the
  position is a boundary of two views; b will have one
  of these values:
 
 Position.Bias.Forward
 Position.Bias.Backward

Returns:
the bounding box of the given position
Throws:
BadLocationException - if the given position does not
   represent a valid location in the associated document
See Also:
View.modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias)


"
IconView,"paint(Graphics g, Shape a)",void,Paints the icon.,"

paint
public void paint(Graphics g,
                  Shape a)
Paints the icon.
 The real paint behavior occurs naturally from the association
 that the icon has with its parent container (the same
 container hosting this view), so this simply allows us to
 position the icon properly relative to the view.  Since
 the coordinate system for the view is simply the parent
 containers, positioning the child icon is easy.

Specified by:
paint in class View
Parameters:
g - the rendering surface to use
a - the allocated region to render into
See Also:
View.paint(java.awt.Graphics, java.awt.Shape)


"
IconView,"viewToModel(float x, float y, Shape a, Position.Bias[] bias)",int,Provides a mapping from the view coordinate space to the logical coordinate space of the model.,"

viewToModel
public int viewToModel(float x,
                       float y,
                       Shape a,
                       Position.Bias[] bias)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.

Specified by:
viewToModel in class View
Parameters:
x - the X coordinate >= 0
y - the Y coordinate >= 0
a - the allocated region to render into
Returns:
the location within the model that best represents the
  given point of view >= 0
See Also:
View.viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[])


"
InternationalFormatter,clone(),Object,Creates a copy of the DefaultFormatter.,"

clone
public Object clone()
             throws CloneNotSupportedException
Creates a copy of the DefaultFormatter.

Overrides:
clone in class DefaultFormatter
Returns:
copy of the DefaultFormatter
Throws:
CloneNotSupportedException - if the object's class does not
               support the Cloneable interface. Subclasses
               that override the clone method can also
               throw this exception to indicate that an instance cannot
               be cloned.
See Also:
Cloneable


"
InternationalFormatter,getActions(),protected Action[],"If getSupportsIncrement returns true, this returns two Actions suitable for incrementing/decrementing the value.","

getActions
protected Action[] getActions()
If getSupportsIncrement returns true, this returns
 two Actions suitable for incrementing/decrementing the value.

Overrides:
getActions in class JFormattedTextField.AbstractFormatter
Returns:
Array of Actions to install on JFormattedTextField


"
InternationalFormatter,getFields(int offset),Format.Field[],Returns the Format.Field constants associated with the text at offset.,"

getFields
public Format.Field[] getFields(int offset)
Returns the Format.Field constants associated with
 the text at offset. If offset is not
 a valid location into the current text, this will return an
 empty array.

Parameters:
offset - offset into text to be examined
Returns:
Format.Field constants associated with the text at the
         given position.


"
InternationalFormatter,getFormat(),Format,Returns the format that dictates the legal values that can be edited and displayed.,"

getFormat
public Format getFormat()
Returns the format that dictates the legal values that can be edited
 and displayed.

Returns:
Format instance used for converting from/to Strings


"
InternationalFormatter,getMaximum(),Comparable,Returns the maximum permissible value.,"

getMaximum
public Comparable getMaximum()
Returns the maximum permissible value.

Returns:
Maximum legal value that can be input


"
InternationalFormatter,getMinimum(),Comparable,Returns the minimum permissible value.,"

getMinimum
public Comparable getMinimum()
Returns the minimum permissible value.

Returns:
Minimum legal value that can be input


"
InternationalFormatter,install(JFormattedTextField ftf),void,Installs the DefaultFormatter onto a particular JFormattedTextField.,"

install
public void install(JFormattedTextField ftf)
Installs the DefaultFormatter onto a particular
 JFormattedTextField.
 This will invoke valueToString to convert the
 current value from the JFormattedTextField to
 a String. This will then install the Actions from
 getActions, the DocumentFilter
 returned from getDocumentFilter and the
 NavigationFilter returned from
 getNavigationFilter onto the
 JFormattedTextField.
 
 Subclasses will typically only need to override this if they
 wish to install additional listeners on the
 JFormattedTextField.
 
 If there is a ParseException in converting the
 current value to a String, this will set the text to an empty
 String, and mark the JFormattedTextField as being
 in an invalid state.
 
 While this is a public method, this is typically only useful
 for subclassers of JFormattedTextField.
 JFormattedTextField will invoke this method at
 the appropriate times when the value changes, or its internal
 state changes.

Overrides:
install in class DefaultFormatter
Parameters:
ftf - JFormattedTextField to format for, may be null indicating
            uninstall from current JFormattedTextField.


"
InternationalFormatter,setFormat(Format format),void,Sets the format that dictates the legal values that can be edited and displayed.,"

setFormat
public void setFormat(Format format)
Sets the format that dictates the legal values that can be edited
 and displayed.

Parameters:
format - Format instance used for converting
 from/to Strings


"
InternationalFormatter,setMaximum(Comparable max),void,Sets the maximum permissible value.,"

setMaximum
public void setMaximum(Comparable max)
Sets the maximum permissible value. If the valueClass has
 not been specified, and max is non null, the
 valueClass will be set to that of the class of
 max.

Parameters:
max - Maximum legal value that can be input
See Also:
DefaultFormatter.setValueClass(java.lang.Class<?>)


"
InternationalFormatter,setMinimum(Comparable minimum),void,Sets the minimum permissible value.,"

setMinimum
public void setMinimum(Comparable minimum)
Sets the minimum permissible value. If the valueClass has
 not been specified, and minimum is non null, the
 valueClass will be set to that of the class of
 minimum.

Parameters:
minimum - Minimum legal value that can be input
See Also:
DefaultFormatter.setValueClass(java.lang.Class<?>)


"
InternationalFormatter,stringToValue(String text),Object,Returns the Object representation of the String text.,"

stringToValue
public Object stringToValue(String text)
                     throws ParseException
Returns the Object representation of the
 String text.

Overrides:
stringToValue in class DefaultFormatter
Parameters:
text - String to convert
Returns:
Object representation of text
Throws:
ParseException - if there is an error in the conversion


"
InternationalFormatter,valueToString(Object value),String,Returns a String representation of the Object value.,"

valueToString
public String valueToString(Object value)
                     throws ParseException
Returns a String representation of the Object value.
 This invokes format on the current Format.

Overrides:
valueToString in class DefaultFormatter
Parameters:
value - Value to convert
Returns:
String representation of value
Throws:
ParseException - if there is an error in the conversion


"
JTextComponent,addCaretListener(CaretListener listener),void,Adds a caret listener for notification of any changes to the caret.,"

addCaretListener
public void addCaretListener(CaretListener listener)
Adds a caret listener for notification of any changes
 to the caret.

Parameters:
listener - the listener to be added
See Also:
CaretEvent


"
JTextComponent,addInputMethodListener(InputMethodListener l),void,Adds the specified input method listener to receive input method events from this component.,"

addInputMethodListener
public void addInputMethodListener(InputMethodListener l)
Description copied from class: Component
Adds the specified input method listener to receive
 input method events from this component. A component will
 only receive input method events from input methods
 if it also overrides getInputMethodRequests to return an
 InputMethodRequests instance.
 If listener l is null,
 no exception is thrown and no action is performed.
 Refer to AWT Threading Issues for details on AWT's threading model.

Overrides:
addInputMethodListener in class Component
Parameters:
l - the input method listener
See Also:
InputMethodEvent, 
InputMethodListener, 
Component.removeInputMethodListener(java.awt.event.InputMethodListener), 
Component.getInputMethodListeners(), 
Component.getInputMethodRequests()


"
JTextComponent,"addKeymap(String nm, Keymap parent)",static Keymap,Adds a new keymap into the keymap hierarchy.,"

addKeymap
public static Keymap addKeymap(String nm,
                               Keymap parent)
Adds a new keymap into the keymap hierarchy.  Keymap bindings
 resolve from bottom up so an attribute specified in a child
 will override an attribute specified in the parent.

Parameters:
nm - the name of the keymap (must be unique within the
   collection of named keymaps in the document); the name may
   be null if the keymap is unnamed,
   but the caller is responsible for managing the reference
   returned as an unnamed keymap can't
   be fetched by name
parent - the parent keymap; this may be null if
   unspecified bindings need not be resolved in some other keymap
Returns:
the keymap


"
JTextComponent,copy(),void,"Transfers the currently selected range in the associated text model to the system clipboard, leaving the contents in the text model.","

copy
public void copy()
Transfers the currently selected range in the associated
 text model to the system clipboard, leaving the contents
 in the text model.  The current selection remains intact.
 Does nothing for null selections.

See Also:
Toolkit.getSystemClipboard(), 
Clipboard


"
JTextComponent,cut(),void,"Transfers the currently selected range in the associated text model to the system clipboard, removing the contents from the model.","

cut
public void cut()
Transfers the currently selected range in the associated
 text model to the system clipboard, removing the contents
 from the model.  The current selection is reset.  Does nothing
 for null selections.

See Also:
Toolkit.getSystemClipboard(), 
Clipboard


"
JTextComponent,fireCaretUpdate(CaretEvent e),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireCaretUpdate
protected void fireCaretUpdate(CaretEvent e)
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is lazily created using the parameters passed into
 the fire method.  The listener list is processed in a
 last-to-first manner.

Parameters:
e - the event
See Also:
EventListenerList


"
JTextComponent,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JTextComponent.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this
 JTextComponent. For text components,
 the AccessibleContext takes the form of an
 AccessibleJTextComponent.
 A new AccessibleJTextComponent instance
 is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleJTextComponent that serves as the
         AccessibleContext of this
         JTextComponent


"
JTextComponent,getActions(),Action[],Fetches the command list for the editor.,"

getActions
public Action[] getActions()
Fetches the command list for the editor.  This is
 the list of commands supported by the plugged-in UI
 augmented by the collection of commands that the
 editor itself supports.  These are useful for binding
 to events, such as in a keymap.

Returns:
the command list


"
JTextComponent,getCaret(),Caret,Fetches the caret that allows text-oriented navigation over the view.,"

getCaret
public Caret getCaret()
Fetches the caret that allows text-oriented navigation over
 the view.

Returns:
the caret


"
JTextComponent,getCaretColor(),Color,Fetches the current color used to render the caret.,"

getCaretColor
public Color getCaretColor()
Fetches the current color used to render the
 caret.

Returns:
the color


"
JTextComponent,getCaretListeners(),CaretListener[],Returns an array of all the caret listeners registered on this text component.,"

getCaretListeners
public CaretListener[] getCaretListeners()
Returns an array of all the caret listeners
 registered on this text component.

Returns:
all of this component's CaretListeners
         or an empty
         array if no caret listeners are currently registered
Since:
1.4
See Also:
addCaretListener(javax.swing.event.CaretListener), 
removeCaretListener(javax.swing.event.CaretListener)


"
JTextComponent,getCaretPosition(),int,Returns the position of the text insertion caret for the text component.,"

getCaretPosition
public int getCaretPosition()
Returns the position of the text insertion caret for the
 text component.

Returns:
the position of the text insertion caret for the
  text component ≥ 0


"
JTextComponent,getDisabledTextColor(),Color,Fetches the current color used to render the disabled text.,"

getDisabledTextColor
public Color getDisabledTextColor()
Fetches the current color used to render the
 disabled text.

Returns:
the color


"
JTextComponent,getDocument(),Document,Fetches the model associated with the editor.,"

getDocument
public Document getDocument()
Fetches the model associated with the editor.  This is
 primarily for the UI to get at the minimal amount of
 state required to be a text editor.  Subclasses will
 return the actual type of the model which will typically
 be something that extends Document.

Returns:
the model


"
JTextComponent,getDragEnabled(),boolean,Returns whether or not automatic drag handling is enabled.,"

getDragEnabled
public boolean getDragEnabled()
Returns whether or not automatic drag handling is enabled.

Returns:
the value of the dragEnabled property
Since:
1.4
See Also:
setDragEnabled(boolean)


"
JTextComponent,getDropLocation(),JTextComponent.DropLocation,"Returns the location that this component should visually indicate as the drop location during a DnD operation over the component, or null if no location is to currently be shown.","

getDropLocation
public final JTextComponent.DropLocation getDropLocation()
Returns the location that this component should visually indicate
 as the drop location during a DnD operation over the component,
 or null if no location is to currently be shown.
 
 This method is not meant for querying the drop location
 from a TransferHandler, as the drop location is only
 set after the TransferHandler's canImport
 has returned and has allowed for the location to be shown.
 
 When this property changes, a property change event with
 name ""dropLocation"" is fired by the component.

Returns:
the drop location
Since:
1.6
See Also:
setDropMode(javax.swing.DropMode), 
TransferHandler.canImport(TransferHandler.TransferSupport)


"
JTextComponent,getDropMode(),DropMode,Returns the drop mode for this component.,"

getDropMode
public final DropMode getDropMode()
Returns the drop mode for this component.

Returns:
the drop mode for this component
Since:
1.6
See Also:
setDropMode(javax.swing.DropMode)


"
JTextComponent,getFocusAccelerator(),char,Returns the key accelerator that will cause the receiving text component to get the focus.,"

getFocusAccelerator
public char getFocusAccelerator()
Returns the key accelerator that will cause the receiving
 text component to get the focus.  Return '\0' if no focus
 accelerator has been set.

Returns:
the key


"
JTextComponent,getHighlighter(),Highlighter,Fetches the object responsible for making highlights.,"

getHighlighter
public Highlighter getHighlighter()
Fetches the object responsible for making highlights.

Returns:
the highlighter


"
JTextComponent,getInputMethodRequests(),InputMethodRequests,Gets the input method request handler which supports requests from input methods for this component.,"

getInputMethodRequests
public InputMethodRequests getInputMethodRequests()
Description copied from class: Component
Gets the input method request handler which supports
 requests from input methods for this component. A component
 that supports on-the-spot text input must override this
 method to return an InputMethodRequests instance.
 At the same time, it also has to handle input method events.

Overrides:
getInputMethodRequests in class Component
Returns:
the input method request handler for this component,
          null by default
See Also:
Component.addInputMethodListener(java.awt.event.InputMethodListener)


"
JTextComponent,getKeymap(),Keymap,Fetches the keymap currently active in this text component.,"

getKeymap
public Keymap getKeymap()
Fetches the keymap currently active in this text
 component.

Returns:
the keymap


"
JTextComponent,getKeymap(String nm),static Keymap,Fetches a named keymap previously added to the document.,"

getKeymap
public static Keymap getKeymap(String nm)
Fetches a named keymap previously added to the document.
 This does not work with null-named keymaps.

Parameters:
nm - the name of the keymap
Returns:
the keymap


"
JTextComponent,getMargin(),Insets,Returns the margin between the text component's border and its text.,"

getMargin
public Insets getMargin()
Returns the margin between the text component's border and
 its text.

Returns:
the margin


"
JTextComponent,getNavigationFilter(),NavigationFilter,Returns the NavigationFilter.,"

getNavigationFilter
public NavigationFilter getNavigationFilter()
Returns the NavigationFilter. NavigationFilter
 is used by DefaultCaret and the default cursor movement
 actions as a way to restrict the cursor movement. A null return value
 implies the cursor movement and selection should not be restricted.

Returns:
the NavigationFilter
Since:
1.4


"
JTextComponent,getPreferredScrollableViewportSize(),Dimension,Returns the preferred size of the viewport for a view component.,"

getPreferredScrollableViewportSize
public Dimension getPreferredScrollableViewportSize()
Returns the preferred size of the viewport for a view component.
 This is implemented to do the default behavior of returning
 the preferred size of the component.

Specified by:
getPreferredScrollableViewportSize in interface Scrollable
Returns:
the preferredSize of a JViewport
 whose view is this Scrollable
See Also:
JComponent.getPreferredSize()


"
JTextComponent,"getPrintable(MessageFormat headerFormat, MessageFormat footerFormat)",Printable,Returns a Printable to use for printing the content of this JTextComponent.,"

getPrintable
public Printable getPrintable(MessageFormat headerFormat,
                              MessageFormat footerFormat)
Returns a Printable to use for printing the content of this
 JTextComponent. The returned Printable prints
 the document as it looks on the screen except being reformatted
 to fit the paper.
 The returned Printable can be wrapped inside another
 Printable in order to create complex reports and
 documents.


 
 The returned Printable shares the document with this
 JTextComponent. It is the responsibility of the developer to
 ensure that the document is not mutated while this Printable
 is used. Printing behavior is undefined when the document is
 mutated during printing.

 
 Page header and footer text can be added to the output by providing
 MessageFormat arguments. The printing code requests
 Strings from the formats, providing a single item which may be
 included in the formatted string: an Integer representing the
 current page number.

 
 The returned Printable when printed, formats the
 document content appropriately for the page size. For correct
 line wrapping the imageable width of all pages must be the
 same. See PageFormat.getImageableWidth().

 
 This method is thread-safe, although most Swing methods are not. Please
 see 
 Concurrency in Swing for more information.

 
 The returned Printable can be printed on any thread.

 
 This implementation returned Printable performs all painting on
 the Event Dispatch Thread, regardless of what thread it is
 used on.

Parameters:
headerFormat - the text, in MessageFormat, to be
        used as the header, or null for no header
footerFormat - the text, in MessageFormat, to be
        used as the footer, or null for no footer
Returns:
a Printable for use in printing content of this
         JTextComponent
Since:
1.6
See Also:
Printable, 
PageFormat, 
Document.render(java.lang.Runnable)


"
JTextComponent,"getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction)",int,"Components that display logical rows or columns should compute the scroll increment that will completely expose one block of rows or columns, depending on the value of orientation.","

getScrollableBlockIncrement
public int getScrollableBlockIncrement(Rectangle visibleRect,
                                       int orientation,
                                       int direction)
Components that display logical rows or columns should compute
 the scroll increment that will completely expose one block
 of rows or columns, depending on the value of orientation.
 
 The default implementation of this is to simply return the visible
 area.  Subclasses will likely be able to provide a much more
 reasonable value.

Specified by:
getScrollableBlockIncrement in interface Scrollable
Parameters:
visibleRect - the view area visible within the viewport
orientation - either SwingConstants.VERTICAL or
   SwingConstants.HORIZONTAL
direction - less than zero to scroll up/left, greater than zero
  for down/right
Returns:
the ""block"" increment for scrolling in the specified direction
Throws:
IllegalArgumentException - for an invalid orientation
See Also:
JScrollBar.setBlockIncrement(int)


"
JTextComponent,getScrollableTracksViewportHeight(),boolean,Returns true if a viewport should always force the height of this Scrollable to match the height of the viewport.,"

getScrollableTracksViewportHeight
public boolean getScrollableTracksViewportHeight()
Returns true if a viewport should always force the height of this
 Scrollable to match the height of the viewport.
 For example a columnar text view that flowed text in left to
 right columns could effectively disable vertical scrolling by
 returning true here.
 
 Scrolling containers, like JViewport,
 will use this method each time they are validated.

Specified by:
getScrollableTracksViewportHeight in interface Scrollable
Returns:
true if a viewport should force the Scrollables height
   to match its own


"
JTextComponent,getScrollableTracksViewportWidth(),boolean,Returns true if a viewport should always force the width of this Scrollable to match the width of the viewport.,"

getScrollableTracksViewportWidth
public boolean getScrollableTracksViewportWidth()
Returns true if a viewport should always force the width of this
 Scrollable to match the width of the viewport.
 For example a normal text view that supported line wrapping
 would return true here, since it would be undesirable for
 wrapped lines to disappear beyond the right
 edge of the viewport.  Note that returning true for a
 Scrollable whose ancestor is a JScrollPane
 effectively disables horizontal scrolling.
 
 Scrolling containers, like JViewport,
 will use this method each time they are validated.

Specified by:
getScrollableTracksViewportWidth in interface Scrollable
Returns:
true if a viewport should force the Scrollables
   width to match its own


"
JTextComponent,"getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction)",int,"Components that display logical rows or columns should compute the scroll increment that will completely expose one new row or column, depending on the value of orientation.","

getScrollableUnitIncrement
public int getScrollableUnitIncrement(Rectangle visibleRect,
                                      int orientation,
                                      int direction)
Components that display logical rows or columns should compute
 the scroll increment that will completely expose one new row
 or column, depending on the value of orientation.  Ideally,
 components should handle a partially exposed row or column by
 returning the distance required to completely expose the item.
 
 The default implementation of this is to simply return 10% of
 the visible area.  Subclasses are likely to be able to provide
 a much more reasonable value.

Specified by:
getScrollableUnitIncrement in interface Scrollable
Parameters:
visibleRect - the view area visible within the viewport
orientation - either SwingConstants.VERTICAL or
   SwingConstants.HORIZONTAL
direction - less than zero to scroll up/left, greater than
   zero for down/right
Returns:
the ""unit"" increment for scrolling in the specified direction
Throws:
IllegalArgumentException - for an invalid orientation
See Also:
JScrollBar.setUnitIncrement(int)


"
JTextComponent,getSelectedText(),String,Returns the selected text contained in this TextComponent.,"

getSelectedText
public String getSelectedText()
Returns the selected text contained in this
 TextComponent.  If the selection is
 null or the document empty, returns null.

Returns:
the text
Throws:
IllegalArgumentException - if the selection doesn't
  have a valid mapping into the document for some reason
See Also:
setText(java.lang.String)


"
JTextComponent,getSelectedTextColor(),Color,Fetches the current color used to render the selected text.,"

getSelectedTextColor
public Color getSelectedTextColor()
Fetches the current color used to render the
 selected text.

Returns:
the color


"
JTextComponent,getSelectionColor(),Color,Fetches the current color used to render the selection.,"

getSelectionColor
public Color getSelectionColor()
Fetches the current color used to render the
 selection.

Returns:
the color


"
JTextComponent,getSelectionEnd(),int,Returns the selected text's end position.,"

getSelectionEnd
public int getSelectionEnd()
Returns the selected text's end position.  Return 0 if the document
 is empty, or the value of dot if there is no selection.

Returns:
the end position ≥ 0


"
JTextComponent,getSelectionStart(),int,Returns the selected text's start position.,"

getSelectionStart
public int getSelectionStart()
Returns the selected text's start position.  Return 0 for an
 empty document, or the value of dot if no selection.

Returns:
the start position ≥ 0


"
JTextComponent,getText(),String,Returns the text contained in this TextComponent.,"

getText
public String getText()
Returns the text contained in this TextComponent.
 If the underlying document is null,
 will give a NullPointerException.

 Note that text is not a bound property, so no PropertyChangeEvent
  is fired when it changes. To listen for changes to the text,
 use DocumentListener.

Returns:
the text
Throws:
NullPointerException - if the document is null
See Also:
setText(java.lang.String)


"
JTextComponent,"getText(int offs, int len)",String,Fetches a portion of the text represented by the component.,"

getText
public String getText(int offs,
                      int len)
               throws BadLocationException
Fetches a portion of the text represented by the
 component.  Returns an empty string if length is 0.

Parameters:
offs - the offset ≥ 0
len - the length ≥ 0
Returns:
the text
Throws:
BadLocationException - if the offset or length are invalid


"
JTextComponent,getToolTipText(MouseEvent event),String,Returns the string to be used as the tooltip for event.,"

getToolTipText
public String getToolTipText(MouseEvent event)
Returns the string to be used as the tooltip for event.
 This will return one of:
 
If setToolTipText has been invoked with a
      non-null
      value, it will be returned, otherwise
  The value from invoking getToolTipText on
      the UI will be returned.
 
 By default JTextComponent does not register
 itself with the ToolTipManager.
 This means that tooltips will NOT be shown from the
 TextUI unless registerComponent has
 been invoked on the ToolTipManager.

Overrides:
getToolTipText in class JComponent
Parameters:
event - the event in question
Returns:
the string to be used as the tooltip for event
See Also:
JComponent.setToolTipText(java.lang.String), 
TextUI.getToolTipText(javax.swing.text.JTextComponent, java.awt.Point), 
ToolTipManager.registerComponent(javax.swing.JComponent)


"
JTextComponent,getUI(),TextUI,Fetches the user-interface factory for this text-oriented editor.,"

getUI
public TextUI getUI()
Fetches the user-interface factory for this text-oriented editor.

Returns:
the factory


"
JTextComponent,isEditable(),boolean,Returns the boolean indicating whether this TextComponent is editable or not.,"

isEditable
public boolean isEditable()
Returns the boolean indicating whether this
 TextComponent is editable or not.

Returns:
the boolean value
See Also:
setEditable(boolean)


"
JTextComponent,"loadKeymap(Keymap map, JTextComponent.KeyBinding[] bindings, Action[] actions)",static void,Loads a keymap with a bunch of bindings.,"

loadKeymap
public static void loadKeymap(Keymap map,
                              JTextComponent.KeyBinding[] bindings,
                              Action[] actions)

 Loads a keymap with a bunch of
 bindings.  This can be used to take a static table of
 definitions and load them into some keymap.  The following
 example illustrates an example of binding some keys to
 the cut, copy, and paste actions associated with a
 JTextComponent.  A code fragment to accomplish
 this might look as follows:
 

   static final JTextComponent.KeyBinding[] defaultBindings = {
     new JTextComponent.KeyBinding(
       KeyStroke.getKeyStroke(KeyEvent.VK_C, InputEvent.CTRL_MASK),
       DefaultEditorKit.copyAction),
     new JTextComponent.KeyBinding(
       KeyStroke.getKeyStroke(KeyEvent.VK_V, InputEvent.CTRL_MASK),
       DefaultEditorKit.pasteAction),
     new JTextComponent.KeyBinding(
       KeyStroke.getKeyStroke(KeyEvent.VK_X, InputEvent.CTRL_MASK),
       DefaultEditorKit.cutAction),
   };

   JTextComponent c = new JTextPane();
   Keymap k = c.getKeymap();
   JTextComponent.loadKeymap(k, defaultBindings, c.getActions());

 
 The sets of bindings and actions may be empty but must be
 non-null.

Parameters:
map - the keymap
bindings - the bindings
actions - the set of actions


"
JTextComponent,modelToView(int pos),Rectangle,Converts the given location in the model to a place in the view coordinate system.,"

modelToView
public Rectangle modelToView(int pos)
                      throws BadLocationException
Converts the given location in the model to a place in
 the view coordinate system.
 The component must have a positive size for
 this translation to be computed (i.e. layout cannot
 be computed until the component has been sized).  The
 component does not have to be visible or painted.

Parameters:
pos - the position ≥ 0
Returns:
the coordinates as a rectangle, with (r.x, r.y) as the location
   in the coordinate system, or null if the component does
   not yet have a positive size.
Throws:
BadLocationException - if the given position does not
   represent a valid location in the associated document
See Also:
TextUI.modelToView(javax.swing.text.JTextComponent, int)


"
JTextComponent,moveCaretPosition(int pos),void,"Moves the caret to a new position, leaving behind a mark defined by the last time setCaretPosition was called.","

moveCaretPosition
public void moveCaretPosition(int pos)
Moves the caret to a new position, leaving behind a mark
 defined by the last time setCaretPosition was
 called.  This forms a selection.
 If the document is null, does nothing. The position
 must be between 0 and the length of the component's text or else
 an exception is thrown.

Parameters:
pos - the position
Throws:
IllegalArgumentException - if the value supplied
               for position is less than zero or greater
               than the component's text length
See Also:
setCaretPosition(int)


"
JTextComponent,paramString(),protected String,Returns a string representation of this JTextComponent.,"

paramString
protected String paramString()
Returns a string representation of this JTextComponent.
 This method is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.
 
 Overriding paramString to provide information about the
 specific new aspects of the JFC components.

Overrides:
paramString in class JComponent
Returns:
a string representation of this JTextComponent


"
JTextComponent,paste(),void,Transfers the contents of the system clipboard into the associated text model.,"

paste
public void paste()
Transfers the contents of the system clipboard into the
 associated text model.  If there is a selection in the
 associated view, it is replaced with the contents of the
 clipboard.  If there is no selection, the clipboard contents
 are inserted in front of the current insert position in
 the associated view.  If the clipboard is empty, does nothing.

See Also:
replaceSelection(java.lang.String), 
Toolkit.getSystemClipboard(), 
Clipboard


"
JTextComponent,print(),boolean,"A convenience print method that displays a print dialog, and then prints this JTextComponent in interactive mode with no header or footer text.","

print
public boolean print()
              throws PrinterException
A convenience print method that displays a print dialog, and then
 prints this JTextComponent in interactive mode with no
 header or footer text. Note: this method
 blocks until printing is done.
 
 Note: In headless mode, no dialogs will be shown.

  This method calls the full featured
 print method to perform printing.

Returns:
true, unless printing is canceled by the user
Throws:
PrinterException - if an error in the print system causes the job
         to be aborted
SecurityException - if this thread is not allowed to
                           initiate a print job request
Since:
1.6
See Also:
print(MessageFormat, MessageFormat, boolean, PrintService, PrintRequestAttributeSet, boolean)


"
JTextComponent,"print(MessageFormat headerFormat, MessageFormat footerFormat)",boolean,"A convenience print method that displays a print dialog, and then prints this JTextComponent in interactive mode with the specified header and footer text.","

print
public boolean print(MessageFormat headerFormat,
                     MessageFormat footerFormat)
              throws PrinterException
A convenience print method that displays a print dialog, and then
 prints this JTextComponent in interactive mode with
 the specified header and footer text. Note: this method
 blocks until printing is done.
 
 Note: In headless mode, no dialogs will be shown.

  This method calls the full featured
 print method to perform printing.

Parameters:
headerFormat - the text, in MessageFormat, to be
        used as the header, or null for no header
footerFormat - the text, in MessageFormat, to be
        used as the footer, or null for no footer
Returns:
true, unless printing is canceled by the user
Throws:
PrinterException - if an error in the print system causes the job
         to be aborted
SecurityException - if this thread is not allowed to
                           initiate a print job request
Since:
1.6
See Also:
print(MessageFormat, MessageFormat, boolean, PrintService, PrintRequestAttributeSet, boolean), 
MessageFormat


"
JTextComponent,"print(MessageFormat headerFormat, MessageFormat footerFormat, boolean showPrintDialog, PrintService service, PrintRequestAttributeSet attributes, boolean interactive)",boolean,Prints the content of this JTextComponent.,"

print
public boolean print(MessageFormat headerFormat,
                     MessageFormat footerFormat,
                     boolean showPrintDialog,
                     PrintService service,
                     PrintRequestAttributeSet attributes,
                     boolean interactive)
              throws PrinterException
Prints the content of this JTextComponent. Note: this method
 blocks until printing is done.

 
 Page header and footer text can be added to the output by providing
 MessageFormat arguments. The printing code requests
 Strings from the formats, providing a single item which may be
 included in the formatted string: an Integer representing the
 current page number.

 
showPrintDialog boolean parameter allows you to specify whether
 a print dialog is displayed to the user. When it is, the user
 may use the dialog to change printing attributes or even cancel the
 print.

 
service allows you to provide the initial
 PrintService for the print dialog, or to specify
 PrintService to print to when the dialog is not shown.

 
attributes can be used to provide the
 initial values for the print dialog, or to supply any needed
 attributes when the dialog is not shown. attributes can
 be used to control how the job will print, for example
 duplex or single-sided.

 
interactive boolean parameter allows you to specify
 whether to perform printing in interactive
 mode. If true, a progress dialog, with an abort option,
 is displayed for the duration of printing.  This dialog is
 modal when print is invoked on the Event Dispatch
 Thread and non-modal otherwise. Warning:
 calling this method on the Event Dispatch Thread with interactive false blocks all events, including repaints, from
 being processed until printing is complete. It is only
 recommended when printing from an application with no
 visible GUI.

 
 Note: In headless mode, showPrintDialog and
 interactive parameters are ignored and no dialogs are
 shown.

 
 This method ensures the document is not mutated during printing.
 To indicate it visually, setEnabled(false) is set for the
 duration of printing.

 
 This method uses getPrintable(java.text.MessageFormat, java.text.MessageFormat) to render document content.

 
 This method is thread-safe, although most Swing methods are not. Please
 see 
 Concurrency in Swing for more information.

 
Sample Usage. This code snippet shows a cross-platform print
 dialog and then prints the JTextComponent in interactive mode
 unless the user cancels the dialog:

 
 textComponent.print(new MessageFormat(""My text component header""),
     new MessageFormat(""Footer. Page - {0}""), true, null, null, true);
 

 Executing this code off the Event Dispatch Thread
 performs printing on the background.
 The following pattern might be used for background
 printing:
 
     FutureTask<Boolean> future =
         new FutureTask<Boolean>(
             new Callable<Boolean>() {
                 public Boolean call() {
                     return textComponent.print(.....);
                 }
             });
     executor.execute(future);
 

Parameters:
headerFormat - the text, in MessageFormat, to be
        used as the header, or null for no header
footerFormat - the text, in MessageFormat, to be
        used as the footer, or null for no footer
showPrintDialog - true to display a print dialog,
        false otherwise
service - initial PrintService, or null for the
        default
attributes - the job attributes to be applied to the print job, or
        null for none
interactive - whether to print in an interactive mode
Returns:
true, unless printing is canceled by the user
Throws:
PrinterException - if an error in the print system causes the job
         to be aborted
SecurityException - if this thread is not allowed to
                           initiate a print job request
Since:
1.6
See Also:
getPrintable(java.text.MessageFormat, java.text.MessageFormat), 
MessageFormat, 
GraphicsEnvironment.isHeadless(), 
FutureTask


"
JTextComponent,processInputMethodEvent(InputMethodEvent e),protected void,Processes input method events occurring on this component by dispatching them to any registered InputMethodListener objects.,"

processInputMethodEvent
protected void processInputMethodEvent(InputMethodEvent e)
Description copied from class: Component
Processes input method events occurring on this component by
 dispatching them to any registered
 InputMethodListener objects.
 
 This method is not called unless input method events
 are enabled for this component. Input method events are enabled
 when one of the following occurs:
 
An InputMethodListener object is registered
 via addInputMethodListener.
 Input method events are enabled via enableEvents.
 
Note that if the event parameter is null
 the behavior is unspecified and may result in an
 exception.

Overrides:
processInputMethodEvent in class Component
Parameters:
e - the input method event
See Also:
InputMethodEvent, 
InputMethodListener, 
Component.addInputMethodListener(java.awt.event.InputMethodListener), 
Component.enableEvents(long)


"
JTextComponent,"read(Reader in, Object desc)",void,Initializes from a stream.,"

read
public void read(Reader in,
                 Object desc)
          throws IOException
Initializes from a stream.  This creates a
 model of the type appropriate for the component
 and initializes the model from the stream.
 By default this will load the model as plain
 text.  Previous contents of the model are discarded.

Parameters:
in - the stream to read from
desc - an object describing the stream; this
   might be a string, a File, a URL, etc.  Some kinds
   of documents (such as html for example) might be
   able to make use of this information; if non-null,
   it is added as a property of the document
Throws:
IOException - as thrown by the stream being
  used to initialize
See Also:
EditorKit.createDefaultDocument(), 
setDocument(javax.swing.text.Document), 
PlainDocument


"
JTextComponent,removeCaretListener(CaretListener listener),void,Removes a caret listener.,"

removeCaretListener
public void removeCaretListener(CaretListener listener)
Removes a caret listener.

Parameters:
listener - the listener to be removed
See Also:
CaretEvent


"
JTextComponent,removeKeymap(String nm),static Keymap,Removes a named keymap previously added to the document.,"

removeKeymap
public static Keymap removeKeymap(String nm)
Removes a named keymap previously added to the document.  Keymaps
 with null names may not be removed in this way.

Parameters:
nm - the name of the keymap to remove
Returns:
the keymap that was removed


"
JTextComponent,removeNotify(),void,Notifies this component that it no longer has a parent component.,"

removeNotify
public void removeNotify()
Description copied from class: JComponent
Notifies this component that it no longer has a parent component.
 When this method is invoked, any KeyboardActions
 set up in the the chain of parent components are removed.
 This method is called by the toolkit internally and should
 not be called directly by programs.

Overrides:
removeNotify in class JComponent
See Also:
JComponent.registerKeyboardAction(java.awt.event.ActionListener, java.lang.String, javax.swing.KeyStroke, int)


"
JTextComponent,replaceSelection(String content),void,Replaces the currently selected content with new content represented by the given string.,"

replaceSelection
public void replaceSelection(String content)
Replaces the currently selected content with new content
 represented by the given string.  If there is no selection
 this amounts to an insert of the given text.  If there
 is no replacement text this amounts to a removal of the
 current selection.
 
 This is the method that is used by the default implementation
 of the action for inserting content that gets bound to the
 keymap actions.

Parameters:
content - the content to replace the selection with


"
JTextComponent,restoreComposedText(),protected void,Restores composed text previously saved by saveComposedText.,"

restoreComposedText
protected void restoreComposedText()
Restores composed text previously saved by saveComposedText.

 The saved composed text is inserted back into the document. This method
 should be invoked only if saveComposedText returns true.

Since:
1.7
See Also:
saveComposedText(int)


"
JTextComponent,saveComposedText(int pos),protected boolean,Saves composed text around the specified position.,"

saveComposedText
protected boolean saveComposedText(int pos)
Saves composed text around the specified position.

 The composed text (if any) around the specified position is saved
 in a backing store and removed from the document.

Parameters:
pos - document position to identify the composed text location
Returns:
true if the composed text exists and is saved,
          false otherwise
Since:
1.7
See Also:
restoreComposedText()


"
JTextComponent,"select(int selectionStart, int selectionEnd)",void,Selects the text between the specified start and end positions.,"

select
public void select(int selectionStart,
                   int selectionEnd)
Selects the text between the specified start and end positions.
 
 This method sets the start and end positions of the
 selected text, enforcing the restriction that the start position
 must be greater than or equal to zero.  The end position must be
 greater than or equal to the start position, and less than or
 equal to the length of the text component's text.
 
 If the caller supplies values that are inconsistent or out of
 bounds, the method enforces these constraints silently, and
 without failure. Specifically, if the start position or end
 position is greater than the length of the text, it is reset to
 equal the text length. If the start position is less than zero,
 it is reset to zero, and if the end position is less than the
 start position, it is reset to the start position.
 
 This call is provided for backward compatibility.
 It is routed to a call to setCaretPosition
 followed by a call to moveCaretPosition.
 The preferred way to manage selection is by calling
 those methods directly.

Parameters:
selectionStart - the start position of the text
selectionEnd - the end position of the text
See Also:
setCaretPosition(int), 
moveCaretPosition(int)


"
JTextComponent,selectAll(),void,Selects all the text in the TextComponent.,"

selectAll
public void selectAll()
Selects all the text in the TextComponent.
 Does nothing on a null or empty document.

"
JTextComponent,setCaret(Caret c),void,Sets the caret to be used.,"

setCaret
public void setCaret(Caret c)
Sets the caret to be used.  By default this will be set
 by the UI that gets installed.  This can be changed to
 a custom caret if desired.  Setting the caret results in a
 PropertyChange event (""caret"") being fired.

Parameters:
c - the caret
See Also:
getCaret()


"
JTextComponent,setCaretColor(Color c),void,Sets the current color used to render the caret.,"

setCaretColor
public void setCaretColor(Color c)
Sets the current color used to render the caret.
 Setting to null effectively restores the default color.
 Setting the color results in a PropertyChange event (""caretColor"")
 being fired.

Parameters:
c - the color
See Also:
getCaretColor()


"
JTextComponent,setCaretPosition(int position),void,Sets the position of the text insertion caret for the TextComponent.,"

setCaretPosition
public void setCaretPosition(int position)
Sets the position of the text insertion caret for the
 TextComponent.  Note that the caret tracks change,
 so this may move if the underlying text of the component is changed.
 If the document is null, does nothing. The position
 must be between 0 and the length of the component's text or else
 an exception is thrown.

Parameters:
position - the position
Throws:
IllegalArgumentException - if the value supplied
               for position is less than zero or greater
               than the component's text length


"
JTextComponent,setComponentOrientation(ComponentOrientation o),void,Sets the language-sensitive orientation that is to be used to order the elements or text within this component.,"

setComponentOrientation
public void setComponentOrientation(ComponentOrientation o)
Description copied from class: Component
Sets the language-sensitive orientation that is to be used to order
 the elements or text within this component.  Language-sensitive
 LayoutManager and Component
 subclasses will use this property to
 determine how to lay out and draw components.
 
 At construction time, a component's orientation is set to
 ComponentOrientation.UNKNOWN,
 indicating that it has not been specified
 explicitly.  The UNKNOWN orientation behaves the same as
 ComponentOrientation.LEFT_TO_RIGHT.
 
 To set the orientation of a single component, use this method.
 To set the orientation of an entire component
 hierarchy, use
 applyComponentOrientation.
 
 This method changes layout-related information, and therefore,
 invalidates the component hierarchy.

Overrides:
setComponentOrientation in class Component
See Also:
ComponentOrientation, 
Component.invalidate()


"
JTextComponent,setDisabledTextColor(Color c),void,Sets the current color used to render the disabled text.,"

setDisabledTextColor
public void setDisabledTextColor(Color c)
Sets the current color used to render the
 disabled text.  Setting the color fires off a
 PropertyChange event (""disabledTextColor"").

Parameters:
c - the color
See Also:
getDisabledTextColor()


"
JTextComponent,setDocument(Document doc),void,Associates the editor with a text document.,"

setDocument
public void setDocument(Document doc)
Associates the editor with a text document.
 The currently registered factory is used to build a view for
 the document, which gets displayed by the editor after revalidation.
 A PropertyChange event (""document"") is propagated to each listener.

Parameters:
doc - the document to display/edit
See Also:
getDocument()


"
JTextComponent,setDragEnabled(boolean b),void,Turns on or off automatic drag handling.,"

setDragEnabled
public void setDragEnabled(boolean b)
Turns on or off automatic drag handling. In order to enable automatic
 drag handling, this property should be set to true, and the
 component's TransferHandler needs to be non-null.
 The default value of the dragEnabled property is false.
 
 The job of honoring this property, and recognizing a user drag gesture,
 lies with the look and feel implementation, and in particular, the component's
 TextUI. When automatic drag handling is enabled, most look and
 feels (including those that subclass BasicLookAndFeel) begin a
 drag and drop operation whenever the user presses the mouse button over
 a selection and then moves the mouse a few pixels. Setting this property to
 true can therefore have a subtle effect on how selections behave.
 
 If a look and feel is used that ignores this property, you can still
 begin a drag and drop operation by calling exportAsDrag on the
 component's TransferHandler.

Parameters:
b - whether or not to enable automatic drag handling
Throws:
HeadlessException - if
            b is true and
            GraphicsEnvironment.isHeadless()
            returns true
Since:
1.4
See Also:
GraphicsEnvironment.isHeadless(), 
getDragEnabled(), 
JComponent.setTransferHandler(javax.swing.TransferHandler), 
TransferHandler


"
JTextComponent,setDropMode(DropMode dropMode),void,Sets the drop mode for this component.,"

setDropMode
public final void setDropMode(DropMode dropMode)
Sets the drop mode for this component. For backward compatibility,
 the default for this property is DropMode.USE_SELECTION.
 Usage of DropMode.INSERT is recommended, however,
 for an improved user experience. It offers similar behavior of dropping
 between text locations, but does so without affecting the actual text
 selection and caret location.
 
JTextComponents support the following drop modes:
 
DropMode.USE_SELECTION
DropMode.INSERT


 The drop mode is only meaningful if this component has a
 TransferHandler that accepts drops.

Parameters:
dropMode - the drop mode to use
Throws:
IllegalArgumentException - if the drop mode is unsupported
         or null
Since:
1.6
See Also:
getDropMode(), 
getDropLocation(), 
JComponent.setTransferHandler(javax.swing.TransferHandler), 
TransferHandler


"
JTextComponent,setEditable(boolean b),void,Sets the specified boolean to indicate whether or not this TextComponent should be editable.,"

setEditable
public void setEditable(boolean b)
Sets the specified boolean to indicate whether or not this
 TextComponent should be editable.
 A PropertyChange event (""editable"") is fired when the
 state is changed.

Parameters:
b - the boolean to be set
See Also:
isEditable()


"
JTextComponent,setFocusAccelerator(char aKey),void,Sets the key accelerator that will cause the receiving text component to get the focus.,"

setFocusAccelerator
public void setFocusAccelerator(char aKey)
Sets the key accelerator that will cause the receiving text
 component to get the focus.  The accelerator will be the
 key combination of the platform-specific modifier key and
 the character given (converted to upper case).  For example,
 the ALT key is used as a modifier on Windows and the CTRL+ALT
 combination is used on Mac.  By default, there is no focus
 accelerator key.  Any previous key accelerator setting will be
 superseded.  A '\0' key setting will be registered, and has the
 effect of turning off the focus accelerator.  When the new key
 is set, a PropertyChange event (FOCUS_ACCELERATOR_KEY) will be fired.

Parameters:
aKey - the key
See Also:
getFocusAccelerator()


"
JTextComponent,setHighlighter(Highlighter h),void,Sets the highlighter to be used.,"

setHighlighter
public void setHighlighter(Highlighter h)
Sets the highlighter to be used.  By default this will be set
 by the UI that gets installed.  This can be changed to
 a custom highlighter if desired.  The highlighter can be set to
 null to disable it.
 A PropertyChange event (""highlighter"") is fired
 when a new highlighter is installed.

Parameters:
h - the highlighter
See Also:
getHighlighter()


"
JTextComponent,setKeymap(Keymap map),void,Sets the keymap to use for binding events to actions.,"

setKeymap
public void setKeymap(Keymap map)
Sets the keymap to use for binding events to
 actions.  Setting to null effectively disables
 keyboard input.
 A PropertyChange event (""keymap"") is fired when a new keymap
 is installed.

Parameters:
map - the keymap
See Also:
getKeymap()


"
JTextComponent,setMargin(Insets m),void,Sets margin space between the text component's border and its text.,"

setMargin
public void setMargin(Insets m)
Sets margin space between the text component's border
 and its text.  The text component's default Border
 object will use this value to create the proper margin.
 However, if a non-default border is set on the text component,
 it is that Border object's responsibility to create the
 appropriate margin space (else this property will effectively
 be ignored).  This causes a redraw of the component.
 A PropertyChange event (""margin"") is sent to all listeners.

Parameters:
m - the space between the border and the text


"
JTextComponent,setNavigationFilter(NavigationFilter filter),void,Sets the NavigationFilter.,"

setNavigationFilter
public void setNavigationFilter(NavigationFilter filter)
Sets the NavigationFilter. NavigationFilter
 is used by DefaultCaret and the default cursor movement
 actions as a way to restrict the cursor movement.

Since:
1.4


"
JTextComponent,setSelectedTextColor(Color c),void,Sets the current color used to render the selected text.,"

setSelectedTextColor
public void setSelectedTextColor(Color c)
Sets the current color used to render the selected text.
 Setting the color to null is the same as
 Color.black. Setting the color results in a
 PropertyChange event (""selectedTextColor"") being fired.

Parameters:
c - the color
See Also:
getSelectedTextColor()


"
JTextComponent,setSelectionColor(Color c),void,Sets the current color used to render the selection.,"

setSelectionColor
public void setSelectionColor(Color c)
Sets the current color used to render the selection.
 Setting the color to null is the same as setting
 Color.white.  Setting the color results in a
 PropertyChange event (""selectionColor"").

Parameters:
c - the color
See Also:
getSelectionColor()


"
JTextComponent,setSelectionEnd(int selectionEnd),void,Sets the selection end to the specified position.,"

setSelectionEnd
public void setSelectionEnd(int selectionEnd)
Sets the selection end to the specified position.  The new
 end point is constrained to be at or after the current
 selection start.
 
 This is available for backward compatibility to code
 that called this method on java.awt.TextComponent.
 This is implemented to forward to the Caret
 implementation which is where the actual selection is maintained.

Parameters:
selectionEnd - the end position of the text ≥ 0


"
JTextComponent,setSelectionStart(int selectionStart),void,Sets the selection start to the specified position.,"

setSelectionStart
public void setSelectionStart(int selectionStart)
Sets the selection start to the specified position.  The new
 starting point is constrained to be before or at the current
 selection end.
 
 This is available for backward compatibility to code
 that called this method on java.awt.TextComponent.
 This is implemented to forward to the Caret
 implementation which is where the actual selection is maintained.

Parameters:
selectionStart - the start position of the text ≥ 0


"
JTextComponent,setText(String t),void,Sets the text of this TextComponent to the specified text.,"

setText
public void setText(String t)
Sets the text of this TextComponent
 to the specified text.  If the text is null
 or empty, has the effect of simply deleting the old text.
 When text has been inserted, the resulting caret location
 is determined by the implementation of the caret class.

 
 Note that text is not a bound property, so no PropertyChangeEvent
  is fired when it changes. To listen for changes to the text,
 use DocumentListener.

Parameters:
t - the new text to be set
See Also:
getText(int, int), 
DefaultCaret


"
JTextComponent,setUI(TextUI ui),void,Sets the user-interface factory for this text-oriented editor.,"

setUI
public void setUI(TextUI ui)
Sets the user-interface factory for this text-oriented editor.

Parameters:
ui - the factory


"
JTextComponent,updateUI(),void,Reloads the pluggable UI.,"

updateUI
public void updateUI()
Reloads the pluggable UI.  The key used to fetch the
 new interface is getUIClassID().  The type of
 the UI is TextUI.  invalidate
 is called after setting the UI.

Overrides:
updateUI in class JComponent
See Also:
JComponent.setUI(javax.swing.plaf.ComponentUI), 
UIManager.getLookAndFeel(), 
UIManager.getUI(javax.swing.JComponent)


"
JTextComponent,viewToModel(Point pt),int,Converts the given place in the view coordinate system to the nearest representative location in the model.,"

viewToModel
public int viewToModel(Point pt)
Converts the given place in the view coordinate system
 to the nearest representative location in the model.
 The component must have a positive size for
 this translation to be computed (i.e. layout cannot
 be computed until the component has been sized).  The
 component does not have to be visible or painted.

Parameters:
pt - the location in the view to translate
Returns:
the offset ≥ 0 from the start of the document,
   or -1 if the component does not yet have a positive
   size.
See Also:
TextUI.viewToModel(javax.swing.text.JTextComponent, java.awt.Point)


"
JTextComponent,write(Writer out),void,Stores the contents of the model into the given stream.,"

write
public void write(Writer out)
           throws IOException
Stores the contents of the model into the given
 stream.  By default this will store the model as plain
 text.

Parameters:
out - the output stream
Throws:
IOException - on any I/O error


"
JTextComponent.DropLocation,getBias(),Position.Bias,Returns the bias for the drop index.,"

getBias
public Position.Bias getBias()
Returns the bias for the drop index.

Returns:
the drop bias


"
JTextComponent.DropLocation,getIndex(),int,Returns the index where dropped data should be inserted into the associated component.,"

getIndex
public int getIndex()
Returns the index where dropped data should be inserted into the
 associated component. This index represents a position between
 characters, as would be interpreted by a caret.

Returns:
the drop index


"
JTextComponent.DropLocation,toString(),String,Returns a string representation of this drop location.,"

toString
public String toString()
Returns a string representation of this drop location.
 This method is intended to be used for debugging purposes,
 and the content and format of the returned string may vary
 between implementations.

Overrides:
toString in class TransferHandler.DropLocation
Returns:
a string representation of this drop location


"
LabelView,"changedUpdate(DocumentEvent e, Shape a, ViewFactory f)",void,Gives notification from the document that attributes were changed in a location that this view is responsible for.,"

changedUpdate
public void changedUpdate(DocumentEvent e,
                          Shape a,
                          ViewFactory f)
Gives notification from the document that attributes were changed
 in a location that this view is responsible for.

Overrides:
changedUpdate in class GlyphView
Parameters:
e - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
View.changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
LabelView,getBackground(),Color,Fetches the background color to use to render the glyphs.,"

getBackground
public Color getBackground()
Fetches the background color to use to render the glyphs.
 This is implemented to return a cached background color,
 which defaults to null.

Overrides:
getBackground in class GlyphView
Returns:
the cached background color
Since:
1.3


"
LabelView,getFont(),Font,Fetches the font that the glyphs should be based upon.,"

getFont
public Font getFont()
Fetches the font that the glyphs should be based upon.
 This is implemented to return a cached font.

Overrides:
getFont in class GlyphView
Returns:
the cached font


"
LabelView,getFontMetrics(),protected FontMetrics,Deprecated. FontMetrics are not used for glyph rendering when running in the JDK.,"

getFontMetrics
@Deprecated
protected FontMetrics getFontMetrics()
Deprecated. FontMetrics are not used for glyph rendering
  when running in the JDK.
Fetches the FontMetrics used for this view.

"
LabelView,getForeground(),Color,Fetches the foreground color to use to render the glyphs.,"

getForeground
public Color getForeground()
Fetches the foreground color to use to render the glyphs.
 This is implemented to return a cached foreground color,
 which defaults to null.

Overrides:
getForeground in class GlyphView
Returns:
the cached foreground color
Since:
1.3


"
LabelView,isStrikeThrough(),boolean,Determines if the glyphs should have a strikethrough line.,"

isStrikeThrough
public boolean isStrikeThrough()
Determines if the glyphs should have a strikethrough
 line.  If true, a line should be drawn through the center
 of the glyphs.  This is implemented to return the
 cached strikeThrough property.

 When you request this property, LabelView
 re-syncs its state with the properties of the
 Element's AttributeSet.
 If Element's AttributeSet
 does not have this property set, it will revert to false.

Overrides:
isStrikeThrough in class GlyphView
Returns:
the value of the cached
     strikeThrough property
Since:
1.3


"
LabelView,isSubscript(),boolean,Determines if the glyphs should be rendered as superscript.,"

isSubscript
public boolean isSubscript()
Determines if the glyphs should be rendered as superscript.

Overrides:
isSubscript in class GlyphView
Returns:
the value of the cached subscript property

 When you request this property, LabelView
 re-syncs its state with the properties of the
 Element's AttributeSet.
 If Element's AttributeSet
 does not have this property set, it will revert to false.
Since:
1.3


"
LabelView,isSuperscript(),boolean,Determines if the glyphs should be rendered as subscript.,"

isSuperscript
public boolean isSuperscript()
Determines if the glyphs should be rendered as subscript.

 When you request this property, LabelView
 re-syncs its state with the properties of the
 Element's AttributeSet.
 If Element's AttributeSet
 does not have this property set, it will revert to false.

Overrides:
isSuperscript in class GlyphView
Returns:
the value of the cached
     superscript property
Since:
1.3


"
LabelView,isUnderline(),boolean,Determines if the glyphs should be underlined.,"

isUnderline
public boolean isUnderline()
Determines if the glyphs should be underlined.  If true,
 an underline should be drawn through the baseline.  This
 is implemented to return the cached underline property.

 When you request this property, LabelView
 re-syncs its state with the properties of the
 Element's AttributeSet.
 If Element's AttributeSet
 does not have this property set, it will revert to false.

Overrides:
isUnderline in class GlyphView
Returns:
the value of the cached
     underline property
Since:
1.3


"
LabelView,setBackground(Color bg),protected void,Sets the background color for the view.,"

setBackground
protected void setBackground(Color bg)
Sets the background color for the view. This method is typically
 invoked as part of configuring this View. If you need
 to customize the background color you should override
 setPropertiesFromAttributes and invoke this method. A
 value of null indicates no background should be rendered, so that the
 background of the parent View will show through.

Parameters:
bg - background color, or null
Since:
1.5
See Also:
setPropertiesFromAttributes()


"
LabelView,setPropertiesFromAttributes(),protected void,Sets the cached properties from the attributes.,"

setPropertiesFromAttributes
protected void setPropertiesFromAttributes()
Sets the cached properties from the attributes.

"
LabelView,setStrikeThrough(boolean s),protected void,Sets whether or not the view has a strike/line through it.,"

setStrikeThrough
protected void setStrikeThrough(boolean s)
Sets whether or not the view has a strike/line
 through it.
 Note that this setter is protected and is really
 only meant if you need to update some additional
 state when set.

Parameters:
s - true if the view has a strike/line
          through it, otherwise false
See Also:
isStrikeThrough()


"
LabelView,setSubscript(boolean s),protected void,Sets whether or not the view represents a subscript.,"

setSubscript
protected void setSubscript(boolean s)
Sets whether or not the view represents a
 subscript.
 Note that this setter is protected and is really
 only meant if you need to update some additional
 state when set.

Parameters:
s - true if the view represents a
          subscript, otherwise false
See Also:
isSubscript()


"
LabelView,setSuperscript(boolean s),protected void,Sets whether or not the view represents a superscript.,"

setSuperscript
protected void setSuperscript(boolean s)
Sets whether or not the view represents a
 superscript.
 Note that this setter is protected and is really
 only meant if you need to update some additional
 state when set.

Parameters:
s - true if the view represents a
          superscript, otherwise false
See Also:
isSuperscript()


"
LabelView,setUnderline(boolean u),protected void,Sets whether or not the view is underlined.,"

setUnderline
protected void setUnderline(boolean u)
Sets whether or not the view is underlined.
 Note that this setter is protected and is really
 only meant if you need to update some additional
 state when set.

Parameters:
u - true if the view is underlined, otherwise
          false
See Also:
isUnderline()


"
LayeredHighlighter,"paintLayeredHighlights(Graphics g, int p0, int p1, Shape viewBounds, JTextComponent editor, View view)",abstract void,When leaf Views (such as LabelView) are rendering they should call into this method.,"

paintLayeredHighlights
public abstract void paintLayeredHighlights(Graphics g,
                                            int p0,
                                            int p1,
                                            Shape viewBounds,
                                            JTextComponent editor,
                                            View view)
When leaf Views (such as LabelView) are rendering they should
 call into this method. If a highlight is in the given region it will
 be drawn immediately.

Parameters:
g - Graphics used to draw
p0 - starting offset of view
p1 - ending offset of view
viewBounds - Bounds of View
editor - JTextComponent
view - View instance being rendered


"
LayeredHighlighter.LayerPainter,"paintLayer(Graphics g, int p0, int p1, Shape viewBounds, JTextComponent editor, View view)",abstract Shape,NULL,"

paintLayer
public abstract Shape paintLayer(Graphics g,
                                 int p0,
                                 int p1,
                                 Shape viewBounds,
                                 JTextComponent editor,
                                 View view)

"
LayoutQueue,addTask(Runnable task),void,Add a task that is not needed immediately because the results are not believed to be visible.,"

addTask
public void addTask(Runnable task)
Add a task that is not needed immediately because
 the results are not believed to be visible.

"
LayoutQueue,getDefaultQueue(),static LayoutQueue,Fetch the default layout queue.,"

getDefaultQueue
public static LayoutQueue getDefaultQueue()
Fetch the default layout queue.

"
LayoutQueue,setDefaultQueue(LayoutQueue q),static void,Set the default layout queue.,"

setDefaultQueue
public static void setDefaultQueue(LayoutQueue q)
Set the default layout queue.

Parameters:
q - the new queue.


"
LayoutQueue,waitForWork(),protected Runnable,Used by the worker thread to get a new task to execute,"

waitForWork
protected Runnable waitForWork()
Used by the worker thread to get a new task to execute

"
MaskFormatter,getInvalidCharacters(),String,Returns the characters that are not valid for input.,"

getInvalidCharacters
public String getInvalidCharacters()
Returns the characters that are not valid for input.

Returns:
illegal characters.


"
MaskFormatter,getMask(),String,Returns the formatting mask.,"

getMask
public String getMask()
Returns the formatting mask.

Returns:
Mask dictating legal character values.


"
MaskFormatter,getPlaceholder(),String,Returns the String to use if the value does not completely fill in the mask.,"

getPlaceholder
public String getPlaceholder()
Returns the String to use if the value does not completely fill
 in the mask.

Returns:
String used when formatting if the value does not
        completely fill the mask


"
MaskFormatter,getPlaceholderCharacter(),char,"Returns the character to use in place of characters that are not present in the value, ie the user must fill them in.","

getPlaceholderCharacter
public char getPlaceholderCharacter()
Returns the character to use in place of characters that are not present
 in the value, ie the user must fill them in.

Returns:
Character used when formatting if the value does not
        completely fill the mask


"
MaskFormatter,getValidCharacters(),String,Returns the valid characters that can be input.,"

getValidCharacters
public String getValidCharacters()
Returns the valid characters that can be input.

Returns:
Legal characters


"
MaskFormatter,getValueContainsLiteralCharacters(),boolean,Returns true if stringToValue should return literal characters in the mask.,"

getValueContainsLiteralCharacters
public boolean getValueContainsLiteralCharacters()
Returns true if stringToValue should return literal
 characters in the mask.

Returns:
True if literal characters in mask should be returned in
         stringToValue


"
MaskFormatter,install(JFormattedTextField ftf),void,Installs the DefaultFormatter onto a particular JFormattedTextField.,"

install
public void install(JFormattedTextField ftf)
Installs the DefaultFormatter onto a particular
 JFormattedTextField.
 This will invoke valueToString to convert the
 current value from the JFormattedTextField to
 a String. This will then install the Actions from
 getActions, the DocumentFilter
 returned from getDocumentFilter and the
 NavigationFilter returned from
 getNavigationFilter onto the
 JFormattedTextField.
 
 Subclasses will typically only need to override this if they
 wish to install additional listeners on the
 JFormattedTextField.
 
 If there is a ParseException in converting the
 current value to a String, this will set the text to an empty
 String, and mark the JFormattedTextField as being
 in an invalid state.
 
 While this is a public method, this is typically only useful
 for subclassers of JFormattedTextField.
 JFormattedTextField will invoke this method at
 the appropriate times when the value changes, or its internal
 state changes.

Overrides:
install in class DefaultFormatter
Parameters:
ftf - JFormattedTextField to format for, may be null indicating
            uninstall from current JFormattedTextField.


"
MaskFormatter,setInvalidCharacters(String invalidCharacters),void,Allows for further restricting of the characters that can be input.,"

setInvalidCharacters
public void setInvalidCharacters(String invalidCharacters)
Allows for further restricting of the characters that can be input.
 Only characters specified in the mask, not in the
 invalidCharacters, and in
 validCharacters will be allowed to be input. Passing
 in null (the default) implies the valid characters are only bound
 by the mask and the valid characters.

Parameters:
invalidCharacters - If non-null, specifies illegal characters.


"
MaskFormatter,setMask(String mask),void,Sets the mask dictating the legal characters.,"

setMask
public void setMask(String mask)
             throws ParseException
Sets the mask dictating the legal characters.
 This will throw a ParseException if mask is
 not valid.

Throws:
ParseException - if mask does not contain valid mask characters


"
MaskFormatter,setPlaceholder(String placeholder),void,Sets the string to use if the value does not completely fill in the mask.,"

setPlaceholder
public void setPlaceholder(String placeholder)
Sets the string to use if the value does not completely fill in
 the mask. A null value implies the placeholder char should be used.

Parameters:
placeholder - String used when formatting if the value does not
        completely fill the mask


"
MaskFormatter,setPlaceholderCharacter(char placeholder),void,"Sets the character to use in place of characters that are not present in the value, ie the user must fill them in.","

setPlaceholderCharacter
public void setPlaceholderCharacter(char placeholder)
Sets the character to use in place of characters that are not present
 in the value, ie the user must fill them in. The default value is
 a space.
 
 This is only applicable if the placeholder string has not been
 specified, or does not completely fill in the mask.

Parameters:
placeholder - Character used when formatting if the value does not
        completely fill the mask


"
MaskFormatter,setValidCharacters(String validCharacters),void,Allows for further restricting of the characters that can be input.,"

setValidCharacters
public void setValidCharacters(String validCharacters)
Allows for further restricting of the characters that can be input.
 Only characters specified in the mask, not in the
 invalidCharacters, and in
 validCharacters will be allowed to be input. Passing
 in null (the default) implies the valid characters are only bound
 by the mask and the invalid characters.

Parameters:
validCharacters - If non-null, specifies legal characters.


"
MaskFormatter,setValueContainsLiteralCharacters(boolean containsLiteralChars),void,"If true, the returned value and set value will also contain the literal characters in mask.","

setValueContainsLiteralCharacters
public void setValueContainsLiteralCharacters(boolean containsLiteralChars)
If true, the returned value and set value will also contain the literal
 characters in mask.
 
 For example, if the mask is '(###) ###-####', the
 current value is '(415) 555-1212', and
 valueContainsLiteralCharacters is
 true stringToValue will return
 '(415) 555-1212'. On the other hand, if
 valueContainsLiteralCharacters is false,
 stringToValue will return '4155551212'.

Parameters:
containsLiteralChars - Used to indicate if literal characters in
        mask should be returned in stringToValue


"
MaskFormatter,stringToValue(String value),Object,"Parses the text, returning the appropriate Object representation of the String value.","

stringToValue
public Object stringToValue(String value)
                     throws ParseException
Parses the text, returning the appropriate Object representation of
 the String value. This strips the literal characters as
 necessary and invokes supers stringToValue, so that if
 you have specified a value class (setValueClass) an
 instance of it will be created. This will throw a
 ParseException if the value does not match the current
 mask.  Refer to setValueContainsLiteralCharacters(boolean) for details
 on how literals are treated.

Overrides:
stringToValue in class DefaultFormatter
Parameters:
value - String to convert
Returns:
Object representation of text
Throws:
ParseException - if there is an error in the conversion
See Also:
setValueContainsLiteralCharacters(boolean)


"
MaskFormatter,valueToString(Object value),String,Returns a String representation of the Object value based on the mask.,"

valueToString
public String valueToString(Object value)
                     throws ParseException
Returns a String representation of the Object value
 based on the mask.  Refer to
 setValueContainsLiteralCharacters(boolean) for details
 on how literals are treated.

Overrides:
valueToString in class DefaultFormatter
Parameters:
value - Value to convert
Returns:
String representation of value
Throws:
ParseException - if there is an error in the conversion
See Also:
setValueContainsLiteralCharacters(boolean)


"
NavigationFilter,"getNextVisualPositionFrom(JTextComponent text, int pos, Position.Bias bias, int direction, Position.Bias[] biasRet)",int,Returns the next visual position to place the caret at from an existing position.,"

getNextVisualPositionFrom
public int getNextVisualPositionFrom(JTextComponent text,
                                     int pos,
                                     Position.Bias bias,
                                     int direction,
                                     Position.Bias[] biasRet)
                              throws BadLocationException
Returns the next visual position to place the caret at from an
 existing position. The default implementation simply forwards the
 method to the root View. Subclasses may wish to further restrict the
 location based on additional criteria.

Parameters:
text - JTextComponent containing text
pos - Position used in determining next position
bias - Bias used in determining next position
direction - the direction from the current position that can
  be thought of as the arrow keys typically found on a keyboard.
  This will be one of the following values:
 
SwingConstants.WEST
 SwingConstants.EAST
 SwingConstants.NORTH
 SwingConstants.SOUTH
 
biasRet - Used to return resulting Bias of next position
Returns:
the location within the model that best represents the next
  location visual position
Throws:
BadLocationException
IllegalArgumentException - if direction
          doesn't have one of the legal values above


"
NavigationFilter,"moveDot(NavigationFilter.FilterBypass fb, int dot, Position.Bias bias)",void,Invoked prior to the Caret moving the dot.,"

moveDot
public void moveDot(NavigationFilter.FilterBypass fb,
                    int dot,
                    Position.Bias bias)
Invoked prior to the Caret moving the dot. The default implementation
 calls directly into the FilterBypass with the passed
 in arguments. Subclasses may wish to conditionally
 call super with a different location, or invoke the necessary
 methods on the FilterBypass.

Parameters:
fb - FilterBypass that can be used to mutate caret position
dot - the position >= 0
bias - Bias for new location


"
NavigationFilter,"setDot(NavigationFilter.FilterBypass fb, int dot, Position.Bias bias)",void,Invoked prior to the Caret setting the dot.,"

setDot
public void setDot(NavigationFilter.FilterBypass fb,
                   int dot,
                   Position.Bias bias)
Invoked prior to the Caret setting the dot. The default implementation
 calls directly into the FilterBypass with the passed
 in arguments. Subclasses may wish to conditionally
 call super with a different location, or invoke the necessary method
 on the FilterBypass

Parameters:
fb - FilterBypass that can be used to mutate caret position
dot - the position >= 0
bias - Bias to place the dot at


"
NavigationFilter.FilterBypass,getCaret(),abstract Caret,Returns the Caret that is changing.,"

getCaret
public abstract Caret getCaret()
Returns the Caret that is changing.

Returns:
Caret that is changing


"
NavigationFilter.FilterBypass,"moveDot(int dot, Position.Bias bias)",abstract void,"Moves the caret location, bypassing the NavigationFilter.","

moveDot
public abstract void moveDot(int dot,
                             Position.Bias bias)
Moves the caret location, bypassing the NavigationFilter.

Parameters:
dot - the position >= 0
bias - Bias for new location


"
NavigationFilter.FilterBypass,"setDot(int dot, Position.Bias bias)",abstract void,"Sets the caret location, bypassing the NavigationFilter.","

setDot
public abstract void setDot(int dot,
                            Position.Bias bias)
Sets the caret location, bypassing the NavigationFilter.

Parameters:
dot - the position >= 0
bias - Bias to place the dot at


"
NumberFormatter,setFormat(Format format),void,Sets the format that dictates the legal values that can be edited and displayed.,"

setFormat
public void setFormat(Format format)
Sets the format that dictates the legal values that can be edited
 and displayed.
 
 If you have used the nullary constructor the value of this property
 will be determined for the current locale by way of the
 NumberFormat.getNumberInstance() method.

Overrides:
setFormat in class InternationalFormatter
Parameters:
format - NumberFormat instance used to dictate legal values


"
ParagraphView,"breakView(int axis, float len, Shape a)",View,Breaks this view on the given axis at the given length.,"

breakView
public View breakView(int axis,
                      float len,
                      Shape a)
Breaks this view on the given axis at the given length.
 
ParagraphView instances are breakable
 along the Y_AXIS only, and only if
 len is after the first line.

Parameters:
axis - may be either View.X_AXIS
  or View.Y_AXIS
len - specifies where a potential break is desired
  along the given axis >= 0
a - the current allocation of the view
Returns:
the fragment of the view that represents the
  given span, if the view can be broken; if the view
  doesn't support breaking behavior, the view itself is
  returned
See Also:
View.breakView(int, int, float, float)


"
ParagraphView,"calculateMinorAxisRequirements(int axis, SizeRequirements r)",protected SizeRequirements,Calculate the needs for the paragraph along the minor axis.,"

calculateMinorAxisRequirements
protected SizeRequirements calculateMinorAxisRequirements(int axis,
                                                          SizeRequirements r)
Calculate the needs for the paragraph along the minor axis.

 This uses size requirements of the superclass, modified to take into
 account the non-breakable areas at the adjacent views edges.  The minimal
 size requirements for such views should be no less than the sum of all
 adjacent fragments.
If the axis parameter is neither View.X_AXIS nor
 View.Y_AXIS, IllegalArgumentException is thrown.  If the
 r parameter is null, a new SizeRequirements
 object is created, otherwise the supplied SizeRequirements
 object is returned.

Overrides:
calculateMinorAxisRequirements in class FlowView
Parameters:
axis - the minor axis
r - the input SizeRequirements object
Returns:
the new or adjusted SizeRequirements object
Throws:
IllegalArgumentException - if the axis parameter is invalid
See Also:
SizeRequirements


"
ParagraphView,"changedUpdate(DocumentEvent changes, Shape a, ViewFactory f)",void,Gives notification from the document that attributes were changed in a location that this view is responsible for.,"

changedUpdate
public void changedUpdate(DocumentEvent changes,
                          Shape a,
                          ViewFactory f)
Gives notification from the document that attributes were changed
 in a location that this view is responsible for.

Overrides:
changedUpdate in class FlowView
Parameters:
changes - the change information from the
  associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
View.changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
ParagraphView,createRow(),protected View,Create a View that should be used to hold a a row's worth of children in a flow.,"

createRow
protected View createRow()
Create a View that should be used to hold a
 a row's worth of children in a flow.

Specified by:
createRow in class FlowView
Returns:
the new View
Since:
1.3


"
ParagraphView,"findOffsetToCharactersInString(char[] string, int start)",protected int,"Finds the next character in the document with a character in string, starting at offset start.","

findOffsetToCharactersInString
protected int findOffsetToCharactersInString(char[] string,
                                             int start)
Finds the next character in the document with a character in
 string, starting at offset start. If
 there are no characters found, -1 will be returned.

Parameters:
string - the string of characters
start - where to start in the model >= 0
Returns:
the document offset, or -1 if no characters found


"
ParagraphView,"flipEastAndWestAtEnds(int position, Position.Bias bias)",protected boolean,Determines in which direction the next view lays.,"

flipEastAndWestAtEnds
protected boolean flipEastAndWestAtEnds(int position,
                                        Position.Bias bias)
Determines in which direction the next view lays.
 Consider the View at index n.
 Typically the Views are layed out
 from left to right, so that the View
 to the EAST will be at index n + 1, and the
 View to the WEST will be at index n - 1.
 In certain situations, such as with bidirectional text,
 it is possible that the View to EAST is not
 at index n + 1, but rather at index n - 1,
 or that the View to the WEST is not at
 index n - 1, but index n + 1.  In this case this method
 would return true, indicating the Views are
 layed out in descending order.
 
 This will return true if the text is layed out right
 to left at position, otherwise false.

Overrides:
flipEastAndWestAtEnds in class BoxView
Parameters:
position - position into the model
bias - either Position.Bias.Forward or
          Position.Bias.Backward
Returns:
true if the text is layed out right to left at
         position, otherwise false.


"
ParagraphView,getAlignment(int axis),float,Determines the desired alignment for this view along an axis.,"

getAlignment
public float getAlignment(int axis)
Determines the desired alignment for this view along an
 axis.  This is implemented to give the alignment to the
 center of the first row along the y axis, and the default
 along the x axis.

Overrides:
getAlignment in class BoxView
Parameters:
axis - may be either View.X_AXIS or
   View.Y_AXIS
Returns:
the desired alignment.  This should be a value
   between 0.0 and 1.0 inclusive, where 0 indicates alignment at the
   origin and 1.0 indicates alignment to the full span
   away from the origin.  An alignment of 0.5 would be the
   center of the view.


"
ParagraphView,"getBreakWeight(int axis, float len)",int,Gets the break weight for a given location.,"

getBreakWeight
public int getBreakWeight(int axis,
                          float len)
Gets the break weight for a given location.
 
ParagraphView instances are breakable
 along the Y_AXIS only, and only if
 len is after the first row.  If the length
 is less than one row, a value of BadBreakWeight
 is returned.

Parameters:
axis - may be either View.X_AXIS
  or View.Y_AXIS
len - specifies where a potential break is desired >= 0
Returns:
a value indicating the attractiveness of breaking here;
  either GoodBreakWeight or BadBreakWeight
See Also:
View.getBreakWeight(int, float, float)


"
ParagraphView,"getClosestPositionTo(int pos, Position.Bias b, Shape a, int direction, Position.Bias[] biasRet, int rowIndex, int x)",protected int,Returns the closest model position to x.,"

getClosestPositionTo
protected int getClosestPositionTo(int pos,
                                   Position.Bias b,
                                   Shape a,
                                   int direction,
                                   Position.Bias[] biasRet,
                                   int rowIndex,
                                   int x)
                            throws BadLocationException
Returns the closest model position to x.
 rowIndex gives the index of the view that corresponds
 that should be looked in.

Parameters:
pos - position into the model
a - the allocated region to render into
direction - one of the following values:
 
SwingConstants.NORTH
SwingConstants.SOUTH

biasRet - an array containing the bias that were checked
  in this method
rowIndex - the index of the view
x - the x coordinate of interest
Returns:
the closest model position to x
Throws:
BadLocationException


"
ParagraphView,getFlowSpan(int index),int,Fetches the constraining span to flow against for the given child index.,"

getFlowSpan
public int getFlowSpan(int index)
Fetches the constraining span to flow against for
 the given child index.

Overrides:
getFlowSpan in class FlowView
Parameters:
index - the index of the view being queried
Returns:
the constraining span for the given view at
  index
Since:
1.3
See Also:
FlowView.getFlowStart(int)


"
ParagraphView,getFlowStart(int index),int,Fetches the location along the flow axis that the flow span will start at.,"

getFlowStart
public int getFlowStart(int index)
Fetches the location along the flow axis that the
 flow span will start at.

Overrides:
getFlowStart in class FlowView
Parameters:
index - the index of the view being queried
Returns:
the location for the given view at
  index
Since:
1.3
See Also:
FlowView.getFlowSpan(int)


"
ParagraphView,getLayoutView(int index),protected View,Returns the view at a given index.,"

getLayoutView
protected View getLayoutView(int index)
Returns the view at a given index.
 The child views of the paragraph are rows which
 have been used to arrange pieces of the Views
 that represent the child elements.  This methods returns
 the view responsible for the child element index
 (prior to breaking).  These are the Views that were
 produced from a factory (to represent the child
 elements) and used for layout.

Parameters:
index - the index of the desired view
Returns:
the view at index


"
ParagraphView,getLayoutViewCount(),protected int,Returns the number of views that this view is responsible for.,"

getLayoutViewCount
protected int getLayoutViewCount()
Returns the number of views that this view is
 responsible for.
 The child views of the paragraph are rows which
 have been used to arrange pieces of the Views
 that represent the child elements.  This is the number
 of views that have been tiled in two dimensions,
 and should be equivalent to the number of child elements
 to the element this view is responsible for.

Returns:
the number of views that this ParagraphView
          is responsible for


"
ParagraphView,"getNextNorthSouthVisualPositionFrom(int pos, Position.Bias b, Shape a, int direction, Position.Bias[] biasRet)",protected int,"Returns the next visual position for the cursor, in either the east or west direction.","

getNextNorthSouthVisualPositionFrom
protected int getNextNorthSouthVisualPositionFrom(int pos,
                                                  Position.Bias b,
                                                  Shape a,
                                                  int direction,
                                                  Position.Bias[] biasRet)
                                           throws BadLocationException
Returns the next visual position for the cursor, in
 either the east or west direction.
 Overridden from CompositeView.

Overrides:
getNextNorthSouthVisualPositionFrom in class CompositeView
Parameters:
pos - position into the model
b - either Position.Bias.Forward or
          Position.Bias.Backward
a - the allocated region to render into
direction - either SwingConstants.NORTH
          or SwingConstants.SOUTH
biasRet - an array containing the bias that were checked
  in this method
Returns:
the location in the model that represents the
  next location visual position
Throws:
BadLocationException
See Also:
CompositeView.getNextVisualPositionFrom(int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[])


"
ParagraphView,"getPartialSize(int startOffset, int endOffset)",protected float,Returns the size used by the views between startOffset and endOffset.,"

getPartialSize
protected float getPartialSize(int startOffset,
                               int endOffset)
Returns the size used by the views between
 startOffset and endOffset.
 This uses getPartialView to calculate the
 size if the child view implements the
 TabableView interface. If a
 size is needed and a View does not implement
 the TabableView interface,
 the preferredSpan will be used.

Parameters:
startOffset - the starting document offset >= 0
endOffset - the ending document offset >= startOffset
Returns:
the size >= 0


"
ParagraphView,getTabBase(),protected float,Returns where the tabs are calculated from.,"

getTabBase
protected float getTabBase()
Returns where the tabs are calculated from.

Returns:
where tabs are calculated from


"
ParagraphView,getTabSet(),protected TabSet,Gets the Tabset to be used in calculating tabs.,"

getTabSet
protected TabSet getTabSet()
Gets the Tabset to be used in calculating tabs.

Returns:
the TabSet


"
ParagraphView,"nextTabStop(float x, int tabOffset)",float,Returns the next tab stop position given a reference position.,"

nextTabStop
public float nextTabStop(float x,
                         int tabOffset)
Returns the next tab stop position given a reference position.
 This view implements the tab coordinate system, and calls
 getTabbedSpan on the logical children in the process
 of layout to determine the desired span of the children.  The
 logical children can delegate their tab expansion upward to
 the paragraph which knows how to expand tabs.
 LabelView is an example of a view that delegates
 its tab expansion needs upward to the paragraph.
 
 This is implemented to try and locate a TabSet
 in the paragraph element's attribute set.  If one can be
 found, its settings will be used, otherwise a default expansion
 will be provided.  The base location for for tab expansion
 is the left inset from the paragraphs most recent allocation
 (which is what the layout of the children is based upon).

Specified by:
nextTabStop in interface TabExpander
Parameters:
x - the X reference position
tabOffset - the position within the text stream
   that the tab occurred at >= 0
Returns:
the trailing end of the tab expansion >= 0
See Also:
TabSet, 
TabStop, 
LabelView


"
ParagraphView,"paint(Graphics g, Shape a)",void,Renders using the given rendering surface and area on that surface.,"

paint
public void paint(Graphics g,
                  Shape a)
Renders using the given rendering surface and area on that
 surface.  This is implemented to delegate to the superclass
 after stashing the base coordinate for tab calculations.

Overrides:
paint in class BoxView
Parameters:
g - the rendering surface to use
a - the allocated region to render into
See Also:
View.paint(java.awt.Graphics, java.awt.Shape)


"
ParagraphView,setFirstLineIndent(float fi),protected void,Sets the indent on the first line.,"

setFirstLineIndent
protected void setFirstLineIndent(float fi)
Sets the indent on the first line.

Parameters:
fi - the value in points


"
ParagraphView,setJustification(int j),protected void,Sets the type of justification.,"

setJustification
protected void setJustification(int j)
Sets the type of justification.

Parameters:
j - one of the following values:
 
StyleConstants.ALIGN_LEFT
StyleConstants.ALIGN_CENTER
StyleConstants.ALIGN_RIGHT



"
ParagraphView,setLineSpacing(float ls),protected void,Sets the line spacing.,"

setLineSpacing
protected void setLineSpacing(float ls)
Sets the line spacing.

Parameters:
ls - the value is a factor of the line hight


"
ParagraphView,setPropertiesFromAttributes(),protected void,Set the cached properties from the attributes.,"

setPropertiesFromAttributes
protected void setPropertiesFromAttributes()
Set the cached properties from the attributes.

"
PasswordView,"drawEchoCharacter(Graphics g, int x, int y, char c)",protected int,"Renders the echo character, or whatever graphic should be used to display the password characters.","

drawEchoCharacter
protected int drawEchoCharacter(Graphics g,
                                int x,
                                int y,
                                char c)
Renders the echo character, or whatever graphic should be used
 to display the password characters.  The color in the Graphics
 object is set to the appropriate foreground color for selected
 or unselected text.

Parameters:
g - the graphics context
x - the starting X coordinate >= 0
y - the starting Y coordinate >= 0
c - the echo character
Returns:
the updated X position >= 0


"
PasswordView,"drawSelectedText(Graphics g, int x, int y, int p0, int p1)",protected int,Renders the given range in the model as selected text.,"

drawSelectedText
protected int drawSelectedText(Graphics g,
                               int x,
                               int y,
                               int p0,
                               int p1)
                        throws BadLocationException
Renders the given range in the model as selected text.  This
 is implemented to render the text in the color specified in
 the hosting component.  It assumes the highlighter will render
 the selected background.  Uses the result of getEchoChar() to
 display the characters.

Overrides:
drawSelectedText in class PlainView
Parameters:
g - the graphics context
x - the starting X coordinate >= 0
y - the starting Y coordinate >= 0
p0 - the starting offset in the model >= 0
p1 - the ending offset in the model >= p0
Returns:
the X location of the end of the range >= 0
Throws:
BadLocationException - if p0 or p1 are out of range


"
PasswordView,"drawUnselectedText(Graphics g, int x, int y, int p0, int p1)",protected int,Renders the given range in the model as normal unselected text.,"

drawUnselectedText
protected int drawUnselectedText(Graphics g,
                                 int x,
                                 int y,
                                 int p0,
                                 int p1)
                          throws BadLocationException
Renders the given range in the model as normal unselected
 text.  This sets the foreground color and echos the characters
 using the value returned by getEchoChar().

Overrides:
drawUnselectedText in class PlainView
Parameters:
g - the graphics context
x - the starting X coordinate >= 0
y - the starting Y coordinate >= 0
p0 - the starting offset in the model >= 0
p1 - the ending offset in the model >= p0
Returns:
the X location of the end of the range >= 0
Throws:
BadLocationException - if p0 or p1 are out of range


"
PasswordView,getPreferredSpan(int axis),float,Determines the preferred span for this view along an axis.,"

getPreferredSpan
public float getPreferredSpan(int axis)
Determines the preferred span for this view along an
 axis.

Overrides:
getPreferredSpan in class FieldView
Parameters:
axis - may be either View.X_AXIS or View.Y_AXIS
Returns:
the span the view would like to be rendered into >= 0.
           Typically the view is told to render into the span
           that is returned, although there is no guarantee.
           The parent may choose to resize or break the view.
See Also:
View.getPreferredSpan(int)


"
PasswordView,"modelToView(int pos, Shape a, Position.Bias b)",Shape,Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.,"

modelToView
public Shape modelToView(int pos,
                         Shape a,
                         Position.Bias b)
                  throws BadLocationException
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.

Overrides:
modelToView in class FieldView
Parameters:
pos - the position to convert >= 0
a - the allocated region to render into
b - the bias toward the previous character or the
  next character represented by the offset, in case the
  position is a boundary of two views; b will have one
  of these values:
 
 Position.Bias.Forward
 Position.Bias.Backward

Returns:
the bounding box of the given position
Throws:
BadLocationException - if the given position does not
   represent a valid location in the associated document
See Also:
View.modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias)


"
PasswordView,"viewToModel(float fx, float fy, Shape a, Position.Bias[] bias)",int,Provides a mapping from the view coordinate space to the logical coordinate space of the model.,"

viewToModel
public int viewToModel(float fx,
                       float fy,
                       Shape a,
                       Position.Bias[] bias)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.

Overrides:
viewToModel in class FieldView
Parameters:
fx - the X coordinate >= 0.0f
fy - the Y coordinate >= 0.0f
a - the allocated region to render into
Returns:
the location within the model that best represents the
  given point in the view
See Also:
View.viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[])


"
PlainDocument,createDefaultRoot(),protected AbstractDocument.AbstractElement,Creates the root element to be used to represent the default document structure.,"

createDefaultRoot
protected AbstractDocument.AbstractElement createDefaultRoot()
Creates the root element to be used to represent the
 default document structure.

Returns:
the element base


"
PlainDocument,getDefaultRootElement(),Element,Gets the default root element for the document model.,"

getDefaultRootElement
public Element getDefaultRootElement()
Gets the default root element for the document model.

Specified by:
getDefaultRootElement in interface Document
Specified by:
getDefaultRootElement in class AbstractDocument
Returns:
the root
See Also:
Document.getDefaultRootElement()


"
PlainDocument,getParagraphElement(int pos),Element,Get the paragraph element containing the given position.,"

getParagraphElement
public Element getParagraphElement(int pos)
Get the paragraph element containing the given position.  Since this
 document only models lines, it returns the line instead.

Specified by:
getParagraphElement in class AbstractDocument
Parameters:
pos - the starting offset >= 0
Returns:
the element


"
PlainDocument,"insertString(int offs, String str, AttributeSet a)",void,Inserts some content into the document.,"

insertString
public void insertString(int offs,
                         String str,
                         AttributeSet a)
                  throws BadLocationException
Inserts some content into the document.
 Inserting content causes a write lock to be held while the
 actual changes are taking place, followed by notification
 to the observers on the thread that grabbed the write lock.
 
 This method is thread safe, although most Swing methods
 are not. Please see
 Concurrency
 in Swing for more information.

Specified by:
insertString in interface Document
Overrides:
insertString in class AbstractDocument
Parameters:
offs - the starting offset >= 0
str - the string to insert; does nothing with null/empty strings
a - the attributes for the inserted content
Throws:
BadLocationException - the given insert position is not a valid
   position within the document
See Also:
Document.insertString(int, java.lang.String, javax.swing.text.AttributeSet)


"
PlainDocument,"insertUpdate(AbstractDocument.DefaultDocumentEvent chng, AttributeSet attr)",protected void,Updates document structure as a result of text insertion.,"

insertUpdate
protected void insertUpdate(AbstractDocument.DefaultDocumentEvent chng,
                            AttributeSet attr)
Updates document structure as a result of text insertion.  This
 will happen within a write lock.  Since this document simply
 maps out lines, we refresh the line map.

Overrides:
insertUpdate in class AbstractDocument
Parameters:
chng - the change event describing the dit
attr - the set of attributes for the inserted text


"
PlainDocument,removeUpdate(AbstractDocument.DefaultDocumentEvent chng),protected void,Updates any document structure as a result of text removal.,"

removeUpdate
protected void removeUpdate(AbstractDocument.DefaultDocumentEvent chng)
Updates any document structure as a result of text removal.
 This will happen within a write lock. Since the structure
 represents a line map, this just checks to see if the
 removal spans lines.  If it does, the two lines outside
 of the removal area are joined together.

Overrides:
removeUpdate in class AbstractDocument
Parameters:
chng - the change event describing the edit


"
PlainView,"changedUpdate(DocumentEvent changes, Shape a, ViewFactory f)",void,Gives notification from the document that attributes were changed in a location that this view is responsible for.,"

changedUpdate
public void changedUpdate(DocumentEvent changes,
                          Shape a,
                          ViewFactory f)
Gives notification from the document that attributes were changed
 in a location that this view is responsible for.

Overrides:
changedUpdate in class View
Parameters:
changes - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
View.changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
PlainView,"damageLineRange(int line0, int line1, Shape a, Component host)",protected void,Repaint the given line range.,"

damageLineRange
protected void damageLineRange(int line0,
                               int line1,
                               Shape a,
                               Component host)
Repaint the given line range.

Parameters:
host - the component hosting the view (used to call repaint)
a - the region allocated for the view to render into
line0 - the starting line number to repaint.  This must
   be a valid line number in the model.
line1 - the ending line number to repaint.  This must
   be a valid line number in the model.
Since:
1.4


"
PlainView,"drawLine(int lineIndex, Graphics g, int x, int y)",protected void,"Renders a line of text, suppressing whitespace at the end and expanding any tabs.","

drawLine
protected void drawLine(int lineIndex,
                        Graphics g,
                        int x,
                        int y)
Renders a line of text, suppressing whitespace at the end
 and expanding any tabs.  This is implemented to make calls
 to the methods drawUnselectedText and
 drawSelectedText so that the way selected and
 unselected text are rendered can be customized.

Parameters:
lineIndex - the line to draw >= 0
g - the Graphics context
x - the starting X position >= 0
y - the starting Y position >= 0
See Also:
drawUnselectedText(java.awt.Graphics, int, int, int, int), 
drawSelectedText(java.awt.Graphics, int, int, int, int)


"
PlainView,"drawSelectedText(Graphics g, int x, int y, int p0, int p1)",protected int,Renders the given range in the model as selected text.,"

drawSelectedText
protected int drawSelectedText(Graphics g,
                               int x,
                               int y,
                               int p0,
                               int p1)
                        throws BadLocationException
Renders the given range in the model as selected text.  This
 is implemented to render the text in the color specified in
 the hosting component.  It assumes the highlighter will render
 the selected background.

Parameters:
g - the graphics context
x - the starting X coordinate >= 0
y - the starting Y coordinate >= 0
p0 - the beginning position in the model >= 0
p1 - the ending position in the model >= 0
Returns:
the location of the end of the range
Throws:
BadLocationException - if the range is invalid


"
PlainView,"drawUnselectedText(Graphics g, int x, int y, int p0, int p1)",protected int,Renders the given range in the model as normal unselected text.,"

drawUnselectedText
protected int drawUnselectedText(Graphics g,
                                 int x,
                                 int y,
                                 int p0,
                                 int p1)
                          throws BadLocationException
Renders the given range in the model as normal unselected
 text.  Uses the foreground or disabled color to render the text.

Parameters:
g - the graphics context
x - the starting X coordinate >= 0
y - the starting Y coordinate >= 0
p0 - the beginning position in the model >= 0
p1 - the ending position in the model >= 0
Returns:
the X location of the end of the range >= 0
Throws:
BadLocationException - if the range is invalid


"
PlainView,getLineBuffer(),protected Segment,Gives access to a buffer that can be used to fetch text from the associated document.,"

getLineBuffer
protected final Segment getLineBuffer()
Gives access to a buffer that can be used to fetch
 text from the associated document.

Returns:
the buffer


"
PlainView,getPreferredSpan(int axis),float,Determines the preferred span for this view along an axis.,"

getPreferredSpan
public float getPreferredSpan(int axis)
Determines the preferred span for this view along an
 axis.

Specified by:
getPreferredSpan in class View
Parameters:
axis - may be either View.X_AXIS or View.Y_AXIS
Returns:
the span the view would like to be rendered into >= 0.
           Typically the view is told to render into the span
           that is returned, although there is no guarantee.
           The parent may choose to resize or break the view.
Throws:
IllegalArgumentException - for an invalid axis
See Also:
View.getPreferredSpan(int)


"
PlainView,getTabSize(),protected int,"Returns the tab size set for the document, defaulting to 8.","

getTabSize
protected int getTabSize()
Returns the tab size set for the document, defaulting to 8.

Returns:
the tab size


"
PlainView,"insertUpdate(DocumentEvent changes, Shape a, ViewFactory f)",void,Gives notification that something was inserted into the document in a location that this view is responsible for.,"

insertUpdate
public void insertUpdate(DocumentEvent changes,
                         Shape a,
                         ViewFactory f)
Gives notification that something was inserted into the document
 in a location that this view is responsible for.

Overrides:
insertUpdate in class View
Parameters:
changes - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
View.insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
PlainView,"lineToRect(Shape a, int line)",protected Rectangle,Determine the rectangle that represents the given line.,"

lineToRect
protected Rectangle lineToRect(Shape a,
                               int line)
Determine the rectangle that represents the given line.

Parameters:
a - the region allocated for the view to render into
line - the line number to find the region of.  This must
   be a valid line number in the model.
Since:
1.4


"
PlainView,"modelToView(int pos, Shape a, Position.Bias b)",Shape,Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.,"

modelToView
public Shape modelToView(int pos,
                         Shape a,
                         Position.Bias b)
                  throws BadLocationException
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.

Specified by:
modelToView in class View
Parameters:
pos - the position to convert >= 0
a - the allocated region to render into
b - the bias toward the previous character or the
  next character represented by the offset, in case the
  position is a boundary of two views; b will have one
  of these values:
 
 Position.Bias.Forward
 Position.Bias.Backward

Returns:
the bounding box of the given position
Throws:
BadLocationException - if the given position does not
   represent a valid location in the associated document
See Also:
View.modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias)


"
PlainView,"nextTabStop(float x, int tabOffset)",float,Returns the next tab stop position after a given reference position.,"

nextTabStop
public float nextTabStop(float x,
                         int tabOffset)
Returns the next tab stop position after a given reference position.
 This implementation does not support things like centering so it
 ignores the tabOffset argument.

Specified by:
nextTabStop in interface TabExpander
Parameters:
x - the current position >= 0
tabOffset - the position within the text stream
   that the tab occurred at >= 0.
Returns:
the tab stop, measured in points >= 0


"
PlainView,"paint(Graphics g, Shape a)",void,Renders using the given rendering surface and area on that surface.,"

paint
public void paint(Graphics g,
                  Shape a)
Renders using the given rendering surface and area on that surface.
 The view may need to do layout and create child views to enable
 itself to render into the given allocation.

Specified by:
paint in class View
Parameters:
g - the rendering surface to use
a - the allocated region to render into
See Also:
View.paint(java.awt.Graphics, java.awt.Shape)


"
PlainView,"removeUpdate(DocumentEvent changes, Shape a, ViewFactory f)",void,Gives notification that something was removed from the document in a location that this view is responsible for.,"

removeUpdate
public void removeUpdate(DocumentEvent changes,
                         Shape a,
                         ViewFactory f)
Gives notification that something was removed from the document
 in a location that this view is responsible for.

Overrides:
removeUpdate in class View
Parameters:
changes - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
View.removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
PlainView,"setSize(float width, float height)",void,Sets the size of the view.,"

setSize
public void setSize(float width,
                    float height)
Sets the size of the view.  This should cause
 layout of the view along the given axis, if it
 has any layout duties.

Overrides:
setSize in class View
Parameters:
width - the width >= 0
height - the height >= 0


"
PlainView,"updateDamage(DocumentEvent changes, Shape a, ViewFactory f)",protected void,Repaint the region of change covered by the given document event.,"

updateDamage
protected void updateDamage(DocumentEvent changes,
                            Shape a,
                            ViewFactory f)
Repaint the region of change covered by the given document
 event.  Damages the line that begins the range to cover
 the case when the insert/remove is only on one line.
 If lines are added or removed, damages the whole
 view.  The longest line is checked to see if it has
 changed.

Since:
1.4


"
PlainView,updateMetrics(),protected void,Checks to see if the font metrics and longest line are up-to-date.,"

updateMetrics
protected void updateMetrics()
Checks to see if the font metrics and longest line
 are up-to-date.

Since:
1.4


"
PlainView,"viewToModel(float fx, float fy, Shape a, Position.Bias[] bias)",int,Provides a mapping from the view coordinate space to the logical coordinate space of the model.,"

viewToModel
public int viewToModel(float fx,
                       float fy,
                       Shape a,
                       Position.Bias[] bias)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.

Specified by:
viewToModel in class View
Parameters:
fx - the X coordinate >= 0
fy - the Y coordinate >= 0
a - the allocated region to render into
Returns:
the location within the model that best represents the
  given point in the view >= 0
See Also:
View.viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[])


"
Position.Bias,toString(),String,string representation,"

toString
public String toString()
string representation

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
Segment,charAt(int index),char,Returns the char value at the specified index.,"

charAt
public char charAt(int index)
Returns the char value at the specified index.  An index ranges from zero
 to length() - 1.  The first char value of the sequence is at
 index zero, the next at index one, and so on, as for array
 indexing.

 If the char value specified by the index is a
 surrogate, the surrogate
 value is returned.

Specified by:
charAt in interface CharSequence
Parameters:
index - the index of the char value to be returned
Returns:
the specified char value
Since:
1.6


"
Segment,clone(),Object,Creates a shallow copy.,"

clone
public Object clone()
Creates a shallow copy.

Specified by:
clone in interface CharacterIterator
Overrides:
clone in class Object
Returns:
the copy
See Also:
Cloneable


"
Segment,current(),char,Gets the character at the current position (as returned by getIndex()).,"

current
public char current()
Gets the character at the current position (as returned by getIndex()).

Specified by:
current in interface CharacterIterator
Returns:
the character at the current position or DONE if the current
 position is off the end of the text.
Since:
1.3
See Also:
getIndex()


"
Segment,first(),char,Sets the position to getBeginIndex() and returns the character at that position.,"

first
public char first()
Sets the position to getBeginIndex() and returns the character at that
 position.

Specified by:
first in interface CharacterIterator
Returns:
the first character in the text, or DONE if the text is empty
Since:
1.3
See Also:
getBeginIndex()


"
Segment,getBeginIndex(),int,Returns the start index of the text.,"

getBeginIndex
public int getBeginIndex()
Returns the start index of the text.

Specified by:
getBeginIndex in interface CharacterIterator
Returns:
the index at which the text begins.
Since:
1.3


"
Segment,getEndIndex(),int,Returns the end index of the text.,"

getEndIndex
public int getEndIndex()
Returns the end index of the text.  This index is the index of the first
 character following the end of the text.

Specified by:
getEndIndex in interface CharacterIterator
Returns:
the index after the last character in the text
Since:
1.3


"
Segment,getIndex(),int,Returns the current index.,"

getIndex
public int getIndex()
Returns the current index.

Specified by:
getIndex in interface CharacterIterator
Returns:
the current index.
Since:
1.3


"
Segment,isPartialReturn(),boolean,Flag to indicate that partial returns are valid.,"

isPartialReturn
public boolean isPartialReturn()
Flag to indicate that partial returns are valid.

Returns:
whether or not partial returns are valid.
Since:
1.4


"
Segment,last(),char,Sets the position to getEndIndex()-1 (getEndIndex() if the text is empty) and returns the character at that position.,"

last
public char last()
Sets the position to getEndIndex()-1 (getEndIndex() if the text is empty)
 and returns the character at that position.

Specified by:
last in interface CharacterIterator
Returns:
the last character in the text, or DONE if the text is empty
Since:
1.3
See Also:
getEndIndex()


"
Segment,length(),int,Returns the length of this character sequence.,"

length
public int length()
Returns the length of this character sequence.  The length is the number
 of 16-bit chars in the sequence.

Specified by:
length in interface CharSequence
Returns:
the number of chars in this sequence
Since:
1.6


"
Segment,next(),char,Increments the iterator's index by one and returns the character at the new index.,"

next
public char next()
Increments the iterator's index by one and returns the character
 at the new index.  If the resulting index is greater or equal
 to getEndIndex(), the current index is reset to getEndIndex() and
 a value of DONE is returned.

Specified by:
next in interface CharacterIterator
Returns:
the character at the new position or DONE if the new
 position is off the end of the text range.
Since:
1.3


"
Segment,previous(),char,Decrements the iterator's index by one and returns the character at the new index.,"

previous
public char previous()
Decrements the iterator's index by one and returns the character
 at the new index. If the current index is getBeginIndex(), the index
 remains at getBeginIndex() and a value of DONE is returned.

Specified by:
previous in interface CharacterIterator
Returns:
the character at the new position or DONE if the current
 position is equal to getBeginIndex().
Since:
1.3


"
Segment,setIndex(int position),char,Sets the position to the specified position in the text and returns that character.,"

setIndex
public char setIndex(int position)
Sets the position to the specified position in the text and returns that
 character.

Specified by:
setIndex in interface CharacterIterator
Parameters:
position - the position within the text.  Valid values range from
 getBeginIndex() to getEndIndex().  An IllegalArgumentException is thrown
 if an invalid value is supplied.
Returns:
the character at the specified position or DONE if the specified position is equal to getEndIndex()
Since:
1.3


"
Segment,setPartialReturn(boolean p),void,Flag to indicate that partial returns are valid.,"

setPartialReturn
public void setPartialReturn(boolean p)
Flag to indicate that partial returns are valid.  If the flag is true,
 an implementation of the interface method Document.getText(position,length,Segment)
 should return as much text as possible without making a copy.  The default
 state of the flag is false which will cause Document.getText(position,length,Segment)
 to provide the same return behavior it always had, which may or may not
 make a copy of the text depending upon the request.

Parameters:
p - whether or not partial returns are valid.
Since:
1.4


"
Segment,"subSequence(int start, int end)",CharSequence,Returns a CharSequence that is a subsequence of this sequence.,"

subSequence
public CharSequence subSequence(int start,
                                int end)
Returns a CharSequence that is a subsequence of this sequence.
 The subsequence starts with the char value at the specified index and
 ends with the char value at index end - 1.  The length
 (in chars) of the
 returned sequence is end - start, so if start == end
 then an empty sequence is returned.

Specified by:
subSequence in interface CharSequence
Parameters:
start - the start index, inclusive
end - the end index, exclusive
Returns:
the specified subsequence
Since:
1.6


"
Segment,toString(),String,Converts a segment into a String.,"

toString
public String toString()
Converts a segment into a String.

Specified by:
toString in interface CharSequence
Overrides:
toString in class Object
Returns:
the string


"
SimpleAttributeSet,"addAttribute(Object name, Object value)",void,Adds an attribute to the list.,"

addAttribute
public void addAttribute(Object name,
                         Object value)
Adds an attribute to the list.

Specified by:
addAttribute in interface MutableAttributeSet
Parameters:
name - the attribute name
value - the attribute value


"
SimpleAttributeSet,addAttributes(AttributeSet attributes),void,Adds a set of attributes to the list.,"

addAttributes
public void addAttributes(AttributeSet attributes)
Adds a set of attributes to the list.

Specified by:
addAttributes in interface MutableAttributeSet
Parameters:
attributes - the set of attributes to add


"
SimpleAttributeSet,clone(),Object,Clones a set of attributes.,"

clone
public Object clone()
Clones a set of attributes.

Overrides:
clone in class Object
Returns:
the new set of attributes
See Also:
Cloneable


"
SimpleAttributeSet,"containsAttribute(Object name, Object value)",boolean,Checks whether the attribute list contains a specified attribute name/value pair.,"

containsAttribute
public boolean containsAttribute(Object name,
                                 Object value)
Checks whether the attribute list contains a
 specified attribute name/value pair.

Specified by:
containsAttribute in interface AttributeSet
Parameters:
name - the name
value - the value
Returns:
true if the name/value pair is in the list


"
SimpleAttributeSet,containsAttributes(AttributeSet attributes),boolean,Checks whether the attribute list contains all the specified name/value pairs.,"

containsAttributes
public boolean containsAttributes(AttributeSet attributes)
Checks whether the attribute list contains all the
 specified name/value pairs.

Specified by:
containsAttributes in interface AttributeSet
Parameters:
attributes - the attribute list
Returns:
true if the list contains all the name/value pairs


"
SimpleAttributeSet,copyAttributes(),AttributeSet,Makes a copy of the attributes.,"

copyAttributes
public AttributeSet copyAttributes()
Makes a copy of the attributes.

Specified by:
copyAttributes in interface AttributeSet
Returns:
the copy


"
SimpleAttributeSet,equals(Object obj),boolean,Compares this object to the specified object.,"

equals
public boolean equals(Object obj)
Compares this object to the specified object.
 The result is true if the object is an equivalent
 set of attributes.

Overrides:
equals in class Object
Parameters:
obj - the object to compare this attribute set with
Returns:
true if the objects are equal;
            false otherwise
See Also:
Object.hashCode(), 
HashMap


"
SimpleAttributeSet,getAttribute(Object name),Object,Gets the value of an attribute.,"

getAttribute
public Object getAttribute(Object name)
Gets the value of an attribute.

Specified by:
getAttribute in interface AttributeSet
Parameters:
name - the attribute name
Returns:
the value


"
SimpleAttributeSet,getAttributeCount(),int,Gets a count of the number of attributes.,"

getAttributeCount
public int getAttributeCount()
Gets a count of the number of attributes.

Specified by:
getAttributeCount in interface AttributeSet
Returns:
the count


"
SimpleAttributeSet,getAttributeNames(),Enumeration<?>,Gets the names of the attributes in the set.,"

getAttributeNames
public Enumeration<?> getAttributeNames()
Gets the names of the attributes in the set.

Specified by:
getAttributeNames in interface AttributeSet
Returns:
the names as an Enumeration


"
SimpleAttributeSet,getResolveParent(),AttributeSet,Gets the resolving parent.,"

getResolveParent
public AttributeSet getResolveParent()
Gets the resolving parent.  This is the set
 of attributes to resolve through if an attribute
 isn't defined locally.  This is null if there
 are no other sets of attributes to resolve
 through.

Specified by:
getResolveParent in interface AttributeSet
Returns:
the parent


"
SimpleAttributeSet,hashCode(),int,Returns a hashcode for this set of attributes.,"

hashCode
public int hashCode()
Returns a hashcode for this set of attributes.

Overrides:
hashCode in class Object
Returns:
a hashcode value for this set of attributes.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
SimpleAttributeSet,isDefined(Object attrName),boolean,Tells whether a given attribute is defined.,"

isDefined
public boolean isDefined(Object attrName)
Tells whether a given attribute is defined.

Specified by:
isDefined in interface AttributeSet
Parameters:
attrName - the attribute name
Returns:
true if the attribute is defined


"
SimpleAttributeSet,isEmpty(),boolean,Checks whether the set of attributes is empty.,"

isEmpty
public boolean isEmpty()
Checks whether the set of attributes is empty.

Returns:
true if the set is empty else false


"
SimpleAttributeSet,isEqual(AttributeSet attr),boolean,Compares two attribute sets.,"

isEqual
public boolean isEqual(AttributeSet attr)
Compares two attribute sets.

Specified by:
isEqual in interface AttributeSet
Parameters:
attr - the second attribute set
Returns:
true if the sets are equal, false otherwise


"
SimpleAttributeSet,removeAttribute(Object name),void,Removes an attribute from the list.,"

removeAttribute
public void removeAttribute(Object name)
Removes an attribute from the list.

Specified by:
removeAttribute in interface MutableAttributeSet
Parameters:
name - the attribute name


"
SimpleAttributeSet,removeAttributes(AttributeSet attributes),void,Removes a set of attributes from the list.,"

removeAttributes
public void removeAttributes(AttributeSet attributes)
Removes a set of attributes from the list.

Specified by:
removeAttributes in interface MutableAttributeSet
Parameters:
attributes - the set of attributes to remove


"
SimpleAttributeSet,removeAttributes(Enumeration<?> names),void,Removes a set of attributes from the list.,"

removeAttributes
public void removeAttributes(Enumeration<?> names)
Removes a set of attributes from the list.

Specified by:
removeAttributes in interface MutableAttributeSet
Parameters:
names - the set of names to remove


"
SimpleAttributeSet,setResolveParent(AttributeSet parent),void,Sets the resolving parent.,"

setResolveParent
public void setResolveParent(AttributeSet parent)
Sets the resolving parent.

Specified by:
setResolveParent in interface MutableAttributeSet
Parameters:
parent - the parent


"
SimpleAttributeSet,toString(),String,Converts the attribute set to a String.,"

toString
public String toString()
Converts the attribute set to a String.

Overrides:
toString in class Object
Returns:
the string


"
StringContent,createPosition(int offset),Position,Creates a position within the content that will track change as the content is mutated.,"

createPosition
public Position createPosition(int offset)
                        throws BadLocationException
Creates a position within the content that will
 track change as the content is mutated.

Specified by:
createPosition in interface AbstractDocument.Content
Parameters:
offset - the offset to create a position for >= 0
Returns:
the position
Throws:
BadLocationException - if the specified position is invalid


"
StringContent,"getChars(int where, int len, Segment chars)",void,Retrieves a portion of the content.,"

getChars
public void getChars(int where,
                     int len,
                     Segment chars)
              throws BadLocationException
Retrieves a portion of the content.  where + len must be <= length()

Specified by:
getChars in interface AbstractDocument.Content
Parameters:
where - the starting position >= 0
len - the number of characters to retrieve >= 0
chars - the Segment object to return the characters in
Throws:
BadLocationException - if the specified position is invalid
See Also:
AbstractDocument.Content.getChars(int, int, javax.swing.text.Segment)


"
StringContent,"getPositionsInRange(Vector v, int offset, int length)",protected Vector,Returns a Vector containing instances of UndoPosRef for the Positions in the range offset to offset + length.,"

getPositionsInRange
protected Vector getPositionsInRange(Vector v,
                                     int offset,
                                     int length)
Returns a Vector containing instances of UndoPosRef for the
 Positions in the range
 offset to offset + length.
 If v is not null the matching Positions are placed in
 there. The vector with the resulting Positions are returned.
 
 This is meant for internal usage, and is generally not of interest
 to subclasses.

Parameters:
v - the Vector to use, with a new one created on null
offset - the starting offset >= 0
length - the length >= 0
Returns:
the set of instances


"
StringContent,"getString(int where, int len)",String,Retrieves a portion of the content.,"

getString
public String getString(int where,
                        int len)
                 throws BadLocationException
Retrieves a portion of the content.  where + len must be <= length().

Specified by:
getString in interface AbstractDocument.Content
Parameters:
where - the starting position >= 0
len - the length to retrieve >= 0
Returns:
a string representing the content; may be empty
Throws:
BadLocationException - if the specified position is invalid
See Also:
AbstractDocument.Content.getString(int, int)


"
StringContent,"insertString(int where, String str)",UndoableEdit,Inserts a string into the content.,"

insertString
public UndoableEdit insertString(int where,
                                 String str)
                          throws BadLocationException
Inserts a string into the content.

Specified by:
insertString in interface AbstractDocument.Content
Parameters:
where - the starting position >= 0 && < length()
str - the non-null string to insert
Returns:
an UndoableEdit object for undoing
Throws:
BadLocationException - if the specified position is invalid
See Also:
AbstractDocument.Content.insertString(int, java.lang.String)


"
StringContent,length(),int,Returns the length of the content.,"

length
public int length()
Returns the length of the content.

Specified by:
length in interface AbstractDocument.Content
Returns:
the length >= 1
See Also:
AbstractDocument.Content.length()


"
StringContent,"remove(int where, int nitems)",UndoableEdit,Removes part of the content.,"

remove
public UndoableEdit remove(int where,
                           int nitems)
                    throws BadLocationException
Removes part of the content.  where + nitems must be < length().

Specified by:
remove in interface AbstractDocument.Content
Parameters:
where - the starting position >= 0
nitems - the number of characters to remove >= 0
Returns:
an UndoableEdit object for undoing
Throws:
BadLocationException - if the specified position is invalid
See Also:
AbstractDocument.Content.remove(int, int)


"
StringContent,updateUndoPositions(Vector positions),protected void,Resets the location for all the UndoPosRef instances in positions.,"

updateUndoPositions
protected void updateUndoPositions(Vector positions)
Resets the location for all the UndoPosRef instances
 in positions.
 
 This is meant for internal usage, and is generally not of interest
 to subclasses.

Parameters:
positions - the positions of the instances


"
StyleConstants,getAlignment(AttributeSet a),static int,Gets the alignment setting.,"

getAlignment
public static int getAlignment(AttributeSet a)
Gets the alignment setting.

Parameters:
a - the attribute set
Returns:
the value StyleConstants.ALIGN_LEFT if not set


"
StyleConstants,getBackground(AttributeSet a),static Color,Gets the background color setting from the attribute list.,"

getBackground
public static Color getBackground(AttributeSet a)
Gets the background color setting from the attribute list.

Parameters:
a - the attribute set
Returns:
the color, Color.black as the default


"
StyleConstants,getBidiLevel(AttributeSet a),static int,Gets the BidiLevel setting.,"

getBidiLevel
public static int getBidiLevel(AttributeSet a)
Gets the BidiLevel setting.

Parameters:
a - the attribute set
Returns:
the value


"
StyleConstants,getComponent(AttributeSet a),static Component,Gets the component setting from the attribute list.,"

getComponent
public static Component getComponent(AttributeSet a)
Gets the component setting from the attribute list.

Parameters:
a - the attribute set
Returns:
the component, null if none


"
StyleConstants,getFirstLineIndent(AttributeSet a),static float,Gets the first line indent setting.,"

getFirstLineIndent
public static float getFirstLineIndent(AttributeSet a)
Gets the first line indent setting.

Parameters:
a - the attribute set
Returns:
the value, 0 if not set


"
StyleConstants,getFontFamily(AttributeSet a),static String,Gets the font family setting from the attribute list.,"

getFontFamily
public static String getFontFamily(AttributeSet a)
Gets the font family setting from the attribute list.

Parameters:
a - the attribute set
Returns:
the font family, ""Monospaced"" as the default


"
StyleConstants,getFontSize(AttributeSet a),static int,Gets the font size setting from the attribute list.,"

getFontSize
public static int getFontSize(AttributeSet a)
Gets the font size setting from the attribute list.

Parameters:
a - the attribute set
Returns:
the font size, 12 as the default


"
StyleConstants,getForeground(AttributeSet a),static Color,Gets the foreground color setting from the attribute list.,"

getForeground
public static Color getForeground(AttributeSet a)
Gets the foreground color setting from the attribute list.

Parameters:
a - the attribute set
Returns:
the color, Color.black as the default


"
StyleConstants,getIcon(AttributeSet a),static Icon,Gets the icon setting from the attribute list.,"

getIcon
public static Icon getIcon(AttributeSet a)
Gets the icon setting from the attribute list.

Parameters:
a - the attribute set
Returns:
the icon, null if none


"
StyleConstants,getLeftIndent(AttributeSet a),static float,Gets the left indent setting.,"

getLeftIndent
public static float getLeftIndent(AttributeSet a)
Gets the left indent setting.

Parameters:
a - the attribute set
Returns:
the value, 0 if not set


"
StyleConstants,getLineSpacing(AttributeSet a),static float,Gets the line spacing setting.,"

getLineSpacing
public static float getLineSpacing(AttributeSet a)
Gets the line spacing setting.

Parameters:
a - the attribute set
Returns:
the value, 0 if not set


"
StyleConstants,getRightIndent(AttributeSet a),static float,Gets the right indent setting.,"

getRightIndent
public static float getRightIndent(AttributeSet a)
Gets the right indent setting.

Parameters:
a - the attribute set
Returns:
the value, 0 if not set


"
StyleConstants,getSpaceAbove(AttributeSet a),static float,Gets the space above setting.,"

getSpaceAbove
public static float getSpaceAbove(AttributeSet a)
Gets the space above setting.

Parameters:
a - the attribute set
Returns:
the value, 0 if not set


"
StyleConstants,getSpaceBelow(AttributeSet a),static float,Gets the space below setting.,"

getSpaceBelow
public static float getSpaceBelow(AttributeSet a)
Gets the space below setting.

Parameters:
a - the attribute set
Returns:
the value, 0 if not set


"
StyleConstants,getTabSet(AttributeSet a),static TabSet,Gets the TabSet.,"

getTabSet
public static TabSet getTabSet(AttributeSet a)
Gets the TabSet.

Parameters:
a - the attribute set
Returns:
the TabSet


"
StyleConstants,isBold(AttributeSet a),static boolean,Checks whether the bold attribute is set.,"

isBold
public static boolean isBold(AttributeSet a)
Checks whether the bold attribute is set.

Parameters:
a - the attribute set
Returns:
true if set else false


"
StyleConstants,isItalic(AttributeSet a),static boolean,Checks whether the italic attribute is set.,"

isItalic
public static boolean isItalic(AttributeSet a)
Checks whether the italic attribute is set.

Parameters:
a - the attribute set
Returns:
true if set else false


"
StyleConstants,isStrikeThrough(AttributeSet a),static boolean,Checks whether the strikethrough attribute is set.,"

isStrikeThrough
public static boolean isStrikeThrough(AttributeSet a)
Checks whether the strikethrough attribute is set.

Parameters:
a - the attribute set
Returns:
true if set else false


"
StyleConstants,isSubscript(AttributeSet a),static boolean,Checks whether the subscript attribute is set.,"

isSubscript
public static boolean isSubscript(AttributeSet a)
Checks whether the subscript attribute is set.

Parameters:
a - the attribute set
Returns:
true if set else false


"
StyleConstants,isSuperscript(AttributeSet a),static boolean,Checks whether the superscript attribute is set.,"

isSuperscript
public static boolean isSuperscript(AttributeSet a)
Checks whether the superscript attribute is set.

Parameters:
a - the attribute set
Returns:
true if set else false


"
StyleConstants,isUnderline(AttributeSet a),static boolean,Checks whether the underline attribute is set.,"

isUnderline
public static boolean isUnderline(AttributeSet a)
Checks whether the underline attribute is set.

Parameters:
a - the attribute set
Returns:
true if set else false


"
StyleConstants,"setAlignment(MutableAttributeSet a, int align)",static void,Sets alignment.,"

setAlignment
public static void setAlignment(MutableAttributeSet a,
                                int align)
Sets alignment.

Parameters:
a - the attribute set
align - the alignment value


"
StyleConstants,"setBackground(MutableAttributeSet a, Color fg)",static void,Sets the background color.,"

setBackground
public static void setBackground(MutableAttributeSet a,
                                 Color fg)
Sets the background color.

Parameters:
a - the attribute set
fg - the color


"
StyleConstants,"setBidiLevel(MutableAttributeSet a, int o)",static void,Sets the BidiLevel.,"

setBidiLevel
public static void setBidiLevel(MutableAttributeSet a,
                                int o)
Sets the BidiLevel.

Parameters:
a - the attribute set
o - the bidi level value


"
StyleConstants,"setBold(MutableAttributeSet a, boolean b)",static void,Sets the bold attribute.,"

setBold
public static void setBold(MutableAttributeSet a,
                           boolean b)
Sets the bold attribute.

Parameters:
a - the attribute set
b - specifies true/false for setting the attribute


"
StyleConstants,"setComponent(MutableAttributeSet a, Component c)",static void,Sets the component attribute.,"

setComponent
public static void setComponent(MutableAttributeSet a,
                                Component c)
Sets the component attribute.

Parameters:
a - the attribute set
c - the component


"
StyleConstants,"setFirstLineIndent(MutableAttributeSet a, float i)",static void,Sets the first line indent.,"

setFirstLineIndent
public static void setFirstLineIndent(MutableAttributeSet a,
                                      float i)
Sets the first line indent.

Parameters:
a - the attribute set
i - the value


"
StyleConstants,"setFontFamily(MutableAttributeSet a, String fam)",static void,Sets the font attribute.,"

setFontFamily
public static void setFontFamily(MutableAttributeSet a,
                                 String fam)
Sets the font attribute.

Parameters:
a - the attribute set
fam - the font


"
StyleConstants,"setFontSize(MutableAttributeSet a, int s)",static void,Sets the font size attribute.,"

setFontSize
public static void setFontSize(MutableAttributeSet a,
                               int s)
Sets the font size attribute.

Parameters:
a - the attribute set
s - the font size


"
StyleConstants,"setForeground(MutableAttributeSet a, Color fg)",static void,Sets the foreground color.,"

setForeground
public static void setForeground(MutableAttributeSet a,
                                 Color fg)
Sets the foreground color.

Parameters:
a - the attribute set
fg - the color


"
StyleConstants,"setIcon(MutableAttributeSet a, Icon c)",static void,Sets the icon attribute.,"

setIcon
public static void setIcon(MutableAttributeSet a,
                           Icon c)
Sets the icon attribute.

Parameters:
a - the attribute set
c - the icon


"
StyleConstants,"setItalic(MutableAttributeSet a, boolean b)",static void,Sets the italic attribute.,"

setItalic
public static void setItalic(MutableAttributeSet a,
                             boolean b)
Sets the italic attribute.

Parameters:
a - the attribute set
b - specifies true/false for setting the attribute


"
StyleConstants,"setLeftIndent(MutableAttributeSet a, float i)",static void,Sets left indent.,"

setLeftIndent
public static void setLeftIndent(MutableAttributeSet a,
                                 float i)
Sets left indent.

Parameters:
a - the attribute set
i - the value


"
StyleConstants,"setLineSpacing(MutableAttributeSet a, float i)",static void,Sets line spacing.,"

setLineSpacing
public static void setLineSpacing(MutableAttributeSet a,
                                  float i)
Sets line spacing.

Parameters:
a - the attribute set
i - the value


"
StyleConstants,"setRightIndent(MutableAttributeSet a, float i)",static void,Sets right indent.,"

setRightIndent
public static void setRightIndent(MutableAttributeSet a,
                                  float i)
Sets right indent.

Parameters:
a - the attribute set
i - the value


"
StyleConstants,"setSpaceAbove(MutableAttributeSet a, float i)",static void,Sets space above.,"

setSpaceAbove
public static void setSpaceAbove(MutableAttributeSet a,
                                 float i)
Sets space above.

Parameters:
a - the attribute set
i - the value


"
StyleConstants,"setSpaceBelow(MutableAttributeSet a, float i)",static void,Sets space below.,"

setSpaceBelow
public static void setSpaceBelow(MutableAttributeSet a,
                                 float i)
Sets space below.

Parameters:
a - the attribute set
i - the value


"
StyleConstants,"setStrikeThrough(MutableAttributeSet a, boolean b)",static void,Sets the strikethrough attribute.,"

setStrikeThrough
public static void setStrikeThrough(MutableAttributeSet a,
                                    boolean b)
Sets the strikethrough attribute.

Parameters:
a - the attribute set
b - specifies true/false for setting the attribute


"
StyleConstants,"setSubscript(MutableAttributeSet a, boolean b)",static void,Sets the subscript attribute.,"

setSubscript
public static void setSubscript(MutableAttributeSet a,
                                boolean b)
Sets the subscript attribute.

Parameters:
a - the attribute set
b - specifies true/false for setting the attribute


"
StyleConstants,"setSuperscript(MutableAttributeSet a, boolean b)",static void,Sets the superscript attribute.,"

setSuperscript
public static void setSuperscript(MutableAttributeSet a,
                                  boolean b)
Sets the superscript attribute.

Parameters:
a - the attribute set
b - specifies true/false for setting the attribute


"
StyleConstants,"setTabSet(MutableAttributeSet a, TabSet tabs)",static void,Sets the TabSet.,"

setTabSet
public static void setTabSet(MutableAttributeSet a,
                             TabSet tabs)
Sets the TabSet.

Parameters:
a - the attribute set.
tabs - the TabSet


"
StyleConstants,"setUnderline(MutableAttributeSet a, boolean b)",static void,Sets the underline attribute.,"

setUnderline
public static void setUnderline(MutableAttributeSet a,
                                boolean b)
Sets the underline attribute.

Parameters:
a - the attribute set
b - specifies true/false for setting the attribute


"
StyleConstants,toString(),String,Returns the string representation.,"

toString
public String toString()
Returns the string representation.

Overrides:
toString in class Object
Returns:
the string


"
StyleContext,"addAttribute(AttributeSet old, Object name, Object value)",AttributeSet,"Adds an attribute to the given set, and returns the new representative set.","

addAttribute
public AttributeSet addAttribute(AttributeSet old,
                                 Object name,
                                 Object value)
Adds an attribute to the given set, and returns
 the new representative set.
 
 This method is thread safe, although most Swing methods
 are not. Please see
 Concurrency
 in Swing for more information.

Specified by:
addAttribute in interface AbstractDocument.AttributeContext
Parameters:
old - the old attribute set
name - the non-null attribute name
value - the attribute value
Returns:
the updated attribute set
See Also:
MutableAttributeSet.addAttribute(java.lang.Object, java.lang.Object)


"
StyleContext,"addAttributes(AttributeSet old, AttributeSet attr)",AttributeSet,Adds a set of attributes to the element.,"

addAttributes
public AttributeSet addAttributes(AttributeSet old,
                                  AttributeSet attr)
Adds a set of attributes to the element.
 
 This method is thread safe, although most Swing methods
 are not. Please see
 Concurrency
 in Swing for more information.

Specified by:
addAttributes in interface AbstractDocument.AttributeContext
Parameters:
old - the old attribute set
attr - the attributes to add
Returns:
the updated attribute set
See Also:
MutableAttributeSet.addAttribute(java.lang.Object, java.lang.Object)


"
StyleContext,addChangeListener(ChangeListener l),void,Adds a listener to track when styles are added or removed.,"

addChangeListener
public void addChangeListener(ChangeListener l)
Adds a listener to track when styles are added
 or removed.

Parameters:
l - the change listener


"
StyleContext,"addStyle(String nm, Style parent)",Style,Adds a new style into the style hierarchy.,"

addStyle
public Style addStyle(String nm,
                      Style parent)
Adds a new style into the style hierarchy.  Style attributes
 resolve from bottom up so an attribute specified in a child
 will override an attribute specified in the parent.

Parameters:
nm - the name of the style (must be unique within the
   collection of named styles in the document).  The name may
   be null if the style is unnamed, but the caller is responsible
   for managing the reference returned as an unnamed style can't
   be fetched by name.  An unnamed style may be useful for things
   like character attribute overrides such as found in a style
   run.
parent - the parent style.  This may be null if unspecified
   attributes need not be resolved in some other style.
Returns:
the created style


"
StyleContext,createLargeAttributeSet(AttributeSet a),protected MutableAttributeSet,Create a large set of attributes that should trade off space for time.,"

createLargeAttributeSet
protected MutableAttributeSet createLargeAttributeSet(AttributeSet a)
Create a large set of attributes that should trade off
 space for time.  This set will not be shared.  This is
 a hook for subclasses that want to alter the behavior
 of the larger attribute storage format (which is
 SimpleAttributeSet by default).   This can be reimplemented
 to return a MutableAttributeSet that provides some sort of
 attribute conversion.

Parameters:
a - The set of attributes to be represented in the
  the larger form.


"
StyleContext,createSmallAttributeSet(AttributeSet a),protected StyleContext.SmallAttributeSet,Create a compact set of attributes that might be shared.,"

createSmallAttributeSet
protected StyleContext.SmallAttributeSet createSmallAttributeSet(AttributeSet a)
Create a compact set of attributes that might be shared.
 This is a hook for subclasses that want to alter the
 behavior of SmallAttributeSet.  This can be reimplemented
 to return an AttributeSet that provides some sort of
 attribute conversion.

Parameters:
a - The set of attributes to be represented in the
  the compact form.


"
StyleContext,getBackground(AttributeSet attr),Color,Takes a set of attributes and turn it into a background color specification.,"

getBackground
public Color getBackground(AttributeSet attr)
Takes a set of attributes and turn it into a background color
 specification.  This might be used to specify things
 like brighter, more hue, etc.  By default it simply returns
 the value specified by the StyleConstants.Background attribute.

Parameters:
attr - the set of attributes
Returns:
the color


"
StyleContext,getChangeListeners(),ChangeListener[],Returns an array of all the ChangeListeners added to this StyleContext with addChangeListener().,"

getChangeListeners
public ChangeListener[] getChangeListeners()
Returns an array of all the ChangeListeners added
 to this StyleContext with addChangeListener().

Returns:
all of the ChangeListeners added or an empty
         array if no listeners have been added
Since:
1.4


"
StyleContext,getCompressionThreshold(),protected int,Returns the maximum number of key/value pairs to try and compress into unique/immutable sets.,"

getCompressionThreshold
protected int getCompressionThreshold()
Returns the maximum number of key/value pairs to try and
 compress into unique/immutable sets.  Any sets above this
 limit will use hashtables and be a MutableAttributeSet.

Returns:
the threshold


"
StyleContext,getDefaultStyleContext(),static StyleContext,Returns default AttributeContext shared by all documents that don't bother to define/supply their own context.,"

getDefaultStyleContext
public static final StyleContext getDefaultStyleContext()
Returns default AttributeContext shared by all documents that
 don't bother to define/supply their own context.

Returns:
the context


"
StyleContext,getEmptySet(),AttributeSet,Fetches an empty AttributeSet.,"

getEmptySet
public AttributeSet getEmptySet()
Fetches an empty AttributeSet.

Specified by:
getEmptySet in interface AbstractDocument.AttributeContext
Returns:
the set


"
StyleContext,getFont(AttributeSet attr),Font,Gets the font from an attribute set.,"

getFont
public Font getFont(AttributeSet attr)
Gets the font from an attribute set.  This is
 implemented to try and fetch a cached font
 for the given AttributeSet, and if that fails
 the font features are resolved and the
 font is fetched from the low-level font cache.

Parameters:
attr - the attribute set
Returns:
the font


"
StyleContext,"getFont(String family, int style, int size)",Font,Gets a new font.,"

getFont
public Font getFont(String family,
                    int style,
                    int size)
Gets a new font.  This returns a Font from a cache
 if a cached font exists.  If not, a Font is added to
 the cache.  This is basically a low-level cache for
 1.1 font features.

Parameters:
family - the font family (such as ""Monospaced"")
style - the style of the font (such as Font.PLAIN)
size - the point size >= 1
Returns:
the new font


"
StyleContext,getFontMetrics(Font f),FontMetrics,Returns font metrics for a font.,"

getFontMetrics
public FontMetrics getFontMetrics(Font f)
Returns font metrics for a font.

Parameters:
f - the font
Returns:
the metrics


"
StyleContext,getForeground(AttributeSet attr),Color,Takes a set of attributes and turn it into a foreground color specification.,"

getForeground
public Color getForeground(AttributeSet attr)
Takes a set of attributes and turn it into a foreground color
 specification.  This might be used to specify things
 like brighter, more hue, etc.  By default it simply returns
 the value specified by the StyleConstants.Foreground attribute.

Parameters:
attr - the set of attributes
Returns:
the color


"
StyleContext,getStaticAttribute(Object key),static Object,Returns the object previously registered with registerStaticAttributeKey.,"

getStaticAttribute
public static Object getStaticAttribute(Object key)
Returns the object previously registered with
 registerStaticAttributeKey.

"
StyleContext,getStaticAttributeKey(Object key),static Object,Returns the String that key will be registered with,"

getStaticAttributeKey
public static Object getStaticAttributeKey(Object key)
Returns the String that key will be registered with

See Also:
getStaticAttribute(java.lang.Object), 
registerStaticAttributeKey(java.lang.Object)


"
StyleContext,getStyle(String nm),Style,Fetches a named style previously added to the document,"

getStyle
public Style getStyle(String nm)
Fetches a named style previously added to the document

Parameters:
nm - the name of the style
Returns:
the style


"
StyleContext,getStyleNames(),Enumeration<?>,Fetches the names of the styles defined.,"

getStyleNames
public Enumeration<?> getStyleNames()
Fetches the names of the styles defined.

Returns:
the list of names as an enumeration


"
StyleContext,"readAttributes(ObjectInputStream in, MutableAttributeSet a)",void,Context-specific handling of reading in attributes,"

readAttributes
public void readAttributes(ObjectInputStream in,
                           MutableAttributeSet a)
                    throws ClassNotFoundException,
                           IOException
Context-specific handling of reading in attributes

Throws:
ClassNotFoundException
IOException


"
StyleContext,"readAttributeSet(ObjectInputStream in, MutableAttributeSet a)",static void,Reads a set of attributes from the given object input stream that have been previously written out with writeAttributeSet.,"

readAttributeSet
public static void readAttributeSet(ObjectInputStream in,
                                    MutableAttributeSet a)
                             throws ClassNotFoundException,
                                    IOException
Reads a set of attributes from the given object input
 stream that have been previously written out with
 writeAttributeSet.  This will try to restore
 keys that were static objects to the static objects in
 the current virtual machine considering only those keys
 that have been registered with the
 registerStaticAttributeKey method.
 The attributes retrieved from the stream will be placed
 into the given mutable set.

Parameters:
in - the object stream to read the attribute data from.
a - the attribute set to place the attribute
   definitions in.
Throws:
ClassNotFoundException - passed upward if encountered
  when reading the object stream.
IOException - passed upward if encountered when
  reading the object stream.


"
StyleContext,reclaim(AttributeSet a),void,Returns a set no longer needed by the MutableAttributeSet implementation.,"

reclaim
public void reclaim(AttributeSet a)
Returns a set no longer needed by the MutableAttributeSet implementation.
 This is useful for operation under 1.1 where there are no weak
 references.  This would typically be called by the finalize method
 of the MutableAttributeSet implementation.
 
 This method is thread safe, although most Swing methods
 are not. Please see
 Concurrency
 in Swing for more information.

Specified by:
reclaim in interface AbstractDocument.AttributeContext
Parameters:
a - the set to reclaim


"
StyleContext,registerStaticAttributeKey(Object key),static void,Registers an object as a static object that is being used as a key in attribute sets.,"

registerStaticAttributeKey
public static void registerStaticAttributeKey(Object key)
Registers an object as a static object that is being
 used as a key in attribute sets.  This allows the key
 to be treated specially for serialization.
 
 For operation under a 1.1 virtual machine, this
 uses the value returned by toString
 concatenated to the classname.  The value returned
 by toString should not have the class reference
 in it (ie it should be reimplemented from the
 definition in Object) in order to be the same when
 recomputed later.

Parameters:
key - the non-null object key


"
StyleContext,"removeAttribute(AttributeSet old, Object name)",AttributeSet,Removes an attribute from the set.,"

removeAttribute
public AttributeSet removeAttribute(AttributeSet old,
                                    Object name)
Removes an attribute from the set.
 
 This method is thread safe, although most Swing methods
 are not. Please see
 Concurrency
 in Swing for more information.

Specified by:
removeAttribute in interface AbstractDocument.AttributeContext
Parameters:
old - the old set of attributes
name - the non-null attribute name
Returns:
the updated attribute set
See Also:
MutableAttributeSet.removeAttribute(java.lang.Object)


"
StyleContext,"removeAttributes(AttributeSet old, AttributeSet attrs)",AttributeSet,Removes a set of attributes for the element.,"

removeAttributes
public AttributeSet removeAttributes(AttributeSet old,
                                     AttributeSet attrs)
Removes a set of attributes for the element.
 
 This method is thread safe, although most Swing methods
 are not. Please see
 Concurrency
 in Swing for more information.

Specified by:
removeAttributes in interface AbstractDocument.AttributeContext
Parameters:
old - the old attribute set
attrs - the attributes
Returns:
the updated attribute set
See Also:
MutableAttributeSet.removeAttributes(java.util.Enumeration<?>)


"
StyleContext,"removeAttributes(AttributeSet old, Enumeration<?> names)",AttributeSet,Removes a set of attributes for the element.,"

removeAttributes
public AttributeSet removeAttributes(AttributeSet old,
                                     Enumeration<?> names)
Removes a set of attributes for the element.
 
 This method is thread safe, although most Swing methods
 are not. Please see
 Concurrency
 in Swing for more information.

Specified by:
removeAttributes in interface AbstractDocument.AttributeContext
Parameters:
old - the old attribute set
names - the attribute names
Returns:
the updated attribute set
See Also:
MutableAttributeSet.removeAttributes(java.util.Enumeration<?>)


"
StyleContext,removeChangeListener(ChangeListener l),void,Removes a listener that was tracking styles being added or removed.,"

removeChangeListener
public void removeChangeListener(ChangeListener l)
Removes a listener that was tracking styles being
 added or removed.

Parameters:
l - the change listener


"
StyleContext,removeStyle(String nm),void,Removes a named style previously added to the document.,"

removeStyle
public void removeStyle(String nm)
Removes a named style previously added to the document.

Parameters:
nm - the name of the style to remove


"
StyleContext,toString(),String,Converts a StyleContext to a String.,"

toString
public String toString()
Converts a StyleContext to a String.

Overrides:
toString in class Object
Returns:
the string


"
StyleContext,"writeAttributes(ObjectOutputStream out, AttributeSet a)",void,Context-specific handling of writing out attributes,"

writeAttributes
public void writeAttributes(ObjectOutputStream out,
                            AttributeSet a)
                     throws IOException
Context-specific handling of writing out attributes

Throws:
IOException


"
StyleContext,"writeAttributeSet(ObjectOutputStream out, AttributeSet a)",static void,Writes a set of attributes to the given object stream for the purpose of serialization.,"

writeAttributeSet
public static void writeAttributeSet(ObjectOutputStream out,
                                     AttributeSet a)
                              throws IOException
Writes a set of attributes to the given object stream
 for the purpose of serialization.  This will take
 special care to deal with static attribute keys that
 have been registered wit the
 registerStaticAttributeKey method.
 Any attribute key not registered as a static key
 will be serialized directly.  All values are expected
 to be serializable.

Parameters:
out - the output stream
a - the attribute set
Throws:
IOException - on any I/O error


"
StyledEditorKit,clone(),Object,Creates a copy of the editor kit.,"

clone
public Object clone()
Creates a copy of the editor kit.

Overrides:
clone in class EditorKit
Returns:
the copy
See Also:
Cloneable


"
StyledEditorKit,createDefaultDocument(),Document,Creates an uninitialized text storage model that is appropriate for this type of editor.,"

createDefaultDocument
public Document createDefaultDocument()
Creates an uninitialized text storage model
 that is appropriate for this type of editor.

Overrides:
createDefaultDocument in class DefaultEditorKit
Returns:
the model


"
StyledEditorKit,"createInputAttributes(Element element, MutableAttributeSet set)",protected void,Copies the key/values in elements AttributeSet into set.,"

createInputAttributes
protected void createInputAttributes(Element element,
                                     MutableAttributeSet set)
Copies the key/values in elements AttributeSet into
 set. This does not copy component, icon, or element
 names attributes. Subclasses may wish to refine what is and what
 isn't copied here. But be sure to first remove all the attributes that
 are in set.
 This is called anytime the caret moves over a different location.

"
StyledEditorKit,deinstall(JEditorPane c),void,Called when the kit is being removed from the JEditorPane.,"

deinstall
public void deinstall(JEditorPane c)
Called when the kit is being removed from the
 JEditorPane.  This is used to unregister any
 listeners that were attached.

Overrides:
deinstall in class EditorKit
Parameters:
c - the JEditorPane


"
StyledEditorKit,getActions(),Action[],Fetches the command list for the editor.,"

getActions
public Action[] getActions()
Fetches the command list for the editor.  This is
 the list of commands supported by the superclass
 augmented by the collection of commands defined
 locally for style operations.

Overrides:
getActions in class DefaultEditorKit
Returns:
the command list


"
StyledEditorKit,getCharacterAttributeRun(),Element,Fetches the element representing the current run of character attributes for the caret.,"

getCharacterAttributeRun
public Element getCharacterAttributeRun()
Fetches the element representing the current
 run of character attributes for the caret.

Returns:
the element


"
StyledEditorKit,getInputAttributes(),MutableAttributeSet,Gets the input attributes for the pane.,"

getInputAttributes
public MutableAttributeSet getInputAttributes()
Gets the input attributes for the pane.  When
 the caret moves and there is no selection, the
 input attributes are automatically mutated to
 reflect the character attributes of the current
 caret location.  The styled editing actions
 use the input attributes to carry out their
 actions.

Returns:
the attribute set


"
StyledEditorKit,getViewFactory(),ViewFactory,Fetches a factory that is suitable for producing views of any models that are produced by this kit.,"

getViewFactory
public ViewFactory getViewFactory()
Fetches a factory that is suitable for producing
 views of any models that are produced by this
 kit.  This is implemented to return View implementations
 for the following kinds of elements:
 
AbstractDocument.ContentElementName
 AbstractDocument.ParagraphElementName
 AbstractDocument.SectionElementName
 StyleConstants.ComponentElementName
 StyleConstants.IconElementName
 

Overrides:
getViewFactory in class DefaultEditorKit
Returns:
the factory


"
StyledEditorKit,install(JEditorPane c),void,Called when the kit is being installed into a JEditorPane.,"

install
public void install(JEditorPane c)
Called when the kit is being installed into
 a JEditorPane.

Overrides:
install in class EditorKit
Parameters:
c - the JEditorPane


"
StyledEditorKit.AlignmentAction,actionPerformed(ActionEvent e),void,Sets the alignment.,"

actionPerformed
public void actionPerformed(ActionEvent e)
Sets the alignment.

Parameters:
e - the action event


"
StyledEditorKit.BoldAction,actionPerformed(ActionEvent e),void,Toggles the bold attribute.,"

actionPerformed
public void actionPerformed(ActionEvent e)
Toggles the bold attribute.

Parameters:
e - the action event


"
StyledEditorKit.FontFamilyAction,actionPerformed(ActionEvent e),void,Sets the font family.,"

actionPerformed
public void actionPerformed(ActionEvent e)
Sets the font family.

Parameters:
e - the event


"
StyledEditorKit.FontSizeAction,actionPerformed(ActionEvent e),void,Sets the font size.,"

actionPerformed
public void actionPerformed(ActionEvent e)
Sets the font size.

Parameters:
e - the action event


"
StyledEditorKit.ForegroundAction,actionPerformed(ActionEvent e),void,Sets the foreground color.,"

actionPerformed
public void actionPerformed(ActionEvent e)
Sets the foreground color.

Parameters:
e - the action event


"
StyledEditorKit.ItalicAction,actionPerformed(ActionEvent e),void,Toggles the italic attribute.,"

actionPerformed
public void actionPerformed(ActionEvent e)
Toggles the italic attribute.

Parameters:
e - the action event


"
StyledEditorKit.StyledTextAction,getEditor(ActionEvent e),protected JEditorPane,Gets the target editor for an action.,"

getEditor
protected final JEditorPane getEditor(ActionEvent e)
Gets the target editor for an action.

Parameters:
e - the action event
Returns:
the editor


"
StyledEditorKit.StyledTextAction,getStyledDocument(JEditorPane e),protected StyledDocument,Gets the document associated with an editor pane.,"

getStyledDocument
protected final StyledDocument getStyledDocument(JEditorPane e)
Gets the document associated with an editor pane.

Parameters:
e - the editor
Returns:
the document
Throws:
IllegalArgumentException - for the wrong document type


"
StyledEditorKit.StyledTextAction,getStyledEditorKit(JEditorPane e),protected StyledEditorKit,Gets the editor kit associated with an editor pane.,"

getStyledEditorKit
protected final StyledEditorKit getStyledEditorKit(JEditorPane e)
Gets the editor kit associated with an editor pane.

Parameters:
e - the editor pane
Returns:
the kit
Throws:
IllegalArgumentException - for the wrong document type


"
StyledEditorKit.StyledTextAction,"setCharacterAttributes(JEditorPane editor, AttributeSet attr, boolean replace)",protected void,Applies the given attributes to character content.,"

setCharacterAttributes
protected final void setCharacterAttributes(JEditorPane editor,
                                            AttributeSet attr,
                                            boolean replace)
Applies the given attributes to character
 content.  If there is a selection, the attributes
 are applied to the selection range.  If there
 is no selection, the attributes are applied to
 the input attribute set which defines the attributes
 for any new text that gets inserted.

Parameters:
editor - the editor
attr - the attributes
replace - if true, then replace the existing attributes first


"
StyledEditorKit.StyledTextAction,"setParagraphAttributes(JEditorPane editor, AttributeSet attr, boolean replace)",protected void,Applies the given attributes to paragraphs.,"

setParagraphAttributes
protected final void setParagraphAttributes(JEditorPane editor,
                                            AttributeSet attr,
                                            boolean replace)
Applies the given attributes to paragraphs.  If
 there is a selection, the attributes are applied
 to the paragraphs that intersect the selection.
 if there is no selection, the attributes are applied
 to the paragraph at the current caret position.

Parameters:
editor - the editor
attr - the attributes
replace - if true, replace the existing attributes first


"
StyledEditorKit.UnderlineAction,actionPerformed(ActionEvent e),void,Toggles the Underline attribute.,"

actionPerformed
public void actionPerformed(ActionEvent e)
Toggles the Underline attribute.

Parameters:
e - the action event


"
TableView,"calculateMinorAxisRequirements(int axis, SizeRequirements r)",protected SizeRequirements,Calculate the requirements for the minor axis.,"

calculateMinorAxisRequirements
protected SizeRequirements calculateMinorAxisRequirements(int axis,
                                                          SizeRequirements r)
Calculate the requirements for the minor axis.  This is called by
 the superclass whenever the requirements need to be updated (i.e.
 a preferenceChanged was messaged through this view).
 
 This is implemented to calculate the requirements as the sum of the
 requirements of the columns.

Overrides:
calculateMinorAxisRequirements in class BoxView
Parameters:
axis - the axis being studied
r - the SizeRequirements object;
          if null one will be created
Returns:
the newly initialized SizeRequirements object
See Also:
SizeRequirements


"
TableView,createTableCell(Element elem),protected TableView.TableCell,Deprecated. Table cells can now be any arbitrary View implementation and should be produced by the ViewFactory rather than the table.,"

createTableCell
@Deprecated
protected TableView.TableCell createTableCell(Element elem)
Deprecated. Table cells can now be any arbitrary
 View implementation and should be produced by the
 ViewFactory rather than the table.

Parameters:
elem - an element
Returns:
the cell


"
TableView,createTableRow(Element elem),protected TableView.TableRow,Creates a new table row.,"

createTableRow
protected TableView.TableRow createTableRow(Element elem)
Creates a new table row.

Parameters:
elem - an element
Returns:
the row


"
TableView,"forwardUpdate(DocumentEvent.ElementChange ec, DocumentEvent e, Shape a, ViewFactory f)",protected void,Forwards the given DocumentEvent to the child views that need to be notified of the change to the model.,"

forwardUpdate
protected void forwardUpdate(DocumentEvent.ElementChange ec,
                             DocumentEvent e,
                             Shape a,
                             ViewFactory f)
Description copied from class: BoxView
Forwards the given DocumentEvent to the child views
 that need to be notified of the change to the model.
 If a child changed its requirements and the allocation
 was valid prior to forwarding the portion of the box
 from the starting child to the end of the box will
 be repainted.

Overrides:
forwardUpdate in class BoxView
Parameters:
ec - changes to the element this view is responsible
  for (may be null if there were no changes)
e - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
View.insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory), 
View.removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory), 
View.changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
TableView,"getViewAtPosition(int pos, Rectangle a)",protected View,Fetches the child view that represents the given position in the model.,"

getViewAtPosition
protected View getViewAtPosition(int pos,
                                 Rectangle a)
Fetches the child view that represents the given position in
 the model.  This is implemented to walk through the children
 looking for a range that contains the given position.  In this
 view the children do not necessarily have a one to one mapping
 with the child elements.

Overrides:
getViewAtPosition in class CompositeView
Parameters:
pos - the search position >= 0
a - the allocation to the table on entry, and the
   allocation of the view containing the position on exit
Returns:
the view representing the given position, or
   null if there isn't one


"
TableView,"layoutColumns(int targetSpan, int[] offsets, int[] spans, SizeRequirements[] reqs)",protected void,Lays out the columns to fit within the given target span.,"

layoutColumns
protected void layoutColumns(int targetSpan,
                             int[] offsets,
                             int[] spans,
                             SizeRequirements[] reqs)
Lays out the columns to fit within the given target span.
 Returns the results through offsets and spans.

Parameters:
targetSpan - the given span for total of all the table
  columns
reqs - the requirements desired for each column.  This
  is the column maximum of the cells minimum, preferred, and
  maximum requested span
spans - the return value of how much to allocated to
  each column
offsets - the return value of the offset from the
  origin for each column


"
TableView,"layoutMinorAxis(int targetSpan, int axis, int[] offsets, int[] spans)",protected void,Perform layout for the minor axis of the box (i.e.,"

layoutMinorAxis
protected void layoutMinorAxis(int targetSpan,
                               int axis,
                               int[] offsets,
                               int[] spans)
Perform layout for the minor axis of the box (i.e. the
 axis orthogonal to the axis that it represents).  The results
 of the layout should be placed in the given arrays which represent
 the allocations to the children along the minor axis.  This
 is called by the superclass whenever the layout needs to be
 updated along the minor axis.
 
 This is implemented to call the
 layoutColumns method, and then
 forward to the superclass to actually carry out the layout
 of the tables rows.

Overrides:
layoutMinorAxis in class BoxView
Parameters:
targetSpan - the total span given to the view, which
  would be used to layout the children.
axis - the axis being layed out.
offsets - the offsets from the origin of the view for
  each of the child views.  This is a return value and is
  filled in by the implementation of this method.
spans - the span of each child view.  This is a return
  value and is filled in by the implementation of this method.


"
TableView,"replace(int offset, int length, View[] views)",void,Change the child views.,"

replace
public void replace(int offset,
                    int length,
                    View[] views)
Change the child views.  This is implemented to
 provide the superclass behavior and invalidate the
 grid so that rows and columns will be recalculated.

Overrides:
replace in class BoxView
Parameters:
offset - the starting index into the child views to insert
   the new views; this should be a value >= 0 and <= getViewCount
length - the number of existing child views to remove;
   This should be a value >= 0 and <= (getViewCount() - offset)
views - the child views to add; this value can be
   nullto indicate no children are being added
   (useful to remove)


"
TabSet,equals(Object o),boolean,Indicates whether this TabSet is equal to another one.,"

equals
public boolean equals(Object o)
Indicates whether this TabSet is equal to another one.

Overrides:
equals in class Object
Parameters:
o - the TabSet instance which this instance
  should be compared to.
Returns:
true if o is the instance of
 TabSet, has the same number of TabStops
 and they are all equal, false otherwise.
Since:
1.5
See Also:
Object.hashCode(), 
HashMap


"
TabSet,getTab(int index),TabStop,Returns the TabStop at index index.,"

getTab
public TabStop getTab(int index)
Returns the TabStop at index index. This will throw an
 IllegalArgumentException if index is outside the range
 of tabs.

"
TabSet,getTabAfter(float location),TabStop,Returns the Tab instance after location.,"

getTabAfter
public TabStop getTabAfter(float location)
Returns the Tab instance after location. This will
 return null if there are no tabs after location.

"
TabSet,getTabCount(),int,Returns the number of Tab instances the receiver contains.,"

getTabCount
public int getTabCount()
Returns the number of Tab instances the receiver contains.

"
TabSet,getTabIndex(TabStop tab),int,NULL,"

getTabIndex
public int getTabIndex(TabStop tab)

Returns:
the index of the TabStop tab, or -1 if
 tab is not contained in the receiver.


"
TabSet,getTabIndexAfter(float location),int,Returns the index of the Tab to be used after location.,"

getTabIndexAfter
public int getTabIndexAfter(float location)
Returns the index of the Tab to be used after location.
 This will return -1 if there are no tabs after location.

"
TabSet,hashCode(),int,Returns a hashcode for this set of TabStops.,"

hashCode
public int hashCode()
Returns a hashcode for this set of TabStops.

Overrides:
hashCode in class Object
Returns:
a hashcode value for this set of TabStops.
Since:
1.5
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
TabSet,toString(),String,Returns the string representation of the set of tabs.,"

toString
public String toString()
Returns the string representation of the set of tabs.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
TabStop,equals(Object other),boolean,Returns true if the tabs are equal.,"

equals
public boolean equals(Object other)
Returns true if the tabs are equal.

Overrides:
equals in class Object
Parameters:
other - the reference object with which to compare.
Returns:
true if the tabs are equal, otherwise false
See Also:
Object.hashCode(), 
HashMap


"
TabStop,getAlignment(),int,"Returns the alignment, as an integer, of the tab.","

getAlignment
public int getAlignment()
Returns the alignment, as an integer, of the tab.

Returns:
the alignment of the tab


"
TabStop,getLeader(),int,Returns the leader of the tab.,"

getLeader
public int getLeader()
Returns the leader of the tab.

Returns:
the leader of the tab


"
TabStop,getPosition(),float,"Returns the position, as a float, of the tab.","

getPosition
public float getPosition()
Returns the position, as a float, of the tab.

Returns:
the position of the tab


"
TabStop,hashCode(),int,Returns the hashCode for the object.,"

hashCode
public int hashCode()
Returns the hashCode for the object.  This must be defined
 here to ensure 100% pure.

Overrides:
hashCode in class Object
Returns:
the hashCode for the object
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
TabStop,toString(),String,Returns a string representation of the object.,"

toString
public String toString()
Description copied from class: Object
Returns a string representation of the object. In general, the
 toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method.
 
 The toString method for class Object
 returns a string consisting of the name of the class of which the
 object is an instance, the at-sign character `@', and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words, this method returns a string equal to the
 value of:
 

 getClass().getName() + '@' + Integer.toHexString(hashCode())
 

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
TextAction,"augmentList(Action[] list1, Action[] list2)",static Action[],Takes one list of commands and augments it with another list of commands.,"

augmentList
public static final Action[] augmentList(Action[] list1,
                                         Action[] list2)
Takes one list of
 commands and augments it with another list
 of commands.  The second list takes precedence
 over the first list; that is, when both lists
 contain a command with the same name, the command
 from the second list is used.

Parameters:
list1 - the first list, may be empty but not
              null
list2 - the second list, may be empty but not
              null
Returns:
the augmented list


"
TextAction,getFocusedComponent(),protected JTextComponent,Fetches the text component that currently has focus.,"

getFocusedComponent
protected final JTextComponent getFocusedComponent()
Fetches the text component that currently has focus.
 This allows actions to be shared across text components
 which is useful for key-bindings where a large set of
 actions are defined, but generally used the same way
 across many different components.

Returns:
the component


"
TextAction,getTextComponent(ActionEvent e),protected JTextComponent,Determines the component to use for the action.,"

getTextComponent
protected final JTextComponent getTextComponent(ActionEvent e)
Determines the component to use for the action.
 This if fetched from the source of the ActionEvent
 if it's not null and can be narrowed.  Otherwise,
 the last focused component is used.

Parameters:
e - the ActionEvent
Returns:
the component


"
Utilities,"drawTabbedText(Segment s, int x, int y, Graphics g, TabExpander e, int startOffset)",static int,"Draws the given text, expanding any tabs that are contained using the given tab expansion technique.","

drawTabbedText
public static final int drawTabbedText(Segment s,
                                       int x,
                                       int y,
                                       Graphics g,
                                       TabExpander e,
                                       int startOffset)
Draws the given text, expanding any tabs that are contained
 using the given tab expansion technique.  This particular
 implementation renders in a 1.1 style coordinate system
 where ints are used and 72dpi is assumed.

Parameters:
s - the source of the text
x - the X origin >= 0
y - the Y origin >= 0
g - the graphics context
e - how to expand the tabs.  If this value is null,
   tabs will be expanded as a space character.
startOffset - starting offset of the text in the document >= 0
Returns:
the X location at the end of the rendered text


"
Utilities,"getBreakLocation(Segment s, FontMetrics metrics, int x0, int x, TabExpander e, int startOffset)",static int,Determine where to break the given text to fit within the given span.,"

getBreakLocation
public static final int getBreakLocation(Segment s,
                                         FontMetrics metrics,
                                         int x0,
                                         int x,
                                         TabExpander e,
                                         int startOffset)
Determine where to break the given text to fit
 within the given span. This tries to find a word boundary.

Parameters:
s - the source of the text
metrics - the font metrics to use for the calculation
x0 - the starting view location representing the start
   of the given text.
x - the target view location to translate to an
   offset into the text.
e - how to expand the tabs.  If this value is null,
   tabs will be expanded as a space character.
startOffset - starting offset in the document of the text
Returns:
the offset into the given text


"
Utilities,"getNextWord(JTextComponent c, int offs)",static int,Determines the start of the next word for the given location.,"

getNextWord
public static final int getNextWord(JTextComponent c,
                                    int offs)
                             throws BadLocationException
Determines the start of the next word for the given location.
 Uses BreakIterator.getWordInstance() to actually get the words.

Parameters:
c - the editor
offs - the offset in the document >= 0
Returns:
the location in the model of the word start >= 0
Throws:
BadLocationException - if the offset is out of range


"
Utilities,"getParagraphElement(JTextComponent c, int offs)",static Element,Determines the element to use for a paragraph/line.,"

getParagraphElement
public static final Element getParagraphElement(JTextComponent c,
                                                int offs)
Determines the element to use for a paragraph/line.

Parameters:
c - the editor
offs - the starting offset in the document >= 0
Returns:
the element


"
Utilities,"getPositionAbove(JTextComponent c, int offs, int x)",static int,Determines the position in the model that is closest to the given view location in the row above.,"

getPositionAbove
public static final int getPositionAbove(JTextComponent c,
                                         int offs,
                                         int x)
                                  throws BadLocationException
Determines the position in the model that is closest to the given
 view location in the row above.  The component given must have a
 size to compute the result.  If the component doesn't have a size
 a value of -1 will be returned.

Parameters:
c - the editor
offs - the offset in the document >= 0
x - the X coordinate >= 0
Returns:
the position >= 0 if the request can be computed, otherwise
  a value of -1 will be returned.
Throws:
BadLocationException - if the offset is out of range


"
Utilities,"getPositionBelow(JTextComponent c, int offs, int x)",static int,Determines the position in the model that is closest to the given view location in the row below.,"

getPositionBelow
public static final int getPositionBelow(JTextComponent c,
                                         int offs,
                                         int x)
                                  throws BadLocationException
Determines the position in the model that is closest to the given
 view location in the row below.  The component given must have a
 size to compute the result.  If the component doesn't have a size
 a value of -1 will be returned.

Parameters:
c - the editor
offs - the offset in the document >= 0
x - the X coordinate >= 0
Returns:
the position >= 0 if the request can be computed, otherwise
  a value of -1 will be returned.
Throws:
BadLocationException - if the offset is out of range


"
Utilities,"getPreviousWord(JTextComponent c, int offs)",static int,Determine the start of the prev word for the given location.,"

getPreviousWord
public static final int getPreviousWord(JTextComponent c,
                                        int offs)
                                 throws BadLocationException
Determine the start of the prev word for the given location.
 Uses BreakIterator.getWordInstance() to actually get the words.

Parameters:
c - the editor
offs - the offset in the document >= 0
Returns:
the location in the model of the word start >= 0
Throws:
BadLocationException - if the offset is out of range


"
Utilities,"getRowEnd(JTextComponent c, int offs)",static int,Determines the ending row model position of the row that contains the specified model position.,"

getRowEnd
public static final int getRowEnd(JTextComponent c,
                                  int offs)
                           throws BadLocationException
Determines the ending row model position of the row that contains
 the specified model position.  The component given must have a
 size to compute the result.  If the component doesn't have a size
 a value of -1 will be returned.

Parameters:
c - the editor
offs - the offset in the document >= 0
Returns:
the position >= 0 if the request can be computed, otherwise
  a value of -1 will be returned.
Throws:
BadLocationException - if the offset is out of range


"
Utilities,"getRowStart(JTextComponent c, int offs)",static int,Determines the starting row model position of the row that contains the specified model position.,"

getRowStart
public static final int getRowStart(JTextComponent c,
                                    int offs)
                             throws BadLocationException
Determines the starting row model position of the row that contains
 the specified model position.  The component given must have a
 size to compute the result.  If the component doesn't have a size
 a value of -1 will be returned.

Parameters:
c - the editor
offs - the offset in the document >= 0
Returns:
the position >= 0 if the request can be computed, otherwise
  a value of -1 will be returned.
Throws:
BadLocationException - if the offset is out of range


"
Utilities,"getTabbedTextOffset(Segment s, FontMetrics metrics, int x0, int x, TabExpander e, int startOffset)",static int,Determines the relative offset into the given text that best represents the given span in the view coordinate system.,"

getTabbedTextOffset
public static final int getTabbedTextOffset(Segment s,
                                            FontMetrics metrics,
                                            int x0,
                                            int x,
                                            TabExpander e,
                                            int startOffset)
Determines the relative offset into the given text that
 best represents the given span in the view coordinate
 system.  This is implemented in a 1.1 style coordinate
 system where ints are used and 72dpi is assumed.

Parameters:
s - the source of the text
metrics - the font metrics to use for the calculation
x0 - the starting view location representing the start
   of the given text >= 0.
x - the target view location to translate to an
   offset into the text >= 0.
e - how to expand the tabs.  If this value is null,
   tabs will be expanded as a space character.
startOffset - starting offset of the text in the document >= 0
Returns:
the offset into the text >= 0


"
Utilities,"getTabbedTextOffset(Segment s, FontMetrics metrics, int x0, int x, TabExpander e, int startOffset, boolean round)",static int,NULL,"

getTabbedTextOffset
public static final int getTabbedTextOffset(Segment s,
                                            FontMetrics metrics,
                                            int x0,
                                            int x,
                                            TabExpander e,
                                            int startOffset,
                                            boolean round)

"
Utilities,"getTabbedTextWidth(Segment s, FontMetrics metrics, int x, TabExpander e, int startOffset)",static int,Determines the width of the given segment of text taking tabs into consideration.,"

getTabbedTextWidth
public static final int getTabbedTextWidth(Segment s,
                                           FontMetrics metrics,
                                           int x,
                                           TabExpander e,
                                           int startOffset)
Determines the width of the given segment of text taking tabs
 into consideration.  This is implemented in a 1.1 style coordinate
 system where ints are used and 72dpi is assumed.

Parameters:
s - the source of the text
metrics - the font metrics to use for the calculation
x - the X origin >= 0
e - how to expand the tabs.  If this value is null,
   tabs will be expanded as a space character.
startOffset - starting offset of the text in the document >= 0
Returns:
the width of the text


"
Utilities,"getWordEnd(JTextComponent c, int offs)",static int,Determines the end of a word for the given location.,"

getWordEnd
public static final int getWordEnd(JTextComponent c,
                                   int offs)
                            throws BadLocationException
Determines the end of a word for the given location.
 Uses BreakIterator.getWordInstance() to actually get the words.

Parameters:
c - the editor
offs - the offset in the document >= 0
Returns:
the location in the model of the word end >= 0
Throws:
BadLocationException - if the offset is out of range


"
Utilities,"getWordStart(JTextComponent c, int offs)",static int,Determines the start of a word for the given model location.,"

getWordStart
public static final int getWordStart(JTextComponent c,
                                     int offs)
                              throws BadLocationException
Determines the start of a word for the given model location.
 Uses BreakIterator.getWordInstance() to actually get the words.

Parameters:
c - the editor
offs - the offset in the document >= 0
Returns:
the location in the model of the word start >= 0
Throws:
BadLocationException - if the offset is out of range


"
View,append(View v),void,Appends a single child view.,"

append
public void append(View v)
Appends a single child view.  This is a convenience
 call to replace.

Parameters:
v - the view
Since:
1.3
See Also:
replace(int, int, javax.swing.text.View[])


"
View,"breakView(int axis, int offset, float pos, float len)",View,Tries to break this view on the given axis.,"

breakView
public View breakView(int axis,
                      int offset,
                      float pos,
                      float len)
Tries to break this view on the given axis.  This is
 called by views that try to do formatting of their
 children.  For example, a view of a paragraph will
 typically try to place its children into row and
 views representing chunks of text can sometimes be
 broken down into smaller pieces.
 
 This is implemented to return the view itself, which
 represents the default behavior on not being
 breakable.  If the view does support breaking, the
 starting offset of the view returned should be the
 given offset, and the end offset should be less than
 or equal to the end offset of the view being broken.

Parameters:
axis - may be either View.X_AXIS or
          View.Y_AXIS
offset - the location in the document model
   that a broken fragment would occupy >= 0.  This
   would be the starting offset of the fragment
   returned
pos - the position along the axis that the
  broken view would occupy >= 0.  This may be useful for
  things like tab calculations
len - specifies the distance along the axis
  where a potential break is desired >= 0
Returns:
the fragment of the view that represents the
  given span, if the view can be broken.  If the view
  doesn't support breaking behavior, the view itself is
  returned.
See Also:
ParagraphView


"
View,"changedUpdate(DocumentEvent e, Shape a, ViewFactory f)",void,Gives notification from the document that attributes were changed in a location that this view is responsible for.,"

changedUpdate
public void changedUpdate(DocumentEvent e,
                          Shape a,
                          ViewFactory f)
Gives notification from the document that attributes were changed
 in a location that this view is responsible for.
 To reduce the burden to subclasses, this functionality is
 spread out into the following calls that subclasses can
 reimplement:
 
updateChildren is called
 if there were any changes to the element this view is
 responsible for.  If this view has child views that are
 represent the child elements, then this method should do
 whatever is necessary to make sure the child views correctly
 represent the model.
 forwardUpdate is called
 to forward the DocumentEvent to the appropriate child views.
 updateLayout is called to
 give the view a chance to either repair its layout, to reschedule
 layout, or do nothing.
 

Parameters:
e - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
View,"createFragment(int p0, int p1)",View,Creates a view that represents a portion of the element.,"

createFragment
public View createFragment(int p0,
                           int p1)
Creates a view that represents a portion of the element.
 This is potentially useful during formatting operations
 for taking measurements of fragments of the view.  If
 the view doesn't support fragmenting (the default), it
 should return itself.

Parameters:
p0 - the starting offset >= 0.  This should be a value
   greater or equal to the element starting offset and
   less than the element ending offset.
p1 - the ending offset > p0.  This should be a value
   less than or equal to the elements end offset and
   greater than the elements starting offset.
Returns:
the view fragment, or itself if the view doesn't
   support breaking into fragments
See Also:
LabelView


"
View,"forwardUpdate(DocumentEvent.ElementChange ec, DocumentEvent e, Shape a, ViewFactory f)",protected void,Forwards the given DocumentEvent to the child views that need to be notified of the change to the model.,"

forwardUpdate
protected void forwardUpdate(DocumentEvent.ElementChange ec,
                             DocumentEvent e,
                             Shape a,
                             ViewFactory f)
Forwards the given DocumentEvent to the child views
 that need to be notified of the change to the model.
 If there were changes to the element this view is
 responsible for, that should be considered when
 forwarding (i.e. new child views should not get
 notified).

Parameters:
ec - changes to the element this view is responsible
  for (may be null if there were no changes).
e - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
Since:
1.3
See Also:
insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory), 
removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory), 
changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
View,"forwardUpdateToView(View v, DocumentEvent e, Shape a, ViewFactory f)",protected void,Forwards the DocumentEvent to the give child view.,"

forwardUpdateToView
protected void forwardUpdateToView(View v,
                                   DocumentEvent e,
                                   Shape a,
                                   ViewFactory f)
Forwards the DocumentEvent to the give child view.  This
 simply messages the view with a call to insertUpdate,
 removeUpdate, or changedUpdate depending
 upon the type of the event.  This is called by
 forwardUpdate to forward
 the event to children that need it.

Parameters:
v - the child view to forward the event to
e - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
Since:
1.3
See Also:
forwardUpdate(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
View,getAlignment(int axis),float,Determines the desired alignment for this view along an axis.,"

getAlignment
public float getAlignment(int axis)
Determines the desired alignment for this view along an
 axis.  The desired alignment is returned.  This should be
 a value >= 0.0 and <= 1.0, where 0 indicates alignment at
 the origin and 1.0 indicates alignment to the full span
 away from the origin.  An alignment of 0.5 would be the
 center of the view.

Parameters:
axis - may be either View.X_AXIS or
          View.Y_AXIS
Returns:
the value 0.5


"
View,getAttributes(),AttributeSet,Fetches the attributes to use when rendering.,"

getAttributes
public AttributeSet getAttributes()
Fetches the attributes to use when rendering.  By default
 this simply returns the attributes of the associated element.
 This method should be used rather than using the element
 directly to obtain access to the attributes to allow
 view-specific attributes to be mixed in or to allow the
 view to have view-specific conversion of attributes by
 subclasses.
 Each view should document what attributes it recognizes
 for the purpose of rendering or layout, and should always
 access them through the AttributeSet returned
 by this method.

"
View,"getBreakWeight(int axis, float pos, float len)",int,Determines how attractive a break opportunity in this view is.,"

getBreakWeight
public int getBreakWeight(int axis,
                          float pos,
                          float len)
Determines how attractive a break opportunity in
 this view is.  This can be used for determining which
 view is the most attractive to call breakView
 on in the process of formatting.  A view that represents
 text that has whitespace in it might be more attractive
 than a view that has no whitespace, for example.  The
 higher the weight, the more attractive the break.  A
 value equal to or lower than BadBreakWeight
 should not be considered for a break.  A value greater
 than or equal to ForcedBreakWeight should
 be broken.
 
 This is implemented to provide the default behavior
 of returning BadBreakWeight unless the length
 is greater than the length of the view in which case the
 entire view represents the fragment.  Unless a view has
 been written to support breaking behavior, it is not
 attractive to try and break the view.  An example of
 a view that does support breaking is LabelView.
 An example of a view that uses break weight is
 ParagraphView.

Parameters:
axis - may be either View.X_AXIS or
          View.Y_AXIS
pos - the potential location of the start of the
   broken view >= 0.  This may be useful for calculating tab
   positions
len - specifies the relative length from pos
   where a potential break is desired >= 0
Returns:
the weight, which should be a value between
   ForcedBreakWeight and BadBreakWeight
See Also:
LabelView, 
ParagraphView, 
BadBreakWeight, 
GoodBreakWeight, 
ExcellentBreakWeight, 
ForcedBreakWeight


"
View,"getChildAllocation(int index, Shape a)",Shape,Fetches the allocation for the given child view.,"

getChildAllocation
public Shape getChildAllocation(int index,
                                Shape a)
Fetches the allocation for the given child view.
 This enables finding out where various views
 are located, without assuming how the views store
 their location.  This returns null since the
 default is to not have any child views.

Parameters:
index - the index of the child, >= 0 && <
          getViewCount()
a - the allocation to this view
Returns:
the allocation to the child


"
View,getContainer(),Container,Fetches the container hosting the view.,"

getContainer
public Container getContainer()
Fetches the container hosting the view.  This is useful for
 things like scheduling a repaint, finding out the host
 components font, etc.  The default implementation
 of this is to forward the query to the parent view.

Returns:
the container, null if none


"
View,getDocument(),Document,Fetches the model associated with the view.,"

getDocument
public Document getDocument()
Fetches the model associated with the view.

Returns:
the view model, null if none
See Also:
getDocument()


"
View,getElement(),Element,Fetches the structural portion of the subject that this view is mapped to.,"

getElement
public Element getElement()
Fetches the structural portion of the subject that this
 view is mapped to.  The view may not be responsible for the
 entire portion of the element.

Returns:
the subject
See Also:
getElement()


"
View,getEndOffset(),int,Fetches the portion of the model for which this view is responsible.,"

getEndOffset
public int getEndOffset()
Fetches the portion of the model for which this view is
 responsible.

Returns:
the ending offset into the model >= 0
See Also:
getEndOffset()


"
View,getGraphics(),Graphics,Fetch a Graphics for rendering.,"

getGraphics
public Graphics getGraphics()
Fetch a Graphics for rendering.
 This can be used to determine
 font characteristics, and will be different for a print view
 than a component view.

Returns:
a Graphics object for rendering
Since:
1.3


"
View,getMaximumSpan(int axis),float,Determines the maximum span for this view along an axis.,"

getMaximumSpan
public float getMaximumSpan(int axis)
Determines the maximum span for this view along an
 axis.

Parameters:
axis - may be either View.X_AXIS or
          View.Y_AXIS
Returns:
the maximum span the view can be rendered into
See Also:
getPreferredSpan(int)


"
View,getMinimumSpan(int axis),float,Determines the minimum span for this view along an axis.,"

getMinimumSpan
public float getMinimumSpan(int axis)
Determines the minimum span for this view along an
 axis.

Parameters:
axis - may be either View.X_AXIS or
          View.Y_AXIS
Returns:
the minimum span the view can be rendered into
See Also:
getPreferredSpan(int)


"
View,"getNextVisualPositionFrom(int pos, Position.Bias b, Shape a, int direction, Position.Bias[] biasRet)",int,Provides a way to determine the next visually represented model location at which one might place a caret.,"

getNextVisualPositionFrom
public int getNextVisualPositionFrom(int pos,
                                     Position.Bias b,
                                     Shape a,
                                     int direction,
                                     Position.Bias[] biasRet)
                              throws BadLocationException
Provides a way to determine the next visually represented model
 location at which one might place a caret.
 Some views may not be visible,
 they might not be in the same order found in the model, or they just
 might not allow access to some of the locations in the model.
 This method enables specifying a position to convert
 within the range of >=0.  If the value is -1, a position
 will be calculated automatically.  If the value < -1,
 the BadLocationException will be thrown.

Parameters:
pos - the position to convert
a - the allocated region in which to render
direction - the direction from the current position that can
  be thought of as the arrow keys typically found on a keyboard.
  This will be one of the following values:
 
SwingConstants.WEST
 SwingConstants.EAST
 SwingConstants.NORTH
 SwingConstants.SOUTH
 
Returns:
the location within the model that best represents the next
  location visual position
Throws:
BadLocationException - the given position is not a valid
                                 position within the document
IllegalArgumentException - if direction
          doesn't have one of the legal values above


"
View,getParent(),View,Returns the parent of the view.,"

getParent
public View getParent()
Returns the parent of the view.

Returns:
the parent, or null if none exists


"
View,getPreferredSpan(int axis),abstract float,Determines the preferred span for this view along an axis.,"

getPreferredSpan
public abstract float getPreferredSpan(int axis)
Determines the preferred span for this view along an
 axis.

Parameters:
axis - may be either View.X_AXIS or
          View.Y_AXIS
Returns:
the span the view would like to be rendered into.
           Typically the view is told to render into the span
           that is returned, although there is no guarantee.
           The parent may choose to resize or break the view
See Also:
getPreferredSpan(int)


"
View,getResizeWeight(int axis),int,Determines the resizability of the view along the given axis.,"

getResizeWeight
public int getResizeWeight(int axis)
Determines the resizability of the view along the
 given axis.  A value of 0 or less is not resizable.

Parameters:
axis - may be either View.X_AXIS or
          View.Y_AXIS
Returns:
the weight


"
View,getStartOffset(),int,Fetches the portion of the model for which this view is responsible.,"

getStartOffset
public int getStartOffset()
Fetches the portion of the model for which this view is
 responsible.

Returns:
the starting offset into the model >= 0
See Also:
getStartOffset()


"
View,"getToolTipText(float x, float y, Shape allocation)",String,Returns the tooltip text at the specified location.,"

getToolTipText
public String getToolTipText(float x,
                             float y,
                             Shape allocation)
Returns the tooltip text at the specified location. The default
 implementation returns the value from the child View identified by
 the passed in location.

Since:
1.4
See Also:
JTextComponent.getToolTipText(java.awt.event.MouseEvent)


"
View,getView(int n),View,Gets the nth child view.,"

getView
public View getView(int n)
Gets the nth child view.  Since there are no
 children by default, this returns null.

Parameters:
n - the number of the view to get, >= 0 && < getViewCount()
Returns:
the view


"
View,getViewCount(),int,Returns the number of views in this view.,"

getViewCount
public int getViewCount()
Returns the number of views in this view.  Since
 the default is to not be a composite view this
 returns 0.

Returns:
the number of views >= 0
See Also:
getViewCount()


"
View,getViewFactory(),ViewFactory,Fetches the ViewFactory implementation that is feeding the view hierarchy.,"

getViewFactory
public ViewFactory getViewFactory()
Fetches the ViewFactory implementation that is feeding
 the view hierarchy.  Normally the views are given this
 as an argument to updates from the model when they
 are most likely to need the factory, but this
 method serves to provide it at other times.

Returns:
the factory, null if none


"
View,"getViewIndex(float x, float y, Shape allocation)",int,Returns the child view index representing the given position in the view.,"

getViewIndex
public int getViewIndex(float x,
                        float y,
                        Shape allocation)
Returns the child view index representing the given position in
 the view. This iterates over all the children returning the
 first with a bounds that contains x, y.

Parameters:
x - the x coordinate
y - the y coordinate
allocation - current allocation of the View.
Returns:
index of the view representing the given location, or
   -1 if no view represents that position
Since:
1.4


"
View,"getViewIndex(int pos, Position.Bias b)",int,Returns the child view index representing the given position in the model.,"

getViewIndex
public int getViewIndex(int pos,
                        Position.Bias b)
Returns the child view index representing the given position in
 the model.  By default a view has no children so this is implemented
 to return -1 to indicate there is no valid child index for any
 position.

Parameters:
pos - the position >= 0
Returns:
index of the view representing the given position, or
   -1 if no view represents that position
Since:
1.3


"
View,"insert(int offs, View v)",void,Inserts a single child view.,"

insert
public void insert(int offs,
                   View v)
Inserts a single child view.  This is a convenience
 call to replace.

Parameters:
offs - the offset of the view to insert before >= 0
v - the view
Since:
1.3
See Also:
replace(int, int, javax.swing.text.View[])


"
View,"insertUpdate(DocumentEvent e, Shape a, ViewFactory f)",void,Gives notification that something was inserted into the document in a location that this view is responsible for.,"

insertUpdate
public void insertUpdate(DocumentEvent e,
                         Shape a,
                         ViewFactory f)
Gives notification that something was inserted into
 the document in a location that this view is responsible for.
 To reduce the burden to subclasses, this functionality is
 spread out into the following calls that subclasses can
 reimplement:
 
updateChildren is called
 if there were any changes to the element this view is
 responsible for.  If this view has child views that are
 represent the child elements, then this method should do
 whatever is necessary to make sure the child views correctly
 represent the model.
 forwardUpdate is called
 to forward the DocumentEvent to the appropriate child views.
 updateLayout is called to
 give the view a chance to either repair its layout, to reschedule
 layout, or do nothing.
 

Parameters:
e - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
View,isVisible(),boolean,Returns a boolean that indicates whether the view is visible or not.,"

isVisible
public boolean isVisible()
Returns a boolean that indicates whether
  the view is visible or not.  By default
  all views are visible.

Returns:
always returns true


"
View,"modelToView(int p0, Position.Bias b0, int p1, Position.Bias b1, Shape a)",Shape,"Provides a mapping, for a given region, from the document model coordinate space to the view coordinate space.","

modelToView
public Shape modelToView(int p0,
                         Position.Bias b0,
                         int p1,
                         Position.Bias b1,
                         Shape a)
                  throws BadLocationException
Provides a mapping, for a given region,
 from the document model coordinate space
 to the view coordinate space. The specified region is
 created as a union of the first and last character positions.

Parameters:
p0 - the position of the first character (>=0)
b0 - the bias of the first character position,
  toward the previous character or the
  next character represented by the offset, in case the
  position is a boundary of two views; b0 will have one
  of these values:
 
 Position.Bias.Forward
 Position.Bias.Backward

p1 - the position of the last character (>=0)
b1 - the bias for the second character position, defined
          one of the legal values shown above
a - the area of the view, which encompasses the requested region
Returns:
the bounding box which is a union of the region specified
          by the first and last character positions
Throws:
BadLocationException - if the given position does
   not represent a valid location in the associated document
IllegalArgumentException - if b0 or
          b1 are not one of the
          legal Position.Bias values listed above
See Also:
viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[])


"
View,"modelToView(int pos, Shape a)",Shape,Deprecated.,"

modelToView
@Deprecated
public Shape modelToView(int pos,
                                     Shape a)
                              throws BadLocationException
Deprecated. 
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it. This is
 implemented to default the bias to Position.Bias.Forward
 which was previously implied.

Parameters:
pos - the position to convert >= 0
a - the allocated region in which to render
Returns:
the bounding box of the given position is returned
Throws:
BadLocationException - if the given position does
   not represent a valid location in the associated document
See Also:
modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias)


"
View,"modelToView(int pos, Shape a, Position.Bias b)",abstract Shape,"Provides a mapping, for a given character, from the document model coordinate space to the view coordinate space.","

modelToView
public abstract Shape modelToView(int pos,
                                  Shape a,
                                  Position.Bias b)
                           throws BadLocationException
Provides a mapping, for a given character,
 from the document model coordinate space
 to the view coordinate space.

Parameters:
pos - the position of the desired character (>=0)
a - the area of the view, which encompasses the requested character
b - the bias toward the previous character or the
  next character represented by the offset, in case the
  position is a boundary of two views; b will have one
  of these values:
 
 Position.Bias.Forward
 Position.Bias.Backward

Returns:
the bounding box, in view coordinate space,
          of the character at the specified position
Throws:
BadLocationException - if the specified position does
   not represent a valid location in the associated document
IllegalArgumentException - if b is not one of the
          legal Position.Bias values listed above
See Also:
viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[])


"
View,"paint(Graphics g, Shape allocation)",abstract void,Renders using the given rendering surface and area on that surface.,"

paint
public abstract void paint(Graphics g,
                           Shape allocation)
Renders using the given rendering surface and area on that
 surface.  The view may need to do layout and create child
 views to enable itself to render into the given allocation.

Parameters:
g - the rendering surface to use
allocation - the allocated region to render into


"
View,"preferenceChanged(View child, boolean width, boolean height)",void,Child views can call this on the parent to indicate that the preference has changed and should be reconsidered for layout.,"

preferenceChanged
public void preferenceChanged(View child,
                              boolean width,
                              boolean height)
Child views can call this on the parent to indicate that
 the preference has changed and should be reconsidered
 for layout.  By default this just propagates upward to
 the next parent.  The root view will call
 revalidate on the associated text component.

Parameters:
child - the child view
width - true if the width preference has changed
height - true if the height preference has changed
See Also:
JComponent.revalidate()


"
View,remove(int i),void,Removes one of the children at the given position.,"

remove
public void remove(int i)
Removes one of the children at the given position.
 This is a convenience call to replace.

Since:
1.3


"
View,removeAll(),void,Removes all of the children.,"

removeAll
public void removeAll()
Removes all of the children.  This is a convenience
 call to replace.

Since:
1.3


"
View,"removeUpdate(DocumentEvent e, Shape a, ViewFactory f)",void,Gives notification that something was removed from the document in a location that this view is responsible for.,"

removeUpdate
public void removeUpdate(DocumentEvent e,
                         Shape a,
                         ViewFactory f)
Gives notification that something was removed from the document
 in a location that this view is responsible for.
 To reduce the burden to subclasses, this functionality is
 spread out into the following calls that subclasses can
 reimplement:
 
updateChildren is called
 if there were any changes to the element this view is
 responsible for.  If this view has child views that are
 represent the child elements, then this method should do
 whatever is necessary to make sure the child views correctly
 represent the model.
 forwardUpdate is called
 to forward the DocumentEvent to the appropriate child views.
 updateLayout is called to
 give the view a chance to either repair its layout, to reschedule
 layout, or do nothing.
 

Parameters:
e - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
View,"replace(int offset, int length, View[] views)",void,Replaces child views.,"

replace
public void replace(int offset,
                    int length,
                    View[] views)
Replaces child views.  If there are no views to remove
 this acts as an insert.  If there are no views to
 add this acts as a remove.  Views being removed will
 have the parent set to null, and the internal reference
 to them removed so that they can be garbage collected.
 This is implemented to do nothing, because by default
 a view has no children.

Parameters:
offset - the starting index into the child views to insert
   the new views.  This should be a value >= 0 and <= getViewCount
length - the number of existing child views to remove
   This should be a value >= 0 and <= (getViewCount() - offset).
views - the child views to add.  This value can be
   null to indicate no children are being added
   (useful to remove).
Since:
1.3


"
View,setParent(View parent),void,Establishes the parent view for this view.,"

setParent
public void setParent(View parent)
Establishes the parent view for this view.  This is
 guaranteed to be called before any other methods if the
 parent view is functioning properly.  This is also
 the last method called, since it is called to indicate
 the view has been removed from the hierarchy as
 well. When this method is called to set the parent to
 null, this method does the same for each of its children,
 propagating the notification that they have been
 disconnected from the view tree. If this is
 reimplemented, super.setParent() should
 be called.

Parameters:
parent - the new parent, or null if the view is
          being removed from a parent


"
View,"setSize(float width, float height)",void,Sets the size of the view.,"

setSize
public void setSize(float width,
                    float height)
Sets the size of the view.  This should cause
 layout of the view along the given axis, if it
 has any layout duties.

Parameters:
width - the width >= 0
height - the height >= 0


"
View,"updateChildren(DocumentEvent.ElementChange ec, DocumentEvent e, ViewFactory f)",protected boolean,"Updates the child views in response to receiving notification that the model changed, and there is change record for the element this view is responsible for.","

updateChildren
protected boolean updateChildren(DocumentEvent.ElementChange ec,
                                 DocumentEvent e,
                                 ViewFactory f)
Updates the child views in response to receiving notification
 that the model changed, and there is change record for the
 element this view is responsible for.  This is implemented
 to assume the child views are directly responsible for the
 child elements of the element this view represents.  The
 ViewFactory is used to create child views for each element
 specified as added in the ElementChange, starting at the
 index specified in the given ElementChange.  The number of
 child views representing the removed elements specified are
 removed.

Parameters:
ec - the change information for the element this view
  is responsible for.  This should not be null if
  this method gets called
e - the change information from the associated document
f - the factory to use to build child views
Returns:
whether or not the child views represent the
  child elements of the element this view is responsible
  for.  Some views create children that represent a portion
  of the element they are responsible for, and should return
  false.  This information is used to determine if views
  in the range of the added elements should be forwarded to
  or not
Since:
1.3
See Also:
insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory), 
removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory), 
changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
View,"updateLayout(DocumentEvent.ElementChange ec, DocumentEvent e, Shape a)",protected void,Updates the layout in response to receiving notification of change from the model.,"

updateLayout
protected void updateLayout(DocumentEvent.ElementChange ec,
                            DocumentEvent e,
                            Shape a)
Updates the layout in response to receiving notification of
 change from the model.  This is implemented to call
 preferenceChanged to reschedule a new layout
 if the ElementChange record is not null.

Parameters:
ec - changes to the element this view is responsible
  for (may be null if there were no changes)
e - the change information from the associated document
a - the current allocation of the view
Since:
1.3
See Also:
insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory), 
removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory), 
changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
View,"viewToModel(float x, float y, Shape a)",int,Deprecated.,"

viewToModel
@Deprecated
public int viewToModel(float x,
                                   float y,
                                   Shape a)
Deprecated. 
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.

Parameters:
x - the X coordinate >= 0
y - the Y coordinate >= 0
a - the allocated region in which to render
Returns:
the location within the model that best represents the
  given point in the view >= 0
See Also:
viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[])


"
View,"viewToModel(float x, float y, Shape a, Position.Bias[] biasReturn)",abstract int,Provides a mapping from the view coordinate space to the logical coordinate space of the model.,"

viewToModel
public abstract int viewToModel(float x,
                                float y,
                                Shape a,
                                Position.Bias[] biasReturn)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.  The biasReturn
 argument will be filled in to indicate that the point given is
 closer to the next character in the model or the previous
 character in the model.

Parameters:
x - the X coordinate >= 0
y - the Y coordinate >= 0
a - the allocated region in which to render
Returns:
the location within the model that best represents the
  given point in the view >= 0.  The biasReturn
  argument will be
 filled in to indicate that the point given is closer to the next
 character in the model or the previous character in the model.


"
WrappedPlainView,"calculateBreakPosition(int p0, int p1)",protected int,This is called by the nested wrapped line views to determine the break location.,"

calculateBreakPosition
protected int calculateBreakPosition(int p0,
                                     int p1)
This is called by the nested wrapped line
 views to determine the break location.  This can
 be reimplemented to alter the breaking behavior.
 It will either break at word or character boundaries
 depending upon the break argument given at
 construction.

"
WrappedPlainView,"changedUpdate(DocumentEvent e, Shape a, ViewFactory f)",void,Gives notification from the document that attributes were changed in a location that this view is responsible for.,"

changedUpdate
public void changedUpdate(DocumentEvent e,
                          Shape a,
                          ViewFactory f)
Gives notification from the document that attributes were changed
 in a location that this view is responsible for.

Overrides:
changedUpdate in class View
Parameters:
e - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
View.changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
WrappedPlainView,"drawLine(int p0, int p1, Graphics g, int x, int y)",protected void,"Renders a line of text, suppressing whitespace at the end and expanding any tabs.","

drawLine
protected void drawLine(int p0,
                        int p1,
                        Graphics g,
                        int x,
                        int y)
Renders a line of text, suppressing whitespace at the end
 and expanding any tabs.  This is implemented to make calls
 to the methods drawUnselectedText and
 drawSelectedText so that the way selected and
 unselected text are rendered can be customized.

Parameters:
p0 - the starting document location to use >= 0
p1 - the ending document location to use >= p1
g - the graphics context
x - the starting X position >= 0
y - the starting Y position >= 0
See Also:
drawUnselectedText(java.awt.Graphics, int, int, int, int), 
drawSelectedText(java.awt.Graphics, int, int, int, int)


"
WrappedPlainView,"drawSelectedText(Graphics g, int x, int y, int p0, int p1)",protected int,Renders the given range in the model as selected text.,"

drawSelectedText
protected int drawSelectedText(Graphics g,
                               int x,
                               int y,
                               int p0,
                               int p1)
                        throws BadLocationException
Renders the given range in the model as selected text.  This
 is implemented to render the text in the color specified in
 the hosting component.  It assumes the highlighter will render
 the selected background.

Parameters:
g - the graphics context
x - the starting X coordinate >= 0
y - the starting Y coordinate >= 0
p0 - the beginning position in the model >= 0
p1 - the ending position in the model >= p0
Returns:
the location of the end of the range.
Throws:
BadLocationException - if the range is invalid


"
WrappedPlainView,"drawUnselectedText(Graphics g, int x, int y, int p0, int p1)",protected int,Renders the given range in the model as normal unselected text.,"

drawUnselectedText
protected int drawUnselectedText(Graphics g,
                                 int x,
                                 int y,
                                 int p0,
                                 int p1)
                          throws BadLocationException
Renders the given range in the model as normal unselected
 text.

Parameters:
g - the graphics context
x - the starting X coordinate >= 0
y - the starting Y coordinate >= 0
p0 - the beginning position in the model >= 0
p1 - the ending position in the model >= p0
Returns:
the X location of the end of the range >= 0
Throws:
BadLocationException - if the range is invalid


"
WrappedPlainView,getLineBuffer(),protected Segment,Gives access to a buffer that can be used to fetch text from the associated document.,"

getLineBuffer
protected final Segment getLineBuffer()
Gives access to a buffer that can be used to fetch
 text from the associated document.

Returns:
the buffer


"
WrappedPlainView,getMaximumSpan(int axis),float,Determines the maximum span for this view along an axis.,"

getMaximumSpan
public float getMaximumSpan(int axis)
Determines the maximum span for this view along an
 axis.  This is implemented to provide the superclass
 behavior after first making sure that the current font
 metrics are cached (for the nested lines which use
 the metrics to determine the height of the potentially
 wrapped lines).

Overrides:
getMaximumSpan in class BoxView
Parameters:
axis - may be either View.X_AXIS or View.Y_AXIS
Returns:
the span the view would like to be rendered into.
           Typically the view is told to render into the span
           that is returned, although there is no guarantee.
           The parent may choose to resize or break the view.
See Also:
View.getMaximumSpan(int)


"
WrappedPlainView,getMinimumSpan(int axis),float,Determines the minimum span for this view along an axis.,"

getMinimumSpan
public float getMinimumSpan(int axis)
Determines the minimum span for this view along an
 axis.  This is implemented to provide the superclass
 behavior after first making sure that the current font
 metrics are cached (for the nested lines which use
 the metrics to determine the height of the potentially
 wrapped lines).

Overrides:
getMinimumSpan in class BoxView
Parameters:
axis - may be either View.X_AXIS or View.Y_AXIS
Returns:
the span the view would like to be rendered into.
           Typically the view is told to render into the span
           that is returned, although there is no guarantee.
           The parent may choose to resize or break the view.
See Also:
View.getMinimumSpan(int)


"
WrappedPlainView,getPreferredSpan(int axis),float,Determines the preferred span for this view along an axis.,"

getPreferredSpan
public float getPreferredSpan(int axis)
Determines the preferred span for this view along an
 axis.  This is implemented to provide the superclass
 behavior after first making sure that the current font
 metrics are cached (for the nested lines which use
 the metrics to determine the height of the potentially
 wrapped lines).

Overrides:
getPreferredSpan in class BoxView
Parameters:
axis - may be either View.X_AXIS or View.Y_AXIS
Returns:
the span the view would like to be rendered into.
           Typically the view is told to render into the span
           that is returned, although there is no guarantee.
           The parent may choose to resize or break the view.
See Also:
View.getPreferredSpan(int)


"
WrappedPlainView,getTabSize(),protected int,"Returns the tab size set for the document, defaulting to 8.","

getTabSize
protected int getTabSize()
Returns the tab size set for the document, defaulting to 8.

Returns:
the tab size


"
WrappedPlainView,"insertUpdate(DocumentEvent e, Shape a, ViewFactory f)",void,Gives notification that something was inserted into the document in a location that this view is responsible for.,"

insertUpdate
public void insertUpdate(DocumentEvent e,
                         Shape a,
                         ViewFactory f)
Gives notification that something was inserted into the
 document in a location that this view is responsible for.
 This is implemented to simply update the children.

Overrides:
insertUpdate in class View
Parameters:
e - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
View.insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
WrappedPlainView,loadChildren(ViewFactory f),protected void,Loads all of the children to initialize the view.,"

loadChildren
protected void loadChildren(ViewFactory f)
Loads all of the children to initialize the view.
 This is called by the setParent method.
 Subclasses can reimplement this to initialize their
 child views in a different manner.  The default
 implementation creates a child view for each
 child element.

Overrides:
loadChildren in class CompositeView
Parameters:
f - the view factory
See Also:
CompositeView.setParent(javax.swing.text.View)


"
WrappedPlainView,"nextTabStop(float x, int tabOffset)",float,Returns the next tab stop position after a given reference position.,"

nextTabStop
public float nextTabStop(float x,
                         int tabOffset)
Returns the next tab stop position after a given reference position.
 This implementation does not support things like centering so it
 ignores the tabOffset argument.

Specified by:
nextTabStop in interface TabExpander
Parameters:
x - the current position >= 0
tabOffset - the position within the text stream
   that the tab occurred at >= 0.
Returns:
the tab stop, measured in points >= 0


"
WrappedPlainView,"paint(Graphics g, Shape a)",void,Renders using the given rendering surface and area on that surface.,"

paint
public void paint(Graphics g,
                  Shape a)
Renders using the given rendering surface and area
 on that surface.  This is implemented to stash the
 selection positions, selection colors, and font
 metrics for the nested lines to use.

Overrides:
paint in class BoxView
Parameters:
g - the rendering surface to use
a - the allocated region to render into
See Also:
View.paint(java.awt.Graphics, java.awt.Shape)


"
WrappedPlainView,"removeUpdate(DocumentEvent e, Shape a, ViewFactory f)",void,Gives notification that something was removed from the document in a location that this view is responsible for.,"

removeUpdate
public void removeUpdate(DocumentEvent e,
                         Shape a,
                         ViewFactory f)
Gives notification that something was removed from the
 document in a location that this view is responsible for.
 This is implemented to simply update the children.

Overrides:
removeUpdate in class View
Parameters:
e - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
View.removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
WrappedPlainView,"setSize(float width, float height)",void,Sets the size of the view.,"

setSize
public void setSize(float width,
                    float height)
Sets the size of the view.  This should cause
 layout of the view along the given axis, if it
 has any layout duties.

Overrides:
setSize in class BoxView
Parameters:
width - the width >= 0
height - the height >= 0


"
ZoneView,"createZone(int p0, int p1)",protected View,Create a view to represent a zone for the given range within the model (which should be within the range of this objects responsibility).,"

createZone
protected View createZone(int p0,
                          int p1)
Create a view to represent a zone for the given
 range within the model (which should be within
 the range of this objects responsibility).  This
 is called by the zone management logic to create
 new zones.  Subclasses can provide a different
 implementation for a zone by changing this method.

Parameters:
p0 - the start of the desired zone.  This should
  be >= getStartOffset() and < getEndOffset().  This
  value should also be < p1.
p1 - the end of the desired zone.  This should
  be > getStartOffset() and <= getEndOffset().  This
  value should also be > p0.


"
ZoneView,getMaximumZoneSize(),int,Get the current maximum zone size.,"

getMaximumZoneSize
public int getMaximumZoneSize()
Get the current maximum zone size.

"
ZoneView,getMaxZonesLoaded(),int,Get the current setting of the number of zones allowed to be loaded at the same time.,"

getMaxZonesLoaded
public int getMaxZonesLoaded()
Get the current setting of the number of zones
 allowed to be loaded at the same time.

"
ZoneView,getViewIndexAtPosition(int pos),protected int,Returns the child view index representing the given position in the model.,"

getViewIndexAtPosition
protected int getViewIndexAtPosition(int pos)
Returns the child view index representing the given position in
 the model.

Overrides:
getViewIndexAtPosition in class CompositeView
Parameters:
pos - the position >= 0
Returns:
index of the view representing the given position, or
   -1 if no view represents that position


"
ZoneView,"insertUpdate(DocumentEvent changes, Shape a, ViewFactory f)",void,Gives notification that something was inserted into the document in a location that this view is responsible for.,"

insertUpdate
public void insertUpdate(DocumentEvent changes,
                         Shape a,
                         ViewFactory f)
Gives notification that something was inserted into the document
 in a location that this view is responsible for.  This is largely
 delegated to the superclass, but is reimplemented to update the
 relevant zone (i.e. determine if a zone needs to be split into a
 set of 2 or more zones).

Overrides:
insertUpdate in class View
Parameters:
changes - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
View.insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
ZoneView,isZoneLoaded(View zone),protected boolean,Determine if a zone is in the loaded state.,"

isZoneLoaded
protected boolean isZoneLoaded(View zone)
Determine if a zone is in the loaded state.
 The zones are expected to represent a subset of the
 child elements of the element this view is responsible for.
 Therefore, the default implementation is to return
 true if the view has children.

"
ZoneView,loadChildren(ViewFactory f),protected void,Loads all of the children to initialize the view.,"

loadChildren
protected void loadChildren(ViewFactory f)
Loads all of the children to initialize the view.
 This is called by the setParent method.
 This is reimplemented to not load any children directly
 (as they are created by the zones).  This method creates
 the initial set of zones.  Zones don't actually get
 populated however until an attempt is made to display
 them or to do model/view coordinate translation.

Overrides:
loadChildren in class CompositeView
Parameters:
f - the view factory
See Also:
CompositeView.setParent(javax.swing.text.View)


"
ZoneView,"removeUpdate(DocumentEvent changes, Shape a, ViewFactory f)",void,Gives notification that something was removed from the document in a location that this view is responsible for.,"

removeUpdate
public void removeUpdate(DocumentEvent changes,
                         Shape a,
                         ViewFactory f)
Gives notification that something was removed from the document
 in a location that this view is responsible for.  This is largely
 delegated to the superclass, but is reimplemented to update the
 relevant zones (i.e. determine if zones need to be removed or
 joined with another zone).

Overrides:
removeUpdate in class View
Parameters:
changes - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
View.removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
ZoneView,setMaximumZoneSize(int size),void,Set the desired maximum zone size.,"

setMaximumZoneSize
public void setMaximumZoneSize(int size)
Set the desired maximum zone size.  A
 zone may get larger than this size if
 a single child view is larger than this
 size since zones are formed on child view
 boundaries.

Parameters:
size - the number of characters the zone
 may represent before attempting to break
 the zone into a smaller size.


"
ZoneView,setMaxZonesLoaded(int mzl),void,Sets the current setting of the number of zones allowed to be loaded at the same time.,"

setMaxZonesLoaded
public void setMaxZonesLoaded(int mzl)
Sets the current setting of the number of zones
 allowed to be loaded at the same time. This will throw an
 IllegalArgumentException if mzl is less
 than 1.

Parameters:
mzl - the desired maximum number of zones
  to be actively loaded, must be greater than 0
Throws:
IllegalArgumentException - if mzl is < 1


"
ZoneView,unloadZone(View zone),protected void,Unload a zone (Convert the zone to its memory saving state).,"

unloadZone
protected void unloadZone(View zone)
Unload a zone (Convert the zone to its memory saving state).
 The zones are expected to represent a subset of the
 child elements of the element this view is responsible for.
 Therefore, the default implementation is to simple remove
 all the children.

Parameters:
zone - the child view desired to be set to an
  unloaded state.


"
ZoneView,"updateChildren(DocumentEvent.ElementChange ec, DocumentEvent e, ViewFactory f)",protected boolean,"The superclass behavior will try to update the child views which is not desired in this case, since the children are zones and not directly effected by the changes to the associated element.","

updateChildren
protected boolean updateChildren(DocumentEvent.ElementChange ec,
                                 DocumentEvent e,
                                 ViewFactory f)
The superclass behavior will try to update the child views
 which is not desired in this case, since the children are
 zones and not directly effected by the changes to the
 associated element.  This is reimplemented to do nothing
 and return false.

Overrides:
updateChildren in class View
Parameters:
ec - the change information for the element this view
  is responsible for.  This should not be null if
  this method gets called
e - the change information from the associated document
f - the factory to use to build child views
Returns:
whether or not the child views represent the
  child elements of the element this view is responsible
  for.  Some views create children that represent a portion
  of the element they are responsible for, and should return
  false.  This information is used to determine if views
  in the range of the added elements should be forwarded to
  or not
See Also:
View.insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory), 
View.removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory), 
View.changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
ZoneView,zoneWasLoaded(View zone),protected void,Called by a zone when it gets loaded.,"

zoneWasLoaded
protected void zoneWasLoaded(View zone)
Called by a zone when it gets loaded.  This happens when
 an attempt is made to display or perform a model/view
 translation on a zone that was in an unloaded state.
 This is implemented to check if the maximum number of
 zones was reached and to unload the oldest zone if so.

Parameters:
zone - the child view that was just loaded.


"
