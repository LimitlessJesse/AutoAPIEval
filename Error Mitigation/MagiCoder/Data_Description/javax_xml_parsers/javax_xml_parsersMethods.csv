ClassName,Method,Return Type,Description,Full Description
DocumentBuilder,getDOMImplementation(),abstract DOMImplementation,Obtain an instance of a DOMImplementation object.,"

getDOMImplementation
public abstract DOMImplementation getDOMImplementation()
Obtain an instance of a DOMImplementation object.

Returns:
A new instance of a DOMImplementation.


"
DocumentBuilder,getSchema(),Schema,Get a reference to the the Schema being used by the XML processor.,"

getSchema
public Schema getSchema()
Get a reference to the the Schema being used by
 the XML processor.
If no schema is being used, null is returned.

Returns:
Schema being used or null
  if none in use
Throws:
UnsupportedOperationException - When implementation does not
   override this method
Since:
1.5


"
DocumentBuilder,isNamespaceAware(),abstract boolean,Indicates whether or not this parser is configured to understand namespaces.,"

isNamespaceAware
public abstract boolean isNamespaceAware()
Indicates whether or not this parser is configured to
 understand namespaces.

Returns:
true if this parser is configured to understand
         namespaces; false otherwise.


"
DocumentBuilder,isValidating(),abstract boolean,Indicates whether or not this parser is configured to validate XML documents.,"

isValidating
public abstract boolean isValidating()
Indicates whether or not this parser is configured to
 validate XML documents.

Returns:
true if this parser is configured to validate
         XML documents; false otherwise.


"
DocumentBuilder,isXIncludeAware(),boolean,Get the XInclude processing mode for this parser.,"

isXIncludeAware
public boolean isXIncludeAware()
Get the XInclude processing mode for this parser.

Returns:
the return value of
      the DocumentBuilderFactory.isXIncludeAware()
      when this parser was created from factory.
Throws:
UnsupportedOperationException - When implementation does not
   override this method
Since:
1.5
See Also:
DocumentBuilderFactory.setXIncludeAware(boolean)


"
DocumentBuilder,newDocument(),abstract Document,Obtain a new instance of a DOM Document object to build a DOM tree with.,"

newDocument
public abstract Document newDocument()
Obtain a new instance of a DOM Document object
 to build a DOM tree with.

Returns:
A new instance of a DOM Document object.


"
DocumentBuilder,parse(File f),Document,Parse the content of the given file as an XML document and return a new DOM Document object.,"

parse
public Document parse(File f)
               throws SAXException,
                      IOException
Parse the content of the given file as an XML document
 and return a new DOM Document object.
 An IllegalArgumentException is thrown if the
 File is null null.

Parameters:
f - The file containing the XML to parse.
Returns:
A new DOM Document object.
Throws:
IOException - If any IO errors occur.
SAXException - If any parse errors occur.
IllegalArgumentException - When f is null
See Also:
DocumentHandler


"
DocumentBuilder,parse(InputSource is),abstract Document,Parse the content of the given input source as an XML document and return a new DOM Document object.,"

parse
public abstract Document parse(InputSource is)
                        throws SAXException,
                               IOException
Parse the content of the given input source as an XML document
 and return a new DOM Document object.
 An IllegalArgumentException is thrown if the
 InputSource is null null.

Parameters:
is - InputSource containing the content to be parsed.
Returns:
A new DOM Document object.
Throws:
IOException - If any IO errors occur.
SAXException - If any parse errors occur.
IllegalArgumentException - When is is null
See Also:
DocumentHandler


"
DocumentBuilder,parse(InputStream is),Document,Parse the content of the given InputStream as an XML document and return a new DOM Document object.,"

parse
public Document parse(InputStream is)
               throws SAXException,
                      IOException
Parse the content of the given InputStream as an XML
 document and return a new DOM Document object.
 An IllegalArgumentException is thrown if the
 InputStream is null.

Parameters:
is - InputStream containing the content to be parsed.
Returns:
Document result of parsing the
  InputStream
Throws:
IOException - If any IO errors occur.
SAXException - If any parse errors occur.
IllegalArgumentException - When is is null
See Also:
DocumentHandler


"
DocumentBuilder,"parse(InputStream is, String systemId)",Document,Parse the content of the given InputStream as an XML document and return a new DOM Document object.,"

parse
public Document parse(InputStream is,
                      String systemId)
               throws SAXException,
                      IOException
Parse the content of the given InputStream as an
 XML document and return a new DOM Document object.
 An IllegalArgumentException is thrown if the
 InputStream is null.

Parameters:
is - InputStream containing the content to be parsed.
systemId - Provide a base for resolving relative URIs.
Returns:
A new DOM Document object.
Throws:
IOException - If any IO errors occur.
SAXException - If any parse errors occur.
IllegalArgumentException - When is is null
See Also:
DocumentHandler


"
DocumentBuilder,parse(String uri),Document,Parse the content of the given URI as an XML document and return a new DOM Document object.,"

parse
public Document parse(String uri)
               throws SAXException,
                      IOException
Parse the content of the given URI as an XML document
 and return a new DOM Document object.
 An IllegalArgumentException is thrown if the
 URI is null null.

Parameters:
uri - The location of the content to be parsed.
Returns:
A new DOM Document object.
Throws:
IOException - If any IO errors occur.
SAXException - If any parse errors occur.
IllegalArgumentException - When uri is null
See Also:
DocumentHandler


"
DocumentBuilder,reset(),void,Reset this DocumentBuilder to its original configuration.,"

reset
public void reset()
Reset this DocumentBuilder to its original configuration.
DocumentBuilder is reset to the same state as when it was created with
 DocumentBuilderFactory.newDocumentBuilder().
 reset() is designed to allow the reuse of existing DocumentBuilders
 thus saving resources associated with the creation of new DocumentBuilders.
The reset DocumentBuilder is not guaranteed to have the same EntityResolver or ErrorHandler
Objects, e.g. Object.equals(Object obj).  It is guaranteed to have a functionally equal
 EntityResolver and ErrorHandler.

Throws:
UnsupportedOperationException - When implementation does not
   override this method.
Since:
1.5


"
DocumentBuilder,setEntityResolver(EntityResolver er),abstract void,Specify the EntityResolver to be used to resolve entities present in the XML document to be parsed.,"

setEntityResolver
public abstract void setEntityResolver(EntityResolver er)
Specify the EntityResolver to be used to resolve
 entities present in the XML document to be parsed. Setting
 this to null will result in the underlying
 implementation using it's own default implementation and
 behavior.

Parameters:
er - The EntityResolver to be used to resolve entities
           present in the XML document to be parsed.


"
DocumentBuilder,setErrorHandler(ErrorHandler eh),abstract void,Specify the ErrorHandler to be used by the parser.,"

setErrorHandler
public abstract void setErrorHandler(ErrorHandler eh)
Specify the ErrorHandler to be used by the parser.
 Setting this to null will result in the underlying
 implementation using it's own default implementation and
 behavior.

Parameters:
eh - The ErrorHandler to be used by the parser.


"
DocumentBuilderFactory,getAttribute(String name),abstract Object,Allows the user to retrieve specific attributes on the underlying implementation.,"

getAttribute
public abstract Object getAttribute(String name)
                             throws IllegalArgumentException
Allows the user to retrieve specific attributes on the underlying
 implementation.

Parameters:
name - The name of the attribute.
Returns:
value The value of the attribute.
Throws:
IllegalArgumentException - thrown if the underlying
   implementation doesn't recognize the attribute.


"
DocumentBuilderFactory,getFeature(String name),abstract boolean,Get the state of the named feature.,"

getFeature
public abstract boolean getFeature(String name)
                            throws ParserConfigurationException
Get the state of the named feature.

 Feature names are fully qualified URIs.
 Implementations may define their own features.
 An ParserConfigurationException is thrown if this DocumentBuilderFactory or the
 DocumentBuilders it creates cannot support the feature.
 It is possible for an DocumentBuilderFactory to expose a feature value but be unable to change its state.
 

Parameters:
name - Feature name.
Returns:
State of the named feature.
Throws:
ParserConfigurationException - if this DocumentBuilderFactory
   or the DocumentBuilders it creates cannot support this feature.


"
DocumentBuilderFactory,getSchema(),Schema,Gets the Schema object specified through the setSchema(Schema schema) method.,"

getSchema
public Schema getSchema()
Gets the Schema object specified through
 the setSchema(Schema schema) method.

Returns:
the Schema object that was last set through
      the setSchema(Schema) method, or null
      if the method was not invoked since a DocumentBuilderFactory
      is created.
Throws:
UnsupportedOperationException - When implementation does not
   override this method.
Since:
1.5


"
DocumentBuilderFactory,isCoalescing(),boolean,Indicates whether or not the factory is configured to produce parsers which converts CDATA nodes to Text nodes and appends it to the adjacent (if any) Text node.,"

isCoalescing
public boolean isCoalescing()
Indicates whether or not the factory is configured to produce
 parsers which converts CDATA nodes to Text nodes and appends it to
 the adjacent (if any) Text node.

Returns:
true if the factory is configured to produce parsers
          which converts CDATA nodes to Text nodes and appends it to
          the adjacent (if any) Text node; false otherwise.


"
DocumentBuilderFactory,isExpandEntityReferences(),boolean,Indicates whether or not the factory is configured to produce parsers which expand entity reference nodes.,"

isExpandEntityReferences
public boolean isExpandEntityReferences()
Indicates whether or not the factory is configured to produce
 parsers which expand entity reference nodes.

Returns:
true if the factory is configured to produce parsers
          which expand entity reference nodes; false otherwise.


"
DocumentBuilderFactory,isIgnoringComments(),boolean,Indicates whether or not the factory is configured to produce parsers which ignores comments.,"

isIgnoringComments
public boolean isIgnoringComments()
Indicates whether or not the factory is configured to produce
 parsers which ignores comments.

Returns:
true if the factory is configured to produce parsers
          which ignores comments; false otherwise.


"
DocumentBuilderFactory,isIgnoringElementContentWhitespace(),boolean,Indicates whether or not the factory is configured to produce parsers which ignore ignorable whitespace in element content.,"

isIgnoringElementContentWhitespace
public boolean isIgnoringElementContentWhitespace()
Indicates whether or not the factory is configured to produce
 parsers which ignore ignorable whitespace in element content.

Returns:
true if the factory is configured to produce parsers
          which ignore ignorable whitespace in element content;
          false otherwise.


"
DocumentBuilderFactory,isNamespaceAware(),boolean,Indicates whether or not the factory is configured to produce parsers which are namespace aware.,"

isNamespaceAware
public boolean isNamespaceAware()
Indicates whether or not the factory is configured to produce
 parsers which are namespace aware.

Returns:
true if the factory is configured to produce parsers which
          are namespace aware; false otherwise.


"
DocumentBuilderFactory,isValidating(),boolean,Indicates whether or not the factory is configured to produce parsers which validate the XML content during parse.,"

isValidating
public boolean isValidating()
Indicates whether or not the factory is configured to produce
 parsers which validate the XML content during parse.

Returns:
true if the factory is configured to produce parsers
          which validate the XML content during parse; false otherwise.


"
DocumentBuilderFactory,isXIncludeAware(),boolean,Get state of XInclude processing.,"

isXIncludeAware
public boolean isXIncludeAware()
Get state of XInclude processing.

Returns:
current state of XInclude processing
Throws:
UnsupportedOperationException - When implementation does not
   override this method.
Since:
1.5


"
DocumentBuilderFactory,newDocumentBuilder(),abstract DocumentBuilder,Creates a new instance of a DocumentBuilder using the currently configured parameters.,"

newDocumentBuilder
public abstract DocumentBuilder newDocumentBuilder()
                                            throws ParserConfigurationException
Creates a new instance of a DocumentBuilder
 using the currently configured parameters.

Returns:
A new instance of a DocumentBuilder.
Throws:
ParserConfigurationException - if a DocumentBuilder
   cannot be created which satisfies the configuration requested.


"
DocumentBuilderFactory,newInstance(),static DocumentBuilderFactory,Obtain a new instance of a DocumentBuilderFactory.,"

newInstance
public static DocumentBuilderFactory newInstance()
Obtain a new instance of a
 DocumentBuilderFactory. This static method creates
 a new factory instance.
 This method uses the following ordered lookup procedure to determine
 the DocumentBuilderFactory implementation class to
 load:
 

 Use the javax.xml.parsers.DocumentBuilderFactory system
 property.
 

 Use the properties file ""lib/jaxp.properties"" in the JRE directory.
 This configuration file is in standard java.util.Properties
  format and contains the fully qualified name of the
 implementation class with the key being the system property defined
 above.

 The jaxp.properties file is read only once by the JAXP implementation
 and it's values are then cached for future use.  If the file does not exist
 when the first attempt is made to read from it, no further attempts are
 made to check for its existence.  It is not possible to change the value
 of any property in jaxp.properties after it has been read for the first time.
 

 Uses the service-provider loading facilities, defined by the
 ServiceLoader class, to attempt to locate and load an
 implementation of the service using the default loading mechanism:
 the service-provider loading facility will use the current thread's context class loader
 to attempt to load the service. If the context class
 loader is null, the system class loader will be used.
 

 Otherwise, the system-default implementation is returned.
 


 Once an application has obtained a reference to a
 DocumentBuilderFactory it can use the factory to
 configure and obtain parser instances.


 Tip for Trouble-shooting
Setting the jaxp.debug system property will cause
 this method to print a lot of debug messages
 to System.err about what it is doing and where it is looking at.
 If you have problems loading DocumentBuilders, try:

 java -Djaxp.debug=1 YourProgram ....
 

Returns:
New instance of a DocumentBuilderFactory
Throws:
FactoryConfigurationError - in case of service configuration error or if
 the implementation is not available or cannot be instantiated.


"
DocumentBuilderFactory,"newInstance(String factoryClassName, ClassLoader classLoader)",static DocumentBuilderFactory,Obtain a new instance of a DocumentBuilderFactory from class name.,"

newInstance
public static DocumentBuilderFactory newInstance(String factoryClassName,
                                                 ClassLoader classLoader)
Obtain a new instance of a DocumentBuilderFactory from class name.
 This function is useful when there are multiple providers in the classpath.
 It gives more control to the application as it can specify which provider
 should be loaded.
Once an application has obtained a reference to a DocumentBuilderFactory
 it can use the factory to configure and obtain parser instances.
Tip for Trouble-shooting
Setting the jaxp.debug system property will cause
 this method to print a lot of debug messages
 to System.err about what it is doing and where it is looking at.
 If you have problems try:

 java -Djaxp.debug=1 YourProgram ....
 

Parameters:
factoryClassName - fully qualified factory class name that provides implementation of javax.xml.parsers.DocumentBuilderFactory.
classLoader - ClassLoader used to load the factory class. If null
                     current Thread's context classLoader is used to load the factory class.
Returns:
New instance of a DocumentBuilderFactory
Throws:
FactoryConfigurationError - if factoryClassName is null, or
                                   the factory class cannot be loaded, instantiated.
Since:
1.6
See Also:
newInstance()


"
DocumentBuilderFactory,"setAttribute(String name, Object value)",abstract void,Allows the user to set specific attributes on the underlying implementation.,"

setAttribute
public abstract void setAttribute(String name,
                                  Object value)
                           throws IllegalArgumentException
Allows the user to set specific attributes on the underlying
 implementation.
 
 All implementations that implement JAXP 1.5 or newer are required to
 support the XMLConstants.ACCESS_EXTERNAL_DTD and
 XMLConstants.ACCESS_EXTERNAL_SCHEMA properties.
 



      Setting the XMLConstants.ACCESS_EXTERNAL_DTD property
      restricts the access to external DTDs, external Entity References to the
      protocols specified by the property.
      If access is denied during parsing due to the restriction of this property,
      SAXException will be thrown by the parse methods defined by
      DocumentBuilder.
      

      Setting the XMLConstants.ACCESS_EXTERNAL_SCHEMA property
      restricts the access to external Schema set by the schemaLocation attribute to
      the protocols specified by the property.  If access is denied during parsing
      due to the restriction of this property, SAXException
      will be thrown by the parse methods defined by
      DocumentBuilder.
      



Parameters:
name - The name of the attribute.
value - The value of the attribute.
Throws:
IllegalArgumentException - thrown if the underlying
   implementation doesn't recognize the attribute.


"
DocumentBuilderFactory,setCoalescing(boolean coalescing),void,Specifies that the parser produced by this code will convert CDATA nodes to Text nodes and append it to the adjacent (if any) text node.,"

setCoalescing
public void setCoalescing(boolean coalescing)
Specifies that the parser produced by this code will
 convert CDATA nodes to Text nodes and append it to the
 adjacent (if any) text node. By default the value of this is set to
 false

Parameters:
coalescing - true if the parser produced will convert CDATA nodes
                    to Text nodes and append it to the adjacent (if any)
                    text node; false otherwise.


"
DocumentBuilderFactory,setExpandEntityReferences(boolean expandEntityRef),void,Specifies that the parser produced by this code will expand entity reference nodes.,"

setExpandEntityReferences
public void setExpandEntityReferences(boolean expandEntityRef)
Specifies that the parser produced by this code will
 expand entity reference nodes. By default the value of this is set to
 true

Parameters:
expandEntityRef - true if the parser produced will expand entity
                        reference nodes; false otherwise.


"
DocumentBuilderFactory,"setFeature(String name, boolean value)",abstract void,Set a feature for this DocumentBuilderFactory and DocumentBuilders created by this factory.,"

setFeature
public abstract void setFeature(String name,
                                boolean value)
                         throws ParserConfigurationException
Set a feature for this DocumentBuilderFactory and DocumentBuilders created by this factory.

 Feature names are fully qualified URIs.
 Implementations may define their own features.
 A ParserConfigurationException is thrown if this DocumentBuilderFactory or the
 DocumentBuilders it creates cannot support the feature.
 It is possible for a DocumentBuilderFactory to expose a feature value but be unable to change its state.
 

 All implementations are required to support the XMLConstants.FEATURE_SECURE_PROCESSING feature.
 When the feature is:


true: the implementation will limit XML processing to conform to implementation limits.
     Examples include enity expansion limits and XML Schema constructs that would consume large amounts of resources.
     If XML processing is limited for security reasons, it will be reported via a call to the registered
    ErrorHandler.fatalError(SAXParseException exception).
     See DocumentBuilder.setErrorHandler(org.xml.sax.ErrorHandler errorHandler).
   

false: the implementation will processing XML according to the XML specifications without
     regard to possible implementation limits.
   


Parameters:
name - Feature name.
value - Is feature state true or false.
Throws:
ParserConfigurationException - if this DocumentBuilderFactory or the DocumentBuilders
   it creates cannot support this feature.
NullPointerException - If the name parameter is null.


"
DocumentBuilderFactory,setIgnoringComments(boolean ignoreComments),void,Specifies that the parser produced by this code will ignore comments.,"

setIgnoringComments
public void setIgnoringComments(boolean ignoreComments)
Specifies that the parser produced by this code will
 ignore comments. By default the value of this is set to false
 .

Parameters:
ignoreComments - boolean value to ignore comments during processing


"
DocumentBuilderFactory,setIgnoringElementContentWhitespace(boolean whitespace),void,Specifies that the parsers created by this factory must eliminate whitespace in element content (sometimes known loosely as 'ignorable whitespace') when parsing XML documents (see XML Rec 2.10).,"

setIgnoringElementContentWhitespace
public void setIgnoringElementContentWhitespace(boolean whitespace)
Specifies that the parsers created by this  factory must eliminate
 whitespace in element content (sometimes known loosely as
 'ignorable whitespace') when parsing XML documents (see XML Rec
 2.10). Note that only whitespace which is directly contained within
 element content that has an element only content model (see XML
 Rec 3.2.1) will be eliminated. Due to reliance on the content model
 this setting requires the parser to be in validating mode. By default
 the value of this is set to false.

Parameters:
whitespace - true if the parser created must eliminate whitespace
                   in the element content when parsing XML documents;
                   false otherwise.


"
DocumentBuilderFactory,setNamespaceAware(boolean awareness),void,Specifies that the parser produced by this code will provide support for XML namespaces.,"

setNamespaceAware
public void setNamespaceAware(boolean awareness)
Specifies that the parser produced by this code will
 provide support for XML namespaces. By default the value of this is set
 to false

Parameters:
awareness - true if the parser produced will provide support
                  for XML namespaces; false otherwise.


"
DocumentBuilderFactory,setSchema(Schema schema),void,Set the Schema to be used by parsers created from this factory.,"

setSchema
public void setSchema(Schema schema)
Set the Schema to be used by parsers created
 from this factory.

 
 When a Schema is non-null, a parser will use a validator
 created from it to validate documents before it passes information
 down to the application.

 When errors are found by the validator, the parser is responsible
 to report them to the user-specified ErrorHandler
 (or if the error handler is not set, ignore them or throw them), just
 like any other errors found by the parser itself.
 In other words, if the user-specified ErrorHandler
 is set, it must receive those errors, and if not, they must be
 treated according to the implementation specific
 default error handling rules.

 
 A validator may modify the outcome of a parse (for example by
 adding default values that were missing in documents), and a parser
 is responsible to make sure that the application will receive
 modified DOM trees.

 
 Initialy, null is set as the Schema.

 
 This processing will take effect even if
 the isValidating() method returns false.

 It is an error to use
 the http://java.sun.com/xml/jaxp/properties/schemaSource
 property and/or the http://java.sun.com/xml/jaxp/properties/schemaLanguage
 property in conjunction with a Schema object.
 Such configuration will cause a ParserConfigurationException
 exception when the newDocumentBuilder() is invoked.
Note for implmentors

 A parser must be able to work with any Schema
 implementation. However, parsers and schemas are allowed
 to use implementation-specific custom mechanisms
 as long as they yield the result described in the specification.
 

Parameters:
schema - Schema to use or null
   to remove a schema.
Throws:
UnsupportedOperationException - When implementation does not
   override this method.
Since:
1.5


"
DocumentBuilderFactory,setValidating(boolean validating),void,Specifies that the parser produced by this code will validate documents as they are parsed.,"

setValidating
public void setValidating(boolean validating)
Specifies that the parser produced by this code will
 validate documents as they are parsed. By default the value of this
 is set to false.

 
 Note that ""the validation"" here means
 a validating
 parser as defined in the XML recommendation.
 In other words, it essentially just controls the DTD validation.
 (except the legacy two properties defined in JAXP 1.2.)
 

 To use modern schema languages such as W3C XML Schema or
 RELAX NG instead of DTD, you can configure your parser to be
 a non-validating parser by leaving the setValidating(boolean)
 method false, then use the setSchema(Schema)
 method to associate a schema to a parser.
 

Parameters:
validating - true if the parser produced will validate documents
                   as they are parsed; false otherwise.


"
DocumentBuilderFactory,setXIncludeAware(boolean state),void,Set state of XInclude processing.,"

setXIncludeAware
public void setXIncludeAware(boolean state)
Set state of XInclude processing.
If XInclude markup is found in the document instance, should it be
 processed as specified in 
 XML Inclusions (XInclude) Version 1.0.
XInclude processing defaults to false.

Parameters:
state - Set XInclude processing to true or
   false
Throws:
UnsupportedOperationException - When implementation does not
   override this method.
Since:
1.5


"
SAXParser,getParser(),abstract Parser,Returns the SAX parser that is encapsultated by the implementation of this class.,"

getParser
public abstract Parser getParser()
                          throws SAXException
Returns the SAX parser that is encapsultated by the
 implementation of this class.

Returns:
The SAX parser that is encapsultated by the
         implementation of this class.
Throws:
SAXException - If any SAX errors occur during processing.


"
SAXParser,getProperty(String name),abstract Object,Returns the particular property requested for in the underlying implementation of XMLReader.,"

getProperty
public abstract Object getProperty(String name)
                            throws SAXNotRecognizedException,
                                   SAXNotSupportedException
Returns the particular property requested for in the underlying
 implementation of XMLReader.

Parameters:
name - The name of the property to be retrieved.
Returns:
Value of the requested property.
Throws:
SAXNotRecognizedException - When the underlying XMLReader does
    not recognize the property name.
SAXNotSupportedException - When the underlying XMLReader
  recognizes the property name but doesn't support the property.
See Also:
XMLReader.getProperty(java.lang.String)


"
SAXParser,getSchema(),Schema,Get a reference to the the Schema being used by the XML processor.,"

getSchema
public Schema getSchema()
Get a reference to the the Schema being used by
 the XML processor.
If no schema is being used, null is returned.

Returns:
Schema being used or null
  if none in use
Throws:
UnsupportedOperationException - When implementation does not
   override this method
Since:
1.5


"
SAXParser,getXMLReader(),abstract XMLReader,Returns the XMLReader that is encapsulated by the implementation of this class.,"

getXMLReader
public abstract XMLReader getXMLReader()
                                throws SAXException
Returns the XMLReader that is encapsulated by the
 implementation of this class.

Returns:
The XMLReader that is encapsulated by the
         implementation of this class.
Throws:
SAXException - If any SAX errors occur during processing.


"
SAXParser,isNamespaceAware(),abstract boolean,Indicates whether or not this parser is configured to understand namespaces.,"

isNamespaceAware
public abstract boolean isNamespaceAware()
Indicates whether or not this parser is configured to
 understand namespaces.

Returns:
true if this parser is configured to
         understand namespaces; false otherwise.


"
SAXParser,isValidating(),abstract boolean,Indicates whether or not this parser is configured to validate XML documents.,"

isValidating
public abstract boolean isValidating()
Indicates whether or not this parser is configured to
 validate XML documents.

Returns:
true if this parser is configured to
         validate XML documents; false otherwise.


"
SAXParser,isXIncludeAware(),boolean,Get the XInclude processing mode for this parser.,"

isXIncludeAware
public boolean isXIncludeAware()
Get the XInclude processing mode for this parser.

Returns:
the return value of
      the SAXParserFactory.isXIncludeAware()
      when this parser was created from factory.
Throws:
UnsupportedOperationException - When implementation does not
   override this method
Since:
1.5
See Also:
SAXParserFactory.setXIncludeAware(boolean)


"
SAXParser,"parse(File f, DefaultHandler dh)",void,Parse the content of the file specified as XML using the specified DefaultHandler.,"

parse
public void parse(File f,
                  DefaultHandler dh)
           throws SAXException,
                  IOException
Parse the content of the file specified as XML using the
 specified DefaultHandler.

Parameters:
f - The file containing the XML to parse
dh - The SAX DefaultHandler to use.
Throws:
IllegalArgumentException - If the File object is null.
IOException - If any IO errors occur.
SAXException - If any SAX errors occur during processing.
See Also:
DocumentHandler


"
SAXParser,"parse(File f, HandlerBase hb)",void,Parse the content of the file specified as XML using the specified HandlerBase.,"

parse
public void parse(File f,
                  HandlerBase hb)
           throws SAXException,
                  IOException
Parse the content of the file specified as XML using the
 specified HandlerBase.
  Use of the DefaultHandler version of this method is recommended as
 the HandlerBase class has been deprecated in SAX 2.0

Parameters:
f - The file containing the XML to parse
hb - The SAX HandlerBase to use.
Throws:
IllegalArgumentException - If the File object is null.
IOException - If any IO errors occur.
SAXException - If any SAX errors occur during processing.
See Also:
DocumentHandler


"
SAXParser,"parse(InputSource is, DefaultHandler dh)",void,Parse the content given InputSource as XML using the specified DefaultHandler.,"

parse
public void parse(InputSource is,
                  DefaultHandler dh)
           throws SAXException,
                  IOException
Parse the content given InputSource
 as XML using the specified
 DefaultHandler.

Parameters:
is - The InputSource containing the content to be parsed.
dh - The SAX DefaultHandler to use.
Throws:
IllegalArgumentException - If the InputSource object
   is null.
IOException - If any IO errors occur.
SAXException - If any SAX errors occur during processing.
See Also:
DocumentHandler


"
SAXParser,"parse(InputSource is, HandlerBase hb)",void,Parse the content given InputSource as XML using the specified HandlerBase.,"

parse
public void parse(InputSource is,
                  HandlerBase hb)
           throws SAXException,
                  IOException
Parse the content given InputSource
 as XML using the specified
 HandlerBase.
  Use of the DefaultHandler version of this method is recommended as
 the HandlerBase class has been deprecated in SAX 2.0

Parameters:
is - The InputSource containing the content to be parsed.
hb - The SAX HandlerBase to use.
Throws:
IllegalArgumentException - If the InputSource object
   is null.
IOException - If any IO errors occur.
SAXException - If any SAX errors occur during processing.
See Also:
DocumentHandler


"
SAXParser,"parse(InputStream is, DefaultHandler dh)",void,Parse the content of the given InputStream instance as XML using the specified DefaultHandler.,"

parse
public void parse(InputStream is,
                  DefaultHandler dh)
           throws SAXException,
                  IOException
Parse the content of the given InputStream
 instance as XML using the specified
 DefaultHandler.

Parameters:
is - InputStream containing the content to be parsed.
dh - The SAX DefaultHandler to use.
Throws:
IllegalArgumentException - If the given InputStream is null.
IOException - If any IO errors occur.
SAXException - If any SAX errors occur during processing.
See Also:
DocumentHandler


"
SAXParser,"parse(InputStream is, DefaultHandler dh, String systemId)",void,Parse the content of the given InputStream instance as XML using the specified DefaultHandler.,"

parse
public void parse(InputStream is,
                  DefaultHandler dh,
                  String systemId)
           throws SAXException,
                  IOException
Parse the content of the given InputStream
 instance as XML using the specified
 DefaultHandler.

Parameters:
is - InputStream containing the content to be parsed.
dh - The SAX DefaultHandler to use.
systemId - The systemId which is needed for resolving relative URIs.
Throws:
IllegalArgumentException - If the given InputStream is null.
IOException - If any IO errors occur.
SAXException - If any SAX errors occur during processing.
See Also:
version of this method instead.


"
SAXParser,"parse(InputStream is, HandlerBase hb)",void,Parse the content of the given InputStream instance as XML using the specified HandlerBase.,"

parse
public void parse(InputStream is,
                  HandlerBase hb)
           throws SAXException,
                  IOException
Parse the content of the given InputStream
 instance as XML using the specified HandlerBase.
  Use of the DefaultHandler version of this method is recommended as
 the HandlerBase class has been deprecated in SAX 2.0.

Parameters:
is - InputStream containing the content to be parsed.
hb - The SAX HandlerBase to use.
Throws:
IllegalArgumentException - If the given InputStream is null.
SAXException - If parse produces a SAX error.
IOException - If an IO error occurs interacting with the
   InputStream.
See Also:
DocumentHandler


"
SAXParser,"parse(InputStream is, HandlerBase hb, String systemId)",void,Parse the content of the given InputStream instance as XML using the specified HandlerBase.,"

parse
public void parse(InputStream is,
                  HandlerBase hb,
                  String systemId)
           throws SAXException,
                  IOException
Parse the content of the given InputStream
 instance as XML using the specified HandlerBase.
  Use of the DefaultHandler version of this method is recommended as
 the HandlerBase class has been deprecated in SAX 2.0.

Parameters:
is - InputStream containing the content to be parsed.
hb - The SAX HandlerBase to use.
systemId - The systemId which is needed for resolving relative URIs.
Throws:
IllegalArgumentException - If the given InputStream is
   null.
IOException - If any IO error occurs interacting with the
   InputStream.
SAXException - If any SAX errors occur during processing.
See Also:
version of this method instead.


"
SAXParser,"parse(String uri, DefaultHandler dh)",void,Parse the content described by the giving Uniform Resource Identifier (URI) as XML using the specified DefaultHandler.,"

parse
public void parse(String uri,
                  DefaultHandler dh)
           throws SAXException,
                  IOException
Parse the content described by the giving Uniform Resource
 Identifier (URI) as XML using the specified
 DefaultHandler.

Parameters:
uri - The location of the content to be parsed.
dh - The SAX DefaultHandler to use.
Throws:
IllegalArgumentException - If the uri is null.
IOException - If any IO errors occur.
SAXException - If any SAX errors occur during processing.
See Also:
DocumentHandler


"
SAXParser,"parse(String uri, HandlerBase hb)",void,Parse the content described by the giving Uniform Resource Identifier (URI) as XML using the specified HandlerBase.,"

parse
public void parse(String uri,
                  HandlerBase hb)
           throws SAXException,
                  IOException
Parse the content described by the giving Uniform Resource
 Identifier (URI) as XML using the specified
 HandlerBase.
  Use of the DefaultHandler version of this method is recommended as
 the HandlerBase class has been deprecated in SAX 2.0

Parameters:
uri - The location of the content to be parsed.
hb - The SAX HandlerBase to use.
Throws:
IllegalArgumentException - If the uri is null.
IOException - If any IO errors occur.
SAXException - If any SAX errors occur during processing.
See Also:
DocumentHandler


"
SAXParser,reset(),void,Reset this SAXParser to its original configuration.,"

reset
public void reset()
Reset this SAXParser to its original configuration.
SAXParser is reset to the same state as when it was created with
 SAXParserFactory.newSAXParser().
 reset() is designed to allow the reuse of existing SAXParsers
 thus saving resources associated with the creation of new SAXParsers.
The reset SAXParser is not guaranteed to have the same Schema
Object, e.g. Object.equals(Object obj).  It is guaranteed to have a functionally equal
 Schema.

Throws:
UnsupportedOperationException - When Implementations do not
   override this method
Since:
1.5


"
SAXParser,"setProperty(String name, Object value)",abstract void,Sets the particular property in the underlying implementation of XMLReader.,"

setProperty
public abstract void setProperty(String name,
                                 Object value)
                          throws SAXNotRecognizedException,
                                 SAXNotSupportedException
Sets the particular property in the underlying implementation of
 XMLReader.
 A list of the core features and properties can be found at
 
 http://sax.sourceforge.net/?selected=get-set.

 All implementations that implement JAXP 1.5 or newer are required to
 support the XMLConstants.ACCESS_EXTERNAL_DTD and
 XMLConstants.ACCESS_EXTERNAL_SCHEMA properties.
 



      Setting the XMLConstants.ACCESS_EXTERNAL_DTD property
      restricts the access to external DTDs, external Entity References to
      the protocols specified by the property.  If access is denied during parsing
      due to the restriction of this property, SAXException
      will be thrown by the parse methods defined by SAXParser.
      

      Setting the XMLConstants.ACCESS_EXTERNAL_SCHEMA property
      restricts the access to external Schema set by the schemaLocation attribute to
      the protocols specified by the property.  If access is denied during parsing
      due to the restriction of this property, SAXException
      will be thrown by the parse methods defined by the SAXParser.
      



Parameters:
name - The name of the property to be set.
value - The value of the property to be set.
Throws:
SAXNotRecognizedException - When the underlying XMLReader does
   not recognize the property name.
SAXNotSupportedException - When the underlying XMLReader
  recognizes the property name but doesn't support the property.
See Also:
XMLReader.setProperty(java.lang.String, java.lang.Object)


"
SAXParserFactory,getFeature(String name),abstract boolean,Returns the particular property requested for in the underlying implementation of org.xml.sax.XMLReader.,"

getFeature
public abstract boolean getFeature(String name)
                            throws ParserConfigurationException,
                                   SAXNotRecognizedException,
                                   SAXNotSupportedException
Returns the particular property requested for in the underlying
 implementation of org.xml.sax.XMLReader.

Parameters:
name - The name of the property to be retrieved.
Returns:
Value of the requested property.
Throws:
ParserConfigurationException - if a parser cannot be created which satisfies the requested configuration.
SAXNotRecognizedException - When the underlying XMLReader does not recognize the property name.
SAXNotSupportedException - When the underlying XMLReader recognizes the property name but doesn't support the property.
See Also:
XMLReader.getProperty(java.lang.String)


"
SAXParserFactory,getSchema(),Schema,Gets the Schema object specified through the setSchema(Schema schema) method.,"

getSchema
public Schema getSchema()
Gets the Schema object specified through
 the setSchema(Schema schema) method.

Returns:
the Schema object that was last set through
      the setSchema(Schema) method, or null
      if the method was not invoked since a SAXParserFactory
      is created.
Throws:
UnsupportedOperationException - When implementation does not
   override this method
Since:
1.5


"
SAXParserFactory,isNamespaceAware(),boolean,Indicates whether or not the factory is configured to produce parsers which are namespace aware.,"

isNamespaceAware
public boolean isNamespaceAware()
Indicates whether or not the factory is configured to produce
 parsers which are namespace aware.

Returns:
true if the factory is configured to produce
         parsers which are namespace aware; false otherwise.


"
SAXParserFactory,isValidating(),boolean,Indicates whether or not the factory is configured to produce parsers which validate the XML content during parse.,"

isValidating
public boolean isValidating()
Indicates whether or not the factory is configured to produce
 parsers which validate the XML content during parse.

Returns:
true if the factory is configured to produce parsers which validate
         the XML content during parse; false otherwise.


"
SAXParserFactory,isXIncludeAware(),boolean,Get state of XInclude processing.,"

isXIncludeAware
public boolean isXIncludeAware()
Get state of XInclude processing.

Returns:
current state of XInclude processing
Throws:
UnsupportedOperationException - When implementation does not
   override this method
Since:
1.5


"
SAXParserFactory,newInstance(),static SAXParserFactory,Obtain a new instance of a SAXParserFactory.,"

newInstance
public static SAXParserFactory newInstance()
Obtain a new instance of a SAXParserFactory. This
 static method creates a new factory instance
 This method uses the following ordered lookup procedure to determine
 the SAXParserFactory implementation class to
 load:
 

 Use the javax.xml.parsers.SAXParserFactory system
 property.
 

 Use the properties file ""lib/jaxp.properties"" in the JRE directory.
 This configuration file is in standard java.util.Properties
  format and contains the fully qualified name of the
 implementation class with the key being the system property defined
 above.

 The jaxp.properties file is read only once by the JAXP implementation
 and it's values are then cached for future use.  If the file does not exist
 when the first attempt is made to read from it, no further attempts are
 made to check for its existence.  It is not possible to change the value
 of any property in jaxp.properties after it has been read for the first time.
 

 Use the service-provider loading facilities, defined by the
 ServiceLoader class, to attempt to locate and load an
 implementation of the service using the default loading mechanism:
 the service-provider loading facility will use the current thread's context class loader
 to attempt to load the service. If the context class
 loader is null, the system class loader will be used.
 

 Otherwise the system-default implementation is returned.
 


 Once an application has obtained a reference to a
 SAXParserFactory it can use the factory to
 configure and obtain parser instances.



 Tip for Trouble-shooting
Setting the jaxp.debug system property will cause
 this method to print a lot of debug messages
 to System.err about what it is doing and where it is looking at.
 If you have problems loading SAXParsers, try:

 java -Djaxp.debug=1 YourProgram ....
 

Returns:
A new instance of a SAXParserFactory.
Throws:
FactoryConfigurationError - in case of service configuration error or if
 the implementation is not available or cannot be instantiated.


"
SAXParserFactory,"newInstance(String factoryClassName, ClassLoader classLoader)",static SAXParserFactory,Obtain a new instance of a SAXParserFactory from class name.,"

newInstance
public static SAXParserFactory newInstance(String factoryClassName,
                                           ClassLoader classLoader)
Obtain a new instance of a SAXParserFactory from class name.
 This function is useful when there are multiple providers in the classpath.
 It gives more control to the application as it can specify which provider
 should be loaded.
Once an application has obtained a reference to a SAXParserFactory
 it can use the factory to configure and obtain parser instances.
Tip for Trouble-shooting
Setting the jaxp.debug system property will cause
 this method to print a lot of debug messages
 to System.err about what it is doing and where it is looking at.
 If you have problems, try:

 java -Djaxp.debug=1 YourProgram ....
 

Parameters:
factoryClassName - fully qualified factory class name that provides implementation of javax.xml.parsers.SAXParserFactory.
classLoader - ClassLoader used to load the factory class. If null
                     current Thread's context classLoader is used to load the factory class.
Returns:
New instance of a SAXParserFactory
Throws:
FactoryConfigurationError - if factoryClassName is null, or
                                   the factory class cannot be loaded, instantiated.
Since:
1.6
See Also:
newInstance()


"
SAXParserFactory,newSAXParser(),abstract SAXParser,Creates a new instance of a SAXParser using the currently configured factory parameters.,"

newSAXParser
public abstract SAXParser newSAXParser()
                                throws ParserConfigurationException,
                                       SAXException
Creates a new instance of a SAXParser using the currently
 configured factory parameters.

Returns:
A new instance of a SAXParser.
Throws:
ParserConfigurationException - if a parser cannot
   be created which satisfies the requested configuration.
SAXException - for SAX errors.


"
SAXParserFactory,"setFeature(String name, boolean value)",abstract void,Sets the particular feature in the underlying implementation of org.xml.sax.XMLReader.,"

setFeature
public abstract void setFeature(String name,
                                boolean value)
                         throws ParserConfigurationException,
                                SAXNotRecognizedException,
                                SAXNotSupportedException
Sets the particular feature in the underlying implementation of
 org.xml.sax.XMLReader.
 A list of the core features and properties can be found at
 http://www.saxproject.org/
All implementations are required to support the XMLConstants.FEATURE_SECURE_PROCESSING feature.
 When the feature is


true: the implementation will limit XML processing to conform to implementation limits.
     Examples include entity expansion limits and XML Schema constructs that would consume large amounts of resources.
     If XML processing is limited for security reasons, it will be reported via a call to the registered
     ErrorHandler.fatalError(SAXParseException exception).
     See SAXParser parse methods for handler specification.
   

     When the feature is false, the implementation will processing XML according to the XML specifications without
     regard to possible implementation limits.
   


Parameters:
name - The name of the feature to be set.
value - The value of the feature to be set.
Throws:
ParserConfigurationException - if a parser cannot
     be created which satisfies the requested configuration.
SAXNotRecognizedException - When the underlying XMLReader does
            not recognize the property name.
SAXNotSupportedException - When the underlying XMLReader
            recognizes the property name but doesn't support the
            property.
NullPointerException - If the name parameter is null.
See Also:
XMLReader.setFeature(java.lang.String, boolean)


"
SAXParserFactory,setNamespaceAware(boolean awareness),void,Specifies that the parser produced by this code will provide support for XML namespaces.,"

setNamespaceAware
public void setNamespaceAware(boolean awareness)
Specifies that the parser produced by this code will
 provide support for XML namespaces. By default the value of this is set
 to false.

Parameters:
awareness - true if the parser produced by this code will
                  provide support for XML namespaces; false otherwise.


"
SAXParserFactory,setSchema(Schema schema),void,Set the Schema to be used by parsers created from this factory.,"

setSchema
public void setSchema(Schema schema)
Set the Schema to be used by parsers created
 from this factory.
When a Schema is non-null, a parser will use a validator
 created from it to validate documents before it passes information
 down to the application.
When warnings/errors/fatal errors are found by the validator, the parser must
 handle them as if those errors were found by the parser itself.
 In other words, if the user-specified ErrorHandler
 is set, it must receive those errors, and if not, they must be
 treated according to the implementation specific
 default error handling rules.

 A validator may modify the SAX event stream (for example by
 adding default values that were missing in documents), and a parser
 is responsible to make sure that the application will receive
 those modified event stream.
Initialy, null is set as the Schema.
This processing will take effect even if
 the isValidating() method returns false.

 It is an error to use
 the http://java.sun.com/xml/jaxp/properties/schemaSource
 property and/or the http://java.sun.com/xml/jaxp/properties/schemaLanguage
 property in conjunction with a non-null Schema object.
 Such configuration will cause a SAXException
 exception when those properties are set on a SAXParser.
Note for implementors

 A parser must be able to work with any Schema
 implementation. However, parsers and schemas are allowed
 to use implementation-specific custom mechanisms
 as long as they yield the result described in the specification.
 

Parameters:
schema - Schema to use, null to remove a schema.
Throws:
UnsupportedOperationException - When implementation does not
   override this method
Since:
1.5


"
SAXParserFactory,setValidating(boolean validating),void,Specifies that the parser produced by this code will validate documents as they are parsed.,"

setValidating
public void setValidating(boolean validating)
Specifies that the parser produced by this code will
 validate documents as they are parsed. By default the value of this is
 set to false.

 
 Note that ""the validation"" here means
 a validating
 parser as defined in the XML recommendation.
 In other words, it essentially just controls the DTD validation.
 (except the legacy two properties defined in JAXP 1.2.)
 

 To use modern schema languages such as W3C XML Schema or
 RELAX NG instead of DTD, you can configure your parser to be
 a non-validating parser by leaving the setValidating(boolean)
 method false, then use the setSchema(Schema)
 method to associate a schema to a parser.
 

Parameters:
validating - true if the parser produced by this code will
                   validate documents as they are parsed; false otherwise.


"
SAXParserFactory,setXIncludeAware(boolean state),void,Set state of XInclude processing.,"

setXIncludeAware
public void setXIncludeAware(boolean state)
Set state of XInclude processing.
If XInclude markup is found in the document instance, should it be
 processed as specified in 
 XML Inclusions (XInclude) Version 1.0.
XInclude processing defaults to false.

Parameters:
state - Set XInclude processing to true or
   false
Throws:
UnsupportedOperationException - When implementation does not
   override this method
Since:
1.5


"
