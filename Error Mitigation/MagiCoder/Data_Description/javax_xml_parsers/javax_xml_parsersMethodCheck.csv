Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,DocumentBuilder,1,DocumentBuilderFactory newInstance(),False,,NULL
0,DocumentBuilder,2,DocumentBuilder newDocumentBuilder(),False,,NULL
0,DocumentBuilder,3,Document parse(InputSource input),True,Parse the content of the given input source as an XML document and return a new DOM Document object.,"

parse
public abstract Document parse(InputSource is)
                        throws SAXException,
                               IOException
Parse the content of the given input source as an XML document
 and return a new DOM Document object.
 An IllegalArgumentException is thrown if the
 InputSource is null null.

Parameters:
is - InputSource containing the content to be parsed.
Returns:
A new DOM Document object.
Throws:
IOException - If any IO errors occur.
SAXException - If any parse errors occur.
IllegalArgumentException - When is is null
See Also:
DocumentHandler


"
0,DocumentBuilder,4,Document parse(String systemId),True,Parse the content of the given URI as an XML document and return a new DOM Document object.,"

parse
public Document parse(String uri)
               throws SAXException,
                      IOException
Parse the content of the given URI as an XML document
 and return a new DOM Document object.
 An IllegalArgumentException is thrown if the
 URI is null null.

Parameters:
uri - The location of the content to be parsed.
Returns:
A new DOM Document object.
Throws:
IOException - If any IO errors occur.
SAXException - If any parse errors occur.
IllegalArgumentException - When uri is null
See Also:
DocumentHandler


"
0,DocumentBuilder,5,Document parse(InputStream in),True,Parse the content of the given InputStream as an XML document and return a new DOM Document object.,"

parse
public Document parse(InputStream is)
               throws SAXException,
                      IOException
Parse the content of the given InputStream as an XML
 document and return a new DOM Document object.
 An IllegalArgumentException is thrown if the
 InputStream is null.

Parameters:
is - InputStream containing the content to be parsed.
Returns:
Document result of parsing the
  InputStream
Throws:
IOException - If any IO errors occur.
SAXException - If any parse errors occur.
IllegalArgumentException - When is is null
See Also:
DocumentHandler


"
1,DocumentBuilderFactory,1,DocumentBuilderFactory newInstance(),True,Obtain a new instance of a DocumentBuilderFactory.,"

newInstance
public static DocumentBuilderFactory newInstance()
Obtain a new instance of a
 DocumentBuilderFactory. This static method creates
 a new factory instance.
 This method uses the following ordered lookup procedure to determine
 the DocumentBuilderFactory implementation class to
 load:
 

 Use the javax.xml.parsers.DocumentBuilderFactory system
 property.
 

 Use the properties file ""lib/jaxp.properties"" in the JRE directory.
 This configuration file is in standard java.util.Properties
  format and contains the fully qualified name of the
 implementation class with the key being the system property defined
 above.

 The jaxp.properties file is read only once by the JAXP implementation
 and it's values are then cached for future use.  If the file does not exist
 when the first attempt is made to read from it, no further attempts are
 made to check for its existence.  It is not possible to change the value
 of any property in jaxp.properties after it has been read for the first time.
 

 Uses the service-provider loading facilities, defined by the
 ServiceLoader class, to attempt to locate and load an
 implementation of the service using the default loading mechanism:
 the service-provider loading facility will use the current thread's context class loader
 to attempt to load the service. If the context class
 loader is null, the system class loader will be used.
 

 Otherwise, the system-default implementation is returned.
 


 Once an application has obtained a reference to a
 DocumentBuilderFactory it can use the factory to
 configure and obtain parser instances.


 Tip for Trouble-shooting
Setting the jaxp.debug system property will cause
 this method to print a lot of debug messages
 to System.err about what it is doing and where it is looking at.
 If you have problems loading DocumentBuilders, try:

 java -Djaxp.debug=1 YourProgram ....
 

Returns:
New instance of a DocumentBuilderFactory
Throws:
FactoryConfigurationError - in case of service configuration error or if
 the implementation is not available or cannot be instantiated.


"
1,DocumentBuilderFactory,2,DocumentBuilder newDocumentBuilder(),True,Creates a new instance of a DocumentBuilder using the currently configured parameters.,"

newDocumentBuilder
public abstract DocumentBuilder newDocumentBuilder()
                                            throws ParserConfigurationException
Creates a new instance of a DocumentBuilder
 using the currently configured parameters.

Returns:
A new instance of a DocumentBuilder.
Throws:
ParserConfigurationException - if a DocumentBuilder
   cannot be created which satisfies the configuration requested.


"
1,DocumentBuilderFactory,3,"void setFeature(String name, boolean value)",True,Set a feature for this DocumentBuilderFactory and DocumentBuilders created by this factory.,"

setFeature
public abstract void setFeature(String name,
                                boolean value)
                         throws ParserConfigurationException
Set a feature for this DocumentBuilderFactory and DocumentBuilders created by this factory.

 Feature names are fully qualified URIs.
 Implementations may define their own features.
 A ParserConfigurationException is thrown if this DocumentBuilderFactory or the
 DocumentBuilders it creates cannot support the feature.
 It is possible for a DocumentBuilderFactory to expose a feature value but be unable to change its state.
 

 All implementations are required to support the XMLConstants.FEATURE_SECURE_PROCESSING feature.
 When the feature is:


true: the implementation will limit XML processing to conform to implementation limits.
     Examples include enity expansion limits and XML Schema constructs that would consume large amounts of resources.
     If XML processing is limited for security reasons, it will be reported via a call to the registered
    ErrorHandler.fatalError(SAXParseException exception).
     See DocumentBuilder.setErrorHandler(org.xml.sax.ErrorHandler errorHandler).
   

false: the implementation will processing XML according to the XML specifications without
     regard to possible implementation limits.
   


Parameters:
name - Feature name.
value - Is feature state true or false.
Throws:
ParserConfigurationException - if this DocumentBuilderFactory or the DocumentBuilders
   it creates cannot support this feature.
NullPointerException - If the name parameter is null.


"
1,DocumentBuilderFactory,4,boolean getFeature(String name),True,Get the state of the named feature.,"

getFeature
public abstract boolean getFeature(String name)
                            throws ParserConfigurationException
Get the state of the named feature.

 Feature names are fully qualified URIs.
 Implementations may define their own features.
 An ParserConfigurationException is thrown if this DocumentBuilderFactory or the
 DocumentBuilders it creates cannot support the feature.
 It is possible for an DocumentBuilderFactory to expose a feature value but be unable to change its state.
 

Parameters:
name - Feature name.
Returns:
State of the named feature.
Throws:
ParserConfigurationException - if this DocumentBuilderFactory
   or the DocumentBuilders it creates cannot support this feature.


"
1,DocumentBuilderFactory,5,"void setAttribute(String name, String value)",False,,NULL
2,SAXParser,1,SAXParserFactory.newInstance(),False,,NULL
2,SAXParser,2,"SAXParser.parse(InputSource input, ContentHandler handler)",False,,NULL
2,SAXParser,3,"SAXParser.parse(String systemId, InputSource input, ContentHandler handler)",False,,NULL
2,SAXParser,4,"SAXParser.parse(String systemId, InputSource input, ContentHandler handler, boolean isValidating)",False,,NULL
2,SAXParser,5,"SAXParser.parse(String systemId, InputSource input, ContentHandler handler, boolean isValidating, boolean isNamespaceAware)",False,,NULL
3,SAXParserFactory,1,SAXParserFactory newInstance(),True,Obtain a new instance of a SAXParserFactory.,"

newInstance
public static SAXParserFactory newInstance()
Obtain a new instance of a SAXParserFactory. This
 static method creates a new factory instance
 This method uses the following ordered lookup procedure to determine
 the SAXParserFactory implementation class to
 load:
 

 Use the javax.xml.parsers.SAXParserFactory system
 property.
 

 Use the properties file ""lib/jaxp.properties"" in the JRE directory.
 This configuration file is in standard java.util.Properties
  format and contains the fully qualified name of the
 implementation class with the key being the system property defined
 above.

 The jaxp.properties file is read only once by the JAXP implementation
 and it's values are then cached for future use.  If the file does not exist
 when the first attempt is made to read from it, no further attempts are
 made to check for its existence.  It is not possible to change the value
 of any property in jaxp.properties after it has been read for the first time.
 

 Use the service-provider loading facilities, defined by the
 ServiceLoader class, to attempt to locate and load an
 implementation of the service using the default loading mechanism:
 the service-provider loading facility will use the current thread's context class loader
 to attempt to load the service. If the context class
 loader is null, the system class loader will be used.
 

 Otherwise the system-default implementation is returned.
 


 Once an application has obtained a reference to a
 SAXParserFactory it can use the factory to
 configure and obtain parser instances.



 Tip for Trouble-shooting
Setting the jaxp.debug system property will cause
 this method to print a lot of debug messages
 to System.err about what it is doing and where it is looking at.
 If you have problems loading SAXParsers, try:

 java -Djaxp.debug=1 YourProgram ....
 

Returns:
A new instance of a SAXParserFactory.
Throws:
FactoryConfigurationError - in case of service configuration error or if
 the implementation is not available or cannot be instantiated.


"
3,SAXParserFactory,2,SAXParser newSAXParser(),True,Creates a new instance of a SAXParser using the currently configured factory parameters.,"

newSAXParser
public abstract SAXParser newSAXParser()
                                throws ParserConfigurationException,
                                       SAXException
Creates a new instance of a SAXParser using the currently
 configured factory parameters.

Returns:
A new instance of a SAXParser.
Throws:
ParserConfigurationException - if a parser cannot
   be created which satisfies the requested configuration.
SAXException - for SAX errors.


"
3,SAXParserFactory,3,"void setFeature(String name, boolean value)",True,Sets the particular feature in the underlying implementation of org.xml.sax.XMLReader.,"

setFeature
public abstract void setFeature(String name,
                                boolean value)
                         throws ParserConfigurationException,
                                SAXNotRecognizedException,
                                SAXNotSupportedException
Sets the particular feature in the underlying implementation of
 org.xml.sax.XMLReader.
 A list of the core features and properties can be found at
 http://www.saxproject.org/
All implementations are required to support the XMLConstants.FEATURE_SECURE_PROCESSING feature.
 When the feature is


true: the implementation will limit XML processing to conform to implementation limits.
     Examples include entity expansion limits and XML Schema constructs that would consume large amounts of resources.
     If XML processing is limited for security reasons, it will be reported via a call to the registered
     ErrorHandler.fatalError(SAXParseException exception).
     See SAXParser parse methods for handler specification.
   

     When the feature is false, the implementation will processing XML according to the XML specifications without
     regard to possible implementation limits.
   


Parameters:
name - The name of the feature to be set.
value - The value of the feature to be set.
Throws:
ParserConfigurationException - if a parser cannot
     be created which satisfies the requested configuration.
SAXNotRecognizedException - When the underlying XMLReader does
            not recognize the property name.
SAXNotSupportedException - When the underlying XMLReader
            recognizes the property name but doesn't support the
            property.
NullPointerException - If the name parameter is null.
See Also:
XMLReader.setFeature(java.lang.String, boolean)


"
3,SAXParserFactory,4,boolean getFeature(String name),True,Returns the particular property requested for in the underlying implementation of org.xml.sax.XMLReader.,"

getFeature
public abstract boolean getFeature(String name)
                            throws ParserConfigurationException,
                                   SAXNotRecognizedException,
                                   SAXNotSupportedException
Returns the particular property requested for in the underlying
 implementation of org.xml.sax.XMLReader.

Parameters:
name - The name of the property to be retrieved.
Returns:
Value of the requested property.
Throws:
ParserConfigurationException - if a parser cannot be created which satisfies the requested configuration.
SAXNotRecognizedException - When the underlying XMLReader does not recognize the property name.
SAXNotSupportedException - When the underlying XMLReader recognizes the property name but doesn't support the property.
See Also:
XMLReader.getProperty(java.lang.String)


"
3,SAXParserFactory,5,"void setProperty(String name, Object value)",False,,NULL
