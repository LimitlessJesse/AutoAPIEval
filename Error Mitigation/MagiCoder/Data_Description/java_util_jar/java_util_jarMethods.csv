ClassName,Method,Return Type,Description,Full Description
Attributes,clear(),void,Removes all attributes from this Map.,"

clear
public void clear()
Removes all attributes from this Map.

Specified by:
clear in interface Map<Object,Object>


"
Attributes,clone(),Object,"Returns a copy of the Attributes, implemented as follows:","

clone
public Object clone()
Returns a copy of the Attributes, implemented as follows:
 
     public Object clone() { return new Attributes(this); }
 
 Since the attribute names and values are themselves immutable,
 the Attributes returned can be safely modified without affecting
 the original.

Overrides:
clone in class Object
Returns:
a clone of this instance.
See Also:
Cloneable


"
Attributes,containsKey(Object name),boolean,Returns true if this Map contains the specified attribute name (key).,"

containsKey
public boolean containsKey(Object name)
Returns true if this Map contains the specified attribute name (key).

Specified by:
containsKey in interface Map<Object,Object>
Parameters:
name - the attribute name
Returns:
true if this Map contains the specified attribute name


"
Attributes,containsValue(Object value),boolean,Returns true if this Map maps one or more attribute names (keys) to the specified value.,"

containsValue
public boolean containsValue(Object value)
Returns true if this Map maps one or more attribute names (keys)
 to the specified value.

Specified by:
containsValue in interface Map<Object,Object>
Parameters:
value - the attribute value
Returns:
true if this Map maps one or more attribute names to
         the specified value


"
Attributes,entrySet(),"Set<Map.Entry<Object,Object>>",Returns a Collection view of the attribute name-value mappings contained in this Map.,"

entrySet
public Set<Map.Entry<Object,Object>> entrySet()
Returns a Collection view of the attribute name-value mappings
 contained in this Map.

Specified by:
entrySet in interface Map<Object,Object>
Returns:
a set view of the mappings contained in this map


"
Attributes,equals(Object o),boolean,Compares the specified Attributes object with this Map for equality.,"

equals
public boolean equals(Object o)
Compares the specified Attributes object with this Map for equality.
 Returns true if the given object is also an instance of Attributes
 and the two Attributes objects represent the same mappings.

Specified by:
equals in interface Map<Object,Object>
Overrides:
equals in class Object
Parameters:
o - the Object to be compared
Returns:
true if the specified Object is equal to this Map
See Also:
Object.hashCode(), 
HashMap


"
Attributes,get(Object name),Object,"Returns the value of the specified attribute name, or null if the attribute name was not found.","

get
public Object get(Object name)
Returns the value of the specified attribute name, or null if the
 attribute name was not found.

Specified by:
get in interface Map<Object,Object>
Parameters:
name - the attribute name
Returns:
the value of the specified attribute name, or null if
         not found.


"
Attributes,getValue(Attributes.Name name),String,"Returns the value of the specified Attributes.Name, or null if the attribute was not found.","

getValue
public String getValue(Attributes.Name name)
Returns the value of the specified Attributes.Name, or null if the
 attribute was not found.
 
 This method is defined as:
 
     return (String)get(name);
 

Parameters:
name - the Attributes.Name object
Returns:
the String value of the specified Attribute.Name, or null if
         not found.


"
Attributes,getValue(String name),String,"Returns the value of the specified attribute name, specified as a string, or null if the attribute was not found.","

getValue
public String getValue(String name)
Returns the value of the specified attribute name, specified as
 a string, or null if the attribute was not found. The attribute
 name is case-insensitive.
 
 This method is defined as:
 
      return (String)get(new Attributes.Name((String)name));
 

Parameters:
name - the attribute name as a string
Returns:
the String value of the specified attribute name, or null if
         not found.
Throws:
IllegalArgumentException - if the attribute name is invalid


"
Attributes,hashCode(),int,Returns the hash code value for this Map.,"

hashCode
public int hashCode()
Returns the hash code value for this Map.

Specified by:
hashCode in interface Map<Object,Object>
Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Attributes,isEmpty(),boolean,Returns true if this Map contains no attributes.,"

isEmpty
public boolean isEmpty()
Returns true if this Map contains no attributes.

Specified by:
isEmpty in interface Map<Object,Object>
Returns:
true if this map contains no key-value mappings


"
Attributes,keySet(),Set<Object>,Returns a Set view of the attribute names (keys) contained in this Map.,"

keySet
public Set<Object> keySet()
Returns a Set view of the attribute names (keys) contained in this Map.

Specified by:
keySet in interface Map<Object,Object>
Returns:
a set view of the keys contained in this map


"
Attributes,"put(Object name, Object value)",Object,Associates the specified value with the specified attribute name (key) in this Map.,"

put
public Object put(Object name,
                  Object value)
Associates the specified value with the specified attribute name
 (key) in this Map. If the Map previously contained a mapping for
 the attribute name, the old value is replaced.

Specified by:
put in interface Map<Object,Object>
Parameters:
name - the attribute name
value - the attribute value
Returns:
the previous value of the attribute, or null if none
Throws:
ClassCastException - if the name is not a Attributes.Name
            or the value is not a String


"
Attributes,"putAll(Map<?,?> attr)",void,Copies all of the attribute name-value mappings from the specified Attributes to this Map.,"

putAll
public void putAll(Map<?,?> attr)
Copies all of the attribute name-value mappings from the specified
 Attributes to this Map. Duplicate mappings will be replaced.

Specified by:
putAll in interface Map<Object,Object>
Parameters:
attr - the Attributes to be stored in this map
Throws:
ClassCastException - if attr is not an Attributes


"
Attributes,"putValue(String name, String value)",String,"Associates the specified value with the specified attribute name, specified as a String.","

putValue
public String putValue(String name,
                       String value)
Associates the specified value with the specified attribute name,
 specified as a String. The attributes name is case-insensitive.
 If the Map previously contained a mapping for the attribute name,
 the old value is replaced.
 
 This method is defined as:
 
      return (String)put(new Attributes.Name(name), value);
 

Parameters:
name - the attribute name as a string
value - the attribute value
Returns:
the previous value of the attribute, or null if none
Throws:
IllegalArgumentException - if the attribute name is invalid


"
Attributes,remove(Object name),Object,Removes the attribute with the specified name (key) from this Map.,"

remove
public Object remove(Object name)
Removes the attribute with the specified name (key) from this Map.
 Returns the previous attribute value, or null if none.

Specified by:
remove in interface Map<Object,Object>
Parameters:
name - attribute name
Returns:
the previous value of the attribute, or null if none


"
Attributes,size(),int,Returns the number of attributes in this Map.,"

size
public int size()
Returns the number of attributes in this Map.

Specified by:
size in interface Map<Object,Object>
Returns:
the number of key-value mappings in this map


"
Attributes,values(),Collection<Object>,Returns a Collection view of the attribute values contained in this Map.,"

values
public Collection<Object> values()
Returns a Collection view of the attribute values contained in this Map.

Specified by:
values in interface Map<Object,Object>
Returns:
a collection view of the values contained in this map


"
Attributes.Name,equals(Object o),boolean,Compares this attribute name to another for equality.,"

equals
public boolean equals(Object o)
Compares this attribute name to another for equality.

Overrides:
equals in class Object
Parameters:
o - the object to compare
Returns:
true if this attribute name is equal to the
         specified attribute object
See Also:
Object.hashCode(), 
HashMap


"
Attributes.Name,hashCode(),int,Computes the hash value for this attribute name.,"

hashCode
public int hashCode()
Computes the hash value for this attribute name.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Attributes.Name,toString(),String,Returns the attribute name as a String.,"

toString
public String toString()
Returns the attribute name as a String.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
JarEntry,getAttributes(),Attributes,"Returns the Manifest Attributes for this entry, or null if none.","

getAttributes
public Attributes getAttributes()
                         throws IOException
Returns the Manifest Attributes for this
 entry, or null if none.

Returns:
the Manifest Attributes for this
 entry, or null if none
Throws:
IOException - if an I/O error has occurred


"
JarEntry,getCertificates(),Certificate[],"Returns the Certificate objects for this entry, or null if none.","

getCertificates
public Certificate[] getCertificates()
Returns the Certificate objects for this entry, or
 null if none. This method can only be called once
 the JarEntry has been completely verified by reading
 from the entry input stream until the end of the stream has been
 reached. Otherwise, this method will return null.

 The returned certificate array comprises all the signer certificates
 that were used to verify this entry. Each signer certificate is
 followed by its supporting certificate chain (which may be empty).
 Each signer certificate and its supporting certificate chain are ordered
 bottom-to-top (i.e., with the signer certificate first and the (root)
 certificate authority last).

Returns:
the Certificate objects for this entry, or
 null if none.


"
JarEntry,getCodeSigners(),CodeSigner[],"Returns the CodeSigner objects for this entry, or null if none.","

getCodeSigners
public CodeSigner[] getCodeSigners()
Returns the CodeSigner objects for this entry, or
 null if none. This method can only be called once
 the JarEntry has been completely verified by reading
 from the entry input stream until the end of the stream has been
 reached. Otherwise, this method will return null.

 The returned array comprises all the code signers that have signed
 this entry.

Returns:
the CodeSigner objects for this entry, or
 null if none.
Since:
1.5


"
JarFile,entries(),Enumeration<JarEntry>,Returns an enumeration of the zip file entries.,"

entries
public Enumeration<JarEntry> entries()
Returns an enumeration of the zip file entries.

Overrides:
entries in class ZipFile
Returns:
an enumeration of the ZIP file entries


"
JarFile,getEntry(String name),ZipEntry,Returns the ZipEntry for the given entry name or null if not found.,"

getEntry
public ZipEntry getEntry(String name)
Returns the ZipEntry for the given entry name or
 null if not found.

Overrides:
getEntry in class ZipFile
Parameters:
name - the jar file entry name
Returns:
the ZipEntry for the given entry name or
         null if not found
Throws:
IllegalStateException - may be thrown if the jar file has been closed
See Also:
ZipEntry


"
JarFile,getInputStream(ZipEntry ze),InputStream,Returns an input stream for reading the contents of the specified zip file entry.,"

getInputStream
public InputStream getInputStream(ZipEntry ze)
                           throws IOException
Returns an input stream for reading the contents of the specified
 zip file entry.

Overrides:
getInputStream in class ZipFile
Parameters:
ze - the zip file entry
Returns:
an input stream for reading the contents of the specified
         zip file entry
Throws:
ZipException - if a zip file format error has occurred
IOException - if an I/O error has occurred
SecurityException - if any of the jar file entries
         are incorrectly signed.
IllegalStateException - may be thrown if the jar file has been closed


"
JarFile,getJarEntry(String name),JarEntry,Returns the JarEntry for the given entry name or null if not found.,"

getJarEntry
public JarEntry getJarEntry(String name)
Returns the JarEntry for the given entry name or
 null if not found.

Parameters:
name - the jar file entry name
Returns:
the JarEntry for the given entry name or
         null if not found.
Throws:
IllegalStateException - may be thrown if the jar file has been closed
See Also:
JarEntry


"
JarFile,getManifest(),Manifest,"Returns the jar file manifest, or null if none.","

getManifest
public Manifest getManifest()
                     throws IOException
Returns the jar file manifest, or null if none.

Returns:
the jar file manifest, or null if none
Throws:
IllegalStateException - may be thrown if the jar file has been closed
IOException - if an I/O error has occurred


"
JarFile,stream(),Stream<JarEntry>,Return an ordered Stream over the ZIP file entries.,"

stream
public Stream<JarEntry> stream()
Description copied from class: ZipFile
Return an ordered Stream over the ZIP file entries.
 Entries appear in the Stream in the order they appear in
 the central directory of the ZIP file.

Overrides:
stream in class ZipFile
Returns:
an ordered Stream of entries in this ZIP file


"
JarInputStream,createZipEntry(String name),protected ZipEntry,Creates a new JarEntry (ZipEntry) for the specified JAR file entry name.,"

createZipEntry
protected ZipEntry createZipEntry(String name)
Creates a new JarEntry (ZipEntry) for the
 specified JAR file entry name. The manifest attributes of
 the specified JAR file entry name will be copied to the new
 JarEntry.

Overrides:
createZipEntry in class ZipInputStream
Parameters:
name - the name of the JAR/ZIP file entry
Returns:
the JarEntry object just created


"
JarInputStream,getManifest(),Manifest,"Returns the Manifest for this JAR file, or null if none.","

getManifest
public Manifest getManifest()
Returns the Manifest for this JAR file, or
 null if none.

Returns:
the Manifest for this JAR file, or
         null if none.


"
JarInputStream,getNextEntry(),ZipEntry,Reads the next ZIP file entry and positions the stream at the beginning of the entry data.,"

getNextEntry
public ZipEntry getNextEntry()
                      throws IOException
Reads the next ZIP file entry and positions the stream at the
 beginning of the entry data. If verification has been enabled,
 any invalid signature detected while positioning the stream for
 the next entry will result in an exception.

Overrides:
getNextEntry in class ZipInputStream
Returns:
the next ZIP file entry, or null if there are no more entries
Throws:
ZipException - if a ZIP file error has occurred
IOException - if an I/O error has occurred
SecurityException - if any of the jar file entries
         are incorrectly signed.


"
JarInputStream,getNextJarEntry(),JarEntry,Reads the next JAR file entry and positions the stream at the beginning of the entry data.,"

getNextJarEntry
public JarEntry getNextJarEntry()
                         throws IOException
Reads the next JAR file entry and positions the stream at the
 beginning of the entry data. If verification has been enabled,
 any invalid signature detected while positioning the stream for
 the next entry will result in an exception.

Returns:
the next JAR file entry, or null if there are no more entries
Throws:
ZipException - if a ZIP file error has occurred
IOException - if an I/O error has occurred
SecurityException - if any of the jar file entries
         are incorrectly signed.


"
JarInputStream,"read(byte[] b, int off, int len)",int,Reads from the current JAR file entry into an array of bytes.,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads from the current JAR file entry into an array of bytes.
 If len is not zero, the method
 blocks until some input is available; otherwise, no
 bytes are read and 0 is returned.
 If verification has been enabled, any invalid signature
 on the current entry will be reported at some point before the
 end of the entry is reached.

Overrides:
read in class ZipInputStream
Parameters:
b - the buffer into which the data is read
off - the start offset in the destination array b
len - the maximum number of bytes to read
Returns:
the actual number of bytes read, or -1 if the end of the
         entry is reached
Throws:
NullPointerException - If b is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 b.length - off
ZipException - if a ZIP file error has occurred
IOException - if an I/O error has occurred
SecurityException - if any of the jar file entries
         are incorrectly signed.
See Also:
FilterInputStream.in


"
JarOutputStream,putNextEntry(ZipEntry ze),void,Begins writing a new JAR file entry and positions the stream to the start of the entry data.,"

putNextEntry
public void putNextEntry(ZipEntry ze)
                  throws IOException
Begins writing a new JAR file entry and positions the stream
 to the start of the entry data. This method will also close
 any previous entry. The default compression method will be
 used if no compression method was specified for the entry.
 The current time will be used if the entry has no set modification
 time.

Overrides:
putNextEntry in class ZipOutputStream
Parameters:
ze - the ZIP/JAR entry to be written
Throws:
ZipException - if a ZIP error has occurred
IOException - if an I/O error has occurred


"
Manifest,clear(),void,Clears the main Attributes as well as the entries in this Manifest.,"

clear
public void clear()
Clears the main Attributes as well as the entries in this Manifest.

"
Manifest,clone(),Object,Returns a shallow copy of this Manifest.,"

clone
public Object clone()
Returns a shallow copy of this Manifest.  The shallow copy is
 implemented as follows:
 
     public Object clone() { return new Manifest(this); }
 

Overrides:
clone in class Object
Returns:
a shallow copy of this Manifest
See Also:
Cloneable


"
Manifest,equals(Object o),boolean,Returns true if the specified Object is also a Manifest and has the same main Attributes and entries.,"

equals
public boolean equals(Object o)
Returns true if the specified Object is also a Manifest and has
 the same main Attributes and entries.

Overrides:
equals in class Object
Parameters:
o - the object to be compared
Returns:
true if the specified Object is also a Manifest and has
 the same main Attributes and entries
See Also:
Object.hashCode(), 
HashMap


"
Manifest,getAttributes(String name),Attributes,Returns the Attributes for the specified entry name.,"

getAttributes
public Attributes getAttributes(String name)
Returns the Attributes for the specified entry name.
 This method is defined as:
 
      return (Attributes)getEntries().get(name)
 
 Though null is a valid name, when
 getAttributes(null) is invoked on a Manifest
 obtained from a jar file, null will be returned.  While jar
 files themselves do not allow null-named attributes, it is
 possible to invoke getEntries() on a Manifest, and
 on that result, invoke put with a null key and an
 arbitrary value.  Subsequent invocations of
 getAttributes(null) will return the just-put
 value.
 
 Note that this method does not return the manifest's main attributes;
 see getMainAttributes().

Parameters:
name - entry name
Returns:
the Attributes for the specified entry name


"
Manifest,getEntries(),"Map<String,Attributes>",Returns a Map of the entries contained in this Manifest.,"

getEntries
public Map<String,Attributes> getEntries()
Returns a Map of the entries contained in this Manifest. Each entry
 is represented by a String name (key) and associated Attributes (value).
 The Map permits the null key, but no entry with a null key is
 created by read(java.io.InputStream), nor is such an entry written by using write(java.io.OutputStream).

Returns:
a Map of the entries contained in this Manifest


"
Manifest,getMainAttributes(),Attributes,Returns the main Attributes for the Manifest.,"

getMainAttributes
public Attributes getMainAttributes()
Returns the main Attributes for the Manifest.

Returns:
the main Attributes for the Manifest


"
Manifest,hashCode(),int,Returns the hash code for this Manifest.,"

hashCode
public int hashCode()
Returns the hash code for this Manifest.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Manifest,read(InputStream is),void,Reads the Manifest from the specified InputStream.,"

read
public void read(InputStream is)
          throws IOException
Reads the Manifest from the specified InputStream. The entry
 names and attributes read will be merged in with the current
 manifest entries.

Parameters:
is - the input stream
Throws:
IOException - if an I/O error has occurred


"
Manifest,write(OutputStream out),void,Writes the Manifest to the specified OutputStream.,"

write
public void write(OutputStream out)
           throws IOException
Writes the Manifest to the specified OutputStream.
 Attributes.Name.MANIFEST_VERSION must be set in
 MainAttributes prior to invoking this method.

Parameters:
out - the output stream
Throws:
IOException - if an I/O error has occurred
See Also:
getMainAttributes()


"
Pack200,newPacker(),static Pack200.Packer,Obtain new instance of a class that implements Packer.,"

newPacker
public static Pack200.Packer newPacker()
Obtain new instance of a class that implements Packer.
 
If the system property java.util.jar.Pack200.Packer
 is defined, then the value is taken to be the fully-qualified name
 of a concrete implementation class, which must implement Packer.
 This class is loaded and instantiated.  If this process fails
 then an unspecified error is thrown.
If an implementation has not been specified with the system
 property, then the system-default implementation class is instantiated,
 and the result is returned.

Note:  The returned object is not guaranteed to operate
 correctly if multiple threads use it at the same time.
 A multi-threaded application should either allocate multiple
 packer engines, or else serialize use of one engine with a lock.

Returns:
A newly allocated Packer engine.


"
Pack200,newUnpacker(),static Pack200.Unpacker,Obtain new instance of a class that implements Unpacker.,"

newUnpacker
public static Pack200.Unpacker newUnpacker()
Obtain new instance of a class that implements Unpacker.
 
If the system property java.util.jar.Pack200.Unpacker
 is defined, then the value is taken to be the fully-qualified
 name of a concrete implementation class, which must implement Unpacker.
 The class is loaded and instantiated.  If this process fails
 then an unspecified error is thrown.
If an implementation has not been specified with the
 system property, then the system-default implementation class
 is instantiated, and the result is returned.

Note:  The returned object is not guaranteed to operate
 correctly if multiple threads use it at the same time.
 A multi-threaded application should either allocate multiple
 unpacker engines, or else serialize use of one engine with a lock.

Returns:
A newly allocated Unpacker engine.


"
