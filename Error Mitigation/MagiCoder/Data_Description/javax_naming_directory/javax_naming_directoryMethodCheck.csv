Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,BasicAttribute,1,BasicAttribute(String name),False,,NULL
0,BasicAttribute,2,String getID(),True,Retrieves the id of this attribute.,"

getID
public String getID()
Description copied from interface: Attribute
Retrieves the id of this attribute.

Specified by:
getID in interface Attribute
Returns:
The id of this attribute. It cannot be null.


"
0,BasicAttribute,3,String getName(),False,,NULL
0,BasicAttribute,4,void add(Object value),False,,NULL
0,BasicAttribute,5,Enumeration<?> getAll(),False,,NULL
0,BasicAttribute,6,Object get(),True,Retrieves one of this attribute's values.,"

get
public Object get()
           throws NamingException
Retrieves one of this attribute's values.

 By default, the value returned is one of those passed to the
 constructor and/or manipulated using the add/replace/remove methods.
 A subclass may override this to retrieve the value dynamically
 from the directory.

Specified by:
get in interface Attribute
Returns:
A possibly null object representing one of
        the attribute's value. It is null if the attribute's value
        is null.
Throws:
NamingException - If a naming exception was encountered while retrieving
         the value.


"
0,BasicAttribute,7,Object get(int index),True,Retrieves the attribute value from the ordered list of attribute values.,"

get
public Object get(int ix)
           throws NamingException
Description copied from interface: Attribute
Retrieves the attribute value from the ordered list of attribute values.
 This method returns the value at the ix index of the list of
 attribute values.
 If the attribute values are unordered,
 this method returns the value that happens to be at that index.

Specified by:
get in interface Attribute
Parameters:
ix - The index of the value in the ordered list of attribute values.
 0 <= ix < size().
Returns:
The possibly null attribute value at index ix;
   null if the attribute value is null.
Throws:
NamingException - If a naming exception was encountered while
 retrieving the value.


"
0,BasicAttribute,8,int size(),True,Retrieves the number of values in this attribute.,"

size
public int size()
Description copied from interface: Attribute
Retrieves the number of values in this attribute.

Specified by:
size in interface Attribute
Returns:
The nonnegative number of values in this attribute.


"
0,BasicAttribute,9,boolean remove(Object value),True,Removes a specified value from this attribute.,"

remove
public boolean remove(Object attrval)
Removes a specified value from this attribute.

 By default, Object.equals() is used when comparing attrVal
 with this attribute's values except when attrVal is an array.
 For an array, each element of the array is checked using
 Object.equals().
 A subclass may use schema information to determine equality.

Specified by:
remove in interface Attribute
Parameters:
attrval - The possibly null value to remove from this attribute.
 If null, remove the attribute value that is null.
Returns:
true if the value was removed; false otherwise.


"
0,BasicAttribute,10,void removeAll(),False,,NULL
0,BasicAttribute,11,boolean contains(Object value),True,Determines whether a value is in this attribute.,"

contains
public boolean contains(Object attrVal)
Determines whether a value is in this attribute.

 By default,
 Object.equals() is used when comparing attrVal
 with this attribute's values except when attrVal is an array.
 For an array, each element of the array is checked using
 Object.equals().
 A subclass may use schema information to determine equality.

Specified by:
contains in interface Attribute
Parameters:
attrVal - The possibly null value to check. If null, check
  whether the attribute has an attribute value whose value is null.
Returns:
true if attrVal is one of this attribute's values; false otherwise.
See Also:
Object.equals(java.lang.Object), 
equals(java.lang.Object)


"
0,BasicAttribute,12,boolean containsAll(Collection<?> c),False,,NULL
0,BasicAttribute,13,boolean equals(Object o),True,Determines whether obj is equal to this attribute.,"

equals
public boolean equals(Object obj)
Determines whether obj is equal to this attribute.
 Two attributes are equal if their attribute-ids, syntaxes
 and values are equal.
 If the attribute values are unordered, the order that the values were added
 are irrelevant. If the attribute values are ordered, then the
 order the values must match.
 If obj is null or not an Attribute, false is returned.

 By default Object.equals() is used when comparing the attribute
 id and its values except when a value is an array. For an array,
 each element of the array is checked using Object.equals().
 A subclass may override this to make
 use of schema syntax information and matching rules,
 which define what it means for two attributes to be equal.
 How and whether a subclass makes
 use of the schema information is determined by the subclass.
 If a subclass overrides equals(), it should also override
 hashCode()
 such that two attributes that are equal have the same hash code.

Overrides:
equals in class Object
Parameters:
obj - The possibly null object to check.
Returns:
true if obj is equal to this attribute; false otherwise.
See Also:
hashCode(), 
contains(java.lang.Object)


"
0,BasicAttribute,14,int hashCode(),True,Calculates the hash code of this attribute.,"

hashCode
public int hashCode()
Calculates the hash code of this attribute.

 The hash code is computed by adding the hash code of
 the attribute's id and that of all of its values except for
 values that are arrays.
 For an array, the hash code of each element of the array is summed.
 If a subclass overrides hashCode(), it should override
 equals()
 as well so that two attributes that are equal have the same hash code.

Overrides:
hashCode in class Object
Returns:
an int representing the hash code of this attribute.
See Also:
equals(java.lang.Object)


"
0,BasicAttribute,15,String toString(),True,Generates the string representation of this attribute.,"

toString
public String toString()
Generates the string representation of this attribute.
 The string consists of the attribute's id and its values.
 This string is meant for debugging and not meant to be
 interpreted programmatically.

Overrides:
toString in class Object
Returns:
The non-null string representation of this attribute.


"
1,BasicAttributes,1,boolean add(E e),False,,NULL
1,BasicAttributes,2,boolean addAll(Collection<? extends E> c),False,,NULL
1,BasicAttributes,3,void clear(),False,,NULL
1,BasicAttributes,4,boolean contains(Object o),False,,NULL
1,BasicAttributes,5,boolean containsAll(Collection<?> c),False,,NULL
1,BasicAttributes,6,boolean equals(Object o),True,"Determines whether this BasicAttributes is equal to another Attributes Two Attributes are equal if they are both instances of Attributes, treat the case of attribute IDs the same way, and contain the same attributes.","

equals
public boolean equals(Object obj)
Determines whether this BasicAttributes is equal to another
 Attributes
 Two Attributes are equal if they are both instances of
 Attributes,
 treat the case of attribute IDs the same way, and contain the
 same attributes. Each Attribute in this BasicAttributes
 is checked for equality using Object.equals(), which may have
 be overridden by implementations of Attribute).
 If a subclass overrides equals(),
 it should override hashCode()
 as well so that two Attributes instances that are equal
 have the same hash code.

Overrides:
equals in class Object
Parameters:
obj - the possibly null object to compare against.
Returns:
true If obj is equal to this BasicAttributes.
See Also:
hashCode()


"
1,BasicAttributes,7,E get(int index),False,,NULL
1,BasicAttributes,8,int indexOf(Object o),False,,NULL
1,BasicAttributes,9,boolean isEmpty(),False,,NULL
1,BasicAttributes,10,Iterator<E> iterator(),False,,NULL
1,BasicAttributes,11,int lastIndexOf(Object o),False,,NULL
1,BasicAttributes,12,ListIterator<E> listIterator(),False,,NULL
1,BasicAttributes,13,ListIterator<E> listIterator(int index),False,,NULL
1,BasicAttributes,14,boolean remove(Object o),False,,NULL
1,BasicAttributes,15,E remove(int index),False,,NULL
1,BasicAttributes,16,boolean removeAll(Collection<?> c),False,,NULL
1,BasicAttributes,17,boolean retainAll(Collection<?> c),False,,NULL
1,BasicAttributes,18,"E set(int index, E element)",False,,NULL
1,BasicAttributes,19,int size(),True,Retrieves the number of attributes in the attribute set.,"

size
public int size()
Description copied from interface: Attributes
Retrieves the number of attributes in the attribute set.

Specified by:
size in interface Attributes
Returns:
The nonnegative number of attributes in this attribute set.


"
1,BasicAttributes,20,"List<E> subList(int fromIndex, int toIndex)",False,,NULL
1,BasicAttributes,21,Object[] toArray(),False,,NULL
1,BasicAttributes,22,<T> T[] toArray(T[] a),False,,NULL
1,BasicAttributes,23,String toString(),True,Generates the string representation of this attribute set.,"

toString
public String toString()
Generates the string representation of this attribute set.
 The string consists of each attribute identifier and the contents
 of each attribute. The contents of this string is useful
 for debugging and is not meant to be interpreted programmatically.

Overrides:
toString in class Object
Returns:
A non-null string listing the contents of this attribute set.


"
2,InitialDirContext,1,"InitialDirContext(Hashtable<?,?> environment)",False,,NULL
2,InitialDirContext,2,Object lookup(Name name),False,,NULL
2,InitialDirContext,3,void close(),False,,NULL
2,InitialDirContext,4,NamingEnumeration<NameClassPair> list(Name name),False,,NULL
2,InitialDirContext,5,"void rename(Name oldName, Name newName)",False,,NULL
3,ModificationItem,1,void setAttribute(Attribute attr),False,,NULL
3,ModificationItem,2,"void setAttribute(String name, byte[] value)",False,,NULL
3,ModificationItem,3,"void setAttribute(String name, String value)",False,,NULL
3,ModificationItem,4,"void setAttribute(String name, Object value)",False,,NULL
3,ModificationItem,5,"void setAttribute(String name, String[] values)",False,,NULL
3,ModificationItem,6,"void setAttribute(String name, byte[] values)",False,,NULL
3,ModificationItem,7,"void setAttribute(String name, Object values)",False,,NULL
3,ModificationItem,8,"void setAttribute(String name, boolean value)",False,,NULL
3,ModificationItem,9,"void setAttribute(String name, int value)",False,,NULL
3,ModificationItem,10,"void setAttribute(String name, long value)",False,,NULL
3,ModificationItem,11,"void setAttribute(String name, String value, boolean isSingleValued)",False,,NULL
3,ModificationItem,12,"void setAttribute(String name, byte[] value, boolean isSingleValued)",False,,NULL
3,ModificationItem,13,"void setAttribute(String name, Object value, boolean isSingleValued)",False,,NULL
3,ModificationItem,14,"void setAttribute(String name, String[] values, boolean isSingleValued)",False,,NULL
3,ModificationItem,15,"void setAttribute(String name, byte[] values, boolean isSingleValued)",False,,NULL
3,ModificationItem,16,"void setAttribute(String name, Object values, boolean isSingleValued)",False,,NULL
3,ModificationItem,17,"void setAttribute(String name, boolean value, boolean isSingleValued)",False,,NULL
3,ModificationItem,18,"void setAttribute(String name, int value, boolean isSingleValued)",False,,NULL
3,ModificationItem,19,"void setAttribute(String name, long value, boolean isSingleValued)",False,,NULL
3,ModificationItem,20,"void setAttribute(String name, String value, int type)",False,,NULL
3,ModificationItem,21,"void setAttribute(String name, byte[] value, int type)",False,,NULL
3,ModificationItem,22,"void setAttribute(String name, Object value, int type)",False,,NULL
3,ModificationItem,23,"void setAttribute(String name, String[] values, int type)",False,,NULL
3,ModificationItem,24,"void setAttribute(String name, byte[] values, int type)",False,,NULL
3,ModificationItem,25,"void setAttribute(String name, Object values, int type)",False,,NULL
3,ModificationItem,26,"void setAttribute(String name, boolean value, int type)",False,,NULL
3,ModificationItem,27,"void setAttribute(String name, int value, int type)",False,,NULL
3,ModificationItem,28,"void setAttribute(String name, long value, int type)",False,,NULL
3,ModificationItem,29,"void setAttribute(String name, String value, int type, boolean isSingleValued)",False,,NULL
3,ModificationItem,30,"void setAttribute(String name, byte[] value, int type, boolean isSingleValued)",False,,NULL
3,ModificationItem,31,"void setAttribute(String name, Object value, int type, boolean isSingleValued)",False,,NULL
3,ModificationItem,32,"void setAttribute(String name, String[] values, int type, boolean isSingleValued)",False,,NULL
3,ModificationItem,33,"void setAttribute(String name, byte[] values, int type, boolean isSingleValued)",False,,NULL
3,ModificationItem,34,"void setAttribute(String name, Object values, int type, boolean isSingleValued)",False,,NULL
3,ModificationItem,35,"void setAttribute(String name, boolean value, int type, boolean isSingleValued)",False,,NULL
3,ModificationItem,36,"void setAttribute(String name, int value, int type, boolean isSingleValued)",False,,NULL
3,ModificationItem,37,"void setAttribute(String name, long value, int type, boolean isSingleValued)",False,,NULL
3,ModificationItem,38,"void setAttribute(String name, String value, int type, int operation)",False,,NULL
3,ModificationItem,39,"void setAttribute(String name, byte[] value, int type, int operation)",False,,NULL
3,ModificationItem,40,"void setAttribute(String name, Object value, int type, int operation)",False,,NULL
3,ModificationItem,41,"void setAttribute(String name, String[] values, int type, int operation)",False,,NULL
3,ModificationItem,42,"void setAttribute(String name, byte[] values, int type, int operation)",False,,NULL
3,ModificationItem,43,"void setAttribute(String name, Object values, int type, int operation)",False,,NULL
3,ModificationItem,44,"void setAttribute(String name, boolean value, int type, int operation)",False,,NULL
3,ModificationItem,45,"void setAttribute(String name, int value, int type, int operation)",False,,NULL
3,ModificationItem,46,"void setAttribute(String name, long value, int type, int operation)",False,,NULL
3,ModificationItem,47,"void setAttribute(String name, String value, int type, int operation, boolean isSingleValued)",False,,NULL
3,ModificationItem,48,"void setAttribute(String name, byte[] value, int type, int operation, boolean isSingleValued)",False,,NULL
3,ModificationItem,49,"void setAttribute(String name, Object value, int type, int operation, boolean isSingleValued)",False,,NULL
3,ModificationItem,50,"void setAttribute(String name, String[] values, int type, int operation, boolean isSingleValued)",False,,NULL
3,ModificationItem,51,"void setAttribute(String name, byte[] values, int type, int operation, boolean isSingleValued)",False,,NULL
3,ModificationItem,52,"void setAttribute(String name, Object values, int type, int operation, boolean isSingleValued)",False,,NULL
3,ModificationItem,53,"void setAttribute(String name, boolean value, int type, int operation, boolean isSingleValued)",False,,NULL
3,ModificationItem,54,"void setAttribute(String name, int value, int type, int operation, boolean isSingleValued)",False,,NULL
3,ModificationItem,55,"void setAttribute(String name, long value, int type, int operation, boolean isSingleValued)",False,,NULL
4,SearchControls,1,SearchControls(),False,,NULL
4,SearchControls,2,setSearchScope(int scope),False,,NULL
4,SearchControls,3,setReturningAttributes(String[] attrIDs),False,,NULL
4,SearchControls,4,setReturningObjectClass(String className),False,,NULL
4,SearchControls,5,setReturningRefs(boolean returnRefs),False,,NULL
5,SearchResult,1,getAttributes(),False,,NULL
5,SearchResult,2,getName(),False,,NULL
5,SearchResult,3,getObject(),False,,NULL
5,SearchResult,4,getClass(),False,,NULL
5,SearchResult,5,toString(),False,,NULL
