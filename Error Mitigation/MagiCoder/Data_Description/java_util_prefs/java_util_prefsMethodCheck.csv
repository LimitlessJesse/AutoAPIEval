Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,AbstractPreferences,1,boolean nodeExists(String key),True,Implements the nodeExists method as per the specification in Preferences.nodeExists(String).,"

nodeExists
public boolean nodeExists(String path)
                   throws BackingStoreException
Implements the nodeExists method as per the specification in
 Preferences.nodeExists(String).

 This implementation is very similar to node(String),
 except that getChild(String) is used instead of childSpi(String).

Specified by:
nodeExists in class Preferences
Parameters:
path - the path name of the node whose existence is to be checked.
Returns:
true if the specified node exists.
Throws:
BackingStoreException - if this operation cannot be completed
         due to a failure in the backing store, or inability to
         communicate with it.
IllegalArgumentException - if the path name is invalid (i.e.,
         it contains multiple consecutive slash characters, or ends
         with a slash character and is more than one character long).
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method and
         pathname is not the empty string ("""").


"
0,AbstractPreferences,2,"boolean getBoolean(String key, boolean def)",True,"Implements the getBoolean method as per the specification in Preferences.getBoolean(String,boolean).","

getBoolean
public boolean getBoolean(String key,
                          boolean def)
Implements the getBoolean method as per the specification in
 Preferences.getBoolean(String,boolean).

 This implementation invokes get(key,
 null).  If the return value is non-null, it is compared with
 ""true"" using String.equalsIgnoreCase(String).  If the
 comparison returns true, this invocation returns
 true.  Otherwise, the original return value is compared with
 ""false"", again using String.equalsIgnoreCase(String).
 If the comparison returns true, this invocation returns
 false.  Otherwise, this invocation returns def.

Specified by:
getBoolean in class Preferences
Parameters:
key - key whose associated value is to be returned as a boolean.
def - the value to be returned in the event that this
        preference node has no value associated with key
        or the associated value cannot be interpreted as a boolean.
Returns:
the boolean value represented by the string associated with
         key in this preference node, or def if the
         associated value does not exist or cannot be interpreted as
         a boolean.
Throws:
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
NullPointerException - if key is null.
See Also:
Preferences.get(String,String), 
Preferences.putBoolean(String,boolean)


"
0,AbstractPreferences,3,"void putBoolean(String key, boolean value)",True,"Implements the putBoolean method as per the specification in Preferences.putBoolean(String,boolean).","

putBoolean
public void putBoolean(String key,
                       boolean value)
Implements the putBoolean method as per the specification in
 Preferences.putBoolean(String,boolean).

 This implementation translates value to a string with
 String.valueOf(boolean) and invokes put(String,String)
 on the result.

Specified by:
putBoolean in class Preferences
Parameters:
key - key with which the string form of value is to be associated.
value - value whose string form is to be associated with key.
Throws:
NullPointerException - if key is null.
IllegalArgumentException - if key.length() exceeds
         MAX_KEY_LENGTH.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
See Also:
Preferences.getBoolean(String,boolean), 
Preferences.get(String,String)


"
0,AbstractPreferences,4,"String get(String key, String def)",True,"Implements the get method as per the specification in Preferences.get(String,String).","

get
public String get(String key,
                  String def)
Implements the get method as per the specification in
 Preferences.get(String,String).

 This implementation first checks to see if key is
 null throwing a NullPointerException if this is
 the case.  Then it obtains this preference node's lock,
 checks that the node has not been removed, invokes getSpi(String), and returns the result, unless the getSpi
 invocation returns null or throws an exception, in which case
 this invocation returns def.

Specified by:
get in class Preferences
Parameters:
key - key whose associated value is to be returned.
def - the value to be returned in the event that this
        preference node has no value associated with key.
Returns:
the value associated with key, or def
         if no value is associated with key.
Throws:
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
NullPointerException - if key is null.  (A
         null default is permitted.)


"
0,AbstractPreferences,5,"void put(String key, String value)",True,"Implements the put method as per the specification in Preferences.put(String,String).","

put
public void put(String key,
                String value)
Implements the put method as per the specification in
 Preferences.put(String,String).

 This implementation checks that the key and value are legal,
 obtains this preference node's lock, checks that the node
 has not been removed, invokes putSpi(String,String), and if
 there are any preference change listeners, enqueues a notification
 event for processing by the event dispatch thread.

Specified by:
put in class Preferences
Parameters:
key - key with which the specified value is to be associated.
value - value to be associated with the specified key.
Throws:
NullPointerException - if key or value is null.
IllegalArgumentException - if key.length() exceeds
       MAX_KEY_LENGTH or if value.length exceeds
       MAX_VALUE_LENGTH.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.


"
1,NodeChangeEvent,1,NodeChangeEvent(NodeChangeEvent evt),False,,NULL
1,NodeChangeEvent,2,"NodeChangeEvent(Object source, int id)",False,,NULL
1,NodeChangeEvent,3,int getChildCount(),False,,NULL
1,NodeChangeEvent,4,Node getChild(int index),False,,NULL
1,NodeChangeEvent,5,int getChildIndex(Node node),False,,NULL
2,PreferenceChangeEvent,1,"PreferenceChangeEvent(Preferences node, String key, Object oldValue, Object newValue)",False,,NULL
2,PreferenceChangeEvent,2,Preferences getNode(),True,Returns the preference node that emitted the event.,"

getNode
public Preferences getNode()
Returns the preference node that emitted the event.

Returns:
The preference node that emitted the event.


"
2,PreferenceChangeEvent,3,String getKey(),True,Returns the key of the preference that was changed.,"

getKey
public String getKey()
Returns the key of the preference that was changed.

Returns:
The key of the preference that was changed.


"
2,PreferenceChangeEvent,4,Object getOldValue(),False,,NULL
2,PreferenceChangeEvent,5,Object getNewValue(),False,,NULL
3,Preferences,1,Preferences userRoot(),True,Returns the root preference node for the calling user.,"

userRoot
public static Preferences userRoot()
Returns the root preference node for the calling user.

Returns:
the root preference node for the calling user.
Throws:
SecurityException - If a security manager is present and
         it denies RuntimePermission(""preferences"").
See Also:
RuntimePermission


"
3,Preferences,2,Preferences systemRoot(),True,Returns the root preference node for the system.,"

systemRoot
public static Preferences systemRoot()
Returns the root preference node for the system.

Returns:
the root preference node for the system.
Throws:
SecurityException - If a security manager is present and
         it denies RuntimePermission(""preferences"").
See Also:
RuntimePermission


"
3,Preferences,3,Preferences node(String path),True,"Returns the named preference node in the same tree as this node, creating it and any of its ancestors if they do not already exist.","

node
public abstract Preferences node(String pathName)
Returns the named preference node in the same tree as this node,
 creating it and any of its ancestors if they do not already exist.
 Accepts a relative or absolute path name.  Relative path names
 (which do not begin with the slash character ('/')) are
 interpreted relative to this preference node.

 If the returned node did not exist prior to this call, this node and
 any ancestors that were created by this call are not guaranteed
 to become permanent until the flush method is called on
 the returned node (or one of its ancestors or descendants).

Parameters:
pathName - the path name of the preference node to return.
Returns:
the specified preference node.
Throws:
IllegalArgumentException - if the path name is invalid (i.e.,
         it contains multiple consecutive slash characters, or ends
         with a slash character and is more than one character long).
NullPointerException - if path name is null.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
See Also:
flush()


"
3,Preferences,4,"void put(String key, String value)",True,Associates the specified value with the specified key in this preference node.,"

put
public abstract void put(String key,
                         String value)
Associates the specified value with the specified key in this
 preference node.

Parameters:
key - key with which the specified value is to be associated.
value - value to be associated with the specified key.
Throws:
NullPointerException - if key or value is null.
IllegalArgumentException - if key.length() exceeds
       MAX_KEY_LENGTH or if value.length exceeds
       MAX_VALUE_LENGTH.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.


"
3,Preferences,5,"String get(String key, String def)",True,Returns the value associated with the specified key in this preference node.,"

get
public abstract String get(String key,
                           String def)
Returns the value associated with the specified key in this preference
 node.  Returns the specified default if there is no value associated
 with the key, or the backing store is inaccessible.

 Some implementations may store default values in their backing
 stores.  If there is no value associated with the specified key
 but there is such a stored default, it is returned in
 preference to the specified default.

Parameters:
key - key whose associated value is to be returned.
def - the value to be returned in the event that this
        preference node has no value associated with key.
Returns:
the value associated with key, or def
         if no value is associated with key, or the backing
         store is inaccessible.
Throws:
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
NullPointerException - if key is null.  (A
         null value for def is permitted.)


"
