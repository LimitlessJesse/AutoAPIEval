ClassName,Method,Return Type,Description,Full Description
AbstractPreferences,absolutePath(),String,Implements the absolutePath method as per the specification in Preferences.absolutePath().,"

absolutePath
public String absolutePath()
Implements the absolutePath method as per the specification in
 Preferences.absolutePath().

 This implementation merely returns the absolute path name that
 was computed at the time that this node was constructed (based on
 the name that was passed to this node's constructor, and the names
 that were passed to this node's ancestors' constructors).

Specified by:
absolutePath in class Preferences
Returns:
this preference node's absolute path name.


"
AbstractPreferences,addNodeChangeListener(NodeChangeListener ncl),void,Registers the specified listener to receive node change events for this node.,"

addNodeChangeListener
public void addNodeChangeListener(NodeChangeListener ncl)
Description copied from class: Preferences
Registers the specified listener to receive node change events
 for this node.  A node change event is generated when a child node is
 added to or removed from this node.  (A single Preferences.removeNode()
 invocation results in multiple node change events, one for every
 node in the subtree rooted at the removed node.)

 Events are only guaranteed for changes made within the same JVM
 as the registered listener, though some implementations may generate
 events for changes made outside this JVM.  Events may be generated
 before the changes have become permanent.  Events are not generated
 when indirect descendants of this node are added or removed; a
 caller desiring such events must register with each descendant.

 Few guarantees can be made regarding node creation.  Because nodes
 are created implicitly upon access, it may not be feasible for an
 implementation to determine whether a child node existed in the backing
 store prior to access (for example, because the backing store is
 unreachable or cached information is out of date).  Under these
 circumstances, implementations are neither required to generate node
 change events nor prohibited from doing so.

Specified by:
addNodeChangeListener in class Preferences
Parameters:
ncl - The NodeChangeListener to add.
See Also:
Preferences.removeNodeChangeListener(NodeChangeListener), 
Preferences.addPreferenceChangeListener(PreferenceChangeListener)


"
AbstractPreferences,addPreferenceChangeListener(PreferenceChangeListener pcl),void,Registers the specified listener to receive preference change events for this preference node.,"

addPreferenceChangeListener
public void addPreferenceChangeListener(PreferenceChangeListener pcl)
Description copied from class: Preferences
Registers the specified listener to receive preference change
 events for this preference node.  A preference change event is
 generated when a preference is added to this node, removed from this
 node, or when the value associated with a preference is changed.
 (Preference change events are not generated by the Preferences.removeNode() method, which generates a node change event.
 Preference change events are generated by the clear
 method.)

 Events are only guaranteed for changes made within the same JVM
 as the registered listener, though some implementations may generate
 events for changes made outside this JVM.  Events may be generated
 before the changes have been made persistent.  Events are not generated
 when preferences are modified in descendants of this node; a caller
 desiring such events must register with each descendant.

Specified by:
addPreferenceChangeListener in class Preferences
Parameters:
pcl - The preference change listener to add.
See Also:
Preferences.removePreferenceChangeListener(PreferenceChangeListener), 
Preferences.addNodeChangeListener(NodeChangeListener)


"
AbstractPreferences,cachedChildren(),protected AbstractPreferences[],Returns all known unremoved children of this node.,"

cachedChildren
protected final AbstractPreferences[] cachedChildren()
Returns all known unremoved children of this node.

Returns:
all known unremoved children of this node.


"
AbstractPreferences,childrenNames(),String[],Implements the children method as per the specification in Preferences.childrenNames().,"

childrenNames
public String[] childrenNames()
                       throws BackingStoreException
Implements the children method as per the specification in
 Preferences.childrenNames().

 This implementation obtains this preference node's lock, checks that
 the node has not been removed, constructs a TreeSet initialized
 to the names of children already cached (the children in this node's
 ""child-cache""), invokes childrenNamesSpi(), and adds all of the
 returned child-names into the set.  The elements of the tree set are
 dumped into a String array using the toArray method,
 and this array is returned.

Specified by:
childrenNames in class Preferences
Returns:
the names of the children of this preference node.
Throws:
BackingStoreException - if this operation cannot be completed
         due to a failure in the backing store, or inability to
         communicate with it.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
See Also:
cachedChildren()


"
AbstractPreferences,childrenNamesSpi(),protected abstract String[],Returns the names of the children of this preference node.,"

childrenNamesSpi
protected abstract String[] childrenNamesSpi()
                                      throws BackingStoreException
Returns the names of the children of this preference node.  (The
 returned array will be of size zero if this node has no children.)
 This method need not return the names of any nodes already cached,
 but may do so without harm.

 This method is invoked with the lock on this node held.

 If this node throws a BackingStoreException, the exception
 will propagate out beyond the enclosing childrenNames()
 invocation.

Returns:
an array containing the names of the children of this
         preference node.
Throws:
BackingStoreException - if this operation cannot be completed
         due to a failure in the backing store, or inability to
         communicate with it.


"
AbstractPreferences,childSpi(String name),protected abstract AbstractPreferences,"Returns the named child of this preference node, creating it if it does not already exist.","

childSpi
protected abstract AbstractPreferences childSpi(String name)
Returns the named child of this preference node, creating it if it does
 not already exist.  It is guaranteed that name is non-null,
 non-empty, does not contain the slash character ('/'), and is no longer
 than Preferences.MAX_NAME_LENGTH characters.  Also, it is guaranteed that
 this node has not been removed.  (The implementor needn't check for any
 of these things.)

 Finally, it is guaranteed that the named node has not been returned
 by a previous invocation of this method or getChild(String)
 after the last time that it was removed.  In other words, a cached
 value will always be used in preference to invoking this method.
 Subclasses need not maintain their own cache of previously returned
 children.

 The implementer must ensure that the returned node has not been
 removed.  If a like-named child of this node was previously removed, the
 implementer must return a newly constructed AbstractPreferences
 node; once removed, an AbstractPreferences node
 cannot be ""resuscitated.""

 If this method causes a node to be created, this node is not
 guaranteed to be persistent until the flush method is
 invoked on this node or one of its ancestors (or descendants).

 This method is invoked with the lock on this node held.

Parameters:
name - The name of the child node to return, relative to
        this preference node.
Returns:
The named child node.


"
AbstractPreferences,clear(),void,Implements the clear method as per the specification in Preferences.clear().,"

clear
public void clear()
           throws BackingStoreException
Implements the clear method as per the specification in
 Preferences.clear().

 This implementation obtains this preference node's lock,
 invokes keys() to obtain an array of keys, and
 iterates over the array invoking remove(String) on each key.

Specified by:
clear in class Preferences
Throws:
BackingStoreException - if this operation cannot be completed
         due to a failure in the backing store, or inability to
         communicate with it.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
See Also:
Preferences.removeNode()


"
AbstractPreferences,exportNode(OutputStream os),void,Implements the exportNode method as per the specification in Preferences.exportNode(OutputStream).,"

exportNode
public void exportNode(OutputStream os)
                throws IOException,
                       BackingStoreException
Implements the exportNode method as per the specification in
 Preferences.exportNode(OutputStream).

Specified by:
exportNode in class Preferences
Parameters:
os - the output stream on which to emit the XML document.
Throws:
IOException - if writing to the specified output stream
         results in an IOException.
BackingStoreException - if preference data cannot be read from
         backing store.
See Also:
Preferences.importPreferences(InputStream)


"
AbstractPreferences,exportSubtree(OutputStream os),void,Implements the exportSubtree method as per the specification in Preferences.exportSubtree(OutputStream).,"

exportSubtree
public void exportSubtree(OutputStream os)
                   throws IOException,
                          BackingStoreException
Implements the exportSubtree method as per the specification in
 Preferences.exportSubtree(OutputStream).

Specified by:
exportSubtree in class Preferences
Parameters:
os - the output stream on which to emit the XML document.
Throws:
IOException - if writing to the specified output stream
         results in an IOException.
BackingStoreException - if preference data cannot be read from
         backing store.
See Also:
Preferences.importPreferences(InputStream), 
Preferences.exportNode(OutputStream)


"
AbstractPreferences,flush(),void,Implements the flush method as per the specification in Preferences.flush().,"

flush
public void flush()
           throws BackingStoreException
Implements the flush method as per the specification in
 Preferences.flush().

 This implementation calls a recursive helper method that locks this
 node, invokes flushSpi() on it, unlocks this node, and recursively
 invokes this method on each ""cached child.""  A cached child is a child
 of this node that has been created in this VM and not subsequently
 removed.  In effect, this method does a depth first traversal of the
 ""cached subtree"" rooted at this node, calling flushSpi() on each node in
 the subTree while only that node is locked. Note that flushSpi() is
 invoked top-down.

  If this method is invoked on a node that has been removed with
 the removeNode() method, flushSpi() is invoked on this node,
 but not on others.

Specified by:
flush in class Preferences
Throws:
BackingStoreException - if this operation cannot be completed
         due to a failure in the backing store, or inability to
         communicate with it.
See Also:
flush()


"
AbstractPreferences,flushSpi(),protected abstract void,This method is invoked with this node locked.,"

flushSpi
protected abstract void flushSpi()
                          throws BackingStoreException
This method is invoked with this node locked.  The contract of this
 method is to force any cached changes in the contents of this
 preference node to the backing store, guaranteeing their persistence.
 (It is perfectly possible that this node does not exist on the backing
 store, either because it has been deleted by another VM, or because it
 has not yet been created.)  Note that this method should not
 flush the preferences in any subnodes of this node.  If the backing
 store naturally flushes an entire subtree at once, the implementer is
 encouraged to override flush(), rather than merely overriding this
 method.

 If this node throws a BackingStoreException, the exception
 will propagate out beyond the enclosing flush() invocation.

Throws:
BackingStoreException - if this operation cannot be completed
         due to a failure in the backing store, or inability to
         communicate with it.


"
AbstractPreferences,"get(String key, String def)",String,"Implements the get method as per the specification in Preferences.get(String,String).","

get
public String get(String key,
                  String def)
Implements the get method as per the specification in
 Preferences.get(String,String).

 This implementation first checks to see if key is
 null throwing a NullPointerException if this is
 the case.  Then it obtains this preference node's lock,
 checks that the node has not been removed, invokes getSpi(String), and returns the result, unless the getSpi
 invocation returns null or throws an exception, in which case
 this invocation returns def.

Specified by:
get in class Preferences
Parameters:
key - key whose associated value is to be returned.
def - the value to be returned in the event that this
        preference node has no value associated with key.
Returns:
the value associated with key, or def
         if no value is associated with key.
Throws:
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
NullPointerException - if key is null.  (A
         null default is permitted.)


"
AbstractPreferences,"getBoolean(String key, boolean def)",boolean,"Implements the getBoolean method as per the specification in Preferences.getBoolean(String,boolean).","

getBoolean
public boolean getBoolean(String key,
                          boolean def)
Implements the getBoolean method as per the specification in
 Preferences.getBoolean(String,boolean).

 This implementation invokes get(key,
 null).  If the return value is non-null, it is compared with
 ""true"" using String.equalsIgnoreCase(String).  If the
 comparison returns true, this invocation returns
 true.  Otherwise, the original return value is compared with
 ""false"", again using String.equalsIgnoreCase(String).
 If the comparison returns true, this invocation returns
 false.  Otherwise, this invocation returns def.

Specified by:
getBoolean in class Preferences
Parameters:
key - key whose associated value is to be returned as a boolean.
def - the value to be returned in the event that this
        preference node has no value associated with key
        or the associated value cannot be interpreted as a boolean.
Returns:
the boolean value represented by the string associated with
         key in this preference node, or def if the
         associated value does not exist or cannot be interpreted as
         a boolean.
Throws:
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
NullPointerException - if key is null.
See Also:
Preferences.get(String,String), 
Preferences.putBoolean(String,boolean)


"
AbstractPreferences,"getByteArray(String key, byte[] def)",byte[],"Implements the getByteArray method as per the specification in Preferences.getByteArray(String,byte[]).","

getByteArray
public byte[] getByteArray(String key,
                           byte[] def)
Implements the getByteArray method as per the specification in
 Preferences.getByteArray(String,byte[]).

Specified by:
getByteArray in class Preferences
Parameters:
key - key whose associated value is to be returned as a byte array.
def - the value to be returned in the event that this
        preference node has no value associated with key
        or the associated value cannot be interpreted as a byte array.
Returns:
the byte array value represented by the string associated with
         key in this preference node, or def if the
         associated value does not exist or cannot be interpreted as
         a byte array.
Throws:
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
NullPointerException - if key is null.  (A
         null value for def is permitted.)
See Also:
Preferences.get(String,String), 
Preferences.putByteArray(String,byte[])


"
AbstractPreferences,getChild(String nodeName),protected AbstractPreferences,"Returns the named child if it exists, or null if it does not.","

getChild
protected AbstractPreferences getChild(String nodeName)
                                throws BackingStoreException
Returns the named child if it exists, or null if it does not.
 It is guaranteed that nodeName is non-null, non-empty,
 does not contain the slash character ('/'), and is no longer than
 Preferences.MAX_NAME_LENGTH characters.  Also, it is guaranteed
 that this node has not been removed.  (The implementor needn't check
 for any of these things if he chooses to override this method.)

 Finally, it is guaranteed that the named node has not been returned
 by a previous invocation of this method or childSpi(java.lang.String) after the
 last time that it was removed.  In other words, a cached value will
 always be used in preference to invoking this method.  (The implementor
 needn't maintain his own cache of previously returned children if he
 chooses to override this method.)

 This implementation obtains this preference node's lock, invokes
 childrenNames() to get an array of the names of this node's
 children, and iterates over the array comparing the name of each child
 with the specified node name.  If a child node has the correct name,
 the childSpi(String) method is invoked and the resulting
 node is returned.  If the iteration completes without finding the
 specified name, null is returned.

Parameters:
nodeName - name of the child to be searched for.
Returns:
the named child if it exists, or null if it does not.
Throws:
BackingStoreException - if this operation cannot be completed
         due to a failure in the backing store, or inability to
         communicate with it.


"
AbstractPreferences,"getDouble(String key, double def)",double,"Implements the getDouble method as per the specification in Preferences.getDouble(String,double).","

getDouble
public double getDouble(String key,
                        double def)
Implements the getDouble method as per the specification in
 Preferences.getDouble(String,double).

 This implementation invokes get(key,
 null).  If the return value is non-null, the implementation
 attempts to translate it to an double with
 Double.parseDouble(String).  If the attempt succeeds, the return
 value is returned by this method.  Otherwise, def is returned.

Specified by:
getDouble in class Preferences
Parameters:
key - key whose associated value is to be returned as a double.
def - the value to be returned in the event that this
        preference node has no value associated with key
        or the associated value cannot be interpreted as a double.
Returns:
the double value represented by the string associated with
         key in this preference node, or def if the
         associated value does not exist or cannot be interpreted as
         a double.
Throws:
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
NullPointerException - if key is null.
See Also:
Preferences.putDouble(String,double), 
Preferences.get(String,String)


"
AbstractPreferences,"getFloat(String key, float def)",float,"Implements the getFloat method as per the specification in Preferences.getFloat(String,float).","

getFloat
public float getFloat(String key,
                      float def)
Implements the getFloat method as per the specification in
 Preferences.getFloat(String,float).

 This implementation invokes get(key,
 null).  If the return value is non-null, the implementation
 attempts to translate it to an float with
 Float.parseFloat(String).  If the attempt succeeds, the return
 value is returned by this method.  Otherwise, def is returned.

Specified by:
getFloat in class Preferences
Parameters:
key - key whose associated value is to be returned as a float.
def - the value to be returned in the event that this
        preference node has no value associated with key
        or the associated value cannot be interpreted as a float.
Returns:
the float value represented by the string associated with
         key in this preference node, or def if the
         associated value does not exist or cannot be interpreted as
         a float.
Throws:
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
NullPointerException - if key is null.
See Also:
Preferences.putFloat(String,float), 
Preferences.get(String,String)


"
AbstractPreferences,"getInt(String key, int def)",int,"Implements the getInt method as per the specification in Preferences.getInt(String,int).","

getInt
public int getInt(String key,
                  int def)
Implements the getInt method as per the specification in
 Preferences.getInt(String,int).

 This implementation invokes get(key,
 null).  If the return value is non-null, the implementation
 attempts to translate it to an int with
 Integer.parseInt(String).  If the attempt succeeds, the return
 value is returned by this method.  Otherwise, def is returned.

Specified by:
getInt in class Preferences
Parameters:
key - key whose associated value is to be returned as an int.
def - the value to be returned in the event that this
        preference node has no value associated with key
        or the associated value cannot be interpreted as an int.
Returns:
the int value represented by the string associated with
         key in this preference node, or def if the
         associated value does not exist or cannot be interpreted as
         an int.
Throws:
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
NullPointerException - if key is null.
See Also:
Preferences.putInt(String,int), 
Preferences.get(String,String)


"
AbstractPreferences,"getLong(String key, long def)",long,"Implements the getLong method as per the specification in Preferences.getLong(String,long).","

getLong
public long getLong(String key,
                    long def)
Implements the getLong method as per the specification in
 Preferences.getLong(String,long).

 This implementation invokes get(key,
 null).  If the return value is non-null, the implementation
 attempts to translate it to a long with
 Long.parseLong(String).  If the attempt succeeds, the return
 value is returned by this method.  Otherwise, def is returned.

Specified by:
getLong in class Preferences
Parameters:
key - key whose associated value is to be returned as a long.
def - the value to be returned in the event that this
        preference node has no value associated with key
        or the associated value cannot be interpreted as a long.
Returns:
the long value represented by the string associated with
         key in this preference node, or def if the
         associated value does not exist or cannot be interpreted as
         a long.
Throws:
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
NullPointerException - if key is null.
See Also:
Preferences.putLong(String,long), 
Preferences.get(String,String)


"
AbstractPreferences,getSpi(String key),protected abstract String,"Return the value associated with the specified key at this preference node, or null if there is no association for this key, or the association cannot be determined at this time.","

getSpi
protected abstract String getSpi(String key)
Return the value associated with the specified key at this preference
 node, or null if there is no association for this key, or the
 association cannot be determined at this time.  It is guaranteed that
 key is non-null.  Also, it is guaranteed that this node has
 not been removed.  (The implementor needn't check for either of these
 things.)

  Generally speaking, this method should not throw an exception
 under any circumstances.  If, however, if it does throw an exception,
 the exception will be intercepted and treated as a null
 return value.

 This method is invoked with the lock on this node held.

Parameters:
key - the key
Returns:
the value associated with the specified key at this preference
          node, or null if there is no association for this
          key, or the association cannot be determined at this time.


"
AbstractPreferences,isRemoved(),protected boolean,Returns true iff this node (or an ancestor) has been removed with the removeNode() method.,"

isRemoved
protected boolean isRemoved()
Returns true iff this node (or an ancestor) has been
 removed with the removeNode() method.  This method
 locks this node prior to returning the contents of the private
 field used to track this state.

Returns:
true iff this node (or an ancestor) has been
       removed with the removeNode() method.


"
AbstractPreferences,isUserNode(),boolean,Implements the isUserNode method as per the specification in Preferences.isUserNode().,"

isUserNode
public boolean isUserNode()
Implements the isUserNode method as per the specification in
 Preferences.isUserNode().

 This implementation compares this node's root node (which is stored
 in a private field) with the value returned by
 Preferences.userRoot().  If the two object references are
 identical, this method returns true.

Specified by:
isUserNode in class Preferences
Returns:
true if this preference node is in the user
         preference tree, false if it's in the system
         preference tree.


"
AbstractPreferences,keys(),String[],Implements the keys method as per the specification in Preferences.keys().,"

keys
public String[] keys()
              throws BackingStoreException
Implements the keys method as per the specification in
 Preferences.keys().

 This implementation obtains this preference node's lock, checks that
 the node has not been removed and invokes keysSpi().

Specified by:
keys in class Preferences
Returns:
an array of the keys that have an associated value in this
         preference node.
Throws:
BackingStoreException - if this operation cannot be completed
         due to a failure in the backing store, or inability to
         communicate with it.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.


"
AbstractPreferences,keysSpi(),protected abstract String[],Returns all of the keys that have an associated value in this preference node.,"

keysSpi
protected abstract String[] keysSpi()
                             throws BackingStoreException
Returns all of the keys that have an associated value in this
 preference node.  (The returned array will be of size zero if
 this node has no preferences.)  It is guaranteed that this node has not
 been removed.

 This method is invoked with the lock on this node held.

 If this node throws a BackingStoreException, the exception
 will propagate out beyond the enclosing keys() invocation.

Returns:
an array of the keys that have an associated value in this
         preference node.
Throws:
BackingStoreException - if this operation cannot be completed
         due to a failure in the backing store, or inability to
         communicate with it.


"
AbstractPreferences,name(),String,Implements the name method as per the specification in Preferences.name().,"

name
public String name()
Implements the name method as per the specification in
 Preferences.name().

 This implementation merely returns the name that was
 passed to this node's constructor.

Specified by:
name in class Preferences
Returns:
this preference node's name, relative to its parent.


"
AbstractPreferences,node(String path),Preferences,Implements the node method as per the specification in Preferences.node(String).,"

node
public Preferences node(String path)
Implements the node method as per the specification in
 Preferences.node(String).

 This implementation obtains this preference node's lock and checks
 that the node has not been removed.  If path is """",
 this node is returned; if path is ""/"", this node's
 root is returned.  If the first character in path is
 not '/', the implementation breaks path into
 tokens and recursively traverses the path from this node to the
 named node, ""consuming"" a name and a slash from path at
 each step of the traversal.  At each step, the current node is locked
 and the node's child-cache is checked for the named node.  If it is
 not found, the name is checked to make sure its length does not
 exceed MAX_NAME_LENGTH.  Then the childSpi(String)
 method is invoked, and the result stored in this node's child-cache.
 If the newly created Preferences object's newNode
 field is true and there are any node change listeners,
 a notification event is enqueued for processing by the event dispatch
 thread.

 When there are no more tokens, the last value found in the
 child-cache or returned by childSpi is returned by this
 method.  If during the traversal, two ""/"" tokens occur
 consecutively, or the final token is ""/"" (rather than a name),
 an appropriate IllegalArgumentException is thrown.

  If the first character of path is '/'
 (indicating an absolute path name) this preference node's
 lock is dropped prior to breaking path into tokens, and
 this method recursively traverses the path starting from the root
 (rather than starting from this node).  The traversal is otherwise
 identical to the one described for relative path names.  Dropping
 the lock on this node prior to commencing the traversal at the root
 node is essential to avoid the possibility of deadlock, as per the
 locking invariant.

Specified by:
node in class Preferences
Parameters:
path - the path name of the preference node to return.
Returns:
the specified preference node.
Throws:
IllegalArgumentException - if the path name is invalid (i.e.,
         it contains multiple consecutive slash characters, or ends
         with a slash character and is more than one character long).
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
See Also:
Preferences.flush()


"
AbstractPreferences,nodeExists(String path),boolean,Implements the nodeExists method as per the specification in Preferences.nodeExists(String).,"

nodeExists
public boolean nodeExists(String path)
                   throws BackingStoreException
Implements the nodeExists method as per the specification in
 Preferences.nodeExists(String).

 This implementation is very similar to node(String),
 except that getChild(String) is used instead of childSpi(String).

Specified by:
nodeExists in class Preferences
Parameters:
path - the path name of the node whose existence is to be checked.
Returns:
true if the specified node exists.
Throws:
BackingStoreException - if this operation cannot be completed
         due to a failure in the backing store, or inability to
         communicate with it.
IllegalArgumentException - if the path name is invalid (i.e.,
         it contains multiple consecutive slash characters, or ends
         with a slash character and is more than one character long).
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method and
         pathname is not the empty string ("""").


"
AbstractPreferences,parent(),Preferences,Implements the parent method as per the specification in Preferences.parent().,"

parent
public Preferences parent()
Implements the parent method as per the specification in
 Preferences.parent().

 This implementation obtains this preference node's lock, checks that
 the node has not been removed and returns the parent value that was
 passed to this node's constructor.

Specified by:
parent in class Preferences
Returns:
the parent of this preference node.
Throws:
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.


"
AbstractPreferences,"put(String key, String value)",void,"Implements the put method as per the specification in Preferences.put(String,String).","

put
public void put(String key,
                String value)
Implements the put method as per the specification in
 Preferences.put(String,String).

 This implementation checks that the key and value are legal,
 obtains this preference node's lock, checks that the node
 has not been removed, invokes putSpi(String,String), and if
 there are any preference change listeners, enqueues a notification
 event for processing by the event dispatch thread.

Specified by:
put in class Preferences
Parameters:
key - key with which the specified value is to be associated.
value - value to be associated with the specified key.
Throws:
NullPointerException - if key or value is null.
IllegalArgumentException - if key.length() exceeds
       MAX_KEY_LENGTH or if value.length exceeds
       MAX_VALUE_LENGTH.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.


"
AbstractPreferences,"putBoolean(String key, boolean value)",void,"Implements the putBoolean method as per the specification in Preferences.putBoolean(String,boolean).","

putBoolean
public void putBoolean(String key,
                       boolean value)
Implements the putBoolean method as per the specification in
 Preferences.putBoolean(String,boolean).

 This implementation translates value to a string with
 String.valueOf(boolean) and invokes put(String,String)
 on the result.

Specified by:
putBoolean in class Preferences
Parameters:
key - key with which the string form of value is to be associated.
value - value whose string form is to be associated with key.
Throws:
NullPointerException - if key is null.
IllegalArgumentException - if key.length() exceeds
         MAX_KEY_LENGTH.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
See Also:
Preferences.getBoolean(String,boolean), 
Preferences.get(String,String)


"
AbstractPreferences,"putByteArray(String key, byte[] value)",void,"Implements the putByteArray method as per the specification in Preferences.putByteArray(String,byte[]).","

putByteArray
public void putByteArray(String key,
                         byte[] value)
Implements the putByteArray method as per the specification in
 Preferences.putByteArray(String,byte[]).

Specified by:
putByteArray in class Preferences
Parameters:
key - key with which the string form of value is to be associated.
value - value whose string form is to be associated with key.
Throws:
NullPointerException - if key or value is null.
IllegalArgumentException - if key.length() exceeds MAX_KEY_LENGTH
         or if value.length exceeds MAX_VALUE_LENGTH*3/4.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
See Also:
Preferences.getByteArray(String,byte[]), 
Preferences.get(String,String)


"
AbstractPreferences,"putDouble(String key, double value)",void,"Implements the putDouble method as per the specification in Preferences.putDouble(String,double).","

putDouble
public void putDouble(String key,
                      double value)
Implements the putDouble method as per the specification in
 Preferences.putDouble(String,double).

 This implementation translates value to a string with
 Double.toString(double) and invokes put(String,String)
 on the result.

Specified by:
putDouble in class Preferences
Parameters:
key - key with which the string form of value is to be associated.
value - value whose string form is to be associated with key.
Throws:
NullPointerException - if key is null.
IllegalArgumentException - if key.length() exceeds
         MAX_KEY_LENGTH.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
See Also:
Preferences.getDouble(String,double)


"
AbstractPreferences,"putFloat(String key, float value)",void,"Implements the putFloat method as per the specification in Preferences.putFloat(String,float).","

putFloat
public void putFloat(String key,
                     float value)
Implements the putFloat method as per the specification in
 Preferences.putFloat(String,float).

 This implementation translates value to a string with
 Float.toString(float) and invokes put(String,String)
 on the result.

Specified by:
putFloat in class Preferences
Parameters:
key - key with which the string form of value is to be associated.
value - value whose string form is to be associated with key.
Throws:
NullPointerException - if key is null.
IllegalArgumentException - if key.length() exceeds
         MAX_KEY_LENGTH.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
See Also:
Preferences.getFloat(String,float)


"
AbstractPreferences,"putInt(String key, int value)",void,"Implements the putInt method as per the specification in Preferences.putInt(String,int).","

putInt
public void putInt(String key,
                   int value)
Implements the putInt method as per the specification in
 Preferences.putInt(String,int).

 This implementation translates value to a string with
 Integer.toString(int) and invokes put(String,String)
 on the result.

Specified by:
putInt in class Preferences
Parameters:
key - key with which the string form of value is to be associated.
value - value whose string form is to be associated with key.
Throws:
NullPointerException - if key is null.
IllegalArgumentException - if key.length() exceeds
         MAX_KEY_LENGTH.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
See Also:
Preferences.getInt(String,int)


"
AbstractPreferences,"putLong(String key, long value)",void,"Implements the putLong method as per the specification in Preferences.putLong(String,long).","

putLong
public void putLong(String key,
                    long value)
Implements the putLong method as per the specification in
 Preferences.putLong(String,long).

 This implementation translates value to a string with
 Long.toString(long) and invokes put(String,String)
 on the result.

Specified by:
putLong in class Preferences
Parameters:
key - key with which the string form of value is to be associated.
value - value whose string form is to be associated with key.
Throws:
NullPointerException - if key is null.
IllegalArgumentException - if key.length() exceeds
         MAX_KEY_LENGTH.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
See Also:
Preferences.getLong(String,long)


"
AbstractPreferences,"putSpi(String key, String value)",protected abstract void,Put the given key-value association into this preference node.,"

putSpi
protected abstract void putSpi(String key,
                               String value)
Put the given key-value association into this preference node.  It is
 guaranteed that key and value are non-null and of
 legal length.  Also, it is guaranteed that this node has not been
 removed.  (The implementor needn't check for any of these things.)

 This method is invoked with the lock on this node held.

Parameters:
key - the key
value - the value


"
AbstractPreferences,remove(String key),void,Implements the remove(String) method as per the specification in Preferences.remove(String).,"

remove
public void remove(String key)
Implements the remove(String) method as per the specification
 in Preferences.remove(String).

 This implementation obtains this preference node's lock,
 checks that the node has not been removed, invokes
 removeSpi(String) and if there are any preference
 change listeners, enqueues a notification event for processing by the
 event dispatch thread.

Specified by:
remove in class Preferences
Parameters:
key - key whose mapping is to be removed from the preference node.
Throws:
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
NullPointerException - if key is null..


"
AbstractPreferences,removeNode(),void,Implements the removeNode() method as per the specification in Preferences.removeNode().,"

removeNode
public void removeNode()
                throws BackingStoreException
Implements the removeNode() method as per the specification in
 Preferences.removeNode().

 This implementation checks to see that this node is the root; if so,
 it throws an appropriate exception.  Then, it locks this node's parent,
 and calls a recursive helper method that traverses the subtree rooted at
 this node.  The recursive method locks the node on which it was called,
 checks that it has not already been removed, and then ensures that all
 of its children are cached: The childrenNamesSpi() method is
 invoked and each returned child name is checked for containment in the
 child-cache.  If a child is not already cached, the childSpi(String) method is invoked to create a Preferences
 instance for it, and this instance is put into the child-cache.  Then
 the helper method calls itself recursively on each node contained in its
 child-cache.  Next, it invokes removeNodeSpi(), marks itself
 as removed, and removes itself from its parent's child-cache.  Finally,
 if there are any node change listeners, it enqueues a notification
 event for processing by the event dispatch thread.

 Note that the helper method is always invoked with all ancestors up
 to the ""closest non-removed ancestor"" locked.

Specified by:
removeNode in class Preferences
Throws:
IllegalStateException - if this node (or an ancestor) has already
         been removed with the removeNode() method.
UnsupportedOperationException - if this method is invoked on
         the root node.
BackingStoreException - if this operation cannot be completed
         due to a failure in the backing store, or inability to
         communicate with it.
See Also:
Preferences.flush()


"
AbstractPreferences,removeNodeChangeListener(NodeChangeListener ncl),void,"Removes the specified NodeChangeListener, so it no longer receives change events.","

removeNodeChangeListener
public void removeNodeChangeListener(NodeChangeListener ncl)
Description copied from class: Preferences
Removes the specified NodeChangeListener, so it no longer
 receives change events.

Specified by:
removeNodeChangeListener in class Preferences
Parameters:
ncl - The NodeChangeListener to remove.
See Also:
Preferences.addNodeChangeListener(NodeChangeListener)


"
AbstractPreferences,removeNodeSpi(),protected abstract void,"Removes this preference node, invalidating it and any preferences that it contains.","

removeNodeSpi
protected abstract void removeNodeSpi()
                               throws BackingStoreException
Removes this preference node, invalidating it and any preferences that
 it contains.  The named child will have no descendants at the time this
 invocation is made (i.e., the Preferences.removeNode() method
 invokes this method repeatedly in a bottom-up fashion, removing each of
 a node's descendants before removing the node itself).

 This method is invoked with the lock held on this node and its
 parent (and all ancestors that are being removed as a
 result of a single invocation to Preferences.removeNode()).

 The removal of a node needn't become persistent until the
 flush method is invoked on this node (or an ancestor).

 If this node throws a BackingStoreException, the exception
 will propagate out beyond the enclosing removeNode()
 invocation.

Throws:
BackingStoreException - if this operation cannot be completed
         due to a failure in the backing store, or inability to
         communicate with it.


"
AbstractPreferences,removePreferenceChangeListener(PreferenceChangeListener pcl),void,"Removes the specified preference change listener, so it no longer receives preference change events.","

removePreferenceChangeListener
public void removePreferenceChangeListener(PreferenceChangeListener pcl)
Description copied from class: Preferences
Removes the specified preference change listener, so it no longer
 receives preference change events.

Specified by:
removePreferenceChangeListener in class Preferences
Parameters:
pcl - The preference change listener to remove.
See Also:
Preferences.addPreferenceChangeListener(PreferenceChangeListener)


"
AbstractPreferences,removeSpi(String key),protected abstract void,Remove the association (if any) for the specified key at this preference node.,"

removeSpi
protected abstract void removeSpi(String key)
Remove the association (if any) for the specified key at this
 preference node.  It is guaranteed that key is non-null.
 Also, it is guaranteed that this node has not been removed.
 (The implementor needn't check for either of these things.)

 This method is invoked with the lock on this node held.

Parameters:
key - the key


"
AbstractPreferences,sync(),void,Implements the sync method as per the specification in Preferences.sync().,"

sync
public void sync()
          throws BackingStoreException
Implements the sync method as per the specification in
 Preferences.sync().

 This implementation calls a recursive helper method that locks this
 node, invokes syncSpi() on it, unlocks this node, and recursively
 invokes this method on each ""cached child.""  A cached child is a child
 of this node that has been created in this VM and not subsequently
 removed.  In effect, this method does a depth first traversal of the
 ""cached subtree"" rooted at this node, calling syncSpi() on each node in
 the subTree while only that node is locked. Note that syncSpi() is
 invoked top-down.

Specified by:
sync in class Preferences
Throws:
BackingStoreException - if this operation cannot be completed
         due to a failure in the backing store, or inability to
         communicate with it.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
See Also:
flush()


"
AbstractPreferences,syncSpi(),protected abstract void,This method is invoked with this node locked.,"

syncSpi
protected abstract void syncSpi()
                         throws BackingStoreException
This method is invoked with this node locked.  The contract of this
 method is to synchronize any cached preferences stored at this node
 with any stored in the backing store.  (It is perfectly possible that
 this node does not exist on the backing store, either because it has
 been deleted by another VM, or because it has not yet been created.)
 Note that this method should not synchronize the preferences in
 any subnodes of this node.  If the backing store naturally syncs an
 entire subtree at once, the implementer is encouraged to override
 sync(), rather than merely overriding this method.

 If this node throws a BackingStoreException, the exception
 will propagate out beyond the enclosing sync() invocation.

Throws:
BackingStoreException - if this operation cannot be completed
         due to a failure in the backing store, or inability to
         communicate with it.


"
AbstractPreferences,toString(),String,Returns the absolute path name of this preferences node.,"

toString
public String toString()
Returns the absolute path name of this preferences node.

Specified by:
toString in class Preferences
Returns:
a string representation of the object.


"
NodeChangeEvent,getChild(),Preferences,Returns the node that was added or removed.,"

getChild
public Preferences getChild()
Returns the node that was added or removed.

Returns:
The node that was added or removed.


"
NodeChangeEvent,getParent(),Preferences,Returns the parent of the node that was added or removed.,"

getParent
public Preferences getParent()
Returns the parent of the node that was added or removed.

Returns:
The parent Preferences node whose child was added or removed


"
PreferenceChangeEvent,getKey(),String,Returns the key of the preference that was changed.,"

getKey
public String getKey()
Returns the key of the preference that was changed.

Returns:
The key of the preference that was changed.


"
PreferenceChangeEvent,getNewValue(),String,Returns the new value for the preference.,"

getNewValue
public String getNewValue()
Returns the new value for the preference.

Returns:
The new value for the preference, or null if the
          preference was removed.


"
PreferenceChangeEvent,getNode(),Preferences,Returns the preference node that emitted the event.,"

getNode
public Preferences getNode()
Returns the preference node that emitted the event.

Returns:
The preference node that emitted the event.


"
Preferences,absolutePath(),abstract String,Returns this preference node's absolute path name.,"

absolutePath
public abstract String absolutePath()
Returns this preference node's absolute path name.

Returns:
this preference node's absolute path name.


"
Preferences,addNodeChangeListener(NodeChangeListener ncl),abstract void,Registers the specified listener to receive node change events for this node.,"

addNodeChangeListener
public abstract void addNodeChangeListener(NodeChangeListener ncl)
Registers the specified listener to receive node change events
 for this node.  A node change event is generated when a child node is
 added to or removed from this node.  (A single removeNode()
 invocation results in multiple node change events, one for every
 node in the subtree rooted at the removed node.)

 Events are only guaranteed for changes made within the same JVM
 as the registered listener, though some implementations may generate
 events for changes made outside this JVM.  Events may be generated
 before the changes have become permanent.  Events are not generated
 when indirect descendants of this node are added or removed; a
 caller desiring such events must register with each descendant.

 Few guarantees can be made regarding node creation.  Because nodes
 are created implicitly upon access, it may not be feasible for an
 implementation to determine whether a child node existed in the backing
 store prior to access (for example, because the backing store is
 unreachable or cached information is out of date).  Under these
 circumstances, implementations are neither required to generate node
 change events nor prohibited from doing so.

Parameters:
ncl - The NodeChangeListener to add.
Throws:
NullPointerException - if ncl is null.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
See Also:
removeNodeChangeListener(NodeChangeListener), 
addPreferenceChangeListener(PreferenceChangeListener)


"
Preferences,addPreferenceChangeListener(PreferenceChangeListener pcl),abstract void,Registers the specified listener to receive preference change events for this preference node.,"

addPreferenceChangeListener
public abstract void addPreferenceChangeListener(PreferenceChangeListener pcl)
Registers the specified listener to receive preference change
 events for this preference node.  A preference change event is
 generated when a preference is added to this node, removed from this
 node, or when the value associated with a preference is changed.
 (Preference change events are not generated by the removeNode() method, which generates a node change event.
 Preference change events are generated by the clear
 method.)

 Events are only guaranteed for changes made within the same JVM
 as the registered listener, though some implementations may generate
 events for changes made outside this JVM.  Events may be generated
 before the changes have been made persistent.  Events are not generated
 when preferences are modified in descendants of this node; a caller
 desiring such events must register with each descendant.

Parameters:
pcl - The preference change listener to add.
Throws:
NullPointerException - if pcl is null.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
See Also:
removePreferenceChangeListener(PreferenceChangeListener), 
addNodeChangeListener(NodeChangeListener)


"
Preferences,childrenNames(),abstract String[],"Returns the names of the children of this preference node, relative to this node.","

childrenNames
public abstract String[] childrenNames()
                                throws BackingStoreException
Returns the names of the children of this preference node, relative to
 this node.  (The returned array will be of size zero if this node has
 no children.)

Returns:
the names of the children of this preference node.
Throws:
BackingStoreException - if this operation cannot be completed
         due to a failure in the backing store, or inability to
         communicate with it.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.


"
Preferences,clear(),abstract void,Removes all of the preferences (key-value associations) in this preference node.,"

clear
public abstract void clear()
                    throws BackingStoreException
Removes all of the preferences (key-value associations) in this
 preference node.  This call has no effect on any descendants
 of this node.

 If this implementation supports stored defaults, and this
 node in the preferences hierarchy contains any such defaults,
 the stored defaults will be ""exposed"" by this call, in the sense that
 they will be returned by succeeding calls to get.

Throws:
BackingStoreException - if this operation cannot be completed
         due to a failure in the backing store, or inability to
         communicate with it.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
See Also:
removeNode()


"
Preferences,exportNode(OutputStream os),abstract void,Emits on the specified output stream an XML document representing all of the preferences contained in this node (but not its descendants).,"

exportNode
public abstract void exportNode(OutputStream os)
                         throws IOException,
                                BackingStoreException
Emits on the specified output stream an XML document representing all
 of the preferences contained in this node (but not its descendants).
 This XML document is, in effect, an offline backup of the node.

 The XML document will have the following DOCTYPE declaration:
 
 <!DOCTYPE preferences SYSTEM ""http://java.sun.com/dtd/preferences.dtd"">
 
 The UTF-8 character encoding will be used.

 This method is an exception to the general rule that the results of
 concurrently executing multiple methods in this class yields
 results equivalent to some serial execution.  If the preferences
 at this node are modified concurrently with an invocation of this
 method, the exported preferences comprise a ""fuzzy snapshot"" of the
 preferences contained in the node; some of the concurrent modifications
 may be reflected in the exported data while others may not.

Parameters:
os - the output stream on which to emit the XML document.
Throws:
IOException - if writing to the specified output stream
         results in an IOException.
BackingStoreException - if preference data cannot be read from
         backing store.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
See Also:
importPreferences(InputStream)


"
Preferences,exportSubtree(OutputStream os),abstract void,Emits an XML document representing all of the preferences contained in this node and all of its descendants.,"

exportSubtree
public abstract void exportSubtree(OutputStream os)
                            throws IOException,
                                   BackingStoreException
Emits an XML document representing all of the preferences contained
 in this node and all of its descendants.  This XML document is, in
 effect, an offline backup of the subtree rooted at the node.

 The XML document will have the following DOCTYPE declaration:
 
 <!DOCTYPE preferences SYSTEM ""http://java.sun.com/dtd/preferences.dtd"">
 
 The UTF-8 character encoding will be used.

 This method is an exception to the general rule that the results of
 concurrently executing multiple methods in this class yields
 results equivalent to some serial execution.  If the preferences
 or nodes in the subtree rooted at this node are modified concurrently
 with an invocation of this method, the exported preferences comprise a
 ""fuzzy snapshot"" of the subtree; some of the concurrent modifications
 may be reflected in the exported data while others may not.

Parameters:
os - the output stream on which to emit the XML document.
Throws:
IOException - if writing to the specified output stream
         results in an IOException.
BackingStoreException - if preference data cannot be read from
         backing store.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
See Also:
importPreferences(InputStream), 
exportNode(OutputStream)


"
Preferences,flush(),abstract void,Forces any changes in the contents of this preference node and its descendants to the persistent store.,"

flush
public abstract void flush()
                    throws BackingStoreException
Forces any changes in the contents of this preference node and its
 descendants to the persistent store.  Once this method returns
 successfully, it is safe to assume that all changes made in the
 subtree rooted at this node prior to the method invocation have become
 permanent.

 Implementations are free to flush changes into the persistent store
 at any time.  They do not need to wait for this method to be called.

 When a flush occurs on a newly created node, it is made persistent,
 as are any ancestors (and descendants) that have yet to be made
 persistent.  Note however that any preference value changes in
 ancestors are not guaranteed to be made persistent.

  If this method is invoked on a node that has been removed with
 the removeNode() method, flushSpi() is invoked on this node,
 but not on others.

Throws:
BackingStoreException - if this operation cannot be completed
         due to a failure in the backing store, or inability to
         communicate with it.
See Also:
sync()


"
Preferences,"get(String key, String def)",abstract String,Returns the value associated with the specified key in this preference node.,"

get
public abstract String get(String key,
                           String def)
Returns the value associated with the specified key in this preference
 node.  Returns the specified default if there is no value associated
 with the key, or the backing store is inaccessible.

 Some implementations may store default values in their backing
 stores.  If there is no value associated with the specified key
 but there is such a stored default, it is returned in
 preference to the specified default.

Parameters:
key - key whose associated value is to be returned.
def - the value to be returned in the event that this
        preference node has no value associated with key.
Returns:
the value associated with key, or def
         if no value is associated with key, or the backing
         store is inaccessible.
Throws:
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
NullPointerException - if key is null.  (A
         null value for def is permitted.)


"
Preferences,"getBoolean(String key, boolean def)",abstract boolean,Returns the boolean value represented by the string associated with the specified key in this preference node.,"

getBoolean
public abstract boolean getBoolean(String key,
                                   boolean def)
Returns the boolean value represented by the string associated with the
 specified key in this preference node.  Valid strings
 are ""true"", which represents true, and ""false"", which
 represents false.  Case is ignored, so, for example, ""TRUE""
 and ""False"" are also valid.  This method is intended for use in
 conjunction with putBoolean(java.lang.String, boolean).

 Returns the specified default if there is no value
 associated with the key, the backing store is inaccessible, or if the
 associated value is something other than ""true"" or
 ""false"", ignoring case.

 If the implementation supports stored defaults and such a
 default exists and is accessible, it is used in preference to the
 specified default, unless the stored default is something other than
 ""true"" or ""false"", ignoring case, in which case the
 specified default is used.

Parameters:
key - key whose associated value is to be returned as a boolean.
def - the value to be returned in the event that this
        preference node has no value associated with key
        or the associated value cannot be interpreted as a boolean,
        or the backing store is inaccessible.
Returns:
the boolean value represented by the string associated with
         key in this preference node, or def if the
         associated value does not exist or cannot be interpreted as
         a boolean.
Throws:
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
NullPointerException - if key is null.
See Also:
get(String,String), 
putBoolean(String,boolean)


"
Preferences,"getByteArray(String key, byte[] def)",abstract byte[],Returns the byte array value represented by the string associated with the specified key in this preference node.,"

getByteArray
public abstract byte[] getByteArray(String key,
                                    byte[] def)
Returns the byte array value represented by the string associated with
 the specified key in this preference node.  Valid strings are
 Base64 encoded binary data, as defined in RFC 2045, Section 6.8,
 with one minor change: the string must consist solely of characters
 from the Base64 Alphabet; no newline characters or
 extraneous characters are permitted.  This method is intended for use
 in conjunction with putByteArray(java.lang.String, byte[]).

 Returns the specified default if there is no value
 associated with the key, the backing store is inaccessible, or if the
 associated value is not a valid Base64 encoded byte array
 (as defined above).

 If the implementation supports stored defaults and such a
 default exists and is accessible, it is used in preference to the
 specified default, unless the stored default is not a valid Base64
 encoded byte array (as defined above), in which case the
 specified default is used.

Parameters:
key - key whose associated value is to be returned as a byte array.
def - the value to be returned in the event that this
        preference node has no value associated with key
        or the associated value cannot be interpreted as a byte array,
        or the backing store is inaccessible.
Returns:
the byte array value represented by the string associated with
         key in this preference node, or def if the
         associated value does not exist or cannot be interpreted as
         a byte array.
Throws:
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
NullPointerException - if key is null.  (A
         null value for def is permitted.)
See Also:
get(String,String), 
putByteArray(String,byte[])


"
Preferences,"getDouble(String key, double def)",abstract double,Returns the double value represented by the string associated with the specified key in this preference node.,"

getDouble
public abstract double getDouble(String key,
                                 double def)
Returns the double value represented by the string associated with the
 specified key in this preference node.  The string is converted to an
 integer as by Double.parseDouble(String).  Returns the specified
 default if there is no value associated with the key, the backing store
 is inaccessible, or if Double.parseDouble(String) would throw a
 NumberFormatException if the associated value were passed.
 This method is intended for use in conjunction with putDouble(java.lang.String, double).

 If the implementation supports stored defaults and such a
 default exists, is accessible, and could be converted to a double
 with Double.parseDouble, this double is returned in preference
 to the specified default.

Parameters:
key - key whose associated value is to be returned as a double.
def - the value to be returned in the event that this
        preference node has no value associated with key
        or the associated value cannot be interpreted as a double,
        or the backing store is inaccessible.
Returns:
the double value represented by the string associated with
         key in this preference node, or def if the
         associated value does not exist or cannot be interpreted as
         a double.
Throws:
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
NullPointerException - if key is null.
See Also:
putDouble(String,double), 
get(String,String)


"
Preferences,"getFloat(String key, float def)",abstract float,Returns the float value represented by the string associated with the specified key in this preference node.,"

getFloat
public abstract float getFloat(String key,
                               float def)
Returns the float value represented by the string associated with the
 specified key in this preference node.  The string is converted to an
 integer as by Float.parseFloat(String).  Returns the specified
 default if there is no value associated with the key, the backing store
 is inaccessible, or if Float.parseFloat(String) would throw a
 NumberFormatException if the associated value were passed.
 This method is intended for use in conjunction with putFloat(java.lang.String, float).

 If the implementation supports stored defaults and such a
 default exists, is accessible, and could be converted to a float
 with Float.parseFloat, this float is returned in preference to
 the specified default.

Parameters:
key - key whose associated value is to be returned as a float.
def - the value to be returned in the event that this
        preference node has no value associated with key
        or the associated value cannot be interpreted as a float,
        or the backing store is inaccessible.
Returns:
the float value represented by the string associated with
         key in this preference node, or def if the
         associated value does not exist or cannot be interpreted as
         a float.
Throws:
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
NullPointerException - if key is null.
See Also:
putFloat(String,float), 
get(String,String)


"
Preferences,"getInt(String key, int def)",abstract int,Returns the int value represented by the string associated with the specified key in this preference node.,"

getInt
public abstract int getInt(String key,
                           int def)
Returns the int value represented by the string associated with the
 specified key in this preference node.  The string is converted to
 an integer as by Integer.parseInt(String).  Returns the
 specified default if there is no value associated with the key,
 the backing store is inaccessible, or if
 Integer.parseInt(String) would throw a NumberFormatException if the associated value were passed.  This
 method is intended for use in conjunction with putInt(java.lang.String, int).

 If the implementation supports stored defaults and such a
 default exists, is accessible, and could be converted to an int
 with Integer.parseInt, this int is returned in preference to
 the specified default.

Parameters:
key - key whose associated value is to be returned as an int.
def - the value to be returned in the event that this
        preference node has no value associated with key
        or the associated value cannot be interpreted as an int,
        or the backing store is inaccessible.
Returns:
the int value represented by the string associated with
         key in this preference node, or def if the
         associated value does not exist or cannot be interpreted as
         an int.
Throws:
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
NullPointerException - if key is null.
See Also:
putInt(String,int), 
get(String,String)


"
Preferences,"getLong(String key, long def)",abstract long,Returns the long value represented by the string associated with the specified key in this preference node.,"

getLong
public abstract long getLong(String key,
                             long def)
Returns the long value represented by the string associated with the
 specified key in this preference node.  The string is converted to
 a long as by Long.parseLong(String).  Returns the
 specified default if there is no value associated with the key,
 the backing store is inaccessible, or if
 Long.parseLong(String) would throw a NumberFormatException if the associated value were passed.  This
 method is intended for use in conjunction with putLong(java.lang.String, long).

 If the implementation supports stored defaults and such a
 default exists, is accessible, and could be converted to a long
 with Long.parseLong, this long is returned in preference to
 the specified default.

Parameters:
key - key whose associated value is to be returned as a long.
def - the value to be returned in the event that this
        preference node has no value associated with key
        or the associated value cannot be interpreted as a long,
        or the backing store is inaccessible.
Returns:
the long value represented by the string associated with
         key in this preference node, or def if the
         associated value does not exist or cannot be interpreted as
         a long.
Throws:
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
NullPointerException - if key is null.
See Also:
putLong(String,long), 
get(String,String)


"
Preferences,importPreferences(InputStream is),static void,Imports all of the preferences represented by the XML document on the specified input stream.,"

importPreferences
public static void importPreferences(InputStream is)
                              throws IOException,
                                     InvalidPreferencesFormatException
Imports all of the preferences represented by the XML document on the
 specified input stream.  The document may represent user preferences or
 system preferences.  If it represents user preferences, the preferences
 will be imported into the calling user's preference tree (even if they
 originally came from a different user's preference tree).  If any of
 the preferences described by the document inhabit preference nodes that
 do not exist, the nodes will be created.

 The XML document must have the following DOCTYPE declaration:
 
 <!DOCTYPE preferences SYSTEM ""http://java.sun.com/dtd/preferences.dtd"">
 
 (This method is designed for use in conjunction with
 exportNode(OutputStream) and
 exportSubtree(OutputStream).

 This method is an exception to the general rule that the results of
 concurrently executing multiple methods in this class yields
 results equivalent to some serial execution.  The method behaves
 as if implemented on top of the other public methods in this class,
 notably node(String) and put(String, String).

Parameters:
is - the input stream from which to read the XML document.
Throws:
IOException - if reading from the specified input stream
         results in an IOException.
InvalidPreferencesFormatException - Data on input stream does not
         constitute a valid XML document with the mandated document type.
SecurityException - If a security manager is present and
         it denies RuntimePermission(""preferences"").
See Also:
RuntimePermission


"
Preferences,isUserNode(),abstract boolean,"Returns true if this preference node is in the user preference tree, false if it's in the system preference tree.","

isUserNode
public abstract boolean isUserNode()
Returns true if this preference node is in the user
 preference tree, false if it's in the system preference tree.

Returns:
true if this preference node is in the user
         preference tree, false if it's in the system
         preference tree.


"
Preferences,keys(),abstract String[],Returns all of the keys that have an associated value in this preference node.,"

keys
public abstract String[] keys()
                       throws BackingStoreException
Returns all of the keys that have an associated value in this
 preference node.  (The returned array will be of size zero if
 this node has no preferences.)

 If the implementation supports stored defaults and there
 are any such defaults at this node that have not been overridden,
 by explicit preferences, the defaults are returned in the array in
 addition to any explicit preferences.

Returns:
an array of the keys that have an associated value in this
         preference node.
Throws:
BackingStoreException - if this operation cannot be completed
         due to a failure in the backing store, or inability to
         communicate with it.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.


"
Preferences,name(),abstract String,"Returns this preference node's name, relative to its parent.","

name
public abstract String name()
Returns this preference node's name, relative to its parent.

Returns:
this preference node's name, relative to its parent.


"
Preferences,node(String pathName),abstract Preferences,"Returns the named preference node in the same tree as this node, creating it and any of its ancestors if they do not already exist.","

node
public abstract Preferences node(String pathName)
Returns the named preference node in the same tree as this node,
 creating it and any of its ancestors if they do not already exist.
 Accepts a relative or absolute path name.  Relative path names
 (which do not begin with the slash character ('/')) are
 interpreted relative to this preference node.

 If the returned node did not exist prior to this call, this node and
 any ancestors that were created by this call are not guaranteed
 to become permanent until the flush method is called on
 the returned node (or one of its ancestors or descendants).

Parameters:
pathName - the path name of the preference node to return.
Returns:
the specified preference node.
Throws:
IllegalArgumentException - if the path name is invalid (i.e.,
         it contains multiple consecutive slash characters, or ends
         with a slash character and is more than one character long).
NullPointerException - if path name is null.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
See Also:
flush()


"
Preferences,nodeExists(String pathName),abstract boolean,Returns true if the named preference node exists in the same tree as this node.,"

nodeExists
public abstract boolean nodeExists(String pathName)
                            throws BackingStoreException
Returns true if the named preference node exists in the same tree
 as this node.  Relative path names (which do not begin with the slash
 character ('/')) are interpreted relative to this preference
 node.

 If this node (or an ancestor) has already been removed with the
 removeNode() method, it is legal to invoke this method,
 but only with the path name """"; the invocation will return
 false.  Thus, the idiom p.nodeExists("""") may be
 used to test whether p has been removed.

Parameters:
pathName - the path name of the node whose existence
        is to be checked.
Returns:
true if the specified node exists.
Throws:
BackingStoreException - if this operation cannot be completed
         due to a failure in the backing store, or inability to
         communicate with it.
IllegalArgumentException - if the path name is invalid (i.e.,
         it contains multiple consecutive slash characters, or ends
         with a slash character and is more than one character long).
NullPointerException - if path name is null.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method and
         pathName is not the empty string ("""").


"
Preferences,parent(),abstract Preferences,"Returns the parent of this preference node, or null if this is the root.","

parent
public abstract Preferences parent()
Returns the parent of this preference node, or null if this is
 the root.

Returns:
the parent of this preference node.
Throws:
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.


"
Preferences,"put(String key, String value)",abstract void,Associates the specified value with the specified key in this preference node.,"

put
public abstract void put(String key,
                         String value)
Associates the specified value with the specified key in this
 preference node.

Parameters:
key - key with which the specified value is to be associated.
value - value to be associated with the specified key.
Throws:
NullPointerException - if key or value is null.
IllegalArgumentException - if key.length() exceeds
       MAX_KEY_LENGTH or if value.length exceeds
       MAX_VALUE_LENGTH.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.


"
Preferences,"putBoolean(String key, boolean value)",abstract void,Associates a string representing the specified boolean value with the specified key in this preference node.,"

putBoolean
public abstract void putBoolean(String key,
                                boolean value)
Associates a string representing the specified boolean value with the
 specified key in this preference node.  The associated string is
 ""true"" if the value is true, and ""false"" if it is
 false.  This method is intended for use in conjunction with
 getBoolean(java.lang.String, boolean).

Parameters:
key - key with which the string form of value is to be associated.
value - value whose string form is to be associated with key.
Throws:
NullPointerException - if key is null.
IllegalArgumentException - if key.length() exceeds
         MAX_KEY_LENGTH.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
See Also:
getBoolean(String,boolean), 
get(String,String)


"
Preferences,"putByteArray(String key, byte[] value)",abstract void,Associates a string representing the specified byte array with the specified key in this preference node.,"

putByteArray
public abstract void putByteArray(String key,
                                  byte[] value)
Associates a string representing the specified byte array with the
 specified key in this preference node.  The associated string is
 the Base64 encoding of the byte array, as defined in RFC 2045, Section 6.8,
 with one minor change: the string will consist solely of characters
 from the Base64 Alphabet; it will not contain any newline
 characters.  Note that the maximum length of the byte array is limited
 to three quarters of MAX_VALUE_LENGTH so that the length
 of the Base64 encoded String does not exceed MAX_VALUE_LENGTH.
 This method is intended for use in conjunction with
 getByteArray(java.lang.String, byte[]).

Parameters:
key - key with which the string form of value is to be associated.
value - value whose string form is to be associated with key.
Throws:
NullPointerException - if key or value is null.
IllegalArgumentException - if key.length() exceeds MAX_KEY_LENGTH
         or if value.length exceeds MAX_VALUE_LENGTH*3/4.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
See Also:
getByteArray(String,byte[]), 
get(String,String)


"
Preferences,"putDouble(String key, double value)",abstract void,Associates a string representing the specified double value with the specified key in this preference node.,"

putDouble
public abstract void putDouble(String key,
                               double value)
Associates a string representing the specified double value with the
 specified key in this preference node.  The associated string is the
 one that would be returned if the double value were passed to
 Double.toString(double).  This method is intended for use in
 conjunction with getDouble(java.lang.String, double).

Parameters:
key - key with which the string form of value is to be associated.
value - value whose string form is to be associated with key.
Throws:
NullPointerException - if key is null.
IllegalArgumentException - if key.length() exceeds
         MAX_KEY_LENGTH.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
See Also:
getDouble(String,double)


"
Preferences,"putFloat(String key, float value)",abstract void,Associates a string representing the specified float value with the specified key in this preference node.,"

putFloat
public abstract void putFloat(String key,
                              float value)
Associates a string representing the specified float value with the
 specified key in this preference node.  The associated string is the
 one that would be returned if the float value were passed to
 Float.toString(float).  This method is intended for use in
 conjunction with getFloat(java.lang.String, float).

Parameters:
key - key with which the string form of value is to be associated.
value - value whose string form is to be associated with key.
Throws:
NullPointerException - if key is null.
IllegalArgumentException - if key.length() exceeds
         MAX_KEY_LENGTH.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
See Also:
getFloat(String,float)


"
Preferences,"putInt(String key, int value)",abstract void,Associates a string representing the specified int value with the specified key in this preference node.,"

putInt
public abstract void putInt(String key,
                            int value)
Associates a string representing the specified int value with the
 specified key in this preference node.  The associated string is the
 one that would be returned if the int value were passed to
 Integer.toString(int).  This method is intended for use in
 conjunction with getInt(java.lang.String, int).

Parameters:
key - key with which the string form of value is to be associated.
value - value whose string form is to be associated with key.
Throws:
NullPointerException - if key is null.
IllegalArgumentException - if key.length() exceeds
         MAX_KEY_LENGTH.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
See Also:
getInt(String,int)


"
Preferences,"putLong(String key, long value)",abstract void,Associates a string representing the specified long value with the specified key in this preference node.,"

putLong
public abstract void putLong(String key,
                             long value)
Associates a string representing the specified long value with the
 specified key in this preference node.  The associated string is the
 one that would be returned if the long value were passed to
 Long.toString(long).  This method is intended for use in
 conjunction with getLong(java.lang.String, long).

Parameters:
key - key with which the string form of value is to be associated.
value - value whose string form is to be associated with key.
Throws:
NullPointerException - if key is null.
IllegalArgumentException - if key.length() exceeds
         MAX_KEY_LENGTH.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
See Also:
getLong(String,long)


"
Preferences,remove(String key),abstract void,"Removes the value associated with the specified key in this preference node, if any.","

remove
public abstract void remove(String key)
Removes the value associated with the specified key in this preference
 node, if any.

 If this implementation supports stored defaults, and there is
 such a default for the specified preference, the stored default will be
 ""exposed"" by this call, in the sense that it will be returned
 by a succeeding call to get.

Parameters:
key - key whose mapping is to be removed from the preference node.
Throws:
NullPointerException - if key is null.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.


"
Preferences,removeNode(),abstract void,"Removes this preference node and all of its descendants, invalidating any preferences contained in the removed nodes.","

removeNode
public abstract void removeNode()
                         throws BackingStoreException
Removes this preference node and all of its descendants, invalidating
 any preferences contained in the removed nodes.  Once a node has been
 removed, attempting any method other than name(),
 absolutePath(), isUserNode(), flush() or
 nodeExists("""") on the corresponding
 Preferences instance will fail with an
 IllegalStateException.  (The methods defined on Object
 can still be invoked on a node after it has been removed; they will not
 throw IllegalStateException.)

 The removal is not guaranteed to be persistent until the
 flush method is called on this node (or an ancestor).

 If this implementation supports stored defaults, removing a
 node exposes any stored defaults at or below this node.  Thus, a
 subsequent call to nodeExists on this node's path name may
 return true, and a subsequent call to node on this
 path name may return a (different) Preferences instance
 representing a non-empty collection of preferences and/or children.

Throws:
BackingStoreException - if this operation cannot be completed
         due to a failure in the backing store, or inability to
         communicate with it.
IllegalStateException - if this node (or an ancestor) has already
         been removed with the removeNode() method.
UnsupportedOperationException - if this method is invoked on
         the root node.
See Also:
flush()


"
Preferences,removeNodeChangeListener(NodeChangeListener ncl),abstract void,"Removes the specified NodeChangeListener, so it no longer receives change events.","

removeNodeChangeListener
public abstract void removeNodeChangeListener(NodeChangeListener ncl)
Removes the specified NodeChangeListener, so it no longer
 receives change events.

Parameters:
ncl - The NodeChangeListener to remove.
Throws:
IllegalArgumentException - if ncl was not a registered
         NodeChangeListener on this node.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
See Also:
addNodeChangeListener(NodeChangeListener)


"
Preferences,removePreferenceChangeListener(PreferenceChangeListener pcl),abstract void,"Removes the specified preference change listener, so it no longer receives preference change events.","

removePreferenceChangeListener
public abstract void removePreferenceChangeListener(PreferenceChangeListener pcl)
Removes the specified preference change listener, so it no longer
 receives preference change events.

Parameters:
pcl - The preference change listener to remove.
Throws:
IllegalArgumentException - if pcl was not a registered
         preference change listener on this node.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
See Also:
addPreferenceChangeListener(PreferenceChangeListener)


"
Preferences,sync(),abstract void,Ensures that future reads from this preference node and its descendants reflect any changes that were committed to the persistent store (from any VM) prior to the sync invocation.,"

sync
public abstract void sync()
                   throws BackingStoreException
Ensures that future reads from this preference node and its
 descendants reflect any changes that were committed to the persistent
 store (from any VM) prior to the sync invocation.  As a
 side-effect, forces any changes in the contents of this preference node
 and its descendants to the persistent store, as if the flush
 method had been invoked on this node.

Throws:
BackingStoreException - if this operation cannot be completed
         due to a failure in the backing store, or inability to
         communicate with it.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
See Also:
flush()


"
Preferences,systemNodeForPackage(Class<?> c),static Preferences,Returns the preference node from the system preference tree that is associated (by convention) with the specified class's package.,"

systemNodeForPackage
public static Preferences systemNodeForPackage(Class<?> c)
Returns the preference node from the system preference tree that is
 associated (by convention) with the specified class's package.  The
 convention is as follows: the absolute path name of the node is the
 fully qualified package name, preceded by a slash ('/'), and
 with each period ('.') replaced by a slash.  For example the
 absolute path name of the node associated with the class
 com.acme.widget.Foo is /com/acme/widget.

 This convention does not apply to the unnamed package, whose
 associated preference node is <unnamed>.  This node
 is not intended for long term use, but for convenience in the early
 development of programs that do not yet belong to a package, and
 for ""throwaway"" programs.  Valuable data should not be stored
 at this node as it is shared by all programs that use it.
A class Foo wishing to access preferences pertaining to its
 package can obtain a preference node as follows: 
  static Preferences prefs = Preferences.systemNodeForPackage(Foo.class);
 
 This idiom obviates the need for using a string to describe the
 preferences node and decreases the likelihood of a run-time failure.
 (If the class name is misspelled, it will typically result in a
 compile-time error.)

 Invoking this method will result in the creation of the returned
 node and its ancestors if they do not already exist.  If the returned
 node did not exist prior to this call, this node and any ancestors that
 were created by this call are not guaranteed to become permanent until
 the flush method is called on the returned node (or one of its
 ancestors or descendants).

Parameters:
c - the class for whose package a system preference node is desired.
Returns:
the system preference node associated with the package of which
         c is a member.
Throws:
NullPointerException - if c is null.
SecurityException - if a security manager is present and
         it denies RuntimePermission(""preferences"").
See Also:
RuntimePermission


"
Preferences,systemRoot(),static Preferences,Returns the root preference node for the system.,"

systemRoot
public static Preferences systemRoot()
Returns the root preference node for the system.

Returns:
the root preference node for the system.
Throws:
SecurityException - If a security manager is present and
         it denies RuntimePermission(""preferences"").
See Also:
RuntimePermission


"
Preferences,toString(),abstract String,"Returns a string representation of this preferences node, as if computed by the expression:(this.isUserNode() ? ""User"" : ""System"") + "" Preference Node: "" + this.absolutePath().","

toString
public abstract String toString()
Returns a string representation of this preferences node,
 as if computed by the expression:(this.isUserNode() ? ""User"" :
 ""System"") + "" Preference Node: "" + this.absolutePath().

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
Preferences,userNodeForPackage(Class<?> c),static Preferences,Returns the preference node from the calling user's preference tree that is associated (by convention) with the specified class's package.,"

userNodeForPackage
public static Preferences userNodeForPackage(Class<?> c)
Returns the preference node from the calling user's preference tree
 that is associated (by convention) with the specified class's package.
 The convention is as follows: the absolute path name of the node is the
 fully qualified package name, preceded by a slash ('/'), and
 with each period ('.') replaced by a slash.  For example the
 absolute path name of the node associated with the class
 com.acme.widget.Foo is /com/acme/widget.

 This convention does not apply to the unnamed package, whose
 associated preference node is <unnamed>.  This node
 is not intended for long term use, but for convenience in the early
 development of programs that do not yet belong to a package, and
 for ""throwaway"" programs.  Valuable data should not be stored
 at this node as it is shared by all programs that use it.
A class Foo wishing to access preferences pertaining to its
 package can obtain a preference node as follows: 
    static Preferences prefs = Preferences.userNodeForPackage(Foo.class);
 
 This idiom obviates the need for using a string to describe the
 preferences node and decreases the likelihood of a run-time failure.
 (If the class name is misspelled, it will typically result in a
 compile-time error.)

 Invoking this method will result in the creation of the returned
 node and its ancestors if they do not already exist.  If the returned
 node did not exist prior to this call, this node and any ancestors that
 were created by this call are not guaranteed to become permanent until
 the flush method is called on the returned node (or one of its
 ancestors or descendants).

Parameters:
c - the class for whose package a user preference node is desired.
Returns:
the user preference node associated with the package of which
         c is a member.
Throws:
NullPointerException - if c is null.
SecurityException - if a security manager is present and
         it denies RuntimePermission(""preferences"").
See Also:
RuntimePermission


"
Preferences,userRoot(),static Preferences,Returns the root preference node for the calling user.,"

userRoot
public static Preferences userRoot()
Returns the root preference node for the calling user.

Returns:
the root preference node for the calling user.
Throws:
SecurityException - If a security manager is present and
         it denies RuntimePermission(""preferences"").
See Also:
RuntimePermission


"
