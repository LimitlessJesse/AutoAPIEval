ClassName,Method,Return Type,Description,Full Description
Schema,newValidator(),abstract Validator,Creates a new Validator for this Schema.,"

newValidator
public abstract Validator newValidator()
Creates a new Validator for this Schema.

 A validator enforces/checks the set of constraints this object
 represents.
Implementors should assure that the properties set on the
 SchemaFactory that created this Schema are also
 set on the Validator constructed.

Returns:
Always return a non-null valid object.


"
Schema,newValidatorHandler(),abstract ValidatorHandler,Creates a new ValidatorHandler for this Schema.,"

newValidatorHandler
public abstract ValidatorHandler newValidatorHandler()
Creates a new ValidatorHandler for this Schema.

 Implementors should assure that the properties set on the
 SchemaFactory that created this Schema are also
 set on the ValidatorHandler constructed.

Returns:
Always return a non-null valid object.


"
SchemaFactory,getErrorHandler(),abstract ErrorHandler,Gets the current ErrorHandler set to this SchemaFactory.,"

getErrorHandler
public abstract ErrorHandler getErrorHandler()
Gets the current ErrorHandler set to this SchemaFactory.

Returns:
This method returns the object that was last set through
      the setErrorHandler(ErrorHandler) method, or null
      if that method has never been called since this SchemaFactory
      has created.
See Also:
setErrorHandler(ErrorHandler)


"
SchemaFactory,getFeature(String name),boolean,Look up the value of a feature flag.,"

getFeature
public boolean getFeature(String name)
                   throws SAXNotRecognizedException,
                          SAXNotSupportedException
Look up the value of a feature flag.

 The feature name is any fully-qualified URI.  It is
 possible for a SchemaFactory to recognize a feature name but
 temporarily be unable to return its value.

 Implementors are free (and encouraged) to invent their own features,
 using names built on their own URIs.

Parameters:
name - The feature name, which is a non-null fully-qualified URI.
Returns:
The current value of the feature (true or false).
Throws:
SAXNotRecognizedException - If the feature
   value can't be assigned or retrieved.
SAXNotSupportedException - When the
   SchemaFactory recognizes the feature name but
   cannot determine its value at this time.
NullPointerException - If name is null.
See Also:
setFeature(String, boolean)


"
SchemaFactory,getProperty(String name),Object,Look up the value of a property.,"

getProperty
public Object getProperty(String name)
                   throws SAXNotRecognizedException,
                          SAXNotSupportedException
Look up the value of a property.

 The property name is any fully-qualified URI.  It is
 possible for a SchemaFactory to recognize a property name but
 temporarily be unable to return its value.
SchemaFactorys are not required to recognize any specific
 property names.
Implementors are free (and encouraged) to invent their own properties,
 using names built on their own URIs.

Parameters:
name - The property name, which is a non-null fully-qualified URI.
Returns:
The current value of the property.
Throws:
SAXNotRecognizedException - If the property
   value can't be assigned or retrieved.
SAXNotSupportedException - When the
   XMLReader recognizes the property name but
   cannot determine its value at this time.
NullPointerException - If name is null.
See Also:
setProperty(String, Object)


"
SchemaFactory,getResourceResolver(),abstract LSResourceResolver,Gets the current LSResourceResolver set to this SchemaFactory.,"

getResourceResolver
public abstract LSResourceResolver getResourceResolver()
Gets the current LSResourceResolver set to this SchemaFactory.

Returns:
This method returns the object that was last set through
      the setResourceResolver(LSResourceResolver) method, or null
      if that method has never been called since this SchemaFactory
      has created.
See Also:
setErrorHandler(ErrorHandler)


"
SchemaFactory,isSchemaLanguageSupported(String schemaLanguage),abstract boolean,Is specified schema supported by this SchemaFactory?,"

isSchemaLanguageSupported
public abstract boolean isSchemaLanguageSupported(String schemaLanguage)
Is specified schema supported by this SchemaFactory?

Parameters:
schemaLanguage - Specifies the schema language which the returned SchemaFactory will understand.
    schemaLanguage must specify a valid schema language.
Returns:
true if SchemaFactory supports schemaLanguage, else false.
Throws:
NullPointerException - If schemaLanguage is null.
IllegalArgumentException - If schemaLanguage.length() == 0
   or schemaLanguage does not specify a valid schema language.


"
SchemaFactory,newInstance(String schemaLanguage),static SchemaFactory,Lookup an implementation of the SchemaFactory that supports the specified schema language and return it.,"

newInstance
public static SchemaFactory newInstance(String schemaLanguage)
Lookup an implementation of the SchemaFactory that supports the specified
 schema language and return it.
To find a SchemaFactory object for a given schema language,
 this method looks the following places in the following order
 where ""the class loader"" refers to the context class loader:


     If the system property
     ""javax.xml.validation.SchemaFactory:schemaLanguage""
     is present (where schemaLanguage is the parameter
     to this method), then its value is read
     as a class name. The method will try to
     create a new instance of this class by using the class loader,
     and returns it if it is successfully created.
   

$java.home/lib/jaxp.properties is read and
     the value associated with the key being the system property above
     is looked for. If present, the value is processed just like above.
   

   Use the service-provider loading facilities, defined by the
   ServiceLoader class, to attempt to locate and load an
   implementation of the service using the default loading mechanism:
   the service-provider loading facility will use the current thread's context class loader
   to attempt to load the service. If the context class
   loader is null, the system class loader will be used.
   
   Each potential service provider is required to implement the method
        isSchemaLanguageSupported(String schemaLanguage).
   
   The first service provider found that supports the specified schema
   language is returned.
   
   In case of ServiceConfigurationError a
   SchemaFactoryConfigurationError will be thrown.
   

     Platform default SchemaFactory is located
     in a implementation specific way. There must be a platform default
     SchemaFactory for W3C XML Schema.
   

If everything fails, IllegalArgumentException will be thrown.
Tip for Trouble-shooting:
See Properties.load(java.io.InputStream) for
 exactly how a property file is parsed. In particular, colons ':'
 need to be escaped in a property file, so make sure schema language
 URIs are properly escaped in it. For example:

 http\://www.w3.org/2001/XMLSchema=org.acme.foo.XSSchemaFactory
 

Parameters:
schemaLanguage - Specifies the schema language which the returned
      SchemaFactory will understand. See
      the list of available
      schema languages for the possible values.
Returns:
New instance of a SchemaFactory
Throws:
IllegalArgumentException - If no implementation of the schema language is available.
NullPointerException - If the schemaLanguage parameter is null.
SchemaFactoryConfigurationError - If a configuration error is encountered.
See Also:
newInstance(String schemaLanguage, String factoryClassName, ClassLoader classLoader)


"
SchemaFactory,"newInstance(String schemaLanguage, String factoryClassName, ClassLoader classLoader)",static SchemaFactory,Obtain a new instance of a SchemaFactory from class name.,"

newInstance
public static SchemaFactory newInstance(String schemaLanguage,
                                        String factoryClassName,
                                        ClassLoader classLoader)
Obtain a new instance of a SchemaFactory from class name. SchemaFactory
 is returned if specified factory class name supports the specified schema language.
 This function is useful when there are multiple providers in the classpath.
 It gives more control to the application as it can specify which provider
 should be loaded.
Tip for Trouble-shooting
Setting the jaxp.debug system property will cause
 this method to print a lot of debug messages
 to System.err about what it is doing and where it is looking at.
 If you have problems try:

 java -Djaxp.debug=1 YourProgram ....
 

Parameters:
schemaLanguage - Specifies the schema language which the returned
                          SchemaFactory will understand. See
                          the list of available
                          schema languages for the possible values.
factoryClassName - fully qualified factory class name that provides implementation of javax.xml.validation.SchemaFactory.
classLoader - ClassLoader used to load the factory class. If null
                     current Thread's context classLoader is used to load the factory class.
Returns:
New instance of a SchemaFactory
Throws:
IllegalArgumentException - if factoryClassName is null, or
                   the factory class cannot be loaded, instantiated or doesn't
                   support the schema language specified in schemLanguage
                   parameter.
NullPointerException - If the schemaLanguage parameter is null.
Since:
1.6
See Also:
newInstance(String schemaLanguage)


"
SchemaFactory,newSchema(),abstract Schema,Creates a special Schema object.,"

newSchema
public abstract Schema newSchema()
                          throws SAXException
Creates a special Schema object.

 The exact semantics of the returned Schema object
 depend on the schema language for which this SchemaFactory
 is created.

 Also, implementations are allowed to use implementation-specific
 property/feature to alter the semantics of this method.
Implementors and developers should pay particular attention
 to how the features set on this SchemaFactory are
 processed by this special Schema.
 In some cases, for example, when the
 SchemaFactory and the class actually loading the
 schema come from different implementations, it may not be possible
 for SchemaFactory features to be inherited automatically.
 Developers should
 make sure that features, such as secure processing, are explicitly
 set in both places.
W3C XML Schema 1.0

 For XML Schema, this method creates a Schema object that
 performs validation by using location hints specified in documents.

 
 The returned Schema object assumes that if documents
 refer to the same URL in the schema location hints,
 they will always resolve to the same schema document. This
 asusmption allows implementations to reuse parsed results of
 schema documents so that multiple validations against the same
 schema will run faster.

 
 Note that the use of schema location hints introduces a
 vulnerability to denial-of-service attacks.


 RELAX NG

 RELAX NG does not support this operation.

Returns:
Always return non-null valid Schema object.
Throws:
UnsupportedOperationException - If this operation is not supported by the callee.
SAXException - If this operation is supported but failed for some reason.


"
SchemaFactory,newSchema(File schema),Schema,Parses the specified File as a schema and returns it as a Schema.,"

newSchema
public Schema newSchema(File schema)
                 throws SAXException
Parses the specified File as a schema and returns it as a Schema.
This is a convenience method for newSchema(Source schema).

Parameters:
schema - File that represents a schema.
Returns:
New Schema from parsing schema.
Throws:
SAXException - If a SAX error occurs during parsing.
NullPointerException - if schema is null.


"
SchemaFactory,newSchema(Source schema),Schema,Parses the specified source as a schema and returns it as a schema.,"

newSchema
public Schema newSchema(Source schema)
                 throws SAXException
Parses the specified source as a schema and returns it as a schema.
This is a convenience method for newSchema(Source[] schemas).

Parameters:
schema - Source that represents a schema.
Returns:
New Schema from parsing schema.
Throws:
SAXException - If a SAX error occurs during parsing.
NullPointerException - if schema is null.


"
SchemaFactory,newSchema(Source[] schemas),abstract Schema,Parses the specified source(s) as a schema and returns it as a schema.,"

newSchema
public abstract Schema newSchema(Source[] schemas)
                          throws SAXException
Parses the specified source(s) as a schema and returns it as a schema.

 
 The callee will read all the Sources and combine them into a
 single schema. The exact semantics of the combination depends on the schema
 language that this SchemaFactory object is created for.

 
 When an ErrorHandler is set, the callee will report all the errors
 found in sources to the handler. If the handler throws an exception, it will
 abort the schema compilation and the same exception will be thrown from
 this method. Also, after an error is reported to a handler, the callee is allowed
 to abort the further processing by throwing it. If an error handler is not set,
 the callee will throw the first error it finds in the sources.

 W3C XML Schema 1.0

 The resulting schema contains components from the specified sources.
 The same result would be achieved if all these sources were
 imported, using appropriate values for schemaLocation and namespace,
 into a single schema document with a different targetNamespace
 and no components of its own, if the import elements were given
 in the same order as the sources.  Section 4.2.3 of the XML Schema
 recommendation describes the options processors have in this
 regard.  While a processor should be consistent in its treatment of
 JAXP schema sources and XML Schema imports, the behaviour between
 JAXP-compliant parsers may vary; in particular, parsers may choose
 to ignore all but the first <import> for a given namespace,
 regardless of information provided in schemaLocation.

 
 If the parsed set of schemas includes error(s) as
 specified in the section 5.1 of the XML Schema spec, then
 the error must be reported to the ErrorHandler.

 RELAX NG
For RELAX NG, this method must throw UnsupportedOperationException
 if schemas.length!=1.

Parameters:
schemas - inputs to be parsed. SchemaFactory is required
      to recognize SAXSource,
      StreamSource,
      StAXSource,
      and DOMSource.
      Input schemas must be XML documents or
      XML elements and must not be null. For backwards compatibility,
      the results of passing anything other than
      a document or element are implementation-dependent.
      Implementations must either recognize and process the input
      or thrown an IllegalArgumentException.
Returns:
Always return a non-null valid Schema object.
      Note that when an error has been reported, there is no
      guarantee that the returned Schema object is
      meaningful.
Throws:
SAXException - If an error is found during processing the specified inputs.
      When an ErrorHandler is set, errors are reported to
      there first. See setErrorHandler(ErrorHandler).
NullPointerException - If the schemas parameter itself is null or
      any item in the array is null.
IllegalArgumentException - If any item in the array is not recognized by this method.
UnsupportedOperationException - If the schema language doesn't support this operation.


"
SchemaFactory,newSchema(URL schema),Schema,Parses the specified URL as a schema and returns it as a Schema.,"

newSchema
public Schema newSchema(URL schema)
                 throws SAXException
Parses the specified URL as a schema and returns it as a Schema.
This is a convenience method for newSchema(Source schema).

Parameters:
schema - URL that represents a schema.
Returns:
New Schema from parsing schema.
Throws:
SAXException - If a SAX error occurs during parsing.
NullPointerException - if schema is null.


"
SchemaFactory,setErrorHandler(ErrorHandler errorHandler),abstract void,Sets the ErrorHandler to receive errors encountered during the newSchema method invocation.,"

setErrorHandler
public abstract void setErrorHandler(ErrorHandler errorHandler)
Sets the ErrorHandler to receive errors encountered
 during the newSchema method invocation.

 
 Error handler can be used to customize the error handling process
 during schema parsing. When an ErrorHandler is set,
 errors found during the parsing of schemas will be first sent
 to the ErrorHandler.

 
 The error handler can abort the parsing of a schema immediately
 by throwing SAXException from the handler. Or for example
 it can print an error to the screen and try to continue the
 processing by returning normally from the ErrorHandler

 If any Throwable (or instances of its derived classes)
 is thrown from an ErrorHandler,
 the caller of the newSchema method will be thrown
 the same Throwable object.

 
SchemaFactory is not allowed to
 throw SAXException without first reporting it to
 ErrorHandler.

 
 Applications can call this method even during a Schema
 is being parsed.

 
 When the ErrorHandler is null, the implementation will
 behave as if the following ErrorHandler is set:
 
 class DraconianErrorHandler implements ErrorHandler {
     public void fatalError( SAXParseException e ) throws SAXException {
         throw e;
     }
     public void error( SAXParseException e ) throws SAXException {
         throw e;
     }
     public void warning( SAXParseException e ) throws SAXException {
         // noop
     }
 }
 

 When a new SchemaFactory object is created, initially
 this field is set to null. This field will NOT be
 inherited to Schemas, Validators, or
 ValidatorHandlers that are created from this SchemaFactory.

Parameters:
errorHandler - A new error handler to be set.
   This parameter can be null.


"
SchemaFactory,"setFeature(String name, boolean value)",void,"Set a feature for this SchemaFactory, Schemas created by this factory, and by extension, Validators and ValidatorHandlers created by those Schemas.","

setFeature
public void setFeature(String name,
                       boolean value)
                throws SAXNotRecognizedException,
                       SAXNotSupportedException
Set a feature for this SchemaFactory,
 Schemas created by this factory, and by extension,
 Validators and ValidatorHandlers created by
 those Schemas.
 
Implementors and developers should pay particular attention
 to how the special Schema object returned by newSchema() is processed. In some cases, for example, when the
 SchemaFactory and the class actually loading the
 schema come from different implementations, it may not be possible
 for SchemaFactory features to be inherited automatically.
 Developers should
 make sure that features, such as secure processing, are explicitly
 set in both places.
The feature name is any fully-qualified URI. It is
 possible for a SchemaFactory to expose a feature value but
 to be unable to change the current value.
All implementations are required to support the XMLConstants.FEATURE_SECURE_PROCESSING feature.
 When the feature is:


true: the implementation will limit XML processing to conform to implementation limits.
     Examples include enity expansion limits and XML Schema constructs that would consume large amounts of resources.
     If XML processing is limited for security reasons, it will be reported via a call to the registered
    ErrorHandler.fatalError(SAXParseException exception).
     See setErrorHandler(ErrorHandler errorHandler).
   

false: the implementation will processing XML according to the XML specifications without
     regard to possible implementation limits.
   


Parameters:
name - The feature name, which is a non-null fully-qualified URI.
value - The requested value of the feature (true or false).
Throws:
SAXNotRecognizedException - If the feature
   value can't be assigned or retrieved.
SAXNotSupportedException - When the
   SchemaFactory recognizes the feature name but
   cannot set the requested value.
NullPointerException - If name is null.
See Also:
getFeature(String)


"
SchemaFactory,"setProperty(String name, Object object)",void,Set the value of a property.,"

setProperty
public void setProperty(String name,
                        Object object)
                 throws SAXNotRecognizedException,
                        SAXNotSupportedException
Set the value of a property.

 The property name is any fully-qualified URI.  It is
 possible for a SchemaFactory to recognize a property name but
 to be unable to change the current value.

 All implementations that implement JAXP 1.5 or newer are required to
 support the XMLConstants.ACCESS_EXTERNAL_DTD and
 XMLConstants.ACCESS_EXTERNAL_SCHEMA properties.
 


Access to external DTDs in Schema files is restricted to the protocols
      specified by the XMLConstants.ACCESS_EXTERNAL_DTD property.
      If access is denied during the creation of new Schema due to the restriction
      of this property, SAXException will be thrown by the
      newSchema(Source) or newSchema(File)
      or newSchema(URL) or  or newSchema(Source[]) method.
Access to external DTDs in xml source files is restricted to the protocols
      specified by the XMLConstants.ACCESS_EXTERNAL_DTD property.
      If access is denied during validation due to the restriction
      of this property, SAXException will be thrown by the
      Validator.validate(Source) or
      Validator.validate(Source, Result) method.
Access to external reference set by the schemaLocation attribute is
      restricted to the protocols specified by the
      XMLConstants.ACCESS_EXTERNAL_SCHEMA property.
      If access is denied during validation due to the restriction of this property,
      SAXException will be thrown by the
      Validator.validate(Source) or
      Validator.validate(Source, Result) method.
Access to external reference set by the Import
      and Include element is restricted to the protocols specified by the
      XMLConstants.ACCESS_EXTERNAL_SCHEMA property.
      If access is denied during the creation of new Schema due to the restriction
      of this property, SAXException will be thrown by the
      newSchema(Source) or newSchema(File)
      or newSchema(URL) or newSchema(Source[]) method.



Parameters:
name - The property name, which is a non-null fully-qualified URI.
object - The requested value for the property.
Throws:
SAXNotRecognizedException - If the property
   value can't be assigned or retrieved.
SAXNotSupportedException - When the
   SchemaFactory recognizes the property name but
   cannot set the requested value.
NullPointerException - If name is null.


"
SchemaFactory,setResourceResolver(LSResourceResolver resourceResolver),abstract void,Sets the LSResourceResolver to customize resource resolution when parsing schemas.,"

setResourceResolver
public abstract void setResourceResolver(LSResourceResolver resourceResolver)
Sets the LSResourceResolver to customize
 resource resolution when parsing schemas.

 
SchemaFactory uses a LSResourceResolver
 when it needs to locate external resources while parsing schemas,
 although exactly what constitutes ""locating external resources"" is
 up to each schema language. For example, for W3C XML Schema,
 this includes files <include>d or <import>ed,
 and DTD referenced from schema files, etc.

 
 Applications can call this method even during a Schema
 is being parsed.

 
 When the LSResourceResolver is null, the implementation will
 behave as if the following LSResourceResolver is set:
 
 class DumbDOMResourceResolver implements LSResourceResolver {
     public LSInput resolveResource(
         String publicId, String systemId, String baseURI) {

         return null; // always return null
     }
 }
 

 If a LSResourceResolver throws a RuntimeException
  (or instances of its derived classes),
 then the SchemaFactory will abort the parsing and
 the caller of the newSchema method will receive
 the same RuntimeException.

 
 When a new SchemaFactory object is created, initially
 this field is set to null.  This field will NOT be
 inherited to Schemas, Validators, or
 ValidatorHandlers that are created from this SchemaFactory.

Parameters:
resourceResolver - A new resource resolver to be set. This parameter can be null.


"
SchemaFactoryLoader,newFactory(String schemaLanguage),abstract SchemaFactory,Creates a new SchemaFactory object for the specified schema language.,"

newFactory
public abstract SchemaFactory newFactory(String schemaLanguage)
Creates a new SchemaFactory object for the specified
 schema language.

Parameters:
schemaLanguage - See 
      the list of available schema languages.
Returns:
null if the callee fails to create one.
Throws:
NullPointerException - If the schemaLanguage parameter is null.


"
TypeInfoProvider,getAttributeTypeInfo(int index),abstract TypeInfo,Returns the immutable TypeInfo object for the specified attribute of the current element.,"

getAttributeTypeInfo
public abstract TypeInfo getAttributeTypeInfo(int index)
Returns the immutable TypeInfo object for the specified
 attribute of the current element.

 
 The method may only be called by the startElement event of
 the ContentHandler that the application sets to the
 ValidatorHandler.

Parameters:
index - The index of the attribute. The same index for
      the Attributes object passed to the
      startElement callback.
Returns:
An immutable TypeInfo object that represents the
      type of the specified attribute.
      Note that the caller can keep references to the obtained
      TypeInfo longer than the callback scope.

      Otherwise, this method returns
      null if the validator is unable to
      determine the type.
Throws:
IndexOutOfBoundsException - If the index is invalid.
IllegalStateException - If this method is called from other ContentHandler
      methods.


"
TypeInfoProvider,getElementTypeInfo(),abstract TypeInfo,Returns the immutable TypeInfo object for the current element.,"

getElementTypeInfo
public abstract TypeInfo getElementTypeInfo()
Returns the immutable TypeInfo object for the current
 element.
The method may only be called by the startElement event
 or the endElement event
 of the ContentHandler that the application sets to
 the ValidatorHandler.
When W3C XML Schema validation is being performed, in the
 case where an element has a union type, the TypeInfo
 returned by a call to getElementTypeInfo() from the
 startElement
 event will be the union type. The TypeInfo
 returned by a call
 from the endElement event will be the actual member type used
 to validate the element.

Returns:
An immutable TypeInfo object that represents the
      type of the current element.
      Note that the caller can keep references to the obtained
      TypeInfo longer than the callback scope.

      Otherwise, this method returns
      null if the validator is unable to
      determine the type of the current element for some reason
      (for example, if the validator is recovering from
      an earlier error.)
Throws:
IllegalStateException - If this method is called from other ContentHandler
      methods.


"
TypeInfoProvider,isIdAttribute(int index),abstract boolean,Returns true if the specified attribute is determined to be ID.,"

isIdAttribute
public abstract boolean isIdAttribute(int index)
Returns true if the specified attribute is determined
 to be ID.

 
 Exacly how an attribute is ""determined to be ID"" is up to the
 schema language. In case of W3C XML Schema, this means
 that the actual type of the attribute is the built-in ID type
 or its derived type.

 
 A DocumentBuilder uses this information
 to properly implement Attr.isId().

 
 The method may only be called by the startElement event of
 the ContentHandler that the application sets to the
 ValidatorHandler.

Parameters:
index - The index of the attribute. The same index for
      the Attributes object passed to the
      startElement callback.
Returns:
true
      if the type of the specified attribute is ID.
Throws:
IndexOutOfBoundsException - If the index is invalid.
IllegalStateException - If this method is called from other ContentHandler
      methods.


"
TypeInfoProvider,isSpecified(int index),abstract boolean,Returns false if the attribute was added by the validator.,"

isSpecified
public abstract boolean isSpecified(int index)
Returns false if the attribute was added by the validator.

 
 This method provides information necessary for
 a DocumentBuilder to determine what
 the DOM tree should return from the Attr.getSpecified() method.

 
 The method may only be called by the startElement event of
 the ContentHandler that the application sets to the
 ValidatorHandler.

 
 A general guideline for validators is to return true if
 the attribute was originally present in the pipeline, and
 false if it was added by the validator.

Parameters:
index - The index of the attribute. The same index for
      the Attributes object passed to the
      startElement callback.
Returns:
true if the attribute was present before the validator
      processes input. false if the attribute was added
      by the validator.
Throws:
IndexOutOfBoundsException - If the index is invalid.
IllegalStateException - If this method is called from other ContentHandler
      methods.


"
Validator,getErrorHandler(),abstract ErrorHandler,Gets the current ErrorHandler set to this Validator.,"

getErrorHandler
public abstract ErrorHandler getErrorHandler()
Gets the current ErrorHandler set to this Validator.

Returns:
This method returns the object that was last set through
      the setErrorHandler(ErrorHandler) method, or null
      if that method has never been called since this Validator
      has created.
See Also:
setErrorHandler(ErrorHandler)


"
Validator,getFeature(String name),boolean,Look up the value of a feature flag.,"

getFeature
public boolean getFeature(String name)
                   throws SAXNotRecognizedException,
                          SAXNotSupportedException
Look up the value of a feature flag.

 The feature name is any fully-qualified URI.  It is
 possible for a Validator to recognize a feature name but
 temporarily be unable to return its value.
 Some feature values may be available only in specific
 contexts, such as before, during, or after a validation.

 Implementors are free (and encouraged) to invent their own features,
 using names built on their own URIs.

Parameters:
name - The feature name, which is a non-null fully-qualified URI.
Returns:
The current value of the feature (true or false).
Throws:
SAXNotRecognizedException - If the feature
   value can't be assigned or retrieved.
SAXNotSupportedException - When the
   Validator recognizes the feature name but
   cannot determine its value at this time.
NullPointerException - When the name parameter is null.
See Also:
setFeature(String, boolean)


"
Validator,getProperty(String name),Object,Look up the value of a property.,"

getProperty
public Object getProperty(String name)
                   throws SAXNotRecognizedException,
                          SAXNotSupportedException
Look up the value of a property.

 The property name is any fully-qualified URI.  It is
 possible for a Validator to recognize a property name but
 temporarily be unable to return its value.
 Some property values may be available only in specific
 contexts, such as before, during, or after a validation.
Validators are not required to recognize any specific
 property names.
Implementors are free (and encouraged) to invent their own properties,
 using names built on their own URIs.

Parameters:
name - The property name, which is a non-null fully-qualified URI.
Returns:
The current value of the property.
Throws:
SAXNotRecognizedException - If the property
   value can't be assigned or retrieved.
SAXNotSupportedException - When the
   XMLReader recognizes the property name but
   cannot determine its value at this time.
NullPointerException - When the name parameter is null.
See Also:
setProperty(String, Object)


"
Validator,getResourceResolver(),abstract LSResourceResolver,Gets the current LSResourceResolver set to this Validator.,"

getResourceResolver
public abstract LSResourceResolver getResourceResolver()
Gets the current LSResourceResolver set to this Validator.

Returns:
This method returns the object that was last set through
      the setResourceResolver(LSResourceResolver) method, or null
      if that method has never been called since this Validator
      has created.
See Also:
setErrorHandler(ErrorHandler)


"
Validator,reset(),abstract void,Reset this Validator to its original configuration.,"

reset
public abstract void reset()
Reset this Validator to its original configuration.
Validator is reset to the same state as when it was created with
 Schema.newValidator().
 reset() is designed to allow the reuse of existing Validators
 thus saving resources associated with the creation of new Validators.
The reset Validator is not guaranteed to have the same LSResourceResolver or ErrorHandler
Objects, e.g. Object.equals(Object obj).  It is guaranteed to have a functionally equal
 LSResourceResolver and ErrorHandler.

"
Validator,setErrorHandler(ErrorHandler errorHandler),abstract void,Sets the ErrorHandler to receive errors encountered during the validate method invocation.,"

setErrorHandler
public abstract void setErrorHandler(ErrorHandler errorHandler)
Sets the ErrorHandler to receive errors encountered
 during the validate method invocation.

 
 Error handler can be used to customize the error handling process
 during a validation. When an ErrorHandler is set,
 errors found during the validation will be first sent
 to the ErrorHandler.

 
 The error handler can abort further validation immediately
 by throwing SAXException from the handler. Or for example
 it can print an error to the screen and try to continue the
 validation by returning normally from the ErrorHandler

 If any Throwable is thrown from an ErrorHandler,
 the caller of the validate method will be thrown
 the same Throwable object.

 
Validator is not allowed to
 throw SAXException without first reporting it to
 ErrorHandler.

 
 When the ErrorHandler is null, the implementation will
 behave as if the following ErrorHandler is set:
 
 class DraconianErrorHandler implements ErrorHandler {
     public void fatalError( SAXParseException e ) throws SAXException {
         throw e;
     }
     public void error( SAXParseException e ) throws SAXException {
         throw e;
     }
     public void warning( SAXParseException e ) throws SAXException {
         // noop
     }
 }
 

 When a new Validator object is created, initially
 this field is set to null.

Parameters:
errorHandler - A new error handler to be set. This parameter can be null.


"
Validator,"setFeature(String name, boolean value)",void,Set the value of a feature flag.,"

setFeature
public void setFeature(String name,
                       boolean value)
                throws SAXNotRecognizedException,
                       SAXNotSupportedException
Set the value of a feature flag.

 
 Feature can be used to control the way a Validator
 parses schemas, although Validators are not required
 to recognize any specific feature names.
The feature name is any fully-qualified URI.  It is
 possible for a Validator to expose a feature value but
 to be unable to change the current value.
 Some feature values may be immutable or mutable only
 in specific contexts, such as before, during, or after
 a validation.

Parameters:
name - The feature name, which is a non-null fully-qualified URI.
value - The requested value of the feature (true or false).
Throws:
SAXNotRecognizedException - If the feature
   value can't be assigned or retrieved.
SAXNotSupportedException - When the
   Validator recognizes the feature name but
   cannot set the requested value.
NullPointerException - When the name parameter is null.
See Also:
getFeature(String)


"
Validator,"setProperty(String name, Object object)",void,Set the value of a property.,"

setProperty
public void setProperty(String name,
                        Object object)
                 throws SAXNotRecognizedException,
                        SAXNotSupportedException
Set the value of a property.

 The property name is any fully-qualified URI.  It is
 possible for a Validator to recognize a property name but
 to be unable to change the current value.
 Some property values may be immutable or mutable only
 in specific contexts, such as before, during, or after
 a validation.

 All implementations that implement JAXP 1.5 or newer are required to
 support the XMLConstants.ACCESS_EXTERNAL_DTD and
 XMLConstants.ACCESS_EXTERNAL_SCHEMA properties.
 


Access to external DTDs in source or Schema file is restricted to
      the protocols specified by the XMLConstants.ACCESS_EXTERNAL_DTD
      property.  If access is denied during validation due to the restriction
      of this property, SAXException will be thrown by the
      validate(Source) method.
Access to external reference set by the schemaLocation attribute is
      restricted to the protocols specified by the
      XMLConstants.ACCESS_EXTERNAL_SCHEMA property.
      If access is denied during validation due to the restriction of this property,
      SAXException will be thrown by the
      validate(Source) method.



Parameters:
name - The property name, which is a non-null fully-qualified URI.
object - The requested value for the property.
Throws:
SAXNotRecognizedException - If the property
   value can't be assigned or retrieved.
SAXNotSupportedException - When the
   Validator recognizes the property name but
   cannot set the requested value.
NullPointerException - When the name parameter is null.


"
Validator,setResourceResolver(LSResourceResolver resourceResolver),abstract void,Sets the LSResourceResolver to customize resource resolution while in a validation episode.,"

setResourceResolver
public abstract void setResourceResolver(LSResourceResolver resourceResolver)
Sets the LSResourceResolver to customize
 resource resolution while in a validation episode.

 
Validator uses a LSResourceResolver
 when it needs to locate external resources while a validation,
 although exactly what constitutes ""locating external resources"" is
 up to each schema language.

 
 When the LSResourceResolver is null, the implementation will
 behave as if the following LSResourceResolver is set:
 
 class DumbLSResourceResolver implements LSResourceResolver {
     public LSInput resolveResource(
         String publicId, String systemId, String baseURI) {

         return null; // always return null
     }
 }
 

 If a LSResourceResolver throws a RuntimeException
  (or instances of its derived classes),
 then the Validator will abort the parsing and
 the caller of the validate method will receive
 the same RuntimeException.

 
 When a new Validator object is created, initially
 this field is set to null.

Parameters:
resourceResolver - A new resource resolver to be set. This parameter can be null.


"
Validator,validate(Source source),void,Validates the specified input.,"

validate
public void validate(Source source)
              throws SAXException,
                     IOException
Validates the specified input.

 This is just a convenience method for
 validate(Source source, Result result)
 with result of null.

Parameters:
source - XML to be validated. Must be an XML document or
      XML element and must not be null. For backwards compatibility,
      the results of attempting to validate anything other than
      a document or element are implementation-dependent.
      Implementations must either recognize and process the input
      or throw an IllegalArgumentException.
Throws:
IllegalArgumentException - If the Source
      is an XML artifact that the implementation cannot
      validate (for example, a processing instruction).
SAXException - If the ErrorHandler throws a SAXException or
      if a fatal error is found and the ErrorHandler returns
      normally.
IOException - If the validator is processing a
      SAXSource and the
      underlying XMLReader throws an
      IOException.
NullPointerException - If source is
   null.
See Also:
validate(Source source, Result result)


"
Validator,"validate(Source source, Result result)",abstract void,Validates the specified input and send the augmented validation result to the specified output.,"

validate
public abstract void validate(Source source,
                              Result result)
                       throws SAXException,
                              IOException
Validates the specified input and send the augmented validation
 result to the specified output.
This method places the following restrictions on the types of
 the Source/Result accepted.



Source / Result Accepted



StreamSource
SAXSource
DOMSource
StAXSource




null
OK
OK
OK
OK


StreamResult
OK
IllegalArgumentException
IllegalArgumentException
IllegalArgumentException


SAXResult
IllegalArgumentException
OK
IllegalArgumentException
IllegalArgumentException


DOMResult
IllegalArgumentException
IllegalArgumentException
OK
IllegalArgumentException


StAXResult
IllegalArgumentException
IllegalArgumentException
IllegalArgumentException
OK



To validate one Source into another kind of
 Result, use the identity transformer (see
 TransformerFactory.newTransformer()).
Errors found during the validation is sent to the specified
 ErrorHandler.
If a document is valid, or if a document contains some errors
 but none of them were fatal and the ErrorHandler didn't
 throw any exception, then the method returns normally.

Parameters:
source - XML to be validated. Must be an XML document or
      XML element and must not be null. For backwards compatibility,
      the results of attempting to validate anything other than
      a document or element are implementation-dependent.
      Implementations must either recognize and process the input
      or throw an IllegalArgumentException.
result - The Result object that receives (possibly augmented)
      XML. This parameter can be null if the caller is not interested
      in it.

      Note that when a DOMResult is used,
      a validator might just pass the same DOM node from
      DOMSource to DOMResult
      (in which case source.getNode()==result.getNode()),
      it might copy the entire DOM tree, or it might alter the
      node given by the source.
Throws:
IllegalArgumentException - If the Result type doesn't match the
      Source type of if the Source
      is an XML artifact that the implementation cannot
      validate (for example, a processing instruction).
SAXException - If the ErrorHandler throws a
      SAXException or
      if a fatal error is found and the ErrorHandler returns
      normally.
IOException - If the validator is processing a
      SAXSource and the
      underlying XMLReader throws an
      IOException.
NullPointerException - If the source parameter is null.
See Also:
validate(Source source)


"
ValidatorHandler,getContentHandler(),abstract ContentHandler,Gets the ContentHandler which receives the augmented validation result.,"

getContentHandler
public abstract ContentHandler getContentHandler()
Gets the ContentHandler which receives the
 augmented validation result.

Returns:
This method returns the object that was last set through
      the getContentHandler() method, or null
      if that method has never been called since this ValidatorHandler
      has created.
See Also:
setContentHandler(ContentHandler)


"
ValidatorHandler,getErrorHandler(),abstract ErrorHandler,Gets the current ErrorHandler set to this ValidatorHandler.,"

getErrorHandler
public abstract ErrorHandler getErrorHandler()
Gets the current ErrorHandler set to this ValidatorHandler.

Returns:
This method returns the object that was last set through
      the setErrorHandler(ErrorHandler) method, or null
      if that method has never been called since this ValidatorHandler
      has created.
See Also:
setErrorHandler(ErrorHandler)


"
ValidatorHandler,getFeature(String name),boolean,Look up the value of a feature flag.,"

getFeature
public boolean getFeature(String name)
                   throws SAXNotRecognizedException,
                          SAXNotSupportedException
Look up the value of a feature flag.

 The feature name is any fully-qualified URI.  It is
 possible for a ValidatorHandler to recognize a feature name but
 temporarily be unable to return its value.
 Some feature values may be available only in specific
 contexts, such as before, during, or after a validation.

 Implementors are free (and encouraged) to invent their own features,
 using names built on their own URIs.

Parameters:
name - The feature name, which is a non-null fully-qualified URI.
Returns:
The current value of the feature (true or false).
Throws:
SAXNotRecognizedException - If the feature
   value can't be assigned or retrieved.
SAXNotSupportedException - When the
   ValidatorHandler recognizes the feature name but
   cannot determine its value at this time.
NullPointerException - When name is null.
See Also:
setFeature(String, boolean)


"
ValidatorHandler,getProperty(String name),Object,Look up the value of a property.,"

getProperty
public Object getProperty(String name)
                   throws SAXNotRecognizedException,
                          SAXNotSupportedException
Look up the value of a property.

 The property name is any fully-qualified URI.  It is
 possible for a ValidatorHandler to recognize a property name but
 temporarily be unable to return its value.
 Some property values may be available only in specific
 contexts, such as before, during, or after a validation.
ValidatorHandlers are not required to recognize any specific
 property names.
Implementors are free (and encouraged) to invent their own properties,
 using names built on their own URIs.

Parameters:
name - The property name, which is a non-null fully-qualified URI.
Returns:
The current value of the property.
Throws:
SAXNotRecognizedException - If the property
   value can't be assigned or retrieved.
SAXNotSupportedException - When the
   XMLReader recognizes the property name but
   cannot determine its value at this time.
NullPointerException - When name is null.
See Also:
setProperty(String, Object)


"
ValidatorHandler,getResourceResolver(),abstract LSResourceResolver,Gets the current LSResourceResolver set to this ValidatorHandler.,"

getResourceResolver
public abstract LSResourceResolver getResourceResolver()
Gets the current LSResourceResolver set to this ValidatorHandler.

Returns:
This method returns the object that was last set through
      the setResourceResolver(LSResourceResolver) method, or null
      if that method has never been called since this ValidatorHandler
      has created.
See Also:
setErrorHandler(ErrorHandler)


"
ValidatorHandler,getTypeInfoProvider(),abstract TypeInfoProvider,Obtains the TypeInfoProvider implementation of this ValidatorHandler.,"

getTypeInfoProvider
public abstract TypeInfoProvider getTypeInfoProvider()
Obtains the TypeInfoProvider implementation of this
 ValidatorHandler.

 
 The obtained TypeInfoProvider can be queried during a parse
 to access the type information determined by the validator.

 
 Some schema languages do not define the notion of type,
 for those languages, this method may not be supported.
 However, to be compliant with this specification, implementations
 for W3C XML Schema 1.0 must support this operation.

Returns:
null if the validator / schema language does not support
      the notion of TypeInfo.
      Otherwise a non-null valid TypeInfoProvider.


"
ValidatorHandler,setContentHandler(ContentHandler receiver),abstract void,Sets the ContentHandler which receives the augmented validation result.,"

setContentHandler
public abstract void setContentHandler(ContentHandler receiver)
Sets the ContentHandler which receives
 the augmented validation result.

 
 When a ContentHandler is specified, a
 ValidatorHandler will work as a filter
 and basically copy the incoming events to the
 specified ContentHandler.

 
 In doing so, a ValidatorHandler may modify
 the events, for example by adding defaulted attributes.

 
 A ValidatorHandler may buffer events to certain
 extent, but to allow ValidatorHandler to be used
 by a parser, the following requirement has to be met.

 
When
      ContentHandler.startElement(String, String, String, Attributes),
      ContentHandler.endElement(String, String, String),
      ContentHandler.startDocument(), or
      ContentHandler.endDocument()
      are invoked on a ValidatorHandler,
      the same method on the user-specified ContentHandler
      must be invoked for the same event before the callback
      returns.
  ValidatorHandler may not introduce new elements that
      were not present in the input.

  ValidatorHandler may not remove attributes that were
      present in the input.
 

 When a callback method on the specified ContentHandler
 throws an exception, the same exception object must be thrown
 from the ValidatorHandler. The ErrorHandler
 should not be notified of such an exception.

 
 This method can be called even during a middle of a validation.

Parameters:
receiver - A ContentHandler or a null value.


"
ValidatorHandler,setErrorHandler(ErrorHandler errorHandler),abstract void,Sets the ErrorHandler to receive errors encountered during the validation.,"

setErrorHandler
public abstract void setErrorHandler(ErrorHandler errorHandler)
Sets the ErrorHandler to receive errors encountered
 during the validation.

 
 Error handler can be used to customize the error handling process
 during a validation. When an ErrorHandler is set,
 errors found during the validation will be first sent
 to the ErrorHandler.

 
 The error handler can abort further validation immediately
 by throwing SAXException from the handler. Or for example
 it can print an error to the screen and try to continue the
 validation by returning normally from the ErrorHandler

 If any Throwable is thrown from an ErrorHandler,
 the same Throwable object will be thrown toward the
 root of the call stack.

 
ValidatorHandler is not allowed to
 throw SAXException without first reporting it to
 ErrorHandler.

 
 When the ErrorHandler is null, the implementation will
 behave as if the following ErrorHandler is set:
 
 class DraconianErrorHandler implements ErrorHandler {
     public void fatalError( SAXParseException e ) throws SAXException {
         throw e;
     }
     public void error( SAXParseException e ) throws SAXException {
         throw e;
     }
     public void warning( SAXParseException e ) throws SAXException {
         // noop
     }
 }
 

 When a new ValidatorHandler object is created, initially
 this field is set to null.

Parameters:
errorHandler - A new error handler to be set. This parameter can be null.


"
ValidatorHandler,"setFeature(String name, boolean value)",void,Set a feature for this ValidatorHandler.,"

setFeature
public void setFeature(String name,
                       boolean value)
                throws SAXNotRecognizedException,
                       SAXNotSupportedException
Set a feature for this ValidatorHandler.
Feature can be used to control the way a
 ValidatorHandler parses schemas. The feature name is
 any fully-qualified URI. It is possible for a
 SchemaFactory to
 expose a feature value but to be unable to change the current
 value. Some feature values may be immutable or mutable only in
 specific contexts, such as before, during, or after a
 validation.
All implementations are required to support the XMLConstants.FEATURE_SECURE_PROCESSING feature.
 When the feature is:


true: the implementation will limit XML processing to conform to implementation limits.
     Examples include enity expansion limits and XML Schema constructs that would consume large amounts of resources.
     If XML processing is limited for security reasons, it will be reported via a call to the registered
    ErrorHandler.fatalError(SAXParseException exception).
     See setErrorHandler(ErrorHandler errorHandler).
   

false: the implementation will processing XML according to the XML specifications without
     regard to possible implementation limits.
   


Parameters:
name - The feature name, which is a non-null fully-qualified URI.
value - The requested value of the feature (true or false).
Throws:
SAXNotRecognizedException - If the feature
   value can't be assigned or retrieved.
SAXNotSupportedException - When the
   ValidatorHandler recognizes the feature name but
   cannot set the requested value.
NullPointerException - When name is null.
See Also:
getFeature(String)


"
ValidatorHandler,"setProperty(String name, Object object)",void,Set the value of a property.,"

setProperty
public void setProperty(String name,
                        Object object)
                 throws SAXNotRecognizedException,
                        SAXNotSupportedException
Set the value of a property.

 The property name is any fully-qualified URI.  It is
 possible for a ValidatorHandler to recognize a property name but
 to be unable to change the current value.
 Some property values may be immutable or mutable only
 in specific contexts, such as before, during, or after
 a validation.
ValidatorHandlers are not required to recognize setting
 any specific property names.

Parameters:
name - The property name, which is a non-null fully-qualified URI.
object - The requested value for the property.
Throws:
SAXNotRecognizedException - If the property
   value can't be assigned or retrieved.
SAXNotSupportedException - When the
   ValidatorHandler recognizes the property name but
   cannot set the requested value.
NullPointerException - When name is null.


"
ValidatorHandler,setResourceResolver(LSResourceResolver resourceResolver),abstract void,Sets the LSResourceResolver to customize resource resolution while in a validation episode.,"

setResourceResolver
public abstract void setResourceResolver(LSResourceResolver resourceResolver)
Sets the LSResourceResolver to customize
 resource resolution while in a validation episode.

 
ValidatorHandler uses a LSResourceResolver
 when it needs to locate external resources while a validation,
 although exactly what constitutes ""locating external resources"" is
 up to each schema language.

 
 When the LSResourceResolver is null, the implementation will
 behave as if the following LSResourceResolver is set:
 
 class DumbLSResourceResolver implements LSResourceResolver {
     public LSInput resolveResource(
         String publicId, String systemId, String baseURI) {

         return null; // always return null
     }
 }
 

 If a LSResourceResolver throws a RuntimeException
  (or instances of its derived classes),
 then the ValidatorHandler will abort the parsing and
 the caller of the validate method will receive
 the same RuntimeException.

 
 When a new ValidatorHandler object is created, initially
 this field is set to null.

Parameters:
resourceResolver - A new resource resolver to be set. This parameter can be null.


"
