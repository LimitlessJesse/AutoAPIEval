ClassName,Method,Return Type,Description,Full Description
TemporalAdjusters,"dayOfWeekInMonth(int ordinal, DayOfWeek dayOfWeek)",static TemporalAdjuster,"Returns the day-of-week in month adjuster, which returns a new date in the same month with the ordinal day-of-week.","

dayOfWeekInMonth
public static TemporalAdjuster dayOfWeekInMonth(int ordinal,
                                                DayOfWeek dayOfWeek)
Returns the day-of-week in month adjuster, which returns a new date
 in the same month with the ordinal day-of-week.
 This is used for expressions like the 'second Tuesday in March'.
 
 The ISO calendar system behaves as follows:
 The input 2011-12-15 for (1,TUESDAY) will return 2011-12-06.
 The input 2011-12-15 for (2,TUESDAY) will return 2011-12-13.
 The input 2011-12-15 for (3,TUESDAY) will return 2011-12-20.
 The input 2011-12-15 for (4,TUESDAY) will return 2011-12-27.
 The input 2011-12-15 for (5,TUESDAY) will return 2012-01-03.
 The input 2011-12-15 for (-1,TUESDAY) will return 2011-12-27 (last in month).
 The input 2011-12-15 for (-4,TUESDAY) will return 2011-12-06 (3 weeks before last in month).
 The input 2011-12-15 for (-5,TUESDAY) will return 2011-11-29 (4 weeks before last in month).
 The input 2011-12-15 for (0,TUESDAY) will return 2011-11-29 (last in previous month).

 For a positive or zero ordinal, the algorithm is equivalent to finding the first
 day-of-week that matches within the month and then adding a number of weeks to it.
 For a negative ordinal, the algorithm is equivalent to finding the last
 day-of-week that matches within the month and then subtracting a number of weeks to it.
 The ordinal number of weeks is not validated and is interpreted leniently
 according to this algorithm. This definition means that an ordinal of zero finds
 the last matching day-of-week in the previous month.
 
 The behavior is suitable for use with most calendar systems.
 It uses the DAY_OF_WEEK and DAY_OF_MONTH fields
 and the DAYS unit, and assumes a seven day week.

Parameters:
ordinal - the week within the month, unbounded but typically from -5 to 5
dayOfWeek - the day-of-week, not null
Returns:
the day-of-week in month adjuster, not null


"
TemporalAdjusters,firstDayOfMonth(),static TemporalAdjuster,"Returns the ""first day of month"" adjuster, which returns a new date set to the first day of the current month.","

firstDayOfMonth
public static TemporalAdjuster firstDayOfMonth()
Returns the ""first day of month"" adjuster, which returns a new date set to
 the first day of the current month.
 
 The ISO calendar system behaves as follows:
 The input 2011-01-15 will return 2011-01-01.
 The input 2011-02-15 will return 2011-02-01.
 
 The behavior is suitable for use with most calendar systems.
 It is equivalent to:
 
  temporal.with(DAY_OF_MONTH, 1);
 

Returns:
the first day-of-month adjuster, not null


"
TemporalAdjusters,firstDayOfNextMonth(),static TemporalAdjuster,"Returns the ""first day of next month"" adjuster, which returns a new date set to the first day of the next month.","

firstDayOfNextMonth
public static TemporalAdjuster firstDayOfNextMonth()
Returns the ""first day of next month"" adjuster, which returns a new date set to
 the first day of the next month.
 
 The ISO calendar system behaves as follows:
 The input 2011-01-15 will return 2011-02-01.
 The input 2011-02-15 will return 2011-03-01.
 
 The behavior is suitable for use with most calendar systems.
 It is equivalent to:
 
  temporal.with(DAY_OF_MONTH, 1).plus(1, MONTHS);
 

Returns:
the first day of next month adjuster, not null


"
TemporalAdjusters,firstDayOfNextYear(),static TemporalAdjuster,"Returns the ""first day of next year"" adjuster, which returns a new date set to the first day of the next year.","

firstDayOfNextYear
public static TemporalAdjuster firstDayOfNextYear()
Returns the ""first day of next year"" adjuster, which returns a new date set to
 the first day of the next year.
 
 The ISO calendar system behaves as follows:
 The input 2011-01-15 will return 2012-01-01.
 
 The behavior is suitable for use with most calendar systems.
 It is equivalent to:
 
  temporal.with(DAY_OF_YEAR, 1).plus(1, YEARS);
 

Returns:
the first day of next month adjuster, not null


"
TemporalAdjusters,firstDayOfYear(),static TemporalAdjuster,"Returns the ""first day of year"" adjuster, which returns a new date set to the first day of the current year.","

firstDayOfYear
public static TemporalAdjuster firstDayOfYear()
Returns the ""first day of year"" adjuster, which returns a new date set to
 the first day of the current year.
 
 The ISO calendar system behaves as follows:
 The input 2011-01-15 will return 2011-01-01.
 The input 2011-02-15 will return 2011-01-01.

 The behavior is suitable for use with most calendar systems.
 It is equivalent to:
 
  temporal.with(DAY_OF_YEAR, 1);
 

Returns:
the first day-of-year adjuster, not null


"
TemporalAdjusters,firstInMonth(DayOfWeek dayOfWeek),static TemporalAdjuster,"Returns the first in month adjuster, which returns a new date in the same month with the first matching day-of-week.","

firstInMonth
public static TemporalAdjuster firstInMonth(DayOfWeek dayOfWeek)
Returns the first in month adjuster, which returns a new date
 in the same month with the first matching day-of-week.
 This is used for expressions like 'first Tuesday in March'.
 
 The ISO calendar system behaves as follows:
 The input 2011-12-15 for (MONDAY) will return 2011-12-05.
 The input 2011-12-15 for (FRIDAY) will return 2011-12-02.

 The behavior is suitable for use with most calendar systems.
 It uses the DAY_OF_WEEK and DAY_OF_MONTH fields
 and the DAYS unit, and assumes a seven day week.

Parameters:
dayOfWeek - the day-of-week, not null
Returns:
the first in month adjuster, not null


"
TemporalAdjusters,lastDayOfMonth(),static TemporalAdjuster,"Returns the ""last day of month"" adjuster, which returns a new date set to the last day of the current month.","

lastDayOfMonth
public static TemporalAdjuster lastDayOfMonth()
Returns the ""last day of month"" adjuster, which returns a new date set to
 the last day of the current month.
 
 The ISO calendar system behaves as follows:
 The input 2011-01-15 will return 2011-01-31.
 The input 2011-02-15 will return 2011-02-28.
 The input 2012-02-15 will return 2012-02-29 (leap year).
 The input 2011-04-15 will return 2011-04-30.
 
 The behavior is suitable for use with most calendar systems.
 It is equivalent to:
 
  long lastDay = temporal.range(DAY_OF_MONTH).getMaximum();
  temporal.with(DAY_OF_MONTH, lastDay);
 

Returns:
the last day-of-month adjuster, not null


"
TemporalAdjusters,lastDayOfYear(),static TemporalAdjuster,"Returns the ""last day of year"" adjuster, which returns a new date set to the last day of the current year.","

lastDayOfYear
public static TemporalAdjuster lastDayOfYear()
Returns the ""last day of year"" adjuster, which returns a new date set to
 the last day of the current year.
 
 The ISO calendar system behaves as follows:
 The input 2011-01-15 will return 2011-12-31.
 The input 2011-02-15 will return 2011-12-31.

 The behavior is suitable for use with most calendar systems.
 It is equivalent to:
 
  long lastDay = temporal.range(DAY_OF_YEAR).getMaximum();
  temporal.with(DAY_OF_YEAR, lastDay);
 

Returns:
the last day-of-year adjuster, not null


"
TemporalAdjusters,lastInMonth(DayOfWeek dayOfWeek),static TemporalAdjuster,"Returns the last in month adjuster, which returns a new date in the same month with the last matching day-of-week.","

lastInMonth
public static TemporalAdjuster lastInMonth(DayOfWeek dayOfWeek)
Returns the last in month adjuster, which returns a new date
 in the same month with the last matching day-of-week.
 This is used for expressions like 'last Tuesday in March'.
 
 The ISO calendar system behaves as follows:
 The input 2011-12-15 for (MONDAY) will return 2011-12-26.
 The input 2011-12-15 for (FRIDAY) will return 2011-12-30.

 The behavior is suitable for use with most calendar systems.
 It uses the DAY_OF_WEEK and DAY_OF_MONTH fields
 and the DAYS unit, and assumes a seven day week.

Parameters:
dayOfWeek - the day-of-week, not null
Returns:
the first in month adjuster, not null


"
TemporalAdjusters,next(DayOfWeek dayOfWeek),static TemporalAdjuster,"Returns the next day-of-week adjuster, which adjusts the date to the first occurrence of the specified day-of-week after the date being adjusted.","

next
public static TemporalAdjuster next(DayOfWeek dayOfWeek)
Returns the next day-of-week adjuster, which adjusts the date to the
 first occurrence of the specified day-of-week after the date being adjusted.
 
 The ISO calendar system behaves as follows:
 The input 2011-01-15 (a Saturday) for parameter (MONDAY) will return 2011-01-17 (two days later).
 The input 2011-01-15 (a Saturday) for parameter (WEDNESDAY) will return 2011-01-19 (four days later).
 The input 2011-01-15 (a Saturday) for parameter (SATURDAY) will return 2011-01-22 (seven days later).
 
 The behavior is suitable for use with most calendar systems.
 It uses the DAY_OF_WEEK field and the DAYS unit,
 and assumes a seven day week.

Parameters:
dayOfWeek - the day-of-week to move the date to, not null
Returns:
the next day-of-week adjuster, not null


"
TemporalAdjusters,nextOrSame(DayOfWeek dayOfWeek),static TemporalAdjuster,"Returns the next-or-same day-of-week adjuster, which adjusts the date to the first occurrence of the specified day-of-week after the date being adjusted unless it is already on that day in which case the same object is returned.","

nextOrSame
public static TemporalAdjuster nextOrSame(DayOfWeek dayOfWeek)
Returns the next-or-same day-of-week adjuster, which adjusts the date to the
 first occurrence of the specified day-of-week after the date being adjusted
 unless it is already on that day in which case the same object is returned.
 
 The ISO calendar system behaves as follows:
 The input 2011-01-15 (a Saturday) for parameter (MONDAY) will return 2011-01-17 (two days later).
 The input 2011-01-15 (a Saturday) for parameter (WEDNESDAY) will return 2011-01-19 (four days later).
 The input 2011-01-15 (a Saturday) for parameter (SATURDAY) will return 2011-01-15 (same as input).
 
 The behavior is suitable for use with most calendar systems.
 It uses the DAY_OF_WEEK field and the DAYS unit,
 and assumes a seven day week.

Parameters:
dayOfWeek - the day-of-week to check for or move the date to, not null
Returns:
the next-or-same day-of-week adjuster, not null


"
TemporalAdjusters,ofDateAdjuster(UnaryOperator<LocalDate> dateBasedAdjuster),static TemporalAdjuster,Obtains a TemporalAdjuster that wraps a date adjuster.,"

ofDateAdjuster
public static TemporalAdjuster ofDateAdjuster(UnaryOperator<LocalDate> dateBasedAdjuster)
Obtains a TemporalAdjuster that wraps a date adjuster.
 
 The TemporalAdjuster is based on the low level Temporal interface.
 This method allows an adjustment from LocalDate to LocalDate
 to be wrapped to match the temporal-based interface.
 This is provided for convenience to make user-written adjusters simpler.
 
 In general, user-written adjusters should be static constants:
 
  static TemporalAdjuster TWO_DAYS_LATER =
       TemporalAdjusters.ofDateAdjuster(date -> date.plusDays(2));
 

Parameters:
dateBasedAdjuster - the date-based adjuster, not null
Returns:
the temporal adjuster wrapping on the date adjuster, not null


"
TemporalAdjusters,previous(DayOfWeek dayOfWeek),static TemporalAdjuster,"Returns the previous day-of-week adjuster, which adjusts the date to the first occurrence of the specified day-of-week before the date being adjusted.","

previous
public static TemporalAdjuster previous(DayOfWeek dayOfWeek)
Returns the previous day-of-week adjuster, which adjusts the date to the
 first occurrence of the specified day-of-week before the date being adjusted.
 
 The ISO calendar system behaves as follows:
 The input 2011-01-15 (a Saturday) for parameter (MONDAY) will return 2011-01-10 (five days earlier).
 The input 2011-01-15 (a Saturday) for parameter (WEDNESDAY) will return 2011-01-12 (three days earlier).
 The input 2011-01-15 (a Saturday) for parameter (SATURDAY) will return 2011-01-08 (seven days earlier).
 
 The behavior is suitable for use with most calendar systems.
 It uses the DAY_OF_WEEK field and the DAYS unit,
 and assumes a seven day week.

Parameters:
dayOfWeek - the day-of-week to move the date to, not null
Returns:
the previous day-of-week adjuster, not null


"
TemporalAdjusters,previousOrSame(DayOfWeek dayOfWeek),static TemporalAdjuster,"Returns the previous-or-same day-of-week adjuster, which adjusts the date to the first occurrence of the specified day-of-week before the date being adjusted unless it is already on that day in which case the same object is returned.","

previousOrSame
public static TemporalAdjuster previousOrSame(DayOfWeek dayOfWeek)
Returns the previous-or-same day-of-week adjuster, which adjusts the date to the
 first occurrence of the specified day-of-week before the date being adjusted
 unless it is already on that day in which case the same object is returned.
 
 The ISO calendar system behaves as follows:
 The input 2011-01-15 (a Saturday) for parameter (MONDAY) will return 2011-01-10 (five days earlier).
 The input 2011-01-15 (a Saturday) for parameter (WEDNESDAY) will return 2011-01-12 (three days earlier).
 The input 2011-01-15 (a Saturday) for parameter (SATURDAY) will return 2011-01-15 (same as input).
 
 The behavior is suitable for use with most calendar systems.
 It uses the DAY_OF_WEEK field and the DAYS unit,
 and assumes a seven day week.

Parameters:
dayOfWeek - the day-of-week to check for or move the date to, not null
Returns:
the previous-or-same day-of-week adjuster, not null


"
TemporalQueries,chronology(),static TemporalQuery<Chronology>,A query for the Chronology.,"

chronology
public static TemporalQuery<Chronology> chronology()
A query for the Chronology.
 
 This queries a TemporalAccessor for the chronology.
 If the target TemporalAccessor represents a date, or part of a date,
 then it should return the chronology that the date is expressed in.
 As a result of this definition, objects only representing time, such as
 LocalTime, will return null.
 
 The result from JDK classes implementing TemporalAccessor is as follows:
LocalDate returns IsoChronology.INSTANCE
LocalTime returns null (does not represent a date)
LocalDateTime returns IsoChronology.INSTANCE
ZonedDateTime returns IsoChronology.INSTANCE
OffsetTime returns null (does not represent a date)
OffsetDateTime returns IsoChronology.INSTANCE
ChronoLocalDate returns the associated chronology
ChronoLocalDateTime returns the associated chronology
ChronoZonedDateTime returns the associated chronology
Era returns the associated chronology
DayOfWeek returns null (shared across chronologies)
Month returns IsoChronology.INSTANCE
Year returns IsoChronology.INSTANCE
YearMonth returns IsoChronology.INSTANCE
MonthDay returns null IsoChronology.INSTANCE
ZoneOffset returns null (does not represent a date)
Instant returns null (does not represent a date)

 The method Chronology.from(TemporalAccessor) can be used as a
 TemporalQuery via a method reference, Chronology::from.
 That method is equivalent to this query, except that it throws an
 exception if a chronology cannot be obtained.

Returns:
a query that can obtain the chronology of a temporal, not null


"
TemporalQueries,localDate(),static TemporalQuery<LocalDate>,A query for LocalDate returning null if not found.,"

localDate
public static TemporalQuery<LocalDate> localDate()
A query for LocalDate returning null if not found.
 
 This returns a TemporalQuery that can be used to query a temporal
 object for the local date. The query will return null if the temporal
 object cannot supply a local date.
 
 The query implementation examines the EPOCH_DAY
 field and uses it to create a LocalDate.
 
 The method ZoneOffset.from(TemporalAccessor) can be used as a
 TemporalQuery via a method reference, LocalDate::from.
 This query and LocalDate::from will return the same result if the
 temporal object contains a date. If the temporal object does not contain
 a date, then the method reference will throw an exception, whereas this
 query will return null.

Returns:
a query that can obtain the date of a temporal, not null


"
TemporalQueries,localTime(),static TemporalQuery<LocalTime>,A query for LocalTime returning null if not found.,"

localTime
public static TemporalQuery<LocalTime> localTime()
A query for LocalTime returning null if not found.
 
 This returns a TemporalQuery that can be used to query a temporal
 object for the local time. The query will return null if the temporal
 object cannot supply a local time.
 
 The query implementation examines the NANO_OF_DAY
 field and uses it to create a LocalTime.
 
 The method ZoneOffset.from(TemporalAccessor) can be used as a
 TemporalQuery via a method reference, LocalTime::from.
 This query and LocalTime::from will return the same result if the
 temporal object contains a time. If the temporal object does not contain
 a time, then the method reference will throw an exception, whereas this
 query will return null.

Returns:
a query that can obtain the time of a temporal, not null


"
TemporalQueries,offset(),static TemporalQuery<ZoneOffset>,A query for ZoneOffset returning null if not found.,"

offset
public static TemporalQuery<ZoneOffset> offset()
A query for ZoneOffset returning null if not found.
 
 This returns a TemporalQuery that can be used to query a temporal
 object for the offset. The query will return null if the temporal
 object cannot supply an offset.
 
 The query implementation examines the OFFSET_SECONDS
 field and uses it to create a ZoneOffset.
 
 The method ZoneOffset.from(TemporalAccessor) can be used as a
 TemporalQuery via a method reference, ZoneOffset::from.
 This query and ZoneOffset::from will return the same result if the
 temporal object contains an offset. If the temporal object does not contain
 an offset, then the method reference will throw an exception, whereas this
 query will return null.

Returns:
a query that can obtain the offset of a temporal, not null


"
TemporalQueries,precision(),static TemporalQuery<TemporalUnit>,A query for the smallest supported unit.,"

precision
public static TemporalQuery<TemporalUnit> precision()
A query for the smallest supported unit.
 
 This queries a TemporalAccessor for the time precision.
 If the target TemporalAccessor represents a consistent or complete date-time,
 date or time then this must return the smallest precision actually supported.
 Note that fields such as NANO_OF_DAY and NANO_OF_SECOND
 are defined to always return ignoring the precision, thus this is the only
 way to find the actual smallest supported unit.
 For example, were GregorianCalendar to implement TemporalAccessor
 it would return a precision of MILLIS.
 
 The result from JDK classes implementing TemporalAccessor is as follows:
LocalDate returns DAYS
LocalTime returns NANOS
LocalDateTime returns NANOS
ZonedDateTime returns NANOS
OffsetTime returns NANOS
OffsetDateTime returns NANOS
ChronoLocalDate returns DAYS
ChronoLocalDateTime returns NANOS
ChronoZonedDateTime returns NANOS
Era returns ERAS
DayOfWeek returns DAYS
Month returns MONTHS
Year returns YEARS
YearMonth returns MONTHS
MonthDay returns null (does not represent a complete date or time)
ZoneOffset returns null (does not represent a date or time)
Instant returns NANOS

Returns:
a query that can obtain the precision of a temporal, not null


"
TemporalQueries,zone(),static TemporalQuery<ZoneId>,"A lenient query for the ZoneId, falling back to the ZoneOffset.","

zone
public static TemporalQuery<ZoneId> zone()
A lenient query for the ZoneId, falling back to the ZoneOffset.
 
 This queries a TemporalAccessor for the zone.
 It first tries to obtain the zone, using zoneId().
 If that is not found it tries to obtain the offset().
 Thus a ZonedDateTime will return the result of getZone(),
 while an OffsetDateTime will return the result of getOffset().
 
 In most cases, applications should use this query rather than #zoneId().
 
 The method ZoneId.from(TemporalAccessor) can be used as a
 TemporalQuery via a method reference, ZoneId::from.
 That method is equivalent to this query, except that it throws an
 exception if a zone cannot be obtained.

Returns:
a query that can obtain the zone ID or offset of a temporal, not null


"
TemporalQueries,zoneId(),static TemporalQuery<ZoneId>,A strict query for the ZoneId.,"

zoneId
public static TemporalQuery<ZoneId> zoneId()
A strict query for the ZoneId.
 
 This queries a TemporalAccessor for the zone.
 The zone is only returned if the date-time conceptually contains a ZoneId.
 It will not be returned if the date-time only conceptually has an ZoneOffset.
 Thus a ZonedDateTime will return the result of getZone(),
 but an OffsetDateTime will return null.
 
 In most cases, applications should use zone() as this query is too strict.
 
 The result from JDK classes implementing TemporalAccessor is as follows:
LocalDate returns null
LocalTime returns null
LocalDateTime returns null
ZonedDateTime returns the associated zone
OffsetTime returns null
OffsetDateTime returns null
ChronoLocalDate returns null
ChronoLocalDateTime returns null
ChronoZonedDateTime returns the associated zone
Era returns null
DayOfWeek returns null
Month returns null
Year returns null
YearMonth returns null
MonthDay returns null
ZoneOffset returns null
Instant returns null

Returns:
a query that can obtain the zone ID of a temporal, not null


"
ValueRange,"checkValidIntValue(long value, TemporalField field)",int,Checks that the specified value is valid and fits in an int.,"

checkValidIntValue
public int checkValidIntValue(long value,
                              TemporalField field)
Checks that the specified value is valid and fits in an int.
 
 This validates that the value is within the valid range of values and that
 all valid values are within the bounds of an int.
 The field is only used to improve the error message.

Parameters:
value - the value to check
field - the field being checked, may be null
Returns:
the value that was passed in
See Also:
isValidIntValue(long)


"
ValueRange,"checkValidValue(long value, TemporalField field)",long,Checks that the specified value is valid.,"

checkValidValue
public long checkValidValue(long value,
                            TemporalField field)
Checks that the specified value is valid.
 
 This validates that the value is within the valid range of values.
 The field is only used to improve the error message.

Parameters:
value - the value to check
field - the field being checked, may be null
Returns:
the value that was passed in
See Also:
isValidValue(long)


"
ValueRange,equals(Object obj),boolean,Checks if this range is equal to another range.,"

equals
public boolean equals(Object obj)
Checks if this range is equal to another range.
 
 The comparison is based on the four values, minimum, largest minimum,
 smallest maximum and maximum.
 Only objects of type ValueRange are compared, other types return false.

Overrides:
equals in class Object
Parameters:
obj - the object to check, null returns false
Returns:
true if this is equal to the other range
See Also:
Object.hashCode(), 
HashMap


"
ValueRange,getLargestMinimum(),long,Gets the largest possible minimum value that the field can take.,"

getLargestMinimum
public long getLargestMinimum()
Gets the largest possible minimum value that the field can take.
 
 For example, the ISO day-of-month always starts at 1.
 The largest minimum is therefore 1.

Returns:
the largest possible minimum value for this field


"
ValueRange,getMaximum(),long,Gets the maximum value that the field can take.,"

getMaximum
public long getMaximum()
Gets the maximum value that the field can take.
 
 For example, the ISO day-of-month runs to between 28 and 31 days.
 The maximum is therefore 31.

Returns:
the maximum value for this field


"
ValueRange,getMinimum(),long,Gets the minimum value that the field can take.,"

getMinimum
public long getMinimum()
Gets the minimum value that the field can take.
 
 For example, the ISO day-of-month always starts at 1.
 The minimum is therefore 1.

Returns:
the minimum value for this field


"
ValueRange,getSmallestMaximum(),long,Gets the smallest possible maximum value that the field can take.,"

getSmallestMaximum
public long getSmallestMaximum()
Gets the smallest possible maximum value that the field can take.
 
 For example, the ISO day-of-month runs to between 28 and 31 days.
 The smallest maximum is therefore 28.

Returns:
the smallest possible maximum value for this field


"
ValueRange,hashCode(),int,A hash code for this range.,"

hashCode
public int hashCode()
A hash code for this range.

Overrides:
hashCode in class Object
Returns:
a suitable hash code
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
ValueRange,isFixed(),boolean,Is the value range fixed and fully known.,"

isFixed
public boolean isFixed()
Is the value range fixed and fully known.
 
 For example, the ISO day-of-month runs from 1 to between 28 and 31.
 Since there is uncertainty about the maximum value, the range is not fixed.
 However, for the month of January, the range is always 1 to 31, thus it is fixed.

Returns:
true if the set of values is fixed


"
ValueRange,isIntValue(),boolean,Checks if all values in the range fit in an int.,"

isIntValue
public boolean isIntValue()
Checks if all values in the range fit in an int.
 
 This checks that all valid values are within the bounds of an int.
 
 For example, the ISO month-of-year has values from 1 to 12, which fits in an int.
 By comparison, ISO nano-of-day runs from 1 to 86,400,000,000,000 which does not fit in an int.
 
 This implementation uses getMinimum() and getMaximum().

Returns:
true if a valid value always fits in an int


"
ValueRange,isValidIntValue(long value),boolean,Checks if the value is within the valid range and that all values in the range fit in an int.,"

isValidIntValue
public boolean isValidIntValue(long value)
Checks if the value is within the valid range and that all values
 in the range fit in an int.
 
 This method combines isIntValue() and isValidValue(long).

Parameters:
value - the value to check
Returns:
true if the value is valid and fits in an int


"
ValueRange,isValidValue(long value),boolean,Checks if the value is within the valid range.,"

isValidValue
public boolean isValidValue(long value)
Checks if the value is within the valid range.
 
 This checks that the value is within the stored range of values.

Parameters:
value - the value to check
Returns:
true if the value is valid


"
ValueRange,"of(long min, long max)",static ValueRange,Obtains a fixed value range.,"

of
public static ValueRange of(long min,
                            long max)
Obtains a fixed value range.
 
 This factory obtains a range where the minimum and maximum values are fixed.
 For example, the ISO month-of-year always runs from 1 to 12.

Parameters:
min - the minimum value
max - the maximum value
Returns:
the ValueRange for min, max, not null
Throws:
IllegalArgumentException - if the minimum is greater than the maximum


"
ValueRange,"of(long min, long maxSmallest, long maxLargest)",static ValueRange,Obtains a variable value range.,"

of
public static ValueRange of(long min,
                            long maxSmallest,
                            long maxLargest)
Obtains a variable value range.
 
 This factory obtains a range where the minimum value is fixed and the maximum value may vary.
 For example, the ISO day-of-month always starts at 1, but ends between 28 and 31.

Parameters:
min - the minimum value
maxSmallest - the smallest maximum value
maxLargest - the largest maximum value
Returns:
the ValueRange for min, smallest max, largest max, not null
Throws:
IllegalArgumentException - if
     the minimum is greater than the smallest maximum,
  or the smallest maximum is greater than the largest maximum


"
ValueRange,"of(long minSmallest, long minLargest, long maxSmallest, long maxLargest)",static ValueRange,Obtains a fully variable value range.,"

of
public static ValueRange of(long minSmallest,
                            long minLargest,
                            long maxSmallest,
                            long maxLargest)
Obtains a fully variable value range.
 
 This factory obtains a range where both the minimum and maximum value may vary.

Parameters:
minSmallest - the smallest minimum value
minLargest - the largest minimum value
maxSmallest - the smallest maximum value
maxLargest - the largest maximum value
Returns:
the ValueRange for smallest min, largest min, smallest max, largest max, not null
Throws:
IllegalArgumentException - if
     the smallest minimum is greater than the smallest maximum,
  or the smallest maximum is greater than the largest maximum
  or the largest minimum is greater than the largest maximum


"
ValueRange,toString(),String,Outputs this range as a String.,"

toString
public String toString()
Outputs this range as a String.
 
 The format will be '{min}/{largestMin} - {smallestMax}/{max}',
 where the largestMin or smallestMax sections may be omitted, together
 with associated slash, if they are the same as the min or max.

Overrides:
toString in class Object
Returns:
a string representation of this range, not null


"
WeekFields,dayOfWeek(),TemporalField,Returns a field to access the day of week based on this WeekFields.,"

dayOfWeek
public TemporalField dayOfWeek()
Returns a field to access the day of week based on this WeekFields.
 
 This is similar to ChronoField.DAY_OF_WEEK but uses values for
 the day-of-week based on this WeekFields.
 The days are numbered from 1 to 7 where the
 first day-of-week is assigned the value 1.
 
 For example, if the first day-of-week is Sunday, then that will have the
 value 1, with other days ranging from Monday as 2 to Saturday as 7.
 
 In the resolving phase of parsing, a localized day-of-week will be converted
 to a standardized ChronoField day-of-week.
 The day-of-week must be in the valid range 1 to 7.
 Other fields in this class build dates using the standardized day-of-week.

Returns:
a field providing access to the day-of-week with localized numbering, not null


"
WeekFields,equals(Object object),boolean,Checks if this WeekFields is equal to the specified object.,"

equals
public boolean equals(Object object)
Checks if this WeekFields is equal to the specified object.
 
 The comparison is based on the entire state of the rules, which is
 the first day-of-week and minimal days.

Overrides:
equals in class Object
Parameters:
object - the other rules to compare to, null returns false
Returns:
true if this is equal to the specified rules
See Also:
Object.hashCode(), 
HashMap


"
WeekFields,getFirstDayOfWeek(),DayOfWeek,Gets the first day-of-week.,"

getFirstDayOfWeek
public DayOfWeek getFirstDayOfWeek()
Gets the first day-of-week.
 
 The first day-of-week varies by culture.
 For example, the US uses Sunday, while France and the ISO-8601 standard use Monday.
 This method returns the first day using the standard DayOfWeek enum.

Returns:
the first day-of-week, not null


"
WeekFields,getMinimalDaysInFirstWeek(),int,Gets the minimal number of days in the first week.,"

getMinimalDaysInFirstWeek
public int getMinimalDaysInFirstWeek()
Gets the minimal number of days in the first week.
 
 The number of days considered to define the first week of a month or year
 varies by culture.
 For example, the ISO-8601 requires 4 days (more than half a week) to
 be present before counting the first week.

Returns:
the minimal number of days in the first week of a month or year, from 1 to 7


"
WeekFields,hashCode(),int,A hash code for this WeekFields.,"

hashCode
public int hashCode()
A hash code for this WeekFields.

Overrides:
hashCode in class Object
Returns:
a suitable hash code
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
WeekFields,"of(DayOfWeek firstDayOfWeek, int minimalDaysInFirstWeek)",static WeekFields,Obtains an instance of WeekFields from the first day-of-week and minimal days.,"

of
public static WeekFields of(DayOfWeek firstDayOfWeek,
                            int minimalDaysInFirstWeek)
Obtains an instance of WeekFields from the first day-of-week and minimal days.
 
 The first day-of-week defines the ISO DayOfWeek that is day 1 of the week.
 The minimal number of days in the first week defines how many days must be present
 in a month or year, starting from the first day-of-week, before the week is counted
 as the first week. A value of 1 will count the first day of the month or year as part
 of the first week, whereas a value of 7 will require the whole seven days to be in
 the new month or year.
 
 WeekFields instances are singletons; for each unique combination
 of firstDayOfWeek and minimalDaysInFirstWeek the
 the same instance will be returned.

Parameters:
firstDayOfWeek - the first day of the week, not null
minimalDaysInFirstWeek - the minimal number of days in the first week, from 1 to 7
Returns:
the week-definition, not null
Throws:
IllegalArgumentException - if the minimal days value is less than one
      or greater than 7


"
WeekFields,of(Locale locale),static WeekFields,Obtains an instance of WeekFields appropriate for a locale.,"

of
public static WeekFields of(Locale locale)
Obtains an instance of WeekFields appropriate for a locale.
 
 This will look up appropriate values from the provider of localization data.

Parameters:
locale - the locale to use, not null
Returns:
the week-definition, not null


"
WeekFields,toString(),String,A string representation of this WeekFields instance.,"

toString
public String toString()
A string representation of this WeekFields instance.

Overrides:
toString in class Object
Returns:
the string representation, not null


"
WeekFields,weekBasedYear(),TemporalField,Returns a field to access the year of a week-based-year based on this WeekFields.,"

weekBasedYear
public TemporalField weekBasedYear()
Returns a field to access the year of a week-based-year based on this WeekFields.
 
 This represents the concept of the year where weeks start on a fixed day-of-week,
 such as Monday and each week belongs to exactly one year.
 This field is typically used with dayOfWeek() and
 weekOfWeekBasedYear().
 
 Week one(1) is the week starting on the getFirstDayOfWeek()
 where there are at least getMinimalDaysInFirstWeek() days in the year.
 Thus, week one may start before the start of the year.
 If the first week starts after the start of the year then the period before
 is in the last week of the previous year.
 
 This field can be used with any calendar system.
 
 In the resolving phase of parsing, a date can be created from a week-based-year,
 week-of-year and day-of-week.
 
 In strict mode, all three fields are
 validated against their range of valid values. The week-of-year field
 is validated to ensure that the resulting week-based-year is the
 week-based-year requested.
 
 In smart mode, all three fields are
 validated against their range of valid values. The week-of-week-based-year field
 is validated from 1 to 53, meaning that the resulting date can be in the
 following week-based-year to that specified.
 
 In lenient mode, the year and day-of-week
 are validated against the range of valid values. The resulting date is calculated
 equivalent to the following three stage approach.
 First, create a date on the first day of the first week in the requested week-based-year.
 Then take the week-of-week-based-year, subtract one, and add the amount in weeks to the date.
 Finally, adjust to the correct day-of-week within the localized week.

Returns:
a field providing access to the week-based-year, not null


"
WeekFields,weekOfMonth(),TemporalField,Returns a field to access the week of month based on this WeekFields.,"

weekOfMonth
public TemporalField weekOfMonth()
Returns a field to access the week of month based on this WeekFields.
 
 This represents the concept of the count of weeks within the month where weeks
 start on a fixed day-of-week, such as Monday.
 This field is typically used with dayOfWeek().
 
 Week one (1) is the week starting on the getFirstDayOfWeek()
 where there are at least getMinimalDaysInFirstWeek() days in the month.
 Thus, week one may start up to minDays days before the start of the month.
 If the first week starts after the start of the month then the period before is week zero (0).
 
 For example:
 - if the 1st day of the month is a Monday, week one starts on the 1st and there is no week zero
 - if the 2nd day of the month is a Monday, week one starts on the 2nd and the 1st is in week zero
 - if the 4th day of the month is a Monday, week one starts on the 4th and the 1st to 3rd is in week zero
 - if the 5th day of the month is a Monday, week two starts on the 5th and the 1st to 4th is in week one

 This field can be used with any calendar system.
 
 In the resolving phase of parsing, a date can be created from a year,
 week-of-month, month-of-year and day-of-week.
 
 In strict mode, all four fields are
 validated against their range of valid values. The week-of-month field
 is validated to ensure that the resulting month is the month requested.
 
 In smart mode, all four fields are
 validated against their range of valid values. The week-of-month field
 is validated from 0 to 6, meaning that the resulting date can be in a
 different month to that specified.
 
 In lenient mode, the year and day-of-week
 are validated against the range of valid values. The resulting date is calculated
 equivalent to the following four stage approach.
 First, create a date on the first day of the first week of January in the requested year.
 Then take the month-of-year, subtract one, and add the amount in months to the date.
 Then take the week-of-month, subtract one, and add the amount in weeks to the date.
 Finally, adjust to the correct day-of-week within the localized week.

Returns:
a field providing access to the week-of-month, not null


"
WeekFields,weekOfWeekBasedYear(),TemporalField,Returns a field to access the week of a week-based-year based on this WeekFields.,"

weekOfWeekBasedYear
public TemporalField weekOfWeekBasedYear()
Returns a field to access the week of a week-based-year based on this WeekFields.
 
 This represents the concept of the count of weeks within the year where weeks
 start on a fixed day-of-week, such as Monday and each week belongs to exactly one year.
 This field is typically used with dayOfWeek() and
 weekBasedYear().
 
 Week one(1) is the week starting on the getFirstDayOfWeek()
 where there are at least getMinimalDaysInFirstWeek() days in the year.
 If the first week starts after the start of the year then the period before
 is in the last week of the previous year.
 
 For example:
 - if the 1st day of the year is a Monday, week one starts on the 1st
 - if the 2nd day of the year is a Monday, week one starts on the 2nd and
   the 1st is in the last week of the previous year
 - if the 4th day of the year is a Monday, week one starts on the 4th and
   the 1st to 3rd is in the last week of the previous year
 - if the 5th day of the year is a Monday, week two starts on the 5th and
   the 1st to 4th is in week one

 This field can be used with any calendar system.
 
 In the resolving phase of parsing, a date can be created from a week-based-year,
 week-of-year and day-of-week.
 
 In strict mode, all three fields are
 validated against their range of valid values. The week-of-year field
 is validated to ensure that the resulting week-based-year is the
 week-based-year requested.
 
 In smart mode, all three fields are
 validated against their range of valid values. The week-of-week-based-year field
 is validated from 1 to 53, meaning that the resulting date can be in the
 following week-based-year to that specified.
 
 In lenient mode, the year and day-of-week
 are validated against the range of valid values. The resulting date is calculated
 equivalent to the following three stage approach.
 First, create a date on the first day of the first week in the requested week-based-year.
 Then take the week-of-week-based-year, subtract one, and add the amount in weeks to the date.
 Finally, adjust to the correct day-of-week within the localized week.

Returns:
a field providing access to the week-of-week-based-year, not null


"
WeekFields,weekOfYear(),TemporalField,Returns a field to access the week of year based on this WeekFields.,"

weekOfYear
public TemporalField weekOfYear()
Returns a field to access the week of year based on this WeekFields.
 
 This represents the concept of the count of weeks within the year where weeks
 start on a fixed day-of-week, such as Monday.
 This field is typically used with dayOfWeek().
 
 Week one(1) is the week starting on the getFirstDayOfWeek()
 where there are at least getMinimalDaysInFirstWeek() days in the year.
 Thus, week one may start up to minDays days before the start of the year.
 If the first week starts after the start of the year then the period before is week zero (0).
 
 For example:
 - if the 1st day of the year is a Monday, week one starts on the 1st and there is no week zero
 - if the 2nd day of the year is a Monday, week one starts on the 2nd and the 1st is in week zero
 - if the 4th day of the year is a Monday, week one starts on the 4th and the 1st to 3rd is in week zero
 - if the 5th day of the year is a Monday, week two starts on the 5th and the 1st to 4th is in week one

 This field can be used with any calendar system.
 
 In the resolving phase of parsing, a date can be created from a year,
 week-of-year and day-of-week.
 
 In strict mode, all three fields are
 validated against their range of valid values. The week-of-year field
 is validated to ensure that the resulting year is the year requested.
 
 In smart mode, all three fields are
 validated against their range of valid values. The week-of-year field
 is validated from 0 to 54, meaning that the resulting date can be in a
 different year to that specified.
 
 In lenient mode, the year and day-of-week
 are validated against the range of valid values. The resulting date is calculated
 equivalent to the following three stage approach.
 First, create a date on the first day of the first week in the requested year.
 Then take the week-of-year, subtract one, and add the amount in weeks to the date.
 Finally, adjust to the correct day-of-week within the localized week.

Returns:
a field providing access to the week-of-year, not null


"
