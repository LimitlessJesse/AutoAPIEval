ClassName,Method,Return Type,Description,Full Description
AccessControlContext,checkPermission(Permission perm),void,"Determines whether the access request indicated by the specified permission should be allowed or denied, based on the security policy currently in effect, and the context in this object.","

checkPermission
public void checkPermission(Permission perm)
                     throws AccessControlException
Determines whether the access request indicated by the
 specified permission should be allowed or denied, based on
 the security policy currently in effect, and the context in
 this object. The request is allowed only if every ProtectionDomain
 in the context implies the permission. Otherwise the request is
 denied.

 
 This method quietly returns if the access request
 is permitted, or throws a suitable AccessControlException otherwise.

Parameters:
perm - the requested permission.
Throws:
AccessControlException - if the specified permission
 is not permitted, based on the current security policy and the
 context encapsulated by this object.
NullPointerException - if the permission to check for is null.


"
AccessControlContext,equals(Object obj),boolean,Checks two AccessControlContext objects for equality.,"

equals
public boolean equals(Object obj)
Checks two AccessControlContext objects for equality.
 Checks that obj is
 an AccessControlContext and has the same set of ProtectionDomains
 as this context.
 

Overrides:
equals in class Object
Parameters:
obj - the object we are testing for equality with this object.
Returns:
true if obj is an AccessControlContext, and has the
 same set of ProtectionDomains as this context, false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
AccessControlContext,getDomainCombiner(),DomainCombiner,Get the DomainCombiner associated with this AccessControlContext.,"

getDomainCombiner
public DomainCombiner getDomainCombiner()
Get the DomainCombiner associated with this
 AccessControlContext.

 

Returns:
the DomainCombiner associated with this
          AccessControlContext, or null
          if there is none.
Throws:
SecurityException - if a security manager is installed and
          the caller does not have the ""getDomainCombiner""
          SecurityPermission
Since:
1.3


"
AccessControlContext,hashCode(),int,Returns the hash code value for this context.,"

hashCode
public int hashCode()
Returns the hash code value for this context. The hash code
 is computed by exclusive or-ing the hash code of all the protection
 domains in the context together.

Overrides:
hashCode in class Object
Returns:
a hash code value for this context.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
AccessController,checkPermission(Permission perm),static void,"Determines whether the access request indicated by the specified permission should be allowed or denied, based on the current AccessControlContext and security policy.","

checkPermission
public static void checkPermission(Permission perm)
                            throws AccessControlException
Determines whether the access request indicated by the
 specified permission should be allowed or denied, based on
 the current AccessControlContext and security policy.
 This method quietly returns if the access request
 is permitted, or throws an AccessControlException otherwise. The
 getPermission method of the AccessControlException returns the
 perm Permission object instance.

Parameters:
perm - the requested permission.
Throws:
AccessControlException - if the specified permission
            is not permitted, based on the current security policy.
NullPointerException - if the specified permission
            is null and is checked based on the
            security policy currently in effect.


"
AccessController,doPrivileged(PrivilegedAction<T> action),static <T> T,Performs the specified PrivilegedAction with privileges enabled.,"

doPrivileged
public static <T> T doPrivileged(PrivilegedAction<T> action)
Performs the specified PrivilegedAction with privileges
 enabled. The action is performed with all of the permissions
 possessed by the caller's protection domain.

  If the action's run method throws an (unchecked)
 exception, it will propagate through this method.

  Note that any DomainCombiner associated with the current
 AccessControlContext will be ignored while the action is performed.

Type Parameters:
T - the type of the value returned by the PrivilegedAction's
                  run method.
Parameters:
action - the action to be performed.
Returns:
the value returned by the action's run method.
Throws:
NullPointerException - if the action is null
See Also:
doPrivileged(PrivilegedAction,AccessControlContext), 
doPrivileged(PrivilegedExceptionAction), 
doPrivilegedWithCombiner(PrivilegedAction), 
DomainCombiner


"
AccessController,"doPrivileged(PrivilegedAction<T> action, AccessControlContext context)",static <T> T,Performs the specified PrivilegedAction with privileges enabled and restricted by the specified AccessControlContext.,"

doPrivileged
public static <T> T doPrivileged(PrivilegedAction<T> action,
                                 AccessControlContext context)
Performs the specified PrivilegedAction with privileges
 enabled and restricted by the specified AccessControlContext.
 The action is performed with the intersection of the permissions
 possessed by the caller's protection domain, and those possessed
 by the domains represented by the specified AccessControlContext.
 
 If the action's run method throws an (unchecked) exception,
 it will propagate through this method.
 
 If a security manager is installed and the specified
 AccessControlContext was not created by system code and the
 caller's ProtectionDomain has not been granted the
 ""createAccessControlContext""
 SecurityPermission, then the action is performed
 with no permissions.

Type Parameters:
T - the type of the value returned by the PrivilegedAction's
                  run method.
Parameters:
action - the action to be performed.
context - an access control context
                representing the restriction to be applied to the
                caller's domain's privileges before performing
                the specified action.  If the context is
                null, then no additional restriction is applied.
Returns:
the value returned by the action's run method.
Throws:
NullPointerException - if the action is null
See Also:
doPrivileged(PrivilegedAction), 
doPrivileged(PrivilegedExceptionAction,AccessControlContext)


"
AccessController,"doPrivileged(PrivilegedAction<T> action, AccessControlContext context, Permission... perms)",static <T> T,Performs the specified PrivilegedAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments.,"

doPrivileged
public static <T> T doPrivileged(PrivilegedAction<T> action,
                                 AccessControlContext context,
                                 Permission... perms)
Performs the specified PrivilegedAction with privileges
 enabled and restricted by the specified
 AccessControlContext and with a privilege scope limited
 by specified Permission arguments.

 The action is performed with the intersection of the permissions
 possessed by the caller's protection domain, and those possessed
 by the domains represented by the specified
 AccessControlContext.
 
 If the action's run method throws an (unchecked) exception,
 it will propagate through this method.
 
 If a security manager is installed and the specified
 AccessControlContext was not created by system code and the
 caller's ProtectionDomain has not been granted the
 ""createAccessControlContext""
 SecurityPermission, then the action is performed
 with no permissions.

Type Parameters:
T - the type of the value returned by the PrivilegedAction's
                  run method.
Parameters:
action - the action to be performed.
context - an access control context
                representing the restriction to be applied to the
                caller's domain's privileges before performing
                the specified action.  If the context is
                null,
                then no additional restriction is applied.
perms - the Permission arguments which limit the
              scope of the caller's privileges. The number of arguments
              is variable.
Returns:
the value returned by the action's run method.
Throws:
NullPointerException - if action or perms or any element of
         perms is null
Since:
1.8
See Also:
doPrivileged(PrivilegedAction), 
doPrivileged(PrivilegedExceptionAction,AccessControlContext)


"
AccessController,doPrivileged(PrivilegedExceptionAction<T> action),static <T> T,Performs the specified PrivilegedExceptionAction with privileges enabled.,"

doPrivileged
public static <T> T doPrivileged(PrivilegedExceptionAction<T> action)
                          throws PrivilegedActionException
Performs the specified PrivilegedExceptionAction with
 privileges enabled.  The action is performed with all of the
 permissions possessed by the caller's protection domain.

  If the action's run method throws an unchecked
 exception, it will propagate through this method.

  Note that any DomainCombiner associated with the current
 AccessControlContext will be ignored while the action is performed.

Type Parameters:
T - the type of the value returned by the
                  PrivilegedExceptionAction's run method.
Parameters:
action - the action to be performed
Returns:
the value returned by the action's run method
Throws:
PrivilegedActionException - if the specified action's
         run method threw a checked exception
NullPointerException - if the action is null
See Also:
doPrivileged(PrivilegedAction), 
doPrivileged(PrivilegedExceptionAction,AccessControlContext), 
doPrivilegedWithCombiner(PrivilegedExceptionAction), 
DomainCombiner


"
AccessController,"doPrivileged(PrivilegedExceptionAction<T> action, AccessControlContext context)",static <T> T,Performs the specified PrivilegedExceptionAction with privileges enabled and restricted by the specified AccessControlContext.,"

doPrivileged
public static <T> T doPrivileged(PrivilegedExceptionAction<T> action,
                                 AccessControlContext context)
                          throws PrivilegedActionException
Performs the specified PrivilegedExceptionAction with
 privileges enabled and restricted by the specified
 AccessControlContext.  The action is performed with the
 intersection of the permissions possessed by the caller's
 protection domain, and those possessed by the domains represented by the
 specified AccessControlContext.
 
 If the action's run method throws an unchecked
 exception, it will propagate through this method.
 
 If a security manager is installed and the specified
 AccessControlContext was not created by system code and the
 caller's ProtectionDomain has not been granted the
 ""createAccessControlContext""
 SecurityPermission, then the action is performed
 with no permissions.

Type Parameters:
T - the type of the value returned by the
                  PrivilegedExceptionAction's run method.
Parameters:
action - the action to be performed
context - an access control context
                representing the restriction to be applied to the
                caller's domain's privileges before performing
                the specified action.  If the context is
                null, then no additional restriction is applied.
Returns:
the value returned by the action's run method
Throws:
PrivilegedActionException - if the specified action's
         run method threw a checked exception
NullPointerException - if the action is null
See Also:
doPrivileged(PrivilegedAction), 
doPrivileged(PrivilegedAction,AccessControlContext)


"
AccessController,"doPrivileged(PrivilegedExceptionAction<T> action, AccessControlContext context, Permission... perms)",static <T> T,Performs the specified PrivilegedExceptionAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments.,"

doPrivileged
public static <T> T doPrivileged(PrivilegedExceptionAction<T> action,
                                 AccessControlContext context,
                                 Permission... perms)
                          throws PrivilegedActionException
Performs the specified PrivilegedExceptionAction with
 privileges enabled and restricted by the specified
 AccessControlContext and with a privilege scope limited by
 specified Permission arguments.

 The action is performed with the intersection of the permissions
 possessed by the caller's protection domain, and those possessed
 by the domains represented by the specified
 AccessControlContext.
 
 If the action's run method throws an (unchecked) exception,
 it will propagate through this method.
 
 If a security manager is installed and the specified
 AccessControlContext was not created by system code and the
 caller's ProtectionDomain has not been granted the
 ""createAccessControlContext""
 SecurityPermission, then the action is performed
 with no permissions.

Type Parameters:
T - the type of the value returned by the
                  PrivilegedExceptionAction's run method.
Parameters:
action - the action to be performed.
context - an access control context
                representing the restriction to be applied to the
                caller's domain's privileges before performing
                the specified action.  If the context is
                null,
                then no additional restriction is applied.
perms - the Permission arguments which limit the
              scope of the caller's privileges. The number of arguments
              is variable.
Returns:
the value returned by the action's run method.
Throws:
PrivilegedActionException - if the specified action's
         run method threw a checked exception
NullPointerException - if action or perms or any element of
         perms is null
Since:
1.8
See Also:
doPrivileged(PrivilegedAction), 
doPrivileged(PrivilegedAction,AccessControlContext)


"
AccessController,doPrivilegedWithCombiner(PrivilegedAction<T> action),static <T> T,Performs the specified PrivilegedAction with privileges enabled.,"

doPrivilegedWithCombiner
public static <T> T doPrivilegedWithCombiner(PrivilegedAction<T> action)
Performs the specified PrivilegedAction with privileges
 enabled. The action is performed with all of the permissions
 possessed by the caller's protection domain.

  If the action's run method throws an (unchecked)
 exception, it will propagate through this method.

  This method preserves the current AccessControlContext's
 DomainCombiner (which may be null) while the action is performed.

Type Parameters:
T - the type of the value returned by the PrivilegedAction's
                  run method.
Parameters:
action - the action to be performed.
Returns:
the value returned by the action's run method.
Throws:
NullPointerException - if the action is null
Since:
1.6
See Also:
doPrivileged(PrivilegedAction), 
DomainCombiner


"
AccessController,"doPrivilegedWithCombiner(PrivilegedAction<T> action, AccessControlContext context, Permission... perms)",static <T> T,Performs the specified PrivilegedAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments.,"

doPrivilegedWithCombiner
public static <T> T doPrivilegedWithCombiner(PrivilegedAction<T> action,
                                             AccessControlContext context,
                                             Permission... perms)
Performs the specified PrivilegedAction with privileges
 enabled and restricted by the specified
 AccessControlContext and with a privilege scope limited
 by specified Permission arguments.

 The action is performed with the intersection of the permissions
 possessed by the caller's protection domain, and those possessed
 by the domains represented by the specified
 AccessControlContext.
 
 If the action's run method throws an (unchecked) exception,
 it will propagate through this method.

  This method preserves the current AccessControlContext's
 DomainCombiner (which may be null) while the action is performed.
 
 If a security manager is installed and the specified
 AccessControlContext was not created by system code and the
 caller's ProtectionDomain has not been granted the
 ""createAccessControlContext""
 SecurityPermission, then the action is performed
 with no permissions.

Type Parameters:
T - the type of the value returned by the PrivilegedAction's
                  run method.
Parameters:
action - the action to be performed.
context - an access control context
                representing the restriction to be applied to the
                caller's domain's privileges before performing
                the specified action.  If the context is
                null,
                then no additional restriction is applied.
perms - the Permission arguments which limit the
              scope of the caller's privileges. The number of arguments
              is variable.
Returns:
the value returned by the action's run method.
Throws:
NullPointerException - if action or perms or any element of
         perms is null
Since:
1.8
See Also:
doPrivileged(PrivilegedAction), 
doPrivileged(PrivilegedExceptionAction,AccessControlContext), 
DomainCombiner


"
AccessController,doPrivilegedWithCombiner(PrivilegedExceptionAction<T> action),static <T> T,Performs the specified PrivilegedExceptionAction with privileges enabled.,"

doPrivilegedWithCombiner
public static <T> T doPrivilegedWithCombiner(PrivilegedExceptionAction<T> action)
                                      throws PrivilegedActionException
Performs the specified PrivilegedExceptionAction with
 privileges enabled.  The action is performed with all of the
 permissions possessed by the caller's protection domain.

  If the action's run method throws an unchecked
 exception, it will propagate through this method.

  This method preserves the current AccessControlContext's
 DomainCombiner (which may be null) while the action is performed.

Type Parameters:
T - the type of the value returned by the
                  PrivilegedExceptionAction's run method.
Parameters:
action - the action to be performed.
Returns:
the value returned by the action's run method
Throws:
PrivilegedActionException - if the specified action's
         run method threw a checked exception
NullPointerException - if the action is null
Since:
1.6
See Also:
doPrivileged(PrivilegedAction), 
doPrivileged(PrivilegedExceptionAction,AccessControlContext), 
DomainCombiner


"
AccessController,"doPrivilegedWithCombiner(PrivilegedExceptionAction<T> action, AccessControlContext context, Permission... perms)",static <T> T,Performs the specified PrivilegedExceptionAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments.,"

doPrivilegedWithCombiner
public static <T> T doPrivilegedWithCombiner(PrivilegedExceptionAction<T> action,
                                             AccessControlContext context,
                                             Permission... perms)
                                      throws PrivilegedActionException
Performs the specified PrivilegedExceptionAction with
 privileges enabled and restricted by the specified
 AccessControlContext and with a privilege scope limited by
 specified Permission arguments.

 The action is performed with the intersection of the permissions
 possessed by the caller's protection domain, and those possessed
 by the domains represented by the specified
 AccessControlContext.
 
 If the action's run method throws an (unchecked) exception,
 it will propagate through this method.

  This method preserves the current AccessControlContext's
 DomainCombiner (which may be null) while the action is performed.
 
 If a security manager is installed and the specified
 AccessControlContext was not created by system code and the
 caller's ProtectionDomain has not been granted the
 ""createAccessControlContext""
 SecurityPermission, then the action is performed
 with no permissions.

Type Parameters:
T - the type of the value returned by the
                  PrivilegedExceptionAction's run method.
Parameters:
action - the action to be performed.
context - an access control context
                representing the restriction to be applied to the
                caller's domain's privileges before performing
                the specified action.  If the context is
                null,
                then no additional restriction is applied.
perms - the Permission arguments which limit the
              scope of the caller's privileges. The number of arguments
              is variable.
Returns:
the value returned by the action's run method.
Throws:
PrivilegedActionException - if the specified action's
         run method threw a checked exception
NullPointerException - if action or perms or any element of
         perms is null
Since:
1.8
See Also:
doPrivileged(PrivilegedAction), 
doPrivileged(PrivilegedAction,AccessControlContext), 
DomainCombiner


"
AccessController,getContext(),static AccessControlContext,"This method takes a ""snapshot"" of the current calling context, which includes the current Thread's inherited AccessControlContext and any limited privilege scope, and places it in an AccessControlContext object.","

getContext
public static AccessControlContext getContext()
This method takes a ""snapshot"" of the current calling context, which
 includes the current Thread's inherited AccessControlContext and any
 limited privilege scope, and places it in an AccessControlContext object.
 This context may then be checked at a later point, possibly in another thread.

Returns:
the AccessControlContext based on the current context.
See Also:
AccessControlContext


"
AlgorithmParameterGenerator,generateParameters(),AlgorithmParameters,Generates the parameters.,"

generateParameters
public final AlgorithmParameters generateParameters()
Generates the parameters.

Returns:
the new AlgorithmParameters object.


"
AlgorithmParameterGenerator,getAlgorithm(),String,Returns the standard name of the algorithm this parameter generator is associated with.,"

getAlgorithm
public final String getAlgorithm()
Returns the standard name of the algorithm this parameter
 generator is associated with.

Returns:
the string name of the algorithm.


"
AlgorithmParameterGenerator,getInstance(String algorithm),static AlgorithmParameterGenerator,Returns an AlgorithmParameterGenerator object for generating a set of parameters to be used with the specified algorithm.,"

getInstance
public static AlgorithmParameterGenerator getInstance(String algorithm)
                                               throws NoSuchAlgorithmException
Returns an AlgorithmParameterGenerator object for generating
 a set of parameters to be used with the specified algorithm.

  This method traverses the list of registered security Providers,
 starting with the most preferred Provider.
 A new AlgorithmParameterGenerator object encapsulating the
 AlgorithmParameterGeneratorSpi implementation from the first
 Provider that supports the specified algorithm is returned.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
algorithm - the name of the algorithm this
 parameter generator is associated with.
 See the AlgorithmParameterGenerator section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.
Returns:
the new AlgorithmParameterGenerator object.
Throws:
NoSuchAlgorithmException - if no Provider supports an
          AlgorithmParameterGeneratorSpi implementation for the
          specified algorithm.
See Also:
Provider


"
AlgorithmParameterGenerator,"getInstance(String algorithm, Provider provider)",static AlgorithmParameterGenerator,Returns an AlgorithmParameterGenerator object for generating a set of parameters to be used with the specified algorithm.,"

getInstance
public static AlgorithmParameterGenerator getInstance(String algorithm,
                                                      Provider provider)
                                               throws NoSuchAlgorithmException
Returns an AlgorithmParameterGenerator object for generating
 a set of parameters to be used with the specified algorithm.

  A new AlgorithmParameterGenerator object encapsulating the
 AlgorithmParameterGeneratorSpi implementation from the specified Provider
 object is returned.  Note that the specified Provider object
 does not have to be registered in the provider list.

Parameters:
algorithm - the string name of the algorithm this
 parameter generator is associated with.
 See the AlgorithmParameterGenerator section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.
provider - the Provider object.
Returns:
the new AlgorithmParameterGenerator object.
Throws:
NoSuchAlgorithmException - if an AlgorithmParameterGeneratorSpi
          implementation for the specified algorithm is not available
          from the specified Provider object.
IllegalArgumentException - if the specified provider is null.
Since:
1.4
See Also:
Provider


"
AlgorithmParameterGenerator,"getInstance(String algorithm, String provider)",static AlgorithmParameterGenerator,Returns an AlgorithmParameterGenerator object for generating a set of parameters to be used with the specified algorithm.,"

getInstance
public static AlgorithmParameterGenerator getInstance(String algorithm,
                                                      String provider)
                                               throws NoSuchAlgorithmException,
                                                      NoSuchProviderException
Returns an AlgorithmParameterGenerator object for generating
 a set of parameters to be used with the specified algorithm.

  A new AlgorithmParameterGenerator object encapsulating the
 AlgorithmParameterGeneratorSpi implementation from the specified provider
 is returned.  The specified provider must be registered
 in the security provider list.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
algorithm - the name of the algorithm this
 parameter generator is associated with.
 See the AlgorithmParameterGenerator section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.
provider - the string name of the Provider.
Returns:
the new AlgorithmParameterGenerator object.
Throws:
NoSuchAlgorithmException - if an AlgorithmParameterGeneratorSpi
          implementation for the specified algorithm is not
          available from the specified provider.
NoSuchProviderException - if the specified provider is not
          registered in the security provider list.
IllegalArgumentException - if the provider name is null
          or empty.
See Also:
Provider


"
AlgorithmParameterGenerator,getProvider(),Provider,Returns the provider of this algorithm parameter generator object.,"

getProvider
public final Provider getProvider()
Returns the provider of this algorithm parameter generator object.

Returns:
the provider of this algorithm parameter generator object


"
AlgorithmParameterGenerator,init(AlgorithmParameterSpec genParamSpec),void,Initializes this parameter generator with a set of algorithm-specific parameter generation values.,"

init
public final void init(AlgorithmParameterSpec genParamSpec)
                throws InvalidAlgorithmParameterException
Initializes this parameter generator with a set of algorithm-specific
 parameter generation values.
 To generate the parameters, the SecureRandom
 implementation of the highest-priority installed provider is used as
 the source of randomness.
 (If none of the installed providers supply an implementation of
 SecureRandom, a system-provided source of randomness is
 used.)

Parameters:
genParamSpec - the set of algorithm-specific parameter generation values.
Throws:
InvalidAlgorithmParameterException - if the given parameter
 generation values are inappropriate for this parameter generator.


"
AlgorithmParameterGenerator,"init(AlgorithmParameterSpec genParamSpec, SecureRandom random)",void,Initializes this parameter generator with a set of algorithm-specific parameter generation values.,"

init
public final void init(AlgorithmParameterSpec genParamSpec,
                       SecureRandom random)
                throws InvalidAlgorithmParameterException
Initializes this parameter generator with a set of algorithm-specific
 parameter generation values.

Parameters:
genParamSpec - the set of algorithm-specific parameter generation values.
random - the source of randomness.
Throws:
InvalidAlgorithmParameterException - if the given parameter
 generation values are inappropriate for this parameter generator.


"
AlgorithmParameterGenerator,init(int size),void,Initializes this parameter generator for a certain size.,"

init
public final void init(int size)
Initializes this parameter generator for a certain size.
 To create the parameters, the SecureRandom
 implementation of the highest-priority installed provider is used as
 the source of randomness.
 (If none of the installed providers supply an implementation of
 SecureRandom, a system-provided source of randomness is
 used.)

Parameters:
size - the size (number of bits).


"
AlgorithmParameterGenerator,"init(int size, SecureRandom random)",void,Initializes this parameter generator for a certain size and source of randomness.,"

init
public final void init(int size,
                       SecureRandom random)
Initializes this parameter generator for a certain size and source
 of randomness.

Parameters:
size - the size (number of bits).
random - the source of randomness.


"
AlgorithmParameterGeneratorSpi,engineGenerateParameters(),protected abstract AlgorithmParameters,Generates the parameters.,"

engineGenerateParameters
protected abstract AlgorithmParameters engineGenerateParameters()
Generates the parameters.

Returns:
the new AlgorithmParameters object.


"
AlgorithmParameterGeneratorSpi,"engineInit(AlgorithmParameterSpec genParamSpec, SecureRandom random)",protected abstract void,Initializes this parameter generator with a set of algorithm-specific parameter generation values.,"

engineInit
protected abstract void engineInit(AlgorithmParameterSpec genParamSpec,
                                   SecureRandom random)
                            throws InvalidAlgorithmParameterException
Initializes this parameter generator with a set of
 algorithm-specific parameter generation values.

Parameters:
genParamSpec - the set of algorithm-specific parameter generation values.
random - the source of randomness.
Throws:
InvalidAlgorithmParameterException - if the given parameter
 generation values are inappropriate for this parameter generator.


"
AlgorithmParameterGeneratorSpi,"engineInit(int size, SecureRandom random)",protected abstract void,Initializes this parameter generator for a certain size and source of randomness.,"

engineInit
protected abstract void engineInit(int size,
                                   SecureRandom random)
Initializes this parameter generator for a certain size
 and source of randomness.

Parameters:
size - the size (number of bits).
random - the source of randomness.


"
AlgorithmParameters,getAlgorithm(),String,Returns the name of the algorithm associated with this parameter object.,"

getAlgorithm
public final String getAlgorithm()
Returns the name of the algorithm associated with this parameter object.

Returns:
the algorithm name.


"
AlgorithmParameters,getEncoded(),byte[],Returns the parameters in their primary encoding format.,"

getEncoded
public final byte[] getEncoded()
                        throws IOException
Returns the parameters in their primary encoding format.
 The primary encoding format for parameters is ASN.1, if an ASN.1
 specification for this type of parameters exists.

Returns:
the parameters encoded using their primary encoding format.
Throws:
IOException - on encoding errors, or if this parameter object
 has not been initialized.


"
AlgorithmParameters,getEncoded(String format),byte[],Returns the parameters encoded in the specified scheme.,"

getEncoded
public final byte[] getEncoded(String format)
                        throws IOException
Returns the parameters encoded in the specified scheme.
 If format is null, the
 primary encoding format for parameters is used. The primary encoding
 format is ASN.1, if an ASN.1 specification for these parameters
 exists.

Parameters:
format - the name of the encoding format.
Returns:
the parameters encoded using the specified encoding scheme.
Throws:
IOException - on encoding errors, or if this parameter object
 has not been initialized.


"
AlgorithmParameters,getInstance(String algorithm),static AlgorithmParameters,Returns a parameter object for the specified algorithm.,"

getInstance
public static AlgorithmParameters getInstance(String algorithm)
                                       throws NoSuchAlgorithmException
Returns a parameter object for the specified algorithm.

  This method traverses the list of registered security Providers,
 starting with the most preferred Provider.
 A new AlgorithmParameters object encapsulating the
 AlgorithmParametersSpi implementation from the first
 Provider that supports the specified algorithm is returned.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

  The returned parameter object must be initialized via a call to
 init, using an appropriate parameter specification or
 parameter encoding.

Parameters:
algorithm - the name of the algorithm requested.
 See the AlgorithmParameters section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.
Returns:
the new parameter object.
Throws:
NoSuchAlgorithmException - if no Provider supports an
          AlgorithmParametersSpi implementation for the
          specified algorithm.
See Also:
Provider


"
AlgorithmParameters,"getInstance(String algorithm, Provider provider)",static AlgorithmParameters,Returns a parameter object for the specified algorithm.,"

getInstance
public static AlgorithmParameters getInstance(String algorithm,
                                              Provider provider)
                                       throws NoSuchAlgorithmException
Returns a parameter object for the specified algorithm.

  A new AlgorithmParameters object encapsulating the
 AlgorithmParametersSpi implementation from the specified Provider
 object is returned.  Note that the specified Provider object
 does not have to be registered in the provider list.

 The returned parameter object must be initialized via a call to
 init, using an appropriate parameter specification or
 parameter encoding.

Parameters:
algorithm - the name of the algorithm requested.
 See the AlgorithmParameters section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.
provider - the name of the provider.
Returns:
the new parameter object.
Throws:
NoSuchAlgorithmException - if an AlgorithmParameterGeneratorSpi
          implementation for the specified algorithm is not available
          from the specified Provider object.
IllegalArgumentException - if the provider is null.
Since:
1.4
See Also:
Provider


"
AlgorithmParameters,"getInstance(String algorithm, String provider)",static AlgorithmParameters,Returns a parameter object for the specified algorithm.,"

getInstance
public static AlgorithmParameters getInstance(String algorithm,
                                              String provider)
                                       throws NoSuchAlgorithmException,
                                              NoSuchProviderException
Returns a parameter object for the specified algorithm.

  A new AlgorithmParameters object encapsulating the
 AlgorithmParametersSpi implementation from the specified provider
 is returned.  The specified provider must be registered
 in the security provider list.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

 The returned parameter object must be initialized via a call to
 init, using an appropriate parameter specification or
 parameter encoding.

Parameters:
algorithm - the name of the algorithm requested.
 See the AlgorithmParameters section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.
provider - the name of the provider.
Returns:
the new parameter object.
Throws:
NoSuchAlgorithmException - if an AlgorithmParametersSpi
          implementation for the specified algorithm is not
          available from the specified provider.
NoSuchProviderException - if the specified provider is not
          registered in the security provider list.
IllegalArgumentException - if the provider name is null
          or empty.
See Also:
Provider


"
AlgorithmParameters,getParameterSpec(Class<T> paramSpec),<T extends AlgorithmParameterSpec> T,Returns a (transparent) specification of this parameter object.,"

getParameterSpec
public final <T extends AlgorithmParameterSpec> T getParameterSpec(Class<T> paramSpec)
                                                            throws InvalidParameterSpecException
Returns a (transparent) specification of this parameter object.
 paramSpec identifies the specification class in which
 the parameters should be returned. It could, for example, be
 DSAParameterSpec.class, to indicate that the
 parameters should be returned in an instance of the
 DSAParameterSpec class.

Type Parameters:
T - the type of the parameter specification to be returrned
Parameters:
paramSpec - the specification class in which
 the parameters should be returned.
Returns:
the parameter specification.
Throws:
InvalidParameterSpecException - if the requested parameter
 specification is inappropriate for this parameter object, or if this
 parameter object has not been initialized.


"
AlgorithmParameters,getProvider(),Provider,Returns the provider of this parameter object.,"

getProvider
public final Provider getProvider()
Returns the provider of this parameter object.

Returns:
the provider of this parameter object


"
AlgorithmParameters,init(AlgorithmParameterSpec paramSpec),void,Initializes this parameter object using the parameters specified in paramSpec.,"

init
public final void init(AlgorithmParameterSpec paramSpec)
                throws InvalidParameterSpecException
Initializes this parameter object using the parameters
 specified in paramSpec.

Parameters:
paramSpec - the parameter specification.
Throws:
InvalidParameterSpecException - if the given parameter
 specification is inappropriate for the initialization of this parameter
 object, or if this parameter object has already been initialized.


"
AlgorithmParameters,init(byte[] params),void,Imports the specified parameters and decodes them according to the primary decoding format for parameters.,"

init
public final void init(byte[] params)
                throws IOException
Imports the specified parameters and decodes them according to the
 primary decoding format for parameters. The primary decoding
 format for parameters is ASN.1, if an ASN.1 specification for this type
 of parameters exists.

Parameters:
params - the encoded parameters.
Throws:
IOException - on decoding errors, or if this parameter object
 has already been initialized.


"
AlgorithmParameters,"init(byte[] params, String format)",void,Imports the parameters from params and decodes them according to the specified decoding scheme.,"

init
public final void init(byte[] params,
                       String format)
                throws IOException
Imports the parameters from params and decodes them
 according to the specified decoding scheme.
 If format is null, the
 primary decoding format for parameters is used. The primary decoding
 format is ASN.1, if an ASN.1 specification for these parameters
 exists.

Parameters:
params - the encoded parameters.
format - the name of the decoding scheme.
Throws:
IOException - on decoding errors, or if this parameter object
 has already been initialized.


"
AlgorithmParameters,toString(),String,Returns a formatted string describing the parameters.,"

toString
public final String toString()
Returns a formatted string describing the parameters.

Overrides:
toString in class Object
Returns:
a formatted string describing the parameters, or null if this
 parameter object has not been initialized.


"
AlgorithmParametersSpi,engineGetEncoded(),protected abstract byte[],Returns the parameters in their primary encoding format.,"

engineGetEncoded
protected abstract byte[] engineGetEncoded()
                                    throws IOException
Returns the parameters in their primary encoding format.
 The primary encoding format for parameters is ASN.1, if an ASN.1
 specification for this type of parameters exists.

Returns:
the parameters encoded using their primary encoding format.
Throws:
IOException - on encoding errors.


"
AlgorithmParametersSpi,engineGetEncoded(String format),protected abstract byte[],Returns the parameters encoded in the specified format.,"

engineGetEncoded
protected abstract byte[] engineGetEncoded(String format)
                                    throws IOException
Returns the parameters encoded in the specified format.
 If format is null, the
 primary encoding format for parameters is used. The primary encoding
 format is ASN.1, if an ASN.1 specification for these parameters
 exists.

Parameters:
format - the name of the encoding format.
Returns:
the parameters encoded using the specified encoding scheme.
Throws:
IOException - on encoding errors.


"
AlgorithmParametersSpi,engineGetParameterSpec(Class<T> paramSpec),protected abstract <T extends AlgorithmParameterSpec> T,Returns a (transparent) specification of this parameters object.,"

engineGetParameterSpec
protected abstract <T extends AlgorithmParameterSpec> T engineGetParameterSpec(Class<T> paramSpec)
                                                                        throws InvalidParameterSpecException
Returns a (transparent) specification of this parameters
 object.
 paramSpec identifies the specification class in which
 the parameters should be returned. It could, for example, be
 DSAParameterSpec.class, to indicate that the
 parameters should be returned in an instance of the
 DSAParameterSpec class.

Type Parameters:
T - the type of the parameter specification to be returned
Parameters:
paramSpec - the specification class in which
 the parameters should be returned.
Returns:
the parameter specification.
Throws:
InvalidParameterSpecException - if the requested parameter
 specification is inappropriate for this parameter object.


"
AlgorithmParametersSpi,engineInit(AlgorithmParameterSpec paramSpec),protected abstract void,Initializes this parameters object using the parameters specified in paramSpec.,"

engineInit
protected abstract void engineInit(AlgorithmParameterSpec paramSpec)
                            throws InvalidParameterSpecException
Initializes this parameters object using the parameters
 specified in paramSpec.

Parameters:
paramSpec - the parameter specification.
Throws:
InvalidParameterSpecException - if the given parameter
 specification is inappropriate for the initialization of this parameter
 object.


"
AlgorithmParametersSpi,engineInit(byte[] params),protected abstract void,Imports the specified parameters and decodes them according to the primary decoding format for parameters.,"

engineInit
protected abstract void engineInit(byte[] params)
                            throws IOException
Imports the specified parameters and decodes them
 according to the primary decoding format for parameters.
 The primary decoding format for parameters is ASN.1, if an ASN.1
 specification for this type of parameters exists.

Parameters:
params - the encoded parameters.
Throws:
IOException - on decoding errors


"
AlgorithmParametersSpi,"engineInit(byte[] params, String format)",protected abstract void,Imports the parameters from params and decodes them according to the specified decoding format.,"

engineInit
protected abstract void engineInit(byte[] params,
                                   String format)
                            throws IOException
Imports the parameters from params and
 decodes them according to the specified decoding format.
 If format is null, the
 primary decoding format for parameters is used. The primary decoding
 format is ASN.1, if an ASN.1 specification for these parameters
 exists.

Parameters:
params - the encoded parameters.
format - the name of the decoding format.
Throws:
IOException - on decoding errors


"
AlgorithmParametersSpi,engineToString(),protected abstract String,Returns a formatted string describing the parameters.,"

engineToString
protected abstract String engineToString()
Returns a formatted string describing the parameters.

Returns:
a formatted string describing the parameters.


"
AllPermission,equals(Object obj),boolean,Checks two AllPermission objects for equality.,"

equals
public boolean equals(Object obj)
Checks two AllPermission objects for equality. Two AllPermission
 objects are always equal.

Specified by:
equals in class Permission
Parameters:
obj - the object we are testing for equality with this object.
Returns:
true if obj is an AllPermission, false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
AllPermission,getActions(),String,Returns the canonical string representation of the actions.,"

getActions
public String getActions()
Returns the canonical string representation of the actions.

Specified by:
getActions in class Permission
Returns:
the actions.


"
AllPermission,hashCode(),int,Returns the hash code value for this object.,"

hashCode
public int hashCode()
Returns the hash code value for this object.

Specified by:
hashCode in class Permission
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
AllPermission,implies(Permission p),boolean,"Checks if the specified permission is ""implied"" by this object.","

implies
public boolean implies(Permission p)
Checks if the specified permission is ""implied"" by
 this object. This method always returns true.

Specified by:
implies in class Permission
Parameters:
p - the permission to check against.
Returns:
return


"
AllPermission,newPermissionCollection(),PermissionCollection,Returns a new PermissionCollection object for storing AllPermission objects.,"

newPermissionCollection
public PermissionCollection newPermissionCollection()
Returns a new PermissionCollection object for storing AllPermission
 objects.
 

Overrides:
newPermissionCollection in class Permission
Returns:
a new PermissionCollection object suitable for
 storing AllPermissions.


"
AuthProvider,"login(Subject subject, CallbackHandler handler)",abstract void,Log in to this provider.,"

login
public abstract void login(Subject subject,
                           CallbackHandler handler)
                    throws LoginException
Log in to this provider.

  The provider relies on a CallbackHandler
 to obtain authentication information from the caller
 (a PIN, for example).  If the caller passes a null
 handler to this method, the provider uses the handler set in the
 setCallbackHandler method.
 If no handler was set in that method, the provider queries the
 auth.login.defaultCallbackHandler security property
 for the fully qualified class name of a default handler implementation.
 If the security property is not set,
 the provider is assumed to have alternative means
 for obtaining authentication information.

Parameters:
subject - the Subject which may contain
          principals/credentials used for authentication,
          or may be populated with additional principals/credentials
          after successful authentication has completed.
          This parameter may be null.
handler - the CallbackHandler used by
          this provider to obtain authentication information
          from the caller, which may be null
Throws:
LoginException - if the login operation fails
SecurityException - if the caller does not pass a
  security check for
  SecurityPermission(""authProvider.name""),
  where name is the value returned by
  this provider's getName method


"
AuthProvider,logout(),abstract void,Log out from this provider.,"

logout
public abstract void logout()
                     throws LoginException
Log out from this provider.

Throws:
LoginException - if the logout operation fails
SecurityException - if the caller does not pass a
  security check for
  SecurityPermission(""authProvider.name""),
  where name is the value returned by
  this provider's getName method


"
AuthProvider,setCallbackHandler(CallbackHandler handler),abstract void,Set a CallbackHandler.,"

setCallbackHandler
public abstract void setCallbackHandler(CallbackHandler handler)
Set a CallbackHandler.

  The provider uses this handler if one is not passed to the
 login method.  The provider also uses this handler
 if it invokes login on behalf of callers.
 In either case if a handler is not set via this method,
 the provider queries the
 auth.login.defaultCallbackHandler security property
 for the fully qualified class name of a default handler implementation.
 If the security property is not set,
 the provider is assumed to have alternative means
 for obtaining authentication information.

Parameters:
handler - a CallbackHandler for obtaining
          authentication information, which may be null
Throws:
SecurityException - if the caller does not pass a
  security check for
  SecurityPermission(""authProvider.name""),
  where name is the value returned by
  this provider's getName method


"
BasicPermission,equals(Object obj),boolean,Checks two BasicPermission objects for equality.,"

equals
public boolean equals(Object obj)
Checks two BasicPermission objects for equality.
 Checks that obj's class is the same as this object's class
 and has the same name as this object.
 

Specified by:
equals in class Permission
Parameters:
obj - the object we are testing for equality with this object.
Returns:
true if obj's class is the same as this object's class
  and has the same name as this BasicPermission object, false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
BasicPermission,getActions(),String,"Returns the canonical string representation of the actions, which currently is the empty string """", since there are no actions for a BasicPermission.","

getActions
public String getActions()
Returns the canonical string representation of the actions,
 which currently is the empty string """", since there are no actions for
 a BasicPermission.

Specified by:
getActions in class Permission
Returns:
the empty string """".


"
BasicPermission,hashCode(),int,Returns the hash code value for this object.,"

hashCode
public int hashCode()
Returns the hash code value for this object.
 The hash code used is the hash code of the name, that is,
 getName().hashCode(), where getName is
 from the Permission superclass.

Specified by:
hashCode in class Permission
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
BasicPermission,implies(Permission p),boolean,"Checks if the specified permission is ""implied"" by this object.","

implies
public boolean implies(Permission p)
Checks if the specified permission is ""implied"" by
 this object.
 
 More specifically, this method returns true if:
 
 p's class is the same as this object's class, and
  p's name equals or (in the case of wildcards)
      is implied by this object's
      name. For example, ""a.b.*"" implies ""a.b.c"".
 

Specified by:
implies in class Permission
Parameters:
p - the permission to check against.
Returns:
true if the passed permission is equal to or
 implied by this permission, false otherwise.


"
BasicPermission,newPermissionCollection(),PermissionCollection,Returns a new PermissionCollection object for storing BasicPermission objects.,"

newPermissionCollection
public PermissionCollection newPermissionCollection()
Returns a new PermissionCollection object for storing BasicPermission
 objects.

 BasicPermission objects must be stored in a manner that allows them
 to be inserted in any order, but that also enables the
 PermissionCollection implies method
 to be implemented in an efficient (and consistent) manner.

Overrides:
newPermissionCollection in class Permission
Returns:
a new PermissionCollection object suitable for
 storing BasicPermissions.


"
CodeSigner,equals(Object obj),boolean,Tests for equality between the specified object and this code signer.,"

equals
public boolean equals(Object obj)
Tests for equality between the specified object and this
 code signer. Two code signers are considered equal if their
 signer certificate paths are equal and if their timestamps are equal,
 if present in both.

Overrides:
equals in class Object
Parameters:
obj - the object to test for equality with this object.
Returns:
true if the objects are considered equal, false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
CodeSigner,getSignerCertPath(),CertPath,Returns the signer's certificate path.,"

getSignerCertPath
public CertPath getSignerCertPath()
Returns the signer's certificate path.

Returns:
A certificate path.


"
CodeSigner,getTimestamp(),Timestamp,Returns the signature timestamp.,"

getTimestamp
public Timestamp getTimestamp()
Returns the signature timestamp.

Returns:
The timestamp or null if none is present.


"
CodeSigner,hashCode(),int,Returns the hash code value for this code signer.,"

hashCode
public int hashCode()
Returns the hash code value for this code signer.
 The hash code is generated using the signer's certificate path and the
 timestamp, if present.

Overrides:
hashCode in class Object
Returns:
a hash code value for this code signer.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
CodeSigner,toString(),String,Returns a string describing this code signer.,"

toString
public String toString()
Returns a string describing this code signer.

Overrides:
toString in class Object
Returns:
A string comprising the signer's certificate and a timestamp,
         if present.


"
CodeSource,equals(Object obj),boolean,Tests for equality between the specified object and this object.,"

equals
public boolean equals(Object obj)
Tests for equality between the specified object and this
 object. Two CodeSource objects are considered equal if their
 locations are of identical value and if their signer certificate
 chains are of identical value. It is not required that
 the certificate chains be in the same order.

Overrides:
equals in class Object
Parameters:
obj - the object to test for equality with this object.
Returns:
true if the objects are considered equal, false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
CodeSource,getCertificates(),Certificate[],Returns the certificates associated with this CodeSource.,"

getCertificates
public final Certificate[] getCertificates()
Returns the certificates associated with this CodeSource.
 
 If this CodeSource object was created using the
 CodeSource(URL url, CodeSigner[] signers)
 constructor then its certificate chains are extracted and used to
 create an array of Certificate objects. Each signer certificate is
 followed by its supporting certificate chain (which may be empty).
 Each signer certificate and its supporting certificate chain is ordered
 bottom-to-top (i.e., with the signer certificate first and the (root)
 certificate authority last).

Returns:
A copy of the certificates array, or null if there is none.


"
CodeSource,getCodeSigners(),CodeSigner[],Returns the code signers associated with this CodeSource.,"

getCodeSigners
public final CodeSigner[] getCodeSigners()
Returns the code signers associated with this CodeSource.
 
 If this CodeSource object was created using the
 CodeSource(URL url, java.security.cert.Certificate[] certs)
 constructor then its certificate chains are extracted and used to
 create an array of CodeSigner objects. Note that only X.509 certificates
 are examined - all other certificate types are ignored.

Returns:
A copy of the code signer array, or null if there is none.
Since:
1.5


"
CodeSource,getLocation(),URL,Returns the location associated with this CodeSource.,"

getLocation
public final URL getLocation()
Returns the location associated with this CodeSource.

Returns:
the location (URL).


"
CodeSource,hashCode(),int,Returns the hash code value for this object.,"

hashCode
public int hashCode()
Returns the hash code value for this object.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
CodeSource,implies(CodeSource codesource),boolean,"Returns true if this CodeSource object ""implies"" the specified CodeSource.","

implies
public boolean implies(CodeSource codesource)
Returns true if this CodeSource object ""implies"" the specified CodeSource.
 
 More specifically, this method makes the following checks.
 If any fail, it returns false. If they all succeed, it returns true.
 
 codesource must not be null.
  If this object's certificates are not null, then all
 of this object's certificates must be present in codesource's
 certificates.
  If this object's location (getLocation()) is not null, then the
 following checks are made against this object's location and
 codesource's:
   
 codesource's location must not be null.

       If this object's location
           equals codesource's location, then return true.

       This object's protocol (getLocation().getProtocol()) must be
           equal to codesource's protocol, ignoring case.

       If this object's host (getLocation().getHost()) is not null,
           then the SocketPermission
           constructed with this object's host must imply the
           SocketPermission constructed with codesource's host.

       If this object's port (getLocation().getPort()) is not
           equal to -1 (that is, if a port is specified), it must equal
           codesource's port or default port
           (codesource.getLocation().getDefaultPort()).

       If this object's file (getLocation().getFile()) doesn't equal
           codesource's file, then the following checks are made:
           If this object's file ends with ""/-"",
           then codesource's file must start with this object's
           file (exclusive the trailing ""-"").
           If this object's file ends with a ""/*"",
           then codesource's file must start with this object's
           file and must not have any further ""/"" separators.
           If this object's file doesn't end with a ""/"",
           then codesource's file must match this object's
           file with a '/' appended.

       If this object's reference (getLocation().getRef()) is
           not null, it must equal codesource's reference.

   


 For example, the codesource objects with the following locations
 and null certificates all imply
 the codesource with the location ""http://java.sun.com/classes/foo.jar""
 and null certificates:
 
     http:
     http://*.sun.com/classes/*
     http://java.sun.com/classes/-
     http://java.sun.com/classes/foo.jar
 

 Note that if this CodeSource has a null location and a null
 certificate chain, then it implies every other CodeSource.

Parameters:
codesource - CodeSource to compare against.
Returns:
true if the specified codesource is implied by this codesource,
 false if not.


"
CodeSource,toString(),String,"Returns a string describing this CodeSource, telling its URL and certificates.","

toString
public String toString()
Returns a string describing this CodeSource, telling its
 URL and certificates.

Overrides:
toString in class Object
Returns:
information about this CodeSource.


"
DigestInputStream,getMessageDigest(),MessageDigest,Returns the message digest associated with this stream.,"

getMessageDigest
public MessageDigest getMessageDigest()
Returns the message digest associated with this stream.

Returns:
the message digest associated with this stream.
See Also:
setMessageDigest(java.security.MessageDigest)


"
DigestInputStream,on(boolean on),void,Turns the digest function on or off.,"

on
public void on(boolean on)
Turns the digest function on or off. The default is on.  When
 it is on, a call to one of the read methods results in an
 update on the message digest.  But when it is off, the message
 digest is not updated.

Parameters:
on - true to turn the digest function on, false to turn
 it off.


"
DigestInputStream,read(),int,"Reads a byte, and updates the message digest (if the digest function is on).","

read
public int read()
         throws IOException
Reads a byte, and updates the message digest (if the digest
 function is on).  That is, this method reads a byte from the
 input stream, blocking until the byte is actually read. If the
 digest function is on (see on), this method
 will then call update on the message digest associated
 with this stream, passing it the byte read.

Overrides:
read in class FilterInputStream
Returns:
the byte read.
Throws:
IOException - if an I/O error occurs.
See Also:
MessageDigest.update(byte)


"
DigestInputStream,"read(byte[] b, int off, int len)",int,"Reads into a byte array, and updates the message digest (if the digest function is on).","

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads into a byte array, and updates the message digest (if the
 digest function is on).  That is, this method reads up to
 len bytes from the input stream into the array
 b, starting at offset off. This method
 blocks until the data is actually
 read. If the digest function is on (see
 on), this method will then call update
 on the message digest associated with this stream, passing it
 the data.

Overrides:
read in class FilterInputStream
Parameters:
b - the array into which the data is read.
off - the starting offset into b of where the
 data should be placed.
len - the maximum number of bytes to be read from the input
 stream into b, starting at offset off.
Returns:
the actual number of bytes read. This is less than
 len if the end of the stream is reached prior to
 reading len bytes. -1 is returned if no bytes were
 read because the end of the stream had already been reached when
 the call was made.
Throws:
IOException - if an I/O error occurs.
See Also:
MessageDigest.update(byte[], int, int)


"
DigestInputStream,setMessageDigest(MessageDigest digest),void,Associates the specified message digest with this stream.,"

setMessageDigest
public void setMessageDigest(MessageDigest digest)
Associates the specified message digest with this stream.

Parameters:
digest - the message digest to be associated with this stream.
See Also:
getMessageDigest()


"
DigestInputStream,toString(),String,Prints a string representation of this digest input stream and its associated message digest object.,"

toString
public String toString()
Prints a string representation of this digest input stream and
 its associated message digest object.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
DigestOutputStream,getMessageDigest(),MessageDigest,Returns the message digest associated with this stream.,"

getMessageDigest
public MessageDigest getMessageDigest()
Returns the message digest associated with this stream.

Returns:
the message digest associated with this stream.
See Also:
setMessageDigest(java.security.MessageDigest)


"
DigestOutputStream,on(boolean on),void,Turns the digest function on or off.,"

on
public void on(boolean on)
Turns the digest function on or off. The default is on.  When
 it is on, a call to one of the write methods results in an
 update on the message digest.  But when it is off, the message
 digest is not updated.

Parameters:
on - true to turn the digest function on, false to turn it
 off.


"
DigestOutputStream,setMessageDigest(MessageDigest digest),void,Associates the specified message digest with this stream.,"

setMessageDigest
public void setMessageDigest(MessageDigest digest)
Associates the specified message digest with this stream.

Parameters:
digest - the message digest to be associated with this stream.
See Also:
getMessageDigest()


"
DigestOutputStream,toString(),String,Prints a string representation of this digest output stream and its associated message digest object.,"

toString
public String toString()
Prints a string representation of this digest output stream and
 its associated message digest object.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
DigestOutputStream,"write(byte[] b, int off, int len)",void,"Updates the message digest (if the digest function is on) using the specified subarray, and in any case writes the subarray to the output stream.","

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Updates the message digest (if the digest function is on) using
 the specified subarray, and in any case writes the subarray to
 the output stream. That is, if the digest function is on (see
 on), this method calls update
 on the message digest associated with this stream, passing it
 the subarray specifications. This method then writes the subarray
 bytes to the output stream, blocking until the bytes are actually
 written.

Overrides:
write in class FilterOutputStream
Parameters:
b - the array containing the subarray to be used for updating
 and writing to the output stream.
off - the offset into b of the first byte to
 be updated and written.
len - the number of bytes of data to be updated and written
 from b, starting at offset off.
Throws:
IOException - if an I/O error occurs.
See Also:
MessageDigest.update(byte[], int, int)


"
DigestOutputStream,write(int b),void,"Updates the message digest (if the digest function is on) using the specified byte, and in any case writes the byte to the output stream.","

write
public void write(int b)
           throws IOException
Updates the message digest (if the digest function is on) using
 the specified byte, and in any case writes the byte
 to the output stream. That is, if the digest function is on
 (see on), this method calls
 update on the message digest associated with this
 stream, passing it the byte b. This method then
 writes the byte to the output stream, blocking until the byte
 is actually written.

Overrides:
write in class FilterOutputStream
Parameters:
b - the byte to be used for updating and writing to the
 output stream.
Throws:
IOException - if an I/O error occurs.
See Also:
MessageDigest.update(byte)


"
DomainLoadStoreParameter,getConfiguration(),URI,Gets the identifier for the domain configuration data.,"

getConfiguration
public URI getConfiguration()
Gets the identifier for the domain configuration data.

Returns:
the identifier for the configuration data


"
DomainLoadStoreParameter,getProtectionParameter(),KeyStore.ProtectionParameter,Gets the keystore protection parameters for this domain.,"

getProtectionParameter
public KeyStore.ProtectionParameter getProtectionParameter()
Gets the keystore protection parameters for this domain.
 Keystore domains do not support a protection parameter.

Specified by:
getProtectionParameter in interface KeyStore.LoadStoreParameter
Returns:
always returns null


"
DomainLoadStoreParameter,getProtectionParams(),"Map<String,KeyStore.ProtectionParameter>",Gets the keystore protection parameters for keystores in this domain.,"

getProtectionParams
public Map<String,KeyStore.ProtectionParameter> getProtectionParams()
Gets the keystore protection parameters for keystores in this
 domain.

Returns:
an unmodifiable map of keystore names to protection
     parameters


"
GuardedObject,getObject(),Object,"Retrieves the guarded object, or throws an exception if access to the guarded object is denied by the guard.","

getObject
public Object getObject()
                 throws SecurityException
Retrieves the guarded object, or throws an exception if access
 to the guarded object is denied by the guard.

Returns:
the guarded object.
Throws:
SecurityException - if access to the guarded object is
 denied.


"
Identity,addCertificate(Certificate certificate),void,Deprecated.,"

addCertificate
public void addCertificate(Certificate certificate)
                    throws KeyManagementException
Deprecated. 
Adds a certificate for this identity. If the identity has a public
 key, the public key in the certificate must be the same, and if
 the identity does not have a public key, the identity's
 public key is set to be that specified in the certificate.

 First, if there is a security manager, its checkSecurityAccess
 method is called with ""addIdentityCertificate""
 as its argument to see if it's ok to add a certificate.

Parameters:
certificate - the certificate to be added.
Throws:
KeyManagementException - if the certificate is not valid,
 if the public key in the certificate being added conflicts with
 this identity's public key, or if another exception occurs.
SecurityException - if a security manager exists and its
 checkSecurityAccess method doesn't allow
 adding a certificate.
See Also:
SecurityManager.checkSecurityAccess(java.lang.String)


"
Identity,certificates(),Certificate[],Deprecated.,"

certificates
public Certificate[] certificates()
Deprecated. 
Returns a copy of all the certificates for this identity.

Returns:
a copy of all the certificates for this identity.


"
Identity,equals(Object identity),boolean,Deprecated.,"

equals
public final boolean equals(Object identity)
Deprecated. 
Tests for equality between the specified object and this identity.
 This first tests to see if the entities actually refer to the same
 object, in which case it returns true. Next, it checks to see if
 the entities have the same name and the same scope. If they do,
 the method returns true. Otherwise, it calls
 identityEquals, which subclasses should
 override.

Specified by:
equals in interface Principal
Overrides:
equals in class Object
Parameters:
identity - the object to test for equality with this identity.
Returns:
true if the objects are considered equal, false otherwise.
See Also:
identityEquals(java.security.Identity)


"
Identity,getInfo(),String,Deprecated.,"

getInfo
public String getInfo()
Deprecated. 
Returns general information previously specified for this identity.

Returns:
general information about this identity.
See Also:
setInfo(java.lang.String)


"
Identity,getName(),String,Deprecated.,"

getName
public final String getName()
Deprecated. 
Returns this identity's name.

Specified by:
getName in interface Principal
Returns:
the name of this identity.


"
Identity,getPublicKey(),PublicKey,Deprecated.,"

getPublicKey
public PublicKey getPublicKey()
Deprecated. 
Returns this identity's public key.

Returns:
the public key for this identity.
See Also:
setPublicKey(java.security.PublicKey)


"
Identity,getScope(),IdentityScope,Deprecated.,"

getScope
public final IdentityScope getScope()
Deprecated. 
Returns this identity's scope.

Returns:
the scope of this identity.


"
Identity,hashCode(),int,Deprecated.,"

hashCode
public int hashCode()
Deprecated. 
Returns a hashcode for this identity.

Specified by:
hashCode in interface Principal
Overrides:
hashCode in class Object
Returns:
a hashcode for this identity.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Identity,identityEquals(Identity identity),protected boolean,Deprecated.,"

identityEquals
protected boolean identityEquals(Identity identity)
Deprecated. 
Tests for equality between the specified identity and this identity.
 This method should be overriden by subclasses to test for equality.
 The default behavior is to return true if the names and public keys
 are equal.

Parameters:
identity - the identity to test for equality with this identity.
Returns:
true if the identities are considered equal, false
 otherwise.
See Also:
equals(java.lang.Object)


"
Identity,removeCertificate(Certificate certificate),void,Deprecated.,"

removeCertificate
public void removeCertificate(Certificate certificate)
                       throws KeyManagementException
Deprecated. 
Removes a certificate from this identity.

 First, if there is a security manager, its checkSecurityAccess
 method is called with ""removeIdentityCertificate""
 as its argument to see if it's ok to remove a certificate.

Parameters:
certificate - the certificate to be removed.
Throws:
KeyManagementException - if the certificate is
 missing, or if another exception occurs.
SecurityException - if a security manager exists and its
 checkSecurityAccess method doesn't allow
 removing a certificate.
See Also:
SecurityManager.checkSecurityAccess(java.lang.String)


"
Identity,setInfo(String info),void,Deprecated.,"

setInfo
public void setInfo(String info)
Deprecated. 
Specifies a general information string for this identity.

 First, if there is a security manager, its checkSecurityAccess
 method is called with ""setIdentityInfo""
 as its argument to see if it's ok to specify the information string.

Parameters:
info - the information string.
Throws:
SecurityException - if a security manager exists and its
 checkSecurityAccess method doesn't allow
 setting the information string.
See Also:
getInfo(), 
SecurityManager.checkSecurityAccess(java.lang.String)


"
Identity,setPublicKey(PublicKey key),void,Deprecated.,"

setPublicKey
public void setPublicKey(PublicKey key)
                  throws KeyManagementException
Deprecated. 
Sets this identity's public key. The old key and all of this
 identity's certificates are removed by this operation.

 First, if there is a security manager, its checkSecurityAccess
 method is called with ""setIdentityPublicKey""
 as its argument to see if it's ok to set the public key.

Parameters:
key - the public key for this identity.
Throws:
KeyManagementException - if another identity in the
 identity's scope has the same public key, or if another exception occurs.
SecurityException - if a security manager exists and its
 checkSecurityAccess method doesn't allow
 setting the public key.
See Also:
getPublicKey(), 
SecurityManager.checkSecurityAccess(java.lang.String)


"
Identity,toString(),String,Deprecated.,"

toString
public String toString()
Deprecated. 
Returns a short string describing this identity, telling its
 name and its scope (if any).

 First, if there is a security manager, its checkSecurityAccess
 method is called with ""printIdentity""
 as its argument to see if it's ok to return the string.

Specified by:
toString in interface Principal
Overrides:
toString in class Object
Returns:
information about this identity, such as its name and the
 name of its scope (if any).
Throws:
SecurityException - if a security manager exists and its
 checkSecurityAccess method doesn't allow
 returning a string describing this identity.
See Also:
SecurityManager.checkSecurityAccess(java.lang.String)


"
Identity,toString(boolean detailed),String,Deprecated.,"

toString
public String toString(boolean detailed)
Deprecated. 
Returns a string representation of this identity, with
 optionally more details than that provided by the
 toString method without any arguments.

 First, if there is a security manager, its checkSecurityAccess
 method is called with ""printIdentity""
 as its argument to see if it's ok to return the string.

Parameters:
detailed - whether or not to provide detailed information.
Returns:
information about this identity. If detailed
 is true, then this method returns more information than that
 provided by the toString method without any arguments.
Throws:
SecurityException - if a security manager exists and its
 checkSecurityAccess method doesn't allow
 returning a string describing this identity.
See Also:
toString(), 
SecurityManager.checkSecurityAccess(java.lang.String)


"
IdentityScope,addIdentity(Identity identity),abstract void,Deprecated.,"

addIdentity
public abstract void addIdentity(Identity identity)
                          throws KeyManagementException
Deprecated. 
Adds an identity to this identity scope.

Parameters:
identity - the identity to be added.
Throws:
KeyManagementException - if the identity is not
 valid, a name conflict occurs, another identity has the same
 public key as the identity being added, or another exception
 occurs.


"
IdentityScope,getIdentity(Principal principal),Identity,Deprecated.,"

getIdentity
public Identity getIdentity(Principal principal)
Deprecated. 
Retrieves the identity whose name is the same as that of the
 specified principal. (Note: Identity implements Principal.)

Parameters:
principal - the principal corresponding to the identity
 to be retrieved.
Returns:
the identity whose name is the same as that of the
 principal, or null if there are no identities of the same name
 in this scope.


"
IdentityScope,getIdentity(PublicKey key),abstract Identity,Deprecated.,"

getIdentity
public abstract Identity getIdentity(PublicKey key)
Deprecated. 
Retrieves the identity with the specified public key.

Parameters:
key - the public key for the identity to be returned.
Returns:
the identity with the given key, or null if there are
 no identities in this scope with that key.


"
IdentityScope,getIdentity(String name),abstract Identity,Deprecated.,"

getIdentity
public abstract Identity getIdentity(String name)
Deprecated. 
Returns the identity in this scope with the specified name (if any).

Parameters:
name - the name of the identity to be retrieved.
Returns:
the identity named name, or null if there are
 no identities named name in this scope.


"
IdentityScope,getSystemScope(),static IdentityScope,Deprecated.,"

getSystemScope
public static IdentityScope getSystemScope()
Deprecated. 
Returns the system's identity scope.

Returns:
the system's identity scope, or null if none has been
         set.
See Also:
setSystemScope(java.security.IdentityScope)


"
IdentityScope,identities(),abstract Enumeration<Identity>,Deprecated.,"

identities
public abstract Enumeration<Identity> identities()
Deprecated. 
Returns an enumeration of all identities in this identity scope.

Returns:
an enumeration of all identities in this identity scope.


"
IdentityScope,removeIdentity(Identity identity),abstract void,Deprecated.,"

removeIdentity
public abstract void removeIdentity(Identity identity)
                             throws KeyManagementException
Deprecated. 
Removes an identity from this identity scope.

Parameters:
identity - the identity to be removed.
Throws:
KeyManagementException - if the identity is missing,
 or another exception occurs.


"
IdentityScope,setSystemScope(IdentityScope scope),protected static void,Deprecated.,"

setSystemScope
protected static void setSystemScope(IdentityScope scope)
Deprecated. 
Sets the system's identity scope.

 First, if there is a security manager, its
 checkSecurityAccess
 method is called with ""setSystemScope""
 as its argument to see if it's ok to set the identity scope.

Parameters:
scope - the scope to set.
Throws:
SecurityException - if a security manager exists and its
 checkSecurityAccess method doesn't allow
 setting the identity scope.
See Also:
getSystemScope(), 
SecurityManager.checkSecurityAccess(java.lang.String)


"
IdentityScope,size(),abstract int,Deprecated.,"

size
public abstract int size()
Deprecated. 
Returns the number of identities within this identity scope.

Returns:
the number of identities within this identity scope.


"
IdentityScope,toString(),String,Deprecated.,"

toString
public String toString()
Deprecated. 
Returns a string representation of this identity scope, including
 its name, its scope name, and the number of identities in this
 identity scope.

Specified by:
toString in interface Principal
Overrides:
toString in class Identity
Returns:
a string representation of this identity scope.
See Also:
SecurityManager.checkSecurityAccess(java.lang.String)


"
KeyFactory,generatePrivate(KeySpec keySpec),PrivateKey,Generates a private key object from the provided key specification (key material).,"

generatePrivate
public final PrivateKey generatePrivate(KeySpec keySpec)
                                 throws InvalidKeySpecException
Generates a private key object from the provided key specification
 (key material).

Parameters:
keySpec - the specification (key material) of the private key.
Returns:
the private key.
Throws:
InvalidKeySpecException - if the given key specification
 is inappropriate for this key factory to produce a private key.


"
KeyFactory,generatePublic(KeySpec keySpec),PublicKey,Generates a public key object from the provided key specification (key material).,"

generatePublic
public final PublicKey generatePublic(KeySpec keySpec)
                               throws InvalidKeySpecException
Generates a public key object from the provided key specification
 (key material).

Parameters:
keySpec - the specification (key material) of the public key.
Returns:
the public key.
Throws:
InvalidKeySpecException - if the given key specification
 is inappropriate for this key factory to produce a public key.


"
KeyFactory,getAlgorithm(),String,Gets the name of the algorithm associated with this KeyFactory.,"

getAlgorithm
public final String getAlgorithm()
Gets the name of the algorithm
 associated with this KeyFactory.

Returns:
the name of the algorithm associated with this
 KeyFactory


"
KeyFactory,getInstance(String algorithm),static KeyFactory,Returns a KeyFactory object that converts public/private keys of the specified algorithm.,"

getInstance
public static KeyFactory getInstance(String algorithm)
                              throws NoSuchAlgorithmException
Returns a KeyFactory object that converts
 public/private keys of the specified algorithm.

  This method traverses the list of registered security Providers,
 starting with the most preferred Provider.
 A new KeyFactory object encapsulating the
 KeyFactorySpi implementation from the first
 Provider that supports the specified algorithm is returned.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
algorithm - the name of the requested key algorithm.
 See the KeyFactory section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.
Returns:
the new KeyFactory object.
Throws:
NoSuchAlgorithmException - if no Provider supports a
          KeyFactorySpi implementation for the
          specified algorithm.
See Also:
Provider


"
KeyFactory,"getInstance(String algorithm, Provider provider)",static KeyFactory,Returns a KeyFactory object that converts public/private keys of the specified algorithm.,"

getInstance
public static KeyFactory getInstance(String algorithm,
                                     Provider provider)
                              throws NoSuchAlgorithmException
Returns a KeyFactory object that converts
 public/private keys of the specified algorithm.

  A new KeyFactory object encapsulating the
 KeyFactorySpi implementation from the specified Provider
 object is returned.  Note that the specified Provider object
 does not have to be registered in the provider list.

Parameters:
algorithm - the name of the requested key algorithm.
 See the KeyFactory section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.
provider - the provider.
Returns:
the new KeyFactory object.
Throws:
NoSuchAlgorithmException - if a KeyFactorySpi
          implementation for the specified algorithm is not available
          from the specified Provider object.
IllegalArgumentException - if the specified provider is null.
Since:
1.4
See Also:
Provider


"
KeyFactory,"getInstance(String algorithm, String provider)",static KeyFactory,Returns a KeyFactory object that converts public/private keys of the specified algorithm.,"

getInstance
public static KeyFactory getInstance(String algorithm,
                                     String provider)
                              throws NoSuchAlgorithmException,
                                     NoSuchProviderException
Returns a KeyFactory object that converts
 public/private keys of the specified algorithm.

  A new KeyFactory object encapsulating the
 KeyFactorySpi implementation from the specified provider
 is returned.  The specified provider must be registered
 in the security provider list.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
algorithm - the name of the requested key algorithm.
 See the KeyFactory section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.
provider - the name of the provider.
Returns:
the new KeyFactory object.
Throws:
NoSuchAlgorithmException - if a KeyFactorySpi
          implementation for the specified algorithm is not
          available from the specified provider.
NoSuchProviderException - if the specified provider is not
          registered in the security provider list.
IllegalArgumentException - if the provider name is null
          or empty.
See Also:
Provider


"
KeyFactory,"getKeySpec(Key key, Class<T> keySpec)",<T extends KeySpec> T,Returns a specification (key material) of the given key object.,"

getKeySpec
public final <T extends KeySpec> T getKeySpec(Key key,
                                              Class<T> keySpec)
                                       throws InvalidKeySpecException
Returns a specification (key material) of the given key object.
 keySpec identifies the specification class in which
 the key material should be returned. It could, for example, be
 DSAPublicKeySpec.class, to indicate that the
 key material should be returned in an instance of the
 DSAPublicKeySpec class.

Type Parameters:
T - the type of the key specification to be returned
Parameters:
key - the key.
keySpec - the specification class in which
 the key material should be returned.
Returns:
the underlying key specification (key material) in an instance
 of the requested specification class.
Throws:
InvalidKeySpecException - if the requested key specification is
 inappropriate for the given key, or the given key cannot be processed
 (e.g., the given key has an unrecognized algorithm or format).


"
KeyFactory,getProvider(),Provider,Returns the provider of this key factory object.,"

getProvider
public final Provider getProvider()
Returns the provider of this key factory object.

Returns:
the provider of this key factory object


"
KeyFactory,translateKey(Key key),Key,"Translates a key object, whose provider may be unknown or potentially untrusted, into a corresponding key object of this key factory.","

translateKey
public final Key translateKey(Key key)
                       throws InvalidKeyException
Translates a key object, whose provider may be unknown or potentially
 untrusted, into a corresponding key object of this key factory.

Parameters:
key - the key whose provider is unknown or untrusted.
Returns:
the translated key.
Throws:
InvalidKeyException - if the given key cannot be processed
 by this key factory.


"
KeyFactorySpi,engineGeneratePrivate(KeySpec keySpec),protected abstract PrivateKey,Generates a private key object from the provided key specification (key material).,"

engineGeneratePrivate
protected abstract PrivateKey engineGeneratePrivate(KeySpec keySpec)
                                             throws InvalidKeySpecException
Generates a private key object from the provided key
 specification (key material).

Parameters:
keySpec - the specification (key material) of the private key.
Returns:
the private key.
Throws:
InvalidKeySpecException - if the given key specification
 is inappropriate for this key factory to produce a private key.


"
KeyFactorySpi,engineGeneratePublic(KeySpec keySpec),protected abstract PublicKey,Generates a public key object from the provided key specification (key material).,"

engineGeneratePublic
protected abstract PublicKey engineGeneratePublic(KeySpec keySpec)
                                           throws InvalidKeySpecException
Generates a public key object from the provided key
 specification (key material).

Parameters:
keySpec - the specification (key material) of the public key.
Returns:
the public key.
Throws:
InvalidKeySpecException - if the given key specification
 is inappropriate for this key factory to produce a public key.


"
KeyFactorySpi,"engineGetKeySpec(Key key, Class<T> keySpec)",protected abstract <T extends KeySpec> T,Returns a specification (key material) of the given key object.,"

engineGetKeySpec
protected abstract <T extends KeySpec> T engineGetKeySpec(Key key,
                                                          Class<T> keySpec)
                                                   throws InvalidKeySpecException
Returns a specification (key material) of the given key
 object.
 keySpec identifies the specification class in which
 the key material should be returned. It could, for example, be
 DSAPublicKeySpec.class, to indicate that the
 key material should be returned in an instance of the
 DSAPublicKeySpec class.

Type Parameters:
T - the type of the key specification to be returned
Parameters:
key - the key.
keySpec - the specification class in which
 the key material should be returned.
Returns:
the underlying key specification (key material) in an instance
 of the requested specification class.
Throws:
InvalidKeySpecException - if the requested key specification is
 inappropriate for the given key, or the given key cannot be dealt with
 (e.g., the given key has an unrecognized format).


"
KeyFactorySpi,engineTranslateKey(Key key),protected abstract Key,"Translates a key object, whose provider may be unknown or potentially untrusted, into a corresponding key object of this key factory.","

engineTranslateKey
protected abstract Key engineTranslateKey(Key key)
                                   throws InvalidKeyException
Translates a key object, whose provider may be unknown or
 potentially untrusted, into a corresponding key object of this key
 factory.

Parameters:
key - the key whose provider is unknown or untrusted.
Returns:
the translated key.
Throws:
InvalidKeyException - if the given key cannot be processed
 by this key factory.


"
KeyPair,getPrivate(),PrivateKey,Returns a reference to the private key component of this key pair.,"

getPrivate
public PrivateKey getPrivate()
Returns a reference to the private key component of this key pair.

Returns:
a reference to the private key.


"
KeyPair,getPublic(),PublicKey,Returns a reference to the public key component of this key pair.,"

getPublic
public PublicKey getPublic()
Returns a reference to the public key component of this key pair.

Returns:
a reference to the public key.


"
KeyPairGenerator,generateKeyPair(),KeyPair,Generates a key pair.,"

generateKeyPair
public KeyPair generateKeyPair()
Generates a key pair.

 If this KeyPairGenerator has not been initialized explicitly,
 provider-specific defaults will be used for the size and other
 (algorithm-specific) values of the generated keys.

 This will generate a new key pair every time it is called.

 This method is functionally equivalent to
 genKeyPair.

Specified by:
generateKeyPair in class KeyPairGeneratorSpi
Returns:
the generated key pair


"
KeyPairGenerator,genKeyPair(),KeyPair,Generates a key pair.,"

genKeyPair
public final KeyPair genKeyPair()
Generates a key pair.

 If this KeyPairGenerator has not been initialized explicitly,
 provider-specific defaults will be used for the size and other
 (algorithm-specific) values of the generated keys.

 This will generate a new key pair every time it is called.

 This method is functionally equivalent to
 generateKeyPair.

Returns:
the generated key pair
Since:
1.2


"
KeyPairGenerator,getAlgorithm(),String,Returns the standard name of the algorithm for this key pair generator.,"

getAlgorithm
public String getAlgorithm()
Returns the standard name of the algorithm for this key pair generator.
 See the KeyPairGenerator section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.

Returns:
the standard string name of the algorithm.


"
KeyPairGenerator,getInstance(String algorithm),static KeyPairGenerator,Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm.,"

getInstance
public static KeyPairGenerator getInstance(String algorithm)
                                    throws NoSuchAlgorithmException
Returns a KeyPairGenerator object that generates public/private
 key pairs for the specified algorithm.

  This method traverses the list of registered security Providers,
 starting with the most preferred Provider.
 A new KeyPairGenerator object encapsulating the
 KeyPairGeneratorSpi implementation from the first
 Provider that supports the specified algorithm is returned.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
algorithm - the standard string name of the algorithm.
 See the KeyPairGenerator section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.
Returns:
the new KeyPairGenerator object.
Throws:
NoSuchAlgorithmException - if no Provider supports a
          KeyPairGeneratorSpi implementation for the
          specified algorithm.
See Also:
Provider


"
KeyPairGenerator,"getInstance(String algorithm, Provider provider)",static KeyPairGenerator,Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm.,"

getInstance
public static KeyPairGenerator getInstance(String algorithm,
                                           Provider provider)
                                    throws NoSuchAlgorithmException
Returns a KeyPairGenerator object that generates public/private
 key pairs for the specified algorithm.

  A new KeyPairGenerator object encapsulating the
 KeyPairGeneratorSpi implementation from the specified Provider
 object is returned.  Note that the specified Provider object
 does not have to be registered in the provider list.

Parameters:
algorithm - the standard string name of the algorithm.
 See the KeyPairGenerator section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.
provider - the provider.
Returns:
the new KeyPairGenerator object.
Throws:
NoSuchAlgorithmException - if a KeyPairGeneratorSpi
          implementation for the specified algorithm is not available
          from the specified Provider object.
IllegalArgumentException - if the specified provider is null.
Since:
1.4
See Also:
Provider


"
KeyPairGenerator,"getInstance(String algorithm, String provider)",static KeyPairGenerator,Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm.,"

getInstance
public static KeyPairGenerator getInstance(String algorithm,
                                           String provider)
                                    throws NoSuchAlgorithmException,
                                           NoSuchProviderException
Returns a KeyPairGenerator object that generates public/private
 key pairs for the specified algorithm.

  A new KeyPairGenerator object encapsulating the
 KeyPairGeneratorSpi implementation from the specified provider
 is returned.  The specified provider must be registered
 in the security provider list.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
algorithm - the standard string name of the algorithm.
 See the KeyPairGenerator section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.
provider - the string name of the provider.
Returns:
the new KeyPairGenerator object.
Throws:
NoSuchAlgorithmException - if a KeyPairGeneratorSpi
          implementation for the specified algorithm is not
          available from the specified provider.
NoSuchProviderException - if the specified provider is not
          registered in the security provider list.
IllegalArgumentException - if the provider name is null
          or empty.
See Also:
Provider


"
KeyPairGenerator,getProvider(),Provider,Returns the provider of this key pair generator object.,"

getProvider
public final Provider getProvider()
Returns the provider of this key pair generator object.

Returns:
the provider of this key pair generator object


"
KeyPairGenerator,initialize(AlgorithmParameterSpec params),void,Initializes the key pair generator using the specified parameter set and the SecureRandom implementation of the highest-priority installed provider as the source of randomness.,"

initialize
public void initialize(AlgorithmParameterSpec params)
                throws InvalidAlgorithmParameterException
Initializes the key pair generator using the specified parameter
 set and the SecureRandom
 implementation of the highest-priority installed provider as the source
 of randomness.
 (If none of the installed providers supply an implementation of
 SecureRandom, a system-provided source of randomness is
 used.).

 This concrete method has been added to this previously-defined
 abstract class.
 This method calls the KeyPairGeneratorSpi
 initialize method,
 passing it params and a source of randomness (obtained
 from the highest-priority installed provider or system-provided if none
 of the installed providers supply one).
 That initialize method always throws an
 UnsupportedOperationException if it is not overridden by the provider.

Parameters:
params - the parameter set used to generate the keys.
Throws:
InvalidAlgorithmParameterException - if the given parameters
 are inappropriate for this key pair generator.
Since:
1.2


"
KeyPairGenerator,"initialize(AlgorithmParameterSpec params, SecureRandom random)",void,Initializes the key pair generator with the given parameter set and source of randomness.,"

initialize
public void initialize(AlgorithmParameterSpec params,
                       SecureRandom random)
                throws InvalidAlgorithmParameterException
Initializes the key pair generator with the given parameter
 set and source of randomness.

 This concrete method has been added to this previously-defined
 abstract class.
 This method calls the KeyPairGeneratorSpi initialize method,
 passing it params and random.
 That initialize
 method always throws an
 UnsupportedOperationException if it is not overridden by the provider.

Overrides:
initialize in class KeyPairGeneratorSpi
Parameters:
params - the parameter set used to generate the keys.
random - the source of randomness.
Throws:
InvalidAlgorithmParameterException - if the given parameters
 are inappropriate for this key pair generator.
Since:
1.2


"
KeyPairGenerator,initialize(int keysize),void,Initializes the key pair generator for a certain keysize using a default parameter set and the SecureRandom implementation of the highest-priority installed provider as the source of randomness.,"

initialize
public void initialize(int keysize)
Initializes the key pair generator for a certain keysize using
 a default parameter set and the SecureRandom
 implementation of the highest-priority installed provider as the source
 of randomness.
 (If none of the installed providers supply an implementation of
 SecureRandom, a system-provided source of randomness is
 used.)

Parameters:
keysize - the keysize. This is an
 algorithm-specific metric, such as modulus length, specified in
 number of bits.
Throws:
InvalidParameterException - if the keysize is not
 supported by this KeyPairGenerator object.


"
KeyPairGenerator,"initialize(int keysize, SecureRandom random)",void,Initializes the key pair generator for a certain keysize with the given source of randomness (and a default parameter set).,"

initialize
public void initialize(int keysize,
                       SecureRandom random)
Initializes the key pair generator for a certain keysize with
 the given source of randomness (and a default parameter set).

Specified by:
initialize in class KeyPairGeneratorSpi
Parameters:
keysize - the keysize. This is an
 algorithm-specific metric, such as modulus length, specified in
 number of bits.
random - the source of randomness.
Throws:
InvalidParameterException - if the keysize is not
 supported by this KeyPairGenerator object.
Since:
1.2


"
KeyPairGeneratorSpi,generateKeyPair(),abstract KeyPair,Generates a key pair.,"

generateKeyPair
public abstract KeyPair generateKeyPair()
Generates a key pair. Unless an initialization method is called
 using a KeyPairGenerator interface, algorithm-specific defaults
 will be used. This will generate a new key pair every time it
 is called.

Returns:
the newly generated KeyPair


"
KeyPairGeneratorSpi,"initialize(AlgorithmParameterSpec params, SecureRandom random)",void,Initializes the key pair generator using the specified parameter set and user-provided source of randomness.,"

initialize
public void initialize(AlgorithmParameterSpec params,
                       SecureRandom random)
                throws InvalidAlgorithmParameterException
Initializes the key pair generator using the specified parameter
 set and user-provided source of randomness.

 This concrete method has been added to this previously-defined
 abstract class. (For backwards compatibility, it cannot be abstract.)
 It may be overridden by a provider to initialize the key pair
 generator. Such an override
 is expected to throw an InvalidAlgorithmParameterException if
 a parameter is inappropriate for this key pair generator.
 If this method is not overridden, it always throws an
 UnsupportedOperationException.

Parameters:
params - the parameter set used to generate the keys.
random - the source of randomness for this generator.
Throws:
InvalidAlgorithmParameterException - if the given parameters
 are inappropriate for this key pair generator.
Since:
1.2


"
KeyPairGeneratorSpi,"initialize(int keysize, SecureRandom random)",abstract void,"Initializes the key pair generator for a certain keysize, using the default parameter set.","

initialize
public abstract void initialize(int keysize,
                                SecureRandom random)
Initializes the key pair generator for a certain keysize, using
 the default parameter set.

Parameters:
keysize - the keysize. This is an
 algorithm-specific metric, such as modulus length, specified in
 number of bits.
random - the source of randomness for this generator.
Throws:
InvalidParameterException - if the keysize is not
 supported by this KeyPairGeneratorSpi object.


"
KeyRep,readResolve(),protected Object,Resolve the Key object.,"

readResolve
protected Object readResolve()
                      throws ObjectStreamException
Resolve the Key object.

  This method supports three Type/format combinations:
 
 Type.SECRET/""RAW"" - returns a SecretKeySpec object
 constructed using encoded key bytes and algorithm
  Type.PUBLIC/""X.509"" - gets a KeyFactory instance for
 the key algorithm, constructs an X509EncodedKeySpec with the
 encoded key bytes, and generates a public key from the spec
  Type.PRIVATE/""PKCS#8"" - gets a KeyFactory instance for
 the key algorithm, constructs a PKCS8EncodedKeySpec with the
 encoded key bytes, and generates a private key from the spec
 


Returns:
the resolved Key object
Throws:
ObjectStreamException - if the Type/format
  combination is unrecognized, if the algorithm, key format, or
  encoded key bytes are unrecognized/invalid, of if the
  resolution of the key fails for any reason


"
KeyStore,aliases(),Enumeration<String>,Lists all the alias names of this keystore.,"

aliases
public final Enumeration<String> aliases()
                                  throws KeyStoreException
Lists all the alias names of this keystore.

Returns:
enumeration of the alias names
Throws:
KeyStoreException - if the keystore has not been initialized
 (loaded).


"
KeyStore,containsAlias(String alias),boolean,Checks if the given alias exists in this keystore.,"

containsAlias
public final boolean containsAlias(String alias)
                            throws KeyStoreException
Checks if the given alias exists in this keystore.

Parameters:
alias - the alias name
Returns:
true if the alias exists, false otherwise
Throws:
KeyStoreException - if the keystore has not been initialized
 (loaded).


"
KeyStore,deleteEntry(String alias),void,Deletes the entry identified by the given alias from this keystore.,"

deleteEntry
public final void deleteEntry(String alias)
                       throws KeyStoreException
Deletes the entry identified by the given alias from this keystore.

Parameters:
alias - the alias name
Throws:
KeyStoreException - if the keystore has not been initialized,
 or if the entry cannot be removed.


"
KeyStore,"entryInstanceOf(String alias, Class<? extends KeyStore.Entry> entryClass)",boolean,Determines if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass.,"

entryInstanceOf
public final boolean entryInstanceOf(String alias,
                                     Class<? extends KeyStore.Entry> entryClass)
                              throws KeyStoreException
Determines if the keystore Entry for the specified
 alias is an instance or subclass of the specified
 entryClass.

Parameters:
alias - the alias name
entryClass - the entry class
Returns:
true if the keystore Entry for the specified
          alias is an instance or subclass of the
          specified entryClass, false otherwise
Throws:
NullPointerException - if
          alias or entryClass
          is null
KeyStoreException - if the keystore has not been
          initialized (loaded)
Since:
1.5


"
KeyStore,getCertificate(String alias),Certificate,Returns the certificate associated with the given alias.,"

getCertificate
public final Certificate getCertificate(String alias)
                                 throws KeyStoreException
Returns the certificate associated with the given alias.

  If the given alias name identifies an entry
 created by a call to setCertificateEntry,
 or created by a call to setEntry with a
 TrustedCertificateEntry,
 then the trusted certificate contained in that entry is returned.

  If the given alias name identifies an entry
 created by a call to setKeyEntry,
 or created by a call to setEntry with a
 PrivateKeyEntry,
 then the first element of the certificate chain in that entry
 is returned.

Parameters:
alias - the alias name
Returns:
the certificate, or null if the given alias does not exist or
 does not contain a certificate.
Throws:
KeyStoreException - if the keystore has not been initialized
 (loaded).


"
KeyStore,getCertificateAlias(Certificate cert),String,Returns the (alias) name of the first keystore entry whose certificate matches the given certificate.,"

getCertificateAlias
public final String getCertificateAlias(Certificate cert)
                                 throws KeyStoreException
Returns the (alias) name of the first keystore entry whose certificate
 matches the given certificate.

  This method attempts to match the given certificate with each
 keystore entry. If the entry being considered was
 created by a call to setCertificateEntry,
 or created by a call to setEntry with a
 TrustedCertificateEntry,
 then the given certificate is compared to that entry's certificate.

  If the entry being considered was
 created by a call to setKeyEntry,
 or created by a call to setEntry with a
 PrivateKeyEntry,
 then the given certificate is compared to the first
 element of that entry's certificate chain.

Parameters:
cert - the certificate to match with.
Returns:
the alias name of the first entry with a matching certificate,
 or null if no such entry exists in this keystore.
Throws:
KeyStoreException - if the keystore has not been initialized
 (loaded).


"
KeyStore,getCertificateChain(String alias),Certificate[],Returns the certificate chain associated with the given alias.,"

getCertificateChain
public final Certificate[] getCertificateChain(String alias)
                                        throws KeyStoreException
Returns the certificate chain associated with the given alias.
 The certificate chain must have been associated with the alias
 by a call to setKeyEntry,
 or by a call to setEntry with a
 PrivateKeyEntry.

Parameters:
alias - the alias name
Returns:
the certificate chain (ordered with the user's certificate first
 followed by zero or more certificate authorities), or null if the given alias
 does not exist or does not contain a certificate chain
Throws:
KeyStoreException - if the keystore has not been initialized
 (loaded).


"
KeyStore,getCreationDate(String alias),Date,Returns the creation date of the entry identified by the given alias.,"

getCreationDate
public final Date getCreationDate(String alias)
                           throws KeyStoreException
Returns the creation date of the entry identified by the given alias.

Parameters:
alias - the alias name
Returns:
the creation date of this entry, or null if the given alias does
 not exist
Throws:
KeyStoreException - if the keystore has not been initialized
 (loaded).


"
KeyStore,getDefaultType(),static String,"Returns the default keystore type as specified by the keystore.type security property, or the string ""jks"" (acronym for ""Java keystore"") if no such property exists.","

getDefaultType
public static final String getDefaultType()
Returns the default keystore type as specified by the
 keystore.type security property, or the string
 ""jks"" (acronym for ""Java keystore"")
 if no such property exists.

 The default keystore type can be used by applications that do not
 want to use a hard-coded keystore type when calling one of the
 getInstance methods, and want to provide a default keystore
 type in case a user does not specify its own.

 The default keystore type can be changed by setting the value of the
 keystore.type security property to the desired keystore type.

Returns:
the default keystore type as specified by the
 keystore.type security property, or the string ""jks""
 if no such property exists.
See Also:
security properties


"
KeyStore,"getEntry(String alias, KeyStore.ProtectionParameter protParam)",KeyStore.Entry,Gets a keystore Entry for the specified alias with the specified protection parameter.,"

getEntry
public final KeyStore.Entry getEntry(String alias,
                                     KeyStore.ProtectionParameter protParam)
                              throws NoSuchAlgorithmException,
                                     UnrecoverableEntryException,
                                     KeyStoreException
Gets a keystore Entry for the specified alias
 with the specified protection parameter.

Parameters:
alias - get the keystore Entry for this alias
protParam - the ProtectionParameter
          used to protect the Entry,
          which may be null
Returns:
the keystore Entry for the specified alias,
          or null if there is no such entry
Throws:
NullPointerException - if
          alias is null
NoSuchAlgorithmException - if the algorithm for recovering the
          entry cannot be found
UnrecoverableEntryException - if the specified
          protParam were insufficient or invalid
UnrecoverableKeyException - if the entry is a
          PrivateKeyEntry or SecretKeyEntry
          and the specified protParam does not contain
          the information needed to recover the key (e.g. wrong password)
KeyStoreException - if the keystore has not been initialized
          (loaded).
Since:
1.5
See Also:
setEntry(String, KeyStore.Entry, KeyStore.ProtectionParameter)


"
KeyStore,getInstance(String type),static KeyStore,Returns a keystore object of the specified type.,"

getInstance
public static KeyStore getInstance(String type)
                            throws KeyStoreException
Returns a keystore object of the specified type.

  This method traverses the list of registered security Providers,
 starting with the most preferred Provider.
 A new KeyStore object encapsulating the
 KeyStoreSpi implementation from the first
 Provider that supports the specified type is returned.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
type - the type of keystore.
 See the KeyStore section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard keystore types.
Returns:
a keystore object of the specified type.
Throws:
KeyStoreException - if no Provider supports a
          KeyStoreSpi implementation for the
          specified type.
See Also:
Provider


"
KeyStore,"getInstance(String type, Provider provider)",static KeyStore,Returns a keystore object of the specified type.,"

getInstance
public static KeyStore getInstance(String type,
                                   Provider provider)
                            throws KeyStoreException
Returns a keystore object of the specified type.

  A new KeyStore object encapsulating the
 KeyStoreSpi implementation from the specified Provider
 object is returned.  Note that the specified Provider object
 does not have to be registered in the provider list.

Parameters:
type - the type of keystore.
 See the KeyStore section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard keystore types.
provider - the provider.
Returns:
a keystore object of the specified type.
Throws:
KeyStoreException - if KeyStoreSpi
          implementation for the specified type is not available
          from the specified Provider object.
IllegalArgumentException - if the specified provider is null.
Since:
1.4
See Also:
Provider


"
KeyStore,"getInstance(String type, String provider)",static KeyStore,Returns a keystore object of the specified type.,"

getInstance
public static KeyStore getInstance(String type,
                                   String provider)
                            throws KeyStoreException,
                                   NoSuchProviderException
Returns a keystore object of the specified type.

  A new KeyStore object encapsulating the
 KeyStoreSpi implementation from the specified provider
 is returned.  The specified provider must be registered
 in the security provider list.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
type - the type of keystore.
 See the KeyStore section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard keystore types.
provider - the name of the provider.
Returns:
a keystore object of the specified type.
Throws:
KeyStoreException - if a KeyStoreSpi
          implementation for the specified type is not
          available from the specified provider.
NoSuchProviderException - if the specified provider is not
          registered in the security provider list.
IllegalArgumentException - if the provider name is null
          or empty.
See Also:
Provider


"
KeyStore,"getKey(String alias, char[] password)",Key,"Returns the key associated with the given alias, using the given password to recover it.","

getKey
public final Key getKey(String alias,
                        char[] password)
                 throws KeyStoreException,
                        NoSuchAlgorithmException,
                        UnrecoverableKeyException
Returns the key associated with the given alias, using the given
 password to recover it.  The key must have been associated with
 the alias by a call to setKeyEntry,
 or by a call to setEntry with a
 PrivateKeyEntry or SecretKeyEntry.

Parameters:
alias - the alias name
password - the password for recovering the key
Returns:
the requested key, or null if the given alias does not exist
 or does not identify a key-related entry.
Throws:
KeyStoreException - if the keystore has not been initialized
 (loaded).
NoSuchAlgorithmException - if the algorithm for recovering the
 key cannot be found
UnrecoverableKeyException - if the key cannot be recovered
 (e.g., the given password is wrong).


"
KeyStore,getProvider(),Provider,Returns the provider of this keystore.,"

getProvider
public final Provider getProvider()
Returns the provider of this keystore.

Returns:
the provider of this keystore.


"
KeyStore,getType(),String,Returns the type of this keystore.,"

getType
public final String getType()
Returns the type of this keystore.

Returns:
the type of this keystore.


"
KeyStore,isCertificateEntry(String alias),boolean,"Returns true if the entry identified by the given alias was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry.","

isCertificateEntry
public final boolean isCertificateEntry(String alias)
                                 throws KeyStoreException
Returns true if the entry identified by the given alias
 was created by a call to setCertificateEntry,
 or created by a call to setEntry with a
 TrustedCertificateEntry.

Parameters:
alias - the alias for the keystore entry to be checked
Returns:
true if the entry identified by the given alias contains a
 trusted certificate, false otherwise.
Throws:
KeyStoreException - if the keystore has not been initialized
 (loaded).


"
KeyStore,isKeyEntry(String alias),boolean,"Returns true if the entry identified by the given alias was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry or a SecretKeyEntry.","

isKeyEntry
public final boolean isKeyEntry(String alias)
                         throws KeyStoreException
Returns true if the entry identified by the given alias
 was created by a call to setKeyEntry,
 or created by a call to setEntry with a
 PrivateKeyEntry or a SecretKeyEntry.

Parameters:
alias - the alias for the keystore entry to be checked
Returns:
true if the entry identified by the given alias is a
 key-related entry, false otherwise.
Throws:
KeyStoreException - if the keystore has not been initialized
 (loaded).


"
KeyStore,"load(InputStream stream, char[] password)",void,Loads this KeyStore from the given input stream.,"

load
public final void load(InputStream stream,
                       char[] password)
                throws IOException,
                       NoSuchAlgorithmException,
                       CertificateException
Loads this KeyStore from the given input stream.

 A password may be given to unlock the keystore
 (e.g. the keystore resides on a hardware token device),
 or to check the integrity of the keystore data.
 If a password is not given for integrity checking,
 then integrity checking is not performed.

 In order to create an empty keystore, or if the keystore cannot
 be initialized from a stream, pass null
 as the stream argument.

  Note that if this keystore has already been loaded, it is
 reinitialized and loaded again from the given input stream.

Parameters:
stream - the input stream from which the keystore is loaded,
 or null
password - the password used to check the integrity of
 the keystore, the password used to unlock the keystore,
 or null
Throws:
IOException - if there is an I/O or format problem with the
 keystore data, if a password is required but not given,
 or if the given password was incorrect. If the error is due to a
 wrong password, the cause of the
 IOException should be an
 UnrecoverableKeyException
NoSuchAlgorithmException - if the algorithm used to check
 the integrity of the keystore cannot be found
CertificateException - if any of the certificates in the
 keystore could not be loaded


"
KeyStore,load(KeyStore.LoadStoreParameter param),void,Loads this keystore using the given LoadStoreParameter.,"

load
public final void load(KeyStore.LoadStoreParameter param)
                throws IOException,
                       NoSuchAlgorithmException,
                       CertificateException
Loads this keystore using the given LoadStoreParameter.

  Note that if this KeyStore has already been loaded, it is
 reinitialized and loaded again from the given parameter.

Parameters:
param - the LoadStoreParameter
          that specifies how to load the keystore,
          which may be null
Throws:
IllegalArgumentException - if the given
          LoadStoreParameter
          input is not recognized
IOException - if there is an I/O or format problem with the
          keystore data. If the error is due to an incorrect
         ProtectionParameter (e.g. wrong password)
         the cause of the
         IOException should be an
         UnrecoverableKeyException
NoSuchAlgorithmException - if the algorithm used to check
          the integrity of the keystore cannot be found
CertificateException - if any of the certificates in the
          keystore could not be loaded
Since:
1.5


"
KeyStore,"setCertificateEntry(String alias, Certificate cert)",void,Assigns the given trusted certificate to the given alias.,"

setCertificateEntry
public final void setCertificateEntry(String alias,
                                      Certificate cert)
                               throws KeyStoreException
Assigns the given trusted certificate to the given alias.

  If the given alias identifies an existing entry
 created by a call to setCertificateEntry,
 or created by a call to setEntry with a
 TrustedCertificateEntry,
 the trusted certificate in the existing entry
 is overridden by the given certificate.

Parameters:
alias - the alias name
cert - the certificate
Throws:
KeyStoreException - if the keystore has not been initialized,
 or the given alias already exists and does not identify an
 entry containing a trusted certificate,
 or this operation fails for some other reason.


"
KeyStore,"setEntry(String alias, KeyStore.Entry entry, KeyStore.ProtectionParameter protParam)",void,Saves a keystore Entry under the specified alias.,"

setEntry
public final void setEntry(String alias,
                           KeyStore.Entry entry,
                           KeyStore.ProtectionParameter protParam)
                    throws KeyStoreException
Saves a keystore Entry under the specified alias.
 The protection parameter is used to protect the
 Entry.

  If an entry already exists for the specified alias,
 it is overridden.

Parameters:
alias - save the keystore Entry under this alias
entry - the Entry to save
protParam - the ProtectionParameter
          used to protect the Entry,
          which may be null
Throws:
NullPointerException - if
          alias or entry
          is null
KeyStoreException - if the keystore has not been initialized
          (loaded), or if this operation fails for some other reason
Since:
1.5
See Also:
getEntry(String, KeyStore.ProtectionParameter)


"
KeyStore,"setKeyEntry(String alias, byte[] key, Certificate[] chain)",void,Assigns the given key (that has already been protected) to the given alias.,"

setKeyEntry
public final void setKeyEntry(String alias,
                              byte[] key,
                              Certificate[] chain)
                       throws KeyStoreException
Assigns the given key (that has already been protected) to the given
 alias.

 If the protected key is of type
 java.security.PrivateKey, it must be accompanied by a
 certificate chain certifying the corresponding public key. If the
 underlying keystore implementation is of type jks,
 key must be encoded as an
 EncryptedPrivateKeyInfo as defined in the PKCS #8 standard.

 If the given alias already exists, the keystore information
 associated with it is overridden by the given key (and possibly
 certificate chain).

Parameters:
alias - the alias name
key - the key (in protected format) to be associated with the alias
chain - the certificate chain for the corresponding public
          key (only useful if the protected key is of type
          java.security.PrivateKey).
Throws:
KeyStoreException - if the keystore has not been initialized
 (loaded), or if this operation fails for some other reason.


"
KeyStore,"setKeyEntry(String alias, Key key, char[] password, Certificate[] chain)",void,"Assigns the given key to the given alias, protecting it with the given password.","

setKeyEntry
public final void setKeyEntry(String alias,
                              Key key,
                              char[] password,
                              Certificate[] chain)
                       throws KeyStoreException
Assigns the given key to the given alias, protecting it with the given
 password.

 If the given key is of type java.security.PrivateKey,
 it must be accompanied by a certificate chain certifying the
 corresponding public key.

 If the given alias already exists, the keystore information
 associated with it is overridden by the given key (and possibly
 certificate chain).

Parameters:
alias - the alias name
key - the key to be associated with the alias
password - the password to protect the key
chain - the certificate chain for the corresponding public
 key (only required if the given key is of type
 java.security.PrivateKey).
Throws:
KeyStoreException - if the keystore has not been initialized
 (loaded), the given key cannot be protected, or this operation fails
 for some other reason


"
KeyStore,size(),int,Retrieves the number of entries in this keystore.,"

size
public final int size()
               throws KeyStoreException
Retrieves the number of entries in this keystore.

Returns:
the number of entries in this keystore
Throws:
KeyStoreException - if the keystore has not been initialized
 (loaded).


"
KeyStore,store(KeyStore.LoadStoreParameter param),void,Stores this keystore using the given LoadStoreParameter.,"

store
public final void store(KeyStore.LoadStoreParameter param)
                 throws KeyStoreException,
                        IOException,
                        NoSuchAlgorithmException,
                        CertificateException
Stores this keystore using the given LoadStoreParameter.

Parameters:
param - the LoadStoreParameter
          that specifies how to store the keystore,
          which may be null
Throws:
IllegalArgumentException - if the given
          LoadStoreParameter
          input is not recognized
KeyStoreException - if the keystore has not been initialized
          (loaded)
IOException - if there was an I/O problem with data
NoSuchAlgorithmException - if the appropriate data integrity
          algorithm could not be found
CertificateException - if any of the certificates included in
          the keystore data could not be stored
Since:
1.5


"
KeyStore,"store(OutputStream stream, char[] password)",void,"Stores this keystore to the given output stream, and protects its integrity with the given password.","

store
public final void store(OutputStream stream,
                        char[] password)
                 throws KeyStoreException,
                        IOException,
                        NoSuchAlgorithmException,
                        CertificateException
Stores this keystore to the given output stream, and protects its
 integrity with the given password.

Parameters:
stream - the output stream to which this keystore is written.
password - the password to generate the keystore integrity check
Throws:
KeyStoreException - if the keystore has not been initialized
 (loaded).
IOException - if there was an I/O problem with data
NoSuchAlgorithmException - if the appropriate data integrity
 algorithm could not be found
CertificateException - if any of the certificates included in
 the keystore data could not be stored


"
KeyStore.Builder,getKeyStore(),abstract KeyStore,Returns the KeyStore described by this object.,"

getKeyStore
public abstract KeyStore getKeyStore()
                              throws KeyStoreException
Returns the KeyStore described by this object.

Returns:
the KeyStore described by this object
Throws:
KeyStoreException - if an error occurred during the
   operation, for example if the KeyStore could not be
   instantiated or loaded


"
KeyStore.Builder,getProtectionParameter(String alias),abstract KeyStore.ProtectionParameter,Returns the ProtectionParameters that should be used to obtain the Entry with the given alias.,"

getProtectionParameter
public abstract KeyStore.ProtectionParameter getProtectionParameter(String alias)
                                                             throws KeyStoreException
Returns the ProtectionParameters that should be used to obtain
 the Entry with the given alias.
 The getKeyStore method must be invoked before this
 method may be called.

Parameters:
alias - the alias of the KeyStore entry
Returns:
the ProtectionParameters that should be used to obtain
   the Entry with the given alias.
Throws:
NullPointerException - if alias is null
KeyStoreException - if an error occurred during the
   operation
IllegalStateException - if the getKeyStore method has
   not been invoked prior to calling this method


"
KeyStore.Builder,"newInstance(KeyStore keyStore, KeyStore.ProtectionParameter protectionParameter)",static KeyStore.Builder,Returns a new Builder that encapsulates the given KeyStore.,"

newInstance
public static KeyStore.Builder newInstance(KeyStore keyStore,
                                           KeyStore.ProtectionParameter protectionParameter)
Returns a new Builder that encapsulates the given KeyStore.
 The getKeyStore() method of the returned object
 will return keyStore, the getProtectionParameter() method will
 return protectionParameters.

  This is useful if an existing KeyStore object needs to be
 used with Builder-based APIs.

Parameters:
keyStore - the KeyStore to be encapsulated
protectionParameter - the ProtectionParameter used to
   protect the KeyStore entries
Returns:
a new Builder object
Throws:
NullPointerException - if keyStore or
   protectionParameters is null
IllegalArgumentException - if the keyStore has not been
   initialized


"
KeyStore.Builder,"newInstance(String type, Provider provider, File file, KeyStore.ProtectionParameter protection)",static KeyStore.Builder,Returns a new Builder object.,"

newInstance
public static KeyStore.Builder newInstance(String type,
                                           Provider provider,
                                           File file,
                                           KeyStore.ProtectionParameter protection)
Returns a new Builder object.

 The first call to the getKeyStore() method on the returned
 builder will create a KeyStore of type type and call
 its load() method.
 The inputStream argument is constructed from
 file.
 If protection is a
 PasswordProtection, the password is obtained by
 calling the getPassword method.
 Otherwise, if protection is a
 CallbackHandlerProtection, the password is obtained
 by invoking the CallbackHandler.

 Subsequent calls to getKeyStore() return the same object
 as the initial call. If the initial call to failed with a
 KeyStoreException, subsequent calls also throw a
 KeyStoreException.

 The KeyStore is instantiated from provider if
 non-null. Otherwise, all installed providers are searched.

 Calls to getProtectionParameter()
 will return a PasswordProtection
 object encapsulating the password that was used to invoke the
 load method.

 Note that the getKeyStore() method is executed
 within the AccessControlContext of the code invoking this
 method.

Parameters:
type - the type of KeyStore to be constructed
provider - the provider from which the KeyStore is to
   be instantiated (or null)
file - the File that contains the KeyStore data
protection - the ProtectionParameter securing the KeyStore data
Returns:
a new Builder object
Throws:
NullPointerException - if type, file or protection is null
IllegalArgumentException - if protection is not an instance
   of either PasswordProtection or CallbackHandlerProtection; or
   if file does not exist or does not refer to a normal file


"
KeyStore.Builder,"newInstance(String type, Provider provider, KeyStore.ProtectionParameter protection)",static KeyStore.Builder,Returns a new Builder object.,"

newInstance
public static KeyStore.Builder newInstance(String type,
                                           Provider provider,
                                           KeyStore.ProtectionParameter protection)
Returns a new Builder object.

 Each call to the getKeyStore() method on the returned
 builder will return a new KeyStore object of type type.
 Its load()
 method is invoked using a
 LoadStoreParameter that encapsulates
 protection.

 The KeyStore is instantiated from provider if
 non-null. Otherwise, all installed providers are searched.

 Calls to getProtectionParameter()
 will return protection.

 Note that the getKeyStore() method is executed
 within the AccessControlContext of the code invoking this
 method.

Parameters:
type - the type of KeyStore to be constructed
provider - the provider from which the KeyStore is to
   be instantiated (or null)
protection - the ProtectionParameter securing the Keystore
Returns:
a new Builder object
Throws:
NullPointerException - if type or protection is null


"
KeyStore.CallbackHandlerProtection,getCallbackHandler(),CallbackHandler,Returns the CallbackHandler.,"

getCallbackHandler
public CallbackHandler getCallbackHandler()
Returns the CallbackHandler.

Returns:
the CallbackHandler.


"
KeyStore.PasswordProtection,destroy(),void,Clears the password.,"

destroy
public void destroy()
             throws DestroyFailedException
Clears the password.

Specified by:
destroy in interface Destroyable
Throws:
DestroyFailedException - if this method was unable
      to clear the password


"
KeyStore.PasswordProtection,getPassword(),char[],Gets the password.,"

getPassword
public char[] getPassword()
Gets the password.

 Note that this method returns a reference to the password.
 If a clone of the array is created it is the caller's
 responsibility to zero out the password information
 after it is no longer needed.

Returns:
the password, which may be null
Throws:
IllegalStateException - if the password has
              been cleared (destroyed)
See Also:
destroy()


"
KeyStore.PasswordProtection,getProtectionAlgorithm(),String,Gets the name of the protection algorithm.,"

getProtectionAlgorithm
public String getProtectionAlgorithm()
Gets the name of the protection algorithm.
 If none was set then the keystore provider will use its default
 protection algorithm. The name of the default protection algorithm
 for a given keystore type is set using the
 'keystore.<type>.keyProtectionAlgorithm' security property.
 For example, the
 keystore.PKCS12.keyProtectionAlgorithm property stores the
 name of the default key protection algorithm used for PKCS12
 keystores. If the security property is not set, an
 implementation-specific algorithm will be used.

Returns:
the algorithm name, or null if none was set
Since:
1.8


"
KeyStore.PasswordProtection,getProtectionParameters(),AlgorithmParameterSpec,Gets the parameters supplied for the protection algorithm.,"

getProtectionParameters
public AlgorithmParameterSpec getProtectionParameters()
Gets the parameters supplied for the protection algorithm.

Returns:
the algorithm parameter specification, or null,
     if none was set
Since:
1.8


"
KeyStore.PasswordProtection,isDestroyed(),boolean,Determines if password has been cleared.,"

isDestroyed
public boolean isDestroyed()
Determines if password has been cleared.

Specified by:
isDestroyed in interface Destroyable
Returns:
true if the password has been cleared, false otherwise


"
KeyStore.PrivateKeyEntry,getAttributes(),Set<KeyStore.Entry.Attribute>,Retrieves the attributes associated with an entry.,"

getAttributes
public Set<KeyStore.Entry.Attribute> getAttributes()
Retrieves the attributes associated with an entry.
 

Specified by:
getAttributes in interface KeyStore.Entry
Returns:
an unmodifiable Set of attributes, possibly empty
Since:
1.8


"
KeyStore.PrivateKeyEntry,getCertificate(),Certificate,Gets the end entity Certificate from the certificate chain in this entry.,"

getCertificate
public Certificate getCertificate()
Gets the end entity Certificate
 from the certificate chain in this entry.

Returns:
the end entity Certificate (at index 0)
      from the certificate chain in this entry.
      If the certificate is of type X.509,
      the runtime type of the returned certificate is
      X509Certificate.


"
KeyStore.PrivateKeyEntry,getCertificateChain(),Certificate[],Gets the Certificate chain from this entry.,"

getCertificateChain
public Certificate[] getCertificateChain()
Gets the Certificate chain from this entry.

  The stored chain is cloned before being returned.

Returns:
an array of Certificates corresponding
      to the certificate chain for the public key.
      If the certificates are of type X.509,
      the runtime type of the returned array is
      X509Certificate[].


"
KeyStore.PrivateKeyEntry,getPrivateKey(),PrivateKey,Gets the PrivateKey from this entry.,"

getPrivateKey
public PrivateKey getPrivateKey()
Gets the PrivateKey from this entry.

Returns:
the PrivateKey from this entry


"
KeyStore.PrivateKeyEntry,toString(),String,Returns a string representation of this PrivateKeyEntry.,"

toString
public String toString()
Returns a string representation of this PrivateKeyEntry.

Overrides:
toString in class Object
Returns:
a string representation of this PrivateKeyEntry.


"
KeyStore.SecretKeyEntry,getAttributes(),Set<KeyStore.Entry.Attribute>,Retrieves the attributes associated with an entry.,"

getAttributes
public Set<KeyStore.Entry.Attribute> getAttributes()
Retrieves the attributes associated with an entry.
 

Specified by:
getAttributes in interface KeyStore.Entry
Returns:
an unmodifiable Set of attributes, possibly empty
Since:
1.8


"
KeyStore.SecretKeyEntry,getSecretKey(),SecretKey,Gets the SecretKey from this entry.,"

getSecretKey
public SecretKey getSecretKey()
Gets the SecretKey from this entry.

Returns:
the SecretKey from this entry


"
KeyStore.SecretKeyEntry,toString(),String,Returns a string representation of this SecretKeyEntry.,"

toString
public String toString()
Returns a string representation of this SecretKeyEntry.

Overrides:
toString in class Object
Returns:
a string representation of this SecretKeyEntry.


"
KeyStore.TrustedCertificateEntry,getAttributes(),Set<KeyStore.Entry.Attribute>,Retrieves the attributes associated with an entry.,"

getAttributes
public Set<KeyStore.Entry.Attribute> getAttributes()
Retrieves the attributes associated with an entry.
 

Specified by:
getAttributes in interface KeyStore.Entry
Returns:
an unmodifiable Set of attributes, possibly empty
Since:
1.8


"
KeyStore.TrustedCertificateEntry,getTrustedCertificate(),Certificate,Gets the trusted Certficate from this entry.,"

getTrustedCertificate
public Certificate getTrustedCertificate()
Gets the trusted Certficate from this entry.

Returns:
the trusted Certificate from this entry


"
KeyStore.TrustedCertificateEntry,toString(),String,Returns a string representation of this TrustedCertificateEntry.,"

toString
public String toString()
Returns a string representation of this TrustedCertificateEntry.

Overrides:
toString in class Object
Returns:
a string representation of this TrustedCertificateEntry.


"
KeyStoreSpi,engineAliases(),abstract Enumeration<String>,Lists all the alias names of this keystore.,"

engineAliases
public abstract Enumeration<String> engineAliases()
Lists all the alias names of this keystore.

Returns:
enumeration of the alias names


"
KeyStoreSpi,engineContainsAlias(String alias),abstract boolean,Checks if the given alias exists in this keystore.,"

engineContainsAlias
public abstract boolean engineContainsAlias(String alias)
Checks if the given alias exists in this keystore.

Parameters:
alias - the alias name
Returns:
true if the alias exists, false otherwise


"
KeyStoreSpi,engineDeleteEntry(String alias),abstract void,Deletes the entry identified by the given alias from this keystore.,"

engineDeleteEntry
public abstract void engineDeleteEntry(String alias)
                                throws KeyStoreException
Deletes the entry identified by the given alias from this keystore.

Parameters:
alias - the alias name
Throws:
KeyStoreException - if the entry cannot be removed.


"
KeyStoreSpi,"engineEntryInstanceOf(String alias, Class<? extends KeyStore.Entry> entryClass)",boolean,Determines if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass.,"

engineEntryInstanceOf
public boolean engineEntryInstanceOf(String alias,
                                     Class<? extends KeyStore.Entry> entryClass)
Determines if the keystore Entry for the specified
 alias is an instance or subclass of the specified
 entryClass.

Parameters:
alias - the alias name
entryClass - the entry class
Returns:
true if the keystore Entry for the specified
          alias is an instance or subclass of the
          specified entryClass, false otherwise
Since:
1.5


"
KeyStoreSpi,engineGetCertificate(String alias),abstract Certificate,Returns the certificate associated with the given alias.,"

engineGetCertificate
public abstract Certificate engineGetCertificate(String alias)
Returns the certificate associated with the given alias.

  If the given alias name identifies an entry
 created by a call to setCertificateEntry,
 or created by a call to setEntry with a
 TrustedCertificateEntry,
 then the trusted certificate contained in that entry is returned.

  If the given alias name identifies an entry
 created by a call to setKeyEntry,
 or created by a call to setEntry with a
 PrivateKeyEntry,
 then the first element of the certificate chain in that entry
 (if a chain exists) is returned.

Parameters:
alias - the alias name
Returns:
the certificate, or null if the given alias does not exist or
 does not contain a certificate.


"
KeyStoreSpi,engineGetCertificateAlias(Certificate cert),abstract String,Returns the (alias) name of the first keystore entry whose certificate matches the given certificate.,"

engineGetCertificateAlias
public abstract String engineGetCertificateAlias(Certificate cert)
Returns the (alias) name of the first keystore entry whose certificate
 matches the given certificate.

 This method attempts to match the given certificate with each
 keystore entry. If the entry being considered was
 created by a call to setCertificateEntry,
 or created by a call to setEntry with a
 TrustedCertificateEntry,
 then the given certificate is compared to that entry's certificate.

  If the entry being considered was
 created by a call to setKeyEntry,
 or created by a call to setEntry with a
 PrivateKeyEntry,
 then the given certificate is compared to the first
 element of that entry's certificate chain.

Parameters:
cert - the certificate to match with.
Returns:
the alias name of the first entry with matching certificate,
 or null if no such entry exists in this keystore.


"
KeyStoreSpi,engineGetCertificateChain(String alias),abstract Certificate[],Returns the certificate chain associated with the given alias.,"

engineGetCertificateChain
public abstract Certificate[] engineGetCertificateChain(String alias)
Returns the certificate chain associated with the given alias.
 The certificate chain must have been associated with the alias
 by a call to setKeyEntry,
 or by a call to setEntry with a
 PrivateKeyEntry.

Parameters:
alias - the alias name
Returns:
the certificate chain (ordered with the user's certificate first
 and the root certificate authority last), or null if the given alias
 does not exist or does not contain a certificate chain


"
KeyStoreSpi,engineGetCreationDate(String alias),abstract Date,Returns the creation date of the entry identified by the given alias.,"

engineGetCreationDate
public abstract Date engineGetCreationDate(String alias)
Returns the creation date of the entry identified by the given alias.

Parameters:
alias - the alias name
Returns:
the creation date of this entry, or null if the given alias does
 not exist


"
KeyStoreSpi,"engineGetEntry(String alias, KeyStore.ProtectionParameter protParam)",KeyStore.Entry,Gets a KeyStore.Entry for the specified alias with the specified protection parameter.,"

engineGetEntry
public KeyStore.Entry engineGetEntry(String alias,
                                     KeyStore.ProtectionParameter protParam)
                              throws KeyStoreException,
                                     NoSuchAlgorithmException,
                                     UnrecoverableEntryException
Gets a KeyStore.Entry for the specified alias
 with the specified protection parameter.

Parameters:
alias - get the KeyStore.Entry for this alias
protParam - the ProtectionParameter
          used to protect the Entry,
          which may be null
Returns:
the KeyStore.Entry for the specified alias,
          or null if there is no such entry
Throws:
KeyStoreException - if the operation failed
NoSuchAlgorithmException - if the algorithm for recovering the
          entry cannot be found
UnrecoverableEntryException - if the specified
          protParam were insufficient or invalid
UnrecoverableKeyException - if the entry is a
          PrivateKeyEntry or SecretKeyEntry
          and the specified protParam does not contain
          the information needed to recover the key (e.g. wrong password)
Since:
1.5


"
KeyStoreSpi,"engineGetKey(String alias, char[] password)",abstract Key,"Returns the key associated with the given alias, using the given password to recover it.","

engineGetKey
public abstract Key engineGetKey(String alias,
                                 char[] password)
                          throws NoSuchAlgorithmException,
                                 UnrecoverableKeyException
Returns the key associated with the given alias, using the given
 password to recover it.  The key must have been associated with
 the alias by a call to setKeyEntry,
 or by a call to setEntry with a
 PrivateKeyEntry or SecretKeyEntry.

Parameters:
alias - the alias name
password - the password for recovering the key
Returns:
the requested key, or null if the given alias does not exist
 or does not identify a key-related entry.
Throws:
NoSuchAlgorithmException - if the algorithm for recovering the
 key cannot be found
UnrecoverableKeyException - if the key cannot be recovered
 (e.g., the given password is wrong).


"
KeyStoreSpi,engineIsCertificateEntry(String alias),abstract boolean,"Returns true if the entry identified by the given alias was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry.","

engineIsCertificateEntry
public abstract boolean engineIsCertificateEntry(String alias)
Returns true if the entry identified by the given alias
 was created by a call to setCertificateEntry,
 or created by a call to setEntry with a
 TrustedCertificateEntry.

Parameters:
alias - the alias for the keystore entry to be checked
Returns:
true if the entry identified by the given alias contains a
 trusted certificate, false otherwise.


"
KeyStoreSpi,engineIsKeyEntry(String alias),abstract boolean,"Returns true if the entry identified by the given alias was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry or a SecretKeyEntry.","

engineIsKeyEntry
public abstract boolean engineIsKeyEntry(String alias)
Returns true if the entry identified by the given alias
 was created by a call to setKeyEntry,
 or created by a call to setEntry with a
 PrivateKeyEntry or a SecretKeyEntry.

Parameters:
alias - the alias for the keystore entry to be checked
Returns:
true if the entry identified by the given alias is a
 key-related, false otherwise.


"
KeyStoreSpi,"engineLoad(InputStream stream, char[] password)",abstract void,Loads the keystore from the given input stream.,"

engineLoad
public abstract void engineLoad(InputStream stream,
                                char[] password)
                         throws IOException,
                                NoSuchAlgorithmException,
                                CertificateException
Loads the keystore from the given input stream.

 A password may be given to unlock the keystore
 (e.g. the keystore resides on a hardware token device),
 or to check the integrity of the keystore data.
 If a password is not given for integrity checking,
 then integrity checking is not performed.

Parameters:
stream - the input stream from which the keystore is loaded,
 or null
password - the password used to check the integrity of
 the keystore, the password used to unlock the keystore,
 or null
Throws:
IOException - if there is an I/O or format problem with the
 keystore data, if a password is required but not given,
 or if the given password was incorrect. If the error is due to a
 wrong password, the cause of the
 IOException should be an
 UnrecoverableKeyException
NoSuchAlgorithmException - if the algorithm used to check
 the integrity of the keystore cannot be found
CertificateException - if any of the certificates in the
 keystore could not be loaded


"
KeyStoreSpi,engineLoad(KeyStore.LoadStoreParameter param),void,Loads the keystore using the given KeyStore.LoadStoreParameter.,"

engineLoad
public void engineLoad(KeyStore.LoadStoreParameter param)
                throws IOException,
                       NoSuchAlgorithmException,
                       CertificateException
Loads the keystore using the given
 KeyStore.LoadStoreParameter.

  Note that if this KeyStore has already been loaded, it is
 reinitialized and loaded again from the given parameter.

Parameters:
param - the KeyStore.LoadStoreParameter
          that specifies how to load the keystore,
          which may be null
Throws:
IllegalArgumentException - if the given
          KeyStore.LoadStoreParameter
          input is not recognized
IOException - if there is an I/O or format problem with the
          keystore data. If the error is due to an incorrect
         ProtectionParameter (e.g. wrong password)
         the cause of the
         IOException should be an
         UnrecoverableKeyException
NoSuchAlgorithmException - if the algorithm used to check
          the integrity of the keystore cannot be found
CertificateException - if any of the certificates in the
          keystore could not be loaded
Since:
1.5


"
KeyStoreSpi,"engineSetCertificateEntry(String alias, Certificate cert)",abstract void,Assigns the given certificate to the given alias.,"

engineSetCertificateEntry
public abstract void engineSetCertificateEntry(String alias,
                                               Certificate cert)
                                        throws KeyStoreException
Assigns the given certificate to the given alias.

  If the given alias identifies an existing entry
 created by a call to setCertificateEntry,
 or created by a call to setEntry with a
 TrustedCertificateEntry,
 the trusted certificate in the existing entry
 is overridden by the given certificate.

Parameters:
alias - the alias name
cert - the certificate
Throws:
KeyStoreException - if the given alias already exists and does
 not identify an entry containing a trusted certificate,
 or this operation fails for some other reason.


"
KeyStoreSpi,"engineSetEntry(String alias, KeyStore.Entry entry, KeyStore.ProtectionParameter protParam)",void,Saves a KeyStore.Entry under the specified alias.,"

engineSetEntry
public void engineSetEntry(String alias,
                           KeyStore.Entry entry,
                           KeyStore.ProtectionParameter protParam)
                    throws KeyStoreException
Saves a KeyStore.Entry under the specified alias.
 The specified protection parameter is used to protect the
 Entry.

  If an entry already exists for the specified alias,
 it is overridden.

Parameters:
alias - save the KeyStore.Entry under this alias
entry - the Entry to save
protParam - the ProtectionParameter
          used to protect the Entry,
          which may be null
Throws:
KeyStoreException - if this operation fails
Since:
1.5


"
KeyStoreSpi,"engineSetKeyEntry(String alias, byte[] key, Certificate[] chain)",abstract void,Assigns the given key (that has already been protected) to the given alias.,"

engineSetKeyEntry
public abstract void engineSetKeyEntry(String alias,
                                       byte[] key,
                                       Certificate[] chain)
                                throws KeyStoreException
Assigns the given key (that has already been protected) to the given
 alias.

 If the protected key is of type
 java.security.PrivateKey,
 it must be accompanied by a certificate chain certifying the
 corresponding public key.

 If the given alias already exists, the keystore information
 associated with it is overridden by the given key (and possibly
 certificate chain).

Parameters:
alias - the alias name
key - the key (in protected format) to be associated with the alias
chain - the certificate chain for the corresponding public
 key (only useful if the protected key is of type
 java.security.PrivateKey).
Throws:
KeyStoreException - if this operation fails.


"
KeyStoreSpi,"engineSetKeyEntry(String alias, Key key, char[] password, Certificate[] chain)",abstract void,"Assigns the given key to the given alias, protecting it with the given password.","

engineSetKeyEntry
public abstract void engineSetKeyEntry(String alias,
                                       Key key,
                                       char[] password,
                                       Certificate[] chain)
                                throws KeyStoreException
Assigns the given key to the given alias, protecting it with the given
 password.

 If the given key is of type java.security.PrivateKey,
 it must be accompanied by a certificate chain certifying the
 corresponding public key.

 If the given alias already exists, the keystore information
 associated with it is overridden by the given key (and possibly
 certificate chain).

Parameters:
alias - the alias name
key - the key to be associated with the alias
password - the password to protect the key
chain - the certificate chain for the corresponding public
 key (only required if the given key is of type
 java.security.PrivateKey).
Throws:
KeyStoreException - if the given key cannot be protected, or
 this operation fails for some other reason


"
KeyStoreSpi,engineSize(),abstract int,Retrieves the number of entries in this keystore.,"

engineSize
public abstract int engineSize()
Retrieves the number of entries in this keystore.

Returns:
the number of entries in this keystore


"
KeyStoreSpi,engineStore(KeyStore.LoadStoreParameter param),void,Stores this keystore using the given KeyStore.LoadStoreParmeter.,"

engineStore
public void engineStore(KeyStore.LoadStoreParameter param)
                 throws IOException,
                        NoSuchAlgorithmException,
                        CertificateException
Stores this keystore using the given
 KeyStore.LoadStoreParmeter.

Parameters:
param - the KeyStore.LoadStoreParmeter
          that specifies how to store the keystore,
          which may be null
Throws:
IllegalArgumentException - if the given
          KeyStore.LoadStoreParmeter
          input is not recognized
IOException - if there was an I/O problem with data
NoSuchAlgorithmException - if the appropriate data integrity
          algorithm could not be found
CertificateException - if any of the certificates included in
          the keystore data could not be stored
Since:
1.5


"
KeyStoreSpi,"engineStore(OutputStream stream, char[] password)",abstract void,"Stores this keystore to the given output stream, and protects its integrity with the given password.","

engineStore
public abstract void engineStore(OutputStream stream,
                                 char[] password)
                          throws IOException,
                                 NoSuchAlgorithmException,
                                 CertificateException
Stores this keystore to the given output stream, and protects its
 integrity with the given password.

Parameters:
stream - the output stream to which this keystore is written.
password - the password to generate the keystore integrity check
Throws:
IOException - if there was an I/O problem with data
NoSuchAlgorithmException - if the appropriate data integrity
 algorithm could not be found
CertificateException - if any of the certificates included in
 the keystore data could not be stored


"
MessageDigest,clone(),Object,Returns a clone if the implementation is cloneable.,"

clone
public Object clone()
             throws CloneNotSupportedException
Returns a clone if the implementation is cloneable.

Overrides:
clone in class MessageDigestSpi
Returns:
a clone if the implementation is cloneable.
Throws:
CloneNotSupportedException - if this is called on an
 implementation that does not support Cloneable.
See Also:
Cloneable


"
MessageDigest,digest(),byte[],Completes the hash computation by performing final operations such as padding.,"

digest
public byte[] digest()
Completes the hash computation by performing final operations
 such as padding. The digest is reset after this call is made.

Returns:
the array of bytes for the resulting hash value.


"
MessageDigest,digest(byte[] input),byte[],"Performs a final update on the digest using the specified array of bytes, then completes the digest computation.","

digest
public byte[] digest(byte[] input)
Performs a final update on the digest using the specified array
 of bytes, then completes the digest computation. That is, this
 method first calls update(input),
 passing the input array to the update method,
 then calls digest().

Parameters:
input - the input to be updated before the digest is
 completed.
Returns:
the array of bytes for the resulting hash value.


"
MessageDigest,"digest(byte[] buf, int offset, int len)",int,Completes the hash computation by performing final operations such as padding.,"

digest
public int digest(byte[] buf,
                  int offset,
                  int len)
           throws DigestException
Completes the hash computation by performing final operations
 such as padding. The digest is reset after this call is made.

Parameters:
buf - output buffer for the computed digest
offset - offset into the output buffer to begin storing the digest
len - number of bytes within buf allotted for the digest
Returns:
the number of bytes placed into buf
Throws:
DigestException - if an error occurs.


"
MessageDigest,getAlgorithm(),String,"Returns a string that identifies the algorithm, independent of implementation details.","

getAlgorithm
public final String getAlgorithm()
Returns a string that identifies the algorithm, independent of
 implementation details. The name should be a standard
 Java Security name (such as ""SHA-256"").
 See the MessageDigest section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.

Returns:
the name of the algorithm


"
MessageDigest,getDigestLength(),int,"Returns the length of the digest in bytes, or 0 if this operation is not supported by the provider and the implementation is not cloneable.","

getDigestLength
public final int getDigestLength()
Returns the length of the digest in bytes, or 0 if this operation is
 not supported by the provider and the implementation is not cloneable.

Returns:
the digest length in bytes, or 0 if this operation is not
 supported by the provider and the implementation is not cloneable.
Since:
1.2


"
MessageDigest,getInstance(String algorithm),static MessageDigest,Returns a MessageDigest object that implements the specified digest algorithm.,"

getInstance
public static MessageDigest getInstance(String algorithm)
                                 throws NoSuchAlgorithmException
Returns a MessageDigest object that implements the specified digest
 algorithm.

  This method traverses the list of registered security Providers,
 starting with the most preferred Provider.
 A new MessageDigest object encapsulating the
 MessageDigestSpi implementation from the first
 Provider that supports the specified algorithm is returned.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
algorithm - the name of the algorithm requested.
 See the MessageDigest section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.
Returns:
a Message Digest object that implements the specified algorithm.
Throws:
NoSuchAlgorithmException - if no Provider supports a
          MessageDigestSpi implementation for the
          specified algorithm.
See Also:
Provider


"
MessageDigest,"getInstance(String algorithm, Provider provider)",static MessageDigest,Returns a MessageDigest object that implements the specified digest algorithm.,"

getInstance
public static MessageDigest getInstance(String algorithm,
                                        Provider provider)
                                 throws NoSuchAlgorithmException
Returns a MessageDigest object that implements the specified digest
 algorithm.

  A new MessageDigest object encapsulating the
 MessageDigestSpi implementation from the specified Provider
 object is returned.  Note that the specified Provider object
 does not have to be registered in the provider list.

Parameters:
algorithm - the name of the algorithm requested.
 See the MessageDigest section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.
provider - the provider.
Returns:
a MessageDigest object that implements the specified algorithm.
Throws:
NoSuchAlgorithmException - if a MessageDigestSpi
          implementation for the specified algorithm is not available
          from the specified Provider object.
IllegalArgumentException - if the specified provider is null.
Since:
1.4
See Also:
Provider


"
MessageDigest,"getInstance(String algorithm, String provider)",static MessageDigest,Returns a MessageDigest object that implements the specified digest algorithm.,"

getInstance
public static MessageDigest getInstance(String algorithm,
                                        String provider)
                                 throws NoSuchAlgorithmException,
                                        NoSuchProviderException
Returns a MessageDigest object that implements the specified digest
 algorithm.

  A new MessageDigest object encapsulating the
 MessageDigestSpi implementation from the specified provider
 is returned.  The specified provider must be registered
 in the security provider list.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
algorithm - the name of the algorithm requested.
 See the MessageDigest section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.
provider - the name of the provider.
Returns:
a MessageDigest object that implements the specified algorithm.
Throws:
NoSuchAlgorithmException - if a MessageDigestSpi
          implementation for the specified algorithm is not
          available from the specified provider.
NoSuchProviderException - if the specified provider is not
          registered in the security provider list.
IllegalArgumentException - if the provider name is null
          or empty.
See Also:
Provider


"
MessageDigest,getProvider(),Provider,Returns the provider of this message digest object.,"

getProvider
public final Provider getProvider()
Returns the provider of this message digest object.

Returns:
the provider of this message digest object


"
MessageDigest,"isEqual(byte[] digesta, byte[] digestb)",static boolean,Compares two digests for equality.,"

isEqual
public static boolean isEqual(byte[] digesta,
                              byte[] digestb)
Compares two digests for equality. Does a simple byte compare.

Parameters:
digesta - one of the digests to compare.
digestb - the other digest to compare.
Returns:
true if the digests are equal, false otherwise.


"
MessageDigest,reset(),void,Resets the digest for further use.,"

reset
public void reset()
Resets the digest for further use.

"
MessageDigest,toString(),String,Returns a string representation of this message digest object.,"

toString
public String toString()
Returns a string representation of this message digest object.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
MessageDigest,update(byte input),void,Updates the digest using the specified byte.,"

update
public void update(byte input)
Updates the digest using the specified byte.

Parameters:
input - the byte with which to update the digest.


"
MessageDigest,update(byte[] input),void,Updates the digest using the specified array of bytes.,"

update
public void update(byte[] input)
Updates the digest using the specified array of bytes.

Parameters:
input - the array of bytes.


"
MessageDigest,"update(byte[] input, int offset, int len)",void,"Updates the digest using the specified array of bytes, starting at the specified offset.","

update
public void update(byte[] input,
                   int offset,
                   int len)
Updates the digest using the specified array of bytes, starting
 at the specified offset.

Parameters:
input - the array of bytes.
offset - the offset to start from in the array of bytes.
len - the number of bytes to use, starting at
 offset.


"
MessageDigest,update(ByteBuffer input),void,Update the digest using the specified ByteBuffer.,"

update
public final void update(ByteBuffer input)
Update the digest using the specified ByteBuffer. The digest is
 updated using the input.remaining() bytes starting
 at input.position().
 Upon return, the buffer's position will be equal to its limit;
 its limit will not have changed.

Parameters:
input - the ByteBuffer
Since:
1.5


"
MessageDigestSpi,clone(),Object,Returns a clone if the implementation is cloneable.,"

clone
public Object clone()
             throws CloneNotSupportedException
Returns a clone if the implementation is cloneable.

Overrides:
clone in class Object
Returns:
a clone if the implementation is cloneable.
Throws:
CloneNotSupportedException - if this is called on an
 implementation that does not support Cloneable.
See Also:
Cloneable


"
MessageDigestSpi,engineDigest(),protected abstract byte[],Completes the hash computation by performing final operations such as padding.,"

engineDigest
protected abstract byte[] engineDigest()
Completes the hash computation by performing final
 operations such as padding. Once engineDigest has
 been called, the engine should be reset (see
 engineReset).
 Resetting is the responsibility of the
 engine implementor.

Returns:
the array of bytes for the resulting hash value.


"
MessageDigestSpi,"engineDigest(byte[] buf, int offset, int len)",protected int,Completes the hash computation by performing final operations such as padding.,"

engineDigest
protected int engineDigest(byte[] buf,
                           int offset,
                           int len)
                    throws DigestException
Completes the hash computation by performing final
 operations such as padding. Once engineDigest has
 been called, the engine should be reset (see
 engineReset).
 Resetting is the responsibility of the
 engine implementor.

 This method should be abstract, but we leave it concrete for
 binary compatibility.  Knowledgeable providers should override this
 method.

Parameters:
buf - the output buffer in which to store the digest
offset - offset to start from in the output buffer
len - number of bytes within buf allotted for the digest.
 Both this default implementation and the SUN provider do not
 return partial digests.  The presence of this parameter is solely
 for consistency in our API's.  If the value of this parameter is less
 than the actual digest length, the method will throw a DigestException.
 This parameter is ignored if its value is greater than or equal to
 the actual digest length.
Returns:
the length of the digest stored in the output buffer.
Throws:
DigestException - if an error occurs.
Since:
1.2


"
MessageDigestSpi,engineGetDigestLength(),protected int,Returns the digest length in bytes.,"

engineGetDigestLength
protected int engineGetDigestLength()
Returns the digest length in bytes.

 This concrete method has been added to this previously-defined
 abstract class. (For backwards compatibility, it cannot be abstract.)

 The default behavior is to return 0.

 This method may be overridden by a provider to return the digest
 length.

Returns:
the digest length in bytes.
Since:
1.2


"
MessageDigestSpi,engineReset(),protected abstract void,Resets the digest for further use.,"

engineReset
protected abstract void engineReset()
Resets the digest for further use.

"
MessageDigestSpi,engineUpdate(byte input),protected abstract void,Updates the digest using the specified byte.,"

engineUpdate
protected abstract void engineUpdate(byte input)
Updates the digest using the specified byte.

Parameters:
input - the byte to use for the update.


"
MessageDigestSpi,"engineUpdate(byte[] input, int offset, int len)",protected abstract void,"Updates the digest using the specified array of bytes, starting at the specified offset.","

engineUpdate
protected abstract void engineUpdate(byte[] input,
                                     int offset,
                                     int len)
Updates the digest using the specified array of bytes,
 starting at the specified offset.

Parameters:
input - the array of bytes to use for the update.
offset - the offset to start from in the array of bytes.
len - the number of bytes to use, starting at
 offset.


"
MessageDigestSpi,engineUpdate(ByteBuffer input),protected void,Update the digest using the specified ByteBuffer.,"

engineUpdate
protected void engineUpdate(ByteBuffer input)
Update the digest using the specified ByteBuffer. The digest is
 updated using the input.remaining() bytes starting
 at input.position().
 Upon return, the buffer's position will be equal to its limit;
 its limit will not have changed.

Parameters:
input - the ByteBuffer
Since:
1.5


"
Permission,checkGuard(Object object),void,Implements the guard interface for a permission.,"

checkGuard
public void checkGuard(Object object)
                throws SecurityException
Implements the guard interface for a permission. The
 SecurityManager.checkPermission method is called,
 passing this permission object as the permission to check.
 Returns silently if access is granted. Otherwise, throws
 a SecurityException.

Specified by:
checkGuard in interface Guard
Parameters:
object - the object being guarded (currently ignored).
Throws:
SecurityException - if a security manager exists and its
        checkPermission method doesn't allow access.
See Also:
Guard, 
GuardedObject, 
SecurityManager.checkPermission(java.security.Permission)


"
Permission,equals(Object obj),abstract boolean,Checks two Permission objects for equality.,"

equals
public abstract boolean equals(Object obj)
Checks two Permission objects for equality.
 
 Do not use the equals method for making access control
 decisions; use the implies method.

Overrides:
equals in class Object
Parameters:
obj - the object we are testing for equality with this object.
Returns:
true if both Permission objects are equivalent.
See Also:
Object.hashCode(), 
HashMap


"
Permission,getActions(),abstract String,Returns the actions as a String.,"

getActions
public abstract String getActions()
Returns the actions as a String. This is abstract
 so subclasses can defer creating a String representation until
 one is needed. Subclasses should always return actions in what they
 consider to be their
 canonical form. For example, two FilePermission objects created via
 the following:

 
   perm1 = new FilePermission(p1,""read,write"");
   perm2 = new FilePermission(p2,""write,read"");
 

 both return
 ""read,write"" when the getActions method is invoked.

Returns:
the actions of this Permission.


"
Permission,getName(),String,Returns the name of this Permission.,"

getName
public final String getName()
Returns the name of this Permission.
 For example, in the case of a java.io.FilePermission,
 the name will be a pathname.

Returns:
the name of this Permission.


"
Permission,hashCode(),abstract int,Returns the hash code value for this Permission object.,"

hashCode
public abstract int hashCode()
Returns the hash code value for this Permission object.
 
 The required hashCode behavior for Permission Objects is
 the following:
 
Whenever it is invoked on the same Permission object more than
     once during an execution of a Java application, the
     hashCode method
     must consistently return the same integer. This integer need not
     remain consistent from one execution of an application to another
     execution of the same application.
 If two Permission objects are equal according to the
     equals
     method, then calling the hashCode method on each of the
     two Permission objects must produce the same integer result.
 

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Permission,implies(Permission permission),abstract boolean,"Checks if the specified permission's actions are ""implied by"" this object's actions.","

implies
public abstract boolean implies(Permission permission)
Checks if the specified permission's actions are ""implied by""
 this object's actions.
 
 This must be implemented by subclasses of Permission, as they are the
 only ones that can impose semantics on a Permission object.

 The implies method is used by the AccessController to determine
 whether or not a requested permission is implied by another permission that
 is known to be valid in the current execution context.

Parameters:
permission - the permission to check against.
Returns:
true if the specified permission is implied by this object,
 false if not.


"
Permission,newPermissionCollection(),PermissionCollection,"Returns an empty PermissionCollection for a given Permission object, or null if one is not defined.","

newPermissionCollection
public PermissionCollection newPermissionCollection()
Returns an empty PermissionCollection for a given Permission object, or null if
 one is not defined. Subclasses of class Permission should
 override this if they need to store their permissions in a particular
 PermissionCollection object in order to provide the correct semantics
 when the PermissionCollection.implies method is called.
 If null is returned,
 then the caller of this method is free to store permissions of this
 type in any PermissionCollection they choose (one that uses a Hashtable,
 one that uses a Vector, etc).

Returns:
a new PermissionCollection object for this type of Permission, or
 null if one is not defined.


"
Permission,toString(),String,Returns a string describing this Permission.,"

toString
public String toString()
Returns a string describing this Permission.  The convention is to
 specify the class name, the permission name, and the actions in
 the following format: '(""ClassName"" ""name"" ""actions"")', or
 '(""ClassName"" ""name"")' if actions list is null or empty.

Overrides:
toString in class Object
Returns:
information about this Permission.


"
PermissionCollection,add(Permission permission),abstract void,Adds a permission object to the current collection of permission objects.,"

add
public abstract void add(Permission permission)
Adds a permission object to the current collection of permission objects.

Parameters:
permission - the Permission object to add.
Throws:
SecurityException - -  if this PermissionCollection object
                                 has been marked readonly
IllegalArgumentException - - if this PermissionCollection
                object is a homogeneous collection and the permission
                is not of the correct type.


"
PermissionCollection,elements(),abstract Enumeration<Permission>,Returns an enumeration of all the Permission objects in the collection.,"

elements
public abstract Enumeration<Permission> elements()
Returns an enumeration of all the Permission objects in the collection.

Returns:
an enumeration of all the Permissions.


"
PermissionCollection,implies(Permission permission),abstract boolean,Checks to see if the specified permission is implied by the collection of Permission objects held in this PermissionCollection.,"

implies
public abstract boolean implies(Permission permission)
Checks to see if the specified permission is implied by
 the collection of Permission objects held in this PermissionCollection.

Parameters:
permission - the Permission object to compare.
Returns:
true if ""permission"" is implied by the  permissions in
 the collection, false if not.


"
PermissionCollection,isReadOnly(),boolean,Returns true if this PermissionCollection object is marked as readonly.,"

isReadOnly
public boolean isReadOnly()
Returns true if this PermissionCollection object is marked as readonly.
 If it is readonly, no new Permission objects can be added to it
 using add.

 By default, the object is not readonly. It can be set to
 readonly by a call to setReadOnly.

Returns:
true if this PermissionCollection object is marked as readonly,
 false otherwise.


"
PermissionCollection,setReadOnly(),void,"Marks this PermissionCollection object as ""readonly"".","

setReadOnly
public void setReadOnly()
Marks this PermissionCollection object as ""readonly"". After
 a PermissionCollection object
 is marked as readonly, no new Permission objects can be added to it
 using add.

"
PermissionCollection,toString(),String,"Returns a string describing this PermissionCollection object, providing information about all the permissions it contains.","

toString
public String toString()
Returns a string describing this PermissionCollection object,
 providing information about all the permissions it contains.
 The format is:
 
 super.toString() (
   // enumerate all the Permission
   // objects and call toString() on them,
   // one per line..
 )
super.toString is a call to the toString
 method of this
 object's superclass, which is Object. The result is
 this PermissionCollection's type name followed by this object's
 hashcode, thus enabling clients to differentiate different
 PermissionCollections object, even if they contain the same permissions.

Overrides:
toString in class Object
Returns:
information about this PermissionCollection object,
         as described above.


"
Permissions,add(Permission permission),void,Adds a permission object to the PermissionCollection for the class the permission belongs to.,"

add
public void add(Permission permission)
Adds a permission object to the PermissionCollection for the class the
 permission belongs to. For example, if permission is a
 FilePermission, it is added to the FilePermissionCollection stored
 in this Permissions object.

 This method creates
 a new PermissionCollection object (and adds the permission to it)
 if an appropriate collection does not yet exist. 

Specified by:
add in class PermissionCollection
Parameters:
permission - the Permission object to add.
Throws:
SecurityException - if this Permissions object is
 marked as readonly.
See Also:
PermissionCollection.isReadOnly()


"
Permissions,elements(),Enumeration<Permission>,Returns an enumeration of all the Permission objects in all the PermissionCollections in this Permissions object.,"

elements
public Enumeration<Permission> elements()
Returns an enumeration of all the Permission objects in all the
 PermissionCollections in this Permissions object.

Specified by:
elements in class PermissionCollection
Returns:
an enumeration of all the Permissions.


"
Permissions,implies(Permission permission),boolean,Checks to see if this object's PermissionCollection for permissions of the specified permission's class implies the permissions expressed in the permission object.,"

implies
public boolean implies(Permission permission)
Checks to see if this object's PermissionCollection for permissions of
 the specified permission's class implies the permissions
 expressed in the permission object. Returns true if the
 combination of permissions in the appropriate PermissionCollection
 (e.g., a FilePermissionCollection for a FilePermission) together
 imply the specified permission.

 For example, suppose there is a FilePermissionCollection in this
 Permissions object, and it contains one FilePermission that specifies
 ""read"" access for  all files in all subdirectories of the ""/tmp""
 directory, and another FilePermission that specifies ""write"" access
 for all files in the ""/tmp/scratch/foo"" directory.
 Then if the implies method
 is called with a permission specifying both ""read"" and ""write"" access
 to files in the ""/tmp/scratch/foo"" directory, true is
 returned.

 Additionally, if this PermissionCollection contains the
 AllPermission, this method will always return true.
 

Specified by:
implies in class PermissionCollection
Parameters:
permission - the Permission object to check.
Returns:
true if ""permission"" is implied by the permissions in the
 PermissionCollection it
 belongs to, false if not.


"
PKCS12Attribute,equals(Object obj),boolean,Compares this PKCS12Attribute and a specified object for equality.,"

equals
public boolean equals(Object obj)
Compares this PKCS12Attribute and a specified object for
 equality.

Overrides:
equals in class Object
Parameters:
obj - the comparison object
Returns:
true if obj is a PKCS12Attribute and
 their DER encodings are equal.
See Also:
Object.hashCode(), 
HashMap


"
PKCS12Attribute,getEncoded(),byte[],Returns the attribute's ASN.1 DER encoding.,"

getEncoded
public byte[] getEncoded()
Returns the attribute's ASN.1 DER encoding.

Returns:
a clone of the attribute's DER encoding


"
PKCS12Attribute,getName(),String,Returns the attribute's ASN.1 Object Identifier represented as a list of dot-separated integers.,"

getName
public String getName()
Returns the attribute's ASN.1 Object Identifier represented as a
 list of dot-separated integers.

Specified by:
getName in interface KeyStore.Entry.Attribute
Returns:
the attribute's identifier


"
PKCS12Attribute,getValue(),String,Returns the attribute's ASN.1 DER-encoded value as a string.,"

getValue
public String getValue()
Returns the attribute's ASN.1 DER-encoded value as a string.
 An ASN.1 DER-encoded value is returned in one of the following
 String formats:
 
 the DER encoding of a basic ASN.1 type that has a natural
      string representation is returned as the string itself.
      Such types are currently limited to BOOLEAN, INTEGER,
      OBJECT IDENTIFIER, UTCTime, GeneralizedTime and the
      following six ASN.1 string types: UTF8String,
      PrintableString, T61String, IA5String, BMPString and
      GeneralString.
  the DER encoding of any other ASN.1 type is not decoded but
      returned as a binary string of colon-separated pairs of
      hexadecimal digits.
 
 Multi-valued attributes are represented as a comma-separated
 list of values, enclosed in square brackets. See
 Arrays.toString(java.lang.Object[]).

Specified by:
getValue in interface KeyStore.Entry.Attribute
Returns:
the attribute value's string encoding


"
PKCS12Attribute,hashCode(),int,Returns the hashcode for this PKCS12Attribute.,"

hashCode
public int hashCode()
Returns the hashcode for this PKCS12Attribute.
 The hash code is computed from its DER encoding.

Overrides:
hashCode in class Object
Returns:
the hash code
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
PKCS12Attribute,toString(),String,Returns a string representation of this PKCS12Attribute.,"

toString
public String toString()
Returns a string representation of this PKCS12Attribute.

Overrides:
toString in class Object
Returns:
a name/value pair separated by an 'equals' symbol


"
Policy,"getInstance(String type, Policy.Parameters params)",static Policy,Returns a Policy object of the specified type.,"

getInstance
public static Policy getInstance(String type,
                                 Policy.Parameters params)
                          throws NoSuchAlgorithmException
Returns a Policy object of the specified type.

  This method traverses the list of registered security providers,
 starting with the most preferred Provider.
 A new Policy object encapsulating the
 PolicySpi implementation from the first
 Provider that supports the specified type is returned.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
type - the specified Policy type.  See the Policy section in the
    
    Java Cryptography Architecture Standard Algorithm Name Documentation
    for a list of standard Policy types.
params - parameters for the Policy, which may be null.
Returns:
the new Policy object.
Throws:
SecurityException - if the caller does not have permission
          to get a Policy instance for the specified type.
NullPointerException - if the specified type is null.
IllegalArgumentException - if the specified parameters
          are not understood by the PolicySpi implementation
          from the selected Provider.
NoSuchAlgorithmException - if no Provider supports a PolicySpi
          implementation for the specified type.
Since:
1.6
See Also:
Provider


"
Policy,"getInstance(String type, Policy.Parameters params, Provider provider)",static Policy,Returns a Policy object of the specified type.,"

getInstance
public static Policy getInstance(String type,
                                 Policy.Parameters params,
                                 Provider provider)
                          throws NoSuchAlgorithmException
Returns a Policy object of the specified type.

  A new Policy object encapsulating the
 PolicySpi implementation from the specified Provider
 object is returned.  Note that the specified Provider object
 does not have to be registered in the provider list.

Parameters:
type - the specified Policy type.  See the Policy section in the
    
    Java Cryptography Architecture Standard Algorithm Name Documentation
    for a list of standard Policy types.
params - parameters for the Policy, which may be null.
provider - the Provider.
Returns:
the new Policy object.
Throws:
SecurityException - if the caller does not have permission
          to get a Policy instance for the specified type.
NullPointerException - if the specified type is null.
IllegalArgumentException - if the specified Provider is null,
          or if the specified parameters are not understood by
          the PolicySpi implementation from the specified Provider.
NoSuchAlgorithmException - if the specified Provider does not
          support a PolicySpi implementation for the specified type.
Since:
1.6
See Also:
Provider


"
Policy,"getInstance(String type, Policy.Parameters params, String provider)",static Policy,Returns a Policy object of the specified type.,"

getInstance
public static Policy getInstance(String type,
                                 Policy.Parameters params,
                                 String provider)
                          throws NoSuchProviderException,
                                 NoSuchAlgorithmException
Returns a Policy object of the specified type.

  A new Policy object encapsulating the
 PolicySpi implementation from the specified provider
 is returned.   The specified provider must be registered
 in the provider list.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
type - the specified Policy type.  See the Policy section in the
    
    Java Cryptography Architecture Standard Algorithm Name Documentation
    for a list of standard Policy types.
params - parameters for the Policy, which may be null.
provider - the provider.
Returns:
the new Policy object.
Throws:
SecurityException - if the caller does not have permission
          to get a Policy instance for the specified type.
NullPointerException - if the specified type is null.
IllegalArgumentException - if the specified provider
          is null or empty,
          or if the specified parameters are not understood by
          the PolicySpi implementation from the specified provider.
NoSuchProviderException - if the specified provider is not
          registered in the security provider list.
NoSuchAlgorithmException - if the specified provider does not
          support a PolicySpi implementation for the specified type.
Since:
1.6
See Also:
Provider


"
Policy,getParameters(),Policy.Parameters,Return Policy parameters.,"

getParameters
public Policy.Parameters getParameters()
Return Policy parameters.

  This Policy instance will only have parameters if it
 was obtained via a call to Policy.getInstance.
 Otherwise this method returns null.

Returns:
Policy parameters, or null.
Since:
1.6


"
Policy,getPermissions(CodeSource codesource),PermissionCollection,Return a PermissionCollection object containing the set of permissions granted to the specified CodeSource.,"

getPermissions
public PermissionCollection getPermissions(CodeSource codesource)
Return a PermissionCollection object containing the set of
 permissions granted to the specified CodeSource.

  Applications are discouraged from calling this method
 since this operation may not be supported by all policy implementations.
 Applications should solely rely on the implies method
 to perform policy checks.  If an application absolutely must call
 a getPermissions method, it should call
 getPermissions(ProtectionDomain).

  The default implementation of this method returns
 Policy.UNSUPPORTED_EMPTY_COLLECTION.  This method can be
 overridden if the policy implementation can return a set of
 permissions granted to a CodeSource.

Parameters:
codesource - the CodeSource to which the returned
          PermissionCollection has been granted.
Returns:
a set of permissions granted to the specified CodeSource.
          If this operation is supported, the returned
          set of permissions must be a new mutable instance
          and it must support heterogeneous Permission types.
          If this operation is not supported,
          Policy.UNSUPPORTED_EMPTY_COLLECTION is returned.


"
Policy,getPermissions(ProtectionDomain domain),PermissionCollection,Return a PermissionCollection object containing the set of permissions granted to the specified ProtectionDomain.,"

getPermissions
public PermissionCollection getPermissions(ProtectionDomain domain)
Return a PermissionCollection object containing the set of
 permissions granted to the specified ProtectionDomain.

  Applications are discouraged from calling this method
 since this operation may not be supported by all policy implementations.
 Applications should rely on the implies method
 to perform policy checks.

  The default implementation of this method first retrieves
 the permissions returned via getPermissions(CodeSource)
 (the CodeSource is taken from the specified ProtectionDomain),
 as well as the permissions located inside the specified ProtectionDomain.
 All of these permissions are then combined and returned in a new
 PermissionCollection object.  If getPermissions(CodeSource)
 returns Policy.UNSUPPORTED_EMPTY_COLLECTION, then this method
 returns the permissions contained inside the specified ProtectionDomain
 in a new PermissionCollection object.

  This method can be overridden if the policy implementation
 supports returning a set of permissions granted to a ProtectionDomain.

Parameters:
domain - the ProtectionDomain to which the returned
          PermissionCollection has been granted.
Returns:
a set of permissions granted to the specified ProtectionDomain.
          If this operation is supported, the returned
          set of permissions must be a new mutable instance
          and it must support heterogeneous Permission types.
          If this operation is not supported,
          Policy.UNSUPPORTED_EMPTY_COLLECTION is returned.
Since:
1.4


"
Policy,getPolicy(),static Policy,Returns the installed Policy object.,"

getPolicy
public static Policy getPolicy()
Returns the installed Policy object. This value should not be cached,
 as it may be changed by a call to setPolicy.
 This method first calls
 SecurityManager.checkPermission with a
 SecurityPermission(""getPolicy"") permission
 to ensure it's ok to get the Policy object.

Returns:
the installed Policy.
Throws:
SecurityException - if a security manager exists and its
        checkPermission method doesn't allow
        getting the Policy object.
See Also:
SecurityManager.checkPermission(Permission), 
setPolicy(java.security.Policy)


"
Policy,getProvider(),Provider,Return the Provider of this Policy.,"

getProvider
public Provider getProvider()
Return the Provider of this Policy.

  This Policy instance will only have a Provider if it
 was obtained via a call to Policy.getInstance.
 Otherwise this method returns null.

Returns:
the Provider of this Policy, or null.
Since:
1.6


"
Policy,getType(),String,Return the type of this Policy.,"

getType
public String getType()
Return the type of this Policy.

  This Policy instance will only have a type if it
 was obtained via a call to Policy.getInstance.
 Otherwise this method returns null.

Returns:
the type of this Policy, or null.
Since:
1.6


"
Policy,"implies(ProtectionDomain domain, Permission permission)",boolean,Evaluates the global policy for the permissions granted to the ProtectionDomain and tests whether the permission is granted.,"

implies
public boolean implies(ProtectionDomain domain,
                       Permission permission)
Evaluates the global policy for the permissions granted to
 the ProtectionDomain and tests whether the permission is
 granted.

Parameters:
domain - the ProtectionDomain to test
permission - the Permission object to be tested for implication.
Returns:
true if ""permission"" is a proper subset of a permission
 granted to this ProtectionDomain.
Since:
1.4
See Also:
ProtectionDomain


"
Policy,refresh(),void,Refreshes/reloads the policy configuration.,"

refresh
public void refresh()
Refreshes/reloads the policy configuration. The behavior of this method
 depends on the implementation. For example, calling refresh
 on a file-based policy will cause the file to be re-read.

  The default implementation of this method does nothing.
 This method should be overridden if a refresh operation is supported
 by the policy implementation.

"
Policy,setPolicy(Policy p),static void,Sets the system-wide Policy object.,"

setPolicy
public static void setPolicy(Policy p)
Sets the system-wide Policy object. This method first calls
 SecurityManager.checkPermission with a
 SecurityPermission(""setPolicy"")
 permission to ensure it's ok to set the Policy.

Parameters:
p - the new system Policy object.
Throws:
SecurityException - if a security manager exists and its
        checkPermission method doesn't allow
        setting the Policy.
See Also:
SecurityManager.checkPermission(Permission), 
getPolicy()


"
PolicySpi,engineGetPermissions(CodeSource codesource),protected PermissionCollection,Return a PermissionCollection object containing the set of permissions granted to the specified CodeSource.,"

engineGetPermissions
protected PermissionCollection engineGetPermissions(CodeSource codesource)
Return a PermissionCollection object containing the set of
 permissions granted to the specified CodeSource.

  The default implementation of this method returns
 Policy.UNSUPPORTED_EMPTY_COLLECTION object.  This method can be
 overridden if the policy implementation can return a set of
 permissions granted to a CodeSource.

Parameters:
codesource - the CodeSource to which the returned
          PermissionCollection has been granted.
Returns:
a set of permissions granted to the specified CodeSource.
          If this operation is supported, the returned
          set of permissions must be a new mutable instance
          and it must support heterogeneous Permission types.
          If this operation is not supported,
          Policy.UNSUPPORTED_EMPTY_COLLECTION is returned.


"
PolicySpi,engineGetPermissions(ProtectionDomain domain),protected PermissionCollection,Return a PermissionCollection object containing the set of permissions granted to the specified ProtectionDomain.,"

engineGetPermissions
protected PermissionCollection engineGetPermissions(ProtectionDomain domain)
Return a PermissionCollection object containing the set of
 permissions granted to the specified ProtectionDomain.

  The default implementation of this method returns
 Policy.UNSUPPORTED_EMPTY_COLLECTION object.  This method can be
 overridden if the policy implementation can return a set of
 permissions granted to a ProtectionDomain.

Parameters:
domain - the ProtectionDomain to which the returned
          PermissionCollection has been granted.
Returns:
a set of permissions granted to the specified ProtectionDomain.
          If this operation is supported, the returned
          set of permissions must be a new mutable instance
          and it must support heterogeneous Permission types.
          If this operation is not supported,
          Policy.UNSUPPORTED_EMPTY_COLLECTION is returned.


"
PolicySpi,"engineImplies(ProtectionDomain domain, Permission permission)",protected abstract boolean,Check whether the policy has granted a Permission to a ProtectionDomain.,"

engineImplies
protected abstract boolean engineImplies(ProtectionDomain domain,
                                         Permission permission)
Check whether the policy has granted a Permission to a ProtectionDomain.

Parameters:
domain - the ProtectionDomain to check.
permission - check whether this permission is granted to the
          specified domain.
Returns:
boolean true if the permission is granted to the domain.


"
PolicySpi,engineRefresh(),protected void,Refreshes/reloads the policy configuration.,"

engineRefresh
protected void engineRefresh()
Refreshes/reloads the policy configuration. The behavior of this method
 depends on the implementation. For example, calling refresh
 on a file-based policy will cause the file to be re-read.

  The default implementation of this method does nothing.
 This method should be overridden if a refresh operation is supported
 by the policy implementation.

"
ProtectionDomain,getClassLoader(),ClassLoader,Returns the ClassLoader of this domain.,"

getClassLoader
public final ClassLoader getClassLoader()
Returns the ClassLoader of this domain.

Returns:
the ClassLoader of this domain which may be null.
Since:
1.4


"
ProtectionDomain,getCodeSource(),CodeSource,Returns the CodeSource of this domain.,"

getCodeSource
public final CodeSource getCodeSource()
Returns the CodeSource of this domain.

Returns:
the CodeSource of this domain which may be null.
Since:
1.2


"
ProtectionDomain,getPermissions(),PermissionCollection,Returns the static permissions granted to this domain.,"

getPermissions
public final PermissionCollection getPermissions()
Returns the static permissions granted to this domain.

Returns:
the static set of permissions for this domain which may be null.
See Also:
Policy.refresh(), 
Policy.getPermissions(ProtectionDomain)


"
ProtectionDomain,getPrincipals(),Principal[],Returns an array of principals for this domain.,"

getPrincipals
public final Principal[] getPrincipals()
Returns an array of principals for this domain.

Returns:
a non-null array of principals for this domain.
 Returns a new array each time this method is called.
Since:
1.4


"
ProtectionDomain,implies(Permission permission),boolean,Check and see if this ProtectionDomain implies the permissions expressed in the Permission object.,"

implies
public boolean implies(Permission permission)
Check and see if this ProtectionDomain implies the permissions
 expressed in the Permission object.
 
 The set of permissions evaluated is a function of whether the
 ProtectionDomain was constructed with a static set of permissions
 or it was bound to a dynamically mapped set of permissions.
 
 If the ProtectionDomain was constructed to a
 statically bound PermissionCollection then the permission will
 only be checked against the PermissionCollection supplied at
 construction.
 
 However, if the ProtectionDomain was constructed with
 the constructor variant which supports
 dynamically binding
 permissions, then the permission will be checked against the
 combination of the PermissionCollection supplied at construction and
 the current Policy binding.
 

Parameters:
permission - the Permission object to check.
Returns:
true if ""permission"" is implicit to this ProtectionDomain.


"
ProtectionDomain,toString(),String,Convert a ProtectionDomain to a String.,"

toString
public String toString()
Convert a ProtectionDomain to a String.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
Provider,clear(),void,Clears this provider so that it no longer contains the properties used to look up facilities implemented by the provider.,"

clear
public void clear()
Clears this provider so that it no longer contains the properties
 used to look up facilities implemented by the provider.

 If a security manager is enabled, its checkSecurityAccess
 method is called with the string ""clearProviderProperties.""+name
 (where name is the provider name) to see if it's ok to clear
 this provider.

Specified by:
clear in interface Map<Object,Object>
Overrides:
clear in class Hashtable<Object,Object>
Throws:
SecurityException - if a security manager exists and its SecurityManager.checkSecurityAccess(java.lang.String) method
          denies access to clear this provider
Since:
1.2


"
Provider,"compute(Object key, BiFunction<? super Object,? super Object,? extends Object> remappingFunction)",Object,Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).,"

compute
public Object compute(Object key,
                      BiFunction<? super Object,? super Object,? extends Object> remappingFunction)
Attempts to compute a mapping for the specified key and its
 current mapped value (or null if there is no current
 mapping).

 If a security manager is enabled, its checkSecurityAccess
 method is called with the strings ""putProviderProperty.""+name
 and ""removeProviderProperty.""+name, where name is the
 provider name, to see if it's ok to set this provider's property values
 and remove this provider's properties.

Specified by:
compute in interface Map<Object,Object>
Overrides:
compute in class Hashtable<Object,Object>
Parameters:
key - key with which the specified value is to be associated
remappingFunction - the function to compute a value
Returns:
the new value associated with the specified key, or null if none
Throws:
SecurityException - if a security manager exists and its SecurityManager.checkSecurityAccess(java.lang.String) method
          denies access to set property values or remove properties.
Since:
1.8


"
Provider,"computeIfAbsent(Object key, Function<? super Object,? extends Object> mappingFunction)",Object,"If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null.","

computeIfAbsent
public Object computeIfAbsent(Object key,
                              Function<? super Object,? extends Object> mappingFunction)
If the specified key is not already associated with a value (or
 is mapped to null), attempts to compute its value using
 the given mapping function and enters it into this map unless
 null.

 If a security manager is enabled, its checkSecurityAccess
 method is called with the strings ""putProviderProperty.""+name
 and ""removeProviderProperty.""+name, where name is the
 provider name, to see if it's ok to set this provider's property values
 and remove this provider's properties.

Specified by:
computeIfAbsent in interface Map<Object,Object>
Overrides:
computeIfAbsent in class Hashtable<Object,Object>
Parameters:
key - key with which the specified value is to be associated
mappingFunction - the function to compute a value
Returns:
the current (existing or computed) value associated with
         the specified key, or null if the computed value is null
Throws:
SecurityException - if a security manager exists and its SecurityManager.checkSecurityAccess(java.lang.String) method
          denies access to set property values and remove properties.
Since:
1.8


"
Provider,"computeIfPresent(Object key, BiFunction<? super Object,? super Object,? extends Object> remappingFunction)",Object,"If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.","

computeIfPresent
public Object computeIfPresent(Object key,
                               BiFunction<? super Object,? super Object,? extends Object> remappingFunction)
If the value for the specified key is present and non-null, attempts to
 compute a new mapping given the key and its current mapped value.

 If a security manager is enabled, its checkSecurityAccess
 method is called with the strings ""putProviderProperty.""+name
 and ""removeProviderProperty.""+name, where name is the
 provider name, to see if it's ok to set this provider's property values
 and remove this provider's properties.

Specified by:
computeIfPresent in interface Map<Object,Object>
Overrides:
computeIfPresent in class Hashtable<Object,Object>
Parameters:
key - key with which the specified value is to be associated
remappingFunction - the function to compute a value
Returns:
the new value associated with the specified key, or null if none
Throws:
SecurityException - if a security manager exists and its SecurityManager.checkSecurityAccess(java.lang.String) method
          denies access to set property values or remove properties.
Since:
1.8


"
Provider,elements(),Enumeration<Object>,Returns an enumeration of the values in this hashtable.,"

elements
public Enumeration<Object> elements()
Description copied from class: Hashtable
Returns an enumeration of the values in this hashtable.
 Use the Enumeration methods on the returned object to fetch the elements
 sequentially.

Overrides:
elements in class Hashtable<Object,Object>
Returns:
an enumeration of the values in this hashtable.
See Also:
Enumeration, 
Hashtable.keys(), 
Hashtable.values(), 
Map


"
Provider,entrySet(),"Set<Map.Entry<Object,Object>>",Returns an unmodifiable Set view of the property entries contained in this Provider.,"

entrySet
public Set<Map.Entry<Object,Object>> entrySet()
Returns an unmodifiable Set view of the property entries contained
 in this Provider.

Specified by:
entrySet in interface Map<Object,Object>
Overrides:
entrySet in class Hashtable<Object,Object>
Returns:
a set view of the mappings contained in this map
Since:
1.2
See Also:
Map.Entry


"
Provider,"forEach(BiConsumer<? super Object,? super Object> action)",void,Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.,"

forEach
public void forEach(BiConsumer<? super Object,? super Object> action)
Description copied from interface: Map
Performs the given action for each entry in this map until all entries
 have been processed or the action throws an exception.   Unless
 otherwise specified by the implementing class, actions are performed in
 the order of entry set iteration (if an iteration order is specified.)
 Exceptions thrown by the action are relayed to the caller.

Specified by:
forEach in interface Map<Object,Object>
Overrides:
forEach in class Hashtable<Object,Object>
Parameters:
action - The action to be performed for each entry
Since:
1.8


"
Provider,get(Object key),Object,"Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.","

get
public Object get(Object key)
Description copied from class: Hashtable
Returns the value to which the specified key is mapped,
 or null if this map contains no mapping for the key.

 More formally, if this map contains a mapping from a key
 k to a value v such that (key.equals(k)),
 then this method returns v; otherwise it returns
 null.  (There can be at most one such mapping.)

Specified by:
get in interface Map<Object,Object>
Overrides:
get in class Hashtable<Object,Object>
Parameters:
key - the key whose associated value is to be returned
Returns:
the value to which the specified key is mapped, or
         null if this map contains no mapping for the key
See Also:
Hashtable.put(Object, Object)


"
Provider,getInfo(),String,Returns a human-readable description of the provider and its services.,"

getInfo
public String getInfo()
Returns a human-readable description of the provider and its
 services.  This may return an HTML page, with relevant links.

Returns:
a description of the provider and its services.


"
Provider,getName(),String,Returns the name of this provider.,"

getName
public String getName()
Returns the name of this provider.

Returns:
the name of this provider.


"
Provider,"getOrDefault(Object key, Object defaultValue)",Object,"Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.","

getOrDefault
public Object getOrDefault(Object key,
                           Object defaultValue)
Description copied from interface: Map
Returns the value to which the specified key is mapped, or
 defaultValue if this map contains no mapping for the key.

Specified by:
getOrDefault in interface Map<Object,Object>
Overrides:
getOrDefault in class Hashtable<Object,Object>
Parameters:
key - the key whose associated value is to be returned
defaultValue - the default mapping of the key
Returns:
the value to which the specified key is mapped, or
 defaultValue if this map contains no mapping for the key
Since:
1.8


"
Provider,getProperty(String key),String,Searches for the property with the specified key in this property list.,"

getProperty
public String getProperty(String key)
Description copied from class: Properties
Searches for the property with the specified key in this property list.
 If the key is not found in this property list, the default property list,
 and its defaults, recursively, are then checked. The method returns
 null if the property is not found.

Overrides:
getProperty in class Properties
Parameters:
key - the property key.
Returns:
the value in this property list with the specified key value.
See Also:
Properties.setProperty(java.lang.String, java.lang.String), 
Properties.defaults


"
Provider,"getService(String type, String algorithm)",Provider.Service,Get the service describing this Provider's implementation of the specified type of this algorithm or alias.,"

getService
public Provider.Service getService(String type,
                                   String algorithm)
Get the service describing this Provider's implementation of the
 specified type of this algorithm or alias. If no such
 implementation exists, this method returns null. If there are two
 matching services, one added to this provider using
 putService() and one added via put(),
 the service added via putService() is returned.

Parameters:
type - the type of service requested
 (for example, MessageDigest)
algorithm - the case insensitive algorithm name (or alternate
 alias) of the service requested (for example, SHA-1)
Returns:
the service describing this Provider's matching service
 or null if no such service exists
Throws:
NullPointerException - if type or algorithm is null
Since:
1.5


"
Provider,getServices(),Set<Provider.Service>,Get an unmodifiable Set of all services supported by this Provider.,"

getServices
public Set<Provider.Service> getServices()
Get an unmodifiable Set of all services supported by
 this Provider.

Returns:
an unmodifiable Set of all services supported by
 this Provider
Since:
1.5


"
Provider,getVersion(),double,Returns the version number for this provider.,"

getVersion
public double getVersion()
Returns the version number for this provider.

Returns:
the version number for this provider.


"
Provider,keys(),Enumeration<Object>,Returns an enumeration of the keys in this hashtable.,"

keys
public Enumeration<Object> keys()
Description copied from class: Hashtable
Returns an enumeration of the keys in this hashtable.

Overrides:
keys in class Hashtable<Object,Object>
Returns:
an enumeration of the keys in this hashtable.
See Also:
Enumeration, 
Hashtable.elements(), 
Hashtable.keySet(), 
Map


"
Provider,keySet(),Set<Object>,Returns an unmodifiable Set view of the property keys contained in this provider.,"

keySet
public Set<Object> keySet()
Returns an unmodifiable Set view of the property keys contained in
 this provider.

Specified by:
keySet in interface Map<Object,Object>
Overrides:
keySet in class Hashtable<Object,Object>
Returns:
a set view of the keys contained in this map
Since:
1.2


"
Provider,load(InputStream inStream),void,Reads a property list (key and element pairs) from the input stream.,"

load
public void load(InputStream inStream)
          throws IOException
Reads a property list (key and element pairs) from the input stream.

Overrides:
load in class Properties
Parameters:
inStream - the input stream.
Throws:
IOException - if an error occurred when reading from the
               input stream.
See Also:
Properties.load(java.io.Reader)


"
Provider,"merge(Object key, Object value, BiFunction<? super Object,? super Object,? extends Object> remappingFunction)",Object,"If the specified key is not already associated with a value or is associated with null, associates it with the given value.","

merge
public Object merge(Object key,
                    Object value,
                    BiFunction<? super Object,? super Object,? extends Object> remappingFunction)
If the specified key is not already associated with a value or is
 associated with null, associates it with the given value. Otherwise,
 replaces the value with the results of the given remapping function,
 or removes if the result is null. This method may be of use when
 combining multiple mapped values for a key.

 If a security manager is enabled, its checkSecurityAccess
 method is called with the strings ""putProviderProperty.""+name
 and ""removeProviderProperty.""+name, where name is the
 provider name, to see if it's ok to set this provider's property values
 and remove this provider's properties.

Specified by:
merge in interface Map<Object,Object>
Overrides:
merge in class Hashtable<Object,Object>
Parameters:
key - key with which the resulting value is to be associated
value - the non-null value to be merged with the existing value
        associated with the key or, if no existing value or a null value
        is associated with the key, to be associated with the key
remappingFunction - the function to recompute a value if present
Returns:
the new value associated with the specified key, or null if no
         value is associated with the key
Throws:
SecurityException - if a security manager exists and its SecurityManager.checkSecurityAccess(java.lang.String) method
          denies access to set property values or remove properties.
Since:
1.8


"
Provider,"put(Object key, Object value)",Object,Sets the key property to have the specified value.,"

put
public Object put(Object key,
                  Object value)
Sets the key property to have the specified
 value.

 If a security manager is enabled, its checkSecurityAccess
 method is called with the string ""putProviderProperty.""+name,
 where name is the provider name, to see if it's ok to set this
 provider's property values.

Specified by:
put in interface Map<Object,Object>
Overrides:
put in class Hashtable<Object,Object>
Parameters:
key - the hashtable key
value - the value
Returns:
the previous value of the specified key in this hashtable,
             or null if it did not have one
Throws:
SecurityException - if a security manager exists and its SecurityManager.checkSecurityAccess(java.lang.String) method
          denies access to set property values.
Since:
1.2
See Also:
Object.equals(Object), 
Hashtable.get(Object)


"
Provider,"putAll(Map<?,?> t)",void,Copies all of the mappings from the specified Map to this provider.,"

putAll
public void putAll(Map<?,?> t)
Copies all of the mappings from the specified Map to this provider.
 These mappings will replace any properties that this provider had
 for any of the keys currently in the specified Map.

Specified by:
putAll in interface Map<Object,Object>
Overrides:
putAll in class Hashtable<Object,Object>
Parameters:
t - mappings to be stored in this map
Since:
1.2


"
Provider,"putIfAbsent(Object key, Object value)",Object,"If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.","

putIfAbsent
public Object putIfAbsent(Object key,
                          Object value)
If the specified key is not already associated with a value (or is mapped
 to null) associates it with the given value and returns
 null, else returns the current value.

 If a security manager is enabled, its checkSecurityAccess
 method is called with the string ""putProviderProperty.""+name,
 where name is the provider name, to see if it's ok to set this
 provider's property values.

Specified by:
putIfAbsent in interface Map<Object,Object>
Overrides:
putIfAbsent in class Hashtable<Object,Object>
Parameters:
key - key with which the specified value is to be associated
value - value to be associated with the specified key
Returns:
the previous value associated with the specified key, or
         null if there was no mapping for the key.
         (A null return can also indicate that the map
         previously associated null with the key,
         if the implementation supports null values.)
Throws:
SecurityException - if a security manager exists and its SecurityManager.checkSecurityAccess(java.lang.String) method
          denies access to set property values.
Since:
1.8


"
Provider,putService(Provider.Service s),protected void,Add a service.,"

putService
protected void putService(Provider.Service s)
Add a service. If a service of the same type with the same algorithm
 name exists and it was added using putService(),
 it is replaced by the new service.
 This method also places information about this service
 in the provider's Hashtable values in the format described in the
 
 Java Cryptography Architecture API Specification & Reference .

 Also, if there is a security manager, its
 checkSecurityAccess method is called with the string
 ""putProviderProperty.""+name, where name is
 the provider name, to see if it's ok to set this provider's property
 values. If the default implementation of checkSecurityAccess
 is used (that is, that method is not overriden), then this results in
 a call to the security manager's checkPermission method with
 a SecurityPermission(""putProviderProperty.""+name)
 permission.

Parameters:
s - the Service to add
Throws:
SecurityException - if a security manager exists and its SecurityManager.checkSecurityAccess(java.lang.String) method denies
      access to set property values.
NullPointerException - if s is null
Since:
1.5


"
Provider,remove(Object key),Object,Removes the key property (and its corresponding value).,"

remove
public Object remove(Object key)
Removes the key property (and its corresponding
 value).

 If a security manager is enabled, its checkSecurityAccess
 method is called with the string ""removeProviderProperty.""+name,
 where name is the provider name, to see if it's ok to remove this
 provider's properties.

Specified by:
remove in interface Map<Object,Object>
Overrides:
remove in class Hashtable<Object,Object>
Parameters:
key - the key that needs to be removed
Returns:
the value to which the key had been mapped in this hashtable,
          or null if the key did not have a mapping
Throws:
SecurityException - if a security manager exists and its SecurityManager.checkSecurityAccess(java.lang.String) method
          denies access to remove this provider's properties.
Since:
1.2


"
Provider,"remove(Object key, Object value)",boolean,Removes the entry for the specified key only if it is currently mapped to the specified value.,"

remove
public boolean remove(Object key,
                      Object value)
Removes the entry for the specified key only if it is currently
 mapped to the specified value.

 If a security manager is enabled, its checkSecurityAccess
 method is called with the string ""removeProviderProperty.""+name,
 where name is the provider name, to see if it's ok to remove this
 provider's properties.

Specified by:
remove in interface Map<Object,Object>
Overrides:
remove in class Hashtable<Object,Object>
Parameters:
key - key with which the specified value is associated
value - value expected to be associated with the specified key
Returns:
true if the value was removed
Throws:
SecurityException - if a security manager exists and its SecurityManager.checkSecurityAccess(java.lang.String) method
          denies access to remove this provider's properties.
Since:
1.8


"
Provider,removeService(Provider.Service s),protected void,Remove a service previously added using putService().,"

removeService
protected void removeService(Provider.Service s)
Remove a service previously added using
 putService(). The specified service is removed from
 this provider. It will no longer be returned by
 getService() and its information will be removed
 from this provider's Hashtable.

 Also, if there is a security manager, its
 checkSecurityAccess method is called with the string
 ""removeProviderProperty.""+name, where name is
 the provider name, to see if it's ok to remove this provider's
 properties. If the default implementation of
 checkSecurityAccess is used (that is, that method is not
 overriden), then this results in a call to the security manager's
 checkPermission method with a
 SecurityPermission(""removeProviderProperty.""+name)
 permission.

Parameters:
s - the Service to be removed
Throws:
SecurityException - if a security manager exists and its SecurityManager.checkSecurityAccess(java.lang.String) method denies
          access to remove this provider's properties.
NullPointerException - if s is null
Since:
1.5


"
Provider,"replace(Object key, Object value)",Object,Replaces the entry for the specified key only if it is currently mapped to some value.,"

replace
public Object replace(Object key,
                      Object value)
Replaces the entry for the specified key only if it is
 currently mapped to some value.

 If a security manager is enabled, its checkSecurityAccess
 method is called with the string ""putProviderProperty.""+name,
 where name is the provider name, to see if it's ok to set this
 provider's property values.

Specified by:
replace in interface Map<Object,Object>
Overrides:
replace in class Hashtable<Object,Object>
Parameters:
key - key with which the specified value is associated
value - value to be associated with the specified key
Returns:
the previous value associated with the specified key, or
         null if there was no mapping for the key.
         (A null return can also indicate that the map
         previously associated null with the key,
         if the implementation supports null values.)
Throws:
SecurityException - if a security manager exists and its SecurityManager.checkSecurityAccess(java.lang.String) method
          denies access to set property values.
Since:
1.8


"
Provider,"replace(Object key, Object oldValue, Object newValue)",boolean,Replaces the entry for the specified key only if currently mapped to the specified value.,"

replace
public boolean replace(Object key,
                       Object oldValue,
                       Object newValue)
Replaces the entry for the specified key only if currently
 mapped to the specified value.

 If a security manager is enabled, its checkSecurityAccess
 method is called with the string ""putProviderProperty.""+name,
 where name is the provider name, to see if it's ok to set this
 provider's property values.

Specified by:
replace in interface Map<Object,Object>
Overrides:
replace in class Hashtable<Object,Object>
Parameters:
key - key with which the specified value is associated
oldValue - value expected to be associated with the specified key
newValue - value to be associated with the specified key
Returns:
true if the value was replaced
Throws:
SecurityException - if a security manager exists and its SecurityManager.checkSecurityAccess(java.lang.String) method
          denies access to set property values.
Since:
1.8


"
Provider,"replaceAll(BiFunction<? super Object,? super Object,? extends Object> function)",void,"Replaces each entry's value with the result of invoking the given function on that entry, in the order entries are returned by an entry set iterator, until all entries have been processed or the function throws an exception.","

replaceAll
public void replaceAll(BiFunction<? super Object,? super Object,? extends Object> function)
Replaces each entry's value with the result of invoking the given
 function on that entry, in the order entries are returned by an entry
 set iterator, until all entries have been processed or the function
 throws an exception.

 If a security manager is enabled, its checkSecurityAccess
 method is called with the string ""putProviderProperty.""+name,
 where name is the provider name, to see if it's ok to set this
 provider's property values.

Specified by:
replaceAll in interface Map<Object,Object>
Overrides:
replaceAll in class Hashtable<Object,Object>
Parameters:
function - the function to apply to each entry
Throws:
SecurityException - if a security manager exists and its SecurityManager.checkSecurityAccess(java.lang.String) method
          denies access to set property values.
Since:
1.8


"
Provider,toString(),String,Returns a string with the name and the version number of this provider.,"

toString
public String toString()
Returns a string with the name and the version number
 of this provider.

Overrides:
toString in class Hashtable<Object,Object>
Returns:
the string with the name and the version number
 for this provider.


"
Provider,values(),Collection<Object>,Returns an unmodifiable Collection view of the property values contained in this provider.,"

values
public Collection<Object> values()
Returns an unmodifiable Collection view of the property values
 contained in this provider.

Specified by:
values in interface Map<Object,Object>
Overrides:
values in class Hashtable<Object,Object>
Returns:
a collection view of the values contained in this map
Since:
1.2


"
Provider.Service,getAlgorithm(),String,Return the name of the algorithm of this service.,"

getAlgorithm
public final String getAlgorithm()
Return the name of the algorithm of this service. For example,
 SHA-1.

Returns:
the algorithm of this service


"
Provider.Service,getAttribute(String name),String,Return the value of the specified attribute or null if this attribute is not set for this Service.,"

getAttribute
public final String getAttribute(String name)
Return the value of the specified attribute or null if this
 attribute is not set for this Service.

Parameters:
name - the name of the requested attribute
Returns:
the value of the specified attribute or null if the
         attribute is not present
Throws:
NullPointerException - if name is null


"
Provider.Service,getClassName(),String,Return the name of the class implementing this service.,"

getClassName
public final String getClassName()
Return the name of the class implementing this service.

Returns:
the name of the class implementing this service


"
Provider.Service,getProvider(),Provider,Return the Provider of this service.,"

getProvider
public final Provider getProvider()
Return the Provider of this service.

Returns:
the Provider of this service


"
Provider.Service,getType(),String,Get the type of this service.,"

getType
public final String getType()
Get the type of this service. For example, MessageDigest.

Returns:
the type of this service


"
Provider.Service,newInstance(Object constructorParameter),Object,Return a new instance of the implementation described by this service.,"

newInstance
public Object newInstance(Object constructorParameter)
                   throws NoSuchAlgorithmException
Return a new instance of the implementation described by this
 service. The security provider framework uses this method to
 construct implementations. Applications will typically not need
 to call it.

 The default implementation uses reflection to invoke the
 standard constructor for this type of service.
 Security providers can override this method to implement
 instantiation in a different way.
 For details and the values of constructorParameter that are
 valid for the various types of services see the
 
 Java Cryptography Architecture API Specification &
 Reference.

Parameters:
constructorParameter - the value to pass to the constructor,
 or null if this type of service does not use a constructorParameter.
Returns:
a new implementation of this service
Throws:
InvalidParameterException - if the value of
 constructorParameter is invalid for this type of service.
NoSuchAlgorithmException - if instantiation failed for
 any other reason.


"
Provider.Service,supportsParameter(Object parameter),boolean,Test whether this Service can use the specified parameter.,"

supportsParameter
public boolean supportsParameter(Object parameter)
Test whether this Service can use the specified parameter.
 Returns false if this service cannot use the parameter. Returns
 true if this service can use the parameter, if a fast test is
 infeasible, or if the status is unknown.

 The security provider framework uses this method with
 some types of services to quickly exclude non-matching
 implementations for consideration.
 Applications will typically not need to call it.

 For details and the values of parameter that are valid for the
 various types of services see the top of this class and the
 
 Java Cryptography Architecture API Specification &
 Reference.
 Security providers can override it to implement their own test.

Parameters:
parameter - the parameter to test
Returns:
false if this this service cannot use the specified
 parameter; true if it can possibly use the parameter
Throws:
InvalidParameterException - if the value of parameter is
 invalid for this type of service or if this method cannot be
 used with this type of service


"
Provider.Service,toString(),String,Return a String representation of this service.,"

toString
public String toString()
Return a String representation of this service.

Overrides:
toString in class Object
Returns:
a String representation of this service.


"
SecureClassLoader,"defineClass(String name, byte[] b, int off, int len, CodeSource cs)",protected Class<?>,"Converts an array of bytes into an instance of class Class, with an optional CodeSource.","

defineClass
protected final Class<?> defineClass(String name,
                                     byte[] b,
                                     int off,
                                     int len,
                                     CodeSource cs)
Converts an array of bytes into an instance of class Class,
 with an optional CodeSource. Before the
 class can be used it must be resolved.
 
 If a non-null CodeSource is supplied a ProtectionDomain is
 constructed and associated with the class being defined.
 

Parameters:
name - the expected name of the class, or null
                  if not known, using '.' and not '/' as the separator
                  and without a trailing "".class"" suffix.
b - the bytes that make up the class data. The bytes in
             positions off through off+len-1
             should have the format of a valid class file as defined by
             The Java™ Virtual Machine Specification.
off - the start offset in b of the class data
len - the length of the class data
cs - the associated CodeSource, or null if none
Returns:
the Class object created from the data,
         and optional CodeSource.
Throws:
ClassFormatError - if the data did not contain a valid class
IndexOutOfBoundsException - if either off or
             len is negative, or if
             off+len is greater than b.length.
SecurityException - if an attempt is made to add this class
             to a package that contains classes that were signed by
             a different set of certificates than this class, or if
             the class name begins with ""java."".


"
SecureClassLoader,"defineClass(String name, ByteBuffer b, CodeSource cs)",protected Class<?>,"Converts a ByteBuffer into an instance of class Class, with an optional CodeSource.","

defineClass
protected final Class<?> defineClass(String name,
                                     ByteBuffer b,
                                     CodeSource cs)
Converts a ByteBuffer
 into an instance of class Class, with an optional CodeSource.
 Before the class can be used it must be resolved.
 
 If a non-null CodeSource is supplied a ProtectionDomain is
 constructed and associated with the class being defined.
 

Parameters:
name - the expected name of the class, or null
                  if not known, using '.' and not '/' as the separator
                  and without a trailing "".class"" suffix.
b - the bytes that make up the class data.  The bytes from positions
                  b.position() through b.position() + b.limit() -1
                  should have the format of a valid class file as defined by
                  The Java™ Virtual Machine Specification.
cs - the associated CodeSource, or null if none
Returns:
the Class object created from the data,
         and optional CodeSource.
Throws:
ClassFormatError - if the data did not contain a valid class
SecurityException - if an attempt is made to add this class
             to a package that contains classes that were signed by
             a different set of certificates than this class, or if
             the class name begins with ""java."".
Since:
1.5


"
SecureClassLoader,getPermissions(CodeSource codesource),protected PermissionCollection,Returns the permissions for the given CodeSource object.,"

getPermissions
protected PermissionCollection getPermissions(CodeSource codesource)
Returns the permissions for the given CodeSource object.
 
 This method is invoked by the defineClass method which takes
 a CodeSource as an argument when it is constructing the
 ProtectionDomain for the class being defined.
 

Parameters:
codesource - the codesource.
Returns:
the permissions granted to the codesource.


"
SecureRandom,generateSeed(int numBytes),byte[],"Returns the given number of seed bytes, computed using the seed generation algorithm that this class uses to seed itself.","

generateSeed
public byte[] generateSeed(int numBytes)
Returns the given number of seed bytes, computed using the seed
 generation algorithm that this class uses to seed itself.  This
 call may be used to seed other random number generators.

Parameters:
numBytes - the number of seed bytes to generate.
Returns:
the seed bytes.


"
SecureRandom,getAlgorithm(),String,Returns the name of the algorithm implemented by this SecureRandom object.,"

getAlgorithm
public String getAlgorithm()
Returns the name of the algorithm implemented by this SecureRandom
 object.

Returns:
the name of the algorithm or unknown
          if the algorithm name cannot be determined.
Since:
1.5


"
SecureRandom,getInstance(String algorithm),static SecureRandom,Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm.,"

getInstance
public static SecureRandom getInstance(String algorithm)
                                throws NoSuchAlgorithmException
Returns a SecureRandom object that implements the specified
 Random Number Generator (RNG) algorithm.

  This method traverses the list of registered security Providers,
 starting with the most preferred Provider.
 A new SecureRandom object encapsulating the
 SecureRandomSpi implementation from the first
 Provider that supports the specified algorithm is returned.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

  The returned SecureRandom object has not been seeded.  To seed the
 returned object, call the setSeed method.
 If setSeed is not called, the first call to
 nextBytes will force the SecureRandom object to seed itself.
 This self-seeding will not occur if setSeed was
 previously called.

Parameters:
algorithm - the name of the RNG algorithm.
 See the SecureRandom section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard RNG algorithm names.
Returns:
the new SecureRandom object.
Throws:
NoSuchAlgorithmException - if no Provider supports a
          SecureRandomSpi implementation for the
          specified algorithm.
Since:
1.2
See Also:
Provider


"
SecureRandom,"getInstance(String algorithm, Provider provider)",static SecureRandom,Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm.,"

getInstance
public static SecureRandom getInstance(String algorithm,
                                       Provider provider)
                                throws NoSuchAlgorithmException
Returns a SecureRandom object that implements the specified
 Random Number Generator (RNG) algorithm.

  A new SecureRandom object encapsulating the
 SecureRandomSpi implementation from the specified Provider
 object is returned.  Note that the specified Provider object
 does not have to be registered in the provider list.

  The returned SecureRandom object has not been seeded.  To seed the
 returned object, call the setSeed method.
 If setSeed is not called, the first call to
 nextBytes will force the SecureRandom object to seed itself.
 This self-seeding will not occur if setSeed was
 previously called.

Parameters:
algorithm - the name of the RNG algorithm.
 See the SecureRandom section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard RNG algorithm names.
provider - the provider.
Returns:
the new SecureRandom object.
Throws:
NoSuchAlgorithmException - if a SecureRandomSpi
          implementation for the specified algorithm is not available
          from the specified Provider object.
IllegalArgumentException - if the specified provider is null.
Since:
1.4
See Also:
Provider


"
SecureRandom,"getInstance(String algorithm, String provider)",static SecureRandom,Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm.,"

getInstance
public static SecureRandom getInstance(String algorithm,
                                       String provider)
                                throws NoSuchAlgorithmException,
                                       NoSuchProviderException
Returns a SecureRandom object that implements the specified
 Random Number Generator (RNG) algorithm.

  A new SecureRandom object encapsulating the
 SecureRandomSpi implementation from the specified provider
 is returned.  The specified provider must be registered
 in the security provider list.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

  The returned SecureRandom object has not been seeded.  To seed the
 returned object, call the setSeed method.
 If setSeed is not called, the first call to
 nextBytes will force the SecureRandom object to seed itself.
 This self-seeding will not occur if setSeed was
 previously called.

Parameters:
algorithm - the name of the RNG algorithm.
 See the SecureRandom section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard RNG algorithm names.
provider - the name of the provider.
Returns:
the new SecureRandom object.
Throws:
NoSuchAlgorithmException - if a SecureRandomSpi
          implementation for the specified algorithm is not
          available from the specified provider.
NoSuchProviderException - if the specified provider is not
          registered in the security provider list.
IllegalArgumentException - if the provider name is null
          or empty.
Since:
1.2
See Also:
Provider


"
SecureRandom,getInstanceStrong(),static SecureRandom,Returns a SecureRandom object that was selected by using the algorithms/providers specified in the securerandom.strongAlgorithms Security property.,"

getInstanceStrong
public static SecureRandom getInstanceStrong()
                                      throws NoSuchAlgorithmException
Returns a SecureRandom object that was selected by using
 the algorithms/providers specified in the securerandom.strongAlgorithms Security property.
 
 Some situations require strong random values, such as when
 creating high-value/long-lived secrets like RSA public/private
 keys.  To help guide applications in selecting a suitable strong
 SecureRandom implementation, Java distributions
 include a list of known strong SecureRandom
 implementations in the securerandom.strongAlgorithms
 Security property.
 
 Every implementation of the Java platform is required to
 support at least one strong SecureRandom implementation.

Returns:
a strong SecureRandom implementation as indicated
 by the securerandom.strongAlgorithms Security property
Throws:
NoSuchAlgorithmException - if no algorithm is available
Since:
1.8
See Also:
Security.getProperty(String)


"
SecureRandom,getProvider(),Provider,Returns the provider of this SecureRandom object.,"

getProvider
public final Provider getProvider()
Returns the provider of this SecureRandom object.

Returns:
the provider of this SecureRandom object.


"
SecureRandom,getSeed(int numBytes),static byte[],"Returns the given number of seed bytes, computed using the seed generation algorithm that this class uses to seed itself.","

getSeed
public static byte[] getSeed(int numBytes)
Returns the given number of seed bytes, computed using the seed
 generation algorithm that this class uses to seed itself.  This
 call may be used to seed other random number generators.

 This method is only included for backwards compatibility.
 The caller is encouraged to use one of the alternative
 getInstance methods to obtain a SecureRandom object, and
 then call the generateSeed method to obtain seed bytes
 from that object.

Parameters:
numBytes - the number of seed bytes to generate.
Returns:
the seed bytes.
See Also:
setSeed(byte[])


"
SecureRandom,next(int numBits),protected int,"Generates an integer containing the user-specified number of pseudo-random bits (right justified, with leading zeros).","

next
protected final int next(int numBits)
Generates an integer containing the user-specified number of
 pseudo-random bits (right justified, with leading zeros).  This
 method overrides a java.util.Random method, and serves
 to provide a source of random bits to all of the methods inherited
 from that class (for example, nextInt,
 nextLong, and nextFloat).

Overrides:
next in class Random
Parameters:
numBits - number of pseudo-random bits to be generated, where
 0 <= numBits <= 32.
Returns:
an int containing the user-specified number
 of pseudo-random bits (right justified, with leading zeros).


"
SecureRandom,nextBytes(byte[] bytes),void,Generates a user-specified number of random bytes.,"

nextBytes
public void nextBytes(byte[] bytes)
Generates a user-specified number of random bytes.

  If a call to setSeed had not occurred previously,
 the first call to this method forces this SecureRandom object
 to seed itself.  This self-seeding will not occur if
 setSeed was previously called.

Overrides:
nextBytes in class Random
Parameters:
bytes - the array to be filled in with random bytes.


"
SecureRandom,setSeed(byte[] seed),void,Reseeds this random object.,"

setSeed
public void setSeed(byte[] seed)
Reseeds this random object. The given seed supplements, rather than
 replaces, the existing seed. Thus, repeated calls are guaranteed
 never to reduce randomness.

Parameters:
seed - the seed.
See Also:
getSeed(int)


"
SecureRandom,setSeed(long seed),void,"Reseeds this random object, using the eight bytes contained in the given long seed.","

setSeed
public void setSeed(long seed)
Reseeds this random object, using the eight bytes contained
 in the given long seed. The given seed supplements,
 rather than replaces, the existing seed. Thus, repeated calls
 are guaranteed never to reduce randomness.

 This method is defined for compatibility with
 java.util.Random.

Overrides:
setSeed in class Random
Parameters:
seed - the seed.
See Also:
getSeed(int)


"
SecureRandomSpi,engineGenerateSeed(int numBytes),protected abstract byte[],Returns the given number of seed bytes.,"

engineGenerateSeed
protected abstract byte[] engineGenerateSeed(int numBytes)
Returns the given number of seed bytes.  This call may be used to
 seed other random number generators.

Parameters:
numBytes - the number of seed bytes to generate.
Returns:
the seed bytes.


"
SecureRandomSpi,engineNextBytes(byte[] bytes),protected abstract void,Generates a user-specified number of random bytes.,"

engineNextBytes
protected abstract void engineNextBytes(byte[] bytes)
Generates a user-specified number of random bytes.

  If a call to engineSetSeed had not occurred previously,
 the first call to this method forces this SecureRandom implementation
 to seed itself.  This self-seeding will not occur if
 engineSetSeed was previously called.

Parameters:
bytes - the array to be filled in with random bytes.


"
SecureRandomSpi,engineSetSeed(byte[] seed),protected abstract void,Reseeds this random object.,"

engineSetSeed
protected abstract void engineSetSeed(byte[] seed)
Reseeds this random object. The given seed supplements, rather than
 replaces, the existing seed. Thus, repeated calls are guaranteed
 never to reduce randomness.

Parameters:
seed - the seed.


"
Security,addProvider(Provider provider),static int,Adds a provider to the next position available.,"

addProvider
public static int addProvider(Provider provider)
Adds a provider to the next position available.

 If there is a security manager, the
 SecurityManager.checkSecurityAccess(java.lang.String) method is called
 with the ""insertProvider"" permission target name to see if
 it's ok to add a new provider. If this permission check is denied,
 checkSecurityAccess is called again with the
 ""insertProvider.""+provider.getName() permission target name. If
 both checks are denied, a SecurityException is thrown.

Parameters:
provider - the provider to be added.
Returns:
the preference position in which the provider was
 added, or -1 if the provider was not added because it is
 already installed.
Throws:
NullPointerException - if provider is null
SecurityException - if a security manager exists and its SecurityManager.checkSecurityAccess(java.lang.String) method
          denies access to add a new provider
See Also:
getProvider(java.lang.String), 
removeProvider(java.lang.String), 
SecurityPermission


"
Security,"getAlgorithmProperty(String algName, String propName)",static String,"Deprecated. This method used to return the value of a proprietary property in the master file of the ""SUN"" Cryptographic Service Provider in order to determine how to parse algorithm-specific parameters. Use the new provider-based and algorithm-independent AlgorithmParameters and KeyFactory engine classes (introduced in the J2SE version 1.2 platform) instead.","

getAlgorithmProperty
@Deprecated
public static String getAlgorithmProperty(String algName,
                                                      String propName)
Deprecated. This method used to return the value of a proprietary
 property in the master file of the ""SUN"" Cryptographic Service
 Provider in order to determine how to parse algorithm-specific
 parameters. Use the new provider-based and algorithm-independent
 AlgorithmParameters and KeyFactory engine
 classes (introduced in the J2SE version 1.2 platform) instead.
Gets a specified property for an algorithm. The algorithm name
 should be a standard name. See the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.

 One possible use is by specialized algorithm parsers, which may map
 classes to algorithms which they understand (much like Key parsers
 do).

Parameters:
algName - the algorithm name.
propName - the name of the property to get.
Returns:
the value of the specified property.


"
Security,getAlgorithms(String serviceName),static Set<String>,"Returns a Set of Strings containing the names of all available algorithms or types for the specified Java cryptographic service (e.g., Signature, MessageDigest, Cipher, Mac, KeyStore).","

getAlgorithms
public static Set<String> getAlgorithms(String serviceName)
Returns a Set of Strings containing the names of all available
 algorithms or types for the specified Java cryptographic service
 (e.g., Signature, MessageDigest, Cipher, Mac, KeyStore). Returns
 an empty Set if there is no provider that supports the
 specified service or if serviceName is null. For a complete list
 of Java cryptographic services, please see the
 Java
 Cryptography Architecture API Specification & Reference.
 Note: the returned set is immutable.

Parameters:
serviceName - the name of the Java cryptographic
 service (e.g., Signature, MessageDigest, Cipher, Mac, KeyStore).
 Note: this parameter is case-insensitive.
Returns:
a Set of Strings containing the names of all available
 algorithms or types for the specified Java cryptographic service
 or an empty set if no provider supports the specified service.
Since:
1.4


"
Security,getProperty(String key),static String,Gets a security property value.,"

getProperty
public static String getProperty(String key)
Gets a security property value.

 First, if there is a security manager, its
 checkPermission  method is called with a
 java.security.SecurityPermission(""getProperty.""+key)
 permission to see if it's ok to retrieve the specified
 security property value..

Parameters:
key - the key of the property being retrieved.
Returns:
the value of the security property corresponding to key.
Throws:
SecurityException - if a security manager exists and its SecurityManager.checkPermission(java.security.Permission) method
          denies
          access to retrieve the specified security property value
NullPointerException - is key is null
See Also:
setProperty(java.lang.String, java.lang.String), 
SecurityPermission


"
Security,getProvider(String name),static Provider,"Returns the provider installed with the specified name, if any.","

getProvider
public static Provider getProvider(String name)
Returns the provider installed with the specified name, if
 any. Returns null if no provider with the specified name is
 installed or if name is null.

Parameters:
name - the name of the provider to get.
Returns:
the provider of the specified name.
See Also:
removeProvider(java.lang.String), 
addProvider(java.security.Provider)


"
Security,getProviders(),static Provider[],Returns an array containing all the installed providers.,"

getProviders
public static Provider[] getProviders()
Returns an array containing all the installed providers. The order of
 the providers in the array is their preference order.

Returns:
an array of all the installed providers.


"
Security,"getProviders(Map<String,String> filter)",static Provider[],"Returns an array containing all installed providers that satisfy the specified* selection criteria, or null if no such providers have been installed.","

getProviders
public static Provider[] getProviders(Map<String,String> filter)
Returns an array containing all installed providers that satisfy the
 specified* selection criteria, or null if no such providers have been
 installed. The returned providers are ordered
 according to their
 preference order.

 The selection criteria are represented by a map.
 Each map entry represents a selection criterion.
 A provider is selected iff it satisfies all selection
 criteria. The key for any entry in such a map must be in one of the
 following two formats:
 
 <crypto_service>.<algorithm_or_type>
 The cryptographic service name must not contain any dots.
  The value associated with the key must be an empty string.
  A provider
 satisfies this selection criterion iff the provider implements the
 specified algorithm or type for the specified cryptographic service.
  <crypto_service>.
 <algorithm_or_type> <attribute_name>
 The cryptographic service name must not contain any dots. There
 must be one or more space characters between the
 <algorithm_or_type>
 and the <attribute_name>.
  The value associated with the key must be a non-empty string.
 A provider satisfies this selection criterion iff the
 provider implements the specified algorithm or type for the specified
 cryptographic service and its implementation meets the
 constraint expressed by the specified attribute name/value pair.
 
 See the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard cryptographic service names, standard
 algorithm names and standard attribute names.

Parameters:
filter - the criteria for selecting
 providers. The filter is case-insensitive.
Returns:
all the installed providers that satisfy the selection
 criteria, or null if no such providers have been installed.
Throws:
InvalidParameterException - if the filter is not in the required format
NullPointerException - if filter is null
Since:
1.3
See Also:
getProviders(java.lang.String)


"
Security,getProviders(String filter),static Provider[],"Returns an array containing all installed providers that satisfy the specified selection criterion, or null if no such providers have been installed.","

getProviders
public static Provider[] getProviders(String filter)
Returns an array containing all installed providers that satisfy the
 specified selection criterion, or null if no such providers have been
 installed. The returned providers are ordered
 according to their
 preference order.

  A cryptographic service is always associated with a particular
 algorithm or type. For example, a digital signature service is
 always associated with a particular algorithm (e.g., DSA),
 and a CertificateFactory service is always associated with
 a particular certificate type (e.g., X.509).

 The selection criterion must be specified in one of the following two
 formats:
 
 <crypto_service>.<algorithm_or_type>
 The cryptographic service name must not contain any dots.
  A
 provider satisfies the specified selection criterion iff the provider
 implements the
 specified algorithm or type for the specified cryptographic service.
  For example, ""CertificateFactory.X.509""
 would be satisfied by any provider that supplied
 a CertificateFactory implementation for X.509 certificates.
  <crypto_service>.<algorithm_or_type>
 <attribute_name>:<attribute_value>
 The cryptographic service name must not contain any dots. There
 must be one or more space characters between the
 <algorithm_or_type> and the
 <attribute_name>.
   A provider satisfies this selection criterion iff the
 provider implements the specified algorithm or type for the specified
 cryptographic service and its implementation meets the
 constraint expressed by the specified attribute name/value pair.
  For example, ""Signature.SHA1withDSA KeySize:1024"" would be
 satisfied by any provider that implemented
 the SHA1withDSA signature algorithm with a keysize of 1024 (or larger).

 
 See the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard cryptographic service names, standard
 algorithm names and standard attribute names.

Parameters:
filter - the criterion for selecting
 providers. The filter is case-insensitive.
Returns:
all the installed providers that satisfy the selection
 criterion, or null if no such providers have been installed.
Throws:
InvalidParameterException - if the filter is not in the required format
NullPointerException - if filter is null
Since:
1.3
See Also:
getProviders(java.util.Map)


"
Security,"insertProviderAt(Provider provider, int position)",static int,"Adds a new provider, at a specified position.","

insertProviderAt
public static int insertProviderAt(Provider provider,
                                   int position)
Adds a new provider, at a specified position. The position is
 the preference order in which providers are searched for
 requested algorithms.  The position is 1-based, that is,
 1 is most preferred, followed by 2, and so on.

 If the given provider is installed at the requested position,
 the provider that used to be at that position, and all providers
 with a position greater than position, are shifted up
 one position (towards the end of the list of installed providers).

 A provider cannot be added if it is already installed.

 If there is a security manager, the
 SecurityManager.checkSecurityAccess(java.lang.String) method is called
 with the ""insertProvider"" permission target name to see if
 it's ok to add a new provider. If this permission check is denied,
 checkSecurityAccess is called again with the
 ""insertProvider.""+provider.getName() permission target name. If
 both checks are denied, a SecurityException is thrown.

Parameters:
provider - the provider to be added.
position - the preference position that the caller would
 like for this provider.
Returns:
the actual preference position in which the provider was
 added, or -1 if the provider was not added because it is
 already installed.
Throws:
NullPointerException - if provider is null
SecurityException - if a security manager exists and its SecurityManager.checkSecurityAccess(java.lang.String) method
          denies access to add a new provider
See Also:
getProvider(java.lang.String), 
removeProvider(java.lang.String), 
SecurityPermission


"
Security,removeProvider(String name),static void,Removes the provider with the specified name.,"

removeProvider
public static void removeProvider(String name)
Removes the provider with the specified name.

 When the specified provider is removed, all providers located
 at a position greater than where the specified provider was are shifted
 down one position (towards the head of the list of installed
 providers).

 This method returns silently if the provider is not installed or
 if name is null.

 First, if there is a security manager, its
 checkSecurityAccess
 method is called with the string ""removeProvider.""+name
 to see if it's ok to remove the provider.
 If the default implementation of checkSecurityAccess
 is used (i.e., that method is not overriden), then this will result in
 a call to the security manager's checkPermission method
 with a SecurityPermission(""removeProvider.""+name)
 permission.

Parameters:
name - the name of the provider to remove.
Throws:
SecurityException - if a security manager exists and its SecurityManager.checkSecurityAccess(java.lang.String) method
          denies
          access to remove the provider
See Also:
getProvider(java.lang.String), 
addProvider(java.security.Provider)


"
Security,"setProperty(String key, String datum)",static void,Sets a security property value.,"

setProperty
public static void setProperty(String key,
                               String datum)
Sets a security property value.

 First, if there is a security manager, its
 checkPermission method is called with a
 java.security.SecurityPermission(""setProperty.""+key)
 permission to see if it's ok to set the specified
 security property value.

Parameters:
key - the name of the property to be set.
datum - the value of the property to be set.
Throws:
SecurityException - if a security manager exists and its SecurityManager.checkPermission(java.security.Permission) method
          denies access to set the specified security property value
NullPointerException - if key or datum is null
See Also:
getProperty(java.lang.String), 
SecurityPermission


"
Signature,clone(),Object,Returns a clone if the implementation is cloneable.,"

clone
public Object clone()
             throws CloneNotSupportedException
Returns a clone if the implementation is cloneable.

Overrides:
clone in class SignatureSpi
Returns:
a clone if the implementation is cloneable.
Throws:
CloneNotSupportedException - if this is called
 on an implementation that does not support Cloneable.
See Also:
Cloneable


"
Signature,getAlgorithm(),String,Returns the name of the algorithm for this signature object.,"

getAlgorithm
public final String getAlgorithm()
Returns the name of the algorithm for this signature object.

Returns:
the name of the algorithm for this signature object.


"
Signature,getInstance(String algorithm),static Signature,Returns a Signature object that implements the specified signature algorithm.,"

getInstance
public static Signature getInstance(String algorithm)
                             throws NoSuchAlgorithmException
Returns a Signature object that implements the specified signature
 algorithm.

  This method traverses the list of registered security Providers,
 starting with the most preferred Provider.
 A new Signature object encapsulating the
 SignatureSpi implementation from the first
 Provider that supports the specified algorithm is returned.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
algorithm - the standard name of the algorithm requested.
 See the Signature section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.
Returns:
the new Signature object.
Throws:
NoSuchAlgorithmException - if no Provider supports a
          Signature implementation for the
          specified algorithm.
See Also:
Provider


"
Signature,"getInstance(String algorithm, Provider provider)",static Signature,Returns a Signature object that implements the specified signature algorithm.,"

getInstance
public static Signature getInstance(String algorithm,
                                    Provider provider)
                             throws NoSuchAlgorithmException
Returns a Signature object that implements the specified
 signature algorithm.

  A new Signature object encapsulating the
 SignatureSpi implementation from the specified Provider
 object is returned.  Note that the specified Provider object
 does not have to be registered in the provider list.

Parameters:
algorithm - the name of the algorithm requested.
 See the Signature section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.
provider - the provider.
Returns:
the new Signature object.
Throws:
NoSuchAlgorithmException - if a SignatureSpi
          implementation for the specified algorithm is not available
          from the specified Provider object.
IllegalArgumentException - if the provider is null.
Since:
1.4
See Also:
Provider


"
Signature,"getInstance(String algorithm, String provider)",static Signature,Returns a Signature object that implements the specified signature algorithm.,"

getInstance
public static Signature getInstance(String algorithm,
                                    String provider)
                             throws NoSuchAlgorithmException,
                                    NoSuchProviderException
Returns a Signature object that implements the specified signature
 algorithm.

  A new Signature object encapsulating the
 SignatureSpi implementation from the specified provider
 is returned.  The specified provider must be registered
 in the security provider list.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
algorithm - the name of the algorithm requested.
 See the Signature section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.
provider - the name of the provider.
Returns:
the new Signature object.
Throws:
NoSuchAlgorithmException - if a SignatureSpi
          implementation for the specified algorithm is not
          available from the specified provider.
NoSuchProviderException - if the specified provider is not
          registered in the security provider list.
IllegalArgumentException - if the provider name is null
          or empty.
See Also:
Provider


"
Signature,getParameter(String param),Object,Deprecated.,"

getParameter
@Deprecated
public final Object getParameter(String param)
                                      throws InvalidParameterException
Deprecated. 
Gets the value of the specified algorithm parameter. This method
 supplies a general-purpose mechanism through which it is possible to
 get the various parameters of this object. A parameter may be any
 settable parameter for the algorithm, such as a parameter size, or
 a source of random bits for signature generation (if appropriate),
 or an indication of whether or not to perform a specific but optional
 computation. A uniform algorithm-specific naming scheme for each
 parameter is desirable but left unspecified at this time.

Parameters:
param - the string name of the parameter.
Returns:
the object that represents the parameter value, or null if
 there is none.
Throws:
InvalidParameterException - if param is an invalid
 parameter for this engine, or another exception occurs while
 trying to get this parameter.
See Also:
setParameter(String, Object)


"
Signature,getParameters(),AlgorithmParameters,Returns the parameters used with this signature object.,"

getParameters
public final AlgorithmParameters getParameters()
Returns the parameters used with this signature object.

  If this signature has been previously initialized with parameters
 (by calling the setParameter method), this method returns
 the same parameters. If this signature has not been initialized with
 parameters, this method may return a combination of default and
 randomly generated parameter values if the underlying
 signature implementation supports it and can successfully generate
 them. Otherwise, null is returned.

Returns:
the parameters used with this signature, or null
Since:
1.4
See Also:
setParameter(AlgorithmParameterSpec)


"
Signature,getProvider(),Provider,Returns the provider of this signature object.,"

getProvider
public final Provider getProvider()
Returns the provider of this signature object.

Returns:
the provider of this signature object


"
Signature,initSign(PrivateKey privateKey),void,Initialize this object for signing.,"

initSign
public final void initSign(PrivateKey privateKey)
                    throws InvalidKeyException
Initialize this object for signing. If this method is called
 again with a different argument, it negates the effect
 of this call.

Parameters:
privateKey - the private key of the identity whose signature
 is going to be generated.
Throws:
InvalidKeyException - if the key is invalid.


"
Signature,"initSign(PrivateKey privateKey, SecureRandom random)",void,Initialize this object for signing.,"

initSign
public final void initSign(PrivateKey privateKey,
                           SecureRandom random)
                    throws InvalidKeyException
Initialize this object for signing. If this method is called
 again with a different argument, it negates the effect
 of this call.

Parameters:
privateKey - the private key of the identity whose signature
 is going to be generated.
random - the source of randomness for this signature.
Throws:
InvalidKeyException - if the key is invalid.


"
Signature,initVerify(Certificate certificate),void,"Initializes this object for verification, using the public key from the given certificate.","

initVerify
public final void initVerify(Certificate certificate)
                      throws InvalidKeyException
Initializes this object for verification, using the public key from
 the given certificate.
 If the certificate is of type X.509 and has a key usage
 extension field marked as critical, and the value of the key usage
 extension field implies that the public key in
 the certificate and its corresponding private key are not
 supposed to be used for digital signatures, an
 InvalidKeyException is thrown.

Parameters:
certificate - the certificate of the identity whose signature is
 going to be verified.
Throws:
InvalidKeyException - if the public key in the certificate
 is not encoded properly or does not include required  parameter
 information or cannot be used for digital signature purposes.
Since:
1.3


"
Signature,initVerify(PublicKey publicKey),void,Initializes this object for verification.,"

initVerify
public final void initVerify(PublicKey publicKey)
                      throws InvalidKeyException
Initializes this object for verification. If this method is called
 again with a different argument, it negates the effect
 of this call.

Parameters:
publicKey - the public key of the identity whose signature is
 going to be verified.
Throws:
InvalidKeyException - if the key is invalid.


"
Signature,setParameter(AlgorithmParameterSpec params),void,Initializes this signature engine with the specified parameter set.,"

setParameter
public final void setParameter(AlgorithmParameterSpec params)
                        throws InvalidAlgorithmParameterException
Initializes this signature engine with the specified parameter set.

Parameters:
params - the parameters
Throws:
InvalidAlgorithmParameterException - if the given parameters
 are inappropriate for this signature engine
See Also:
getParameters()


"
Signature,"setParameter(String param, Object value)",void,Deprecated. Use setParameter.,"

setParameter
@Deprecated
public final void setParameter(String param,
                                           Object value)
                                    throws InvalidParameterException
Deprecated. Use
 setParameter.
Sets the specified algorithm parameter to the specified value.
 This method supplies a general-purpose mechanism through
 which it is possible to set the various parameters of this object.
 A parameter may be any settable parameter for the algorithm, such as
 a parameter size, or a source of random bits for signature generation
 (if appropriate), or an indication of whether or not to perform
 a specific but optional computation. A uniform algorithm-specific
 naming scheme for each parameter is desirable but left unspecified
 at this time.

Parameters:
param - the string identifier of the parameter.
value - the parameter value.
Throws:
InvalidParameterException - if param is an
 invalid parameter for this signature algorithm engine,
 the parameter is already set
 and cannot be set again, a security exception occurs, and so on.
See Also:
getParameter(java.lang.String)


"
Signature,sign(),byte[],Returns the signature bytes of all the data updated.,"

sign
public final byte[] sign()
                  throws SignatureException
Returns the signature bytes of all the data updated.
 The format of the signature depends on the underlying
 signature scheme.

 A call to this method resets this signature object to the state
 it was in when previously initialized for signing via a
 call to initSign(PrivateKey). That is, the object is
 reset and available to generate another signature from the same
 signer, if desired, via new calls to update and
 sign.

Returns:
the signature bytes of the signing operation's result.
Throws:
SignatureException - if this signature object is not
 initialized properly or if this signature algorithm is unable to
 process the input data provided.


"
Signature,"sign(byte[] outbuf, int offset, int len)",int,"Finishes the signature operation and stores the resulting signature bytes in the provided buffer outbuf, starting at offset.","

sign
public final int sign(byte[] outbuf,
                      int offset,
                      int len)
               throws SignatureException
Finishes the signature operation and stores the resulting signature
 bytes in the provided buffer outbuf, starting at
 offset.
 The format of the signature depends on the underlying
 signature scheme.

 This signature object is reset to its initial state (the state it
 was in after a call to one of the initSign methods) and
 can be reused to generate further signatures with the same private key.

Parameters:
outbuf - buffer for the signature result.
offset - offset into outbuf where the signature is
 stored.
len - number of bytes within outbuf allotted for the
 signature.
Returns:
the number of bytes placed into outbuf.
Throws:
SignatureException - if this signature object is not
 initialized properly, if this signature algorithm is unable to
 process the input data provided, or if len is less
 than the actual signature length.
Since:
1.2


"
Signature,toString(),String,"Returns a string representation of this signature object, providing information that includes the state of the object and the name of the algorithm used.","

toString
public String toString()
Returns a string representation of this signature object,
 providing information that includes the state of the object
 and the name of the algorithm used.

Overrides:
toString in class Object
Returns:
a string representation of this signature object.


"
Signature,update(byte b),void,Updates the data to be signed or verified by a byte.,"

update
public final void update(byte b)
                  throws SignatureException
Updates the data to be signed or verified by a byte.

Parameters:
b - the byte to use for the update.
Throws:
SignatureException - if this signature object is not
 initialized properly.


"
Signature,update(byte[] data),void,"Updates the data to be signed or verified, using the specified array of bytes.","

update
public final void update(byte[] data)
                  throws SignatureException
Updates the data to be signed or verified, using the specified
 array of bytes.

Parameters:
data - the byte array to use for the update.
Throws:
SignatureException - if this signature object is not
 initialized properly.


"
Signature,"update(byte[] data, int off, int len)",void,"Updates the data to be signed or verified, using the specified array of bytes, starting at the specified offset.","

update
public final void update(byte[] data,
                         int off,
                         int len)
                  throws SignatureException
Updates the data to be signed or verified, using the specified
 array of bytes, starting at the specified offset.

Parameters:
data - the array of bytes.
off - the offset to start from in the array of bytes.
len - the number of bytes to use, starting at offset.
Throws:
SignatureException - if this signature object is not
 initialized properly.


"
Signature,update(ByteBuffer data),void,Updates the data to be signed or verified using the specified ByteBuffer.,"

update
public final void update(ByteBuffer data)
                  throws SignatureException
Updates the data to be signed or verified using the specified
 ByteBuffer. Processes the data.remaining() bytes
 starting at at data.position().
 Upon return, the buffer's position will be equal to its limit;
 its limit will not have changed.

Parameters:
data - the ByteBuffer
Throws:
SignatureException - if this signature object is not
 initialized properly.
Since:
1.5


"
Signature,verify(byte[] signature),boolean,Verifies the passed-in signature.,"

verify
public final boolean verify(byte[] signature)
                     throws SignatureException
Verifies the passed-in signature.

 A call to this method resets this signature object to the state
 it was in when previously initialized for verification via a
 call to initVerify(PublicKey). That is, the object is
 reset and available to verify another signature from the identity
 whose public key was specified in the call to initVerify.

Parameters:
signature - the signature bytes to be verified.
Returns:
true if the signature was verified, false if not.
Throws:
SignatureException - if this signature object is not
 initialized properly, the passed-in signature is improperly
 encoded or of the wrong type, if this signature algorithm is unable to
 process the input data provided, etc.


"
Signature,"verify(byte[] signature, int offset, int length)",boolean,"Verifies the passed-in signature in the specified array of bytes, starting at the specified offset.","

verify
public final boolean verify(byte[] signature,
                            int offset,
                            int length)
                     throws SignatureException
Verifies the passed-in signature in the specified array
 of bytes, starting at the specified offset.

 A call to this method resets this signature object to the state
 it was in when previously initialized for verification via a
 call to initVerify(PublicKey). That is, the object is
 reset and available to verify another signature from the identity
 whose public key was specified in the call to initVerify.

Parameters:
signature - the signature bytes to be verified.
offset - the offset to start from in the array of bytes.
length - the number of bytes to use, starting at offset.
Returns:
true if the signature was verified, false if not.
Throws:
SignatureException - if this signature object is not
 initialized properly, the passed-in signature is improperly
 encoded or of the wrong type, if this signature algorithm is unable to
 process the input data provided, etc.
IllegalArgumentException - if the signature
 byte array is null, or the offset or length
 is less than 0, or the sum of the offset and
 length is greater than the length of the
 signature byte array.
Since:
1.4


"
SignatureSpi,clone(),Object,Returns a clone if the implementation is cloneable.,"

clone
public Object clone()
             throws CloneNotSupportedException
Returns a clone if the implementation is cloneable.

Overrides:
clone in class Object
Returns:
a clone if the implementation is cloneable.
Throws:
CloneNotSupportedException - if this is called
 on an implementation that does not support Cloneable.
See Also:
Cloneable


"
SignatureSpi,engineGetParameter(String param),protected abstract Object,Deprecated.,"

engineGetParameter
@Deprecated
protected abstract Object engineGetParameter(String param)
                                                  throws InvalidParameterException
Deprecated. 
Gets the value of the specified algorithm parameter.
 This method supplies a general-purpose mechanism through which it
 is possible to get the various parameters of this object. A parameter
 may be any settable parameter for the algorithm, such as a parameter
 size, or  a source of random bits for signature generation (if
 appropriate), or an indication of whether or not to perform a
 specific but optional computation. A uniform algorithm-specific
 naming scheme for each parameter is desirable but left unspecified
 at this time.

Parameters:
param - the string name of the parameter.
Returns:
the object that represents the parameter value, or null if
 there is none.
Throws:
InvalidParameterException - if param is an
 invalid parameter for this engine, or another exception occurs while
 trying to get this parameter.


"
SignatureSpi,engineGetParameters(),protected AlgorithmParameters,This method is overridden by providers to return the parameters used with this signature engine.,"

engineGetParameters
protected AlgorithmParameters engineGetParameters()
This method is overridden by providers to return the parameters
 used with this signature engine.

  If this signature engine has been previously initialized with
 parameters (by calling the engineSetParameter method), this
 method returns the same parameters. If this signature engine has not been
 initialized with parameters, this method may return a combination of
 default and randomly generated parameter values if the underlying
 signature implementation supports it and can successfully generate
 them. Otherwise, null is returned.

Returns:
the parameters used with this signature engine, or null
Throws:
UnsupportedOperationException - if this method is
 not overridden by a provider
Since:
1.4


"
SignatureSpi,engineInitSign(PrivateKey privateKey),protected abstract void,Initializes this signature object with the specified private key for signing operations.,"

engineInitSign
protected abstract void engineInitSign(PrivateKey privateKey)
                                throws InvalidKeyException
Initializes this signature object with the specified
 private key for signing operations.

Parameters:
privateKey - the private key of the identity whose signature
 will be generated.
Throws:
InvalidKeyException - if the key is improperly
 encoded, parameters are missing, and so on.


"
SignatureSpi,"engineInitSign(PrivateKey privateKey, SecureRandom random)",protected void,Initializes this signature object with the specified private key and source of randomness for signing operations.,"

engineInitSign
protected void engineInitSign(PrivateKey privateKey,
                              SecureRandom random)
                       throws InvalidKeyException
Initializes this signature object with the specified
 private key and source of randomness for signing operations.

 This concrete method has been added to this previously-defined
 abstract class. (For backwards compatibility, it cannot be abstract.)

Parameters:
privateKey - the private key of the identity whose signature
 will be generated.
random - the source of randomness
Throws:
InvalidKeyException - if the key is improperly
 encoded, parameters are missing, and so on.


"
SignatureSpi,engineInitVerify(PublicKey publicKey),protected abstract void,Initializes this signature object with the specified public key for verification operations.,"

engineInitVerify
protected abstract void engineInitVerify(PublicKey publicKey)
                                  throws InvalidKeyException
Initializes this signature object with the specified
 public key for verification operations.

Parameters:
publicKey - the public key of the identity whose signature is
 going to be verified.
Throws:
InvalidKeyException - if the key is improperly
 encoded, parameters are missing, and so on.


"
SignatureSpi,engineSetParameter(AlgorithmParameterSpec params),protected void,This method is overridden by providers to initialize this signature engine with the specified parameter set.,"

engineSetParameter
protected void engineSetParameter(AlgorithmParameterSpec params)
                           throws InvalidAlgorithmParameterException
This method is overridden by providers to initialize
 this signature engine with the specified parameter set.

Parameters:
params - the parameters
Throws:
UnsupportedOperationException - if this method is not
 overridden by a provider
InvalidAlgorithmParameterException - if this method is
 overridden by a provider and the given parameters
 are inappropriate for this signature engine


"
SignatureSpi,"engineSetParameter(String param, Object value)",protected abstract void,Deprecated. Replaced by engineSetParameter.,"

engineSetParameter
@Deprecated
protected abstract void engineSetParameter(String param,
                                                       Object value)
                                                throws InvalidParameterException
Deprecated. Replaced by engineSetParameter.
Sets the specified algorithm parameter to the specified
 value. This method supplies a general-purpose mechanism through
 which it is possible to set the various parameters of this object.
 A parameter may be any settable parameter for the algorithm, such as
 a parameter size, or a source of random bits for signature generation
 (if appropriate), or an indication of whether or not to perform
 a specific but optional computation. A uniform algorithm-specific
 naming scheme for each parameter is desirable but left unspecified
 at this time.

Parameters:
param - the string identifier of the parameter.
value - the parameter value.
Throws:
InvalidParameterException - if param is an
 invalid parameter for this signature algorithm engine,
 the parameter is already set
 and cannot be set again, a security exception occurs, and so on.


"
SignatureSpi,engineSign(),protected abstract byte[],Returns the signature bytes of all the data updated so far.,"

engineSign
protected abstract byte[] engineSign()
                              throws SignatureException
Returns the signature bytes of all the data
 updated so far.
 The format of the signature depends on the underlying
 signature scheme.

Returns:
the signature bytes of the signing operation's result.
Throws:
SignatureException - if the engine is not
 initialized properly or if this signature algorithm is unable to
 process the input data provided.


"
SignatureSpi,"engineSign(byte[] outbuf, int offset, int len)",protected int,"Finishes this signature operation and stores the resulting signature bytes in the provided buffer outbuf, starting at offset.","

engineSign
protected int engineSign(byte[] outbuf,
                         int offset,
                         int len)
                  throws SignatureException
Finishes this signature operation and stores the resulting signature
 bytes in the provided buffer outbuf, starting at
 offset.
 The format of the signature depends on the underlying
 signature scheme.

 The signature implementation is reset to its initial state
 (the state it was in after a call to one of the
 engineInitSign methods)
 and can be reused to generate further signatures with the same private
 key.

 This method should be abstract, but we leave it concrete for
 binary compatibility.  Knowledgeable providers should override this
 method.

Parameters:
outbuf - buffer for the signature result.
offset - offset into outbuf where the signature is
 stored.
len - number of bytes within outbuf allotted for the
 signature.
 Both this default implementation and the SUN provider do not
 return partial digests. If the value of this parameter is less
 than the actual signature length, this method will throw a
 SignatureException.
 This parameter is ignored if its value is greater than or equal to
 the actual signature length.
Returns:
the number of bytes placed into outbuf
Throws:
SignatureException - if the engine is not
 initialized properly, if this signature algorithm is unable to
 process the input data provided, or if len is less
 than the actual signature length.
Since:
1.2


"
SignatureSpi,engineUpdate(byte b),protected abstract void,Updates the data to be signed or verified using the specified byte.,"

engineUpdate
protected abstract void engineUpdate(byte b)
                              throws SignatureException
Updates the data to be signed or verified
 using the specified byte.

Parameters:
b - the byte to use for the update.
Throws:
SignatureException - if the engine is not initialized
 properly.


"
SignatureSpi,"engineUpdate(byte[] b, int off, int len)",protected abstract void,"Updates the data to be signed or verified, using the specified array of bytes, starting at the specified offset.","

engineUpdate
protected abstract void engineUpdate(byte[] b,
                                     int off,
                                     int len)
                              throws SignatureException
Updates the data to be signed or verified, using the
 specified array of bytes, starting at the specified offset.

Parameters:
b - the array of bytes
off - the offset to start from in the array of bytes
len - the number of bytes to use, starting at offset
Throws:
SignatureException - if the engine is not initialized
 properly


"
SignatureSpi,engineUpdate(ByteBuffer input),protected void,Updates the data to be signed or verified using the specified ByteBuffer.,"

engineUpdate
protected void engineUpdate(ByteBuffer input)
Updates the data to be signed or verified using the specified
 ByteBuffer. Processes the data.remaining() bytes
 starting at at data.position().
 Upon return, the buffer's position will be equal to its limit;
 its limit will not have changed.

Parameters:
input - the ByteBuffer
Since:
1.5


"
SignatureSpi,engineVerify(byte[] sigBytes),protected abstract boolean,Verifies the passed-in signature.,"

engineVerify
protected abstract boolean engineVerify(byte[] sigBytes)
                                 throws SignatureException
Verifies the passed-in signature.

Parameters:
sigBytes - the signature bytes to be verified.
Returns:
true if the signature was verified, false if not.
Throws:
SignatureException - if the engine is not
 initialized properly, the passed-in signature is improperly
 encoded or of the wrong type, if this signature algorithm is unable to
 process the input data provided, etc.


"
SignatureSpi,"engineVerify(byte[] sigBytes, int offset, int length)",protected boolean,"Verifies the passed-in signature in the specified array of bytes, starting at the specified offset.","

engineVerify
protected boolean engineVerify(byte[] sigBytes,
                               int offset,
                               int length)
                        throws SignatureException
Verifies the passed-in signature in the specified array
 of bytes, starting at the specified offset.

  Note: Subclasses should overwrite the default implementation.

Parameters:
sigBytes - the signature bytes to be verified.
offset - the offset to start from in the array of bytes.
length - the number of bytes to use, starting at offset.
Returns:
true if the signature was verified, false if not.
Throws:
SignatureException - if the engine is not
 initialized properly, the passed-in signature is improperly
 encoded or of the wrong type, if this signature algorithm is unable to
 process the input data provided, etc.
Since:
1.4


"
SignedObject,getAlgorithm(),String,Retrieves the name of the signature algorithm.,"

getAlgorithm
public String getAlgorithm()
Retrieves the name of the signature algorithm.

Returns:
the signature algorithm name.


"
SignedObject,getObject(),Object,Retrieves the encapsulated object.,"

getObject
public Object getObject()
                 throws IOException,
                        ClassNotFoundException
Retrieves the encapsulated object.
 The encapsulated object is de-serialized before it is returned.

Returns:
the encapsulated object.
Throws:
IOException - if an error occurs during de-serialization
ClassNotFoundException - if an error occurs during
 de-serialization


"
SignedObject,getSignature(),byte[],"Retrieves the signature on the signed object, in the form of a byte array.","

getSignature
public byte[] getSignature()
Retrieves the signature on the signed object, in the form of a
 byte array.

Returns:
the signature. Returns a new array each time this
 method is called.


"
SignedObject,"verify(PublicKey verificationKey, Signature verificationEngine)",boolean,"Verifies that the signature in this SignedObject is the valid signature for the object stored inside, with the given verification key, using the designated verification engine.","

verify
public boolean verify(PublicKey verificationKey,
                      Signature verificationEngine)
               throws InvalidKeyException,
                      SignatureException
Verifies that the signature in this SignedObject is the valid
 signature for the object stored inside, with the given
 verification key, using the designated verification engine.

Parameters:
verificationKey - the public key for verification.
verificationEngine - the signature verification engine.
Returns:
true if the signature
 is valid, false otherwise
Throws:
SignatureException - if signature verification failed.
InvalidKeyException - if the verification key is invalid.


"
Signer,getPrivateKey(),PrivateKey,Deprecated.,"

getPrivateKey
public PrivateKey getPrivateKey()
Deprecated. 
Returns this signer's private key.

 First, if there is a security manager, its checkSecurityAccess
 method is called with ""getSignerPrivateKey""
 as its argument to see if it's ok to return the private key.

Returns:
this signer's private key, or null if the private key has
 not yet been set.
Throws:
SecurityException - if a security manager exists and its
 checkSecurityAccess method doesn't allow
 returning the private key.
See Also:
SecurityManager.checkSecurityAccess(java.lang.String)


"
Signer,setKeyPair(KeyPair pair),void,Deprecated.,"

setKeyPair
public final void setKeyPair(KeyPair pair)
                      throws InvalidParameterException,
                             KeyException
Deprecated. 
Sets the key pair (public key and private key) for this signer.

 First, if there is a security manager, its checkSecurityAccess
 method is called with ""setSignerKeyPair""
 as its argument to see if it's ok to set the key pair.

Parameters:
pair - an initialized key pair.
Throws:
InvalidParameterException - if the key pair is not
 properly initialized.
KeyException - if the key pair cannot be set for any
 other reason.
SecurityException - if a security manager exists and its
 checkSecurityAccess method doesn't allow
 setting the key pair.
See Also:
SecurityManager.checkSecurityAccess(java.lang.String)


"
Signer,toString(),String,Deprecated.,"

toString
public String toString()
Deprecated. 
Returns a string of information about the signer.

Specified by:
toString in interface Principal
Overrides:
toString in class Identity
Returns:
a string of information about the signer.
See Also:
SecurityManager.checkSecurityAccess(java.lang.String)


"
Timestamp,equals(Object obj),boolean,Tests for equality between the specified object and this timestamp.,"

equals
public boolean equals(Object obj)
Tests for equality between the specified object and this
 timestamp. Two timestamps are considered equal if the date and time of
 their timestamp's and their signer's certificate paths are equal.

Overrides:
equals in class Object
Parameters:
obj - the object to test for equality with this timestamp.
Returns:
true if the timestamp are considered equal, false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
Timestamp,getSignerCertPath(),CertPath,Returns the certificate path for the Timestamping Authority.,"

getSignerCertPath
public CertPath getSignerCertPath()
Returns the certificate path for the Timestamping Authority.

Returns:
The TSA's certificate path.


"
Timestamp,getTimestamp(),Date,Returns the date and time when the timestamp was generated.,"

getTimestamp
public Date getTimestamp()
Returns the date and time when the timestamp was generated.

Returns:
The timestamp's date and time.


"
Timestamp,hashCode(),int,Returns the hash code value for this timestamp.,"

hashCode
public int hashCode()
Returns the hash code value for this timestamp.
 The hash code is generated using the date and time of the timestamp
 and the TSA's certificate path.

Overrides:
hashCode in class Object
Returns:
a hash code value for this timestamp.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Timestamp,toString(),String,Returns a string describing this timestamp.,"

toString
public String toString()
Returns a string describing this timestamp.

Overrides:
toString in class Object
Returns:
A string comprising the date and time of the timestamp and
         its signer's certificate.


"
UnresolvedPermission,equals(Object obj),boolean,Checks two UnresolvedPermission objects for equality.,"

equals
public boolean equals(Object obj)
Checks two UnresolvedPermission objects for equality.
 Checks that obj is an UnresolvedPermission, and has
 the same type (class) name, permission name, actions, and
 certificates as this object.

  To determine certificate equality, this method only compares
 actual signer certificates.  Supporting certificate chains
 are not taken into consideration by this method.

Specified by:
equals in class Permission
Parameters:
obj - the object we are testing for equality with this object.
Returns:
true if obj is an UnresolvedPermission, and has the same
 type (class) name, permission name, actions, and
 certificates as this object.
See Also:
Object.hashCode(), 
HashMap


"
UnresolvedPermission,getActions(),String,"Returns the canonical string representation of the actions, which currently is the empty string """", since there are no actions for an UnresolvedPermission.","

getActions
public String getActions()
Returns the canonical string representation of the actions,
 which currently is the empty string """", since there are no actions for
 an UnresolvedPermission. That is, the actions for the
 permission that will be created when this UnresolvedPermission
 is resolved may be non-null, but an UnresolvedPermission
 itself is never considered to have any actions.

Specified by:
getActions in class Permission
Returns:
the empty string """".


"
UnresolvedPermission,getUnresolvedActions(),String,Get the actions for the underlying permission that has not been resolved.,"

getUnresolvedActions
public String getUnresolvedActions()
Get the actions for the underlying permission that
 has not been resolved.

Returns:
the actions for the underlying permission that
          has not been resolved, or null
          if there are no actions
Since:
1.5


"
UnresolvedPermission,getUnresolvedCerts(),Certificate[],Get the signer certificates (without any supporting chain) for the underlying permission that has not been resolved.,"

getUnresolvedCerts
public Certificate[] getUnresolvedCerts()
Get the signer certificates (without any supporting chain)
 for the underlying permission that has not been resolved.

Returns:
the signer certificates for the underlying permission that
 has not been resolved, or null, if there are no signer certificates.
 Returns a new array each time this method is called.
Since:
1.5


"
UnresolvedPermission,getUnresolvedName(),String,Get the target name of the underlying permission that has not been resolved.,"

getUnresolvedName
public String getUnresolvedName()
Get the target name of the underlying permission that
 has not been resolved.

Returns:
the target name of the underlying permission that
          has not been resolved, or null,
          if there is no target name
Since:
1.5


"
UnresolvedPermission,getUnresolvedType(),String,Get the type (class name) of the underlying permission that has not been resolved.,"

getUnresolvedType
public String getUnresolvedType()
Get the type (class name) of the underlying permission that
 has not been resolved.

Returns:
the type (class name) of the underlying permission that
  has not been resolved
Since:
1.5


"
UnresolvedPermission,hashCode(),int,Returns the hash code value for this object.,"

hashCode
public int hashCode()
Returns the hash code value for this object.

Specified by:
hashCode in class Permission
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
UnresolvedPermission,implies(Permission p),boolean,This method always returns false for unresolved permissions.,"

implies
public boolean implies(Permission p)
This method always returns false for unresolved permissions.
 That is, an UnresolvedPermission is never considered to
 imply another permission.

Specified by:
implies in class Permission
Parameters:
p - the permission to check against.
Returns:
false.


"
UnresolvedPermission,newPermissionCollection(),PermissionCollection,Returns a new PermissionCollection object for storing UnresolvedPermission objects.,"

newPermissionCollection
public PermissionCollection newPermissionCollection()
Returns a new PermissionCollection object for storing
 UnresolvedPermission  objects.
 

Overrides:
newPermissionCollection in class Permission
Returns:
a new PermissionCollection object suitable for
 storing UnresolvedPermissions.


"
UnresolvedPermission,toString(),String,Returns a string describing this UnresolvedPermission.,"

toString
public String toString()
Returns a string describing this UnresolvedPermission.  The convention
 is to specify the class name, the permission name, and the actions, in
 the following format: '(unresolved ""ClassName"" ""name"" ""actions"")'.

Overrides:
toString in class Permission
Returns:
information about this UnresolvedPermission.


"
URIParameter,getURI(),URI,Returns the URI.,"

getURI
public URI getURI()
Returns the URI.

Returns:
uri the URI.


"
