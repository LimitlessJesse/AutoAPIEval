Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,AccessControlContext,1,boolean checkPermission(Permission perm),False,,NULL
0,AccessControlContext,2,"void checkPermission(Permission perm, Object context)",False,,NULL
0,AccessControlContext,3,void setReadOnly(),False,,NULL
0,AccessControlContext,4,void setWriteable(),False,,NULL
0,AccessControlContext,5,boolean isReadOnly(),False,,NULL
1,AccessController,1,void checkPermission(Permission perm),True,"Determines whether the access request indicated by the specified permission should be allowed or denied, based on the current AccessControlContext and security policy.","

checkPermission
public static void checkPermission(Permission perm)
                            throws AccessControlException
Determines whether the access request indicated by the
 specified permission should be allowed or denied, based on
 the current AccessControlContext and security policy.
 This method quietly returns if the access request
 is permitted, or throws an AccessControlException otherwise. The
 getPermission method of the AccessControlException returns the
 perm Permission object instance.

Parameters:
perm - the requested permission.
Throws:
AccessControlException - if the specified permission
            is not permitted, based on the current security policy.
NullPointerException - if the specified permission
            is null and is checked based on the
            security policy currently in effect.


"
1,AccessController,2,"void checkPermission(Permission perm, Object context)",False,,NULL
1,AccessController,3,void checkSecurityAccess(String target),False,,NULL
1,AccessController,4,"void checkSecurityAccess(String target, Object context)",False,,NULL
1,AccessController,5,void checkPrivileged(PrivilegedAction<?> action),False,,NULL
1,AccessController,6,<T> T doPrivileged(PrivilegedExceptionAction<T> action),True,Performs the specified PrivilegedExceptionAction with privileges enabled.,"

doPrivileged
public static <T> T doPrivileged(PrivilegedExceptionAction<T> action)
                          throws PrivilegedActionException
Performs the specified PrivilegedExceptionAction with
 privileges enabled.  The action is performed with all of the
 permissions possessed by the caller's protection domain.

  If the action's run method throws an unchecked
 exception, it will propagate through this method.

  Note that any DomainCombiner associated with the current
 AccessControlContext will be ignored while the action is performed.

Type Parameters:
T - the type of the value returned by the
                  PrivilegedExceptionAction's run method.
Parameters:
action - the action to be performed
Returns:
the value returned by the action's run method
Throws:
PrivilegedActionException - if the specified action's
         run method threw a checked exception
NullPointerException - if the action is null
See Also:
doPrivileged(PrivilegedAction), 
doPrivileged(PrivilegedExceptionAction,AccessControlContext), 
doPrivilegedWithCombiner(PrivilegedExceptionAction), 
DomainCombiner


"
1,AccessController,7,"void doPrivileged(PrivilegedAction<?> action, AccessControlContext context)",False,,NULL
1,AccessController,8,"<T> T doPrivileged(PrivilegedExceptionAction<T> action, AccessControlContext context)",True,Performs the specified PrivilegedExceptionAction with privileges enabled and restricted by the specified AccessControlContext.,"

doPrivileged
public static <T> T doPrivileged(PrivilegedExceptionAction<T> action,
                                 AccessControlContext context)
                          throws PrivilegedActionException
Performs the specified PrivilegedExceptionAction with
 privileges enabled and restricted by the specified
 AccessControlContext.  The action is performed with the
 intersection of the permissions possessed by the caller's
 protection domain, and those possessed by the domains represented by the
 specified AccessControlContext.
 
 If the action's run method throws an unchecked
 exception, it will propagate through this method.
 
 If a security manager is installed and the specified
 AccessControlContext was not created by system code and the
 caller's ProtectionDomain has not been granted the
 ""createAccessControlContext""
 SecurityPermission, then the action is performed
 with no permissions.

Type Parameters:
T - the type of the value returned by the
                  PrivilegedExceptionAction's run method.
Parameters:
action - the action to be performed
context - an access control context
                representing the restriction to be applied to the
                caller's domain's privileges before performing
                the specified action.  If the context is
                null, then no additional restriction is applied.
Returns:
the value returned by the action's run method
Throws:
PrivilegedActionException - if the specified action's
         run method threw a checked exception
NullPointerException - if the action is null
See Also:
doPrivileged(PrivilegedAction), 
doPrivileged(PrivilegedAction,AccessControlContext)


"
1,AccessController,9,Object getStackAccessControlContext(),False,,NULL
1,AccessController,10,void setStackAccessControlContext(AccessControlContext context),False,,NULL
2,AlgorithmParameterGenerator,1,void init(SecureRandom random),False,,NULL
2,AlgorithmParameterGenerator,2,AlgorithmParameterGeneratorSpi getInstance(String algorithm),False,,NULL
2,AlgorithmParameterGenerator,3,"AlgorithmParameterGeneratorSpi getInstance(String algorithm, String provider)",False,,NULL
2,AlgorithmParameterGenerator,4,"AlgorithmParameterGeneratorSpi getInstance(String algorithm, Provider provider)",False,,NULL
2,AlgorithmParameterGenerator,5,"AlgorithmParameterGeneratorSpi getInstance(String algorithm, String provider, ClassLoader loader)",False,,NULL
2,AlgorithmParameterGenerator,6,"AlgorithmParameterGeneratorSpi getInstance(String algorithm, Provider provider, ClassLoader loader)",False,,NULL
2,AlgorithmParameterGenerator,7,"AlgorithmParameterGeneratorSpi getInstance(String algorithm, String provider, ClassLoader loader, Class<?> parameterClass)",False,,NULL
2,AlgorithmParameterGenerator,8,"AlgorithmParameterGeneratorSpi getInstance(String algorithm, Provider provider, ClassLoader loader, Class<?> parameterClass)",False,,NULL
2,AlgorithmParameterGenerator,9,"AlgorithmParameterGeneratorSpi getInstance(String algorithm, String provider, ClassLoader loader, Class<?> parameterClass, Class<?> keyClass)",False,,NULL
2,AlgorithmParameterGenerator,10,"AlgorithmParameterGeneratorSpi getInstance(String algorithm, Provider provider, ClassLoader loader, Class<?> parameterClass, Class<?> keyClass)",False,,NULL
2,AlgorithmParameterGenerator,11,"AlgorithmParameterGeneratorSpi getInstance(String algorithm, String provider, ClassLoader loader, Class<?> parameterClass, Class<?> keyClass, Class<?> secureRandomClass)",False,,NULL
2,AlgorithmParameterGenerator,12,"AlgorithmParameterGeneratorSpi getInstance(String algorithm, Provider provider, ClassLoader loader, Class<?> parameterClass, Class<?> keyClass, Class<?> secureRandomClass)",False,,NULL
2,AlgorithmParameterGenerator,13,"AlgorithmParameterGeneratorSpi getInstance(String algorithm, String provider, ClassLoader loader, Class<?> parameterClass, Class<?> keyClass, Class<?> secureRandomClass, Class<?> domainParameterClass)",False,,NULL
2,AlgorithmParameterGenerator,14,"AlgorithmParameterGeneratorSpi getInstance(String algorithm, Provider provider, ClassLoader loader, Class<?> parameterClass, Class<?> keyClass, Class<?> secureRandomClass, Class<?> domainParameterClass)",False,,NULL
3,AlgorithmParameterGeneratorSpi,1,AlgorithmParameterGeneratorSpi(),False,,NULL
3,AlgorithmParameterGeneratorSpi,2,init(SecureRandom random),False,,NULL
3,AlgorithmParameterGeneratorSpi,3,generateParameters(),False,,NULL
3,AlgorithmParameterGeneratorSpi,4,setParameter(AlgorithmParameterSpec params),False,,NULL
3,AlgorithmParameterGeneratorSpi,5,getParameter(AlgorithmParameterSpec params),False,,NULL
4,AlgorithmParameters,1,AlgorithmParameters getInstance(String algorithm),True,Returns a parameter object for the specified algorithm.,"

getInstance
public static AlgorithmParameters getInstance(String algorithm)
                                       throws NoSuchAlgorithmException
Returns a parameter object for the specified algorithm.

  This method traverses the list of registered security Providers,
 starting with the most preferred Provider.
 A new AlgorithmParameters object encapsulating the
 AlgorithmParametersSpi implementation from the first
 Provider that supports the specified algorithm is returned.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

  The returned parameter object must be initialized via a call to
 init, using an appropriate parameter specification or
 parameter encoding.

Parameters:
algorithm - the name of the algorithm requested.
 See the AlgorithmParameters section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.
Returns:
the new parameter object.
Throws:
NoSuchAlgorithmException - if no Provider supports an
          AlgorithmParametersSpi implementation for the
          specified algorithm.
See Also:
Provider


"
4,AlgorithmParameters,2,"AlgorithmParameters getInstance(String algorithm, String provider)",True,Returns a parameter object for the specified algorithm.,"

getInstance
public static AlgorithmParameters getInstance(String algorithm,
                                              String provider)
                                       throws NoSuchAlgorithmException,
                                              NoSuchProviderException
Returns a parameter object for the specified algorithm.

  A new AlgorithmParameters object encapsulating the
 AlgorithmParametersSpi implementation from the specified provider
 is returned.  The specified provider must be registered
 in the security provider list.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

 The returned parameter object must be initialized via a call to
 init, using an appropriate parameter specification or
 parameter encoding.

Parameters:
algorithm - the name of the algorithm requested.
 See the AlgorithmParameters section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.
provider - the name of the provider.
Returns:
the new parameter object.
Throws:
NoSuchAlgorithmException - if an AlgorithmParametersSpi
          implementation for the specified algorithm is not
          available from the specified provider.
NoSuchProviderException - if the specified provider is not
          registered in the security provider list.
IllegalArgumentException - if the provider name is null
          or empty.
See Also:
Provider


"
4,AlgorithmParameters,3,"AlgorithmParameters getInstance(String algorithm, Provider provider)",True,Returns a parameter object for the specified algorithm.,"

getInstance
public static AlgorithmParameters getInstance(String algorithm,
                                              Provider provider)
                                       throws NoSuchAlgorithmException
Returns a parameter object for the specified algorithm.

  A new AlgorithmParameters object encapsulating the
 AlgorithmParametersSpi implementation from the specified Provider
 object is returned.  Note that the specified Provider object
 does not have to be registered in the provider list.

 The returned parameter object must be initialized via a call to
 init, using an appropriate parameter specification or
 parameter encoding.

Parameters:
algorithm - the name of the algorithm requested.
 See the AlgorithmParameters section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.
provider - the name of the provider.
Returns:
the new parameter object.
Throws:
NoSuchAlgorithmException - if an AlgorithmParameterGeneratorSpi
          implementation for the specified algorithm is not available
          from the specified Provider object.
IllegalArgumentException - if the provider is null.
Since:
1.4
See Also:
Provider


"
4,AlgorithmParameters,4,"AlgorithmParameters getInstance(String algorithm, String provider, ClassLoader loader)",False,,NULL
4,AlgorithmParameters,5,"AlgorithmParameters getInstance(String algorithm, Provider provider, ClassLoader loader)",False,,NULL
5,AlgorithmParametersSpi,1,boolean engineInit(byte[] params),False,,NULL
5,AlgorithmParametersSpi,2,byte[] engineGetParameters(),False,,NULL
5,AlgorithmParametersSpi,3,void engineSetParameters(byte[] params),False,,NULL
5,AlgorithmParametersSpi,4,AlgorithmParameterSpec engineGetParameterSpec(Class<T> parameterSpec),False,,NULL
5,AlgorithmParametersSpi,5,"void engineInit(AlgorithmParameterSpec params, SecureRandom random)",False,,NULL
6,AllPermission,1,boolean implies(Permission p),True,"Checks if the specified permission is ""implied"" by this object.","

implies
public boolean implies(Permission p)
Checks if the specified permission is ""implied"" by
 this object. This method always returns true.

Specified by:
implies in class Permission
Parameters:
p - the permission to check against.
Returns:
return


"
6,AllPermission,2,boolean equals(Object obj),True,Checks two AllPermission objects for equality.,"

equals
public boolean equals(Object obj)
Checks two AllPermission objects for equality. Two AllPermission
 objects are always equal.

Specified by:
equals in class Permission
Parameters:
obj - the object we are testing for equality with this object.
Returns:
true if obj is an AllPermission, false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
6,AllPermission,3,String getActions(),True,Returns the canonical string representation of the actions.,"

getActions
public String getActions()
Returns the canonical string representation of the actions.

Specified by:
getActions in class Permission
Returns:
the actions.


"
6,AllPermission,4,int hashCode(),True,Returns the hash code value for this object.,"

hashCode
public int hashCode()
Returns the hash code value for this object.

Specified by:
hashCode in class Permission
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
6,AllPermission,5,String toString(),False,,NULL
7,AuthProvider,1,"boolean login(String username, String password)",False,,NULL
7,AuthProvider,2,boolean logout(),False,,NULL
7,AuthProvider,3,boolean supports(Class<?>[] clazz),False,,NULL
7,AuthProvider,4,boolean commit(),False,,NULL
7,AuthProvider,5,boolean abort(),False,,NULL
8,BasicPermission,1,BasicPermission(String name),False,,NULL
8,BasicPermission,2,String getActions(),True,"Returns the canonical string representation of the actions, which currently is the empty string """", since there are no actions for a BasicPermission.","

getActions
public String getActions()
Returns the canonical string representation of the actions,
 which currently is the empty string """", since there are no actions for
 a BasicPermission.

Specified by:
getActions in class Permission
Returns:
the empty string """".


"
8,BasicPermission,3,boolean implies(Permission p),True,"Checks if the specified permission is ""implied"" by this object.","

implies
public boolean implies(Permission p)
Checks if the specified permission is ""implied"" by
 this object.
 
 More specifically, this method returns true if:
 
 p's class is the same as this object's class, and
  p's name equals or (in the case of wildcards)
      is implied by this object's
      name. For example, ""a.b.*"" implies ""a.b.c"".
 

Specified by:
implies in class Permission
Parameters:
p - the permission to check against.
Returns:
true if the passed permission is equal to or
 implied by this permission, false otherwise.


"
8,BasicPermission,4,boolean equals(Object obj),True,Checks two BasicPermission objects for equality.,"

equals
public boolean equals(Object obj)
Checks two BasicPermission objects for equality.
 Checks that obj's class is the same as this object's class
 and has the same name as this object.
 

Specified by:
equals in class Permission
Parameters:
obj - the object we are testing for equality with this object.
Returns:
true if obj's class is the same as this object's class
  and has the same name as this BasicPermission object, false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
8,BasicPermission,5,int hashCode(),True,Returns the hash code value for this object.,"

hashCode
public int hashCode()
Returns the hash code value for this object.
 The hash code used is the hash code of the name, that is,
 getName().hashCode(), where getName is
 from the Permission superclass.

Specified by:
hashCode in class Permission
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
9,CodeSigner,1,"CodeSigner(PrivateKey key, Certificate cert)",False,,NULL
9,CodeSigner,2,PrivateKey getPrivateKey(),False,,NULL
9,CodeSigner,3,Certificate getCertificate(),False,,NULL
9,CodeSigner,4,boolean equals(Object obj),True,Tests for equality between the specified object and this code signer.,"

equals
public boolean equals(Object obj)
Tests for equality between the specified object and this
 code signer. Two code signers are considered equal if their
 signer certificate paths are equal and if their timestamps are equal,
 if present in both.

Overrides:
equals in class Object
Parameters:
obj - the object to test for equality with this object.
Returns:
true if the objects are considered equal, false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
9,CodeSigner,5,int hashCode(),True,Returns the hash code value for this code signer.,"

hashCode
public int hashCode()
Returns the hash code value for this code signer.
 The hash code is generated using the signer's certificate path and the
 timestamp, if present.

Overrides:
hashCode in class Object
Returns:
a hash code value for this code signer.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
10,CodeSource,1,CodeSource getCodeSource(),False,,NULL
10,CodeSource,2,URL getLocation(),True,Returns the location associated with this CodeSource.,"

getLocation
public final URL getLocation()
Returns the location associated with this CodeSource.

Returns:
the location (URL).


"
10,CodeSource,3,boolean equals(Object obj),True,Tests for equality between the specified object and this object.,"

equals
public boolean equals(Object obj)
Tests for equality between the specified object and this
 object. Two CodeSource objects are considered equal if their
 locations are of identical value and if their signer certificate
 chains are of identical value. It is not required that
 the certificate chains be in the same order.

Overrides:
equals in class Object
Parameters:
obj - the object to test for equality with this object.
Returns:
true if the objects are considered equal, false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
10,CodeSource,4,int hashCode(),True,Returns the hash code value for this object.,"

hashCode
public int hashCode()
Returns the hash code value for this object.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
10,CodeSource,5,String toString(),True,"Returns a string describing this CodeSource, telling its URL and certificates.","

toString
public String toString()
Returns a string describing this CodeSource, telling its
 URL and certificates.

Overrides:
toString in class Object
Returns:
information about this CodeSource.


"
11,DigestInputStream,1,"DigestInputStream(InputStream in, MessageDigest md)",False,,NULL
11,DigestInputStream,2,int read() throws IOException,True,"Reads a byte, and updates the message digest (if the digest function is on).","

read
public int read()
         throws IOException
Reads a byte, and updates the message digest (if the digest
 function is on).  That is, this method reads a byte from the
 input stream, blocking until the byte is actually read. If the
 digest function is on (see on), this method
 will then call update on the message digest associated
 with this stream, passing it the byte read.

Overrides:
read in class FilterInputStream
Returns:
the byte read.
Throws:
IOException - if an I/O error occurs.
See Also:
MessageDigest.update(byte)


"
11,DigestInputStream,3,int read(byte[] b) throws IOException,False,,NULL
11,DigestInputStream,4,"int read(byte[] b, int off, int len) throws IOException",True,"Reads into a byte array, and updates the message digest (if the digest function is on).","

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads into a byte array, and updates the message digest (if the
 digest function is on).  That is, this method reads up to
 len bytes from the input stream into the array
 b, starting at offset off. This method
 blocks until the data is actually
 read. If the digest function is on (see
 on), this method will then call update
 on the message digest associated with this stream, passing it
 the data.

Overrides:
read in class FilterInputStream
Parameters:
b - the array into which the data is read.
off - the starting offset into b of where the
 data should be placed.
len - the maximum number of bytes to be read from the input
 stream into b, starting at offset off.
Returns:
the actual number of bytes read. This is less than
 len if the end of the stream is reached prior to
 reading len bytes. -1 is returned if no bytes were
 read because the end of the stream had already been reached when
 the call was made.
Throws:
IOException - if an I/O error occurs.
See Also:
MessageDigest.update(byte[], int, int)


"
11,DigestInputStream,5,void close() throws IOException,False,,NULL
12,DigestOutputStream,1,"DigestOutputStream(OutputStream out, MessageDigest digest)",False,,NULL
12,DigestOutputStream,2,void write(int b) throws IOException,True,"Updates the message digest (if the digest function is on) using the specified byte, and in any case writes the byte to the output stream.","

write
public void write(int b)
           throws IOException
Updates the message digest (if the digest function is on) using
 the specified byte, and in any case writes the byte
 to the output stream. That is, if the digest function is on
 (see on), this method calls
 update on the message digest associated with this
 stream, passing it the byte b. This method then
 writes the byte to the output stream, blocking until the byte
 is actually written.

Overrides:
write in class FilterOutputStream
Parameters:
b - the byte to be used for updating and writing to the
 output stream.
Throws:
IOException - if an I/O error occurs.
See Also:
MessageDigest.update(byte)


"
12,DigestOutputStream,3,void write(byte[] b) throws IOException,False,,NULL
12,DigestOutputStream,4,"void write(byte[] b, int off, int len) throws IOException",True,"Updates the message digest (if the digest function is on) using the specified subarray, and in any case writes the subarray to the output stream.","

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Updates the message digest (if the digest function is on) using
 the specified subarray, and in any case writes the subarray to
 the output stream. That is, if the digest function is on (see
 on), this method calls update
 on the message digest associated with this stream, passing it
 the subarray specifications. This method then writes the subarray
 bytes to the output stream, blocking until the bytes are actually
 written.

Overrides:
write in class FilterOutputStream
Parameters:
b - the array containing the subarray to be used for updating
 and writing to the output stream.
off - the offset into b of the first byte to
 be updated and written.
len - the number of bytes of data to be updated and written
 from b, starting at offset off.
Throws:
IOException - if an I/O error occurs.
See Also:
MessageDigest.update(byte[], int, int)


"
12,DigestOutputStream,5,void flush() throws IOException,False,,NULL
13,DomainLoadStoreParameter,1,DomainLoadStoreParameter(),False,,NULL
13,DomainLoadStoreParameter,2,getProtectionParameter(),False,,NULL
13,DomainLoadStoreParameter,3,getProtectionParameter(String type),False,,NULL
13,DomainLoadStoreParameter,4,getProtectionParameters(),False,,NULL
13,DomainLoadStoreParameter,5,getProtectionParameters(String type),False,,NULL
13,DomainLoadStoreParameter,6,getStore(),False,,NULL
13,DomainLoadStoreParameter,7,getStore(String type),False,,NULL
13,DomainLoadStoreParameter,8,getStoreParameters(),False,,NULL
13,DomainLoadStoreParameter,9,getStoreParameters(String type),False,,NULL
13,DomainLoadStoreParameter,10,getTrustAnchors(),False,,NULL
13,DomainLoadStoreParameter,11,getTrustAnchors(String type),False,,NULL
13,DomainLoadStoreParameter,12,getTrustParameters(),False,,NULL
13,DomainLoadStoreParameter,13,getTrustParameters(String type),False,,NULL
13,DomainLoadStoreParameter,14,getTrustStores(),False,,NULL
13,DomainLoadStoreParameter,15,getTrustStores(String type),False,,NULL
13,DomainLoadStoreParameter,16,getTrustStoresParameters(),False,,NULL
13,DomainLoadStoreParameter,17,getTrustStoresParameters(String type),False,,NULL
13,DomainLoadStoreParameter,18,getKeyStores(),False,,NULL
13,DomainLoadStoreParameter,19,getKeyStores(String type),False,,NULL
13,DomainLoadStoreParameter,20,getKeyStoresParameters(),False,,NULL
13,DomainLoadStoreParameter,21,getKeyStoresParameters(String type),False,,NULL
13,DomainLoadStoreParameter,22,getKeyManagerFactoryAlgorithm(),False,,NULL
13,DomainLoadStoreParameter,23,getKeyManagerFactoryAlgorithm(String type),False,,NULL
13,DomainLoadStoreParameter,24,getKeyManagerFactoryParameters(),False,,NULL
13,DomainLoadStoreParameter,25,getKeyManagerFactoryParameters(String type),False,,NULL
13,DomainLoadStoreParameter,26,getKeyManagerFactory(),False,,NULL
13,DomainLoadStoreParameter,27,getKeyManagerFactory(String type),False,,NULL
13,DomainLoadStoreParameter,28,getKeyManagerFactoryParameters(),False,,NULL
13,DomainLoadStoreParameter,29,getKeyManagerFactoryParameters(String type),False,,NULL
13,DomainLoadStoreParameter,30,getKeyManagerFactory(),False,,NULL
13,DomainLoadStoreParameter,31,getKeyManagerFactory(String type),False,,NULL
13,DomainLoadStoreParameter,32,getKeyManagerFactoryParameters(),False,,NULL
13,DomainLoadStoreParameter,33,getKeyManagerFactoryParameters(String type),False,,NULL
13,DomainLoadStoreParameter,34,getKeyManagerFactory(),False,,NULL
13,DomainLoadStoreParameter,35,getKeyManagerFactory(String type),False,,NULL
13,DomainLoadStoreParameter,36,getKeyManagerFactoryParameters(),False,,NULL
13,DomainLoadStoreParameter,37,getKeyManagerFactoryParameters(String type),False,,NULL
13,DomainLoadStoreParameter,38,getKeyManagerFactory(),False,,NULL
13,DomainLoadStoreParameter,39,getKeyManagerFactory(String type),False,,NULL
13,DomainLoadStoreParameter,40,getKeyManagerFactoryParameters(),False,,NULL
13,DomainLoadStoreParameter,41,getKeyManagerFactoryParameters(String type),False,,NULL
13,DomainLoadStoreParameter,42,getKeyManagerFactory(),False,,NULL
13,DomainLoadStoreParameter,43,getKeyManagerFactory(String type),False,,NULL
13,DomainLoadStoreParameter,44,getKeyManagerFactoryParameters(),False,,NULL
13,DomainLoadStoreParameter,45,getKeyManagerFactoryParameters(String type),False,,NULL
14,GuardedObject,1,GuardedObject(Object guard),False,,NULL
14,GuardedObject,2,Object getObject(),True,"Retrieves the guarded object, or throws an exception if access to the guarded object is denied by the guard.","

getObject
public Object getObject()
                 throws SecurityException
Retrieves the guarded object, or throws an exception if access
 to the guarded object is denied by the guard.

Returns:
the guarded object.
Throws:
SecurityException - if access to the guarded object is
 denied.


"
14,GuardedObject,3,void setObject(Object obj),False,,NULL
14,GuardedObject,4,Object getGuard(),False,,NULL
14,GuardedObject,5,boolean equals(Object obj),False,,NULL
15,Identity,1,Identity.getPrincipals(),False,,NULL
15,Identity,2,Identity.getSubject(),False,,NULL
15,Identity,3,Identity.impersonate(Subject subject),False,,NULL
15,Identity,4,"Identity.runAs(Subject subject, Runnable r)",False,,NULL
15,Identity,5,"Identity.runAsGroup(Group group, Runnable r)",False,,NULL
15,Identity,6,"Identity.runAsUser(User user, Runnable r)",False,,NULL
15,Identity,7,Identity.setPrincipals(Set<Principal> principals),False,,NULL
15,Identity,8,Identity.setSubject(Subject subject),False,,NULL
15,Identity,9,Identity.getPrivilegedAction(PrivilegedAction<T> action),False,,NULL
15,Identity,10,Identity.doPrivileged(PrivilegedExceptionAction<T> action),False,,NULL
15,Identity,11,"Identity.doAs(Subject subject, PrivilegedExceptionAction<T> action)",False,,NULL
15,Identity,12,"Identity.doAs(Subject subject, Runnable action)",False,,NULL
15,Identity,13,"Identity.doAs(Subject subject, Callable<T> action)",False,,NULL
15,Identity,14,"Identity.doAs(Subject subject, PrivilegedExceptionRunnable action)",False,,NULL
15,Identity,15,"Identity.doAs(Subject subject, PrivilegedExceptionCallable<T> action)",False,,NULL
15,Identity,16,"Identity.doAs(Subject subject, PrivilegedVoidAction action)",False,,NULL
15,Identity,17,"Identity.doAs(Subject subject, PrivilegedVoidAction action)",False,,NULL
15,Identity,18,"Identity.doAs(Subject subject, PrivilegedVoidAction action)",False,,NULL
15,Identity,19,"Identity.doAs(Subject subject, PrivilegedVoidAction action)",False,,NULL
15,Identity,20,"Identity.doAs(Subject subject, PrivilegedVoidAction action)",False,,NULL
16,IdentityScope,1,boolean add(E e),False,,NULL
16,IdentityScope,2,boolean addAll(Collection<? extends E> c),False,,NULL
16,IdentityScope,3,void clear(),False,,NULL
16,IdentityScope,4,boolean contains(Object o),False,,NULL
16,IdentityScope,5,boolean containsAll(Collection<?> c),False,,NULL
17,KeyFactory,1,KeyFactory getInstance(String algorithm),True,Returns a KeyFactory object that converts public/private keys of the specified algorithm.,"

getInstance
public static KeyFactory getInstance(String algorithm)
                              throws NoSuchAlgorithmException
Returns a KeyFactory object that converts
 public/private keys of the specified algorithm.

  This method traverses the list of registered security Providers,
 starting with the most preferred Provider.
 A new KeyFactory object encapsulating the
 KeyFactorySpi implementation from the first
 Provider that supports the specified algorithm is returned.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
algorithm - the name of the requested key algorithm.
 See the KeyFactory section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.
Returns:
the new KeyFactory object.
Throws:
NoSuchAlgorithmException - if no Provider supports a
          KeyFactorySpi implementation for the
          specified algorithm.
See Also:
Provider


"
17,KeyFactory,2,"KeyFactory getInstance(String algorithm, String provider)",True,Returns a KeyFactory object that converts public/private keys of the specified algorithm.,"

getInstance
public static KeyFactory getInstance(String algorithm,
                                     String provider)
                              throws NoSuchAlgorithmException,
                                     NoSuchProviderException
Returns a KeyFactory object that converts
 public/private keys of the specified algorithm.

  A new KeyFactory object encapsulating the
 KeyFactorySpi implementation from the specified provider
 is returned.  The specified provider must be registered
 in the security provider list.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
algorithm - the name of the requested key algorithm.
 See the KeyFactory section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.
provider - the name of the provider.
Returns:
the new KeyFactory object.
Throws:
NoSuchAlgorithmException - if a KeyFactorySpi
          implementation for the specified algorithm is not
          available from the specified provider.
NoSuchProviderException - if the specified provider is not
          registered in the security provider list.
IllegalArgumentException - if the provider name is null
          or empty.
See Also:
Provider


"
17,KeyFactory,3,"KeyFactory getInstance(String algorithm, Provider provider)",True,Returns a KeyFactory object that converts public/private keys of the specified algorithm.,"

getInstance
public static KeyFactory getInstance(String algorithm,
                                     Provider provider)
                              throws NoSuchAlgorithmException
Returns a KeyFactory object that converts
 public/private keys of the specified algorithm.

  A new KeyFactory object encapsulating the
 KeyFactorySpi implementation from the specified Provider
 object is returned.  Note that the specified Provider object
 does not have to be registered in the provider list.

Parameters:
algorithm - the name of the requested key algorithm.
 See the KeyFactory section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.
provider - the provider.
Returns:
the new KeyFactory object.
Throws:
NoSuchAlgorithmException - if a KeyFactorySpi
          implementation for the specified algorithm is not available
          from the specified Provider object.
IllegalArgumentException - if the specified provider is null.
Since:
1.4
See Also:
Provider


"
17,KeyFactory,4,Key generatePublic(KeySpec keySpec),False,,NULL
17,KeyFactory,5,Key generatePrivate(KeySpec keySpec),False,,NULL
17,KeyFactory,6,"KeySpec getKeySpec(Key key, Class<? extends KeySpec> keySpec)",False,,NULL
17,KeyFactory,7,"KeySpec getKeySpec(Key key, String keySpec)",False,,NULL
17,KeyFactory,8,"KeySpec getKeySpec(Key key, Class<? extends KeySpec> keySpec, Provider provider)",False,,NULL
17,KeyFactory,9,"KeySpec getKeySpec(Key key, String keySpec, Provider provider)",False,,NULL
17,KeyFactory,10,"KeySpec getKeySpec(Key key, Class<? extends KeySpec> keySpec, String provider)",False,,NULL
17,KeyFactory,11,"KeySpec getKeySpec(Key key, String keySpec, String provider)",False,,NULL
18,KeyFactorySpi,1,KeyFactorySpi(),False,,NULL
18,KeyFactorySpi,2,KeyFactorySpi(Provider provider),False,,NULL
18,KeyFactorySpi,3,"KeyFactorySpi(Provider provider, AlgorithmParameterGeneratorSpi paramGenSpi)",False,,NULL
18,KeyFactorySpi,4,"KeyFactorySpi(Provider provider, AlgorithmParameterGeneratorSpi paramGenSpi, KeySpecSpi keySpecSpi)",False,,NULL
18,KeyFactorySpi,5,"KeyFactorySpi(Provider provider, AlgorithmParameterGeneratorSpi paramGenSpi, KeySpecSpi keySpecSpi, KeyFactorySpi keyFactorySpi)",False,,NULL
18,KeyFactorySpi,6,"KeyFactorySpi(Provider provider, AlgorithmParameterGeneratorSpi paramGenSpi, KeySpecSpi keySpecSpi, KeyFactorySpi keyFactorySpi, KeyFactorySpi keyFactorySpi2)",False,,NULL
18,KeyFactorySpi,7,"KeyFactorySpi(Provider provider, AlgorithmParameterGeneratorSpi paramGenSpi, KeySpecSpi keySpecSpi, KeyFactorySpi keyFactorySpi, KeyFactorySpi keyFactorySpi2, KeyFactorySpi keyFactorySpi3)",False,,NULL
18,KeyFactorySpi,8,"KeyFactorySpi(Provider provider, AlgorithmParameterGeneratorSpi paramGenSpi, KeySpecSpi keySpecSpi, KeyFactorySpi keyFactorySpi, KeyFactorySpi keyFactorySpi2, KeyFactorySpi keyFactorySpi3, KeyFactorySpi keyFactorySpi4)",False,,NULL
18,KeyFactorySpi,9,"KeyFactorySpi(Provider provider, AlgorithmParameterGeneratorSpi paramGenSpi, KeySpecSpi keySpecSpi, KeyFactorySpi keyFactorySpi, KeyFactorySpi keyFactorySpi2, KeyFactorySpi keyFactorySpi3, KeyFactorySpi keyFactorySpi4, KeyFactorySpi keyFactorySpi5)",False,,NULL
18,KeyFactorySpi,10,"KeyFactorySpi(Provider provider, AlgorithmParameterGeneratorSpi paramGenSpi, KeySpecSpi keySpecSpi, KeyFactorySpi keyFactorySpi, KeyFactorySpi keyFactorySpi2, KeyFactorySpi keyFactorySpi3, KeyFactorySpi keyFactorySpi4, KeyFactorySpi keyFactorySpi5, KeyFactorySpi keyFactorySpi6)",False,,NULL
18,KeyFactorySpi,11,"KeyFactorySpi(Provider provider, AlgorithmParameterGeneratorSpi paramGenSpi, KeySpecSpi keySpecSpi, KeyFactorySpi keyFactorySpi, KeyFactorySpi keyFactorySpi2, KeyFactorySpi keyFactorySpi3, KeyFactorySpi keyFactorySpi4, KeyFactorySpi keyFactorySpi5, KeyFactorySpi keyFactorySpi6, KeyFactorySpi keyFactorySpi7)",False,,NULL
18,KeyFactorySpi,12,"KeyFactorySpi(Provider provider, AlgorithmParameterGeneratorSpi paramGenSpi, KeySpecSpi keySpecSpi, KeyFactorySpi keyFactorySpi, KeyFactorySpi keyFactorySpi2, KeyFactorySpi keyFactorySpi3, KeyFactorySpi keyFactorySpi4, KeyFactorySpi keyFactorySpi5, KeyFactorySpi keyFactorySpi6, KeyFactorySpi keyFactorySpi7, KeyFactorySpi keyFactorySpi8)",False,,NULL
18,KeyFactorySpi,13,"KeyFactorySpi(Provider provider, AlgorithmParameterGeneratorSpi paramGenSpi, KeySpecSpi keySpecSpi, KeyFactorySpi keyFactorySpi, KeyFactorySpi keyFactorySpi2, KeyFactorySpi keyFactorySpi3, KeyFactorySpi keyFactorySpi4, KeyFactorySpi keyFactorySpi5, KeyFactorySpi keyFactorySpi6, KeyFactorySpi keyFactorySpi7, KeyFactorySpi keyFactorySpi8, KeyFactorySpi keyFactorySpi9)",False,,NULL
19,KeyPair,1,java.security.KeyPairGenerator,False,,NULL
19,KeyPair,2,java.security.KeyPair,False,,NULL
19,KeyPair,3,java.security.KeyFactory,False,,NULL
19,KeyPair,4,java.security.spec.KeySpec,False,,NULL
19,KeyPair,5,java.security.spec.RSAPrivateKeySpec,False,,NULL
19,KeyPair,6,java.security.spec.RSAPublicKeySpec,False,,NULL
19,KeyPair,7,java.security.spec.X509EncodedKeySpec,False,,NULL
19,KeyPair,8,java.security.spec.PKCS8EncodedKeySpec,False,,NULL
19,KeyPair,9,java.security.spec.EncodedKeySpec,False,,NULL
19,KeyPair,10,java.security.spec.RSAPrivateCrtKeySpec,False,,NULL
20,KeyPairGenerator,1,KeyPairGenerator(),False,,NULL
20,KeyPairGenerator,2,initialize(int keySize),False,,NULL
20,KeyPairGenerator,3,generateKeyPair(),False,,NULL
20,KeyPairGenerator,4,getAlgorithm(),False,,NULL
20,KeyPairGenerator,5,getProvider(),False,,NULL
21,KeyPairGeneratorSpi,1,KeyPairGeneratorSpi(),False,,NULL
21,KeyPairGeneratorSpi,2,"void initialize(int keySize, SecureRandom random)",True,"Initializes the key pair generator for a certain keysize, using the default parameter set.","

initialize
public abstract void initialize(int keysize,
                                SecureRandom random)
Initializes the key pair generator for a certain keysize, using
 the default parameter set.

Parameters:
keysize - the keysize. This is an
 algorithm-specific metric, such as modulus length, specified in
 number of bits.
random - the source of randomness for this generator.
Throws:
InvalidParameterException - if the keysize is not
 supported by this KeyPairGeneratorSpi object.


"
21,KeyPairGeneratorSpi,3,KeyPair generateKeyPair(),True,Generates a key pair.,"

generateKeyPair
public abstract KeyPair generateKeyPair()
Generates a key pair. Unless an initialization method is called
 using a KeyPairGenerator interface, algorithm-specific defaults
 will be used. This will generate a new key pair every time it
 is called.

Returns:
the newly generated KeyPair


"
21,KeyPairGeneratorSpi,4,"void engineInitialize(AlgorithmParameterSpec params, SecureRandom random)",False,,NULL
21,KeyPairGeneratorSpi,5,AlgorithmParameterSpec engineGetParameters(),False,,NULL
22,KeyRep,1,KeyRep.getAlgorithm(),False,,NULL
22,KeyRep,2,KeyRep.getFormat(),False,,NULL
22,KeyRep,3,KeyRep.getEncoded(),False,,NULL
22,KeyRep,4,KeyRep.getType(),False,,NULL
22,KeyRep,5,KeyRep.getParams(),False,,NULL
23,KeyStore,1,KeyStore.getInstance(String algorithm),False,,NULL
23,KeyStore,2,"KeyStore.load(InputStream in, char[] password)",False,,NULL
23,KeyStore,3,"KeyStore.store(OutputStream out, char[] password)",False,,NULL
23,KeyStore,4,"KeyStore.setKeyEntry(String alias, PrivateKey key, char[] password, Certificate[] chain)",False,,NULL
23,KeyStore,5,KeyStore.getCertificate(String alias),False,,NULL
24,KeyStore.Builder,1,KeyStore.Builder.newInstance(String provider),False,,NULL
24,KeyStore.Builder,2,"KeyStore.Builder setKeyEntry(String alias, PrivateKey privateKey, char[] password, Certificate[] certificateChain)",False,,NULL
24,KeyStore.Builder,3,"KeyStore.Builder setKeyEntry(String alias, PrivateKey privateKey, char[] password, Certificate[] certificateChain, KeyStore.ProtectionParameter protectionParameter)",False,,NULL
24,KeyStore.Builder,4,"KeyStore.Builder setKeyEntry(String alias, PrivateKey privateKey, char[] password, Certificate[] certificateChain, KeyStore.ProtectionParameter protectionParameter, KeyStore.CallbackHandler callbackHandler)",False,,NULL
24,KeyStore.Builder,5,"KeyStore.Builder setKeyEntry(String alias, PrivateKey privateKey, char[] password, Certificate[] certificateChain, KeyStore.ProtectionParameter protectionParameter, KeyStore.CallbackHandler callbackHandler, Map<String, String> attributes)",False,,NULL
25,KeyStore.CallbackHandlerProtection,1,boolean isKeyEntry(String alias),False,,NULL
25,KeyStore.CallbackHandlerProtection,2,ProtectionParameter getProtectionParameter(String alias),False,,NULL
25,KeyStore.CallbackHandlerProtection,3,Set<String> aliases(),False,,NULL
25,KeyStore.CallbackHandlerProtection,4,Certificate[] getCertificateChain(String alias),False,,NULL
25,KeyStore.CallbackHandlerProtection,5,PrivateKey getPrivateKey(String alias),False,,NULL
25,KeyStore.CallbackHandlerProtection,6,Certificate getCertificate(String alias),False,,NULL
25,KeyStore.CallbackHandlerProtection,7,SecretKey getSecretKey(String alias),False,,NULL
25,KeyStore.CallbackHandlerProtection,8,"Key getKey(String alias, char[] password)",False,,NULL
25,KeyStore.CallbackHandlerProtection,9,KeyStore.ProtectionParameter getProtectionParameter(String alias),False,,NULL
25,KeyStore.CallbackHandlerProtection,10,Set<String> aliases(),False,,NULL
25,KeyStore.CallbackHandlerProtection,11,Certificate[] getCertificateChain(String alias),False,,NULL
25,KeyStore.CallbackHandlerProtection,12,PrivateKey getPrivateKey(String alias),False,,NULL
25,KeyStore.CallbackHandlerProtection,13,Certificate getCertificate(String alias),False,,NULL
25,KeyStore.CallbackHandlerProtection,14,SecretKey getSecretKey(String alias),False,,NULL
25,KeyStore.CallbackHandlerProtection,15,"Key getKey(String alias, char[] password)",False,,NULL
25,KeyStore.CallbackHandlerProtection,16,KeyStore.ProtectionParameter getProtectionParameter(String alias),False,,NULL
25,KeyStore.CallbackHandlerProtection,17,Set<String> aliases(),False,,NULL
25,KeyStore.CallbackHandlerProtection,18,Certificate[] getCertificateChain(String alias),False,,NULL
25,KeyStore.CallbackHandlerProtection,19,PrivateKey getPrivateKey(String alias),False,,NULL
25,KeyStore.CallbackHandlerProtection,20,Certificate getCertificate(String alias),False,,NULL
25,KeyStore.CallbackHandlerProtection,21,SecretKey getSecretKey(String alias),False,,NULL
25,KeyStore.CallbackHandlerProtection,22,"Key getKey(String alias, char[] password)",False,,NULL
25,KeyStore.CallbackHandlerProtection,23,KeyStore.ProtectionParameter getProtectionParameter(String alias),False,,NULL
25,KeyStore.CallbackHandlerProtection,24,Set<String> aliases(),False,,NULL
25,KeyStore.CallbackHandlerProtection,25,Certificate[] getCertificateChain(String alias),False,,NULL
26,KeyStore.PasswordProtection,1,KeyStore.PasswordProtection(char[] password),False,,NULL
26,KeyStore.PasswordProtection,2,"KeyStore.PasswordProtection(char[] password, char[] s)",False,,NULL
26,KeyStore.PasswordProtection,3,KeyStore.getProtectionParameter(String alias),False,,NULL
26,KeyStore.PasswordProtection,4,"KeyStore.setKeyEntry(String alias, Key key, char[] password, Certificate[] chain)",False,,NULL
26,KeyStore.PasswordProtection,5,"KeyStore.setKeyEntry(String alias, Key key, ProtectionParameter protParam, Certificate[] chain)",False,,NULL
27,KeyStore.PrivateKeyEntry,1,"PrivateKeyEntry(PrivateKey privateKey, Certificate[] certificateChain)",False,,NULL
27,KeyStore.PrivateKeyEntry,2,PrivateKey getPrivateKey(),True,Gets the PrivateKey from this entry.,"

getPrivateKey
public PrivateKey getPrivateKey()
Gets the PrivateKey from this entry.

Returns:
the PrivateKey from this entry


"
27,KeyStore.PrivateKeyEntry,3,Certificate[] getCertificateChain(),True,Gets the Certificate chain from this entry.,"

getCertificateChain
public Certificate[] getCertificateChain()
Gets the Certificate chain from this entry.

  The stored chain is cloned before being returned.

Returns:
an array of Certificates corresponding
      to the certificate chain for the public key.
      If the certificates are of type X.509,
      the runtime type of the returned array is
      X509Certificate[].


"
27,KeyStore.PrivateKeyEntry,4,boolean equals(Object obj),False,,NULL
27,KeyStore.PrivateKeyEntry,5,int hashCode(),False,,NULL
28,KeyStore.SecretKeyEntry,1,boolean contains(Object o),False,,NULL
28,KeyStore.SecretKeyEntry,2,boolean remove(Object o),False,,NULL
28,KeyStore.SecretKeyEntry,3,boolean addAll(Collection<? extends E> c),False,,NULL
28,KeyStore.SecretKeyEntry,4,boolean removeAll(Collection<?> c),False,,NULL
28,KeyStore.SecretKeyEntry,5,boolean retainAll(Collection<?> c),False,,NULL
29,KeyStore.TrustedCertificateEntry,1,TrustedCertificateEntry(Certificate cert),False,,NULL
29,KeyStore.TrustedCertificateEntry,2,Certificate getCertificate(),False,,NULL
29,KeyStore.TrustedCertificateEntry,3,void setCertificate(Certificate cert),False,,NULL
29,KeyStore.TrustedCertificateEntry,4,boolean equals(Object obj),False,,NULL
29,KeyStore.TrustedCertificateEntry,5,int hashCode(),False,,NULL
30,KeyStoreSpi,1,KeyStoreSpi(),False,,NULL
30,KeyStoreSpi,2,"void engineLoad(InputStream stream, char[] password)",True,Loads the keystore from the given input stream.,"

engineLoad
public abstract void engineLoad(InputStream stream,
                                char[] password)
                         throws IOException,
                                NoSuchAlgorithmException,
                                CertificateException
Loads the keystore from the given input stream.

 A password may be given to unlock the keystore
 (e.g. the keystore resides on a hardware token device),
 or to check the integrity of the keystore data.
 If a password is not given for integrity checking,
 then integrity checking is not performed.

Parameters:
stream - the input stream from which the keystore is loaded,
 or null
password - the password used to check the integrity of
 the keystore, the password used to unlock the keystore,
 or null
Throws:
IOException - if there is an I/O or format problem with the
 keystore data, if a password is required but not given,
 or if the given password was incorrect. If the error is due to a
 wrong password, the cause of the
 IOException should be an
 UnrecoverableKeyException
NoSuchAlgorithmException - if the algorithm used to check
 the integrity of the keystore cannot be found
CertificateException - if any of the certificates in the
 keystore could not be loaded


"
30,KeyStoreSpi,3,"void engineSetKeyEntry(String alias, Key key, char[] password, Certificate[] chain)",True,"Assigns the given key to the given alias, protecting it with the given password.","

engineSetKeyEntry
public abstract void engineSetKeyEntry(String alias,
                                       Key key,
                                       char[] password,
                                       Certificate[] chain)
                                throws KeyStoreException
Assigns the given key to the given alias, protecting it with the given
 password.

 If the given key is of type java.security.PrivateKey,
 it must be accompanied by a certificate chain certifying the
 corresponding public key.

 If the given alias already exists, the keystore information
 associated with it is overridden by the given key (and possibly
 certificate chain).

Parameters:
alias - the alias name
key - the key to be associated with the alias
password - the password to protect the key
chain - the certificate chain for the corresponding public
 key (only required if the given key is of type
 java.security.PrivateKey).
Throws:
KeyStoreException - if the given key cannot be protected, or
 this operation fails for some other reason


"
30,KeyStoreSpi,4,void engineDeleteEntry(String alias),True,Deletes the entry identified by the given alias from this keystore.,"

engineDeleteEntry
public abstract void engineDeleteEntry(String alias)
                                throws KeyStoreException
Deletes the entry identified by the given alias from this keystore.

Parameters:
alias - the alias name
Throws:
KeyStoreException - if the entry cannot be removed.


"
30,KeyStoreSpi,5,Certificate[] engineGetCertificateChain(String alias),True,Returns the certificate chain associated with the given alias.,"

engineGetCertificateChain
public abstract Certificate[] engineGetCertificateChain(String alias)
Returns the certificate chain associated with the given alias.
 The certificate chain must have been associated with the alias
 by a call to setKeyEntry,
 or by a call to setEntry with a
 PrivateKeyEntry.

Parameters:
alias - the alias name
Returns:
the certificate chain (ordered with the user's certificate first
 and the root certificate authority last), or null if the given alias
 does not exist or does not contain a certificate chain


"
31,MessageDigest,1,MessageDigest getInstance(String algorithm),True,Returns a MessageDigest object that implements the specified digest algorithm.,"

getInstance
public static MessageDigest getInstance(String algorithm)
                                 throws NoSuchAlgorithmException
Returns a MessageDigest object that implements the specified digest
 algorithm.

  This method traverses the list of registered security Providers,
 starting with the most preferred Provider.
 A new MessageDigest object encapsulating the
 MessageDigestSpi implementation from the first
 Provider that supports the specified algorithm is returned.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
algorithm - the name of the algorithm requested.
 See the MessageDigest section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.
Returns:
a Message Digest object that implements the specified algorithm.
Throws:
NoSuchAlgorithmException - if no Provider supports a
          MessageDigestSpi implementation for the
          specified algorithm.
See Also:
Provider


"
31,MessageDigest,2,void update(byte[] input),True,Updates the digest using the specified array of bytes.,"

update
public void update(byte[] input)
Updates the digest using the specified array of bytes.

Parameters:
input - the array of bytes.


"
31,MessageDigest,3,byte[] digest(),True,Completes the hash computation by performing final operations such as padding.,"

digest
public byte[] digest()
Completes the hash computation by performing final operations
 such as padding. The digest is reset after this call is made.

Returns:
the array of bytes for the resulting hash value.


"
31,MessageDigest,4,void reset(),True,Resets the digest for further use.,"

reset
public void reset()
Resets the digest for further use.

"
31,MessageDigest,5,int getDigestLength(),True,"Returns the length of the digest in bytes, or 0 if this operation is not supported by the provider and the implementation is not cloneable.","

getDigestLength
public final int getDigestLength()
Returns the length of the digest in bytes, or 0 if this operation is
 not supported by the provider and the implementation is not cloneable.

Returns:
the digest length in bytes, or 0 if this operation is not
 supported by the provider and the implementation is not cloneable.
Since:
1.2


"
32,MessageDigestSpi,1,MessageDigestSpi(),False,,NULL
32,MessageDigestSpi,2,void engineUpdate(byte input),True,Updates the digest using the specified byte.,"

engineUpdate
protected abstract void engineUpdate(byte input)
Updates the digest using the specified byte.

Parameters:
input - the byte to use for the update.


"
32,MessageDigestSpi,3,"void engineUpdate(byte[] input, int offset, int len)",True,"Updates the digest using the specified array of bytes, starting at the specified offset.","

engineUpdate
protected abstract void engineUpdate(byte[] input,
                                     int offset,
                                     int len)
Updates the digest using the specified array of bytes,
 starting at the specified offset.

Parameters:
input - the array of bytes to use for the update.
offset - the offset to start from in the array of bytes.
len - the number of bytes to use, starting at
 offset.


"
32,MessageDigestSpi,4,byte[] engineDigest(),True,Completes the hash computation by performing final operations such as padding.,"

engineDigest
protected abstract byte[] engineDigest()
Completes the hash computation by performing final
 operations such as padding. Once engineDigest has
 been called, the engine should be reset (see
 engineReset).
 Resetting is the responsibility of the
 engine implementor.

Returns:
the array of bytes for the resulting hash value.


"
32,MessageDigestSpi,5,void engineReset(),True,Resets the digest for further use.,"

engineReset
protected abstract void engineReset()
Resets the digest for further use.

"
33,Permission,1,boolean implies(Permission p),True,"Checks if the specified permission's actions are ""implied by"" this object's actions.","

implies
public abstract boolean implies(Permission permission)
Checks if the specified permission's actions are ""implied by""
 this object's actions.
 
 This must be implemented by subclasses of Permission, as they are the
 only ones that can impose semantics on a Permission object.

 The implies method is used by the AccessController to determine
 whether or not a requested permission is implied by another permission that
 is known to be valid in the current execution context.

Parameters:
permission - the permission to check against.
Returns:
true if the specified permission is implied by this object,
 false if not.


"
33,Permission,2,boolean equals(Object obj),True,Checks two Permission objects for equality.,"

equals
public abstract boolean equals(Object obj)
Checks two Permission objects for equality.
 
 Do not use the equals method for making access control
 decisions; use the implies method.

Overrides:
equals in class Object
Parameters:
obj - the object we are testing for equality with this object.
Returns:
true if both Permission objects are equivalent.
See Also:
Object.hashCode(), 
HashMap


"
33,Permission,3,int hashCode(),True,Returns the hash code value for this Permission object.,"

hashCode
public abstract int hashCode()
Returns the hash code value for this Permission object.
 
 The required hashCode behavior for Permission Objects is
 the following:
 
Whenever it is invoked on the same Permission object more than
     once during an execution of a Java application, the
     hashCode method
     must consistently return the same integer. This integer need not
     remain consistent from one execution of an application to another
     execution of the same application.
 If two Permission objects are equal according to the
     equals
     method, then calling the hashCode method on each of the
     two Permission objects must produce the same integer result.
 

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
33,Permission,4,String getActions(),True,Returns the actions as a String.,"

getActions
public abstract String getActions()
Returns the actions as a String. This is abstract
 so subclasses can defer creating a String representation until
 one is needed. Subclasses should always return actions in what they
 consider to be their
 canonical form. For example, two FilePermission objects created via
 the following:

 
   perm1 = new FilePermission(p1,""read,write"");
   perm2 = new FilePermission(p2,""write,read"");
 

 both return
 ""read,write"" when the getActions method is invoked.

Returns:
the actions of this Permission.


"
33,Permission,5,String getName(),True,Returns the name of this Permission.,"

getName
public final String getName()
Returns the name of this Permission.
 For example, in the case of a java.io.FilePermission,
 the name will be a pathname.

Returns:
the name of this Permission.


"
34,PermissionCollection,1,boolean add(Permission p),False,,NULL
34,PermissionCollection,2,boolean implies(Permission p),True,Checks to see if the specified permission is implied by the collection of Permission objects held in this PermissionCollection.,"

implies
public abstract boolean implies(Permission permission)
Checks to see if the specified permission is implied by
 the collection of Permission objects held in this PermissionCollection.

Parameters:
permission - the Permission object to compare.
Returns:
true if ""permission"" is implied by the  permissions in
 the collection, false if not.


"
34,PermissionCollection,3,Enumeration elements(),False,,NULL
34,PermissionCollection,4,void setReadOnly(),True,"Marks this PermissionCollection object as ""readonly"".","

setReadOnly
public void setReadOnly()
Marks this PermissionCollection object as ""readonly"". After
 a PermissionCollection object
 is marked as readonly, no new Permission objects can be added to it
 using add.

"
34,PermissionCollection,5,boolean isReadOnly(),True,Returns true if this PermissionCollection object is marked as readonly.,"

isReadOnly
public boolean isReadOnly()
Returns true if this PermissionCollection object is marked as readonly.
 If it is readonly, no new Permission objects can be added to it
 using add.

 By default, the object is not readonly. It can be set to
 readonly by a call to setReadOnly.

Returns:
true if this PermissionCollection object is marked as readonly,
 false otherwise.


"
35,Permissions,1,boolean add(Permission permission),False,,NULL
35,Permissions,2,boolean implies(Permission permission),True,Checks to see if this object's PermissionCollection for permissions of the specified permission's class implies the permissions expressed in the permission object.,"

implies
public boolean implies(Permission permission)
Checks to see if this object's PermissionCollection for permissions of
 the specified permission's class implies the permissions
 expressed in the permission object. Returns true if the
 combination of permissions in the appropriate PermissionCollection
 (e.g., a FilePermissionCollection for a FilePermission) together
 imply the specified permission.

 For example, suppose there is a FilePermissionCollection in this
 Permissions object, and it contains one FilePermission that specifies
 ""read"" access for  all files in all subdirectories of the ""/tmp""
 directory, and another FilePermission that specifies ""write"" access
 for all files in the ""/tmp/scratch/foo"" directory.
 Then if the implies method
 is called with a permission specifying both ""read"" and ""write"" access
 to files in the ""/tmp/scratch/foo"" directory, true is
 returned.

 Additionally, if this PermissionCollection contains the
 AllPermission, this method will always return true.
 

Specified by:
implies in class PermissionCollection
Parameters:
permission - the Permission object to check.
Returns:
true if ""permission"" is implied by the permissions in the
 PermissionCollection it
 belongs to, false if not.


"
35,Permissions,3,Enumeration elements(),False,,NULL
35,Permissions,4,boolean isReadOnly(),False,,NULL
35,Permissions,5,int size(),False,,NULL
36,PKCS12Attribute,1,"PKCS12Attribute(String name, String value)",False,,NULL
36,PKCS12Attribute,2,String getName(),True,Returns the attribute's ASN.1 Object Identifier represented as a list of dot-separated integers.,"

getName
public String getName()
Returns the attribute's ASN.1 Object Identifier represented as a
 list of dot-separated integers.

Specified by:
getName in interface KeyStore.Entry.Attribute
Returns:
the attribute's identifier


"
36,PKCS12Attribute,3,String getValue(),True,Returns the attribute's ASN.1 DER-encoded value as a string.,"

getValue
public String getValue()
Returns the attribute's ASN.1 DER-encoded value as a string.
 An ASN.1 DER-encoded value is returned in one of the following
 String formats:
 
 the DER encoding of a basic ASN.1 type that has a natural
      string representation is returned as the string itself.
      Such types are currently limited to BOOLEAN, INTEGER,
      OBJECT IDENTIFIER, UTCTime, GeneralizedTime and the
      following six ASN.1 string types: UTF8String,
      PrintableString, T61String, IA5String, BMPString and
      GeneralString.
  the DER encoding of any other ASN.1 type is not decoded but
      returned as a binary string of colon-separated pairs of
      hexadecimal digits.
 
 Multi-valued attributes are represented as a comma-separated
 list of values, enclosed in square brackets. See
 Arrays.toString(java.lang.Object[]).

Specified by:
getValue in interface KeyStore.Entry.Attribute
Returns:
the attribute value's string encoding


"
36,PKCS12Attribute,4,void setName(String name),False,,NULL
36,PKCS12Attribute,5,void setValue(String value),False,,NULL
37,Policy,1,Policy.getPolicy(),False,,NULL
37,Policy,2,Policy.setPolicy(Policy p),False,,NULL
37,Policy,3,Policy.getGrant(Permission perm),False,,NULL
37,Policy,4,Policy.getPermissions(ProtectionDomain domain),False,,NULL
37,Policy,5,Policy.getPermissions(CodeSource codesource),False,,NULL
38,PolicySpi,1,abstract PolicySpi(),False,,NULL
38,PolicySpi,2,abstract void init(Policy.Parameters params),False,,NULL
38,PolicySpi,3,"abstract boolean implies(Subject subject, ProtectionDomain domain, int protectionAction)",False,,NULL
38,PolicySpi,4,abstract void refresh(),False,,NULL
38,PolicySpi,5,abstract void refresh(ProtectionDomain domain),False,,NULL
39,ProtectionDomain,1,ProtectionDomain getProtectionDomain(),False,,NULL
39,ProtectionDomain,2,PermissionCollection getPermissions(),True,Returns the static permissions granted to this domain.,"

getPermissions
public final PermissionCollection getPermissions()
Returns the static permissions granted to this domain.

Returns:
the static set of permissions for this domain which may be null.
See Also:
Policy.refresh(), 
Policy.getPermissions(ProtectionDomain)


"
39,ProtectionDomain,3,Principal[] getPrincipals(),True,Returns an array of principals for this domain.,"

getPrincipals
public final Principal[] getPrincipals()
Returns an array of principals for this domain.

Returns:
a non-null array of principals for this domain.
 Returns a new array each time this method is called.
Since:
1.4


"
39,ProtectionDomain,4,CodeSource getCodeSource(),True,Returns the CodeSource of this domain.,"

getCodeSource
public final CodeSource getCodeSource()
Returns the CodeSource of this domain.

Returns:
the CodeSource of this domain which may be null.
Since:
1.2


"
39,ProtectionDomain,5,boolean implies(ProtectionDomain pd),False,,NULL
40,Provider,1,"Provider(String type, String name, String version, String info)",False,,NULL
40,Provider,2,String getType(),False,,NULL
40,Provider,3,String getName(),True,Returns the name of this provider.,"

getName
public String getName()
Returns the name of this provider.

Returns:
the name of this provider.


"
40,Provider,4,String getInfo(),True,Returns a human-readable description of the provider and its services.,"

getInfo
public String getInfo()
Returns a human-readable description of the provider and its
 services.  This may return an HTML page, with relevant links.

Returns:
a description of the provider and its services.


"
40,Provider,5,String getVersion(),False,,NULL
40,Provider,6,Set<Provider.Service> getServices(),True,Get an unmodifiable Set of all services supported by this Provider.,"

getServices
public Set<Provider.Service> getServices()
Get an unmodifiable Set of all services supported by
 this Provider.

Returns:
an unmodifiable Set of all services supported by
 this Provider
Since:
1.5


"
40,Provider,7,Set<String> getServiceNames(),False,,NULL
40,Provider,8,Set<Provider.Service> getServices(Class<?> type),False,,NULL
40,Provider,9,Set<String> getServiceNames(Class<?> type),False,,NULL
40,Provider,10,Set<Provider.Service> getServices(String type),False,,NULL
40,Provider,11,Set<String> getServiceNames(String type),False,,NULL
40,Provider,12,"Set<Provider.Service> getServices(String type, String algorithm)",False,,NULL
40,Provider,13,"Set<String> getServiceNames(String type, String algorithm)",False,,NULL
40,Provider,14,"Set<Provider.Service> getServices(String type, String algorithm, String className)",False,,NULL
40,Provider,15,"Set<String> getServiceNames(String type, String algorithm, String className)",False,,NULL
40,Provider,16,"Set<Provider.Service> getServices(String type, String algorithm, String className, String providerName)",False,,NULL
40,Provider,17,"Set<String> getServiceNames(String type, String algorithm, String className, String providerName)",False,,NULL
40,Provider,18,"Set<Provider.Service> getServices(String type, String algorithm, String className, String providerName, String version)",False,,NULL
40,Provider,19,"Set<String> getServiceNames(String type, String algorithm, String className, String providerName, String version)",False,,NULL
40,Provider,20,"Set<Provider.Service> getServices(String type, String algorithm, String className, String providerName, String version, String[] options)",False,,NULL
40,Provider,21,"Set<String> getServiceNames(String type, String algorithm, String className, String providerName, String version, String[] options)",False,,NULL
41,Provider.Service,1,String getType(),True,Get the type of this service.,"

getType
public final String getType()
Get the type of this service. For example, MessageDigest.

Returns:
the type of this service


"
41,Provider.Service,2,String getAlgorithm(),True,Return the name of the algorithm of this service.,"

getAlgorithm
public final String getAlgorithm()
Return the name of the algorithm of this service. For example,
 SHA-1.

Returns:
the algorithm of this service


"
41,Provider.Service,3,String getProviderName(),False,,NULL
41,Provider.Service,4,Provider getProvider(),True,Return the Provider of this service.,"

getProvider
public final Provider getProvider()
Return the Provider of this service.

Returns:
the Provider of this service


"
41,Provider.Service,5,boolean isAlgorithmSupported(String algorithm),False,,NULL
42,SecureClassLoader,1,SecureClassLoader(),False,,NULL
42,SecureClassLoader,2,"Class<?> defineClass(String name, byte[] b, int off, int len)",False,,NULL
42,SecureClassLoader,3,"Class<?> defineClass(String name, byte[] b)",False,,NULL
42,SecureClassLoader,4,"Class<?> defineClass(String name, byte[] b, int off, int len, ProtectionDomain pd)",False,,NULL
42,SecureClassLoader,5,"Class<?> defineClass(String name, byte[] b, ProtectionDomain pd)",False,,NULL
42,SecureClassLoader,6,"Class<?> defineClass(String name, byte[] b, int off, int len, ClassLoader loader)",False,,NULL
42,SecureClassLoader,7,"Class<?> defineClass(String name, byte[] b, ClassLoader loader)",False,,NULL
42,SecureClassLoader,8,"Class<?> defineClass(String name, byte[] b, int off, int len, ClassLoader loader, ProtectionDomain pd)",False,,NULL
42,SecureClassLoader,9,"Class<?> defineClass(String name, byte[] b, ProtectionDomain pd, ClassLoader loader)",False,,NULL
42,SecureClassLoader,10,"Class<?> defineClass(String name, byte[] b, int off, int len, ClassLoader loader, ProtectionDomain pd, Class<?> caller)",False,,NULL
42,SecureClassLoader,11,"Class<?> defineClass(String name, byte[] b, ProtectionDomain pd, ClassLoader loader, Class<?> caller)",False,,NULL
43,SecureRandom,1,SecureRandom(),False,,NULL
43,SecureRandom,2,void setSeed(byte[] seed),True,Reseeds this random object.,"

setSeed
public void setSeed(byte[] seed)
Reseeds this random object. The given seed supplements, rather than
 replaces, the existing seed. Thus, repeated calls are guaranteed
 never to reduce randomness.

Parameters:
seed - the seed.
See Also:
getSeed(int)


"
43,SecureRandom,3,void nextBytes(byte[] bytes),True,Generates a user-specified number of random bytes.,"

nextBytes
public void nextBytes(byte[] bytes)
Generates a user-specified number of random bytes.

  If a call to setSeed had not occurred previously,
 the first call to this method forces this SecureRandom object
 to seed itself.  This self-seeding will not occur if
 setSeed was previously called.

Overrides:
nextBytes in class Random
Parameters:
bytes - the array to be filled in with random bytes.


"
43,SecureRandom,4,int nextInt(),False,,NULL
43,SecureRandom,5,long nextLong(),False,,NULL
43,SecureRandom,6,boolean nextBoolean(),False,,NULL
43,SecureRandom,7,double nextDouble(),False,,NULL
43,SecureRandom,8,float nextFloat(),False,,NULL
43,SecureRandom,9,int nextInt(int n),False,,NULL
43,SecureRandom,10,long nextLong(long n),False,,NULL
43,SecureRandom,11,double nextGaussian(),False,,NULL
43,SecureRandom,12,void setSeed(long seed),True,"Reseeds this random object, using the eight bytes contained in the given long seed.","

setSeed
public void setSeed(long seed)
Reseeds this random object, using the eight bytes contained
 in the given long seed. The given seed supplements,
 rather than replaces, the existing seed. Thus, repeated calls
 are guaranteed never to reduce randomness.

 This method is defined for compatibility with
 java.util.Random.

Overrides:
setSeed in class Random
Parameters:
seed - the seed.
See Also:
getSeed(int)


"
43,SecureRandom,13,void setSeed(long[] seed),False,,NULL
43,SecureRandom,14,"void setSeed(byte[] seed, int offset, int len)",False,,NULL
43,SecureRandom,15,"void setSeed(long seed, byte[] seeding)",False,,NULL
43,SecureRandom,16,"void setSeed(long seed, byte[] seeding, int offset, int len)",False,,NULL
43,SecureRandom,17,"void setSeed(long seed, int numBits)",False,,NULL
43,SecureRandom,18,"void setSeed(long seed, int numBits, byte[] seeding)",False,,NULL
43,SecureRandom,19,"void setSeed(long seed, int numBits, byte[] seeding, int offset, int len)",False,,NULL
43,SecureRandom,20,"void setSeed(long seed, int numBits, byte[] seeding, int offset, int len, int numBits2)",False,,NULL
44,SecureRandomSpi,1,SecureRandomSpi(),False,,NULL
44,SecureRandomSpi,2,void setSeed(byte[] seed),False,,NULL
44,SecureRandomSpi,3,void nextBytes(byte[] bytes),False,,NULL
44,SecureRandomSpi,4,int nextInt(),False,,NULL
44,SecureRandomSpi,5,long nextLong(),False,,NULL
44,SecureRandomSpi,6,boolean nextBoolean(),False,,NULL
44,SecureRandomSpi,7,float nextFloat(),False,,NULL
44,SecureRandomSpi,8,double nextDouble(),False,,NULL
44,SecureRandomSpi,9,double nextGaussian(),False,,NULL
44,SecureRandomSpi,10,void setSeed(long seed),False,,NULL
44,SecureRandomSpi,11,void setSeed(long[] seed),False,,NULL
44,SecureRandomSpi,12,"void setSeed(byte[] seed, int offset, int len)",False,,NULL
44,SecureRandomSpi,13,"void setSeed(long seed, byte[] seeding)",False,,NULL
44,SecureRandomSpi,14,"void setSeed(long seed, byte[] seeding, int offset, int len)",False,,NULL
44,SecureRandomSpi,15,"void setSeed(long seed, int numBits)",False,,NULL
44,SecureRandomSpi,16,"void setSeed(long seed, int numBits, byte[] seeding)",False,,NULL
44,SecureRandomSpi,17,"void setSeed(long seed, int numBits, byte[] seeding, int offset, int len)",False,,NULL
44,SecureRandomSpi,18,"void setSeed(long seed, int numBits, int numRequested)",False,,NULL
44,SecureRandomSpi,19,"void setSeed(long seed, int numBits, int numRequested, byte[] seeding)",False,,NULL
44,SecureRandomSpi,20,"void setSeed(long seed, int numBits, int numRequested, byte[] seeding, int offset, int len)",False,,NULL
45,Security,1,"void setProperty(String key, String value)",True,Sets a security property value.,"

setProperty
public static void setProperty(String key,
                               String datum)
Sets a security property value.

 First, if there is a security manager, its
 checkPermission method is called with a
 java.security.SecurityPermission(""setProperty.""+key)
 permission to see if it's ok to set the specified
 security property value.

Parameters:
key - the name of the property to be set.
datum - the value of the property to be set.
Throws:
SecurityException - if a security manager exists and its SecurityManager.checkPermission(java.security.Permission) method
          denies access to set the specified security property value
NullPointerException - if key or datum is null
See Also:
getProperty(java.lang.String), 
SecurityPermission


"
45,Security,2,String getProperty(String key),True,Gets a security property value.,"

getProperty
public static String getProperty(String key)
Gets a security property value.

 First, if there is a security manager, its
 checkPermission  method is called with a
 java.security.SecurityPermission(""getProperty.""+key)
 permission to see if it's ok to retrieve the specified
 security property value..

Parameters:
key - the key of the property being retrieved.
Returns:
the value of the security property corresponding to key.
Throws:
SecurityException - if a security manager exists and its SecurityManager.checkPermission(java.security.Permission) method
          denies
          access to retrieve the specified security property value
NullPointerException - is key is null
See Also:
setProperty(java.lang.String, java.lang.String), 
SecurityPermission


"
45,Security,3,"String getProperty(String key, String def)",False,,NULL
45,Security,4,void setProvider(Provider p),False,,NULL
45,Security,5,Provider getProvider(String providerName),True,"Returns the provider installed with the specified name, if any.","

getProvider
public static Provider getProvider(String name)
Returns the provider installed with the specified name, if
 any. Returns null if no provider with the specified name is
 installed or if name is null.

Parameters:
name - the name of the provider to get.
Returns:
the provider of the specified name.
See Also:
removeProvider(java.lang.String), 
addProvider(java.security.Provider)


"
46,SecurityPermission,1,boolean implies(Permission p),False,,NULL
46,SecurityPermission,2,boolean equals(Object obj),False,,NULL
46,SecurityPermission,3,String getActions(),False,,NULL
46,SecurityPermission,4,int hashCode(),False,,NULL
46,SecurityPermission,5,String getName(),False,,NULL
47,Signature,1,void initVerify(PublicKey key),True,Initializes this object for verification.,"

initVerify
public final void initVerify(PublicKey publicKey)
                      throws InvalidKeyException
Initializes this object for verification. If this method is called
 again with a different argument, it negates the effect
 of this call.

Parameters:
publicKey - the public key of the identity whose signature is
 going to be verified.
Throws:
InvalidKeyException - if the key is invalid.


"
47,Signature,2,void initSign(PrivateKey key),True,Initialize this object for signing.,"

initSign
public final void initSign(PrivateKey privateKey)
                    throws InvalidKeyException
Initialize this object for signing. If this method is called
 again with a different argument, it negates the effect
 of this call.

Parameters:
privateKey - the private key of the identity whose signature
 is going to be generated.
Throws:
InvalidKeyException - if the key is invalid.


"
47,Signature,3,void update(byte[] data),True,"Updates the data to be signed or verified, using the specified array of bytes.","

update
public final void update(byte[] data)
                  throws SignatureException
Updates the data to be signed or verified, using the specified
 array of bytes.

Parameters:
data - the byte array to use for the update.
Throws:
SignatureException - if this signature object is not
 initialized properly.


"
47,Signature,4,boolean verify(byte[] signature),True,Verifies the passed-in signature.,"

verify
public final boolean verify(byte[] signature)
                     throws SignatureException
Verifies the passed-in signature.

 A call to this method resets this signature object to the state
 it was in when previously initialized for verification via a
 call to initVerify(PublicKey). That is, the object is
 reset and available to verify another signature from the identity
 whose public key was specified in the call to initVerify.

Parameters:
signature - the signature bytes to be verified.
Returns:
true if the signature was verified, false if not.
Throws:
SignatureException - if this signature object is not
 initialized properly, the passed-in signature is improperly
 encoded or of the wrong type, if this signature algorithm is unable to
 process the input data provided, etc.


"
47,Signature,5,byte[] sign(),True,Returns the signature bytes of all the data updated.,"

sign
public final byte[] sign()
                  throws SignatureException
Returns the signature bytes of all the data updated.
 The format of the signature depends on the underlying
 signature scheme.

 A call to this method resets this signature object to the state
 it was in when previously initialized for signing via a
 call to initSign(PrivateKey). That is, the object is
 reset and available to generate another signature from the same
 signer, if desired, via new calls to update and
 sign.

Returns:
the signature bytes of the signing operation's result.
Throws:
SignatureException - if this signature object is not
 initialized properly or if this signature algorithm is unable to
 process the input data provided.


"
48,SignatureSpi,1,void update(byte[] input),False,,NULL
48,SignatureSpi,2,byte[] sign(),False,,NULL
48,SignatureSpi,3,boolean verify(byte[] signature),False,,NULL
48,SignatureSpi,4,void initSign(PrivateKey key),False,,NULL
48,SignatureSpi,5,void initVerify(PublicKey key),False,,NULL
49,SignedObject,1,"SignedObject(Object obj, PrivateKey privateKey)",False,,NULL
49,SignedObject,2,Object getObject(),True,Retrieves the encapsulated object.,"

getObject
public Object getObject()
                 throws IOException,
                        ClassNotFoundException
Retrieves the encapsulated object.
 The encapsulated object is de-serialized before it is returned.

Returns:
the encapsulated object.
Throws:
IOException - if an error occurs during de-serialization
ClassNotFoundException - if an error occurs during
 de-serialization


"
49,SignedObject,3,byte[] getSignature(),True,"Retrieves the signature on the signed object, in the form of a byte array.","

getSignature
public byte[] getSignature()
Retrieves the signature on the signed object, in the form of a
 byte array.

Returns:
the signature. Returns a new array each time this
 method is called.


"
49,SignedObject,4,boolean verify(PublicKey publicKey),False,,NULL
49,SignedObject,5,"boolean verify(PublicKey publicKey, Signature sig)",True,"Verifies that the signature in this SignedObject is the valid signature for the object stored inside, with the given verification key, using the designated verification engine.","

verify
public boolean verify(PublicKey verificationKey,
                      Signature verificationEngine)
               throws InvalidKeyException,
                      SignatureException
Verifies that the signature in this SignedObject is the valid
 signature for the object stored inside, with the given
 verification key, using the designated verification engine.

Parameters:
verificationKey - the public key for verification.
verificationEngine - the signature verification engine.
Returns:
true if the signature
 is valid, false otherwise
Throws:
SignatureException - if signature verification failed.
InvalidKeyException - if the verification key is invalid.


"
50,Signer,1,boolean verify(byte[] data),False,,NULL
50,Signer,2,void update(byte[] data),False,,NULL
50,Signer,3,"void setParameter(String param, Object value)",False,,NULL
50,Signer,4,void setSpi(Provider.Service spi),False,,NULL
50,Signer,5,void setSeed(byte[] seed),False,,NULL
51,Timestamp,1,java.security.Timestamp getTimestamp(),False,,NULL
51,Timestamp,2,java.security.Timestamp getTimestamp(java.security.cert.Certificate cert),False,,NULL
51,Timestamp,3,java.security.Timestamp getTimestamp(java.security.cert.Certificate[] certs),False,,NULL
51,Timestamp,4,java.security.Timestamp getTimestamp(java.security.cert.CertPath certPath),False,,NULL
51,Timestamp,5,"java.security.Timestamp getTimestamp(java.security.cert.CertPath certPath, java.security.cert.CertPathParameters params)",False,,NULL
52,UnresolvedPermission,1,boolean equals(Object obj),True,Checks two UnresolvedPermission objects for equality.,"

equals
public boolean equals(Object obj)
Checks two UnresolvedPermission objects for equality.
 Checks that obj is an UnresolvedPermission, and has
 the same type (class) name, permission name, actions, and
 certificates as this object.

  To determine certificate equality, this method only compares
 actual signer certificates.  Supporting certificate chains
 are not taken into consideration by this method.

Specified by:
equals in class Permission
Parameters:
obj - the object we are testing for equality with this object.
Returns:
true if obj is an UnresolvedPermission, and has the same
 type (class) name, permission name, actions, and
 certificates as this object.
See Also:
Object.hashCode(), 
HashMap


"
52,UnresolvedPermission,2,int hashCode(),True,Returns the hash code value for this object.,"

hashCode
public int hashCode()
Returns the hash code value for this object.

Specified by:
hashCode in class Permission
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
52,UnresolvedPermission,3,String getActions(),True,"Returns the canonical string representation of the actions, which currently is the empty string """", since there are no actions for an UnresolvedPermission.","

getActions
public String getActions()
Returns the canonical string representation of the actions,
 which currently is the empty string """", since there are no actions for
 an UnresolvedPermission. That is, the actions for the
 permission that will be created when this UnresolvedPermission
 is resolved may be non-null, but an UnresolvedPermission
 itself is never considered to have any actions.

Specified by:
getActions in class Permission
Returns:
the empty string """".


"
52,UnresolvedPermission,4,String getName(),False,,NULL
52,UnresolvedPermission,5,String toString(),True,Returns a string describing this UnresolvedPermission.,"

toString
public String toString()
Returns a string describing this UnresolvedPermission.  The convention
 is to specify the class name, the permission name, and the actions, in
 the following format: '(unresolved ""ClassName"" ""name"" ""actions"")'.

Overrides:
toString in class Permission
Returns:
information about this UnresolvedPermission.


"
53,URIParameter,1,boolean add(E e),False,,NULL
53,URIParameter,2,"void add(int index, E element)",False,,NULL
53,URIParameter,3,boolean addAll(Collection<? extends E> c),False,,NULL
53,URIParameter,4,"boolean addAll(int index, Collection<? extends E> c)",False,,NULL
53,URIParameter,5,void clear(),False,,NULL
