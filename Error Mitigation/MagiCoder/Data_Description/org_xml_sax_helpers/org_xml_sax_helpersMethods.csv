ClassName,Method,Return Type,Description,Full Description
AttributeListImpl,"addAttribute(String name, String type, String value)",void,Deprecated.,"

addAttribute
public void addAttribute(String name,
                         String type,
                         String value)
Deprecated. 
Add an attribute to an attribute list.

 This method is provided for SAX parser writers, to allow them
 to build up an attribute list incrementally before delivering
 it to the application.

Parameters:
name - The attribute name.
type - The attribute type (""NMTOKEN"" for an enumeration).
value - The attribute value (must not be null).
See Also:
removeAttribute(java.lang.String), 
DocumentHandler.startElement(java.lang.String, org.xml.sax.AttributeList)


"
AttributeListImpl,clear(),void,Deprecated.,"

clear
public void clear()
Deprecated. 
Clear the attribute list.

 SAX parser writers can use this method to reset the attribute
 list between DocumentHandler.startElement events.  Normally,
 it will make sense to reuse the same AttributeListImpl object
 rather than allocating a new one each time.

See Also:
DocumentHandler.startElement(java.lang.String, org.xml.sax.AttributeList)


"
AttributeListImpl,getLength(),int,Deprecated.,"

getLength
public int getLength()
Deprecated. 
Return the number of attributes in the list.

Specified by:
getLength in interface AttributeList
Returns:
The number of attributes in the list.
See Also:
AttributeList.getLength()


"
AttributeListImpl,getName(int i),String,Deprecated.,"

getName
public String getName(int i)
Deprecated. 
Get the name of an attribute (by position).

Specified by:
getName in interface AttributeList
Parameters:
i - The position of the attribute in the list.
Returns:
The attribute name as a string, or null if there
         is no attribute at that position.
See Also:
AttributeList.getName(int)


"
AttributeListImpl,getType(int i),String,Deprecated.,"

getType
public String getType(int i)
Deprecated. 
Get the type of an attribute (by position).

Specified by:
getType in interface AttributeList
Parameters:
i - The position of the attribute in the list.
Returns:
The attribute type as a string (""NMTOKEN"" for an
         enumeration, and ""CDATA"" if no declaration was
         read), or null if there is no attribute at
         that position.
See Also:
AttributeList.getType(int)


"
AttributeListImpl,getType(String name),String,Deprecated.,"

getType
public String getType(String name)
Deprecated. 
Get the type of an attribute (by name).

Specified by:
getType in interface AttributeList
Parameters:
name - The attribute name.
Returns:
The attribute type as a string (""NMTOKEN"" for an
         enumeration, and ""CDATA"" if no declaration was
         read).
See Also:
AttributeList.getType(java.lang.String)


"
AttributeListImpl,getValue(int i),String,Deprecated.,"

getValue
public String getValue(int i)
Deprecated. 
Get the value of an attribute (by position).

Specified by:
getValue in interface AttributeList
Parameters:
i - The position of the attribute in the list.
Returns:
The attribute value as a string, or null if
         there is no attribute at that position.
See Also:
AttributeList.getValue(int)


"
AttributeListImpl,getValue(String name),String,Deprecated.,"

getValue
public String getValue(String name)
Deprecated. 
Get the value of an attribute (by name).

Specified by:
getValue in interface AttributeList
Parameters:
name - The attribute name.
Returns:
The attribute value as a string, or null if
         no such attribute exists.
See Also:
AttributeList.getValue(java.lang.String)


"
AttributeListImpl,removeAttribute(String name),void,Deprecated.,"

removeAttribute
public void removeAttribute(String name)
Deprecated. 
Remove an attribute from the list.

 SAX application writers can use this method to filter an
 attribute out of an AttributeList.  Note that invoking this
 method will change the length of the attribute list and
 some of the attribute's indices.
If the requested attribute is not in the list, this is
 a no-op.

Parameters:
name - The attribute name.
See Also:
addAttribute(java.lang.String, java.lang.String, java.lang.String)


"
AttributeListImpl,setAttributeList(AttributeList atts),void,Deprecated.,"

setAttributeList
public void setAttributeList(AttributeList atts)
Deprecated. 
Set the attribute list, discarding previous contents.

 This method allows an application writer to reuse an
 attribute list easily.

Parameters:
atts - The attribute list to copy.


"
AttributesImpl,"addAttribute(String uri, String localName, String qName, String type, String value)",void,Add an attribute to the end of the list.,"

addAttribute
public void addAttribute(String uri,
                         String localName,
                         String qName,
                         String type,
                         String value)
Add an attribute to the end of the list.

 For the sake of speed, this method does no checking
 to see if the attribute is already in the list: that is
 the responsibility of the application.

Parameters:
uri - The Namespace URI, or the empty string if
        none is available or Namespace processing is not
        being performed.
localName - The local name, or the empty string if
        Namespace processing is not being performed.
qName - The qualified (prefixed) name, or the empty string
        if qualified names are not available.
type - The attribute type as a string.
value - The attribute value.


"
AttributesImpl,clear(),void,Clear the attribute list for reuse.,"

clear
public void clear()
Clear the attribute list for reuse.

 Note that little memory is freed by this call:
 the current array is kept so it can be
 reused.

"
AttributesImpl,getIndex(String qName),int,Look up an attribute's index by qualified (prefixed) name.,"

getIndex
public int getIndex(String qName)
Look up an attribute's index by qualified (prefixed) name.

Specified by:
getIndex in interface Attributes
Parameters:
qName - The qualified name.
Returns:
The attribute's index, or -1 if none matches.
See Also:
Attributes.getIndex(java.lang.String)


"
AttributesImpl,"getIndex(String uri, String localName)",int,Look up an attribute's index by Namespace name.,"

getIndex
public int getIndex(String uri,
                    String localName)
Look up an attribute's index by Namespace name.

 In many cases, it will be more efficient to look up the name once and
 use the index query methods rather than using the name query methods
 repeatedly.

Specified by:
getIndex in interface Attributes
Parameters:
uri - The attribute's Namespace URI, or the empty
        string if none is available.
localName - The attribute's local name.
Returns:
The attribute's index, or -1 if none matches.
See Also:
Attributes.getIndex(java.lang.String,java.lang.String)


"
AttributesImpl,getLength(),int,Return the number of attributes in the list.,"

getLength
public int getLength()
Return the number of attributes in the list.

Specified by:
getLength in interface Attributes
Returns:
The number of attributes in the list.
See Also:
Attributes.getLength()


"
AttributesImpl,getLocalName(int index),String,Return an attribute's local name.,"

getLocalName
public String getLocalName(int index)
Return an attribute's local name.

Specified by:
getLocalName in interface Attributes
Parameters:
index - The attribute's index (zero-based).
Returns:
The attribute's local name, the empty string if
         none is available, or null if the index if out of range.
See Also:
Attributes.getLocalName(int)


"
AttributesImpl,getQName(int index),String,Return an attribute's qualified (prefixed) name.,"

getQName
public String getQName(int index)
Return an attribute's qualified (prefixed) name.

Specified by:
getQName in interface Attributes
Parameters:
index - The attribute's index (zero-based).
Returns:
The attribute's qualified name, the empty string if
         none is available, or null if the index is out of bounds.
See Also:
Attributes.getQName(int)


"
AttributesImpl,getType(int index),String,Return an attribute's type by index.,"

getType
public String getType(int index)
Return an attribute's type by index.

Specified by:
getType in interface Attributes
Parameters:
index - The attribute's index (zero-based).
Returns:
The attribute's type, ""CDATA"" if the type is unknown, or null
         if the index is out of bounds.
See Also:
Attributes.getType(int)


"
AttributesImpl,getType(String qName),String,Look up an attribute's type by qualified (prefixed) name.,"

getType
public String getType(String qName)
Look up an attribute's type by qualified (prefixed) name.

Specified by:
getType in interface Attributes
Parameters:
qName - The qualified name.
Returns:
The attribute's type, or null if there is no
         matching attribute.
See Also:
Attributes.getType(java.lang.String)


"
AttributesImpl,"getType(String uri, String localName)",String,Look up an attribute's type by Namespace-qualified name.,"

getType
public String getType(String uri,
                      String localName)
Look up an attribute's type by Namespace-qualified name.

Specified by:
getType in interface Attributes
Parameters:
uri - The Namespace URI, or the empty string for a name
        with no explicit Namespace URI.
localName - The local name.
Returns:
The attribute's type, or null if there is no
         matching attribute.
See Also:
Attributes.getType(java.lang.String,java.lang.String)


"
AttributesImpl,getURI(int index),String,Return an attribute's Namespace URI.,"

getURI
public String getURI(int index)
Return an attribute's Namespace URI.

Specified by:
getURI in interface Attributes
Parameters:
index - The attribute's index (zero-based).
Returns:
The Namespace URI, the empty string if none is
         available, or null if the index is out of range.
See Also:
Attributes.getURI(int)


"
AttributesImpl,getValue(int index),String,Return an attribute's value by index.,"

getValue
public String getValue(int index)
Return an attribute's value by index.

Specified by:
getValue in interface Attributes
Parameters:
index - The attribute's index (zero-based).
Returns:
The attribute's value or null if the index is out of bounds.
See Also:
Attributes.getValue(int)


"
AttributesImpl,getValue(String qName),String,Look up an attribute's value by qualified (prefixed) name.,"

getValue
public String getValue(String qName)
Look up an attribute's value by qualified (prefixed) name.

Specified by:
getValue in interface Attributes
Parameters:
qName - The qualified name.
Returns:
The attribute's value, or null if there is no
         matching attribute.
See Also:
Attributes.getValue(java.lang.String)


"
AttributesImpl,"getValue(String uri, String localName)",String,Look up an attribute's value by Namespace-qualified name.,"

getValue
public String getValue(String uri,
                       String localName)
Look up an attribute's value by Namespace-qualified name.

Specified by:
getValue in interface Attributes
Parameters:
uri - The Namespace URI, or the empty string for a name
        with no explicit Namespace URI.
localName - The local name.
Returns:
The attribute's value, or null if there is no
         matching attribute.
See Also:
Attributes.getValue(java.lang.String,java.lang.String)


"
AttributesImpl,removeAttribute(int index),void,Remove an attribute from the list.,"

removeAttribute
public void removeAttribute(int index)
Remove an attribute from the list.

Parameters:
index - The index of the attribute (zero-based).
Throws:
ArrayIndexOutOfBoundsException - When the
            supplied index does not point to an attribute
            in the list.


"
AttributesImpl,"setAttribute(int index, String uri, String localName, String qName, String type, String value)",void,Set an attribute in the list.,"

setAttribute
public void setAttribute(int index,
                         String uri,
                         String localName,
                         String qName,
                         String type,
                         String value)
Set an attribute in the list.

 For the sake of speed, this method does no checking
 for name conflicts or well-formedness: such checks are the
 responsibility of the application.

Parameters:
index - The index of the attribute (zero-based).
uri - The Namespace URI, or the empty string if
        none is available or Namespace processing is not
        being performed.
localName - The local name, or the empty string if
        Namespace processing is not being performed.
qName - The qualified name, or the empty string
        if qualified names are not available.
type - The attribute type as a string.
value - The attribute value.
Throws:
ArrayIndexOutOfBoundsException - When the
            supplied index does not point to an attribute
            in the list.


"
AttributesImpl,setAttributes(Attributes atts),void,Copy an entire Attributes object.,"

setAttributes
public void setAttributes(Attributes atts)
Copy an entire Attributes object.

 It may be more efficient to reuse an existing object
 rather than constantly allocating new ones.

Parameters:
atts - The attributes to copy.


"
AttributesImpl,"setLocalName(int index, String localName)",void,Set the local name of a specific attribute.,"

setLocalName
public void setLocalName(int index,
                         String localName)
Set the local name of a specific attribute.

Parameters:
index - The index of the attribute (zero-based).
localName - The attribute's local name, or the empty
        string for none.
Throws:
ArrayIndexOutOfBoundsException - When the
            supplied index does not point to an attribute
            in the list.


"
AttributesImpl,"setQName(int index, String qName)",void,Set the qualified name of a specific attribute.,"

setQName
public void setQName(int index,
                     String qName)
Set the qualified name of a specific attribute.

Parameters:
index - The index of the attribute (zero-based).
qName - The attribute's qualified name, or the empty
        string for none.
Throws:
ArrayIndexOutOfBoundsException - When the
            supplied index does not point to an attribute
            in the list.


"
AttributesImpl,"setType(int index, String type)",void,Set the type of a specific attribute.,"

setType
public void setType(int index,
                    String type)
Set the type of a specific attribute.

Parameters:
index - The index of the attribute (zero-based).
type - The attribute's type.
Throws:
ArrayIndexOutOfBoundsException - When the
            supplied index does not point to an attribute
            in the list.


"
AttributesImpl,"setURI(int index, String uri)",void,Set the Namespace URI of a specific attribute.,"

setURI
public void setURI(int index,
                   String uri)
Set the Namespace URI of a specific attribute.

Parameters:
index - The index of the attribute (zero-based).
uri - The attribute's Namespace URI, or the empty
        string for none.
Throws:
ArrayIndexOutOfBoundsException - When the
            supplied index does not point to an attribute
            in the list.


"
AttributesImpl,"setValue(int index, String value)",void,Set the value of a specific attribute.,"

setValue
public void setValue(int index,
                     String value)
Set the value of a specific attribute.

Parameters:
index - The index of the attribute (zero-based).
value - The attribute's value.
Throws:
ArrayIndexOutOfBoundsException - When the
            supplied index does not point to an attribute
            in the list.


"
DefaultHandler,"characters(char[] ch, int start, int length)",void,Receive notification of character data inside an element.,"

characters
public void characters(char[] ch,
                       int start,
                       int length)
                throws SAXException
Receive notification of character data inside an element.

 By default, do nothing.  Application writers may override this
 method to take specific actions for each chunk of character data
 (such as adding the data to a node or buffer, or printing it to
 a file).

Specified by:
characters in interface ContentHandler
Parameters:
ch - The characters.
start - The start position in the character array.
length - The number of characters to use from the
               character array.
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
ContentHandler.characters(char[], int, int)


"
DefaultHandler,endDocument(),void,Receive notification of the end of the document.,"

endDocument
public void endDocument()
                 throws SAXException
Receive notification of the end of the document.

 By default, do nothing.  Application writers may override this
 method in a subclass to take specific actions at the end
 of a document (such as finalising a tree or closing an output
 file).

Specified by:
endDocument in interface ContentHandler
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
ContentHandler.endDocument()


"
DefaultHandler,"endElement(String uri, String localName, String qName)",void,Receive notification of the end of an element.,"

endElement
public void endElement(String uri,
                       String localName,
                       String qName)
                throws SAXException
Receive notification of the end of an element.

 By default, do nothing.  Application writers may override this
 method in a subclass to take specific actions at the end of
 each element (such as finalising a tree node or writing
 output to a file).

Specified by:
endElement in interface ContentHandler
Parameters:
uri - The Namespace URI, or the empty string if the
        element has no Namespace URI or if Namespace
        processing is not being performed.
localName - The local name (without prefix), or the
        empty string if Namespace processing is not being
        performed.
qName - The qualified name (with prefix), or the
        empty string if qualified names are not available.
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
ContentHandler.endElement(java.lang.String, java.lang.String, java.lang.String)


"
DefaultHandler,endPrefixMapping(String prefix),void,Receive notification of the end of a Namespace mapping.,"

endPrefixMapping
public void endPrefixMapping(String prefix)
                      throws SAXException
Receive notification of the end of a Namespace mapping.

 By default, do nothing.  Application writers may override this
 method in a subclass to take specific actions at the end of
 each prefix mapping.

Specified by:
endPrefixMapping in interface ContentHandler
Parameters:
prefix - The Namespace prefix being declared.
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
ContentHandler.endPrefixMapping(java.lang.String)


"
DefaultHandler,error(SAXParseException e),void,Receive notification of a recoverable parser error.,"

error
public void error(SAXParseException e)
           throws SAXException
Receive notification of a recoverable parser error.

 The default implementation does nothing.  Application writers
 may override this method in a subclass to take specific actions
 for each error, such as inserting the message in a log file or
 printing it to the console.

Specified by:
error in interface ErrorHandler
Parameters:
e - The error information encoded as an exception.
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
ErrorHandler.warning(org.xml.sax.SAXParseException), 
SAXParseException


"
DefaultHandler,fatalError(SAXParseException e),void,Report a fatal XML parsing error.,"

fatalError
public void fatalError(SAXParseException e)
                throws SAXException
Report a fatal XML parsing error.

 The default implementation throws a SAXParseException.
 Application writers may override this method in a subclass if
 they need to take specific actions for each fatal error (such as
 collecting all of the errors into a single report): in any case,
 the application must stop all regular processing when this
 method is invoked, since the document is no longer reliable, and
 the parser may no longer report parsing events.

Specified by:
fatalError in interface ErrorHandler
Parameters:
e - The error information encoded as an exception.
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
ErrorHandler.fatalError(org.xml.sax.SAXParseException), 
SAXParseException


"
DefaultHandler,"ignorableWhitespace(char[] ch, int start, int length)",void,Receive notification of ignorable whitespace in element content.,"

ignorableWhitespace
public void ignorableWhitespace(char[] ch,
                                int start,
                                int length)
                         throws SAXException
Receive notification of ignorable whitespace in element content.

 By default, do nothing.  Application writers may override this
 method to take specific actions for each chunk of ignorable
 whitespace (such as adding data to a node or buffer, or printing
 it to a file).

Specified by:
ignorableWhitespace in interface ContentHandler
Parameters:
ch - The whitespace characters.
start - The start position in the character array.
length - The number of characters to use from the
               character array.
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
ContentHandler.ignorableWhitespace(char[], int, int)


"
DefaultHandler,"notationDecl(String name, String publicId, String systemId)",void,Receive notification of a notation declaration.,"

notationDecl
public void notationDecl(String name,
                         String publicId,
                         String systemId)
                  throws SAXException
Receive notification of a notation declaration.

 By default, do nothing.  Application writers may override this
 method in a subclass if they wish to keep track of the notations
 declared in a document.

Specified by:
notationDecl in interface DTDHandler
Parameters:
name - The notation name.
publicId - The notation public identifier, or null if not
                 available.
systemId - The notation system identifier.
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
DTDHandler.notationDecl(java.lang.String, java.lang.String, java.lang.String)


"
DefaultHandler,"processingInstruction(String target, String data)",void,Receive notification of a processing instruction.,"

processingInstruction
public void processingInstruction(String target,
                                  String data)
                           throws SAXException
Receive notification of a processing instruction.

 By default, do nothing.  Application writers may override this
 method in a subclass to take specific actions for each
 processing instruction, such as setting status variables or
 invoking other methods.

Specified by:
processingInstruction in interface ContentHandler
Parameters:
target - The processing instruction target.
data - The processing instruction data, or null if
             none is supplied.
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
ContentHandler.processingInstruction(java.lang.String, java.lang.String)


"
DefaultHandler,"resolveEntity(String publicId, String systemId)",InputSource,Resolve an external entity.,"

resolveEntity
public InputSource resolveEntity(String publicId,
                                 String systemId)
                          throws IOException,
                                 SAXException
Resolve an external entity.

 Always return null, so that the parser will use the system
 identifier provided in the XML document.  This method implements
 the SAX default behaviour: application writers can override it
 in a subclass to do special translations such as catalog lookups
 or URI redirection.

Specified by:
resolveEntity in interface EntityResolver
Parameters:
publicId - The public identifier, or null if none is
                 available.
systemId - The system identifier provided in the XML
                 document.
Returns:
The new input source, or null to require the
         default behaviour.
Throws:
IOException - If there is an error setting
            up the new input source.
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
EntityResolver.resolveEntity(java.lang.String, java.lang.String)


"
DefaultHandler,setDocumentLocator(Locator locator),void,Receive a Locator object for document events.,"

setDocumentLocator
public void setDocumentLocator(Locator locator)
Receive a Locator object for document events.

 By default, do nothing.  Application writers may override this
 method in a subclass if they wish to store the locator for use
 with other document events.

Specified by:
setDocumentLocator in interface ContentHandler
Parameters:
locator - A locator for all SAX document events.
See Also:
ContentHandler.setDocumentLocator(org.xml.sax.Locator), 
Locator


"
DefaultHandler,skippedEntity(String name),void,Receive notification of a skipped entity.,"

skippedEntity
public void skippedEntity(String name)
                   throws SAXException
Receive notification of a skipped entity.

 By default, do nothing.  Application writers may override this
 method in a subclass to take specific actions for each
 processing instruction, such as setting status variables or
 invoking other methods.

Specified by:
skippedEntity in interface ContentHandler
Parameters:
name - The name of the skipped entity.
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
ContentHandler.processingInstruction(java.lang.String, java.lang.String)


"
DefaultHandler,startDocument(),void,Receive notification of the beginning of the document.,"

startDocument
public void startDocument()
                   throws SAXException
Receive notification of the beginning of the document.

 By default, do nothing.  Application writers may override this
 method in a subclass to take specific actions at the beginning
 of a document (such as allocating the root node of a tree or
 creating an output file).

Specified by:
startDocument in interface ContentHandler
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
ContentHandler.startDocument()


"
DefaultHandler,"startElement(String uri, String localName, String qName, Attributes attributes)",void,Receive notification of the start of an element.,"

startElement
public void startElement(String uri,
                         String localName,
                         String qName,
                         Attributes attributes)
                  throws SAXException
Receive notification of the start of an element.

 By default, do nothing.  Application writers may override this
 method in a subclass to take specific actions at the start of
 each element (such as allocating a new tree node or writing
 output to a file).

Specified by:
startElement in interface ContentHandler
Parameters:
uri - The Namespace URI, or the empty string if the
        element has no Namespace URI or if Namespace
        processing is not being performed.
localName - The local name (without prefix), or the
        empty string if Namespace processing is not being
        performed.
qName - The qualified name (with prefix), or the
        empty string if qualified names are not available.
attributes - The attributes attached to the element.  If
        there are no attributes, it shall be an empty
        Attributes object.
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
ContentHandler.startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)


"
DefaultHandler,"startPrefixMapping(String prefix, String uri)",void,Receive notification of the start of a Namespace mapping.,"

startPrefixMapping
public void startPrefixMapping(String prefix,
                               String uri)
                        throws SAXException
Receive notification of the start of a Namespace mapping.

 By default, do nothing.  Application writers may override this
 method in a subclass to take specific actions at the start of
 each Namespace prefix scope (such as storing the prefix mapping).

Specified by:
startPrefixMapping in interface ContentHandler
Parameters:
prefix - The Namespace prefix being declared.
uri - The Namespace URI mapped to the prefix.
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
ContentHandler.startPrefixMapping(java.lang.String, java.lang.String)


"
DefaultHandler,"unparsedEntityDecl(String name, String publicId, String systemId, String notationName)",void,Receive notification of an unparsed entity declaration.,"

unparsedEntityDecl
public void unparsedEntityDecl(String name,
                               String publicId,
                               String systemId,
                               String notationName)
                        throws SAXException
Receive notification of an unparsed entity declaration.

 By default, do nothing.  Application writers may override this
 method in a subclass to keep track of the unparsed entities
 declared in a document.

Specified by:
unparsedEntityDecl in interface DTDHandler
Parameters:
name - The entity name.
publicId - The entity public identifier, or null if not
                 available.
systemId - The entity system identifier.
notationName - The name of the associated notation.
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
DTDHandler.unparsedEntityDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String)


"
DefaultHandler,warning(SAXParseException e),void,Receive notification of a parser warning.,"

warning
public void warning(SAXParseException e)
             throws SAXException
Receive notification of a parser warning.

 The default implementation does nothing.  Application writers
 may override this method in a subclass to take specific actions
 for each warning, such as inserting the message in a log file or
 printing it to the console.

Specified by:
warning in interface ErrorHandler
Parameters:
e - The warning information encoded as an exception.
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
ErrorHandler.warning(org.xml.sax.SAXParseException), 
SAXParseException


"
LocatorImpl,getColumnNumber(),int,Return the saved column number (1-based).,"

getColumnNumber
public int getColumnNumber()
Return the saved column number (1-based).

Specified by:
getColumnNumber in interface Locator
Returns:
The column number as an integer, or -1 if none is available.
See Also:
Locator.getColumnNumber(), 
setColumnNumber(int)


"
LocatorImpl,getLineNumber(),int,Return the saved line number (1-based).,"

getLineNumber
public int getLineNumber()
Return the saved line number (1-based).

Specified by:
getLineNumber in interface Locator
Returns:
The line number as an integer, or -1 if none is available.
See Also:
Locator.getLineNumber(), 
setLineNumber(int)


"
LocatorImpl,getPublicId(),String,Return the saved public identifier.,"

getPublicId
public String getPublicId()
Return the saved public identifier.

Specified by:
getPublicId in interface Locator
Returns:
The public identifier as a string, or null if none
         is available.
See Also:
Locator.getPublicId(), 
setPublicId(java.lang.String)


"
LocatorImpl,getSystemId(),String,Return the saved system identifier.,"

getSystemId
public String getSystemId()
Return the saved system identifier.

Specified by:
getSystemId in interface Locator
Returns:
The system identifier as a string, or null if none
         is available.
See Also:
Locator.getSystemId(), 
setSystemId(java.lang.String)


"
LocatorImpl,setColumnNumber(int columnNumber),void,Set the column number for this locator (1-based).,"

setColumnNumber
public void setColumnNumber(int columnNumber)
Set the column number for this locator (1-based).

Parameters:
columnNumber - The column number, or -1 if none is available.
See Also:
getColumnNumber()


"
LocatorImpl,setLineNumber(int lineNumber),void,Set the line number for this locator (1-based).,"

setLineNumber
public void setLineNumber(int lineNumber)
Set the line number for this locator (1-based).

Parameters:
lineNumber - The line number, or -1 if none is available.
See Also:
getLineNumber()


"
LocatorImpl,setPublicId(String publicId),void,Set the public identifier for this locator.,"

setPublicId
public void setPublicId(String publicId)
Set the public identifier for this locator.

Parameters:
publicId - The new public identifier, or null
        if none is available.
See Also:
getPublicId()


"
LocatorImpl,setSystemId(String systemId),void,Set the system identifier for this locator.,"

setSystemId
public void setSystemId(String systemId)
Set the system identifier for this locator.

Parameters:
systemId - The new system identifier, or null
        if none is available.
See Also:
getSystemId()


"
NamespaceSupport,"declarePrefix(String prefix, String uri)",boolean,Declare a Namespace prefix.,"

declarePrefix
public boolean declarePrefix(String prefix,
                             String uri)
Declare a Namespace prefix.  All prefixes must be declared
 before they are referenced.  For example, a SAX driver (parser)
 would scan an element's attributes
 in two passes:  first for namespace declarations,
 then a second pass using processName() to
 interpret prefixes against (potentially redefined) prefixes.

 This method declares a prefix in the current Namespace
 context; the prefix will remain in force until this context
 is popped, unless it is shadowed in a descendant context.
To declare the default element Namespace, use the empty string as
 the prefix.
Note that there is an asymmetry in this library: getPrefix will not return the """" prefix,
 even if you have declared a default element namespace.
 To check for a default namespace,
 you have to look it up explicitly using getURI.
 This asymmetry exists to make it easier to look up prefixes
 for attribute names, where the default prefix is not allowed.

Parameters:
prefix - The prefix to declare, or the empty string to
  indicate the default element namespace.  This may never have
  the value ""xml"" or ""xmlns"".
uri - The Namespace URI to associate with the prefix.
Returns:
true if the prefix was legal, false otherwise
See Also:
processName(java.lang.String, java.lang.String[], boolean), 
getURI(java.lang.String), 
getPrefix(java.lang.String)


"
NamespaceSupport,getDeclaredPrefixes(),Enumeration,Return an enumeration of all prefixes declared in this context.,"

getDeclaredPrefixes
public Enumeration getDeclaredPrefixes()
Return an enumeration of all prefixes declared in this context.

 The empty (default) prefix will be included in this
 enumeration; note that this behaviour differs from that of
 getPrefix(java.lang.String) and getPrefixes().

Returns:
An enumeration of all prefixes declared in this
         context.
See Also:
getPrefixes(), 
getURI(java.lang.String)


"
NamespaceSupport,getPrefix(String uri),String,Return one of the prefixes mapped to a Namespace URI.,"

getPrefix
public String getPrefix(String uri)
Return one of the prefixes mapped to a Namespace URI.

 If more than one prefix is currently mapped to the same
 URI, this method will make an arbitrary selection; if you
 want all of the prefixes, use the getPrefixes()
 method instead.
Note: this will never return the empty (default) prefix;
 to check for a default prefix, use the getURI
 method with an argument of """".

Parameters:
uri - the namespace URI
Returns:
one of the prefixes currently mapped to the URI supplied,
         or null if none is mapped or if the URI is assigned to
         the default namespace
See Also:
getPrefixes(java.lang.String), 
getURI(java.lang.String)


"
NamespaceSupport,getPrefixes(),Enumeration,Return an enumeration of all prefixes whose declarations are active in the current context.,"

getPrefixes
public Enumeration getPrefixes()
Return an enumeration of all prefixes whose declarations are
 active in the current context.
 This includes declarations from parent contexts that have
 not been overridden.

 Note: if there is a default prefix, it will not be
 returned in this enumeration; check for the default prefix
 using the getURI with an argument of """".

Returns:
An enumeration of prefixes (never empty).
See Also:
getDeclaredPrefixes(), 
getURI(java.lang.String)


"
NamespaceSupport,getPrefixes(String uri),Enumeration,Return an enumeration of all prefixes for a given URI whose declarations are active in the current context.,"

getPrefixes
public Enumeration getPrefixes(String uri)
Return an enumeration of all prefixes for a given URI whose
 declarations are active in the current context.
 This includes declarations from parent contexts that have
 not been overridden.

 This method returns prefixes mapped to a specific Namespace
 URI.  The xml: prefix will be included.  If you want only one
 prefix that's mapped to the Namespace URI, and you don't care
 which one you get, use the getPrefix
  method instead.
Note: the empty (default) prefix is never included
 in this enumeration; to check for the presence of a default
 Namespace, use the getURI method with an
 argument of """".

Parameters:
uri - The Namespace URI.
Returns:
An enumeration of prefixes (never empty).
See Also:
getPrefix(java.lang.String), 
getDeclaredPrefixes(), 
getURI(java.lang.String)


"
NamespaceSupport,getURI(String prefix),String,Look up a prefix and get the currently-mapped Namespace URI.,"

getURI
public String getURI(String prefix)
Look up a prefix and get the currently-mapped Namespace URI.

 This method looks up the prefix in the current context.
 Use the empty string ("""") for the default Namespace.

Parameters:
prefix - The prefix to look up.
Returns:
The associated Namespace URI, or null if the prefix
         is undeclared in this context.
See Also:
getPrefix(java.lang.String), 
getPrefixes()


"
NamespaceSupport,isNamespaceDeclUris(),boolean,Returns true if namespace declaration attributes are placed into a namespace.,"

isNamespaceDeclUris
public boolean isNamespaceDeclUris()
Returns true if namespace declaration attributes are placed into
 a namespace.  This behavior is not the default.

Since:
SAX 2.1alpha


"
NamespaceSupport,popContext(),void,Revert to the previous Namespace context.,"

popContext
public void popContext()
Revert to the previous Namespace context.

 Normally, you should pop the context at the end of each
 XML element.  After popping the context, all Namespace prefix
 mappings that were previously in force are restored.
You must not attempt to declare additional Namespace
 prefixes after popping a context, unless you push another
 context first.

See Also:
pushContext()


"
NamespaceSupport,"processName(String qName, String[] parts, boolean isAttribute)",String[],"Process a raw XML qualified name, after all declarations in the current context have been handled by declarePrefix().","

processName
public String[] processName(String qName,
                            String[] parts,
                            boolean isAttribute)
Process a raw XML qualified name, after all declarations in the
 current context have been handled by declarePrefix().

 This method processes a raw XML qualified name in the
 current context by removing the prefix and looking it up among
 the prefixes currently declared.  The return value will be the
 array supplied by the caller, filled in as follows:

parts[0]
The Namespace URI, or an empty string if none is
  in use.
parts[1]
The local name (without prefix).
parts[2]
The original raw name.

All of the strings in the array will be internalized.  If
 the raw name has a prefix that has not been declared, then
 the return value will be null.
Note that attribute names are processed differently than
 element names: an unprefixed element name will receive the
 default Namespace (if any), while an unprefixed attribute name
 will not.

Parameters:
qName - The XML qualified name to be processed.
parts - An array supplied by the caller, capable of
        holding at least three members.
isAttribute - A flag indicating whether this is an
        attribute name (true) or an element name (false).
Returns:
The supplied array holding three internalized strings
        representing the Namespace URI (or empty string), the
        local name, and the XML qualified name; or null if there
        is an undeclared prefix.
See Also:
declarePrefix(java.lang.String, java.lang.String), 
String.intern()


"
NamespaceSupport,pushContext(),void,Start a new Namespace context.,"

pushContext
public void pushContext()
Start a new Namespace context.
 The new context will automatically inherit
 the declarations of its parent context, but it will also keep
 track of which declarations were made within this context.

 Event callback code should start a new context once per element.
 This means being ready to call this in either of two places.
 For elements that don't include namespace declarations, the
 ContentHandler.startElement() callback is the right place.
 For elements with such a declaration, it'd done in the first
 ContentHandler.startPrefixMapping() callback.
 A boolean flag can be used to
 track whether a context has been started yet.  When either of
 those methods is called, it checks the flag to see if a new context
 needs to be started.  If so, it starts the context and sets the
 flag.  After ContentHandler.startElement()
 does that, it always clears the flag.

 Normally, SAX drivers would push a new context at the beginning
 of each XML element.  Then they perform a first pass over the
 attributes to process all namespace declarations, making
 ContentHandler.startPrefixMapping() callbacks.
 Then a second pass is made, to determine the namespace-qualified
 names for all attributes and for the element name.
 Finally all the information for the
 ContentHandler.startElement() callback is available,
 so it can then be made.

 The Namespace support object always starts with a base context
 already in force: in this context, only the ""xml"" prefix is
 declared.

See Also:
ContentHandler, 
popContext()


"
NamespaceSupport,reset(),void,Reset this Namespace support object for reuse.,"

reset
public void reset()
Reset this Namespace support object for reuse.

 It is necessary to invoke this method before reusing the
 Namespace support object for a new session.  If namespace
 declaration URIs are to be supported, that flag must also
 be set to a non-default value.
 

See Also:
setNamespaceDeclUris(boolean)


"
NamespaceSupport,setNamespaceDeclUris(boolean value),void,Controls whether namespace declaration attributes are placed into the NSDECL namespace by processName().,"

setNamespaceDeclUris
public void setNamespaceDeclUris(boolean value)
Controls whether namespace declaration attributes are placed
 into the NSDECL namespace
 by processName().  This may only be
 changed before any contexts have been pushed.

Throws:
IllegalStateException - when attempting to set this
  after any context has been pushed.
Since:
SAX 2.1alpha


"
ParserAdapter,"characters(char[] ch, int start, int length)",void,Adapter implementation method; do not call.,"

characters
public void characters(char[] ch,
                       int start,
                       int length)
                throws SAXException
Adapter implementation method; do not call.
 Adapt a SAX1 characters event.

Specified by:
characters in interface DocumentHandler
Parameters:
ch - An array of characters.
start - The starting position in the array.
length - The number of characters to use.
Throws:
SAXException - The client may raise a
            processing exception.
See Also:
DocumentHandler.characters(char[], int, int)


"
ParserAdapter,endDocument(),void,Adapter implementation method; do not call.,"

endDocument
public void endDocument()
                 throws SAXException
Adapter implementation method; do not call.
 Adapt a SAX1 end document event.

Specified by:
endDocument in interface DocumentHandler
Throws:
SAXException - The client may raise a
            processing exception.
See Also:
DocumentHandler.endDocument()


"
ParserAdapter,endElement(String qName),void,Adapter implementation method; do not call.,"

endElement
public void endElement(String qName)
                throws SAXException
Adapter implementation method; do not call.
 Adapt a SAX1 end element event.

Specified by:
endElement in interface DocumentHandler
Parameters:
qName - The qualified (prefixed) name.
Throws:
SAXException - The client may raise a
            processing exception.
See Also:
DocumentHandler.endElement(java.lang.String)


"
ParserAdapter,getContentHandler(),ContentHandler,Return the current content handler.,"

getContentHandler
public ContentHandler getContentHandler()
Return the current content handler.

Specified by:
getContentHandler in interface XMLReader
Returns:
The current content handler, or null if none was supplied.
See Also:
XMLReader.getEntityResolver()


"
ParserAdapter,getDTDHandler(),DTDHandler,Return the current DTD handler.,"

getDTDHandler
public DTDHandler getDTDHandler()
Return the current DTD handler.

Specified by:
getDTDHandler in interface XMLReader
Returns:
the current DTD handler, or null if none was supplied
See Also:
XMLReader.getEntityResolver()


"
ParserAdapter,getEntityResolver(),EntityResolver,Return the current entity resolver.,"

getEntityResolver
public EntityResolver getEntityResolver()
Return the current entity resolver.

Specified by:
getEntityResolver in interface XMLReader
Returns:
The current entity resolver, or null if none was supplied.
See Also:
XMLReader.getEntityResolver()


"
ParserAdapter,getErrorHandler(),ErrorHandler,Return the current error handler.,"

getErrorHandler
public ErrorHandler getErrorHandler()
Return the current error handler.

Specified by:
getErrorHandler in interface XMLReader
Returns:
The current error handler, or null if none was supplied.
See Also:
XMLReader.getEntityResolver()


"
ParserAdapter,getFeature(String name),boolean,Check a parser feature flag.,"

getFeature
public boolean getFeature(String name)
                   throws SAXNotRecognizedException,
                          SAXNotSupportedException
Check a parser feature flag.

 The only features recognized are namespaces and
 namespace-prefixes.

Specified by:
getFeature in interface XMLReader
Parameters:
name - The feature name, as a complete URI.
Returns:
The current feature value.
Throws:
SAXNotRecognizedException - If the feature
            value can't be assigned or retrieved.
SAXNotSupportedException - If the
            feature is not currently readable.
See Also:
XMLReader.setFeature(java.lang.String, boolean)


"
ParserAdapter,getProperty(String name),Object,Get a parser property.,"

getProperty
public Object getProperty(String name)
                   throws SAXNotRecognizedException,
                          SAXNotSupportedException
Get a parser property.

 No properties are currently recognized.

Specified by:
getProperty in interface XMLReader
Parameters:
name - The property name.
Returns:
The property value.
Throws:
SAXNotRecognizedException - If the property
            value can't be assigned or retrieved.
SAXNotSupportedException - If the property
            value is not currently readable.
See Also:
XMLReader.getProperty(java.lang.String)


"
ParserAdapter,"ignorableWhitespace(char[] ch, int start, int length)",void,Adapter implementation method; do not call.,"

ignorableWhitespace
public void ignorableWhitespace(char[] ch,
                                int start,
                                int length)
                         throws SAXException
Adapter implementation method; do not call.
 Adapt a SAX1 ignorable whitespace event.

Specified by:
ignorableWhitespace in interface DocumentHandler
Parameters:
ch - An array of characters.
start - The starting position in the array.
length - The number of characters to use.
Throws:
SAXException - The client may raise a
            processing exception.
See Also:
DocumentHandler.ignorableWhitespace(char[], int, int)


"
ParserAdapter,parse(InputSource input),void,Parse an XML document.,"

parse
public void parse(InputSource input)
           throws IOException,
                  SAXException
Parse an XML document.

Specified by:
parse in interface XMLReader
Parameters:
input - An input source for the document.
Throws:
IOException - If there is a problem reading
            the raw content of the document.
SAXException - If there is a problem
            processing the document.
See Also:
parse(java.lang.String), 
Parser.parse(org.xml.sax.InputSource)


"
ParserAdapter,parse(String systemId),void,Parse an XML document.,"

parse
public void parse(String systemId)
           throws IOException,
                  SAXException
Parse an XML document.

Specified by:
parse in interface XMLReader
Parameters:
systemId - The absolute URL of the document.
Throws:
IOException - If there is a problem reading
            the raw content of the document.
SAXException - If there is a problem
            processing the document.
See Also:
parse(org.xml.sax.InputSource), 
Parser.parse(java.lang.String)


"
ParserAdapter,"processingInstruction(String target, String data)",void,Adapter implementation method; do not call.,"

processingInstruction
public void processingInstruction(String target,
                                  String data)
                           throws SAXException
Adapter implementation method; do not call.
 Adapt a SAX1 processing instruction event.

Specified by:
processingInstruction in interface DocumentHandler
Parameters:
target - The processing instruction target.
data - The remainder of the processing instruction
Throws:
SAXException - The client may raise a
            processing exception.
See Also:
DocumentHandler.processingInstruction(java.lang.String, java.lang.String)


"
ParserAdapter,setContentHandler(ContentHandler handler),void,Set the content handler.,"

setContentHandler
public void setContentHandler(ContentHandler handler)
Set the content handler.

Specified by:
setContentHandler in interface XMLReader
Parameters:
handler - the new content handler
See Also:
XMLReader.setEntityResolver(org.xml.sax.EntityResolver)


"
ParserAdapter,setDocumentLocator(Locator locator),void,Adapter implementation method; do not call.,"

setDocumentLocator
public void setDocumentLocator(Locator locator)
Adapter implementation method; do not call.
 Adapt a SAX1 document locator event.

Specified by:
setDocumentLocator in interface DocumentHandler
Parameters:
locator - A document locator.
See Also:
ContentHandler.setDocumentLocator(org.xml.sax.Locator)


"
ParserAdapter,setDTDHandler(DTDHandler handler),void,Set the DTD handler.,"

setDTDHandler
public void setDTDHandler(DTDHandler handler)
Set the DTD handler.

Specified by:
setDTDHandler in interface XMLReader
Parameters:
handler - the new DTD handler
See Also:
XMLReader.setEntityResolver(org.xml.sax.EntityResolver)


"
ParserAdapter,setEntityResolver(EntityResolver resolver),void,Set the entity resolver.,"

setEntityResolver
public void setEntityResolver(EntityResolver resolver)
Set the entity resolver.

Specified by:
setEntityResolver in interface XMLReader
Parameters:
resolver - The new entity resolver.
See Also:
XMLReader.setEntityResolver(org.xml.sax.EntityResolver)


"
ParserAdapter,setErrorHandler(ErrorHandler handler),void,Set the error handler.,"

setErrorHandler
public void setErrorHandler(ErrorHandler handler)
Set the error handler.

Specified by:
setErrorHandler in interface XMLReader
Parameters:
handler - The new error handler.
See Also:
XMLReader.setEntityResolver(org.xml.sax.EntityResolver)


"
ParserAdapter,"setFeature(String name, boolean value)",void,Set a feature flag for the parser.,"

setFeature
public void setFeature(String name,
                       boolean value)
                throws SAXNotRecognizedException,
                       SAXNotSupportedException
Set a feature flag for the parser.

 The only features recognized are namespaces and
 namespace-prefixes.

Specified by:
setFeature in interface XMLReader
Parameters:
name - The feature name, as a complete URI.
value - The requested feature value.
Throws:
SAXNotRecognizedException - If the feature
            can't be assigned or retrieved.
SAXNotSupportedException - If the feature
            can't be assigned that value.
See Also:
XMLReader.setFeature(java.lang.String, boolean)


"
ParserAdapter,"setProperty(String name, Object value)",void,Set a parser property.,"

setProperty
public void setProperty(String name,
                        Object value)
                 throws SAXNotRecognizedException,
                        SAXNotSupportedException
Set a parser property.

 No properties are currently recognized.

Specified by:
setProperty in interface XMLReader
Parameters:
name - The property name.
value - The property value.
Throws:
SAXNotRecognizedException - If the property
            value can't be assigned or retrieved.
SAXNotSupportedException - If the property
            can't be assigned that value.
See Also:
XMLReader.setProperty(java.lang.String, java.lang.Object)


"
ParserAdapter,startDocument(),void,Adapter implementation method; do not call.,"

startDocument
public void startDocument()
                   throws SAXException
Adapter implementation method; do not call.
 Adapt a SAX1 start document event.

Specified by:
startDocument in interface DocumentHandler
Throws:
SAXException - The client may raise a
            processing exception.
See Also:
DocumentHandler.startDocument()


"
ParserAdapter,"startElement(String qName, AttributeList qAtts)",void,Adapter implementation method; do not call.,"

startElement
public void startElement(String qName,
                         AttributeList qAtts)
                  throws SAXException
Adapter implementation method; do not call.
 Adapt a SAX1 startElement event.

 If necessary, perform Namespace processing.

Specified by:
startElement in interface DocumentHandler
Parameters:
qName - The qualified (prefixed) name.
qAtts - The XML attribute list (with qnames).
Throws:
SAXException - The client may raise a
            processing exception.
See Also:
DocumentHandler.endElement(java.lang.String), 
AttributeList


"
ParserFactory,makeParser(),static Parser,Deprecated.,"

makeParser
public static Parser makeParser()
                         throws ClassNotFoundException,
                                IllegalAccessException,
                                InstantiationException,
                                NullPointerException,
                                ClassCastException
Deprecated. 
Create a new SAX parser using the `org.xml.sax.parser' system property.

 The named class must exist and must implement the
 Parser interface.

Throws:
NullPointerException - There is no value
            for the `org.xml.sax.parser' system property.
ClassNotFoundException - The SAX parser
            class was not found (check your CLASSPATH).
IllegalAccessException - The SAX parser class was
            found, but you do not have permission to load
            it.
InstantiationException - The SAX parser class was
            found but could not be instantiated.
ClassCastException - The SAX parser class
            was found and instantiated, but does not implement
            org.xml.sax.Parser.
See Also:
makeParser(java.lang.String), 
Parser


"
ParserFactory,makeParser(String className),static Parser,Deprecated.,"

makeParser
public static Parser makeParser(String className)
                         throws ClassNotFoundException,
                                IllegalAccessException,
                                InstantiationException,
                                ClassCastException
Deprecated. 
Create a new SAX parser object using the class name provided.

 The named class must exist and must implement the
 Parser interface.

Parameters:
className - A string containing the name of the
                  SAX parser class.
Throws:
ClassNotFoundException - The SAX parser
            class was not found (check your CLASSPATH).
IllegalAccessException - The SAX parser class was
            found, but you do not have permission to load
            it.
InstantiationException - The SAX parser class was
            found but could not be instantiated.
ClassCastException - The SAX parser class
            was found and instantiated, but does not implement
            org.xml.sax.Parser.
See Also:
makeParser(), 
Parser


"
XMLFilterImpl,"characters(char[] ch, int start, int length)",void,Filter a character data event.,"

characters
public void characters(char[] ch,
                       int start,
                       int length)
                throws SAXException
Filter a character data event.

Specified by:
characters in interface ContentHandler
Parameters:
ch - An array of characters.
start - The starting position in the array.
length - The number of characters to use from the array.
Throws:
SAXException - The client may throw
            an exception during processing.
See Also:
ContentHandler.ignorableWhitespace(char[], int, int), 
Locator


"
XMLFilterImpl,endDocument(),void,Filter an end document event.,"

endDocument
public void endDocument()
                 throws SAXException
Filter an end document event.

Specified by:
endDocument in interface ContentHandler
Throws:
SAXException - The client may throw
            an exception during processing.
See Also:
ContentHandler.startDocument()


"
XMLFilterImpl,"endElement(String uri, String localName, String qName)",void,Filter an end element event.,"

endElement
public void endElement(String uri,
                       String localName,
                       String qName)
                throws SAXException
Filter an end element event.

Specified by:
endElement in interface ContentHandler
Parameters:
uri - The element's Namespace URI, or the empty string.
localName - The element's local name, or the empty string.
qName - The element's qualified (prefixed) name, or the empty
        string.
Throws:
SAXException - The client may throw
            an exception during processing.


"
XMLFilterImpl,endPrefixMapping(String prefix),void,Filter an end Namespace prefix mapping event.,"

endPrefixMapping
public void endPrefixMapping(String prefix)
                      throws SAXException
Filter an end Namespace prefix mapping event.

Specified by:
endPrefixMapping in interface ContentHandler
Parameters:
prefix - The Namespace prefix.
Throws:
SAXException - The client may throw
            an exception during processing.
See Also:
ContentHandler.startPrefixMapping(java.lang.String, java.lang.String), 
ContentHandler.endElement(java.lang.String, java.lang.String, java.lang.String)


"
XMLFilterImpl,error(SAXParseException e),void,Filter an error event.,"

error
public void error(SAXParseException e)
           throws SAXException
Filter an error event.

Specified by:
error in interface ErrorHandler
Parameters:
e - The error as an exception.
Throws:
SAXException - The client may throw
            an exception during processing.
See Also:
SAXParseException


"
XMLFilterImpl,fatalError(SAXParseException e),void,Filter a fatal error event.,"

fatalError
public void fatalError(SAXParseException e)
                throws SAXException
Filter a fatal error event.

Specified by:
fatalError in interface ErrorHandler
Parameters:
e - The error as an exception.
Throws:
SAXException - The client may throw
            an exception during processing.
See Also:
SAXParseException


"
XMLFilterImpl,getContentHandler(),ContentHandler,Get the content event handler.,"

getContentHandler
public ContentHandler getContentHandler()
Get the content event handler.

Specified by:
getContentHandler in interface XMLReader
Returns:
The current content handler, or null if none was set.
See Also:
XMLReader.setContentHandler(org.xml.sax.ContentHandler)


"
XMLFilterImpl,getDTDHandler(),DTDHandler,Get the current DTD event handler.,"

getDTDHandler
public DTDHandler getDTDHandler()
Get the current DTD event handler.

Specified by:
getDTDHandler in interface XMLReader
Returns:
The current DTD handler, or null if none was set.
See Also:
XMLReader.setDTDHandler(org.xml.sax.DTDHandler)


"
XMLFilterImpl,getEntityResolver(),EntityResolver,Get the current entity resolver.,"

getEntityResolver
public EntityResolver getEntityResolver()
Get the current entity resolver.

Specified by:
getEntityResolver in interface XMLReader
Returns:
The current entity resolver, or null if none was set.
See Also:
XMLReader.setEntityResolver(org.xml.sax.EntityResolver)


"
XMLFilterImpl,getErrorHandler(),ErrorHandler,Get the current error event handler.,"

getErrorHandler
public ErrorHandler getErrorHandler()
Get the current error event handler.

Specified by:
getErrorHandler in interface XMLReader
Returns:
The current error handler, or null if none was set.
See Also:
XMLReader.setErrorHandler(org.xml.sax.ErrorHandler)


"
XMLFilterImpl,getFeature(String name),boolean,Look up the value of a feature.,"

getFeature
public boolean getFeature(String name)
                   throws SAXNotRecognizedException,
                          SAXNotSupportedException
Look up the value of a feature.

 This will always fail if the parent is null.

Specified by:
getFeature in interface XMLReader
Parameters:
name - The feature name.
Returns:
The current value of the feature.
Throws:
SAXNotRecognizedException - If the feature
            value can't be assigned or retrieved from the parent.
SAXNotSupportedException - When the
            parent recognizes the feature name but
            cannot determine its value at this time.
See Also:
XMLReader.setFeature(java.lang.String, boolean)


"
XMLFilterImpl,getParent(),XMLReader,Get the parent reader.,"

getParent
public XMLReader getParent()
Get the parent reader.

Specified by:
getParent in interface XMLFilter
Returns:
The parent XML reader, or null if none is set.
See Also:
setParent(org.xml.sax.XMLReader)


"
XMLFilterImpl,getProperty(String name),Object,Look up the value of a property.,"

getProperty
public Object getProperty(String name)
                   throws SAXNotRecognizedException,
                          SAXNotSupportedException
Look up the value of a property.

Specified by:
getProperty in interface XMLReader
Parameters:
name - The property name.
Returns:
The current value of the property.
Throws:
SAXNotRecognizedException - If the property
            value can't be assigned or retrieved from the parent.
SAXNotSupportedException - When the
            parent recognizes the property name but
            cannot determine its value at this time.
See Also:
XMLReader.setProperty(java.lang.String, java.lang.Object)


"
XMLFilterImpl,"ignorableWhitespace(char[] ch, int start, int length)",void,Filter an ignorable whitespace event.,"

ignorableWhitespace
public void ignorableWhitespace(char[] ch,
                                int start,
                                int length)
                         throws SAXException
Filter an ignorable whitespace event.

Specified by:
ignorableWhitespace in interface ContentHandler
Parameters:
ch - An array of characters.
start - The starting position in the array.
length - The number of characters to use from the array.
Throws:
SAXException - The client may throw
            an exception during processing.
See Also:
ContentHandler.characters(char[], int, int)


"
XMLFilterImpl,"notationDecl(String name, String publicId, String systemId)",void,Filter a notation declaration event.,"

notationDecl
public void notationDecl(String name,
                         String publicId,
                         String systemId)
                  throws SAXException
Filter a notation declaration event.

Specified by:
notationDecl in interface DTDHandler
Parameters:
name - The notation name.
publicId - The notation's public identifier, or null.
systemId - The notation's system identifier, or null.
Throws:
SAXException - The client may throw
            an exception during processing.
See Also:
DTDHandler.unparsedEntityDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String), 
Attributes


"
XMLFilterImpl,parse(InputSource input),void,Parse a document.,"

parse
public void parse(InputSource input)
           throws SAXException,
                  IOException
Parse a document.

Specified by:
parse in interface XMLReader
Parameters:
input - The input source for the document entity.
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
IOException - An IO exception from the parser,
            possibly from a byte stream or character stream
            supplied by the application.
See Also:
InputSource, 
XMLReader.parse(java.lang.String), 
XMLReader.setEntityResolver(org.xml.sax.EntityResolver), 
XMLReader.setDTDHandler(org.xml.sax.DTDHandler), 
XMLReader.setContentHandler(org.xml.sax.ContentHandler), 
XMLReader.setErrorHandler(org.xml.sax.ErrorHandler)


"
XMLFilterImpl,parse(String systemId),void,Parse a document.,"

parse
public void parse(String systemId)
           throws SAXException,
                  IOException
Parse a document.

Specified by:
parse in interface XMLReader
Parameters:
systemId - The system identifier as a fully-qualified URI.
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
IOException - An IO exception from the parser,
            possibly from a byte stream or character stream
            supplied by the application.
See Also:
XMLReader.parse(org.xml.sax.InputSource)


"
XMLFilterImpl,"processingInstruction(String target, String data)",void,Filter a processing instruction event.,"

processingInstruction
public void processingInstruction(String target,
                                  String data)
                           throws SAXException
Filter a processing instruction event.

Specified by:
processingInstruction in interface ContentHandler
Parameters:
target - The processing instruction target.
data - The text following the target.
Throws:
SAXException - The client may throw
            an exception during processing.


"
XMLFilterImpl,"resolveEntity(String publicId, String systemId)",InputSource,Filter an external entity resolution.,"

resolveEntity
public InputSource resolveEntity(String publicId,
                                 String systemId)
                          throws SAXException,
                                 IOException
Filter an external entity resolution.

Specified by:
resolveEntity in interface EntityResolver
Parameters:
publicId - The entity's public identifier, or null.
systemId - The entity's system identifier.
Returns:
A new InputSource or null for the default.
Throws:
SAXException - The client may throw
            an exception during processing.
IOException - The client may throw an
            I/O-related exception while obtaining the
            new InputSource.
See Also:
InputSource


"
XMLFilterImpl,setContentHandler(ContentHandler handler),void,Set the content event handler.,"

setContentHandler
public void setContentHandler(ContentHandler handler)
Set the content event handler.

Specified by:
setContentHandler in interface XMLReader
Parameters:
handler - the new content handler
See Also:
XMLReader.getContentHandler()


"
XMLFilterImpl,setDocumentLocator(Locator locator),void,Filter a new document locator event.,"

setDocumentLocator
public void setDocumentLocator(Locator locator)
Filter a new document locator event.

Specified by:
setDocumentLocator in interface ContentHandler
Parameters:
locator - The document locator.
See Also:
Locator


"
XMLFilterImpl,setDTDHandler(DTDHandler handler),void,Set the DTD event handler.,"

setDTDHandler
public void setDTDHandler(DTDHandler handler)
Set the DTD event handler.

Specified by:
setDTDHandler in interface XMLReader
Parameters:
handler - the new DTD handler
See Also:
XMLReader.getDTDHandler()


"
XMLFilterImpl,setEntityResolver(EntityResolver resolver),void,Set the entity resolver.,"

setEntityResolver
public void setEntityResolver(EntityResolver resolver)
Set the entity resolver.

Specified by:
setEntityResolver in interface XMLReader
Parameters:
resolver - The new entity resolver.
See Also:
XMLReader.getEntityResolver()


"
XMLFilterImpl,setErrorHandler(ErrorHandler handler),void,Set the error event handler.,"

setErrorHandler
public void setErrorHandler(ErrorHandler handler)
Set the error event handler.

Specified by:
setErrorHandler in interface XMLReader
Parameters:
handler - the new error handler
See Also:
XMLReader.getErrorHandler()


"
XMLFilterImpl,"setFeature(String name, boolean value)",void,Set the value of a feature.,"

setFeature
public void setFeature(String name,
                       boolean value)
                throws SAXNotRecognizedException,
                       SAXNotSupportedException
Set the value of a feature.

 This will always fail if the parent is null.

Specified by:
setFeature in interface XMLReader
Parameters:
name - The feature name.
value - The requested feature value.
Throws:
SAXNotRecognizedException - If the feature
            value can't be assigned or retrieved from the parent.
SAXNotSupportedException - When the
            parent recognizes the feature name but
            cannot set the requested value.
See Also:
XMLReader.getFeature(java.lang.String)


"
XMLFilterImpl,setParent(XMLReader parent),void,Set the parent reader.,"

setParent
public void setParent(XMLReader parent)
Set the parent reader.

 This is the XMLReader from which
 this filter will obtain its events and to which it will pass its
 configuration requests.  The parent may itself be another filter.
If there is no parent reader set, any attempt to parse
 or to set or get a feature or property will fail.

Specified by:
setParent in interface XMLFilter
Parameters:
parent - The parent XML reader.
See Also:
getParent()


"
XMLFilterImpl,"setProperty(String name, Object value)",void,Set the value of a property.,"

setProperty
public void setProperty(String name,
                        Object value)
                 throws SAXNotRecognizedException,
                        SAXNotSupportedException
Set the value of a property.

 This will always fail if the parent is null.

Specified by:
setProperty in interface XMLReader
Parameters:
name - The property name.
value - The requested property value.
Throws:
SAXNotRecognizedException - If the property
            value can't be assigned or retrieved from the parent.
SAXNotSupportedException - When the
            parent recognizes the property name but
            cannot set the requested value.


"
XMLFilterImpl,skippedEntity(String name),void,Filter a skipped entity event.,"

skippedEntity
public void skippedEntity(String name)
                   throws SAXException
Filter a skipped entity event.

Specified by:
skippedEntity in interface ContentHandler
Parameters:
name - The name of the skipped entity.
Throws:
SAXException - The client may throw
            an exception during processing.


"
XMLFilterImpl,startDocument(),void,Filter a start document event.,"

startDocument
public void startDocument()
                   throws SAXException
Filter a start document event.

Specified by:
startDocument in interface ContentHandler
Throws:
SAXException - The client may throw
            an exception during processing.
See Also:
ContentHandler.endDocument()


"
XMLFilterImpl,"startElement(String uri, String localName, String qName, Attributes atts)",void,Filter a start element event.,"

startElement
public void startElement(String uri,
                         String localName,
                         String qName,
                         Attributes atts)
                  throws SAXException
Filter a start element event.

Specified by:
startElement in interface ContentHandler
Parameters:
uri - The element's Namespace URI, or the empty string.
localName - The element's local name, or the empty string.
qName - The element's qualified (prefixed) name, or the empty
        string.
atts - The element's attributes.
Throws:
SAXException - The client may throw
            an exception during processing.
See Also:
ContentHandler.endElement(java.lang.String, java.lang.String, java.lang.String), 
Attributes, 
AttributesImpl


"
XMLFilterImpl,"startPrefixMapping(String prefix, String uri)",void,Filter a start Namespace prefix mapping event.,"

startPrefixMapping
public void startPrefixMapping(String prefix,
                               String uri)
                        throws SAXException
Filter a start Namespace prefix mapping event.

Specified by:
startPrefixMapping in interface ContentHandler
Parameters:
prefix - The Namespace prefix.
uri - The Namespace URI.
Throws:
SAXException - The client may throw
            an exception during processing.
See Also:
ContentHandler.endPrefixMapping(java.lang.String), 
ContentHandler.startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)


"
XMLFilterImpl,"unparsedEntityDecl(String name, String publicId, String systemId, String notationName)",void,Filter an unparsed entity declaration event.,"

unparsedEntityDecl
public void unparsedEntityDecl(String name,
                               String publicId,
                               String systemId,
                               String notationName)
                        throws SAXException
Filter an unparsed entity declaration event.

Specified by:
unparsedEntityDecl in interface DTDHandler
Parameters:
name - The entity name.
publicId - The entity's public identifier, or null.
systemId - The entity's system identifier, or null.
notationName - The name of the associated notation.
Throws:
SAXException - The client may throw
            an exception during processing.
See Also:
DTDHandler.notationDecl(java.lang.String, java.lang.String, java.lang.String), 
Attributes


"
XMLFilterImpl,warning(SAXParseException e),void,Filter a warning event.,"

warning
public void warning(SAXParseException e)
             throws SAXException
Filter a warning event.

Specified by:
warning in interface ErrorHandler
Parameters:
e - The warning as an exception.
Throws:
SAXException - The client may throw
            an exception during processing.
See Also:
SAXParseException


"
XMLReaderAdapter,"characters(char[] ch, int start, int length)",void,Adapt a SAX2 characters event.,"

characters
public void characters(char[] ch,
                       int start,
                       int length)
                throws SAXException
Adapt a SAX2 characters event.

Specified by:
characters in interface ContentHandler
Parameters:
ch - An array of characters.
start - The starting position in the array.
length - The number of characters to use.
Throws:
SAXException - The client may raise a
            processing exception.
See Also:
ContentHandler.characters(char[], int, int)


"
XMLReaderAdapter,endDocument(),void,End document event.,"

endDocument
public void endDocument()
                 throws SAXException
End document event.

Specified by:
endDocument in interface ContentHandler
Throws:
SAXException - The client may raise a
            processing exception.
See Also:
ContentHandler.endDocument()


"
XMLReaderAdapter,"endElement(String uri, String localName, String qName)",void,Adapt a SAX2 end element event.,"

endElement
public void endElement(String uri,
                       String localName,
                       String qName)
                throws SAXException
Adapt a SAX2 end element event.

Specified by:
endElement in interface ContentHandler
Parameters:
uri - The Namespace URI.
localName - The Namespace local name.
qName - The qualified (prefixed) name.
Throws:
SAXException - The client may raise a
            processing exception.
See Also:
ContentHandler.endElement(java.lang.String, java.lang.String, java.lang.String)


"
XMLReaderAdapter,endPrefixMapping(String prefix),void,Adapt a SAX2 end prefix mapping event.,"

endPrefixMapping
public void endPrefixMapping(String prefix)
Adapt a SAX2 end prefix mapping event.

Specified by:
endPrefixMapping in interface ContentHandler
Parameters:
prefix - The prefix being mapped.
See Also:
ContentHandler.endPrefixMapping(java.lang.String)


"
XMLReaderAdapter,"ignorableWhitespace(char[] ch, int start, int length)",void,Adapt a SAX2 ignorable whitespace event.,"

ignorableWhitespace
public void ignorableWhitespace(char[] ch,
                                int start,
                                int length)
                         throws SAXException
Adapt a SAX2 ignorable whitespace event.

Specified by:
ignorableWhitespace in interface ContentHandler
Parameters:
ch - An array of characters.
start - The starting position in the array.
length - The number of characters to use.
Throws:
SAXException - The client may raise a
            processing exception.
See Also:
ContentHandler.ignorableWhitespace(char[], int, int)


"
XMLReaderAdapter,parse(InputSource input),void,Parse the document.,"

parse
public void parse(InputSource input)
           throws IOException,
                  SAXException
Parse the document.

 This method will throw an exception if the embedded
 XMLReader does not support the
 http://xml.org/sax/features/namespace-prefixes property.

Specified by:
parse in interface Parser
Parameters:
input - An input source for the document.
Throws:
IOException - If there is a problem reading
            the raw content of the document.
SAXException - If there is a problem
            processing the document.
See Also:
parse(java.lang.String), 
Parser.parse(org.xml.sax.InputSource)


"
XMLReaderAdapter,parse(String systemId),void,Parse the document.,"

parse
public void parse(String systemId)
           throws IOException,
                  SAXException
Parse the document.

 This method will throw an exception if the embedded
 XMLReader does not support the
 http://xml.org/sax/features/namespace-prefixes property.

Specified by:
parse in interface Parser
Parameters:
systemId - The absolute URL of the document.
Throws:
IOException - If there is a problem reading
            the raw content of the document.
SAXException - If there is a problem
            processing the document.
See Also:
parse(org.xml.sax.InputSource), 
Parser.parse(java.lang.String)


"
XMLReaderAdapter,"processingInstruction(String target, String data)",void,Adapt a SAX2 processing instruction event.,"

processingInstruction
public void processingInstruction(String target,
                                  String data)
                           throws SAXException
Adapt a SAX2 processing instruction event.

Specified by:
processingInstruction in interface ContentHandler
Parameters:
target - The processing instruction target.
data - The remainder of the processing instruction
Throws:
SAXException - The client may raise a
            processing exception.
See Also:
ContentHandler.processingInstruction(java.lang.String, java.lang.String)


"
XMLReaderAdapter,setDocumentHandler(DocumentHandler handler),void,Register the SAX1 document event handler.,"

setDocumentHandler
public void setDocumentHandler(DocumentHandler handler)
Register the SAX1 document event handler.

 Note that the SAX1 document handler has no Namespace
 support.

Specified by:
setDocumentHandler in interface Parser
Parameters:
handler - The new SAX1 document event handler.
See Also:
Parser.setDocumentHandler(org.xml.sax.DocumentHandler)


"
XMLReaderAdapter,setDocumentLocator(Locator locator),void,Set a document locator.,"

setDocumentLocator
public void setDocumentLocator(Locator locator)
Set a document locator.

Specified by:
setDocumentLocator in interface ContentHandler
Parameters:
locator - The document locator.
See Also:
ContentHandler.setDocumentLocator(org.xml.sax.Locator)


"
XMLReaderAdapter,setDTDHandler(DTDHandler handler),void,Register the DTD event handler.,"

setDTDHandler
public void setDTDHandler(DTDHandler handler)
Register the DTD event handler.

Specified by:
setDTDHandler in interface Parser
Parameters:
handler - The new DTD event handler.
See Also:
Parser.setDTDHandler(org.xml.sax.DTDHandler)


"
XMLReaderAdapter,setEntityResolver(EntityResolver resolver),void,Register the entity resolver.,"

setEntityResolver
public void setEntityResolver(EntityResolver resolver)
Register the entity resolver.

Specified by:
setEntityResolver in interface Parser
Parameters:
resolver - The new resolver.
See Also:
Parser.setEntityResolver(org.xml.sax.EntityResolver)


"
XMLReaderAdapter,setErrorHandler(ErrorHandler handler),void,Register the error event handler.,"

setErrorHandler
public void setErrorHandler(ErrorHandler handler)
Register the error event handler.

Specified by:
setErrorHandler in interface Parser
Parameters:
handler - The new error event handler.
See Also:
Parser.setErrorHandler(org.xml.sax.ErrorHandler)


"
XMLReaderAdapter,setLocale(Locale locale),void,Set the locale for error reporting.,"

setLocale
public void setLocale(Locale locale)
               throws SAXException
Set the locale for error reporting.

 This is not supported in SAX2, and will always throw
 an exception.

Specified by:
setLocale in interface Parser
Parameters:
locale - the locale for error reporting.
Throws:
SAXException - Thrown unless overridden.
See Also:
Parser.setLocale(java.util.Locale)


"
XMLReaderAdapter,skippedEntity(String name),void,Adapt a SAX2 skipped entity event.,"

skippedEntity
public void skippedEntity(String name)
                   throws SAXException
Adapt a SAX2 skipped entity event.

Specified by:
skippedEntity in interface ContentHandler
Parameters:
name - The name of the skipped entity.
Throws:
SAXException - Throwable by subclasses.
See Also:
ContentHandler.skippedEntity(java.lang.String)


"
XMLReaderAdapter,startDocument(),void,Start document event.,"

startDocument
public void startDocument()
                   throws SAXException
Start document event.

Specified by:
startDocument in interface ContentHandler
Throws:
SAXException - The client may raise a
            processing exception.
See Also:
ContentHandler.startDocument()


"
XMLReaderAdapter,"startElement(String uri, String localName, String qName, Attributes atts)",void,Adapt a SAX2 start element event.,"

startElement
public void startElement(String uri,
                         String localName,
                         String qName,
                         Attributes atts)
                  throws SAXException
Adapt a SAX2 start element event.

Specified by:
startElement in interface ContentHandler
Parameters:
uri - The Namespace URI.
localName - The Namespace local name.
qName - The qualified (prefixed) name.
atts - The SAX2 attributes.
Throws:
SAXException - The client may raise a
            processing exception.
See Also:
ContentHandler.endDocument()


"
XMLReaderAdapter,"startPrefixMapping(String prefix, String uri)",void,Adapt a SAX2 start prefix mapping event.,"

startPrefixMapping
public void startPrefixMapping(String prefix,
                               String uri)
Adapt a SAX2 start prefix mapping event.

Specified by:
startPrefixMapping in interface ContentHandler
Parameters:
prefix - The prefix being mapped.
uri - The Namespace URI being mapped to.
See Also:
ContentHandler.startPrefixMapping(java.lang.String, java.lang.String)


"
XMLReaderFactory,createXMLReader(),static XMLReader,Attempt to create an XMLReader from system defaults.,"

createXMLReader
public static XMLReader createXMLReader()
                                 throws SAXException
Attempt to create an XMLReader from system defaults.
 In environments which can support it, the name of the XMLReader
 class is determined by trying each these options in order, and
 using the first one which succeeds: 
If the system property org.xml.sax.driver
 has a value, that is used as an XMLReader class name. 
The JAR ""Services API"" is used to look for a class name
 in the META-INF/services/org.xml.sax.driver file in
 jarfiles available to the runtime.
 SAX parser distributions are strongly encouraged to provide
 a default XMLReader class name that will take effect only when
 previous options (on this list) are not successful.
Finally, if ParserFactory.makeParser() can
 return a system default SAX1 parser, that parser is wrapped in
 a ParserAdapter.  (This is a migration aid for SAX1
 environments, where the org.xml.sax.parser system
 property will often be usable.) 

 In environments such as small embedded systems, which can not
 support that flexibility, other mechanisms to determine the default
 may be used. 
Note that many Java environments allow system properties to be
 initialized on a command line.  This means that in most cases
 setting a good value for that property ensures that calls to this
 method will succeed, except when security policies intervene.
 This will also maximize application portability to older SAX
 environments, with less robust implementations of this method.
 

Returns:
A new XMLReader.
Throws:
SAXException - If no default XMLReader class
            can be identified and instantiated.
See Also:
createXMLReader(java.lang.String)


"
XMLReaderFactory,createXMLReader(String className),static XMLReader,Attempt to create an XML reader from a class name.,"

createXMLReader
public static XMLReader createXMLReader(String className)
                                 throws SAXException
Attempt to create an XML reader from a class name.

 Given a class name, this method attempts to load
 and instantiate the class as an XML reader.
Note that this method will not be usable in environments where
 the caller (perhaps an applet) is not permitted to load classes
 dynamically.

Returns:
A new XML reader.
Throws:
SAXException - If the class cannot be
            loaded, instantiated, and cast to XMLReader.
See Also:
createXMLReader()


"
