ClassName,Method,Return Type,Description,Full Description
NamingEvent,dispatch(NamingListener listener),void,Invokes the appropriate listener method on this event.,"

dispatch
public void dispatch(NamingListener listener)
Invokes the appropriate listener method on this event.
 The default implementation of
 this method handles the following event types:
 OBJECT_ADDED, OBJECT_REMOVED,
 OBJECT_RENAMED, OBJECT_CHANGED.

 The listener method is executed in the same thread
 as this method.  See the
 package description
 for more information on threading issues.

Parameters:
listener - The nonnull listener.


"
NamingEvent,getChangeInfo(),Object,Retrieves the change information for this event.,"

getChangeInfo
public Object getChangeInfo()
Retrieves the change information for this event.
 The value of the change information is service-specific. For example,
 it could be an ID that identifies the change in a change log on the server.

Returns:
The possibly null change information of this event.


"
NamingEvent,getEventContext(),EventContext,Retrieves the event source that fired this event.,"

getEventContext
public EventContext getEventContext()
Retrieves the event source that fired this event.
 This returns the same object as EventObject.getSource().

 If the result of this method is used to access the
 event source, for example, to look up the object or get its attributes,
 then it needs to be locked  because implementations of Context
 are not guaranteed to be thread-safe
 (and EventContext is a subinterface of Context).
 See the
 package description
 for more information on threading issues.

Returns:
The non-null context that fired this event.


"
NamingEvent,getNewBinding(),Binding,Retrieves the binding of the object after the change.,"

getNewBinding
public Binding getNewBinding()
Retrieves the binding of the object after the change.

 The binding must be nonnull if the object existed after the change
 relative to the source context (getEventContext()).
 That is, it must be nonnull for OBJECT_ADDED and
 OBJECT_CHANGED. For OBJECT_RENAMED,
 it is null if the object after the rename is outside the scope for
 which the listener registered interest; it is nonnull if the object
 is inside the scope after the rename.

 The name in the binding is to be resolved relative
 to the event source getEventContext().
 The object returned by Binding.getObject() may be null if
 such information is unavailable.

Returns:
The possibly null binding of the object after the change.


"
NamingEvent,getOldBinding(),Binding,Retrieves the binding of the object before the change.,"

getOldBinding
public Binding getOldBinding()
Retrieves the binding of the object before the change.

 The binding must be nonnull if the object existed before the change
 relative to the source context (getEventContext()).
 That is, it must be nonnull for OBJECT_REMOVED and
 OBJECT_CHANGED.
 For OBJECT_RENAMED, it is null if the object before the rename
 is outside of the scope for which the listener has registered interest;
 it is nonnull if the object is inside the scope before the rename.

 The name in the binding is to be resolved relative
 to the event source getEventContext().
 The object returned by Binding.getObject() may be null if
 such information is unavailable.

Returns:
The possibly null binding of the object before the change.


"
NamingEvent,getType(),int,Returns the type of this event.,"

getType
public int getType()
Returns the type of this event.

Returns:
The type of this event.
See Also:
OBJECT_ADDED, 
OBJECT_REMOVED, 
OBJECT_RENAMED, 
OBJECT_CHANGED


"
NamingExceptionEvent,dispatch(NamingListener listener),void,Invokes the namingExceptionThrown() method on a listener using this event.,"

dispatch
public void dispatch(NamingListener listener)
Invokes the namingExceptionThrown() method on
 a listener using this event.

Parameters:
listener - The non-null naming listener on which to invoke
 the method.


"
NamingExceptionEvent,getEventContext(),EventContext,Retrieves the EventContext that fired this event.,"

getEventContext
public EventContext getEventContext()
Retrieves the EventContext that fired this event.
 This returns the same object as EventObject.getSource().

Returns:
The non-null EventContext that fired this event.


"
NamingExceptionEvent,getException(),NamingException,Retrieves the exception that was thrown.,"

getException
public NamingException getException()
Retrieves the exception that was thrown.

Returns:
The exception that was thrown.


"
