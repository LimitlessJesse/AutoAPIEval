Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,QName,1,QName(String localPart),False,,NULL
0,QName,2,"QName(String namespaceURI, String localPart)",False,,NULL
0,QName,3,"QName(String namespaceURI, String localPart, String prefix)",False,,NULL
0,QName,4,String getLocalPart(),True,Get the local part of this QName.,"

getLocalPart
public String getLocalPart()
Get the local part of this QName.

Returns:
local part of this QName


"
0,QName,5,String getNamespaceURI(),True,Get the Namespace URI of this QName.,"

getNamespaceURI
public String getNamespaceURI()
Get the Namespace URI of this QName.

Returns:
Namespace URI of this QName


"
0,QName,6,String getPrefix(),True,Get the prefix of this QName.,"

getPrefix
public String getPrefix()
Get the prefix of this QName.
The prefix assigned to a QName might
 NOT be valid in a different
 context. For example, a QName may be assigned a
 prefix in the context of parsing a document but that prefix may
 be invalid in the context of a different document.

Returns:
prefix of this QName


"
0,QName,7,String toString(),True,String representation of this QName.,"

toString
public String toString()
String representation of this
 QName.
The commonly accepted way of representing a QName
 as a String was
 defined
 by James Clark.  Although this is not a standard
 specification, it is in common use, e.g. Transformer.setParameter(String name, Object value).
 This implementation represents a QName as:
 ""{"" + Namespace URI + ""}"" + local part.  If the Namespace URI
 .equals(XMLConstants.NULL_NS_URI), only the
 local part is returned.  An appropriate use of this method is
 for debugging or logging for human consumption.
Note the prefix value is NOT
 returned as part of the String representation.
This method satisfies the general contract of Object.toString().

Overrides:
toString in class Object
Returns:
String representation of this QName


"
0,QName,8,boolean equals(Object obj),True,Test this QName for equality with another Object.,"

equals
public final boolean equals(Object objectToTest)
Test this QName for equality with another
 Object.
If the Object to be tested is not a
 QName or is null, then this method
 returns false.
Two QNames are considered equal if and only if
 both the Namespace URI and local part are equal. This method
 uses String.equals() to check equality of the
 Namespace URI and local part. The prefix is
 NOT used to determine equality.
This method satisfies the general contract of Object.equals(Object)

Overrides:
equals in class Object
Parameters:
objectToTest - the Object to test for
 equality with this QName
Returns:
true if the given Object is
 equal to this QName else false
See Also:
Object.hashCode(), 
HashMap


"
0,QName,9,int hashCode(),True,Generate the hash code for this QName.,"

hashCode
public final int hashCode()
Generate the hash code for this QName.
The hash code is calculated using both the Namespace URI and
 the local part of the QName.  The prefix is
 NOT used to calculate the hash
 code.
This method satisfies the general contract of Object.hashCode().

Overrides:
hashCode in class Object
Returns:
hash code for this QName Object
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
0,QName,10,int compareTo(QName qname),False,,NULL
0,QName,11,QName valueOf(String qname),True,QName derived from parsing the formatted String.,"

valueOf
public static QName valueOf(String qNameAsString)
QName derived from parsing the formatted
 String.
If the String is null or does not conform to
 QName.toString() formatting, an
 IllegalArgumentException is thrown.
The String MUST be in the
 form returned by QName.toString().
The commonly accepted way of representing a QName
 as a String was
 defined
 by James Clark.  Although this is not a standard
 specification, it is in common use, e.g. Transformer.setParameter(String name, Object value).
 This implementation parses a String formatted
 as: ""{"" + Namespace URI + ""}"" + local part.  If the Namespace
 URI .equals(XMLConstants.NULL_NS_URI), only the
 local part should be provided.
The prefix value CANNOT be
 represented in the String and will be set to
 XMLConstants.DEFAULT_NS_PREFIX.
This method does not do full validation of the resulting
 QName.
 The Namespace URI is not validated as a
 URI reference.
 The local part is not validated as a
 NCName
 as specified in
 Namespaces in XML.

Parameters:
qNameAsString - String representation
 of the QName
Returns:
QName corresponding to the given String
Throws:
IllegalArgumentException - When qNameAsString is
   null or malformed
See Also:
QName.toString()


"
0,QName,12,"QName valueOf(String namespaceURI, String localPart)",False,,NULL
0,QName,13,"QName valueOf(String namespaceURI, String localPart, String prefix)",False,,NULL
0,QName,14,"QName valueOf(String qname, String namespaceURI)",False,,NULL
0,QName,15,"QName valueOf(String qname, String namespaceURI, String prefix)",False,,NULL
0,QName,16,"QName valueOf(String qname, String namespaceURI, String prefix, boolean isDefault)",False,,NULL
0,QName,17,"QName valueOf(String qname, String namespaceURI, String prefix, boolean isDefault, boolean isQualified)",False,,NULL
0,QName,18,"QName valueOf(String qname, String namespaceURI, String prefix, boolean isDefault, boolean isQualified, boolean isAbsolute)",False,,NULL
0,QName,19,"QName valueOf(String qname, String namespaceURI, String prefix, boolean isDefault, boolean isQualified, boolean isAbsolute, boolean isExplicit)",False,,NULL
0,QName,20,"QName valueOf(String qname, String namespaceURI, String prefix, boolean isDefault, boolean isQualified, boolean isAbsolute, boolean isExplicit, boolean isNCName)",False,,NULL
