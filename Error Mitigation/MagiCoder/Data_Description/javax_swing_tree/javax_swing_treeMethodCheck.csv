Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,AbstractLayoutCache,1,boolean add(E e),False,,NULL
0,AbstractLayoutCache,2,"void add(int index, E element)",False,,NULL
0,AbstractLayoutCache,3,boolean addAll(Collection<? extends E> c),False,,NULL
0,AbstractLayoutCache,4,"boolean addAll(int index, Collection<? extends E> c)",False,,NULL
0,AbstractLayoutCache,5,void clear(),False,,NULL
1,AbstractLayoutCache.NodeDimensions,1,int getHeight(),False,,NULL
1,AbstractLayoutCache.NodeDimensions,2,int getWidth(),False,,NULL
1,AbstractLayoutCache.NodeDimensions,3,int getXOrigin(),False,,NULL
1,AbstractLayoutCache.NodeDimensions,4,int getYOrigin(),False,,NULL
1,AbstractLayoutCache.NodeDimensions,5,void setHeight(int height),False,,NULL
1,AbstractLayoutCache.NodeDimensions,6,void setWidth(int width),False,,NULL
1,AbstractLayoutCache.NodeDimensions,7,void setXOrigin(int xOrigin),False,,NULL
1,AbstractLayoutCache.NodeDimensions,8,void setYOrigin(int yOrigin),False,,NULL
2,DefaultMutableTreeNode,1,DefaultMutableTreeNode(),False,,NULL
2,DefaultMutableTreeNode,2,DefaultMutableTreeNode(Object userObject),False,,NULL
2,DefaultMutableTreeNode,3,void add(DefaultMutableTreeNode newChild),False,,NULL
2,DefaultMutableTreeNode,4,void remove(int childIndex),True,Removes the child at the specified index from this node's children and sets that node's parent to null.,"

remove
public void remove(int childIndex)
Removes the child at the specified index from this node's children
 and sets that node's parent to null. The child node to remove
 must be a MutableTreeNode.

Specified by:
remove in interface MutableTreeNode
Parameters:
childIndex - the index in this node's child array
                          of the child to remove
Throws:
ArrayIndexOutOfBoundsException - if
                          childIndex is out of bounds


"
2,DefaultMutableTreeNode,5,void remove(DefaultMutableTreeNode child),False,,NULL
2,DefaultMutableTreeNode,6,DefaultMutableTreeNode getChildAt(int childIndex),False,,NULL
2,DefaultMutableTreeNode,7,int getChildCount(),True,Returns the number of children of this node.,"

getChildCount
public int getChildCount()
Returns the number of children of this node.

Specified by:
getChildCount in interface TreeNode
Returns:
an int giving the number of children of this node


"
2,DefaultMutableTreeNode,8,int getIndex(DefaultMutableTreeNode node),False,,NULL
2,DefaultMutableTreeNode,9,boolean getAllowsChildren(),True,Returns true if this node is allowed to have children.,"

getAllowsChildren
public boolean getAllowsChildren()
Returns true if this node is allowed to have children.

Specified by:
getAllowsChildren in interface TreeNode
Returns:
true if this node allows children, else false


"
2,DefaultMutableTreeNode,10,void setAllowsChildren(boolean allowsChildren),True,Determines whether or not this node is allowed to have children.,"

setAllowsChildren
public void setAllowsChildren(boolean allows)
Determines whether or not this node is allowed to have children.
 If allows is false, all of this node's children are
 removed.
 
 Note: By default, a node allows children.

Parameters:
allows - true if this node is allowed to have children


"
2,DefaultMutableTreeNode,11,Object getUserObject(),True,Returns this node's user object.,"

getUserObject
public Object getUserObject()
Returns this node's user object.

Returns:
the Object stored at this node by the user
See Also:
setUserObject(java.lang.Object), 
toString()


"
2,DefaultMutableTreeNode,12,void setUserObject(Object userObject),True,Sets the user object for this node to userObject.,"

setUserObject
public void setUserObject(Object userObject)
Sets the user object for this node to userObject.

Specified by:
setUserObject in interface MutableTreeNode
Parameters:
userObject - the Object that constitutes this node's
                          user-specified data
See Also:
getUserObject(), 
toString()


"
2,DefaultMutableTreeNode,13,boolean isLeaf(),True,Returns true if this node has no children.,"

isLeaf
public boolean isLeaf()
Returns true if this node has no children.  To distinguish between
 nodes that have no children and nodes that cannot have
 children (e.g. to distinguish files from empty directories), use this
 method in conjunction with getAllowsChildren

Specified by:
isLeaf in interface TreeNode
Returns:
true if this node has no children
See Also:
getAllowsChildren()


"
2,DefaultMutableTreeNode,14,void setParent(DefaultMutableTreeNode newParent),False,,NULL
2,DefaultMutableTreeNode,15,DefaultMutableTreeNode getParent(),False,,NULL
2,DefaultMutableTreeNode,16,"void insert(DefaultMutableTreeNode newChild, int childIndex)",False,,NULL
2,DefaultMutableTreeNode,17,void removeFromParent(),True,"Removes the subtree rooted at this node from the tree, giving this node a null parent.","

removeFromParent
public void removeFromParent()
Removes the subtree rooted at this node from the tree, giving this
 node a null parent.  Does nothing if this node is the root of its
 tree.

Specified by:
removeFromParent in interface MutableTreeNode


"
2,DefaultMutableTreeNode,18,void setUserObject(Object object),True,Sets the user object for this node to userObject.,"

setUserObject
public void setUserObject(Object userObject)
Sets the user object for this node to userObject.

Specified by:
setUserObject in interface MutableTreeNode
Parameters:
userObject - the Object that constitutes this node's
                          user-specified data
See Also:
getUserObject(), 
toString()


"
2,DefaultMutableTreeNode,19,Object getUserObject(),True,Returns this node's user object.,"

getUserObject
public Object getUserObject()
Returns this node's user object.

Returns:
the Object stored at this node by the user
See Also:
setUserObject(java.lang.Object), 
toString()


"
2,DefaultMutableTreeNode,20,void setAllowsChildren(boolean allowsChildren),True,Determines whether or not this node is allowed to have children.,"

setAllowsChildren
public void setAllowsChildren(boolean allows)
Determines whether or not this node is allowed to have children.
 If allows is false, all of this node's children are
 removed.
 
 Note: By default, a node allows children.

Parameters:
allows - true if this node is allowed to have children


"
2,DefaultMutableTreeNode,21,boolean getAllowsChildren(),True,Returns true if this node is allowed to have children.,"

getAllowsChildren
public boolean getAllowsChildren()
Returns true if this node is allowed to have children.

Specified by:
getAllowsChildren in interface TreeNode
Returns:
true if this node allows children, else false


"
2,DefaultMutableTreeNode,22,int getIndex(DefaultMutableTreeNode node),False,,NULL
2,DefaultMutableTreeNode,23,int getChildCount(),True,Returns the number of children of this node.,"

getChildCount
public int getChildCount()
Returns the number of children of this node.

Specified by:
getChildCount in interface TreeNode
Returns:
an int giving the number of children of this node


"
2,DefaultMutableTreeNode,24,DefaultMutableTreeNode getChildAt(int childIndex),False,,NULL
2,DefaultMutableTreeNode,25,void remove(int childIndex),True,Removes the child at the specified index from this node's children and sets that node's parent to null.,"

remove
public void remove(int childIndex)
Removes the child at the specified index from this node's children
 and sets that node's parent to null. The child node to remove
 must be a MutableTreeNode.

Specified by:
remove in interface MutableTreeNode
Parameters:
childIndex - the index in this node's child array
                          of the child to remove
Throws:
ArrayIndexOutOfBoundsException - if
                          childIndex is out of bounds


"
2,DefaultMutableTreeNode,26,void remove(DefaultMutableTreeNode child),False,,NULL
2,DefaultMutableTreeNode,27,void add(DefaultMutableTreeNode newChild),False,,NULL
2,DefaultMutableTreeNode,28,void setParent(DefaultMutableTreeNode newParent),False,,NULL
2,DefaultMutableTreeNode,29,DefaultMutableTreeNode getParent(),False,,NULL
2,DefaultMutableTreeNode,30,"void insert(DefaultMutableTreeNode newChild, int childIndex)",False,,NULL
2,DefaultMutableTreeNode,31,void removeFromParent(),True,"Removes the subtree rooted at this node from the tree, giving this node a null parent.","

removeFromParent
public void removeFromParent()
Removes the subtree rooted at this node from the tree, giving this
 node a null parent.  Does nothing if this node is the root of its
 tree.

Specified by:
removeFromParent in interface MutableTreeNode


"
2,DefaultMutableTreeNode,32,boolean isLeaf(),True,Returns true if this node has no children.,"

isLeaf
public boolean isLeaf()
Returns true if this node has no children.  To distinguish between
 nodes that have no children and nodes that cannot have
 children (e.g. to distinguish files from empty directories), use this
 method in conjunction with getAllowsChildren

Specified by:
isLeaf in interface TreeNode
Returns:
true if this node has no children
See Also:
getAllowsChildren()


"
2,DefaultMutableTreeNode,33,void setUserObject(Object userObject),True,Sets the user object for this node to userObject.,"

setUserObject
public void setUserObject(Object userObject)
Sets the user object for this node to userObject.

Specified by:
setUserObject in interface MutableTreeNode
Parameters:
userObject - the Object that constitutes this node's
                          user-specified data
See Also:
getUserObject(), 
toString()


"
2,DefaultMutableTreeNode,34,Object getUserObject(),True,Returns this node's user object.,"

getUserObject
public Object getUserObject()
Returns this node's user object.

Returns:
the Object stored at this node by the user
See Also:
setUserObject(java.lang.Object), 
toString()


"
2,DefaultMutableTreeNode,35,void setAllowsChildren(boolean allowsChildren),True,Determines whether or not this node is allowed to have children.,"

setAllowsChildren
public void setAllowsChildren(boolean allows)
Determines whether or not this node is allowed to have children.
 If allows is false, all of this node's children are
 removed.
 
 Note: By default, a node allows children.

Parameters:
allows - true if this node is allowed to have children


"
2,DefaultMutableTreeNode,36,boolean getAllowsChildren(),True,Returns true if this node is allowed to have children.,"

getAllowsChildren
public boolean getAllowsChildren()
Returns true if this node is allowed to have children.

Specified by:
getAllowsChildren in interface TreeNode
Returns:
true if this node allows children, else false


"
2,DefaultMutableTreeNode,37,int getIndex(DefaultMutableTreeNode node),False,,NULL
2,DefaultMutableTreeNode,38,int getChildCount(),True,Returns the number of children of this node.,"

getChildCount
public int getChildCount()
Returns the number of children of this node.

Specified by:
getChildCount in interface TreeNode
Returns:
an int giving the number of children of this node


"
2,DefaultMutableTreeNode,39,DefaultMutableTreeNode getChildAt(int childIndex),False,,NULL
2,DefaultMutableTreeNode,40,void remove(int childIndex),True,Removes the child at the specified index from this node's children and sets that node's parent to null.,"

remove
public void remove(int childIndex)
Removes the child at the specified index from this node's children
 and sets that node's parent to null. The child node to remove
 must be a MutableTreeNode.

Specified by:
remove in interface MutableTreeNode
Parameters:
childIndex - the index in this node's child array
                          of the child to remove
Throws:
ArrayIndexOutOfBoundsException - if
                          childIndex is out of bounds


"
2,DefaultMutableTreeNode,41,void remove(DefaultMutableTreeNode child),False,,NULL
2,DefaultMutableTreeNode,42,void add(DefaultMutableTreeNode newChild),False,,NULL
2,DefaultMutableTreeNode,43,void setParent(DefaultMutableTreeNode newParent),False,,NULL
2,DefaultMutableTreeNode,44,DefaultMutableTreeNode getParent(),False,,NULL
2,DefaultMutableTreeNode,45,"void insert(DefaultMutableTreeNode newChild, int childIndex)",False,,NULL
2,DefaultMutableTreeNode,46,void removeFromParent(),True,"Removes the subtree rooted at this node from the tree, giving this node a null parent.","

removeFromParent
public void removeFromParent()
Removes the subtree rooted at this node from the tree, giving this
 node a null parent.  Does nothing if this node is the root of its
 tree.

Specified by:
removeFromParent in interface MutableTreeNode


"
2,DefaultMutableTreeNode,47,boolean isLeaf(),True,Returns true if this node has no children.,"

isLeaf
public boolean isLeaf()
Returns true if this node has no children.  To distinguish between
 nodes that have no children and nodes that cannot have
 children (e.g. to distinguish files from empty directories), use this
 method in conjunction with getAllowsChildren

Specified by:
isLeaf in interface TreeNode
Returns:
true if this node has no children
See Also:
getAllowsChildren()


"
2,DefaultMutableTreeNode,48,void setUserObject(Object userObject),True,Sets the user object for this node to userObject.,"

setUserObject
public void setUserObject(Object userObject)
Sets the user object for this node to userObject.

Specified by:
setUserObject in interface MutableTreeNode
Parameters:
userObject - the Object that constitutes this node's
                          user-specified data
See Also:
getUserObject(), 
toString()


"
2,DefaultMutableTreeNode,49,Object getUserObject(),True,Returns this node's user object.,"

getUserObject
public Object getUserObject()
Returns this node's user object.

Returns:
the Object stored at this node by the user
See Also:
setUserObject(java.lang.Object), 
toString()


"
2,DefaultMutableTreeNode,50,void setAllowsChildren(boolean allowsChildren),True,Determines whether or not this node is allowed to have children.,"

setAllowsChildren
public void setAllowsChildren(boolean allows)
Determines whether or not this node is allowed to have children.
 If allows is false, all of this node's children are
 removed.
 
 Note: By default, a node allows children.

Parameters:
allows - true if this node is allowed to have children


"
2,DefaultMutableTreeNode,51,boolean getAllowsChildren(),True,Returns true if this node is allowed to have children.,"

getAllowsChildren
public boolean getAllowsChildren()
Returns true if this node is allowed to have children.

Specified by:
getAllowsChildren in interface TreeNode
Returns:
true if this node allows children, else false


"
2,DefaultMutableTreeNode,52,int getIndex(DefaultMutableTreeNode node),False,,NULL
2,DefaultMutableTreeNode,53,int getChildCount(),True,Returns the number of children of this node.,"

getChildCount
public int getChildCount()
Returns the number of children of this node.

Specified by:
getChildCount in interface TreeNode
Returns:
an int giving the number of children of this node


"
2,DefaultMutableTreeNode,54,DefaultMutableTreeNode getChildAt(int childIndex),False,,NULL
2,DefaultMutableTreeNode,55,void remove(int childIndex),True,Removes the child at the specified index from this node's children and sets that node's parent to null.,"

remove
public void remove(int childIndex)
Removes the child at the specified index from this node's children
 and sets that node's parent to null. The child node to remove
 must be a MutableTreeNode.

Specified by:
remove in interface MutableTreeNode
Parameters:
childIndex - the index in this node's child array
                          of the child to remove
Throws:
ArrayIndexOutOfBoundsException - if
                          childIndex is out of bounds


"
2,DefaultMutableTreeNode,56,void remove(DefaultMutableTreeNode child),False,,NULL
2,DefaultMutableTreeNode,57,void add(DefaultMutableTreeNode newChild),False,,NULL
2,DefaultMutableTreeNode,58,void setParent(DefaultMutableTreeNode newParent),False,,NULL
2,DefaultMutableTreeNode,59,DefaultMutableTreeNode getParent(),False,,NULL
2,DefaultMutableTreeNode,60,"void insert(DefaultMutableTreeNode newChild, int childIndex)",False,,NULL
2,DefaultMutableTreeNode,61,void removeFromParent(),True,"Removes the subtree rooted at this node from the tree, giving this node a null parent.","

removeFromParent
public void removeFromParent()
Removes the subtree rooted at this node from the tree, giving this
 node a null parent.  Does nothing if this node is the root of its
 tree.

Specified by:
removeFromParent in interface MutableTreeNode


"
2,DefaultMutableTreeNode,62,boolean isLeaf(),True,Returns true if this node has no children.,"

isLeaf
public boolean isLeaf()
Returns true if this node has no children.  To distinguish between
 nodes that have no children and nodes that cannot have
 children (e.g. to distinguish files from empty directories), use this
 method in conjunction with getAllowsChildren

Specified by:
isLeaf in interface TreeNode
Returns:
true if this node has no children
See Also:
getAllowsChildren()


"
2,DefaultMutableTreeNode,63,void setUserObject(Object userObject),True,Sets the user object for this node to userObject.,"

setUserObject
public void setUserObject(Object userObject)
Sets the user object for this node to userObject.

Specified by:
setUserObject in interface MutableTreeNode
Parameters:
userObject - the Object that constitutes this node's
                          user-specified data
See Also:
getUserObject(), 
toString()


"
2,DefaultMutableTreeNode,64,Object getUserObject(),True,Returns this node's user object.,"

getUserObject
public Object getUserObject()
Returns this node's user object.

Returns:
the Object stored at this node by the user
See Also:
setUserObject(java.lang.Object), 
toString()


"
2,DefaultMutableTreeNode,65,void setAllowsChildren(boolean allowsChildren),True,Determines whether or not this node is allowed to have children.,"

setAllowsChildren
public void setAllowsChildren(boolean allows)
Determines whether or not this node is allowed to have children.
 If allows is false, all of this node's children are
 removed.
 
 Note: By default, a node allows children.

Parameters:
allows - true if this node is allowed to have children


"
2,DefaultMutableTreeNode,66,boolean getAllowsChildren(),True,Returns true if this node is allowed to have children.,"

getAllowsChildren
public boolean getAllowsChildren()
Returns true if this node is allowed to have children.

Specified by:
getAllowsChildren in interface TreeNode
Returns:
true if this node allows children, else false


"
3,DefaultTreeCellEditor,1,"DefaultTreeCellEditor(JTree tree, TreeCellEditor editor)",False,,NULL
3,DefaultTreeCellEditor,2,boolean isCellEditable(EventObject event),True,"If the realEditor returns true to this message, prepareForEditing is messaged and true is returned.","

isCellEditable
public boolean isCellEditable(EventObject event)
If the realEditor returns true to this
 message, prepareForEditing
 is messaged and true is returned.

Specified by:
isCellEditable in interface CellEditor
Parameters:
event - the event the editor should use to consider
                          whether to begin editing or not
Returns:
true if editing can be started
See Also:
CellEditor.shouldSelectCell(java.util.EventObject)


"
3,DefaultTreeCellEditor,3,void cancelCellEditing(),True,Messages cancelCellEditing to the realEditor and removes it from this instance.,"

cancelCellEditing
public void cancelCellEditing()
Messages cancelCellEditing to the
 realEditor and removes it from this instance.

Specified by:
cancelCellEditing in interface CellEditor


"
3,DefaultTreeCellEditor,4,void cancelCellEditing(),True,Messages cancelCellEditing to the realEditor and removes it from this instance.,"

cancelCellEditing
public void cancelCellEditing()
Messages cancelCellEditing to the
 realEditor and removes it from this instance.

Specified by:
cancelCellEditing in interface CellEditor


"
3,DefaultTreeCellEditor,5,"Component getTreeCellEditorComponent(JTree tree, Object value, boolean isSelected, boolean expanded, boolean leaf, int row)",True,Configures the editor.,"

getTreeCellEditorComponent
public Component getTreeCellEditorComponent(JTree tree,
                                            Object value,
                                            boolean isSelected,
                                            boolean expanded,
                                            boolean leaf,
                                            int row)
Configures the editor.  Passed onto the realEditor.

Specified by:
getTreeCellEditorComponent in interface TreeCellEditor
Parameters:
tree - the JTree that is asking the editor to edit;
                          this parameter can be null
value - the value of the cell to be edited
isSelected - true if the cell is to be rendered with
                          selection highlighting
expanded - true if the node is expanded
leaf - true if the node is a leaf node
row - the row index of the node being edited
Returns:
the component for editing


"
4,DefaultTreeCellRenderer,1,DefaultTreeCellRenderer(),False,,NULL
4,DefaultTreeCellRenderer,2,void setLeafIcon(Icon icon),True,Sets the icon used to represent leaf nodes.,"

setLeafIcon
public void setLeafIcon(Icon newIcon)
Sets the icon used to represent leaf nodes.

"
4,DefaultTreeCellRenderer,3,void setOpenIcon(Icon icon),True,Sets the icon used to represent non-leaf nodes that are expanded.,"

setOpenIcon
public void setOpenIcon(Icon newIcon)
Sets the icon used to represent non-leaf nodes that are expanded.

"
4,DefaultTreeCellRenderer,4,void setClosedIcon(Icon icon),True,Sets the icon used to represent non-leaf nodes that are not expanded.,"

setClosedIcon
public void setClosedIcon(Icon newIcon)
Sets the icon used to represent non-leaf nodes that are not expanded.

"
4,DefaultTreeCellRenderer,5,void setPreferredSize(Dimension preferredSize),False,,NULL
5,DefaultTreeModel,1,DefaultTreeModel(),False,,NULL
5,DefaultTreeModel,2,DefaultTreeModel(TreeNode root),False,,NULL
5,DefaultTreeModel,3,TreeNode getRoot(),False,,NULL
5,DefaultTreeModel,4,void setRoot(TreeNode newRoot),True,Sets the root to root.,"

setRoot
public void setRoot(TreeNode root)
Sets the root to root. A null root implies
 the tree is to display nothing, and is legal.

"
5,DefaultTreeModel,5,boolean isLeaf(TreeNode node),False,,NULL
6,DefaultTreeSelectionModel,1,void addSelectionPath(TreePath path),True,Adds path to the current selection.,"

addSelectionPath
public void addSelectionPath(TreePath path)
Adds path to the current selection. If path is not currently
 in the selection the TreeSelectionListeners are notified. This has
 no effect if path is null.

Specified by:
addSelectionPath in interface TreeSelectionModel
Parameters:
path - the new path to add to the current selection


"
6,DefaultTreeSelectionModel,2,"void addSelectionRows(TreePath parent, int firstRow, int lastRow)",False,,NULL
6,DefaultTreeSelectionModel,3,void clearSelectionPath(TreePath path),False,,NULL
6,DefaultTreeSelectionModel,4,"void clearSelectionRows(TreePath parent, int firstRow, int lastRow)",False,,NULL
6,DefaultTreeSelectionModel,5,TreePath getSelectionPath(),True,Returns the first path in the selection.,"

getSelectionPath
public TreePath getSelectionPath()
Returns the first path in the selection. This is useful if there
 if only one item currently selected.

Specified by:
getSelectionPath in interface TreeSelectionModel


"
6,DefaultTreeSelectionModel,6,TreePath[] getSelectionPaths(),True,Returns the selection.,"

getSelectionPaths
public TreePath[] getSelectionPaths()
Returns the selection.

Specified by:
getSelectionPaths in interface TreeSelectionModel
Returns:
the selection


"
6,DefaultTreeSelectionModel,7,void removeSelectionPath(TreePath path),True,Removes path from the selection.,"

removeSelectionPath
public void removeSelectionPath(TreePath path)
Removes path from the selection. If path is in the selection
 The TreeSelectionListeners are notified. This has no effect if
 path is null.

Specified by:
removeSelectionPath in interface TreeSelectionModel
Parameters:
path - the path to remove from the selection


"
6,DefaultTreeSelectionModel,8,"void removeSelectionRows(TreePath parent, int firstRow, int lastRow)",False,,NULL
6,DefaultTreeSelectionModel,9,void setSelectionPath(TreePath path),True,Sets the selection to path.,"

setSelectionPath
public void setSelectionPath(TreePath path)
Sets the selection to path. If this represents a change, then
 the TreeSelectionListeners are notified. If path is
 null, this has the same effect as invoking clearSelection.

Specified by:
setSelectionPath in interface TreeSelectionModel
Parameters:
path - new path to select


"
6,DefaultTreeSelectionModel,10,"void setSelectionRows(TreePath parent, int firstRow, int lastRow)",False,,NULL
6,DefaultTreeSelectionModel,11,void toggleSelectionPath(TreePath path),False,,NULL
6,DefaultTreeSelectionModel,12,"void toggleSelectionRows(TreePath parent, int firstRow, int lastRow)",False,,NULL
6,DefaultTreeSelectionModel,13,"void setSelectionInterval(TreePath parent, int firstRow, int lastRow)",False,,NULL
6,DefaultTreeSelectionModel,14,void setSelectionPaths(TreePath[] paths),True,Sets the selection.,"

setSelectionPaths
public void setSelectionPaths(TreePath[] pPaths)
Sets the selection. Whether the supplied paths are taken as the
 new selection depends upon the selection mode. If the supplied
 array is null, or empty, the selection is cleared. If
 the selection mode is SINGLE_TREE_SELECTION, only the
 first path in pPaths is used. If the selection
 mode is CONTIGUOUS_TREE_SELECTION and the supplied paths
 are not contiguous, then only the first path in pPaths is
 used. If the selection mode is
 DISCONTIGUOUS_TREE_SELECTION, then all paths are used.
 
 All null paths in pPaths are ignored.
 
 If this represents a change, all registered TreeSelectionListeners are notified.
 
 The lead path is set to the last unique path.
 
 The paths returned from getSelectionPaths are in the same
 order as those supplied to this method.

Specified by:
setSelectionPaths in interface TreeSelectionModel
Parameters:
pPaths - the new selection


"
6,DefaultTreeSelectionModel,15,"void setSelectionRows(TreePath parent, int[] rows)",False,,NULL
6,DefaultTreeSelectionModel,16,"void setSelectionPathsAndRows(TreePath[] paths, int[] rows)",False,,NULL
6,DefaultTreeSelectionModel,17,"void setSelectionPathsAndRows(TreePath[] paths, int[] rows)",False,,NULL
6,DefaultTreeSelectionModel,18,"void setSelectionPathsAndRows(TreePath[] paths, int[] rows)",False,,NULL
6,DefaultTreeSelectionModel,19,"void setSelectionPathsAndRows(TreePath[] paths, int[] rows)",False,,NULL
6,DefaultTreeSelectionModel,20,"void setSelectionPathsAndRows(TreePath[] paths, int[] rows)",False,,NULL
7,FixedHeightLayoutCache,1,boolean add(E e),False,,NULL
7,FixedHeightLayoutCache,2,"void add(int index, E element)",False,,NULL
7,FixedHeightLayoutCache,3,boolean addAll(Collection<? extends E> c),False,,NULL
7,FixedHeightLayoutCache,4,"boolean addAll(int index, Collection<? extends E> c)",False,,NULL
7,FixedHeightLayoutCache,5,void clear(),False,,NULL
8,TreePath,1,TreePath(Object[] path),False,,NULL
8,TreePath,2,Object[] getPath(),True,Returns an ordered array of the elements of this TreePath.,"

getPath
public Object[] getPath()
Returns an ordered array of the elements of this TreePath.
 The first element is the root.

Returns:
an array of the elements in this TreePath


"
8,TreePath,3,int getPathCount(),True,Returns the number of elements in the path.,"

getPathCount
public int getPathCount()
Returns the number of elements in the path.

Returns:
the number of elements in the path


"
8,TreePath,4,Object getLastPathComponent(),True,Returns the last element of this path.,"

getLastPathComponent
public Object getLastPathComponent()
Returns the last element of this path.

Returns:
the last element in the path


"
8,TreePath,5,Object getPathComponent(int index),True,Returns the path element at the specified index.,"

getPathComponent
public Object getPathComponent(int index)
Returns the path element at the specified index.

Parameters:
index - the index of the element requested
Returns:
the element at the specified index
Throws:
IllegalArgumentException - if the index is outside the
         range of this path


"
9,VariableHeightLayoutCache,1,boolean add(E e),False,,NULL
9,VariableHeightLayoutCache,2,"void add(int index, E element)",False,,NULL
9,VariableHeightLayoutCache,3,boolean addAll(Collection<? extends E> c),False,,NULL
9,VariableHeightLayoutCache,4,"boolean addAll(int index, Collection<? extends E> c)",False,,NULL
9,VariableHeightLayoutCache,5,void clear(),False,,NULL
