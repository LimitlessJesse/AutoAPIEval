Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,Boolean,1,boolean booleanValue(),True,Returns the value of this Boolean object as a boolean primitive.,"

booleanValue
public boolean booleanValue()
Returns the value of this Boolean object as a boolean
 primitive.

Returns:
the primitive boolean value of this object.


"
0,Boolean,2,boolean equals(Object obj),True,Returns true if and only if the argument is not null and is a Boolean object that represents the same boolean value as this object.,"

equals
public boolean equals(Object obj)
Returns true if and only if the argument is not
 null and is a Boolean object that
 represents the same boolean value as this object.

Overrides:
equals in class Object
Parameters:
obj - the object to compare with.
Returns:
true if the Boolean objects represent the
          same value; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
0,Boolean,3,int hashCode(),True,Returns a hash code for this Boolean object.,"

hashCode
public int hashCode()
Returns a hash code for this Boolean object.

Overrides:
hashCode in class Object
Returns:
the integer 1231 if this object represents
 true; returns the integer 1237 if this
 object represents false.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
0,Boolean,4,Boolean valueOf(boolean b),True,Returns a Boolean instance representing the specified boolean value.,"

valueOf
public static Boolean valueOf(boolean b)
Returns a Boolean instance representing the specified
 boolean value.  If the specified boolean value
 is true, this method returns Boolean.TRUE;
 if it is false, this method returns Boolean.FALSE.
 If a new Boolean instance is not required, this method
 should generally be used in preference to the constructor
 Boolean(boolean), as this method is likely to yield
 significantly better space and time performance.

Parameters:
b - a boolean value.
Returns:
a Boolean instance representing b.
Since:
1.4


"
0,Boolean,5,Boolean valueOf(String s),True,Returns a Boolean with a value represented by the specified string.,"

valueOf
public static Boolean valueOf(String s)
Returns a Boolean with a value represented by the
 specified string.  The Boolean returned represents a
 true value if the string argument is not null
 and is equal, ignoring case, to the string ""true"".

Parameters:
s - a string.
Returns:
the Boolean value represented by the string.


"
1,Byte,1,Byte valueOf(byte b),True,Returns a Byte instance representing the specified byte value.,"

valueOf
public static Byte valueOf(byte b)
Returns a Byte instance representing the specified
 byte value.
 If a new Byte instance is not required, this method
 should generally be used in preference to the constructor
 Byte(byte), as this method is likely to yield
 significantly better space and time performance since
 all byte values are cached.

Parameters:
b - a byte value.
Returns:
a Byte instance representing b.
Since:
1.5


"
1,Byte,2,byte byteValue(),True,Returns the value of this Byte as a byte.,"

byteValue
public byte byteValue()
Returns the value of this Byte as a
 byte.

Overrides:
byteValue in class Number
Returns:
the numeric value represented by this object after conversion
          to type byte.


"
1,Byte,3,Byte decode(String s),True,Decodes a String into a Byte.,"

decode
public static Byte decode(String nm)
                   throws NumberFormatException
Decodes a String into a Byte.
 Accepts decimal, hexadecimal, and octal numbers given by
 the following grammar:

 

DecodableString:
Signopt DecimalNumeral
Signopt 0x HexDigits
Signopt 0X HexDigits
Signopt # HexDigits
Signopt 0 OctalDigits
Sign:
-
+


DecimalNumeral, HexDigits, and OctalDigits
 are as defined in section 3.10.1 of
 The Javaâ„¢ Language Specification,
 except that underscores are not accepted between digits.

 The sequence of characters following an optional
 sign and/or radix specifier (""0x"", ""0X"",
 ""#"", or leading zero) is parsed as by the Byte.parseByte method with the indicated radix (10, 16, or 8).
 This sequence of characters must represent a positive value or
 a NumberFormatException will be thrown.  The result is
 negated if first character of the specified String is
 the minus sign.  No whitespace characters are permitted in the
 String.

Parameters:
nm - the String to decode.
Returns:
a Byte object holding the byte
          value represented by nm
Throws:
NumberFormatException - if the String does not
            contain a parsable byte.
See Also:
parseByte(java.lang.String, int)


"
1,Byte,4,byte parseByte(String s),True,Parses the string argument as a signed decimal byte.,"

parseByte
public static byte parseByte(String s)
                      throws NumberFormatException
Parses the string argument as a signed decimal byte. The characters in the string must all be decimal digits,
 except that the first character may be an ASCII minus sign
 '-' ('\u002D') to indicate a negative
 value or an ASCII plus sign '+'
 ('\u002B') to indicate a positive value. The
 resulting byte value is returned, exactly as if the
 argument and the radix 10 were given as arguments to the parseByte(java.lang.String, int) method.

Parameters:
s - a String containing the
                  byte representation to be parsed
Returns:
the byte value represented by the
                  argument in decimal
Throws:
NumberFormatException - if the string does not
                  contain a parsable byte.


"
1,Byte,5,"byte parseByte(String s, int radix)",True,Parses the string argument as a signed byte in the radix specified by the second argument.,"

parseByte
public static byte parseByte(String s,
                             int radix)
                      throws NumberFormatException
Parses the string argument as a signed byte in the
 radix specified by the second argument. The characters in the
 string must all be digits, of the specified radix (as
 determined by whether Character.digit(char,
 int) returns a nonnegative value) except that the first
 character may be an ASCII minus sign '-'
 ('\u002D') to indicate a negative value or an
 ASCII plus sign '+' ('\u002B') to
 indicate a positive value.  The resulting byte value is
 returned.

 An exception of type NumberFormatException is
 thrown if any of the following situations occurs:
 
 The first argument is null or is a string of
 length zero.

  The radix is either smaller than Character.MIN_RADIX or larger than Character.MAX_RADIX.

  Any character of the string is not a digit of the
 specified radix, except that the first character may be a minus
 sign '-' ('\u002D') or plus sign
 '+' ('\u002B') provided that the
 string is longer than length 1.

  The value represented by the string is not a value of type
 byte.
 

Parameters:
s - the String containing the
                  byte
                  representation to be parsed
radix - the radix to be used while parsing s
Returns:
the byte value represented by the string
                   argument in the specified radix
Throws:
NumberFormatException - If the string does
                  not contain a parsable byte.


"
2,Character,1,boolean isDigit(char ch),True,Determines if the specified character is a digit.,"

isDigit
public static boolean isDigit(char ch)
Determines if the specified character is a digit.
 
 A character is a digit if its general category type, provided
 by Character.getType(ch), is
 DECIMAL_DIGIT_NUMBER.
 
 Some Unicode character ranges that contain digits:
 
'\u0030' through '\u0039',
     ISO-LATIN-1 digits ('0' through '9')
 '\u0660' through '\u0669',
     Arabic-Indic digits
 '\u06F0' through '\u06F9',
     Extended Arabic-Indic digits
 '\u0966' through '\u096F',
     Devanagari digits
 '\uFF10' through '\uFF19',
     Fullwidth digits
 

 Many other character ranges contain digits as well.

 Note: This method cannot handle  supplementary characters. To support
 all Unicode characters, including supplementary characters, use
 the isDigit(int) method.

Parameters:
ch - the character to be tested.
Returns:
true if the character is a digit;
          false otherwise.
See Also:
digit(char, int), 
forDigit(int, int), 
getType(char)


"
2,Character,2,boolean isLetter(char ch),True,Determines if the specified character is a letter.,"

isLetter
public static boolean isLetter(char ch)
Determines if the specified character is a letter.
 
 A character is considered to be a letter if its general
 category type, provided by Character.getType(ch),
 is any of the following:
 
 UPPERCASE_LETTER
 LOWERCASE_LETTER
 TITLECASE_LETTER
 MODIFIER_LETTER
 OTHER_LETTER


 Not all letters have case. Many characters are
 letters but are neither uppercase nor lowercase nor titlecase.

 Note: This method cannot handle  supplementary characters. To support
 all Unicode characters, including supplementary characters, use
 the isLetter(int) method.

Parameters:
ch - the character to be tested.
Returns:
true if the character is a letter;
          false otherwise.
See Also:
isDigit(char), 
isJavaIdentifierStart(char), 
isJavaLetter(char), 
isJavaLetterOrDigit(char), 
isLetterOrDigit(char), 
isLowerCase(char), 
isTitleCase(char), 
isUnicodeIdentifierStart(char), 
isUpperCase(char)


"
2,Character,3,boolean isLetterOrDigit(char ch),True,Determines if the specified character is a letter or digit.,"

isLetterOrDigit
public static boolean isLetterOrDigit(char ch)
Determines if the specified character is a letter or digit.
 
 A character is considered to be a letter or digit if either
 Character.isLetter(char ch) or
 Character.isDigit(char ch) returns
 true for the character.

 Note: This method cannot handle  supplementary characters. To support
 all Unicode characters, including supplementary characters, use
 the isLetterOrDigit(int) method.

Parameters:
ch - the character to be tested.
Returns:
true if the character is a letter or digit;
          false otherwise.
Since:
1.0.2
See Also:
isDigit(char), 
isJavaIdentifierPart(char), 
isJavaLetter(char), 
isJavaLetterOrDigit(char), 
isLetter(char), 
isUnicodeIdentifierPart(char)


"
2,Character,4,boolean isLowerCase(char ch),True,Determines if the specified character is a lowercase character.,"

isLowerCase
public static boolean isLowerCase(char ch)
Determines if the specified character is a lowercase character.
 
 A character is lowercase if its general category type, provided
 by Character.getType(ch), is
 LOWERCASE_LETTER, or it has contributory property
 Other_Lowercase as defined by the Unicode Standard.
 
 The following are examples of lowercase characters:
 
 a b c d e f g h i j k l m n o p q r s t u v w x y z
 '\u00DF' '\u00E0' '\u00E1' '\u00E2' '\u00E3' '\u00E4' '\u00E5' '\u00E6'
 '\u00E7' '\u00E8' '\u00E9' '\u00EA' '\u00EB' '\u00EC' '\u00ED' '\u00EE'
 '\u00EF' '\u00F0' '\u00F1' '\u00F2' '\u00F3' '\u00F4' '\u00F5' '\u00F6'
 '\u00F8' '\u00F9' '\u00FA' '\u00FB' '\u00FC' '\u00FD' '\u00FE' '\u00FF'
 
 Many other Unicode characters are lowercase too.

 Note: This method cannot handle  supplementary characters. To support
 all Unicode characters, including supplementary characters, use
 the isLowerCase(int) method.

Parameters:
ch - the character to be tested.
Returns:
true if the character is lowercase;
          false otherwise.
See Also:
isLowerCase(char), 
isTitleCase(char), 
toLowerCase(char), 
getType(char)


"
2,Character,5,boolean isUpperCase(char ch),True,Determines if the specified character is an uppercase character.,"

isUpperCase
public static boolean isUpperCase(char ch)
Determines if the specified character is an uppercase character.
 
 A character is uppercase if its general category type, provided by
 Character.getType(ch), is UPPERCASE_LETTER.
 or it has contributory property Other_Uppercase as defined by the Unicode Standard.
 
 The following are examples of uppercase characters:
 
 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
 '\u00C0' '\u00C1' '\u00C2' '\u00C3' '\u00C4' '\u00C5' '\u00C6' '\u00C7'
 '\u00C8' '\u00C9' '\u00CA' '\u00CB' '\u00CC' '\u00CD' '\u00CE' '\u00CF'
 '\u00D0' '\u00D1' '\u00D2' '\u00D3' '\u00D4' '\u00D5' '\u00D6' '\u00D8'
 '\u00D9' '\u00DA' '\u00DB' '\u00DC' '\u00DD' '\u00DE'
 
 Many other Unicode characters are uppercase too.

 Note: This method cannot handle  supplementary characters. To support
 all Unicode characters, including supplementary characters, use
 the isUpperCase(int) method.

Parameters:
ch - the character to be tested.
Returns:
true if the character is uppercase;
          false otherwise.
Since:
1.0
See Also:
isLowerCase(char), 
isTitleCase(char), 
toUpperCase(char), 
getType(char)


"
3,Character.Subset,1,int charCount(int codePoint),False,,NULL
3,Character.Subset,2,"int charCount(int codePoint, int limit)",False,,NULL
3,Character.Subset,3,"int charCount(int codePoint, int limit, int offset)",False,,NULL
3,Character.Subset,4,"int codePointAt(char[] chars, int index)",False,,NULL
3,Character.Subset,5,"int codePointAt(char[] chars, int index, int limit)",False,,NULL
3,Character.Subset,6,"int codePointAt(char[] chars, int index, int limit, int offset)",False,,NULL
3,Character.Subset,7,"int codePointAt(String s, int index)",False,,NULL
3,Character.Subset,8,"int codePointAt(String s, int index, int limit)",False,,NULL
3,Character.Subset,9,"int codePointAt(String s, int index, int limit, int offset)",False,,NULL
3,Character.Subset,10,"int codePointBefore(char[] chars, int index)",False,,NULL
3,Character.Subset,11,"int codePointBefore(String s, int index)",False,,NULL
3,Character.Subset,12,"int codePointCount(char[] chars, int index, int limit)",False,,NULL
3,Character.Subset,13,"int codePointCount(String s, int index, int limit)",False,,NULL
3,Character.Subset,14,"int codePointOf(char[] chars, int index)",False,,NULL
3,Character.Subset,15,"int codePointOf(String s, int index)",False,,NULL
3,Character.Subset,16,int codePointSurrogate(int codePoint),False,,NULL
3,Character.Subset,17,"int codePointSurrogate(int codePoint, int limit)",False,,NULL
3,Character.Subset,18,"int codePointSurrogate(int codePoint, int limit, int offset)",False,,NULL
3,Character.Subset,19,"int codePointValue(char[] chars, int index)",False,,NULL
3,Character.Subset,20,"int codePointValue(String s, int index)",False,,NULL
4,Character.UnicodeBlock,1,Character.UnicodeBlock.of(char ch),False,,NULL
4,Character.UnicodeBlock,2,Character.UnicodeBlock.values(),False,,NULL
4,Character.UnicodeBlock,3,Character.UnicodeBlock.valueOf(String name),False,,NULL
4,Character.UnicodeBlock,4,"Character.UnicodeBlock.codePointCount(int beginIndex, int endIndex)",False,,NULL
4,Character.UnicodeBlock,5,Character.UnicodeBlock.codePointAt(int index),False,,NULL
5,Class,1,Class<?> getSuperclass(),False,,NULL
5,Class,2,Class<?>[] getInterfaces(),True,Determines the interfaces implemented by the class or interface represented by this object.,"

getInterfaces
public Class<?>[] getInterfaces()
Determines the interfaces implemented by the class or interface
 represented by this object.

  If this object represents a class, the return value is an array
 containing objects representing all interfaces implemented by the
 class. The order of the interface objects in the array corresponds to
 the order of the interface names in the implements clause
 of the declaration of the class represented by this object. For
 example, given the declaration:
 
class Shimmer implements FloorWax, DessertTopping { ... }

 suppose the value of s is an instance of
 Shimmer; the value of the expression:
 
s.getClass().getInterfaces()[0]

 is the Class object that represents interface
 FloorWax; and the value of:
 
s.getClass().getInterfaces()[1]

 is the Class object that represents interface
 DessertTopping.

  If this object represents an interface, the array contains objects
 representing all interfaces extended by the interface. The order of the
 interface objects in the array corresponds to the order of the interface
 names in the extends clause of the declaration of the
 interface represented by this object.

  If this object represents a class or interface that implements no
 interfaces, the method returns an array of length 0.

  If this object represents a primitive type or void, the method
 returns an array of length 0.

  If this Class object represents an array type, the
 interfaces Cloneable and java.io.Serializable are
 returned in that order.

Returns:
an array of interfaces implemented by this class.


"
5,Class,3,Constructor<?>[] getConstructors(),True,Returns an array containing Constructor objects reflecting all the public constructors of the class represented by this Class object.,"

getConstructors
public Constructor<?>[] getConstructors()
                                 throws SecurityException
Returns an array containing Constructor objects reflecting
 all the public constructors of the class represented by this
 Class object.  An array of length 0 is returned if the
 class has no public constructors, or if the class is an array class, or
 if the class reflects a primitive type or void.

 Note that while this method returns an array of Constructor<T> objects (that is an array of constructors from
 this class), the return type of this method is Constructor<?>[] and not Constructor<T>[] as
 might be expected.  This less informative return type is
 necessary since after being returned from this method, the
 array could be modified to hold Constructor objects for
 different classes, which would violate the type guarantees of
 Constructor<T>[].

Returns:
the array of Constructor objects representing the
         public constructors of this class
Throws:
SecurityException - If a security manager, s, is present and
         the caller's class loader is not the same as or an
         ancestor of the class loader for the current class and
         invocation of s.checkPackageAccess() denies access to the package
         of this class.
Since:
JDK1.1


"
5,Class,4,Method[] getMethods(),True,"Returns an array containing Method objects reflecting all the public methods of the class or interface represented by this Class object, including those declared by the class or interface and those inherited from superclasses and superinterfaces.","

getMethods
public Method[] getMethods()
                    throws SecurityException
Returns an array containing Method objects reflecting all the
 public methods of the class or interface represented by this Class object, including those declared by the class or interface and
 those inherited from superclasses and superinterfaces.

  If this Class object represents a type that has multiple
 public methods with the same name and parameter types, but different
 return types, then the returned array has a Method object for
 each such method.

  If this Class object represents a type with a class
 initialization method <clinit>, then the returned array does
 not have a corresponding Method object.

  If this Class object represents an array type, then the
 returned array has a Method object for each of the public
 methods inherited by the array type from Object. It does not
 contain a Method object for clone().

  If this Class object represents an interface then the
 returned array does not contain any implicitly declared methods from
 Object. Therefore, if no methods are explicitly declared in
 this interface or any of its superinterfaces then the returned array
 has length 0. (Note that a Class object which represents a class
 always has public methods, inherited from Object.)

  If this Class object represents a primitive type or void,
 then the returned array has length 0.

  Static methods declared in superinterfaces of the class or interface
 represented by this Class object are not considered members of
 the class or interface.

  The elements in the returned array are not sorted and are not in any
 particular order.

Returns:
the array of Method objects representing the
         public methods of this class
Throws:
SecurityException - If a security manager, s, is present and
         the caller's class loader is not the same as or an
         ancestor of the class loader for the current class and
         invocation of s.checkPackageAccess() denies access to the package
         of this class.
Since:
JDK1.1
See  The Javaâ„¢ Language Specification:
8.2 Class Members, 8.4 Method Declarations


"
5,Class,5,Field[] getFields(),True,Returns an array containing Field objects reflecting all the accessible public fields of the class or interface represented by this Class object.,"

getFields
public Field[] getFields()
                  throws SecurityException
Returns an array containing Field objects reflecting all
 the accessible public fields of the class or interface represented by
 this Class object.

  If this Class object represents a class or interface with no
 no accessible public fields, then this method returns an array of length
 0.

  If this Class object represents a class, then this method
 returns the public fields of the class and of all its superclasses.

  If this Class object represents an interface, then this
 method returns the fields of the interface and of all its
 superinterfaces.

  If this Class object represents an array type, a primitive
 type, or void, then this method returns an array of length 0.

  The elements in the returned array are not sorted and are not in any
 particular order.

Returns:
the array of Field objects representing the
         public fields
Throws:
SecurityException - If a security manager, s, is present and
         the caller's class loader is not the same as or an
         ancestor of the class loader for the current class and
         invocation of s.checkPackageAccess() denies access to the package
         of this class.
Since:
JDK1.1
See  The Javaâ„¢ Language Specification:
8.2 Class Members, 8.3 Field Declarations


"
6,ClassLoader,1,ClassLoader getParent(),True,Returns the parent class loader for delegation.,"

getParent
public final ClassLoader getParent()
Returns the parent class loader for delegation. Some implementations may
 use null to represent the bootstrap class loader. This method
 will return null in such implementations if this class loader's
 parent is the bootstrap class loader.

  If a security manager is present, and the invoker's class loader is
 not null and is not an ancestor of this class loader, then this
 method invokes the security manager's checkPermission method with a RuntimePermission(""getClassLoader"") permission to verify
 access to the parent class loader is permitted.  If not, a
 SecurityException will be thrown.  

Returns:
The parent ClassLoader
Throws:
SecurityException - If a security manager exists and its checkPermission
          method doesn't allow access to this class loader's parent class
          loader.
Since:
1.2


"
6,ClassLoader,2,ClassLoader getSystemClassLoader(),True,Returns the system class loader for delegation.,"

getSystemClassLoader
public static ClassLoader getSystemClassLoader()
Returns the system class loader for delegation.  This is the default
 delegation parent for new ClassLoader instances, and is
 typically the class loader used to start the application.

  This method is first invoked early in the runtime's startup
 sequence, at which point it creates the system class loader and sets it
 as the context class loader of the invoking Thread.

  The default system class loader is an implementation-dependent
 instance of this class.

  If the system property ""java.system.class.loader"" is defined
 when this method is first invoked then the value of that property is
 taken to be the name of a class that will be returned as the system
 class loader.  The class is loaded using the default system class loader
 and must define a public constructor that takes a single parameter of
 type ClassLoader which is used as the delegation parent.  An
 instance is then created using this constructor with the default system
 class loader as the parameter.  The resulting class loader is defined
 to be the system class loader.

  If a security manager is present, and the invoker's class loader is
 not null and the invoker's class loader is not the same as or
 an ancestor of the system class loader, then this method invokes the
 security manager's checkPermission method with a RuntimePermission(""getClassLoader"") permission to verify
 access to the system class loader.  If not, a
 SecurityException will be thrown.  

Returns:
The system ClassLoader for delegation, or
          null if none
Throws:
SecurityException - If a security manager exists and its checkPermission
          method doesn't allow access to the system class loader.
IllegalStateException - If invoked recursively during the construction of the class
          loader specified by the ""java.system.class.loader""
          property.
Error - If the system property ""java.system.class.loader""
          is defined but the named class could not be loaded, the
          provider class does not define the required constructor, or an
          exception is thrown by that constructor when it is invoked. The
          underlying cause of the error can be retrieved via the
          Throwable.getCause() method.


"
6,ClassLoader,3,Class<?> loadClass(String name),True,Loads the class with the specified binary name.,"

loadClass
public Class<?> loadClass(String name)
                   throws ClassNotFoundException
Loads the class with the specified binary name.
 This method searches for classes in the same manner as the loadClass(String, boolean) method.  It is invoked by the Java virtual
 machine to resolve class references.  Invoking this method is equivalent
 to invoking loadClass(name,
 false).

Parameters:
name - The binary name of the class
Returns:
The resulting Class object
Throws:
ClassNotFoundException - If the class was not found


"
6,ClassLoader,4,"Class<?> loadClass(String name, boolean resolve)",True,Loads the class with the specified binary name.,"

loadClass
protected Class<?> loadClass(String name,
                             boolean resolve)
                      throws ClassNotFoundException
Loads the class with the specified binary name.  The
 default implementation of this method searches for classes in the
 following order:

 
 Invoke findLoadedClass(String) to check if the class
   has already been loaded.  
 Invoke the loadClass method
   on the parent class loader.  If the parent is null the class
   loader built-in to the virtual machine is used, instead.  
 Invoke the findClass(String) method to find the
   class.  

 If the class was found using the above steps, and the
 resolve flag is true, this method will then invoke the resolveClass(Class) method on the resulting Class object.

  Subclasses of ClassLoader are encouraged to override findClass(String), rather than this method.  
 Unless overridden, this method synchronizes on the result of
 getClassLoadingLock method
 during the entire class loading process.

Parameters:
name - The binary name of the class
resolve - If true then resolve the class
Returns:
The resulting Class object
Throws:
ClassNotFoundException - If the class could not be found


"
6,ClassLoader,5,protected Class<?> findClass(String name),False,,NULL
7,ClassValue,1,V get(Object key),False,,NULL
7,ClassValue,2,"V computeIfAbsent(K key, Function<? super K,? extends V> mappingFunction)",False,,NULL
7,ClassValue,3,"V computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)",False,,NULL
7,ClassValue,4,"V compute(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)",False,,NULL
7,ClassValue,5,void remove(Object key),False,,NULL
8,Compiler,1,boolean compileClass(Class<?> clazz),True,Compiles the specified class.,"

compileClass
public static boolean compileClass(Class<?> clazz)
Compiles the specified class.

Parameters:
clazz - A class
Returns:
true if the compilation succeeded; false if the
          compilation failed or no compiler is available
Throws:
NullPointerException - If clazz is null


"
8,Compiler,2,boolean compileClasses(Collection<? extends Class<?>> classes),False,,NULL
8,Compiler,3,boolean compileClasses(String... classNames),False,,NULL
8,Compiler,4,boolean compileClasses(URL... urls),False,,NULL
8,Compiler,5,boolean compileClasses(File... files),False,,NULL
9,Double,1,double parseDouble(String s),True,"Returns a new double initialized to the value represented by the specified String, as performed by the valueOf method of class Double.","

parseDouble
public static double parseDouble(String s)
                          throws NumberFormatException
Returns a new double initialized to the value
 represented by the specified String, as performed
 by the valueOf method of class
 Double.

Parameters:
s - the string to be parsed.
Returns:
the double value represented by the string
         argument.
Throws:
NullPointerException - if the string is null
NumberFormatException - if the string does not contain
         a parsable double.
Since:
1.2
See Also:
valueOf(String)


"
9,Double,2,double valueOf(String s),False,,NULL
9,Double,3,"double max(double a, double b)",True,Returns the greater of two double values as if by calling Math.max.,"

max
public static double max(double a,
                         double b)
Returns the greater of two double values
 as if by calling Math.max.

Parameters:
a - the first operand
b - the second operand
Returns:
the greater of a and b
Since:
1.8
See Also:
BinaryOperator


"
9,Double,4,"double min(double a, double b)",True,Returns the smaller of two double values as if by calling Math.min.,"

min
public static double min(double a,
                         double b)
Returns the smaller of two double values
 as if by calling Math.min.

Parameters:
a - the first operand
b - the second operand
Returns:
the smaller of a and b.
Since:
1.8
See Also:
BinaryOperator


"
9,Double,5,"double sum(double a, double b)",True,Adds two double values together as per the + operator.,"

sum
public static double sum(double a,
                         double b)
Adds two double values together as per the + operator.

Parameters:
a - the first operand
b - the second operand
Returns:
the sum of a and b
Since:
1.8
See Also:
BinaryOperator
See  The Javaâ„¢ Language Specification:
4.2.4 Floating-Point Operations


"
9,Double,6,double sum(double[] array),False,,NULL
9,Double,7,double sum(Collection<? extends Number> collection),False,,NULL
9,Double,8,"double sum(double a, double b, double c)",False,,NULL
9,Double,9,"double sum(double a, double b, double c, double d)",False,,NULL
9,Double,10,"double sum(double a, double b, double c, double d, double e)",False,,NULL
9,Double,11,"double sum(double a, double b, double c, double d, double e, double f)",False,,NULL
9,Double,12,"double sum(double a, double b, double c, double d, double e, double f, double g)",False,,NULL
9,Double,13,"double sum(double a, double b, double c, double d, double e, double f, double g, double h)",False,,NULL
9,Double,14,"double sum(double a, double b, double c, double d, double e, double f, double g, double h, double i)",False,,NULL
9,Double,15,"double sum(double a, double b, double c, double d, double e, double f, double g, double h, double i, double j)",False,,NULL
9,Double,16,"double sum(double a, double b, double c, double d, double e, double f, double g, double h, double i, double j, double k)",False,,NULL
9,Double,17,"double sum(double a, double b, double c, double d, double e, double f, double g, double h, double i, double j, double k, double l)",False,,NULL
9,Double,18,"double sum(double a, double b, double c, double d, double e, double f, double g, double h, double i, double j, double k, double l, double m)",False,,NULL
9,Double,19,"double sum(double a, double b, double c, double d, double e, double f, double g, double h, double i, double j, double k, double l, double m, double n)",False,,NULL
9,Double,20,"double sum(double a, double b, double c, double d, double e, double f, double g, double h, double i, double j, double k, double l, double m, double n, double o)",False,,NULL
9,Double,21,"double sum(double a, double b, double c, double d, double e, double f, double g, double h, double i, double j, double k, double l, double m, double n, double o, double p)",False,,NULL
9,Double,22,"double sum(double a, double b, double c, double d, double e, double f, double g, double h, double i, double j, double k, double l, double m, double n, double o, double p, double q)",False,,NULL
9,Double,23,"double sum(double a, double b, double c, double d, double e, double f, double g, double h, double i, double j, double k, double l, double m, double n, double o, double p, double q, double r)",False,,NULL
9,Double,24,"double sum(double a, double b, double c, double d, double e, double f, double g, double h, double i, double j, double k, double l, double m, double n, double o, double p, double q, double r, double s)",False,,NULL
9,Double,25,"double sum(double a, double b, double c, double d, double e, double f, double g, double h, double i, double j, double k, double l, double m, double n, double o, double p, double q, double r, double s, double t)",False,,NULL
10,Enum,1,int compareTo(E o),True,Compares this enum with the specified object for order.,"

compareTo
public final int compareTo(E o)
Compares this enum with the specified object for order.  Returns a
 negative integer, zero, or a positive integer as this object is less
 than, equal to, or greater than the specified object.

 Enum constants are only comparable to other enum constants of the
 same enum type.  The natural order implemented by this
 method is the order in which the constants are declared.

Specified by:
compareTo in interface Comparable<E extends Enum<E>>
Parameters:
o - the object to be compared.
Returns:
a negative integer, zero, or a positive integer as this object
          is less than, equal to, or greater than the specified object.


"
10,Enum,2,boolean equals(Object other),True,Returns true if the specified object is equal to this enum constant.,"

equals
public final boolean equals(Object other)
Returns true if the specified object is equal to this
 enum constant.

Overrides:
equals in class Object
Parameters:
other - the object to be compared for equality with this object.
Returns:
true if the specified object is equal to this
          enum constant.
See Also:
Object.hashCode(), 
HashMap


"
10,Enum,3,int ordinal(),True,"Returns the ordinal of this enumeration constant (its position in its enum declaration, where the initial constant is assigned an ordinal of zero).","

ordinal
public final int ordinal()
Returns the ordinal of this enumeration constant (its position
 in its enum declaration, where the initial constant is assigned
 an ordinal of zero).

 Most programmers will have no use for this method.  It is
 designed for use by sophisticated enum-based data structures, such
 as EnumSet and EnumMap.

Returns:
the ordinal of this enumeration constant


"
10,Enum,4,String toString(),True,"Returns the name of this enum constant, as contained in the declaration.","

toString
public String toString()
Returns the name of this enum constant, as contained in the
 declaration.  This method may be overridden, though it typically
 isn't necessary or desirable.  An enum type should override this
 method when a more ""programmer-friendly"" string form exists.

Overrides:
toString in class Object
Returns:
the name of this enum constant


"
10,Enum,5,"<T extends Enum<T>> T valueOf(Class<T> enumType, String name)",False,,NULL
11,Float,1,float floatToRawIntBits(float value),False,,NULL
11,Float,2,float intBitsToFloat(int bits),True,Returns the float value corresponding to a given bit representation.,"

intBitsToFloat
public static float intBitsToFloat(int bits)
Returns the float value corresponding to a given
 bit representation.
 The argument is considered to be a representation of a
 floating-point value according to the IEEE 754 floating-point
 ""single format"" bit layout.

 If the argument is 0x7f800000, the result is positive
 infinity.

 If the argument is 0xff800000, the result is negative
 infinity.

 If the argument is any value in the range
 0x7f800001 through 0x7fffffff or in
 the range 0xff800001 through
 0xffffffff, the result is a NaN.  No IEEE 754
 floating-point operation provided by Java can distinguish
 between two NaN values of the same type with different bit
 patterns.  Distinct values of NaN are only distinguishable by
 use of the Float.floatToRawIntBits method.

 In all other cases, let s, e, and m be three
 values that can be computed from the argument:

 
 int s = ((bits >> 31) == 0) ? 1 : -1;
 int e = ((bits >> 23) & 0xff);
 int m = (e == 0) ?
                 (bits & 0x7fffff) << 1 :
                 (bits & 0x7fffff) | 0x800000;
 

 Then the floating-point result equals the value of the mathematical
 expression sÂ·mÂ·2e-150.

 Note that this method may not be able to return a
 float NaN with exactly same bit pattern as the
 int argument.  IEEE 754 distinguishes between two
 kinds of NaNs, quiet NaNs and signaling NaNs.  The
 differences between the two kinds of NaN are generally not
 visible in Java.  Arithmetic operations on signaling NaNs turn
 them into quiet NaNs with a different, but often similar, bit
 pattern.  However, on some processors merely copying a
 signaling NaN also performs that conversion.  In particular,
 copying a signaling NaN to return it to the calling method may
 perform this conversion.  So intBitsToFloat may
 not be able to return a float with a signaling NaN
 bit pattern.  Consequently, for some int values,
 floatToRawIntBits(intBitsToFloat(start)) may
 not equal start.  Moreover, which
 particular bit patterns represent signaling NaNs is platform
 dependent; although all NaN bit patterns, quiet or signaling,
 must be in the NaN range identified above.

Parameters:
bits - an integer.
Returns:
the float floating-point value with the same bit
          pattern.


"
11,Float,3,"int compare(float f1, float f2)",True,Compares the two specified float values.,"

compare
public static int compare(float f1,
                          float f2)
Compares the two specified float values. The sign
 of the integer value returned is the same as that of the
 integer that would be returned by the call:
 
    new Float(f1).compareTo(new Float(f2))
 

Parameters:
f1 - the first float to compare.
f2 - the second float to compare.
Returns:
the value 0 if f1 is
          numerically equal to f2; a value less than
          0 if f1 is numerically less than
          f2; and a value greater than 0
          if f1 is numerically greater than
          f2.
Since:
1.4


"
11,Float,4,"float max(float a, float b)",True,Returns the greater of two float values as if by calling Math.max.,"

max
public static float max(float a,
                        float b)
Returns the greater of two float values
 as if by calling Math.max.

Parameters:
a - the first operand
b - the second operand
Returns:
the greater of a and b
Since:
1.8
See Also:
BinaryOperator


"
11,Float,5,"float min(float a, float b)",True,Returns the smaller of two float values as if by calling Math.min.,"

min
public static float min(float a,
                        float b)
Returns the smaller of two float values
 as if by calling Math.min.

Parameters:
a - the first operand
b - the second operand
Returns:
the smaller of a and b
Since:
1.8
See Also:
BinaryOperator


"
12,InheritableThreadLocal,1,protected T childValue(T parentValue),False,,NULL
12,InheritableThreadLocal,2,void set(T value),False,,NULL
12,InheritableThreadLocal,3,T get(),False,,NULL
12,InheritableThreadLocal,4,protected T initialValue(),False,,NULL
12,InheritableThreadLocal,5,void remove(),False,,NULL
13,Integer,1,"int compare(Integer x, Integer y)",False,,NULL
13,Integer,2,int compareTo(Integer anotherInteger),True,Compares two Integer objects numerically.,"

compareTo
public int compareTo(Integer anotherInteger)
Compares two Integer objects numerically.

Specified by:
compareTo in interface Comparable<Integer>
Parameters:
anotherInteger - the Integer to be compared.
Returns:
the value 0 if this Integer is
          equal to the argument Integer; a value less than
          0 if this Integer is numerically less
          than the argument Integer; and a value greater
          than 0 if this Integer is numerically
           greater than the argument Integer (signed
           comparison).
Since:
1.2


"
13,Integer,3,"int divideUnsigned(int dividend, int divisor)",True,Returns the unsigned quotient of dividing the first argument by the second where each argument and the result is interpreted as an unsigned value.,"

divideUnsigned
public static int divideUnsigned(int dividend,
                                 int divisor)
Returns the unsigned quotient of dividing the first argument by
 the second where each argument and the result is interpreted as
 an unsigned value.

 Note that in two's complement arithmetic, the three other
 basic arithmetic operations of add, subtract, and multiply are
 bit-wise identical if the two operands are regarded as both
 being signed or both being unsigned.  Therefore separate addUnsigned, etc. methods are not provided.

Parameters:
dividend - the value to be divided
divisor - the value doing the dividing
Returns:
the unsigned quotient of the first argument divided by
 the second argument
Since:
1.8
See Also:
remainderUnsigned(int, int)


"
13,Integer,4,"int max(int a, int b)",True,Returns the greater of two int values as if by calling Math.max.,"

max
public static int max(int a,
                      int b)
Returns the greater of two int values
 as if by calling Math.max.

Parameters:
a - the first operand
b - the second operand
Returns:
the greater of a and b
Since:
1.8
See Also:
BinaryOperator


"
13,Integer,5,"int min(int a, int b)",True,Returns the smaller of two int values as if by calling Math.min.,"

min
public static int min(int a,
                      int b)
Returns the smaller of two int values
 as if by calling Math.min.

Parameters:
a - the first operand
b - the second operand
Returns:
the smaller of a and b
Since:
1.8
See Also:
BinaryOperator


"
13,Integer,6,int parseInt(String s),True,Parses the string argument as a signed decimal integer.,"

parseInt
public static int parseInt(String s)
                    throws NumberFormatException
Parses the string argument as a signed decimal integer. The
 characters in the string must all be decimal digits, except
 that the first character may be an ASCII minus sign '-'
 ('\u002D') to indicate a negative value or an
 ASCII plus sign '+' ('\u002B') to
 indicate a positive value. The resulting integer value is
 returned, exactly as if the argument and the radix 10 were
 given as arguments to the parseInt(java.lang.String,
 int) method.

Parameters:
s - a String containing the int
             representation to be parsed
Returns:
the integer value represented by the argument in decimal.
Throws:
NumberFormatException - if the string does not contain a
               parsable integer.


"
13,Integer,7,"int parseInt(String s, int radix)",True,Parses the string argument as a signed integer in the radix specified by the second argument.,"

parseInt
public static int parseInt(String s,
                           int radix)
                    throws NumberFormatException
Parses the string argument as a signed integer in the radix
 specified by the second argument. The characters in the string
 must all be digits of the specified radix (as determined by
 whether Character.digit(char, int) returns a
 nonnegative value), except that the first character may be an
 ASCII minus sign '-' ('\u002D') to
 indicate a negative value or an ASCII plus sign '+'
 ('\u002B') to indicate a positive value. The
 resulting integer value is returned.

 An exception of type NumberFormatException is
 thrown if any of the following situations occurs:
 
The first argument is null or is a string of
 length zero.

 The radix is either smaller than
 Character.MIN_RADIX or
 larger than Character.MAX_RADIX.

 Any character of the string is not a digit of the specified
 radix, except that the first character may be a minus sign
 '-' ('\u002D') or plus sign
 '+' ('\u002B') provided that the
 string is longer than length 1.

 The value represented by the string is not a value of type
 int.
 
Examples:
 
 parseInt(""0"", 10) returns 0
 parseInt(""473"", 10) returns 473
 parseInt(""+42"", 10) returns 42
 parseInt(""-0"", 10) returns 0
 parseInt(""-FF"", 16) returns -255
 parseInt(""1100110"", 2) returns 102
 parseInt(""2147483647"", 10) returns 2147483647
 parseInt(""-2147483648"", 10) returns -2147483648
 parseInt(""2147483648"", 10) throws a NumberFormatException
 parseInt(""99"", 8) throws a NumberFormatException
 parseInt(""Kona"", 10) throws a NumberFormatException
 parseInt(""Kona"", 27) returns 411787
 

Parameters:
s - the String containing the integer
                  representation to be parsed
radix - the radix to be used while parsing s.
Returns:
the integer represented by the string argument in the
             specified radix.
Throws:
NumberFormatException - if the String
             does not contain a parsable int.


"
13,Integer,8,int parseUnsignedInt(String s),True,Parses the string argument as an unsigned decimal integer.,"

parseUnsignedInt
public static int parseUnsignedInt(String s)
                            throws NumberFormatException
Parses the string argument as an unsigned decimal integer. The
 characters in the string must all be decimal digits, except
 that the first character may be an an ASCII plus sign '+' ('\u002B'). The resulting integer value
 is returned, exactly as if the argument and the radix 10 were
 given as arguments to the parseUnsignedInt(java.lang.String, int) method.

Parameters:
s - a String containing the unsigned int
            representation to be parsed
Returns:
the unsigned integer value represented by the argument in decimal.
Throws:
NumberFormatException - if the string does not contain a
            parsable unsigned integer.
Since:
1.8


"
13,Integer,9,int reverse(int i),True,Returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified int value.,"

reverse
public static int reverse(int i)
Returns the value obtained by reversing the order of the bits in the
 two's complement binary representation of the specified int
 value.

Parameters:
i - the value to be reversed
Returns:
the value obtained by reversing order of the bits in the
     specified int value.
Since:
1.5


"
13,Integer,10,"int rotateLeft(int i, int distance)",True,Returns the value obtained by rotating the two's complement binary representation of the specified int value left by the specified number of bits.,"

rotateLeft
public static int rotateLeft(int i,
                             int distance)
Returns the value obtained by rotating the two's complement binary
 representation of the specified int value left by the
 specified number of bits.  (Bits shifted out of the left hand, or
 high-order, side reenter on the right, or low-order.)

 Note that left rotation with a negative distance is equivalent to
 right rotation: rotateLeft(val, -distance) == rotateRight(val,
 distance).  Note also that rotation by any multiple of 32 is a
 no-op, so all but the last five bits of the rotation distance can be
 ignored, even if the distance is negative: rotateLeft(val,
 distance) == rotateLeft(val, distance & 0x1F).

Parameters:
i - the value whose bits are to be rotated left
distance - the number of bit positions to rotate left
Returns:
the value obtained by rotating the two's complement binary
     representation of the specified int value left by the
     specified number of bits.
Since:
1.5


"
13,Integer,11,"int rotateRight(int i, int distance)",True,Returns the value obtained by rotating the two's complement binary representation of the specified int value right by the specified number of bits.,"

rotateRight
public static int rotateRight(int i,
                              int distance)
Returns the value obtained by rotating the two's complement binary
 representation of the specified int value right by the
 specified number of bits.  (Bits shifted out of the right hand, or
 low-order, side reenter on the left, or high-order.)

 Note that right rotation with a negative distance is equivalent to
 left rotation: rotateRight(val, -distance) == rotateLeft(val,
 distance).  Note also that rotation by any multiple of 32 is a
 no-op, so all but the last five bits of the rotation distance can be
 ignored, even if the distance is negative: rotateRight(val,
 distance) == rotateRight(val, distance & 0x1F).

Parameters:
i - the value whose bits are to be rotated right
distance - the number of bit positions to rotate right
Returns:
the value obtained by rotating the two's complement binary
     representation of the specified int value right by the
     specified number of bits.
Since:
1.5


"
13,Integer,12,int signum(int i),True,Returns the signum function of the specified int value.,"

signum
public static int signum(int i)
Returns the signum function of the specified int value.  (The
 return value is -1 if the specified value is negative; 0 if the
 specified value is zero; and 1 if the specified value is positive.)

Parameters:
i - the value whose signum is to be computed
Returns:
the signum function of the specified int value.
Since:
1.5


"
13,Integer,13,"int sum(int a, int b)",True,Adds two integers together as per the + operator.,"

sum
public static int sum(int a,
                      int b)
Adds two integers together as per the + operator.

Parameters:
a - the first operand
b - the second operand
Returns:
the sum of a and b
Since:
1.8
See Also:
BinaryOperator


"
13,Integer,14,int toBinaryString(int i),False,,NULL
13,Integer,15,int toHexString(int i),False,,NULL
13,Integer,16,int toOctalString(int i),False,,NULL
13,Integer,17,"int toString(int i, int radix)",False,,NULL
13,Integer,18,int valueOf(String s),False,,NULL
13,Integer,19,"int valueOf(String s, int radix)",False,,NULL
13,Integer,20,"int xor(int a, int b)",False,,NULL
14,Long,1,long parseLong(String s),True,Parses the string argument as a signed decimal long.,"

parseLong
public static long parseLong(String s)
                      throws NumberFormatException
Parses the string argument as a signed decimal long.
 The characters in the string must all be decimal digits, except
 that the first character may be an ASCII minus sign '-'
 (\u002D') to indicate a negative value or an
 ASCII plus sign '+' ('\u002B') to
 indicate a positive value. The resulting long value is
 returned, exactly as if the argument and the radix 10
 were given as arguments to the parseLong(java.lang.String, int) method.

 Note that neither the character L
 ('\u004C') nor l
 ('\u006C') is permitted to appear at the end
 of the string as a type indicator, as would be permitted in
 Java programming language source code.

Parameters:
s - a String containing the long
             representation to be parsed
Returns:
the long represented by the argument in
             decimal.
Throws:
NumberFormatException - if the string does not contain a
             parsable long.


"
14,Long,2,"long parseLong(String s, int radix)",True,Parses the string argument as a signed long in the radix specified by the second argument.,"

parseLong
public static long parseLong(String s,
                             int radix)
                      throws NumberFormatException
Parses the string argument as a signed long in the
 radix specified by the second argument. The characters in the
 string must all be digits of the specified radix (as determined
 by whether Character.digit(char, int) returns
 a nonnegative value), except that the first character may be an
 ASCII minus sign '-' ('\u002D') to
 indicate a negative value or an ASCII plus sign '+'
 ('\u002B') to indicate a positive value. The
 resulting long value is returned.

 Note that neither the character L
 ('\u004C') nor l
 ('\u006C') is permitted to appear at the end
 of the string as a type indicator, as would be permitted in
 Java programming language source code - except that either
 L or l may appear as a digit for a
 radix greater than or equal to 22.

 An exception of type NumberFormatException is
 thrown if any of the following situations occurs:
 
The first argument is null or is a string of
 length zero.

 The radix is either smaller than Character.MIN_RADIX or larger than Character.MAX_RADIX.

 Any character of the string is not a digit of the specified
 radix, except that the first character may be a minus sign
 '-' ('\u002d') or plus sign '+' ('\u002B') provided that the string is
 longer than length 1.

 The value represented by the string is not a value of type
      long.
 
Examples:
 
 parseLong(""0"", 10) returns 0L
 parseLong(""473"", 10) returns 473L
 parseLong(""+42"", 10) returns 42L
 parseLong(""-0"", 10) returns 0L
 parseLong(""-FF"", 16) returns -255L
 parseLong(""1100110"", 2) returns 102L
 parseLong(""99"", 8) throws a NumberFormatException
 parseLong(""Hazelnut"", 10) throws a NumberFormatException
 parseLong(""Hazelnut"", 36) returns 1356099454469L
 

Parameters:
s - the String containing the
                     long representation to be parsed.
radix - the radix to be used while parsing s.
Returns:
the long represented by the string argument in
             the specified radix.
Throws:
NumberFormatException - if the string does not contain a
             parsable long.


"
14,Long,3,Long valueOf(String s),True,Returns a Long object holding the value of the specified String.,"

valueOf
public static Long valueOf(String s)
                    throws NumberFormatException
Returns a Long object holding the value
 of the specified String. The argument is
 interpreted as representing a signed decimal long,
 exactly as if the argument were given to the parseLong(java.lang.String) method. The result is a
 Long object that represents the integer value
 specified by the string.

 In other words, this method returns a Long object
 equal to the value of:

 
new Long(Long.parseLong(s))


Parameters:
s - the string to be parsed.
Returns:
a Long object holding the value
             represented by the string argument.
Throws:
NumberFormatException - If the string cannot be parsed
             as a long.


"
14,Long,4,"Long valueOf(String s, int radix)",True,Returns a Long object holding the value extracted from the specified String when parsed with the radix given by the second argument.,"

valueOf
public static Long valueOf(String s,
                           int radix)
                    throws NumberFormatException
Returns a Long object holding the value
 extracted from the specified String when parsed
 with the radix given by the second argument.  The first
 argument is interpreted as representing a signed
 long in the radix specified by the second
 argument, exactly as if the arguments were given to the parseLong(java.lang.String, int) method. The result is a
 Long object that represents the long
 value specified by the string.

 In other words, this method returns a Long object equal
 to the value of:

 
new Long(Long.parseLong(s, radix))


Parameters:
s - the string to be parsed
radix - the radix to be used in interpreting s
Returns:
a Long object holding the value
             represented by the string argument in the specified
             radix.
Throws:
NumberFormatException - If the String does not
             contain a parsable long.


"
14,Long,5,Long decode(String nm),True,Decodes a String into a Long.,"

decode
public static Long decode(String nm)
                   throws NumberFormatException
Decodes a String into a Long.
 Accepts decimal, hexadecimal, and octal numbers given by the
 following grammar:

 

DecodableString:
Signopt DecimalNumeral
Signopt 0x HexDigits
Signopt 0X HexDigits
Signopt # HexDigits
Signopt 0 OctalDigits
Sign:
-
+


DecimalNumeral, HexDigits, and OctalDigits
 are as defined in section 3.10.1 of
 The Javaâ„¢ Language Specification,
 except that underscores are not accepted between digits.

 The sequence of characters following an optional
 sign and/or radix specifier (""0x"", ""0X"",
 ""#"", or leading zero) is parsed as by the Long.parseLong method with the indicated radix (10, 16, or 8).
 This sequence of characters must represent a positive value or
 a NumberFormatException will be thrown.  The result is
 negated if first character of the specified String is
 the minus sign.  No whitespace characters are permitted in the
 String.

Parameters:
nm - the String to decode.
Returns:
a Long object holding the long
            value represented by nm
Throws:
NumberFormatException - if the String does not
            contain a parsable long.
Since:
1.2
See Also:
parseLong(String, int)


"
15,Math,1,double abs(double a),True,Returns the absolute value of a double value.,"

abs
public static double abs(double a)
Returns the absolute value of a double value.
 If the argument is not negative, the argument is returned.
 If the argument is negative, the negation of the argument is returned.
 Special cases:
 If the argument is positive zero or negative zero, the result
 is positive zero.
 If the argument is infinite, the result is positive infinity.
 If the argument is NaN, the result is NaN.
 In other words, the result is the same as the value of the expression:
 Double.longBitsToDouble((Double.doubleToLongBits(a)<<1)>>>1)

Parameters:
a - the argument whose absolute value is to be determined
Returns:
the absolute value of the argument.


"
15,Math,2,double ceil(double a),True,Returns the smallest (closest to negative infinity) double value that is greater than or equal to the argument and is equal to a mathematical integer.,"

ceil
public static double ceil(double a)
Returns the smallest (closest to negative infinity)
 double value that is greater than or equal to the
 argument and is equal to a mathematical integer. Special cases:
 If the argument value is already equal to a
 mathematical integer, then the result is the same as the
 argument.  If the argument is NaN or an infinity or
 positive zero or negative zero, then the result is the same as
 the argument.  If the argument value is less than zero but
 greater than -1.0, then the result is negative zero. Note
 that the value of Math.ceil(x) is exactly the
 value of -Math.floor(-x).

Parameters:
a - a value.
Returns:
the smallest (closest to negative infinity)
          floating-point value that is greater than or equal to
          the argument and is equal to a mathematical integer.


"
15,Math,3,double floor(double a),True,Returns the largest (closest to positive infinity) double value that is less than or equal to the argument and is equal to a mathematical integer.,"

floor
public static double floor(double a)
Returns the largest (closest to positive infinity)
 double value that is less than or equal to the
 argument and is equal to a mathematical integer. Special cases:
 If the argument value is already equal to a
 mathematical integer, then the result is the same as the
 argument.  If the argument is NaN or an infinity or
 positive zero or negative zero, then the result is the same as
 the argument.

Parameters:
a - a value.
Returns:
the largest (closest to positive infinity)
          floating-point value that less than or equal to the argument
          and is equal to a mathematical integer.


"
15,Math,4,"double max(double a, double b)",True,Returns the greater of two double values.,"

max
public static double max(double a,
                         double b)
Returns the greater of two double values.  That
 is, the result is the argument closer to positive infinity. If
 the arguments have the same value, the result is that same
 value. If either value is NaN, then the result is NaN.  Unlike
 the numerical comparison operators, this method considers
 negative zero to be strictly smaller than positive zero. If one
 argument is positive zero and the other negative zero, the
 result is positive zero.

Parameters:
a - an argument.
b - another argument.
Returns:
the larger of a and b.


"
15,Math,5,"double min(double a, double b)",True,Returns the smaller of two double values.,"

min
public static double min(double a,
                         double b)
Returns the smaller of two double values.  That
 is, the result is the value closer to negative infinity. If the
 arguments have the same value, the result is that same
 value. If either value is NaN, then the result is NaN.  Unlike
 the numerical comparison operators, this method considers
 negative zero to be strictly smaller than positive zero. If one
 argument is positive zero and the other is negative zero, the
 result is negative zero.

Parameters:
a - an argument.
b - another argument.
Returns:
the smaller of a and b.


"
15,Math,6,"double pow(double a, double b)",True,Returns the value of the first argument raised to the power of the second argument.,"

pow
public static double pow(double a,
                         double b)
Returns the value of the first argument raised to the power of the
 second argument. Special cases:

 If the second argument is positive or negative zero, then the
 result is 1.0.
 If the second argument is 1.0, then the result is the same as the
 first argument.
 If the second argument is NaN, then the result is NaN.
 If the first argument is NaN and the second argument is nonzero,
 then the result is NaN.

 If
 
the absolute value of the first argument is greater than 1
 and the second argument is positive infinity, or
 the absolute value of the first argument is less than 1 and
 the second argument is negative infinity,
 
 then the result is positive infinity.

 If
 
the absolute value of the first argument is greater than 1 and
 the second argument is negative infinity, or
 the absolute value of the
 first argument is less than 1 and the second argument is positive
 infinity,
 
 then the result is positive zero.

 If the absolute value of the first argument equals 1 and the
 second argument is infinite, then the result is NaN.

 If
 
the first argument is positive zero and the second argument
 is greater than zero, or
 the first argument is positive infinity and the second
 argument is less than zero,
 
 then the result is positive zero.

 If
 
the first argument is positive zero and the second argument
 is less than zero, or
 the first argument is positive infinity and the second
 argument is greater than zero,
 
 then the result is positive infinity.

 If
 
the first argument is negative zero and the second argument
 is greater than zero but not a finite odd integer, or
 the first argument is negative infinity and the second
 argument is less than zero but not a finite odd integer,
 
 then the result is positive zero.

 If
 
the first argument is negative zero and the second argument
 is a positive finite odd integer, or
 the first argument is negative infinity and the second
 argument is a negative finite odd integer,
 
 then the result is negative zero.

 If
 
the first argument is negative zero and the second argument
 is less than zero but not a finite odd integer, or
 the first argument is negative infinity and the second
 argument is greater than zero but not a finite odd integer,
 
 then the result is positive infinity.

 If
 
the first argument is negative zero and the second argument
 is a negative finite odd integer, or
 the first argument is negative infinity and the second
 argument is a positive finite odd integer,
 
 then the result is negative infinity.

 If the first argument is finite and less than zero
 
 if the second argument is a finite even integer, the
 result is equal to the result of raising the absolute value of
 the first argument to the power of the second argument

 if the second argument is a finite odd integer, the result
 is equal to the negative of the result of raising the absolute
 value of the first argument to the power of the second
 argument

 if the second argument is finite and not an integer, then
 the result is NaN.
 
If both arguments are integers, then the result is exactly equal
 to the mathematical result of raising the first argument to the power
 of the second argument if that result can in fact be represented
 exactly as a double value.
(In the foregoing descriptions, a floating-point value is
 considered to be an integer if and only if it is finite and a
 fixed point of the method ceil or,
 equivalently, a fixed point of the method floor. A value is a fixed point of a one-argument
 method if and only if the result of applying the method to the
 value is equal to the value.)

 The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.

Parameters:
a - the base.
b - the exponent.
Returns:
the value ab.


"
15,Math,7,double random(),True,"Returns a double value with a positive sign, greater than or equal to 0.0 and less than 1.0.","

random
public static double random()
Returns a double value with a positive sign, greater
 than or equal to 0.0 and less than 1.0.
 Returned values are chosen pseudorandomly with (approximately)
 uniform distribution from that range.

 When this method is first called, it creates a single new
 pseudorandom-number generator, exactly as if by the expression

 new java.util.Random()

 This new pseudorandom-number generator is used thereafter for
 all calls to this method and is used nowhere else.

 This method is properly synchronized to allow correct use by
 more than one thread. However, if many threads need to generate
 pseudorandom numbers at a great rate, it may reduce contention
 for each thread to have its own pseudorandom-number generator.

Returns:
a pseudorandom double greater than or equal
 to 0.0 and less than 1.0.
See Also:
Random.nextDouble()


"
15,Math,8,double round(double a),False,,NULL
15,Math,9,double sqrt(double a),True,Returns the correctly rounded positive square root of a double value.,"

sqrt
public static double sqrt(double a)
Returns the correctly rounded positive square root of a
 double value.
 Special cases:
 If the argument is NaN or less than zero, then the result
 is NaN.
 If the argument is positive infinity, then the result is positive
 infinity.
 If the argument is positive zero or negative zero, then the
 result is the same as the argument.
 Otherwise, the result is the double value closest to
 the true mathematical square root of the argument value.

Parameters:
a - a value.
Returns:
the positive square root of a.
          If the argument is NaN or less than zero, the result is NaN.


"
15,Math,10,double sin(double a),True,Returns the trigonometric sine of an angle.,"

sin
public static double sin(double a)
Returns the trigonometric sine of an angle.  Special cases:
 If the argument is NaN or an infinity, then the
 result is NaN.
 If the argument is zero, then the result is a zero with the
 same sign as the argument.
The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.

Parameters:
a - an angle, in radians.
Returns:
the sine of the argument.


"
15,Math,11,double cos(double a),True,Returns the trigonometric cosine of an angle.,"

cos
public static double cos(double a)
Returns the trigonometric cosine of an angle. Special cases:
 If the argument is NaN or an infinity, then the
 result is NaN.
The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.

Parameters:
a - an angle, in radians.
Returns:
the cosine of the argument.


"
15,Math,12,double tan(double a),True,Returns the trigonometric tangent of an angle.,"

tan
public static double tan(double a)
Returns the trigonometric tangent of an angle.  Special cases:
 If the argument is NaN or an infinity, then the result
 is NaN.
 If the argument is zero, then the result is a zero with the
 same sign as the argument.
The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.

Parameters:
a - an angle, in radians.
Returns:
the tangent of the argument.


"
15,Math,13,double asin(double a),True,Returns the arc sine of a value; the returned angle is in the range -pi/2 through pi/2.,"

asin
public static double asin(double a)
Returns the arc sine of a value; the returned angle is in the
 range -pi/2 through pi/2.  Special cases:
 If the argument is NaN or its absolute value is greater
 than 1, then the result is NaN.
 If the argument is zero, then the result is a zero with the
 same sign as the argument.
The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.

Parameters:
a - the value whose arc sine is to be returned.
Returns:
the arc sine of the argument.


"
15,Math,14,double acos(double a),True,Returns the arc cosine of a value; the returned angle is in the range 0.0 through pi.,"

acos
public static double acos(double a)
Returns the arc cosine of a value; the returned angle is in the
 range 0.0 through pi.  Special case:
 If the argument is NaN or its absolute value is greater
 than 1, then the result is NaN.
The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.

Parameters:
a - the value whose arc cosine is to be returned.
Returns:
the arc cosine of the argument.


"
15,Math,15,double atan(double a),True,Returns the arc tangent of a value; the returned angle is in the range -pi/2 through pi/2.,"

atan
public static double atan(double a)
Returns the arc tangent of a value; the returned angle is in the
 range -pi/2 through pi/2.  Special cases:
 If the argument is NaN, then the result is NaN.
 If the argument is zero, then the result is a zero with the
 same sign as the argument.
The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.

Parameters:
a - the value whose arc tangent is to be returned.
Returns:
the arc tangent of the argument.


"
15,Math,16,double exp(double a),True,Returns Euler's number e raised to the power of a double value.,"

exp
public static double exp(double a)
Returns Euler's number e raised to the power of a
 double value.  Special cases:
 If the argument is NaN, the result is NaN.
 If the argument is positive infinity, then the result is
 positive infinity.
 If the argument is negative infinity, then the result is
 positive zero.
The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.

Parameters:
a - the exponent to raise e to.
Returns:
the value ea,
          where e is the base of the natural logarithms.


"
15,Math,17,double log(double a),True,Returns the natural logarithm (base e) of a double value.,"

log
public static double log(double a)
Returns the natural logarithm (base e) of a double
 value.  Special cases:
 If the argument is NaN or less than zero, then the result
 is NaN.
 If the argument is positive infinity, then the result is
 positive infinity.
 If the argument is positive zero or negative zero, then the
 result is negative infinity.
The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.

Parameters:
a - a value
Returns:
the value ln a, the natural logarithm of
          a.


"
15,Math,18,double log10(double a),True,Returns the base 10 logarithm of a double value.,"

log10
public static double log10(double a)
Returns the base 10 logarithm of a double value.
 Special cases:

 If the argument is NaN or less than zero, then the result
 is NaN.
 If the argument is positive infinity, then the result is
 positive infinity.
 If the argument is positive zero or negative zero, then the
 result is negative infinity.
  If the argument is equal to 10n for
 integer n, then the result is n.
 
The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.

Parameters:
a - a value
Returns:
the base 10 logarithm of  a.
Since:
1.5


"
15,Math,19,"double IEEEremainder(double f1, double f2)",True,Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard.,"

IEEEremainder
public static double IEEEremainder(double f1,
                                   double f2)
Computes the remainder operation on two arguments as prescribed
 by the IEEE 754 standard.
 The remainder value is mathematically equal to
 f1 - f2 Ã— n,
 where n is the mathematical integer closest to the exact
 mathematical value of the quotient f1/f2, and if two
 mathematical integers are equally close to f1/f2,
 then n is the integer that is even. If the remainder is
 zero, its sign is the same as the sign of the first argument.
 Special cases:
 If either argument is NaN, or the first argument is infinite,
 or the second argument is positive zero or negative zero, then the
 result is NaN.
 If the first argument is finite and the second argument is
 infinite, then the result is the same as the first argument.

Parameters:
f1 - the dividend.
f2 - the divisor.
Returns:
the remainder when f1 is divided by
          f2.


"
15,Math,20,"double copySign(double magnitude, double sign)",True,Returns the first floating-point argument with the sign of the second floating-point argument.,"

copySign
public static double copySign(double magnitude,
                              double sign)
Returns the first floating-point argument with the sign of the
 second floating-point argument.  Note that unlike the StrictMath.copySign
 method, this method does not require NaN sign
 arguments to be treated as positive values; implementations are
 permitted to treat some NaN arguments as positive and other NaN
 arguments as negative to allow greater performance.

Parameters:
magnitude - the parameter providing the magnitude of the result
sign - the parameter providing the sign of the result
Returns:
a value with the magnitude of magnitude
 and the sign of sign.
Since:
1.6


"
16,Number,1,byte byteValue(),True,"Returns the value of the specified number as a byte, which may involve rounding or truncation.","

byteValue
public byte byteValue()
Returns the value of the specified number as a byte,
 which may involve rounding or truncation.

 This implementation returns the result of intValue() cast
 to a byte.

Returns:
the numeric value represented by this object after conversion
          to type byte.
Since:
JDK1.1


"
16,Number,2,double doubleValue(),True,"Returns the value of the specified number as a double, which may involve rounding.","

doubleValue
public abstract double doubleValue()
Returns the value of the specified number as a double,
 which may involve rounding.

Returns:
the numeric value represented by this object after conversion
          to type double.


"
16,Number,3,float floatValue(),True,"Returns the value of the specified number as a float, which may involve rounding.","

floatValue
public abstract float floatValue()
Returns the value of the specified number as a float,
 which may involve rounding.

Returns:
the numeric value represented by this object after conversion
          to type float.


"
16,Number,4,int intValue(),True,"Returns the value of the specified number as an int, which may involve rounding or truncation.","

intValue
public abstract int intValue()
Returns the value of the specified number as an int,
 which may involve rounding or truncation.

Returns:
the numeric value represented by this object after conversion
          to type int.


"
16,Number,5,long longValue(),True,"Returns the value of the specified number as a long, which may involve rounding or truncation.","

longValue
public abstract long longValue()
Returns the value of the specified number as a long,
 which may involve rounding or truncation.

Returns:
the numeric value represented by this object after conversion
          to type long.


"
16,Number,6,short shortValue(),True,"Returns the value of the specified number as a short, which may involve rounding or truncation.","

shortValue
public short shortValue()
Returns the value of the specified number as a short,
 which may involve rounding or truncation.

 This implementation returns the result of intValue() cast
 to a short.

Returns:
the numeric value represented by this object after conversion
          to type short.
Since:
JDK1.1


"
17,Object,1,final native Class<?> getClass(),False,,NULL
17,Object,2,native int hashCode(),False,,NULL
17,Object,3,boolean equals(Object obj),True,"Indicates whether some other object is ""equal to"" this one.","

equals
public boolean equals(Object obj)
Indicates whether some other object is ""equal to"" this one.
 
 The equals method implements an equivalence relation
 on non-null object references:
 
It is reflexive: for any non-null reference value
     x, x.equals(x) should return
     true.
 It is symmetric: for any non-null reference values
     x and y, x.equals(y)
     should return true if and only if
     y.equals(x) returns true.
 It is transitive: for any non-null reference values
     x, y, and z, if
     x.equals(y) returns true and
     y.equals(z) returns true, then
     x.equals(z) should return true.
 It is consistent: for any non-null reference values
     x and y, multiple invocations of
     x.equals(y) consistently return true
     or consistently return false, provided no
     information used in equals comparisons on the
     objects is modified.
 For any non-null reference value x,
     x.equals(null) should return false.
 

 The equals method for class Object implements
 the most discriminating possible equivalence relation on objects;
 that is, for any non-null reference values x and
 y, this method returns true if and only
 if x and y refer to the same object
 (x == y has the value true).
 
 Note that it is generally necessary to override the hashCode
 method whenever this method is overridden, so as to maintain the
 general contract for the hashCode method, which states
 that equal objects must have equal hash codes.

Parameters:
obj - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
hashCode(), 
HashMap


"
17,Object,4,protected Object clone() throws CloneNotSupportedException,False,,NULL
17,Object,5,String toString(),True,Returns a string representation of the object.,"

toString
public String toString()
Returns a string representation of the object. In general, the
 toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method.
 
 The toString method for class Object
 returns a string consisting of the name of the class of which the
 object is an instance, the at-sign character `@', and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words, this method returns a string equal to the
 value of:
 

 getClass().getName() + '@' + Integer.toHexString(hashCode())
 

Returns:
a string representation of the object.


"
18,Package,1,getName(),False,,NULL
18,Package,2,getImplementationTitle(),False,,NULL
18,Package,3,getImplementationVendor(),False,,NULL
18,Package,4,getImplementationVersion(),False,,NULL
18,Package,5,getSpecificationTitle(),False,,NULL
18,Package,6,getSpecificationVersion(),False,,NULL
18,Package,7,getSpecificationVendor(),False,,NULL
18,Package,8,getSealed(),False,,NULL
18,Package,9,getSealedPackages(),False,,NULL
18,Package,10,getExportedPackages(),False,,NULL
18,Package,11,getImports(),False,,NULL
18,Package,12,getDeclaredClasses(),False,,NULL
18,Package,13,getDeclaredClasses(),False,,NULL
18,Package,14,getDeclaredClasses(),False,,NULL
18,Package,15,getDeclaredClasses(),False,,NULL
18,Package,16,getDeclaredClasses(),False,,NULL
18,Package,17,getDeclaredClasses(),False,,NULL
18,Package,18,getDeclaredClasses(),False,,NULL
18,Package,19,getDeclaredClasses(),False,,NULL
18,Package,20,getDeclaredClasses(),False,,NULL
19,Process,1,ProcessBuilder.start(),False,,NULL
19,Process,2,Runtime.exec(String command),False,,NULL
19,Process,3,Process.destroy(),False,,NULL
19,Process,4,Process.destroyForcibly(),False,,NULL
19,Process,5,Process.exitValue(),False,,NULL
20,ProcessBuilder,1,ProcessBuilder(),False,,NULL
20,ProcessBuilder,2,ProcessBuilder(String... command),False,,NULL
20,ProcessBuilder,3,ProcessBuilder(List<String> command),False,,NULL
20,ProcessBuilder,4,ProcessBuilder redirectError(File file),True,Sets this process builder's standard error destination to a file.,"

redirectError
public ProcessBuilder redirectError(File file)
Sets this process builder's standard error destination to a file.

 This is a convenience method.  An invocation of the form
 redirectError(file)
 behaves in exactly the same way as the invocation
 redirectError
(Redirect.to(file)).

Parameters:
file - the new standard error destination
Returns:
this process builder
Since:
1.7


"
20,ProcessBuilder,5,ProcessBuilder redirectError(OutputStream out),False,,NULL
20,ProcessBuilder,6,ProcessBuilder redirectInput(File file),True,Sets this process builder's standard input source to a file.,"

redirectInput
public ProcessBuilder redirectInput(File file)
Sets this process builder's standard input source to a file.

 This is a convenience method.  An invocation of the form
 redirectInput(file)
 behaves in exactly the same way as the invocation
 redirectInput
(Redirect.from(file)).

Parameters:
file - the new standard input source
Returns:
this process builder
Since:
1.7


"
20,ProcessBuilder,7,ProcessBuilder redirectInput(InputStream in),False,,NULL
20,ProcessBuilder,8,ProcessBuilder redirectOutput(File file),True,Sets this process builder's standard output destination to a file.,"

redirectOutput
public ProcessBuilder redirectOutput(File file)
Sets this process builder's standard output destination to a file.

 This is a convenience method.  An invocation of the form
 redirectOutput(file)
 behaves in exactly the same way as the invocation
 redirectOutput
(Redirect.to(file)).

Parameters:
file - the new standard output destination
Returns:
this process builder
Since:
1.7


"
20,ProcessBuilder,9,ProcessBuilder redirectOutput(OutputStream out),False,,NULL
20,ProcessBuilder,10,ProcessBuilder start(),False,,NULL
20,ProcessBuilder,11,"ProcessBuilder start(Map<String, String> environment)",False,,NULL
20,ProcessBuilder,12,ProcessBuilder directory(File dir),True,Sets this process builder's working directory.,"

directory
public ProcessBuilder directory(File directory)
Sets this process builder's working directory.

 Subprocesses subsequently started by this object's start() method will use this as their working directory.
 The argument may be null -- this means to use the
 working directory of the current Java process, usually the
 directory named by the system property user.dir,
 as the working directory of the child process.

Parameters:
directory - the new working directory
Returns:
this process builder


"
20,ProcessBuilder,13,ProcessBuilder command(List<String> commands),True,Sets this process builder's operating system program and arguments.,"

command
public ProcessBuilder command(List<String> command)
Sets this process builder's operating system program and
 arguments.  This method does not make a copy of the
 command list.  Subsequent updates to the list will
 be reflected in the state of the process builder.  It is not
 checked whether command corresponds to a valid
 operating system command.

Parameters:
command - the list containing the program and its arguments
Returns:
this process builder
Throws:
NullPointerException - if the argument is null


"
20,ProcessBuilder,14,ProcessBuilder command(String... commands),True,Sets this process builder's operating system program and arguments.,"

command
public ProcessBuilder command(String... command)
Sets this process builder's operating system program and
 arguments.  This is a convenience method that sets the command
 to a string list containing the same strings as the
 command array, in the same order.  It is not
 checked whether command corresponds to a valid
 operating system command.

Parameters:
command - a string array containing the program and its arguments
Returns:
this process builder


"
20,ProcessBuilder,15,ProcessBuilder command(String command),False,,NULL
20,ProcessBuilder,16,"ProcessBuilder command(String command, String... args)",False,,NULL
20,ProcessBuilder,17,"ProcessBuilder command(String command, List<String> args)",False,,NULL
20,ProcessBuilder,18,ProcessBuilder inheritIO(),True,Sets the source and destination for subprocess standard I/O to be the same as those of the current Java process.,"

inheritIO
public ProcessBuilder inheritIO()
Sets the source and destination for subprocess standard I/O
 to be the same as those of the current Java process.

 This is a convenience method.  An invocation of the form
   
 pb.inheritIO()
 
 behaves in exactly the same way as the invocation
   
 pb.redirectInput(Redirect.INHERIT)
   .redirectOutput(Redirect.INHERIT)
   .redirectError(Redirect.INHERIT)
 

 This gives behavior equivalent to most operating system
 command interpreters, or the standard C library function
 system().

Returns:
this process builder
Since:
1.7


"
20,ProcessBuilder,19,ProcessBuilder redirectError(),False,,NULL
20,ProcessBuilder,20,ProcessBuilder redirectInput(),False,,NULL
20,ProcessBuilder,21,ProcessBuilder redirectOutput(),False,,NULL
20,ProcessBuilder,22,ProcessBuilder directory(),False,,NULL
20,ProcessBuilder,23,ProcessBuilder command(),False,,NULL
20,ProcessBuilder,24,ProcessBuilder command(String command),False,,NULL
20,ProcessBuilder,25,"ProcessBuilder command(String command, String... args)",False,,NULL
20,ProcessBuilder,26,"ProcessBuilder command(String command, List<String> args)",False,,NULL
20,ProcessBuilder,27,ProcessBuilder command(List<String> commands),True,Sets this process builder's operating system program and arguments.,"

command
public ProcessBuilder command(List<String> command)
Sets this process builder's operating system program and
 arguments.  This method does not make a copy of the
 command list.  Subsequent updates to the list will
 be reflected in the state of the process builder.  It is not
 checked whether command corresponds to a valid
 operating system command.

Parameters:
command - the list containing the program and its arguments
Returns:
this process builder
Throws:
NullPointerException - if the argument is null


"
20,ProcessBuilder,28,ProcessBuilder command(String... commands),True,Sets this process builder's operating system program and arguments.,"

command
public ProcessBuilder command(String... command)
Sets this process builder's operating system program and
 arguments.  This is a convenience method that sets the command
 to a string list containing the same strings as the
 command array, in the same order.  It is not
 checked whether command corresponds to a valid
 operating system command.

Parameters:
command - a string array containing the program and its arguments
Returns:
this process builder


"
20,ProcessBuilder,29,ProcessBuilder environment(),False,,NULL
20,ProcessBuilder,30,"ProcessBuilder environment(Map<String, String> env)",False,,NULL
20,ProcessBuilder,31,"ProcessBuilder environment(String name, String value)",False,,NULL
20,ProcessBuilder,32,"ProcessBuilder environment(String name, String... values)",False,,NULL
20,ProcessBuilder,33,"ProcessBuilder environment(String name, List<String> values)",False,,NULL
20,ProcessBuilder,34,ProcessBuilder environment(String name),False,,NULL
20,ProcessBuilder,35,ProcessBuilder inheritIO(boolean inheritIO),False,,NULL
20,ProcessBuilder,36,"ProcessBuilder redirectError(File file, boolean append)",False,,NULL
20,ProcessBuilder,37,"ProcessBuilder redirectError(OutputStream out, boolean append)",False,,NULL
20,ProcessBuilder,38,"ProcessBuilder redirectInput(File file, boolean append)",False,,NULL
20,ProcessBuilder,39,"ProcessBuilder redirectInput(InputStream in, boolean append)",False,,NULL
20,ProcessBuilder,40,"ProcessBuilder redirectOutput(File file, boolean append)",False,,NULL
20,ProcessBuilder,41,"ProcessBuilder redirectOutput(OutputStream out, boolean append)",False,,NULL
20,ProcessBuilder,42,"ProcessBuilder start(Map<String, String> environment, File dir, List<String> commands)",False,,NULL
20,ProcessBuilder,43,"ProcessBuilder start(Map<String, String> environment, File dir, String... commands)",False,,NULL
20,ProcessBuilder,44,"ProcessBuilder start(Map<String, String> environment, File dir, String command)",False,,NULL
20,ProcessBuilder,45,"ProcessBuilder start(Map<String, String> environment, File dir, String command, String... args)",False,,NULL
20,ProcessBuilder,46,"ProcessBuilder start(Map<String, String> environment, File dir, String command, List<String> args)",False,,NULL
20,ProcessBuilder,47,"ProcessBuilder start(Map<String, String> environment, File dir, List<String> commands)",False,,NULL
20,ProcessBuilder,48,"ProcessBuilder start(Map<String, String> environment, File dir, String... commands)",False,,NULL
20,ProcessBuilder,49,"ProcessBuilder start(Map<String, String> environment, File dir, String command)",False,,NULL
20,ProcessBuilder,50,"ProcessBuilder start(Map<String, String> environment, File dir, String command, String... args)",False,,NULL
20,ProcessBuilder,51,"ProcessBuilder start(Map<String, String> environment, File dir, String command, List<String> args)",False,,NULL
20,ProcessBuilder,52,"ProcessBuilder start(Map<String, String> environment, File dir, List<String> commands)",False,,NULL
20,ProcessBuilder,53,"ProcessBuilder start(Map<String, String> environment, File dir, String... commands)",False,,NULL
20,ProcessBuilder,54,"ProcessBuilder start(Map<String, String> environment, File dir, String command)",False,,NULL
20,ProcessBuilder,55,"ProcessBuilder start(Map<String, String> environment, File dir, String command, String... args)",False,,NULL
21,ProcessBuilder.Redirect,1,Redirect.to(File),False,,NULL
21,ProcessBuilder.Redirect,2,Redirect.to(File),False,,NULL
21,ProcessBuilder.Redirect,3,Redirect.to(File),False,,NULL
21,ProcessBuilder.Redirect,4,Redirect.to(File),False,,NULL
21,ProcessBuilder.Redirect,5,Redirect.to(File),False,,NULL
22,Runtime,1,Process exec(String command) throws IOException,True,Executes the specified string command in a separate process.,"

exec
public Process exec(String command)
             throws IOException
Executes the specified string command in a separate process.

 This is a convenience method.  An invocation of the form
 exec(command)
 behaves in exactly the same way as the invocation
 exec(command, null, null).

Parameters:
command - a specified system command.
Returns:
A new Process object for managing the subprocess
Throws:
SecurityException - If a security manager exists and its
          checkExec
          method doesn't allow creation of the subprocess
IOException - If an I/O error occurs
NullPointerException - If command is null
IllegalArgumentException - If command is empty
See Also:
exec(String[], String[], File), 
ProcessBuilder


"
22,Runtime,2,Process exec(String[] cmdarray) throws IOException,True,Executes the specified command and arguments in a separate process.,"

exec
public Process exec(String[] cmdarray)
             throws IOException
Executes the specified command and arguments in a separate process.

 This is a convenience method.  An invocation of the form
 exec(cmdarray)
 behaves in exactly the same way as the invocation
 exec(cmdarray, null, null).

Parameters:
cmdarray - array containing the command to call and
                    its arguments.
Returns:
A new Process object for managing the subprocess
Throws:
SecurityException - If a security manager exists and its
          checkExec
          method doesn't allow creation of the subprocess
IOException - If an I/O error occurs
NullPointerException - If cmdarray is null,
          or one of the elements of cmdarray is null
IndexOutOfBoundsException - If cmdarray is an empty array
          (has length 0)
See Also:
ProcessBuilder


"
22,Runtime,3,ProcessBuilder.Redirect redirectError(File file),False,,NULL
22,Runtime,4,ProcessBuilder.Redirect redirectError(OutputStream out),False,,NULL
22,Runtime,5,ProcessBuilder.Redirect redirectInput(File file),False,,NULL
22,Runtime,6,ProcessBuilder.Redirect redirectInput(InputStream in),False,,NULL
22,Runtime,7,ProcessBuilder.Redirect redirectOutput(File file),False,,NULL
22,Runtime,8,ProcessBuilder.Redirect redirectOutput(OutputStream out),False,,NULL
22,Runtime,9,void addShutdownHook(Thread hook),True,Registers a new virtual-machine shutdown hook.,"

addShutdownHook
public void addShutdownHook(Thread hook)
Registers a new virtual-machine shutdown hook.

  The Java virtual machine shuts down in response to two kinds
 of events:

   
 The program exits normally, when the last non-daemon
   thread exits or when the exit (equivalently,
   System.exit) method is invoked, or

    The virtual machine is terminated in response to a
   user interrupt, such as typing ^C, or a system-wide event,
   such as user logoff or system shutdown.

   
 A shutdown hook is simply an initialized but unstarted
 thread.  When the virtual machine begins its shutdown sequence it will
 start all registered shutdown hooks in some unspecified order and let
 them run concurrently.  When all the hooks have finished it will then
 halt. Note that daemon threads will continue to run during the shutdown
 sequence, as will non-daemon threads if shutdown was initiated by
 invoking the exit method.

  Once the shutdown sequence has begun it can be stopped only by
 invoking the halt method, which forcibly
 terminates the virtual machine.

  Once the shutdown sequence has begun it is impossible to register a
 new shutdown hook or de-register a previously-registered hook.
 Attempting either of these operations will cause an
 IllegalStateException to be thrown.

  Shutdown hooks run at a delicate time in the life cycle of a virtual
 machine and should therefore be coded defensively.  They should, in
 particular, be written to be thread-safe and to avoid deadlocks insofar
 as possible.  They should also not rely blindly upon services that may
 have registered their own shutdown hooks and therefore may themselves in
 the process of shutting down.  Attempts to use other thread-based
 services such as the AWT event-dispatch thread, for example, may lead to
 deadlocks.

  Shutdown hooks should also finish their work quickly.  When a
 program invokes exit the expectation is
 that the virtual machine will promptly shut down and exit.  When the
 virtual machine is terminated due to user logoff or system shutdown the
 underlying operating system may only allow a fixed amount of time in
 which to shut down and exit.  It is therefore inadvisable to attempt any
 user interaction or to perform a long-running computation in a shutdown
 hook.

  Uncaught exceptions are handled in shutdown hooks just as in any
 other thread, by invoking the
 uncaughtException method of the
 thread's ThreadGroup object. The default implementation of this
 method prints the exception's stack trace to System.err and
 terminates the thread; it does not cause the virtual machine to exit or
 halt.

  In rare circumstances the virtual machine may abort, that is,
 stop running without shutting down cleanly.  This occurs when the
 virtual machine is terminated externally, for example with the
 SIGKILL signal on Unix or the TerminateProcess call on
 Microsoft Windows.  The virtual machine may also abort if a native
 method goes awry by, for example, corrupting internal data structures or
 attempting to access nonexistent memory.  If the virtual machine aborts
 then no guarantee can be made about whether or not any shutdown hooks
 will be run.

Parameters:
hook - An initialized but unstarted Thread object
Throws:
IllegalArgumentException - If the specified hook has already been registered,
          or if it can be determined that the hook is already running or
          has already been run
IllegalStateException - If the virtual machine is already in the process
          of shutting down
SecurityException - If a security manager is present and it denies
          RuntimePermission(""shutdownHooks"")
Since:
1.3
See Also:
removeShutdownHook(java.lang.Thread), 
halt(int), 
exit(int)


"
22,Runtime,10,void exit(int status),True,Terminates the currently running Java virtual machine by initiating its shutdown sequence.,"

exit
public void exit(int status)
Terminates the currently running Java virtual machine by initiating its
 shutdown sequence.  This method never returns normally.  The argument
 serves as a status code; by convention, a nonzero status code indicates
 abnormal termination.

  All registered shutdown hooks, if any,
 are started in some unspecified order and allowed to run concurrently
 until they finish.  Once this is done the virtual machine
 halts.

  If this method is invoked after all shutdown hooks have already
 been run and the status is nonzero then this method halts the
 virtual machine with the given status code. Otherwise, this method
 blocks indefinitely.

  The System.exit method is the
 conventional and convenient means of invoking this method.

Parameters:
status - Termination status.  By convention, a nonzero status code
         indicates abnormal termination.
Throws:
SecurityException - If a security manager is present and its
         checkExit method does not permit
         exiting with the specified status
See Also:
SecurityException, 
SecurityManager.checkExit(int), 
addShutdownHook(java.lang.Thread), 
removeShutdownHook(java.lang.Thread), 
halt(int)


"
22,Runtime,11,void gc(),True,Runs the garbage collector.,"

gc
public void gc()
Runs the garbage collector.
 Calling this method suggests that the Java virtual machine expend
 effort toward recycling unused objects in order to make the memory
 they currently occupy available for quick reuse. When control
 returns from the method call, the virtual machine has made
 its best effort to recycle all discarded objects.
 
 The name gc stands for ""garbage
 collector"". The virtual machine performs this recycling
 process automatically as needed, in a separate thread, even if the
 gc method is not invoked explicitly.
 
 The method System.gc() is the conventional and convenient
 means of invoking this method.

"
22,Runtime,12,long totalMemory(),True,Returns the total amount of memory in the Java virtual machine.,"

totalMemory
public long totalMemory()
Returns the total amount of memory in the Java virtual machine.
 The value returned by this method may vary over time, depending on
 the host environment.
 
 Note that the amount of memory required to hold an object of any
 given type may be implementation-dependent.

Returns:
the total amount of memory currently available for current
          and future objects, measured in bytes.


"
22,Runtime,13,long freeMemory(),True,Returns the amount of free memory in the Java Virtual Machine.,"

freeMemory
public long freeMemory()
Returns the amount of free memory in the Java Virtual Machine.
 Calling the
 gc method may result in increasing the value returned
 by freeMemory.

Returns:
an approximation to the total amount of memory currently
          available for future allocated objects, measured in bytes.


"
22,Runtime,14,long maxMemory(),True,Returns the maximum amount of memory that the Java virtual machine will attempt to use.,"

maxMemory
public long maxMemory()
Returns the maximum amount of memory that the Java virtual machine will
 attempt to use.  If there is no inherent limit then the value Long.MAX_VALUE will be returned.

Returns:
the maximum amount of memory that the virtual machine will
          attempt to use, measured in bytes
Since:
1.4


"
22,Runtime,15,int availableProcessors(),True,Returns the number of processors available to the Java virtual machine.,"

availableProcessors
public int availableProcessors()
Returns the number of processors available to the Java virtual machine.

  This value may change during a particular invocation of the virtual
 machine.  Applications that are sensitive to the number of available
 processors should therefore occasionally poll this property and adjust
 their resource usage appropriately. 

Returns:
the maximum number of processors available to the virtual
          machine; never smaller than one
Since:
1.4


"
22,Runtime,16,long getRuntimeMXBean(),False,,NULL
22,Runtime,17,long getProcessId(),False,,NULL
22,Runtime,18,long getProcessCpuTime(),False,,NULL
22,Runtime,19,long getFreePhysicalMemorySize(),False,,NULL
22,Runtime,20,long getTotalPhysicalMemorySize(),False,,NULL
22,Runtime,21,long getFreeSwapSpaceSize(),False,,NULL
22,Runtime,22,long getTotalSwapSpaceSize(),False,,NULL
22,Runtime,23,long getCommittedVirtualMemorySize(),False,,NULL
22,Runtime,24,long getMaxDirectMemorySize(),False,,NULL
22,Runtime,25,long getDirectMemorySize(),False,,NULL
22,Runtime,26,long getObjectPendingFinalizationCount(),False,,NULL
22,Runtime,27,long getUptime(),False,,NULL
22,Runtime,28,long getCommittedThreadAllocatedMemory(),False,,NULL
22,Runtime,29,long getThreadAllocatedMemory(),False,,NULL
22,Runtime,30,long getMaxMemory(),False,,NULL
22,Runtime,31,long getTotalMemory(),False,,NULL
22,Runtime,32,long getFreeMemory(),False,,NULL
22,Runtime,33,long getUsedMemory(),False,,NULL
22,Runtime,34,long getMaxDirectMemory(),False,,NULL
22,Runtime,35,long getDirectMemory(),False,,NULL
22,Runtime,36,long getUsedDirectMemory(),False,,NULL
22,Runtime,37,long getFreeDirectMemory(),False,,NULL
22,Runtime,38,long getTotalDirectMemory(),False,,NULL
22,Runtime,39,long getTotalMemory(),False,,NULL
22,Runtime,40,long getFreeMemory(),False,,NULL
22,Runtime,41,long getUsedMemory(),False,,NULL
22,Runtime,42,long getMaxDirectMemory(),False,,NULL
22,Runtime,43,long getDirectMemory(),False,,NULL
22,Runtime,44,long getUsedDirectMemory(),False,,NULL
22,Runtime,45,long getFreeDirectMemory(),False,,NULL
22,Runtime,46,long getTotalDirectMemory(),False,,NULL
22,Runtime,47,long getTotalMemory(),False,,NULL
22,Runtime,48,long getFreeMemory(),False,,NULL
22,Runtime,49,long getUsedMemory(),False,,NULL
22,Runtime,50,long getMaxDirectMemory(),False,,NULL
22,Runtime,51,long getDirectMemory(),False,,NULL
22,Runtime,52,long getUsedDirectMemory(),False,,NULL
22,Runtime,53,long getFreeDirectMemory(),False,,NULL
22,Runtime,54,long getTotalDirectMemory(),False,,NULL
22,Runtime,55,long getTotalMemory(),False,,NULL
22,Runtime,56,long getFreeMemory(),False,,NULL
22,Runtime,57,long getUsedMemory(),False,,NULL
22,Runtime,58,long getMaxDirectMemory(),False,,NULL
22,Runtime,59,long getDirectMemory(),False,,NULL
22,Runtime,60,long getUsedDirectMemory(),False,,NULL
22,Runtime,61,long getFreeDirectMemory(),False,,NULL
22,Runtime,62,long getTotalDirectMemory(),False,,NULL
22,Runtime,63,long getTotalMemory(),False,,NULL
22,Runtime,64,long getFreeMemory(),False,,NULL
22,Runtime,65,long getUsedMemory(),False,,NULL
23,RuntimePermission,1,boolean checkPermission(Permission perm),False,,NULL
23,RuntimePermission,2,"void checkPermission(Permission perm, Object context)",False,,NULL
23,RuntimePermission,3,void setReadOnly(),False,,NULL
23,RuntimePermission,4,void setWriteOnly(),False,,NULL
23,RuntimePermission,5,void setSecurityManager(SecurityManager sm),False,,NULL
24,SecurityManager,1,void checkPermission(Permission perm),True,"Throws a SecurityException if the requested access, specified by the given permission, is not permitted based on the security policy currently in effect.","

checkPermission
public void checkPermission(Permission perm)
Throws a SecurityException if the requested
 access, specified by the given permission, is not permitted based
 on the security policy currently in effect.
 
 This method calls AccessController.checkPermission
 with the given permission.

Parameters:
perm - the requested permission.
Throws:
SecurityException - if access is not permitted based on
            the current security policy.
NullPointerException - if the permission argument is
            null.
Since:
1.2


"
24,SecurityManager,2,"void checkPermission(Permission perm, Object context)",True,Throws a SecurityException if the specified security context is denied access to the resource specified by the given permission.,"

checkPermission
public void checkPermission(Permission perm,
                            Object context)
Throws a SecurityException if the
 specified security context is denied access to the resource
 specified by the given permission.
 The context must be a security
 context returned by a previous call to
 getSecurityContext and the access control
 decision is based upon the configured security policy for
 that security context.
 
 If context is an instance of
 AccessControlContext then the
 AccessControlContext.checkPermission method is
 invoked with the specified permission.
 
 If context is not an instance of
 AccessControlContext then a
 SecurityException is thrown.

Parameters:
perm - the specified permission
context - a system-dependent security context.
Throws:
SecurityException - if the specified security context
             is not an instance of AccessControlContext
             (e.g., is null), or is denied access to the
             resource specified by the given permission.
NullPointerException - if the permission argument is
             null.
Since:
1.2
See Also:
getSecurityContext(), 
AccessControlContext.checkPermission(java.security.Permission)


"
24,SecurityManager,3,void checkExit(int status),True,Throws a SecurityException if the calling thread is not allowed to cause the Java Virtual Machine to halt with the specified status code.,"

checkExit
public void checkExit(int status)
Throws a SecurityException if the
 calling thread is not allowed to cause the Java Virtual Machine to
 halt with the specified status code.
 
 This method is invoked for the current security manager by the
 exit method of class Runtime. A status
 of 0 indicates success; other values indicate various
 errors.
 
 This method calls checkPermission with the
 RuntimePermission(""exitVM.""+status) permission.
 
 If you override this method, then you should make a call to
 super.checkExit
 at the point the overridden method would normally throw an
 exception.

Parameters:
status - the exit status.
Throws:
SecurityException - if the calling thread does not have
              permission to halt the Java Virtual Machine with
              the specified status.
See Also:
exit, 
checkPermission


"
24,SecurityManager,4,void checkAwtEventQueueAccess(),True,Deprecated. The dependency on AWTPermission creates an impediment to future modularization of the Java platform. Users of this method should instead invoke checkPermission(java.security.Permission) directly. This method will be changed in a future release to check the permission java.security.AllPermission.,"

checkAwtEventQueueAccess
@Deprecated
public void checkAwtEventQueueAccess()
Deprecated. The dependency on AWTPermission creates an
             impediment to future modularization of the Java platform.
             Users of this method should instead invoke
             checkPermission(java.security.Permission) directly.
             This method will be changed in a future release to check
             the permission java.security.AllPermission.
Throws a SecurityException if the
 calling thread is not allowed to access the AWT event queue.
 
 This method calls checkPermission with the
 AWTPermission(""accessEventQueue"") permission.
 In the case of subset Profiles of Java SE that do not include the
 java.awt package, checkPermission is instead called
 to check the permission java.security.AllPermission.

 
 If you override this method, then you should make a call to
 super.checkAwtEventQueueAccess
 at the point the overridden method would normally throw an
 exception.

Throws:
SecurityException - if the calling thread does not have
             permission to access the AWT event queue.
Since:
JDK1.1
See Also:
checkPermission


"
24,SecurityManager,5,void checkLink(String target),True,Throws a SecurityException if the calling thread is not allowed to dynamic link the library code specified by the string argument file.,"

checkLink
public void checkLink(String lib)
Throws a SecurityException if the
 calling thread is not allowed to dynamic link the library code
 specified by the string argument file. The argument is either a
 simple library name or a complete filename.
 
 This method is invoked for the current security manager by
 methods load and loadLibrary of class
 Runtime.
 
 This method calls checkPermission with the
 RuntimePermission(""loadLibrary.""+lib) permission.
 
 If you override this method, then you should make a call to
 super.checkLink
 at the point the overridden method would normally throw an
 exception.

Parameters:
lib - the name of the library.
Throws:
SecurityException - if the calling thread does not have
             permission to dynamically link the library.
NullPointerException - if the lib argument is
             null.
See Also:
Runtime.load(java.lang.String), 
Runtime.loadLibrary(java.lang.String), 
checkPermission


"
25,Short,1,shortValue(),False,,NULL
25,Short,2,"compare(short x, short y)",False,,NULL
25,Short,3,"compareUnsigned(short x, short y)",False,,NULL
25,Short,4,decode(String nm),False,,NULL
25,Short,5,"decode(String nm, int radix)",False,,NULL
26,StackTraceElement,1,String getClassName(),True,Returns the fully qualified name of the class containing the execution point represented by this stack trace element.,"

getClassName
public String getClassName()
Returns the fully qualified name of the class containing the
 execution point represented by this stack trace element.

Returns:
the fully qualified name of the Class containing
         the execution point represented by this stack trace element.


"
26,StackTraceElement,2,String getFileName(),True,Returns the name of the source file containing the execution point represented by this stack trace element.,"

getFileName
public String getFileName()
Returns the name of the source file containing the execution point
 represented by this stack trace element.  Generally, this corresponds
 to the SourceFile attribute of the relevant class
 file (as per The Java Virtual Machine Specification, Section
 4.7.7).  In some systems, the name may refer to some source code unit
 other than a file, such as an entry in source repository.

Returns:
the name of the file containing the execution point
         represented by this stack trace element, or null if
         this information is unavailable.


"
26,StackTraceElement,3,int getLineNumber(),True,Returns the line number of the source line containing the execution point represented by this stack trace element.,"

getLineNumber
public int getLineNumber()
Returns the line number of the source line containing the execution
 point represented by this stack trace element.  Generally, this is
 derived from the LineNumberTable attribute of the relevant
 class file (as per The Java Virtual Machine
 Specification, Section 4.7.8).

Returns:
the line number of the source line containing the execution
         point represented by this stack trace element, or a negative
         number if this information is unavailable.


"
26,StackTraceElement,4,String getMethodName(),True,Returns the name of the method containing the execution point represented by this stack trace element.,"

getMethodName
public String getMethodName()
Returns the name of the method containing the execution point
 represented by this stack trace element.  If the execution point is
 contained in an instance or class initializer, this method will return
 the appropriate special method name, <init> or
 <clinit>, as per Section 3.9 of The Java Virtual
 Machine Specification.

Returns:
the name of the method containing the execution point
         represented by this stack trace element.


"
26,StackTraceElement,5,boolean isNativeMethod(),True,Returns true if the method containing the execution point represented by this stack trace element is a native method.,"

isNativeMethod
public boolean isNativeMethod()
Returns true if the method containing the execution point
 represented by this stack trace element is a native method.

Returns:
true if the method containing the execution point
         represented by this stack trace element is a native method.


"
27,StrictMath,1,double acos(double a),True,Returns the arc cosine of a value; the returned angle is in the range 0.0 through pi.,"

acos
public static double acos(double a)
Returns the arc cosine of a value; the returned angle is in the
 range 0.0 through pi.  Special case:
 If the argument is NaN or its absolute value is greater
 than 1, then the result is NaN.

Parameters:
a - the value whose arc cosine is to be returned.
Returns:
the arc cosine of the argument.


"
27,StrictMath,2,double asin(double a),True,Returns the arc sine of a value; the returned angle is in the range -pi/2 through pi/2.,"

asin
public static double asin(double a)
Returns the arc sine of a value; the returned angle is in the
 range -pi/2 through pi/2.  Special cases:
 If the argument is NaN or its absolute value is greater
 than 1, then the result is NaN.
 If the argument is zero, then the result is a zero with the
 same sign as the argument.

Parameters:
a - the value whose arc sine is to be returned.
Returns:
the arc sine of the argument.


"
27,StrictMath,3,double atan(double a),True,Returns the arc tangent of a value; the returned angle is in the range -pi/2 through pi/2.,"

atan
public static double atan(double a)
Returns the arc tangent of a value; the returned angle is in the
 range -pi/2 through pi/2.  Special cases:
 If the argument is NaN, then the result is NaN.
 If the argument is zero, then the result is a zero with the
 same sign as the argument.

Parameters:
a - the value whose arc tangent is to be returned.
Returns:
the arc tangent of the argument.


"
27,StrictMath,4,"double atan2(double y, double x)",True,"Returns the angle theta from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta).","

atan2
public static double atan2(double y,
                           double x)
Returns the angle theta from the conversion of rectangular
 coordinates (x, y) to polar
 coordinates (r, theta).
 This method computes the phase theta by computing an arc tangent
 of y/x in the range of -pi to pi. Special
 cases:
 If either argument is NaN, then the result is NaN.
 If the first argument is positive zero and the second argument
 is positive, or the first argument is positive and finite and the
 second argument is positive infinity, then the result is positive
 zero.
 If the first argument is negative zero and the second argument
 is positive, or the first argument is negative and finite and the
 second argument is positive infinity, then the result is negative zero.
 If the first argument is positive zero and the second argument
 is negative, or the first argument is positive and finite and the
 second argument is negative infinity, then the result is the
 double value closest to pi.
 If the first argument is negative zero and the second argument
 is negative, or the first argument is negative and finite and the
 second argument is negative infinity, then the result is the
 double value closest to -pi.
 If the first argument is positive and the second argument is
 positive zero or negative zero, or the first argument is positive
 infinity and the second argument is finite, then the result is the
 double value closest to pi/2.
 If the first argument is negative and the second argument is
 positive zero or negative zero, or the first argument is negative
 infinity and the second argument is finite, then the result is the
 double value closest to -pi/2.
 If both arguments are positive infinity, then the result is the
 double value closest to pi/4.
 If the first argument is positive infinity and the second argument
 is negative infinity, then the result is the double
 value closest to 3*pi/4.
 If the first argument is negative infinity and the second argument
 is positive infinity, then the result is the double value
 closest to -pi/4.
 If both arguments are negative infinity, then the result is the
 double value closest to -3*pi/4.

Parameters:
y - the ordinate coordinate
x - the abscissa coordinate
Returns:
the theta component of the point
          (r, theta)
          in polar coordinates that corresponds to the point
          (x, y) in Cartesian coordinates.


"
27,StrictMath,5,double ceil(double a),True,Returns the smallest (closest to negative infinity) double value that is greater than or equal to the argument and is equal to a mathematical integer.,"

ceil
public static double ceil(double a)
Returns the smallest (closest to negative infinity)
 double value that is greater than or equal to the
 argument and is equal to a mathematical integer. Special cases:
 If the argument value is already equal to a
 mathematical integer, then the result is the same as the
 argument.  If the argument is NaN or an infinity or
 positive zero or negative zero, then the result is the same as
 the argument.  If the argument value is less than zero but
 greater than -1.0, then the result is negative zero. Note
 that the value of StrictMath.ceil(x) is exactly the
 value of -StrictMath.floor(-x).

Parameters:
a - a value.
Returns:
the smallest (closest to negative infinity)
          floating-point value that is greater than or equal to
          the argument and is equal to a mathematical integer.


"
27,StrictMath,6,double cos(double a),True,Returns the trigonometric cosine of an angle.,"

cos
public static double cos(double a)
Returns the trigonometric cosine of an angle. Special cases:
 If the argument is NaN or an infinity, then the
 result is NaN.

Parameters:
a - an angle, in radians.
Returns:
the cosine of the argument.


"
27,StrictMath,7,double exp(double a),True,Returns Euler's number e raised to the power of a double value.,"

exp
public static double exp(double a)
Returns Euler's number e raised to the power of a
 double value. Special cases:
 If the argument is NaN, the result is NaN.
 If the argument is positive infinity, then the result is
 positive infinity.
 If the argument is negative infinity, then the result is
 positive zero.

Parameters:
a - the exponent to raise e to.
Returns:
the value ea,
          where e is the base of the natural logarithms.


"
27,StrictMath,8,double floor(double a),True,Returns the largest (closest to positive infinity) double value that is less than or equal to the argument and is equal to a mathematical integer.,"

floor
public static double floor(double a)
Returns the largest (closest to positive infinity)
 double value that is less than or equal to the
 argument and is equal to a mathematical integer. Special cases:
 If the argument value is already equal to a
 mathematical integer, then the result is the same as the
 argument.  If the argument is NaN or an infinity or
 positive zero or negative zero, then the result is the same as
 the argument.

Parameters:
a - a value.
Returns:
the largest (closest to positive infinity)
          floating-point value that less than or equal to the argument
          and is equal to a mathematical integer.


"
27,StrictMath,9,double log(double a),True,Returns the natural logarithm (base e) of a double value.,"

log
public static double log(double a)
Returns the natural logarithm (base e) of a double
 value. Special cases:
 If the argument is NaN or less than zero, then the result
 is NaN.
 If the argument is positive infinity, then the result is
 positive infinity.
 If the argument is positive zero or negative zero, then the
 result is negative infinity.

Parameters:
a - a value
Returns:
the value ln a, the natural logarithm of
          a.


"
27,StrictMath,10,"double max(double a, double b)",True,Returns the greater of two double values.,"

max
public static double max(double a,
                         double b)
Returns the greater of two double values.  That
 is, the result is the argument closer to positive infinity. If
 the arguments have the same value, the result is that same
 value. If either value is NaN, then the result is NaN.  Unlike
 the numerical comparison operators, this method considers
 negative zero to be strictly smaller than positive zero. If one
 argument is positive zero and the other negative zero, the
 result is positive zero.

Parameters:
a - an argument.
b - another argument.
Returns:
the larger of a and b.


"
27,StrictMath,11,"double min(double a, double b)",True,Returns the smaller of two double values.,"

min
public static double min(double a,
                         double b)
Returns the smaller of two double values.  That
 is, the result is the value closer to negative infinity. If the
 arguments have the same value, the result is that same
 value. If either value is NaN, then the result is NaN.  Unlike
 the numerical comparison operators, this method considers
 negative zero to be strictly smaller than positive zero. If one
 argument is positive zero and the other is negative zero, the
 result is negative zero.

Parameters:
a - an argument.
b - another argument.
Returns:
the smaller of a and b.


"
27,StrictMath,12,"double pow(double a, double b)",True,Returns the value of the first argument raised to the power of the second argument.,"

pow
public static double pow(double a,
                         double b)
Returns the value of the first argument raised to the power of the
 second argument. Special cases:

 If the second argument is positive or negative zero, then the
 result is 1.0.
 If the second argument is 1.0, then the result is the same as the
 first argument.
 If the second argument is NaN, then the result is NaN.
 If the first argument is NaN and the second argument is nonzero,
 then the result is NaN.

 If
 
the absolute value of the first argument is greater than 1
 and the second argument is positive infinity, or
 the absolute value of the first argument is less than 1 and
 the second argument is negative infinity,
 
 then the result is positive infinity.

 If
 
the absolute value of the first argument is greater than 1 and
 the second argument is negative infinity, or
 the absolute value of the
 first argument is less than 1 and the second argument is positive
 infinity,
 
 then the result is positive zero.

 If the absolute value of the first argument equals 1 and the
 second argument is infinite, then the result is NaN.

 If
 
the first argument is positive zero and the second argument
 is greater than zero, or
 the first argument is positive infinity and the second
 argument is less than zero,
 
 then the result is positive zero.

 If
 
the first argument is positive zero and the second argument
 is less than zero, or
 the first argument is positive infinity and the second
 argument is greater than zero,
 
 then the result is positive infinity.

 If
 
the first argument is negative zero and the second argument
 is greater than zero but not a finite odd integer, or
 the first argument is negative infinity and the second
 argument is less than zero but not a finite odd integer,
 
 then the result is positive zero.

 If
 
the first argument is negative zero and the second argument
 is a positive finite odd integer, or
 the first argument is negative infinity and the second
 argument is a negative finite odd integer,
 
 then the result is negative zero.

 If
 
the first argument is negative zero and the second argument
 is less than zero but not a finite odd integer, or
 the first argument is negative infinity and the second
 argument is greater than zero but not a finite odd integer,
 
 then the result is positive infinity.

 If
 
the first argument is negative zero and the second argument
 is a negative finite odd integer, or
 the first argument is negative infinity and the second
 argument is a positive finite odd integer,
 
 then the result is negative infinity.

 If the first argument is finite and less than zero
 
 if the second argument is a finite even integer, the
 result is equal to the result of raising the absolute value of
 the first argument to the power of the second argument

 if the second argument is a finite odd integer, the result
 is equal to the negative of the result of raising the absolute
 value of the first argument to the power of the second
 argument

 if the second argument is finite and not an integer, then
 the result is NaN.
 
If both arguments are integers, then the result is exactly equal
 to the mathematical result of raising the first argument to the power
 of the second argument if that result can in fact be represented
 exactly as a double value.
(In the foregoing descriptions, a floating-point value is
 considered to be an integer if and only if it is finite and a
 fixed point of the method ceil or,
 equivalently, a fixed point of the method floor. A value is a fixed point of a one-argument
 method if and only if the result of applying the method to the
 value is equal to the value.)

Parameters:
a - base.
b - the exponent.
Returns:
the value ab.


"
27,StrictMath,13,double random(),True,"Returns a double value with a positive sign, greater than or equal to 0.0 and less than 1.0.","

random
public static double random()
Returns a double value with a positive sign, greater
 than or equal to 0.0 and less than 1.0.
 Returned values are chosen pseudorandomly with (approximately)
 uniform distribution from that range.

 When this method is first called, it creates a single new
 pseudorandom-number generator, exactly as if by the expression

 new java.util.Random()

 This new pseudorandom-number generator is used thereafter for
 all calls to this method and is used nowhere else.

 This method is properly synchronized to allow correct use by
 more than one thread. However, if many threads need to generate
 pseudorandom numbers at a great rate, it may reduce contention
 for each thread to have its own pseudorandom-number generator.

Returns:
a pseudorandom double greater than or equal
 to 0.0 and less than 1.0.
See Also:
Random.nextDouble()


"
27,StrictMath,14,double rint(double a),True,Returns the double value that is closest in value to the argument and is equal to a mathematical integer.,"

rint
public static double rint(double a)
Returns the double value that is closest in value
 to the argument and is equal to a mathematical integer. If two
 double values that are mathematical integers are
 equally close to the value of the argument, the result is the
 integer value that is even. Special cases:
 If the argument value is already equal to a mathematical
 integer, then the result is the same as the argument.
 If the argument is NaN or an infinity or positive zero or negative
 zero, then the result is the same as the argument.

Parameters:
a - a value.
Returns:
the closest floating-point value to a that is
          equal to a mathematical integer.


"
27,StrictMath,15,double round(double a),False,,NULL
27,StrictMath,16,double sin(double a),True,Returns the trigonometric sine of an angle.,"

sin
public static double sin(double a)
Returns the trigonometric sine of an angle. Special cases:
 If the argument is NaN or an infinity, then the
 result is NaN.
 If the argument is zero, then the result is a zero with the
 same sign as the argument.

Parameters:
a - an angle, in radians.
Returns:
the sine of the argument.


"
27,StrictMath,17,double sqrt(double a),True,Returns the correctly rounded positive square root of a double value.,"

sqrt
public static double sqrt(double a)
Returns the correctly rounded positive square root of a
 double value.
 Special cases:
 If the argument is NaN or less than zero, then the result
 is NaN.
 If the argument is positive infinity, then the result is positive
 infinity.
 If the argument is positive zero or negative zero, then the
 result is the same as the argument.
 Otherwise, the result is the double value closest to
 the true mathematical square root of the argument value.

Parameters:
a - a value.
Returns:
the positive square root of a.


"
27,StrictMath,18,double tan(double a),True,Returns the trigonometric tangent of an angle.,"

tan
public static double tan(double a)
Returns the trigonometric tangent of an angle. Special cases:
 If the argument is NaN or an infinity, then the result
 is NaN.
 If the argument is zero, then the result is a zero with the
 same sign as the argument.

Parameters:
a - an angle, in radians.
Returns:
the tangent of the argument.


"
27,StrictMath,19,double toDegrees(double angrad),True,Converts an angle measured in radians to an approximately equivalent angle measured in degrees.,"

toDegrees
public static double toDegrees(double angrad)
Converts an angle measured in radians to an approximately
 equivalent angle measured in degrees.  The conversion from
 radians to degrees is generally inexact; users should
 not expect cos(toRadians(90.0)) to exactly
 equal 0.0.

Parameters:
angrad - an angle, in radians
Returns:
the measurement of the angle angrad
          in degrees.


"
27,StrictMath,20,double toRadians(double angdeg),True,Converts an angle measured in degrees to an approximately equivalent angle measured in radians.,"

toRadians
public static double toRadians(double angdeg)
Converts an angle measured in degrees to an approximately
 equivalent angle measured in radians.  The conversion from
 degrees to radians is generally inexact.

Parameters:
angdeg - an angle, in degrees
Returns:
the measurement of the angle angdeg
          in radians.


"
28,String,1,String(),False,,NULL
28,String,2,String(char[] value),False,,NULL
28,String,3,int length(),True,Returns the length of this string.,"

length
public int length()
Returns the length of this string.
 The length is equal to the number of Unicode
 code units in the string.

Specified by:
length in interface CharSequence
Returns:
the length of the sequence of characters represented by this
          object.


"
28,String,4,char charAt(int index),True,Returns the char value at the specified index.,"

charAt
public char charAt(int index)
Returns the char value at the
 specified index. An index ranges from 0 to
 length() - 1. The first char value of the sequence
 is at index 0, the next at index 1,
 and so on, as for array indexing.

 If the char value specified by the index is a
 surrogate, the surrogate
 value is returned.

Specified by:
charAt in interface CharSequence
Parameters:
index - the index of the char value.
Returns:
the char value at the specified index of this string.
             The first char value is at index 0.
Throws:
IndexOutOfBoundsException - if the index
             argument is negative or not less than the length of this
             string.


"
28,String,5,boolean equals(Object anObject),True,Compares this string to the specified object.,"

equals
public boolean equals(Object anObject)
Compares this string to the specified object.  The result is true if and only if the argument is not null and is a String object that represents the same sequence of characters as this
 object.

Overrides:
equals in class Object
Parameters:
anObject - The object to compare this String against
Returns:
true if the given object represents a String
          equivalent to this string, false otherwise
See Also:
compareTo(String), 
equalsIgnoreCase(String)


"
28,String,6,boolean equalsIgnoreCase(String anotherString),True,"Compares this String to another String, ignoring case considerations.","

equalsIgnoreCase
public boolean equalsIgnoreCase(String anotherString)
Compares this String to another String, ignoring case
 considerations.  Two strings are considered equal ignoring case if they
 are of the same length and corresponding characters in the two strings
 are equal ignoring case.

  Two characters c1 and c2 are considered the same
 ignoring case if at least one of the following is true:
 
 The two characters are the same (as compared by the
        == operator)
    Applying the method Character.toUpperCase(char) to each character
        produces the same result
    Applying the method Character.toLowerCase(char) to each character
        produces the same result
 

Parameters:
anotherString - The String to compare this String against
Returns:
true if the argument is not null and it
          represents an equivalent String ignoring case; false otherwise
See Also:
equals(Object)


"
28,String,7,String toLowerCase(),True,Converts all of the characters in this String to lower case using the rules of the default locale.,"

toLowerCase
public String toLowerCase()
Converts all of the characters in this String to lower
 case using the rules of the default locale. This is equivalent to calling
 toLowerCase(Locale.getDefault()).
 
Note: This method is locale sensitive, and may produce unexpected
 results if used for strings that are intended to be interpreted locale
 independently.
 Examples are programming language identifiers, protocol keys, and HTML
 tags.
 For instance, ""TITLE"".toLowerCase() in a Turkish locale
 returns ""t\u0131tle"", where '\u0131' is the
 LATIN SMALL LETTER DOTLESS I character.
 To obtain correct results for locale insensitive strings, use
 toLowerCase(Locale.ROOT).
 

Returns:
the String, converted to lowercase.
See Also:
toLowerCase(Locale)


"
28,String,8,String toUpperCase(),True,Converts all of the characters in this String to upper case using the rules of the default locale.,"

toUpperCase
public String toUpperCase()
Converts all of the characters in this String to upper
 case using the rules of the default locale. This method is equivalent to
 toUpperCase(Locale.getDefault()).
 
Note: This method is locale sensitive, and may produce unexpected
 results if used for strings that are intended to be interpreted locale
 independently.
 Examples are programming language identifiers, protocol keys, and HTML
 tags.
 For instance, ""title"".toUpperCase() in a Turkish locale
 returns ""T\u0130TLE"", where '\u0130' is the
 LATIN CAPITAL LETTER I WITH DOT ABOVE character.
 To obtain correct results for locale insensitive strings, use
 toUpperCase(Locale.ROOT).
 

Returns:
the String, converted to uppercase.
See Also:
toUpperCase(Locale)


"
28,String,9,String trim(),True,"Returns a string whose value is this string, with any leading and trailing whitespace removed.","

trim
public String trim()
Returns a string whose value is this string, with any leading and trailing
 whitespace removed.
 
 If this String object represents an empty character
 sequence, or the first and last characters of character sequence
 represented by this String object both have codes
 greater than '\u0020' (the space character), then a
 reference to this String object is returned.
 
 Otherwise, if there is no character with a code greater than
 '\u0020' in the string, then a
 String object representing an empty string is
 returned.
 
 Otherwise, let k be the index of the first character in the
 string whose code is greater than '\u0020', and let
 m be the index of the last character in the string whose code
 is greater than '\u0020'. A String
 object is returned, representing the substring of this string that
 begins with the character at index k and ends with the
 character at index m-that is, the result of
 this.substring(k, m + 1).
 
 This method may be used to trim whitespace (as defined above) from
 the beginning and end of a string.

Returns:
A string whose value is this string, with any leading and trailing white
          space removed, or this string if it has no leading or
          trailing white space.


"
28,String,10,boolean startsWith(String prefix),True,Tests if this string starts with the specified prefix.,"

startsWith
public boolean startsWith(String prefix)
Tests if this string starts with the specified prefix.

Parameters:
prefix - the prefix.
Returns:
true if the character sequence represented by the
          argument is a prefix of the character sequence represented by
          this string; false otherwise.
          Note also that true will be returned if the
          argument is an empty string or is equal to this
          String object as determined by the
          equals(Object) method.
Since:
1. 0


"
28,String,11,boolean endsWith(String suffix),True,Tests if this string ends with the specified suffix.,"

endsWith
public boolean endsWith(String suffix)
Tests if this string ends with the specified suffix.

Parameters:
suffix - the suffix.
Returns:
true if the character sequence represented by the
          argument is a suffix of the character sequence represented by
          this object; false otherwise. Note that the
          result will be true if the argument is the
          empty string or is equal to this String object
          as determined by the equals(Object) method.


"
28,String,12,int indexOf(int ch),True,Returns the index within this string of the first occurrence of the specified character.,"

indexOf
public int indexOf(int ch)
Returns the index within this string of the first occurrence of
 the specified character. If a character with value
 ch occurs in the character sequence represented by
 this String object, then the index (in Unicode
 code units) of the first such occurrence is returned. For
 values of ch in the range from 0 to 0xFFFF
 (inclusive), this is the smallest value k such that:
 
 this.charAt(k) == ch
 
 is true. For other values of ch, it is the
 smallest value k such that:
 
 this.codePointAt(k) == ch
 
 is true. In either case, if no such character occurs in this
 string, then -1 is returned.

Parameters:
ch - a character (Unicode code point).
Returns:
the index of the first occurrence of the character in the
          character sequence represented by this object, or
          -1 if the character does not occur.


"
28,String,13,"int indexOf(int ch, int fromIndex)",True,"Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index.","

indexOf
public int indexOf(int ch,
                   int fromIndex)
Returns the index within this string of the first occurrence of the
 specified character, starting the search at the specified index.
 
 If a character with value ch occurs in the
 character sequence represented by this String
 object at an index no smaller than fromIndex, then
 the index of the first such occurrence is returned. For values
 of ch in the range from 0 to 0xFFFF (inclusive),
 this is the smallest value k such that:
 
 (this.charAt(k) == ch)  && (k >= fromIndex)
 
 is true. For other values of ch, it is the
 smallest value k such that:
 
 (this.codePointAt(k) == ch)  && (k >= fromIndex)
 
 is true. In either case, if no such character occurs in this
 string at or after position fromIndex, then
 -1 is returned.

 
 There is no restriction on the value of fromIndex. If it
 is negative, it has the same effect as if it were zero: this entire
 string may be searched. If it is greater than the length of this
 string, it has the same effect as if it were equal to the length of
 this string: -1 is returned.

 All indices are specified in char values
 (Unicode code units).

Parameters:
ch - a character (Unicode code point).
fromIndex - the index to start the search from.
Returns:
the index of the first occurrence of the character in the
          character sequence represented by this object that is greater
          than or equal to fromIndex, or -1
          if the character does not occur.


"
28,String,14,int lastIndexOf(int ch),True,Returns the index within this string of the last occurrence of the specified character.,"

lastIndexOf
public int lastIndexOf(int ch)
Returns the index within this string of the last occurrence of
 the specified character. For values of ch in the
 range from 0 to 0xFFFF (inclusive), the index (in Unicode code
 units) returned is the largest value k such that:
 
 this.charAt(k) == ch
 
 is true. For other values of ch, it is the
 largest value k such that:
 
 this.codePointAt(k) == ch
 
 is true.  In either case, if no such character occurs in this
 string, then -1 is returned.  The
 String is searched backwards starting at the last
 character.

Parameters:
ch - a character (Unicode code point).
Returns:
the index of the last occurrence of the character in the
          character sequence represented by this object, or
          -1 if the character does not occur.


"
28,String,15,"int lastIndexOf(int ch, int fromIndex)",True,"Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index.","

lastIndexOf
public int lastIndexOf(int ch,
                       int fromIndex)
Returns the index within this string of the last occurrence of
 the specified character, searching backward starting at the
 specified index. For values of ch in the range
 from 0 to 0xFFFF (inclusive), the index returned is the largest
 value k such that:
 
 (this.charAt(k) == ch)  && (k <= fromIndex)
 
 is true. For other values of ch, it is the
 largest value k such that:
 
 (this.codePointAt(k) == ch)  && (k <= fromIndex)
 
 is true. In either case, if no such character occurs in this
 string at or before position fromIndex, then
 -1 is returned.

 All indices are specified in char values
 (Unicode code units).

Parameters:
ch - a character (Unicode code point).
fromIndex - the index to start the search from. There is no
          restriction on the value of fromIndex. If it is
          greater than or equal to the length of this string, it has
          the same effect as if it were equal to one less than the
          length of this string: this entire string may be searched.
          If it is negative, it has the same effect as if it were -1:
          -1 is returned.
Returns:
the index of the last occurrence of the character in the
          character sequence represented by this object that is less
          than or equal to fromIndex, or -1
          if the character does not occur before that point.


"
28,String,16,String substring(int beginIndex),True,Returns a string that is a substring of this string.,"

substring
public String substring(int beginIndex)
Returns a string that is a substring of this string. The
 substring begins with the character at the specified index and
 extends to the end of this string. 
 Examples:
 
 ""unhappy"".substring(2) returns ""happy""
 ""Harbison"".substring(3) returns ""bison""
 ""emptiness"".substring(9) returns """" (an empty string)
 

Parameters:
beginIndex - the beginning index, inclusive.
Returns:
the specified substring.
Throws:
IndexOutOfBoundsException - if
             beginIndex is negative or larger than the
             length of this String object.


"
28,String,17,"String substring(int beginIndex, int endIndex)",True,Returns a string that is a substring of this string.,"

substring
public String substring(int beginIndex,
                        int endIndex)
Returns a string that is a substring of this string. The
 substring begins at the specified beginIndex and
 extends to the character at index endIndex - 1.
 Thus the length of the substring is endIndex-beginIndex.
 
 Examples:
 
 ""hamburger"".substring(4, 8) returns ""urge""
 ""smiles"".substring(1, 5) returns ""mile""
 

Parameters:
beginIndex - the beginning index, inclusive.
endIndex - the ending index, exclusive.
Returns:
the specified substring.
Throws:
IndexOutOfBoundsException - if the
             beginIndex is negative, or
             endIndex is larger than the length of
             this String object, or
             beginIndex is larger than
             endIndex.


"
28,String,18,"String replace(char oldChar, char newChar)",True,Returns a string resulting from replacing all occurrences of oldChar in this string with newChar.,"

replace
public String replace(char oldChar,
                      char newChar)
Returns a string resulting from replacing all occurrences of
 oldChar in this string with newChar.
 
 If the character oldChar does not occur in the
 character sequence represented by this String object,
 then a reference to this String object is returned.
 Otherwise, a String object is returned that
 represents a character sequence identical to the character sequence
 represented by this String object, except that every
 occurrence of oldChar is replaced by an occurrence
 of newChar.
 
 Examples:
 
 ""mesquite in your cellar"".replace('e', 'o')
         returns ""mosquito in your collar""
 ""the war of baronets"".replace('r', 'y')
         returns ""the way of bayonets""
 ""sparring with a purple porpoise"".replace('p', 't')
         returns ""starring with a turtle tortoise""
 ""JonL"".replace('q', 'x') returns ""JonL"" (no change)
 

Parameters:
oldChar - the old character.
newChar - the new character.
Returns:
a string derived from this string by replacing every
          occurrence of oldChar with newChar.


"
28,String,19,"String replaceAll(String regex, String replacement)",True,Replaces each substring of this string that matches the given regular expression with the given replacement.,"

replaceAll
public String replaceAll(String regex,
                         String replacement)
Replaces each substring of this string that matches the given regular expression with the
 given replacement.

  An invocation of this method of the form
 str.replaceAll(regex, repl)
 yields exactly the same result as the expression

 

Pattern.compile(regex).matcher(str).replaceAll(repl)
 


 Note that backslashes (\) and dollar signs ($) in the
 replacement string may cause the results to be different than if it were
 being treated as a literal replacement string; see
 Matcher.replaceAll.
 Use Matcher.quoteReplacement(java.lang.String) to suppress the special
 meaning of these characters, if desired.

Parameters:
regex - the regular expression to which this string is to be matched
replacement - the string to be substituted for each match
Returns:
The resulting String
Throws:
PatternSyntaxException - if the regular expression's syntax is invalid
Since:
1.4
See Also:
Pattern


"
28,String,20,String[] split(String regex),True,Splits this string around matches of the given regular expression.,"

split
public String[] split(String regex)
Splits this string around matches of the given regular expression.

  This method works as if by invoking the two-argument split method with the given expression and a limit
 argument of zero.  Trailing empty strings are therefore not included in
 the resulting array.

  The string ""boo:and:foo"", for example, yields the following
 results with these expressions:

 

Regex
Result

:
{ ""boo"", ""and"", ""foo"" }
o
{ ""b"", """", "":and:f"" }


Parameters:
regex - the delimiting regular expression
Returns:
the array of strings computed by splitting this string
          around matches of the given regular expression
Throws:
PatternSyntaxException - if the regular expression's syntax is invalid
Since:
1.4
See Also:
Pattern


"
28,String,21,String concat(String str),True,Concatenates the specified string to the end of this string.,"

concat
public String concat(String str)
Concatenates the specified string to the end of this string.
 
 If the length of the argument string is 0, then this
 String object is returned. Otherwise, a
 String object is returned that represents a character
 sequence that is the concatenation of the character sequence
 represented by this String object and the character
 sequence represented by the argument string.
 Examples:
 
 ""cares"".concat(""s"") returns ""caress""
 ""to"".concat(""get"").concat(""her"") returns ""together""
 

Parameters:
str - the String that is concatenated to the end
                of this String.
Returns:
a string that represents the concatenation of this object's
          characters followed by the string argument's characters.


"
28,String,22,boolean isEmpty(),True,"Returns true if, and only if, length() is 0.","

isEmpty
public boolean isEmpty()
Returns true if, and only if, length() is 0.

Returns:
true if length() is 0, otherwise
 false
Since:
1.6


"
28,String,23,String intern(),True,Returns a canonical representation for the string object.,"

intern
public String intern()
Returns a canonical representation for the string object.
 
 A pool of strings, initially empty, is maintained privately by the
 class String.
 
 When the intern method is invoked, if the pool already contains a
 string equal to this String object as determined by
 the equals(Object) method, then the string from the pool is
 returned. Otherwise, this String object is added to the
 pool and a reference to this String object is returned.
 
 It follows that for any two strings s and t,
 s.intern() == t.intern() is true
 if and only if s.equals(t) is true.
 
 All literal strings and string-valued constant expressions are
 interned. String literals are defined in section 3.10.5 of the
 The Javaâ„¢ Language Specification.

Returns:
a string that has the same contents as this string, but is
          guaranteed to be from a pool of unique strings.


"
28,String,24,"String format(String format, Object... args)",True,Returns a formatted string using the specified format string and arguments.,"

format
public static String format(String format,
                            Object... args)
Returns a formatted string using the specified format string and
 arguments.

  The locale always used is the one returned by Locale.getDefault().

Parameters:
format - A format string
args - Arguments referenced by the format specifiers in the format
         string.  If there are more arguments than format specifiers, the
         extra arguments are ignored.  The number of arguments is
         variable and may be zero.  The maximum number of arguments is
         limited by the maximum dimension of a Java array as defined by
         The Javaâ„¢ Virtual Machine Specification.
         The behaviour on a
         null argument depends on the conversion.
Returns:
A formatted string
Throws:
IllegalFormatException - If a format string contains an illegal syntax, a format
          specifier that is incompatible with the given arguments,
          insufficient arguments given the format string, or other
          illegal conditions.  For specification of all possible
          formatting errors, see the Details section of the
          formatter class specification.
Since:
1.5
See Also:
Formatter


"
28,String,25,"String join(CharSequence delimiter, CharSequence... elements)",True,Returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified delimiter.,"

join
public static String join(CharSequence delimiter,
                          CharSequence... elements)
Returns a new String composed of copies of the
 CharSequence elements joined together with a copy of
 the specified delimiter.

 For example,
 
     String message = String.join(""-"", ""Java"", ""is"", ""cool"");
     // message returned is: ""Java-is-cool""
 

 Note that if an element is null, then ""null"" is added.

Parameters:
delimiter - the delimiter that separates each element
elements - the elements to join together.
Returns:
a new String that is composed of the elements
         separated by the delimiter
Throws:
NullPointerException - If delimiter or elements
         is null
Since:
1.8
See Also:
StringJoiner


"
29,StringBuffer,1,StringBuffer(),False,,NULL
29,StringBuffer,2,StringBuffer(int capacity),False,,NULL
29,StringBuffer,3,StringBuffer(String str),False,,NULL
29,StringBuffer,4,StringBuffer append(String str),True,Appends the specified string to this character sequence.,"

append
public StringBuffer append(String str)
Appends the specified string to this character sequence.
 
 The characters of the String argument are appended, in
 order, increasing the length of this sequence by the length of the
 argument. If str is null, then the four
 characters ""null"" are appended.
 
 Let n be the length of this character sequence just prior to
 execution of the append method. Then the character at
 index k in the new character sequence is equal to the character
 at index k in the old character sequence, if k is less
 than n; otherwise, it is equal to the character at index
 k-n in the argument str.

Parameters:
str - a string.
Returns:
a reference to this object.


"
29,StringBuffer,5,"StringBuffer insert(int offset, String str)",True,Inserts the string into this character sequence.,"

insert
public StringBuffer insert(int offset,
                           String str)
Inserts the string into this character sequence.
 
 The characters of the String argument are inserted, in
 order, into this sequence at the indicated offset, moving up any
 characters originally above that position and increasing the length
 of this sequence by the length of the argument. If
 str is null, then the four characters
 ""null"" are inserted into this sequence.
 
 The character at index k in the new character sequence is
 equal to:
 
the character at index k in the old character sequence, if
 k is less than offset
the character at index k-offset in the
 argument str, if k is not less than
 offset but is less than offset+str.length()
the character at index k-str.length() in the
 old character sequence, if k is not less than
 offset+str.length()

 The offset argument must be greater than or equal to
 0, and less than or equal to the length
 of this sequence.

Parameters:
offset - the offset.
str - a string.
Returns:
a reference to this object.
Throws:
StringIndexOutOfBoundsException - if the offset is invalid.


"
29,StringBuffer,6,"StringBuffer delete(int start, int end)",True,Removes the characters in a substring of this sequence.,"

delete
public StringBuffer delete(int start,
                           int end)
Removes the characters in a substring of this sequence.
 The substring begins at the specified start and extends to
 the character at index end - 1 or to the end of the
 sequence if no such character exists. If
 start is equal to end, no changes are made.

Parameters:
start - The beginning index, inclusive.
end - The ending index, exclusive.
Returns:
This object.
Throws:
StringIndexOutOfBoundsException - if start
             is negative, greater than length(), or
             greater than end.
Since:
1.2


"
29,StringBuffer,7,StringBuffer reverse(),True,Causes this character sequence to be replaced by the reverse of the sequence.,"

reverse
public StringBuffer reverse()
Causes this character sequence to be replaced by the reverse of
 the sequence. If there are any surrogate pairs included in the
 sequence, these are treated as single characters for the
 reverse operation. Thus, the order of the high-low surrogates
 is never reversed.

 Let n be the character length of this character sequence
 (not the length in char values) just prior to
 execution of the reverse method. Then the
 character at index k in the new character sequence is
 equal to the character at index n-k-1 in the old
 character sequence.

 Note that the reverse operation may result in producing
 surrogate pairs that were unpaired low-surrogates and
 high-surrogates before the operation. For example, reversing
 ""\uDC00\uD800"" produces ""\uD800\uDC00"" which is
 a valid surrogate pair.

Returns:
a reference to this object.
Since:
JDK1.0.2


"
29,StringBuffer,8,StringBuffer setLength(int newLength),False,,NULL
29,StringBuffer,9,StringBuffer toString(),False,,NULL
29,StringBuffer,10,int length(),True,Returns the length (character count).,"

length
public int length()
Returns the length (character count).

Specified by:
length in interface CharSequence
Returns:
the length of the sequence of characters currently
          represented by this object


"
29,StringBuffer,11,char charAt(int index),True,Returns the char value in this sequence at the specified index.,"

charAt
public char charAt(int index)
Returns the char value in this sequence at the specified index.
 The first char value is at index 0, the next at index
 1, and so on, as in array indexing.
 
 The index argument must be greater than or equal to
 0, and less than the length of this sequence.

 If the char value specified by the index is a
 surrogate, the surrogate
 value is returned.

Specified by:
charAt in interface CharSequence
Parameters:
index - the index of the desired char value.
Returns:
the char value at the specified index.
Throws:
IndexOutOfBoundsException - if index is
             negative or greater than or equal to length().
See Also:
length()


"
29,StringBuffer,12,int indexOf(String str),True,Returns the index within this string of the first occurrence of the specified substring.,"

indexOf
public int indexOf(String str)
Returns the index within this string of the first occurrence of the
 specified substring. The integer returned is the smallest value
 k such that:
 
 this.toString().startsWith(str, <i>k</i>)
 
 is true.

Parameters:
str - any string.
Returns:
if the string argument occurs as a substring within this
          object, then the index of the first character of the first
          such substring is returned; if it does not occur as a
          substring, -1 is returned.
Since:
1.4


"
29,StringBuffer,13,int lastIndexOf(String str),True,Returns the index within this string of the rightmost occurrence of the specified substring.,"

lastIndexOf
public int lastIndexOf(String str)
Returns the index within this string of the rightmost occurrence
 of the specified substring.  The rightmost empty string """" is
 considered to occur at the index value this.length().
 The returned index is the largest value k such that
 
 this.toString().startsWith(str, k)
 
 is true.

Parameters:
str - the substring to search for.
Returns:
if the string argument occurs one or more times as a substring
          within this object, then the index of the first character of
          the last such substring is returned. If it does not occur as
          a substring, -1 is returned.
Since:
1.4


"
29,StringBuffer,14,StringBuffer substring(int start),False,,NULL
29,StringBuffer,15,"StringBuffer substring(int start, int end)",False,,NULL
29,StringBuffer,16,"StringBuffer replace(int start, int end, String str)",True,Replaces the characters in a substring of this sequence with characters in the specified String.,"

replace
public StringBuffer replace(int start,
                            int end,
                            String str)
Replaces the characters in a substring of this sequence
 with characters in the specified String. The substring
 begins at the specified start and extends to the character
 at index end - 1 or to the end of the
 sequence if no such character exists. First the
 characters in the substring are removed and then the specified
 String is inserted at start. (This
 sequence will be lengthened to accommodate the
 specified String if necessary.)

Parameters:
start - The beginning index, inclusive.
end - The ending index, exclusive.
str - String that will replace previous contents.
Returns:
This object.
Throws:
StringIndexOutOfBoundsException - if start
             is negative, greater than length(), or
             greater than end.
Since:
1.2


"
29,StringBuffer,17,StringBuffer deleteCharAt(int index),True,Removes the char at the specified position in this sequence.,"

deleteCharAt
public StringBuffer deleteCharAt(int index)
Removes the char at the specified position in this
 sequence. This sequence is shortened by one char.

 Note: If the character at the given index is a supplementary
 character, this method does not remove the entire character. If
 correct handling of supplementary characters is required,
 determine the number of chars to remove by calling
 Character.charCount(thisSequence.codePointAt(index)),
 where thisSequence is this sequence.

Parameters:
index - Index of char to remove
Returns:
This object.
Throws:
StringIndexOutOfBoundsException - if the index
              is negative or greater than or equal to
              length().
Since:
1.2


"
29,StringBuffer,18,"StringBuffer setCharAt(int index, char ch)",False,,NULL
29,StringBuffer,19,StringBuffer ensureCapacity(int minimumCapacity),False,,NULL
29,StringBuffer,20,StringBuffer trimToSize(),False,,NULL
30,StringBuilder,1,StringBuilder(),False,,NULL
30,StringBuilder,2,StringBuilder(String str),False,,NULL
30,StringBuilder,3,StringBuilder append(String str),True,Appends the specified string to this character sequence.,"

append
public StringBuilder append(String str)
Appends the specified string to this character sequence.
 
 The characters of the String argument are appended, in
 order, increasing the length of this sequence by the length of the
 argument. If str is null, then the four
 characters ""null"" are appended.
 
 Let n be the length of this character sequence just prior to
 execution of the append method. Then the character at
 index k in the new character sequence is equal to the character
 at index k in the old character sequence, if k is less
 than n; otherwise, it is equal to the character at index
 k-n in the argument str.

Parameters:
str - a string.
Returns:
a reference to this object.


"
30,StringBuilder,4,"StringBuilder insert(int offset, String str)",True,Inserts the string into this character sequence.,"

insert
public StringBuilder insert(int offset,
                            String str)
Inserts the string into this character sequence.
 
 The characters of the String argument are inserted, in
 order, into this sequence at the indicated offset, moving up any
 characters originally above that position and increasing the length
 of this sequence by the length of the argument. If
 str is null, then the four characters
 ""null"" are inserted into this sequence.
 
 The character at index k in the new character sequence is
 equal to:
 
the character at index k in the old character sequence, if
 k is less than offset
the character at index k-offset in the
 argument str, if k is not less than
 offset but is less than offset+str.length()
the character at index k-str.length() in the
 old character sequence, if k is not less than
 offset+str.length()

 The offset argument must be greater than or equal to
 0, and less than or equal to the length
 of this sequence.

Parameters:
offset - the offset.
str - a string.
Returns:
a reference to this object.
Throws:
StringIndexOutOfBoundsException - if the offset is invalid.


"
30,StringBuilder,5,"StringBuilder delete(int start, int end)",True,Removes the characters in a substring of this sequence.,"

delete
public StringBuilder delete(int start,
                            int end)
Removes the characters in a substring of this sequence.
 The substring begins at the specified start and extends to
 the character at index end - 1 or to the end of the
 sequence if no such character exists. If
 start is equal to end, no changes are made.

Parameters:
start - The beginning index, inclusive.
end - The ending index, exclusive.
Returns:
This object.
Throws:
StringIndexOutOfBoundsException - if start
             is negative, greater than length(), or
             greater than end.


"
30,StringBuilder,6,StringBuilder reverse(),True,Causes this character sequence to be replaced by the reverse of the sequence.,"

reverse
public StringBuilder reverse()
Causes this character sequence to be replaced by the reverse of
 the sequence. If there are any surrogate pairs included in the
 sequence, these are treated as single characters for the
 reverse operation. Thus, the order of the high-low surrogates
 is never reversed.

 Let n be the character length of this character sequence
 (not the length in char values) just prior to
 execution of the reverse method. Then the
 character at index k in the new character sequence is
 equal to the character at index n-k-1 in the old
 character sequence.

 Note that the reverse operation may result in producing
 surrogate pairs that were unpaired low-surrogates and
 high-surrogates before the operation. For example, reversing
 ""\uDC00\uD800"" produces ""\uD800\uDC00"" which is
 a valid surrogate pair.

Returns:
a reference to this object.


"
30,StringBuilder,7,String toString(),True,Returns a string representing the data in this sequence.,"

toString
public String toString()
Returns a string representing the data in this sequence.
 A new String object is allocated and initialized to
 contain the character sequence currently represented by this
 object. This String is then returned. Subsequent
 changes to this sequence do not affect the contents of the
 String.

Specified by:
toString in interface CharSequence
Returns:
a string representation of this sequence of characters.


"
30,StringBuilder,8,int length(),True,Returns the length (character count).,"

length
public int length()
Returns the length (character count).

Specified by:
length in interface CharSequence
Returns:
the length of the sequence of characters currently
          represented by this object


"
30,StringBuilder,9,char charAt(int index),True,Returns the char value in this sequence at the specified index.,"

charAt
public char charAt(int index)
Returns the char value in this sequence at the specified index.
 The first char value is at index 0, the next at index
 1, and so on, as in array indexing.
 
 The index argument must be greater than or equal to
 0, and less than the length of this sequence.

 If the char value specified by the index is a
 surrogate, the surrogate
 value is returned.

Specified by:
charAt in interface CharSequence
Parameters:
index - the index of the desired char value.
Returns:
the char value at the specified index.
Throws:
IndexOutOfBoundsException - if index is
             negative or greater than or equal to length().


"
30,StringBuilder,10,"StringBuilder setCharAt(int index, char ch)",False,,NULL
30,StringBuilder,11,StringBuilder deleteCharAt(int index),True,Removes the char at the specified position in this sequence.,"

deleteCharAt
public StringBuilder deleteCharAt(int index)
Removes the char at the specified position in this
 sequence. This sequence is shortened by one char.

 Note: If the character at the given index is a supplementary
 character, this method does not remove the entire character. If
 correct handling of supplementary characters is required,
 determine the number of chars to remove by calling
 Character.charCount(thisSequence.codePointAt(index)),
 where thisSequence is this sequence.

Parameters:
index - Index of char to remove
Returns:
This object.
Throws:
StringIndexOutOfBoundsException - if the index
              is negative or greater than or equal to
              length().


"
30,StringBuilder,12,"StringBuilder replace(int start, int end, String str)",True,Replaces the characters in a substring of this sequence with characters in the specified String.,"

replace
public StringBuilder replace(int start,
                             int end,
                             String str)
Replaces the characters in a substring of this sequence
 with characters in the specified String. The substring
 begins at the specified start and extends to the character
 at index end - 1 or to the end of the
 sequence if no such character exists. First the
 characters in the substring are removed and then the specified
 String is inserted at start. (This
 sequence will be lengthened to accommodate the
 specified String if necessary.)

Parameters:
start - The beginning index, inclusive.
end - The ending index, exclusive.
str - String that will replace previous contents.
Returns:
This object.
Throws:
StringIndexOutOfBoundsException - if start
             is negative, greater than length(), or
             greater than end.


"
30,StringBuilder,13,StringBuilder setLength(int newLength),False,,NULL
30,StringBuilder,14,void ensureCapacity(int minimumCapacity),True,Ensures that the capacity is at least equal to the specified minimum.,"

ensureCapacity
public void ensureCapacity(int minimumCapacity)
Ensures that the capacity is at least equal to the specified minimum.
 If the current capacity is less than the argument, then a new internal
 array is allocated with greater capacity. The new capacity is the
 larger of:
 
The minimumCapacity argument.
 Twice the old capacity, plus 2.
 
 If the minimumCapacity argument is nonpositive, this
 method takes no action and simply returns.
 Note that subsequent operations on this object can reduce the
 actual capacity below that requested here.

Parameters:
minimumCapacity - the minimum desired capacity.


"
30,StringBuilder,15,void trimToSize(),True,Attempts to reduce storage used for the character sequence.,"

trimToSize
public void trimToSize()
Attempts to reduce storage used for the character sequence.
 If the buffer is larger than necessary to hold its current sequence of
 characters, then it may be resized to become more space efficient.
 Calling this method may, but is not required to, affect the value
 returned by a subsequent call to the capacity() method.

"
31,System,1,long currentTimeMillis(),True,Returns the current time in milliseconds.,"

currentTimeMillis
public static long currentTimeMillis()
Returns the current time in milliseconds.  Note that
 while the unit of time of the return value is a millisecond,
 the granularity of the value depends on the underlying
 operating system and may be larger.  For example, many
 operating systems measure time in units of tens of
 milliseconds.

  See the description of the class Date for
 a discussion of slight discrepancies that may arise between
 ""computer time"" and coordinated universal time (UTC).

Returns:
the difference, measured in milliseconds, between
          the current time and midnight, January 1, 1970 UTC.
See Also:
Date


"
31,System,2,"void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)",True,"Copies an array from the specified source array, beginning at the specified position, to the specified position of the destination array.","

arraycopy
public static void arraycopy(Object src,
                             int srcPos,
                             Object dest,
                             int destPos,
                             int length)
Copies an array from the specified source array, beginning at the
 specified position, to the specified position of the destination array.
 A subsequence of array components are copied from the source
 array referenced by src to the destination array
 referenced by dest. The number of components copied is
 equal to the length argument. The components at
 positions srcPos through
 srcPos+length-1 in the source array are copied into
 positions destPos through
 destPos+length-1, respectively, of the destination
 array.
 
 If the src and dest arguments refer to the
 same array object, then the copying is performed as if the
 components at positions srcPos through
 srcPos+length-1 were first copied to a temporary
 array with length components and then the contents of
 the temporary array were copied into positions
 destPos through destPos+length-1 of the
 destination array.
 
 If dest is null, then a
 NullPointerException is thrown.
 
 If src is null, then a
 NullPointerException is thrown and the destination
 array is not modified.
 
 Otherwise, if any of the following is true, an
 ArrayStoreException is thrown and the destination is
 not modified:
 
The src argument refers to an object that is not an
     array.
 The dest argument refers to an object that is not an
     array.
 The src argument and dest argument refer
     to arrays whose component types are different primitive types.
 The src argument refers to an array with a primitive
    component type and the dest argument refers to an array
     with a reference component type.
 The src argument refers to an array with a reference
    component type and the dest argument refers to an array
     with a primitive component type.
 

 Otherwise, if any of the following is true, an
 IndexOutOfBoundsException is
 thrown and the destination is not modified:
 
The srcPos argument is negative.
 The destPos argument is negative.
 The length argument is negative.
 srcPos+length is greater than
     src.length, the length of the source array.
 destPos+length is greater than
     dest.length, the length of the destination array.
 

 Otherwise, if any actual component of the source array from
 position srcPos through
 srcPos+length-1 cannot be converted to the component
 type of the destination array by assignment conversion, an
 ArrayStoreException is thrown. In this case, let
 k be the smallest nonnegative integer less than
 length such that src[srcPos+k]
 cannot be converted to the component type of the destination
 array; when the exception is thrown, source array components from
 positions srcPos through
 srcPos+k-1
 will already have been copied to destination array positions
 destPos through
 destPos+k-1 and no other
 positions of the destination array will have been modified.
 (Because of the restrictions already itemized, this
 paragraph effectively applies only to the situation where both
 arrays have component types that are reference types.)

Parameters:
src - the source array.
srcPos - starting position in the source array.
dest - the destination array.
destPos - starting position in the destination data.
length - the number of array elements to be copied.
Throws:
IndexOutOfBoundsException - if copying would cause
               access of data outside array bounds.
ArrayStoreException - if an element in the src
               array could not be stored into the dest array
               because of a type mismatch.
NullPointerException - if either src or
               dest is null.


"
31,System,3,void gc(),True,Runs the garbage collector.,"

gc
public static void gc()
Runs the garbage collector.
 
 Calling the gc method suggests that the Java Virtual
 Machine expend effort toward recycling unused objects in order to
 make the memory they currently occupy available for quick reuse.
 When control returns from the method call, the Java Virtual
 Machine has made a best effort to reclaim space from all discarded
 objects.
 
 The call System.gc() is effectively equivalent to the
 call:
 
 Runtime.getRuntime().gc()
 

See Also:
Runtime.gc()


"
31,System,4,void exit(int status),True,Terminates the currently running Java Virtual Machine.,"

exit
public static void exit(int status)
Terminates the currently running Java Virtual Machine. The
 argument serves as a status code; by convention, a nonzero status
 code indicates abnormal termination.
 
 This method calls the exit method in class
 Runtime. This method never returns normally.
 
 The call System.exit(n) is effectively equivalent to
 the call:
 
 Runtime.getRuntime().exit(n)
 

Parameters:
status - exit status.
Throws:
SecurityException - if a security manager exists and its checkExit
        method doesn't allow exit with the specified status.
See Also:
Runtime.exit(int)


"
31,System,5,void setOut(PrintStream out),True,"Reassigns the ""standard"" output stream.","

setOut
public static void setOut(PrintStream out)
Reassigns the ""standard"" output stream.

 First, if there is a security manager, its checkPermission
 method is called with a RuntimePermission(""setIO"") permission
  to see if it's ok to reassign the ""standard"" output stream.

Parameters:
out - the new standard output stream
Throws:
SecurityException - if a security manager exists and its
        checkPermission method doesn't allow
        reassigning of the standard output stream.
Since:
JDK1.1
See Also:
SecurityManager.checkPermission(java.security.Permission), 
RuntimePermission


"
32,Thread,1,void start(),True,Causes this thread to begin execution; the Java Virtual Machine calls the run method of this thread.,"

start
public void start()
Causes this thread to begin execution; the Java Virtual Machine
 calls the run method of this thread.
 
 The result is that two threads are running concurrently: the
 current thread (which returns from the call to the
 start method) and the other thread (which executes its
 run method).
 
 It is never legal to start a thread more than once.
 In particular, a thread may not be restarted once it has completed
 execution.

Throws:
IllegalThreadStateException - if the thread was already
               started.
See Also:
run(), 
stop()


"
32,Thread,2,void run(),True,"If this thread was constructed using a separate Runnable run object, then that Runnable object's run method is called; otherwise, this method does nothing and returns.","

run
public void run()
If this thread was constructed using a separate
 Runnable run object, then that
 Runnable object's run method is called;
 otherwise, this method does nothing and returns.
 
 Subclasses of Thread should override this method.

Specified by:
run in interface Runnable
See Also:
start(), 
stop(), 
Thread(ThreadGroup, Runnable, String)


"
32,Thread,3,void join(),True,Waits for this thread to die.,"

join
public final void join()
                throws InterruptedException
Waits for this thread to die.

  An invocation of this method behaves in exactly the same
 way as the invocation

 
join(0)


Throws:
InterruptedException - if any thread has interrupted the current thread. The
          interrupted status of the current thread is
          cleared when this exception is thrown.


"
32,Thread,4,void interrupt(),True,Interrupts this thread.,"

interrupt
public void interrupt()
Interrupts this thread.

  Unless the current thread is interrupting itself, which is
 always permitted, the checkAccess method
 of this thread is invoked, which may cause a SecurityException to be thrown.

  If this thread is blocked in an invocation of the wait(), wait(long), or wait(long, int) methods of the Object
 class, or of the join(), join(long), join(long, int), sleep(long), or sleep(long, int),
 methods of this class, then its interrupt status will be cleared and it
 will receive an InterruptedException.

  If this thread is blocked in an I/O operation upon an InterruptibleChannel
 then the channel will be closed, the thread's interrupt
 status will be set, and the thread will receive a ClosedByInterruptException.

  If this thread is blocked in a Selector
 then the thread's interrupt status will be set and it will return
 immediately from the selection operation, possibly with a non-zero
 value, just as if the selector's wakeup method were invoked.

  If none of the previous conditions hold then this thread's interrupt
 status will be set. 
 Interrupting a thread that is not alive need not have any effect.

Throws:
SecurityException - if the current thread cannot modify this thread


"
32,Thread,5,void sleep(long millis),True,"Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds, subject to the precision and accuracy of system timers and schedulers.","

sleep
public static void sleep(long millis)
                  throws InterruptedException
Causes the currently executing thread to sleep (temporarily cease
 execution) for the specified number of milliseconds, subject to
 the precision and accuracy of system timers and schedulers. The thread
 does not lose ownership of any monitors.

Parameters:
millis - the length of time to sleep in milliseconds
Throws:
IllegalArgumentException - if the value of millis is negative
InterruptedException - if any thread has interrupted the current thread. The
          interrupted status of the current thread is
          cleared when this exception is thrown.


"
33,ThreadGroup,1,ThreadGroup(String name),False,,NULL
33,ThreadGroup,2,"ThreadGroup(ThreadGroup parent, String name)",False,,NULL
33,ThreadGroup,3,"void uncaughtException(Thread t, Throwable e)",True,"Called by the Java Virtual Machine when a thread in this thread group stops because of an uncaught exception, and the thread does not have a specific Thread.UncaughtExceptionHandler installed.","

uncaughtException
public void uncaughtException(Thread t,
                              Throwable e)
Called by the Java Virtual Machine when a thread in this
 thread group stops because of an uncaught exception, and the thread
 does not have a specific Thread.UncaughtExceptionHandler
 installed.
 
 The uncaughtException method of
 ThreadGroup does the following:
 
If this thread group has a parent thread group, the
     uncaughtException method of that parent is called
     with the same two arguments.
 Otherwise, this method checks to see if there is a
     default
     uncaught exception handler installed, and if so, its
     uncaughtException method is called with the same
     two arguments.
 Otherwise, this method determines if the Throwable
     argument is an instance of ThreadDeath. If so, nothing
     special is done. Otherwise, a message containing the
     thread's name, as returned from the thread's getName method, and a stack backtrace,
     using the Throwable's printStackTrace method, is
     printed to the standard error stream.
 

 Applications can override this method in subclasses of
 ThreadGroup to provide alternative handling of
 uncaught exceptions.

Specified by:
uncaughtException in interface Thread.UncaughtExceptionHandler
Parameters:
t - the thread that is about to exit.
e - the uncaught exception.
Since:
JDK1.0


"
33,ThreadGroup,4,void interrupt(),True,Interrupts all threads in this thread group.,"

interrupt
public final void interrupt()
Interrupts all threads in this thread group.
 
 First, the checkAccess method of this thread group is
 called with no arguments; this may result in a security exception.
 
 This method then calls the interrupt method on all the
 threads in this thread group and in all of its subgroups.

Throws:
SecurityException - if the current thread is not allowed
               to access this thread group or any of the threads in
               the thread group.
Since:
1.2
See Also:
Thread.interrupt(), 
SecurityException, 
checkAccess()


"
33,ThreadGroup,5,void destroy(),True,Destroys this thread group and all of its subgroups.,"

destroy
public final void destroy()
Destroys this thread group and all of its subgroups. This thread
 group must be empty, indicating that all threads that had been in
 this thread group have since stopped.
 
 First, the checkAccess method of this thread group is
 called with no arguments; this may result in a security exception.

Throws:
IllegalThreadStateException - if the thread group is not
               empty or if the thread group has already been destroyed.
SecurityException - if the current thread cannot modify this
               thread group.
Since:
JDK1.0
See Also:
checkAccess()


"
34,ThreadLocal,1,void set(T value),True,Sets the current thread's copy of this thread-local variable to the specified value.,"

set
public void set(T value)
Sets the current thread's copy of this thread-local variable
 to the specified value.  Most subclasses will have no need to
 override this method, relying solely on the initialValue()
 method to set the values of thread-locals.

Parameters:
value - the value to be stored in the current thread's copy of
        this thread-local.


"
34,ThreadLocal,2,T get(),True,Returns the value in the current thread's copy of this thread-local variable.,"

get
public T get()
Returns the value in the current thread's copy of this
 thread-local variable.  If the variable has no value for the
 current thread, it is first initialized to the value returned
 by an invocation of the initialValue() method.

Returns:
the current thread's value of this thread-local


"
34,ThreadLocal,3,void remove(),True,Removes the current thread's value for this thread-local variable.,"

remove
public void remove()
Removes the current thread's value for this thread-local
 variable.  If this thread-local variable is subsequently
 read by the current thread, its value will be
 reinitialized by invoking its initialValue() method,
 unless its value is set by the current thread
 in the interim.  This may result in multiple invocations of the
 initialValue method in the current thread.

Since:
1.5


"
34,ThreadLocal,4,protected T initialValue(),False,,NULL
34,ThreadLocal,5,ThreadLocal<T> withInitial(Supplier<? extends T> supplier),False,,NULL
35,Throwable,1,String getMessage(),True,Returns the detail message string of this throwable.,"

getMessage
public String getMessage()
Returns the detail message string of this throwable.

Returns:
the detail message string of this Throwable instance
          (which may be null).


"
35,Throwable,2,String toString(),True,Returns a short description of this throwable.,"

toString
public String toString()
Returns a short description of this throwable.
 The result is the concatenation of:
 
 the name of the class of this object
  "": "" (a colon and a space)
  the result of invoking this object's getLocalizedMessage()
      method
 
 If getLocalizedMessage returns null, then just
 the class name is returned.

Overrides:
toString in class Object
Returns:
a string representation of this throwable.


"
35,Throwable,3,void printStackTrace(),True,Prints this throwable and its backtrace to the standard error stream.,"

printStackTrace
public void printStackTrace()
Prints this throwable and its backtrace to the
 standard error stream. This method prints a stack trace for this
 Throwable object on the error output stream that is
 the value of the field System.err. The first line of
 output contains the result of the toString() method for
 this object.  Remaining lines represent data previously recorded by
 the method fillInStackTrace(). The format of this
 information depends on the implementation, but the following
 example may be regarded as typical:
 
 java.lang.NullPointerException
         at MyClass.mash(MyClass.java:9)
         at MyClass.crunch(MyClass.java:6)
         at MyClass.main(MyClass.java:3)
 
 This example was produced by running the program:
 
 class MyClass {
     public static void main(String[] args) {
         crunch(null);
     }
     static void crunch(int[] a) {
         mash(a);
     }
     static void mash(int[] b) {
         System.out.println(b[0]);
     }
 }
 
 The backtrace for a throwable with an initialized, non-null cause
 should generally include the backtrace for the cause.  The format
 of this information depends on the implementation, but the following
 example may be regarded as typical:
 
 HighLevelException: MidLevelException: LowLevelException
         at Junk.a(Junk.java:13)
         at Junk.main(Junk.java:4)
 Caused by: MidLevelException: LowLevelException
         at Junk.c(Junk.java:23)
         at Junk.b(Junk.java:17)
         at Junk.a(Junk.java:11)
         ... 1 more
 Caused by: LowLevelException
         at Junk.e(Junk.java:30)
         at Junk.d(Junk.java:27)
         at Junk.c(Junk.java:21)
         ... 3 more
 
 Note the presence of lines containing the characters ""..."".
 These lines indicate that the remainder of the stack trace for this
 exception matches the indicated number of frames from the bottom of the
 stack trace of the exception that was caused by this exception (the
 ""enclosing"" exception).  This shorthand can greatly reduce the length
 of the output in the common case where a wrapped exception is thrown
 from same method as the ""causative exception"" is caught.  The above
 example was produced by running the program:
 
 public class Junk {
     public static void main(String args[]) {
         try {
             a();
         } catch(HighLevelException e) {
             e.printStackTrace();
         }
     }
     static void a() throws HighLevelException {
         try {
             b();
         } catch(MidLevelException e) {
             throw new HighLevelException(e);
         }
     }
     static void b() throws MidLevelException {
         c();
     }
     static void c() throws MidLevelException {
         try {
             d();
         } catch(LowLevelException e) {
             throw new MidLevelException(e);
         }
     }
     static void d() throws LowLevelException {
        e();
     }
     static void e() throws LowLevelException {
         throw new LowLevelException();
     }
 }

 class HighLevelException extends Exception {
     HighLevelException(Throwable cause) { super(cause); }
 }

 class MidLevelException extends Exception {
     MidLevelException(Throwable cause)  { super(cause); }
 }

 class LowLevelException extends Exception {
 }
 
 As of release 7, the platform supports the notion of
 suppressed exceptions (in conjunction with the try-with-resources statement). Any exceptions that were
 suppressed in order to deliver an exception are printed out
 beneath the stack trace.  The format of this information
 depends on the implementation, but the following example may be
 regarded as typical:

 
 Exception in thread ""main"" java.lang.Exception: Something happened
  at Foo.bar(Foo.java:10)
  at Foo.main(Foo.java:5)
  Suppressed: Resource$CloseFailException: Resource ID = 0
          at Resource.close(Resource.java:26)
          at Foo.bar(Foo.java:9)
          ... 1 more
 
 Note that the ""... n more"" notation is used on suppressed exceptions
 just at it is used on causes. Unlike causes, suppressed exceptions are
 indented beyond their ""containing exceptions.""

 An exception can have both a cause and one or more suppressed
 exceptions:
 
 Exception in thread ""main"" java.lang.Exception: Main block
  at Foo3.main(Foo3.java:7)
  Suppressed: Resource$CloseFailException: Resource ID = 2
          at Resource.close(Resource.java:26)
          at Foo3.main(Foo3.java:5)
  Suppressed: Resource$CloseFailException: Resource ID = 1
          at Resource.close(Resource.java:26)
          at Foo3.main(Foo3.java:5)
 Caused by: java.lang.Exception: I did it
  at Foo3.main(Foo3.java:8)
 
 Likewise, a suppressed exception can have a cause:
 
 Exception in thread ""main"" java.lang.Exception: Main block
  at Foo4.main(Foo4.java:6)
  Suppressed: Resource2$CloseFailException: Resource ID = 1
          at Resource2.close(Resource2.java:20)
          at Foo4.main(Foo4.java:5)
  Caused by: java.lang.Exception: Rats, you caught me
          at Resource2$CloseFailException.<init>(Resource2.java:45)
          ... 2 more
 

"
35,Throwable,4,void printStackTrace(PrintStream s),True,Prints this throwable and its backtrace to the specified print stream.,"

printStackTrace
public void printStackTrace(PrintStream s)
Prints this throwable and its backtrace to the specified print stream.

Parameters:
s - PrintStream to use for output


"
35,Throwable,5,void printStackTrace(PrintWriter s),True,Prints this throwable and its backtrace to the specified print writer.,"

printStackTrace
public void printStackTrace(PrintWriter s)
Prints this throwable and its backtrace to the specified
 print writer.

Parameters:
s - PrintWriter to use for output
Since:
JDK1.1


"
36,Void,1,Void.TYPE,False,,NULL
36,Void,2,Void.class,False,,NULL
36,Void,3,Void.valueOf(Void),False,,NULL
36,Void,4,Void.valueOf(void),False,,NULL
36,Void,5,Void.valueOf(Void),False,,NULL
36,Void,6,Void.valueOf(void),False,,NULL
