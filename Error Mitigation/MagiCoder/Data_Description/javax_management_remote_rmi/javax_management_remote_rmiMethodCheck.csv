Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,RMIConnectionImpl,1,"RMIConnectionImpl(String host, String serviceName)",False,,NULL
0,RMIConnectionImpl,2,void connect(),False,,NULL
0,RMIConnectionImpl,3,void disconnect(),False,,NULL
0,RMIConnectionImpl,4,ObjectName getMBeanServer(),False,,NULL
0,RMIConnectionImpl,5,ObjectName getMBean(ObjectName name),False,,NULL
0,RMIConnectionImpl,6,"ObjectName[] queryNames(ObjectName name, String query)",False,,NULL
0,RMIConnectionImpl,7,"Object invoke(ObjectName name, String operation, Object[] params, String[] signature)",False,,NULL
0,RMIConnectionImpl,8,"void setAttribute(ObjectName name, String attribute, Object value)",False,,NULL
0,RMIConnectionImpl,9,"Object getAttribute(ObjectName name, String attribute)",False,,NULL
0,RMIConnectionImpl,10,"void setMBean(ObjectName name, Object mbean)",False,,NULL
0,RMIConnectionImpl,11,"ObjectName registerMBean(Object mbean, ObjectName name)",False,,NULL
0,RMIConnectionImpl,12,void unregisterMBean(ObjectName name),False,,NULL
0,RMIConnectionImpl,13,void refreshMBean(ObjectName name),False,,NULL
0,RMIConnectionImpl,14,"void addNotificationListener(ObjectName name, NotificationListener listener, String[] types, Object handback)",False,,NULL
0,RMIConnectionImpl,15,"void removeNotificationListener(ObjectName name, NotificationListener listener)",False,,NULL
1,RMIConnectionImpl_Stub,1,boolean add(E e),False,,NULL
1,RMIConnectionImpl_Stub,2,boolean addAll(Collection<? extends E> c),False,,NULL
1,RMIConnectionImpl_Stub,3,void clear(),False,,NULL
1,RMIConnectionImpl_Stub,4,boolean contains(Object o),False,,NULL
1,RMIConnectionImpl_Stub,5,boolean containsAll(Collection<?> c),False,,NULL
1,RMIConnectionImpl_Stub,6,boolean equals(Object o),False,,NULL
1,RMIConnectionImpl_Stub,7,E get(int index),False,,NULL
1,RMIConnectionImpl_Stub,8,int indexOf(Object o),False,,NULL
1,RMIConnectionImpl_Stub,9,boolean isEmpty(),False,,NULL
1,RMIConnectionImpl_Stub,10,Iterator<E> iterator(),False,,NULL
1,RMIConnectionImpl_Stub,11,int lastIndexOf(Object o),False,,NULL
1,RMIConnectionImpl_Stub,12,ListIterator<E> listIterator(),False,,NULL
1,RMIConnectionImpl_Stub,13,ListIterator<E> listIterator(int index),False,,NULL
1,RMIConnectionImpl_Stub,14,boolean remove(Object o),False,,NULL
1,RMIConnectionImpl_Stub,15,E remove(int index),False,,NULL
1,RMIConnectionImpl_Stub,16,boolean removeAll(Collection<?> c),False,,NULL
1,RMIConnectionImpl_Stub,17,boolean retainAll(Collection<?> c),False,,NULL
1,RMIConnectionImpl_Stub,18,"E set(int index, E element)",False,,NULL
1,RMIConnectionImpl_Stub,19,int size(),False,,NULL
1,RMIConnectionImpl_Stub,20,"List<E> subList(int fromIndex, int toIndex)",False,,NULL
1,RMIConnectionImpl_Stub,21,Object[] toArray(),False,,NULL
1,RMIConnectionImpl_Stub,22,<T> T[] toArray(T[] a),False,,NULL
1,RMIConnectionImpl_Stub,23,String toString(),False,,NULL
1,RMIConnectionImpl_Stub,24,"List<E> subList(int fromIndex, int toIndex)",False,,NULL
1,RMIConnectionImpl_Stub,25,"List<E> subList(int fromIndex, int toIndex)",False,,NULL
2,RMIConnector,1,"RMIConnectorServer createRMIConnectorServer(String name, String host, int port)",False,,NULL
2,RMIConnector,2,"MBeanServerConnection getMBeanServerConnection(String host, int port)",False,,NULL
2,RMIConnector,3,"MBeanServerConnection getMBeanServerConnection(String host, int port, String user, String password)",False,,NULL
2,RMIConnector,4,"MBeanServerConnection getMBeanServerConnection(String host, int port, String user, String password, String domain)",False,,NULL
2,RMIConnector,5,"MBeanServerConnection getMBeanServerConnection(String host, int port, String user, String password, String domain, String[] groups)",False,,NULL
3,RMIConnectorServer,1,"RMIConnectorServer(String name, MBeanServer mbs)",False,,NULL
3,RMIConnectorServer,2,void start(),True,"Activates the connector server, that is starts listening for client connections.","

start
public void start()
           throws IOException
Activates the connector server, that is starts listening for
 client connections.  Calling this method when the connector
 server is already active has no effect.  Calling this method
 when the connector server has been stopped will generate an
 IOException.
The behavior of this method when called for the first time
 depends on the parameters that were supplied at construction,
 as described below.
First, an object of a subclass of RMIServerImpl is
 required, to export the connector server through RMI:

If an RMIServerImpl was supplied to the
 constructor, it is used.

 Otherwise, if the protocol part of the
 JMXServiceURL supplied to the constructor was
 iiop, an object of type RMIIIOPServerImpl
 is created.

 Otherwise, if the JMXServiceURL
 was null, or its protocol part was rmi, an object
 of type RMIJRMPServerImpl is created.

 Otherwise, the implementation can create an
 implementation-specific RMIServerImpl or it can throw
 MalformedURLException.

 
If the given address includes a JNDI directory URL as
 specified in the package documentation for javax.management.remote.rmi, then this
 RMIConnectorServer will bootstrap by binding the
 RMIServerImpl to the given address.
If the URL path part of the JMXServiceURL was
 empty or a single slash (/), then the RMI object
 will not be bound to a directory.  Instead, a reference to it
 will be encoded in the URL path of the RMIConnectorServer
 address (returned by getAddress()).  The encodings for
 rmi and iiop are described in the
 package documentation for javax.management.remote.rmi.
The behavior when the URL path is neither empty nor a JNDI
 directory URL, or when the protocol is neither rmi
 nor iiop, is implementation defined, and may
 include throwing MalformedURLException when the
 connector server is created or when it is started.

Throws:
IllegalStateException - if the connector server has
 not been attached to an MBean server.
IOException - if the connector server cannot be
 started, or in the case of the iiop protocol, that
 RMI/IIOP is not supported.


"
3,RMIConnectorServer,3,void stop(),True,"Deactivates the connector server, that is, stops listening for client connections.","

stop
public void stop()
          throws IOException
Deactivates the connector server, that is, stops listening for
 client connections.  Calling this method will also close all
 client connections that were made by this server.  After this
 method returns, whether normally or with an exception, the
 connector server will not create any new client
 connections.
Once a connector server has been stopped, it cannot be started
 again.
Calling this method when the connector server has already
 been stopped has no effect.  Calling this method when the
 connector server has not yet been started will disable the
 connector server object permanently.
If closing a client connection produces an exception, that
 exception is not thrown from this method.  A JMXConnectionNotification is emitted from this MBean with the
 connection ID of the connection that could not be closed.
Closing a connector server is a potentially slow operation.
 For example, if a client machine with an open connection has
 crashed, the close operation might have to wait for a network
 protocol timeout.  Callers that do not want to block in a close
 operation should do it in a separate thread.
This method calls the method close on the connector server's RMIServerImpl
 object.
If the RMIServerImpl was bound to a JNDI
 directory by the start method, it is unbound
 from the directory by this method.

Throws:
IOException - if the server cannot be closed cleanly,
 or if the RMIServerImpl cannot be unbound from the
 directory.  When this exception is thrown, the server has
 already attempted to close all client connections, if
 appropriate; to call RMIServerImpl.close(); and to
 unbind the RMIServerImpl from its directory, if
 appropriate.  All client connections are closed except possibly
 those that generated exceptions when the server attempted to
 close them.


"
3,RMIConnectorServer,4,void setSecurityManager(SecurityManager sm),False,,NULL
3,RMIConnectorServer,5,void setRMIServerSocketFactory(RMIServerSocketFactory ssf),False,,NULL
3,RMIConnectorServer,6,void setRMIClientSocketFactory(RMIClientSocketFactory csf),False,,NULL
3,RMIConnectorServer,7,void setPort(int port),False,,NULL
3,RMIConnectorServer,8,void setAddress(String address),False,,NULL
3,RMIConnectorServer,9,void setRegistryPort(int port),False,,NULL
3,RMIConnectorServer,10,void setRegistryAddress(String address),False,,NULL
3,RMIConnectorServer,11,void setRegistry(Registry registry),False,,NULL
3,RMIConnectorServer,12,void setConnectionTimeout(int timeout),False,,NULL
3,RMIConnectorServer,13,void setConnectionRetryLimit(int limit),False,,NULL
3,RMIConnectorServer,14,void setConnectionRetryInterval(int interval),False,,NULL
3,RMIConnectorServer,15,void setConnectionNotificationThreshold(int threshold),False,,NULL
3,RMIConnectorServer,16,void setConnectionNotificationFilter(ConnectionNotificationFilter filter),False,,NULL
3,RMIConnectorServer,17,void setConnectionNotificationHandler(ConnectionNotificationHandler handler),False,,NULL
3,RMIConnectorServer,18,void setConnectionNotificationConfig(ConnectionNotificationConfig config),False,,NULL
3,RMIConnectorServer,19,void setConnectionNotification(boolean enable),False,,NULL
3,RMIConnectorServer,20,"void setConnectionNotification(boolean enable, ConnectionNotificationFilter filter, ConnectionNotificationHandler handler)",False,,NULL
4,RMIIIOPServerImpl,1,"RMIServerImpl(String host, int port)",False,,NULL
4,RMIIIOPServerImpl,2,void start(),False,,NULL
4,RMIIIOPServerImpl,3,void stop(),False,,NULL
4,RMIIIOPServerImpl,4,void setSecurityManager(SecurityManager sm),False,,NULL
4,RMIIIOPServerImpl,5,void setRMIServerSocketFactory(RMIServerSocketFactory ssf),False,,NULL
4,RMIIIOPServerImpl,6,void setRMIClientSocketFactory(RMIClientSocketFactory csf),False,,NULL
4,RMIIIOPServerImpl,7,void setRMIConnectionTimeout(int timeout),False,,NULL
4,RMIIIOPServerImpl,8,void setRMIServerExportSocket(ServerSocket ss),False,,NULL
4,RMIIIOPServerImpl,9,void setRMIServerSocket(ServerSocket ss),False,,NULL
4,RMIIIOPServerImpl,10,void setRMIServerSocketFactory(RMIServerSocketFactory ssf),False,,NULL
4,RMIIIOPServerImpl,11,void setRMIServerSocketFactory(RMIServerSocketFactory ssf),False,,NULL
4,RMIIIOPServerImpl,12,void setRMIServerSocketFactory(RMIServerSocketFactory ssf),False,,NULL
4,RMIIIOPServerImpl,13,void setRMIServerSocketFactory(RMIServerSocketFactory ssf),False,,NULL
4,RMIIIOPServerImpl,14,void setRMIServerSocketFactory(RMIServerSocketFactory ssf),False,,NULL
4,RMIIIOPServerImpl,15,void setRMIServerSocketFactory(RMIServerSocketFactory ssf),False,,NULL
5,RMIJRMPServerImpl,1,"RMIJRMPServerImpl(String host, int port)",False,,NULL
5,RMIJRMPServerImpl,2,void start(),False,,NULL
5,RMIJRMPServerImpl,3,void stop(),False,,NULL
5,RMIJRMPServerImpl,4,void setSecurityManager(SecurityManager sm),False,,NULL
5,RMIJRMPServerImpl,5,void setRMIServerSocketFactory(RMIServerSocketFactory ssf),False,,NULL
5,RMIJRMPServerImpl,6,void setRMIClientSocketFactory(RMIClientSocketFactory csf),False,,NULL
5,RMIJRMPServerImpl,7,void setRMIConnectionTimeout(int timeout),False,,NULL
5,RMIJRMPServerImpl,8,void setRMIServerExportSocket(ServerSocket ss),False,,NULL
5,RMIJRMPServerImpl,9,void setRMIServerSocket(ServerSocket ss),False,,NULL
5,RMIJRMPServerImpl,10,void setRMIServerSocketFactory(RMIServerSocketFactory ssf),False,,NULL
5,RMIJRMPServerImpl,11,void setRMIClientSocketFactory(RMIClientSocketFactory csf),False,,NULL
5,RMIJRMPServerImpl,12,void setRMIConnectionTimeout(int timeout),False,,NULL
5,RMIJRMPServerImpl,13,void setRMIServerExportSocket(ServerSocket ss),False,,NULL
5,RMIJRMPServerImpl,14,void setRMIServerSocket(ServerSocket ss),False,,NULL
5,RMIJRMPServerImpl,15,void setRMIServerSocketFactory(RMIServerSocketFactory ssf),False,,NULL
5,RMIJRMPServerImpl,16,void setRMIClientSocketFactory(RMIClientSocketFactory csf),False,,NULL
5,RMIJRMPServerImpl,17,void setRMIConnectionTimeout(int timeout),False,,NULL
5,RMIJRMPServerImpl,18,void setRMIServerExportSocket(ServerSocket ss),False,,NULL
5,RMIJRMPServerImpl,19,void setRMIServerSocket(ServerSocket ss),False,,NULL
5,RMIJRMPServerImpl,20,void setRMIServerSocketFactory(RMIServerSocketFactory ssf),False,,NULL
5,RMIJRMPServerImpl,21,void setRMIClientSocketFactory(RMIClientSocketFactory csf),False,,NULL
5,RMIJRMPServerImpl,22,void setRMIConnectionTimeout(int timeout),False,,NULL
5,RMIJRMPServerImpl,23,void setRMIServerExportSocket(ServerSocket ss),False,,NULL
5,RMIJRMPServerImpl,24,void setRMIServerSocket(ServerSocket ss),False,,NULL
5,RMIJRMPServerImpl,25,void setRMIServerSocketFactory(RMIServerSocketFactory ssf),False,,NULL
5,RMIJRMPServerImpl,26,void setRMIClientSocketFactory(RMIClientSocketFactory csf),False,,NULL
5,RMIJRMPServerImpl,27,void setRMIConnectionTimeout(int timeout),False,,NULL
5,RMIJRMPServerImpl,28,void setRMIServerExportSocket(ServerSocket ss),False,,NULL
5,RMIJRMPServerImpl,29,void setRMIServerSocket(ServerSocket ss),False,,NULL
5,RMIJRMPServerImpl,30,void setRMIServerSocketFactory(RMIServerSocketFactory ssf),False,,NULL
5,RMIJRMPServerImpl,31,void setRMIClientSocketFactory(RMIClientSocketFactory csf),False,,NULL
5,RMIJRMPServerImpl,32,void setRMIConnectionTimeout(int timeout),False,,NULL
5,RMIJRMPServerImpl,33,void setRMIServerExportSocket(ServerSocket ss),False,,NULL
5,RMIJRMPServerImpl,34,void setRMIServerSocket(ServerSocket ss),False,,NULL
5,RMIJRMPServerImpl,35,void setRMIServerSocketFactory(RMIServerSocketFactory ssf),False,,NULL
5,RMIJRMPServerImpl,36,void setRMIClientSocketFactory(RMIClientSocketFactory csf),False,,NULL
5,RMIJRMPServerImpl,37,void setRMIConnectionTimeout(int timeout),False,,NULL
5,RMIJRMPServerImpl,38,void setRMIServerExportSocket(ServerSocket ss),False,,NULL
5,RMIJRMPServerImpl,39,void setRMIServerSocket(ServerSocket ss),False,,NULL
5,RMIJRMPServerImpl,40,void setRMIServerSocketFactory(RMIServerSocketFactory ssf),False,,NULL
5,RMIJRMPServerImpl,41,void setRMIClientSocketFactory(RMIClientSocketFactory csf),False,,NULL
5,RMIJRMPServerImpl,42,void setRMIConnectionTimeout(int timeout),False,,NULL
5,RMIJRMPServerImpl,43,void setRMIServerExportSocket(ServerSocket ss),False,,NULL
5,RMIJRMPServerImpl,44,void setRMIServerSocket(ServerSocket ss),False,,NULL
5,RMIJRMPServerImpl,45,void setRMIServerSocketFactory(RMIServerSocketFactory ssf),False,,NULL
5,RMIJRMPServerImpl,46,void setRMIClientSocketFactory(RMIClientSocketFactory csf),False,,NULL
5,RMIJRMPServerImpl,47,void setRMIConnectionTimeout(int timeout),False,,NULL
5,RMIJRMPServerImpl,48,void setRMIServerExportSocket(ServerSocket ss),False,,NULL
5,RMIJRMPServerImpl,49,void setRMIServerSocket(ServerSocket ss),False,,NULL
5,RMIJRMPServerImpl,50,void setRMIServerSocketFactory(RMIServerSocketFactory ssf),False,,NULL
5,RMIJRMPServerImpl,51,void setRMIClientSocketFactory(RMIClientSocketFactory csf),False,,NULL
5,RMIJRMPServerImpl,52,void setRMIConnectionTimeout(int timeout),False,,NULL
6,RMIServerImpl,1,RMIServerImpl(),False,,NULL
6,RMIServerImpl,2,void start(),False,,NULL
6,RMIServerImpl,3,void stop(),False,,NULL
6,RMIServerImpl,4,void join(),False,,NULL
6,RMIServerImpl,5,void setSecurityManager(SecurityManager s),False,,NULL
6,RMIServerImpl,6,void setLogStream(PrintStream out),False,,NULL
6,RMIServerImpl,7,void setLogLevel(int level),False,,NULL
6,RMIServerImpl,8,void setLogAudit(boolean audit),False,,NULL
6,RMIServerImpl,9,void setLogPermissions(boolean permissions),False,,NULL
6,RMIServerImpl,10,void setLogConnection(boolean connection),False,,NULL
6,RMIServerImpl,11,void setLogFailure(boolean failure),False,,NULL
6,RMIServerImpl,12,void setLogSuccess(boolean success),False,,NULL
6,RMIServerImpl,13,void setLogAdministrative(boolean administrative),False,,NULL
6,RMIServerImpl,14,void setLogOperations(boolean operations),False,,NULL
6,RMIServerImpl,15,void setLogHeartbeat(boolean heartbeat),False,,NULL
6,RMIServerImpl,16,void setLogException(boolean exception),False,,NULL
6,RMIServerImpl,17,void setLog(boolean log),False,,NULL
6,RMIServerImpl,18,"void setLog(int level, boolean log)",False,,NULL
6,RMIServerImpl,19,"void setLog(int level, boolean log, boolean audit, boolean permissions, boolean connection, boolean failure, boolean success, boolean administrative, boolean operations, boolean heartbeat, boolean exception)",False,,NULL
6,RMIServerImpl,20,"void setLog(int level, boolean log, boolean audit, boolean permissions, boolean connection, boolean failure, boolean success, boolean administrative, boolean operations, boolean heartbeat, boolean exception, boolean exceptionDetail)",False,,NULL
7,RMIServerImpl_Stub,1,boolean add(E e),False,,NULL
7,RMIServerImpl_Stub,2,boolean addAll(Collection<? extends E> c),False,,NULL
7,RMIServerImpl_Stub,3,void clear(),False,,NULL
7,RMIServerImpl_Stub,4,boolean contains(Object o),False,,NULL
7,RMIServerImpl_Stub,5,boolean containsAll(Collection<?> c),False,,NULL
7,RMIServerImpl_Stub,6,boolean equals(Object o),False,,NULL
7,RMIServerImpl_Stub,7,E get(int index),False,,NULL
7,RMIServerImpl_Stub,8,int indexOf(Object o),False,,NULL
7,RMIServerImpl_Stub,9,boolean isEmpty(),False,,NULL
7,RMIServerImpl_Stub,10,Iterator<E> iterator(),False,,NULL
7,RMIServerImpl_Stub,11,int lastIndexOf(Object o),False,,NULL
7,RMIServerImpl_Stub,12,ListIterator<E> listIterator(),False,,NULL
7,RMIServerImpl_Stub,13,ListIterator<E> listIterator(int index),False,,NULL
7,RMIServerImpl_Stub,14,boolean remove(Object o),False,,NULL
7,RMIServerImpl_Stub,15,E remove(int index),False,,NULL
7,RMIServerImpl_Stub,16,boolean removeAll(Collection<?> c),False,,NULL
7,RMIServerImpl_Stub,17,boolean retainAll(Collection<?> c),False,,NULL
7,RMIServerImpl_Stub,18,"E set(int index, E element)",False,,NULL
7,RMIServerImpl_Stub,19,int size(),False,,NULL
7,RMIServerImpl_Stub,20,"List<E> subList(int fromIndex, int toIndex)",False,,NULL
7,RMIServerImpl_Stub,21,Object[] toArray(),False,,NULL
7,RMIServerImpl_Stub,22,<T> T[] toArray(T[] a),False,,NULL
7,RMIServerImpl_Stub,23,String toString(),False,,NULL
7,RMIServerImpl_Stub,24,"List<E> subList(int fromIndex, int toIndex)",False,,NULL
7,RMIServerImpl_Stub,25,"List<E> subList(int fromIndex, int toIndex)",False,,NULL
