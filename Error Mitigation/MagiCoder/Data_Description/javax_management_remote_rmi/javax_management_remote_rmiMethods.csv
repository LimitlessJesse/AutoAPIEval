ClassName,Method,Return Type,Description,Full Description
RMIConnectionImpl,"addNotificationListener(ObjectName name, ObjectName listener, MarshalledObject filter, MarshalledObject handback, Subject delegationSubject)",void,"Handles the method MBeanServerConnection.addNotificationListener(ObjectName, ObjectName, NotificationFilter, Object).","

addNotificationListener
public void addNotificationListener(ObjectName name,
                                    ObjectName listener,
                                    MarshalledObject filter,
                                    MarshalledObject handback,
                                    Subject delegationSubject)
                             throws InstanceNotFoundException,
                                    IOException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.addNotificationListener(ObjectName,
 ObjectName, NotificationFilter, Object).  The
 NotificationFilter parameter is wrapped in a
 MarshalledObject.  The Object
 (handback) parameter is also wrapped in a
 MarshalledObject.

Specified by:
addNotificationListener in interface RMIConnection
Parameters:
name - The name of the MBean on which the listener should
 be added.
listener - The object name of the listener which will
 handle the notifications emitted by the registered MBean.
filter - The filter object, encapsulated into a
 MarshalledObject. If filter encapsulated in the
 MarshalledObject has a null value, no filtering
 will be performed before handling notifications.
handback - The context to be sent to the listener when a
 notification is emitted, encapsulated into a
 MarshalledObject.
delegationSubject - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Throws:
InstanceNotFoundException - The MBean name of the
 notification listener or of the notification broadcaster does
 not match any of the registered MBeans.
IOException - if a general communication exception occurred.
See Also:
RMIConnection.removeNotificationListener(ObjectName, ObjectName, Subject), 
RMIConnection.removeNotificationListener(ObjectName, ObjectName,
 MarshalledObject, MarshalledObject, Subject)


"
RMIConnectionImpl,"addNotificationListeners(ObjectName[] names, MarshalledObject[] filters, Subject[] delegationSubjects)",Integer[],"Handles the method MBeanServerConnection.addNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object).","

addNotificationListeners
public Integer[] addNotificationListeners(ObjectName[] names,
                                          MarshalledObject[] filters,
                                          Subject[] delegationSubjects)
                                   throws InstanceNotFoundException,
                                          IOException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.addNotificationListener(ObjectName,
 NotificationListener, NotificationFilter, Object).
Register for notifications from the given MBeans that match
 the given filters.  The remote client can subsequently retrieve
 the notifications using the fetchNotifications method.
For each listener, the original
 NotificationListener and handback are
 kept on the client side; in order for the client to be able to
 identify them, the server generates and returns a unique
 listenerID.  This listenerID is
 forwarded with the Notifications to the remote
 client.
If any one of the given (name, filter) pairs cannot be
 registered, then the operation fails with an exception, and no
 names or filters are registered.

Specified by:
addNotificationListeners in interface RMIConnection
Parameters:
names - the ObjectNames identifying the
 MBeans emitting the Notifications.
filters - an array of marshalled representations of the
 NotificationFilters.  Elements of this array can
 be null.
delegationSubjects - the Subjects on behalf
 of which the listeners are being added.  Elements of this array
 can be null.  Also, the delegationSubjects
 parameter itself can be null, which is equivalent to an array
 of null values with the same size as the names and
 filters arrays.
Returns:
an array of listenerIDs identifying the
 local listeners.  This array has the same number of elements as
 the parameters.
Throws:
InstanceNotFoundException - if one of the
 names does not correspond to any registered MBean.
IOException - if a general communication exception occurred.


"
RMIConnectionImpl,close(),void,Closes this connection.,"

close
public void close()
           throws IOException
Description copied from interface: RMIConnection
Closes this connection.  On return from this method, the RMI
 object implementing this interface is unexported, so further
 remote calls to it will fail.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in interface RMIConnection
Throws:
IOException - if the connection could not be closed,
 or the Remote object could not be unexported, or there was a
 communication failure when transmitting the remote close
 request.


"
RMIConnectionImpl,"createMBean(String className, ObjectName name, MarshalledObject params, String[] signature, Subject delegationSubject)",ObjectInstance,"Handles the method MBeanServerConnection.createMBean(String, ObjectName, Object[], String[]).","

createMBean
public ObjectInstance createMBean(String className,
                                  ObjectName name,
                                  MarshalledObject params,
                                  String[] signature,
                                  Subject delegationSubject)
                           throws ReflectionException,
                                  InstanceAlreadyExistsException,
                                  MBeanRegistrationException,
                                  MBeanException,
                                  NotCompliantMBeanException,
                                  IOException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.createMBean(String,
 ObjectName, Object[], String[]).  The Object[]
 parameter is wrapped in a MarshalledObject.

Specified by:
createMBean in interface RMIConnection
Parameters:
className - The class name of the MBean to be instantiated.
name - The object name of the MBean. May be null.
params - An array containing the parameters of the
 constructor to be invoked, encapsulated into a
 MarshalledObject.  The encapsulated array can be
 null, equivalent to an empty array.
signature - An array containing the signature of the
 constructor to be invoked.  Can be null, equivalent to an empty
 array.
delegationSubject - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
An ObjectInstance, containing the
 ObjectName and the Java class name of the newly
 instantiated MBean.  If the contained ObjectName
 is n, the contained Java class name is
 getMBeanInfo(n).getClassName().
Throws:
ReflectionException - Wraps a
 java.lang.ClassNotFoundException or a
 java.lang.Exception that occurred when trying to
 invoke the MBean's constructor.
InstanceAlreadyExistsException - The MBean is already
 under the control of the MBean server.
MBeanRegistrationException - The
 preRegister (MBeanRegistration
 interface) method of the MBean has thrown an exception. The
 MBean will not be registered.
MBeanException - The constructor of the MBean has
 thrown an exception.
NotCompliantMBeanException - This class is not a JMX
 compliant MBean.
IOException - if a general communication exception occurred.


"
RMIConnectionImpl,"createMBean(String className, ObjectName name, ObjectName loaderName, MarshalledObject params, String[] signature, Subject delegationSubject)",ObjectInstance,"Handles the method MBeanServerConnection.createMBean(String, ObjectName, ObjectName, Object[], String[]).","

createMBean
public ObjectInstance createMBean(String className,
                                  ObjectName name,
                                  ObjectName loaderName,
                                  MarshalledObject params,
                                  String[] signature,
                                  Subject delegationSubject)
                           throws ReflectionException,
                                  InstanceAlreadyExistsException,
                                  MBeanRegistrationException,
                                  MBeanException,
                                  NotCompliantMBeanException,
                                  InstanceNotFoundException,
                                  IOException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.createMBean(String,
 ObjectName, ObjectName, Object[], String[]).  The
 Object[] parameter is wrapped in a
 MarshalledObject.

Specified by:
createMBean in interface RMIConnection
Parameters:
className - The class name of the MBean to be instantiated.
name - The object name of the MBean. May be null.
loaderName - The object name of the class loader to be used.
params - An array containing the parameters of the
 constructor to be invoked, encapsulated into a
 MarshalledObject.  The encapsulated array can be
 null, equivalent to an empty array.
signature - An array containing the signature of the
 constructor to be invoked.  Can be null, equivalent to an empty
 array.
delegationSubject - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
An ObjectInstance, containing the
 ObjectName and the Java class name of the newly
 instantiated MBean.  If the contained ObjectName
 is n, the contained Java class name is
 getMBeanInfo(n).getClassName().
Throws:
ReflectionException - Wraps a
 java.lang.ClassNotFoundException or a
 java.lang.Exception that occurred when trying to
 invoke the MBean's constructor.
InstanceAlreadyExistsException - The MBean is already
 under the control of the MBean server.
MBeanRegistrationException - The
 preRegister (MBeanRegistration
 interface) method of the MBean has thrown an exception. The
 MBean will not be registered.
MBeanException - The constructor of the MBean has
 thrown an exception.
NotCompliantMBeanException - This class is not a JMX
 compliant MBean.
InstanceNotFoundException - The specified class loader
 is not registered in the MBean server.
IOException - if a general communication exception occurred.


"
RMIConnectionImpl,"createMBean(String className, ObjectName name, ObjectName loaderName, Subject delegationSubject)",ObjectInstance,"Handles the method MBeanServerConnection.createMBean(String, ObjectName, ObjectName).","

createMBean
public ObjectInstance createMBean(String className,
                                  ObjectName name,
                                  ObjectName loaderName,
                                  Subject delegationSubject)
                           throws ReflectionException,
                                  InstanceAlreadyExistsException,
                                  MBeanRegistrationException,
                                  MBeanException,
                                  NotCompliantMBeanException,
                                  InstanceNotFoundException,
                                  IOException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.createMBean(String,
 ObjectName, ObjectName).

Specified by:
createMBean in interface RMIConnection
Parameters:
className - The class name of the MBean to be instantiated.
name - The object name of the MBean. May be null.
loaderName - The object name of the class loader to be used.
delegationSubject - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
An ObjectInstance, containing the
 ObjectName and the Java class name of the newly
 instantiated MBean.  If the contained ObjectName
 is n, the contained Java class name is
 getMBeanInfo(n).getClassName().
Throws:
ReflectionException - Wraps a
 java.lang.ClassNotFoundException or a
 java.lang.Exception that occurred when trying to
 invoke the MBean's constructor.
InstanceAlreadyExistsException - The MBean is already
 under the control of the MBean server.
MBeanRegistrationException - The
 preRegister (MBeanRegistration
 interface) method of the MBean has thrown an exception. The
 MBean will not be registered.
MBeanException - The constructor of the MBean has
 thrown an exception.
NotCompliantMBeanException - This class is not a JMX
 compliant MBean.
InstanceNotFoundException - The specified class loader
 is not registered in the MBean server.
IOException - if a general communication exception occurred.


"
RMIConnectionImpl,"createMBean(String className, ObjectName name, Subject delegationSubject)",ObjectInstance,"Handles the method MBeanServerConnection.createMBean(String, ObjectName).","

createMBean
public ObjectInstance createMBean(String className,
                                  ObjectName name,
                                  Subject delegationSubject)
                           throws ReflectionException,
                                  InstanceAlreadyExistsException,
                                  MBeanRegistrationException,
                                  MBeanException,
                                  NotCompliantMBeanException,
                                  IOException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.createMBean(String,
 ObjectName).

Specified by:
createMBean in interface RMIConnection
Parameters:
className - The class name of the MBean to be instantiated.
name - The object name of the MBean. May be null.
delegationSubject - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
An ObjectInstance, containing the
 ObjectName and the Java class name of the newly
 instantiated MBean.  If the contained ObjectName
 is n, the contained Java class name is
 getMBeanInfo(n).getClassName().
Throws:
ReflectionException - Wraps a
 java.lang.ClassNotFoundException or a
 java.lang.Exception that occurred
 when trying to invoke the MBean's constructor.
InstanceAlreadyExistsException - The MBean is already
 under the control of the MBean server.
MBeanRegistrationException - The
 preRegister (MBeanRegistration
 interface) method of the MBean has thrown an exception. The
 MBean will not be registered.
MBeanException - The constructor of the MBean has
 thrown an exception.
NotCompliantMBeanException - This class is not a JMX
 compliant MBean.
IOException - if a general communication exception occurred.


"
RMIConnectionImpl,"fetchNotifications(long clientSequenceNumber, int maxNotifications, long timeout)",NotificationResult,Retrieves notifications from the connector server.,"

fetchNotifications
public NotificationResult fetchNotifications(long clientSequenceNumber,
                                             int maxNotifications,
                                             long timeout)
                                      throws IOException
Description copied from interface: RMIConnection
Retrieves notifications from the connector server.  This
 method can block until there is at least one notification or
 until the specified timeout is reached.  The method can also
 return at any time with zero notifications.
A notification can be included in the result if its sequence
 number is no less than clientSequenceNumber and
 this client has registered at least one listener for the MBean
 generating the notification, with a filter that accepts the
 notification.  Each listener that is interested in the
 notification is identified by an Integer ID that was returned
 by RMIConnection.addNotificationListeners(ObjectName[],
 MarshalledObject[], Subject[]).

Specified by:
fetchNotifications in interface RMIConnection
Parameters:
clientSequenceNumber - the first sequence number that the
 client is interested in.  If negative, it is interpreted as
 meaning the sequence number that the next notification will
 have.
maxNotifications - the maximum number of different
 notifications to return.  The TargetedNotification
 array in the returned NotificationResult can have
 more elements than this if the same notification appears more
 than once.  The behavior is unspecified if this parameter is
 negative.
timeout - the maximum time in milliseconds to wait for a
 notification to arrive.  This can be 0 to indicate that the
 method should not wait if there are no notifications, but
 should return at once.  It can be Long.MAX_VALUE
 to indicate that there is no timeout.  The behavior is
 unspecified if this parameter is negative.
Returns:
A NotificationResult.
Throws:
IOException - if a general communication exception occurred.


"
RMIConnectionImpl,"getAttribute(ObjectName name, String attribute, Subject delegationSubject)",Object,"Handles the method MBeanServerConnection.getAttribute(ObjectName, String).","

getAttribute
public Object getAttribute(ObjectName name,
                           String attribute,
                           Subject delegationSubject)
                    throws MBeanException,
                           AttributeNotFoundException,
                           InstanceNotFoundException,
                           ReflectionException,
                           IOException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.getAttribute(ObjectName,
 String).

Specified by:
getAttribute in interface RMIConnection
Parameters:
name - The object name of the MBean from which the
 attribute is to be retrieved.
attribute - A String specifying the name of the attribute
 to be retrieved.
delegationSubject - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
The value of the retrieved attribute.
Throws:
MBeanException - Wraps an exception thrown by the
 MBean's getter.
AttributeNotFoundException - The attribute specified
 is not accessible in the MBean.
InstanceNotFoundException - The MBean specified is not
 registered in the MBean server.
ReflectionException - Wraps a
 java.lang.Exception thrown when trying to invoke
 the getter.
IOException - if a general communication exception occurred.
See Also:
RMIConnection.setAttribute(javax.management.ObjectName, java.rmi.MarshalledObject, javax.security.auth.Subject)


"
RMIConnectionImpl,"getAttributes(ObjectName name, String[] attributes, Subject delegationSubject)",AttributeList,"Handles the method MBeanServerConnection.getAttributes(ObjectName, String[]).","

getAttributes
public AttributeList getAttributes(ObjectName name,
                                   String[] attributes,
                                   Subject delegationSubject)
                            throws InstanceNotFoundException,
                                   ReflectionException,
                                   IOException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.getAttributes(ObjectName,
 String[]).

Specified by:
getAttributes in interface RMIConnection
Parameters:
name - The object name of the MBean from which the
 attributes are retrieved.
attributes - A list of the attributes to be retrieved.
delegationSubject - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
The list of the retrieved attributes.
Throws:
InstanceNotFoundException - The MBean specified is not
 registered in the MBean server.
ReflectionException - An exception occurred when
 trying to invoke the getAttributes method of a Dynamic MBean.
IOException - if a general communication exception occurred.
See Also:
RMIConnection.setAttributes(javax.management.ObjectName, java.rmi.MarshalledObject, javax.security.auth.Subject)


"
RMIConnectionImpl,getConnectionId(),String,Returns the connection ID.,"

getConnectionId
public String getConnectionId()
                       throws IOException
Description copied from interface: RMIConnection
Returns the connection ID.  This string is different for
 every open connection to a given RMI connector server.

Specified by:
getConnectionId in interface RMIConnection
Returns:
the connection ID
Throws:
IOException - if a general communication exception occurred.
See Also:
RMIConnector.connect


"
RMIConnectionImpl,getDefaultDomain(Subject delegationSubject),String,Handles the method MBeanServerConnection.getDefaultDomain().,"

getDefaultDomain
public String getDefaultDomain(Subject delegationSubject)
                        throws IOException
Description copied from interface: RMIConnection
Handles the method
 MBeanServerConnection.getDefaultDomain().

Specified by:
getDefaultDomain in interface RMIConnection
Parameters:
delegationSubject - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
the default domain.
Throws:
IOException - if a general communication exception occurred.


"
RMIConnectionImpl,getDomains(Subject delegationSubject),String[],Handles the method MBeanServerConnection.getDomains().,"

getDomains
public String[] getDomains(Subject delegationSubject)
                    throws IOException
Description copied from interface: RMIConnection
Handles the method
 MBeanServerConnection.getDomains().

Specified by:
getDomains in interface RMIConnection
Parameters:
delegationSubject - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
the list of domains.
Throws:
IOException - if a general communication exception occurred.


"
RMIConnectionImpl,getMBeanCount(Subject delegationSubject),Integer,Handles the method MBeanServerConnection.getMBeanCount().,"

getMBeanCount
public Integer getMBeanCount(Subject delegationSubject)
                      throws IOException
Description copied from interface: RMIConnection
Handles the method
 MBeanServerConnection.getMBeanCount().

Specified by:
getMBeanCount in interface RMIConnection
Parameters:
delegationSubject - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
the number of MBeans registered.
Throws:
IOException - if a general communication exception occurred.


"
RMIConnectionImpl,"getMBeanInfo(ObjectName name, Subject delegationSubject)",MBeanInfo,Handles the method MBeanServerConnection.getMBeanInfo(ObjectName).,"

getMBeanInfo
public MBeanInfo getMBeanInfo(ObjectName name,
                              Subject delegationSubject)
                       throws InstanceNotFoundException,
                              IntrospectionException,
                              ReflectionException,
                              IOException
Description copied from interface: RMIConnection
Handles the method
 MBeanServerConnection.getMBeanInfo(ObjectName).

Specified by:
getMBeanInfo in interface RMIConnection
Parameters:
name - The name of the MBean to analyze
delegationSubject - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
An instance of MBeanInfo allowing the
 retrieval of all attributes and operations of this MBean.
Throws:
InstanceNotFoundException - The MBean specified was
 not found.
IntrospectionException - An exception occurred during
 introspection.
ReflectionException - An exception occurred when
 trying to invoke the getMBeanInfo of a Dynamic MBean.
IOException - if a general communication exception occurred.


"
RMIConnectionImpl,"getObjectInstance(ObjectName name, Subject delegationSubject)",ObjectInstance,Handles the method MBeanServerConnection.getObjectInstance(ObjectName).,"

getObjectInstance
public ObjectInstance getObjectInstance(ObjectName name,
                                        Subject delegationSubject)
                                 throws InstanceNotFoundException,
                                        IOException
Description copied from interface: RMIConnection
Handles the method
 MBeanServerConnection.getObjectInstance(ObjectName).

Specified by:
getObjectInstance in interface RMIConnection
Parameters:
name - The object name of the MBean.
delegationSubject - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
The ObjectInstance associated with the MBean
 specified by name.  The contained ObjectName
 is name and the contained class name is
 getMBeanInfo(name).getClassName().
Throws:
InstanceNotFoundException - The MBean specified is not
 registered in the MBean server.
IOException - if a general communication exception occurred.


"
RMIConnectionImpl,"invoke(ObjectName name, String operationName, MarshalledObject params, String[] signature, Subject delegationSubject)",Object,"Handles the method MBeanServerConnection.invoke(ObjectName, String, Object[], String[]).","

invoke
public Object invoke(ObjectName name,
                     String operationName,
                     MarshalledObject params,
                     String[] signature,
                     Subject delegationSubject)
              throws InstanceNotFoundException,
                     MBeanException,
                     ReflectionException,
                     IOException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.invoke(ObjectName,
 String, Object[], String[]).  The Object[]
 parameter is wrapped in a MarshalledObject.

Specified by:
invoke in interface RMIConnection
Parameters:
name - The object name of the MBean on which the method is
 to be invoked.
operationName - The name of the operation to be invoked.
params - An array containing the parameters to be set when
 the operation is invoked, encapsulated into a
 MarshalledObject.  The encapsulated array can be
 null, equivalent to an empty array.
signature - An array containing the signature of the
 operation. The class objects will be loaded using the same
 class loader as the one used for loading the MBean on which the
 operation was invoked.  Can be null, equivalent to an empty
 array.
delegationSubject - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
The object returned by the operation, which represents
 the result of invoking the operation on the MBean specified.
Throws:
InstanceNotFoundException - The MBean specified is not
 registered in the MBean server.
MBeanException - Wraps an exception thrown by the
 MBean's invoked method.
ReflectionException - Wraps a
 java.lang.Exception thrown while trying to invoke
 the method.
IOException - if a general communication exception occurred.


"
RMIConnectionImpl,"isInstanceOf(ObjectName name, String className, Subject delegationSubject)",boolean,"Handles the method MBeanServerConnection.isInstanceOf(ObjectName, String).","

isInstanceOf
public boolean isInstanceOf(ObjectName name,
                            String className,
                            Subject delegationSubject)
                     throws InstanceNotFoundException,
                            IOException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.isInstanceOf(ObjectName,
 String).

Specified by:
isInstanceOf in interface RMIConnection
Parameters:
name - The ObjectName of the MBean.
className - The name of the class.
delegationSubject - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
true if the MBean specified is an instance of the
 specified class according to the rules above, false otherwise.
Throws:
InstanceNotFoundException - The MBean specified is not
 registered in the MBean server.
IOException - if a general communication exception occurred.


"
RMIConnectionImpl,"isRegistered(ObjectName name, Subject delegationSubject)",boolean,Handles the method MBeanServerConnection.isRegistered(ObjectName).,"

isRegistered
public boolean isRegistered(ObjectName name,
                            Subject delegationSubject)
                     throws IOException
Description copied from interface: RMIConnection
Handles the method
 MBeanServerConnection.isRegistered(ObjectName).

Specified by:
isRegistered in interface RMIConnection
Parameters:
name - The object name of the MBean to be checked.
delegationSubject - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
True if the MBean is already registered in the MBean
 server, false otherwise.
Throws:
IOException - if a general communication exception occurred.


"
RMIConnectionImpl,"queryMBeans(ObjectName name, MarshalledObject query, Subject delegationSubject)",Set<ObjectInstance>,"Handles the method MBeanServerConnection.queryMBeans(ObjectName, QueryExp).","

queryMBeans
public Set<ObjectInstance> queryMBeans(ObjectName name,
                                       MarshalledObject query,
                                       Subject delegationSubject)
                                throws IOException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.queryMBeans(ObjectName,
 QueryExp).  The QueryExp is wrapped in a
 MarshalledObject.

Specified by:
queryMBeans in interface RMIConnection
Parameters:
name - The object name pattern identifying the MBeans to
 be retrieved. If null or no domain and key properties are
 specified, all the MBeans registered will be retrieved.
query - The query expression to be applied for selecting
 MBeans, encapsulated into a MarshalledObject. If
 the MarshalledObject encapsulates a null value no
 query expression will be applied for selecting MBeans.
delegationSubject - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
A set containing the ObjectInstance
 objects for the selected MBeans.  If no MBean satisfies the
 query an empty list is returned.
Throws:
IOException - if a general communication exception occurred.


"
RMIConnectionImpl,"queryNames(ObjectName name, MarshalledObject query, Subject delegationSubject)",Set<ObjectName>,"Handles the method MBeanServerConnection.queryNames(ObjectName, QueryExp).","

queryNames
public Set<ObjectName> queryNames(ObjectName name,
                                  MarshalledObject query,
                                  Subject delegationSubject)
                           throws IOException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.queryNames(ObjectName,
 QueryExp).  The QueryExp is wrapped in a
 MarshalledObject.

Specified by:
queryNames in interface RMIConnection
Parameters:
name - The object name pattern identifying the MBean names
 to be retrieved. If null or no domain and key properties are
 specified, the name of all registered MBeans will be retrieved.
query - The query expression to be applied for selecting
 MBeans, encapsulated into a MarshalledObject. If
 the MarshalledObject encapsulates a null value no
 query expression will be applied for selecting MBeans.
delegationSubject - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
A set containing the ObjectNames for the MBeans
 selected.  If no MBean satisfies the query, an empty list is
 returned.
Throws:
IOException - if a general communication exception occurred.


"
RMIConnectionImpl,"removeNotificationListener(ObjectName name, ObjectName listener, MarshalledObject filter, MarshalledObject handback, Subject delegationSubject)",void,"Handles the method MBeanServerConnection.removeNotificationListener(ObjectName, ObjectName, NotificationFilter, Object).","

removeNotificationListener
public void removeNotificationListener(ObjectName name,
                                       ObjectName listener,
                                       MarshalledObject filter,
                                       MarshalledObject handback,
                                       Subject delegationSubject)
                                throws InstanceNotFoundException,
                                       ListenerNotFoundException,
                                       IOException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.removeNotificationListener(ObjectName,
 ObjectName, NotificationFilter, Object).  The
 NotificationFilter parameter is wrapped in a
 MarshalledObject.  The Object
 parameter is also wrapped in a MarshalledObject.

Specified by:
removeNotificationListener in interface RMIConnection
Parameters:
name - The name of the MBean on which the listener should
 be removed.
listener - A listener that was previously added to this
 MBean.
filter - The filter that was specified when the listener
 was added, encapsulated into a MarshalledObject.
handback - The handback that was specified when the
 listener was added, encapsulated into a MarshalledObject.
delegationSubject - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Throws:
InstanceNotFoundException - The MBean name provided
 does not match any of the registered MBeans.
ListenerNotFoundException - The listener is not
 registered in the MBean, or it is not registered with the given
 filter and handback.
IOException - if a general communication exception occurred.
See Also:
RMIConnection.addNotificationListener(javax.management.ObjectName, javax.management.ObjectName, java.rmi.MarshalledObject, java.rmi.MarshalledObject, javax.security.auth.Subject)


"
RMIConnectionImpl,"removeNotificationListener(ObjectName name, ObjectName listener, Subject delegationSubject)",void,"Handles the method MBeanServerConnection.removeNotificationListener(ObjectName, ObjectName).","

removeNotificationListener
public void removeNotificationListener(ObjectName name,
                                       ObjectName listener,
                                       Subject delegationSubject)
                                throws InstanceNotFoundException,
                                       ListenerNotFoundException,
                                       IOException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.removeNotificationListener(ObjectName,
 ObjectName).

Specified by:
removeNotificationListener in interface RMIConnection
Parameters:
name - The name of the MBean on which the listener should
 be removed.
listener - The object name of the listener to be removed.
delegationSubject - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Throws:
InstanceNotFoundException - The MBean name provided
 does not match any of the registered MBeans.
ListenerNotFoundException - The listener is not
 registered in the MBean.
IOException - if a general communication exception occurred.
See Also:
RMIConnection.addNotificationListener(javax.management.ObjectName, javax.management.ObjectName, java.rmi.MarshalledObject, java.rmi.MarshalledObject, javax.security.auth.Subject)


"
RMIConnectionImpl,"removeNotificationListeners(ObjectName name, Integer[] listenerIDs, Subject delegationSubject)",void,"Handles the removeNotificationListener(ObjectName, NotificationListener) and removeNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object) methods.","

removeNotificationListeners
public void removeNotificationListeners(ObjectName name,
                                        Integer[] listenerIDs,
                                        Subject delegationSubject)
                                 throws InstanceNotFoundException,
                                        ListenerNotFoundException,
                                        IOException
Description copied from interface: RMIConnection
Handles the
 removeNotificationListener(ObjectName, NotificationListener) and
 removeNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object) methods.
This method removes one or more
 NotificationListeners from a given MBean in the
 MBean server.
The NotificationListeners are identified by the
 IDs which were returned by the RMIConnection.addNotificationListeners(ObjectName[], MarshalledObject[],
 Subject[]) method.

Specified by:
removeNotificationListeners in interface RMIConnection
Parameters:
name - the ObjectName identifying the MBean
 emitting the Notifications.
listenerIDs - the list of the IDs corresponding to the
 listeners to remove.
delegationSubject - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Throws:
InstanceNotFoundException - if the given
 name does not correspond to any registered MBean.
ListenerNotFoundException - if one of the listeners was
 not found on the server side.  This exception can happen if the
 MBean discarded a listener for some reason other than a call to
 MBeanServer.removeNotificationListener.
IOException - if a general communication exception occurred.


"
RMIConnectionImpl,"setAttribute(ObjectName name, MarshalledObject attribute, Subject delegationSubject)",void,"Handles the method MBeanServerConnection.setAttribute(ObjectName, Attribute).","

setAttribute
public void setAttribute(ObjectName name,
                         MarshalledObject attribute,
                         Subject delegationSubject)
                  throws InstanceNotFoundException,
                         AttributeNotFoundException,
                         InvalidAttributeValueException,
                         MBeanException,
                         ReflectionException,
                         IOException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.setAttribute(ObjectName,
 Attribute).  The Attribute parameter is wrapped
 in a MarshalledObject.

Specified by:
setAttribute in interface RMIConnection
Parameters:
name - The name of the MBean within which the attribute is
 to be set.
attribute - The identification of the attribute to be set
 and the value it is to be set to, encapsulated into a
 MarshalledObject.
delegationSubject - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Throws:
InstanceNotFoundException - The MBean specified is not
 registered in the MBean server.
AttributeNotFoundException - The attribute specified
 is not accessible in the MBean.
InvalidAttributeValueException - The value specified
 for the attribute is not valid.
MBeanException - Wraps an exception thrown by the
 MBean's setter.
ReflectionException - Wraps a
 java.lang.Exception thrown when trying to invoke
 the setter.
IOException - if a general communication exception occurred.
See Also:
RMIConnection.getAttribute(javax.management.ObjectName, java.lang.String, javax.security.auth.Subject)


"
RMIConnectionImpl,"setAttributes(ObjectName name, MarshalledObject attributes, Subject delegationSubject)",AttributeList,"Handles the method MBeanServerConnection.setAttributes(ObjectName, AttributeList).","

setAttributes
public AttributeList setAttributes(ObjectName name,
                                   MarshalledObject attributes,
                                   Subject delegationSubject)
                            throws InstanceNotFoundException,
                                   ReflectionException,
                                   IOException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.setAttributes(ObjectName,
 AttributeList).  The AttributeList parameter is
 wrapped in a MarshalledObject.

Specified by:
setAttributes in interface RMIConnection
Parameters:
name - The object name of the MBean within which the
 attributes are to be set.
attributes - A list of attributes: The identification of
 the attributes to be set and the values they are to be set to,
 encapsulated into a MarshalledObject.
delegationSubject - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
The list of attributes that were set, with their new
 values.
Throws:
InstanceNotFoundException - The MBean specified is not
 registered in the MBean server.
ReflectionException - An exception occurred when
 trying to invoke the getAttributes method of a Dynamic MBean.
IOException - if a general communication exception occurred.
See Also:
RMIConnection.getAttributes(javax.management.ObjectName, java.lang.String[], javax.security.auth.Subject)


"
RMIConnectionImpl,toString(),String,Returns a string representation of this object.,"

toString
public String toString()
Returns a string representation of this object.  In general,
 the toString method returns a string that
 ""textually represents"" this object. The result should be a
 concise but informative representation that is easy for a
 person to read.

Overrides:
toString in class Object
Returns:
a String representation of this object.


"
RMIConnectionImpl,unreferenced(),void,"Called by the RMI runtime sometime after the runtime determines that the reference list, the list of clients referencing the remote object, becomes empty.","

unreferenced
public void unreferenced()
Description copied from interface: Unreferenced
Called by the RMI runtime sometime after the runtime determines that
 the reference list, the list of clients referencing the remote object,
 becomes empty.

Specified by:
unreferenced in interface Unreferenced


"
RMIConnectionImpl,"unregisterMBean(ObjectName name, Subject delegationSubject)",void,Handles the method MBeanServerConnection.unregisterMBean(ObjectName).,"

unregisterMBean
public void unregisterMBean(ObjectName name,
                            Subject delegationSubject)
                     throws InstanceNotFoundException,
                            MBeanRegistrationException,
                            IOException
Description copied from interface: RMIConnection
Handles the method
 MBeanServerConnection.unregisterMBean(ObjectName).

Specified by:
unregisterMBean in interface RMIConnection
Parameters:
name - The object name of the MBean to be unregistered.
delegationSubject - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Throws:
InstanceNotFoundException - The MBean specified is not
 registered in the MBean server.
MBeanRegistrationException - The preDeregister
 ((MBeanRegistration interface) method of the MBean
 has thrown an exception.
IOException - if a general communication exception occurred.


"
RMIConnectionImpl_Stub,"addNotificationListener(ObjectName $param_ObjectName_1, ObjectName $param_ObjectName_2, MarshalledObject $param_MarshalledObject_3, MarshalledObject $param_MarshalledObject_4, Subject $param_Subject_5)",void,"Handles the method MBeanServerConnection.addNotificationListener(ObjectName, ObjectName, NotificationFilter, Object).","

addNotificationListener
public void addNotificationListener(ObjectName $param_ObjectName_1,
                                    ObjectName $param_ObjectName_2,
                                    MarshalledObject $param_MarshalledObject_3,
                                    MarshalledObject $param_MarshalledObject_4,
                                    Subject $param_Subject_5)
                             throws IOException,
                                    InstanceNotFoundException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.addNotificationListener(ObjectName,
 ObjectName, NotificationFilter, Object).  The
 NotificationFilter parameter is wrapped in a
 MarshalledObject.  The Object
 (handback) parameter is also wrapped in a
 MarshalledObject.

Specified by:
addNotificationListener in interface RMIConnection
Parameters:
$param_ObjectName_1 - The name of the MBean on which the listener should
 be added.
$param_ObjectName_2 - The object name of the listener which will
 handle the notifications emitted by the registered MBean.
$param_MarshalledObject_3 - The filter object, encapsulated into a
 MarshalledObject. If filter encapsulated in the
 MarshalledObject has a null value, no filtering
 will be performed before handling notifications.
$param_MarshalledObject_4 - The context to be sent to the listener when a
 notification is emitted, encapsulated into a
 MarshalledObject.
$param_Subject_5 - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Throws:
IOException - if a general communication exception occurred.
InstanceNotFoundException - The MBean name of the
 notification listener or of the notification broadcaster does
 not match any of the registered MBeans.
See Also:
RMIConnection.removeNotificationListener(ObjectName, ObjectName, Subject), 
RMIConnection.removeNotificationListener(ObjectName, ObjectName,
 MarshalledObject, MarshalledObject, Subject)


"
RMIConnectionImpl_Stub,"addNotificationListeners(ObjectName[] $param_arrayOf_ObjectName_1, MarshalledObject[] $param_arrayOf_MarshalledObject_2, Subject[] $param_arrayOf_Subject_3)",Integer[],"Handles the method MBeanServerConnection.addNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object).","

addNotificationListeners
public Integer[] addNotificationListeners(ObjectName[] $param_arrayOf_ObjectName_1,
                                          MarshalledObject[] $param_arrayOf_MarshalledObject_2,
                                          Subject[] $param_arrayOf_Subject_3)
                                   throws IOException,
                                          InstanceNotFoundException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.addNotificationListener(ObjectName,
 NotificationListener, NotificationFilter, Object).
Register for notifications from the given MBeans that match
 the given filters.  The remote client can subsequently retrieve
 the notifications using the fetchNotifications method.
For each listener, the original
 NotificationListener and handback are
 kept on the client side; in order for the client to be able to
 identify them, the server generates and returns a unique
 listenerID.  This listenerID is
 forwarded with the Notifications to the remote
 client.
If any one of the given (name, filter) pairs cannot be
 registered, then the operation fails with an exception, and no
 names or filters are registered.

Specified by:
addNotificationListeners in interface RMIConnection
Parameters:
$param_arrayOf_ObjectName_1 - the ObjectNames identifying the
 MBeans emitting the Notifications.
$param_arrayOf_MarshalledObject_2 - an array of marshalled representations of the
 NotificationFilters.  Elements of this array can
 be null.
$param_arrayOf_Subject_3 - the Subjects on behalf
 of which the listeners are being added.  Elements of this array
 can be null.  Also, the delegationSubjects
 parameter itself can be null, which is equivalent to an array
 of null values with the same size as the names and
 filters arrays.
Returns:
an array of listenerIDs identifying the
 local listeners.  This array has the same number of elements as
 the parameters.
Throws:
IOException - if a general communication exception occurred.
InstanceNotFoundException - if one of the
 names does not correspond to any registered MBean.


"
RMIConnectionImpl_Stub,close(),void,Closes this connection.,"

close
public void close()
           throws IOException
Description copied from interface: RMIConnection
Closes this connection.  On return from this method, the RMI
 object implementing this interface is unexported, so further
 remote calls to it will fail.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in interface RMIConnection
Throws:
IOException - if the connection could not be closed,
 or the Remote object could not be unexported, or there was a
 communication failure when transmitting the remote close
 request.


"
RMIConnectionImpl_Stub,"createMBean(String $param_String_1, ObjectName $param_ObjectName_2, MarshalledObject $param_MarshalledObject_3, String[] $param_arrayOf_String_4, Subject $param_Subject_5)",ObjectInstance,"Handles the method MBeanServerConnection.createMBean(String, ObjectName, Object[], String[]).","

createMBean
public ObjectInstance createMBean(String $param_String_1,
                                  ObjectName $param_ObjectName_2,
                                  MarshalledObject $param_MarshalledObject_3,
                                  String[] $param_arrayOf_String_4,
                                  Subject $param_Subject_5)
                           throws IOException,
                                  InstanceAlreadyExistsException,
                                  MBeanException,
                                  MBeanRegistrationException,
                                  NotCompliantMBeanException,
                                  ReflectionException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.createMBean(String,
 ObjectName, Object[], String[]).  The Object[]
 parameter is wrapped in a MarshalledObject.

Specified by:
createMBean in interface RMIConnection
Parameters:
$param_String_1 - The class name of the MBean to be instantiated.
$param_ObjectName_2 - The object name of the MBean. May be null.
$param_MarshalledObject_3 - An array containing the parameters of the
 constructor to be invoked, encapsulated into a
 MarshalledObject.  The encapsulated array can be
 null, equivalent to an empty array.
$param_arrayOf_String_4 - An array containing the signature of the
 constructor to be invoked.  Can be null, equivalent to an empty
 array.
$param_Subject_5 - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
An ObjectInstance, containing the
 ObjectName and the Java class name of the newly
 instantiated MBean.  If the contained ObjectName
 is n, the contained Java class name is
 getMBeanInfo(n).getClassName().
Throws:
IOException - if a general communication exception occurred.
InstanceAlreadyExistsException - The MBean is already
 under the control of the MBean server.
MBeanRegistrationException - The
 preRegister (MBeanRegistration
 interface) method of the MBean has thrown an exception. The
 MBean will not be registered.
MBeanException - The constructor of the MBean has
 thrown an exception.
NotCompliantMBeanException - This class is not a JMX
 compliant MBean.
ReflectionException - Wraps a
 java.lang.ClassNotFoundException or a
 java.lang.Exception that occurred when trying to
 invoke the MBean's constructor.


"
RMIConnectionImpl_Stub,"createMBean(String $param_String_1, ObjectName $param_ObjectName_2, ObjectName $param_ObjectName_3, MarshalledObject $param_MarshalledObject_4, String[] $param_arrayOf_String_5, Subject $param_Subject_6)",ObjectInstance,"Handles the method MBeanServerConnection.createMBean(String, ObjectName, ObjectName, Object[], String[]).","

createMBean
public ObjectInstance createMBean(String $param_String_1,
                                  ObjectName $param_ObjectName_2,
                                  ObjectName $param_ObjectName_3,
                                  MarshalledObject $param_MarshalledObject_4,
                                  String[] $param_arrayOf_String_5,
                                  Subject $param_Subject_6)
                           throws IOException,
                                  InstanceAlreadyExistsException,
                                  InstanceNotFoundException,
                                  MBeanException,
                                  MBeanRegistrationException,
                                  NotCompliantMBeanException,
                                  ReflectionException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.createMBean(String,
 ObjectName, ObjectName, Object[], String[]).  The
 Object[] parameter is wrapped in a
 MarshalledObject.

Specified by:
createMBean in interface RMIConnection
Parameters:
$param_String_1 - The class name of the MBean to be instantiated.
$param_ObjectName_2 - The object name of the MBean. May be null.
$param_ObjectName_3 - The object name of the class loader to be used.
$param_MarshalledObject_4 - An array containing the parameters of the
 constructor to be invoked, encapsulated into a
 MarshalledObject.  The encapsulated array can be
 null, equivalent to an empty array.
$param_arrayOf_String_5 - An array containing the signature of the
 constructor to be invoked.  Can be null, equivalent to an empty
 array.
$param_Subject_6 - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
An ObjectInstance, containing the
 ObjectName and the Java class name of the newly
 instantiated MBean.  If the contained ObjectName
 is n, the contained Java class name is
 getMBeanInfo(n).getClassName().
Throws:
IOException - if a general communication exception occurred.
InstanceAlreadyExistsException - The MBean is already
 under the control of the MBean server.
InstanceNotFoundException - The specified class loader
 is not registered in the MBean server.
MBeanRegistrationException - The
 preRegister (MBeanRegistration
 interface) method of the MBean has thrown an exception. The
 MBean will not be registered.
MBeanException - The constructor of the MBean has
 thrown an exception.
NotCompliantMBeanException - This class is not a JMX
 compliant MBean.
ReflectionException - Wraps a
 java.lang.ClassNotFoundException or a
 java.lang.Exception that occurred when trying to
 invoke the MBean's constructor.


"
RMIConnectionImpl_Stub,"createMBean(String $param_String_1, ObjectName $param_ObjectName_2, ObjectName $param_ObjectName_3, Subject $param_Subject_4)",ObjectInstance,"Handles the method MBeanServerConnection.createMBean(String, ObjectName, ObjectName).","

createMBean
public ObjectInstance createMBean(String $param_String_1,
                                  ObjectName $param_ObjectName_2,
                                  ObjectName $param_ObjectName_3,
                                  Subject $param_Subject_4)
                           throws IOException,
                                  InstanceAlreadyExistsException,
                                  InstanceNotFoundException,
                                  MBeanException,
                                  MBeanRegistrationException,
                                  NotCompliantMBeanException,
                                  ReflectionException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.createMBean(String,
 ObjectName, ObjectName).

Specified by:
createMBean in interface RMIConnection
Parameters:
$param_String_1 - The class name of the MBean to be instantiated.
$param_ObjectName_2 - The object name of the MBean. May be null.
$param_ObjectName_3 - The object name of the class loader to be used.
$param_Subject_4 - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
An ObjectInstance, containing the
 ObjectName and the Java class name of the newly
 instantiated MBean.  If the contained ObjectName
 is n, the contained Java class name is
 getMBeanInfo(n).getClassName().
Throws:
IOException - if a general communication exception occurred.
InstanceAlreadyExistsException - The MBean is already
 under the control of the MBean server.
InstanceNotFoundException - The specified class loader
 is not registered in the MBean server.
MBeanRegistrationException - The
 preRegister (MBeanRegistration
 interface) method of the MBean has thrown an exception. The
 MBean will not be registered.
MBeanException - The constructor of the MBean has
 thrown an exception.
NotCompliantMBeanException - This class is not a JMX
 compliant MBean.
ReflectionException - Wraps a
 java.lang.ClassNotFoundException or a
 java.lang.Exception that occurred when trying to
 invoke the MBean's constructor.


"
RMIConnectionImpl_Stub,"createMBean(String $param_String_1, ObjectName $param_ObjectName_2, Subject $param_Subject_3)",ObjectInstance,"Handles the method MBeanServerConnection.createMBean(String, ObjectName).","

createMBean
public ObjectInstance createMBean(String $param_String_1,
                                  ObjectName $param_ObjectName_2,
                                  Subject $param_Subject_3)
                           throws IOException,
                                  InstanceAlreadyExistsException,
                                  MBeanException,
                                  MBeanRegistrationException,
                                  NotCompliantMBeanException,
                                  ReflectionException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.createMBean(String,
 ObjectName).

Specified by:
createMBean in interface RMIConnection
Parameters:
$param_String_1 - The class name of the MBean to be instantiated.
$param_ObjectName_2 - The object name of the MBean. May be null.
$param_Subject_3 - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
An ObjectInstance, containing the
 ObjectName and the Java class name of the newly
 instantiated MBean.  If the contained ObjectName
 is n, the contained Java class name is
 getMBeanInfo(n).getClassName().
Throws:
IOException - if a general communication exception occurred.
InstanceAlreadyExistsException - The MBean is already
 under the control of the MBean server.
MBeanRegistrationException - The
 preRegister (MBeanRegistration
 interface) method of the MBean has thrown an exception. The
 MBean will not be registered.
MBeanException - The constructor of the MBean has
 thrown an exception.
NotCompliantMBeanException - This class is not a JMX
 compliant MBean.
ReflectionException - Wraps a
 java.lang.ClassNotFoundException or a
 java.lang.Exception that occurred
 when trying to invoke the MBean's constructor.


"
RMIConnectionImpl_Stub,"fetchNotifications(long $param_long_1, int $param_int_2, long $param_long_3)",NotificationResult,Retrieves notifications from the connector server.,"

fetchNotifications
public NotificationResult fetchNotifications(long $param_long_1,
                                             int $param_int_2,
                                             long $param_long_3)
                                      throws IOException
Description copied from interface: RMIConnection
Retrieves notifications from the connector server.  This
 method can block until there is at least one notification or
 until the specified timeout is reached.  The method can also
 return at any time with zero notifications.
A notification can be included in the result if its sequence
 number is no less than clientSequenceNumber and
 this client has registered at least one listener for the MBean
 generating the notification, with a filter that accepts the
 notification.  Each listener that is interested in the
 notification is identified by an Integer ID that was returned
 by RMIConnection.addNotificationListeners(ObjectName[],
 MarshalledObject[], Subject[]).

Specified by:
fetchNotifications in interface RMIConnection
Parameters:
$param_long_1 - the first sequence number that the
 client is interested in.  If negative, it is interpreted as
 meaning the sequence number that the next notification will
 have.
$param_int_2 - the maximum number of different
 notifications to return.  The TargetedNotification
 array in the returned NotificationResult can have
 more elements than this if the same notification appears more
 than once.  The behavior is unspecified if this parameter is
 negative.
$param_long_3 - the maximum time in milliseconds to wait for a
 notification to arrive.  This can be 0 to indicate that the
 method should not wait if there are no notifications, but
 should return at once.  It can be Long.MAX_VALUE
 to indicate that there is no timeout.  The behavior is
 unspecified if this parameter is negative.
Returns:
A NotificationResult.
Throws:
IOException - if a general communication exception occurred.


"
RMIConnectionImpl_Stub,"getAttribute(ObjectName $param_ObjectName_1, String $param_String_2, Subject $param_Subject_3)",Object,"Handles the method MBeanServerConnection.getAttribute(ObjectName, String).","

getAttribute
public Object getAttribute(ObjectName $param_ObjectName_1,
                           String $param_String_2,
                           Subject $param_Subject_3)
                    throws IOException,
                           AttributeNotFoundException,
                           InstanceNotFoundException,
                           MBeanException,
                           ReflectionException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.getAttribute(ObjectName,
 String).

Specified by:
getAttribute in interface RMIConnection
Parameters:
$param_ObjectName_1 - The object name of the MBean from which the
 attribute is to be retrieved.
$param_String_2 - A String specifying the name of the attribute
 to be retrieved.
$param_Subject_3 - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
The value of the retrieved attribute.
Throws:
IOException - if a general communication exception occurred.
AttributeNotFoundException - The attribute specified
 is not accessible in the MBean.
InstanceNotFoundException - The MBean specified is not
 registered in the MBean server.
MBeanException - Wraps an exception thrown by the
 MBean's getter.
ReflectionException - Wraps a
 java.lang.Exception thrown when trying to invoke
 the getter.
See Also:
RMIConnection.setAttribute(javax.management.ObjectName, java.rmi.MarshalledObject, javax.security.auth.Subject)


"
RMIConnectionImpl_Stub,"getAttributes(ObjectName $param_ObjectName_1, String[] $param_arrayOf_String_2, Subject $param_Subject_3)",AttributeList,"Handles the method MBeanServerConnection.getAttributes(ObjectName, String[]).","

getAttributes
public AttributeList getAttributes(ObjectName $param_ObjectName_1,
                                   String[] $param_arrayOf_String_2,
                                   Subject $param_Subject_3)
                            throws IOException,
                                   InstanceNotFoundException,
                                   ReflectionException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.getAttributes(ObjectName,
 String[]).

Specified by:
getAttributes in interface RMIConnection
Parameters:
$param_ObjectName_1 - The object name of the MBean from which the
 attributes are retrieved.
$param_arrayOf_String_2 - A list of the attributes to be retrieved.
$param_Subject_3 - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
The list of the retrieved attributes.
Throws:
IOException - if a general communication exception occurred.
InstanceNotFoundException - The MBean specified is not
 registered in the MBean server.
ReflectionException - An exception occurred when
 trying to invoke the getAttributes method of a Dynamic MBean.
See Also:
RMIConnection.setAttributes(javax.management.ObjectName, java.rmi.MarshalledObject, javax.security.auth.Subject)


"
RMIConnectionImpl_Stub,getConnectionId(),String,Returns the connection ID.,"

getConnectionId
public String getConnectionId()
                       throws IOException
Description copied from interface: RMIConnection
Returns the connection ID.  This string is different for
 every open connection to a given RMI connector server.

Specified by:
getConnectionId in interface RMIConnection
Returns:
the connection ID
Throws:
IOException - if a general communication exception occurred.
See Also:
RMIConnector.connect


"
RMIConnectionImpl_Stub,getDefaultDomain(Subject $param_Subject_1),String,Handles the method MBeanServerConnection.getDefaultDomain().,"

getDefaultDomain
public String getDefaultDomain(Subject $param_Subject_1)
                        throws IOException
Description copied from interface: RMIConnection
Handles the method
 MBeanServerConnection.getDefaultDomain().

Specified by:
getDefaultDomain in interface RMIConnection
Parameters:
$param_Subject_1 - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
the default domain.
Throws:
IOException - if a general communication exception occurred.


"
RMIConnectionImpl_Stub,getDomains(Subject $param_Subject_1),String[],Handles the method MBeanServerConnection.getDomains().,"

getDomains
public String[] getDomains(Subject $param_Subject_1)
                    throws IOException
Description copied from interface: RMIConnection
Handles the method
 MBeanServerConnection.getDomains().

Specified by:
getDomains in interface RMIConnection
Parameters:
$param_Subject_1 - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
the list of domains.
Throws:
IOException - if a general communication exception occurred.


"
RMIConnectionImpl_Stub,getMBeanCount(Subject $param_Subject_1),Integer,Handles the method MBeanServerConnection.getMBeanCount().,"

getMBeanCount
public Integer getMBeanCount(Subject $param_Subject_1)
                      throws IOException
Description copied from interface: RMIConnection
Handles the method
 MBeanServerConnection.getMBeanCount().

Specified by:
getMBeanCount in interface RMIConnection
Parameters:
$param_Subject_1 - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
the number of MBeans registered.
Throws:
IOException - if a general communication exception occurred.


"
RMIConnectionImpl_Stub,"getMBeanInfo(ObjectName $param_ObjectName_1, Subject $param_Subject_2)",MBeanInfo,Handles the method MBeanServerConnection.getMBeanInfo(ObjectName).,"

getMBeanInfo
public MBeanInfo getMBeanInfo(ObjectName $param_ObjectName_1,
                              Subject $param_Subject_2)
                       throws IOException,
                              InstanceNotFoundException,
                              IntrospectionException,
                              ReflectionException
Description copied from interface: RMIConnection
Handles the method
 MBeanServerConnection.getMBeanInfo(ObjectName).

Specified by:
getMBeanInfo in interface RMIConnection
Parameters:
$param_ObjectName_1 - The name of the MBean to analyze
$param_Subject_2 - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
An instance of MBeanInfo allowing the
 retrieval of all attributes and operations of this MBean.
Throws:
IOException - if a general communication exception occurred.
InstanceNotFoundException - The MBean specified was
 not found.
IntrospectionException - An exception occurred during
 introspection.
ReflectionException - An exception occurred when
 trying to invoke the getMBeanInfo of a Dynamic MBean.


"
RMIConnectionImpl_Stub,"getObjectInstance(ObjectName $param_ObjectName_1, Subject $param_Subject_2)",ObjectInstance,Handles the method MBeanServerConnection.getObjectInstance(ObjectName).,"

getObjectInstance
public ObjectInstance getObjectInstance(ObjectName $param_ObjectName_1,
                                        Subject $param_Subject_2)
                                 throws IOException,
                                        InstanceNotFoundException
Description copied from interface: RMIConnection
Handles the method
 MBeanServerConnection.getObjectInstance(ObjectName).

Specified by:
getObjectInstance in interface RMIConnection
Parameters:
$param_ObjectName_1 - The object name of the MBean.
$param_Subject_2 - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
The ObjectInstance associated with the MBean
 specified by name.  The contained ObjectName
 is name and the contained class name is
 getMBeanInfo(name).getClassName().
Throws:
IOException - if a general communication exception occurred.
InstanceNotFoundException - The MBean specified is not
 registered in the MBean server.


"
RMIConnectionImpl_Stub,"invoke(ObjectName $param_ObjectName_1, String $param_String_2, MarshalledObject $param_MarshalledObject_3, String[] $param_arrayOf_String_4, Subject $param_Subject_5)",Object,"Handles the method MBeanServerConnection.invoke(ObjectName, String, Object[], String[]).","

invoke
public Object invoke(ObjectName $param_ObjectName_1,
                     String $param_String_2,
                     MarshalledObject $param_MarshalledObject_3,
                     String[] $param_arrayOf_String_4,
                     Subject $param_Subject_5)
              throws IOException,
                     InstanceNotFoundException,
                     MBeanException,
                     ReflectionException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.invoke(ObjectName,
 String, Object[], String[]).  The Object[]
 parameter is wrapped in a MarshalledObject.

Specified by:
invoke in interface RMIConnection
Parameters:
$param_ObjectName_1 - The object name of the MBean on which the method is
 to be invoked.
$param_String_2 - The name of the operation to be invoked.
$param_MarshalledObject_3 - An array containing the parameters to be set when
 the operation is invoked, encapsulated into a
 MarshalledObject.  The encapsulated array can be
 null, equivalent to an empty array.
$param_arrayOf_String_4 - An array containing the signature of the
 operation. The class objects will be loaded using the same
 class loader as the one used for loading the MBean on which the
 operation was invoked.  Can be null, equivalent to an empty
 array.
$param_Subject_5 - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
The object returned by the operation, which represents
 the result of invoking the operation on the MBean specified.
Throws:
IOException - if a general communication exception occurred.
InstanceNotFoundException - The MBean specified is not
 registered in the MBean server.
MBeanException - Wraps an exception thrown by the
 MBean's invoked method.
ReflectionException - Wraps a
 java.lang.Exception thrown while trying to invoke
 the method.


"
RMIConnectionImpl_Stub,"isInstanceOf(ObjectName $param_ObjectName_1, String $param_String_2, Subject $param_Subject_3)",boolean,"Handles the method MBeanServerConnection.isInstanceOf(ObjectName, String).","

isInstanceOf
public boolean isInstanceOf(ObjectName $param_ObjectName_1,
                            String $param_String_2,
                            Subject $param_Subject_3)
                     throws IOException,
                            InstanceNotFoundException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.isInstanceOf(ObjectName,
 String).

Specified by:
isInstanceOf in interface RMIConnection
Parameters:
$param_ObjectName_1 - The ObjectName of the MBean.
$param_String_2 - The name of the class.
$param_Subject_3 - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
true if the MBean specified is an instance of the
 specified class according to the rules above, false otherwise.
Throws:
IOException - if a general communication exception occurred.
InstanceNotFoundException - The MBean specified is not
 registered in the MBean server.


"
RMIConnectionImpl_Stub,"isRegistered(ObjectName $param_ObjectName_1, Subject $param_Subject_2)",boolean,Handles the method MBeanServerConnection.isRegistered(ObjectName).,"

isRegistered
public boolean isRegistered(ObjectName $param_ObjectName_1,
                            Subject $param_Subject_2)
                     throws IOException
Description copied from interface: RMIConnection
Handles the method
 MBeanServerConnection.isRegistered(ObjectName).

Specified by:
isRegistered in interface RMIConnection
Parameters:
$param_ObjectName_1 - The object name of the MBean to be checked.
$param_Subject_2 - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
True if the MBean is already registered in the MBean
 server, false otherwise.
Throws:
IOException - if a general communication exception occurred.


"
RMIConnectionImpl_Stub,"queryMBeans(ObjectName $param_ObjectName_1, MarshalledObject $param_MarshalledObject_2, Subject $param_Subject_3)",Set,"Handles the method MBeanServerConnection.queryMBeans(ObjectName, QueryExp).","

queryMBeans
public Set queryMBeans(ObjectName $param_ObjectName_1,
                       MarshalledObject $param_MarshalledObject_2,
                       Subject $param_Subject_3)
                throws IOException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.queryMBeans(ObjectName,
 QueryExp).  The QueryExp is wrapped in a
 MarshalledObject.

Specified by:
queryMBeans in interface RMIConnection
Parameters:
$param_ObjectName_1 - The object name pattern identifying the MBeans to
 be retrieved. If null or no domain and key properties are
 specified, all the MBeans registered will be retrieved.
$param_MarshalledObject_2 - The query expression to be applied for selecting
 MBeans, encapsulated into a MarshalledObject. If
 the MarshalledObject encapsulates a null value no
 query expression will be applied for selecting MBeans.
$param_Subject_3 - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
A set containing the ObjectInstance
 objects for the selected MBeans.  If no MBean satisfies the
 query an empty list is returned.
Throws:
IOException - if a general communication exception occurred.


"
RMIConnectionImpl_Stub,"queryNames(ObjectName $param_ObjectName_1, MarshalledObject $param_MarshalledObject_2, Subject $param_Subject_3)",Set,"Handles the method MBeanServerConnection.queryNames(ObjectName, QueryExp).","

queryNames
public Set queryNames(ObjectName $param_ObjectName_1,
                      MarshalledObject $param_MarshalledObject_2,
                      Subject $param_Subject_3)
               throws IOException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.queryNames(ObjectName,
 QueryExp).  The QueryExp is wrapped in a
 MarshalledObject.

Specified by:
queryNames in interface RMIConnection
Parameters:
$param_ObjectName_1 - The object name pattern identifying the MBean names
 to be retrieved. If null or no domain and key properties are
 specified, the name of all registered MBeans will be retrieved.
$param_MarshalledObject_2 - The query expression to be applied for selecting
 MBeans, encapsulated into a MarshalledObject. If
 the MarshalledObject encapsulates a null value no
 query expression will be applied for selecting MBeans.
$param_Subject_3 - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
A set containing the ObjectNames for the MBeans
 selected.  If no MBean satisfies the query, an empty list is
 returned.
Throws:
IOException - if a general communication exception occurred.


"
RMIConnectionImpl_Stub,"removeNotificationListener(ObjectName $param_ObjectName_1, ObjectName $param_ObjectName_2, MarshalledObject $param_MarshalledObject_3, MarshalledObject $param_MarshalledObject_4, Subject $param_Subject_5)",void,"Handles the method MBeanServerConnection.removeNotificationListener(ObjectName, ObjectName, NotificationFilter, Object).","

removeNotificationListener
public void removeNotificationListener(ObjectName $param_ObjectName_1,
                                       ObjectName $param_ObjectName_2,
                                       MarshalledObject $param_MarshalledObject_3,
                                       MarshalledObject $param_MarshalledObject_4,
                                       Subject $param_Subject_5)
                                throws IOException,
                                       InstanceNotFoundException,
                                       ListenerNotFoundException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.removeNotificationListener(ObjectName,
 ObjectName, NotificationFilter, Object).  The
 NotificationFilter parameter is wrapped in a
 MarshalledObject.  The Object
 parameter is also wrapped in a MarshalledObject.

Specified by:
removeNotificationListener in interface RMIConnection
Parameters:
$param_ObjectName_1 - The name of the MBean on which the listener should
 be removed.
$param_ObjectName_2 - A listener that was previously added to this
 MBean.
$param_MarshalledObject_3 - The filter that was specified when the listener
 was added, encapsulated into a MarshalledObject.
$param_MarshalledObject_4 - The handback that was specified when the
 listener was added, encapsulated into a MarshalledObject.
$param_Subject_5 - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Throws:
IOException - if a general communication exception occurred.
InstanceNotFoundException - The MBean name provided
 does not match any of the registered MBeans.
ListenerNotFoundException - The listener is not
 registered in the MBean, or it is not registered with the given
 filter and handback.
See Also:
RMIConnection.addNotificationListener(javax.management.ObjectName, javax.management.ObjectName, java.rmi.MarshalledObject, java.rmi.MarshalledObject, javax.security.auth.Subject)


"
RMIConnectionImpl_Stub,"removeNotificationListener(ObjectName $param_ObjectName_1, ObjectName $param_ObjectName_2, Subject $param_Subject_3)",void,"Handles the method MBeanServerConnection.removeNotificationListener(ObjectName, ObjectName).","

removeNotificationListener
public void removeNotificationListener(ObjectName $param_ObjectName_1,
                                       ObjectName $param_ObjectName_2,
                                       Subject $param_Subject_3)
                                throws IOException,
                                       InstanceNotFoundException,
                                       ListenerNotFoundException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.removeNotificationListener(ObjectName,
 ObjectName).

Specified by:
removeNotificationListener in interface RMIConnection
Parameters:
$param_ObjectName_1 - The name of the MBean on which the listener should
 be removed.
$param_ObjectName_2 - The object name of the listener to be removed.
$param_Subject_3 - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Throws:
IOException - if a general communication exception occurred.
InstanceNotFoundException - The MBean name provided
 does not match any of the registered MBeans.
ListenerNotFoundException - The listener is not
 registered in the MBean.
See Also:
RMIConnection.addNotificationListener(javax.management.ObjectName, javax.management.ObjectName, java.rmi.MarshalledObject, java.rmi.MarshalledObject, javax.security.auth.Subject)


"
RMIConnectionImpl_Stub,"removeNotificationListeners(ObjectName $param_ObjectName_1, Integer[] $param_arrayOf_Integer_2, Subject $param_Subject_3)",void,"Handles the removeNotificationListener(ObjectName, NotificationListener) and removeNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object) methods.","

removeNotificationListeners
public void removeNotificationListeners(ObjectName $param_ObjectName_1,
                                        Integer[] $param_arrayOf_Integer_2,
                                        Subject $param_Subject_3)
                                 throws IOException,
                                        InstanceNotFoundException,
                                        ListenerNotFoundException
Description copied from interface: RMIConnection
Handles the
 removeNotificationListener(ObjectName, NotificationListener) and
 removeNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object) methods.
This method removes one or more
 NotificationListeners from a given MBean in the
 MBean server.
The NotificationListeners are identified by the
 IDs which were returned by the RMIConnection.addNotificationListeners(ObjectName[], MarshalledObject[],
 Subject[]) method.

Specified by:
removeNotificationListeners in interface RMIConnection
Parameters:
$param_ObjectName_1 - the ObjectName identifying the MBean
 emitting the Notifications.
$param_arrayOf_Integer_2 - the list of the IDs corresponding to the
 listeners to remove.
$param_Subject_3 - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Throws:
IOException - if a general communication exception occurred.
InstanceNotFoundException - if the given
 name does not correspond to any registered MBean.
ListenerNotFoundException - if one of the listeners was
 not found on the server side.  This exception can happen if the
 MBean discarded a listener for some reason other than a call to
 MBeanServer.removeNotificationListener.


"
RMIConnectionImpl_Stub,"setAttribute(ObjectName $param_ObjectName_1, MarshalledObject $param_MarshalledObject_2, Subject $param_Subject_3)",void,"Handles the method MBeanServerConnection.setAttribute(ObjectName, Attribute).","

setAttribute
public void setAttribute(ObjectName $param_ObjectName_1,
                         MarshalledObject $param_MarshalledObject_2,
                         Subject $param_Subject_3)
                  throws IOException,
                         AttributeNotFoundException,
                         InstanceNotFoundException,
                         InvalidAttributeValueException,
                         MBeanException,
                         ReflectionException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.setAttribute(ObjectName,
 Attribute).  The Attribute parameter is wrapped
 in a MarshalledObject.

Specified by:
setAttribute in interface RMIConnection
Parameters:
$param_ObjectName_1 - The name of the MBean within which the attribute is
 to be set.
$param_MarshalledObject_2 - The identification of the attribute to be set
 and the value it is to be set to, encapsulated into a
 MarshalledObject.
$param_Subject_3 - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Throws:
IOException - if a general communication exception occurred.
AttributeNotFoundException - The attribute specified
 is not accessible in the MBean.
InstanceNotFoundException - The MBean specified is not
 registered in the MBean server.
InvalidAttributeValueException - The value specified
 for the attribute is not valid.
MBeanException - Wraps an exception thrown by the
 MBean's setter.
ReflectionException - Wraps a
 java.lang.Exception thrown when trying to invoke
 the setter.
See Also:
RMIConnection.getAttribute(javax.management.ObjectName, java.lang.String, javax.security.auth.Subject)


"
RMIConnectionImpl_Stub,"setAttributes(ObjectName $param_ObjectName_1, MarshalledObject $param_MarshalledObject_2, Subject $param_Subject_3)",AttributeList,"Handles the method MBeanServerConnection.setAttributes(ObjectName, AttributeList).","

setAttributes
public AttributeList setAttributes(ObjectName $param_ObjectName_1,
                                   MarshalledObject $param_MarshalledObject_2,
                                   Subject $param_Subject_3)
                            throws IOException,
                                   InstanceNotFoundException,
                                   ReflectionException
Description copied from interface: RMIConnection
Handles the method MBeanServerConnection.setAttributes(ObjectName,
 AttributeList).  The AttributeList parameter is
 wrapped in a MarshalledObject.

Specified by:
setAttributes in interface RMIConnection
Parameters:
$param_ObjectName_1 - The object name of the MBean within which the
 attributes are to be set.
$param_MarshalledObject_2 - A list of attributes: The identification of
 the attributes to be set and the values they are to be set to,
 encapsulated into a MarshalledObject.
$param_Subject_3 - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Returns:
The list of attributes that were set, with their new
 values.
Throws:
IOException - if a general communication exception occurred.
InstanceNotFoundException - The MBean specified is not
 registered in the MBean server.
ReflectionException - An exception occurred when
 trying to invoke the getAttributes method of a Dynamic MBean.
See Also:
RMIConnection.getAttributes(javax.management.ObjectName, java.lang.String[], javax.security.auth.Subject)


"
RMIConnectionImpl_Stub,"unregisterMBean(ObjectName $param_ObjectName_1, Subject $param_Subject_2)",void,Handles the method MBeanServerConnection.unregisterMBean(ObjectName).,"

unregisterMBean
public void unregisterMBean(ObjectName $param_ObjectName_1,
                            Subject $param_Subject_2)
                     throws IOException,
                            InstanceNotFoundException,
                            MBeanRegistrationException
Description copied from interface: RMIConnection
Handles the method
 MBeanServerConnection.unregisterMBean(ObjectName).

Specified by:
unregisterMBean in interface RMIConnection
Parameters:
$param_ObjectName_1 - The object name of the MBean to be unregistered.
$param_Subject_2 - The Subject containing the
 delegation principals or null if the authentication
 principal is used instead.
Throws:
IOException - if a general communication exception occurred.
InstanceNotFoundException - The MBean specified is not
 registered in the MBean server.
MBeanRegistrationException - The preDeregister
 ((MBeanRegistration interface) method of the MBean
 has thrown an exception.


"
RMIConnector,"addConnectionNotificationListener(NotificationListener listener, NotificationFilter filter, Object handback)",void,Adds a listener to be informed of changes in connection status.,"

addConnectionNotificationListener
public void addConnectionNotificationListener(NotificationListener listener,
                                              NotificationFilter filter,
                                              Object handback)
Description copied from interface: JMXConnector
Adds a listener to be informed of changes in connection
 status.  The listener will receive notifications of type JMXConnectionNotification.  An implementation can send other
 types of notifications too.
Any number of listeners can be added with this method.  The
 same listener can be added more than once with the same or
 different values for the filter and handback.  There is no
 special treatment of a duplicate entry.  For example, if a
 listener is registered twice with no filter, then its
 handleNotification method will be called twice for
 each notification.

Specified by:
addConnectionNotificationListener in interface JMXConnector
Parameters:
listener - a listener to receive connection status
 notifications.
filter - a filter to select which notifications are to be
 delivered to the listener, or null if all notifications are to
 be delivered.
handback - an object to be given to the listener along
 with each notification.  Can be null.
See Also:
JMXConnector.removeConnectionNotificationListener(javax.management.NotificationListener), 
NotificationBroadcaster.addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)


"
RMIConnector,close(),void,Closes the client connection to its server.,"

close
public void close()
           throws IOException
Description copied from interface: JMXConnector
Closes the client connection to its server.  Any ongoing or new
 request using the MBeanServerConnection returned by JMXConnector.getMBeanServerConnection() will get an
 IOException.
If close has already been called successfully
 on this object, calling it again has no effect.  If
 close has never been called, or if it was called
 but produced an exception, an attempt will be made to close the
 connection.  This attempt can succeed, in which case
 close will return normally, or it can generate an
 exception.
Closing a connection is a potentially slow operation.  For
 example, if the server has crashed, the close operation might
 have to wait for a network protocol timeout.  Callers that do
 not want to block in a close operation should do it in a
 separate thread.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in interface JMXConnector
Throws:
IOException - if the connection cannot be closed
 cleanly.  If this exception is thrown, it is not known whether
 the server end of the connection has been cleanly closed.


"
RMIConnector,connect(),void,Establishes the connection to the connector server.,"

connect
public void connect()
             throws IOException
Description copied from interface: JMXConnector
Establishes the connection to the connector server.  This
 method is equivalent to connect(null).

Specified by:
connect in interface JMXConnector
Throws:
IOException - if the connection could not be made because of a
   communication problem, or in the case of the iiop protocol,
   that RMI/IIOP is not supported


"
RMIConnector,"connect(Map<String,?> environment)",void,Establishes the connection to the connector server.,"

connect
public void connect(Map<String,?> environment)
             throws IOException
Description copied from interface: JMXConnector
Establishes the connection to the connector server.
If connect has already been called successfully
 on this object, calling it again has no effect.  If, however,
 JMXConnector.close() was called after connect, the new
 connect will throw an IOException.

 Otherwise, either connect has never been called
 on this object, or it has been called but produced an
 exception.  Then calling connect will attempt to
 establish a connection to the connector server.

Specified by:
connect in interface JMXConnector
Parameters:
environment - the properties of the connection.  Properties in
 this map override properties in the map specified when the
 JMXConnector was created, if any.  This parameter
 can be null, which is equivalent to an empty map.
Throws:
IOException - if the connection could not be made because of a
   communication problem, or in the case of the iiop protocol,
   that RMI/IIOP is not supported


"
RMIConnector,getAddress(),JMXServiceURL,The address of this connector.,"

getAddress
public JMXServiceURL getAddress()
The address of this connector.

Specified by:
getAddress in interface JMXAddressable
Returns:
the address of this connector, or null if it
 does not have one.
Since:
1.6


"
RMIConnector,getConnectionId(),String,Gets this connection's ID from the connector server.,"

getConnectionId
public String getConnectionId()
                       throws IOException
Description copied from interface: JMXConnector
Gets this connection's ID from the connector server.  For a
 given connector server, every connection will have a unique id
 which does not change during the lifetime of the
 connection.

Specified by:
getConnectionId in interface JMXConnector
Returns:
the unique ID of this connection.  This is the same as
 the ID that the connector server includes in its JMXConnectionNotifications.  The package description describes the
 conventions for connection IDs.
Throws:
IOException - if the connection ID cannot be obtained,
 for instance because the connection is closed or broken.


"
RMIConnector,getMBeanServerConnection(),MBeanServerConnection,Returns an MBeanServerConnection object representing a remote MBean server.,"

getMBeanServerConnection
public MBeanServerConnection getMBeanServerConnection()
                                               throws IOException
Description copied from interface: JMXConnector
Returns an MBeanServerConnection object
 representing a remote MBean server.  For a given
 JMXConnector, two successful calls to this method
 will usually return the same MBeanServerConnection
 object, though this is not required.
For each method in the returned
 MBeanServerConnection, calling the method causes
 the corresponding method to be called in the remote MBean
 server.  The value returned by the MBean server method is the
 value returned to the client.  If the MBean server method
 produces an Exception, the same
 Exception is seen by the client.  If the MBean
 server method, or the attempt to call it, produces an
 Error, the Error is wrapped in a
 JMXServerErrorException, which is seen by the
 client.
Calling this method is equivalent to calling
 getMBeanServerConnection(null)
 meaning that no delegation subject is specified and that all the
 operations called on the MBeanServerConnection must
 use the authenticated subject, if any.

Specified by:
getMBeanServerConnection in interface JMXConnector
Returns:
an object that implements the
 MBeanServerConnection interface by forwarding its
 methods to the remote MBean server.
Throws:
IOException - if a valid
 MBeanServerConnection cannot be created, for
 instance because the connection to the remote MBean server has
 not yet been established (with the connect method), or it has been closed, or it has broken.


"
RMIConnector,getMBeanServerConnection(Subject delegationSubject),MBeanServerConnection,Returns an MBeanServerConnection object representing a remote MBean server on which operations are performed on behalf of the supplied delegation subject.,"

getMBeanServerConnection
public MBeanServerConnection getMBeanServerConnection(Subject delegationSubject)
                                               throws IOException
Description copied from interface: JMXConnector
Returns an MBeanServerConnection object representing
 a remote MBean server on which operations are performed on behalf of
 the supplied delegation subject. For a given JMXConnector
 and Subject, two successful calls to this method will
 usually return the same MBeanServerConnection object,
 though this is not required.
For each method in the returned
 MBeanServerConnection, calling the method causes
 the corresponding method to be called in the remote MBean
 server on behalf of the given delegation subject instead of the
 authenticated subject. The value returned by the MBean server
 method is the value returned to the client. If the MBean server
 method produces an Exception, the same
 Exception is seen by the client. If the MBean
 server method, or the attempt to call it, produces an
 Error, the Error is wrapped in a
 JMXServerErrorException, which is seen by the
 client.

Specified by:
getMBeanServerConnection in interface JMXConnector
Parameters:
delegationSubject - the Subject on behalf of
 which requests will be performed.  Can be null, in which case
 requests will be performed on behalf of the authenticated
 Subject, if any.
Returns:
an object that implements the MBeanServerConnection
 interface by forwarding its methods to the remote MBean server on behalf
 of a given delegation subject.
Throws:
IOException - if a valid MBeanServerConnection
 cannot be created, for instance because the connection to the remote
 MBean server has not yet been established (with the connect method), or it has been closed, or it has broken.


"
RMIConnector,removeConnectionNotificationListener(NotificationListener listener),void,Removes a listener from the list to be informed of changes in status.,"

removeConnectionNotificationListener
public void removeConnectionNotificationListener(NotificationListener listener)
                                          throws ListenerNotFoundException
Description copied from interface: JMXConnector
Removes a listener from the list to be informed of changes
 in status.  The listener must previously have been added.  If
 there is more than one matching listener, all are removed.

Specified by:
removeConnectionNotificationListener in interface JMXConnector
Parameters:
listener - a listener to receive connection status
 notifications.
Throws:
ListenerNotFoundException - if the listener is not
 registered with this JMXConnector.
See Also:
JMXConnector.removeConnectionNotificationListener(NotificationListener,
 NotificationFilter, Object), 
JMXConnector.addConnectionNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object), 
NotificationEmitter.removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)


"
RMIConnector,"removeConnectionNotificationListener(NotificationListener listener, NotificationFilter filter, Object handback)",void,Removes a listener from the list to be informed of changes in status.,"

removeConnectionNotificationListener
public void removeConnectionNotificationListener(NotificationListener listener,
                                                 NotificationFilter filter,
                                                 Object handback)
                                          throws ListenerNotFoundException
Description copied from interface: JMXConnector
Removes a listener from the list to be informed of changes
 in status.  The listener must previously have been added with
 the same three parameters.  If there is more than one matching
 listener, only one is removed.

Specified by:
removeConnectionNotificationListener in interface JMXConnector
Parameters:
listener - a listener to receive connection status notifications.
filter - a filter to select which notifications are to be
 delivered to the listener.  Can be null.
handback - an object to be given to the listener along
 with each notification.  Can be null.
Throws:
ListenerNotFoundException - if the listener is not
 registered with this JMXConnector, or is not
 registered with the given filter and handback.
See Also:
JMXConnector.removeConnectionNotificationListener(NotificationListener), 
JMXConnector.addConnectionNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object), 
NotificationEmitter.removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)


"
RMIConnector,toString(),String,Returns a string representation of this object.,"

toString
public String toString()
Returns a string representation of this object.  In general,
 the toString method returns a string that
 ""textually represents"" this object. The result should be a
 concise but informative representation that is easy for a
 person to read.

Overrides:
toString in class Object
Returns:
a String representation of this object.


"
RMIConnectorServer,"connectionClosed(String connectionId, String message, Object userData)",protected void,Called by a subclass when a client connection is closed normally.,"

connectionClosed
protected void connectionClosed(String connectionId,
                                String message,
                                Object userData)
Description copied from class: JMXConnectorServer
Called by a subclass when a client connection is closed
 normally.  Removes connectionId from the list returned
 by JMXConnectorServer.getConnectionIds(), then emits a JMXConnectionNotification with type JMXConnectionNotification.CLOSED.

Overrides:
connectionClosed in class JMXConnectorServer
Parameters:
connectionId - the ID of the closed connection.
message - the message for the emitted JMXConnectionNotification.  Can be null.  See Notification.getMessage().
userData - the userData for the emitted
 JMXConnectionNotification.  Can be null.  See Notification.getUserData().


"
RMIConnectorServer,"connectionFailed(String connectionId, String message, Object userData)",protected void,Called by a subclass when a client connection fails.,"

connectionFailed
protected void connectionFailed(String connectionId,
                                String message,
                                Object userData)
Description copied from class: JMXConnectorServer
Called by a subclass when a client connection fails.
 Removes connectionId from the list returned by
 JMXConnectorServer.getConnectionIds(), then emits a JMXConnectionNotification with type JMXConnectionNotification.FAILED.

Overrides:
connectionFailed in class JMXConnectorServer
Parameters:
connectionId - the ID of the failed connection.
message - the message for the emitted JMXConnectionNotification.  Can be null.  See Notification.getMessage().
userData - the userData for the emitted
 JMXConnectionNotification.  Can be null.  See Notification.getUserData().


"
RMIConnectorServer,"connectionOpened(String connectionId, String message, Object userData)",protected void,Called by a subclass when a new client connection is opened.,"

connectionOpened
protected void connectionOpened(String connectionId,
                                String message,
                                Object userData)
Description copied from class: JMXConnectorServer
Called by a subclass when a new client connection is opened.
 Adds connectionId to the list returned by JMXConnectorServer.getConnectionIds(), then emits a JMXConnectionNotification with type JMXConnectionNotification.OPENED.

Overrides:
connectionOpened in class JMXConnectorServer
Parameters:
connectionId - the ID of the new connection.  This must be
 different from the ID of any connection previously opened by
 this connector server.
message - the message for the emitted JMXConnectionNotification.  Can be null.  See Notification.getMessage().
userData - the userData for the emitted
 JMXConnectionNotification.  Can be null.  See Notification.getUserData().


"
RMIConnectorServer,getAddress(),JMXServiceURL,The address of this connector server.,"

getAddress
public JMXServiceURL getAddress()
Description copied from interface: JMXConnectorServerMBean
The address of this connector server.

 The address returned may not be the exact original JMXServiceURL
 that was supplied when creating the connector server, since the original
 address may not always be complete. For example the port number may be
 dynamically allocated when starting the connector server. Instead the
 address returned is the actual JMXServiceURL of the
 JMXConnectorServer. This is the address that clients supply
 to JMXConnectorFactory.connect(JMXServiceURL).
 
Note that the address returned may be null if
    the JMXConnectorServer is not yet active.
 

Returns:
the address of this connector server, or null if it
 does not have one.


"
RMIConnectorServer,getAttributes(),"Map<String,?>",The attributes for this connector server.,"

getAttributes
public Map<String,?> getAttributes()
Description copied from interface: JMXConnectorServerMBean
The attributes for this connector server.

Returns:
a read-only map containing the attributes for this
 connector server.  Attributes whose values are not serializable
 are omitted from this map.  If there are no serializable
 attributes, the returned map is empty.


"
RMIConnectorServer,isActive(),boolean,Determines whether the connector server is active.,"

isActive
public boolean isActive()
Description copied from interface: JMXConnectorServerMBean
Determines whether the connector server is active.  A connector
 server starts being active when its start method
 returns successfully and remains active until either its
 stop method is called or the connector server
 fails.

Returns:
true if the connector server is active.


"
RMIConnectorServer,setMBeanServerForwarder(MBeanServerForwarder mbsf),void,Inserts an object that intercepts requests for the MBean server that arrive through this connector server.,"

setMBeanServerForwarder
public void setMBeanServerForwarder(MBeanServerForwarder mbsf)
Description copied from interface: JMXConnectorServerMBean
Inserts an object that intercepts requests for the MBean server
 that arrive through this connector server.  This object will be
 supplied as the MBeanServer for any new connection
 created by this connector server.  Existing connections are
 unaffected.
This method can be called more than once with different
 MBeanServerForwarder objects.  The result is a chain
 of forwarders.  The last forwarder added is the first in the chain.
 In more detail:

If this connector server is already associated with an
 MBeanServer object, then that object is given to
 mbsf.setMBeanServer.  If doing so produces an exception, this
 method throws the same exception without any other effect.
If this connector is not already associated with an
 MBeanServer object, or if the
 mbsf.setMBeanServer call just mentioned succeeds,
 then mbsf becomes this connector server's
 MBeanServer.


Specified by:
setMBeanServerForwarder in interface JMXConnectorServerMBean
Overrides:
setMBeanServerForwarder in class JMXConnectorServer
Parameters:
mbsf - the new MBeanServerForwarder.


"
RMIConnectorServer,start(),void,"Activates the connector server, that is starts listening for client connections.","

start
public void start()
           throws IOException
Activates the connector server, that is starts listening for
 client connections.  Calling this method when the connector
 server is already active has no effect.  Calling this method
 when the connector server has been stopped will generate an
 IOException.
The behavior of this method when called for the first time
 depends on the parameters that were supplied at construction,
 as described below.
First, an object of a subclass of RMIServerImpl is
 required, to export the connector server through RMI:

If an RMIServerImpl was supplied to the
 constructor, it is used.

 Otherwise, if the protocol part of the
 JMXServiceURL supplied to the constructor was
 iiop, an object of type RMIIIOPServerImpl
 is created.

 Otherwise, if the JMXServiceURL
 was null, or its protocol part was rmi, an object
 of type RMIJRMPServerImpl is created.

 Otherwise, the implementation can create an
 implementation-specific RMIServerImpl or it can throw
 MalformedURLException.

 
If the given address includes a JNDI directory URL as
 specified in the package documentation for javax.management.remote.rmi, then this
 RMIConnectorServer will bootstrap by binding the
 RMIServerImpl to the given address.
If the URL path part of the JMXServiceURL was
 empty or a single slash (/), then the RMI object
 will not be bound to a directory.  Instead, a reference to it
 will be encoded in the URL path of the RMIConnectorServer
 address (returned by getAddress()).  The encodings for
 rmi and iiop are described in the
 package documentation for javax.management.remote.rmi.
The behavior when the URL path is neither empty nor a JNDI
 directory URL, or when the protocol is neither rmi
 nor iiop, is implementation defined, and may
 include throwing MalformedURLException when the
 connector server is created or when it is started.

Throws:
IllegalStateException - if the connector server has
 not been attached to an MBean server.
IOException - if the connector server cannot be
 started, or in the case of the iiop protocol, that
 RMI/IIOP is not supported.


"
RMIConnectorServer,stop(),void,"Deactivates the connector server, that is, stops listening for client connections.","

stop
public void stop()
          throws IOException
Deactivates the connector server, that is, stops listening for
 client connections.  Calling this method will also close all
 client connections that were made by this server.  After this
 method returns, whether normally or with an exception, the
 connector server will not create any new client
 connections.
Once a connector server has been stopped, it cannot be started
 again.
Calling this method when the connector server has already
 been stopped has no effect.  Calling this method when the
 connector server has not yet been started will disable the
 connector server object permanently.
If closing a client connection produces an exception, that
 exception is not thrown from this method.  A JMXConnectionNotification is emitted from this MBean with the
 connection ID of the connection that could not be closed.
Closing a connector server is a potentially slow operation.
 For example, if a client machine with an open connection has
 crashed, the close operation might have to wait for a network
 protocol timeout.  Callers that do not want to block in a close
 operation should do it in a separate thread.
This method calls the method close on the connector server's RMIServerImpl
 object.
If the RMIServerImpl was bound to a JNDI
 directory by the start method, it is unbound
 from the directory by this method.

Throws:
IOException - if the server cannot be closed cleanly,
 or if the RMIServerImpl cannot be unbound from the
 directory.  When this exception is thrown, the server has
 already attempted to close all client connections, if
 appropriate; to call RMIServerImpl.close(); and to
 unbind the RMIServerImpl from its directory, if
 appropriate.  All client connections are closed except possibly
 those that generated exceptions when the server attempted to
 close them.


"
RMIConnectorServer,"toJMXConnector(Map<String,?> env)",JMXConnector,Returns a client stub for this connector server.,"

toJMXConnector
public JMXConnector toJMXConnector(Map<String,?> env)
                            throws IOException
Returns a client stub for this connector server.  A client
 stub is a serializable object whose connect method can be used to make
 one new connection to this connector server.

Specified by:
toJMXConnector in interface JMXConnectorServerMBean
Overrides:
toJMXConnector in class JMXConnectorServer
Parameters:
env - client connection parameters of the same sort that
 could be provided to JMXConnector.connect(Map).  Can be null, which is equivalent
 to an empty map.
Returns:
a client stub that can be used to make a new connection
 to this connector server.
Throws:
UnsupportedOperationException - if this connector
 server does not support the generation of client stubs.
IllegalStateException - if the JMXConnectorServer is
 not started (see isActive()).
IOException - if a communications problem means that a
 stub cannot be created.


"
RMIIIOPServerImpl,closeClient(RMIConnection client),protected void,Closes a client connection made by makeClient.,"

closeClient
protected void closeClient(RMIConnection client)
                    throws IOException
Description copied from class: RMIServerImpl
Closes a client connection made by makeClient.

Specified by:
closeClient in class RMIServerImpl
Parameters:
client - a connection previously returned by
 makeClient on which the closeClient
 method has not previously been called.  The behavior is
 unspecified if these conditions are violated, including the
 case where client is null.
Throws:
IOException - if the client connection cannot be
 closed.


"
RMIIIOPServerImpl,closeServer(),protected void,Called by RMIServerImpl.close() to close the connector server by unexporting this object.,"

closeServer
protected void closeServer()
                    throws IOException
Called by RMIServerImpl.close() to close the connector server by
 unexporting this object.  After returning from this method, the
 connector server must not accept any new connections.

Specified by:
closeServer in class RMIServerImpl
Throws:
IOException - if the attempt to close the connector
 server failed.


"
RMIIIOPServerImpl,export(),protected void,Exports this RMI object.,"

export
protected void export()
               throws IOException
Description copied from class: RMIServerImpl
Exports this RMI object.

Specified by:
export in class RMIServerImpl
Throws:
IOException - if this RMI object cannot be exported.


"
RMIIIOPServerImpl,getProtocol(),protected String,Returns the protocol string for this object.,"

getProtocol
protected String getProtocol()
Description copied from class: RMIServerImpl
Returns the protocol string for this object.  The string is
 rmi for RMI/JRMP and iiop for RMI/IIOP.

Specified by:
getProtocol in class RMIServerImpl
Returns:
the protocol string for this object.


"
RMIIIOPServerImpl,"makeClient(String connectionId, Subject subject)",protected RMIConnection,Creates a new client connection as an RMI object exported through IIOP.,"

makeClient
protected RMIConnection makeClient(String connectionId,
                                   Subject subject)
                            throws IOException
Creates a new client connection as an RMI object exported
 through IIOP.

Specified by:
makeClient in class RMIServerImpl
Parameters:
connectionId - the ID of the new connection.  Every
 connection opened by this connector server will have a
 different ID.  The behavior is unspecified if this parameter is
 null.
subject - the authenticated subject.  Can be null.
Returns:
the newly-created RMIConnection.
Throws:
IOException - if the new client object cannot be
 created or exported.


"
RMIIIOPServerImpl,toStub(),Remote,Returns an IIOP stub.,"

toStub
public Remote toStub()
              throws IOException
Returns an IIOP stub.
 The stub might not yet be connected to the ORB. The stub will
 be serializable only if it is connected to the ORB.

Specified by:
toStub in class RMIServerImpl
Returns:
an IIOP stub.
Throws:
IOException - if the stub cannot be created - e.g the
            RMIIIOPServerImpl has not been exported yet.


"
RMIJRMPServerImpl,closeClient(RMIConnection client),protected void,Closes a client connection made by makeClient.,"

closeClient
protected void closeClient(RMIConnection client)
                    throws IOException
Description copied from class: RMIServerImpl
Closes a client connection made by makeClient.

Specified by:
closeClient in class RMIServerImpl
Parameters:
client - a connection previously returned by
 makeClient on which the closeClient
 method has not previously been called.  The behavior is
 unspecified if these conditions are violated, including the
 case where client is null.
Throws:
IOException - if the client connection cannot be
 closed.


"
RMIJRMPServerImpl,closeServer(),protected void,Called by RMIServerImpl.close() to close the connector server by unexporting this object.,"

closeServer
protected void closeServer()
                    throws IOException
Called by RMIServerImpl.close() to close the connector server by
 unexporting this object.  After returning from this method, the
 connector server must not accept any new connections.

Specified by:
closeServer in class RMIServerImpl
Throws:
IOException - if the attempt to close the connector
 server failed.


"
RMIJRMPServerImpl,export(),protected void,Exports this RMI object.,"

export
protected void export()
               throws IOException
Description copied from class: RMIServerImpl
Exports this RMI object.

Specified by:
export in class RMIServerImpl
Throws:
IOException - if this RMI object cannot be exported.


"
RMIJRMPServerImpl,getProtocol(),protected String,Returns the protocol string for this object.,"

getProtocol
protected String getProtocol()
Description copied from class: RMIServerImpl
Returns the protocol string for this object.  The string is
 rmi for RMI/JRMP and iiop for RMI/IIOP.

Specified by:
getProtocol in class RMIServerImpl
Returns:
the protocol string for this object.


"
RMIJRMPServerImpl,"makeClient(String connectionId, Subject subject)",protected RMIConnection,Creates a new client connection as an RMI object exported through JRMP.,"

makeClient
protected RMIConnection makeClient(String connectionId,
                                   Subject subject)
                            throws IOException
Creates a new client connection as an RMI object exported
 through JRMP. The port and socket factories for the new
 RMIConnection object are the ones supplied
 to the RMIJRMPServerImpl constructor.

Specified by:
makeClient in class RMIServerImpl
Parameters:
connectionId - the ID of the new connection. Every
 connection opened by this connector server will have a
 different id.  The behavior is unspecified if this parameter is
 null.
subject - the authenticated subject.  Can be null.
Returns:
the newly-created RMIConnection.
Throws:
IOException - if the new RMIConnection
 object cannot be created or exported.


"
RMIJRMPServerImpl,toStub(),Remote,Returns a serializable stub for this RMIServer object.,"

toStub
public Remote toStub()
              throws IOException
Returns a serializable stub for this RMIServer object.

Specified by:
toStub in class RMIServerImpl
Returns:
a serializable stub.
Throws:
IOException - if the stub cannot be obtained - e.g the
            RMIJRMPServerImpl has not been exported yet.


"
RMIServerImpl,clientClosed(RMIConnection client),protected void,Method called when a client connection created by makeClient is closed.,"

clientClosed
protected void clientClosed(RMIConnection client)
                     throws IOException
Method called when a client connection created by makeClient is closed.  A subclass that defines
 makeClient must arrange for this method to be
 called when the resultant object's close method is called.  This enables it to be removed from
 the RMIServerImpl's list of connections.  It is
 not an error for client not to be in that
 list.
After removing client from the list of
 connections, this method calls closeClient(client).

Parameters:
client - the client connection that has been closed.
Throws:
IOException - if closeClient(javax.management.remote.rmi.RMIConnection) throws this
 exception.
NullPointerException - if client is null.


"
RMIServerImpl,close(),void,Closes this connection server.,"

close
public void close()
           throws IOException
Closes this connection server.  This method first calls the
 closeServer() method so that no new client connections
 will be accepted.  Then, for each remaining RMIConnection object returned by makeClient, its close method is
 called.
The behavior when this method is called more than once is
 unspecified.
If closeServer() throws an
 IOException, the individual connections are
 nevertheless closed, and then the IOException is
 thrown from this method.
If closeServer() returns normally but one or more
 of the individual connections throws an
 IOException, then, after closing all the
 connections, one of those IOExceptions is thrown
 from this method.  If more than one connection throws an
 IOException, it is unspecified which one is thrown
 from this method.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Throws:
IOException - if closeServer() or one of the
 RMIConnection.close() calls threw
 IOException.


"
RMIServerImpl,closeClient(RMIConnection client),protected abstract void,Closes a client connection made by makeClient.,"

closeClient
protected abstract void closeClient(RMIConnection client)
                             throws IOException
Closes a client connection made by makeClient.

Parameters:
client - a connection previously returned by
 makeClient on which the closeClient
 method has not previously been called.  The behavior is
 unspecified if these conditions are violated, including the
 case where client is null.
Throws:
IOException - if the client connection cannot be
 closed.


"
RMIServerImpl,closeServer(),protected abstract void,Called by close() to close the connector server.,"

closeServer
protected abstract void closeServer()
                             throws IOException
Called by close() to close the connector server.
 After returning from this method, the connector server must
 not accept any new connections.

Throws:
IOException - if the attempt to close the connector
 server failed.


"
RMIServerImpl,export(),protected abstract void,Exports this RMI object.,"

export
protected abstract void export()
                        throws IOException
Exports this RMI object.

Throws:
IOException - if this RMI object cannot be exported.


"
RMIServerImpl,getDefaultClassLoader(),ClassLoader,Gets the default ClassLoader used by this connector server.,"

getDefaultClassLoader
public ClassLoader getDefaultClassLoader()
Gets the default ClassLoader used by this connector
 server.

Returns:
the default ClassLoader used by this
 connector server.
See Also:
setDefaultClassLoader(java.lang.ClassLoader)


"
RMIServerImpl,getMBeanServer(),MBeanServer,The MBeanServer to which this connector server is attached.,"

getMBeanServer
public MBeanServer getMBeanServer()
The MBeanServer to which this connector server
 is attached.  This is the last value passed to setMBeanServer(javax.management.MBeanServer) on this object, or null if that method has
 never been called.

Returns:
the MBeanServer to which this connector
 is attached.
See Also:
setMBeanServer(javax.management.MBeanServer)


"
RMIServerImpl,getProtocol(),protected abstract String,Returns the protocol string for this object.,"

getProtocol
protected abstract String getProtocol()
Returns the protocol string for this object.  The string is
 rmi for RMI/JRMP and iiop for RMI/IIOP.

Returns:
the protocol string for this object.


"
RMIServerImpl,getVersion(),String,The version of the RMI Connector Protocol understood by this connector server.,"

getVersion
public String getVersion()
Description copied from interface: RMIServer
The version of the RMI Connector Protocol understood by this
 connector server.  This is a string with the following format:

 protocol-version implementation-name
 
The protocol-version is a series of
 two or more non-negative integers separated by periods
 (.).  An implementation of the version described
 by this documentation must use the string 1.0
 here.
After the protocol version there must be a space, followed
 by the implementation name.  The format of the implementation
 name is unspecified.  It is recommended that it include an
 implementation version number.  An implementation can use an
 empty string as its implementation name, for example for
 security reasons.

Specified by:
getVersion in interface RMIServer
Returns:
a string with the format described here.


"
RMIServerImpl,"makeClient(String connectionId, Subject subject)",protected abstract RMIConnection,Creates a new client connection.,"

makeClient
protected abstract RMIConnection makeClient(String connectionId,
                                            Subject subject)
                                     throws IOException
Creates a new client connection.  This method is called by
 the public method newClient(Object).

Parameters:
connectionId - the ID of the new connection.  Every
 connection opened by this connector server will have a
 different ID.  The behavior is unspecified if this parameter is
 null.
subject - the authenticated subject.  Can be null.
Returns:
the newly-created RMIConnection.
Throws:
IOException - if the new client object cannot be
 created or exported.


"
RMIServerImpl,newClient(Object credentials),RMIConnection,Creates a new client connection.,"

newClient
public RMIConnection newClient(Object credentials)
                        throws IOException
Creates a new client connection.  This method calls makeClient and adds the returned client connection
 object to an internal list.  When this
 RMIServerImpl is shut down via its close() method, the close()
 method of each object remaining in the list is called.
The fact that a client connection object is in this internal
 list does not prevent it from being garbage collected.

Specified by:
newClient in interface RMIServer
Parameters:
credentials - this object specifies the user-defined
 credentials to be passed in to the server in order to
 authenticate the caller before creating the
 RMIConnection.  Can be null.
Returns:
the newly-created RMIConnection.  This is
 usually the object created by makeClient, though
 an implementation may choose to wrap that object in another
 object implementing RMIConnection.
Throws:
IOException - if the new client object cannot be
 created or exported.
SecurityException - if the given credentials do not allow
 the server to authenticate the user successfully.
IllegalStateException - if getMBeanServer()
 is null.


"
RMIServerImpl,setDefaultClassLoader(ClassLoader cl),void,Sets the default ClassLoader for this connector server.,"

setDefaultClassLoader
public void setDefaultClassLoader(ClassLoader cl)
Sets the default ClassLoader for this connector
 server. New client connections will use this classloader.
 Existing client connections are unaffected.

Parameters:
cl - the new ClassLoader to be used by this
 connector server.
See Also:
getDefaultClassLoader()


"
RMIServerImpl,setMBeanServer(MBeanServer mbs),void,Sets the MBeanServer to which this connector server is attached.,"

setMBeanServer
public void setMBeanServer(MBeanServer mbs)
Sets the MBeanServer to which this connector
 server is attached. New client connections will interact
 with this MBeanServer. Existing client connections are
 unaffected.

Parameters:
mbs - the new MBeanServer.  Can be null, but
 new client connections will be refused as long as it is.
See Also:
getMBeanServer()


"
RMIServerImpl,toStub(),abstract Remote,Returns a remotable stub for this server object.,"

toStub
public abstract Remote toStub()
                       throws IOException
Returns a remotable stub for this server object.

Returns:
a remotable stub.
Throws:
IOException - if the stub cannot be obtained - e.g the
            RMIServerImpl has not been exported yet.


"
RMIServerImpl_Stub,getVersion(),String,The version of the RMI Connector Protocol understood by this connector server.,"

getVersion
public String getVersion()
                  throws RemoteException
Description copied from interface: RMIServer
The version of the RMI Connector Protocol understood by this
 connector server.  This is a string with the following format:

 protocol-version implementation-name
 
The protocol-version is a series of
 two or more non-negative integers separated by periods
 (.).  An implementation of the version described
 by this documentation must use the string 1.0
 here.
After the protocol version there must be a space, followed
 by the implementation name.  The format of the implementation
 name is unspecified.  It is recommended that it include an
 implementation version number.  An implementation can use an
 empty string as its implementation name, for example for
 security reasons.

Specified by:
getVersion in interface RMIServer
Returns:
a string with the format described here.
Throws:
RemoteException - if there is a communication
 exception during the remote method call.


"
RMIServerImpl_Stub,newClient(Object $param_Object_1),RMIConnection,Makes a new connection through this RMI connector.,"

newClient
public RMIConnection newClient(Object $param_Object_1)
                        throws IOException
Description copied from interface: RMIServer
Makes a new connection through this RMI connector.  Each
 remote client calls this method to obtain a new RMI object
 representing its connection.

Specified by:
newClient in interface RMIServer
Parameters:
$param_Object_1 - this object specifies the user-defined credentials
 to be passed in to the server in order to authenticate the user before
 creating the RMIConnection.  Can be null.
Returns:
the newly-created connection object.
Throws:
IOException - if the new client object cannot be
 created or exported, or if there is a communication exception
 during the remote method call.


"
