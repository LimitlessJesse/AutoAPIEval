Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,IIOImage,1,"IIOImage(RenderedImage image, IIOParam[] params)",False,,NULL
0,IIOImage,2,RenderedImage getRenderedImage(),True,"Returns the currently set RenderedImage, or null if only a Raster is available.","

getRenderedImage
public RenderedImage getRenderedImage()
Returns the currently set RenderedImage, or
 null if only a Raster is available.

Returns:
a RenderedImage, or null.
See Also:
setRenderedImage(java.awt.image.RenderedImage)


"
0,IIOImage,3,IIOParam[] getParams(),False,,NULL
0,IIOImage,4,void setRenderedImage(RenderedImage image),True,Sets the current RenderedImage.,"

setRenderedImage
public void setRenderedImage(RenderedImage image)
Sets the current RenderedImage.  The value is
 stored by reference.  Any existing Raster is
 discarded.

Parameters:
image - a RenderedImage.
Throws:
IllegalArgumentException - if image is
 null.
See Also:
getRenderedImage()


"
0,IIOImage,5,void setParams(IIOParam[] params),False,,NULL
1,IIOParam,1,boolean canWriteTiles(),False,,NULL
1,IIOParam,2,boolean isTileMode(),False,,NULL
1,IIOParam,3,boolean isTiling(),False,,NULL
1,IIOParam,4,boolean isTilingSupported(),False,,NULL
1,IIOParam,5,"boolean isTilingSupported(int minTileWidth, int minTileHeight)",False,,NULL
2,ImageIO,1,BufferedImage read(InputStream in) throws IOException,True,Returns a BufferedImage as the result of decoding a supplied InputStream with an ImageReader chosen automatically from among those currently registered.,"

read
public static BufferedImage read(InputStream input)
                          throws IOException
Returns a BufferedImage as the result of decoding
 a supplied InputStream with an ImageReader
 chosen automatically from among those currently registered.
 The InputStream is wrapped in an
 ImageInputStream.  If no registered
 ImageReader claims to be able to read the
 resulting stream, null is returned.

  The current cache settings from getUseCacheand
 getCacheDirectory will be used to control caching in the
 ImageInputStream that is created.

  This method does not attempt to locate
 ImageReaders that can read directly from an
 InputStream; that may be accomplished using
 IIORegistry and ImageReaderSpi.

  This method does not close the provided
 InputStream after the read operation has completed;
 it is the responsibility of the caller to close the stream, if desired.

Parameters:
input - an InputStream to read from.
Returns:
a BufferedImage containing the decoded
 contents of the input, or null.
Throws:
IllegalArgumentException - if input is
 null.
IOException - if an error occurs during reading.


"
2,ImageIO,2,"void write(RenderedImage im, String formatName, OutputStream out) throws IOException",False,,NULL
2,ImageIO,3,Iterator<ImageReader> getImageReaders(MediaReader paramMediaReader),False,,NULL
2,ImageIO,4,Iterator<ImageWriter> getImageWriters(MediaWriter paramMediaWriter),False,,NULL
2,ImageIO,5,ImageReader getImageReader(MediaReader paramMediaReader),False,,NULL
3,ImageReader,1,ImageReadParam getDefaultReadParam(),True,Returns a default ImageReadParam object appropriate for this format.,"

getDefaultReadParam
public ImageReadParam getDefaultReadParam()
Returns a default ImageReadParam object
 appropriate for this format.  All subclasses should define a
 set of default values for all parameters and return them with
 this call.  This method may be called before the input source
 is set.

  The default implementation constructs and returns a new
 ImageReadParam object that does not allow source
 scaling (i.e., it returns new
 ImageReadParam().

Returns:
an ImageReadParam object which may be used
 to control the decoding process using a set of default settings.


"
3,ImageReader,2,int getWidth(int imageIndex),True,Returns the width in pixels of the given image within the input source.,"

getWidth
public abstract int getWidth(int imageIndex)
                      throws IOException
Returns the width in pixels of the given image within the input
 source.

  If the image can be rendered to a user-specified size, then
 this method returns the default width.

Parameters:
imageIndex - the index of the image to be queried.
Returns:
the width of the image, as an int.
Throws:
IllegalStateException - if the input source has not been set.
IndexOutOfBoundsException - if the supplied index is
 out of bounds.
IOException - if an error occurs reading the width
 information from the input source.


"
3,ImageReader,3,int getHeight(int imageIndex),True,Returns the height in pixels of the given image within the input source.,"

getHeight
public abstract int getHeight(int imageIndex)
                       throws IOException
Returns the height in pixels of the given image within the
 input source.

  If the image can be rendered to a user-specified size, then
 this method returns the default height.

Parameters:
imageIndex - the index of the image to be queried.
Returns:
the height of the image, as an int.
Throws:
IllegalStateException - if the input source has not been set.
IndexOutOfBoundsException - if the supplied index is
 out of bounds.
IOException - if an error occurs reading the height
 information from the input source.


"
3,ImageReader,4,int getMinTileWidth(),False,,NULL
3,ImageReader,5,int getMinTileHeight(),False,,NULL
3,ImageReader,6,int getNumTilesX(),False,,NULL
3,ImageReader,7,int getNumTilesY(),False,,NULL
3,ImageReader,8,int getNumTiles(),False,,NULL
3,ImageReader,9,int getTileWidth(int tileIndex),True,Returns the width of a tile in the given image.,"

getTileWidth
public int getTileWidth(int imageIndex)
                 throws IOException
Returns the width of a tile in the given image.

  The default implementation simply returns
 getWidth(imageIndex), which is correct for
 non-tiled images.  Readers that support tiling should override
 this method.

Parameters:
imageIndex - the index of the image to be queried.
Returns:
the width of a tile.
Throws:
IllegalStateException - if the input source has not been set.
IndexOutOfBoundsException - if the supplied index is
 out of bounds.
IOException - if an error occurs during reading.


"
3,ImageReader,10,int getTileHeight(int tileIndex),True,Returns the height of a tile in the given image.,"

getTileHeight
public int getTileHeight(int imageIndex)
                  throws IOException
Returns the height of a tile in the given image.

  The default implementation simply returns
 getHeight(imageIndex), which is correct for
 non-tiled images.  Readers that support tiling should override
 this method.

Parameters:
imageIndex - the index of the image to be queried.
Returns:
the height of a tile.
Throws:
IllegalStateException - if the input source has not been set.
IndexOutOfBoundsException - if the supplied index is
 out of bounds.
IOException - if an error occurs during reading.


"
3,ImageReader,11,int getTileGridXOffset(int tileIndex),True,"Returns the X coordinate of the upper-left corner of tile (0, 0) in the given image.","

getTileGridXOffset
public int getTileGridXOffset(int imageIndex)
                       throws IOException
Returns the X coordinate of the upper-left corner of tile (0,
 0) in the given image.

  A reader for which the tile grid X offset always has the
 same value (usually 0), may return the value without accessing
 any image data.  In such cases, it is not necessary to throw an
 exception even if no input source has been set or the image
 index is out of bounds.

  The default implementation simply returns 0, which is
 correct for non-tiled images and tiled images in most formats.
 Readers that support tiling with non-(0, 0) offsets should
 override this method.

Parameters:
imageIndex - the index of the image to be queried.
Returns:
the X offset of the tile grid.
Throws:
IllegalStateException - if an input source is required
 to determine the return value, but none has been set.
IndexOutOfBoundsException - if an image must be
 accessed to determine the return value, but the supplied index
 is out of bounds.
IOException - if an error occurs during reading.


"
3,ImageReader,12,int getTileGridYOffset(int tileIndex),True,"Returns the Y coordinate of the upper-left corner of tile (0, 0) in the given image.","

getTileGridYOffset
public int getTileGridYOffset(int imageIndex)
                       throws IOException
Returns the Y coordinate of the upper-left corner of tile (0,
 0) in the given image.

  A reader for which the tile grid Y offset always has the
 same value (usually 0), may return the value without accessing
 any image data.  In such cases, it is not necessary to throw an
 exception even if no input source has been set or the image
 index is out of bounds.

  The default implementation simply returns 0, which is
 correct for non-tiled images and tiled images in most formats.
 Readers that support tiling with non-(0, 0) offsets should
 override this method.

Parameters:
imageIndex - the index of the image to be queried.
Returns:
the Y offset of the tile grid.
Throws:
IllegalStateException - if an input source is required
 to determine the return value, but none has been set.
IndexOutOfBoundsException - if an image must be
 accessed to determine the return value, but the supplied index
 is out of bounds.
IOException - if an error occurs during reading.


"
3,ImageReader,13,int getTileGridOffset(int tileIndex),False,,NULL
3,ImageReader,14,int getTileGridWidth(),False,,NULL
3,ImageReader,15,int getTileGridHeight(),False,,NULL
3,ImageReader,16,int getTileGridOffset(),False,,NULL
3,ImageReader,17,int getNumImages(boolean allowSearch),True,"Returns the number of images, not including thumbnails, available from the current input source.","

getNumImages
public abstract int getNumImages(boolean allowSearch)
                          throws IOException
Returns the number of images, not including thumbnails, available
 from the current input source.

  Note that some image formats (such as animated GIF) do not
 specify how many images are present in the stream.  Thus
 determining the number of images will require the entire stream
 to be scanned and may require memory for buffering.  If images
 are to be processed in order, it may be more efficient to
 simply call read with increasing indices until an
 IndexOutOfBoundsException is thrown to indicate
 that no more images are available.  The
 allowSearch parameter may be set to
 false to indicate that an exhaustive search is not
 desired; the return value will be -1 to indicate
 that a search is necessary.  If the input has been specified
 with seekForwardOnly set to true,
 this method throws an IllegalStateException if
 allowSearch is set to true.

Parameters:
allowSearch - if true, the true number of
 images will be returned even if a search is required.  If
 false, the reader may return -1
 without performing the search.
Returns:
the number of images, as an int, or
 -1 if allowSearch is
 false and a search would be required.
Throws:
IllegalStateException - if the input source has not been set,
 or if the input has been specified with seekForwardOnly
 set to true.
IOException - if an error occurs reading the
 information from the input source.
See Also:
setInput(java.lang.Object, boolean, boolean)


"
3,ImageReader,18,"int getNumImages(boolean allowSearch, ImageReadParam param)",False,,NULL
3,ImageReader,19,int getNumThumbnails(),False,,NULL
3,ImageReader,20,int getNumResolutionLevels(),False,,NULL
3,ImageReader,21,int getNumColorModels(),False,,NULL
3,ImageReader,22,int getNumImageTypes(),False,,NULL
3,ImageReader,23,int getNumImageInfs(),False,,NULL
3,ImageReader,24,int getNumSubimageTypes(int imageIndex),False,,NULL
3,ImageReader,25,int getNumSubimages(int imageIndex),False,,NULL
3,ImageReader,26,int getNumSubimageInfos(int imageIndex),False,,NULL
3,ImageReader,27,"int getNumSubimageTiles(int imageIndex, int subimageIndex)",False,,NULL
3,ImageReader,28,"int getNumSubimageTileInfos(int imageIndex, int subimageIndex)",False,,NULL
3,ImageReader,29,"int getNumSubimageTileGridInfos(int imageIndex, int subimageIndex)",False,,NULL
3,ImageReader,30,"int getNumSubimageTileWidths(int imageIndex, int subimageIndex)",False,,NULL
3,ImageReader,31,"int getNumSubimageTileHeights(int imageIndex, int subimageIndex)",False,,NULL
3,ImageReader,32,"int getNumSubimageTileOffsets(int imageIndex, int subimageIndex)",False,,NULL
3,ImageReader,33,"int getNumSubimageTileGridWidths(int imageIndex, int subimageIndex)",False,,NULL
3,ImageReader,34,"int getNumSubimageTileGridHeights(int imageIndex, int subimageIndex)",False,,NULL
3,ImageReader,35,"int getNumSubimageTileGridOffsets(int imageIndex, int subimageIndex)",False,,NULL
3,ImageReader,36,"int getNumSubimageTileWidths(int imageIndex, int subimageIndex, int tileIndex)",False,,NULL
3,ImageReader,37,"int getNumSubimageTileHeights(int imageIndex, int subimageIndex, int tileIndex)",False,,NULL
3,ImageReader,38,"int getNumSubimageTileOffsets(int imageIndex, int subimageIndex, int tileIndex)",False,,NULL
3,ImageReader,39,"int getNumSubimageTileGridWidths(int imageIndex, int subimageIndex, int tileIndex)",False,,NULL
3,ImageReader,40,"int getNumSubimageTileGridHeights(int imageIndex, int subimageIndex, int tileIndex)",False,,NULL
3,ImageReader,41,"int getNumSubimageTileGridOffsets(int imageIndex, int subimageIndex, int tileIndex)",False,,NULL
3,ImageReader,42,"int getNumSubimageTileWidths(int imageIndex, int subimageIndex, int tileIndex, int resolutionLevel)",False,,NULL
3,ImageReader,43,"int getNumSubimageTileHeights(int imageIndex, int subimageIndex, int tileIndex, int resolutionLevel)",False,,NULL
3,ImageReader,44,"int getNumSubimageTileOffsets(int imageIndex, int subimageIndex, int tileIndex, int resolutionLevel)",False,,NULL
3,ImageReader,45,"int getNumSubimageTileGridWidths(int imageIndex, int subimageIndex, int tileIndex, int resolutionLevel)",False,,NULL
3,ImageReader,46,"int getNumSubimageTileGridHeights(int imageIndex, int subimageIndex, int tileIndex, int resolutionLevel)",False,,NULL
3,ImageReader,47,"int getNumSubimageTileGridOffsets(int imageIndex, int subimageIndex, int tileIndex, int resolutionLevel)",False,,NULL
3,ImageReader,48,"int getNumSubimageTileWidths(int imageIndex, int subimageIndex, int tileIndex, int resolutionLevel, int colorModelIndex)",False,,NULL
4,ImageReadParam,1,void setSource(RenderedImage input),False,,NULL
4,ImageReadParam,2,void setDestination(RenderedImage output),False,,NULL
4,ImageReadParam,3,void setSourceRegion(Rectangle rectangle),False,,NULL
4,ImageReadParam,4,void setDestinationOffset(Point point),False,,NULL
4,ImageReadParam,5,void setCropRectangle(Rectangle rectangle),False,,NULL
4,ImageReadParam,6,void setBannerData(byte[] data),False,,NULL
4,ImageReadParam,7,void setInput(ImageInputStream stream),False,,NULL
4,ImageReadParam,8,void setOutput(ImageOutputStream stream),False,,NULL
4,ImageReadParam,9,void setProgressiveMode(ProgressiveMode mode),False,,NULL
4,ImageReadParam,10,void setDestinationSize(Dimension size),False,,NULL
4,ImageReadParam,11,"void setSourceSubsampling(int x, int y, int width, int height)",False,,NULL
4,ImageReadParam,12,void setSourceColorSpace(ColorSpace colorSpace),False,,NULL
4,ImageReadParam,13,void setDestinationColorSpace(ColorSpace colorSpace),False,,NULL
4,ImageReadParam,14,void setSourceResolutions(float[] resolutions),False,,NULL
4,ImageReadParam,15,void setDestinationResolutions(float[] resolutions),False,,NULL
4,ImageReadParam,16,void setSourceContrast(float contrast),False,,NULL
4,ImageReadParam,17,void setDestinationContrast(float contrast),False,,NULL
4,ImageReadParam,18,void setSourcePhase(float phase),False,,NULL
4,ImageReadParam,19,void setDestinationPhase(float phase),False,,NULL
4,ImageReadParam,20,void setSourceIncrement(int increment),False,,NULL
4,ImageReadParam,21,void setDestinationIncrement(int increment),False,,NULL
4,ImageReadParam,22,void setSourceAlpha(int alpha),False,,NULL
4,ImageReadParam,23,void setDestinationAlpha(int alpha),False,,NULL
4,ImageReadParam,24,void setSourceAlphaIncrement(int increment),False,,NULL
4,ImageReadParam,25,void setDestinationAlphaIncrement(int increment),False,,NULL
4,ImageReadParam,26,void setSourceAlphaPhase(int phase),False,,NULL
4,ImageReadParam,27,void setDestinationAlphaPhase(int phase),False,,NULL
4,ImageReadParam,28,void setSourceAlphaContrast(float contrast),False,,NULL
4,ImageReadParam,29,void setDestinationAlphaContrast(float contrast),False,,NULL
4,ImageReadParam,30,void setSourceAlphaBannerData(byte[] data),False,,NULL
4,ImageReadParam,31,void setDestinationAlphaBannerData(byte[] data),False,,NULL
4,ImageReadParam,32,"void setSourceAlphaSubsampling(int x, int y, int width, int height)",False,,NULL
4,ImageReadParam,33,"void setDestinationAlphaSubsampling(int x, int y, int width, int height)",False,,NULL
4,ImageReadParam,34,void setSourceAlphaColorSpace(ColorSpace colorSpace),False,,NULL
4,ImageReadParam,35,void setDestinationAlphaColorSpace(ColorSpace colorSpace),False,,NULL
4,ImageReadParam,36,void setSourceAlphaResolutions(float[] resolutions),False,,NULL
4,ImageReadParam,37,void setDestinationAlphaResolutions(float[] resolutions),False,,NULL
4,ImageReadParam,38,void setSourceAlphaContrast(float contrast),False,,NULL
4,ImageReadParam,39,void setDestinationAlphaContrast(float contrast),False,,NULL
4,ImageReadParam,40,void setSourceAlphaPhase(float phase),False,,NULL
4,ImageReadParam,41,void setDestinationAlphaPhase(float phase),False,,NULL
4,ImageReadParam,42,void setSourceAlphaIncrement(float increment),False,,NULL
4,ImageReadParam,43,void setDestinationAlphaIncrement(float increment),False,,NULL
4,ImageReadParam,44,void setSourceAlphaBannerData(byte[] data),False,,NULL
4,ImageReadParam,45,void setDestinationAlphaBannerData(byte[] data),False,,NULL
4,ImageReadParam,46,"void setSourceAlphaSubsampling(int x, int y, int width, int height)",False,,NULL
4,ImageReadParam,47,"void setDestinationAlphaSubsampling(int x, int y, int width, int height)",False,,NULL
4,ImageReadParam,48,void setSourceAlphaColorSpace(ColorSpace colorSpace),False,,NULL
4,ImageReadParam,49,void setDestinationAlphaColorSpace(ColorSpace colorSpace),False,,NULL
4,ImageReadParam,50,void setSourceAlphaResolutions(float[] resolutions),False,,NULL
4,ImageReadParam,51,void setDestinationAlphaResolutions(float[] resolutions),False,,NULL
4,ImageReadParam,52,void setSourceAlphaContrast(float contrast),False,,NULL
4,ImageReadParam,53,void setDestinationAlphaContrast(float contrast),False,,NULL
4,ImageReadParam,54,void setSourceAlphaPhase(float phase),False,,NULL
5,ImageTypeSpecifier,1,ImageTypeSpecifier getImageTypeSpecifier(),False,,NULL
5,ImageTypeSpecifier,2,boolean isComplex(),False,,NULL
5,ImageTypeSpecifier,3,boolean isIndexed(),False,,NULL
5,ImageTypeSpecifier,4,boolean isRegistered(),False,,NULL
5,ImageTypeSpecifier,5,boolean isRegistered(String vendorName),False,,NULL
5,ImageTypeSpecifier,6,"boolean isRegistered(String vendorName, String version)",False,,NULL
5,ImageTypeSpecifier,7,"boolean isRegistered(String vendorName, String version, String rendererName)",False,,NULL
5,ImageTypeSpecifier,8,"boolean isRegistered(String vendorName, String version, String rendererName, String platformName)",False,,NULL
5,ImageTypeSpecifier,9,"boolean isRegistered(String vendorName, String version, String rendererName, String platformName, String platformVersion)",False,,NULL
5,ImageTypeSpecifier,10,"boolean isRegistered(String vendorName, String version, String rendererName, String platformName, String platformVersion, String platformClass)",False,,NULL
5,ImageTypeSpecifier,11,"boolean isRegistered(String vendorName, String version, String rendererName, String platformName, String platformVersion, String platformClass, String platformClassVersion)",False,,NULL
5,ImageTypeSpecifier,12,"boolean isRegistered(String vendorName, String version, String rendererName, String platformName, String platformVersion, String platformClass, String platformClassVersion, String platformClassVersion)",False,,NULL
5,ImageTypeSpecifier,13,"boolean isRegistered(String vendorName, String version, String rendererName, String platformName, String platformVersion, String platformClass, String platformClassVersion, String platformClassVersion, String platformClassVersion)",False,,NULL
6,ImageWriteParam,1,void setCompressionMode(int mode),True,"Specifies whether compression is to be performed, and if so how compression parameters are to be determined.","

setCompressionMode
public void setCompressionMode(int mode)
Specifies whether compression is to be performed, and if so how
 compression parameters are to be determined.  The mode
 argument must be one of the four modes, interpreted as follows:

 
MODE_DISABLED - If the mode is set to
   MODE_DISABLED, methods that query or modify the
   compression type or parameters will throw an
   IllegalStateException (if compression is
   normally supported by the plug-in). Some writers, such as JPEG,
   do not normally offer uncompressed output. In this case, attempting
   to set the mode to MODE_DISABLED will throw an
   UnsupportedOperationException and the mode will not be
   changed.

   MODE_EXPLICIT - Compress using the
   compression type and quality settings specified in this
   ImageWriteParam.  Any previously set compression
   parameters are discarded.

   MODE_COPY_FROM_METADATA - Use whatever
   compression parameters are specified in metadata objects
   passed in to the writer.

   MODE_DEFAULT - Use default compression
   parameters.
 
 The default is MODE_COPY_FROM_METADATA.

Parameters:
mode - The mode for setting compression in the output
 stream.
Throws:
UnsupportedOperationException - if the writer does not
 support compression, or does not support the requested mode.
IllegalArgumentException - if mode is not
 one of the modes listed above.
See Also:
getCompressionMode()


"
6,ImageWriteParam,2,void setCompressionQuality(float quality),True,Sets the compression quality to a value between 0 and 1.,"

setCompressionQuality
public void setCompressionQuality(float quality)
Sets the compression quality to a value between 0
 and 1.  Only a single compression quality setting
 is supported by default; writers can provide extended versions
 of ImageWriteParam that offer more control.  For
 lossy compression schemes, the compression quality should
 control the tradeoff between file size and image quality (for
 example, by choosing quantization tables when writing JPEG
 images).  For lossless schemes, the compression quality may be
 used to control the tradeoff between file size and time taken
 to perform the compression (for example, by optimizing row
 filters and setting the ZLIB compression level when writing
 PNG images).

  A compression quality setting of 0.0 is most generically
 interpreted as ""high compression is important,"" while a setting of
 1.0 is most generically interpreted as ""high image quality is
 important.""

  If there are multiple compression types but none has been
 set, an IllegalStateException is thrown.

  The default implementation checks that compression is
 supported, and that the compression mode is
 MODE_EXPLICIT.  If so, if
 getCompressionTypes() returns null or
 compressionType is non-null it sets
 the compressionQuality instance variable.

Parameters:
quality - a float between 0and
 1 indicating the desired quality level.
Throws:
UnsupportedOperationException - if the writer does not
 support compression.
IllegalStateException - if the compression mode is not
 MODE_EXPLICIT.
IllegalStateException - if the set of legal
 compression types is non-null and the current
 compression type is null.
IllegalArgumentException - if quality is
 not between 0and 1, inclusive.
See Also:
getCompressionQuality()


"
6,ImageWriteParam,3,void setProgressiveMode(int mode),True,Specifies that the writer is to write the image out in a progressive mode such that the stream will contain a series of scans of increasing quality.,"

setProgressiveMode
public void setProgressiveMode(int mode)
Specifies that the writer is to write the image out in a
 progressive mode such that the stream will contain a series of
 scans of increasing quality.  If progressive encoding is not
 supported, an UnsupportedOperationException will
 be thrown.

   The mode argument determines how
 the progression parameters are chosen, and must be either
 MODE_DISABLED,
 MODE_COPY_FROM_METADATA, or
 MODE_DEFAULT.  Otherwise an
 IllegalArgumentException is thrown.

  The modes are interpreted as follows:

 
MODE_DISABLED - No progression.  Use this to
   turn off progression.

   MODE_COPY_FROM_METADATA - The output image
   will use whatever progression parameters are found in the
   metadata objects passed into the writer.

   MODE_DEFAULT - The image will be written
   progressively, with parameters chosen by the writer.
 
 The default is MODE_COPY_FROM_METADATA.

Parameters:
mode - The mode for setting progression in the output
 stream.
Throws:
UnsupportedOperationException - if the writer does not
 support progressive encoding.
IllegalArgumentException - if mode is not
 one of the modes listed above.
See Also:
getProgressiveMode()


"
6,ImageWriteParam,4,void setRenderingIntent(int renderingIntent),False,,NULL
6,ImageWriteParam,5,void setDestination(ImageOutputStream out),False,,NULL
6,ImageWriteParam,6,void setProgressiveDCT(boolean progressiveDCT),False,,NULL
6,ImageWriteParam,7,void setXMPMetadata(String xmpMetadata),False,,NULL
6,ImageWriteParam,8,void setOutputFormatName(String formatName),False,,NULL
6,ImageWriteParam,9,void setTranscodingHints(Map hints),False,,NULL
6,ImageWriteParam,10,void setDestinationOffset(long offset),False,,NULL
6,ImageWriteParam,11,void setDestinationSize(Dimension size),False,,NULL
6,ImageWriteParam,12,"void setSourceSubsampling(int xSub, int ySub, int cSub)",False,,NULL
6,ImageWriteParam,13,void setSourceRegion(Rectangle rectangle),False,,NULL
6,ImageWriteParam,14,void setSourceYCbCr(boolean sourceYCbCr),False,,NULL
6,ImageWriteParam,15,void setProgressiveScan(boolean progressiveScan),False,,NULL
6,ImageWriteParam,16,void setDestinationOffset(long offset),False,,NULL
6,ImageWriteParam,17,void setDestinationSize(Dimension size),False,,NULL
6,ImageWriteParam,18,"void setSourceSubsampling(int xSub, int ySub, int cSub)",False,,NULL
6,ImageWriteParam,19,void setSourceRegion(Rectangle rectangle),False,,NULL
6,ImageWriteParam,20,void setSourceYCbCr(boolean sourceYCbCr),False,,NULL
6,ImageWriteParam,21,void setProgressiveScan(boolean progressiveScan),False,,NULL
6,ImageWriteParam,22,void setDestinationOffset(long offset),False,,NULL
6,ImageWriteParam,23,void setDestinationSize(Dimension size),False,,NULL
6,ImageWriteParam,24,"void setSourceSubsampling(int xSub, int ySub, int cSub)",False,,NULL
6,ImageWriteParam,25,void setSourceRegion(Rectangle rectangle),False,,NULL
6,ImageWriteParam,26,void setSourceYCbCr(boolean sourceYCbCr),False,,NULL
6,ImageWriteParam,27,void setProgressiveScan(boolean progressiveScan),False,,NULL
6,ImageWriteParam,28,void setDestinationOffset(long offset),False,,NULL
6,ImageWriteParam,29,void setDestinationSize(Dimension size),False,,NULL
6,ImageWriteParam,30,"void setSourceSubsampling(int xSub, int ySub, int cSub)",False,,NULL
6,ImageWriteParam,31,void setSourceRegion(Rectangle rectangle),False,,NULL
6,ImageWriteParam,32,void setSourceYCbCr(boolean sourceYCbCr),False,,NULL
6,ImageWriteParam,33,void setProgressiveScan(boolean progressiveScan),False,,NULL
6,ImageWriteParam,34,void setDestinationOffset(long offset),False,,NULL
6,ImageWriteParam,35,void setDestinationSize(Dimension size),False,,NULL
6,ImageWriteParam,36,"void setSourceSubsampling(int xSub, int ySub, int cSub)",False,,NULL
6,ImageWriteParam,37,void setSourceRegion(Rectangle rectangle),False,,NULL
6,ImageWriteParam,38,void setSourceYCbCr(boolean sourceYCbCr),False,,NULL
6,ImageWriteParam,39,void setProgressiveScan(boolean progressiveScan),False,,NULL
6,ImageWriteParam,40,void setDestinationOffset(long offset),False,,NULL
6,ImageWriteParam,41,void setDestinationSize(Dimension size),False,,NULL
6,ImageWriteParam,42,"void setSourceSubsampling(int xSub, int ySub, int cSub)",False,,NULL
6,ImageWriteParam,43,void setSourceRegion(Rectangle rectangle),False,,NULL
6,ImageWriteParam,44,void setSourceYCbCr(boolean sourceYCbCr),False,,NULL
6,ImageWriteParam,45,void setProgressiveScan(boolean progressiveScan),False,,NULL
6,ImageWriteParam,46,void setDestinationOffset(long offset),False,,NULL
6,ImageWriteParam,47,void setDestinationSize(Dimension size),False,,NULL
6,ImageWriteParam,48,"void setSourceSubsampling(int xSub, int ySub, int cSub)",False,,NULL
6,ImageWriteParam,49,void setSourceRegion(Rectangle rectangle),False,,NULL
6,ImageWriteParam,50,void setSourceYCbCr(boolean sourceYCbCr),False,,NULL
6,ImageWriteParam,51,void setProgressiveScan(boolean progressiveScan),False,,NULL
6,ImageWriteParam,52,void setDestinationOffset(long offset),False,,NULL
6,ImageWriteParam,53,void setDestinationSize(Dimension size),False,,NULL
6,ImageWriteParam,54,"void setSourceSubsampling(int xSub, int ySub, int cSub)",False,,NULL
6,ImageWriteParam,55,void setSourceRegion(Rectangle rectangle),False,,NULL
6,ImageWriteParam,56,void setSourceYCbCr(boolean sourceYCbCr),False,,NULL
6,ImageWriteParam,57,void setProgressiveScan(boolean progressiveScan),False,,NULL
6,ImageWriteParam,58,void setDestinationOffset(long offset),False,,NULL
6,ImageWriteParam,59,void setDestinationSize(Dimension size),False,,NULL
6,ImageWriteParam,60,"void setSourceSubsampling(int xSub, int ySub, int cSub)",False,,NULL
6,ImageWriteParam,61,void setSourceRegion(Rectangle rectangle),False,,NULL
6,ImageWriteParam,62,void setSourceYCbCr(boolean sourceYCbCr),False,,NULL
6,ImageWriteParam,63,void setProgressiveScan(boolean progressiveScan),False,,NULL
6,ImageWriteParam,64,void setDestinationOffset(long offset),False,,NULL
6,ImageWriteParam,65,void setDestinationSize(Dimension size),False,,NULL
6,ImageWriteParam,66,"void setSourceSubsampling(int xSub, int ySub, int cSub)",False,,NULL
6,ImageWriteParam,67,void setSourceRegion(Rectangle rectangle),False,,NULL
6,ImageWriteParam,68,void setSourceYCbCr(boolean sourceYCbCr),False,,NULL
6,ImageWriteParam,69,void setProgressiveScan(boolean progressiveScan),False,,NULL
7,ImageWriter,1,void setOutput(ImageOutputStream output),False,,NULL
7,ImageWriter,2,"void write(int imageIndex, ImageWriteParam param)",False,,NULL
7,ImageWriter,3,void writeAll(ImageWriteParam param),False,,NULL
7,ImageWriter,4,"void writeAll(int imageIndex, ImageWriteParam param)",False,,NULL
7,ImageWriter,5,"void writeAll(int imageIndex, int numImages, ImageWriteParam param)",False,,NULL
7,ImageWriter,6,"void writeAll(int imageIndex, int numImages, ImageWriteParam param, RenderedImage[] images)",False,,NULL
7,ImageWriter,7,"void writeAll(int imageIndex, int numImages, ImageWriteParam param, RenderedImage[] images, int[] imageIndexes)",False,,NULL
7,ImageWriter,8,"void writeAll(int imageIndex, int numImages, ImageWriteParam param, RenderedImage[] images, int[] imageIndexes, int[] imageOffsets)",False,,NULL
7,ImageWriter,9,"void writeAll(int imageIndex, int numImages, ImageWriteParam param, RenderedImage[] images, int[] imageIndexes, int[] imageOffsets, int[] imageLengths)",False,,NULL
7,ImageWriter,10,"void writeAll(int imageIndex, int numImages, ImageWriteParam param, RenderedImage[] images, int[] imageIndexes, int[] imageOffsets, int[] imageLengths, int[] imageOffsets2)",False,,NULL
7,ImageWriter,11,"void writeAll(int imageIndex, int numImages, ImageWriteParam param, RenderedImage[] images, int[] imageIndexes, int[] imageOffsets, int[] imageLengths, int[] imageOffsets2, int[] imageLengths2)",False,,NULL
7,ImageWriter,12,"void writeAll(int imageIndex, int numImages, ImageWriteParam param, RenderedImage[] images, int[] imageIndexes, int[] imageOffsets, int[] imageLengths, int[] imageOffsets2, int[] imageLengths2, int[] imageOffsets3)",False,,NULL
7,ImageWriter,13,"void writeAll(int imageIndex, int numImages, ImageWriteParam param, RenderedImage[] images, int[] imageIndexes, int[] imageOffsets, int[] imageLengths, int[] imageOffsets2, int[] imageLengths2, int[] imageOffsets3, int[] imageLengths3)",False,,NULL
7,ImageWriter,14,"void writeAll(int imageIndex, int numImages, ImageWriteParam param, RenderedImage[] images, int[] imageIndexes, int[] imageOffsets, int[] imageLengths, int[] imageOffsets2, int[] imageLengths2, int[] imageOffsets3, int[] imageLengths3, int[] imageOffsets4)",False,,NULL
7,ImageWriter,15,"void writeAll(int imageIndex, int numImages, ImageWriteParam param, RenderedImage[] images, int[] imageIndexes, int[] imageOffsets, int[] imageLengths, int[] imageOffsets2, int[] imageLengths2, int[] imageOffsets3, int[] imageLengths3, int[] imageOffsets4, int[] imageLengths4)",False,,NULL
