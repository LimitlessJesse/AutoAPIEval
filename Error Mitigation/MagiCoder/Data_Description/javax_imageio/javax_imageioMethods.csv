ClassName,Method,Return Type,Description,Full Description
IIOImage,getMetadata(),IIOMetadata,"Returns a reference to the current IIOMetadata object, or null is none is set.","

getMetadata
public IIOMetadata getMetadata()
Returns a reference to the current IIOMetadata
 object, or null is none is set.

Returns:
an IIOMetadata object, or null.
See Also:
setMetadata(javax.imageio.metadata.IIOMetadata)


"
IIOImage,getNumThumbnails(),int,Returns the number of thumbnails stored in this IIOImage.,"

getNumThumbnails
public int getNumThumbnails()
Returns the number of thumbnails stored in this
 IIOImage.

Returns:
the number of thumbnails, as an int.


"
IIOImage,getRaster(),Raster,"Returns the currently set Raster, or null if only a RenderedImage is available.","

getRaster
public Raster getRaster()
Returns the currently set Raster, or
 null if only a RenderedImage is
 available.

Returns:
a Raster, or null.
See Also:
setRaster(java.awt.image.Raster)


"
IIOImage,getRenderedImage(),RenderedImage,"Returns the currently set RenderedImage, or null if only a Raster is available.","

getRenderedImage
public RenderedImage getRenderedImage()
Returns the currently set RenderedImage, or
 null if only a Raster is available.

Returns:
a RenderedImage, or null.
See Also:
setRenderedImage(java.awt.image.RenderedImage)


"
IIOImage,getThumbnail(int index),BufferedImage,Returns a thumbnail associated with the main image.,"

getThumbnail
public BufferedImage getThumbnail(int index)
Returns a thumbnail associated with the main image.

Parameters:
index - the index of the desired thumbnail image.
Returns:
a thumbnail image, as a BufferedImage.
Throws:
IndexOutOfBoundsException - if the supplied index is
 negative or larger than the largest valid index.
ClassCastException - if a
 non-BufferedImage object is encountered in the
 list of thumbnails at the given index.
See Also:
getThumbnails(), 
setThumbnails(java.util.List<? extends java.awt.image.BufferedImage>)


"
IIOImage,getThumbnails(),List<? extends BufferedImage>,"Returns the current List of thumbnail BufferedImages, or null if none is set.","

getThumbnails
public List<? extends BufferedImage> getThumbnails()
Returns the current List of thumbnail
 BufferedImages, or null if none is
 set.  A live reference is returned.

Returns:
the current List of
 BufferedImage thumbnails, or null.
See Also:
getThumbnail(int), 
setThumbnails(java.util.List<? extends java.awt.image.BufferedImage>)


"
IIOImage,hasRaster(),boolean,Returns true if this IIOImage stores a Raster rather than a RenderedImage.,"

hasRaster
public boolean hasRaster()
Returns true if this IIOImage stores
 a Raster rather than a RenderedImage.

Returns:
true if a Raster is
 available.


"
IIOImage,setMetadata(IIOMetadata metadata),void,"Sets the IIOMetadata to a new object, or null.","

setMetadata
public void setMetadata(IIOMetadata metadata)
Sets the IIOMetadata to a new object, or
 null.

Parameters:
metadata - an IIOMetadata object, or
 null.
See Also:
getMetadata()


"
IIOImage,setRaster(Raster raster),void,Sets the current Raster.,"

setRaster
public void setRaster(Raster raster)
Sets the current Raster.  The value is
 stored by reference.  Any existing RenderedImage is
 discarded.

Parameters:
raster - a Raster.
Throws:
IllegalArgumentException - if raster is
 null.
See Also:
getRaster()


"
IIOImage,setRenderedImage(RenderedImage image),void,Sets the current RenderedImage.,"

setRenderedImage
public void setRenderedImage(RenderedImage image)
Sets the current RenderedImage.  The value is
 stored by reference.  Any existing Raster is
 discarded.

Parameters:
image - a RenderedImage.
Throws:
IllegalArgumentException - if image is
 null.
See Also:
getRenderedImage()


"
IIOImage,setThumbnails(List<? extends BufferedImage> thumbnails),void,"Sets the list of thumbnails to a new List of BufferedImages, or to null.","

setThumbnails
public void setThumbnails(List<? extends BufferedImage> thumbnails)
Sets the list of thumbnails to a new List of
 BufferedImages, or to null.  The
 reference to the previous List is discarded.

  The thumbnails argument must either be
 null or contain only BufferedImage
 objects.

Parameters:
thumbnails - a List of
 BufferedImage thumbnails, or null.
See Also:
getThumbnail(int), 
getThumbnails()


"
IIOParam,activateController(),boolean,Activates the installed IIOParamController for this IIOParam object and returns the resulting value.,"

activateController
public boolean activateController()
Activates the installed IIOParamController for
 this IIOParam object and returns the resulting
 value.  When this method returns true, all values
 for this IIOParam object will be ready for the
 next read or write operation.  If false is
 returned, no settings in this object will have been disturbed
 (i.e., the user canceled the operation).

  Ordinarily, the controller will be a GUI providing a user
 interface for a subclass of IIOParam for a
 particular plug-in.  Controllers need not be GUIs, however.

Returns:
true if the controller completed normally.
Throws:
IllegalStateException - if there is no controller
 currently installed.
See Also:
IIOParamController, 
setController(IIOParamController), 
getController(), 
getDefaultController(), 
hasController()


"
IIOParam,getController(),IIOParamController,Returns whatever IIOParamController is currently installed.,"

getController
public IIOParamController getController()
Returns whatever IIOParamController is currently
 installed.  This could be the default if there is one,
 null, or the argument of the most recent call
 to setController.

Returns:
the currently installed
 IIOParamController, or null.
See Also:
IIOParamController, 
setController(javax.imageio.IIOParamController), 
getDefaultController(), 
hasController(), 
activateController()


"
IIOParam,getDefaultController(),IIOParamController,"Returns the default IIOParamController, if there is one, regardless of the currently installed controller.","

getDefaultController
public IIOParamController getDefaultController()
Returns the default IIOParamController, if there
 is one, regardless of the currently installed controller.  If
 there is no default controller, returns null.

Returns:
the default IIOParamController, or
 null.
See Also:
IIOParamController, 
setController(IIOParamController), 
getController(), 
hasController(), 
activateController()


"
IIOParam,getDestinationOffset(),Point,Returns the offset in the destination image at which pixels are to be placed.,"

getDestinationOffset
public Point getDestinationOffset()
Returns the offset in the destination image at which pixels are
 to be placed.

  If setDestinationOffsets has not been called,
 a Point with zero X and Y values is returned
 (which is the correct value).

Returns:
the destination offset as a Point.
See Also:
setDestinationOffset(java.awt.Point)


"
IIOParam,getDestinationType(),ImageTypeSpecifier,"Returns the type of image to be returned by the read, if one was set by a call to setDestination(ImageTypeSpecifier), as an ImageTypeSpecifier.","

getDestinationType
public ImageTypeSpecifier getDestinationType()
Returns the type of image to be returned by the read, if one
 was set by a call to
 setDestination(ImageTypeSpecifier), as an
 ImageTypeSpecifier.  If none was set,
 null is returned.

Returns:
an ImageTypeSpecifier describing the
 destination type, or null.
See Also:
setDestinationType(javax.imageio.ImageTypeSpecifier)


"
IIOParam,getSourceBands(),int[],Returns the set of of source bands to be used.,"

getSourceBands
public int[] getSourceBands()
Returns the set of of source bands to be used. The returned
 value is that set by the most recent call to
 setSourceBands, or null if there have
 been no calls to setSourceBands.

  Semantically, the array returned is a copy; changes to
 array contents subsequent to this call have no effect on this
 IIOParam.

Returns:
the set of source bands to be used, or
 null.
See Also:
setSourceBands(int[])


"
IIOParam,getSourceRegion(),Rectangle,Returns the source region to be used.,"

getSourceRegion
public Rectangle getSourceRegion()
Returns the source region to be used.  The returned value is
 that set by the most recent call to
 setSourceRegion, and will be null if
 there is no region set.

Returns:
the source region of interest as a
 Rectangle, or null.
See Also:
setSourceRegion(java.awt.Rectangle)


"
IIOParam,getSourceXSubsampling(),int,Returns the number of source columns to advance for each pixel.,"

getSourceXSubsampling
public int getSourceXSubsampling()
Returns the number of source columns to advance for each pixel.

 If setSourceSubsampling has not been called, 1
 is returned (which is the correct value).

Returns:
the source subsampling X period.
See Also:
setSourceSubsampling(int, int, int, int), 
getSourceYSubsampling()


"
IIOParam,getSourceYSubsampling(),int,Returns the number of rows to advance for each pixel.,"

getSourceYSubsampling
public int getSourceYSubsampling()
Returns the number of rows to advance for each pixel.

 If setSourceSubsampling has not been called, 1
 is returned (which is the correct value).

Returns:
the source subsampling Y period.
See Also:
setSourceSubsampling(int, int, int, int), 
getSourceXSubsampling()


"
IIOParam,getSubsamplingXOffset(),int,Returns the horizontal offset of the subsampling grid.,"

getSubsamplingXOffset
public int getSubsamplingXOffset()
Returns the horizontal offset of the subsampling grid.

 If setSourceSubsampling has not been called, 0
 is returned (which is the correct value).

Returns:
the source subsampling grid X offset.
See Also:
setSourceSubsampling(int, int, int, int), 
getSubsamplingYOffset()


"
IIOParam,getSubsamplingYOffset(),int,Returns the vertical offset of the subsampling grid.,"

getSubsamplingYOffset
public int getSubsamplingYOffset()
Returns the vertical offset of the subsampling grid.

 If setSourceSubsampling has not been called, 0
 is returned (which is the correct value).

Returns:
the source subsampling grid Y offset.
See Also:
setSourceSubsampling(int, int, int, int), 
getSubsamplingXOffset()


"
IIOParam,hasController(),boolean,Returns true if there is a controller installed for this IIOParam object.,"

hasController
public boolean hasController()
Returns true if there is a controller installed
 for this IIOParam object.  This will return
 true if getController would not
 return null.

Returns:
true if a controller is installed.
See Also:
IIOParamController, 
setController(IIOParamController), 
getController(), 
getDefaultController(), 
activateController()


"
IIOParam,setController(IIOParamController controller),void,"Sets the IIOParamController to be used to provide settings for this IIOParam object when the activateController method is called, overriding any default controller.","

setController
public void setController(IIOParamController controller)
Sets the IIOParamController to be used
 to provide settings for this IIOParam
 object when the activateController method
 is called, overriding any default controller.  If the
 argument is null, no controller will be
 used, including any default.  To restore the default, use
 setController(getDefaultController()).

Parameters:
controller - An appropriate
 IIOParamController, or null.
See Also:
IIOParamController, 
getController(), 
getDefaultController(), 
hasController(), 
activateController()


"
IIOParam,setDestinationOffset(Point destinationOffset),void,"Specifies the offset in the destination image at which future decoded pixels are to be placed, when reading, or where a region will be written, when writing.","

setDestinationOffset
public void setDestinationOffset(Point destinationOffset)
Specifies the offset in the destination image at which future
 decoded pixels are to be placed, when reading, or where a
 region will be written, when writing.

  When reading, the region to be written within the
 destination BufferedImage will start at this
 offset and have a width and height determined by the source
 region of interest, the subsampling parameters, and the
 destination bounds.

  Normal writes are not affected by this method, only writes
 performed using ImageWriter.replacePixels.  For
 such writes, the offset specified is within the output stream
 image whose pixels are being modified.

  There is no unsetDestinationOffset method;
 simply call setDestinationOffset(new Point(0, 0)) to
 restore default values.

Parameters:
destinationOffset - the offset in the destination, as a
 Point.
Throws:
IllegalArgumentException - if
 destinationOffset is null.
See Also:
getDestinationOffset(), 
ImageWriter.replacePixels(java.awt.image.RenderedImage, javax.imageio.ImageWriteParam)


"
IIOParam,setDestinationType(ImageTypeSpecifier destinationType),void,"Sets the desired image type for the destination image, using an ImageTypeSpecifier.","

setDestinationType
public void setDestinationType(ImageTypeSpecifier destinationType)
Sets the desired image type for the destination image, using an
 ImageTypeSpecifier.

  When reading, if the layout of the destination has been set
 using this method, each call to an ImageReader
read method will return a new
 BufferedImage using the format specified by the
 supplied type specifier.  As a side effect, any destination
 BufferedImage set by
 ImageReadParam.setDestination(BufferedImage) will
 no longer be set as the destination.  In other words, this
 method may be thought of as calling
 setDestination((BufferedImage)null).

  When writing, the destination type maybe used to determine
 the color type of the image.  The SampleModel
 information will be ignored, and may be null.  For
 example, a 4-banded image could represent either CMYK or RGBA
 data.  If a destination type is set, its
 ColorModel will override any
 ColorModel on the image itself.  This is crucial
 when setSourceBands is used since the image's
 ColorModel will refer to the entire image rather
 than to the subset of bands being written.

Parameters:
destinationType - the ImageTypeSpecifier to
 be used to determine the destination layout and color type.
See Also:
getDestinationType()


"
IIOParam,setSourceBands(int[] sourceBands),void,Sets the indices of the source bands to be used.,"

setSourceBands
public void setSourceBands(int[] sourceBands)
Sets the indices of the source bands to be used.  Duplicate
 indices are not allowed.

  A null value indicates that all source bands
 will be used.

  At the time of reading, an
 IllegalArgumentException will be thrown by the
 reader or writer if a value larger than the largest available
 source band index has been specified or if the number of source
 bands and destination bands to be used differ.  The
 ImageReader.checkReadParamBandSettings method may
 be used to automate this test.

  Semantically, a copy is made of the array; changes to the
 array contents subsequent to this call have no effect on
 this IIOParam.

Parameters:
sourceBands - an array of integer band indices to be
 used.
Throws:
IllegalArgumentException - if sourceBands
 contains a negative or duplicate value.
See Also:
getSourceBands(), 
ImageReadParam.setDestinationBands(int[]), 
ImageReader.checkReadParamBandSettings(javax.imageio.ImageReadParam, int, int)


"
IIOParam,setSourceRegion(Rectangle sourceRegion),void,Sets the source region of interest.,"

setSourceRegion
public void setSourceRegion(Rectangle sourceRegion)
Sets the source region of interest.  The region of interest is
 described as a rectangle, with the upper-left corner of the
 source image as pixel (0, 0) and increasing values down and to
 the right.  The actual number of pixels used will depend on
 the subsampling factors set by setSourceSubsampling.
 If subsampling has been set such that this number is zero,
 an IllegalStateException will be thrown.

  The source region of interest specified by this method will
 be clipped as needed to fit within the source bounds, as well
 as the destination offsets, width, and height at the time of
 actual I/O.

  A value of null for sourceRegion
 will remove any region specification, causing the entire image
 to be used.

Parameters:
sourceRegion - a Rectangle specifying the
 source region of interest, or null.
Throws:
IllegalArgumentException - if
 sourceRegion is non-null and either
 sourceRegion.x or sourceRegion.y is
 negative.
IllegalArgumentException - if
 sourceRegion is non-null and either
 sourceRegion.width or
 sourceRegion.height is negative or 0.
IllegalStateException - if subsampling is such that
 this region will have a subsampled width or height of zero.
See Also:
getSourceRegion(), 
setSourceSubsampling(int, int, int, int), 
setDestinationOffset(java.awt.Point), 
getDestinationOffset()


"
IIOParam,"setSourceSubsampling(int sourceXSubsampling, int sourceYSubsampling, int subsamplingXOffset, int subsamplingYOffset)",void,Specifies a decimation subsampling to apply on I/O.,"

setSourceSubsampling
public void setSourceSubsampling(int sourceXSubsampling,
                                 int sourceYSubsampling,
                                 int subsamplingXOffset,
                                 int subsamplingYOffset)
Specifies a decimation subsampling to apply on I/O.  The
 sourceXSubsampling and
 sourceYSubsampling parameters specify the
 subsampling period (i.e., the number of rows and columns
 to advance after every source pixel).  Specifically, a period of
 1 will use every row or column; a period of 2 will use every
 other row or column.  The subsamplingXOffset and
 subsamplingYOffset parameters specify an offset
 from the region (or image) origin for the first subsampled pixel.
 Adjusting the origin of the subsample grid is useful for avoiding
 seams when subsampling a very large source image into destination
 regions that will be assembled into a complete subsampled image.
 Most users will want to simply leave these parameters at 0.

  The number of pixels and scanlines to be used are calculated
 as follows.
 
 The number of subsampled pixels in a scanline is given by
 
truncate[(width - subsamplingXOffset + sourceXSubsampling - 1)
 / sourceXSubsampling].
 
 If the region is such that this width is zero, an
 IllegalStateException is thrown.
 
 The number of scanlines to be used can be computed similarly.

 The ability to set the subsampling grid to start somewhere
 other than the source region origin is useful if the
 region is being used to create subsampled tiles of a large image,
 where the tile width and height are not multiples of the
 subsampling periods.  If the subsampling grid does not remain
 consistent from tile to tile, there will be artifacts at the tile
 boundaries.  By adjusting the subsampling grid offset for each
 tile to compensate, these artifacts can be avoided.  The tradeoff
 is that in order to avoid these artifacts, the tiles are not all
 the same size.  The grid offset to use in this case is given by:
 
 grid offset = [period - (region offset modulo period)] modulo period)

  If either sourceXSubsampling or
 sourceYSubsampling is 0 or negative, an
 IllegalArgumentException will be thrown.

  If either subsamplingXOffset or
 subsamplingYOffset is negative or greater than or
 equal to the corresponding period, an
 IllegalArgumentException will be thrown.

  There is no unsetSourceSubsampling method;
 simply call setSourceSubsampling(1, 1, 0, 0) to
 restore default values.

Parameters:
sourceXSubsampling - the number of columns to advance
 between pixels.
sourceYSubsampling - the number of rows to advance between
 pixels.
subsamplingXOffset - the horizontal offset of the first subsample
 within the region, or within the image if no region is set.
subsamplingYOffset - the horizontal offset of the first subsample
 within the region, or within the image if no region is set.
Throws:
IllegalArgumentException - if either period is
 negative or 0, or if either grid offset is negative or greater than
 the corresponding period.
IllegalStateException - if the source region is such that
 the subsampled output would contain no pixels.


"
ImageIO,createImageInputStream(Object input),static ImageInputStream,Returns an ImageInputStream that will take its input from the given Object.,"

createImageInputStream
public static ImageInputStream createImageInputStream(Object input)
                                               throws IOException
Returns an ImageInputStream that will take its
 input from the given Object.  The set of
 ImageInputStreamSpis registered with the
 IIORegistry class is queried and the first one
 that is able to take input from the supplied object is used to
 create the returned ImageInputStream.  If no
 suitable ImageInputStreamSpi exists,
 null is returned.

  The current cache settings from getUseCacheand
 getCacheDirectory will be used to control caching.

Parameters:
input - an Object to be used as an input
 source, such as a File, readable
 RandomAccessFile, or InputStream.
Returns:
an ImageInputStream, or null.
Throws:
IllegalArgumentException - if input
 is null.
IOException - if a cache file is needed but cannot be
 created.
See Also:
ImageInputStreamSpi


"
ImageIO,createImageOutputStream(Object output),static ImageOutputStream,Returns an ImageOutputStream that will send its output to the given Object.,"

createImageOutputStream
public static ImageOutputStream createImageOutputStream(Object output)
                                                 throws IOException
Returns an ImageOutputStream that will send its
 output to the given Object.  The set of
 ImageOutputStreamSpis registered with the
 IIORegistry class is queried and the first one
 that is able to send output from the supplied object is used to
 create the returned ImageOutputStream.  If no
 suitable ImageOutputStreamSpi exists,
 null is returned.

  The current cache settings from getUseCacheand
 getCacheDirectory will be used to control caching.

Parameters:
output - an Object to be used as an output
 destination, such as a File, writable
 RandomAccessFile, or OutputStream.
Returns:
an ImageOutputStream, or
 null.
Throws:
IllegalArgumentException - if output is
 null.
IOException - if a cache file is needed but cannot be
 created.
See Also:
ImageOutputStreamSpi


"
ImageIO,getCacheDirectory(),static File,"Returns the current value set by setCacheDirectory, or null if no explicit setting has been made.","

getCacheDirectory
public static File getCacheDirectory()
Returns the current value set by
 setCacheDirectory, or null if no
 explicit setting has been made.

Returns:
a File indicating the directory where
 cache files will be created, or null to indicate
 the system-dependent default temporary-file directory.
See Also:
setCacheDirectory(java.io.File)


"
ImageIO,getImageReader(ImageWriter writer),static ImageReader,"Returns an ImageReadercorresponding to the given ImageWriter, if there is one, or null if the plug-in for this ImageWriter does not specify a corresponding ImageReader, or if the given ImageWriter is not registered.","

getImageReader
public static ImageReader getImageReader(ImageWriter writer)
Returns an ImageReadercorresponding to the given
 ImageWriter, if there is one, or null
 if the plug-in for this ImageWriter does not
 specify a corresponding ImageReader, or if the
 given ImageWriter is not registered.  This method
 is provided principally for symmetry with
 getImageWriter(ImageReader).  Note that this
 method returns the ""preferred"" reader, which is the first in
 the list returned by
 javax.imageio.spi.ImageWriterSpi.getImageReaderSpiNames().

Parameters:
writer - an instance of a registered ImageWriter.
Returns:
an ImageReader, or null.
Throws:
IllegalArgumentException - if writer is
 null.
See Also:
getImageWriter(ImageReader), 
ImageWriterSpi.getImageReaderSpiNames()


"
ImageIO,getImageReaders(Object input),static Iterator<ImageReader>,"Returns an Iterator containing all currently registered ImageReaders that claim to be able to decode the supplied Object, typically an ImageInputStream.","

getImageReaders
public static Iterator<ImageReader> getImageReaders(Object input)
Returns an Iterator containing all currently
 registered ImageReaders that claim to be able to
 decode the supplied Object, typically an
 ImageInputStream.

  The stream position is left at its prior position upon
 exit from this method.

Parameters:
input - an ImageInputStream or other
 Object containing encoded image data.
Returns:
an Iterator containing ImageReaders.
Throws:
IllegalArgumentException - if input is
 null.
See Also:
ImageReaderSpi.canDecodeInput(java.lang.Object)


"
ImageIO,getImageReadersByFormatName(String formatName),static Iterator<ImageReader>,Returns an Iterator containing all currently registered ImageReaders that claim to be able to decode the named format.,"

getImageReadersByFormatName
public static Iterator<ImageReader> getImageReadersByFormatName(String formatName)
Returns an Iterator containing all currently
 registered ImageReaders that claim to be able to
 decode the named format.

Parameters:
formatName - a String containing the informal
 name of a format (e.g., ""jpeg"" or ""tiff"".
Returns:
an Iterator containing
 ImageReaders.
Throws:
IllegalArgumentException - if formatName
 is null.
See Also:
ImageReaderWriterSpi.getFormatNames()


"
ImageIO,getImageReadersByMIMEType(String MIMEType),static Iterator<ImageReader>,Returns an Iterator containing all currently registered ImageReaders that claim to be able to decode files with the given MIME type.,"

getImageReadersByMIMEType
public static Iterator<ImageReader> getImageReadersByMIMEType(String MIMEType)
Returns an Iterator containing all currently
 registered ImageReaders that claim to be able to
 decode files with the given MIME type.

Parameters:
MIMEType - a String containing a file
 suffix (e.g., ""image/jpeg"" or ""image/x-bmp"").
Returns:
an Iterator containing
 ImageReaders.
Throws:
IllegalArgumentException - if MIMEType is
 null.
See Also:
ImageReaderWriterSpi.getMIMETypes()


"
ImageIO,getImageReadersBySuffix(String fileSuffix),static Iterator<ImageReader>,Returns an Iterator containing all currently registered ImageReaders that claim to be able to decode files with the given suffix.,"

getImageReadersBySuffix
public static Iterator<ImageReader> getImageReadersBySuffix(String fileSuffix)
Returns an Iterator containing all currently
 registered ImageReaders that claim to be able to
 decode files with the given suffix.

Parameters:
fileSuffix - a String containing a file
 suffix (e.g., ""jpg"" or ""tiff"").
Returns:
an Iterator containing
 ImageReaders.
Throws:
IllegalArgumentException - if fileSuffix
 is null.
See Also:
ImageReaderWriterSpi.getFileSuffixes()


"
ImageIO,"getImageTranscoders(ImageReader reader, ImageWriter writer)",static Iterator<ImageTranscoder>,Returns an Iterator containing all currently registered ImageTranscoders that claim to be able to transcode between the metadata of the given ImageReader and ImageWriter.,"

getImageTranscoders
public static Iterator<ImageTranscoder> getImageTranscoders(ImageReader reader,
                                                            ImageWriter writer)
Returns an Iterator containing all currently
 registered ImageTranscoders that claim to be
 able to transcode between the metadata of the given
 ImageReader and ImageWriter.

Parameters:
reader - an ImageReader.
writer - an ImageWriter.
Returns:
an Iterator containing
 ImageTranscoders.
Throws:
IllegalArgumentException - if reader or
 writer is null.


"
ImageIO,getImageWriter(ImageReader reader),static ImageWriter,"Returns an ImageWritercorresponding to the given ImageReader, if there is one, or null if the plug-in for this ImageReader does not specify a corresponding ImageWriter, or if the given ImageReader is not registered.","

getImageWriter
public static ImageWriter getImageWriter(ImageReader reader)
Returns an ImageWritercorresponding to the given
 ImageReader, if there is one, or null
 if the plug-in for this ImageReader does not
 specify a corresponding ImageWriter, or if the
 given ImageReader is not registered.  This
 mechanism may be used to obtain an ImageWriter
 that will understand the internal structure of non-pixel
 metadata (as encoded by IIOMetadata objects)
 generated by the ImageReader.  By obtaining this
 data from the ImageReader and passing it on to the
 ImageWriter obtained with this method, a client
 program can read an image, modify it in some way, and write it
 back out preserving all metadata, without having to understand
 anything about the structure of the metadata, or even about
 the image format.  Note that this method returns the
 ""preferred"" writer, which is the first in the list returned by
 javax.imageio.spi.ImageReaderSpi.getImageWriterSpiNames().

Parameters:
reader - an instance of a registered ImageReader.
Returns:
an ImageWriter, or null.
Throws:
IllegalArgumentException - if reader is
 null.
See Also:
getImageReader(ImageWriter), 
ImageReaderSpi.getImageWriterSpiNames()


"
ImageIO,"getImageWriters(ImageTypeSpecifier type, String formatName)",static Iterator<ImageWriter>,Returns an Iterator containing all currently registered ImageWriters that claim to be able to encode images of the given layout (specified using an ImageTypeSpecifier) in the given format.,"

getImageWriters
public static Iterator<ImageWriter> getImageWriters(ImageTypeSpecifier type,
                                                    String formatName)
Returns an Iterator containing all currently
 registered ImageWriters that claim to be able to
 encode images of the given layout (specified using an
 ImageTypeSpecifier) in the given format.

Parameters:
type - an ImageTypeSpecifier indicating the
 layout of the image to be written.
formatName - the informal name of the format.
Returns:
an Iterator containing ImageWriters.
Throws:
IllegalArgumentException - if any parameter is
 null.
See Also:
ImageWriterSpi.canEncodeImage(ImageTypeSpecifier)


"
ImageIO,getImageWritersByFormatName(String formatName),static Iterator<ImageWriter>,Returns an Iterator containing all currently registered ImageWriters that claim to be able to encode the named format.,"

getImageWritersByFormatName
public static Iterator<ImageWriter> getImageWritersByFormatName(String formatName)
Returns an Iterator containing all currently
 registered ImageWriters that claim to be able to
 encode the named format.

Parameters:
formatName - a String containing the informal
 name of a format (e.g., ""jpeg"" or ""tiff"".
Returns:
an Iterator containing
 ImageWriters.
Throws:
IllegalArgumentException - if formatName is
 null.
See Also:
ImageReaderWriterSpi.getFormatNames()


"
ImageIO,getImageWritersByMIMEType(String MIMEType),static Iterator<ImageWriter>,Returns an Iterator containing all currently registered ImageWriters that claim to be able to encode files with the given MIME type.,"

getImageWritersByMIMEType
public static Iterator<ImageWriter> getImageWritersByMIMEType(String MIMEType)
Returns an Iterator containing all currently
 registered ImageWriters that claim to be able to
 encode files with the given MIME type.

Parameters:
MIMEType - a String containing a file
 suffix (e.g., ""image/jpeg"" or ""image/x-bmp"").
Returns:
an Iterator containing ImageWriters.
Throws:
IllegalArgumentException - if MIMEType is
 null.
See Also:
ImageReaderWriterSpi.getMIMETypes()


"
ImageIO,getImageWritersBySuffix(String fileSuffix),static Iterator<ImageWriter>,Returns an Iterator containing all currently registered ImageWriters that claim to be able to encode files with the given suffix.,"

getImageWritersBySuffix
public static Iterator<ImageWriter> getImageWritersBySuffix(String fileSuffix)
Returns an Iterator containing all currently
 registered ImageWriters that claim to be able to
 encode files with the given suffix.

Parameters:
fileSuffix - a String containing a file
 suffix (e.g., ""jpg"" or ""tiff"").
Returns:
an Iterator containing ImageWriters.
Throws:
IllegalArgumentException - if fileSuffix is
 null.
See Also:
ImageReaderWriterSpi.getFileSuffixes()


"
ImageIO,getReaderFileSuffixes(),static String[],Returns an array of Strings listing all of the file suffixes associated with the formats understood by the current set of registered readers.,"

getReaderFileSuffixes
public static String[] getReaderFileSuffixes()
Returns an array of Strings listing all of the
 file suffixes associated with the formats understood
 by the current set of registered readers.

Returns:
an array of Strings.
Since:
1.6


"
ImageIO,getReaderFormatNames(),static String[],Returns an array of Strings listing all of the informal format names understood by the current set of registered readers.,"

getReaderFormatNames
public static String[] getReaderFormatNames()
Returns an array of Strings listing all of the
 informal format names understood by the current set of registered
 readers.

Returns:
an array of Strings.


"
ImageIO,getReaderMIMETypes(),static String[],Returns an array of Strings listing all of the MIME types understood by the current set of registered readers.,"

getReaderMIMETypes
public static String[] getReaderMIMETypes()
Returns an array of Strings listing all of the
 MIME types understood by the current set of registered
 readers.

Returns:
an array of Strings.


"
ImageIO,getUseCache(),static boolean,"Returns the current value set by setUseCache, or true if no explicit setting has been made.","

getUseCache
public static boolean getUseCache()
Returns the current value set by setUseCache, or
 true if no explicit setting has been made.

Returns:
true if a disk-based cache may be used for
 ImageInputStreams and
 ImageOutputStreams.
See Also:
setUseCache(boolean)


"
ImageIO,getWriterFileSuffixes(),static String[],Returns an array of Strings listing all of the file suffixes associated with the formats understood by the current set of registered writers.,"

getWriterFileSuffixes
public static String[] getWriterFileSuffixes()
Returns an array of Strings listing all of the
 file suffixes associated with the formats understood
 by the current set of registered writers.

Returns:
an array of Strings.
Since:
1.6


"
ImageIO,getWriterFormatNames(),static String[],Returns an array of Strings listing all of the informal format names understood by the current set of registered writers.,"

getWriterFormatNames
public static String[] getWriterFormatNames()
Returns an array of Strings listing all of the
 informal format names understood by the current set of registered
 writers.

Returns:
an array of Strings.


"
ImageIO,getWriterMIMETypes(),static String[],Returns an array of Strings listing all of the MIME types understood by the current set of registered writers.,"

getWriterMIMETypes
public static String[] getWriterMIMETypes()
Returns an array of Strings listing all of the
 MIME types understood by the current set of registered
 writers.

Returns:
an array of Strings.


"
ImageIO,read(File input),static BufferedImage,Returns a BufferedImage as the result of decoding a supplied File with an ImageReader chosen automatically from among those currently registered.,"

read
public static BufferedImage read(File input)
                          throws IOException
Returns a BufferedImage as the result of decoding
 a supplied File with an ImageReader
 chosen automatically from among those currently registered.
 The File is wrapped in an
 ImageInputStream.  If no registered
 ImageReader claims to be able to read the
 resulting stream, null is returned.

  The current cache settings from getUseCacheand
 getCacheDirectory will be used to control caching in the
 ImageInputStream that is created.

  Note that there is no read method that takes a
 filename as a String; use this method instead after
 creating a File from the filename.

  This method does not attempt to locate
 ImageReaders that can read directly from a
 File; that may be accomplished using
 IIORegistry and ImageReaderSpi.

Parameters:
input - a File to read from.
Returns:
a BufferedImage containing the decoded
 contents of the input, or null.
Throws:
IllegalArgumentException - if input is
 null.
IOException - if an error occurs during reading.


"
ImageIO,read(ImageInputStream stream),static BufferedImage,Returns a BufferedImage as the result of decoding a supplied ImageInputStream with an ImageReader chosen automatically from among those currently registered.,"

read
public static BufferedImage read(ImageInputStream stream)
                          throws IOException
Returns a BufferedImage as the result of decoding
 a supplied ImageInputStream with an
 ImageReader chosen automatically from among those
 currently registered.  If no registered
 ImageReader claims to be able to read the stream,
 null is returned.

  Unlike most other methods in this class, this method does
 close the provided ImageInputStream after the read
 operation has completed, unless null is returned,
 in which case this method does not close the stream.

Parameters:
stream - an ImageInputStream to read from.
Returns:
a BufferedImage containing the decoded
 contents of the input, or null.
Throws:
IllegalArgumentException - if stream is
 null.
IOException - if an error occurs during reading.


"
ImageIO,read(InputStream input),static BufferedImage,Returns a BufferedImage as the result of decoding a supplied InputStream with an ImageReader chosen automatically from among those currently registered.,"

read
public static BufferedImage read(InputStream input)
                          throws IOException
Returns a BufferedImage as the result of decoding
 a supplied InputStream with an ImageReader
 chosen automatically from among those currently registered.
 The InputStream is wrapped in an
 ImageInputStream.  If no registered
 ImageReader claims to be able to read the
 resulting stream, null is returned.

  The current cache settings from getUseCacheand
 getCacheDirectory will be used to control caching in the
 ImageInputStream that is created.

  This method does not attempt to locate
 ImageReaders that can read directly from an
 InputStream; that may be accomplished using
 IIORegistry and ImageReaderSpi.

  This method does not close the provided
 InputStream after the read operation has completed;
 it is the responsibility of the caller to close the stream, if desired.

Parameters:
input - an InputStream to read from.
Returns:
a BufferedImage containing the decoded
 contents of the input, or null.
Throws:
IllegalArgumentException - if input is
 null.
IOException - if an error occurs during reading.


"
ImageIO,read(URL input),static BufferedImage,Returns a BufferedImage as the result of decoding a supplied URL with an ImageReader chosen automatically from among those currently registered.,"

read
public static BufferedImage read(URL input)
                          throws IOException
Returns a BufferedImage as the result of decoding
 a supplied URL with an ImageReader
 chosen automatically from among those currently registered.  An
 InputStream is obtained from the URL,
 which is wrapped in an ImageInputStream.  If no
 registered ImageReader claims to be able to read
 the resulting stream, null is returned.

  The current cache settings from getUseCacheand
 getCacheDirectory will be used to control caching in the
 ImageInputStream that is created.

  This method does not attempt to locate
 ImageReaders that can read directly from a
 URL; that may be accomplished using
 IIORegistry and ImageReaderSpi.

Parameters:
input - a URL to read from.
Returns:
a BufferedImage containing the decoded
 contents of the input, or null.
Throws:
IllegalArgumentException - if input is
 null.
IOException - if an error occurs during reading.


"
ImageIO,scanForPlugins(),static void,"Scans for plug-ins on the application class path, loads their service provider classes, and registers a service provider instance for each one found with the IIORegistry.","

scanForPlugins
public static void scanForPlugins()
Scans for plug-ins on the application class path,
 loads their service provider classes, and registers a service
 provider instance for each one found with the
 IIORegistry.

 This method is needed because the application class path can
 theoretically change, or additional plug-ins may become available.
 Rather than re-scanning the classpath on every invocation of the
 API, the class path is scanned automatically only on the first
 invocation. Clients can call this method to prompt a re-scan.
 Thus this method need only be invoked by sophisticated applications
 which dynamically make new plug-ins available at runtime.

  The getResources method of the context
 ClassLoader is used locate JAR files containing
 files named
 META-INF/services/javax.imageio.spi.classname,
 where classname is one of ImageReaderSpi,
 ImageWriterSpi, ImageTranscoderSpi,
 ImageInputStreamSpi, or
 ImageOutputStreamSpi, along the application class
 path.

  The contents of the located files indicate the names of
 actual implementation classes which implement the
 aforementioned service provider interfaces; the default class
 loader is then used to load each of these classes and to
 instantiate an instance of each class, which is then placed
 into the registry for later retrieval.

  The exact set of locations searched depends on the
 implementation of the Java runtime environment.

See Also:
ClassLoader.getResources(java.lang.String)


"
ImageIO,setCacheDirectory(File cacheDirectory),static void,Sets the directory where cache files are to be created.,"

setCacheDirectory
public static void setCacheDirectory(File cacheDirectory)
Sets the directory where cache files are to be created.  A
 value of null indicates that the system-dependent
 default temporary-file directory is to be used.  If
 getUseCache returns false, this value is ignored.

Parameters:
cacheDirectory - a File specifying a directory.
Throws:
SecurityException - if the security manager denies
 access to the directory.
IllegalArgumentException - if cacheDir is
 non-null but is not a directory.
See Also:
File.createTempFile(String, String, File), 
getCacheDirectory()


"
ImageIO,setUseCache(boolean useCache),static void,Sets a flag indicating whether a disk-based cache file should be used when creating ImageInputStreams and ImageOutputStreams.,"

setUseCache
public static void setUseCache(boolean useCache)
Sets a flag indicating whether a disk-based cache file should
 be used when creating ImageInputStreams and
 ImageOutputStreams.

  When reading from a standard InputStream, it
 may be necessary to save previously read information in a cache
 since the underlying stream does not allow data to be re-read.
 Similarly, when writing to a standard
 OutputStream, a cache may be used to allow a
 previously written value to be changed before flushing it to
 the final destination.

  The cache may reside in main memory or on disk.  Setting
 this flag to false disallows the use of disk for
 future streams, which may be advantageous when working with
 small images, as the overhead of creating and destroying files
 is removed.

  On startup, the value is set to true.

Parameters:
useCache - a boolean indicating whether a
 cache file should be used, in cases where it is optional.
See Also:
getUseCache()


"
ImageIO,"write(RenderedImage im, String formatName, File output)",static boolean,Writes an image using an arbitrary ImageWriter that supports the given format to a File.,"

write
public static boolean write(RenderedImage im,
                            String formatName,
                            File output)
                     throws IOException
Writes an image using an arbitrary ImageWriter
 that supports the given format to a File.  If
 there is already a File present, its contents are
 discarded.

Parameters:
im - a RenderedImage to be written.
formatName - a String containing the informal
 name of the format.
output - a File to be written to.
Returns:
false if no appropriate writer is found.
Throws:
IllegalArgumentException - if any parameter is
 null.
IOException - if an error occurs during writing.


"
ImageIO,"write(RenderedImage im, String formatName, ImageOutputStream output)",static boolean,Writes an image using the an arbitrary ImageWriter that supports the given format to an ImageOutputStream.,"

write
public static boolean write(RenderedImage im,
                            String formatName,
                            ImageOutputStream output)
                     throws IOException
Writes an image using the an arbitrary ImageWriter
 that supports the given format to an
 ImageOutputStream.  The image is written to the
 ImageOutputStream starting at the current stream
 pointer, overwriting existing stream data from that point
 forward, if present.

  This method does not close the provided
 ImageOutputStream after the write operation has completed;
 it is the responsibility of the caller to close the stream, if desired.

Parameters:
im - a RenderedImage to be written.
formatName - a String containing the informal
 name of the format.
output - an ImageOutputStream to be written to.
Returns:
false if no appropriate writer is found.
Throws:
IllegalArgumentException - if any parameter is
 null.
IOException - if an error occurs during writing.


"
ImageIO,"write(RenderedImage im, String formatName, OutputStream output)",static boolean,Writes an image using an arbitrary ImageWriter that supports the given format to an OutputStream.,"

write
public static boolean write(RenderedImage im,
                            String formatName,
                            OutputStream output)
                     throws IOException
Writes an image using an arbitrary ImageWriter
 that supports the given format to an OutputStream.

  This method does not close the provided
 OutputStream after the write operation has completed;
 it is the responsibility of the caller to close the stream, if desired.

  The current cache settings from getUseCacheand
 getCacheDirectory will be used to control caching.

Parameters:
im - a RenderedImage to be written.
formatName - a String containing the informal
 name of the format.
output - an OutputStream to be written to.
Returns:
false if no appropriate writer is found.
Throws:
IllegalArgumentException - if any parameter is
 null.
IOException - if an error occurs during writing.


"
ImageReader,abort(),void,Requests that any current read operation be aborted.,"

abort
public void abort()
Requests that any current read operation be aborted.  The
 contents of the image following the abort will be undefined.

  Readers should call clearAbortRequest at the
 beginning of each read operation, and poll the value of
 abortRequested regularly during the read.

"
ImageReader,abortRequested(),protected boolean,Returns true if a request to abort the current read operation has been made since the reader was instantiated or clearAbortRequest was called.,"

abortRequested
protected boolean abortRequested()
Returns true if a request to abort the current
 read operation has been made since the reader was instantiated or
 clearAbortRequest was called.

Returns:
true if the current read operation should
 be aborted.
See Also:
abort(), 
clearAbortRequest()


"
ImageReader,addIIOReadProgressListener(IIOReadProgressListener listener),void,Adds an IIOReadProgressListener to the list of registered progress listeners.,"

addIIOReadProgressListener
public void addIIOReadProgressListener(IIOReadProgressListener listener)
Adds an IIOReadProgressListener to the list of
 registered progress listeners.  If listener is
 null, no exception will be thrown and no action
 will be taken.

Parameters:
listener - an IIOReadProgressListener to be registered.
See Also:
removeIIOReadProgressListener(javax.imageio.event.IIOReadProgressListener)


"
ImageReader,addIIOReadUpdateListener(IIOReadUpdateListener listener),void,Adds an IIOReadUpdateListener to the list of registered update listeners.,"

addIIOReadUpdateListener
public void addIIOReadUpdateListener(IIOReadUpdateListener listener)
Adds an IIOReadUpdateListener to the list of
 registered update listeners.  If listener is
 null, no exception will be thrown and no action
 will be taken.  The listener will receive notification of pixel
 updates as images and thumbnails are decoded, including the
 starts and ends of progressive passes.

  If no update listeners are present, the reader may choose
 to perform fewer updates to the pixels of the destination
 images and/or thumbnails, which may result in more efficient
 decoding.

  For example, in progressive JPEG decoding each pass
 contains updates to a set of coefficients, which would have to
 be transformed into pixel values and converted to an RGB color
 space for each pass if listeners are present.  If no listeners
 are present, the coefficients may simply be accumulated and the
 final results transformed and color converted one time only.

  The final results of decoding will be the same whether or
 not intermediate updates are performed.  Thus if only the final
 image is desired it may be preferable not to register any
 IIOReadUpdateListeners.  In general, progressive
 updating is most effective when fetching images over a network
 connection that is very slow compared to local CPU processing;
 over a fast connection, progressive updates may actually slow
 down the presentation of the image.

Parameters:
listener - an IIOReadUpdateListener to be registered.
See Also:
removeIIOReadUpdateListener(javax.imageio.event.IIOReadUpdateListener)


"
ImageReader,addIIOReadWarningListener(IIOReadWarningListener listener),void,Adds an IIOReadWarningListener to the list of registered warning listeners.,"

addIIOReadWarningListener
public void addIIOReadWarningListener(IIOReadWarningListener listener)
Adds an IIOReadWarningListener to the list of
 registered warning listeners.  If listener is
 null, no exception will be thrown and no action
 will be taken.  Messages sent to the given listener will be
 localized, if possible, to match the current
 Locale.  If no Locale has been set,
 warning messages may be localized as the reader sees fit.

Parameters:
listener - an IIOReadWarningListener to be registered.
See Also:
removeIIOReadWarningListener(javax.imageio.event.IIOReadWarningListener)


"
ImageReader,canReadRaster(),boolean,Returns true if this plug-in supports reading just a Raster of pixel data.,"

canReadRaster
public boolean canReadRaster()
Returns true if this plug-in supports reading
 just a Raster of pixel data.
 If this method returns false, calls to
 readRaster or readTileRaster
 will throw an UnsupportedOperationException.

  The default implementation returns false.

Returns:
true if this plug-in supports reading raw
 Rasters.
See Also:
readRaster(int, javax.imageio.ImageReadParam), 
readTileRaster(int, int, int)


"
ImageReader,"checkReadParamBandSettings(ImageReadParam param, int numSrcBands, int numDstBands)",protected static void,A utility method that may be used by readers to test the validity of the source and destination band settings of an ImageReadParam.,"

checkReadParamBandSettings
protected static void checkReadParamBandSettings(ImageReadParam param,
                                                 int numSrcBands,
                                                 int numDstBands)
A utility method that may be used by readers to test the
 validity of the source and destination band settings of an
 ImageReadParam.  This method may be called as soon
 as the reader knows both the number of bands of the source
 image as it exists in the input stream, and the number of bands
 of the destination image that being written.

  The method retrieves the source and destination band
 setting arrays from param using the getSourceBands
 and getDestinationBandsmethods (or considers them
 to be null if param is
 null).  If the source band setting array is
 null, it is considered to be equal to the array
 { 0, 1, ..., numSrcBands - 1 }, and similarly for
 the destination band setting array.

  The method then tests that both arrays are equal in length,
 and that neither array contains a value larger than the largest
 available band index.

  Any failure results in an
 IllegalArgumentException being thrown; success
 results in the method returning silently.

Parameters:
param - the ImageReadParam being used to read
 the image.
numSrcBands - the number of bands of the image as it exists
 int the input source.
numDstBands - the number of bands in the destination image
 being written.
Throws:
IllegalArgumentException - if param
 contains an invalid specification of a source and/or
 destination band subset.


"
ImageReader,clearAbortRequest(),protected void,Clears any previous abort request.,"

clearAbortRequest
protected void clearAbortRequest()
Clears any previous abort request.  After this method has been
 called, abortRequested will return
 false.

See Also:
abort(), 
abortRequested()


"
ImageReader,"computeRegions(ImageReadParam param, int srcWidth, int srcHeight, BufferedImage image, Rectangle srcRegion, Rectangle destRegion)",protected static void,"Computes the source region of interest and the destination region of interest, taking the width and height of the source image, an optional destination image, and an optional ImageReadParam into account.","

computeRegions
protected static void computeRegions(ImageReadParam param,
                                     int srcWidth,
                                     int srcHeight,
                                     BufferedImage image,
                                     Rectangle srcRegion,
                                     Rectangle destRegion)
Computes the source region of interest and the destination
 region of interest, taking the width and height of the source
 image, an optional destination image, and an optional
 ImageReadParam into account.  The source region
 begins with the entire source image.  Then that is clipped to
 the source region specified in the ImageReadParam,
 if one is specified.

  If either of the destination offsets are negative, the
 source region is clipped so that its top left will coincide
 with the top left of the destination image, taking subsampling
 into account.  Then the result is clipped to the destination
 image on the right and bottom, if one is specified, taking
 subsampling and destination offsets into account.

  Similarly, the destination region begins with the source
 image, is translated to the destination offset given in the
 ImageReadParam if there is one, and finally is
 clipped to the destination image, if there is one.

  If either the source or destination regions end up having a
 width or height of 0, an IllegalArgumentException
 is thrown.

  The getSourceRegion>
 method may be used if only source clipping is desired.

Parameters:
param - an ImageReadParam, or null.
srcWidth - the width of the source image.
srcHeight - the height of the source image.
image - a BufferedImage that will be the
 destination image, or null.
srcRegion - a Rectangle that will be filled with
 the source region of interest.
destRegion - a Rectangle that will be filled with
 the destination region of interest.
Throws:
IllegalArgumentException - if srcRegion
 is null.
IllegalArgumentException - if dstRegion
 is null.
IllegalArgumentException - if the resulting source or
 destination region is empty.


"
ImageReader,dispose(),void,Allows any resources held by this object to be released.,"

dispose
public void dispose()
Allows any resources held by this object to be released.  The
 result of calling any other method (other than
 finalize) subsequent to a call to this method
 is undefined.

 It is important for applications to call this method when they
 know they will no longer be using this ImageReader.
 Otherwise, the reader may continue to hold on to resources
 indefinitely.

 The default implementation of this method in the superclass does
 nothing.  Subclass implementations should ensure that all resources,
 especially native resources, are released.

"
ImageReader,getAspectRatio(int imageIndex),float,"Returns the aspect ratio of the given image (that is, its width divided by its height) as a float.","

getAspectRatio
public float getAspectRatio(int imageIndex)
                     throws IOException
Returns the aspect ratio of the given image (that is, its width
 divided by its height) as a float.  For images
 that are inherently resizable, this method provides a way to
 determine the appropriate width given a desired height, or vice
 versa.  For non-resizable images, the true width and height
 are used.

  The default implementation simply returns
 (float)getWidth(imageIndex)/getHeight(imageIndex).

Parameters:
imageIndex - the index of the image to be queried.
Returns:
a float indicating the aspect ratio of the
 given image.
Throws:
IllegalStateException - if the input source has not been set.
IndexOutOfBoundsException - if the supplied index is
 out of bounds.
IOException - if an error occurs during reading.


"
ImageReader,getAvailableLocales(),Locale[],Returns an array of Locales that may be used to localize warning listeners and compression settings.,"

getAvailableLocales
public Locale[] getAvailableLocales()
Returns an array of Locales that may be used to
 localize warning listeners and compression settings.  A return
 value of null indicates that localization is not
 supported.

  The default implementation returns a clone of the
 availableLocales instance variable if it is
 non-null, or else returns null.

Returns:
an array of Locales that may be used as
 arguments to setLocale, or null.


"
ImageReader,getDefaultReadParam(),ImageReadParam,Returns a default ImageReadParam object appropriate for this format.,"

getDefaultReadParam
public ImageReadParam getDefaultReadParam()
Returns a default ImageReadParam object
 appropriate for this format.  All subclasses should define a
 set of default values for all parameters and return them with
 this call.  This method may be called before the input source
 is set.

  The default implementation constructs and returns a new
 ImageReadParam object that does not allow source
 scaling (i.e., it returns new
 ImageReadParam().

Returns:
an ImageReadParam object which may be used
 to control the decoding process using a set of default settings.


"
ImageReader,"getDestination(ImageReadParam param, Iterator<ImageTypeSpecifier> imageTypes, int width, int height)",protected static BufferedImage,Returns the BufferedImage to which decoded pixel data should be written.,"

getDestination
protected static BufferedImage getDestination(ImageReadParam param,
                                              Iterator<ImageTypeSpecifier> imageTypes,
                                              int width,
                                              int height)
                                       throws IIOException
Returns the BufferedImage to which decoded pixel
 data should be written.  The image is determined by inspecting
 the supplied ImageReadParam if it is
 non-null; if its getDestination
 method returns a non-null value, that image is
 simply returned.  Otherwise,
 param.getDestinationType method is called to
 determine if a particular image type has been specified.  If
 so, the returned ImageTypeSpecifier is used after
 checking that it is equal to one of those included in
 imageTypes.

  If param is null or the above
 steps have not yielded an image or an
 ImageTypeSpecifier, the first value obtained from
 the imageTypes parameter is used.  Typically, the
 caller will set imageTypes to the value of
 getImageTypes(imageIndex).

  Next, the dimensions of the image are determined by a call
 to computeRegions.  The actual width and height of
 the image being decoded are passed in as the width
 and height parameters.

Parameters:
param - an ImageReadParam to be used to get
 the destination image or image type, or null.
imageTypes - an Iterator of
 ImageTypeSpecifiers indicating the legal image
 types, with the default first.
width - the true width of the image or tile begin decoded.
height - the true width of the image or tile being decoded.
Returns:
the BufferedImage to which decoded pixel
 data should be written.
Throws:
IIOException - if the ImageTypeSpecifier
 specified by param does not match any of the legal
 ones from imageTypes.
IllegalArgumentException - if imageTypes
 is null or empty, or if an object not of type
 ImageTypeSpecifier is retrieved from it.
IllegalArgumentException - if the resulting image would
 have a width or height less than 1.
IllegalArgumentException - if the product of
 width and height is greater than
 Integer.MAX_VALUE.


"
ImageReader,getFormatName(),String,Returns a String identifying the format of the input source.,"

getFormatName
public String getFormatName()
                     throws IOException
Returns a String identifying the format of the
 input source.

  The default implementation returns
 originatingProvider.getFormatNames()[0].
 Implementations that may not have an originating service
 provider, or which desire a different naming policy should
 override this method.

Returns:
the format name, as a String.
Throws:
IOException - if an error occurs reading the
 information from the input source.


"
ImageReader,getHeight(int imageIndex),abstract int,Returns the height in pixels of the given image within the input source.,"

getHeight
public abstract int getHeight(int imageIndex)
                       throws IOException
Returns the height in pixels of the given image within the
 input source.

  If the image can be rendered to a user-specified size, then
 this method returns the default height.

Parameters:
imageIndex - the index of the image to be queried.
Returns:
the height of the image, as an int.
Throws:
IllegalStateException - if the input source has not been set.
IndexOutOfBoundsException - if the supplied index is
 out of bounds.
IOException - if an error occurs reading the height
 information from the input source.


"
ImageReader,getImageMetadata(int imageIndex),abstract IIOMetadata,"Returns an IIOMetadata object containing metadata associated with the given image, or null if the reader does not support reading metadata, is set to ignore metadata, or if no metadata is available.","

getImageMetadata
public abstract IIOMetadata getImageMetadata(int imageIndex)
                                      throws IOException
Returns an IIOMetadata object containing metadata
 associated with the given image, or null if the
 reader does not support reading metadata, is set to ignore
 metadata, or if no metadata is available.

Parameters:
imageIndex - the index of the image whose metadata is to
 be retrieved.
Returns:
an IIOMetadata object, or
 null.
Throws:
IllegalStateException - if the input source has not been
 set.
IndexOutOfBoundsException - if the supplied index is
 out of bounds.
IOException - if an error occurs during reading.


"
ImageReader,"getImageMetadata(int imageIndex, String formatName, Set<String> nodeNames)",IIOMetadata,"Returns an IIOMetadata object representing the metadata associated with the given image, or null if the reader does not support reading metadata or none is available.","

getImageMetadata
public IIOMetadata getImageMetadata(int imageIndex,
                                    String formatName,
                                    Set<String> nodeNames)
                             throws IOException
Returns an IIOMetadata object representing the
 metadata associated with the given image, or null
 if the reader does not support reading metadata or none
 is available.

  The resulting metadata object is only responsible for
 returning documents in the format named by
 formatName.  Within any documents that are
 returned, only nodes whose names are members of
 nodeNames are required to be returned.  In this
 way, the amount of metadata processing done by the reader may
 be kept to a minimum, based on what information is actually
 needed.

  If formatName is not the name of a supported
 metadata format, null may be returned.

  In all cases, it is legal to return a more capable metadata
 object than strictly necessary.  The format name and node names
 are merely hints that may be used to reduce the reader's
 workload.

  The default implementation simply returns the result of
 calling getImageMetadata(imageIndex), after
 checking that the format name is supported.  If it is not,
 null is returned.

Parameters:
imageIndex - the index of the image whose metadata is to
 be retrieved.
formatName - a metadata format name that may be used to retrieve
 a document from the returned IIOMetadata object.
nodeNames - a Set containing the names of
 nodes that may be contained in a retrieved document.
Returns:
an IIOMetadata object, or null.
Throws:
IllegalStateException - if the input source has not been
 set.
IndexOutOfBoundsException - if the supplied index is
 out of bounds.
IllegalArgumentException - if formatName
 is null.
IllegalArgumentException - if nodeNames
 is null.
IOException - if an error occurs during reading.


"
ImageReader,getImageTypes(int imageIndex),abstract Iterator<ImageTypeSpecifier>,"Returns an Iterator containing possible image types to which the given image may be decoded, in the form of ImageTypeSpecifierss.","

getImageTypes
public abstract Iterator<ImageTypeSpecifier> getImageTypes(int imageIndex)
                                                    throws IOException
Returns an Iterator containing possible image
 types to which the given image may be decoded, in the form of
 ImageTypeSpecifierss.  At least one legal image
 type will be returned.

  The first element of the iterator should be the most
 ""natural"" type for decoding the image with as little loss as
 possible.  For example, for a JPEG image the first entry should
 be an RGB image, even though the image data is stored
 internally in a YCbCr color space.

Parameters:
imageIndex - the index of the image to be
 retrieved.
Returns:
an Iterator containing at least one
 ImageTypeSpecifier representing suggested image
 types for decoding the current given image.
Throws:
IllegalStateException - if the input source has not been set.
IndexOutOfBoundsException - if the supplied index is
 out of bounds.
IOException - if an error occurs reading the format
 information from the input source.
See Also:
ImageReadParam.setDestination(BufferedImage), 
ImageReadParam.setDestinationType(ImageTypeSpecifier)


"
ImageReader,getInput(),Object,Returns the ImageInputStream or other Object previously set as the input source.,"

getInput
public Object getInput()
Returns the ImageInputStream or other
 Object previously set as the input source.  If the
 input source has not been set, null is returned.

Returns:
the Object that will be used for future
 decoding, or null.
See Also:
ImageInputStream, 
setInput(java.lang.Object, boolean, boolean)


"
ImageReader,getLocale(),Locale,"Returns the currently set Locale, or null if none has been set.","

getLocale
public Locale getLocale()
Returns the currently set Locale, or
 null if none has been set.

Returns:
the current Locale, or null.
See Also:
setLocale(java.util.Locale)


"
ImageReader,getMinIndex(),int,"Returns the lowest valid index for reading an image, thumbnail, or image metadata.","

getMinIndex
public int getMinIndex()
Returns the lowest valid index for reading an image, thumbnail,
 or image metadata.  If seekForwardOnly() is
 false, this value will typically remain 0,
 indicating that random access is possible.  Otherwise, it will
 contain the value of the most recently accessed index, and
 increase in a monotonic fashion.

Returns:
the minimum legal index for reading.


"
ImageReader,getNumImages(boolean allowSearch),abstract int,"Returns the number of images, not including thumbnails, available from the current input source.","

getNumImages
public abstract int getNumImages(boolean allowSearch)
                          throws IOException
Returns the number of images, not including thumbnails, available
 from the current input source.

  Note that some image formats (such as animated GIF) do not
 specify how many images are present in the stream.  Thus
 determining the number of images will require the entire stream
 to be scanned and may require memory for buffering.  If images
 are to be processed in order, it may be more efficient to
 simply call read with increasing indices until an
 IndexOutOfBoundsException is thrown to indicate
 that no more images are available.  The
 allowSearch parameter may be set to
 false to indicate that an exhaustive search is not
 desired; the return value will be -1 to indicate
 that a search is necessary.  If the input has been specified
 with seekForwardOnly set to true,
 this method throws an IllegalStateException if
 allowSearch is set to true.

Parameters:
allowSearch - if true, the true number of
 images will be returned even if a search is required.  If
 false, the reader may return -1
 without performing the search.
Returns:
the number of images, as an int, or
 -1 if allowSearch is
 false and a search would be required.
Throws:
IllegalStateException - if the input source has not been set,
 or if the input has been specified with seekForwardOnly
 set to true.
IOException - if an error occurs reading the
 information from the input source.
See Also:
setInput(java.lang.Object, boolean, boolean)


"
ImageReader,getNumThumbnails(int imageIndex),int,Returns the number of thumbnail preview images associated with the given image.,"

getNumThumbnails
public int getNumThumbnails(int imageIndex)
                     throws IOException
Returns the number of thumbnail preview images associated with
 the given image.  If the format does not support thumbnails,
 (readerSupportsThumbnails returns
 false), 0 will be returned regardless
 of whether an input source has been set or whether
 imageIndex is in bounds.

  The default implementation returns 0 without checking its
 argument.

Parameters:
imageIndex - the index of the image being queried.
Returns:
the number of thumbnails associated with the given
 image.
Throws:
IllegalStateException - if the reader supports
 thumbnails but the input source has not been set.
IndexOutOfBoundsException - if the reader supports
 thumbnails but imageIndex is out of bounds.
IOException - if an error occurs during reading.


"
ImageReader,getOriginatingProvider(),ImageReaderSpi,Returns the ImageReaderSpi that was passed in on the constructor.,"

getOriginatingProvider
public ImageReaderSpi getOriginatingProvider()
Returns the ImageReaderSpi that was passed in on
 the constructor.  Note that this value may be null.

Returns:
an ImageReaderSpi, or null.
See Also:
ImageReaderSpi


"
ImageReader,getRawImageType(int imageIndex),ImageTypeSpecifier,"Returns an ImageTypeSpecifier indicating the SampleModel and ColorModel which most closely represents the ""raw"" internal format of the image.","

getRawImageType
public ImageTypeSpecifier getRawImageType(int imageIndex)
                                   throws IOException
Returns an ImageTypeSpecifier indicating the
 SampleModel and ColorModel which most
 closely represents the ""raw"" internal format of the image.  For
 example, for a JPEG image the raw type might have a YCbCr color
 space even though the image would conventionally be transformed
 into an RGB color space prior to display.  The returned value
 should also be included in the list of values returned by
 getImageTypes.

  The default implementation simply returns the first entry
 from the list provided by getImageType.

Parameters:
imageIndex - the index of the image to be queried.
Returns:
an ImageTypeSpecifier.
Throws:
IllegalStateException - if the input source has not been set.
IndexOutOfBoundsException - if the supplied index is
 out of bounds.
IOException - if an error occurs reading the format
 information from the input source.


"
ImageReader,"getSourceRegion(ImageReadParam param, int srcWidth, int srcHeight)",protected static Rectangle,"A utility method that may be used by readers to compute the region of the source image that should be read, taking into account any source region and subsampling offset settings in the supplied ImageReadParam.","

getSourceRegion
protected static Rectangle getSourceRegion(ImageReadParam param,
                                           int srcWidth,
                                           int srcHeight)
A utility method that may be used by readers to compute the
 region of the source image that should be read, taking into
 account any source region and subsampling offset settings in
 the supplied ImageReadParam.  The actual
 subsampling factors, destination size, and destination offset
 are not taken into consideration, thus further
 clipping must take place.  The computeRegions
 method performs all necessary clipping.

Parameters:
param - the ImageReadParam being used, or
 null.
srcWidth - the width of the source image.
srcHeight - the height of the source image.
Returns:
the source region as a Rectangle.


"
ImageReader,getStreamMetadata(),abstract IIOMetadata,"Returns an IIOMetadata object representing the metadata associated with the input source as a whole (i.e., not associated with any particular image), or null if the reader does not support reading metadata, is set to ignore metadata, or if no metadata is available.","

getStreamMetadata
public abstract IIOMetadata getStreamMetadata()
                                       throws IOException
Returns an IIOMetadata object representing the
 metadata associated with the input source as a whole (i.e., not
 associated with any particular image), or null if
 the reader does not support reading metadata, is set to ignore
 metadata, or if no metadata is available.

Returns:
an IIOMetadata object, or null.
Throws:
IOException - if an error occurs during reading.


"
ImageReader,"getStreamMetadata(String formatName, Set<String> nodeNames)",IIOMetadata,"Returns an IIOMetadata object representing the metadata associated with the input source as a whole (i.e., not associated with any particular image).","

getStreamMetadata
public IIOMetadata getStreamMetadata(String formatName,
                                     Set<String> nodeNames)
                              throws IOException
Returns an IIOMetadata object representing the
 metadata associated with the input source as a whole (i.e.,
 not associated with any particular image).  If no such data
 exists, null is returned.

  The resulting metadata object is only responsible for
 returning documents in the format named by
 formatName.  Within any documents that are
 returned, only nodes whose names are members of
 nodeNames are required to be returned.  In this
 way, the amount of metadata processing done by the reader may
 be kept to a minimum, based on what information is actually
 needed.

  If formatName is not the name of a supported
 metadata format, null is returned.

  In all cases, it is legal to return a more capable metadata
 object than strictly necessary.  The format name and node names
 are merely hints that may be used to reduce the reader's
 workload.

  The default implementation simply returns the result of
 calling getStreamMetadata(), after checking that
 the format name is supported.  If it is not,
 null is returned.

Parameters:
formatName - a metadata format name that may be used to retrieve
 a document from the returned IIOMetadata object.
nodeNames - a Set containing the names of
 nodes that may be contained in a retrieved document.
Returns:
an IIOMetadata object, or null.
Throws:
IllegalArgumentException - if formatName
 is null.
IllegalArgumentException - if nodeNames
 is null.
IOException - if an error occurs during reading.


"
ImageReader,"getThumbnailHeight(int imageIndex, int thumbnailIndex)",int,"Returns the height of the thumbnail preview image indexed by thumbnailIndex, associated with the image indexed by ImageIndex.","

getThumbnailHeight
public int getThumbnailHeight(int imageIndex,
                              int thumbnailIndex)
                       throws IOException
Returns the height of the thumbnail preview image indexed by
 thumbnailIndex, associated with the image indexed
 by ImageIndex.

  If the reader does not support thumbnails,
 (readerSupportsThumbnails returns
 false), an UnsupportedOperationException
 will be thrown.

  The default implementation simply returns
 readThumbnail(imageindex,
 thumbnailIndex).getHeight().  Subclasses should
 therefore override this method if possible in order to avoid
 forcing the thumbnail to be read.

Parameters:
imageIndex - the index of the image to be retrieved.
thumbnailIndex - the index of the thumbnail to be retrieved.
Returns:
the height of the desired thumbnail as an int.
Throws:
UnsupportedOperationException - if thumbnails are not
 supported.
IllegalStateException - if the input source has not been set.
IndexOutOfBoundsException - if either of the supplied
 indices are out of bounds.
IOException - if an error occurs during reading.


"
ImageReader,"getThumbnailWidth(int imageIndex, int thumbnailIndex)",int,"Returns the width of the thumbnail preview image indexed by thumbnailIndex, associated with the image indexed by ImageIndex.","

getThumbnailWidth
public int getThumbnailWidth(int imageIndex,
                             int thumbnailIndex)
                      throws IOException
Returns the width of the thumbnail preview image indexed by
 thumbnailIndex, associated with the image indexed
 by ImageIndex.

  If the reader does not support thumbnails,
 (readerSupportsThumbnails returns
 false), an UnsupportedOperationException
 will be thrown.

  The default implementation simply returns
 readThumbnail(imageindex,
 thumbnailIndex).getWidth().  Subclasses should therefore
 override this method if possible in order to avoid forcing the
 thumbnail to be read.

Parameters:
imageIndex - the index of the image to be retrieved.
thumbnailIndex - the index of the thumbnail to be retrieved.
Returns:
the width of the desired thumbnail as an int.
Throws:
UnsupportedOperationException - if thumbnails are not
 supported.
IllegalStateException - if the input source has not been set.
IndexOutOfBoundsException - if either of the supplied
 indices are out of bounds.
IOException - if an error occurs during reading.


"
ImageReader,getTileGridXOffset(int imageIndex),int,"Returns the X coordinate of the upper-left corner of tile (0, 0) in the given image.","

getTileGridXOffset
public int getTileGridXOffset(int imageIndex)
                       throws IOException
Returns the X coordinate of the upper-left corner of tile (0,
 0) in the given image.

  A reader for which the tile grid X offset always has the
 same value (usually 0), may return the value without accessing
 any image data.  In such cases, it is not necessary to throw an
 exception even if no input source has been set or the image
 index is out of bounds.

  The default implementation simply returns 0, which is
 correct for non-tiled images and tiled images in most formats.
 Readers that support tiling with non-(0, 0) offsets should
 override this method.

Parameters:
imageIndex - the index of the image to be queried.
Returns:
the X offset of the tile grid.
Throws:
IllegalStateException - if an input source is required
 to determine the return value, but none has been set.
IndexOutOfBoundsException - if an image must be
 accessed to determine the return value, but the supplied index
 is out of bounds.
IOException - if an error occurs during reading.


"
ImageReader,getTileGridYOffset(int imageIndex),int,"Returns the Y coordinate of the upper-left corner of tile (0, 0) in the given image.","

getTileGridYOffset
public int getTileGridYOffset(int imageIndex)
                       throws IOException
Returns the Y coordinate of the upper-left corner of tile (0,
 0) in the given image.

  A reader for which the tile grid Y offset always has the
 same value (usually 0), may return the value without accessing
 any image data.  In such cases, it is not necessary to throw an
 exception even if no input source has been set or the image
 index is out of bounds.

  The default implementation simply returns 0, which is
 correct for non-tiled images and tiled images in most formats.
 Readers that support tiling with non-(0, 0) offsets should
 override this method.

Parameters:
imageIndex - the index of the image to be queried.
Returns:
the Y offset of the tile grid.
Throws:
IllegalStateException - if an input source is required
 to determine the return value, but none has been set.
IndexOutOfBoundsException - if an image must be
 accessed to determine the return value, but the supplied index
 is out of bounds.
IOException - if an error occurs during reading.


"
ImageReader,getTileHeight(int imageIndex),int,Returns the height of a tile in the given image.,"

getTileHeight
public int getTileHeight(int imageIndex)
                  throws IOException
Returns the height of a tile in the given image.

  The default implementation simply returns
 getHeight(imageIndex), which is correct for
 non-tiled images.  Readers that support tiling should override
 this method.

Parameters:
imageIndex - the index of the image to be queried.
Returns:
the height of a tile.
Throws:
IllegalStateException - if the input source has not been set.
IndexOutOfBoundsException - if the supplied index is
 out of bounds.
IOException - if an error occurs during reading.


"
ImageReader,getTileWidth(int imageIndex),int,Returns the width of a tile in the given image.,"

getTileWidth
public int getTileWidth(int imageIndex)
                 throws IOException
Returns the width of a tile in the given image.

  The default implementation simply returns
 getWidth(imageIndex), which is correct for
 non-tiled images.  Readers that support tiling should override
 this method.

Parameters:
imageIndex - the index of the image to be queried.
Returns:
the width of a tile.
Throws:
IllegalStateException - if the input source has not been set.
IndexOutOfBoundsException - if the supplied index is
 out of bounds.
IOException - if an error occurs during reading.


"
ImageReader,getWidth(int imageIndex),abstract int,Returns the width in pixels of the given image within the input source.,"

getWidth
public abstract int getWidth(int imageIndex)
                      throws IOException
Returns the width in pixels of the given image within the input
 source.

  If the image can be rendered to a user-specified size, then
 this method returns the default width.

Parameters:
imageIndex - the index of the image to be queried.
Returns:
the width of the image, as an int.
Throws:
IllegalStateException - if the input source has not been set.
IndexOutOfBoundsException - if the supplied index is
 out of bounds.
IOException - if an error occurs reading the width
 information from the input source.


"
ImageReader,hasThumbnails(int imageIndex),boolean,Returns true if the given image has thumbnail preview images associated with it.,"

hasThumbnails
public boolean hasThumbnails(int imageIndex)
                      throws IOException
Returns true if the given image has thumbnail
 preview images associated with it.  If the format does not
 support thumbnails (readerSupportsThumbnails
 returns false), false will be
 returned regardless of whether an input source has been set or
 whether imageIndex is in bounds.

  The default implementation returns true if
 getNumThumbnails returns a value greater than 0.

Parameters:
imageIndex - the index of the image being queried.
Returns:
true if the given image has thumbnails.
Throws:
IllegalStateException - if the reader supports
 thumbnails but the input source has not been set.
IndexOutOfBoundsException - if the reader supports
 thumbnails but imageIndex is out of bounds.
IOException - if an error occurs during reading.


"
ImageReader,isIgnoringMetadata(),boolean,Returns true if the current input source has been marked as allowing metadata to be ignored by passing true as the ignoreMetadata argument to the setInput method.,"

isIgnoringMetadata
public boolean isIgnoringMetadata()
Returns true if the current input source has been
 marked as allowing metadata to be ignored by passing
 true as the ignoreMetadata argument
 to the setInput method.

Returns:
true if the metadata may be ignored.
See Also:
setInput(java.lang.Object, boolean, boolean)


"
ImageReader,isImageTiled(int imageIndex),boolean,"Returns true if the image is organized into tiles, that is, equal-sized non-overlapping rectangles.","

isImageTiled
public boolean isImageTiled(int imageIndex)
                     throws IOException
Returns true if the image is organized into
 tiles, that is, equal-sized non-overlapping rectangles.

  A reader plug-in may choose whether or not to expose tiling
 that is present in the image as it is stored.  It may even
 choose to advertise tiling when none is explicitly present.  In
 general, tiling should only be advertised if there is some
 advantage (in speed or space) to accessing individual tiles.
 Regardless of whether the reader advertises tiling, it must be
 capable of reading an arbitrary rectangular region specified in
 an ImageReadParam.

  A reader for which all images are guaranteed to be tiled,
 or are guaranteed not to be tiled, may return true
 or false respectively without accessing any image
 data.  In such cases, it is not necessary to throw an exception
 even if no input source has been set or the image index is out
 of bounds.

  The default implementation just returns false.

Parameters:
imageIndex - the index of the image to be queried.
Returns:
true if the image is tiled.
Throws:
IllegalStateException - if an input source is required
 to determine the return value, but none has been set.
IndexOutOfBoundsException - if an image must be
 accessed to determine the return value, but the supplied index
 is out of bounds.
IOException - if an error occurs during reading.


"
ImageReader,isRandomAccessEasy(int imageIndex),boolean,Returns true if the storage format of the given image places no inherent impediment on random access to pixels.,"

isRandomAccessEasy
public boolean isRandomAccessEasy(int imageIndex)
                           throws IOException
Returns true if the storage format of the given
 image places no inherent impediment on random access to pixels.
 For most compressed formats, such as JPEG, this method should
 return false, as a large section of the image in
 addition to the region of interest may need to be decoded.

  This is merely a hint for programs that wish to be
 efficient; all readers must be able to read arbitrary regions
 as specified in an ImageReadParam.

  Note that formats that return false from
 this method may nonetheless allow tiling (e.g. Restart
 Markers in JPEG), and random access will likely be reasonably
 efficient on tiles.  See isImageTiled.

  A reader for which all images are guaranteed to support
 easy random access, or are guaranteed not to support easy
 random access, may return true or
 false respectively without accessing any image
 data.  In such cases, it is not necessary to throw an exception
 even if no input source has been set or the image index is out
 of bounds.

  The default implementation returns false.

Parameters:
imageIndex - the index of the image to be queried.
Returns:
true if reading a region of interest of
 the given image is likely to be efficient.
Throws:
IllegalStateException - if an input source is required
 to determine the return value, but none has been set.
IndexOutOfBoundsException - if an image must be
 accessed to determine the return value, but the supplied index
 is out of bounds.
IOException - if an error occurs during reading.


"
ImageReader,isSeekForwardOnly(),boolean,Returns true if the current input source has been marked as seek forward only by passing true as the seekForwardOnly argument to the setInput method.,"

isSeekForwardOnly
public boolean isSeekForwardOnly()
Returns true if the current input source has been
 marked as seek forward only by passing true as the
 seekForwardOnly argument to the
 setInput method.

Returns:
true if the input source is seek forward
 only.
See Also:
setInput(java.lang.Object, boolean, boolean)


"
ImageReader,processImageComplete(),protected void,Broadcasts the completion of an image read to all registered IIOReadProgressListeners by calling their imageComplete method.,"

processImageComplete
protected void processImageComplete()
Broadcasts the completion of an image read to all registered
 IIOReadProgressListeners by calling their
 imageComplete method.  Subclasses may use this
 method as a convenience.

"
ImageReader,processImageProgress(float percentageDone),protected void,Broadcasts the current percentage of image completion to all registered IIOReadProgressListeners by calling their imageProgress method.,"

processImageProgress
protected void processImageProgress(float percentageDone)
Broadcasts the current percentage of image completion to all
 registered IIOReadProgressListeners by calling
 their imageProgress method.  Subclasses may use
 this method as a convenience.

Parameters:
percentageDone - the current percentage of completion,
 as a float.


"
ImageReader,processImageStarted(int imageIndex),protected void,Broadcasts the start of an image read to all registered IIOReadProgressListeners by calling their imageStarted method.,"

processImageStarted
protected void processImageStarted(int imageIndex)
Broadcasts the start of an image read to all registered
 IIOReadProgressListeners by calling their
 imageStarted method.  Subclasses may use this
 method as a convenience.

Parameters:
imageIndex - the index of the image about to be read.


"
ImageReader,"processImageUpdate(BufferedImage theImage, int minX, int minY, int width, int height, int periodX, int periodY, int[] bands)",protected void,Broadcasts the update of a set of samples to all registered IIOReadUpdateListeners by calling their imageUpdate method.,"

processImageUpdate
protected void processImageUpdate(BufferedImage theImage,
                                  int minX,
                                  int minY,
                                  int width,
                                  int height,
                                  int periodX,
                                  int periodY,
                                  int[] bands)
Broadcasts the update of a set of samples to all registered
 IIOReadUpdateListeners by calling their
 imageUpdate method.  Subclasses may use this
 method as a convenience.

Parameters:
theImage - the BufferedImage being updated.
minX - the X coordinate of the upper-left pixel included
 in the pass.
minY - the X coordinate of the upper-left pixel included
 in the pass.
width - the total width of the area being updated, including
 pixels being skipped if periodX > 1.
height - the total height of the area being updated,
 including pixels being skipped if periodY > 1.
periodX - the horizontal separation between pixels.
periodY - the vertical separation between pixels.
bands - an array of ints indicating the
 set of affected bands of the destination.


"
ImageReader,processPassComplete(BufferedImage theImage),protected void,Broadcasts the end of a progressive pass to all registered IIOReadUpdateListeners by calling their passComplete method.,"

processPassComplete
protected void processPassComplete(BufferedImage theImage)
Broadcasts the end of a progressive pass to all
 registered IIOReadUpdateListeners by calling their
 passComplete method.  Subclasses may use this
 method as a convenience.

Parameters:
theImage - the BufferedImage being updated.


"
ImageReader,"processPassStarted(BufferedImage theImage, int pass, int minPass, int maxPass, int minX, int minY, int periodX, int periodY, int[] bands)",protected void,Broadcasts the beginning of a progressive pass to all registered IIOReadUpdateListeners by calling their passStarted method.,"

processPassStarted
protected void processPassStarted(BufferedImage theImage,
                                  int pass,
                                  int minPass,
                                  int maxPass,
                                  int minX,
                                  int minY,
                                  int periodX,
                                  int periodY,
                                  int[] bands)
Broadcasts the beginning of a progressive pass to all
 registered IIOReadUpdateListeners by calling their
 passStarted method.  Subclasses may use this
 method as a convenience.

Parameters:
theImage - the BufferedImage being updated.
pass - the index of the current pass, starting with 0.
minPass - the index of the first pass that will be decoded.
maxPass - the index of the last pass that will be decoded.
minX - the X coordinate of the upper-left pixel included
 in the pass.
minY - the X coordinate of the upper-left pixel included
 in the pass.
periodX - the horizontal separation between pixels.
periodY - the vertical separation between pixels.
bands - an array of ints indicating the
 set of affected bands of the destination.


"
ImageReader,processReadAborted(),protected void,Broadcasts that the read has been aborted to all registered IIOReadProgressListeners by calling their readAborted method.,"

processReadAborted
protected void processReadAborted()
Broadcasts that the read has been aborted to all registered
 IIOReadProgressListeners by calling their
 readAborted method.  Subclasses may use this
 method as a convenience.

"
ImageReader,processSequenceComplete(),protected void,Broadcasts the completion of an sequence of image reads to all registered IIOReadProgressListeners by calling their sequenceComplete method.,"

processSequenceComplete
protected void processSequenceComplete()
Broadcasts the completion of an sequence of image reads to all
 registered IIOReadProgressListeners by calling
 their sequenceComplete method.  Subclasses may use
 this method as a convenience.

"
ImageReader,processSequenceStarted(int minIndex),protected void,Broadcasts the start of an sequence of image reads to all registered IIOReadProgressListeners by calling their sequenceStarted method.,"

processSequenceStarted
protected void processSequenceStarted(int minIndex)
Broadcasts the start of an sequence of image reads to all
 registered IIOReadProgressListeners by calling
 their sequenceStarted method.  Subclasses may use
 this method as a convenience.

Parameters:
minIndex - the lowest index being read.


"
ImageReader,processThumbnailComplete(),protected void,Broadcasts the completion of a thumbnail read to all registered IIOReadProgressListeners by calling their thumbnailComplete method.,"

processThumbnailComplete
protected void processThumbnailComplete()
Broadcasts the completion of a thumbnail read to all registered
 IIOReadProgressListeners by calling their
 thumbnailComplete method.  Subclasses may use this
 method as a convenience.

"
ImageReader,processThumbnailPassComplete(BufferedImage theThumbnail),protected void,Broadcasts the end of a thumbnail progressive pass to all registered IIOReadUpdateListeners by calling their thumbnailPassComplete method.,"

processThumbnailPassComplete
protected void processThumbnailPassComplete(BufferedImage theThumbnail)
Broadcasts the end of a thumbnail progressive pass to all
 registered IIOReadUpdateListeners by calling their
 thumbnailPassComplete method.  Subclasses may use this
 method as a convenience.

Parameters:
theThumbnail - the BufferedImage thumbnail
 being updated.


"
ImageReader,"processThumbnailPassStarted(BufferedImage theThumbnail, int pass, int minPass, int maxPass, int minX, int minY, int periodX, int periodY, int[] bands)",protected void,Broadcasts the beginning of a thumbnail progressive pass to all registered IIOReadUpdateListeners by calling their thumbnailPassStarted method.,"

processThumbnailPassStarted
protected void processThumbnailPassStarted(BufferedImage theThumbnail,
                                           int pass,
                                           int minPass,
                                           int maxPass,
                                           int minX,
                                           int minY,
                                           int periodX,
                                           int periodY,
                                           int[] bands)
Broadcasts the beginning of a thumbnail progressive pass to all
 registered IIOReadUpdateListeners by calling their
 thumbnailPassStarted method.  Subclasses may use this
 method as a convenience.

Parameters:
theThumbnail - the BufferedImage thumbnail
 being updated.
pass - the index of the current pass, starting with 0.
minPass - the index of the first pass that will be decoded.
maxPass - the index of the last pass that will be decoded.
minX - the X coordinate of the upper-left pixel included
 in the pass.
minY - the X coordinate of the upper-left pixel included
 in the pass.
periodX - the horizontal separation between pixels.
periodY - the vertical separation between pixels.
bands - an array of ints indicating the
 set of affected bands of the destination.


"
ImageReader,processThumbnailProgress(float percentageDone),protected void,Broadcasts the current percentage of thumbnail completion to all registered IIOReadProgressListeners by calling their thumbnailProgress method.,"

processThumbnailProgress
protected void processThumbnailProgress(float percentageDone)
Broadcasts the current percentage of thumbnail completion to
 all registered IIOReadProgressListeners by calling
 their thumbnailProgress method.  Subclasses may
 use this method as a convenience.

Parameters:
percentageDone - the current percentage of completion,
 as a float.


"
ImageReader,"processThumbnailStarted(int imageIndex, int thumbnailIndex)",protected void,Broadcasts the start of a thumbnail read to all registered IIOReadProgressListeners by calling their thumbnailStarted method.,"

processThumbnailStarted
protected void processThumbnailStarted(int imageIndex,
                                       int thumbnailIndex)
Broadcasts the start of a thumbnail read to all registered
 IIOReadProgressListeners by calling their
 thumbnailStarted method.  Subclasses may use this
 method as a convenience.

Parameters:
imageIndex - the index of the image associated with the
 thumbnail.
thumbnailIndex - the index of the thumbnail.


"
ImageReader,"processThumbnailUpdate(BufferedImage theThumbnail, int minX, int minY, int width, int height, int periodX, int periodY, int[] bands)",protected void,Broadcasts the update of a set of samples in a thumbnail image to all registered IIOReadUpdateListeners by calling their thumbnailUpdate method.,"

processThumbnailUpdate
protected void processThumbnailUpdate(BufferedImage theThumbnail,
                                      int minX,
                                      int minY,
                                      int width,
                                      int height,
                                      int periodX,
                                      int periodY,
                                      int[] bands)
Broadcasts the update of a set of samples in a thumbnail image
 to all registered IIOReadUpdateListeners by
 calling their thumbnailUpdate method.  Subclasses may
 use this method as a convenience.

Parameters:
theThumbnail - the BufferedImage thumbnail
 being updated.
minX - the X coordinate of the upper-left pixel included
 in the pass.
minY - the X coordinate of the upper-left pixel included
 in the pass.
width - the total width of the area being updated, including
 pixels being skipped if periodX > 1.
height - the total height of the area being updated,
 including pixels being skipped if periodY > 1.
periodX - the horizontal separation between pixels.
periodY - the vertical separation between pixels.
bands - an array of ints indicating the
 set of affected bands of the destination.


"
ImageReader,processWarningOccurred(String warning),protected void,Broadcasts a warning message to all registered IIOReadWarningListeners by calling their warningOccurred method.,"

processWarningOccurred
protected void processWarningOccurred(String warning)
Broadcasts a warning message to all registered
 IIOReadWarningListeners by calling their
 warningOccurred method.  Subclasses may use this
 method as a convenience.

Parameters:
warning - the warning message to send.
Throws:
IllegalArgumentException - if warning
 is null.


"
ImageReader,"processWarningOccurred(String baseName, String keyword)",protected void,Broadcasts a localized warning message to all registered IIOReadWarningListeners by calling their warningOccurred method with a string taken from a ResourceBundle.,"

processWarningOccurred
protected void processWarningOccurred(String baseName,
                                      String keyword)
Broadcasts a localized warning message to all registered
 IIOReadWarningListeners by calling their
 warningOccurred method with a string taken
 from a ResourceBundle.  Subclasses may use this
 method as a convenience.

Parameters:
baseName - the base name of a set of
 ResourceBundles containing localized warning
 messages.
keyword - the keyword used to index the warning message
 within the set of ResourceBundles.
Throws:
IllegalArgumentException - if baseName
 is null.
IllegalArgumentException - if keyword
 is null.
IllegalArgumentException - if no appropriate
 ResourceBundle may be located.
IllegalArgumentException - if the named resource is
 not found in the located ResourceBundle.
IllegalArgumentException - if the object retrieved
 from the ResourceBundle is not a
 String.


"
ImageReader,read(int imageIndex),BufferedImage,"Reads the image indexed by imageIndex and returns it as a complete BufferedImage, using a default ImageReadParam.","

read
public BufferedImage read(int imageIndex)
                   throws IOException
Reads the image indexed by imageIndex and returns
 it as a complete BufferedImage, using a default
 ImageReadParam.  This is a convenience method
 that calls read(imageIndex, null).

  The image returned will be formatted according to the first
 ImageTypeSpecifier returned from
 getImageTypes.

  Any registered IIOReadProgressListener objects
 will be notified by calling their imageStarted
 method, followed by calls to their imageProgress
 method as the read progresses.  Finally their
 imageComplete method will be called.
 IIOReadUpdateListener objects may be updated at
 other times during the read as pixels are decoded.  Finally,
 IIOReadWarningListener objects will receive
 notification of any non-fatal warnings that occur during
 decoding.

Parameters:
imageIndex - the index of the image to be retrieved.
Returns:
the desired portion of the image as a
 BufferedImage.
Throws:
IllegalStateException - if the input source has not been
 set.
IndexOutOfBoundsException - if the supplied index is
 out of bounds.
IOException - if an error occurs during reading.


"
ImageReader,"read(int imageIndex, ImageReadParam param)",abstract BufferedImage,"Reads the image indexed by imageIndex and returns it as a complete BufferedImage, using a supplied ImageReadParam.","

read
public abstract BufferedImage read(int imageIndex,
                                   ImageReadParam param)
                            throws IOException
Reads the image indexed by imageIndex and returns
 it as a complete BufferedImage, using a supplied
 ImageReadParam.

  The actual BufferedImage returned will be
 chosen using the algorithm defined by the
 getDestination method.

  Any registered IIOReadProgressListener objects
 will be notified by calling their imageStarted
 method, followed by calls to their imageProgress
 method as the read progresses.  Finally their
 imageComplete method will be called.
 IIOReadUpdateListener objects may be updated at
 other times during the read as pixels are decoded.  Finally,
 IIOReadWarningListener objects will receive
 notification of any non-fatal warnings that occur during
 decoding.

  The set of source bands to be read and destination bands to
 be written is determined by calling getSourceBands
 and getDestinationBands on the supplied
 ImageReadParam.  If the lengths of the arrays
 returned by these methods differ, the set of source bands
 contains an index larger that the largest available source
 index, or the set of destination bands contains an index larger
 than the largest legal destination index, an
 IllegalArgumentException is thrown.

  If the supplied ImageReadParam contains
 optional setting values not supported by this reader (e.g.
 source render size or any format-specific settings), they will
 be ignored.

Parameters:
imageIndex - the index of the image to be retrieved.
param - an ImageReadParam used to control
 the reading process, or null.
Returns:
the desired portion of the image as a
 BufferedImage.
Throws:
IllegalStateException - if the input source has not been
 set.
IndexOutOfBoundsException - if the supplied index is
 out of bounds.
IllegalArgumentException - if the set of source and
 destination bands specified by
 param.getSourceBands and
 param.getDestinationBands differ in length or
 include indices that are out of bounds.
IllegalArgumentException - if the resulting image would
 have a width or height less than 1.
IOException - if an error occurs during reading.


"
ImageReader,"readAll(int imageIndex, ImageReadParam param)",IIOImage,"Reads the image indexed by imageIndex and returns an IIOImage containing the image, thumbnails, and associated image metadata, using a supplied ImageReadParam.","

readAll
public IIOImage readAll(int imageIndex,
                        ImageReadParam param)
                 throws IOException
Reads the image indexed by imageIndex and returns
 an IIOImage containing the image, thumbnails, and
 associated image metadata, using a supplied
 ImageReadParam.

  The actual BufferedImage referenced by the
 returned IIOImage will be chosen using the
 algorithm defined by the getDestination method.

  Any registered IIOReadProgressListener objects
 will be notified by calling their imageStarted
 method, followed by calls to their imageProgress
 method as the read progresses.  Finally their
 imageComplete method will be called.
 IIOReadUpdateListener objects may be updated at
 other times during the read as pixels are decoded.  Finally,
 IIOReadWarningListener objects will receive
 notification of any non-fatal warnings that occur during
 decoding.

  The set of source bands to be read and destination bands to
 be written is determined by calling getSourceBands
 and getDestinationBands on the supplied
 ImageReadParam.  If the lengths of the arrays
 returned by these methods differ, the set of source bands
 contains an index larger that the largest available source
 index, or the set of destination bands contains an index larger
 than the largest legal destination index, an
 IllegalArgumentException is thrown.

  Thumbnails will be returned in their entirety regardless of
 the region settings.

  If the supplied ImageReadParam contains
 optional setting values not supported by this reader (e.g.
 source render size or any format-specific settings), those
 values will be ignored.

Parameters:
imageIndex - the index of the image to be retrieved.
param - an ImageReadParam used to control
 the reading process, or null.
Returns:
an IIOImage containing the desired portion
 of the image, a set of thumbnails, and associated image
 metadata.
Throws:
IllegalStateException - if the input source has not been
 set.
IndexOutOfBoundsException - if the supplied index is
 out of bounds.
IllegalArgumentException - if the set of source and
 destination bands specified by
 param.getSourceBands and
 param.getDestinationBands differ in length or
 include indices that are out of bounds.
IllegalArgumentException - if the resulting image
 would have a width or height less than 1.
IOException - if an error occurs during reading.


"
ImageReader,readAll(Iterator<? extends ImageReadParam> params),Iterator<IIOImage>,"Returns an Iterator containing all the images, thumbnails, and metadata, starting at the index given by getMinIndex, from the input source in the form of IIOImage objects.","

readAll
public Iterator<IIOImage> readAll(Iterator<? extends ImageReadParam> params)
                           throws IOException
Returns an Iterator containing all the images,
 thumbnails, and metadata, starting at the index given by
 getMinIndex, from the input source in the form of
 IIOImage objects.  An Iterator
 containing ImageReadParam objects is supplied; one
 element is consumed for each image read from the input source
 until no more images are available.  If the read param
 Iterator runs out of elements, but there are still
 more images available from the input source, default read
 params are used for the remaining images.

  If params is null, a default read
 param will be used for all images.

  The actual BufferedImage referenced by the
 returned IIOImage will be chosen using the
 algorithm defined by the getDestination method.

  Any registered IIOReadProgressListener objects
 will be notified by calling their sequenceStarted
 method once.  Then, for each image decoded, there will be a
 call to imageStarted, followed by calls to
 imageProgress as the read progresses, and finally
 to imageComplete.  The
 sequenceComplete method will be called after the
 last image has been decoded.
 IIOReadUpdateListener objects may be updated at
 other times during the read as pixels are decoded.  Finally,
 IIOReadWarningListener objects will receive
 notification of any non-fatal warnings that occur during
 decoding.

  The set of source bands to be read and destination bands to
 be written is determined by calling getSourceBands
 and getDestinationBands on the supplied
 ImageReadParam.  If the lengths of the arrays
 returned by these methods differ, the set of source bands
 contains an index larger that the largest available source
 index, or the set of destination bands contains an index larger
 than the largest legal destination index, an
 IllegalArgumentException is thrown.

  Thumbnails will be returned in their entirety regardless of the
 region settings.

  If any of the supplied ImageReadParams contain
 optional setting values not supported by this reader (e.g.
 source render size or any format-specific settings), they will
 be ignored.

Parameters:
params - an Iterator containing
 ImageReadParam objects.
Returns:
an Iterator representing the
 contents of the input source as IIOImages.
Throws:
IllegalStateException - if the input source has not been
 set.
IllegalArgumentException - if any
 non-null element of params is not an
 ImageReadParam.
IllegalArgumentException - if the set of source and
 destination bands specified by
 param.getSourceBands and
 param.getDestinationBands differ in length or
 include indices that are out of bounds.
IllegalArgumentException - if a resulting image would
 have a width or height less than 1.
IOException - if an error occurs during reading.
See Also:
ImageReadParam, 
IIOImage


"
ImageReader,"readAsRenderedImage(int imageIndex, ImageReadParam param)",RenderedImage,Returns a RenderedImage object that contains the contents of the image indexed by imageIndex.,"

readAsRenderedImage
public RenderedImage readAsRenderedImage(int imageIndex,
                                         ImageReadParam param)
                                  throws IOException
Returns a RenderedImage object that contains the
 contents of the image indexed by imageIndex.  By
 default, the returned image is simply the
 BufferedImage returned by read(imageIndex,
 param).

  The semantics of this method may differ from those of the
 other read methods in several ways.  First, any
 destination image and/or image type set in the
 ImageReadParam may be ignored.  Second, the usual
 listener calls are not guaranteed to be made, or to be
 meaningful if they are.  This is because the returned image may
 not be fully populated with pixel data at the time it is
 returned, or indeed at any time.

  If the supplied ImageReadParam contains
 optional setting values not supported by this reader (e.g.
 source render size or any format-specific settings), they will
 be ignored.

  The default implementation just calls
 read(imageIndex, param).

Parameters:
imageIndex - the index of the image to be retrieved.
param - an ImageReadParam used to control
 the reading process, or null.
Returns:
a RenderedImage object providing a view of
 the image.
Throws:
IllegalStateException - if the input source has not been
 set.
IndexOutOfBoundsException - if the supplied index is
 out of bounds.
IllegalArgumentException - if the set of source and
 destination bands specified by
 param.getSourceBands and
 param.getDestinationBands differ in length or
 include indices that are out of bounds.
IllegalArgumentException - if the resulting image
 would have a width or height less than 1.
IOException - if an error occurs during reading.


"
ImageReader,readerSupportsThumbnails(),boolean,Returns true if the image format understood by this reader supports thumbnail preview images associated with it.,"

readerSupportsThumbnails
public boolean readerSupportsThumbnails()
Returns true if the image format understood by
 this reader supports thumbnail preview images associated with
 it.  The default implementation returns false.

  If this method returns false,
 hasThumbnails and getNumThumbnails
 will return false and 0,
 respectively, and readThumbnail will throw an
 UnsupportedOperationException, regardless of their
 arguments.

  A reader that does not support thumbnails need not
 implement any of the thumbnail-related methods.

Returns:
true if thumbnails are supported.


"
ImageReader,"readRaster(int imageIndex, ImageReadParam param)",Raster,"Returns a new Raster object containing the raw pixel data from the image stream, without any color conversion applied.","

readRaster
public Raster readRaster(int imageIndex,
                         ImageReadParam param)
                  throws IOException
Returns a new Raster object containing the raw pixel data
 from the image stream, without any color conversion applied.  The
 application must determine how to interpret the pixel data by other
 means.  Any destination or image-type parameters in the supplied
 ImageReadParam object are ignored, but all other
 parameters are used exactly as in the read
 method, except that any destination offset is used as a logical rather
 than a physical offset.  The size of the returned Raster
 will always be that of the source region clipped to the actual image.
 Logical offsets in the stream itself are ignored.

  This method allows formats that normally apply a color
 conversion, such as JPEG, and formats that do not normally have an
 associated colorspace, such as remote sensing or medical imaging data,
 to provide access to raw pixel data.

  Any registered readUpdateListeners are ignored, as
 there is no BufferedImage, but all other listeners are
 called exactly as they are for the read method.

  If canReadRaster() returns
 false, this method throws an
 UnsupportedOperationException.

  If the supplied ImageReadParam contains
 optional setting values not supported by this reader (e.g.
 source render size or any format-specific settings), they will
 be ignored.

  The default implementation throws an
 UnsupportedOperationException.

Parameters:
imageIndex - the index of the image to be read.
param - an ImageReadParam used to control
 the reading process, or null.
Returns:
the desired portion of the image as a
 Raster.
Throws:
UnsupportedOperationException - if this plug-in does not
 support reading raw Rasters.
IllegalStateException - if the input source has not been
 set.
IndexOutOfBoundsException - if the supplied index is
 out of bounds.
IOException - if an error occurs during reading.
See Also:
canReadRaster(), 
read(int), 
Raster


"
ImageReader,"readThumbnail(int imageIndex, int thumbnailIndex)",BufferedImage,"Returns the thumbnail preview image indexed by thumbnailIndex, associated with the image indexed by ImageIndex as a BufferedImage.","

readThumbnail
public BufferedImage readThumbnail(int imageIndex,
                                   int thumbnailIndex)
                            throws IOException
Returns the thumbnail preview image indexed by
 thumbnailIndex, associated with the image indexed
 by ImageIndex as a BufferedImage.

  Any registered IIOReadProgressListener objects
 will be notified by calling their
 thumbnailStarted, thumbnailProgress,
 and thumbnailComplete methods.

  If the reader does not support thumbnails,
 (readerSupportsThumbnails returns
 false), an UnsupportedOperationException
 will be thrown regardless of whether an input source has been
 set or whether the indices are in bounds.

  The default implementation throws an
 UnsupportedOperationException.

Parameters:
imageIndex - the index of the image to be retrieved.
thumbnailIndex - the index of the thumbnail to be retrieved.
Returns:
the desired thumbnail as a BufferedImage.
Throws:
UnsupportedOperationException - if thumbnails are not
 supported.
IllegalStateException - if the input source has not been set.
IndexOutOfBoundsException - if either of the supplied
 indices are out of bounds.
IOException - if an error occurs during reading.


"
ImageReader,"readTile(int imageIndex, int tileX, int tileY)",BufferedImage,"Reads the tile indicated by the tileX and tileY arguments, returning it as a BufferedImage.","

readTile
public BufferedImage readTile(int imageIndex,
                              int tileX,
                              int tileY)
                       throws IOException
Reads the tile indicated by the tileX and
 tileY arguments, returning it as a
 BufferedImage.  If the arguments are out of range,
 an IllegalArgumentException is thrown.  If the
 image is not tiled, the values 0, 0 will return the entire
 image; any other values will cause an
 IllegalArgumentException to be thrown.

  This method is merely a convenience equivalent to calling
 read(int, ImageReadParam) with a read param
 specifying a source region having offsets of
 tileX*getTileWidth(imageIndex),
 tileY*getTileHeight(imageIndex) and width and
 height of getTileWidth(imageIndex),
 getTileHeight(imageIndex); and subsampling
 factors of 1 and offsets of 0.  To subsample a tile, call
 read with a read param specifying this region
 and different subsampling parameters.

  The default implementation returns the entire image if
 tileX and tileY are 0, or throws
 an IllegalArgumentException otherwise.

Parameters:
imageIndex - the index of the image to be retrieved.
tileX - the column index (starting with 0) of the tile
 to be retrieved.
tileY - the row index (starting with 0) of the tile
 to be retrieved.
Returns:
the tile as a BufferedImage.
Throws:
IllegalStateException - if the input source has not been
 set.
IndexOutOfBoundsException - if imageIndex
 is out of bounds.
IllegalArgumentException - if the tile indices are
 out of bounds.
IOException - if an error occurs during reading.


"
ImageReader,"readTileRaster(int imageIndex, int tileX, int tileY)",Raster,"Returns a new Raster object containing the raw pixel data from the tile, without any color conversion applied.","

readTileRaster
public Raster readTileRaster(int imageIndex,
                             int tileX,
                             int tileY)
                      throws IOException
Returns a new Raster object containing the raw
 pixel data from the tile, without any color conversion applied.
 The application must determine how to interpret the pixel data by other
 means.

  If canReadRaster() returns
 false, this method throws an
 UnsupportedOperationException.

  The default implementation checks if reading
 Rasters is supported, and if so calls readRaster(imageIndex, null) if
 tileX and tileY are 0, or throws an
 IllegalArgumentException otherwise.

Parameters:
imageIndex - the index of the image to be retrieved.
tileX - the column index (starting with 0) of the tile
 to be retrieved.
tileY - the row index (starting with 0) of the tile
 to be retrieved.
Returns:
the tile as a Raster.
Throws:
UnsupportedOperationException - if this plug-in does not
 support reading raw Rasters.
IllegalArgumentException - if the tile indices are
 out of bounds.
IllegalStateException - if the input source has not been
 set.
IndexOutOfBoundsException - if imageIndex
 is out of bounds.
IOException - if an error occurs during reading.
See Also:
readTile(int, int, int), 
readRaster(int, javax.imageio.ImageReadParam), 
Raster


"
ImageReader,removeAllIIOReadProgressListeners(),void,Removes all currently registered IIOReadProgressListener objects.,"

removeAllIIOReadProgressListeners
public void removeAllIIOReadProgressListeners()
Removes all currently registered
 IIOReadProgressListener objects.

  The default implementation sets the
 progressListeners instance variable to
 null.

"
ImageReader,removeAllIIOReadUpdateListeners(),void,Removes all currently registered IIOReadUpdateListener objects.,"

removeAllIIOReadUpdateListeners
public void removeAllIIOReadUpdateListeners()
Removes all currently registered
 IIOReadUpdateListener objects.

  The default implementation sets the
 updateListeners instance variable to
 null.

"
ImageReader,removeAllIIOReadWarningListeners(),void,Removes all currently registered IIOReadWarningListener objects.,"

removeAllIIOReadWarningListeners
public void removeAllIIOReadWarningListeners()
Removes all currently registered
 IIOReadWarningListener objects.

  The default implementation sets the
 warningListeners and warningLocales
 instance variables to null.

"
ImageReader,removeIIOReadProgressListener(IIOReadProgressListener listener),void,Removes an IIOReadProgressListener from the list of registered progress listeners.,"

removeIIOReadProgressListener
public void removeIIOReadProgressListener(IIOReadProgressListener listener)
Removes an IIOReadProgressListener from the list
 of registered progress listeners.  If the listener was not
 previously registered, or if listener is
 null, no exception will be thrown and no action
 will be taken.

Parameters:
listener - an IIOReadProgressListener to be unregistered.
See Also:
addIIOReadProgressListener(javax.imageio.event.IIOReadProgressListener)


"
ImageReader,removeIIOReadUpdateListener(IIOReadUpdateListener listener),void,Removes an IIOReadUpdateListener from the list of registered update listeners.,"

removeIIOReadUpdateListener
public void removeIIOReadUpdateListener(IIOReadUpdateListener listener)
Removes an IIOReadUpdateListener from the list of
 registered update listeners.  If the listener was not
 previously registered, or if listener is
 null, no exception will be thrown and no action
 will be taken.

Parameters:
listener - an IIOReadUpdateListener to be unregistered.
See Also:
addIIOReadUpdateListener(javax.imageio.event.IIOReadUpdateListener)


"
ImageReader,removeIIOReadWarningListener(IIOReadWarningListener listener),void,Removes an IIOReadWarningListener from the list of registered error listeners.,"

removeIIOReadWarningListener
public void removeIIOReadWarningListener(IIOReadWarningListener listener)
Removes an IIOReadWarningListener from the list of
 registered error listeners.  If the listener was not previously
 registered, or if listener is null,
 no exception will be thrown and no action will be taken.

Parameters:
listener - an IIOReadWarningListener to be unregistered.
See Also:
addIIOReadWarningListener(javax.imageio.event.IIOReadWarningListener)


"
ImageReader,reset(),void,Restores the ImageReader to its initial state.,"

reset
public void reset()
Restores the ImageReader to its initial state.

  The default implementation calls setInput(null,
 false), setLocale(null),
 removeAllIIOReadUpdateListeners(),
 removeAllIIOReadWarningListeners(),
 removeAllIIOReadProgressListeners(), and
 clearAbortRequest.

"
ImageReader,setInput(Object input),void,Sets the input source to use to the given ImageInputStream or other Object.,"

setInput
public void setInput(Object input)
Sets the input source to use to the given
 ImageInputStream or other Object.
 The input source must be set before any of the query or read
 methods are used.  If input is null,
 any currently set input source will be removed.  In any case,
 the value of minIndex will be initialized to 0.

  This method is equivalent to setInput(input, false,
 false).

Parameters:
input - the ImageInputStream or other
 Object to use for future decoding.
Throws:
IllegalArgumentException - if input is
 not an instance of one of the classes returned by the
 originating service provider's getInputTypes
 method, or is not an ImageInputStream.
See Also:
getInput()


"
ImageReader,"setInput(Object input, boolean seekForwardOnly)",void,Sets the input source to use to the given ImageInputStream or other Object.,"

setInput
public void setInput(Object input,
                     boolean seekForwardOnly)
Sets the input source to use to the given
 ImageInputStream or other Object.
 The input source must be set before any of the query or read
 methods are used.  If input is null,
 any currently set input source will be removed.  In any case,
 the value of minIndex will be initialized to 0.

  The seekForwardOnly parameter controls whether
 the value returned by getMinIndex will be
 increased as each image (or thumbnail, or image metadata) is
 read.  If seekForwardOnly is true, then a call to
 read(index) will throw an
 IndexOutOfBoundsException if index < this.minIndex;
 otherwise, the value of
 minIndex will be set to index.  If
 seekForwardOnly is false, the value of
 minIndex will remain 0 regardless of any read
 operations.

  This method is equivalent to setInput(input,
 seekForwardOnly, false).

Parameters:
input - the ImageInputStream or other
 Object to use for future decoding.
seekForwardOnly - if true, images and metadata
 may only be read in ascending order from this input source.
Throws:
IllegalArgumentException - if input is
 not an instance of one of the classes returned by the
 originating service provider's getInputTypes
 method, or is not an ImageInputStream.
See Also:
getInput()


"
ImageReader,"setInput(Object input, boolean seekForwardOnly, boolean ignoreMetadata)",void,Sets the input source to use to the given ImageInputStream or other Object.,"

setInput
public void setInput(Object input,
                     boolean seekForwardOnly,
                     boolean ignoreMetadata)
Sets the input source to use to the given
 ImageInputStream or other Object.
 The input source must be set before any of the query or read
 methods are used.  If input is null,
 any currently set input source will be removed.  In any case,
 the value of minIndex will be initialized to 0.

  The seekForwardOnly parameter controls whether
 the value returned by getMinIndex will be
 increased as each image (or thumbnail, or image metadata) is
 read.  If seekForwardOnly is true, then a call to
 read(index) will throw an
 IndexOutOfBoundsException if index < this.minIndex;
 otherwise, the value of
 minIndex will be set to index.  If
 seekForwardOnly is false, the value of
 minIndex will remain 0 regardless of any read
 operations.

  The ignoreMetadata parameter, if set to
 true, allows the reader to disregard any metadata
 encountered during the read.  Subsequent calls to the
 getStreamMetadata and
 getImageMetadata methods may return
 null, and an IIOImage returned from
 readAll may return null from their
 getMetadata method.  Setting this parameter may
 allow the reader to work more efficiently.  The reader may
 choose to disregard this setting and return metadata normally.

  Subclasses should take care to remove any cached
 information based on the previous stream, such as header
 information or partially decoded image data.

  Use of a general Object other than an
 ImageInputStream is intended for readers that
 interact directly with a capture device or imaging protocol.
 The set of legal classes is advertised by the reader's service
 provider's getInputTypes method; most readers
 will return a single-element array containing only
 ImageInputStream.class to indicate that they
 accept only an ImageInputStream.

  The default implementation checks the input
 argument against the list returned by
 originatingProvider.getInputTypes() and fails
 if the argument is not an instance of one of the classes
 in the list.  If the originating provider is set to
 null, the input is accepted only if it is an
 ImageInputStream.

Parameters:
input - the ImageInputStream or other
 Object to use for future decoding.
seekForwardOnly - if true, images and metadata
 may only be read in ascending order from this input source.
ignoreMetadata - if true, metadata
 may be ignored during reads.
Throws:
IllegalArgumentException - if input is
 not an instance of one of the classes returned by the
 originating service provider's getInputTypes
 method, or is not an ImageInputStream.
See Also:
ImageInputStream, 
getInput(), 
ImageReaderSpi.getInputTypes()


"
ImageReader,setLocale(Locale locale),void,Sets the current Locale of this ImageReader to the given value.,"

setLocale
public void setLocale(Locale locale)
Sets the current Locale of this
 ImageReader to the given value.  A value of
 null removes any previous setting, and indicates
 that the reader should localize as it sees fit.

Parameters:
locale - the desired Locale, or
 null.
Throws:
IllegalArgumentException - if locale is
 non-null but is not one of the values returned by
 getAvailableLocales.
See Also:
getLocale()


"
ImageReadParam,canSetSourceRenderSize(),boolean,"Returns true if this reader allows the source image to be rendered at an arbitrary size as part of the decoding process, by means of the setSourceRenderSize method.","

canSetSourceRenderSize
public boolean canSetSourceRenderSize()
Returns true if this reader allows the source
 image to be rendered at an arbitrary size as part of the
 decoding process, by means of the
 setSourceRenderSize method.  If this method
 returns false, calls to
 setSourceRenderSize will throw an
 UnsupportedOperationException.

Returns:
true if setting source rendering size is
 supported.
See Also:
setSourceRenderSize(java.awt.Dimension)


"
ImageReadParam,getDestination(),BufferedImage,"Returns the BufferedImage currently set by the setDestination method, or null if none is set.","

getDestination
public BufferedImage getDestination()
Returns the BufferedImage currently set by the
 setDestination method, or null
 if none is set.

Returns:
the BufferedImage to be written to.
See Also:
setDestination(java.awt.image.BufferedImage)


"
ImageReadParam,getDestinationBands(),int[],Returns the set of band indices where data will be placed.,"

getDestinationBands
public int[] getDestinationBands()
Returns the set of band indices where data will be placed.
 If no value has been set, null is returned to
 indicate that all destination bands will be used.

Returns:
the indices of the destination bands to be used,
 or null.
See Also:
setDestinationBands(int[])


"
ImageReadParam,getSourceMaxProgressivePass(),int,"If getSourceNumProgressivePasses is equal to Integer.MAX_VALUE, returns Integer.MAX_VALUE.","

getSourceMaxProgressivePass
public int getSourceMaxProgressivePass()
If getSourceNumProgressivePasses is equal to
 Integer.MAX_VALUE, returns
 Integer.MAX_VALUE.  Otherwise, returns
 getSourceMinProgressivePass() +
 getSourceNumProgressivePasses() - 1.

Returns:
the index of the last pass to be read, or
 Integer.MAX_VALUE.


"
ImageReadParam,getSourceMinProgressivePass(),int,Returns the index of the first progressive pass that will be decoded.,"

getSourceMinProgressivePass
public int getSourceMinProgressivePass()
Returns the index of the first progressive pass that will be
 decoded. If no value has been set, 0 will be returned (which is
 the correct value).

Returns:
the index of the first pass that will be decoded.
See Also:
setSourceProgressivePasses(int, int), 
getSourceNumProgressivePasses()


"
ImageReadParam,getSourceNumProgressivePasses(),int,Returns the number of the progressive passes that will be decoded.,"

getSourceNumProgressivePasses
public int getSourceNumProgressivePasses()
Returns the number of the progressive passes that will be
 decoded. If no value has been set,
 Integer.MAX_VALUE will be returned (which is the
 correct value).

Returns:
the number of the passes that will be decoded.
See Also:
setSourceProgressivePasses(int, int), 
getSourceMinProgressivePass()


"
ImageReadParam,getSourceRenderSize(),Dimension,"Returns the width and height of the source image as it will be rendered during decoding, if they have been set via the setSourceRenderSize method.","

getSourceRenderSize
public Dimension getSourceRenderSize()
Returns the width and height of the source image as it
 will be rendered during decoding, if they have been set via the
 setSourceRenderSize method.  A
 nullvalue indicates that no setting has been made.

Returns:
the rendered width and height of the source image
 as a Dimension.
See Also:
setSourceRenderSize(java.awt.Dimension)


"
ImageReadParam,setDestination(BufferedImage destination),void,Supplies a BufferedImage to be used as the destination for decoded pixel data.,"

setDestination
public void setDestination(BufferedImage destination)
Supplies a BufferedImage to be used as the
 destination for decoded pixel data.  The currently set image
 will be written to by the read,
 readAll, and readRaster methods, and
 a reference to it will be returned by those methods.

  Pixel data from the aforementioned methods will be written
 starting at the offset specified by
 getDestinationOffset.

  If destination is null, a
 newly-created BufferedImage will be returned by
 those methods.

  At the time of reading, the image is checked to verify that
 its ColorModel and SampleModel
 correspond to one of the ImageTypeSpecifiers
 returned from the ImageReader's
 getImageTypes method.  If it does not, the reader
 will throw an IIOException.

Parameters:
destination - the BufferedImage to be written to, or
 null.
See Also:
getDestination()


"
ImageReadParam,setDestinationBands(int[] destinationBands),void,Sets the indices of the destination bands where data will be placed.,"

setDestinationBands
public void setDestinationBands(int[] destinationBands)
Sets the indices of the destination bands where data
 will be placed.  Duplicate indices are not allowed.

  A null value indicates that all destination
 bands will be used.

  Choosing a destination band subset will not affect the
 number of bands in the output image of a read if no destination
 image is specified; the created destination image will still
 have the same number of bands as if this method had never been
 called.  If a different number of bands in the destination
 image is desired, an image must be supplied using the
 ImageReadParam.setDestination method.

  At the time of reading or writing, an
 IllegalArgumentException will be thrown by the
 reader or writer if a value larger than the largest destination
 band index has been specified, or if the number of source bands
 and destination bands to be used differ.  The
 ImageReader.checkReadParamBandSettings method may
 be used to automate this test.

Parameters:
destinationBands - an array of integer band indices to be
 used.
Throws:
IllegalArgumentException - if destinationBands
 contains a negative or duplicate value.
See Also:
getDestinationBands(), 
IIOParam.getSourceBands(), 
ImageReader.checkReadParamBandSettings(javax.imageio.ImageReadParam, int, int)


"
ImageReadParam,setDestinationType(ImageTypeSpecifier destinationType),void,"Sets the desired image type for the destination image, using an ImageTypeSpecifier.","

setDestinationType
public void setDestinationType(ImageTypeSpecifier destinationType)
Description copied from class: IIOParam
Sets the desired image type for the destination image, using an
 ImageTypeSpecifier.

  When reading, if the layout of the destination has been set
 using this method, each call to an ImageReader
read method will return a new
 BufferedImage using the format specified by the
 supplied type specifier.  As a side effect, any destination
 BufferedImage set by
 ImageReadParam.setDestination(BufferedImage) will
 no longer be set as the destination.  In other words, this
 method may be thought of as calling
 setDestination((BufferedImage)null).

  When writing, the destination type maybe used to determine
 the color type of the image.  The SampleModel
 information will be ignored, and may be null.  For
 example, a 4-banded image could represent either CMYK or RGBA
 data.  If a destination type is set, its
 ColorModel will override any
 ColorModel on the image itself.  This is crucial
 when setSourceBands is used since the image's
 ColorModel will refer to the entire image rather
 than to the subset of bands being written.

Overrides:
setDestinationType in class IIOParam
Parameters:
destinationType - the ImageTypeSpecifier to
 be used to determine the destination layout and color type.
See Also:
IIOParam.getDestinationType()


"
ImageReadParam,"setSourceProgressivePasses(int minPass, int numPasses)",void,Sets the range of progressive passes that will be decoded.,"

setSourceProgressivePasses
public void setSourceProgressivePasses(int minPass,
                                       int numPasses)
Sets the range of progressive passes that will be decoded.
 Passes outside of this range will be ignored.

  A progressive pass is a re-encoding of the entire image,
 generally at progressively higher effective resolutions, but
 requiring greater transmission bandwidth.  The most common use
 of progressive encoding is found in the JPEG format, where
 successive passes include more detailed representations of the
 high-frequency image content.

  The actual number of passes to be decoded is determined
 during decoding, based on the number of actual passes available
 in the stream.  Thus if minPass + numPasses - 1 is
 larger than the index of the last available passes, decoding
 will end with that pass.

  A value of numPasses of
 Integer.MAX_VALUE indicates that all passes from
 minPass forward should be read.  Otherwise, the
 index of the last pass (i.e., minPass + numPasses
 - 1) must not exceed Integer.MAX_VALUE.

  There is no unsetSourceProgressivePasses
 method; the same effect may be obtained by calling
 setSourceProgressivePasses(0, Integer.MAX_VALUE).

Parameters:
minPass - the index of the first pass to be decoded.
numPasses - the maximum number of passes to be decoded.
Throws:
IllegalArgumentException - if minPass is
 negative, numPasses is negative or 0, or
 numPasses is smaller than
 Integer.MAX_VALUE but minPass +
 numPasses - 1 is greater than
 INTEGER.MAX_VALUE.
See Also:
getSourceMinProgressivePass(), 
getSourceMaxProgressivePass()


"
ImageReadParam,setSourceRenderSize(Dimension size),void,"If the image is able to be rendered at an arbitrary size, sets the source width and height to the supplied values.","

setSourceRenderSize
public void setSourceRenderSize(Dimension size)
                         throws UnsupportedOperationException
If the image is able to be rendered at an arbitrary size, sets
 the source width and height to the supplied values.  Note that
 the values returned from the getWidth and
 getHeight methods on ImageReader are
 not affected by this method; they will continue to return the
 default size for the image.  Similarly, if the image is also
 tiled the tile width and height are given in terms of the default
 size.

  Typically, the width and height should be chosen such that
 the ratio of width to height closely approximates the aspect
 ratio of the image, as returned from
 ImageReader.getAspectRatio.

  If this plug-in does not allow the rendering size to be
 set, an UnsupportedOperationException will be
 thrown.

  To remove the render size setting, pass in a value of
 null for size.

Parameters:
size - a Dimension indicating the desired
 width and height.
Throws:
IllegalArgumentException - if either the width or the
 height is negative or 0.
UnsupportedOperationException - if image resizing
 is not supported by this plug-in.
See Also:
getSourceRenderSize(), 
ImageReader.getWidth(int), 
ImageReader.getHeight(int), 
ImageReader.getAspectRatio(int)


"
ImageTypeSpecifier,"createBanded(ColorSpace colorSpace, int[] bankIndices, int[] bandOffsets, int dataType, boolean hasAlpha, boolean isAlphaPremultiplied)",static ImageTypeSpecifier,Returns a specifier for a banded image format that will use a ComponentColorModel and a BandedSampleModel to store each channel in a separate array.,"

createBanded
public static ImageTypeSpecifier createBanded(ColorSpace colorSpace,
                                              int[] bankIndices,
                                              int[] bandOffsets,
                                              int dataType,
                                              boolean hasAlpha,
                                              boolean isAlphaPremultiplied)
Returns a specifier for a banded image format that will use a
 ComponentColorModel and a
 BandedSampleModel to store each channel in a
 separate array.

Parameters:
colorSpace - the desired ColorSpace.
bankIndices - an array of ints indicating the
 bank in which each band will be stored.
bandOffsets - an array of ints indicating the
 starting offset of each band within its bank.
dataType - the desired data type, as one of the enumerations
 from the DataBuffer class.
hasAlpha - true if an alpha channel is desired.
isAlphaPremultiplied - true if the color channels
 will be premultipled by the alpha channel.
Returns:
an ImageTypeSpecifier with the desired
 characteristics.
Throws:
IllegalArgumentException - if colorSpace
 is null.
IllegalArgumentException - if bankIndices
 is null.
IllegalArgumentException - if bandOffsets
 is null.
IllegalArgumentException - if the lengths of
 bankIndices and bandOffsets differ.
IllegalArgumentException - if
 bandOffsets.length does not equal the number of
 color space components, plus 1 if hasAlpha is
 true.
IllegalArgumentException - if dataType is
 not one of the legal DataBuffer.TYPE_* constants.


"
ImageTypeSpecifier,"createBufferedImage(int width, int height)",BufferedImage,Creates a BufferedImage with a given width and height according to the specification embodied in this object.,"

createBufferedImage
public BufferedImage createBufferedImage(int width,
                                         int height)
Creates a BufferedImage with a given width and
 height according to the specification embodied in this object.

Parameters:
width - the desired width of the returned
 BufferedImage.
height - the desired height of the returned
 BufferedImage.
Returns:
a new BufferedImage
Throws:
IllegalArgumentException - if either width or
 height are negative or zero.
IllegalArgumentException - if the product of
 width and height is greater than
 Integer.MAX_VALUE, or if the number of array
 elements needed to store the image is greater than
 Integer.MAX_VALUE.


"
ImageTypeSpecifier,createFromBufferedImageType(int bufferedImageType),static ImageTypeSpecifier,Returns an ImageTypeSpecifier that encodes one of the standard BufferedImage types (other than TYPE_CUSTOM).,"

createFromBufferedImageType
public static ImageTypeSpecifier createFromBufferedImageType(int bufferedImageType)
Returns an ImageTypeSpecifier that encodes
 one of the standard BufferedImage types
 (other than TYPE_CUSTOM).

Parameters:
bufferedImageType - an int representing one of the standard
 BufferedImage types.
Returns:
an ImageTypeSpecifier with the desired
 characteristics.
Throws:
IllegalArgumentException - if
 bufferedImageType is not one of the standard
 types, or is equal to TYPE_CUSTOM.
See Also:
BufferedImage, 
BufferedImage.TYPE_INT_RGB, 
BufferedImage.TYPE_INT_ARGB, 
BufferedImage.TYPE_INT_ARGB_PRE, 
BufferedImage.TYPE_INT_BGR, 
BufferedImage.TYPE_3BYTE_BGR, 
BufferedImage.TYPE_4BYTE_ABGR, 
BufferedImage.TYPE_4BYTE_ABGR_PRE, 
BufferedImage.TYPE_USHORT_565_RGB, 
BufferedImage.TYPE_USHORT_555_RGB, 
BufferedImage.TYPE_BYTE_GRAY, 
BufferedImage.TYPE_USHORT_GRAY, 
BufferedImage.TYPE_BYTE_BINARY, 
BufferedImage.TYPE_BYTE_INDEXED


"
ImageTypeSpecifier,createFromRenderedImage(RenderedImage image),static ImageTypeSpecifier,Returns an ImageTypeSpecifier that encodes the layout of a RenderedImage (which may be a BufferedImage).,"

createFromRenderedImage
public static ImageTypeSpecifier createFromRenderedImage(RenderedImage image)
Returns an ImageTypeSpecifier that encodes the
 layout of a RenderedImage (which may be a
 BufferedImage).

Parameters:
image - a RenderedImage.
Returns:
an ImageTypeSpecifier with the desired
 characteristics.
Throws:
IllegalArgumentException - if image is
 null.


"
ImageTypeSpecifier,"createGrayscale(int bits, int dataType, boolean isSigned)",static ImageTypeSpecifier,Returns a specifier for a grayscale image format that will pack pixels of the given bit depth into array elements of the specified data type.,"

createGrayscale
public static ImageTypeSpecifier createGrayscale(int bits,
                                                 int dataType,
                                                 boolean isSigned)
Returns a specifier for a grayscale image format that will pack
 pixels of the given bit depth into array elements of
 the specified data type.

Parameters:
bits - the number of bits per gray value (1, 2, 4, 8, or 16).
dataType - the desired data type, as one of the enumerations
 from the DataBuffer class.
isSigned - true if negative values are to
 be represented.
Returns:
an ImageTypeSpecifier with the desired
 characteristics.
Throws:
IllegalArgumentException - if bits is
 not one of 1, 2, 4, 8, or 16.
IllegalArgumentException - if dataType is
 not one of DataBuffer.TYPE_BYTE,
 DataBuffer.TYPE_SHORT, or
 DataBuffer.TYPE_USHORT.
IllegalArgumentException - if bits is
 larger than the bit size of the given dataType.


"
ImageTypeSpecifier,"createGrayscale(int bits, int dataType, boolean isSigned, boolean isAlphaPremultiplied)",static ImageTypeSpecifier,Returns a specifier for a grayscale plus alpha image format that will pack pixels of the given bit depth into array elements of the specified data type.,"

createGrayscale
public static ImageTypeSpecifier createGrayscale(int bits,
                                                 int dataType,
                                                 boolean isSigned,
                                                 boolean isAlphaPremultiplied)
Returns a specifier for a grayscale plus alpha image format
 that will pack pixels of the given bit depth into array
 elements of the specified data type.

Parameters:
bits - the number of bits per gray value (1, 2, 4, 8, or 16).
dataType - the desired data type, as one of the enumerations
 from the DataBuffer class.
isSigned - true if negative values are to
 be represented.
isAlphaPremultiplied - true if the luminance channel
 will be premultipled by the alpha channel.
Returns:
an ImageTypeSpecifier with the desired
 characteristics.
Throws:
IllegalArgumentException - if bits is
 not one of 1, 2, 4, 8, or 16.
IllegalArgumentException - if dataType is
 not one of DataBuffer.TYPE_BYTE,
 DataBuffer.TYPE_SHORT, or
 DataBuffer.TYPE_USHORT.
IllegalArgumentException - if bits is
 larger than the bit size of the given dataType.


"
ImageTypeSpecifier,"createIndexed(byte[] redLUT, byte[] greenLUT, byte[] blueLUT, byte[] alphaLUT, int bits, int dataType)",static ImageTypeSpecifier,Returns a specifier for an indexed-color image format that will pack index values of the given bit depth into array elements of the specified data type.,"

createIndexed
public static ImageTypeSpecifier createIndexed(byte[] redLUT,
                                               byte[] greenLUT,
                                               byte[] blueLUT,
                                               byte[] alphaLUT,
                                               int bits,
                                               int dataType)
Returns a specifier for an indexed-color image format that will pack
 index values of the given bit depth into array elements of
 the specified data type.

Parameters:
redLUT - an array of bytes containing
 the red values for each index.
greenLUT - an array of bytes containing * the
  green values for each index.
blueLUT - an array of bytes containing the
 blue values for each index.
alphaLUT - an array of bytes containing the
 alpha values for each index, or null to create a
 fully opaque LUT.
bits - the number of bits in each index.
dataType - the desired output type, as one of the enumerations
 from the DataBuffer class.
Returns:
an ImageTypeSpecifier with the desired
 characteristics.
Throws:
IllegalArgumentException - if redLUT is
 null.
IllegalArgumentException - if greenLUT is
 null.
IllegalArgumentException - if blueLUT is
 null.
IllegalArgumentException - if bits is
 not one of 1, 2, 4, 8, or 16.
IllegalArgumentException - if the
 non-null LUT parameters do not have lengths of
 exactly 1 << bits.
IllegalArgumentException - if dataType is
 not one of DataBuffer.TYPE_BYTE,
 DataBuffer.TYPE_SHORT,
 DataBuffer.TYPE_USHORT,
 or DataBuffer.TYPE_INT.
IllegalArgumentException - if bits is
 larger than the bit size of the given dataType.


"
ImageTypeSpecifier,"createInterleaved(ColorSpace colorSpace, int[] bandOffsets, int dataType, boolean hasAlpha, boolean isAlphaPremultiplied)",static ImageTypeSpecifier,"Returns a specifier for an interleaved image format that will use a ComponentColorModel and a PixelInterleavedSampleModel to store each pixel component in a separate byte, short, or int.","

createInterleaved
public static ImageTypeSpecifier createInterleaved(ColorSpace colorSpace,
                                                   int[] bandOffsets,
                                                   int dataType,
                                                   boolean hasAlpha,
                                                   boolean isAlphaPremultiplied)
Returns a specifier for an interleaved image format that will
 use a ComponentColorModel and a
 PixelInterleavedSampleModel to store each pixel
 component in a separate byte, short, or int.

Parameters:
colorSpace - the desired ColorSpace.
bandOffsets - an array of ints indicating the
 offsets for each band.
dataType - the desired data type, as one of the enumerations
 from the DataBuffer class.
hasAlpha - true if an alpha channel is desired.
isAlphaPremultiplied - true if the color channels
 will be premultipled by the alpha channel.
Returns:
an ImageTypeSpecifier with the desired
 characteristics.
Throws:
IllegalArgumentException - if colorSpace
 is null.
IllegalArgumentException - if bandOffsets
 is null.
IllegalArgumentException - if dataType is
 not one of the legal DataBuffer.TYPE_* constants.
IllegalArgumentException - if
 bandOffsets.length does not equal the number of
 color space components, plus 1 if hasAlpha is
 true.


"
ImageTypeSpecifier,"createPacked(ColorSpace colorSpace, int redMask, int greenMask, int blueMask, int alphaMask, int transferType, boolean isAlphaPremultiplied)",static ImageTypeSpecifier,"Returns a specifier for a packed image format that will use a DirectColorModel and a packed SampleModel to store each pixel packed into in a single byte, short, or int.","

createPacked
public static ImageTypeSpecifier createPacked(ColorSpace colorSpace,
                                              int redMask,
                                              int greenMask,
                                              int blueMask,
                                              int alphaMask,
                                              int transferType,
                                              boolean isAlphaPremultiplied)
Returns a specifier for a packed image format that will use a
 DirectColorModel and a packed
 SampleModel to store each pixel packed into in a
 single byte, short, or int.

Parameters:
colorSpace - the desired ColorSpace.
redMask - a contiguous mask indicated the position of the
 red channel.
greenMask - a contiguous mask indicated the position of the
 green channel.
blueMask - a contiguous mask indicated the position of the
 blue channel.
alphaMask - a contiguous mask indicated the position of the
 alpha channel.
transferType - the desired SampleModel transfer type.
isAlphaPremultiplied - true if the color channels
 will be premultipled by the alpha channel.
Returns:
an ImageTypeSpecifier with the desired
 characteristics.
Throws:
IllegalArgumentException - if colorSpace
 is null.
IllegalArgumentException - if colorSpace
 is not of type TYPE_RGB.
IllegalArgumentException - if no mask has at least 1
 bit set.
IllegalArgumentException - if
 transferType if not one of
 DataBuffer.TYPE_BYTE,
 DataBuffer.TYPE_USHORT, or
 DataBuffer.TYPE_INT.


"
ImageTypeSpecifier,equals(Object o),boolean,Returns true if the given Object is an ImageTypeSpecifier and has a SampleModel and ColorModel that are equal to those of this object.,"

equals
public boolean equals(Object o)
Returns true if the given Object is
 an ImageTypeSpecifier and has a
 SampleModel and ColorModel that are
 equal to those of this object.

Overrides:
equals in class Object
Parameters:
o - the Object to be compared for equality.
Returns:
true if the given object is an equivalent
 ImageTypeSpecifier.
See Also:
Object.hashCode(), 
HashMap


"
ImageTypeSpecifier,getBitsPerBand(int band),int,Return the number of bits used to represent samples of the given band.,"

getBitsPerBand
public int getBitsPerBand(int band)
Return the number of bits used to represent samples of the given band.

Parameters:
band - the index of the band to be queried, as an
 int.
Returns:
an int specifying a number of bits.
Throws:
IllegalArgumentException - if band is
 negative or greater than the largest band index.


"
ImageTypeSpecifier,getBufferedImageType(),int,Returns an int containing one of the enumerated constant values describing image formats from BufferedImage.,"

getBufferedImageType
public int getBufferedImageType()
Returns an int containing one of the enumerated constant values
 describing image formats from BufferedImage.

Returns:
an int representing a
 BufferedImage type.
See Also:
BufferedImage, 
BufferedImage.TYPE_CUSTOM, 
BufferedImage.TYPE_INT_RGB, 
BufferedImage.TYPE_INT_ARGB, 
BufferedImage.TYPE_INT_ARGB_PRE, 
BufferedImage.TYPE_INT_BGR, 
BufferedImage.TYPE_3BYTE_BGR, 
BufferedImage.TYPE_4BYTE_ABGR, 
BufferedImage.TYPE_4BYTE_ABGR_PRE, 
BufferedImage.TYPE_USHORT_565_RGB, 
BufferedImage.TYPE_USHORT_555_RGB, 
BufferedImage.TYPE_BYTE_GRAY, 
BufferedImage.TYPE_USHORT_GRAY, 
BufferedImage.TYPE_BYTE_BINARY, 
BufferedImage.TYPE_BYTE_INDEXED


"
ImageTypeSpecifier,getColorModel(),ColorModel,Returns the ColorModel specified by this object.,"

getColorModel
public ColorModel getColorModel()
Returns the ColorModel specified by this object.

Returns:
a ColorModel.


"
ImageTypeSpecifier,getNumBands(),int,Return the number of bands specified by this object.,"

getNumBands
public int getNumBands()
Return the number of bands
 specified by this object.  This is the same value as returned by
 SampleModel.getNumBands

Returns:
the number of bands in the image.


"
ImageTypeSpecifier,getNumComponents(),int,Return the number of color components specified by this object.,"

getNumComponents
public int getNumComponents()
Return the number of color components
 specified by this object.  This is the same value as returned by
 ColorModel.getNumComponents

Returns:
the number of components in the image.


"
ImageTypeSpecifier,getSampleModel(),SampleModel,Returns a SampleModel based on the settings encapsulated within this object.,"

getSampleModel
public SampleModel getSampleModel()
Returns a SampleModel based on the settings
 encapsulated within this object.  The width and height of the
 SampleModel will be set to arbitrary values.

Returns:
a SampleModel with arbitrary dimensions.


"
ImageTypeSpecifier,"getSampleModel(int width, int height)",SampleModel,Returns a SampleModel based on the settings encapsulated within this object.,"

getSampleModel
public SampleModel getSampleModel(int width,
                                  int height)
Returns a SampleModel based on the settings
 encapsulated within this object.  The width and height of the
 SampleModel will be set to the supplied values.

Parameters:
width - the desired width of the returned SampleModel.
height - the desired height of the returned
 SampleModel.
Returns:
a SampleModel with the given dimensions.
Throws:
IllegalArgumentException - if either width or
 height are negative or zero.
IllegalArgumentException - if the product of
 width and height is greater than
 Integer.MAX_VALUE


"
ImageTypeSpecifier,hashCode(),int,Returns the hash code for this ImageTypeSpecifier.,"

hashCode
public int hashCode()
Returns the hash code for this ImageTypeSpecifier.

Overrides:
hashCode in class Object
Returns:
a hash code for this ImageTypeSpecifier
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
ImageWriteParam,canOffsetTiles(),boolean,Returns true if the writer can perform tiling with non-zero grid offsets while writing.,"

canOffsetTiles
public boolean canOffsetTiles()
Returns true if the writer can perform tiling with
 non-zero grid offsets while writing.  If this method returns
 false, then setTiling will throw an
 UnsupportedOperationException if the grid offset
 arguments are not both zero.  If canWriteTiles
 returns false, this method will return
 false as well.

Returns:
true if the writer supports non-zero tile
 offsets.
See Also:
canWriteTiles(), 
setTiling(int, int, int, int)


"
ImageWriteParam,canWriteCompressed(),boolean,Returns true if this writer supports compression.,"

canWriteCompressed
public boolean canWriteCompressed()
Returns true if this writer supports compression.

Returns:
true if the writer supports compression.


"
ImageWriteParam,canWriteProgressive(),boolean,Returns true if the writer can write out images as a series of passes of progressively increasing quality.,"

canWriteProgressive
public boolean canWriteProgressive()
Returns true if the writer can write out images
 as a series of passes of progressively increasing quality.

Returns:
true if the writer supports progressive
 encoding.
See Also:
setProgressiveMode(int), 
getProgressiveMode()


"
ImageWriteParam,canWriteTiles(),boolean,Returns true if the writer can perform tiling while writing.,"

canWriteTiles
public boolean canWriteTiles()
Returns true if the writer can perform tiling
 while writing.  If this method returns false, then
 setTiling will throw an
 UnsupportedOperationException.

Returns:
true if the writer supports tiling.
See Also:
canOffsetTiles(), 
setTiling(int, int, int, int)


"
ImageWriteParam,getBitRate(float quality),float,Returns a float indicating an estimate of the number of bits of output data for each bit of input image data at the given quality level.,"

getBitRate
public float getBitRate(float quality)
Returns a float indicating an estimate of the
 number of bits of output data for each bit of input image data
 at the given quality level.  The value will typically lie
 between 0 and 1, with smaller values
 indicating more compression.  A special value of
 -1.0F is used to indicate that no estimate is
 available.

  If there are multiple compression types but none has been set,
 an IllegalStateException is thrown.

  The default implementation checks that compression is
 supported and the compression mode is
 MODE_EXPLICIT.  If so, if
 getCompressionTypes() is null or
 getCompressionType() is non-null, and
 quality is within bounds, it returns
 -1.0.

Parameters:
quality - the quality setting whose bit rate is to be
 queried.
Returns:
an estimate of the compressed bit rate, or
 -1.0F if no estimate is available.
Throws:
UnsupportedOperationException - if the writer does not
 support compression.
IllegalStateException - if the compression mode is not
 MODE_EXPLICIT.
IllegalStateException - if the set of legal
 compression types is non-null and the current
 compression type is null.
IllegalArgumentException - if quality is
 not between 0and 1, inclusive.


"
ImageWriteParam,getCompressionMode(),int,"Returns the current compression mode, if compression is supported.","

getCompressionMode
public int getCompressionMode()
Returns the current compression mode, if compression is
 supported.

Returns:
the current compression mode.
Throws:
UnsupportedOperationException - if the writer does not
 support compression.
See Also:
setCompressionMode(int)


"
ImageWriteParam,getCompressionQuality(),float,Returns the current compression quality setting.,"

getCompressionQuality
public float getCompressionQuality()
Returns the current compression quality setting.

  If there are multiple compression types but none has been
 set, an IllegalStateException is thrown.

  The default implementation checks that compression is
 supported and that the compression mode is
 MODE_EXPLICIT.  If so, if
 getCompressionTypes() is null or
 getCompressionType() is non-null, it
 returns the value of the compressionQuality
 instance variable.

Returns:
the current compression quality setting.
Throws:
UnsupportedOperationException - if the writer does not
 support compression.
IllegalStateException - if the compression mode is not
 MODE_EXPLICIT.
IllegalStateException - if the set of legal
 compression types is non-null and the current
 compression type is null.
See Also:
setCompressionQuality(float)


"
ImageWriteParam,getCompressionQualityDescriptions(),String[],Returns an array of Strings that may be used along with getCompressionQualityValues as part of a user interface for setting or displaying the compression quality level.,"

getCompressionQualityDescriptions
public String[] getCompressionQualityDescriptions()
Returns an array of Strings that may be used along
 with getCompressionQualityValues as part of a user
 interface for setting or displaying the compression quality
 level.  The String with index i
 provides a description of the range of quality levels between
 getCompressionQualityValues[i] and
 getCompressionQualityValues[i + 1].  Note that the
 length of the array returned from
 getCompressionQualityValues will always be one
 greater than that returned from
 getCompressionQualityDescriptions.

  As an example, the strings ""Good"", ""Better"", and ""Best""
 could be associated with the ranges [0, .33),
 [.33, .66), and [.66, 1.0].  In this
 case, getCompressionQualityDescriptions would
 return { ""Good"", ""Better"", ""Best"" } and
 getCompressionQualityValues would return
 { 0.0F, .33F, .66F, 1.0F }.

  If no descriptions are available, null is
 returned.  If null is returned from
 getCompressionQualityValues, this method must also
 return null.

  The descriptions should be localized for the
 Locale returned by getLocale, if it
 is non-null.

  If there are multiple compression types but none has been set,
 an IllegalStateException is thrown.

  The default implementation checks that compression is
 supported and that the compression mode is
 MODE_EXPLICIT.  If so, if
 getCompressionTypes() is null or
 getCompressionType() is non-null, it
 returns null.

Returns:
an array of Strings containing localized
 descriptions of the compression quality levels.
Throws:
UnsupportedOperationException - if the writer does not
 support compression.
IllegalStateException - if the compression mode is not
 MODE_EXPLICIT.
IllegalStateException - if the set of legal
 compression types is non-null and the current
 compression type is null.
See Also:
getCompressionQualityValues()


"
ImageWriteParam,getCompressionQualityValues(),float[],Returns an array of floats that may be used along with getCompressionQualityDescriptions as part of a user interface for setting or displaying the compression quality level.,"

getCompressionQualityValues
public float[] getCompressionQualityValues()
Returns an array of floats that may be used along
 with getCompressionQualityDescriptions as part of a user
 interface for setting or displaying the compression quality
 level.  See getCompressionQualityDescriptions for more information.

  If no descriptions are available, null is
 returned.  If null is returned from
 getCompressionQualityDescriptions, this method
 must also return null.

  If there are multiple compression types but none has been set,
 an IllegalStateException is thrown.

  The default implementation checks that compression is
 supported and that the compression mode is
 MODE_EXPLICIT.  If so, if
 getCompressionTypes() is null or
 getCompressionType() is non-null, it
 returns null.

Returns:
an array of floats indicating the
 boundaries between the compression quality levels as described
 by the Strings from
 getCompressionQualityDescriptions.
Throws:
UnsupportedOperationException - if the writer does not
 support compression.
IllegalStateException - if the compression mode is not
 MODE_EXPLICIT.
IllegalStateException - if the set of legal
 compression types is non-null and the current
 compression type is null.
See Also:
getCompressionQualityDescriptions()


"
ImageWriteParam,getCompressionType(),String,"Returns the currently set compression type, or null if none has been set.","

getCompressionType
public String getCompressionType()
Returns the currently set compression type, or
 null if none has been set.  The type is returned
 as a String from among those returned by
 getCompressionTypes.
 If no compression type has been set, null is
 returned.

  The default implementation checks whether compression is
 supported and the compression mode is
 MODE_EXPLICIT.  If so, it returns the value of the
 compressionType instance variable.

Returns:
the current compression type as a String,
 or null if no type is set.
Throws:
UnsupportedOperationException - if the writer does not
 support compression.
IllegalStateException - if the compression mode is not
 MODE_EXPLICIT.
See Also:
setCompressionType(java.lang.String)


"
ImageWriteParam,getCompressionTypes(),String[],"Returns a list of available compression types, as an array or Strings, or null if a compression type may not be chosen using these interfaces.","

getCompressionTypes
public String[] getCompressionTypes()
Returns a list of available compression types, as an array or
 Strings, or null if a compression
 type may not be chosen using these interfaces.  The array
 returned is a copy.

  If the writer only offers a single, mandatory form of
 compression, it is not necessary to provide any named
 compression types.  Named compression types should only be
 used where the user is able to make a meaningful choice
 between different schemes.

  The default implementation checks if compression is
 supported and throws an
 UnsupportedOperationException if not.  Otherwise,
 it returns a clone of the compressionTypes
 instance variable if it is non-null, or else
 returns null.

Returns:
an array of Strings containing the
 (non-localized) names of available compression types, or
 null.
Throws:
UnsupportedOperationException - if the writer does not
 support compression.


"
ImageWriteParam,getLocale(),Locale,"Returns the currently set Locale, or null if only a default Locale is supported.","

getLocale
public Locale getLocale()
Returns the currently set Locale, or
 null if only a default Locale is
 supported.

Returns:
the current Locale, or null.


"
ImageWriteParam,getLocalizedCompressionTypeName(),String,"Returns a localized version of the name of the current compression type, using the Locale returned by getLocale.","

getLocalizedCompressionTypeName
public String getLocalizedCompressionTypeName()
Returns a localized version of the name of the current
 compression type, using the Locale returned by
 getLocale.

  The default implementation checks whether compression is
 supported and the compression mode is
 MODE_EXPLICIT.  If so, if
 compressionType is non-null the value
 of getCompressionType is returned as a
 convenience.

Returns:
a String containing a localized version of
 the name of the current compression type.
Throws:
UnsupportedOperationException - if the writer does not
 support compression.
IllegalStateException - if the compression mode is not
 MODE_EXPLICIT.
IllegalStateException - if no compression type is set.


"
ImageWriteParam,getPreferredTileSizes(),Dimension[],Returns an array of Dimensions indicating the legal size ranges for tiles as they will be encoded in the output file or stream.,"

getPreferredTileSizes
public Dimension[] getPreferredTileSizes()
Returns an array of Dimensions indicating the
 legal size ranges for tiles as they will be encoded in the
 output file or stream.  The returned array is a copy.

  The information is returned as a set of pairs; the first
 element of a pair contains an (inclusive) minimum width and
 height, and the second element contains an (inclusive) maximum
 width and height.  Together, each pair defines a valid range of
 sizes.  To specify a fixed size, use the same width and height
 for both elements.  To specify an arbitrary range, a value of
 null is used in place of an actual array of
 Dimensions.

  If no array is specified on the constructor, but tiling is
 allowed, then this method returns null.

Returns:
an array of Dimensions with an even length
 of at least two, or null.
Throws:
UnsupportedOperationException - if the plug-in does
 not support tiling.


"
ImageWriteParam,getProgressiveMode(),int,Returns the current mode for writing the stream in a progressive manner.,"

getProgressiveMode
public int getProgressiveMode()
Returns the current mode for writing the stream in a
 progressive manner.

Returns:
the current mode for progressive encoding.
Throws:
UnsupportedOperationException - if the writer does not
 support progressive encoding.
See Also:
setProgressiveMode(int)


"
ImageWriteParam,getTileGridXOffset(),int,Returns the horizontal tile grid offset of an image as it will be written to the output stream.,"

getTileGridXOffset
public int getTileGridXOffset()
Returns the horizontal tile grid offset of an image as it will
 be written to the output stream.  If tiling parameters have not
 been set, an IllegalStateException is thrown.

Returns:
the tile grid X offset to be used for encoding.
Throws:
UnsupportedOperationException - if the plug-in does not
 support tiling.
IllegalStateException - if the tiling mode is not
 MODE_EXPLICIT.
IllegalStateException - if the tiling parameters have
 not been set.
See Also:
setTiling(int, int, int, int), 
getTileGridYOffset()


"
ImageWriteParam,getTileGridYOffset(),int,Returns the vertical tile grid offset of an image as it will be written to the output stream.,"

getTileGridYOffset
public int getTileGridYOffset()
Returns the vertical tile grid offset of an image as it will
 be written to the output stream.  If tiling parameters have not
 been set, an IllegalStateException is thrown.

Returns:
the tile grid Y offset to be used for encoding.
Throws:
UnsupportedOperationException - if the plug-in does not
 support tiling.
IllegalStateException - if the tiling mode is not
 MODE_EXPLICIT.
IllegalStateException - if the tiling parameters have
 not been set.
See Also:
setTiling(int, int, int, int), 
getTileGridXOffset()


"
ImageWriteParam,getTileHeight(),int,Returns the height of each tile in an image as it will be written to the output stream.,"

getTileHeight
public int getTileHeight()
Returns the height of each tile in an image as it will be written to
 the output stream.  If tiling parameters have not
 been set, an IllegalStateException is thrown.

Returns:
the tile height to be used for encoding.
Throws:
UnsupportedOperationException - if the plug-in does not
 support tiling.
IllegalStateException - if the tiling mode is not
 MODE_EXPLICIT.
IllegalStateException - if the tiling parameters have
 not been set.
See Also:
setTiling(int, int, int, int), 
getTileWidth()


"
ImageWriteParam,getTileWidth(),int,Returns the width of each tile in an image as it will be written to the output stream.,"

getTileWidth
public int getTileWidth()
Returns the width of each tile in an image as it will be
 written to the output stream.  If tiling parameters have not
 been set, an IllegalStateException is thrown.

Returns:
the tile width to be used for encoding.
Throws:
UnsupportedOperationException - if the plug-in does not
 support tiling.
IllegalStateException - if the tiling mode is not
 MODE_EXPLICIT.
IllegalStateException - if the tiling parameters have
 not been set.
See Also:
setTiling(int, int, int, int), 
getTileHeight()


"
ImageWriteParam,getTilingMode(),int,"Returns the current tiling mode, if tiling is supported.","

getTilingMode
public int getTilingMode()
Returns the current tiling mode, if tiling is supported.
 Otherwise throws an UnsupportedOperationException.

Returns:
the current tiling mode.
Throws:
UnsupportedOperationException - if
 canWriteTiles returns false.
See Also:
setTilingMode(int)


"
ImageWriteParam,isCompressionLossless(),boolean,Returns true if the current compression type provides lossless compression.,"

isCompressionLossless
public boolean isCompressionLossless()
Returns true if the current compression type
 provides lossless compression.  If a plug-in provides only
 one mandatory compression type, then this method may be
 called without calling setCompressionType first.

  If there are multiple compression types but none has
 been set, an IllegalStateException is thrown.

  The default implementation checks whether compression is
 supported and the compression mode is
 MODE_EXPLICIT.  If so, if
 getCompressionTypes() is null or
 getCompressionType() is non-null
true is returned as a convenience.

Returns:
true if the current compression type is
 lossless.
Throws:
UnsupportedOperationException - if the writer does not
 support compression.
IllegalStateException - if the compression mode is not
 MODE_EXPLICIT.
IllegalStateException - if the set of legal
 compression types is non-null and the current
 compression type is null.


"
ImageWriteParam,setCompressionMode(int mode),void,"Specifies whether compression is to be performed, and if so how compression parameters are to be determined.","

setCompressionMode
public void setCompressionMode(int mode)
Specifies whether compression is to be performed, and if so how
 compression parameters are to be determined.  The mode
 argument must be one of the four modes, interpreted as follows:

 
MODE_DISABLED - If the mode is set to
   MODE_DISABLED, methods that query or modify the
   compression type or parameters will throw an
   IllegalStateException (if compression is
   normally supported by the plug-in). Some writers, such as JPEG,
   do not normally offer uncompressed output. In this case, attempting
   to set the mode to MODE_DISABLED will throw an
   UnsupportedOperationException and the mode will not be
   changed.

   MODE_EXPLICIT - Compress using the
   compression type and quality settings specified in this
   ImageWriteParam.  Any previously set compression
   parameters are discarded.

   MODE_COPY_FROM_METADATA - Use whatever
   compression parameters are specified in metadata objects
   passed in to the writer.

   MODE_DEFAULT - Use default compression
   parameters.
 
 The default is MODE_COPY_FROM_METADATA.

Parameters:
mode - The mode for setting compression in the output
 stream.
Throws:
UnsupportedOperationException - if the writer does not
 support compression, or does not support the requested mode.
IllegalArgumentException - if mode is not
 one of the modes listed above.
See Also:
getCompressionMode()


"
ImageWriteParam,setCompressionQuality(float quality),void,Sets the compression quality to a value between 0 and 1.,"

setCompressionQuality
public void setCompressionQuality(float quality)
Sets the compression quality to a value between 0
 and 1.  Only a single compression quality setting
 is supported by default; writers can provide extended versions
 of ImageWriteParam that offer more control.  For
 lossy compression schemes, the compression quality should
 control the tradeoff between file size and image quality (for
 example, by choosing quantization tables when writing JPEG
 images).  For lossless schemes, the compression quality may be
 used to control the tradeoff between file size and time taken
 to perform the compression (for example, by optimizing row
 filters and setting the ZLIB compression level when writing
 PNG images).

  A compression quality setting of 0.0 is most generically
 interpreted as ""high compression is important,"" while a setting of
 1.0 is most generically interpreted as ""high image quality is
 important.""

  If there are multiple compression types but none has been
 set, an IllegalStateException is thrown.

  The default implementation checks that compression is
 supported, and that the compression mode is
 MODE_EXPLICIT.  If so, if
 getCompressionTypes() returns null or
 compressionType is non-null it sets
 the compressionQuality instance variable.

Parameters:
quality - a float between 0and
 1 indicating the desired quality level.
Throws:
UnsupportedOperationException - if the writer does not
 support compression.
IllegalStateException - if the compression mode is not
 MODE_EXPLICIT.
IllegalStateException - if the set of legal
 compression types is non-null and the current
 compression type is null.
IllegalArgumentException - if quality is
 not between 0and 1, inclusive.
See Also:
getCompressionQuality()


"
ImageWriteParam,setCompressionType(String compressionType),void,Sets the compression type to one of the values indicated by getCompressionTypes.,"

setCompressionType
public void setCompressionType(String compressionType)
Sets the compression type to one of the values indicated by
 getCompressionTypes.  If a value of
 null is passed in, any previous setting is
 removed.

  The default implementation checks whether compression is
 supported and the compression mode is
 MODE_EXPLICIT.  If so, it calls
 getCompressionTypes and checks if
 compressionType is one of the legal values.  If it
 is, the compressionType instance variable is set.
 If compressionType is null, the
 instance variable is set without performing any checking.

Parameters:
compressionType - one of the Strings returned
 by getCompressionTypes, or null to
 remove any previous setting.
Throws:
UnsupportedOperationException - if the writer does not
 support compression.
IllegalStateException - if the compression mode is not
 MODE_EXPLICIT.
UnsupportedOperationException - if there are no
 settable compression types.
IllegalArgumentException - if
 compressionType is non-null but is not
 one of the values returned by getCompressionTypes.
See Also:
getCompressionTypes(), 
getCompressionType(), 
unsetCompression()


"
ImageWriteParam,setProgressiveMode(int mode),void,Specifies that the writer is to write the image out in a progressive mode such that the stream will contain a series of scans of increasing quality.,"

setProgressiveMode
public void setProgressiveMode(int mode)
Specifies that the writer is to write the image out in a
 progressive mode such that the stream will contain a series of
 scans of increasing quality.  If progressive encoding is not
 supported, an UnsupportedOperationException will
 be thrown.

   The mode argument determines how
 the progression parameters are chosen, and must be either
 MODE_DISABLED,
 MODE_COPY_FROM_METADATA, or
 MODE_DEFAULT.  Otherwise an
 IllegalArgumentException is thrown.

  The modes are interpreted as follows:

 
MODE_DISABLED - No progression.  Use this to
   turn off progression.

   MODE_COPY_FROM_METADATA - The output image
   will use whatever progression parameters are found in the
   metadata objects passed into the writer.

   MODE_DEFAULT - The image will be written
   progressively, with parameters chosen by the writer.
 
 The default is MODE_COPY_FROM_METADATA.

Parameters:
mode - The mode for setting progression in the output
 stream.
Throws:
UnsupportedOperationException - if the writer does not
 support progressive encoding.
IllegalArgumentException - if mode is not
 one of the modes listed above.
See Also:
getProgressiveMode()


"
ImageWriteParam,"setTiling(int tileWidth, int tileHeight, int tileGridXOffset, int tileGridYOffset)",void,Specifies that the image should be tiled in the output stream.,"

setTiling
public void setTiling(int tileWidth,
                      int tileHeight,
                      int tileGridXOffset,
                      int tileGridYOffset)
Specifies that the image should be tiled in the output stream.
 The tileWidth and tileHeight
 parameters specify the width and height of the tiles in the
 file.  If the tile width or height is greater than the width or
 height of the image, the image is not tiled in that dimension.

  If canOffsetTiles returns false,
 then the tileGridXOffset and
 tileGridYOffset parameters must be zero.

Parameters:
tileWidth - the width of each tile.
tileHeight - the height of each tile.
tileGridXOffset - the horizontal offset of the tile grid.
tileGridYOffset - the vertical offset of the tile grid.
Throws:
UnsupportedOperationException - if the plug-in does not
 support tiling.
IllegalStateException - if the tiling mode is not
 MODE_EXPLICIT.
UnsupportedOperationException - if the plug-in does not
 support grid offsets, and the grid offsets are not both zero.
IllegalArgumentException - if the tile size is not
 within one of the allowable ranges returned by
 getPreferredTileSizes.
IllegalArgumentException - if tileWidth
 or tileHeight is less than or equal to 0.
See Also:
canWriteTiles, 
canOffsetTiles, 
getTileWidth(), 
getTileHeight(), 
getTileGridXOffset(), 
getTileGridYOffset()


"
ImageWriteParam,setTilingMode(int mode),void,"Determines whether the image will be tiled in the output stream and, if it will, how the tiling parameters will be determined.","

setTilingMode
public void setTilingMode(int mode)
Determines whether the image will be tiled in the output
 stream and, if it will, how the tiling parameters will be
 determined.  The modes are interpreted as follows:

 
MODE_DISABLED - The image will not be tiled.
 setTiling will throw an
 IllegalStateException.

 MODE_DEFAULT - The image will be tiled using
 default parameters.  setTiling will throw an
 IllegalStateException.

 MODE_EXPLICIT - The image will be tiled
 according to parameters given in the setTiling
 method.  Any previously set tiling parameters are discarded.

 MODE_COPY_FROM_METADATA - The image will
 conform to the metadata object passed in to a write.
 setTiling will throw an
 IllegalStateException.

 

Parameters:
mode - The mode to use for tiling.
Throws:
UnsupportedOperationException - if
 canWriteTiles returns false.
IllegalArgumentException - if mode is not
 one of the modes listed above.
See Also:
setTiling(int, int, int, int), 
getTilingMode()


"
ImageWriteParam,unsetCompression(),void,Removes any previous compression type and quality settings.,"

unsetCompression
public void unsetCompression()
Removes any previous compression type and quality settings.

  The default implementation sets the instance variable
 compressionType to null, and the
 instance variable compressionQuality to
 1.0F.

Throws:
UnsupportedOperationException - if the plug-in does not
 support compression.
IllegalStateException - if the compression mode is not
 MODE_EXPLICIT.
See Also:
setCompressionType(java.lang.String), 
setCompressionQuality(float)


"
ImageWriteParam,unsetTiling(),void,Removes any previous tile grid parameters specified by calls to setTiling.,"

unsetTiling
public void unsetTiling()
Removes any previous tile grid parameters specified by calls to
 setTiling.

  The default implementation sets the instance variables
 tileWidth, tileHeight,
 tileGridXOffset, and
 tileGridYOffset to 0.

Throws:
UnsupportedOperationException - if the plug-in does not
 support tiling.
IllegalStateException - if the tiling mode is not
 MODE_EXPLICIT.
See Also:
setTiling(int, int, int, int)


"
ImageWriter,abort(),void,Requests that any current write operation be aborted.,"

abort
public void abort()
Requests that any current write operation be aborted.  The
 contents of the output following the abort will be undefined.

  Writers should call clearAbortRequest at the
 beginning of each write operation, and poll the value of
 abortRequested regularly during the write.

"
ImageWriter,abortRequested(),protected boolean,Returns true if a request to abort the current write operation has been made since the writer was instantiated or clearAbortRequest was called.,"

abortRequested
protected boolean abortRequested()
Returns true if a request to abort the current
 write operation has been made since the writer was instantiated or
 clearAbortRequest was called.

Returns:
true if the current write operation should
 be aborted.
See Also:
abort(), 
clearAbortRequest()


"
ImageWriter,addIIOWriteProgressListener(IIOWriteProgressListener listener),void,Adds an IIOWriteProgressListener to the list of registered progress listeners.,"

addIIOWriteProgressListener
public void addIIOWriteProgressListener(IIOWriteProgressListener listener)
Adds an IIOWriteProgressListener to the list of
 registered progress listeners.  If listener is
 null, no exception will be thrown and no action
 will be taken.

Parameters:
listener - an IIOWriteProgressListener to be
 registered.
See Also:
removeIIOWriteProgressListener(javax.imageio.event.IIOWriteProgressListener)


"
ImageWriter,addIIOWriteWarningListener(IIOWriteWarningListener listener),void,Adds an IIOWriteWarningListener to the list of registered warning listeners.,"

addIIOWriteWarningListener
public void addIIOWriteWarningListener(IIOWriteWarningListener listener)
Adds an IIOWriteWarningListener to the list of
 registered warning listeners.  If listener is
 null, no exception will be thrown and no action
 will be taken.  Messages sent to the given listener will be
 localized, if possible, to match the current
 Locale.  If no Locale has been set,
 warning messages may be localized as the writer sees fit.

Parameters:
listener - an IIOWriteWarningListener to be
 registered.
See Also:
removeIIOWriteWarningListener(javax.imageio.event.IIOWriteWarningListener)


"
ImageWriter,canInsertEmpty(int imageIndex),boolean,"Returns true if the writer supports the insertion of a new, empty image at the given index.","

canInsertEmpty
public boolean canInsertEmpty(int imageIndex)
                       throws IOException
Returns true if the writer supports the insertion
 of a new, empty image at the given index.  The pixel values of
 the image are undefined, and may be specified in pieces using
 the replacePixels methods.  Existing images with
 indices greater than or equal to the insertion index will have
 their indices increased by 1.  A value for
 imageIndex of -1 may be used to
 signify an index one larger than the current largest index.

  A writer that does not support insertion of empty images
 may return false without performing bounds
 checking on the index.

  The default implementation throws an
 IllegalStateException if the output is
 null, and otherwise returns false
 without checking the value of imageIndex.

Parameters:
imageIndex - the index at which the image is to be
 inserted.
Returns:
true if an empty image may be inserted at
 the given index.
Throws:
IllegalStateException - if the output has not been
 set.
IndexOutOfBoundsException - if the writer supports
 empty image insertion in general, but imageIndex
 is less than -1 or greater than the largest available index.
IOException - if an I/O error occurs during the
 query.


"
ImageWriter,canInsertImage(int imageIndex),boolean,Returns true if the writer supports the insertion of a new image at the given index.,"

canInsertImage
public boolean canInsertImage(int imageIndex)
                       throws IOException
Returns true if the writer supports the insertion
 of a new image at the given index.  Existing images with
 indices greater than or equal to the insertion index will have
 their indices increased by 1.  A value for
 imageIndex of -1 may be used to
 signify an index one larger than the current largest index.

  A writer that does not support any image insertion may
 return false without performing bounds checking on
 the index.

  The default implementation throws an
 IllegalStateException if the output is
 null, and otherwise returns false
 without checking the value of imageIndex.

Parameters:
imageIndex - the index at which the image is to be
 inserted.
Returns:
true if an image may be inserted at the
 given index.
Throws:
IllegalStateException - if the output has not
 been set.
IndexOutOfBoundsException - if the writer supports
 image insertion in general, but imageIndex is less
 than -1 or greater than the largest available index.
IOException - if an I/O error occurs during the query.


"
ImageWriter,canRemoveImage(int imageIndex),boolean,Returns true if the writer supports the removal of an existing image at the given index.,"

canRemoveImage
public boolean canRemoveImage(int imageIndex)
                       throws IOException
Returns true if the writer supports the removal
 of an existing image at the given index.  Existing images with
 indices greater than the insertion index will have
 their indices decreased by 1.

  A writer that does not support any image removal may
 return false without performing bounds checking on
 the index.

  The default implementation throws an
 IllegalStateException if the output is
 null, and otherwise returns false
 without checking the value of imageIndex.

Parameters:
imageIndex - the index of the image to be removed.
Returns:
true if it is possible to remove the given
 image.
Throws:
IllegalStateException - if the output has not
 been set.
IndexOutOfBoundsException - if the writer supports
 image removal in general, but imageIndex is less
 than 0 or greater than the largest available index.
IOException - if an I/O error occurs during the
 query.


"
ImageWriter,canReplaceImageMetadata(int imageIndex),boolean,Returns true if it is possible to replace the image metadata associated with an existing image with index imageIndex.,"

canReplaceImageMetadata
public boolean canReplaceImageMetadata(int imageIndex)
                                throws IOException
Returns true if it is possible to replace the
 image metadata associated with an existing image with index
 imageIndex.  If this method returns
 false, a call to
 replaceImageMetadata(imageIndex) will throw an
 UnsupportedOperationException.

  A writer that does not support any image metadata
 replacement may return false without performing
 bounds checking on the index.

  The default implementation throws an
 IllegalStateException if the output is
 null, and otherwise returns false
 without checking the value of imageIndex.

Parameters:
imageIndex - the index of the image whose metadata is to
 be replaced.
Returns:
true if the image metadata of the given
 image can be replaced.
Throws:
IllegalStateException - if the output has not
 been set.
IndexOutOfBoundsException - if the writer supports
 image metadata replacement in general, but
 imageIndex is less than 0 or greater than the
 largest available index.
IOException - if an I/O error occurs during the query.


"
ImageWriter,canReplacePixels(int imageIndex),boolean,Returns true if the writer allows pixels of the given image to be replaced using the replacePixels methods.,"

canReplacePixels
public boolean canReplacePixels(int imageIndex)
                         throws IOException
Returns true if the writer allows pixels of the
 given image to be replaced using the replacePixels
 methods.

  A writer that does not support any pixel replacement may
 return false without performing bounds checking on
 the index.

  The default implementation throws an
 IllegalStateException if the output is
 null, and otherwise returns false
 without checking the value of imageIndex.

Parameters:
imageIndex - the index of the image whose pixels are to be
 replaced.
Returns:
true if the pixels of the given
 image can be replaced.
Throws:
IllegalStateException - if the output has not been
 set.
IndexOutOfBoundsException - if the writer supports
 pixel replacement in general, but imageIndex is
 less than 0 or greater than the largest available index.
IOException - if an I/O error occurs during the query.


"
ImageWriter,canReplaceStreamMetadata(),boolean,Returns true if it is possible to replace the stream metadata already present in the output.,"

canReplaceStreamMetadata
public boolean canReplaceStreamMetadata()
                                 throws IOException
Returns true if it is possible to replace the
 stream metadata already present in the output.

  The default implementation throws an
 IllegalStateException if the output is
 null, and otherwise returns false.

Returns:
true if replacement of stream metadata is
 allowed.
Throws:
IllegalStateException - if the output has not
 been set.
IOException - if an I/O error occurs during the query.


"
ImageWriter,canWriteEmpty(),boolean,Returns true if the writer supports the writing of a complete image stream consisting of a single image with undefined pixel values and associated metadata and thumbnails to the output.,"

canWriteEmpty
public boolean canWriteEmpty()
                      throws IOException
Returns true if the writer supports the writing of
 a complete image stream consisting of a single image with
 undefined pixel values and associated metadata and thumbnails
 to the output.  The pixel values may be defined by future
 calls to the replacePixels methods.  If the output
 is an ImageOutputStream, its existing contents
 prior to the current seek position are not affected, and need
 not be readable or writable.

  The default implementation throws an
 IllegalStateException if the output is
 null, and otherwise returns false.

Returns:
true if the writing of complete image
 stream with contents to be defined later is supported.
Throws:
IllegalStateException - if the output has not been
 set.
IOException - if an I/O error occurs during the
 query.


"
ImageWriter,canWriteRasters(),boolean,Returns true if the methods that take an IIOImage parameter are capable of dealing with a Raster (as opposed to RenderedImage) source image.,"

canWriteRasters
public boolean canWriteRasters()
Returns true if the methods that take an
 IIOImage parameter are capable of dealing with a
 Raster (as opposed to RenderedImage)
 source image.  If this method returns false, then
 those methods will throw an
 UnsupportedOperationException if supplied with an
 IIOImage containing a Raster.

  The default implementation returns false.

Returns:
true if Raster sources are
 supported.


"
ImageWriter,canWriteSequence(),boolean,Returns true if the writer is able to append an image to an image stream that already contains header information and possibly prior images.,"

canWriteSequence
public boolean canWriteSequence()
Returns true if the writer is able to append an
 image to an image stream that already contains header
 information and possibly prior images.

  If canWriteSequence returns false,
 writeToSequence and endWriteSequence
 will throw an UnsupportedOperationException.

  The default implementation returns false.

Returns:
true if images may be appended sequentially.


"
ImageWriter,clearAbortRequest(),protected void,Clears any previous abort request.,"

clearAbortRequest
protected void clearAbortRequest()
Clears any previous abort request.  After this method has been
 called, abortRequested will return
 false.

See Also:
abort(), 
abortRequested()


"
ImageWriter,"convertImageMetadata(IIOMetadata inData, ImageTypeSpecifier imageType, ImageWriteParam param)",abstract IIOMetadata,Returns an IIOMetadata object that may be used for encoding and optionally modified using its document interfaces or other interfaces specific to the writer plug-in that will be used for encoding.,"

convertImageMetadata
public abstract IIOMetadata convertImageMetadata(IIOMetadata inData,
                                                 ImageTypeSpecifier imageType,
                                                 ImageWriteParam param)
Description copied from interface: ImageTranscoder
Returns an IIOMetadata object that may be used for
 encoding and optionally modified using its document interfaces
 or other interfaces specific to the writer plug-in that will be
 used for encoding.

  An optional ImageWriteParam may be supplied
 for cases where it may affect the structure of the image
 metadata.

  If the supplied ImageWriteParam contains
 optional setting values not understood by this writer or
 transcoder, they will be ignored.

Specified by:
convertImageMetadata in interface ImageTranscoder
Parameters:
inData - an IIOMetadata object representing
 image metadata, used to initialize the state of the returned
 object.
imageType - an ImageTypeSpecifier indicating
 the layout and color information of the image with which the
 metadata will be associated.
param - an ImageWriteParam that will be used to
 encode the image, or null.
Returns:
an IIOMetadata object,
 or null if the plug-in does not provide
 metadata encoding capabilities.


"
ImageWriter,"convertStreamMetadata(IIOMetadata inData, ImageWriteParam param)",abstract IIOMetadata,Returns an IIOMetadata object that may be used for encoding and optionally modified using its document interfaces or other interfaces specific to the writer plug-in that will be used for encoding.,"

convertStreamMetadata
public abstract IIOMetadata convertStreamMetadata(IIOMetadata inData,
                                                  ImageWriteParam param)
Description copied from interface: ImageTranscoder
Returns an IIOMetadata object that may be used for
 encoding and optionally modified using its document interfaces
 or other interfaces specific to the writer plug-in that will be
 used for encoding.

  An optional ImageWriteParam may be supplied
 for cases where it may affect the structure of the stream
 metadata.

  If the supplied ImageWriteParam contains
 optional setting values not understood by this writer or
 transcoder, they will be ignored.

Specified by:
convertStreamMetadata in interface ImageTranscoder
Parameters:
inData - an IIOMetadata object representing
 stream metadata, used to initialize the state of the returned
 object.
param - an ImageWriteParam that will be used to
 encode the image, or null.
Returns:
an IIOMetadata object, or
 null if the plug-in does not provide metadata
 encoding capabilities.


"
ImageWriter,dispose(),void,Allows any resources held by this object to be released.,"

dispose
public void dispose()
Allows any resources held by this object to be released.  The
 result of calling any other method (other than
 finalize) subsequent to a call to this method
 is undefined.

 It is important for applications to call this method when they
 know they will no longer be using this ImageWriter.
 Otherwise, the writer may continue to hold on to resources
 indefinitely.

 The default implementation of this method in the superclass does
 nothing.  Subclass implementations should ensure that all resources,
 especially native resources, are released.

"
ImageWriter,endInsertEmpty(),void,Completes the insertion of a new image that was begun with a prior call to prepareInsertEmpty.,"

endInsertEmpty
public void endInsertEmpty()
                    throws IOException
Completes the insertion of a new image that was begun with a
 prior call to prepareInsertEmpty.

  The default implementation throws an
 IllegalStateException if the output is
 null, and otherwise throws an
 UnsupportedOperationException.

Throws:
IllegalStateException - if the output has not
 been set.
UnsupportedOperationException - if
 canInsertEmpty(imageIndex) returns
 false.
IllegalStateException - if a previous call to
 prepareInsertEmpty without a corresponding call to
 endInsertEmpty has not been made.
IllegalStateException - if a previous call to
 prepareWriteEmpty without a corresponding call to
 endWriteEmpty has been made.
IllegalStateException - if a call to
 prepareReplacePixels has been made without a
 matching call to endReplacePixels.
IOException - if an I/O error occurs during writing.


"
ImageWriter,endReplacePixels(),void,Terminates a sequence of calls to replacePixels.,"

endReplacePixels
public void endReplacePixels()
                      throws IOException
Terminates a sequence of calls to replacePixels.

  If canReplacePixels returns
 false, and
 UnsupportedOperationException will be thrown.

  The default implementation throws an
 IllegalStateException if the output is
 null, and otherwise throws an
 UnsupportedOperationException.

Throws:
IllegalStateException - if the output has not
 been set.
UnsupportedOperationException - if
 canReplacePixels(imageIndex) returns
 false.
IllegalStateException - if there is no previous call
 to prepareReplacePixels without a matching call to
 endReplacePixels.
IOException - if an I/O error occurs during writing.


"
ImageWriter,endWriteEmpty(),void,Completes the writing of a new image that was begun with a prior call to prepareWriteEmpty.,"

endWriteEmpty
public void endWriteEmpty()
                   throws IOException
Completes the writing of a new image that was begun with a
 prior call to prepareWriteEmpty.

  If canWriteEmpty() returns false,
 an UnsupportedOperationException will be thrown.

  The default implementation throws an
 IllegalStateException if the output is
 null, and otherwise throws an
 UnsupportedOperationException.

Throws:
IllegalStateException - if the output has not
 been set.
UnsupportedOperationException - if
 canWriteEmpty(imageIndex) returns
 false.
IllegalStateException - if a previous call to
 prepareWriteEmpty without a corresponding call to
 endWriteEmpty has not been made.
IllegalStateException - if a previous call to
 prepareInsertEmpty without a corresponding call to
 endInsertEmpty has been made.
IllegalStateException - if a call to
 prepareReiplacePixels has been made without a
 matching call to endReplacePixels.
IOException - if an I/O error occurs during writing.


"
ImageWriter,endWriteSequence(),void,Completes the writing of a sequence of images begun with prepareWriteSequence.,"

endWriteSequence
public void endWriteSequence()
                      throws IOException
Completes the writing of a sequence of images begun with
 prepareWriteSequence.  Any stream metadata that
 should come at the end of the sequence of images is written out,
 and any header information at the beginning of the sequence is
 patched up if necessary.  If the output is an
 ImageOutputStream, data through the stream metadata
 at the end of the sequence are flushed and need not be readable
 or writable.

  If canWriteSequence returns false,
 this method will throw an
 UnsupportedOperationException.

  The default implementation throws an
 IllegalStateException if the output is
 null, and otherwise throws an
 UnsupportedOperationException.

Throws:
IllegalStateException - if the output has not
 been set, or prepareWriteSequence has not been called.
UnsupportedOperationException - if
 canWriteSequence returns false.
IOException - if an error occurs during writing.


"
ImageWriter,getAvailableLocales(),Locale[],Returns an array of Locales that may be used to localize warning listeners and compression settings.,"

getAvailableLocales
public Locale[] getAvailableLocales()
Returns an array of Locales that may be used to
 localize warning listeners and compression settings.  A return
 value of null indicates that localization is not
 supported.

  The default implementation returns a clone of the
 availableLocales instance variable if it is
 non-null, or else returns null.

Returns:
an array of Locales that may be used as
 arguments to setLocale, or null.


"
ImageWriter,"getDefaultImageMetadata(ImageTypeSpecifier imageType, ImageWriteParam param)",abstract IIOMetadata,Returns an IIOMetadata object containing default values for encoding an image of the given type.,"

getDefaultImageMetadata
public abstract IIOMetadata getDefaultImageMetadata(ImageTypeSpecifier imageType,
                                                    ImageWriteParam param)
Returns an IIOMetadata object containing default
 values for encoding an image of the given type.  The contents
 of the object may be manipulated using either the XML tree
 structure returned by the IIOMetadata.getAsTree
 method, an IIOMetadataController object, or via
 plug-in specific interfaces, and the resulting data supplied to
 one of the write methods that take a stream
 metadata parameter.

  An optional ImageWriteParam may be supplied
 for cases where it may affect the structure of the image
 metadata.

  If the supplied ImageWriteParam contains
 optional setting values not supported by this writer (e.g.
 progressive encoding or any format-specific settings), they
 will be ignored.

Parameters:
imageType - an ImageTypeSpecifier indicating the
 format of the image to be written later.
param - an ImageWriteParam that will be used to
 encode the image, or null.
Returns:
an IIOMetadata object.


"
ImageWriter,getDefaultStreamMetadata(ImageWriteParam param),abstract IIOMetadata,Returns an IIOMetadata object containing default values for encoding a stream of images.,"

getDefaultStreamMetadata
public abstract IIOMetadata getDefaultStreamMetadata(ImageWriteParam param)
Returns an IIOMetadata object containing default
 values for encoding a stream of images.  The contents of the
 object may be manipulated using either the XML tree structure
 returned by the IIOMetadata.getAsTree method, an
 IIOMetadataController object, or via plug-in
 specific interfaces, and the resulting data supplied to one of
 the write methods that take a stream metadata
 parameter.

  An optional ImageWriteParam may be supplied
 for cases where it may affect the structure of the stream
 metadata.

  If the supplied ImageWriteParam contains
 optional setting values not supported by this writer (e.g.
 progressive encoding or any format-specific settings), they
 will be ignored.

  Writers that do not make use of stream metadata
 (e.g., writers for single-image formats) should return
 null.

Parameters:
param - an ImageWriteParam that will be used to
 encode the image, or null.
Returns:
an IIOMetadata object.


"
ImageWriter,getDefaultWriteParam(),ImageWriteParam,"Returns a new ImageWriteParam object of the appropriate type for this file format containing default values, that is, those values that would be used if no ImageWriteParam object were specified.","

getDefaultWriteParam
public ImageWriteParam getDefaultWriteParam()
Returns a new ImageWriteParam object of the
 appropriate type for this file format containing default
 values, that is, those values that would be used
 if no ImageWriteParam object were specified.  This
 is useful as a starting point for tweaking just a few parameters
 and otherwise leaving the default settings alone.

  The default implementation constructs and returns a new
 ImageWriteParam object that does not allow tiling,
 progressive encoding, or compression, and that will be
 localized for the current Locale (i.e.,
 what you would get by calling new
 ImageWriteParam(getLocale()).

  Individual plug-ins may return an instance of
 ImageWriteParam with additional optional features
 enabled, or they may return an instance of a plug-in specific
 subclass of ImageWriteParam.

Returns:
a new ImageWriteParam object containing
 default values.


"
ImageWriter,getLocale(),Locale,"Returns the currently set Locale, or null if none has been set.","

getLocale
public Locale getLocale()
Returns the currently set Locale, or
 null if none has been set.

  The default implementation returns the value of the
 locale instance variable.

Returns:
the current Locale, or null.
See Also:
setLocale(java.util.Locale)


"
ImageWriter,"getNumThumbnailsSupported(ImageTypeSpecifier imageType, ImageWriteParam param, IIOMetadata streamMetadata, IIOMetadata imageMetadata)",int,"Returns the number of thumbnails supported by the format being written, given the image type and any additional write parameters and metadata objects that will be used during encoding.","

getNumThumbnailsSupported
public int getNumThumbnailsSupported(ImageTypeSpecifier imageType,
                                     ImageWriteParam param,
                                     IIOMetadata streamMetadata,
                                     IIOMetadata imageMetadata)
Returns the number of thumbnails supported by the format being
 written, given the image type and any additional write
 parameters and metadata objects that will be used during
 encoding.  A return value of -1 indicates that
 insufficient information is available.

  An ImageWriteParam may optionally be supplied
 for cases where it may affect thumbnail handling.

  If the supplied ImageWriteParam contains
 optional setting values not supported by this writer (e.g.
 progressive encoding or any format-specific settings), they
 will be ignored.

  The default implementation returns 0.

Parameters:
imageType - an ImageTypeSpecifier indicating
 the type of image to be written, or null.
param - the ImageWriteParam that will be used for
 writing, or null.
streamMetadata - an IIOMetadata object that will
 be used for writing, or null.
imageMetadata - an IIOMetadata object that will
 be used for writing, or null.
Returns:
the number of thumbnails that may be written given the
 supplied parameters, or -1 if insufficient
 information is available.


"
ImageWriter,getOriginatingProvider(),ImageWriterSpi,"Returns the ImageWriterSpi object that created this ImageWriter, or null if this object was not created through the IIORegistry.","

getOriginatingProvider
public ImageWriterSpi getOriginatingProvider()
Returns the ImageWriterSpi object that created
 this ImageWriter, or null if this
 object was not created through the IIORegistry.

  The default implementation returns the value of the
 originatingProvider instance variable.

Returns:
an ImageWriterSpi, or null.
See Also:
ImageWriterSpi


"
ImageWriter,getOutput(),Object,Returns the ImageOutputStream or other Object set by the most recent call to the setOutput method.,"

getOutput
public Object getOutput()
Returns the ImageOutputStream or other
 Object set by the most recent call to the
 setOutput method.  If no destination has been
 set, null is returned.

  The default implementation returns the value of the
 output instance variable.

Returns:
the Object that was specified using
 setOutput, or null.
See Also:
setOutput(java.lang.Object)


"
ImageWriter,"getPreferredThumbnailSizes(ImageTypeSpecifier imageType, ImageWriteParam param, IIOMetadata streamMetadata, IIOMetadata imageMetadata)",Dimension[],Returns an array of Dimensions indicating the legal size ranges for thumbnail images as they will be encoded in the output file or stream.,"

getPreferredThumbnailSizes
public Dimension[] getPreferredThumbnailSizes(ImageTypeSpecifier imageType,
                                              ImageWriteParam param,
                                              IIOMetadata streamMetadata,
                                              IIOMetadata imageMetadata)
Returns an array of Dimensions indicating the
 legal size ranges for thumbnail images as they will be encoded
 in the output file or stream.  This information is merely
 advisory; the writer will resize any supplied thumbnails as
 necessary.

  The information is returned as a set of pairs; the first
 element of a pair contains an (inclusive) minimum width and
 height, and the second element contains an (inclusive) maximum
 width and height.  Together, each pair defines a valid range of
 sizes.  To specify a fixed size, the same width and height will
 appear for both elements.  A return value of null
 indicates that the size is arbitrary or unknown.

  An ImageWriteParam may optionally be supplied
 for cases where it may affect thumbnail handling.

  If the supplied ImageWriteParam contains
 optional setting values not supported by this writer (e.g.
 progressive encoding or any format-specific settings), they
 will be ignored.

  The default implementation returns null.

Parameters:
imageType - an ImageTypeSpecifier indicating the
 type of image to be written, or null.
param - the ImageWriteParam that will be used for
 writing, or null.
streamMetadata - an IIOMetadata object that will
 be used for writing, or null.
imageMetadata - an IIOMetadata object that will
 be used for writing, or null.
Returns:
an array of Dimensions with an even length
 of at least two, or null.


"
ImageWriter,"prepareInsertEmpty(int imageIndex, ImageTypeSpecifier imageType, int width, int height, IIOMetadata imageMetadata, List<? extends BufferedImage> thumbnails, ImageWriteParam param)",void,Begins the insertion of a new image with undefined pixel values into an existing image stream.,"

prepareInsertEmpty
public void prepareInsertEmpty(int imageIndex,
                               ImageTypeSpecifier imageType,
                               int width,
                               int height,
                               IIOMetadata imageMetadata,
                               List<? extends BufferedImage> thumbnails,
                               ImageWriteParam param)
                        throws IOException
Begins the insertion of a new image with undefined pixel values
 into an existing image stream.  Existing images with an index
 greater than imageIndex are preserved, and their
 indices are each increased by 1.  A value for
 imageIndex of -1 may be used to signify an index
 one larger than the previous largest index; that is, it will
 cause the image to be logically appended to the end of the
 sequence.  If the output is an ImageOutputStream,
 the entirety of the stream must be both readable and writeable.

  The image contents may be
 supplied later using the replacePixels method.
 The insertion is not complete until a call to
 endInsertEmpty occurs.  Calls to
 prepareReplacePixels, replacePixels,
 and endReplacePixels may occur between calls to
 prepareInsertEmpty and
 endInsertEmpty.  However, calls to
 prepareInsertEmpty cannot be nested, and calls to
 prepareWriteEmpty and
 prepareInsertEmpty may not be interspersed.

  If canInsertEmpty(imageIndex) returns
 false, an
 UnsupportedOperationException will be thrown.

  An ImageWriteParam may optionally be supplied
 to control the writing process.  If param is
 null, a default write param will be used.

  If the supplied ImageWriteParam contains
 optional setting values not supported by this writer (e.g.
 progressive encoding or any format-specific settings), they
 will be ignored.

  The default implementation throws an
 IllegalStateException if the output is
 null, and otherwise throws an
 UnsupportedOperationException.

Parameters:
imageIndex - the index at which to write the image.
imageType - an ImageTypeSpecifier describing
 the layout of the image.
width - the width of the image.
height - the height of the image.
imageMetadata - an IIOMetadata object
 representing image metadata, or null.
thumbnails - a List of
 BufferedImage thumbnails for this image, or
 null.
param - an ImageWriteParam, or
 null to use a default
 ImageWriteParam.
Throws:
IllegalStateException - if the output has not
 been set.
UnsupportedOperationException - if
 canInsertEmpty(imageIndex) returns
 false.
IndexOutOfBoundsException - if imageIndex
 is less than -1 or greater than the largest available index.
IllegalStateException - if a previous call to
 prepareInsertEmpty has been made without a
 corresponding call to endInsertEmpty.
IllegalStateException - if a previous call to
 prepareWriteEmpty has been made without a
 corresponding call to endWriteEmpty.
IllegalArgumentException - if imageType
 is null or thumbnails contains
 null references or objects other than
 BufferedImages.
IllegalArgumentException - if width or height are less
 than 1.
IOException - if an I/O error occurs during writing.


"
ImageWriter,"prepareReplacePixels(int imageIndex, Rectangle region)",void,Prepares the writer to handle a series of calls to the replacePixels methods.,"

prepareReplacePixels
public void prepareReplacePixels(int imageIndex,
                                 Rectangle region)
                          throws IOException
Prepares the writer to handle a series of calls to the
 replacePixels methods.  The affected pixel area
 will be clipped against the supplied

  If canReplacePixels returns
 false, and
 UnsupportedOperationException will be thrown.

  The default implementation throws an
 IllegalStateException if the output is
 null, and otherwise throws an
 UnsupportedOperationException.

Parameters:
imageIndex - the index of the image whose pixels are to be
 replaced.
region - a Rectangle that will be used to clip
 future pixel regions.
Throws:
IllegalStateException - if the output has not
 been set.
UnsupportedOperationException - if
 canReplacePixels(imageIndex) returns
 false.
IndexOutOfBoundsException - if imageIndex
 is less than 0 or greater than the largest available index.
IllegalStateException - if there is a previous call to
 prepareReplacePixels without a matching call to
 endReplacePixels (i.e., nesting is not
 allowed).
IllegalArgumentException - if region is
 null or has a width or height less than 1.
IOException - if an I/O error occurs during the
 preparation.


"
ImageWriter,"prepareWriteEmpty(IIOMetadata streamMetadata, ImageTypeSpecifier imageType, int width, int height, IIOMetadata imageMetadata, List<? extends BufferedImage> thumbnails, ImageWriteParam param)",void,"Begins the writing of a complete image stream, consisting of a single image with undefined pixel values and associated metadata and thumbnails, to the output.","

prepareWriteEmpty
public void prepareWriteEmpty(IIOMetadata streamMetadata,
                              ImageTypeSpecifier imageType,
                              int width,
                              int height,
                              IIOMetadata imageMetadata,
                              List<? extends BufferedImage> thumbnails,
                              ImageWriteParam param)
                       throws IOException
Begins the writing of a complete image stream, consisting of a
 single image with undefined pixel values and associated
 metadata and thumbnails, to the output.  The pixel values will
 be defined by future calls to the replacePixels
 methods.  If the output is an ImageOutputStream,
 its existing contents prior to the current seek position are
 not affected, and need not be readable or writable.

  The writing is not complete until a call to
 endWriteEmpty occurs.  Calls to
 prepareReplacePixels, replacePixels,
 and endReplacePixels may occur between calls to
 prepareWriteEmpty and endWriteEmpty.
 However, calls to prepareWriteEmpty cannot be
 nested, and calls to prepareWriteEmpty and
 prepareInsertEmpty may not be interspersed.

  If canWriteEmpty returns false,
 an UnsupportedOperationException will be thrown.

  An ImageWriteParam may optionally be supplied
 to control the writing process.  If param is
 null, a default write param will be used.

  If the supplied ImageWriteParam contains
 optional setting values not supported by this writer (e.g.
 progressive encoding or any format-specific settings), they
 will be ignored.

  The default implementation throws an
 IllegalStateException if the output is
 null, and otherwise throws an
 UnsupportedOperationException.

Parameters:
streamMetadata - an IIOMetadata object representing
 stream metadata, or null to use default values.
imageType - an ImageTypeSpecifier describing
 the layout of the image.
width - the width of the image.
height - the height of the image.
imageMetadata - an IIOMetadata object
 representing image metadata, or null.
thumbnails - a List of
 BufferedImage thumbnails for this image, or
 null.
param - an ImageWriteParam, or
 null to use a default
 ImageWriteParam.
Throws:
IllegalStateException - if the output has not
 been set.
UnsupportedOperationException - if
 canWriteEmpty returns false.
IllegalStateException - if a previous call to
 prepareWriteEmpty has been made without a
 corresponding call to endWriteEmpty.
IllegalStateException - if a previous call to
 prepareInsertEmpty has been made without a
 corresponding call to endInsertEmpty.
IllegalArgumentException - if imageType
 is null or thumbnails contains
 null references or objects other than
 BufferedImages.
IllegalArgumentException - if width or height are less
 than 1.
IOException - if an I/O error occurs during writing.


"
ImageWriter,prepareWriteSequence(IIOMetadata streamMetadata),void,"Prepares a stream to accept a series of subsequent writeToSequence calls, using the provided stream metadata object.","

prepareWriteSequence
public void prepareWriteSequence(IIOMetadata streamMetadata)
                          throws IOException
Prepares a stream to accept a series of subsequent
 writeToSequence calls, using the provided stream
 metadata object.  The metadata will be written to the stream if
 it should precede the image data.  If the argument is null,
 default stream metadata is used.

  If the output is an ImageOutputStream, the existing
 contents of the output prior to the current seek position are
 flushed, and need not be readable or writable.  If the format
 requires that endWriteSequence be able to rewind to
 patch up the header information, such as for a sequence of images
 in a single TIFF file, then the metadata written by this method
 must remain in a writable portion of the stream.  Other formats
 may flush the stream after this method and after each image.

  If canWriteSequence returns false,
 this method will throw an
 UnsupportedOperationException.

  The output must have been set beforehand using either
 the setOutput method.

  The default implementation throws an
 IllegalStateException if the output is
 null, and otherwise throws an
 UnsupportedOperationException.

Parameters:
streamMetadata - A stream metadata object, or null.
Throws:
IllegalStateException - if the output has not
 been set.
UnsupportedOperationException - if
 canWriteSequence returns false.
IOException - if an error occurs writing the stream
 metadata.


"
ImageWriter,processImageComplete(),protected void,Broadcasts the completion of an image write to all registered IIOWriteProgressListeners by calling their imageComplete method.,"

processImageComplete
protected void processImageComplete()
Broadcasts the completion of an image write to all registered
 IIOWriteProgressListeners by calling their
 imageComplete method.  Subclasses may use this
 method as a convenience.

"
ImageWriter,processImageProgress(float percentageDone),protected void,Broadcasts the current percentage of image completion to all registered IIOWriteProgressListeners by calling their imageProgress method.,"

processImageProgress
protected void processImageProgress(float percentageDone)
Broadcasts the current percentage of image completion to all
 registered IIOWriteProgressListeners by calling
 their imageProgress method.  Subclasses may use
 this method as a convenience.

Parameters:
percentageDone - the current percentage of completion,
 as a float.


"
ImageWriter,processImageStarted(int imageIndex),protected void,Broadcasts the start of an image write to all registered IIOWriteProgressListeners by calling their imageStarted method.,"

processImageStarted
protected void processImageStarted(int imageIndex)
Broadcasts the start of an image write to all registered
 IIOWriteProgressListeners by calling their
 imageStarted method.  Subclasses may use this
 method as a convenience.

Parameters:
imageIndex - the index of the image about to be written.


"
ImageWriter,processThumbnailComplete(),protected void,Broadcasts the completion of a thumbnail write to all registered IIOWriteProgressListeners by calling their thumbnailComplete method.,"

processThumbnailComplete
protected void processThumbnailComplete()
Broadcasts the completion of a thumbnail write to all registered
 IIOWriteProgressListeners by calling their
 thumbnailComplete method.  Subclasses may use this
 method as a convenience.

"
ImageWriter,processThumbnailProgress(float percentageDone),protected void,Broadcasts the current percentage of thumbnail completion to all registered IIOWriteProgressListeners by calling their thumbnailProgress method.,"

processThumbnailProgress
protected void processThumbnailProgress(float percentageDone)
Broadcasts the current percentage of thumbnail completion to
 all registered IIOWriteProgressListeners by calling
 their thumbnailProgress method.  Subclasses may
 use this method as a convenience.

Parameters:
percentageDone - the current percentage of completion,
 as a float.


"
ImageWriter,"processThumbnailStarted(int imageIndex, int thumbnailIndex)",protected void,Broadcasts the start of a thumbnail write to all registered IIOWriteProgressListeners by calling their thumbnailStarted method.,"

processThumbnailStarted
protected void processThumbnailStarted(int imageIndex,
                                       int thumbnailIndex)
Broadcasts the start of a thumbnail write to all registered
 IIOWriteProgressListeners by calling their
 thumbnailStarted method.  Subclasses may use this
 method as a convenience.

Parameters:
imageIndex - the index of the image associated with the
 thumbnail.
thumbnailIndex - the index of the thumbnail.


"
ImageWriter,"processWarningOccurred(int imageIndex, String warning)",protected void,Broadcasts a warning message to all registered IIOWriteWarningListeners by calling their warningOccurred method.,"

processWarningOccurred
protected void processWarningOccurred(int imageIndex,
                                      String warning)
Broadcasts a warning message to all registered
 IIOWriteWarningListeners by calling their
 warningOccurred method.  Subclasses may use this
 method as a convenience.

Parameters:
imageIndex - the index of the image on which the warning
 occurred.
warning - the warning message.
Throws:
IllegalArgumentException - if warning
 is null.


"
ImageWriter,"processWarningOccurred(int imageIndex, String baseName, String keyword)",protected void,Broadcasts a localized warning message to all registered IIOWriteWarningListeners by calling their warningOccurred method with a string taken from a ResourceBundle.,"

processWarningOccurred
protected void processWarningOccurred(int imageIndex,
                                      String baseName,
                                      String keyword)
Broadcasts a localized warning message to all registered
 IIOWriteWarningListeners by calling their
 warningOccurred method with a string taken
 from a ResourceBundle.  Subclasses may use this
 method as a convenience.

Parameters:
imageIndex - the index of the image on which the warning
 occurred.
baseName - the base name of a set of
 ResourceBundles containing localized warning
 messages.
keyword - the keyword used to index the warning message
 within the set of ResourceBundles.
Throws:
IllegalArgumentException - if baseName
 is null.
IllegalArgumentException - if keyword
 is null.
IllegalArgumentException - if no appropriate
 ResourceBundle may be located.
IllegalArgumentException - if the named resource is
 not found in the located ResourceBundle.
IllegalArgumentException - if the object retrieved
 from the ResourceBundle is not a
 String.


"
ImageWriter,processWriteAborted(),protected void,Broadcasts that the write has been aborted to all registered IIOWriteProgressListeners by calling their writeAborted method.,"

processWriteAborted
protected void processWriteAborted()
Broadcasts that the write has been aborted to all registered
 IIOWriteProgressListeners by calling their
 writeAborted method.  Subclasses may use this
 method as a convenience.

"
ImageWriter,removeAllIIOWriteProgressListeners(),void,Removes all currently registered IIOWriteProgressListener objects.,"

removeAllIIOWriteProgressListeners
public void removeAllIIOWriteProgressListeners()
Removes all currently registered
 IIOWriteProgressListener objects.

  The default implementation sets the
 progressListeners instance variable to
 null.

"
ImageWriter,removeAllIIOWriteWarningListeners(),void,Removes all currently registered IIOWriteWarningListener objects.,"

removeAllIIOWriteWarningListeners
public void removeAllIIOWriteWarningListeners()
Removes all currently registered
 IIOWriteWarningListener objects.

  The default implementation sets the
 warningListeners and warningLocales
 instance variables to null.

"
ImageWriter,removeIIOWriteProgressListener(IIOWriteProgressListener listener),void,Removes an IIOWriteProgressListener from the list of registered progress listeners.,"

removeIIOWriteProgressListener
public void removeIIOWriteProgressListener(IIOWriteProgressListener listener)
Removes an IIOWriteProgressListener from the list
 of registered progress listeners.  If the listener was not
 previously registered, or if listener is
 null, no exception will be thrown and no action
 will be taken.

Parameters:
listener - an IIOWriteProgressListener to be
 deregistered.
See Also:
addIIOWriteProgressListener(javax.imageio.event.IIOWriteProgressListener)


"
ImageWriter,removeIIOWriteWarningListener(IIOWriteWarningListener listener),void,Removes an IIOWriteWarningListener from the list of registered warning listeners.,"

removeIIOWriteWarningListener
public void removeIIOWriteWarningListener(IIOWriteWarningListener listener)
Removes an IIOWriteWarningListener from the list
 of registered warning listeners.  If the listener was not
 previously registered, or if listener is
 null, no exception will be thrown and no action
 will be taken.

Parameters:
listener - an IIOWriteWarningListener to be
 deregistered.
See Also:
addIIOWriteWarningListener(javax.imageio.event.IIOWriteWarningListener)


"
ImageWriter,removeImage(int imageIndex),void,Removes an image from the stream.,"

removeImage
public void removeImage(int imageIndex)
                 throws IOException
Removes an image from the stream.

  If canRemoveImage(imageIndex) returns false,
 an UnsupportedOperationExceptionwill be thrown.

  The removal may or may not cause a reduction in the actual
 file size.

  The default implementation throws an
 IllegalStateException if the output is
 null, and otherwise throws an
 UnsupportedOperationException.

Parameters:
imageIndex - the index of the image to be removed.
Throws:
IllegalStateException - if the output has not
 been set.
UnsupportedOperationException - if
 canRemoveImage(imageIndex) returns false.
IndexOutOfBoundsException - if imageIndex
 is less than 0 or greater than the largest available index.
IOException - if an I/O error occurs during the
 removal.


"
ImageWriter,"replaceImageMetadata(int imageIndex, IIOMetadata imageMetadata)",void,Replaces the image metadata associated with an existing image.,"

replaceImageMetadata
public void replaceImageMetadata(int imageIndex,
                                 IIOMetadata imageMetadata)
                          throws IOException
Replaces the image metadata associated with an existing image.

  If canReplaceImageMetadata(imageIndex) returns
 false, an
 UnsupportedOperationException will be thrown.

  The default implementation throws an
 IllegalStateException if the output is
 null, and otherwise throws an
 UnsupportedOperationException.

Parameters:
imageIndex - the index of the image whose metadata is to
 be replaced.
imageMetadata - an IIOMetadata object
 representing image metadata, or null.
Throws:
IllegalStateException - if the output has not been
 set.
UnsupportedOperationException - if
 canReplaceImageMetadata returns
 false.
IndexOutOfBoundsException - if imageIndex
 is less than 0 or greater than the largest available index.
IOException - if an error occurs during writing.


"
ImageWriter,"replacePixels(Raster raster, ImageWriteParam param)",void,Replaces a portion of an image already present in the output with a portion of the given Raster.,"

replacePixels
public void replacePixels(Raster raster,
                          ImageWriteParam param)
                   throws IOException
Replaces a portion of an image already present in the output
 with a portion of the given Raster.  The image
 data must match, or be convertible to, the image layout of the
 existing image.

  An ImageWriteParam may optionally be supplied
 to control the writing process.  If param is
 null, a default write param will be used.

  The destination region is specified in the
 param argument, and will be clipped to the image
 boundaries and the region supplied to
 prepareReplacePixels.  At least one pixel of the
 source must not be clipped, or an exception is thrown.

  If the supplied ImageWriteParam contains
 optional setting values not supported by this writer (e.g.
 progressive encoding or any format-specific settings), they
 will be ignored.

  This method may only be called after a call to
 prepareReplacePixels, or else an
 IllegalStateException will be thrown.

  The default implementation throws an
 IllegalStateException if the output is
 null, and otherwise throws an
 UnsupportedOperationException.

Parameters:
raster - a Raster containing source
 pixels.
param - an ImageWriteParam, or
 null to use a default
 ImageWriteParam.
Throws:
IllegalStateException - if the output has not
 been set.
UnsupportedOperationException - if
 canReplacePixels(imageIndex) returns
 false.
IllegalStateException - if there is no previous call to
 prepareReplacePixels without a matching call to
 endReplacePixels.
UnsupportedOperationException - if
 canWriteRasters returns false.
IllegalArgumentException - if any of the following are true:
 
 raster is null.
  param is null.
  the intersected region does not contain at least one pixel.
  the layout of raster does not match, or this
 writer cannot convert it to, the existing image layout.
 
IOException - if an I/O error occurs during writing.


"
ImageWriter,"replacePixels(RenderedImage image, ImageWriteParam param)",void,Replaces a portion of an image already present in the output with a portion of the given image.,"

replacePixels
public void replacePixels(RenderedImage image,
                          ImageWriteParam param)
                   throws IOException
Replaces a portion of an image already present in the output
 with a portion of the given image.  The image data must match,
 or be convertible to, the image layout of the existing image.

  The destination region is specified in the
 param argument, and will be clipped to the image
 boundaries and the region supplied to
 prepareReplacePixels.  At least one pixel of the
 source must not be clipped, or an exception is thrown.

  An ImageWriteParam may optionally be supplied
 to control the writing process.  If param is
 null, a default write param will be used.

  If the supplied ImageWriteParam contains
 optional setting values not supported by this writer (e.g.
 progressive encoding or any format-specific settings), they
 will be ignored.

  This method may only be called after a call to
 prepareReplacePixels, or else an
 IllegalStateException will be thrown.

  The default implementation throws an
 IllegalStateException if the output is
 null, and otherwise throws an
 UnsupportedOperationException.

Parameters:
image - a RenderedImage containing source
 pixels.
param - an ImageWriteParam, or
 null to use a default
 ImageWriteParam.
Throws:
IllegalStateException - if the output has not
 been set.
UnsupportedOperationException - if
 canReplacePixels(imageIndex) returns
 false.
IllegalStateException - if there is no previous call to
 prepareReplacePixels without a matching call to
 endReplacePixels.
IllegalArgumentException - if any of the following are true:
 
 image is null.
  param is null.
  the intersected region does not contain at least one pixel.
  the layout of image does not match, or this
 writer cannot convert it to, the existing image layout.
 
IOException - if an I/O error occurs during writing.


"
ImageWriter,replaceStreamMetadata(IIOMetadata streamMetadata),void,Replaces the stream metadata in the output with new information.,"

replaceStreamMetadata
public void replaceStreamMetadata(IIOMetadata streamMetadata)
                           throws IOException
Replaces the stream metadata in the output with new
 information.  If the output is an
 ImageOutputStream, the prior contents of the
 stream are examined and possibly edited to make room for the
 new data.  All of the prior contents of the output must be
 available for reading and writing.

  If canReplaceStreamMetadata returns
 false, an
 UnsupportedOperationException will be thrown.

  The default implementation throws an
 IllegalStateException if the output is
 null, and otherwise throws an
 UnsupportedOperationException.

Parameters:
streamMetadata - an IIOMetadata object representing
 stream metadata, or null to use default values.
Throws:
IllegalStateException - if the output has not
 been set.
UnsupportedOperationException - if the
 canReplaceStreamMetadata returns
 false.  modes do not include
IOException - if an error occurs during writing.


"
ImageWriter,reset(),void,Restores the ImageWriter to its initial state.,"

reset
public void reset()
Restores the ImageWriter to its initial state.

  The default implementation calls
 setOutput(null), setLocale(null),
 removeAllIIOWriteWarningListeners(),
 removeAllIIOWriteProgressListeners(), and
 clearAbortRequest.

"
ImageWriter,setLocale(Locale locale),void,Sets the current Locale of this ImageWriter to the given value.,"

setLocale
public void setLocale(Locale locale)
Sets the current Locale of this
 ImageWriter to the given value.  A value of
 null removes any previous setting, and indicates
 that the writer should localize as it sees fit.

  The default implementation checks locale
 against the values returned by
 getAvailableLocales, and sets the
 locale instance variable if it is found.  If
 locale is null, the instance variable
 is set to null without any checking.

Parameters:
locale - the desired Locale, or
 null.
Throws:
IllegalArgumentException - if locale is
 non-null but is not one of the values returned by
 getAvailableLocales.
See Also:
getLocale()


"
ImageWriter,setOutput(Object output),void,Sets the destination to the given ImageOutputStream or other Object.,"

setOutput
public void setOutput(Object output)
Sets the destination to the given
 ImageOutputStream or other Object.
 The destination is assumed to be ready to accept data, and will
 not be closed at the end of each write. This allows distributed
 imaging applications to transmit a series of images over a
 single network connection.  If output is
 null, any currently set output will be removed.

  If output is an
 ImageOutputStream, calls to the
 write, writeToSequence, and
 prepareWriteEmpty/endWriteEmpty
 methods will preserve the existing contents of the stream.
 Other write methods, such as writeInsert,
 replaceStreamMetadata,
 replaceImageMetadata, replacePixels,
 prepareInsertEmpty/endInsertEmpty,
 and endWriteSequence, require the full contents
 of the stream to be readable and writable, and may alter any
 portion of the stream.

  Use of a general Object other than an
 ImageOutputStream is intended for writers that
 interact directly with an output device or imaging protocol.
 The set of legal classes is advertised by the writer's service
 provider's getOutputTypes method; most writers
 will return a single-element array containing only
 ImageOutputStream.class to indicate that they
 accept only an ImageOutputStream.

  The default implementation sets the output
 instance variable to the value of output after
 checking output against the set of classes
 advertised by the originating provider, if there is one.

Parameters:
output - the ImageOutputStream or other
 Object to use for future writing.
Throws:
IllegalArgumentException - if output is
 not an instance of one of the classes returned by the
 originating service provider's getOutputTypes
 method.
See Also:
getOutput()


"
ImageWriter,write(IIOImage image),void,Appends a complete image stream containing a single image with default metadata and thumbnails to the output.,"

write
public void write(IIOImage image)
           throws IOException
Appends a complete image stream containing a single image with
 default metadata and thumbnails to the output.  This method is
 a shorthand for write(null, image, null).

Parameters:
image - an IIOImage object containing an
 image, thumbnails, and metadata to be written.
Throws:
IllegalStateException - if the output has not
 been set.
IllegalArgumentException - if image is
 null.
UnsupportedOperationException - if image
 contains a Raster and canWriteRasters
 returns false.
IOException - if an error occurs during writing.


"
ImageWriter,"write(IIOMetadata streamMetadata, IIOImage image, ImageWriteParam param)",abstract void,Appends a complete image stream containing a single image and associated stream and image metadata and thumbnails to the output.,"

write
public abstract void write(IIOMetadata streamMetadata,
                           IIOImage image,
                           ImageWriteParam param)
                    throws IOException
Appends a complete image stream containing a single image and
 associated stream and image metadata and thumbnails to the
 output.  Any necessary header information is included.  If the
 output is an ImageOutputStream, its existing
 contents prior to the current seek position are not affected,
 and need not be readable or writable.

  The output must have been set beforehand using the
 setOutput method.

  Stream metadata may optionally be supplied; if it is
 null, default stream metadata will be used.

  If canWriteRasters returns true,
 the IIOImage may contain a Raster
 source.  Otherwise, it must contain a
 RenderedImage source.

  The supplied thumbnails will be resized if needed, and any
 thumbnails in excess of the supported number will be ignored.
 If the format requires additional thumbnails that are not
 provided, the writer should generate them internally.

   An ImageWriteParam may
 optionally be supplied to control the writing process.  If
 param is null, a default write param
 will be used.

  If the supplied ImageWriteParam contains
 optional setting values not supported by this writer (e.g.
 progressive encoding or any format-specific settings), they
 will be ignored.

Parameters:
streamMetadata - an IIOMetadata object representing
 stream metadata, or null to use default values.
image - an IIOImage object containing an
 image, thumbnails, and metadata to be written.
param - an ImageWriteParam, or
 null to use a default
 ImageWriteParam.
Throws:
IllegalStateException - if the output has not
 been set.
UnsupportedOperationException - if image
 contains a Raster and canWriteRasters
 returns false.
IllegalArgumentException - if image is
 null.
IOException - if an error occurs during writing.


"
ImageWriter,write(RenderedImage image),void,Appends a complete image stream consisting of a single image with default metadata and thumbnails to the output.,"

write
public void write(RenderedImage image)
           throws IOException
Appends a complete image stream consisting of a single image
 with default metadata and thumbnails to the output.  This
 method is a shorthand for write(null, new IIOImage(image,
 null, null), null).

Parameters:
image - a RenderedImage to be written.
Throws:
IllegalStateException - if the output has not
 been set.
IllegalArgumentException - if image is
 null.
IOException - if an error occurs during writing.


"
ImageWriter,"writeInsert(int imageIndex, IIOImage image, ImageWriteParam param)",void,Inserts a new image into an existing image stream.,"

writeInsert
public void writeInsert(int imageIndex,
                        IIOImage image,
                        ImageWriteParam param)
                 throws IOException
Inserts a new image into an existing image stream.  Existing
 images with an index greater than imageIndex are
 preserved, and their indices are each increased by 1.  A value
 for imageIndex of -1 may be used to signify an
 index one larger than the previous largest index; that is, it
 will cause the image to be logically appended to the end of the
 sequence.  If the output is an ImageOutputStream,
 the entirety of the stream must be both readable and writeable.

  If canInsertImage(imageIndex) returns
 false, an
 UnsupportedOperationException will be thrown.

  An ImageWriteParam may optionally be supplied
 to control the writing process.  If param is
 null, a default write param will be used.

  If the supplied ImageWriteParam contains
 optional setting values not supported by this writer (e.g.
 progressive encoding or any format-specific settings), they
 will be ignored.

  The default implementation throws an
 IllegalStateException if the output is
 null, and otherwise throws an
 UnsupportedOperationException.

Parameters:
imageIndex - the index at which to write the image.
image - an IIOImage object containing an
 image, thumbnails, and metadata to be written.
param - an ImageWriteParam, or
 null to use a default
 ImageWriteParam.
Throws:
IllegalStateException - if the output has not
 been set.
UnsupportedOperationException - if
 canInsertImage(imageIndex) returns false.
IllegalArgumentException - if image is
 null.
IndexOutOfBoundsException - if imageIndex
 is less than -1 or greater than the largest available index.
UnsupportedOperationException - if image
 contains a Raster and canWriteRasters
 returns false.
IOException - if an error occurs during writing.


"
ImageWriter,"writeToSequence(IIOImage image, ImageWriteParam param)",void,"Appends a single image and possibly associated metadata and thumbnails, to the output.","

writeToSequence
public void writeToSequence(IIOImage image,
                            ImageWriteParam param)
                     throws IOException
Appends a single image and possibly associated metadata and
 thumbnails, to the output.  If the output is an
 ImageOutputStream, the existing contents of the
 output prior to the current seek position may be flushed, and
 need not be readable or writable, unless the plug-in needs to
 be able to patch up the header information when
 endWriteSequence is called (e.g. TIFF).

  If canWriteSequence returns false,
 this method will throw an
 UnsupportedOperationException.

  The output must have been set beforehand using
 the setOutput method.

  prepareWriteSequence must have been called
 beforehand, or an IllegalStateException is thrown.

  If canWriteRasters returns true,
 the IIOImage may contain a Raster
 source.  Otherwise, it must contain a
 RenderedImage source.

  The supplied thumbnails will be resized if needed, and any
 thumbnails in excess of the supported number will be ignored.
 If the format requires additional thumbnails that are not
 provided, the writer will generate them internally.

  An ImageWriteParam may optionally be supplied
 to control the writing process.  If param is
 null, a default write param will be used.

  If the supplied ImageWriteParam contains
 optional setting values not supported by this writer (e.g.
 progressive encoding or any format-specific settings), they
 will be ignored.

  The default implementation throws an
 IllegalStateException if the output is
 null, and otherwise throws an
 UnsupportedOperationException.

Parameters:
image - an IIOImage object containing an
 image, thumbnails, and metadata to be written.
param - an ImageWriteParam, or
 null to use a default
 ImageWriteParam.
Throws:
IllegalStateException - if the output has not
 been set, or prepareWriteSequence has not been called.
UnsupportedOperationException - if
 canWriteSequence returns false.
IllegalArgumentException - if image is
 null.
UnsupportedOperationException - if image
 contains a Raster and canWriteRasters
 returns false.
IOException - if an error occurs during writing.


"
