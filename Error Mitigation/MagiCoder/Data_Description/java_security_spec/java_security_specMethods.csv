ClassName,Method,Return Type,Description,Full Description
DSAGenParameterSpec,getPrimePLength(),int,Returns the desired length of the prime P of the to-be-generated DSA domain parameters in bits.,"

getPrimePLength
public int getPrimePLength()
Returns the desired length of the prime P of the
 to-be-generated DSA domain parameters in bits.

Returns:
the length of the prime P.


"
DSAGenParameterSpec,getSeedLength(),int,Returns the desired length of the domain parameter seed in bits.,"

getSeedLength
public int getSeedLength()
Returns the desired length of the domain parameter seed in bits.

Returns:
the length of the domain parameter seed.


"
DSAGenParameterSpec,getSubprimeQLength(),int,Returns the desired length of the sub-prime Q of the to-be-generated DSA domain parameters in bits.,"

getSubprimeQLength
public int getSubprimeQLength()
Returns the desired length of the sub-prime Q of the
 to-be-generated DSA domain parameters in bits.

Returns:
the length of the sub-prime Q.


"
DSAParameterSpec,getG(),BigInteger,Returns the base g.,"

getG
public BigInteger getG()
Returns the base g.

Specified by:
getG in interface DSAParams
Returns:
the base g.


"
DSAParameterSpec,getP(),BigInteger,Returns the prime p.,"

getP
public BigInteger getP()
Returns the prime p.

Specified by:
getP in interface DSAParams
Returns:
the prime p.


"
DSAParameterSpec,getQ(),BigInteger,Returns the sub-prime q.,"

getQ
public BigInteger getQ()
Returns the sub-prime q.

Specified by:
getQ in interface DSAParams
Returns:
the sub-prime q.


"
DSAPrivateKeySpec,getG(),BigInteger,Returns the base g.,"

getG
public BigInteger getG()
Returns the base g.

Returns:
the base g.


"
DSAPrivateKeySpec,getP(),BigInteger,Returns the prime p.,"

getP
public BigInteger getP()
Returns the prime p.

Returns:
the prime p.


"
DSAPrivateKeySpec,getQ(),BigInteger,Returns the sub-prime q.,"

getQ
public BigInteger getQ()
Returns the sub-prime q.

Returns:
the sub-prime q.


"
DSAPrivateKeySpec,getX(),BigInteger,Returns the private key x.,"

getX
public BigInteger getX()
Returns the private key x.

Returns:
the private key x.


"
DSAPublicKeySpec,getG(),BigInteger,Returns the base g.,"

getG
public BigInteger getG()
Returns the base g.

Returns:
the base g.


"
DSAPublicKeySpec,getP(),BigInteger,Returns the prime p.,"

getP
public BigInteger getP()
Returns the prime p.

Returns:
the prime p.


"
DSAPublicKeySpec,getQ(),BigInteger,Returns the sub-prime q.,"

getQ
public BigInteger getQ()
Returns the sub-prime q.

Returns:
the sub-prime q.


"
DSAPublicKeySpec,getY(),BigInteger,Returns the public key y.,"

getY
public BigInteger getY()
Returns the public key y.

Returns:
the public key y.


"
ECFieldF2m,equals(Object obj),boolean,Compares this finite field for equality with the specified object.,"

equals
public boolean equals(Object obj)
Compares this finite field for equality with the
 specified object.

Overrides:
equals in class Object
Parameters:
obj - the object to be compared.
Returns:
true if obj is an instance
 of ECFieldF2m and both m and the reduction
 polynomial match, false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
ECFieldF2m,getFieldSize(),int,Returns the field size in bits which is m for this characteristic 2 finite field.,"

getFieldSize
public int getFieldSize()
Returns the field size in bits which is m
 for this characteristic 2 finite field.

Specified by:
getFieldSize in interface ECField
Returns:
the field size in bits.


"
ECFieldF2m,getM(),int,Returns the value m of this characteristic 2 finite field.,"

getM
public int getM()
Returns the value m of this characteristic
 2 finite field.

Returns:
m with 2^m being the
 number of elements.


"
ECFieldF2m,getMidTermsOfReductionPolynomial(),int[],Returns an integer array which contains the order of the middle term(s) of the reduction polynomial for polynomial basis or null for normal basis.,"

getMidTermsOfReductionPolynomial
public int[] getMidTermsOfReductionPolynomial()
Returns an integer array which contains the order of the
 middle term(s) of the reduction polynomial for polynomial
 basis or null for normal basis.

Returns:
an integer array which contains the order of the
 middle term(s) of the reduction polynomial for polynomial
 basis or null for normal basis. A new array is returned
 each time this method is called.


"
ECFieldF2m,getReductionPolynomial(),BigInteger,Returns a BigInteger whose i-th bit corresponds to the i-th coefficient of the reduction polynomial for polynomial basis or null for normal basis.,"

getReductionPolynomial
public BigInteger getReductionPolynomial()
Returns a BigInteger whose i-th bit corresponds to the
 i-th coefficient of the reduction polynomial for polynomial
 basis or null for normal basis.

Returns:
a BigInteger whose i-th bit corresponds to the
 i-th coefficient of the reduction polynomial for polynomial
 basis or null for normal basis.


"
ECFieldF2m,hashCode(),int,Returns a hash code value for this characteristic 2 finite field.,"

hashCode
public int hashCode()
Returns a hash code value for this characteristic 2
 finite field.

Overrides:
hashCode in class Object
Returns:
a hash code value.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
ECFieldFp,equals(Object obj),boolean,Compares this prime finite field for equality with the specified object.,"

equals
public boolean equals(Object obj)
Compares this prime finite field for equality with the
 specified object.

Overrides:
equals in class Object
Parameters:
obj - the object to be compared.
Returns:
true if obj is an instance
 of ECFieldFp and the prime value match, false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
ECFieldFp,getFieldSize(),int,Returns the field size in bits which is size of prime p for this prime finite field.,"

getFieldSize
public int getFieldSize()
Returns the field size in bits which is size of prime p
 for this prime finite field.

Specified by:
getFieldSize in interface ECField
Returns:
the field size in bits.


"
ECFieldFp,getP(),BigInteger,Returns the prime p of this prime finite field.,"

getP
public BigInteger getP()
Returns the prime p of this prime finite field.

Returns:
the prime.


"
ECFieldFp,hashCode(),int,Returns a hash code value for this prime finite field.,"

hashCode
public int hashCode()
Returns a hash code value for this prime finite field.

Overrides:
hashCode in class Object
Returns:
a hash code value.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
ECGenParameterSpec,getName(),String,Returns the standard or predefined name of the to-be-generated EC domain parameters.,"

getName
public String getName()
Returns the standard or predefined name of the
 to-be-generated EC domain parameters.

Returns:
the standard or predefined name.


"
ECParameterSpec,getCofactor(),int,Returns the cofactor.,"

getCofactor
public int getCofactor()
Returns the cofactor.

Returns:
the cofactor.


"
ECParameterSpec,getCurve(),EllipticCurve,Returns the elliptic curve that this parameter defines.,"

getCurve
public EllipticCurve getCurve()
Returns the elliptic curve that this parameter defines.

Returns:
the elliptic curve that this parameter defines.


"
ECParameterSpec,getGenerator(),ECPoint,Returns the generator which is also known as the base point.,"

getGenerator
public ECPoint getGenerator()
Returns the generator which is also known as the base point.

Returns:
the generator which is also known as the base point.


"
ECParameterSpec,getOrder(),BigInteger,Returns the order of the generator.,"

getOrder
public BigInteger getOrder()
Returns the order of the generator.

Returns:
the order of the generator.


"
ECPoint,equals(Object obj),boolean,Compares this elliptic curve point for equality with the specified object.,"

equals
public boolean equals(Object obj)
Compares this elliptic curve point for equality with
 the specified object.

Overrides:
equals in class Object
Parameters:
obj - the object to be compared.
Returns:
true if obj is an instance of
 ECPoint and the affine coordinates match, false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
ECPoint,getAffineX(),BigInteger,Returns the affine x-coordinate x.,"

getAffineX
public BigInteger getAffineX()
Returns the affine x-coordinate x.
 Note: POINT_INFINITY has a null affine x-coordinate.

Returns:
the affine x-coordinate.


"
ECPoint,getAffineY(),BigInteger,Returns the affine y-coordinate y.,"

getAffineY
public BigInteger getAffineY()
Returns the affine y-coordinate y.
 Note: POINT_INFINITY has a null affine y-coordinate.

Returns:
the affine y-coordinate.


"
ECPoint,hashCode(),int,Returns a hash code value for this elliptic curve point.,"

hashCode
public int hashCode()
Returns a hash code value for this elliptic curve point.

Overrides:
hashCode in class Object
Returns:
a hash code value.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
ECPrivateKeySpec,getParams(),ECParameterSpec,Returns the associated elliptic curve domain parameters.,"

getParams
public ECParameterSpec getParams()
Returns the associated elliptic curve domain
 parameters.

Returns:
the EC domain parameters.


"
ECPrivateKeySpec,getS(),BigInteger,Returns the private value S.,"

getS
public BigInteger getS()
Returns the private value S.

Returns:
the private value S.


"
ECPublicKeySpec,getParams(),ECParameterSpec,Returns the associated elliptic curve domain parameters.,"

getParams
public ECParameterSpec getParams()
Returns the associated elliptic curve domain
 parameters.

Returns:
the EC domain parameters.


"
ECPublicKeySpec,getW(),ECPoint,Returns the public point W.,"

getW
public ECPoint getW()
Returns the public point W.

Returns:
the public point W.


"
EllipticCurve,equals(Object obj),boolean,Compares this elliptic curve for equality with the specified object.,"

equals
public boolean equals(Object obj)
Compares this elliptic curve for equality with the
 specified object.

Overrides:
equals in class Object
Parameters:
obj - the object to be compared.
Returns:
true if obj is an instance of
 EllipticCurve and the field, A, and B match, false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
EllipticCurve,getA(),BigInteger,Returns the first coefficient a of the elliptic curve.,"

getA
public BigInteger getA()
Returns the first coefficient a of the
 elliptic curve.

Returns:
the first coefficient a.


"
EllipticCurve,getB(),BigInteger,Returns the second coefficient b of the elliptic curve.,"

getB
public BigInteger getB()
Returns the second coefficient b of the
 elliptic curve.

Returns:
the second coefficient b.


"
EllipticCurve,getField(),ECField,Returns the finite field field that this elliptic curve is over.,"

getField
public ECField getField()
Returns the finite field field that this
 elliptic curve is over.

Returns:
the field field that this curve
 is over.


"
EllipticCurve,getSeed(),byte[],Returns the seeding bytes seed used during curve generation.,"

getSeed
public byte[] getSeed()
Returns the seeding bytes seed used
 during curve generation. May be null if not specified.

Returns:
the seeding bytes seed. A new
 array is returned each time this method is called.


"
EllipticCurve,hashCode(),int,Returns a hash code value for this elliptic curve.,"

hashCode
public int hashCode()
Returns a hash code value for this elliptic curve.

Overrides:
hashCode in class Object
Returns:
a hash code value computed from the hash codes of the field, A,
 and B, as follows:
 
     (field.hashCode() << 6) + (a.hashCode() << 4) + (b.hashCode() << 2)
 
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
EncodedKeySpec,getEncoded(),byte[],Returns the encoded key.,"

getEncoded
public byte[] getEncoded()
Returns the encoded key.

Returns:
the encoded key. Returns a new array each time
 this method is called.


"
EncodedKeySpec,getFormat(),abstract String,Returns the name of the encoding format associated with this key specification.,"

getFormat
public abstract String getFormat()
Returns the name of the encoding format associated with this
 key specification.

 If the opaque representation of a key
 (see Key) can be transformed
 (see KeyFactory)
 into this key specification (or a subclass of it),
 getFormat called
 on the opaque key returns the same value as the
 getFormat method
 of this key specification.

Returns:
a string representation of the encoding format.


"
MGF1ParameterSpec,getDigestAlgorithm(),String,Returns the algorithm name of the message digest used by the mask generation function.,"

getDigestAlgorithm
public String getDigestAlgorithm()
Returns the algorithm name of the message digest used by the mask
 generation function.

Returns:
the algorithm name of the message digest.


"
PKCS8EncodedKeySpec,getEncoded(),byte[],"Returns the key bytes, encoded according to the PKCS #8 standard.","

getEncoded
public byte[] getEncoded()
Returns the key bytes, encoded according to the PKCS #8 standard.

Overrides:
getEncoded in class EncodedKeySpec
Returns:
the PKCS #8 encoding of the key. Returns a new array
 each time this method is called.


"
PKCS8EncodedKeySpec,getFormat(),String,Returns the name of the encoding format associated with this key specification.,"

getFormat
public final String getFormat()
Returns the name of the encoding format associated with this
 key specification.

Specified by:
getFormat in class EncodedKeySpec
Returns:
the string ""PKCS#8"".


"
PSSParameterSpec,getDigestAlgorithm(),String,Returns the message digest algorithm name.,"

getDigestAlgorithm
public String getDigestAlgorithm()
Returns the message digest algorithm name.

Returns:
the message digest algorithm name
Since:
1.5


"
PSSParameterSpec,getMGFAlgorithm(),String,Returns the mask generation function algorithm name.,"

getMGFAlgorithm
public String getMGFAlgorithm()
Returns the mask generation function algorithm name.

Returns:
the mask generation function algorithm name
Since:
1.5


"
PSSParameterSpec,getMGFParameters(),AlgorithmParameterSpec,Returns the parameters for the mask generation function.,"

getMGFParameters
public AlgorithmParameterSpec getMGFParameters()
Returns the parameters for the mask generation function.

Returns:
the parameters for the mask generation function
Since:
1.5


"
PSSParameterSpec,getSaltLength(),int,Returns the salt length in bytes.,"

getSaltLength
public int getSaltLength()
Returns the salt length in bytes.

Returns:
the salt length


"
PSSParameterSpec,getTrailerField(),int,Returns the value for the trailer field.,"

getTrailerField
public int getTrailerField()
Returns the value for the trailer field.

Returns:
the value for the trailer field
Since:
1.5


"
PSSParameterSpec,toString(),String,Returns a string representation of the object.,"

toString
public String toString()
Description copied from class: Object
Returns a string representation of the object. In general, the
 toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method.
 
 The toString method for class Object
 returns a string consisting of the name of the class of which the
 object is an instance, the at-sign character `@', and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words, this method returns a string equal to the
 value of:
 

 getClass().getName() + '@' + Integer.toHexString(hashCode())
 

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
RSAKeyGenParameterSpec,getKeyParams(),AlgorithmParameterSpec,Returns the parameters to be associated with key.,"

getKeyParams
public AlgorithmParameterSpec getKeyParams()
Returns the parameters to be associated with key.

API Note:
This method is defined in Java SE 8 Maintenance Release 3.
Returns:
the associated parameters, may be null if
         not present
Since:
8


"
RSAKeyGenParameterSpec,getKeysize(),int,Returns the keysize.,"

getKeysize
public int getKeysize()
Returns the keysize.

Returns:
the keysize.


"
RSAKeyGenParameterSpec,getPublicExponent(),BigInteger,Returns the public-exponent value.,"

getPublicExponent
public BigInteger getPublicExponent()
Returns the public-exponent value.

Returns:
the public-exponent value.


"
RSAMultiPrimePrivateCrtKeySpec,getCrtCoefficient(),BigInteger,Returns the crtCoefficient.,"

getCrtCoefficient
public BigInteger getCrtCoefficient()
Returns the crtCoefficient.

Returns:
the crtCoefficient.


"
RSAMultiPrimePrivateCrtKeySpec,getOtherPrimeInfo(),RSAOtherPrimeInfo[],Returns a copy of the otherPrimeInfo or null if there are only two prime factors (p and q).,"

getOtherPrimeInfo
public RSAOtherPrimeInfo[] getOtherPrimeInfo()
Returns a copy of the otherPrimeInfo or null if there are
 only two prime factors (p and q).

Returns:
the otherPrimeInfo. Returns a new array each time this method
         is called.


"
RSAMultiPrimePrivateCrtKeySpec,getPrimeExponentP(),BigInteger,Returns the primeExponentP.,"

getPrimeExponentP
public BigInteger getPrimeExponentP()
Returns the primeExponentP.

Returns:
the primeExponentP.


"
RSAMultiPrimePrivateCrtKeySpec,getPrimeExponentQ(),BigInteger,Returns the primeExponentQ.,"

getPrimeExponentQ
public BigInteger getPrimeExponentQ()
Returns the primeExponentQ.

Returns:
the primeExponentQ.


"
RSAMultiPrimePrivateCrtKeySpec,getPrimeP(),BigInteger,Returns the primeP.,"

getPrimeP
public BigInteger getPrimeP()
Returns the primeP.

Returns:
the primeP.


"
RSAMultiPrimePrivateCrtKeySpec,getPrimeQ(),BigInteger,Returns the primeQ.,"

getPrimeQ
public BigInteger getPrimeQ()
Returns the primeQ.

Returns:
the primeQ.


"
RSAMultiPrimePrivateCrtKeySpec,getPublicExponent(),BigInteger,Returns the public exponent.,"

getPublicExponent
public BigInteger getPublicExponent()
Returns the public exponent.

Returns:
the public exponent.


"
RSAOtherPrimeInfo,getCrtCoefficient(),BigInteger,Returns the prime's crtCoefficient.,"

getCrtCoefficient
public final BigInteger getCrtCoefficient()
Returns the prime's crtCoefficient.

Returns:
the crtCoefficient.


"
RSAOtherPrimeInfo,getExponent(),BigInteger,Returns the prime's exponent.,"

getExponent
public final BigInteger getExponent()
Returns the prime's exponent.

Returns:
the primeExponent.


"
RSAOtherPrimeInfo,getPrime(),BigInteger,Returns the prime.,"

getPrime
public final BigInteger getPrime()
Returns the prime.

Returns:
the prime.


"
RSAPrivateCrtKeySpec,getCrtCoefficient(),BigInteger,Returns the crtCoefficient.,"

getCrtCoefficient
public BigInteger getCrtCoefficient()
Returns the crtCoefficient.

Returns:
the crtCoefficient


"
RSAPrivateCrtKeySpec,getPrimeExponentP(),BigInteger,Returns the primeExponentP.,"

getPrimeExponentP
public BigInteger getPrimeExponentP()
Returns the primeExponentP.

Returns:
the primeExponentP


"
RSAPrivateCrtKeySpec,getPrimeExponentQ(),BigInteger,Returns the primeExponentQ.,"

getPrimeExponentQ
public BigInteger getPrimeExponentQ()
Returns the primeExponentQ.

Returns:
the primeExponentQ


"
RSAPrivateCrtKeySpec,getPrimeP(),BigInteger,Returns the primeP.,"

getPrimeP
public BigInteger getPrimeP()
Returns the primeP.

Returns:
the primeP


"
RSAPrivateCrtKeySpec,getPrimeQ(),BigInteger,Returns the primeQ.,"

getPrimeQ
public BigInteger getPrimeQ()
Returns the primeQ.

Returns:
the primeQ


"
RSAPrivateCrtKeySpec,getPublicExponent(),BigInteger,Returns the public exponent.,"

getPublicExponent
public BigInteger getPublicExponent()
Returns the public exponent.

Returns:
the public exponent


"
RSAPrivateKeySpec,getModulus(),BigInteger,Returns the modulus.,"

getModulus
public BigInteger getModulus()
Returns the modulus.

Returns:
the modulus


"
RSAPrivateKeySpec,getParams(),AlgorithmParameterSpec,"Returns the parameters associated with this key, may be null if not present.","

getParams
public AlgorithmParameterSpec getParams()
Returns the parameters associated with this key, may be null if not
 present.

API Note:
This method is defined in Java SE 8 Maintenance Release 3.
Returns:
the parameters associated with this key
Since:
8


"
RSAPrivateKeySpec,getPrivateExponent(),BigInteger,Returns the private exponent.,"

getPrivateExponent
public BigInteger getPrivateExponent()
Returns the private exponent.

Returns:
the private exponent


"
RSAPublicKeySpec,getModulus(),BigInteger,Returns the modulus.,"

getModulus
public BigInteger getModulus()
Returns the modulus.

Returns:
the modulus


"
RSAPublicKeySpec,getParams(),AlgorithmParameterSpec,"Returns the parameters associated with this key, may be null if not present.","

getParams
public AlgorithmParameterSpec getParams()
Returns the parameters associated with this key, may be null if not
 present.

API Note:
This method is defined in Java SE 8 Maintenance Release 3.
Returns:
the parameters associated with this key
Since:
8


"
RSAPublicKeySpec,getPublicExponent(),BigInteger,Returns the public exponent.,"

getPublicExponent
public BigInteger getPublicExponent()
Returns the public exponent.

Returns:
the public exponent


"
X509EncodedKeySpec,getEncoded(),byte[],"Returns the key bytes, encoded according to the X.509 standard.","

getEncoded
public byte[] getEncoded()
Returns the key bytes, encoded according to the X.509 standard.

Overrides:
getEncoded in class EncodedKeySpec
Returns:
the X.509 encoding of the key. Returns a new array
 each time this method is called.


"
X509EncodedKeySpec,getFormat(),String,Returns the name of the encoding format associated with this key specification.,"

getFormat
public final String getFormat()
Returns the name of the encoding format associated with this
 key specification.

Specified by:
getFormat in class EncodedKeySpec
Returns:
the string ""X.509"".


"
