Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,IIORegistry,1,boolean add(E e),False,,NULL
0,IIORegistry,2,boolean addAll(Collection<? extends E> c),False,,NULL
0,IIORegistry,3,void clear(),False,,NULL
0,IIORegistry,4,boolean contains(Object o),False,,NULL
0,IIORegistry,5,boolean containsAll(Collection<?> c),False,,NULL
0,IIORegistry,6,E get(int index),False,,NULL
0,IIORegistry,7,int indexOf(Object o),False,,NULL
0,IIORegistry,8,boolean isEmpty(),False,,NULL
0,IIORegistry,9,Iterator<E> iterator(),False,,NULL
0,IIORegistry,10,E remove(int index),False,,NULL
0,IIORegistry,11,boolean remove(Object o),False,,NULL
0,IIORegistry,12,boolean removeAll(Collection<?> c),False,,NULL
0,IIORegistry,13,int size(),False,,NULL
0,IIORegistry,14,Object[] toArray(),False,,NULL
0,IIORegistry,15,<T> T[] toArray(T[] a),False,,NULL
0,IIORegistry,16,"boolean addAll(int index, Collection<? extends E> c)",False,,NULL
0,IIORegistry,17,boolean containsAll(Collection<?> c),False,,NULL
0,IIORegistry,18,boolean removeAll(Collection<?> c),False,,NULL
0,IIORegistry,19,boolean retainAll(Collection<?> c),False,,NULL
0,IIORegistry,20,ListIterator<E> listIterator(int index),False,,NULL
1,IIOServiceProvider,1,boolean add(E e),False,,NULL
1,IIOServiceProvider,2,void clear(),False,,NULL
1,IIOServiceProvider,3,boolean contains(Object o),False,,NULL
1,IIOServiceProvider,4,boolean isEmpty(),False,,NULL
1,IIOServiceProvider,5,int size(),False,,NULL
2,ImageInputStreamSpi,1,ImageInputStreamSpi(),False,,NULL
2,ImageInputStreamSpi,2,String getDescription(),False,,NULL
2,ImageInputStreamSpi,3,boolean canUseCacheFile(),True,Returns true if the ImageInputStream implementation associated with this service provider can optionally make use of a cache file for improved performance and/or memory footrprint.,"

canUseCacheFile
public boolean canUseCacheFile()
Returns true if the ImageInputStream
 implementation associated with this service provider can
 optionally make use of a cache file for improved performance
 and/or memory footrprint.  If false, the value of
 the useCache argument to
 createInputStreamInstance will be ignored.

  The default implementation returns false.

Returns:
true if a cache file can be used by the
 input streams created by this service provider.


"
2,ImageInputStreamSpi,4,"ImageInputStream createInputStreamInstance(Object input, boolean useCache, File cacheDirectory)",True,Returns an instance of the ImageInputStream implementation associated with this service provider.,"

createInputStreamInstance
public abstract ImageInputStream createInputStreamInstance(Object input,
                                                           boolean useCache,
                                                           File cacheDir)
                                                    throws IOException
Returns an instance of the ImageInputStream
 implementation associated with this service provider.  If the
 use of a cache file is optional, the useCache
 parameter will be consulted.  Where a cache is required, or
 not applicable, the value of useCache will be ignored.

Parameters:
input - an object of the class type returned by
 getInputClass.
useCache - a boolean indicating whether a
 cache file should be used, in cases where it is optional.
cacheDir - a File indicating where the
 cache file should be created, or null to use the
 system directory.
Returns:
an ImageInputStream instance.
Throws:
IllegalArgumentException - if input is
 not an instance of the correct class or is null.
IllegalArgumentException - if a cache file is needed
 but cacheDir is non-null and is not a
 directory.
IOException - if a cache file is needed but cannot be
 created.
See Also:
getInputClass(), 
canUseCacheFile(), 
needsCacheFile()


"
2,ImageInputStreamSpi,5,String getSpiVersion(),False,,NULL
3,ImageOutputStreamSpi,1,ImageOutputStream createOutputStreamInstance(),False,,NULL
3,ImageOutputStreamSpi,2,String getDescription(Locale locale),False,,NULL
3,ImageOutputStreamSpi,3,String getVendorName(),False,,NULL
3,ImageOutputStreamSpi,4,String getVersion(),False,,NULL
3,ImageOutputStreamSpi,5,boolean canUseCacheFile(),True,Returns true if the ImageOutputStream implementation associated with this service provider can optionally make use of a cache File for improved performance and/or memory footrprint.,"

canUseCacheFile
public boolean canUseCacheFile()
Returns true if the ImageOutputStream
 implementation associated with this service provider can
 optionally make use of a cache File for improved
 performance and/or memory footrprint.  If false,
 the value of the cacheFile argument to
 createOutputStreamInstance will be ignored.

  The default implementation returns false.

Returns:
true if a cache file can be used by the
 output streams created by this service provider.


"
4,ImageReaderSpi,1,boolean canDecodeInput(RenderedImage im),False,,NULL
4,ImageReaderSpi,2,Iterator<ImageReader> getServiceProviders(Class<?> filter),False,,NULL
4,ImageReaderSpi,3,"Iterator<ImageReader> getServiceProviders(Class<?> filter, Class<?> hint)",False,,NULL
4,ImageReaderSpi,4,"Iterator<ImageReader> getServiceProviders(Class<?> filter, Class<?> hint, Class<?> readerClass)",False,,NULL
4,ImageReaderSpi,5,"Iterator<ImageReader> getServiceProviders(Class<?> filter, Class<?> hint, Class<?> readerClass, Class<?> streamClass)",False,,NULL
5,ImageReaderWriterSpi,1,boolean canDecodeInput(Object source),False,,NULL
5,ImageReaderWriterSpi,2,String getDescription(Locale locale),False,,NULL
5,ImageReaderWriterSpi,3,String getFormatName(),False,,NULL
5,ImageReaderWriterSpi,4,String getMIMEType(),False,,NULL
5,ImageReaderWriterSpi,5,String getVersion(),False,,NULL
6,ImageTranscoderSpi,1,ImageTranscoder createTranscoderInstance(),True,Returns an instance of the ImageTranscoder implementation associated with this service provider.,"

createTranscoderInstance
public abstract ImageTranscoder createTranscoderInstance()
Returns an instance of the ImageTranscoder
 implementation associated with this service provider.

Returns:
an ImageTranscoder instance.


"
6,ImageTranscoderSpi,2,String getDescription(Locale locale),False,,NULL
6,ImageTranscoderSpi,3,String getVendorName(),False,,NULL
6,ImageTranscoderSpi,4,String getVersion(),False,,NULL
6,ImageTranscoderSpi,5,boolean canTranscodeInput(ImageTypeSpecifier input),False,,NULL
7,ImageWriterSpi,1,boolean canUseCacheFile(),False,,NULL
7,ImageWriterSpi,2,String getDescription(Locale locale),False,,NULL
7,ImageWriterSpi,3,String getExtension(),False,,NULL
7,ImageWriterSpi,4,ImageWriter createWriterInstance(Object output),True,Returns an instance of the ImageWriter implementation associated with this service provider.,"

createWriterInstance
public abstract ImageWriter createWriterInstance(Object extension)
                                          throws IOException
Returns an instance of the ImageWriter
 implementation associated with this service provider.
 The returned object will initially be in an initial state
 as if its reset method had been called.

  An Object may be supplied to the plug-in at
 construction time.  The nature of the object is entirely
 plug-in specific.

  Typically, a plug-in will implement this method using code
 such as return new MyImageWriter(this).

Parameters:
extension - a plug-in specific extension object, which may
 be null.
Returns:
an ImageWriter instance.
Throws:
IOException - if the attempt to instantiate
 the writer fails.
IllegalArgumentException - if the
 ImageWriter's constructor throws an
 IllegalArgumentException to indicate that the
 extension object is unsuitable.


"
7,ImageWriterSpi,5,boolean isOutputTypeSupported(RenderedImage im),False,,NULL
8,ServiceRegistry,1,boolean add(E e),False,,NULL
8,ServiceRegistry,2,boolean addAll(Collection<? extends E> c),False,,NULL
8,ServiceRegistry,3,void clear(),False,,NULL
8,ServiceRegistry,4,boolean contains(Object o),True,Returns true if provider is currently registered.,"

contains
public boolean contains(Object provider)
Returns true if provider is currently
 registered.

Parameters:
provider - the service provider object to be queried.
Returns:
true if the given provider has been
 registered.
Throws:
IllegalArgumentException - if provider is
 null.


"
8,ServiceRegistry,5,boolean containsAll(Collection<?> c),False,,NULL
8,ServiceRegistry,6,E get(int index),False,,NULL
8,ServiceRegistry,7,int indexOf(Object o),False,,NULL
8,ServiceRegistry,8,boolean isEmpty(),False,,NULL
8,ServiceRegistry,9,Iterator<E> iterator(),False,,NULL
8,ServiceRegistry,10,E remove(int index),False,,NULL
8,ServiceRegistry,11,boolean remove(Object o),False,,NULL
8,ServiceRegistry,12,boolean removeAll(Collection<?> c),False,,NULL
8,ServiceRegistry,13,int size(),False,,NULL
8,ServiceRegistry,14,Object[] toArray(),False,,NULL
8,ServiceRegistry,15,<T> T[] toArray(T[] a),False,,NULL
8,ServiceRegistry,16,ListIterator<E> listIterator(),False,,NULL
8,ServiceRegistry,17,ListIterator<E> listIterator(int index),False,,NULL
8,ServiceRegistry,18,boolean retainAll(Collection<?> c),False,,NULL
8,ServiceRegistry,19,"E set(int index, E element)",False,,NULL
8,ServiceRegistry,20,"List<E> subList(int fromIndex, int toIndex)",False,,NULL
