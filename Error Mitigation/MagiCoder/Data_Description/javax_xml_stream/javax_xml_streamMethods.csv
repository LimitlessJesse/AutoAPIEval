ClassName,Method,Return Type,Description,Full Description
XMLEventFactory,"createAttribute(QName name, String value)",abstract Attribute,Create a new Attribute,"

createAttribute
public abstract Attribute createAttribute(QName name,
                                          String value)
Create a new Attribute

Parameters:
name - the qualified name of the attribute, may not be null
value - the attribute value to set, may not be null
Returns:
the Attribute with specified values


"
XMLEventFactory,"createAttribute(String localName, String value)",abstract Attribute,Create a new Attribute,"

createAttribute
public abstract Attribute createAttribute(String localName,
                                          String value)
Create a new Attribute

Parameters:
localName - the local name of the XML name of the attribute, localName cannot be null
value - the attribute value to set, may not be null
Returns:
the Attribute with specified values


"
XMLEventFactory,"createAttribute(String prefix, String namespaceURI, String localName, String value)",abstract Attribute,Create a new Attribute,"

createAttribute
public abstract Attribute createAttribute(String prefix,
                                          String namespaceURI,
                                          String localName,
                                          String value)
Create a new Attribute

Parameters:
prefix - the prefix of this attribute, may not be null
namespaceURI - the attribute value is set to this value, may not be null
localName - the local name of the XML name of the attribute, localName cannot be null
value - the attribute value to set, may not be null
Returns:
the Attribute with specified values


"
XMLEventFactory,createCData(String content),abstract Characters,Create a Characters event with the CData flag set to true,"

createCData
public abstract Characters createCData(String content)
Create a Characters event with the CData flag set to true

Parameters:
content - the string to create
Returns:
a Characters event


"
XMLEventFactory,createCharacters(String content),abstract Characters,"Create a Characters event, this method does not check if the content is all whitespace.","

createCharacters
public abstract Characters createCharacters(String content)
Create a Characters event, this method does not check if the content
 is all whitespace.  To create a space event use #createSpace(String)

Parameters:
content - the string to create
Returns:
a Characters event


"
XMLEventFactory,createComment(String text),abstract Comment,Create a comment,"

createComment
public abstract Comment createComment(String text)
Create a comment

Parameters:
text - The text of the comment
 a Comment event


"
XMLEventFactory,createDTD(String dtd),abstract DTD,Create a document type definition event This string contains the entire document type declaration that matches the doctypedecl in the XML 1.0 specification,"

createDTD
public abstract DTD createDTD(String dtd)
Create a document type definition event
 This string contains the entire document type declaration that matches
 the doctypedecl in the XML 1.0 specification

Parameters:
dtd - the text of the document type definition
Returns:
a DTD event


"
XMLEventFactory,createEndDocument(),abstract EndDocument,Creates a new instance of an EndDocument event,"

createEndDocument
public abstract EndDocument createEndDocument()
Creates a new instance of an EndDocument event

Returns:
an EndDocument event


"
XMLEventFactory,"createEndElement(QName name, Iterator namespaces)",abstract EndElement,Create a new EndElement,"

createEndElement
public abstract EndElement createEndElement(QName name,
                                            Iterator namespaces)
Create a new EndElement

Parameters:
name - the qualified name of the EndElement
namespaces - an optional unordered set of objects that
 implement Namespace that have gone out of scope, may be null
Returns:
an instance of the requested EndElement


"
XMLEventFactory,"createEndElement(String prefix, String namespaceUri, String localName)",abstract EndElement,Create a new EndElement,"

createEndElement
public abstract EndElement createEndElement(String prefix,
                                            String namespaceUri,
                                            String localName)
Create a new EndElement

Parameters:
namespaceUri - the uri of the QName of the new StartElement
localName - the local name of the QName of the new StartElement
prefix - the prefix of the QName of the new StartElement
Returns:
an instance of the requested EndElement


"
XMLEventFactory,"createEndElement(String prefix, String namespaceUri, String localName, Iterator namespaces)",abstract EndElement,Create a new EndElement,"

createEndElement
public abstract EndElement createEndElement(String prefix,
                                            String namespaceUri,
                                            String localName,
                                            Iterator namespaces)
Create a new EndElement

Parameters:
namespaceUri - the uri of the QName of the new StartElement
localName - the local name of the QName of the new StartElement
prefix - the prefix of the QName of the new StartElement
namespaces - an unordered set of objects that implement
 Namespace that have gone out of scope, may be null
Returns:
an instance of the requested EndElement


"
XMLEventFactory,"createEntityReference(String name, EntityDeclaration declaration)",abstract EntityReference,Creates a new instance of a EntityReference event,"

createEntityReference
public abstract EntityReference createEntityReference(String name,
                                                      EntityDeclaration declaration)
Creates a new instance of a EntityReference event

Parameters:
name - The name of the reference
declaration - the declaration for the event
Returns:
an EntityReference event


"
XMLEventFactory,createIgnorableSpace(String content),abstract Characters,Create an ignorable space,"

createIgnorableSpace
public abstract Characters createIgnorableSpace(String content)
Create an ignorable space

Parameters:
content - the space to create
Returns:
a Characters event


"
XMLEventFactory,createNamespace(String namespaceURI),abstract Namespace,Create a new default Namespace,"

createNamespace
public abstract Namespace createNamespace(String namespaceURI)
Create a new default Namespace

Parameters:
namespaceURI - the default namespace uri
Returns:
the Namespace with the specified value


"
XMLEventFactory,"createNamespace(String prefix, String namespaceUri)",abstract Namespace,Create a new Namespace,"

createNamespace
public abstract Namespace createNamespace(String prefix,
                                          String namespaceUri)
Create a new Namespace

Parameters:
prefix - the prefix of this namespace, may not be null
namespaceUri - the attribute value is set to this value, may not be null
Returns:
the Namespace with the specified values


"
XMLEventFactory,"createProcessingInstruction(String target, String data)",abstract ProcessingInstruction,Create a processing instruction,"

createProcessingInstruction
public abstract ProcessingInstruction createProcessingInstruction(String target,
                                                                  String data)
Create a processing instruction

Parameters:
target - The target of the processing instruction
data - The text of the processing instruction
Returns:
a ProcessingInstruction event


"
XMLEventFactory,createSpace(String content),abstract Characters,Create a Characters event with the isSpace flag set to true,"

createSpace
public abstract Characters createSpace(String content)
Create a Characters event with the isSpace flag set to true

Parameters:
content - the content of the space to create
Returns:
a Characters event


"
XMLEventFactory,createStartDocument(),abstract StartDocument,Creates a new instance of a StartDocument event,"

createStartDocument
public abstract StartDocument createStartDocument()
Creates a new instance of a StartDocument event

Returns:
a StartDocument event


"
XMLEventFactory,createStartDocument(String encoding),abstract StartDocument,Creates a new instance of a StartDocument event,"

createStartDocument
public abstract StartDocument createStartDocument(String encoding)
Creates a new instance of a StartDocument event

Parameters:
encoding - the encoding style
Returns:
a StartDocument event


"
XMLEventFactory,"createStartDocument(String encoding, String version)",abstract StartDocument,Creates a new instance of a StartDocument event,"

createStartDocument
public abstract StartDocument createStartDocument(String encoding,
                                                  String version)
Creates a new instance of a StartDocument event

Parameters:
encoding - the encoding style
version - the XML version
Returns:
a StartDocument event


"
XMLEventFactory,"createStartDocument(String encoding, String version, boolean standalone)",abstract StartDocument,Creates a new instance of a StartDocument event,"

createStartDocument
public abstract StartDocument createStartDocument(String encoding,
                                                  String version,
                                                  boolean standalone)
Creates a new instance of a StartDocument event

Parameters:
encoding - the encoding style
version - the XML version
standalone - the status of standalone may be set to ""true"" or ""false""
Returns:
a StartDocument event


"
XMLEventFactory,"createStartElement(QName name, Iterator attributes, Iterator namespaces)",abstract StartElement,Create a new StartElement.,"

createStartElement
public abstract StartElement createStartElement(QName name,
                                                Iterator attributes,
                                                Iterator namespaces)
Create a new StartElement.  Namespaces can be added to this StartElement
 by passing in an Iterator that walks over a set of Namespace interfaces.
 Attributes can be added to this StartElement by passing an iterator
 that walks over a set of Attribute interfaces.

Parameters:
name - the qualified name of the attribute, may not be null
attributes - an optional unordered set of objects that
 implement Attribute to add to the new StartElement, may be null
namespaces - an optional unordered set of objects that
 implement Namespace to add to the new StartElement, may be null
Returns:
an instance of the requested StartElement


"
XMLEventFactory,"createStartElement(String prefix, String namespaceUri, String localName)",abstract StartElement,Create a new StartElement.,"

createStartElement
public abstract StartElement createStartElement(String prefix,
                                                String namespaceUri,
                                                String localName)
Create a new StartElement.  This defaults the NamespaceContext to
 an empty NamespaceContext.  Querying this event for its namespaces or
 attributes will result in an empty iterator being returned.

Parameters:
namespaceUri - the uri of the QName of the new StartElement
localName - the local name of the QName of the new StartElement
prefix - the prefix of the QName of the new StartElement
Returns:
an instance of the requested StartElement


"
XMLEventFactory,"createStartElement(String prefix, String namespaceUri, String localName, Iterator attributes, Iterator namespaces)",abstract StartElement,Create a new StartElement.,"

createStartElement
public abstract StartElement createStartElement(String prefix,
                                                String namespaceUri,
                                                String localName,
                                                Iterator attributes,
                                                Iterator namespaces)
Create a new StartElement.  Namespaces can be added to this StartElement
 by passing in an Iterator that walks over a set of Namespace interfaces.
 Attributes can be added to this StartElement by passing an iterator
 that walks over a set of Attribute interfaces.

Parameters:
namespaceUri - the uri of the QName of the new StartElement
localName - the local name of the QName of the new StartElement
prefix - the prefix of the QName of the new StartElement
attributes - an unordered set of objects that implement
 Attribute to add to the new StartElement
namespaces - an unordered set of objects that implement
 Namespace to add to the new StartElement
Returns:
an instance of the requested StartElement


"
XMLEventFactory,"createStartElement(String prefix, String namespaceUri, String localName, Iterator attributes, Iterator namespaces, NamespaceContext context)",abstract StartElement,Create a new StartElement.,"

createStartElement
public abstract StartElement createStartElement(String prefix,
                                                String namespaceUri,
                                                String localName,
                                                Iterator attributes,
                                                Iterator namespaces,
                                                NamespaceContext context)
Create a new StartElement.  Namespaces can be added to this StartElement
 by passing in an Iterator that walks over a set of Namespace interfaces.
 Attributes can be added to this StartElement by passing an iterator
 that walks over a set of Attribute interfaces.

Parameters:
namespaceUri - the uri of the QName of the new StartElement
localName - the local name of the QName of the new StartElement
prefix - the prefix of the QName of the new StartElement
attributes - an unordered set of objects that implement
 Attribute to add to the new StartElement, may be null
namespaces - an unordered set of objects that implement
 Namespace to add to the new StartElement, may be null
context - the namespace context of this element
Returns:
an instance of the requested StartElement


"
XMLEventFactory,newFactory(),static XMLEventFactory,Create a new instance of the factory.,"

newFactory
public static XMLEventFactory newFactory()
                                  throws FactoryConfigurationError
Create a new instance of the factory.
 
 This static method creates a new factory instance.
 This method uses the following ordered lookup procedure to determine
 the XMLEventFactory implementation class to load:
 


   Use the javax.xml.stream.XMLEventFactory system property.
 

   Use the properties file ""lib/stax.properties"" in the JRE directory.
     This configuration file is in standard java.util.Properties format
     and contains the fully qualified name of the implementation class
     with the key being the system property defined above.
 

   Use the service-provider loading facilities, defined by the
   ServiceLoader class, to attempt to locate and load an
   implementation of the service using the default loading mechanism:
   the service-provider loading facility will use the current thread's context class loader
   to attempt to load the service. If the context class
   loader is null, the system class loader will be used.
 

   Otherwise, the system-default implementation is returned.
 


   Once an application has obtained a reference to a XMLEventFactory it
   can use the factory to configure and obtain stream instances.
 

   Note that this is a new method that replaces the deprecated newInstance() method.
     No changes in behavior are defined by this replacement method relative to
     the deprecated method.
 

Throws:
FactoryConfigurationError - in case of service configuration error or if
   the implementation is not available or cannot be instantiated.


"
XMLEventFactory,"newFactory(String factoryId, ClassLoader classLoader)",static XMLEventFactory,Create a new instance of the factory.,"

newFactory
public static XMLEventFactory newFactory(String factoryId,
                                         ClassLoader classLoader)
                                  throws FactoryConfigurationError
Create a new instance of the factory.
 If the classLoader argument is null, then the ContextClassLoader is used.
 
 This method uses the following ordered lookup procedure to determine
 the XMLEventFactory implementation class to load:
 


   Use the value of the system property identified by factoryId.
 

   Use the properties file ""lib/stax.properties"" in the JRE directory.
     This configuration file is in standard java.util.Properties format
     and contains the fully qualified name of the implementation class
     with the key being the given factoryId.
 

   If factoryId is ""javax.xml.stream.XMLEventFactory"",
   use the service-provider loading facilities, defined by the
   ServiceLoader class, to attempt to locate and load
   an implementation of the service using the specified ClassLoader.
   If classLoader is null, the default loading mechanism will apply:
   That is, the service-provider loading facility will use the current thread's context class loader
   to attempt to load the service. If the context class
   loader is null, the system class loader will be used.
 

   Otherwise, throws a FactoryConfigurationError.
 


 Note that this is a new method that replaces the deprecated
   newInstance(String factoryId, ClassLoader classLoader) method.
 No changes in behavior are defined by this replacement method relative
 to the deprecated method.
 

API Note:
The parameter factoryId defined here is inconsistent with that
 of other JAXP factories where the first parameter is fully qualified
 factory class name that provides implementation of the factory.
Parameters:
factoryId - Name of the factory to find, same as
                              a property name
classLoader - classLoader to use
Returns:
the factory implementation
Throws:
FactoryConfigurationError - in case of service configuration error or if
   the implementation is not available or cannot be instantiated.


"
XMLEventFactory,newInstance(),static XMLEventFactory,Creates a new instance of the factory in exactly the same manner as the newFactory() method.,"

newInstance
public static XMLEventFactory newInstance()
                                   throws FactoryConfigurationError
Creates a new instance of the factory in exactly the same manner as the
 newFactory() method.

Throws:
FactoryConfigurationError - if an instance of this factory cannot be loaded


"
XMLEventFactory,"newInstance(String factoryId, ClassLoader classLoader)",static XMLEventFactory,"Deprecated. This method has been deprecated to maintain API consistency. All newInstance methods have been replaced with corresponding newFactory methods. The replacement newFactory(java.lang.String, java.lang.ClassLoader) method defines no changes in behavior.","

newInstance
public static XMLEventFactory newInstance(String factoryId,
                                          ClassLoader classLoader)
                                   throws FactoryConfigurationError
Deprecated. This method has been deprecated to maintain API consistency.
              All newInstance methods have been replaced with corresponding
              newFactory methods. The replacement newFactory(java.lang.String, java.lang.ClassLoader)
              method defines no changes in behavior.
Create a new instance of the factory

Parameters:
factoryId - Name of the factory to find, same as
                              a property name
classLoader - classLoader to use
Returns:
the factory implementation
Throws:
FactoryConfigurationError - if an instance of this factory cannot be loaded


"
XMLEventFactory,setLocation(Location location),abstract void,This method allows setting of the Location on each event that is created by this factory.,"

setLocation
public abstract void setLocation(Location location)
This method allows setting of the Location on each event that
 is created by this factory.  The values are copied by value into
 the events created by this factory.  To reset the location
 information set the location to null.

Parameters:
location - the location to set on each event created


"
XMLInputFactory,"createFilteredReader(XMLEventReader reader, EventFilter filter)",abstract XMLEventReader,Create a filtered event reader that wraps the filter around the event reader,"

createFilteredReader
public abstract XMLEventReader createFilteredReader(XMLEventReader reader,
                                                    EventFilter filter)
                                             throws XMLStreamException
Create a filtered event reader that wraps the filter around the event reader

Parameters:
reader - the event reader to wrap
filter - the filter to apply to the event reader
Throws:
XMLStreamException


"
XMLInputFactory,"createFilteredReader(XMLStreamReader reader, StreamFilter filter)",abstract XMLStreamReader,Create a filtered reader that wraps the filter around the reader,"

createFilteredReader
public abstract XMLStreamReader createFilteredReader(XMLStreamReader reader,
                                                     StreamFilter filter)
                                              throws XMLStreamException
Create a filtered reader that wraps the filter around the reader

Parameters:
reader - the reader to filter
filter - the filter to apply to the reader
Throws:
XMLStreamException


"
XMLInputFactory,createXMLEventReader(InputStream stream),abstract XMLEventReader,Create a new XMLEventReader from a java.io.InputStream,"

createXMLEventReader
public abstract XMLEventReader createXMLEventReader(InputStream stream)
                                             throws XMLStreamException
Create a new XMLEventReader from a java.io.InputStream

Parameters:
stream - the InputStream to read from
Throws:
XMLStreamException


"
XMLInputFactory,"createXMLEventReader(InputStream stream, String encoding)",abstract XMLEventReader,Create a new XMLEventReader from a java.io.InputStream,"

createXMLEventReader
public abstract XMLEventReader createXMLEventReader(InputStream stream,
                                                    String encoding)
                                             throws XMLStreamException
Create a new XMLEventReader from a java.io.InputStream

Parameters:
stream - the InputStream to read from
encoding - the character encoding of the stream
Throws:
XMLStreamException


"
XMLInputFactory,createXMLEventReader(Reader reader),abstract XMLEventReader,Create a new XMLEventReader from a reader,"

createXMLEventReader
public abstract XMLEventReader createXMLEventReader(Reader reader)
                                             throws XMLStreamException
Create a new XMLEventReader from a reader

Parameters:
reader - the XML data to read from
Throws:
XMLStreamException


"
XMLInputFactory,createXMLEventReader(Source source),abstract XMLEventReader,Create a new XMLEventReader from a JAXP source.,"

createXMLEventReader
public abstract XMLEventReader createXMLEventReader(Source source)
                                             throws XMLStreamException
Create a new XMLEventReader from a JAXP source.
 Support of this method is optional.

Parameters:
source - the source to read from
Throws:
UnsupportedOperationException - if this method is not
 supported by this XMLInputFactory
XMLStreamException


"
XMLInputFactory,"createXMLEventReader(String systemId, InputStream stream)",abstract XMLEventReader,Create a new XMLEventReader from a java.io.InputStream,"

createXMLEventReader
public abstract XMLEventReader createXMLEventReader(String systemId,
                                                    InputStream stream)
                                             throws XMLStreamException
Create a new XMLEventReader from a java.io.InputStream

Parameters:
systemId - the system ID of the stream
stream - the InputStream to read from
Throws:
XMLStreamException


"
XMLInputFactory,"createXMLEventReader(String systemId, Reader reader)",abstract XMLEventReader,Create a new XMLEventReader from a reader,"

createXMLEventReader
public abstract XMLEventReader createXMLEventReader(String systemId,
                                                    Reader reader)
                                             throws XMLStreamException
Create a new XMLEventReader from a reader

Parameters:
systemId - the system ID of the input
reader - the XML data to read from
Throws:
XMLStreamException


"
XMLInputFactory,createXMLEventReader(XMLStreamReader reader),abstract XMLEventReader,Create a new XMLEventReader from an XMLStreamReader.,"

createXMLEventReader
public abstract XMLEventReader createXMLEventReader(XMLStreamReader reader)
                                             throws XMLStreamException
Create a new XMLEventReader from an XMLStreamReader.  After being used
 to construct the XMLEventReader instance returned from this method
 the XMLStreamReader must not be used.

Parameters:
reader - the XMLStreamReader to read from (may not be modified)
Returns:
a new XMLEventReader
Throws:
XMLStreamException


"
XMLInputFactory,createXMLStreamReader(InputStream stream),abstract XMLStreamReader,Create a new XMLStreamReader from a java.io.InputStream,"

createXMLStreamReader
public abstract XMLStreamReader createXMLStreamReader(InputStream stream)
                                               throws XMLStreamException
Create a new XMLStreamReader from a java.io.InputStream

Parameters:
stream - the InputStream to read from
Throws:
XMLStreamException


"
XMLInputFactory,"createXMLStreamReader(InputStream stream, String encoding)",abstract XMLStreamReader,Create a new XMLStreamReader from a java.io.InputStream,"

createXMLStreamReader
public abstract XMLStreamReader createXMLStreamReader(InputStream stream,
                                                      String encoding)
                                               throws XMLStreamException
Create a new XMLStreamReader from a java.io.InputStream

Parameters:
stream - the InputStream to read from
encoding - the character encoding of the stream
Throws:
XMLStreamException


"
XMLInputFactory,createXMLStreamReader(Reader reader),abstract XMLStreamReader,Create a new XMLStreamReader from a reader,"

createXMLStreamReader
public abstract XMLStreamReader createXMLStreamReader(Reader reader)
                                               throws XMLStreamException
Create a new XMLStreamReader from a reader

Parameters:
reader - the XML data to read from
Throws:
XMLStreamException


"
XMLInputFactory,createXMLStreamReader(Source source),abstract XMLStreamReader,Create a new XMLStreamReader from a JAXP source.,"

createXMLStreamReader
public abstract XMLStreamReader createXMLStreamReader(Source source)
                                               throws XMLStreamException
Create a new XMLStreamReader from a JAXP source.  This method is optional.

Parameters:
source - the source to read from
Throws:
UnsupportedOperationException - if this method is not
 supported by this XMLInputFactory
XMLStreamException


"
XMLInputFactory,"createXMLStreamReader(String systemId, InputStream stream)",abstract XMLStreamReader,Create a new XMLStreamReader from a java.io.InputStream,"

createXMLStreamReader
public abstract XMLStreamReader createXMLStreamReader(String systemId,
                                                      InputStream stream)
                                               throws XMLStreamException
Create a new XMLStreamReader from a java.io.InputStream

Parameters:
systemId - the system ID of the stream
stream - the InputStream to read from
Throws:
XMLStreamException


"
XMLInputFactory,"createXMLStreamReader(String systemId, Reader reader)",abstract XMLStreamReader,Create a new XMLStreamReader from a java.io.InputStream,"

createXMLStreamReader
public abstract XMLStreamReader createXMLStreamReader(String systemId,
                                                      Reader reader)
                                               throws XMLStreamException
Create a new XMLStreamReader from a java.io.InputStream

Parameters:
systemId - the system ID of the stream
reader - the InputStream to read from
Throws:
XMLStreamException


"
XMLInputFactory,getEventAllocator(),abstract XMLEventAllocator,Gets the allocator used by streams created with this factory,"

getEventAllocator
public abstract XMLEventAllocator getEventAllocator()
Gets the allocator used by streams created with this factory

"
XMLInputFactory,getProperty(String name),abstract Object,Get the value of a feature/property from the underlying implementation,"

getProperty
public abstract Object getProperty(String name)
                            throws IllegalArgumentException
Get the value of a feature/property from the underlying implementation

Parameters:
name - The name of the property (may not be null)
Returns:
The value of the property
Throws:
IllegalArgumentException - if the property is not supported


"
XMLInputFactory,getXMLReporter(),abstract XMLReporter,The reporter that will be set on any XMLStreamReader or XMLEventReader created by this factory instance.,"

getXMLReporter
public abstract XMLReporter getXMLReporter()
The reporter that will be set on any XMLStreamReader or XMLEventReader created
 by this factory instance.

"
XMLInputFactory,getXMLResolver(),abstract XMLResolver,The resolver that will be set on any XMLStreamReader or XMLEventReader created by this factory instance.,"

getXMLResolver
public abstract XMLResolver getXMLResolver()
The resolver that will be set on any XMLStreamReader or XMLEventReader created
 by this factory instance.

"
XMLInputFactory,isPropertySupported(String name),abstract boolean,Query the set of properties that this factory supports.,"

isPropertySupported
public abstract boolean isPropertySupported(String name)
Query the set of properties that this factory supports.

Parameters:
name - The name of the property (may not be null)
Returns:
true if the property is supported and false otherwise


"
XMLInputFactory,newFactory(),static XMLInputFactory,Create a new instance of the factory.,"

newFactory
public static XMLInputFactory newFactory()
                                  throws FactoryConfigurationError
Create a new instance of the factory.
 
 This static method creates a new factory instance.
 This method uses the following ordered lookup procedure to determine
 the XMLInputFactory implementation class to load:
 


   Use the javax.xml.stream.XMLInputFactory system property.
 

   Use the properties file ""lib/stax.properties"" in the JRE directory.
     This configuration file is in standard java.util.Properties format
     and contains the fully qualified name of the implementation class
     with the key being the system property defined above.
 

   Use the service-provider loading facilities, defined by the
   ServiceLoader class, to attempt to locate and load an
   implementation of the service using the default loading mechanism:
   the service-provider loading facility will use the current thread's context class loader
   to attempt to load the service. If the context class
   loader is null, the system class loader will be used.
 

 Otherwise, the system-default implementation is returned.
 


   Once an application has obtained a reference to a XMLInputFactory it
   can use the factory to configure and obtain stream instances.
 

   Note that this is a new method that replaces the deprecated newInstance() method.
     No changes in behavior are defined by this replacement method relative to
     the deprecated method.
 

Throws:
FactoryConfigurationError - in case of service configuration error or if
   the implementation is not available or cannot be instantiated.


"
XMLInputFactory,"newFactory(String factoryId, ClassLoader classLoader)",static XMLInputFactory,Create a new instance of the factory.,"

newFactory
public static XMLInputFactory newFactory(String factoryId,
                                         ClassLoader classLoader)
                                  throws FactoryConfigurationError
Create a new instance of the factory.
 If the classLoader argument is null, then the ContextClassLoader is used.
 
 This method uses the following ordered lookup procedure to determine
 the XMLInputFactory implementation class to load:
 


   Use the value of the system property identified by factoryId.
 

   Use the properties file ""lib/stax.properties"" in the JRE directory.
     This configuration file is in standard java.util.Properties format
     and contains the fully qualified name of the implementation class
     with the key being the given factoryId.
 

   If factoryId is ""javax.xml.stream.XMLInputFactory"",
   use the service-provider loading facilities, defined by the
   ServiceLoader class, to attempt to locate and load
   an implementation of the service using the specified ClassLoader.
   If classLoader is null, the default loading mechanism will apply:
   That is, the service-provider loading facility will use the current thread's context class loader
   to attempt to load the service. If the context class
   loader is null, the system class loader will be used.
 

   Otherwise, throws a FactoryConfigurationError.
 


 Note that this is a new method that replaces the deprecated
   newInstance(String factoryId, ClassLoader classLoader) method.
 No changes in behavior are defined by this replacement method relative
 to the deprecated method.
 

API Note:
The parameter factoryId defined here is inconsistent with that
 of other JAXP factories where the first parameter is fully qualified
 factory class name that provides implementation of the factory.
Parameters:
factoryId - Name of the factory to find, same as
                              a property name
classLoader - classLoader to use
Returns:
the factory implementation
Throws:
FactoryConfigurationError - in case of service configuration error or if
   the implementation is not available or cannot be instantiated.
FactoryConfigurationError - if an instance of this factory cannot be loaded


"
XMLInputFactory,newInstance(),static XMLInputFactory,Creates a new instance of the factory in exactly the same manner as the newFactory() method.,"

newInstance
public static XMLInputFactory newInstance()
                                   throws FactoryConfigurationError
Creates a new instance of the factory in exactly the same manner as the
 newFactory() method.

Throws:
FactoryConfigurationError - if an instance of this factory cannot be loaded


"
XMLInputFactory,"newInstance(String factoryId, ClassLoader classLoader)",static XMLInputFactory,"Deprecated. This method has been deprecated to maintain API consistency. All newInstance methods have been replaced with corresponding newFactory methods. The replacement newFactory(java.lang.String, java.lang.ClassLoader) method defines no changes in behavior.","

newInstance
public static XMLInputFactory newInstance(String factoryId,
                                          ClassLoader classLoader)
                                   throws FactoryConfigurationError
Deprecated. This method has been deprecated to maintain API consistency.
              All newInstance methods have been replaced with corresponding
              newFactory methods. The replacement newFactory(java.lang.String, java.lang.ClassLoader) method
              defines no changes in behavior.
Create a new instance of the factory

Parameters:
factoryId - Name of the factory to find, same as
                              a property name
classLoader - classLoader to use
Returns:
the factory implementation
Throws:
FactoryConfigurationError - if an instance of this factory cannot be loaded


"
XMLInputFactory,setEventAllocator(XMLEventAllocator allocator),abstract void,Set a user defined event allocator for events,"

setEventAllocator
public abstract void setEventAllocator(XMLEventAllocator allocator)
Set a user defined event allocator for events

Parameters:
allocator - the user defined allocator


"
XMLInputFactory,"setProperty(String name, Object value)",abstract void,Allows the user to set specific feature/property on the underlying implementation.,"

setProperty
public abstract void setProperty(String name,
                                 Object value)
                          throws IllegalArgumentException
Allows the user to set specific feature/property on the underlying
 implementation. The underlying implementation is not required to support
 every setting of every property in the specification and may use
 IllegalArgumentException to signal that an unsupported property may not be
 set with the specified value.
 
 All implementations that implement JAXP 1.5 or newer are required to
 support the XMLConstants.ACCESS_EXTERNAL_DTD property.
 



        Access to external DTDs, external Entity References is restricted to the
        protocols specified by the property. If access is denied during parsing
        due to the restriction of this property, XMLStreamException
        will be thrown by the XMLStreamReader.next() or
        XMLEventReader.nextEvent() method.
        



Parameters:
name - The name of the property (may not be null)
value - The value of the property
Throws:
IllegalArgumentException - if the property is not supported


"
XMLInputFactory,setXMLReporter(XMLReporter reporter),abstract void,The reporter that will be set on any XMLStreamReader or XMLEventReader created by this factory instance.,"

setXMLReporter
public abstract void setXMLReporter(XMLReporter reporter)
The reporter that will be set on any XMLStreamReader or XMLEventReader created
 by this factory instance.

Parameters:
reporter - the resolver to use to report non fatal errors


"
XMLInputFactory,setXMLResolver(XMLResolver resolver),abstract void,The resolver that will be set on any XMLStreamReader or XMLEventReader created by this factory instance.,"

setXMLResolver
public abstract void setXMLResolver(XMLResolver resolver)
The resolver that will be set on any XMLStreamReader or XMLEventReader created
 by this factory instance.

Parameters:
resolver - the resolver to use to resolve references


"
XMLOutputFactory,createXMLEventWriter(OutputStream stream),abstract XMLEventWriter,Create a new XMLEventWriter that writes to a stream,"

createXMLEventWriter
public abstract XMLEventWriter createXMLEventWriter(OutputStream stream)
                                             throws XMLStreamException
Create a new XMLEventWriter that writes to a stream

Parameters:
stream - the stream to write to
Throws:
XMLStreamException


"
XMLOutputFactory,"createXMLEventWriter(OutputStream stream, String encoding)",abstract XMLEventWriter,Create a new XMLEventWriter that writes to a stream,"

createXMLEventWriter
public abstract XMLEventWriter createXMLEventWriter(OutputStream stream,
                                                    String encoding)
                                             throws XMLStreamException
Create a new XMLEventWriter that writes to a stream

Parameters:
stream - the stream to write to
encoding - the encoding to use
Throws:
XMLStreamException


"
XMLOutputFactory,createXMLEventWriter(Result result),abstract XMLEventWriter,Create a new XMLEventWriter that writes to a JAXP result.,"

createXMLEventWriter
public abstract XMLEventWriter createXMLEventWriter(Result result)
                                             throws XMLStreamException
Create a new XMLEventWriter that writes to a JAXP result.  This method is optional.

Parameters:
result - the result to write to
Throws:
UnsupportedOperationException - if this method is not
 supported by this XMLOutputFactory
XMLStreamException


"
XMLOutputFactory,createXMLEventWriter(Writer stream),abstract XMLEventWriter,Create a new XMLEventWriter that writes to a writer,"

createXMLEventWriter
public abstract XMLEventWriter createXMLEventWriter(Writer stream)
                                             throws XMLStreamException
Create a new XMLEventWriter that writes to a writer

Parameters:
stream - the stream to write to
Throws:
XMLStreamException


"
XMLOutputFactory,createXMLStreamWriter(OutputStream stream),abstract XMLStreamWriter,Create a new XMLStreamWriter that writes to a stream,"

createXMLStreamWriter
public abstract XMLStreamWriter createXMLStreamWriter(OutputStream stream)
                                               throws XMLStreamException
Create a new XMLStreamWriter that writes to a stream

Parameters:
stream - the stream to write to
Throws:
XMLStreamException


"
XMLOutputFactory,"createXMLStreamWriter(OutputStream stream, String encoding)",abstract XMLStreamWriter,Create a new XMLStreamWriter that writes to a stream,"

createXMLStreamWriter
public abstract XMLStreamWriter createXMLStreamWriter(OutputStream stream,
                                                      String encoding)
                                               throws XMLStreamException
Create a new XMLStreamWriter that writes to a stream

Parameters:
stream - the stream to write to
encoding - the encoding to use
Throws:
XMLStreamException


"
XMLOutputFactory,createXMLStreamWriter(Result result),abstract XMLStreamWriter,Create a new XMLStreamWriter that writes to a JAXP result.,"

createXMLStreamWriter
public abstract XMLStreamWriter createXMLStreamWriter(Result result)
                                               throws XMLStreamException
Create a new XMLStreamWriter that writes to a JAXP result.  This method is optional.

Parameters:
result - the result to write to
Throws:
UnsupportedOperationException - if this method is not
 supported by this XMLOutputFactory
XMLStreamException


"
XMLOutputFactory,createXMLStreamWriter(Writer stream),abstract XMLStreamWriter,Create a new XMLStreamWriter that writes to a writer,"

createXMLStreamWriter
public abstract XMLStreamWriter createXMLStreamWriter(Writer stream)
                                               throws XMLStreamException
Create a new XMLStreamWriter that writes to a writer

Parameters:
stream - the writer to write to
Throws:
XMLStreamException


"
XMLOutputFactory,getProperty(String name),abstract Object,Get a feature/property on the underlying implementation,"

getProperty
public abstract Object getProperty(String name)
                            throws IllegalArgumentException
Get a feature/property on the underlying implementation

Parameters:
name - The name of the property
Returns:
The value of the property
Throws:
IllegalArgumentException - if the property is not supported


"
XMLOutputFactory,isPropertySupported(String name),abstract boolean,Query the set of properties that this factory supports.,"

isPropertySupported
public abstract boolean isPropertySupported(String name)
Query the set of properties that this factory supports.

Parameters:
name - The name of the property (may not be null)
Returns:
true if the property is supported and false otherwise


"
XMLOutputFactory,newFactory(),static XMLOutputFactory,Create a new instance of the factory.,"

newFactory
public static XMLOutputFactory newFactory()
                                   throws FactoryConfigurationError
Create a new instance of the factory.
 
 This static method creates a new factory instance. This method uses the
 following ordered lookup procedure to determine the XMLOutputFactory
 implementation class to load:
 


   Use the javax.xml.stream.XMLOutputFactory system property.
 

   Use the properties file ""lib/stax.properties"" in the JRE directory.
     This configuration file is in standard java.util.Properties format
     and contains the fully qualified name of the implementation class
     with the key being the system property defined above.
 

   Use the service-provider loading facilities, defined by the
   ServiceLoader class, to attempt to locate and load an
   implementation of the service using the default loading mechanism:
   the service-provider loading facility will use the current thread's context class loader
   to attempt to load the service. If the context class
   loader is null, the system class loader will be used.
 

   Otherwise, the system-default implementation is returned.
 

 Once an application has obtained a reference to a XMLOutputFactory it
 can use the factory to configure and obtain stream instances.
 

 Note that this is a new method that replaces the deprecated newInstance() method.
   No changes in behavior are defined by this replacement method relative to the
   deprecated method.
 

Throws:
FactoryConfigurationError - in case of service configuration error or if
   the implementation is not available or cannot be instantiated.


"
XMLOutputFactory,"newFactory(String factoryId, ClassLoader classLoader)",static XMLOutputFactory,Create a new instance of the factory.,"

newFactory
public static XMLOutputFactory newFactory(String factoryId,
                                          ClassLoader classLoader)
                                   throws FactoryConfigurationError
Create a new instance of the factory.
 If the classLoader argument is null, then the ContextClassLoader is used.
 
 This method uses the following ordered lookup procedure to determine
 the XMLOutputFactory implementation class to load:
 


   Use the value of the system property identified by factoryId.
 

   Use the properties file ""lib/stax.properties"" in the JRE directory.
     This configuration file is in standard java.util.Properties format
     and contains the fully qualified name of the implementation class
     with the key being the given factoryId.
 

   If factoryId is ""javax.xml.stream.XMLOutputFactory"",
   use the service-provider loading facilities, defined by the
   ServiceLoader class, to attempt to locate and load
   an implementation of the service using the specified ClassLoader.
   If classLoader is null, the default loading mechanism will apply:
   That is, the service-provider loading facility will use the current thread's context class loader
   to attempt to load the service. If the context class
   loader is null, the system class loader will be used.
 

   Otherwise, throws a FactoryConfigurationError.
 


API Note:
The parameter factoryId defined here is inconsistent with that
 of other JAXP factories where the first parameter is fully qualified
 factory class name that provides implementation of the factory.

 
   Note that this is a new method that replaces the deprecated
   newInstance(String factoryId, ClassLoader classLoader) method.
   The original method was incorrectly defined to return XMLInputFactory.
 
Parameters:
factoryId - Name of the factory to find, same as
                              a property name
classLoader - classLoader to use
Returns:
the factory implementation
Throws:
FactoryConfigurationError - in case of service configuration error or if
   the implementation is not available or cannot be instantiated.


"
XMLOutputFactory,newInstance(),static XMLOutputFactory,Creates a new instance of the factory in exactly the same manner as the newFactory() method.,"

newInstance
public static XMLOutputFactory newInstance()
                                    throws FactoryConfigurationError
Creates a new instance of the factory in exactly the same manner as the
 newFactory() method.

Throws:
FactoryConfigurationError - if an instance of this factory cannot be loaded


"
XMLOutputFactory,"newInstance(String factoryId, ClassLoader classLoader)",static XMLInputFactory,"Deprecated. This method has been deprecated because it returns an instance of XMLInputFactory, which is of the wrong class. Use the new method newFactory(java.lang.String, java.lang.ClassLoader) instead.","

newInstance
public static XMLInputFactory newInstance(String factoryId,
                                          ClassLoader classLoader)
                                   throws FactoryConfigurationError
Deprecated. This method has been deprecated because it returns an
              instance of XMLInputFactory, which is of the wrong class.
              Use the new method newFactory(java.lang.String,
              java.lang.ClassLoader) instead.
Create a new instance of the factory.

Parameters:
factoryId - Name of the factory to find, same as
                              a property name
classLoader - classLoader to use
Returns:
the factory implementation
Throws:
FactoryConfigurationError - if an instance of this factory cannot be loaded


"
XMLOutputFactory,"setProperty(String name, Object value)",abstract void,Allows the user to set specific features/properties on the underlying implementation.,"

setProperty
public abstract void setProperty(String name,
                                 Object value)
                          throws IllegalArgumentException
Allows the user to set specific features/properties on the underlying implementation.

Parameters:
name - The name of the property
value - The value of the property
Throws:
IllegalArgumentException - if the property is not supported


"
