Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,AbstractExecutorService,1,boolean isShutdown(),False,,NULL
0,AbstractExecutorService,2,boolean isTerminated(),False,,NULL
0,AbstractExecutorService,3,void shutdown(),False,,NULL
0,AbstractExecutorService,4,List<Runnable> shutdownNow(),False,,NULL
0,AbstractExecutorService,5,"boolean awaitTermination(long timeout, TimeUnit unit)",False,,NULL
1,ArrayBlockingQueue,1,boolean add(E e),True,"Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning true upon success and throwing an IllegalStateException if this queue is full.","

add
public boolean add(E e)
Inserts the specified element at the tail of this queue if it is
 possible to do so immediately without exceeding the queue's capacity,
 returning true upon success and throwing an
 IllegalStateException if this queue is full.

Specified by:
add in interface Collection<E>
Specified by:
add in interface BlockingQueue<E>
Specified by:
add in interface Queue<E>
Overrides:
add in class AbstractQueue<E>
Parameters:
e - the element to add
Returns:
true (as specified by Collection.add(E))
Throws:
IllegalStateException - if this queue is full
NullPointerException - if the specified element is null


"
1,ArrayBlockingQueue,2,E remove(),False,,NULL
1,ArrayBlockingQueue,3,boolean offer(E e),True,"Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning true upon success and false if this queue is full.","

offer
public boolean offer(E e)
Inserts the specified element at the tail of this queue if it is
 possible to do so immediately without exceeding the queue's capacity,
 returning true upon success and false if this queue
 is full.  This method is generally preferable to method add(E),
 which can fail to insert an element only by throwing an exception.

Specified by:
offer in interface BlockingQueue<E>
Specified by:
offer in interface Queue<E>
Parameters:
e - the element to add
Returns:
true if the element was added to this queue, else
         false
Throws:
NullPointerException - if the specified element is null


"
1,ArrayBlockingQueue,4,E poll(),True,"Retrieves and removes the head of this queue, or returns null if this queue is empty.","

poll
public E poll()
Description copied from interface: Queue
Retrieves and removes the head of this queue,
 or returns null if this queue is empty.

Specified by:
poll in interface Queue<E>
Returns:
the head of this queue, or null if this queue is empty


"
1,ArrayBlockingQueue,5,E take(),True,"Retrieves and removes the head of this queue, waiting if necessary until an element becomes available.","

take
public E take()
       throws InterruptedException
Description copied from interface: BlockingQueue
Retrieves and removes the head of this queue, waiting if necessary
 until an element becomes available.

Specified by:
take in interface BlockingQueue<E>
Returns:
the head of this queue
Throws:
InterruptedException - if interrupted while waiting


"
2,CompletableFuture,1,CompletableFuture<Void> runAsync(Runnable runnable),True,Returns a new CompletableFuture that is asynchronously completed by a task running in the ForkJoinPool.commonPool() after it runs the given action.,"

runAsync
public static CompletableFuture<Void> runAsync(Runnable runnable)
Returns a new CompletableFuture that is asynchronously completed
 by a task running in the ForkJoinPool.commonPool() after
 it runs the given action.

Parameters:
runnable - the action to run before completing the
 returned CompletableFuture
Returns:
the new CompletableFuture


"
2,CompletableFuture,2,"<U> CompletableFuture<U> thenApply(Function<? super T,? extends U> fn)",True,"Returns a new CompletionStage that, when this stage completes normally, is executed with this stage's result as the argument to the supplied function.","

thenApply
public <U> CompletableFuture<U> thenApply(Function<? super T,? extends U> fn)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when this stage completes
 normally, is executed with this stage's result as the argument
 to the supplied function.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
thenApply in interface CompletionStage<T>
Type Parameters:
U - the function's return type
Parameters:
fn - the function to use to compute the value of
 the returned CompletionStage
Returns:
the new CompletionStage


"
2,CompletableFuture,3,CompletableFuture<Void> thenAccept(Consumer<? super T> action),True,"Returns a new CompletionStage that, when this stage completes normally, is executed with this stage's result as the argument to the supplied action.","

thenAccept
public CompletableFuture<Void> thenAccept(Consumer<? super T> action)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when this stage completes
 normally, is executed with this stage's result as the argument
 to the supplied action.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
thenAccept in interface CompletionStage<T>
Parameters:
action - the action to perform before completing the
 returned CompletionStage
Returns:
the new CompletionStage


"
2,CompletableFuture,4,CompletableFuture<Void> thenRun(Runnable action),True,"Returns a new CompletionStage that, when this stage completes normally, executes the given action.","

thenRun
public CompletableFuture<Void> thenRun(Runnable action)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when this stage completes
 normally, executes the given action.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
thenRun in interface CompletionStage<T>
Parameters:
action - the action to perform before completing the
 returned CompletionStage
Returns:
the new CompletionStage


"
2,CompletableFuture,5,"CompletableFuture<T> whenComplete(BiConsumer<? super T,? super Throwable> action)",True,"Returns a new CompletionStage with the same result or exception as this stage, that executes the given action when this stage completes.","

whenComplete
public CompletableFuture<T> whenComplete(BiConsumer<? super T,? super Throwable> action)
Description copied from interface: CompletionStage
Returns a new CompletionStage with the same result or exception as
 this stage, that executes the given action when this stage completes.

 When this stage is complete, the given action is invoked with the
 result (or null if none) and the exception (or null
 if none) of this stage as arguments.  The returned stage is completed
 when the action returns.  If the supplied action itself encounters an
 exception, then the returned stage exceptionally completes with this
 exception unless this stage also completed exceptionally.

Specified by:
whenComplete in interface CompletionStage<T>
Parameters:
action - the action to perform
Returns:
the new CompletionStage


"
3,ConcurrentHashMap,1,"boolean putIfAbsent(K key, V value)",False,,NULL
3,ConcurrentHashMap,2,"V put(K key, V value)",True,Maps the specified key to the specified value in this table.,"

put
public V put(K key,
             V value)
Maps the specified key to the specified value in this table.
 Neither the key nor the value can be null.

 The value can be retrieved by calling the get method
 with a key that is equal to the original key.

Specified by:
put in interface Map<K,V>
Overrides:
put in class AbstractMap<K,V>
Parameters:
key - key with which the specified value is to be associated
value - value to be associated with the specified key
Returns:
the previous value associated with key, or
         null if there was no mapping for key
Throws:
NullPointerException - if the specified key or value is null


"
3,ConcurrentHashMap,3,V get(Object key),True,"Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.","

get
public V get(Object key)
Returns the value to which the specified key is mapped,
 or null if this map contains no mapping for the key.

 More formally, if this map contains a mapping from a key
 k to a value v such that key.equals(k),
 then this method returns v; otherwise it returns
 null.  (There can be at most one such mapping.)

Specified by:
get in interface Map<K,V>
Overrides:
get in class AbstractMap<K,V>
Parameters:
key - the key whose associated value is to be returned
Returns:
the value to which the specified key is mapped, or
         null if this map contains no mapping for the key
Throws:
NullPointerException - if the specified key is null


"
3,ConcurrentHashMap,4,V remove(Object key),True,Removes the key (and its corresponding value) from this map.,"

remove
public V remove(Object key)
Removes the key (and its corresponding value) from this map.
 This method does nothing if the key is not in the map.

Specified by:
remove in interface Map<K,V>
Overrides:
remove in class AbstractMap<K,V>
Parameters:
key - the key that needs to be removed
Returns:
the previous value associated with key, or
         null if there was no mapping for key
Throws:
NullPointerException - if the specified key is null


"
3,ConcurrentHashMap,5,"boolean replace(K key, V oldValue, V newValue)",True,Replaces the entry for a key only if currently mapped to a given value.,"

replace
public boolean replace(K key,
                       V oldValue,
                       V newValue)
Replaces the entry for a key only if currently mapped to a given value.
 This is equivalent to
   
 if (map.containsKey(key) && Objects.equals(map.get(key), oldValue)) {
   map.put(key, newValue);
   return true;
 } else
   return false;
 

 except that the action is performed atomically.

Specified by:
replace in interface ConcurrentMap<K,V>
Specified by:
replace in interface Map<K,V>
Parameters:
key - key with which the specified value is associated
oldValue - value expected to be associated with the specified key
newValue - value to be associated with the specified key
Returns:
true if the value was replaced
Throws:
NullPointerException - if any of the arguments are null


"
4,ConcurrentHashMap.KeySetView,1,boolean add(E e),False,,NULL
4,ConcurrentHashMap.KeySetView,2,boolean addAll(Collection<? extends E> c),False,,NULL
4,ConcurrentHashMap.KeySetView,3,void clear(),True,"Removes all of the elements from this view, by removing all the mappings from the map backing this view.","

clear
public final void clear()
Removes all of the elements from this view, by removing all
 the mappings from the map backing this view.

Specified by:
clear in interface Collection<E>


"
4,ConcurrentHashMap.KeySetView,4,boolean contains(Object o),True,Returns true if this collection contains the specified element.,"

contains
public boolean contains(Object o)
Returns true if this collection contains the specified element.
 More formally, returns true if and only if this collection
 contains at least one element e such that
 (o==null ? e==null : o.equals(e)).

Specified by:
contains in interface Collection<K>
Specified by:
contains in interface Set<K>
Parameters:
o - element whose presence in this collection is to be tested
Returns:
true if this collection contains the specified
         element
Throws:
NullPointerException - if the specified key is null


"
4,ConcurrentHashMap.KeySetView,5,boolean containsAll(Collection<?> c),True,Returns true if this collection contains all of the elements in the specified collection.,"

containsAll
public final boolean containsAll(Collection<?> c)
Description copied from interface: Collection
Returns true if this collection contains all of the elements
 in the specified collection.

Specified by:
containsAll in interface Collection<E>
Parameters:
c - collection to be checked for containment in this collection
Returns:
true if this collection contains all of the elements
         in the specified collection
See Also:
Collection.contains(Object)


"
4,ConcurrentHashMap.KeySetView,6,boolean equals(Object o),True,"Indicates whether some other object is ""equal to"" this one.","

equals
public boolean equals(Object o)
Description copied from class: Object
Indicates whether some other object is ""equal to"" this one.
 
 The equals method implements an equivalence relation
 on non-null object references:
 
It is reflexive: for any non-null reference value
     x, x.equals(x) should return
     true.
 It is symmetric: for any non-null reference values
     x and y, x.equals(y)
     should return true if and only if
     y.equals(x) returns true.
 It is transitive: for any non-null reference values
     x, y, and z, if
     x.equals(y) returns true and
     y.equals(z) returns true, then
     x.equals(z) should return true.
 It is consistent: for any non-null reference values
     x and y, multiple invocations of
     x.equals(y) consistently return true
     or consistently return false, provided no
     information used in equals comparisons on the
     objects is modified.
 For any non-null reference value x,
     x.equals(null) should return false.
 

 The equals method for class Object implements
 the most discriminating possible equivalence relation on objects;
 that is, for any non-null reference values x and
 y, this method returns true if and only
 if x and y refer to the same object
 (x == y has the value true).
 
 Note that it is generally necessary to override the hashCode
 method whenever this method is overridden, so as to maintain the
 general contract for the hashCode method, which states
 that equal objects must have equal hash codes.

Specified by:
equals in interface Collection<K>
Specified by:
equals in interface Set<K>
Overrides:
equals in class Object
Parameters:
o - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
4,ConcurrentHashMap.KeySetView,7,boolean isEmpty(),True,Returns true if this collection contains no elements.,"

isEmpty
public final boolean isEmpty()
Description copied from interface: Collection
Returns true if this collection contains no elements.

Specified by:
isEmpty in interface Collection<E>
Returns:
true if this collection contains no elements


"
4,ConcurrentHashMap.KeySetView,8,Iterator<E> iterator(),False,,NULL
4,ConcurrentHashMap.KeySetView,9,boolean remove(Object o),True,"Removes the key from this map view, by removing the key (and its corresponding value) from the backing map.","

remove
public boolean remove(Object o)
Removes the key from this map view, by removing the key (and its
 corresponding value) from the backing map.  This method does
 nothing if the key is not in the map.

Specified by:
remove in interface Collection<K>
Specified by:
remove in interface Set<K>
Parameters:
o - the key to be removed from the backing map
Returns:
true if the backing map contained the specified key
Throws:
NullPointerException - if the specified key is null


"
4,ConcurrentHashMap.KeySetView,10,boolean removeAll(Collection<?> c),True,Removes all of this collection's elements that are also contained in the specified collection (optional operation).,"

removeAll
public final boolean removeAll(Collection<?> c)
Description copied from interface: Collection
Removes all of this collection's elements that are also contained in the
 specified collection (optional operation).  After this call returns,
 this collection will contain no elements in common with the specified
 collection.

Specified by:
removeAll in interface Collection<E>
Parameters:
c - collection containing elements to be removed from this collection
Returns:
true if this collection changed as a result of the
         call
See Also:
Collection.remove(Object), 
Collection.contains(Object)


"
4,ConcurrentHashMap.KeySetView,11,boolean retainAll(Collection<?> c),True,Retains only the elements in this collection that are contained in the specified collection (optional operation).,"

retainAll
public final boolean retainAll(Collection<?> c)
Description copied from interface: Collection
Retains only the elements in this collection that are contained in the
 specified collection (optional operation).  In other words, removes from
 this collection all of its elements that are not contained in the
 specified collection.

Specified by:
retainAll in interface Collection<E>
Parameters:
c - collection containing elements to be retained in this collection
Returns:
true if this collection changed as a result of the call
See Also:
Collection.remove(Object), 
Collection.contains(Object)


"
4,ConcurrentHashMap.KeySetView,12,int size(),True,Returns the number of elements in this collection.,"

size
public final int size()
Description copied from interface: Collection
Returns the number of elements in this collection.  If this collection
 contains more than Integer.MAX_VALUE elements, returns
 Integer.MAX_VALUE.

Specified by:
size in interface Collection<E>
Returns:
the number of elements in this collection


"
4,ConcurrentHashMap.KeySetView,13,Object[] toArray(),True,Returns an array containing all of the elements in this collection.,"

toArray
public final Object[] toArray()
Description copied from interface: Collection
Returns an array containing all of the elements in this collection.
 If this collection makes any guarantees as to what order its elements
 are returned by its iterator, this method must return the elements in
 the same order.

 The returned array will be ""safe"" in that no references to it are
 maintained by this collection.  (In other words, this method must
 allocate a new array even if this collection is backed by an array).
 The caller is thus free to modify the returned array.

 This method acts as bridge between array-based and collection-based
 APIs.

Specified by:
toArray in interface Collection<E>
Returns:
an array containing all of the elements in this collection


"
4,ConcurrentHashMap.KeySetView,14,<T> T[] toArray(T[] a),True,Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array.,"

toArray
public final <T> T[] toArray(T[] a)
Description copied from interface: Collection
Returns an array containing all of the elements in this collection;
 the runtime type of the returned array is that of the specified array.
 If the collection fits in the specified array, it is returned therein.
 Otherwise, a new array is allocated with the runtime type of the
 specified array and the size of this collection.

 If this collection fits in the specified array with room to spare
 (i.e., the array has more elements than this collection), the element
 in the array immediately following the end of the collection is set to
 null.  (This is useful in determining the length of this
 collection only if the caller knows that this collection does
 not contain any null elements.)

 If this collection makes any guarantees as to what order its elements
 are returned by its iterator, this method must return the elements in
 the same order.

 Like the Collection.toArray() method, this method acts as bridge between
 array-based and collection-based APIs.  Further, this method allows
 precise control over the runtime type of the output array, and may,
 under certain circumstances, be used to save allocation costs.

 Suppose x is a collection known to contain only strings.
 The following code can be used to dump the collection into a newly
 allocated array of String:

 
     String[] y = x.toArray(new String[0]);

 Note that toArray(new Object[0]) is identical in function to
 toArray().

Specified by:
toArray in interface Collection<E>
Type Parameters:
T - the runtime type of the array to contain the collection
Parameters:
a - the array into which the elements of this collection are to be
        stored, if it is big enough; otherwise, a new array of the same
        runtime type is allocated for this purpose.
Returns:
an array containing all of the elements in this collection


"
4,ConcurrentHashMap.KeySetView,15,boolean add(E e),False,,NULL
4,ConcurrentHashMap.KeySetView,16,boolean addAll(Collection<? extends E> c),False,,NULL
4,ConcurrentHashMap.KeySetView,17,void clear(),True,"Removes all of the elements from this view, by removing all the mappings from the map backing this view.","

clear
public final void clear()
Removes all of the elements from this view, by removing all
 the mappings from the map backing this view.

Specified by:
clear in interface Collection<E>


"
4,ConcurrentHashMap.KeySetView,18,boolean contains(Object o),True,Returns true if this collection contains the specified element.,"

contains
public boolean contains(Object o)
Returns true if this collection contains the specified element.
 More formally, returns true if and only if this collection
 contains at least one element e such that
 (o==null ? e==null : o.equals(e)).

Specified by:
contains in interface Collection<K>
Specified by:
contains in interface Set<K>
Parameters:
o - element whose presence in this collection is to be tested
Returns:
true if this collection contains the specified
         element
Throws:
NullPointerException - if the specified key is null


"
4,ConcurrentHashMap.KeySetView,19,boolean containsAll(Collection<?> c),True,Returns true if this collection contains all of the elements in the specified collection.,"

containsAll
public final boolean containsAll(Collection<?> c)
Description copied from interface: Collection
Returns true if this collection contains all of the elements
 in the specified collection.

Specified by:
containsAll in interface Collection<E>
Parameters:
c - collection to be checked for containment in this collection
Returns:
true if this collection contains all of the elements
         in the specified collection
See Also:
Collection.contains(Object)


"
4,ConcurrentHashMap.KeySetView,20,boolean equals(Object o),True,"Indicates whether some other object is ""equal to"" this one.","

equals
public boolean equals(Object o)
Description copied from class: Object
Indicates whether some other object is ""equal to"" this one.
 
 The equals method implements an equivalence relation
 on non-null object references:
 
It is reflexive: for any non-null reference value
     x, x.equals(x) should return
     true.
 It is symmetric: for any non-null reference values
     x and y, x.equals(y)
     should return true if and only if
     y.equals(x) returns true.
 It is transitive: for any non-null reference values
     x, y, and z, if
     x.equals(y) returns true and
     y.equals(z) returns true, then
     x.equals(z) should return true.
 It is consistent: for any non-null reference values
     x and y, multiple invocations of
     x.equals(y) consistently return true
     or consistently return false, provided no
     information used in equals comparisons on the
     objects is modified.
 For any non-null reference value x,
     x.equals(null) should return false.
 

 The equals method for class Object implements
 the most discriminating possible equivalence relation on objects;
 that is, for any non-null reference values x and
 y, this method returns true if and only
 if x and y refer to the same object
 (x == y has the value true).
 
 Note that it is generally necessary to override the hashCode
 method whenever this method is overridden, so as to maintain the
 general contract for the hashCode method, which states
 that equal objects must have equal hash codes.

Specified by:
equals in interface Collection<K>
Specified by:
equals in interface Set<K>
Overrides:
equals in class Object
Parameters:
o - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
4,ConcurrentHashMap.KeySetView,21,boolean isEmpty(),True,Returns true if this collection contains no elements.,"

isEmpty
public final boolean isEmpty()
Description copied from interface: Collection
Returns true if this collection contains no elements.

Specified by:
isEmpty in interface Collection<E>
Returns:
true if this collection contains no elements


"
4,ConcurrentHashMap.KeySetView,22,Iterator<E> iterator(),False,,NULL
4,ConcurrentHashMap.KeySetView,23,boolean remove(Object o),True,"Removes the key from this map view, by removing the key (and its corresponding value) from the backing map.","

remove
public boolean remove(Object o)
Removes the key from this map view, by removing the key (and its
 corresponding value) from the backing map.  This method does
 nothing if the key is not in the map.

Specified by:
remove in interface Collection<K>
Specified by:
remove in interface Set<K>
Parameters:
o - the key to be removed from the backing map
Returns:
true if the backing map contained the specified key
Throws:
NullPointerException - if the specified key is null


"
4,ConcurrentHashMap.KeySetView,24,boolean removeAll(Collection<?> c),True,Removes all of this collection's elements that are also contained in the specified collection (optional operation).,"

removeAll
public final boolean removeAll(Collection<?> c)
Description copied from interface: Collection
Removes all of this collection's elements that are also contained in the
 specified collection (optional operation).  After this call returns,
 this collection will contain no elements in common with the specified
 collection.

Specified by:
removeAll in interface Collection<E>
Parameters:
c - collection containing elements to be removed from this collection
Returns:
true if this collection changed as a result of the
         call
See Also:
Collection.remove(Object), 
Collection.contains(Object)


"
4,ConcurrentHashMap.KeySetView,25,boolean retainAll(Collection<?> c),True,Retains only the elements in this collection that are contained in the specified collection (optional operation).,"

retainAll
public final boolean retainAll(Collection<?> c)
Description copied from interface: Collection
Retains only the elements in this collection that are contained in the
 specified collection (optional operation).  In other words, removes from
 this collection all of its elements that are not contained in the
 specified collection.

Specified by:
retainAll in interface Collection<E>
Parameters:
c - collection containing elements to be retained in this collection
Returns:
true if this collection changed as a result of the call
See Also:
Collection.remove(Object), 
Collection.contains(Object)


"
4,ConcurrentHashMap.KeySetView,26,int size(),True,Returns the number of elements in this collection.,"

size
public final int size()
Description copied from interface: Collection
Returns the number of elements in this collection.  If this collection
 contains more than Integer.MAX_VALUE elements, returns
 Integer.MAX_VALUE.

Specified by:
size in interface Collection<E>
Returns:
the number of elements in this collection


"
4,ConcurrentHashMap.KeySetView,27,Object[] toArray(),True,Returns an array containing all of the elements in this collection.,"

toArray
public final Object[] toArray()
Description copied from interface: Collection
Returns an array containing all of the elements in this collection.
 If this collection makes any guarantees as to what order its elements
 are returned by its iterator, this method must return the elements in
 the same order.

 The returned array will be ""safe"" in that no references to it are
 maintained by this collection.  (In other words, this method must
 allocate a new array even if this collection is backed by an array).
 The caller is thus free to modify the returned array.

 This method acts as bridge between array-based and collection-based
 APIs.

Specified by:
toArray in interface Collection<E>
Returns:
an array containing all of the elements in this collection


"
4,ConcurrentHashMap.KeySetView,28,<T> T[] toArray(T[] a),True,Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array.,"

toArray
public final <T> T[] toArray(T[] a)
Description copied from interface: Collection
Returns an array containing all of the elements in this collection;
 the runtime type of the returned array is that of the specified array.
 If the collection fits in the specified array, it is returned therein.
 Otherwise, a new array is allocated with the runtime type of the
 specified array and the size of this collection.

 If this collection fits in the specified array with room to spare
 (i.e., the array has more elements than this collection), the element
 in the array immediately following the end of the collection is set to
 null.  (This is useful in determining the length of this
 collection only if the caller knows that this collection does
 not contain any null elements.)

 If this collection makes any guarantees as to what order its elements
 are returned by its iterator, this method must return the elements in
 the same order.

 Like the Collection.toArray() method, this method acts as bridge between
 array-based and collection-based APIs.  Further, this method allows
 precise control over the runtime type of the output array, and may,
 under certain circumstances, be used to save allocation costs.

 Suppose x is a collection known to contain only strings.
 The following code can be used to dump the collection into a newly
 allocated array of String:

 
     String[] y = x.toArray(new String[0]);

 Note that toArray(new Object[0]) is identical in function to
 toArray().

Specified by:
toArray in interface Collection<E>
Type Parameters:
T - the runtime type of the array to contain the collection
Parameters:
a - the array into which the elements of this collection are to be
        stored, if it is big enough; otherwise, a new array of the same
        runtime type is allocated for this purpose.
Returns:
an array containing all of the elements in this collection


"
5,ConcurrentLinkedDeque,1,boolean add(E e),True,Inserts the specified element at the tail of this deque.,"

add
public boolean add(E e)
Inserts the specified element at the tail of this deque.
 As the deque is unbounded, this method will never throw
 IllegalStateException or return false.

Specified by:
add in interface Collection<E>
Specified by:
add in interface Deque<E>
Specified by:
add in interface Queue<E>
Overrides:
add in class AbstractCollection<E>
Parameters:
e - element whose presence in this collection is to be ensured
Returns:
true (as specified by Collection.add(E))
Throws:
NullPointerException - if the specified element is null


"
5,ConcurrentLinkedDeque,2,boolean offer(E e),True,Inserts the specified element at the tail of this deque.,"

offer
public boolean offer(E e)
Inserts the specified element at the tail of this deque.
 As the deque is unbounded, this method will never return false.

Specified by:
offer in interface Deque<E>
Specified by:
offer in interface Queue<E>
Parameters:
e - the element to add
Returns:
true (as specified by Queue.offer(E))
Throws:
NullPointerException - if the specified element is null


"
5,ConcurrentLinkedDeque,3,E remove(),True,"Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque).","

remove
public E remove()
Description copied from interface: Deque
Retrieves and removes the head of the queue represented by this deque
 (in other words, the first element of this deque).
 This method differs from poll only in that it throws an
 exception if this deque is empty.

 This method is equivalent to Deque.removeFirst().

Specified by:
remove in interface Deque<E>
Specified by:
remove in interface Queue<E>
Returns:
the head of the queue represented by this deque
Throws:
NoSuchElementException - if this deque is empty


"
5,ConcurrentLinkedDeque,4,E poll(),True,"Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty.","

poll
public E poll()
Description copied from interface: Deque
Retrieves and removes the head of the queue represented by this deque
 (in other words, the first element of this deque), or returns
 null if this deque is empty.

 This method is equivalent to Deque.pollFirst().

Specified by:
poll in interface Deque<E>
Specified by:
poll in interface Queue<E>
Returns:
the first element of this deque, or null if
         this deque is empty


"
5,ConcurrentLinkedDeque,5,E peek(),True,"Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty.","

peek
public E peek()
Description copied from interface: Deque
Retrieves, but does not remove, the head of the queue represented by
 this deque (in other words, the first element of this deque), or
 returns null if this deque is empty.

 This method is equivalent to Deque.peekFirst().

Specified by:
peek in interface Deque<E>
Specified by:
peek in interface Queue<E>
Returns:
the head of the queue represented by this deque, or
         null if this deque is empty


"
6,ConcurrentLinkedQueue,1,boolean add(E e),True,Inserts the specified element at the tail of this queue.,"

add
public boolean add(E e)
Inserts the specified element at the tail of this queue.
 As the queue is unbounded, this method will never throw
 IllegalStateException or return false.

Specified by:
add in interface Collection<E>
Specified by:
add in interface Queue<E>
Overrides:
add in class AbstractQueue<E>
Parameters:
e - the element to add
Returns:
true (as specified by Collection.add(E))
Throws:
NullPointerException - if the specified element is null


"
6,ConcurrentLinkedQueue,2,boolean offer(E e),True,Inserts the specified element at the tail of this queue.,"

offer
public boolean offer(E e)
Inserts the specified element at the tail of this queue.
 As the queue is unbounded, this method will never return false.

Specified by:
offer in interface Queue<E>
Parameters:
e - the element to add
Returns:
true (as specified by Queue.offer(E))
Throws:
NullPointerException - if the specified element is null


"
6,ConcurrentLinkedQueue,3,E remove(),False,,NULL
6,ConcurrentLinkedQueue,4,E poll(),True,"Retrieves and removes the head of this queue, or returns null if this queue is empty.","

poll
public E poll()
Description copied from interface: Queue
Retrieves and removes the head of this queue,
 or returns null if this queue is empty.

Specified by:
poll in interface Queue<E>
Returns:
the head of this queue, or null if this queue is empty


"
6,ConcurrentLinkedQueue,5,E peek(),True,"Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.","

peek
public E peek()
Description copied from interface: Queue
Retrieves, but does not remove, the head of this queue,
 or returns null if this queue is empty.

Specified by:
peek in interface Queue<E>
Returns:
the head of this queue, or null if this queue is empty


"
7,ConcurrentSkipListMap,1,boolean add(E e),False,,NULL
7,ConcurrentSkipListMap,2,"boolean addIfAbsent(K key, V value)",False,,NULL
7,ConcurrentSkipListMap,3,void clear(),True,Removes all of the mappings from this map.,"

clear
public void clear()
Removes all of the mappings from this map.

Specified by:
clear in interface Map<K,V>
Overrides:
clear in class AbstractMap<K,V>


"
7,ConcurrentSkipListMap,4,boolean containsKey(Object key),True,Returns true if this map contains a mapping for the specified key.,"

containsKey
public boolean containsKey(Object key)
Returns true if this map contains a mapping for the specified
 key.

Specified by:
containsKey in interface Map<K,V>
Overrides:
containsKey in class AbstractMap<K,V>
Parameters:
key - key whose presence in this map is to be tested
Returns:
true if this map contains a mapping for the specified key
Throws:
ClassCastException - if the specified key cannot be compared
         with the keys currently in the map
NullPointerException - if the specified key is null


"
7,ConcurrentSkipListMap,5,boolean containsValue(Object value),True,Returns true if this map maps one or more keys to the specified value.,"

containsValue
public boolean containsValue(Object value)
Returns true if this map maps one or more keys to the
 specified value.  This operation requires time linear in the
 map size. Additionally, it is possible for the map to change
 during execution of this method, in which case the returned
 result may be inaccurate.

Specified by:
containsValue in interface Map<K,V>
Overrides:
containsValue in class AbstractMap<K,V>
Parameters:
value - value whose presence in this map is to be tested
Returns:
true if a mapping to value exists;
         false otherwise
Throws:
NullPointerException - if the specified value is null


"
8,ConcurrentSkipListSet,1,boolean add(E e),True,Adds the specified element to this set if it is not already present.,"

add
public boolean add(E e)
Adds the specified element to this set if it is not already present.
 More formally, adds the specified element e to this set if
 the set contains no element e2 such that e.equals(e2).
 If this set already contains the element, the call leaves the set
 unchanged and returns false.

Specified by:
add in interface Collection<E>
Specified by:
add in interface Set<E>
Overrides:
add in class AbstractCollection<E>
Parameters:
e - element to be added to this set
Returns:
true if this set did not already contain the
         specified element
Throws:
ClassCastException - if e cannot be compared
         with the elements currently in this set
NullPointerException - if the specified element is null


"
8,ConcurrentSkipListSet,2,void clear(),True,Removes all of the elements from this set.,"

clear
public void clear()
Removes all of the elements from this set.

Specified by:
clear in interface Collection<E>
Specified by:
clear in interface Set<E>
Overrides:
clear in class AbstractCollection<E>


"
8,ConcurrentSkipListSet,3,boolean contains(Object o),True,Returns true if this set contains the specified element.,"

contains
public boolean contains(Object o)
Returns true if this set contains the specified element.
 More formally, returns true if and only if this set
 contains an element e such that o.equals(e).

Specified by:
contains in interface Collection<E>
Specified by:
contains in interface Set<E>
Overrides:
contains in class AbstractCollection<E>
Parameters:
o - object to be checked for containment in this set
Returns:
true if this set contains the specified element
Throws:
ClassCastException - if the specified element cannot be
         compared with the elements currently in this set
NullPointerException - if the specified element is null


"
8,ConcurrentSkipListSet,4,boolean remove(Object o),True,Removes the specified element from this set if it is present.,"

remove
public boolean remove(Object o)
Removes the specified element from this set if it is present.
 More formally, removes an element e such that
 o.equals(e), if this set contains such an element.
 Returns true if this set contained the element (or
 equivalently, if this set changed as a result of the call).
 (This set will not contain the element once the call returns.)

Specified by:
remove in interface Collection<E>
Specified by:
remove in interface Set<E>
Overrides:
remove in class AbstractCollection<E>
Parameters:
o - object to be removed from this set, if present
Returns:
true if this set contained the specified element
Throws:
ClassCastException - if o cannot be compared
         with the elements currently in this set
NullPointerException - if the specified element is null


"
8,ConcurrentSkipListSet,5,int size(),True,Returns the number of elements in this set.,"

size
public int size()
Returns the number of elements in this set.  If this set
 contains more than Integer.MAX_VALUE elements, it
 returns Integer.MAX_VALUE.

 Beware that, unlike in most collections, this method is
 NOT a constant-time operation. Because of the
 asynchronous nature of these sets, determining the current
 number of elements requires traversing them all to count them.
 Additionally, it is possible for the size to change during
 execution of this method, in which case the returned result
 will be inaccurate. Thus, this method is typically not very
 useful in concurrent applications.

Specified by:
size in interface Collection<E>
Specified by:
size in interface Set<E>
Specified by:
size in class AbstractCollection<E>
Returns:
the number of elements in this set


"
9,CopyOnWriteArrayList,1,boolean add(E e),True,Appends the specified element to the end of this list.,"

add
public boolean add(E e)
Appends the specified element to the end of this list.

Specified by:
add in interface Collection<E>
Specified by:
add in interface List<E>
Parameters:
e - element to be appended to this list
Returns:
true (as specified by Collection.add(E))


"
9,CopyOnWriteArrayList,2,"void add(int index, E element)",True,Inserts the specified element at the specified position in this list.,"

add
public void add(int index,
                E element)
Inserts the specified element at the specified position in this
 list. Shifts the element currently at that position (if any) and
 any subsequent elements to the right (adds one to their indices).

Specified by:
add in interface List<E>
Parameters:
index - index at which the specified element is to be inserted
element - element to be inserted
Throws:
IndexOutOfBoundsException - if the index is out of range
         (index < 0 || index > size())


"
9,CopyOnWriteArrayList,3,void clear(),True,Removes all of the elements from this list.,"

clear
public void clear()
Removes all of the elements from this list.
 The list will be empty after this call returns.

Specified by:
clear in interface Collection<E>
Specified by:
clear in interface List<E>


"
9,CopyOnWriteArrayList,4,boolean contains(Object o),True,Returns true if this list contains the specified element.,"

contains
public boolean contains(Object o)
Returns true if this list contains the specified element.
 More formally, returns true if and only if this list contains
 at least one element e such that
 (o==null ? e==null : o.equals(e)).

Specified by:
contains in interface Collection<E>
Specified by:
contains in interface List<E>
Parameters:
o - element whose presence in this list is to be tested
Returns:
true if this list contains the specified element


"
9,CopyOnWriteArrayList,5,E get(int index),True,Returns the element at the specified position in this list.,"

get
public E get(int index)
Returns the element at the specified position in this list.

Specified by:
get in interface List<E>
Parameters:
index - index of the element to return
Returns:
the element at the specified position in this list
Throws:
IndexOutOfBoundsException - if the index is out of range
         (index < 0 || index >= size())


"
9,CopyOnWriteArrayList,6,int indexOf(Object o),True,"Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.","

indexOf
public int indexOf(Object o)
Returns the index of the first occurrence of the specified element
 in this list, or -1 if this list does not contain the element.
 More formally, returns the lowest index i such that
 (o==null ? get(i)==null : o.equals(get(i))),
 or -1 if there is no such index.

Specified by:
indexOf in interface List<E>
Parameters:
o - element to search for
Returns:
the index of the first occurrence of the specified element in
         this list, or -1 if this list does not contain the element


"
9,CopyOnWriteArrayList,7,boolean isEmpty(),True,Returns true if this list contains no elements.,"

isEmpty
public boolean isEmpty()
Returns true if this list contains no elements.

Specified by:
isEmpty in interface Collection<E>
Specified by:
isEmpty in interface List<E>
Returns:
true if this list contains no elements


"
9,CopyOnWriteArrayList,8,E remove(int index),True,Removes the element at the specified position in this list.,"

remove
public E remove(int index)
Removes the element at the specified position in this list.
 Shifts any subsequent elements to the left (subtracts one from their
 indices).  Returns the element that was removed from the list.

Specified by:
remove in interface List<E>
Parameters:
index - the index of the element to be removed
Returns:
the element previously at the specified position
Throws:
IndexOutOfBoundsException - if the index is out of range
         (index < 0 || index >= size())


"
9,CopyOnWriteArrayList,9,boolean remove(Object o),True,"Removes the first occurrence of the specified element from this list, if it is present.","

remove
public boolean remove(Object o)
Removes the first occurrence of the specified element from this list,
 if it is present.  If this list does not contain the element, it is
 unchanged.  More formally, removes the element with the lowest index
 i such that
 (o==null ? get(i)==null : o.equals(get(i)))
 (if such an element exists).  Returns true if this list
 contained the specified element (or equivalently, if this list
 changed as a result of the call).

Specified by:
remove in interface Collection<E>
Specified by:
remove in interface List<E>
Parameters:
o - element to be removed from this list, if present
Returns:
true if this list contained the specified element


"
9,CopyOnWriteArrayList,10,"E set(int index, E element)",True,Replaces the element at the specified position in this list with the specified element.,"

set
public E set(int index,
             E element)
Replaces the element at the specified position in this list with the
 specified element.

Specified by:
set in interface List<E>
Parameters:
index - index of the element to replace
element - element to be stored at the specified position
Returns:
the element previously at the specified position
Throws:
IndexOutOfBoundsException - if the index is out of range
         (index < 0 || index >= size())


"
9,CopyOnWriteArrayList,11,int size(),True,Returns the number of elements in this list.,"

size
public int size()
Returns the number of elements in this list.

Specified by:
size in interface Collection<E>
Specified by:
size in interface List<E>
Returns:
the number of elements in this list


"
9,CopyOnWriteArrayList,12,Object[] toArray(),True,Returns an array containing all of the elements in this list in proper sequence (from first to last element).,"

toArray
public Object[] toArray()
Returns an array containing all of the elements in this list
 in proper sequence (from first to last element).

 The returned array will be ""safe"" in that no references to it are
 maintained by this list.  (In other words, this method must allocate
 a new array).  The caller is thus free to modify the returned array.

 This method acts as bridge between array-based and collection-based
 APIs.

Specified by:
toArray in interface Collection<E>
Specified by:
toArray in interface List<E>
Returns:
an array containing all the elements in this list
See Also:
Arrays.asList(Object[])


"
9,CopyOnWriteArrayList,13,<T> T[] toArray(T[] a),True,Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.,"

toArray
public <T> T[] toArray(T[] a)
Returns an array containing all of the elements in this list in
 proper sequence (from first to last element); the runtime type of
 the returned array is that of the specified array.  If the list fits
 in the specified array, it is returned therein.  Otherwise, a new
 array is allocated with the runtime type of the specified array and
 the size of this list.

 If this list fits in the specified array with room to spare
 (i.e., the array has more elements than this list), the element in
 the array immediately following the end of the list is set to
 null.  (This is useful in determining the length of this
 list only if the caller knows that this list does not contain
 any null elements.)

 Like the toArray() method, this method acts as bridge between
 array-based and collection-based APIs.  Further, this method allows
 precise control over the runtime type of the output array, and may,
 under certain circumstances, be used to save allocation costs.

 Suppose x is a list known to contain only strings.
 The following code can be used to dump the list into a newly
 allocated array of String:

    String[] y = x.toArray(new String[0]);

 Note that toArray(new Object[0]) is identical in function to
 toArray().

Specified by:
toArray in interface Collection<E>
Specified by:
toArray in interface List<E>
Type Parameters:
T - the runtime type of the array to contain the collection
Parameters:
a - the array into which the elements of the list are to
          be stored, if it is big enough; otherwise, a new array of the
          same runtime type is allocated for this purpose.
Returns:
an array containing all the elements in this list
Throws:
ArrayStoreException - if the runtime type of the specified array
         is not a supertype of the runtime type of every element in
         this list
NullPointerException - if the specified array is null


"
9,CopyOnWriteArrayList,14,boolean addIfAbsent(E e),True,"Appends the element, if not present.","

addIfAbsent
public boolean addIfAbsent(E e)
Appends the element, if not present.

Parameters:
e - element to be added to this list, if absent
Returns:
true if the element was added


"
9,CopyOnWriteArrayList,15,boolean removeIfPresent(Object o),False,,NULL
9,CopyOnWriteArrayList,16,void replaceAll(UnaryOperator<E> operator),True,Replaces each element of this list with the result of applying the operator to that element.,"

replaceAll
public void replaceAll(UnaryOperator<E> operator)
Description copied from interface: List
Replaces each element of this list with the result of applying the
 operator to that element.  Errors or runtime exceptions thrown by
 the operator are relayed to the caller.

Specified by:
replaceAll in interface List<E>
Parameters:
operator - the operator to apply to each element


"
9,CopyOnWriteArrayList,17,void sort(Comparator<? super E> c),True,Sorts this list according to the order induced by the specified Comparator.,"

sort
public void sort(Comparator<? super E> c)
Description copied from interface: List
Sorts this list according to the order induced by the specified
 Comparator.

 All elements in this list must be mutually comparable using the
 specified comparator (that is, c.compare(e1, e2) must not throw
 a ClassCastException for any elements e1 and e2
 in the list).

 If the specified comparator is null then all elements in this
 list must implement the Comparable interface and the elements'
 natural ordering should be used.

 This list must be modifiable, but need not be resizable.

Specified by:
sort in interface List<E>
Parameters:
c - the Comparator used to compare list elements.
          A null value indicates that the elements'
          natural ordering should be used


"
9,CopyOnWriteArrayList,18,void trimToSize(),False,,NULL
9,CopyOnWriteArrayList,19,boolean containsAll(Collection<?> c),True,Returns true if this list contains all of the elements of the specified collection.,"

containsAll
public boolean containsAll(Collection<?> c)
Returns true if this list contains all of the elements of the
 specified collection.

Specified by:
containsAll in interface Collection<E>
Specified by:
containsAll in interface List<E>
Parameters:
c - collection to be checked for containment in this list
Returns:
true if this list contains all of the elements of the
         specified collection
Throws:
NullPointerException - if the specified collection is null
See Also:
contains(Object)


"
9,CopyOnWriteArrayList,20,boolean removeAll(Collection<?> c),True,Removes from this list all of its elements that are contained in the specified collection.,"

removeAll
public boolean removeAll(Collection<?> c)
Removes from this list all of its elements that are contained in
 the specified collection. This is a particularly expensive operation
 in this class because of the need for an internal temporary array.

Specified by:
removeAll in interface Collection<E>
Specified by:
removeAll in interface List<E>
Parameters:
c - collection containing elements to be removed from this list
Returns:
true if this list changed as a result of the call
Throws:
ClassCastException - if the class of an element of this list
         is incompatible with the specified collection
         (optional)
NullPointerException - if this list contains a null element and the
         specified collection does not permit null elements
         (optional),
         or if the specified collection is null
See Also:
remove(Object)


"
9,CopyOnWriteArrayList,21,boolean retainAll(Collection<?> c),True,Retains only the elements in this list that are contained in the specified collection.,"

retainAll
public boolean retainAll(Collection<?> c)
Retains only the elements in this list that are contained in the
 specified collection.  In other words, removes from this list all of
 its elements that are not contained in the specified collection.

Specified by:
retainAll in interface Collection<E>
Specified by:
retainAll in interface List<E>
Parameters:
c - collection containing elements to be retained in this list
Returns:
true if this list changed as a result of the call
Throws:
ClassCastException - if the class of an element of this list
         is incompatible with the specified collection
         (optional)
NullPointerException - if this list contains a null element and the
         specified collection does not permit null elements
         (optional),
         or if the specified collection is null
See Also:
remove(Object)


"
9,CopyOnWriteArrayList,22,void addAll(Collection<? extends E> c),False,,NULL
9,CopyOnWriteArrayList,23,"void addAll(int index, Collection<? extends E> c)",False,,NULL
9,CopyOnWriteArrayList,24,boolean removeIf(Predicate<? super E> filter),True,Removes all of the elements of this collection that satisfy the given predicate.,"

removeIf
public boolean removeIf(Predicate<? super E> filter)
Description copied from interface: Collection
Removes all of the elements of this collection that satisfy the given
 predicate.  Errors or runtime exceptions thrown during iteration or by
 the predicate are relayed to the caller.

Specified by:
removeIf in interface Collection<E>
Parameters:
filter - a predicate which returns true for elements to be
        removed
Returns:
true if any elements were removed


"
9,CopyOnWriteArrayList,25,"void replaceAll(BiFunction<? super E,? super E,? extends E> function)",False,,NULL
9,CopyOnWriteArrayList,26,void forEach(Consumer<? super E> action),True,Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.,"

forEach
public void forEach(Consumer<? super E> action)
Description copied from interface: Iterable
Performs the given action for each element of the Iterable
 until all elements have been processed or the action throws an
 exception.  Unless otherwise specified by the implementing class,
 actions are performed in the order of iteration (if an iteration order
 is specified).  Exceptions thrown by the action are relayed to the
 caller.

Specified by:
forEach in interface Iterable<E>
Parameters:
action - The action to be performed for each element


"
9,CopyOnWriteArrayList,27,Spliterator<E> spliterator(),True,Returns a Spliterator over the elements in this list.,"

spliterator
public Spliterator<E> spliterator()
Returns a Spliterator over the elements in this list.

 The Spliterator reports Spliterator.IMMUTABLE,
 Spliterator.ORDERED, Spliterator.SIZED, and
 Spliterator.SUBSIZED.

 The spliterator provides a snapshot of the state of the list
 when the spliterator was constructed. No synchronization is needed while
 operating on the spliterator.

Specified by:
spliterator in interface Iterable<E>
Specified by:
spliterator in interface Collection<E>
Specified by:
spliterator in interface List<E>
Returns:
a Spliterator over the elements in this list
Since:
1.8


"
9,CopyOnWriteArrayList,28,Stream<E> stream(),False,,NULL
9,CopyOnWriteArrayList,29,Stream<E> parallelStream(),False,,NULL
9,CopyOnWriteArrayList,30,void forEachOrdered(Consumer<? super E> action),False,,NULL
10,CopyOnWriteArraySet,1,boolean add(E e),True,Adds the specified element to this set if it is not already present.,"

add
public boolean add(E e)
Adds the specified element to this set if it is not already present.
 More formally, adds the specified element e to this set if
 the set contains no element e2 such that
 (e==null ? e2==null : e.equals(e2)).
 If this set already contains the element, the call leaves the set
 unchanged and returns false.

Specified by:
add in interface Collection<E>
Specified by:
add in interface Set<E>
Overrides:
add in class AbstractCollection<E>
Parameters:
e - element to be added to this set
Returns:
true if this set did not already contain the specified
         element


"
10,CopyOnWriteArraySet,2,boolean addAll(Collection<? extends E> c),True,Adds all of the elements in the specified collection to this set if they're not already present.,"

addAll
public boolean addAll(Collection<? extends E> c)
Adds all of the elements in the specified collection to this set if
 they're not already present.  If the specified collection is also a
 set, the addAll operation effectively modifies this set so
 that its value is the union of the two sets.  The behavior of
 this operation is undefined if the specified collection is modified
 while the operation is in progress.

Specified by:
addAll in interface Collection<E>
Specified by:
addAll in interface Set<E>
Overrides:
addAll in class AbstractCollection<E>
Parameters:
c - collection containing elements to be added to this set
Returns:
true if this set changed as a result of the call
Throws:
NullPointerException - if the specified collection is null
See Also:
add(Object)


"
10,CopyOnWriteArraySet,3,void clear(),True,Removes all of the elements from this set.,"

clear
public void clear()
Removes all of the elements from this set.
 The set will be empty after this call returns.

Specified by:
clear in interface Collection<E>
Specified by:
clear in interface Set<E>
Overrides:
clear in class AbstractCollection<E>


"
10,CopyOnWriteArraySet,4,boolean contains(Object o),True,Returns true if this set contains the specified element.,"

contains
public boolean contains(Object o)
Returns true if this set contains the specified element.
 More formally, returns true if and only if this set
 contains an element e such that
 (o==null ? e==null : o.equals(e)).

Specified by:
contains in interface Collection<E>
Specified by:
contains in interface Set<E>
Overrides:
contains in class AbstractCollection<E>
Parameters:
o - element whose presence in this set is to be tested
Returns:
true if this set contains the specified element


"
10,CopyOnWriteArraySet,5,boolean containsAll(Collection<?> c),True,Returns true if this set contains all of the elements of the specified collection.,"

containsAll
public boolean containsAll(Collection<?> c)
Returns true if this set contains all of the elements of the
 specified collection.  If the specified collection is also a set, this
 method returns true if it is a subset of this set.

Specified by:
containsAll in interface Collection<E>
Specified by:
containsAll in interface Set<E>
Overrides:
containsAll in class AbstractCollection<E>
Parameters:
c - collection to be checked for containment in this set
Returns:
true if this set contains all of the elements of the
         specified collection
Throws:
NullPointerException - if the specified collection is null
See Also:
contains(Object)


"
10,CopyOnWriteArraySet,6,boolean isEmpty(),True,Returns true if this set contains no elements.,"

isEmpty
public boolean isEmpty()
Returns true if this set contains no elements.

Specified by:
isEmpty in interface Collection<E>
Specified by:
isEmpty in interface Set<E>
Overrides:
isEmpty in class AbstractCollection<E>
Returns:
true if this set contains no elements


"
10,CopyOnWriteArraySet,7,Iterator<E> iterator(),True,Returns an iterator over the elements contained in this set in the order in which these elements were added.,"

iterator
public Iterator<E> iterator()
Returns an iterator over the elements contained in this set
 in the order in which these elements were added.

 The returned iterator provides a snapshot of the state of the set
 when the iterator was constructed. No synchronization is needed while
 traversing the iterator. The iterator does NOT support the
 remove method.

Specified by:
iterator in interface Iterable<E>
Specified by:
iterator in interface Collection<E>
Specified by:
iterator in interface Set<E>
Specified by:
iterator in class AbstractCollection<E>
Returns:
an iterator over the elements in this set


"
10,CopyOnWriteArraySet,8,boolean remove(Object o),True,Removes the specified element from this set if it is present.,"

remove
public boolean remove(Object o)
Removes the specified element from this set if it is present.
 More formally, removes an element e such that
 (o==null ? e==null : o.equals(e)),
 if this set contains such an element.  Returns true if
 this set contained the element (or equivalently, if this set
 changed as a result of the call).  (This set will not contain the
 element once the call returns.)

Specified by:
remove in interface Collection<E>
Specified by:
remove in interface Set<E>
Overrides:
remove in class AbstractCollection<E>
Parameters:
o - object to be removed from this set, if present
Returns:
true if this set contained the specified element


"
10,CopyOnWriteArraySet,9,boolean removeAll(Collection<?> c),True,Removes from this set all of its elements that are contained in the specified collection.,"

removeAll
public boolean removeAll(Collection<?> c)
Removes from this set all of its elements that are contained in the
 specified collection.  If the specified collection is also a set,
 this operation effectively modifies this set so that its value is the
 asymmetric set difference of the two sets.

Specified by:
removeAll in interface Collection<E>
Specified by:
removeAll in interface Set<E>
Overrides:
removeAll in class AbstractSet<E>
Parameters:
c - collection containing elements to be removed from this set
Returns:
true if this set changed as a result of the call
Throws:
ClassCastException - if the class of an element of this set
         is incompatible with the specified collection (optional)
NullPointerException - if this set contains a null element and the
         specified collection does not permit null elements (optional),
         or if the specified collection is null
See Also:
remove(Object)


"
10,CopyOnWriteArraySet,10,boolean retainAll(Collection<?> c),True,Retains only the elements in this set that are contained in the specified collection.,"

retainAll
public boolean retainAll(Collection<?> c)
Retains only the elements in this set that are contained in the
 specified collection.  In other words, removes from this set all of
 its elements that are not contained in the specified collection.  If
 the specified collection is also a set, this operation effectively
 modifies this set so that its value is the intersection of the
 two sets.

Specified by:
retainAll in interface Collection<E>
Specified by:
retainAll in interface Set<E>
Overrides:
retainAll in class AbstractCollection<E>
Parameters:
c - collection containing elements to be retained in this set
Returns:
true if this set changed as a result of the call
Throws:
ClassCastException - if the class of an element of this set
         is incompatible with the specified collection (optional)
NullPointerException - if this set contains a null element and the
         specified collection does not permit null elements (optional),
         or if the specified collection is null
See Also:
remove(Object)


"
10,CopyOnWriteArraySet,11,int size(),True,Returns the number of elements in this set.,"

size
public int size()
Returns the number of elements in this set.

Specified by:
size in interface Collection<E>
Specified by:
size in interface Set<E>
Specified by:
size in class AbstractCollection<E>
Returns:
the number of elements in this set


"
10,CopyOnWriteArraySet,12,Object[] toArray(),True,Returns an array containing all of the elements in this set.,"

toArray
public Object[] toArray()
Returns an array containing all of the elements in this set.
 If this set makes any guarantees as to what order its elements
 are returned by its iterator, this method must return the
 elements in the same order.

 The returned array will be ""safe"" in that no references to it
 are maintained by this set.  (In other words, this method must
 allocate a new array even if this set is backed by an array).
 The caller is thus free to modify the returned array.

 This method acts as bridge between array-based and collection-based
 APIs.

Specified by:
toArray in interface Collection<E>
Specified by:
toArray in interface Set<E>
Overrides:
toArray in class AbstractCollection<E>
Returns:
an array containing all the elements in this set


"
10,CopyOnWriteArraySet,13,<T> T[] toArray(T[] a),True,Returns an array containing all of the elements in this set; the runtime type of the returned array is that of the specified array.,"

toArray
public <T> T[] toArray(T[] a)
Returns an array containing all of the elements in this set; the
 runtime type of the returned array is that of the specified array.
 If the set fits in the specified array, it is returned therein.
 Otherwise, a new array is allocated with the runtime type of the
 specified array and the size of this set.

 If this set fits in the specified array with room to spare
 (i.e., the array has more elements than this set), the element in
 the array immediately following the end of the set is set to
 null.  (This is useful in determining the length of this
 set only if the caller knows that this set does not contain
 any null elements.)

 If this set makes any guarantees as to what order its elements
 are returned by its iterator, this method must return the elements
 in the same order.

 Like the toArray() method, this method acts as bridge between
 array-based and collection-based APIs.  Further, this method allows
 precise control over the runtime type of the output array, and may,
 under certain circumstances, be used to save allocation costs.

 Suppose x is a set known to contain only strings.
 The following code can be used to dump the set into a newly allocated
 array of String:

    String[] y = x.toArray(new String[0]);

 Note that toArray(new Object[0]) is identical in function to
 toArray().

Specified by:
toArray in interface Collection<E>
Specified by:
toArray in interface Set<E>
Overrides:
toArray in class AbstractCollection<E>
Type Parameters:
T - the runtime type of the array to contain the collection
Parameters:
a - the array into which the elements of this set are to be
        stored, if it is big enough; otherwise, a new array of the same
        runtime type is allocated for this purpose.
Returns:
an array containing all the elements in this set
Throws:
ArrayStoreException - if the runtime type of the specified array
         is not a supertype of the runtime type of every element in this
         set
NullPointerException - if the specified array is null


"
10,CopyOnWriteArraySet,14,boolean equals(Object o),True,Compares the specified object with this set for equality.,"

equals
public boolean equals(Object o)
Compares the specified object with this set for equality.
 Returns true if the specified object is the same object
 as this object, or if it is also a Set and the elements
 returned by an iterator over the
 specified set are the same as the elements returned by an
 iterator over this set.  More formally, the two iterators are
 considered to return the same elements if they return the same
 number of elements and for every element e1 returned by
 the iterator over the specified set, there is an element
 e2 returned by the iterator over this set such that
 (e1==null ? e2==null : e1.equals(e2)).

Specified by:
equals in interface Collection<E>
Specified by:
equals in interface Set<E>
Overrides:
equals in class AbstractSet<E>
Parameters:
o - object to be compared for equality with this set
Returns:
true if the specified object is equal to this set
See Also:
Object.hashCode(), 
HashMap


"
10,CopyOnWriteArraySet,15,int hashCode(),False,,NULL
10,CopyOnWriteArraySet,16,String toString(),False,,NULL
11,CountDownLatch,1,CountDownLatch(int count),False,,NULL
11,CountDownLatch,2,void await(),True,"Causes the current thread to wait until the latch has counted down to zero, unless the thread is interrupted.","

await
public void await()
           throws InterruptedException
Causes the current thread to wait until the latch has counted down to
 zero, unless the thread is interrupted.

 If the current count is zero then this method returns immediately.

 If the current count is greater than zero then the current
 thread becomes disabled for thread scheduling purposes and lies
 dormant until one of two things happen:
 
The count reaches zero due to invocations of the
 countDown() method; or
 Some other thread interrupts
 the current thread.
 
If the current thread:
 
has its interrupted status set on entry to this method; or
 is interrupted while waiting,
 
 then InterruptedException is thrown and the current thread's
 interrupted status is cleared.

Throws:
InterruptedException - if the current thread is interrupted
         while waiting


"
11,CountDownLatch,3,"boolean await(long timeout, TimeUnit unit)",True,"Causes the current thread to wait until the latch has counted down to zero, unless the thread is interrupted, or the specified waiting time elapses.","

await
public boolean await(long timeout,
                     TimeUnit unit)
              throws InterruptedException
Causes the current thread to wait until the latch has counted down to
 zero, unless the thread is interrupted,
 or the specified waiting time elapses.

 If the current count is zero then this method returns immediately
 with the value true.

 If the current count is greater than zero then the current
 thread becomes disabled for thread scheduling purposes and lies
 dormant until one of three things happen:
 
The count reaches zero due to invocations of the
 countDown() method; or
 Some other thread interrupts
 the current thread; or
 The specified waiting time elapses.
 
If the count reaches zero then the method returns with the
 value true.

 If the current thread:
 
has its interrupted status set on entry to this method; or
 is interrupted while waiting,
 
 then InterruptedException is thrown and the current thread's
 interrupted status is cleared.

 If the specified waiting time elapses then the value false
 is returned.  If the time is less than or equal to zero, the method
 will not wait at all.

Parameters:
timeout - the maximum time to wait
unit - the time unit of the timeout argument
Returns:
true if the count reached zero and false
         if the waiting time elapsed before the count reached zero
Throws:
InterruptedException - if the current thread is interrupted
         while waiting


"
11,CountDownLatch,4,void countDown(),True,"Decrements the count of the latch, releasing all waiting threads if the count reaches zero.","

countDown
public void countDown()
Decrements the count of the latch, releasing all waiting threads if
 the count reaches zero.

 If the current count is greater than zero then it is decremented.
 If the new count is zero then all waiting threads are re-enabled for
 thread scheduling purposes.

 If the current count equals zero then nothing happens.

"
11,CountDownLatch,5,long getCount(),True,Returns the current count.,"

getCount
public long getCount()
Returns the current count.

 This method is typically used for debugging and testing purposes.

Returns:
the current count


"
12,CountedCompleter,1,CountedCompleter(),False,,NULL
12,CountedCompleter,2,void addToCounter(long value),False,,NULL
12,CountedCompleter,3,long getCounter(),False,,NULL
12,CountedCompleter,4,void reset(),False,,NULL
12,CountedCompleter,5,void fireCompletionAction(),False,,NULL
13,CyclicBarrier,1,CyclicBarrier(int parties),False,,NULL
13,CyclicBarrier,2,int await(),True,Waits until all parties have invoked await on this barrier.,"

await
public int await()
          throws InterruptedException,
                 BrokenBarrierException
Waits until all parties have invoked
 await on this barrier.

 If the current thread is not the last to arrive then it is
 disabled for thread scheduling purposes and lies dormant until
 one of the following things happens:
 
The last thread arrives; or
 Some other thread interrupts
 the current thread; or
 Some other thread interrupts
 one of the other waiting threads; or
 Some other thread times out while waiting for barrier; or
 Some other thread invokes reset() on this barrier.
 
If the current thread:
 
has its interrupted status set on entry to this method; or
 is interrupted while waiting
 
 then InterruptedException is thrown and the current thread's
 interrupted status is cleared.

 If the barrier is reset() while any thread is waiting,
 or if the barrier is broken when
 await is invoked, or while any thread is waiting, then
 BrokenBarrierException is thrown.

 If any thread is interrupted while waiting,
 then all other waiting threads will throw
 BrokenBarrierException and the barrier is placed in the broken
 state.

 If the current thread is the last thread to arrive, and a
 non-null barrier action was supplied in the constructor, then the
 current thread runs the action before allowing the other threads to
 continue.
 If an exception occurs during the barrier action then that exception
 will be propagated in the current thread and the barrier is placed in
 the broken state.

Returns:
the arrival index of the current thread, where index
         getParties() - 1 indicates the first
         to arrive and zero indicates the last to arrive
Throws:
InterruptedException - if the current thread was interrupted
         while waiting
BrokenBarrierException - if another thread was
         interrupted or timed out while the current thread was
         waiting, or the barrier was reset, or the barrier was
         broken when await was called, or the barrier
         action (if present) failed due to an exception


"
13,CyclicBarrier,3,"int await(long timeout, TimeUnit unit)",True,"Waits until all parties have invoked await on this barrier, or the specified waiting time elapses.","

await
public int await(long timeout,
                 TimeUnit unit)
          throws InterruptedException,
                 BrokenBarrierException,
                 TimeoutException
Waits until all parties have invoked
 await on this barrier, or the specified waiting time elapses.

 If the current thread is not the last to arrive then it is
 disabled for thread scheduling purposes and lies dormant until
 one of the following things happens:
 
The last thread arrives; or
 The specified timeout elapses; or
 Some other thread interrupts
 the current thread; or
 Some other thread interrupts
 one of the other waiting threads; or
 Some other thread times out while waiting for barrier; or
 Some other thread invokes reset() on this barrier.
 
If the current thread:
 
has its interrupted status set on entry to this method; or
 is interrupted while waiting
 
 then InterruptedException is thrown and the current thread's
 interrupted status is cleared.

 If the specified waiting time elapses then TimeoutException
 is thrown. If the time is less than or equal to zero, the
 method will not wait at all.

 If the barrier is reset() while any thread is waiting,
 or if the barrier is broken when
 await is invoked, or while any thread is waiting, then
 BrokenBarrierException is thrown.

 If any thread is interrupted while
 waiting, then all other waiting threads will throw BrokenBarrierException and the barrier is placed in the broken
 state.

 If the current thread is the last thread to arrive, and a
 non-null barrier action was supplied in the constructor, then the
 current thread runs the action before allowing the other threads to
 continue.
 If an exception occurs during the barrier action then that exception
 will be propagated in the current thread and the barrier is placed in
 the broken state.

Parameters:
timeout - the time to wait for the barrier
unit - the time unit of the timeout parameter
Returns:
the arrival index of the current thread, where index
         getParties() - 1 indicates the first
         to arrive and zero indicates the last to arrive
Throws:
InterruptedException - if the current thread was interrupted
         while waiting
TimeoutException - if the specified timeout elapses.
         In this case the barrier will be broken.
BrokenBarrierException - if another thread was
         interrupted or timed out while the current thread was
         waiting, or the barrier was reset, or the barrier was broken
         when await was called, or the barrier action (if
         present) failed due to an exception


"
13,CyclicBarrier,4,int getNumberWaiting(),True,Returns the number of parties currently waiting at the barrier.,"

getNumberWaiting
public int getNumberWaiting()
Returns the number of parties currently waiting at the barrier.
 This method is primarily useful for debugging and assertions.

Returns:
the number of parties currently blocked in await()


"
13,CyclicBarrier,5,int getParties(),True,Returns the number of parties required to trip this barrier.,"

getParties
public int getParties()
Returns the number of parties required to trip this barrier.

Returns:
the number of parties required to trip this barrier


"
14,DelayQueue,1,boolean add(E e),True,Inserts the specified element into this delay queue.,"

add
public boolean add(E e)
Inserts the specified element into this delay queue.

Specified by:
add in interface Collection<E extends Delayed>
Specified by:
add in interface BlockingQueue<E extends Delayed>
Specified by:
add in interface Queue<E extends Delayed>
Overrides:
add in class AbstractQueue<E extends Delayed>
Parameters:
e - the element to add
Returns:
true (as specified by Collection.add(E))
Throws:
NullPointerException - if the specified element is null


"
14,DelayQueue,2,E take(),True,"Retrieves and removes the head of this queue, waiting if necessary until an element with an expired delay is available on this queue.","

take
public E take()
       throws InterruptedException
Retrieves and removes the head of this queue, waiting if necessary
 until an element with an expired delay is available on this queue.

Specified by:
take in interface BlockingQueue<E extends Delayed>
Returns:
the head of this queue
Throws:
InterruptedException - if interrupted while waiting


"
14,DelayQueue,3,E poll(),True,"Retrieves and removes the head of this queue, or returns null if this queue has no elements with an expired delay.","

poll
public E poll()
Retrieves and removes the head of this queue, or returns null
 if this queue has no elements with an expired delay.

Specified by:
poll in interface Queue<E extends Delayed>
Returns:
the head of this queue, or null if this
         queue has no elements with an expired delay


"
14,DelayQueue,4,E peek(),True,"Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.","

peek
public E peek()
Retrieves, but does not remove, the head of this queue, or
 returns null if this queue is empty.  Unlike
 poll, if no expired elements are available in the queue,
 this method returns the element that will expire next,
 if one exists.

Specified by:
peek in interface Queue<E extends Delayed>
Returns:
the head of this queue, or null if this
         queue is empty


"
14,DelayQueue,5,long size(),False,,NULL
15,Exchanger,1,V exchange(V x),True,"Waits for another thread to arrive at this exchange point (unless the current thread is interrupted), and then transfers the given object to it, receiving its object in return.","

exchange
public V exchange(V x)
           throws InterruptedException
Waits for another thread to arrive at this exchange point (unless
 the current thread is interrupted),
 and then transfers the given object to it, receiving its object
 in return.

 If another thread is already waiting at the exchange point then
 it is resumed for thread scheduling purposes and receives the object
 passed in by the current thread.  The current thread returns immediately,
 receiving the object passed to the exchange by that other thread.

 If no other thread is already waiting at the exchange then the
 current thread is disabled for thread scheduling purposes and lies
 dormant until one of two things happens:
 
Some other thread enters the exchange; or
 Some other thread interrupts
 the current thread.
 
If the current thread:
 
has its interrupted status set on entry to this method; or
 is interrupted while waiting
 for the exchange,
 
 then InterruptedException is thrown and the current thread's
 interrupted status is cleared.

Parameters:
x - the object to exchange
Returns:
the object provided by the other thread
Throws:
InterruptedException - if the current thread was
         interrupted while waiting


"
15,Exchanger,2,"V exchange(V x, long timeout, TimeUnit unit)",True,"Waits for another thread to arrive at this exchange point (unless the current thread is interrupted or the specified waiting time elapses), and then transfers the given object to it, receiving its object in return.","

exchange
public V exchange(V x,
                  long timeout,
                  TimeUnit unit)
           throws InterruptedException,
                  TimeoutException
Waits for another thread to arrive at this exchange point (unless
 the current thread is interrupted or
 the specified waiting time elapses), and then transfers the given
 object to it, receiving its object in return.

 If another thread is already waiting at the exchange point then
 it is resumed for thread scheduling purposes and receives the object
 passed in by the current thread.  The current thread returns immediately,
 receiving the object passed to the exchange by that other thread.

 If no other thread is already waiting at the exchange then the
 current thread is disabled for thread scheduling purposes and lies
 dormant until one of three things happens:
 
Some other thread enters the exchange; or
 Some other thread interrupts
 the current thread; or
 The specified waiting time elapses.
 
If the current thread:
 
has its interrupted status set on entry to this method; or
 is interrupted while waiting
 for the exchange,
 
 then InterruptedException is thrown and the current thread's
 interrupted status is cleared.

 If the specified waiting time elapses then TimeoutException is thrown.  If the time is less than or equal
 to zero, the method will not wait at all.

Parameters:
x - the object to exchange
timeout - the maximum time to wait
unit - the time unit of the timeout argument
Returns:
the object provided by the other thread
Throws:
InterruptedException - if the current thread was
         interrupted while waiting
TimeoutException - if the specified waiting time elapses
         before another thread enters the exchange


"
15,Exchanger,3,"V exchange(V x, long timeout)",False,,NULL
15,Exchanger,4,"V exchange(V x, long timeout, TimeUnit unit)",True,"Waits for another thread to arrive at this exchange point (unless the current thread is interrupted or the specified waiting time elapses), and then transfers the given object to it, receiving its object in return.","

exchange
public V exchange(V x,
                  long timeout,
                  TimeUnit unit)
           throws InterruptedException,
                  TimeoutException
Waits for another thread to arrive at this exchange point (unless
 the current thread is interrupted or
 the specified waiting time elapses), and then transfers the given
 object to it, receiving its object in return.

 If another thread is already waiting at the exchange point then
 it is resumed for thread scheduling purposes and receives the object
 passed in by the current thread.  The current thread returns immediately,
 receiving the object passed to the exchange by that other thread.

 If no other thread is already waiting at the exchange then the
 current thread is disabled for thread scheduling purposes and lies
 dormant until one of three things happens:
 
Some other thread enters the exchange; or
 Some other thread interrupts
 the current thread; or
 The specified waiting time elapses.
 
If the current thread:
 
has its interrupted status set on entry to this method; or
 is interrupted while waiting
 for the exchange,
 
 then InterruptedException is thrown and the current thread's
 interrupted status is cleared.

 If the specified waiting time elapses then TimeoutException is thrown.  If the time is less than or equal
 to zero, the method will not wait at all.

Parameters:
x - the object to exchange
timeout - the maximum time to wait
unit - the time unit of the timeout argument
Returns:
the object provided by the other thread
Throws:
InterruptedException - if the current thread was
         interrupted while waiting
TimeoutException - if the specified waiting time elapses
         before another thread enters the exchange


"
15,Exchanger,5,V exchange(V x),True,"Waits for another thread to arrive at this exchange point (unless the current thread is interrupted), and then transfers the given object to it, receiving its object in return.","

exchange
public V exchange(V x)
           throws InterruptedException
Waits for another thread to arrive at this exchange point (unless
 the current thread is interrupted),
 and then transfers the given object to it, receiving its object
 in return.

 If another thread is already waiting at the exchange point then
 it is resumed for thread scheduling purposes and receives the object
 passed in by the current thread.  The current thread returns immediately,
 receiving the object passed to the exchange by that other thread.

 If no other thread is already waiting at the exchange then the
 current thread is disabled for thread scheduling purposes and lies
 dormant until one of two things happens:
 
Some other thread enters the exchange; or
 Some other thread interrupts
 the current thread.
 
If the current thread:
 
has its interrupted status set on entry to this method; or
 is interrupted while waiting
 for the exchange,
 
 then InterruptedException is thrown and the current thread's
 interrupted status is cleared.

Parameters:
x - the object to exchange
Returns:
the object provided by the other thread
Throws:
InterruptedException - if the current thread was
         interrupted while waiting


"
16,ExecutorCompletionService,1,CompletionService(Executor executor),False,,NULL
16,ExecutorCompletionService,2,Future<V> submit(Callable<V> task),True,Submits a value-returning task for execution and returns a Future representing the pending results of the task.,"

submit
public Future<V> submit(Callable<V> task)
Description copied from interface: CompletionService
Submits a value-returning task for execution and returns a Future
 representing the pending results of the task.  Upon completion,
 this task may be taken or polled.

Specified by:
submit in interface CompletionService<V>
Parameters:
task - the task to submit
Returns:
a Future representing pending completion of the task


"
16,ExecutorCompletionService,3,Future<V> take(),True,"Retrieves and removes the Future representing the next completed task, waiting if none are yet present.","

take
public Future<V> take()
               throws InterruptedException
Description copied from interface: CompletionService
Retrieves and removes the Future representing the next
 completed task, waiting if none are yet present.

Specified by:
take in interface CompletionService<V>
Returns:
the Future representing the next completed task
Throws:
InterruptedException - if interrupted while waiting


"
16,ExecutorCompletionService,4,Future<V> poll(),True,"Retrieves and removes the Future representing the next completed task, or null if none are present.","

poll
public Future<V> poll()
Description copied from interface: CompletionService
Retrieves and removes the Future representing the next
 completed task, or null if none are present.

Specified by:
poll in interface CompletionService<V>
Returns:
the Future representing the next completed task, or
         null if none are present


"
16,ExecutorCompletionService,5,"Future<V> poll(long timeout, TimeUnit unit)",True,"Retrieves and removes the Future representing the next completed task, waiting if necessary up to the specified wait time if none are yet present.","

poll
public Future<V> poll(long timeout,
                      TimeUnit unit)
               throws InterruptedException
Description copied from interface: CompletionService
Retrieves and removes the Future representing the next
 completed task, waiting if necessary up to the specified wait
 time if none are yet present.

Specified by:
poll in interface CompletionService<V>
Parameters:
timeout - how long to wait before giving up, in units of
        unit
unit - a TimeUnit determining how to interpret the
        timeout parameter
Returns:
the Future representing the next completed task or
         null if the specified waiting time elapses
         before one is present
Throws:
InterruptedException - if interrupted while waiting


"
17,Executors,1,ExecutorService newFixedThreadPool(int nThreads),True,Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue.,"

newFixedThreadPool
public static ExecutorService newFixedThreadPool(int nThreads)
Creates a thread pool that reuses a fixed number of threads
 operating off a shared unbounded queue.  At any point, at most
 nThreads threads will be active processing tasks.
 If additional tasks are submitted when all threads are active,
 they will wait in the queue until a thread is available.
 If any thread terminates due to a failure during execution
 prior to shutdown, a new one will take its place if needed to
 execute subsequent tasks.  The threads in the pool will exist
 until it is explicitly shutdown.

Parameters:
nThreads - the number of threads in the pool
Returns:
the newly created thread pool
Throws:
IllegalArgumentException - if nThreads <= 0


"
17,Executors,2,ExecutorService newCachedThreadPool(),True,"Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available.","

newCachedThreadPool
public static ExecutorService newCachedThreadPool()
Creates a thread pool that creates new threads as needed, but
 will reuse previously constructed threads when they are
 available.  These pools will typically improve the performance
 of programs that execute many short-lived asynchronous tasks.
 Calls to execute will reuse previously constructed
 threads if available. If no existing thread is available, a new
 thread will be created and added to the pool. Threads that have
 not been used for sixty seconds are terminated and removed from
 the cache. Thus, a pool that remains idle for long enough will
 not consume any resources. Note that pools with similar
 properties but different details (for example, timeout parameters)
 may be created using ThreadPoolExecutor constructors.

Returns:
the newly created thread pool


"
17,Executors,3,ScheduledExecutorService newScheduledThreadPool(int corePoolSize),True,"Creates a thread pool that can schedule commands to run after a given delay, or to execute periodically.","

newScheduledThreadPool
public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)
Creates a thread pool that can schedule commands to run after a
 given delay, or to execute periodically.

Parameters:
corePoolSize - the number of threads to keep in the pool,
 even if they are idle
Returns:
a newly created scheduled thread pool
Throws:
IllegalArgumentException - if corePoolSize < 0


"
17,Executors,4,ExecutorService newSingleThreadExecutor(),True,Creates an Executor that uses a single worker thread operating off an unbounded queue.,"

newSingleThreadExecutor
public static ExecutorService newSingleThreadExecutor()
Creates an Executor that uses a single worker thread operating
 off an unbounded queue. (Note however that if this single
 thread terminates due to a failure during execution prior to
 shutdown, a new one will take its place if needed to execute
 subsequent tasks.)  Tasks are guaranteed to execute
 sequentially, and no more than one task will be active at any
 given time. Unlike the otherwise equivalent
 newFixedThreadPool(1) the returned executor is
 guaranteed not to be reconfigurable to use additional threads.

Returns:
the newly created single-threaded Executor


"
17,Executors,5,ExecutorService newWorkStealingPool(int parallelism),True,"Creates a thread pool that maintains enough threads to support the given parallelism level, and may use multiple queues to reduce contention.","

newWorkStealingPool
public static ExecutorService newWorkStealingPool(int parallelism)
Creates a thread pool that maintains enough threads to support
 the given parallelism level, and may use multiple queues to
 reduce contention. The parallelism level corresponds to the
 maximum number of threads actively engaged in, or available to
 engage in, task processing. The actual number of threads may
 grow and shrink dynamically. A work-stealing pool makes no
 guarantees about the order in which submitted tasks are
 executed.

Parameters:
parallelism - the targeted parallelism level
Returns:
the newly created thread pool
Throws:
IllegalArgumentException - if parallelism <= 0
Since:
1.8


"
18,ForkJoinPool,1,ForkJoinPool(),False,,NULL
18,ForkJoinPool,2,submit(ForkJoinTask<V> task),False,,NULL
18,ForkJoinPool,3,invoke(ForkJoinTask<V> task),False,,NULL
18,ForkJoinPool,4,execute(Runnable task),False,,NULL
18,ForkJoinPool,5,"execute(Runnable task, ForkJoinWorkerThread wt)",False,,NULL
19,ForkJoinTask,1,ForkJoinTask<V> fork(),True,"Arranges to asynchronously execute this task in the pool the current task is running in, if applicable, or using the ForkJoinPool.commonPool() if not inForkJoinPool().","

fork
public final ForkJoinTask<V> fork()
Arranges to asynchronously execute this task in the pool the
 current task is running in, if applicable, or using the ForkJoinPool.commonPool() if not inForkJoinPool().  While
 it is not necessarily enforced, it is a usage error to fork a
 task more than once unless it has completed and been
 reinitialized.  Subsequent modifications to the state of this
 task or any data it operates on are not necessarily
 consistently observable by any thread other than the one
 executing it unless preceded by a call to join() or
 related methods, or a call to isDone() returning true.

Returns:
this, to simplify usage


"
19,ForkJoinTask,2,V getRawResult(),True,"Returns the result that would be returned by join(), even if this task completed abnormally, or null if this task is not known to have been completed.","

getRawResult
public abstract V getRawResult()
Returns the result that would be returned by join(), even
 if this task completed abnormally, or null if this task
 is not known to have been completed.  This method is designed
 to aid debugging, as well as to support extensions. Its use in
 any other context is discouraged.

Returns:
the result, or null if not completed


"
19,ForkJoinTask,3,void setRawResult(V value),True,Forces the given value to be returned as a result.,"

setRawResult
protected abstract void setRawResult(V value)
Forces the given value to be returned as a result.  This method
 is designed to support extensions, and should not in general be
 called otherwise.

Parameters:
value - the value


"
19,ForkJoinTask,4,boolean isCompletedAbnormally(),True,Returns true if this task threw an exception or was cancelled.,"

isCompletedAbnormally
public final boolean isCompletedAbnormally()
Returns true if this task threw an exception or was cancelled.

Returns:
true if this task threw an exception or was cancelled


"
19,ForkJoinTask,5,boolean isCompletedNormally(),True,Returns true if this task completed without throwing an exception and was not cancelled.,"

isCompletedNormally
public final boolean isCompletedNormally()
Returns true if this task completed without throwing an
 exception and was not cancelled.

Returns:
true if this task completed without throwing an
 exception and was not cancelled


"
20,ForkJoinWorkerThread,1,ForkJoinWorkerThread(ForkJoinPool pool),False,,NULL
20,ForkJoinWorkerThread,2,void start(),False,,NULL
20,ForkJoinWorkerThread,3,void stop(),False,,NULL
20,ForkJoinWorkerThread,4,void interrupt(),False,,NULL
20,ForkJoinWorkerThread,5,boolean isInterrupted(),False,,NULL
20,ForkJoinWorkerThread,6,ForkJoinPool getPool(),True,Returns the pool hosting this thread.,"

getPool
public ForkJoinPool getPool()
Returns the pool hosting this thread.

Returns:
the pool


"
20,ForkJoinWorkerThread,7,void setPool(ForkJoinPool pool),False,,NULL
20,ForkJoinWorkerThread,8,boolean isIdle(),False,,NULL
20,ForkJoinWorkerThread,9,boolean isRunning(),False,,NULL
20,ForkJoinWorkerThread,10,boolean isQueued(),False,,NULL
20,ForkJoinWorkerThread,11,boolean isQueued(ForkJoinTask<?> task),False,,NULL
20,ForkJoinWorkerThread,12,boolean isQueued(ForkJoinPool pool),False,,NULL
20,ForkJoinWorkerThread,13,"boolean isQueued(ForkJoinPool pool, ForkJoinTask<?> task)",False,,NULL
20,ForkJoinWorkerThread,14,"boolean isQueued(ForkJoinTask<?> task, boolean isAbsolute)",False,,NULL
20,ForkJoinWorkerThread,15,"boolean isQueued(ForkJoinPool pool, ForkJoinTask<?> task, boolean isAbsolute)",False,,NULL
20,ForkJoinWorkerThread,16,"boolean isQueued(ForkJoinTask<?> task, long timeout, TimeUnit unit)",False,,NULL
20,ForkJoinWorkerThread,17,"boolean isQueued(ForkJoinPool pool, ForkJoinTask<?> task, long timeout, TimeUnit unit)",False,,NULL
20,ForkJoinWorkerThread,18,"boolean isQueued(ForkJoinTask<?> task, long timeout, TimeUnit unit, boolean isAbsolute)",False,,NULL
20,ForkJoinWorkerThread,19,"boolean isQueued(ForkJoinPool pool, ForkJoinTask<?> task, long timeout, TimeUnit unit, boolean isAbsolute)",False,,NULL
21,FutureTask,1,boolean cancel(boolean mayInterruptIfRunning),True,Attempts to cancel execution of this task.,"

cancel
public boolean cancel(boolean mayInterruptIfRunning)
Description copied from interface: Future
Attempts to cancel execution of this task.  This attempt will
 fail if the task has already completed, has already been cancelled,
 or could not be cancelled for some other reason. If successful,
 and this task has not started when cancel is called,
 this task should never run.  If the task has already started,
 then the mayInterruptIfRunning parameter determines
 whether the thread executing this task should be interrupted in
 an attempt to stop the task.

 After this method returns, subsequent calls to Future.isDone() will
 always return true.  Subsequent calls to Future.isCancelled()
 will always return true if this method returned true.

Specified by:
cancel in interface Future<V>
Parameters:
mayInterruptIfRunning - true if the thread executing this
 task should be interrupted; otherwise, in-progress tasks are allowed
 to complete
Returns:
false if the task could not be cancelled,
 typically because it has already completed normally;
 true otherwise


"
21,FutureTask,2,boolean isCancelled(),True,Returns true if this task was cancelled before it completed normally.,"

isCancelled
public boolean isCancelled()
Description copied from interface: Future
Returns true if this task was cancelled before it completed
 normally.

Specified by:
isCancelled in interface Future<V>
Returns:
true if this task was cancelled before it completed


"
21,FutureTask,3,boolean isDone(),True,Returns true if this task completed.,"

isDone
public boolean isDone()
Description copied from interface: Future
Returns true if this task completed.

 Completion may be due to normal termination, an exception, or
 cancellation -- in all of these cases, this method will return
 true.

Specified by:
isDone in interface Future<V>
Returns:
true if this task completed


"
21,FutureTask,4,V get(),True,"Waits if necessary for the computation to complete, and then retrieves its result.","

get
public V get()
      throws InterruptedException,
             ExecutionException
Description copied from interface: Future
Waits if necessary for the computation to complete, and then
 retrieves its result.

Specified by:
get in interface Future<V>
Returns:
the computed result
Throws:
CancellationException - if the computation was cancelled
InterruptedException - if the current thread was interrupted
 while waiting
ExecutionException - if the computation threw an
 exception


"
21,FutureTask,5,"V get(long timeout, TimeUnit unit)",True,"Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available.","

get
public V get(long timeout,
             TimeUnit unit)
      throws InterruptedException,
             ExecutionException,
             TimeoutException
Description copied from interface: Future
Waits if necessary for at most the given time for the computation
 to complete, and then retrieves its result, if available.

Specified by:
get in interface Future<V>
Parameters:
timeout - the maximum time to wait
unit - the time unit of the timeout argument
Returns:
the computed result
Throws:
CancellationException - if the computation was cancelled
InterruptedException - if the current thread was interrupted
 while waiting
ExecutionException - if the computation threw an
 exception
TimeoutException - if the wait timed out


"
22,LinkedBlockingDeque,1,boolean add(E e),True,Inserts the specified element at the end of this deque unless it would violate capacity restrictions.,"

add
public boolean add(E e)
Inserts the specified element at the end of this deque unless it would
 violate capacity restrictions.  When using a capacity-restricted deque,
 it is generally preferable to use method offer.

 This method is equivalent to addLast(E).

Specified by:
add in interface Collection<E>
Specified by:
add in interface BlockingDeque<E>
Specified by:
add in interface BlockingQueue<E>
Specified by:
add in interface Deque<E>
Specified by:
add in interface Queue<E>
Overrides:
add in class AbstractQueue<E>
Parameters:
e - the element to add
Returns:
true (as specified by Collection.add(E))
Throws:
IllegalStateException - if this deque is full
NullPointerException - if the specified element is null


"
22,LinkedBlockingDeque,2,E remove(),True,Retrieves and removes the head of the queue represented by this deque.,"

remove
public E remove()
Retrieves and removes the head of the queue represented by this deque.
 This method differs from poll only in that it throws an
 exception if this deque is empty.

 This method is equivalent to removeFirst.

Specified by:
remove in interface BlockingDeque<E>
Specified by:
remove in interface Deque<E>
Specified by:
remove in interface Queue<E>
Overrides:
remove in class AbstractQueue<E>
Returns:
the head of the queue represented by this deque
Throws:
NoSuchElementException - if this deque is empty


"
22,LinkedBlockingDeque,3,E removeFirst(),True,Retrieves and removes the first element of this deque.,"

removeFirst
public E removeFirst()
Description copied from interface: Deque
Retrieves and removes the first element of this deque.  This method
 differs from pollFirst only in that it throws an
 exception if this deque is empty.

Specified by:
removeFirst in interface Deque<E>
Returns:
the head of this deque
Throws:
NoSuchElementException - if this deque is empty


"
22,LinkedBlockingDeque,4,E removeLast(),True,Retrieves and removes the last element of this deque.,"

removeLast
public E removeLast()
Description copied from interface: Deque
Retrieves and removes the last element of this deque.  This method
 differs from pollLast only in that it throws an
 exception if this deque is empty.

Specified by:
removeLast in interface Deque<E>
Returns:
the tail of this deque
Throws:
NoSuchElementException - if this deque is empty


"
22,LinkedBlockingDeque,5,boolean offer(E e),True,"Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available.","

offer
public boolean offer(E e)
Description copied from interface: BlockingDeque
Inserts the specified element into the queue represented by this deque
 (in other words, at the tail of this deque) if it is possible to do so
 immediately without violating capacity restrictions, returning
 true upon success and false if no space is currently
 available.  When using a capacity-restricted deque, this method is
 generally preferable to the BlockingDeque.add(E) method, which can fail to
 insert an element only by throwing an exception.

 This method is equivalent to offerLast.

Specified by:
offer in interface BlockingDeque<E>
Specified by:
offer in interface BlockingQueue<E>
Specified by:
offer in interface Deque<E>
Specified by:
offer in interface Queue<E>
Parameters:
e - the element to add
Returns:
true if the element was added to this queue, else
         false
Throws:
NullPointerException - if the specified element is null


"
22,LinkedBlockingDeque,6,E poll(),True,"Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty.","

poll
public E poll()
Description copied from interface: BlockingDeque
Retrieves and removes the head of the queue represented by this deque
 (in other words, the first element of this deque), or returns
 null if this deque is empty.

 This method is equivalent to Deque.pollFirst().

Specified by:
poll in interface BlockingDeque<E>
Specified by:
poll in interface Deque<E>
Specified by:
poll in interface Queue<E>
Returns:
the head of this deque, or null if this deque is empty


"
22,LinkedBlockingDeque,7,E peek(),True,"Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty.","

peek
public E peek()
Description copied from interface: BlockingDeque
Retrieves, but does not remove, the head of the queue represented by
 this deque (in other words, the first element of this deque), or
 returns null if this deque is empty.

 This method is equivalent to peekFirst.

Specified by:
peek in interface BlockingDeque<E>
Specified by:
peek in interface Deque<E>
Specified by:
peek in interface Queue<E>
Returns:
the head of this deque, or null if this deque is empty


"
22,LinkedBlockingDeque,8,E element(),True,"Retrieves, but does not remove, the head of the queue represented by this deque.","

element
public E element()
Retrieves, but does not remove, the head of the queue represented by
 this deque.  This method differs from peek only in that
 it throws an exception if this deque is empty.

 This method is equivalent to getFirst.

Specified by:
element in interface BlockingDeque<E>
Specified by:
element in interface Deque<E>
Specified by:
element in interface Queue<E>
Overrides:
element in class AbstractQueue<E>
Returns:
the head of the queue represented by this deque
Throws:
NoSuchElementException - if this deque is empty


"
22,LinkedBlockingDeque,9,boolean offerFirst(E e),True,"Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available.","

offerFirst
public boolean offerFirst(E e)
Description copied from interface: BlockingDeque
Inserts the specified element at the front of this deque if it is
 possible to do so immediately without violating capacity restrictions,
 returning true upon success and false if no space is
 currently available.
 When using a capacity-restricted deque, this method is generally
 preferable to the addFirst method, which can
 fail to insert an element only by throwing an exception.

Specified by:
offerFirst in interface BlockingDeque<E>
Specified by:
offerFirst in interface Deque<E>
Parameters:
e - the element to add
Returns:
true if the element was added to this deque, else
         false
Throws:
NullPointerException - if the specified element is null


"
22,LinkedBlockingDeque,10,boolean offerLast(E e),True,"Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available.","

offerLast
public boolean offerLast(E e)
Description copied from interface: BlockingDeque
Inserts the specified element at the end of this deque if it is
 possible to do so immediately without violating capacity restrictions,
 returning true upon success and false if no space is
 currently available.
 When using a capacity-restricted deque, this method is generally
 preferable to the addLast method, which can
 fail to insert an element only by throwing an exception.

Specified by:
offerLast in interface BlockingDeque<E>
Specified by:
offerLast in interface Deque<E>
Parameters:
e - the element to add
Returns:
true if the element was added to this deque, else
         false
Throws:
NullPointerException - if the specified element is null


"
22,LinkedBlockingDeque,11,E pollFirst(),True,"Retrieves and removes the first element of this deque, or returns null if this deque is empty.","

pollFirst
public E pollFirst()
Description copied from interface: Deque
Retrieves and removes the first element of this deque,
 or returns null if this deque is empty.

Specified by:
pollFirst in interface Deque<E>
Returns:
the head of this deque, or null if this deque is empty


"
22,LinkedBlockingDeque,12,E pollLast(),True,"Retrieves and removes the last element of this deque, or returns null if this deque is empty.","

pollLast
public E pollLast()
Description copied from interface: Deque
Retrieves and removes the last element of this deque,
 or returns null if this deque is empty.

Specified by:
pollLast in interface Deque<E>
Returns:
the tail of this deque, or null if this deque is empty


"
22,LinkedBlockingDeque,13,E getFirst(),True,"Retrieves, but does not remove, the first element of this deque.","

getFirst
public E getFirst()
Description copied from interface: Deque
Retrieves, but does not remove, the first element of this deque.

 This method differs from peekFirst only in that it
 throws an exception if this deque is empty.

Specified by:
getFirst in interface Deque<E>
Returns:
the head of this deque
Throws:
NoSuchElementException - if this deque is empty


"
22,LinkedBlockingDeque,14,E getLast(),True,"Retrieves, but does not remove, the last element of this deque.","

getLast
public E getLast()
Description copied from interface: Deque
Retrieves, but does not remove, the last element of this deque.
 This method differs from peekLast only in that it
 throws an exception if this deque is empty.

Specified by:
getLast in interface Deque<E>
Returns:
the tail of this deque
Throws:
NoSuchElementException - if this deque is empty


"
22,LinkedBlockingDeque,15,E peekFirst(),True,"Retrieves, but does not remove, the first element of this deque, or returns null if this deque is empty.","

peekFirst
public E peekFirst()
Description copied from interface: Deque
Retrieves, but does not remove, the first element of this deque,
 or returns null if this deque is empty.

Specified by:
peekFirst in interface Deque<E>
Returns:
the head of this deque, or null if this deque is empty


"
22,LinkedBlockingDeque,16,E peekLast(),True,"Retrieves, but does not remove, the last element of this deque, or returns null if this deque is empty.","

peekLast
public E peekLast()
Description copied from interface: Deque
Retrieves, but does not remove, the last element of this deque,
 or returns null if this deque is empty.

Specified by:
peekLast in interface Deque<E>
Returns:
the tail of this deque, or null if this deque is empty


"
22,LinkedBlockingDeque,17,E removeFirstOccurrence(Object o),False,,NULL
22,LinkedBlockingDeque,18,E removeLastOccurrence(Object o),False,,NULL
22,LinkedBlockingDeque,19,boolean removeFirstOccurrence(Object o),True,Removes the first occurrence of the specified element from this deque.,"

removeFirstOccurrence
public boolean removeFirstOccurrence(Object o)
Description copied from interface: BlockingDeque
Removes the first occurrence of the specified element from this deque.
 If the deque does not contain the element, it is unchanged.
 More formally, removes the first element e such that
 o.equals(e) (if such an element exists).
 Returns true if this deque contained the specified element
 (or equivalently, if this deque changed as a result of the call).

Specified by:
removeFirstOccurrence in interface BlockingDeque<E>
Specified by:
removeFirstOccurrence in interface Deque<E>
Parameters:
o - element to be removed from this deque, if present
Returns:
true if an element was removed as a result of this call


"
22,LinkedBlockingDeque,20,boolean removeLastOccurrence(Object o),True,Removes the last occurrence of the specified element from this deque.,"

removeLastOccurrence
public boolean removeLastOccurrence(Object o)
Description copied from interface: BlockingDeque
Removes the last occurrence of the specified element from this deque.
 If the deque does not contain the element, it is unchanged.
 More formally, removes the last element e such that
 o.equals(e) (if such an element exists).
 Returns true if this deque contained the specified element
 (or equivalently, if this deque changed as a result of the call).

Specified by:
removeLastOccurrence in interface BlockingDeque<E>
Specified by:
removeLastOccurrence in interface Deque<E>
Parameters:
o - element to be removed from this deque, if present
Returns:
true if an element was removed as a result of this call


"
23,LinkedBlockingQueue,1,boolean add(E e),False,,NULL
23,LinkedBlockingQueue,2,E take(),True,"Retrieves and removes the head of this queue, waiting if necessary until an element becomes available.","

take
public E take()
       throws InterruptedException
Description copied from interface: BlockingQueue
Retrieves and removes the head of this queue, waiting if necessary
 until an element becomes available.

Specified by:
take in interface BlockingQueue<E>
Returns:
the head of this queue
Throws:
InterruptedException - if interrupted while waiting


"
23,LinkedBlockingQueue,3,boolean offer(E e),True,"Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning true upon success and false if this queue is full.","

offer
public boolean offer(E e)
Inserts the specified element at the tail of this queue if it is
 possible to do so immediately without exceeding the queue's capacity,
 returning true upon success and false if this queue
 is full.
 When using a capacity-restricted queue, this method is generally
 preferable to method add, which can fail to
 insert an element only by throwing an exception.

Specified by:
offer in interface BlockingQueue<E>
Specified by:
offer in interface Queue<E>
Parameters:
e - the element to add
Returns:
true if the element was added to this queue, else
         false
Throws:
NullPointerException - if the specified element is null


"
23,LinkedBlockingQueue,4,E poll(),True,"Retrieves and removes the head of this queue, or returns null if this queue is empty.","

poll
public E poll()
Description copied from interface: Queue
Retrieves and removes the head of this queue,
 or returns null if this queue is empty.

Specified by:
poll in interface Queue<E>
Returns:
the head of this queue, or null if this queue is empty


"
23,LinkedBlockingQueue,5,boolean isEmpty(),False,,NULL
24,LinkedTransferQueue,1,boolean add(E e),True,Inserts the specified element at the tail of this queue.,"

add
public boolean add(E e)
Inserts the specified element at the tail of this queue.
 As the queue is unbounded, this method will never throw
 IllegalStateException or return false.

Specified by:
add in interface Collection<E>
Specified by:
add in interface BlockingQueue<E>
Specified by:
add in interface Queue<E>
Overrides:
add in class AbstractQueue<E>
Parameters:
e - the element to add
Returns:
true (as specified by Collection.add(E))
Throws:
NullPointerException - if the specified element is null


"
24,LinkedTransferQueue,2,E take(),True,"Retrieves and removes the head of this queue, waiting if necessary until an element becomes available.","

take
public E take()
       throws InterruptedException
Description copied from interface: BlockingQueue
Retrieves and removes the head of this queue, waiting if necessary
 until an element becomes available.

Specified by:
take in interface BlockingQueue<E>
Returns:
the head of this queue
Throws:
InterruptedException - if interrupted while waiting


"
24,LinkedTransferQueue,3,boolean tryTransfer(E e),True,"Transfers the element to a waiting consumer immediately, if possible.","

tryTransfer
public boolean tryTransfer(E e)
Transfers the element to a waiting consumer immediately, if possible.

 More precisely, transfers the specified element immediately
 if there exists a consumer already waiting to receive it (in
 take() or timed poll),
 otherwise returning false without enqueuing the element.

Specified by:
tryTransfer in interface TransferQueue<E>
Parameters:
e - the element to transfer
Returns:
true if the element was transferred, else
         false
Throws:
NullPointerException - if the specified element is null


"
24,LinkedTransferQueue,4,E poll(),True,"Retrieves and removes the head of this queue, or returns null if this queue is empty.","

poll
public E poll()
Description copied from interface: Queue
Retrieves and removes the head of this queue,
 or returns null if this queue is empty.

Specified by:
poll in interface Queue<E>
Returns:
the head of this queue, or null if this queue is empty


"
24,LinkedTransferQueue,5,boolean offer(E e),True,Inserts the specified element at the tail of this queue.,"

offer
public boolean offer(E e)
Inserts the specified element at the tail of this queue.
 As the queue is unbounded, this method will never return false.

Specified by:
offer in interface BlockingQueue<E>
Specified by:
offer in interface Queue<E>
Parameters:
e - the element to add
Returns:
true (as specified by Queue.offer(E))
Throws:
NullPointerException - if the specified element is null


"
25,Phaser,1,int register(),True,Adds a new unarrived party to this phaser.,"

register
public int register()
Adds a new unarrived party to this phaser.  If an ongoing
 invocation of onAdvance(int, int) is in progress, this method
 may await its completion before returning.  If this phaser has
 a parent, and this phaser previously had no registered parties,
 this child phaser is also registered with its parent. If
 this phaser is terminated, the attempt to register has
 no effect, and a negative value is returned.

Returns:
the arrival phase number to which this registration
 applied.  If this value is negative, then this phaser has
 terminated, in which case registration has no effect.
Throws:
IllegalStateException - if attempting to register more
 than the maximum supported number of parties


"
25,Phaser,2,int arrive(),True,"Arrives at this phaser, without waiting for others to arrive.","

arrive
public int arrive()
Arrives at this phaser, without waiting for others to arrive.

 It is a usage error for an unregistered party to invoke this
 method.  However, this error may result in an IllegalStateException only upon some subsequent operation on
 this phaser, if ever.

Returns:
the arrival phase number, or a negative value if terminated
Throws:
IllegalStateException - if not terminated and the number
 of unarrived parties would become negative


"
25,Phaser,3,int arriveAndAwaitAdvance(),True,Arrives at this phaser and awaits others.,"

arriveAndAwaitAdvance
public int arriveAndAwaitAdvance()
Arrives at this phaser and awaits others. Equivalent in effect
 to awaitAdvance(arrive()).  If you need to await with
 interruption or timeout, you can arrange this with an analogous
 construction using one of the other forms of the awaitAdvance method.  If instead you need to deregister upon
 arrival, use awaitAdvance(arriveAndDeregister()).

 It is a usage error for an unregistered party to invoke this
 method.  However, this error may result in an IllegalStateException only upon some subsequent operation on
 this phaser, if ever.

Returns:
the arrival phase number, or the (negative)
 current phase if terminated
Throws:
IllegalStateException - if not terminated and the number
 of unarrived parties would become negative


"
25,Phaser,4,int arriveAndDeregister(),True,Arrives at this phaser and deregisters from it without waiting for others to arrive.,"

arriveAndDeregister
public int arriveAndDeregister()
Arrives at this phaser and deregisters from it without waiting
 for others to arrive. Deregistration reduces the number of
 parties required to advance in future phases.  If this phaser
 has a parent, and deregistration causes this phaser to have
 zero parties, this phaser is also deregistered from its parent.

 It is a usage error for an unregistered party to invoke this
 method.  However, this error may result in an IllegalStateException only upon some subsequent operation on
 this phaser, if ever.

Returns:
the arrival phase number, or a negative value if terminated
Throws:
IllegalStateException - if not terminated and the number
 of registered or unarrived parties would become negative


"
25,Phaser,5,int getPhase(),True,Returns the current phase number.,"

getPhase
public final int getPhase()
Returns the current phase number. The maximum phase number is
 Integer.MAX_VALUE, after which it restarts at
 zero. Upon termination, the phase number is negative,
 in which case the prevailing phase prior to termination
 may be obtained via getPhase() + Integer.MIN_VALUE.

Returns:
the phase number, or a negative value if terminated


"
26,PriorityBlockingQueue,1,boolean add(E e),True,Inserts the specified element into this priority queue.,"

add
public boolean add(E e)
Inserts the specified element into this priority queue.

Specified by:
add in interface Collection<E>
Specified by:
add in interface BlockingQueue<E>
Specified by:
add in interface Queue<E>
Overrides:
add in class AbstractQueue<E>
Parameters:
e - the element to add
Returns:
true (as specified by Collection.add(E))
Throws:
ClassCastException - if the specified element cannot be compared
         with elements currently in the priority queue according to the
         priority queue's ordering
NullPointerException - if the specified element is null


"
26,PriorityBlockingQueue,2,E poll(),True,"Retrieves and removes the head of this queue, or returns null if this queue is empty.","

poll
public E poll()
Description copied from interface: Queue
Retrieves and removes the head of this queue,
 or returns null if this queue is empty.

Specified by:
poll in interface Queue<E>
Returns:
the head of this queue, or null if this queue is empty


"
26,PriorityBlockingQueue,3,E peek(),True,"Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.","

peek
public E peek()
Description copied from interface: Queue
Retrieves, but does not remove, the head of this queue,
 or returns null if this queue is empty.

Specified by:
peek in interface Queue<E>
Returns:
the head of this queue, or null if this queue is empty


"
26,PriorityBlockingQueue,4,boolean offer(E e),True,Inserts the specified element into this priority queue.,"

offer
public boolean offer(E e)
Inserts the specified element into this priority queue.
 As the queue is unbounded, this method will never return false.

Specified by:
offer in interface BlockingQueue<E>
Specified by:
offer in interface Queue<E>
Parameters:
e - the element to add
Returns:
true (as specified by Queue.offer(E))
Throws:
ClassCastException - if the specified element cannot be compared
         with elements currently in the priority queue according to the
         priority queue's ordering
NullPointerException - if the specified element is null


"
26,PriorityBlockingQueue,5,E take(),True,"Retrieves and removes the head of this queue, waiting if necessary until an element becomes available.","

take
public E take()
       throws InterruptedException
Description copied from interface: BlockingQueue
Retrieves and removes the head of this queue, waiting if necessary
 until an element becomes available.

Specified by:
take in interface BlockingQueue<E>
Returns:
the head of this queue
Throws:
InterruptedException - if interrupted while waiting


"
27,RecursiveAction,1,void compute(),True,The main computation performed by this task.,"

compute
protected abstract void compute()
The main computation performed by this task.

"
27,RecursiveAction,2,void join(),False,,NULL
27,RecursiveAction,3,boolean isCompletedNormally(),False,,NULL
27,RecursiveAction,4,boolean isDone(),False,,NULL
27,RecursiveAction,5,void cancel(boolean mayInterruptIfRunning),False,,NULL
28,RecursiveTask,1,V getRawResult(),True,"Returns the result that would be returned by ForkJoinTask.join(), even if this task completed abnormally, or null if this task is not known to have been completed.","

getRawResult
public final V getRawResult()
Description copied from class: ForkJoinTask
Returns the result that would be returned by ForkJoinTask.join(), even
 if this task completed abnormally, or null if this task
 is not known to have been completed.  This method is designed
 to aid debugging, as well as to support extensions. Its use in
 any other context is discouraged.

Specified by:
getRawResult in class ForkJoinTask<V>
Returns:
the result, or null if not completed


"
28,RecursiveTask,2,protected abstract V compute(),False,,NULL
28,RecursiveTask,3,void setRawResult(V value),True,Forces the given value to be returned as a result.,"

setRawResult
protected final void setRawResult(V value)
Description copied from class: ForkJoinTask
Forces the given value to be returned as a result.  This method
 is designed to support extensions, and should not in general be
 called otherwise.

Specified by:
setRawResult in class ForkJoinTask<V>
Parameters:
value - the value


"
28,RecursiveTask,4,final V get(),False,,NULL
28,RecursiveTask,5,"final V get(long timeout, TimeUnit unit)",False,,NULL
29,ScheduledThreadPoolExecutor,1,ScheduledThreadPoolExecutor(int corePoolSize),False,,NULL
29,ScheduledThreadPoolExecutor,2,"void schedule(Runnable command, long delay, TimeUnit unit)",False,,NULL
29,ScheduledThreadPoolExecutor,3,"ScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)",True,"Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given period; that is executions will commence after initialDelay then initialDelay+period, then initialDelay + 2 * period, and so on.","

scheduleAtFixedRate
public ScheduledFuture<?> scheduleAtFixedRate(Runnable command,
                                              long initialDelay,
                                              long period,
                                              TimeUnit unit)
Description copied from interface: ScheduledExecutorService
Creates and executes a periodic action that becomes enabled first
 after the given initial delay, and subsequently with the given
 period; that is executions will commence after
 initialDelay then initialDelay+period, then
 initialDelay + 2 * period, and so on.
 If any execution of the task
 encounters an exception, subsequent executions are suppressed.
 Otherwise, the task will only terminate via cancellation or
 termination of the executor.  If any execution of this task
 takes longer than its period, then subsequent executions
 may start late, but will not concurrently execute.

Specified by:
scheduleAtFixedRate in interface ScheduledExecutorService
Parameters:
command - the task to execute
initialDelay - the time to delay first execution
period - the period between successive executions
unit - the time unit of the initialDelay and period parameters
Returns:
a ScheduledFuture representing pending completion of
         the task, and whose get() method will throw an
         exception upon cancellation
Throws:
RejectedExecutionException - if the task cannot be
         scheduled for execution
NullPointerException - if command is null
IllegalArgumentException - if period less than or equal to zero


"
29,ScheduledThreadPoolExecutor,4,"ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit)",True,"Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given delay between the termination of one execution and the commencement of the next.","

scheduleWithFixedDelay
public ScheduledFuture<?> scheduleWithFixedDelay(Runnable command,
                                                 long initialDelay,
                                                 long delay,
                                                 TimeUnit unit)
Description copied from interface: ScheduledExecutorService
Creates and executes a periodic action that becomes enabled first
 after the given initial delay, and subsequently with the
 given delay between the termination of one execution and the
 commencement of the next.  If any execution of the task
 encounters an exception, subsequent executions are suppressed.
 Otherwise, the task will only terminate via cancellation or
 termination of the executor.

Specified by:
scheduleWithFixedDelay in interface ScheduledExecutorService
Parameters:
command - the task to execute
initialDelay - the time to delay first execution
delay - the delay between the termination of one
 execution and the commencement of the next
unit - the time unit of the initialDelay and delay parameters
Returns:
a ScheduledFuture representing pending completion of
         the task, and whose get() method will throw an
         exception upon cancellation
Throws:
RejectedExecutionException - if the task cannot be
         scheduled for execution
NullPointerException - if command is null
IllegalArgumentException - if delay less than or equal to zero


"
29,ScheduledThreadPoolExecutor,5,void shutdown(),True,"Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted.","

shutdown
public void shutdown()
Initiates an orderly shutdown in which previously submitted
 tasks are executed, but no new tasks will be accepted.
 Invocation has no additional effect if already shut down.

 This method does not wait for previously submitted tasks to
 complete execution.  Use awaitTermination
 to do that.

 If the ExecuteExistingDelayedTasksAfterShutdownPolicy
 has been set false, existing delayed tasks whose delays
 have not yet elapsed are cancelled.  And unless the ContinueExistingPeriodicTasksAfterShutdownPolicy has been set
 true, future executions of existing periodic tasks will
 be cancelled.

Specified by:
shutdown in interface ExecutorService
Overrides:
shutdown in class ThreadPoolExecutor
Throws:
SecurityException - if a security manager exists and
         shutting down this ExecutorService may manipulate
         threads that the caller is not permitted to modify
         because it does not hold RuntimePermission(""modifyThread""),
         or the security manager's checkAccess method
         denies access.


"
30,Semaphore,1,Semaphore(int permits),False,,NULL
30,Semaphore,2,void acquire(),True,"Acquires a permit from this semaphore, blocking until one is available, or the thread is interrupted.","

acquire
public void acquire()
             throws InterruptedException
Acquires a permit from this semaphore, blocking until one is
 available, or the thread is interrupted.

 Acquires a permit, if one is available and returns immediately,
 reducing the number of available permits by one.

 If no permit is available then the current thread becomes
 disabled for thread scheduling purposes and lies dormant until
 one of two things happens:
 
Some other thread invokes the release() method for this
 semaphore and the current thread is next to be assigned a permit; or
 Some other thread interrupts
 the current thread.
 
If the current thread:
 
has its interrupted status set on entry to this method; or
 is interrupted while waiting
 for a permit,
 
 then InterruptedException is thrown and the current thread's
 interrupted status is cleared.

Throws:
InterruptedException - if the current thread is interrupted


"
30,Semaphore,3,void acquire(int permits),True,"Acquires the given number of permits from this semaphore, blocking until all are available, or the thread is interrupted.","

acquire
public void acquire(int permits)
             throws InterruptedException
Acquires the given number of permits from this semaphore,
 blocking until all are available,
 or the thread is interrupted.

 Acquires the given number of permits, if they are available,
 and returns immediately, reducing the number of available permits
 by the given amount.

 If insufficient permits are available then the current thread becomes
 disabled for thread scheduling purposes and lies dormant until
 one of two things happens:
 
Some other thread invokes one of the release
 methods for this semaphore, the current thread is next to be assigned
 permits and the number of available permits satisfies this request; or
 Some other thread interrupts
 the current thread.
 
If the current thread:
 
has its interrupted status set on entry to this method; or
 is interrupted while waiting
 for a permit,
 
 then InterruptedException is thrown and the current thread's
 interrupted status is cleared.
 Any permits that were to be assigned to this thread are instead
 assigned to other threads trying to acquire permits, as if
 permits had been made available by a call to release().

Parameters:
permits - the number of permits to acquire
Throws:
InterruptedException - if the current thread is interrupted
IllegalArgumentException - if permits is negative


"
30,Semaphore,4,void release(),True,"Releases a permit, returning it to the semaphore.","

release
public void release()
Releases a permit, returning it to the semaphore.

 Releases a permit, increasing the number of available permits by
 one.  If any threads are trying to acquire a permit, then one is
 selected and given the permit that was just released.  That thread
 is (re)enabled for thread scheduling purposes.

 There is no requirement that a thread that releases a permit must
 have acquired that permit by calling acquire().
 Correct usage of a semaphore is established by programming convention
 in the application.

"
30,Semaphore,5,void release(int permits),True,"Releases the given number of permits, returning them to the semaphore.","

release
public void release(int permits)
Releases the given number of permits, returning them to the semaphore.

 Releases the given number of permits, increasing the number of
 available permits by that amount.
 If any threads are trying to acquire permits, then one
 is selected and given the permits that were just released.
 If the number of available permits satisfies that thread's request
 then that thread is (re)enabled for thread scheduling purposes;
 otherwise the thread will wait until sufficient permits are available.
 If there are still permits available
 after this thread's request has been satisfied, then those permits
 are assigned in turn to other threads trying to acquire permits.

 There is no requirement that a thread that releases a permit must
 have acquired that permit by calling acquire.
 Correct usage of a semaphore is established by programming convention
 in the application.

Parameters:
permits - the number of permits to release
Throws:
IllegalArgumentException - if permits is negative


"
31,SynchronousQueue,1,boolean offer(E e),True,"Inserts the specified element into this queue, if another thread is waiting to receive it.","

offer
public boolean offer(E e)
Inserts the specified element into this queue, if another thread is
 waiting to receive it.

Specified by:
offer in interface BlockingQueue<E>
Specified by:
offer in interface Queue<E>
Parameters:
e - the element to add
Returns:
true if the element was added to this queue, else
         false
Throws:
NullPointerException - if the specified element is null


"
31,SynchronousQueue,2,E take(),True,"Retrieves and removes the head of this queue, waiting if necessary for another thread to insert it.","

take
public E take()
       throws InterruptedException
Retrieves and removes the head of this queue, waiting if necessary
 for another thread to insert it.

Specified by:
take in interface BlockingQueue<E>
Returns:
the head of this queue
Throws:
InterruptedException - if interrupted while waiting


"
31,SynchronousQueue,3,E poll(),True,"Retrieves and removes the head of this queue, if another thread is currently making an element available.","

poll
public E poll()
Retrieves and removes the head of this queue, if another thread
 is currently making an element available.

Specified by:
poll in interface Queue<E>
Returns:
the head of this queue, or null if no
         element is available


"
31,SynchronousQueue,4,boolean isEmpty(),True,Always returns true.,"

isEmpty
public boolean isEmpty()
Always returns true.
 A SynchronousQueue has no internal capacity.

Specified by:
isEmpty in interface Collection<E>
Overrides:
isEmpty in class AbstractCollection<E>
Returns:
true


"
31,SynchronousQueue,5,int size(),True,Always returns zero.,"

size
public int size()
Always returns zero.
 A SynchronousQueue has no internal capacity.

Specified by:
size in interface Collection<E>
Specified by:
size in class AbstractCollection<E>
Returns:
zero


"
32,ThreadLocalRandom,1,int nextInt(),True,Returns a pseudorandom int value.,"

nextInt
public int nextInt()
Returns a pseudorandom int value.

Overrides:
nextInt in class Random
Returns:
a pseudorandom int value


"
32,ThreadLocalRandom,2,long nextLong(),True,Returns a pseudorandom long value.,"

nextLong
public long nextLong()
Returns a pseudorandom long value.

Overrides:
nextLong in class Random
Returns:
a pseudorandom long value


"
32,ThreadLocalRandom,3,double nextDouble(),True,Returns a pseudorandom double value between zero (inclusive) and one (exclusive).,"

nextDouble
public double nextDouble()
Returns a pseudorandom double value between zero
 (inclusive) and one (exclusive).

Overrides:
nextDouble in class Random
Returns:
a pseudorandom double value between zero
         (inclusive) and one (exclusive)
See Also:
Math.random()


"
32,ThreadLocalRandom,4,boolean nextBoolean(),True,Returns a pseudorandom boolean value.,"

nextBoolean
public boolean nextBoolean()
Returns a pseudorandom boolean value.

Overrides:
nextBoolean in class Random
Returns:
a pseudorandom boolean value


"
32,ThreadLocalRandom,5,float nextFloat(),True,Returns a pseudorandom float value between zero (inclusive) and one (exclusive).,"

nextFloat
public float nextFloat()
Returns a pseudorandom float value between zero
 (inclusive) and one (exclusive).

Overrides:
nextFloat in class Random
Returns:
a pseudorandom float value between zero
         (inclusive) and one (exclusive)


"
32,ThreadLocalRandom,6,int nextInt(int bound),True,Returns a pseudorandom int value between zero (inclusive) and the specified bound (exclusive).,"

nextInt
public int nextInt(int bound)
Returns a pseudorandom int value between zero (inclusive)
 and the specified bound (exclusive).

Overrides:
nextInt in class Random
Parameters:
bound - the upper bound (exclusive).  Must be positive.
Returns:
a pseudorandom int value between zero
         (inclusive) and the bound (exclusive)
Throws:
IllegalArgumentException - if bound is not positive


"
32,ThreadLocalRandom,7,long nextLong(long bound),True,Returns a pseudorandom long value between zero (inclusive) and the specified bound (exclusive).,"

nextLong
public long nextLong(long bound)
Returns a pseudorandom long value between zero (inclusive)
 and the specified bound (exclusive).

Parameters:
bound - the upper bound (exclusive).  Must be positive.
Returns:
a pseudorandom long value between zero
         (inclusive) and the bound (exclusive)
Throws:
IllegalArgumentException - if bound is not positive


"
32,ThreadLocalRandom,8,"double nextDouble(double origin, double bound)",True,Returns a pseudorandom double value between the specified origin (inclusive) and bound (exclusive).,"

nextDouble
public double nextDouble(double origin,
                         double bound)
Returns a pseudorandom double value between the specified
 origin (inclusive) and bound (exclusive).

Parameters:
origin - the least value returned
bound - the upper bound (exclusive)
Returns:
a pseudorandom double value between the origin
         (inclusive) and the bound (exclusive)
Throws:
IllegalArgumentException - if origin is greater than
         or equal to bound


"
32,ThreadLocalRandom,9,"float nextFloat(float origin, float bound)",False,,NULL
32,ThreadLocalRandom,10,void setSeed(long seed),True,Throws UnsupportedOperationException.,"

setSeed
public void setSeed(long seed)
Throws UnsupportedOperationException.  Setting seeds in
 this generator is not supported.

Overrides:
setSeed in class Random
Parameters:
seed - the initial seed
Throws:
UnsupportedOperationException - always


"
32,ThreadLocalRandom,11,long getSeed(),False,,NULL
32,ThreadLocalRandom,12,void setCurrent(ThreadLocalRandom newInstance),False,,NULL
32,ThreadLocalRandom,13,ThreadLocalRandom getInstance(),False,,NULL
32,ThreadLocalRandom,14,ThreadLocalRandom getInstance(ThreadLocalRandom.SeedGenerator seedGenerator),False,,NULL
32,ThreadLocalRandom,15,ThreadLocalRandom getInstance(long seed),False,,NULL
32,ThreadLocalRandom,16,"ThreadLocalRandom getInstance(ThreadLocalRandom.SeedGenerator seedGenerator, long streamId)",False,,NULL
32,ThreadLocalRandom,17,"ThreadLocalRandom getInstance(long seed, long streamId)",False,,NULL
32,ThreadLocalRandom,18,"ThreadLocalRandom getInstance(ThreadLocalRandom.SeedGenerator seedGenerator, long streamId, long multiplier, long addend)",False,,NULL
32,ThreadLocalRandom,19,"ThreadLocalRandom getInstance(long seed, long streamId, long multiplier, long addend)",False,,NULL
32,ThreadLocalRandom,20,"ThreadLocalRandom getInstance(ThreadLocalRandom.SeedGenerator seedGenerator, long streamId, long multiplier, long addend, long bufferSize)",False,,NULL
32,ThreadLocalRandom,21,"ThreadLocalRandom getInstance(long seed, long streamId, long multiplier, long addend, long bufferSize)",False,,NULL
33,ThreadPoolExecutor,1,int getCorePoolSize(),True,Returns the core number of threads.,"

getCorePoolSize
public int getCorePoolSize()
Returns the core number of threads.

Returns:
the core number of threads
See Also:
setCorePoolSize(int)


"
33,ThreadPoolExecutor,2,int getMaximumPoolSize(),True,Returns the maximum allowed number of threads.,"

getMaximumPoolSize
public int getMaximumPoolSize()
Returns the maximum allowed number of threads.

Returns:
the maximum allowed number of threads
See Also:
setMaximumPoolSize(int)


"
33,ThreadPoolExecutor,3,int getPoolSize(),True,Returns the current number of threads in the pool.,"

getPoolSize
public int getPoolSize()
Returns the current number of threads in the pool.

Returns:
the number of threads


"
33,ThreadPoolExecutor,4,int getActiveCount(),True,Returns the approximate number of threads that are actively executing tasks.,"

getActiveCount
public int getActiveCount()
Returns the approximate number of threads that are actively
 executing tasks.

Returns:
the number of threads


"
33,ThreadPoolExecutor,5,boolean isShutdown(),True,Returns true if this executor has been shut down.,"

isShutdown
public boolean isShutdown()
Description copied from interface: ExecutorService
Returns true if this executor has been shut down.

Returns:
true if this executor has been shut down


"
34,ThreadPoolExecutor.AbortPolicy,1,"void rejectedExecution(Runnable r, ThreadPoolExecutor e)",True,Always throws RejectedExecutionException.,"

rejectedExecution
public void rejectedExecution(Runnable r,
                              ThreadPoolExecutor e)
Always throws RejectedExecutionException.

Specified by:
rejectedExecution in interface RejectedExecutionHandler
Parameters:
r - the runnable task requested to be executed
e - the executor attempting to execute this task
Throws:
RejectedExecutionException - always


"
34,ThreadPoolExecutor.AbortPolicy,2,void execute(Runnable command),False,,NULL
34,ThreadPoolExecutor.AbortPolicy,3,Future<?> submit(Runnable task),False,,NULL
34,ThreadPoolExecutor.AbortPolicy,4,<T> Future<T> submit(Callable<T> task),False,,NULL
34,ThreadPoolExecutor.AbortPolicy,5,"void execute(Runnable command, long startTimeout)",False,,NULL
35,ThreadPoolExecutor.CallerRunsPolicy,1,"void rejectedExecution(Runnable r, ThreadPoolExecutor e)",True,"Executes task r in the caller's thread, unless the executor has been shut down, in which case the task is discarded.","

rejectedExecution
public void rejectedExecution(Runnable r,
                              ThreadPoolExecutor e)
Executes task r in the caller's thread, unless the executor
 has been shut down, in which case the task is discarded.

Specified by:
rejectedExecution in interface RejectedExecutionHandler
Parameters:
r - the runnable task requested to be executed
e - the executor attempting to execute this task


"
35,ThreadPoolExecutor.CallerRunsPolicy,2,"void rejectedExecution(Runnable r, ThreadPoolExecutor e, ThreadPoolExecutor.DiscardPolicy policy)",False,,NULL
35,ThreadPoolExecutor.CallerRunsPolicy,3,"void rejectedExecution(Runnable r, ThreadPoolExecutor e, ThreadPoolExecutor.DiscardOldestPolicy policy)",False,,NULL
35,ThreadPoolExecutor.CallerRunsPolicy,4,"void rejectedExecution(Runnable r, ThreadPoolExecutor e, RejectedExecutionHandler handler)",False,,NULL
35,ThreadPoolExecutor.CallerRunsPolicy,5,"void rejectedExecution(Runnable r, ThreadPoolExecutor e, ThreadPoolExecutor.CallerRunsPolicy policy)",False,,NULL
36,ThreadPoolExecutor.DiscardOldestPolicy,1,boolean add(E e),False,,NULL
36,ThreadPoolExecutor.DiscardOldestPolicy,2,void clear(),False,,NULL
36,ThreadPoolExecutor.DiscardOldestPolicy,3,boolean contains(Object o),False,,NULL
36,ThreadPoolExecutor.DiscardOldestPolicy,4,boolean isEmpty(),False,,NULL
36,ThreadPoolExecutor.DiscardOldestPolicy,5,int size(),False,,NULL
37,ThreadPoolExecutor.DiscardPolicy,1,"void rejectedExecution(Runnable r, ThreadPoolExecutor e)",True,"Does nothing, which has the effect of discarding task r.","

rejectedExecution
public void rejectedExecution(Runnable r,
                              ThreadPoolExecutor e)
Does nothing, which has the effect of discarding task r.

Specified by:
rejectedExecution in interface RejectedExecutionHandler
Parameters:
r - the runnable task requested to be executed
e - the executor attempting to execute this task


"
37,ThreadPoolExecutor.DiscardPolicy,2,boolean remove(Object o),False,,NULL
37,ThreadPoolExecutor.DiscardPolicy,3,boolean remove(int index),False,,NULL
37,ThreadPoolExecutor.DiscardPolicy,4,boolean removeAll(Collection<?> c),False,,NULL
37,ThreadPoolExecutor.DiscardPolicy,5,boolean retainAll(Collection<?> c),False,,NULL
