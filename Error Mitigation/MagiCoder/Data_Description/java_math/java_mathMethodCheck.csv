Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,BigDecimal,1,BigDecimal(String val),False,,NULL
0,BigDecimal,2,BigDecimal add(BigDecimal augend),True,"Returns a BigDecimal whose value is (this + augend), and whose scale is max(this.scale(), augend.scale()).","

add
public BigDecimal add(BigDecimal augend)
Returns a BigDecimal whose value is (this +
 augend), and whose scale is max(this.scale(),
 augend.scale()).

Parameters:
augend - value to be added to this BigDecimal.
Returns:
this + augend


"
0,BigDecimal,3,BigDecimal subtract(BigDecimal subtrahend),True,"Returns a BigDecimal whose value is (this - subtrahend), and whose scale is max(this.scale(), subtrahend.scale()).","

subtract
public BigDecimal subtract(BigDecimal subtrahend)
Returns a BigDecimal whose value is (this -
 subtrahend), and whose scale is max(this.scale(),
 subtrahend.scale()).

Parameters:
subtrahend - value to be subtracted from this BigDecimal.
Returns:
this - subtrahend


"
0,BigDecimal,4,BigDecimal multiply(BigDecimal multiplicand),True,"Returns a BigDecimal whose value is (this × multiplicand), and whose scale is (this.scale() + multiplicand.scale()).","

multiply
public BigDecimal multiply(BigDecimal multiplicand)
Returns a BigDecimal whose value is (this ×
 multiplicand), and whose scale is (this.scale() +
 multiplicand.scale()).

Parameters:
multiplicand - value to be multiplied by this BigDecimal.
Returns:
this * multiplicand


"
0,BigDecimal,5,"BigDecimal divide(BigDecimal divisor, int scale, int roundingMode)",True,"Returns a BigDecimal whose value is (this / divisor), and whose scale is as specified.","

divide
public BigDecimal divide(BigDecimal divisor,
                         int scale,
                         int roundingMode)
Returns a BigDecimal whose value is (this /
 divisor), and whose scale is as specified.  If rounding must
 be performed to generate a result with the specified scale, the
 specified rounding mode is applied.

 The new divide(BigDecimal, int, RoundingMode) method
 should be used in preference to this legacy method.

Parameters:
divisor - value by which this BigDecimal is to be divided.
scale - scale of the BigDecimal quotient to be returned.
roundingMode - rounding mode to apply.
Returns:
this / divisor
Throws:
ArithmeticException - if divisor is zero,
         roundingMode==ROUND_UNNECESSARY and
         the specified scale is insufficient to represent the result
         of the division exactly.
IllegalArgumentException - if roundingMode does not
         represent a valid rounding mode.
See Also:
ROUND_UP, 
ROUND_DOWN, 
ROUND_CEILING, 
ROUND_FLOOR, 
ROUND_HALF_UP, 
ROUND_HALF_DOWN, 
ROUND_HALF_EVEN, 
ROUND_UNNECESSARY


"
1,BigInteger,1,BigInteger(String val),False,,NULL
1,BigInteger,2,BigInteger add(BigInteger val),True,Returns a BigInteger whose value is (this + val).,"

add
public BigInteger add(BigInteger val)
Returns a BigInteger whose value is (this + val).

Parameters:
val - value to be added to this BigInteger.
Returns:
this + val


"
1,BigInteger,3,BigInteger subtract(BigInteger val),True,Returns a BigInteger whose value is (this - val).,"

subtract
public BigInteger subtract(BigInteger val)
Returns a BigInteger whose value is (this - val).

Parameters:
val - value to be subtracted from this BigInteger.
Returns:
this - val


"
1,BigInteger,4,BigInteger multiply(BigInteger val),True,Returns a BigInteger whose value is (this * val).,"

multiply
public BigInteger multiply(BigInteger val)
Returns a BigInteger whose value is (this * val).

Implementation Note:
An implementation may offer better algorithmic
 performance when val == this.
Parameters:
val - value to be multiplied by this BigInteger.
Returns:
this * val


"
1,BigInteger,5,BigInteger divide(BigInteger val),True,Returns a BigInteger whose value is (this / val).,"

divide
public BigInteger divide(BigInteger val)
Returns a BigInteger whose value is (this / val).

Parameters:
val - value by which this BigInteger is to be divided.
Returns:
this / val
Throws:
ArithmeticException - if val is zero.


"
1,BigInteger,6,BigInteger remainder(BigInteger val),True,Returns a BigInteger whose value is (this % val).,"

remainder
public BigInteger remainder(BigInteger val)
Returns a BigInteger whose value is (this % val).

Parameters:
val - value by which this BigInteger is to be divided, and the
         remainder computed.
Returns:
this % val
Throws:
ArithmeticException - if val is zero.


"
1,BigInteger,7,BigInteger pow(int exponent),True,Returns a BigInteger whose value is (thisexponent).,"

pow
public BigInteger pow(int exponent)
Returns a BigInteger whose value is (thisexponent).
 Note that exponent is an integer rather than a BigInteger.

Parameters:
exponent - exponent to which this BigInteger is to be raised.
Returns:
thisexponent
Throws:
ArithmeticException - exponent is negative.  (This would
         cause the operation to yield a non-integer value.)


"
1,BigInteger,8,int compareTo(BigInteger val),True,Compares this BigInteger with the specified BigInteger.,"

compareTo
public int compareTo(BigInteger val)
Compares this BigInteger with the specified BigInteger.  This
 method is provided in preference to individual methods for each
 of the six boolean comparison operators (<, ==,
 >, >=, !=, <=).  The suggested
 idiom for performing these comparisons is: (x.compareTo(y) <op> 0), where
 <op> is one of the six comparison operators.

Specified by:
compareTo in interface Comparable<BigInteger>
Parameters:
val - BigInteger to which this BigInteger is to be compared.
Returns:
-1, 0 or 1 as this BigInteger is numerically less than, equal
         to, or greater than val.


"
1,BigInteger,9,BigInteger nextProbablePrime(),True,Returns the first integer greater than this BigInteger that is probably prime.,"

nextProbablePrime
public BigInteger nextProbablePrime()
Returns the first integer greater than this BigInteger that
 is probably prime.  The probability that the number returned by this
 method is composite does not exceed 2-100. This method will
 never skip over a prime when searching: if it returns p, there
 is no prime q such that this < q < p.

Returns:
the first integer greater than this BigInteger that
         is probably prime.
Throws:
ArithmeticException - this < 0 or this is too large.
Since:
1.5


"
1,BigInteger,10,BigInteger gcd(BigInteger val),True,Returns a BigInteger whose value is the greatest common divisor of abs(this) and abs(val).,"

gcd
public BigInteger gcd(BigInteger val)
Returns a BigInteger whose value is the greatest common divisor of
 abs(this) and abs(val).  Returns 0 if
 this == 0 && val == 0.

Parameters:
val - value with which the GCD is to be computed.
Returns:
GCD(abs(this), abs(val))


"
2,MathContext,1,"MathContext(int precision, RoundingMode roundingMode)",False,,NULL
2,MathContext,2,MathContext(int precision),False,,NULL
2,MathContext,3,int getPrecision(),True,Returns the precision setting.,"

getPrecision
public int getPrecision()
Returns the precision setting.
 This value is always non-negative.

Returns:
an int which is the value of the precision
         setting


"
2,MathContext,4,RoundingMode getRoundingMode(),True,Returns the roundingMode setting.,"

getRoundingMode
public RoundingMode getRoundingMode()
Returns the roundingMode setting.
 This will be one of
 RoundingMode.CEILING,
 RoundingMode.DOWN,
 RoundingMode.FLOOR,
 RoundingMode.HALF_DOWN,
 RoundingMode.HALF_EVEN,
 RoundingMode.HALF_UP,
 RoundingMode.UNNECESSARY, or
 RoundingMode.UP.

Returns:
a RoundingMode object which is the value of the
         roundingMode setting


"
2,MathContext,5,boolean equals(Object obj),True,Compares this MathContext with the specified Object for equality.,"

equals
public boolean equals(Object x)
Compares this MathContext with the specified
 Object for equality.

Overrides:
equals in class Object
Parameters:
x - Object to which this MathContext is to
         be compared.
Returns:
true if and only if the specified Object is
         a MathContext object which has exactly the same
         settings as this object
See Also:
Object.hashCode(), 
HashMap


"
2,MathContext,6,int hashCode(),True,Returns the hash code for this MathContext.,"

hashCode
public int hashCode()
Returns the hash code for this MathContext.

Overrides:
hashCode in class Object
Returns:
hash code for this MathContext
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
2,MathContext,7,String toString(),True,Returns the string representation of this MathContext.,"

toString
public String toString()
Returns the string representation of this MathContext.
 The String returned represents the settings of the
 MathContext object as two space-delimited words
 (separated by a single space character, '\u0020',
 and with no leading or trailing white space), as follows:
 

 The string ""precision="", immediately followed
 by the value of the precision setting as a numeric string as if
 generated by the Integer.toString
 method.

 
 The string ""roundingMode="", immediately
 followed by the value of the roundingMode setting as a
 word.  This word will be the same as the name of the
 corresponding public constant in the RoundingMode
 enum.
 

 For example:
 
 precision=9 roundingMode=HALF_UP
 

 Additional words may be appended to the result of
 toString in the future if more properties are added to
 this class.

Overrides:
toString in class Object
Returns:
a String representing the context settings


"
