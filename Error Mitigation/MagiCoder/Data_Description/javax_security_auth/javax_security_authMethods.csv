ClassName,Method,Return Type,Description,Full Description
Policy,"getPermissions(Subject subject, CodeSource cs)",abstract PermissionCollection,Deprecated.,"

getPermissions
public abstract PermissionCollection getPermissions(Subject subject,
                                                    CodeSource cs)
Deprecated. 
Retrieve the Permissions granted to the Principals associated with
 the specified CodeSource.

 

Parameters:
subject - the Subject
                  whose associated Principals,
                  in conjunction with the provided
                  CodeSource, determines the Permissions
                  returned by this method.  This parameter
                  may be null. 
cs - the code specified by its CodeSource
                  that determines, in conjunction with the provided
                  Subject, the Permissions
                  returned by this method.  This parameter may be
                  null.
Returns:
the Collection of Permissions granted to all the
                  Subject and code specified in
                  the provided subject and cs
                  parameters.


"
Policy,getPolicy(),static Policy,Deprecated.,"

getPolicy
public static Policy getPolicy()
Deprecated. 
Returns the installed Policy object.
 This method first calls
 SecurityManager.checkPermission with the
 AuthPermission(""getPolicy"") permission
 to ensure the caller has permission to get the Policy object.

 

Returns:
the installed Policy.  The return value cannot be
          null.
Throws:
SecurityException - if the current thread does not
      have permission to get the Policy object.
See Also:
setPolicy(javax.security.auth.Policy)


"
Policy,refresh(),abstract void,Deprecated.,"

refresh
public abstract void refresh()
Deprecated. 
Refresh and reload the Policy.

 This method causes this object to refresh/reload its current
 Policy. This is implementation-dependent.
 For example, if the Policy object is stored in
 a file, calling refresh will cause the file to be re-read.

 

Throws:
SecurityException - if the caller does not have permission
                          to refresh the Policy.


"
Policy,setPolicy(Policy policy),static void,Deprecated.,"

setPolicy
public static void setPolicy(Policy policy)
Deprecated. 
Sets the system-wide Policy object. This method first calls
 SecurityManager.checkPermission with the
 AuthPermission(""setPolicy"")
 permission to ensure the caller has permission to set the Policy.

 

Parameters:
policy - the new system Policy object.
Throws:
SecurityException - if the current thread does not
          have permission to set the Policy.
See Also:
getPolicy()


"
PrivateCredentialPermission,equals(Object obj),boolean,Checks two PrivateCredentialPermission objects for equality.,"

equals
public boolean equals(Object obj)
Checks two PrivateCredentialPermission objects for
 equality.  Checks that obj is a
 PrivateCredentialPermission,
 and has the same credential class as this object,
 as well as the same Principals as this object.
 The order of the Principals in the respective Permission's
 target names is not relevant.

 

Specified by:
equals in class Permission
Parameters:
obj - the object we are testing for equality with this object.
Returns:
true if obj is a PrivateCredentialPermission,
          has the same credential class as this object,
          and has the same Principals as this object.
See Also:
Object.hashCode(), 
HashMap


"
PrivateCredentialPermission,getActions(),String,"Returns the ""canonical string representation"" of the actions.","

getActions
public String getActions()
Returns the ""canonical string representation"" of the actions.
 This method always returns the String, ""read"".

 

Specified by:
getActions in class Permission
Returns:
the actions (always returns ""read"").


"
PrivateCredentialPermission,getCredentialClass(),String,Returns the Class name of the Credential associated with this PrivateCredentialPermission.,"

getCredentialClass
public String getCredentialClass()
Returns the Class name of the Credential associated with this
 PrivateCredentialPermission.

 

Returns:
the Class name of the Credential associated with this
          PrivateCredentialPermission.


"
PrivateCredentialPermission,getPrincipals(),String[][],Returns the Principal classes and names associated with this PrivateCredentialPermission.,"

getPrincipals
public String[][] getPrincipals()
Returns the Principal classes and names
 associated with this PrivateCredentialPermission.
 The information is returned as a two-dimensional array (array[x][y]).
 The 'x' value corresponds to the number of Principal
 class and name pairs.  When (y==0), it corresponds to
 the Principal class value, and when (y==1),
 it corresponds to the Principal name value.
 For example, array[0][0] corresponds to the class name of
 the first Principal in the array.  array[0][1]
 corresponds to the Principal name of the
 first Principal in the array.

 

Returns:
the Principal class and names associated
          with this PrivateCredentialPermission.


"
PrivateCredentialPermission,hashCode(),int,Returns the hash code value for this object.,"

hashCode
public int hashCode()
Returns the hash code value for this object.

Specified by:
hashCode in class Permission
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
PrivateCredentialPermission,implies(Permission p),boolean,Checks if this PrivateCredentialPermission implies the specified Permission.,"

implies
public boolean implies(Permission p)
Checks if this PrivateCredentialPermission implies
 the specified Permission.

 

 This method returns true if:
 
 p is an instanceof PrivateCredentialPermission and
  the target name for p is implied by this object's
          target name.  For example:
 
  [* P1 ""duke""] implies [a.b.Credential P1 ""duke""].
  [C1 P1 ""duke""] implies [C1 P1 ""duke"" P2 ""dukette""].
  [C1 P2 ""dukette""] implies [C1 P1 ""duke"" P2 ""dukette""].
 



Specified by:
implies in class Permission
Parameters:
p - the Permission to check against.
Returns:
true if this PrivateCredentialPermission implies
 the specified Permission, false if not.


"
PrivateCredentialPermission,newPermissionCollection(),PermissionCollection,Return a homogeneous collection of PrivateCredentialPermissions in a PermissionCollection.,"

newPermissionCollection
public PermissionCollection newPermissionCollection()
Return a homogeneous collection of PrivateCredentialPermissions
 in a PermissionCollection.
 No such PermissionCollection is defined,
 so this method always returns null.

 

Overrides:
newPermissionCollection in class Permission
Returns:
null in all cases.


"
Subject,"doAs(Subject subject, PrivilegedAction<T> action)",static <T> T,Perform work as a particular Subject.,"

doAs
public static <T> T doAs(Subject subject,
                         PrivilegedAction<T> action)
Perform work as a particular Subject.

  This method first retrieves the current Thread's
 AccessControlContext via
 AccessController.getContext,
 and then instantiates a new AccessControlContext
 using the retrieved context along with a new
 SubjectDomainCombiner (constructed using
 the provided Subject).
 Finally, this method invokes AccessController.doPrivileged,
 passing it the provided PrivilegedAction,
 as well as the newly constructed AccessControlContext.

 

Type Parameters:
T - the type of the value returned by the PrivilegedAction's
                  run method.
Parameters:
subject - the Subject that the specified
                  action will run as.  This parameter
                  may be null. 
action - the code to be run as the specified
                  Subject. 
Returns:
the value returned by the PrivilegedAction's
                  run method.
Throws:
NullPointerException - if the PrivilegedAction
                  is null. 
SecurityException - if the caller does not have permission
                  to invoke this method.


"
Subject,"doAs(Subject subject, PrivilegedExceptionAction<T> action)",static <T> T,Perform work as a particular Subject.,"

doAs
public static <T> T doAs(Subject subject,
                         PrivilegedExceptionAction<T> action)
                  throws PrivilegedActionException
Perform work as a particular Subject.

  This method first retrieves the current Thread's
 AccessControlContext via
 AccessController.getContext,
 and then instantiates a new AccessControlContext
 using the retrieved context along with a new
 SubjectDomainCombiner (constructed using
 the provided Subject).
 Finally, this method invokes AccessController.doPrivileged,
 passing it the provided PrivilegedExceptionAction,
 as well as the newly constructed AccessControlContext.

 

Type Parameters:
T - the type of the value returned by the
                  PrivilegedExceptionAction's run method.
Parameters:
subject - the Subject that the specified
                  action will run as.  This parameter
                  may be null. 
action - the code to be run as the specified
                  Subject. 
Returns:
the value returned by the
                  PrivilegedExceptionAction's run method.
Throws:
PrivilegedActionException - if the
                  PrivilegedExceptionAction.run
                  method throws a checked exception. 
NullPointerException - if the specified
                  PrivilegedExceptionAction is
                  null. 
SecurityException - if the caller does not have permission
                  to invoke this method.


"
Subject,"doAsPrivileged(Subject subject, PrivilegedAction<T> action, AccessControlContext acc)",static <T> T,Perform privileged work as a particular Subject.,"

doAsPrivileged
public static <T> T doAsPrivileged(Subject subject,
                                   PrivilegedAction<T> action,
                                   AccessControlContext acc)
Perform privileged work as a particular Subject.

  This method behaves exactly as Subject.doAs,
 except that instead of retrieving the current Thread's
 AccessControlContext, it uses the provided
 AccessControlContext.  If the provided
 AccessControlContext is null,
 this method instantiates a new AccessControlContext
 with an empty collection of ProtectionDomains.

 

Type Parameters:
T - the type of the value returned by the PrivilegedAction's
                  run method.
Parameters:
subject - the Subject that the specified
                  action will run as.  This parameter
                  may be null. 
action - the code to be run as the specified
                  Subject. 
acc - the AccessControlContext to be tied to the
                  specified subject and action. 
Returns:
the value returned by the PrivilegedAction's
                  run method.
Throws:
NullPointerException - if the PrivilegedAction
                  is null. 
SecurityException - if the caller does not have permission
                  to invoke this method.


"
Subject,"doAsPrivileged(Subject subject, PrivilegedExceptionAction<T> action, AccessControlContext acc)",static <T> T,Perform privileged work as a particular Subject.,"

doAsPrivileged
public static <T> T doAsPrivileged(Subject subject,
                                   PrivilegedExceptionAction<T> action,
                                   AccessControlContext acc)
                            throws PrivilegedActionException
Perform privileged work as a particular Subject.

  This method behaves exactly as Subject.doAs,
 except that instead of retrieving the current Thread's
 AccessControlContext, it uses the provided
 AccessControlContext.  If the provided
 AccessControlContext is null,
 this method instantiates a new AccessControlContext
 with an empty collection of ProtectionDomains.

 

Type Parameters:
T - the type of the value returned by the
                  PrivilegedExceptionAction's run method.
Parameters:
subject - the Subject that the specified
                  action will run as.  This parameter
                  may be null. 
action - the code to be run as the specified
                  Subject. 
acc - the AccessControlContext to be tied to the
                  specified subject and action. 
Returns:
the value returned by the
                  PrivilegedExceptionAction's run method.
Throws:
PrivilegedActionException - if the
                  PrivilegedExceptionAction.run
                  method throws a checked exception. 
NullPointerException - if the specified
                  PrivilegedExceptionAction is
                  null. 
SecurityException - if the caller does not have permission
                  to invoke this method.


"
Subject,equals(Object o),boolean,Compares the specified Object with this Subject for equality.,"

equals
public boolean equals(Object o)
Compares the specified Object with this Subject
 for equality.  Returns true if the given object is also a Subject
 and the two Subject instances are equivalent.
 More formally, two Subject instances are
 equal if their Principal and Credential
 Sets are equal.

 

Overrides:
equals in class Object
Parameters:
o - Object to be compared for equality with this
          Subject.
Returns:
true if the specified Object is equal to this
          Subject.
Throws:
SecurityException - if the caller does not have permission
          to access the private credentials for this Subject,
          or if the caller does not have permission to access the
          private credentials for the provided Subject.
See Also:
Object.hashCode(), 
HashMap


"
Subject,getPrincipals(),Set<Principal>,Return the Set of Principals associated with this Subject.,"

getPrincipals
public Set<Principal> getPrincipals()
Return the Set of Principals associated with this
 Subject.  Each Principal represents
 an identity for this Subject.

  The returned Set is backed by this Subject's
 internal Principal Set.  Any modification
 to the returned Set affects the internal
 Principal Set as well.

 

Returns:
The Set of Principals associated with this
          Subject.


"
Subject,getPrincipals(Class<T> c),<T extends Principal> Set<T>,Return a Set of Principals associated with this Subject that are instances or subclasses of the specified Class.,"

getPrincipals
public <T extends Principal> Set<T> getPrincipals(Class<T> c)
Return a Set of Principals associated with this
 Subject that are instances or subclasses of the specified
 Class.

  The returned Set is not backed by this Subject's
 internal Principal Set.  A new
 Set is created and returned for each method invocation.
 Modifications to the returned Set
 will not affect the internal Principal Set.

 

Type Parameters:
T - the type of the class modeled by c
Parameters:
c - the returned Set of Principals will all be
          instances of this class.
Returns:
a Set of Principals that are instances of the
          specified Class.
Throws:
NullPointerException - if the specified Class
                  is null.


"
Subject,getPrivateCredentials(),Set<Object>,Return the Set of private credentials held by this Subject.,"

getPrivateCredentials
public Set<Object> getPrivateCredentials()
Return the Set of private credentials held by this
 Subject.

  The returned Set is backed by this Subject's
 internal private Credential Set.  Any modification
 to the returned Set affects the internal private
 Credential Set as well.

  A caller requires permissions to access the Credentials
 in the returned Set, or to modify the
 Set itself.  A SecurityException
 is thrown if the caller does not have the proper permissions.

  While iterating through the Set,
 a SecurityException is thrown
 if the caller does not have permission to access a
 particular Credential.  The Iterator
 is nevertheless advanced to next element in the Set.

 

Returns:
A Set of private credentials held by this
          Subject.


"
Subject,getPrivateCredentials(Class<T> c),<T> Set<T>,Return a Set of private credentials associated with this Subject that are instances or subclasses of the specified Class.,"

getPrivateCredentials
public <T> Set<T> getPrivateCredentials(Class<T> c)
Return a Set of private credentials associated with this
 Subject that are instances or subclasses of the specified
 Class.

  The caller must have permission to access all of the
 requested Credentials, or a SecurityException
 will be thrown.

  The returned Set is not backed by this Subject's
 internal private Credential Set.  A new
 Set is created and returned for each method invocation.
 Modifications to the returned Set
 will not affect the internal private Credential Set.

 

Type Parameters:
T - the type of the class modeled by c
Parameters:
c - the returned Set of private credentials will all be
          instances of this class.
Returns:
a Set of private credentials that are instances
          of the  specified Class.
Throws:
NullPointerException - if the specified Class
          is null.


"
Subject,getPublicCredentials(),Set<Object>,Return the Set of public credentials held by this Subject.,"

getPublicCredentials
public Set<Object> getPublicCredentials()
Return the Set of public credentials held by this
 Subject.

  The returned Set is backed by this Subject's
 internal public Credential Set.  Any modification
 to the returned Set affects the internal public
 Credential Set as well.

 

Returns:
A Set of public credentials held by this
          Subject.


"
Subject,getPublicCredentials(Class<T> c),<T> Set<T>,Return a Set of public credentials associated with this Subject that are instances or subclasses of the specified Class.,"

getPublicCredentials
public <T> Set<T> getPublicCredentials(Class<T> c)
Return a Set of public credentials associated with this
 Subject that are instances or subclasses of the specified
 Class.

  The returned Set is not backed by this Subject's
 internal public Credential Set.  A new
 Set is created and returned for each method invocation.
 Modifications to the returned Set
 will not affect the internal public Credential Set.

 

Type Parameters:
T - the type of the class modeled by c
Parameters:
c - the returned Set of public credentials will all be
          instances of this class.
Returns:
a Set of public credentials that are instances
          of the  specified Class.
Throws:
NullPointerException - if the specified Class
          is null.


"
Subject,getSubject(AccessControlContext acc),static Subject,Get the Subject associated with the provided AccessControlContext.,"

getSubject
public static Subject getSubject(AccessControlContext acc)
Get the Subject associated with the provided
 AccessControlContext.

  The AccessControlContext may contain many
 Subjects (from nested doAs calls).
 In this situation, the most recent Subject associated
 with the AccessControlContext is returned.

 

Parameters:
acc - the AccessControlContext from which to retrieve
          the Subject.
Returns:
the Subject associated with the provided
          AccessControlContext, or null
          if no Subject is associated
          with the provided AccessControlContext.
Throws:
SecurityException - if the caller does not have permission
          to get the Subject. 
NullPointerException - if the provided
          AccessControlContext is null.


"
Subject,hashCode(),int,Returns a hashcode for this Subject.,"

hashCode
public int hashCode()
Returns a hashcode for this Subject.

 

Overrides:
hashCode in class Object
Returns:
a hashcode for this Subject.
Throws:
SecurityException - if the caller does not have permission
          to access this Subject's private credentials.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Subject,isReadOnly(),boolean,Query whether this Subject is read-only.,"

isReadOnly
public boolean isReadOnly()
Query whether this Subject is read-only.

 

Returns:
true if this Subject is read-only, false otherwise.


"
Subject,setReadOnly(),void,Set this Subject to be read-only.,"

setReadOnly
public void setReadOnly()
Set this Subject to be read-only.

  Modifications (additions and removals) to this Subject's
 Principal Set and
 credential Sets will be disallowed.
 The destroy operation on this Subject's credentials will
 still be permitted.

  Subsequent attempts to modify the Subject's Principal
 and credential Sets will result in an
 IllegalStateException being thrown.
 Also, once a Subject is read-only,
 it can not be reset to being writable again.

 

Throws:
SecurityException - if the caller does not have permission
          to set this Subject to be read-only.


"
Subject,toString(),String,Return the String representation of this Subject.,"

toString
public String toString()
Return the String representation of this Subject.

 

Overrides:
toString in class Object
Returns:
the String representation of this Subject.


"
SubjectDomainCombiner,"combine(ProtectionDomain[] currentDomains, ProtectionDomain[] assignedDomains)",ProtectionDomain[],Update the relevant ProtectionDomains with the Principals from the Subject associated with this SubjectDomainCombiner.,"

combine
public ProtectionDomain[] combine(ProtectionDomain[] currentDomains,
                                  ProtectionDomain[] assignedDomains)
Update the relevant ProtectionDomains with the Principals
 from the Subject associated with this
 SubjectDomainCombiner.

  A new ProtectionDomain instance is created
 for each ProtectionDomain in the
 currentDomains array.  Each new ProtectionDomain
 instance is created using the CodeSource,
 Permissions and ClassLoader
 from the corresponding ProtectionDomain in
 currentDomains, as well as with the Principals from
 the Subject associated with this
 SubjectDomainCombiner.

  All of the newly instantiated ProtectionDomains are
 combined into a new array.  The ProtectionDomains from the
 assignedDomains array are appended to this new array,
 and the result is returned.

  Note that optimizations such as the removal of duplicate
 ProtectionDomains may have occurred.
 In addition, caching of ProtectionDomains may be permitted.

 

Specified by:
combine in interface DomainCombiner
Parameters:
currentDomains - the ProtectionDomains associated with the
          current execution Thread, up to the most recent
          privileged ProtectionDomain.
          The ProtectionDomains are are listed in order of execution,
          with the most recently executing ProtectionDomain
          residing at the beginning of the array. This parameter may
          be null if the current execution Thread
          has no associated ProtectionDomains.
assignedDomains - the ProtectionDomains inherited from the
          parent Thread, or the ProtectionDomains from the
          privileged context, if a call to
          AccessController.doPrivileged(..., context)
          had occurred  This parameter may be null
          if there were no ProtectionDomains inherited from the
          parent Thread, or from the privileged context.
Returns:
a new array consisting of the updated ProtectionDomains,
          or null.


"
SubjectDomainCombiner,getSubject(),Subject,Get the Subject associated with this SubjectDomainCombiner.,"

getSubject
public Subject getSubject()
Get the Subject associated with this
 SubjectDomainCombiner.

 

Returns:
the Subject associated with this
          SubjectDomainCombiner, or null
          if no Subject is associated with this
          SubjectDomainCombiner.
Throws:
SecurityException - if the caller does not have permission
          to get the Subject associated with this
          SubjectDomainCombiner.


"
