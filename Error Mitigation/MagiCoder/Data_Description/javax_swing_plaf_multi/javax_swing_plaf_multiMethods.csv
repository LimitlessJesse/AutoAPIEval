ClassName,Method,Return Type,Description,Full Description
MultiButtonUI,"contains(JComponent a, int b, int c)",boolean,Invokes the contains method on each UI handled by this object.,"

contains
public boolean contains(JComponent a,
                        int b,
                        int c)
Invokes the contains method on each UI handled by this object.

Overrides:
contains in class ComponentUI
Parameters:
a - the component where the x,y location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
b - the x coordinate of the point
c - the y coordinate of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.contains(int, int), 
Component.contains(int, int)


"
MultiButtonUI,createUI(JComponent a),static ComponentUI,Returns a multiplexing UI instance if any of the auxiliary LookAndFeels supports this UI.,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
MultiButtonUI,"getAccessibleChild(JComponent a, int b)",Accessible,Invokes the getAccessibleChild method on each UI handled by this object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent a,
                                     int b)
Invokes the getAccessibleChild method on each UI handled by this object.

Overrides:
getAccessibleChild in class ComponentUI
b - zero-based index of child
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)


"
MultiButtonUI,getAccessibleChildrenCount(JComponent a),int,Invokes the getAccessibleChildrenCount method on each UI handled by this object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent a)
Invokes the getAccessibleChildrenCount method on each UI handled by this object.

Overrides:
getAccessibleChildrenCount in class ComponentUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)


"
MultiButtonUI,getMaximumSize(JComponent a),Dimension,Invokes the getMaximumSize method on each UI handled by this object.,"

getMaximumSize
public Dimension getMaximumSize(JComponent a)
Invokes the getMaximumSize method on each UI handled by this object.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
a - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
MultiButtonUI,getMinimumSize(JComponent a),Dimension,Invokes the getMinimumSize method on each UI handled by this object.,"

getMinimumSize
public Dimension getMinimumSize(JComponent a)
Invokes the getMinimumSize method on each UI handled by this object.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
a - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MultiButtonUI,getPreferredSize(JComponent a),Dimension,Invokes the getPreferredSize method on each UI handled by this object.,"

getPreferredSize
public Dimension getPreferredSize(JComponent a)
Invokes the getPreferredSize method on each UI handled by this object.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
a - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MultiButtonUI,getUIs(),ComponentUI[],Returns the list of UIs associated with this multiplexing UI.,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
MultiButtonUI,installUI(JComponent a),void,Invokes the installUI method on each UI handled by this object.,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MultiButtonUI,"paint(Graphics a, JComponent b)",void,Invokes the paint method on each UI handled by this object.,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MultiButtonUI,uninstallUI(JComponent a),void,Invokes the uninstallUI method on each UI handled by this object.,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MultiButtonUI,"update(Graphics a, JComponent b)",void,Invokes the update method on each UI handled by this object.,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
MultiColorChooserUI,"contains(JComponent a, int b, int c)",boolean,Invokes the contains method on each UI handled by this object.,"

contains
public boolean contains(JComponent a,
                        int b,
                        int c)
Invokes the contains method on each UI handled by this object.

Overrides:
contains in class ComponentUI
Parameters:
a - the component where the x,y location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
b - the x coordinate of the point
c - the y coordinate of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.contains(int, int), 
Component.contains(int, int)


"
MultiColorChooserUI,createUI(JComponent a),static ComponentUI,Returns a multiplexing UI instance if any of the auxiliary LookAndFeels supports this UI.,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
MultiColorChooserUI,"getAccessibleChild(JComponent a, int b)",Accessible,Invokes the getAccessibleChild method on each UI handled by this object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent a,
                                     int b)
Invokes the getAccessibleChild method on each UI handled by this object.

Overrides:
getAccessibleChild in class ComponentUI
b - zero-based index of child
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)


"
MultiColorChooserUI,getAccessibleChildrenCount(JComponent a),int,Invokes the getAccessibleChildrenCount method on each UI handled by this object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent a)
Invokes the getAccessibleChildrenCount method on each UI handled by this object.

Overrides:
getAccessibleChildrenCount in class ComponentUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)


"
MultiColorChooserUI,getMaximumSize(JComponent a),Dimension,Invokes the getMaximumSize method on each UI handled by this object.,"

getMaximumSize
public Dimension getMaximumSize(JComponent a)
Invokes the getMaximumSize method on each UI handled by this object.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
a - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
MultiColorChooserUI,getMinimumSize(JComponent a),Dimension,Invokes the getMinimumSize method on each UI handled by this object.,"

getMinimumSize
public Dimension getMinimumSize(JComponent a)
Invokes the getMinimumSize method on each UI handled by this object.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
a - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MultiColorChooserUI,getPreferredSize(JComponent a),Dimension,Invokes the getPreferredSize method on each UI handled by this object.,"

getPreferredSize
public Dimension getPreferredSize(JComponent a)
Invokes the getPreferredSize method on each UI handled by this object.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
a - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MultiColorChooserUI,getUIs(),ComponentUI[],Returns the list of UIs associated with this multiplexing UI.,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
MultiColorChooserUI,installUI(JComponent a),void,Invokes the installUI method on each UI handled by this object.,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MultiColorChooserUI,"paint(Graphics a, JComponent b)",void,Invokes the paint method on each UI handled by this object.,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MultiColorChooserUI,uninstallUI(JComponent a),void,Invokes the uninstallUI method on each UI handled by this object.,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MultiColorChooserUI,"update(Graphics a, JComponent b)",void,Invokes the update method on each UI handled by this object.,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
MultiComboBoxUI,"contains(JComponent a, int b, int c)",boolean,Invokes the contains method on each UI handled by this object.,"

contains
public boolean contains(JComponent a,
                        int b,
                        int c)
Invokes the contains method on each UI handled by this object.

Overrides:
contains in class ComponentUI
Parameters:
a - the component where the x,y location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
b - the x coordinate of the point
c - the y coordinate of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.contains(int, int), 
Component.contains(int, int)


"
MultiComboBoxUI,createUI(JComponent a),static ComponentUI,Returns a multiplexing UI instance if any of the auxiliary LookAndFeels supports this UI.,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
MultiComboBoxUI,"getAccessibleChild(JComponent a, int b)",Accessible,Invokes the getAccessibleChild method on each UI handled by this object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent a,
                                     int b)
Invokes the getAccessibleChild method on each UI handled by this object.

Overrides:
getAccessibleChild in class ComponentUI
b - zero-based index of child
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)


"
MultiComboBoxUI,getAccessibleChildrenCount(JComponent a),int,Invokes the getAccessibleChildrenCount method on each UI handled by this object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent a)
Invokes the getAccessibleChildrenCount method on each UI handled by this object.

Overrides:
getAccessibleChildrenCount in class ComponentUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)


"
MultiComboBoxUI,getMaximumSize(JComponent a),Dimension,Invokes the getMaximumSize method on each UI handled by this object.,"

getMaximumSize
public Dimension getMaximumSize(JComponent a)
Invokes the getMaximumSize method on each UI handled by this object.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
a - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
MultiComboBoxUI,getMinimumSize(JComponent a),Dimension,Invokes the getMinimumSize method on each UI handled by this object.,"

getMinimumSize
public Dimension getMinimumSize(JComponent a)
Invokes the getMinimumSize method on each UI handled by this object.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
a - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MultiComboBoxUI,getPreferredSize(JComponent a),Dimension,Invokes the getPreferredSize method on each UI handled by this object.,"

getPreferredSize
public Dimension getPreferredSize(JComponent a)
Invokes the getPreferredSize method on each UI handled by this object.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
a - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MultiComboBoxUI,getUIs(),ComponentUI[],Returns the list of UIs associated with this multiplexing UI.,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
MultiComboBoxUI,installUI(JComponent a),void,Invokes the installUI method on each UI handled by this object.,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MultiComboBoxUI,isFocusTraversable(JComboBox a),boolean,Invokes the isFocusTraversable method on each UI handled by this object.,"

isFocusTraversable
public boolean isFocusTraversable(JComboBox a)
Invokes the isFocusTraversable method on each UI handled by this object.

Specified by:
isFocusTraversable in class ComboBoxUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel


"
MultiComboBoxUI,isPopupVisible(JComboBox a),boolean,Invokes the isPopupVisible method on each UI handled by this object.,"

isPopupVisible
public boolean isPopupVisible(JComboBox a)
Invokes the isPopupVisible method on each UI handled by this object.

Specified by:
isPopupVisible in class ComboBoxUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel


"
MultiComboBoxUI,"paint(Graphics a, JComponent b)",void,Invokes the paint method on each UI handled by this object.,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MultiComboBoxUI,"setPopupVisible(JComboBox a, boolean b)",void,Invokes the setPopupVisible method on each UI handled by this object.,"

setPopupVisible
public void setPopupVisible(JComboBox a,
                            boolean b)
Invokes the setPopupVisible method on each UI handled by this object.

Specified by:
setPopupVisible in class ComboBoxUI


"
MultiComboBoxUI,uninstallUI(JComponent a),void,Invokes the uninstallUI method on each UI handled by this object.,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MultiComboBoxUI,"update(Graphics a, JComponent b)",void,Invokes the update method on each UI handled by this object.,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
MultiDesktopIconUI,"contains(JComponent a, int b, int c)",boolean,Invokes the contains method on each UI handled by this object.,"

contains
public boolean contains(JComponent a,
                        int b,
                        int c)
Invokes the contains method on each UI handled by this object.

Overrides:
contains in class ComponentUI
Parameters:
a - the component where the x,y location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
b - the x coordinate of the point
c - the y coordinate of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.contains(int, int), 
Component.contains(int, int)


"
MultiDesktopIconUI,createUI(JComponent a),static ComponentUI,Returns a multiplexing UI instance if any of the auxiliary LookAndFeels supports this UI.,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
MultiDesktopIconUI,"getAccessibleChild(JComponent a, int b)",Accessible,Invokes the getAccessibleChild method on each UI handled by this object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent a,
                                     int b)
Invokes the getAccessibleChild method on each UI handled by this object.

Overrides:
getAccessibleChild in class ComponentUI
b - zero-based index of child
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)


"
MultiDesktopIconUI,getAccessibleChildrenCount(JComponent a),int,Invokes the getAccessibleChildrenCount method on each UI handled by this object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent a)
Invokes the getAccessibleChildrenCount method on each UI handled by this object.

Overrides:
getAccessibleChildrenCount in class ComponentUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)


"
MultiDesktopIconUI,getMaximumSize(JComponent a),Dimension,Invokes the getMaximumSize method on each UI handled by this object.,"

getMaximumSize
public Dimension getMaximumSize(JComponent a)
Invokes the getMaximumSize method on each UI handled by this object.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
a - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
MultiDesktopIconUI,getMinimumSize(JComponent a),Dimension,Invokes the getMinimumSize method on each UI handled by this object.,"

getMinimumSize
public Dimension getMinimumSize(JComponent a)
Invokes the getMinimumSize method on each UI handled by this object.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
a - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MultiDesktopIconUI,getPreferredSize(JComponent a),Dimension,Invokes the getPreferredSize method on each UI handled by this object.,"

getPreferredSize
public Dimension getPreferredSize(JComponent a)
Invokes the getPreferredSize method on each UI handled by this object.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
a - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MultiDesktopIconUI,getUIs(),ComponentUI[],Returns the list of UIs associated with this multiplexing UI.,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
MultiDesktopIconUI,installUI(JComponent a),void,Invokes the installUI method on each UI handled by this object.,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MultiDesktopIconUI,"paint(Graphics a, JComponent b)",void,Invokes the paint method on each UI handled by this object.,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MultiDesktopIconUI,uninstallUI(JComponent a),void,Invokes the uninstallUI method on each UI handled by this object.,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MultiDesktopIconUI,"update(Graphics a, JComponent b)",void,Invokes the update method on each UI handled by this object.,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
MultiDesktopPaneUI,"contains(JComponent a, int b, int c)",boolean,Invokes the contains method on each UI handled by this object.,"

contains
public boolean contains(JComponent a,
                        int b,
                        int c)
Invokes the contains method on each UI handled by this object.

Overrides:
contains in class ComponentUI
Parameters:
a - the component where the x,y location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
b - the x coordinate of the point
c - the y coordinate of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.contains(int, int), 
Component.contains(int, int)


"
MultiDesktopPaneUI,createUI(JComponent a),static ComponentUI,Returns a multiplexing UI instance if any of the auxiliary LookAndFeels supports this UI.,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
MultiDesktopPaneUI,"getAccessibleChild(JComponent a, int b)",Accessible,Invokes the getAccessibleChild method on each UI handled by this object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent a,
                                     int b)
Invokes the getAccessibleChild method on each UI handled by this object.

Overrides:
getAccessibleChild in class ComponentUI
b - zero-based index of child
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)


"
MultiDesktopPaneUI,getAccessibleChildrenCount(JComponent a),int,Invokes the getAccessibleChildrenCount method on each UI handled by this object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent a)
Invokes the getAccessibleChildrenCount method on each UI handled by this object.

Overrides:
getAccessibleChildrenCount in class ComponentUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)


"
MultiDesktopPaneUI,getMaximumSize(JComponent a),Dimension,Invokes the getMaximumSize method on each UI handled by this object.,"

getMaximumSize
public Dimension getMaximumSize(JComponent a)
Invokes the getMaximumSize method on each UI handled by this object.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
a - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
MultiDesktopPaneUI,getMinimumSize(JComponent a),Dimension,Invokes the getMinimumSize method on each UI handled by this object.,"

getMinimumSize
public Dimension getMinimumSize(JComponent a)
Invokes the getMinimumSize method on each UI handled by this object.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
a - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MultiDesktopPaneUI,getPreferredSize(JComponent a),Dimension,Invokes the getPreferredSize method on each UI handled by this object.,"

getPreferredSize
public Dimension getPreferredSize(JComponent a)
Invokes the getPreferredSize method on each UI handled by this object.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
a - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MultiDesktopPaneUI,getUIs(),ComponentUI[],Returns the list of UIs associated with this multiplexing UI.,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
MultiDesktopPaneUI,installUI(JComponent a),void,Invokes the installUI method on each UI handled by this object.,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MultiDesktopPaneUI,"paint(Graphics a, JComponent b)",void,Invokes the paint method on each UI handled by this object.,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MultiDesktopPaneUI,uninstallUI(JComponent a),void,Invokes the uninstallUI method on each UI handled by this object.,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MultiDesktopPaneUI,"update(Graphics a, JComponent b)",void,Invokes the update method on each UI handled by this object.,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
MultiFileChooserUI,"contains(JComponent a, int b, int c)",boolean,Invokes the contains method on each UI handled by this object.,"

contains
public boolean contains(JComponent a,
                        int b,
                        int c)
Invokes the contains method on each UI handled by this object.

Overrides:
contains in class ComponentUI
Parameters:
a - the component where the x,y location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
b - the x coordinate of the point
c - the y coordinate of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.contains(int, int), 
Component.contains(int, int)


"
MultiFileChooserUI,createUI(JComponent a),static ComponentUI,Returns a multiplexing UI instance if any of the auxiliary LookAndFeels supports this UI.,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
MultiFileChooserUI,"ensureFileIsVisible(JFileChooser a, File b)",void,Invokes the ensureFileIsVisible method on each UI handled by this object.,"

ensureFileIsVisible
public void ensureFileIsVisible(JFileChooser a,
                                File b)
Invokes the ensureFileIsVisible method on each UI handled by this object.

Specified by:
ensureFileIsVisible in class FileChooserUI


"
MultiFileChooserUI,getAcceptAllFileFilter(JFileChooser a),FileFilter,Invokes the getAcceptAllFileFilter method on each UI handled by this object.,"

getAcceptAllFileFilter
public FileFilter getAcceptAllFileFilter(JFileChooser a)
Invokes the getAcceptAllFileFilter method on each UI handled by this object.

Specified by:
getAcceptAllFileFilter in class FileChooserUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel


"
MultiFileChooserUI,"getAccessibleChild(JComponent a, int b)",Accessible,Invokes the getAccessibleChild method on each UI handled by this object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent a,
                                     int b)
Invokes the getAccessibleChild method on each UI handled by this object.

Overrides:
getAccessibleChild in class ComponentUI
b - zero-based index of child
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)


"
MultiFileChooserUI,getAccessibleChildrenCount(JComponent a),int,Invokes the getAccessibleChildrenCount method on each UI handled by this object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent a)
Invokes the getAccessibleChildrenCount method on each UI handled by this object.

Overrides:
getAccessibleChildrenCount in class ComponentUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)


"
MultiFileChooserUI,getApproveButtonText(JFileChooser a),String,Invokes the getApproveButtonText method on each UI handled by this object.,"

getApproveButtonText
public String getApproveButtonText(JFileChooser a)
Invokes the getApproveButtonText method on each UI handled by this object.

Specified by:
getApproveButtonText in class FileChooserUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel


"
MultiFileChooserUI,getDialogTitle(JFileChooser a),String,Invokes the getDialogTitle method on each UI handled by this object.,"

getDialogTitle
public String getDialogTitle(JFileChooser a)
Invokes the getDialogTitle method on each UI handled by this object.

Specified by:
getDialogTitle in class FileChooserUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel


"
MultiFileChooserUI,getFileView(JFileChooser a),FileView,Invokes the getFileView method on each UI handled by this object.,"

getFileView
public FileView getFileView(JFileChooser a)
Invokes the getFileView method on each UI handled by this object.

Specified by:
getFileView in class FileChooserUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel


"
MultiFileChooserUI,getMaximumSize(JComponent a),Dimension,Invokes the getMaximumSize method on each UI handled by this object.,"

getMaximumSize
public Dimension getMaximumSize(JComponent a)
Invokes the getMaximumSize method on each UI handled by this object.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
a - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
MultiFileChooserUI,getMinimumSize(JComponent a),Dimension,Invokes the getMinimumSize method on each UI handled by this object.,"

getMinimumSize
public Dimension getMinimumSize(JComponent a)
Invokes the getMinimumSize method on each UI handled by this object.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
a - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MultiFileChooserUI,getPreferredSize(JComponent a),Dimension,Invokes the getPreferredSize method on each UI handled by this object.,"

getPreferredSize
public Dimension getPreferredSize(JComponent a)
Invokes the getPreferredSize method on each UI handled by this object.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
a - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MultiFileChooserUI,getUIs(),ComponentUI[],Returns the list of UIs associated with this multiplexing UI.,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
MultiFileChooserUI,installUI(JComponent a),void,Invokes the installUI method on each UI handled by this object.,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MultiFileChooserUI,"paint(Graphics a, JComponent b)",void,Invokes the paint method on each UI handled by this object.,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MultiFileChooserUI,rescanCurrentDirectory(JFileChooser a),void,Invokes the rescanCurrentDirectory method on each UI handled by this object.,"

rescanCurrentDirectory
public void rescanCurrentDirectory(JFileChooser a)
Invokes the rescanCurrentDirectory method on each UI handled by this object.

Specified by:
rescanCurrentDirectory in class FileChooserUI


"
MultiFileChooserUI,uninstallUI(JComponent a),void,Invokes the uninstallUI method on each UI handled by this object.,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MultiFileChooserUI,"update(Graphics a, JComponent b)",void,Invokes the update method on each UI handled by this object.,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
MultiInternalFrameUI,"contains(JComponent a, int b, int c)",boolean,Invokes the contains method on each UI handled by this object.,"

contains
public boolean contains(JComponent a,
                        int b,
                        int c)
Invokes the contains method on each UI handled by this object.

Overrides:
contains in class ComponentUI
Parameters:
a - the component where the x,y location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
b - the x coordinate of the point
c - the y coordinate of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.contains(int, int), 
Component.contains(int, int)


"
MultiInternalFrameUI,createUI(JComponent a),static ComponentUI,Returns a multiplexing UI instance if any of the auxiliary LookAndFeels supports this UI.,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
MultiInternalFrameUI,"getAccessibleChild(JComponent a, int b)",Accessible,Invokes the getAccessibleChild method on each UI handled by this object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent a,
                                     int b)
Invokes the getAccessibleChild method on each UI handled by this object.

Overrides:
getAccessibleChild in class ComponentUI
b - zero-based index of child
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)


"
MultiInternalFrameUI,getAccessibleChildrenCount(JComponent a),int,Invokes the getAccessibleChildrenCount method on each UI handled by this object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent a)
Invokes the getAccessibleChildrenCount method on each UI handled by this object.

Overrides:
getAccessibleChildrenCount in class ComponentUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)


"
MultiInternalFrameUI,getMaximumSize(JComponent a),Dimension,Invokes the getMaximumSize method on each UI handled by this object.,"

getMaximumSize
public Dimension getMaximumSize(JComponent a)
Invokes the getMaximumSize method on each UI handled by this object.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
a - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
MultiInternalFrameUI,getMinimumSize(JComponent a),Dimension,Invokes the getMinimumSize method on each UI handled by this object.,"

getMinimumSize
public Dimension getMinimumSize(JComponent a)
Invokes the getMinimumSize method on each UI handled by this object.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
a - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MultiInternalFrameUI,getPreferredSize(JComponent a),Dimension,Invokes the getPreferredSize method on each UI handled by this object.,"

getPreferredSize
public Dimension getPreferredSize(JComponent a)
Invokes the getPreferredSize method on each UI handled by this object.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
a - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MultiInternalFrameUI,getUIs(),ComponentUI[],Returns the list of UIs associated with this multiplexing UI.,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
MultiInternalFrameUI,installUI(JComponent a),void,Invokes the installUI method on each UI handled by this object.,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MultiInternalFrameUI,"paint(Graphics a, JComponent b)",void,Invokes the paint method on each UI handled by this object.,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MultiInternalFrameUI,uninstallUI(JComponent a),void,Invokes the uninstallUI method on each UI handled by this object.,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MultiInternalFrameUI,"update(Graphics a, JComponent b)",void,Invokes the update method on each UI handled by this object.,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
MultiLabelUI,"contains(JComponent a, int b, int c)",boolean,Invokes the contains method on each UI handled by this object.,"

contains
public boolean contains(JComponent a,
                        int b,
                        int c)
Invokes the contains method on each UI handled by this object.

Overrides:
contains in class ComponentUI
Parameters:
a - the component where the x,y location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
b - the x coordinate of the point
c - the y coordinate of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.contains(int, int), 
Component.contains(int, int)


"
MultiLabelUI,createUI(JComponent a),static ComponentUI,Returns a multiplexing UI instance if any of the auxiliary LookAndFeels supports this UI.,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
MultiLabelUI,"getAccessibleChild(JComponent a, int b)",Accessible,Invokes the getAccessibleChild method on each UI handled by this object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent a,
                                     int b)
Invokes the getAccessibleChild method on each UI handled by this object.

Overrides:
getAccessibleChild in class ComponentUI
b - zero-based index of child
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)


"
MultiLabelUI,getAccessibleChildrenCount(JComponent a),int,Invokes the getAccessibleChildrenCount method on each UI handled by this object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent a)
Invokes the getAccessibleChildrenCount method on each UI handled by this object.

Overrides:
getAccessibleChildrenCount in class ComponentUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)


"
MultiLabelUI,getMaximumSize(JComponent a),Dimension,Invokes the getMaximumSize method on each UI handled by this object.,"

getMaximumSize
public Dimension getMaximumSize(JComponent a)
Invokes the getMaximumSize method on each UI handled by this object.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
a - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
MultiLabelUI,getMinimumSize(JComponent a),Dimension,Invokes the getMinimumSize method on each UI handled by this object.,"

getMinimumSize
public Dimension getMinimumSize(JComponent a)
Invokes the getMinimumSize method on each UI handled by this object.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
a - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MultiLabelUI,getPreferredSize(JComponent a),Dimension,Invokes the getPreferredSize method on each UI handled by this object.,"

getPreferredSize
public Dimension getPreferredSize(JComponent a)
Invokes the getPreferredSize method on each UI handled by this object.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
a - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MultiLabelUI,getUIs(),ComponentUI[],Returns the list of UIs associated with this multiplexing UI.,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
MultiLabelUI,installUI(JComponent a),void,Invokes the installUI method on each UI handled by this object.,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MultiLabelUI,"paint(Graphics a, JComponent b)",void,Invokes the paint method on each UI handled by this object.,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MultiLabelUI,uninstallUI(JComponent a),void,Invokes the uninstallUI method on each UI handled by this object.,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MultiLabelUI,"update(Graphics a, JComponent b)",void,Invokes the update method on each UI handled by this object.,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
MultiListUI,"contains(JComponent a, int b, int c)",boolean,Invokes the contains method on each UI handled by this object.,"

contains
public boolean contains(JComponent a,
                        int b,
                        int c)
Invokes the contains method on each UI handled by this object.

Overrides:
contains in class ComponentUI
Parameters:
a - the component where the x,y location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
b - the x coordinate of the point
c - the y coordinate of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.contains(int, int), 
Component.contains(int, int)


"
MultiListUI,createUI(JComponent a),static ComponentUI,Returns a multiplexing UI instance if any of the auxiliary LookAndFeels supports this UI.,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
MultiListUI,"getAccessibleChild(JComponent a, int b)",Accessible,Invokes the getAccessibleChild method on each UI handled by this object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent a,
                                     int b)
Invokes the getAccessibleChild method on each UI handled by this object.

Overrides:
getAccessibleChild in class ComponentUI
b - zero-based index of child
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)


"
MultiListUI,getAccessibleChildrenCount(JComponent a),int,Invokes the getAccessibleChildrenCount method on each UI handled by this object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent a)
Invokes the getAccessibleChildrenCount method on each UI handled by this object.

Overrides:
getAccessibleChildrenCount in class ComponentUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)


"
MultiListUI,"getCellBounds(JList a, int b, int c)",Rectangle,Invokes the getCellBounds method on each UI handled by this object.,"

getCellBounds
public Rectangle getCellBounds(JList a,
                               int b,
                               int c)
Invokes the getCellBounds method on each UI handled by this object.

Specified by:
getCellBounds in class ListUI
Parameters:
a - the list
b - the first index in the range
c - the second index in the range
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel


"
MultiListUI,getMaximumSize(JComponent a),Dimension,Invokes the getMaximumSize method on each UI handled by this object.,"

getMaximumSize
public Dimension getMaximumSize(JComponent a)
Invokes the getMaximumSize method on each UI handled by this object.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
a - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
MultiListUI,getMinimumSize(JComponent a),Dimension,Invokes the getMinimumSize method on each UI handled by this object.,"

getMinimumSize
public Dimension getMinimumSize(JComponent a)
Invokes the getMinimumSize method on each UI handled by this object.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
a - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MultiListUI,getPreferredSize(JComponent a),Dimension,Invokes the getPreferredSize method on each UI handled by this object.,"

getPreferredSize
public Dimension getPreferredSize(JComponent a)
Invokes the getPreferredSize method on each UI handled by this object.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
a - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MultiListUI,getUIs(),ComponentUI[],Returns the list of UIs associated with this multiplexing UI.,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
MultiListUI,"indexToLocation(JList a, int b)",Point,Invokes the indexToLocation method on each UI handled by this object.,"

indexToLocation
public Point indexToLocation(JList a,
                             int b)
Invokes the indexToLocation method on each UI handled by this object.

Specified by:
indexToLocation in class ListUI
Parameters:
a - the list
b - the cell index
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel


"
MultiListUI,installUI(JComponent a),void,Invokes the installUI method on each UI handled by this object.,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MultiListUI,"locationToIndex(JList a, Point b)",int,Invokes the locationToIndex method on each UI handled by this object.,"

locationToIndex
public int locationToIndex(JList a,
                           Point b)
Invokes the locationToIndex method on each UI handled by this object.

Specified by:
locationToIndex in class ListUI
Parameters:
a - the list
b - the coordinates of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel


"
MultiListUI,"paint(Graphics a, JComponent b)",void,Invokes the paint method on each UI handled by this object.,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MultiListUI,uninstallUI(JComponent a),void,Invokes the uninstallUI method on each UI handled by this object.,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MultiListUI,"update(Graphics a, JComponent b)",void,Invokes the update method on each UI handled by this object.,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
MultiLookAndFeel,"createUIs(ComponentUI mui, Vector uis, JComponent target)",static ComponentUI,"Creates the ComponentUI objects required to present the target component, placing the objects in the uis vector and returning the ComponentUI object that best represents the component's UI.","

createUIs
public static ComponentUI createUIs(ComponentUI mui,
                                    Vector uis,
                                    JComponent target)
Creates the ComponentUI objects
 required to present
 the target component,
 placing the objects in the uis vector and
 returning the
 ComponentUI object
 that best represents the component's UI.
 This method finds the ComponentUI objects
 by invoking
 getDefaults().getUI(target) on each
 default and auxiliary look and feel currently in use.
 The first UI object this method adds
 to the uis vector
 is for the default look and feel.
 
 This method is invoked by the createUI method
 of MultiXxxxUI classes.

Parameters:
mui - the ComponentUI object
            that represents the complete UI
            for the target component;
            this should be an instance
            of one of the MultiXxxxUI classes
uis - a Vector;
            generally this is the uis field
            of the mui argument
target - a component whose UI is represented by mui
Returns:
mui if the component has any auxiliary UI objects;
         otherwise, returns the UI object for the default look and feel
         or null if the default UI object couldn't be found
See Also:
UIManager.getAuxiliaryLookAndFeels(), 
UIDefaults.getUI(javax.swing.JComponent), 
MultiButtonUI.uis, 
MultiButtonUI.createUI(javax.swing.JComponent)


"
MultiLookAndFeel,getDefaults(),UIDefaults,"Creates, initializes, and returns the look and feel specific defaults.","

getDefaults
public UIDefaults getDefaults()
Creates, initializes, and returns
 the look and feel specific defaults.
 For this look and feel,
 the defaults consist solely of
 mappings of UI class IDs
 (such as ""ButtonUI"")
 to ComponentUI class names
 (such as ""javax.swing.plaf.multi.MultiButtonUI"").

Overrides:
getDefaults in class LookAndFeel
Returns:
an initialized UIDefaults object
See Also:
JComponent.getUIClassID()


"
MultiLookAndFeel,getDescription(),String,Returns a one-line description of this look and feel.,"

getDescription
public String getDescription()
Returns a one-line description of this look and feel.

Specified by:
getDescription in class LookAndFeel
Returns:
a descriptive string such as ""Allows multiple UI instances per component instance""


"
MultiLookAndFeel,getID(),String,"Returns a string, suitable for use by applications/services, that identifies this look and feel.","

getID
public String getID()
Returns a string, suitable for use by applications/services,
 that identifies this look and feel.

Specified by:
getID in class LookAndFeel
Returns:
""Multiplex""


"
MultiLookAndFeel,getName(),String,"Returns a string, suitable for use in menus, that identifies this look and feel.","

getName
public String getName()
Returns a string, suitable for use in menus,
 that identifies this look and feel.

Specified by:
getName in class LookAndFeel
Returns:
a string such as ""Multiplexing Look and Feel""


"
MultiLookAndFeel,isNativeLookAndFeel(),boolean,Returns false; this look and feel is not native to any platform.,"

isNativeLookAndFeel
public boolean isNativeLookAndFeel()
Returns false;
 this look and feel is not native to any platform.

Specified by:
isNativeLookAndFeel in class LookAndFeel
Returns:
false


"
MultiLookAndFeel,isSupportedLookAndFeel(),boolean,Returns true; every platform permits this look and feel.,"

isSupportedLookAndFeel
public boolean isSupportedLookAndFeel()
Returns true;
 every platform permits this look and feel.

Specified by:
isSupportedLookAndFeel in class LookAndFeel
Returns:
true
See Also:
UIManager.setLookAndFeel(javax.swing.LookAndFeel)


"
MultiLookAndFeel,uisToArray(Vector uis),protected static ComponentUI[],"Creates an array, populates it with UI objects from the passed-in vector, and returns the array.","

uisToArray
protected static ComponentUI[] uisToArray(Vector uis)
Creates an array,
 populates it with UI objects from the passed-in vector,
 and returns the array.
 If uis is null,
 this method returns an array with zero elements.
 If uis is an empty vector,
 this method returns null.
 A run-time error occurs if any objects in the uis vector
 are not of type ComponentUI.

Parameters:
uis - a vector containing ComponentUI objects
Returns:
an array equivalent to the passed-in vector


"
MultiMenuBarUI,"contains(JComponent a, int b, int c)",boolean,Invokes the contains method on each UI handled by this object.,"

contains
public boolean contains(JComponent a,
                        int b,
                        int c)
Invokes the contains method on each UI handled by this object.

Overrides:
contains in class ComponentUI
Parameters:
a - the component where the x,y location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
b - the x coordinate of the point
c - the y coordinate of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.contains(int, int), 
Component.contains(int, int)


"
MultiMenuBarUI,createUI(JComponent a),static ComponentUI,Returns a multiplexing UI instance if any of the auxiliary LookAndFeels supports this UI.,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
MultiMenuBarUI,"getAccessibleChild(JComponent a, int b)",Accessible,Invokes the getAccessibleChild method on each UI handled by this object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent a,
                                     int b)
Invokes the getAccessibleChild method on each UI handled by this object.

Overrides:
getAccessibleChild in class ComponentUI
b - zero-based index of child
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)


"
MultiMenuBarUI,getAccessibleChildrenCount(JComponent a),int,Invokes the getAccessibleChildrenCount method on each UI handled by this object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent a)
Invokes the getAccessibleChildrenCount method on each UI handled by this object.

Overrides:
getAccessibleChildrenCount in class ComponentUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)


"
MultiMenuBarUI,getMaximumSize(JComponent a),Dimension,Invokes the getMaximumSize method on each UI handled by this object.,"

getMaximumSize
public Dimension getMaximumSize(JComponent a)
Invokes the getMaximumSize method on each UI handled by this object.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
a - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
MultiMenuBarUI,getMinimumSize(JComponent a),Dimension,Invokes the getMinimumSize method on each UI handled by this object.,"

getMinimumSize
public Dimension getMinimumSize(JComponent a)
Invokes the getMinimumSize method on each UI handled by this object.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
a - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MultiMenuBarUI,getPreferredSize(JComponent a),Dimension,Invokes the getPreferredSize method on each UI handled by this object.,"

getPreferredSize
public Dimension getPreferredSize(JComponent a)
Invokes the getPreferredSize method on each UI handled by this object.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
a - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MultiMenuBarUI,getUIs(),ComponentUI[],Returns the list of UIs associated with this multiplexing UI.,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
MultiMenuBarUI,installUI(JComponent a),void,Invokes the installUI method on each UI handled by this object.,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MultiMenuBarUI,"paint(Graphics a, JComponent b)",void,Invokes the paint method on each UI handled by this object.,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MultiMenuBarUI,uninstallUI(JComponent a),void,Invokes the uninstallUI method on each UI handled by this object.,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MultiMenuBarUI,"update(Graphics a, JComponent b)",void,Invokes the update method on each UI handled by this object.,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
MultiMenuItemUI,"contains(JComponent a, int b, int c)",boolean,Invokes the contains method on each UI handled by this object.,"

contains
public boolean contains(JComponent a,
                        int b,
                        int c)
Invokes the contains method on each UI handled by this object.

Overrides:
contains in class ComponentUI
Parameters:
a - the component where the x,y location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
b - the x coordinate of the point
c - the y coordinate of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.contains(int, int), 
Component.contains(int, int)


"
MultiMenuItemUI,createUI(JComponent a),static ComponentUI,Returns a multiplexing UI instance if any of the auxiliary LookAndFeels supports this UI.,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
MultiMenuItemUI,"getAccessibleChild(JComponent a, int b)",Accessible,Invokes the getAccessibleChild method on each UI handled by this object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent a,
                                     int b)
Invokes the getAccessibleChild method on each UI handled by this object.

Overrides:
getAccessibleChild in class ComponentUI
b - zero-based index of child
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)


"
MultiMenuItemUI,getAccessibleChildrenCount(JComponent a),int,Invokes the getAccessibleChildrenCount method on each UI handled by this object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent a)
Invokes the getAccessibleChildrenCount method on each UI handled by this object.

Overrides:
getAccessibleChildrenCount in class ComponentUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)


"
MultiMenuItemUI,getMaximumSize(JComponent a),Dimension,Invokes the getMaximumSize method on each UI handled by this object.,"

getMaximumSize
public Dimension getMaximumSize(JComponent a)
Invokes the getMaximumSize method on each UI handled by this object.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
a - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
MultiMenuItemUI,getMinimumSize(JComponent a),Dimension,Invokes the getMinimumSize method on each UI handled by this object.,"

getMinimumSize
public Dimension getMinimumSize(JComponent a)
Invokes the getMinimumSize method on each UI handled by this object.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
a - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MultiMenuItemUI,getPreferredSize(JComponent a),Dimension,Invokes the getPreferredSize method on each UI handled by this object.,"

getPreferredSize
public Dimension getPreferredSize(JComponent a)
Invokes the getPreferredSize method on each UI handled by this object.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
a - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MultiMenuItemUI,getUIs(),ComponentUI[],Returns the list of UIs associated with this multiplexing UI.,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
MultiMenuItemUI,installUI(JComponent a),void,Invokes the installUI method on each UI handled by this object.,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MultiMenuItemUI,"paint(Graphics a, JComponent b)",void,Invokes the paint method on each UI handled by this object.,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MultiMenuItemUI,uninstallUI(JComponent a),void,Invokes the uninstallUI method on each UI handled by this object.,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MultiMenuItemUI,"update(Graphics a, JComponent b)",void,Invokes the update method on each UI handled by this object.,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
MultiOptionPaneUI,"contains(JComponent a, int b, int c)",boolean,Invokes the contains method on each UI handled by this object.,"

contains
public boolean contains(JComponent a,
                        int b,
                        int c)
Invokes the contains method on each UI handled by this object.

Overrides:
contains in class ComponentUI
Parameters:
a - the component where the x,y location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
b - the x coordinate of the point
c - the y coordinate of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.contains(int, int), 
Component.contains(int, int)


"
MultiOptionPaneUI,containsCustomComponents(JOptionPane a),boolean,Invokes the containsCustomComponents method on each UI handled by this object.,"

containsCustomComponents
public boolean containsCustomComponents(JOptionPane a)
Invokes the containsCustomComponents method on each UI handled by this object.

Specified by:
containsCustomComponents in class OptionPaneUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel


"
MultiOptionPaneUI,createUI(JComponent a),static ComponentUI,Returns a multiplexing UI instance if any of the auxiliary LookAndFeels supports this UI.,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
MultiOptionPaneUI,"getAccessibleChild(JComponent a, int b)",Accessible,Invokes the getAccessibleChild method on each UI handled by this object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent a,
                                     int b)
Invokes the getAccessibleChild method on each UI handled by this object.

Overrides:
getAccessibleChild in class ComponentUI
b - zero-based index of child
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)


"
MultiOptionPaneUI,getAccessibleChildrenCount(JComponent a),int,Invokes the getAccessibleChildrenCount method on each UI handled by this object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent a)
Invokes the getAccessibleChildrenCount method on each UI handled by this object.

Overrides:
getAccessibleChildrenCount in class ComponentUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)


"
MultiOptionPaneUI,getMaximumSize(JComponent a),Dimension,Invokes the getMaximumSize method on each UI handled by this object.,"

getMaximumSize
public Dimension getMaximumSize(JComponent a)
Invokes the getMaximumSize method on each UI handled by this object.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
a - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
MultiOptionPaneUI,getMinimumSize(JComponent a),Dimension,Invokes the getMinimumSize method on each UI handled by this object.,"

getMinimumSize
public Dimension getMinimumSize(JComponent a)
Invokes the getMinimumSize method on each UI handled by this object.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
a - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MultiOptionPaneUI,getPreferredSize(JComponent a),Dimension,Invokes the getPreferredSize method on each UI handled by this object.,"

getPreferredSize
public Dimension getPreferredSize(JComponent a)
Invokes the getPreferredSize method on each UI handled by this object.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
a - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MultiOptionPaneUI,getUIs(),ComponentUI[],Returns the list of UIs associated with this multiplexing UI.,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
MultiOptionPaneUI,installUI(JComponent a),void,Invokes the installUI method on each UI handled by this object.,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MultiOptionPaneUI,"paint(Graphics a, JComponent b)",void,Invokes the paint method on each UI handled by this object.,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MultiOptionPaneUI,selectInitialValue(JOptionPane a),void,Invokes the selectInitialValue method on each UI handled by this object.,"

selectInitialValue
public void selectInitialValue(JOptionPane a)
Invokes the selectInitialValue method on each UI handled by this object.

Specified by:
selectInitialValue in class OptionPaneUI


"
MultiOptionPaneUI,uninstallUI(JComponent a),void,Invokes the uninstallUI method on each UI handled by this object.,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MultiOptionPaneUI,"update(Graphics a, JComponent b)",void,Invokes the update method on each UI handled by this object.,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
MultiPanelUI,"contains(JComponent a, int b, int c)",boolean,Invokes the contains method on each UI handled by this object.,"

contains
public boolean contains(JComponent a,
                        int b,
                        int c)
Invokes the contains method on each UI handled by this object.

Overrides:
contains in class ComponentUI
Parameters:
a - the component where the x,y location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
b - the x coordinate of the point
c - the y coordinate of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.contains(int, int), 
Component.contains(int, int)


"
MultiPanelUI,createUI(JComponent a),static ComponentUI,Returns a multiplexing UI instance if any of the auxiliary LookAndFeels supports this UI.,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
MultiPanelUI,"getAccessibleChild(JComponent a, int b)",Accessible,Invokes the getAccessibleChild method on each UI handled by this object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent a,
                                     int b)
Invokes the getAccessibleChild method on each UI handled by this object.

Overrides:
getAccessibleChild in class ComponentUI
b - zero-based index of child
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)


"
MultiPanelUI,getAccessibleChildrenCount(JComponent a),int,Invokes the getAccessibleChildrenCount method on each UI handled by this object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent a)
Invokes the getAccessibleChildrenCount method on each UI handled by this object.

Overrides:
getAccessibleChildrenCount in class ComponentUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)


"
MultiPanelUI,getMaximumSize(JComponent a),Dimension,Invokes the getMaximumSize method on each UI handled by this object.,"

getMaximumSize
public Dimension getMaximumSize(JComponent a)
Invokes the getMaximumSize method on each UI handled by this object.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
a - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
MultiPanelUI,getMinimumSize(JComponent a),Dimension,Invokes the getMinimumSize method on each UI handled by this object.,"

getMinimumSize
public Dimension getMinimumSize(JComponent a)
Invokes the getMinimumSize method on each UI handled by this object.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
a - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MultiPanelUI,getPreferredSize(JComponent a),Dimension,Invokes the getPreferredSize method on each UI handled by this object.,"

getPreferredSize
public Dimension getPreferredSize(JComponent a)
Invokes the getPreferredSize method on each UI handled by this object.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
a - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MultiPanelUI,getUIs(),ComponentUI[],Returns the list of UIs associated with this multiplexing UI.,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
MultiPanelUI,installUI(JComponent a),void,Invokes the installUI method on each UI handled by this object.,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MultiPanelUI,"paint(Graphics a, JComponent b)",void,Invokes the paint method on each UI handled by this object.,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MultiPanelUI,uninstallUI(JComponent a),void,Invokes the uninstallUI method on each UI handled by this object.,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MultiPanelUI,"update(Graphics a, JComponent b)",void,Invokes the update method on each UI handled by this object.,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
MultiPopupMenuUI,"contains(JComponent a, int b, int c)",boolean,Invokes the contains method on each UI handled by this object.,"

contains
public boolean contains(JComponent a,
                        int b,
                        int c)
Invokes the contains method on each UI handled by this object.

Overrides:
contains in class ComponentUI
Parameters:
a - the component where the x,y location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
b - the x coordinate of the point
c - the y coordinate of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.contains(int, int), 
Component.contains(int, int)


"
MultiPopupMenuUI,createUI(JComponent a),static ComponentUI,Returns a multiplexing UI instance if any of the auxiliary LookAndFeels supports this UI.,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
MultiPopupMenuUI,"getAccessibleChild(JComponent a, int b)",Accessible,Invokes the getAccessibleChild method on each UI handled by this object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent a,
                                     int b)
Invokes the getAccessibleChild method on each UI handled by this object.

Overrides:
getAccessibleChild in class ComponentUI
b - zero-based index of child
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)


"
MultiPopupMenuUI,getAccessibleChildrenCount(JComponent a),int,Invokes the getAccessibleChildrenCount method on each UI handled by this object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent a)
Invokes the getAccessibleChildrenCount method on each UI handled by this object.

Overrides:
getAccessibleChildrenCount in class ComponentUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)


"
MultiPopupMenuUI,getMaximumSize(JComponent a),Dimension,Invokes the getMaximumSize method on each UI handled by this object.,"

getMaximumSize
public Dimension getMaximumSize(JComponent a)
Invokes the getMaximumSize method on each UI handled by this object.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
a - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
MultiPopupMenuUI,getMinimumSize(JComponent a),Dimension,Invokes the getMinimumSize method on each UI handled by this object.,"

getMinimumSize
public Dimension getMinimumSize(JComponent a)
Invokes the getMinimumSize method on each UI handled by this object.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
a - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MultiPopupMenuUI,"getPopup(JPopupMenu a, int b, int c)",Popup,Invokes the getPopup method on each UI handled by this object.,"

getPopup
public Popup getPopup(JPopupMenu a,
                      int b,
                      int c)
Invokes the getPopup method on each UI handled by this object.

Overrides:
getPopup in class PopupMenuUI
Parameters:
a - JPopupMenu requesting Popup
b - Screen x location Popup is to be shown at
c - Screen y location Popup is to be shown at.
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
Since:
1.4


"
MultiPopupMenuUI,getPreferredSize(JComponent a),Dimension,Invokes the getPreferredSize method on each UI handled by this object.,"

getPreferredSize
public Dimension getPreferredSize(JComponent a)
Invokes the getPreferredSize method on each UI handled by this object.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
a - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MultiPopupMenuUI,getUIs(),ComponentUI[],Returns the list of UIs associated with this multiplexing UI.,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
MultiPopupMenuUI,installUI(JComponent a),void,Invokes the installUI method on each UI handled by this object.,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MultiPopupMenuUI,isPopupTrigger(MouseEvent a),boolean,Invokes the isPopupTrigger method on each UI handled by this object.,"

isPopupTrigger
public boolean isPopupTrigger(MouseEvent a)
Invokes the isPopupTrigger method on each UI handled by this object.

Overrides:
isPopupTrigger in class PopupMenuUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
Since:
1.3


"
MultiPopupMenuUI,"paint(Graphics a, JComponent b)",void,Invokes the paint method on each UI handled by this object.,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MultiPopupMenuUI,uninstallUI(JComponent a),void,Invokes the uninstallUI method on each UI handled by this object.,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MultiPopupMenuUI,"update(Graphics a, JComponent b)",void,Invokes the update method on each UI handled by this object.,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
MultiProgressBarUI,"contains(JComponent a, int b, int c)",boolean,Invokes the contains method on each UI handled by this object.,"

contains
public boolean contains(JComponent a,
                        int b,
                        int c)
Invokes the contains method on each UI handled by this object.

Overrides:
contains in class ComponentUI
Parameters:
a - the component where the x,y location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
b - the x coordinate of the point
c - the y coordinate of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.contains(int, int), 
Component.contains(int, int)


"
MultiProgressBarUI,createUI(JComponent a),static ComponentUI,Returns a multiplexing UI instance if any of the auxiliary LookAndFeels supports this UI.,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
MultiProgressBarUI,"getAccessibleChild(JComponent a, int b)",Accessible,Invokes the getAccessibleChild method on each UI handled by this object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent a,
                                     int b)
Invokes the getAccessibleChild method on each UI handled by this object.

Overrides:
getAccessibleChild in class ComponentUI
b - zero-based index of child
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)


"
MultiProgressBarUI,getAccessibleChildrenCount(JComponent a),int,Invokes the getAccessibleChildrenCount method on each UI handled by this object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent a)
Invokes the getAccessibleChildrenCount method on each UI handled by this object.

Overrides:
getAccessibleChildrenCount in class ComponentUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)


"
MultiProgressBarUI,getMaximumSize(JComponent a),Dimension,Invokes the getMaximumSize method on each UI handled by this object.,"

getMaximumSize
public Dimension getMaximumSize(JComponent a)
Invokes the getMaximumSize method on each UI handled by this object.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
a - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
MultiProgressBarUI,getMinimumSize(JComponent a),Dimension,Invokes the getMinimumSize method on each UI handled by this object.,"

getMinimumSize
public Dimension getMinimumSize(JComponent a)
Invokes the getMinimumSize method on each UI handled by this object.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
a - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MultiProgressBarUI,getPreferredSize(JComponent a),Dimension,Invokes the getPreferredSize method on each UI handled by this object.,"

getPreferredSize
public Dimension getPreferredSize(JComponent a)
Invokes the getPreferredSize method on each UI handled by this object.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
a - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MultiProgressBarUI,getUIs(),ComponentUI[],Returns the list of UIs associated with this multiplexing UI.,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
MultiProgressBarUI,installUI(JComponent a),void,Invokes the installUI method on each UI handled by this object.,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MultiProgressBarUI,"paint(Graphics a, JComponent b)",void,Invokes the paint method on each UI handled by this object.,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MultiProgressBarUI,uninstallUI(JComponent a),void,Invokes the uninstallUI method on each UI handled by this object.,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MultiProgressBarUI,"update(Graphics a, JComponent b)",void,Invokes the update method on each UI handled by this object.,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
MultiRootPaneUI,"contains(JComponent a, int b, int c)",boolean,Invokes the contains method on each UI handled by this object.,"

contains
public boolean contains(JComponent a,
                        int b,
                        int c)
Invokes the contains method on each UI handled by this object.

Overrides:
contains in class ComponentUI
Parameters:
a - the component where the x,y location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
b - the x coordinate of the point
c - the y coordinate of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.contains(int, int), 
Component.contains(int, int)


"
MultiRootPaneUI,createUI(JComponent a),static ComponentUI,Returns a multiplexing UI instance if any of the auxiliary LookAndFeels supports this UI.,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
MultiRootPaneUI,"getAccessibleChild(JComponent a, int b)",Accessible,Invokes the getAccessibleChild method on each UI handled by this object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent a,
                                     int b)
Invokes the getAccessibleChild method on each UI handled by this object.

Overrides:
getAccessibleChild in class ComponentUI
b - zero-based index of child
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)


"
MultiRootPaneUI,getAccessibleChildrenCount(JComponent a),int,Invokes the getAccessibleChildrenCount method on each UI handled by this object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent a)
Invokes the getAccessibleChildrenCount method on each UI handled by this object.

Overrides:
getAccessibleChildrenCount in class ComponentUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)


"
MultiRootPaneUI,getMaximumSize(JComponent a),Dimension,Invokes the getMaximumSize method on each UI handled by this object.,"

getMaximumSize
public Dimension getMaximumSize(JComponent a)
Invokes the getMaximumSize method on each UI handled by this object.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
a - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
MultiRootPaneUI,getMinimumSize(JComponent a),Dimension,Invokes the getMinimumSize method on each UI handled by this object.,"

getMinimumSize
public Dimension getMinimumSize(JComponent a)
Invokes the getMinimumSize method on each UI handled by this object.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
a - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MultiRootPaneUI,getPreferredSize(JComponent a),Dimension,Invokes the getPreferredSize method on each UI handled by this object.,"

getPreferredSize
public Dimension getPreferredSize(JComponent a)
Invokes the getPreferredSize method on each UI handled by this object.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
a - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MultiRootPaneUI,getUIs(),ComponentUI[],Returns the list of UIs associated with this multiplexing UI.,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
MultiRootPaneUI,installUI(JComponent a),void,Invokes the installUI method on each UI handled by this object.,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MultiRootPaneUI,"paint(Graphics a, JComponent b)",void,Invokes the paint method on each UI handled by this object.,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MultiRootPaneUI,uninstallUI(JComponent a),void,Invokes the uninstallUI method on each UI handled by this object.,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MultiRootPaneUI,"update(Graphics a, JComponent b)",void,Invokes the update method on each UI handled by this object.,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
MultiScrollBarUI,"contains(JComponent a, int b, int c)",boolean,Invokes the contains method on each UI handled by this object.,"

contains
public boolean contains(JComponent a,
                        int b,
                        int c)
Invokes the contains method on each UI handled by this object.

Overrides:
contains in class ComponentUI
Parameters:
a - the component where the x,y location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
b - the x coordinate of the point
c - the y coordinate of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.contains(int, int), 
Component.contains(int, int)


"
MultiScrollBarUI,createUI(JComponent a),static ComponentUI,Returns a multiplexing UI instance if any of the auxiliary LookAndFeels supports this UI.,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
MultiScrollBarUI,"getAccessibleChild(JComponent a, int b)",Accessible,Invokes the getAccessibleChild method on each UI handled by this object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent a,
                                     int b)
Invokes the getAccessibleChild method on each UI handled by this object.

Overrides:
getAccessibleChild in class ComponentUI
b - zero-based index of child
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)


"
MultiScrollBarUI,getAccessibleChildrenCount(JComponent a),int,Invokes the getAccessibleChildrenCount method on each UI handled by this object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent a)
Invokes the getAccessibleChildrenCount method on each UI handled by this object.

Overrides:
getAccessibleChildrenCount in class ComponentUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)


"
MultiScrollBarUI,getMaximumSize(JComponent a),Dimension,Invokes the getMaximumSize method on each UI handled by this object.,"

getMaximumSize
public Dimension getMaximumSize(JComponent a)
Invokes the getMaximumSize method on each UI handled by this object.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
a - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
MultiScrollBarUI,getMinimumSize(JComponent a),Dimension,Invokes the getMinimumSize method on each UI handled by this object.,"

getMinimumSize
public Dimension getMinimumSize(JComponent a)
Invokes the getMinimumSize method on each UI handled by this object.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
a - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MultiScrollBarUI,getPreferredSize(JComponent a),Dimension,Invokes the getPreferredSize method on each UI handled by this object.,"

getPreferredSize
public Dimension getPreferredSize(JComponent a)
Invokes the getPreferredSize method on each UI handled by this object.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
a - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MultiScrollBarUI,getUIs(),ComponentUI[],Returns the list of UIs associated with this multiplexing UI.,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
MultiScrollBarUI,installUI(JComponent a),void,Invokes the installUI method on each UI handled by this object.,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MultiScrollBarUI,"paint(Graphics a, JComponent b)",void,Invokes the paint method on each UI handled by this object.,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MultiScrollBarUI,uninstallUI(JComponent a),void,Invokes the uninstallUI method on each UI handled by this object.,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MultiScrollBarUI,"update(Graphics a, JComponent b)",void,Invokes the update method on each UI handled by this object.,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
MultiScrollPaneUI,"contains(JComponent a, int b, int c)",boolean,Invokes the contains method on each UI handled by this object.,"

contains
public boolean contains(JComponent a,
                        int b,
                        int c)
Invokes the contains method on each UI handled by this object.

Overrides:
contains in class ComponentUI
Parameters:
a - the component where the x,y location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
b - the x coordinate of the point
c - the y coordinate of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.contains(int, int), 
Component.contains(int, int)


"
MultiScrollPaneUI,createUI(JComponent a),static ComponentUI,Returns a multiplexing UI instance if any of the auxiliary LookAndFeels supports this UI.,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
MultiScrollPaneUI,"getAccessibleChild(JComponent a, int b)",Accessible,Invokes the getAccessibleChild method on each UI handled by this object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent a,
                                     int b)
Invokes the getAccessibleChild method on each UI handled by this object.

Overrides:
getAccessibleChild in class ComponentUI
b - zero-based index of child
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)


"
MultiScrollPaneUI,getAccessibleChildrenCount(JComponent a),int,Invokes the getAccessibleChildrenCount method on each UI handled by this object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent a)
Invokes the getAccessibleChildrenCount method on each UI handled by this object.

Overrides:
getAccessibleChildrenCount in class ComponentUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)


"
MultiScrollPaneUI,getMaximumSize(JComponent a),Dimension,Invokes the getMaximumSize method on each UI handled by this object.,"

getMaximumSize
public Dimension getMaximumSize(JComponent a)
Invokes the getMaximumSize method on each UI handled by this object.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
a - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
MultiScrollPaneUI,getMinimumSize(JComponent a),Dimension,Invokes the getMinimumSize method on each UI handled by this object.,"

getMinimumSize
public Dimension getMinimumSize(JComponent a)
Invokes the getMinimumSize method on each UI handled by this object.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
a - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MultiScrollPaneUI,getPreferredSize(JComponent a),Dimension,Invokes the getPreferredSize method on each UI handled by this object.,"

getPreferredSize
public Dimension getPreferredSize(JComponent a)
Invokes the getPreferredSize method on each UI handled by this object.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
a - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MultiScrollPaneUI,getUIs(),ComponentUI[],Returns the list of UIs associated with this multiplexing UI.,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
MultiScrollPaneUI,installUI(JComponent a),void,Invokes the installUI method on each UI handled by this object.,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MultiScrollPaneUI,"paint(Graphics a, JComponent b)",void,Invokes the paint method on each UI handled by this object.,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MultiScrollPaneUI,uninstallUI(JComponent a),void,Invokes the uninstallUI method on each UI handled by this object.,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MultiScrollPaneUI,"update(Graphics a, JComponent b)",void,Invokes the update method on each UI handled by this object.,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
MultiSeparatorUI,"contains(JComponent a, int b, int c)",boolean,Invokes the contains method on each UI handled by this object.,"

contains
public boolean contains(JComponent a,
                        int b,
                        int c)
Invokes the contains method on each UI handled by this object.

Overrides:
contains in class ComponentUI
Parameters:
a - the component where the x,y location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
b - the x coordinate of the point
c - the y coordinate of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.contains(int, int), 
Component.contains(int, int)


"
MultiSeparatorUI,createUI(JComponent a),static ComponentUI,Returns a multiplexing UI instance if any of the auxiliary LookAndFeels supports this UI.,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
MultiSeparatorUI,"getAccessibleChild(JComponent a, int b)",Accessible,Invokes the getAccessibleChild method on each UI handled by this object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent a,
                                     int b)
Invokes the getAccessibleChild method on each UI handled by this object.

Overrides:
getAccessibleChild in class ComponentUI
b - zero-based index of child
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)


"
MultiSeparatorUI,getAccessibleChildrenCount(JComponent a),int,Invokes the getAccessibleChildrenCount method on each UI handled by this object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent a)
Invokes the getAccessibleChildrenCount method on each UI handled by this object.

Overrides:
getAccessibleChildrenCount in class ComponentUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)


"
MultiSeparatorUI,getMaximumSize(JComponent a),Dimension,Invokes the getMaximumSize method on each UI handled by this object.,"

getMaximumSize
public Dimension getMaximumSize(JComponent a)
Invokes the getMaximumSize method on each UI handled by this object.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
a - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
MultiSeparatorUI,getMinimumSize(JComponent a),Dimension,Invokes the getMinimumSize method on each UI handled by this object.,"

getMinimumSize
public Dimension getMinimumSize(JComponent a)
Invokes the getMinimumSize method on each UI handled by this object.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
a - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MultiSeparatorUI,getPreferredSize(JComponent a),Dimension,Invokes the getPreferredSize method on each UI handled by this object.,"

getPreferredSize
public Dimension getPreferredSize(JComponent a)
Invokes the getPreferredSize method on each UI handled by this object.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
a - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MultiSeparatorUI,getUIs(),ComponentUI[],Returns the list of UIs associated with this multiplexing UI.,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
MultiSeparatorUI,installUI(JComponent a),void,Invokes the installUI method on each UI handled by this object.,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MultiSeparatorUI,"paint(Graphics a, JComponent b)",void,Invokes the paint method on each UI handled by this object.,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MultiSeparatorUI,uninstallUI(JComponent a),void,Invokes the uninstallUI method on each UI handled by this object.,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MultiSeparatorUI,"update(Graphics a, JComponent b)",void,Invokes the update method on each UI handled by this object.,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
MultiSliderUI,"contains(JComponent a, int b, int c)",boolean,Invokes the contains method on each UI handled by this object.,"

contains
public boolean contains(JComponent a,
                        int b,
                        int c)
Invokes the contains method on each UI handled by this object.

Overrides:
contains in class ComponentUI
Parameters:
a - the component where the x,y location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
b - the x coordinate of the point
c - the y coordinate of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.contains(int, int), 
Component.contains(int, int)


"
MultiSliderUI,createUI(JComponent a),static ComponentUI,Returns a multiplexing UI instance if any of the auxiliary LookAndFeels supports this UI.,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
MultiSliderUI,"getAccessibleChild(JComponent a, int b)",Accessible,Invokes the getAccessibleChild method on each UI handled by this object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent a,
                                     int b)
Invokes the getAccessibleChild method on each UI handled by this object.

Overrides:
getAccessibleChild in class ComponentUI
b - zero-based index of child
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)


"
MultiSliderUI,getAccessibleChildrenCount(JComponent a),int,Invokes the getAccessibleChildrenCount method on each UI handled by this object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent a)
Invokes the getAccessibleChildrenCount method on each UI handled by this object.

Overrides:
getAccessibleChildrenCount in class ComponentUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)


"
MultiSliderUI,getMaximumSize(JComponent a),Dimension,Invokes the getMaximumSize method on each UI handled by this object.,"

getMaximumSize
public Dimension getMaximumSize(JComponent a)
Invokes the getMaximumSize method on each UI handled by this object.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
a - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
MultiSliderUI,getMinimumSize(JComponent a),Dimension,Invokes the getMinimumSize method on each UI handled by this object.,"

getMinimumSize
public Dimension getMinimumSize(JComponent a)
Invokes the getMinimumSize method on each UI handled by this object.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
a - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MultiSliderUI,getPreferredSize(JComponent a),Dimension,Invokes the getPreferredSize method on each UI handled by this object.,"

getPreferredSize
public Dimension getPreferredSize(JComponent a)
Invokes the getPreferredSize method on each UI handled by this object.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
a - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MultiSliderUI,getUIs(),ComponentUI[],Returns the list of UIs associated with this multiplexing UI.,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
MultiSliderUI,installUI(JComponent a),void,Invokes the installUI method on each UI handled by this object.,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MultiSliderUI,"paint(Graphics a, JComponent b)",void,Invokes the paint method on each UI handled by this object.,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MultiSliderUI,uninstallUI(JComponent a),void,Invokes the uninstallUI method on each UI handled by this object.,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MultiSliderUI,"update(Graphics a, JComponent b)",void,Invokes the update method on each UI handled by this object.,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
MultiSpinnerUI,"contains(JComponent a, int b, int c)",boolean,Invokes the contains method on each UI handled by this object.,"

contains
public boolean contains(JComponent a,
                        int b,
                        int c)
Invokes the contains method on each UI handled by this object.

Overrides:
contains in class ComponentUI
Parameters:
a - the component where the x,y location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
b - the x coordinate of the point
c - the y coordinate of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.contains(int, int), 
Component.contains(int, int)


"
MultiSpinnerUI,createUI(JComponent a),static ComponentUI,Returns a multiplexing UI instance if any of the auxiliary LookAndFeels supports this UI.,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
MultiSpinnerUI,"getAccessibleChild(JComponent a, int b)",Accessible,Invokes the getAccessibleChild method on each UI handled by this object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent a,
                                     int b)
Invokes the getAccessibleChild method on each UI handled by this object.

Overrides:
getAccessibleChild in class ComponentUI
b - zero-based index of child
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)


"
MultiSpinnerUI,getAccessibleChildrenCount(JComponent a),int,Invokes the getAccessibleChildrenCount method on each UI handled by this object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent a)
Invokes the getAccessibleChildrenCount method on each UI handled by this object.

Overrides:
getAccessibleChildrenCount in class ComponentUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)


"
MultiSpinnerUI,getMaximumSize(JComponent a),Dimension,Invokes the getMaximumSize method on each UI handled by this object.,"

getMaximumSize
public Dimension getMaximumSize(JComponent a)
Invokes the getMaximumSize method on each UI handled by this object.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
a - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
MultiSpinnerUI,getMinimumSize(JComponent a),Dimension,Invokes the getMinimumSize method on each UI handled by this object.,"

getMinimumSize
public Dimension getMinimumSize(JComponent a)
Invokes the getMinimumSize method on each UI handled by this object.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
a - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MultiSpinnerUI,getPreferredSize(JComponent a),Dimension,Invokes the getPreferredSize method on each UI handled by this object.,"

getPreferredSize
public Dimension getPreferredSize(JComponent a)
Invokes the getPreferredSize method on each UI handled by this object.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
a - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MultiSpinnerUI,getUIs(),ComponentUI[],Returns the list of UIs associated with this multiplexing UI.,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
MultiSpinnerUI,installUI(JComponent a),void,Invokes the installUI method on each UI handled by this object.,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MultiSpinnerUI,"paint(Graphics a, JComponent b)",void,Invokes the paint method on each UI handled by this object.,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MultiSpinnerUI,uninstallUI(JComponent a),void,Invokes the uninstallUI method on each UI handled by this object.,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MultiSpinnerUI,"update(Graphics a, JComponent b)",void,Invokes the update method on each UI handled by this object.,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
MultiSplitPaneUI,"contains(JComponent a, int b, int c)",boolean,Invokes the contains method on each UI handled by this object.,"

contains
public boolean contains(JComponent a,
                        int b,
                        int c)
Invokes the contains method on each UI handled by this object.

Overrides:
contains in class ComponentUI
Parameters:
a - the component where the x,y location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
b - the x coordinate of the point
c - the y coordinate of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.contains(int, int), 
Component.contains(int, int)


"
MultiSplitPaneUI,createUI(JComponent a),static ComponentUI,Returns a multiplexing UI instance if any of the auxiliary LookAndFeels supports this UI.,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
MultiSplitPaneUI,"finishedPaintingChildren(JSplitPane a, Graphics b)",void,Invokes the finishedPaintingChildren method on each UI handled by this object.,"

finishedPaintingChildren
public void finishedPaintingChildren(JSplitPane a,
                                     Graphics b)
Invokes the finishedPaintingChildren method on each UI handled by this object.

Specified by:
finishedPaintingChildren in class SplitPaneUI


"
MultiSplitPaneUI,"getAccessibleChild(JComponent a, int b)",Accessible,Invokes the getAccessibleChild method on each UI handled by this object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent a,
                                     int b)
Invokes the getAccessibleChild method on each UI handled by this object.

Overrides:
getAccessibleChild in class ComponentUI
b - zero-based index of child
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)


"
MultiSplitPaneUI,getAccessibleChildrenCount(JComponent a),int,Invokes the getAccessibleChildrenCount method on each UI handled by this object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent a)
Invokes the getAccessibleChildrenCount method on each UI handled by this object.

Overrides:
getAccessibleChildrenCount in class ComponentUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)


"
MultiSplitPaneUI,getDividerLocation(JSplitPane a),int,Invokes the getDividerLocation method on each UI handled by this object.,"

getDividerLocation
public int getDividerLocation(JSplitPane a)
Invokes the getDividerLocation method on each UI handled by this object.

Specified by:
getDividerLocation in class SplitPaneUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel


"
MultiSplitPaneUI,getMaximumDividerLocation(JSplitPane a),int,Invokes the getMaximumDividerLocation method on each UI handled by this object.,"

getMaximumDividerLocation
public int getMaximumDividerLocation(JSplitPane a)
Invokes the getMaximumDividerLocation method on each UI handled by this object.

Specified by:
getMaximumDividerLocation in class SplitPaneUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel


"
MultiSplitPaneUI,getMaximumSize(JComponent a),Dimension,Invokes the getMaximumSize method on each UI handled by this object.,"

getMaximumSize
public Dimension getMaximumSize(JComponent a)
Invokes the getMaximumSize method on each UI handled by this object.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
a - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
MultiSplitPaneUI,getMinimumDividerLocation(JSplitPane a),int,Invokes the getMinimumDividerLocation method on each UI handled by this object.,"

getMinimumDividerLocation
public int getMinimumDividerLocation(JSplitPane a)
Invokes the getMinimumDividerLocation method on each UI handled by this object.

Specified by:
getMinimumDividerLocation in class SplitPaneUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel


"
MultiSplitPaneUI,getMinimumSize(JComponent a),Dimension,Invokes the getMinimumSize method on each UI handled by this object.,"

getMinimumSize
public Dimension getMinimumSize(JComponent a)
Invokes the getMinimumSize method on each UI handled by this object.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
a - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MultiSplitPaneUI,getPreferredSize(JComponent a),Dimension,Invokes the getPreferredSize method on each UI handled by this object.,"

getPreferredSize
public Dimension getPreferredSize(JComponent a)
Invokes the getPreferredSize method on each UI handled by this object.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
a - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MultiSplitPaneUI,getUIs(),ComponentUI[],Returns the list of UIs associated with this multiplexing UI.,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
MultiSplitPaneUI,installUI(JComponent a),void,Invokes the installUI method on each UI handled by this object.,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MultiSplitPaneUI,"paint(Graphics a, JComponent b)",void,Invokes the paint method on each UI handled by this object.,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MultiSplitPaneUI,resetToPreferredSizes(JSplitPane a),void,Invokes the resetToPreferredSizes method on each UI handled by this object.,"

resetToPreferredSizes
public void resetToPreferredSizes(JSplitPane a)
Invokes the resetToPreferredSizes method on each UI handled by this object.

Specified by:
resetToPreferredSizes in class SplitPaneUI


"
MultiSplitPaneUI,"setDividerLocation(JSplitPane a, int b)",void,Invokes the setDividerLocation method on each UI handled by this object.,"

setDividerLocation
public void setDividerLocation(JSplitPane a,
                               int b)
Invokes the setDividerLocation method on each UI handled by this object.

Specified by:
setDividerLocation in class SplitPaneUI


"
MultiSplitPaneUI,uninstallUI(JComponent a),void,Invokes the uninstallUI method on each UI handled by this object.,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MultiSplitPaneUI,"update(Graphics a, JComponent b)",void,Invokes the update method on each UI handled by this object.,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
MultiTabbedPaneUI,"contains(JComponent a, int b, int c)",boolean,Invokes the contains method on each UI handled by this object.,"

contains
public boolean contains(JComponent a,
                        int b,
                        int c)
Invokes the contains method on each UI handled by this object.

Overrides:
contains in class ComponentUI
Parameters:
a - the component where the x,y location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
b - the x coordinate of the point
c - the y coordinate of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.contains(int, int), 
Component.contains(int, int)


"
MultiTabbedPaneUI,createUI(JComponent a),static ComponentUI,Returns a multiplexing UI instance if any of the auxiliary LookAndFeels supports this UI.,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
MultiTabbedPaneUI,"getAccessibleChild(JComponent a, int b)",Accessible,Invokes the getAccessibleChild method on each UI handled by this object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent a,
                                     int b)
Invokes the getAccessibleChild method on each UI handled by this object.

Overrides:
getAccessibleChild in class ComponentUI
b - zero-based index of child
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)


"
MultiTabbedPaneUI,getAccessibleChildrenCount(JComponent a),int,Invokes the getAccessibleChildrenCount method on each UI handled by this object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent a)
Invokes the getAccessibleChildrenCount method on each UI handled by this object.

Overrides:
getAccessibleChildrenCount in class ComponentUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)


"
MultiTabbedPaneUI,getMaximumSize(JComponent a),Dimension,Invokes the getMaximumSize method on each UI handled by this object.,"

getMaximumSize
public Dimension getMaximumSize(JComponent a)
Invokes the getMaximumSize method on each UI handled by this object.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
a - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
MultiTabbedPaneUI,getMinimumSize(JComponent a),Dimension,Invokes the getMinimumSize method on each UI handled by this object.,"

getMinimumSize
public Dimension getMinimumSize(JComponent a)
Invokes the getMinimumSize method on each UI handled by this object.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
a - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MultiTabbedPaneUI,getPreferredSize(JComponent a),Dimension,Invokes the getPreferredSize method on each UI handled by this object.,"

getPreferredSize
public Dimension getPreferredSize(JComponent a)
Invokes the getPreferredSize method on each UI handled by this object.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
a - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MultiTabbedPaneUI,"getTabBounds(JTabbedPane a, int b)",Rectangle,Invokes the getTabBounds method on each UI handled by this object.,"

getTabBounds
public Rectangle getTabBounds(JTabbedPane a,
                              int b)
Invokes the getTabBounds method on each UI handled by this object.

Specified by:
getTabBounds in class TabbedPaneUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel


"
MultiTabbedPaneUI,getTabRunCount(JTabbedPane a),int,Invokes the getTabRunCount method on each UI handled by this object.,"

getTabRunCount
public int getTabRunCount(JTabbedPane a)
Invokes the getTabRunCount method on each UI handled by this object.

Specified by:
getTabRunCount in class TabbedPaneUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel


"
MultiTabbedPaneUI,getUIs(),ComponentUI[],Returns the list of UIs associated with this multiplexing UI.,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
MultiTabbedPaneUI,installUI(JComponent a),void,Invokes the installUI method on each UI handled by this object.,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MultiTabbedPaneUI,"paint(Graphics a, JComponent b)",void,Invokes the paint method on each UI handled by this object.,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MultiTabbedPaneUI,"tabForCoordinate(JTabbedPane a, int b, int c)",int,Invokes the tabForCoordinate method on each UI handled by this object.,"

tabForCoordinate
public int tabForCoordinate(JTabbedPane a,
                            int b,
                            int c)
Invokes the tabForCoordinate method on each UI handled by this object.

Specified by:
tabForCoordinate in class TabbedPaneUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel


"
MultiTabbedPaneUI,uninstallUI(JComponent a),void,Invokes the uninstallUI method on each UI handled by this object.,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MultiTabbedPaneUI,"update(Graphics a, JComponent b)",void,Invokes the update method on each UI handled by this object.,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
MultiTableHeaderUI,"contains(JComponent a, int b, int c)",boolean,Invokes the contains method on each UI handled by this object.,"

contains
public boolean contains(JComponent a,
                        int b,
                        int c)
Invokes the contains method on each UI handled by this object.

Overrides:
contains in class ComponentUI
Parameters:
a - the component where the x,y location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
b - the x coordinate of the point
c - the y coordinate of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.contains(int, int), 
Component.contains(int, int)


"
MultiTableHeaderUI,createUI(JComponent a),static ComponentUI,Returns a multiplexing UI instance if any of the auxiliary LookAndFeels supports this UI.,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
MultiTableHeaderUI,"getAccessibleChild(JComponent a, int b)",Accessible,Invokes the getAccessibleChild method on each UI handled by this object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent a,
                                     int b)
Invokes the getAccessibleChild method on each UI handled by this object.

Overrides:
getAccessibleChild in class ComponentUI
b - zero-based index of child
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)


"
MultiTableHeaderUI,getAccessibleChildrenCount(JComponent a),int,Invokes the getAccessibleChildrenCount method on each UI handled by this object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent a)
Invokes the getAccessibleChildrenCount method on each UI handled by this object.

Overrides:
getAccessibleChildrenCount in class ComponentUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)


"
MultiTableHeaderUI,getMaximumSize(JComponent a),Dimension,Invokes the getMaximumSize method on each UI handled by this object.,"

getMaximumSize
public Dimension getMaximumSize(JComponent a)
Invokes the getMaximumSize method on each UI handled by this object.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
a - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
MultiTableHeaderUI,getMinimumSize(JComponent a),Dimension,Invokes the getMinimumSize method on each UI handled by this object.,"

getMinimumSize
public Dimension getMinimumSize(JComponent a)
Invokes the getMinimumSize method on each UI handled by this object.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
a - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MultiTableHeaderUI,getPreferredSize(JComponent a),Dimension,Invokes the getPreferredSize method on each UI handled by this object.,"

getPreferredSize
public Dimension getPreferredSize(JComponent a)
Invokes the getPreferredSize method on each UI handled by this object.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
a - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MultiTableHeaderUI,getUIs(),ComponentUI[],Returns the list of UIs associated with this multiplexing UI.,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
MultiTableHeaderUI,installUI(JComponent a),void,Invokes the installUI method on each UI handled by this object.,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MultiTableHeaderUI,"paint(Graphics a, JComponent b)",void,Invokes the paint method on each UI handled by this object.,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MultiTableHeaderUI,uninstallUI(JComponent a),void,Invokes the uninstallUI method on each UI handled by this object.,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MultiTableHeaderUI,"update(Graphics a, JComponent b)",void,Invokes the update method on each UI handled by this object.,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
MultiTableUI,"contains(JComponent a, int b, int c)",boolean,Invokes the contains method on each UI handled by this object.,"

contains
public boolean contains(JComponent a,
                        int b,
                        int c)
Invokes the contains method on each UI handled by this object.

Overrides:
contains in class ComponentUI
Parameters:
a - the component where the x,y location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
b - the x coordinate of the point
c - the y coordinate of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.contains(int, int), 
Component.contains(int, int)


"
MultiTableUI,createUI(JComponent a),static ComponentUI,Returns a multiplexing UI instance if any of the auxiliary LookAndFeels supports this UI.,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
MultiTableUI,"getAccessibleChild(JComponent a, int b)",Accessible,Invokes the getAccessibleChild method on each UI handled by this object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent a,
                                     int b)
Invokes the getAccessibleChild method on each UI handled by this object.

Overrides:
getAccessibleChild in class ComponentUI
b - zero-based index of child
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)


"
MultiTableUI,getAccessibleChildrenCount(JComponent a),int,Invokes the getAccessibleChildrenCount method on each UI handled by this object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent a)
Invokes the getAccessibleChildrenCount method on each UI handled by this object.

Overrides:
getAccessibleChildrenCount in class ComponentUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)


"
MultiTableUI,getMaximumSize(JComponent a),Dimension,Invokes the getMaximumSize method on each UI handled by this object.,"

getMaximumSize
public Dimension getMaximumSize(JComponent a)
Invokes the getMaximumSize method on each UI handled by this object.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
a - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
MultiTableUI,getMinimumSize(JComponent a),Dimension,Invokes the getMinimumSize method on each UI handled by this object.,"

getMinimumSize
public Dimension getMinimumSize(JComponent a)
Invokes the getMinimumSize method on each UI handled by this object.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
a - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MultiTableUI,getPreferredSize(JComponent a),Dimension,Invokes the getPreferredSize method on each UI handled by this object.,"

getPreferredSize
public Dimension getPreferredSize(JComponent a)
Invokes the getPreferredSize method on each UI handled by this object.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
a - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MultiTableUI,getUIs(),ComponentUI[],Returns the list of UIs associated with this multiplexing UI.,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
MultiTableUI,installUI(JComponent a),void,Invokes the installUI method on each UI handled by this object.,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MultiTableUI,"paint(Graphics a, JComponent b)",void,Invokes the paint method on each UI handled by this object.,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MultiTableUI,uninstallUI(JComponent a),void,Invokes the uninstallUI method on each UI handled by this object.,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MultiTableUI,"update(Graphics a, JComponent b)",void,Invokes the update method on each UI handled by this object.,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
MultiTextUI,"contains(JComponent a, int b, int c)",boolean,Invokes the contains method on each UI handled by this object.,"

contains
public boolean contains(JComponent a,
                        int b,
                        int c)
Invokes the contains method on each UI handled by this object.

Overrides:
contains in class ComponentUI
Parameters:
a - the component where the x,y location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
b - the x coordinate of the point
c - the y coordinate of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.contains(int, int), 
Component.contains(int, int)


"
MultiTextUI,createUI(JComponent a),static ComponentUI,Returns a multiplexing UI instance if any of the auxiliary LookAndFeels supports this UI.,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
MultiTextUI,"damageRange(JTextComponent a, int b, int c)",void,Invokes the damageRange method on each UI handled by this object.,"

damageRange
public void damageRange(JTextComponent a,
                        int b,
                        int c)
Invokes the damageRange method on each UI handled by this object.

Specified by:
damageRange in class TextUI
b - the beginning of the range >= 0
c - the end of the range >= p0


"
MultiTextUI,"damageRange(JTextComponent a, int b, int c, Position.Bias d, Position.Bias e)",void,Invokes the damageRange method on each UI handled by this object.,"

damageRange
public void damageRange(JTextComponent a,
                        int b,
                        int c,
                        Position.Bias d,
                        Position.Bias e)
Invokes the damageRange method on each UI handled by this object.

Specified by:
damageRange in class TextUI
b - the beginning of the range >= 0
c - the end of the range >= p0


"
MultiTextUI,"getAccessibleChild(JComponent a, int b)",Accessible,Invokes the getAccessibleChild method on each UI handled by this object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent a,
                                     int b)
Invokes the getAccessibleChild method on each UI handled by this object.

Overrides:
getAccessibleChild in class ComponentUI
b - zero-based index of child
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)


"
MultiTextUI,getAccessibleChildrenCount(JComponent a),int,Invokes the getAccessibleChildrenCount method on each UI handled by this object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent a)
Invokes the getAccessibleChildrenCount method on each UI handled by this object.

Overrides:
getAccessibleChildrenCount in class ComponentUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)


"
MultiTextUI,getEditorKit(JTextComponent a),EditorKit,Invokes the getEditorKit method on each UI handled by this object.,"

getEditorKit
public EditorKit getEditorKit(JTextComponent a)
Invokes the getEditorKit method on each UI handled by this object.

Specified by:
getEditorKit in class TextUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel


"
MultiTextUI,getMaximumSize(JComponent a),Dimension,Invokes the getMaximumSize method on each UI handled by this object.,"

getMaximumSize
public Dimension getMaximumSize(JComponent a)
Invokes the getMaximumSize method on each UI handled by this object.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
a - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
MultiTextUI,getMinimumSize(JComponent a),Dimension,Invokes the getMinimumSize method on each UI handled by this object.,"

getMinimumSize
public Dimension getMinimumSize(JComponent a)
Invokes the getMinimumSize method on each UI handled by this object.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
a - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MultiTextUI,"getNextVisualPositionFrom(JTextComponent a, int b, Position.Bias c, int d, Position.Bias[] e)",int,Invokes the getNextVisualPositionFrom method on each UI handled by this object.,"

getNextVisualPositionFrom
public int getNextVisualPositionFrom(JTextComponent a,
                                     int b,
                                     Position.Bias c,
                                     int d,
                                     Position.Bias[] e)
                              throws BadLocationException
Invokes the getNextVisualPositionFrom method on each UI handled by this object.

Specified by:
getNextVisualPositionFrom in class TextUI
Parameters:
a - the text component for which this UI is installed
b - the position to convert >= 0
c - the bias for the position
d - the direction from the current position that can
  be thought of as the arrow keys typically found on a keyboard.
  This may be SwingConstants.WEST, SwingConstants.EAST,
  SwingConstants.NORTH, or SwingConstants.SOUTH
e - an array to contain the bias for the returned position
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
Throws:
BadLocationException


"
MultiTextUI,getPreferredSize(JComponent a),Dimension,Invokes the getPreferredSize method on each UI handled by this object.,"

getPreferredSize
public Dimension getPreferredSize(JComponent a)
Invokes the getPreferredSize method on each UI handled by this object.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
a - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MultiTextUI,getRootView(JTextComponent a),View,Invokes the getRootView method on each UI handled by this object.,"

getRootView
public View getRootView(JTextComponent a)
Invokes the getRootView method on each UI handled by this object.

Specified by:
getRootView in class TextUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel


"
MultiTextUI,"getToolTipText(JTextComponent a, Point b)",String,Invokes the getToolTipText method on each UI handled by this object.,"

getToolTipText
public String getToolTipText(JTextComponent a,
                             Point b)
Invokes the getToolTipText method on each UI handled by this object.

Overrides:
getToolTipText in class TextUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
Since:
1.4
See Also:
JTextComponent.getToolTipText(java.awt.event.MouseEvent)


"
MultiTextUI,getUIs(),ComponentUI[],Returns the list of UIs associated with this multiplexing UI.,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
MultiTextUI,installUI(JComponent a),void,Invokes the installUI method on each UI handled by this object.,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MultiTextUI,"modelToView(JTextComponent a, int b)",Rectangle,Invokes the modelToView method on each UI handled by this object.,"

modelToView
public Rectangle modelToView(JTextComponent a,
                             int b)
                      throws BadLocationException
Invokes the modelToView method on each UI handled by this object.

Specified by:
modelToView in class TextUI
b - the local location in the model to translate >= 0
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
Throws:
BadLocationException - if the given position does not
   represent a valid location in the associated document


"
MultiTextUI,"modelToView(JTextComponent a, int b, Position.Bias c)",Rectangle,Invokes the modelToView method on each UI handled by this object.,"

modelToView
public Rectangle modelToView(JTextComponent a,
                             int b,
                             Position.Bias c)
                      throws BadLocationException
Invokes the modelToView method on each UI handled by this object.

Specified by:
modelToView in class TextUI
b - the local location in the model to translate >= 0
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
Throws:
BadLocationException - if the given position does not
   represent a valid location in the associated document


"
MultiTextUI,"paint(Graphics a, JComponent b)",void,Invokes the paint method on each UI handled by this object.,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MultiTextUI,uninstallUI(JComponent a),void,Invokes the uninstallUI method on each UI handled by this object.,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MultiTextUI,"update(Graphics a, JComponent b)",void,Invokes the update method on each UI handled by this object.,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
MultiTextUI,"viewToModel(JTextComponent a, Point b)",int,Invokes the viewToModel method on each UI handled by this object.,"

viewToModel
public int viewToModel(JTextComponent a,
                       Point b)
Invokes the viewToModel method on each UI handled by this object.

Specified by:
viewToModel in class TextUI
b - the location in the view to translate.  This
   should be in the same coordinate system as the mouse
   events.
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel


"
MultiTextUI,"viewToModel(JTextComponent a, Point b, Position.Bias[] c)",int,Invokes the viewToModel method on each UI handled by this object.,"

viewToModel
public int viewToModel(JTextComponent a,
                       Point b,
                       Position.Bias[] c)
Invokes the viewToModel method on each UI handled by this object.

Specified by:
viewToModel in class TextUI
b - the location in the view to translate.
           This should be in the same coordinate system
           as the mouse events.
c - filled in by this method to indicate whether
           the point given is closer to the previous or the next
           character in the model
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel


"
MultiToolBarUI,"contains(JComponent a, int b, int c)",boolean,Invokes the contains method on each UI handled by this object.,"

contains
public boolean contains(JComponent a,
                        int b,
                        int c)
Invokes the contains method on each UI handled by this object.

Overrides:
contains in class ComponentUI
Parameters:
a - the component where the x,y location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
b - the x coordinate of the point
c - the y coordinate of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.contains(int, int), 
Component.contains(int, int)


"
MultiToolBarUI,createUI(JComponent a),static ComponentUI,Returns a multiplexing UI instance if any of the auxiliary LookAndFeels supports this UI.,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
MultiToolBarUI,"getAccessibleChild(JComponent a, int b)",Accessible,Invokes the getAccessibleChild method on each UI handled by this object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent a,
                                     int b)
Invokes the getAccessibleChild method on each UI handled by this object.

Overrides:
getAccessibleChild in class ComponentUI
b - zero-based index of child
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)


"
MultiToolBarUI,getAccessibleChildrenCount(JComponent a),int,Invokes the getAccessibleChildrenCount method on each UI handled by this object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent a)
Invokes the getAccessibleChildrenCount method on each UI handled by this object.

Overrides:
getAccessibleChildrenCount in class ComponentUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)


"
MultiToolBarUI,getMaximumSize(JComponent a),Dimension,Invokes the getMaximumSize method on each UI handled by this object.,"

getMaximumSize
public Dimension getMaximumSize(JComponent a)
Invokes the getMaximumSize method on each UI handled by this object.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
a - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
MultiToolBarUI,getMinimumSize(JComponent a),Dimension,Invokes the getMinimumSize method on each UI handled by this object.,"

getMinimumSize
public Dimension getMinimumSize(JComponent a)
Invokes the getMinimumSize method on each UI handled by this object.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
a - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MultiToolBarUI,getPreferredSize(JComponent a),Dimension,Invokes the getPreferredSize method on each UI handled by this object.,"

getPreferredSize
public Dimension getPreferredSize(JComponent a)
Invokes the getPreferredSize method on each UI handled by this object.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
a - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MultiToolBarUI,getUIs(),ComponentUI[],Returns the list of UIs associated with this multiplexing UI.,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
MultiToolBarUI,installUI(JComponent a),void,Invokes the installUI method on each UI handled by this object.,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MultiToolBarUI,"paint(Graphics a, JComponent b)",void,Invokes the paint method on each UI handled by this object.,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MultiToolBarUI,uninstallUI(JComponent a),void,Invokes the uninstallUI method on each UI handled by this object.,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MultiToolBarUI,"update(Graphics a, JComponent b)",void,Invokes the update method on each UI handled by this object.,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
MultiToolTipUI,"contains(JComponent a, int b, int c)",boolean,Invokes the contains method on each UI handled by this object.,"

contains
public boolean contains(JComponent a,
                        int b,
                        int c)
Invokes the contains method on each UI handled by this object.

Overrides:
contains in class ComponentUI
Parameters:
a - the component where the x,y location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
b - the x coordinate of the point
c - the y coordinate of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.contains(int, int), 
Component.contains(int, int)


"
MultiToolTipUI,createUI(JComponent a),static ComponentUI,Returns a multiplexing UI instance if any of the auxiliary LookAndFeels supports this UI.,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
MultiToolTipUI,"getAccessibleChild(JComponent a, int b)",Accessible,Invokes the getAccessibleChild method on each UI handled by this object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent a,
                                     int b)
Invokes the getAccessibleChild method on each UI handled by this object.

Overrides:
getAccessibleChild in class ComponentUI
b - zero-based index of child
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)


"
MultiToolTipUI,getAccessibleChildrenCount(JComponent a),int,Invokes the getAccessibleChildrenCount method on each UI handled by this object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent a)
Invokes the getAccessibleChildrenCount method on each UI handled by this object.

Overrides:
getAccessibleChildrenCount in class ComponentUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)


"
MultiToolTipUI,getMaximumSize(JComponent a),Dimension,Invokes the getMaximumSize method on each UI handled by this object.,"

getMaximumSize
public Dimension getMaximumSize(JComponent a)
Invokes the getMaximumSize method on each UI handled by this object.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
a - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
MultiToolTipUI,getMinimumSize(JComponent a),Dimension,Invokes the getMinimumSize method on each UI handled by this object.,"

getMinimumSize
public Dimension getMinimumSize(JComponent a)
Invokes the getMinimumSize method on each UI handled by this object.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
a - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MultiToolTipUI,getPreferredSize(JComponent a),Dimension,Invokes the getPreferredSize method on each UI handled by this object.,"

getPreferredSize
public Dimension getPreferredSize(JComponent a)
Invokes the getPreferredSize method on each UI handled by this object.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
a - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MultiToolTipUI,getUIs(),ComponentUI[],Returns the list of UIs associated with this multiplexing UI.,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
MultiToolTipUI,installUI(JComponent a),void,Invokes the installUI method on each UI handled by this object.,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MultiToolTipUI,"paint(Graphics a, JComponent b)",void,Invokes the paint method on each UI handled by this object.,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MultiToolTipUI,uninstallUI(JComponent a),void,Invokes the uninstallUI method on each UI handled by this object.,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MultiToolTipUI,"update(Graphics a, JComponent b)",void,Invokes the update method on each UI handled by this object.,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
MultiTreeUI,cancelEditing(JTree a),void,Invokes the cancelEditing method on each UI handled by this object.,"

cancelEditing
public void cancelEditing(JTree a)
Invokes the cancelEditing method on each UI handled by this object.

Specified by:
cancelEditing in class TreeUI


"
MultiTreeUI,"contains(JComponent a, int b, int c)",boolean,Invokes the contains method on each UI handled by this object.,"

contains
public boolean contains(JComponent a,
                        int b,
                        int c)
Invokes the contains method on each UI handled by this object.

Overrides:
contains in class ComponentUI
Parameters:
a - the component where the x,y location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
b - the x coordinate of the point
c - the y coordinate of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.contains(int, int), 
Component.contains(int, int)


"
MultiTreeUI,createUI(JComponent a),static ComponentUI,Returns a multiplexing UI instance if any of the auxiliary LookAndFeels supports this UI.,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
MultiTreeUI,"getAccessibleChild(JComponent a, int b)",Accessible,Invokes the getAccessibleChild method on each UI handled by this object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent a,
                                     int b)
Invokes the getAccessibleChild method on each UI handled by this object.

Overrides:
getAccessibleChild in class ComponentUI
b - zero-based index of child
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)


"
MultiTreeUI,getAccessibleChildrenCount(JComponent a),int,Invokes the getAccessibleChildrenCount method on each UI handled by this object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent a)
Invokes the getAccessibleChildrenCount method on each UI handled by this object.

Overrides:
getAccessibleChildrenCount in class ComponentUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)


"
MultiTreeUI,"getClosestPathForLocation(JTree a, int b, int c)",TreePath,Invokes the getClosestPathForLocation method on each UI handled by this object.,"

getClosestPathForLocation
public TreePath getClosestPathForLocation(JTree a,
                                          int b,
                                          int c)
Invokes the getClosestPathForLocation method on each UI handled by this object.

Specified by:
getClosestPathForLocation in class TreeUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel


"
MultiTreeUI,getEditingPath(JTree a),TreePath,Invokes the getEditingPath method on each UI handled by this object.,"

getEditingPath
public TreePath getEditingPath(JTree a)
Invokes the getEditingPath method on each UI handled by this object.

Specified by:
getEditingPath in class TreeUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel


"
MultiTreeUI,getMaximumSize(JComponent a),Dimension,Invokes the getMaximumSize method on each UI handled by this object.,"

getMaximumSize
public Dimension getMaximumSize(JComponent a)
Invokes the getMaximumSize method on each UI handled by this object.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
a - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
MultiTreeUI,getMinimumSize(JComponent a),Dimension,Invokes the getMinimumSize method on each UI handled by this object.,"

getMinimumSize
public Dimension getMinimumSize(JComponent a)
Invokes the getMinimumSize method on each UI handled by this object.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
a - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MultiTreeUI,"getPathBounds(JTree a, TreePath b)",Rectangle,Invokes the getPathBounds method on each UI handled by this object.,"

getPathBounds
public Rectangle getPathBounds(JTree a,
                               TreePath b)
Invokes the getPathBounds method on each UI handled by this object.

Specified by:
getPathBounds in class TreeUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel


"
MultiTreeUI,"getPathForRow(JTree a, int b)",TreePath,Invokes the getPathForRow method on each UI handled by this object.,"

getPathForRow
public TreePath getPathForRow(JTree a,
                              int b)
Invokes the getPathForRow method on each UI handled by this object.

Specified by:
getPathForRow in class TreeUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel


"
MultiTreeUI,getPreferredSize(JComponent a),Dimension,Invokes the getPreferredSize method on each UI handled by this object.,"

getPreferredSize
public Dimension getPreferredSize(JComponent a)
Invokes the getPreferredSize method on each UI handled by this object.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
a - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MultiTreeUI,getRowCount(JTree a),int,Invokes the getRowCount method on each UI handled by this object.,"

getRowCount
public int getRowCount(JTree a)
Invokes the getRowCount method on each UI handled by this object.

Specified by:
getRowCount in class TreeUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel


"
MultiTreeUI,"getRowForPath(JTree a, TreePath b)",int,Invokes the getRowForPath method on each UI handled by this object.,"

getRowForPath
public int getRowForPath(JTree a,
                         TreePath b)
Invokes the getRowForPath method on each UI handled by this object.

Specified by:
getRowForPath in class TreeUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel


"
MultiTreeUI,getUIs(),ComponentUI[],Returns the list of UIs associated with this multiplexing UI.,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
MultiTreeUI,installUI(JComponent a),void,Invokes the installUI method on each UI handled by this object.,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MultiTreeUI,isEditing(JTree a),boolean,Invokes the isEditing method on each UI handled by this object.,"

isEditing
public boolean isEditing(JTree a)
Invokes the isEditing method on each UI handled by this object.

Specified by:
isEditing in class TreeUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel


"
MultiTreeUI,"paint(Graphics a, JComponent b)",void,Invokes the paint method on each UI handled by this object.,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MultiTreeUI,"startEditingAtPath(JTree a, TreePath b)",void,Invokes the startEditingAtPath method on each UI handled by this object.,"

startEditingAtPath
public void startEditingAtPath(JTree a,
                               TreePath b)
Invokes the startEditingAtPath method on each UI handled by this object.

Specified by:
startEditingAtPath in class TreeUI


"
MultiTreeUI,stopEditing(JTree a),boolean,Invokes the stopEditing method on each UI handled by this object.,"

stopEditing
public boolean stopEditing(JTree a)
Invokes the stopEditing method on each UI handled by this object.

Specified by:
stopEditing in class TreeUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel


"
MultiTreeUI,uninstallUI(JComponent a),void,Invokes the uninstallUI method on each UI handled by this object.,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MultiTreeUI,"update(Graphics a, JComponent b)",void,Invokes the update method on each UI handled by this object.,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
MultiViewportUI,"contains(JComponent a, int b, int c)",boolean,Invokes the contains method on each UI handled by this object.,"

contains
public boolean contains(JComponent a,
                        int b,
                        int c)
Invokes the contains method on each UI handled by this object.

Overrides:
contains in class ComponentUI
Parameters:
a - the component where the x,y location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
b - the x coordinate of the point
c - the y coordinate of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.contains(int, int), 
Component.contains(int, int)


"
MultiViewportUI,createUI(JComponent a),static ComponentUI,Returns a multiplexing UI instance if any of the auxiliary LookAndFeels supports this UI.,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
MultiViewportUI,"getAccessibleChild(JComponent a, int b)",Accessible,Invokes the getAccessibleChild method on each UI handled by this object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent a,
                                     int b)
Invokes the getAccessibleChild method on each UI handled by this object.

Overrides:
getAccessibleChild in class ComponentUI
b - zero-based index of child
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)


"
MultiViewportUI,getAccessibleChildrenCount(JComponent a),int,Invokes the getAccessibleChildrenCount method on each UI handled by this object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent a)
Invokes the getAccessibleChildrenCount method on each UI handled by this object.

Overrides:
getAccessibleChildrenCount in class ComponentUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)


"
MultiViewportUI,getMaximumSize(JComponent a),Dimension,Invokes the getMaximumSize method on each UI handled by this object.,"

getMaximumSize
public Dimension getMaximumSize(JComponent a)
Invokes the getMaximumSize method on each UI handled by this object.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
a - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
MultiViewportUI,getMinimumSize(JComponent a),Dimension,Invokes the getMinimumSize method on each UI handled by this object.,"

getMinimumSize
public Dimension getMinimumSize(JComponent a)
Invokes the getMinimumSize method on each UI handled by this object.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
a - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MultiViewportUI,getPreferredSize(JComponent a),Dimension,Invokes the getPreferredSize method on each UI handled by this object.,"

getPreferredSize
public Dimension getPreferredSize(JComponent a)
Invokes the getPreferredSize method on each UI handled by this object.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
a - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MultiViewportUI,getUIs(),ComponentUI[],Returns the list of UIs associated with this multiplexing UI.,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
MultiViewportUI,installUI(JComponent a),void,Invokes the installUI method on each UI handled by this object.,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MultiViewportUI,"paint(Graphics a, JComponent b)",void,Invokes the paint method on each UI handled by this object.,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MultiViewportUI,uninstallUI(JComponent a),void,Invokes the uninstallUI method on each UI handled by this object.,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MultiViewportUI,"update(Graphics a, JComponent b)",void,Invokes the update method on each UI handled by this object.,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
