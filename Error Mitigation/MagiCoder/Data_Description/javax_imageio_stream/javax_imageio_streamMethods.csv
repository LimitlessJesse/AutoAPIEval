ClassName,Method,Return Type,Description,Full Description
FileCacheImageInputStream,close(),void,"Closes this FileCacheImageInputStream, closing and removing the cache file.","

close
public void close()
           throws IOException
Closes this FileCacheImageInputStream, closing
 and removing the cache file.  The source InputStream
 is not closed.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in interface ImageInputStream
Overrides:
close in class ImageInputStreamImpl
Throws:
IOException - if an error occurs.


"
FileCacheImageInputStream,finalize(),protected void,Finalizes this object prior to garbage collection.,"

finalize
protected void finalize()
                 throws Throwable
Finalizes this object prior to garbage collection.  The
 close method is called to close any open input
 source.  This method should not be called from application
 code.

Overrides:
finalize in class ImageInputStreamImpl
Throws:
Throwable - if an error occurs during superclass
 finalization.
See Also:
WeakReference, 
PhantomReference


"
FileCacheImageInputStream,isCached(),boolean,Returns true since this ImageInputStream caches data in order to allow seeking backwards.,"

isCached
public boolean isCached()
Returns true since this
 ImageInputStream caches data in order to allow
 seeking backwards.

Specified by:
isCached in interface ImageInputStream
Overrides:
isCached in class ImageInputStreamImpl
Returns:
true.
See Also:
isCachedMemory(), 
isCachedFile()


"
FileCacheImageInputStream,isCachedFile(),boolean,Returns true since this ImageInputStream maintains a file cache.,"

isCachedFile
public boolean isCachedFile()
Returns true since this
 ImageInputStream maintains a file cache.

Specified by:
isCachedFile in interface ImageInputStream
Overrides:
isCachedFile in class ImageInputStreamImpl
Returns:
true.
See Also:
isCached(), 
isCachedMemory()


"
FileCacheImageInputStream,isCachedMemory(),boolean,Returns false since this ImageInputStream does not maintain a main memory cache.,"

isCachedMemory
public boolean isCachedMemory()
Returns false since this
 ImageInputStream does not maintain a main memory
 cache.

Specified by:
isCachedMemory in interface ImageInputStream
Overrides:
isCachedMemory in class ImageInputStreamImpl
Returns:
false.
See Also:
isCached(), 
isCachedFile()


"
FileCacheImageInputStream,read(),int,Reads a single byte from the stream and returns it as an int between 0 and 255.,"

read
public int read()
         throws IOException
Description copied from class: ImageInputStreamImpl
Reads a single byte from the stream and returns it as an
 int between 0 and 255.  If EOF is reached,
 -1 is returned.

  Subclasses must provide an implementation for this method.
 The subclass implementation should update the stream position
 before exiting.

  The bit offset within the stream must be reset to zero before
 the read occurs.

Specified by:
read in interface ImageInputStream
Specified by:
read in class ImageInputStreamImpl
Returns:
the value of the next byte in the stream, or -1
 if EOF is reached.
Throws:
IOException - if the stream has been closed.


"
FileCacheImageInputStream,"read(byte[] b, int off, int len)",int,"Reads up to len bytes from the stream, and stores them into b starting at index off.","

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Description copied from class: ImageInputStreamImpl
Reads up to len bytes from the stream, and stores
 them into b starting at index off.
 If no bytes can be read because the end of the stream has been
 reached, -1 is returned.

  The bit offset within the stream must be reset to zero before
 the read occurs.

  Subclasses must provide an implementation for this method.
 The subclass implementation should update the stream position
 before exiting.

Specified by:
read in interface ImageInputStream
Specified by:
read in class ImageInputStreamImpl
Parameters:
b - an array of bytes to be written to.
off - the starting position within b to write to.
len - the maximum number of bytes to read.
Returns:
the number of bytes actually read, or -1
 to indicate EOF.
Throws:
IOException - if an I/O error occurs.


"
FileCacheImageOutputStream,close(),void,Closes this FileCacheImageOutputStream.,"

close
public void close()
           throws IOException
Closes this FileCacheImageOutputStream.  All
 pending data is flushed to the output, and the cache file
 is closed and removed.  The destination OutputStream
 is not closed.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in interface ImageInputStream
Overrides:
close in class ImageInputStreamImpl
Throws:
IOException - if an error occurs.


"
FileCacheImageOutputStream,flushBefore(long pos),void,Discards the initial portion of the stream prior to the indicated position.,"

flushBefore
public void flushBefore(long pos)
                 throws IOException
Description copied from interface: ImageInputStream
Discards the initial portion of the stream prior to the
 indicated position.  Attempting to seek to an offset within the
 flushed portion of the stream will result in an
 IndexOutOfBoundsException.

  Calling flushBefore may allow classes
 implementing this interface to free up resources such as memory
 or disk space that are being used to store data from the
 stream.

Specified by:
flushBefore in interface ImageInputStream
Specified by:
flushBefore in interface ImageOutputStream
Overrides:
flushBefore in class ImageInputStreamImpl
Parameters:
pos - a long containing the length of the
 stream prefix that may be flushed.
Throws:
IOException - if an I/O error occurs.


"
FileCacheImageOutputStream,isCached(),boolean,Returns true since this ImageOutputStream caches data in order to allow seeking backwards.,"

isCached
public boolean isCached()
Returns true since this
 ImageOutputStream caches data in order to allow
 seeking backwards.

Specified by:
isCached in interface ImageInputStream
Overrides:
isCached in class ImageInputStreamImpl
Returns:
true.
See Also:
isCachedMemory(), 
isCachedFile()


"
FileCacheImageOutputStream,isCachedFile(),boolean,Returns true since this ImageOutputStream maintains a file cache.,"

isCachedFile
public boolean isCachedFile()
Returns true since this
 ImageOutputStream maintains a file cache.

Specified by:
isCachedFile in interface ImageInputStream
Overrides:
isCachedFile in class ImageInputStreamImpl
Returns:
true.
See Also:
isCached(), 
isCachedMemory()


"
FileCacheImageOutputStream,isCachedMemory(),boolean,Returns false since this ImageOutputStream does not maintain a main memory cache.,"

isCachedMemory
public boolean isCachedMemory()
Returns false since this
 ImageOutputStream does not maintain a main memory
 cache.

Specified by:
isCachedMemory in interface ImageInputStream
Overrides:
isCachedMemory in class ImageInputStreamImpl
Returns:
false.
See Also:
isCached(), 
isCachedFile()


"
FileCacheImageOutputStream,length(),long,Returns -1L to indicate that the stream has unknown length.,"

length
public long length()
Description copied from class: ImageInputStreamImpl
Returns -1L to indicate that the stream has unknown
 length.  Subclasses must override this method to provide actual
 length information.

Specified by:
length in interface ImageInputStream
Overrides:
length in class ImageInputStreamImpl
Returns:
-1L to indicate unknown length.


"
FileCacheImageOutputStream,read(),int,Reads a single byte from the stream and returns it as an int between 0 and 255.,"

read
public int read()
         throws IOException
Description copied from class: ImageInputStreamImpl
Reads a single byte from the stream and returns it as an
 int between 0 and 255.  If EOF is reached,
 -1 is returned.

  Subclasses must provide an implementation for this method.
 The subclass implementation should update the stream position
 before exiting.

  The bit offset within the stream must be reset to zero before
 the read occurs.

Specified by:
read in interface ImageInputStream
Specified by:
read in class ImageInputStreamImpl
Returns:
the value of the next byte in the stream, or -1
 if EOF is reached.
Throws:
IOException - if the stream has been closed.


"
FileCacheImageOutputStream,"read(byte[] b, int off, int len)",int,"Reads up to len bytes from the stream, and stores them into b starting at index off.","

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Description copied from class: ImageInputStreamImpl
Reads up to len bytes from the stream, and stores
 them into b starting at index off.
 If no bytes can be read because the end of the stream has been
 reached, -1 is returned.

  The bit offset within the stream must be reset to zero before
 the read occurs.

  Subclasses must provide an implementation for this method.
 The subclass implementation should update the stream position
 before exiting.

Specified by:
read in interface ImageInputStream
Specified by:
read in class ImageInputStreamImpl
Parameters:
b - an array of bytes to be written to.
off - the starting position within b to write to.
len - the maximum number of bytes to read.
Returns:
the number of bytes actually read, or -1
 to indicate EOF.
Throws:
IOException - if an I/O error occurs.


"
FileCacheImageOutputStream,seek(long pos),void,Sets the current stream position and resets the bit offset to 0.,"

seek
public void seek(long pos)
          throws IOException
Sets the current stream position and resets the bit offset to
 0.  It is legal to seek past the end of the file; an
 EOFException will be thrown only if a read is
 performed.  The file length will not be increased until a write
 is performed.

Specified by:
seek in interface ImageInputStream
Overrides:
seek in class ImageInputStreamImpl
Parameters:
pos - a long containing the desired file
 pointer position.
Throws:
IndexOutOfBoundsException - if pos is smaller
 than the flushed position.
IOException - if any other I/O error occurs.


"
FileCacheImageOutputStream,"write(byte[] b, int off, int len)",void,Writes a sequence of bytes to the stream at the current position.,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Description copied from interface: ImageOutputStream
Writes a sequence of bytes to the stream at the current
 position.  If len is 0, nothing is written.
 The byte b[off] is written first, then the byte
 b[off + 1], and so on.

  If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.  Implementers can use the
 flushBits
 method of ImageOutputStreamImpl
 to guarantee this.

Specified by:
write in interface DataOutput
Specified by:
write in interface ImageOutputStream
Specified by:
write in class ImageOutputStreamImpl
Parameters:
b - an array of bytes to be written.
off - the start offset in the data.
len - the number of bytes to write.
Throws:
IOException - if an I/O error occurs.


"
FileCacheImageOutputStream,write(int b),void,Writes a single byte to the stream at the current position.,"

write
public void write(int b)
           throws IOException
Description copied from interface: ImageOutputStream
Writes a single byte to the stream at the current position.
 The 24 high-order bits of b are ignored.

  If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.  Implementers can use the
 flushBits
 method of ImageOutputStreamImpl
 to guarantee this.

Specified by:
write in interface DataOutput
Specified by:
write in interface ImageOutputStream
Specified by:
write in class ImageOutputStreamImpl
Parameters:
b - an int whose lower 8 bits are to be
 written.
Throws:
IOException - if an I/O error occurs.


"
FileImageInputStream,close(),void,Closes the stream.,"

close
public void close()
           throws IOException
Description copied from interface: ImageInputStream
Closes the stream.  Attempts to access a stream that has been
 closed may result in IOExceptions or incorrect
 behavior.  Calling this method may allow classes implementing
 this interface to release resources associated with the stream
 such as memory, disk space, or file descriptors.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in interface ImageInputStream
Overrides:
close in class ImageInputStreamImpl
Throws:
IOException - if an I/O error occurs.


"
FileImageInputStream,finalize(),protected void,Finalizes this object prior to garbage collection.,"

finalize
protected void finalize()
                 throws Throwable
Finalizes this object prior to garbage collection.  The
 close method is called to close any open input
 source.  This method should not be called from application
 code.

Overrides:
finalize in class ImageInputStreamImpl
Throws:
Throwable - if an error occurs during superclass
 finalization.
See Also:
WeakReference, 
PhantomReference


"
FileImageInputStream,length(),long,"Returns the length of the underlying file, or -1 if it is unknown.","

length
public long length()
Returns the length of the underlying file, or -1
 if it is unknown.

Specified by:
length in interface ImageInputStream
Overrides:
length in class ImageInputStreamImpl
Returns:
the file length as a long, or
 -1.


"
FileImageInputStream,read(),int,Reads a single byte from the stream and returns it as an int between 0 and 255.,"

read
public int read()
         throws IOException
Description copied from class: ImageInputStreamImpl
Reads a single byte from the stream and returns it as an
 int between 0 and 255.  If EOF is reached,
 -1 is returned.

  Subclasses must provide an implementation for this method.
 The subclass implementation should update the stream position
 before exiting.

  The bit offset within the stream must be reset to zero before
 the read occurs.

Specified by:
read in interface ImageInputStream
Specified by:
read in class ImageInputStreamImpl
Returns:
the value of the next byte in the stream, or -1
 if EOF is reached.
Throws:
IOException - if the stream has been closed.


"
FileImageInputStream,"read(byte[] b, int off, int len)",int,"Reads up to len bytes from the stream, and stores them into b starting at index off.","

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Description copied from class: ImageInputStreamImpl
Reads up to len bytes from the stream, and stores
 them into b starting at index off.
 If no bytes can be read because the end of the stream has been
 reached, -1 is returned.

  The bit offset within the stream must be reset to zero before
 the read occurs.

  Subclasses must provide an implementation for this method.
 The subclass implementation should update the stream position
 before exiting.

Specified by:
read in interface ImageInputStream
Specified by:
read in class ImageInputStreamImpl
Parameters:
b - an array of bytes to be written to.
off - the starting position within b to write to.
len - the maximum number of bytes to read.
Returns:
the number of bytes actually read, or -1
 to indicate EOF.
Throws:
IOException - if an I/O error occurs.


"
FileImageInputStream,seek(long pos),void,Sets the current stream position to the desired location.,"

seek
public void seek(long pos)
          throws IOException
Description copied from interface: ImageInputStream
Sets the current stream position to the desired location.  The
 next read will occur at this location.  The bit offset is set
 to 0.

  An IndexOutOfBoundsException will be thrown if
 pos is smaller than the flushed position (as
 returned by getflushedPosition).

  It is legal to seek past the end of the file; an
 java.io.EOFException will be thrown only if a read is
 performed.

Specified by:
seek in interface ImageInputStream
Overrides:
seek in class ImageInputStreamImpl
Parameters:
pos - a long containing the desired file
 pointer position.
Throws:
IOException - if any other I/O error occurs.


"
FileImageOutputStream,close(),void,Closes the stream.,"

close
public void close()
           throws IOException
Description copied from interface: ImageInputStream
Closes the stream.  Attempts to access a stream that has been
 closed may result in IOExceptions or incorrect
 behavior.  Calling this method may allow classes implementing
 this interface to release resources associated with the stream
 such as memory, disk space, or file descriptors.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in interface ImageInputStream
Overrides:
close in class ImageInputStreamImpl
Throws:
IOException - if an I/O error occurs.


"
FileImageOutputStream,finalize(),protected void,Finalizes this object prior to garbage collection.,"

finalize
protected void finalize()
                 throws Throwable
Finalizes this object prior to garbage collection.  The
 close method is called to close any open input
 source.  This method should not be called from application
 code.

Overrides:
finalize in class ImageInputStreamImpl
Throws:
Throwable - if an error occurs during superclass
 finalization.
See Also:
WeakReference, 
PhantomReference


"
FileImageOutputStream,length(),long,Returns -1L to indicate that the stream has unknown length.,"

length
public long length()
Description copied from class: ImageInputStreamImpl
Returns -1L to indicate that the stream has unknown
 length.  Subclasses must override this method to provide actual
 length information.

Specified by:
length in interface ImageInputStream
Overrides:
length in class ImageInputStreamImpl
Returns:
-1L to indicate unknown length.


"
FileImageOutputStream,read(),int,Reads a single byte from the stream and returns it as an int between 0 and 255.,"

read
public int read()
         throws IOException
Description copied from class: ImageInputStreamImpl
Reads a single byte from the stream and returns it as an
 int between 0 and 255.  If EOF is reached,
 -1 is returned.

  Subclasses must provide an implementation for this method.
 The subclass implementation should update the stream position
 before exiting.

  The bit offset within the stream must be reset to zero before
 the read occurs.

Specified by:
read in interface ImageInputStream
Specified by:
read in class ImageInputStreamImpl
Returns:
the value of the next byte in the stream, or -1
 if EOF is reached.
Throws:
IOException - if the stream has been closed.


"
FileImageOutputStream,"read(byte[] b, int off, int len)",int,"Reads up to len bytes from the stream, and stores them into b starting at index off.","

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Description copied from class: ImageInputStreamImpl
Reads up to len bytes from the stream, and stores
 them into b starting at index off.
 If no bytes can be read because the end of the stream has been
 reached, -1 is returned.

  The bit offset within the stream must be reset to zero before
 the read occurs.

  Subclasses must provide an implementation for this method.
 The subclass implementation should update the stream position
 before exiting.

Specified by:
read in interface ImageInputStream
Specified by:
read in class ImageInputStreamImpl
Parameters:
b - an array of bytes to be written to.
off - the starting position within b to write to.
len - the maximum number of bytes to read.
Returns:
the number of bytes actually read, or -1
 to indicate EOF.
Throws:
IOException - if an I/O error occurs.


"
FileImageOutputStream,seek(long pos),void,Sets the current stream position and resets the bit offset to 0.,"

seek
public void seek(long pos)
          throws IOException
Sets the current stream position and resets the bit offset to
 0.  It is legal to seeking past the end of the file; an
 EOFException will be thrown only if a read is
 performed.  The file length will not be increased until a write
 is performed.

Specified by:
seek in interface ImageInputStream
Overrides:
seek in class ImageInputStreamImpl
Parameters:
pos - a long containing the desired file
 pointer position.
Throws:
IndexOutOfBoundsException - if pos is smaller
 than the flushed position.
IOException - if any other I/O error occurs.


"
FileImageOutputStream,"write(byte[] b, int off, int len)",void,Writes a sequence of bytes to the stream at the current position.,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Description copied from interface: ImageOutputStream
Writes a sequence of bytes to the stream at the current
 position.  If len is 0, nothing is written.
 The byte b[off] is written first, then the byte
 b[off + 1], and so on.

  If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.  Implementers can use the
 flushBits
 method of ImageOutputStreamImpl
 to guarantee this.

Specified by:
write in interface DataOutput
Specified by:
write in interface ImageOutputStream
Specified by:
write in class ImageOutputStreamImpl
Parameters:
b - an array of bytes to be written.
off - the start offset in the data.
len - the number of bytes to write.
Throws:
IOException - if an I/O error occurs.


"
FileImageOutputStream,write(int b),void,Writes a single byte to the stream at the current position.,"

write
public void write(int b)
           throws IOException
Description copied from interface: ImageOutputStream
Writes a single byte to the stream at the current position.
 The 24 high-order bits of b are ignored.

  If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.  Implementers can use the
 flushBits
 method of ImageOutputStreamImpl
 to guarantee this.

Specified by:
write in interface DataOutput
Specified by:
write in interface ImageOutputStream
Specified by:
write in class ImageOutputStreamImpl
Parameters:
b - an int whose lower 8 bits are to be
 written.
Throws:
IOException - if an I/O error occurs.


"
IIOByteBuffer,getData(),byte[],Returns a reference to the byte array.,"

getData
public byte[] getData()
Returns a reference to the byte array.  The returned value should
 be treated as read-only, and only the portion specified by the
 values of getOffset and getLength should
 be used.

Returns:
a byte array reference.
See Also:
getOffset(), 
getLength(), 
setData(byte[])


"
IIOByteBuffer,getLength(),int,Returns the length of the data of interest within the byte array returned by getData.,"

getLength
public int getLength()
Returns the length of the data of interest within the byte
 array returned by getData.

Returns:
an int length.
See Also:
getData(), 
getOffset(), 
setLength(int)


"
IIOByteBuffer,getOffset(),int,Returns the offset within the byte array returned by getData at which the data of interest start.,"

getOffset
public int getOffset()
Returns the offset within the byte array returned by
 getData at which the data of interest start.

Returns:
an int offset.
See Also:
getData(), 
getLength(), 
setOffset(int)


"
IIOByteBuffer,setData(byte[] data),void,Updates the array reference that will be returned by subsequent calls to the getData method.,"

setData
public void setData(byte[] data)
Updates the array reference that will be returned by subsequent calls
 to the getData method.

Parameters:
data - a byte array reference containing the new data value.
See Also:
getData()


"
IIOByteBuffer,setLength(int length),void,Updates the value that will be returned by subsequent calls to the getLength method.,"

setLength
public void setLength(int length)
Updates the value that will be returned by subsequent calls
 to the getLength method.

Parameters:
length - an int containing the new length value.
See Also:
getLength()


"
IIOByteBuffer,setOffset(int offset),void,Updates the value that will be returned by subsequent calls to the getOffset method.,"

setOffset
public void setOffset(int offset)
Updates the value that will be returned by subsequent calls
 to the getOffset method.

Parameters:
offset - an int containing the new offset value.
See Also:
getOffset()


"
ImageInputStreamImpl,checkClosed(),protected void,Throws an IOException if the stream has been closed.,"

checkClosed
protected final void checkClosed()
                          throws IOException
Throws an IOException if the stream has been closed.
 Subclasses may call this method from any of their methods that
 require the stream not to be closed.

Throws:
IOException - if the stream is closed.


"
ImageInputStreamImpl,close(),void,Closes the stream.,"

close
public void close()
           throws IOException
Description copied from interface: ImageInputStream
Closes the stream.  Attempts to access a stream that has been
 closed may result in IOExceptions or incorrect
 behavior.  Calling this method may allow classes implementing
 this interface to release resources associated with the stream
 such as memory, disk space, or file descriptors.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in interface ImageInputStream
Throws:
IOException - if an I/O error occurs.


"
ImageInputStreamImpl,finalize(),protected void,Finalizes this object prior to garbage collection.,"

finalize
protected void finalize()
                 throws Throwable
Finalizes this object prior to garbage collection.  The
 close method is called to close any open input
 source.  This method should not be called from application
 code.

Overrides:
finalize in class Object
Throws:
Throwable - if an error occurs during superclass
 finalization.
See Also:
WeakReference, 
PhantomReference


"
ImageInputStreamImpl,flush(),void,Discards the initial position of the stream prior to the current stream position.,"

flush
public void flush()
           throws IOException
Description copied from interface: ImageInputStream
Discards the initial position of the stream prior to the current
 stream position.  Equivalent to
 flushBefore(getStreamPosition()).

Specified by:
flush in interface ImageInputStream
Throws:
IOException - if an I/O error occurs.


"
ImageInputStreamImpl,flushBefore(long pos),void,Discards the initial portion of the stream prior to the indicated position.,"

flushBefore
public void flushBefore(long pos)
                 throws IOException
Description copied from interface: ImageInputStream
Discards the initial portion of the stream prior to the
 indicated position.  Attempting to seek to an offset within the
 flushed portion of the stream will result in an
 IndexOutOfBoundsException.

  Calling flushBefore may allow classes
 implementing this interface to free up resources such as memory
 or disk space that are being used to store data from the
 stream.

Specified by:
flushBefore in interface ImageInputStream
Parameters:
pos - a long containing the length of the
 stream prefix that may be flushed.
Throws:
IOException - if an I/O error occurs.


"
ImageInputStreamImpl,getBitOffset(),int,"Returns the current bit offset, as an integer between 0 and 7, inclusive.","

getBitOffset
public int getBitOffset()
                 throws IOException
Description copied from interface: ImageInputStream
Returns the current bit offset, as an integer between 0 and 7,
 inclusive.  The bit offset is updated implicitly by calls to
 the readBits method.  A value of 0 indicates the
 most-significant bit, and a value of 7 indicates the least
 significant bit, of the byte being read.

  The bit offset is set to 0 when a stream is first
 opened, and is reset to 0 by calls to seek,
 skipBytes, or any read or
 readFully method.

Specified by:
getBitOffset in interface ImageInputStream
Returns:
an int containing the bit offset between
 0 and 7, inclusive.
Throws:
IOException - if an I/O error occurs.
See Also:
ImageInputStream.setBitOffset(int)


"
ImageInputStreamImpl,getByteOrder(),ByteOrder,Returns the byte order with which data values will be read from this stream as an instance of the java.nio.ByteOrder enumeration.,"

getByteOrder
public ByteOrder getByteOrder()
Description copied from interface: ImageInputStream
Returns the byte order with which data values will be read from
 this stream as an instance of the
 java.nio.ByteOrder enumeration.

Specified by:
getByteOrder in interface ImageInputStream
Returns:
one of ByteOrder.BIG_ENDIAN or
 ByteOrder.LITTLE_ENDIAN, indicating which byte
 order is being used.
See Also:
ByteOrder, 
ImageInputStream.setByteOrder(java.nio.ByteOrder)


"
ImageInputStreamImpl,getFlushedPosition(),long,Returns the earliest position in the stream to which seeking may be performed.,"

getFlushedPosition
public long getFlushedPosition()
Description copied from interface: ImageInputStream
Returns the earliest position in the stream to which seeking
 may be performed.  The returned value will be the maximum of
 all values passed into previous calls to
 flushBefore.

Specified by:
getFlushedPosition in interface ImageInputStream
Returns:
the earliest legal position for seeking, as a
 long.


"
ImageInputStreamImpl,getStreamPosition(),long,Returns the current byte position of the stream.,"

getStreamPosition
public long getStreamPosition()
                       throws IOException
Description copied from interface: ImageInputStream
Returns the current byte position of the stream.  The next read
 will take place starting at this offset.

Specified by:
getStreamPosition in interface ImageInputStream
Returns:
a long containing the position of the stream.
Throws:
IOException - if an I/O error occurs.


"
ImageInputStreamImpl,isCached(),boolean,Default implementation returns false.,"

isCached
public boolean isCached()
Default implementation returns false.  Subclasses should
 override this if they cache data.

Specified by:
isCached in interface ImageInputStream
Returns:
true if this ImageInputStream
 caches data.
See Also:
ImageInputStream.isCachedMemory(), 
ImageInputStream.isCachedFile()


"
ImageInputStreamImpl,isCachedFile(),boolean,Default implementation returns false.,"

isCachedFile
public boolean isCachedFile()
Default implementation returns false.  Subclasses should
 override this if they cache data in a temporary file.

Specified by:
isCachedFile in interface ImageInputStream
Returns:
true if this ImageInputStream
 caches data in a temporary file.
See Also:
ImageInputStream.isCached(), 
ImageInputStream.isCachedMemory()


"
ImageInputStreamImpl,isCachedMemory(),boolean,Default implementation returns false.,"

isCachedMemory
public boolean isCachedMemory()
Default implementation returns false.  Subclasses should
 override this if they cache data in main memory.

Specified by:
isCachedMemory in interface ImageInputStream
Returns:
true if this ImageInputStream
 caches data in main memory.
See Also:
ImageInputStream.isCached(), 
ImageInputStream.isCachedFile()


"
ImageInputStreamImpl,length(),long,Returns -1L to indicate that the stream has unknown length.,"

length
public long length()
Returns -1L to indicate that the stream has unknown
 length.  Subclasses must override this method to provide actual
 length information.

Specified by:
length in interface ImageInputStream
Returns:
-1L to indicate unknown length.


"
ImageInputStreamImpl,mark(),void,Pushes the current stream position onto a stack of marked positions.,"

mark
public void mark()
Pushes the current stream position onto a stack of marked
 positions.

Specified by:
mark in interface ImageInputStream


"
ImageInputStreamImpl,read(),abstract int,Reads a single byte from the stream and returns it as an int between 0 and 255.,"

read
public abstract int read()
                  throws IOException
Reads a single byte from the stream and returns it as an
 int between 0 and 255.  If EOF is reached,
 -1 is returned.

  Subclasses must provide an implementation for this method.
 The subclass implementation should update the stream position
 before exiting.

  The bit offset within the stream must be reset to zero before
 the read occurs.

Specified by:
read in interface ImageInputStream
Returns:
the value of the next byte in the stream, or -1
 if EOF is reached.
Throws:
IOException - if the stream has been closed.


"
ImageInputStreamImpl,read(byte[] b),int,"A convenience method that calls read(b, 0, b.length).","

read
public int read(byte[] b)
         throws IOException
A convenience method that calls read(b, 0, b.length).

  The bit offset within the stream is reset to zero before
 the read occurs.

Specified by:
read in interface ImageInputStream
Parameters:
b - an array of bytes to be written to.
Returns:
the number of bytes actually read, or -1
 to indicate EOF.
Throws:
NullPointerException - if b is
 null.
IOException - if an I/O error occurs.


"
ImageInputStreamImpl,"read(byte[] b, int off, int len)",abstract int,"Reads up to len bytes from the stream, and stores them into b starting at index off.","

read
public abstract int read(byte[] b,
                         int off,
                         int len)
                  throws IOException
Reads up to len bytes from the stream, and stores
 them into b starting at index off.
 If no bytes can be read because the end of the stream has been
 reached, -1 is returned.

  The bit offset within the stream must be reset to zero before
 the read occurs.

  Subclasses must provide an implementation for this method.
 The subclass implementation should update the stream position
 before exiting.

Specified by:
read in interface ImageInputStream
Parameters:
b - an array of bytes to be written to.
off - the starting position within b to write to.
len - the maximum number of bytes to read.
Returns:
the number of bytes actually read, or -1
 to indicate EOF.
Throws:
IndexOutOfBoundsException - if off is
 negative, len is negative, or off +
 len is greater than b.length.
NullPointerException - if b is
 null.
IOException - if an I/O error occurs.


"
ImageInputStreamImpl,readBit(),int,Reads a single bit from the stream and returns it as an int with the value 0 or 1.,"

readBit
public int readBit()
            throws IOException
Description copied from interface: ImageInputStream
Reads a single bit from the stream and returns it as an
 int with the value 0 or
 1.  The bit offset is advanced by one and reduced
 modulo 8.

Specified by:
readBit in interface ImageInputStream
Returns:
an int containing the value 0
 or 1.
Throws:
EOFException - if the stream reaches the end before
 reading all the bits.
IOException - if an I/O error occurs.


"
ImageInputStreamImpl,readBits(int numBits),long,"Reads a bitstring from the stream and returns it as a long, with the first bit read becoming the most significant bit of the output.","

readBits
public long readBits(int numBits)
              throws IOException
Description copied from interface: ImageInputStream
Reads a bitstring from the stream and returns it as a
 long, with the first bit read becoming the most
 significant bit of the output.  The read starts within the byte
 indicated by getStreamPosition, at the bit given
 by getBitOffset.  The bit offset is advanced by
 numBits and reduced modulo 8.

  The byte order of the stream has no effect on this
 method.  The return value of this method is constructed as
 though the bits were read one at a time, and shifted into
 the right side of the return value, as shown by the following
 pseudo-code:

 
 long accum = 0L;
 for (int i = 0; i < numBits; i++) {
   accum <<= 1; // Shift left one bit to make room
   accum |= readBit();
 }
 

 Note that the result of readBits(32) may thus not
 be equal to that of readInt() if a reverse network
 byte order is being used (i.e., getByteOrder() ==
 false).

  If the end of the stream is encountered before all the bits
 have been read, an java.io.EOFException is thrown.

Specified by:
readBits in interface ImageInputStream
Parameters:
numBits - the number of bits to read, as an int
 between 0 and 64, inclusive.
Returns:
the bitstring, as a long with the last bit
 read stored in the least significant bit.
Throws:
EOFException - if the stream reaches the end before
 reading all the bits.
IOException - if an I/O error occurs.


"
ImageInputStreamImpl,readBoolean(),boolean,"Reads a byte from the stream and returns a boolean value of true if it is nonzero, false if it is zero.","

readBoolean
public boolean readBoolean()
                    throws IOException
Description copied from interface: ImageInputStream
Reads a byte from the stream and returns a boolean
 value of true if it is nonzero, false
 if it is zero.

  The bit offset within the stream is reset to zero before
 the read occurs.

Specified by:
readBoolean in interface DataInput
Specified by:
readBoolean in interface ImageInputStream
Returns:
a boolean value from the stream.
Throws:
EOFException - if the end of the stream is reached.
IOException - if an I/O error occurs.


"
ImageInputStreamImpl,readByte(),byte,Reads a byte from the stream and returns it as a byte value.,"

readByte
public byte readByte()
              throws IOException
Description copied from interface: ImageInputStream
Reads a byte from the stream and returns it as a
 byte value.  Byte values between 0x00
 and 0x7f represent integer values between
 0 and 127.  Values between
 0x80 and 0xff represent negative
 values from -128 to /1.

  The bit offset within the stream is reset to zero before
 the read occurs.

Specified by:
readByte in interface DataInput
Specified by:
readByte in interface ImageInputStream
Returns:
a signed byte value from the stream.
Throws:
EOFException - if the end of the stream is reached.
IOException - if an I/O error occurs.


"
ImageInputStreamImpl,"readBytes(IIOByteBuffer buf, int len)",void,"Reads up to len bytes from the stream, and modifies the supplied IIOByteBuffer to indicate the byte array, offset, and length where the data may be found.","

readBytes
public void readBytes(IIOByteBuffer buf,
                      int len)
               throws IOException
Description copied from interface: ImageInputStream
Reads up to len bytes from the stream, and
 modifies the supplied IIOByteBuffer to indicate
 the byte array, offset, and length where the data may be found.
 The caller should not attempt to modify the data found in the
 IIOByteBuffer.

  The bit offset within the stream is reset to zero before
 the read occurs.

Specified by:
readBytes in interface ImageInputStream
Parameters:
buf - an IIOByteBuffer object to be modified.
len - the maximum number of bytes to read.
Throws:
IOException - if an I/O error occurs.


"
ImageInputStreamImpl,readChar(),char,"Equivalent to readUnsignedShort, except that the result is returned using the char datatype.","

readChar
public char readChar()
              throws IOException
Description copied from interface: ImageInputStream
Equivalent to readUnsignedShort, except that the
 result is returned using the char datatype.

  The bit offset within the stream is reset to zero before
 the read occurs.

Specified by:
readChar in interface DataInput
Specified by:
readChar in interface ImageInputStream
Returns:
an unsigned char value from the stream.
Throws:
EOFException - if the stream reaches the end before
 reading all the bytes.
IOException - if an I/O error occurs.
See Also:
ImageInputStream.readUnsignedShort()


"
ImageInputStreamImpl,readDouble(),double,"Reads 8 bytes from the stream, and (conceptually) concatenates them according to the current byte order and returns the result as a double.","

readDouble
public double readDouble()
                  throws IOException
Description copied from interface: ImageInputStream
Reads 8 bytes from the stream, and (conceptually) concatenates
 them according to the current byte order and returns the result
 as a double.

  The bit offset within the stream is reset to zero before
 the read occurs.

Specified by:
readDouble in interface DataInput
Specified by:
readDouble in interface ImageInputStream
Returns:
a double value from the stream.
Throws:
EOFException - if the stream reaches the end before
 reading all the bytes.
IOException - if an I/O error occurs.
See Also:
ImageInputStream.getByteOrder()


"
ImageInputStreamImpl,readFloat(),float,"Reads 4 bytes from the stream, and (conceptually) concatenates them according to the current byte order and returns the result as a float.","

readFloat
public float readFloat()
                throws IOException
Description copied from interface: ImageInputStream
Reads 4 bytes from the stream, and (conceptually) concatenates
 them according to the current byte order and returns the result
 as a float.

  The bit offset within the stream is reset to zero before
 the read occurs.

Specified by:
readFloat in interface DataInput
Specified by:
readFloat in interface ImageInputStream
Returns:
a float value from the stream.
Throws:
EOFException - if the stream reaches the end before
 reading all the bytes.
IOException - if an I/O error occurs.
See Also:
ImageInputStream.getByteOrder()


"
ImageInputStreamImpl,readFully(byte[] b),void,"Reads b.length bytes from the stream, and stores them into b starting at index 0.","

readFully
public void readFully(byte[] b)
               throws IOException
Description copied from interface: ImageInputStream
Reads b.length bytes from the stream, and stores them
 into b starting at index 0.
 If the end of the stream is reached, an java.io.EOFException
 will be thrown.

  The bit offset within the stream is reset to zero before
 the read occurs.

Specified by:
readFully in interface DataInput
Specified by:
readFully in interface ImageInputStream
Parameters:
b - an array of bytes.
Throws:
EOFException - if the stream reaches the end before
 reading all the bytes.
IOException - if an I/O error occurs.


"
ImageInputStreamImpl,"readFully(byte[] b, int off, int len)",void,"Reads len bytes from the stream, and stores them into b starting at index off.","

readFully
public void readFully(byte[] b,
                      int off,
                      int len)
               throws IOException
Description copied from interface: ImageInputStream
Reads len bytes from the stream, and stores them
 into b starting at index off.
 If the end of the stream is reached, an java.io.EOFException
 will be thrown.

  The bit offset within the stream is reset to zero before
 the read occurs.

Specified by:
readFully in interface DataInput
Specified by:
readFully in interface ImageInputStream
Parameters:
b - an array of bytes to be written to.
off - the starting position within b to write to.
len - the maximum number of bytes to read.
Throws:
EOFException - if the stream reaches the end before
 reading all the bytes.
IOException - if an I/O error occurs.


"
ImageInputStreamImpl,"readFully(char[] c, int off, int len)",void,"Reads len chars (unsigned 16-bit integers) from the stream according to the current byte order, and stores them into c starting at index off.","

readFully
public void readFully(char[] c,
                      int off,
                      int len)
               throws IOException
Description copied from interface: ImageInputStream
Reads len chars (unsigned 16-bit integers) from the
 stream according to the current byte order, and
 stores them into c starting at index
 off.  If the end of the stream is reached, an
 java.io.EOFException will be thrown.

  The bit offset within the stream is reset to zero before
 the read occurs.

Specified by:
readFully in interface ImageInputStream
Parameters:
c - an array of chars to be written to.
off - the starting position within c to write to.
len - the maximum number of chars to read.
Throws:
EOFException - if the stream reaches the end before
 reading all the bytes.
IOException - if an I/O error occurs.


"
ImageInputStreamImpl,"readFully(double[] d, int off, int len)",void,"Reads len doubles (64-bit IEEE double-precision floats) from the stream according to the current byte order, and stores them into d starting at index off.","

readFully
public void readFully(double[] d,
                      int off,
                      int len)
               throws IOException
Description copied from interface: ImageInputStream
Reads len doubles (64-bit IEEE double-precision
 floats) from the stream according to the current byte order,
 and stores them into d starting at
 index off.  If the end of the stream is reached,
 an java.io.EOFException will be thrown.

  The bit offset within the stream is reset to zero before
 the read occurs.

Specified by:
readFully in interface ImageInputStream
Parameters:
d - an array of doubles to be written to.
off - the starting position within d to write to.
len - the maximum number of doubles to read.
Throws:
EOFException - if the stream reaches the end before
 reading all the bytes.
IOException - if an I/O error occurs.


"
ImageInputStreamImpl,"readFully(float[] f, int off, int len)",void,"Reads len floats (32-bit IEEE single-precision floats) from the stream according to the current byte order, and stores them into f starting at index off.","

readFully
public void readFully(float[] f,
                      int off,
                      int len)
               throws IOException
Description copied from interface: ImageInputStream
Reads len floats (32-bit IEEE single-precision
 floats) from the stream according to the current byte order,
 and stores them into f starting at
 index off.  If the end of the stream is reached,
 an java.io.EOFException will be thrown.

  The bit offset within the stream is reset to zero before
 the read occurs.

Specified by:
readFully in interface ImageInputStream
Parameters:
f - an array of floats to be written to.
off - the starting position within f to write to.
len - the maximum number of floats to read.
Throws:
EOFException - if the stream reaches the end before
 reading all the bytes.
IOException - if an I/O error occurs.


"
ImageInputStreamImpl,"readFully(int[] i, int off, int len)",void,"Reads len ints (signed 32-bit integers) from the stream according to the current byte order, and stores them into i starting at index off.","

readFully
public void readFully(int[] i,
                      int off,
                      int len)
               throws IOException
Description copied from interface: ImageInputStream
Reads len ints (signed 32-bit integers) from the
 stream according to the current byte order, and
 stores them into i starting at index
 off.  If the end of the stream is reached, an
 java.io.EOFException will be thrown.

  The bit offset within the stream is reset to zero before
 the read occurs.

Specified by:
readFully in interface ImageInputStream
Parameters:
i - an array of ints to be written to.
off - the starting position within i to write to.
len - the maximum number of ints to read.
Throws:
EOFException - if the stream reaches the end before
 reading all the bytes.
IOException - if an I/O error occurs.


"
ImageInputStreamImpl,"readFully(long[] l, int off, int len)",void,"Reads len longs (signed 64-bit integers) from the stream according to the current byte order, and stores them into l starting at index off.","

readFully
public void readFully(long[] l,
                      int off,
                      int len)
               throws IOException
Description copied from interface: ImageInputStream
Reads len longs (signed 64-bit integers) from the
 stream according to the current byte order, and
 stores them into l starting at index
 off.  If the end of the stream is reached, an
 java.io.EOFException will be thrown.

  The bit offset within the stream is reset to zero before
 the read occurs.

Specified by:
readFully in interface ImageInputStream
Parameters:
l - an array of longs to be written to.
off - the starting position within l to write to.
len - the maximum number of longs to read.
Throws:
EOFException - if the stream reaches the end before
 reading all the bytes.
IOException - if an I/O error occurs.


"
ImageInputStreamImpl,"readFully(short[] s, int off, int len)",void,"Reads len shorts (signed 16-bit integers) from the stream according to the current byte order, and stores them into s starting at index off.","

readFully
public void readFully(short[] s,
                      int off,
                      int len)
               throws IOException
Description copied from interface: ImageInputStream
Reads len shorts (signed 16-bit integers) from the
 stream according to the current byte order, and
 stores them into s starting at index
 off.  If the end of the stream is reached, an
 java.io.EOFException will be thrown.

  The bit offset within the stream is reset to zero before
 the read occurs.

Specified by:
readFully in interface ImageInputStream
Parameters:
s - an array of shorts to be written to.
off - the starting position within s to write to.
len - the maximum number of shorts to read.
Throws:
EOFException - if the stream reaches the end before
 reading all the bytes.
IOException - if an I/O error occurs.


"
ImageInputStreamImpl,readInt(),int,"Reads 4 bytes from the stream, and (conceptually) concatenates them according to the current byte order and returns the result as an int.","

readInt
public int readInt()
            throws IOException
Description copied from interface: ImageInputStream
Reads 4 bytes from the stream, and (conceptually) concatenates
 them according to the current byte order and returns the result
 as an int.

  The bit offset within the stream is ignored and treated as
 though it were zero.

Specified by:
readInt in interface DataInput
Specified by:
readInt in interface ImageInputStream
Returns:
a signed int value from the stream.
Throws:
EOFException - if the stream reaches the end before
 reading all the bytes.
IOException - if an I/O error occurs.
See Also:
ImageInputStream.getByteOrder()


"
ImageInputStreamImpl,readLine(),String,Reads the next line of text from the input stream.,"

readLine
public String readLine()
                throws IOException
Description copied from interface: ImageInputStream
Reads the next line of text from the input stream.  It reads
 successive bytes, converting each byte separately into a
 character, until it encounters a line terminator or end of
 file; the characters read are then returned as a
 String. Note that because this method processes
 bytes, it does not support input of the full Unicode character
 set.

  If end of file is encountered before even one byte can be
 read, then null is returned. Otherwise, each byte
 that is read is converted to type char by
 zero-extension. If the character '\n' is
 encountered, it is discarded and reading ceases. If the
 character '\r' is encountered, it is discarded
 and, if the following byte converts  to the character
 '\n', then that is discarded also; reading then
 ceases. If end of file is encountered before either of the
 characters '\n' and '\r' is
 encountered, reading ceases. Once reading has ceased, a
 String is returned that contains all the
 characters read and not discarded, taken in order.  Note that
 every character in this string will have a value less than
 \u0100, that is, (char)256.

  The bit offset within the stream is reset to zero before
 the read occurs.

Specified by:
readLine in interface DataInput
Specified by:
readLine in interface ImageInputStream
Returns:
a String containing a line of text from the stream.
Throws:
IOException - if an I/O error occurs.


"
ImageInputStreamImpl,readLong(),long,"Reads 8 bytes from the stream, and (conceptually) concatenates them according to the current byte order and returns the result as a long.","

readLong
public long readLong()
              throws IOException
Description copied from interface: ImageInputStream
Reads 8 bytes from the stream, and (conceptually) concatenates
 them according to the current byte order and returns the result
 as a long.

  The bit offset within the stream is reset to zero before
 the read occurs.

Specified by:
readLong in interface DataInput
Specified by:
readLong in interface ImageInputStream
Returns:
a signed long value from the stream.
Throws:
EOFException - if the stream reaches the end before
 reading all the bytes.
IOException - if an I/O error occurs.
See Also:
ImageInputStream.getByteOrder()


"
ImageInputStreamImpl,readShort(),short,"Reads two bytes from the stream, and (conceptually) concatenates them according to the current byte order, and returns the result as a short value.","

readShort
public short readShort()
                throws IOException
Description copied from interface: ImageInputStream
Reads two bytes from the stream, and (conceptually)
 concatenates them according to the current byte order, and
 returns the result as a short value.

  The bit offset within the stream is reset to zero before
 the read occurs.

Specified by:
readShort in interface DataInput
Specified by:
readShort in interface ImageInputStream
Returns:
a signed short value from the stream.
Throws:
EOFException - if the stream reaches the end before
 reading all the bytes.
IOException - if an I/O error occurs.
See Also:
ImageInputStream.getByteOrder()


"
ImageInputStreamImpl,readUnsignedByte(),int,"Reads a byte from the stream, and (conceptually) converts it to an int, masks it with 0xff in order to strip off any sign-extension bits, and returns it as a byte value.","

readUnsignedByte
public int readUnsignedByte()
                     throws IOException
Description copied from interface: ImageInputStream
Reads a byte from the stream, and (conceptually) converts it to
 an int, masks it with 0xff in order to strip off
 any sign-extension bits, and returns it as a byte
 value.

  Thus, byte values between 0x00 and
 0x7f are simply returned as integer values between
 0 and 127.  Values between
 0x80 and 0xff, which normally
 represent negative bytevalues, will be mapped into
 positive integers between 128 and
 255.

  The bit offset within the stream is reset to zero before
 the read occurs.

Specified by:
readUnsignedByte in interface DataInput
Specified by:
readUnsignedByte in interface ImageInputStream
Returns:
an unsigned byte value from the stream.
Throws:
EOFException - if the end of the stream is reached.
IOException - if an I/O error occurs.


"
ImageInputStreamImpl,readUnsignedInt(),long,"Reads 4 bytes from the stream, and (conceptually) concatenates them according to the current byte order, converts the result to a long, masks it with 0xffffffffL in order to strip off any sign-extension bits, and returns the result as an unsigned long value.","

readUnsignedInt
public long readUnsignedInt()
                     throws IOException
Description copied from interface: ImageInputStream
Reads 4 bytes from the stream, and (conceptually) concatenates
 them according to the current byte order, converts the result
 to a long, masks it with 0xffffffffL in order to
 strip off any sign-extension bits, and returns the result as an
 unsigned long value.

  The bit offset within the stream is reset to zero before
 the read occurs.

Specified by:
readUnsignedInt in interface ImageInputStream
Returns:
an unsigned int value from the stream, as a long.
Throws:
EOFException - if the stream reaches the end before
 reading all the bytes.
IOException - if an I/O error occurs.
See Also:
ImageInputStream.getByteOrder()


"
ImageInputStreamImpl,readUnsignedShort(),int,"Reads two bytes from the stream, and (conceptually) concatenates them according to the current byte order, converts the resulting value to an int, masks it with 0xffff in order to strip off any sign-extension buts, and returns the result as an unsigned int value.","

readUnsignedShort
public int readUnsignedShort()
                      throws IOException
Description copied from interface: ImageInputStream
Reads two bytes from the stream, and (conceptually)
 concatenates them according to the current byte order, converts
 the resulting value to an int, masks it with
 0xffff in order to strip off any sign-extension
 buts, and returns the result as an unsigned int
 value.

  The bit offset within the stream is reset to zero before
 the read occurs.

Specified by:
readUnsignedShort in interface DataInput
Specified by:
readUnsignedShort in interface ImageInputStream
Returns:
an unsigned short value from the stream, as an int.
Throws:
EOFException - if the stream reaches the end before
 reading all the bytes.
IOException - if an I/O error occurs.
See Also:
ImageInputStream.getByteOrder()


"
ImageInputStreamImpl,readUTF(),String,Reads in a string that has been encoded using a modified UTF-8 format.,"

readUTF
public String readUTF()
               throws IOException
Description copied from interface: ImageInputStream
Reads in a string that has been encoded using a
 modified
 UTF-8
 format.  The general contract of readUTF is that
 it reads a representation of a Unicode character string encoded
 in modified UTF-8 format; this string of characters is
 then returned as a String.

  First, two bytes are read and used to construct an unsigned
 16-bit integer in the manner of the
 readUnsignedShort method, using network byte order
 (regardless of the current byte order setting). This integer
 value is called the UTF length and specifies the number
 of additional bytes to be read. These bytes are then converted
 to characters by considering them in groups. The length of each
 group is computed from the value of the first byte of the
 group. The byte following a group, if any, is the first byte of
 the next group.

  If the first byte of a group matches the bit pattern
 0xxxxxxx (where x means ""may be
 0 or 1""), then the group consists of
 just that byte. The byte is zero-extended to form a character.

  If the first byte of a group matches the bit pattern
 110xxxxx, then the group consists of that byte
 a and a second byte b. If there is no
 byte b (because byte a was the last
 of the bytes to be read), or if byte b does not
 match the bit pattern 10xxxxxx, then a
 UTFDataFormatException is thrown. Otherwise, the
 group is converted to the character:

  
 (char)(((a& 0x1F) << 6) | (b & 0x3F))
 

 If the first byte of a group matches the bit pattern
 1110xxxx, then the group consists of that byte
 a and two more bytes b and
 c.  If there is no byte c (because
 byte a was one of the last two of the bytes to be
 read), or either byte b or byte c
 does not match the bit pattern 10xxxxxx, then a
 UTFDataFormatException is thrown. Otherwise, the
 group is converted to the character:

  
 (char)(((a & 0x0F) << 12) | ((b & 0x3F) << 6) | (c & 0x3F))
 

 If the first byte of a group matches the pattern
 1111xxxx or the pattern 10xxxxxx,
 then a UTFDataFormatException is thrown.

  If end of file is encountered at any time during this
 entire process, then an java.io.EOFException is thrown.

  After every group has been converted to a character by this
 process, the characters are gathered, in the same order in
 which their corresponding groups were read from the input
 stream, to form a String, which is returned.

  The current byte order setting is ignored.

  The bit offset within the stream is reset to zero before
 the read occurs.

 Note: This method should not be used in
 the  implementation of image formats that use standard UTF-8,
 because  the modified UTF-8 used here is incompatible with
 standard UTF-8.

Specified by:
readUTF in interface DataInput
Specified by:
readUTF in interface ImageInputStream
Returns:
a String read from the stream.
Throws:
EOFException - if this stream reaches the end
 before reading all the bytes.
UTFDataFormatException - if the bytes do not represent
 a valid modified UTF-8 encoding of a string.
IOException - if an I/O error occurs.


"
ImageInputStreamImpl,reset(),void,Resets the current stream byte and bit positions from the stack of marked positions.,"

reset
public void reset()
           throws IOException
Resets the current stream byte and bit positions from the stack
 of marked positions.

  An IOException will be thrown if the previous
 marked position lies in the discarded portion of the stream.

Specified by:
reset in interface ImageInputStream
Throws:
IOException - if an I/O error occurs.


"
ImageInputStreamImpl,seek(long pos),void,Sets the current stream position to the desired location.,"

seek
public void seek(long pos)
          throws IOException
Description copied from interface: ImageInputStream
Sets the current stream position to the desired location.  The
 next read will occur at this location.  The bit offset is set
 to 0.

  An IndexOutOfBoundsException will be thrown if
 pos is smaller than the flushed position (as
 returned by getflushedPosition).

  It is legal to seek past the end of the file; an
 java.io.EOFException will be thrown only if a read is
 performed.

Specified by:
seek in interface ImageInputStream
Parameters:
pos - a long containing the desired file
 pointer position.
Throws:
IOException - if any other I/O error occurs.


"
ImageInputStreamImpl,setBitOffset(int bitOffset),void,"Sets the bit offset to an integer between 0 and 7, inclusive.","

setBitOffset
public void setBitOffset(int bitOffset)
                  throws IOException
Description copied from interface: ImageInputStream
Sets the bit offset to an integer between 0 and 7, inclusive.
 The byte offset within the stream, as returned by
 getStreamPosition, is left unchanged.
 A value of 0 indicates the
 most-significant bit, and a value of 7 indicates the least
 significant bit, of the byte being read.

Specified by:
setBitOffset in interface ImageInputStream
Parameters:
bitOffset - the desired offset, as an int
 between 0 and 7, inclusive.
Throws:
IOException - if an I/O error occurs.
See Also:
ImageInputStream.getBitOffset()


"
ImageInputStreamImpl,setByteOrder(ByteOrder byteOrder),void,Sets the desired byte order for future reads of data values from this stream.,"

setByteOrder
public void setByteOrder(ByteOrder byteOrder)
Description copied from interface: ImageInputStream
Sets the desired byte order for future reads of data values
 from this stream.  For example, the sequence of bytes '0x01
 0x02 0x03 0x04' if read as a 4-byte integer would have the
 value '0x01020304' using network byte order and the value
 '0x04030201' under the reverse byte order.

  The enumeration class java.nio.ByteOrder is
 used to specify the byte order.  A value of
 ByteOrder.BIG_ENDIAN specifies so-called
 big-endian or network byte order, in which the high-order byte
 comes first.  Motorola and Sparc processors store data in this
 format, while Intel processors store data in the reverse
 ByteOrder.LITTLE_ENDIAN order.

  The byte order has no effect on the results returned from
 the readBits method (or the value written by
 ImageOutputStream.writeBits).

Specified by:
setByteOrder in interface ImageInputStream
Parameters:
byteOrder - one of ByteOrder.BIG_ENDIAN or
 java.nio.ByteOrder.LITTLE_ENDIAN, indicating whether
 network byte order or its reverse will be used for future
 reads.
See Also:
ByteOrder, 
ImageInputStream.getByteOrder(), 
ImageInputStream.readBits(int)


"
ImageInputStreamImpl,skipBytes(int n),int,Advances the current stream position by calling seek(getStreamPosition() + n).,"

skipBytes
public int skipBytes(int n)
              throws IOException
Advances the current stream position by calling
 seek(getStreamPosition() + n).

  The bit offset is reset to zero.

Specified by:
skipBytes in interface DataInput
Specified by:
skipBytes in interface ImageInputStream
Parameters:
n - the number of bytes to seek forward.
Returns:
an int representing the number of bytes
 skipped.
Throws:
IOException - if getStreamPosition
 throws an IOException when computing either
 the starting or ending position.


"
ImageInputStreamImpl,skipBytes(long n),long,Advances the current stream position by calling seek(getStreamPosition() + n).,"

skipBytes
public long skipBytes(long n)
               throws IOException
Advances the current stream position by calling
 seek(getStreamPosition() + n).

  The bit offset is reset to zero.

Specified by:
skipBytes in interface ImageInputStream
Parameters:
n - the number of bytes to seek forward.
Returns:
a long representing the number of bytes
 skipped.
Throws:
IOException - if getStreamPosition
 throws an IOException when computing either
 the starting or ending position.


"
ImageOutputStreamImpl,flushBits(),protected void,"If the bit offset is non-zero, forces the remaining bits in the current byte to 0 and advances the stream position by one.","

flushBits
protected final void flushBits()
                        throws IOException
If the bit offset is non-zero, forces the remaining bits
 in the current byte to 0 and advances the stream position
 by one.  This method should be called by subclasses at the
 beginning of the write(int) and
 write(byte[], int, int) methods.

Throws:
IOException - if an I/O error occurs.


"
ImageOutputStreamImpl,write(byte[] b),void,Writes a sequence of bytes to the stream at the current position.,"

write
public void write(byte[] b)
           throws IOException
Description copied from interface: ImageOutputStream
Writes a sequence of bytes to the stream at the current
 position.  If b.length is 0, nothing is written.
 The byte b[0] is written first, then the byte
 b[1], and so on.

  If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.

Specified by:
write in interface DataOutput
Specified by:
write in interface ImageOutputStream
Parameters:
b - an array of bytes to be written.
Throws:
IOException - if an I/O error occurs.


"
ImageOutputStreamImpl,"write(byte[] b, int off, int len)",abstract void,Writes a sequence of bytes to the stream at the current position.,"

write
public abstract void write(byte[] b,
                           int off,
                           int len)
                    throws IOException
Description copied from interface: ImageOutputStream
Writes a sequence of bytes to the stream at the current
 position.  If len is 0, nothing is written.
 The byte b[off] is written first, then the byte
 b[off + 1], and so on.

  If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.  Implementers can use the
 flushBits
 method of ImageOutputStreamImpl
 to guarantee this.

Specified by:
write in interface DataOutput
Specified by:
write in interface ImageOutputStream
Parameters:
b - an array of bytes to be written.
off - the start offset in the data.
len - the number of bytes to write.
Throws:
IOException - if an I/O error occurs.


"
ImageOutputStreamImpl,write(int b),abstract void,Writes a single byte to the stream at the current position.,"

write
public abstract void write(int b)
                    throws IOException
Description copied from interface: ImageOutputStream
Writes a single byte to the stream at the current position.
 The 24 high-order bits of b are ignored.

  If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.  Implementers can use the
 flushBits
 method of ImageOutputStreamImpl
 to guarantee this.

Specified by:
write in interface DataOutput
Specified by:
write in interface ImageOutputStream
Parameters:
b - an int whose lower 8 bits are to be
 written.
Throws:
IOException - if an I/O error occurs.


"
ImageOutputStreamImpl,writeBit(int bit),void,"Writes a single bit, given by the least significant bit of the argument, to the stream at the current bit offset within the current byte position.","

writeBit
public void writeBit(int bit)
              throws IOException
Description copied from interface: ImageOutputStream
Writes a single bit, given by the least significant bit of the
 argument, to the stream at the current bit offset within the
 current byte position.  The upper 31 bits of the argument are
 ignored.  The given bit replaces the previous bit at that
 position.  The bit offset is advanced by one and reduced modulo
 8.

  If any bits of a particular byte have never been set
 at the time the byte is flushed to the destination, those
 bits will be set to 0 automatically.

Specified by:
writeBit in interface ImageOutputStream
Parameters:
bit - an int whose least significant bit
 is to be written to the stream.
Throws:
IOException - if an I/O error occurs.


"
ImageOutputStreamImpl,"writeBits(long bits, int numBits)",void,"Writes a sequence of bits, given by the numBits least significant bits of the bits argument in left-to-right order, to the stream at the current bit offset within the current byte position.","

writeBits
public void writeBits(long bits,
                      int numBits)
               throws IOException
Description copied from interface: ImageOutputStream
Writes a sequence of bits, given by the numBits
 least significant bits of the bits argument in
 left-to-right order, to the stream at the current bit offset
 within the current byte position.  The upper 64 -
 numBits bits of the argument are ignored.  The bit
 offset is advanced by numBits and reduced modulo
 8.  Note that a bit offset of 0 always indicates the
 most-significant bit of the byte, and bytes of bits are written
 out in sequence as they are encountered.  Thus bit writes are
 always effectively in network byte order.  The actual stream
 byte order setting is ignored.

  Bit data may be accumulated in memory indefinitely, until
 flushBefore is called.  At that time, all bit data
 prior to the flushed position will be written.

  If any bits of a particular byte have never been set
 at the time the byte is flushed to the destination, those
 bits will be set to 0 automatically.

Specified by:
writeBits in interface ImageOutputStream
Parameters:
bits - a long containing the bits to be
 written, starting with the bit in position numBits -
 1 down to the least significant bit.
numBits - an int between 0 and 64, inclusive.
Throws:
IOException - if an I/O error occurs.


"
ImageOutputStreamImpl,writeBoolean(boolean v),void,Writes a boolean value to the stream.,"

writeBoolean
public void writeBoolean(boolean v)
                  throws IOException
Description copied from interface: ImageOutputStream
Writes a boolean value to the stream.  If
 v is true, the value (byte)1 is
 written; if v is false, the value
 (byte)0 is written.

  If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.

Specified by:
writeBoolean in interface DataOutput
Specified by:
writeBoolean in interface ImageOutputStream
Parameters:
v - the boolean to be written.
Throws:
IOException - if an I/O error occurs.


"
ImageOutputStreamImpl,writeByte(int v),void,Writes the 8 low-order bits of v to the stream.,"

writeByte
public void writeByte(int v)
               throws IOException
Description copied from interface: ImageOutputStream
Writes the 8 low-order bits of v to the
 stream. The 24 high-order bits of v are ignored.
 (This means that writeByte does exactly the same
 thing as write for an integer argument.)

  If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.

Specified by:
writeByte in interface DataOutput
Specified by:
writeByte in interface ImageOutputStream
Parameters:
v - an int containing the byte value to be
 written.
Throws:
IOException - if an I/O error occurs.


"
ImageOutputStreamImpl,writeBytes(String s),void,Writes a string to the output stream.,"

writeBytes
public void writeBytes(String s)
                throws IOException
Description copied from interface: ImageOutputStream
Writes a string to the output stream. For every character in
 the string s, taken in order, one byte is written
 to the output stream. If s is null, a
 NullPointerException is thrown.

  If s.length is zero, then no bytes are
 written. Otherwise, the character s[0] is written
 first, then s[1], and so on; the last character
 written is s[s.length-1]. For each character, one
 byte is written, the low-order byte, in exactly the manner of
 the writeByte method. The high-order eight bits of
 each character in the string are ignored.

  If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.

Specified by:
writeBytes in interface DataOutput
Specified by:
writeBytes in interface ImageOutputStream
Parameters:
s - a String containing the value to be
 written.
Throws:
IOException - if an I/O error occurs.


"
ImageOutputStreamImpl,writeChar(int v),void,This method is a synonym for writeShort.,"

writeChar
public void writeChar(int v)
               throws IOException
Description copied from interface: ImageOutputStream
This method is a synonym for writeShort.

Specified by:
writeChar in interface DataOutput
Specified by:
writeChar in interface ImageOutputStream
Parameters:
v - an int containing the char (unsigned
 short) value to be written.
Throws:
IOException - if an I/O error occurs.
See Also:
ImageOutputStream.writeShort(int)


"
ImageOutputStreamImpl,"writeChars(char[] c, int off, int len)",void,Writes a sequence of chars to the stream at the current position.,"

writeChars
public void writeChars(char[] c,
                       int off,
                       int len)
                throws IOException
Description copied from interface: ImageOutputStream
Writes a sequence of chars to the stream at the current
 position.  If len is 0, nothing is written.
 The char c[off] is written first, then the char
 c[off + 1], and so on.  The byte order of the
 stream is used to determine the order in which the individual
 bytes are written.

  If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.

Specified by:
writeChars in interface ImageOutputStream
Parameters:
c - an array of chars to be written.
off - the start offset in the data.
len - the number of chars to write.
Throws:
IOException - if an I/O error occurs.


"
ImageOutputStreamImpl,writeChars(String s),void,Writes a string to the output stream.,"

writeChars
public void writeChars(String s)
                throws IOException
Description copied from interface: ImageOutputStream
Writes a string to the output stream. For every character in
 the string s, taken in order, two bytes are
 written to the output stream, ordered according to the current
 byte order setting.  If network byte order is being used, the
 high-order byte is written first; the order is reversed
 otherwise.  If s is null, a
 NullPointerException is thrown.

  If s.length is zero, then no bytes are
 written. Otherwise, the character s[0] is written
 first, then s[1], and so on; the last character
 written is s[s.length-1].

  If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.

Specified by:
writeChars in interface DataOutput
Specified by:
writeChars in interface ImageOutputStream
Parameters:
s - a String containing the value to be
 written.
Throws:
IOException - if an I/O error occurs.


"
ImageOutputStreamImpl,writeDouble(double v),void,"Writes a double value, which is comprised of four bytes, to the output stream.","

writeDouble
public void writeDouble(double v)
                 throws IOException
Description copied from interface: ImageOutputStream
Writes a double value, which is comprised of four
 bytes, to the output stream. It does this as if it first
 converts this double value to an long
 in exactly the manner of the
 Double.doubleToLongBits method and then writes the
 long value in exactly the manner of the writeLong
 method.

  If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.

Specified by:
writeDouble in interface DataOutput
Specified by:
writeDouble in interface ImageOutputStream
Parameters:
v - a double containing the value to be
 written.
Throws:
IOException - if an I/O error occurs.


"
ImageOutputStreamImpl,"writeDoubles(double[] d, int off, int len)",void,Writes a sequence of doubles to the stream at the current position.,"

writeDoubles
public void writeDoubles(double[] d,
                         int off,
                         int len)
                  throws IOException
Description copied from interface: ImageOutputStream
Writes a sequence of doubles to the stream at the current
 position.  If len is 0, nothing is written.
 The double d[off] is written first, then the double
 d[off + 1], and so on.  The byte order of the
 stream is used to determine the order in which the individual
 bytes are written.

  If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.

Specified by:
writeDoubles in interface ImageOutputStream
Parameters:
d - an array of doubless to be written.
off - the start offset in the data.
len - the number of doubles to write.
Throws:
IOException - if an I/O error occurs.


"
ImageOutputStreamImpl,writeFloat(float v),void,"Writes a float value, which is comprised of four bytes, to the output stream.","

writeFloat
public void writeFloat(float v)
                throws IOException
Description copied from interface: ImageOutputStream
Writes a float value, which is comprised of four
 bytes, to the output stream. It does this as if it first
 converts this float value to an int
 in exactly the manner of the Float.floatToIntBits
 method and then writes the int value in exactly the manner of
 the writeInt method.

  If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.

Specified by:
writeFloat in interface DataOutput
Specified by:
writeFloat in interface ImageOutputStream
Parameters:
v - a float containing the value to be
 written.
Throws:
IOException - if an I/O error occurs.


"
ImageOutputStreamImpl,"writeFloats(float[] f, int off, int len)",void,Writes a sequence of floats to the stream at the current position.,"

writeFloats
public void writeFloats(float[] f,
                        int off,
                        int len)
                 throws IOException
Description copied from interface: ImageOutputStream
Writes a sequence of floats to the stream at the current
 position.  If len is 0, nothing is written.
 The float f[off] is written first, then the float
 f[off + 1], and so on.  The byte order of the
 stream is used to determine the order in which the individual
 bytes are written.

  If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.

Specified by:
writeFloats in interface ImageOutputStream
Parameters:
f - an array of floats to be written.
off - the start offset in the data.
len - the number of floats to write.
Throws:
IOException - if an I/O error occurs.


"
ImageOutputStreamImpl,writeInt(int v),void,Writes the 32 bits of v to the stream.,"

writeInt
public void writeInt(int v)
              throws IOException
Description copied from interface: ImageOutputStream
Writes the 32 bits of v to the stream.  If the
 stream uses network byte order, the bytes written, in order,
 will be:

 
 (byte)((v >> 24) & 0xff)
 (byte)((v >> 16) & 0xff)
 (byte)((v >> 8) & 0xff)
 (byte)(v & 0xff)
 

 Otheriwse, the bytes written will be:

 
 (byte)(v & 0xff)
 (byte)((v >> 8) & 0xff)
 (byte)((v >> 16) & 0xff)
 (byte)((v >> 24) & 0xff)
 
 If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.

Specified by:
writeInt in interface DataOutput
Specified by:
writeInt in interface ImageOutputStream
Parameters:
v - an int containing the value to be
 written.
Throws:
IOException - if an I/O error occurs.


"
ImageOutputStreamImpl,"writeInts(int[] i, int off, int len)",void,Writes a sequence of ints to the stream at the current position.,"

writeInts
public void writeInts(int[] i,
                      int off,
                      int len)
               throws IOException
Description copied from interface: ImageOutputStream
Writes a sequence of ints to the stream at the current
 position.  If len is 0, nothing is written.
 The int i[off] is written first, then the int
 i[off + 1], and so on.  The byte order of the
 stream is used to determine the order in which the individual
 bytes are written.

  If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.

Specified by:
writeInts in interface ImageOutputStream
Parameters:
i - an array of ints to be written.
off - the start offset in the data.
len - the number of ints to write.
Throws:
IOException - if an I/O error occurs.


"
ImageOutputStreamImpl,writeLong(long v),void,Writes the 64 bits of v to the stream.,"

writeLong
public void writeLong(long v)
               throws IOException
Description copied from interface: ImageOutputStream
Writes the 64 bits of v to the stream.  If the
 stream uses network byte order, the bytes written, in order,
 will be:

 
 (byte)((v >> 56) & 0xff)
 (byte)((v >> 48) & 0xff)
 (byte)((v >> 40) & 0xff)
 (byte)((v >> 32) & 0xff)
 (byte)((v >> 24) & 0xff)
 (byte)((v >> 16) & 0xff)
 (byte)((v >> 8) & 0xff)
 (byte)(v & 0xff)
 

 Otherwise, the bytes written will be:

 
 (byte)(v & 0xff)
 (byte)((v >> 8) & 0xff)
 (byte)((v >> 16) & 0xff)
 (byte)((v >> 24) & 0xff)
 (byte)((v >> 32) & 0xff)
 (byte)((v >> 40) & 0xff)
 (byte)((v >> 48) & 0xff)
 (byte)((v >> 56) & 0xff)
 
 If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.

Specified by:
writeLong in interface DataOutput
Specified by:
writeLong in interface ImageOutputStream
Parameters:
v - a long containing the value to be
 written.
Throws:
IOException - if an I/O error occurs.


"
ImageOutputStreamImpl,"writeLongs(long[] l, int off, int len)",void,Writes a sequence of longs to the stream at the current position.,"

writeLongs
public void writeLongs(long[] l,
                       int off,
                       int len)
                throws IOException
Description copied from interface: ImageOutputStream
Writes a sequence of longs to the stream at the current
 position.  If len is 0, nothing is written.
 The long l[off] is written first, then the long
 l[off + 1], and so on.  The byte order of the
 stream is used to determine the order in which the individual
 bytes are written.

  If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.

Specified by:
writeLongs in interface ImageOutputStream
Parameters:
l - an array of longs to be written.
off - the start offset in the data.
len - the number of longs to write.
Throws:
IOException - if an I/O error occurs.


"
ImageOutputStreamImpl,writeShort(int v),void,Writes the 16 low-order bits of v to the stream.,"

writeShort
public void writeShort(int v)
                throws IOException
Description copied from interface: ImageOutputStream
Writes the 16 low-order bits of v to the
 stream. The 16 high-order bits of v are ignored.
 If the stream uses network byte order, the bytes written, in
 order, will be:

 
 (byte)((v >> 8) & 0xff)
 (byte)(v & 0xff)
 

 Otherwise, the bytes written will be:

 
 (byte)(v & 0xff)
 (byte)((v >> 8) & 0xff)
 
 If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.

Specified by:
writeShort in interface DataOutput
Specified by:
writeShort in interface ImageOutputStream
Parameters:
v - an int containing the short value to be
 written.
Throws:
IOException - if an I/O error occurs.


"
ImageOutputStreamImpl,"writeShorts(short[] s, int off, int len)",void,Writes a sequence of shorts to the stream at the current position.,"

writeShorts
public void writeShorts(short[] s,
                        int off,
                        int len)
                 throws IOException
Description copied from interface: ImageOutputStream
Writes a sequence of shorts to the stream at the current
 position.  If len is 0, nothing is written.
 The short s[off] is written first, then the short
 s[off + 1], and so on.  The byte order of the
 stream is used to determine the order in which the individual
 bytes are written.

  If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.

Specified by:
writeShorts in interface ImageOutputStream
Parameters:
s - an array of shorts to be written.
off - the start offset in the data.
len - the number of shorts to write.
Throws:
IOException - if an I/O error occurs.


"
ImageOutputStreamImpl,writeUTF(String s),void,"Writes two bytes of length information to the output stream in network byte order, followed by the modified UTF-8 representation of every character in the string s.","

writeUTF
public void writeUTF(String s)
              throws IOException
Description copied from interface: ImageOutputStream
Writes two bytes of length information to the output stream in
 network byte order, followed by the
 modified
 UTF-8
 representation of every character in the string s.
 If s is null, a
 NullPointerException is thrown.  Each character in
 the string s is converted to a group of one, two,
 or three bytes, depending on the value of the character.

  If a character c is in the range
 \u0001 through \u007f, it is
 represented by one byte:

 
 (byte)c
 
 If a character c is \u0000 or
 is in the range \u0080 through
 \u07ff, then it is represented by two bytes,
 to be written in the order shown:

  
 (byte)(0xc0 | (0x1f & (c >> 6)))
 (byte)(0x80 | (0x3f & c))
 
 If a character c is in the range
 \u0800 through uffff, then it is
 represented by three bytes, to be written in the order shown:

  
 (byte)(0xe0 | (0x0f & (c >> 12)))
 (byte)(0x80 | (0x3f & (c >> 6)))
 (byte)(0x80 | (0x3f & c))
 
 First, the total number of bytes needed to represent all
 the characters of s is calculated. If this number
 is larger than 65535, then a
 UTFDataFormatException is thrown. Otherwise, this
 length is written to the output stream in exactly the manner of
 the writeShort method; after this, the one-, two-,
 or three-byte representation of each character in the string
 s is written.

  The current byte order setting is ignored.

  If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.

 Note: This method should not be used in
 the  implementation of image formats that use standard UTF-8,
 because  the modified UTF-8 used here is incompatible with
 standard UTF-8.

Specified by:
writeUTF in interface DataOutput
Specified by:
writeUTF in interface ImageOutputStream
Parameters:
s - a String containing the value to be
 written.
Throws:
UTFDataFormatException - if the modified UTF-8
 representation of s requires more than 65536 bytes.
IOException - if an I/O error occurs.


"
MemoryCacheImageInputStream,close(),void,"Closes this MemoryCacheImageInputStream, freeing the cache.","

close
public void close()
           throws IOException
Closes this MemoryCacheImageInputStream, freeing
 the cache.  The source InputStream is not closed.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in interface ImageInputStream
Overrides:
close in class ImageInputStreamImpl
Throws:
IOException - if an I/O error occurs.


"
MemoryCacheImageInputStream,finalize(),protected void,Finalizes this object prior to garbage collection.,"

finalize
protected void finalize()
                 throws Throwable
Finalizes this object prior to garbage collection.  The
 close method is called to close any open input
 source.  This method should not be called from application
 code.

Overrides:
finalize in class ImageInputStreamImpl
Throws:
Throwable - if an error occurs during superclass
 finalization.
See Also:
WeakReference, 
PhantomReference


"
MemoryCacheImageInputStream,flushBefore(long pos),void,Discards the initial portion of the stream prior to the indicated position.,"

flushBefore
public void flushBefore(long pos)
                 throws IOException
Description copied from interface: ImageInputStream
Discards the initial portion of the stream prior to the
 indicated position.  Attempting to seek to an offset within the
 flushed portion of the stream will result in an
 IndexOutOfBoundsException.

  Calling flushBefore may allow classes
 implementing this interface to free up resources such as memory
 or disk space that are being used to store data from the
 stream.

Specified by:
flushBefore in interface ImageInputStream
Overrides:
flushBefore in class ImageInputStreamImpl
Parameters:
pos - a long containing the length of the
 stream prefix that may be flushed.
Throws:
IOException - if an I/O error occurs.


"
MemoryCacheImageInputStream,isCached(),boolean,Returns true since this ImageInputStream caches data in order to allow seeking backwards.,"

isCached
public boolean isCached()
Returns true since this
 ImageInputStream caches data in order to allow
 seeking backwards.

Specified by:
isCached in interface ImageInputStream
Overrides:
isCached in class ImageInputStreamImpl
Returns:
true.
See Also:
isCachedMemory(), 
isCachedFile()


"
MemoryCacheImageInputStream,isCachedFile(),boolean,Returns false since this ImageInputStream does not maintain a file cache.,"

isCachedFile
public boolean isCachedFile()
Returns false since this
 ImageInputStream does not maintain a file cache.

Specified by:
isCachedFile in interface ImageInputStream
Overrides:
isCachedFile in class ImageInputStreamImpl
Returns:
false.
See Also:
isCached(), 
isCachedMemory()


"
MemoryCacheImageInputStream,isCachedMemory(),boolean,Returns true since this ImageInputStream maintains a main memory cache.,"

isCachedMemory
public boolean isCachedMemory()
Returns true since this
 ImageInputStream maintains a main memory cache.

Specified by:
isCachedMemory in interface ImageInputStream
Overrides:
isCachedMemory in class ImageInputStreamImpl
Returns:
true.
See Also:
isCached(), 
isCachedFile()


"
MemoryCacheImageInputStream,read(),int,Reads a single byte from the stream and returns it as an int between 0 and 255.,"

read
public int read()
         throws IOException
Description copied from class: ImageInputStreamImpl
Reads a single byte from the stream and returns it as an
 int between 0 and 255.  If EOF is reached,
 -1 is returned.

  Subclasses must provide an implementation for this method.
 The subclass implementation should update the stream position
 before exiting.

  The bit offset within the stream must be reset to zero before
 the read occurs.

Specified by:
read in interface ImageInputStream
Specified by:
read in class ImageInputStreamImpl
Returns:
the value of the next byte in the stream, or -1
 if EOF is reached.
Throws:
IOException - if the stream has been closed.


"
MemoryCacheImageInputStream,"read(byte[] b, int off, int len)",int,"Reads up to len bytes from the stream, and stores them into b starting at index off.","

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Description copied from class: ImageInputStreamImpl
Reads up to len bytes from the stream, and stores
 them into b starting at index off.
 If no bytes can be read because the end of the stream has been
 reached, -1 is returned.

  The bit offset within the stream must be reset to zero before
 the read occurs.

  Subclasses must provide an implementation for this method.
 The subclass implementation should update the stream position
 before exiting.

Specified by:
read in interface ImageInputStream
Specified by:
read in class ImageInputStreamImpl
Parameters:
b - an array of bytes to be written to.
off - the starting position within b to write to.
len - the maximum number of bytes to read.
Returns:
the number of bytes actually read, or -1
 to indicate EOF.
Throws:
IOException - if an I/O error occurs.


"
MemoryCacheImageOutputStream,close(),void,Closes this MemoryCacheImageOutputStream.,"

close
public void close()
           throws IOException
Closes this MemoryCacheImageOutputStream.  All
 pending data is flushed to the output, and the cache
 is released.  The destination OutputStream
 is not closed.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in interface ImageInputStream
Overrides:
close in class ImageInputStreamImpl
Throws:
IOException - if an I/O error occurs.


"
MemoryCacheImageOutputStream,flushBefore(long pos),void,Discards the initial portion of the stream prior to the indicated position.,"

flushBefore
public void flushBefore(long pos)
                 throws IOException
Description copied from interface: ImageInputStream
Discards the initial portion of the stream prior to the
 indicated position.  Attempting to seek to an offset within the
 flushed portion of the stream will result in an
 IndexOutOfBoundsException.

  Calling flushBefore may allow classes
 implementing this interface to free up resources such as memory
 or disk space that are being used to store data from the
 stream.

Specified by:
flushBefore in interface ImageInputStream
Specified by:
flushBefore in interface ImageOutputStream
Overrides:
flushBefore in class ImageInputStreamImpl
Parameters:
pos - a long containing the length of the
 stream prefix that may be flushed.
Throws:
IOException - if an I/O error occurs.


"
MemoryCacheImageOutputStream,isCached(),boolean,Returns true since this ImageOutputStream caches data in order to allow seeking backwards.,"

isCached
public boolean isCached()
Returns true since this
 ImageOutputStream caches data in order to allow
 seeking backwards.

Specified by:
isCached in interface ImageInputStream
Overrides:
isCached in class ImageInputStreamImpl
Returns:
true.
See Also:
isCachedMemory(), 
isCachedFile()


"
MemoryCacheImageOutputStream,isCachedFile(),boolean,Returns false since this ImageOutputStream does not maintain a file cache.,"

isCachedFile
public boolean isCachedFile()
Returns false since this
 ImageOutputStream does not maintain a file cache.

Specified by:
isCachedFile in interface ImageInputStream
Overrides:
isCachedFile in class ImageInputStreamImpl
Returns:
false.
See Also:
isCached(), 
isCachedMemory()


"
MemoryCacheImageOutputStream,isCachedMemory(),boolean,Returns true since this ImageOutputStream maintains a main memory cache.,"

isCachedMemory
public boolean isCachedMemory()
Returns true since this
 ImageOutputStream maintains a main memory cache.

Specified by:
isCachedMemory in interface ImageInputStream
Overrides:
isCachedMemory in class ImageInputStreamImpl
Returns:
true.
See Also:
isCached(), 
isCachedFile()


"
MemoryCacheImageOutputStream,length(),long,Returns -1L to indicate that the stream has unknown length.,"

length
public long length()
Description copied from class: ImageInputStreamImpl
Returns -1L to indicate that the stream has unknown
 length.  Subclasses must override this method to provide actual
 length information.

Specified by:
length in interface ImageInputStream
Overrides:
length in class ImageInputStreamImpl
Returns:
-1L to indicate unknown length.


"
MemoryCacheImageOutputStream,read(),int,Reads a single byte from the stream and returns it as an int between 0 and 255.,"

read
public int read()
         throws IOException
Description copied from class: ImageInputStreamImpl
Reads a single byte from the stream and returns it as an
 int between 0 and 255.  If EOF is reached,
 -1 is returned.

  Subclasses must provide an implementation for this method.
 The subclass implementation should update the stream position
 before exiting.

  The bit offset within the stream must be reset to zero before
 the read occurs.

Specified by:
read in interface ImageInputStream
Specified by:
read in class ImageInputStreamImpl
Returns:
the value of the next byte in the stream, or -1
 if EOF is reached.
Throws:
IOException - if the stream has been closed.


"
MemoryCacheImageOutputStream,"read(byte[] b, int off, int len)",int,"Reads up to len bytes from the stream, and stores them into b starting at index off.","

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Description copied from class: ImageInputStreamImpl
Reads up to len bytes from the stream, and stores
 them into b starting at index off.
 If no bytes can be read because the end of the stream has been
 reached, -1 is returned.

  The bit offset within the stream must be reset to zero before
 the read occurs.

  Subclasses must provide an implementation for this method.
 The subclass implementation should update the stream position
 before exiting.

Specified by:
read in interface ImageInputStream
Specified by:
read in class ImageInputStreamImpl
Parameters:
b - an array of bytes to be written to.
off - the starting position within b to write to.
len - the maximum number of bytes to read.
Returns:
the number of bytes actually read, or -1
 to indicate EOF.
Throws:
IOException - if an I/O error occurs.


"
MemoryCacheImageOutputStream,"write(byte[] b, int off, int len)",void,Writes a sequence of bytes to the stream at the current position.,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Description copied from interface: ImageOutputStream
Writes a sequence of bytes to the stream at the current
 position.  If len is 0, nothing is written.
 The byte b[off] is written first, then the byte
 b[off + 1], and so on.

  If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.  Implementers can use the
 flushBits
 method of ImageOutputStreamImpl
 to guarantee this.

Specified by:
write in interface DataOutput
Specified by:
write in interface ImageOutputStream
Specified by:
write in class ImageOutputStreamImpl
Parameters:
b - an array of bytes to be written.
off - the start offset in the data.
len - the number of bytes to write.
Throws:
IOException - if an I/O error occurs.


"
MemoryCacheImageOutputStream,write(int b),void,Writes a single byte to the stream at the current position.,"

write
public void write(int b)
           throws IOException
Description copied from interface: ImageOutputStream
Writes a single byte to the stream at the current position.
 The 24 high-order bits of b are ignored.

  If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.  Implementers can use the
 flushBits
 method of ImageOutputStreamImpl
 to guarantee this.

Specified by:
write in interface DataOutput
Specified by:
write in interface ImageOutputStream
Specified by:
write in class ImageOutputStreamImpl
Parameters:
b - an int whose lower 8 bits are to be
 written.
Throws:
IOException - if an I/O error occurs.


"
