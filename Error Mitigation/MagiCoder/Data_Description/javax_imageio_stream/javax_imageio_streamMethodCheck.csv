Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,FileCacheImageInputStream,1,boolean canRead(),False,,NULL
0,FileCacheImageInputStream,2,boolean canWrite(),False,,NULL
0,FileCacheImageInputStream,3,int length(),False,,NULL
0,FileCacheImageInputStream,4,int read(),True,Reads a single byte from the stream and returns it as an int between 0 and 255.,"

read
public int read()
         throws IOException
Description copied from class: ImageInputStreamImpl
Reads a single byte from the stream and returns it as an
 int between 0 and 255.  If EOF is reached,
 -1 is returned.

  Subclasses must provide an implementation for this method.
 The subclass implementation should update the stream position
 before exiting.

  The bit offset within the stream must be reset to zero before
 the read occurs.

Specified by:
read in interface ImageInputStream
Specified by:
read in class ImageInputStreamImpl
Returns:
the value of the next byte in the stream, or -1
 if EOF is reached.
Throws:
IOException - if the stream has been closed.


"
0,FileCacheImageInputStream,5,int read(byte[] b),False,,NULL
0,FileCacheImageInputStream,6,"int read(byte[] b, int off, int len)",True,"Reads up to len bytes from the stream, and stores them into b starting at index off.","

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Description copied from class: ImageInputStreamImpl
Reads up to len bytes from the stream, and stores
 them into b starting at index off.
 If no bytes can be read because the end of the stream has been
 reached, -1 is returned.

  The bit offset within the stream must be reset to zero before
 the read occurs.

  Subclasses must provide an implementation for this method.
 The subclass implementation should update the stream position
 before exiting.

Specified by:
read in interface ImageInputStream
Specified by:
read in class ImageInputStreamImpl
Parameters:
b - an array of bytes to be written to.
off - the starting position within b to write to.
len - the maximum number of bytes to read.
Returns:
the number of bytes actually read, or -1
 to indicate EOF.
Throws:
IOException - if an I/O error occurs.


"
0,FileCacheImageInputStream,7,void reset(),False,,NULL
0,FileCacheImageInputStream,8,long skip(long n),False,,NULL
0,FileCacheImageInputStream,9,void close(),True,"Closes this FileCacheImageInputStream, closing and removing the cache file.","

close
public void close()
           throws IOException
Closes this FileCacheImageInputStream, closing
 and removing the cache file.  The source InputStream
 is not closed.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in interface ImageInputStream
Overrides:
close in class ImageInputStreamImpl
Throws:
IOException - if an error occurs.


"
0,FileCacheImageInputStream,10,void mark(int readlimit),False,,NULL
0,FileCacheImageInputStream,11,boolean markSupported(),False,,NULL
0,FileCacheImageInputStream,12,void flush(),False,,NULL
0,FileCacheImageInputStream,13,void write(int b),False,,NULL
0,FileCacheImageInputStream,14,void write(byte[] b),False,,NULL
0,FileCacheImageInputStream,15,"void write(byte[] b, int off, int len)",False,,NULL
0,FileCacheImageInputStream,16,void writeTo(OutputStream out),False,,NULL
0,FileCacheImageInputStream,17,void setLength(long newLength),False,,NULL
0,FileCacheImageInputStream,18,int available(),False,,NULL
0,FileCacheImageInputStream,19,void seek(long pos),False,,NULL
0,FileCacheImageInputStream,20,long getFilePointer(),False,,NULL
0,FileCacheImageInputStream,21,void setByteOrder(ByteOrder byteOrder),False,,NULL
0,FileCacheImageInputStream,22,ByteOrder getByteOrder(),False,,NULL
0,FileCacheImageInputStream,23,void setBigEndian(boolean bigEndian),False,,NULL
0,FileCacheImageInputStream,24,boolean getBigEndian(),False,,NULL
0,FileCacheImageInputStream,25,void setByteArray(byte[] data),False,,NULL
0,FileCacheImageInputStream,26,byte[] getByteArray(),False,,NULL
0,FileCacheImageInputStream,27,void setFile(File file),False,,NULL
0,FileCacheImageInputStream,28,File getFile(),False,,NULL
0,FileCacheImageInputStream,29,"void setFile(File file, String name)",False,,NULL
0,FileCacheImageInputStream,30,"void setFile(File file, String name, String desc)",False,,NULL
0,FileCacheImageInputStream,31,String getName(),False,,NULL
0,FileCacheImageInputStream,32,String getDescription(),False,,NULL
0,FileCacheImageInputStream,33,void setDescription(String desc),False,,NULL
0,FileCacheImageInputStream,34,void setNativeByteOrder(boolean nativeByteOrder),False,,NULL
0,FileCacheImageInputStream,35,boolean getNativeByteOrder(),False,,NULL
0,FileCacheImageInputStream,36,void setUseByteOrder(boolean useByteOrder),False,,NULL
0,FileCacheImageInputStream,37,boolean getUseByteOrder(),False,,NULL
0,FileCacheImageInputStream,38,void setUseInputByteArray(boolean useInputByteArray),False,,NULL
0,FileCacheImageInputStream,39,boolean getUseInputByteArray(),False,,NULL
0,FileCacheImageInputStream,40,void setUseOutputByteArray(boolean useOutputByteArray),False,,NULL
0,FileCacheImageInputStream,41,boolean getUseOutputByteArray(),False,,NULL
0,FileCacheImageInputStream,42,void setUseTempFile(boolean useTempFile),False,,NULL
0,FileCacheImageInputStream,43,boolean getUseTempFile(),False,,NULL
0,FileCacheImageInputStream,44,void setCacheImageInputStream(ImageInputStream cacheImageInputStream),False,,NULL
0,FileCacheImageInputStream,45,ImageInputStream getCacheImageInputStream(),False,,NULL
0,FileCacheImageInputStream,46,void setCacheSize(int cacheSize),False,,NULL
0,FileCacheImageInputStream,47,int getCacheSize(),False,,NULL
0,FileCacheImageInputStream,48,void setCacheBufferSize(int cacheBufferSize),False,,NULL
0,FileCacheImageInputStream,49,int getCacheBufferSize(),False,,NULL
0,FileCacheImageInputStream,50,void setCacheBuffer(byte[] cacheBuffer),False,,NULL
0,FileCacheImageInputStream,51,byte[] getCacheBuffer(),False,,NULL
0,FileCacheImageInputStream,52,void setCacheBufferPosition(int cacheBufferPosition),False,,NULL
0,FileCacheImageInputStream,53,int getCacheBufferPosition(),False,,NULL
0,FileCacheImageInputStream,54,void setCacheBufferLimit(int cacheBufferLimit),False,,NULL
0,FileCacheImageInputStream,55,int getCacheBufferLimit(),False,,NULL
0,FileCacheImageInputStream,56,void setCacheBufferOffset(int cacheBufferOffset),False,,NULL
0,FileCacheImageInputStream,57,int getCacheBufferOffset(),False,,NULL
0,FileCacheImageInputStream,58,void setCacheBufferEOF(boolean cacheBufferEOF),False,,NULL
0,FileCacheImageInputStream,59,boolean getCacheBufferEOF(),False,,NULL
0,FileCacheImageInputStream,60,void setCacheBufferMark(int cacheBufferMark),False,,NULL
0,FileCacheImageInputStream,61,int getCacheBufferMark(),False,,NULL
0,FileCacheImageInputStream,62,void setCacheBufferReadLimit(int cacheBufferReadLimit),False,,NULL
0,FileCacheImageInputStream,63,int getCacheBufferReadLimit(),False,,NULL
0,FileCacheImageInputStream,64,void setCacheBufferReadPosition(int cacheBufferReadPosition),False,,NULL
0,FileCacheImageInputStream,65,int getCacheBufferReadPosition(),False,,NULL
0,FileCacheImageInputStream,66,void setCacheBufferWriteLimit(int cacheBufferWriteLimit),False,,NULL
0,FileCacheImageInputStream,67,int getCacheBufferWriteLimit(),False,,NULL
1,FileCacheImageOutputStream,1,void close() throws IOException,True,Closes this FileCacheImageOutputStream.,"

close
public void close()
           throws IOException
Closes this FileCacheImageOutputStream.  All
 pending data is flushed to the output, and the cache file
 is closed and removed.  The destination OutputStream
 is not closed.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in interface ImageInputStream
Overrides:
close in class ImageInputStreamImpl
Throws:
IOException - if an error occurs.


"
1,FileCacheImageOutputStream,2,void flush() throws IOException,False,,NULL
1,FileCacheImageOutputStream,3,void write(int b) throws IOException,True,Writes a single byte to the stream at the current position.,"

write
public void write(int b)
           throws IOException
Description copied from interface: ImageOutputStream
Writes a single byte to the stream at the current position.
 The 24 high-order bits of b are ignored.

  If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.  Implementers can use the
 flushBits
 method of ImageOutputStreamImpl
 to guarantee this.

Specified by:
write in interface DataOutput
Specified by:
write in interface ImageOutputStream
Specified by:
write in class ImageOutputStreamImpl
Parameters:
b - an int whose lower 8 bits are to be
 written.
Throws:
IOException - if an I/O error occurs.


"
1,FileCacheImageOutputStream,4,void write(byte[] b) throws IOException,False,,NULL
1,FileCacheImageOutputStream,5,"void write(byte[] b, int off, int len) throws IOException",True,Writes a sequence of bytes to the stream at the current position.,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Description copied from interface: ImageOutputStream
Writes a sequence of bytes to the stream at the current
 position.  If len is 0, nothing is written.
 The byte b[off] is written first, then the byte
 b[off + 1], and so on.

  If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.  Implementers can use the
 flushBits
 method of ImageOutputStreamImpl
 to guarantee this.

Specified by:
write in interface DataOutput
Specified by:
write in interface ImageOutputStream
Specified by:
write in class ImageOutputStreamImpl
Parameters:
b - an array of bytes to be written.
off - the start offset in the data.
len - the number of bytes to write.
Throws:
IOException - if an I/O error occurs.


"
2,FileImageInputStream,1,int read(),True,Reads a single byte from the stream and returns it as an int between 0 and 255.,"

read
public int read()
         throws IOException
Description copied from class: ImageInputStreamImpl
Reads a single byte from the stream and returns it as an
 int between 0 and 255.  If EOF is reached,
 -1 is returned.

  Subclasses must provide an implementation for this method.
 The subclass implementation should update the stream position
 before exiting.

  The bit offset within the stream must be reset to zero before
 the read occurs.

Specified by:
read in interface ImageInputStream
Specified by:
read in class ImageInputStreamImpl
Returns:
the value of the next byte in the stream, or -1
 if EOF is reached.
Throws:
IOException - if the stream has been closed.


"
2,FileImageInputStream,2,int read(byte[] b),False,,NULL
2,FileImageInputStream,3,"int read(byte[] b, int off, int len)",True,"Reads up to len bytes from the stream, and stores them into b starting at index off.","

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Description copied from class: ImageInputStreamImpl
Reads up to len bytes from the stream, and stores
 them into b starting at index off.
 If no bytes can be read because the end of the stream has been
 reached, -1 is returned.

  The bit offset within the stream must be reset to zero before
 the read occurs.

  Subclasses must provide an implementation for this method.
 The subclass implementation should update the stream position
 before exiting.

Specified by:
read in interface ImageInputStream
Specified by:
read in class ImageInputStreamImpl
Parameters:
b - an array of bytes to be written to.
off - the starting position within b to write to.
len - the maximum number of bytes to read.
Returns:
the number of bytes actually read, or -1
 to indicate EOF.
Throws:
IOException - if an I/O error occurs.


"
2,FileImageInputStream,4,long skip(long n),False,,NULL
2,FileImageInputStream,5,int available(),False,,NULL
2,FileImageInputStream,6,boolean markSupported(),False,,NULL
2,FileImageInputStream,7,void mark(int readlimit),False,,NULL
2,FileImageInputStream,8,void reset(),False,,NULL
2,FileImageInputStream,9,void close(),True,Closes the stream.,"

close
public void close()
           throws IOException
Description copied from interface: ImageInputStream
Closes the stream.  Attempts to access a stream that has been
 closed may result in IOExceptions or incorrect
 behavior.  Calling this method may allow classes implementing
 this interface to release resources associated with the stream
 such as memory, disk space, or file descriptors.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in interface ImageInputStream
Overrides:
close in class ImageInputStreamImpl
Throws:
IOException - if an I/O error occurs.


"
3,FileImageOutputStream,1,FileImageOutputStream(File file),False,,NULL
3,FileImageOutputStream,2,"FileImageOutputStream(File file, boolean append)",False,,NULL
3,FileImageOutputStream,3,FileImageOutputStream(RandomAccessFile raf),False,,NULL
3,FileImageOutputStream,4,void write(int b),True,Writes a single byte to the stream at the current position.,"

write
public void write(int b)
           throws IOException
Description copied from interface: ImageOutputStream
Writes a single byte to the stream at the current position.
 The 24 high-order bits of b are ignored.

  If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.  Implementers can use the
 flushBits
 method of ImageOutputStreamImpl
 to guarantee this.

Specified by:
write in interface DataOutput
Specified by:
write in interface ImageOutputStream
Specified by:
write in class ImageOutputStreamImpl
Parameters:
b - an int whose lower 8 bits are to be
 written.
Throws:
IOException - if an I/O error occurs.


"
3,FileImageOutputStream,5,"void write(byte b[], int off, int len)",False,,NULL
3,FileImageOutputStream,6,void flushBefore(long pos),False,,NULL
3,FileImageOutputStream,7,void close(),True,Closes the stream.,"

close
public void close()
           throws IOException
Description copied from interface: ImageInputStream
Closes the stream.  Attempts to access a stream that has been
 closed may result in IOExceptions or incorrect
 behavior.  Calling this method may allow classes implementing
 this interface to release resources associated with the stream
 such as memory, disk space, or file descriptors.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in interface ImageInputStream
Overrides:
close in class ImageInputStreamImpl
Throws:
IOException - if an I/O error occurs.


"
3,FileImageOutputStream,8,long length(),True,Returns -1L to indicate that the stream has unknown length.,"

length
public long length()
Description copied from class: ImageInputStreamImpl
Returns -1L to indicate that the stream has unknown
 length.  Subclasses must override this method to provide actual
 length information.

Specified by:
length in interface ImageInputStream
Overrides:
length in class ImageInputStreamImpl
Returns:
-1L to indicate unknown length.


"
3,FileImageOutputStream,9,void seek(long pos),True,Sets the current stream position and resets the bit offset to 0.,"

seek
public void seek(long pos)
          throws IOException
Sets the current stream position and resets the bit offset to
 0.  It is legal to seeking past the end of the file; an
 EOFException will be thrown only if a read is
 performed.  The file length will not be increased until a write
 is performed.

Specified by:
seek in interface ImageInputStream
Overrides:
seek in class ImageInputStreamImpl
Parameters:
pos - a long containing the desired file
 pointer position.
Throws:
IndexOutOfBoundsException - if pos is smaller
 than the flushed position.
IOException - if any other I/O error occurs.


"
3,FileImageOutputStream,10,long getFilePointer(),False,,NULL
4,IIOByteBuffer,1,boolean isReadOnly(),False,,NULL
4,IIOByteBuffer,2,int capacity(),False,,NULL
4,IIOByteBuffer,3,int position(),False,,NULL
4,IIOByteBuffer,4,int limit(),False,,NULL
4,IIOByteBuffer,5,int remaining(),False,,NULL
4,IIOByteBuffer,6,ByteBuffer slice(),False,,NULL
4,IIOByteBuffer,7,ByteBuffer duplicate(),False,,NULL
4,IIOByteBuffer,8,ByteBuffer asReadOnlyBuffer(),False,,NULL
4,IIOByteBuffer,9,ByteBuffer compact(),False,,NULL
4,IIOByteBuffer,10,ByteBuffer order(),False,,NULL
4,IIOByteBuffer,11,ByteBuffer put(byte b),False,,NULL
4,IIOByteBuffer,12,"ByteBuffer put(int index, byte b)",False,,NULL
4,IIOByteBuffer,13,ByteBuffer put(byte[] src),False,,NULL
4,IIOByteBuffer,14,"ByteBuffer put(byte[] src, int offset, int length)",False,,NULL
4,IIOByteBuffer,15,ByteBuffer put(ByteBuffer src),False,,NULL
4,IIOByteBuffer,16,"ByteBuffer put(ByteBuffer src, int offset, int length)",False,,NULL
4,IIOByteBuffer,17,ByteBuffer get(),False,,NULL
4,IIOByteBuffer,18,ByteBuffer get(int index),False,,NULL
4,IIOByteBuffer,19,ByteBuffer get(byte[] dst),False,,NULL
4,IIOByteBuffer,20,"ByteBuffer get(byte[] dst, int offset, int length)",False,,NULL
4,IIOByteBuffer,21,ByteBuffer get(ByteBuffer dst),False,,NULL
4,IIOByteBuffer,22,"ByteBuffer get(ByteBuffer dst, int offset, int length)",False,,NULL
4,IIOByteBuffer,23,ByteBuffer flip(),False,,NULL
4,IIOByteBuffer,24,ByteBuffer clear(),False,,NULL
4,IIOByteBuffer,25,ByteBuffer rewind(),False,,NULL
4,IIOByteBuffer,26,ByteBuffer mark(),False,,NULL
4,IIOByteBuffer,27,ByteBuffer reset(),False,,NULL
4,IIOByteBuffer,28,ByteBuffer hasRemaining(),False,,NULL
4,IIOByteBuffer,29,ByteBuffer compact(),False,,NULL
4,IIOByteBuffer,30,ByteBuffer order(ByteOrder bo),False,,NULL
4,IIOByteBuffer,31,ByteBuffer asReadOnlyBuffer(),False,,NULL
4,IIOByteBuffer,32,ByteBuffer slice(),False,,NULL
4,IIOByteBuffer,33,ByteBuffer duplicate(),False,,NULL
4,IIOByteBuffer,34,ByteBuffer get(int index),False,,NULL
4,IIOByteBuffer,35,ByteBuffer get(byte[] dst),False,,NULL
4,IIOByteBuffer,36,"ByteBuffer get(byte[] dst, int offset, int length)",False,,NULL
4,IIOByteBuffer,37,ByteBuffer get(ByteBuffer dst),False,,NULL
4,IIOByteBuffer,38,"ByteBuffer get(ByteBuffer dst, int offset, int length)",False,,NULL
4,IIOByteBuffer,39,ByteBuffer flip(),False,,NULL
4,IIOByteBuffer,40,ByteBuffer clear(),False,,NULL
4,IIOByteBuffer,41,ByteBuffer rewind(),False,,NULL
4,IIOByteBuffer,42,ByteBuffer mark(),False,,NULL
4,IIOByteBuffer,43,ByteBuffer reset(),False,,NULL
4,IIOByteBuffer,44,ByteBuffer hasRemaining(),False,,NULL
4,IIOByteBuffer,45,ByteBuffer compact(),False,,NULL
4,IIOByteBuffer,46,ByteBuffer order(ByteOrder bo),False,,NULL
4,IIOByteBuffer,47,ByteBuffer asReadOnlyBuffer(),False,,NULL
4,IIOByteBuffer,48,ByteBuffer slice(),False,,NULL
4,IIOByteBuffer,49,ByteBuffer duplicate(),False,,NULL
4,IIOByteBuffer,50,ByteBuffer get(int index),False,,NULL
4,IIOByteBuffer,51,ByteBuffer get(byte[] dst),False,,NULL
4,IIOByteBuffer,52,"ByteBuffer get(byte[] dst, int offset, int length)",False,,NULL
4,IIOByteBuffer,53,ByteBuffer get(ByteBuffer dst),False,,NULL
4,IIOByteBuffer,54,"ByteBuffer get(ByteBuffer dst, int offset, int length)",False,,NULL
4,IIOByteBuffer,55,ByteBuffer flip(),False,,NULL
4,IIOByteBuffer,56,ByteBuffer clear(),False,,NULL
5,ImageInputStreamImpl,1,int read(),True,Reads a single byte from the stream and returns it as an int between 0 and 255.,"

read
public abstract int read()
                  throws IOException
Reads a single byte from the stream and returns it as an
 int between 0 and 255.  If EOF is reached,
 -1 is returned.

  Subclasses must provide an implementation for this method.
 The subclass implementation should update the stream position
 before exiting.

  The bit offset within the stream must be reset to zero before
 the read occurs.

Specified by:
read in interface ImageInputStream
Returns:
the value of the next byte in the stream, or -1
 if EOF is reached.
Throws:
IOException - if the stream has been closed.


"
5,ImageInputStreamImpl,2,int read(byte[] b),True,"A convenience method that calls read(b, 0, b.length).","

read
public int read(byte[] b)
         throws IOException
A convenience method that calls read(b, 0, b.length).

  The bit offset within the stream is reset to zero before
 the read occurs.

Specified by:
read in interface ImageInputStream
Parameters:
b - an array of bytes to be written to.
Returns:
the number of bytes actually read, or -1
 to indicate EOF.
Throws:
NullPointerException - if b is
 null.
IOException - if an I/O error occurs.


"
5,ImageInputStreamImpl,3,"int read(byte[] b, int off, int len)",True,"Reads up to len bytes from the stream, and stores them into b starting at index off.","

read
public abstract int read(byte[] b,
                         int off,
                         int len)
                  throws IOException
Reads up to len bytes from the stream, and stores
 them into b starting at index off.
 If no bytes can be read because the end of the stream has been
 reached, -1 is returned.

  The bit offset within the stream must be reset to zero before
 the read occurs.

  Subclasses must provide an implementation for this method.
 The subclass implementation should update the stream position
 before exiting.

Specified by:
read in interface ImageInputStream
Parameters:
b - an array of bytes to be written to.
off - the starting position within b to write to.
len - the maximum number of bytes to read.
Returns:
the number of bytes actually read, or -1
 to indicate EOF.
Throws:
IndexOutOfBoundsException - if off is
 negative, len is negative, or off +
 len is greater than b.length.
NullPointerException - if b is
 null.
IOException - if an I/O error occurs.


"
5,ImageInputStreamImpl,4,long skip(long n),False,,NULL
5,ImageInputStreamImpl,5,int available(),False,,NULL
5,ImageInputStreamImpl,6,boolean markSupported(),False,,NULL
5,ImageInputStreamImpl,7,void mark(int readlimit),False,,NULL
5,ImageInputStreamImpl,8,void reset(),True,Resets the current stream byte and bit positions from the stack of marked positions.,"

reset
public void reset()
           throws IOException
Resets the current stream byte and bit positions from the stack
 of marked positions.

  An IOException will be thrown if the previous
 marked position lies in the discarded portion of the stream.

Specified by:
reset in interface ImageInputStream
Throws:
IOException - if an I/O error occurs.


"
5,ImageInputStreamImpl,9,void close(),True,Closes the stream.,"

close
public void close()
           throws IOException
Description copied from interface: ImageInputStream
Closes the stream.  Attempts to access a stream that has been
 closed may result in IOExceptions or incorrect
 behavior.  Calling this method may allow classes implementing
 this interface to release resources associated with the stream
 such as memory, disk space, or file descriptors.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in interface ImageInputStream
Throws:
IOException - if an I/O error occurs.


"
5,ImageInputStreamImpl,10,long getFilePointer(),False,,NULL
5,ImageInputStreamImpl,11,void seek(long pos),True,Sets the current stream position to the desired location.,"

seek
public void seek(long pos)
          throws IOException
Description copied from interface: ImageInputStream
Sets the current stream position to the desired location.  The
 next read will occur at this location.  The bit offset is set
 to 0.

  An IndexOutOfBoundsException will be thrown if
 pos is smaller than the flushed position (as
 returned by getflushedPosition).

  It is legal to seek past the end of the file; an
 java.io.EOFException will be thrown only if a read is
 performed.

Specified by:
seek in interface ImageInputStream
Parameters:
pos - a long containing the desired file
 pointer position.
Throws:
IOException - if any other I/O error occurs.


"
5,ImageInputStreamImpl,12,long length(),True,Returns -1L to indicate that the stream has unknown length.,"

length
public long length()
Returns -1L to indicate that the stream has unknown
 length.  Subclasses must override this method to provide actual
 length information.

Specified by:
length in interface ImageInputStream
Returns:
-1L to indicate unknown length.


"
5,ImageInputStreamImpl,13,boolean readFully(byte[] b),False,,NULL
5,ImageInputStreamImpl,14,"boolean readFully(byte[] b, int off, int len)",False,,NULL
5,ImageInputStreamImpl,15,boolean readAsciiLine(StringBuffer sb),False,,NULL
5,ImageInputStreamImpl,16,boolean readLine(StringBuffer sb),False,,NULL
5,ImageInputStreamImpl,17,"boolean readLine(StringBuffer sb, int max)",False,,NULL
5,ImageInputStreamImpl,18,"boolean readLine(StringBuffer sb, int max, String eol)",False,,NULL
5,ImageInputStreamImpl,19,"boolean readLine(StringBuffer sb, int max, String eol, boolean strip)",False,,NULL
5,ImageInputStreamImpl,20,"boolean readLine(StringBuffer sb, int max, String eol, boolean strip, boolean trim)",False,,NULL
5,ImageInputStreamImpl,21,"boolean readLine(StringBuffer sb, int max, String eol, boolean strip, boolean trim, boolean ignore)",False,,NULL
5,ImageInputStreamImpl,22,"boolean readLine(StringBuffer sb, int max, String eol, boolean strip, boolean trim, boolean ignore, boolean eof)",False,,NULL
5,ImageInputStreamImpl,23,"boolean readLine(StringBuffer sb, int max, String eol, boolean strip, boolean trim, boolean ignore, boolean eof, boolean eolOnly)",False,,NULL
5,ImageInputStreamImpl,24,"boolean readLine(StringBuffer sb, int max, String eol, boolean strip, boolean trim, boolean ignore, boolean eof, boolean eolOnly, boolean eolIsEnd)",False,,NULL
5,ImageInputStreamImpl,25,"boolean readLine(StringBuffer sb, int max, String eol, boolean strip, boolean trim, boolean ignore, boolean eof, boolean eolOnly, boolean eolIsEnd, boolean eolIsEndOfStream)",False,,NULL
6,ImageOutputStreamImpl,1,void close(),False,,NULL
6,ImageOutputStreamImpl,2,void flush(),False,,NULL
6,ImageOutputStreamImpl,3,void write(int b),True,Writes a single byte to the stream at the current position.,"

write
public abstract void write(int b)
                    throws IOException
Description copied from interface: ImageOutputStream
Writes a single byte to the stream at the current position.
 The 24 high-order bits of b are ignored.

  If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.  Implementers can use the
 flushBits
 method of ImageOutputStreamImpl
 to guarantee this.

Specified by:
write in interface DataOutput
Specified by:
write in interface ImageOutputStream
Parameters:
b - an int whose lower 8 bits are to be
 written.
Throws:
IOException - if an I/O error occurs.


"
6,ImageOutputStreamImpl,4,void write(byte[] b),True,Writes a sequence of bytes to the stream at the current position.,"

write
public void write(byte[] b)
           throws IOException
Description copied from interface: ImageOutputStream
Writes a sequence of bytes to the stream at the current
 position.  If b.length is 0, nothing is written.
 The byte b[0] is written first, then the byte
 b[1], and so on.

  If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.

Specified by:
write in interface DataOutput
Specified by:
write in interface ImageOutputStream
Parameters:
b - an array of bytes to be written.
Throws:
IOException - if an I/O error occurs.


"
6,ImageOutputStreamImpl,5,"void write(byte[] b, int off, int len)",True,Writes a sequence of bytes to the stream at the current position.,"

write
public abstract void write(byte[] b,
                           int off,
                           int len)
                    throws IOException
Description copied from interface: ImageOutputStream
Writes a sequence of bytes to the stream at the current
 position.  If len is 0, nothing is written.
 The byte b[off] is written first, then the byte
 b[off + 1], and so on.

  If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.  Implementers can use the
 flushBits
 method of ImageOutputStreamImpl
 to guarantee this.

Specified by:
write in interface DataOutput
Specified by:
write in interface ImageOutputStream
Parameters:
b - an array of bytes to be written.
off - the start offset in the data.
len - the number of bytes to write.
Throws:
IOException - if an I/O error occurs.


"
6,ImageOutputStreamImpl,6,void writeTo(OutputStream out),False,,NULL
6,ImageOutputStreamImpl,7,void seek(long pos),False,,NULL
6,ImageOutputStreamImpl,8,long length(),False,,NULL
6,ImageOutputStreamImpl,9,long getFilePointer(),False,,NULL
6,ImageOutputStreamImpl,10,"void write(int b, int off, int len)",False,,NULL
6,ImageOutputStreamImpl,11,"void write(byte[] b, int off, int len, int off2, int len2)",False,,NULL
6,ImageOutputStreamImpl,12,"void write(int[] b, int off, int len)",False,,NULL
6,ImageOutputStreamImpl,13,"void write(int[] b, int off, int len, int off2, int len2)",False,,NULL
6,ImageOutputStreamImpl,14,"void write(long[] b, int off, int len)",False,,NULL
6,ImageOutputStreamImpl,15,"void write(long[] b, int off, int len, int off2, int len2)",False,,NULL
6,ImageOutputStreamImpl,16,"void write(float[] b, int off, int len)",False,,NULL
6,ImageOutputStreamImpl,17,"void write(float[] b, int off, int len, int off2, int len2)",False,,NULL
6,ImageOutputStreamImpl,18,"void write(double[] b, int off, int len)",False,,NULL
6,ImageOutputStreamImpl,19,"void write(double[] b, int off, int len, int off2, int len2)",False,,NULL
6,ImageOutputStreamImpl,20,"void write(boolean[] b, int off, int len)",False,,NULL
6,ImageOutputStreamImpl,21,"void write(boolean[] b, int off, int len, int off2, int len2)",False,,NULL
6,ImageOutputStreamImpl,22,"void write(char[] b, int off, int len)",False,,NULL
6,ImageOutputStreamImpl,23,"void write(char[] b, int off, int len, int off2, int len2)",False,,NULL
6,ImageOutputStreamImpl,24,void write(Object o),False,,NULL
6,ImageOutputStreamImpl,25,"void write(Object o, int off, int len)",False,,NULL
6,ImageOutputStreamImpl,26,"void write(Object o, int off, int len, int off2, int len2)",False,,NULL
6,ImageOutputStreamImpl,27,void write(String s),False,,NULL
6,ImageOutputStreamImpl,28,"void write(String s, int off, int len)",False,,NULL
6,ImageOutputStreamImpl,29,"void write(String s, int off, int len, int off2, int len2)",False,,NULL
6,ImageOutputStreamImpl,30,"void write(byte[] b, int off, int len, int off2, int len2)",False,,NULL
6,ImageOutputStreamImpl,31,"void write(int[] b, int off, int len, int off2, int len2)",False,,NULL
6,ImageOutputStreamImpl,32,"void write(long[] b, int off, int len, int off2, int len2)",False,,NULL
6,ImageOutputStreamImpl,33,"void write(float[] b, int off, int len, int off2, int len2)",False,,NULL
6,ImageOutputStreamImpl,34,"void write(double[] b, int off, int len, int off2, int len2)",False,,NULL
6,ImageOutputStreamImpl,35,"void write(boolean[] b, int off, int len, int off2, int len2)",False,,NULL
6,ImageOutputStreamImpl,36,"void write(char[] b, int off, int len, int off2, int len2)",False,,NULL
6,ImageOutputStreamImpl,37,"void write(Object o, int off, int len, int off2, int len2)",False,,NULL
6,ImageOutputStreamImpl,38,"void write(String s, int off, int len, int off2, int len2)",False,,NULL
6,ImageOutputStreamImpl,39,"void write(byte[] b, int off, int len, int off2, int len2)",False,,NULL
6,ImageOutputStreamImpl,40,"void write(int[] b, int off, int len, int off2, int len2)",False,,NULL
6,ImageOutputStreamImpl,41,"void write(long[] b, int off, int len, int off2, int len2)",False,,NULL
6,ImageOutputStreamImpl,42,"void write(float[] b, int off, int len, int off2, int len2)",False,,NULL
6,ImageOutputStreamImpl,43,"void write(double[] b, int off, int len, int off2, int len2)",False,,NULL
6,ImageOutputStreamImpl,44,"void write(boolean[] b, int off, int len, int off2, int len2)",False,,NULL
6,ImageOutputStreamImpl,45,"void write(char[] b, int off, int len, int off2, int len2)",False,,NULL
6,ImageOutputStreamImpl,46,"void write(Object o, int off, int len, int off2, int len2)",False,,NULL
6,ImageOutputStreamImpl,47,"void write(String s, int off, int len, int off2, int len2)",False,,NULL
6,ImageOutputStreamImpl,48,"void write(byte[] b, int off, int len, int off2, int len2)",False,,NULL
6,ImageOutputStreamImpl,49,"void write(int[] b, int off, int len, int off2, int len2)",False,,NULL
6,ImageOutputStreamImpl,50,"void write(long[] b, int off, int len, int off2, int len2)",False,,NULL
7,MemoryCacheImageInputStream,1,int read(),True,Reads a single byte from the stream and returns it as an int between 0 and 255.,"

read
public int read()
         throws IOException
Description copied from class: ImageInputStreamImpl
Reads a single byte from the stream and returns it as an
 int between 0 and 255.  If EOF is reached,
 -1 is returned.

  Subclasses must provide an implementation for this method.
 The subclass implementation should update the stream position
 before exiting.

  The bit offset within the stream must be reset to zero before
 the read occurs.

Specified by:
read in interface ImageInputStream
Specified by:
read in class ImageInputStreamImpl
Returns:
the value of the next byte in the stream, or -1
 if EOF is reached.
Throws:
IOException - if the stream has been closed.


"
7,MemoryCacheImageInputStream,2,int read(byte[] b),False,,NULL
7,MemoryCacheImageInputStream,3,"int read(byte[] b, int off, int len)",True,"Reads up to len bytes from the stream, and stores them into b starting at index off.","

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Description copied from class: ImageInputStreamImpl
Reads up to len bytes from the stream, and stores
 them into b starting at index off.
 If no bytes can be read because the end of the stream has been
 reached, -1 is returned.

  The bit offset within the stream must be reset to zero before
 the read occurs.

  Subclasses must provide an implementation for this method.
 The subclass implementation should update the stream position
 before exiting.

Specified by:
read in interface ImageInputStream
Specified by:
read in class ImageInputStreamImpl
Parameters:
b - an array of bytes to be written to.
off - the starting position within b to write to.
len - the maximum number of bytes to read.
Returns:
the number of bytes actually read, or -1
 to indicate EOF.
Throws:
IOException - if an I/O error occurs.


"
7,MemoryCacheImageInputStream,4,long skip(long n),False,,NULL
7,MemoryCacheImageInputStream,5,int available(),False,,NULL
7,MemoryCacheImageInputStream,6,void close(),True,"Closes this MemoryCacheImageInputStream, freeing the cache.","

close
public void close()
           throws IOException
Closes this MemoryCacheImageInputStream, freeing
 the cache.  The source InputStream is not closed.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in interface ImageInputStream
Overrides:
close in class ImageInputStreamImpl
Throws:
IOException - if an I/O error occurs.


"
7,MemoryCacheImageInputStream,7,boolean markSupported(),False,,NULL
7,MemoryCacheImageInputStream,8,void mark(int readlimit),False,,NULL
7,MemoryCacheImageInputStream,9,void reset(),False,,NULL
7,MemoryCacheImageInputStream,10,boolean readFully(byte[] b),False,,NULL
7,MemoryCacheImageInputStream,11,"boolean readFully(byte[] b, int off, int len)",False,,NULL
7,MemoryCacheImageInputStream,12,"int read(byte[] b, int off, int len)",True,"Reads up to len bytes from the stream, and stores them into b starting at index off.","

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Description copied from class: ImageInputStreamImpl
Reads up to len bytes from the stream, and stores
 them into b starting at index off.
 If no bytes can be read because the end of the stream has been
 reached, -1 is returned.

  The bit offset within the stream must be reset to zero before
 the read occurs.

  Subclasses must provide an implementation for this method.
 The subclass implementation should update the stream position
 before exiting.

Specified by:
read in interface ImageInputStream
Specified by:
read in class ImageInputStreamImpl
Parameters:
b - an array of bytes to be written to.
off - the starting position within b to write to.
len - the maximum number of bytes to read.
Returns:
the number of bytes actually read, or -1
 to indicate EOF.
Throws:
IOException - if an I/O error occurs.


"
7,MemoryCacheImageInputStream,13,int read(),True,Reads a single byte from the stream and returns it as an int between 0 and 255.,"

read
public int read()
         throws IOException
Description copied from class: ImageInputStreamImpl
Reads a single byte from the stream and returns it as an
 int between 0 and 255.  If EOF is reached,
 -1 is returned.

  Subclasses must provide an implementation for this method.
 The subclass implementation should update the stream position
 before exiting.

  The bit offset within the stream must be reset to zero before
 the read occurs.

Specified by:
read in interface ImageInputStream
Specified by:
read in class ImageInputStreamImpl
Returns:
the value of the next byte in the stream, or -1
 if EOF is reached.
Throws:
IOException - if the stream has been closed.


"
7,MemoryCacheImageInputStream,14,int read(byte[] b),False,,NULL
7,MemoryCacheImageInputStream,15,"int read(byte[] b, int off, int len)",True,"Reads up to len bytes from the stream, and stores them into b starting at index off.","

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Description copied from class: ImageInputStreamImpl
Reads up to len bytes from the stream, and stores
 them into b starting at index off.
 If no bytes can be read because the end of the stream has been
 reached, -1 is returned.

  The bit offset within the stream must be reset to zero before
 the read occurs.

  Subclasses must provide an implementation for this method.
 The subclass implementation should update the stream position
 before exiting.

Specified by:
read in interface ImageInputStream
Specified by:
read in class ImageInputStreamImpl
Parameters:
b - an array of bytes to be written to.
off - the starting position within b to write to.
len - the maximum number of bytes to read.
Returns:
the number of bytes actually read, or -1
 to indicate EOF.
Throws:
IOException - if an I/O error occurs.


"
7,MemoryCacheImageInputStream,16,long skip(long n),False,,NULL
7,MemoryCacheImageInputStream,17,int available(),False,,NULL
7,MemoryCacheImageInputStream,18,void close(),True,"Closes this MemoryCacheImageInputStream, freeing the cache.","

close
public void close()
           throws IOException
Closes this MemoryCacheImageInputStream, freeing
 the cache.  The source InputStream is not closed.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in interface ImageInputStream
Overrides:
close in class ImageInputStreamImpl
Throws:
IOException - if an I/O error occurs.


"
7,MemoryCacheImageInputStream,19,boolean markSupported(),False,,NULL
7,MemoryCacheImageInputStream,20,void mark(int readlimit),False,,NULL
7,MemoryCacheImageInputStream,21,void reset(),False,,NULL
8,MemoryCacheImageOutputStream,1,void write(int b) throws IOException,True,Writes a single byte to the stream at the current position.,"

write
public void write(int b)
           throws IOException
Description copied from interface: ImageOutputStream
Writes a single byte to the stream at the current position.
 The 24 high-order bits of b are ignored.

  If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.  Implementers can use the
 flushBits
 method of ImageOutputStreamImpl
 to guarantee this.

Specified by:
write in interface DataOutput
Specified by:
write in interface ImageOutputStream
Specified by:
write in class ImageOutputStreamImpl
Parameters:
b - an int whose lower 8 bits are to be
 written.
Throws:
IOException - if an I/O error occurs.


"
8,MemoryCacheImageOutputStream,2,void write(byte[] b) throws IOException,False,,NULL
8,MemoryCacheImageOutputStream,3,"void write(byte[] b, int off, int len) throws IOException",True,Writes a sequence of bytes to the stream at the current position.,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Description copied from interface: ImageOutputStream
Writes a sequence of bytes to the stream at the current
 position.  If len is 0, nothing is written.
 The byte b[off] is written first, then the byte
 b[off + 1], and so on.

  If the bit offset within the stream is non-zero, the
 remainder of the current byte is padded with 0s
 and written out first.  The bit offset will be 0 after the
 write.  Implementers can use the
 flushBits
 method of ImageOutputStreamImpl
 to guarantee this.

Specified by:
write in interface DataOutput
Specified by:
write in interface ImageOutputStream
Specified by:
write in class ImageOutputStreamImpl
Parameters:
b - an array of bytes to be written.
off - the start offset in the data.
len - the number of bytes to write.
Throws:
IOException - if an I/O error occurs.


"
8,MemoryCacheImageOutputStream,4,void flush() throws IOException,False,,NULL
8,MemoryCacheImageOutputStream,5,void close() throws IOException,True,Closes this MemoryCacheImageOutputStream.,"

close
public void close()
           throws IOException
Closes this MemoryCacheImageOutputStream.  All
 pending data is flushed to the output, and the cache
 is released.  The destination OutputStream
 is not closed.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in interface ImageInputStream
Overrides:
close in class ImageInputStreamImpl
Throws:
IOException - if an I/O error occurs.


"
