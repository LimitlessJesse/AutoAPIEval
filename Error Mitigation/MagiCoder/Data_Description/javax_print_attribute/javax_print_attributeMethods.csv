ClassName,Method,Return Type,Description,Full Description
AttributeSetUtilities,synchronizedView(AttributeSet attributeSet),static AttributeSet,Creates a synchronized view of the given attribute set.,"

synchronizedView
public static AttributeSet synchronizedView(AttributeSet attributeSet)
Creates a synchronized view of the given attribute set.

Parameters:
attributeSet - Underlying attribute set.
Returns:
Synchronized view of attributeSet.
Throws:
NullPointerException - Thrown if attributeSet is null.


"
AttributeSetUtilities,synchronizedView(DocAttributeSet attributeSet),static DocAttributeSet,Creates a synchronized view of the given doc attribute set.,"

synchronizedView
public static DocAttributeSet synchronizedView(DocAttributeSet attributeSet)
Creates a synchronized view of the given doc attribute set.

Parameters:
attributeSet - Underlying doc attribute set.
Returns:
Synchronized view of attributeSet.
Throws:
NullPointerException - Thrown if attributeSet is null.


"
AttributeSetUtilities,synchronizedView(PrintJobAttributeSet attributeSet),static PrintJobAttributeSet,Creates a synchronized view of the given print job attribute set.,"

synchronizedView
public static PrintJobAttributeSet synchronizedView(PrintJobAttributeSet attributeSet)
Creates a synchronized view of the given print job attribute set.

Parameters:
attributeSet - Underlying print job attribute set.
Returns:
Synchronized view of attributeSet.
Throws:
NullPointerException - Thrown if attributeSet is null.


"
AttributeSetUtilities,synchronizedView(PrintRequestAttributeSet attributeSet),static PrintRequestAttributeSet,Creates a synchronized view of the given print request attribute set.,"

synchronizedView
public static PrintRequestAttributeSet synchronizedView(PrintRequestAttributeSet attributeSet)
Creates a synchronized view of the given print request attribute set.

Parameters:
attributeSet - Underlying print request attribute set.
Returns:
Synchronized view of attributeSet.
Throws:
NullPointerException - Thrown if attributeSet is null.


"
AttributeSetUtilities,synchronizedView(PrintServiceAttributeSet attributeSet),static PrintServiceAttributeSet,Creates a synchronized view of the given print service attribute set.,"

synchronizedView
public static PrintServiceAttributeSet synchronizedView(PrintServiceAttributeSet attributeSet)
Creates a synchronized view of the given print service attribute set.

Parameters:
attributeSet - Underlying print service attribute set.
Returns:
Synchronized view of attributeSet.


"
AttributeSetUtilities,unmodifiableView(AttributeSet attributeSet),static AttributeSet,Creates an unmodifiable view of the given attribute set.,"

unmodifiableView
public static AttributeSet unmodifiableView(AttributeSet attributeSet)
Creates an unmodifiable view of the given attribute set.

Parameters:
attributeSet - Underlying attribute set.
Returns:
Unmodifiable view of attributeSet.
Throws:
NullPointerException - Thrown if attributeSet is null. Null is never a


"
AttributeSetUtilities,unmodifiableView(DocAttributeSet attributeSet),static DocAttributeSet,Creates an unmodifiable view of the given doc attribute set.,"

unmodifiableView
public static DocAttributeSet unmodifiableView(DocAttributeSet attributeSet)
Creates an unmodifiable view of the given doc attribute set.

Parameters:
attributeSet - Underlying doc attribute set.
Returns:
Unmodifiable view of attributeSet.
Throws:
NullPointerException - Thrown if attributeSet is null.


"
AttributeSetUtilities,unmodifiableView(PrintJobAttributeSet attributeSet),static PrintJobAttributeSet,Creates an unmodifiable view of the given print job attribute set.,"

unmodifiableView
public static PrintJobAttributeSet unmodifiableView(PrintJobAttributeSet attributeSet)
Creates an unmodifiable view of the given print job attribute set.

Parameters:
attributeSet - Underlying print job attribute set.
Returns:
Unmodifiable view of attributeSet.
Throws:
NullPointerException - Thrown if attributeSet is null.


"
AttributeSetUtilities,unmodifiableView(PrintRequestAttributeSet attributeSet),static PrintRequestAttributeSet,Creates an unmodifiable view of the given print request attribute set.,"

unmodifiableView
public static PrintRequestAttributeSet unmodifiableView(PrintRequestAttributeSet attributeSet)
Creates an unmodifiable view of the given print request attribute set.

Parameters:
attributeSet - Underlying print request attribute set.
Returns:
Unmodifiable view of attributeSet.
Throws:
NullPointerException - Thrown if attributeSet is null.


"
AttributeSetUtilities,unmodifiableView(PrintServiceAttributeSet attributeSet),static PrintServiceAttributeSet,Creates an unmodifiable view of the given print service attribute set.,"

unmodifiableView
public static PrintServiceAttributeSet unmodifiableView(PrintServiceAttributeSet attributeSet)
Creates an unmodifiable view of the given print service attribute set.

Parameters:
attributeSet - Underlying print service attribute set.
Returns:
Unmodifiable view of attributeSet.
Throws:
NullPointerException - Thrown if attributeSet is null.


"
AttributeSetUtilities,"verifyAttributeCategory(Object object, Class<?> interfaceName)",static Class<?>,"Verify that the given object is a Class that implements the given interface, which is assumed to be interface Attribute or a subinterface thereof.","

verifyAttributeCategory
public static Class<?> verifyAttributeCategory(Object object,
                                               Class<?> interfaceName)
Verify that the given object is a Class that
 implements the given interface, which is assumed to be interface Attribute or a subinterface thereof.

Parameters:
object - Object to test.
interfaceName - Interface the object must implement.
Returns:
If object is a Class
          that implements interfaceName,
          object is returned downcast to type Class; otherwise an exception is thrown.
Throws:
NullPointerException - (unchecked exception) Thrown if object is null.
ClassCastException - (unchecked exception) Thrown if object is not a
     Class that implements
     interfaceName.


"
AttributeSetUtilities,"verifyAttributeValue(Object object, Class<?> interfaceName)",static Attribute,"Verify that the given object is an instance of the given interface, which is assumed to be interface Attribute or a subinterface thereof.","

verifyAttributeValue
public static Attribute verifyAttributeValue(Object object,
                                             Class<?> interfaceName)
Verify that the given object is an instance of the given interface, which
 is assumed to be interface Attribute or a subinterface
 thereof.

Parameters:
object - Object to test.
interfaceName - Interface of which the object must be an instance.
Returns:
If object is an instance of
          interfaceName, object is returned
          downcast to type Attribute; otherwise an
          exception is thrown.
Throws:
NullPointerException - (unchecked exception) Thrown if object is null.
ClassCastException - (unchecked exception) Thrown if object is not an
     instance of interfaceName.


"
AttributeSetUtilities,"verifyCategoryForValue(Class<?> category, Attribute attribute)",static void,Verify that the given attribute category object is equal to the category of the given attribute value object.,"

verifyCategoryForValue
public static void verifyCategoryForValue(Class<?> category,
                                          Attribute attribute)
Verify that the given attribute category object is equal to the
 category of the given attribute value object. If so, this method
 returns doing nothing. If not, this method throws an exception.

Parameters:
category - Attribute category to test.
attribute - Attribute value to test.
Throws:
NullPointerException - (unchecked exception) Thrown if the category is
     null or if the attribute is null.
IllegalArgumentException - (unchecked exception) Thrown if the category is not
     equal to the category of the attribute.


"
DateTimeSyntax,equals(Object object),boolean,Returns whether this date-time attribute is equivalent to the passed in object.,"

equals
public boolean equals(Object object)
Returns whether this date-time attribute is equivalent to the passed in
 object. To be equivalent, all of the following conditions must be true:
 

object is not null.
 
object is an instance of class DateTimeSyntax.
 
 This date-time attribute's java.util.Date value and
 object's java.util.Date value are
 equal. 

Overrides:
equals in class Object
Parameters:
object - Object to compare to.
Returns:
True if object is equivalent to this date-time
          attribute, false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
DateTimeSyntax,getValue(),Date,Returns this date-time attribute's java.util.Date value.,"

getValue
public Date getValue()
Returns this date-time attribute's java.util.Date
 value.

Returns:
the Date.


"
DateTimeSyntax,hashCode(),int,Returns a hash code value for this date-time attribute.,"

hashCode
public int hashCode()
Returns a hash code value for this date-time attribute. The hashcode is
 that of this attribute's java.util.Date value.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
DateTimeSyntax,toString(),String,Returns a string value corresponding to this date-time attribute.,"

toString
public String toString()
Returns a string value corresponding to this date-time attribute.
 The string value is just this attribute's
 java.util.Date  value
 converted to a string.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
EnumSyntax,clone(),Object,"Returns a clone of this enumeration value, which to preserve the semantics of enumeration values is the same object as this enumeration value.","

clone
public Object clone()
Returns a clone of this enumeration value, which to preserve the
 semantics of enumeration values is the same object as this enumeration
 value.

Overrides:
clone in class Object
Returns:
a clone of this instance.
See Also:
Cloneable


"
EnumSyntax,getEnumValueTable(),protected EnumSyntax[],Returns the enumeration value table for this enumeration value's enumeration class.,"

getEnumValueTable
protected EnumSyntax[] getEnumValueTable()
Returns the enumeration value table for this enumeration value's
 enumeration class. The enumeration class's integer values are assumed to
 lie in the range L..L+N-1, where L is the
 value returned by getOffset() and
 N is the length of the enumeration value table. The element in the
 enumeration value table at index i-L is the enumeration
 value object whose integer value is i; the readResolve() method needs this to preserve singleton
 semantics during deserialization of an enumeration instance. If an
 integer within the above range is not used by any enumeration value,
 leave the corresponding table element null.
 
 The default implementation returns null. If the enumeration class (a
 subclass of class EnumSyntax) does not override this method to return
 a non-null enumeration value table, and the subclass does not override
 the readResolve() method, the base
 class readResolve() method will throw
 an exception whenever an enumeration instance is deserialized from an
 object input stream.

Returns:
the value table


"
EnumSyntax,getOffset(),protected int,Returns the lowest integer value used by this enumeration value's enumeration class.,"

getOffset
protected int getOffset()
Returns the lowest integer value used by this enumeration value's
 enumeration class.
 
 The default implementation returns 0. If the enumeration class (a
 subclass of class EnumSyntax) uses integer values starting at other than
 0, override this method in the subclass.

Returns:
the offset of the lowest enumeration value.


"
EnumSyntax,getStringTable(),protected String[],Returns the string table for this enumeration value's enumeration class.,"

getStringTable
protected String[] getStringTable()
Returns the string table for this enumeration value's enumeration class.
 The enumeration class's integer values are assumed to lie in the range
 L..L+N-1, where L is the value returned by
 getOffset() and N is the length
 of the string table. The element in the string table at index
 i-L is the value returned by toString() for the enumeration value whose integer value
 is i. If an integer within the above range is not used by any
 enumeration value, leave the corresponding table element null.
 
 The default implementation returns null. If the enumeration class (a
 subclass of class EnumSyntax) does not override this method to return a
 non-null string table, and the subclass does not override the toString() method, the base class toString() method will return just a string
 representation of this enumeration value's integer value.

Returns:
the string table


"
EnumSyntax,getValue(),int,Returns this enumeration value's integer value.,"

getValue
public int getValue()
Returns this enumeration value's integer value.

Returns:
the value


"
EnumSyntax,hashCode(),int,Returns a hash code value for this enumeration value.,"

hashCode
public int hashCode()
Returns a hash code value for this enumeration value. The hash code is
 just this enumeration value's integer value.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
EnumSyntax,readResolve(),protected Object,"During object input, convert this deserialized enumeration instance to the proper enumeration value defined in the enumeration attribute class.","

readResolve
protected Object readResolve()
                      throws ObjectStreamException
During object input, convert this deserialized enumeration instance to
 the proper enumeration value defined in the enumeration attribute class.

Returns:
The enumeration singleton value stored at index
          i-L in the enumeration value table returned by
          getEnumValueTable(),
          where i is this enumeration value's integer value and
          L is the value returned by getOffset().
Throws:
ObjectStreamException - if the stream can't be deserialised
InvalidObjectException - Thrown if the enumeration value table is null, this enumeration
     value's integer value does not correspond to an element in the
     enumeration value table, or the corresponding element in the
     enumeration value table is null. (Note: InvalidObjectException is a subclass
     of ObjectStreamException, which
     readResolve() is declared to throw.)


"
EnumSyntax,toString(),String,Returns a string value corresponding to this enumeration value.,"

toString
public String toString()
Returns a string value corresponding to this enumeration value.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
HashAttributeSet,add(Attribute attribute),boolean,"Adds the specified attribute to this attribute set if it is not already present, first removing any existing in the same attribute category as the specified attribute value.","

add
public boolean add(Attribute attribute)
Adds the specified attribute to this attribute set if it is not
 already present, first removing any existing in the same
 attribute category as the specified attribute value.

Specified by:
add in interface AttributeSet
Parameters:
attribute - Attribute value to be added to this attribute set.
Returns:
true if this attribute set changed as a result of the
          call, i.e., the given attribute value was not already a
          member of this attribute set.
Throws:
NullPointerException - (unchecked exception) Thrown if the attribute is null.
UnmodifiableSetException - (unchecked exception) Thrown if this attribute set does not support
     the add() operation.


"
HashAttributeSet,addAll(AttributeSet attributes),boolean,Adds all of the elements in the specified set to this attribute.,"

addAll
public boolean addAll(AttributeSet attributes)
Adds all of the elements in the specified set to this attribute.
 The outcome is the same as if the
 add(Attribute)
 operation had been applied to this attribute set successively with
 each element from the specified set.
 The behavior of the addAll(AttributeSet)
 operation is unspecified if the specified set is modified while
 the operation is in progress.
 
 If the addAll(AttributeSet) operation throws an exception,
 the effect on this attribute set's state is implementation dependent;
 elements from the specified set before the point of the exception may
 or may not have been added to this attribute set.

Specified by:
addAll in interface AttributeSet
Parameters:
attributes - whose elements are to be added to this attribute
            set.
Returns:
true if this attribute set changed as a result of the
          call.
Throws:
UnmodifiableSetException - (Unchecked exception) Thrown if this attribute set does not
     support the addAll(AttributeSet) method.
NullPointerException - (Unchecked exception) Thrown if some element in the specified
     set is null, or the set is null.
See Also:
add(Attribute)


"
HashAttributeSet,clear(),void,Removes all attributes from this attribute set.,"

clear
public void clear()
Removes all attributes from this attribute set.

Specified by:
clear in interface AttributeSet
Throws:
UnmodifiableSetException - (unchecked exception) Thrown if this attribute set does not support
     the clear() operation.


"
HashAttributeSet,containsKey(Class<?> category),boolean,Returns true if this attribute set contains an attribute for the specified category.,"

containsKey
public boolean containsKey(Class<?> category)
Returns true if this attribute set contains an
 attribute for the specified category.

Specified by:
containsKey in interface AttributeSet
Parameters:
category - whose presence in this attribute set is
            to be tested.
Returns:
true if this attribute set contains an attribute
         value for the specified category.


"
HashAttributeSet,containsValue(Attribute attribute),boolean,Returns true if this attribute set contains the given attribute.,"

containsValue
public boolean containsValue(Attribute attribute)
Returns true if this attribute set contains the given
 attribute.

Specified by:
containsValue in interface AttributeSet
Parameters:
attribute - value whose presence in this attribute set is
            to be tested.
Returns:
true if this attribute set contains the given
      attribute    value.


"
HashAttributeSet,equals(Object object),boolean,Compares the specified object with this attribute set for equality.,"

equals
public boolean equals(Object object)
Compares the specified object with this attribute set for equality.
 Returns true if the given object is also an attribute set and
 the two attribute sets contain the same attribute category-attribute
 value mappings. This ensures that the
 equals() method works properly across different
 implementations of the AttributeSet interface.

Specified by:
equals in interface AttributeSet
Overrides:
equals in class Object
Parameters:
object - to be compared for equality with this attribute set.
Returns:
true if the specified object is equal to this
       attribute   set.
See Also:
Object.hashCode(), 
HashMap


"
HashAttributeSet,get(Class<?> category),Attribute,Returns the attribute value which this attribute set contains in the given attribute category.,"

get
public Attribute get(Class<?> category)
Returns the attribute value which this attribute set contains in the
 given attribute category. Returns null if this attribute set
 does not contain any attribute value in the given attribute category.

Specified by:
get in interface AttributeSet
Parameters:
category - Attribute category whose associated attribute value
                   is to be returned. It must be a
                   Class
                   that implements interface Attribute.
Returns:
The attribute value in the given attribute category contained
          in this attribute set, or null if this attribute set
          does not contain any attribute value in the given attribute
          category.
Throws:
NullPointerException - (unchecked exception) Thrown if the category is null.
ClassCastException - (unchecked exception) Thrown if the category is not a
     Class that implements interface Attribute.


"
HashAttributeSet,hashCode(),int,Returns the hash code value for this attribute set.,"

hashCode
public int hashCode()
Returns the hash code value for this attribute set.
 The hash code of an attribute set is defined to be the sum
 of the hash codes of each entry in the AttributeSet.
 This ensures that t1.equals(t2) implies that
 t1.hashCode()==t2.hashCode() for any two attribute sets
 t1 and t2, as required by the general contract of
 Object.hashCode().

Specified by:
hashCode in interface AttributeSet
Overrides:
hashCode in class Object
Returns:
The hash code value for this attribute set.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
HashAttributeSet,isEmpty(),boolean,Returns true if this attribute set contains no attributes.,"

isEmpty
public boolean isEmpty()
Returns true if this attribute set contains no attributes.

Specified by:
isEmpty in interface AttributeSet
Returns:
true if this attribute set contains no attributes.


"
HashAttributeSet,remove(Attribute attribute),boolean,Removes the specified attribute from this attribute set if present.,"

remove
public boolean remove(Attribute attribute)
Removes the specified attribute from this attribute set if
 present. If attribute is null, then
 remove() does nothing and returns false.

Specified by:
remove in interface AttributeSet
Parameters:
attribute - Attribute value to be removed from this attribute set.
Returns:
true if this attribute set changed as a result of the
         call, i.e., the given attribute value had been a member of
         this attribute set.
Throws:
UnmodifiableSetException - (unchecked exception) Thrown if this attribute set does not
     support the remove() operation.


"
HashAttributeSet,remove(Class<?> category),boolean,Removes any attribute for this category from this attribute set if present.,"

remove
public boolean remove(Class<?> category)
Removes any attribute for this category from this attribute set if
 present. If category is null, then
 remove() does nothing and returns false.

Specified by:
remove in interface AttributeSet
Parameters:
category - Attribute category to be removed from this
                  attribute set.
Returns:
true if this attribute set changed as a result of the
         call, i.e., the given attribute category had been a member of
         this attribute set.
Throws:
UnmodifiableSetException - (unchecked exception) Thrown if this attribute set does not
     support the remove() operation.


"
HashAttributeSet,size(),int,Returns the number of attributes in this attribute set.,"

size
public int size()
Returns the number of attributes in this attribute set. If this
 attribute set contains more than Integer.MAX_VALUE elements,
 returns  Integer.MAX_VALUE.

Specified by:
size in interface AttributeSet
Returns:
The number of attributes in this attribute set.


"
HashAttributeSet,toArray(),Attribute[],Returns an array of the attributes contained in this set.,"

toArray
public Attribute[] toArray()
Description copied from interface: AttributeSet
Returns an array of the attributes contained in this set.

Specified by:
toArray in interface AttributeSet
Returns:
the Attributes contained in this set as an array, zero length
 if the AttributeSet is empty.


"
IntegerSyntax,equals(Object object),boolean,Returns whether this integer attribute is equivalent to the passed in object.,"

equals
public boolean equals(Object object)
Returns whether this integer attribute is equivalent to the passed in
 object. To be equivalent, all of the following conditions must be true:
 

object is not null.
 
object is an instance of class IntegerSyntax.
 
 This integer attribute's value and object's value are
 equal.
 

Overrides:
equals in class Object
Parameters:
object - Object to compare to.
Returns:
True if object is equivalent to this integer
          attribute, false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
IntegerSyntax,getValue(),int,Returns this integer attribute's integer value.,"

getValue
public int getValue()
Returns this integer attribute's integer value.

Returns:
the integer value


"
IntegerSyntax,hashCode(),int,Returns a hash code value for this integer attribute.,"

hashCode
public int hashCode()
Returns a hash code value for this integer attribute. The hash code is
 just this integer attribute's integer value.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
IntegerSyntax,toString(),String,Returns a string value corresponding to this integer attribute.,"

toString
public String toString()
Returns a string value corresponding to this integer attribute. The
 string value is just this integer attribute's integer value converted to
 a string.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
ResolutionSyntax,equals(Object object),boolean,Returns whether this resolution attribute is equivalent to the passed in object.,"

equals
public boolean equals(Object object)
Returns whether this resolution attribute is equivalent to the passed in
 object. To be equivalent, all of the following conditions must be true:
 

object is not null.
 
object is an instance of class ResolutionSyntax.
 
 This attribute's cross feed direction resolution is equal to
 object's cross feed direction resolution.
 
 This attribute's feed direction resolution is equal to
 object's feed direction resolution.
 

Overrides:
equals in class Object
Parameters:
object - Object to compare to.
Returns:
True if object is equivalent to this resolution
          attribute, false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
ResolutionSyntax,getCrossFeedResolution(int units),int,Returns this resolution attribute's cross feed direction resolution in the given units.,"

getCrossFeedResolution
public int getCrossFeedResolution(int units)
Returns this resolution attribute's cross feed direction resolution in
 the given units. The value is rounded to the nearest integer.

Parameters:
units - Unit conversion factor, e.g. DPI or
 DPCM.
Returns:
Cross feed direction resolution.
Throws:
IllegalArgumentException - (unchecked exception) Thrown if units < 1.


"
ResolutionSyntax,getCrossFeedResolutionDphi(),protected int,Returns this resolution attribute's cross feed direction resolution in units of dphi.,"

getCrossFeedResolutionDphi
protected int getCrossFeedResolutionDphi()
Returns this resolution attribute's cross feed direction resolution in
 units of dphi. (For use in a subclass.)

Returns:
Cross feed direction resolution.


"
ResolutionSyntax,getFeedResolution(int units),int,Returns this resolution attribute's feed direction resolution in the given units.,"

getFeedResolution
public int getFeedResolution(int units)
Returns this resolution attribute's feed direction resolution in the
 given units. The value is rounded to the nearest integer.

Parameters:
units - Unit conversion factor, e.g. DPI or DPCM.
Returns:
Feed direction resolution.
Throws:
IllegalArgumentException - (unchecked exception) Thrown if units < 1.


"
ResolutionSyntax,getFeedResolutionDphi(),protected int,Returns this resolution attribute's feed direction resolution in units of dphi.,"

getFeedResolutionDphi
protected int getFeedResolutionDphi()
Returns this resolution attribute's feed direction resolution in units
 of dphi. (For use in a subclass.)

Returns:
Feed direction resolution.


"
ResolutionSyntax,getResolution(int units),int[],Get this resolution attribute's resolution values in the given units.,"

getResolution
public int[] getResolution(int units)
Get this resolution attribute's resolution values in the given units.
 The values are rounded to the nearest integer.

Parameters:
units - Unit conversion factor, e.g. DPI or
 DPCM.
Returns:
A two-element array with the cross feed direction resolution
          at index 0 and the feed direction resolution at index 1.
Throws:
IllegalArgumentException - (unchecked exception) Thrown if units < 1.


"
ResolutionSyntax,hashCode(),int,Returns a hash code value for this resolution attribute.,"

hashCode
public int hashCode()
Returns a hash code value for this resolution attribute.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
ResolutionSyntax,lessThanOrEquals(ResolutionSyntax other),boolean,Determine whether this resolution attribute's value is less than or equal to the given resolution attribute's value.,"

lessThanOrEquals
public boolean lessThanOrEquals(ResolutionSyntax other)
Determine whether this resolution attribute's value is less than or
 equal to the given resolution attribute's value. This is true if all
 of the following conditions are true:
 

 This attribute's cross feed direction resolution is less than or equal to
 the other attribute's cross feed direction resolution.
 
 This attribute's feed direction resolution is less than or equal to the
 other attribute's feed direction resolution.
 

Parameters:
other - Resolution attribute to compare with.
Returns:
True if this resolution attribute is less than or equal to the
          other resolution attribute, false otherwise.
Throws:
NullPointerException - (unchecked exception) Thrown if other is null.


"
ResolutionSyntax,toString(),String,Returns a string version of this resolution attribute.,"

toString
public String toString()
Returns a string version of this resolution attribute. The string takes
 the form ""CxF dphi"", where C is the
 cross feed direction resolution and F is the feed direction
 resolution. The values are reported in the internal units of dphi.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
ResolutionSyntax,"toString(int units, String unitsName)",String,Returns a string version of this resolution attribute in the given units.,"

toString
public String toString(int units,
                       String unitsName)
Returns a string version of this resolution attribute in the given units.
 The string takes the form ""CxF U"",
 where C is the cross feed direction resolution, F is the
 feed direction resolution, and U is the units name. The values are
 rounded to the nearest integer.

Parameters:
units - Unit conversion factor, e.g. CODE>DPI or DPCM.
unitsName - Units name string, e.g. ""dpi"" or ""dpcm"". If
     null, no units name is appended to the result.
Returns:
String version of this resolution attribute.
Throws:
IllegalArgumentException - (unchecked exception) Thrown if units < 1.


"
SetOfIntegerSyntax,contains(int x),boolean,Determine if this set-of-integer attribute contains the given value.,"

contains
public boolean contains(int x)
Determine if this set-of-integer attribute contains the given value.

Parameters:
x - Integer value.
Returns:
True if this set-of-integer attribute contains the value
          x, false otherwise.


"
SetOfIntegerSyntax,contains(IntegerSyntax attribute),boolean,Determine if this set-of-integer attribute contains the given integer attribute's value.,"

contains
public boolean contains(IntegerSyntax attribute)
Determine if this set-of-integer attribute contains the given integer
 attribute's value.

Parameters:
attribute - Integer attribute.
Returns:
True if this set-of-integer attribute contains
          theAttribute's value, false otherwise.


"
SetOfIntegerSyntax,equals(Object object),boolean,Returns whether this set-of-integer attribute is equivalent to the passed in object.,"

equals
public boolean equals(Object object)
Returns whether this set-of-integer attribute is equivalent to the passed
 in object. To be equivalent, all of the following conditions must be
 true:
 

object is not null.
 
object is an instance of class SetOfIntegerSyntax.
 
 This set-of-integer attribute's members and object's
 members are the same.
 

Overrides:
equals in class Object
Parameters:
object - Object to compare to.
Returns:
True if object is equivalent to this
          set-of-integer attribute, false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
SetOfIntegerSyntax,getMembers(),int[][],Obtain this set-of-integer attribute's members in canonical array form.,"

getMembers
public int[][] getMembers()
Obtain this set-of-integer attribute's members in canonical array form.
 The returned array is ""safe;"" the client may alter it without affecting
 this set-of-integer attribute.

Returns:
This set-of-integer attribute's members in canonical array form.


"
SetOfIntegerSyntax,hashCode(),int,Returns a hash code value for this set-of-integer attribute.,"

hashCode
public int hashCode()
Returns a hash code value for this set-of-integer attribute. The hash
 code is the sum of the lower and upper bounds of the ranges in the
 canonical array form, or 0 for an empty set.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
SetOfIntegerSyntax,next(int x),int,Determine the smallest integer in this set-of-integer attribute that is greater than the given value.,"

next
public int next(int x)
Determine the smallest integer in this set-of-integer attribute that is
 greater than the given value. If there are no integers in this
 set-of-integer attribute greater than the given value, -1 is
 returned. (Since a set-of-integer attribute can only contain nonnegative
 values, -1 will never appear in the set.) You can use the
 next() method to iterate through the integer values in a
 set-of-integer attribute in ascending order, like this:
 
     SetOfIntegerSyntax attribute = . . .;
     int i = -1;
     while ((i = attribute.next (i)) != -1)
         {
         foo (i);
         }
 

Parameters:
x - Integer value.
Returns:
The smallest integer in this set-of-integer attribute that is
          greater than x, or -1 if no integer in
          this set-of-integer attribute is greater than x.


"
SetOfIntegerSyntax,toString(),String,Returns a string value corresponding to this set-of-integer attribute.,"

toString
public String toString()
Returns a string value corresponding to this set-of-integer attribute.
 The string value is a zero-length string if this set is empty. Otherwise,
 the string value is a comma-separated list of the ranges in the canonical
 array form, where each range is represented as ""i"" if
 the lower bound equals the upper bound or
 ""i-j"" otherwise.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
Size2DSyntax,equals(Object object),boolean,Returns whether this two-dimensional size attribute is equivalent to the passed in object.,"

equals
public boolean equals(Object object)
Returns whether this two-dimensional size attribute is equivalent to the
 passed in object. To be equivalent, all of the following conditions must
 be true:
 

object is not null.
 
object is an instance of class Size2DSyntax.
 
 This attribute's X dimension is equal to object's X
 dimension.
 
 This attribute's Y dimension is equal to object's Y
 dimension.
 

Overrides:
equals in class Object
Parameters:
object - Object to compare to.
Returns:
True if object is equivalent to this
          two-dimensional size attribute, false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
Size2DSyntax,getSize(int units),float[],Get this two-dimensional size attribute's dimensions in the given units as floating-point values.,"

getSize
public float[] getSize(int units)
Get this two-dimensional size attribute's dimensions in the given units
 as floating-point values.

Parameters:
units - Unit conversion factor, e.g. INCH or MM.
Returns:
A two-element array with the X dimension at index 0 and the Y
          dimension at index 1.
Throws:
IllegalArgumentException - (unchecked exception) Thrown if units < 1.


"
Size2DSyntax,getX(int units),float,Returns this two-dimensional size attribute's X dimension in the given units as a floating-point value.,"

getX
public float getX(int units)
Returns this two-dimensional size attribute's X dimension in the given
 units as a floating-point value.

Parameters:
units - Unit conversion factor, e.g. INCH or MM.
Returns:
X dimension.
Throws:
IllegalArgumentException - (unchecked exception) Thrown if units < 1.


"
Size2DSyntax,getXMicrometers(),protected int,Returns this two-dimensional size attribute's X dimension in units of micrometers (µm).,"

getXMicrometers
protected int getXMicrometers()
Returns this two-dimensional size attribute's X dimension in units of
 micrometers (µm). (For use in a subclass.)

Returns:
X dimension (µm).


"
Size2DSyntax,getY(int units),float,Returns this two-dimensional size attribute's Y dimension in the given units as a floating-point value.,"

getY
public float getY(int units)
Returns this two-dimensional size attribute's Y dimension in the given
 units as a floating-point value.

Parameters:
units - Unit conversion factor, e.g. INCH or MM.
Returns:
Y dimension.
Throws:
IllegalArgumentException - (unchecked exception) Thrown if units < 1.


"
Size2DSyntax,getYMicrometers(),protected int,Returns this two-dimensional size attribute's Y dimension in units of micrometers (µm).,"

getYMicrometers
protected int getYMicrometers()
Returns this two-dimensional size attribute's Y dimension in units of
 micrometers (µm). (For use in a subclass.)

Returns:
Y dimension (µm).


"
Size2DSyntax,hashCode(),int,Returns a hash code value for this two-dimensional size attribute.,"

hashCode
public int hashCode()
Returns a hash code value for this two-dimensional size attribute.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Size2DSyntax,toString(),String,Returns a string version of this two-dimensional size attribute.,"

toString
public String toString()
Returns a string version of this two-dimensional size attribute. The
 string takes the form ""XxY um"", where
 X is the X dimension and Y is the Y dimension.
 The values are reported in the internal units of micrometers.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
Size2DSyntax,"toString(int units, String unitsName)",String,Returns a string version of this two-dimensional size attribute in the given units.,"

toString
public String toString(int units,
                       String unitsName)
Returns a string version of this two-dimensional size attribute in the
 given units. The string takes the form ""XxY
U"", where X is the X dimension, Y is the Y
 dimension, and U is the units name. The values are displayed in
 floating point.

Parameters:
units - Unit conversion factor, e.g. INCH or MM.
unitsName - Units name string, e.g. in or mm. If
     null, no units name is appended to the result.
Returns:
String version of this two-dimensional size attribute.
Throws:
IllegalArgumentException - (unchecked exception) Thrown if units < 1.


"
TextSyntax,equals(Object object),boolean,Returns whether this text attribute is equivalent to the passed in object.,"

equals
public boolean equals(Object object)
Returns whether this text attribute is equivalent to the passed in
 object. To be equivalent, all of the following conditions must be true:
 

object is not null.
 
object is an instance of class TextSyntax.
 
 This text attribute's underlying string and object's
 underlying string are equal.
 
 This text attribute's locale and object's locale are
 equal.
 

Overrides:
equals in class Object
Parameters:
object - Object to compare to.
Returns:
True if object is equivalent to this text
          attribute, false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
TextSyntax,getLocale(),Locale,Returns this text attribute's text string's natural language (locale).,"

getLocale
public Locale getLocale()
Returns this text attribute's text string's natural language (locale).

Returns:
the locale


"
TextSyntax,getValue(),String,Returns this text attribute's text string.,"

getValue
public String getValue()
Returns this text attribute's text string.

Returns:
the text string.


"
TextSyntax,hashCode(),int,Returns a hashcode for this text attribute.,"

hashCode
public int hashCode()
Returns a hashcode for this text attribute.

Overrides:
hashCode in class Object
Returns:
A hashcode value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
TextSyntax,toString(),String,Returns a String identifying this text attribute.,"

toString
public String toString()
Returns a String identifying this text attribute. The String is
 the attribute's underlying text string.

Overrides:
toString in class Object
Returns:
A String identifying this object.


"
URISyntax,equals(Object object),boolean,Returns whether this URI attribute is equivalent to the passed in object.,"

equals
public boolean equals(Object object)
Returns whether this URI attribute is equivalent to the passed in
 object.
 To be equivalent, all of the following conditions must be true:
 

object is not null.
 
object is an instance of class URISyntax.
 
 This URI attribute's underlying URI and object's
 underlying URI are equal.
 

Overrides:
equals in class Object
Parameters:
object - Object to compare to.
Returns:
True if object is equivalent to this URI
          attribute, false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
URISyntax,getURI(),URI,Returns this URI attribute's URI value.,"

getURI
public URI getURI()
Returns this URI attribute's URI value.

Returns:
the URI.


"
URISyntax,hashCode(),int,Returns a hashcode for this URI attribute.,"

hashCode
public int hashCode()
Returns a hashcode for this URI attribute.

Overrides:
hashCode in class Object
Returns:
A hashcode value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
URISyntax,toString(),String,Returns a String identifying this URI attribute.,"

toString
public String toString()
Returns a String identifying this URI attribute. The String is the
 string representation of the attribute's underlying URI.

Overrides:
toString in class Object
Returns:
A String identifying this object.


"
