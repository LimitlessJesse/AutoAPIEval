Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,Attribute,1,"Attribute(String name, Object value)",False,,NULL
0,Attribute,2,String getName(),True,Returns a String containing the name of the attribute.,"

getName
public String getName()
Returns a String containing the  name of the attribute.

Returns:
the name of the attribute.


"
0,Attribute,3,Object getValue(),True,Returns an Object that is the value of this attribute.,"

getValue
public Object getValue()
Returns an Object that is the value of this attribute.

Returns:
the value of the attribute.


"
0,Attribute,4,void setValue(Object value),False,,NULL
0,Attribute,5,boolean equals(Object obj),True,Compares the current Attribute Object with another Attribute Object.,"

equals
public boolean equals(Object object)
Compares the current Attribute Object with another Attribute Object.

Overrides:
equals in class Object
Parameters:
object - The Attribute that the current Attribute is to be compared with.
Returns:
True if the two Attribute objects are equal, otherwise false.
See Also:
Object.hashCode(), 
HashMap


"
0,Attribute,6,int hashCode(),True,Returns a hash code value for this attribute.,"

hashCode
public int hashCode()
Returns a hash code value for this attribute.

Overrides:
hashCode in class Object
Returns:
a hash code value for this attribute.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
0,Attribute,7,String toString(),True,Returns a String object representing this Attribute's value.,"

toString
public String toString()
Returns a String object representing this Attribute's value. The format of this
 string is not specified, but users can expect that two Attributes return the
 same string if and only if they are equal.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
1,AttributeChangeNotification,1,getAttributeName(),False,,NULL
1,AttributeChangeNotification,2,getAttributeType(),False,,NULL
1,AttributeChangeNotification,3,getNewValue(),False,,NULL
1,AttributeChangeNotification,4,getOldValue(),False,,NULL
1,AttributeChangeNotification,5,getTimeStamp(),False,,NULL
2,AttributeChangeNotificationFilter,1,boolean isNotificationEnabled(Notification n),True,Invoked before sending the specified notification to the listener.,"

isNotificationEnabled
public boolean isNotificationEnabled(Notification notification)
Invoked before sending the specified notification to the listener.
 This filter compares the attribute name of the specified attribute change notification
 with each enabled attribute name.
 If the attribute name equals one of the enabled attribute names,
 the notification must be sent to the listener and this method returns true.

Specified by:
isNotificationEnabled in interface NotificationFilter
Parameters:
notification - The attribute change notification to be sent.
Returns:
true if the notification has to be sent to the listener, false otherwise.


"
2,AttributeChangeNotificationFilter,2,boolean isTypeFilterEnabled(String type),False,,NULL
2,AttributeChangeNotificationFilter,3,boolean isAttributeFilterEnabled(String attribute),False,,NULL
2,AttributeChangeNotificationFilter,4,boolean isOldValueFilterEnabled(Object oldValue),False,,NULL
2,AttributeChangeNotificationFilter,5,boolean isNewValueFilterEnabled(Object newValue),False,,NULL
3,AttributeList,1,boolean add(Attribute attribute),False,,NULL
3,AttributeList,2,"void add(int index, Attribute element)",True,Inserts the attribute specified as an element at the position specified.,"

add
public void add(int index,
                Attribute object)
Inserts the attribute specified as an element at the position specified.
 Elements with an index greater than or equal to the current position are
 shifted up. If the index is out of range (index < 0 || index >
 size()) a RuntimeOperationsException should be raised, wrapping the
 java.lang.IndexOutOfBoundsException thrown.

Parameters:
object - The Attribute object to be inserted.
index - The position in the list where the new Attribute
 object is to be inserted.


"
3,AttributeList,3,boolean addAll(AttributeList c),True,"Appends all the elements in the AttributeList specified to the end of the list, in the order in which they are returned by the Iterator of the AttributeList specified.","

addAll
public boolean addAll(AttributeList list)
Appends all the elements in the AttributeList specified to
 the end of the list, in the order in which they are returned by the
 Iterator of the AttributeList specified.

Parameters:
list - Elements to be inserted into the list.
Returns:
true if this list changed as a result of the call.
See Also:
ArrayList.addAll(java.util.Collection)


"
3,AttributeList,4,boolean contains(Object o),False,,NULL
3,AttributeList,5,Attribute get(int index),False,,NULL
4,AttributeValueExp,1,boolean contains(Object o),False,,NULL
4,AttributeValueExp,2,boolean remove(Object o),False,,NULL
4,AttributeValueExp,3,boolean addAll(Collection<? extends E> c),False,,NULL
4,AttributeValueExp,4,boolean removeAll(Collection<?> c),False,,NULL
4,AttributeValueExp,5,boolean retainAll(Collection<?> c),False,,NULL
5,DefaultLoaderRepository,1,boolean add(E e),False,,NULL
5,DefaultLoaderRepository,2,boolean addAll(Collection<? extends E> c),False,,NULL
5,DefaultLoaderRepository,3,void clear(),False,,NULL
5,DefaultLoaderRepository,4,boolean contains(Object o),False,,NULL
5,DefaultLoaderRepository,5,boolean containsAll(Collection<?> c),False,,NULL
5,DefaultLoaderRepository,6,E get(int index),False,,NULL
5,DefaultLoaderRepository,7,int indexOf(Object o),False,,NULL
5,DefaultLoaderRepository,8,boolean isEmpty(),False,,NULL
5,DefaultLoaderRepository,9,Iterator<E> iterator(),False,,NULL
5,DefaultLoaderRepository,10,E remove(int index),False,,NULL
5,DefaultLoaderRepository,11,boolean remove(Object o),False,,NULL
5,DefaultLoaderRepository,12,boolean removeAll(Collection<?> c),False,,NULL
5,DefaultLoaderRepository,13,int size(),False,,NULL
5,DefaultLoaderRepository,14,Object[] toArray(),False,,NULL
5,DefaultLoaderRepository,15,<T> T[] toArray(T[] a),False,,NULL
5,DefaultLoaderRepository,16,ListIterator<E> listIterator(),False,,NULL
5,DefaultLoaderRepository,17,ListIterator<E> listIterator(int index),False,,NULL
5,DefaultLoaderRepository,18,boolean retainAll(Collection<?> c),False,,NULL
5,DefaultLoaderRepository,19,"E set(int index, E element)",False,,NULL
5,DefaultLoaderRepository,20,"boolean addAll(int index, Collection<? extends E> c)",False,,NULL
6,ImmutableDescriptor,1,ImmutableDescriptor getDescriptor(),False,,NULL
6,ImmutableDescriptor,2,Object getValue(String key),False,,NULL
6,ImmutableDescriptor,3,boolean containsKey(String key),False,,NULL
6,ImmutableDescriptor,4,Set<String> keySet(),False,,NULL
6,ImmutableDescriptor,5,int size(),False,,NULL
7,JMX,1,"MBeanServerConnection connect(MBeanServerConnection mbs, String[] names)",False,,NULL
7,JMX,2,ObjectInstance getMBeanCount(ObjectName name),False,,NULL
7,JMX,3,ObjectInstance getMBeanInfo(ObjectName name),False,,NULL
7,JMX,4,"ObjectInstance getAttribute(ObjectName name, String attribute)",False,,NULL
7,JMX,5,"void setAttribute(ObjectName name, Attribute attribute)",False,,NULL
7,JMX,6,"ObjectInstance invoke(ObjectName name, String actionName, Object[] params, String[] signature)",False,,NULL
7,JMX,7,"ObjectInstance isInstanceOf(ObjectName name, String className)",False,,NULL
7,JMX,8,"ObjectInstance queryNames(ObjectName name, String query)",False,,NULL
7,JMX,9,"ObjectInstance queryMBeans(ObjectName name, QueryExp query)",False,,NULL
7,JMX,10,"ObjectInstance registerMBean(ObjectName name, MBean mbean)",False,,NULL
7,JMX,11,ObjectInstance unregisterMBean(ObjectName name),False,,NULL
7,JMX,12,ObjectInstance getDefaultDomain(),False,,NULL
7,JMX,13,ObjectInstance getMBeanCount(ObjectName name),False,,NULL
7,JMX,14,ObjectInstance getMBeanInfo(ObjectName name),False,,NULL
7,JMX,15,"ObjectInstance getAttribute(ObjectName name, String attribute)",False,,NULL
7,JMX,16,"void setAttribute(ObjectName name, Attribute attribute)",False,,NULL
7,JMX,17,"ObjectInstance invoke(ObjectName name, String actionName, Object[] params, String[] signature)",False,,NULL
7,JMX,18,"ObjectInstance isInstanceOf(ObjectName name, String className)",False,,NULL
7,JMX,19,"ObjectInstance queryNames(ObjectName name, String query)",False,,NULL
7,JMX,20,"ObjectInstance queryMBeans(ObjectName name, QueryExp query)",False,,NULL
7,JMX,21,"ObjectInstance registerMBean(ObjectName name, MBean mbean)",False,,NULL
7,JMX,22,ObjectInstance unregisterMBean(ObjectName name),False,,NULL
7,JMX,23,ObjectInstance getDefaultDomain(),False,,NULL
7,JMX,24,ObjectInstance getMBeanCount(ObjectName name),False,,NULL
7,JMX,25,ObjectInstance getMBeanInfo(ObjectName name),False,,NULL
8,MBeanAttributeInfo,1,getType(),False,,NULL
8,MBeanAttributeInfo,2,getDescription(),False,,NULL
8,MBeanAttributeInfo,3,getWritable(),False,,NULL
8,MBeanAttributeInfo,4,getReadable(),False,,NULL
8,MBeanAttributeInfo,5,getIs(),False,,NULL
9,MBeanConstructorInfo,1,getParameterTypes(),False,,NULL
9,MBeanConstructorInfo,2,getSignature(),False,,NULL
9,MBeanConstructorInfo,3,getClassName(),False,,NULL
9,MBeanConstructorInfo,4,getDescription(),False,,NULL
9,MBeanConstructorInfo,5,getMBeanParameterInfo(),False,,NULL
10,MBeanFeatureInfo,1,boolean isQueryable(),False,,NULL
10,MBeanFeatureInfo,2,boolean isWritable(),False,,NULL
10,MBeanFeatureInfo,3,boolean isWritable(String attributeName),False,,NULL
10,MBeanFeatureInfo,4,boolean isReadable(),False,,NULL
10,MBeanFeatureInfo,5,boolean isReadable(String attributeName),False,,NULL
10,MBeanFeatureInfo,6,boolean isNotifiable(),False,,NULL
10,MBeanFeatureInfo,7,boolean isNotifiable(String attributeName),False,,NULL
10,MBeanFeatureInfo,8,boolean isIs(),False,,NULL
10,MBeanFeatureInfo,9,boolean isIs(String attributeName),False,,NULL
10,MBeanFeatureInfo,10,boolean isIsQueryable(),False,,NULL
10,MBeanFeatureInfo,11,boolean isIsWritable(),False,,NULL
10,MBeanFeatureInfo,12,boolean isIsWritable(String attributeName),False,,NULL
10,MBeanFeatureInfo,13,boolean isIsReadable(),False,,NULL
10,MBeanFeatureInfo,14,boolean isIsReadable(String attributeName),False,,NULL
10,MBeanFeatureInfo,15,boolean isIsNotifiable(),False,,NULL
10,MBeanFeatureInfo,16,boolean isIsNotifiable(String attributeName),False,,NULL
10,MBeanFeatureInfo,17,boolean isIsIs(),False,,NULL
10,MBeanFeatureInfo,18,boolean isIsIs(String attributeName),False,,NULL
10,MBeanFeatureInfo,19,boolean isIsIsQueryable(),False,,NULL
10,MBeanFeatureInfo,20,boolean isIsIsWritable(),False,,NULL
10,MBeanFeatureInfo,21,boolean isIsIsWritable(String attributeName),False,,NULL
10,MBeanFeatureInfo,22,boolean isIsIsReadable(),False,,NULL
10,MBeanFeatureInfo,23,boolean isIsIsReadable(String attributeName),False,,NULL
10,MBeanFeatureInfo,24,boolean isIsIsNotifiable(),False,,NULL
10,MBeanFeatureInfo,25,boolean isIsIsNotifiable(String attributeName),False,,NULL
11,MBeanInfo,1,getClassName(),False,,NULL
11,MBeanInfo,2,getDescription(),False,,NULL
11,MBeanInfo,3,getMBeanParameters(),False,,NULL
11,MBeanInfo,4,getAttributes(),False,,NULL
11,MBeanInfo,5,getOperations(),False,,NULL
12,MBeanNotificationInfo,1,"MBeanNotificationInfo(String notificationType, String[] notificationNames, String[] notificationTypes)",False,,NULL
12,MBeanNotificationInfo,2,String getNotificationType(),False,,NULL
12,MBeanNotificationInfo,3,String[] getNotificationNames(),False,,NULL
12,MBeanNotificationInfo,4,String[] getNotificationTypes(),False,,NULL
12,MBeanNotificationInfo,5,boolean equals(Object obj),True,Compare this MBeanNotificationInfo to another.,"

equals
public boolean equals(Object o)
Compare this MBeanNotificationInfo to another.

Overrides:
equals in class MBeanFeatureInfo
Parameters:
o - the object to compare to.
Returns:
true if and only if o is an MBeanNotificationInfo
 such that its MBeanFeatureInfo.getName(), MBeanFeatureInfo.getDescription(),
 MBeanFeatureInfo.getDescriptor(),
 and getNotifTypes() values are equal (not necessarily
 identical) to those of this MBeanNotificationInfo.  Two
 notification type arrays are equal if their corresponding
 elements are equal.  They are not equal if they have the same
 elements but in a different order.
See Also:
Object.hashCode(), 
HashMap


"
12,MBeanNotificationInfo,6,int hashCode(),True,Returns a hash code value for the object.,"

hashCode
public int hashCode()
Description copied from class: Object
Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by
 HashMap.
 
 The general contract of hashCode is:
 
Whenever it is invoked on the same object more than once during
     an execution of a Java application, the hashCode method
     must consistently return the same integer, provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application.
 If two objects are equal according to the equals(Object)
     method, then calling the hashCode method on each of
     the two objects must produce the same integer result.
 It is not required that if two objects are unequal
     according to the Object.equals(java.lang.Object)
     method, then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However, the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables.
 

 As much as is reasonably practical, the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer, but this implementation
 technique is not required by the
 Java™ programming language.)

Overrides:
hashCode in class MBeanFeatureInfo
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
13,MBeanOperationInfo,1,MBeanOperationInfo getOperationInfo(),False,,NULL
13,MBeanOperationInfo,2,String getName(),False,,NULL
13,MBeanOperationInfo,3,String getDescription(),False,,NULL
13,MBeanOperationInfo,4,MBeanParameterInfo[] getSignature(),True,Returns the list of parameters for this operation.,"

getSignature
public MBeanParameterInfo[] getSignature()
Returns the list of parameters for this operation.  Each
 parameter is described by an MBeanParameterInfo
 object.
The returned array is a shallow copy of the internal array,
 which means that it is a copy of the internal array of
 references to the MBeanParameterInfo objects but
 that each referenced MBeanParameterInfo object is
 not copied.

Returns:
An array of MBeanParameterInfo objects.


"
13,MBeanOperationInfo,5,MBeanParameterInfo[] getSignature(),True,Returns the list of parameters for this operation.,"

getSignature
public MBeanParameterInfo[] getSignature()
Returns the list of parameters for this operation.  Each
 parameter is described by an MBeanParameterInfo
 object.
The returned array is a shallow copy of the internal array,
 which means that it is a copy of the internal array of
 references to the MBeanParameterInfo objects but
 that each referenced MBeanParameterInfo object is
 not copied.

Returns:
An array of MBeanParameterInfo objects.


"
13,MBeanOperationInfo,6,String getMBeanOperationInfo(),False,,NULL
13,MBeanOperationInfo,7,String getName(),False,,NULL
13,MBeanOperationInfo,8,String getDescription(),False,,NULL
13,MBeanOperationInfo,9,MBeanParameterInfo[] getSignature(),True,Returns the list of parameters for this operation.,"

getSignature
public MBeanParameterInfo[] getSignature()
Returns the list of parameters for this operation.  Each
 parameter is described by an MBeanParameterInfo
 object.
The returned array is a shallow copy of the internal array,
 which means that it is a copy of the internal array of
 references to the MBeanParameterInfo objects but
 that each referenced MBeanParameterInfo object is
 not copied.

Returns:
An array of MBeanParameterInfo objects.


"
13,MBeanOperationInfo,10,MBeanParameterInfo[] getSignature(),True,Returns the list of parameters for this operation.,"

getSignature
public MBeanParameterInfo[] getSignature()
Returns the list of parameters for this operation.  Each
 parameter is described by an MBeanParameterInfo
 object.
The returned array is a shallow copy of the internal array,
 which means that it is a copy of the internal array of
 references to the MBeanParameterInfo objects but
 that each referenced MBeanParameterInfo object is
 not copied.

Returns:
An array of MBeanParameterInfo objects.


"
14,MBeanParameterInfo,1,getName(),False,,NULL
14,MBeanParameterInfo,2,getType(),False,,NULL
14,MBeanParameterInfo,3,getDescription(),False,,NULL
14,MBeanParameterInfo,4,isMandatory(),False,,NULL
14,MBeanParameterInfo,5,isReadOnly(),False,,NULL
15,MBeanPermission,1,boolean equals(Object obj),True,Checks two MBeanPermission objects for equality.,"

equals
public boolean equals(Object obj)
Checks two MBeanPermission objects for equality. Checks
 that obj is an MBeanPermission, and has the same
 name and actions as this object.
 

Specified by:
equals in class Permission
Parameters:
obj - the object we are testing for equality with this object.
Returns:
true if obj is an MBeanPermission, and has the
 same name and actions as this MBeanPermission object.
See Also:
Object.hashCode(), 
HashMap


"
15,MBeanPermission,2,String getActions(),True,"Returns the ""canonical string representation"" of the actions.","

getActions
public String getActions()
Returns the ""canonical string representation"" of the actions. That is,
 this method always returns present actions in alphabetical order.

Specified by:
getActions in class Permission
Returns:
the canonical string representation of the actions.


"
15,MBeanPermission,3,String getName(),False,,NULL
15,MBeanPermission,4,int hashCode(),True,Returns the hash code value for this object.,"

hashCode
public int hashCode()
Returns the hash code value for this object.

Specified by:
hashCode in class Permission
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
15,MBeanPermission,5,boolean implies(Permission p),True,"Checks if this MBeanPermission object ""implies"" the specified permission.","

implies
public boolean implies(Permission p)
Checks if this MBeanPermission object ""implies"" the
 specified permission.
More specifically, this method returns true if:

 p is an instance of MBeanPermission; and
 p has a null className or p's className
 matches this object's className; and
 p has a null member or p's member matches this
 object's member; and
 p has a null object name or p's
 object name matches this object's object name; and
 p's actions are a subset of this object's actions

If this object's className is ""*"", p's
 className always matches it.  If it is ""a.*"", p's
 className matches it if it begins with ""a."".
If this object's member is ""*"", p's
 member always matches it.
If this object's objectName n1 is an object name pattern,
 p's objectName n2 matches it if
 n1.equals(n2) or if
 n1.apply(n2).
A permission that includes the queryMBeans action
 is considered to include queryNames as well.

Specified by:
implies in class Permission
Parameters:
p - the permission to check against.
Returns:
true if the specified permission is implied by this object,
 false if not.


"
16,MBeanServerBuilder,1,MBeanServerBuilder.newMBeanServer(),False,,NULL
16,MBeanServerBuilder,2,MBeanServerBuilder.newMBeanServer(String name),False,,NULL
16,MBeanServerBuilder,3,"MBeanServerBuilder.newMBeanServer(String name, MBeanServerBuilderCallback callback)",False,,NULL
16,MBeanServerBuilder,4,MBeanServerBuilder.newMBeanServer(MBeanServerBuilderCallback callback),False,,NULL
16,MBeanServerBuilder,5,"MBeanServerBuilder.newMBeanServer(String name, MBeanServerBuilderCallback callback, Object context)",False,,NULL
17,MBeanServerDelegate,1,MBeanServerDelegate(),False,,NULL
17,MBeanServerDelegate,2,"ObjectInstance registerMBean(ObjectName name, MBean mbean)",False,,NULL
17,MBeanServerDelegate,3,"ObjectInstance registerMBean(ObjectName name, MBean mbean, NotificationBroadcaster broadcaster)",False,,NULL
17,MBeanServerDelegate,4,void unregisterMBean(ObjectName name),False,,NULL
17,MBeanServerDelegate,5,ObjectInstance getMBean(ObjectName name),False,,NULL
18,MBeanServerFactory,1,MBeanServerFactory.findMBeanServer(String),False,,NULL
18,MBeanServerFactory,2,MBeanServerFactory.createMBeanServer(),False,,NULL
18,MBeanServerFactory,3,MBeanServerFactory.createMBeanServer(String),False,,NULL
18,MBeanServerFactory,4,MBeanServerFactory.getPlatformMBeanServer(),False,,NULL
18,MBeanServerFactory,5,MBeanServerFactory.getDefaultMBeanServer(),False,,NULL
19,MBeanServerInvocationHandler,1,"Object invoke(Object proxy, Method method, Object[] args)",True,Processes a method invocation on a proxy instance and returns the result.,"

invoke
public Object invoke(Object proxy,
                     Method method,
                     Object[] args)
              throws Throwable
Description copied from interface: InvocationHandler
Processes a method invocation on a proxy instance and returns
 the result.  This method will be invoked on an invocation handler
 when a method is invoked on a proxy instance that it is
 associated with.

Specified by:
invoke in interface InvocationHandler
Parameters:
proxy - the proxy instance that the method was invoked on
method - the Method instance corresponding to
 the interface method invoked on the proxy instance.  The declaring
 class of the Method object will be the interface that
 the method was declared in, which may be a superinterface of the
 proxy interface that the proxy class inherits the method through.
args - an array of objects containing the values of the
 arguments passed in the method invocation on the proxy instance,
 or null if interface method takes no arguments.
 Arguments of primitive types are wrapped in instances of the
 appropriate primitive wrapper class, such as
 java.lang.Integer or java.lang.Boolean.
Returns:
the value to return from the method invocation on the
 proxy instance.  If the declared return type of the interface
 method is a primitive type, then the value returned by
 this method must be an instance of the corresponding primitive
 wrapper class; otherwise, it must be a type assignable to the
 declared return type.  If the value returned by this method is
 null and the interface method's return type is
 primitive, then a NullPointerException will be
 thrown by the method invocation on the proxy instance.  If the
 value returned by this method is otherwise not compatible with
 the interface method's declared return type as described above,
 a ClassCastException will be thrown by the method
 invocation on the proxy instance.
Throws:
Throwable - the exception to throw from the method
 invocation on the proxy instance.  The exception's type must be
 assignable either to any of the exception types declared in the
 throws clause of the interface method or to the
 unchecked exception types java.lang.RuntimeException
 or java.lang.Error.  If a checked exception is
 thrown by this method that is not assignable to any of the
 exception types declared in the throws clause of
 the interface method, then an
 UndeclaredThrowableException containing the
 exception that was thrown by this method will be thrown by the
 method invocation on the proxy instance.
See Also:
UndeclaredThrowableException


"
19,MBeanServerInvocationHandler,2,Object getProxy(),False,,NULL
19,MBeanServerInvocationHandler,3,Object getMBean(),False,,NULL
19,MBeanServerInvocationHandler,4,void setMBeanServer(MBeanServer mbs),False,,NULL
19,MBeanServerInvocationHandler,5,MBeanServer getMBeanServer(),False,,NULL
20,MBeanServerNotification,1,"void postNotification(Notification notification, Object handback)",False,,NULL
20,MBeanServerNotification,2,"void postNotification(Notification notification, Object handback, ObjectName name)",False,,NULL
20,MBeanServerNotification,3,"void postNotification(Notification notification, Object handback, ObjectName[] names)",False,,NULL
20,MBeanServerNotification,4,"void postNotification(Notification notification, Object handback, MBeanNotificationInfo[] notificationInfos)",False,,NULL
20,MBeanServerNotification,5,"void postNotification(Notification notification, Object handback, MBeanNotificationInfo notificationInfo)",False,,NULL
21,MBeanServerPermission,1,"MBeanServerPermission(String name, String actions)",False,,NULL
21,MBeanServerPermission,2,String getName(),False,,NULL
21,MBeanServerPermission,3,String getActions(),False,,NULL
21,MBeanServerPermission,4,boolean implies(Subject subject),False,,NULL
21,MBeanServerPermission,5,boolean equals(Object obj),True,Checks two MBeanServerPermission objects for equality.,"

equals
public boolean equals(Object obj)
Checks two MBeanServerPermission objects for equality. Checks that
 obj is an MBeanServerPermission, and represents the same
 list of allowable actions as this object.
 

Overrides:
equals in class BasicPermission
Parameters:
obj - the object we are testing for equality with this object.
Returns:
true if the objects are equal.
See Also:
Object.hashCode(), 
HashMap


"
22,MBeanTrustPermission,1,MBeanTrustPermission(String name),False,,NULL
22,MBeanTrustPermission,2,"MBeanTrustPermission(String name, String actions)",False,,NULL
22,MBeanTrustPermission,3,String getActions(),False,,NULL
22,MBeanTrustPermission,4,String getName(),False,,NULL
22,MBeanTrustPermission,5,boolean implies(Permission p),False,,NULL
23,Notification,1,NotificationType getType(),False,,NULL
23,Notification,2,Object getSource(),False,,NULL
23,Notification,3,long getSequenceNumber(),True,Get the notification sequence number.,"

getSequenceNumber
public long getSequenceNumber()
Get the notification sequence number.

Returns:
The notification sequence number within the source object. It's a serial number
 identifying a particular instance of notification in the context of the notification source.
 The notification model does not assume that notifications will be received in the same order
 that they are sent. The sequence number helps listeners to sort received notifications.
See Also:
setSequenceNumber(long)


"
23,Notification,4,long getTimeStamp(),True,Get the notification timestamp.,"

getTimeStamp
public long getTimeStamp()
Get the notification timestamp.

Returns:
The notification timestamp.
See Also:
setTimeStamp(long)


"
23,Notification,5,String getMessage(),True,Get the notification message.,"

getMessage
public String getMessage()
Get the notification message.

Returns:
The message string of this notification object.


"
24,NotificationBroadcasterSupport,1,"void addNotificationListener(NotificationListener listener, Object handback)",False,,NULL
24,NotificationBroadcasterSupport,2,void removeNotificationListener(NotificationListener listener),True,Removes a listener from this MBean.,"

removeNotificationListener
public void removeNotificationListener(NotificationListener listener)
                                throws ListenerNotFoundException
Description copied from interface: NotificationBroadcaster
Removes a listener from this MBean.  If the listener
 has been registered with different handback objects or
 notification filters, all entries corresponding to the listener
 will be removed.

Specified by:
removeNotificationListener in interface NotificationBroadcaster
Parameters:
listener - A listener that was previously added to this
 MBean.
Throws:
ListenerNotFoundException - The listener is not
 registered with the MBean.
See Also:
NotificationBroadcaster.addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object), 
NotificationEmitter.removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)


"
24,NotificationBroadcasterSupport,3,void sendNotification(Notification notification),True,Sends a notification.,"

sendNotification
public void sendNotification(Notification notification)
Sends a notification.

 If an Executor was specified in the constructor, it will be given one
 task per selected listener to deliver the notification to that listener.

Parameters:
notification - The notification to send.


"
24,NotificationBroadcasterSupport,4,void removeAllNotificationListeners(),False,,NULL
24,NotificationBroadcasterSupport,5,NotificationListener[] getNotificationListeners(),False,,NULL
25,NotificationFilterSupport,1,boolean isNotificationEnabled(Notification notification),True,Invoked before sending the specified notification to the listener.,"

isNotificationEnabled
public boolean isNotificationEnabled(Notification notification)
Invoked before sending the specified notification to the listener.
 This filter compares the type of the specified notification with each enabled type.
 If the notification type matches one of the enabled types,
 the notification should be sent to the listener and this method returns true.

Specified by:
isNotificationEnabled in interface NotificationFilter
Parameters:
notification - The notification to be sent.
Returns:
true if the notification should be sent to the listener, false otherwise.


"
25,NotificationFilterSupport,2,void enableNotification(Notification notification),False,,NULL
25,NotificationFilterSupport,3,void disableNotification(Notification notification),False,,NULL
25,NotificationFilterSupport,4,void enableAllNotifications(),False,,NULL
25,NotificationFilterSupport,5,void disableAllNotifications(),False,,NULL
25,NotificationFilterSupport,6,"void addNotificationFilter(NotificationFilter filter, Object handback)",False,,NULL
25,NotificationFilterSupport,7,void removeNotificationFilter(NotificationFilter filter),False,,NULL
25,NotificationFilterSupport,8,void removeAllNotificationFilters(),False,,NULL
25,NotificationFilterSupport,9,Set<NotificationFilter> getNotificationFilters(),False,,NULL
25,NotificationFilterSupport,10,Set<Notification> getEnabledNotifications(),False,,NULL
25,NotificationFilterSupport,11,Set<Notification> getDisabledNotifications(),False,,NULL
25,NotificationFilterSupport,12,void enableNotification(Object notificationName),False,,NULL
25,NotificationFilterSupport,13,void disableNotification(Object notificationName),False,,NULL
25,NotificationFilterSupport,14,void enableAllNotifications(Object notificationType),False,,NULL
25,NotificationFilterSupport,15,void disableAllNotifications(Object notificationType),False,,NULL
25,NotificationFilterSupport,16,"void enableAllNotifications(Object notificationType, Object mbeanName)",False,,NULL
25,NotificationFilterSupport,17,"void disableAllNotifications(Object notificationType, Object mbeanName)",False,,NULL
25,NotificationFilterSupport,18,"void enableAllNotifications(Object notificationType, Object mbeanName, Object instanceName)",False,,NULL
25,NotificationFilterSupport,19,"void disableAllNotifications(Object notificationType, Object mbeanName, Object instanceName)",False,,NULL
25,NotificationFilterSupport,20,"void enableAllNotifications(Object notificationType, Object mbeanName, Object instanceName, Object attributeName)",False,,NULL
25,NotificationFilterSupport,21,"void disableAllNotifications(Object notificationType, Object mbeanName, Object instanceName, Object attributeName)",False,,NULL
26,ObjectInstance,1,ObjectInstance getObjectInstance(),False,,NULL
26,ObjectInstance,2,ObjectName getObjectName(),True,Returns the object name part.,"

getObjectName
public ObjectName getObjectName()
Returns the object name part.

Returns:
the object name.


"
26,ObjectInstance,3,String getClassName(),True,Returns the class part.,"

getClassName
public String getClassName()
Returns the class part.

Returns:
the class name.


"
26,ObjectInstance,4,MBeanInfo getMBeanInfo(),False,,NULL
26,ObjectInstance,5,Object getAttribute(String attribute),False,,NULL
27,ObjectName,1,ObjectName(String name),False,,NULL
27,ObjectName,2,String getCanonicalName(),True,"Returns the canonical form of the name; that is, a string representation where the properties are sorted in lexical order.","

getCanonicalName
public String getCanonicalName()
Returns the canonical form of the name; that is, a string
 representation where the properties are sorted in lexical
 order.
More precisely, the canonical form of the name is a String
 consisting of the domain part, a colon
 (:), the canonical key property list, and
 a pattern indication.
The canonical key property list is the same string
 as described for getCanonicalKeyPropertyListString().
The pattern indication is:
 
empty for an ObjectName
 that is not a property list pattern;
 an asterisk for an ObjectName
 that is a property list pattern with no keys; or
 a comma and an
 asterisk (,*) for an ObjectName that is a property
 list pattern with at least one key.
 

Returns:
The canonical form of the name.


"
27,ObjectName,3,String getKeyProperty(String key),True,Obtains the value associated with a key in a key property.,"

getKeyProperty
public String getKeyProperty(String property)
Obtains the value associated with a key in a key property.

Parameters:
property - The property whose value is to be obtained.
Returns:
The value of the property, or null if there is no such
 property in this ObjectName.
Throws:
NullPointerException - If property is null.


"
27,ObjectName,4,String[] getKeyPropertyNames(),False,,NULL
27,ObjectName,5,String getProperty(String key),False,,NULL
27,ObjectName,6,String[] getPropertyNames(),False,,NULL
27,ObjectName,7,String getDomain(),True,Returns the domain part.,"

getDomain
public String getDomain()
Returns the domain part.

Returns:
The domain.


"
27,ObjectName,8,String getKey(),False,,NULL
27,ObjectName,9,String getInstance(),False,,NULL
27,ObjectName,10,String getType(),False,,NULL
27,ObjectName,11,boolean equals(Object obj),True,Compares the current object name with another object name.,"

equals
public boolean equals(Object object)
Compares the current object name with another object name.  Two
 ObjectName instances are equal if and only if their canonical
 forms are equal.  The canonical form is the string described
 for getCanonicalName().

Overrides:
equals in class Object
Parameters:
object - The object name that the current object name is to be
        compared with.
Returns:
True if object is an ObjectName whose
 canonical form is equal to that of this ObjectName.
See Also:
Object.hashCode(), 
HashMap


"
27,ObjectName,12,int hashCode(),True,Returns a hash code for this object name.,"

hashCode
public int hashCode()
Returns a hash code for this object name.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
27,ObjectName,13,String toString(),True,Returns a string representation of the object name.,"

toString
public String toString()
Returns a string representation of the object name.  The
 format of this string is not specified, but users can expect
 that two ObjectNames return the same string if and only if they
 are equal.

Overrides:
toString in class Object
Returns:
a string representation of this object name.


"
28,Query,1,boolean add(E e),False,,NULL
28,Query,2,boolean addAll(Collection<? extends E> c),False,,NULL
28,Query,3,void clear(),False,,NULL
28,Query,4,boolean contains(Object o),False,,NULL
28,Query,5,boolean containsAll(Collection<?> c),False,,NULL
28,Query,6,boolean equals(Object o),False,,NULL
28,Query,7,E get(int index),False,,NULL
28,Query,8,int indexOf(Object o),False,,NULL
28,Query,9,boolean isEmpty(),False,,NULL
28,Query,10,Iterator<E> iterator(),False,,NULL
28,Query,11,int lastIndexOf(Object o),False,,NULL
28,Query,12,ListIterator<E> listIterator(),False,,NULL
28,Query,13,ListIterator<E> listIterator(int index),False,,NULL
28,Query,14,boolean remove(Object o),False,,NULL
28,Query,15,E remove(int index),False,,NULL
28,Query,16,boolean removeAll(Collection<?> c),False,,NULL
28,Query,17,boolean retainAll(Collection<?> c),False,,NULL
28,Query,18,"E set(int index, E element)",False,,NULL
28,Query,19,int size(),False,,NULL
28,Query,20,"List<E> subList(int fromIndex, int toIndex)",False,,NULL
29,QueryEval,1,QueryEval.evaluate(ObjectName objectName),False,,NULL
29,QueryEval,2,"QueryEval.evaluate(ObjectName objectName, String attribute)",False,,NULL
29,QueryEval,3,"QueryEval.evaluate(ObjectName objectName, String attribute, Object[] params)",False,,NULL
29,QueryEval,4,"QueryEval.evaluate(ObjectName objectName, String attribute, Object[] params, String[] signature)",False,,NULL
29,QueryEval,5,"QueryEval.evaluate(ObjectName objectName, String attribute, Object[] params, String[] signature, String[] resultSignature)",False,,NULL
30,StandardEmitterMBean,1,"void addNotificationListener(NotificationListener listener, NotificationFilter filter, Object handback)",True,Adds a listener to this MBean.,"

addNotificationListener
public void addNotificationListener(NotificationListener listener,
                                    NotificationFilter filter,
                                    Object handback)
Description copied from interface: NotificationBroadcaster
Adds a listener to this MBean.

Specified by:
addNotificationListener in interface NotificationBroadcaster
Parameters:
listener - The listener object which will handle the
 notifications emitted by the broadcaster.
filter - The filter object. If filter is null, no
 filtering will be performed before handling notifications.
handback - An opaque object to be sent back to the
 listener when a notification is emitted. This object cannot be
 used by the Notification broadcaster object. It should be
 resent unchanged with the notification to the listener.
See Also:
NotificationBroadcaster.removeNotificationListener(javax.management.NotificationListener)


"
30,StandardEmitterMBean,2,void removeNotificationListener(NotificationListener listener),True,Removes a listener from this MBean.,"

removeNotificationListener
public void removeNotificationListener(NotificationListener listener)
                                throws ListenerNotFoundException
Description copied from interface: NotificationBroadcaster
Removes a listener from this MBean.  If the listener
 has been registered with different handback objects or
 notification filters, all entries corresponding to the listener
 will be removed.

Specified by:
removeNotificationListener in interface NotificationBroadcaster
Parameters:
listener - A listener that was previously added to this
 MBean.
Throws:
ListenerNotFoundException - The listener is not
 registered with the MBean.
See Also:
NotificationBroadcaster.addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object), 
NotificationEmitter.removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)


"
30,StandardEmitterMBean,3,void sendNotification(Notification notification),True,Sends a notification.,"

sendNotification
public void sendNotification(Notification n)
Sends a notification.
If the emitter parameter to the constructor was an
 instance of NotificationBroadcasterSupport then this
 method will call emitter.sendNotification.

Parameters:
n - the notification to send.
Throws:
ClassCastException - if the emitter parameter to the
 constructor was not a NotificationBroadcasterSupport.


"
30,StandardEmitterMBean,4,void clearNotificationListeners(),False,,NULL
30,StandardEmitterMBean,5,"void addAttributeChangeListener(AttributeChangeListener listener, String attributeName, Object handback)",False,,NULL
30,StandardEmitterMBean,6,void removeAttributeChangeListener(AttributeChangeListener listener),False,,NULL
30,StandardEmitterMBean,7,"void addAttributeChangeListener(AttributeChangeListener listener, String[] attributeNames, Object handback)",False,,NULL
30,StandardEmitterMBean,8,"void removeAttributeChangeListener(AttributeChangeListener listener, String attributeName)",False,,NULL
30,StandardEmitterMBean,9,"void addAttributeChangeListener(AttributeChangeListener listener, String[] attributeNames, Object handback, boolean notifyRegistered)",False,,NULL
30,StandardEmitterMBean,10,"void removeAttributeChangeListener(AttributeChangeListener listener, String attributeName, boolean notifyListener)",False,,NULL
31,StandardMBean,1,getObjectInstance(),False,,NULL
31,StandardMBean,2,getMBeanInfo(),False,,NULL
31,StandardMBean,3,"invoke(ObjectName oname, String actionName, Object[] params, String[] signature)",False,,NULL
31,StandardMBean,4,"setAttribute(ObjectName oname, Attribute attribute)",False,,NULL
31,StandardMBean,5,"getAttribute(ObjectName oname, String attribute)",False,,NULL
32,StringValueExp,1,boolean equals(Object obj),False,,NULL
32,StringValueExp,2,int hashCode(),False,,NULL
32,StringValueExp,3,String toString(),True,Returns the string representing the object.,"

toString
public String toString()
Returns the string representing the object.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
32,StringValueExp,4,String getValue(),True,Returns the string represented by the StringValueExp instance.,"

getValue
public String getValue()
Returns the string represented by the
 StringValueExp instance.

Returns:
the string.


"
32,StringValueExp,5,String getFormattedValue(),False,,NULL
