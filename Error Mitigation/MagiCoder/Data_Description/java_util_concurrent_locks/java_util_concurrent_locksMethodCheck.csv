Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,AbstractOwnableSynchronizer,1,boolean isHeldByCurrentThread(),False,,NULL
0,AbstractOwnableSynchronizer,2,void setExclusiveOwnerThread(Thread thread),True,Sets the thread that currently owns exclusive access.,"

setExclusiveOwnerThread
protected final void setExclusiveOwnerThread(Thread thread)
Sets the thread that currently owns exclusive access.
 A null argument indicates that no thread owns access.
 This method does not otherwise impose any synchronization or
 volatile field accesses.

Parameters:
thread - the owner thread


"
0,AbstractOwnableSynchronizer,3,Thread getExclusiveOwnerThread(),True,"Returns the thread last set by setExclusiveOwnerThread, or null if never set.","

getExclusiveOwnerThread
protected final Thread getExclusiveOwnerThread()
Returns the thread last set by setExclusiveOwnerThread,
 or null if never set.  This method does not otherwise
 impose any synchronization or volatile field accesses.

Returns:
the owner thread


"
0,AbstractOwnableSynchronizer,4,boolean tryAcquire(int arg),False,,NULL
0,AbstractOwnableSynchronizer,5,boolean release(int arg),False,,NULL
1,AbstractQueuedLongSynchronizer,1,protected long tryAcquireShared(long arg),False,,NULL
1,AbstractQueuedLongSynchronizer,2,protected boolean tryReleaseShared(long arg),False,,NULL
1,AbstractQueuedLongSynchronizer,3,protected boolean isHeldExclusively(),False,,NULL
1,AbstractQueuedLongSynchronizer,4,protected long getState(),False,,NULL
1,AbstractQueuedLongSynchronizer,5,protected void setState(long newState),False,,NULL
2,AbstractQueuedSynchronizer,1,int getState(),True,Returns the current value of synchronization state.,"

getState
protected final int getState()
Returns the current value of synchronization state.
 This operation has memory semantics of a volatile read.

Returns:
current state value


"
2,AbstractQueuedSynchronizer,2,"boolean compareAndSetState(int expect, int update)",True,Atomically sets synchronization state to the given updated value if the current state value equals the expected value.,"

compareAndSetState
protected final boolean compareAndSetState(int expect,
                                           int update)
Atomically sets synchronization state to the given updated
 value if the current state value equals the expected value.
 This operation has memory semantics of a volatile read
 and write.

Parameters:
expect - the expected value
update - the new value
Returns:
true if successful. False return indicates that the actual
         value was not equal to the expected value.


"
2,AbstractQueuedSynchronizer,3,void acquire(int arg),True,"Acquires in exclusive mode, ignoring interrupts.","

acquire
public final void acquire(int arg)
Acquires in exclusive mode, ignoring interrupts.  Implemented
 by invoking at least once tryAcquire(int),
 returning on success.  Otherwise the thread is queued, possibly
 repeatedly blocking and unblocking, invoking tryAcquire(int) until success.  This method can be used
 to implement method Lock.lock().

Parameters:
arg - the acquire argument.  This value is conveyed to
        tryAcquire(int) but is otherwise uninterpreted and
        can represent anything you like.


"
2,AbstractQueuedSynchronizer,4,boolean tryAcquire(int arg),True,Attempts to acquire in exclusive mode.,"

tryAcquire
protected boolean tryAcquire(int arg)
Attempts to acquire in exclusive mode. This method should query
 if the state of the object permits it to be acquired in the
 exclusive mode, and if so to acquire it.

 This method is always invoked by the thread performing
 acquire.  If this method reports failure, the acquire method
 may queue the thread, if it is not already queued, until it is
 signalled by a release from some other thread. This can be used
 to implement method Lock.tryLock().

 The default
 implementation throws UnsupportedOperationException.

Parameters:
arg - the acquire argument. This value is always the one
        passed to an acquire method, or is the value saved on entry
        to a condition wait.  The value is otherwise uninterpreted
        and can represent anything you like.
Returns:
true if successful. Upon success, this object has
         been acquired.
Throws:
IllegalMonitorStateException - if acquiring would place this
         synchronizer in an illegal state. This exception must be
         thrown in a consistent fashion for synchronization to work
         correctly.
UnsupportedOperationException - if exclusive mode is not supported


"
2,AbstractQueuedSynchronizer,5,void release(int arg),False,,NULL
3,LockSupport,1,void park(Object blocker),True,Disables the current thread for thread scheduling purposes unless the permit is available.,"

park
public static void park(Object blocker)
Disables the current thread for thread scheduling purposes unless the
 permit is available.

 If the permit is available then it is consumed and the call returns
 immediately; otherwise
 the current thread becomes disabled for thread scheduling
 purposes and lies dormant until one of three things happens:

 
Some other thread invokes unpark with the
 current thread as the target; or

 Some other thread interrupts
 the current thread; or

 The call spuriously (that is, for no reason) returns.
 
This method does not report which of these caused the
 method to return. Callers should re-check the conditions which caused
 the thread to park in the first place. Callers may also determine,
 for example, the interrupt status of the thread upon return.

Parameters:
blocker - the synchronization object responsible for this
        thread parking
Since:
1.6


"
3,LockSupport,2,void unpark(Thread thread),True,"Makes available the permit for the given thread, if it was not already available.","

unpark
public static void unpark(Thread thread)
Makes available the permit for the given thread, if it
 was not already available.  If the thread was blocked on
 park then it will unblock.  Otherwise, its next call
 to park is guaranteed not to block. This operation
 is not guaranteed to have any effect at all if the given
 thread has not been started.

Parameters:
thread - the thread to unpark, or null, in which case
        this operation has no effect


"
3,LockSupport,3,"void parkNanos(Object blocker, long nanos)",True,"Disables the current thread for thread scheduling purposes, for up to the specified waiting time, unless the permit is available.","

parkNanos
public static void parkNanos(Object blocker,
                             long nanos)
Disables the current thread for thread scheduling purposes, for up to
 the specified waiting time, unless the permit is available.

 If the permit is available then it is consumed and the call
 returns immediately; otherwise the current thread becomes disabled
 for thread scheduling purposes and lies dormant until one of four
 things happens:

 
Some other thread invokes unpark with the
 current thread as the target; or

 Some other thread interrupts
 the current thread; or

 The specified waiting time elapses; or

 The call spuriously (that is, for no reason) returns.
 
This method does not report which of these caused the
 method to return. Callers should re-check the conditions which caused
 the thread to park in the first place. Callers may also determine,
 for example, the interrupt status of the thread, or the elapsed time
 upon return.

Parameters:
blocker - the synchronization object responsible for this
        thread parking
nanos - the maximum number of nanoseconds to wait
Since:
1.6


"
3,LockSupport,4,"void parkUntil(Object blocker, long deadline)",True,"Disables the current thread for thread scheduling purposes, until the specified deadline, unless the permit is available.","

parkUntil
public static void parkUntil(Object blocker,
                             long deadline)
Disables the current thread for thread scheduling purposes, until
 the specified deadline, unless the permit is available.

 If the permit is available then it is consumed and the call
 returns immediately; otherwise the current thread becomes disabled
 for thread scheduling purposes and lies dormant until one of four
 things happens:

 
Some other thread invokes unpark with the
 current thread as the target; or

 Some other thread interrupts the
 current thread; or

 The specified deadline passes; or

 The call spuriously (that is, for no reason) returns.
 
This method does not report which of these caused the
 method to return. Callers should re-check the conditions which caused
 the thread to park in the first place. Callers may also determine,
 for example, the interrupt status of the thread, or the current time
 upon return.

Parameters:
blocker - the synchronization object responsible for this
        thread parking
deadline - the absolute time, in milliseconds from the Epoch,
        to wait until
Since:
1.6


"
3,LockSupport,5,"void parkNanos(Object blocker, long nanos)",True,"Disables the current thread for thread scheduling purposes, for up to the specified waiting time, unless the permit is available.","

parkNanos
public static void parkNanos(Object blocker,
                             long nanos)
Disables the current thread for thread scheduling purposes, for up to
 the specified waiting time, unless the permit is available.

 If the permit is available then it is consumed and the call
 returns immediately; otherwise the current thread becomes disabled
 for thread scheduling purposes and lies dormant until one of four
 things happens:

 
Some other thread invokes unpark with the
 current thread as the target; or

 Some other thread interrupts
 the current thread; or

 The specified waiting time elapses; or

 The call spuriously (that is, for no reason) returns.
 
This method does not report which of these caused the
 method to return. Callers should re-check the conditions which caused
 the thread to park in the first place. Callers may also determine,
 for example, the interrupt status of the thread, or the elapsed time
 upon return.

Parameters:
blocker - the synchronization object responsible for this
        thread parking
nanos - the maximum number of nanoseconds to wait
Since:
1.6


"
4,ReentrantLock,1,void lock(),True,Acquires the lock.,"

lock
public void lock()
Acquires the lock.

 Acquires the lock if it is not held by another thread and returns
 immediately, setting the lock hold count to one.

 If the current thread already holds the lock then the hold
 count is incremented by one and the method returns immediately.

 If the lock is held by another thread then the
 current thread becomes disabled for thread scheduling
 purposes and lies dormant until the lock has been acquired,
 at which time the lock hold count is set to one.

Specified by:
lock in interface Lock


"
4,ReentrantLock,2,void lockInterruptibly(),True,Acquires the lock unless the current thread is interrupted.,"

lockInterruptibly
public void lockInterruptibly()
                       throws InterruptedException
Acquires the lock unless the current thread is
 interrupted.

 Acquires the lock if it is not held by another thread and returns
 immediately, setting the lock hold count to one.

 If the current thread already holds this lock then the hold count
 is incremented by one and the method returns immediately.

 If the lock is held by another thread then the
 current thread becomes disabled for thread scheduling
 purposes and lies dormant until one of two things happens:

 
The lock is acquired by the current thread; or

 Some other thread interrupts the
 current thread.

 
If the lock is acquired by the current thread then the lock hold
 count is set to one.

 If the current thread:

 
has its interrupted status set on entry to this method; or

 is interrupted while acquiring
 the lock,

 

 then InterruptedException is thrown and the current thread's
 interrupted status is cleared.

 In this implementation, as this method is an explicit
 interruption point, preference is given to responding to the
 interrupt over normal or reentrant acquisition of the lock.

Specified by:
lockInterruptibly in interface Lock
Throws:
InterruptedException - if the current thread is interrupted


"
4,ReentrantLock,3,boolean tryLock(),True,Acquires the lock only if it is not held by another thread at the time of invocation.,"

tryLock
public boolean tryLock()
Acquires the lock only if it is not held by another thread at the time
 of invocation.

 Acquires the lock if it is not held by another thread and
 returns immediately with the value true, setting the
 lock hold count to one. Even when this lock has been set to use a
 fair ordering policy, a call to tryLock() will
 immediately acquire the lock if it is available, whether or not
 other threads are currently waiting for the lock.
 This ""barging"" behavior can be useful in certain
 circumstances, even though it breaks fairness. If you want to honor
 the fairness setting for this lock, then use
 tryLock(0, TimeUnit.SECONDS) 
 which is almost equivalent (it also detects interruption).

 If the current thread already holds this lock then the hold
 count is incremented by one and the method returns true.

 If the lock is held by another thread then this method will return
 immediately with the value false.

Specified by:
tryLock in interface Lock
Returns:
true if the lock was free and was acquired by the
         current thread, or the lock was already held by the current
         thread; and false otherwise


"
4,ReentrantLock,4,"boolean tryLock(long time, TimeUnit unit)",True,Acquires the lock if it is not held by another thread within the given waiting time and the current thread has not been interrupted.,"

tryLock
public boolean tryLock(long timeout,
                       TimeUnit unit)
                throws InterruptedException
Acquires the lock if it is not held by another thread within the given
 waiting time and the current thread has not been
 interrupted.

 Acquires the lock if it is not held by another thread and returns
 immediately with the value true, setting the lock hold count
 to one. If this lock has been set to use a fair ordering policy then
 an available lock will not be acquired if any other threads
 are waiting for the lock. This is in contrast to the tryLock()
 method. If you want a timed tryLock that does permit barging on
 a fair lock then combine the timed and un-timed forms together:

   
 if (lock.tryLock() ||
     lock.tryLock(timeout, unit)) {
   ...
 }
If the current thread
 already holds this lock then the hold count is incremented by one and
 the method returns true.

 If the lock is held by another thread then the
 current thread becomes disabled for thread scheduling
 purposes and lies dormant until one of three things happens:

 
The lock is acquired by the current thread; or

 Some other thread interrupts
 the current thread; or

 The specified waiting time elapses

 
If the lock is acquired then the value true is returned and
 the lock hold count is set to one.

 If the current thread:

 
has its interrupted status set on entry to this method; or

 is interrupted while
 acquiring the lock,

 
 then InterruptedException is thrown and the current thread's
 interrupted status is cleared.

 If the specified waiting time elapses then the value false
 is returned.  If the time is less than or equal to zero, the method
 will not wait at all.

 In this implementation, as this method is an explicit
 interruption point, preference is given to responding to the
 interrupt over normal or reentrant acquisition of the lock, and
 over reporting the elapse of the waiting time.

Specified by:
tryLock in interface Lock
Parameters:
timeout - the time to wait for the lock
unit - the time unit of the timeout argument
Returns:
true if the lock was free and was acquired by the
         current thread, or the lock was already held by the current
         thread; and false if the waiting time elapsed before
         the lock could be acquired
Throws:
InterruptedException - if the current thread is interrupted
NullPointerException - if the time unit is null


"
4,ReentrantLock,5,void unlock(),True,Attempts to release this lock.,"

unlock
public void unlock()
Attempts to release this lock.

 If the current thread is the holder of this lock then the hold
 count is decremented.  If the hold count is now zero then the lock
 is released.  If the current thread is not the holder of this
 lock then IllegalMonitorStateException is thrown.

Specified by:
unlock in interface Lock
Throws:
IllegalMonitorStateException - if the current thread does not
         hold this lock


"
5,ReentrantReadWriteLock,1,ReentrantReadWriteLock(),False,,NULL
5,ReentrantReadWriteLock,2,Lock readLock(),False,,NULL
5,ReentrantReadWriteLock,3,Lock writeLock(),False,,NULL
5,ReentrantReadWriteLock,4,boolean isFair(),True,Returns true if this lock has fairness set true.,"

isFair
public final boolean isFair()
Returns true if this lock has fairness set true.

Returns:
true if this lock has fairness set true


"
5,ReentrantReadWriteLock,5,boolean isWriteLocked(),True,Queries if the write lock is held by any thread.,"

isWriteLocked
public boolean isWriteLocked()
Queries if the write lock is held by any thread. This method is
 designed for use in monitoring system state, not for
 synchronization control.

Returns:
true if any thread holds the write lock and
         false otherwise


"
5,ReentrantReadWriteLock,6,boolean isWriteLockedByCurrentThread(),True,Queries if the write lock is held by the current thread.,"

isWriteLockedByCurrentThread
public boolean isWriteLockedByCurrentThread()
Queries if the write lock is held by the current thread.

Returns:
true if the current thread holds the write lock and
         false otherwise


"
5,ReentrantReadWriteLock,7,boolean isReadLocked(),False,,NULL
5,ReentrantReadWriteLock,8,boolean isReadLockedByCurrentThread(),False,,NULL
5,ReentrantReadWriteLock,9,int getReadLockCount(),True,Queries the number of read locks held for this lock.,"

getReadLockCount
public int getReadLockCount()
Queries the number of read locks held for this lock. This
 method is designed for use in monitoring system state, not for
 synchronization control.

Returns:
the number of read locks held


"
5,ReentrantReadWriteLock,10,int getWriteLockCount(),False,,NULL
5,ReentrantReadWriteLock,11,Condition newCondition(),False,,NULL
5,ReentrantReadWriteLock,12,void lock(),False,,NULL
5,ReentrantReadWriteLock,13,void lockInterruptibly(),False,,NULL
5,ReentrantReadWriteLock,14,boolean tryLock(),False,,NULL
5,ReentrantReadWriteLock,15,"boolean tryLock(long time, TimeUnit unit)",False,,NULL
5,ReentrantReadWriteLock,16,void unlock(),False,,NULL
5,ReentrantReadWriteLock,17,void readLock(),False,,NULL
5,ReentrantReadWriteLock,18,void readLockInterruptibly(),False,,NULL
5,ReentrantReadWriteLock,19,boolean tryReadLock(),False,,NULL
5,ReentrantReadWriteLock,20,"boolean tryReadLock(long time, TimeUnit unit)",False,,NULL
5,ReentrantReadWriteLock,21,void unlockRead(),False,,NULL
5,ReentrantReadWriteLock,22,void writeLock(),False,,NULL
5,ReentrantReadWriteLock,23,void writeLockInterruptibly(),False,,NULL
5,ReentrantReadWriteLock,24,boolean tryWriteLock(),False,,NULL
5,ReentrantReadWriteLock,25,"boolean tryWriteLock(long time, TimeUnit unit)",False,,NULL
5,ReentrantReadWriteLock,26,void unlockWrite(),False,,NULL
6,ReentrantReadWriteLock.ReadLock,1,void lock(),True,Acquires the read lock.,"

lock
public void lock()
Acquires the read lock.

 Acquires the read lock if the write lock is not held by
 another thread and returns immediately.

 If the write lock is held by another thread then
 the current thread becomes disabled for thread scheduling
 purposes and lies dormant until the read lock has been acquired.

Specified by:
lock in interface Lock


"
6,ReentrantReadWriteLock.ReadLock,2,boolean tryLock(),True,Acquires the read lock only if the write lock is not held by another thread at the time of invocation.,"

tryLock
public boolean tryLock()
Acquires the read lock only if the write lock is not held by
 another thread at the time of invocation.

 Acquires the read lock if the write lock is not held by
 another thread and returns immediately with the value
 true. Even when this lock has been set to use a
 fair ordering policy, a call to tryLock()
will immediately acquire the read lock if it is
 available, whether or not other threads are currently
 waiting for the read lock.  This ""barging"" behavior
 can be useful in certain circumstances, even though it
 breaks fairness. If you want to honor the fairness setting
 for this lock, then use tryLock(0, TimeUnit.SECONDS)  which is almost equivalent
 (it also detects interruption).

 If the write lock is held by another thread then
 this method will return immediately with the value
 false.

Specified by:
tryLock in interface Lock
Returns:
true if the read lock was acquired


"
6,ReentrantReadWriteLock.ReadLock,3,"boolean tryLock(long time, TimeUnit unit)",True,Acquires the read lock if the write lock is not held by another thread within the given waiting time and the current thread has not been interrupted.,"

tryLock
public boolean tryLock(long timeout,
                       TimeUnit unit)
                throws InterruptedException
Acquires the read lock if the write lock is not held by
 another thread within the given waiting time and the
 current thread has not been interrupted.

 Acquires the read lock if the write lock is not held by
 another thread and returns immediately with the value
 true. If this lock has been set to use a fair
 ordering policy then an available lock will not be
 acquired if any other threads are waiting for the
 lock. This is in contrast to the tryLock()
 method. If you want a timed tryLock that does
 permit barging on a fair lock then combine the timed and
 un-timed forms together:

   
 if (lock.tryLock() ||
     lock.tryLock(timeout, unit)) {
   ...
 }
If the write lock is held by another thread then the
 current thread becomes disabled for thread scheduling
 purposes and lies dormant until one of three things happens:

 
The read lock is acquired by the current thread; or

 Some other thread interrupts
 the current thread; or

 The specified waiting time elapses.

 
If the read lock is acquired then the value true is
 returned.

 If the current thread:

 
has its interrupted status set on entry to this method; or

 is interrupted while
 acquiring the read lock,

  then InterruptedException is thrown and the
 current thread's interrupted status is cleared.

 If the specified waiting time elapses then the value
 false is returned.  If the time is less than or
 equal to zero, the method will not wait at all.

 In this implementation, as this method is an explicit
 interruption point, preference is given to responding to
 the interrupt over normal or reentrant acquisition of the
 lock, and over reporting the elapse of the waiting time.

Specified by:
tryLock in interface Lock
Parameters:
timeout - the time to wait for the read lock
unit - the time unit of the timeout argument
Returns:
true if the read lock was acquired
Throws:
InterruptedException - if the current thread is interrupted
NullPointerException - if the time unit is null


"
6,ReentrantReadWriteLock.ReadLock,4,void unlock(),True,Attempts to release this lock.,"

unlock
public void unlock()
Attempts to release this lock.

 If the number of readers is now zero then the lock
 is made available for write lock attempts.

Specified by:
unlock in interface Lock


"
6,ReentrantReadWriteLock.ReadLock,5,Condition newCondition(),True,Throws UnsupportedOperationException because ReadLocks do not support conditions.,"

newCondition
public Condition newCondition()
Throws UnsupportedOperationException because
 ReadLocks do not support conditions.

Specified by:
newCondition in interface Lock
Returns:
A new Condition instance for this Lock instance
Throws:
UnsupportedOperationException - always


"
7,ReentrantReadWriteLock.WriteLock,1,void lock(),True,Acquires the write lock.,"

lock
public void lock()
Acquires the write lock.

 Acquires the write lock if neither the read nor write lock
 are held by another thread
 and returns immediately, setting the write lock hold count to
 one.

 If the current thread already holds the write lock then the
 hold count is incremented by one and the method returns
 immediately.

 If the lock is held by another thread then the current
 thread becomes disabled for thread scheduling purposes and
 lies dormant until the write lock has been acquired, at which
 time the write lock hold count is set to one.

Specified by:
lock in interface Lock


"
7,ReentrantReadWriteLock.WriteLock,2,boolean tryLock(),True,Acquires the write lock only if it is not held by another thread at the time of invocation.,"

tryLock
public boolean tryLock()
Acquires the write lock only if it is not held by another thread
 at the time of invocation.

 Acquires the write lock if neither the read nor write lock
 are held by another thread
 and returns immediately with the value true,
 setting the write lock hold count to one. Even when this lock has
 been set to use a fair ordering policy, a call to
 tryLock() will immediately acquire the
 lock if it is available, whether or not other threads are
 currently waiting for the write lock.  This ""barging""
 behavior can be useful in certain circumstances, even
 though it breaks fairness. If you want to honor the
 fairness setting for this lock, then use tryLock(0, TimeUnit.SECONDS) 
 which is almost equivalent (it also detects interruption).

 If the current thread already holds this lock then the
 hold count is incremented by one and the method returns
 true.

 If the lock is held by another thread then this method
 will return immediately with the value false.

Specified by:
tryLock in interface Lock
Returns:
true if the lock was free and was acquired
 by the current thread, or the write lock was already held
 by the current thread; and false otherwise.


"
7,ReentrantReadWriteLock.WriteLock,3,"boolean tryLock(long time, TimeUnit unit)",True,Acquires the write lock if it is not held by another thread within the given waiting time and the current thread has not been interrupted.,"

tryLock
public boolean tryLock(long timeout,
                       TimeUnit unit)
                throws InterruptedException
Acquires the write lock if it is not held by another thread
 within the given waiting time and the current thread has
 not been interrupted.

 Acquires the write lock if neither the read nor write lock
 are held by another thread
 and returns immediately with the value true,
 setting the write lock hold count to one. If this lock has been
 set to use a fair ordering policy then an available lock
 will not be acquired if any other threads are
 waiting for the write lock. This is in contrast to the tryLock() method. If you want a timed tryLock
 that does permit barging on a fair lock then combine the
 timed and un-timed forms together:

   
 if (lock.tryLock() ||
     lock.tryLock(timeout, unit)) {
   ...
 }
If the current thread already holds this lock then the
 hold count is incremented by one and the method returns
 true.

 If the lock is held by another thread then the current
 thread becomes disabled for thread scheduling purposes and
 lies dormant until one of three things happens:

 
The write lock is acquired by the current thread; or

 Some other thread interrupts
 the current thread; or

 The specified waiting time elapses

 
If the write lock is acquired then the value true is
 returned and the write lock hold count is set to one.

 If the current thread:

 
has its interrupted status set on entry to this method;
 or

 is interrupted while
 acquiring the write lock,

 

 then InterruptedException is thrown and the current
 thread's interrupted status is cleared.

 If the specified waiting time elapses then the value
 false is returned.  If the time is less than or
 equal to zero, the method will not wait at all.

 In this implementation, as this method is an explicit
 interruption point, preference is given to responding to
 the interrupt over normal or reentrant acquisition of the
 lock, and over reporting the elapse of the waiting time.

Specified by:
tryLock in interface Lock
Parameters:
timeout - the time to wait for the write lock
unit - the time unit of the timeout argument
Returns:
true if the lock was free and was acquired
 by the current thread, or the write lock was already held by the
 current thread; and false if the waiting time
 elapsed before the lock could be acquired.
Throws:
InterruptedException - if the current thread is interrupted
NullPointerException - if the time unit is null


"
7,ReentrantReadWriteLock.WriteLock,4,void unlock(),True,Attempts to release this lock.,"

unlock
public void unlock()
Attempts to release this lock.

 If the current thread is the holder of this lock then
 the hold count is decremented. If the hold count is now
 zero then the lock is released.  If the current thread is
 not the holder of this lock then IllegalMonitorStateException is thrown.

Specified by:
unlock in interface Lock
Throws:
IllegalMonitorStateException - if the current thread does not
 hold this lock


"
7,ReentrantReadWriteLock.WriteLock,5,Condition newCondition(),True,Returns a Condition instance for use with this Lock instance.,"

newCondition
public Condition newCondition()
Returns a Condition instance for use with this
 Lock instance.
 The returned Condition instance supports the same
 usages as do the Object monitor methods (wait, notify, and notifyAll) when used with the built-in
 monitor lock.

 
If this write lock is not held when any Condition method is called then an IllegalMonitorStateException is thrown.  (Read locks are
 held independently of write locks, so are not checked or
 affected. However it is essentially always an error to
 invoke a condition waiting method when the current thread
 has also acquired read locks, since other threads that
 could unblock it will not be able to acquire the write
 lock.)

 When the condition waiting
 methods are called the write lock is released and, before
 they return, the write lock is reacquired and the lock hold
 count restored to what it was when the method was called.

 If a thread is interrupted while
 waiting then the wait will terminate, an InterruptedException will be thrown, and the thread's
 interrupted status will be cleared.

  Waiting threads are signalled in FIFO order.

 The ordering of lock reacquisition for threads returning
 from waiting methods is the same as for threads initially
 acquiring the lock, which is in the default case not specified,
 but for fair locks favors those threads that have been
 waiting the longest.

 

Specified by:
newCondition in interface Lock
Returns:
the Condition object


"
8,StampedLock,1,long writeLock(),True,"Exclusively acquires the lock, blocking if necessary until available.","

writeLock
public long writeLock()
Exclusively acquires the lock, blocking if necessary
 until available.

Returns:
a stamp that can be used to unlock or convert mode


"
8,StampedLock,2,boolean tryWriteLock(),False,,NULL
8,StampedLock,3,long tryOptimisticRead(),True,"Returns a stamp that can later be validated, or zero if exclusively locked.","

tryOptimisticRead
public long tryOptimisticRead()
Returns a stamp that can later be validated, or zero
 if exclusively locked.

Returns:
a stamp, or zero if exclusively locked


"
8,StampedLock,4,long readLock(),True,"Non-exclusively acquires the lock, blocking if necessary until available.","

readLock
public long readLock()
Non-exclusively acquires the lock, blocking if necessary
 until available.

Returns:
a stamp that can be used to unlock or convert mode


"
8,StampedLock,5,void unlock(long stamp),True,"If the lock state matches the given stamp, releases the corresponding mode of the lock.","

unlock
public void unlock(long stamp)
If the lock state matches the given stamp, releases the
 corresponding mode of the lock.

Parameters:
stamp - a stamp returned by a lock operation
Throws:
IllegalMonitorStateException - if the stamp does
 not match the current state of this lock


"
