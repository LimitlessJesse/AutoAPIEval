ClassName,Method,Return Type,Description,Full Description
AbstractRegionPainter,configureGraphics(Graphics2D g),protected void,Configures the given Graphics2D.,"

configureGraphics
protected void configureGraphics(Graphics2D g)
Configures the given Graphics2D. Often, rendering hints or compositing rules are
 applied to a Graphics2D object prior to painting, which should affect all of the
 subsequent painting operations. This method provides a convenient hook for configuring
 the Graphics object prior to rendering, regardless of whether the render operation is
 performed to an intermediate buffer or directly to the display.

Parameters:
g - The Graphics2D object to configure. Will not be null.


"
AbstractRegionPainter,"decodeAnchorX(float x, float dx)",protected float,"Decodes and returns a float value representing the actual pixel location for the anchor point given the encoded X value of the control point, and the offset distance to the anchor from that control point.","

decodeAnchorX
protected final float decodeAnchorX(float x,
                                    float dx)
Decodes and returns a float value representing the actual pixel location for
 the anchor point given the encoded X value of the control point, and the offset
 distance to the anchor from that control point.

Parameters:
x - an encoded x value of the bezier control point (0...1, or 1...2, or 2...3)
dx - the offset distance to the anchor from the control point x
Returns:
the decoded x location of the control point
Throws:
IllegalArgumentException - if x < 0 or x > 3


"
AbstractRegionPainter,"decodeAnchorY(float y, float dy)",protected float,"Decodes and returns a float value representing the actual pixel location for the anchor point given the encoded Y value of the control point, and the offset distance to the anchor from that control point.","

decodeAnchorY
protected final float decodeAnchorY(float y,
                                    float dy)
Decodes and returns a float value representing the actual pixel location for
 the anchor point given the encoded Y value of the control point, and the offset
 distance to the anchor from that control point.

Parameters:
y - an encoded y value of the bezier control point (0...1, or 1...2, or 2...3)
dy - the offset distance to the anchor from the control point y
Returns:
the decoded y position of the control point
Throws:
IllegalArgumentException - if y < 0 or y > 3


"
AbstractRegionPainter,"decodeColor(Color color1, Color color2, float midPoint)",protected Color,"Decodes and returns a color, which is derived from a offset between two other colors.","

decodeColor
protected final Color decodeColor(Color color1,
                                  Color color2,
                                  float midPoint)
Decodes and returns a color, which is derived from a offset between two
 other colors.

Parameters:
color1 - The first color
color2 - The second color
midPoint - The offset between color 1 and color 2, a value of 0.0 is
                 color 1 and 1.0 is color 2;
Returns:
The derived color


"
AbstractRegionPainter,"decodeColor(String key, float hOffset, float sOffset, float bOffset, int aOffset)",protected Color,"Decodes and returns a color, which is derived from a base color in UI defaults.","

decodeColor
protected final Color decodeColor(String key,
                                  float hOffset,
                                  float sOffset,
                                  float bOffset,
                                  int aOffset)
Decodes and returns a color, which is derived from a base color in UI
 defaults.

Parameters:
key - A key corresponding to the value in the UI Defaults table
                of UIManager where the base color is defined
hOffset - The hue offset used for derivation.
sOffset - The saturation offset used for derivation.
bOffset - The brightness offset used for derivation.
aOffset - The alpha offset used for derivation. Between 0...255
Returns:
The derived color, whose color value will change if the parent
         uiDefault color changes.


"
AbstractRegionPainter,"decodeGradient(float x1, float y1, float x2, float y2, float[] midpoints, Color[] colors)",protected LinearGradientPaint,"Given parameters for creating a LinearGradientPaint, this method will create and return a linear gradient paint.","

decodeGradient
protected final LinearGradientPaint decodeGradient(float x1,
                                                   float y1,
                                                   float x2,
                                                   float y2,
                                                   float[] midpoints,
                                                   Color[] colors)
Given parameters for creating a LinearGradientPaint, this method will
 create and return a linear gradient paint. One primary purpose for this
 method is to avoid creating a LinearGradientPaint where the start and
 end points are equal. In such a case, the end y point is slightly
 increased to avoid the overlap.

Parameters:
x1 - 
y1 - 
x2 - 
y2 - 
midpoints - 
colors - 
Returns:
a valid LinearGradientPaint. This method never returns null.
Throws:
NullPointerException - if midpoints array is null,
      or colors array is null,
IllegalArgumentException - if start and end points are the same points,
      or midpoints.length != colors.length,
      or colors is less than 2 in size,
      or a midpoints value is less than 0.0 or greater than 1.0,
      or the midpoints are not provided in strictly increasing order


"
AbstractRegionPainter,"decodeRadialGradient(float x, float y, float r, float[] midpoints, Color[] colors)",protected RadialGradientPaint,"Given parameters for creating a RadialGradientPaint, this method will create and return a radial gradient paint.","

decodeRadialGradient
protected final RadialGradientPaint decodeRadialGradient(float x,
                                                         float y,
                                                         float r,
                                                         float[] midpoints,
                                                         Color[] colors)
Given parameters for creating a RadialGradientPaint, this method will
 create and return a radial gradient paint. One primary purpose for this
 method is to avoid creating a RadialGradientPaint where the radius
 is non-positive. In such a case, the radius is just slightly
 increased to avoid 0.

Parameters:
x - 
y - 
r - 
midpoints - 
colors - 
Returns:
a valid RadialGradientPaint. This method never returns null.
Throws:
NullPointerException - if midpoints array is null,
      or colors array is null
IllegalArgumentException - if r is non-positive,
      or midpoints.length != colors.length,
      or colors is less than 2 in size,
      or a midpoints value is less than 0.0 or greater than 1.0,
      or the midpoints are not provided in strictly increasing order


"
AbstractRegionPainter,decodeX(float x),protected float,Decodes and returns a float value representing the actual pixel location for the given encoded X value.,"

decodeX
protected final float decodeX(float x)
Decodes and returns a float value representing the actual pixel location for
 the given encoded X value.

Parameters:
x - an encoded x value (0...1, or 1...2, or 2...3)
Returns:
the decoded x value
Throws:
IllegalArgumentException - if x < 0 or x > 3


"
AbstractRegionPainter,decodeY(float y),protected float,Decodes and returns a float value representing the actual pixel location for the given encoded y value.,"

decodeY
protected final float decodeY(float y)
Decodes and returns a float value representing the actual pixel location for
 the given encoded y value.

Parameters:
y - an encoded y value (0...1, or 1...2, or 2...3)
Returns:
the decoded y value
Throws:
IllegalArgumentException - if y < 0 or y > 3


"
AbstractRegionPainter,"doPaint(Graphics2D g, JComponent c, int width, int height, Object[] extendedCacheKeys)",protected abstract void,Actually performs the painting operation.,"

doPaint
protected abstract void doPaint(Graphics2D g,
                                JComponent c,
                                int width,
                                int height,
                                Object[] extendedCacheKeys)
Actually performs the painting operation. Subclasses must implement this method.
 The graphics object passed may represent the actual surface being rendered to,
 or it may be an intermediate buffer. It has also been pre-translated. Simply render
 the component as if it were located at 0, 0 and had a width of width
 and a height of height. For performance reasons, you may want to read
 the clip from the Graphics2D object and only render within that space.

Parameters:
g - The Graphics2D surface to paint to
c - The JComponent related to the drawing event. For example, if the
          region being rendered is Button, then c will be a
          JButton. If the region being drawn is ScrollBarSlider, then the
          component will be JScrollBar. This value may be null.
width - The width of the region to paint. Note that in the case of
              painting the foreground, this value may differ from c.getWidth().
height - The height of the region to paint. Note that in the case of
               painting the foreground, this value may differ from c.getHeight().
extendedCacheKeys - The result of the call to getExtendedCacheKeys()


"
AbstractRegionPainter,"getComponentColor(JComponent c, String property, Color defaultColor, float saturationOffset, float brightnessOffset, int alphaOffset)",protected Color,Get a color property from the given JComponent.,"

getComponentColor
protected final Color getComponentColor(JComponent c,
                                        String property,
                                        Color defaultColor,
                                        float saturationOffset,
                                        float brightnessOffset,
                                        int alphaOffset)
Get a color property from the given JComponent. First checks for a
 getXXX() method and if that fails checks for a client
 property with key property. If that still fails to return
 a Color then defaultColor is returned.

Parameters:
c - The component to get the color property from
property - The name of a bean style property or client property
defaultColor - The color to return if no color was obtained from
        the component.
Returns:
The color that was obtained from the component or defaultColor


"
AbstractRegionPainter,getExtendedCacheKeys(JComponent c),protected Object[],Get any extra attributes which the painter implementation would like to include in the image cache lookups.,"

getExtendedCacheKeys
protected Object[] getExtendedCacheKeys(JComponent c)
Get any extra attributes which the painter implementation would like
 to include in the image cache lookups. This is checked for every call
 of the paint(g, c, w, h) method.

Parameters:
c - The component on the current paint call
Returns:
Array of extra objects to be included in the cache key


"
AbstractRegionPainter,getPaintContext(),protected abstract AbstractRegionPainter.PaintContext,Gets the PaintContext for this painting operation.,"

getPaintContext
protected abstract AbstractRegionPainter.PaintContext getPaintContext()
Gets the PaintContext for this painting operation. This method is called on every
 paint, and so should be fast and produce no garbage. The PaintContext contains
 information such as cache hints. It also contains data necessary for decoding
 points at runtime, such as the stretching insets, the canvas size at which the
 encoded points were defined, and whether the stretching insets are inverted.
 This method allows for subclasses to package the painting of different states
 with possibly different canvas sizes, etc, into one AbstractRegionPainter implementation.

Returns:
a PaintContext associated with this paint operation.


"
AbstractRegionPainter,"paint(Graphics2D g, JComponent c, int w, int h)",void,Renders to the given Graphics2D object.,"

paint
public final void paint(Graphics2D g,
                        JComponent c,
                        int w,
                        int h)
Renders to the given Graphics2D object. Implementations
 of this method may modify state on the Graphics2D, and are not
 required to restore that state upon completion. In most cases, it is recommended
 that the caller pass in a scratch graphics object. The Graphics2D
 must never be null.
State on the graphics object may be honored by the paint method,
 but may not be. For instance, setting the antialiasing rendering hint on the
 graphics may or may not be respected by the Painter implementation.
The supplied object parameter acts as an optional configuration argument.
 For example, it could be of type Component. A Painter
 that expected it could then read state from that Component and
 use the state for painting. For example, an implementation may read the
 backgroundColor and use that.
Generally, to enhance reusability, most standard Painters ignore
 this parameter. They can thus be reused in any context. The object
 may be null. Implementations must not throw a NullPointerException if the object
 parameter is null.
Finally, the width and height arguments specify the
 width and height that the Painter should paint into. More
 specifically, the specified width and height instruct the painter that it should
 paint fully within this width and height. Any specified clip on the
 g param will further constrain the region.
For example, suppose I have a Painter implementation that draws
 a gradient. The gradient goes from white to black. It ""stretches"" to fill the
 painted region. Thus, if I use this Painter to paint a 500 x 500
 region, the far left would be black, the far right would be white, and a smooth
 gradient would be painted between. I could then, without modification, reuse the
 Painter to paint a region that is 20x20 in size. This region would
 also be black on the left, white on the right, and a smooth gradient painted
 between.

Specified by:
paint in interface Painter<JComponent>
Parameters:
g - The Graphics2D to render to. This must not be null.
c - an optional configuration parameter. This may be null.
w - width of the area to paint.
h - height of the area to paint.


"
NimbusLookAndFeel,getDefaults(),UIDefaults,Returns the defaults for this SynthLookAndFeel.,"

getDefaults
public UIDefaults getDefaults()
Returns the defaults for this SynthLookAndFeel.

Overrides:
getDefaults in class SynthLookAndFeel
Returns:
Defaults table.
See Also:
BasicLookAndFeel.initClassDefaults(javax.swing.UIDefaults), 
BasicLookAndFeel.initSystemColorDefaults(javax.swing.UIDefaults), 
BasicLookAndFeel.initComponentDefaults(javax.swing.UIDefaults)


"
NimbusLookAndFeel,"getDerivedColor(Color color1, Color color2, float midPoint)",protected Color,"Decodes and returns a color, which is derived from a offset between two other colors.","

getDerivedColor
protected final Color getDerivedColor(Color color1,
                                      Color color2,
                                      float midPoint)
Decodes and returns a color, which is derived from a offset between two
 other colors.

Parameters:
color1 - The first color
color2 - The second color
midPoint - The offset between color 1 and color 2, a value of 0.0 is
                 color 1 and 1.0 is color 2;
Returns:
The derived color, which will be a UIResource


"
NimbusLookAndFeel,"getDerivedColor(Color color1, Color color2, float midPoint, boolean uiResource)",protected Color,"Decodes and returns a color, which is derived from an offset between two other colors.","

getDerivedColor
protected final Color getDerivedColor(Color color1,
                                      Color color2,
                                      float midPoint,
                                      boolean uiResource)
Decodes and returns a color, which is derived from an offset between two
 other colors.

Parameters:
color1 - The first color
color2 - The second color
midPoint - The offset between color 1 and color 2, a value of 0.0 is
                 color 1 and 1.0 is color 2;
uiResource - True if the derived color should be a UIResource
Returns:
The derived color


"
NimbusLookAndFeel,"getDerivedColor(String uiDefaultParentName, float hOffset, float sOffset, float bOffset, int aOffset, boolean uiResource)",Color,"Get a derived color, derived colors are shared instances and is color value will change when its parent UIDefault color changes.","

getDerivedColor
public Color getDerivedColor(String uiDefaultParentName,
                             float hOffset,
                             float sOffset,
                             float bOffset,
                             int aOffset,
                             boolean uiResource)
Get a derived color, derived colors are shared instances and is color
 value will change when its parent UIDefault color changes.

Parameters:
uiDefaultParentName - The parent UIDefault key
hOffset - The hue offset
sOffset - The saturation offset
bOffset - The brightness offset
aOffset - The alpha offset
uiResource - True if the derived color should be a
                            UIResource, false if it should not be
Returns:
The stored derived color


"
NimbusLookAndFeel,getDescription(),String,Returns a textual description of this look and feel.,"

getDescription
public String getDescription()
Returns a textual description of this look and feel.

Overrides:
getDescription in class SynthLookAndFeel
Returns:
textual description of this look and feel.


"
NimbusLookAndFeel,"getDisabledIcon(JComponent component, Icon icon)",Icon,Returns an Icon with a disabled appearance.,"

getDisabledIcon
public Icon getDisabledIcon(JComponent component,
                            Icon icon)
Description copied from class: LookAndFeel
Returns an Icon with a disabled appearance.
 This method is used to generate a disabled Icon when
 one has not been specified.  For example, if you create a
 JButton and only specify an Icon via
 setIcon this method will be called to generate the
 disabled Icon. If null is passed as
 icon this method returns null.
 
 Some look and feels might not render the disabled Icon, in which
 case they will ignore this.

Overrides:
getDisabledIcon in class LookAndFeel
Parameters:
component - JComponent that will display the Icon,
         may be null
icon - Icon to generate the disabled icon from
Returns:
disabled Icon, or null if a suitable
         Icon can not be generated


"
NimbusLookAndFeel,getID(),String,Return a string that identifies this look and feel.,"

getID
public String getID()
Return a string that identifies this look and feel. This String will
 be the unquoted String ""Nimbus"".

Overrides:
getID in class SynthLookAndFeel
Returns:
a short string identifying this look and feel.


"
NimbusLookAndFeel,getName(),String,Return a short string that identifies this look and feel.,"

getName
public String getName()
Return a short string that identifies this look and feel. This
 String will be the unquoted String ""Nimbus"".

Overrides:
getName in class SynthLookAndFeel
Returns:
a short string identifying this look and feel.


"
NimbusLookAndFeel,"getStyle(JComponent c, Region r)",static NimbusStyle,Gets the style associated with the given component and region.,"

getStyle
public static NimbusStyle getStyle(JComponent c,
                                   Region r)
Gets the style associated with the given component and region. This
 will never return null. If an appropriate component and region cannot
 be determined, then a default style is returned.

Parameters:
c - a non-null reference to a JComponent
r - a non-null reference to the region of the component c
Returns:
a non-null reference to a NimbusStyle.


"
NimbusLookAndFeel,initialize(),void,Called by UIManager when this look and feel is installed.,"

initialize
public void initialize()
Called by UIManager when this look and feel is installed.

Overrides:
initialize in class SynthLookAndFeel
See Also:
LookAndFeel.uninitialize(), 
UIManager.setLookAndFeel(javax.swing.LookAndFeel)


"
NimbusLookAndFeel,"register(Region region, String prefix)",void,Registers a third party component with the NimbusLookAndFeel.,"

register
public void register(Region region,
                     String prefix)
Registers a third party component with the NimbusLookAndFeel.
Regions represent Components and areas within Components that act as
 independent painting areas. Once registered with the NimbusLookAndFeel,
 NimbusStyles for these Regions can be retrieved via the
 getStyle method.
The NimbusLookAndFeel uses a standard naming scheme for entries in the
 UIDefaults table. The key for each property, state, painter, and other
 default registered in UIDefaults for a specific Region will begin with
 the specified prefix
For example, suppose I had a component named JFoo. Suppose I then registered
 this component with the NimbusLookAndFeel in this manner:

     laf.register(NimbusFooUI.FOO_REGION, ""Foo"");
 
In this case, I could then register properties for this component with
 UIDefaults in the following manner:

     UIManager.put(""Foo.background"", new ColorUIResource(Color.BLACK));
     UIManager.put(""Foo.Enabled.backgroundPainter"", new FooBackgroundPainter());
 
It is also possible to register a named component with Nimbus.
 For example, suppose you wanted to style the background of a JPanel
 named ""MyPanel"" differently from other JPanels. You could accomplish this
 by doing the following:

     laf.register(Region.PANEL, ""\""MyPanel\"""");
     UIManager.put(""\""MyPanel\"".background"", new ColorUIResource(Color.RED));
 

Parameters:
region - The Synth Region that is being registered. Such as Button, or
        ScrollBarThumb, or NimbusFooUI.FOO_REGION.
prefix - The UIDefault prefix. For example, could be ComboBox, or if
        a named components, ""MyComboBox"", or even something like
        ToolBar.""MyComboBox"".""ComboBox.arrowButton""


"
NimbusLookAndFeel,shouldUpdateStyleOnAncestorChanged(),boolean,Returns whether or not the UIs should update their SynthStyles from the SynthStyleFactory when the ancestor of the JComponent changes.,"

shouldUpdateStyleOnAncestorChanged
public boolean shouldUpdateStyleOnAncestorChanged()
Returns whether or not the UIs should update their
 SynthStyles from the SynthStyleFactory
 when the ancestor of the JComponent changes. A subclass
 that provided a SynthStyleFactory that based the
 return value from getStyle off the containment hierarchy
 would override this method to return true.

Overrides:
shouldUpdateStyleOnAncestorChanged in class SynthLookAndFeel
Returns:
true


"
NimbusLookAndFeel,shouldUpdateStyleOnEvent(PropertyChangeEvent ev),protected boolean,Returns whether or not the UIs should update their styles when a particular event occurs.,"

shouldUpdateStyleOnEvent
protected boolean shouldUpdateStyleOnEvent(PropertyChangeEvent ev)
Returns whether or not the UIs should update their styles when a
 particular event occurs.

 Overridden to return true when one of the following
 properties change:
 
""Nimbus.Overrides""
""Nimbus.Overrides.InheritDefaults""
""JComponent.sizeVariant""


Overrides:
shouldUpdateStyleOnEvent in class SynthLookAndFeel
Parameters:
ev - a PropertyChangeEvent
Returns:
whether or not the UIs should update their styles
Since:
1.7


"
NimbusLookAndFeel,uninitialize(),void,Called by UIManager when this look and feel is uninstalled.,"

uninitialize
public void uninitialize()
Called by UIManager when this look and feel is uninstalled.

Overrides:
uninitialize in class SynthLookAndFeel
See Also:
LookAndFeel.initialize(), 
UIManager.setLookAndFeel(javax.swing.LookAndFeel)


"
NimbusStyle,"get(SynthContext ctx, Object key)",Object,Getter for a region specific style property.,"

get
public Object get(SynthContext ctx,
                  Object key)
Getter for a region specific style property.

 Overridden to cause this style to populate itself with data from
 UIDefaults, if necessary.
Properties in UIDefaults may be specified in a chained manner. For
 example:
 
 background
 Button.opacity
 Button.Enabled.foreground
 Button.Enabled+Selected.background
 
In this example, suppose you were in the Enabled+Selected state and
 searched for ""foreground"". In this case, we first check for
 Button.Enabled+Selected.foreground, but no such color exists. We then
 fall back to the next valid state, in this case,
 Button.Enabled.foreground, and have a match. So we return it.
Again, if we were in the state Enabled and looked for ""background"", we
 wouldn't find it in Button.Enabled, or in Button, but would at the top
 level in UIManager. So we return that value.
One special note: the ""key"" passed to this method could be of the form
 ""background"" or ""Button.background"" where ""Button"" equals the prefix
 passed to the NimbusStyle constructor. In either case, it looks for
 ""background"".

Overrides:
get in class SynthStyle
Parameters:
ctx - 
key - must not be null
Returns:
Value of the named property


"
NimbusStyle,getBackgroundPainter(SynthContext ctx),Painter,"Gets the appropriate background Painter, if there is one, for the state specified in the given SynthContext.","

getBackgroundPainter
public Painter getBackgroundPainter(SynthContext ctx)
Gets the appropriate background Painter, if there is one, for the state
 specified in the given SynthContext. This method does appropriate
 fallback searching, as described in #get.

Parameters:
ctx - The SynthContext. Must not be null.
Returns:
The background painter associated for the given state, or null if
 none could be found.


"
NimbusStyle,getBorderPainter(SynthContext ctx),Painter,"Gets the appropriate border Painter, if there is one, for the state specified in the given SynthContext.","

getBorderPainter
public Painter getBorderPainter(SynthContext ctx)
Gets the appropriate border Painter, if there is one, for the state
 specified in the given SynthContext. This method does appropriate
 fallback searching, as described in #get.

Parameters:
ctx - The SynthContext. Must not be null.
Returns:
The border painter associated for the given state, or null if
 none could be found.


"
NimbusStyle,"getColorForState(SynthContext ctx, ColorType type)",protected Color,Returns the color for the specified state.,"

getColorForState
protected Color getColorForState(SynthContext ctx,
                                 ColorType type)
Returns the color for the specified state. This should NOT call any
 methods on the JComponent.

 Overridden to cause this style to populate itself with data from
 UIDefaults, if necessary.
In addition, NimbusStyle handles ColorTypes slightly differently from
 Synth.

ColorType.BACKGROUND will equate to the color stored in UIDefaults
      named ""background"".
ColorType.TEXT_BACKGROUND will equate to the color stored in
      UIDefaults named ""textBackground"".
ColorType.FOREGROUND will equate to the color stored in UIDefaults
      named ""textForeground"".
ColorType.TEXT_FOREGROUND will equate to the color stored in
      UIDefaults named ""textForeground"".


Specified by:
getColorForState in class SynthStyle
Parameters:
ctx - SynthContext identifying requester
type - Type of color being requested.
Returns:
Color to render with


"
NimbusStyle,getFontForState(SynthContext ctx),protected Font,Returns the font for the specified state.,"

getFontForState
protected Font getFontForState(SynthContext ctx)
Returns the font for the specified state. This should NOT call any
 method on the JComponent.

 Overridden to cause this style to populate itself with data from
 UIDefaults, if necessary. If a value named ""font"" is not found in
 UIDefaults, then the ""defaultFont"" font in UIDefaults will be returned
 instead.

Specified by:
getFontForState in class SynthStyle
Parameters:
ctx - SynthContext identifying requester
Returns:
Font to render with


"
NimbusStyle,getForegroundPainter(SynthContext ctx),Painter,"Gets the appropriate foreground Painter, if there is one, for the state specified in the given SynthContext.","

getForegroundPainter
public Painter getForegroundPainter(SynthContext ctx)
Gets the appropriate foreground Painter, if there is one, for the state
 specified in the given SynthContext. This method does appropriate
 fallback searching, as described in #get.

Parameters:
ctx - The SynthContext. Must not be null.
Returns:
The foreground painter associated for the given state, or null if
 none could be found.


"
NimbusStyle,"getInsets(SynthContext ctx, Insets in)",Insets,Returns the Insets that are used to calculate sizing information.,"

getInsets
public Insets getInsets(SynthContext ctx,
                        Insets in)
Returns the Insets that are used to calculate sizing information.

 Overridden to cause this style to populate itself with data from
 UIDefaults, if necessary.

Overrides:
getInsets in class SynthStyle
Parameters:
ctx - SynthContext identifying requester
in - Insets to place return value in.
Returns:
Sizing Insets.


"
NimbusStyle,getPainter(SynthContext ctx),SynthPainter,Returns the SynthPainter that will be used for painting.,"

getPainter
public SynthPainter getPainter(SynthContext ctx)
Returns the SynthPainter that will be used for painting.
 This may return null.

 Returns the SynthPainter for this style, which ends up delegating to
 the Painters installed in this style.

Overrides:
getPainter in class SynthStyle
Parameters:
ctx - SynthContext identifying requester
Returns:
SynthPainter to use


"
NimbusStyle,installDefaults(SynthContext ctx),void,Installs the necessary state from this Style on the JComponent from context.,"

installDefaults
public void installDefaults(SynthContext ctx)
Installs the necessary state from this Style on the
 JComponent from context.

 Overridden to cause this style to populate itself with data from
 UIDefaults, if necessary.

Overrides:
installDefaults in class SynthStyle
Parameters:
ctx - SynthContext identifying component to install properties
        to.


"
NimbusStyle,isOpaque(SynthContext ctx),boolean,Returns true if the region is opaque.,"

isOpaque
public boolean isOpaque(SynthContext ctx)
Returns true if the region is opaque.

 Overridden to cause this style to populate itself with data from
 UIDefaults, if necessary. If opacity is not specified in UI defaults,
 then it defaults to being non-opaque.

Overrides:
isOpaque in class SynthStyle
Parameters:
ctx - SynthContext identifying requester
Returns:
true if region is opaque.


"
State,isInState(T c),protected abstract boolean,Gets whether the specified JComponent is in the custom state represented by this class.,"

isInState
protected abstract boolean isInState(T c)
Gets whether the specified JComponent is in the custom state represented
 by this class. This is an extremely performance sensitive loop.
 Please take proper precautions to ensure that it executes quickly.
Nimbus uses this method to help determine what state a JComponent is
 in. For example, a custom State could exist for JProgressBar such that
 it would return true when the progress bar is indeterminate.
 Such an implementation of this method would simply be:
 return c.isIndeterminate();

Parameters:
c - the JComponent to test. This will never be null.
Returns:
true if c is in the custom state represented by
         this State instance


"
State,toString(),String,Returns a string representation of the object.,"

toString
public String toString()
Description copied from class: Object
Returns a string representation of the object. In general, the
 toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method.
 
 The toString method for class Object
 returns a string consisting of the name of the class of which the
 object is an instance, the at-sign character `@', and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words, this method returns a string equal to the
 value of:
 

 getClass().getName() + '@' + Integer.toHexString(hashCode())
 

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
