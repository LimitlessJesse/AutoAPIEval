Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,Authenticator,1,Authenticator getDefault(),False,,NULL
0,Authenticator,2,void setDefault(Authenticator a),True,Sets the authenticator that will be used by the networking code when a proxy or an HTTP server asks for authentication.,"

setDefault
public static void setDefault(Authenticator a)
Sets the authenticator that will be used by the networking code
 when a proxy or an HTTP server asks for authentication.
 
 First, if there is a security manager, its checkPermission
 method is called with a
 NetPermission(""setDefaultAuthenticator"") permission.
 This may result in a java.lang.SecurityException.

Parameters:
a - The authenticator to be set. If a is null then
                  any previously set authenticator is removed.
Throws:
SecurityException - if a security manager exists and its
        checkPermission method doesn't allow
        setting the default authenticator.
See Also:
SecurityManager.checkPermission(java.security.Permission), 
NetPermission


"
0,Authenticator,3,PasswordAuthentication getPasswordAuthentication(),True,Called when password authorization is needed.,"

getPasswordAuthentication
protected PasswordAuthentication getPasswordAuthentication()
Called when password authorization is needed.  Subclasses should
 override the default implementation, which returns null.

Returns:
The PasswordAuthentication collected from the
          user, or null if none is provided.


"
0,Authenticator,4,"void requestPasswordAuthentication(final String host, final String prompt, final String defaultUserName, final String loginService, final String protocol, final String serverName, final int serverPort, final String realm, final String scheme, final String url, final String requestingApp, final String callbackClass)",False,,NULL
0,Authenticator,5,"void requestPasswordAuthenticationUsingDialog(final String host, final String prompt, final String defaultUserName, final String loginService, final String protocol, final String serverName, final int serverPort, final String realm, final String scheme, final String url, final String requestingApp, final String callbackClass)",False,,NULL
1,CacheRequest,1,boolean add(E e),False,,NULL
1,CacheRequest,2,boolean addAll(Collection<? extends E> c),False,,NULL
1,CacheRequest,3,void clear(),False,,NULL
1,CacheRequest,4,boolean contains(Object o),False,,NULL
1,CacheRequest,5,boolean containsAll(Collection<?> c),False,,NULL
2,CacheResponse,1,CacheResponse getResponse(),False,,NULL
2,CacheResponse,2,long getCreationTime(),False,,NULL
2,CacheResponse,3,long getLastModified(),False,,NULL
2,CacheResponse,4,long getExpirationTime(),False,,NULL
2,CacheResponse,5,boolean isExpired(),False,,NULL
3,ContentHandler,1,Object getContent(URLConnection urlc) throws IOException,True,"Given a URL connect stream positioned at the beginning of the representation of an object, this method reads that stream and creates an object from it.","

getContent
public abstract Object getContent(URLConnection urlc)
                           throws IOException
Given a URL connect stream positioned at the beginning of the
 representation of an object, this method reads that stream and
 creates an object from it.

Parameters:
urlc - a URL connection.
Returns:
the object read by the ContentHandler.
Throws:
IOException - if an I/O error occurs while reading the object.


"
3,ContentHandler,2,"Object getContent(URLConnection urlc, Class[] classes) throws IOException",True,"Given a URL connect stream positioned at the beginning of the representation of an object, this method reads that stream and creates an object that matches one of the types specified.","

getContent
public Object getContent(URLConnection urlc,
                         Class[] classes)
                  throws IOException
Given a URL connect stream positioned at the beginning of the
 representation of an object, this method reads that stream and
 creates an object that matches one of the types specified.

 The default implementation of this method should call getContent()
 and screen the return type for a match of the suggested types.

Parameters:
urlc - a URL connection.
classes - an array of types requested
Returns:
the object read by the ContentHandler that is
                 the first match of the suggested types.
                 null if none of the requested  are supported.
Throws:
IOException - if an I/O error occurs while reading the object.
Since:
1.3


"
3,ContentHandler,3,"Object getContent(URLConnection urlc, Class[] classes, Object handlers) throws IOException",False,,NULL
3,ContentHandler,4,"Object getContent(URLConnection urlc, Class[] classes, Object handlers, int depth) throws IOException",False,,NULL
3,ContentHandler,5,"Object getContent(URLConnection urlc, Class[] classes, Object handlers, int depth, URLStreamHandlerFactory context) throws IOException",False,,NULL
4,CookieHandler,1,CookieHandler getDefault(),True,Gets the system-wide cookie handler.,"

getDefault
public static CookieHandler getDefault()
Gets the system-wide cookie handler.

Returns:
the system-wide cookie handler; A null return means
        there is no system-wide cookie handler currently set.
Throws:
SecurityException - If a security manager has been installed and it denies
 NetPermission(""getCookieHandler"")
See Also:
setDefault(CookieHandler)


"
4,CookieHandler,2,void setDefault(CookieHandler newDefault),True,Sets (or unsets) the system-wide cookie handler.,"

setDefault
public static void setDefault(CookieHandler cHandler)
Sets (or unsets) the system-wide cookie handler.

 Note: non-standard http protocol handlers may ignore this setting.

Parameters:
cHandler - The HTTP cookie handler, or
       null to unset.
Throws:
SecurityException - If a security manager has been installed and it denies
 NetPermission(""setCookieHandler"")
See Also:
getDefault()


"
4,CookieHandler,3,List<URI> getURIs(),False,,NULL
4,CookieHandler,4,"Map<String, List<String>> get(URI uri, Map<String, List<String>> requestHeaders)",False,,NULL
4,CookieHandler,5,"void put(URI uri, Map<String, List<String>> responseHeaders)",True,"Sets all the applicable cookies, examples are response header fields that are named Set-Cookie2, present in the response headers into a cookie cache.","

put
public abstract void put(URI uri,
                         Map<String,List<String>> responseHeaders)
                  throws IOException
Sets all the applicable cookies, examples are response header
 fields that are named Set-Cookie2, present in the response
 headers into a cookie cache.

Parameters:
uri - a URI where the cookies come from
responseHeaders - an immutable map from field names to
            lists of field values representing the response
            header fields returned
Throws:
IOException - if an I/O error occurs
IllegalArgumentException - if either argument is null
See Also:
get(URI, Map)


"
5,CookieManager,1,CookieManager(),False,,NULL
5,CookieManager,2,void setCookiePolicy(CookiePolicy cookiePolicy),True,To set the cookie policy of this cookie manager.,"

setCookiePolicy
public void setCookiePolicy(CookiePolicy cookiePolicy)
To set the cookie policy of this cookie manager.

  A instance of CookieManager will have
 cookie policy ACCEPT_ORIGINAL_SERVER by default. Users always
 can call this method to set another cookie policy.

Parameters:
cookiePolicy - the cookie policy. Can be null, which
                          has no effects on current cookie policy.


"
5,CookieManager,3,CookiePolicy getCookiePolicy(),False,,NULL
5,CookieManager,4,"Map<String, List<String>> get(URI uri, Map<String, List<String>> requestHeaders)",False,,NULL
5,CookieManager,5,"Map<String, List<String>> put(URI uri, Map<String, List<String>> responseHeaders)",False,,NULL
6,DatagramPacket,1,"DatagramPacket(byte buf[], int length)",False,,NULL
6,DatagramPacket,2,"DatagramPacket(byte buf[], int offset, int length)",False,,NULL
6,DatagramPacket,3,byte[] getData(),True,Returns the data buffer.,"

getData
public byte[] getData()
Returns the data buffer. The data received or the data to be sent
 starts from the offset in the buffer,
 and runs for length long.

Returns:
the buffer used to receive or  send data
See Also:
setData(byte[], int, int)


"
6,DatagramPacket,4,int getLength(),True,Returns the length of the data to be sent or the length of the data received.,"

getLength
public int getLength()
Returns the length of the data to be sent or the length of the
 data received.

Returns:
the length of the data to be sent or the length of the
          data received.
See Also:
setLength(int)


"
6,DatagramPacket,5,InetAddress getAddress(),True,Returns the IP address of the machine to which this datagram is being sent or from which the datagram was received.,"

getAddress
public InetAddress getAddress()
Returns the IP address of the machine to which this datagram is being
 sent or from which the datagram was received.

Returns:
the IP address of the machine to which this datagram is being
          sent or from which the datagram was received.
See Also:
InetAddress, 
setAddress(java.net.InetAddress)


"
6,DatagramPacket,6,int getPort(),True,Returns the port number on the remote host to which this datagram is being sent or from which the datagram was received.,"

getPort
public int getPort()
Returns the port number on the remote host to which this datagram is
 being sent or from which the datagram was received.

Returns:
the port number on the remote host to which this datagram is
          being sent or from which the datagram was received.
See Also:
setPort(int)


"
6,DatagramPacket,7,void setData(byte buf[]),False,,NULL
6,DatagramPacket,8,"void setData(byte buf[], int offset, int length)",False,,NULL
6,DatagramPacket,9,void setAddress(InetAddress address),True,Sets the IP address of the machine to which this datagram is being sent.,"

setAddress
public void setAddress(InetAddress iaddr)
Sets the IP address of the machine to which this datagram
 is being sent.

Parameters:
iaddr - the InetAddress
Since:
JDK1.1
See Also:
getAddress()


"
6,DatagramPacket,10,void setPort(int port),True,Sets the port number on the remote host to which this datagram is being sent.,"

setPort
public void setPort(int iport)
Sets the port number on the remote host to which this datagram
 is being sent.

Parameters:
iport - the port number
Since:
JDK1.1
See Also:
getPort()


"
6,DatagramPacket,11,void setLength(int length),True,Set the length for this packet.,"

setLength
public void setLength(int length)
Set the length for this packet. The length of the packet is
 the number of bytes from the packet's data buffer that will be
 sent, or the number of bytes of the packet's data buffer that
 will be used for receiving data. The length must be lesser or
 equal to the offset plus the length of the packet's buffer.

Parameters:
length - the length to set for this packet.
Throws:
IllegalArgumentException - if the length is negative
 of if the length is greater than the packet's data buffer
 length.
Since:
JDK1.1
See Also:
getLength(), 
setData(byte[], int, int)


"
7,DatagramSocket,1,DatagramSocket(),False,,NULL
7,DatagramSocket,2,DatagramSocket(int port),False,,NULL
7,DatagramSocket,3,"DatagramSocket(int port, InetAddress address)",False,,NULL
7,DatagramSocket,4,DatagramSocket(SocketAddress address),False,,NULL
7,DatagramSocket,5,void close(),True,Closes this datagram socket.,"

close
public void close()
Closes this datagram socket.
 
 Any thread currently blocked in receive(java.net.DatagramPacket) upon this socket
 will throw a SocketException.

  If this socket has an associated channel then the channel is closed
 as well.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable


"
7,DatagramSocket,6,InetAddress getInetAddress(),True,Returns the address to which this socket is connected.,"

getInetAddress
public InetAddress getInetAddress()
Returns the address to which this socket is connected. Returns
 null if the socket is not connected.
 
 If the socket was connected prior to being closed,
 then this method will continue to return the connected address
 after the socket is closed.

Returns:
the address to which this socket is connected.


"
7,DatagramSocket,7,int getPort(),True,Returns the port number to which this socket is connected.,"

getPort
public int getPort()
Returns the port number to which this socket is connected.
 Returns -1 if the socket is not connected.
 
 If the socket was connected prior to being closed,
 then this method will continue to return the connected port number
 after the socket is closed.

Returns:
the port number to which this socket is connected.


"
7,DatagramSocket,8,int getLocalPort(),True,Returns the port number on the local host to which this socket is bound.,"

getLocalPort
public int getLocalPort()
Returns the port number on the local host to which this socket
 is bound.

Returns:
the port number on the local host to which this socket is bound,
                -1 if the socket is closed, or
                0 if it is not bound yet.


"
7,DatagramSocket,9,void send(DatagramPacket p),True,Sends a datagram packet from this socket.,"

send
public void send(DatagramPacket p)
          throws IOException
Sends a datagram packet from this socket. The
 DatagramPacket includes information indicating the
 data to be sent, its length, the IP address of the remote host,
 and the port number on the remote host.

 If there is a security manager, and the socket is not currently
 connected to a remote address, this method first performs some
 security checks. First, if p.getAddress().isMulticastAddress()
 is true, this method calls the
 security manager's checkMulticast method
 with p.getAddress() as its argument.
 If the evaluation of that expression is false,
 this method instead calls the security manager's
 checkConnect method with arguments
 p.getAddress().getHostAddress() and
 p.getPort(). Each call to a security manager method
 could result in a SecurityException if the operation is not allowed.

Parameters:
p - the DatagramPacket to be sent.
Throws:
IOException - if an I/O error occurs.
SecurityException - if a security manager exists and its
             checkMulticast or checkConnect
             method doesn't allow the send.
PortUnreachableException - may be thrown if the socket is connected
             to a currently unreachable destination. Note, there is no
             guarantee that the exception will be thrown.
IllegalBlockingModeException - if this socket has an associated channel,
             and the channel is in non-blocking mode.
IllegalArgumentException - if the socket is connected,
             and connected address and packet address differ.
See Also:
DatagramPacket, 
SecurityManager.checkMulticast(InetAddress), 
SecurityManager.checkConnect(java.lang.String, int)


"
7,DatagramSocket,10,void receive(DatagramPacket p),True,Receives a datagram packet from this socket.,"

receive
public void receive(DatagramPacket p)
             throws IOException
Receives a datagram packet from this socket. When this method
 returns, the DatagramPacket's buffer is filled with
 the data received. The datagram packet also contains the sender's
 IP address, and the port number on the sender's machine.
 
 This method blocks until a datagram is received. The
 length field of the datagram packet object contains
 the length of the received message. If the message is longer than
 the packet's length, the message is truncated.
 
 If there is a security manager, a packet cannot be received if the
 security manager's checkAccept method
 does not allow it.

Parameters:
p - the DatagramPacket into which to place
                 the incoming data.
Throws:
IOException - if an I/O error occurs.
SocketTimeoutException - if setSoTimeout was previously called
                 and the timeout has expired.
PortUnreachableException - may be thrown if the socket is connected
             to a currently unreachable destination. Note, there is no guarantee that the
             exception will be thrown.
IllegalBlockingModeException - if this socket has an associated channel,
             and the channel is in non-blocking mode.
See Also:
DatagramPacket, 
DatagramSocket


"
7,DatagramSocket,11,void connect(SocketAddress address),True,Connects this socket to a remote socket address (IP address + port number).,"

connect
public void connect(SocketAddress addr)
             throws SocketException
Connects this socket to a remote socket address (IP address + port number).

  If given an InetSocketAddress, this method
 behaves as if invoking connect(InetAddress,int)
 with the the given socket addresses IP address and port number.

Parameters:
addr - The remote address.
Throws:
SocketException - if the connect fails
IllegalArgumentException - if addr is null, or addr is a SocketAddress
         subclass not supported by this socket
SecurityException - if a security manager has been installed and it does
         not permit access to the given remote address
Since:
1.4


"
7,DatagramSocket,12,"void connect(InetAddress address, int port)",True,Connects the socket to a remote address for this socket.,"

connect
public void connect(InetAddress address,
                    int port)
Connects the socket to a remote address for this socket. When a
 socket is connected to a remote address, packets may only be
 sent to or received from that address. By default a datagram
 socket is not connected.

 If the remote destination to which the socket is connected does not
 exist, or is otherwise unreachable, and if an ICMP destination unreachable
 packet has been received for that address, then a subsequent call to
 send or receive may throw a PortUnreachableException. Note, there is no
 guarantee that the exception will be thrown.

  If a security manager has been installed then it is invoked to check
 access to the remote address. Specifically, if the given address
 is a multicast address,
 the security manager's checkMulticast method is invoked with the given address.
 Otherwise, the security manager's checkConnect
 and checkAccept methods
 are invoked, with the given address and port, to
 verify that datagrams are permitted to be sent and received
 respectively.

  When a socket is connected, receive and
 send will not perform any security checks
 on incoming and outgoing packets, other than matching the packet's
 and the socket's address and port. On a send operation, if the
 packet's address is set and the packet's address and the socket's
 address do not match, an IllegalArgumentException will be
 thrown. A socket connected to a multicast address may only be used
 to send packets.

Parameters:
address - the remote address for the socket
port - the remote port for the socket.
Throws:
IllegalArgumentException - if the address is null, or the port is out of range.
SecurityException - if a security manager has been installed and it does
         not permit access to the given remote address
See Also:
disconnect()


"
7,DatagramSocket,13,void disconnect(),True,Disconnects the socket.,"

disconnect
public void disconnect()
Disconnects the socket. If the socket is closed or not connected,
 then this method has no effect.

See Also:
connect(java.net.InetAddress, int)


"
7,DatagramSocket,14,boolean isConnected(),True,Returns the connection state of the socket.,"

isConnected
public boolean isConnected()
Returns the connection state of the socket.
 
 If the socket was connected prior to being closed,
 then this method will continue to return true
 after the socket is closed.

Returns:
true if the socket successfully connected to a server
Since:
1.4


"
7,DatagramSocket,15,void setSoTimeout(int timeout),True,"Enable/disable SO_TIMEOUT with the specified timeout, in milliseconds.","

setSoTimeout
public void setSoTimeout(int timeout)
                  throws SocketException
Enable/disable SO_TIMEOUT with the specified timeout, in
  milliseconds. With this option set to a non-zero timeout,
  a call to receive() for this DatagramSocket
  will block for only this amount of time.  If the timeout expires,
  a java.net.SocketTimeoutException is raised, though the
  DatagramSocket is still valid.  The option must be enabled
  prior to entering the blocking operation to have effect.  The
  timeout must be > 0.
  A timeout of zero is interpreted as an infinite timeout.

Parameters:
timeout - the specified timeout in milliseconds.
Throws:
SocketException - if there is an error in the underlying protocol, such as an UDP error.
Since:
JDK1.1
See Also:
getSoTimeout()


"
7,DatagramSocket,16,int getSoTimeout(),True,Retrieve setting for SO_TIMEOUT.,"

getSoTimeout
public int getSoTimeout()
                 throws SocketException
Retrieve setting for SO_TIMEOUT.  0 returns implies that the
 option is disabled (i.e., timeout of infinity).

Returns:
the setting for SO_TIMEOUT
Throws:
SocketException - if there is an error in the underlying protocol, such as an UDP error.
Since:
JDK1.1
See Also:
setSoTimeout(int)


"
7,DatagramSocket,17,void setReuseAddress(boolean on),True,Enable/disable the SO_REUSEADDR socket option.,"

setReuseAddress
public void setReuseAddress(boolean on)
                     throws SocketException
Enable/disable the SO_REUSEADDR socket option.
 
 For UDP sockets it may be necessary to bind more than one
 socket to the same socket address. This is typically for the
 purpose of receiving multicast packets
 (See MulticastSocket). The
 SO_REUSEADDR socket option allows multiple
 sockets to be bound to the same socket address if the
 SO_REUSEADDR socket option is enabled prior
 to binding the socket using bind(SocketAddress).
 
 Note: This functionality is not supported by all existing platforms,
 so it is implementation specific whether this option will be ignored
 or not. However, if it is not supported then
 getReuseAddress() will always return false.
 
 When a DatagramSocket is created the initial setting
 of SO_REUSEADDR is disabled.
 
 The behaviour when SO_REUSEADDR is enabled or
 disabled after a socket is bound (See isBound())
 is not defined.

Parameters:
on - whether to enable or disable the
Throws:
SocketException - if an error occurs enabling or
            disabling the SO_RESUEADDR socket option,
            or the socket is closed.
Since:
1.4
See Also:
getReuseAddress(), 
bind(SocketAddress), 
isBound(), 
isClosed()


"
7,DatagramSocket,18,boolean getReuseAddress(),True,Tests if SO_REUSEADDR is enabled.,"

getReuseAddress
public boolean getReuseAddress()
                        throws SocketException
Tests if SO_REUSEADDR is enabled.

Returns:
a boolean indicating whether or not SO_REUSEADDR is enabled.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as an UDP error.
Since:
1.4
See Also:
setReuseAddress(boolean)


"
7,DatagramSocket,19,void setBroadcast(boolean on),True,Enable/disable SO_BROADCAST.,"

setBroadcast
public void setBroadcast(boolean on)
                  throws SocketException
Enable/disable SO_BROADCAST.

  Some operating systems may require that the Java virtual machine be
 started with implementation specific privileges to enable this option or
 send broadcast datagrams.

Parameters:
on - whether or not to have broadcast turned on.
Throws:
SocketException - if there is an error in the underlying protocol, such as an UDP
          error.
Since:
1.4
See Also:
getBroadcast()


"
7,DatagramSocket,20,boolean getBroadcast(),True,Tests if SO_BROADCAST is enabled.,"

getBroadcast
public boolean getBroadcast()
                     throws SocketException
Tests if SO_BROADCAST is enabled.

Returns:
a boolean indicating whether or not SO_BROADCAST is enabled.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as an UDP error.
Since:
1.4
See Also:
setBroadcast(boolean)


"
7,DatagramSocket,21,void setTrafficClass(int tc),True,Sets traffic class or type-of-service octet in the IP datagram header for datagrams sent from this DatagramSocket.,"

setTrafficClass
public void setTrafficClass(int tc)
                     throws SocketException
Sets traffic class or type-of-service octet in the IP
 datagram header for datagrams sent from this DatagramSocket.
 As the underlying network implementation may ignore this
 value applications should consider it a hint.

  The tc must be in the range 0 <= tc <=
 255 or an IllegalArgumentException will be thrown.
 Notes:
 For Internet Protocol v4 the value consists of an
 integer, the least significant 8 bits of which
 represent the value of the TOS octet in IP packets sent by
 the socket.
 RFC 1349 defines the TOS values as follows:

 
IPTOS_LOWCOST (0x02)
IPTOS_RELIABILITY (0x04)
IPTOS_THROUGHPUT (0x08)
IPTOS_LOWDELAY (0x10)

 The last low order bit is always ignored as this
 corresponds to the MBZ (must be zero) bit.
 
 Setting bits in the precedence field may result in a
 SocketException indicating that the operation is not
 permitted.
 
 for Internet Protocol v6 tc is the value that
 would be placed into the sin6_flowinfo field of the IP header.

Parameters:
tc - an int value for the bitset.
Throws:
SocketException - if there is an error setting the
 traffic class or type-of-service
Since:
1.4
See Also:
getTrafficClass()


"
7,DatagramSocket,22,int getTrafficClass(),True,Gets traffic class or type-of-service in the IP datagram header for packets sent from this DatagramSocket.,"

getTrafficClass
public int getTrafficClass()
                    throws SocketException
Gets traffic class or type-of-service in the IP datagram
 header for packets sent from this DatagramSocket.
 
 As the underlying network implementation may ignore the
 traffic class or type-of-service set using setTrafficClass(int)
 this method may return a different value than was previously
 set using the setTrafficClass(int) method on this
 DatagramSocket.

Returns:
the traffic class or type-of-service already set
Throws:
SocketException - if there is an error obtaining the
 traffic class or type-of-service value.
Since:
1.4
See Also:
setTrafficClass(int)


"
7,DatagramSocket,23,void setLoopbackMode(boolean on),False,,NULL
7,DatagramSocket,24,boolean getLoopbackMode(),False,,NULL
7,DatagramSocket,25,void setMulticastLoopbackMode(boolean on),False,,NULL
7,DatagramSocket,26,boolean getMulticastLoopbackMode(),False,,NULL
7,DatagramSocket,27,void setMulticastTTL(int ttl),False,,NULL
7,DatagramSocket,28,int getMulticastTTL(),False,,NULL
7,DatagramSocket,29,void joinGroup(InetAddress mcastaddr),False,,NULL
7,DatagramSocket,30,void leaveGroup(InetAddress mcastaddr),False,,NULL
7,DatagramSocket,31,void setTimeToLive(int ttl),False,,NULL
7,DatagramSocket,32,int getTimeToLive(),False,,NULL
7,DatagramSocket,33,void setInterface(InetAddress ifaddr),False,,NULL
7,DatagramSocket,34,InetAddress getInterface(),False,,NULL
7,DatagramSocket,35,void setNetworkInterface(NetworkInterface netif),False,,NULL
7,DatagramSocket,36,NetworkInterface getNetworkInterface(),False,,NULL
7,DatagramSocket,37,void setMulticastInterface(NetworkInterface netif),False,,NULL
7,DatagramSocket,38,NetworkInterface getMulticastInterface(),False,,NULL
7,DatagramSocket,39,void setMulticastHops(int hops),False,,NULL
7,DatagramSocket,40,int getMulticastHops(),False,,NULL
7,DatagramSocket,41,void setMulticastIf(InetAddress ifaddr),False,,NULL
7,DatagramSocket,42,InetAddress getMulticastIf(),False,,NULL
7,DatagramSocket,43,void setMulticastLoopback(boolean on),False,,NULL
7,DatagramSocket,44,boolean getMulticastLoopback(),False,,NULL
7,DatagramSocket,45,void setMulticastTTL(int ttl),False,,NULL
7,DatagramSocket,46,int getMulticastTTL(),False,,NULL
7,DatagramSocket,47,void setMulticastHops(int hops),False,,NULL
7,DatagramSocket,48,int getMulticastHops(),False,,NULL
7,DatagramSocket,49,void setMulticastIf(InetAddress ifaddr),False,,NULL
7,DatagramSocket,50,InetAddress getMulticastIf(),False,,NULL
7,DatagramSocket,51,void setMulticastLoopback(boolean on),False,,NULL
7,DatagramSocket,52,boolean getMulticastLoopback(),False,,NULL
7,DatagramSocket,53,void setMulticastTTL(int ttl),False,,NULL
7,DatagramSocket,54,int getMulticastTTL(),False,,NULL
7,DatagramSocket,55,void setMulticastHops(int hops),False,,NULL
7,DatagramSocket,56,int getMulticastHops(),False,,NULL
8,DatagramSocketImpl,1,DatagramSocketImpl(),False,,NULL
8,DatagramSocketImpl,2,DatagramSocketImpl(int port),False,,NULL
8,DatagramSocketImpl,3,"DatagramSocketImpl(InetAddress address, int port)",False,,NULL
8,DatagramSocketImpl,4,"DatagramSocketImpl(InetAddress address, int port, int receiveBufferSize)",False,,NULL
8,DatagramSocketImpl,5,"DatagramSocketImpl(InetAddress address, int port, int receiveBufferSize, int sendBufferSize)",False,,NULL
9,HttpCookie,1,String getComment(),True,"Returns the comment describing the purpose of this cookie, or null if the cookie has no comment.","

getComment
public String getComment()
Returns the comment describing the purpose of this cookie, or
 null if the cookie has no comment.

Returns:
a String containing the comment, or null if none
See Also:
setComment(java.lang.String)


"
9,HttpCookie,2,String getDomain(),True,Returns the domain name set for this cookie.,"

getDomain
public String getDomain()
Returns the domain name set for this cookie. The form of the domain name
 is set by RFC 2965.

Returns:
a String containing the domain name
See Also:
setDomain(java.lang.String)


"
9,HttpCookie,3,Date getExpiryDate(),False,,NULL
9,HttpCookie,4,String getName(),True,Returns the name of the cookie.,"

getName
public String getName()
Returns the name of the cookie. The name cannot be changed after
 creation.

Returns:
a String specifying the cookie's name


"
9,HttpCookie,5,String getPath(),True,Returns the path on the server to which the browser returns this cookie.,"

getPath
public String getPath()
Returns the path on the server to which the browser returns this cookie.
 The cookie is visible to all subpaths on the server.

Returns:
a String specifying a path that contains a servlet name,
          for example, /catalog
See Also:
setPath(java.lang.String)


"
9,HttpCookie,6,int getVersion(),True,Returns the version of the protocol this cookie complies with.,"

getVersion
public int getVersion()
Returns the version of the protocol this cookie complies with. Version 1
 complies with RFC 2965/2109, and version 0 complies with the original
 cookie specification drafted by Netscape. Cookies provided by a browser
 use and identify the browser's cookie version.

Returns:
0 if the cookie complies with the original Netscape
          specification; 1 if the cookie complies with RFC 2965/2109
See Also:
setVersion(int)


"
9,HttpCookie,7,boolean getSecure(),True,"Returns true if sending this cookie should be restricted to a secure protocol, or false if the it can be sent using any protocol.","

getSecure
public boolean getSecure()
Returns true if sending this cookie should be restricted to a
 secure protocol, or false if the it can be sent using any
 protocol.

Returns:
false if the cookie can be sent over any standard
          protocol; otherwise, true
See Also:
setSecure(boolean)


"
9,HttpCookie,8,boolean getHttpOnly(),False,,NULL
9,HttpCookie,9,String getValue(),True,Returns the value of the cookie.,"

getValue
public String getValue()
Returns the value of the cookie.

Returns:
a String containing the cookie's present value
See Also:
setValue(java.lang.String)


"
9,HttpCookie,10,void setComment(String purpose),True,Specifies a comment that describes a cookie's purpose.,"

setComment
public void setComment(String purpose)
Specifies a comment that describes a cookie's purpose.
 The comment is useful if the browser presents the cookie
 to the user. Comments are not supported by Netscape Version 0 cookies.

Parameters:
purpose - a String specifying the comment to display to the user
See Also:
getComment()


"
9,HttpCookie,11,void setDomain(String pattern),True,Specifies the domain within which this cookie should be presented.,"

setDomain
public void setDomain(String pattern)
Specifies the domain within which this cookie should be presented.

  The form of the domain name is specified by RFC 2965. A domain
 name begins with a dot (.foo.com) and means that
 the cookie is visible to servers in a specified Domain Name System
 (DNS) zone (for example, www.foo.com, but not
 a.b.foo.com). By default, cookies are only returned
 to the server that sent them.

Parameters:
pattern - a String containing the domain name within which this
         cookie is visible; form is according to RFC 2965
See Also:
getDomain()


"
9,HttpCookie,12,void setExpiryDate(Date when),False,,NULL
9,HttpCookie,13,void setPath(String uri),True,Specifies a path for the cookie to which the client should return the cookie.,"

setPath
public void setPath(String uri)
Specifies a path for the cookie to which the client should return
 the cookie.

  The cookie is visible to all the pages in the directory
 you specify, and all the pages in that directory's subdirectories.
 A cookie's path must include the servlet that set the cookie,
 for example, /catalog, which makes the cookie
 visible to all directories on the server under /catalog.

  Consult RFC 2965 (available on the Internet) for more
 information on setting path names for cookies.

Parameters:
uri - a String specifying a path
See Also:
getPath()


"
9,HttpCookie,14,void setSecure(boolean flag),True,"Indicates whether the cookie should only be sent using a secure protocol, such as HTTPS or SSL.","

setSecure
public void setSecure(boolean flag)
Indicates whether the cookie should only be sent using a secure protocol,
 such as HTTPS or SSL.

  The default value is false.

Parameters:
flag - If true, the cookie can only be sent over a secure
         protocol like HTTPS. If false, it can be sent over
         any protocol.
See Also:
getSecure()


"
9,HttpCookie,15,void setHttpOnly(boolean httpOnly),True,Indicates whether the cookie should be considered HTTP Only.,"

setHttpOnly
public void setHttpOnly(boolean httpOnly)
Indicates whether the cookie should be considered HTTP Only. If set to
 true it means the cookie should not be accessible to scripting
 engines like javascript.

Parameters:
httpOnly - if true make the cookie HTTP only, i.e. only visible as
         part of an HTTP request.
See Also:
isHttpOnly()


"
9,HttpCookie,16,void setValue(String newValue),True,Assigns a new value to a cookie after the cookie is created.,"

setValue
public void setValue(String newValue)
Assigns a new value to a cookie after the cookie is created.
 If you use a binary value, you may want to use BASE64 encoding.

  With Version 0 cookies, values should not contain white space,
 brackets, parentheses, equals signs, commas, double quotes, slashes,
 question marks, at signs, colons, and semicolons. Empty values may not
 behave the same way on all browsers.

Parameters:
newValue - a String specifying the new value
See Also:
getValue()


"
9,HttpCookie,17,boolean contains(HttpCookie cookie),False,,NULL
9,HttpCookie,18,boolean contains(String name),False,,NULL
9,HttpCookie,19,"boolean contains(String name, String value)",False,,NULL
9,HttpCookie,20,"boolean contains(String name, String value, String domain)",False,,NULL
9,HttpCookie,21,"boolean contains(String name, String value, String domain, String path)",False,,NULL
9,HttpCookie,22,"boolean contains(String name, String value, String domain, String path, int version)",False,,NULL
9,HttpCookie,23,"boolean contains(String name, String value, String domain, String path, int version, boolean secure)",False,,NULL
9,HttpCookie,24,"boolean contains(String name, String value, String domain, String path, int version, boolean secure, boolean httpOnly)",False,,NULL
9,HttpCookie,25,"boolean contains(String name, String value, String domain, String path, int version, boolean secure, boolean httpOnly, Date when)",False,,NULL
10,HttpURLConnection,1,void disconnect(),True,Indicates that other requests to the server are unlikely in the near future.,"

disconnect
public abstract void disconnect()
Indicates that other requests to the server
 are unlikely in the near future. Calling disconnect()
 should not imply that this HttpURLConnection
 instance can be reused for other requests.

"
10,HttpURLConnection,2,void setRequestMethod(String method),True,"Set the method for the URL request, one of: GET POST HEAD OPTIONS PUT DELETE TRACE are legal, subject to protocol restrictions.","

setRequestMethod
public void setRequestMethod(String method)
                      throws ProtocolException
Set the method for the URL request, one of:
 
GET
  POST
  HEAD
  OPTIONS
  PUT
  DELETE
  TRACE
  are legal, subject to protocol restrictions.  The default
 method is GET.

Parameters:
method - the HTTP method
Throws:
ProtocolException - if the method cannot be reset or if
              the requested method isn't valid for HTTP.
SecurityException - if a security manager is set and the
              method is ""TRACE"", but the ""allowHttpTrace""
              NetPermission is not granted.
See Also:
getRequestMethod()


"
10,HttpURLConnection,3,"void setRequestProperty(String key, String value)",False,,NULL
10,HttpURLConnection,4,int getResponseCode(),True,Gets the status code from an HTTP response message.,"

getResponseCode
public int getResponseCode()
                    throws IOException
Gets the status code from an HTTP response message.
 For example, in the case of the following status lines:
 
 HTTP/1.0 200 OK
 HTTP/1.0 401 Unauthorized
 
 It will return 200 and 401 respectively.
 Returns -1 if no code can be discerned
 from the response (i.e., the response is not valid HTTP).

Returns:
the HTTP Status-Code, or -1
Throws:
IOException - if an error occurred connecting to the server.


"
10,HttpURLConnection,5,InputStream getInputStream(),False,,NULL
10,HttpURLConnection,6,InputStream getErrorStream(),True,Returns the error stream if the connection failed but the server sent useful data nonetheless.,"

getErrorStream
public InputStream getErrorStream()
Returns the error stream if the connection failed
 but the server sent useful data nonetheless. The
 typical example is when an HTTP server responds
 with a 404, which will cause a FileNotFoundException
 to be thrown in connect, but the server sent an HTML
 help page with suggestions as to what to do.

 This method will not cause a connection to be initiated.  If
 the connection was not connected, or if the server did not have
 an error while connecting or if the server had an error but
 no error data was sent, this method will return null. This is
 the default.

Returns:
an error stream if any, null if there have been no
 errors, the connection is not connected or the server sent no
 useful data.


"
10,HttpURLConnection,7,void setDoOutput(boolean doOutput),False,,NULL
10,HttpURLConnection,8,OutputStream getOutputStream(),False,,NULL
10,HttpURLConnection,9,void setFixedLengthStreamingMode(int contentLength),True,"This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is known in advance.","

setFixedLengthStreamingMode
public void setFixedLengthStreamingMode(int contentLength)
This method is used to enable streaming of a HTTP request body
 without internal buffering, when the content length is known in
 advance.
 
 An exception will be thrown if the application
 attempts to write more data than the indicated
 content-length, or if the application closes the OutputStream
 before writing the indicated amount.
 
 When output streaming is enabled, authentication
 and redirection cannot be handled automatically.
 A HttpRetryException will be thrown when reading
 the response if authentication or redirection are required.
 This exception can be queried for the details of the error.
 
 This method must be called before the URLConnection is connected.
 
NOTE: setFixedLengthStreamingMode(long) is recommended
 instead of this method as it allows larger content lengths to be set.

Parameters:
contentLength - The number of bytes which will be written
          to the OutputStream.
Throws:
IllegalStateException - if URLConnection is already connected
          or if a different streaming mode is already enabled.
IllegalArgumentException - if a content length less than
          zero is specified.
Since:
1.5
See Also:
setChunkedStreamingMode(int)


"
10,HttpURLConnection,10,void setChunkedStreamingMode(int chunklen),True,"This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is not known in advance.","

setChunkedStreamingMode
public void setChunkedStreamingMode(int chunklen)
This method is used to enable streaming of a HTTP request body
 without internal buffering, when the content length is not
 known in advance. In this mode, chunked transfer encoding
 is used to send the request body. Note, not all HTTP servers
 support this mode.
 
 When output streaming is enabled, authentication
 and redirection cannot be handled automatically.
 A HttpRetryException will be thrown when reading
 the response if authentication or redirection are required.
 This exception can be queried for the details of the error.
 
 This method must be called before the URLConnection is connected.

Parameters:
chunklen - The number of bytes to write in each chunk.
          If chunklen is less than or equal to zero, a default
          value will be used.
Throws:
IllegalStateException - if URLConnection is already connected
          or if a different streaming mode is already enabled.
Since:
1.5
See Also:
setFixedLengthStreamingMode(int)


"
10,HttpURLConnection,11,void setUseCaches(boolean useCaches),False,,NULL
10,HttpURLConnection,12,void setDefaultUseCaches(boolean defaultUseCaches),False,,NULL
10,HttpURLConnection,13,void setIfModifiedSince(long date),False,,NULL
10,HttpURLConnection,14,void setIfUnmodifiedSince(long date),False,,NULL
10,HttpURLConnection,15,void setIfMatch(String etag),False,,NULL
10,HttpURLConnection,16,void setIfNoneMatch(String etag),False,,NULL
10,HttpURLConnection,17,"void setRequestProperty(String key, String value)",False,,NULL
10,HttpURLConnection,18,"void setRequestProperty(String key, long value)",False,,NULL
10,HttpURLConnection,19,"void setRequestProperty(String key, int value)",False,,NULL
10,HttpURLConnection,20,"void setRequestProperty(String key, boolean value)",False,,NULL
10,HttpURLConnection,21,"void setRequestProperty(String key, String[] values)",False,,NULL
10,HttpURLConnection,22,"void setRequestProperty(String key, String value)",False,,NULL
10,HttpURLConnection,23,"void setRequestProperty(String key, long value)",False,,NULL
10,HttpURLConnection,24,"void setRequestProperty(String key, int value)",False,,NULL
10,HttpURLConnection,25,"void setRequestProperty(String key, boolean value)",False,,NULL
10,HttpURLConnection,26,"void setRequestProperty(String key, String[] values)",False,,NULL
10,HttpURLConnection,27,"void setRequestProperty(String key, String value)",False,,NULL
10,HttpURLConnection,28,"void setRequestProperty(String key, long value)",False,,NULL
10,HttpURLConnection,29,"void setRequestProperty(String key, int value)",False,,NULL
10,HttpURLConnection,30,"void setRequestProperty(String key, boolean value)",False,,NULL
10,HttpURLConnection,31,"void setRequestProperty(String key, String[] values)",False,,NULL
10,HttpURLConnection,32,"void setRequestProperty(String key, String value)",False,,NULL
10,HttpURLConnection,33,"void setRequestProperty(String key, long value)",False,,NULL
10,HttpURLConnection,34,"void setRequestProperty(String key, int value)",False,,NULL
10,HttpURLConnection,35,"void setRequestProperty(String key, boolean value)",False,,NULL
10,HttpURLConnection,36,"void setRequestProperty(String key, String[] values)",False,,NULL
10,HttpURLConnection,37,"void setRequestProperty(String key, String value)",False,,NULL
10,HttpURLConnection,38,"void setRequestProperty(String key, long value)",False,,NULL
10,HttpURLConnection,39,"void setRequestProperty(String key, int value)",False,,NULL
10,HttpURLConnection,40,"void setRequestProperty(String key, boolean value)",False,,NULL
10,HttpURLConnection,41,"void setRequestProperty(String key, String[] values)",False,,NULL
10,HttpURLConnection,42,"void setRequestProperty(String key, String value)",False,,NULL
10,HttpURLConnection,43,"void setRequestProperty(String key, long value)",False,,NULL
10,HttpURLConnection,44,"void setRequestProperty(String key, int value)",False,,NULL
10,HttpURLConnection,45,"void setRequestProperty(String key, boolean value)",False,,NULL
10,HttpURLConnection,46,"void setRequestProperty(String key, String[] values)",False,,NULL
10,HttpURLConnection,47,"void setRequestProperty(String key, String value)",False,,NULL
10,HttpURLConnection,48,"void setRequestProperty(String key, long value)",False,,NULL
10,HttpURLConnection,49,"void setRequestProperty(String key, int value)",False,,NULL
10,HttpURLConnection,50,"void setRequestProperty(String key, boolean value)",False,,NULL
10,HttpURLConnection,51,"void setRequestProperty(String key, String[] values)",False,,NULL
10,HttpURLConnection,52,"void setRequestProperty(String key, String value)",False,,NULL
10,HttpURLConnection,53,"void setRequestProperty(String key, long value)",False,,NULL
10,HttpURLConnection,54,"void setRequestProperty(String key, int value)",False,,NULL
10,HttpURLConnection,55,"void setRequestProperty(String key, boolean value)",False,,NULL
10,HttpURLConnection,56,"void setRequestProperty(String key, String[] values)",False,,NULL
10,HttpURLConnection,57,"void setRequestProperty(String key, String value)",False,,NULL
10,HttpURLConnection,58,"void setRequestProperty(String key, long value)",False,,NULL
10,HttpURLConnection,59,"void setRequestProperty(String key, int value)",False,,NULL
10,HttpURLConnection,60,"void setRequestProperty(String key, boolean value)",False,,NULL
10,HttpURLConnection,61,"void setRequestProperty(String key, String[] values)",False,,NULL
10,HttpURLConnection,62,"void setRequestProperty(String key, String value)",False,,NULL
11,IDN,1,String toASCII(String input),True,"Translates a string from Unicode to ASCII Compatible Encoding (ACE), as defined by the ToASCII operation of RFC 3490.","

toASCII
public static String toASCII(String input)
Translates a string from Unicode to ASCII Compatible Encoding (ACE),
 as defined by the ToASCII operation of RFC 3490.

  This convenience method works as if by invoking the
 two-argument counterpart as follows:
 
toASCII(input, 0);
 

Parameters:
input - the string to be processed
Returns:
the translated String
Throws:
IllegalArgumentException - if the input string doesn't conform to RFC 3490 specification


"
11,IDN,2,String toUnicode(String input),True,"Translates a string from ASCII Compatible Encoding (ACE) to Unicode, as defined by the ToUnicode operation of RFC 3490.","

toUnicode
public static String toUnicode(String input)
Translates a string from ASCII Compatible Encoding (ACE) to Unicode,
 as defined by the ToUnicode operation of RFC 3490.

  This convenience method works as if by invoking the
 two-argument counterpart as follows:
 
toUnicode(input, 0);
 

Parameters:
input - the string to be processed
Returns:
the translated String


"
11,IDN,3,"String toUnicode(String input, int flags)",True,"Translates a string from ASCII Compatible Encoding (ACE) to Unicode, as defined by the ToUnicode operation of RFC 3490.","

toUnicode
public static String toUnicode(String input,
                               int flag)
Translates a string from ASCII Compatible Encoding (ACE) to Unicode,
 as defined by the ToUnicode operation of RFC 3490.

 ToUnicode never fails. In case of any error, the input string is returned unmodified.

  A label is an individual part of a domain name. The original ToUnicode operation,
 as defined in RFC 3490, only operates on a single label. This method can handle
 both label and entire domain name, by assuming that labels in a domain name are
 always separated by dots. The following characters are recognized as dots:
 \u002E (full stop), \u3002 (ideographic full stop), \uFF0E (fullwidth full stop),
 and \uFF61 (halfwidth ideographic full stop).

Parameters:
input - the string to be processed
flag - process flag; can be 0 or any logical OR of possible flags
Returns:
the translated String


"
11,IDN,4,"String toASCII(String input, int flags)",True,"Translates a string from Unicode to ASCII Compatible Encoding (ACE), as defined by the ToASCII operation of RFC 3490.","

toASCII
public static String toASCII(String input,
                             int flag)
Translates a string from Unicode to ASCII Compatible Encoding (ACE),
 as defined by the ToASCII operation of RFC 3490.

 ToASCII operation can fail. ToASCII fails if any step of it fails.
 If ToASCII operation fails, an IllegalArgumentException will be thrown.
 In this case, the input string should not be used in an internationalized domain name.

  A label is an individual part of a domain name. The original ToASCII operation,
 as defined in RFC 3490, only operates on a single label. This method can handle
 both label and entire domain name, by assuming that labels in a domain name are
 always separated by dots. The following characters are recognized as dots:
 \u002E (full stop), \u3002 (ideographic full stop), \uFF0E (fullwidth full stop),
 and \uFF61 (halfwidth ideographic full stop). if dots are
 used as label separators, this method also changes all of them to \u002E (full stop)
 in output translated string.

Parameters:
input - the string to be processed
flag - process flag; can be 0 or any logical OR of possible flags
Returns:
the translated String
Throws:
IllegalArgumentException - if the input string doesn't conform to RFC 3490 specification


"
11,IDN,5,"String toASCII(String input, int flags, String defaultHost)",False,,NULL
12,Inet4Address,1,InetAddress getByName(String host),False,,NULL
12,Inet4Address,2,String getHostAddress(),True,Returns the IP address string in textual presentation form.,"

getHostAddress
public String getHostAddress()
Returns the IP address string in textual presentation form.

Overrides:
getHostAddress in class InetAddress
Returns:
the raw IP address in a string format.
Since:
JDK1.0.2


"
12,Inet4Address,3,String getHostName(),False,,NULL
12,Inet4Address,4,boolean isReachable(int timeout),False,,NULL
12,Inet4Address,5,boolean isSiteLocalAddress(),True,Utility routine to check if the InetAddress is a site local address.,"

isSiteLocalAddress
public boolean isSiteLocalAddress()
Utility routine to check if the InetAddress is a site local address.

Overrides:
isSiteLocalAddress in class InetAddress
Returns:
a boolean indicating if the InetAddress is
 a site local address; or false if address is not a site local unicast address.
Since:
1.4


"
13,Inet6Address,1,Inet6Address(byte[] addr),False,,NULL
13,Inet6Address,2,Inet6Address(String host),False,,NULL
13,Inet6Address,3,InetAddress getByName(String host),False,,NULL
13,Inet6Address,4,"InetAddress getByAddress(String host, byte[] addr)",False,,NULL
13,Inet6Address,5,byte[] getAddress(),True,Returns the raw IP address of this InetAddress object.,"

getAddress
public byte[] getAddress()
Returns the raw IP address of this InetAddress object. The result
 is in network byte order: the highest order byte of the address is in
 getAddress()[0].

Overrides:
getAddress in class InetAddress
Returns:
the raw IP address of this object.


"
14,InetAddress,1,InetAddress getByName(String host),True,"Determines the IP address of a host, given the host's name.","

getByName
public static InetAddress getByName(String host)
                             throws UnknownHostException
Determines the IP address of a host, given the host's name.

  The host name can either be a machine name, such as
 ""java.sun.com"", or a textual representation of its
 IP address. If a literal IP address is supplied, only the
 validity of the address format is checked.

  For host specified in literal IPv6 address,
 either the form defined in RFC 2732 or the literal IPv6 address
 format defined in RFC 2373 is accepted. IPv6 scoped addresses are also
 supported. See here for a description of IPv6
 scoped addresses.

  If the host is null then an InetAddress
 representing an address of the loopback interface is returned.
 See RFC 3330
 section 2 and RFC 2373
 section 2.5.3. 

Parameters:
host - the specified host, or null.
Returns:
an IP address for the given host name.
Throws:
UnknownHostException - if no IP address for the
               host could be found, or if a scope_id was specified
               for a global IPv6 address.
SecurityException - if a security manager exists
             and its checkConnect method doesn't allow the operation


"
14,InetAddress,2,InetAddress getLocalHost(),True,Returns the address of the local host.,"

getLocalHost
public static InetAddress getLocalHost()
                                throws UnknownHostException
Returns the address of the local host. This is achieved by retrieving
 the name of the host from the system, then resolving that name into
 an InetAddress.

 Note: The resolved address may be cached for a short period of time.
 
If there is a security manager, its
 checkConnect method is called
 with the local host name and -1
 as its arguments to see if the operation is allowed.
 If the operation is not allowed, an InetAddress representing
 the loopback address is returned.

Returns:
the address of the local host.
Throws:
UnknownHostException - if the local host name could not
             be resolved into an address.
See Also:
SecurityManager.checkConnect(java.lang.String, int), 
getByName(java.lang.String)


"
14,InetAddress,3,String getHostName(),True,Gets the host name for this IP address.,"

getHostName
public String getHostName()
Gets the host name for this IP address.

 If this InetAddress was created with a host name,
 this host name will be remembered and returned;
 otherwise, a reverse name lookup will be performed
 and the result will be returned based on the system
 configured name lookup service. If a lookup of the name service
 is required, call
 getCanonicalHostName.

 If there is a security manager, its
 checkConnect method is first called
 with the hostname and -1
 as its arguments to see if the operation is allowed.
 If the operation is not allowed, it will return
 the textual representation of the IP address.

Returns:
the host name for this IP address, or if the operation
    is not allowed by the security check, the textual
    representation of the IP address.
See Also:
getCanonicalHostName(), 
SecurityManager.checkConnect(java.lang.String, int)


"
14,InetAddress,4,String getHostAddress(),True,Returns the IP address string in textual presentation.,"

getHostAddress
public String getHostAddress()
Returns the IP address string in textual presentation.

Returns:
the raw IP address in a string format.
Since:
JDK1.0.2


"
14,InetAddress,5,boolean isReachable(int timeout),True,Test whether that address is reachable.,"

isReachable
public boolean isReachable(int timeout)
                    throws IOException
Test whether that address is reachable. Best effort is made by the
 implementation to try to reach the host, but firewalls and server
 configuration may block requests resulting in a unreachable status
 while some specific ports may be accessible.
 A typical implementation will use ICMP ECHO REQUESTs if the
 privilege can be obtained, otherwise it will try to establish
 a TCP connection on port 7 (Echo) of the destination host.
 
 The timeout value, in milliseconds, indicates the maximum amount of time
 the try should take. If the operation times out before getting an
 answer, the host is deemed unreachable. A negative value will result
 in an IllegalArgumentException being thrown.

Parameters:
timeout - the time, in milliseconds, before the call aborts
Returns:
a boolean indicating if the address is reachable.
Throws:
IOException - if a network error occurs
IllegalArgumentException - if timeout is negative.
Since:
1.5


"
15,InetSocketAddress,1,"InetSocketAddress(InetAddress addr, int port)",False,,NULL
15,InetSocketAddress,2,"InetSocketAddress(String hostname, int port)",False,,NULL
15,InetSocketAddress,3,InetAddress getAddress(),True,Gets the InetAddress.,"

getAddress
public final InetAddress getAddress()
Gets the InetAddress.

Returns:
the InetAdress or null if it is unresolved.


"
15,InetSocketAddress,4,int getPort(),True,Gets the port number.,"

getPort
public final int getPort()
Gets the port number.

Returns:
the port number.


"
15,InetSocketAddress,5,String toString(),True,Constructs a string representation of this InetSocketAddress.,"

toString
public String toString()
Constructs a string representation of this InetSocketAddress.
 This String is constructed by calling toString() on the InetAddress
 and concatenating the port number (with a colon). If the address
 is unresolved then the part before the colon will only contain the hostname.

Overrides:
toString in class Object
Returns:
a string representation of this object.


"
16,InterfaceAddress,1,getAddress(),False,,NULL
16,InterfaceAddress,2,getBroadcast(),False,,NULL
16,InterfaceAddress,3,getNetworkPrefixLength(),False,,NULL
16,InterfaceAddress,4,getNetwork(),False,,NULL
16,InterfaceAddress,5,isLoopbackAddress(),False,,NULL
17,JarURLConnection,1,JarURLConnection(URL url),False,,NULL
17,JarURLConnection,2,URL getJarFileURL(),True,Returns the URL for the Jar file for this connection.,"

getJarFileURL
public URL getJarFileURL()
Returns the URL for the Jar file for this connection.

Returns:
the URL for the Jar file for this connection.


"
17,JarURLConnection,3,JarFile getJarFile(),True,Return the JAR file for this connection.,"

getJarFile
public abstract JarFile getJarFile()
                            throws IOException
Return the JAR file for this connection.

Returns:
the JAR file for this connection. If the connection is
 a connection to an entry of a JAR file, the JAR file object is
 returned
Throws:
IOException - if an IOException occurs while trying to
 connect to the JAR file for this connection.
See Also:
URLConnection.connect()


"
17,JarURLConnection,4,JarEntry getJarEntry(),True,"Return the JAR entry object for this connection, if any.","

getJarEntry
public JarEntry getJarEntry()
                     throws IOException
Return the JAR entry object for this connection, if any. This
 method returns null if the JAR file URL corresponding to this
 connection points to a JAR file and not a JAR file entry.

Returns:
the JAR entry object for this connection, or null if
 the JAR URL for this connection points to a JAR file.
Throws:
IOException - if getting the JAR file for this
 connection causes an IOException to be thrown.
See Also:
getJarFile(), 
getJarEntry()


"
17,JarURLConnection,5,JarEntry getEntry(String name),False,,NULL
18,MulticastSocket,1,MulticastSocket(),False,,NULL
18,MulticastSocket,2,MulticastSocket(int port),False,,NULL
18,MulticastSocket,3,void joinGroup(InetAddress group),True,Joins a multicast group.,"

joinGroup
public void joinGroup(InetAddress mcastaddr)
               throws IOException
Joins a multicast group. Its behavior may be affected by
 setInterface or setNetworkInterface.

 If there is a security manager, this method first
 calls its checkMulticast method
 with the mcastaddr argument
 as its argument.

Parameters:
mcastaddr - is the multicast address to join
Throws:
IOException - if there is an error joining
 or when the address is not a multicast address.
SecurityException - if a security manager exists and its
 checkMulticast method doesn't allow the join.
See Also:
SecurityManager.checkMulticast(InetAddress)


"
18,MulticastSocket,4,void leaveGroup(InetAddress group),True,Leave a multicast group.,"

leaveGroup
public void leaveGroup(InetAddress mcastaddr)
                throws IOException
Leave a multicast group. Its behavior may be affected by
 setInterface or setNetworkInterface.

 If there is a security manager, this method first
 calls its checkMulticast method
 with the mcastaddr argument
 as its argument.

Parameters:
mcastaddr - is the multicast address to leave
Throws:
IOException - if there is an error leaving
 or when the address is not a multicast address.
SecurityException - if a security manager exists and its
 checkMulticast method doesn't allow the operation.
See Also:
SecurityManager.checkMulticast(InetAddress)


"
18,MulticastSocket,5,void setTimeToLive(int ttl),True,Set the default time-to-live for multicast packets sent out on this MulticastSocket in order to control the scope of the multicasts.,"

setTimeToLive
public void setTimeToLive(int ttl)
                   throws IOException
Set the default time-to-live for multicast packets sent out
 on this MulticastSocket in order to control the
 scope of the multicasts.

  The ttl must be in the range 0 <= ttl <=
 255 or an IllegalArgumentException will be thrown.
 Multicast packets sent with a TTL of 0 are not transmitted
 on the network but may be delivered locally.

Parameters:
ttl - the time-to-live
Throws:
IOException - if an I/O exception occurs while setting the
          default time-to-live value
See Also:
getTimeToLive()


"
19,NetPermission,1,boolean equals(Object obj),False,,NULL
19,NetPermission,2,boolean implies(Permission p),False,,NULL
19,NetPermission,3,String getActions(),False,,NULL
19,NetPermission,4,int hashCode(),False,,NULL
19,NetPermission,5,boolean isReadOnly(),False,,NULL
20,NetworkInterface,1,getByName(String name),False,,NULL
20,NetworkInterface,2,getByIndex(int index),False,,NULL
20,NetworkInterface,3,getHardwareAddress(),False,,NULL
20,NetworkInterface,4,getInterfaceAddresses(),False,,NULL
20,NetworkInterface,5,getMTU(),False,,NULL
21,PasswordAuthentication,1,"PasswordAuthentication(String user, char[] password)",False,,NULL
21,PasswordAuthentication,2,String getUserName(),True,Returns the user name.,"

getUserName
public String getUserName()
Returns the user name.

Returns:
the user name


"
21,PasswordAuthentication,3,char[] getPassword(),True,Returns the user password.,"

getPassword
public char[] getPassword()
Returns the user password.

  Note that this method returns a reference to the password. It is
 the caller's responsibility to zero out the password information after
 it is no longer needed.

Returns:
the password


"
21,PasswordAuthentication,4,void setUserName(String user),False,,NULL
21,PasswordAuthentication,5,void setPassword(char[] password),False,,NULL
22,Proxy,1,"Proxy(Proxy.Type type, SocketAddress sa)",False,,NULL
22,Proxy,2,Proxy.Type getType(),False,,NULL
22,Proxy,3,SocketAddress getAddress(),False,,NULL
22,Proxy,4,Proxy.Type valueOf(String name),False,,NULL
22,Proxy,5,String toString(),True,Constructs a string representation of this Proxy.,"

toString
public String toString()
Constructs a string representation of this Proxy.
 This String is constructed by calling toString() on its type
 and concatenating "" @ "" and the toString() result from its address
 if its type is not DIRECT.

Overrides:
toString in class Object
Returns:
a string representation of this object.


"
23,ProxySelector,1,ProxySelector.getDefault(),False,,NULL
23,ProxySelector,2,ProxySelector.setDefault(ProxySelector selector),False,,NULL
23,ProxySelector,3,ProxySelector.openConnection(URI uri),False,,NULL
23,ProxySelector,4,ProxySelector.select(URI uri),False,,NULL
23,ProxySelector,5,ProxySelector.close(),False,,NULL
24,ResponseCache,1,ResponseCache getDefault(),True,Gets the system-wide response cache.,"

getDefault
public static ResponseCache getDefault()
Gets the system-wide response cache.

Returns:
the system-wide ResponseCache
Throws:
SecurityException - If a security manager has been installed and it denies
 NetPermission(""getResponseCache"")
Since:
1.5
See Also:
setDefault(ResponseCache)


"
24,ResponseCache,2,void setDefault(ResponseCache cache),True,Sets (or unsets) the system-wide cache.,"

setDefault
public static void setDefault(ResponseCache responseCache)
Sets (or unsets) the system-wide cache.

 Note: non-standard procotol handlers may ignore this setting.

Parameters:
responseCache - The response cache, or
          null to unset the cache.
Throws:
SecurityException - If a security manager has been installed and it denies
 NetPermission(""setResponseCache"")
Since:
1.5
See Also:
getDefault()


"
24,ResponseCache,3,"void put(URI uri, URLConnection conn)",False,,NULL
24,ResponseCache,4,"Response get(URI uri, String requestMethod, HttpURLConnection httpConn)",False,,NULL
24,ResponseCache,5,void remove(URI uri),False,,NULL
25,SecureCacheResponse,1,boolean isSecure(),False,,NULL
25,SecureCacheResponse,2,String getCipherSuite(),True,Returns the cipher suite in use on the original connection that retrieved the network resource.,"

getCipherSuite
public abstract String getCipherSuite()
Returns the cipher suite in use on the original connection that
 retrieved the network resource.

Returns:
a string representing the cipher suite


"
25,SecureCacheResponse,3,String getLocalCertificateChain(),False,,NULL
25,SecureCacheResponse,4,String getPeerCertificateChain(),False,,NULL
25,SecureCacheResponse,5,String getLocalPrincipal(),False,,NULL
25,SecureCacheResponse,6,String getPeerPrincipal(),False,,NULL
25,SecureCacheResponse,7,String getNegotiatedProtocol(),False,,NULL
25,SecureCacheResponse,8,String getNegotiatedProtocols(),False,,NULL
25,SecureCacheResponse,9,String getNegotiatedApplicationProtocols(),False,,NULL
25,SecureCacheResponse,10,String getNegotiatedApplicationProtocol(),False,,NULL
25,SecureCacheResponse,11,String getNegotiatedApplicationProtocolParameter(),False,,NULL
25,SecureCacheResponse,12,String getNegotiatedApplicationProtocolParameters(),False,,NULL
25,SecureCacheResponse,13,String getNegotiatedApplicationProtocolParameter(String protocol),False,,NULL
25,SecureCacheResponse,14,String getNegotiatedApplicationProtocolParameters(String protocol),False,,NULL
25,SecureCacheResponse,15,"String getNegotiatedApplicationProtocolParameter(String protocol, String parameter)",False,,NULL
25,SecureCacheResponse,16,"String getNegotiatedApplicationProtocolParameters(String protocol, String parameter)",False,,NULL
25,SecureCacheResponse,17,"String getNegotiatedApplicationProtocolParameter(String protocol, String parameter, String value)",False,,NULL
25,SecureCacheResponse,18,"String getNegotiatedApplicationProtocolParameters(String protocol, String parameter, String value)",False,,NULL
25,SecureCacheResponse,19,"String getNegotiatedApplicationProtocolParameter(String protocol, String parameter, String value, String usage)",False,,NULL
25,SecureCacheResponse,20,"String getNegotiatedApplicationProtocolParameters(String protocol, String parameter, String value, String usage)",False,,NULL
26,ServerSocket,1,ServerSocket(int port),False,,NULL
26,ServerSocket,2,"ServerSocket(int port, int backlog)",False,,NULL
26,ServerSocket,3,"ServerSocket(int port, int backlog, InetAddress bindAddr)",False,,NULL
26,ServerSocket,4,Socket accept(),True,Listens for a connection to be made to this socket and accepts it.,"

accept
public Socket accept()
              throws IOException
Listens for a connection to be made to this socket and accepts
 it. The method blocks until a connection is made.

 A new Socket s is created and, if there
 is a security manager,
 the security manager's checkAccept method is called
 with s.getInetAddress().getHostAddress() and
 s.getPort()
 as its arguments to ensure the operation is allowed.
 This could result in a SecurityException.

Returns:
the new Socket
Throws:
IOException - if an I/O error occurs when waiting for a
               connection.
SecurityException - if a security manager exists and its
             checkAccept method doesn't allow the operation.
SocketTimeoutException - if a timeout was previously set with setSoTimeout and
             the timeout has been reached.
IllegalBlockingModeException - if this socket has an associated channel, the channel is in
             non-blocking mode, and there is no connection ready to be
             accepted
See Also:
SecurityManager.checkAccept(java.lang.String, int)


"
26,ServerSocket,5,void bind(SocketAddress endpoint),True,Binds the ServerSocket to a specific address (IP address and port number).,"

bind
public void bind(SocketAddress endpoint)
          throws IOException
Binds the ServerSocket to a specific address
 (IP address and port number).
 
 If the address is null, then the system will pick up
 an ephemeral port and a valid local address to bind the socket.
 

Parameters:
endpoint - The IP address and port number to bind to.
Throws:
IOException - if the bind operation fails, or if the socket
                     is already bound.
SecurityException - if a SecurityManager is present and
 its checkListen method doesn't allow the operation.
IllegalArgumentException - if endpoint is a
          SocketAddress subclass not supported by this socket
Since:
1.4


"
26,ServerSocket,6,void close(),True,Closes this socket.,"

close
public void close()
           throws IOException
Closes this socket.

 Any thread currently blocked in accept() will throw
 a SocketException.

  If this socket has an associated channel then the channel is closed
 as well.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Throws:
IOException - if an I/O error occurs when closing the socket.


"
26,ServerSocket,7,InetAddress getInetAddress(),True,Returns the local address of this server socket.,"

getInetAddress
public InetAddress getInetAddress()
Returns the local address of this server socket.
 
 If the socket was bound prior to being closed,
 then this method will continue to return the local address
 after the socket is closed.
 
 If there is a security manager set, its checkConnect method is
 called with the local address and -1 as its arguments to see
 if the operation is allowed. If the operation is not allowed,
 the loopback address is returned.

Returns:
the address to which this socket is bound,
          or the loopback address if denied by the security manager,
          or null if the socket is unbound.
See Also:
SecurityManager.checkConnect(java.lang.String, int)


"
26,ServerSocket,8,int getLocalPort(),True,Returns the port number on which this socket is listening.,"

getLocalPort
public int getLocalPort()
Returns the port number on which this socket is listening.
 
 If the socket was bound prior to being closed,
 then this method will continue to return the port number
 after the socket is closed.

Returns:
the port number to which this socket is listening or
          -1 if the socket is not bound yet.


"
26,ServerSocket,9,SocketAddress getLocalSocketAddress(),True,Returns the address of the endpoint this socket is bound to.,"

getLocalSocketAddress
public SocketAddress getLocalSocketAddress()
Returns the address of the endpoint this socket is bound to.
 
 If the socket was bound prior to being closed,
 then this method will continue to return the address of the endpoint
 after the socket is closed.
 
 If there is a security manager set, its checkConnect method is
 called with the local address and -1 as its arguments to see
 if the operation is allowed. If the operation is not allowed,
 a SocketAddress representing the
 loopback address and the local
 port to which the socket is bound is returned.

Returns:
a SocketAddress representing the local endpoint of
         this socket, or a SocketAddress representing the
         loopback address if denied by the security manager,
         or null if the socket is not bound yet.
Since:
1.4
See Also:
getInetAddress(), 
getLocalPort(), 
bind(SocketAddress), 
SecurityManager.checkConnect(java.lang.String, int)


"
26,ServerSocket,10,int getReceiveBufferSize(),True,"Gets the value of the SO_RCVBUF option for this ServerSocket, that is the proposed buffer size that will be used for Sockets accepted from this ServerSocket.","

getReceiveBufferSize
public int getReceiveBufferSize()
                         throws SocketException
Gets the value of the SO_RCVBUF option
 for this ServerSocket, that is the proposed buffer size that
 will be used for Sockets accepted from this ServerSocket.

 Note, the value actually set in the accepted socket is determined by
 calling Socket.getReceiveBufferSize().

Returns:
the value of the SO_RCVBUF
         option for this Socket.
Throws:
SocketException - if there is an error
            in the underlying protocol, such as a TCP error.
Since:
1.4
See Also:
setReceiveBufferSize(int)


"
26,ServerSocket,11,int getReuseAddress(),False,,NULL
26,ServerSocket,12,int getSoTimeout(),True,Retrieve setting for SO_TIMEOUT.,"

getSoTimeout
public int getSoTimeout()
                 throws IOException
Retrieve setting for SO_TIMEOUT.
 0 returns implies that the option is disabled (i.e., timeout of infinity).

Returns:
the SO_TIMEOUT value
Throws:
IOException - if an I/O error occurs
Since:
JDK1.1
See Also:
setSoTimeout(int)


"
26,ServerSocket,13,void setReceiveBufferSize(int size),True,Sets a default proposed value for the SO_RCVBUF option for sockets accepted from this ServerSocket.,"

setReceiveBufferSize
public void setReceiveBufferSize(int size)
                          throws SocketException
Sets a default proposed value for the
 SO_RCVBUF option for sockets
 accepted from this ServerSocket. The value actually set
 in the accepted socket must be determined by calling
 Socket.getReceiveBufferSize() after the socket
 is returned by accept().
 
 The value of SO_RCVBUF is used both to
 set the size of the internal socket receive buffer, and to set the size
 of the TCP receive window that is advertized to the remote peer.
 
 It is possible to change the value subsequently, by calling
 Socket.setReceiveBufferSize(int). However, if the application
 wishes to allow a receive window larger than 64K bytes, as defined by RFC1323
 then the proposed value must be set in the ServerSocket before
 it is bound to a local address. This implies, that the ServerSocket must be
 created with the no-argument constructor, then setReceiveBufferSize() must
 be called and lastly the ServerSocket is bound to an address by calling bind().
 
 Failure to do this will not cause an error, and the buffer size may be set to the
 requested value but the TCP receive window in sockets accepted from
 this ServerSocket will be no larger than 64K bytes.

Parameters:
size - the size to which to set the receive buffer
 size. This value must be greater than 0.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
IllegalArgumentException - if the
 value is 0 or is negative.
Since:
1.4
See Also:
getReceiveBufferSize()


"
26,ServerSocket,14,void setReuseAddress(boolean on),True,Enable/disable the SO_REUSEADDR socket option.,"

setReuseAddress
public void setReuseAddress(boolean on)
                     throws SocketException
Enable/disable the SO_REUSEADDR
 socket option.
 
 When a TCP connection is closed the connection may remain
 in a timeout state for a period of time after the connection
 is closed (typically known as the TIME_WAIT state
 or 2MSL wait state).
 For applications using a well known socket address or port
 it may not be possible to bind a socket to the required
 SocketAddress if there is a connection in the
 timeout state involving the socket address or port.
 
 Enabling SO_REUSEADDR prior to
 binding the socket using bind(SocketAddress) allows the socket
 to be bound even though a previous connection is in a timeout state.
 
 When a ServerSocket is created the initial setting
 of SO_REUSEADDR is not defined.
 Applications can use getReuseAddress() to determine the initial
 setting of SO_REUSEADDR.
 
 The behaviour when SO_REUSEADDR is
 enabled or disabled after a socket is bound (See isBound())
 is not defined.

Parameters:
on - whether to enable or disable the socket option
Throws:
SocketException - if an error occurs enabling or
            disabling the SO_REUSEADDR
            socket option, or the socket is closed.
Since:
1.4
See Also:
getReuseAddress(), 
bind(SocketAddress), 
isBound(), 
isClosed()


"
26,ServerSocket,15,void setSoTimeout(int timeout),True,"Enable/disable SO_TIMEOUT with the specified timeout, in milliseconds.","

setSoTimeout
public void setSoTimeout(int timeout)
                  throws SocketException
Enable/disable SO_TIMEOUT with the
 specified timeout, in milliseconds.  With this option set to a non-zero
 timeout, a call to accept() for this ServerSocket
 will block for only this amount of time.  If the timeout expires,
 a java.net.SocketTimeoutException is raised, though the
 ServerSocket is still valid.  The option must be enabled
 prior to entering the blocking operation to have effect.  The
 timeout must be > 0.
 A timeout of zero is interpreted as an infinite timeout.

Parameters:
timeout - the specified timeout, in milliseconds
Throws:
SocketException - if there is an error in
 the underlying protocol, such as a TCP error.
Since:
JDK1.1
See Also:
getSoTimeout()


"
27,Socket,1,"Socket(InetAddress address, int port)",False,,NULL
27,Socket,2,"Socket(String host, int port)",False,,NULL
27,Socket,3,InputStream getInputStream(),True,Returns an input stream for this socket.,"

getInputStream
public InputStream getInputStream()
                           throws IOException
Returns an input stream for this socket.

  If this socket has an associated channel then the resulting input
 stream delegates all of its operations to the channel.  If the channel
 is in non-blocking mode then the input stream's read operations
 will throw an IllegalBlockingModeException.

 Under abnormal conditions the underlying connection may be
 broken by the remote host or the network software (for example
 a connection reset in the case of TCP connections). When a
 broken connection is detected by the network software the
 following applies to the returned input stream :-

 
The network software may discard bytes that are buffered
   by the socket. Bytes that aren't discarded by the network
   software can be read using read.

   If there are no bytes buffered on the socket, or all
   buffered bytes have been consumed by
   read, then all subsequent
   calls to read will throw an
   IOException.

   If there are no bytes buffered on the socket, and the
   socket has not been closed using close, then
   available will
   return 0.

 
 Closing the returned InputStream
 will close the associated socket.

Returns:
an input stream for reading bytes from this socket.
Throws:
IOException - if an I/O error occurs when creating the
             input stream, the socket is closed, the socket is
             not connected, or the socket input has been shutdown
             using shutdownInput()


"
27,Socket,4,OutputStream getOutputStream(),True,Returns an output stream for this socket.,"

getOutputStream
public OutputStream getOutputStream()
                             throws IOException
Returns an output stream for this socket.

  If this socket has an associated channel then the resulting output
 stream delegates all of its operations to the channel.  If the channel
 is in non-blocking mode then the output stream's write
 operations will throw an IllegalBlockingModeException.

  Closing the returned OutputStream
 will close the associated socket.

Returns:
an output stream for writing bytes to this socket.
Throws:
IOException - if an I/O error occurs when creating the
               output stream or if the socket is not connected.


"
27,Socket,5,void close(),True,Closes this socket.,"

close
public void close()
           throws IOException
Closes this socket.
 
 Any thread currently blocked in an I/O operation upon this socket
 will throw a SocketException.
 
 Once a socket has been closed, it is not available for further networking
 use (i.e. can't be reconnected or rebound). A new socket needs to be
 created.

  Closing this socket will also close the socket's
 InputStream and
 OutputStream.

  If this socket has an associated channel then the channel is closed
 as well.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Throws:
IOException - if an I/O error occurs when closing this socket.
See Also:
isClosed()


"
27,Socket,6,void connect(SocketAddress endpoint),True,Connects this socket to the server.,"

connect
public void connect(SocketAddress endpoint)
             throws IOException
Connects this socket to the server.

Parameters:
endpoint - the SocketAddress
Throws:
IOException - if an error occurs during the connection
IllegalBlockingModeException - if this socket has an associated channel,
          and the channel is in non-blocking mode
IllegalArgumentException - if endpoint is null or is a
          SocketAddress subclass not supported by this socket
Since:
1.4


"
27,Socket,7,"void connect(SocketAddress endpoint, int timeout)",True,Connects this socket to the server with a specified timeout value.,"

connect
public void connect(SocketAddress endpoint,
                    int timeout)
             throws IOException
Connects this socket to the server with a specified timeout value.
 A timeout of zero is interpreted as an infinite timeout. The connection
 will then block until established or an error occurs.

Parameters:
endpoint - the SocketAddress
timeout - the timeout value to be used in milliseconds.
Throws:
IOException - if an error occurs during the connection
SocketTimeoutException - if timeout expires before connecting
IllegalBlockingModeException - if this socket has an associated channel,
          and the channel is in non-blocking mode
IllegalArgumentException - if endpoint is null or is a
          SocketAddress subclass not supported by this socket
Since:
1.4


"
27,Socket,8,void bind(SocketAddress bindpoint),True,Binds the socket to a local address.,"

bind
public void bind(SocketAddress bindpoint)
          throws IOException
Binds the socket to a local address.
 
 If the address is null, then the system will pick up
 an ephemeral port and a valid local address to bind the socket.

Parameters:
bindpoint - the SocketAddress to bind to
Throws:
IOException - if the bind operation fails, or if the socket
                     is already bound.
IllegalArgumentException - if bindpoint is a
          SocketAddress subclass not supported by this socket
SecurityException - if a security manager exists and its
          checkListen method doesn't allow the bind
          to the local port.
Since:
1.4
See Also:
isBound()


"
27,Socket,9,InetAddress getInetAddress(),True,Returns the address to which the socket is connected.,"

getInetAddress
public InetAddress getInetAddress()
Returns the address to which the socket is connected.
 
 If the socket was connected prior to being closed,
 then this method will continue to return the connected address
 after the socket is closed.

Returns:
the remote IP address to which this socket is connected,
          or null if the socket is not connected.


"
27,Socket,10,InetAddress getLocalAddress(),True,Gets the local address to which the socket is bound.,"

getLocalAddress
public InetAddress getLocalAddress()
Gets the local address to which the socket is bound.
 
 If there is a security manager set, its checkConnect method is
 called with the local address and -1 as its arguments to see
 if the operation is allowed. If the operation is not allowed,
 the loopback address is returned.

Returns:
the local address to which the socket is bound,
         the loopback address if denied by the security manager, or
         the wildcard address if the socket is closed or not bound yet.
Since:
JDK1.1
See Also:
SecurityManager.checkConnect(java.lang.String, int)


"
27,Socket,11,int getPort(),True,Returns the remote port number to which this socket is connected.,"

getPort
public int getPort()
Returns the remote port number to which this socket is connected.
 
 If the socket was connected prior to being closed,
 then this method will continue to return the connected port number
 after the socket is closed.

Returns:
the remote port number to which this socket is connected, or
          0 if the socket is not connected yet.


"
27,Socket,12,int getLocalPort(),True,Returns the local port number to which this socket is bound.,"

getLocalPort
public int getLocalPort()
Returns the local port number to which this socket is bound.
 
 If the socket was bound prior to being closed,
 then this method will continue to return the local port number
 after the socket is closed.

Returns:
the local port number to which this socket is bound or -1
          if the socket is not bound yet.


"
27,Socket,13,SocketAddress getRemoteSocketAddress(),True,"Returns the address of the endpoint this socket is connected to, or null if it is unconnected.","

getRemoteSocketAddress
public SocketAddress getRemoteSocketAddress()
Returns the address of the endpoint this socket is connected to, or
 null if it is unconnected.
 
 If the socket was connected prior to being closed,
 then this method will continue to return the connected address
 after the socket is closed.

Returns:
a SocketAddress representing the remote endpoint of this
         socket, or null if it is not connected yet.
Since:
1.4
See Also:
getInetAddress(), 
getPort(), 
connect(SocketAddress, int), 
connect(SocketAddress)


"
27,Socket,14,boolean isConnected(),True,Returns the connection state of the socket.,"

isConnected
public boolean isConnected()
Returns the connection state of the socket.
 
 Note: Closing a socket doesn't clear its connection state, which means
 this method will return true for a closed socket
 (see isClosed()) if it was successfuly connected prior
 to being closed.

Returns:
true if the socket was successfuly connected to a server
Since:
1.4


"
27,Socket,15,boolean isBound(),True,Returns the binding state of the socket.,"

isBound
public boolean isBound()
Returns the binding state of the socket.
 
 Note: Closing a socket doesn't clear its binding state, which means
 this method will return true for a closed socket
 (see isClosed()) if it was successfuly bound prior
 to being closed.

Returns:
true if the socket was successfuly bound to an address
Since:
1.4
See Also:
bind(java.net.SocketAddress)


"
27,Socket,16,boolean isClosed(),True,Returns the closed state of the socket.,"

isClosed
public boolean isClosed()
Returns the closed state of the socket.

Returns:
true if the socket has been closed
Since:
1.4
See Also:
close()


"
27,Socket,17,void setSoTimeout(int timeout),True,"Enable/disable SO_TIMEOUT with the specified timeout, in milliseconds.","

setSoTimeout
public void setSoTimeout(int timeout)
                  throws SocketException
Enable/disable SO_TIMEOUT
  with the specified timeout, in milliseconds. With this option set
  to a non-zero timeout, a read() call on the InputStream associated with
  this Socket will block for only this amount of time.  If the timeout
  expires, a java.net.SocketTimeoutException is raised, though the
  Socket is still valid. The option must be enabled
  prior to entering the blocking operation to have effect. The
  timeout must be > 0.
  A timeout of zero is interpreted as an infinite timeout.

Parameters:
timeout - the specified timeout, in milliseconds.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
JDK 1.1
See Also:
getSoTimeout()


"
27,Socket,18,int getSoTimeout(),True,Returns setting for SO_TIMEOUT.,"

getSoTimeout
public int getSoTimeout()
                 throws SocketException
Returns setting for SO_TIMEOUT.
 0 returns implies that the option is disabled (i.e., timeout of infinity).

Returns:
the setting for SO_TIMEOUT
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
JDK1.1
See Also:
setSoTimeout(int)


"
27,Socket,19,void setTcpNoDelay(boolean on),True,Enable/disable TCP_NODELAY (disable/enable Nagle's algorithm).,"

setTcpNoDelay
public void setTcpNoDelay(boolean on)
                   throws SocketException
Enable/disable TCP_NODELAY
 (disable/enable Nagle's algorithm).

Parameters:
on - true to enable TCP_NODELAY,
 false to disable.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
JDK1.1
See Also:
getTcpNoDelay()


"
27,Socket,20,boolean getTcpNoDelay(),True,Tests if TCP_NODELAY is enabled.,"

getTcpNoDelay
public boolean getTcpNoDelay()
                      throws SocketException
Tests if TCP_NODELAY is enabled.

Returns:
a boolean indicating whether or not
         TCP_NODELAY is enabled.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
JDK1.1
See Also:
setTcpNoDelay(boolean)


"
27,Socket,21,void setReuseAddress(boolean on),True,Enable/disable the SO_REUSEADDR socket option.,"

setReuseAddress
public void setReuseAddress(boolean on)
                     throws SocketException
Enable/disable the SO_REUSEADDR
 socket option.
 
 When a TCP connection is closed the connection may remain
 in a timeout state for a period of time after the connection
 is closed (typically known as the TIME_WAIT state
 or 2MSL wait state).
 For applications using a well known socket address or port
 it may not be possible to bind a socket to the required
 SocketAddress if there is a connection in the
 timeout state involving the socket address or port.
 
 Enabling SO_REUSEADDR
 prior to binding the socket using bind(SocketAddress) allows
 the socket to be bound even though a previous connection is in a timeout
 state.
 
 When a Socket is created the initial setting
 of SO_REUSEADDR is disabled.
 
 The behaviour when SO_REUSEADDR is
 enabled or disabled after a socket is bound (See isBound())
 is not defined.

Parameters:
on - whether to enable or disable the socket option
Throws:
SocketException - if an error occurs enabling or
            disabling the SO_REUSEADDR
            socket option, or the socket is closed.
Since:
1.4
See Also:
getReuseAddress(), 
bind(SocketAddress), 
isClosed(), 
isBound()


"
27,Socket,22,boolean getReuseAddress(),True,Tests if SO_REUSEADDR is enabled.,"

getReuseAddress
public boolean getReuseAddress()
                        throws SocketException
Tests if SO_REUSEADDR is enabled.

Returns:
a boolean indicating whether or not
         SO_REUSEADDR is enabled.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
1.4
See Also:
setReuseAddress(boolean)


"
27,Socket,23,void setKeepAlive(boolean on),True,Enable/disable SO_KEEPALIVE.,"

setKeepAlive
public void setKeepAlive(boolean on)
                  throws SocketException
Enable/disable SO_KEEPALIVE.

Parameters:
on - whether or not to have socket keep alive turned on.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
1.3
See Also:
getKeepAlive()


"
27,Socket,24,boolean getKeepAlive(),True,Tests if SO_KEEPALIVE is enabled.,"

getKeepAlive
public boolean getKeepAlive()
                     throws SocketException
Tests if SO_KEEPALIVE is enabled.

Returns:
a boolean indicating whether or not
         SO_KEEPALIVE is enabled.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
1.3
See Also:
setKeepAlive(boolean)


"
27,Socket,25,void setOOBInline(boolean on),True,"Enable/disable SO_OOBINLINE (receipt of TCP urgent data) By default, this option is disabled and TCP urgent data received on a socket is silently discarded.","

setOOBInline
public void setOOBInline(boolean on)
                  throws SocketException
Enable/disable SO_OOBINLINE
 (receipt of TCP urgent data)

 By default, this option is disabled and TCP urgent data received on a
 socket is silently discarded. If the user wishes to receive urgent data, then
 this option must be enabled. When enabled, urgent data is received
 inline with normal data.
 
 Note, only limited support is provided for handling incoming urgent
 data. In particular, no notification of incoming urgent data is provided
 and there is no capability to distinguish between normal data and urgent
 data unless provided by a higher level protocol.

Parameters:
on - true to enable
           SO_OOBINLINE,
           false to disable.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
1.4
See Also:
getOOBInline()


"
27,Socket,26,boolean getOOBInline(),True,Tests if SO_OOBINLINE is enabled.,"

getOOBInline
public boolean getOOBInline()
                     throws SocketException
Tests if SO_OOBINLINE is enabled.

Returns:
a boolean indicating whether or not
         SO_OOBINLINEis enabled.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
1.4
See Also:
setOOBInline(boolean)


"
27,Socket,27,"void setSoLinger(boolean on, int linger)",True,Enable/disable SO_LINGER with the specified linger time in seconds.,"

setSoLinger
public void setSoLinger(boolean on,
                        int linger)
                 throws SocketException
Enable/disable SO_LINGER with the
 specified linger time in seconds. The maximum timeout value is platform
 specific.

 The setting only affects socket close.

Parameters:
on - whether or not to linger on.
linger - how long to linger for, if on is true.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
IllegalArgumentException - if the linger value is negative.
Since:
JDK1.1
See Also:
getSoLinger()


"
27,Socket,28,int getSendBufferSize(),True,"Get value of the SO_SNDBUF option for this Socket, that is the buffer size used by the platform for output on this Socket.","

getSendBufferSize
public int getSendBufferSize()
                      throws SocketException
Get value of the SO_SNDBUF option
 for this Socket, that is the buffer size used by the platform
 for output on this Socket.

Returns:
the value of the SO_SNDBUF
         option for this Socket.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
1.2
See Also:
setSendBufferSize(int)


"
27,Socket,29,void setSendBufferSize(int size),True,Sets the SO_SNDBUF option to the specified value for this Socket.,"

setSendBufferSize
public void setSendBufferSize(int size)
                       throws SocketException
Sets the SO_SNDBUF option to the
 specified value for this Socket.
 The SO_SNDBUF option is used by the
 platform's networking code as a hint for the size to set the underlying
 network I/O buffers.

 Because SO_SNDBUF is a hint,
 applications that want to verify what size the buffers were set to
 should call getSendBufferSize().

Parameters:
size - the size to which to set the send buffer
 size. This value must be greater than 0.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
IllegalArgumentException - if the
 value is 0 or is negative.
Since:
1.2
See Also:
getSendBufferSize()


"
27,Socket,30,int getReceiveBufferSize(),True,"Gets the value of the SO_RCVBUF option for this Socket, that is the buffer size used by the platform for input on this Socket.","

getReceiveBufferSize
public int getReceiveBufferSize()
                         throws SocketException
Gets the value of the SO_RCVBUF option
 for this Socket, that is the buffer size used by the platform
 for input on this Socket.

Returns:
the value of the SO_RCVBUF
         option for this Socket.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
1.2
See Also:
setReceiveBufferSize(int)


"
27,Socket,31,void setReceiveBufferSize(int size),True,Sets the SO_RCVBUF option to the specified value for this Socket.,"

setReceiveBufferSize
public void setReceiveBufferSize(int size)
                          throws SocketException
Sets the SO_RCVBUF option to the
 specified value for this Socket. The
 SO_RCVBUF option is
 used by the platform's networking code as a hint for the size to set
 the underlying network I/O buffers.

 Increasing the receive buffer size can increase the performance of
 network I/O for high-volume connection, while decreasing it can
 help reduce the backlog of incoming data.

 Because SO_RCVBUF is a hint,
 applications that want to verify what size the buffers were set to
 should call getReceiveBufferSize().

 The value of SO_RCVBUF is also used
 to set the TCP receive window that is advertized to the remote peer.
 Generally, the window size can be modified at any time when a socket is
 connected. However, if a receive window larger than 64K is required then
 this must be requested before the socket is connected to the
 remote peer. There are two cases to be aware of:
 
For sockets accepted from a ServerSocket, this must be done by calling
 ServerSocket.setReceiveBufferSize(int) before the ServerSocket
 is bound to a local address.
For client sockets, setReceiveBufferSize() must be called before
 connecting the socket to its remote peer.

Parameters:
size - the size to which to set the receive buffer
 size. This value must be greater than 0.
Throws:
IllegalArgumentException - if the value is 0 or is
 negative.
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
1.2
See Also:
getReceiveBufferSize(), 
ServerSocket.setReceiveBufferSize(int)


"
27,Socket,32,"void setPerformancePreferences(int connectionTime, int latency, int bandwidth)",True,Sets performance preferences for this socket.,"

setPerformancePreferences
public void setPerformancePreferences(int connectionTime,
                                      int latency,
                                      int bandwidth)
Sets performance preferences for this socket.

  Sockets use the TCP/IP protocol by default.  Some implementations
 may offer alternative protocols which have different performance
 characteristics than TCP/IP.  This method allows the application to
 express its own preferences as to how these tradeoffs should be made
 when the implementation chooses from the available protocols.

  Performance preferences are described by three integers
 whose values indicate the relative importance of short connection time,
 low latency, and high bandwidth.  The absolute values of the integers
 are irrelevant; in order to choose a protocol the values are simply
 compared, with larger values indicating stronger preferences. Negative
 values represent a lower priority than positive values. If the
 application prefers short connection time over both low latency and high
 bandwidth, for example, then it could invoke this method with the values
 (1, 0, 0).  If the application prefers high bandwidth above low
 latency, and low latency above short connection time, then it could
 invoke this method with the values (0, 1, 2).

  Invoking this method after this socket has been connected
 will have no effect.

Parameters:
connectionTime - An int expressing the relative importance of a short
         connection time
latency - An int expressing the relative importance of low
         latency
bandwidth - An int expressing the relative importance of high
         bandwidth
Since:
1.5


"
27,Socket,33,void shutdownInput(),True,"Places the input stream for this socket at ""end of stream"".","

shutdownInput
public void shutdownInput()
                   throws IOException
Places the input stream for this socket at ""end of stream"".
 Any data sent to the input stream side of the socket is acknowledged
 and then silently discarded.
 
 If you read from a socket input stream after invoking this method on the
 socket, the stream's available method will return 0, and its
 read methods will return -1 (end of stream).

Throws:
IOException - if an I/O error occurs when shutting down this
 socket.
Since:
1.3
See Also:
shutdownOutput(), 
close(), 
setSoLinger(boolean, int), 
isInputShutdown()


"
27,Socket,34,void shutdownOutput(),True,Disables the output stream for this socket.,"

shutdownOutput
public void shutdownOutput()
                    throws IOException
Disables the output stream for this socket.
 For a TCP socket, any previously written data will be sent
 followed by TCP's normal connection termination sequence.

 If you write to a socket output stream after invoking
 shutdownOutput() on the socket, the stream will throw
 an IOException.

Throws:
IOException - if an I/O error occurs when shutting down this
 socket.
Since:
1.3
See Also:
shutdownInput(), 
close(), 
setSoLinger(boolean, int), 
isOutputShutdown()


"
27,Socket,35,void sendUrgentData(int data),True,Send one byte of urgent data on the socket.,"

sendUrgentData
public void sendUrgentData(int data)
                    throws IOException
Send one byte of urgent data on the socket. The byte to be sent is the lowest eight
 bits of the data parameter. The urgent byte is
 sent after any preceding writes to the socket OutputStream
 and before any future writes to the OutputStream.

Parameters:
data - The byte of data to send
Throws:
IOException - if there is an error
  sending the data.
Since:
1.4


"
27,Socket,36,int getTrafficClass(),True,Gets traffic class or type-of-service in the IP header for packets sent from this Socket,"

getTrafficClass
public int getTrafficClass()
                    throws SocketException
Gets traffic class or type-of-service in the IP header
 for packets sent from this Socket
 
 As the underlying network implementation may ignore the
 traffic class or type-of-service set using setTrafficClass(int)
 this method may return a different value than was previously
 set using the setTrafficClass(int) method on this Socket.

Returns:
the traffic class or type-of-service already set
Throws:
SocketException - if there is an error obtaining the
 traffic class or type-of-service value.
Since:
1.4
See Also:
setTrafficClass(int), 
SocketOptions.IP_TOS


"
27,Socket,37,void setTrafficClass(int tc),True,Sets traffic class or type-of-service octet in the IP header for packets sent from this Socket.,"

setTrafficClass
public void setTrafficClass(int tc)
                     throws SocketException
Sets traffic class or type-of-service octet in the IP
 header for packets sent from this Socket.
 As the underlying network implementation may ignore this
 value applications should consider it a hint.

  The tc must be in the range 0 <= tc <=
 255 or an IllegalArgumentException will be thrown.
 Notes:
 For Internet Protocol v4 the value consists of an
 integer, the least significant 8 bits of which
 represent the value of the TOS octet in IP packets sent by
 the socket.
 RFC 1349 defines the TOS values as follows:

 
IPTOS_LOWCOST (0x02)
IPTOS_RELIABILITY (0x04)
IPTOS_THROUGHPUT (0x08)
IPTOS_LOWDELAY (0x10)

 The last low order bit is always ignored as this
 corresponds to the MBZ (must be zero) bit.
 
 Setting bits in the precedence field may result in a
 SocketException indicating that the operation is not
 permitted.
 
 As RFC 1122 section 4.2.4.2 indicates, a compliant TCP
 implementation should, but is not required to, let application
 change the TOS field during the lifetime of a connection.
 So whether the type-of-service field can be changed after the
 TCP connection has been established depends on the implementation
 in the underlying platform. Applications should not assume that
 they can change the TOS field after the connection.
 
 For Internet Protocol v6 tc is the value that
 would be placed into the sin6_flowinfo field of the IP header.

Parameters:
tc - an int value for the bitset.
Throws:
SocketException - if there is an error setting the
 traffic class or type-of-service
Since:
1.4
See Also:
getTrafficClass(), 
SocketOptions.IP_TOS


"
27,Socket,38,int getReceiveBufferSize(),True,"Gets the value of the SO_RCVBUF option for this Socket, that is the buffer size used by the platform for input on this Socket.","

getReceiveBufferSize
public int getReceiveBufferSize()
                         throws SocketException
Gets the value of the SO_RCVBUF option
 for this Socket, that is the buffer size used by the platform
 for input on this Socket.

Returns:
the value of the SO_RCVBUF
         option for this Socket.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
1.2
See Also:
setReceiveBufferSize(int)


"
27,Socket,39,void setReceiveBufferSize(int size),True,Sets the SO_RCVBUF option to the specified value for this Socket.,"

setReceiveBufferSize
public void setReceiveBufferSize(int size)
                          throws SocketException
Sets the SO_RCVBUF option to the
 specified value for this Socket. The
 SO_RCVBUF option is
 used by the platform's networking code as a hint for the size to set
 the underlying network I/O buffers.

 Increasing the receive buffer size can increase the performance of
 network I/O for high-volume connection, while decreasing it can
 help reduce the backlog of incoming data.

 Because SO_RCVBUF is a hint,
 applications that want to verify what size the buffers were set to
 should call getReceiveBufferSize().

 The value of SO_RCVBUF is also used
 to set the TCP receive window that is advertized to the remote peer.
 Generally, the window size can be modified at any time when a socket is
 connected. However, if a receive window larger than 64K is required then
 this must be requested before the socket is connected to the
 remote peer. There are two cases to be aware of:
 
For sockets accepted from a ServerSocket, this must be done by calling
 ServerSocket.setReceiveBufferSize(int) before the ServerSocket
 is bound to a local address.
For client sockets, setReceiveBufferSize() must be called before
 connecting the socket to its remote peer.

Parameters:
size - the size to which to set the receive buffer
 size. This value must be greater than 0.
Throws:
IllegalArgumentException - if the value is 0 or is
 negative.
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
1.2
See Also:
getReceiveBufferSize(), 
ServerSocket.setReceiveBufferSize(int)


"
27,Socket,40,int getSendBufferSize(),True,"Get value of the SO_SNDBUF option for this Socket, that is the buffer size used by the platform for output on this Socket.","

getSendBufferSize
public int getSendBufferSize()
                      throws SocketException
Get value of the SO_SNDBUF option
 for this Socket, that is the buffer size used by the platform
 for output on this Socket.

Returns:
the value of the SO_SNDBUF
         option for this Socket.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
1.2
See Also:
setSendBufferSize(int)


"
27,Socket,41,void setSendBufferSize(int size),True,Sets the SO_SNDBUF option to the specified value for this Socket.,"

setSendBufferSize
public void setSendBufferSize(int size)
                       throws SocketException
Sets the SO_SNDBUF option to the
 specified value for this Socket.
 The SO_SNDBUF option is used by the
 platform's networking code as a hint for the size to set the underlying
 network I/O buffers.

 Because SO_SNDBUF is a hint,
 applications that want to verify what size the buffers were set to
 should call getSendBufferSize().

Parameters:
size - the size to which to set the send buffer
 size. This value must be greater than 0.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
IllegalArgumentException - if the
 value is 0 or is negative.
Since:
1.2
See Also:
getSendBufferSize()


"
27,Socket,42,"void setPerformancePreferences(int connectionTime, int latency, int bandwidth)",True,Sets performance preferences for this socket.,"

setPerformancePreferences
public void setPerformancePreferences(int connectionTime,
                                      int latency,
                                      int bandwidth)
Sets performance preferences for this socket.

  Sockets use the TCP/IP protocol by default.  Some implementations
 may offer alternative protocols which have different performance
 characteristics than TCP/IP.  This method allows the application to
 express its own preferences as to how these tradeoffs should be made
 when the implementation chooses from the available protocols.

  Performance preferences are described by three integers
 whose values indicate the relative importance of short connection time,
 low latency, and high bandwidth.  The absolute values of the integers
 are irrelevant; in order to choose a protocol the values are simply
 compared, with larger values indicating stronger preferences. Negative
 values represent a lower priority than positive values. If the
 application prefers short connection time over both low latency and high
 bandwidth, for example, then it could invoke this method with the values
 (1, 0, 0).  If the application prefers high bandwidth above low
 latency, and low latency above short connection time, then it could
 invoke this method with the values (0, 1, 2).

  Invoking this method after this socket has been connected
 will have no effect.

Parameters:
connectionTime - An int expressing the relative importance of a short
         connection time
latency - An int expressing the relative importance of low
         latency
bandwidth - An int expressing the relative importance of high
         bandwidth
Since:
1.5


"
27,Socket,43,void shutdownInput(),True,"Places the input stream for this socket at ""end of stream"".","

shutdownInput
public void shutdownInput()
                   throws IOException
Places the input stream for this socket at ""end of stream"".
 Any data sent to the input stream side of the socket is acknowledged
 and then silently discarded.
 
 If you read from a socket input stream after invoking this method on the
 socket, the stream's available method will return 0, and its
 read methods will return -1 (end of stream).

Throws:
IOException - if an I/O error occurs when shutting down this
 socket.
Since:
1.3
See Also:
shutdownOutput(), 
close(), 
setSoLinger(boolean, int), 
isInputShutdown()


"
27,Socket,44,void shutdownOutput(),True,Disables the output stream for this socket.,"

shutdownOutput
public void shutdownOutput()
                    throws IOException
Disables the output stream for this socket.
 For a TCP socket, any previously written data will be sent
 followed by TCP's normal connection termination sequence.

 If you write to a socket output stream after invoking
 shutdownOutput() on the socket, the stream will throw
 an IOException.

Throws:
IOException - if an I/O error occurs when shutting down this
 socket.
Since:
1.3
See Also:
shutdownInput(), 
close(), 
setSoLinger(boolean, int), 
isOutputShutdown()


"
27,Socket,45,void sendUrgentData(int data),True,Send one byte of urgent data on the socket.,"

sendUrgentData
public void sendUrgentData(int data)
                    throws IOException
Send one byte of urgent data on the socket. The byte to be sent is the lowest eight
 bits of the data parameter. The urgent byte is
 sent after any preceding writes to the socket OutputStream
 and before any future writes to the OutputStream.

Parameters:
data - The byte of data to send
Throws:
IOException - if there is an error
  sending the data.
Since:
1.4


"
27,Socket,46,int getTrafficClass(),True,Gets traffic class or type-of-service in the IP header for packets sent from this Socket,"

getTrafficClass
public int getTrafficClass()
                    throws SocketException
Gets traffic class or type-of-service in the IP header
 for packets sent from this Socket
 
 As the underlying network implementation may ignore the
 traffic class or type-of-service set using setTrafficClass(int)
 this method may return a different value than was previously
 set using the setTrafficClass(int) method on this Socket.

Returns:
the traffic class or type-of-service already set
Throws:
SocketException - if there is an error obtaining the
 traffic class or type-of-service value.
Since:
1.4
See Also:
setTrafficClass(int), 
SocketOptions.IP_TOS


"
27,Socket,47,void setTrafficClass(int tc),True,Sets traffic class or type-of-service octet in the IP header for packets sent from this Socket.,"

setTrafficClass
public void setTrafficClass(int tc)
                     throws SocketException
Sets traffic class or type-of-service octet in the IP
 header for packets sent from this Socket.
 As the underlying network implementation may ignore this
 value applications should consider it a hint.

  The tc must be in the range 0 <= tc <=
 255 or an IllegalArgumentException will be thrown.
 Notes:
 For Internet Protocol v4 the value consists of an
 integer, the least significant 8 bits of which
 represent the value of the TOS octet in IP packets sent by
 the socket.
 RFC 1349 defines the TOS values as follows:

 
IPTOS_LOWCOST (0x02)
IPTOS_RELIABILITY (0x04)
IPTOS_THROUGHPUT (0x08)
IPTOS_LOWDELAY (0x10)

 The last low order bit is always ignored as this
 corresponds to the MBZ (must be zero) bit.
 
 Setting bits in the precedence field may result in a
 SocketException indicating that the operation is not
 permitted.
 
 As RFC 1122 section 4.2.4.2 indicates, a compliant TCP
 implementation should, but is not required to, let application
 change the TOS field during the lifetime of a connection.
 So whether the type-of-service field can be changed after the
 TCP connection has been established depends on the implementation
 in the underlying platform. Applications should not assume that
 they can change the TOS field after the connection.
 
 For Internet Protocol v6 tc is the value that
 would be placed into the sin6_flowinfo field of the IP header.

Parameters:
tc - an int value for the bitset.
Throws:
SocketException - if there is an error setting the
 traffic class or type-of-service
Since:
1.4
See Also:
getTrafficClass(), 
SocketOptions.IP_TOS


"
27,Socket,48,int getReceiveBufferSize(),True,"Gets the value of the SO_RCVBUF option for this Socket, that is the buffer size used by the platform for input on this Socket.","

getReceiveBufferSize
public int getReceiveBufferSize()
                         throws SocketException
Gets the value of the SO_RCVBUF option
 for this Socket, that is the buffer size used by the platform
 for input on this Socket.

Returns:
the value of the SO_RCVBUF
         option for this Socket.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
1.2
See Also:
setReceiveBufferSize(int)


"
27,Socket,49,void setReceiveBufferSize(int size),True,Sets the SO_RCVBUF option to the specified value for this Socket.,"

setReceiveBufferSize
public void setReceiveBufferSize(int size)
                          throws SocketException
Sets the SO_RCVBUF option to the
 specified value for this Socket. The
 SO_RCVBUF option is
 used by the platform's networking code as a hint for the size to set
 the underlying network I/O buffers.

 Increasing the receive buffer size can increase the performance of
 network I/O for high-volume connection, while decreasing it can
 help reduce the backlog of incoming data.

 Because SO_RCVBUF is a hint,
 applications that want to verify what size the buffers were set to
 should call getReceiveBufferSize().

 The value of SO_RCVBUF is also used
 to set the TCP receive window that is advertized to the remote peer.
 Generally, the window size can be modified at any time when a socket is
 connected. However, if a receive window larger than 64K is required then
 this must be requested before the socket is connected to the
 remote peer. There are two cases to be aware of:
 
For sockets accepted from a ServerSocket, this must be done by calling
 ServerSocket.setReceiveBufferSize(int) before the ServerSocket
 is bound to a local address.
For client sockets, setReceiveBufferSize() must be called before
 connecting the socket to its remote peer.

Parameters:
size - the size to which to set the receive buffer
 size. This value must be greater than 0.
Throws:
IllegalArgumentException - if the value is 0 or is
 negative.
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
1.2
See Also:
getReceiveBufferSize(), 
ServerSocket.setReceiveBufferSize(int)


"
27,Socket,50,int getSendBufferSize(),True,"Get value of the SO_SNDBUF option for this Socket, that is the buffer size used by the platform for output on this Socket.","

getSendBufferSize
public int getSendBufferSize()
                      throws SocketException
Get value of the SO_SNDBUF option
 for this Socket, that is the buffer size used by the platform
 for output on this Socket.

Returns:
the value of the SO_SNDBUF
         option for this Socket.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
1.2
See Also:
setSendBufferSize(int)


"
27,Socket,51,void setSendBufferSize(int size),True,Sets the SO_SNDBUF option to the specified value for this Socket.,"

setSendBufferSize
public void setSendBufferSize(int size)
                       throws SocketException
Sets the SO_SNDBUF option to the
 specified value for this Socket.
 The SO_SNDBUF option is used by the
 platform's networking code as a hint for the size to set the underlying
 network I/O buffers.

 Because SO_SNDBUF is a hint,
 applications that want to verify what size the buffers were set to
 should call getSendBufferSize().

Parameters:
size - the size to which to set the send buffer
 size. This value must be greater than 0.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
IllegalArgumentException - if the
 value is 0 or is negative.
Since:
1.2
See Also:
getSendBufferSize()


"
27,Socket,52,"void setPerformancePreferences(int connectionTime, int latency, int bandwidth)",True,Sets performance preferences for this socket.,"

setPerformancePreferences
public void setPerformancePreferences(int connectionTime,
                                      int latency,
                                      int bandwidth)
Sets performance preferences for this socket.

  Sockets use the TCP/IP protocol by default.  Some implementations
 may offer alternative protocols which have different performance
 characteristics than TCP/IP.  This method allows the application to
 express its own preferences as to how these tradeoffs should be made
 when the implementation chooses from the available protocols.

  Performance preferences are described by three integers
 whose values indicate the relative importance of short connection time,
 low latency, and high bandwidth.  The absolute values of the integers
 are irrelevant; in order to choose a protocol the values are simply
 compared, with larger values indicating stronger preferences. Negative
 values represent a lower priority than positive values. If the
 application prefers short connection time over both low latency and high
 bandwidth, for example, then it could invoke this method with the values
 (1, 0, 0).  If the application prefers high bandwidth above low
 latency, and low latency above short connection time, then it could
 invoke this method with the values (0, 1, 2).

  Invoking this method after this socket has been connected
 will have no effect.

Parameters:
connectionTime - An int expressing the relative importance of a short
         connection time
latency - An int expressing the relative importance of low
         latency
bandwidth - An int expressing the relative importance of high
         bandwidth
Since:
1.5


"
27,Socket,53,void shutdownInput(),True,"Places the input stream for this socket at ""end of stream"".","

shutdownInput
public void shutdownInput()
                   throws IOException
Places the input stream for this socket at ""end of stream"".
 Any data sent to the input stream side of the socket is acknowledged
 and then silently discarded.
 
 If you read from a socket input stream after invoking this method on the
 socket, the stream's available method will return 0, and its
 read methods will return -1 (end of stream).

Throws:
IOException - if an I/O error occurs when shutting down this
 socket.
Since:
1.3
See Also:
shutdownOutput(), 
close(), 
setSoLinger(boolean, int), 
isInputShutdown()


"
27,Socket,54,void shutdownOutput(),True,Disables the output stream for this socket.,"

shutdownOutput
public void shutdownOutput()
                    throws IOException
Disables the output stream for this socket.
 For a TCP socket, any previously written data will be sent
 followed by TCP's normal connection termination sequence.

 If you write to a socket output stream after invoking
 shutdownOutput() on the socket, the stream will throw
 an IOException.

Throws:
IOException - if an I/O error occurs when shutting down this
 socket.
Since:
1.3
See Also:
shutdownInput(), 
close(), 
setSoLinger(boolean, int), 
isOutputShutdown()


"
27,Socket,55,void sendUrgentData(int data),True,Send one byte of urgent data on the socket.,"

sendUrgentData
public void sendUrgentData(int data)
                    throws IOException
Send one byte of urgent data on the socket. The byte to be sent is the lowest eight
 bits of the data parameter. The urgent byte is
 sent after any preceding writes to the socket OutputStream
 and before any future writes to the OutputStream.

Parameters:
data - The byte of data to send
Throws:
IOException - if there is an error
  sending the data.
Since:
1.4


"
27,Socket,56,int getTrafficClass(),True,Gets traffic class or type-of-service in the IP header for packets sent from this Socket,"

getTrafficClass
public int getTrafficClass()
                    throws SocketException
Gets traffic class or type-of-service in the IP header
 for packets sent from this Socket
 
 As the underlying network implementation may ignore the
 traffic class or type-of-service set using setTrafficClass(int)
 this method may return a different value than was previously
 set using the setTrafficClass(int) method on this Socket.

Returns:
the traffic class or type-of-service already set
Throws:
SocketException - if there is an error obtaining the
 traffic class or type-of-service value.
Since:
1.4
See Also:
setTrafficClass(int), 
SocketOptions.IP_TOS


"
27,Socket,57,void setTrafficClass(int tc),True,Sets traffic class or type-of-service octet in the IP header for packets sent from this Socket.,"

setTrafficClass
public void setTrafficClass(int tc)
                     throws SocketException
Sets traffic class or type-of-service octet in the IP
 header for packets sent from this Socket.
 As the underlying network implementation may ignore this
 value applications should consider it a hint.

  The tc must be in the range 0 <= tc <=
 255 or an IllegalArgumentException will be thrown.
 Notes:
 For Internet Protocol v4 the value consists of an
 integer, the least significant 8 bits of which
 represent the value of the TOS octet in IP packets sent by
 the socket.
 RFC 1349 defines the TOS values as follows:

 
IPTOS_LOWCOST (0x02)
IPTOS_RELIABILITY (0x04)
IPTOS_THROUGHPUT (0x08)
IPTOS_LOWDELAY (0x10)

 The last low order bit is always ignored as this
 corresponds to the MBZ (must be zero) bit.
 
 Setting bits in the precedence field may result in a
 SocketException indicating that the operation is not
 permitted.
 
 As RFC 1122 section 4.2.4.2 indicates, a compliant TCP
 implementation should, but is not required to, let application
 change the TOS field during the lifetime of a connection.
 So whether the type-of-service field can be changed after the
 TCP connection has been established depends on the implementation
 in the underlying platform. Applications should not assume that
 they can change the TOS field after the connection.
 
 For Internet Protocol v6 tc is the value that
 would be placed into the sin6_flowinfo field of the IP header.

Parameters:
tc - an int value for the bitset.
Throws:
SocketException - if there is an error setting the
 traffic class or type-of-service
Since:
1.4
See Also:
getTrafficClass(), 
SocketOptions.IP_TOS


"
27,Socket,58,int getReceiveBufferSize(),True,"Gets the value of the SO_RCVBUF option for this Socket, that is the buffer size used by the platform for input on this Socket.","

getReceiveBufferSize
public int getReceiveBufferSize()
                         throws SocketException
Gets the value of the SO_RCVBUF option
 for this Socket, that is the buffer size used by the platform
 for input on this Socket.

Returns:
the value of the SO_RCVBUF
         option for this Socket.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
1.2
See Also:
setReceiveBufferSize(int)


"
27,Socket,59,void setReceiveBufferSize(int size),True,Sets the SO_RCVBUF option to the specified value for this Socket.,"

setReceiveBufferSize
public void setReceiveBufferSize(int size)
                          throws SocketException
Sets the SO_RCVBUF option to the
 specified value for this Socket. The
 SO_RCVBUF option is
 used by the platform's networking code as a hint for the size to set
 the underlying network I/O buffers.

 Increasing the receive buffer size can increase the performance of
 network I/O for high-volume connection, while decreasing it can
 help reduce the backlog of incoming data.

 Because SO_RCVBUF is a hint,
 applications that want to verify what size the buffers were set to
 should call getReceiveBufferSize().

 The value of SO_RCVBUF is also used
 to set the TCP receive window that is advertized to the remote peer.
 Generally, the window size can be modified at any time when a socket is
 connected. However, if a receive window larger than 64K is required then
 this must be requested before the socket is connected to the
 remote peer. There are two cases to be aware of:
 
For sockets accepted from a ServerSocket, this must be done by calling
 ServerSocket.setReceiveBufferSize(int) before the ServerSocket
 is bound to a local address.
For client sockets, setReceiveBufferSize() must be called before
 connecting the socket to its remote peer.

Parameters:
size - the size to which to set the receive buffer
 size. This value must be greater than 0.
Throws:
IllegalArgumentException - if the value is 0 or is
 negative.
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
1.2
See Also:
getReceiveBufferSize(), 
ServerSocket.setReceiveBufferSize(int)


"
27,Socket,60,int getSendBufferSize(),True,"Get value of the SO_SNDBUF option for this Socket, that is the buffer size used by the platform for output on this Socket.","

getSendBufferSize
public int getSendBufferSize()
                      throws SocketException
Get value of the SO_SNDBUF option
 for this Socket, that is the buffer size used by the platform
 for output on this Socket.

Returns:
the value of the SO_SNDBUF
         option for this Socket.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
1.2
See Also:
setSendBufferSize(int)


"
27,Socket,61,void setSendBufferSize(int size),True,Sets the SO_SNDBUF option to the specified value for this Socket.,"

setSendBufferSize
public void setSendBufferSize(int size)
                       throws SocketException
Sets the SO_SNDBUF option to the
 specified value for this Socket.
 The SO_SNDBUF option is used by the
 platform's networking code as a hint for the size to set the underlying
 network I/O buffers.

 Because SO_SNDBUF is a hint,
 applications that want to verify what size the buffers were set to
 should call getSendBufferSize().

Parameters:
size - the size to which to set the send buffer
 size. This value must be greater than 0.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
IllegalArgumentException - if the
 value is 0 or is negative.
Since:
1.2
See Also:
getSendBufferSize()


"
27,Socket,62,"void setPerformancePreferences(int connectionTime, int latency, int bandwidth)",True,Sets performance preferences for this socket.,"

setPerformancePreferences
public void setPerformancePreferences(int connectionTime,
                                      int latency,
                                      int bandwidth)
Sets performance preferences for this socket.

  Sockets use the TCP/IP protocol by default.  Some implementations
 may offer alternative protocols which have different performance
 characteristics than TCP/IP.  This method allows the application to
 express its own preferences as to how these tradeoffs should be made
 when the implementation chooses from the available protocols.

  Performance preferences are described by three integers
 whose values indicate the relative importance of short connection time,
 low latency, and high bandwidth.  The absolute values of the integers
 are irrelevant; in order to choose a protocol the values are simply
 compared, with larger values indicating stronger preferences. Negative
 values represent a lower priority than positive values. If the
 application prefers short connection time over both low latency and high
 bandwidth, for example, then it could invoke this method with the values
 (1, 0, 0).  If the application prefers high bandwidth above low
 latency, and low latency above short connection time, then it could
 invoke this method with the values (0, 1, 2).

  Invoking this method after this socket has been connected
 will have no effect.

Parameters:
connectionTime - An int expressing the relative importance of a short
         connection time
latency - An int expressing the relative importance of low
         latency
bandwidth - An int expressing the relative importance of high
         bandwidth
Since:
1.5


"
27,Socket,63,void shutdownInput(),True,"Places the input stream for this socket at ""end of stream"".","

shutdownInput
public void shutdownInput()
                   throws IOException
Places the input stream for this socket at ""end of stream"".
 Any data sent to the input stream side of the socket is acknowledged
 and then silently discarded.
 
 If you read from a socket input stream after invoking this method on the
 socket, the stream's available method will return 0, and its
 read methods will return -1 (end of stream).

Throws:
IOException - if an I/O error occurs when shutting down this
 socket.
Since:
1.3
See Also:
shutdownOutput(), 
close(), 
setSoLinger(boolean, int), 
isInputShutdown()


"
27,Socket,64,void shutdownOutput(),True,Disables the output stream for this socket.,"

shutdownOutput
public void shutdownOutput()
                    throws IOException
Disables the output stream for this socket.
 For a TCP socket, any previously written data will be sent
 followed by TCP's normal connection termination sequence.

 If you write to a socket output stream after invoking
 shutdownOutput() on the socket, the stream will throw
 an IOException.

Throws:
IOException - if an I/O error occurs when shutting down this
 socket.
Since:
1.3
See Also:
shutdownInput(), 
close(), 
setSoLinger(boolean, int), 
isOutputShutdown()


"
27,Socket,65,void sendUrgentData(int data),True,Send one byte of urgent data on the socket.,"

sendUrgentData
public void sendUrgentData(int data)
                    throws IOException
Send one byte of urgent data on the socket. The byte to be sent is the lowest eight
 bits of the data parameter. The urgent byte is
 sent after any preceding writes to the socket OutputStream
 and before any future writes to the OutputStream.

Parameters:
data - The byte of data to send
Throws:
IOException - if there is an error
  sending the data.
Since:
1.4


"
27,Socket,66,int getTrafficClass(),True,Gets traffic class or type-of-service in the IP header for packets sent from this Socket,"

getTrafficClass
public int getTrafficClass()
                    throws SocketException
Gets traffic class or type-of-service in the IP header
 for packets sent from this Socket
 
 As the underlying network implementation may ignore the
 traffic class or type-of-service set using setTrafficClass(int)
 this method may return a different value than was previously
 set using the setTrafficClass(int) method on this Socket.

Returns:
the traffic class or type-of-service already set
Throws:
SocketException - if there is an error obtaining the
 traffic class or type-of-service value.
Since:
1.4
See Also:
setTrafficClass(int), 
SocketOptions.IP_TOS


"
27,Socket,67,void setTrafficClass(int tc),True,Sets traffic class or type-of-service octet in the IP header for packets sent from this Socket.,"

setTrafficClass
public void setTrafficClass(int tc)
                     throws SocketException
Sets traffic class or type-of-service octet in the IP
 header for packets sent from this Socket.
 As the underlying network implementation may ignore this
 value applications should consider it a hint.

  The tc must be in the range 0 <= tc <=
 255 or an IllegalArgumentException will be thrown.
 Notes:
 For Internet Protocol v4 the value consists of an
 integer, the least significant 8 bits of which
 represent the value of the TOS octet in IP packets sent by
 the socket.
 RFC 1349 defines the TOS values as follows:

 
IPTOS_LOWCOST (0x02)
IPTOS_RELIABILITY (0x04)
IPTOS_THROUGHPUT (0x08)
IPTOS_LOWDELAY (0x10)

 The last low order bit is always ignored as this
 corresponds to the MBZ (must be zero) bit.
 
 Setting bits in the precedence field may result in a
 SocketException indicating that the operation is not
 permitted.
 
 As RFC 1122 section 4.2.4.2 indicates, a compliant TCP
 implementation should, but is not required to, let application
 change the TOS field during the lifetime of a connection.
 So whether the type-of-service field can be changed after the
 TCP connection has been established depends on the implementation
 in the underlying platform. Applications should not assume that
 they can change the TOS field after the connection.
 
 For Internet Protocol v6 tc is the value that
 would be placed into the sin6_flowinfo field of the IP header.

Parameters:
tc - an int value for the bitset.
Throws:
SocketException - if there is an error setting the
 traffic class or type-of-service
Since:
1.4
See Also:
getTrafficClass(), 
SocketOptions.IP_TOS


"
27,Socket,68,int getReceiveBufferSize(),True,"Gets the value of the SO_RCVBUF option for this Socket, that is the buffer size used by the platform for input on this Socket.","

getReceiveBufferSize
public int getReceiveBufferSize()
                         throws SocketException
Gets the value of the SO_RCVBUF option
 for this Socket, that is the buffer size used by the platform
 for input on this Socket.

Returns:
the value of the SO_RCVBUF
         option for this Socket.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
1.2
See Also:
setReceiveBufferSize(int)


"
27,Socket,69,void setReceiveBufferSize(int size),True,Sets the SO_RCVBUF option to the specified value for this Socket.,"

setReceiveBufferSize
public void setReceiveBufferSize(int size)
                          throws SocketException
Sets the SO_RCVBUF option to the
 specified value for this Socket. The
 SO_RCVBUF option is
 used by the platform's networking code as a hint for the size to set
 the underlying network I/O buffers.

 Increasing the receive buffer size can increase the performance of
 network I/O for high-volume connection, while decreasing it can
 help reduce the backlog of incoming data.

 Because SO_RCVBUF is a hint,
 applications that want to verify what size the buffers were set to
 should call getReceiveBufferSize().

 The value of SO_RCVBUF is also used
 to set the TCP receive window that is advertized to the remote peer.
 Generally, the window size can be modified at any time when a socket is
 connected. However, if a receive window larger than 64K is required then
 this must be requested before the socket is connected to the
 remote peer. There are two cases to be aware of:
 
For sockets accepted from a ServerSocket, this must be done by calling
 ServerSocket.setReceiveBufferSize(int) before the ServerSocket
 is bound to a local address.
For client sockets, setReceiveBufferSize() must be called before
 connecting the socket to its remote peer.

Parameters:
size - the size to which to set the receive buffer
 size. This value must be greater than 0.
Throws:
IllegalArgumentException - if the value is 0 or is
 negative.
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
1.2
See Also:
getReceiveBufferSize(), 
ServerSocket.setReceiveBufferSize(int)


"
27,Socket,70,int getSendBufferSize(),True,"Get value of the SO_SNDBUF option for this Socket, that is the buffer size used by the platform for output on this Socket.","

getSendBufferSize
public int getSendBufferSize()
                      throws SocketException
Get value of the SO_SNDBUF option
 for this Socket, that is the buffer size used by the platform
 for output on this Socket.

Returns:
the value of the SO_SNDBUF
         option for this Socket.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
1.2
See Also:
setSendBufferSize(int)


"
27,Socket,71,void setSendBufferSize(int size),True,Sets the SO_SNDBUF option to the specified value for this Socket.,"

setSendBufferSize
public void setSendBufferSize(int size)
                       throws SocketException
Sets the SO_SNDBUF option to the
 specified value for this Socket.
 The SO_SNDBUF option is used by the
 platform's networking code as a hint for the size to set the underlying
 network I/O buffers.

 Because SO_SNDBUF is a hint,
 applications that want to verify what size the buffers were set to
 should call getSendBufferSize().

Parameters:
size - the size to which to set the send buffer
 size. This value must be greater than 0.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
IllegalArgumentException - if the
 value is 0 or is negative.
Since:
1.2
See Also:
getSendBufferSize()


"
28,SocketAddress,1,SocketAddress(),False,,NULL
28,SocketAddress,2,"SocketAddress(InetAddress address, int port)",False,,NULL
28,SocketAddress,3,InetAddress getAddress(),False,,NULL
28,SocketAddress,4,int getPort(),False,,NULL
28,SocketAddress,5,String toString(),False,,NULL
29,SocketImpl,1,protected native void create(boolean stream),False,,NULL
29,SocketImpl,2,"protected native void connect(String host, int port)",False,,NULL
29,SocketImpl,3,"protected native void bind(InetAddress host, int port)",False,,NULL
29,SocketImpl,4,protected native void listen(int backlog),False,,NULL
29,SocketImpl,5,protected native SocketImpl accept(SocketImpl s),False,,NULL
30,SocketPermission,1,"SocketPermission(String name, String actions)",False,,NULL
30,SocketPermission,2,String getActions(),True,Returns the canonical string representation of the actions.,"

getActions
public String getActions()
Returns the canonical string representation of the actions.
 Always returns present actions in the following order:
 connect, listen, accept, resolve.

Specified by:
getActions in class Permission
Returns:
the canonical string representation of the actions.


"
30,SocketPermission,3,String getName(),False,,NULL
30,SocketPermission,4,boolean implies(Permission p),True,"Checks if this socket permission object ""implies"" the specified permission.","

implies
public boolean implies(Permission p)
Checks if this socket permission object ""implies"" the
 specified permission.
 
 More specifically, this method first ensures that all of the following
 are true (and returns false if any of them are not):
 
 p is an instanceof SocketPermission,
  p's actions are a proper subset of this
 object's actions, and
  p's port range is included in this port range. Note:
 port range is ignored when p only contains the action, 'resolve'.
 

 Then implies checks each of the following, in order,
 and for each returns true if the stated condition is true:
 
 If this object was initialized with a single IP address and one of p's
 IP addresses is equal to this object's IP address.
 If this object is a wildcard domain (such as *.sun.com), and
 p's canonical name (the name without any preceding *)
 ends with this object's canonical host name. For example, *.sun.com
 implies *.eng.sun.com.
 If this object was not initialized with a single IP address, and one of this
 object's IP addresses equals one of p's IP addresses.
 If this canonical name equals p's canonical name.
 

 If none of the above are true, implies returns false.

Specified by:
implies in class Permission
Parameters:
p - the permission to check against.
Returns:
true if the specified permission is implied by this object,
 false if not.


"
30,SocketPermission,5,boolean equals(Object obj),True,Checks two SocketPermission objects for equality.,"

equals
public boolean equals(Object obj)
Checks two SocketPermission objects for equality.
 

Specified by:
equals in class Permission
Parameters:
obj - the object to test for equality with this object.
Returns:
true if obj is a SocketPermission, and has the
  same hostname, port range, and actions as this
  SocketPermission object. However, port range will be ignored
  in the comparison if obj only contains the action, 'resolve'.
See Also:
Object.hashCode(), 
HashMap


"
31,StandardSocketOptions,1,SO_BROADCAST,False,,NULL
31,StandardSocketOptions,2,SO_KEEPALIVE,False,,NULL
31,StandardSocketOptions,3,SO_OOBINLINE,False,,NULL
31,StandardSocketOptions,4,SO_REUSEADDR,False,,NULL
31,StandardSocketOptions,5,SO_TIMEOUT,False,,NULL
32,URI,1,URI(String),False,,NULL
32,URI,2,"URI(URI, String)",False,,NULL
32,URI,3,String getScheme(),True,Returns the scheme component of this URI.,"

getScheme
public String getScheme()
Returns the scheme component of this URI.

  The scheme component of a URI, if defined, only contains characters
 in the alphanum category and in the string ""-.+"".  A
 scheme always starts with an alpha character. 

 The scheme component of a URI cannot contain escaped octets, hence this
 method does not perform any decoding.

Returns:
The scheme component of this URI,
          or null if the scheme is undefined


"
32,URI,4,String getSchemeSpecificPart(),True,Returns the decoded scheme-specific part of this URI.,"

getSchemeSpecificPart
public String getSchemeSpecificPart()
Returns the decoded scheme-specific part of this URI.

  The string returned by this method is equal to that returned by the
 getRawSchemeSpecificPart method
 except that all sequences of escaped octets are decoded.  

Returns:
The decoded scheme-specific part of this URI
          (never null)


"
32,URI,5,String getAuthority(),True,Returns the decoded authority component of this URI.,"

getAuthority
public String getAuthority()
Returns the decoded authority component of this URI.

  The string returned by this method is equal to that returned by the
 getRawAuthority method except that all
 sequences of escaped octets are decoded.  

Returns:
The decoded authority component of this URI,
          or null if the authority is undefined


"
32,URI,6,String getPath(),True,Returns the decoded path component of this URI.,"

getPath
public String getPath()
Returns the decoded path component of this URI.

  The string returned by this method is equal to that returned by the
 getRawPath method except that all sequences of
 escaped octets are decoded.  

Returns:
The decoded path component of this URI,
          or null if the path is undefined


"
32,URI,7,String getQuery(),True,Returns the decoded query component of this URI.,"

getQuery
public String getQuery()
Returns the decoded query component of this URI.

  The string returned by this method is equal to that returned by the
 getRawQuery method except that all sequences of
 escaped octets are decoded.  

Returns:
The decoded query component of this URI,
          or null if the query is undefined


"
32,URI,8,String getFragment(),True,Returns the decoded fragment component of this URI.,"

getFragment
public String getFragment()
Returns the decoded fragment component of this URI.

  The string returned by this method is equal to that returned by the
 getRawFragment method except that all
 sequences of escaped octets are decoded.  

Returns:
The decoded fragment component of this URI,
          or null if the fragment is undefined


"
32,URI,9,URI resolve(URI),False,,NULL
32,URI,10,String toString(),True,Returns the content of this URI as a string.,"

toString
public String toString()
Returns the content of this URI as a string.

  If this URI was created by invoking one of the constructors in this
 class then a string equivalent to the original input string, or to the
 string computed from the originally-given components, as appropriate, is
 returned.  Otherwise this URI was created by normalization, resolution,
 or relativization, and so a string is constructed from this URI's
 components according to the rules specified in RFC 2396,
 section 5.2, step 7. 

Overrides:
toString in class Object
Returns:
The string form of this URI


"
33,URL,1,URL(String spec),False,,NULL
33,URL,2,"URL(String protocol, String host, int port, String file)",False,,NULL
33,URL,3,URLConnection openConnection(),True,Returns a URLConnection instance that represents a connection to the remote object referred to by the URL.,"

openConnection
public URLConnection openConnection()
                             throws IOException
Returns a URLConnection instance that
 represents a connection to the remote object referred to by the
 URL.

 A new instance of URLConnection is
 created every time when invoking the
 URLStreamHandler.openConnection(URL) method of the protocol handler for
 this URL.
It should be noted that a URLConnection instance does not establish
 the actual network connection on creation. This will happen only when
 calling URLConnection.connect().
If for the URL's protocol (such as HTTP or JAR), there
 exists a public, specialized URLConnection subclass belonging
 to one of the following packages or one of their subpackages:
 java.lang, java.io, java.util, java.net, the connection
 returned will be of that subclass. For example, for HTTP an
 HttpURLConnection will be returned, and for JAR a
 JarURLConnection will be returned.

Returns:
a URLConnection linking
             to the URL.
Throws:
IOException - if an I/O exception occurs.
See Also:
URL(java.lang.String, java.lang.String,
             int, java.lang.String)


"
33,URL,4,String toString(),True,Constructs a string representation of this URL.,"

toString
public String toString()
Constructs a string representation of this URL. The
 string is created by calling the toExternalForm
 method of the stream protocol handler for this object.

Overrides:
toString in class Object
Returns:
a string representation of this object.
See Also:
URL(java.lang.String, java.lang.String, int,
                  java.lang.String), 
URLStreamHandler.toExternalForm(java.net.URL)


"
33,URL,5,URLConnection getContent(),False,,NULL
33,URL,6,URLConnection getContent(URLConnection.CacheRequest cachereq),False,,NULL
33,URL,7,"URLConnection getContent(URLConnection.CacheRequest cachereq, int connectTimeout)",False,,NULL
33,URL,8,"URLConnection getContent(URLConnection.CacheRequest cachereq, int connectTimeout, int readTimeout)",False,,NULL
33,URL,9,"URLConnection getContent(URLConnection.CacheRequest cachereq, int connectTimeout, int readTimeout, boolean useCaches)",False,,NULL
33,URL,10,"URLConnection getContent(URLConnection.CacheRequest cachereq, int connectTimeout, int readTimeout, boolean useCaches, int ifModifiedSince)",False,,NULL
33,URL,11,"URLConnection getContent(URLConnection.CacheRequest cachereq, int connectTimeout, int readTimeout, boolean useCaches, int ifModifiedSince, int ifUnmodifiedSince)",False,,NULL
33,URL,12,"URLConnection getContent(URLConnection.CacheRequest cachereq, int connectTimeout, int readTimeout, boolean useCaches, int ifModifiedSince, int ifUnmodifiedSince, int ifNoneMatch)",False,,NULL
33,URL,13,"URLConnection getContent(URLConnection.CacheRequest cachereq, int connectTimeout, int readTimeout, boolean useCaches, int ifModifiedSince, int ifUnmodifiedSince, int ifNoneMatch, int ifMatch)",False,,NULL
33,URL,14,"URLConnection getContent(URLConnection.CacheRequest cachereq, int connectTimeout, int readTimeout, boolean useCaches, int ifModifiedSince, int ifUnmodifiedSince, int ifNoneMatch, int ifMatch, int ifRange)",False,,NULL
33,URL,15,"URLConnection getContent(URLConnection.CacheRequest cachereq, int connectTimeout, int readTimeout, boolean useCaches, int ifModifiedSince, int ifUnmodifiedSince, int ifNoneMatch, int ifMatch, int ifRange, int range)",False,,NULL
34,URLClassLoader,1,URLClassLoader(URL[] urls),False,,NULL
34,URLClassLoader,2,"URLClassLoader(URL[] urls, ClassLoader parent)",False,,NULL
34,URLClassLoader,3,"URLClassLoader(URL[] urls, ClassLoader parent, URLStreamHandlerFactory factory)",False,,NULL
34,URLClassLoader,4,Class<?> loadClass(String name) throws ClassNotFoundException,False,,NULL
34,URLClassLoader,5,URL findResource(String name),True,Finds the resource with the specified name on the URL search path.,"

findResource
public URL findResource(String name)
Finds the resource with the specified name on the URL search path.

Overrides:
findResource in class ClassLoader
Parameters:
name - the name of the resource
Returns:
a URL for the resource, or null
 if the resource could not be found, or if the loader is closed.


"
34,URLClassLoader,6,Enumeration<URL> findResources(String name) throws IOException,True,Returns an Enumeration of URLs representing all of the resources on the URL search path having the specified name.,"

findResources
public Enumeration<URL> findResources(String name)
                               throws IOException
Returns an Enumeration of URLs representing all of the resources
 on the URL search path having the specified name.

Overrides:
findResources in class ClassLoader
Parameters:
name - the resource name
Returns:
an Enumeration of URLs
         If the loader is closed, the Enumeration will be empty.
Throws:
IOException - if an I/O exception occurs


"
34,URLClassLoader,7,void close() throws IOException,True,"Closes this URLClassLoader, so that it can no longer be used to load new classes or resources that are defined by this loader.","

close
public void close()
           throws IOException
Closes this URLClassLoader, so that it can no longer be used to load
 new classes or resources that are defined by this loader.
 Classes and resources defined by any of this loader's parents in the
 delegation hierarchy are still accessible. Also, any classes or resources
 that are already loaded, are still accessible.
 
 In the case of jar: and file: URLs, it also closes any files
 that were opened by it. If another thread is loading a
 class when the close method is invoked, then the result of
 that load is undefined.
 
 The method makes a best effort attempt to close all opened files,
 by catching IOExceptions internally. Unchecked exceptions
 and errors are not caught. Calling close on an already closed
 loader has no effect.
 

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Throws:
IOException - if closing any file opened by this class loader
 resulted in an IOException. Any such exceptions are caught internally.
 If only one is caught, then it is re-thrown. If more than one exception
 is caught, then the second and following exceptions are added
 as suppressed exceptions of the first one caught, which is then re-thrown.
SecurityException - if a security manager is set, and it denies
   RuntimePermission(""closeClassLoader"")
Since:
1.7


"
34,URLClassLoader,8,URL getResource(String name),False,,NULL
34,URLClassLoader,9,"URL getResource(String name, String path)",False,,NULL
34,URLClassLoader,10,URL getResourceFromPath(String name),False,,NULL
34,URLClassLoader,11,"URL getResourceFromPath(String name, String path)",False,,NULL
34,URLClassLoader,12,URL getResourceFromJar(String name),False,,NULL
34,URLClassLoader,13,"URL getResourceFromJar(String name, String path)",False,,NULL
34,URLClassLoader,14,"URL getResourceFromJar(String name, String path, String jar)",False,,NULL
34,URLClassLoader,15,"URL getResourceFromJar(String name, String path, String jar, String jarPath)",False,,NULL
34,URLClassLoader,16,"URL getResourceFromJar(String name, String path, String jar, String jarPath, String jarFile)",False,,NULL
34,URLClassLoader,17,"URL getResourceFromJar(String name, String path, String jar, String jarPath, String jarFile, String jarFilePath)",False,,NULL
34,URLClassLoader,18,"URL getResourceFromJar(String name, String path, String jar, String jarPath, String jarFile, String jarFilePath, String jarFilePathJar)",False,,NULL
34,URLClassLoader,19,"URL getResourceFromJar(String name, String path, String jar, String jarPath, String jarFile, String jarFilePath, String jarFilePathJar, String jarFilePathJarPath)",False,,NULL
34,URLClassLoader,20,"URL getResourceFromJar(String name, String path, String jar, String jarPath, String jarFile, String jarFilePath, String jarFilePathJar, String jarFilePathJarPath, String jarFilePathJarPathJar)",False,,NULL
35,URLConnection,1,URL getURL(),True,Returns the value of this URLConnection's URL field.,"

getURL
public URL getURL()
Returns the value of this URLConnection's URL
 field.

Returns:
the value of this URLConnection's URL
          field.
See Also:
url


"
35,URLConnection,2,void connect() throws IOException,True,"Opens a communications link to the resource referenced by this URL, if such a connection has not already been established.","

connect
public abstract void connect()
                      throws IOException
Opens a communications link to the resource referenced by this
 URL, if such a connection has not already been established.
 
 If the connect method is called when the connection
 has already been opened (indicated by the connected
 field having the value true), the call is ignored.
 
 URLConnection objects go through two phases: first they are
 created, then they are connected.  After being created, and
 before being connected, various options can be specified
 (e.g., doInput and UseCaches).  After connecting, it is an
 error to try to set them.  Operations that depend on being
 connected, like getContentLength, will implicitly perform the
 connection, if necessary.

Throws:
SocketTimeoutException - if the timeout expires before
               the connection can be established
IOException - if an I/O error occurs while opening the
               connection.
See Also:
connected, 
getConnectTimeout(), 
setConnectTimeout(int)


"
35,URLConnection,3,InputStream getInputStream() throws IOException,True,Returns an input stream that reads from this open connection.,"

getInputStream
public InputStream getInputStream()
                           throws IOException
Returns an input stream that reads from this open connection.

 A SocketTimeoutException can be thrown when reading from the
 returned input stream if the read timeout expires before data
 is available for read.

Returns:
an input stream that reads from this open connection.
Throws:
IOException - if an I/O error occurs while
               creating the input stream.
UnknownServiceException - if the protocol does not support
               input.
See Also:
setReadTimeout(int), 
getReadTimeout()


"
35,URLConnection,4,OutputStream getOutputStream() throws IOException,True,Returns an output stream that writes to this connection.,"

getOutputStream
public OutputStream getOutputStream()
                             throws IOException
Returns an output stream that writes to this connection.

Returns:
an output stream that writes to this connection.
Throws:
IOException - if an I/O error occurs while
               creating the output stream.
UnknownServiceException - if the protocol does not support
               output.


"
35,URLConnection,5,"void setRequestProperty(String key, String value)",True,Sets the general request property.,"

setRequestProperty
public void setRequestProperty(String key,
                               String value)
Sets the general request property. If a property with the key already
 exists, overwrite its value with the new value.

  NOTE: HTTP requires all request properties which can
 legally have multiple instances with the same key
 to use a comma-separated list syntax which enables multiple
 properties to be appended into a single property.

Parameters:
key - the keyword by which the request is known
                  (e.g., ""Accept"").
value - the value associated with it.
Throws:
IllegalStateException - if already connected
NullPointerException - if key is null
See Also:
getRequestProperty(java.lang.String)


"
35,URLConnection,6,String getContentType(),True,Returns the value of the content-type header field.,"

getContentType
public String getContentType()
Returns the value of the content-type header field.

Returns:
the content type of the resource that the URL references,
          or null if not known.
See Also:
getHeaderField(java.lang.String)


"
35,URLConnection,7,int getContentLength(),True,Returns the value of the content-length header field.,"

getContentLength
public int getContentLength()
Returns the value of the content-length header field.
 
Note: getContentLengthLong()
 should be preferred over this method, since it returns a long
 instead and is therefore more portable.

Returns:
the content length of the resource that this connection's URL
          references, -1 if the content length is not known,
          or if the content length is greater than Integer.MAX_VALUE.


"
35,URLConnection,8,long getContentLengthLong(),True,Returns the value of the content-length header field as a long.,"

getContentLengthLong
public long getContentLengthLong()
Returns the value of the content-length header field as a
 long.

Returns:
the content length of the resource that this connection's URL
          references, or -1 if the content length is
          not known.
Since:
7.0


"
35,URLConnection,9,String getContentEncoding(),True,Returns the value of the content-encoding header field.,"

getContentEncoding
public String getContentEncoding()
Returns the value of the content-encoding header field.

Returns:
the content encoding of the resource that the URL references,
          or null if not known.
See Also:
getHeaderField(java.lang.String)


"
35,URLConnection,10,String getHeaderField(String name),True,Returns the value of the named header field.,"

getHeaderField
public String getHeaderField(String name)
Returns the value of the named header field.
 
 If called on a connection that sets the same header multiple times
 with possibly different values, only the last value is returned.

Parameters:
name - the name of a header field.
Returns:
the value of the named header field, or null
          if there is no such field in the header.


"
35,URLConnection,11,"Map<String, List<String>> getHeaderFields()",False,,NULL
35,URLConnection,12,int getResponseCode() throws IOException,False,,NULL
35,URLConnection,13,String getResponseMessage() throws IOException,False,,NULL
35,URLConnection,14,void setDoInput(boolean doInput),True,Sets the value of the doInput field for this URLConnection to the specified value.,"

setDoInput
public void setDoInput(boolean doinput)
Sets the value of the doInput field for this
 URLConnection to the specified value.
 
 A URL connection can be used for input and/or output.  Set the DoInput
 flag to true if you intend to use the URL connection for input,
 false if not.  The default is true.

Parameters:
doinput - the new value.
Throws:
IllegalStateException - if already connected
See Also:
doInput, 
getDoInput()


"
35,URLConnection,15,void setDoOutput(boolean doOutput),True,Sets the value of the doOutput field for this URLConnection to the specified value.,"

setDoOutput
public void setDoOutput(boolean dooutput)
Sets the value of the doOutput field for this
 URLConnection to the specified value.
 
 A URL connection can be used for input and/or output.  Set the DoOutput
 flag to true if you intend to use the URL connection for output,
 false if not.  The default is false.

Parameters:
dooutput - the new value.
Throws:
IllegalStateException - if already connected
See Also:
getDoOutput()


"
35,URLConnection,16,void setUseCaches(boolean useCaches),True,Sets the value of the useCaches field of this URLConnection to the specified value.,"

setUseCaches
public void setUseCaches(boolean usecaches)
Sets the value of the useCaches field of this
 URLConnection to the specified value.
 
 Some protocols do caching of documents.  Occasionally, it is important
 to be able to ""tunnel through"" and ignore the caches (e.g., the
 ""reload"" button in a browser).  If the UseCaches flag on a connection
 is true, the connection is allowed to use whatever caches it can.
  If false, caches are to be ignored.
  The default value comes from DefaultUseCaches, which defaults to
 true.

Parameters:
usecaches - a boolean indicating whether
 or not to allow caching
Throws:
IllegalStateException - if already connected
See Also:
getUseCaches()


"
35,URLConnection,17,void setDefaultUseCaches(boolean defaultUseCaches),True,Sets the default value of the useCaches field to the specified value.,"

setDefaultUseCaches
public void setDefaultUseCaches(boolean defaultusecaches)
Sets the default value of the useCaches field to the
 specified value.

Parameters:
defaultusecaches - the new value.
See Also:
getDefaultUseCaches()


"
35,URLConnection,18,void setRequestMethod(String method) throws ProtocolException,False,,NULL
35,URLConnection,19,void setConnectTimeout(int timeout),True,"Sets a specified timeout value, in milliseconds, to be used when opening a communications link to the resource referenced by this URLConnection.","

setConnectTimeout
public void setConnectTimeout(int timeout)
Sets a specified timeout value, in milliseconds, to be used
 when opening a communications link to the resource referenced
 by this URLConnection.  If the timeout expires before the
 connection can be established, a
 java.net.SocketTimeoutException is raised. A timeout of zero is
 interpreted as an infinite timeout.

  Some non-standard implementation of this method may ignore
 the specified timeout. To see the connect timeout set, please
 call getConnectTimeout().

Parameters:
timeout - an int that specifies the connect
               timeout value in milliseconds
Throws:
IllegalArgumentException - if the timeout parameter is negative
Since:
1.5
See Also:
getConnectTimeout(), 
connect()


"
35,URLConnection,20,void setReadTimeout(int timeout),True,"Sets the read timeout to a specified timeout, in milliseconds.","

setReadTimeout
public void setReadTimeout(int timeout)
Sets the read timeout to a specified timeout, in
 milliseconds. A non-zero value specifies the timeout when
 reading from Input stream when a connection is established to a
 resource. If the timeout expires before there is data available
 for read, a java.net.SocketTimeoutException is raised. A
 timeout of zero is interpreted as an infinite timeout.

 Some non-standard implementation of this method ignores the
 specified timeout. To see the read timeout set, please call
 getReadTimeout().

Parameters:
timeout - an int that specifies the timeout
 value to be used in milliseconds
Throws:
IllegalArgumentException - if the timeout parameter is negative
Since:
1.5
See Also:
getReadTimeout(), 
InputStream.read()


"
36,URLDecoder,1,"String decode(String s, String enc)",True,Decodes a application/x-www-form-urlencoded string using a specific encoding scheme.,"

decode
public static String decode(String s,
                            String enc)
                     throws UnsupportedEncodingException
Decodes a application/x-www-form-urlencoded string using a specific
 encoding scheme.
 The supplied encoding is used to determine
 what characters are represented by any consecutive sequences of the
 form ""%xy"".
 
Note: The 
 World Wide Web Consortium Recommendation states that
 UTF-8 should be used. Not doing so may introduce
 incompatibilities.

Parameters:
s - the String to decode
enc - The name of a supported
    character
    encoding.
Returns:
the newly decoded String
Throws:
UnsupportedEncodingException - If character encoding needs to be consulted, but
             named character encoding is not supported
Since:
1.4
See Also:
URLEncoder.encode(java.lang.String, java.lang.String)


"
36,URLDecoder,2,"String[] decode(String s, String enc, int offset, int len)",False,,NULL
36,URLDecoder,3,String decode(String s),True,"Deprecated. The resulting string may vary depending on the platform's default encoding. Instead, use the decode(String,String) method to specify the encoding.","

decode
@Deprecated
public static String decode(String s)
Deprecated. The resulting string may vary depending on the platform's
          default encoding. Instead, use the decode(String,String) method
          to specify the encoding.
Decodes a x-www-form-urlencoded string.
 The platform's default encoding is used to determine what characters
 are represented by any consecutive sequences of the form
 ""%xy"".

Parameters:
s - the String to decode
Returns:
the newly decoded String


"
36,URLDecoder,4,"String decode(String s, int offset, int len)",False,,NULL
36,URLDecoder,5,"String decode(String s, String enc, int offset, int len, String enc2)",False,,NULL
37,URLEncoder,1,"String encode(String s, String enc)",True,Translates a string into application/x-www-form-urlencoded format using a specific encoding scheme.,"

encode
public static String encode(String s,
                            String enc)
                     throws UnsupportedEncodingException
Translates a string into application/x-www-form-urlencoded
 format using a specific encoding scheme. This method uses the
 supplied encoding scheme to obtain the bytes for unsafe
 characters.
 
Note: The 
 World Wide Web Consortium Recommendation states that
 UTF-8 should be used. Not doing so may introduce
 incompatibilities.

Parameters:
s - String to be translated.
enc - The name of a supported
    character
    encoding.
Returns:
the translated String.
Throws:
UnsupportedEncodingException - If the named encoding is not supported
Since:
1.4
See Also:
URLDecoder.decode(java.lang.String, java.lang.String)


"
37,URLEncoder,2,String encode(String s),True,"Deprecated. The resulting string may vary depending on the platform's default encoding. Instead, use the encode(String,String) method to specify the encoding.","

encode
@Deprecated
public static String encode(String s)
Deprecated. The resulting string may vary depending on the platform's
             default encoding. Instead, use the encode(String,String)
             method to specify the encoding.
Translates a string into x-www-form-urlencoded
 format. This method uses the platform's default encoding
 as the encoding scheme to obtain the bytes for unsafe characters.

Parameters:
s - String to be translated.
Returns:
the translated String.


"
37,URLEncoder,3,"String encode(String s, Charset charset)",False,,NULL
37,URLEncoder,4,"String encode(String s, String enc, String enc)",False,,NULL
37,URLEncoder,5,"String encode(String s, String enc, String enc)",False,,NULL
38,URLPermission,1,"URLPermission(String url, String actions)",False,,NULL
38,URLPermission,2,String getActions(),True,"Returns the normalized method list and request header list, in the form:","

getActions
public String getActions()
Returns the normalized method list and request
 header list, in the form:
 
      ""method-names : header-names""
 

 where method-names is the list of methods separated by commas
 and header-names is the list of permitted headers separated by commas.
 There is no white space in the returned String. If header-names is empty
 then the colon separator will not be present.

Specified by:
getActions in class Permission
Returns:
the actions of this Permission.


"
38,URLPermission,3,String getURLString(),False,,NULL
38,URLPermission,4,boolean implies(Permission p),True,Checks if this URLPermission implies the given permission.,"

implies
public boolean implies(Permission p)
Checks if this URLPermission implies the given permission.
 Specifically, the following checks are done as if in the
 following sequence:
 
if 'p' is not an instance of URLPermission return false
if any of p's methods are not in this's method list, and if
     this's method list is not equal to ""*"", then return false.
if any of p's headers are not in this's request header list, and if
     this's request header list is not equal to ""*"", then return false.
if this's url scheme is not equal to p's url scheme return false
if the scheme specific part of this's url is '*' return true
if the set of hosts defined by p's url hostrange is not a subset of
     this's url hostrange then return false. For example, ""*.foo.oracle.com""
     is a subset of ""*.oracle.com"". ""foo.bar.oracle.com"" is not
     a subset of ""*.foo.oracle.com""
if the portrange defined by p's url is not a subset of the
     portrange defined by this's url then return false.
 if the path or paths specified by p's url are contained in the
     set of paths specified by this's url, then return true
 otherwise, return false

Some examples of how paths are matched are shown below:
 
Examples of Path Matching
this's pathp's pathmatch
/a/b/a/byes
/a/b/*/a/b/cyes
/a/b/*/a/b/c/dno
/a/b/-/a/b/c/dyes
/a/b/-/a/b/c/d/eyes
/a/b/-/a/b/c/*yes
/a/b/*/a/b/c/-no


Specified by:
implies in class Permission
Parameters:
p - the permission to check against.
Returns:
true if the specified permission is implied by this object,
 false if not.


"
38,URLPermission,5,boolean equals(Object obj),True,"Returns true if, this.getActions().equals(p.getActions()) and p's url equals this's url.","

equals
public boolean equals(Object p)
Returns true if, this.getActions().equals(p.getActions())
 and p's url equals this's url.  Returns false otherwise.

Specified by:
equals in class Permission
Parameters:
p - the object we are testing for equality with this object.
Returns:
true if both Permission objects are equivalent.
See Also:
Object.hashCode(), 
HashMap


"
39,URLStreamHandler,1,protected URLConnection openConnection(URL u),False,,NULL
39,URLStreamHandler,2,"protected URLConnection openConnection(URL u, Proxy p)",False,,NULL
39,URLStreamHandler,3,"protected URLConnection openConnection(URL u, Authenticator a)",False,,NULL
39,URLStreamHandler,4,"protected URLConnection openConnection(URL u, Proxy p, Authenticator a)",False,,NULL
39,URLStreamHandler,5,"protected URLConnection openConnection(URL u, URLStreamHandler handler)",False,,NULL
