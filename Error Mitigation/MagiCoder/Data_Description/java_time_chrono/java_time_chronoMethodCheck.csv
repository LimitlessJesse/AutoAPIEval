Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,AbstractChronology,1,boolean isSupported(TemporalField field),False,,NULL
0,AbstractChronology,2,TemporalField getTemporalField(String fieldName),False,,NULL
0,AbstractChronology,3,TemporalAdjuster getTemporalAdjuster(String adjusterName),False,,NULL
0,AbstractChronology,4,TemporalUnit getDurationUnit(),False,,NULL
0,AbstractChronology,5,TemporalUnit getPeriodUnit(),False,,NULL
0,AbstractChronology,6,TemporalUnit getUnit(String unitName),False,,NULL
0,AbstractChronology,7,TemporalUnit getSmallestUnit(TemporalField field),False,,NULL
0,AbstractChronology,8,TemporalUnit getRangeUnit(TemporalField field),False,,NULL
0,AbstractChronology,9,TemporalUnit getDurationUnit(TemporalField field),False,,NULL
0,AbstractChronology,10,TemporalUnit getPeriodUnit(TemporalField field),False,,NULL
0,AbstractChronology,11,"TemporalUnit getSmallestUnit(TemporalField field, TemporalAmount amount)",False,,NULL
0,AbstractChronology,12,"TemporalUnit getRangeUnit(TemporalField field, TemporalAmount amount)",False,,NULL
0,AbstractChronology,13,"TemporalUnit getDurationUnit(TemporalField field, TemporalAmount amount)",False,,NULL
0,AbstractChronology,14,"TemporalUnit getPeriodUnit(TemporalField field, TemporalAmount amount)",False,,NULL
0,AbstractChronology,15,"TemporalUnit getSmallestUnit(TemporalField field, TemporalAmount amount, TemporalUnit unit)",False,,NULL
0,AbstractChronology,16,"TemporalUnit getRangeUnit(TemporalField field, TemporalAmount amount, TemporalUnit unit)",False,,NULL
0,AbstractChronology,17,"TemporalUnit getDurationUnit(TemporalField field, TemporalAmount amount, TemporalUnit unit)",False,,NULL
0,AbstractChronology,18,"TemporalUnit getPeriodUnit(TemporalField field, TemporalAmount amount, TemporalUnit unit)",False,,NULL
0,AbstractChronology,19,"TemporalUnit getSmallestUnit(TemporalField field, TemporalAmount amount, TemporalUnit unit, TemporalAmount amount2)",False,,NULL
0,AbstractChronology,20,"TemporalUnit getRangeUnit(TemporalField field, TemporalAmount amount, TemporalUnit unit, TemporalAmount amount2)",False,,NULL
0,AbstractChronology,21,"TemporalUnit getDurationUnit(TemporalField field, TemporalAmount amount, TemporalUnit unit, TemporalAmount amount2)",False,,NULL
0,AbstractChronology,22,"TemporalUnit getPeriodUnit(TemporalField field, TemporalAmount amount, TemporalUnit unit, TemporalAmount amount2)",False,,NULL
1,HijrahChronology,1,HijrahChronology getInstance(Locale locale),False,,NULL
1,HijrahChronology,2,"HijrahDate date(int prolepticYear, int month, int dayOfMonth)",True,"Obtains a local date in Hijrah calendar system from the proleptic-year, month-of-year and day-of-month fields.","

date
public HijrahDate date(int prolepticYear,
                       int month,
                       int dayOfMonth)
Obtains a local date in Hijrah calendar system from the
 proleptic-year, month-of-year and day-of-month fields.

Specified by:
date in interface Chronology
Parameters:
prolepticYear - the proleptic-year
month - the month-of-year
dayOfMonth - the day-of-month
Returns:
the Hijrah local date, not null
Throws:
DateTimeException - if unable to create the date


"
1,HijrahChronology,3,"HijrahDate date(int prolepticYear, int month, int dayOfMonth, int era)",False,,NULL
1,HijrahChronology,4,"HijrahDate date(int prolepticYear, int month, int dayOfMonth, int era, int zoneOffset)",False,,NULL
1,HijrahChronology,5,"HijrahDate date(int prolepticYear, int month, int dayOfMonth, int era, int zoneOffset, ZoneId zoneId)",False,,NULL
2,HijrahDate,1,HijrahDate ofEpochDay(long epochDay),False,,NULL
2,HijrahDate,2,"HijrahDate of(int year, int month, int dayOfMonth)",True,"Obtains a HijrahDate of the Islamic Umm Al-Qura calendar from the proleptic-year, month-of-year and day-of-month fields.","

of
public static HijrahDate of(int prolepticYear,
                            int month,
                            int dayOfMonth)
Obtains a HijrahDate of the Islamic Umm Al-Qura calendar
 from the proleptic-year, month-of-year and day-of-month fields.
 
 This returns a HijrahDate with the specified fields.
 The day must be valid for the year and month, otherwise an exception will be thrown.

Parameters:
prolepticYear - the Hijrah proleptic-year
month - the Hijrah month-of-year, from 1 to 12
dayOfMonth - the Hijrah day-of-month, from 1 to 30
Returns:
the date in Hijrah calendar system, not null
Throws:
DateTimeException - if the value of any field is out of range,
  or if the day-of-month is invalid for the month-year


"
2,HijrahDate,3,int getDayOfMonth(),False,,NULL
2,HijrahDate,4,int getDayOfYear(),False,,NULL
2,HijrahDate,5,int getMonthValue(),False,,NULL
2,HijrahDate,6,int getYear(),False,,NULL
2,HijrahDate,7,HijrahDate withYear(int year),False,,NULL
2,HijrahDate,8,HijrahDate withMonth(int month),False,,NULL
2,HijrahDate,9,HijrahDate withDayOfMonth(int dayOfMonth),False,,NULL
2,HijrahDate,10,HijrahDate withDayOfYear(int dayOfYear),False,,NULL
2,HijrahDate,11,HijrahDate plusDays(long days),False,,NULL
2,HijrahDate,12,HijrahDate minusDays(long days),False,,NULL
2,HijrahDate,13,"long until(HijrahDate endDate, ChronoUnit unit)",False,,NULL
2,HijrahDate,14,boolean isLeapYear(),True,"Checks if the year is a leap year, according to the Hijrah calendar system rules.","

isLeapYear
public boolean isLeapYear()
Checks if the year is a leap year, according to the Hijrah calendar system rules.

Specified by:
isLeapYear in interface ChronoLocalDate
Returns:
true if this date is in a leap year


"
2,HijrahDate,15,boolean isBefore(HijrahDate other),False,,NULL
2,HijrahDate,16,boolean isAfter(HijrahDate other),False,,NULL
2,HijrahDate,17,boolean isEqual(HijrahDate other),False,,NULL
2,HijrahDate,18,int compareTo(HijrahDate other),False,,NULL
2,HijrahDate,19,String toString(),True,Returns a string representation of the object.,"

toString
public String toString()
Description copied from class: Object
Returns a string representation of the object. In general, the
 toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method.
 
 The toString method for class Object
 returns a string consisting of the name of the class of which the
 object is an instance, the at-sign character `@', and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words, this method returns a string equal to the
 value of:
 

 getClass().getName() + '@' + Integer.toHexString(hashCode())
 

Specified by:
toString in interface ChronoLocalDate
Overrides:
toString in class Object
Returns:
a string representation of the object.


"
2,HijrahDate,20,int hashCode(),True,A hash code for this date.,"

hashCode
public int hashCode()
A hash code for this date.

Specified by:
hashCode in interface ChronoLocalDate
Returns:
a suitable hash code based only on the Chronology and the date
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
2,HijrahDate,21,boolean equals(Object obj),True,"Compares this date to another date, including the chronology.","

equals
public boolean equals(Object obj)
Compares this date to another date, including the chronology.
 
 Compares this HijrahDate with another ensuring that the date is the same.
 
 Only objects of type HijrahDate are compared, other types return false.
 To compare the dates of two TemporalAccessor instances, including dates
 in two different chronologies, use ChronoField.EPOCH_DAY as a comparator.

Specified by:
equals in interface ChronoLocalDate
Parameters:
obj - the object to check, null returns false
Returns:
true if this is equal to the other date and the Chronologies are equal
See Also:
Object.hashCode(), 
HashMap


"
2,HijrahDate,22,int compareTo(Object obj),False,,NULL
2,HijrahDate,23,"int compareTo(HijrahDate other, ChronoUnit unit)",False,,NULL
2,HijrahDate,24,"int compareTo(HijrahDate other, ChronoField field)",False,,NULL
2,HijrahDate,25,HijrahDate with(TemporalAdjuster adjuster),True,Returns an adjusted object of the same type as this object with the adjustment made.,"

with
public HijrahDate with(TemporalAdjuster adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
 
 This adjusts this date-time according to the rules of the specified adjuster.
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 Some example code indicating how and why this method is used:
 
  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
  date = date.with(lastDayOfMonth());  // static import from Adjusters
  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek
 

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an object of the same type with the specified adjustment made, not null
Throws:
DateTimeException - if unable to make the adjustment.
     For example, if the adjuster requires an ISO chronology
ArithmeticException - if numeric overflow occurs


"
2,HijrahDate,26,HijrahDate with(TemporalAdjusters adjuster),False,,NULL
2,HijrahDate,27,"HijrahDate with(TemporalField field, long newValue)",True,Returns an object of the same type as this object with the specified field altered.,"

with
public HijrahDate with(TemporalField field,
                       long newValue)
Description copied from interface: ChronoLocalDate
Returns an object of the same type as this object with the specified field altered.
 
 This returns a new object based on this one with the value for the specified field changed.
 For example, on a LocalDate, this could be used to set the year, month or day-of-month.
 The returned object will have the same observable type as this object.
 
 In some cases, changing a field is not fully defined. For example, if the target object is
 a date representing the 31st January, then changing the month to February would be unclear.
 In cases like this, the field is responsible for resolving the result. Typically it will choose
 the previous valid date, which would be the last valid day of February in this example.

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
field - the field to set in the result, not null
newValue - the new value of the field in the result
Returns:
an object of the same type with the specified field set, not null


"
2,HijrahDate,28,HijrahDate with(TemporalAdjusters adjuster),False,,NULL
2,HijrahDate,29,HijrahDate with(TemporalAdjuster adjuster),True,Returns an adjusted object of the same type as this object with the adjustment made.,"

with
public HijrahDate with(TemporalAdjuster adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
 
 This adjusts this date-time according to the rules of the specified adjuster.
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 Some example code indicating how and why this method is used:
 
  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
  date = date.with(lastDayOfMonth());  // static import from Adjusters
  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek
 

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an object of the same type with the specified adjustment made, not null
Throws:
DateTimeException - if unable to make the adjustment.
     For example, if the adjuster requires an ISO chronology
ArithmeticException - if numeric overflow occurs


"
2,HijrahDate,30,HijrahDate with(TemporalAdjuster adjuster),True,Returns an adjusted object of the same type as this object with the adjustment made.,"

with
public HijrahDate with(TemporalAdjuster adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
 
 This adjusts this date-time according to the rules of the specified adjuster.
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 Some example code indicating how and why this method is used:
 
  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
  date = date.with(lastDayOfMonth());  // static import from Adjusters
  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek
 

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an object of the same type with the specified adjustment made, not null
Throws:
DateTimeException - if unable to make the adjustment.
     For example, if the adjuster requires an ISO chronology
ArithmeticException - if numeric overflow occurs


"
2,HijrahDate,31,HijrahDate with(TemporalAdjuster adjuster),True,Returns an adjusted object of the same type as this object with the adjustment made.,"

with
public HijrahDate with(TemporalAdjuster adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
 
 This adjusts this date-time according to the rules of the specified adjuster.
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 Some example code indicating how and why this method is used:
 
  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
  date = date.with(lastDayOfMonth());  // static import from Adjusters
  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek
 

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an object of the same type with the specified adjustment made, not null
Throws:
DateTimeException - if unable to make the adjustment.
     For example, if the adjuster requires an ISO chronology
ArithmeticException - if numeric overflow occurs


"
2,HijrahDate,32,HijrahDate with(TemporalAdjuster adjuster),True,Returns an adjusted object of the same type as this object with the adjustment made.,"

with
public HijrahDate with(TemporalAdjuster adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
 
 This adjusts this date-time according to the rules of the specified adjuster.
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 Some example code indicating how and why this method is used:
 
  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
  date = date.with(lastDayOfMonth());  // static import from Adjusters
  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek
 

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an object of the same type with the specified adjustment made, not null
Throws:
DateTimeException - if unable to make the adjustment.
     For example, if the adjuster requires an ISO chronology
ArithmeticException - if numeric overflow occurs


"
2,HijrahDate,33,HijrahDate with(TemporalAdjuster adjuster),True,Returns an adjusted object of the same type as this object with the adjustment made.,"

with
public HijrahDate with(TemporalAdjuster adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
 
 This adjusts this date-time according to the rules of the specified adjuster.
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 Some example code indicating how and why this method is used:
 
  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
  date = date.with(lastDayOfMonth());  // static import from Adjusters
  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek
 

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an object of the same type with the specified adjustment made, not null
Throws:
DateTimeException - if unable to make the adjustment.
     For example, if the adjuster requires an ISO chronology
ArithmeticException - if numeric overflow occurs


"
2,HijrahDate,34,HijrahDate with(TemporalAdjuster adjuster),True,Returns an adjusted object of the same type as this object with the adjustment made.,"

with
public HijrahDate with(TemporalAdjuster adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
 
 This adjusts this date-time according to the rules of the specified adjuster.
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 Some example code indicating how and why this method is used:
 
  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
  date = date.with(lastDayOfMonth());  // static import from Adjusters
  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek
 

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an object of the same type with the specified adjustment made, not null
Throws:
DateTimeException - if unable to make the adjustment.
     For example, if the adjuster requires an ISO chronology
ArithmeticException - if numeric overflow occurs


"
2,HijrahDate,35,HijrahDate with(TemporalAdjuster adjuster),True,Returns an adjusted object of the same type as this object with the adjustment made.,"

with
public HijrahDate with(TemporalAdjuster adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
 
 This adjusts this date-time according to the rules of the specified adjuster.
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 Some example code indicating how and why this method is used:
 
  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
  date = date.with(lastDayOfMonth());  // static import from Adjusters
  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek
 

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an object of the same type with the specified adjustment made, not null
Throws:
DateTimeException - if unable to make the adjustment.
     For example, if the adjuster requires an ISO chronology
ArithmeticException - if numeric overflow occurs


"
2,HijrahDate,36,HijrahDate with(TemporalAdjuster adjuster),True,Returns an adjusted object of the same type as this object with the adjustment made.,"

with
public HijrahDate with(TemporalAdjuster adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
 
 This adjusts this date-time according to the rules of the specified adjuster.
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 Some example code indicating how and why this method is used:
 
  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
  date = date.with(lastDayOfMonth());  // static import from Adjusters
  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek
 

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an object of the same type with the specified adjustment made, not null
Throws:
DateTimeException - if unable to make the adjustment.
     For example, if the adjuster requires an ISO chronology
ArithmeticException - if numeric overflow occurs


"
2,HijrahDate,37,HijrahDate with(TemporalAdjuster adjuster),True,Returns an adjusted object of the same type as this object with the adjustment made.,"

with
public HijrahDate with(TemporalAdjuster adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
 
 This adjusts this date-time according to the rules of the specified adjuster.
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 Some example code indicating how and why this method is used:
 
  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
  date = date.with(lastDayOfMonth());  // static import from Adjusters
  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek
 

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an object of the same type with the specified adjustment made, not null
Throws:
DateTimeException - if unable to make the adjustment.
     For example, if the adjuster requires an ISO chronology
ArithmeticException - if numeric overflow occurs


"
2,HijrahDate,38,HijrahDate with(TemporalAdjuster adjuster),True,Returns an adjusted object of the same type as this object with the adjustment made.,"

with
public HijrahDate with(TemporalAdjuster adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
 
 This adjusts this date-time according to the rules of the specified adjuster.
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 Some example code indicating how and why this method is used:
 
  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
  date = date.with(lastDayOfMonth());  // static import from Adjusters
  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek
 

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an object of the same type with the specified adjustment made, not null
Throws:
DateTimeException - if unable to make the adjustment.
     For example, if the adjuster requires an ISO chronology
ArithmeticException - if numeric overflow occurs


"
2,HijrahDate,39,HijrahDate with(TemporalAdjuster adjuster),True,Returns an adjusted object of the same type as this object with the adjustment made.,"

with
public HijrahDate with(TemporalAdjuster adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
 
 This adjusts this date-time according to the rules of the specified adjuster.
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 Some example code indicating how and why this method is used:
 
  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
  date = date.with(lastDayOfMonth());  // static import from Adjusters
  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek
 

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an object of the same type with the specified adjustment made, not null
Throws:
DateTimeException - if unable to make the adjustment.
     For example, if the adjuster requires an ISO chronology
ArithmeticException - if numeric overflow occurs


"
2,HijrahDate,40,HijrahDate with(TemporalAdjuster adjuster),True,Returns an adjusted object of the same type as this object with the adjustment made.,"

with
public HijrahDate with(TemporalAdjuster adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
 
 This adjusts this date-time according to the rules of the specified adjuster.
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 Some example code indicating how and why this method is used:
 
  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
  date = date.with(lastDayOfMonth());  // static import from Adjusters
  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek
 

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an object of the same type with the specified adjustment made, not null
Throws:
DateTimeException - if unable to make the adjustment.
     For example, if the adjuster requires an ISO chronology
ArithmeticException - if numeric overflow occurs


"
2,HijrahDate,41,HijrahDate with(TemporalAdjuster adjuster),True,Returns an adjusted object of the same type as this object with the adjustment made.,"

with
public HijrahDate with(TemporalAdjuster adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
 
 This adjusts this date-time according to the rules of the specified adjuster.
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 Some example code indicating how and why this method is used:
 
  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
  date = date.with(lastDayOfMonth());  // static import from Adjusters
  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek
 

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an object of the same type with the specified adjustment made, not null
Throws:
DateTimeException - if unable to make the adjustment.
     For example, if the adjuster requires an ISO chronology
ArithmeticException - if numeric overflow occurs


"
2,HijrahDate,42,HijrahDate with(TemporalAdjuster adjuster),True,Returns an adjusted object of the same type as this object with the adjustment made.,"

with
public HijrahDate with(TemporalAdjuster adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
 
 This adjusts this date-time according to the rules of the specified adjuster.
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 Some example code indicating how and why this method is used:
 
  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
  date = date.with(lastDayOfMonth());  // static import from Adjusters
  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek
 

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an object of the same type with the specified adjustment made, not null
Throws:
DateTimeException - if unable to make the adjustment.
     For example, if the adjuster requires an ISO chronology
ArithmeticException - if numeric overflow occurs


"
2,HijrahDate,43,HijrahDate with(TemporalAdjuster adjuster),True,Returns an adjusted object of the same type as this object with the adjustment made.,"

with
public HijrahDate with(TemporalAdjuster adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
 
 This adjusts this date-time according to the rules of the specified adjuster.
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 Some example code indicating how and why this method is used:
 
  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
  date = date.with(lastDayOfMonth());  // static import from Adjusters
  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek
 

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an object of the same type with the specified adjustment made, not null
Throws:
DateTimeException - if unable to make the adjustment.
     For example, if the adjuster requires an ISO chronology
ArithmeticException - if numeric overflow occurs


"
2,HijrahDate,44,HijrahDate with(TemporalAdjuster adjuster),True,Returns an adjusted object of the same type as this object with the adjustment made.,"

with
public HijrahDate with(TemporalAdjuster adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
 
 This adjusts this date-time according to the rules of the specified adjuster.
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 Some example code indicating how and why this method is used:
 
  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
  date = date.with(lastDayOfMonth());  // static import from Adjusters
  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek
 

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an object of the same type with the specified adjustment made, not null
Throws:
DateTimeException - if unable to make the adjustment.
     For example, if the adjuster requires an ISO chronology
ArithmeticException - if numeric overflow occurs


"
2,HijrahDate,45,HijrahDate with(TemporalAdjuster adjuster),True,Returns an adjusted object of the same type as this object with the adjustment made.,"

with
public HijrahDate with(TemporalAdjuster adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
 
 This adjusts this date-time according to the rules of the specified adjuster.
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 Some example code indicating how and why this method is used:
 
  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
  date = date.with(lastDayOfMonth());  // static import from Adjusters
  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek
 

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an object of the same type with the specified adjustment made, not null
Throws:
DateTimeException - if unable to make the adjustment.
     For example, if the adjuster requires an ISO chronology
ArithmeticException - if numeric overflow occurs


"
2,HijrahDate,46,HijrahDate with(TemporalAdjuster adjuster),True,Returns an adjusted object of the same type as this object with the adjustment made.,"

with
public HijrahDate with(TemporalAdjuster adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
 
 This adjusts this date-time according to the rules of the specified adjuster.
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 Some example code indicating how and why this method is used:
 
  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
  date = date.with(lastDayOfMonth());  // static import from Adjusters
  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek
 

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an object of the same type with the specified adjustment made, not null
Throws:
DateTimeException - if unable to make the adjustment.
     For example, if the adjuster requires an ISO chronology
ArithmeticException - if numeric overflow occurs


"
2,HijrahDate,47,HijrahDate with(TemporalAdjuster adjuster),True,Returns an adjusted object of the same type as this object with the adjustment made.,"

with
public HijrahDate with(TemporalAdjuster adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
 
 This adjusts this date-time according to the rules of the specified adjuster.
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 Some example code indicating how and why this method is used:
 
  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
  date = date.with(lastDayOfMonth());  // static import from Adjusters
  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek
 

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an object of the same type with the specified adjustment made, not null
Throws:
DateTimeException - if unable to make the adjustment.
     For example, if the adjuster requires an ISO chronology
ArithmeticException - if numeric overflow occurs


"
2,HijrahDate,48,HijrahDate with(TemporalAdjuster adjuster),True,Returns an adjusted object of the same type as this object with the adjustment made.,"

with
public HijrahDate with(TemporalAdjuster adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
 
 This adjusts this date-time according to the rules of the specified adjuster.
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 Some example code indicating how and why this method is used:
 
  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
  date = date.with(lastDayOfMonth());  // static import from Adjusters
  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek
 

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an object of the same type with the specified adjustment made, not null
Throws:
DateTimeException - if unable to make the adjustment.
     For example, if the adjuster requires an ISO chronology
ArithmeticException - if numeric overflow occurs


"
2,HijrahDate,49,HijrahDate with(TemporalAdjuster adjuster),True,Returns an adjusted object of the same type as this object with the adjustment made.,"

with
public HijrahDate with(TemporalAdjuster adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
 
 This adjusts this date-time according to the rules of the specified adjuster.
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 Some example code indicating how and why this method is used:
 
  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
  date = date.with(lastDayOfMonth());  // static import from Adjusters
  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek
 

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an object of the same type with the specified adjustment made, not null
Throws:
DateTimeException - if unable to make the adjustment.
     For example, if the adjuster requires an ISO chronology
ArithmeticException - if numeric overflow occurs


"
2,HijrahDate,50,HijrahDate with(TemporalAdjuster adjuster),True,Returns an adjusted object of the same type as this object with the adjustment made.,"

with
public HijrahDate with(TemporalAdjuster adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
 
 This adjusts this date-time according to the rules of the specified adjuster.
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 Some example code indicating how and why this method is used:
 
  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
  date = date.with(lastDayOfMonth());  // static import from Adjusters
  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek
 

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an object of the same type with the specified adjustment made, not null
Throws:
DateTimeException - if unable to make the adjustment.
     For example, if the adjuster requires an ISO chronology
ArithmeticException - if numeric overflow occurs


"
2,HijrahDate,51,HijrahDate with(TemporalAdjuster adjuster),True,Returns an adjusted object of the same type as this object with the adjustment made.,"

with
public HijrahDate with(TemporalAdjuster adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
 
 This adjusts this date-time according to the rules of the specified adjuster.
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 Some example code indicating how and why this method is used:
 
  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
  date = date.with(lastDayOfMonth());  // static import from Adjusters
  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek
 

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an object of the same type with the specified adjustment made, not null
Throws:
DateTimeException - if unable to make the adjustment.
     For example, if the adjuster requires an ISO chronology
ArithmeticException - if numeric overflow occurs


"
2,HijrahDate,52,HijrahDate with(TemporalAdjuster adjuster),True,Returns an adjusted object of the same type as this object with the adjustment made.,"

with
public HijrahDate with(TemporalAdjuster adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
 
 This adjusts this date-time according to the rules of the specified adjuster.
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 Some example code indicating how and why this method is used:
 
  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
  date = date.with(lastDayOfMonth());  // static import from Adjusters
  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek
 

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an object of the same type with the specified adjustment made, not null
Throws:
DateTimeException - if unable to make the adjustment.
     For example, if the adjuster requires an ISO chronology
ArithmeticException - if numeric overflow occurs


"
2,HijrahDate,53,HijrahDate with(TemporalAdjuster adjuster),True,Returns an adjusted object of the same type as this object with the adjustment made.,"

with
public HijrahDate with(TemporalAdjuster adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
 
 This adjusts this date-time according to the rules of the specified adjuster.
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 Some example code indicating how and why this method is used:
 
  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
  date = date.with(lastDayOfMonth());  // static import from Adjusters
  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek
 

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an object of the same type with the specified adjustment made, not null
Throws:
DateTimeException - if unable to make the adjustment.
     For example, if the adjuster requires an ISO chronology
ArithmeticException - if numeric overflow occurs


"
2,HijrahDate,54,HijrahDate with(TemporalAdjuster adjuster),True,Returns an adjusted object of the same type as this object with the adjustment made.,"

with
public HijrahDate with(TemporalAdjuster adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
 
 This adjusts this date-time according to the rules of the specified adjuster.
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 Some example code indicating how and why this method is used:
 
  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
  date = date.with(lastDayOfMonth());  // static import from Adjusters
  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek
 

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an object of the same type with the specified adjustment made, not null
Throws:
DateTimeException - if unable to make the adjustment.
     For example, if the adjuster requires an ISO chronology
ArithmeticException - if numeric overflow occurs


"
2,HijrahDate,55,HijrahDate with(TemporalAdjuster adjuster),True,Returns an adjusted object of the same type as this object with the adjustment made.,"

with
public HijrahDate with(TemporalAdjuster adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
 
 This adjusts this date-time according to the rules of the specified adjuster.
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 Some example code indicating how and why this method is used:
 
  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
  date = date.with(lastDayOfMonth());  // static import from Adjusters
  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek
 

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an object of the same type with the specified adjustment made, not null
Throws:
DateTimeException - if unable to make the adjustment.
     For example, if the adjuster requires an ISO chronology
ArithmeticException - if numeric overflow occurs


"
2,HijrahDate,56,HijrahDate with(TemporalAdjuster adjuster),True,Returns an adjusted object of the same type as this object with the adjustment made.,"

with
public HijrahDate with(TemporalAdjuster adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
 
 This adjusts this date-time according to the rules of the specified adjuster.
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 Some example code indicating how and why this method is used:
 
  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
  date = date.with(lastDayOfMonth());  // static import from Adjusters
  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek
 

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an object of the same type with the specified adjustment made, not null
Throws:
DateTimeException - if unable to make the adjustment.
     For example, if the adjuster requires an ISO chronology
ArithmeticException - if numeric overflow occurs


"
2,HijrahDate,57,HijrahDate with(TemporalAdjuster adjuster),True,Returns an adjusted object of the same type as this object with the adjustment made.,"

with
public HijrahDate with(TemporalAdjuster adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
 
 This adjusts this date-time according to the rules of the specified adjuster.
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 Some example code indicating how and why this method is used:
 
  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
  date = date.with(lastDayOfMonth());  // static import from Adjusters
  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek
 

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an object of the same type with the specified adjustment made, not null
Throws:
DateTimeException - if unable to make the adjustment.
     For example, if the adjuster requires an ISO chronology
ArithmeticException - if numeric overflow occurs


"
3,IsoChronology,1,IsoChronology getInstance(Locale locale),False,,NULL
3,IsoChronology,2,IsoChronology getInstanceUTC(),False,,NULL
3,IsoChronology,3,IsoChronology getInstance(ZoneId zone),False,,NULL
3,IsoChronology,4,IsoChronology getInstance(ZoneOffset offset),False,,NULL
3,IsoChronology,5,"IsoChronology getInstance(ZoneId zone, Locale locale)",False,,NULL
4,JapaneseChronology,1,JapaneseChronology getInstance(Locale locale),False,,NULL
4,JapaneseChronology,2,"JapaneseDate date(int era, int yearOfEra, int month, int dayOfMonth)",False,,NULL
4,JapaneseChronology,3,"JapaneseDate date(int era, int yearOfEra, int month, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute)",False,,NULL
4,JapaneseChronology,4,"JapaneseDate date(int era, int yearOfEra, int month, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int nanoOfSecond)",False,,NULL
4,JapaneseChronology,5,"JapaneseDate date(int era, int yearOfEra, int month, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int nanoOfSecond, ZoneOffset offset)",False,,NULL
5,JapaneseDate,1,"JapaneseDate of(int era, int yearOfEra, int month, int dayOfMonth)",False,,NULL
5,JapaneseDate,2,int getYear(),False,,NULL
5,JapaneseDate,3,int getMonthValue(),False,,NULL
5,JapaneseDate,4,int getDayOfMonth(),False,,NULL
5,JapaneseDate,5,JapaneseDate plusYears(long years),False,,NULL
5,JapaneseDate,6,JapaneseDate plusMonths(long months),False,,NULL
5,JapaneseDate,7,JapaneseDate plusDays(long days),False,,NULL
5,JapaneseDate,8,JapaneseDate minusYears(long years),False,,NULL
5,JapaneseDate,9,JapaneseDate minusMonths(long months),False,,NULL
5,JapaneseDate,10,JapaneseDate minusDays(long days),False,,NULL
5,JapaneseDate,11,int compareTo(JapaneseDate other),False,,NULL
5,JapaneseDate,12,boolean isLeapYear(),False,,NULL
5,JapaneseDate,13,boolean isValidYear(int year),False,,NULL
5,JapaneseDate,14,boolean isValidMonth(int month),False,,NULL
5,JapaneseDate,15,boolean isValidDayOfMonth(int dayOfMonth),False,,NULL
5,JapaneseDate,16,"boolean isValidDate(int year, int month, int dayOfMonth)",False,,NULL
5,JapaneseDate,17,boolean isBefore(JapaneseDate other),False,,NULL
5,JapaneseDate,18,boolean isAfter(JapaneseDate other),False,,NULL
5,JapaneseDate,19,boolean isEqual(JapaneseDate other),False,,NULL
5,JapaneseDate,20,boolean isBeforeOrEqual(JapaneseDate other),False,,NULL
5,JapaneseDate,21,boolean isAfterOrEqual(JapaneseDate other),False,,NULL
5,JapaneseDate,22,boolean isEqualOrBefore(JapaneseDate other),False,,NULL
5,JapaneseDate,23,boolean isEqualOrAfter(JapaneseDate other),False,,NULL
5,JapaneseDate,24,boolean isEqualOrBeforeOrAfter(JapaneseDate other),False,,NULL
5,JapaneseDate,25,boolean isEqualOrBeforeOrAfterOrEqual(JapaneseDate other),False,,NULL
6,JapaneseEra,1,JapaneseEra getEra(int eraValue),False,,NULL
6,JapaneseEra,2,JapaneseEra getEra(String eraName),False,,NULL
6,JapaneseEra,3,int getValue(),True,Gets the numeric era int value.,"

getValue
public int getValue()
Gets the numeric era int value.
 
 The SHOWA era that contains 1970-01-01 (ISO calendar system) has the value 1.
 Later eras are numbered from 2 (HEISEI).
 Earlier eras are numbered 0 (TAISHO), -1 (MEIJI)).

Specified by:
getValue in interface Era
Returns:
the era value


"
6,JapaneseEra,4,String getName(),False,,NULL
6,JapaneseEra,5,String getDisplayName(),False,,NULL
7,MinguoChronology,1,MinguoChronology getInstance(),False,,NULL
7,MinguoChronology,2,"MinguoDate date(int era, int yearOfEra, int month, int dayOfMonth)",False,,NULL
7,MinguoChronology,3,"MinguoDate date(int era, int yearOfEra, int month, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute)",False,,NULL
7,MinguoChronology,4,"MinguoDate date(int era, int yearOfEra, int month, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int nanoOfSecond)",False,,NULL
7,MinguoChronology,5,"MinguoDate date(int era, int yearOfEra, int month, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int nanoOfSecond, int zoneOffset)",False,,NULL
8,MinguoDate,1,MinguoDate getDate(),False,,NULL
8,MinguoDate,2,int getDayOfMonth(),False,,NULL
8,MinguoDate,3,int getDayOfWeek(),False,,NULL
8,MinguoDate,4,int getDayOfYear(),False,,NULL
8,MinguoDate,5,int getMonthValue(),False,,NULL
8,MinguoDate,6,int getYear(),False,,NULL
8,MinguoDate,7,MinguoDate plusDays(long days),False,,NULL
8,MinguoDate,8,MinguoDate plusMonths(long months),False,,NULL
8,MinguoDate,9,MinguoDate plusYears(long years),False,,NULL
8,MinguoDate,10,MinguoDate withDayOfMonth(int dayOfMonth),False,,NULL
8,MinguoDate,11,MinguoDate withDayOfYear(int dayOfYear),False,,NULL
8,MinguoDate,12,MinguoDate withMonth(int month),False,,NULL
8,MinguoDate,13,MinguoDate withYear(int year),False,,NULL
9,ThaiBuddhistChronology,1,ThaiBuddhistChronology getInstance(),False,,NULL
9,ThaiBuddhistChronology,2,"LocalDate date(int prolepticYear, int month, int dayOfMonth)",False,,NULL
9,ThaiBuddhistChronology,3,"LocalDate date(int prolepticYear, int month, int dayOfMonth, int era)",False,,NULL
9,ThaiBuddhistChronology,4,"LocalDate date(int prolepticYear, int month, int dayOfMonth, int era, int leapAmount)",False,,NULL
9,ThaiBuddhistChronology,5,"LocalDate date(int prolepticYear, int month, int dayOfMonth, int era, int leapAmount, int leapDay)",False,,NULL
10,ThaiBuddhistDate,1,"ThaiBuddhistDate of(int prolepticYear, int month, int dayOfMonth)",True,"Obtains a ThaiBuddhistDate representing a date in the Thai Buddhist calendar system from the proleptic-year, month-of-year and day-of-month fields.","

of
public static ThaiBuddhistDate of(int prolepticYear,
                                  int month,
                                  int dayOfMonth)
Obtains a ThaiBuddhistDate representing a date in the Thai Buddhist calendar
 system from the proleptic-year, month-of-year and day-of-month fields.
 
 This returns a ThaiBuddhistDate with the specified fields.
 The day must be valid for the year and month, otherwise an exception will be thrown.

Parameters:
prolepticYear - the Thai Buddhist proleptic-year
month - the Thai Buddhist month-of-year, from 1 to 12
dayOfMonth - the Thai Buddhist day-of-month, from 1 to 31
Returns:
the date in Thai Buddhist calendar system, not null
Throws:
DateTimeException - if the value of any field is out of range,
  or if the day-of-month is invalid for the month-year


"
10,ThaiBuddhistDate,2,int getDayOfMonth(),False,,NULL
10,ThaiBuddhistDate,3,int getMonthValue(),False,,NULL
10,ThaiBuddhistDate,4,int getYear(),False,,NULL
10,ThaiBuddhistDate,5,boolean isLeapYear(),False,,NULL
