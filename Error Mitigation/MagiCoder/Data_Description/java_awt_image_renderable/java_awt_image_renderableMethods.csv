ClassName,Method,Return Type,Description,Full Description
ParameterBlock,add(byte b),ParameterBlock,Adds a Byte to the list of parameters.,"

add
public ParameterBlock add(byte b)
Adds a Byte to the list of parameters.

Parameters:
b - the byte to add to the
            parameters Vector
Returns:
a new ParameterBlock containing
         the specified parameter.


"
ParameterBlock,add(char c),ParameterBlock,Adds a Character to the list of parameters.,"

add
public ParameterBlock add(char c)
Adds a Character to the list of parameters.

Parameters:
c - the char to add to the
            parameters Vector
Returns:
a new ParameterBlock containing
         the specified parameter.


"
ParameterBlock,add(double d),ParameterBlock,Adds a Double to the list of parameters.,"

add
public ParameterBlock add(double d)
Adds a Double to the list of parameters.

Parameters:
d - the double to add to the
            parameters Vector
Returns:
a new ParameterBlock containing
         the specified parameter.


"
ParameterBlock,add(float f),ParameterBlock,Adds a Float to the list of parameters.,"

add
public ParameterBlock add(float f)
Adds a Float to the list of parameters.

Parameters:
f - the float to add to the
            parameters Vector
Returns:
a new ParameterBlock containing
         the specified parameter.


"
ParameterBlock,add(int i),ParameterBlock,Adds a Integer to the list of parameters.,"

add
public ParameterBlock add(int i)
Adds a Integer to the list of parameters.

Parameters:
i - the int to add to the
            parameters Vector
Returns:
a new ParameterBlock containing
         the specified parameter.


"
ParameterBlock,add(long l),ParameterBlock,Adds a Long to the list of parameters.,"

add
public ParameterBlock add(long l)
Adds a Long to the list of parameters.

Parameters:
l - the long to add to the
            parameters Vector
Returns:
a new ParameterBlock containing
         the specified parameter.


"
ParameterBlock,add(Object obj),ParameterBlock,Adds an object to the list of parameters.,"

add
public ParameterBlock add(Object obj)
Adds an object to the list of parameters.

Parameters:
obj - the Object to add to the
            parameters Vector
Returns:
a new ParameterBlock containing
         the specified parameter.


"
ParameterBlock,add(short s),ParameterBlock,Adds a Short to the list of parameters.,"

add
public ParameterBlock add(short s)
Adds a Short to the list of parameters.

Parameters:
s - the short to add to the
            parameters Vector
Returns:
a new ParameterBlock containing
         the specified parameter.


"
ParameterBlock,addSource(Object source),ParameterBlock,Adds an image to end of the list of sources.,"

addSource
public ParameterBlock addSource(Object source)
Adds an image to end of the list of sources.  The image is
 stored as an object in order to allow new node types in the
 future.

Parameters:
source - an image object to be stored in the source list.
Returns:
a new ParameterBlock containing the specified
         source.


"
ParameterBlock,clone(),Object,Creates a copy of a ParameterBlock.,"

clone
public Object clone()
Creates a copy of a ParameterBlock.  The source and parameter
 Vectors are cloned, but the actual sources and parameters are
 copied by reference.  This allows modifications to the order
 and number of sources and parameters in the clone to be invisible
 to the original ParameterBlock.  Changes to the shared sources or
 parameters themselves will still be visible.

Overrides:
clone in class Object
Returns:
an Object clone of the ParameterBlock.
See Also:
Cloneable


"
ParameterBlock,getByteParameter(int index),byte,A convenience method to return a parameter as a byte.,"

getByteParameter
public byte getByteParameter(int index)
A convenience method to return a parameter as a byte.  An
 exception is thrown if the parameter is
 null or not a Byte.

Parameters:
index - the index of the parameter to be returned.
Returns:
the parameter at the specified index
         as a byte value.
Throws:
ClassCastException - if the parameter at the
         specified index is not a Byte
NullPointerException - if the parameter at the specified
         index is null
ArrayIndexOutOfBoundsException - if index
         is negative or not less than the current size of this
         ParameterBlock object


"
ParameterBlock,getCharParameter(int index),char,A convenience method to return a parameter as a char.,"

getCharParameter
public char getCharParameter(int index)
A convenience method to return a parameter as a char.  An
 exception is thrown if the parameter is
 null or not a Character.

Parameters:
index - the index of the parameter to be returned.
Returns:
the parameter at the specified index
         as a char value.
Throws:
ClassCastException - if the parameter at the
         specified index is not a Character
NullPointerException - if the parameter at the specified
         index is null
ArrayIndexOutOfBoundsException - if index
         is negative or not less than the current size of this
         ParameterBlock object


"
ParameterBlock,getDoubleParameter(int index),double,A convenience method to return a parameter as a double.,"

getDoubleParameter
public double getDoubleParameter(int index)
A convenience method to return a parameter as a double.  An
 exception is thrown if the parameter is
 null or not a Double.

Parameters:
index - the index of the parameter to be returned.
Returns:
the parameter at the specified index
         as a double value.
Throws:
ClassCastException - if the parameter at the
         specified index is not a Double
NullPointerException - if the parameter at the specified
         index is null
ArrayIndexOutOfBoundsException - if index
         is negative or not less than the current size of this
         ParameterBlock object


"
ParameterBlock,getFloatParameter(int index),float,A convenience method to return a parameter as a float.,"

getFloatParameter
public float getFloatParameter(int index)
A convenience method to return a parameter as a float.  An
 exception is thrown if the parameter is
 null or not a Float.

Parameters:
index - the index of the parameter to be returned.
Returns:
the parameter at the specified index
         as a float value.
Throws:
ClassCastException - if the parameter at the
         specified index is not a Float
NullPointerException - if the parameter at the specified
         index is null
ArrayIndexOutOfBoundsException - if index
         is negative or not less than the current size of this
         ParameterBlock object


"
ParameterBlock,getIntParameter(int index),int,A convenience method to return a parameter as an int.,"

getIntParameter
public int getIntParameter(int index)
A convenience method to return a parameter as an int.  An
 exception is thrown if the parameter is
 null or not an Integer.

Parameters:
index - the index of the parameter to be returned.
Returns:
the parameter at the specified index
         as a int value.
Throws:
ClassCastException - if the parameter at the
         specified index is not a Integer
NullPointerException - if the parameter at the specified
         index is null
ArrayIndexOutOfBoundsException - if index
         is negative or not less than the current size of this
         ParameterBlock object


"
ParameterBlock,getLongParameter(int index),long,A convenience method to return a parameter as a long.,"

getLongParameter
public long getLongParameter(int index)
A convenience method to return a parameter as a long.  An
 exception is thrown if the parameter is
 null or not a Long.

Parameters:
index - the index of the parameter to be returned.
Returns:
the parameter at the specified index
         as a long value.
Throws:
ClassCastException - if the parameter at the
         specified index is not a Long
NullPointerException - if the parameter at the specified
         index is null
ArrayIndexOutOfBoundsException - if index
         is negative or not less than the current size of this
         ParameterBlock object


"
ParameterBlock,getNumParameters(),int,Returns the number of parameters (not including source images).,"

getNumParameters
public int getNumParameters()
Returns the number of parameters (not including source images).

Returns:
the number of parameters in the parameters
Vector.


"
ParameterBlock,getNumSources(),int,Returns the number of source images.,"

getNumSources
public int getNumSources()
Returns the number of source images.

Returns:
the number of source images in the sources
Vector.


"
ParameterBlock,getObjectParameter(int index),Object,Gets a parameter as an object.,"

getObjectParameter
public Object getObjectParameter(int index)
Gets a parameter as an object.

Parameters:
index - the index of the parameter to get
Returns:
an Object representing the
         the parameter at the specified index
         into the parameters
Vector.


"
ParameterBlock,getParamClasses(),Class[],Returns an array of Class objects describing the types of the parameters.,"

getParamClasses
public Class[] getParamClasses()
Returns an array of Class objects describing the types
 of the parameters.

Returns:
an array of Class objects.


"
ParameterBlock,getParameters(),Vector<Object>,Returns the entire Vector of parameters.,"

getParameters
public Vector<Object> getParameters()
Returns the entire Vector of parameters.

Returns:
the parameters Vector.
See Also:
setParameters(Vector)


"
ParameterBlock,getRenderableSource(int index),RenderableImage,Returns a source as a RenderableImage.,"

getRenderableSource
public RenderableImage getRenderableSource(int index)
Returns a source as a RenderableImage.  This method is a
 convenience method.
 An exception will be thrown if the sources is not a RenderableImage.

Parameters:
index - the index of the source to be returned
Returns:
a RenderableImage that represents the source
         image that is at the specified index in the
         sources Vector.


"
ParameterBlock,getRenderedSource(int index),RenderedImage,Returns a source as a RenderedImage.,"

getRenderedSource
public RenderedImage getRenderedSource(int index)
Returns a source as a RenderedImage.  This method is
 a convenience method.
 An exception will be thrown if the source is not a RenderedImage.

Parameters:
index - the index of the source to be returned
Returns:
a RenderedImage that represents the source
         image that is at the specified index in the
         sources Vector.


"
ParameterBlock,getShortParameter(int index),short,A convenience method to return a parameter as a short.,"

getShortParameter
public short getShortParameter(int index)
A convenience method to return a parameter as a short.  An
 exception is thrown if the parameter is
 null or not a Short.

Parameters:
index - the index of the parameter to be returned.
Returns:
the parameter at the specified index
         as a short value.
Throws:
ClassCastException - if the parameter at the
         specified index is not a Short
NullPointerException - if the parameter at the specified
         index is null
ArrayIndexOutOfBoundsException - if index
         is negative or not less than the current size of this
         ParameterBlock object


"
ParameterBlock,getSource(int index),Object,Returns a source as a general Object.,"

getSource
public Object getSource(int index)
Returns a source as a general Object.  The caller must cast it into
 an appropriate type.

Parameters:
index - the index of the source to be returned.
Returns:
an Object that represents the source located
         at the specified index in the sources
Vector.
See Also:
setSource(Object, int)


"
ParameterBlock,getSources(),Vector<Object>,Returns the entire Vector of sources.,"

getSources
public Vector<Object> getSources()
Returns the entire Vector of sources.

Returns:
the sources Vector.
See Also:
setSources(Vector)


"
ParameterBlock,removeParameters(),void,Clears the list of parameters.,"

removeParameters
public void removeParameters()
Clears the list of parameters.

"
ParameterBlock,removeSources(),void,Clears the list of source images.,"

removeSources
public void removeSources()
Clears the list of source images.

"
ParameterBlock,"set(byte b, int index)",ParameterBlock,Replaces an Object in the list of parameters with a Byte.,"

set
public ParameterBlock set(byte b,
                          int index)
Replaces an Object in the list of parameters with a Byte.
 If the index lies beyond the current source list,
 the list is extended with nulls as needed.

Parameters:
b - the parameter that replaces the
        parameter at the specified index in the
        parameters Vector
index - the index of the parameter to be
        replaced with the specified parameter
Returns:
a new ParameterBlock containing
        the specified parameter.


"
ParameterBlock,"set(char c, int index)",ParameterBlock,Replaces an Object in the list of parameters with a Character.,"

set
public ParameterBlock set(char c,
                          int index)
Replaces an Object in the list of parameters with a Character.
 If the index lies beyond the current source list,
 the list is extended with nulls as needed.

Parameters:
c - the parameter that replaces the
        parameter at the specified index in the
        parameters Vector
index - the index of the parameter to be
        replaced with the specified parameter
Returns:
a new ParameterBlock containing
        the specified parameter.


"
ParameterBlock,"set(double d, int index)",ParameterBlock,Replaces an Object in the list of parameters with a Double.,"

set
public ParameterBlock set(double d,
                          int index)
Replaces an Object in the list of parameters with a Double.
 If the index lies beyond the current source list,
 the list is extended with nulls as needed.

Parameters:
d - the parameter that replaces the
        parameter at the specified index in the
        parameters Vector
index - the index of the parameter to be
        replaced with the specified parameter
Returns:
a new ParameterBlock containing
        the specified parameter.


"
ParameterBlock,"set(float f, int index)",ParameterBlock,Replaces an Object in the list of parameters with a Float.,"

set
public ParameterBlock set(float f,
                          int index)
Replaces an Object in the list of parameters with a Float.
 If the index lies beyond the current source list,
 the list is extended with nulls as needed.

Parameters:
f - the parameter that replaces the
        parameter at the specified index in the
        parameters Vector
index - the index of the parameter to be
        replaced with the specified parameter
Returns:
a new ParameterBlock containing
        the specified parameter.


"
ParameterBlock,"set(int i, int index)",ParameterBlock,Replaces an Object in the list of parameters with an Integer.,"

set
public ParameterBlock set(int i,
                          int index)
Replaces an Object in the list of parameters with an Integer.
 If the index lies beyond the current source list,
 the list is extended with nulls as needed.

Parameters:
i - the parameter that replaces the
        parameter at the specified index in the
        parameters Vector
index - the index of the parameter to be
        replaced with the specified parameter
Returns:
a new ParameterBlock containing
        the specified parameter.


"
ParameterBlock,"set(long l, int index)",ParameterBlock,Replaces an Object in the list of parameters with a Long.,"

set
public ParameterBlock set(long l,
                          int index)
Replaces an Object in the list of parameters with a Long.
 If the index lies beyond the current source list,
 the list is extended with nulls as needed.

Parameters:
l - the parameter that replaces the
        parameter at the specified index in the
        parameters Vector
index - the index of the parameter to be
        replaced with the specified parameter
Returns:
a new ParameterBlock containing
        the specified parameter.


"
ParameterBlock,"set(Object obj, int index)",ParameterBlock,Replaces an Object in the list of parameters.,"

set
public ParameterBlock set(Object obj,
                          int index)
Replaces an Object in the list of parameters.
 If the index lies beyond the current source list,
 the list is extended with nulls as needed.

Parameters:
obj - the parameter that replaces the
        parameter at the specified index in the
        parameters Vector
index - the index of the parameter to be
        replaced with the specified parameter
Returns:
a new ParameterBlock containing
        the specified parameter.


"
ParameterBlock,"set(short s, int index)",ParameterBlock,Replaces an Object in the list of parameters with a Short.,"

set
public ParameterBlock set(short s,
                          int index)
Replaces an Object in the list of parameters with a Short.
 If the index lies beyond the current source list,
 the list is extended with nulls as needed.

Parameters:
s - the parameter that replaces the
        parameter at the specified index in the
        parameters Vector
index - the index of the parameter to be
        replaced with the specified parameter
Returns:
a new ParameterBlock containing
        the specified parameter.


"
ParameterBlock,setParameters(Vector<Object> parameters),void,Sets the entire Vector of parameters to a given Vector.,"

setParameters
public void setParameters(Vector<Object> parameters)
Sets the entire Vector of parameters to a given Vector.

Parameters:
parameters - the specified Vector of
        parameters
See Also:
getParameters()


"
ParameterBlock,"setSource(Object source, int index)",ParameterBlock,Replaces an entry in the list of source with a new source.,"

setSource
public ParameterBlock setSource(Object source,
                                int index)
Replaces an entry in the list of source with a new source.
 If the index lies beyond the current source list,
 the list is extended with nulls as needed.

Parameters:
source - the specified source image
index - the index into the sources
Vector at which to
              insert the specified source
Returns:
a new ParameterBlock that contains the
         specified source at the specified
         index.
See Also:
getSource(int)


"
ParameterBlock,setSources(Vector<Object> sources),void,Sets the entire Vector of sources to a given Vector.,"

setSources
public void setSources(Vector<Object> sources)
Sets the entire Vector of sources to a given Vector.

Parameters:
sources - the Vector of source images
See Also:
getSources()


"
ParameterBlock,shallowClone(),Object,Creates a shallow copy of a ParameterBlock.,"

shallowClone
public Object shallowClone()
Creates a shallow copy of a ParameterBlock.  The source and
 parameter Vectors are copied by reference -- additions or
 changes will be visible to both versions.

Returns:
an Object clone of the ParameterBlock.


"
RenderableImageOp,createDefaultRendering(),RenderedImage,Gets a RenderedImage instance of this image with a default width and height in pixels.,"

createDefaultRendering
public RenderedImage createDefaultRendering()
Gets a RenderedImage instance of this image with a default
 width and height in pixels.  The RenderContext is built
 automatically with an appropriate usr2dev transform and an area
 of interest of the full image.  All the rendering hints come
 from hints passed in.  Implementors of this interface must be
 sure that there is a defined default width and height.

Specified by:
createDefaultRendering in interface RenderableImage
Returns:
a RenderedImage containing the rendered data.


"
RenderableImageOp,createRendering(RenderContext renderContext),RenderedImage,Creates a RenderedImage which represents this RenderableImageOp (including its Renderable sources) rendered according to the given RenderContext.,"

createRendering
public RenderedImage createRendering(RenderContext renderContext)
Creates a RenderedImage which represents this
 RenderableImageOp (including its Renderable sources) rendered
 according to the given RenderContext.

  This method supports chaining of either Renderable or
 RenderedImage operations.  If sources in
 the ParameterBlock used to construct the RenderableImageOp are
 RenderableImages, then a three step process is followed:

 
 mapRenderContext() is called on the associated CRIF for
 each RenderableImage source;
  createRendering() is called on each of the RenderableImage sources
 using the backwards-mapped RenderContexts obtained in step 1,
 resulting in a rendering of each source;
  ContextualRenderedImageFactory.create() is called
 with a new ParameterBlock containing the parameters of
 the RenderableImageOp and the RenderedImages that were created by the
 createRendering() calls.
 
 If the elements of the source Vector of
 the ParameterBlock used to construct the RenderableImageOp are
 instances of RenderedImage, then the CRIF.create() method is
 called immediately using the original ParameterBlock.
 This provides a basis case for the recursion.

  The created RenderedImage may have a property identified
 by the String HINTS_OBSERVED to indicate which RenderingHints
 (from the RenderContext) were used to create the image.
 In addition any RenderedImages
 that are obtained via the getSources() method on the created
 RenderedImage may have such a property.

Specified by:
createRendering in interface RenderableImage
Parameters:
renderContext - The RenderContext to use to perform the rendering.
Returns:
a RenderedImage containing the desired output image.


"
RenderableImageOp,"createScaledRendering(int w, int h, RenderingHints hints)",RenderedImage,"Creates a RenderedImage instance of this image with width w, and height h in pixels.","

createScaledRendering
public RenderedImage createScaledRendering(int w,
                                           int h,
                                           RenderingHints hints)
Creates a RenderedImage instance of this image with width w, and
 height h in pixels.  The RenderContext is built automatically
 with an appropriate usr2dev transform and an area of interest
 of the full image.  All the rendering hints come from hints
 passed in.

  If w == 0, it will be taken to equal
 Math.round(h*(getWidth()/getHeight())).
 Similarly, if h == 0, it will be taken to equal
 Math.round(w*(getHeight()/getWidth())).  One of
 w or h must be non-zero or else an IllegalArgumentException
 will be thrown.

  The created RenderedImage may have a property identified
 by the String HINTS_OBSERVED to indicate which RenderingHints
 were used to create the image.  In addition any RenderedImages
 that are obtained via the getSources() method on the created
 RenderedImage may have such a property.

Specified by:
createScaledRendering in interface RenderableImage
Parameters:
w - the width of rendered image in pixels, or 0.
h - the height of rendered image in pixels, or 0.
hints - a RenderingHints object containing hints.
Returns:
a RenderedImage containing the rendered data.


"
RenderableImageOp,getHeight(),float,Gets the height in user coordinate space.,"

getHeight
public float getHeight()
Gets the height in user coordinate space.  By convention, the
 usual height of a RenderedImage is equal to 1.0F.

Specified by:
getHeight in interface RenderableImage
Returns:
the height of the image in user coordinates.


"
RenderableImageOp,getMinX(),float,Gets the minimum X coordinate of the rendering-independent image data.,"

getMinX
public float getMinX()
Gets the minimum X coordinate of the rendering-independent image data.

Specified by:
getMinX in interface RenderableImage
Returns:
the minimum X coordinate of the rendering-independent image
 data.


"
RenderableImageOp,getMinY(),float,Gets the minimum Y coordinate of the rendering-independent image data.,"

getMinY
public float getMinY()
Gets the minimum Y coordinate of the rendering-independent image data.

Specified by:
getMinY in interface RenderableImage
Returns:
the minimum Y coordinate of the rendering-independent image
 data.


"
RenderableImageOp,getParameterBlock(),ParameterBlock,Returns a reference to the current parameter block.,"

getParameterBlock
public ParameterBlock getParameterBlock()
Returns a reference to the current parameter block.

Returns:
the ParameterBlock of this
         RenderableImageOp.
See Also:
setParameterBlock(ParameterBlock)


"
RenderableImageOp,getProperty(String name),Object,Gets a property from the property set of this image.,"

getProperty
public Object getProperty(String name)
Gets a property from the property set of this image.
 If the property name is not recognized, java.awt.Image.UndefinedProperty
 will be returned.

Specified by:
getProperty in interface RenderableImage
Parameters:
name - the name of the property to get, as a String.
Returns:
a reference to the property Object, or the value
         java.awt.Image.UndefinedProperty.


"
RenderableImageOp,getPropertyNames(),String[],Return a list of names recognized by getProperty.,"

getPropertyNames
public String[] getPropertyNames()
Return a list of names recognized by getProperty.

Specified by:
getPropertyNames in interface RenderableImage
Returns:
a list of property names.


"
RenderableImageOp,getSources(),Vector<RenderableImage>,Returns a vector of RenderableImages that are the sources of image data for this RenderableImage.,"

getSources
public Vector<RenderableImage> getSources()
Returns a vector of RenderableImages that are the sources of
 image data for this RenderableImage. Note that this method may
 return an empty vector, to indicate that the image has no sources,
 or null, to indicate that no information is available.

Specified by:
getSources in interface RenderableImage
Returns:
a (possibly empty) Vector of RenderableImages, or null.


"
RenderableImageOp,getWidth(),float,Gets the width in user coordinate space.,"

getWidth
public float getWidth()
Gets the width in user coordinate space.  By convention, the
 usual width of a RenderableImage is equal to the image's aspect
 ratio (width divided by height).

Specified by:
getWidth in interface RenderableImage
Returns:
the width of the image in user coordinates.


"
RenderableImageOp,isDynamic(),boolean,"Returns true if successive renderings (that is, calls to createRendering() or createScaledRendering()) with the same arguments may produce different results.","

isDynamic
public boolean isDynamic()
Returns true if successive renderings (that is, calls to
 createRendering() or createScaledRendering()) with the same arguments
 may produce different results.  This method may be used to
 determine whether an existing rendering may be cached and
 reused.  The CRIF's isDynamic method will be called.

Specified by:
isDynamic in interface RenderableImage
Returns:
true if successive renderings with the
         same arguments might produce different results;
         false otherwise.


"
RenderableImageOp,setParameterBlock(ParameterBlock paramBlock),ParameterBlock,"Change the current ParameterBlock of the operation, allowing editing of image rendering chains.","

setParameterBlock
public ParameterBlock setParameterBlock(ParameterBlock paramBlock)
Change the current ParameterBlock of the operation, allowing
 editing of image rendering chains.  The effects of such a
 change will be visible when a new rendering is created from
 this RenderableImageOp or any dependent RenderableImageOp.

Parameters:
paramBlock - the new ParameterBlock.
Returns:
the old ParameterBlock.
See Also:
getParameterBlock()


"
RenderableImageProducer,addConsumer(ImageConsumer ic),void,Adds an ImageConsumer to the list of consumers interested in data for this image.,"

addConsumer
public void addConsumer(ImageConsumer ic)
Adds an ImageConsumer to the list of consumers interested in
 data for this image.

Specified by:
addConsumer in interface ImageProducer
Parameters:
ic - an ImageConsumer to be added to the interest list.
See Also:
ImageProducer.startProduction(java.awt.image.ImageConsumer)


"
RenderableImageProducer,isConsumer(ImageConsumer ic),boolean,Determine if an ImageConsumer is on the list of consumers currently interested in data for this image.,"

isConsumer
public boolean isConsumer(ImageConsumer ic)
Determine if an ImageConsumer is on the list of consumers
 currently interested in data for this image.

Specified by:
isConsumer in interface ImageProducer
Parameters:
ic - the ImageConsumer to be checked.
Returns:
true if the ImageConsumer is on the list; false otherwise.


"
RenderableImageProducer,removeConsumer(ImageConsumer ic),void,Remove an ImageConsumer from the list of consumers interested in data for this image.,"

removeConsumer
public void removeConsumer(ImageConsumer ic)
Remove an ImageConsumer from the list of consumers interested in
 data for this image.

Specified by:
removeConsumer in interface ImageProducer
Parameters:
ic - the ImageConsumer to be removed.


"
RenderableImageProducer,requestTopDownLeftRightResend(ImageConsumer ic),void,"Requests that a given ImageConsumer have the image data delivered one more time in top-down, left-right order.","

requestTopDownLeftRightResend
public void requestTopDownLeftRightResend(ImageConsumer ic)
Requests that a given ImageConsumer have the image data delivered
 one more time in top-down, left-right order.

Specified by:
requestTopDownLeftRightResend in interface ImageProducer
Parameters:
ic - the ImageConsumer requesting the resend.
See Also:
ImageConsumer.setHints(int)


"
RenderableImageProducer,run(),void,The runnable method for this class.,"

run
public void run()
The runnable method for this class. This will produce an image using
 the current RenderableImage and RenderContext and send it to all the
 ImageConsumer currently registered with this class.

Specified by:
run in interface Runnable
See Also:
Thread.run()


"
RenderableImageProducer,setRenderContext(RenderContext rc),void,Sets a new RenderContext to use for the next startProduction() call.,"

setRenderContext
public void setRenderContext(RenderContext rc)
Sets a new RenderContext to use for the next startProduction() call.

Parameters:
rc - the new RenderContext.


"
RenderableImageProducer,startProduction(ImageConsumer ic),void,"Adds an ImageConsumer to the list of consumers interested in data for this image, and immediately starts delivery of the image data through the ImageConsumer interface.","

startProduction
public void startProduction(ImageConsumer ic)
Adds an ImageConsumer to the list of consumers interested in
 data for this image, and immediately starts delivery of the
 image data through the ImageConsumer interface.

Specified by:
startProduction in interface ImageProducer
Parameters:
ic - the ImageConsumer to be added to the list of consumers.
See Also:
ImageProducer.addConsumer(java.awt.image.ImageConsumer)


"
RenderContext,clone(),Object,Makes a copy of a RenderContext.,"

clone
public Object clone()
Makes a copy of a RenderContext. The area of interest is copied
 by reference.  The usr2dev AffineTransform and hints are cloned,
 while the area of interest is copied by reference.

Overrides:
clone in class Object
Returns:
the new cloned RenderContext.
See Also:
Cloneable


"
RenderContext,concatenateTransform(AffineTransform modTransform),void,Modifies the current user-to-device transform by appending another transform.,"

concatenateTransform
public void concatenateTransform(AffineTransform modTransform)
Modifies the current user-to-device transform by appending another
 transform.  In matrix notation the operation is:
 
 [this] = [this] x [modTransform]
 

Parameters:
modTransform - the AffineTransform to append to the
        current usr2dev transform.
Since:
1.3


"
RenderContext,concetenateTransform(AffineTransform modTransform),void,Deprecated. replaced by concatenateTransform(AffineTransform).,"

concetenateTransform
@Deprecated
public void concetenateTransform(AffineTransform modTransform)
Deprecated. replaced by
                 concatenateTransform(AffineTransform).
Modifies the current user-to-device transform by appending another
 transform.  In matrix notation the operation is:
 
 [this] = [this] x [modTransform]
 
 This method does the same thing as the concatenateTransform
 method.  It is here for backward compatibility with previous releases
 which misspelled the method name.

Parameters:
modTransform - the AffineTransform to append to the
        current usr2dev transform.


"
RenderContext,getAreaOfInterest(),Shape,Gets the ares of interest currently contained in the RenderContext.,"

getAreaOfInterest
public Shape getAreaOfInterest()
Gets the ares of interest currently contained in the
 RenderContext.

Returns:
a reference to the area of interest of the RenderContext,
         or null if none is specified.
See Also:
setAreaOfInterest(Shape)


"
RenderContext,getRenderingHints(),RenderingHints,Gets the rendering hints of this RenderContext.,"

getRenderingHints
public RenderingHints getRenderingHints()
Gets the rendering hints of this RenderContext.

Returns:
a RenderingHints object that represents
 the rendering hints of this RenderContext.
See Also:
setRenderingHints(RenderingHints)


"
RenderContext,getTransform(),AffineTransform,Gets the current user-to-device AffineTransform.,"

getTransform
public AffineTransform getTransform()
Gets the current user-to-device AffineTransform.

Returns:
a reference to the current AffineTransform.
See Also:
setTransform(AffineTransform)


"
RenderContext,preConcatenateTransform(AffineTransform modTransform),void,Modifies the current user-to-device transform by prepending another transform.,"

preConcatenateTransform
public void preConcatenateTransform(AffineTransform modTransform)
Modifies the current user-to-device transform by prepending another
 transform.  In matrix notation the operation is:
 
 [this] = [modTransform] x [this]
 

Parameters:
modTransform - the AffineTransform to prepend to the
        current usr2dev transform.
Since:
1.3


"
RenderContext,preConcetenateTransform(AffineTransform modTransform),void,Deprecated. replaced by preConcatenateTransform(AffineTransform).,"

preConcetenateTransform
@Deprecated
public void preConcetenateTransform(AffineTransform modTransform)
Deprecated. replaced by
                 preConcatenateTransform(AffineTransform).
Modifies the current user-to-device transform by prepending another
 transform.  In matrix notation the operation is:
 
 [this] = [modTransform] x [this]
 
 This method does the same thing as the preConcatenateTransform
 method.  It is here for backward compatibility with previous releases
 which misspelled the method name.

Parameters:
modTransform - the AffineTransform to prepend to the
        current usr2dev transform.


"
RenderContext,setAreaOfInterest(Shape newAoi),void,Sets the current area of interest.,"

setAreaOfInterest
public void setAreaOfInterest(Shape newAoi)
Sets the current area of interest.  The old area is discarded.

Parameters:
newAoi - The new area of interest.
See Also:
getAreaOfInterest()


"
RenderContext,setRenderingHints(RenderingHints hints),void,Sets the rendering hints of this RenderContext.,"

setRenderingHints
public void setRenderingHints(RenderingHints hints)
Sets the rendering hints of this RenderContext.

Parameters:
hints - a RenderingHints object that represents
 the rendering hints to assign to this RenderContext.
See Also:
getRenderingHints()


"
RenderContext,setTransform(AffineTransform newTransform),void,Sets the current user-to-device AffineTransform contained in the RenderContext to a given transform.,"

setTransform
public void setTransform(AffineTransform newTransform)
Sets the current user-to-device AffineTransform contained
 in the RenderContext to a given transform.

Parameters:
newTransform - the new AffineTransform.
See Also:
getTransform()


"
