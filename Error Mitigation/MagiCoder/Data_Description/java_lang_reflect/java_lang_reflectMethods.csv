ClassName,Method,Return Type,Description,Full Description
AccessibleObject,getAnnotation(Class<T> annotationClass),<T extends Annotation> T,"Returns this element's annotation for the specified type if such an annotation is present, else null.","

getAnnotation
public <T extends Annotation> T getAnnotation(Class<T> annotationClass)
Description copied from interface: AnnotatedElement
Returns this element's annotation for the specified type if
 such an annotation is present, else null.

Specified by:
getAnnotation in interface AnnotatedElement
Type Parameters:
T - the type of the annotation to query for and return if present
Parameters:
annotationClass - the Class object corresponding to the
        annotation type
Returns:
this element's annotation for the specified annotation type if
     present on this element, else null
Throws:
NullPointerException - if the given annotation class is null
Since:
1.5


"
AccessibleObject,getAnnotations(),Annotation[],Returns annotations that are present on this element.,"

getAnnotations
public Annotation[] getAnnotations()
Description copied from interface: AnnotatedElement
Returns annotations that are present on this element.

 If there are no annotations present on this element, the return
 value is an array of length 0.

 The caller of this method is free to modify the returned array; it will
 have no effect on the arrays returned to other callers.

Specified by:
getAnnotations in interface AnnotatedElement
Returns:
annotations present on this element
Since:
1.5


"
AccessibleObject,getAnnotationsByType(Class<T> annotationClass),<T extends Annotation> T[],Returns annotations that are associated with this element.,"

getAnnotationsByType
public <T extends Annotation> T[] getAnnotationsByType(Class<T> annotationClass)
Description copied from interface: AnnotatedElement
Returns annotations that are associated with this element.

 If there are no annotations associated with this element, the return
 value is an array of length 0.

 The difference between this method and AnnotatedElement.getAnnotation(Class)
 is that this method detects if its argument is a repeatable
 annotation type (JLS 9.6), and if so, attempts to find one or
 more annotations of that type by ""looking through"" a container
 annotation.

 The caller of this method is free to modify the returned array; it will
 have no effect on the arrays returned to other callers.

Specified by:
getAnnotationsByType in interface AnnotatedElement
Type Parameters:
T - the type of the annotation to query for and return if present
Parameters:
annotationClass - the Class object corresponding to the
        annotation type
Returns:
all this element's annotations for the specified annotation type if
     associated with this element, else an array of length zero
Throws:
NullPointerException - if the given annotation class is null
Since:
1.8


"
AccessibleObject,getDeclaredAnnotation(Class<T> annotationClass),<T extends Annotation> T,"Returns this element's annotation for the specified type if such an annotation is directly present, else null.","

getDeclaredAnnotation
public <T extends Annotation> T getDeclaredAnnotation(Class<T> annotationClass)
Description copied from interface: AnnotatedElement
Returns this element's annotation for the specified type if
 such an annotation is directly present, else null.

 This method ignores inherited annotations. (Returns null if no
 annotations are directly present on this element.)

Specified by:
getDeclaredAnnotation in interface AnnotatedElement
Type Parameters:
T - the type of the annotation to query for and return if directly present
Parameters:
annotationClass - the Class object corresponding to the
        annotation type
Returns:
this element's annotation for the specified annotation type if
     directly present on this element, else null
Throws:
NullPointerException - if the given annotation class is null
Since:
1.8


"
AccessibleObject,getDeclaredAnnotations(),Annotation[],Returns annotations that are directly present on this element.,"

getDeclaredAnnotations
public Annotation[] getDeclaredAnnotations()
Description copied from interface: AnnotatedElement
Returns annotations that are directly present on this element.
 This method ignores inherited annotations.

 If there are no annotations directly present on this element,
 the return value is an array of length 0.

 The caller of this method is free to modify the returned array; it will
 have no effect on the arrays returned to other callers.

Specified by:
getDeclaredAnnotations in interface AnnotatedElement
Returns:
annotations directly present on this element
Since:
1.5


"
AccessibleObject,getDeclaredAnnotationsByType(Class<T> annotationClass),<T extends Annotation> T[],Returns this element's annotation(s) for the specified type if such annotations are either directly present or indirectly present.,"

getDeclaredAnnotationsByType
public <T extends Annotation> T[] getDeclaredAnnotationsByType(Class<T> annotationClass)
Description copied from interface: AnnotatedElement
Returns this element's annotation(s) for the specified type if
 such annotations are either directly present or
 indirectly present. This method ignores inherited
 annotations.

 If there are no specified annotations directly or indirectly
 present on this element, the return value is an array of length
 0.

 The difference between this method and AnnotatedElement.getDeclaredAnnotation(Class) is that this method detects if its
 argument is a repeatable annotation type (JLS 9.6), and if so,
 attempts to find one or more annotations of that type by ""looking
 through"" a container annotation if one is present.

 The caller of this method is free to modify the returned array; it will
 have no effect on the arrays returned to other callers.

Specified by:
getDeclaredAnnotationsByType in interface AnnotatedElement
Type Parameters:
T - the type of the annotation to query for and return
 if directly or indirectly present
Parameters:
annotationClass - the Class object corresponding to the
        annotation type
Returns:
all this element's annotations for the specified annotation type if
     directly or indirectly present on this element, else an array of length zero
Throws:
NullPointerException - if the given annotation class is null
Since:
1.8


"
AccessibleObject,isAccessible(),boolean,Get the value of the accessible flag for this object.,"

isAccessible
public boolean isAccessible()
Get the value of the accessible flag for this object.

Returns:
the value of the object's accessible flag


"
AccessibleObject,isAnnotationPresent(Class<? extends Annotation> annotationClass),boolean,"Returns true if an annotation for the specified type is present on this element, else false.","

isAnnotationPresent
public boolean isAnnotationPresent(Class<? extends Annotation> annotationClass)
Returns true if an annotation for the specified type
 is present on this element, else false.  This method
 is designed primarily for convenient access to marker annotations.

 The truth value returned by this method is equivalent to:
 getAnnotation(annotationClass) != null
The body of the default method is specified to be the code
 above.

Specified by:
isAnnotationPresent in interface AnnotatedElement
Parameters:
annotationClass - the Class object corresponding to the
        annotation type
Returns:
true if an annotation for the specified annotation
     type is present on this element, else false
Throws:
NullPointerException - if the given annotation class is null
Since:
1.5


"
AccessibleObject,"setAccessible(AccessibleObject[] array, boolean flag)",static void,Convenience method to set the accessible flag for an array of objects with a single security check (for efficiency).,"

setAccessible
public static void setAccessible(AccessibleObject[] array,
                                 boolean flag)
                          throws SecurityException
Convenience method to set the accessible flag for an
 array of objects with a single security check (for efficiency).

 First, if there is a security manager, its
 checkPermission method is called with a
 ReflectPermission(""suppressAccessChecks"") permission.

 A SecurityException is raised if flag is
 true but accessibility of any of the elements of the input
 array may not be changed (for example, if the element
 object is a Constructor object for the class Class).  In the event of such a SecurityException, the
 accessibility of objects is set to flag for array elements
 upto (and excluding) the element for which the exception occurred; the
 accessibility of elements beyond (and including) the element for which
 the exception occurred is unchanged.

Parameters:
array - the array of AccessibleObjects
flag - the new value for the accessible flag
              in each object
Throws:
SecurityException - if the request is denied.
See Also:
SecurityManager.checkPermission(java.security.Permission), 
RuntimePermission


"
AccessibleObject,setAccessible(boolean flag),void,Set the accessible flag for this object to the indicated boolean value.,"

setAccessible
public void setAccessible(boolean flag)
                   throws SecurityException
Set the accessible flag for this object to
 the indicated boolean value.  A value of true indicates that
 the reflected object should suppress Java language access
 checking when it is used.  A value of false indicates
 that the reflected object should enforce Java language access checks.

 First, if there is a security manager, its
 checkPermission method is called with a
 ReflectPermission(""suppressAccessChecks"") permission.

 A SecurityException is raised if flag is
 true but accessibility of this object may not be changed
 (for example, if this element object is a Constructor object for
 the class Class).

 A SecurityException is raised if this object is a Constructor object for the class
 java.lang.Class, and flag is true.

Parameters:
flag - the new value for the accessible flag
Throws:
SecurityException - if the request is denied.
See Also:
SecurityManager.checkPermission(java.security.Permission), 
RuntimePermission


"
Array,"get(Object array, int index)",static Object,Returns the value of the indexed component in the specified array object.,"

get
public static Object get(Object array,
                         int index)
                  throws IllegalArgumentException,
                         ArrayIndexOutOfBoundsException
Returns the value of the indexed component in the specified
 array object.  The value is automatically wrapped in an object
 if it has a primitive type.

Parameters:
array - the array
index - the index
Returns:
the (possibly wrapped) value of the indexed component in
 the specified array
Throws:
NullPointerException - If the specified object is null
IllegalArgumentException - If the specified object is not
 an array
ArrayIndexOutOfBoundsException - If the specified index
 argument is negative, or if it is greater than or equal to the
 length of the specified array


"
Array,"getBoolean(Object array, int index)",static boolean,"Returns the value of the indexed component in the specified array object, as a boolean.","

getBoolean
public static boolean getBoolean(Object array,
                                 int index)
                          throws IllegalArgumentException,
                                 ArrayIndexOutOfBoundsException
Returns the value of the indexed component in the specified
 array object, as a boolean.

Parameters:
array - the array
index - the index
Returns:
the value of the indexed component in the specified array
Throws:
NullPointerException - If the specified object is null
IllegalArgumentException - If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion
ArrayIndexOutOfBoundsException - If the specified index
 argument is negative, or if it is greater than or equal to the
 length of the specified array
See Also:
get(java.lang.Object, int)


"
Array,"getByte(Object array, int index)",static byte,"Returns the value of the indexed component in the specified array object, as a byte.","

getByte
public static byte getByte(Object array,
                           int index)
                    throws IllegalArgumentException,
                           ArrayIndexOutOfBoundsException
Returns the value of the indexed component in the specified
 array object, as a byte.

Parameters:
array - the array
index - the index
Returns:
the value of the indexed component in the specified array
Throws:
NullPointerException - If the specified object is null
IllegalArgumentException - If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion
ArrayIndexOutOfBoundsException - If the specified index
 argument is negative, or if it is greater than or equal to the
 length of the specified array
See Also:
get(java.lang.Object, int)


"
Array,"getChar(Object array, int index)",static char,"Returns the value of the indexed component in the specified array object, as a char.","

getChar
public static char getChar(Object array,
                           int index)
                    throws IllegalArgumentException,
                           ArrayIndexOutOfBoundsException
Returns the value of the indexed component in the specified
 array object, as a char.

Parameters:
array - the array
index - the index
Returns:
the value of the indexed component in the specified array
Throws:
NullPointerException - If the specified object is null
IllegalArgumentException - If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion
ArrayIndexOutOfBoundsException - If the specified index
 argument is negative, or if it is greater than or equal to the
 length of the specified array
See Also:
get(java.lang.Object, int)


"
Array,"getDouble(Object array, int index)",static double,"Returns the value of the indexed component in the specified array object, as a double.","

getDouble
public static double getDouble(Object array,
                               int index)
                        throws IllegalArgumentException,
                               ArrayIndexOutOfBoundsException
Returns the value of the indexed component in the specified
 array object, as a double.

Parameters:
array - the array
index - the index
Returns:
the value of the indexed component in the specified array
Throws:
NullPointerException - If the specified object is null
IllegalArgumentException - If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion
ArrayIndexOutOfBoundsException - If the specified index
 argument is negative, or if it is greater than or equal to the
 length of the specified array
See Also:
get(java.lang.Object, int)


"
Array,"getFloat(Object array, int index)",static float,"Returns the value of the indexed component in the specified array object, as a float.","

getFloat
public static float getFloat(Object array,
                             int index)
                      throws IllegalArgumentException,
                             ArrayIndexOutOfBoundsException
Returns the value of the indexed component in the specified
 array object, as a float.

Parameters:
array - the array
index - the index
Returns:
the value of the indexed component in the specified array
Throws:
NullPointerException - If the specified object is null
IllegalArgumentException - If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion
ArrayIndexOutOfBoundsException - If the specified index
 argument is negative, or if it is greater than or equal to the
 length of the specified array
See Also:
get(java.lang.Object, int)


"
Array,"getInt(Object array, int index)",static int,"Returns the value of the indexed component in the specified array object, as an int.","

getInt
public static int getInt(Object array,
                         int index)
                  throws IllegalArgumentException,
                         ArrayIndexOutOfBoundsException
Returns the value of the indexed component in the specified
 array object, as an int.

Parameters:
array - the array
index - the index
Returns:
the value of the indexed component in the specified array
Throws:
NullPointerException - If the specified object is null
IllegalArgumentException - If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion
ArrayIndexOutOfBoundsException - If the specified index
 argument is negative, or if it is greater than or equal to the
 length of the specified array
See Also:
get(java.lang.Object, int)


"
Array,getLength(Object array),static int,"Returns the length of the specified array object, as an int.","

getLength
public static int getLength(Object array)
                     throws IllegalArgumentException
Returns the length of the specified array object, as an int.

Parameters:
array - the array
Returns:
the length of the array
Throws:
IllegalArgumentException - if the object argument is not
 an array


"
Array,"getLong(Object array, int index)",static long,"Returns the value of the indexed component in the specified array object, as a long.","

getLong
public static long getLong(Object array,
                           int index)
                    throws IllegalArgumentException,
                           ArrayIndexOutOfBoundsException
Returns the value of the indexed component in the specified
 array object, as a long.

Parameters:
array - the array
index - the index
Returns:
the value of the indexed component in the specified array
Throws:
NullPointerException - If the specified object is null
IllegalArgumentException - If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion
ArrayIndexOutOfBoundsException - If the specified index
 argument is negative, or if it is greater than or equal to the
 length of the specified array
See Also:
get(java.lang.Object, int)


"
Array,"getShort(Object array, int index)",static short,"Returns the value of the indexed component in the specified array object, as a short.","

getShort
public static short getShort(Object array,
                             int index)
                      throws IllegalArgumentException,
                             ArrayIndexOutOfBoundsException
Returns the value of the indexed component in the specified
 array object, as a short.

Parameters:
array - the array
index - the index
Returns:
the value of the indexed component in the specified array
Throws:
NullPointerException - If the specified object is null
IllegalArgumentException - If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion
ArrayIndexOutOfBoundsException - If the specified index
 argument is negative, or if it is greater than or equal to the
 length of the specified array
See Also:
get(java.lang.Object, int)


"
Array,"newInstance(Class<?> componentType, int... dimensions)",static Object,Creates a new array with the specified component type and dimensions.,"

newInstance
public static Object newInstance(Class<?> componentType,
                                 int... dimensions)
                          throws IllegalArgumentException,
                                 NegativeArraySizeException
Creates a new array
 with the specified component type and dimensions.
 If componentType
 represents a non-array class or interface, the new array
 has dimensions.length dimensions and
 componentType as its component type. If
 componentType represents an array class, the
 number of dimensions of the new array is equal to the sum
 of dimensions.length and the number of
 dimensions of componentType. In this case, the
 component type of the new array is the component type of
 componentType.

 The number of dimensions of the new array must not
 exceed 255.

Parameters:
componentType - the Class object representing the component
 type of the new array
dimensions - an array of int representing the dimensions of
 the new array
Returns:
the new array
Throws:
NullPointerException - if the specified
 componentType argument is null
IllegalArgumentException - if the specified dimensions
 argument is a zero-dimensional array, if componentType is Void.TYPE, or if the number of dimensions of the requested array
 instance exceed 255.
NegativeArraySizeException - if any of the components in
 the specified dimensions argument is negative.


"
Array,"newInstance(Class<?> componentType, int length)",static Object,Creates a new array with the specified component type and length.,"

newInstance
public static Object newInstance(Class<?> componentType,
                                 int length)
                          throws NegativeArraySizeException
Creates a new array with the specified component type and
 length.
 Invoking this method is equivalent to creating an array
 as follows:
 

 int[] x = {length};
 Array.newInstance(componentType, x);
 

The number of dimensions of the new array must not
 exceed 255.

Parameters:
componentType - the Class object representing the
 component type of the new array
length - the length of the new array
Returns:
the new array
Throws:
NullPointerException - if the specified
 componentType parameter is null
IllegalArgumentException - if componentType is Void.TYPE or if the number of dimensions of the requested array
 instance exceed 255.
NegativeArraySizeException - if the specified length
 is negative


"
Array,"set(Object array, int index, Object value)",static void,Sets the value of the indexed component of the specified array object to the specified new value.,"

set
public static void set(Object array,
                       int index,
                       Object value)
                throws IllegalArgumentException,
                       ArrayIndexOutOfBoundsException
Sets the value of the indexed component of the specified array
 object to the specified new value.  The new value is first
 automatically unwrapped if the array has a primitive component
 type.

Parameters:
array - the array
index - the index into the array
value - the new value of the indexed component
Throws:
NullPointerException - If the specified object argument
 is null
IllegalArgumentException - If the specified object argument
 is not an array, or if the array component type is primitive and
 an unwrapping conversion fails
ArrayIndexOutOfBoundsException - If the specified index
 argument is negative, or if it is greater than or equal to
 the length of the specified array


"
Array,"setBoolean(Object array, int index, boolean z)",static void,Sets the value of the indexed component of the specified array object to the specified boolean value.,"

setBoolean
public static void setBoolean(Object array,
                              int index,
                              boolean z)
                       throws IllegalArgumentException,
                              ArrayIndexOutOfBoundsException
Sets the value of the indexed component of the specified array
 object to the specified boolean value.

Parameters:
array - the array
index - the index into the array
z - the new value of the indexed component
Throws:
NullPointerException - If the specified object argument
 is null
IllegalArgumentException - If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array's component type by an identity or a
 primitive widening conversion
ArrayIndexOutOfBoundsException - If the specified index
 argument is negative, or if it is greater than or equal to
 the length of the specified array
See Also:
set(java.lang.Object, int, java.lang.Object)


"
Array,"setByte(Object array, int index, byte b)",static void,Sets the value of the indexed component of the specified array object to the specified byte value.,"

setByte
public static void setByte(Object array,
                           int index,
                           byte b)
                    throws IllegalArgumentException,
                           ArrayIndexOutOfBoundsException
Sets the value of the indexed component of the specified array
 object to the specified byte value.

Parameters:
array - the array
index - the index into the array
b - the new value of the indexed component
Throws:
NullPointerException - If the specified object argument
 is null
IllegalArgumentException - If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array's component type by an identity or a
 primitive widening conversion
ArrayIndexOutOfBoundsException - If the specified index
 argument is negative, or if it is greater than or equal to
 the length of the specified array
See Also:
set(java.lang.Object, int, java.lang.Object)


"
Array,"setChar(Object array, int index, char c)",static void,Sets the value of the indexed component of the specified array object to the specified char value.,"

setChar
public static void setChar(Object array,
                           int index,
                           char c)
                    throws IllegalArgumentException,
                           ArrayIndexOutOfBoundsException
Sets the value of the indexed component of the specified array
 object to the specified char value.

Parameters:
array - the array
index - the index into the array
c - the new value of the indexed component
Throws:
NullPointerException - If the specified object argument
 is null
IllegalArgumentException - If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array's component type by an identity or a
 primitive widening conversion
ArrayIndexOutOfBoundsException - If the specified index
 argument is negative, or if it is greater than or equal to
 the length of the specified array
See Also:
set(java.lang.Object, int, java.lang.Object)


"
Array,"setDouble(Object array, int index, double d)",static void,Sets the value of the indexed component of the specified array object to the specified double value.,"

setDouble
public static void setDouble(Object array,
                             int index,
                             double d)
                      throws IllegalArgumentException,
                             ArrayIndexOutOfBoundsException
Sets the value of the indexed component of the specified array
 object to the specified double value.

Parameters:
array - the array
index - the index into the array
d - the new value of the indexed component
Throws:
NullPointerException - If the specified object argument
 is null
IllegalArgumentException - If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array's component type by an identity or a
 primitive widening conversion
ArrayIndexOutOfBoundsException - If the specified index
 argument is negative, or if it is greater than or equal to
 the length of the specified array
See Also:
set(java.lang.Object, int, java.lang.Object)


"
Array,"setFloat(Object array, int index, float f)",static void,Sets the value of the indexed component of the specified array object to the specified float value.,"

setFloat
public static void setFloat(Object array,
                            int index,
                            float f)
                     throws IllegalArgumentException,
                            ArrayIndexOutOfBoundsException
Sets the value of the indexed component of the specified array
 object to the specified float value.

Parameters:
array - the array
index - the index into the array
f - the new value of the indexed component
Throws:
NullPointerException - If the specified object argument
 is null
IllegalArgumentException - If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array's component type by an identity or a
 primitive widening conversion
ArrayIndexOutOfBoundsException - If the specified index
 argument is negative, or if it is greater than or equal to
 the length of the specified array
See Also:
set(java.lang.Object, int, java.lang.Object)


"
Array,"setInt(Object array, int index, int i)",static void,Sets the value of the indexed component of the specified array object to the specified int value.,"

setInt
public static void setInt(Object array,
                          int index,
                          int i)
                   throws IllegalArgumentException,
                          ArrayIndexOutOfBoundsException
Sets the value of the indexed component of the specified array
 object to the specified int value.

Parameters:
array - the array
index - the index into the array
i - the new value of the indexed component
Throws:
NullPointerException - If the specified object argument
 is null
IllegalArgumentException - If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array's component type by an identity or a
 primitive widening conversion
ArrayIndexOutOfBoundsException - If the specified index
 argument is negative, or if it is greater than or equal to
 the length of the specified array
See Also:
set(java.lang.Object, int, java.lang.Object)


"
Array,"setLong(Object array, int index, long l)",static void,Sets the value of the indexed component of the specified array object to the specified long value.,"

setLong
public static void setLong(Object array,
                           int index,
                           long l)
                    throws IllegalArgumentException,
                           ArrayIndexOutOfBoundsException
Sets the value of the indexed component of the specified array
 object to the specified long value.

Parameters:
array - the array
index - the index into the array
l - the new value of the indexed component
Throws:
NullPointerException - If the specified object argument
 is null
IllegalArgumentException - If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array's component type by an identity or a
 primitive widening conversion
ArrayIndexOutOfBoundsException - If the specified index
 argument is negative, or if it is greater than or equal to
 the length of the specified array
See Also:
set(java.lang.Object, int, java.lang.Object)


"
Array,"setShort(Object array, int index, short s)",static void,Sets the value of the indexed component of the specified array object to the specified short value.,"

setShort
public static void setShort(Object array,
                            int index,
                            short s)
                     throws IllegalArgumentException,
                            ArrayIndexOutOfBoundsException
Sets the value of the indexed component of the specified array
 object to the specified short value.

Parameters:
array - the array
index - the index into the array
s - the new value of the indexed component
Throws:
NullPointerException - If the specified object argument
 is null
IllegalArgumentException - If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array's component type by an identity or a
 primitive widening conversion
ArrayIndexOutOfBoundsException - If the specified index
 argument is negative, or if it is greater than or equal to
 the length of the specified array
See Also:
set(java.lang.Object, int, java.lang.Object)


"
Constructor,equals(Object obj),boolean,Compares this Constructor against the specified object.,"

equals
public boolean equals(Object obj)
Compares this Constructor against the specified object.
 Returns true if the objects are the same.  Two Constructor objects are
 the same if they were declared by the same class and have the
 same formal parameter types.

Overrides:
equals in class Object
Parameters:
obj - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
Constructor,getAnnotatedReceiverType(),AnnotatedType,Returns an AnnotatedType object that represents the use of a type to specify the receiver type of the method/constructor represented by this Executable object.,"

getAnnotatedReceiverType
public AnnotatedType getAnnotatedReceiverType()
Returns an AnnotatedType object that represents the use of a
 type to specify the receiver type of the method/constructor represented
 by this Executable object. The receiver type of a method/constructor is
 available only if the method/constructor has a receiver
 parameter (JLS 8.4.1).

 If this Executable object represents a constructor or instance
 method that does not have a receiver parameter, or has a receiver
 parameter with no annotations on its type, then the return value is an
 AnnotatedType object representing an element with no
 annotations.

 If this Executable object represents a static method, then the
 return value is null.

Overrides:
getAnnotatedReceiverType in class Executable
Returns:
an object representing the receiver type of the method or
 constructor represented by this Executable
Since:
1.8


"
Constructor,getAnnotatedReturnType(),AnnotatedType,Returns an AnnotatedType object that represents the use of a type to specify the return type of the method/constructor represented by this Executable.,"

getAnnotatedReturnType
public AnnotatedType getAnnotatedReturnType()
Returns an AnnotatedType object that represents the use of a type to
 specify the return type of the method/constructor represented by this
 Executable.

 If this Executable object represents a constructor, the AnnotatedType object represents the type of the constructed object.

 If this Executable object represents a method, the AnnotatedType object represents the use of a type to specify the return
 type of the method.

Specified by:
getAnnotatedReturnType in class Executable
Returns:
an object representing the return type of the method
 or constructor represented by this Executable
Since:
1.8


"
Constructor,getAnnotation(Class<T> annotationClass),<T extends Annotation> T,"Returns this element's annotation for the specified type if such an annotation is present, else null.","

getAnnotation
public <T extends Annotation> T getAnnotation(Class<T> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is present, else null.

Specified by:
getAnnotation in interface AnnotatedElement
Overrides:
getAnnotation in class Executable
Type Parameters:
T - the type of the annotation to query for and return if present
Parameters:
annotationClass - the Class object corresponding to the
        annotation type
Returns:
this element's annotation for the specified annotation type if
     present on this element, else null
Throws:
NullPointerException - if the given annotation class is null
Since:
1.5


"
Constructor,getDeclaredAnnotations(),Annotation[],Returns annotations that are directly present on this element.,"

getDeclaredAnnotations
public Annotation[] getDeclaredAnnotations()
Returns annotations that are directly present on this element.
 This method ignores inherited annotations.

 If there are no annotations directly present on this element,
 the return value is an array of length 0.

 The caller of this method is free to modify the returned array; it will
 have no effect on the arrays returned to other callers.

Specified by:
getDeclaredAnnotations in interface AnnotatedElement
Overrides:
getDeclaredAnnotations in class Executable
Returns:
annotations directly present on this element
Since:
1.5


"
Constructor,getDeclaringClass(),Class<T>,Returns the Class object representing the class or interface that declares the executable represented by this object.,"

getDeclaringClass
public Class<T> getDeclaringClass()
Returns the Class object representing the class or interface
 that declares the executable represented by this object.

Specified by:
getDeclaringClass in interface Member
Specified by:
getDeclaringClass in class Executable
Returns:
an object representing the declaring class of the
 underlying member


"
Constructor,getExceptionTypes(),Class<?>[],Returns an array of Class objects that represent the types of exceptions declared to be thrown by the underlying executable represented by this object.,"

getExceptionTypes
public Class<?>[] getExceptionTypes()
Returns an array of Class objects that represent the
 types of exceptions declared to be thrown by the underlying
 executable represented by this object.  Returns an array of
 length 0 if the executable declares no exceptions in its throws clause.

Specified by:
getExceptionTypes in class Executable
Returns:
the exception types declared as being thrown by the
 executable this object represents


"
Constructor,getGenericExceptionTypes(),Type[],Returns an array of Type objects that represent the exceptions declared to be thrown by this executable object.,"

getGenericExceptionTypes
public Type[] getGenericExceptionTypes()
Returns an array of Type objects that represent the
 exceptions declared to be thrown by this executable object.
 Returns an array of length 0 if the underlying executable declares
 no exceptions in its throws clause.

 If an exception type is a type variable or a parameterized
 type, it is created. Otherwise, it is resolved.

Overrides:
getGenericExceptionTypes in class Executable
Returns:
an array of Types that represent the exception types
     thrown by the underlying executable
Throws:
GenericSignatureFormatError - if the generic method signature does not conform to the format
     specified in
     The Java™ Virtual Machine Specification
TypeNotPresentException - if the underlying executable's
     throws clause refers to a non-existent type declaration
MalformedParameterizedTypeException - if
     the underlying executable's throws clause refers to a
     parameterized type that cannot be instantiated for any reason
Since:
1.5


"
Constructor,getGenericParameterTypes(),Type[],"Returns an array of Type objects that represent the formal parameter types, in declaration order, of the executable represented by this object.","

getGenericParameterTypes
public Type[] getGenericParameterTypes()
Returns an array of Type objects that represent the formal
 parameter types, in declaration order, of the executable represented by
 this object. Returns an array of length 0 if the
 underlying executable takes no parameters.

 If a formal parameter type is a parameterized type,
 the Type object returned for it must accurately reflect
 the actual type parameters used in the source code.

 If a formal parameter type is a type variable or a parameterized
 type, it is created. Otherwise, it is resolved.

Overrides:
getGenericParameterTypes in class Executable
Returns:
an array of Types that represent the formal
     parameter types of the underlying executable, in declaration order
Throws:
GenericSignatureFormatError - if the generic method signature does not conform to the format
     specified in
     The Java™ Virtual Machine Specification
TypeNotPresentException - if any of the parameter
     types of the underlying executable refers to a non-existent type
     declaration
MalformedParameterizedTypeException - if any of
     the underlying executable's parameter types refer to a parameterized
     type that cannot be instantiated for any reason
Since:
1.5


"
Constructor,getModifiers(),int,Returns the Java language modifiers for the executable represented by this object.,"

getModifiers
public int getModifiers()
Returns the Java language modifiers for
 the executable represented by this object.

Specified by:
getModifiers in interface Member
Specified by:
getModifiers in class Executable
Returns:
the Java language modifiers for the underlying member
See Also:
Modifier


"
Constructor,getName(),String,"Returns the name of this constructor, as a string.","

getName
public String getName()
Returns the name of this constructor, as a string.  This is
 the binary name of the constructor's declaring class.

Specified by:
getName in interface Member
Specified by:
getName in class Executable
Returns:
the simple name of the underlying member


"
Constructor,getParameterAnnotations(),Annotation[][],"Returns an array of arrays of Annotations that represent the annotations on the formal parameters, in declaration order, of the Executable represented by this object.","

getParameterAnnotations
public Annotation[][] getParameterAnnotations()
Returns an array of arrays of Annotations that
 represent the annotations on the formal parameters, in
 declaration order, of the Executable represented by
 this object.  Synthetic and mandated parameters (see
 explanation below), such as the outer ""this"" parameter to an
 inner class constructor will be represented in the returned
 array.  If the executable has no parameters (meaning no formal,
 no synthetic, and no mandated parameters), a zero-length array
 will be returned.  If the Executable has one or more
 parameters, a nested array of length zero is returned for each
 parameter with no annotations. The annotation objects contained
 in the returned arrays are serializable.  The caller of this
 method is free to modify the returned arrays; it will have no
 effect on the arrays returned to other callers.

 A compiler may add extra parameters that are implicitly
 declared in source (""mandated""), as well as parameters that
 are neither implicitly nor explicitly declared in source
 (""synthetic"") to the parameter list for a method.  See Parameter for more information.

Specified by:
getParameterAnnotations in class Executable
Returns:
an array of arrays that represent the annotations on
    the formal and implicit parameters, in declaration order, of
    the executable represented by this object
Since:
1.5
See Also:
Parameter, 
Parameter.getAnnotations()


"
Constructor,getParameterCount(),int,Returns the number of formal parameters (whether explicitly declared or implicitly declared or neither) for the executable represented by this object.,"

getParameterCount
public int getParameterCount()
Returns the number of formal parameters (whether explicitly
 declared or implicitly declared or neither) for the executable
 represented by this object.

Overrides:
getParameterCount in class Executable
Returns:
The number of formal parameters for the executable this
 object represents
Since:
1.8


"
Constructor,getParameterTypes(),Class<?>[],"Returns an array of Class objects that represent the formal parameter types, in declaration order, of the executable represented by this object.","

getParameterTypes
public Class<?>[] getParameterTypes()
Returns an array of Class objects that represent the formal
 parameter types, in declaration order, of the executable
 represented by this object.  Returns an array of length
 0 if the underlying executable takes no parameters.

Specified by:
getParameterTypes in class Executable
Returns:
the parameter types for the executable this object
 represents


"
Constructor,getTypeParameters(),TypeVariable<Constructor<T>>[],"Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order.","

getTypeParameters
public TypeVariable<Constructor<T>>[] getTypeParameters()
Returns an array of TypeVariable objects that represent the
 type variables declared by the generic declaration represented by this
 GenericDeclaration object, in declaration order.  Returns an
 array of length 0 if the underlying generic declaration declares no type
 variables.

Specified by:
getTypeParameters in interface GenericDeclaration
Specified by:
getTypeParameters in class Executable
Returns:
an array of TypeVariable objects that represent
     the type variables declared by this generic declaration
Throws:
GenericSignatureFormatError - if the generic
     signature of this generic declaration does not conform to
     the format specified in
     The Java™ Virtual Machine Specification
Since:
1.5


"
Constructor,hashCode(),int,Returns a hashcode for this Constructor.,"

hashCode
public int hashCode()
Returns a hashcode for this Constructor. The hashcode is
 the same as the hashcode for the underlying constructor's
 declaring class name.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Constructor,isSynthetic(),boolean,Returns true if this executable is a synthetic construct; returns false otherwise.,"

isSynthetic
public boolean isSynthetic()
Returns true if this executable is a synthetic
 construct; returns false otherwise.

Specified by:
isSynthetic in interface Member
Overrides:
isSynthetic in class Executable
Returns:
true if and only if this executable is a synthetic
 construct as defined by
 The Java™ Language Specification.
Since:
1.5
See  The Java™ Language Specification:
13.1 The Form of a Binary


"
Constructor,isVarArgs(),boolean,Returns true if this executable was declared to take a variable number of arguments; returns false otherwise.,"

isVarArgs
public boolean isVarArgs()
Returns true if this executable was declared to take a
 variable number of arguments; returns false otherwise.

Overrides:
isVarArgs in class Executable
Returns:
true if an only if this executable was declared
 to take a variable number of arguments.
Since:
1.5


"
Constructor,newInstance(Object... initargs),T,"Uses the constructor represented by this Constructor object to create and initialize a new instance of the constructor's declaring class, with the specified initialization parameters.","

newInstance
public T newInstance(Object... initargs)
              throws InstantiationException,
                     IllegalAccessException,
                     IllegalArgumentException,
                     InvocationTargetException
Uses the constructor represented by this Constructor object to
 create and initialize a new instance of the constructor's
 declaring class, with the specified initialization parameters.
 Individual parameters are automatically unwrapped to match
 primitive formal parameters, and both primitive and reference
 parameters are subject to method invocation conversions as necessary.

 If the number of formal parameters required by the underlying constructor
 is 0, the supplied initargs array may be of length 0 or null.

 If the constructor's declaring class is an inner class in a
 non-static context, the first argument to the constructor needs
 to be the enclosing instance; see section 15.9.3 of
 The Java™ Language Specification.

 If the required access and argument checks succeed and the
 instantiation will proceed, the constructor's declaring class
 is initialized if it has not already been initialized.

 If the constructor completes normally, returns the newly
 created and initialized instance.

Parameters:
initargs - array of objects to be passed as arguments to
 the constructor call; values of primitive types are wrapped in
 a wrapper object of the appropriate type (e.g. a float
 in a Float)
Returns:
a new object created by calling the constructor
 this object represents
Throws:
IllegalAccessException - if this Constructor object
              is enforcing Java language access control and the underlying
              constructor is inaccessible.
IllegalArgumentException - if the number of actual
              and formal parameters differ; if an unwrapping
              conversion for primitive arguments fails; or if,
              after possible unwrapping, a parameter value
              cannot be converted to the corresponding formal
              parameter type by a method invocation conversion; if
              this constructor pertains to an enum type.
InstantiationException - if the class that declares the
              underlying constructor represents an abstract class.
InvocationTargetException - if the underlying constructor
              throws an exception.
ExceptionInInitializerError - if the initialization provoked
              by this method fails.


"
Constructor,toGenericString(),String,"Returns a string describing this Constructor, including type parameters.","

toGenericString
public String toGenericString()
Returns a string describing this Constructor,
 including type parameters.  The string is formatted as the
 constructor access modifiers, if any, followed by an
 angle-bracketed comma separated list of the constructor's type
 parameters, if any, followed by the fully-qualified name of the
 declaring class, followed by a parenthesized, comma-separated
 list of the constructor's generic formal parameter types.

 If this constructor was declared to take a variable number of
 arguments, instead of denoting the last parameter as
 ""Type[]"", it is denoted as
 ""Type..."".

 A space is used to separate access modifiers from one another
 and from the type parameters or return type.  If there are no
 type parameters, the type parameter list is elided; if the type
 parameter list is present, a space separates the list from the
 class name.  If the constructor is declared to throw
 exceptions, the parameter list is followed by a space, followed
 by the word ""throws"" followed by a
 comma-separated list of the thrown exception types.

 The only possible modifiers for constructors are the access
 modifiers public, protected or
 private.  Only one of these may appear, or none if the
 constructor has default (package) access.

Specified by:
toGenericString in class Executable
Returns:
a string describing this Constructor,
 include type parameters
Since:
1.5
See  The Java™ Language Specification:
8.8.3. Constructor Modifiers


"
Constructor,toString(),String,Returns a string describing this Constructor.,"

toString
public String toString()
Returns a string describing this Constructor.  The string is
 formatted as the constructor access modifiers, if any,
 followed by the fully-qualified name of the declaring class,
 followed by a parenthesized, comma-separated list of the
 constructor's formal parameter types.  For example:
 
    public java.util.Hashtable(int,float)
 
The only possible modifiers for constructors are the access
 modifiers public, protected or
 private.  Only one of these may appear, or none if the
 constructor has default (package) access.

Overrides:
toString in class Object
Returns:
a string describing this Constructor
See  The Java™ Language Specification:
8.8.3. Constructor Modifiers


"
Executable,getAnnotatedExceptionTypes(),AnnotatedType[],Returns an array of AnnotatedType objects that represent the use of types to specify the declared exceptions of the method/constructor represented by this Executable.,"

getAnnotatedExceptionTypes
public AnnotatedType[] getAnnotatedExceptionTypes()
Returns an array of AnnotatedType objects that represent the use
 of types to specify the declared exceptions of the method/constructor
 represented by this Executable. The order of the objects in the array
 corresponds to the order of the exception types in the declaration of
 the method/constructor.

 Returns an array of length 0 if the method/constructor declares no
 exceptions.

Returns:
an array of objects representing the declared
 exceptions of the method or constructor represented by this Executable


"
Executable,getAnnotatedParameterTypes(),AnnotatedType[],Returns an array of AnnotatedType objects that represent the use of types to specify formal parameter types of the method/constructor represented by this Executable.,"

getAnnotatedParameterTypes
public AnnotatedType[] getAnnotatedParameterTypes()
Returns an array of AnnotatedType objects that represent the use
 of types to specify formal parameter types of the method/constructor
 represented by this Executable. The order of the objects in the array
 corresponds to the order of the formal parameter types in the
 declaration of the method/constructor.

 Returns an array of length 0 if the method/constructor declares no
 parameters.

Returns:
an array of objects representing the types of the
 formal parameters of the method or constructor represented by this
 Executable


"
Executable,getAnnotatedReceiverType(),AnnotatedType,Returns an AnnotatedType object that represents the use of a type to specify the receiver type of the method/constructor represented by this Executable object.,"

getAnnotatedReceiverType
public AnnotatedType getAnnotatedReceiverType()
Returns an AnnotatedType object that represents the use of a
 type to specify the receiver type of the method/constructor represented
 by this Executable object. The receiver type of a method/constructor is
 available only if the method/constructor has a receiver
 parameter (JLS 8.4.1).

 If this Executable object represents a constructor or instance
 method that does not have a receiver parameter, or has a receiver
 parameter with no annotations on its type, then the return value is an
 AnnotatedType object representing an element with no
 annotations.

 If this Executable object represents a static method, then the
 return value is null.

Returns:
an object representing the receiver type of the method or
 constructor represented by this Executable


"
Executable,getAnnotatedReturnType(),abstract AnnotatedType,Returns an AnnotatedType object that represents the use of a type to specify the return type of the method/constructor represented by this Executable.,"

getAnnotatedReturnType
public abstract AnnotatedType getAnnotatedReturnType()
Returns an AnnotatedType object that represents the use of a type to
 specify the return type of the method/constructor represented by this
 Executable.

 If this Executable object represents a constructor, the AnnotatedType object represents the type of the constructed object.

 If this Executable object represents a method, the AnnotatedType object represents the use of a type to specify the return
 type of the method.

Returns:
an object representing the return type of the method
 or constructor represented by this Executable


"
Executable,getAnnotation(Class<T> annotationClass),<T extends Annotation> T,"Returns this element's annotation for the specified type if such an annotation is present, else null.","

getAnnotation
public <T extends Annotation> T getAnnotation(Class<T> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is present, else null.

Specified by:
getAnnotation in interface AnnotatedElement
Overrides:
getAnnotation in class AccessibleObject
Type Parameters:
T - the type of the annotation to query for and return if present
Parameters:
annotationClass - the Class object corresponding to the
        annotation type
Returns:
this element's annotation for the specified annotation type if
     present on this element, else null
Throws:
NullPointerException - if the given annotation class is null


"
Executable,getAnnotationsByType(Class<T> annotationClass),<T extends Annotation> T[],Returns annotations that are associated with this element.,"

getAnnotationsByType
public <T extends Annotation> T[] getAnnotationsByType(Class<T> annotationClass)
Returns annotations that are associated with this element.

 If there are no annotations associated with this element, the return
 value is an array of length 0.

 The difference between this method and AnnotatedElement.getAnnotation(Class)
 is that this method detects if its argument is a repeatable
 annotation type (JLS 9.6), and if so, attempts to find one or
 more annotations of that type by ""looking through"" a container
 annotation.

 The caller of this method is free to modify the returned array; it will
 have no effect on the arrays returned to other callers.

Specified by:
getAnnotationsByType in interface AnnotatedElement
Overrides:
getAnnotationsByType in class AccessibleObject
Type Parameters:
T - the type of the annotation to query for and return if present
Parameters:
annotationClass - the Class object corresponding to the
        annotation type
Returns:
all this element's annotations for the specified annotation type if
     associated with this element, else an array of length zero
Throws:
NullPointerException - if the given annotation class is null


"
Executable,getDeclaredAnnotations(),Annotation[],Returns annotations that are directly present on this element.,"

getDeclaredAnnotations
public Annotation[] getDeclaredAnnotations()
Returns annotations that are directly present on this element.
 This method ignores inherited annotations.

 If there are no annotations directly present on this element,
 the return value is an array of length 0.

 The caller of this method is free to modify the returned array; it will
 have no effect on the arrays returned to other callers.

Specified by:
getDeclaredAnnotations in interface AnnotatedElement
Overrides:
getDeclaredAnnotations in class AccessibleObject
Returns:
annotations directly present on this element


"
Executable,getDeclaringClass(),abstract Class<?>,Returns the Class object representing the class or interface that declares the executable represented by this object.,"

getDeclaringClass
public abstract Class<?> getDeclaringClass()
Returns the Class object representing the class or interface
 that declares the executable represented by this object.

Specified by:
getDeclaringClass in interface Member
Returns:
an object representing the declaring class of the
 underlying member


"
Executable,getExceptionTypes(),abstract Class<?>[],Returns an array of Class objects that represent the types of exceptions declared to be thrown by the underlying executable represented by this object.,"

getExceptionTypes
public abstract Class<?>[] getExceptionTypes()
Returns an array of Class objects that represent the
 types of exceptions declared to be thrown by the underlying
 executable represented by this object.  Returns an array of
 length 0 if the executable declares no exceptions in its throws clause.

Returns:
the exception types declared as being thrown by the
 executable this object represents


"
Executable,getGenericExceptionTypes(),Type[],Returns an array of Type objects that represent the exceptions declared to be thrown by this executable object.,"

getGenericExceptionTypes
public Type[] getGenericExceptionTypes()
Returns an array of Type objects that represent the
 exceptions declared to be thrown by this executable object.
 Returns an array of length 0 if the underlying executable declares
 no exceptions in its throws clause.

 If an exception type is a type variable or a parameterized
 type, it is created. Otherwise, it is resolved.

Returns:
an array of Types that represent the exception types
     thrown by the underlying executable
Throws:
GenericSignatureFormatError - if the generic method signature does not conform to the format
     specified in
     The Java™ Virtual Machine Specification
TypeNotPresentException - if the underlying executable's
     throws clause refers to a non-existent type declaration
MalformedParameterizedTypeException - if
     the underlying executable's throws clause refers to a
     parameterized type that cannot be instantiated for any reason


"
Executable,getGenericParameterTypes(),Type[],"Returns an array of Type objects that represent the formal parameter types, in declaration order, of the executable represented by this object.","

getGenericParameterTypes
public Type[] getGenericParameterTypes()
Returns an array of Type objects that represent the formal
 parameter types, in declaration order, of the executable represented by
 this object. Returns an array of length 0 if the
 underlying executable takes no parameters.

 If a formal parameter type is a parameterized type,
 the Type object returned for it must accurately reflect
 the actual type parameters used in the source code.

 If a formal parameter type is a type variable or a parameterized
 type, it is created. Otherwise, it is resolved.

Returns:
an array of Types that represent the formal
     parameter types of the underlying executable, in declaration order
Throws:
GenericSignatureFormatError - if the generic method signature does not conform to the format
     specified in
     The Java™ Virtual Machine Specification
TypeNotPresentException - if any of the parameter
     types of the underlying executable refers to a non-existent type
     declaration
MalformedParameterizedTypeException - if any of
     the underlying executable's parameter types refer to a parameterized
     type that cannot be instantiated for any reason


"
Executable,getModifiers(),abstract int,Returns the Java language modifiers for the executable represented by this object.,"

getModifiers
public abstract int getModifiers()
Returns the Java language modifiers for
 the executable represented by this object.

Specified by:
getModifiers in interface Member
Returns:
the Java language modifiers for the underlying member
See Also:
Modifier


"
Executable,getName(),abstract String,Returns the name of the executable represented by this object.,"

getName
public abstract String getName()
Returns the name of the executable represented by this object.

Specified by:
getName in interface Member
Returns:
the simple name of the underlying member


"
Executable,getParameterAnnotations(),abstract Annotation[][],"Returns an array of arrays of Annotations that represent the annotations on the formal parameters, in declaration order, of the Executable represented by this object.","

getParameterAnnotations
public abstract Annotation[][] getParameterAnnotations()
Returns an array of arrays of Annotations that
 represent the annotations on the formal parameters, in
 declaration order, of the Executable represented by
 this object.  Synthetic and mandated parameters (see
 explanation below), such as the outer ""this"" parameter to an
 inner class constructor will be represented in the returned
 array.  If the executable has no parameters (meaning no formal,
 no synthetic, and no mandated parameters), a zero-length array
 will be returned.  If the Executable has one or more
 parameters, a nested array of length zero is returned for each
 parameter with no annotations. The annotation objects contained
 in the returned arrays are serializable.  The caller of this
 method is free to modify the returned arrays; it will have no
 effect on the arrays returned to other callers.

 A compiler may add extra parameters that are implicitly
 declared in source (""mandated""), as well as parameters that
 are neither implicitly nor explicitly declared in source
 (""synthetic"") to the parameter list for a method.  See Parameter for more information.

Returns:
an array of arrays that represent the annotations on
    the formal and implicit parameters, in declaration order, of
    the executable represented by this object
See Also:
Parameter, 
Parameter.getAnnotations()


"
Executable,getParameterCount(),int,Returns the number of formal parameters (whether explicitly declared or implicitly declared or neither) for the executable represented by this object.,"

getParameterCount
public int getParameterCount()
Returns the number of formal parameters (whether explicitly
 declared or implicitly declared or neither) for the executable
 represented by this object.

Returns:
The number of formal parameters for the executable this
 object represents


"
Executable,getParameters(),Parameter[],Returns an array of Parameter objects that represent all the parameters to the underlying executable represented by this object.,"

getParameters
public Parameter[] getParameters()
Returns an array of Parameter objects that represent
 all the parameters to the underlying executable represented by
 this object.  Returns an array of length 0 if the executable
 has no parameters.

 The parameters of the underlying executable do not necessarily
 have unique names, or names that are legal identifiers in the
 Java programming language (JLS 3.8).

Returns:
an array of Parameter objects representing all
 the parameters to the executable this object represents.
Throws:
MalformedParametersException - if the class file contains
 a MethodParameters attribute that is improperly formatted.


"
Executable,getParameterTypes(),abstract Class<?>[],"Returns an array of Class objects that represent the formal parameter types, in declaration order, of the executable represented by this object.","

getParameterTypes
public abstract Class<?>[] getParameterTypes()
Returns an array of Class objects that represent the formal
 parameter types, in declaration order, of the executable
 represented by this object.  Returns an array of length
 0 if the underlying executable takes no parameters.

Returns:
the parameter types for the executable this object
 represents


"
Executable,getTypeParameters(),abstract TypeVariable<?>[],"Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order.","

getTypeParameters
public abstract TypeVariable<?>[] getTypeParameters()
Returns an array of TypeVariable objects that represent the
 type variables declared by the generic declaration represented by this
 GenericDeclaration object, in declaration order.  Returns an
 array of length 0 if the underlying generic declaration declares no type
 variables.

Specified by:
getTypeParameters in interface GenericDeclaration
Returns:
an array of TypeVariable objects that represent
     the type variables declared by this generic declaration
Throws:
GenericSignatureFormatError - if the generic
     signature of this generic declaration does not conform to
     the format specified in
     The Java™ Virtual Machine Specification


"
Executable,isSynthetic(),boolean,Returns true if this executable is a synthetic construct; returns false otherwise.,"

isSynthetic
public boolean isSynthetic()
Returns true if this executable is a synthetic
 construct; returns false otherwise.

Specified by:
isSynthetic in interface Member
Returns:
true if and only if this executable is a synthetic
 construct as defined by
 The Java™ Language Specification.
See  The Java™ Language Specification:
13.1 The Form of a Binary


"
Executable,isVarArgs(),boolean,Returns true if this executable was declared to take a variable number of arguments; returns false otherwise.,"

isVarArgs
public boolean isVarArgs()
Returns true if this executable was declared to take a
 variable number of arguments; returns false otherwise.

Returns:
true if an only if this executable was declared
 to take a variable number of arguments.


"
Executable,toGenericString(),abstract String,"Returns a string describing this Executable, including any type parameters.","

toGenericString
public abstract String toGenericString()
Returns a string describing this Executable, including
 any type parameters.

Returns:
a string describing this Executable, including
 any type parameters


"
Field,equals(Object obj),boolean,Compares this Field against the specified object.,"

equals
public boolean equals(Object obj)
Compares this Field against the specified object.  Returns
 true if the objects are the same.  Two Field objects are the same if
 they were declared by the same class and have the same name
 and type.

Overrides:
equals in class Object
Parameters:
obj - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
Field,get(Object obj),Object,"Returns the value of the field represented by this Field, on the specified object.","

get
public Object get(Object obj)
           throws IllegalArgumentException,
                  IllegalAccessException
Returns the value of the field represented by this Field, on
 the specified object. The value is automatically wrapped in an
 object if it has a primitive type.

 The underlying field's value is obtained as follows:

 If the underlying field is a static field, the obj argument
 is ignored; it may be null.

 Otherwise, the underlying field is an instance field.  If the
 specified obj argument is null, the method throws a
 NullPointerException. If the specified object is not an
 instance of the class or interface declaring the underlying
 field, the method throws an IllegalArgumentException.

 If this Field object is enforcing Java language access control, and
 the underlying field is inaccessible, the method throws an
 IllegalAccessException.
 If the underlying field is static, the class that declared the
 field is initialized if it has not already been initialized.

 Otherwise, the value is retrieved from the underlying instance
 or static field.  If the field has a primitive type, the value
 is wrapped in an object before being returned, otherwise it is
 returned as is.

 If the field is hidden in the type of obj,
 the field's value is obtained according to the preceding rules.

Parameters:
obj - object from which the represented field's value is
 to be extracted
Returns:
the value of the represented field in object
 obj; primitive values are wrapped in an appropriate
 object before being returned
Throws:
IllegalAccessException - if this Field object
              is enforcing Java language access control and the underlying
              field is inaccessible.
IllegalArgumentException - if the specified object is not an
              instance of the class or interface declaring the underlying
              field (or a subclass or implementor thereof).
NullPointerException - if the specified object is null
              and the field is an instance field.
ExceptionInInitializerError - if the initialization provoked
              by this method fails.


"
Field,getAnnotatedType(),AnnotatedType,Returns an AnnotatedType object that represents the use of a type to specify the declared type of the field represented by this Field.,"

getAnnotatedType
public AnnotatedType getAnnotatedType()
Returns an AnnotatedType object that represents the use of a type to specify
 the declared type of the field represented by this Field.

Returns:
an object representing the declared type of the field
 represented by this Field
Since:
1.8


"
Field,getAnnotation(Class<T> annotationClass),<T extends Annotation> T,"Returns this element's annotation for the specified type if such an annotation is present, else null.","

getAnnotation
public <T extends Annotation> T getAnnotation(Class<T> annotationClass)
Description copied from interface: AnnotatedElement
Returns this element's annotation for the specified type if
 such an annotation is present, else null.

Specified by:
getAnnotation in interface AnnotatedElement
Overrides:
getAnnotation in class AccessibleObject
Type Parameters:
T - the type of the annotation to query for and return if present
Parameters:
annotationClass - the Class object corresponding to the
        annotation type
Returns:
this element's annotation for the specified annotation type if
     present on this element, else null
Throws:
NullPointerException - if the given annotation class is null
Since:
1.5


"
Field,getAnnotationsByType(Class<T> annotationClass),<T extends Annotation> T[],Returns annotations that are associated with this element.,"

getAnnotationsByType
public <T extends Annotation> T[] getAnnotationsByType(Class<T> annotationClass)
Returns annotations that are associated with this element.

 If there are no annotations associated with this element, the return
 value is an array of length 0.

 The difference between this method and AnnotatedElement.getAnnotation(Class)
 is that this method detects if its argument is a repeatable
 annotation type (JLS 9.6), and if so, attempts to find one or
 more annotations of that type by ""looking through"" a container
 annotation.

 The caller of this method is free to modify the returned array; it will
 have no effect on the arrays returned to other callers.

Specified by:
getAnnotationsByType in interface AnnotatedElement
Overrides:
getAnnotationsByType in class AccessibleObject
Type Parameters:
T - the type of the annotation to query for and return if present
Parameters:
annotationClass - the Class object corresponding to the
        annotation type
Returns:
all this element's annotations for the specified annotation type if
     associated with this element, else an array of length zero
Throws:
NullPointerException - if the given annotation class is null
Since:
1.8


"
Field,getBoolean(Object obj),boolean,Gets the value of a static or instance boolean field.,"

getBoolean
public boolean getBoolean(Object obj)
                   throws IllegalArgumentException,
                          IllegalAccessException
Gets the value of a static or instance boolean field.

Parameters:
obj - the object to extract the boolean value
 from
Returns:
the value of the boolean field
Throws:
IllegalAccessException - if this Field object
              is enforcing Java language access control and the underlying
              field is inaccessible.
IllegalArgumentException - if the specified object is not
              an instance of the class or interface declaring the
              underlying field (or a subclass or implementor
              thereof), or if the field value cannot be
              converted to the type boolean by a
              widening conversion.
NullPointerException - if the specified object is null
              and the field is an instance field.
ExceptionInInitializerError - if the initialization provoked
              by this method fails.
See Also:
get(java.lang.Object)


"
Field,getByte(Object obj),byte,Gets the value of a static or instance byte field.,"

getByte
public byte getByte(Object obj)
             throws IllegalArgumentException,
                    IllegalAccessException
Gets the value of a static or instance byte field.

Parameters:
obj - the object to extract the byte value
 from
Returns:
the value of the byte field
Throws:
IllegalAccessException - if this Field object
              is enforcing Java language access control and the underlying
              field is inaccessible.
IllegalArgumentException - if the specified object is not
              an instance of the class or interface declaring the
              underlying field (or a subclass or implementor
              thereof), or if the field value cannot be
              converted to the type byte by a
              widening conversion.
NullPointerException - if the specified object is null
              and the field is an instance field.
ExceptionInInitializerError - if the initialization provoked
              by this method fails.
See Also:
get(java.lang.Object)


"
Field,getChar(Object obj),char,Gets the value of a static or instance field of type char or of another primitive type convertible to type char via a widening conversion.,"

getChar
public char getChar(Object obj)
             throws IllegalArgumentException,
                    IllegalAccessException
Gets the value of a static or instance field of type
 char or of another primitive type convertible to
 type char via a widening conversion.

Parameters:
obj - the object to extract the char value
 from
Returns:
the value of the field converted to type char
Throws:
IllegalAccessException - if this Field object
              is enforcing Java language access control and the underlying
              field is inaccessible.
IllegalArgumentException - if the specified object is not
              an instance of the class or interface declaring the
              underlying field (or a subclass or implementor
              thereof), or if the field value cannot be
              converted to the type char by a
              widening conversion.
NullPointerException - if the specified object is null
              and the field is an instance field.
ExceptionInInitializerError - if the initialization provoked
              by this method fails.
See Also:
get(java.lang.Object)


"
Field,getDeclaredAnnotations(),Annotation[],Returns annotations that are directly present on this element.,"

getDeclaredAnnotations
public Annotation[] getDeclaredAnnotations()
Returns annotations that are directly present on this element.
 This method ignores inherited annotations.

 If there are no annotations directly present on this element,
 the return value is an array of length 0.

 The caller of this method is free to modify the returned array; it will
 have no effect on the arrays returned to other callers.

Specified by:
getDeclaredAnnotations in interface AnnotatedElement
Overrides:
getDeclaredAnnotations in class AccessibleObject
Returns:
annotations directly present on this element


"
Field,getDeclaringClass(),Class<?>,Returns the Class object representing the class or interface that declares the field represented by this Field object.,"

getDeclaringClass
public Class<?> getDeclaringClass()
Returns the Class object representing the class or interface
 that declares the field represented by this Field object.

Specified by:
getDeclaringClass in interface Member
Returns:
an object representing the declaring class of the
 underlying member


"
Field,getDouble(Object obj),double,Gets the value of a static or instance field of type double or of another primitive type convertible to type double via a widening conversion.,"

getDouble
public double getDouble(Object obj)
                 throws IllegalArgumentException,
                        IllegalAccessException
Gets the value of a static or instance field of type
 double or of another primitive type convertible to
 type double via a widening conversion.

Parameters:
obj - the object to extract the double value
 from
Returns:
the value of the field converted to type double
Throws:
IllegalAccessException - if this Field object
              is enforcing Java language access control and the underlying
              field is inaccessible.
IllegalArgumentException - if the specified object is not
              an instance of the class or interface declaring the
              underlying field (or a subclass or implementor
              thereof), or if the field value cannot be
              converted to the type double by a
              widening conversion.
NullPointerException - if the specified object is null
              and the field is an instance field.
ExceptionInInitializerError - if the initialization provoked
              by this method fails.
See Also:
get(java.lang.Object)


"
Field,getFloat(Object obj),float,Gets the value of a static or instance field of type float or of another primitive type convertible to type float via a widening conversion.,"

getFloat
public float getFloat(Object obj)
               throws IllegalArgumentException,
                      IllegalAccessException
Gets the value of a static or instance field of type
 float or of another primitive type convertible to
 type float via a widening conversion.

Parameters:
obj - the object to extract the float value
 from
Returns:
the value of the field converted to type float
Throws:
IllegalAccessException - if this Field object
              is enforcing Java language access control and the underlying
              field is inaccessible.
IllegalArgumentException - if the specified object is not
              an instance of the class or interface declaring the
              underlying field (or a subclass or implementor
              thereof), or if the field value cannot be
              converted to the type float by a
              widening conversion.
NullPointerException - if the specified object is null
              and the field is an instance field.
ExceptionInInitializerError - if the initialization provoked
              by this method fails.
See Also:
get(java.lang.Object)


"
Field,getGenericType(),Type,Returns a Type object that represents the declared type for the field represented by this Field object.,"

getGenericType
public Type getGenericType()
Returns a Type object that represents the declared type for
 the field represented by this Field object.

 If the Type is a parameterized type, the
 Type object returned must accurately reflect the
 actual type parameters used in the source code.

 If the type of the underlying field is a type variable or a
 parameterized type, it is created. Otherwise, it is resolved.

Returns:
a Type object that represents the declared type for
     the field represented by this Field object
Throws:
GenericSignatureFormatError - if the generic field
     signature does not conform to the format specified in
     The Java™ Virtual Machine Specification
TypeNotPresentException - if the generic type
     signature of the underlying field refers to a non-existent
     type declaration
MalformedParameterizedTypeException - if the generic
     signature of the underlying field refers to a parameterized type
     that cannot be instantiated for any reason
Since:
1.5


"
Field,getInt(Object obj),int,Gets the value of a static or instance field of type int or of another primitive type convertible to type int via a widening conversion.,"

getInt
public int getInt(Object obj)
           throws IllegalArgumentException,
                  IllegalAccessException
Gets the value of a static or instance field of type
 int or of another primitive type convertible to
 type int via a widening conversion.

Parameters:
obj - the object to extract the int value
 from
Returns:
the value of the field converted to type int
Throws:
IllegalAccessException - if this Field object
              is enforcing Java language access control and the underlying
              field is inaccessible.
IllegalArgumentException - if the specified object is not
              an instance of the class or interface declaring the
              underlying field (or a subclass or implementor
              thereof), or if the field value cannot be
              converted to the type int by a
              widening conversion.
NullPointerException - if the specified object is null
              and the field is an instance field.
ExceptionInInitializerError - if the initialization provoked
              by this method fails.
See Also:
get(java.lang.Object)


"
Field,getLong(Object obj),long,Gets the value of a static or instance field of type long or of another primitive type convertible to type long via a widening conversion.,"

getLong
public long getLong(Object obj)
             throws IllegalArgumentException,
                    IllegalAccessException
Gets the value of a static or instance field of type
 long or of another primitive type convertible to
 type long via a widening conversion.

Parameters:
obj - the object to extract the long value
 from
Returns:
the value of the field converted to type long
Throws:
IllegalAccessException - if this Field object
              is enforcing Java language access control and the underlying
              field is inaccessible.
IllegalArgumentException - if the specified object is not
              an instance of the class or interface declaring the
              underlying field (or a subclass or implementor
              thereof), or if the field value cannot be
              converted to the type long by a
              widening conversion.
NullPointerException - if the specified object is null
              and the field is an instance field.
ExceptionInInitializerError - if the initialization provoked
              by this method fails.
See Also:
get(java.lang.Object)


"
Field,getModifiers(),int,"Returns the Java language modifiers for the field represented by this Field object, as an integer.","

getModifiers
public int getModifiers()
Returns the Java language modifiers for the field represented
 by this Field object, as an integer. The Modifier class should
 be used to decode the modifiers.

Specified by:
getModifiers in interface Member
Returns:
the Java language modifiers for the underlying member
See Also:
Modifier


"
Field,getName(),String,Returns the name of the field represented by this Field object.,"

getName
public String getName()
Returns the name of the field represented by this Field object.

Specified by:
getName in interface Member
Returns:
the simple name of the underlying member


"
Field,getShort(Object obj),short,Gets the value of a static or instance field of type short or of another primitive type convertible to type short via a widening conversion.,"

getShort
public short getShort(Object obj)
               throws IllegalArgumentException,
                      IllegalAccessException
Gets the value of a static or instance field of type
 short or of another primitive type convertible to
 type short via a widening conversion.

Parameters:
obj - the object to extract the short value
 from
Returns:
the value of the field converted to type short
Throws:
IllegalAccessException - if this Field object
              is enforcing Java language access control and the underlying
              field is inaccessible.
IllegalArgumentException - if the specified object is not
              an instance of the class or interface declaring the
              underlying field (or a subclass or implementor
              thereof), or if the field value cannot be
              converted to the type short by a
              widening conversion.
NullPointerException - if the specified object is null
              and the field is an instance field.
ExceptionInInitializerError - if the initialization provoked
              by this method fails.
See Also:
get(java.lang.Object)


"
Field,getType(),Class<?>,Returns a Class object that identifies the declared type for the field represented by this Field object.,"

getType
public Class<?> getType()
Returns a Class object that identifies the
 declared type for the field represented by this
 Field object.

Returns:
a Class object identifying the declared
 type of the field represented by this object


"
Field,hashCode(),int,Returns a hashcode for this Field.,"

hashCode
public int hashCode()
Returns a hashcode for this Field.  This is computed as the
 exclusive-or of the hashcodes for the underlying field's
 declaring class name and its name.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Field,isEnumConstant(),boolean,Returns true if this field represents an element of an enumerated type; returns false otherwise.,"

isEnumConstant
public boolean isEnumConstant()
Returns true if this field represents an element of
 an enumerated type; returns false otherwise.

Returns:
true if and only if this field represents an element of
 an enumerated type.
Since:
1.5


"
Field,isSynthetic(),boolean,Returns true if this field is a synthetic field; returns false otherwise.,"

isSynthetic
public boolean isSynthetic()
Returns true if this field is a synthetic
 field; returns false otherwise.

Specified by:
isSynthetic in interface Member
Returns:
true if and only if this field is a synthetic
 field as defined by the Java Language Specification.
Since:
1.5


"
Field,"set(Object obj, Object value)",void,Sets the field represented by this Field object on the specified object argument to the specified new value.,"

set
public void set(Object obj,
                Object value)
         throws IllegalArgumentException,
                IllegalAccessException
Sets the field represented by this Field object on the
 specified object argument to the specified new value. The new
 value is automatically unwrapped if the underlying field has a
 primitive type.

 The operation proceeds as follows:

 If the underlying field is static, the obj argument is
 ignored; it may be null.

 Otherwise the underlying field is an instance field.  If the
 specified object argument is null, the method throws a
 NullPointerException.  If the specified object argument is not
 an instance of the class or interface declaring the underlying
 field, the method throws an IllegalArgumentException.

 If this Field object is enforcing Java language access control, and
 the underlying field is inaccessible, the method throws an
 IllegalAccessException.

 If the underlying field is final, the method throws an
 IllegalAccessException unless setAccessible(true)
 has succeeded for this Field object
 and the field is non-static. Setting a final field in this way
 is meaningful only during deserialization or reconstruction of
 instances of classes with blank final fields, before they are
 made available for access by other parts of a program. Use in
 any other context may have unpredictable effects, including cases
 in which other parts of a program continue to use the original
 value of this field.

 If the underlying field is of a primitive type, an unwrapping
 conversion is attempted to convert the new value to a value of
 a primitive type.  If this attempt fails, the method throws an
 IllegalArgumentException.

 If, after possible unwrapping, the new value cannot be
 converted to the type of the underlying field by an identity or
 widening conversion, the method throws an
 IllegalArgumentException.

 If the underlying field is static, the class that declared the
 field is initialized if it has not already been initialized.

 The field is set to the possibly unwrapped and widened new value.

 If the field is hidden in the type of obj,
 the field's value is set according to the preceding rules.

Parameters:
obj - the object whose field should be modified
value - the new value for the field of obj
 being modified
Throws:
IllegalAccessException - if this Field object
              is enforcing Java language access control and the underlying
              field is either inaccessible or final.
IllegalArgumentException - if the specified object is not an
              instance of the class or interface declaring the underlying
              field (or a subclass or implementor thereof),
              or if an unwrapping conversion fails.
NullPointerException - if the specified object is null
              and the field is an instance field.
ExceptionInInitializerError - if the initialization provoked
              by this method fails.


"
Field,"setBoolean(Object obj, boolean z)",void,Sets the value of a field as a boolean on the specified object.,"

setBoolean
public void setBoolean(Object obj,
                       boolean z)
                throws IllegalArgumentException,
                       IllegalAccessException
Sets the value of a field as a boolean on the specified object.
 This method is equivalent to
 set(obj, zObj),
 where zObj is a Boolean object and
 zObj.booleanValue() == z.

Parameters:
obj - the object whose field should be modified
z - the new value for the field of obj
 being modified
Throws:
IllegalAccessException - if this Field object
              is enforcing Java language access control and the underlying
              field is either inaccessible or final.
IllegalArgumentException - if the specified object is not an
              instance of the class or interface declaring the underlying
              field (or a subclass or implementor thereof),
              or if an unwrapping conversion fails.
NullPointerException - if the specified object is null
              and the field is an instance field.
ExceptionInInitializerError - if the initialization provoked
              by this method fails.
See Also:
set(java.lang.Object, java.lang.Object)


"
Field,"setByte(Object obj, byte b)",void,Sets the value of a field as a byte on the specified object.,"

setByte
public void setByte(Object obj,
                    byte b)
             throws IllegalArgumentException,
                    IllegalAccessException
Sets the value of a field as a byte on the specified object.
 This method is equivalent to
 set(obj, bObj),
 where bObj is a Byte object and
 bObj.byteValue() == b.

Parameters:
obj - the object whose field should be modified
b - the new value for the field of obj
 being modified
Throws:
IllegalAccessException - if this Field object
              is enforcing Java language access control and the underlying
              field is either inaccessible or final.
IllegalArgumentException - if the specified object is not an
              instance of the class or interface declaring the underlying
              field (or a subclass or implementor thereof),
              or if an unwrapping conversion fails.
NullPointerException - if the specified object is null
              and the field is an instance field.
ExceptionInInitializerError - if the initialization provoked
              by this method fails.
See Also:
set(java.lang.Object, java.lang.Object)


"
Field,"setChar(Object obj, char c)",void,Sets the value of a field as a char on the specified object.,"

setChar
public void setChar(Object obj,
                    char c)
             throws IllegalArgumentException,
                    IllegalAccessException
Sets the value of a field as a char on the specified object.
 This method is equivalent to
 set(obj, cObj),
 where cObj is a Character object and
 cObj.charValue() == c.

Parameters:
obj - the object whose field should be modified
c - the new value for the field of obj
 being modified
Throws:
IllegalAccessException - if this Field object
              is enforcing Java language access control and the underlying
              field is either inaccessible or final.
IllegalArgumentException - if the specified object is not an
              instance of the class or interface declaring the underlying
              field (or a subclass or implementor thereof),
              or if an unwrapping conversion fails.
NullPointerException - if the specified object is null
              and the field is an instance field.
ExceptionInInitializerError - if the initialization provoked
              by this method fails.
See Also:
set(java.lang.Object, java.lang.Object)


"
Field,"setDouble(Object obj, double d)",void,Sets the value of a field as a double on the specified object.,"

setDouble
public void setDouble(Object obj,
                      double d)
               throws IllegalArgumentException,
                      IllegalAccessException
Sets the value of a field as a double on the specified object.
 This method is equivalent to
 set(obj, dObj),
 where dObj is a Double object and
 dObj.doubleValue() == d.

Parameters:
obj - the object whose field should be modified
d - the new value for the field of obj
 being modified
Throws:
IllegalAccessException - if this Field object
              is enforcing Java language access control and the underlying
              field is either inaccessible or final.
IllegalArgumentException - if the specified object is not an
              instance of the class or interface declaring the underlying
              field (or a subclass or implementor thereof),
              or if an unwrapping conversion fails.
NullPointerException - if the specified object is null
              and the field is an instance field.
ExceptionInInitializerError - if the initialization provoked
              by this method fails.
See Also:
set(java.lang.Object, java.lang.Object)


"
Field,"setFloat(Object obj, float f)",void,Sets the value of a field as a float on the specified object.,"

setFloat
public void setFloat(Object obj,
                     float f)
              throws IllegalArgumentException,
                     IllegalAccessException
Sets the value of a field as a float on the specified object.
 This method is equivalent to
 set(obj, fObj),
 where fObj is a Float object and
 fObj.floatValue() == f.

Parameters:
obj - the object whose field should be modified
f - the new value for the field of obj
 being modified
Throws:
IllegalAccessException - if this Field object
              is enforcing Java language access control and the underlying
              field is either inaccessible or final.
IllegalArgumentException - if the specified object is not an
              instance of the class or interface declaring the underlying
              field (or a subclass or implementor thereof),
              or if an unwrapping conversion fails.
NullPointerException - if the specified object is null
              and the field is an instance field.
ExceptionInInitializerError - if the initialization provoked
              by this method fails.
See Also:
set(java.lang.Object, java.lang.Object)


"
Field,"setInt(Object obj, int i)",void,Sets the value of a field as an int on the specified object.,"

setInt
public void setInt(Object obj,
                   int i)
            throws IllegalArgumentException,
                   IllegalAccessException
Sets the value of a field as an int on the specified object.
 This method is equivalent to
 set(obj, iObj),
 where iObj is a Integer object and
 iObj.intValue() == i.

Parameters:
obj - the object whose field should be modified
i - the new value for the field of obj
 being modified
Throws:
IllegalAccessException - if this Field object
              is enforcing Java language access control and the underlying
              field is either inaccessible or final.
IllegalArgumentException - if the specified object is not an
              instance of the class or interface declaring the underlying
              field (or a subclass or implementor thereof),
              or if an unwrapping conversion fails.
NullPointerException - if the specified object is null
              and the field is an instance field.
ExceptionInInitializerError - if the initialization provoked
              by this method fails.
See Also:
set(java.lang.Object, java.lang.Object)


"
Field,"setLong(Object obj, long l)",void,Sets the value of a field as a long on the specified object.,"

setLong
public void setLong(Object obj,
                    long l)
             throws IllegalArgumentException,
                    IllegalAccessException
Sets the value of a field as a long on the specified object.
 This method is equivalent to
 set(obj, lObj),
 where lObj is a Long object and
 lObj.longValue() == l.

Parameters:
obj - the object whose field should be modified
l - the new value for the field of obj
 being modified
Throws:
IllegalAccessException - if this Field object
              is enforcing Java language access control and the underlying
              field is either inaccessible or final.
IllegalArgumentException - if the specified object is not an
              instance of the class or interface declaring the underlying
              field (or a subclass or implementor thereof),
              or if an unwrapping conversion fails.
NullPointerException - if the specified object is null
              and the field is an instance field.
ExceptionInInitializerError - if the initialization provoked
              by this method fails.
See Also:
set(java.lang.Object, java.lang.Object)


"
Field,"setShort(Object obj, short s)",void,Sets the value of a field as a short on the specified object.,"

setShort
public void setShort(Object obj,
                     short s)
              throws IllegalArgumentException,
                     IllegalAccessException
Sets the value of a field as a short on the specified object.
 This method is equivalent to
 set(obj, sObj),
 where sObj is a Short object and
 sObj.shortValue() == s.

Parameters:
obj - the object whose field should be modified
s - the new value for the field of obj
 being modified
Throws:
IllegalAccessException - if this Field object
              is enforcing Java language access control and the underlying
              field is either inaccessible or final.
IllegalArgumentException - if the specified object is not an
              instance of the class or interface declaring the underlying
              field (or a subclass or implementor thereof),
              or if an unwrapping conversion fails.
NullPointerException - if the specified object is null
              and the field is an instance field.
ExceptionInInitializerError - if the initialization provoked
              by this method fails.
See Also:
set(java.lang.Object, java.lang.Object)


"
Field,toGenericString(),String,"Returns a string describing this Field, including its generic type.","

toGenericString
public String toGenericString()
Returns a string describing this Field, including
 its generic type.  The format is the access modifiers for the
 field, if any, followed by the generic field type, followed by
 a space, followed by the fully-qualified name of the class
 declaring the field, followed by a period, followed by the name
 of the field.

 The modifiers are placed in canonical order as specified by
 ""The Java Language Specification"".  This is public,
 protected or private first, and then other
 modifiers in the following order: static, final,
 transient, volatile.

Returns:
a string describing this Field, including
 its generic type
Since:
1.5
See  The Java™ Language Specification:
8.3.1 Field Modifiers


"
Field,toString(),String,Returns a string describing this Field.,"

toString
public String toString()
Returns a string describing this Field.  The format is
 the access modifiers for the field, if any, followed
 by the field type, followed by a space, followed by
 the fully-qualified name of the class declaring the field,
 followed by a period, followed by the name of the field.
 For example:
 
    public static final int java.lang.Thread.MIN_PRIORITY
    private int java.io.FileDescriptor.fd
 
The modifiers are placed in canonical order as specified by
 ""The Java Language Specification"".  This is public,
 protected or private first, and then other
 modifiers in the following order: static, final,
 transient, volatile.

Overrides:
toString in class Object
Returns:
a string describing this Field
See  The Java™ Language Specification:
8.3.1 Field Modifiers


"
Method,equals(Object obj),boolean,Compares this Method against the specified object.,"

equals
public boolean equals(Object obj)
Compares this Method against the specified object.  Returns
 true if the objects are the same.  Two Methods are the same if
 they were declared by the same class and have the same name
 and formal parameter types and return type.

Overrides:
equals in class Object
Parameters:
obj - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
Method,getAnnotatedReturnType(),AnnotatedType,Returns an AnnotatedType object that represents the use of a type to specify the return type of the method/constructor represented by this Executable.,"

getAnnotatedReturnType
public AnnotatedType getAnnotatedReturnType()
Returns an AnnotatedType object that represents the use of a type to
 specify the return type of the method/constructor represented by this
 Executable.

 If this Executable object represents a constructor, the AnnotatedType object represents the type of the constructed object.

 If this Executable object represents a method, the AnnotatedType object represents the use of a type to specify the return
 type of the method.

Specified by:
getAnnotatedReturnType in class Executable
Returns:
an object representing the return type of the method
 or constructor represented by this Executable
Since:
1.8


"
Method,getAnnotation(Class<T> annotationClass),<T extends Annotation> T,"Returns this element's annotation for the specified type if such an annotation is present, else null.","

getAnnotation
public <T extends Annotation> T getAnnotation(Class<T> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is present, else null.

Specified by:
getAnnotation in interface AnnotatedElement
Overrides:
getAnnotation in class Executable
Type Parameters:
T - the type of the annotation to query for and return if present
Parameters:
annotationClass - the Class object corresponding to the
        annotation type
Returns:
this element's annotation for the specified annotation type if
     present on this element, else null
Throws:
NullPointerException - if the given annotation class is null
Since:
1.5


"
Method,getDeclaredAnnotations(),Annotation[],Returns annotations that are directly present on this element.,"

getDeclaredAnnotations
public Annotation[] getDeclaredAnnotations()
Returns annotations that are directly present on this element.
 This method ignores inherited annotations.

 If there are no annotations directly present on this element,
 the return value is an array of length 0.

 The caller of this method is free to modify the returned array; it will
 have no effect on the arrays returned to other callers.

Specified by:
getDeclaredAnnotations in interface AnnotatedElement
Overrides:
getDeclaredAnnotations in class Executable
Returns:
annotations directly present on this element
Since:
1.5


"
Method,getDeclaringClass(),Class<?>,Returns the Class object representing the class or interface that declares the executable represented by this object.,"

getDeclaringClass
public Class<?> getDeclaringClass()
Returns the Class object representing the class or interface
 that declares the executable represented by this object.

Specified by:
getDeclaringClass in interface Member
Specified by:
getDeclaringClass in class Executable
Returns:
an object representing the declaring class of the
 underlying member


"
Method,getDefaultValue(),Object,Returns the default value for the annotation member represented by this Method instance.,"

getDefaultValue
public Object getDefaultValue()
Returns the default value for the annotation member represented by
 this Method instance.  If the member is of a primitive type,
 an instance of the corresponding wrapper type is returned. Returns
 null if no default is associated with the member, or if the method
 instance does not represent a declared member of an annotation type.

Returns:
the default value for the annotation member represented
     by this Method instance.
Throws:
TypeNotPresentException - if the annotation is of type
     Class and no definition can be found for the
     default class value.
Since:
1.5


"
Method,getExceptionTypes(),Class<?>[],Returns an array of Class objects that represent the types of exceptions declared to be thrown by the underlying executable represented by this object.,"

getExceptionTypes
public Class<?>[] getExceptionTypes()
Returns an array of Class objects that represent the
 types of exceptions declared to be thrown by the underlying
 executable represented by this object.  Returns an array of
 length 0 if the executable declares no exceptions in its throws clause.

Specified by:
getExceptionTypes in class Executable
Returns:
the exception types declared as being thrown by the
 executable this object represents


"
Method,getGenericExceptionTypes(),Type[],Returns an array of Type objects that represent the exceptions declared to be thrown by this executable object.,"

getGenericExceptionTypes
public Type[] getGenericExceptionTypes()
Returns an array of Type objects that represent the
 exceptions declared to be thrown by this executable object.
 Returns an array of length 0 if the underlying executable declares
 no exceptions in its throws clause.

 If an exception type is a type variable or a parameterized
 type, it is created. Otherwise, it is resolved.

Overrides:
getGenericExceptionTypes in class Executable
Returns:
an array of Types that represent the exception types
     thrown by the underlying executable
Throws:
GenericSignatureFormatError - if the generic method signature does not conform to the format
     specified in
     The Java™ Virtual Machine Specification
TypeNotPresentException - if the underlying executable's
     throws clause refers to a non-existent type declaration
MalformedParameterizedTypeException - if
     the underlying executable's throws clause refers to a
     parameterized type that cannot be instantiated for any reason
Since:
1.5


"
Method,getGenericParameterTypes(),Type[],"Returns an array of Type objects that represent the formal parameter types, in declaration order, of the executable represented by this object.","

getGenericParameterTypes
public Type[] getGenericParameterTypes()
Returns an array of Type objects that represent the formal
 parameter types, in declaration order, of the executable represented by
 this object. Returns an array of length 0 if the
 underlying executable takes no parameters.

 If a formal parameter type is a parameterized type,
 the Type object returned for it must accurately reflect
 the actual type parameters used in the source code.

 If a formal parameter type is a type variable or a parameterized
 type, it is created. Otherwise, it is resolved.

Overrides:
getGenericParameterTypes in class Executable
Returns:
an array of Types that represent the formal
     parameter types of the underlying executable, in declaration order
Throws:
GenericSignatureFormatError - if the generic method signature does not conform to the format
     specified in
     The Java™ Virtual Machine Specification
TypeNotPresentException - if any of the parameter
     types of the underlying executable refers to a non-existent type
     declaration
MalformedParameterizedTypeException - if any of
     the underlying executable's parameter types refer to a parameterized
     type that cannot be instantiated for any reason
Since:
1.5


"
Method,getGenericReturnType(),Type,Returns a Type object that represents the formal return type of the method represented by this Method object.,"

getGenericReturnType
public Type getGenericReturnType()
Returns a Type object that represents the formal return
 type of the method represented by this Method object.

 If the return type is a parameterized type,
 the Type object returned must accurately reflect
 the actual type parameters used in the source code.

 If the return type is a type variable or a parameterized type, it
 is created. Otherwise, it is resolved.

Returns:
a Type object that represents the formal return
     type of the underlying  method
Throws:
GenericSignatureFormatError - if the generic method signature does not conform to the format
     specified in
     The Java™ Virtual Machine Specification
TypeNotPresentException - if the underlying method's
     return type refers to a non-existent type declaration
MalformedParameterizedTypeException - if the
     underlying method's return typed refers to a parameterized
     type that cannot be instantiated for any reason
Since:
1.5


"
Method,getModifiers(),int,Returns the Java language modifiers for the executable represented by this object.,"

getModifiers
public int getModifiers()
Returns the Java language modifiers for
 the executable represented by this object.

Specified by:
getModifiers in interface Member
Specified by:
getModifiers in class Executable
Returns:
the Java language modifiers for the underlying member
See Also:
Modifier


"
Method,getName(),String,"Returns the name of the method represented by this Method object, as a String.","

getName
public String getName()
Returns the name of the method represented by this Method
 object, as a String.

Specified by:
getName in interface Member
Specified by:
getName in class Executable
Returns:
the simple name of the underlying member


"
Method,getParameterAnnotations(),Annotation[][],"Returns an array of arrays of Annotations that represent the annotations on the formal parameters, in declaration order, of the Executable represented by this object.","

getParameterAnnotations
public Annotation[][] getParameterAnnotations()
Returns an array of arrays of Annotations that
 represent the annotations on the formal parameters, in
 declaration order, of the Executable represented by
 this object.  Synthetic and mandated parameters (see
 explanation below), such as the outer ""this"" parameter to an
 inner class constructor will be represented in the returned
 array.  If the executable has no parameters (meaning no formal,
 no synthetic, and no mandated parameters), a zero-length array
 will be returned.  If the Executable has one or more
 parameters, a nested array of length zero is returned for each
 parameter with no annotations. The annotation objects contained
 in the returned arrays are serializable.  The caller of this
 method is free to modify the returned arrays; it will have no
 effect on the arrays returned to other callers.

 A compiler may add extra parameters that are implicitly
 declared in source (""mandated""), as well as parameters that
 are neither implicitly nor explicitly declared in source
 (""synthetic"") to the parameter list for a method.  See Parameter for more information.

Specified by:
getParameterAnnotations in class Executable
Returns:
an array of arrays that represent the annotations on
    the formal and implicit parameters, in declaration order, of
    the executable represented by this object
Since:
1.5
See Also:
Parameter, 
Parameter.getAnnotations()


"
Method,getParameterCount(),int,Returns the number of formal parameters (whether explicitly declared or implicitly declared or neither) for the executable represented by this object.,"

getParameterCount
public int getParameterCount()
Returns the number of formal parameters (whether explicitly
 declared or implicitly declared or neither) for the executable
 represented by this object.

Overrides:
getParameterCount in class Executable
Returns:
The number of formal parameters for the executable this
 object represents
Since:
1.8


"
Method,getParameterTypes(),Class<?>[],"Returns an array of Class objects that represent the formal parameter types, in declaration order, of the executable represented by this object.","

getParameterTypes
public Class<?>[] getParameterTypes()
Returns an array of Class objects that represent the formal
 parameter types, in declaration order, of the executable
 represented by this object.  Returns an array of length
 0 if the underlying executable takes no parameters.

Specified by:
getParameterTypes in class Executable
Returns:
the parameter types for the executable this object
 represents


"
Method,getReturnType(),Class<?>,Returns a Class object that represents the formal return type of the method represented by this Method object.,"

getReturnType
public Class<?> getReturnType()
Returns a Class object that represents the formal return type
 of the method represented by this Method object.

Returns:
the return type for the method this object represents


"
Method,getTypeParameters(),TypeVariable<Method>[],"Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order.","

getTypeParameters
public TypeVariable<Method>[] getTypeParameters()
Returns an array of TypeVariable objects that represent the
 type variables declared by the generic declaration represented by this
 GenericDeclaration object, in declaration order.  Returns an
 array of length 0 if the underlying generic declaration declares no type
 variables.

Specified by:
getTypeParameters in interface GenericDeclaration
Specified by:
getTypeParameters in class Executable
Returns:
an array of TypeVariable objects that represent
     the type variables declared by this generic declaration
Throws:
GenericSignatureFormatError - if the generic
     signature of this generic declaration does not conform to
     the format specified in
     The Java™ Virtual Machine Specification
Since:
1.5


"
Method,hashCode(),int,Returns a hashcode for this Method.,"

hashCode
public int hashCode()
Returns a hashcode for this Method.  The hashcode is computed
 as the exclusive-or of the hashcodes for the underlying
 method's declaring class name and the method's name.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Method,"invoke(Object obj, Object... args)",Object,"Invokes the underlying method represented by this Method object, on the specified object with the specified parameters.","

invoke
public Object invoke(Object obj,
                     Object... args)
              throws IllegalAccessException,
                     IllegalArgumentException,
                     InvocationTargetException
Invokes the underlying method represented by this Method
 object, on the specified object with the specified parameters.
 Individual parameters are automatically unwrapped to match
 primitive formal parameters, and both primitive and reference
 parameters are subject to method invocation conversions as
 necessary.

 If the underlying method is static, then the specified obj
 argument is ignored. It may be null.

 If the number of formal parameters required by the underlying method is
 0, the supplied args array may be of length 0 or null.

 If the underlying method is an instance method, it is invoked
 using dynamic method lookup as documented in The Java Language
 Specification, Second Edition, section 15.12.4.4; in particular,
 overriding based on the runtime type of the target object will occur.

 If the underlying method is static, the class that declared
 the method is initialized if it has not already been initialized.

 If the method completes normally, the value it returns is
 returned to the caller of invoke; if the value has a primitive
 type, it is first appropriately wrapped in an object. However,
 if the value has the type of an array of a primitive type, the
 elements of the array are not wrapped in objects; in
 other words, an array of primitive type is returned.  If the
 underlying method return type is void, the invocation returns
 null.

Parameters:
obj - the object the underlying method is invoked from
args - the arguments used for the method call
Returns:
the result of dispatching the method represented by
 this object on obj with parameters
 args
Throws:
IllegalAccessException - if this Method object
              is enforcing Java language access control and the underlying
              method is inaccessible.
IllegalArgumentException - if the method is an
              instance method and the specified object argument
              is not an instance of the class or interface
              declaring the underlying method (or of a subclass
              or implementor thereof); if the number of actual
              and formal parameters differ; if an unwrapping
              conversion for primitive arguments fails; or if,
              after possible unwrapping, a parameter value
              cannot be converted to the corresponding formal
              parameter type by a method invocation conversion.
InvocationTargetException - if the underlying method
              throws an exception.
NullPointerException - if the specified object is null
              and the method is an instance method.
ExceptionInInitializerError - if the initialization
 provoked by this method fails.


"
Method,isBridge(),boolean,Returns true if this method is a bridge method; returns false otherwise.,"

isBridge
public boolean isBridge()
Returns true if this method is a bridge
 method; returns false otherwise.

Returns:
true if and only if this method is a bridge
 method as defined by the Java Language Specification.
Since:
1.5


"
Method,isDefault(),boolean,Returns true if this method is a default method; returns false otherwise.,"

isDefault
public boolean isDefault()
Returns true if this method is a default
 method; returns false otherwise.

 A default method is a public non-abstract instance method, that
 is, a non-static method with a body, declared in an interface
 type.

Returns:
true if and only if this method is a default
 method as defined by the Java Language Specification.
Since:
1.8


"
Method,isSynthetic(),boolean,Returns true if this executable is a synthetic construct; returns false otherwise.,"

isSynthetic
public boolean isSynthetic()
Returns true if this executable is a synthetic
 construct; returns false otherwise.

Specified by:
isSynthetic in interface Member
Overrides:
isSynthetic in class Executable
Returns:
true if and only if this executable is a synthetic
 construct as defined by
 The Java™ Language Specification.
Since:
1.5
See  The Java™ Language Specification:
13.1 The Form of a Binary


"
Method,isVarArgs(),boolean,Returns true if this executable was declared to take a variable number of arguments; returns false otherwise.,"

isVarArgs
public boolean isVarArgs()
Returns true if this executable was declared to take a
 variable number of arguments; returns false otherwise.

Overrides:
isVarArgs in class Executable
Returns:
true if an only if this executable was declared
 to take a variable number of arguments.
Since:
1.5


"
Method,toGenericString(),String,"Returns a string describing this Method, including type parameters.","

toGenericString
public String toGenericString()
Returns a string describing this Method, including
 type parameters.  The string is formatted as the method access
 modifiers, if any, followed by an angle-bracketed
 comma-separated list of the method's type parameters, if any,
 followed by the method's generic return type, followed by a
 space, followed by the class declaring the method, followed by
 a period, followed by the method name, followed by a
 parenthesized, comma-separated list of the method's generic
 formal parameter types.

 If this method was declared to take a variable number of
 arguments, instead of denoting the last parameter as
 ""Type[]"", it is denoted as
 ""Type..."".

 A space is used to separate access modifiers from one another
 and from the type parameters or return type.  If there are no
 type parameters, the type parameter list is elided; if the type
 parameter list is present, a space separates the list from the
 class name.  If the method is declared to throw exceptions, the
 parameter list is followed by a space, followed by the word
 throws followed by a comma-separated list of the generic thrown
 exception types.

 The access modifiers are placed in canonical order as
 specified by ""The Java Language Specification"".  This is
 public, protected or private first,
 and then other modifiers in the following order:
 abstract, default, static, final,
 synchronized, native, strictfp.

Specified by:
toGenericString in class Executable
Returns:
a string describing this Method,
 include type parameters
Since:
1.5
See  The Java™ Language Specification:
8.4.3 Method Modifiers


"
Method,toString(),String,Returns a string describing this Method.,"

toString
public String toString()
Returns a string describing this Method.  The string is
 formatted as the method access modifiers, if any, followed by
 the method return type, followed by a space, followed by the
 class declaring the method, followed by a period, followed by
 the method name, followed by a parenthesized, comma-separated
 list of the method's formal parameter types. If the method
 throws checked exceptions, the parameter list is followed by a
 space, followed by the word throws followed by a
 comma-separated list of the thrown exception types.
 For example:
 
    public boolean java.lang.Object.equals(java.lang.Object)
 
The access modifiers are placed in canonical order as
 specified by ""The Java Language Specification"".  This is
 public, protected or private first,
 and then other modifiers in the following order:
 abstract, default, static, final,
 synchronized, native, strictfp.

Overrides:
toString in class Object
Returns:
a string describing this Method
See  The Java™ Language Specification:
8.4.3 Method Modifiers


"
Modifier,classModifiers(),static int,Return an int value OR-ing together the source language modifiers that can be applied to a class.,"

classModifiers
public static int classModifiers()
Return an int value OR-ing together the source language
 modifiers that can be applied to a class.

Returns:
an int value OR-ing together the source language
 modifiers that can be applied to a class.
Since:
1.7
See  The Java™ Language Specification:
8.1.1 Class Modifiers


"
Modifier,constructorModifiers(),static int,Return an int value OR-ing together the source language modifiers that can be applied to a constructor.,"

constructorModifiers
public static int constructorModifiers()
Return an int value OR-ing together the source language
 modifiers that can be applied to a constructor.

Returns:
an int value OR-ing together the source language
 modifiers that can be applied to a constructor.
Since:
1.7
See  The Java™ Language Specification:
8.8.3 Constructor Modifiers


"
Modifier,fieldModifiers(),static int,Return an int value OR-ing together the source language modifiers that can be applied to a field.,"

fieldModifiers
public static int fieldModifiers()
Return an int value OR-ing together the source language
 modifiers that can be applied to a field.

Returns:
an int value OR-ing together the source language
 modifiers that can be applied to a field.
Since:
1.7
See  The Java™ Language Specification:
8.3.1 Field Modifiers


"
Modifier,interfaceModifiers(),static int,Return an int value OR-ing together the source language modifiers that can be applied to an interface.,"

interfaceModifiers
public static int interfaceModifiers()
Return an int value OR-ing together the source language
 modifiers that can be applied to an interface.

Returns:
an int value OR-ing together the source language
 modifiers that can be applied to an interface.
Since:
1.7
See  The Java™ Language Specification:
9.1.1 Interface Modifiers


"
Modifier,isAbstract(int mod),static boolean,"Return true if the integer argument includes the abstract modifier, false otherwise.","

isAbstract
public static boolean isAbstract(int mod)
Return true if the integer argument includes the
 abstract modifier, false otherwise.

Parameters:
mod - a set of modifiers
Returns:
true if mod includes the
 abstract modifier; false otherwise.


"
Modifier,isFinal(int mod),static boolean,"Return true if the integer argument includes the final modifier, false otherwise.","

isFinal
public static boolean isFinal(int mod)
Return true if the integer argument includes the
 final modifier, false otherwise.

Parameters:
mod - a set of modifiers
Returns:
true if mod includes the
 final modifier; false otherwise.


"
Modifier,isInterface(int mod),static boolean,"Return true if the integer argument includes the interface modifier, false otherwise.","

isInterface
public static boolean isInterface(int mod)
Return true if the integer argument includes the
 interface modifier, false otherwise.

Parameters:
mod - a set of modifiers
Returns:
true if mod includes the
 interface modifier; false otherwise.


"
Modifier,isNative(int mod),static boolean,"Return true if the integer argument includes the native modifier, false otherwise.","

isNative
public static boolean isNative(int mod)
Return true if the integer argument includes the
 native modifier, false otherwise.

Parameters:
mod - a set of modifiers
Returns:
true if mod includes the
 native modifier; false otherwise.


"
Modifier,isPrivate(int mod),static boolean,"Return true if the integer argument includes the private modifier, false otherwise.","

isPrivate
public static boolean isPrivate(int mod)
Return true if the integer argument includes the
 private modifier, false otherwise.

Parameters:
mod - a set of modifiers
Returns:
true if mod includes the
 private modifier; false otherwise.


"
Modifier,isProtected(int mod),static boolean,"Return true if the integer argument includes the protected modifier, false otherwise.","

isProtected
public static boolean isProtected(int mod)
Return true if the integer argument includes the
 protected modifier, false otherwise.

Parameters:
mod - a set of modifiers
Returns:
true if mod includes the
 protected modifier; false otherwise.


"
Modifier,isPublic(int mod),static boolean,"Return true if the integer argument includes the public modifier, false otherwise.","

isPublic
public static boolean isPublic(int mod)
Return true if the integer argument includes the
 public modifier, false otherwise.

Parameters:
mod - a set of modifiers
Returns:
true if mod includes the
 public modifier; false otherwise.


"
Modifier,isStatic(int mod),static boolean,"Return true if the integer argument includes the static modifier, false otherwise.","

isStatic
public static boolean isStatic(int mod)
Return true if the integer argument includes the
 static modifier, false otherwise.

Parameters:
mod - a set of modifiers
Returns:
true if mod includes the
 static modifier; false otherwise.


"
Modifier,isStrict(int mod),static boolean,"Return true if the integer argument includes the strictfp modifier, false otherwise.","

isStrict
public static boolean isStrict(int mod)
Return true if the integer argument includes the
 strictfp modifier, false otherwise.

Parameters:
mod - a set of modifiers
Returns:
true if mod includes the
 strictfp modifier; false otherwise.


"
Modifier,isSynchronized(int mod),static boolean,"Return true if the integer argument includes the synchronized modifier, false otherwise.","

isSynchronized
public static boolean isSynchronized(int mod)
Return true if the integer argument includes the
 synchronized modifier, false otherwise.

Parameters:
mod - a set of modifiers
Returns:
true if mod includes the
 synchronized modifier; false otherwise.


"
Modifier,isTransient(int mod),static boolean,"Return true if the integer argument includes the transient modifier, false otherwise.","

isTransient
public static boolean isTransient(int mod)
Return true if the integer argument includes the
 transient modifier, false otherwise.

Parameters:
mod - a set of modifiers
Returns:
true if mod includes the
 transient modifier; false otherwise.


"
Modifier,isVolatile(int mod),static boolean,"Return true if the integer argument includes the volatile modifier, false otherwise.","

isVolatile
public static boolean isVolatile(int mod)
Return true if the integer argument includes the
 volatile modifier, false otherwise.

Parameters:
mod - a set of modifiers
Returns:
true if mod includes the
 volatile modifier; false otherwise.


"
Modifier,methodModifiers(),static int,Return an int value OR-ing together the source language modifiers that can be applied to a method.,"

methodModifiers
public static int methodModifiers()
Return an int value OR-ing together the source language
 modifiers that can be applied to a method.

Returns:
an int value OR-ing together the source language
 modifiers that can be applied to a method.
Since:
1.7
See  The Java™ Language Specification:
8.4.3 Method Modifiers


"
Modifier,parameterModifiers(),static int,Return an int value OR-ing together the source language modifiers that can be applied to a parameter.,"

parameterModifiers
public static int parameterModifiers()
Return an int value OR-ing together the source language
 modifiers that can be applied to a parameter.

Returns:
an int value OR-ing together the source language
 modifiers that can be applied to a parameter.
Since:
1.8
See  The Java™ Language Specification:
8.4.1 Formal Parameters


"
Modifier,toString(int mod),static String,Return a string describing the access modifier flags in the specified modifier.,"

toString
public static String toString(int mod)
Return a string describing the access modifier flags in
 the specified modifier. For example:
 
    public final synchronized strictfp
 
 The modifier names are returned in an order consistent with the
 suggested modifier orderings given in sections 8.1.1, 8.3.1, 8.4.3, 8.8.3, and 9.1.1 of
 The Java™ Language Specification.
 The full modifier ordering used by this method is:
  public protected private abstract static final transient
 volatile synchronized native strictfp
 interface  
 The interface modifier discussed in this class is
 not a true modifier in the Java language and it appears after
 all other modifiers listed by this method.  This method may
 return a string of modifiers that are not valid modifiers of a
 Java entity; in other words, no checking is done on the
 possible validity of the combination of modifiers represented
 by the input.

 Note that to perform such checking for a known kind of entity,
 such as a constructor or method, first AND the argument of
 toString with the appropriate mask from a method like
 constructorModifiers() or methodModifiers().

Parameters:
mod - a set of modifiers
Returns:
a string representation of the set of modifiers
 represented by mod


"
Parameter,equals(Object obj),boolean,Compares based on the executable and the index.,"

equals
public boolean equals(Object obj)
Compares based on the executable and the index.

Overrides:
equals in class Object
Parameters:
obj - The object to compare.
Returns:
Whether or not this is equal to the argument.
See Also:
Object.hashCode(), 
HashMap


"
Parameter,getAnnotatedType(),AnnotatedType,Returns an AnnotatedType object that represents the use of a type to specify the type of the formal parameter represented by this Parameter.,"

getAnnotatedType
public AnnotatedType getAnnotatedType()
Returns an AnnotatedType object that represents the use of a type to
 specify the type of the formal parameter represented by this Parameter.

Returns:
an AnnotatedType object representing the use of a type
         to specify the type of the formal parameter represented by this
         Parameter


"
Parameter,getAnnotation(Class<T> annotationClass),<T extends Annotation> T,"Returns this element's annotation for the specified type if such an annotation is present, else null.","

getAnnotation
public <T extends Annotation> T getAnnotation(Class<T> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is present, else null.

Specified by:
getAnnotation in interface AnnotatedElement
Type Parameters:
T - the type of the annotation to query for and return if present
Parameters:
annotationClass - the Class object corresponding to the
        annotation type
Returns:
this element's annotation for the specified annotation type if
     present on this element, else null
Throws:
NullPointerException - if the given annotation class is null


"
Parameter,getAnnotations(),Annotation[],Returns annotations that are present on this element.,"

getAnnotations
public Annotation[] getAnnotations()
Returns annotations that are present on this element.

 If there are no annotations present on this element, the return
 value is an array of length 0.

 The caller of this method is free to modify the returned array; it will
 have no effect on the arrays returned to other callers.

Specified by:
getAnnotations in interface AnnotatedElement
Returns:
annotations present on this element


"
Parameter,getAnnotationsByType(Class<T> annotationClass),<T extends Annotation> T[],Returns annotations that are associated with this element.,"

getAnnotationsByType
public <T extends Annotation> T[] getAnnotationsByType(Class<T> annotationClass)
Returns annotations that are associated with this element.

 If there are no annotations associated with this element, the return
 value is an array of length 0.

 The difference between this method and AnnotatedElement.getAnnotation(Class)
 is that this method detects if its argument is a repeatable
 annotation type (JLS 9.6), and if so, attempts to find one or
 more annotations of that type by ""looking through"" a container
 annotation.

 The caller of this method is free to modify the returned array; it will
 have no effect on the arrays returned to other callers.

Specified by:
getAnnotationsByType in interface AnnotatedElement
Type Parameters:
T - the type of the annotation to query for and return if present
Parameters:
annotationClass - the Class object corresponding to the
        annotation type
Returns:
all this element's annotations for the specified annotation type if
     associated with this element, else an array of length zero
Throws:
NullPointerException - if the given annotation class is null


"
Parameter,getDeclaredAnnotation(Class<T> annotationClass),<T extends Annotation> T,"Returns this element's annotation for the specified type if such an annotation is directly present, else null.","

getDeclaredAnnotation
public <T extends Annotation> T getDeclaredAnnotation(Class<T> annotationClass)
Description copied from interface: AnnotatedElement
Returns this element's annotation for the specified type if
 such an annotation is directly present, else null.

 This method ignores inherited annotations. (Returns null if no
 annotations are directly present on this element.)

Specified by:
getDeclaredAnnotation in interface AnnotatedElement
Type Parameters:
T - the type of the annotation to query for and return if directly present
Parameters:
annotationClass - the Class object corresponding to the
        annotation type
Returns:
this element's annotation for the specified annotation type if
     directly present on this element, else null
Throws:
NullPointerException - if the given annotation class is null


"
Parameter,getDeclaredAnnotations(),Annotation[],Returns annotations that are directly present on this element.,"

getDeclaredAnnotations
public Annotation[] getDeclaredAnnotations()
Returns annotations that are directly present on this element.
 This method ignores inherited annotations.

 If there are no annotations directly present on this element,
 the return value is an array of length 0.

 The caller of this method is free to modify the returned array; it will
 have no effect on the arrays returned to other callers.

Specified by:
getDeclaredAnnotations in interface AnnotatedElement
Returns:
annotations directly present on this element


"
Parameter,getDeclaredAnnotationsByType(Class<T> annotationClass),<T extends Annotation> T[],Returns this element's annotation(s) for the specified type if such annotations are either directly present or indirectly present.,"

getDeclaredAnnotationsByType
public <T extends Annotation> T[] getDeclaredAnnotationsByType(Class<T> annotationClass)
Description copied from interface: AnnotatedElement
Returns this element's annotation(s) for the specified type if
 such annotations are either directly present or
 indirectly present. This method ignores inherited
 annotations.

 If there are no specified annotations directly or indirectly
 present on this element, the return value is an array of length
 0.

 The difference between this method and AnnotatedElement.getDeclaredAnnotation(Class) is that this method detects if its
 argument is a repeatable annotation type (JLS 9.6), and if so,
 attempts to find one or more annotations of that type by ""looking
 through"" a container annotation if one is present.

 The caller of this method is free to modify the returned array; it will
 have no effect on the arrays returned to other callers.

Specified by:
getDeclaredAnnotationsByType in interface AnnotatedElement
Type Parameters:
T - the type of the annotation to query for and return
 if directly or indirectly present
Parameters:
annotationClass - the Class object corresponding to the
        annotation type
Returns:
all this element's annotations for the specified annotation type if
     directly or indirectly present on this element, else an array of length zero
Throws:
NullPointerException - if the given annotation class is null


"
Parameter,getDeclaringExecutable(),Executable,Return the Executable which declares this parameter.,"

getDeclaringExecutable
public Executable getDeclaringExecutable()
Return the Executable which declares this parameter.

Returns:
The Executable declaring this parameter.


"
Parameter,getModifiers(),int,Get the modifier flags for this the parameter represented by this Parameter object.,"

getModifiers
public int getModifiers()
Get the modifier flags for this the parameter represented by
 this Parameter object.

Returns:
The modifier flags for this parameter.


"
Parameter,getName(),String,Returns the name of the parameter.,"

getName
public String getName()
Returns the name of the parameter.  If the parameter's name is
 present, then this method returns
 the name provided by the class file. Otherwise, this method
 synthesizes a name of the form argN, where N is the index of
 the parameter in the descriptor of the method which declares
 the parameter.

Returns:
The name of the parameter, either provided by the class
         file or synthesized if the class file does not provide
         a name.


"
Parameter,getParameterizedType(),Type,Returns a Type object that identifies the parameterized type for the parameter represented by this Parameter object.,"

getParameterizedType
public Type getParameterizedType()
Returns a Type object that identifies the parameterized
 type for the parameter represented by this Parameter
 object.

Returns:
a Type object identifying the parameterized
 type of the parameter represented by this object


"
Parameter,getType(),Class<?>,Returns a Class object that identifies the declared type for the parameter represented by this Parameter object.,"

getType
public Class<?> getType()
Returns a Class object that identifies the
 declared type for the parameter represented by this
 Parameter object.

Returns:
a Class object identifying the declared
 type of the parameter represented by this object


"
Parameter,hashCode(),int,Returns a hash code based on the executable's hash code and the index.,"

hashCode
public int hashCode()
Returns a hash code based on the executable's hash code and the
 index.

Overrides:
hashCode in class Object
Returns:
A hash code based on the executable's hash code.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Parameter,isImplicit(),boolean,Returns true if this parameter is implicitly declared in source code; returns false otherwise.,"

isImplicit
public boolean isImplicit()
Returns true if this parameter is implicitly declared
 in source code; returns false otherwise.

Returns:
true if and only if this parameter is implicitly
 declared as defined by The Java™ Language
 Specification.


"
Parameter,isNamePresent(),boolean,Returns true if the parameter has a name according to the class file; returns false otherwise.,"

isNamePresent
public boolean isNamePresent()
Returns true if the parameter has a name according to the class
 file; returns false otherwise. Whether a parameter has a name
 is determined by the MethodParameters attribute of
 the method which declares the parameter.

Returns:
true if and only if the parameter has a name according
 to the class file.


"
Parameter,isSynthetic(),boolean,Returns true if this parameter is neither implicitly nor explicitly declared in source code; returns false otherwise.,"

isSynthetic
public boolean isSynthetic()
Returns true if this parameter is neither implicitly
 nor explicitly declared in source code; returns false
 otherwise.

Returns:
true if and only if this parameter is a synthetic
 construct as defined by
 The Java™ Language Specification.
See  The Java™ Language Specification:
13.1 The Form of a Binary


"
Parameter,isVarArgs(),boolean,Returns true if this parameter represents a variable argument list; returns false otherwise.,"

isVarArgs
public boolean isVarArgs()
Returns true if this parameter represents a variable
 argument list; returns false otherwise.

Returns:
true if an only if this parameter represents a
 variable argument list.


"
Parameter,toString(),String,Returns a string describing this parameter.,"

toString
public String toString()
Returns a string describing this parameter.  The format is the
 modifiers for the parameter, if any, in canonical order as
 recommended by The Java™ Language
 Specification, followed by the fully- qualified type of
 the parameter (excluding the last [] if the parameter is
 variable arity), followed by ""..."" if the parameter is variable
 arity, followed by a space, followed by the name of the
 parameter.

Overrides:
toString in class Object
Returns:
A string representation of the parameter and associated
 information.


"
Proxy,getInvocationHandler(Object proxy),static InvocationHandler,Returns the invocation handler for the specified proxy instance.,"

getInvocationHandler
public static InvocationHandler getInvocationHandler(Object proxy)
                                              throws IllegalArgumentException
Returns the invocation handler for the specified proxy instance.

Parameters:
proxy - the proxy instance to return the invocation handler for
Returns:
the invocation handler for the proxy instance
Throws:
IllegalArgumentException - if the argument is not a
          proxy instance
SecurityException - if a security manager, s, is present
          and the caller's class loader is not the same as or an
          ancestor of the class loader for the invocation handler
          and invocation of s.checkPackageAccess() denies access to the invocation
          handler's class.


"
Proxy,"getProxyClass(ClassLoader loader, Class<?>... interfaces)",static Class<?>,Returns the java.lang.Class object for a proxy class given a class loader and an array of interfaces.,"

getProxyClass
public static Class<?> getProxyClass(ClassLoader loader,
                                     Class<?>... interfaces)
                              throws IllegalArgumentException
Returns the java.lang.Class object for a proxy class
 given a class loader and an array of interfaces.  The proxy class
 will be defined by the specified class loader and will implement
 all of the supplied interfaces.  If any of the given interfaces
 is non-public, the proxy class will be non-public. If a proxy class
 for the same permutation of interfaces has already been defined by the
 class loader, then the existing proxy class will be returned; otherwise,
 a proxy class for those interfaces will be generated dynamically
 and defined by the class loader.

 There are several restrictions on the parameters that may be
 passed to Proxy.getProxyClass:

 
All of the Class objects in the
 interfaces array must represent interfaces, not
 classes or primitive types.

 No two elements in the interfaces array may
 refer to identical Class objects.

 All of the interface types must be visible by name through the
 specified class loader.  In other words, for class loader
 cl and every interface i, the following
 expression must be true:
 
     Class.forName(i.getName(), false, cl) == i
 
All non-public interfaces must be in the same package;
 otherwise, it would not be possible for the proxy class to
 implement all of the interfaces, regardless of what package it is
 defined in.

 For any set of member methods of the specified interfaces
 that have the same signature:
 
If the return type of any of the methods is a primitive
 type or void, then all of the methods must have that same
 return type.
 Otherwise, one of the methods must have a return type that
 is assignable to all of the return types of the rest of the
 methods.
 
The resulting proxy class must not exceed any limits imposed
 on classes by the virtual machine.  For example, the VM may limit
 the number of interfaces that a class may implement to 65535; in
 that case, the size of the interfaces array must not
 exceed 65535.
 
If any of these restrictions are violated,
 Proxy.getProxyClass will throw an
 IllegalArgumentException.  If the interfaces
 array argument or any of its elements are null, a
 NullPointerException will be thrown.

 Note that the order of the specified proxy interfaces is
 significant: two requests for a proxy class with the same combination
 of interfaces but in a different order will result in two distinct
 proxy classes.

Parameters:
loader - the class loader to define the proxy class
interfaces - the list of interfaces for the proxy class
          to implement
Returns:
a proxy class that is defined in the specified class loader
          and that implements the specified interfaces
Throws:
IllegalArgumentException - if any of the restrictions on the
          parameters that may be passed to getProxyClass
          are violated
SecurityException - if a security manager, s, is present
          and any of the following conditions is met:
          
 the given loader is null and
             the caller's class loader is not null and the
             invocation of s.checkPermission with
             RuntimePermission(""getClassLoader"") permission
             denies access.
 for each proxy interface, intf,
             the caller's class loader is not the same as or an
             ancestor of the class loader for intf and
             invocation of s.checkPackageAccess() denies access to intf.

NullPointerException - if the interfaces array
          argument or any of its elements are null


"
Proxy,isProxyClass(Class<?> cl),static boolean,Returns true if and only if the specified class was dynamically generated to be a proxy class using the getProxyClass method or the newProxyInstance method.,"

isProxyClass
public static boolean isProxyClass(Class<?> cl)
Returns true if and only if the specified class was dynamically
 generated to be a proxy class using the getProxyClass
 method or the newProxyInstance method.

 The reliability of this method is important for the ability
 to use it to make security decisions, so its implementation should
 not just test if the class in question extends Proxy.

Parameters:
cl - the class to test
Returns:
true if the class is a proxy class and
          false otherwise
Throws:
NullPointerException - if cl is null


"
Proxy,"newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h)",static Object,Returns an instance of a proxy class for the specified interfaces that dispatches method invocations to the specified invocation handler.,"

newProxyInstance
public static Object newProxyInstance(ClassLoader loader,
                                      Class<?>[] interfaces,
                                      InvocationHandler h)
                               throws IllegalArgumentException
Returns an instance of a proxy class for the specified interfaces
 that dispatches method invocations to the specified invocation
 handler.

 Proxy.newProxyInstance throws
 IllegalArgumentException for the same reasons that
 Proxy.getProxyClass does.

Parameters:
loader - the class loader to define the proxy class
interfaces - the list of interfaces for the proxy class
          to implement
h - the invocation handler to dispatch method invocations to
Returns:
a proxy instance with the specified invocation handler of a
          proxy class that is defined by the specified class loader
          and that implements the specified interfaces
Throws:
IllegalArgumentException - if any of the restrictions on the
          parameters that may be passed to getProxyClass
          are violated
SecurityException - if a security manager, s, is present
          and any of the following conditions is met:
          
 the given loader is null and
               the caller's class loader is not null and the
               invocation of s.checkPermission with
               RuntimePermission(""getClassLoader"") permission
               denies access;
 for each proxy interface, intf,
               the caller's class loader is not the same as or an
               ancestor of the class loader for intf and
               invocation of s.checkPackageAccess() denies access to intf;
 any of the given proxy interfaces is non-public and the
               caller class is not in the same runtime package
               as the non-public interface and the invocation of
               s.checkPermission with
               ReflectPermission(""newProxyInPackage.{package name}"")
               permission denies access.

NullPointerException - if the interfaces array
          argument or any of its elements are null, or
          if the invocation handler, h, is
          null


"
