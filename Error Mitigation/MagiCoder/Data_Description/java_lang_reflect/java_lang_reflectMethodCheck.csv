Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,AccessibleObject,1,boolean isAccessible(),True,Get the value of the accessible flag for this object.,"

isAccessible
public boolean isAccessible()
Get the value of the accessible flag for this object.

Returns:
the value of the object's accessible flag


"
0,AccessibleObject,2,void setAccessible(boolean flag),True,Set the accessible flag for this object to the indicated boolean value.,"

setAccessible
public void setAccessible(boolean flag)
                   throws SecurityException
Set the accessible flag for this object to
 the indicated boolean value.  A value of true indicates that
 the reflected object should suppress Java language access
 checking when it is used.  A value of false indicates
 that the reflected object should enforce Java language access checks.

 First, if there is a security manager, its
 checkPermission method is called with a
 ReflectPermission(""suppressAccessChecks"") permission.

 A SecurityException is raised if flag is
 true but accessibility of this object may not be changed
 (for example, if this element object is a Constructor object for
 the class Class).

 A SecurityException is raised if this object is a Constructor object for the class
 java.lang.Class, and flag is true.

Parameters:
flag - the new value for the accessible flag
Throws:
SecurityException - if the request is denied.
See Also:
SecurityManager.checkPermission(java.security.Permission), 
RuntimePermission


"
0,AccessibleObject,3,"void setAccessible(AccessibleObject[] accessibleObjects, boolean flag)",True,Convenience method to set the accessible flag for an array of objects with a single security check (for efficiency).,"

setAccessible
public static void setAccessible(AccessibleObject[] array,
                                 boolean flag)
                          throws SecurityException
Convenience method to set the accessible flag for an
 array of objects with a single security check (for efficiency).

 First, if there is a security manager, its
 checkPermission method is called with a
 ReflectPermission(""suppressAccessChecks"") permission.

 A SecurityException is raised if flag is
 true but accessibility of any of the elements of the input
 array may not be changed (for example, if the element
 object is a Constructor object for the class Class).  In the event of such a SecurityException, the
 accessibility of objects is set to flag for array elements
 upto (and excluding) the element for which the exception occurred; the
 accessibility of elements beyond (and including) the element for which
 the exception occurred is unchanged.

Parameters:
array - the array of AccessibleObjects
flag - the new value for the accessible flag
              in each object
Throws:
SecurityException - if the request is denied.
See Also:
SecurityManager.checkPermission(java.security.Permission), 
RuntimePermission


"
0,AccessibleObject,4,"void setAccessible(AccessibleObject[] accessibleObjects, boolean flag, boolean flag1)",False,,NULL
0,AccessibleObject,5,"void setAccessible(AccessibleObject[] accessibleObjects, boolean flag, boolean flag1, boolean flag2)",False,,NULL
1,Array,1,"Object newInstance(Class<?> componentType, int length)",True,Creates a new array with the specified component type and length.,"

newInstance
public static Object newInstance(Class<?> componentType,
                                 int length)
                          throws NegativeArraySizeException
Creates a new array with the specified component type and
 length.
 Invoking this method is equivalent to creating an array
 as follows:
 

 int[] x = {length};
 Array.newInstance(componentType, x);
 

The number of dimensions of the new array must not
 exceed 255.

Parameters:
componentType - the Class object representing the
 component type of the new array
length - the length of the new array
Returns:
the new array
Throws:
NullPointerException - if the specified
 componentType parameter is null
IllegalArgumentException - if componentType is Void.TYPE or if the number of dimensions of the requested array
 instance exceed 255.
NegativeArraySizeException - if the specified length
 is negative


"
1,Array,2,int getLength(Object array),True,"Returns the length of the specified array object, as an int.","

getLength
public static int getLength(Object array)
                     throws IllegalArgumentException
Returns the length of the specified array object, as an int.

Parameters:
array - the array
Returns:
the length of the array
Throws:
IllegalArgumentException - if the object argument is not
 an array


"
1,Array,3,"Object get(Object array, int index)",True,Returns the value of the indexed component in the specified array object.,"

get
public static Object get(Object array,
                         int index)
                  throws IllegalArgumentException,
                         ArrayIndexOutOfBoundsException
Returns the value of the indexed component in the specified
 array object.  The value is automatically wrapped in an object
 if it has a primitive type.

Parameters:
array - the array
index - the index
Returns:
the (possibly wrapped) value of the indexed component in
 the specified array
Throws:
NullPointerException - If the specified object is null
IllegalArgumentException - If the specified object is not
 an array
ArrayIndexOutOfBoundsException - If the specified index
 argument is negative, or if it is greater than or equal to the
 length of the specified array


"
1,Array,4,"void set(Object array, int index, Object element)",True,Sets the value of the indexed component of the specified array object to the specified new value.,"

set
public static void set(Object array,
                       int index,
                       Object value)
                throws IllegalArgumentException,
                       ArrayIndexOutOfBoundsException
Sets the value of the indexed component of the specified array
 object to the specified new value.  The new value is first
 automatically unwrapped if the array has a primitive component
 type.

Parameters:
array - the array
index - the index into the array
value - the new value of the indexed component
Throws:
NullPointerException - If the specified object argument
 is null
IllegalArgumentException - If the specified object argument
 is not an array, or if the array component type is primitive and
 an unwrapping conversion fails
ArrayIndexOutOfBoundsException - If the specified index
 argument is negative, or if it is greater than or equal to
 the length of the specified array


"
1,Array,5,"void set(Object array, int index, Object element)",True,Sets the value of the indexed component of the specified array object to the specified new value.,"

set
public static void set(Object array,
                       int index,
                       Object value)
                throws IllegalArgumentException,
                       ArrayIndexOutOfBoundsException
Sets the value of the indexed component of the specified array
 object to the specified new value.  The new value is first
 automatically unwrapped if the array has a primitive component
 type.

Parameters:
array - the array
index - the index into the array
value - the new value of the indexed component
Throws:
NullPointerException - If the specified object argument
 is null
IllegalArgumentException - If the specified object argument
 is not an array, or if the array component type is primitive and
 an unwrapping conversion fails
ArrayIndexOutOfBoundsException - If the specified index
 argument is negative, or if it is greater than or equal to
 the length of the specified array


"
2,Constructor,1,Constructor<T> getDeclaredConstructor(Class<?>... parameterTypes),False,,NULL
2,Constructor,2,T newInstance(Object... initargs),True,"Uses the constructor represented by this Constructor object to create and initialize a new instance of the constructor's declaring class, with the specified initialization parameters.","

newInstance
public T newInstance(Object... initargs)
              throws InstantiationException,
                     IllegalAccessException,
                     IllegalArgumentException,
                     InvocationTargetException
Uses the constructor represented by this Constructor object to
 create and initialize a new instance of the constructor's
 declaring class, with the specified initialization parameters.
 Individual parameters are automatically unwrapped to match
 primitive formal parameters, and both primitive and reference
 parameters are subject to method invocation conversions as necessary.

 If the number of formal parameters required by the underlying constructor
 is 0, the supplied initargs array may be of length 0 or null.

 If the constructor's declaring class is an inner class in a
 non-static context, the first argument to the constructor needs
 to be the enclosing instance; see section 15.9.3 of
 The Javaâ„¢ Language Specification.

 If the required access and argument checks succeed and the
 instantiation will proceed, the constructor's declaring class
 is initialized if it has not already been initialized.

 If the constructor completes normally, returns the newly
 created and initialized instance.

Parameters:
initargs - array of objects to be passed as arguments to
 the constructor call; values of primitive types are wrapped in
 a wrapper object of the appropriate type (e.g. a float
 in a Float)
Returns:
a new object created by calling the constructor
 this object represents
Throws:
IllegalAccessException - if this Constructor object
              is enforcing Java language access control and the underlying
              constructor is inaccessible.
IllegalArgumentException - if the number of actual
              and formal parameters differ; if an unwrapping
              conversion for primitive arguments fails; or if,
              after possible unwrapping, a parameter value
              cannot be converted to the corresponding formal
              parameter type by a method invocation conversion; if
              this constructor pertains to an enum type.
InstantiationException - if the class that declares the
              underlying constructor represents an abstract class.
InvocationTargetException - if the underlying constructor
              throws an exception.
ExceptionInInitializerError - if the initialization provoked
              by this method fails.


"
2,Constructor,3,void setAccessible(boolean flag),False,,NULL
2,Constructor,4,Class<?> getDeclaringClass(),False,,NULL
2,Constructor,5,Parameter[] getParameters(),False,,NULL
3,Executable,1,boolean isVarArgs(),True,Returns true if this executable was declared to take a variable number of arguments; returns false otherwise.,"

isVarArgs
public boolean isVarArgs()
Returns true if this executable was declared to take a
 variable number of arguments; returns false otherwise.

Returns:
true if an only if this executable was declared
 to take a variable number of arguments.


"
3,Executable,2,Class<?> getDeclaringClass(),True,Returns the Class object representing the class or interface that declares the executable represented by this object.,"

getDeclaringClass
public abstract Class<?> getDeclaringClass()
Returns the Class object representing the class or interface
 that declares the executable represented by this object.

Specified by:
getDeclaringClass in interface Member
Returns:
an object representing the declaring class of the
 underlying member


"
3,Executable,3,String getName(),True,Returns the name of the executable represented by this object.,"

getName
public abstract String getName()
Returns the name of the executable represented by this object.

Specified by:
getName in interface Member
Returns:
the simple name of the underlying member


"
3,Executable,4,int getModifiers(),True,Returns the Java language modifiers for the executable represented by this object.,"

getModifiers
public abstract int getModifiers()
Returns the Java language modifiers for
 the executable represented by this object.

Specified by:
getModifiers in interface Member
Returns:
the Java language modifiers for the underlying member
See Also:
Modifier


"
3,Executable,5,Class<?>[] getParameterTypes(),True,"Returns an array of Class objects that represent the formal parameter types, in declaration order, of the executable represented by this object.","

getParameterTypes
public abstract Class<?>[] getParameterTypes()
Returns an array of Class objects that represent the formal
 parameter types, in declaration order, of the executable
 represented by this object.  Returns an array of length
 0 if the underlying executable takes no parameters.

Returns:
the parameter types for the executable this object
 represents


"
3,Executable,6,TypeVariable<D>[] getTypeParameters(),False,,NULL
3,Executable,7,Class<?> getReturnType(),False,,NULL
3,Executable,8,AnnotatedType getAnnotatedReturnType(),True,Returns an AnnotatedType object that represents the use of a type to specify the return type of the method/constructor represented by this Executable.,"

getAnnotatedReturnType
public abstract AnnotatedType getAnnotatedReturnType()
Returns an AnnotatedType object that represents the use of a type to
 specify the return type of the method/constructor represented by this
 Executable.

 If this Executable object represents a constructor, the AnnotatedType object represents the type of the constructed object.

 If this Executable object represents a method, the AnnotatedType object represents the use of a type to specify the return
 type of the method.

Returns:
an object representing the return type of the method
 or constructor represented by this Executable


"
3,Executable,9,Type getGenericReturnType(),False,,NULL
3,Executable,10,Type[] getGenericExceptionTypes(),True,Returns an array of Type objects that represent the exceptions declared to be thrown by this executable object.,"

getGenericExceptionTypes
public Type[] getGenericExceptionTypes()
Returns an array of Type objects that represent the
 exceptions declared to be thrown by this executable object.
 Returns an array of length 0 if the underlying executable declares
 no exceptions in its throws clause.

 If an exception type is a type variable or a parameterized
 type, it is created. Otherwise, it is resolved.

Returns:
an array of Types that represent the exception types
     thrown by the underlying executable
Throws:
GenericSignatureFormatError - if the generic method signature does not conform to the format
     specified in
     The Javaâ„¢ Virtual Machine Specification
TypeNotPresentException - if the underlying executable's
     throws clause refers to a non-existent type declaration
MalformedParameterizedTypeException - if
     the underlying executable's throws clause refers to a
     parameterized type that cannot be instantiated for any reason


"
3,Executable,11,Type[] getThrownTypes(),False,,NULL
3,Executable,12,Annotation[] getDeclaredAnnotations(),True,Returns annotations that are directly present on this element.,"

getDeclaredAnnotations
public Annotation[] getDeclaredAnnotations()
Returns annotations that are directly present on this element.
 This method ignores inherited annotations.

 If there are no annotations directly present on this element,
 the return value is an array of length 0.

 The caller of this method is free to modify the returned array; it will
 have no effect on the arrays returned to other callers.

Specified by:
getDeclaredAnnotations in interface AnnotatedElement
Overrides:
getDeclaredAnnotations in class AccessibleObject
Returns:
annotations directly present on this element


"
3,Executable,13,Annotation[] getAnnotations(),False,,NULL
3,Executable,14,Annotation[] getDeclaredAnnotationsByType(Class<? extends Annotation> annotationClass),False,,NULL
3,Executable,15,Annotation[] getAnnotationsByType(Class<? extends Annotation> annotationClass),False,,NULL
4,Field,1,get(Object obj),False,,NULL
4,Field,2,"set(Object obj, Object value)",False,,NULL
4,Field,3,getType(),False,,NULL
4,Field,4,getModifiers(),False,,NULL
4,Field,5,getDeclaringClass(),False,,NULL
5,Method,1,"Object invoke(Object obj, Object... args)",True,"Invokes the underlying method represented by this Method object, on the specified object with the specified parameters.","

invoke
public Object invoke(Object obj,
                     Object... args)
              throws IllegalAccessException,
                     IllegalArgumentException,
                     InvocationTargetException
Invokes the underlying method represented by this Method
 object, on the specified object with the specified parameters.
 Individual parameters are automatically unwrapped to match
 primitive formal parameters, and both primitive and reference
 parameters are subject to method invocation conversions as
 necessary.

 If the underlying method is static, then the specified obj
 argument is ignored. It may be null.

 If the number of formal parameters required by the underlying method is
 0, the supplied args array may be of length 0 or null.

 If the underlying method is an instance method, it is invoked
 using dynamic method lookup as documented in The Java Language
 Specification, Second Edition, section 15.12.4.4; in particular,
 overriding based on the runtime type of the target object will occur.

 If the underlying method is static, the class that declared
 the method is initialized if it has not already been initialized.

 If the method completes normally, the value it returns is
 returned to the caller of invoke; if the value has a primitive
 type, it is first appropriately wrapped in an object. However,
 if the value has the type of an array of a primitive type, the
 elements of the array are not wrapped in objects; in
 other words, an array of primitive type is returned.  If the
 underlying method return type is void, the invocation returns
 null.

Parameters:
obj - the object the underlying method is invoked from
args - the arguments used for the method call
Returns:
the result of dispatching the method represented by
 this object on obj with parameters
 args
Throws:
IllegalAccessException - if this Method object
              is enforcing Java language access control and the underlying
              method is inaccessible.
IllegalArgumentException - if the method is an
              instance method and the specified object argument
              is not an instance of the class or interface
              declaring the underlying method (or of a subclass
              or implementor thereof); if the number of actual
              and formal parameters differ; if an unwrapping
              conversion for primitive arguments fails; or if,
              after possible unwrapping, a parameter value
              cannot be converted to the corresponding formal
              parameter type by a method invocation conversion.
InvocationTargetException - if the underlying method
              throws an exception.
NullPointerException - if the specified object is null
              and the method is an instance method.
ExceptionInInitializerError - if the initialization
 provoked by this method fails.


"
5,Method,2,Class<?> getReturnType(),True,Returns a Class object that represents the formal return type of the method represented by this Method object.,"

getReturnType
public Class<?> getReturnType()
Returns a Class object that represents the formal return type
 of the method represented by this Method object.

Returns:
the return type for the method this object represents


"
5,Method,3,Class<?> getDeclaringClass(),True,Returns the Class object representing the class or interface that declares the executable represented by this object.,"

getDeclaringClass
public Class<?> getDeclaringClass()
Returns the Class object representing the class or interface
 that declares the executable represented by this object.

Specified by:
getDeclaringClass in interface Member
Specified by:
getDeclaringClass in class Executable
Returns:
an object representing the declaring class of the
 underlying member


"
5,Method,4,String getName(),True,"Returns the name of the method represented by this Method object, as a String.","

getName
public String getName()
Returns the name of the method represented by this Method
 object, as a String.

Specified by:
getName in interface Member
Specified by:
getName in class Executable
Returns:
the simple name of the underlying member


"
5,Method,5,Class<?>[] getParameterTypes(),True,"Returns an array of Class objects that represent the formal parameter types, in declaration order, of the executable represented by this object.","

getParameterTypes
public Class<?>[] getParameterTypes()
Returns an array of Class objects that represent the formal
 parameter types, in declaration order, of the executable
 represented by this object.  Returns an array of length
 0 if the underlying executable takes no parameters.

Specified by:
getParameterTypes in class Executable
Returns:
the parameter types for the executable this object
 represents


"
6,Modifier,1,int toString(int mod),False,,NULL
6,Modifier,2,boolean isPublic(int mod),True,"Return true if the integer argument includes the public modifier, false otherwise.","

isPublic
public static boolean isPublic(int mod)
Return true if the integer argument includes the
 public modifier, false otherwise.

Parameters:
mod - a set of modifiers
Returns:
true if mod includes the
 public modifier; false otherwise.


"
6,Modifier,3,boolean isProtected(int mod),True,"Return true if the integer argument includes the protected modifier, false otherwise.","

isProtected
public static boolean isProtected(int mod)
Return true if the integer argument includes the
 protected modifier, false otherwise.

Parameters:
mod - a set of modifiers
Returns:
true if mod includes the
 protected modifier; false otherwise.


"
6,Modifier,4,boolean isPrivate(int mod),True,"Return true if the integer argument includes the private modifier, false otherwise.","

isPrivate
public static boolean isPrivate(int mod)
Return true if the integer argument includes the
 private modifier, false otherwise.

Parameters:
mod - a set of modifiers
Returns:
true if mod includes the
 private modifier; false otherwise.


"
6,Modifier,5,boolean isAbstract(int mod),True,"Return true if the integer argument includes the abstract modifier, false otherwise.","

isAbstract
public static boolean isAbstract(int mod)
Return true if the integer argument includes the
 abstract modifier, false otherwise.

Parameters:
mod - a set of modifiers
Returns:
true if mod includes the
 abstract modifier; false otherwise.


"
6,Modifier,6,boolean isStatic(int mod),True,"Return true if the integer argument includes the static modifier, false otherwise.","

isStatic
public static boolean isStatic(int mod)
Return true if the integer argument includes the
 static modifier, false otherwise.

Parameters:
mod - a set of modifiers
Returns:
true if mod includes the
 static modifier; false otherwise.


"
6,Modifier,7,boolean isFinal(int mod),True,"Return true if the integer argument includes the final modifier, false otherwise.","

isFinal
public static boolean isFinal(int mod)
Return true if the integer argument includes the
 final modifier, false otherwise.

Parameters:
mod - a set of modifiers
Returns:
true if mod includes the
 final modifier; false otherwise.


"
6,Modifier,8,boolean isSynchronized(int mod),True,"Return true if the integer argument includes the synchronized modifier, false otherwise.","

isSynchronized
public static boolean isSynchronized(int mod)
Return true if the integer argument includes the
 synchronized modifier, false otherwise.

Parameters:
mod - a set of modifiers
Returns:
true if mod includes the
 synchronized modifier; false otherwise.


"
6,Modifier,9,boolean isVolatile(int mod),True,"Return true if the integer argument includes the volatile modifier, false otherwise.","

isVolatile
public static boolean isVolatile(int mod)
Return true if the integer argument includes the
 volatile modifier, false otherwise.

Parameters:
mod - a set of modifiers
Returns:
true if mod includes the
 volatile modifier; false otherwise.


"
6,Modifier,10,boolean isTransient(int mod),True,"Return true if the integer argument includes the transient modifier, false otherwise.","

isTransient
public static boolean isTransient(int mod)
Return true if the integer argument includes the
 transient modifier, false otherwise.

Parameters:
mod - a set of modifiers
Returns:
true if mod includes the
 transient modifier; false otherwise.


"
6,Modifier,11,boolean isNative(int mod),True,"Return true if the integer argument includes the native modifier, false otherwise.","

isNative
public static boolean isNative(int mod)
Return true if the integer argument includes the
 native modifier, false otherwise.

Parameters:
mod - a set of modifiers
Returns:
true if mod includes the
 native modifier; false otherwise.


"
6,Modifier,12,boolean isInterface(int mod),True,"Return true if the integer argument includes the interface modifier, false otherwise.","

isInterface
public static boolean isInterface(int mod)
Return true if the integer argument includes the
 interface modifier, false otherwise.

Parameters:
mod - a set of modifiers
Returns:
true if mod includes the
 interface modifier; false otherwise.


"
6,Modifier,13,boolean isStrict(int mod),True,"Return true if the integer argument includes the strictfp modifier, false otherwise.","

isStrict
public static boolean isStrict(int mod)
Return true if the integer argument includes the
 strictfp modifier, false otherwise.

Parameters:
mod - a set of modifiers
Returns:
true if mod includes the
 strictfp modifier; false otherwise.


"
6,Modifier,14,boolean isBridge(int mod),False,,NULL
6,Modifier,15,boolean isSynthetic(int mod),False,,NULL
6,Modifier,16,boolean isAnnotation(int mod),False,,NULL
6,Modifier,17,boolean isEnum(int mod),False,,NULL
7,Parameter,1,boolean isAnnotationPresent(Class<? extends Annotation> annotationClass),False,,NULL
7,Parameter,2,Annotation[] getAnnotations(),True,Returns annotations that are present on this element.,"

getAnnotations
public Annotation[] getAnnotations()
Returns annotations that are present on this element.

 If there are no annotations present on this element, the return
 value is an array of length 0.

 The caller of this method is free to modify the returned array; it will
 have no effect on the arrays returned to other callers.

Specified by:
getAnnotations in interface AnnotatedElement
Returns:
annotations present on this element


"
7,Parameter,3,Annotation getAnnotation(Class<? extends Annotation> annotationClass),False,,NULL
7,Parameter,4,String getName(),True,Returns the name of the parameter.,"

getName
public String getName()
Returns the name of the parameter.  If the parameter's name is
 present, then this method returns
 the name provided by the class file. Otherwise, this method
 synthesizes a name of the form argN, where N is the index of
 the parameter in the descriptor of the method which declares
 the parameter.

Returns:
The name of the parameter, either provided by the class
         file or synthesized if the class file does not provide
         a name.


"
7,Parameter,5,int getModifiers(),True,Get the modifier flags for this the parameter represented by this Parameter object.,"

getModifiers
public int getModifiers()
Get the modifier flags for this the parameter represented by
 this Parameter object.

Returns:
The modifier flags for this parameter.


"
7,Parameter,6,Class<?> getType(),True,Returns a Class object that identifies the declared type for the parameter represented by this Parameter object.,"

getType
public Class<?> getType()
Returns a Class object that identifies the
 declared type for the parameter represented by this
 Parameter object.

Returns:
a Class object identifying the declared
 type of the parameter represented by this object


"
7,Parameter,7,boolean isSynthetic(),True,Returns true if this parameter is neither implicitly nor explicitly declared in source code; returns false otherwise.,"

isSynthetic
public boolean isSynthetic()
Returns true if this parameter is neither implicitly
 nor explicitly declared in source code; returns false
 otherwise.

Returns:
true if and only if this parameter is a synthetic
 construct as defined by
 The Javaâ„¢ Language Specification.
See  The Javaâ„¢ Language Specification:
13.1 The Form of a Binary


"
7,Parameter,8,boolean isVarArgs(),True,Returns true if this parameter represents a variable argument list; returns false otherwise.,"

isVarArgs
public boolean isVarArgs()
Returns true if this parameter represents a variable
 argument list; returns false otherwise.

Returns:
true if an only if this parameter represents a
 variable argument list.


"
7,Parameter,9,Type getGenericType(),False,,NULL
7,Parameter,10,AnnotatedType getAnnotatedType(),True,Returns an AnnotatedType object that represents the use of a type to specify the type of the formal parameter represented by this Parameter.,"

getAnnotatedType
public AnnotatedType getAnnotatedType()
Returns an AnnotatedType object that represents the use of a type to
 specify the type of the formal parameter represented by this Parameter.

Returns:
an AnnotatedType object representing the use of a type
         to specify the type of the formal parameter represented by this
         Parameter


"
7,Parameter,11,<T extends Annotation> T getAnnotation(Class<T> annotationClass),False,,NULL
7,Parameter,12,Annotation[] getDeclaredAnnotations(),True,Returns annotations that are directly present on this element.,"

getDeclaredAnnotations
public Annotation[] getDeclaredAnnotations()
Returns annotations that are directly present on this element.
 This method ignores inherited annotations.

 If there are no annotations directly present on this element,
 the return value is an array of length 0.

 The caller of this method is free to modify the returned array; it will
 have no effect on the arrays returned to other callers.

Specified by:
getDeclaredAnnotations in interface AnnotatedElement
Returns:
annotations directly present on this element


"
7,Parameter,13,<T extends Annotation> T[] getDeclaredAnnotationsByType(Class<T> annotationClass),False,,NULL
7,Parameter,14,boolean isAnnotationPresent(Class<? extends Annotation> annotationClass),False,,NULL
7,Parameter,15,boolean isSynthetic(),True,Returns true if this parameter is neither implicitly nor explicitly declared in source code; returns false otherwise.,"

isSynthetic
public boolean isSynthetic()
Returns true if this parameter is neither implicitly
 nor explicitly declared in source code; returns false
 otherwise.

Returns:
true if and only if this parameter is a synthetic
 construct as defined by
 The Javaâ„¢ Language Specification.
See  The Javaâ„¢ Language Specification:
13.1 The Form of a Binary


"
7,Parameter,16,boolean isVarArgs(),True,Returns true if this parameter represents a variable argument list; returns false otherwise.,"

isVarArgs
public boolean isVarArgs()
Returns true if this parameter represents a variable
 argument list; returns false otherwise.

Returns:
true if an only if this parameter represents a
 variable argument list.


"
7,Parameter,17,Type getGenericType(),False,,NULL
7,Parameter,18,AnnotatedType getAnnotatedType(),True,Returns an AnnotatedType object that represents the use of a type to specify the type of the formal parameter represented by this Parameter.,"

getAnnotatedType
public AnnotatedType getAnnotatedType()
Returns an AnnotatedType object that represents the use of a type to
 specify the type of the formal parameter represented by this Parameter.

Returns:
an AnnotatedType object representing the use of a type
         to specify the type of the formal parameter represented by this
         Parameter


"
7,Parameter,19,<T extends Annotation> T getAnnotation(Class<T> annotationClass),False,,NULL
7,Parameter,20,Annotation[] getDeclaredAnnotations(),True,Returns annotations that are directly present on this element.,"

getDeclaredAnnotations
public Annotation[] getDeclaredAnnotations()
Returns annotations that are directly present on this element.
 This method ignores inherited annotations.

 If there are no annotations directly present on this element,
 the return value is an array of length 0.

 The caller of this method is free to modify the returned array; it will
 have no effect on the arrays returned to other callers.

Specified by:
getDeclaredAnnotations in interface AnnotatedElement
Returns:
annotations directly present on this element


"
7,Parameter,21,<T extends Annotation> T[] getDeclaredAnnotationsByType(Class<T> annotationClass),False,,NULL
8,Proxy,1,"Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h)",True,Returns an instance of a proxy class for the specified interfaces that dispatches method invocations to the specified invocation handler.,"

newProxyInstance
public static Object newProxyInstance(ClassLoader loader,
                                      Class<?>[] interfaces,
                                      InvocationHandler h)
                               throws IllegalArgumentException
Returns an instance of a proxy class for the specified interfaces
 that dispatches method invocations to the specified invocation
 handler.

 Proxy.newProxyInstance throws
 IllegalArgumentException for the same reasons that
 Proxy.getProxyClass does.

Parameters:
loader - the class loader to define the proxy class
interfaces - the list of interfaces for the proxy class
          to implement
h - the invocation handler to dispatch method invocations to
Returns:
a proxy instance with the specified invocation handler of a
          proxy class that is defined by the specified class loader
          and that implements the specified interfaces
Throws:
IllegalArgumentException - if any of the restrictions on the
          parameters that may be passed to getProxyClass
          are violated
SecurityException - if a security manager, s, is present
          and any of the following conditions is met:
          
 the given loader is null and
               the caller's class loader is not null and the
               invocation of s.checkPermission with
               RuntimePermission(""getClassLoader"") permission
               denies access;
 for each proxy interface, intf,
               the caller's class loader is not the same as or an
               ancestor of the class loader for intf and
               invocation of s.checkPackageAccess() denies access to intf;
 any of the given proxy interfaces is non-public and the
               caller class is not in the same runtime package
               as the non-public interface and the invocation of
               s.checkPermission with
               ReflectPermission(""newProxyInPackage.{package name}"")
               permission denies access.

NullPointerException - if the interfaces array
          argument or any of its elements are null, or
          if the invocation handler, h, is
          null


"
8,Proxy,2,"Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h, int proxyType)",False,,NULL
8,Proxy,3,"Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h, Class<?>[] proxiedInterfaces)",False,,NULL
8,Proxy,4,"Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h, Class<?>[] proxiedInterfaces, Object[] proxiedInstances)",False,,NULL
8,Proxy,5,"Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h, Class<?>[] proxiedInterfaces, Object[] proxiedInstances, int proxyType)",False,,NULL
9,ReflectPermission,1,boolean implies(Permission p),False,,NULL
9,ReflectPermission,2,boolean equals(Object obj),False,,NULL
9,ReflectPermission,3,int hashCode(),False,,NULL
9,ReflectPermission,4,String getActions(),False,,NULL
9,ReflectPermission,5,String getName(),False,,NULL
