ClassName,Method,Return Type,Description,Full Description
AbstractColorChooserPanel,buildChooser(),protected abstract void,Builds a new chooser panel.,"

buildChooser
protected abstract void buildChooser()
Builds a new chooser panel.

"
AbstractColorChooserPanel,getColorFromModel(),protected Color,Returns the color that is currently selected.,"

getColorFromModel
protected Color getColorFromModel()
Returns the color that is currently selected.

Returns:
the Color that is selected


"
AbstractColorChooserPanel,getColorSelectionModel(),ColorSelectionModel,Returns the model that the chooser panel is editing.,"

getColorSelectionModel
public ColorSelectionModel getColorSelectionModel()
Returns the model that the chooser panel is editing.

Returns:
the ColorSelectionModel model this panel
         is editing


"
AbstractColorChooserPanel,getDisplayedMnemonicIndex(),int,Provides a hint to the look and feel as to the index of the character in getDisplayName that should be visually identified as the mnemonic.,"

getDisplayedMnemonicIndex
public int getDisplayedMnemonicIndex()
Provides a hint to the look and feel as to the index of the character in
 getDisplayName that should be visually identified as the
 mnemonic. The look and feel should only use this if
 getMnemonic returns a value > 0.
 
 The return value here is a hint, it is ultimately up to the look
 and feel to honor the return value in some meaningful way. For example,
 a look and feel may wish to render each
 AbstractColorChooserPanel in a JTabbedPane,
 and further use this return value to underline a character in
 the getDisplayName.
 
 This implementation returns -1, indicating the
 AbstractColorChooserPanel does not support a mnemonic,
 subclasses wishing a mnemonic will need to override this.

Returns:
Character index to render mnemonic for; -1 to provide no
                   visual identifier for this panel.
Since:
1.4
See Also:
getMnemonic()


"
AbstractColorChooserPanel,getDisplayName(),abstract String,Returns a string containing the display name of the panel.,"

getDisplayName
public abstract String getDisplayName()
Returns a string containing the display name of the panel.

Returns:
the name of the display panel


"
AbstractColorChooserPanel,getLargeDisplayIcon(),abstract Icon,Returns the large display icon for the panel.,"

getLargeDisplayIcon
public abstract Icon getLargeDisplayIcon()
Returns the large display icon for the panel.

Returns:
the large display icon


"
AbstractColorChooserPanel,getMnemonic(),int,Provides a hint to the look and feel as to the KeyEvent.VK constant that can be used as a mnemonic to access the panel.,"

getMnemonic
public int getMnemonic()
Provides a hint to the look and feel as to the
 KeyEvent.VK constant that can be used as a mnemonic to
 access the panel. A return value <= 0 indicates there is no mnemonic.
 
 The return value here is a hint, it is ultimately up to the look
 and feel to honor the return value in some meaningful way.
 
 This implementation returns 0, indicating the
 AbstractColorChooserPanel does not support a mnemonic,
 subclasses wishing a mnemonic will need to override this.

Returns:
KeyEvent.VK constant identifying the mnemonic; <= 0 for no
         mnemonic
Since:
1.4
See Also:
getDisplayedMnemonicIndex()


"
AbstractColorChooserPanel,getSmallDisplayIcon(),abstract Icon,Returns the small display icon for the panel.,"

getSmallDisplayIcon
public abstract Icon getSmallDisplayIcon()
Returns the small display icon for the panel.

Returns:
the small display icon


"
AbstractColorChooserPanel,installChooserPanel(JColorChooser enclosingChooser),void,Invoked when the panel is added to the chooser.,"

installChooserPanel
public void installChooserPanel(JColorChooser enclosingChooser)
Invoked when the panel is added to the chooser.
 If you override this, be sure to call super.

Parameters:
enclosingChooser - the panel to be added
Throws:
RuntimeException - if the chooser panel has already been
                          installed


"
AbstractColorChooserPanel,paint(Graphics g),void,Draws the panel.,"

paint
public void paint(Graphics g)
Draws the panel.

Overrides:
paint in class JComponent
Parameters:
g - the Graphics object
See Also:
JComponent.paintComponent(java.awt.Graphics), 
JComponent.paintBorder(java.awt.Graphics), 
JComponent.paintChildren(java.awt.Graphics), 
JComponent.getComponentGraphics(java.awt.Graphics), 
JComponent.repaint(long, int, int, int, int)


"
AbstractColorChooserPanel,uninstallChooserPanel(JColorChooser enclosingChooser),void,Invoked when the panel is removed from the chooser.,"

uninstallChooserPanel
public void uninstallChooserPanel(JColorChooser enclosingChooser)
Invoked when the panel is removed from the chooser.
 If override this, be sure to call super.

"
AbstractColorChooserPanel,updateChooser(),abstract void,Invoked automatically when the model's state changes.,"

updateChooser
public abstract void updateChooser()
Invoked automatically when the model's state changes.
 It is also called by installChooserPanel to allow
 you to set up the initial state of your chooser.
 Override this method to update your ChooserPanel.

"
ColorChooserComponentFactory,getDefaultChooserPanels(),static AbstractColorChooserPanel[],NULL,"

getDefaultChooserPanels
public static AbstractColorChooserPanel[] getDefaultChooserPanels()

"
ColorChooserComponentFactory,getPreviewPanel(),static JComponent,NULL,"

getPreviewPanel
public static JComponent getPreviewPanel()

"
DefaultColorSelectionModel,addChangeListener(ChangeListener l),void,Adds a ChangeListener to the model.,"

addChangeListener
public void addChangeListener(ChangeListener l)
Adds a ChangeListener to the model.

Specified by:
addChangeListener in interface ColorSelectionModel
Parameters:
l - the ChangeListener to be added


"
DefaultColorSelectionModel,fireStateChanged(),protected void,Runs each ChangeListener's stateChanged method.,"

fireStateChanged
protected void fireStateChanged()
Runs each ChangeListener's
 stateChanged method.

 

See Also:
EventListenerList


"
DefaultColorSelectionModel,getChangeListeners(),ChangeListener[],Returns an array of all the ChangeListeners added to this DefaultColorSelectionModel with addChangeListener.,"

getChangeListeners
public ChangeListener[] getChangeListeners()
Returns an array of all the ChangeListeners added
 to this DefaultColorSelectionModel with
 addChangeListener.

Returns:
all of the ChangeListeners added, or an empty
         array if no listeners have been added
Since:
1.4


"
DefaultColorSelectionModel,getSelectedColor(),Color,Returns the selected Color which should be non-null.,"

getSelectedColor
public Color getSelectedColor()
Returns the selected Color which should be
 non-null.

Specified by:
getSelectedColor in interface ColorSelectionModel
Returns:
the selected Color
See Also:
ColorSelectionModel.setSelectedColor(java.awt.Color)


"
DefaultColorSelectionModel,removeChangeListener(ChangeListener l),void,Removes a ChangeListener from the model.,"

removeChangeListener
public void removeChangeListener(ChangeListener l)
Removes a ChangeListener from the model.

Specified by:
removeChangeListener in interface ColorSelectionModel
Parameters:
l - the ChangeListener to be removed


"
DefaultColorSelectionModel,setSelectedColor(Color color),void,Sets the selected color to color.,"

setSelectedColor
public void setSelectedColor(Color color)
Sets the selected color to color.
 Note that setting the color to null
 is undefined and may have unpredictable results.
 This method fires a state changed event if it sets the
 current color to a new non-null color;
 if the new color is the same as the current color,
 no event is fired.

Specified by:
setSelectedColor in interface ColorSelectionModel
Parameters:
color - the new Color
See Also:
ColorSelectionModel.getSelectedColor(), 
ColorSelectionModel.addChangeListener(javax.swing.event.ChangeListener)


"
