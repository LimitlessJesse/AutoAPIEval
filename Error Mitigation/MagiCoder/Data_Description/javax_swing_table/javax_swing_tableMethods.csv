ClassName,Method,Return Type,Description,Full Description
AbstractTableModel,addTableModelListener(TableModelListener l),void,Adds a listener to the list that's notified each time a change to the data model occurs.,"

addTableModelListener
public void addTableModelListener(TableModelListener l)
Adds a listener to the list that's notified each time a change
 to the data model occurs.

Specified by:
addTableModelListener in interface TableModel
Parameters:
l - the TableModelListener


"
AbstractTableModel,findColumn(String columnName),int,Returns a column given its name.,"

findColumn
public int findColumn(String columnName)
Returns a column given its name.
 Implementation is naive so this should be overridden if
 this method is to be called often. This method is not
 in the TableModel interface and is not used by the
 JTable.

Parameters:
columnName - string containing name of column to be located
Returns:
the column with columnName, or -1 if not found


"
AbstractTableModel,"fireTableCellUpdated(int row, int column)",void,"Notifies all listeners that the value of the cell at [row, column] has been updated.","

fireTableCellUpdated
public void fireTableCellUpdated(int row,
                                 int column)
Notifies all listeners that the value of the cell at
 [row, column] has been updated.

Parameters:
row - row of cell which has been updated
column - column of cell which has been updated
See Also:
TableModelEvent, 
EventListenerList


"
AbstractTableModel,fireTableChanged(TableModelEvent e),void,Forwards the given notification event to all TableModelListeners that registered themselves as listeners for this table model.,"

fireTableChanged
public void fireTableChanged(TableModelEvent e)
Forwards the given notification event to all
 TableModelListeners that registered
 themselves as listeners for this table model.

Parameters:
e - the event to be forwarded
See Also:
addTableModelListener(javax.swing.event.TableModelListener), 
TableModelEvent, 
EventListenerList


"
AbstractTableModel,fireTableDataChanged(),void,Notifies all listeners that all cell values in the table's rows may have changed.,"

fireTableDataChanged
public void fireTableDataChanged()
Notifies all listeners that all cell values in the table's
 rows may have changed. The number of rows may also have changed
 and the JTable should redraw the
 table from scratch. The structure of the table (as in the order of the
 columns) is assumed to be the same.

See Also:
TableModelEvent, 
EventListenerList, 
JTable.tableChanged(TableModelEvent)


"
AbstractTableModel,"fireTableRowsDeleted(int firstRow, int lastRow)",void,"Notifies all listeners that rows in the range [firstRow, lastRow], inclusive, have been deleted.","

fireTableRowsDeleted
public void fireTableRowsDeleted(int firstRow,
                                 int lastRow)
Notifies all listeners that rows in the range
 [firstRow, lastRow], inclusive, have been deleted.

Parameters:
firstRow - the first row
lastRow - the last row
See Also:
TableModelEvent, 
EventListenerList


"
AbstractTableModel,"fireTableRowsInserted(int firstRow, int lastRow)",void,"Notifies all listeners that rows in the range [firstRow, lastRow], inclusive, have been inserted.","

fireTableRowsInserted
public void fireTableRowsInserted(int firstRow,
                                  int lastRow)
Notifies all listeners that rows in the range
 [firstRow, lastRow], inclusive, have been inserted.

Parameters:
firstRow - the first row
lastRow - the last row
See Also:
TableModelEvent, 
EventListenerList


"
AbstractTableModel,"fireTableRowsUpdated(int firstRow, int lastRow)",void,"Notifies all listeners that rows in the range [firstRow, lastRow], inclusive, have been updated.","

fireTableRowsUpdated
public void fireTableRowsUpdated(int firstRow,
                                 int lastRow)
Notifies all listeners that rows in the range
 [firstRow, lastRow], inclusive, have been updated.

Parameters:
firstRow - the first row
lastRow - the last row
See Also:
TableModelEvent, 
EventListenerList


"
AbstractTableModel,fireTableStructureChanged(),void,Notifies all listeners that the table's structure has changed.,"

fireTableStructureChanged
public void fireTableStructureChanged()
Notifies all listeners that the table's structure has changed.
 The number of columns in the table, and the names and types of
 the new columns may be different from the previous state.
 If the JTable receives this event and its
 autoCreateColumnsFromModel
 flag is set it discards any table columns that it had and reallocates
 default columns in the order they appear in the model. This is the
 same as calling setModel(TableModel) on the
 JTable.

See Also:
TableModelEvent, 
EventListenerList


"
AbstractTableModel,getColumnClass(int columnIndex),Class<?>,Returns Object.class regardless of columnIndex.,"

getColumnClass
public Class<?> getColumnClass(int columnIndex)
Returns Object.class regardless of columnIndex.

Specified by:
getColumnClass in interface TableModel
Parameters:
columnIndex - the column being queried
Returns:
the Object.class


"
AbstractTableModel,getColumnName(int column),String,"Returns a default name for the column using spreadsheet conventions: A, B, C, ...","

getColumnName
public String getColumnName(int column)
Returns a default name for the column using spreadsheet conventions:
  A, B, C, ... Z, AA, AB, etc.  If column cannot be found,
  returns an empty string.

Specified by:
getColumnName in interface TableModel
Parameters:
column - the column being queried
Returns:
a string containing the default name of column


"
AbstractTableModel,getListeners(Class<T> listenerType),<T extends EventListener> T[],Returns an array of all the objects currently registered as FooListeners upon this AbstractTableModel.,"

getListeners
public <T extends EventListener> T[] getListeners(Class<T> listenerType)
Returns an array of all the objects currently registered
 as FooListeners
 upon this AbstractTableModel.
 FooListeners are registered using the
 addFooListener method.

 

 You can specify the listenerType argument
 with a class literal,
 such as
 FooListener.class.
 For example, you can query a
 model m
 for its table model listeners with the following code:

 TableModelListener[] tmls = (TableModelListener[])(m.getListeners(TableModelListener.class));

 If no such listeners exist, this method returns an empty array.

Parameters:
listenerType - the type of listeners requested; this parameter
          should specify an interface that descends from
          java.util.EventListener
Returns:
an array of all objects registered as
          FooListeners on this component,
          or an empty array if no such
          listeners have been added
Throws:
ClassCastException - if listenerType
          doesn't specify a class or interface that implements
          java.util.EventListener
Since:
1.3
See Also:
getTableModelListeners()


"
AbstractTableModel,getTableModelListeners(),TableModelListener[],Returns an array of all the table model listeners registered on this model.,"

getTableModelListeners
public TableModelListener[] getTableModelListeners()
Returns an array of all the table model listeners
 registered on this model.

Returns:
all of this model's TableModelListeners
         or an empty
         array if no table model listeners are currently registered
Since:
1.4
See Also:
addTableModelListener(javax.swing.event.TableModelListener), 
removeTableModelListener(javax.swing.event.TableModelListener)


"
AbstractTableModel,"isCellEditable(int rowIndex, int columnIndex)",boolean,Returns false.,"

isCellEditable
public boolean isCellEditable(int rowIndex,
                              int columnIndex)
Returns false.  This is the default implementation for all cells.

Specified by:
isCellEditable in interface TableModel
Parameters:
rowIndex - the row being queried
columnIndex - the column being queried
Returns:
false
See Also:
TableModel.setValueAt(java.lang.Object, int, int)


"
AbstractTableModel,removeTableModelListener(TableModelListener l),void,Removes a listener from the list that's notified each time a change to the data model occurs.,"

removeTableModelListener
public void removeTableModelListener(TableModelListener l)
Removes a listener from the list that's notified each time a
 change to the data model occurs.

Specified by:
removeTableModelListener in interface TableModel
Parameters:
l - the TableModelListener


"
AbstractTableModel,"setValueAt(Object aValue, int rowIndex, int columnIndex)",void,This empty implementation is provided so users don't have to implement this method if their data model is not editable.,"

setValueAt
public void setValueAt(Object aValue,
                       int rowIndex,
                       int columnIndex)
This empty implementation is provided so users don't have to implement
  this method if their data model is not editable.

Specified by:
setValueAt in interface TableModel
Parameters:
aValue - value to assign to cell
rowIndex - row of cell
columnIndex - column of cell
See Also:
TableModel.getValueAt(int, int), 
TableModel.isCellEditable(int, int)


"
DefaultTableCellRenderer,"firePropertyChange(String propertyName, boolean oldValue, boolean newValue)",void,Overridden for performance reasons.,"

firePropertyChange
public void firePropertyChange(String propertyName,
                               boolean oldValue,
                               boolean newValue)
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
firePropertyChange in class JComponent
Parameters:
propertyName - the property whose value has changed
oldValue - the property's previous value
newValue - the property's new value


"
DefaultTableCellRenderer,"firePropertyChange(String propertyName, Object oldValue, Object newValue)",protected void,Overridden for performance reasons.,"

firePropertyChange
protected void firePropertyChange(String propertyName,
                                  Object oldValue,
                                  Object newValue)
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
firePropertyChange in class Component
Parameters:
propertyName - the property whose value has changed
oldValue - the property's previous value
newValue - the property's new value


"
DefaultTableCellRenderer,"getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)",Component,Returns the default table cell renderer.,"

getTableCellRendererComponent
public Component getTableCellRendererComponent(JTable table,
                                               Object value,
                                               boolean isSelected,
                                               boolean hasFocus,
                                               int row,
                                               int column)
Returns the default table cell renderer.
 
 During a printing operation, this method will be called with
 isSelected and hasFocus values of
 false to prevent selection and focus from appearing
 in the printed output. To do other customization based on whether
 or not the table is being printed, check the return value from
 JComponent.isPaintingForPrint().

Specified by:
getTableCellRendererComponent in interface TableCellRenderer
Parameters:
table - the JTable
value - the value to assign to the cell at
                  [row, column]
isSelected - true if cell is selected
hasFocus - true if cell has focus
row - the row of the cell to render
column - the column of the cell to render
Returns:
the default table cell renderer
See Also:
JComponent.isPaintingForPrint()


"
DefaultTableCellRenderer,invalidate(),void,Overridden for performance reasons.,"

invalidate
public void invalidate()
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
invalidate in class Container
Since:
1.5
See Also:
Container.validate(), 
Container.layout(), 
LayoutManager2


"
DefaultTableCellRenderer,isOpaque(),boolean,Overridden for performance reasons.,"

isOpaque
public boolean isOpaque()
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
isOpaque in class JComponent
Returns:
true if this component is completely opaque
See Also:
JComponent.setOpaque(boolean)


"
DefaultTableCellRenderer,repaint(),void,Overridden for performance reasons.,"

repaint
public void repaint()
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
repaint in class Component
Since:
1.5
See Also:
Component.update(Graphics)


"
DefaultTableCellRenderer,"repaint(long tm, int x, int y, int width, int height)",void,Overridden for performance reasons.,"

repaint
public void repaint(long tm,
                    int x,
                    int y,
                    int width,
                    int height)
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
repaint in class JComponent
Parameters:
tm - this parameter is not used
x - the x value of the dirty region
y - the y value of the dirty region
width - the width of the dirty region
height - the height of the dirty region
See Also:
JComponent.isPaintingOrigin(), 
Component.isShowing(), 
RepaintManager.addDirtyRegion(javax.swing.JComponent, int, int, int, int)


"
DefaultTableCellRenderer,repaint(Rectangle r),void,Overridden for performance reasons.,"

repaint
public void repaint(Rectangle r)
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
repaint in class JComponent
Parameters:
r - a Rectangle containing the dirty region
See Also:
JComponent.isPaintingOrigin(), 
Component.isShowing(), 
RepaintManager.addDirtyRegion(javax.swing.JComponent, int, int, int, int)


"
DefaultTableCellRenderer,revalidate(),void,Overridden for performance reasons.,"

revalidate
public void revalidate()
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
revalidate in class JComponent
See Also:
Component.invalidate(), 
Container.validate(), 
JComponent.isValidateRoot(), 
RepaintManager.addInvalidComponent(javax.swing.JComponent)


"
DefaultTableCellRenderer,setBackground(Color c),void,Overrides JComponent.setBackground to assign the unselected-background color to the specified color.,"

setBackground
public void setBackground(Color c)
Overrides JComponent.setBackground to assign
 the unselected-background color to the specified color.

Overrides:
setBackground in class JComponent
Parameters:
c - set the background color to this value
See Also:
Component.getBackground(), 
JComponent.setOpaque(boolean)


"
DefaultTableCellRenderer,setForeground(Color c),void,Overrides JComponent.setForeground to assign the unselected-foreground color to the specified color.,"

setForeground
public void setForeground(Color c)
Overrides JComponent.setForeground to assign
 the unselected-foreground color to the specified color.

Overrides:
setForeground in class JComponent
Parameters:
c - set the foreground color to this value
See Also:
Component.getForeground()


"
DefaultTableCellRenderer,setValue(Object value),protected void,Sets the String object for the cell being rendered to value.,"

setValue
protected void setValue(Object value)
Sets the String object for the cell being rendered to
 value.

Parameters:
value - the string value for this cell; if value is
          null it sets the text value to an empty string
See Also:
JLabel.setText(java.lang.String)


"
DefaultTableCellRenderer,updateUI(),void,Notification from the UIManager that the look and feel [L&F] has changed.,"

updateUI
public void updateUI()
Notification from the UIManager that the look and feel
 [L&F] has changed.
 Replaces the current UI object with the latest version from the
 UIManager.

Overrides:
updateUI in class JLabel
See Also:
JComponent.updateUI()


"
DefaultTableCellRenderer,validate(),void,Overridden for performance reasons.,"

validate
public void validate()
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
validate in class Container
See Also:
Container.add(java.awt.Component), 
Container.invalidate(), 
Container.isValidateRoot(), 
JComponent.revalidate(), 
Container.validateTree()


"
DefaultTableColumnModel,addColumn(TableColumn aColumn),void,Appends aColumn to the end of the tableColumns array.,"

addColumn
public void addColumn(TableColumn aColumn)
Appends aColumn to the end of the
  tableColumns array.
  This method also posts the columnAdded
  event to its listeners.

Specified by:
addColumn in interface TableColumnModel
Parameters:
aColumn - the TableColumn to be added
Throws:
IllegalArgumentException - if aColumn is
                          null
See Also:
removeColumn(javax.swing.table.TableColumn)


"
DefaultTableColumnModel,addColumnModelListener(TableColumnModelListener x),void,Adds a listener for table column model events.,"

addColumnModelListener
public void addColumnModelListener(TableColumnModelListener x)
Adds a listener for table column model events.

Specified by:
addColumnModelListener in interface TableColumnModel
Parameters:
x - a TableColumnModelListener object


"
DefaultTableColumnModel,createSelectionModel(),protected ListSelectionModel,Creates a new default list selection model.,"

createSelectionModel
protected ListSelectionModel createSelectionModel()
Creates a new default list selection model.

"
DefaultTableColumnModel,fireColumnAdded(TableColumnModelEvent e),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireColumnAdded
protected void fireColumnAdded(TableColumnModelEvent e)
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is lazily created using the parameters passed into
 the fire method.

Parameters:
e - the event received
See Also:
EventListenerList


"
DefaultTableColumnModel,fireColumnMarginChanged(),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireColumnMarginChanged
protected void fireColumnMarginChanged()
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is lazily created using the parameters passed into
 the fire method.

See Also:
EventListenerList


"
DefaultTableColumnModel,fireColumnMoved(TableColumnModelEvent e),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireColumnMoved
protected void fireColumnMoved(TableColumnModelEvent e)
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is lazily created using the parameters passed into
 the fire method.

Parameters:
e - the event received
See Also:
EventListenerList


"
DefaultTableColumnModel,fireColumnRemoved(TableColumnModelEvent e),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireColumnRemoved
protected void fireColumnRemoved(TableColumnModelEvent e)
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is lazily created using the parameters passed into
 the fire method.

Parameters:
e - the event received
See Also:
EventListenerList


"
DefaultTableColumnModel,fireColumnSelectionChanged(ListSelectionEvent e),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireColumnSelectionChanged
protected void fireColumnSelectionChanged(ListSelectionEvent e)
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is lazily created using the parameters passed into
 the fire method.

Parameters:
e - the event received
See Also:
EventListenerList


"
DefaultTableColumnModel,getColumn(int columnIndex),TableColumn,Returns the TableColumn object for the column at columnIndex.,"

getColumn
public TableColumn getColumn(int columnIndex)
Returns the TableColumn object for the column
 at columnIndex.

Specified by:
getColumn in interface TableColumnModel
Parameters:
columnIndex - the index of the column desired
Returns:
the TableColumn object for the column
                          at columnIndex


"
DefaultTableColumnModel,getColumnCount(),int,Returns the number of columns in the tableColumns array.,"

getColumnCount
public int getColumnCount()
Returns the number of columns in the tableColumns array.

Specified by:
getColumnCount in interface TableColumnModel
Returns:
the number of columns in the tableColumns array
See Also:
getColumns()


"
DefaultTableColumnModel,getColumnIndex(Object identifier),int,"Returns the index of the first column in the tableColumns array whose identifier is equal to identifier, when compared using equals.","

getColumnIndex
public int getColumnIndex(Object identifier)
Returns the index of the first column in the tableColumns
 array whose identifier is equal to identifier,
 when compared using equals.

Specified by:
getColumnIndex in interface TableColumnModel
Parameters:
identifier - the identifier object
Returns:
the index of the first column in the
                  tableColumns array whose identifier
                  is equal to identifier
Throws:
IllegalArgumentException - if identifier
                          is null, or if no
                          TableColumn has this
                          identifier
See Also:
getColumn(int)


"
DefaultTableColumnModel,getColumnIndexAtX(int x),int,"Returns the index of the column that lies at position x, or -1 if no column covers this point.","

getColumnIndexAtX
public int getColumnIndexAtX(int x)
Returns the index of the column that lies at position x,
 or -1 if no column covers this point.

 In keeping with Swing's separable model architecture, a
 TableColumnModel does not know how the table columns actually appear on
 screen.  The visual presentation of the columns is the responsibility
 of the view/controller object using this model (typically JTable).  The
 view/controller need not display the columns sequentially from left to
 right.  For example, columns could be displayed from right to left to
 accommodate a locale preference or some columns might be hidden at the
 request of the user.  Because the model does not know how the columns
 are laid out on screen, the given xPosition should not be
 considered to be a coordinate in 2D graphics space.  Instead, it should
 be considered to be a width from the start of the first column in the
 model.  If the column index for a given X coordinate in 2D space is
 required, JTable.columnAtPoint can be used instead.

Specified by:
getColumnIndexAtX in interface TableColumnModel
Parameters:
x - the horizontal location of interest
Returns:
the index of the column or -1 if no column is found
See Also:
JTable.columnAtPoint(java.awt.Point)


"
DefaultTableColumnModel,getColumnMargin(),int,Returns the width margin for TableColumn.,"

getColumnMargin
public int getColumnMargin()
Returns the width margin for TableColumn.
 The default columnMargin is 1.

Specified by:
getColumnMargin in interface TableColumnModel
Returns:
the maximum width for the TableColumn
See Also:
setColumnMargin(int)


"
DefaultTableColumnModel,getColumnModelListeners(),TableColumnModelListener[],Returns an array of all the column model listeners registered on this model.,"

getColumnModelListeners
public TableColumnModelListener[] getColumnModelListeners()
Returns an array of all the column model listeners
 registered on this model.

Returns:
all of this default table column model's ColumnModelListeners
         or an empty
         array if no column model listeners are currently registered
Since:
1.4
See Also:
addColumnModelListener(javax.swing.event.TableColumnModelListener), 
removeColumnModelListener(javax.swing.event.TableColumnModelListener)


"
DefaultTableColumnModel,getColumns(),Enumeration<TableColumn>,Returns an Enumeration of all the columns in the model.,"

getColumns
public Enumeration<TableColumn> getColumns()
Returns an Enumeration of all the columns in the model.

Specified by:
getColumns in interface TableColumnModel
Returns:
an Enumeration of the columns in the model


"
DefaultTableColumnModel,getColumnSelectionAllowed(),boolean,"Returns true if column selection is allowed, otherwise false.","

getColumnSelectionAllowed
public boolean getColumnSelectionAllowed()
Returns true if column selection is allowed, otherwise false.
 The default is false.

Specified by:
getColumnSelectionAllowed in interface TableColumnModel
Returns:
the columnSelectionAllowed property
See Also:
TableColumnModel.setColumnSelectionAllowed(boolean)


"
DefaultTableColumnModel,getListeners(Class<T> listenerType),<T extends EventListener> T[],Returns an array of all the objects currently registered as FooListeners upon this model.,"

getListeners
public <T extends EventListener> T[] getListeners(Class<T> listenerType)
Returns an array of all the objects currently registered
 as FooListeners
 upon this model.
 FooListeners are registered using the
 addFooListener method.

 

 You can specify the listenerType argument
 with a class literal,
 such as
 FooListener.class.
 For example, you can query a
 DefaultTableColumnModel m
 for its column model listeners with the following code:

 ColumnModelListener[] cmls = (ColumnModelListener[])(m.getListeners(ColumnModelListener.class));

 If no such listeners exist, this method returns an empty array.

Parameters:
listenerType - the type of listeners requested; this parameter
          should specify an interface that descends from
          java.util.EventListener
Returns:
an array of all objects registered as
          FooListeners on this model,
          or an empty array if no such
          listeners have been added
Throws:
ClassCastException - if listenerType
          doesn't specify a class or interface that implements
          java.util.EventListener
Since:
1.3
See Also:
getColumnModelListeners()


"
DefaultTableColumnModel,getSelectedColumnCount(),int,Returns the number of columns selected.,"

getSelectedColumnCount
public int getSelectedColumnCount()
Returns the number of columns selected.

Specified by:
getSelectedColumnCount in interface TableColumnModel
Returns:
the number of columns selected


"
DefaultTableColumnModel,getSelectedColumns(),int[],Returns an array of selected columns.,"

getSelectedColumns
public int[] getSelectedColumns()
Returns an array of selected columns.  If selectionModel
 is null, returns an empty array.

Specified by:
getSelectedColumns in interface TableColumnModel
Returns:
an array of selected columns or an empty array if nothing
                  is selected or the selectionModel is
                  null


"
DefaultTableColumnModel,getSelectionModel(),ListSelectionModel,Returns the ListSelectionModel that is used to maintain column selection state.,"

getSelectionModel
public ListSelectionModel getSelectionModel()
Returns the ListSelectionModel that is used to
 maintain column selection state.

Specified by:
getSelectionModel in interface TableColumnModel
Returns:
the object that provides column selection state.  Or
          null if row selection is not allowed.
See Also:
setSelectionModel(javax.swing.ListSelectionModel)


"
DefaultTableColumnModel,getTotalColumnWidth(),int,Returns the total combined width of all columns.,"

getTotalColumnWidth
public int getTotalColumnWidth()
Returns the total combined width of all columns.

Specified by:
getTotalColumnWidth in interface TableColumnModel
Returns:
the totalColumnWidth property


"
DefaultTableColumnModel,"moveColumn(int columnIndex, int newIndex)",void,Moves the column and heading at columnIndex to newIndex.,"

moveColumn
public void moveColumn(int columnIndex,
                       int newIndex)
Moves the column and heading at columnIndex to
 newIndex.  The old column at columnIndex
 will now be found at newIndex.  The column
 that used to be at newIndex is shifted
 left or right to make room.  This will not move any columns if
 columnIndex equals newIndex.  This method
 also posts a columnMoved event to its listeners.

Specified by:
moveColumn in interface TableColumnModel
Parameters:
columnIndex - the index of column to be moved
newIndex - new index to move the column
Throws:
IllegalArgumentException - if column or
                                          newIndex
                                          are not in the valid range


"
DefaultTableColumnModel,propertyChange(PropertyChangeEvent evt),void,Property Change Listener change method.,"

propertyChange
public void propertyChange(PropertyChangeEvent evt)
Property Change Listener change method.  Used to track changes
 to the column width or preferred column width.

Specified by:
propertyChange in interface PropertyChangeListener
Parameters:
evt - PropertyChangeEvent


"
DefaultTableColumnModel,recalcWidthCache(),protected void,Recalculates the total combined width of all columns.,"

recalcWidthCache
protected void recalcWidthCache()
Recalculates the total combined width of all columns.  Updates the
 totalColumnWidth property.

"
DefaultTableColumnModel,removeColumn(TableColumn column),void,Deletes the column from the tableColumns array.,"

removeColumn
public void removeColumn(TableColumn column)
Deletes the column from the
  tableColumns array.  This method will do nothing if
  column is not in the table's columns list.
  tile is called
  to resize both the header and table views.
  This method also posts a columnRemoved
  event to its listeners.

Specified by:
removeColumn in interface TableColumnModel
Parameters:
column - the TableColumn to be removed
See Also:
addColumn(javax.swing.table.TableColumn)


"
DefaultTableColumnModel,removeColumnModelListener(TableColumnModelListener x),void,Removes a listener for table column model events.,"

removeColumnModelListener
public void removeColumnModelListener(TableColumnModelListener x)
Removes a listener for table column model events.

Specified by:
removeColumnModelListener in interface TableColumnModel
Parameters:
x - a TableColumnModelListener object


"
DefaultTableColumnModel,setColumnMargin(int newMargin),void,Sets the column margin to newMargin.,"

setColumnMargin
public void setColumnMargin(int newMargin)
Sets the column margin to newMargin.  This method
 also posts a columnMarginChanged event to its
 listeners.

Specified by:
setColumnMargin in interface TableColumnModel
Parameters:
newMargin - the new margin width, in pixels
See Also:
getColumnMargin(), 
getTotalColumnWidth()


"
DefaultTableColumnModel,setColumnSelectionAllowed(boolean flag),void,Sets whether column selection is allowed.,"

setColumnSelectionAllowed
public void setColumnSelectionAllowed(boolean flag)
Sets whether column selection is allowed.  The default is false.

Specified by:
setColumnSelectionAllowed in interface TableColumnModel
Parameters:
flag - true if column selection will be allowed, false otherwise
See Also:
TableColumnModel.getColumnSelectionAllowed()


"
DefaultTableColumnModel,setSelectionModel(ListSelectionModel newModel),void,Sets the selection model for this TableColumnModel to newModel and registers for listener notifications from the new selection model.,"

setSelectionModel
public void setSelectionModel(ListSelectionModel newModel)
Sets the selection model for this TableColumnModel
  to newModel
  and registers for listener notifications from the new selection
  model.  If newModel is null,
  an exception is thrown.

Specified by:
setSelectionModel in interface TableColumnModel
Parameters:
newModel - the new selection model
Throws:
IllegalArgumentException - if newModel
                                          is null
See Also:
getSelectionModel()


"
DefaultTableColumnModel,valueChanged(ListSelectionEvent e),void,A ListSelectionListener that forwards ListSelectionEvents when there is a column selection change.,"

valueChanged
public void valueChanged(ListSelectionEvent e)
A ListSelectionListener that forwards
 ListSelectionEvents when there is a column
 selection change.

Specified by:
valueChanged in interface ListSelectionListener
Parameters:
e - the change event


"
DefaultTableModel,addColumn(Object columnName),void,Adds a column to the model.,"

addColumn
public void addColumn(Object columnName)
Adds a column to the model.  The new column will have the
  identifier columnName, which may be null.  This method
  will send a
  tableChanged notification message to all the listeners.
  This method is a cover for addColumn(Object, Vector) which
  uses null as the data vector.

Parameters:
columnName - the identifier of the column being added


"
DefaultTableModel,"addColumn(Object columnName, Object[] columnData)",void,Adds a column to the model.,"

addColumn
public void addColumn(Object columnName,
                      Object[] columnData)
Adds a column to the model.  The new column will have the
  identifier columnName.  columnData is the
  optional array of data for the column.  If it is null
  the column is filled with null values.  Otherwise,
  the new data will be added to model starting with the first
  element going to row 0, etc.  This method will send a
  tableChanged notification message to all the listeners.

See Also:
addColumn(Object, Vector)


"
DefaultTableModel,"addColumn(Object columnName, Vector columnData)",void,Adds a column to the model.,"

addColumn
public void addColumn(Object columnName,
                      Vector columnData)
Adds a column to the model.  The new column will have the
  identifier columnName, which may be null.
  columnData is the
  optional vector of data for the column.  If it is null
  the column is filled with null values.  Otherwise,
  the new data will be added to model starting with the first
  element going to row 0, etc.  This method will send a
  tableChanged notification message to all the listeners.

Parameters:
columnName - the identifier of the column being added
columnData - optional data of the column being added


"
DefaultTableModel,addRow(Object[] rowData),void,Adds a row to the end of the model.,"

addRow
public void addRow(Object[] rowData)
Adds a row to the end of the model.  The new row will contain
  null values unless rowData is specified.
  Notification of the row being added will be generated.

Parameters:
rowData - optional data of the row being added


"
DefaultTableModel,addRow(Vector rowData),void,Adds a row to the end of the model.,"

addRow
public void addRow(Vector rowData)
Adds a row to the end of the model.  The new row will contain
  null values unless rowData is specified.
  Notification of the row being added will be generated.

Parameters:
rowData - optional data of the row being added


"
DefaultTableModel,convertToVector(Object[] anArray),protected static Vector,Returns a vector that contains the same objects as the array.,"

convertToVector
protected static Vector convertToVector(Object[] anArray)
Returns a vector that contains the same objects as the array.

Parameters:
anArray - the array to be converted
Returns:
the new vector; if anArray is null,
                          returns null


"
DefaultTableModel,convertToVector(Object[][] anArray),protected static Vector,Returns a vector of vectors that contains the same objects as the array.,"

convertToVector
protected static Vector convertToVector(Object[][] anArray)
Returns a vector of vectors that contains the same objects as the array.

Parameters:
anArray - the double array to be converted
Returns:
the new vector of vectors; if anArray is
                          null, returns null


"
DefaultTableModel,getColumnCount(),int,Returns the number of columns in this data table.,"

getColumnCount
public int getColumnCount()
Returns the number of columns in this data table.

Specified by:
getColumnCount in interface TableModel
Returns:
the number of columns in the model
See Also:
TableModel.getRowCount()


"
DefaultTableModel,getColumnName(int column),String,Returns the column name.,"

getColumnName
public String getColumnName(int column)
Returns the column name.

Specified by:
getColumnName in interface TableModel
Overrides:
getColumnName in class AbstractTableModel
Parameters:
column - the column being queried
Returns:
a name for this column using the string value of the
 appropriate member in columnIdentifiers.
 If columnIdentifiers does not have an entry
 for this index, returns the default
 name provided by the superclass.


"
DefaultTableModel,getDataVector(),Vector,Returns the Vector of Vectors that contains the table's data values.,"

getDataVector
public Vector getDataVector()
Returns the Vector of Vectors
  that contains the table's
  data values.  The vectors contained in the outer vector are
  each a single row of values.  In other words, to get to the cell
  at row 1, column 5: 
((Vector)getDataVector().elementAt(1)).elementAt(5);

Returns:
the vector of vectors containing the tables data values
See Also:
newDataAvailable(javax.swing.event.TableModelEvent), 
newRowsAdded(javax.swing.event.TableModelEvent), 
setDataVector(java.util.Vector, java.util.Vector)


"
DefaultTableModel,getRowCount(),int,Returns the number of rows in this data table.,"

getRowCount
public int getRowCount()
Returns the number of rows in this data table.

Specified by:
getRowCount in interface TableModel
Returns:
the number of rows in the model
See Also:
TableModel.getColumnCount()


"
DefaultTableModel,"getValueAt(int row, int column)",Object,Returns an attribute value for the cell at row and column.,"

getValueAt
public Object getValueAt(int row,
                         int column)
Returns an attribute value for the cell at row
 and column.

Specified by:
getValueAt in interface TableModel
Parameters:
row - the row whose value is to be queried
column - the column whose value is to be queried
Returns:
the value Object at the specified cell
Throws:
ArrayIndexOutOfBoundsException - if an invalid row or
               column was given


"
DefaultTableModel,"insertRow(int row, Object[] rowData)",void,Inserts a row at row in the model.,"

insertRow
public void insertRow(int row,
                      Object[] rowData)
Inserts a row at row in the model.  The new row
  will contain null values unless rowData
  is specified.  Notification of the row being added will be generated.

Parameters:
row - the row index of the row to be inserted
rowData - optional data of the row being added
Throws:
ArrayIndexOutOfBoundsException - if the row was invalid


"
DefaultTableModel,"insertRow(int row, Vector rowData)",void,Inserts a row at row in the model.,"

insertRow
public void insertRow(int row,
                      Vector rowData)
Inserts a row at row in the model.  The new row
  will contain null values unless rowData
  is specified.  Notification of the row being added will be generated.

Parameters:
row - the row index of the row to be inserted
rowData - optional data of the row being added
Throws:
ArrayIndexOutOfBoundsException - if the row was invalid


"
DefaultTableModel,"isCellEditable(int row, int column)",boolean,Returns true regardless of parameter values.,"

isCellEditable
public boolean isCellEditable(int row,
                              int column)
Returns true regardless of parameter values.

Specified by:
isCellEditable in interface TableModel
Overrides:
isCellEditable in class AbstractTableModel
Parameters:
row - the row whose value is to be queried
column - the column whose value is to be queried
Returns:
true
See Also:
setValueAt(java.lang.Object, int, int)


"
DefaultTableModel,"moveRow(int start, int end, int to)",void,Moves one or more rows from the inclusive range start to end to the to position in the model.,"

moveRow
public void moveRow(int start,
                    int end,
                    int to)
Moves one or more rows from the inclusive range start to
  end to the to position in the model.
  After the move, the row that was at index start
  will be at index to.
  This method will send a tableChanged notification
       message to all the listeners.

  
  Examples of moves:

  1. moveRow(1,3,5);
          a|B|C|D|e|f|g|h|i|j|k   - before
          a|e|f|g|h|B|C|D|i|j|k   - after

  2. moveRow(6,7,1);
          a|b|c|d|e|f|G|H|i|j|k   - before
          a|G|H|b|c|d|e|f|i|j|k   - after
  

Parameters:
start - the starting row index to be moved
end - the ending row index to be moved
to - the destination of the rows to be moved
Throws:
ArrayIndexOutOfBoundsException - if any of the elements
 would be moved out of the table's range


"
DefaultTableModel,newDataAvailable(TableModelEvent event),void,Equivalent to fireTableChanged.,"

newDataAvailable
public void newDataAvailable(TableModelEvent event)
Equivalent to fireTableChanged.

Parameters:
event - the change event


"
DefaultTableModel,newRowsAdded(TableModelEvent e),void,Ensures that the new rows have the correct number of columns.,"

newRowsAdded
public void newRowsAdded(TableModelEvent e)
Ensures that the new rows have the correct number of columns.
  This is accomplished by  using the setSize method in
  Vector which truncates vectors
  which are too long, and appends nulls if they
  are too short.
  This method also sends out a tableChanged
  notification message to all the listeners.

Parameters:
e - this TableModelEvent describes
                           where the rows were added.
                           If null it assumes
                           all the rows were newly added
See Also:
getDataVector()


"
DefaultTableModel,removeRow(int row),void,Removes the row at row from the model.,"

removeRow
public void removeRow(int row)
Removes the row at row from the model.  Notification
  of the row being removed will be sent to all the listeners.

Parameters:
row - the row index of the row to be removed
Throws:
ArrayIndexOutOfBoundsException - if the row was invalid


"
DefaultTableModel,rowsRemoved(TableModelEvent event),void,Equivalent to fireTableChanged.,"

rowsRemoved
public void rowsRemoved(TableModelEvent event)
Equivalent to fireTableChanged.

Parameters:
event - the change event


"
DefaultTableModel,setColumnCount(int columnCount),void,Sets the number of columns in the model.,"

setColumnCount
public void setColumnCount(int columnCount)
Sets the number of columns in the model.  If the new size is greater
  than the current size, new columns are added to the end of the model
  with null cell values.
  If the new size is less than the current size, all columns at index
  columnCount and greater are discarded.

Parameters:
columnCount - the new number of columns in the model
Since:
1.3
See Also:
setColumnCount(int)


"
DefaultTableModel,setColumnIdentifiers(Object[] newIdentifiers),void,Replaces the column identifiers in the model.,"

setColumnIdentifiers
public void setColumnIdentifiers(Object[] newIdentifiers)
Replaces the column identifiers in the model.  If the number of
 newIdentifiers is greater than the current number
 of columns, new columns are added to the end of each row in the model.
 If the number of newIdentifiers is less than the current
 number of columns, all the extra columns at the end of a row are
 discarded.

Parameters:
newIdentifiers - array of column identifiers.
                          If null, set
                          the model to zero columns
See Also:
setNumRows(int)


"
DefaultTableModel,setColumnIdentifiers(Vector columnIdentifiers),void,Replaces the column identifiers in the model.,"

setColumnIdentifiers
public void setColumnIdentifiers(Vector columnIdentifiers)
Replaces the column identifiers in the model.  If the number of
 newIdentifiers is greater than the current number
 of columns, new columns are added to the end of each row in the model.
 If the number of newIdentifiers is less than the current
 number of columns, all the extra columns at the end of a row are
 discarded.

Parameters:
columnIdentifiers - vector of column identifiers.  If
                          null, set the model
                          to zero columns
See Also:
setNumRows(int)


"
DefaultTableModel,"setDataVector(Object[][] dataVector, Object[] columnIdentifiers)",void,Replaces the value in the dataVector instance variable with the values in the array dataVector.,"

setDataVector
public void setDataVector(Object[][] dataVector,
                          Object[] columnIdentifiers)
Replaces the value in the dataVector instance
  variable with the values in the array dataVector.
  The first index in the Object[][]
  array is the row index and the second is the column index.
  columnIdentifiers are the names of the new columns.

Parameters:
dataVector - the new data vector
columnIdentifiers - the names of the columns
See Also:
setDataVector(Vector, Vector)


"
DefaultTableModel,"setDataVector(Vector dataVector, Vector columnIdentifiers)",void,"Replaces the current dataVector instance variable with the new Vector of rows, dataVector.","

setDataVector
public void setDataVector(Vector dataVector,
                          Vector columnIdentifiers)
Replaces the current dataVector instance variable
  with the new Vector of rows, dataVector.
  Each row is represented in dataVector as a
  Vector of Object values.
  columnIdentifiers are the names of the new
  columns.  The first name in columnIdentifiers is
  mapped to column 0 in dataVector. Each row in
  dataVector is adjusted to match the number of
  columns in columnIdentifiers
  either by truncating the Vector if it is too long,
  or adding null values if it is too short.
  Note that passing in a null value for
  dataVector results in unspecified behavior,
  an possibly an exception.

Parameters:
dataVector - the new data vector
columnIdentifiers - the names of the columns
See Also:
getDataVector()


"
DefaultTableModel,setNumRows(int rowCount),void,Obsolete as of Java 2 platform v1.3.,"

setNumRows
public void setNumRows(int rowCount)
Obsolete as of Java 2 platform v1.3.  Please use setRowCount instead.

"
DefaultTableModel,setRowCount(int rowCount),void,Sets the number of rows in the model.,"

setRowCount
public void setRowCount(int rowCount)
Sets the number of rows in the model.  If the new size is greater
  than the current size, new rows are added to the end of the model
  If the new size is less than the current size, all
  rows at index rowCount and greater are discarded.

Since:
1.3
See Also:
setColumnCount(int)


"
DefaultTableModel,"setValueAt(Object aValue, int row, int column)",void,Sets the object value for the cell at column and row.,"

setValueAt
public void setValueAt(Object aValue,
                       int row,
                       int column)
Sets the object value for the cell at column and
 row.  aValue is the new value.  This method
 will generate a tableChanged notification.

Specified by:
setValueAt in interface TableModel
Overrides:
setValueAt in class AbstractTableModel
Parameters:
aValue - the new value; this can be null
row - the row whose value is to be changed
column - the column whose value is to be changed
Throws:
ArrayIndexOutOfBoundsException - if an invalid row or
               column was given
See Also:
TableModel.getValueAt(int, int), 
TableModel.isCellEditable(int, int)


"
JTableHeader,columnAdded(TableColumnModelEvent e),void,Invoked when a column is added to the table column model.,"

columnAdded
public void columnAdded(TableColumnModelEvent e)
Invoked when a column is added to the table column model.
 
 Application code will not use these methods explicitly, they
 are used internally by JTable.

Specified by:
columnAdded in interface TableColumnModelListener
Parameters:
e - the event received
See Also:
TableColumnModelListener


"
JTableHeader,columnAtPoint(Point point),int,"Returns the index of the column that point lies in, or -1 if it lies out of bounds.","

columnAtPoint
public int columnAtPoint(Point point)
Returns the index of the column that point lies in, or -1 if it
 lies out of bounds.

Returns:
the index of the column that point lies in, or -1 if it
          lies out of bounds


"
JTableHeader,columnMarginChanged(ChangeEvent e),void,Invoked when a column is moved due to a margin change.,"

columnMarginChanged
public void columnMarginChanged(ChangeEvent e)
Invoked when a column is moved due to a margin change.
 
 Application code will not use these methods explicitly, they
 are used internally by JTable.

Specified by:
columnMarginChanged in interface TableColumnModelListener
Parameters:
e - the event received
See Also:
TableColumnModelListener


"
JTableHeader,columnMoved(TableColumnModelEvent e),void,Invoked when a column is repositioned.,"

columnMoved
public void columnMoved(TableColumnModelEvent e)
Invoked when a column is repositioned.
 
 Application code will not use these methods explicitly, they
 are used internally by JTable.

Specified by:
columnMoved in interface TableColumnModelListener
Parameters:
e - the event received
See Also:
TableColumnModelListener


"
JTableHeader,columnRemoved(TableColumnModelEvent e),void,Invoked when a column is removed from the table column model.,"

columnRemoved
public void columnRemoved(TableColumnModelEvent e)
Invoked when a column is removed from the table column model.
 
 Application code will not use these methods explicitly, they
 are used internally by JTable.

Specified by:
columnRemoved in interface TableColumnModelListener
Parameters:
e - the event received
See Also:
TableColumnModelListener


"
JTableHeader,columnSelectionChanged(ListSelectionEvent e),void,Invoked when the selection model of the TableColumnModel is changed.,"

columnSelectionChanged
public void columnSelectionChanged(ListSelectionEvent e)
Invoked when the selection model of the TableColumnModel
 is changed.  This method currently has no effect (the header is not
 redrawn).
 
 Application code will not use these methods explicitly, they
 are used internally by JTable.

Specified by:
columnSelectionChanged in interface TableColumnModelListener
Parameters:
e - the event received
See Also:
TableColumnModelListener


"
JTableHeader,createDefaultColumnModel(),protected TableColumnModel,Returns the default column model object which is a DefaultTableColumnModel.,"

createDefaultColumnModel
protected TableColumnModel createDefaultColumnModel()
Returns the default column model object which is
  a DefaultTableColumnModel.  A subclass can override this
  method to return a different column model object

Returns:
the default column model object


"
JTableHeader,createDefaultRenderer(),protected TableCellRenderer,Returns a default renderer to be used when no header renderer is defined by a TableColumn.,"

createDefaultRenderer
protected TableCellRenderer createDefaultRenderer()
Returns a default renderer to be used when no header renderer
  is defined by a TableColumn.

Returns:
the default table column renderer
Since:
1.3


"
JTableHeader,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JTableHeader.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JTableHeader.
 For JTableHeaders, the AccessibleContext takes the form of an
 AccessibleJTableHeader.
 A new AccessibleJTableHeader instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleJTableHeader that serves as the
         AccessibleContext of this JTableHeader


"
JTableHeader,getColumnModel(),TableColumnModel,Returns the TableColumnModel that contains all column information of this table header.,"

getColumnModel
public TableColumnModel getColumnModel()
Returns the TableColumnModel that contains all column information
 of this table header.

Returns:
the columnModel property
See Also:
setColumnModel(javax.swing.table.TableColumnModel)


"
JTableHeader,getDefaultRenderer(),TableCellRenderer,Returns the default renderer used when no headerRenderer is defined by a TableColumn.,"

getDefaultRenderer
public TableCellRenderer getDefaultRenderer()
Returns the default renderer used when no headerRenderer
 is defined by a TableColumn.

Returns:
the default renderer
Since:
1.3


"
JTableHeader,getDraggedColumn(),TableColumn,"Returns the the dragged column, if and only if, a drag is in process, otherwise returns null.","

getDraggedColumn
public TableColumn getDraggedColumn()
Returns the the dragged column, if and only if, a drag is in
 process, otherwise returns null.

Returns:
the dragged column, if a drag is in
          process, otherwise returns null
See Also:
getDraggedDistance()


"
JTableHeader,getDraggedDistance(),int,"Returns the column's horizontal distance from its original position, if and only if, a drag is in process.","

getDraggedDistance
public int getDraggedDistance()
Returns the column's horizontal distance from its original
 position, if and only if, a drag is in process. Otherwise, the
 the return value is meaningless.

Returns:
the column's horizontal distance from its original
          position, if a drag is in process, otherwise the return
          value is meaningless
See Also:
getDraggedColumn()


"
JTableHeader,getHeaderRect(int column),Rectangle,Returns the rectangle containing the header tile at column.,"

getHeaderRect
public Rectangle getHeaderRect(int column)
Returns the rectangle containing the header tile at column.
 When the column parameter is out of bounds this method uses the
 same conventions as the JTable method getCellRect.

Returns:
the rectangle containing the header tile at column
See Also:
JTable.getCellRect(int, int, boolean)


"
JTableHeader,getReorderingAllowed(),boolean,"Returns true if the user is allowed to rearrange columns by dragging their headers, false otherwise.","

getReorderingAllowed
public boolean getReorderingAllowed()
Returns true if the user is allowed to rearrange columns by
 dragging their headers, false otherwise. The default is true. You can
 rearrange columns programmatically regardless of this setting.

Returns:
the reorderingAllowed property
See Also:
setReorderingAllowed(boolean)


"
JTableHeader,getResizingAllowed(),boolean,"Returns true if the user is allowed to resize columns by dragging between their headers, false otherwise.","

getResizingAllowed
public boolean getResizingAllowed()
Returns true if the user is allowed to resize columns by dragging
 between their headers, false otherwise. The default is true. You can
 resize columns programmatically regardless of this setting.

Returns:
the resizingAllowed property
See Also:
setResizingAllowed(boolean)


"
JTableHeader,getResizingColumn(),TableColumn,Returns the resizing column.,"

getResizingColumn
public TableColumn getResizingColumn()
Returns the resizing column.  If no column is being
 resized this method returns null.

Returns:
the resizing column, if a resize is in process, otherwise
          returns null


"
JTableHeader,getTable(),JTable,Returns the table associated with this header.,"

getTable
public JTable getTable()
Returns the table associated with this header.

Returns:
the table property


"
JTableHeader,getToolTipText(MouseEvent event),String,Allows the renderer's tips to be used if there is text set.,"

getToolTipText
public String getToolTipText(MouseEvent event)
Allows the renderer's tips to be used if there is text set.

Overrides:
getToolTipText in class JComponent
Parameters:
event - the location of the event identifies the proper
                          renderer and, therefore, the proper tip
Returns:
the tool tip for this component


"
JTableHeader,getUI(),TableHeaderUI,Returns the look and feel (L&F) object that renders this component.,"

getUI
public TableHeaderUI getUI()
Returns the look and feel (L&F) object that renders this component.

Returns:
the TableHeaderUI object that renders this component


"
JTableHeader,getUIClassID(),String,Returns the suffix used to construct the name of the look and feel (L&F) class used to render this component.,"

getUIClassID
public String getUIClassID()
Returns the suffix used to construct the name of the look and feel
 (L&F) class used to render this component.

Overrides:
getUIClassID in class JComponent
Returns:
the string ""TableHeaderUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JTableHeader,getUpdateTableInRealTime(),boolean,Obsolete as of Java 2 platform v1.3.,"

getUpdateTableInRealTime
public boolean getUpdateTableInRealTime()
Obsolete as of Java 2 platform v1.3.  Real time repaints, in response to
 column dragging or resizing, are now unconditional.

"
JTableHeader,initializeLocalVars(),protected void,Initializes the local variables and properties with default values.,"

initializeLocalVars
protected void initializeLocalVars()
Initializes the local variables and properties with default values.
 Used by the constructor methods.

"
JTableHeader,paramString(),protected String,Returns a string representation of this JTableHeader.,"

paramString
protected String paramString()
Returns a string representation of this JTableHeader. This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.
 
 Overriding paramString to provide information about the
 specific new aspects of the JFC components.

Overrides:
paramString in class JComponent
Returns:
a string representation of this JTableHeader


"
JTableHeader,resizeAndRepaint(),void,Sizes the header and marks it as needing display.,"

resizeAndRepaint
public void resizeAndRepaint()
Sizes the header and marks it as needing display.  Equivalent
 to revalidate followed by repaint.

"
JTableHeader,setColumnModel(TableColumnModel columnModel),void,Sets the column model for this table to newModel and registers for listener notifications from the new column model.,"

setColumnModel
public void setColumnModel(TableColumnModel columnModel)
Sets the column model for this table to newModel and registers
  for listener notifications from the new column model.

Parameters:
columnModel - the new data source for this table
Throws:
IllegalArgumentException - if newModel is null
See Also:
getColumnModel()


"
JTableHeader,setDefaultRenderer(TableCellRenderer defaultRenderer),void,Sets the default renderer to be used when no headerRenderer is defined by a TableColumn.,"

setDefaultRenderer
public void setDefaultRenderer(TableCellRenderer defaultRenderer)
Sets the default renderer to be used when no headerRenderer
 is defined by a TableColumn.

Parameters:
defaultRenderer - the default renderer
Since:
1.3


"
JTableHeader,setDraggedColumn(TableColumn aColumn),void,Sets the header's draggedColumn to aColumn.,"

setDraggedColumn
public void setDraggedColumn(TableColumn aColumn)
Sets the header's draggedColumn to aColumn.
  
  Application code will not use this method explicitly, it is used
  internally by the column dragging mechanism.

Parameters:
aColumn - the column being dragged, or null if
                 no column is being dragged


"
JTableHeader,setDraggedDistance(int distance),void,Sets the header's draggedDistance to distance.,"

setDraggedDistance
public void setDraggedDistance(int distance)
Sets the header's draggedDistance to distance.

Parameters:
distance - the distance dragged


"
JTableHeader,setReorderingAllowed(boolean reorderingAllowed),void,Sets whether the user can drag column headers to reorder columns.,"

setReorderingAllowed
public void setReorderingAllowed(boolean reorderingAllowed)
Sets whether the user can drag column headers to reorder columns.

Parameters:
reorderingAllowed - true if the table view should allow
                                  reordering; otherwise false
See Also:
getReorderingAllowed()


"
JTableHeader,setResizingAllowed(boolean resizingAllowed),void,Sets whether the user can resize columns by dragging between headers.,"

setResizingAllowed
public void setResizingAllowed(boolean resizingAllowed)
Sets whether the user can resize columns by dragging between headers.

Parameters:
resizingAllowed - true if table view should allow
                                  resizing
See Also:
getResizingAllowed()


"
JTableHeader,setResizingColumn(TableColumn aColumn),void,Sets the header's resizingColumn to aColumn.,"

setResizingColumn
public void setResizingColumn(TableColumn aColumn)
Sets the header's resizingColumn to aColumn.
  
  Application code will not use this method explicitly, it
  is used internally by the column sizing mechanism.

Parameters:
aColumn - the column being resized, or null if
                 no column is being resized


"
JTableHeader,setTable(JTable table),void,Sets the table associated with this header.,"

setTable
public void setTable(JTable table)
Sets the table associated with this header.

Parameters:
table - the new table


"
JTableHeader,setUI(TableHeaderUI ui),void,Sets the look and feel (L&F) object that renders this component.,"

setUI
public void setUI(TableHeaderUI ui)
Sets the look and feel (L&F) object that renders this component.

Parameters:
ui - the TableHeaderUI L&F object
See Also:
UIDefaults.getUI(javax.swing.JComponent)


"
JTableHeader,setUpdateTableInRealTime(boolean flag),void,Obsolete as of Java 2 platform v1.3.,"

setUpdateTableInRealTime
public void setUpdateTableInRealTime(boolean flag)
Obsolete as of Java 2 platform v1.3.  Real time repaints, in response to
 column dragging or resizing, are now unconditional.

"
JTableHeader,updateUI(),void,Notification from the UIManager that the look and feel (L&F) has changed.,"

updateUI
public void updateUI()
Notification from the UIManager that the look and feel
 (L&F) has changed.
 Replaces the current UI object with the latest version from the
 UIManager.

Overrides:
updateUI in class JComponent
See Also:
JComponent.updateUI()


"
TableColumn,addPropertyChangeListener(PropertyChangeListener listener),void,Adds a PropertyChangeListener to the listener list.,"

addPropertyChangeListener
public void addPropertyChangeListener(PropertyChangeListener listener)
Adds a PropertyChangeListener to the listener list.
 The listener is registered for all properties.
 
 A PropertyChangeEvent will get fired in response to an
 explicit call to setFont, setBackground,
 or setForeground on the
 current component.  Note that if the current component is
 inheriting its foreground, background, or font from its
 container, then no event will be fired in response to a
 change in the inherited property.

Parameters:
listener - the listener to be added


"
TableColumn,createDefaultHeaderRenderer(),protected TableCellRenderer,"As of Java 2 platform v1.3, this method is not called by the TableColumn constructor.","

createDefaultHeaderRenderer
protected TableCellRenderer createDefaultHeaderRenderer()
As of Java 2 platform v1.3, this method is not called by the TableColumn
 constructor.  Previously this method was used by the
 TableColumn to create a default header renderer.
 As of Java 2 platform v1.3, the default header renderer is null.
 JTableHeader now provides its own shared default
 renderer, just as the JTable does for its cell renderers.

Returns:
the default header renderer
See Also:
JTableHeader.createDefaultRenderer()


"
TableColumn,disableResizedPosting(),void,Deprecated. as of Java 2 platform v1.3,"

disableResizedPosting
@Deprecated
public void disableResizedPosting()
Deprecated. as of Java 2 platform v1.3
This field was not used in previous releases and there are
 currently no plans to support it in the future.

"
TableColumn,enableResizedPosting(),void,Deprecated. as of Java 2 platform v1.3,"

enableResizedPosting
@Deprecated
public void enableResizedPosting()
Deprecated. as of Java 2 platform v1.3
This field was not used in previous releases and there are
 currently no plans to support it in the future.

"
TableColumn,getCellEditor(),TableCellEditor,Returns the TableCellEditor used by the JTable to edit values for this column.,"

getCellEditor
public TableCellEditor getCellEditor()
Returns the TableCellEditor used by the
 JTable to edit values for this column.  When the
 cellEditor is null, the JTable
 uses a default editor based on the
 class of the cells in that column. The default value for a
 cellEditor is null.

Returns:
the cellEditor property
See Also:
setCellEditor(javax.swing.table.TableCellEditor), 
JTable.setDefaultEditor(java.lang.Class<?>, javax.swing.table.TableCellEditor)


"
TableColumn,getCellRenderer(),TableCellRenderer,Returns the TableCellRenderer used by the JTable to draw values for this column.,"

getCellRenderer
public TableCellRenderer getCellRenderer()
Returns the TableCellRenderer used by the
 JTable to draw
 values for this column.  The cellRenderer of the column
 not only controls the visual look for the column, but is also used to
 interpret the value object supplied by the TableModel.
 When the cellRenderer is null,
 the JTable uses a default renderer based on the
 class of the cells in that column. The default value for a
 cellRenderer is null.

Returns:
the cellRenderer property
See Also:
setCellRenderer(javax.swing.table.TableCellRenderer), 
JTable.setDefaultRenderer(java.lang.Class<?>, javax.swing.table.TableCellRenderer)


"
TableColumn,getHeaderRenderer(),TableCellRenderer,Returns the TableCellRenderer used to draw the header of the TableColumn.,"

getHeaderRenderer
public TableCellRenderer getHeaderRenderer()
Returns the TableCellRenderer used to draw the header of the
 TableColumn. When the headerRenderer is
 null, the JTableHeader
 uses its defaultRenderer. The default value for a
 headerRenderer is null.

Returns:
the headerRenderer property
See Also:
setHeaderRenderer(javax.swing.table.TableCellRenderer), 
setHeaderValue(java.lang.Object), 
JTableHeader.getDefaultRenderer()


"
TableColumn,getHeaderValue(),Object,Returns the Object used as the value for the header renderer.,"

getHeaderValue
public Object getHeaderValue()
Returns the Object used as the value for the header
 renderer.

Returns:
the headerValue property
See Also:
setHeaderValue(java.lang.Object)


"
TableColumn,getIdentifier(),Object,Returns the identifier object for this column.,"

getIdentifier
public Object getIdentifier()
Returns the identifier object for this column.
  Note identifiers are not used by JTable,
  they are purely a convenience for external use.
  If the identifier is null,
  getIdentifier() returns getHeaderValue
  as a default.

Returns:
the identifier property
See Also:
setIdentifier(java.lang.Object)


"
TableColumn,getMaxWidth(),int,Returns the maximum width for the TableColumn.,"

getMaxWidth
public int getMaxWidth()
Returns the maximum width for the TableColumn. The
 TableColumn's width can't be made larger than this
 either by the user or programmatically.  The default maxWidth
 is Integer.MAX_VALUE.

Returns:
the maxWidth property
See Also:
setMaxWidth(int)


"
TableColumn,getMinWidth(),int,Returns the minimum width for the TableColumn.,"

getMinWidth
public int getMinWidth()
Returns the minimum width for the TableColumn. The
 TableColumn's width can't be made less than this either
 by the user or programmatically.

Returns:
the minWidth property
See Also:
setMinWidth(int), 
TableColumn(int, int, TableCellRenderer, TableCellEditor)


"
TableColumn,getModelIndex(),int,Returns the model index for this column.,"

getModelIndex
public int getModelIndex()
Returns the model index for this column.

Returns:
the modelIndex property


"
TableColumn,getPreferredWidth(),int,Returns the preferred width of the TableColumn.,"

getPreferredWidth
public int getPreferredWidth()
Returns the preferred width of the TableColumn.
 The default preferred width is 75.

Returns:
the preferredWidth property
See Also:
setPreferredWidth(int)


"
TableColumn,getPropertyChangeListeners(),PropertyChangeListener[],Returns an array of all the PropertyChangeListeners added to this TableColumn with addPropertyChangeListener().,"

getPropertyChangeListeners
public PropertyChangeListener[] getPropertyChangeListeners()
Returns an array of all the PropertyChangeListeners added
 to this TableColumn with addPropertyChangeListener().

Returns:
all of the PropertyChangeListeners added or an empty
         array if no listeners have been added
Since:
1.4


"
TableColumn,getResizable(),boolean,"Returns true if the user is allowed to resize the TableColumn's width, false otherwise.","

getResizable
public boolean getResizable()
Returns true if the user is allowed to resize the
 TableColumn's
 width, false otherwise. You can change the width programmatically
 regardless of this setting.  The default is true.

Returns:
the isResizable property
See Also:
setResizable(boolean)


"
TableColumn,getWidth(),int,Returns the width of the TableColumn.,"

getWidth
public int getWidth()
Returns the width of the TableColumn. The default width is
 75.

Returns:
the width property
See Also:
setWidth(int)


"
TableColumn,removePropertyChangeListener(PropertyChangeListener listener),void,Removes a PropertyChangeListener from the listener list.,"

removePropertyChangeListener
public void removePropertyChangeListener(PropertyChangeListener listener)
Removes a PropertyChangeListener from the listener list.
 The PropertyChangeListener to be removed was registered
 for all properties.

Parameters:
listener - the listener to be removed


"
TableColumn,setCellEditor(TableCellEditor cellEditor),void,Sets the editor to used by when a cell in this column is edited.,"

setCellEditor
public void setCellEditor(TableCellEditor cellEditor)
Sets the editor to used by when a cell in this column is edited.

Parameters:
cellEditor - the new cellEditor
See Also:
getCellEditor()


"
TableColumn,setCellRenderer(TableCellRenderer cellRenderer),void,Sets the TableCellRenderer used by JTable to draw individual values for this column.,"

setCellRenderer
public void setCellRenderer(TableCellRenderer cellRenderer)
Sets the TableCellRenderer used by JTable
 to draw individual values for this column.

Parameters:
cellRenderer - the new cellRenderer
See Also:
getCellRenderer()


"
TableColumn,setHeaderRenderer(TableCellRenderer headerRenderer),void,Sets the TableCellRenderer used to draw the TableColumn's header to headerRenderer.,"

setHeaderRenderer
public void setHeaderRenderer(TableCellRenderer headerRenderer)
Sets the TableCellRenderer used to draw the
 TableColumn's header to headerRenderer.
 
 It is the header renderers responsibility to render the sorting
 indicator.  If you are using sorting and specify a renderer your
 renderer must render the sorting indication.

Parameters:
headerRenderer - the new headerRenderer
See Also:
getHeaderRenderer()


"
TableColumn,setHeaderValue(Object headerValue),void,Sets the Object whose string representation will be used as the value for the headerRenderer.,"

setHeaderValue
public void setHeaderValue(Object headerValue)
Sets the Object whose string representation will be
 used as the value for the headerRenderer.  When the
 TableColumn is created, the default headerValue
 is null.

Parameters:
headerValue - the new headerValue
See Also:
getHeaderValue()


"
TableColumn,setIdentifier(Object identifier),void,Sets the TableColumn's identifier to anIdentifier.,"

setIdentifier
public void setIdentifier(Object identifier)
Sets the TableColumn's identifier to
 anIdentifier. 
 Note: identifiers are not used by the JTable,
 they are purely a
 convenience for the external tagging and location of columns.

Parameters:
identifier - an identifier for this column
See Also:
getIdentifier()


"
TableColumn,setMaxWidth(int maxWidth),void,"Sets the TableColumn's maximum width to maxWidth or, if maxWidth is less than the minimum width, to the minimum width.","

setMaxWidth
public void setMaxWidth(int maxWidth)
Sets the TableColumn's maximum width to
 maxWidth or,
 if maxWidth is less than the minimum width,
 to the minimum width.

 
 If the value of the
 width or preferredWidth property
 is more than the new maximum width,
 this method sets that property to the new maximum width.

Parameters:
maxWidth - the new maximum width
See Also:
getMaxWidth(), 
setPreferredWidth(int), 
setMinWidth(int)


"
TableColumn,setMinWidth(int minWidth),void,"Sets the TableColumn's minimum width to minWidth, adjusting the new minimum width if necessary to ensure that 0 <= minWidth <= maxWidth.","

setMinWidth
public void setMinWidth(int minWidth)
Sets the TableColumn's minimum width to
 minWidth,
 adjusting the new minimum width if necessary to ensure that
 0 <= minWidth <= maxWidth.
 For example, if the minWidth argument is negative,
 this method sets the minWidth property to 0.

 
 If the value of the
 width or preferredWidth property
 is less than the new minimum width,
 this method sets that property to the new minimum width.

Parameters:
minWidth - the new minimum width
See Also:
getMinWidth(), 
setPreferredWidth(int), 
setMaxWidth(int)


"
TableColumn,setModelIndex(int modelIndex),void,Sets the model index for this column.,"

setModelIndex
public void setModelIndex(int modelIndex)
Sets the model index for this column. The model index is the
 index of the column in the model that will be displayed by this
 TableColumn. As the TableColumn
 is moved around in the view the model index remains constant.

Parameters:
modelIndex - the new modelIndex


"
TableColumn,setPreferredWidth(int preferredWidth),void,Sets this column's preferred width to preferredWidth.,"

setPreferredWidth
public void setPreferredWidth(int preferredWidth)
Sets this column's preferred width to preferredWidth.
 If preferredWidth exceeds the minimum or maximum width,
 it is adjusted to the appropriate limiting value.
 
 For details on how the widths of columns in the JTable
 (and JTableHeader) are calculated from the
 preferredWidth,
 see the doLayout method in JTable.

Parameters:
preferredWidth - the new preferred width
See Also:
getPreferredWidth(), 
JTable.doLayout()


"
TableColumn,setResizable(boolean isResizable),void,Sets whether this column can be resized.,"

setResizable
public void setResizable(boolean isResizable)
Sets whether this column can be resized.

Parameters:
isResizable - if true, resizing is allowed; otherwise false
See Also:
getResizable()


"
TableColumn,setWidth(int width),void,"This method should not be used to set the widths of columns in the JTable, use setPreferredWidth instead.","

setWidth
public void setWidth(int width)
This method should not be used to set the widths of columns in the
 JTable, use setPreferredWidth instead.
 Like a layout manager in the
 AWT, the JTable adjusts a column's width automatically
 whenever the
 table itself changes size, or a column's preferred width is changed.
 Setting widths programmatically therefore has no long term effect.
 
 This method sets this column's width to width.
 If width exceeds the minimum or maximum width,
 it is adjusted to the appropriate limiting value.

Parameters:
width - the new width
See Also:
getWidth(), 
setMinWidth(int), 
setMaxWidth(int), 
setPreferredWidth(int), 
JTable.doLayout()


"
TableColumn,sizeWidthToFit(),void,Resizes the TableColumn to fit the width of its header cell.,"

sizeWidthToFit
public void sizeWidthToFit()
Resizes the TableColumn to fit the width of its header cell.
 This method does nothing if the header renderer is null
 (the default case). Otherwise, it sets the minimum, maximum and preferred
 widths of this column to the widths of the minimum, maximum and preferred
 sizes of the Component delivered by the header renderer.
 The transient ""width"" property of this TableColumn is also set to the
 preferred width. Note this method is not used internally by the table
 package.

See Also:
setPreferredWidth(int)


"
TableRowSorter,getComparator(int column),Comparator<?>,Returns the Comparator for the specified column.,"

getComparator
public Comparator<?> getComparator(int column)
Returns the Comparator for the specified
 column.  If a Comparator has not been specified using
 the setComparator method a Comparator
 will be returned based on the column class
 (TableModel.getColumnClass) of the specified column.
 If the column class is String,
 Collator.getInstance is returned.  If the
 column class implements Comparable a private
 Comparator is returned that invokes the
 compareTo method.  Otherwise
 Collator.getInstance is returned.

Overrides:
getComparator in class DefaultRowSorter<M extends TableModel,Integer>
Parameters:
column - the column to fetch the Comparator for, in
        terms of the underlying model
Returns:
the Comparator for the specified column
Throws:
IndexOutOfBoundsException - if column is outside
         the range of the underlying model


"
TableRowSorter,getStringConverter(),TableStringConverter,Returns the object responsible for converting values from the model to strings.,"

getStringConverter
public TableStringConverter getStringConverter()
Returns the object responsible for converting values from the
 model to strings.

Returns:
object responsible for converting values to strings.


"
TableRowSorter,setModel(M model),void,Sets the TableModel to use as the underlying model for this TableRowSorter.,"

setModel
public void setModel(M model)
Sets the TableModel to use as the underlying model
 for this TableRowSorter.  A value of null
 can be used to set an empty model.

Parameters:
model - the underlying model to use, or null


"
TableRowSorter,setStringConverter(TableStringConverter stringConverter),void,Sets the object responsible for converting values from the model to strings.,"

setStringConverter
public void setStringConverter(TableStringConverter stringConverter)
Sets the object responsible for converting values from the
 model to strings.  If non-null this
 is used to convert any object values, that do not have a
 registered Comparator, to strings.

Parameters:
stringConverter - the object responsible for converting values
        from the model to strings


"
TableRowSorter,useToString(int column),protected boolean,Returns whether or not to convert the value to a string before doing comparisons when sorting.,"

useToString
protected boolean useToString(int column)
Returns whether or not to convert the value to a string before
 doing comparisons when sorting.  If true
 ModelWrapper.getStringValueAt will be used, otherwise
 ModelWrapper.getValueAt will be used.  It is up to
 subclasses, such as TableRowSorter, to honor this value
 in their ModelWrapper implementation.

Overrides:
useToString in class DefaultRowSorter<M extends TableModel,Integer>
Parameters:
column - the index of the column to test, in terms of the
        underlying model
Throws:
IndexOutOfBoundsException - if column is not valid


"
TableStringConverter,"toString(TableModel model, int row, int column)",abstract String,Returns the string representation of the value at the specified location.,"

toString
public abstract String toString(TableModel model,
                                int row,
                                int column)
Returns the string representation of the value at the specified
 location.

Parameters:
model - the TableModel to fetch the value from
row - the row the string is being requested for
column - the column the string is being requested for
Returns:
the string representation.  This should never return null.
Throws:
NullPointerException - if model is null
IndexOutOfBoundsException - if the arguments are outside the
         bounds of the model


"
