Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,AbstractTableModel,1,"boolean isCellEditable(int row, int column)",True,Returns false.,"

isCellEditable
public boolean isCellEditable(int rowIndex,
                              int columnIndex)
Returns false.  This is the default implementation for all cells.

Specified by:
isCellEditable in interface TableModel
Parameters:
rowIndex - the row being queried
columnIndex - the column being queried
Returns:
false
See Also:
TableModel.setValueAt(java.lang.Object, int, int)


"
0,AbstractTableModel,2,"Object getValueAt(int rowIndex, int columnIndex)",False,,NULL
0,AbstractTableModel,3,"void setValueAt(Object aValue, int rowIndex, int columnIndex)",True,This empty implementation is provided so users don't have to implement this method if their data model is not editable.,"

setValueAt
public void setValueAt(Object aValue,
                       int rowIndex,
                       int columnIndex)
This empty implementation is provided so users don't have to implement
  this method if their data model is not editable.

Specified by:
setValueAt in interface TableModel
Parameters:
aValue - value to assign to cell
rowIndex - row of cell
columnIndex - column of cell
See Also:
TableModel.getValueAt(int, int), 
TableModel.isCellEditable(int, int)


"
0,AbstractTableModel,4,int getColumnCount(),False,,NULL
0,AbstractTableModel,5,int getRowCount(),False,,NULL
0,AbstractTableModel,6,Class getColumnClass(int columnIndex),False,,NULL
0,AbstractTableModel,7,String getColumnName(int columnIndex),True,"Returns a default name for the column using spreadsheet conventions: A, B, C, ...","

getColumnName
public String getColumnName(int column)
Returns a default name for the column using spreadsheet conventions:
  A, B, C, ... Z, AA, AB, etc.  If column cannot be found,
  returns an empty string.

Specified by:
getColumnName in interface TableModel
Parameters:
column - the column being queried
Returns:
a string containing the default name of column


"
0,AbstractTableModel,8,void fireTableDataChanged(),True,Notifies all listeners that all cell values in the table's rows may have changed.,"

fireTableDataChanged
public void fireTableDataChanged()
Notifies all listeners that all cell values in the table's
 rows may have changed. The number of rows may also have changed
 and the JTable should redraw the
 table from scratch. The structure of the table (as in the order of the
 columns) is assumed to be the same.

See Also:
TableModelEvent, 
EventListenerList, 
JTable.tableChanged(TableModelEvent)


"
0,AbstractTableModel,9,"void fireTableCellUpdated(int row, int column)",True,"Notifies all listeners that the value of the cell at [row, column] has been updated.","

fireTableCellUpdated
public void fireTableCellUpdated(int row,
                                 int column)
Notifies all listeners that the value of the cell at
 [row, column] has been updated.

Parameters:
row - row of cell which has been updated
column - column of cell which has been updated
See Also:
TableModelEvent, 
EventListenerList


"
0,AbstractTableModel,10,void addTableModelListener(TableModelListener l),True,Adds a listener to the list that's notified each time a change to the data model occurs.,"

addTableModelListener
public void addTableModelListener(TableModelListener l)
Adds a listener to the list that's notified each time a change
 to the data model occurs.

Specified by:
addTableModelListener in interface TableModel
Parameters:
l - the TableModelListener


"
0,AbstractTableModel,11,void removeTableModelListener(TableModelListener l),True,Removes a listener from the list that's notified each time a change to the data model occurs.,"

removeTableModelListener
public void removeTableModelListener(TableModelListener l)
Removes a listener from the list that's notified each time a
 change to the data model occurs.

Specified by:
removeTableModelListener in interface TableModel
Parameters:
l - the TableModelListener


"
1,DefaultTableCellRenderer,1,setHorizontalAlignment(int alignment),False,,NULL
1,DefaultTableCellRenderer,2,setVerticalAlignment(int alignment),False,,NULL
1,DefaultTableCellRenderer,3,setBackground(Color c),False,,NULL
1,DefaultTableCellRenderer,4,setForeground(Color c),False,,NULL
1,DefaultTableCellRenderer,5,setBorder(Border border),False,,NULL
2,DefaultTableCellRenderer.UIResource,1,void setHorizontalAlignment(int alignment),False,,NULL
2,DefaultTableCellRenderer.UIResource,2,void setVerticalAlignment(int alignment),False,,NULL
2,DefaultTableCellRenderer.UIResource,3,void setBackground(Color c),False,,NULL
2,DefaultTableCellRenderer.UIResource,4,void setForeground(Color c),False,,NULL
2,DefaultTableCellRenderer.UIResource,5,void setBorder(Border border),False,,NULL
3,DefaultTableColumnModel,1,DefaultTableColumnModel(),False,,NULL
3,DefaultTableColumnModel,2,addColumn(TableColumn column),False,,NULL
3,DefaultTableColumnModel,3,getColumn(int modelIndex),False,,NULL
3,DefaultTableColumnModel,4,getColumnCount(),False,,NULL
3,DefaultTableColumnModel,5,getColumnIndex(TableColumn column),False,,NULL
4,DefaultTableModel,1,boolean add(E e),False,,NULL
4,DefaultTableModel,2,void addColumn(Object column),True,Adds a column to the model.,"

addColumn
public void addColumn(Object columnName)
Adds a column to the model.  The new column will have the
  identifier columnName, which may be null.  This method
  will send a
  tableChanged notification message to all the listeners.
  This method is a cover for addColumn(Object, Vector) which
  uses null as the data vector.

Parameters:
columnName - the identifier of the column being added


"
4,DefaultTableModel,3,void addRow(Object row),False,,NULL
4,DefaultTableModel,4,void clear(),False,,NULL
4,DefaultTableModel,5,Object clone(),False,,NULL
4,DefaultTableModel,6,boolean contains(Object o),False,,NULL
4,DefaultTableModel,7,Object get(int index),False,,NULL
4,DefaultTableModel,8,int indexOf(Object o),False,,NULL
4,DefaultTableModel,9,Object remove(int index),False,,NULL
4,DefaultTableModel,10,boolean remove(Object o),False,,NULL
4,DefaultTableModel,11,"Object set(int index, Object element)",False,,NULL
4,DefaultTableModel,12,int size(),False,,NULL
4,DefaultTableModel,13,"List subList(int fromIndex, int toIndex)",False,,NULL
4,DefaultTableModel,14,Object[] toArray(),False,,NULL
4,DefaultTableModel,15,Object[] toArray(Object[] a),False,,NULL
4,DefaultTableModel,16,boolean addAll(Collection c),False,,NULL
4,DefaultTableModel,17,"boolean addAll(int index, Collection c)",False,,NULL
4,DefaultTableModel,18,void clear(),False,,NULL
4,DefaultTableModel,19,boolean contains(Object o),False,,NULL
4,DefaultTableModel,20,boolean containsAll(Collection c),False,,NULL
4,DefaultTableModel,21,Object get(int index),False,,NULL
4,DefaultTableModel,22,int indexOf(Object o),False,,NULL
4,DefaultTableModel,23,boolean isEmpty(),False,,NULL
4,DefaultTableModel,24,Iterator iterator(),False,,NULL
4,DefaultTableModel,25,int lastIndexOf(Object o),False,,NULL
4,DefaultTableModel,26,ListIterator listIterator(),False,,NULL
4,DefaultTableModel,27,ListIterator listIterator(int index),False,,NULL
4,DefaultTableModel,28,boolean remove(Object o),False,,NULL
4,DefaultTableModel,29,Object remove(int index),False,,NULL
4,DefaultTableModel,30,boolean removeAll(Collection c),False,,NULL
4,DefaultTableModel,31,boolean retainAll(Collection c),False,,NULL
4,DefaultTableModel,32,"Object set(int index, Object element)",False,,NULL
4,DefaultTableModel,33,int size(),False,,NULL
4,DefaultTableModel,34,"List subList(int fromIndex, int toIndex)",False,,NULL
4,DefaultTableModel,35,Object[] toArray(),False,,NULL
4,DefaultTableModel,36,Object[] toArray(Object[] a),False,,NULL
5,JTableHeader,1,void setReorderingAllowed(boolean reorderingAllowed),True,Sets whether the user can drag column headers to reorder columns.,"

setReorderingAllowed
public void setReorderingAllowed(boolean reorderingAllowed)
Sets whether the user can drag column headers to reorder columns.

Parameters:
reorderingAllowed - true if the table view should allow
                                  reordering; otherwise false
See Also:
getReorderingAllowed()


"
5,JTableHeader,2,boolean isReorderingAllowed(),False,,NULL
5,JTableHeader,3,void setResizingAllowed(boolean resizingAllowed),True,Sets whether the user can resize columns by dragging between headers.,"

setResizingAllowed
public void setResizingAllowed(boolean resizingAllowed)
Sets whether the user can resize columns by dragging between headers.

Parameters:
resizingAllowed - true if table view should allow
                                  resizing
See Also:
getResizingAllowed()


"
5,JTableHeader,4,boolean isResizingAllowed(),False,,NULL
5,JTableHeader,5,void setSortKeys(List<? extends SortKey> sortKeys),False,,NULL
6,TableColumn,1,setModel(TableColumnModel model),False,,NULL
6,TableColumn,2,setHeaderRenderer(TableCellRenderer renderer),False,,NULL
6,TableColumn,3,setHeaderValue(Object value),False,,NULL
6,TableColumn,4,setPreferredWidth(int width),False,,NULL
6,TableColumn,5,setWidth(int width),False,,NULL
7,TableRowSorter,1,TableRowSorter(),False,,NULL
7,TableRowSorter,2,void setModel(TableModel newModel),False,,NULL
7,TableRowSorter,3,TableModel getModel(),False,,NULL
7,TableRowSorter,4,"void setRowFilter(RowFilter<? super Integer,?> filter)",False,,NULL
7,TableRowSorter,5,"RowFilter<? super Integer,?> getRowFilter()",False,,NULL
8,TableStringConverter,1,"boolean convertCellToViewValue(Object value, JLabel label, int row, int column)",False,,NULL
8,TableStringConverter,2,"Object convertViewToModelValue(JLabel label, int row, int column)",False,,NULL
8,TableStringConverter,3,"boolean isCellEditable(int row, int column)",False,,NULL
8,TableStringConverter,4,"boolean isCellRenderer(JLabel label, int row, int column)",False,,NULL
8,TableStringConverter,5,"void setValueAt(Object value, int row, int column)",False,,NULL
