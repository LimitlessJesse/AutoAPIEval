ClassName,Method,Return Type,Description,Full Description
Adler32,getValue(),long,Returns the checksum value.,"

getValue
public long getValue()
Returns the checksum value.

Specified by:
getValue in interface Checksum
Returns:
the current checksum value


"
Adler32,reset(),void,Resets the checksum to initial value.,"

reset
public void reset()
Resets the checksum to initial value.

Specified by:
reset in interface Checksum


"
Adler32,update(byte[] b),void,Updates the checksum with the specified array of bytes.,"

update
public void update(byte[] b)
Updates the checksum with the specified array of bytes.

Parameters:
b - the byte array to update the checksum with


"
Adler32,"update(byte[] b, int off, int len)",void,Updates the checksum with the specified array of bytes.,"

update
public void update(byte[] b,
                   int off,
                   int len)
Updates the checksum with the specified array of bytes.

Specified by:
update in interface Checksum
Parameters:
b - the byte array to update the checksum with
off - the start offset of the data
len - the number of bytes to use for the update
Throws:
ArrayIndexOutOfBoundsException - if off is negative, or len is negative,
          or off+len is greater than the length of the
          array b


"
Adler32,update(ByteBuffer buffer),void,Updates the checksum with the bytes from the specified buffer.,"

update
public void update(ByteBuffer buffer)
Updates the checksum with the bytes from the specified buffer.

 The checksum is updated using
 buffer.remaining()
 bytes starting at
 buffer.position()
 Upon return, the buffer's position will be updated to its
 limit; its limit will not have been changed.

Parameters:
buffer - the ByteBuffer to update the checksum with
Since:
1.8


"
Adler32,update(int b),void,Updates the checksum with the specified byte (the low eight bits of the argument b).,"

update
public void update(int b)
Updates the checksum with the specified byte (the low eight
 bits of the argument b).

Specified by:
update in interface Checksum
Parameters:
b - the byte to update the checksum with


"
CheckedInputStream,getChecksum(),Checksum,Returns the Checksum for this input stream.,"

getChecksum
public Checksum getChecksum()
Returns the Checksum for this input stream.

Returns:
the Checksum value


"
CheckedInputStream,read(),int,Reads a byte.,"

read
public int read()
         throws IOException
Reads a byte. Will block if no input is available.

Overrides:
read in class FilterInputStream
Returns:
the byte read, or -1 if the end of the stream is reached.
Throws:
IOException - if an I/O error has occurred
See Also:
FilterInputStream.in


"
CheckedInputStream,"read(byte[] buf, int off, int len)",int,Reads into an array of bytes.,"

read
public int read(byte[] buf,
                int off,
                int len)
         throws IOException
Reads into an array of bytes. If len is not zero, the method
 blocks until some input is available; otherwise, no
 bytes are read and 0 is returned.

Overrides:
read in class FilterInputStream
Parameters:
buf - the buffer into which the data is read
off - the start offset in the destination array b
len - the maximum number of bytes read
Returns:
the actual number of bytes read, or -1 if the end
            of the stream is reached.
Throws:
NullPointerException - If buf is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 buf.length - off
IOException - if an I/O error has occurred
See Also:
FilterInputStream.in


"
CheckedInputStream,skip(long n),long,Skips specified number of bytes of input.,"

skip
public long skip(long n)
          throws IOException
Skips specified number of bytes of input.

Overrides:
skip in class FilterInputStream
Parameters:
n - the number of bytes to skip
Returns:
the actual number of bytes skipped
Throws:
IOException - if an I/O error has occurred


"
CheckedOutputStream,getChecksum(),Checksum,Returns the Checksum for this output stream.,"

getChecksum
public Checksum getChecksum()
Returns the Checksum for this output stream.

Returns:
the Checksum


"
CheckedOutputStream,"write(byte[] b, int off, int len)",void,Writes an array of bytes.,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Writes an array of bytes. Will block until the bytes are
 actually written.

Overrides:
write in class FilterOutputStream
Parameters:
b - the data to be written
off - the start offset of the data
len - the number of bytes to be written
Throws:
IOException - if an I/O error has occurred
See Also:
FilterOutputStream.write(int)


"
CheckedOutputStream,write(int b),void,Writes a byte.,"

write
public void write(int b)
           throws IOException
Writes a byte. Will block until the byte is actually written.

Overrides:
write in class FilterOutputStream
Parameters:
b - the byte to be written
Throws:
IOException - if an I/O error has occurred


"
CRC32,getValue(),long,Returns CRC-32 value.,"

getValue
public long getValue()
Returns CRC-32 value.

Specified by:
getValue in interface Checksum
Returns:
the current checksum value


"
CRC32,reset(),void,Resets CRC-32 to initial value.,"

reset
public void reset()
Resets CRC-32 to initial value.

Specified by:
reset in interface Checksum


"
CRC32,update(byte[] b),void,Updates the CRC-32 checksum with the specified array of bytes.,"

update
public void update(byte[] b)
Updates the CRC-32 checksum with the specified array of bytes.

Parameters:
b - the array of bytes to update the checksum with


"
CRC32,"update(byte[] b, int off, int len)",void,Updates the CRC-32 checksum with the specified array of bytes.,"

update
public void update(byte[] b,
                   int off,
                   int len)
Updates the CRC-32 checksum with the specified array of bytes.

Specified by:
update in interface Checksum
Parameters:
b - the byte array to update the checksum with
off - the start offset of the data
len - the number of bytes to use for the update
Throws:
ArrayIndexOutOfBoundsException - if off is negative, or len is negative,
          or off+len is greater than the length of the
          array b


"
CRC32,update(ByteBuffer buffer),void,Updates the checksum with the bytes from the specified buffer.,"

update
public void update(ByteBuffer buffer)
Updates the checksum with the bytes from the specified buffer.

 The checksum is updated using
 buffer.remaining()
 bytes starting at
 buffer.position()
 Upon return, the buffer's position will
 be updated to its limit; its limit will not have been changed.

Parameters:
buffer - the ByteBuffer to update the checksum with
Since:
1.8


"
CRC32,update(int b),void,Updates the CRC-32 checksum with the specified byte (the low eight bits of the argument b).,"

update
public void update(int b)
Updates the CRC-32 checksum with the specified byte (the low
 eight bits of the argument b).

Specified by:
update in interface Checksum
Parameters:
b - the byte to update the checksum with


"
Deflater,deflate(byte[] b),int,Compresses the input data and fills specified buffer with compressed data.,"

deflate
public int deflate(byte[] b)
Compresses the input data and fills specified buffer with compressed
 data. Returns actual number of bytes of compressed data. A return value
 of 0 indicates that needsInput should be called
 in order to determine if more input data is required.

 This method uses NO_FLUSH as its compression flush mode.
 An invocation of this method of the form deflater.deflate(b)
 yields the same result as the invocation of
 deflater.deflate(b, 0, b.length, Deflater.NO_FLUSH).

Parameters:
b - the buffer for the compressed data
Returns:
the actual number of bytes of compressed data written to the
         output buffer


"
Deflater,"deflate(byte[] b, int off, int len)",int,Compresses the input data and fills specified buffer with compressed data.,"

deflate
public int deflate(byte[] b,
                   int off,
                   int len)
Compresses the input data and fills specified buffer with compressed
 data. Returns actual number of bytes of compressed data. A return value
 of 0 indicates that needsInput should be called
 in order to determine if more input data is required.

 This method uses NO_FLUSH as its compression flush mode.
 An invocation of this method of the form deflater.deflate(b, off, len)
 yields the same result as the invocation of
 deflater.deflate(b, off, len, Deflater.NO_FLUSH).

Parameters:
b - the buffer for the compressed data
off - the start offset of the data
len - the maximum number of bytes of compressed data
Returns:
the actual number of bytes of compressed data written to the
         output buffer


"
Deflater,"deflate(byte[] b, int off, int len, int flush)",int,Compresses the input data and fills the specified buffer with compressed data.,"

deflate
public int deflate(byte[] b,
                   int off,
                   int len,
                   int flush)
Compresses the input data and fills the specified buffer with compressed
 data. Returns actual number of bytes of data compressed.

 Compression flush mode is one of the following three modes:

 
NO_FLUSH: allows the deflater to decide how much data
 to accumulate, before producing output, in order to achieve the best
 compression (should be used in normal use scenario). A return value
 of 0 in this flush mode indicates that needsInput() should
 be called in order to determine if more input data is required.

 SYNC_FLUSH: all pending output in the deflater is flushed,
 to the specified output buffer, so that an inflater that works on
 compressed data can get all input data available so far (In particular
 the needsInput() returns true after this invocation
 if enough output space is provided). Flushing with SYNC_FLUSH
 may degrade compression for some compression algorithms and so it
 should be used only when necessary.

 FULL_FLUSH: all pending output is flushed out as with
 SYNC_FLUSH. The compression state is reset so that the inflater
 that works on the compressed output data can restart from this point
 if previous compressed data has been damaged or if random access is
 desired. Using FULL_FLUSH too often can seriously degrade
 compression.
 
In the case of FULL_FLUSH or SYNC_FLUSH, if
 the return value is len, the space available in output
 buffer b, this method should be invoked again with the same
 flush parameter and more output space.

Parameters:
b - the buffer for the compressed data
off - the start offset of the data
len - the maximum number of bytes of compressed data
flush - the compression flush mode
Returns:
the actual number of bytes of compressed data written to
         the output buffer
Throws:
IllegalArgumentException - if the flush mode is invalid
Since:
1.7


"
Deflater,end(),void,Closes the compressor and discards any unprocessed input.,"

end
public void end()
Closes the compressor and discards any unprocessed input.
 This method should be called when the compressor is no longer
 being used, but will also be called automatically by the
 finalize() method. Once this method is called, the behavior
 of the Deflater object is undefined.

"
Deflater,finalize(),protected void,Closes the compressor when garbage is collected.,"

finalize
protected void finalize()
Closes the compressor when garbage is collected.

Overrides:
finalize in class Object
See Also:
WeakReference, 
PhantomReference


"
Deflater,finish(),void,"When called, indicates that compression should end with the current contents of the input buffer.","

finish
public void finish()
When called, indicates that compression should end with the current
 contents of the input buffer.

"
Deflater,finished(),boolean,Returns true if the end of the compressed data output stream has been reached.,"

finished
public boolean finished()
Returns true if the end of the compressed data output stream has
 been reached.

Returns:
true if the end of the compressed data output stream has
 been reached


"
Deflater,getAdler(),int,Returns the ADLER-32 value of the uncompressed data.,"

getAdler
public int getAdler()
Returns the ADLER-32 value of the uncompressed data.

Returns:
the ADLER-32 value of the uncompressed data


"
Deflater,getBytesRead(),long,Returns the total number of uncompressed bytes input so far.,"

getBytesRead
public long getBytesRead()
Returns the total number of uncompressed bytes input so far.

Returns:
the total (non-negative) number of uncompressed bytes input so far
Since:
1.5


"
Deflater,getBytesWritten(),long,Returns the total number of compressed bytes output so far.,"

getBytesWritten
public long getBytesWritten()
Returns the total number of compressed bytes output so far.

Returns:
the total (non-negative) number of compressed bytes output so far
Since:
1.5


"
Deflater,getTotalIn(),int,Returns the total number of uncompressed bytes input so far.,"

getTotalIn
public int getTotalIn()
Returns the total number of uncompressed bytes input so far.

 Since the number of bytes may be greater than
 Integer.MAX_VALUE, the getBytesRead() method is now
 the preferred means of obtaining this information.

Returns:
the total number of uncompressed bytes input so far


"
Deflater,getTotalOut(),int,Returns the total number of compressed bytes output so far.,"

getTotalOut
public int getTotalOut()
Returns the total number of compressed bytes output so far.

 Since the number of bytes may be greater than
 Integer.MAX_VALUE, the getBytesWritten() method is now
 the preferred means of obtaining this information.

Returns:
the total number of compressed bytes output so far


"
Deflater,needsInput(),boolean,Returns true if the input data buffer is empty and setInput() should be called in order to provide more input.,"

needsInput
public boolean needsInput()
Returns true if the input data buffer is empty and setInput()
 should be called in order to provide more input.

Returns:
true if the input data buffer is empty and setInput()
 should be called in order to provide more input


"
Deflater,reset(),void,Resets deflater so that a new set of input data can be processed.,"

reset
public void reset()
Resets deflater so that a new set of input data can be processed.
 Keeps current compression level and strategy settings.

"
Deflater,setDictionary(byte[] b),void,Sets preset dictionary for compression.,"

setDictionary
public void setDictionary(byte[] b)
Sets preset dictionary for compression. A preset dictionary is used
 when the history buffer can be predetermined. When the data is later
 uncompressed with Inflater.inflate(), Inflater.getAdler() can be called
 in order to get the Adler-32 value of the dictionary required for
 decompression.

Parameters:
b - the dictionary data bytes
See Also:
Inflater.inflate(byte[], int, int), 
Inflater.getAdler()


"
Deflater,"setDictionary(byte[] b, int off, int len)",void,Sets preset dictionary for compression.,"

setDictionary
public void setDictionary(byte[] b,
                          int off,
                          int len)
Sets preset dictionary for compression. A preset dictionary is used
 when the history buffer can be predetermined. When the data is later
 uncompressed with Inflater.inflate(), Inflater.getAdler() can be called
 in order to get the Adler-32 value of the dictionary required for
 decompression.

Parameters:
b - the dictionary data bytes
off - the start offset of the data
len - the length of the data
See Also:
Inflater.inflate(byte[], int, int), 
Inflater.getAdler()


"
Deflater,setInput(byte[] b),void,Sets input data for compression.,"

setInput
public void setInput(byte[] b)
Sets input data for compression. This should be called whenever
 needsInput() returns true indicating that more input data is required.

Parameters:
b - the input data bytes
See Also:
needsInput()


"
Deflater,"setInput(byte[] b, int off, int len)",void,Sets input data for compression.,"

setInput
public void setInput(byte[] b,
                     int off,
                     int len)
Sets input data for compression. This should be called whenever
 needsInput() returns true indicating that more input data is required.

Parameters:
b - the input data bytes
off - the start offset of the data
len - the length of the data
See Also:
needsInput()


"
Deflater,setLevel(int level),void,Sets the compression level to the specified value.,"

setLevel
public void setLevel(int level)
Sets the compression level to the specified value.

  If the compression level is changed, the next invocation
 of deflate will compress the input available so far
 with the old level (and may be flushed); the new level will
 take effect only after that invocation.

Parameters:
level - the new compression level (0-9)
Throws:
IllegalArgumentException - if the compression level is invalid


"
Deflater,setStrategy(int strategy),void,Sets the compression strategy to the specified value.,"

setStrategy
public void setStrategy(int strategy)
Sets the compression strategy to the specified value.

  If the compression strategy is changed, the next invocation
 of deflate will compress the input available so far with
 the old strategy (and may be flushed); the new strategy will take
 effect only after that invocation.

Parameters:
strategy - the new compression strategy
Throws:
IllegalArgumentException - if the compression strategy is
                                     invalid


"
DeflaterInputStream,available(),int,"Returns 0 after EOF has been reached, otherwise always return 1.","

available
public int available()
              throws IOException
Returns 0 after EOF has been reached, otherwise always return 1.
 
 Programs should not count on this method to return the actual number
 of bytes that could be read without blocking

Overrides:
available in class FilterInputStream
Returns:
zero after the end of the underlying input stream has been
 reached, otherwise always returns 1
Throws:
IOException - if an I/O error occurs or if this stream is
 already closed


"
DeflaterInputStream,close(),void,"Closes this input stream and its underlying input stream, discarding any pending uncompressed data.","

close
public void close()
           throws IOException
Closes this input stream and its underlying input stream, discarding
 any pending uncompressed data.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class FilterInputStream
Throws:
IOException - if an I/O error occurs
See Also:
FilterInputStream.in


"
DeflaterInputStream,mark(int limit),void,This operation is not supported.,"

mark
public void mark(int limit)
This operation is not supported.

Overrides:
mark in class FilterInputStream
Parameters:
limit - maximum bytes that can be read before invalidating the position marker
See Also:
FilterInputStream.in, 
FilterInputStream.reset()


"
DeflaterInputStream,markSupported(),boolean,Always returns false because this input stream does not support the mark() and reset() methods.,"

markSupported
public boolean markSupported()
Always returns false because this input stream does not support
 the mark() and reset() methods.

Overrides:
markSupported in class FilterInputStream
Returns:
false, always
See Also:
FilterInputStream.in, 
InputStream.mark(int), 
InputStream.reset()


"
DeflaterInputStream,read(),int,Reads a single byte of compressed data from the input stream.,"

read
public int read()
         throws IOException
Reads a single byte of compressed data from the input stream.
 This method will block until some input can be read and compressed.

Overrides:
read in class FilterInputStream
Returns:
a single byte of compressed data, or -1 if the end of the
 uncompressed input stream is reached
Throws:
IOException - if an I/O error occurs or if this stream is
 already closed
See Also:
FilterInputStream.in


"
DeflaterInputStream,"read(byte[] b, int off, int len)",int,Reads compressed data into a byte array.,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads compressed data into a byte array.
 This method will block until some input can be read and compressed.

Overrides:
read in class FilterInputStream
Parameters:
b - buffer into which the data is read
off - starting offset of the data within b
len - maximum number of compressed bytes to read into b
Returns:
the actual number of bytes read, or -1 if the end of the
 uncompressed input stream is reached
Throws:
IndexOutOfBoundsException - if len > b.length - off
IOException - if an I/O error occurs or if this input stream is
 already closed
See Also:
FilterInputStream.in


"
DeflaterInputStream,reset(),void,This operation is not supported.,"

reset
public void reset()
           throws IOException
This operation is not supported.

Overrides:
reset in class FilterInputStream
Throws:
IOException - always thrown
See Also:
FilterInputStream.in, 
FilterInputStream.mark(int)


"
DeflaterInputStream,skip(long n),long,Skips over and discards data from the input stream.,"

skip
public long skip(long n)
          throws IOException
Skips over and discards data from the input stream.
 This method may block until the specified number of bytes are read and
 skipped. Note: While n is given as a long,
 the maximum number of bytes which can be skipped is
 Integer.MAX_VALUE.

Overrides:
skip in class FilterInputStream
Parameters:
n - number of bytes to be skipped
Returns:
the actual number of bytes skipped
Throws:
IOException - if an I/O error occurs or if this stream is
 already closed


"
DeflaterOutputStream,close(),void,Writes remaining compressed data to the output stream and closes the underlying stream.,"

close
public void close()
           throws IOException
Writes remaining compressed data to the output stream and closes the
 underlying stream.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class FilterOutputStream
Throws:
IOException - if an I/O error has occurred
See Also:
FilterOutputStream.flush(), 
FilterOutputStream.out


"
DeflaterOutputStream,deflate(),protected void,Writes next block of compressed data to the output stream.,"

deflate
protected void deflate()
                throws IOException
Writes next block of compressed data to the output stream.

Throws:
IOException - if an I/O error has occurred


"
DeflaterOutputStream,finish(),void,Finishes writing compressed data to the output stream without closing the underlying stream.,"

finish
public void finish()
            throws IOException
Finishes writing compressed data to the output stream without closing
 the underlying stream. Use this method when applying multiple filters
 in succession to the same output stream.

Throws:
IOException - if an I/O error has occurred


"
DeflaterOutputStream,flush(),void,Flushes the compressed output stream.,"

flush
public void flush()
           throws IOException
Flushes the compressed output stream.

 If syncFlush is true when this compressed output stream is
 constructed, this method first flushes the underlying compressor
 with the flush mode Deflater.SYNC_FLUSH to force
 all pending data to be flushed out to the output stream and then
 flushes the output stream. Otherwise this method only flushes the
 output stream without flushing the compressor.

Specified by:
flush in interface Flushable
Overrides:
flush in class FilterOutputStream
Throws:
IOException - if an I/O error has occurred
Since:
1.7
See Also:
FilterOutputStream.out


"
DeflaterOutputStream,"write(byte[] b, int off, int len)",void,Writes an array of bytes to the compressed output stream.,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Writes an array of bytes to the compressed output stream. This
 method will block until all the bytes are written.

Overrides:
write in class FilterOutputStream
Parameters:
b - the data to be written
off - the start offset of the data
len - the length of the data
Throws:
IOException - if an I/O error has occurred
See Also:
FilterOutputStream.write(int)


"
DeflaterOutputStream,write(int b),void,Writes a byte to the compressed output stream.,"

write
public void write(int b)
           throws IOException
Writes a byte to the compressed output stream. This method will
 block until the byte can be written.

Overrides:
write in class FilterOutputStream
Parameters:
b - the byte to be written
Throws:
IOException - if an I/O error has occurred


"
GZIPInputStream,close(),void,Closes this input stream and releases any system resources associated with the stream.,"

close
public void close()
           throws IOException
Closes this input stream and releases any system resources associated
 with the stream.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class InflaterInputStream
Throws:
IOException - if an I/O error has occurred
See Also:
FilterInputStream.in


"
GZIPInputStream,"read(byte[] buf, int off, int len)",int,Reads uncompressed data into an array of bytes.,"

read
public int read(byte[] buf,
                int off,
                int len)
         throws IOException
Reads uncompressed data into an array of bytes. If len is not
 zero, the method will block until some input can be decompressed; otherwise,
 no bytes are read and 0 is returned.

Overrides:
read in class InflaterInputStream
Parameters:
buf - the buffer into which the data is read
off - the start offset in the destination array b
len - the maximum number of bytes read
Returns:
the actual number of bytes read, or -1 if the end of the
          compressed input stream is reached
Throws:
NullPointerException - If buf is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 buf.length - off
ZipException - if the compressed input data is corrupt.
IOException - if an I/O error has occurred.
See Also:
FilterInputStream.in


"
GZIPOutputStream,finish(),void,Finishes writing compressed data to the output stream without closing the underlying stream.,"

finish
public void finish()
            throws IOException
Finishes writing compressed data to the output stream without closing
 the underlying stream. Use this method when applying multiple filters
 in succession to the same output stream.

Overrides:
finish in class DeflaterOutputStream
Throws:
IOException - if an I/O error has occurred


"
GZIPOutputStream,"write(byte[] buf, int off, int len)",void,Writes array of bytes to the compressed output stream.,"

write
public void write(byte[] buf,
                  int off,
                  int len)
           throws IOException
Writes array of bytes to the compressed output stream. This method
 will block until all the bytes are written.

Overrides:
write in class DeflaterOutputStream
Parameters:
buf - the data to be written
off - the start offset of the data
len - the length of the data
Throws:
IOException - If an I/O error has occurred.
See Also:
FilterOutputStream.write(int)


"
Inflater,end(),void,Closes the decompressor and discards any unprocessed input.,"

end
public void end()
Closes the decompressor and discards any unprocessed input.
 This method should be called when the decompressor is no longer
 being used, but will also be called automatically by the finalize()
 method. Once this method is called, the behavior of the Inflater
 object is undefined.

"
Inflater,finalize(),protected void,Closes the decompressor when garbage is collected.,"

finalize
protected void finalize()
Closes the decompressor when garbage is collected.

Overrides:
finalize in class Object
See Also:
WeakReference, 
PhantomReference


"
Inflater,finished(),boolean,Returns true if the end of the compressed data stream has been reached.,"

finished
public boolean finished()
Returns true if the end of the compressed data stream has been
 reached.

Returns:
true if the end of the compressed data stream has been
 reached


"
Inflater,getAdler(),int,Returns the ADLER-32 value of the uncompressed data.,"

getAdler
public int getAdler()
Returns the ADLER-32 value of the uncompressed data.

Returns:
the ADLER-32 value of the uncompressed data


"
Inflater,getBytesRead(),long,Returns the total number of compressed bytes input so far.,"

getBytesRead
public long getBytesRead()
Returns the total number of compressed bytes input so far.

Returns:
the total (non-negative) number of compressed bytes input so far
Since:
1.5


"
Inflater,getBytesWritten(),long,Returns the total number of uncompressed bytes output so far.,"

getBytesWritten
public long getBytesWritten()
Returns the total number of uncompressed bytes output so far.

Returns:
the total (non-negative) number of uncompressed bytes output so far
Since:
1.5


"
Inflater,getRemaining(),int,Returns the total number of bytes remaining in the input buffer.,"

getRemaining
public int getRemaining()
Returns the total number of bytes remaining in the input buffer.
 This can be used to find out what bytes still remain in the input
 buffer after decompression has finished.

Returns:
the total number of bytes remaining in the input buffer


"
Inflater,getTotalIn(),int,Returns the total number of compressed bytes input so far.,"

getTotalIn
public int getTotalIn()
Returns the total number of compressed bytes input so far.

 Since the number of bytes may be greater than
 Integer.MAX_VALUE, the getBytesRead() method is now
 the preferred means of obtaining this information.

Returns:
the total number of compressed bytes input so far


"
Inflater,getTotalOut(),int,Returns the total number of uncompressed bytes output so far.,"

getTotalOut
public int getTotalOut()
Returns the total number of uncompressed bytes output so far.

 Since the number of bytes may be greater than
 Integer.MAX_VALUE, the getBytesWritten() method is now
 the preferred means of obtaining this information.

Returns:
the total number of uncompressed bytes output so far


"
Inflater,inflate(byte[] b),int,Uncompresses bytes into specified buffer.,"

inflate
public int inflate(byte[] b)
            throws DataFormatException
Uncompresses bytes into specified buffer. Returns actual number
 of bytes uncompressed. A return value of 0 indicates that
 needsInput() or needsDictionary() should be called in order to
 determine if more input data or a preset dictionary is required.
 In the latter case, getAdler() can be used to get the Adler-32
 value of the dictionary required.

Parameters:
b - the buffer for the uncompressed data
Returns:
the actual number of uncompressed bytes
Throws:
DataFormatException - if the compressed data format is invalid
See Also:
needsInput(), 
needsDictionary()


"
Inflater,"inflate(byte[] b, int off, int len)",int,Uncompresses bytes into specified buffer.,"

inflate
public int inflate(byte[] b,
                   int off,
                   int len)
            throws DataFormatException
Uncompresses bytes into specified buffer. Returns actual number
 of bytes uncompressed. A return value of 0 indicates that
 needsInput() or needsDictionary() should be called in order to
 determine if more input data or a preset dictionary is required.
 In the latter case, getAdler() can be used to get the Adler-32
 value of the dictionary required.

Parameters:
b - the buffer for the uncompressed data
off - the start offset of the data
len - the maximum number of uncompressed bytes
Returns:
the actual number of uncompressed bytes
Throws:
DataFormatException - if the compressed data format is invalid
See Also:
needsInput(), 
needsDictionary()


"
Inflater,needsDictionary(),boolean,Returns true if a preset dictionary is needed for decompression.,"

needsDictionary
public boolean needsDictionary()
Returns true if a preset dictionary is needed for decompression.

Returns:
true if a preset dictionary is needed for decompression
See Also:
setDictionary(byte[], int, int)


"
Inflater,needsInput(),boolean,Returns true if no data remains in the input buffer.,"

needsInput
public boolean needsInput()
Returns true if no data remains in the input buffer. This can
 be used to determine if #setInput should be called in order
 to provide more input.

Returns:
true if no data remains in the input buffer


"
Inflater,reset(),void,Resets inflater so that a new set of input data can be processed.,"

reset
public void reset()
Resets inflater so that a new set of input data can be processed.

"
Inflater,setDictionary(byte[] b),void,Sets the preset dictionary to the given array of bytes.,"

setDictionary
public void setDictionary(byte[] b)
Sets the preset dictionary to the given array of bytes. Should be
 called when inflate() returns 0 and needsDictionary() returns true
 indicating that a preset dictionary is required. The method getAdler()
 can be used to get the Adler-32 value of the dictionary needed.

Parameters:
b - the dictionary data bytes
See Also:
needsDictionary(), 
getAdler()


"
Inflater,"setDictionary(byte[] b, int off, int len)",void,Sets the preset dictionary to the given array of bytes.,"

setDictionary
public void setDictionary(byte[] b,
                          int off,
                          int len)
Sets the preset dictionary to the given array of bytes. Should be
 called when inflate() returns 0 and needsDictionary() returns true
 indicating that a preset dictionary is required. The method getAdler()
 can be used to get the Adler-32 value of the dictionary needed.

Parameters:
b - the dictionary data bytes
off - the start offset of the data
len - the length of the data
See Also:
needsDictionary(), 
getAdler()


"
Inflater,setInput(byte[] b),void,Sets input data for decompression.,"

setInput
public void setInput(byte[] b)
Sets input data for decompression. Should be called whenever
 needsInput() returns true indicating that more input data is
 required.

Parameters:
b - the input data bytes
See Also:
needsInput()


"
Inflater,"setInput(byte[] b, int off, int len)",void,Sets input data for decompression.,"

setInput
public void setInput(byte[] b,
                     int off,
                     int len)
Sets input data for decompression. Should be called whenever
 needsInput() returns true indicating that more input data is
 required.

Parameters:
b - the input data bytes
off - the start offset of the input data
len - the length of the input data
See Also:
needsInput()


"
InflaterInputStream,available(),int,"Returns 0 after EOF has been reached, otherwise always return 1.","

available
public int available()
              throws IOException
Returns 0 after EOF has been reached, otherwise always return 1.
 
 Programs should not count on this method to return the actual number
 of bytes that could be read without blocking.

Overrides:
available in class FilterInputStream
Returns:
1 before EOF and 0 after EOF.
Throws:
IOException - if an I/O error occurs.


"
InflaterInputStream,close(),void,Closes this input stream and releases any system resources associated with the stream.,"

close
public void close()
           throws IOException
Closes this input stream and releases any system resources associated
 with the stream.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class FilterInputStream
Throws:
IOException - if an I/O error has occurred
See Also:
FilterInputStream.in


"
InflaterInputStream,fill(),protected void,Fills input buffer with more data to decompress.,"

fill
protected void fill()
             throws IOException
Fills input buffer with more data to decompress.

Throws:
IOException - if an I/O error has occurred


"
InflaterInputStream,mark(int readlimit),void,Marks the current position in this input stream.,"

mark
public void mark(int readlimit)
Marks the current position in this input stream.

  The mark method of InflaterInputStream
 does nothing.

Overrides:
mark in class FilterInputStream
Parameters:
readlimit - the maximum limit of bytes that can be read before
                      the mark position becomes invalid.
See Also:
InputStream.reset()


"
InflaterInputStream,markSupported(),boolean,Tests if this input stream supports the mark and reset methods.,"

markSupported
public boolean markSupported()
Tests if this input stream supports the mark and
 reset methods. The markSupported
 method of InflaterInputStream returns
 false.

Overrides:
markSupported in class FilterInputStream
Returns:
a boolean indicating if this stream type supports
          the mark and reset methods.
See Also:
InputStream.mark(int), 
InputStream.reset()


"
InflaterInputStream,read(),int,Reads a byte of uncompressed data.,"

read
public int read()
         throws IOException
Reads a byte of uncompressed data. This method will block until
 enough input is available for decompression.

Overrides:
read in class FilterInputStream
Returns:
the byte read, or -1 if end of compressed input is reached
Throws:
IOException - if an I/O error has occurred
See Also:
FilterInputStream.in


"
InflaterInputStream,"read(byte[] b, int off, int len)",int,Reads uncompressed data into an array of bytes.,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads uncompressed data into an array of bytes. If len is not
 zero, the method will block until some input can be decompressed; otherwise,
 no bytes are read and 0 is returned.

Overrides:
read in class FilterInputStream
Parameters:
b - the buffer into which the data is read
off - the start offset in the destination array b
len - the maximum number of bytes read
Returns:
the actual number of bytes read, or -1 if the end of the
         compressed input is reached or a preset dictionary is needed
Throws:
NullPointerException - If b is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 b.length - off
ZipException - if a ZIP format error has occurred
IOException - if an I/O error has occurred
See Also:
FilterInputStream.in


"
InflaterInputStream,reset(),void,Repositions this stream to the position at the time the mark method was last called on this input stream.,"

reset
public void reset()
           throws IOException
Repositions this stream to the position at the time the
 mark method was last called on this input stream.

  The method reset for class
 InflaterInputStream does nothing except throw an
 IOException.

Overrides:
reset in class FilterInputStream
Throws:
IOException - if this method is invoked.
See Also:
InputStream.mark(int), 
IOException


"
InflaterInputStream,skip(long n),long,Skips specified number of bytes of uncompressed data.,"

skip
public long skip(long n)
          throws IOException
Skips specified number of bytes of uncompressed data.

Overrides:
skip in class FilterInputStream
Parameters:
n - the number of bytes to skip
Returns:
the actual number of bytes skipped.
Throws:
IOException - if an I/O error has occurred
IllegalArgumentException - if n < 0


"
InflaterOutputStream,close(),void,Writes any remaining uncompressed data to the output stream and closes the underlying output stream.,"

close
public void close()
           throws IOException
Writes any remaining uncompressed data to the output stream and closes
 the underlying output stream.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class FilterOutputStream
Throws:
IOException - if an I/O error occurs
See Also:
FilterOutputStream.flush(), 
FilterOutputStream.out


"
InflaterOutputStream,finish(),void,Finishes writing uncompressed data to the output stream without closing the underlying stream.,"

finish
public void finish()
            throws IOException
Finishes writing uncompressed data to the output stream without closing
 the underlying stream.  Use this method when applying multiple filters in
 succession to the same output stream.

Throws:
IOException - if an I/O error occurs or this stream is already
 closed


"
InflaterOutputStream,flush(),void,"Flushes this output stream, forcing any pending buffered output bytes to be written.","

flush
public void flush()
           throws IOException
Flushes this output stream, forcing any pending buffered output bytes to be
 written.

Specified by:
flush in interface Flushable
Overrides:
flush in class FilterOutputStream
Throws:
IOException - if an I/O error occurs or this stream is already
 closed
See Also:
FilterOutputStream.out


"
InflaterOutputStream,"write(byte[] b, int off, int len)",void,Writes an array of bytes to the uncompressed output stream.,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Writes an array of bytes to the uncompressed output stream.

Overrides:
write in class FilterOutputStream
Parameters:
b - buffer containing compressed data to decompress and write to
 the output stream
off - starting offset of the compressed data within b
len - number of bytes to decompress from b
Throws:
IndexOutOfBoundsException - if off < 0, or if
 len < 0, or if len > b.length - off
IOException - if an I/O error occurs or this stream is already
 closed
NullPointerException - if b is null
ZipException - if a compression (ZIP) format error occurs
See Also:
FilterOutputStream.write(int)


"
InflaterOutputStream,write(int b),void,Writes a byte to the uncompressed output stream.,"

write
public void write(int b)
           throws IOException
Writes a byte to the uncompressed output stream.

Overrides:
write in class FilterOutputStream
Parameters:
b - a single byte of compressed data to decompress and write to
 the output stream
Throws:
IOException - if an I/O error occurs or this stream is already
 closed
ZipException - if a compression (ZIP) format error occurs


"
ZipEntry,clone(),Object,Returns a copy of this entry.,"

clone
public Object clone()
Returns a copy of this entry.

Overrides:
clone in class Object
Returns:
a clone of this instance.
See Also:
Cloneable


"
ZipEntry,getComment(),String,Returns the comment string for the entry.,"

getComment
public String getComment()
Returns the comment string for the entry.

Returns:
the comment string for the entry, or null if none
See Also:
setComment(String)


"
ZipEntry,getCompressedSize(),long,Returns the size of the compressed entry data.,"

getCompressedSize
public long getCompressedSize()
Returns the size of the compressed entry data.

  In the case of a stored entry, the compressed size will be the same
 as the uncompressed size of the entry.

Returns:
the size of the compressed entry data, or -1 if not known
See Also:
setCompressedSize(long)


"
ZipEntry,getCrc(),long,Returns the CRC-32 checksum of the uncompressed entry data.,"

getCrc
public long getCrc()
Returns the CRC-32 checksum of the uncompressed entry data.

Returns:
the CRC-32 checksum of the uncompressed entry data, or -1 if
 not known
See Also:
setCrc(long)


"
ZipEntry,getCreationTime(),FileTime,Returns the creation time of the entry.,"

getCreationTime
public FileTime getCreationTime()
Returns the creation time of the entry.

  The creation time is from the extended timestamp fields of
 entry's optional extra data when read from a ZIP file
 or ZIP file formatted stream.

Returns:
the creation time of the entry, null if not specified
Since:
1.8
See Also:
setCreationTime(FileTime)


"
ZipEntry,getExtra(),byte[],Returns the extra field data for the entry.,"

getExtra
public byte[] getExtra()
Returns the extra field data for the entry.

Returns:
the extra field data for the entry, or null if none
See Also:
setExtra(byte[])


"
ZipEntry,getLastAccessTime(),FileTime,Returns the last access time of the entry.,"

getLastAccessTime
public FileTime getLastAccessTime()
Returns the last access time of the entry.

  The last access time is from the extended timestamp fields
 of entry's optional extra data when read from a ZIP file
 or ZIP file formatted stream.

Returns:
The last access time of the entry, null if not specified
Since:
1.8
See Also:
setLastAccessTime(FileTime)


"
ZipEntry,getLastModifiedTime(),FileTime,Returns the last modification time of the entry.,"

getLastModifiedTime
public FileTime getLastModifiedTime()
Returns the last modification time of the entry.

  If the entry is read from a ZIP file or ZIP file formatted
 input stream, this is the last modification time from the zip
 file entry's optional extra data if the extended timestamp
 fields are present. Otherwise the last modification time is read
 from the entry's date and time fields, the default TimeZone is used to convert
 the standard MS-DOS formatted date and time to the epoch time.

Returns:
The last modification time of the entry, null if not specified
Since:
1.8
See Also:
setLastModifiedTime(FileTime)


"
ZipEntry,getMethod(),int,Returns the compression method of the entry.,"

getMethod
public int getMethod()
Returns the compression method of the entry.

Returns:
the compression method of the entry, or -1 if not specified
See Also:
setMethod(int)


"
ZipEntry,getName(),String,Returns the name of the entry.,"

getName
public String getName()
Returns the name of the entry.

Returns:
the name of the entry


"
ZipEntry,getSize(),long,Returns the uncompressed size of the entry data.,"

getSize
public long getSize()
Returns the uncompressed size of the entry data.

Returns:
the uncompressed size of the entry data, or -1 if not known
See Also:
setSize(long)


"
ZipEntry,getTime(),long,Returns the last modification time of the entry.,"

getTime
public long getTime()
Returns the last modification time of the entry.

  If the entry is read from a ZIP file or ZIP file formatted
 input stream, this is the last modification time from the date and time fields of the zip file entry. The
 default TimeZone is used
 to convert the standard MS-DOS formatted date and time to the
 epoch time.

Returns:
The last modification time of the entry in milliseconds
          since the epoch, or -1 if not specified
See Also:
setTime(long), 
setLastModifiedTime(FileTime)


"
ZipEntry,hashCode(),int,Returns the hash code value for this entry.,"

hashCode
public int hashCode()
Returns the hash code value for this entry.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
ZipEntry,isDirectory(),boolean,Returns true if this is a directory entry.,"

isDirectory
public boolean isDirectory()
Returns true if this is a directory entry. A directory entry is
 defined to be one whose name ends with a '/'.

Returns:
true if this is a directory entry


"
ZipEntry,setComment(String comment),void,Sets the optional comment string for the entry.,"

setComment
public void setComment(String comment)
Sets the optional comment string for the entry.

 ZIP entry comments have maximum length of 0xffff. If the length of the
 specified comment string is greater than 0xFFFF bytes after encoding, only
 the first 0xFFFF bytes are output to the ZIP file entry.

Parameters:
comment - the comment string
See Also:
getComment()


"
ZipEntry,setCompressedSize(long csize),void,Sets the size of the compressed entry data.,"

setCompressedSize
public void setCompressedSize(long csize)
Sets the size of the compressed entry data.

Parameters:
csize - the compressed size to set to
See Also:
getCompressedSize()


"
ZipEntry,setCrc(long crc),void,Sets the CRC-32 checksum of the uncompressed entry data.,"

setCrc
public void setCrc(long crc)
Sets the CRC-32 checksum of the uncompressed entry data.

Parameters:
crc - the CRC-32 value
Throws:
IllegalArgumentException - if the specified CRC-32 value is
         less than 0 or greater than 0xFFFFFFFF
See Also:
getCrc()


"
ZipEntry,setCreationTime(FileTime time),ZipEntry,Sets the creation time of the entry.,"

setCreationTime
public ZipEntry setCreationTime(FileTime time)
Sets the creation time of the entry.

  If set, the creation time will be stored into the extended
 timestamp fields of entry's optional extra data, when
 output to a ZIP file or ZIP file formatted stream.

Parameters:
time - The creation time of the entry
Returns:
This zip entry
Throws:
NullPointerException - if the time is null
Since:
1.8
See Also:
getCreationTime()


"
ZipEntry,setExtra(byte[] extra),void,Sets the optional extra field data for the entry.,"

setExtra
public void setExtra(byte[] extra)
Sets the optional extra field data for the entry.

  Invoking this method may change this entry's last modification
 time, last access time and creation time, if the extra field
 data includes the extensible timestamp fields, such as NTFS tag
 0x0001 or Info-ZIP Extended Timestamp, as specified in
 Info-ZIP
 Application Note 970311.

Parameters:
extra - The extra field data bytes
Throws:
IllegalArgumentException - if the length of the specified
         extra field data is greater than 0xFFFF bytes
See Also:
getExtra()


"
ZipEntry,setLastAccessTime(FileTime time),ZipEntry,Sets the last access time of the entry.,"

setLastAccessTime
public ZipEntry setLastAccessTime(FileTime time)
Sets the last access time of the entry.

  If set, the last access time will be stored into the extended
 timestamp fields of entry's optional extra data, when output
 to a ZIP file or ZIP file formatted stream.

Parameters:
time - The last access time of the entry
Returns:
This zip entry
Throws:
NullPointerException - if the time is null
Since:
1.8
See Also:
getLastAccessTime()


"
ZipEntry,setLastModifiedTime(FileTime time),ZipEntry,Sets the last modification time of the entry.,"

setLastModifiedTime
public ZipEntry setLastModifiedTime(FileTime time)
Sets the last modification time of the entry.

  When output to a ZIP file or ZIP file formatted output stream
 the last modification time set by this method will be stored into
 zip file entry's date and time fields in standard
 MS-DOS date and time format), and the extended timestamp fields
 in optional extra data in UTC time.

Parameters:
time - The last modification time of the entry
Returns:
This zip entry
Throws:
NullPointerException - if the time is null
Since:
1.8
See Also:
getLastModifiedTime()


"
ZipEntry,setMethod(int method),void,Sets the compression method for the entry.,"

setMethod
public void setMethod(int method)
Sets the compression method for the entry.

Parameters:
method - the compression method, either STORED or DEFLATED
Throws:
IllegalArgumentException - if the specified compression
          method is invalid
See Also:
getMethod()


"
ZipEntry,setSize(long size),void,Sets the uncompressed size of the entry data.,"

setSize
public void setSize(long size)
Sets the uncompressed size of the entry data.

Parameters:
size - the uncompressed size in bytes
Throws:
IllegalArgumentException - if the specified size is less
         than 0, is greater than 0xFFFFFFFF when
         ZIP64 format is not supported,
         or is less than 0 when ZIP64 is supported
See Also:
getSize()


"
ZipEntry,setTime(long time),void,Sets the last modification time of the entry.,"

setTime
public void setTime(long time)
Sets the last modification time of the entry.

  If the entry is output to a ZIP file or ZIP file formatted
 output stream the last modification time set by this method will
 be stored into the date and time fields of the zip file
 entry and encoded in standard MS-DOS date and time format.
 The default TimeZone is
 used to convert the epoch time to the MS-DOS data and time.

Parameters:
time - The last modification time of the entry in milliseconds
         since the epoch
See Also:
getTime(), 
getLastModifiedTime()


"
ZipEntry,toString(),String,Returns a string representation of the ZIP entry.,"

toString
public String toString()
Returns a string representation of the ZIP entry.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
ZipFile,close(),void,Closes the ZIP file.,"

close
public void close()
           throws IOException
Closes the ZIP file.
  Closing this ZIP file will close all of the input streams
 previously returned by invocations of the getInputStream method.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Throws:
IOException - if an I/O error has occurred


"
ZipFile,entries(),Enumeration<? extends ZipEntry>,Returns an enumeration of the ZIP file entries.,"

entries
public Enumeration<? extends ZipEntry> entries()
Returns an enumeration of the ZIP file entries.

Returns:
an enumeration of the ZIP file entries
Throws:
IllegalStateException - if the zip file has been closed


"
ZipFile,finalize(),protected void,Ensures that the system resources held by this ZipFile object are released when there are no more references to it.,"

finalize
protected void finalize()
                 throws IOException
Ensures that the system resources held by this ZipFile object are
 released when there are no more references to it.

 
 Since the time when GC would invoke this method is undetermined,
 it is strongly recommended that applications invoke the close
 method as soon they have finished accessing this ZipFile.
 This will prevent holding up system resources for an undetermined
 length of time.

Overrides:
finalize in class Object
Throws:
IOException - if an I/O error has occurred
See Also:
close()


"
ZipFile,getComment(),String,"Returns the zip file comment, or null if none.","

getComment
public String getComment()
Returns the zip file comment, or null if none.

Returns:
the comment string for the zip file, or null if none
Throws:
IllegalStateException - if the zip file has been closed

 Since 1.7


"
ZipFile,getEntry(String name),ZipEntry,"Returns the zip file entry for the specified name, or null if not found.","

getEntry
public ZipEntry getEntry(String name)
Returns the zip file entry for the specified name, or null
 if not found.

Parameters:
name - the name of the entry
Returns:
the zip file entry, or null if not found
Throws:
IllegalStateException - if the zip file has been closed


"
ZipFile,getInputStream(ZipEntry entry),InputStream,Returns an input stream for reading the contents of the specified zip file entry.,"

getInputStream
public InputStream getInputStream(ZipEntry entry)
                           throws IOException
Returns an input stream for reading the contents of the specified
 zip file entry.

  Closing this ZIP file will, in turn, close all input
 streams that have been returned by invocations of this method.

Parameters:
entry - the zip file entry
Returns:
the input stream for reading the contents of the specified
 zip file entry.
Throws:
ZipException - if a ZIP format error has occurred
IOException - if an I/O error has occurred
IllegalStateException - if the zip file has been closed


"
ZipFile,getName(),String,Returns the path name of the ZIP file.,"

getName
public String getName()
Returns the path name of the ZIP file.

Returns:
the path name of the ZIP file


"
ZipFile,size(),int,Returns the number of entries in the ZIP file.,"

size
public int size()
Returns the number of entries in the ZIP file.

Returns:
the number of entries in the ZIP file
Throws:
IllegalStateException - if the zip file has been closed


"
ZipFile,stream(),Stream<? extends ZipEntry>,Return an ordered Stream over the ZIP file entries.,"

stream
public Stream<? extends ZipEntry> stream()
Return an ordered Stream over the ZIP file entries.
 Entries appear in the Stream in the order they appear in
 the central directory of the ZIP file.

Returns:
an ordered Stream of entries in this ZIP file
Throws:
IllegalStateException - if the zip file has been closed
Since:
1.8


"
ZipInputStream,available(),int,"Returns 0 after EOF has reached for the current entry data, otherwise always return 1.","

available
public int available()
              throws IOException
Returns 0 after EOF has reached for the current entry data,
 otherwise always return 1.
 
 Programs should not count on this method to return the actual number
 of bytes that could be read without blocking.

Overrides:
available in class InflaterInputStream
Returns:
1 before EOF and 0 after EOF has reached for current entry.
Throws:
IOException - if an I/O error occurs.


"
ZipInputStream,close(),void,Closes this input stream and releases any system resources associated with the stream.,"

close
public void close()
           throws IOException
Closes this input stream and releases any system resources associated
 with the stream.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class InflaterInputStream
Throws:
IOException - if an I/O error has occurred
See Also:
FilterInputStream.in


"
ZipInputStream,closeEntry(),void,Closes the current ZIP entry and positions the stream for reading the next entry.,"

closeEntry
public void closeEntry()
                throws IOException
Closes the current ZIP entry and positions the stream for reading the
 next entry.

Throws:
ZipException - if a ZIP file error has occurred
IOException - if an I/O error has occurred


"
ZipInputStream,createZipEntry(String name),protected ZipEntry,Creates a new ZipEntry object for the specified entry name.,"

createZipEntry
protected ZipEntry createZipEntry(String name)
Creates a new ZipEntry object for the specified
 entry name.

Parameters:
name - the ZIP file entry name
Returns:
the ZipEntry just created


"
ZipInputStream,getNextEntry(),ZipEntry,Reads the next ZIP file entry and positions the stream at the beginning of the entry data.,"

getNextEntry
public ZipEntry getNextEntry()
                      throws IOException
Reads the next ZIP file entry and positions the stream at the
 beginning of the entry data.

Returns:
the next ZIP file entry, or null if there are no more entries
Throws:
ZipException - if a ZIP file error has occurred
IOException - if an I/O error has occurred


"
ZipInputStream,"read(byte[] b, int off, int len)",int,Reads from the current ZIP entry into an array of bytes.,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads from the current ZIP entry into an array of bytes.
 If len is not zero, the method
 blocks until some input is available; otherwise, no
 bytes are read and 0 is returned.

Overrides:
read in class InflaterInputStream
Parameters:
b - the buffer into which the data is read
off - the start offset in the destination array b
len - the maximum number of bytes read
Returns:
the actual number of bytes read, or -1 if the end of the
         entry is reached
Throws:
NullPointerException - if b is null.
IndexOutOfBoundsException - if off is negative,
 len is negative, or len is greater than
 b.length - off
ZipException - if a ZIP file error has occurred
IOException - if an I/O error has occurred
See Also:
FilterInputStream.in


"
ZipInputStream,skip(long n),long,Skips specified number of bytes in the current ZIP entry.,"

skip
public long skip(long n)
          throws IOException
Skips specified number of bytes in the current ZIP entry.

Overrides:
skip in class InflaterInputStream
Parameters:
n - the number of bytes to skip
Returns:
the actual number of bytes skipped
Throws:
ZipException - if a ZIP file error has occurred
IOException - if an I/O error has occurred
IllegalArgumentException - if n < 0


"
ZipOutputStream,close(),void,Closes the ZIP output stream as well as the stream being filtered.,"

close
public void close()
           throws IOException
Closes the ZIP output stream as well as the stream being filtered.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class DeflaterOutputStream
Throws:
ZipException - if a ZIP file error has occurred
IOException - if an I/O error has occurred
See Also:
FilterOutputStream.flush(), 
FilterOutputStream.out


"
ZipOutputStream,closeEntry(),void,Closes the current ZIP entry and positions the stream for writing the next entry.,"

closeEntry
public void closeEntry()
                throws IOException
Closes the current ZIP entry and positions the stream for writing
 the next entry.

Throws:
ZipException - if a ZIP format error has occurred
IOException - if an I/O error has occurred


"
ZipOutputStream,finish(),void,Finishes writing the contents of the ZIP output stream without closing the underlying stream.,"

finish
public void finish()
            throws IOException
Finishes writing the contents of the ZIP output stream without closing
 the underlying stream. Use this method when applying multiple filters
 in succession to the same output stream.

Overrides:
finish in class DeflaterOutputStream
Throws:
ZipException - if a ZIP file error has occurred
IOException - if an I/O exception has occurred


"
ZipOutputStream,putNextEntry(ZipEntry e),void,Begins writing a new ZIP file entry and positions the stream to the start of the entry data.,"

putNextEntry
public void putNextEntry(ZipEntry e)
                  throws IOException
Begins writing a new ZIP file entry and positions the stream to the
 start of the entry data. Closes the current entry if still active.
 The default compression method will be used if no compression method
 was specified for the entry, and the current time will be used if
 the entry has no set modification time.

Parameters:
e - the ZIP entry to be written
Throws:
ZipException - if a ZIP format error has occurred
IOException - if an I/O error has occurred


"
ZipOutputStream,setComment(String comment),void,Sets the ZIP file comment.,"

setComment
public void setComment(String comment)
Sets the ZIP file comment.

Parameters:
comment - the comment string
Throws:
IllegalArgumentException - if the length of the specified
            ZIP file comment is greater than 0xFFFF bytes


"
ZipOutputStream,setLevel(int level),void,Sets the compression level for subsequent entries which are DEFLATED.,"

setLevel
public void setLevel(int level)
Sets the compression level for subsequent entries which are DEFLATED.
 The default setting is DEFAULT_COMPRESSION.

Parameters:
level - the compression level (0-9)
Throws:
IllegalArgumentException - if the compression level is invalid


"
ZipOutputStream,setMethod(int method),void,Sets the default compression method for subsequent entries.,"

setMethod
public void setMethod(int method)
Sets the default compression method for subsequent entries. This
 default will be used whenever the compression method is not specified
 for an individual ZIP file entry, and is initially set to DEFLATED.

Parameters:
method - the default compression method
Throws:
IllegalArgumentException - if the specified compression method
            is invalid


"
ZipOutputStream,"write(byte[] b, int off, int len)",void,Writes an array of bytes to the current ZIP entry data.,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Writes an array of bytes to the current ZIP entry data. This method
 will block until all the bytes are written.

Overrides:
write in class DeflaterOutputStream
Parameters:
b - the data to be written
off - the start offset in the data
len - the number of bytes that are written
Throws:
ZipException - if a ZIP file error has occurred
IOException - if an I/O error has occurred
See Also:
FilterOutputStream.write(int)


"
