Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,Adler32,1,long getValue(),True,Returns the checksum value.,"

getValue
public long getValue()
Returns the checksum value.

Specified by:
getValue in interface Checksum
Returns:
the current checksum value


"
0,Adler32,2,void reset(),True,Resets the checksum to initial value.,"

reset
public void reset()
Resets the checksum to initial value.

Specified by:
reset in interface Checksum


"
0,Adler32,3,void update(int b),True,Updates the checksum with the specified byte (the low eight bits of the argument b).,"

update
public void update(int b)
Updates the checksum with the specified byte (the low eight
 bits of the argument b).

Specified by:
update in interface Checksum
Parameters:
b - the byte to update the checksum with


"
0,Adler32,4,"void update(byte[] b, int off, int len)",True,Updates the checksum with the specified array of bytes.,"

update
public void update(byte[] b,
                   int off,
                   int len)
Updates the checksum with the specified array of bytes.

Specified by:
update in interface Checksum
Parameters:
b - the byte array to update the checksum with
off - the start offset of the data
len - the number of bytes to use for the update
Throws:
ArrayIndexOutOfBoundsException - if off is negative, or len is negative,
          or off+len is greater than the length of the
          array b


"
0,Adler32,5,void update(byte[] b),True,Updates the checksum with the specified array of bytes.,"

update
public void update(byte[] b)
Updates the checksum with the specified array of bytes.

Parameters:
b - the byte array to update the checksum with


"
1,CheckedInputStream,1,"CheckedInputStream(InputStream in, Checksum ck)",False,,NULL
1,CheckedInputStream,2,int read(),True,Reads a byte.,"

read
public int read()
         throws IOException
Reads a byte. Will block if no input is available.

Overrides:
read in class FilterInputStream
Returns:
the byte read, or -1 if the end of the stream is reached.
Throws:
IOException - if an I/O error has occurred
See Also:
FilterInputStream.in


"
1,CheckedInputStream,3,int read(byte[] b),False,,NULL
1,CheckedInputStream,4,"int read(byte[] b, int off, int len)",True,Reads into an array of bytes.,"

read
public int read(byte[] buf,
                int off,
                int len)
         throws IOException
Reads into an array of bytes. If len is not zero, the method
 blocks until some input is available; otherwise, no
 bytes are read and 0 is returned.

Overrides:
read in class FilterInputStream
Parameters:
buf - the buffer into which the data is read
off - the start offset in the destination array b
len - the maximum number of bytes read
Returns:
the actual number of bytes read, or -1 if the end
            of the stream is reached.
Throws:
NullPointerException - If buf is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 buf.length - off
IOException - if an I/O error has occurred
See Also:
FilterInputStream.in


"
1,CheckedInputStream,5,long skip(long n),True,Skips specified number of bytes of input.,"

skip
public long skip(long n)
          throws IOException
Skips specified number of bytes of input.

Overrides:
skip in class FilterInputStream
Parameters:
n - the number of bytes to skip
Returns:
the actual number of bytes skipped
Throws:
IOException - if an I/O error has occurred


"
2,CheckedOutputStream,1,"CheckedOutputStream(OutputStream out, Checksum ck)",False,,NULL
2,CheckedOutputStream,2,void write(int b),True,Writes a byte.,"

write
public void write(int b)
           throws IOException
Writes a byte. Will block until the byte is actually written.

Overrides:
write in class FilterOutputStream
Parameters:
b - the byte to be written
Throws:
IOException - if an I/O error has occurred


"
2,CheckedOutputStream,3,void write(byte[] b),False,,NULL
2,CheckedOutputStream,4,"void write(byte[] b, int off, int len)",True,Writes an array of bytes.,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Writes an array of bytes. Will block until the bytes are
 actually written.

Overrides:
write in class FilterOutputStream
Parameters:
b - the data to be written
off - the start offset of the data
len - the number of bytes to be written
Throws:
IOException - if an I/O error has occurred
See Also:
FilterOutputStream.write(int)


"
2,CheckedOutputStream,5,void flush(),False,,NULL
3,CRC32,1,void update(int b),True,Updates the CRC-32 checksum with the specified byte (the low eight bits of the argument b).,"

update
public void update(int b)
Updates the CRC-32 checksum with the specified byte (the low
 eight bits of the argument b).

Specified by:
update in interface Checksum
Parameters:
b - the byte to update the checksum with


"
3,CRC32,2,"void update(byte[] b, int off, int len)",True,Updates the CRC-32 checksum with the specified array of bytes.,"

update
public void update(byte[] b,
                   int off,
                   int len)
Updates the CRC-32 checksum with the specified array of bytes.

Specified by:
update in interface Checksum
Parameters:
b - the byte array to update the checksum with
off - the start offset of the data
len - the number of bytes to use for the update
Throws:
ArrayIndexOutOfBoundsException - if off is negative, or len is negative,
          or off+len is greater than the length of the
          array b


"
3,CRC32,3,void reset(),True,Resets CRC-32 to initial value.,"

reset
public void reset()
Resets CRC-32 to initial value.

Specified by:
reset in interface Checksum


"
3,CRC32,4,long getValue(),True,Returns CRC-32 value.,"

getValue
public long getValue()
Returns CRC-32 value.

Specified by:
getValue in interface Checksum
Returns:
the current checksum value


"
3,CRC32,5,String toString(),False,,NULL
4,Deflater,1,void setInput(byte[] input),True,Sets input data for compression.,"

setInput
public void setInput(byte[] b)
Sets input data for compression. This should be called whenever
 needsInput() returns true indicating that more input data is required.

Parameters:
b - the input data bytes
See Also:
needsInput()


"
4,Deflater,2,"void setInput(byte[] input, int offset, int count)",True,Sets input data for compression.,"

setInput
public void setInput(byte[] b,
                     int off,
                     int len)
Sets input data for compression. This should be called whenever
 needsInput() returns true indicating that more input data is required.

Parameters:
b - the input data bytes
off - the start offset of the data
len - the length of the data
See Also:
needsInput()


"
4,Deflater,3,int deflate(byte[] output),True,Compresses the input data and fills specified buffer with compressed data.,"

deflate
public int deflate(byte[] b)
Compresses the input data and fills specified buffer with compressed
 data. Returns actual number of bytes of compressed data. A return value
 of 0 indicates that needsInput should be called
 in order to determine if more input data is required.

 This method uses NO_FLUSH as its compression flush mode.
 An invocation of this method of the form deflater.deflate(b)
 yields the same result as the invocation of
 deflater.deflate(b, 0, b.length, Deflater.NO_FLUSH).

Parameters:
b - the buffer for the compressed data
Returns:
the actual number of bytes of compressed data written to the
         output buffer


"
4,Deflater,4,"int deflate(byte[] output, int offset, int count)",True,Compresses the input data and fills specified buffer with compressed data.,"

deflate
public int deflate(byte[] b,
                   int off,
                   int len)
Compresses the input data and fills specified buffer with compressed
 data. Returns actual number of bytes of compressed data. A return value
 of 0 indicates that needsInput should be called
 in order to determine if more input data is required.

 This method uses NO_FLUSH as its compression flush mode.
 An invocation of this method of the form deflater.deflate(b, off, len)
 yields the same result as the invocation of
 deflater.deflate(b, off, len, Deflater.NO_FLUSH).

Parameters:
b - the buffer for the compressed data
off - the start offset of the data
len - the maximum number of bytes of compressed data
Returns:
the actual number of bytes of compressed data written to the
         output buffer


"
4,Deflater,5,void end(),True,Closes the compressor and discards any unprocessed input.,"

end
public void end()
Closes the compressor and discards any unprocessed input.
 This method should be called when the compressor is no longer
 being used, but will also be called automatically by the
 finalize() method. Once this method is called, the behavior
 of the Deflater object is undefined.

"
5,DeflaterInputStream,1,DeflaterInputStream(InputStream in),False,,NULL
5,DeflaterInputStream,2,"void setInput(byte[] input, int offset, int len)",False,,NULL
5,DeflaterInputStream,3,"int read(byte[] b, int off, int len)",True,Reads compressed data into a byte array.,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads compressed data into a byte array.
 This method will block until some input can be read and compressed.

Overrides:
read in class FilterInputStream
Parameters:
b - buffer into which the data is read
off - starting offset of the data within b
len - maximum number of compressed bytes to read into b
Returns:
the actual number of bytes read, or -1 if the end of the
 uncompressed input stream is reached
Throws:
IndexOutOfBoundsException - if len > b.length - off
IOException - if an I/O error occurs or if this input stream is
 already closed
See Also:
FilterInputStream.in


"
5,DeflaterInputStream,4,void end(),False,,NULL
5,DeflaterInputStream,5,void reset(),True,This operation is not supported.,"

reset
public void reset()
           throws IOException
This operation is not supported.

Overrides:
reset in class FilterInputStream
Throws:
IOException - always thrown
See Also:
FilterInputStream.in, 
FilterInputStream.mark(int)


"
6,DeflaterOutputStream,1,DeflaterOutputStream(OutputStream out),False,,NULL
6,DeflaterOutputStream,2,void write(int b) throws IOException,True,Writes a byte to the compressed output stream.,"

write
public void write(int b)
           throws IOException
Writes a byte to the compressed output stream. This method will
 block until the byte can be written.

Overrides:
write in class FilterOutputStream
Parameters:
b - the byte to be written
Throws:
IOException - if an I/O error has occurred


"
6,DeflaterOutputStream,3,"void write(byte[] b, int off, int len) throws IOException",True,Writes an array of bytes to the compressed output stream.,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Writes an array of bytes to the compressed output stream. This
 method will block until all the bytes are written.

Overrides:
write in class FilterOutputStream
Parameters:
b - the data to be written
off - the start offset of the data
len - the length of the data
Throws:
IOException - if an I/O error has occurred
See Also:
FilterOutputStream.write(int)


"
6,DeflaterOutputStream,4,void finish() throws IOException,True,Finishes writing compressed data to the output stream without closing the underlying stream.,"

finish
public void finish()
            throws IOException
Finishes writing compressed data to the output stream without closing
 the underlying stream. Use this method when applying multiple filters
 in succession to the same output stream.

Throws:
IOException - if an I/O error has occurred


"
6,DeflaterOutputStream,5,void close() throws IOException,True,Writes remaining compressed data to the output stream and closes the underlying stream.,"

close
public void close()
           throws IOException
Writes remaining compressed data to the output stream and closes the
 underlying stream.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class FilterOutputStream
Throws:
IOException - if an I/O error has occurred
See Also:
FilterOutputStream.flush(), 
FilterOutputStream.out


"
7,GZIPInputStream,1,GZIPInputStream(InputStream in),False,,NULL
7,GZIPInputStream,2,int read(),False,,NULL
7,GZIPInputStream,3,int read(byte[] b),False,,NULL
7,GZIPInputStream,4,"int read(byte[] b, int off, int len)",True,Reads uncompressed data into an array of bytes.,"

read
public int read(byte[] buf,
                int off,
                int len)
         throws IOException
Reads uncompressed data into an array of bytes. If len is not
 zero, the method will block until some input can be decompressed; otherwise,
 no bytes are read and 0 is returned.

Overrides:
read in class InflaterInputStream
Parameters:
buf - the buffer into which the data is read
off - the start offset in the destination array b
len - the maximum number of bytes read
Returns:
the actual number of bytes read, or -1 if the end of the
          compressed input stream is reached
Throws:
NullPointerException - If buf is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 buf.length - off
ZipException - if the compressed input data is corrupt.
IOException - if an I/O error has occurred.
See Also:
FilterInputStream.in


"
7,GZIPInputStream,5,void close(),True,Closes this input stream and releases any system resources associated with the stream.,"

close
public void close()
           throws IOException
Closes this input stream and releases any system resources associated
 with the stream.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class InflaterInputStream
Throws:
IOException - if an I/O error has occurred
See Also:
FilterInputStream.in


"
8,GZIPOutputStream,1,GZIPOutputStream(OutputStream out),False,,NULL
8,GZIPOutputStream,2,void write(int b),False,,NULL
8,GZIPOutputStream,3,void write(byte[] b),False,,NULL
8,GZIPOutputStream,4,"void write(byte[] b, int off, int len)",True,Writes array of bytes to the compressed output stream.,"

write
public void write(byte[] buf,
                  int off,
                  int len)
           throws IOException
Writes array of bytes to the compressed output stream. This method
 will block until all the bytes are written.

Overrides:
write in class DeflaterOutputStream
Parameters:
buf - the data to be written
off - the start offset of the data
len - the length of the data
Throws:
IOException - If an I/O error has occurred.
See Also:
FilterOutputStream.write(int)


"
8,GZIPOutputStream,5,void finish(),True,Finishes writing compressed data to the output stream without closing the underlying stream.,"

finish
public void finish()
            throws IOException
Finishes writing compressed data to the output stream without closing
 the underlying stream. Use this method when applying multiple filters
 in succession to the same output stream.

Overrides:
finish in class DeflaterOutputStream
Throws:
IOException - if an I/O error has occurred


"
9,Inflater,1,Inflater(),False,,NULL
9,Inflater,2,"void setInput(byte[] input, int offset, int len)",True,Sets input data for decompression.,"

setInput
public void setInput(byte[] b,
                     int off,
                     int len)
Sets input data for decompression. Should be called whenever
 needsInput() returns true indicating that more input data is
 required.

Parameters:
b - the input data bytes
off - the start offset of the input data
len - the length of the input data
See Also:
needsInput()


"
9,Inflater,3,int inflate(byte[] output),True,Uncompresses bytes into specified buffer.,"

inflate
public int inflate(byte[] b)
            throws DataFormatException
Uncompresses bytes into specified buffer. Returns actual number
 of bytes uncompressed. A return value of 0 indicates that
 needsInput() or needsDictionary() should be called in order to
 determine if more input data or a preset dictionary is required.
 In the latter case, getAdler() can be used to get the Adler-32
 value of the dictionary required.

Parameters:
b - the buffer for the uncompressed data
Returns:
the actual number of uncompressed bytes
Throws:
DataFormatException - if the compressed data format is invalid
See Also:
needsInput(), 
needsDictionary()


"
9,Inflater,4,int getRemaining(),True,Returns the total number of bytes remaining in the input buffer.,"

getRemaining
public int getRemaining()
Returns the total number of bytes remaining in the input buffer.
 This can be used to find out what bytes still remain in the input
 buffer after decompression has finished.

Returns:
the total number of bytes remaining in the input buffer


"
9,Inflater,5,void end(),True,Closes the decompressor and discards any unprocessed input.,"

end
public void end()
Closes the decompressor and discards any unprocessed input.
 This method should be called when the decompressor is no longer
 being used, but will also be called automatically by the finalize()
 method. Once this method is called, the behavior of the Inflater
 object is undefined.

"
10,InflaterInputStream,1,InflaterInputStream(InputStream in),False,,NULL
10,InflaterInputStream,2,"InflaterInputStream(InputStream in, Inflater inf)",False,,NULL
10,InflaterInputStream,3,int read(),True,Reads a byte of uncompressed data.,"

read
public int read()
         throws IOException
Reads a byte of uncompressed data. This method will block until
 enough input is available for decompression.

Overrides:
read in class FilterInputStream
Returns:
the byte read, or -1 if end of compressed input is reached
Throws:
IOException - if an I/O error has occurred
See Also:
FilterInputStream.in


"
10,InflaterInputStream,4,"int read(byte[] b, int off, int len)",True,Reads uncompressed data into an array of bytes.,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads uncompressed data into an array of bytes. If len is not
 zero, the method will block until some input can be decompressed; otherwise,
 no bytes are read and 0 is returned.

Overrides:
read in class FilterInputStream
Parameters:
b - the buffer into which the data is read
off - the start offset in the destination array b
len - the maximum number of bytes read
Returns:
the actual number of bytes read, or -1 if the end of the
         compressed input is reached or a preset dictionary is needed
Throws:
NullPointerException - If b is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 b.length - off
ZipException - if a ZIP format error has occurred
IOException - if an I/O error has occurred
See Also:
FilterInputStream.in


"
10,InflaterInputStream,5,long skip(long n),True,Skips specified number of bytes of uncompressed data.,"

skip
public long skip(long n)
          throws IOException
Skips specified number of bytes of uncompressed data.

Overrides:
skip in class FilterInputStream
Parameters:
n - the number of bytes to skip
Returns:
the actual number of bytes skipped.
Throws:
IOException - if an I/O error has occurred
IllegalArgumentException - if n < 0


"
11,InflaterOutputStream,1,InflaterOutputStream(OutputStream out),False,,NULL
11,InflaterOutputStream,2,"void write(byte[] b, int off, int len) throws IOException",True,Writes an array of bytes to the uncompressed output stream.,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Writes an array of bytes to the uncompressed output stream.

Overrides:
write in class FilterOutputStream
Parameters:
b - buffer containing compressed data to decompress and write to
 the output stream
off - starting offset of the compressed data within b
len - number of bytes to decompress from b
Throws:
IndexOutOfBoundsException - if off < 0, or if
 len < 0, or if len > b.length - off
IOException - if an I/O error occurs or this stream is already
 closed
NullPointerException - if b is null
ZipException - if a compression (ZIP) format error occurs
See Also:
FilterOutputStream.write(int)


"
11,InflaterOutputStream,3,void finish() throws DataFormatException,True,Finishes writing uncompressed data to the output stream without closing the underlying stream.,"

finish
public void finish()
            throws IOException
Finishes writing uncompressed data to the output stream without closing
 the underlying stream.  Use this method when applying multiple filters in
 succession to the same output stream.

Throws:
IOException - if an I/O error occurs or this stream is already
 closed


"
11,InflaterOutputStream,4,void reset(),False,,NULL
11,InflaterOutputStream,5,"void setInput(byte[] input, int index, int len)",False,,NULL
12,ZipEntry,1,ZipEntry(String name),False,,NULL
12,ZipEntry,2,String getName(),True,Returns the name of the entry.,"

getName
public String getName()
Returns the name of the entry.

Returns:
the name of the entry


"
12,ZipEntry,3,void setName(String name),False,,NULL
12,ZipEntry,4,long getSize(),True,Returns the uncompressed size of the entry data.,"

getSize
public long getSize()
Returns the uncompressed size of the entry data.

Returns:
the uncompressed size of the entry data, or -1 if not known
See Also:
setSize(long)


"
12,ZipEntry,5,void setSize(long size),True,Sets the uncompressed size of the entry data.,"

setSize
public void setSize(long size)
Sets the uncompressed size of the entry data.

Parameters:
size - the uncompressed size in bytes
Throws:
IllegalArgumentException - if the specified size is less
         than 0, is greater than 0xFFFFFFFF when
         ZIP64 format is not supported,
         or is less than 0 when ZIP64 is supported
See Also:
getSize()


"
12,ZipEntry,6,long getCompressedSize(),True,Returns the size of the compressed entry data.,"

getCompressedSize
public long getCompressedSize()
Returns the size of the compressed entry data.

  In the case of a stored entry, the compressed size will be the same
 as the uncompressed size of the entry.

Returns:
the size of the compressed entry data, or -1 if not known
See Also:
setCompressedSize(long)


"
12,ZipEntry,7,void setCompressedSize(long size),True,Sets the size of the compressed entry data.,"

setCompressedSize
public void setCompressedSize(long csize)
Sets the size of the compressed entry data.

Parameters:
csize - the compressed size to set to
See Also:
getCompressedSize()


"
12,ZipEntry,8,long getCrc(),True,Returns the CRC-32 checksum of the uncompressed entry data.,"

getCrc
public long getCrc()
Returns the CRC-32 checksum of the uncompressed entry data.

Returns:
the CRC-32 checksum of the uncompressed entry data, or -1 if
 not known
See Also:
setCrc(long)


"
12,ZipEntry,9,void setCrc(long crc),True,Sets the CRC-32 checksum of the uncompressed entry data.,"

setCrc
public void setCrc(long crc)
Sets the CRC-32 checksum of the uncompressed entry data.

Parameters:
crc - the CRC-32 value
Throws:
IllegalArgumentException - if the specified CRC-32 value is
         less than 0 or greater than 0xFFFFFFFF
See Also:
getCrc()


"
12,ZipEntry,10,long getMethod(),False,,NULL
12,ZipEntry,11,void setMethod(long method),False,,NULL
12,ZipEntry,12,long getTime(),True,Returns the last modification time of the entry.,"

getTime
public long getTime()
Returns the last modification time of the entry.

  If the entry is read from a ZIP file or ZIP file formatted
 input stream, this is the last modification time from the date and time fields of the zip file entry. The
 default TimeZone is used
 to convert the standard MS-DOS formatted date and time to the
 epoch time.

Returns:
The last modification time of the entry in milliseconds
          since the epoch, or -1 if not specified
See Also:
setTime(long), 
setLastModifiedTime(FileTime)


"
12,ZipEntry,13,void setTime(long time),True,Sets the last modification time of the entry.,"

setTime
public void setTime(long time)
Sets the last modification time of the entry.

  If the entry is output to a ZIP file or ZIP file formatted
 output stream the last modification time set by this method will
 be stored into the date and time fields of the zip file
 entry and encoded in standard MS-DOS date and time format.
 The default TimeZone is
 used to convert the epoch time to the MS-DOS data and time.

Parameters:
time - The last modification time of the entry in milliseconds
         since the epoch
See Also:
getTime(), 
getLastModifiedTime()


"
12,ZipEntry,14,long getExtraField(),False,,NULL
12,ZipEntry,15,void setExtraField(byte[] extra),False,,NULL
12,ZipEntry,16,long getComment(),False,,NULL
12,ZipEntry,17,void setComment(String comment),True,Sets the optional comment string for the entry.,"

setComment
public void setComment(String comment)
Sets the optional comment string for the entry.

 ZIP entry comments have maximum length of 0xffff. If the length of the
 specified comment string is greater than 0xFFFF bytes after encoding, only
 the first 0xFFFF bytes are output to the ZIP file entry.

Parameters:
comment - the comment string
See Also:
getComment()


"
12,ZipEntry,18,boolean isDirectory(),True,Returns true if this is a directory entry.,"

isDirectory
public boolean isDirectory()
Returns true if this is a directory entry. A directory entry is
 defined to be one whose name ends with a '/'.

Returns:
true if this is a directory entry


"
12,ZipEntry,19,void setDirectory(boolean dir),False,,NULL
12,ZipEntry,20,boolean isUnicodeText(),False,,NULL
12,ZipEntry,21,void setUnicodeText(boolean unicode),False,,NULL
12,ZipEntry,22,long getDiskNumberStart(),False,,NULL
12,ZipEntry,23,void setDiskNumberStart(long disk),False,,NULL
12,ZipEntry,24,long getInternalAttributes(),False,,NULL
12,ZipEntry,25,void setInternalAttributes(long attr),False,,NULL
12,ZipEntry,26,long getExternalAttributes(),False,,NULL
12,ZipEntry,27,void setExternalAttributes(long attr),False,,NULL
12,ZipEntry,28,long getHeaderOffset(),False,,NULL
12,ZipEntry,29,void setHeaderOffset(long offset),False,,NULL
12,ZipEntry,30,long getCompressedSize(),True,Returns the size of the compressed entry data.,"

getCompressedSize
public long getCompressedSize()
Returns the size of the compressed entry data.

  In the case of a stored entry, the compressed size will be the same
 as the uncompressed size of the entry.

Returns:
the size of the compressed entry data, or -1 if not known
See Also:
setCompressedSize(long)


"
12,ZipEntry,31,void setCompressedSize(long size),True,Sets the size of the compressed entry data.,"

setCompressedSize
public void setCompressedSize(long csize)
Sets the size of the compressed entry data.

Parameters:
csize - the compressed size to set to
See Also:
getCompressedSize()


"
12,ZipEntry,32,long getLocalHeaderOffset(),False,,NULL
12,ZipEntry,33,void setLocalHeaderOffset(long offset),False,,NULL
12,ZipEntry,34,long getDiskNumberStart(),False,,NULL
12,ZipEntry,35,void setDiskNumberStart(long disk),False,,NULL
12,ZipEntry,36,long getInternalAttributes(),False,,NULL
12,ZipEntry,37,void setInternalAttributes(long attr),False,,NULL
12,ZipEntry,38,long getExternalAttributes(),False,,NULL
12,ZipEntry,39,void setExternalAttributes(long attr),False,,NULL
12,ZipEntry,40,long getHeaderOffset(),False,,NULL
12,ZipEntry,41,void setHeaderOffset(long offset),False,,NULL
12,ZipEntry,42,long getCompressedSize(),True,Returns the size of the compressed entry data.,"

getCompressedSize
public long getCompressedSize()
Returns the size of the compressed entry data.

  In the case of a stored entry, the compressed size will be the same
 as the uncompressed size of the entry.

Returns:
the size of the compressed entry data, or -1 if not known
See Also:
setCompressedSize(long)


"
12,ZipEntry,43,void setCompressedSize(long size),True,Sets the size of the compressed entry data.,"

setCompressedSize
public void setCompressedSize(long csize)
Sets the size of the compressed entry data.

Parameters:
csize - the compressed size to set to
See Also:
getCompressedSize()


"
12,ZipEntry,44,long getLocalHeaderOffset(),False,,NULL
12,ZipEntry,45,void setLocalHeaderOffset(long offset),False,,NULL
13,ZipFile,1,ZipFile(File file),False,,NULL
13,ZipFile,2,"ZipFile(File file, ZipFile$OpenMode mode)",False,,NULL
13,ZipFile,3,ZipFile(String name),False,,NULL
13,ZipFile,4,"ZipFile(String name, ZipFile$OpenMode mode)",False,,NULL
13,ZipFile,5,ZipEntry getEntry(String name),True,"Returns the zip file entry for the specified name, or null if not found.","

getEntry
public ZipEntry getEntry(String name)
Returns the zip file entry for the specified name, or null
 if not found.

Parameters:
name - the name of the entry
Returns:
the zip file entry, or null if not found
Throws:
IllegalStateException - if the zip file has been closed


"
13,ZipFile,6,Enumeration<? extends ZipEntry> entries(),True,Returns an enumeration of the ZIP file entries.,"

entries
public Enumeration<? extends ZipEntry> entries()
Returns an enumeration of the ZIP file entries.

Returns:
an enumeration of the ZIP file entries
Throws:
IllegalStateException - if the zip file has been closed


"
13,ZipFile,7,InputStream getInputStream(ZipEntry e),True,Returns an input stream for reading the contents of the specified zip file entry.,"

getInputStream
public InputStream getInputStream(ZipEntry entry)
                           throws IOException
Returns an input stream for reading the contents of the specified
 zip file entry.

  Closing this ZIP file will, in turn, close all input
 streams that have been returned by invocations of this method.

Parameters:
entry - the zip file entry
Returns:
the input stream for reading the contents of the specified
 zip file entry.
Throws:
ZipException - if a ZIP format error has occurred
IOException - if an I/O error has occurred
IllegalStateException - if the zip file has been closed


"
13,ZipFile,8,ZipOutputStream(OutputStream out),False,,NULL
13,ZipFile,9,void putNextEntry(ZipEntry e),False,,NULL
13,ZipFile,10,void closeEntry(),False,,NULL
13,ZipFile,11,void close(),True,Closes the ZIP file.,"

close
public void close()
           throws IOException
Closes the ZIP file.
  Closing this ZIP file will close all of the input streams
 previously returned by invocations of the getInputStream method.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Throws:
IOException - if an I/O error has occurred


"
13,ZipFile,12,"void write(byte[] b, int off, int len)",False,,NULL
13,ZipFile,13,void finish(),False,,NULL
13,ZipFile,14,void write(int b),False,,NULL
13,ZipFile,15,void write(byte[] b),False,,NULL
14,ZipInputStream,1,ZipInputStream(InputStream in),False,,NULL
14,ZipInputStream,2,int read(),False,,NULL
14,ZipInputStream,3,int read(byte[] b),False,,NULL
14,ZipInputStream,4,"int read(byte[] b, int off, int len)",True,Reads from the current ZIP entry into an array of bytes.,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads from the current ZIP entry into an array of bytes.
 If len is not zero, the method
 blocks until some input is available; otherwise, no
 bytes are read and 0 is returned.

Overrides:
read in class InflaterInputStream
Parameters:
b - the buffer into which the data is read
off - the start offset in the destination array b
len - the maximum number of bytes read
Returns:
the actual number of bytes read, or -1 if the end of the
         entry is reached
Throws:
NullPointerException - if b is null.
IndexOutOfBoundsException - if off is negative,
 len is negative, or len is greater than
 b.length - off
ZipException - if a ZIP file error has occurred
IOException - if an I/O error has occurred
See Also:
FilterInputStream.in


"
14,ZipInputStream,5,void close(),True,Closes this input stream and releases any system resources associated with the stream.,"

close
public void close()
           throws IOException
Closes this input stream and releases any system resources associated
 with the stream.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class InflaterInputStream
Throws:
IOException - if an I/O error has occurred
See Also:
FilterInputStream.in


"
15,ZipOutputStream,1,ZipOutputStream(OutputStream out),False,,NULL
15,ZipOutputStream,2,void putNextEntry(ZipEntry e),True,Begins writing a new ZIP file entry and positions the stream to the start of the entry data.,"

putNextEntry
public void putNextEntry(ZipEntry e)
                  throws IOException
Begins writing a new ZIP file entry and positions the stream to the
 start of the entry data. Closes the current entry if still active.
 The default compression method will be used if no compression method
 was specified for the entry, and the current time will be used if
 the entry has no set modification time.

Parameters:
e - the ZIP entry to be written
Throws:
ZipException - if a ZIP format error has occurred
IOException - if an I/O error has occurred


"
15,ZipOutputStream,3,void closeEntry(),True,Closes the current ZIP entry and positions the stream for writing the next entry.,"

closeEntry
public void closeEntry()
                throws IOException
Closes the current ZIP entry and positions the stream for writing
 the next entry.

Throws:
ZipException - if a ZIP format error has occurred
IOException - if an I/O error has occurred


"
15,ZipOutputStream,4,"void write(byte[] b, int off, int len)",True,Writes an array of bytes to the current ZIP entry data.,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Writes an array of bytes to the current ZIP entry data. This method
 will block until all the bytes are written.

Overrides:
write in class DeflaterOutputStream
Parameters:
b - the data to be written
off - the start offset in the data
len - the number of bytes that are written
Throws:
ZipException - if a ZIP file error has occurred
IOException - if an I/O error has occurred
See Also:
FilterOutputStream.write(int)


"
15,ZipOutputStream,5,void close(),True,Closes the ZIP output stream as well as the stream being filtered.,"

close
public void close()
           throws IOException
Closes the ZIP output stream as well as the stream being filtered.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class DeflaterOutputStream
Throws:
ZipException - if a ZIP file error has occurred
IOException - if an I/O error has occurred
See Also:
FilterOutputStream.flush(), 
FilterOutputStream.out


"
