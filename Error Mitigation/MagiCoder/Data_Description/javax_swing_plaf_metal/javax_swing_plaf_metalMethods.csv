ClassName,Method,Return Type,Description,Full Description
DefaultMetalTheme,getControlTextFont(),FontUIResource,Returns the control text font.,"

getControlTextFont
public FontUIResource getControlTextFont()
Returns the control text font. This returns Dialog, 12pt. If
 plain fonts have been enabled as described in 
 font style, the font style is plain. Otherwise the font style is
 bold.

Specified by:
getControlTextFont in class MetalTheme
Returns:
the control text font


"
DefaultMetalTheme,getMenuTextFont(),FontUIResource,Returns the menu text font.,"

getMenuTextFont
public FontUIResource getMenuTextFont()
Returns the menu text font. This returns Dialog, 12pt. If
 plain fonts have been enabled as described in 
 font style, the font style is plain. Otherwise the font style is
 bold.

Specified by:
getMenuTextFont in class MetalTheme
Returns:
the menu text font


"
DefaultMetalTheme,getName(),String,Returns the name of this theme.,"

getName
public String getName()
Returns the name of this theme. This returns ""Steel"".

Specified by:
getName in class MetalTheme
Returns:
the name of this theme.


"
DefaultMetalTheme,getPrimary1(),protected ColorUIResource,Returns the primary 1 color.,"

getPrimary1
protected ColorUIResource getPrimary1()
Returns the primary 1 color. This returns a color with rgb values
 of 102, 102, and 153, respectively.

Specified by:
getPrimary1 in class MetalTheme
Returns:
the primary 1 color


"
DefaultMetalTheme,getPrimary2(),protected ColorUIResource,Returns the primary 2 color.,"

getPrimary2
protected ColorUIResource getPrimary2()
Returns the primary 2 color. This returns a color with rgb values
 of 153, 153, 204, respectively.

Specified by:
getPrimary2 in class MetalTheme
Returns:
the primary 2 color


"
DefaultMetalTheme,getPrimary3(),protected ColorUIResource,Returns the primary 3 color.,"

getPrimary3
protected ColorUIResource getPrimary3()
Returns the primary 3 color. This returns a color with rgb values
 204, 204, 255, respectively.

Specified by:
getPrimary3 in class MetalTheme
Returns:
the primary 3 color


"
DefaultMetalTheme,getSecondary1(),protected ColorUIResource,Returns the secondary 1 color.,"

getSecondary1
protected ColorUIResource getSecondary1()
Returns the secondary 1 color. This returns a color with rgb values
 102, 102, and 102, respectively.

Specified by:
getSecondary1 in class MetalTheme
Returns:
the secondary 1 color


"
DefaultMetalTheme,getSecondary2(),protected ColorUIResource,Returns the secondary 2 color.,"

getSecondary2
protected ColorUIResource getSecondary2()
Returns the secondary 2 color. This returns a color with rgb values
 153, 153, and 153, respectively.

Specified by:
getSecondary2 in class MetalTheme
Returns:
the secondary 2 color


"
DefaultMetalTheme,getSecondary3(),protected ColorUIResource,Returns the secondary 3 color.,"

getSecondary3
protected ColorUIResource getSecondary3()
Returns the secondary 3 color. This returns a color with rgb values
 204, 204, and 204, respectively.

Specified by:
getSecondary3 in class MetalTheme
Returns:
the secondary 3 color


"
DefaultMetalTheme,getSubTextFont(),FontUIResource,Returns the sub-text font.,"

getSubTextFont
public FontUIResource getSubTextFont()
Returns the sub-text font. This returns Dialog, 10pt, plain.

Specified by:
getSubTextFont in class MetalTheme
Returns:
the sub-text font


"
DefaultMetalTheme,getSystemTextFont(),FontUIResource,Returns the system text font.,"

getSystemTextFont
public FontUIResource getSystemTextFont()
Returns the system text font. This returns Dialog, 12pt, plain.

Specified by:
getSystemTextFont in class MetalTheme
Returns:
the system text font


"
DefaultMetalTheme,getUserTextFont(),FontUIResource,Returns the user text font.,"

getUserTextFont
public FontUIResource getUserTextFont()
Returns the user text font. This returns Dialog, 12pt, plain.

Specified by:
getUserTextFont in class MetalTheme
Returns:
the user text font


"
DefaultMetalTheme,getWindowTitleFont(),FontUIResource,Returns the window title font.,"

getWindowTitleFont
public FontUIResource getWindowTitleFont()
Returns the window title font. This returns Dialog, 12pt, bold.

Specified by:
getWindowTitleFont in class MetalTheme
Returns:
the window title font


"
MetalBorders,getButtonBorder(),static Border,Returns a border instance for a JButton,"

getButtonBorder
public static Border getButtonBorder()
Returns a border instance for a JButton

Since:
1.3


"
MetalBorders,getDesktopIconBorder(),static Border,Returns a border instance for a Desktop Icon,"

getDesktopIconBorder
public static Border getDesktopIconBorder()
Returns a border instance for a Desktop Icon

Since:
1.3


"
MetalBorders,getTextBorder(),static Border,Returns a border instance for a text component,"

getTextBorder
public static Border getTextBorder()
Returns a border instance for a text component

Since:
1.3


"
MetalBorders,getTextFieldBorder(),static Border,Returns a border instance for a JTextField,"

getTextFieldBorder
public static Border getTextFieldBorder()
Returns a border instance for a JTextField

Since:
1.3


"
MetalBorders,getToggleButtonBorder(),static Border,Returns a border instance for a JToggleButton,"

getToggleButtonBorder
public static Border getToggleButtonBorder()
Returns a border instance for a JToggleButton

Since:
1.3


"
MetalBorders.ButtonBorder,"getBorderInsets(Component c, Insets newInsets)",Insets,Reinitializes the insets parameter with this Border's current Insets.,"

getBorderInsets
public Insets getBorderInsets(Component c,
                              Insets newInsets)
Description copied from class: AbstractBorder
Reinitializes the insets parameter with this Border's current Insets.

Overrides:
getBorderInsets in class AbstractBorder
Parameters:
c - the component for which this border insets value applies
newInsets - the object to be reinitialized
Returns:
the insets object


"
MetalBorders.ButtonBorder,"paintBorder(Component c, Graphics g, int x, int y, int w, int h)",void,This default implementation does no painting.,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int w,
                        int h)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class AbstractBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
w - the width of the painted border
h - the height of the painted border


"
MetalBorders.Flush3DBorder,"getBorderInsets(Component c, Insets newInsets)",Insets,Reinitializes the insets parameter with this Border's current Insets.,"

getBorderInsets
public Insets getBorderInsets(Component c,
                              Insets newInsets)
Description copied from class: AbstractBorder
Reinitializes the insets parameter with this Border's current Insets.

Overrides:
getBorderInsets in class AbstractBorder
Parameters:
c - the component for which this border insets value applies
newInsets - the object to be reinitialized
Returns:
the insets object


"
MetalBorders.Flush3DBorder,"paintBorder(Component c, Graphics g, int x, int y, int w, int h)",void,This default implementation does no painting.,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int w,
                        int h)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class AbstractBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
w - the width of the painted border
h - the height of the painted border


"
MetalBorders.InternalFrameBorder,"getBorderInsets(Component c, Insets newInsets)",Insets,Reinitializes the insets parameter with this Border's current Insets.,"

getBorderInsets
public Insets getBorderInsets(Component c,
                              Insets newInsets)
Description copied from class: AbstractBorder
Reinitializes the insets parameter with this Border's current Insets.

Overrides:
getBorderInsets in class AbstractBorder
Parameters:
c - the component for which this border insets value applies
newInsets - the object to be reinitialized
Returns:
the insets object


"
MetalBorders.InternalFrameBorder,"paintBorder(Component c, Graphics g, int x, int y, int w, int h)",void,This default implementation does no painting.,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int w,
                        int h)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class AbstractBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
w - the width of the painted border
h - the height of the painted border


"
MetalBorders.MenuBarBorder,"getBorderInsets(Component c, Insets newInsets)",Insets,Reinitializes the insets parameter with this Border's current Insets.,"

getBorderInsets
public Insets getBorderInsets(Component c,
                              Insets newInsets)
Description copied from class: AbstractBorder
Reinitializes the insets parameter with this Border's current Insets.

Overrides:
getBorderInsets in class AbstractBorder
Parameters:
c - the component for which this border insets value applies
newInsets - the object to be reinitialized
Returns:
the insets object


"
MetalBorders.MenuBarBorder,"paintBorder(Component c, Graphics g, int x, int y, int w, int h)",void,This default implementation does no painting.,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int w,
                        int h)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class AbstractBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
w - the width of the painted border
h - the height of the painted border


"
MetalBorders.MenuItemBorder,"getBorderInsets(Component c, Insets newInsets)",Insets,Reinitializes the insets parameter with this Border's current Insets.,"

getBorderInsets
public Insets getBorderInsets(Component c,
                              Insets newInsets)
Description copied from class: AbstractBorder
Reinitializes the insets parameter with this Border's current Insets.

Overrides:
getBorderInsets in class AbstractBorder
Parameters:
c - the component for which this border insets value applies
newInsets - the object to be reinitialized
Returns:
the insets object


"
MetalBorders.MenuItemBorder,"paintBorder(Component c, Graphics g, int x, int y, int w, int h)",void,This default implementation does no painting.,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int w,
                        int h)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class AbstractBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
w - the width of the painted border
h - the height of the painted border


"
MetalBorders.OptionDialogBorder,"getBorderInsets(Component c, Insets newInsets)",Insets,Reinitializes the insets parameter with this Border's current Insets.,"

getBorderInsets
public Insets getBorderInsets(Component c,
                              Insets newInsets)
Description copied from class: AbstractBorder
Reinitializes the insets parameter with this Border's current Insets.

Overrides:
getBorderInsets in class AbstractBorder
Parameters:
c - the component for which this border insets value applies
newInsets - the object to be reinitialized
Returns:
the insets object


"
MetalBorders.OptionDialogBorder,"paintBorder(Component c, Graphics g, int x, int y, int w, int h)",void,This default implementation does no painting.,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int w,
                        int h)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class AbstractBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
w - the width of the painted border
h - the height of the painted border


"
MetalBorders.PaletteBorder,"getBorderInsets(Component c, Insets newInsets)",Insets,Reinitializes the insets parameter with this Border's current Insets.,"

getBorderInsets
public Insets getBorderInsets(Component c,
                              Insets newInsets)
Description copied from class: AbstractBorder
Reinitializes the insets parameter with this Border's current Insets.

Overrides:
getBorderInsets in class AbstractBorder
Parameters:
c - the component for which this border insets value applies
newInsets - the object to be reinitialized
Returns:
the insets object


"
MetalBorders.PaletteBorder,"paintBorder(Component c, Graphics g, int x, int y, int w, int h)",void,This default implementation does no painting.,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int w,
                        int h)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class AbstractBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
w - the width of the painted border
h - the height of the painted border


"
MetalBorders.PopupMenuBorder,"getBorderInsets(Component c, Insets newInsets)",Insets,Reinitializes the insets parameter with this Border's current Insets.,"

getBorderInsets
public Insets getBorderInsets(Component c,
                              Insets newInsets)
Description copied from class: AbstractBorder
Reinitializes the insets parameter with this Border's current Insets.

Overrides:
getBorderInsets in class AbstractBorder
Parameters:
c - the component for which this border insets value applies
newInsets - the object to be reinitialized
Returns:
the insets object


"
MetalBorders.PopupMenuBorder,"paintBorder(Component c, Graphics g, int x, int y, int w, int h)",void,This default implementation does no painting.,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int w,
                        int h)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class AbstractBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
w - the width of the painted border
h - the height of the painted border


"
MetalBorders.RolloverButtonBorder,"paintBorder(Component c, Graphics g, int x, int y, int w, int h)",void,This default implementation does no painting.,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int w,
                        int h)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class MetalBorders.ButtonBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
w - the width of the painted border
h - the height of the painted border


"
MetalBorders.ScrollPaneBorder,"getBorderInsets(Component c, Insets insets)",Insets,Reinitializes the insets parameter with this Border's current Insets.,"

getBorderInsets
public Insets getBorderInsets(Component c,
                              Insets insets)
Description copied from class: AbstractBorder
Reinitializes the insets parameter with this Border's current Insets.

Overrides:
getBorderInsets in class AbstractBorder
Parameters:
c - the component for which this border insets value applies
insets - the object to be reinitialized
Returns:
the insets object


"
MetalBorders.ScrollPaneBorder,"paintBorder(Component c, Graphics g, int x, int y, int w, int h)",void,This default implementation does no painting.,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int w,
                        int h)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class AbstractBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
w - the width of the painted border
h - the height of the painted border


"
MetalBorders.TableHeaderBorder,"getBorderInsets(Component c, Insets insets)",Insets,Reinitializes the insets parameter with this Border's current Insets.,"

getBorderInsets
public Insets getBorderInsets(Component c,
                              Insets insets)
Description copied from class: AbstractBorder
Reinitializes the insets parameter with this Border's current Insets.

Overrides:
getBorderInsets in class AbstractBorder
Parameters:
c - the component for which this border insets value applies
insets - the object to be reinitialized
Returns:
the insets object


"
MetalBorders.TableHeaderBorder,"paintBorder(Component c, Graphics g, int x, int y, int w, int h)",void,This default implementation does no painting.,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int w,
                        int h)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class AbstractBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
w - the width of the painted border
h - the height of the painted border


"
MetalBorders.TextFieldBorder,"paintBorder(Component c, Graphics g, int x, int y, int w, int h)",void,This default implementation does no painting.,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int w,
                        int h)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class MetalBorders.Flush3DBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
w - the width of the painted border
h - the height of the painted border


"
MetalBorders.ToggleButtonBorder,"paintBorder(Component c, Graphics g, int x, int y, int w, int h)",void,This default implementation does no painting.,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int w,
                        int h)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class MetalBorders.ButtonBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
w - the width of the painted border
h - the height of the painted border


"
MetalBorders.ToolBarBorder,"getBorderInsets(Component c, Insets newInsets)",Insets,Reinitializes the insets parameter with this Border's current Insets.,"

getBorderInsets
public Insets getBorderInsets(Component c,
                              Insets newInsets)
Description copied from class: AbstractBorder
Reinitializes the insets parameter with this Border's current Insets.

Overrides:
getBorderInsets in class AbstractBorder
Parameters:
c - the component for which this border insets value applies
newInsets - the object to be reinitialized
Returns:
the insets object


"
MetalBorders.ToolBarBorder,"paintBorder(Component c, Graphics g, int x, int y, int w, int h)",void,This default implementation does no painting.,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int w,
                        int h)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class AbstractBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
w - the width of the painted border
h - the height of the painted border


"
MetalButtonUI,createButtonListener(AbstractButton b),protected BasicButtonListener,NULL,"

createButtonListener
protected BasicButtonListener createButtonListener(AbstractButton b)

Overrides:
createButtonListener in class BasicButtonUI


"
MetalButtonUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
MetalButtonUI,getDisabledTextColor(),protected Color,NULL,"

getDisabledTextColor
protected Color getDisabledTextColor()

"
MetalButtonUI,getFocusColor(),protected Color,NULL,"

getFocusColor
protected Color getFocusColor()

"
MetalButtonUI,getSelectColor(),protected Color,NULL,"

getSelectColor
protected Color getSelectColor()

"
MetalButtonUI,installDefaults(AbstractButton b),void,NULL,"

installDefaults
public void installDefaults(AbstractButton b)

Overrides:
installDefaults in class BasicButtonUI


"
MetalButtonUI,"paintButtonPressed(Graphics g, AbstractButton b)",protected void,NULL,"

paintButtonPressed
protected void paintButtonPressed(Graphics g,
                                  AbstractButton b)

Overrides:
paintButtonPressed in class BasicButtonUI


"
MetalButtonUI,"paintFocus(Graphics g, AbstractButton b, Rectangle viewRect, Rectangle textRect, Rectangle iconRect)",protected void,NULL,"

paintFocus
protected void paintFocus(Graphics g,
                          AbstractButton b,
                          Rectangle viewRect,
                          Rectangle textRect,
                          Rectangle iconRect)

Overrides:
paintFocus in class BasicButtonUI


"
MetalButtonUI,"paintText(Graphics g, JComponent c, Rectangle textRect, String text)",protected void,As of Java 2 platform v 1.4 this method should not be used or overriden.,"

paintText
protected void paintText(Graphics g,
                         JComponent c,
                         Rectangle textRect,
                         String text)
Description copied from class: BasicButtonUI
As of Java 2 platform v 1.4 this method should not be used or overriden.
 Use the paintText method which takes the AbstractButton argument.

Overrides:
paintText in class BasicButtonUI


"
MetalButtonUI,uninstallDefaults(AbstractButton b),void,NULL,"

uninstallDefaults
public void uninstallDefaults(AbstractButton b)

Overrides:
uninstallDefaults in class BasicButtonUI


"
MetalButtonUI,"update(Graphics g, JComponent c)",void,"If necessary paints the background of the component, then invokes paint.","

update
public void update(Graphics g,
                   JComponent c)
If necessary paints the background of the component, then
 invokes paint.

Overrides:
update in class ComponentUI
Parameters:
g - Graphics to paint to
c - JComponent painting on
Throws:
NullPointerException - if g or c is
         null
Since:
1.5
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent), 
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent)


"
MetalCheckBoxIcon,"drawCheck(Component c, Graphics g, int x, int y)",protected void,NULL,"

drawCheck
protected void drawCheck(Component c,
                         Graphics g,
                         int x,
                         int y)

"
MetalCheckBoxIcon,getControlSize(),protected int,NULL,"

getControlSize
protected int getControlSize()

"
MetalCheckBoxIcon,getIconHeight(),int,Returns the icon's height.,"

getIconHeight
public int getIconHeight()
Description copied from interface: Icon
Returns the icon's height.

Specified by:
getIconHeight in interface Icon
Returns:
an int specifying the fixed height of the icon.


"
MetalCheckBoxIcon,getIconWidth(),int,Returns the icon's width.,"

getIconWidth
public int getIconWidth()
Description copied from interface: Icon
Returns the icon's width.

Specified by:
getIconWidth in interface Icon
Returns:
an int specifying the fixed width of the icon.


"
MetalCheckBoxIcon,"paintIcon(Component c, Graphics g, int x, int y)",void,Draw the icon at the specified location.,"

paintIcon
public void paintIcon(Component c,
                      Graphics g,
                      int x,
                      int y)
Description copied from interface: Icon
Draw the icon at the specified location.  Icon implementations
 may use the Component argument to get properties useful for
 painting, e.g. the foreground or background color.

Specified by:
paintIcon in interface Icon


"
MetalCheckBoxUI,createUI(JComponent b),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent b)

"
MetalCheckBoxUI,getPropertyPrefix(),String,NULL,"

getPropertyPrefix
public String getPropertyPrefix()

Overrides:
getPropertyPrefix in class BasicRadioButtonUI


"
MetalCheckBoxUI,installDefaults(AbstractButton b),void,NULL,"

installDefaults
public void installDefaults(AbstractButton b)

Overrides:
installDefaults in class MetalRadioButtonUI


"
MetalCheckBoxUI,uninstallDefaults(AbstractButton b),protected void,NULL,"

uninstallDefaults
protected void uninstallDefaults(AbstractButton b)

Overrides:
uninstallDefaults in class MetalRadioButtonUI


"
MetalComboBoxButton,getComboBox(),JComboBox,NULL,"

getComboBox
public final JComboBox getComboBox()

"
MetalComboBoxButton,getComboIcon(),Icon,NULL,"

getComboIcon
public final Icon getComboIcon()

"
MetalComboBoxButton,getMinimumSize(),Dimension,If the minimum size has been set to a non-null value just returns it.,"

getMinimumSize
public Dimension getMinimumSize()
Description copied from class: JComponent
If the minimum size has been set to a non-null value
 just returns it.  If the UI delegate's getMinimumSize
 method returns a non-null value then return that; otherwise
 defer to the component's layout manager.

Overrides:
getMinimumSize in class JComponent
Returns:
the value of the minimumSize property
See Also:
JComponent.setMinimumSize(java.awt.Dimension), 
ComponentUI


"
MetalComboBoxButton,isFocusTraversable(),boolean,Returns whether this Component can become the focus owner.,"

isFocusTraversable
public boolean isFocusTraversable()
Description copied from class: Component
Returns whether this Component can become the focus
 owner.

Overrides:
isFocusTraversable in class Component
Returns:
true if this Component is
 focusable; false otherwise
See Also:
Component.setFocusable(boolean)


"
MetalComboBoxButton,isIconOnly(),boolean,NULL,"

isIconOnly
public final boolean isIconOnly()

"
MetalComboBoxButton,paintComponent(Graphics g),void,"Calls the UI delegate's paint method, if the UI delegate is non-null.","

paintComponent
public void paintComponent(Graphics g)
Description copied from class: JComponent
Calls the UI delegate's paint method, if the UI delegate
 is non-null.  We pass the delegate a copy of the
 Graphics object to protect the rest of the
 paint code from irrevocable changes
 (for example, Graphics.translate).
 
 If you override this in a subclass you should not make permanent
 changes to the passed in Graphics. For example, you
 should not alter the clip Rectangle or modify the
 transform. If you need to do these operations you may find it
 easier to create a new Graphics from the passed in
 Graphics and manipulate it. Further, if you do not
 invoker super's implementation you must honor the opaque property,
 that is
 if this component is opaque, you must completely fill in the background
 in a non-opaque color. If you do not honor the opaque property you
 will likely see visual artifacts.
 
 The passed in Graphics object might
 have a transform other than the identify transform
 installed on it.  In this case, you might get
 unexpected results if you cumulatively apply
 another transform.

Overrides:
paintComponent in class JComponent
Parameters:
g - the Graphics object to protect
See Also:
JComponent.paint(java.awt.Graphics), 
ComponentUI


"
MetalComboBoxButton,setComboBox(JComboBox cb),void,NULL,"

setComboBox
public final void setComboBox(JComboBox cb)

"
MetalComboBoxButton,setComboIcon(Icon i),void,NULL,"

setComboIcon
public final void setComboIcon(Icon i)

"
MetalComboBoxButton,setEnabled(boolean enabled),void,Enables (or disables) the button.,"

setEnabled
public void setEnabled(boolean enabled)
Description copied from class: AbstractButton
Enables (or disables) the button.

Overrides:
setEnabled in class AbstractButton
Parameters:
enabled - true to enable the button, otherwise false
See Also:
Component.isEnabled(), 
Component.isLightweight()


"
MetalComboBoxButton,setIconOnly(boolean isIconOnly),void,NULL,"

setIconOnly
public final void setIconOnly(boolean isIconOnly)

"
MetalComboBoxIcon,getIconHeight(),int,Created a stub to satisfy the interface.,"

getIconHeight
public int getIconHeight()
Created a stub to satisfy the interface.

Specified by:
getIconHeight in interface Icon
Returns:
an int specifying the fixed height of the icon.


"
MetalComboBoxIcon,getIconWidth(),int,Created a stub to satisfy the interface.,"

getIconWidth
public int getIconWidth()
Created a stub to satisfy the interface.

Specified by:
getIconWidth in interface Icon
Returns:
an int specifying the fixed width of the icon.


"
MetalComboBoxIcon,"paintIcon(Component c, Graphics g, int x, int y)",void,Paints the horizontal bars for the,"

paintIcon
public void paintIcon(Component c,
                      Graphics g,
                      int x,
                      int y)
Paints the horizontal bars for the

Specified by:
paintIcon in interface Icon


"
MetalComboBoxUI,configureEditor(),void,This protected method is implementation specific and should be private.,"

configureEditor
public void configureEditor()
Description copied from class: BasicComboBoxUI
This protected method is implementation specific and should be private.
 do not call or override.

Overrides:
configureEditor in class BasicComboBoxUI
See Also:
BasicComboBoxUI.addEditor()


"
MetalComboBoxUI,createArrowButton(),protected JButton,Creates a button which will be used as the control to show or hide the popup portion of the combo box.,"

createArrowButton
protected JButton createArrowButton()
Description copied from class: BasicComboBoxUI
Creates a button which will be used as the control to show or hide
 the popup portion of the combo box.

Overrides:
createArrowButton in class BasicComboBoxUI
Returns:
a button which represents the popup control


"
MetalComboBoxUI,createEditor(),protected ComboBoxEditor,Creates the default editor that will be used in editable combo boxes.,"

createEditor
protected ComboBoxEditor createEditor()
Description copied from class: BasicComboBoxUI
Creates the default editor that will be used in editable combo boxes.
 A default editor will be used only if an editor has not been
 explicitly set with setEditor.

Overrides:
createEditor in class BasicComboBoxUI
Returns:
a ComboBoxEditor used for the combo box
See Also:
JComboBox.setEditor(javax.swing.ComboBoxEditor)


"
MetalComboBoxUI,createLayoutManager(),protected LayoutManager,Creates a layout manager for managing the components which make up the combo box.,"

createLayoutManager
protected LayoutManager createLayoutManager()
Description copied from class: BasicComboBoxUI
Creates a layout manager for managing the components which make up the
 combo box.

Overrides:
createLayoutManager in class BasicComboBoxUI
Returns:
an instance of a layout manager


"
MetalComboBoxUI,createPopup(),protected ComboPopup,Creates the popup portion of the combo box.,"

createPopup
protected ComboPopup createPopup()
Description copied from class: BasicComboBoxUI
Creates the popup portion of the combo box.

Overrides:
createPopup in class BasicComboBoxUI
Returns:
an instance of ComboPopup
See Also:
ComboPopup


"
MetalComboBoxUI,createPropertyChangeListener(),PropertyChangeListener,Creates a PropertyChangeListener which will be added to the combo box.,"

createPropertyChangeListener
public PropertyChangeListener createPropertyChangeListener()
Description copied from class: BasicComboBoxUI
Creates a PropertyChangeListener which will be added to
 the combo box. If this method returns null then it will not
 be added to the combo box.

Overrides:
createPropertyChangeListener in class BasicComboBoxUI
Returns:
an instance of a PropertyChangeListener or null


"
MetalComboBoxUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
MetalComboBoxUI,editablePropertyChanged(PropertyChangeEvent e),protected void,Deprecated. As of Java 2 platform v1.4.,"

editablePropertyChanged
@Deprecated
protected void editablePropertyChanged(PropertyChangeEvent e)
Deprecated. As of Java 2 platform v1.4.
As of Java 2 platform v1.4 this method is no longer used. Do not call or
 override. All the functionality of this method is in the
 MetalPropertyChangeListener.

"
MetalComboBoxUI,"getBaseline(JComponent c, int width, int height)",int,Returns the baseline.,"

getBaseline
public int getBaseline(JComponent c,
                       int width,
                       int height)
Returns the baseline.

Overrides:
getBaseline in class BasicComboBoxUI
Parameters:
c - JComponent baseline is being requested for
width - the width to get the baseline for
height - the height to get the baseline for
Returns:
baseline or a value < 0 indicating there is no reasonable
                  baseline
Throws:
NullPointerException - if c is null
IllegalArgumentException - if width or height is < 0
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
MetalComboBoxUI,getMinimumSize(JComponent c),Dimension,The minimum size is the size of the display area plus insets plus the button.,"

getMinimumSize
public Dimension getMinimumSize(JComponent c)
Description copied from class: BasicComboBoxUI
The minimum size is the size of the display area plus insets plus the button.

Overrides:
getMinimumSize in class BasicComboBoxUI
Parameters:
c - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MetalComboBoxUI,"layoutComboBox(Container parent, MetalComboBoxUI.MetalComboBoxLayoutManager manager)",void,NULL,"

layoutComboBox
public void layoutComboBox(Container parent,
                           MetalComboBoxUI.MetalComboBoxLayoutManager manager)

"
MetalComboBoxUI,"paint(Graphics g, JComponent c)",void,Paints the specified component appropriately for the look and feel.,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: ComponentUI
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class BasicComboBoxUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MetalComboBoxUI,"paintCurrentValue(Graphics g, Rectangle bounds, boolean hasFocus)",void,If necessary paints the currently selected item.,"

paintCurrentValue
public void paintCurrentValue(Graphics g,
                              Rectangle bounds,
                              boolean hasFocus)
If necessary paints the currently selected item.

Overrides:
paintCurrentValue in class BasicComboBoxUI
Parameters:
g - Graphics to paint to
bounds - Region to paint current value to
hasFocus - whether or not the JComboBox has focus
Throws:
NullPointerException - if any of the arguments are null.
Since:
1.5


"
MetalComboBoxUI,"paintCurrentValueBackground(Graphics g, Rectangle bounds, boolean hasFocus)",void,If necessary paints the background of the currently selected item.,"

paintCurrentValueBackground
public void paintCurrentValueBackground(Graphics g,
                                        Rectangle bounds,
                                        boolean hasFocus)
If necessary paints the background of the currently selected item.

Overrides:
paintCurrentValueBackground in class BasicComboBoxUI
Parameters:
g - Graphics to paint to
bounds - Region to paint background to
hasFocus - whether or not the JComboBox has focus
Throws:
NullPointerException - if any of the arguments are null.
Since:
1.5


"
MetalComboBoxUI,removeListeners(),protected void,Deprecated. As of Java 2 platform v1.4.,"

removeListeners
@Deprecated
protected void removeListeners()
Deprecated. As of Java 2 platform v1.4.
As of Java 2 platform v1.4 this method is no
 longer used.

"
MetalComboBoxUI,unconfigureEditor(),void,This protected method is implementation specific and should be private.,"

unconfigureEditor
public void unconfigureEditor()
Description copied from class: BasicComboBoxUI
This protected method is implementation specific and should be private.
 Do not call or override.

Overrides:
unconfigureEditor in class BasicComboBoxUI
See Also:
BasicComboBoxUI.addEditor()


"
MetalDesktopIconUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
MetalDesktopIconUI,getMaximumSize(JComponent c),Dimension,Desktop icons can not be resized.,"

getMaximumSize
public Dimension getMaximumSize(JComponent c)
Description copied from class: BasicDesktopIconUI
Desktop icons can not be resized.  Therefore, we should always
 return the minimum size of the desktop icon.

Overrides:
getMaximumSize in class BasicDesktopIconUI
Parameters:
c - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
BasicDesktopIconUI.getMinimumSize(javax.swing.JComponent)


"
MetalDesktopIconUI,getMinimumSize(JComponent c),Dimension,Returns the specified component's minimum size appropriate for the look and feel.,"

getMinimumSize
public Dimension getMinimumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's minimum size appropriate for
 the look and feel.  If null is returned, the minimum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMinimumSize in class BasicDesktopIconUI
Parameters:
c - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MetalDesktopIconUI,getPreferredSize(JComponent c),Dimension,Returns the specified component's preferred size appropriate for the look and feel.,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's preferred size appropriate for
 the look and feel.  If null is returned, the preferred
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method returns null.

Overrides:
getPreferredSize in class BasicDesktopIconUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MetalDesktopIconUI,installComponents(),protected void,NULL,"

installComponents
protected void installComponents()

Overrides:
installComponents in class BasicDesktopIconUI


"
MetalDesktopIconUI,installDefaults(),protected void,NULL,"

installDefaults
protected void installDefaults()

Overrides:
installDefaults in class BasicDesktopIconUI


"
MetalDesktopIconUI,installListeners(),protected void,NULL,"

installListeners
protected void installListeners()

Overrides:
installListeners in class BasicDesktopIconUI


"
MetalDesktopIconUI,uninstallComponents(),protected void,NULL,"

uninstallComponents
protected void uninstallComponents()

Overrides:
uninstallComponents in class BasicDesktopIconUI


"
MetalDesktopIconUI,uninstallListeners(),protected void,NULL,"

uninstallListeners
protected void uninstallListeners()

Overrides:
uninstallListeners in class BasicDesktopIconUI


"
MetalFileChooserUI,addControlButtons(),protected void,NULL,"

addControlButtons
protected void addControlButtons()

"
MetalFileChooserUI,createActionMap(),protected ActionMap,NULL,"

createActionMap
protected ActionMap createActionMap()

"
MetalFileChooserUI,createDetailsView(JFileChooser fc),protected JPanel,NULL,"

createDetailsView
protected JPanel createDetailsView(JFileChooser fc)

"
MetalFileChooserUI,createDirectoryComboBoxModel(JFileChooser fc),protected MetalFileChooserUI.DirectoryComboBoxModel,NULL,"

createDirectoryComboBoxModel
protected MetalFileChooserUI.DirectoryComboBoxModel createDirectoryComboBoxModel(JFileChooser fc)

"
MetalFileChooserUI,createDirectoryComboBoxRenderer(JFileChooser fc),protected javax.swing.plaf.metal.MetalFileChooserUI.DirectoryComboBoxRenderer,NULL,"

createDirectoryComboBoxRenderer
protected javax.swing.plaf.metal.MetalFileChooserUI.DirectoryComboBoxRenderer createDirectoryComboBoxRenderer(JFileChooser fc)

"
MetalFileChooserUI,createFilterComboBoxModel(),protected MetalFileChooserUI.FilterComboBoxModel,NULL,"

createFilterComboBoxModel
protected MetalFileChooserUI.FilterComboBoxModel createFilterComboBoxModel()

"
MetalFileChooserUI,createFilterComboBoxRenderer(),protected MetalFileChooserUI.FilterComboBoxRenderer,NULL,"

createFilterComboBoxRenderer
protected MetalFileChooserUI.FilterComboBoxRenderer createFilterComboBoxRenderer()

"
MetalFileChooserUI,createList(JFileChooser fc),protected JPanel,NULL,"

createList
protected JPanel createList(JFileChooser fc)

"
MetalFileChooserUI,createListSelectionListener(JFileChooser fc),ListSelectionListener,Creates a selection listener for the list of files and directories.,"

createListSelectionListener
public ListSelectionListener createListSelectionListener(JFileChooser fc)
Creates a selection listener for the list of files and directories.

Overrides:
createListSelectionListener in class BasicFileChooserUI
Parameters:
fc - a JFileChooser
Returns:
a ListSelectionListener


"
MetalFileChooserUI,createPropertyChangeListener(JFileChooser fc),PropertyChangeListener,NULL,"

createPropertyChangeListener
public PropertyChangeListener createPropertyChangeListener(JFileChooser fc)

Overrides:
createPropertyChangeListener in class BasicFileChooserUI


"
MetalFileChooserUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
MetalFileChooserUI,"ensureFileIsVisible(JFileChooser fc, File f)",void,NULL,"

ensureFileIsVisible
public void ensureFileIsVisible(JFileChooser fc,
                                File f)

Overrides:
ensureFileIsVisible in class BasicFileChooserUI


"
MetalFileChooserUI,getActionMap(),protected ActionMap,NULL,"

getActionMap
protected ActionMap getActionMap()

"
MetalFileChooserUI,getApproveButton(JFileChooser fc),protected JButton,NULL,"

getApproveButton
protected JButton getApproveButton(JFileChooser fc)

Overrides:
getApproveButton in class BasicFileChooserUI


"
MetalFileChooserUI,getBottomPanel(),protected JPanel,NULL,"

getBottomPanel
protected JPanel getBottomPanel()

"
MetalFileChooserUI,getButtonPanel(),protected JPanel,NULL,"

getButtonPanel
protected JPanel getButtonPanel()

"
MetalFileChooserUI,getDirectoryName(),String,NULL,"

getDirectoryName
public String getDirectoryName()

Overrides:
getDirectoryName in class BasicFileChooserUI


"
MetalFileChooserUI,getFileName(),String,NULL,"

getFileName
public String getFileName()

Overrides:
getFileName in class BasicFileChooserUI


"
MetalFileChooserUI,getMaximumSize(JComponent c),Dimension,Returns the maximum size of the JFileChooser.,"

getMaximumSize
public Dimension getMaximumSize(JComponent c)
Returns the maximum size of the JFileChooser.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
c - a JFileChooser
Returns:
a Dimension specifying the maximum
           width and height of the file chooser
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
MetalFileChooserUI,getMinimumSize(JComponent c),Dimension,Returns the minimum size of the JFileChooser.,"

getMinimumSize
public Dimension getMinimumSize(JComponent c)
Returns the minimum size of the JFileChooser.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
c - a JFileChooser
Returns:
a Dimension specifying the minimum
           width and height of the file chooser
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
MetalFileChooserUI,getPreferredSize(JComponent c),Dimension,Returns the preferred size of the specified JFileChooser.,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Returns the preferred size of the specified
 JFileChooser.
 The preferred size is at least as large,
 in both height and width,
 as the preferred size recommended
 by the file chooser's layout manager.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
c - a JFileChooser
Returns:
a Dimension specifying the preferred
           width and height of the file chooser
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MetalFileChooserUI,installComponents(JFileChooser fc),void,NULL,"

installComponents
public void installComponents(JFileChooser fc)

Overrides:
installComponents in class BasicFileChooserUI


"
MetalFileChooserUI,installListeners(JFileChooser fc),protected void,NULL,"

installListeners
protected void installListeners(JFileChooser fc)

Overrides:
installListeners in class BasicFileChooserUI


"
MetalFileChooserUI,installStrings(JFileChooser fc),protected void,NULL,"

installStrings
protected void installStrings(JFileChooser fc)

Overrides:
installStrings in class BasicFileChooserUI


"
MetalFileChooserUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class BasicFileChooserUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MetalFileChooserUI,removeControlButtons(),protected void,NULL,"

removeControlButtons
protected void removeControlButtons()

"
MetalFileChooserUI,rescanCurrentDirectory(JFileChooser fc),void,NULL,"

rescanCurrentDirectory
public void rescanCurrentDirectory(JFileChooser fc)

Overrides:
rescanCurrentDirectory in class BasicFileChooserUI


"
MetalFileChooserUI,setDirectoryName(String dirname),void,NULL,"

setDirectoryName
public void setDirectoryName(String dirname)

Overrides:
setDirectoryName in class BasicFileChooserUI


"
MetalFileChooserUI,setDirectorySelected(boolean directorySelected),protected void,Property to remember whether a directory is currently selected in the UI.,"

setDirectorySelected
protected void setDirectorySelected(boolean directorySelected)
Property to remember whether a directory is currently selected in the UI.
 This is normally called by the UI on a selection event.

Overrides:
setDirectorySelected in class BasicFileChooserUI
Parameters:
directorySelected - if a directory is currently selected.
Since:
1.4


"
MetalFileChooserUI,setFileName(String filename),void,NULL,"

setFileName
public void setFileName(String filename)

Overrides:
setFileName in class BasicFileChooserUI


"
MetalFileChooserUI,uninstallComponents(JFileChooser fc),void,NULL,"

uninstallComponents
public void uninstallComponents(JFileChooser fc)

Overrides:
uninstallComponents in class BasicFileChooserUI


"
MetalFileChooserUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class BasicFileChooserUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MetalFileChooserUI,valueChanged(ListSelectionEvent e),void,NULL,"

valueChanged
public void valueChanged(ListSelectionEvent e)

"
MetalIconFactory,getCheckBoxIcon(),static Icon,Returns a checkbox icon.,"

getCheckBoxIcon
public static Icon getCheckBoxIcon()
Returns a checkbox icon.

Since:
1.3


"
MetalIconFactory,getCheckBoxMenuItemIcon(),static Icon,NULL,"

getCheckBoxMenuItemIcon
public static Icon getCheckBoxMenuItemIcon()

"
MetalIconFactory,getFileChooserDetailViewIcon(),static Icon,NULL,"

getFileChooserDetailViewIcon
public static Icon getFileChooserDetailViewIcon()

"
MetalIconFactory,getFileChooserHomeFolderIcon(),static Icon,NULL,"

getFileChooserHomeFolderIcon
public static Icon getFileChooserHomeFolderIcon()

"
MetalIconFactory,getFileChooserListViewIcon(),static Icon,NULL,"

getFileChooserListViewIcon
public static Icon getFileChooserListViewIcon()

"
MetalIconFactory,getFileChooserNewFolderIcon(),static Icon,NULL,"

getFileChooserNewFolderIcon
public static Icon getFileChooserNewFolderIcon()

"
MetalIconFactory,getFileChooserUpFolderIcon(),static Icon,NULL,"

getFileChooserUpFolderIcon
public static Icon getFileChooserUpFolderIcon()

"
MetalIconFactory,getHorizontalSliderThumbIcon(),static Icon,NULL,"

getHorizontalSliderThumbIcon
public static Icon getHorizontalSliderThumbIcon()

"
MetalIconFactory,getInternalFrameAltMaximizeIcon(int size),static Icon,NULL,"

getInternalFrameAltMaximizeIcon
public static Icon getInternalFrameAltMaximizeIcon(int size)

"
MetalIconFactory,getInternalFrameCloseIcon(int size),static Icon,NULL,"

getInternalFrameCloseIcon
public static Icon getInternalFrameCloseIcon(int size)

"
MetalIconFactory,getInternalFrameDefaultMenuIcon(),static Icon,NULL,"

getInternalFrameDefaultMenuIcon
public static Icon getInternalFrameDefaultMenuIcon()

"
MetalIconFactory,getInternalFrameMaximizeIcon(int size),static Icon,NULL,"

getInternalFrameMaximizeIcon
public static Icon getInternalFrameMaximizeIcon(int size)

"
MetalIconFactory,getInternalFrameMinimizeIcon(int size),static Icon,NULL,"

getInternalFrameMinimizeIcon
public static Icon getInternalFrameMinimizeIcon(int size)

"
MetalIconFactory,getMenuArrowIcon(),static Icon,NULL,"

getMenuArrowIcon
public static Icon getMenuArrowIcon()

"
MetalIconFactory,getMenuItemArrowIcon(),static Icon,NULL,"

getMenuItemArrowIcon
public static Icon getMenuItemArrowIcon()

"
MetalIconFactory,getMenuItemCheckIcon(),static Icon,Returns an icon to be used by JCheckBoxMenuItem.,"

getMenuItemCheckIcon
public static Icon getMenuItemCheckIcon()
Returns an icon to be used by JCheckBoxMenuItem.

Returns:
the default icon for check box menu items,
         or null if no default exists


"
MetalIconFactory,getRadioButtonIcon(),static Icon,NULL,"

getRadioButtonIcon
public static Icon getRadioButtonIcon()

"
MetalIconFactory,getRadioButtonMenuItemIcon(),static Icon,NULL,"

getRadioButtonMenuItemIcon
public static Icon getRadioButtonMenuItemIcon()

"
MetalIconFactory,getTreeComputerIcon(),static Icon,NULL,"

getTreeComputerIcon
public static Icon getTreeComputerIcon()

"
MetalIconFactory,getTreeControlIcon(boolean isCollapsed),static Icon,NULL,"

getTreeControlIcon
public static Icon getTreeControlIcon(boolean isCollapsed)

"
MetalIconFactory,getTreeFloppyDriveIcon(),static Icon,NULL,"

getTreeFloppyDriveIcon
public static Icon getTreeFloppyDriveIcon()

"
MetalIconFactory,getTreeFolderIcon(),static Icon,NULL,"

getTreeFolderIcon
public static Icon getTreeFolderIcon()

"
MetalIconFactory,getTreeHardDriveIcon(),static Icon,NULL,"

getTreeHardDriveIcon
public static Icon getTreeHardDriveIcon()

"
MetalIconFactory,getTreeLeafIcon(),static Icon,NULL,"

getTreeLeafIcon
public static Icon getTreeLeafIcon()

"
MetalIconFactory,getVerticalSliderThumbIcon(),static Icon,NULL,"

getVerticalSliderThumbIcon
public static Icon getVerticalSliderThumbIcon()

"
MetalIconFactory.FileIcon16,getAdditionalHeight(),int,NULL,"

getAdditionalHeight
public int getAdditionalHeight()

"
MetalIconFactory.FileIcon16,getIconHeight(),int,Returns the icon's height.,"

getIconHeight
public int getIconHeight()
Description copied from interface: Icon
Returns the icon's height.

Specified by:
getIconHeight in interface Icon
Returns:
an int specifying the fixed height of the icon.


"
MetalIconFactory.FileIcon16,getIconWidth(),int,Returns the icon's width.,"

getIconWidth
public int getIconWidth()
Description copied from interface: Icon
Returns the icon's width.

Specified by:
getIconWidth in interface Icon
Returns:
an int specifying the fixed width of the icon.


"
MetalIconFactory.FileIcon16,getShift(),int,NULL,"

getShift
public int getShift()

"
MetalIconFactory.FileIcon16,"paintIcon(Component c, Graphics g, int x, int y)",void,Draw the icon at the specified location.,"

paintIcon
public void paintIcon(Component c,
                      Graphics g,
                      int x,
                      int y)
Description copied from interface: Icon
Draw the icon at the specified location.  Icon implementations
 may use the Component argument to get properties useful for
 painting, e.g. the foreground or background color.

Specified by:
paintIcon in interface Icon


"
MetalIconFactory.FolderIcon16,getAdditionalHeight(),int,NULL,"

getAdditionalHeight
public int getAdditionalHeight()

"
MetalIconFactory.FolderIcon16,getIconHeight(),int,Returns the icon's height.,"

getIconHeight
public int getIconHeight()
Description copied from interface: Icon
Returns the icon's height.

Specified by:
getIconHeight in interface Icon
Returns:
an int specifying the fixed height of the icon.


"
MetalIconFactory.FolderIcon16,getIconWidth(),int,Returns the icon's width.,"

getIconWidth
public int getIconWidth()
Description copied from interface: Icon
Returns the icon's width.

Specified by:
getIconWidth in interface Icon
Returns:
an int specifying the fixed width of the icon.


"
MetalIconFactory.FolderIcon16,getShift(),int,NULL,"

getShift
public int getShift()

"
MetalIconFactory.FolderIcon16,"paintIcon(Component c, Graphics g, int x, int y)",void,Draw the icon at the specified location.,"

paintIcon
public void paintIcon(Component c,
                      Graphics g,
                      int x,
                      int y)
Description copied from interface: Icon
Draw the icon at the specified location.  Icon implementations
 may use the Component argument to get properties useful for
 painting, e.g. the foreground or background color.

Specified by:
paintIcon in interface Icon


"
MetalIconFactory.PaletteCloseIcon,getIconHeight(),int,Returns the icon's height.,"

getIconHeight
public int getIconHeight()
Description copied from interface: Icon
Returns the icon's height.

Specified by:
getIconHeight in interface Icon
Returns:
an int specifying the fixed height of the icon.


"
MetalIconFactory.PaletteCloseIcon,getIconWidth(),int,Returns the icon's width.,"

getIconWidth
public int getIconWidth()
Description copied from interface: Icon
Returns the icon's width.

Specified by:
getIconWidth in interface Icon
Returns:
an int specifying the fixed width of the icon.


"
MetalIconFactory.PaletteCloseIcon,"paintIcon(Component c, Graphics g, int x, int y)",void,Draw the icon at the specified location.,"

paintIcon
public void paintIcon(Component c,
                      Graphics g,
                      int x,
                      int y)
Description copied from interface: Icon
Draw the icon at the specified location.  Icon implementations
 may use the Component argument to get properties useful for
 painting, e.g. the foreground or background color.

Specified by:
paintIcon in interface Icon


"
MetalIconFactory.TreeControlIcon,getIconHeight(),int,Returns the icon's height.,"

getIconHeight
public int getIconHeight()
Description copied from interface: Icon
Returns the icon's height.

Specified by:
getIconHeight in interface Icon
Returns:
an int specifying the fixed height of the icon.


"
MetalIconFactory.TreeControlIcon,getIconWidth(),int,Returns the icon's width.,"

getIconWidth
public int getIconWidth()
Description copied from interface: Icon
Returns the icon's width.

Specified by:
getIconWidth in interface Icon
Returns:
an int specifying the fixed width of the icon.


"
MetalIconFactory.TreeControlIcon,"paintIcon(Component c, Graphics g, int x, int y)",void,Draw the icon at the specified location.,"

paintIcon
public void paintIcon(Component c,
                      Graphics g,
                      int x,
                      int y)
Description copied from interface: Icon
Draw the icon at the specified location.  Icon implementations
 may use the Component argument to get properties useful for
 painting, e.g. the foreground or background color.

Specified by:
paintIcon in interface Icon


"
MetalIconFactory.TreeControlIcon,"paintMe(Component c, Graphics g, int x, int y)",void,NULL,"

paintMe
public void paintMe(Component c,
                    Graphics g,
                    int x,
                    int y)

"
MetalIconFactory.TreeFolderIcon,getAdditionalHeight(),int,NULL,"

getAdditionalHeight
public int getAdditionalHeight()

Overrides:
getAdditionalHeight in class MetalIconFactory.FolderIcon16


"
MetalIconFactory.TreeFolderIcon,getShift(),int,NULL,"

getShift
public int getShift()

Overrides:
getShift in class MetalIconFactory.FolderIcon16


"
MetalIconFactory.TreeLeafIcon,getAdditionalHeight(),int,NULL,"

getAdditionalHeight
public int getAdditionalHeight()

Overrides:
getAdditionalHeight in class MetalIconFactory.FileIcon16


"
MetalIconFactory.TreeLeafIcon,getShift(),int,NULL,"

getShift
public int getShift()

Overrides:
getShift in class MetalIconFactory.FileIcon16


"
MetalInternalFrameTitlePane,addNotify(),void,Notifies this component that it now has a parent component.,"

addNotify
public void addNotify()
Description copied from class: JComponent
Notifies this component that it now has a parent component.
 When this method is invoked, the chain of parent components is
 set up with KeyboardAction event listeners.
 This method is called by the toolkit internally and should
 not be called directly by programs.

Overrides:
addNotify in class JComponent
See Also:
JComponent.registerKeyboardAction(java.awt.event.ActionListener, java.lang.String, javax.swing.KeyStroke, int)


"
MetalInternalFrameTitlePane,addSubComponents(),protected void,Override the parent's method avoid creating a menu bar.,"

addSubComponents
protected void addSubComponents()
Override the parent's method avoid creating a menu bar. Metal frames
 do not have system menus.

Overrides:
addSubComponents in class BasicInternalFrameTitlePane


"
MetalInternalFrameTitlePane,addSystemMenuItems(JMenu systemMenu),protected void,Override the parent's method to do nothing.,"

addSystemMenuItems
protected void addSystemMenuItems(JMenu systemMenu)
Override the parent's method to do nothing. Metal frames do not
 have system menus.

Overrides:
addSystemMenuItems in class BasicInternalFrameTitlePane


"
MetalInternalFrameTitlePane,assembleSystemMenu(),protected void,Override the parent's method to do nothing.,"

assembleSystemMenu
protected void assembleSystemMenu()
Override the parent's method to do nothing. Metal frames do not
 have system menus.

Overrides:
assembleSystemMenu in class BasicInternalFrameTitlePane


"
MetalInternalFrameTitlePane,createButtons(),protected void,NULL,"

createButtons
protected void createButtons()

Overrides:
createButtons in class BasicInternalFrameTitlePane


"
MetalInternalFrameTitlePane,createLayout(),protected LayoutManager,NULL,"

createLayout
protected LayoutManager createLayout()

Overrides:
createLayout in class BasicInternalFrameTitlePane


"
MetalInternalFrameTitlePane,createPropertyChangeListener(),protected PropertyChangeListener,NULL,"

createPropertyChangeListener
protected PropertyChangeListener createPropertyChangeListener()

Overrides:
createPropertyChangeListener in class BasicInternalFrameTitlePane


"
MetalInternalFrameTitlePane,installDefaults(),protected void,NULL,"

installDefaults
protected void installDefaults()

Overrides:
installDefaults in class BasicInternalFrameTitlePane


"
MetalInternalFrameTitlePane,paintComponent(Graphics g),void,"Calls the UI delegate's paint method, if the UI delegate is non-null.","

paintComponent
public void paintComponent(Graphics g)
Description copied from class: JComponent
Calls the UI delegate's paint method, if the UI delegate
 is non-null.  We pass the delegate a copy of the
 Graphics object to protect the rest of the
 paint code from irrevocable changes
 (for example, Graphics.translate).
 
 If you override this in a subclass you should not make permanent
 changes to the passed in Graphics. For example, you
 should not alter the clip Rectangle or modify the
 transform. If you need to do these operations you may find it
 easier to create a new Graphics from the passed in
 Graphics and manipulate it. Further, if you do not
 invoker super's implementation you must honor the opaque property,
 that is
 if this component is opaque, you must completely fill in the background
 in a non-opaque color. If you do not honor the opaque property you
 will likely see visual artifacts.
 
 The passed in Graphics object might
 have a transform other than the identify transform
 installed on it.  In this case, you might get
 unexpected results if you cumulatively apply
 another transform.

Overrides:
paintComponent in class BasicInternalFrameTitlePane
Parameters:
g - the Graphics object to protect
See Also:
JComponent.paint(java.awt.Graphics), 
ComponentUI


"
MetalInternalFrameTitlePane,paintPalette(Graphics g),void,NULL,"

paintPalette
public void paintPalette(Graphics g)

"
MetalInternalFrameTitlePane,setPalette(boolean b),void,NULL,"

setPalette
public void setPalette(boolean b)

"
MetalInternalFrameTitlePane,showSystemMenu(),protected void,Override the parent's method to do nothing.,"

showSystemMenu
protected void showSystemMenu()
Override the parent's method to do nothing. Metal frames do not
 have system menus.

Overrides:
showSystemMenu in class BasicInternalFrameTitlePane


"
MetalInternalFrameTitlePane,uninstallDefaults(),protected void,NULL,"

uninstallDefaults
protected void uninstallDefaults()

Overrides:
uninstallDefaults in class BasicInternalFrameTitlePane


"
MetalInternalFrameUI,createBorderListener(JInternalFrame w),protected MouseInputAdapter,Returns the MouseInputAdapter that will be installed on the TitlePane.,"

createBorderListener
protected MouseInputAdapter createBorderListener(JInternalFrame w)
Returns the MouseInputAdapter that will be installed
 on the TitlePane.

Overrides:
createBorderListener in class BasicInternalFrameUI
Parameters:
w - the JInternalFrame
Returns:
the MouseInputAdapter that will be installed
 on the TitlePane.
Since:
1.6


"
MetalInternalFrameUI,createNorthPane(JInternalFrame w),protected JComponent,NULL,"

createNorthPane
protected JComponent createNorthPane(JInternalFrame w)

Overrides:
createNorthPane in class BasicInternalFrameUI


"
MetalInternalFrameUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
MetalInternalFrameUI,installKeyboardActions(),protected void,NULL,"

installKeyboardActions
protected void installKeyboardActions()

Overrides:
installKeyboardActions in class BasicInternalFrameUI


"
MetalInternalFrameUI,installListeners(),protected void,NULL,"

installListeners
protected void installListeners()

Overrides:
installListeners in class BasicInternalFrameUI


"
MetalInternalFrameUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class BasicInternalFrameUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MetalInternalFrameUI,setPalette(boolean isPalette),void,NULL,"

setPalette
public void setPalette(boolean isPalette)

"
MetalInternalFrameUI,uninstallComponents(),protected void,NULL,"

uninstallComponents
protected void uninstallComponents()

Overrides:
uninstallComponents in class BasicInternalFrameUI


"
MetalInternalFrameUI,uninstallKeyboardActions(),protected void,NULL,"

uninstallKeyboardActions
protected void uninstallKeyboardActions()

Overrides:
uninstallKeyboardActions in class BasicInternalFrameUI


"
MetalInternalFrameUI,uninstallListeners(),protected void,NULL,"

uninstallListeners
protected void uninstallListeners()

Overrides:
uninstallListeners in class BasicInternalFrameUI


"
MetalInternalFrameUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class BasicInternalFrameUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MetalLabelUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
MetalLabelUI,"paintDisabledText(JLabel l, Graphics g, String s, int textX, int textY)",protected void,Just paint the text gray (Label.disabledForeground) rather than in the labels foreground color.,"

paintDisabledText
protected void paintDisabledText(JLabel l,
                                 Graphics g,
                                 String s,
                                 int textX,
                                 int textY)
Just paint the text gray (Label.disabledForeground) rather than
 in the labels foreground color.

Overrides:
paintDisabledText in class BasicLabelUI
Parameters:
l - an instance of JLabel
g - an instance of Graphics
s - a text
textX - an X coordinate
textY - an Y coordinate
See Also:
BasicLabelUI.paint(java.awt.Graphics, javax.swing.JComponent), 
BasicLabelUI.paintEnabledText(javax.swing.JLabel, java.awt.Graphics, java.lang.String, int, int)


"
MetalLookAndFeel,createDefaultTheme(),protected void,Ensures the current MetalTheme is non-null.,"

createDefaultTheme
protected void createDefaultTheme()
Ensures the current MetalTheme is non-null. This is
 a cover method for getCurrentTheme.

See Also:
getCurrentTheme()


"
MetalLookAndFeel,getAcceleratorForeground(),static ColorUIResource,Returns the accelerator foreground color of the current theme.,"

getAcceleratorForeground
public static ColorUIResource getAcceleratorForeground()
Returns the accelerator foreground color of the current theme. This is
 a cover method for getCurrentTheme().getAcceleratorForeground().

Returns:
the separator accelerator foreground color
See Also:
MetalTheme


"
MetalLookAndFeel,getAcceleratorSelectedForeground(),static ColorUIResource,Returns the accelerator selected foreground color of the current theme.,"

getAcceleratorSelectedForeground
public static ColorUIResource getAcceleratorSelectedForeground()
Returns the accelerator selected foreground color of the
 current theme. This is a cover method for getCurrentTheme().getAcceleratorSelectedForeground().

Returns:
the accelerator selected foreground color
See Also:
MetalTheme


"
MetalLookAndFeel,getBlack(),static ColorUIResource,Returns the black color of the current theme.,"

getBlack
public static ColorUIResource getBlack()
Returns the black color of the current theme. This is a
 cover method for getCurrentTheme().getBlack().

Returns:
the black color
See Also:
MetalTheme


"
MetalLookAndFeel,getControl(),static ColorUIResource,Returns the control color of the current theme.,"

getControl
public static ColorUIResource getControl()
Returns the control color of the current theme. This is a
 cover method for getCurrentTheme().getControl().

Returns:
the control color
See Also:
MetalTheme


"
MetalLookAndFeel,getControlDarkShadow(),static ColorUIResource,Returns the control dark shadow color of the current theme.,"

getControlDarkShadow
public static ColorUIResource getControlDarkShadow()
Returns the control dark shadow color of the current theme. This is a
 cover method for getCurrentTheme().getControlDarkShadow().

Returns:
the control dark shadow color
See Also:
MetalTheme


"
MetalLookAndFeel,getControlDisabled(),static ColorUIResource,Returns the control disabled color of the current theme.,"

getControlDisabled
public static ColorUIResource getControlDisabled()
Returns the control disabled color of the current theme. This is a
 cover method for getCurrentTheme().getControlDisabled().

Returns:
the control disabled color
See Also:
MetalTheme


"
MetalLookAndFeel,getControlHighlight(),static ColorUIResource,Returns the control highlight color of the current theme.,"

getControlHighlight
public static ColorUIResource getControlHighlight()
Returns the control highlight color of the current theme. This is a
 cover method for getCurrentTheme().getControlHighlight().

Returns:
the control highlight color
See Also:
MetalTheme


"
MetalLookAndFeel,getControlInfo(),static ColorUIResource,Returns the control info color of the current theme.,"

getControlInfo
public static ColorUIResource getControlInfo()
Returns the control info color of the current theme. This is a
 cover method for getCurrentTheme().getControlInfo().

Returns:
the control info color
See Also:
MetalTheme


"
MetalLookAndFeel,getControlShadow(),static ColorUIResource,Returns the control shadow color of the current theme.,"

getControlShadow
public static ColorUIResource getControlShadow()
Returns the control shadow color of the current theme. This is a
 cover method for getCurrentTheme().getControlShadow().

Returns:
the control shadow color
See Also:
MetalTheme


"
MetalLookAndFeel,getControlTextColor(),static ColorUIResource,Returns the control text color of the current theme.,"

getControlTextColor
public static ColorUIResource getControlTextColor()
Returns the control text color of the current theme. This is a
 cover method for getCurrentTheme().getControlTextColor().

Returns:
the control text color
See Also:
MetalTheme


"
MetalLookAndFeel,getControlTextFont(),static FontUIResource,Returns the control text font of the current theme.,"

getControlTextFont
public static FontUIResource getControlTextFont()
Returns the control text font of the current theme. This is a
 cover method for getCurrentTheme().getControlTextColor().

Returns:
the control text font
See Also:
MetalTheme


"
MetalLookAndFeel,getCurrentTheme(),static MetalTheme,Return the theme currently being used by MetalLookAndFeel.,"

getCurrentTheme
public static MetalTheme getCurrentTheme()
Return the theme currently being used by MetalLookAndFeel.
 If the current theme is null, the default theme is created.

Returns:
the current theme
Since:
1.5
See Also:
setCurrentTheme(javax.swing.plaf.metal.MetalTheme)


"
MetalLookAndFeel,getDefaults(),UIDefaults,Returns the look and feel defaults.,"

getDefaults
public UIDefaults getDefaults()
Returns the look and feel defaults. This invokes, in order,
 createDefaultTheme(), super.getDefaults() and
 getCurrentTheme().addCustomEntriesToTable(table).
 
 While this method is public, it should only be invoked by the
 UIManager when the look and feel is set as the current
 look and feel and after initialize has been invoked.

Overrides:
getDefaults in class BasicLookAndFeel
Returns:
the look and feel defaults
See Also:
createDefaultTheme(), 
BasicLookAndFeel.getDefaults(), 
MetalTheme.addCustomEntriesToTable(UIDefaults)


"
MetalLookAndFeel,getDescription(),String,Returns a short description of this look and feel.,"

getDescription
public String getDescription()
Returns a short description of this look and feel. This returns
 ""The Java(tm) Look and Feel"".

Specified by:
getDescription in class LookAndFeel
Returns:
a short description for the look and feel


"
MetalLookAndFeel,getDesktopColor(),static ColorUIResource,Returns the desktop color of the current theme.,"

getDesktopColor
public static ColorUIResource getDesktopColor()
Returns the desktop color of the current theme. This is a
 cover method for getCurrentTheme().getDesktopColor().

Returns:
the desktop color
See Also:
MetalTheme


"
MetalLookAndFeel,"getDisabledIcon(JComponent component, Icon icon)",Icon,Returns an Icon with a disabled appearance.,"

getDisabledIcon
public Icon getDisabledIcon(JComponent component,
                            Icon icon)
Returns an Icon with a disabled appearance.
 This method is used to generate a disabled Icon when
 one has not been specified.  For example, if you create a
 JButton and only specify an Icon via
 setIcon this method will be called to generate the
 disabled Icon. If null is passed as icon
 this method returns null.
 
 Some look and feels might not render the disabled Icon, in which
 case they will ignore this.

Overrides:
getDisabledIcon in class LookAndFeel
Parameters:
component - JComponent that will display the Icon, may be null
icon - Icon to generate disable icon from.
Returns:
Disabled icon, or null if a suitable Icon can not be
         generated.
Since:
1.5


"
MetalLookAndFeel,"getDisabledSelectedIcon(JComponent component, Icon icon)",Icon,Returns an Icon for use by disabled components that are also selected.,"

getDisabledSelectedIcon
public Icon getDisabledSelectedIcon(JComponent component,
                                    Icon icon)
Returns an Icon for use by disabled
 components that are also selected. This method is used to generate an
 Icon for components that are in both the disabled and
 selected states but do not have a specific Icon for this
 state.  For example, if you create a JButton and only
 specify an Icon via setIcon this method
 will be called to generate the disabled and selected
 Icon. If null is passed as icon this method
 returns null.
 
 Some look and feels might not render the disabled and selected Icon,
 in which case they will ignore this.

Overrides:
getDisabledSelectedIcon in class LookAndFeel
Parameters:
component - JComponent that will display the Icon, may be null
icon - Icon to generate disabled and selected icon from.
Returns:
Disabled and Selected icon, or null if a suitable Icon can not
         be generated.
Since:
1.5


"
MetalLookAndFeel,getFocusColor(),static ColorUIResource,Returns the focus color of the current theme.,"

getFocusColor
public static ColorUIResource getFocusColor()
Returns the focus color of the current theme. This is a
 cover method for getCurrentTheme().getFocusColor().

Returns:
the focus color
See Also:
MetalTheme


"
MetalLookAndFeel,getHighlightedTextColor(),static ColorUIResource,Returns the highlighted text color of the current theme.,"

getHighlightedTextColor
public static ColorUIResource getHighlightedTextColor()
Returns the highlighted text color of the current theme. This is a
 cover method for getCurrentTheme().getHighlightedTextColor().

Returns:
the highlighted text color
See Also:
MetalTheme


"
MetalLookAndFeel,getID(),String,Returns an identifier for this look and feel.,"

getID
public String getID()
Returns an identifier for this look and feel. This returns
 ""Metal"".

Specified by:
getID in class LookAndFeel
Returns:
the identifier of this look and feel


"
MetalLookAndFeel,getInactiveControlTextColor(),static ColorUIResource,Returns the inactive control text color of the current theme.,"

getInactiveControlTextColor
public static ColorUIResource getInactiveControlTextColor()
Returns the inactive control text color of the current theme. This is a
 cover method for getCurrentTheme().getInactiveControlTextColor().

Returns:
the inactive control text color
See Also:
MetalTheme


"
MetalLookAndFeel,getInactiveSystemTextColor(),static ColorUIResource,Returns the inactive system text color of the current theme.,"

getInactiveSystemTextColor
public static ColorUIResource getInactiveSystemTextColor()
Returns the inactive system text color of the current theme. This is a
 cover method for getCurrentTheme().getInactiveSystemTextColor().

Returns:
the inactive system text color
See Also:
MetalTheme


"
MetalLookAndFeel,getLayoutStyle(),LayoutStyle,Returns a LayoutStyle implementing the Java look and feel design guidelines as specified at http://www.oracle.com/technetwork/java/hig-136467.html.,"

getLayoutStyle
public LayoutStyle getLayoutStyle()
Returns a LayoutStyle implementing the Java look and feel
 design guidelines as specified at
 http://www.oracle.com/technetwork/java/hig-136467.html.

Overrides:
getLayoutStyle in class LookAndFeel
Returns:
LayoutStyle implementing the Java look and feel design
         guidelines
Since:
1.6
See Also:
LayoutStyle.getInstance()


"
MetalLookAndFeel,getMenuBackground(),static ColorUIResource,Returns the menu background color of the current theme.,"

getMenuBackground
public static ColorUIResource getMenuBackground()
Returns the menu background color of the current theme. This is
 a cover method for getCurrentTheme().getMenuBackground().

Returns:
the menu background color
See Also:
MetalTheme


"
MetalLookAndFeel,getMenuDisabledForeground(),static ColorUIResource,Returns the menu disabled foreground color of the current theme.,"

getMenuDisabledForeground
public static ColorUIResource getMenuDisabledForeground()
Returns the menu disabled foreground color of the current theme. This is
 a cover method for
 getCurrentTheme().getMenuDisabledForeground().

Returns:
the menu disabled foreground color
See Also:
MetalTheme


"
MetalLookAndFeel,getMenuForeground(),static ColorUIResource,Returns the menu foreground color of the current theme.,"

getMenuForeground
public static ColorUIResource getMenuForeground()
Returns the menu foreground color of the current theme. This is
 a cover method for getCurrentTheme().getMenuForeground().

Returns:
the menu foreground color
See Also:
MetalTheme


"
MetalLookAndFeel,getMenuSelectedBackground(),static ColorUIResource,Returns the menu selected background color of the current theme.,"

getMenuSelectedBackground
public static ColorUIResource getMenuSelectedBackground()
Returns the menu selected background color of the current theme. This is
 a cover method for
 getCurrentTheme().getMenuSelectedBackground().

Returns:
the menu selected background color
See Also:
MetalTheme


"
MetalLookAndFeel,getMenuSelectedForeground(),static ColorUIResource,Returns the menu selected foreground color of the current theme.,"

getMenuSelectedForeground
public static ColorUIResource getMenuSelectedForeground()
Returns the menu selected foreground color of the current theme. This is
 a cover method for
 getCurrentTheme().getMenuSelectedForeground().

Returns:
the menu selected foreground color
See Also:
MetalTheme


"
MetalLookAndFeel,getMenuTextFont(),static FontUIResource,Returns the menu text font of the current theme.,"

getMenuTextFont
public static FontUIResource getMenuTextFont()
Returns the menu text font of the current theme. This is a
 cover method for getCurrentTheme().getMenuTextFont().

Returns:
the menu text font
See Also:
MetalTheme


"
MetalLookAndFeel,getName(),String,Returns the name of this look and feel.,"

getName
public String getName()
Returns the name of this look and feel. This returns
 ""Metal"".

Specified by:
getName in class LookAndFeel
Returns:
the name of this look and feel


"
MetalLookAndFeel,getPrimaryControl(),static ColorUIResource,Returns the primary control color of the current theme.,"

getPrimaryControl
public static ColorUIResource getPrimaryControl()
Returns the primary control color of the current theme. This is a
 cover method for getCurrentTheme().getPrimaryControl().

Returns:
the primary control color
See Also:
MetalTheme


"
MetalLookAndFeel,getPrimaryControlDarkShadow(),static ColorUIResource,Returns the primary control dark shadow color of the current theme.,"

getPrimaryControlDarkShadow
public static ColorUIResource getPrimaryControlDarkShadow()
Returns the primary control dark shadow color of the current
 theme. This is a cover method for getCurrentTheme().getPrimaryControlDarkShadow().

Returns:
the primary control dark shadow color
See Also:
MetalTheme


"
MetalLookAndFeel,getPrimaryControlHighlight(),static ColorUIResource,Returns the primary control highlight color of the current theme.,"

getPrimaryControlHighlight
public static ColorUIResource getPrimaryControlHighlight()
Returns the primary control highlight color of the current
 theme. This is a cover method for getCurrentTheme().getPrimaryControlHighlight().

Returns:
the primary control highlight color
See Also:
MetalTheme


"
MetalLookAndFeel,getPrimaryControlInfo(),static ColorUIResource,Returns the primary control info color of the current theme.,"

getPrimaryControlInfo
public static ColorUIResource getPrimaryControlInfo()
Returns the primary control info color of the current theme. This is a
 cover method for getCurrentTheme().getPrimaryControlInfo().

Returns:
the primary control info color
See Also:
MetalTheme


"
MetalLookAndFeel,getPrimaryControlShadow(),static ColorUIResource,Returns the primary control shadow color of the current theme.,"

getPrimaryControlShadow
public static ColorUIResource getPrimaryControlShadow()
Returns the primary control shadow color of the current theme. This is a
 cover method for getCurrentTheme().getPrimaryControlShadow().

Returns:
the primary control shadow color
See Also:
MetalTheme


"
MetalLookAndFeel,getSeparatorBackground(),static ColorUIResource,Returns the separator background color of the current theme.,"

getSeparatorBackground
public static ColorUIResource getSeparatorBackground()
Returns the separator background color of the current theme. This is
 a cover method for getCurrentTheme().getSeparatorBackground().

Returns:
the separator background color
See Also:
MetalTheme


"
MetalLookAndFeel,getSeparatorForeground(),static ColorUIResource,Returns the separator foreground color of the current theme.,"

getSeparatorForeground
public static ColorUIResource getSeparatorForeground()
Returns the separator foreground color of the current theme. This is
 a cover method for getCurrentTheme().getSeparatorForeground().

Returns:
the separator foreground color
See Also:
MetalTheme


"
MetalLookAndFeel,getSubTextFont(),static FontUIResource,Returns the sub-text font of the current theme.,"

getSubTextFont
public static FontUIResource getSubTextFont()
Returns the sub-text font of the current theme. This is a
 cover method for getCurrentTheme().getSubTextFont().

Returns:
the sub-text font
See Also:
MetalTheme


"
MetalLookAndFeel,getSupportsWindowDecorations(),boolean,Returns true; metal can provide Window decorations.,"

getSupportsWindowDecorations
public boolean getSupportsWindowDecorations()
Returns true; metal can provide Window
 decorations.

Overrides:
getSupportsWindowDecorations in class LookAndFeel
Returns:
true
Since:
1.4
See Also:
JDialog.setDefaultLookAndFeelDecorated(boolean), 
JFrame.setDefaultLookAndFeelDecorated(boolean), 
JRootPane.setWindowDecorationStyle(int)


"
MetalLookAndFeel,getSystemTextColor(),static ColorUIResource,Returns the system text color of the current theme.,"

getSystemTextColor
public static ColorUIResource getSystemTextColor()
Returns the system text color of the current theme. This is a
 cover method for getCurrentTheme().getSystemTextColor().

Returns:
the system text color
See Also:
MetalTheme


"
MetalLookAndFeel,getSystemTextFont(),static FontUIResource,Returns the system text font of the current theme.,"

getSystemTextFont
public static FontUIResource getSystemTextFont()
Returns the system text font of the current theme. This is a
 cover method for getCurrentTheme().getSystemTextFont().

Returns:
the system text font
See Also:
MetalTheme


"
MetalLookAndFeel,getTextHighlightColor(),static ColorUIResource,Returns the text highlight color of the current theme.,"

getTextHighlightColor
public static ColorUIResource getTextHighlightColor()
Returns the text highlight color of the current theme. This is a
 cover method for getCurrentTheme().getTextHighlightColor().

Returns:
the text highlight color
See Also:
MetalTheme


"
MetalLookAndFeel,getUserTextColor(),static ColorUIResource,Returns the user text color of the current theme.,"

getUserTextColor
public static ColorUIResource getUserTextColor()
Returns the user text color of the current theme. This is a
 cover method for getCurrentTheme().getUserTextColor().

Returns:
the user text color
See Also:
MetalTheme


"
MetalLookAndFeel,getUserTextFont(),static FontUIResource,Returns the user text font of the current theme.,"

getUserTextFont
public static FontUIResource getUserTextFont()
Returns the user text font of the current theme. This is a
 cover method for getCurrentTheme().getUserTextFont().

Returns:
the user text font
See Also:
MetalTheme


"
MetalLookAndFeel,getWhite(),static ColorUIResource,Returns the white color of the current theme.,"

getWhite
public static ColorUIResource getWhite()
Returns the white color of the current theme. This is a
 cover method for getCurrentTheme().getWhite().

Returns:
the white color
See Also:
MetalTheme


"
MetalLookAndFeel,getWindowBackground(),static ColorUIResource,Returns the window background color of the current theme.,"

getWindowBackground
public static ColorUIResource getWindowBackground()
Returns the window background color of the current theme. This is a
 cover method for getCurrentTheme().getWindowBackground().

Returns:
the window background color
See Also:
MetalTheme


"
MetalLookAndFeel,getWindowTitleBackground(),static ColorUIResource,Returns the window title background color of the current theme.,"

getWindowTitleBackground
public static ColorUIResource getWindowTitleBackground()
Returns the window title background color of the current
 theme. This is a cover method for getCurrentTheme().getWindowTitleBackground().

Returns:
the window title background color
See Also:
MetalTheme


"
MetalLookAndFeel,getWindowTitleFont(),static FontUIResource,Returns the window title font of the current theme.,"

getWindowTitleFont
public static FontUIResource getWindowTitleFont()
Returns the window title font of the current theme. This is a
 cover method for getCurrentTheme().getWindowTitleFont().

Returns:
the window title font
See Also:
MetalTheme


"
MetalLookAndFeel,getWindowTitleForeground(),static ColorUIResource,Returns the window title foreground color of the current theme.,"

getWindowTitleForeground
public static ColorUIResource getWindowTitleForeground()
Returns the window title foreground color of the current
 theme. This is a cover method for getCurrentTheme().getWindowTitleForeground().

Returns:
the window title foreground color
See Also:
MetalTheme


"
MetalLookAndFeel,getWindowTitleInactiveBackground(),static ColorUIResource,Returns the window title inactive background color of the current theme.,"

getWindowTitleInactiveBackground
public static ColorUIResource getWindowTitleInactiveBackground()
Returns the window title inactive background color of the current
 theme. This is a cover method for getCurrentTheme().getWindowTitleInactiveBackground().

Returns:
the window title inactive background color
See Also:
MetalTheme


"
MetalLookAndFeel,getWindowTitleInactiveForeground(),static ColorUIResource,Returns the window title inactive foreground color of the current theme.,"

getWindowTitleInactiveForeground
public static ColorUIResource getWindowTitleInactiveForeground()
Returns the window title inactive foreground color of the current
 theme. This is a cover method for getCurrentTheme().getWindowTitleInactiveForeground().

Returns:
the window title inactive foreground color
See Also:
MetalTheme


"
MetalLookAndFeel,initClassDefaults(UIDefaults table),protected void,Populates table with mappings from uiClassID to the fully qualified name of the ui class.,"

initClassDefaults
protected void initClassDefaults(UIDefaults table)
Populates table with mappings from uiClassID to
 the fully qualified name of the ui class. MetalLookAndFeel registers an entry for each of the classes in
 the package javax.swing.plaf.metal that are named
 MetalXXXUI. The string XXX is one of Swing's uiClassIDs. For
 the uiClassIDs that do not have a class in metal, the
 corresponding class in javax.swing.plaf.basic is
 used. For example, metal does not have a class named ""MetalColorChooserUI"", as such, javax.swing.plaf.basic.BasicColorChooserUI is used.

Overrides:
initClassDefaults in class BasicLookAndFeel
Parameters:
table - the UIDefaults instance the entries are
        added to
Throws:
NullPointerException - if table is null
See Also:
BasicLookAndFeel.initClassDefaults(javax.swing.UIDefaults)


"
MetalLookAndFeel,initComponentDefaults(UIDefaults table),protected void,Populates table with the defaults for metal.,"

initComponentDefaults
protected void initComponentDefaults(UIDefaults table)
Populates table with the defaults for metal.

Overrides:
initComponentDefaults in class BasicLookAndFeel
Parameters:
table - the UIDefaults to add the values to
Throws:
NullPointerException - if table is null


"
MetalLookAndFeel,initSystemColorDefaults(UIDefaults table),protected void,Populates table with system colors.,"

initSystemColorDefaults
protected void initSystemColorDefaults(UIDefaults table)
Populates table with system colors. The following values are
 added to table:
 

Key
    Value
  
""desktop""
    theme.getDesktopColor()

""activeCaption""
    theme.getWindowTitleBackground()

""activeCaptionText""
    theme.getWindowTitleForeground()

""activeCaptionBorder""
    theme.getPrimaryControlShadow()

""inactiveCaption""
    theme.getWindowTitleInactiveBackground()

""inactiveCaptionText""
    theme.getWindowTitleInactiveForeground()

""inactiveCaptionBorder""
    theme.getControlShadow()

""window""
    theme.getWindowBackground()

""windowBorder""
    theme.getControl()

""windowText""
    theme.getUserTextColor()

""menu""
    theme.getMenuBackground()

""menuText""
    theme.getMenuForeground()

""text""
    theme.getWindowBackground()

""textText""
    theme.getUserTextColor()

""textHighlight""
    theme.getTextHighlightColor()

""textHighlightText""
    theme.getHighlightedTextColor()

""textInactiveText""
    theme.getInactiveSystemTextColor()

""control""
    theme.getControl()

""controlText""
    theme.getControlTextColor()

""controlHighlight""
    theme.getControlHighlight()

""controlLtHighlight""
    theme.getControlHighlight()

""controlShadow""
    theme.getControlShadow()

""controlDkShadow""
    theme.getControlDarkShadow()

""scrollbar""
    theme.getControl()

""info""
    theme.getPrimaryControl()

""infoText""
    theme.getPrimaryControlInfo()

 The value theme corresponds to the current MetalTheme.

Overrides:
initSystemColorDefaults in class BasicLookAndFeel
Parameters:
table - the UIDefaults object the values are added to
Throws:
NullPointerException - if table is null
See Also:
SystemColor, 
BasicLookAndFeel.getDefaults(), 
BasicLookAndFeel.loadSystemColors(javax.swing.UIDefaults, java.lang.String[], boolean)


"
MetalLookAndFeel,isNativeLookAndFeel(),boolean,Returns false; MetalLookAndFeel is not a native look and feel.,"

isNativeLookAndFeel
public boolean isNativeLookAndFeel()
Returns false; MetalLookAndFeel is not a native
 look and feel.

Specified by:
isNativeLookAndFeel in class LookAndFeel
Returns:
false


"
MetalLookAndFeel,isSupportedLookAndFeel(),boolean,Returns true; MetalLookAndFeel can be run on any platform.,"

isSupportedLookAndFeel
public boolean isSupportedLookAndFeel()
Returns true; MetalLookAndFeel can be run on
 any platform.

Specified by:
isSupportedLookAndFeel in class LookAndFeel
Returns:
true
See Also:
UIManager.setLookAndFeel(javax.swing.LookAndFeel)


"
MetalLookAndFeel,provideErrorFeedback(Component component),void,"Invoked when the user attempts an invalid operation, such as pasting into an uneditable JTextField that has focus.","

provideErrorFeedback
public void provideErrorFeedback(Component component)
Invoked when the user attempts an invalid operation,
 such as pasting into an uneditable JTextField
 that has focus. The default implementation beeps. Subclasses
 that wish different behavior should override this and provide
 the additional feedback.

Overrides:
provideErrorFeedback in class LookAndFeel
Parameters:
component - the Component the error occurred in,
                  may be null
                  indicating the error condition is not directly
                  associated with a Component
Since:
1.4


"
MetalLookAndFeel,setCurrentTheme(MetalTheme theme),static void,Set the theme used by MetalLookAndFeel.,"

setCurrentTheme
public static void setCurrentTheme(MetalTheme theme)
Set the theme used by MetalLookAndFeel.
 
 After the theme is set, MetalLookAndFeel needs to be
 re-installed and the uis need to be recreated. The following
 shows how to do this:
 
   MetalLookAndFeel.setCurrentTheme(theme);

   // re-install the Metal Look and Feel
   UIManager.setLookAndFeel(new MetalLookAndFeel());

   // Update the ComponentUIs for all Components. This
   // needs to be invoked for all windows.
   SwingUtilities.updateComponentTreeUI(rootComponent);
 
 If this is not done the results are undefined.

Parameters:
theme - the theme to use
Throws:
NullPointerException - if theme is null
See Also:
getCurrentTheme()


"
MetalMenuBarUI,createUI(JComponent x),static ComponentUI,Creates the ComponentUI implementation for the passed in component.,"

createUI
public static ComponentUI createUI(JComponent x)
Creates the ComponentUI implementation for the passed
 in component.

Parameters:
x - JComponent to create the ComponentUI implementation for
Returns:
ComponentUI implementation for x
Throws:
NullPointerException - if x is null


"
MetalMenuBarUI,installUI(JComponent c),void,Configures the specified component appropriate for the metal look and feel.,"

installUI
public void installUI(JComponent c)
Configures the specified component appropriate for the metal look and
 feel.

Overrides:
installUI in class BasicMenuBarUI
Parameters:
c - the component where this UI delegate is being installed
Throws:
NullPointerException - if c is null.
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MetalMenuBarUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Reverses configuration which was done on the specified component during
 installUI.

Overrides:
uninstallUI in class BasicMenuBarUI
Parameters:
c - the component where this UI delegate is being installed
Throws:
NullPointerException - if c is null.
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MetalMenuBarUI,"update(Graphics g, JComponent c)",void,"If necessary paints the background of the component, then invokes paint.","

update
public void update(Graphics g,
                   JComponent c)
If necessary paints the background of the component, then
 invokes paint.

Overrides:
update in class ComponentUI
Parameters:
g - Graphics to paint to
c - JComponent painting on
Throws:
NullPointerException - if g or c is
         null
Since:
1.5
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent), 
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent)


"
MetalPopupMenuSeparatorUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
MetalPopupMenuSeparatorUI,getPreferredSize(JComponent c),Dimension,Returns the specified component's preferred size appropriate for the look and feel.,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's preferred size appropriate for
 the look and feel.  If null is returned, the preferred
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method returns null.

Overrides:
getPreferredSize in class MetalSeparatorUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MetalPopupMenuSeparatorUI,"paint(Graphics g, JComponent c)",void,Paints the specified component appropriately for the look and feel.,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: ComponentUI
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class MetalSeparatorUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MetalProgressBarUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
MetalProgressBarUI,"paintDeterminate(Graphics g, JComponent c)",void,Draws a bit of special highlighting on the progress bar.,"

paintDeterminate
public void paintDeterminate(Graphics g,
                             JComponent c)
Draws a bit of special highlighting on the progress bar.
 The core painting is deferred to the BasicProgressBar's
 paintDeterminate method.

Overrides:
paintDeterminate in class BasicProgressBarUI
Since:
1.4
See Also:
BasicProgressBarUI.paintIndeterminate(java.awt.Graphics, javax.swing.JComponent)


"
MetalProgressBarUI,"paintIndeterminate(Graphics g, JComponent c)",void,Draws a bit of special highlighting on the progress bar and bouncing box.,"

paintIndeterminate
public void paintIndeterminate(Graphics g,
                               JComponent c)
Draws a bit of special highlighting on the progress bar
 and bouncing box.
 The core painting is deferred to the BasicProgressBar's
 paintIndeterminate method.

Overrides:
paintIndeterminate in class BasicProgressBarUI
Since:
1.4
See Also:
BasicProgressBarUI.paintDeterminate(java.awt.Graphics, javax.swing.JComponent)


"
MetalRadioButtonUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
MetalRadioButtonUI,getDisabledTextColor(),protected Color,NULL,"

getDisabledTextColor
protected Color getDisabledTextColor()

"
MetalRadioButtonUI,getFocusColor(),protected Color,NULL,"

getFocusColor
protected Color getFocusColor()

"
MetalRadioButtonUI,getSelectColor(),protected Color,NULL,"

getSelectColor
protected Color getSelectColor()

"
MetalRadioButtonUI,installDefaults(AbstractButton b),void,NULL,"

installDefaults
public void installDefaults(AbstractButton b)

Overrides:
installDefaults in class BasicRadioButtonUI


"
MetalRadioButtonUI,"paint(Graphics g, JComponent c)",void,paint the radio button,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: BasicRadioButtonUI
paint the radio button

Overrides:
paint in class BasicRadioButtonUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MetalRadioButtonUI,"paintFocus(Graphics g, Rectangle t, Dimension d)",protected void,Paints focused radio button.,"

paintFocus
protected void paintFocus(Graphics g,
                          Rectangle t,
                          Dimension d)
Description copied from class: BasicRadioButtonUI
Paints focused radio button.

Overrides:
paintFocus in class BasicRadioButtonUI
Parameters:
g - an instance of Graphics
t - bounds
d - the size of radio button


"
MetalRadioButtonUI,uninstallDefaults(AbstractButton b),protected void,NULL,"

uninstallDefaults
protected void uninstallDefaults(AbstractButton b)

Overrides:
uninstallDefaults in class BasicRadioButtonUI


"
MetalRootPaneUI,createUI(JComponent c),static ComponentUI,Creates a UI for a JRootPane.,"

createUI
public static ComponentUI createUI(JComponent c)
Creates a UI for a JRootPane.

Parameters:
c - the JRootPane the RootPaneUI will be created for
Returns:
the RootPaneUI implementation for the passed in JRootPane


"
MetalRootPaneUI,installUI(JComponent c),void,Invokes supers implementation of installUI to install the necessary state onto the passed in JRootPane to render the metal look and feel implementation of RootPaneUI.,"

installUI
public void installUI(JComponent c)
Invokes supers implementation of installUI to install
 the necessary state onto the passed in JRootPane
 to render the metal look and feel implementation of
 RootPaneUI. If
 the windowDecorationStyle property of the
 JRootPane is other than JRootPane.NONE,
 this will add a custom Component to render the widgets to
 JRootPane, as well as installing a custom
 Border and LayoutManager on the
 JRootPane.

Overrides:
installUI in class BasicRootPaneUI
Parameters:
c - the JRootPane to install state onto
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MetalRootPaneUI,propertyChange(PropertyChangeEvent e),void,Invoked when a property changes.,"

propertyChange
public void propertyChange(PropertyChangeEvent e)
Invoked when a property changes. MetalRootPaneUI is
 primarily interested in events originating from the
 JRootPane it has been installed on identifying the
 property windowDecorationStyle. If the
 windowDecorationStyle has changed to a value other
 than JRootPane.NONE, this will add a Component
 to the JRootPane to render the window decorations, as well
 as installing a Border on the JRootPane.
 On the other hand, if the windowDecorationStyle has
 changed to JRootPane.NONE, this will remove the
 Component that has been added to the JRootPane
 as well resetting the Border to what it was before
 installUI was invoked.

Specified by:
propertyChange in interface PropertyChangeListener
Overrides:
propertyChange in class BasicRootPaneUI
Parameters:
e - A PropertyChangeEvent object describing the event source
          and the property that has changed.


"
MetalRootPaneUI,uninstallUI(JComponent c),void,Invokes supers implementation to uninstall any of its state.,"

uninstallUI
public void uninstallUI(JComponent c)
Invokes supers implementation to uninstall any of its state. This will
 also reset the LayoutManager of the JRootPane.
 If a Component has been added to the JRootPane
 to render the window decoration style, this method will remove it.
 Similarly, this will revert the Border and LayoutManager of the
 JRootPane to what it was before installUI
 was invoked.

Overrides:
uninstallUI in class BasicRootPaneUI
Parameters:
c - the JRootPane to uninstall state from
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MetalScrollBarUI,configureScrollBarColors(),protected void,NULL,"

configureScrollBarColors
protected void configureScrollBarColors()

Overrides:
configureScrollBarColors in class BasicScrollBarUI


"
MetalScrollBarUI,createDecreaseButton(int orientation),protected JButton,Returns the view that represents the decrease view.,"

createDecreaseButton
protected JButton createDecreaseButton(int orientation)
Returns the view that represents the decrease view.

Overrides:
createDecreaseButton in class BasicScrollBarUI


"
MetalScrollBarUI,createIncreaseButton(int orientation),protected JButton,Returns the view that represents the increase view.,"

createIncreaseButton
protected JButton createIncreaseButton(int orientation)
Returns the view that represents the increase view.

Overrides:
createIncreaseButton in class BasicScrollBarUI


"
MetalScrollBarUI,createPropertyChangeListener(),protected PropertyChangeListener,NULL,"

createPropertyChangeListener
protected PropertyChangeListener createPropertyChangeListener()

Overrides:
createPropertyChangeListener in class BasicScrollBarUI


"
MetalScrollBarUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
MetalScrollBarUI,getMinimumThumbSize(),protected Dimension,Returns the smallest acceptable size for the thumb.,"

getMinimumThumbSize
protected Dimension getMinimumThumbSize()
Description copied from class: BasicScrollBarUI
Returns the smallest acceptable size for the thumb.  If the scrollbar
 becomes so small that this size isn't available, the thumb will be
 hidden.
 
Warning : the value returned by this method should not be
 be modified, it's a shared static constant.

Overrides:
getMinimumThumbSize in class BasicScrollBarUI
Returns:
The smallest acceptable size for the thumb.
See Also:
BasicScrollBarUI.getMaximumThumbSize()


"
MetalScrollBarUI,getPreferredSize(JComponent c),Dimension,"A vertical scrollbar's preferred width is the maximum of preferred widths of the (non null) increment/decrement buttons, and the minimum width of the thumb.","

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Description copied from class: BasicScrollBarUI
A vertical scrollbar's preferred width is the maximum of
 preferred widths of the (non null)
 increment/decrement buttons,
 and the minimum width of the thumb. The preferred height is the
 sum of the preferred heights of the same parts.  The basis for
 the preferred size of a horizontal scrollbar is similar.
 
 The preferredSize is only computed once, subsequent
 calls to this method just return a cached size.

Overrides:
getPreferredSize in class BasicScrollBarUI
Parameters:
c - the JScrollBar that's delegating this method to us
Returns:
the preferred size of a Basic JScrollBar
See Also:
BasicScrollBarUI.getMaximumSize(javax.swing.JComponent), 
ComponentUI.getMinimumSize(javax.swing.JComponent)


"
MetalScrollBarUI,installDefaults(),protected void,NULL,"

installDefaults
protected void installDefaults()

Overrides:
installDefaults in class BasicScrollBarUI


"
MetalScrollBarUI,installListeners(),protected void,NULL,"

installListeners
protected void installListeners()

Overrides:
installListeners in class BasicScrollBarUI


"
MetalScrollBarUI,"paintThumb(Graphics g, JComponent c, Rectangle thumbBounds)",protected void,NULL,"

paintThumb
protected void paintThumb(Graphics g,
                          JComponent c,
                          Rectangle thumbBounds)

Overrides:
paintThumb in class BasicScrollBarUI


"
MetalScrollBarUI,"paintTrack(Graphics g, JComponent c, Rectangle trackBounds)",protected void,NULL,"

paintTrack
protected void paintTrack(Graphics g,
                          JComponent c,
                          Rectangle trackBounds)

Overrides:
paintTrack in class BasicScrollBarUI


"
MetalScrollBarUI,"setThumbBounds(int x, int y, int width, int height)",protected void,This is overridden only to increase the invalid area.,"

setThumbBounds
protected void setThumbBounds(int x,
                              int y,
                              int width,
                              int height)
This is overridden only to increase the invalid area.  This
 ensures that the ""Shadow"" below the thumb is invalidated

Overrides:
setThumbBounds in class BasicScrollBarUI
See Also:
BasicScrollBarUI.getThumbBounds()


"
MetalScrollButton,getButtonWidth(),int,NULL,"

getButtonWidth
public int getButtonWidth()

"
MetalScrollButton,getMaximumSize(),Dimension,Returns the maximum size of the BasicArrowButton.,"

getMaximumSize
public Dimension getMaximumSize()
Description copied from class: BasicArrowButton
Returns the maximum size of the BasicArrowButton.

Overrides:
getMaximumSize in class BasicArrowButton
Returns:
the maximum size
See Also:
JComponent.setMaximumSize(java.awt.Dimension), 
ComponentUI


"
MetalScrollButton,getMinimumSize(),Dimension,Returns the minimum size of the BasicArrowButton.,"

getMinimumSize
public Dimension getMinimumSize()
Description copied from class: BasicArrowButton
Returns the minimum size of the BasicArrowButton.

Overrides:
getMinimumSize in class BasicArrowButton
Returns:
the minimum size
See Also:
JComponent.setMinimumSize(java.awt.Dimension), 
ComponentUI


"
MetalScrollButton,getPreferredSize(),Dimension,Returns the preferred size of the BasicArrowButton.,"

getPreferredSize
public Dimension getPreferredSize()
Description copied from class: BasicArrowButton
Returns the preferred size of the BasicArrowButton.

Overrides:
getPreferredSize in class BasicArrowButton
Returns:
the preferred size
See Also:
JComponent.setPreferredSize(java.awt.Dimension), 
ComponentUI


"
MetalScrollButton,paint(Graphics g),void,Invoked by Swing to draw components.,"

paint
public void paint(Graphics g)
Description copied from class: JComponent
Invoked by Swing to draw components.
 Applications should not invoke paint directly,
 but should instead use the repaint method to
 schedule the component for redrawing.
 
 This method actually delegates the work of painting to three
 protected methods: paintComponent,
 paintBorder,
 and paintChildren.  They're called in the order
 listed to ensure that children appear on top of component itself.
 Generally speaking, the component and its children should not
 paint in the insets area allocated to the border. Subclasses can
 just override this method, as always.  A subclass that just
 wants to specialize the UI (look and feel) delegate's
 paint method should just override
 paintComponent.

Overrides:
paint in class BasicArrowButton
Parameters:
g - the Graphics context in which to paint
See Also:
JComponent.paintComponent(java.awt.Graphics), 
JComponent.paintBorder(java.awt.Graphics), 
JComponent.paintChildren(java.awt.Graphics), 
JComponent.getComponentGraphics(java.awt.Graphics), 
JComponent.repaint(long, int, int, int, int)


"
MetalScrollButton,setFreeStanding(boolean freeStanding),void,NULL,"

setFreeStanding
public void setFreeStanding(boolean freeStanding)

"
MetalScrollPaneUI,createScrollBarSwapListener(),protected PropertyChangeListener,NULL,"

createScrollBarSwapListener
protected PropertyChangeListener createScrollBarSwapListener()

"
MetalScrollPaneUI,createUI(JComponent x),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent x)

"
MetalScrollPaneUI,installListeners(JScrollPane scrollPane),void,NULL,"

installListeners
public void installListeners(JScrollPane scrollPane)

Overrides:
installListeners in class BasicScrollPaneUI


"
MetalScrollPaneUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class BasicScrollPaneUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MetalScrollPaneUI,uninstallListeners(JComponent c),protected void,NULL,"

uninstallListeners
protected void uninstallListeners(JComponent c)

Overrides:
uninstallListeners in class BasicScrollPaneUI


"
MetalScrollPaneUI,uninstallListeners(JScrollPane scrollPane),void,Deprecated. - Replaced by uninstallListeners(JComponent),"

uninstallListeners
@Deprecated
public void uninstallListeners(JScrollPane scrollPane)
Deprecated. - Replaced by uninstallListeners(JComponent)

"
MetalScrollPaneUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class BasicScrollPaneUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MetalSeparatorUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
MetalSeparatorUI,getPreferredSize(JComponent c),Dimension,Returns the specified component's preferred size appropriate for the look and feel.,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's preferred size appropriate for
 the look and feel.  If null is returned, the preferred
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method returns null.

Overrides:
getPreferredSize in class BasicSeparatorUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MetalSeparatorUI,installDefaults(JSeparator s),protected void,NULL,"

installDefaults
protected void installDefaults(JSeparator s)

Overrides:
installDefaults in class BasicSeparatorUI


"
MetalSeparatorUI,"paint(Graphics g, JComponent c)",void,Paints the specified component appropriately for the look and feel.,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: ComponentUI
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class BasicSeparatorUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MetalSliderUI,createPropertyChangeListener(JSlider slider),protected PropertyChangeListener,NULL,"

createPropertyChangeListener
protected PropertyChangeListener createPropertyChangeListener(JSlider slider)

Overrides:
createPropertyChangeListener in class BasicSliderUI


"
MetalSliderUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
MetalSliderUI,getThumbOverhang(),protected int,Returns the amount that the thumb goes past the slide bar.,"

getThumbOverhang
protected int getThumbOverhang()
Returns the amount that the thumb goes past the slide bar.

"
MetalSliderUI,getThumbSize(),protected Dimension,NULL,"

getThumbSize
protected Dimension getThumbSize()

Overrides:
getThumbSize in class BasicSliderUI


"
MetalSliderUI,getTickLength(),int,Gets the height of the tick area for horizontal sliders and the width of the tick area for vertical sliders.,"

getTickLength
public int getTickLength()
Gets the height of the tick area for horizontal sliders and the width of the
 tick area for vertical sliders.  BasicSliderUI uses the returned value to
 determine the tick area rectangle.

Overrides:
getTickLength in class BasicSliderUI


"
MetalSliderUI,getTrackLength(),protected int,Returns the longer dimension of the slide bar.,"

getTrackLength
protected int getTrackLength()
Returns the longer dimension of the slide bar.  (The slide bar is only the
 part that runs directly under the thumb)

"
MetalSliderUI,getTrackWidth(),protected int,Returns the shorter dimension of the track.,"

getTrackWidth
protected int getTrackWidth()
Returns the shorter dimension of the track.

"
MetalSliderUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class BasicSliderUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MetalSliderUI,paintFocus(Graphics g),void,NULL,"

paintFocus
public void paintFocus(Graphics g)

Overrides:
paintFocus in class BasicSliderUI


"
MetalSliderUI,"paintMajorTickForHorizSlider(Graphics g, Rectangle tickBounds, int x)",protected void,NULL,"

paintMajorTickForHorizSlider
protected void paintMajorTickForHorizSlider(Graphics g,
                                            Rectangle tickBounds,
                                            int x)

Overrides:
paintMajorTickForHorizSlider in class BasicSliderUI


"
MetalSliderUI,"paintMajorTickForVertSlider(Graphics g, Rectangle tickBounds, int y)",protected void,NULL,"

paintMajorTickForVertSlider
protected void paintMajorTickForVertSlider(Graphics g,
                                           Rectangle tickBounds,
                                           int y)

Overrides:
paintMajorTickForVertSlider in class BasicSliderUI


"
MetalSliderUI,"paintMinorTickForHorizSlider(Graphics g, Rectangle tickBounds, int x)",protected void,NULL,"

paintMinorTickForHorizSlider
protected void paintMinorTickForHorizSlider(Graphics g,
                                            Rectangle tickBounds,
                                            int x)

Overrides:
paintMinorTickForHorizSlider in class BasicSliderUI


"
MetalSliderUI,"paintMinorTickForVertSlider(Graphics g, Rectangle tickBounds, int y)",protected void,NULL,"

paintMinorTickForVertSlider
protected void paintMinorTickForVertSlider(Graphics g,
                                           Rectangle tickBounds,
                                           int y)

Overrides:
paintMinorTickForVertSlider in class BasicSliderUI


"
MetalSliderUI,paintThumb(Graphics g),void,NULL,"

paintThumb
public void paintThumb(Graphics g)

Overrides:
paintThumb in class BasicSliderUI


"
MetalSliderUI,paintTrack(Graphics g),void,NULL,"

paintTrack
public void paintTrack(Graphics g)

Overrides:
paintTrack in class BasicSliderUI


"
MetalSliderUI,scrollDueToClickInTrack(int dir),protected void,"This function is called when a mousePressed was detected in the track, not in the thumb.","

scrollDueToClickInTrack
protected void scrollDueToClickInTrack(int dir)
Description copied from class: BasicSliderUI
This function is called when a mousePressed was detected in the track, not
 in the thumb.  The default behavior is to scroll by block.  You can
  override this method to stop it from scrolling or to add additional behavior.

Overrides:
scrollDueToClickInTrack in class BasicSliderUI


"
MetalSplitPaneUI,createDefaultDivider(),BasicSplitPaneDivider,Creates the default divider.,"

createDefaultDivider
public BasicSplitPaneDivider createDefaultDivider()
Creates the default divider.

Overrides:
createDefaultDivider in class BasicSplitPaneUI


"
MetalSplitPaneUI,createUI(JComponent x),static ComponentUI,Creates a new MetalSplitPaneUI instance,"

createUI
public static ComponentUI createUI(JComponent x)
Creates a new MetalSplitPaneUI instance

"
MetalTabbedPaneUI,calculateMaxTabHeight(int tabPlacement),protected int,NULL,"

calculateMaxTabHeight
protected int calculateMaxTabHeight(int tabPlacement)

Overrides:
calculateMaxTabHeight in class BasicTabbedPaneUI


"
MetalTabbedPaneUI,createLayoutManager(),protected LayoutManager,Invoked by installUI to create a layout manager object to manage the JTabbedPane.,"

createLayoutManager
protected LayoutManager createLayoutManager()
Description copied from class: BasicTabbedPaneUI
Invoked by installUI to create
 a layout manager object to manage
 the JTabbedPane.

Overrides:
createLayoutManager in class BasicTabbedPaneUI
Returns:
a layout manager object
See Also:
BasicTabbedPaneUI.TabbedPaneLayout, 
JTabbedPane.getTabLayoutPolicy()


"
MetalTabbedPaneUI,createUI(JComponent x),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent x)

"
MetalTabbedPaneUI,getBaselineOffset(),protected int,Returns the amount the baseline is offset by.,"

getBaselineOffset
protected int getBaselineOffset()
Returns the amount the baseline is offset by.  This is typically
 the same as getTabLabelShiftY.

Overrides:
getBaselineOffset in class BasicTabbedPaneUI
Returns:
amount to offset the baseline by
Since:
1.6


"
MetalTabbedPaneUI,"getColorForGap(int currentRun, int x, int y)",protected Color,NULL,"

getColorForGap
protected Color getColorForGap(int currentRun,
                               int x,
                               int y)

"
MetalTabbedPaneUI,"getTabLabelShiftX(int tabPlacement, int tabIndex, boolean isSelected)",protected int,Overridden to do nothing for the Java L&F.,"

getTabLabelShiftX
protected int getTabLabelShiftX(int tabPlacement,
                                int tabIndex,
                                boolean isSelected)
Overridden to do nothing for the Java L&F.

Overrides:
getTabLabelShiftX in class BasicTabbedPaneUI


"
MetalTabbedPaneUI,"getTabLabelShiftY(int tabPlacement, int tabIndex, boolean isSelected)",protected int,Overridden to do nothing for the Java L&F.,"

getTabLabelShiftY
protected int getTabLabelShiftY(int tabPlacement,
                                int tabIndex,
                                boolean isSelected)
Overridden to do nothing for the Java L&F.

Overrides:
getTabLabelShiftY in class BasicTabbedPaneUI


"
MetalTabbedPaneUI,getTabRunOverlay(int tabPlacement),protected int,NULL,"

getTabRunOverlay
protected int getTabRunOverlay(int tabPlacement)

Overrides:
getTabRunOverlay in class BasicTabbedPaneUI


"
MetalTabbedPaneUI,installDefaults(),protected void,NULL,"

installDefaults
protected void installDefaults()

Overrides:
installDefaults in class BasicTabbedPaneUI


"
MetalTabbedPaneUI,"paint(Graphics g, JComponent c)",void,Paints the specified component appropriately for the look and feel.,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: ComponentUI
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class BasicTabbedPaneUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MetalTabbedPaneUI,"paintBottomTabBorder(int tabIndex, Graphics g, int x, int y, int w, int h, int btm, int rght, boolean isSelected)",protected void,NULL,"

paintBottomTabBorder
protected void paintBottomTabBorder(int tabIndex,
                                    Graphics g,
                                    int x,
                                    int y,
                                    int w,
                                    int h,
                                    int btm,
                                    int rght,
                                    boolean isSelected)

"
MetalTabbedPaneUI,"paintContentBorderBottomEdge(Graphics g, int tabPlacement, int selectedIndex, int x, int y, int w, int h)",protected void,NULL,"

paintContentBorderBottomEdge
protected void paintContentBorderBottomEdge(Graphics g,
                                            int tabPlacement,
                                            int selectedIndex,
                                            int x,
                                            int y,
                                            int w,
                                            int h)

Overrides:
paintContentBorderBottomEdge in class BasicTabbedPaneUI


"
MetalTabbedPaneUI,"paintContentBorderLeftEdge(Graphics g, int tabPlacement, int selectedIndex, int x, int y, int w, int h)",protected void,NULL,"

paintContentBorderLeftEdge
protected void paintContentBorderLeftEdge(Graphics g,
                                          int tabPlacement,
                                          int selectedIndex,
                                          int x,
                                          int y,
                                          int w,
                                          int h)

Overrides:
paintContentBorderLeftEdge in class BasicTabbedPaneUI


"
MetalTabbedPaneUI,"paintContentBorderRightEdge(Graphics g, int tabPlacement, int selectedIndex, int x, int y, int w, int h)",protected void,NULL,"

paintContentBorderRightEdge
protected void paintContentBorderRightEdge(Graphics g,
                                           int tabPlacement,
                                           int selectedIndex,
                                           int x,
                                           int y,
                                           int w,
                                           int h)

Overrides:
paintContentBorderRightEdge in class BasicTabbedPaneUI


"
MetalTabbedPaneUI,"paintContentBorderTopEdge(Graphics g, int tabPlacement, int selectedIndex, int x, int y, int w, int h)",protected void,NULL,"

paintContentBorderTopEdge
protected void paintContentBorderTopEdge(Graphics g,
                                         int tabPlacement,
                                         int selectedIndex,
                                         int x,
                                         int y,
                                         int w,
                                         int h)

Overrides:
paintContentBorderTopEdge in class BasicTabbedPaneUI


"
MetalTabbedPaneUI,"paintFocusIndicator(Graphics g, int tabPlacement, Rectangle[] rects, int tabIndex, Rectangle iconRect, Rectangle textRect, boolean isSelected)",protected void,NULL,"

paintFocusIndicator
protected void paintFocusIndicator(Graphics g,
                                   int tabPlacement,
                                   Rectangle[] rects,
                                   int tabIndex,
                                   Rectangle iconRect,
                                   Rectangle textRect,
                                   boolean isSelected)

Overrides:
paintFocusIndicator in class BasicTabbedPaneUI


"
MetalTabbedPaneUI,paintHighlightBelowTab(),protected void,NULL,"

paintHighlightBelowTab
protected void paintHighlightBelowTab()

"
MetalTabbedPaneUI,"paintLeftTabBorder(int tabIndex, Graphics g, int x, int y, int w, int h, int btm, int rght, boolean isSelected)",protected void,NULL,"

paintLeftTabBorder
protected void paintLeftTabBorder(int tabIndex,
                                  Graphics g,
                                  int x,
                                  int y,
                                  int w,
                                  int h,
                                  int btm,
                                  int rght,
                                  boolean isSelected)

"
MetalTabbedPaneUI,"paintRightTabBorder(int tabIndex, Graphics g, int x, int y, int w, int h, int btm, int rght, boolean isSelected)",protected void,NULL,"

paintRightTabBorder
protected void paintRightTabBorder(int tabIndex,
                                   Graphics g,
                                   int x,
                                   int y,
                                   int w,
                                   int h,
                                   int btm,
                                   int rght,
                                   boolean isSelected)

"
MetalTabbedPaneUI,"paintTabBackground(Graphics g, int tabPlacement, int tabIndex, int x, int y, int w, int h, boolean isSelected)",protected void,NULL,"

paintTabBackground
protected void paintTabBackground(Graphics g,
                                  int tabPlacement,
                                  int tabIndex,
                                  int x,
                                  int y,
                                  int w,
                                  int h,
                                  boolean isSelected)

Overrides:
paintTabBackground in class BasicTabbedPaneUI


"
MetalTabbedPaneUI,"paintTabBorder(Graphics g, int tabPlacement, int tabIndex, int x, int y, int w, int h, boolean isSelected)",protected void,this function draws the border around each tab note that this function does now draw the background of the tab.,"

paintTabBorder
protected void paintTabBorder(Graphics g,
                              int tabPlacement,
                              int tabIndex,
                              int x,
                              int y,
                              int w,
                              int h,
                              boolean isSelected)
Description copied from class: BasicTabbedPaneUI
this function draws the border around each tab
 note that this function does now draw the background of the tab.
 that is done elsewhere

Overrides:
paintTabBorder in class BasicTabbedPaneUI


"
MetalTabbedPaneUI,"paintTopTabBorder(int tabIndex, Graphics g, int x, int y, int w, int h, int btm, int rght, boolean isSelected)",protected void,NULL,"

paintTopTabBorder
protected void paintTopTabBorder(int tabIndex,
                                 Graphics g,
                                 int x,
                                 int y,
                                 int w,
                                 int h,
                                 int btm,
                                 int rght,
                                 boolean isSelected)

"
MetalTabbedPaneUI,"shouldFillGap(int currentRun, int tabIndex, int x, int y)",protected boolean,NULL,"

shouldFillGap
protected boolean shouldFillGap(int currentRun,
                                int tabIndex,
                                int x,
                                int y)

"
MetalTabbedPaneUI,"shouldPadTabRun(int tabPlacement, int run)",protected boolean,NULL,"

shouldPadTabRun
protected boolean shouldPadTabRun(int tabPlacement,
                                  int run)

Overrides:
shouldPadTabRun in class BasicTabbedPaneUI


"
MetalTabbedPaneUI,"shouldRotateTabRuns(int tabPlacement, int selectedRun)",protected boolean,NULL,"

shouldRotateTabRuns
protected boolean shouldRotateTabRuns(int tabPlacement,
                                      int selectedRun)

"
MetalTabbedPaneUI,"update(Graphics g, JComponent c)",void,Notifies this UI delegate that it is time to paint the specified component.,"

update
public void update(Graphics g,
                   JComponent c)
Description copied from class: ComponentUI
Notifies this UI delegate that it is time to paint the specified
 component.  This method is invoked by JComponent
 when the specified component is being painted.

 By default this method fills the specified component with
 its background color if its opaque property is true,
 and then immediately calls paint. In general this method need
 not be overridden by subclasses; all look-and-feel rendering code should
 reside in the paint method.

Overrides:
update in class ComponentUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
MetalTextFieldUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
MetalTextFieldUI,propertyChange(PropertyChangeEvent evt),void,This method gets called when a bound property is changed on the associated JTextComponent.,"

propertyChange
public void propertyChange(PropertyChangeEvent evt)
This method gets called when a bound property is changed
 on the associated JTextComponent.  This is a hook
 which UI implementations may change to reflect how the
 UI displays bound properties of JTextComponent subclasses.

Overrides:
propertyChange in class BasicTextUI
Parameters:
evt - the property change event


"
MetalTheme,addCustomEntriesToTable(UIDefaults table),void,Adds values specific to this theme to the defaults table.,"

addCustomEntriesToTable
public void addCustomEntriesToTable(UIDefaults table)
Adds values specific to this theme to the defaults table. This method
 is invoked when the look and feel defaults are obtained from
 MetalLookAndFeel.
 
 This implementation does nothing; it is provided for subclasses
 that wish to customize the defaults table.

Parameters:
table - the UIDefaults to add the values to
See Also:
MetalLookAndFeel.getDefaults()


"
MetalTheme,getAcceleratorForeground(),ColorUIResource,Returns the accelerator foreground color.,"

getAcceleratorForeground
public ColorUIResource getAcceleratorForeground()
Returns the accelerator foreground color. This
 returns the value of getPrimary1().

Returns:
the accelerator foreground color


"
MetalTheme,getAcceleratorSelectedForeground(),ColorUIResource,Returns the accelerator selected foreground color.,"

getAcceleratorSelectedForeground
public ColorUIResource getAcceleratorSelectedForeground()
Returns the accelerator selected foreground color. This
 returns the value of getBlack().

Returns:
the accelerator selected foreground color


"
MetalTheme,getBlack(),protected ColorUIResource,Returns the black color.,"

getBlack
protected ColorUIResource getBlack()
Returns the black color. This returns opaque black
 (0xFF000000).

Returns:
the black color


"
MetalTheme,getControl(),ColorUIResource,Returns the control color.,"

getControl
public ColorUIResource getControl()
Returns the control color. This returns the value of
 getSecondary3().

Returns:
the control color


"
MetalTheme,getControlDarkShadow(),ColorUIResource,Returns the control dark shadow color.,"

getControlDarkShadow
public ColorUIResource getControlDarkShadow()
Returns the control dark shadow color. This returns
 the value of getSecondary1().

Returns:
the control dark shadow color


"
MetalTheme,getControlDisabled(),ColorUIResource,Returns the control disabled color.,"

getControlDisabled
public ColorUIResource getControlDisabled()
Returns the control disabled color. This returns
 the value of getSecondary2().

Returns:
the control disabled color


"
MetalTheme,getControlHighlight(),ColorUIResource,Returns the control highlight color.,"

getControlHighlight
public ColorUIResource getControlHighlight()
Returns the control highlight color. This returns
 the value of getWhite().

Returns:
the control highlight color


"
MetalTheme,getControlInfo(),ColorUIResource,Returns the control info color.,"

getControlInfo
public ColorUIResource getControlInfo()
Returns the control info color. This returns
 the value of getBlack().

Returns:
the control info color


"
MetalTheme,getControlShadow(),ColorUIResource,Returns the control shadow color.,"

getControlShadow
public ColorUIResource getControlShadow()
Returns the control shadow color. This returns
 the value of getSecondary2().

Returns:
the control shadow color


"
MetalTheme,getControlTextColor(),ColorUIResource,Returns the control text color.,"

getControlTextColor
public ColorUIResource getControlTextColor()
Returns the control text color. This returns the value of
 getControlInfo().

Returns:
the control text color


"
MetalTheme,getControlTextFont(),abstract FontUIResource,Returns the control text font.,"

getControlTextFont
public abstract FontUIResource getControlTextFont()
Returns the control text font.

Returns:
the control text font


"
MetalTheme,getDesktopColor(),ColorUIResource,Returns the desktop color.,"

getDesktopColor
public ColorUIResource getDesktopColor()
Returns the desktop color. This returns the value of
 getPrimary2().

Returns:
the desktop color


"
MetalTheme,getFocusColor(),ColorUIResource,Returns the focus color.,"

getFocusColor
public ColorUIResource getFocusColor()
Returns the focus color. This returns the value of
 getPrimary2().

Returns:
the focus color


"
MetalTheme,getHighlightedTextColor(),ColorUIResource,Returns the highlighted text color.,"

getHighlightedTextColor
public ColorUIResource getHighlightedTextColor()
Returns the highlighted text color. This returns the value of
 getControlTextColor().

Returns:
the highlighted text color


"
MetalTheme,getInactiveControlTextColor(),ColorUIResource,Returns the inactive control text color.,"

getInactiveControlTextColor
public ColorUIResource getInactiveControlTextColor()
Returns the inactive control text color. This returns the value of
 getControlDisabled().

Returns:
the inactive control text color


"
MetalTheme,getInactiveSystemTextColor(),ColorUIResource,Returns the inactive system text color.,"

getInactiveSystemTextColor
public ColorUIResource getInactiveSystemTextColor()
Returns the inactive system text color. This returns the value of
 getSecondary2().

Returns:
the inactive system text color


"
MetalTheme,getMenuBackground(),ColorUIResource,Returns the menu background color.,"

getMenuBackground
public ColorUIResource getMenuBackground()
Returns the menu background color. This
 returns the value of getSecondary3().

Returns:
the menu background color


"
MetalTheme,getMenuDisabledForeground(),ColorUIResource,Returns the menu disabled foreground color.,"

getMenuDisabledForeground
public ColorUIResource getMenuDisabledForeground()
Returns the menu disabled foreground color. This
 returns the value of getSecondary2().

Returns:
the menu disabled foreground color


"
MetalTheme,getMenuForeground(),ColorUIResource,Returns the menu foreground color.,"

getMenuForeground
public ColorUIResource getMenuForeground()
Returns the menu foreground color. This
 returns the value of getBlack().

Returns:
the menu foreground color


"
MetalTheme,getMenuSelectedBackground(),ColorUIResource,Returns the menu selected background color.,"

getMenuSelectedBackground
public ColorUIResource getMenuSelectedBackground()
Returns the menu selected background color. This
 returns the value of getPrimary2().

Returns:
the menu selected background color


"
MetalTheme,getMenuSelectedForeground(),ColorUIResource,Returns the menu selected foreground color.,"

getMenuSelectedForeground
public ColorUIResource getMenuSelectedForeground()
Returns the menu selected foreground color. This
 returns the value of getBlack().

Returns:
the menu selected foreground color


"
MetalTheme,getMenuTextFont(),abstract FontUIResource,Returns the menu text font.,"

getMenuTextFont
public abstract FontUIResource getMenuTextFont()
Returns the menu text font.

Returns:
the menu text font


"
MetalTheme,getName(),abstract String,Returns the name of this theme.,"

getName
public abstract String getName()
Returns the name of this theme.

Returns:
the name of this theme


"
MetalTheme,getPrimary1(),protected abstract ColorUIResource,Returns the primary 1 color.,"

getPrimary1
protected abstract ColorUIResource getPrimary1()
Returns the primary 1 color.

Returns:
the primary 1 color


"
MetalTheme,getPrimary2(),protected abstract ColorUIResource,Returns the primary 2 color.,"

getPrimary2
protected abstract ColorUIResource getPrimary2()
Returns the primary 2 color.

Returns:
the primary 2 color


"
MetalTheme,getPrimary3(),protected abstract ColorUIResource,Returns the primary 3 color.,"

getPrimary3
protected abstract ColorUIResource getPrimary3()
Returns the primary 3 color.

Returns:
the primary 3 color


"
MetalTheme,getPrimaryControl(),ColorUIResource,Returns the primary control color.,"

getPrimaryControl
public ColorUIResource getPrimaryControl()
Returns the primary control color. This returns
 the value of getPrimary3().

Returns:
the primary control color


"
MetalTheme,getPrimaryControlDarkShadow(),ColorUIResource,Returns the primary control dark shadow color.,"

getPrimaryControlDarkShadow
public ColorUIResource getPrimaryControlDarkShadow()
Returns the primary control dark shadow color. This
 returns the value of getPrimary1().

Returns:
the primary control dark shadow color


"
MetalTheme,getPrimaryControlHighlight(),ColorUIResource,Returns the primary control highlight color.,"

getPrimaryControlHighlight
public ColorUIResource getPrimaryControlHighlight()
Returns the primary control highlight color. This
 returns the value of getWhite().

Returns:
the primary control highlight color


"
MetalTheme,getPrimaryControlInfo(),ColorUIResource,Returns the primary control info color.,"

getPrimaryControlInfo
public ColorUIResource getPrimaryControlInfo()
Returns the primary control info color. This
 returns the value of getBlack().

Returns:
the primary control info color


"
MetalTheme,getPrimaryControlShadow(),ColorUIResource,Returns the primary control shadow color.,"

getPrimaryControlShadow
public ColorUIResource getPrimaryControlShadow()
Returns the primary control shadow color. This returns
 the value of getPrimary2().

Returns:
the primary control shadow color


"
MetalTheme,getSecondary1(),protected abstract ColorUIResource,Returns the secondary 1 color.,"

getSecondary1
protected abstract ColorUIResource getSecondary1()
Returns the secondary 1 color.

Returns:
the secondary 1 color


"
MetalTheme,getSecondary2(),protected abstract ColorUIResource,Returns the secondary 2 color.,"

getSecondary2
protected abstract ColorUIResource getSecondary2()
Returns the secondary 2 color.

Returns:
the secondary 2 color


"
MetalTheme,getSecondary3(),protected abstract ColorUIResource,Returns the secondary 3 color.,"

getSecondary3
protected abstract ColorUIResource getSecondary3()
Returns the secondary 3 color.

Returns:
the secondary 3 color


"
MetalTheme,getSeparatorBackground(),ColorUIResource,Returns the separator background color.,"

getSeparatorBackground
public ColorUIResource getSeparatorBackground()
Returns the separator background color. This
 returns the value of getWhite().

Returns:
the separator background color


"
MetalTheme,getSeparatorForeground(),ColorUIResource,Returns the separator foreground color.,"

getSeparatorForeground
public ColorUIResource getSeparatorForeground()
Returns the separator foreground color. This
 returns the value of getPrimary1().

Returns:
the separator foreground color


"
MetalTheme,getSubTextFont(),abstract FontUIResource,Returns the sub-text font.,"

getSubTextFont
public abstract FontUIResource getSubTextFont()
Returns the sub-text font.

Returns:
the sub-text font


"
MetalTheme,getSystemTextColor(),ColorUIResource,Returns the system text color.,"

getSystemTextColor
public ColorUIResource getSystemTextColor()
Returns the system text color. This returns the value of
 getBlack().

Returns:
the system text color


"
MetalTheme,getSystemTextFont(),abstract FontUIResource,Returns the system text font.,"

getSystemTextFont
public abstract FontUIResource getSystemTextFont()
Returns the system text font.

Returns:
the system text font


"
MetalTheme,getTextHighlightColor(),ColorUIResource,Returns the text highlight color.,"

getTextHighlightColor
public ColorUIResource getTextHighlightColor()
Returns the text highlight color. This returns the value of
 getPrimary3().

Returns:
the text highlight color


"
MetalTheme,getUserTextColor(),ColorUIResource,Returns the user text color.,"

getUserTextColor
public ColorUIResource getUserTextColor()
Returns the user text color. This returns the value of
 getBlack().

Returns:
the user text color


"
MetalTheme,getUserTextFont(),abstract FontUIResource,Returns the user text font.,"

getUserTextFont
public abstract FontUIResource getUserTextFont()
Returns the user text font.

Returns:
the user text font


"
MetalTheme,getWhite(),protected ColorUIResource,Returns the white color.,"

getWhite
protected ColorUIResource getWhite()
Returns the white color. This returns opaque white
 (0xFFFFFFFF).

Returns:
the white color


"
MetalTheme,getWindowBackground(),ColorUIResource,Returns the window background color.,"

getWindowBackground
public ColorUIResource getWindowBackground()
Returns the window background color. This returns the value of
 getWhite().

Returns:
the window background color


"
MetalTheme,getWindowTitleBackground(),ColorUIResource,Returns the window title background color.,"

getWindowTitleBackground
public ColorUIResource getWindowTitleBackground()
Returns the window title background color. This returns the value of
 getPrimary3().

Returns:
the window title background color


"
MetalTheme,getWindowTitleFont(),abstract FontUIResource,Returns the window title font.,"

getWindowTitleFont
public abstract FontUIResource getWindowTitleFont()
Returns the window title font.

Returns:
the window title font


"
MetalTheme,getWindowTitleForeground(),ColorUIResource,Returns the window title foreground color.,"

getWindowTitleForeground
public ColorUIResource getWindowTitleForeground()
Returns the window title foreground color. This returns the value of
 getBlack().

Returns:
the window title foreground color


"
MetalTheme,getWindowTitleInactiveBackground(),ColorUIResource,Returns the window title inactive background color.,"

getWindowTitleInactiveBackground
public ColorUIResource getWindowTitleInactiveBackground()
Returns the window title inactive background color. This
 returns the value of getSecondary3().

Returns:
the window title inactive background color


"
MetalTheme,getWindowTitleInactiveForeground(),ColorUIResource,Returns the window title inactive foreground color.,"

getWindowTitleInactiveForeground
public ColorUIResource getWindowTitleInactiveForeground()
Returns the window title inactive foreground color. This
 returns the value of getBlack().

Returns:
the window title inactive foreground color


"
MetalToggleButtonUI,createUI(JComponent b),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent b)

"
MetalToggleButtonUI,getDisabledTextColor(),protected Color,NULL,"

getDisabledTextColor
protected Color getDisabledTextColor()

"
MetalToggleButtonUI,getFocusColor(),protected Color,NULL,"

getFocusColor
protected Color getFocusColor()

"
MetalToggleButtonUI,getSelectColor(),protected Color,NULL,"

getSelectColor
protected Color getSelectColor()

"
MetalToggleButtonUI,installDefaults(AbstractButton b),void,NULL,"

installDefaults
public void installDefaults(AbstractButton b)

Overrides:
installDefaults in class BasicButtonUI


"
MetalToggleButtonUI,"paintButtonPressed(Graphics g, AbstractButton b)",protected void,NULL,"

paintButtonPressed
protected void paintButtonPressed(Graphics g,
                                  AbstractButton b)

Overrides:
paintButtonPressed in class BasicButtonUI


"
MetalToggleButtonUI,"paintFocus(Graphics g, AbstractButton b, Rectangle viewRect, Rectangle textRect, Rectangle iconRect)",protected void,NULL,"

paintFocus
protected void paintFocus(Graphics g,
                          AbstractButton b,
                          Rectangle viewRect,
                          Rectangle textRect,
                          Rectangle iconRect)

Overrides:
paintFocus in class BasicButtonUI


"
MetalToggleButtonUI,"paintIcon(Graphics g, AbstractButton b, Rectangle iconRect)",protected void,Paints the appropriate icon of the button b in the space iconRect.,"

paintIcon
protected void paintIcon(Graphics g,
                         AbstractButton b,
                         Rectangle iconRect)
Paints the appropriate icon of the button b in the
 space iconRect.

Overrides:
paintIcon in class BasicToggleButtonUI
Parameters:
g - Graphics to paint to
b - Button to render for
iconRect - space to render in
Throws:
NullPointerException - if any of the arguments are null.
Since:
1.5


"
MetalToggleButtonUI,"paintText(Graphics g, JComponent c, Rectangle textRect, String text)",protected void,As of Java 2 platform v 1.4 this method should not be used or overriden.,"

paintText
protected void paintText(Graphics g,
                         JComponent c,
                         Rectangle textRect,
                         String text)
Description copied from class: BasicButtonUI
As of Java 2 platform v 1.4 this method should not be used or overriden.
 Use the paintText method which takes the AbstractButton argument.

Overrides:
paintText in class BasicButtonUI


"
MetalToggleButtonUI,uninstallDefaults(AbstractButton b),protected void,NULL,"

uninstallDefaults
protected void uninstallDefaults(AbstractButton b)

Overrides:
uninstallDefaults in class BasicButtonUI


"
MetalToggleButtonUI,"update(Graphics g, JComponent c)",void,"If necessary paints the background of the component, then invokes paint.","

update
public void update(Graphics g,
                   JComponent c)
If necessary paints the background of the component, then invokes
 paint.

Overrides:
update in class ComponentUI
Parameters:
g - Graphics to paint to
c - JComponent painting on
Throws:
NullPointerException - if g or c is
         null
Since:
1.5
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent), 
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent)


"
MetalToolBarUI,createContainerListener(),protected ContainerListener,Creates a container listener that will be added to the JToolBar.,"

createContainerListener
protected ContainerListener createContainerListener()
Creates a container listener that will be added to the JToolBar.
 If this method returns null then it will not be added to the
 toolbar.

Returns:
an instance of a ContainerListener or null


"
MetalToolBarUI,createDockingListener(),protected MouseInputListener,NULL,"

createDockingListener
protected MouseInputListener createDockingListener()

Overrides:
createDockingListener in class BasicToolBarUI


"
MetalToolBarUI,createNonRolloverBorder(),protected Border,Creates the non rollover border for toolbar components.,"

createNonRolloverBorder
protected Border createNonRolloverBorder()
Description copied from class: BasicToolBarUI
Creates the non rollover border for toolbar components. This
 border will be installed as the border for components added
 to the toolbar if rollover borders are not enabled.
 
 Override this method to provide an alternate rollover border.

Overrides:
createNonRolloverBorder in class BasicToolBarUI


"
MetalToolBarUI,createRolloverBorder(),protected Border,Creates a rollover border for toolbar components.,"

createRolloverBorder
protected Border createRolloverBorder()
Description copied from class: BasicToolBarUI
Creates a rollover border for toolbar components. The
 rollover border will be installed if rollover borders are
 enabled.
 
 Override this method to provide an alternate rollover border.

Overrides:
createRolloverBorder in class BasicToolBarUI


"
MetalToolBarUI,createRolloverListener(),protected PropertyChangeListener,Creates a property change listener that will be added to the JToolBar.,"

createRolloverListener
protected PropertyChangeListener createRolloverListener()
Creates a property change listener that will be added to the JToolBar.
 If this method returns null then it will not be added to the
 toolbar.

Returns:
an instance of a PropertyChangeListener or null


"
MetalToolBarUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
MetalToolBarUI,installListeners(),protected void,NULL,"

installListeners
protected void installListeners()

Overrides:
installListeners in class BasicToolBarUI


"
MetalToolBarUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class BasicToolBarUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MetalToolBarUI,setBorderToNonRollover(Component c),protected void,Sets the border of the component to have a non-rollover border which was created by the BasicToolBarUI.createNonRolloverBorder() method.,"

setBorderToNonRollover
protected void setBorderToNonRollover(Component c)
Description copied from class: BasicToolBarUI
Sets the border of the component to have a non-rollover border which
 was created by the BasicToolBarUI.createNonRolloverBorder() method.

Overrides:
setBorderToNonRollover in class BasicToolBarUI
Parameters:
c - component which will have a non-rollover border installed
See Also:
BasicToolBarUI.createNonRolloverBorder()


"
MetalToolBarUI,setDragOffset(Point p),protected void,NULL,"

setDragOffset
protected void setDragOffset(Point p)

"
MetalToolBarUI,uninstallListeners(),protected void,NULL,"

uninstallListeners
protected void uninstallListeners()

Overrides:
uninstallListeners in class BasicToolBarUI


"
MetalToolBarUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class BasicToolBarUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MetalToolBarUI,"update(Graphics g, JComponent c)",void,"If necessary paints the background of the component, then invokes paint.","

update
public void update(Graphics g,
                   JComponent c)
If necessary paints the background of the component, then invokes
 paint.

Overrides:
update in class ComponentUI
Parameters:
g - Graphics to paint to
c - JComponent painting on
Throws:
NullPointerException - if g or c is
         null
Since:
1.5
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent), 
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent)


"
MetalToolTipUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
MetalToolTipUI,getAcceleratorString(),String,NULL,"

getAcceleratorString
public String getAcceleratorString()

"
MetalToolTipUI,getPreferredSize(JComponent c),Dimension,Returns the specified component's preferred size appropriate for the look and feel.,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's preferred size appropriate for
 the look and feel.  If null is returned, the preferred
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method returns null.

Overrides:
getPreferredSize in class BasicToolTipUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
MetalToolTipUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class BasicToolTipUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MetalToolTipUI,isAcceleratorHidden(),protected boolean,NULL,"

isAcceleratorHidden
protected boolean isAcceleratorHidden()

"
MetalToolTipUI,"paint(Graphics g, JComponent c)",void,Paints the specified component appropriately for the look and feel.,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: ComponentUI
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class BasicToolTipUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MetalToolTipUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class BasicToolTipUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
MetalTreeUI,createUI(JComponent x),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent x)

"
MetalTreeUI,decodeLineStyle(Object lineStyleFlag),protected void,this function converts between the string passed into the client property and the internal representation (currently and int),"

decodeLineStyle
protected void decodeLineStyle(Object lineStyleFlag)
this function converts between the string passed into the client property
 and the internal representation (currently and int)

"
MetalTreeUI,getHorizontalLegBuffer(),protected int,The horizontal element of legs between nodes starts at the right of the left-hand side of the child node by default.,"

getHorizontalLegBuffer
protected int getHorizontalLegBuffer()
Description copied from class: BasicTreeUI
The horizontal element of legs between nodes starts at the
 right of the left-hand side of the child node by default.  This
 method makes the leg end before that.

Overrides:
getHorizontalLegBuffer in class BasicTreeUI


"
MetalTreeUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class BasicTreeUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
MetalTreeUI,"isLocationInExpandControl(int row, int rowLevel, int mouseX, int mouseY)",protected boolean,NULL,"

isLocationInExpandControl
protected boolean isLocationInExpandControl(int row,
                                            int rowLevel,
                                            int mouseX,
                                            int mouseY)

"
MetalTreeUI,"paint(Graphics g, JComponent c)",void,Paints the specified component appropriately for the look and feel.,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: ComponentUI
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class BasicTreeUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
MetalTreeUI,"paintHorizontalPartOfLeg(Graphics g, Rectangle clipBounds, Insets insets, Rectangle bounds, TreePath path, int row, boolean isExpanded, boolean hasBeenExpanded, boolean isLeaf)",protected void,Paints the horizontal part of the leg.,"

paintHorizontalPartOfLeg
protected void paintHorizontalPartOfLeg(Graphics g,
                                        Rectangle clipBounds,
                                        Insets insets,
                                        Rectangle bounds,
                                        TreePath path,
                                        int row,
                                        boolean isExpanded,
                                        boolean hasBeenExpanded,
                                        boolean isLeaf)
Description copied from class: BasicTreeUI
Paints the horizontal part of the leg. The receiver should
 NOT modify clipBounds, or insets.
 NOTE: parentRow can be -1 if the root is not visible.

Overrides:
paintHorizontalPartOfLeg in class BasicTreeUI


"
MetalTreeUI,"paintHorizontalSeparators(Graphics g, JComponent c)",protected void,NULL,"

paintHorizontalSeparators
protected void paintHorizontalSeparators(Graphics g,
                                         JComponent c)

"
MetalTreeUI,"paintVerticalPartOfLeg(Graphics g, Rectangle clipBounds, Insets insets, TreePath path)",protected void,Paints the vertical part of the leg.,"

paintVerticalPartOfLeg
protected void paintVerticalPartOfLeg(Graphics g,
                                      Rectangle clipBounds,
                                      Insets insets,
                                      TreePath path)
Description copied from class: BasicTreeUI
Paints the vertical part of the leg. The receiver should
 NOT modify clipBounds, insets.

Overrides:
paintVerticalPartOfLeg in class BasicTreeUI


"
MetalTreeUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class BasicTreeUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
OceanTheme,addCustomEntriesToTable(UIDefaults table),void,Add this theme's custom entries to the defaults table.,"

addCustomEntriesToTable
public void addCustomEntriesToTable(UIDefaults table)
Add this theme's custom entries to the defaults table.

Overrides:
addCustomEntriesToTable in class MetalTheme
Parameters:
table - the defaults table, non-null
Throws:
NullPointerException - if table is null
See Also:
MetalLookAndFeel.getDefaults()


"
OceanTheme,getBlack(),protected ColorUIResource,Returns the black color.,"

getBlack
protected ColorUIResource getBlack()
Returns the black color. This returns a color with an rgb hex
 value of 0x333333.

Overrides:
getBlack in class MetalTheme
Returns:
the black color
See Also:
Color.decode(java.lang.String)


"
OceanTheme,getControlTextColor(),ColorUIResource,Returns the control text color.,"

getControlTextColor
public ColorUIResource getControlTextColor()
Returns the control text color. This returns a color with an
 rgb hex value of 0x333333.

Overrides:
getControlTextColor in class MetalTheme
Returns:
the control text color


"
OceanTheme,getDesktopColor(),ColorUIResource,Returns the desktop color.,"

getDesktopColor
public ColorUIResource getDesktopColor()
Returns the desktop color. This returns a color with an rgb hex
 value of 0xFFFFFF.

Overrides:
getDesktopColor in class MetalTheme
Returns:
the desktop color
See Also:
Color.decode(java.lang.String)


"
OceanTheme,getInactiveControlTextColor(),ColorUIResource,Returns the inactive control text color.,"

getInactiveControlTextColor
public ColorUIResource getInactiveControlTextColor()
Returns the inactive control text color. This returns a color with an
 rgb hex value of 0x999999.

Overrides:
getInactiveControlTextColor in class MetalTheme
Returns:
the inactive control text color


"
OceanTheme,getMenuDisabledForeground(),ColorUIResource,Returns the menu disabled foreground color.,"

getMenuDisabledForeground
public ColorUIResource getMenuDisabledForeground()
Returns the menu disabled foreground color. This returns a color with an
 rgb hex value of 0x999999.

Overrides:
getMenuDisabledForeground in class MetalTheme
Returns:
the menu disabled foreground color


"
OceanTheme,getName(),String,"Return the name of this theme, ""Ocean"".","

getName
public String getName()
Return the name of this theme, ""Ocean"".

Overrides:
getName in class DefaultMetalTheme
Returns:
""Ocean""


"
OceanTheme,getPrimary1(),protected ColorUIResource,Returns the primary 1 color.,"

getPrimary1
protected ColorUIResource getPrimary1()
Returns the primary 1 color. This returns a color with an rgb hex value
 of 0x6382BF.

Overrides:
getPrimary1 in class DefaultMetalTheme
Returns:
the primary 1 color
See Also:
Color.decode(java.lang.String)


"
OceanTheme,getPrimary2(),protected ColorUIResource,Returns the primary 2 color.,"

getPrimary2
protected ColorUIResource getPrimary2()
Returns the primary 2 color. This returns a color with an rgb hex value
 of 0xA3B8CC.

Overrides:
getPrimary2 in class DefaultMetalTheme
Returns:
the primary 2 color
See Also:
Color.decode(java.lang.String)


"
OceanTheme,getPrimary3(),protected ColorUIResource,Returns the primary 3 color.,"

getPrimary3
protected ColorUIResource getPrimary3()
Returns the primary 3 color. This returns a color with an rgb hex value
 of 0xB8CFE5.

Overrides:
getPrimary3 in class DefaultMetalTheme
Returns:
the primary 3 color
See Also:
Color.decode(java.lang.String)


"
OceanTheme,getSecondary1(),protected ColorUIResource,Returns the secondary 1 color.,"

getSecondary1
protected ColorUIResource getSecondary1()
Returns the secondary 1 color. This returns a color with an rgb hex
 value of 0x7A8A99.

Overrides:
getSecondary1 in class DefaultMetalTheme
Returns:
the secondary 1 color
See Also:
Color.decode(java.lang.String)


"
OceanTheme,getSecondary2(),protected ColorUIResource,Returns the secondary 2 color.,"

getSecondary2
protected ColorUIResource getSecondary2()
Returns the secondary 2 color. This returns a color with an rgb hex
 value of 0xB8CFE5.

Overrides:
getSecondary2 in class DefaultMetalTheme
Returns:
the secondary 2 color
See Also:
Color.decode(java.lang.String)


"
OceanTheme,getSecondary3(),protected ColorUIResource,Returns the secondary 3 color.,"

getSecondary3
protected ColorUIResource getSecondary3()
Returns the secondary 3 color. This returns a color with an rgb hex
 value of 0xEEEEEE.

Overrides:
getSecondary3 in class DefaultMetalTheme
Returns:
the secondary 3 color
See Also:
Color.decode(java.lang.String)


"
