Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,Clock,1,Clock.systemDefaultZone(),False,,NULL
0,Clock,2,Clock.systemUTC(),False,,NULL
0,Clock,3,Clock.tickSeconds(ZoneId zone),False,,NULL
0,Clock,4,"Clock.fixed(Instant instant, ZoneId zone)",False,,NULL
0,Clock,5,"Clock.offset(Clock baseClock, Duration offset)",False,,NULL
1,Duration,1,"Duration.between(Temporal startInclusive, Temporal endExclusive)",False,,NULL
1,Duration,2,"Duration.of(long amount, TemporalUnit unit)",False,,NULL
1,Duration,3,Duration.ofDays(long days),False,,NULL
1,Duration,4,Duration.ofHours(long hours),False,,NULL
1,Duration,5,Duration.ofMinutes(long minutes),False,,NULL
1,Duration,6,Duration.ofSeconds(long seconds),False,,NULL
1,Duration,7,Duration.ofMillis(long millis),False,,NULL
1,Duration,8,Duration.ofNanos(long nanos),False,,NULL
1,Duration,9,"Duration.ofSeconds(long seconds, int nanoAdjustment)",False,,NULL
1,Duration,10,"Duration.of(long amount, ChronoUnit unit)",False,,NULL
1,Duration,11,"Duration.of(long amount, TemporalUnit unit, ChronoField field)",False,,NULL
1,Duration,12,"Duration.of(long amount, TemporalUnit unit, TemporalField field)",False,,NULL
1,Duration,13,"Duration.of(long amount, TemporalUnit unit, TemporalAdjuster adjuster)",False,,NULL
1,Duration,14,"Duration.of(long amount, TemporalUnit unit, TemporalAdjuster adjuster, TemporalField field)",False,,NULL
1,Duration,15,"Duration.of(long amount, TemporalUnit unit, TemporalAdjuster adjuster, TemporalField field, TemporalAdjuster adjuster2)",False,,NULL
1,Duration,16,"Duration.of(long amount, TemporalUnit unit, TemporalAdjuster adjuster, TemporalField field, TemporalAdjuster adjuster2, TemporalField field2)",False,,NULL
1,Duration,17,"Duration.of(long amount, TemporalUnit unit, TemporalAdjuster adjuster, TemporalField field, TemporalAdjuster adjuster2, TemporalField field2, TemporalAdjuster adjuster3)",False,,NULL
1,Duration,18,"Duration.of(long amount, TemporalUnit unit, TemporalAdjuster adjuster, TemporalField field, TemporalAdjuster adjuster2, TemporalField field2, TemporalAdjuster adjuster3, TemporalField field3)",False,,NULL
1,Duration,19,"Duration.of(long amount, TemporalUnit unit, TemporalAdjuster adjuster, TemporalField field, TemporalAdjuster adjuster2, TemporalField field2, TemporalAdjuster adjuster3, TemporalField field3, TemporalAdjuster adjuster4)",False,,NULL
1,Duration,20,"Duration.of(long amount, TemporalUnit unit, TemporalAdjuster adjuster, TemporalField field, TemporalAdjuster adjuster2, TemporalField field2, TemporalAdjuster adjuster3, TemporalField field3, TemporalAdjuster adjuster4, TemporalField field4)",False,,NULL
2,Instant,1,Instant now(),True,Obtains the current instant from the system clock.,"

now
public static Instant now()
Obtains the current instant from the system clock.
 
 This will query the system UTC clock to
 obtain the current instant.
 
 Using this method will prevent the ability to use an alternate time-source for
 testing because the clock is effectively hard-coded.

Returns:
the current instant using the system clock, not null


"
2,Instant,2,Instant ofEpochSecond(long epochSecond),True,Obtains an instance of Instant using seconds from the epoch of 1970-01-01T00:00:00Z.,"

ofEpochSecond
public static Instant ofEpochSecond(long epochSecond)
Obtains an instance of Instant using seconds from the
 epoch of 1970-01-01T00:00:00Z.
 
 The nanosecond field is set to zero.

Parameters:
epochSecond - the number of seconds from 1970-01-01T00:00:00Z
Returns:
an instant, not null
Throws:
DateTimeException - if the instant exceeds the maximum or minimum instant


"
2,Instant,3,"Instant ofEpochSecond(long epochSecond, long nanoAdjustment)",True,Obtains an instance of Instant using seconds from the epoch of 1970-01-01T00:00:00Z and nanosecond fraction of second.,"

ofEpochSecond
public static Instant ofEpochSecond(long epochSecond,
                                    long nanoAdjustment)
Obtains an instance of Instant using seconds from the
 epoch of 1970-01-01T00:00:00Z and nanosecond fraction of second.
 
 This method allows an arbitrary number of nanoseconds to be passed in.
 The factory will alter the values of the second and nanosecond in order
 to ensure that the stored nanosecond is in the range 0 to 999,999,999.
 For example, the following will result in the exactly the same instant:
 
  Instant.ofEpochSecond(3, 1);
  Instant.ofEpochSecond(4, -999_999_999);
  Instant.ofEpochSecond(2, 1000_000_001);
 

Parameters:
epochSecond - the number of seconds from 1970-01-01T00:00:00Z
nanoAdjustment - the nanosecond adjustment to the number of seconds, positive or negative
Returns:
an instant, not null
Throws:
DateTimeException - if the instant exceeds the maximum or minimum instant
ArithmeticException - if numeric overflow occurs


"
2,Instant,4,Instant from(TemporalAccessor temporal),True,Obtains an instance of Instant from a temporal object.,"

from
public static Instant from(TemporalAccessor temporal)
Obtains an instance of Instant from a temporal object.
 
 This obtains an instant based on the specified temporal.
 A TemporalAccessor represents an arbitrary set of date and time information,
 which this factory converts to an instance of Instant.
 
 The conversion extracts the INSTANT_SECONDS
 and NANO_OF_SECOND fields.
 
 This method matches the signature of the functional interface TemporalQuery
 allowing it to be used as a query via method reference, Instant::from.

Parameters:
temporal - the temporal object to convert, not null
Returns:
the instant, not null
Throws:
DateTimeException - if unable to convert to an Instant


"
2,Instant,5,Instant parse(CharSequence text),True,Obtains an instance of Instant from a text string such as 2007-12-03T10:15:30.00Z.,"

parse
public static Instant parse(CharSequence text)
Obtains an instance of Instant from a text string such as
 2007-12-03T10:15:30.00Z.
 
 The string must represent a valid instant in UTC and is parsed using
 DateTimeFormatter.ISO_INSTANT.

Parameters:
text - the text to parse, not null
Returns:
the parsed instant, not null
Throws:
DateTimeParseException - if the text cannot be parsed


"
3,LocalDate,1,LocalDate now(),True,Obtains the current date from the system clock in the default time-zone.,"

now
public static LocalDate now()
Obtains the current date from the system clock in the default time-zone.
 
 This will query the system clock in the default
 time-zone to obtain the current date.
 
 Using this method will prevent the ability to use an alternate clock for testing
 because the clock is hard-coded.

Returns:
the current date using the system clock and default time-zone, not null


"
3,LocalDate,2,"LocalDate of(int year, int month, int dayOfMonth)",True,"Obtains an instance of LocalDate from a year, month and day.","

of
public static LocalDate of(int year,
                           int month,
                           int dayOfMonth)
Obtains an instance of LocalDate from a year, month and day.
 
 This returns a LocalDate with the specified year, month and day-of-month.
 The day must be valid for the year and month, otherwise an exception will be thrown.

Parameters:
year - the year to represent, from MIN_YEAR to MAX_YEAR
month - the month-of-year to represent, from 1 (January) to 12 (December)
dayOfMonth - the day-of-month to represent, from 1 to 31
Returns:
the local date, not null
Throws:
DateTimeException - if the value of any field is out of range,
  or if the day-of-month is invalid for the month-year


"
3,LocalDate,3,int getYear(),True,Gets the year field.,"

getYear
public int getYear()
Gets the year field.
 
 This method returns the primitive int value for the year.
 
 The year returned by this method is proleptic as per get(YEAR).
 To obtain the year-of-era, use get(YEAR_OF_ERA).

Returns:
the year, from MIN_YEAR to MAX_YEAR


"
3,LocalDate,4,Month getMonth(),True,Gets the month-of-year field using the Month enum.,"

getMonth
public Month getMonth()
Gets the month-of-year field using the Month enum.
 
 This method returns the enum Month for the month.
 This avoids confusion as to what int values mean.
 If you need access to the primitive int value then the enum
 provides the int value.

Returns:
the month-of-year, not null
See Also:
getMonthValue()


"
3,LocalDate,5,int getDayOfMonth(),True,Gets the day-of-month field.,"

getDayOfMonth
public int getDayOfMonth()
Gets the day-of-month field.
 
 This method returns the primitive int value for the day-of-month.

Returns:
the day-of-month, from 1 to 31


"
3,LocalDate,6,int getDayOfYear(),True,Gets the day-of-year field.,"

getDayOfYear
public int getDayOfYear()
Gets the day-of-year field.
 
 This method returns the primitive int value for the day-of-year.

Returns:
the day-of-year, from 1 to 365, or 366 in a leap year


"
3,LocalDate,7,DayOfWeek getDayOfWeek(),True,"Gets the day-of-week field, which is an enum DayOfWeek.","

getDayOfWeek
public DayOfWeek getDayOfWeek()
Gets the day-of-week field, which is an enum DayOfWeek.
 
 This method returns the enum DayOfWeek for the day-of-week.
 This avoids confusion as to what int values mean.
 If you need access to the primitive int value then the enum
 provides the int value.
 
 Additional information can be obtained from the DayOfWeek.
 This includes textual names of the values.

Returns:
the day-of-week, not null


"
3,LocalDate,8,boolean isLeapYear(),True,"Checks if the year is a leap year, according to the ISO proleptic calendar system rules.","

isLeapYear
public boolean isLeapYear()
Checks if the year is a leap year, according to the ISO proleptic
 calendar system rules.
 
 This method applies the current rules for leap years across the whole time-line.
 In general, a year is a leap year if it is divisible by four without
 remainder. However, years divisible by 100, are not leap years, with
 the exception of years divisible by 400 which are.
 
 For example, 1904 is a leap year it is divisible by 4.
 1900 was not a leap year as it is divisible by 100, however 2000 was a
 leap year as it is divisible by 400.
 
 The calculation is proleptic - applying the same rules into the far future and far past.
 This is historically inaccurate, but is correct for the ISO-8601 standard.

Specified by:
isLeapYear in interface ChronoLocalDate
Returns:
true if the year is leap, false otherwise


"
3,LocalDate,9,LocalDate plusDays(long days),True,Returns a copy of this LocalDate with the specified number of days added.,"

plusDays
public LocalDate plusDays(long daysToAdd)
Returns a copy of this LocalDate with the specified number of days added.
 
 This method adds the specified amount to the days field incrementing the
 month and year fields as necessary to ensure the result remains valid.
 The result is only invalid if the maximum/minimum year is exceeded.
 
 For example, 2008-12-31 plus one day would result in 2009-01-01.
 
 This instance is immutable and unaffected by this method call.

Parameters:
daysToAdd - the days to add, may be negative
Returns:
a LocalDate based on this date with the days added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
3,LocalDate,10,LocalDate minusDays(long days),True,Returns a copy of this LocalDate with the specified number of days subtracted.,"

minusDays
public LocalDate minusDays(long daysToSubtract)
Returns a copy of this LocalDate with the specified number of days subtracted.
 
 This method subtracts the specified amount from the days field decrementing the
 month and year fields as necessary to ensure the result remains valid.
 The result is only invalid if the maximum/minimum year is exceeded.
 
 For example, 2009-01-01 minus one day would result in 2008-12-31.
 
 This instance is immutable and unaffected by this method call.

Parameters:
daysToSubtract - the days to subtract, may be negative
Returns:
a LocalDate based on this date with the days subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
3,LocalDate,11,LocalDate plusWeeks(long weeks),True,Returns a copy of this LocalDate with the specified number of weeks added.,"

plusWeeks
public LocalDate plusWeeks(long weeksToAdd)
Returns a copy of this LocalDate with the specified number of weeks added.
 
 This method adds the specified amount in weeks to the days field incrementing
 the month and year fields as necessary to ensure the result remains valid.
 The result is only invalid if the maximum/minimum year is exceeded.
 
 For example, 2008-12-31 plus one week would result in 2009-01-07.
 
 This instance is immutable and unaffected by this method call.

Parameters:
weeksToAdd - the weeks to add, may be negative
Returns:
a LocalDate based on this date with the weeks added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
3,LocalDate,12,LocalDate minusWeeks(long weeks),True,Returns a copy of this LocalDate with the specified number of weeks subtracted.,"

minusWeeks
public LocalDate minusWeeks(long weeksToSubtract)
Returns a copy of this LocalDate with the specified number of weeks subtracted.
 
 This method subtracts the specified amount in weeks from the days field decrementing
 the month and year fields as necessary to ensure the result remains valid.
 The result is only invalid if the maximum/minimum year is exceeded.
 
 For example, 2009-01-07 minus one week would result in 2008-12-31.
 
 This instance is immutable and unaffected by this method call.

Parameters:
weeksToSubtract - the weeks to subtract, may be negative
Returns:
a LocalDate based on this date with the weeks subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
3,LocalDate,13,LocalDate plusMonths(long months),True,Returns a copy of this LocalDate with the specified number of months added.,"

plusMonths
public LocalDate plusMonths(long monthsToAdd)
Returns a copy of this LocalDate with the specified number of months added.
 
 This method adds the specified amount to the months field in three steps:
 
Add the input months to the month-of-year field
Check if the resulting date would be invalid
Adjust the day-of-month to the last valid day if necessary


 For example, 2007-03-31 plus one month would result in the invalid date
 2007-04-31. Instead of returning an invalid result, the last valid day
 of the month, 2007-04-30, is selected instead.
 
 This instance is immutable and unaffected by this method call.

Parameters:
monthsToAdd - the months to add, may be negative
Returns:
a LocalDate based on this date with the months added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
3,LocalDate,14,LocalDate minusMonths(long months),True,Returns a copy of this LocalDate with the specified number of months subtracted.,"

minusMonths
public LocalDate minusMonths(long monthsToSubtract)
Returns a copy of this LocalDate with the specified number of months subtracted.
 
 This method subtracts the specified amount from the months field in three steps:
 
Subtract the input months from the month-of-year field
Check if the resulting date would be invalid
Adjust the day-of-month to the last valid day if necessary


 For example, 2007-03-31 minus one month would result in the invalid date
 2007-02-31. Instead of returning an invalid result, the last valid day
 of the month, 2007-02-28, is selected instead.
 
 This instance is immutable and unaffected by this method call.

Parameters:
monthsToSubtract - the months to subtract, may be negative
Returns:
a LocalDate based on this date with the months subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
3,LocalDate,15,LocalDate plusYears(long years),True,Returns a copy of this LocalDate with the specified number of years added.,"

plusYears
public LocalDate plusYears(long yearsToAdd)
Returns a copy of this LocalDate with the specified number of years added.
 
 This method adds the specified amount to the years field in three steps:
 
Add the input years to the year field
Check if the resulting date would be invalid
Adjust the day-of-month to the last valid day if necessary


 For example, 2008-02-29 (leap year) plus one year would result in the
 invalid date 2009-02-29 (standard year). Instead of returning an invalid
 result, the last valid day of the month, 2009-02-28, is selected instead.
 
 This instance is immutable and unaffected by this method call.

Parameters:
yearsToAdd - the years to add, may be negative
Returns:
a LocalDate based on this date with the years added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
3,LocalDate,16,LocalDate minusYears(long years),True,Returns a copy of this LocalDate with the specified number of years subtracted.,"

minusYears
public LocalDate minusYears(long yearsToSubtract)
Returns a copy of this LocalDate with the specified number of years subtracted.
 
 This method subtracts the specified amount from the years field in three steps:
 
Subtract the input years from the year field
Check if the resulting date would be invalid
Adjust the day-of-month to the last valid day if necessary


 For example, 2008-02-29 (leap year) minus one year would result in the
 invalid date 2007-02-29 (standard year). Instead of returning an invalid
 result, the last valid day of the month, 2007-02-28, is selected instead.
 
 This instance is immutable and unaffected by this method call.

Parameters:
yearsToSubtract - the years to subtract, may be negative
Returns:
a LocalDate based on this date with the years subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
3,LocalDate,17,"long until(Temporal endExclusive, TemporalUnit unit)",True,Calculates the amount of time until another date in terms of the specified unit.,"

until
public long until(Temporal endExclusive,
                  TemporalUnit unit)
Calculates the amount of time until another date in terms of the specified unit.
 
 This calculates the amount of time between two LocalDate
 objects in terms of a single TemporalUnit.
 The start and end points are this and the specified date.
 The result will be negative if the end is before the start.
 The Temporal passed to this method is converted to a
 LocalDate using from(TemporalAccessor).
 For example, the amount in days between two dates can be calculated
 using startDate.until(endDate, DAYS).
 
 The calculation returns a whole number, representing the number of
 complete units between the two dates.
 For example, the amount in months between 2012-06-15 and 2012-08-14
 will only be one month as it is one day short of two months.
 
 There are two equivalent ways of using this method.
 The first is to invoke this method.
 The second is to use TemporalUnit.between(Temporal, Temporal):
 
   // these two lines are equivalent
   amount = start.until(end, MONTHS);
   amount = MONTHS.between(start, end);
 
 The choice should be made based on which makes the code more readable.
 
 The calculation is implemented in this method for ChronoUnit.
 The units DAYS, WEEKS, MONTHS, YEARS,
 DECADES, CENTURIES, MILLENNIA and ERAS
 are supported. Other ChronoUnit values will throw an exception.
 
 If the unit is not a ChronoUnit, then the result of this method
 is obtained by invoking TemporalUnit.between(Temporal, Temporal)
 passing this as the first argument and the converted input temporal
 as the second argument.
 
 This instance is immutable and unaffected by this method call.

Specified by:
until in interface ChronoLocalDate
Specified by:
until in interface Temporal
Parameters:
endExclusive - the end date, exclusive, which is converted to a LocalDate, not null
unit - the unit to measure the amount in, not null
Returns:
the amount of time between this date and the end date
Throws:
DateTimeException - if the amount cannot be calculated, or the end
  temporal cannot be converted to a LocalDate
UnsupportedTemporalTypeException - if the unit is not supported
ArithmeticException - if numeric overflow occurs


"
3,LocalDate,18,long toEpochDay(),True,Converts this date to the Epoch Day.,"

toEpochDay
public long toEpochDay()
Description copied from interface: ChronoLocalDate
Converts this date to the Epoch Day.
 
 The Epoch Day count is a simple
 incrementing count of days where day 0 is 1970-01-01 (ISO).
 This definition is the same for all chronologies, enabling conversion.
 
 This default implementation queries the EPOCH_DAY field.

Specified by:
toEpochDay in interface ChronoLocalDate
Returns:
the Epoch Day equivalent to this date


"
3,LocalDate,19,long toEpochSecond(ZoneOffset offset),False,,NULL
3,LocalDate,20,LocalDate with(TemporalAdjuster adjuster),True,Returns an adjusted copy of this date.,"

with
public LocalDate with(TemporalAdjuster adjuster)
Returns an adjusted copy of this date.
 
 This returns a LocalDate, based on this one, with the date adjusted.
 The adjustment takes place using the specified adjuster strategy object.
 Read the documentation of the adjuster to understand what adjustment will be made.
 
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 Key date-time classes also implement the TemporalAdjuster interface,
 such as Month and MonthDay.
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 For example this code returns a date on the last day of July:
 
  import static java.time.Month.*;
  import static java.time.temporal.TemporalAdjusters.*;

  result = localDate.with(JULY).with(lastDayOfMonth());
 

 The result of this method is obtained by invoking the
 TemporalAdjuster.adjustInto(Temporal) method on the
 specified adjuster passing this as the argument.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
a LocalDate based on this with the adjustment made, not null
Throws:
DateTimeException - if the adjustment cannot be made
ArithmeticException - if numeric overflow occurs


"
3,LocalDate,21,LocalDate with(TemporalAdjusters adjuster),False,,NULL
3,LocalDate,22,LocalDate withYear(int year),True,Returns a copy of this LocalDate with the year altered.,"

withYear
public LocalDate withYear(int year)
Returns a copy of this LocalDate with the year altered.
 
 If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.
 
 This instance is immutable and unaffected by this method call.

Parameters:
year - the year to set in the result, from MIN_YEAR to MAX_YEAR
Returns:
a LocalDate based on this date with the requested year, not null
Throws:
DateTimeException - if the year value is invalid


"
3,LocalDate,23,LocalDate withMonth(int month),True,Returns a copy of this LocalDate with the month-of-year altered.,"

withMonth
public LocalDate withMonth(int month)
Returns a copy of this LocalDate with the month-of-year altered.
 
 If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.
 
 This instance is immutable and unaffected by this method call.

Parameters:
month - the month-of-year to set in the result, from 1 (January) to 12 (December)
Returns:
a LocalDate based on this date with the requested month, not null
Throws:
DateTimeException - if the month-of-year value is invalid


"
3,LocalDate,24,LocalDate withDayOfMonth(int dayOfMonth),True,Returns a copy of this LocalDate with the day-of-month altered.,"

withDayOfMonth
public LocalDate withDayOfMonth(int dayOfMonth)
Returns a copy of this LocalDate with the day-of-month altered.
 
 If the resulting date is invalid, an exception is thrown.
 
 This instance is immutable and unaffected by this method call.

Parameters:
dayOfMonth - the day-of-month to set in the result, from 1 to 28-31
Returns:
a LocalDate based on this date with the requested day, not null
Throws:
DateTimeException - if the day-of-month value is invalid,
  or if the day-of-month is invalid for the month-year


"
3,LocalDate,25,LocalDate withDayOfYear(int dayOfYear),True,Returns a copy of this LocalDate with the day-of-year altered.,"

withDayOfYear
public LocalDate withDayOfYear(int dayOfYear)
Returns a copy of this LocalDate with the day-of-year altered.
 
 If the resulting date is invalid, an exception is thrown.
 
 This instance is immutable and unaffected by this method call.

Parameters:
dayOfYear - the day-of-year to set in the result, from 1 to 365-366
Returns:
a LocalDate based on this date with the requested day, not null
Throws:
DateTimeException - if the day-of-year value is invalid,
  or if the day-of-year is invalid for the year


"
3,LocalDate,26,LocalDate with(TemporalAdjuster adjuster),True,Returns an adjusted copy of this date.,"

with
public LocalDate with(TemporalAdjuster adjuster)
Returns an adjusted copy of this date.
 
 This returns a LocalDate, based on this one, with the date adjusted.
 The adjustment takes place using the specified adjuster strategy object.
 Read the documentation of the adjuster to understand what adjustment will be made.
 
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 Key date-time classes also implement the TemporalAdjuster interface,
 such as Month and MonthDay.
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 For example this code returns a date on the last day of July:
 
  import static java.time.Month.*;
  import static java.time.temporal.TemporalAdjusters.*;

  result = localDate.with(JULY).with(lastDayOfMonth());
 

 The result of this method is obtained by invoking the
 TemporalAdjuster.adjustInto(Temporal) method on the
 specified adjuster passing this as the argument.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
a LocalDate based on this with the adjustment made, not null
Throws:
DateTimeException - if the adjustment cannot be made
ArithmeticException - if numeric overflow occurs


"
3,LocalDate,27,LocalDate with(TemporalAdjusters adjuster),False,,NULL
3,LocalDate,28,LocalDate withYear(int year),True,Returns a copy of this LocalDate with the year altered.,"

withYear
public LocalDate withYear(int year)
Returns a copy of this LocalDate with the year altered.
 
 If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.
 
 This instance is immutable and unaffected by this method call.

Parameters:
year - the year to set in the result, from MIN_YEAR to MAX_YEAR
Returns:
a LocalDate based on this date with the requested year, not null
Throws:
DateTimeException - if the year value is invalid


"
3,LocalDate,29,LocalDate withMonth(int month),True,Returns a copy of this LocalDate with the month-of-year altered.,"

withMonth
public LocalDate withMonth(int month)
Returns a copy of this LocalDate with the month-of-year altered.
 
 If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.
 
 This instance is immutable and unaffected by this method call.

Parameters:
month - the month-of-year to set in the result, from 1 (January) to 12 (December)
Returns:
a LocalDate based on this date with the requested month, not null
Throws:
DateTimeException - if the month-of-year value is invalid


"
3,LocalDate,30,LocalDate withDayOfMonth(int dayOfMonth),True,Returns a copy of this LocalDate with the day-of-month altered.,"

withDayOfMonth
public LocalDate withDayOfMonth(int dayOfMonth)
Returns a copy of this LocalDate with the day-of-month altered.
 
 If the resulting date is invalid, an exception is thrown.
 
 This instance is immutable and unaffected by this method call.

Parameters:
dayOfMonth - the day-of-month to set in the result, from 1 to 28-31
Returns:
a LocalDate based on this date with the requested day, not null
Throws:
DateTimeException - if the day-of-month value is invalid,
  or if the day-of-month is invalid for the month-year


"
3,LocalDate,31,LocalDate withDayOfYear(int dayOfYear),True,Returns a copy of this LocalDate with the day-of-year altered.,"

withDayOfYear
public LocalDate withDayOfYear(int dayOfYear)
Returns a copy of this LocalDate with the day-of-year altered.
 
 If the resulting date is invalid, an exception is thrown.
 
 This instance is immutable and unaffected by this method call.

Parameters:
dayOfYear - the day-of-year to set in the result, from 1 to 365-366
Returns:
a LocalDate based on this date with the requested day, not null
Throws:
DateTimeException - if the day-of-year value is invalid,
  or if the day-of-year is invalid for the year


"
3,LocalDate,32,LocalDate with(TemporalAdjuster adjuster),True,Returns an adjusted copy of this date.,"

with
public LocalDate with(TemporalAdjuster adjuster)
Returns an adjusted copy of this date.
 
 This returns a LocalDate, based on this one, with the date adjusted.
 The adjustment takes place using the specified adjuster strategy object.
 Read the documentation of the adjuster to understand what adjustment will be made.
 
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 Key date-time classes also implement the TemporalAdjuster interface,
 such as Month and MonthDay.
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 For example this code returns a date on the last day of July:
 
  import static java.time.Month.*;
  import static java.time.temporal.TemporalAdjusters.*;

  result = localDate.with(JULY).with(lastDayOfMonth());
 

 The result of this method is obtained by invoking the
 TemporalAdjuster.adjustInto(Temporal) method on the
 specified adjuster passing this as the argument.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
a LocalDate based on this with the adjustment made, not null
Throws:
DateTimeException - if the adjustment cannot be made
ArithmeticException - if numeric overflow occurs


"
3,LocalDate,33,LocalDate with(TemporalAdjusters adjuster),False,,NULL
3,LocalDate,34,LocalDate withYear(int year),True,Returns a copy of this LocalDate with the year altered.,"

withYear
public LocalDate withYear(int year)
Returns a copy of this LocalDate with the year altered.
 
 If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.
 
 This instance is immutable and unaffected by this method call.

Parameters:
year - the year to set in the result, from MIN_YEAR to MAX_YEAR
Returns:
a LocalDate based on this date with the requested year, not null
Throws:
DateTimeException - if the year value is invalid


"
3,LocalDate,35,LocalDate withMonth(int month),True,Returns a copy of this LocalDate with the month-of-year altered.,"

withMonth
public LocalDate withMonth(int month)
Returns a copy of this LocalDate with the month-of-year altered.
 
 If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.
 
 This instance is immutable and unaffected by this method call.

Parameters:
month - the month-of-year to set in the result, from 1 (January) to 12 (December)
Returns:
a LocalDate based on this date with the requested month, not null
Throws:
DateTimeException - if the month-of-year value is invalid


"
3,LocalDate,36,LocalDate withDayOfMonth(int dayOfMonth),True,Returns a copy of this LocalDate with the day-of-month altered.,"

withDayOfMonth
public LocalDate withDayOfMonth(int dayOfMonth)
Returns a copy of this LocalDate with the day-of-month altered.
 
 If the resulting date is invalid, an exception is thrown.
 
 This instance is immutable and unaffected by this method call.

Parameters:
dayOfMonth - the day-of-month to set in the result, from 1 to 28-31
Returns:
a LocalDate based on this date with the requested day, not null
Throws:
DateTimeException - if the day-of-month value is invalid,
  or if the day-of-month is invalid for the month-year


"
3,LocalDate,37,LocalDate withDayOfYear(int dayOfYear),True,Returns a copy of this LocalDate with the day-of-year altered.,"

withDayOfYear
public LocalDate withDayOfYear(int dayOfYear)
Returns a copy of this LocalDate with the day-of-year altered.
 
 If the resulting date is invalid, an exception is thrown.
 
 This instance is immutable and unaffected by this method call.

Parameters:
dayOfYear - the day-of-year to set in the result, from 1 to 365-366
Returns:
a LocalDate based on this date with the requested day, not null
Throws:
DateTimeException - if the day-of-year value is invalid,
  or if the day-of-year is invalid for the year


"
3,LocalDate,38,LocalDate with(TemporalAdjuster adjuster),True,Returns an adjusted copy of this date.,"

with
public LocalDate with(TemporalAdjuster adjuster)
Returns an adjusted copy of this date.
 
 This returns a LocalDate, based on this one, with the date adjusted.
 The adjustment takes place using the specified adjuster strategy object.
 Read the documentation of the adjuster to understand what adjustment will be made.
 
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 Key date-time classes also implement the TemporalAdjuster interface,
 such as Month and MonthDay.
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 For example this code returns a date on the last day of July:
 
  import static java.time.Month.*;
  import static java.time.temporal.TemporalAdjusters.*;

  result = localDate.with(JULY).with(lastDayOfMonth());
 

 The result of this method is obtained by invoking the
 TemporalAdjuster.adjustInto(Temporal) method on the
 specified adjuster passing this as the argument.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
a LocalDate based on this with the adjustment made, not null
Throws:
DateTimeException - if the adjustment cannot be made
ArithmeticException - if numeric overflow occurs


"
3,LocalDate,39,LocalDate with(TemporalAdjusters adjuster),False,,NULL
3,LocalDate,40,LocalDate withYear(int year),True,Returns a copy of this LocalDate with the year altered.,"

withYear
public LocalDate withYear(int year)
Returns a copy of this LocalDate with the year altered.
 
 If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.
 
 This instance is immutable and unaffected by this method call.

Parameters:
year - the year to set in the result, from MIN_YEAR to MAX_YEAR
Returns:
a LocalDate based on this date with the requested year, not null
Throws:
DateTimeException - if the year value is invalid


"
3,LocalDate,41,LocalDate withMonth(int month),True,Returns a copy of this LocalDate with the month-of-year altered.,"

withMonth
public LocalDate withMonth(int month)
Returns a copy of this LocalDate with the month-of-year altered.
 
 If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.
 
 This instance is immutable and unaffected by this method call.

Parameters:
month - the month-of-year to set in the result, from 1 (January) to 12 (December)
Returns:
a LocalDate based on this date with the requested month, not null
Throws:
DateTimeException - if the month-of-year value is invalid


"
3,LocalDate,42,LocalDate withDayOfMonth(int dayOfMonth),True,Returns a copy of this LocalDate with the day-of-month altered.,"

withDayOfMonth
public LocalDate withDayOfMonth(int dayOfMonth)
Returns a copy of this LocalDate with the day-of-month altered.
 
 If the resulting date is invalid, an exception is thrown.
 
 This instance is immutable and unaffected by this method call.

Parameters:
dayOfMonth - the day-of-month to set in the result, from 1 to 28-31
Returns:
a LocalDate based on this date with the requested day, not null
Throws:
DateTimeException - if the day-of-month value is invalid,
  or if the day-of-month is invalid for the month-year


"
3,LocalDate,43,LocalDate withDayOfYear(int dayOfYear),True,Returns a copy of this LocalDate with the day-of-year altered.,"

withDayOfYear
public LocalDate withDayOfYear(int dayOfYear)
Returns a copy of this LocalDate with the day-of-year altered.
 
 If the resulting date is invalid, an exception is thrown.
 
 This instance is immutable and unaffected by this method call.

Parameters:
dayOfYear - the day-of-year to set in the result, from 1 to 365-366
Returns:
a LocalDate based on this date with the requested day, not null
Throws:
DateTimeException - if the day-of-year value is invalid,
  or if the day-of-year is invalid for the year


"
3,LocalDate,44,LocalDate with(TemporalAdjuster adjuster),True,Returns an adjusted copy of this date.,"

with
public LocalDate with(TemporalAdjuster adjuster)
Returns an adjusted copy of this date.
 
 This returns a LocalDate, based on this one, with the date adjusted.
 The adjustment takes place using the specified adjuster strategy object.
 Read the documentation of the adjuster to understand what adjustment will be made.
 
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 Key date-time classes also implement the TemporalAdjuster interface,
 such as Month and MonthDay.
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 For example this code returns a date on the last day of July:
 
  import static java.time.Month.*;
  import static java.time.temporal.TemporalAdjusters.*;

  result = localDate.with(JULY).with(lastDayOfMonth());
 

 The result of this method is obtained by invoking the
 TemporalAdjuster.adjustInto(Temporal) method on the
 specified adjuster passing this as the argument.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
a LocalDate based on this with the adjustment made, not null
Throws:
DateTimeException - if the adjustment cannot be made
ArithmeticException - if numeric overflow occurs


"
3,LocalDate,45,LocalDate with(TemporalAdjusters adjuster),False,,NULL
4,LocalDateTime,1,LocalDateTime now(),True,Obtains the current date-time from the system clock in the default time-zone.,"

now
public static LocalDateTime now()
Obtains the current date-time from the system clock in the default time-zone.
 
 This will query the system clock in the default
 time-zone to obtain the current date-time.
 
 Using this method will prevent the ability to use an alternate clock for testing
 because the clock is hard-coded.

Returns:
the current date-time using the system clock and default time-zone, not null


"
4,LocalDateTime,2,"LocalDateTime of(int year, int month, int dayOfMonth, int hour, int minute)",True,"Obtains an instance of LocalDateTime from year, month, day, hour and minute, setting the second and nanosecond to zero.","

of
public static LocalDateTime of(int year,
                               int month,
                               int dayOfMonth,
                               int hour,
                               int minute)
Obtains an instance of LocalDateTime from year, month,
 day, hour and minute, setting the second and nanosecond to zero.
 
 This returns a LocalDateTime with the specified year, month,
 day-of-month, hour and minute.
 The day must be valid for the year and month, otherwise an exception will be thrown.
 The second and nanosecond fields will be set to zero.

Parameters:
year - the year to represent, from MIN_YEAR to MAX_YEAR
month - the month-of-year to represent, from 1 (January) to 12 (December)
dayOfMonth - the day-of-month to represent, from 1 to 31
hour - the hour-of-day to represent, from 0 to 23
minute - the minute-of-hour to represent, from 0 to 59
Returns:
the local date-time, not null
Throws:
DateTimeException - if the value of any field is out of range,
  or if the day-of-month is invalid for the month-year


"
4,LocalDateTime,3,LocalDateTime parse(CharSequence text),True,Obtains an instance of LocalDateTime from a text string such as 2007-12-03T10:15:30.,"

parse
public static LocalDateTime parse(CharSequence text)
Obtains an instance of LocalDateTime from a text string such as 2007-12-03T10:15:30.
 
 The string must represent a valid date-time and is parsed using
 DateTimeFormatter.ISO_LOCAL_DATE_TIME.

Parameters:
text - the text to parse such as ""2007-12-03T10:15:30"", not null
Returns:
the parsed local date-time, not null
Throws:
DateTimeParseException - if the text cannot be parsed


"
4,LocalDateTime,4,int getYear(),True,Gets the year field.,"

getYear
public int getYear()
Gets the year field.
 
 This method returns the primitive int value for the year.
 
 The year returned by this method is proleptic as per get(YEAR).
 To obtain the year-of-era, use get(YEAR_OF_ERA).

Returns:
the year, from MIN_YEAR to MAX_YEAR


"
4,LocalDateTime,5,Month getMonth(),True,Gets the month-of-year field using the Month enum.,"

getMonth
public Month getMonth()
Gets the month-of-year field using the Month enum.
 
 This method returns the enum Month for the month.
 This avoids confusion as to what int values mean.
 If you need access to the primitive int value then the enum
 provides the int value.

Returns:
the month-of-year, not null
See Also:
getMonthValue()


"
4,LocalDateTime,6,int getDayOfMonth(),True,Gets the day-of-month field.,"

getDayOfMonth
public int getDayOfMonth()
Gets the day-of-month field.
 
 This method returns the primitive int value for the day-of-month.

Returns:
the day-of-month, from 1 to 31


"
4,LocalDateTime,7,int getHour(),True,Gets the hour-of-day field.,"

getHour
public int getHour()
Gets the hour-of-day field.

Returns:
the hour-of-day, from 0 to 23


"
4,LocalDateTime,8,int getMinute(),True,Gets the minute-of-hour field.,"

getMinute
public int getMinute()
Gets the minute-of-hour field.

Returns:
the minute-of-hour, from 0 to 59


"
4,LocalDateTime,9,int getSecond(),True,Gets the second-of-minute field.,"

getSecond
public int getSecond()
Gets the second-of-minute field.

Returns:
the second-of-minute, from 0 to 59


"
4,LocalDateTime,10,int getNano(),True,Gets the nano-of-second field.,"

getNano
public int getNano()
Gets the nano-of-second field.

Returns:
the nano-of-second, from 0 to 999,999,999


"
4,LocalDateTime,11,LocalDateTime withYear(int year),True,Returns a copy of this LocalDateTime with the year altered.,"

withYear
public LocalDateTime withYear(int year)
Returns a copy of this LocalDateTime with the year altered.
 
 The time does not affect the calculation and will be the same in the result.
 If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.
 
 This instance is immutable and unaffected by this method call.

Parameters:
year - the year to set in the result, from MIN_YEAR to MAX_YEAR
Returns:
a LocalDateTime based on this date-time with the requested year, not null
Throws:
DateTimeException - if the year value is invalid


"
4,LocalDateTime,12,LocalDateTime withMonth(int month),True,Returns a copy of this LocalDateTime with the month-of-year altered.,"

withMonth
public LocalDateTime withMonth(int month)
Returns a copy of this LocalDateTime with the month-of-year altered.
 
 The time does not affect the calculation and will be the same in the result.
 If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.
 
 This instance is immutable and unaffected by this method call.

Parameters:
month - the month-of-year to set in the result, from 1 (January) to 12 (December)
Returns:
a LocalDateTime based on this date-time with the requested month, not null
Throws:
DateTimeException - if the month-of-year value is invalid


"
4,LocalDateTime,13,LocalDateTime withDayOfMonth(int dayOfMonth),True,Returns a copy of this LocalDateTime with the day-of-month altered.,"

withDayOfMonth
public LocalDateTime withDayOfMonth(int dayOfMonth)
Returns a copy of this LocalDateTime with the day-of-month altered.
 
 If the resulting date-time is invalid, an exception is thrown.
 The time does not affect the calculation and will be the same in the result.
 
 This instance is immutable and unaffected by this method call.

Parameters:
dayOfMonth - the day-of-month to set in the result, from 1 to 28-31
Returns:
a LocalDateTime based on this date-time with the requested day, not null
Throws:
DateTimeException - if the day-of-month value is invalid,
  or if the day-of-month is invalid for the month-year


"
4,LocalDateTime,14,LocalDateTime withHour(int hour),True,Returns a copy of this LocalDateTime with the hour-of-day altered.,"

withHour
public LocalDateTime withHour(int hour)
Returns a copy of this LocalDateTime with the hour-of-day altered.
 
 This instance is immutable and unaffected by this method call.

Parameters:
hour - the hour-of-day to set in the result, from 0 to 23
Returns:
a LocalDateTime based on this date-time with the requested hour, not null
Throws:
DateTimeException - if the hour value is invalid


"
4,LocalDateTime,15,LocalDateTime withMinute(int minute),True,Returns a copy of this LocalDateTime with the minute-of-hour altered.,"

withMinute
public LocalDateTime withMinute(int minute)
Returns a copy of this LocalDateTime with the minute-of-hour altered.
 
 This instance is immutable and unaffected by this method call.

Parameters:
minute - the minute-of-hour to set in the result, from 0 to 59
Returns:
a LocalDateTime based on this date-time with the requested minute, not null
Throws:
DateTimeException - if the minute value is invalid


"
4,LocalDateTime,16,LocalDateTime withSecond(int second),True,Returns a copy of this LocalDateTime with the second-of-minute altered.,"

withSecond
public LocalDateTime withSecond(int second)
Returns a copy of this LocalDateTime with the second-of-minute altered.
 
 This instance is immutable and unaffected by this method call.

Parameters:
second - the second-of-minute to set in the result, from 0 to 59
Returns:
a LocalDateTime based on this date-time with the requested second, not null
Throws:
DateTimeException - if the second value is invalid


"
4,LocalDateTime,17,LocalDateTime withNano(int nanoOfSecond),True,Returns a copy of this LocalDateTime with the nano-of-second altered.,"

withNano
public LocalDateTime withNano(int nanoOfSecond)
Returns a copy of this LocalDateTime with the nano-of-second altered.
 
 This instance is immutable and unaffected by this method call.

Parameters:
nanoOfSecond - the nano-of-second to set in the result, from 0 to 999,999,999
Returns:
a LocalDateTime based on this date-time with the requested nanosecond, not null
Throws:
DateTimeException - if the nano value is invalid


"
4,LocalDateTime,18,LocalDateTime plusYears(long years),True,Returns a copy of this LocalDateTime with the specified number of years added.,"

plusYears
public LocalDateTime plusYears(long years)
Returns a copy of this LocalDateTime with the specified number of years added.
 
 This method adds the specified amount to the years field in three steps:
 
Add the input years to the year field
Check if the resulting date would be invalid
Adjust the day-of-month to the last valid day if necessary


 For example, 2008-02-29 (leap year) plus one year would result in the
 invalid date 2009-02-29 (standard year). Instead of returning an invalid
 result, the last valid day of the month, 2009-02-28, is selected instead.
 
 This instance is immutable and unaffected by this method call.

Parameters:
years - the years to add, may be negative
Returns:
a LocalDateTime based on this date-time with the years added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
4,LocalDateTime,19,LocalDateTime plusMonths(long months),True,Returns a copy of this LocalDateTime with the specified number of months added.,"

plusMonths
public LocalDateTime plusMonths(long months)
Returns a copy of this LocalDateTime with the specified number of months added.
 
 This method adds the specified amount to the months field in three steps:
 
Add the input months to the month-of-year field
Check if the resulting date would be invalid
Adjust the day-of-month to the last valid day if necessary


 For example, 2007-03-31 plus one month would result in the invalid date
 2007-04-31. Instead of returning an invalid result, the last valid day
 of the month, 2007-04-30, is selected instead.
 
 This instance is immutable and unaffected by this method call.

Parameters:
months - the months to add, may be negative
Returns:
a LocalDateTime based on this date-time with the months added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
4,LocalDateTime,20,LocalDateTime plusWeeks(long weeks),True,Returns a copy of this LocalDateTime with the specified number of weeks added.,"

plusWeeks
public LocalDateTime plusWeeks(long weeks)
Returns a copy of this LocalDateTime with the specified number of weeks added.
 
 This method adds the specified amount in weeks to the days field incrementing
 the month and year fields as necessary to ensure the result remains valid.
 The result is only invalid if the maximum/minimum year is exceeded.
 
 For example, 2008-12-31 plus one week would result in 2009-01-07.
 
 This instance is immutable and unaffected by this method call.

Parameters:
weeks - the weeks to add, may be negative
Returns:
a LocalDateTime based on this date-time with the weeks added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
4,LocalDateTime,21,LocalDateTime plusDays(long days),True,Returns a copy of this LocalDateTime with the specified number of days added.,"

plusDays
public LocalDateTime plusDays(long days)
Returns a copy of this LocalDateTime with the specified number of days added.
 
 This method adds the specified amount to the days field incrementing the
 month and year fields as necessary to ensure the result remains valid.
 The result is only invalid if the maximum/minimum year is exceeded.
 
 For example, 2008-12-31 plus one day would result in 2009-01-01.
 
 This instance is immutable and unaffected by this method call.

Parameters:
days - the days to add, may be negative
Returns:
a LocalDateTime based on this date-time with the days added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
4,LocalDateTime,22,LocalDateTime plusHours(long hours),True,Returns a copy of this LocalDateTime with the specified number of hours added.,"

plusHours
public LocalDateTime plusHours(long hours)
Returns a copy of this LocalDateTime with the specified number of hours added.
 
 This instance is immutable and unaffected by this method call.

Parameters:
hours - the hours to add, may be negative
Returns:
a LocalDateTime based on this date-time with the hours added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
4,LocalDateTime,23,LocalDateTime plusMinutes(long minutes),True,Returns a copy of this LocalDateTime with the specified number of minutes added.,"

plusMinutes
public LocalDateTime plusMinutes(long minutes)
Returns a copy of this LocalDateTime with the specified number of minutes added.
 
 This instance is immutable and unaffected by this method call.

Parameters:
minutes - the minutes to add, may be negative
Returns:
a LocalDateTime based on this date-time with the minutes added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
4,LocalDateTime,24,LocalDateTime plusSeconds(long seconds),True,Returns a copy of this LocalDateTime with the specified number of seconds added.,"

plusSeconds
public LocalDateTime plusSeconds(long seconds)
Returns a copy of this LocalDateTime with the specified number of seconds added.
 
 This instance is immutable and unaffected by this method call.

Parameters:
seconds - the seconds to add, may be negative
Returns:
a LocalDateTime based on this date-time with the seconds added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
4,LocalDateTime,25,LocalDateTime plusNanos(long nanos),True,Returns a copy of this LocalDateTime with the specified number of nanoseconds added.,"

plusNanos
public LocalDateTime plusNanos(long nanos)
Returns a copy of this LocalDateTime with the specified number of nanoseconds added.
 
 This instance is immutable and unaffected by this method call.

Parameters:
nanos - the nanos to add, may be negative
Returns:
a LocalDateTime based on this date-time with the nanoseconds added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
4,LocalDateTime,26,LocalDateTime minusYears(long years),True,Returns a copy of this LocalDateTime with the specified number of years subtracted.,"

minusYears
public LocalDateTime minusYears(long years)
Returns a copy of this LocalDateTime with the specified number of years subtracted.
 
 This method subtracts the specified amount from the years field in three steps:
 
Subtract the input years from the year field
Check if the resulting date would be invalid
Adjust the day-of-month to the last valid day if necessary


 For example, 2008-02-29 (leap year) minus one year would result in the
 invalid date 2009-02-29 (standard year). Instead of returning an invalid
 result, the last valid day of the month, 2009-02-28, is selected instead.
 
 This instance is immutable and unaffected by this method call.

Parameters:
years - the years to subtract, may be negative
Returns:
a LocalDateTime based on this date-time with the years subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
4,LocalDateTime,27,LocalDateTime minusMonths(long months),True,Returns a copy of this LocalDateTime with the specified number of months subtracted.,"

minusMonths
public LocalDateTime minusMonths(long months)
Returns a copy of this LocalDateTime with the specified number of months subtracted.
 
 This method subtracts the specified amount from the months field in three steps:
 
Subtract the input months from the month-of-year field
Check if the resulting date would be invalid
Adjust the day-of-month to the last valid day if necessary


 For example, 2007-03-31 minus one month would result in the invalid date
 2007-04-31. Instead of returning an invalid result, the last valid day
 of the month, 2007-04-30, is selected instead.
 
 This instance is immutable and unaffected by this method call.

Parameters:
months - the months to subtract, may be negative
Returns:
a LocalDateTime based on this date-time with the months subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
4,LocalDateTime,28,LocalDateTime minusWeeks(long weeks),True,Returns a copy of this LocalDateTime with the specified number of weeks subtracted.,"

minusWeeks
public LocalDateTime minusWeeks(long weeks)
Returns a copy of this LocalDateTime with the specified number of weeks subtracted.
 
 This method subtracts the specified amount in weeks from the days field decrementing
 the month and year fields as necessary to ensure the result remains valid.
 The result is only invalid if the maximum/minimum year is exceeded.
 
 For example, 2009-01-07 minus one week would result in 2008-12-31.
 
 This instance is immutable and unaffected by this method call.

Parameters:
weeks - the weeks to subtract, may be negative
Returns:
a LocalDateTime based on this date-time with the weeks subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
4,LocalDateTime,29,LocalDateTime minusDays(long days),True,Returns a copy of this LocalDateTime with the specified number of days subtracted.,"

minusDays
public LocalDateTime minusDays(long days)
Returns a copy of this LocalDateTime with the specified number of days subtracted.
 
 This method subtracts the specified amount from the days field decrementing the
 month and year fields as necessary to ensure the result remains valid.
 The result is only invalid if the maximum/minimum year is exceeded.
 
 For example, 2009-01-01 minus one day would result in 2008-12-31.
 
 This instance is immutable and unaffected by this method call.

Parameters:
days - the days to subtract, may be negative
Returns:
a LocalDateTime based on this date-time with the days subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
4,LocalDateTime,30,LocalDateTime minusHours(long hours),True,Returns a copy of this LocalDateTime with the specified number of hours subtracted.,"

minusHours
public LocalDateTime minusHours(long hours)
Returns a copy of this LocalDateTime with the specified number of hours subtracted.
 
 This instance is immutable and unaffected by this method call.

Parameters:
hours - the hours to subtract, may be negative
Returns:
a LocalDateTime based on this date-time with the hours subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
4,LocalDateTime,31,LocalDateTime minusMinutes(long minutes),True,Returns a copy of this LocalDateTime with the specified number of minutes subtracted.,"

minusMinutes
public LocalDateTime minusMinutes(long minutes)
Returns a copy of this LocalDateTime with the specified number of minutes subtracted.
 
 This instance is immutable and unaffected by this method call.

Parameters:
minutes - the minutes to subtract, may be negative
Returns:
a LocalDateTime based on this date-time with the minutes subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
4,LocalDateTime,32,LocalDateTime minusSeconds(long seconds),True,Returns a copy of this LocalDateTime with the specified number of seconds subtracted.,"

minusSeconds
public LocalDateTime minusSeconds(long seconds)
Returns a copy of this LocalDateTime with the specified number of seconds subtracted.
 
 This instance is immutable and unaffected by this method call.

Parameters:
seconds - the seconds to subtract, may be negative
Returns:
a LocalDateTime based on this date-time with the seconds subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
4,LocalDateTime,33,LocalDateTime minusNanos(long nanos),True,Returns a copy of this LocalDateTime with the specified number of nanoseconds subtracted.,"

minusNanos
public LocalDateTime minusNanos(long nanos)
Returns a copy of this LocalDateTime with the specified number of nanoseconds subtracted.
 
 This instance is immutable and unaffected by this method call.

Parameters:
nanos - the nanos to subtract, may be negative
Returns:
a LocalDateTime based on this date-time with the nanoseconds subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
4,LocalDateTime,34,"long until(Temporal endExclusive, TemporalUnit unit)",True,Calculates the amount of time until another date-time in terms of the specified unit.,"

until
public long until(Temporal endExclusive,
                  TemporalUnit unit)
Calculates the amount of time until another date-time in terms of the specified unit.
 
 This calculates the amount of time between two LocalDateTime
 objects in terms of a single TemporalUnit.
 The start and end points are this and the specified date-time.
 The result will be negative if the end is before the start.
 The Temporal passed to this method is converted to a
 LocalDateTime using from(TemporalAccessor).
 For example, the amount in days between two date-times can be calculated
 using startDateTime.until(endDateTime, DAYS).
 
 The calculation returns a whole number, representing the number of
 complete units between the two date-times.
 For example, the amount in months between 2012-06-15T00:00 and 2012-08-14T23:59
 will only be one month as it is one minute short of two months.
 
 There are two equivalent ways of using this method.
 The first is to invoke this method.
 The second is to use TemporalUnit.between(Temporal, Temporal):
 
   // these two lines are equivalent
   amount = start.until(end, MONTHS);
   amount = MONTHS.between(start, end);
 
 The choice should be made based on which makes the code more readable.
 
 The calculation is implemented in this method for ChronoUnit.
 The units NANOS, MICROS, MILLIS, SECONDS,
 MINUTES, HOURS and HALF_DAYS, DAYS,
 WEEKS, MONTHS, YEARS, DECADES,
 CENTURIES, MILLENNIA and ERAS are supported.
 Other ChronoUnit values will throw an exception.
 
 If the unit is not a ChronoUnit, then the result of this method
 is obtained by invoking TemporalUnit.between(Temporal, Temporal)
 passing this as the first argument and the converted input temporal
 as the second argument.
 
 This instance is immutable and unaffected by this method call.

Specified by:
until in interface Temporal
Parameters:
endExclusive - the end date, exclusive, which is converted to a LocalDateTime, not null
unit - the unit to measure the amount in, not null
Returns:
the amount of time between this date-time and the end date-time
Throws:
DateTimeException - if the amount cannot be calculated, or the end
  temporal cannot be converted to a LocalDateTime
UnsupportedTemporalTypeException - if the unit is not supported
ArithmeticException - if numeric overflow occurs


"
4,LocalDateTime,35,long toEpochSecond(ZoneOffset offset),False,,NULL
4,LocalDateTime,36,long toEpochSecond(ZoneId zone),False,,NULL
4,LocalDateTime,37,"long toEpochSecond(ZoneOffset offset, TemporalAdjuster adjuster)",False,,NULL
4,LocalDateTime,38,"long toEpochSecond(ZoneId zone, TemporalAdjuster adjuster)",False,,NULL
4,LocalDateTime,39,LocalDateTime with(TemporalAdjuster adjuster),True,Returns an adjusted copy of this date-time.,"

with
public LocalDateTime with(TemporalAdjuster adjuster)
Returns an adjusted copy of this date-time.
 
 This returns a LocalDateTime, based on this one, with the date-time adjusted.
 The adjustment takes place using the specified adjuster strategy object.
 Read the documentation of the adjuster to understand what adjustment will be made.
 
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 Key date-time classes also implement the TemporalAdjuster interface,
 such as Month and MonthDay.
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 For example this code returns a date on the last day of July:
 
  import static java.time.Month.*;
  import static java.time.temporal.TemporalAdjusters.*;

  result = localDateTime.with(JULY).with(lastDayOfMonth());
 

 The classes LocalDate and LocalTime implement TemporalAdjuster,
 thus this method can be used to change the date, time or offset:
 
  result = localDateTime.with(date);
  result = localDateTime.with(time);
 

 The result of this method is obtained by invoking the
 TemporalAdjuster.adjustInto(Temporal) method on the
 specified adjuster passing this as the argument.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface ChronoLocalDateTime<LocalDate>
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
a LocalDateTime based on this with the adjustment made, not null
Throws:
DateTimeException - if the adjustment cannot be made
ArithmeticException - if numeric overflow occurs


"
4,LocalDateTime,40,LocalDateTime with(TemporalAdjusters adjuster),False,,NULL
4,LocalDateTime,41,"LocalDateTime with(TemporalField field, long newValue)",True,Returns a copy of this date-time with the specified field set to a new value.,"

with
public LocalDateTime with(TemporalField field,
                          long newValue)
Returns a copy of this date-time with the specified field set to a new value.
 
 This returns a LocalDateTime, based on this one, with the value
 for the specified field changed.
 This can be used to change any supported field, such as the year, month or day-of-month.
 If it is not possible to set the value, because the field is not supported or for
 some other reason, an exception is thrown.
 
 In some cases, changing the specified field can cause the resulting date-time to become invalid,
 such as changing the month from 31st January to February would make the day-of-month invalid.
 In cases like this, the field is responsible for resolving the date. Typically it will choose
 the previous valid date, which would be the last valid day of February in this example.
 
 If the field is a ChronoField then the adjustment is implemented here.
 The supported fields will behave as per
 the matching method on LocalDate
 or LocalTime.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.adjustInto(Temporal, long)
 passing this as the argument. In this case, the field determines
 whether and how to adjust the instant.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface ChronoLocalDateTime<LocalDate>
Specified by:
with in interface Temporal
Parameters:
field - the field to set in the result, not null
newValue - the new value of the field in the result
Returns:
a LocalDateTime based on this with the specified field set, not null
Throws:
DateTimeException - if the field cannot be set
UnsupportedTemporalTypeException - if the field is not supported
ArithmeticException - if numeric overflow occurs


"
4,LocalDateTime,42,LocalDateTime with(TemporalAdjuster adjuster),True,Returns an adjusted copy of this date-time.,"

with
public LocalDateTime with(TemporalAdjuster adjuster)
Returns an adjusted copy of this date-time.
 
 This returns a LocalDateTime, based on this one, with the date-time adjusted.
 The adjustment takes place using the specified adjuster strategy object.
 Read the documentation of the adjuster to understand what adjustment will be made.
 
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 Key date-time classes also implement the TemporalAdjuster interface,
 such as Month and MonthDay.
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 For example this code returns a date on the last day of July:
 
  import static java.time.Month.*;
  import static java.time.temporal.TemporalAdjusters.*;

  result = localDateTime.with(JULY).with(lastDayOfMonth());
 

 The classes LocalDate and LocalTime implement TemporalAdjuster,
 thus this method can be used to change the date, time or offset:
 
  result = localDateTime.with(date);
  result = localDateTime.with(time);
 

 The result of this method is obtained by invoking the
 TemporalAdjuster.adjustInto(Temporal) method on the
 specified adjuster passing this as the argument.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface ChronoLocalDateTime<LocalDate>
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
a LocalDateTime based on this with the adjustment made, not null
Throws:
DateTimeException - if the adjustment cannot be made
ArithmeticException - if numeric overflow occurs


"
4,LocalDateTime,43,LocalDateTime with(TemporalAdjusters adjuster),False,,NULL
4,LocalDateTime,44,"LocalDateTime with(TemporalField field, long newValue)",True,Returns a copy of this date-time with the specified field set to a new value.,"

with
public LocalDateTime with(TemporalField field,
                          long newValue)
Returns a copy of this date-time with the specified field set to a new value.
 
 This returns a LocalDateTime, based on this one, with the value
 for the specified field changed.
 This can be used to change any supported field, such as the year, month or day-of-month.
 If it is not possible to set the value, because the field is not supported or for
 some other reason, an exception is thrown.
 
 In some cases, changing the specified field can cause the resulting date-time to become invalid,
 such as changing the month from 31st January to February would make the day-of-month invalid.
 In cases like this, the field is responsible for resolving the date. Typically it will choose
 the previous valid date, which would be the last valid day of February in this example.
 
 If the field is a ChronoField then the adjustment is implemented here.
 The supported fields will behave as per
 the matching method on LocalDate
 or LocalTime.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.adjustInto(Temporal, long)
 passing this as the argument. In this case, the field determines
 whether and how to adjust the instant.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface ChronoLocalDateTime<LocalDate>
Specified by:
with in interface Temporal
Parameters:
field - the field to set in the result, not null
newValue - the new value of the field in the result
Returns:
a LocalDateTime based on this with the specified field set, not null
Throws:
DateTimeException - if the field cannot be set
UnsupportedTemporalTypeException - if the field is not supported
ArithmeticException - if numeric overflow occurs


"
4,LocalDateTime,45,LocalDateTime with(TemporalAdjuster adjuster),True,Returns an adjusted copy of this date-time.,"

with
public LocalDateTime with(TemporalAdjuster adjuster)
Returns an adjusted copy of this date-time.
 
 This returns a LocalDateTime, based on this one, with the date-time adjusted.
 The adjustment takes place using the specified adjuster strategy object.
 Read the documentation of the adjuster to understand what adjustment will be made.
 
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 Key date-time classes also implement the TemporalAdjuster interface,
 such as Month and MonthDay.
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 For example this code returns a date on the last day of July:
 
  import static java.time.Month.*;
  import static java.time.temporal.TemporalAdjusters.*;

  result = localDateTime.with(JULY).with(lastDayOfMonth());
 

 The classes LocalDate and LocalTime implement TemporalAdjuster,
 thus this method can be used to change the date, time or offset:
 
  result = localDateTime.with(date);
  result = localDateTime.with(time);
 

 The result of this method is obtained by invoking the
 TemporalAdjuster.adjustInto(Temporal) method on the
 specified adjuster passing this as the argument.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface ChronoLocalDateTime<LocalDate>
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
a LocalDateTime based on this with the adjustment made, not null
Throws:
DateTimeException - if the adjustment cannot be made
ArithmeticException - if numeric overflow occurs


"
4,LocalDateTime,46,LocalDateTime with(TemporalAdjusters adjuster),False,,NULL
4,LocalDateTime,47,"LocalDateTime with(TemporalField field, long newValue)",True,Returns a copy of this date-time with the specified field set to a new value.,"

with
public LocalDateTime with(TemporalField field,
                          long newValue)
Returns a copy of this date-time with the specified field set to a new value.
 
 This returns a LocalDateTime, based on this one, with the value
 for the specified field changed.
 This can be used to change any supported field, such as the year, month or day-of-month.
 If it is not possible to set the value, because the field is not supported or for
 some other reason, an exception is thrown.
 
 In some cases, changing the specified field can cause the resulting date-time to become invalid,
 such as changing the month from 31st January to February would make the day-of-month invalid.
 In cases like this, the field is responsible for resolving the date. Typically it will choose
 the previous valid date, which would be the last valid day of February in this example.
 
 If the field is a ChronoField then the adjustment is implemented here.
 The supported fields will behave as per
 the matching method on LocalDate
 or LocalTime.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.adjustInto(Temporal, long)
 passing this as the argument. In this case, the field determines
 whether and how to adjust the instant.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface ChronoLocalDateTime<LocalDate>
Specified by:
with in interface Temporal
Parameters:
field - the field to set in the result, not null
newValue - the new value of the field in the result
Returns:
a LocalDateTime based on this with the specified field set, not null
Throws:
DateTimeException - if the field cannot be set
UnsupportedTemporalTypeException - if the field is not supported
ArithmeticException - if numeric overflow occurs


"
4,LocalDateTime,48,LocalDateTime with(TemporalAdjuster adjuster),True,Returns an adjusted copy of this date-time.,"

with
public LocalDateTime with(TemporalAdjuster adjuster)
Returns an adjusted copy of this date-time.
 
 This returns a LocalDateTime, based on this one, with the date-time adjusted.
 The adjustment takes place using the specified adjuster strategy object.
 Read the documentation of the adjuster to understand what adjustment will be made.
 
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 Key date-time classes also implement the TemporalAdjuster interface,
 such as Month and MonthDay.
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 For example this code returns a date on the last day of July:
 
  import static java.time.Month.*;
  import static java.time.temporal.TemporalAdjusters.*;

  result = localDateTime.with(JULY).with(lastDayOfMonth());
 

 The classes LocalDate and LocalTime implement TemporalAdjuster,
 thus this method can be used to change the date, time or offset:
 
  result = localDateTime.with(date);
  result = localDateTime.with(time);
 

 The result of this method is obtained by invoking the
 TemporalAdjuster.adjustInto(Temporal) method on the
 specified adjuster passing this as the argument.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface ChronoLocalDateTime<LocalDate>
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
a LocalDateTime based on this with the adjustment made, not null
Throws:
DateTimeException - if the adjustment cannot be made
ArithmeticException - if numeric overflow occurs


"
4,LocalDateTime,49,LocalDateTime with(TemporalAdjusters adjuster),False,,NULL
4,LocalDateTime,50,"LocalDateTime with(TemporalField field, long newValue)",True,Returns a copy of this date-time with the specified field set to a new value.,"

with
public LocalDateTime with(TemporalField field,
                          long newValue)
Returns a copy of this date-time with the specified field set to a new value.
 
 This returns a LocalDateTime, based on this one, with the value
 for the specified field changed.
 This can be used to change any supported field, such as the year, month or day-of-month.
 If it is not possible to set the value, because the field is not supported or for
 some other reason, an exception is thrown.
 
 In some cases, changing the specified field can cause the resulting date-time to become invalid,
 such as changing the month from 31st January to February would make the day-of-month invalid.
 In cases like this, the field is responsible for resolving the date. Typically it will choose
 the previous valid date, which would be the last valid day of February in this example.
 
 If the field is a ChronoField then the adjustment is implemented here.
 The supported fields will behave as per
 the matching method on LocalDate
 or LocalTime.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.adjustInto(Temporal, long)
 passing this as the argument. In this case, the field determines
 whether and how to adjust the instant.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface ChronoLocalDateTime<LocalDate>
Specified by:
with in interface Temporal
Parameters:
field - the field to set in the result, not null
newValue - the new value of the field in the result
Returns:
a LocalDateTime based on this with the specified field set, not null
Throws:
DateTimeException - if the field cannot be set
UnsupportedTemporalTypeException - if the field is not supported
ArithmeticException - if numeric overflow occurs


"
5,LocalTime,1,LocalTime now(),True,Obtains the current time from the system clock in the default time-zone.,"

now
public static LocalTime now()
Obtains the current time from the system clock in the default time-zone.
 
 This will query the system clock in the default
 time-zone to obtain the current time.
 
 Using this method will prevent the ability to use an alternate clock for testing
 because the clock is hard-coded.

Returns:
the current time using the system clock and default time-zone, not null


"
5,LocalTime,2,"LocalTime of(int hour, int minute)",True,Obtains an instance of LocalTime from an hour and minute.,"

of
public static LocalTime of(int hour,
                           int minute)
Obtains an instance of LocalTime from an hour and minute.
 
 This returns a LocalTime with the specified hour and minute.
 The second and nanosecond fields will be set to zero.

Parameters:
hour - the hour-of-day to represent, from 0 to 23
minute - the minute-of-hour to represent, from 0 to 59
Returns:
the local time, not null
Throws:
DateTimeException - if the value of any field is out of range


"
5,LocalTime,3,"LocalTime of(int hour, int minute, int second)",True,"Obtains an instance of LocalTime from an hour, minute and second.","

of
public static LocalTime of(int hour,
                           int minute,
                           int second)
Obtains an instance of LocalTime from an hour, minute and second.
 
 This returns a LocalTime with the specified hour, minute and second.
 The nanosecond field will be set to zero.

Parameters:
hour - the hour-of-day to represent, from 0 to 23
minute - the minute-of-hour to represent, from 0 to 59
second - the second-of-minute to represent, from 0 to 59
Returns:
the local time, not null
Throws:
DateTimeException - if the value of any field is out of range


"
5,LocalTime,4,"LocalTime of(int hour, int minute, int second, int nanoOfSecond)",True,"Obtains an instance of LocalTime from an hour, minute, second and nanosecond.","

of
public static LocalTime of(int hour,
                           int minute,
                           int second,
                           int nanoOfSecond)
Obtains an instance of LocalTime from an hour, minute, second and nanosecond.
 
 This returns a LocalTime with the specified hour, minute, second and nanosecond.

Parameters:
hour - the hour-of-day to represent, from 0 to 23
minute - the minute-of-hour to represent, from 0 to 59
second - the second-of-minute to represent, from 0 to 59
nanoOfSecond - the nano-of-second to represent, from 0 to 999,999,999
Returns:
the local time, not null
Throws:
DateTimeException - if the value of any field is out of range


"
5,LocalTime,5,LocalTime parse(CharSequence text),True,Obtains an instance of LocalTime from a text string such as 10:15.,"

parse
public static LocalTime parse(CharSequence text)
Obtains an instance of LocalTime from a text string such as 10:15.
 
 The string must represent a valid time and is parsed using
 DateTimeFormatter.ISO_LOCAL_TIME.

Parameters:
text - the text to parse such as ""10:15:30"", not null
Returns:
the parsed local time, not null
Throws:
DateTimeParseException - if the text cannot be parsed


"
6,MonthDay,1,"MonthDay of(int month, int dayOfMonth)",True,Obtains an instance of MonthDay.,"

of
public static MonthDay of(int month,
                          int dayOfMonth)
Obtains an instance of MonthDay.
 
 The day-of-month must be valid for the month within a leap year.
 Hence, for month 2 (February), day 29 is valid.
 
 For example, passing in month 4 (April) and day 31 will throw an exception, as
 there can never be April 31st in any year. By contrast, passing in
 February 29th is permitted, as that month-day can sometimes be valid.

Parameters:
month - the month-of-year to represent, from 1 (January) to 12 (December)
dayOfMonth - the day-of-month to represent, from 1 to 31
Returns:
the month-day, not null
Throws:
DateTimeException - if the value of any field is out of range,
  or if the day-of-month is invalid for the month


"
6,MonthDay,2,MonthDay now(),True,Obtains the current month-day from the system clock in the default time-zone.,"

now
public static MonthDay now()
Obtains the current month-day from the system clock in the default time-zone.
 
 This will query the system clock in the default
 time-zone to obtain the current month-day.
 
 Using this method will prevent the ability to use an alternate clock for testing
 because the clock is hard-coded.

Returns:
the current month-day using the system clock and default time-zone, not null


"
6,MonthDay,3,MonthDay plusDays(long daysToAdd),False,,NULL
6,MonthDay,4,MonthDay minusDays(long daysToSubtract),False,,NULL
6,MonthDay,5,MonthDay with(TemporalAdjuster adjuster),False,,NULL
6,MonthDay,6,MonthDay with(TemporalAdjusters adjuster),False,,NULL
6,MonthDay,7,"MonthDay with(TemporalField field, long newValue)",False,,NULL
6,MonthDay,8,MonthDay with(TemporalAccessor temporal),False,,NULL
6,MonthDay,9,"MonthDay with(Month month, int dayOfMonth)",False,,NULL
6,MonthDay,10,MonthDay with(MonthDay monthDay),False,,NULL
6,MonthDay,11,"MonthDay with(Year year, int dayOfYear)",False,,NULL
6,MonthDay,12,MonthDay with(YearMonth yearMonth),False,,NULL
6,MonthDay,13,MonthDay with(ChronoLocalDate localDate),False,,NULL
6,MonthDay,14,MonthDay with(ChronoLocalDateTime localDateTime),False,,NULL
6,MonthDay,15,MonthDay with(ChronoZonedDateTime zonedDateTime),False,,NULL
6,MonthDay,16,MonthDay with(ChronoPeriod period),False,,NULL
6,MonthDay,17,"MonthDay with(ChronoUnit field, long newValue)",False,,NULL
6,MonthDay,18,MonthDay with(TemporalAmount amountToAdd),False,,NULL
6,MonthDay,19,MonthDay with(TemporalAmount amountToSubtract),False,,NULL
6,MonthDay,20,MonthDay with(TemporalQuery query),False,,NULL
6,MonthDay,21,MonthDay with(TemporalQueries query),False,,NULL
6,MonthDay,22,MonthDay with(TemporalAdjusters adjusters),False,,NULL
6,MonthDay,23,MonthDay with(TemporalAdjuster adjuster),False,,NULL
6,MonthDay,24,"MonthDay with(TemporalField field, TemporalAmount amountToAdd)",False,,NULL
6,MonthDay,25,"MonthDay with(TemporalField field, TemporalAmount amountToSubtract)",False,,NULL
6,MonthDay,26,"MonthDay with(TemporalField field, TemporalQuery query)",False,,NULL
6,MonthDay,27,"MonthDay with(TemporalField field, TemporalQueries queries)",False,,NULL
6,MonthDay,28,"MonthDay with(TemporalAdjuster adjuster, TemporalAdjusters adjusters)",False,,NULL
6,MonthDay,29,"MonthDay with(TemporalAdjuster adjuster, TemporalAdjuster adjuster2)",False,,NULL
6,MonthDay,30,"MonthDay with(TemporalAdjuster adjuster, TemporalAdjusters adjusters, TemporalAdjuster adjuster2)",False,,NULL
6,MonthDay,31,"MonthDay with(TemporalAdjuster adjuster, TemporalAdjusters adjusters, TemporalAdjuster adjuster2, TemporalAdjusters adjusters2)",False,,NULL
6,MonthDay,32,"MonthDay with(TemporalAdjuster adjuster, TemporalAdjusters adjusters, TemporalAdjuster adjuster2, TemporalAdjusters adjusters2, TemporalAdjuster adjuster3)",False,,NULL
6,MonthDay,33,"MonthDay with(TemporalAdjuster adjuster, TemporalAdjusters adjusters, TemporalAdjuster adjuster2, TemporalAdjusters adjusters2, TemporalAdjuster adjuster3, TemporalAdjusters adjusters3)",False,,NULL
6,MonthDay,34,"MonthDay with(TemporalAdjuster adjuster, TemporalAdjusters adjusters, TemporalAdjuster adjuster2, TemporalAdjusters adjusters2, TemporalAdjuster adjuster3, TemporalAdjusters adjusters3, TemporalAdjuster adjuster4)",False,,NULL
6,MonthDay,35,"MonthDay with(TemporalAdjuster adjuster, TemporalAdjusters adjusters, TemporalAdjuster adjuster2, TemporalAdjusters adjusters2, TemporalAdjuster adjuster3, TemporalAdjusters adjusters3, TemporalAdjuster adjuster4, TemporalAdjusters adjusters4)",False,,NULL
7,OffsetDateTime,1,OffsetDateTime.now(),False,,NULL
7,OffsetDateTime,2,"OffsetDateTime.of(int year, int month, int dayOfMonth, int hour, int minute, int second, int nanoOfSecond, ZoneOffset offset)",False,,NULL
7,OffsetDateTime,3,OffsetDateTime.parse(CharSequence text),False,,NULL
7,OffsetDateTime,4,OffsetDateTime.from(TemporalAccessor temporal),False,,NULL
7,OffsetDateTime,5,OffsetDateTime.withOffsetSameInstant(ZoneOffset newOffset),False,,NULL
8,OffsetTime,1,"OffsetTime.of(int hour, int minute, int second, int nanoOfSecond, ZoneOffset offset)",False,,NULL
8,OffsetTime,2,"OffsetTime.of(LocalTime time, ZoneOffset offset)",False,,NULL
8,OffsetTime,3,"OffsetTime.ofInstant(Instant instant, ZoneId zone)",False,,NULL
8,OffsetTime,4,OffsetTime.now(),False,,NULL
8,OffsetTime,5,OffsetTime.now(ZoneId zone),False,,NULL
9,Period,1,"Period.between(LocalDate startDate, LocalDate endDate)",False,,NULL
9,Period,2,Period plus(Period other),False,,NULL
9,Period,3,Period minus(Period other),False,,NULL
9,Period,4,Period multipliedBy(int scalar),True,Returns a new instance with each element in this period multiplied by the specified scalar.,"

multipliedBy
public Period multipliedBy(int scalar)
Returns a new instance with each element in this period multiplied
 by the specified scalar.
 
 This returns a period with each of the years, months and days units
 individually multiplied.
 For example, a period of ""2 years, -3 months and 4 days"" multiplied by
 3 will return ""6 years, -9 months and 12 days"".
 No normalization is performed.

Specified by:
multipliedBy in interface ChronoPeriod
Parameters:
scalar - the scalar to multiply by, not null
Returns:
a Period based on this period with the amounts multiplied by the scalar, not null
Throws:
ArithmeticException - if numeric overflow occurs


"
9,Period,5,Period dividedBy(int divisor),False,,NULL
10,Year,1,Year.now(),False,,NULL
10,Year,2,Year.of(int year),False,,NULL
10,Year,3,Year.parse(CharSequence text),False,,NULL
10,Year,4,Year.from(TemporalAccessor temporal),False,,NULL
10,Year,5,Year.isLeap(),False,,NULL
11,YearMonth,1,"YearMonth.of(int year, int month)",False,,NULL
11,YearMonth,2,YearMonth.from(TemporalAccessor temporal),False,,NULL
11,YearMonth,3,YearMonth.now(),False,,NULL
11,YearMonth,4,YearMonth.parse(CharSequence text),False,,NULL
11,YearMonth,5,YearMonth.adjustInto(TemporalAdjuster adjuster),False,,NULL
12,ZonedDateTime,1,ZonedDateTime now(),True,Obtains the current date-time from the system clock in the default time-zone.,"

now
public static ZonedDateTime now()
Obtains the current date-time from the system clock in the default time-zone.
 
 This will query the system clock in the default
 time-zone to obtain the current date-time.
 The zone and offset will be set based on the time-zone in the clock.
 
 Using this method will prevent the ability to use an alternate clock for testing
 because the clock is hard-coded.

Returns:
the current date-time using the system clock, not null


"
12,ZonedDateTime,2,"ZonedDateTime of(int year, int month, int dayOfMonth, int hour, int minute, int second, int nanoOfSecond, ZoneId zone)",True,"Obtains an instance of ZonedDateTime from a year, month, day, hour, minute, second, nanosecond and time-zone.","

of
public static ZonedDateTime of(int year,
                               int month,
                               int dayOfMonth,
                               int hour,
                               int minute,
                               int second,
                               int nanoOfSecond,
                               ZoneId zone)
Obtains an instance of ZonedDateTime from a year, month, day,
 hour, minute, second, nanosecond and time-zone.
 
 This creates a zoned date-time matching the local date-time of the seven
 specified fields as closely as possible.
 Time-zone rules, such as daylight savings, mean that not every local date-time
 is valid for the specified zone, thus the local date-time may be adjusted.
 
 The local date-time is resolved to a single instant on the time-line.
 This is achieved by finding a valid offset from UTC/Greenwich for the local
 date-time as defined by the rules of the zone ID.

 In most cases, there is only one valid offset for a local date-time.
 In the case of an overlap, when clocks are set back, there are two valid offsets.
 This method uses the earlier offset typically corresponding to ""summer"".
 
 In the case of a gap, when clocks jump forward, there is no valid offset.
 Instead, the local date-time is adjusted to be later by the length of the gap.
 For a typical one hour daylight savings change, the local date-time will be
 moved one hour later into the offset typically corresponding to ""summer"".
 
 This method exists primarily for writing test cases.
 Non test-code will typically use other methods to create an offset time.
 LocalDateTime has five additional convenience variants of the
 equivalent factory method taking fewer arguments.
 They are not provided here to reduce the footprint of the API.

Parameters:
year - the year to represent, from MIN_YEAR to MAX_YEAR
month - the month-of-year to represent, from 1 (January) to 12 (December)
dayOfMonth - the day-of-month to represent, from 1 to 31
hour - the hour-of-day to represent, from 0 to 23
minute - the minute-of-hour to represent, from 0 to 59
second - the second-of-minute to represent, from 0 to 59
nanoOfSecond - the nano-of-second to represent, from 0 to 999,999,999
zone - the time-zone, not null
Returns:
the offset date-time, not null
Throws:
DateTimeException - if the value of any field is out of range, or
  if the day-of-month is invalid for the month-year


"
12,ZonedDateTime,3,ZonedDateTime withYear(int year),True,Returns a copy of this ZonedDateTime with the year altered.,"

withYear
public ZonedDateTime withYear(int year)
Returns a copy of this ZonedDateTime with the year altered.
 
 This operates on the local time-line,
 changing the year of the local date-time.
 This is then converted back to a ZonedDateTime, using the zone ID
 to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
year - the year to set in the result, from MIN_YEAR to MAX_YEAR
Returns:
a ZonedDateTime based on this date-time with the requested year, not null
Throws:
DateTimeException - if the year value is invalid


"
12,ZonedDateTime,4,ZonedDateTime withMonth(int month),True,Returns a copy of this ZonedDateTime with the month-of-year altered.,"

withMonth
public ZonedDateTime withMonth(int month)
Returns a copy of this ZonedDateTime with the month-of-year altered.
 
 This operates on the local time-line,
 changing the month of the local date-time.
 This is then converted back to a ZonedDateTime, using the zone ID
 to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
month - the month-of-year to set in the result, from 1 (January) to 12 (December)
Returns:
a ZonedDateTime based on this date-time with the requested month, not null
Throws:
DateTimeException - if the month-of-year value is invalid


"
12,ZonedDateTime,5,ZonedDateTime withDayOfMonth(int dayOfMonth),True,Returns a copy of this ZonedDateTime with the day-of-month altered.,"

withDayOfMonth
public ZonedDateTime withDayOfMonth(int dayOfMonth)
Returns a copy of this ZonedDateTime with the day-of-month altered.
 
 This operates on the local time-line,
 changing the day-of-month of the local date-time.
 This is then converted back to a ZonedDateTime, using the zone ID
 to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
dayOfMonth - the day-of-month to set in the result, from 1 to 28-31
Returns:
a ZonedDateTime based on this date-time with the requested day, not null
Throws:
DateTimeException - if the day-of-month value is invalid,
  or if the day-of-month is invalid for the month-year


"
12,ZonedDateTime,6,ZonedDateTime withHour(int hour),True,Returns a copy of this ZonedDateTime with the hour-of-day altered.,"

withHour
public ZonedDateTime withHour(int hour)
Returns a copy of this ZonedDateTime with the hour-of-day altered.
 
 This operates on the local time-line,
 changing the time of the local date-time.
 This is then converted back to a ZonedDateTime, using the zone ID
 to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
hour - the hour-of-day to set in the result, from 0 to 23
Returns:
a ZonedDateTime based on this date-time with the requested hour, not null
Throws:
DateTimeException - if the hour value is invalid


"
12,ZonedDateTime,7,ZonedDateTime withMinute(int minute),True,Returns a copy of this ZonedDateTime with the minute-of-hour altered.,"

withMinute
public ZonedDateTime withMinute(int minute)
Returns a copy of this ZonedDateTime with the minute-of-hour altered.
 
 This operates on the local time-line,
 changing the time of the local date-time.
 This is then converted back to a ZonedDateTime, using the zone ID
 to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
minute - the minute-of-hour to set in the result, from 0 to 59
Returns:
a ZonedDateTime based on this date-time with the requested minute, not null
Throws:
DateTimeException - if the minute value is invalid


"
12,ZonedDateTime,8,ZonedDateTime withSecond(int second),True,Returns a copy of this ZonedDateTime with the second-of-minute altered.,"

withSecond
public ZonedDateTime withSecond(int second)
Returns a copy of this ZonedDateTime with the second-of-minute altered.
 
 This operates on the local time-line,
 changing the time of the local date-time.
 This is then converted back to a ZonedDateTime, using the zone ID
 to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
second - the second-of-minute to set in the result, from 0 to 59
Returns:
a ZonedDateTime based on this date-time with the requested second, not null
Throws:
DateTimeException - if the second value is invalid


"
12,ZonedDateTime,9,ZonedDateTime withNano(int nanoOfSecond),True,Returns a copy of this ZonedDateTime with the nano-of-second altered.,"

withNano
public ZonedDateTime withNano(int nanoOfSecond)
Returns a copy of this ZonedDateTime with the nano-of-second altered.
 
 This operates on the local time-line,
 changing the time of the local date-time.
 This is then converted back to a ZonedDateTime, using the zone ID
 to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
nanoOfSecond - the nano-of-second to set in the result, from 0 to 999,999,999
Returns:
a ZonedDateTime based on this date-time with the requested nanosecond, not null
Throws:
DateTimeException - if the nano value is invalid


"
12,ZonedDateTime,10,ZonedDateTime withZoneSameInstant(ZoneId zone),True,"Returns a copy of this date-time with a different time-zone, retaining the instant.","

withZoneSameInstant
public ZonedDateTime withZoneSameInstant(ZoneId zone)
Returns a copy of this date-time with a different time-zone,
 retaining the instant.
 
 This method changes the time-zone and retains the instant.
 This normally results in a change to the local date-time.
 
 This method is based on retaining the same instant, thus gaps and overlaps
 in the local time-line have no effect on the result.
 
 To change the offset while keeping the local time,
 use withZoneSameLocal(ZoneId).

Specified by:
withZoneSameInstant in interface ChronoZonedDateTime<LocalDate>
Parameters:
zone - the time-zone to change to, not null
Returns:
a ZonedDateTime based on this date-time with the requested zone, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
12,ZonedDateTime,11,ZonedDateTime plusYears(long years),True,Returns a copy of this ZonedDateTime with the specified number of years added.,"

plusYears
public ZonedDateTime plusYears(long years)
Returns a copy of this ZonedDateTime with the specified number of years added.
 
 This operates on the local time-line,
 adding years to the local date-time.
 This is then converted back to a ZonedDateTime, using the zone ID
 to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
years - the years to add, may be negative
Returns:
a ZonedDateTime based on this date-time with the years added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
12,ZonedDateTime,12,ZonedDateTime plusMonths(long months),True,Returns a copy of this ZonedDateTime with the specified number of months added.,"

plusMonths
public ZonedDateTime plusMonths(long months)
Returns a copy of this ZonedDateTime with the specified number of months added.
 
 This operates on the local time-line,
 adding months to the local date-time.
 This is then converted back to a ZonedDateTime, using the zone ID
 to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
months - the months to add, may be negative
Returns:
a ZonedDateTime based on this date-time with the months added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
12,ZonedDateTime,13,ZonedDateTime plusWeeks(long weeks),True,Returns a copy of this ZonedDateTime with the specified number of weeks added.,"

plusWeeks
public ZonedDateTime plusWeeks(long weeks)
Returns a copy of this ZonedDateTime with the specified number of weeks added.
 
 This operates on the local time-line,
 adding weeks to the local date-time.
 This is then converted back to a ZonedDateTime, using the zone ID
 to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
weeks - the weeks to add, may be negative
Returns:
a ZonedDateTime based on this date-time with the weeks added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
12,ZonedDateTime,14,ZonedDateTime plusDays(long days),True,Returns a copy of this ZonedDateTime with the specified number of days added.,"

plusDays
public ZonedDateTime plusDays(long days)
Returns a copy of this ZonedDateTime with the specified number of days added.
 
 This operates on the local time-line,
 adding days to the local date-time.
 This is then converted back to a ZonedDateTime, using the zone ID
 to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
days - the days to add, may be negative
Returns:
a ZonedDateTime based on this date-time with the days added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
12,ZonedDateTime,15,ZonedDateTime plusHours(long hours),True,Returns a copy of this ZonedDateTime with the specified number of hours added.,"

plusHours
public ZonedDateTime plusHours(long hours)
Returns a copy of this ZonedDateTime with the specified number of hours added.
 
 This operates on the instant time-line, such that adding one hour will
 always be a duration of one hour later.
 This may cause the local date-time to change by an amount other than one hour.
 Note that this is a different approach to that used by days, months and years,
 thus adding one day is not the same as adding 24 hours.
 
 For example, consider a time-zone where the spring DST cutover means that the
 local times 01:00 to 01:59 occur twice changing from offset +02:00 to +01:00.
 
Adding one hour to 00:30+02:00 will result in 01:30+02:00
 Adding one hour to 01:30+02:00 will result in 01:30+01:00
 Adding one hour to 01:30+01:00 will result in 02:30+01:00
 Adding three hours to 00:30+02:00 will result in 02:30+01:00
 

 This instance is immutable and unaffected by this method call.

Parameters:
hours - the hours to add, may be negative
Returns:
a ZonedDateTime based on this date-time with the hours added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
12,ZonedDateTime,16,ZonedDateTime plusMinutes(long minutes),True,Returns a copy of this ZonedDateTime with the specified number of minutes added.,"

plusMinutes
public ZonedDateTime plusMinutes(long minutes)
Returns a copy of this ZonedDateTime with the specified number of minutes added.
 
 This operates on the instant time-line, such that adding one minute will
 always be a duration of one minute later.
 This may cause the local date-time to change by an amount other than one minute.
 Note that this is a different approach to that used by days, months and years.
 
 This instance is immutable and unaffected by this method call.

Parameters:
minutes - the minutes to add, may be negative
Returns:
a ZonedDateTime based on this date-time with the minutes added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
12,ZonedDateTime,17,ZonedDateTime plusSeconds(long seconds),True,Returns a copy of this ZonedDateTime with the specified number of seconds added.,"

plusSeconds
public ZonedDateTime plusSeconds(long seconds)
Returns a copy of this ZonedDateTime with the specified number of seconds added.
 
 This operates on the instant time-line, such that adding one second will
 always be a duration of one second later.
 This may cause the local date-time to change by an amount other than one second.
 Note that this is a different approach to that used by days, months and years.
 
 This instance is immutable and unaffected by this method call.

Parameters:
seconds - the seconds to add, may be negative
Returns:
a ZonedDateTime based on this date-time with the seconds added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
12,ZonedDateTime,18,ZonedDateTime plusNanos(long nanos),True,Returns a copy of this ZonedDateTime with the specified number of nanoseconds added.,"

plusNanos
public ZonedDateTime plusNanos(long nanos)
Returns a copy of this ZonedDateTime with the specified number of nanoseconds added.
 
 This operates on the instant time-line, such that adding one nano will
 always be a duration of one nano later.
 This may cause the local date-time to change by an amount other than one nano.
 Note that this is a different approach to that used by days, months and years.
 
 This instance is immutable and unaffected by this method call.

Parameters:
nanos - the nanos to add, may be negative
Returns:
a ZonedDateTime based on this date-time with the nanoseconds added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
12,ZonedDateTime,19,ZonedDateTime minusYears(long years),True,Returns a copy of this ZonedDateTime with the specified number of years subtracted.,"

minusYears
public ZonedDateTime minusYears(long years)
Returns a copy of this ZonedDateTime with the specified number of years subtracted.
 
 This operates on the local time-line,
 subtracting years to the local date-time.
 This is then converted back to a ZonedDateTime, using the zone ID
 to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
years - the years to subtract, may be negative
Returns:
a ZonedDateTime based on this date-time with the years subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
12,ZonedDateTime,20,ZonedDateTime minusMonths(long months),True,Returns a copy of this ZonedDateTime with the specified number of months subtracted.,"

minusMonths
public ZonedDateTime minusMonths(long months)
Returns a copy of this ZonedDateTime with the specified number of months subtracted.
 
 This operates on the local time-line,
 subtracting months to the local date-time.
 This is then converted back to a ZonedDateTime, using the zone ID
 to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
months - the months to subtract, may be negative
Returns:
a ZonedDateTime based on this date-time with the months subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
12,ZonedDateTime,21,ZonedDateTime minusWeeks(long weeks),True,Returns a copy of this ZonedDateTime with the specified number of weeks subtracted.,"

minusWeeks
public ZonedDateTime minusWeeks(long weeks)
Returns a copy of this ZonedDateTime with the specified number of weeks subtracted.
 
 This operates on the local time-line,
 subtracting weeks to the local date-time.
 This is then converted back to a ZonedDateTime, using the zone ID
 to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
weeks - the weeks to subtract, may be negative
Returns:
a ZonedDateTime based on this date-time with the weeks subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
12,ZonedDateTime,22,ZonedDateTime minusDays(long days),True,Returns a copy of this ZonedDateTime with the specified number of days subtracted.,"

minusDays
public ZonedDateTime minusDays(long days)
Returns a copy of this ZonedDateTime with the specified number of days subtracted.
 
 This operates on the local time-line,
 subtracting days to the local date-time.
 This is then converted back to a ZonedDateTime, using the zone ID
 to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
days - the days to subtract, may be negative
Returns:
a ZonedDateTime based on this date-time with the days subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
12,ZonedDateTime,23,ZonedDateTime minusHours(long hours),True,Returns a copy of this ZonedDateTime with the specified number of hours subtracted.,"

minusHours
public ZonedDateTime minusHours(long hours)
Returns a copy of this ZonedDateTime with the specified number of hours subtracted.
 
 This operates on the instant time-line, such that subtracting one hour will
 always be a duration of one hour earlier.
 This may cause the local date-time to change by an amount other than one hour.
 Note that this is a different approach to that used by days, months and years,
 thus subtracting one day is not the same as adding 24 hours.
 
 For example, consider a time-zone where the spring DST cutover means that the
 local times 01:00 to 01:59 occur twice changing from offset +02:00 to +01:00.
 
Subtracting one hour from 02:30+01:00 will result in 01:30+02:00
 Subtracting one hour from 01:30+01:00 will result in 01:30+02:00
 Subtracting one hour from 01:30+02:00 will result in 00:30+01:00
 Subtracting three hours from 02:30+01:00 will result in 00:30+02:00
 

 This instance is immutable and unaffected by this method call.

Parameters:
hours - the hours to subtract, may be negative
Returns:
a ZonedDateTime based on this date-time with the hours subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
12,ZonedDateTime,24,ZonedDateTime minusMinutes(long minutes),True,Returns a copy of this ZonedDateTime with the specified number of minutes subtracted.,"

minusMinutes
public ZonedDateTime minusMinutes(long minutes)
Returns a copy of this ZonedDateTime with the specified number of minutes subtracted.
 
 This operates on the instant time-line, such that subtracting one minute will
 always be a duration of one minute earlier.
 This may cause the local date-time to change by an amount other than one minute.
 Note that this is a different approach to that used by days, months and years.
 
 This instance is immutable and unaffected by this method call.

Parameters:
minutes - the minutes to subtract, may be negative
Returns:
a ZonedDateTime based on this date-time with the minutes subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
12,ZonedDateTime,25,ZonedDateTime minusSeconds(long seconds),True,Returns a copy of this ZonedDateTime with the specified number of seconds subtracted.,"

minusSeconds
public ZonedDateTime minusSeconds(long seconds)
Returns a copy of this ZonedDateTime with the specified number of seconds subtracted.
 
 This operates on the instant time-line, such that subtracting one second will
 always be a duration of one second earlier.
 This may cause the local date-time to change by an amount other than one second.
 Note that this is a different approach to that used by days, months and years.
 
 This instance is immutable and unaffected by this method call.

Parameters:
seconds - the seconds to subtract, may be negative
Returns:
a ZonedDateTime based on this date-time with the seconds subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
12,ZonedDateTime,26,ZonedDateTime minusNanos(long nanos),True,Returns a copy of this ZonedDateTime with the specified number of nanoseconds subtracted.,"

minusNanos
public ZonedDateTime minusNanos(long nanos)
Returns a copy of this ZonedDateTime with the specified number of nanoseconds subtracted.
 
 This operates on the instant time-line, such that subtracting one nano will
 always be a duration of one nano earlier.
 This may cause the local date-time to change by an amount other than one nano.
 Note that this is a different approach to that used by days, months and years.
 
 This instance is immutable and unaffected by this method call.

Parameters:
nanos - the nanos to subtract, may be negative
Returns:
a ZonedDateTime based on this date-time with the nanoseconds subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
12,ZonedDateTime,27,ZonedDateTime with(TemporalAdjuster adjuster),True,Returns an adjusted copy of this date-time.,"

with
public ZonedDateTime with(TemporalAdjuster adjuster)
Returns an adjusted copy of this date-time.
 
 This returns a ZonedDateTime, based on this one, with the date-time adjusted.
 The adjustment takes place using the specified adjuster strategy object.
 Read the documentation of the adjuster to understand what adjustment will be made.
 
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 Key date-time classes also implement the TemporalAdjuster interface,
 such as Month and MonthDay.
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 For example this code returns a date on the last day of July:
 
  import static java.time.Month.*;
  import static java.time.temporal.TemporalAdjusters.*;

  result = zonedDateTime.with(JULY).with(lastDayOfMonth());
 

 The classes LocalDate and LocalTime implement TemporalAdjuster,
 thus this method can be used to change the date, time or offset:
 
  result = zonedDateTime.with(date);
  result = zonedDateTime.with(time);
 

ZoneOffset also implements TemporalAdjuster however using it
 as an argument typically has no effect. The offset of a ZonedDateTime is
 controlled primarily by the time-zone. As such, changing the offset does not generally
 make sense, because there is only one valid offset for the local date-time and zone.
 If the zoned date-time is in a daylight savings overlap, then the offset is used
 to switch between the two valid offsets. In all other cases, the offset is ignored.
 
 The result of this method is obtained by invoking the
 TemporalAdjuster.adjustInto(Temporal) method on the
 specified adjuster passing this as the argument.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface ChronoZonedDateTime<LocalDate>
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
a ZonedDateTime based on this with the adjustment made, not null
Throws:
DateTimeException - if the adjustment cannot be made
ArithmeticException - if numeric overflow occurs


"
12,ZonedDateTime,28,ZonedDateTime with(TemporalAdjusters adjuster),False,,NULL
12,ZonedDateTime,29,"ZonedDateTime with(TemporalField field, long newValue)",True,Returns a copy of this date-time with the specified field set to a new value.,"

with
public ZonedDateTime with(TemporalField field,
                          long newValue)
Returns a copy of this date-time with the specified field set to a new value.
 
 This returns a ZonedDateTime, based on this one, with the value
 for the specified field changed.
 This can be used to change any supported field, such as the year, month or day-of-month.
 If it is not possible to set the value, because the field is not supported or for
 some other reason, an exception is thrown.
 
 In some cases, changing the specified field can cause the resulting date-time to become invalid,
 such as changing the month from 31st January to February would make the day-of-month invalid.
 In cases like this, the field is responsible for resolving the date. Typically it will choose
 the previous valid date, which would be the last valid day of February in this example.
 
 If the field is a ChronoField then the adjustment is implemented here.
 
 The INSTANT_SECONDS field will return a date-time with the specified instant.
 The zone and nano-of-second are unchanged.
 The result will have an offset derived from the new instant and original zone.
 If the new instant value is outside the valid range then a DateTimeException will be thrown.
 
 The OFFSET_SECONDS field will typically be ignored.
 The offset of a ZonedDateTime is controlled primarily by the time-zone.
 As such, changing the offset does not generally make sense, because there is only
 one valid offset for the local date-time and zone.
 If the zoned date-time is in a daylight savings overlap, then the offset is used
 to switch between the two valid offsets. In all other cases, the offset is ignored.
 If the new offset value is outside the valid range then a DateTimeException will be thrown.
 
 The other supported fields will behave as per
 the matching method on LocalDateTime.
 The zone is not part of the calculation and will be unchanged.
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.adjustInto(Temporal, long)
 passing this as the argument. In this case, the field determines
 whether and how to adjust the instant.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface ChronoZonedDateTime<LocalDate>
Specified by:
with in interface Temporal
Parameters:
field - the field to set in the result, not null
newValue - the new value of the field in the result
Returns:
a ZonedDateTime based on this with the specified field set, not null
Throws:
DateTimeException - if the field cannot be set
UnsupportedTemporalTypeException - if the field is not supported
ArithmeticException - if numeric overflow occurs


"
12,ZonedDateTime,30,ZonedDateTime toInstant(),False,,NULL
12,ZonedDateTime,31,ZonedDateTime toLocalDate(),False,,NULL
12,ZonedDateTime,32,ZonedDateTime toLocalTime(),False,,NULL
12,ZonedDateTime,33,ZonedDateTime toLocalDateTime(),False,,NULL
12,ZonedDateTime,34,ZonedDateTime toOffsetDateTime(),False,,NULL
12,ZonedDateTime,35,ZonedDateTime toZonedDateTime(),False,,NULL
12,ZonedDateTime,36,ZonedDateTime truncatedTo(ChronoUnit unit),False,,NULL
12,ZonedDateTime,37,ZonedDateTime with(ZoneOffset offset),False,,NULL
12,ZonedDateTime,38,ZonedDateTime withOffsetSameInstant(ZoneOffset offset),False,,NULL
12,ZonedDateTime,39,ZonedDateTime plus(TemporalAmount amountToAdd),True,Returns a copy of this date-time with the specified amount added.,"

plus
public ZonedDateTime plus(TemporalAmount amountToAdd)
Returns a copy of this date-time with the specified amount added.
 
 This returns a ZonedDateTime, based on this one, with the specified amount added.
 The amount is typically Period or Duration but may be
 any other type implementing the TemporalAmount interface.
 
 The calculation is delegated to the amount object by calling
 TemporalAmount.addTo(Temporal). The amount implementation is free
 to implement the addition in any way it wishes, however it typically
 calls back to plus(long, TemporalUnit). Consult the documentation
 of the amount implementation to determine if it can be successfully added.
 
 This instance is immutable and unaffected by this method call.

Specified by:
plus in interface ChronoZonedDateTime<LocalDate>
Specified by:
plus in interface Temporal
Parameters:
amountToAdd - the amount to add, not null
Returns:
a ZonedDateTime based on this date-time with the addition made, not null
Throws:
DateTimeException - if the addition cannot be made
ArithmeticException - if numeric overflow occurs


"
12,ZonedDateTime,40,ZonedDateTime minus(TemporalAmount amountToSubtract),True,Returns a copy of this date-time with the specified amount subtracted.,"

minus
public ZonedDateTime minus(TemporalAmount amountToSubtract)
Returns a copy of this date-time with the specified amount subtracted.
 
 This returns a ZonedDateTime, based on this one, with the specified amount subtracted.
 The amount is typically Period or Duration but may be
 any other type implementing the TemporalAmount interface.
 
 The calculation is delegated to the amount object by calling
 TemporalAmount.subtractFrom(Temporal). The amount implementation is free
 to implement the subtraction in any way it wishes, however it typically
 calls back to minus(long, TemporalUnit). Consult the documentation
 of the amount implementation to determine if it can be successfully subtracted.
 
 This instance is immutable and unaffected by this method call.

Specified by:
minus in interface ChronoZonedDateTime<LocalDate>
Specified by:
minus in interface Temporal
Parameters:
amountToSubtract - the amount to subtract, not null
Returns:
a ZonedDateTime based on this date-time with the subtraction made, not null
Throws:
DateTimeException - if the subtraction cannot be made
ArithmeticException - if numeric overflow occurs


"
12,ZonedDateTime,41,ZonedDateTime isSupported(TemporalField field),False,,NULL
12,ZonedDateTime,42,ZonedDateTime getLong(TemporalField field),False,,NULL
12,ZonedDateTime,43,ZonedDateTime query(TemporalQuery<?> query),False,,NULL
12,ZonedDateTime,44,ZonedDateTime range(TemporalField field),False,,NULL
12,ZonedDateTime,45,ZonedDateTime isSupported(TemporalQuery<?> query),False,,NULL
12,ZonedDateTime,46,ZonedDateTime queryFrom(TemporalQuery<?> query),False,,NULL
12,ZonedDateTime,47,"ZonedDateTime query(TemporalQuery<?> query, TemporalQuery<?> fallbackQuery)",False,,NULL
12,ZonedDateTime,48,"ZonedDateTime queryFrom(TemporalQuery<?> query, TemporalQuery<?> fallbackQuery)",False,,NULL
12,ZonedDateTime,49,ZonedDateTime adjustInto(TemporalAdjuster adjuster),False,,NULL
12,ZonedDateTime,50,ZonedDateTime adjustInto(TemporalAdjusters adjuster),False,,NULL
13,ZoneId,1,ZoneId of(String id),True,Obtains an instance of ZoneId from an ID ensuring that the ID is valid and available for use.,"

of
public static ZoneId of(String zoneId)
Obtains an instance of ZoneId from an ID ensuring that the
 ID is valid and available for use.
 
 This method parses the ID producing a ZoneId or ZoneOffset.
 A ZoneOffset is returned if the ID is 'Z', or starts with '+' or '-'.
 The result will always be a valid ID for which ZoneRules can be obtained.
 
 Parsing matches the zone ID step by step as follows.
 
If the zone ID equals 'Z', the result is ZoneOffset.UTC.
 If the zone ID consists of a single letter, the zone ID is invalid
  and DateTimeException is thrown.
 If the zone ID starts with '+' or '-', the ID is parsed as a
  ZoneOffset using ZoneOffset.of(String).
 If the zone ID equals 'GMT', 'UTC' or 'UT' then the result is a ZoneId
  with the same ID and rules equivalent to ZoneOffset.UTC.
 If the zone ID starts with 'UTC+', 'UTC-', 'GMT+', 'GMT-', 'UT+' or 'UT-'
  then the ID is a prefixed offset-based ID. The ID is split in two, with
  a two or three letter prefix and a suffix starting with the sign.
  The suffix is parsed as a ZoneOffset.
  The result will be a ZoneId with the specified UTC/GMT/UT prefix
  and the normalized offset ID as per ZoneOffset.getId().
  The rules of the returned ZoneId will be equivalent to the
  parsed ZoneOffset.
 All other IDs are parsed as region-based zone IDs. Region IDs must
  match the regular expression [A-Za-z][A-Za-z0-9~/._+-]+
  otherwise a DateTimeException is thrown. If the zone ID is not
  in the configured set of IDs, ZoneRulesException is thrown.
  The detailed format of the region ID depends on the group supplying the data.
  The default set of data is supplied by the IANA Time Zone Database (TZDB).
  This has region IDs of the form '{area}/{city}', such as 'Europe/Paris' or 'America/New_York'.
  This is compatible with most IDs from TimeZone.
 

Parameters:
zoneId - the time-zone ID, not null
Returns:
the zone ID, not null
Throws:
DateTimeException - if the zone ID has an invalid format
ZoneRulesException - if the zone ID is a region ID that cannot be found


"
13,ZoneId,2,ZoneId systemDefault(),True,Gets the system default time-zone.,"

systemDefault
public static ZoneId systemDefault()
Gets the system default time-zone.
 
 This queries TimeZone.getDefault() to find the default time-zone
 and converts it to a ZoneId. If the system default time-zone is changed,
 then the result of this method will also change.

Returns:
the zone ID, not null
Throws:
DateTimeException - if the converted zone ID has an invalid format
ZoneRulesException - if the converted zone region ID cannot be found


"
13,ZoneId,3,Set<String> getAvailableZoneIds(),True,Gets the set of available zone IDs.,"

getAvailableZoneIds
public static Set<String> getAvailableZoneIds()
Gets the set of available zone IDs.
 
 This set includes the string form of all available region-based IDs.
 Offset-based zone IDs are not included in the returned set.
 The ID can be passed to of(String) to create a ZoneId.
 
 The set of zone IDs can increase over time, although in a typical application
 the set of IDs is fixed. Each call to this method is thread-safe.

Returns:
a modifiable copy of the set of zone IDs, not null


"
13,ZoneId,4,ZoneId ofId(String id),False,,NULL
13,ZoneId,5,"ZoneId of(String id, ZoneRules rules)",False,,NULL
14,ZoneOffset,1,of(String offsetId),False,,NULL
14,ZoneOffset,2,ofHours(int hours),False,,NULL
14,ZoneOffset,3,"ofHoursMinutes(int hours, int minutes)",False,,NULL
14,ZoneOffset,4,ofTotalSeconds(long seconds),False,,NULL
14,ZoneOffset,5,getId(),False,,NULL
