ClassName,Method,Return Type,Description,Full Description
JPEGHuffmanTable,getLengths(),short[],Returns an array of shorts containing the number of values for each length in the Huffman table.,"

getLengths
public short[] getLengths()
Returns an array of shorts containing the number of values
 for each length in the Huffman table. The returned array is a copy.

Returns:
a short array where array[k-1]
 is equal to the number of values in the table of length k.
See Also:
getValues()


"
JPEGHuffmanTable,getValues(),short[],Returns an array of shorts containing the values arranged by increasing length of their corresponding codes.,"

getValues
public short[] getValues()
Returns an array of shorts containing the values arranged
 by increasing length of their corresponding codes.
 The interpretation of the array is dependent on the values returned
 from getLengths. The returned array is a copy.

Returns:
a short array of values.
See Also:
getLengths()


"
JPEGHuffmanTable,toString(),String,Returns a String representing this Huffman table.,"

toString
public String toString()
Returns a String representing this Huffman table.

Overrides:
toString in class Object
Returns:
a String representing this Huffman table.


"
JPEGImageReadParam,areTablesSet(),boolean,Returns true if tables are currently set.,"

areTablesSet
public boolean areTablesSet()
Returns true if tables are currently set.

Returns:
true if tables are present.


"
JPEGImageReadParam,getACHuffmanTables(),JPEGHuffmanTable[],"Returns a copy of the array of AC Huffman tables set on the most recent call to setDecodeTables, or null if tables are not currently set.","

getACHuffmanTables
public JPEGHuffmanTable[] getACHuffmanTables()
Returns a copy of the array of AC Huffman tables set on the
 most recent call to setDecodeTables, or
 null if tables are not currently set.

Returns:
an array of JPEGHuffmanTable objects, or
 null.
See Also:
setDecodeTables(javax.imageio.plugins.jpeg.JPEGQTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[])


"
JPEGImageReadParam,getDCHuffmanTables(),JPEGHuffmanTable[],"Returns a copy of the array of DC Huffman tables set on the most recent call to setDecodeTables, or null if tables are not currently set.","

getDCHuffmanTables
public JPEGHuffmanTable[] getDCHuffmanTables()
Returns a copy of the array of DC Huffman tables set on the
 most recent call to setDecodeTables, or
 null if tables are not currently set.

Returns:
an array of JPEGHuffmanTable objects, or
 null.
See Also:
setDecodeTables(javax.imageio.plugins.jpeg.JPEGQTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[])


"
JPEGImageReadParam,getQTables(),JPEGQTable[],"Returns a copy of the array of quantization tables set on the most recent call to setDecodeTables, or null if tables are not currently set.","

getQTables
public JPEGQTable[] getQTables()
Returns a copy of the array of quantization tables set on the
 most recent call to setDecodeTables, or
 null if tables are not currently set.

Returns:
an array of JPEGQTable objects, or
 null.
See Also:
setDecodeTables(javax.imageio.plugins.jpeg.JPEGQTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[])


"
JPEGImageReadParam,"setDecodeTables(JPEGQTable[] qTables, JPEGHuffmanTable[] DCHuffmanTables, JPEGHuffmanTable[] ACHuffmanTables)",void,Sets the quantization and Huffman tables to use in decoding abbreviated streams.,"

setDecodeTables
public void setDecodeTables(JPEGQTable[] qTables,
                            JPEGHuffmanTable[] DCHuffmanTables,
                            JPEGHuffmanTable[] ACHuffmanTables)
Sets the quantization and Huffman tables to use in decoding
 abbreviated streams.  There may be a maximum of 4 tables of
 each type.  These tables are ignored once tables are
 encountered in the stream.  All arguments must be
 non-null.  The two arrays of Huffman tables must
 have the same number of elements.  The table specifiers in the
 frame and scan headers in the stream are assumed to be
 equivalent to indices into these arrays.  The argument arrays
 are copied by this method.

Parameters:
qTables - an array of quantization table objects.
DCHuffmanTables - an array of Huffman table objects.
ACHuffmanTables - an array of Huffman table objects.
Throws:
IllegalArgumentException - if any of the arguments
 is null, has more than 4 elements, or if the
 numbers of DC and AC tables differ.
See Also:
unsetDecodeTables()


"
JPEGImageReadParam,unsetDecodeTables(),void,Removes any quantization and Huffman tables that are currently set.,"

unsetDecodeTables
public void unsetDecodeTables()
Removes any quantization and Huffman tables that are currently
 set.

See Also:
setDecodeTables(javax.imageio.plugins.jpeg.JPEGQTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[])


"
JPEGImageWriteParam,areTablesSet(),boolean,Returns true if tables are currently set.,"

areTablesSet
public boolean areTablesSet()
Returns true if tables are currently set.

Returns:
true if tables are present.


"
JPEGImageWriteParam,getACHuffmanTables(),JPEGHuffmanTable[],"Returns a copy of the array of AC Huffman tables set on the most recent call to setEncodeTables, or null if tables are not currently set.","

getACHuffmanTables
public JPEGHuffmanTable[] getACHuffmanTables()
Returns a copy of the array of AC Huffman tables set on the
 most recent call to setEncodeTables, or
 null if tables are not currently set.

Returns:
an array of JPEGHuffmanTable objects, or
 null.
See Also:
setEncodeTables(javax.imageio.plugins.jpeg.JPEGQTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[])


"
JPEGImageWriteParam,getCompressionQualityDescriptions(),String[],Returns an array of Strings that may be used along with getCompressionQualityValues as part of a user interface for setting or displaying the compression quality level.,"

getCompressionQualityDescriptions
public String[] getCompressionQualityDescriptions()
Description copied from class: ImageWriteParam
Returns an array of Strings that may be used along
 with getCompressionQualityValues as part of a user
 interface for setting or displaying the compression quality
 level.  The String with index i
 provides a description of the range of quality levels between
 getCompressionQualityValues[i] and
 getCompressionQualityValues[i + 1].  Note that the
 length of the array returned from
 getCompressionQualityValues will always be one
 greater than that returned from
 getCompressionQualityDescriptions.

  As an example, the strings ""Good"", ""Better"", and ""Best""
 could be associated with the ranges [0, .33),
 [.33, .66), and [.66, 1.0].  In this
 case, getCompressionQualityDescriptions would
 return { ""Good"", ""Better"", ""Best"" } and
 getCompressionQualityValues would return
 { 0.0F, .33F, .66F, 1.0F }.

  If no descriptions are available, null is
 returned.  If null is returned from
 getCompressionQualityValues, this method must also
 return null.

  The descriptions should be localized for the
 Locale returned by getLocale, if it
 is non-null.

  If there are multiple compression types but none has been set,
 an IllegalStateException is thrown.

  The default implementation checks that compression is
 supported and that the compression mode is
 MODE_EXPLICIT.  If so, if
 getCompressionTypes() is null or
 getCompressionType() is non-null, it
 returns null.

Overrides:
getCompressionQualityDescriptions in class ImageWriteParam
Returns:
an array of Strings containing localized
 descriptions of the compression quality levels.
See Also:
ImageWriteParam.getCompressionQualityValues()


"
JPEGImageWriteParam,getCompressionQualityValues(),float[],Returns an array of floats that may be used along with getCompressionQualityDescriptions as part of a user interface for setting or displaying the compression quality level.,"

getCompressionQualityValues
public float[] getCompressionQualityValues()
Description copied from class: ImageWriteParam
Returns an array of floats that may be used along
 with getCompressionQualityDescriptions as part of a user
 interface for setting or displaying the compression quality
 level.  See getCompressionQualityDescriptions for more information.

  If no descriptions are available, null is
 returned.  If null is returned from
 getCompressionQualityDescriptions, this method
 must also return null.

  If there are multiple compression types but none has been set,
 an IllegalStateException is thrown.

  The default implementation checks that compression is
 supported and that the compression mode is
 MODE_EXPLICIT.  If so, if
 getCompressionTypes() is null or
 getCompressionType() is non-null, it
 returns null.

Overrides:
getCompressionQualityValues in class ImageWriteParam
Returns:
an array of floats indicating the
 boundaries between the compression quality levels as described
 by the Strings from
 getCompressionQualityDescriptions.
See Also:
ImageWriteParam.getCompressionQualityDescriptions()


"
JPEGImageWriteParam,getDCHuffmanTables(),JPEGHuffmanTable[],"Returns a copy of the array of DC Huffman tables set on the most recent call to setEncodeTables, or null if tables are not currently set.","

getDCHuffmanTables
public JPEGHuffmanTable[] getDCHuffmanTables()
Returns a copy of the array of DC Huffman tables set on the
 most recent call to setEncodeTables, or
 null if tables are not currently set.

Returns:
an array of JPEGHuffmanTable objects, or
 null.
See Also:
setEncodeTables(javax.imageio.plugins.jpeg.JPEGQTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[])


"
JPEGImageWriteParam,getOptimizeHuffmanTables(),boolean,"Returns the value passed into the most recent call to setOptimizeHuffmanTables, or false if setOptimizeHuffmanTables has never been called.","

getOptimizeHuffmanTables
public boolean getOptimizeHuffmanTables()
Returns the value passed into the most recent call
 to setOptimizeHuffmanTables, or
 false if setOptimizeHuffmanTables
 has never been called.

Returns:
true if the writer will generate optimized
 Huffman tables.
See Also:
setOptimizeHuffmanTables(boolean)


"
JPEGImageWriteParam,getQTables(),JPEGQTable[],"Returns a copy of the array of quantization tables set on the most recent call to setEncodeTables, or null if tables are not currently set.","

getQTables
public JPEGQTable[] getQTables()
Returns a copy of the array of quantization tables set on the
 most recent call to setEncodeTables, or
 null if tables are not currently set.

Returns:
an array of JPEGQTable objects, or
 null.
See Also:
setEncodeTables(javax.imageio.plugins.jpeg.JPEGQTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[])


"
JPEGImageWriteParam,isCompressionLossless(),boolean,Returns false since the JPEG plug-in only supports lossy compression.,"

isCompressionLossless
public boolean isCompressionLossless()
Returns false since the JPEG plug-in only supports
 lossy compression.

Overrides:
isCompressionLossless in class ImageWriteParam
Returns:
false.
Throws:
IllegalStateException - if the compression mode is not
 MODE_EXPLICIT.


"
JPEGImageWriteParam,"setEncodeTables(JPEGQTable[] qTables, JPEGHuffmanTable[] DCHuffmanTables, JPEGHuffmanTable[] ACHuffmanTables)",void,Sets the quantization and Huffman tables to use in encoding abbreviated streams.,"

setEncodeTables
public void setEncodeTables(JPEGQTable[] qTables,
                            JPEGHuffmanTable[] DCHuffmanTables,
                            JPEGHuffmanTable[] ACHuffmanTables)
Sets the quantization and Huffman tables to use in encoding
 abbreviated streams.  There may be a maximum of 4 tables of
 each type.  These tables are ignored if tables are specified in
 the metadata.  All arguments must be non-null.
 The two arrays of Huffman tables must have the same number of
 elements.  The table specifiers in the frame and scan headers
 in the metadata are assumed to be equivalent to indices into
 these arrays.  The argument arrays are copied by this method.

Parameters:
qTables - An array of quantization table objects.
DCHuffmanTables - An array of Huffman table objects.
ACHuffmanTables - An array of Huffman table objects.
Throws:
IllegalArgumentException - if any of the arguments
 is null or has more than 4 elements, or if the
 numbers of DC and AC tables differ.
See Also:
unsetEncodeTables()


"
JPEGImageWriteParam,setOptimizeHuffmanTables(boolean optimize),void,Tells the writer to generate optimized Huffman tables for the image as part of the writing process.,"

setOptimizeHuffmanTables
public void setOptimizeHuffmanTables(boolean optimize)
Tells the writer to generate optimized Huffman tables
 for the image as part of the writing process.  The
 default is false.  If this flag is set
 to true, it overrides any tables specified
 in the metadata.  Note that this means that any image
 written with this flag set to true will
 always contain Huffman tables.

Parameters:
optimize - A boolean indicating whether to generate
 optimized Huffman tables when writing.
See Also:
getOptimizeHuffmanTables()


"
JPEGImageWriteParam,unsetCompression(),void,Removes any previous compression quality setting.,"

unsetCompression
public void unsetCompression()
Removes any previous compression quality setting.

  The default implementation resets the compression quality
 to 0.75F.

Overrides:
unsetCompression in class ImageWriteParam
Throws:
IllegalStateException - if the compression mode is not
 MODE_EXPLICIT.
See Also:
ImageWriteParam.setCompressionType(java.lang.String), 
ImageWriteParam.setCompressionQuality(float)


"
JPEGImageWriteParam,unsetEncodeTables(),void,Removes any quantization and Huffman tables that are currently set.,"

unsetEncodeTables
public void unsetEncodeTables()
Removes any quantization and Huffman tables that are currently
 set.

See Also:
setEncodeTables(javax.imageio.plugins.jpeg.JPEGQTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[], javax.imageio.plugins.jpeg.JPEGHuffmanTable[])


"
JPEGQTable,"getScaledInstance(float scaleFactor, boolean forceBaseline)",JPEGQTable,Returns a new quantization table where the values are multiplied by scaleFactor and then clamped to the range 1..32767 (or to 1..255 if forceBaseline is true).,"

getScaledInstance
public JPEGQTable getScaledInstance(float scaleFactor,
                                    boolean forceBaseline)
Returns a new quantization table where the values are multiplied
 by scaleFactor and then clamped to the range 1..32767
 (or to 1..255 if forceBaseline is true).
 
 Values of scaleFactor less than 1 tend to improve
 the quality level of the table, and values greater than 1.0
 degrade the quality level of the table.

Parameters:
scaleFactor - multiplication factor for the table.
forceBaseline - if true,
 the values will be clamped to the range 1..255
Returns:
a new quantization table that is a linear multiple
 of the current table.


"
JPEGQTable,getTable(),int[],Returns a copy of the current quantization table as an array of ints in natural (not zig-zag) order.,"

getTable
public int[] getTable()
Returns a copy of the current quantization table as an array
 of ints in natural (not zig-zag) order.

Returns:
A copy of the current quantization table.


"
JPEGQTable,toString(),String,Returns a String representing this quantization table.,"

toString
public String toString()
Returns a String representing this quantization table.

Overrides:
toString in class Object
Returns:
a String representing this quantization table.


"
