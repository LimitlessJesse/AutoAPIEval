ClassName,Method,Return Type,Description,Full Description
LogStream,getDefaultStream(),static PrintStream,Deprecated. no replacement,"

getDefaultStream
@Deprecated
public static PrintStream getDefaultStream()
Deprecated. no replacement
Return the current default stream for new logs.

Returns:
default log stream
Since:
JDK1.1
See Also:
setDefaultStream(java.io.PrintStream)


"
LogStream,getOutputStream(),OutputStream,Deprecated. no replacement,"

getOutputStream
@Deprecated
public OutputStream getOutputStream()
Deprecated. no replacement
Return the current stream to which output from this log is sent.

Returns:
output stream for this log
Since:
JDK1.1
See Also:
setOutputStream(java.io.OutputStream)


"
LogStream,log(String name),static LogStream,Deprecated. no replacement,"

log
@Deprecated
public static LogStream log(String name)
Deprecated. no replacement
Return the LogStream identified by the given name.  If
 a log corresponding to ""name"" does not exist, a log using
 the default stream is created.

Parameters:
name - name identifying the desired LogStream
Returns:
log associated with given name
Since:
JDK1.1


"
LogStream,parseLevel(String s),static int,Deprecated. no replacement,"

parseLevel
@Deprecated
public static int parseLevel(String s)
Deprecated. no replacement
Convert a string name of a logging level to its internal
 integer representation.

Parameters:
s - name of logging level (e.g., 'SILENT', 'BRIEF', 'VERBOSE')
Returns:
corresponding integer log level
Since:
JDK1.1


"
LogStream,setDefaultStream(PrintStream newDefault),static void,Deprecated. no replacement,"

setDefaultStream
@Deprecated
public static void setDefaultStream(PrintStream newDefault)
Deprecated. no replacement
Set the default stream for new logs.

Parameters:
newDefault - new default log stream
Since:
JDK1.1
See Also:
getDefaultStream()


"
LogStream,setOutputStream(OutputStream out),void,Deprecated. no replacement,"

setOutputStream
@Deprecated
public void setOutputStream(OutputStream out)
Deprecated. no replacement
Set the stream to which output from this log is sent.

Parameters:
out - new output stream for this log
Since:
JDK1.1
See Also:
getOutputStream()


"
LogStream,toString(),String,Deprecated. no replacement,"

toString
@Deprecated
public String toString()
Deprecated. no replacement
Return log name as string representation.

Overrides:
toString in class Object
Returns:
log name
Since:
JDK1.1


"
LogStream,"write(byte[] b, int off, int len)",void,Deprecated. no replacement,"

write
@Deprecated
public void write(byte[] b,
                              int off,
                              int len)
Deprecated. no replacement
Write a subarray of bytes.  Pass each through write byte method.

Overrides:
write in class PrintStream
Parameters:
b - A byte array
off - Offset from which to start taking bytes
len - Number of bytes to write
Since:
JDK1.1
See Also:
FilterOutputStream.write(int)


"
LogStream,write(int b),void,Deprecated. no replacement,"

write
@Deprecated
public void write(int b)
Deprecated. no replacement
Write a byte of data to the stream.  If it is not a newline, then
 the byte is appended to the internal buffer.  If it is a newline,
 then the currently buffered line is sent to the log's output
 stream, prefixed with the appropriate logging information.

Overrides:
write in class PrintStream
Parameters:
b - The byte to be written
Since:
JDK1.1
See Also:
PrintStream.print(char), 
PrintStream.println(char)


"
ObjID,equals(Object obj),boolean,Compares the specified object with this ObjID for equality.,"

equals
public boolean equals(Object obj)
Compares the specified object with this ObjID for
 equality.

 This method returns true if and only if the
 specified object is an ObjID instance with the same
 object number and address space identifier as this one.

Overrides:
equals in class Object
Parameters:
obj - the object to compare this ObjID to
Returns:
true if the given object is equivalent to
 this one, and false otherwise
See Also:
Object.hashCode(), 
HashMap


"
ObjID,hashCode(),int,"Returns the hash code value for this object identifier, the object number.","

hashCode
public int hashCode()
Returns the hash code value for this object identifier, the
 object number.

Overrides:
hashCode in class Object
Returns:
the hash code value for this object identifier
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
ObjID,read(ObjectInput in),static ObjID,Constructs and returns a new ObjID instance by unmarshalling a binary representation from an ObjectInput instance.,"

read
public static ObjID read(ObjectInput in)
                  throws IOException
Constructs and returns a new ObjID instance by
 unmarshalling a binary representation from an
 ObjectInput instance.

 Specifically, this method first invokes the given stream's
 DataInput.readLong() method to read an object number,
 then it invokes UID.read(DataInput) with the
 stream to read an address space identifier, and then it
 creates and returns a new ObjID instance that
 contains the object number and address space identifier that
 were read from the stream.

Parameters:
in - the ObjectInput instance to read
 ObjID from
Returns:
unmarshalled ObjID instance
Throws:
IOException - if an I/O error occurs while performing
 this operation


"
ObjID,toString(),String,Returns a string representation of this object identifier.,"

toString
public String toString()
Returns a string representation of this object identifier.

Overrides:
toString in class Object
Returns:
a string representation of this object identifier


"
ObjID,write(ObjectOutput out),void,Marshals a binary representation of this ObjID to an ObjectOutput instance.,"

write
public void write(ObjectOutput out)
           throws IOException
Marshals a binary representation of this ObjID to
 an ObjectOutput instance.

 Specifically, this method first invokes the given stream's
 DataOutput.writeLong(long) method with this object
 identifier's object number, and then it writes its address
 space identifier by invoking its UID.write(DataOutput)
 method with the stream.

Parameters:
out - the ObjectOutput instance to write
 this ObjID to
Throws:
IOException - if an I/O error occurs while performing
 this operation


"
Operation,getOperation(),String,Deprecated. no replacement,"

getOperation
@Deprecated
public String getOperation()
Deprecated. no replacement
Returns the name of the method.

Returns:
method name
Since:
JDK1.1


"
Operation,toString(),String,Deprecated. no replacement,"

toString
@Deprecated
public String toString()
Deprecated. no replacement
Returns the string representation of the operation.

Overrides:
toString in class Object
Returns:
a string representation of the object.
Since:
JDK1.1


"
RemoteObject,equals(Object obj),boolean,Compares two remote objects for equality.,"

equals
public boolean equals(Object obj)
Compares two remote objects for equality.
 Returns a boolean that indicates whether this remote object is
 equivalent to the specified Object. This method is used when a
 remote object is stored in a hashtable.
 If the specified Object is not itself an instance of RemoteObject,
 then this method delegates by returning the result of invoking the
 equals method of its parameter with this remote object
 as the argument.

Overrides:
equals in class Object
Parameters:
obj - the Object to compare with
Returns:
true if these Objects are equal; false otherwise.
See Also:
Hashtable


"
RemoteObject,getRef(),RemoteRef,Returns the remote reference for the remote object.,"

getRef
public RemoteRef getRef()
Returns the remote reference for the remote object.

 Note: The object returned from this method may be an instance of
 an implementation-specific class.  The RemoteObject
 class ensures serialization portability of its instances' remote
 references through the behavior of its custom
 writeObject and readObject methods.  An
 instance of RemoteRef should not be serialized outside
 of its RemoteObject wrapper instance or the result may
 be unportable.

Returns:
remote reference for the remote object
Since:
1.2


"
RemoteObject,hashCode(),int,Returns a hashcode for a remote object.,"

hashCode
public int hashCode()
Returns a hashcode for a remote object.  Two remote object stubs
 that refer to the same remote object will have the same hash code
 (in order to support remote objects as keys in hash tables).

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Hashtable


"
RemoteObject,toString(),String,Returns a String that represents the value of this remote object.,"

toString
public String toString()
Returns a String that represents the value of this remote object.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
RemoteObject,toStub(Remote obj),static Remote,Returns the stub for the remote object obj passed as a parameter.,"

toStub
public static Remote toStub(Remote obj)
                     throws NoSuchObjectException
Returns the stub for the remote object obj passed
 as a parameter. This operation is only valid after
 the object has been exported.

Parameters:
obj - the remote object whose stub is needed
Returns:
the stub for the remote object, obj.
Throws:
NoSuchObjectException - if the stub for the
 remote object could not be found.
Since:
1.2


"
RemoteObjectInvocationHandler,"invoke(Object proxy, Method method, Object[] args)",Object,"Processes a method invocation made on the encapsulating proxy instance, proxy, and returns the result.","

invoke
public Object invoke(Object proxy,
                     Method method,
                     Object[] args)
              throws Throwable
Processes a method invocation made on the encapsulating
 proxy instance, proxy, and returns the result.

 RemoteObjectInvocationHandler implements this method
 as follows:

 If method is one of the following methods, it
 is processed as described below:

 
Object.hashCode: Returns the hash
 code value for the proxy.

 Object.equals: Returns true
 if the argument (args[0]) is an instance of a dynamic
 proxy class and this invocation handler is equal to the invocation
 handler of that argument, and returns false otherwise.

 Object.toString: Returns a string
 representation of the proxy.
 
Otherwise, a remote call is made as follows:

 
If proxy is not an instance of the interface
 Remote, then an IllegalArgumentException is thrown.

 Otherwise, the invoke method is invoked
 on this invocation handler's RemoteRef, passing
 proxy, method, args, and the
 method hash (defined in section 8.3 of the ""Java Remote Method
 Invocation (RMI) Specification"") for method, and the
 result is returned.

 If an exception is thrown by RemoteRef.invoke and
 that exception is a checked exception that is not assignable to any
 exception in the throws clause of the method
 implemented by the proxy's class, then that exception
 is wrapped in an UnexpectedException and the wrapped
 exception is thrown.  Otherwise, the exception thrown by
 invoke is thrown by this method.
 
The semantics of this method are unspecified if the
 arguments could not have been produced by an instance of some
 valid dynamic proxy class containing this invocation handler.

Specified by:
invoke in interface InvocationHandler
Parameters:
proxy - the proxy instance that the method was invoked on
method - the Method instance corresponding to the
 interface method invoked on the proxy instance
args - an array of objects containing the values of the
 arguments passed in the method invocation on the proxy instance, or
 null if the method takes no arguments
Returns:
the value to return from the method invocation on the proxy
 instance
Throws:
Throwable - the exception to throw from the method invocation
 on the proxy instance
See Also:
UndeclaredThrowableException


"
RemoteServer,getClientHost(),static String,Returns a string representation of the client host for the remote method invocation being processed in the current thread.,"

getClientHost
public static String getClientHost()
                            throws ServerNotActiveException
Returns a string representation of the client host for the
 remote method invocation being processed in the current thread.

Returns:
a string representation of the client host
Throws:
ServerNotActiveException - if no remote method invocation
 is being processed in the current thread
Since:
JDK1.1


"
RemoteServer,getLog(),static PrintStream,Returns stream for the RMI call log.,"

getLog
public static PrintStream getLog()
Returns stream for the RMI call log.

Returns:
the call log
Since:
JDK1.1
See Also:
setLog(java.io.OutputStream)


"
RemoteServer,setLog(OutputStream out),static void,Log RMI calls to the output stream out.,"

setLog
public static void setLog(OutputStream out)
Log RMI calls to the output stream out. If
 out is null, call logging is turned off.

 If there is a security manager, its
 checkPermission method will be invoked with a
 java.util.logging.LoggingPermission(""control"")
 permission; this could result in a SecurityException.

Parameters:
out - the output stream to which RMI calls should be logged
Throws:
SecurityException - if there is a security manager and
          the invocation of its checkPermission method
          fails
Since:
JDK1.1
See Also:
getLog()


"
RemoteStub,"setRef(RemoteStub stub, RemoteRef ref)",protected static void,"Deprecated. No replacement. The setRef method was intended for setting the remote reference of a remote stub. This is unnecessary, since RemoteStubs can be created and initialized with a remote reference through use of the RemoteStub(RemoteRef) constructor.","

setRef
@Deprecated
protected static void setRef(RemoteStub stub,
                                         RemoteRef ref)
Deprecated. No replacement.  The setRef method
 was intended for setting the remote reference of a remote
 stub. This is unnecessary, since RemoteStubs can be created
 and initialized with a remote reference through use of
 the RemoteStub(RemoteRef) constructor.
Throws UnsupportedOperationException.

Parameters:
stub - the remote stub
ref - the remote reference
Throws:
UnsupportedOperationException - always
Since:
JDK1.1


"
RMIClassLoader,getClassAnnotation(Class<?> cl),static String,Returns the annotation string (representing a location for the class definition) that RMI will use to annotate the class descriptor when marshalling objects of the given class.,"

getClassAnnotation
public static String getClassAnnotation(Class<?> cl)
Returns the annotation string (representing a location for
 the class definition) that RMI will use to annotate the class
 descriptor when marshalling objects of the given class.

 This method delegates to the
 RMIClassLoaderSpi.getClassAnnotation(Class) method
 of the provider instance, passing cl as the argument.

Parameters:
cl - the class to obtain the annotation for
Returns:
a string to be used to annotate the given class when
 it gets marshalled, or null
Throws:
NullPointerException - if cl is null
Since:
1.2


"
RMIClassLoader,getClassLoader(String codebase),static ClassLoader,Returns a class loader that loads classes from the given codebase URL path.,"

getClassLoader
public static ClassLoader getClassLoader(String codebase)
                                  throws MalformedURLException,
                                         SecurityException
Returns a class loader that loads classes from the given codebase
 URL path.

 The class loader returned is the class loader that the
 loadClass(String,String) method would use to load classes
 for the same codebase argument.

 This method delegates to the
 RMIClassLoaderSpi.getClassLoader(String) method
 of the provider instance, passing codebase as the argument.

 If there is a security manger, its checkPermission
 method will be invoked with a
 RuntimePermission(""getClassLoader"") permission;
 this could result in a SecurityException.
 The provider implementation of this method may also perform further
 security checks to verify that the calling context has permission to
 connect to all of the URLs in the codebase URL path.

Parameters:
codebase - the list of URLs (space-separated) from which
 the returned class loader will load classes from, or null
Returns:
a class loader that loads classes from the given codebase URL
 path
Throws:
MalformedURLException - if codebase is
 non-null and contains an invalid URL, or
 if codebase is null and a provider-specific
 URL used to identify the class loader is invalid
SecurityException - if there is a security manager and the
 invocation of its checkPermission method fails, or
 if the caller does not have permission to connect to all of the
 URLs in the codebase URL path
Since:
1.3


"
RMIClassLoader,getDefaultProviderInstance(),static RMIClassLoaderSpi,Returns the canonical instance of the default provider for the service provider interface RMIClassLoaderSpi.,"

getDefaultProviderInstance
public static RMIClassLoaderSpi getDefaultProviderInstance()
Returns the canonical instance of the default provider
 for the service provider interface RMIClassLoaderSpi.
 If the system property java.rmi.server.RMIClassLoaderSpi
 is not defined, then the RMIClassLoader static
 methods

 
loadClass(URL,String)
loadClass(String,String)
loadClass(String,String,ClassLoader)
loadProxyClass(String,String[],ClassLoader)
getClassLoader(String)
getClassAnnotation(Class)


 will use the canonical instance of the default provider
 as the service provider instance.

 If there is a security manager, its
 checkPermission method will be invoked with a
 RuntimePermission(""setFactory"") permission; this
 could result in a SecurityException.

 The default service provider instance implements
 RMIClassLoaderSpi as follows:

 
The getClassAnnotation method returns a String
 representing the codebase URL path that a remote party should
 use to download the definition for the specified class.  The
 format of the returned string is a path of URLs separated by
 spaces.

 The codebase string returned depends on the defining class
 loader of the specified class:

 
If the class loader is the system class loader (see
 ClassLoader.getSystemClassLoader()), a parent of the
 system class loader such as the loader used for installed
 extensions, or the bootstrap class loader (which may be
 represented by null), then the value of the
 java.rmi.server.codebase property (or possibly an
 earlier cached value) is returned, or
 null is returned if that property is not set.

 Otherwise, if the class loader is an instance of
 URLClassLoader, then the returned string is a
 space-separated list of the external forms of the URLs returned
 by invoking the getURLs methods of the loader.  If
 the URLClassLoader was created by this provider to
 service an invocation of its loadClass or
 loadProxyClass methods, then no permissions are
 required to get the associated codebase string.  If it is an
 arbitrary other URLClassLoader instance, then if
 there is a security manager, its checkPermission
 method will be invoked once for each URL returned by the
 getURLs method, with the permission returned by
 invoking openConnection().getPermission() on each
 URL; if any of those invocations throws a
 SecurityException or an IOException,
 then the value of the java.rmi.server.codebase
 property (or possibly an earlier cached value) is returned, or
 null is returned if that property is not set.

 Finally, if the class loader is not an instance of
 URLClassLoader, then the value of the
 java.rmi.server.codebase property (or possibly an
 earlier cached value) is returned, or
 null is returned if that property is not set.

 
For the implementations of the methods described below,
 which all take a String parameter named
 codebase that is a space-separated list of URLs,
 each invocation has an associated codebase loader that
 is identified using the codebase argument in
 conjunction with the current thread's context class loader (see
 Thread.getContextClassLoader()).  When there is a
 security manager, this provider maintains an internal table of
 class loader instances (which are at least instances of URLClassLoader) keyed by the pair of their parent
 class loader and their codebase URL path (an ordered list of
 URLs).  If the codebase argument is null,
 the codebase URL path is the value of the system property
 java.rmi.server.codebase or possibly an
 earlier cached value.  For a given codebase URL path passed as the
 codebase argument to an invocation of one of the
 below methods in a given context, the codebase loader is the
 loader in the table with the specified codebase URL path and
 the current thread's context class loader as its parent.  If no
 such loader exists, then one is created and added to the table.
 The table does not maintain strong references to its contained
 loaders, in order to allow them and their defined classes to be
 garbage collected when not otherwise reachable.  In order to
 prevent arbitrary untrusted code from being implicitly loaded
 into a virtual machine with no security manager, if there is no
 security manager set, the codebase loader is just the current
 thread's context class loader (the supplied codebase URL path
 is ignored, so remote class loading is disabled).

 The getClassLoader method returns the codebase loader for the
 specified codebase URL path.  If there is a security manager,
 then if the calling context does not have permission to connect
 to all of the URLs in the codebase URL path, a
 SecurityException will be thrown.

 The loadClass method attempts to load the class with the
 specified name as follows:

 

 If the defaultLoader argument is
 non-null, it first attempts to load the class with the
 specified name using the
 defaultLoader, such as by evaluating

 
     Class.forName(name, false, defaultLoader)
 

 If the class is successfully loaded from the
 defaultLoader, that class is returned.  If an
 exception other than ClassNotFoundException is
 thrown, that exception is thrown to the caller.

 Next, the loadClass method attempts to load the
 class with the specified name using the codebase
 loader for the specified codebase URL path.
 If there is a security manager, then the calling context
 must have permission to connect to all of the URLs in the
 codebase URL path; otherwise, the current thread's context
 class loader will be used instead of the codebase loader.

 
The loadProxyClass method attempts to return a dynamic proxy
 class with the named interface as follows:

 
If the defaultLoader argument is
 non-null and all of the named interfaces can be
 resolved through that loader, then,

 
if all of the resolved interfaces are public,
 then it first attempts to obtain a dynamic proxy class (using
 Proxy.getProxyClass) for the resolved interfaces defined in
 the codebase loader; if that attempt throws an
 IllegalArgumentException, it then attempts to
 obtain a dynamic proxy class for the resolved interfaces
 defined in the defaultLoader.  If both attempts
 throw IllegalArgumentException, then this method
 throws a ClassNotFoundException.  If any other
 exception is thrown, that exception is thrown to the caller.

 if all of the non-public resolved interfaces
 are defined in the same class loader, then it attempts to
 obtain a dynamic proxy class for the resolved interfaces
 defined in that loader.

 otherwise, a LinkageError is thrown (because a
 class that implements all of the specified interfaces cannot be
 defined in any loader).

 
Otherwise, if all of the named interfaces can be resolved
 through the codebase loader, then,

 
if all of the resolved interfaces are public,
 then it attempts to obtain a dynamic proxy class for the
 resolved interfaces in the codebase loader.  If the attempt
 throws an IllegalArgumentException, then this
 method throws a ClassNotFoundException.

 if all of the non-public resolved interfaces
 are defined in the same class loader, then it attempts to
 obtain a dynamic proxy class for the resolved interfaces
 defined in that loader.

 otherwise, a LinkageError is thrown (because a
 class that implements all of the specified interfaces cannot be
 defined in any loader).

 
Otherwise, a ClassNotFoundException is thrown
 for one of the named interfaces that could not be resolved.

 


Returns:
the canonical instance of the default service provider
Throws:
SecurityException - if there is a security manager and the
 invocation of its checkPermission method fails
Since:
1.4


"
RMIClassLoader,getSecurityContext(ClassLoader loader),static Object,"Deprecated. no replacement. As of the Java 2 platform v1.2, RMI no longer uses this method to obtain a class loader's security context.","

getSecurityContext
@Deprecated
public static Object getSecurityContext(ClassLoader loader)
Deprecated. no replacement.  As of the Java 2 platform v1.2, RMI no
 longer uses this method to obtain a class loader's security context.
Returns the security context of the given class loader.

Parameters:
loader - a class loader from which to get the security context
Returns:
the security context
See Also:
SecurityManager.getSecurityContext()


"
RMIClassLoader,loadClass(String name),static Class<?>,"Deprecated. replaced by loadClass(String,String) method","

loadClass
@Deprecated
public static Class<?> loadClass(String name)
                                      throws MalformedURLException,
                                             ClassNotFoundException
Deprecated. replaced by loadClass(String,String) method
Loads the class with the specified name.

 This method delegates to loadClass(String,String),
 passing null as the first argument and
 name as the second argument.

Parameters:
name - the name of the class to load
Returns:
the Class object representing the loaded class
Throws:
MalformedURLException - if a provider-specific URL used
 to load classes is invalid
ClassNotFoundException - if a definition for the class
 could not be found at the codebase location
See Also:
loadClass(String,String)


"
RMIClassLoader,"loadClass(String codebase, String name)",static Class<?>,Loads a class from a codebase URL path.,"

loadClass
public static Class<?> loadClass(String codebase,
                                 String name)
                          throws MalformedURLException,
                                 ClassNotFoundException
Loads a class from a codebase URL path.

 This method delegates to the
 RMIClassLoaderSpi.loadClass(String,String,ClassLoader)
 method of the provider instance, passing codebase
 as the first argument, name as the second argument,
 and null as the third argument.

Parameters:
codebase - the list of URLs (separated by spaces) to load
 the class from, or null
name - the name of the class to load
Returns:
the Class object representing the loaded class
Throws:
MalformedURLException - if codebase is
 non-null and contains an invalid URL, or if
 codebase is null and a provider-specific
 URL used to load classes is invalid
ClassNotFoundException - if a definition for the class
 could not be found at the specified location
Since:
1.2


"
RMIClassLoader,"loadClass(String codebase, String name, ClassLoader defaultLoader)",static Class<?>,"Loads a class from a codebase URL path, optionally using the supplied loader.","

loadClass
public static Class<?> loadClass(String codebase,
                                 String name,
                                 ClassLoader defaultLoader)
                          throws MalformedURLException,
                                 ClassNotFoundException
Loads a class from a codebase URL path, optionally using the
 supplied loader.

 This method should be used when the caller would like to make
 available to the provider implementation an additional contextual
 class loader to consider, such as the loader of a caller on the
 stack.  Typically, a provider implementation will attempt to
 resolve the named class using the given defaultLoader,
 if specified, before attempting to resolve the class from the
 codebase URL path.

 This method delegates to the
 RMIClassLoaderSpi.loadClass(String,String,ClassLoader)
 method of the provider instance, passing codebase
 as the first argument, name as the second argument,
 and defaultLoader as the third argument.

Parameters:
codebase - the list of URLs (separated by spaces) to load
 the class from, or null
name - the name of the class to load
defaultLoader - additional contextual class loader
 to use, or null
Returns:
the Class object representing the loaded class
Throws:
MalformedURLException - if codebase is
 non-null and contains an invalid URL, or if
 codebase is null and a provider-specific
 URL used to load classes is invalid
ClassNotFoundException - if a definition for the class
 could not be found at the specified location
Since:
1.4


"
RMIClassLoader,"loadClass(URL codebase, String name)",static Class<?>,Loads a class from a codebase URL.,"

loadClass
public static Class<?> loadClass(URL codebase,
                                 String name)
                          throws MalformedURLException,
                                 ClassNotFoundException
Loads a class from a codebase URL.

 If codebase is null, then this method
 will behave the same as loadClass(String,String) with a
 null codebase and the given class name.

 This method delegates to the
 RMIClassLoaderSpi.loadClass(String,String,ClassLoader)
 method of the provider instance, passing the result of invoking
 URL.toString() on the given URL (or null if
 codebase is null) as the first argument,
 name as the second argument,
 and null as the third argument.

Parameters:
codebase - the URL to load the class from, or null
name - the name of the class to load
Returns:
the Class object representing the loaded class
Throws:
MalformedURLException - if codebase is
 null and a provider-specific URL used
 to load classes is invalid
ClassNotFoundException - if a definition for the class
 could not be found at the specified URL


"
RMIClassLoader,"loadProxyClass(String codebase, String[] interfaces, ClassLoader defaultLoader)",static Class<?>,Loads a dynamic proxy class (see Proxy) that implements a set of interfaces with the given names from a codebase URL path.,"

loadProxyClass
public static Class<?> loadProxyClass(String codebase,
                                      String[] interfaces,
                                      ClassLoader defaultLoader)
                               throws ClassNotFoundException,
                                      MalformedURLException
Loads a dynamic proxy class (see Proxy)
 that implements a set of interfaces with the given names
 from a codebase URL path.

 The interfaces will be resolved similar to classes loaded via
 the loadClass(String,String) method using the given
 codebase.

 This method delegates to the
 RMIClassLoaderSpi.loadProxyClass(String,String[],ClassLoader)
 method of the provider instance, passing codebase
 as the first argument, interfaces as the second argument,
 and defaultLoader as the third argument.

Parameters:
codebase - the list of URLs (space-separated) to load
 classes from, or null
interfaces - the names of the interfaces for the proxy class
 to implement
defaultLoader - additional contextual class loader
 to use, or null
Returns:
a dynamic proxy class that implements the named interfaces
Throws:
MalformedURLException - if codebase is
 non-null and contains an invalid URL, or
 if codebase is null and a provider-specific
 URL used to load classes is invalid
ClassNotFoundException - if a definition for one of
 the named interfaces could not be found at the specified location,
 or if creation of the dynamic proxy class failed (such as if
 Proxy.getProxyClass(ClassLoader,Class[])
 would throw an IllegalArgumentException for the given
 interface list)
Since:
1.4


"
RMIClassLoaderSpi,getClassAnnotation(Class<?> cl),abstract String,Provides the implementation for RMIClassLoader.getClassAnnotation(Class).,"

getClassAnnotation
public abstract String getClassAnnotation(Class<?> cl)
Provides the implementation for
 RMIClassLoader.getClassAnnotation(Class).

 Returns the annotation string (representing a location for
 the class definition) that RMI will use to annotate the class
 descriptor when marshalling objects of the given class.

Parameters:
cl - the class to obtain the annotation for
Returns:
a string to be used to annotate the given class when
 it gets marshalled, or null
Throws:
NullPointerException - if cl is null


"
RMIClassLoaderSpi,getClassLoader(String codebase),abstract ClassLoader,Provides the implementation for RMIClassLoader.getClassLoader(String).,"

getClassLoader
public abstract ClassLoader getClassLoader(String codebase)
                                    throws MalformedURLException
Provides the implementation for
 RMIClassLoader.getClassLoader(String).

 Returns a class loader that loads classes from the given codebase
 URL path.

 If there is a security manger, its checkPermission
 method will be invoked with a
 RuntimePermission(""getClassLoader"") permission;
 this could result in a SecurityException.
 The implementation of this method may also perform further security
 checks to verify that the calling context has permission to connect
 to all of the URLs in the codebase URL path.

Parameters:
codebase - the list of URLs (space-separated) from which
 the returned class loader will load classes from, or null
Returns:
a class loader that loads classes from the given codebase URL
 path
Throws:
MalformedURLException - if codebase is
 non-null and contains an invalid URL, or
 if codebase is null and a provider-specific
 URL used to identify the class loader is invalid
SecurityException - if there is a security manager and the
 invocation of its checkPermission method fails, or
 if the caller does not have permission to connect to all of the
 URLs in the codebase URL path


"
RMIClassLoaderSpi,"loadClass(String codebase, String name, ClassLoader defaultLoader)",abstract Class<?>,"Provides the implementation for RMIClassLoader.loadClass(URL,String), RMIClassLoader.loadClass(String,String), and RMIClassLoader.loadClass(String,String,ClassLoader).","

loadClass
public abstract Class<?> loadClass(String codebase,
                                   String name,
                                   ClassLoader defaultLoader)
                            throws MalformedURLException,
                                   ClassNotFoundException
Provides the implementation for
 RMIClassLoader.loadClass(URL,String),
 RMIClassLoader.loadClass(String,String), and
 RMIClassLoader.loadClass(String,String,ClassLoader).

 Loads a class from a codebase URL path, optionally using the
 supplied loader.

 Typically, a provider implementation will attempt to
 resolve the named class using the given defaultLoader,
 if specified, before attempting to resolve the class from the
 codebase URL path.

 An implementation of this method must either return a class
 with the given name or throw an exception.

Parameters:
codebase - the list of URLs (separated by spaces) to load
 the class from, or null
name - the name of the class to load
defaultLoader - additional contextual class loader
 to use, or null
Returns:
the Class object representing the loaded class
Throws:
MalformedURLException - if codebase is
 non-null and contains an invalid URL, or
 if codebase is null and a provider-specific
 URL used to load classes is invalid
ClassNotFoundException - if a definition for the class
 could not be found at the specified location


"
RMIClassLoaderSpi,"loadProxyClass(String codebase, String[] interfaces, ClassLoader defaultLoader)",abstract Class<?>,"Provides the implementation for RMIClassLoader.loadProxyClass(String,String[],ClassLoader).","

loadProxyClass
public abstract Class<?> loadProxyClass(String codebase,
                                        String[] interfaces,
                                        ClassLoader defaultLoader)
                                 throws MalformedURLException,
                                        ClassNotFoundException
Provides the implementation for
 RMIClassLoader.loadProxyClass(String,String[],ClassLoader).

 Loads a dynamic proxy class (see Proxy
 that implements a set of interfaces with the given names
 from a codebase URL path, optionally using the supplied loader.

 An implementation of this method must either return a proxy
 class that implements the named interfaces or throw an exception.

Parameters:
codebase - the list of URLs (space-separated) to load
 classes from, or null
interfaces - the names of the interfaces for the proxy class
 to implement
defaultLoader - additional contextual class loader
 to use, or null
Returns:
a dynamic proxy class that implements the named interfaces
Throws:
MalformedURLException - if codebase is
 non-null and contains an invalid URL, or
 if codebase is null and a provider-specific
 URL used to load classes is invalid
ClassNotFoundException - if a definition for one of
 the named interfaces could not be found at the specified location,
 or if creation of the dynamic proxy class failed (such as if
 Proxy.getProxyClass(ClassLoader,Class[])
 would throw an IllegalArgumentException for the given
 interface list)


"
RMISocketFactory,createServerSocket(int port),abstract ServerSocket,Create a server socket on the specified port (port 0 indicates an anonymous port).,"

createServerSocket
public abstract ServerSocket createServerSocket(int port)
                                         throws IOException
Create a server socket on the specified port (port 0 indicates
 an anonymous port).

Specified by:
createServerSocket in interface RMIServerSocketFactory
Parameters:
port - the port number
Returns:
the server socket on the specified port
Throws:
IOException - if an I/O error occurs during server socket
 creation
Since:
JDK1.1


"
RMISocketFactory,"createSocket(String host, int port)",abstract Socket,Creates a client socket connected to the specified host and port.,"

createSocket
public abstract Socket createSocket(String host,
                                    int port)
                             throws IOException
Creates a client socket connected to the specified host and port.

Specified by:
createSocket in interface RMIClientSocketFactory
Parameters:
host - the host name
port - the port number
Returns:
a socket connected to the specified host and port.
Throws:
IOException - if an I/O error occurs during socket creation
Since:
JDK1.1


"
RMISocketFactory,getDefaultSocketFactory(),static RMISocketFactory,Returns a reference to the default socket factory used by this RMI implementation.,"

getDefaultSocketFactory
public static RMISocketFactory getDefaultSocketFactory()
Returns a reference to the default socket factory used
 by this RMI implementation.  This will be the factory used
 by the RMI runtime when getSocketFactory
 returns null.

Returns:
the default RMI socket factory
Since:
JDK1.1


"
RMISocketFactory,getFailureHandler(),static RMIFailureHandler,Returns the handler for socket creation failure set by the setFailureHandler method.,"

getFailureHandler
public static RMIFailureHandler getFailureHandler()
Returns the handler for socket creation failure set by the
 setFailureHandler method.

Returns:
the failure handler
Since:
JDK1.1
See Also:
setFailureHandler(RMIFailureHandler)


"
RMISocketFactory,getSocketFactory(),static RMISocketFactory,Returns the socket factory set by the setSocketFactory method.,"

getSocketFactory
public static RMISocketFactory getSocketFactory()
Returns the socket factory set by the setSocketFactory
 method. Returns null if no socket factory has been
 set.

Returns:
the socket factory
Since:
JDK1.1
See Also:
setSocketFactory(RMISocketFactory)


"
RMISocketFactory,setFailureHandler(RMIFailureHandler fh),static void,Sets the failure handler to be called by the RMI runtime if server socket creation fails.,"

setFailureHandler
public static void setFailureHandler(RMIFailureHandler fh)
Sets the failure handler to be called by the RMI runtime if server
 socket creation fails.  By default, if no failure handler is installed
 and server socket creation fails, the RMI runtime does attempt to
 recreate the server socket.

 If there is a security manager, this method first calls
 the security manager's checkSetFactory method
 to ensure the operation is allowed.
 This could result in a SecurityException.

Parameters:
fh - the failure handler
Throws:
SecurityException - if a security manager exists and its
          checkSetFactory method doesn't allow the
          operation.
Since:
JDK1.1
See Also:
getFailureHandler(), 
RMIFailureHandler.failure(Exception)


"
RMISocketFactory,setSocketFactory(RMISocketFactory fac),static void,Set the global socket factory from which RMI gets sockets (if the remote object is not associated with a specific client and/or server socket factory).,"

setSocketFactory
public static void setSocketFactory(RMISocketFactory fac)
                             throws IOException
Set the global socket factory from which RMI gets sockets (if the
 remote object is not associated with a specific client and/or server
 socket factory). The RMI socket factory can only be set once. Note: The
 RMISocketFactory may only be set if the current security manager allows
 setting a socket factory; if disallowed, a SecurityException will be
 thrown.

Parameters:
fac - the socket factory
Throws:
IOException - if the RMI socket factory is already set
SecurityException - if a security manager exists and its
             checkSetFactory method doesn't allow the operation.
Since:
JDK1.1
See Also:
getSocketFactory(), 
SecurityManager.checkSetFactory()


"
UID,equals(Object obj),boolean,Compares the specified object with this UID for equality.,"

equals
public boolean equals(Object obj)
Compares the specified object with this UID for
 equality.

 This method returns true if and only if the
 specified object is a UID instance with the same
 unique, time, and count
 values as this one.

Overrides:
equals in class Object
Parameters:
obj - the object to compare this UID to
Returns:
true if the given object is equivalent to
 this one, and false otherwise
See Also:
Object.hashCode(), 
HashMap


"
UID,hashCode(),int,Returns the hash code value for this UID.,"

hashCode
public int hashCode()
Returns the hash code value for this UID.

Overrides:
hashCode in class Object
Returns:
the hash code value for this UID
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
UID,read(DataInput in),static UID,Constructs and returns a new UID instance by unmarshalling a binary representation from an DataInput instance.,"

read
public static UID read(DataInput in)
                throws IOException
Constructs and returns a new UID instance by
 unmarshalling a binary representation from an
 DataInput instance.

 Specifically, this method first invokes the given stream's
 DataInput.readInt() method to read a unique value,
 then it invoke's the stream's
 DataInput.readLong() method to read a time value,
 then it invoke's the stream's
 DataInput.readShort() method to read a count value,
 and then it creates and returns a new UID instance
 that contains the unique, time, and
 count values that were read from the stream.

Parameters:
in - the DataInput instance to read
 UID from
Returns:
unmarshalled UID instance
Throws:
IOException - if an I/O error occurs while performing
 this operation


"
UID,toString(),String,Returns a string representation of this UID.,"

toString
public String toString()
Returns a string representation of this UID.

Overrides:
toString in class Object
Returns:
a string representation of this UID


"
UID,write(DataOutput out),void,Marshals a binary representation of this UID to a DataOutput instance.,"

write
public void write(DataOutput out)
           throws IOException
Marshals a binary representation of this UID to
 a DataOutput instance.

 Specifically, this method first invokes the given stream's
 DataOutput.writeInt(int) method with this UID's
 unique value, then it invokes the stream's
 DataOutput.writeLong(long) method with this UID's
 time value, and then it invokes the stream's
 DataOutput.writeShort(int) method with this UID's
 count value.

Parameters:
out - the DataOutput instance to write
 this UID to
Throws:
IOException - if an I/O error occurs while performing
 this operation


"
UnicastRemoteObject,clone(),Object,Returns a clone of the remote object that is distinct from the original.,"

clone
public Object clone()
             throws CloneNotSupportedException
Returns a clone of the remote object that is distinct from
 the original.

Overrides:
clone in class Object
Returns:
the new remote object
Throws:
CloneNotSupportedException - if clone failed due to
 a RemoteException.
Since:
JDK1.1
See Also:
Cloneable


"
UnicastRemoteObject,exportObject(Remote obj),static RemoteStub,"Deprecated. This method is deprecated because it supports only static stubs. Use exportObject(Remote, port) or exportObject(Remote, port, csf, ssf) instead.","

exportObject
@Deprecated
public static RemoteStub exportObject(Remote obj)
                                           throws RemoteException
Deprecated. This method is deprecated because it supports only static stubs.
 Use exportObject(Remote, port) or
 exportObject(Remote, port, csf, ssf)
 instead.
Exports the remote object to make it available to receive incoming
 calls using an anonymous port. This method will always return a
 statically generated stub.

 The object is exported with a server socket
 created using the RMISocketFactory class.

Parameters:
obj - the remote object to be exported
Returns:
remote object stub
Throws:
RemoteException - if export fails
Since:
JDK1.1


"
UnicastRemoteObject,"exportObject(Remote obj, int port)",static Remote,"Exports the remote object to make it available to receive incoming calls, using the particular supplied port.","

exportObject
public static Remote exportObject(Remote obj,
                                  int port)
                           throws RemoteException
Exports the remote object to make it available to receive incoming
 calls, using the particular supplied port.

 The object is exported with a server socket
 created using the RMISocketFactory class.

Parameters:
obj - the remote object to be exported
port - the port to export the object on
Returns:
remote object stub
Throws:
RemoteException - if export fails
Since:
1.2


"
UnicastRemoteObject,"exportObject(Remote obj, int port, RMIClientSocketFactory csf, RMIServerSocketFactory ssf)",static Remote,"Exports the remote object to make it available to receive incoming calls, using a transport specified by the given socket factory.","

exportObject
public static Remote exportObject(Remote obj,
                                  int port,
                                  RMIClientSocketFactory csf,
                                  RMIServerSocketFactory ssf)
                           throws RemoteException
Exports the remote object to make it available to receive incoming
 calls, using a transport specified by the given socket factory.

 Either socket factory may be null, in which case
 the corresponding client or server socket creation method of
 RMISocketFactory is used instead.

Parameters:
obj - the remote object to be exported
port - the port to export the object on
csf - the client-side socket factory for making calls to the
 remote object
ssf - the server-side socket factory for receiving remote calls
Returns:
remote object stub
Throws:
RemoteException - if export fails
Since:
1.2


"
UnicastRemoteObject,"unexportObject(Remote obj, boolean force)",static boolean,"Removes the remote object, obj, from the RMI runtime.","

unexportObject
public static boolean unexportObject(Remote obj,
                                     boolean force)
                              throws NoSuchObjectException
Removes the remote object, obj, from the RMI runtime. If
 successful, the object can no longer accept incoming RMI calls.
 If the force parameter is true, the object is forcibly unexported
 even if there are pending calls to the remote object or the
 remote object still has calls in progress.  If the force
 parameter is false, the object is only unexported if there are
 no pending or in progress calls to the object.

Parameters:
obj - the remote object to be unexported
force - if true, unexports the object even if there are
 pending or in-progress calls; if false, only unexports the object
 if there are no pending or in-progress calls
Returns:
true if operation is successful, false otherwise
Throws:
NoSuchObjectException - if the remote object is not
 currently exported
Since:
1.2


"
