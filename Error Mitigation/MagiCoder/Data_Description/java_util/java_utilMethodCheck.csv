Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,AbstractCollection,1,boolean add(E e),True,Ensures that this collection contains the specified element (optional operation).,"

add
public boolean add(E e)
Ensures that this collection contains the specified element (optional
 operation).  Returns true if this collection changed as a
 result of the call.  (Returns false if this collection does
 not permit duplicates and already contains the specified element.)

 Collections that support this operation may place limitations on what
 elements may be added to this collection.  In particular, some
 collections will refuse to add null elements, and others will
 impose restrictions on the type of elements that may be added.
 Collection classes should clearly specify in their documentation any
 restrictions on what elements may be added.

 If a collection refuses to add a particular element for any reason
 other than that it already contains the element, it must throw
 an exception (rather than returning false).  This preserves
 the invariant that a collection always contains the specified element
 after this call returns.

 This implementation always throws an
 UnsupportedOperationException.

Specified by:
add in interface Collection<E>
Parameters:
e - element whose presence in this collection is to be ensured
Returns:
true if this collection changed as a result of the
         call
Throws:
UnsupportedOperationException - if the add operation
         is not supported by this collection
ClassCastException - if the class of the specified element
         prevents it from being added to this collection
NullPointerException - if the specified element is null and this
         collection does not permit null elements
IllegalArgumentException - if some property of the element
         prevents it from being added to this collection
IllegalStateException - if the element cannot be added at this
         time due to insertion restrictions


"
0,AbstractCollection,2,boolean addAll(Collection<? extends E> c),True,Adds all of the elements in the specified collection to this collection (optional operation).,"

addAll
public boolean addAll(Collection<? extends E> c)
Adds all of the elements in the specified collection to this collection
 (optional operation).  The behavior of this operation is undefined if
 the specified collection is modified while the operation is in progress.
 (This implies that the behavior of this call is undefined if the
 specified collection is this collection, and this collection is
 nonempty.)

 This implementation iterates over the specified collection, and adds
 each object returned by the iterator to this collection, in turn.

 Note that this implementation will throw an
 UnsupportedOperationException unless add is
 overridden (assuming the specified collection is non-empty).

Specified by:
addAll in interface Collection<E>
Parameters:
c - collection containing elements to be added to this collection
Returns:
true if this collection changed as a result of the call
Throws:
UnsupportedOperationException - if the addAll operation
         is not supported by this collection
ClassCastException - if the class of an element of the specified
         collection prevents it from being added to this collection
NullPointerException - if the specified collection contains a
         null element and this collection does not permit null elements,
         or if the specified collection is null
IllegalArgumentException - if some property of an element of the
         specified collection prevents it from being added to this
         collection
IllegalStateException - if not all the elements can be added at
         this time due to insertion restrictions
See Also:
add(Object)


"
0,AbstractCollection,3,void clear(),True,Removes all of the elements from this collection (optional operation).,"

clear
public void clear()
Removes all of the elements from this collection (optional operation).
 The collection will be empty after this method returns.

 This implementation iterates over this collection, removing each
 element using the Iterator.remove operation.  Most
 implementations will probably choose to override this method for
 efficiency.

 Note that this implementation will throw an
 UnsupportedOperationException if the iterator returned by this
 collection's iterator method does not implement the
 remove method and this collection is non-empty.

Specified by:
clear in interface Collection<E>
Throws:
UnsupportedOperationException - if the clear operation
         is not supported by this collection


"
0,AbstractCollection,4,boolean contains(Object o),True,Returns true if this collection contains the specified element.,"

contains
public boolean contains(Object o)
Returns true if this collection contains the specified element.
 More formally, returns true if and only if this collection
 contains at least one element e such that
 (o==null ? e==null : o.equals(e)).

 This implementation iterates over the elements in the collection,
 checking each element in turn for equality with the specified element.

Specified by:
contains in interface Collection<E>
Parameters:
o - element whose presence in this collection is to be tested
Returns:
true if this collection contains the specified
         element
Throws:
ClassCastException - if the type of the specified element
         is incompatible with this collection
         (optional)
NullPointerException - if the specified element is null and this
         collection does not permit null elements
         (optional)


"
0,AbstractCollection,5,boolean containsAll(Collection<?> c),True,Returns true if this collection contains all of the elements in the specified collection.,"

containsAll
public boolean containsAll(Collection<?> c)
Returns true if this collection contains all of the elements
 in the specified collection.

 This implementation iterates over the specified collection,
 checking each element returned by the iterator in turn to see
 if it's contained in this collection.  If all elements are so
 contained true is returned, otherwise false.

Specified by:
containsAll in interface Collection<E>
Parameters:
c - collection to be checked for containment in this collection
Returns:
true if this collection contains all of the elements
         in the specified collection
Throws:
ClassCastException - if the types of one or more elements
         in the specified collection are incompatible with this
         collection
         (optional)
NullPointerException - if the specified collection contains one
         or more null elements and this collection does not permit null
         elements
         (optional),
         or if the specified collection is null.
See Also:
contains(Object)


"
1,AbstractList,1,boolean add(E e),True,Appends the specified element to the end of this list (optional operation).,"

add
public boolean add(E e)
Appends the specified element to the end of this list (optional
 operation).

 Lists that support this operation may place limitations on what
 elements may be added to this list.  In particular, some
 lists will refuse to add null elements, and others will impose
 restrictions on the type of elements that may be added.  List
 classes should clearly specify in their documentation any restrictions
 on what elements may be added.

 This implementation calls add(size(), e).

 Note that this implementation throws an
 UnsupportedOperationException unless
 add(int, E) is overridden.

Specified by:
add in interface Collection<E>
Specified by:
add in interface List<E>
Overrides:
add in class AbstractCollection<E>
Parameters:
e - element to be appended to this list
Returns:
true (as specified by Collection.add(E))
Throws:
UnsupportedOperationException - if the add operation
         is not supported by this list
ClassCastException - if the class of the specified element
         prevents it from being added to this list
NullPointerException - if the specified element is null and this
         list does not permit null elements
IllegalArgumentException - if some property of this element
         prevents it from being added to this list


"
1,AbstractList,2,E get(int index),True,Returns the element at the specified position in this list.,"

get
public abstract E get(int index)
Returns the element at the specified position in this list.

Specified by:
get in interface List<E>
Parameters:
index - index of the element to return
Returns:
the element at the specified position in this list
Throws:
IndexOutOfBoundsException - if the index is out of range
         (index < 0 || index >= size())


"
1,AbstractList,3,"E set(int index, E element)",True,Replaces the element at the specified position in this list with the specified element (optional operation).,"

set
public E set(int index,
             E element)
Replaces the element at the specified position in this list with the
 specified element (optional operation).

 This implementation always throws an
 UnsupportedOperationException.

Specified by:
set in interface List<E>
Parameters:
index - index of the element to replace
element - element to be stored at the specified position
Returns:
the element previously at the specified position
Throws:
UnsupportedOperationException - if the set operation
         is not supported by this list
ClassCastException - if the class of the specified element
         prevents it from being added to this list
NullPointerException - if the specified element is null and
         this list does not permit null elements
IllegalArgumentException - if some property of the specified
         element prevents it from being added to this list
IndexOutOfBoundsException - if the index is out of range
         (index < 0 || index >= size())


"
1,AbstractList,4,int size(),False,,NULL
1,AbstractList,5,boolean isEmpty(),False,,NULL
2,AbstractMap,1,"AbstractMap.SimpleEntry<K,V> entry(K key, V value)",False,,NULL
2,AbstractMap,2,boolean equals(Object o),True,Compares the specified object with this map for equality.,"

equals
public boolean equals(Object o)
Compares the specified object with this map for equality.  Returns
 true if the given object is also a map and the two maps
 represent the same mappings.  More formally, two maps m1 and
 m2 represent the same mappings if
 m1.entrySet().equals(m2.entrySet()).  This ensures that the
 equals method works properly across different implementations
 of the Map interface.

Specified by:
equals in interface Map<K,V>
Overrides:
equals in class Object
Implementation Requirements:
This implementation first checks if the specified object is this map;
 if so it returns true.  Then, it checks if the specified
 object is a map whose size is identical to the size of this map; if
 not, it returns false.  If so, it iterates over this map's
 entrySet collection, and checks that the specified map
 contains each mapping that this map contains.  If the specified map
 fails to contain such a mapping, false is returned.  If the
 iteration completes, true is returned.
Parameters:
o - object to be compared for equality with this map
Returns:
true if the specified object is equal to this map
See Also:
Object.hashCode(), 
HashMap


"
2,AbstractMap,3,int hashCode(),True,Returns the hash code value for this map.,"

hashCode
public int hashCode()
Returns the hash code value for this map.  The hash code of a map is
 defined to be the sum of the hash codes of each entry in the map's
 entrySet() view.  This ensures that m1.equals(m2)
 implies that m1.hashCode()==m2.hashCode() for any two maps
 m1 and m2, as required by the general contract of
 Object.hashCode().

Specified by:
hashCode in interface Map<K,V>
Overrides:
hashCode in class Object
Implementation Requirements:
This implementation iterates over entrySet(), calling
 hashCode() on each element (entry) in the
 set, and adding up the results.
Returns:
the hash code value for this map
See Also:
Map.Entry.hashCode(), 
Object.equals(Object), 
Set.equals(Object)


"
2,AbstractMap,4,boolean isEmpty(),True,Returns true if this map contains no key-value mappings.,"

isEmpty
public boolean isEmpty()
Returns true if this map contains no key-value mappings.

Specified by:
isEmpty in interface Map<K,V>
Implementation Requirements:
This implementation returns size() == 0.
Returns:
true if this map contains no key-value mappings


"
2,AbstractMap,5,"Set<Map.Entry<K,V>> entrySet()",True,Returns a Set view of the mappings contained in this map.,"

entrySet
public abstract Set<Map.Entry<K,V>> entrySet()
Description copied from interface: Map
Returns a Set view of the mappings contained in this map.
 The set is backed by the map, so changes to the map are
 reflected in the set, and vice-versa.  If the map is modified
 while an iteration over the set is in progress (except through
 the iterator's own remove operation, or through the
 setValue operation on a map entry returned by the
 iterator) the results of the iteration are undefined.  The set
 supports element removal, which removes the corresponding
 mapping from the map, via the Iterator.remove,
 Set.remove, removeAll, retainAll and
 clear operations.  It does not support the
 add or addAll operations.

Specified by:
entrySet in interface Map<K,V>
Returns:
a set view of the mappings contained in this map


"
3,AbstractMap.SimpleEntry,1,boolean equals(Object o),True,Compares the specified object with this entry for equality.,"

equals
public boolean equals(Object o)
Compares the specified object with this entry for equality.
 Returns true if the given object is also a map entry and
 the two entries represent the same mapping.  More formally, two
 entries e1 and e2 represent the same mapping
 if
   (e1.getKey()==null ?
    e2.getKey()==null :
    e1.getKey().equals(e2.getKey()))
   &&
   (e1.getValue()==null ?
    e2.getValue()==null :
    e1.getValue().equals(e2.getValue()))
 This ensures that the equals method works properly across
 different implementations of the Map.Entry interface.

Specified by:
equals in interface Map.Entry<K,V>
Overrides:
equals in class Object
Parameters:
o - object to be compared for equality with this map entry
Returns:
true if the specified object is equal to this map
         entry
See Also:
hashCode()


"
3,AbstractMap.SimpleEntry,2,int hashCode(),True,Returns the hash code value for this map entry.,"

hashCode
public int hashCode()
Returns the hash code value for this map entry.  The hash code
 of a map entry e is defined to be: 
   (e.getKey()==null   ? 0 : e.getKey().hashCode()) ^
   (e.getValue()==null ? 0 : e.getValue().hashCode())
 This ensures that e1.equals(e2) implies that
 e1.hashCode()==e2.hashCode() for any two Entries
 e1 and e2, as required by the general
 contract of Object.hashCode().

Specified by:
hashCode in interface Map.Entry<K,V>
Overrides:
hashCode in class Object
Returns:
the hash code value for this map entry
See Also:
equals(java.lang.Object)


"
3,AbstractMap.SimpleEntry,3,E getKey(),False,,NULL
3,AbstractMap.SimpleEntry,4,E getValue(),False,,NULL
3,AbstractMap.SimpleEntry,5,E setValue(E value),False,,NULL
4,AbstractMap.SimpleImmutableEntry,1,V getValue(),True,Returns the value corresponding to this entry.,"

getValue
public V getValue()
Returns the value corresponding to this entry.

Specified by:
getValue in interface Map.Entry<K,V>
Returns:
the value corresponding to this entry


"
4,AbstractMap.SimpleImmutableEntry,2,K getKey(),True,Returns the key corresponding to this entry.,"

getKey
public K getKey()
Returns the key corresponding to this entry.

Specified by:
getKey in interface Map.Entry<K,V>
Returns:
the key corresponding to this entry


"
4,AbstractMap.SimpleImmutableEntry,3,V setValue(V value),True,Replaces the value corresponding to this entry with the specified value (optional operation).,"

setValue
public V setValue(V value)
Replaces the value corresponding to this entry with the specified
 value (optional operation).  This implementation simply throws
 UnsupportedOperationException, as this class implements
 an immutable map entry.

Specified by:
setValue in interface Map.Entry<K,V>
Parameters:
value - new value to be stored in this entry
Returns:
(Does not return)
Throws:
UnsupportedOperationException - always


"
4,AbstractMap.SimpleImmutableEntry,4,boolean equals(Object o),True,Compares the specified object with this entry for equality.,"

equals
public boolean equals(Object o)
Compares the specified object with this entry for equality.
 Returns true if the given object is also a map entry and
 the two entries represent the same mapping.  More formally, two
 entries e1 and e2 represent the same mapping
 if
   (e1.getKey()==null ?
    e2.getKey()==null :
    e1.getKey().equals(e2.getKey()))
   &&
   (e1.getValue()==null ?
    e2.getValue()==null :
    e1.getValue().equals(e2.getValue()))
 This ensures that the equals method works properly across
 different implementations of the Map.Entry interface.

Specified by:
equals in interface Map.Entry<K,V>
Overrides:
equals in class Object
Parameters:
o - object to be compared for equality with this map entry
Returns:
true if the specified object is equal to this map
         entry
See Also:
hashCode()


"
4,AbstractMap.SimpleImmutableEntry,5,int hashCode(),True,Returns the hash code value for this map entry.,"

hashCode
public int hashCode()
Returns the hash code value for this map entry.  The hash code
 of a map entry e is defined to be: 
   (e.getKey()==null   ? 0 : e.getKey().hashCode()) ^
   (e.getValue()==null ? 0 : e.getValue().hashCode())
 This ensures that e1.equals(e2) implies that
 e1.hashCode()==e2.hashCode() for any two Entries
 e1 and e2, as required by the general
 contract of Object.hashCode().

Specified by:
hashCode in interface Map.Entry<K,V>
Overrides:
hashCode in class Object
Returns:
the hash code value for this map entry
See Also:
equals(java.lang.Object)


"
5,AbstractQueue,1,boolean add(E e),True,"Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available.","

add
public boolean add(E e)
Inserts the specified element into this queue if it is possible to do so
 immediately without violating capacity restrictions, returning
 true upon success and throwing an IllegalStateException
 if no space is currently available.

 This implementation returns true if offer succeeds,
 else throws an IllegalStateException.

Specified by:
add in interface Collection<E>
Specified by:
add in interface Queue<E>
Overrides:
add in class AbstractCollection<E>
Parameters:
e - the element to add
Returns:
true (as specified by Collection.add(E))
Throws:
IllegalStateException - if the element cannot be added at this
         time due to capacity restrictions
ClassCastException - if the class of the specified element
         prevents it from being added to this queue
NullPointerException - if the specified element is null and
         this queue does not permit null elements
IllegalArgumentException - if some property of this element
         prevents it from being added to this queue


"
5,AbstractQueue,2,E remove(),True,Retrieves and removes the head of this queue.,"

remove
public E remove()
Retrieves and removes the head of this queue.  This method differs
 from poll only in that it throws an exception if this
 queue is empty.

 This implementation returns the result of poll
 unless the queue is empty.

Specified by:
remove in interface Queue<E>
Returns:
the head of this queue
Throws:
NoSuchElementException - if this queue is empty


"
5,AbstractQueue,3,E peek(),False,,NULL
5,AbstractQueue,4,boolean offer(E e),False,,NULL
5,AbstractQueue,5,E poll(),False,,NULL
6,AbstractSequentialList,1,E get(int index),True,Returns the element at the specified position in this list.,"

get
public E get(int index)
Returns the element at the specified position in this list.

 This implementation first gets a list iterator pointing to the
 indexed element (with listIterator(index)).  Then, it gets
 the element using ListIterator.next and returns it.

Specified by:
get in interface List<E>
Specified by:
get in class AbstractList<E>
Parameters:
index - index of the element to return
Returns:
the element at the specified position in this list
Throws:
IndexOutOfBoundsException - if the index is out of range
         (index < 0 || index >= size())


"
6,AbstractSequentialList,2,"E set(int index, E element)",True,Replaces the element at the specified position in this list with the specified element (optional operation).,"

set
public E set(int index,
             E element)
Replaces the element at the specified position in this list with the
 specified element (optional operation).

 This implementation first gets a list iterator pointing to the
 indexed element (with listIterator(index)).  Then, it gets
 the current element using ListIterator.next and replaces it
 with ListIterator.set.

 Note that this implementation will throw an
 UnsupportedOperationException if the list iterator does not
 implement the set operation.

Specified by:
set in interface List<E>
Overrides:
set in class AbstractList<E>
Parameters:
index - index of the element to replace
element - element to be stored at the specified position
Returns:
the element previously at the specified position
Throws:
UnsupportedOperationException - if the set operation
         is not supported by this list
ClassCastException - if the class of the specified element
         prevents it from being added to this list
NullPointerException - if the specified element is null and
         this list does not permit null elements
IllegalArgumentException - if some property of the specified
         element prevents it from being added to this list
IndexOutOfBoundsException - if the index is out of range
         (index < 0 || index >= size())


"
6,AbstractSequentialList,3,"void add(int index, E element)",True,Inserts the specified element at the specified position in this list (optional operation).,"

add
public void add(int index,
                E element)
Inserts the specified element at the specified position in this list
 (optional operation).  Shifts the element currently at that position
 (if any) and any subsequent elements to the right (adds one to their
 indices).

 This implementation first gets a list iterator pointing to the
 indexed element (with listIterator(index)).  Then, it
 inserts the specified element with ListIterator.add.

 Note that this implementation will throw an
 UnsupportedOperationException if the list iterator does not
 implement the add operation.

Specified by:
add in interface List<E>
Overrides:
add in class AbstractList<E>
Parameters:
index - index at which the specified element is to be inserted
element - element to be inserted
Throws:
UnsupportedOperationException - if the add operation
         is not supported by this list
ClassCastException - if the class of the specified element
         prevents it from being added to this list
NullPointerException - if the specified element is null and
         this list does not permit null elements
IllegalArgumentException - if some property of the specified
         element prevents it from being added to this list
IndexOutOfBoundsException - if the index is out of range
         (index < 0 || index > size())


"
6,AbstractSequentialList,4,E remove(int index),True,Removes the element at the specified position in this list (optional operation).,"

remove
public E remove(int index)
Removes the element at the specified position in this list (optional
 operation).  Shifts any subsequent elements to the left (subtracts one
 from their indices).  Returns the element that was removed from the
 list.

 This implementation first gets a list iterator pointing to the
 indexed element (with listIterator(index)).  Then, it removes
 the element with ListIterator.remove.

 Note that this implementation will throw an
 UnsupportedOperationException if the list iterator does not
 implement the remove operation.

Specified by:
remove in interface List<E>
Overrides:
remove in class AbstractList<E>
Parameters:
index - the index of the element to be removed
Returns:
the element previously at the specified position
Throws:
UnsupportedOperationException - if the remove operation
         is not supported by this list
IndexOutOfBoundsException - if the index is out of range
         (index < 0 || index >= size())


"
6,AbstractSequentialList,5,int size(),False,,NULL
7,AbstractSet,1,boolean add(E e),False,,NULL
7,AbstractSet,2,boolean addAll(Collection<? extends E> c),False,,NULL
7,AbstractSet,3,void clear(),False,,NULL
7,AbstractSet,4,boolean contains(Object o),False,,NULL
7,AbstractSet,5,boolean isEmpty(),False,,NULL
8,ArrayDeque,1,boolean add(E e),True,Inserts the specified element at the end of this deque.,"

add
public boolean add(E e)
Inserts the specified element at the end of this deque.

 This method is equivalent to addLast(E).

Specified by:
add in interface Collection<E>
Specified by:
add in interface Deque<E>
Specified by:
add in interface Queue<E>
Overrides:
add in class AbstractCollection<E>
Parameters:
e - the element to add
Returns:
true (as specified by Collection.add(E))
Throws:
NullPointerException - if the specified element is null


"
8,ArrayDeque,2,boolean offer(E e),True,Inserts the specified element at the end of this deque.,"

offer
public boolean offer(E e)
Inserts the specified element at the end of this deque.

 This method is equivalent to offerLast(E).

Specified by:
offer in interface Deque<E>
Specified by:
offer in interface Queue<E>
Parameters:
e - the element to add
Returns:
true (as specified by Queue.offer(E))
Throws:
NullPointerException - if the specified element is null


"
8,ArrayDeque,3,boolean offerFirst(E e),True,Inserts the specified element at the front of this deque.,"

offerFirst
public boolean offerFirst(E e)
Inserts the specified element at the front of this deque.

Specified by:
offerFirst in interface Deque<E>
Parameters:
e - the element to add
Returns:
true (as specified by Deque.offerFirst(E))
Throws:
NullPointerException - if the specified element is null


"
8,ArrayDeque,4,boolean offerLast(E e),True,Inserts the specified element at the end of this deque.,"

offerLast
public boolean offerLast(E e)
Inserts the specified element at the end of this deque.

Specified by:
offerLast in interface Deque<E>
Parameters:
e - the element to add
Returns:
true (as specified by Deque.offerLast(E))
Throws:
NullPointerException - if the specified element is null


"
8,ArrayDeque,5,E remove(),True,Retrieves and removes the head of the queue represented by this deque.,"

remove
public E remove()
Retrieves and removes the head of the queue represented by this deque.

 This method differs from poll only in that it throws an
 exception if this deque is empty.

 This method is equivalent to removeFirst().

Specified by:
remove in interface Deque<E>
Specified by:
remove in interface Queue<E>
Returns:
the head of the queue represented by this deque
Throws:
NoSuchElementException - if this deque is empty


"
9,ArrayList,1,boolean add(E e),True,Appends the specified element to the end of this list.,"

add
public boolean add(E e)
Appends the specified element to the end of this list.

Specified by:
add in interface Collection<E>
Specified by:
add in interface List<E>
Overrides:
add in class AbstractList<E>
Parameters:
e - element to be appended to this list
Returns:
true (as specified by Collection.add(E))


"
9,ArrayList,2,"void add(int index, E element)",True,Inserts the specified element at the specified position in this list.,"

add
public void add(int index,
                E element)
Inserts the specified element at the specified position in this
 list. Shifts the element currently at that position (if any) and
 any subsequent elements to the right (adds one to their indices).

Specified by:
add in interface List<E>
Overrides:
add in class AbstractList<E>
Parameters:
index - index at which the specified element is to be inserted
element - element to be inserted
Throws:
IndexOutOfBoundsException - if the index is out of range
         (index < 0 || index > size())


"
9,ArrayList,3,boolean addAll(Collection<? extends E> c),True,"Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator.","

addAll
public boolean addAll(Collection<? extends E> c)
Appends all of the elements in the specified collection to the end of
 this list, in the order that they are returned by the
 specified collection's Iterator.  The behavior of this operation is
 undefined if the specified collection is modified while the operation
 is in progress.  (This implies that the behavior of this call is
 undefined if the specified collection is this list, and this
 list is nonempty.)

Specified by:
addAll in interface Collection<E>
Specified by:
addAll in interface List<E>
Overrides:
addAll in class AbstractCollection<E>
Parameters:
c - collection containing elements to be added to this list
Returns:
true if this list changed as a result of the call
Throws:
NullPointerException - if the specified collection is null
See Also:
AbstractCollection.add(Object)


"
9,ArrayList,4,E get(int index),True,Returns the element at the specified position in this list.,"

get
public E get(int index)
Returns the element at the specified position in this list.

Specified by:
get in interface List<E>
Specified by:
get in class AbstractList<E>
Parameters:
index - index of the element to return
Returns:
the element at the specified position in this list
Throws:
IndexOutOfBoundsException - if the index is out of range
         (index < 0 || index >= size())


"
9,ArrayList,5,E remove(int index),True,Removes the element at the specified position in this list.,"

remove
public E remove(int index)
Removes the element at the specified position in this list.
 Shifts any subsequent elements to the left (subtracts one from their
 indices).

Specified by:
remove in interface List<E>
Overrides:
remove in class AbstractList<E>
Parameters:
index - the index of the element to be removed
Returns:
the element that was removed from the list
Throws:
IndexOutOfBoundsException - if the index is out of range
         (index < 0 || index >= size())


"
10,Arrays,1,"boolean equals(Object a, Object b)",False,,NULL
10,Arrays,2,"void fill(int[] a, int val)",True,Assigns the specified int value to each element of the specified array of ints.,"

fill
public static void fill(int[] a,
                        int val)
Assigns the specified int value to each element of the specified array
 of ints.

Parameters:
a - the array to be filled
val - the value to be stored in all elements of the array


"
10,Arrays,3,void sort(int[] a),True,Sorts the specified array into ascending numerical order.,"

sort
public static void sort(int[] a)
Sorts the specified array into ascending numerical order.

 Implementation note: The sorting algorithm is a Dual-Pivot Quicksort
 by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm
 offers O(n log(n)) performance on many data sets that cause other
 quicksorts to degrade to quadratic performance, and is typically
 faster than traditional (one-pivot) Quicksort implementations.

Parameters:
a - the array to be sorted


"
10,Arrays,4,"int binarySearch(int[] a, int key)",True,Searches the specified array of ints for the specified value using the binary search algorithm.,"

binarySearch
public static int binarySearch(int[] a,
                               int key)
Searches the specified array of ints for the specified value using the
 binary search algorithm.  The array must be sorted (as
 by the sort(int[]) method) prior to making this call.  If it
 is not sorted, the results are undefined.  If the array contains
 multiple elements with the specified value, there is no guarantee which
 one will be found.

Parameters:
a - the array to be searched
key - the value to be searched for
Returns:
index of the search key, if it is contained in the array;
         otherwise, (-(insertion point) - 1).  The
         insertion point is defined as the point at which the
         key would be inserted into the array: the index of the first
         element greater than the key, or a.length if all
         elements in the array are less than the specified key.  Note
         that this guarantees that the return value will be >= 0 if
         and only if the key is found.


"
10,Arrays,5,int hashCode(Object a),False,,NULL
11,Base64,1,byte[] getDecoder().decode(String s),False,,NULL
11,Base64,2,"byte[] getDecoder().decode(String s, int off, int len)",False,,NULL
11,Base64,3,String getEncoder().encodeToString(byte[] src),False,,NULL
11,Base64,4,byte[] getEncoder().encode(byte[] src),False,,NULL
11,Base64,5,"byte[] getEncoder().encode(byte[] src, int off, int len)",False,,NULL
12,Base64.Decoder,1,Base64.Decoder getDecoder(),False,,NULL
12,Base64.Decoder,2,byte[] decode(String s),True,Decodes a Base64 encoded String into a newly-allocated byte array using the Base64 encoding scheme.,"

decode
public byte[] decode(String src)
Decodes a Base64 encoded String into a newly-allocated byte array
 using the Base64 encoding scheme.

  An invocation of this method has exactly the same effect as invoking
 decode(src.getBytes(StandardCharsets.ISO_8859_1))

Parameters:
src - the string to decode
Returns:
A newly-allocated byte array containing the decoded bytes.
Throws:
IllegalArgumentException - if src is not in valid Base64 scheme


"
12,Base64.Decoder,3,byte[] decodeBuffer(String s),False,,NULL
12,Base64.Decoder,4,"byte[] decodeBuffer(byte[] src, int offset, int len)",False,,NULL
12,Base64.Decoder,5,byte[] decode(byte[] src),True,"Decodes all bytes from the input byte array using the Base64 encoding scheme, writing the results into a newly-allocated output byte array.","

decode
public byte[] decode(byte[] src)
Decodes all bytes from the input byte array using the Base64
 encoding scheme, writing the results into a newly-allocated output
 byte array. The returned byte array is of the length of the resulting
 bytes.

Parameters:
src - the byte array to decode
Returns:
A newly-allocated byte array containing the decoded bytes.
Throws:
IllegalArgumentException - if src is not in valid Base64 scheme


"
13,Base64.Encoder,1,Base64.Encoder getInstance(),False,,NULL
13,Base64.Encoder,2,byte[] encode(byte[] src),True,Encodes all bytes from the specified byte array into a newly-allocated byte array using the Base64 encoding scheme.,"

encode
public byte[] encode(byte[] src)
Encodes all bytes from the specified byte array into a newly-allocated
 byte array using the Base64 encoding scheme. The returned byte
 array is of the length of the resulting bytes.

Parameters:
src - the byte array to encode
Returns:
A newly-allocated byte array containing the resulting
          encoded bytes.


"
13,Base64.Encoder,3,"byte[] encode(byte[] src, int off, int len)",False,,NULL
13,Base64.Encoder,4,"int encode(byte[] src, OutputStream out)",False,,NULL
13,Base64.Encoder,5,"int encode(byte[] src, int off, int len, OutputStream out)",False,,NULL
14,BitSet,1,boolean get(int index),True,Returns the value of the bit with the specified index.,"

get
public boolean get(int bitIndex)
Returns the value of the bit with the specified index. The value
 is true if the bit with the index bitIndex
 is currently set in this BitSet; otherwise, the result
 is false.

Parameters:
bitIndex - the bit index
Returns:
the value of the bit with the specified index
Throws:
IndexOutOfBoundsException - if the specified index is negative


"
14,BitSet,2,void set(int index),True,Sets the bit at the specified index to true.,"

set
public void set(int bitIndex)
Sets the bit at the specified index to true.

Parameters:
bitIndex - a bit index
Throws:
IndexOutOfBoundsException - if the specified index is negative
Since:
JDK1.0


"
14,BitSet,3,void clear(int index),True,Sets the bit specified by the index to false.,"

clear
public void clear(int bitIndex)
Sets the bit specified by the index to false.

Parameters:
bitIndex - the index of the bit to be cleared
Throws:
IndexOutOfBoundsException - if the specified index is negative
Since:
JDK1.0


"
14,BitSet,4,int cardinality(),True,Returns the number of bits set to true in this BitSet.,"

cardinality
public int cardinality()
Returns the number of bits set to true in this BitSet.

Returns:
the number of bits set to true in this BitSet
Since:
1.4


"
14,BitSet,5,int length(),True,"Returns the ""logical size"" of this BitSet: the index of the highest set bit in the BitSet plus one.","

length
public int length()
Returns the ""logical size"" of this BitSet: the index of
 the highest set bit in the BitSet plus one. Returns zero
 if the BitSet contains no set bits.

Returns:
the logical size of this BitSet
Since:
1.2


"
15,Calendar,1,int get(int field),True,Returns the value of the given calendar field.,"

get
public int get(int field)
Returns the value of the given calendar field. In lenient mode,
 all calendar fields are normalized. In non-lenient mode, all
 calendar fields are validated and this method throws an
 exception if any calendar fields have out-of-range values. The
 normalization and validation are handled by the
 complete() method, which process is calendar
 system dependent.

Parameters:
field - the given calendar field.
Returns:
the value for the given calendar field.
Throws:
ArrayIndexOutOfBoundsException - if the specified field is out of range
             (field < 0 || field >= FIELD_COUNT).
See Also:
set(int,int), 
complete()


"
15,Calendar,2,"void set(int year, int month, int date)",True,"Sets the values for the calendar fields YEAR, MONTH, and DAY_OF_MONTH.","

set
public final void set(int year,
                      int month,
                      int date)
Sets the values for the calendar fields YEAR,
 MONTH, and DAY_OF_MONTH.
 Previous values of other calendar fields are retained.  If this is not desired,
 call clear() first.

Parameters:
year - the value used to set the YEAR calendar field.
month - the value used to set the MONTH calendar field.
 Month value is 0-based. e.g., 0 for January.
date - the value used to set the DAY_OF_MONTH calendar field.
See Also:
set(int,int), 
set(int,int,int,int,int), 
set(int,int,int,int,int,int)


"
15,Calendar,3,"void add(int field, int amount)",True,"Adds or subtracts the specified amount of time to the given calendar field, based on the calendar's rules.","

add
public abstract void add(int field,
                         int amount)
Adds or subtracts the specified amount of time to the given calendar field,
 based on the calendar's rules. For example, to subtract 5 days from
 the current time of the calendar, you can achieve it by calling:
 add(Calendar.DAY_OF_MONTH, -5).

Parameters:
field - the calendar field.
amount - the amount of date or time to be added to the field.
See Also:
roll(int,int), 
set(int,int)


"
15,Calendar,4,"void roll(int field, boolean up)",True,Adds or subtracts (up/down) a single unit of time on the given time field without changing larger fields.,"

roll
public abstract void roll(int field,
                          boolean up)
Adds or subtracts (up/down) a single unit of time on the given time
 field without changing larger fields. For example, to roll the current
 date up by one day, you can achieve it by calling:
 roll(Calendar.DATE, true).
 When rolling on the year or Calendar.YEAR field, it will roll the year
 value in the range between 1 and the value returned by calling
 getMaximum(Calendar.YEAR).
 When rolling on the month or Calendar.MONTH field, other fields like
 date might conflict and, need to be changed. For instance,
 rolling the month on the date 01/31/96 will result in 02/29/96.
 When rolling on the hour-in-day or Calendar.HOUR_OF_DAY field, it will
 roll the hour value in the range between 0 and 23, which is zero-based.

Parameters:
field - the time field.
up - indicates if the value of the specified time field is to be
 rolled up or rolled down. Use true if rolling up, false otherwise.
See Also:
add(int,int), 
set(int,int)


"
15,Calendar,5,Date getTime(),True,"Returns a Date object representing this Calendar's time value (millisecond offset from the Epoch"").","

getTime
public final Date getTime()
Returns a Date object representing this
 Calendar's time value (millisecond offset from the Epoch"").

Returns:
a Date representing the time value.
See Also:
setTime(Date), 
getTimeInMillis()


"
16,Calendar.Builder,1,"Calendar.Builder setDate(int year, int month, int date)",True,"Sets the date field parameters to the values given by year, month, and dayOfMonth.","

setDate
public Calendar.Builder setDate(int year,
                                int month,
                                int dayOfMonth)
Sets the date field parameters to the values given by year,
 month, and dayOfMonth. This method is equivalent to
 a call to:
 
   setFields(Calendar.YEAR, year,
             Calendar.MONTH, month,
             Calendar.DAY_OF_MONTH, dayOfMonth);

Parameters:
year - the YEAR value
month - the MONTH value
                   (the month numbering is 0-based).
dayOfMonth - the DAY_OF_MONTH value
Returns:
this Calendar.Builder


"
16,Calendar.Builder,2,"Calendar.Builder setTime(int hourOfDay, int minute, int second)",False,,NULL
16,Calendar.Builder,3,Calendar.Builder setTimeZone(TimeZone value),True,Sets the time zone parameter to the given zone.,"

setTimeZone
public Calendar.Builder setTimeZone(TimeZone zone)
Sets the time zone parameter to the given zone. If no time
 zone parameter is given to this Caledar.Builder, the
 default
 TimeZone will be used in the build
 method.

Parameters:
zone - the TimeZone
Returns:
this Calendar.Builder
Throws:
NullPointerException - if zone is null
See Also:
Calendar.setTimeZone(TimeZone)


"
16,Calendar.Builder,4,"Calendar.Builder setWeekDate(int weekYear, int weekOfYear, int dayOfWeek)",True,"Sets the week-based date parameters to the values with the given date specifiers - week year, week of year, and day of week.","

setWeekDate
public Calendar.Builder setWeekDate(int weekYear,
                                    int weekOfYear,
                                    int dayOfWeek)
Sets the week-based date parameters to the values with the given
 date specifiers - week year, week of year, and day of week.

 If the specified calendar doesn't support week dates, the
 build method will throw an IllegalArgumentException.

Parameters:
weekYear - the week year
weekOfYear - the week number based on weekYear
dayOfWeek - the day of week value: one of the constants
     for the DAY_OF_WEEK field:
     SUNDAY, ..., SATURDAY.
Returns:
this Calendar.Builder
See Also:
Calendar.setWeekDate(int, int, int), 
Calendar.isWeekDateSupported()


"
16,Calendar.Builder,5,Calendar.Builder setWeekYear(int weekYear),False,,NULL
17,Collections,1,boolean add(E e),False,,NULL
17,Collections,2,void addAll(Collection<? extends E> c),False,,NULL
17,Collections,3,void copy(List<? super E> dest),False,,NULL
17,Collections,4,void sort(List<E> list),False,,NULL
17,Collections,5,void shuffle(List<?> list),True,Randomly permutes the specified list using a default source of randomness.,"

shuffle
public static void shuffle(List<?> list)
Randomly permutes the specified list using a default source of
 randomness.  All permutations occur with approximately equal
 likelihood.

 The hedge ""approximately"" is used in the foregoing description because
 default source of randomness is only approximately an unbiased source
 of independently chosen bits. If it were a perfect source of randomly
 chosen bits, then the algorithm would choose permutations with perfect
 uniformity.

 This implementation traverses the list backwards, from the last
 element up to the second, repeatedly swapping a randomly selected element
 into the ""current position"".  Elements are randomly selected from the
 portion of the list that runs from the first element to the current
 position, inclusive.

 This method runs in linear time.  If the specified list does not
 implement the RandomAccess interface and is large, this
 implementation dumps the specified list into an array before shuffling
 it, and dumps the shuffled array back into the list.  This avoids the
 quadratic behavior that would result from shuffling a ""sequential
 access"" list in place.

Parameters:
list - the list to be shuffled.
Throws:
UnsupportedOperationException - if the specified list or
         its list-iterator does not support the set operation.


"
18,Currency,1,Currency getInstance(String currencyCode),True,Returns the Currency instance for the given currency code.,"

getInstance
public static Currency getInstance(String currencyCode)
Returns the Currency instance for the given currency code.

Parameters:
currencyCode - the ISO 4217 code of the currency
Returns:
the Currency instance for the given currency code
Throws:
NullPointerException - if currencyCode is null
IllegalArgumentException - if currencyCode is not
 a supported ISO 4217 code.


"
18,Currency,2,String getCurrencyCode(),True,Gets the ISO 4217 currency code of this currency.,"

getCurrencyCode
public String getCurrencyCode()
Gets the ISO 4217 currency code of this currency.

Returns:
the ISO 4217 currency code of this currency.


"
18,Currency,3,String getDisplayName(),True,Gets the name that is suitable for displaying this currency for the default DISPLAY locale.,"

getDisplayName
public String getDisplayName()
Gets the name that is suitable for displaying this currency for
 the default DISPLAY locale.
 If there is no suitable display name found
 for the default locale, the ISO 4217 currency code is returned.
 
 This is equivalent to calling
 getDisplayName(Locale.getDefault(Locale.Category.DISPLAY)).

Returns:
the display name of this currency for the default
     DISPLAY locale
Since:
1.7


"
18,Currency,4,String getSymbol(),True,Gets the symbol of this currency for the default DISPLAY locale.,"

getSymbol
public String getSymbol()
Gets the symbol of this currency for the default
 DISPLAY locale.
 For example, for the US Dollar, the symbol is ""$"" if the default
 locale is the US, while for other locales it may be ""US$"". If no
 symbol can be determined, the ISO 4217 currency code is returned.
 
 This is equivalent to calling
 getSymbol(Locale.getDefault(Locale.Category.DISPLAY)).

Returns:
the symbol of this currency for the default
     DISPLAY locale


"
18,Currency,5,int getDefaultFractionDigits(),True,Gets the default number of fraction digits used with this currency.,"

getDefaultFractionDigits
public int getDefaultFractionDigits()
Gets the default number of fraction digits used with this currency.
 For example, the default number of fraction digits for the Euro is 2,
 while for the Japanese Yen it's 0.
 In the case of pseudo-currencies, such as IMF Special Drawing Rights,
 -1 is returned.

Returns:
the default number of fraction digits used with this currency


"
19,Date,1,Date(),False,,NULL
19,Date,2,getTime(),False,,NULL
19,Date,3,setTime(long time),False,,NULL
19,Date,4,compareTo(Date anotherDate),False,,NULL
19,Date,5,after(Date when),False,,NULL
19,Date,6,before(Date when),False,,NULL
19,Date,7,equals(Object obj),False,,NULL
19,Date,8,hashCode(),False,,NULL
19,Date,9,clone(),False,,NULL
19,Date,10,toString(),False,,NULL
20,Dictionary,1,boolean contains(Object o),False,,NULL
20,Dictionary,2,Enumeration elements(),False,,NULL
20,Dictionary,3,Object get(Object key),False,,NULL
20,Dictionary,4,"Object put(Object key, Object value)",False,,NULL
20,Dictionary,5,Object remove(Object key),False,,NULL
21,DoubleSummaryStatistics,1,double getCount(),False,,NULL
21,DoubleSummaryStatistics,2,double getSum(),True,"Returns the sum of values recorded, or zero if no values have been recorded.","

getSum
public final double getSum()
Returns the sum of values recorded, or zero if no values have been
 recorded.

 If any recorded value is a NaN or the sum is at any point a NaN
 then the sum will be NaN.

  The value of a floating-point sum is a function both of the
 input values as well as the order of addition operations. The
 order of addition operations of this method is intentionally
 not defined to allow for implementation flexibility to improve
 the speed and accuracy of the computed result.

 In particular, this method may be implemented using compensated
 summation or other technique to reduce the error bound in the
 numerical sum compared to a simple summation of double
 values.

API Note:
Values sorted by increasing absolute magnitude tend to yield
 more accurate results.
Returns:
the sum of values, or zero if none


"
21,DoubleSummaryStatistics,3,double getMin(),True,"Returns the minimum recorded value, Double.NaN if any recorded value was NaN or Double.POSITIVE_INFINITY if no values were recorded.","

getMin
public final double getMin()
Returns the minimum recorded value, Double.NaN if any recorded
 value was NaN or Double.POSITIVE_INFINITY if no values were
 recorded. Unlike the numerical comparison operators, this method
 considers negative zero to be strictly smaller than positive zero.

Returns:
the minimum recorded value, Double.NaN if any recorded
 value was NaN or Double.POSITIVE_INFINITY if no values were
 recorded


"
21,DoubleSummaryStatistics,4,double getMax(),True,"Returns the maximum recorded value, Double.NaN if any recorded value was NaN or Double.NEGATIVE_INFINITY if no values were recorded.","

getMax
public final double getMax()
Returns the maximum recorded value, Double.NaN if any recorded
 value was NaN or Double.NEGATIVE_INFINITY if no values were
 recorded. Unlike the numerical comparison operators, this method
 considers negative zero to be strictly smaller than positive zero.

Returns:
the maximum recorded value, Double.NaN if any recorded
 value was NaN or Double.NEGATIVE_INFINITY if no values were
 recorded


"
21,DoubleSummaryStatistics,5,double getAverage(),True,"Returns the arithmetic mean of values recorded, or zero if no values have been recorded.","

getAverage
public final double getAverage()
Returns the arithmetic mean of values recorded, or zero if no
 values have been recorded.

 If any recorded value is a NaN or the sum is at any point a NaN
 then the average will be code NaN.

 The average returned can vary depending upon the order in
 which values are recorded.

 This method may be implemented using compensated summation or
 other technique to reduce the error bound in the numerical sum used to compute the average.

API Note:
Values sorted by increasing absolute magnitude tend to yield
 more accurate results.
Returns:
the arithmetic mean of values, or zero if none


"
22,EnumMap,1,boolean containsKey(Object key),True,Returns true if this map contains a mapping for the specified key.,"

containsKey
public boolean containsKey(Object key)
Returns true if this map contains a mapping for the specified
 key.

Specified by:
containsKey in interface Map<K extends Enum<K>,V>
Overrides:
containsKey in class AbstractMap<K extends Enum<K>,V>
Parameters:
key - the key whose presence in this map is to be tested
Returns:
true if this map contains a mapping for the specified
            key


"
22,EnumMap,2,boolean containsValue(Object value),True,Returns true if this map maps one or more keys to the specified value.,"

containsValue
public boolean containsValue(Object value)
Returns true if this map maps one or more keys to the
 specified value.

Specified by:
containsValue in interface Map<K extends Enum<K>,V>
Overrides:
containsValue in class AbstractMap<K extends Enum<K>,V>
Parameters:
value - the value whose presence in this map is to be tested
Returns:
true if this map maps one or more keys to this value


"
22,EnumMap,3,"Set<Map.Entry<K,V>> entrySet()",True,Returns a Set view of the mappings contained in this map.,"

entrySet
public Set<Map.Entry<K,V>> entrySet()
Returns a Set view of the mappings contained in this map.
 The returned set obeys the general contract outlined in
 Map.keySet().  The set's iterator will return the
 mappings in the order their keys appear in map, which is their
 natural order (the order in which the enum constants are declared).

Specified by:
entrySet in interface Map<K extends Enum<K>,V>
Specified by:
entrySet in class AbstractMap<K extends Enum<K>,V>
Returns:
a set view of the mappings contained in this enum map


"
22,EnumMap,4,V get(Object key),True,"Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.","

get
public V get(Object key)
Returns the value to which the specified key is mapped,
 or null if this map contains no mapping for the key.

 More formally, if this map contains a mapping from a key
 k to a value v such that (key == k),
 then this method returns v; otherwise it returns
 null.  (There can be at most one such mapping.)

 A return value of null does not necessarily
 indicate that the map contains no mapping for the key; it's also
 possible that the map explicitly maps the key to null.
 The containsKey operation may be used to
 distinguish these two cases.

Specified by:
get in interface Map<K extends Enum<K>,V>
Overrides:
get in class AbstractMap<K extends Enum<K>,V>
Parameters:
key - the key whose associated value is to be returned
Returns:
the value to which the specified key is mapped, or
         null if this map contains no mapping for the key


"
22,EnumMap,5,boolean isEmpty(),False,,NULL
23,EnumSet,1,<E extends Enum<E>> EnumSet<E> allOf(Class<E> elementType),False,,NULL
23,EnumSet,2,<E extends Enum<E>> EnumSet<E> noneOf(Class<E> elementType),False,,NULL
23,EnumSet,3,"<E extends Enum<E>> EnumSet<E> range(E from, E to)",False,,NULL
23,EnumSet,4,"<E extends Enum<E>> EnumSet<E> of(E e1, E... eN)",False,,NULL
23,EnumSet,5,boolean add(E e),False,,NULL
24,EventListenerProxy,1,boolean add(E e),False,,NULL
24,EventListenerProxy,2,boolean addAll(Collection<? extends E> c),False,,NULL
24,EventListenerProxy,3,void clear(),False,,NULL
24,EventListenerProxy,4,boolean contains(Object o),False,,NULL
24,EventListenerProxy,5,boolean containsAll(Collection<?> c),False,,NULL
25,EventObject,1,EventObject(Object source),False,,NULL
25,EventObject,2,Object getSource(),True,The object on which the Event initially occurred.,"

getSource
public Object getSource()
The object on which the Event initially occurred.

Returns:
The object on which the Event initially occurred.


"
25,EventObject,3,void setSource(Object source),False,,NULL
25,EventObject,4,String toString(),True,Returns a String representation of this EventObject.,"

toString
public String toString()
Returns a String representation of this EventObject.

Overrides:
toString in class Object
Returns:
A a String representation of this EventObject.


"
25,EventObject,5,boolean equals(Object obj),False,,NULL
26,FormattableFlags,1,boolean isPadded(),False,,NULL
26,FormattableFlags,2,boolean isLeftJustified(),False,,NULL
26,FormattableFlags,3,boolean isZeroPadded(),False,,NULL
26,FormattableFlags,4,boolean isComplemented(),False,,NULL
26,FormattableFlags,5,boolean isAlternate(),False,,NULL
27,Formatter,1,Formatter(OutputStream out),False,,NULL
27,Formatter,2,"Formatter(OutputStream out, Locale l)",False,,NULL
27,Formatter,3,Formatter(Writer out),False,,NULL
27,Formatter,4,"Formatter(Writer out, Locale l)",False,,NULL
27,Formatter,5,Formatter(StringBuilder sb),False,,NULL
27,Formatter,6,"Formatter(StringBuilder sb, Locale l)",False,,NULL
27,Formatter,7,Formatter(StringBuffer sb),False,,NULL
27,Formatter,8,"Formatter(StringBuffer sb, Locale l)",False,,NULL
27,Formatter,9,Formatter(Appendable out),False,,NULL
27,Formatter,10,"Formatter(Appendable out, Locale l)",False,,NULL
27,Formatter,11,Formatter(PrintStream out),False,,NULL
27,Formatter,12,"Formatter(PrintStream out, Locale l)",False,,NULL
27,Formatter,13,Formatter(PrintWriter out),False,,NULL
27,Formatter,14,"Formatter(PrintWriter out, Locale l)",False,,NULL
27,Formatter,15,"Formatter(OutputStream out, String encoding)",False,,NULL
27,Formatter,16,"Formatter(Writer out, String encoding)",False,,NULL
27,Formatter,17,"Formatter(StringBuilder sb, String encoding)",False,,NULL
27,Formatter,18,"Formatter(StringBuffer sb, String encoding)",False,,NULL
27,Formatter,19,"Formatter(Appendable out, String encoding)",False,,NULL
27,Formatter,20,"Formatter(PrintStream out, String encoding)",False,,NULL
27,Formatter,21,"Formatter(PrintWriter out, String encoding)",False,,NULL
28,GregorianCalendar,1,int get(int field),False,,NULL
28,GregorianCalendar,2,"void set(int year, int month, int date)",False,,NULL
28,GregorianCalendar,3,"void add(int field, int amount)",True,"Adds the specified (signed) amount of time to the given calendar field, based on the calendar's rules.","

add
public void add(int field,
                int amount)
Adds the specified (signed) amount of time to the given calendar field,
 based on the calendar's rules.

 Add rule 1. The value of field
 after the call minus the value of field before the
 call is amount, modulo any overflow that has occurred in
 field. Overflow occurs when a field value exceeds its
 range and, as a result, the next larger field is incremented or
 decremented and the field value is adjusted back into its range.
Add rule 2. If a smaller field is expected to be
 invariant, but it is impossible for it to be equal to its
 prior value because of changes in its minimum or maximum after
 field is changed, then its value is adjusted to be as close
 as possible to its expected value. A smaller field represents a
 smaller unit of time. HOUR is a smaller field than
 DAY_OF_MONTH. No adjustment is made to smaller fields
 that are not expected to be invariant. The calendar system
 determines what fields are expected to be invariant.

Specified by:
add in class Calendar
Parameters:
field - the calendar field.
amount - the amount of date or time to be added to the field.
Throws:
IllegalArgumentException - if field is
 ZONE_OFFSET, DST_OFFSET, or unknown,
 or if any calendar fields have out-of-range values in
 non-lenient mode.
See Also:
Calendar.roll(int,int), 
Calendar.set(int,int)


"
28,GregorianCalendar,4,Date getTime(),False,,NULL
28,GregorianCalendar,5,void setTime(Date date),False,,NULL
29,HashMap,1,boolean containsKey(Object key),True,Returns true if this map contains a mapping for the specified key.,"

containsKey
public boolean containsKey(Object key)
Returns true if this map contains a mapping for the
 specified key.

Specified by:
containsKey in interface Map<K,V>
Overrides:
containsKey in class AbstractMap<K,V>
Parameters:
key - The key whose presence in this map is to be tested
Returns:
true if this map contains a mapping for the specified
 key.


"
29,HashMap,2,V get(Object key),True,"Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.","

get
public V get(Object key)
Returns the value to which the specified key is mapped,
 or null if this map contains no mapping for the key.

 More formally, if this map contains a mapping from a key
 k to a value v such that (key==null ? k==null :
 key.equals(k)), then this method returns v; otherwise
 it returns null.  (There can be at most one such mapping.)

 A return value of null does not necessarily
 indicate that the map contains no mapping for the key; it's also
 possible that the map explicitly maps the key to null.
 The containsKey operation may be used to
 distinguish these two cases.

Specified by:
get in interface Map<K,V>
Overrides:
get in class AbstractMap<K,V>
Parameters:
key - the key whose associated value is to be returned
Returns:
the value to which the specified key is mapped, or
         null if this map contains no mapping for the key
See Also:
put(Object, Object)


"
29,HashMap,3,"V put(K key, V value)",True,Associates the specified value with the specified key in this map.,"

put
public V put(K key,
             V value)
Associates the specified value with the specified key in this map.
 If the map previously contained a mapping for the key, the old
 value is replaced.

Specified by:
put in interface Map<K,V>
Overrides:
put in class AbstractMap<K,V>
Parameters:
key - key with which the specified value is to be associated
value - value to be associated with the specified key
Returns:
the previous value associated with key, or
         null if there was no mapping for key.
         (A null return can also indicate that the map
         previously associated null with key.)


"
29,HashMap,4,V remove(Object key),True,Removes the mapping for the specified key from this map if present.,"

remove
public V remove(Object key)
Removes the mapping for the specified key from this map if present.

Specified by:
remove in interface Map<K,V>
Overrides:
remove in class AbstractMap<K,V>
Parameters:
key - key whose mapping is to be removed from the map
Returns:
the previous value associated with key, or
         null if there was no mapping for key.
         (A null return can also indicate that the map
         previously associated null with key.)


"
29,HashMap,5,int size(),True,Returns the number of key-value mappings in this map.,"

size
public int size()
Returns the number of key-value mappings in this map.

Specified by:
size in interface Map<K,V>
Overrides:
size in class AbstractMap<K,V>
Returns:
the number of key-value mappings in this map


"
30,HashSet,1,boolean add(E e),True,Adds the specified element to this set if it is not already present.,"

add
public boolean add(E e)
Adds the specified element to this set if it is not already present.
 More formally, adds the specified element e to this set if
 this set contains no element e2 such that
 (e==null ? e2==null : e.equals(e2)).
 If this set already contains the element, the call leaves the set
 unchanged and returns false.

Specified by:
add in interface Collection<E>
Specified by:
add in interface Set<E>
Overrides:
add in class AbstractCollection<E>
Parameters:
e - element to be added to this set
Returns:
true if this set did not already contain the specified
 element


"
30,HashSet,2,void clear(),True,Removes all of the elements from this set.,"

clear
public void clear()
Removes all of the elements from this set.
 The set will be empty after this call returns.

Specified by:
clear in interface Collection<E>
Specified by:
clear in interface Set<E>
Overrides:
clear in class AbstractCollection<E>


"
30,HashSet,3,boolean contains(Object o),True,Returns true if this set contains the specified element.,"

contains
public boolean contains(Object o)
Returns true if this set contains the specified element.
 More formally, returns true if and only if this set
 contains an element e such that
 (o==null ? e==null : o.equals(e)).

Specified by:
contains in interface Collection<E>
Specified by:
contains in interface Set<E>
Overrides:
contains in class AbstractCollection<E>
Parameters:
o - element whose presence in this set is to be tested
Returns:
true if this set contains the specified element


"
30,HashSet,4,boolean isEmpty(),True,Returns true if this set contains no elements.,"

isEmpty
public boolean isEmpty()
Returns true if this set contains no elements.

Specified by:
isEmpty in interface Collection<E>
Specified by:
isEmpty in interface Set<E>
Overrides:
isEmpty in class AbstractCollection<E>
Returns:
true if this set contains no elements


"
30,HashSet,5,boolean remove(Object o),True,Removes the specified element from this set if it is present.,"

remove
public boolean remove(Object o)
Removes the specified element from this set if it is present.
 More formally, removes an element e such that
 (o==null ? e==null : o.equals(e)),
 if this set contains such an element.  Returns true if
 this set contained the element (or equivalently, if this set
 changed as a result of the call).  (This set will not contain the
 element once the call returns.)

Specified by:
remove in interface Collection<E>
Specified by:
remove in interface Set<E>
Overrides:
remove in class AbstractCollection<E>
Parameters:
o - object to be removed from this set, if present
Returns:
true if the set contained the specified element


"
31,Hashtable,1,boolean contains(Object value),True,Tests if some key maps into the specified value in this hashtable.,"

contains
public boolean contains(Object value)
Tests if some key maps into the specified value in this hashtable.
 This operation is more expensive than the containsKey method.

 Note that this method is identical in functionality to
 containsValue, (which is part of the
 Map interface in the collections framework).

Parameters:
value - a value to search for
Returns:
true if and only if some key maps to the
             value argument in this hashtable as
             determined by the equals method;
             false otherwise.
Throws:
NullPointerException - if the value is null


"
31,Hashtable,2,boolean containsAll(Collection<?> c),False,,NULL
31,Hashtable,3,Enumeration<E> elements(),False,,NULL
31,Hashtable,4,E get(Object key),False,,NULL
31,Hashtable,5,"E put(K key, V value)",False,,NULL
32,IdentityHashMap,1,boolean containsKey(Object key),True,Tests whether the specified object reference is a key in this identity hash map.,"

containsKey
public boolean containsKey(Object key)
Tests whether the specified object reference is a key in this identity
 hash map.

Specified by:
containsKey in interface Map<K,V>
Overrides:
containsKey in class AbstractMap<K,V>
Parameters:
key - possible key
Returns:
true if the specified object reference is a key
          in this map
See Also:
containsValue(Object)


"
32,IdentityHashMap,2,boolean containsValue(Object value),True,Tests whether the specified object reference is a value in this identity hash map.,"

containsValue
public boolean containsValue(Object value)
Tests whether the specified object reference is a value in this identity
 hash map.

Specified by:
containsValue in interface Map<K,V>
Overrides:
containsValue in class AbstractMap<K,V>
Parameters:
value - value whose presence in this map is to be tested
Returns:
true if this map maps one or more keys to the
         specified object reference
See Also:
containsKey(Object)


"
32,IdentityHashMap,3,"Set<Map.Entry<K,V>> entrySet()",True,Returns a Set view of the mappings contained in this map.,"

entrySet
public Set<Map.Entry<K,V>> entrySet()
Returns a Set view of the mappings contained in this map.
 Each element in the returned set is a reference-equality-based
 Map.Entry.  The set is backed by the map, so changes
 to the map are reflected in the set, and vice-versa.  If the
 map is modified while an iteration over the set is in progress,
 the results of the iteration are undefined.  The set supports
 element removal, which removes the corresponding mapping from
 the map, via the Iterator.remove, Set.remove,
 removeAll, retainAll and clear
 methods.  It does not support the add or
 addAll methods.

 Like the backing map, the Map.Entry objects in the set
 returned by this method define key and value equality as
 reference-equality rather than object-equality.  This affects the
 behavior of the equals and hashCode methods of these
 Map.Entry objects.  A reference-equality based Map.Entry
 e is equal to an object o if and only if o is a
 Map.Entry and e.getKey()==o.getKey() &&
 e.getValue()==o.getValue().  To accommodate these equals
 semantics, the hashCode method returns
 System.identityHashCode(e.getKey()) ^
 System.identityHashCode(e.getValue()).

 Owing to the reference-equality-based semantics of the
 Map.Entry instances in the set returned by this method,
 it is possible that the symmetry and transitivity requirements of
 the Object.equals(Object) contract may be violated if any of
 the entries in the set is compared to a normal map entry, or if
 the set returned by this method is compared to a set of normal map
 entries (such as would be returned by a call to this method on a normal
 map).  However, the Object.equals contract is guaranteed to
 hold among identity-based map entries, and among sets of such entries.
 

Specified by:
entrySet in interface Map<K,V>
Specified by:
entrySet in class AbstractMap<K,V>
Returns:
a set view of the identity-mappings contained in this map


"
32,IdentityHashMap,4,V get(Object key),True,"Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.","

get
public V get(Object key)
Returns the value to which the specified key is mapped,
 or null if this map contains no mapping for the key.

 More formally, if this map contains a mapping from a key
 k to a value v such that (key == k),
 then this method returns v; otherwise it returns
 null.  (There can be at most one such mapping.)

 A return value of null does not necessarily
 indicate that the map contains no mapping for the key; it's also
 possible that the map explicitly maps the key to null.
 The containsKey operation may be used to
 distinguish these two cases.

Specified by:
get in interface Map<K,V>
Overrides:
get in class AbstractMap<K,V>
Parameters:
key - the key whose associated value is to be returned
Returns:
the value to which the specified key is mapped, or
         null if this map contains no mapping for the key
See Also:
put(Object, Object)


"
32,IdentityHashMap,5,boolean isEmpty(),True,Returns true if this identity hash map contains no key-value mappings.,"

isEmpty
public boolean isEmpty()
Returns true if this identity hash map contains no key-value
 mappings.

Specified by:
isEmpty in interface Map<K,V>
Overrides:
isEmpty in class AbstractMap<K,V>
Returns:
true if this identity hash map contains no key-value
         mappings


"
32,IdentityHashMap,6,"V put(K key, V value)",True,Associates the specified value with the specified key in this identity hash map.,"

put
public V put(K key,
             V value)
Associates the specified value with the specified key in this identity
 hash map.  If the map previously contained a mapping for the key, the
 old value is replaced.

Specified by:
put in interface Map<K,V>
Overrides:
put in class AbstractMap<K,V>
Parameters:
key - the key with which the specified value is to be associated
value - the value to be associated with the specified key
Returns:
the previous value associated with key, or
         null if there was no mapping for key.
         (A null return can also indicate that the map
         previously associated null with key.)
See Also:
Object.equals(Object), 
get(Object), 
containsKey(Object)


"
32,IdentityHashMap,7,V remove(Object key),True,Removes the mapping for this key from this map if present.,"

remove
public V remove(Object key)
Removes the mapping for this key from this map if present.

Specified by:
remove in interface Map<K,V>
Overrides:
remove in class AbstractMap<K,V>
Parameters:
key - key whose mapping is to be removed from the map
Returns:
the previous value associated with key, or
         null if there was no mapping for key.
         (A null return can also indicate that the map
         previously associated null with key.)


"
32,IdentityHashMap,8,int size(),True,Returns the number of key-value mappings in this identity hash map.,"

size
public int size()
Returns the number of key-value mappings in this identity hash map.

Specified by:
size in interface Map<K,V>
Overrides:
size in class AbstractMap<K,V>
Returns:
the number of key-value mappings in this map


"
32,IdentityHashMap,9,void clear(),True,Removes all of the mappings from this map.,"

clear
public void clear()
Removes all of the mappings from this map.
 The map will be empty after this call returns.

Specified by:
clear in interface Map<K,V>
Overrides:
clear in class AbstractMap<K,V>


"
32,IdentityHashMap,10,boolean equals(Object o),True,Compares the specified object with this map for equality.,"

equals
public boolean equals(Object o)
Compares the specified object with this map for equality.  Returns
 true if the given object is also a map and the two maps
 represent identical object-reference mappings.  More formally, this
 map is equal to another map m if and only if
 this.entrySet().equals(m.entrySet()).

 Owing to the reference-equality-based semantics of this map it is
 possible that the symmetry and transitivity requirements of the
 Object.equals contract may be violated if this map is compared
 to a normal map.  However, the Object.equals contract is
 guaranteed to hold among IdentityHashMap instances.

Specified by:
equals in interface Map<K,V>
Overrides:
equals in class AbstractMap<K,V>
Parameters:
o - object to be compared for equality with this map
Returns:
true if the specified object is equal to this map
See Also:
Object.equals(Object)


"
32,IdentityHashMap,11,int hashCode(),True,Returns the hash code value for this map.,"

hashCode
public int hashCode()
Returns the hash code value for this map.  The hash code of a map is
 defined to be the sum of the hash codes of each entry in the map's
 entrySet() view.  This ensures that m1.equals(m2)
 implies that m1.hashCode()==m2.hashCode() for any two
 IdentityHashMap instances m1 and m2, as
 required by the general contract of Object.hashCode().

 Owing to the reference-equality-based semantics of the
 Map.Entry instances in the set returned by this map's
 entrySet method, it is possible that the contractual
 requirement of Object.hashCode mentioned in the previous
 paragraph will be violated if one of the two objects being compared is
 an IdentityHashMap instance and the other is a normal map.

Specified by:
hashCode in interface Map<K,V>
Overrides:
hashCode in class AbstractMap<K,V>
Returns:
the hash code value for this map
See Also:
Object.equals(Object), 
equals(Object)


"
32,IdentityHashMap,12,"boolean putIfAbsent(K key, V value)",False,,NULL
32,IdentityHashMap,13,"boolean replace(K key, V oldValue, V newValue)",False,,NULL
32,IdentityHashMap,14,"V replace(K key, V value)",False,,NULL
32,IdentityHashMap,15,"V merge(K key, V value, BiFunction<? super V,? super V,? extends V> remappingFunction)",False,,NULL
32,IdentityHashMap,16,"void forEach(BiConsumer<? super K,? super V> action)",True,Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.,"

forEach
public void forEach(BiConsumer<? super K,? super V> action)
Description copied from interface: Map
Performs the given action for each entry in this map until all entries
 have been processed or the action throws an exception.   Unless
 otherwise specified by the implementing class, actions are performed in
 the order of entry set iteration (if an iteration order is specified.)
 Exceptions thrown by the action are relayed to the caller.

Specified by:
forEach in interface Map<K,V>
Parameters:
action - The action to be performed for each entry


"
32,IdentityHashMap,17,Set<K> keySet(),True,Returns an identity-based set view of the keys contained in this map.,"

keySet
public Set<K> keySet()
Returns an identity-based set view of the keys contained in this map.
 The set is backed by the map, so changes to the map are reflected in
 the set, and vice-versa.  If the map is modified while an iteration
 over the set is in progress, the results of the iteration are
 undefined.  The set supports element removal, which removes the
 corresponding mapping from the map, via the Iterator.remove,
 Set.remove, removeAll, retainAll, and
 clear methods.  It does not support the add or
 addAll methods.

 While the object returned by this method implements the
 Set interface, it does not obey Set's general
 contract.  Like its backing map, the set returned by this method
 defines element equality as reference-equality rather than
 object-equality.  This affects the behavior of its contains,
 remove, containsAll, equals, and
 hashCode methods.
The equals method of the returned set returns true
 only if the specified object is a set containing exactly the same
 object references as the returned set.  The symmetry and transitivity
 requirements of the Object.equals contract may be violated if
 the set returned by this method is compared to a normal set.  However,
 the Object.equals contract is guaranteed to hold among sets
 returned by this method.
The hashCode method of the returned set returns the sum of
 the identity hashcodes of the elements in the set, rather than
 the sum of their hashcodes.  This is mandated by the change in the
 semantics of the equals method, in order to enforce the
 general contract of the Object.hashCode method among sets
 returned by this method.

Specified by:
keySet in interface Map<K,V>
Overrides:
keySet in class AbstractMap<K,V>
Returns:
an identity-based set view of the keys contained in this map
See Also:
Object.equals(Object), 
System.identityHashCode(Object)


"
32,IdentityHashMap,18,Collection<V> values(),True,Returns a Collection view of the values contained in this map.,"

values
public Collection<V> values()
Returns a Collection view of the values contained in this map.
 The collection is backed by the map, so changes to the map are
 reflected in the collection, and vice-versa.  If the map is
 modified while an iteration over the collection is in progress,
 the results of the iteration are undefined.  The collection
 supports element removal, which removes the corresponding
 mapping from the map, via the Iterator.remove,
 Collection.remove, removeAll,
 retainAll and clear methods.  It does not
 support the add or addAll methods.

 While the object returned by this method implements the
 Collection interface, it does not obey
 Collection's general contract.  Like its backing map,
 the collection returned by this method defines element equality as
 reference-equality rather than object-equality.  This affects the
 behavior of its contains, remove and
 containsAll methods.

Specified by:
values in interface Map<K,V>
Overrides:
values in class AbstractMap<K,V>
Returns:
a collection view of the values contained in this map


"
32,IdentityHashMap,19,boolean containsKey(Object key),True,Tests whether the specified object reference is a key in this identity hash map.,"

containsKey
public boolean containsKey(Object key)
Tests whether the specified object reference is a key in this identity
 hash map.

Specified by:
containsKey in interface Map<K,V>
Overrides:
containsKey in class AbstractMap<K,V>
Parameters:
key - possible key
Returns:
true if the specified object reference is a key
          in this map
See Also:
containsValue(Object)


"
32,IdentityHashMap,20,boolean containsValue(Object value),True,Tests whether the specified object reference is a value in this identity hash map.,"

containsValue
public boolean containsValue(Object value)
Tests whether the specified object reference is a value in this identity
 hash map.

Specified by:
containsValue in interface Map<K,V>
Overrides:
containsValue in class AbstractMap<K,V>
Parameters:
value - value whose presence in this map is to be tested
Returns:
true if this map maps one or more keys to the
         specified object reference
See Also:
containsKey(Object)


"
33,IntSummaryStatistics,1,long getCount(),True,Returns the count of values recorded.,"

getCount
public final long getCount()
Returns the count of values recorded.

Returns:
the count of values


"
33,IntSummaryStatistics,2,double getAverage(),True,"Returns the arithmetic mean of values recorded, or zero if no values have been recorded.","

getAverage
public final double getAverage()
Returns the arithmetic mean of values recorded, or zero if no values have been
 recorded.

Returns:
the arithmetic mean of values, or zero if none


"
33,IntSummaryStatistics,3,long getSum(),True,"Returns the sum of values recorded, or zero if no values have been recorded.","

getSum
public final long getSum()
Returns the sum of values recorded, or zero if no values have been
 recorded.

Returns:
the sum of values, or zero if none


"
33,IntSummaryStatistics,4,int getMin(),True,"Returns the minimum value recorded, or Integer.MAX_VALUE if no values have been recorded.","

getMin
public final int getMin()
Returns the minimum value recorded, or Integer.MAX_VALUE if no
 values have been recorded.

Returns:
the minimum value, or Integer.MAX_VALUE if none


"
33,IntSummaryStatistics,5,int getMax(),True,"Returns the maximum value recorded, or Integer.MIN_VALUE if no values have been recorded.","

getMax
public final int getMax()
Returns the maximum value recorded, or Integer.MIN_VALUE if no
 values have been recorded.

Returns:
the maximum value, or Integer.MIN_VALUE if none


"
34,LinkedHashMap,1,boolean containsKey(Object key),False,,NULL
34,LinkedHashMap,2,boolean containsValue(Object value),True,Returns true if this map maps one or more keys to the specified value.,"

containsValue
public boolean containsValue(Object value)
Returns true if this map maps one or more keys to the
 specified value.

Specified by:
containsValue in interface Map<K,V>
Overrides:
containsValue in class HashMap<K,V>
Parameters:
value - value whose presence in this map is to be tested
Returns:
true if this map maps one or more keys to the
         specified value


"
34,LinkedHashMap,3,V get(Object key),True,"Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.","

get
public V get(Object key)
Returns the value to which the specified key is mapped,
 or null if this map contains no mapping for the key.

 More formally, if this map contains a mapping from a key
 k to a value v such that (key==null ? k==null :
 key.equals(k)), then this method returns v; otherwise
 it returns null.  (There can be at most one such mapping.)

 A return value of null does not necessarily
 indicate that the map contains no mapping for the key; it's also
 possible that the map explicitly maps the key to null.
 The containsKey operation may be used to
 distinguish these two cases.

Specified by:
get in interface Map<K,V>
Overrides:
get in class HashMap<K,V>
Parameters:
key - the key whose associated value is to be returned
Returns:
the value to which the specified key is mapped, or
         null if this map contains no mapping for the key
See Also:
HashMap.put(Object, Object)


"
34,LinkedHashMap,4,"V put(K key, V value)",False,,NULL
34,LinkedHashMap,5,V remove(Object key),False,,NULL
35,LinkedHashSet,1,boolean add(E e),False,,NULL
35,LinkedHashSet,2,boolean addAll(Collection<? extends E> c),False,,NULL
35,LinkedHashSet,3,void clear(),False,,NULL
35,LinkedHashSet,4,boolean contains(Object o),False,,NULL
35,LinkedHashSet,5,boolean containsAll(Collection<?> c),False,,NULL
36,LinkedList,1,boolean add(E e),True,Appends the specified element to the end of this list.,"

add
public boolean add(E e)
Appends the specified element to the end of this list.

 This method is equivalent to addLast(E).

Specified by:
add in interface Collection<E>
Specified by:
add in interface Deque<E>
Specified by:
add in interface List<E>
Specified by:
add in interface Queue<E>
Overrides:
add in class AbstractList<E>
Parameters:
e - element to be appended to this list
Returns:
true (as specified by Collection.add(E))


"
36,LinkedList,2,"void add(int index, E element)",True,Inserts the specified element at the specified position in this list.,"

add
public void add(int index,
                E element)
Inserts the specified element at the specified position in this list.
 Shifts the element currently at that position (if any) and any
 subsequent elements to the right (adds one to their indices).

Specified by:
add in interface List<E>
Overrides:
add in class AbstractSequentialList<E>
Parameters:
index - index at which the specified element is to be inserted
element - element to be inserted
Throws:
IndexOutOfBoundsException - if the index is out of range
         (index < 0 || index > size())


"
36,LinkedList,3,boolean addAll(Collection<? extends E> c),True,"Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator.","

addAll
public boolean addAll(Collection<? extends E> c)
Appends all of the elements in the specified collection to the end of
 this list, in the order that they are returned by the specified
 collection's iterator.  The behavior of this operation is undefined if
 the specified collection is modified while the operation is in
 progress.  (Note that this will occur if the specified collection is
 this list, and it's nonempty.)

Specified by:
addAll in interface Collection<E>
Specified by:
addAll in interface List<E>
Overrides:
addAll in class AbstractCollection<E>
Parameters:
c - collection containing elements to be added to this list
Returns:
true if this list changed as a result of the call
Throws:
NullPointerException - if the specified collection is null
See Also:
AbstractCollection.add(Object)


"
36,LinkedList,4,E get(int index),True,Returns the element at the specified position in this list.,"

get
public E get(int index)
Returns the element at the specified position in this list.

Specified by:
get in interface List<E>
Overrides:
get in class AbstractSequentialList<E>
Parameters:
index - index of the element to return
Returns:
the element at the specified position in this list
Throws:
IndexOutOfBoundsException - if the index is out of range
         (index < 0 || index >= size())


"
36,LinkedList,5,E remove(int index),True,Removes the element at the specified position in this list.,"

remove
public E remove(int index)
Removes the element at the specified position in this list.  Shifts any
 subsequent elements to the left (subtracts one from their indices).
 Returns the element that was removed from the list.

Specified by:
remove in interface List<E>
Overrides:
remove in class AbstractSequentialList<E>
Parameters:
index - the index of the element to be removed
Returns:
the element previously at the specified position
Throws:
IndexOutOfBoundsException - if the index is out of range
         (index < 0 || index >= size())


"
37,ListResourceBundle,1,E getObject(String key),False,,NULL
37,ListResourceBundle,2,Enumeration<String> getKeys(),True,Returns an Enumeration of the keys contained in this ResourceBundle and its parent bundles.,"

getKeys
public Enumeration<String> getKeys()
Returns an Enumeration of the keys contained in
 this ResourceBundle and its parent bundles.

Specified by:
getKeys in class ResourceBundle
Returns:
an Enumeration of the keys contained in
         this ResourceBundle and its parent bundles.
See Also:
ResourceBundle.keySet()


"
37,ListResourceBundle,3,boolean containsKey(String key),False,,NULL
37,ListResourceBundle,4,Object[][] getContents(),True,Returns an array in which each item is a pair of objects in an Object array.,"

getContents
protected abstract Object[][] getContents()
Returns an array in which each item is a pair of objects in an
 Object array. The first element of each pair is
 the key, which must be a String, and the second
 element is the value associated with that key.  See the class
 description for details.

Returns:
an array of an Object array representing a
 key-value pair.


"
37,ListResourceBundle,5,String getString(String key),False,,NULL
38,Locale,1,"Locale(String language, String country)",False,,NULL
38,Locale,2,"Locale(String language, String country, String variant)",False,,NULL
38,Locale,3,Locale(String language),False,,NULL
38,Locale,4,String getDisplayCountry(Locale aLocale),True,Returns a name for the locale's country that is appropriate for display to the user.,"

getDisplayCountry
public String getDisplayCountry(Locale inLocale)
Returns a name for the locale's country that is appropriate for display to the
 user.
 If possible, the name returned will be localized according to inLocale.
 For example, if the locale is fr_FR and inLocale
 is en_US, getDisplayCountry() will return ""France""; if the locale is en_US and
 inLocale is fr_FR, getDisplayCountry() will return ""Etats-Unis"".
 If the name returned cannot be localized according to inLocale.
 (say, we don't have a Japanese name for Croatia),
 this function falls back on the English name, and finally
 on the ISO code as a last-resort value.  If the locale doesn't specify a country,
 this function returns the empty string.

Parameters:
inLocale - The locale for which to retrieve the display country.
Returns:
The name of the country appropriate to the given locale.
Throws:
NullPointerException - if inLocale is null


"
38,Locale,5,String getDisplayLanguage(Locale aLocale),True,Returns a name for the locale's language that is appropriate for display to the user.,"

getDisplayLanguage
public String getDisplayLanguage(Locale inLocale)
Returns a name for the locale's language that is appropriate for display to the
 user.
 If possible, the name returned will be localized according to inLocale.
 For example, if the locale is fr_FR and inLocale
 is en_US, getDisplayLanguage() will return ""French""; if the locale is en_US and
 inLocale is fr_FR, getDisplayLanguage() will return ""anglais"".
 If the name returned cannot be localized according to inLocale,
 (say, we don't have a Japanese name for Croatian),
 this function falls back on the English name, and finally
 on the ISO code as a last-resort value.  If the locale doesn't specify a language,
 this function returns the empty string.

Parameters:
inLocale - The locale for which to retrieve the display language.
Returns:
The name of the display language appropriate to the given locale.
Throws:
NullPointerException - if inLocale is null


"
38,Locale,6,String getDisplayName(Locale aLocale),True,Returns a name for the locale that is appropriate for display to the user.,"

getDisplayName
public String getDisplayName(Locale inLocale)
Returns a name for the locale that is appropriate for display
 to the user.  This will be the values returned by
 getDisplayLanguage(), getDisplayScript(),getDisplayCountry(),
 and getDisplayVariant() assembled into a single string.
 The non-empty values are used in order,
 with the second and subsequent names in parentheses.  For example:
 
 language (script, country, variant)
 language (country)
 language (variant)
 script (country)
 country

 depending on which fields are specified in the locale.  If the
 language, script, country, and variant fields are all empty,
 this function returns the empty string.

Parameters:
inLocale - The locale for which to retrieve the display name.
Returns:
The name of the locale appropriate to display.
Throws:
NullPointerException - if inLocale is null


"
38,Locale,7,String getDisplayVariant(Locale aLocale),True,Returns a name for the locale's variant code that is appropriate for display to the user.,"

getDisplayVariant
public String getDisplayVariant(Locale inLocale)
Returns a name for the locale's variant code that is appropriate for display to the
 user.  If possible, the name will be localized for inLocale.  If the locale
 doesn't specify a variant code, this function returns the empty string.

Parameters:
inLocale - The locale for which to retrieve the display variant code.
Returns:
The name of the display variant code appropriate to the given locale.
Throws:
NullPointerException - if inLocale is null


"
38,Locale,8,String getISO3Country(),True,Returns a three-letter abbreviation for this locale's country.,"

getISO3Country
public String getISO3Country()
                      throws MissingResourceException
Returns a three-letter abbreviation for this locale's country.
 If the country matches an ISO 3166-1 alpha-2 code, the
 corresponding ISO 3166-1 alpha-3 uppercase code is returned.
 If the locale doesn't specify a country, this will be the empty
 string.

 The ISO 3166-1 codes can be found on-line.

Returns:
A three-letter abbreviation of this locale's country.
Throws:
MissingResourceException - Throws MissingResourceException if the
 three-letter country abbreviation is not available for this locale.


"
38,Locale,9,String getISO3Language(),True,Returns a three-letter abbreviation of this locale's language.,"

getISO3Language
public String getISO3Language()
                       throws MissingResourceException
Returns a three-letter abbreviation of this locale's language.
 If the language matches an ISO 639-1 two-letter code, the
 corresponding ISO 639-2/T three-letter lowercase code is
 returned.  The ISO 639-2 language codes can be found on-line,
 see ""Codes for the Representation of Names of Languages Part 2:
 Alpha-3 Code"".  If the locale specifies a three-letter
 language, the language is returned as is.  If the locale does
 not specify a language the empty string is returned.

Returns:
A three-letter abbreviation of this locale's language.
Throws:
MissingResourceException - Throws MissingResourceException if
 three-letter language abbreviation is not available for this locale.


"
38,Locale,10,String getLanguage(),True,Returns the language code of this Locale.,"

getLanguage
public String getLanguage()
Returns the language code of this Locale.

 Note: ISO 639 is not a stable standard— some languages' codes have changed.
 Locale's constructor recognizes both the new and the old codes for the languages
 whose codes have changed, but this function always returns the old code.  If you
 want to check for a specific language whose code has changed, don't do
 
 if (locale.getLanguage().equals(""he"")) // BAD!
    ...
 
 Instead, do
 
 if (locale.getLanguage().equals(new Locale(""he"").getLanguage()))
    ...
 

Returns:
The language code, or the empty string if none is defined.
See Also:
getDisplayLanguage()


"
38,Locale,11,String getVariant(),True,Returns the variant code for this locale.,"

getVariant
public String getVariant()
Returns the variant code for this locale.

Returns:
The variant code, or the empty string if none is defined.
See Also:
getDisplayVariant()


"
38,Locale,12,String getCountry(),True,"Returns the country/region code for this locale, which should either be the empty string, an uppercase ISO 3166 2-letter code, or a UN M.49 3-digit code.","

getCountry
public String getCountry()
Returns the country/region code for this locale, which should
 either be the empty string, an uppercase ISO 3166 2-letter code,
 or a UN M.49 3-digit code.

Returns:
The country/region code, or the empty string if none is defined.
See Also:
getDisplayCountry()


"
38,Locale,13,boolean equals(Object obj),True,Returns true if this Locale is equal to another object.,"

equals
public boolean equals(Object obj)
Returns true if this Locale is equal to another object.  A Locale is
 deemed equal to another Locale with identical language, script, country,
 variant and extensions, and unequal to all other objects.

Overrides:
equals in class Object
Parameters:
obj - the reference object with which to compare.
Returns:
true if this Locale is equal to the specified object.
See Also:
Object.hashCode(), 
HashMap


"
38,Locale,14,int hashCode(),True,Override hashCode.,"

hashCode
public int hashCode()
Override hashCode.
 Since Locales are often used in hashtables, caches the value
 for speed.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
38,Locale,15,Locale[] getAvailableLocales(),True,Returns an array of all installed locales.,"

getAvailableLocales
public static Locale[] getAvailableLocales()
Returns an array of all installed locales.
 The returned array represents the union of locales supported
 by the Java runtime environment and by installed
 LocaleServiceProvider
 implementations.  It must contain at least a Locale
 instance equal to Locale.US.

Returns:
An array of installed locales.


"
38,Locale,16,Locale getDefault(),True,Gets the current value of the default locale for this instance of the Java Virtual Machine.,"

getDefault
public static Locale getDefault()
Gets the current value of the default locale for this instance
 of the Java Virtual Machine.
 
 The Java Virtual Machine sets the default locale during startup
 based on the host environment. It is used by many locale-sensitive
 methods if no locale is explicitly specified.
 It can be changed using the
 setDefault method.

Returns:
the default locale for this instance of the Java Virtual Machine


"
38,Locale,17,void setDefault(Locale newLocale),True,Sets the default locale for this instance of the Java Virtual Machine.,"

setDefault
public static void setDefault(Locale newLocale)
Sets the default locale for this instance of the Java Virtual Machine.
 This does not affect the host locale.
 
 If there is a security manager, its checkPermission
 method is called with a PropertyPermission(""user.language"", ""write"")
 permission before the default locale is changed.
 
 The Java Virtual Machine sets the default locale during startup
 based on the host environment. It is used by many locale-sensitive
 methods if no locale is explicitly specified.
 
 Since changing the default locale may affect many different areas
 of functionality, this method should only be used if the caller
 is prepared to reinitialize locale-sensitive code running
 within the same Java Virtual Machine.
 
 By setting the default locale with this method, all of the default
 locales for each Category are also set to the specified default locale.

Parameters:
newLocale - the new default locale
Throws:
SecurityException - if a security manager exists and its
        checkPermission method doesn't allow the operation.
NullPointerException - if newLocale is null
See Also:
SecurityManager.checkPermission(java.security.Permission), 
PropertyPermission


"
38,Locale,18,Locale forLanguageTag(String tag),True,Returns a locale for the specified IETF BCP 47 language tag string.,"

forLanguageTag
public static Locale forLanguageTag(String languageTag)
Returns a locale for the specified IETF BCP 47 language tag string.

 If the specified language tag contains any ill-formed subtags,
 the first such subtag and all following subtags are ignored.  Compare
 to Locale.Builder.setLanguageTag(java.lang.String) which throws an exception
 in this case.

 The following conversions are performed:
The language code ""und"" is mapped to language """".

 The language codes ""he"", ""yi"", and ""id"" are mapped to ""iw"",
 ""ji"", and ""in"" respectively. (This is the same canonicalization
 that's done in Locale's constructors.)

 The portion of a private use subtag prefixed by ""lvariant"",
 if any, is removed and appended to the variant field in the
 result locale (without case normalization).  If it is then
 empty, the private use subtag is discarded:

 
     Locale loc;
     loc = Locale.forLanguageTag(""en-US-x-lvariant-POSIX"");
     loc.getVariant(); // returns ""POSIX""
     loc.getExtension('x'); // returns null

     loc = Locale.forLanguageTag(""de-POSIX-x-URP-lvariant-Abc-Def"");
     loc.getVariant(); // returns ""POSIX_Abc_Def""
     loc.getExtension('x'); // returns ""urp""
 
When the languageTag argument contains an extlang subtag,
 the first such subtag is used as the language, and the primary
 language subtag and other extlang subtags are ignored:

 
     Locale.forLanguageTag(""ar-aao"").getLanguage(); // returns ""aao""
     Locale.forLanguageTag(""en-abc-def-us"").toString(); // returns ""abc_US""
 
Case is normalized except for variant tags, which are left
 unchanged.  Language is normalized to lower case, script to
 title case, country to upper case, and extensions to lower
 case.

 If, after processing, the locale would exactly match either
 ja_JP_JP or th_TH_TH with no extensions, the appropriate
 extensions are added as though the constructor had been called:

 
    Locale.forLanguageTag(""ja-JP-x-lvariant-JP"").toLanguageTag();
    // returns ""ja-JP-u-ca-japanese-x-lvariant-JP""
    Locale.forLanguageTag(""th-TH-x-lvariant-TH"").toLanguageTag();
    // returns ""th-TH-u-nu-thai-x-lvariant-TH""
 
This implements the 'Language-Tag' production of BCP47, and
 so supports grandfathered (regular and irregular) as well as
 private use language tags.  Stand alone private use tags are
 represented as empty language and extension 'x-whatever',
 and grandfathered tags are converted to their canonical replacements
 where they exist.

 Grandfathered tags with canonical replacements are as follows:

 

grandfathered tag modern replacement
art-lojban jbo
i-ami ami
i-bnn bnn
i-hak hak
i-klingon tlh
i-lux lb
i-navajo nv
i-pwn pwn
i-tao tao
i-tay tay
i-tsu tsu
no-bok nb
no-nyn nn
sgn-BE-FR sfb
sgn-BE-NL vgt
sgn-CH-DE sgg
zh-guoyu cmn
zh-hakka hak
zh-min-nan nan
zh-xiang hsn


Grandfathered tags with no modern replacement will be
 converted as follows:

 

grandfathered tag converts to
cel-gaulish xtg-x-cel-gaulish
en-GB-oed en-GB-x-oed
i-default en-x-i-default
i-enochian und-x-i-enochian
i-mingo see-x-i-mingo
zh-min nan-x-zh-min


For a list of all grandfathered tags, see the
 IANA Language Subtag Registry (search for ""Type: grandfathered"").

 Note: there is no guarantee that toLanguageTag
 and forLanguageTag will round-trip.

Parameters:
languageTag - the language tag
Returns:
The locale that best represents the language tag.
Throws:
NullPointerException - if languageTag is null
Since:
1.7
See Also:
toLanguageTag(), 
Locale.Builder.setLanguageTag(String)


"
38,Locale,19,"Locale forLanguageTag(String tag, Locale defaultLocale)",False,,NULL
38,Locale,20,"Locale forLanguageTag(String tag, Locale defaultLocale, Locale... availableLocales)",False,,NULL
39,Locale.Builder,1,Locale.Builder setLanguage(String language),True,Sets the language.,"

setLanguage
public Locale.Builder setLanguage(String language)
Sets the language.  If language is the empty string or
 null, the language in this Builder is removed.  Otherwise,
 the language must be well-formed
 or an exception is thrown.

 The typical language value is a two or three-letter language
 code as defined in ISO639.

Parameters:
language - the language
Returns:
This builder.
Throws:
IllformedLocaleException - if language is ill-formed


"
39,Locale.Builder,2,Locale.Builder setRegion(String region),True,Sets the region.,"

setRegion
public Locale.Builder setRegion(String region)
Sets the region.  If region is null or the empty string, the region
 in this Builder is removed.  Otherwise,
 the region must be well-formed or an
 exception is thrown.

 The typical region value is a two-letter ISO 3166 code or a
 three-digit UN M.49 area code.

 The country value in the Locale created by the
 Builder is always normalized to upper case.

Parameters:
region - the region
Returns:
This builder.
Throws:
IllformedLocaleException - if region is ill-formed


"
39,Locale.Builder,3,Locale.Builder setVariant(String variant),True,Sets the variant.,"

setVariant
public Locale.Builder setVariant(String variant)
Sets the variant.  If variant is null or the empty string, the
 variant in this Builder is removed.  Otherwise, it
 must consist of one or more well-formed
 subtags, or an exception is thrown.

 Note: This method checks if variant
 satisfies the IETF BCP 47 variant subtag's syntax requirements,
 and normalizes the value to lowercase letters.  However,
 the Locale class does not impose any syntactic
 restriction on variant, and the variant value in
 Locale is case sensitive.  To set such a variant,
 use a Locale constructor.

Parameters:
variant - the variant
Returns:
This builder.
Throws:
IllformedLocaleException - if variant is ill-formed


"
39,Locale.Builder,4,Locale.Builder setExtensions(String... extensions),False,,NULL
39,Locale.Builder,5,Locale build(),True,Returns an instance of Locale created from the fields set on this builder.,"

build
public Locale build()
Returns an instance of Locale created from the fields set
 on this builder.

 This applies the conversions listed in Locale.forLanguageTag(java.lang.String)
 when constructing a Locale. (Grandfathered tags are handled in
 setLanguageTag(java.lang.String).)

Returns:
A Locale.


"
40,Locale.LanguageRange,1,Locale.LanguageRange(String range),False,,NULL
40,Locale.LanguageRange,2,"Locale.LanguageRange(String range, int weight)",False,,NULL
40,Locale.LanguageRange,3,"Locale.LanguageRange(String language, String script, String region)",False,,NULL
40,Locale.LanguageRange,4,"Locale.LanguageRange(String language, String script, String region, int weight)",False,,NULL
40,Locale.LanguageRange,5,Locale.LanguageRange(Locale locale),False,,NULL
40,Locale.LanguageRange,6,"Locale.LanguageRange(Locale locale, int weight)",False,,NULL
40,Locale.LanguageRange,7,Locale.LanguageRange(Locale.LanguageRange range),False,,NULL
40,Locale.LanguageRange,8,"Locale.LanguageRange(Locale.LanguageRange range, int weight)",False,,NULL
40,Locale.LanguageRange,9,Locale.LanguageRange(Locale.LanguageRange[] ranges),False,,NULL
40,Locale.LanguageRange,10,"Locale.LanguageRange(Locale.LanguageRange[] ranges, int weight)",False,,NULL
40,Locale.LanguageRange,11,"Locale.LanguageRange(Locale.LanguageRange[] ranges, int weight, boolean ignoreScript)",False,,NULL
40,Locale.LanguageRange,12,"Locale.LanguageRange(Locale.LanguageRange[] ranges, int weight, boolean ignoreScript, boolean ignoreRegion)",False,,NULL
40,Locale.LanguageRange,13,"Locale.LanguageRange(Locale.LanguageRange[] ranges, int weight, boolean ignoreScript, boolean ignoreRegion, boolean ignoreVariant)",False,,NULL
40,Locale.LanguageRange,14,"Locale.LanguageRange(Locale.LanguageRange[] ranges, int weight, boolean ignoreScript, boolean ignoreRegion, boolean ignoreVariant, boolean ignoreExtension)",False,,NULL
41,LongSummaryStatistics,1,long getCount(),True,Returns the count of values recorded.,"

getCount
public final long getCount()
Returns the count of values recorded.

Returns:
the count of values


"
41,LongSummaryStatistics,2,long getSum(),True,"Returns the sum of values recorded, or zero if no values have been recorded.","

getSum
public final long getSum()
Returns the sum of values recorded, or zero if no values have been
 recorded.

Returns:
the sum of values, or zero if none


"
41,LongSummaryStatistics,3,long getMin(),True,"Returns the minimum value recorded, or Long.MAX_VALUE if no values have been recorded.","

getMin
public final long getMin()
Returns the minimum value recorded, or Long.MAX_VALUE if no
 values have been recorded.

Returns:
the minimum value, or Long.MAX_VALUE if none


"
41,LongSummaryStatistics,4,long getMax(),True,"Returns the maximum value recorded, or Long.MIN_VALUE if no values have been recorded","

getMax
public final long getMax()
Returns the maximum value recorded, or Long.MIN_VALUE if no
 values have been recorded

Returns:
the maximum value, or Long.MIN_VALUE if none


"
41,LongSummaryStatistics,5,double getAverage(),True,"Returns the arithmetic mean of values recorded, or zero if no values have been recorded.","

getAverage
public final double getAverage()
Returns the arithmetic mean of values recorded, or zero if no values have been
 recorded.

Returns:
The arithmetic mean of values, or zero if none


"
42,Objects,1,"boolean equals(Object a, Object b)",True,Returns true if the arguments are equal to each other and false otherwise.,"

equals
public static boolean equals(Object a,
                             Object b)
Returns true if the arguments are equal to each other
 and false otherwise.
 Consequently, if both arguments are null, true
 is returned and if exactly one argument is null, false is returned.  Otherwise, equality is determined by using
 the equals method of the first
 argument.

Parameters:
a - an object
b - an object to be compared with a for equality
Returns:
true if the arguments are equal to each other
 and false otherwise
See Also:
Object.equals(Object)


"
42,Objects,2,int hashCode(Object o),True,Returns the hash code of a non-null argument and 0 for a null argument.,"

hashCode
public static int hashCode(Object o)
Returns the hash code of a non-null argument and 0 for
 a null argument.

Parameters:
o - an object
Returns:
the hash code of a non-null argument and 0 for
 a null argument
See Also:
Object.hashCode()


"
42,Objects,3,boolean isNull(Object obj),True,Returns true if the provided reference is null otherwise returns false.,"

isNull
public static boolean isNull(Object obj)
Returns true if the provided reference is null otherwise
 returns false.

API Note:
This method exists to be used as a
 Predicate, filter(Objects::isNull)
Parameters:
obj - a reference to be checked against null
Returns:
true if the provided reference is null otherwise
 false
Since:
1.8
See Also:
Predicate


"
42,Objects,4,boolean nonNull(Object obj),True,Returns true if the provided reference is non-null otherwise returns false.,"

nonNull
public static boolean nonNull(Object obj)
Returns true if the provided reference is non-null
 otherwise returns false.

API Note:
This method exists to be used as a
 Predicate, filter(Objects::nonNull)
Parameters:
obj - a reference to be checked against null
Returns:
true if the provided reference is non-null
 otherwise false
Since:
1.8
See Also:
Predicate


"
42,Objects,5,boolean requireNonNull(Object obj),False,,NULL
43,Observable,1,void addObserver(Observer o),True,"Adds an observer to the set of observers for this object, provided that it is not the same as some observer already in the set.","

addObserver
public void addObserver(Observer o)
Adds an observer to the set of observers for this object, provided
 that it is not the same as some observer already in the set.
 The order in which notifications will be delivered to multiple
 observers is not specified. See the class comment.

Parameters:
o - an observer to be added.
Throws:
NullPointerException - if the parameter o is null.


"
43,Observable,2,void deleteObserver(Observer o),True,Deletes an observer from the set of observers of this object.,"

deleteObserver
public void deleteObserver(Observer o)
Deletes an observer from the set of observers of this object.
 Passing null to this method will have no effect.

Parameters:
o - the observer to be deleted.


"
43,Observable,3,void deleteObservers(),True,Clears the observer list so that this object no longer has any observers.,"

deleteObservers
public void deleteObservers()
Clears the observer list so that this object no longer has any observers.

"
43,Observable,4,boolean hasChanged(),True,Tests if this object has changed.,"

hasChanged
public boolean hasChanged()
Tests if this object has changed.

Returns:
true if and only if the setChanged
          method has been called more recently than the
          clearChanged method on this object;
          false otherwise.
See Also:
clearChanged(), 
setChanged()


"
43,Observable,5,int countObservers(),True,Returns the number of observers of this Observable object.,"

countObservers
public int countObservers()
Returns the number of observers of this Observable object.

Returns:
the number of observers of this object.


"
43,Observable,6,void notifyObservers(),True,"If this object has changed, as indicated by the hasChanged method, then notify all of its observers and then call the clearChanged method to indicate that this object has no longer changed.","

notifyObservers
public void notifyObservers()
If this object has changed, as indicated by the
 hasChanged method, then notify all of its observers
 and then call the clearChanged method to
 indicate that this object has no longer changed.
 
 Each observer has its update method called with two
 arguments: this observable object and null. In other
 words, this method is equivalent to:
 
 notifyObservers(null)

See Also:
clearChanged(), 
hasChanged(), 
Observer.update(java.util.Observable, java.lang.Object)


"
43,Observable,7,void notifyObservers(Object arg),True,"If this object has changed, as indicated by the hasChanged method, then notify all of its observers and then call the clearChanged method to indicate that this object has no longer changed.","

notifyObservers
public void notifyObservers(Object arg)
If this object has changed, as indicated by the
 hasChanged method, then notify all of its observers
 and then call the clearChanged method to indicate
 that this object has no longer changed.
 
 Each observer has its update method called with two
 arguments: this observable object and the arg argument.

Parameters:
arg - any object.
See Also:
clearChanged(), 
hasChanged(), 
Observer.update(java.util.Observable, java.lang.Object)


"
43,Observable,8,void setChanged(),True,Marks this Observable object as having been changed; the hasChanged method will now return true.,"

setChanged
protected void setChanged()
Marks this Observable object as having been changed; the
 hasChanged method will now return true.

"
43,Observable,9,void clearChanged(),True,"Indicates that this object has no longer changed, or that it has already notified all of its observers of its most recent change, so that the hasChanged method will now return false.","

clearChanged
protected void clearChanged()
Indicates that this object has no longer changed, or that it has
 already notified all of its observers of its most recent change,
 so that the hasChanged method will now return false.
 This method is called automatically by the
 notifyObservers methods.

See Also:
notifyObservers(), 
notifyObservers(java.lang.Object)


"
44,Optional,1,Optional<T> of(T value),False,,NULL
44,Optional,2,Optional<T> empty(),False,,NULL
44,Optional,3,boolean isPresent(),True,"Return true if there is a value present, otherwise false.","

isPresent
public boolean isPresent()
Return true if there is a value present, otherwise false.

Returns:
true if there is a value present, otherwise false


"
44,Optional,4,T get(),True,"If a value is present in this Optional, returns the value, otherwise throws NoSuchElementException.","

get
public T get()
If a value is present in this Optional, returns the value,
 otherwise throws NoSuchElementException.

Returns:
the non-null value held by this Optional
Throws:
NoSuchElementException - if there is no value present
See Also:
isPresent()


"
44,Optional,5,T orElse(T other),True,"Return the value if present, otherwise return other.","

orElse
public T orElse(T other)
Return the value if present, otherwise return other.

Parameters:
other - the value to be returned if there is no value present, may
 be null
Returns:
the value, if present, otherwise other


"
45,OptionalDouble,1,OptionalDouble(),False,,NULL
45,OptionalDouble,2,of(double value),False,,NULL
45,OptionalDouble,3,empty(),False,,NULL
45,OptionalDouble,4,isPresent(),False,,NULL
45,OptionalDouble,5,getAsDouble(),False,,NULL
46,OptionalInt,1,boolean isPresent(),True,"Return true if there is a value present, otherwise false.","

isPresent
public boolean isPresent()
Return true if there is a value present, otherwise false.

Returns:
true if there is a value present, otherwise false


"
46,OptionalInt,2,int getAsInt(),True,"If a value is present in this OptionalInt, returns the value, otherwise throws NoSuchElementException.","

getAsInt
public int getAsInt()
If a value is present in this OptionalInt, returns the value,
 otherwise throws NoSuchElementException.

Returns:
the value held by this OptionalInt
Throws:
NoSuchElementException - if there is no value present
See Also:
isPresent()


"
46,OptionalInt,3,int orElse(int other),True,"Return the value if present, otherwise return other.","

orElse
public int orElse(int other)
Return the value if present, otherwise return other.

Parameters:
other - the value to be returned if there is no value present
Returns:
the value, if present, otherwise other


"
46,OptionalInt,4,int orElseGet(IntSupplier other),True,"Return the value if present, otherwise invoke other and return the result of that invocation.","

orElseGet
public int orElseGet(IntSupplier other)
Return the value if present, otherwise invoke other and return
 the result of that invocation.

Parameters:
other - a IntSupplier whose result is returned if no value
 is present
Returns:
the value if present otherwise the result of other.getAsInt()
Throws:
NullPointerException - if value is not present and other is
 null


"
46,OptionalInt,5,int orElseThrow(),False,,NULL
47,OptionalLong,1,OptionalLong of(long value),True,Return an OptionalLong with the specified value present.,"

of
public static OptionalLong of(long value)
Return an OptionalLong with the specified value present.

Parameters:
value - the value to be present
Returns:
an OptionalLong with the value present


"
47,OptionalLong,2,OptionalLong empty(),True,Returns an empty OptionalLong instance.,"

empty
public static OptionalLong empty()
Returns an empty OptionalLong instance.  No value is present for this
 OptionalLong.

API Note:
Though it may be tempting to do so, avoid testing if an object
 is empty by comparing with == against instances returned by
 Option.empty(). There is no guarantee that it is a singleton.
 Instead, use isPresent().
Returns:
an empty OptionalLong.


"
47,OptionalLong,3,boolean isPresent(),True,"Return true if there is a value present, otherwise false.","

isPresent
public boolean isPresent()
Return true if there is a value present, otherwise false.

Returns:
true if there is a value present, otherwise false


"
47,OptionalLong,4,long getAsLong(),True,"If a value is present in this OptionalLong, returns the value, otherwise throws NoSuchElementException.","

getAsLong
public long getAsLong()
If a value is present in this OptionalLong, returns the value,
 otherwise throws NoSuchElementException.

Returns:
the value held by this OptionalLong
Throws:
NoSuchElementException - if there is no value present
See Also:
isPresent()


"
47,OptionalLong,5,long orElse(long other),True,"Return the value if present, otherwise return other.","

orElse
public long orElse(long other)
Return the value if present, otherwise return other.

Parameters:
other - the value to be returned if there is no value present
Returns:
the value, if present, otherwise other


"
48,PriorityQueue,1,boolean add(E e),True,Inserts the specified element into this priority queue.,"

add
public boolean add(E e)
Inserts the specified element into this priority queue.

Specified by:
add in interface Collection<E>
Specified by:
add in interface Queue<E>
Overrides:
add in class AbstractQueue<E>
Parameters:
e - the element to add
Returns:
true (as specified by Collection.add(E))
Throws:
ClassCastException - if the specified element cannot be
         compared with elements currently in this priority queue
         according to the priority queue's ordering
NullPointerException - if the specified element is null


"
48,PriorityQueue,2,E remove(),False,,NULL
48,PriorityQueue,3,E peek(),True,"Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.","

peek
public E peek()
Description copied from interface: Queue
Retrieves, but does not remove, the head of this queue,
 or returns null if this queue is empty.

Specified by:
peek in interface Queue<E>
Returns:
the head of this queue, or null if this queue is empty


"
48,PriorityQueue,4,boolean contains(Object o),True,Returns true if this queue contains the specified element.,"

contains
public boolean contains(Object o)
Returns true if this queue contains the specified element.
 More formally, returns true if and only if this queue contains
 at least one element e such that o.equals(e).

Specified by:
contains in interface Collection<E>
Overrides:
contains in class AbstractCollection<E>
Parameters:
o - object to be checked for containment in this queue
Returns:
true if this queue contains the specified element


"
48,PriorityQueue,5,int size(),True,Returns the number of elements in this collection.,"

size
public int size()
Description copied from interface: Collection
Returns the number of elements in this collection.  If this collection
 contains more than Integer.MAX_VALUE elements, returns
 Integer.MAX_VALUE.

Specified by:
size in interface Collection<E>
Specified by:
size in class AbstractCollection<E>
Returns:
the number of elements in this collection


"
49,Properties,1,"Object setProperty(String key, String value)",True,Calls the Hashtable method put.,"

setProperty
public Object setProperty(String key,
                          String value)
Calls the Hashtable method put. Provided for
 parallelism with the getProperty method. Enforces use of
 strings for property keys and values. The value returned is the
 result of the Hashtable call to put.

Parameters:
key - the key to be placed into this property list.
value - the value corresponding to key.
Returns:
the previous value of the specified key in this property
             list, or null if it did not have one.
Since:
1.2
See Also:
getProperty(java.lang.String)


"
49,Properties,2,String getProperty(String key),True,Searches for the property with the specified key in this property list.,"

getProperty
public String getProperty(String key)
Searches for the property with the specified key in this property list.
 If the key is not found in this property list, the default property list,
 and its defaults, recursively, are then checked. The method returns
 null if the property is not found.

Parameters:
key - the property key.
Returns:
the value in this property list with the specified key value.
See Also:
setProperty(java.lang.String, java.lang.String), 
defaults


"
49,Properties,3,"String getProperty(String key, String defaultValue)",True,Searches for the property with the specified key in this property list.,"

getProperty
public String getProperty(String key,
                          String defaultValue)
Searches for the property with the specified key in this property list.
 If the key is not found in this property list, the default property list,
 and its defaults, recursively, are then checked. The method returns the
 default value argument if the property is not found.

Parameters:
key - the hashtable key.
defaultValue - a default value.
Returns:
the value in this property list with the specified key value.
See Also:
setProperty(java.lang.String, java.lang.String), 
defaults


"
49,Properties,4,Enumeration propertyNames(),False,,NULL
49,Properties,5,void load(InputStream inStream) throws IOException,True,Reads a property list (key and element pairs) from the input byte stream.,"

load
public void load(InputStream inStream)
          throws IOException
Reads a property list (key and element pairs) from the input
 byte stream. The input stream is in a simple line-oriented
 format as specified in
 load(Reader) and is assumed to use
 the ISO 8859-1 character encoding; that is each byte is one Latin1
 character. Characters not in Latin1, and certain special characters,
 are represented in keys and elements using Unicode escapes as defined in
 section 3.3 of
 The Java™ Language Specification.
 
 The specified stream remains open after this method returns.

Parameters:
inStream - the input stream.
Throws:
IOException - if an error occurred when reading from the
             input stream.
IllegalArgumentException - if the input stream contains a
             malformed Unicode escape sequence.
Since:
1.2


"
50,PropertyPermission,1,boolean implies(Permission p),True,"Checks if this PropertyPermission object ""implies"" the specified permission.","

implies
public boolean implies(Permission p)
Checks if this PropertyPermission object ""implies"" the specified
 permission.
 
 More specifically, this method returns true if:
 
 p is an instanceof PropertyPermission,
  p's actions are a subset of this
 object's actions, and
  p's name is implied by this object's
      name. For example, ""java.*"" implies ""java.home"".
 

Overrides:
implies in class BasicPermission
Parameters:
p - the permission to check against.
Returns:
true if the specified permission is implied by this object,
 false if not.


"
50,PropertyPermission,2,boolean equals(Object obj),True,Checks two PropertyPermission objects for equality.,"

equals
public boolean equals(Object obj)
Checks two PropertyPermission objects for equality. Checks that obj is
 a PropertyPermission, and has the same name and actions as this object.
 

Overrides:
equals in class BasicPermission
Parameters:
obj - the object we are testing for equality with this object.
Returns:
true if obj is a PropertyPermission, and has the same name and
 actions as this PropertyPermission object.
See Also:
Object.hashCode(), 
HashMap


"
50,PropertyPermission,3,String getActions(),True,"Returns the ""canonical string representation"" of the actions.","

getActions
public String getActions()
Returns the ""canonical string representation"" of the actions.
 That is, this method always returns present actions in the following order:
 read, write. For example, if this PropertyPermission object
 allows both write and read actions, a call to getActions
 will return the string ""read,write"".

Overrides:
getActions in class BasicPermission
Returns:
the canonical string representation of the actions.


"
50,PropertyPermission,4,String getName(),False,,NULL
50,PropertyPermission,5,int hashCode(),True,Returns the hash code value for this object.,"

hashCode
public int hashCode()
Returns the hash code value for this object.
 The hash code used is the hash code of this permissions name, that is,
 getName().hashCode(), where getName is
 from the Permission superclass.

Overrides:
hashCode in class BasicPermission
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
51,PropertyResourceBundle,1,Object getObject(String key),False,,NULL
51,PropertyResourceBundle,2,Enumeration<String> getKeys(),True,Returns an Enumeration of the keys contained in this ResourceBundle and its parent bundles.,"

getKeys
public Enumeration<String> getKeys()
Returns an Enumeration of the keys contained in
 this ResourceBundle and its parent bundles.

Specified by:
getKeys in class ResourceBundle
Returns:
an Enumeration of the keys contained in
         this ResourceBundle and its parent bundles.
See Also:
ResourceBundle.keySet()


"
51,PropertyResourceBundle,3,String getString(String key),False,,NULL
51,PropertyResourceBundle,4,"String getString(String key, String defaultValue)",False,,NULL
51,PropertyResourceBundle,5,boolean containsKey(String key),False,,NULL
52,Random,1,Random(),False,,NULL
52,Random,2,int nextInt(),True,"Returns the next pseudorandom, uniformly distributed int value from this random number generator's sequence.","

nextInt
public int nextInt()
Returns the next pseudorandom, uniformly distributed int
 value from this random number generator's sequence. The general
 contract of nextInt is that one int value is
 pseudorandomly generated and returned. All 232 possible
 int values are produced with (approximately) equal probability.

 The method nextInt is implemented by class Random
 as if by:
   
 public int nextInt() {
   return next(32);
 }

Returns:
the next pseudorandom, uniformly distributed int
         value from this random number generator's sequence


"
52,Random,3,int nextInt(int bound),True,"Returns a pseudorandom, uniformly distributed int value between 0 (inclusive) and the specified value (exclusive), drawn from this random number generator's sequence.","

nextInt
public int nextInt(int bound)
Returns a pseudorandom, uniformly distributed int value
 between 0 (inclusive) and the specified value (exclusive), drawn from
 this random number generator's sequence.  The general contract of
 nextInt is that one int value in the specified range
 is pseudorandomly generated and returned.  All bound possible
 int values are produced with (approximately) equal
 probability.  The method nextInt(int bound) is implemented by
 class Random as if by:
   
 public int nextInt(int bound) {
   if (bound <= 0)
     throw new IllegalArgumentException(""bound must be positive"");

   if ((bound & -bound) == bound)  // i.e., bound is a power of 2
     return (int)((bound * (long)next(31)) >> 31);

   int bits, val;
   do {
       bits = next(31);
       val = bits % bound;
   } while (bits - val + (bound-1) < 0);
   return val;
 }
The hedge ""approximately"" is used in the foregoing description only
 because the next method is only approximately an unbiased source of
 independently chosen bits.  If it were a perfect source of randomly
 chosen bits, then the algorithm shown would choose int
 values from the stated range with perfect uniformity.
 
 The algorithm is slightly tricky.  It rejects values that would result
 in an uneven distribution (due to the fact that 2^31 is not divisible
 by n). The probability of a value being rejected depends on n.  The
 worst case is n=2^30+1, for which the probability of a reject is 1/2,
 and the expected number of iterations before the loop terminates is 2.
 
 The algorithm treats the case where n is a power of two specially: it
 returns the correct number of high-order bits from the underlying
 pseudo-random number generator.  In the absence of special treatment,
 the correct number of low-order bits would be returned.  Linear
 congruential pseudo-random number generators such as the one
 implemented by this class are known to have short periods in the
 sequence of values of their low-order bits.  Thus, this special case
 greatly increases the length of the sequence of values returned by
 successive calls to this method if n is a small power of two.

Parameters:
bound - the upper bound (exclusive).  Must be positive.
Returns:
the next pseudorandom, uniformly distributed int
         value between zero (inclusive) and bound (exclusive)
         from this random number generator's sequence
Throws:
IllegalArgumentException - if bound is not positive
Since:
1.2


"
52,Random,4,long nextLong(),True,"Returns the next pseudorandom, uniformly distributed long value from this random number generator's sequence.","

nextLong
public long nextLong()
Returns the next pseudorandom, uniformly distributed long
 value from this random number generator's sequence. The general
 contract of nextLong is that one long value is
 pseudorandomly generated and returned.

 The method nextLong is implemented by class Random
 as if by:
   
 public long nextLong() {
   return ((long)next(32) << 32) + next(32);
 }

 Because class Random uses a seed with only 48 bits,
 this algorithm will not return all possible long values.

Returns:
the next pseudorandom, uniformly distributed long
         value from this random number generator's sequence


"
52,Random,5,boolean nextBoolean(),True,"Returns the next pseudorandom, uniformly distributed boolean value from this random number generator's sequence.","

nextBoolean
public boolean nextBoolean()
Returns the next pseudorandom, uniformly distributed
 boolean value from this random number generator's
 sequence. The general contract of nextBoolean is that one
 boolean value is pseudorandomly generated and returned.  The
 values true and false are produced with
 (approximately) equal probability.

 The method nextBoolean is implemented by class Random
 as if by:
   
 public boolean nextBoolean() {
   return next(1) != 0;
 }

Returns:
the next pseudorandom, uniformly distributed
         boolean value from this random number generator's
         sequence
Since:
1.2


"
53,ResourceBundle,1,Object getObject(String key),True,Gets an object for the given key from this resource bundle or one of its parents.,"

getObject
public final Object getObject(String key)
Gets an object for the given key from this resource bundle or one of its parents.
 This method first tries to obtain the object from this resource bundle using
 handleGetObject.
 If not successful, and the parent resource bundle is not null,
 it calls the parent's getObject method.
 If still not successful, it throws a MissingResourceException.

Parameters:
key - the key for the desired object
Returns:
the object for the given key
Throws:
NullPointerException - if key is null
MissingResourceException - if no object for the given key can be found


"
53,ResourceBundle,2,Enumeration<String> getKeys(),True,Returns an enumeration of the keys.,"

getKeys
public abstract Enumeration<String> getKeys()
Returns an enumeration of the keys.

Returns:
an Enumeration of the keys contained in
         this ResourceBundle and its parent bundles.


"
53,ResourceBundle,3,String getString(String key),True,Gets a string for the given key from this resource bundle or one of its parents.,"

getString
public final String getString(String key)
Gets a string for the given key from this resource bundle or one of its parents.
 Calling this method is equivalent to calling
 
(String) getObject(key).
 

Parameters:
key - the key for the desired string
Returns:
the string for the given key
Throws:
NullPointerException - if key is null
MissingResourceException - if no object for the given key can be found
ClassCastException - if the object found for the given key is not a string


"
53,ResourceBundle,4,Locale getLocale(),True,Returns the locale of this resource bundle.,"

getLocale
public Locale getLocale()
Returns the locale of this resource bundle. This method can be used after a
 call to getBundle() to determine whether the resource bundle returned really
 corresponds to the requested locale or is a fallback.

Returns:
the locale of this resource bundle


"
53,ResourceBundle,5,boolean containsKey(String key),True,Determines whether the given key is contained in this ResourceBundle or its parent bundles.,"

containsKey
public boolean containsKey(String key)
Determines whether the given key is contained in
 this ResourceBundle or its parent bundles.

Parameters:
key - the resource key
Returns:
true if the given key is
        contained in this ResourceBundle or its
        parent bundles; false otherwise.
Throws:
NullPointerException - if key is null
Since:
1.6


"
54,ResourceBundle.Control,1,abstract List<String> getFormats(String baseName),False,,NULL
54,ResourceBundle.Control,2,abstract String toString(),False,,NULL
54,ResourceBundle.Control,3,abstract Locale getFallbackLocale(),False,,NULL
54,ResourceBundle.Control,4,"abstract ResourceBundle newBundle(String baseName, Locale locale, String format, ClassLoader loader, boolean reload)",False,,NULL
54,ResourceBundle.Control,5,"abstract boolean needsReload(String baseName, Locale locale, String format, ClassLoader loader, ResourceBundle bundle, long loadTime)",False,,NULL
55,Scanner,1,boolean hasNext(),True,Returns true if this scanner has another token in its input.,"

hasNext
public boolean hasNext()
Returns true if this scanner has another token in its input.
 This method may block while waiting for input to scan.
 The scanner does not advance past any input.

Specified by:
hasNext in interface Iterator<String>
Returns:
true if and only if this scanner has another token
Throws:
IllegalStateException - if this scanner is closed
See Also:
Iterator


"
55,Scanner,2,boolean hasNextLine(),True,Returns true if there is another line in the input of this scanner.,"

hasNextLine
public boolean hasNextLine()
Returns true if there is another line in the input of this scanner.
 This method may block while waiting for input. The scanner does not
 advance past any input.

Returns:
true if and only if this scanner has another line of input
Throws:
IllegalStateException - if this scanner is closed


"
55,Scanner,3,String next(),True,Finds and returns the next complete token from this scanner.,"

next
public String next()
Finds and returns the next complete token from this scanner.
 A complete token is preceded and followed by input that matches
 the delimiter pattern. This method may block while waiting for input
 to scan, even if a previous invocation of hasNext() returned
 true.

Specified by:
next in interface Iterator<String>
Returns:
the next token
Throws:
NoSuchElementException - if no more tokens are available
IllegalStateException - if this scanner is closed
See Also:
Iterator


"
55,Scanner,4,String nextLine(),True,Advances this scanner past the current line and returns the input that was skipped.,"

nextLine
public String nextLine()
Advances this scanner past the current line and returns the input
 that was skipped.

 This method returns the rest of the current line, excluding any line
 separator at the end. The position is set to the beginning of the next
 line.

 Since this method continues to search through the input looking
 for a line separator, it may buffer all of the input searching for
 the line to skip if no line separators are present.

Returns:
the line that was skipped
Throws:
NoSuchElementException - if no line was found
IllegalStateException - if this scanner is closed


"
55,Scanner,5,int nextInt(),True,Scans the next token of the input as an int.,"

nextInt
public int nextInt()
Scans the next token of the input as an int.

  An invocation of this method of the form
 nextInt() behaves in exactly the same way as the
 invocation nextInt(radix), where radix
 is the default radix of this scanner.

Returns:
the int scanned from the input
Throws:
InputMismatchException - if the next token does not match the Integer
         regular expression, or is out of range
NoSuchElementException - if input is exhausted
IllegalStateException - if this scanner is closed


"
55,Scanner,6,double nextDouble(),True,Scans the next token of the input as a double.,"

nextDouble
public double nextDouble()
Scans the next token of the input as a double.
 This method will throw InputMismatchException
 if the next token cannot be translated into a valid double value.
 If the translation is successful, the scanner advances past the input
 that matched.

  If the next token matches the Float regular expression defined above
 then the token is converted into a double value as if by
 removing all locale specific prefixes, group separators, and locale
 specific suffixes, then mapping non-ASCII digits into ASCII
 digits via Character.digit, prepending a
 negative sign (-) if the locale specific negative prefixes and suffixes
 were present, and passing the resulting string to
 Double.parseDouble. If the token matches
 the localized NaN or infinity strings, then either ""Nan"" or ""Infinity""
 is passed to Double.parseDouble as
 appropriate.

Returns:
the double scanned from the input
Throws:
InputMismatchException - if the next token does not match the Float
         regular expression, or is out of range
NoSuchElementException - if the input is exhausted
IllegalStateException - if this scanner is closed


"
55,Scanner,7,float nextFloat(),True,Scans the next token of the input as a float.,"

nextFloat
public float nextFloat()
Scans the next token of the input as a float.
 This method will throw InputMismatchException
 if the next token cannot be translated into a valid float value as
 described below. If the translation is successful, the scanner advances
 past the input that matched.

  If the next token matches the Float regular expression defined above
 then the token is converted into a float value as if by
 removing all locale specific prefixes, group separators, and locale
 specific suffixes, then mapping non-ASCII digits into ASCII
 digits via Character.digit, prepending a
 negative sign (-) if the locale specific negative prefixes and suffixes
 were present, and passing the resulting string to
 Float.parseFloat. If the token matches
 the localized NaN or infinity strings, then either ""Nan"" or ""Infinity""
 is passed to Float.parseFloat as
 appropriate.

Returns:
the float scanned from the input
Throws:
InputMismatchException - if the next token does not match the Float
         regular expression, or is out of range
NoSuchElementException - if input is exhausted
IllegalStateException - if this scanner is closed


"
55,Scanner,8,long nextLong(),True,Scans the next token of the input as a long.,"

nextLong
public long nextLong()
Scans the next token of the input as a long.

  An invocation of this method of the form
 nextLong() behaves in exactly the same way as the
 invocation nextLong(radix), where radix
 is the default radix of this scanner.

Returns:
the long scanned from the input
Throws:
InputMismatchException - if the next token does not match the Integer
         regular expression, or is out of range
NoSuchElementException - if input is exhausted
IllegalStateException - if this scanner is closed


"
55,Scanner,9,boolean nextBoolean(),True,Scans the next token of the input into a boolean value and returns that value.,"

nextBoolean
public boolean nextBoolean()
Scans the next token of the input into a boolean value and returns
 that value. This method will throw InputMismatchException
 if the next token cannot be translated into a valid boolean value.
 If the match is successful, the scanner advances past the input that
 matched.

Returns:
the boolean scanned from the input
Throws:
InputMismatchException - if the next token is not a valid boolean
NoSuchElementException - if input is exhausted
IllegalStateException - if this scanner is closed


"
55,Scanner,10,BigInteger nextBigInteger(),True,Scans the next token of the input as a BigInteger.,"

nextBigInteger
public BigInteger nextBigInteger()
Scans the next token of the input as a BigInteger.

  An invocation of this method of the form
 nextBigInteger() behaves in exactly the same way as the
 invocation nextBigInteger(radix), where radix
 is the default radix of this scanner.

Returns:
the BigInteger scanned from the input
Throws:
InputMismatchException - if the next token does not match the Integer
         regular expression, or is out of range
NoSuchElementException - if the input is exhausted
IllegalStateException - if this scanner is closed


"
55,Scanner,11,BigDecimal nextBigDecimal(),True,Scans the next token of the input as a BigDecimal.,"

nextBigDecimal
public BigDecimal nextBigDecimal()
Scans the next token of the input as a BigDecimal.

  If the next token matches the Decimal regular expression defined
 above then the token is converted into a BigDecimal value as if
 by removing all group separators, mapping non-ASCII digits into ASCII
 digits via the Character.digit, and passing the
 resulting string to the BigDecimal(String)
 constructor.

Returns:
the BigDecimal scanned from the input
Throws:
InputMismatchException - if the next token does not match the Decimal
         regular expression, or is out of range
NoSuchElementException - if the input is exhausted
IllegalStateException - if this scanner is closed


"
55,Scanner,12,Scanner useDelimiter(Pattern pattern),True,Sets this scanner's delimiting pattern to the specified pattern.,"

useDelimiter
public Scanner useDelimiter(Pattern pattern)
Sets this scanner's delimiting pattern to the specified pattern.

Parameters:
pattern - A delimiting pattern
Returns:
this scanner


"
55,Scanner,13,void useLocale(Locale locale),False,,NULL
55,Scanner,14,void close(),True,Closes this scanner.,"

close
public void close()
Closes this scanner.

  If this scanner has not yet been closed then if its underlying
 readable also implements the Closeable interface then the readable's close method
 will be invoked.  If this scanner is already closed then invoking this
 method will have no effect.

 Attempting to perform search operations after a scanner has
 been closed will result in an IllegalStateException.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable


"
56,ServiceLoader,1,<T> Iterator<T> iterator(),False,,NULL
56,ServiceLoader,2,<T> Spliterator<T> spliterator(),False,,NULL
56,ServiceLoader,3,<T> Stream<T> stream(),False,,NULL
56,ServiceLoader,4,<T> Stream<T> parallelStream(),False,,NULL
56,ServiceLoader,5,void reload(),True,Clear this loader's provider cache so that all providers will be reloaded.,"

reload
public void reload()
Clear this loader's provider cache so that all providers will be
 reloaded.

  After invoking this method, subsequent invocations of the iterator method will lazily look up and instantiate
 providers from scratch, just as is done by a newly-created loader.

  This method is intended for use in situations in which new providers
 can be installed into a running Java virtual machine.

"
57,SimpleTimeZone,1,"SimpleTimeZone(int offset, String ID)",False,,NULL
57,SimpleTimeZone,2,int getOffset(long date),True,Returns the offset of this time zone from UTC at the given time.,"

getOffset
public int getOffset(long date)
Returns the offset of this time zone from UTC at the given
 time. If daylight saving time is in effect at the given time,
 the offset value is adjusted with the amount of daylight
 saving.

Overrides:
getOffset in class TimeZone
Parameters:
date - the time at which the time zone offset is found
Returns:
the amount of time in milliseconds to add to UTC to get
 local time.
Since:
1.4
See Also:
Calendar.ZONE_OFFSET, 
Calendar.DST_OFFSET


"
57,SimpleTimeZone,3,int getOffsetFromLocal(long local),False,,NULL
57,SimpleTimeZone,4,"int getOffsetFromLocal(long local, boolean daylight)",False,,NULL
57,SimpleTimeZone,5,"int getOffsetFromLocal(long local, boolean daylight, boolean stdDaylight)",False,,NULL
58,Spliterators,1,Spliterator.OfInt spliterator(int[] array),False,,NULL
58,Spliterators,2,Spliterator.OfLong spliterator(long[] array),False,,NULL
58,Spliterators,3,Spliterator.OfDouble spliterator(double[] array),False,,NULL
58,Spliterators,4,"Spliterator.OfInt spliterator(int[] array, int origin, int fence)",False,,NULL
58,Spliterators,5,"Spliterator.OfLong spliterator(long[] array, int origin, int fence)",False,,NULL
58,Spliterators,6,"Spliterator.OfDouble spliterator(double[] array, int origin, int fence)",False,,NULL
59,Spliterators.AbstractDoubleSpliterator,1,double tryAdvance(DoubleConsumer action),False,,NULL
59,Spliterators.AbstractDoubleSpliterator,2,Spliterator<Double> trySplit(),False,,NULL
59,Spliterators.AbstractDoubleSpliterator,3,long estimateSize(),True,"Returns an estimate of the number of elements that would be encountered by a Spliterator.forEachRemaining(java.util.function.Consumer<? super T>) traversal, or returns Long.MAX_VALUE if infinite, unknown, or too expensive to compute.","

estimateSize
public long estimateSize()
Returns an estimate of the number of elements that would be
 encountered by a Spliterator.forEachRemaining(java.util.function.Consumer<? super T>) traversal, or returns Long.MAX_VALUE if infinite, unknown, or too expensive to compute.

 If this Spliterator is Spliterator.SIZED and has not yet been partially
 traversed or split, or this Spliterator is Spliterator.SUBSIZED and has
 not yet been partially traversed, this estimate must be an accurate
 count of elements that would be encountered by a complete traversal.
 Otherwise, this estimate may be arbitrarily inaccurate, but must decrease
 as specified across invocations of Spliterator.trySplit().

Specified by:
estimateSize in interface Spliterator<Double>
Implementation Requirements:
This implementation returns the estimated size as reported when
 created and, if the estimate size is known, decreases in size when
 split.
Returns:
the estimated size, or Long.MAX_VALUE if infinite,
         unknown, or too expensive to compute.


"
59,Spliterators.AbstractDoubleSpliterator,4,int characteristics(),True,Returns a set of characteristics of this Spliterator and its elements.,"

characteristics
public int characteristics()
Returns a set of characteristics of this Spliterator and its
 elements. The result is represented as ORed values from Spliterator.ORDERED, Spliterator.DISTINCT, Spliterator.SORTED, Spliterator.SIZED,
 Spliterator.NONNULL, Spliterator.IMMUTABLE, Spliterator.CONCURRENT,
 Spliterator.SUBSIZED.  Repeated calls to characteristics() on
 a given spliterator, prior to or in-between calls to trySplit,
 should always return the same result.

 If a Spliterator reports an inconsistent set of
 characteristics (either those returned from a single invocation
 or across multiple invocations), no guarantees can be made
 about any computation using this Spliterator.

Specified by:
characteristics in interface Spliterator<Double>
Implementation Requirements:
This implementation returns the characteristics as reported when
 created.
Returns:
a representation of characteristics


"
59,Spliterators.AbstractDoubleSpliterator,5,boolean hasCharacteristics(int characteristics),False,,NULL
60,Spliterators.AbstractIntSpliterator,1,int estimateSize(),False,,NULL
60,Spliterators.AbstractIntSpliterator,2,boolean tryAdvance(IntConsumer action),False,,NULL
60,Spliterators.AbstractIntSpliterator,3,Spliterator<Integer> trySplit(),False,,NULL
60,Spliterators.AbstractIntSpliterator,4,long estimateSize(),True,"Returns an estimate of the number of elements that would be encountered by a Spliterator.forEachRemaining(java.util.function.Consumer<? super T>) traversal, or returns Long.MAX_VALUE if infinite, unknown, or too expensive to compute.","

estimateSize
public long estimateSize()
Returns an estimate of the number of elements that would be
 encountered by a Spliterator.forEachRemaining(java.util.function.Consumer<? super T>) traversal, or returns Long.MAX_VALUE if infinite, unknown, or too expensive to compute.

 If this Spliterator is Spliterator.SIZED and has not yet been partially
 traversed or split, or this Spliterator is Spliterator.SUBSIZED and has
 not yet been partially traversed, this estimate must be an accurate
 count of elements that would be encountered by a complete traversal.
 Otherwise, this estimate may be arbitrarily inaccurate, but must decrease
 as specified across invocations of Spliterator.trySplit().

Specified by:
estimateSize in interface Spliterator<Integer>
Implementation Requirements:
This implementation returns the estimated size as reported when
 created and, if the estimate size is known, decreases in size when
 split.
Returns:
the estimated size, or Long.MAX_VALUE if infinite,
         unknown, or too expensive to compute.


"
60,Spliterators.AbstractIntSpliterator,5,boolean tryAdvance(IntConsumer action),False,,NULL
61,Spliterators.AbstractLongSpliterator,1,long estimateSize(),True,"Returns an estimate of the number of elements that would be encountered by a Spliterator.forEachRemaining(java.util.function.Consumer<? super T>) traversal, or returns Long.MAX_VALUE if infinite, unknown, or too expensive to compute.","

estimateSize
public long estimateSize()
Returns an estimate of the number of elements that would be
 encountered by a Spliterator.forEachRemaining(java.util.function.Consumer<? super T>) traversal, or returns Long.MAX_VALUE if infinite, unknown, or too expensive to compute.

 If this Spliterator is Spliterator.SIZED and has not yet been partially
 traversed or split, or this Spliterator is Spliterator.SUBSIZED and has
 not yet been partially traversed, this estimate must be an accurate
 count of elements that would be encountered by a complete traversal.
 Otherwise, this estimate may be arbitrarily inaccurate, but must decrease
 as specified across invocations of Spliterator.trySplit().

Specified by:
estimateSize in interface Spliterator<Long>
Implementation Requirements:
This implementation returns the estimated size as reported when
 created and, if the estimate size is known, decreases in size when
 split.
Returns:
the estimated size, or Long.MAX_VALUE if infinite,
         unknown, or too expensive to compute.


"
61,Spliterators.AbstractLongSpliterator,2,boolean tryAdvance(Consumer<? super Long> action),False,,NULL
61,Spliterators.AbstractLongSpliterator,3,Spliterator<Long> trySplit(),False,,NULL
61,Spliterators.AbstractLongSpliterator,4,long getExactSizeIfKnown(),False,,NULL
61,Spliterators.AbstractLongSpliterator,5,int characteristics(),True,Returns a set of characteristics of this Spliterator and its elements.,"

characteristics
public int characteristics()
Returns a set of characteristics of this Spliterator and its
 elements. The result is represented as ORed values from Spliterator.ORDERED, Spliterator.DISTINCT, Spliterator.SORTED, Spliterator.SIZED,
 Spliterator.NONNULL, Spliterator.IMMUTABLE, Spliterator.CONCURRENT,
 Spliterator.SUBSIZED.  Repeated calls to characteristics() on
 a given spliterator, prior to or in-between calls to trySplit,
 should always return the same result.

 If a Spliterator reports an inconsistent set of
 characteristics (either those returned from a single invocation
 or across multiple invocations), no guarantees can be made
 about any computation using this Spliterator.

Specified by:
characteristics in interface Spliterator<Long>
Implementation Requirements:
This implementation returns the characteristics as reported when
 created.
Returns:
a representation of characteristics


"
62,Spliterators.AbstractSpliterator,1,boolean tryAdvance(Consumer<? super T> action),False,,NULL
62,Spliterators.AbstractSpliterator,2,Spliterator<T> trySplit(),True,"If this spliterator can be partitioned, returns a Spliterator covering elements, that will, upon return from this method, not be covered by this Spliterator.","

trySplit
public Spliterator<T> trySplit()
If this spliterator can be partitioned, returns a Spliterator
 covering elements, that will, upon return from this method, not
 be covered by this Spliterator.

 If this Spliterator is Spliterator.ORDERED, the returned Spliterator
 must cover a strict prefix of the elements.

 Unless this Spliterator covers an infinite number of elements,
 repeated calls to trySplit() must eventually return null.
 Upon non-null return:
 
the value reported for estimateSize() before splitting,
 must, after splitting, be greater than or equal to estimateSize()
 for this and the returned Spliterator; and
if this Spliterator is SUBSIZED, then estimateSize()
 for this spliterator before splitting must be equal to the sum of
 estimateSize() for this and the returned Spliterator after
 splitting.

This method may return null for any reason,
 including emptiness, inability to split after traversal has
 commenced, data structure constraints, and efficiency
 considerations.

 This implementation permits limited parallelism.

Specified by:
trySplit in interface Spliterator<T>
Returns:
a Spliterator covering some portion of the
 elements, or null if this spliterator cannot be split


"
62,Spliterators.AbstractSpliterator,3,long estimateSize(),True,"Returns an estimate of the number of elements that would be encountered by a Spliterator.forEachRemaining(java.util.function.Consumer<? super T>) traversal, or returns Long.MAX_VALUE if infinite, unknown, or too expensive to compute.","

estimateSize
public long estimateSize()
Returns an estimate of the number of elements that would be
 encountered by a Spliterator.forEachRemaining(java.util.function.Consumer<? super T>) traversal, or returns Long.MAX_VALUE if infinite, unknown, or too expensive to compute.

 If this Spliterator is Spliterator.SIZED and has not yet been partially
 traversed or split, or this Spliterator is Spliterator.SUBSIZED and has
 not yet been partially traversed, this estimate must be an accurate
 count of elements that would be encountered by a complete traversal.
 Otherwise, this estimate may be arbitrarily inaccurate, but must decrease
 as specified across invocations of Spliterator.trySplit().

Specified by:
estimateSize in interface Spliterator<T>
Implementation Requirements:
This implementation returns the estimated size as reported when
 created and, if the estimate size is known, decreases in size when
 split.
Returns:
the estimated size, or Long.MAX_VALUE if infinite,
         unknown, or too expensive to compute.


"
62,Spliterators.AbstractSpliterator,4,int characteristics(),True,Returns a set of characteristics of this Spliterator and its elements.,"

characteristics
public int characteristics()
Returns a set of characteristics of this Spliterator and its
 elements. The result is represented as ORed values from Spliterator.ORDERED, Spliterator.DISTINCT, Spliterator.SORTED, Spliterator.SIZED,
 Spliterator.NONNULL, Spliterator.IMMUTABLE, Spliterator.CONCURRENT,
 Spliterator.SUBSIZED.  Repeated calls to characteristics() on
 a given spliterator, prior to or in-between calls to trySplit,
 should always return the same result.

 If a Spliterator reports an inconsistent set of
 characteristics (either those returned from a single invocation
 or across multiple invocations), no guarantees can be made
 about any computation using this Spliterator.

Specified by:
characteristics in interface Spliterator<T>
Implementation Requirements:
This implementation returns the characteristics as reported when
 created.
Returns:
a representation of characteristics


"
62,Spliterators.AbstractSpliterator,5,Comparator<? super T> getComparator(),False,,NULL
63,SplittableRandom,1,SplittableRandom(),False,,NULL
63,SplittableRandom,2,long nextLong(),True,Returns a pseudorandom long value.,"

nextLong
public long nextLong()
Returns a pseudorandom long value.

Returns:
a pseudorandom long value


"
63,SplittableRandom,3,double nextDouble(),True,Returns a pseudorandom double value between zero (inclusive) and one (exclusive).,"

nextDouble
public double nextDouble()
Returns a pseudorandom double value between zero
 (inclusive) and one (exclusive).

Returns:
a pseudorandom double value between zero
         (inclusive) and one (exclusive)


"
63,SplittableRandom,4,int nextInt(),True,Returns a pseudorandom int value.,"

nextInt
public int nextInt()
Returns a pseudorandom int value.

Returns:
a pseudorandom int value


"
63,SplittableRandom,5,boolean nextBoolean(),True,Returns a pseudorandom boolean value.,"

nextBoolean
public boolean nextBoolean()
Returns a pseudorandom boolean value.

Returns:
a pseudorandom boolean value


"
64,Stack,1,boolean empty(),True,Tests if this stack is empty.,"

empty
public boolean empty()
Tests if this stack is empty.

Returns:
true if and only if this stack contains
          no items; false otherwise.


"
64,Stack,2,E peek(),True,Looks at the object at the top of this stack without removing it from the stack.,"

peek
public E peek()
Looks at the object at the top of this stack without removing it
 from the stack.

Returns:
the object at the top of this stack (the last item
          of the Vector object).
Throws:
EmptyStackException - if this stack is empty.


"
64,Stack,3,E pop(),True,Removes the object at the top of this stack and returns that object as the value of this function.,"

pop
public E pop()
Removes the object at the top of this stack and returns that
 object as the value of this function.

Returns:
The object at the top of this stack (the last item
          of the Vector object).
Throws:
EmptyStackException - if this stack is empty.


"
64,Stack,4,E push(E item),True,Pushes an item onto the top of this stack.,"

push
public E push(E item)
Pushes an item onto the top of this stack. This has exactly
 the same effect as:
 
 addElement(item)

Parameters:
item - the item to be pushed onto this stack.
Returns:
the item argument.
See Also:
Vector.addElement(E)


"
64,Stack,5,int search(Object o),True,Returns the 1-based position where an object is on this stack.,"

search
public int search(Object o)
Returns the 1-based position where an object is on this stack.
 If the object o occurs as an item in this stack, this
 method returns the distance from the top of the stack of the
 occurrence nearest the top of the stack; the topmost item on the
 stack is considered to be at distance 1. The equals
 method is used to compare o to the
 items in this stack.

Parameters:
o - the desired object.
Returns:
the 1-based position from the top of the stack where
          the object is located; the return value -1
          indicates that the object is not on the stack.


"
65,StringJoiner,1,StringJoiner(CharSequence delimiter),False,,NULL
65,StringJoiner,2,"StringJoiner(CharSequence delimiter, CharSequence prefix, CharSequence suffix)",False,,NULL
65,StringJoiner,3,StringJoiner merge(StringJoiner other),True,Adds the contents of the given StringJoiner without prefix and suffix as the next element if it is non-empty.,"

merge
public StringJoiner merge(StringJoiner other)
Adds the contents of the given StringJoiner without prefix and
 suffix as the next element if it is non-empty. If the given StringJoiner is empty, the call has no effect.

 A StringJoiner is empty if add()
 has never been called, and if merge() has never been called
 with a non-empty StringJoiner argument.

 If the other StringJoiner is using a different delimiter,
 then elements from the other StringJoiner are concatenated with
 that delimiter and the result is appended to this StringJoiner
 as a single element.

Parameters:
other - The StringJoiner whose contents should be merged
              into this one
Returns:
This StringJoiner
Throws:
NullPointerException - if the other StringJoiner is null


"
65,StringJoiner,4,StringJoiner setEmptyValue(CharSequence emptyValue),True,"Sets the sequence of characters to be used when determining the string representation of this StringJoiner and no elements have been added yet, that is, when it is empty.","

setEmptyValue
public StringJoiner setEmptyValue(CharSequence emptyValue)
Sets the sequence of characters to be used when determining the string
 representation of this StringJoiner and no elements have been
 added yet, that is, when it is empty.  A copy of the emptyValue
 parameter is made for this purpose. Note that once an add method has been
 called, the StringJoiner is no longer considered empty, even if
 the element(s) added correspond to the empty String.

Parameters:
emptyValue - the characters to return as the value of an empty
         StringJoiner
Returns:
this StringJoiner itself so the calls may be chained
Throws:
NullPointerException - when the emptyValue parameter is
         null


"
65,StringJoiner,5,StringJoiner add(CharSequence newElement),True,Adds a copy of the given CharSequence value as the next element of the StringJoiner value.,"

add
public StringJoiner add(CharSequence newElement)
Adds a copy of the given CharSequence value as the next
 element of the StringJoiner value. If newElement is
 null, then ""null"" is added.

Parameters:
newElement - The element to add
Returns:
a reference to this StringJoiner


"
66,StringTokenizer,1,StringTokenizer(String str),False,,NULL
66,StringTokenizer,2,"StringTokenizer(String str, String delim)",False,,NULL
66,StringTokenizer,3,boolean hasMoreTokens(),True,Tests if there are more tokens available from this tokenizer's string.,"

hasMoreTokens
public boolean hasMoreTokens()
Tests if there are more tokens available from this tokenizer's string.
 If this method returns true, then a subsequent call to
 nextToken with no argument will successfully return a token.

Returns:
true if and only if there is at least one token
          in the string after the current position; false
          otherwise.


"
66,StringTokenizer,4,String nextToken(),True,Returns the next token from this string tokenizer.,"

nextToken
public String nextToken()
Returns the next token from this string tokenizer.

Returns:
the next token from this string tokenizer.
Throws:
NoSuchElementException - if there are no more tokens in this
               tokenizer's string.


"
66,StringTokenizer,5,String nextToken(String delim),True,Returns the next token in this string tokenizer's string.,"

nextToken
public String nextToken(String delim)
Returns the next token in this string tokenizer's string. First,
 the set of characters considered to be delimiters by this
 StringTokenizer object is changed to be the characters in
 the string delim. Then the next token in the string
 after the current position is returned. The current position is
 advanced beyond the recognized token.  The new delimiter set
 remains the default after this call.

Parameters:
delim - the new delimiters.
Returns:
the next token, after switching to the new delimiter set.
Throws:
NoSuchElementException - if there are no more tokens in this
               tokenizer's string.
NullPointerException - if delim is null


"
67,Timer,1,"void schedule(TimerTask task, Date time)",True,Schedules the specified task for execution at the specified time.,"

schedule
public void schedule(TimerTask task,
                     Date time)
Schedules the specified task for execution at the specified time.  If
 the time is in the past, the task is scheduled for immediate execution.

Parameters:
task - task to be scheduled.
time - time at which task is to be executed.
Throws:
IllegalArgumentException - if time.getTime() is negative.
IllegalStateException - if task was already scheduled or
         cancelled, timer was cancelled, or timer thread terminated.
NullPointerException - if task or time is null


"
67,Timer,2,"void schedule(TimerTask task, long delay)",True,Schedules the specified task for execution after the specified delay.,"

schedule
public void schedule(TimerTask task,
                     long delay)
Schedules the specified task for execution after the specified delay.

Parameters:
task - task to be scheduled.
delay - delay in milliseconds before task is to be executed.
Throws:
IllegalArgumentException - if delay is negative, or
         delay + System.currentTimeMillis() is negative.
IllegalStateException - if task was already scheduled or
         cancelled, timer was cancelled, or timer thread terminated.
NullPointerException - if task is null


"
67,Timer,3,"void schedule(TimerTask task, Date firstTime, long period)",True,"Schedules the specified task for repeated fixed-delay execution, beginning at the specified time.","

schedule
public void schedule(TimerTask task,
                     Date firstTime,
                     long period)
Schedules the specified task for repeated fixed-delay execution,
 beginning at the specified time. Subsequent executions take place at
 approximately regular intervals, separated by the specified period.

 In fixed-delay execution, each execution is scheduled relative to
 the actual execution time of the previous execution.  If an execution
 is delayed for any reason (such as garbage collection or other
 background activity), subsequent executions will be delayed as well.
 In the long run, the frequency of execution will generally be slightly
 lower than the reciprocal of the specified period (assuming the system
 clock underlying Object.wait(long) is accurate).  As a
 consequence of the above, if the scheduled first time is in the past,
 it is scheduled for immediate execution.

 Fixed-delay execution is appropriate for recurring activities
 that require ""smoothness.""  In other words, it is appropriate for
 activities where it is more important to keep the frequency accurate
 in the short run than in the long run.  This includes most animation
 tasks, such as blinking a cursor at regular intervals.  It also includes
 tasks wherein regular activity is performed in response to human
 input, such as automatically repeating a character as long as a key
 is held down.

Parameters:
task - task to be scheduled.
firstTime - First time at which task is to be executed.
period - time in milliseconds between successive task executions.
Throws:
IllegalArgumentException - if firstTime.getTime() < 0, or
         period <= 0
IllegalStateException - if task was already scheduled or
         cancelled, timer was cancelled, or timer thread terminated.
NullPointerException - if task or firstTime is null


"
67,Timer,4,"void scheduleAtFixedRate(TimerTask task, long delay, long period)",True,"Schedules the specified task for repeated fixed-rate execution, beginning after the specified delay.","

scheduleAtFixedRate
public void scheduleAtFixedRate(TimerTask task,
                                long delay,
                                long period)
Schedules the specified task for repeated fixed-rate execution,
 beginning after the specified delay.  Subsequent executions take place
 at approximately regular intervals, separated by the specified period.

 In fixed-rate execution, each execution is scheduled relative to the
 scheduled execution time of the initial execution.  If an execution is
 delayed for any reason (such as garbage collection or other background
 activity), two or more executions will occur in rapid succession to
 ""catch up.""  In the long run, the frequency of execution will be
 exactly the reciprocal of the specified period (assuming the system
 clock underlying Object.wait(long) is accurate).

 Fixed-rate execution is appropriate for recurring activities that
 are sensitive to absolute time, such as ringing a chime every
 hour on the hour, or running scheduled maintenance every day at a
 particular time.  It is also appropriate for recurring activities
 where the total time to perform a fixed number of executions is
 important, such as a countdown timer that ticks once every second for
 ten seconds.  Finally, fixed-rate execution is appropriate for
 scheduling multiple repeating timer tasks that must remain synchronized
 with respect to one another.

Parameters:
task - task to be scheduled.
delay - delay in milliseconds before task is to be executed.
period - time in milliseconds between successive task executions.
Throws:
IllegalArgumentException - if delay < 0, or
         delay + System.currentTimeMillis() < 0, or
         period <= 0
IllegalStateException - if task was already scheduled or
         cancelled, timer was cancelled, or timer thread terminated.
NullPointerException - if task is null


"
67,Timer,5,void cancel(),True,"Terminates this timer, discarding any currently scheduled tasks.","

cancel
public void cancel()
Terminates this timer, discarding any currently scheduled tasks.
 Does not interfere with a currently executing task (if it exists).
 Once a timer has been terminated, its execution thread terminates
 gracefully, and no more tasks may be scheduled on it.

 Note that calling this method from within the run method of a
 timer task that was invoked by this timer absolutely guarantees that
 the ongoing task execution is the last task execution that will ever
 be performed by this timer.

 This method may be called repeatedly; the second and subsequent
 calls have no effect.

"
68,TimerTask,1,void cancel(),False,,NULL
68,TimerTask,2,boolean cancel(boolean mayInterruptIfRunning),False,,NULL
68,TimerTask,3,long scheduledExecutionTime(),True,Returns the scheduled execution time of the most recent actual execution of this task.,"

scheduledExecutionTime
public long scheduledExecutionTime()
Returns the scheduled execution time of the most recent
 actual execution of this task.  (If this method is invoked
 while task execution is in progress, the return value is the scheduled
 execution time of the ongoing task execution.)

 This method is typically invoked from within a task's run method, to
 determine whether the current execution of the task is sufficiently
 timely to warrant performing the scheduled activity:
 
   public void run() {
       if (System.currentTimeMillis() - scheduledExecutionTime() >=
           MAX_TARDINESS)
               return;  // Too late; skip this execution.
       // Perform the task
   }
 
 This method is typically not used in conjunction with
 fixed-delay execution repeating tasks, as their scheduled
 execution times are allowed to drift over time, and so are not terribly
 significant.

Returns:
the time at which the most recent execution of this task was
         scheduled to occur, in the format returned by Date.getTime().
         The return value is undefined if the task has yet to commence
         its first execution.
See Also:
Date.getTime()


"
68,TimerTask,4,void run(),True,The action to be performed by this timer task.,"

run
public abstract void run()
The action to be performed by this timer task.

Specified by:
run in interface Runnable
See Also:
Thread.run()


"
68,TimerTask,5,boolean isCancelled(),False,,NULL
69,TimeZone,1,TimeZone(String id),False,,NULL
69,TimeZone,2,"TimeZone(String id, boolean daylight)",False,,NULL
69,TimeZone,3,"TimeZone(String id, int rawOffset, String dst)",False,,NULL
69,TimeZone,4,"TimeZone(String id, int rawOffset, int dstSavings)",False,,NULL
69,TimeZone,5,"TimeZone(String id, int rawOffset, int dstSavings, int dstStart, int dstEnd)",False,,NULL
70,TreeMap,1,boolean containsKey(Object key),True,Returns true if this map contains a mapping for the specified key.,"

containsKey
public boolean containsKey(Object key)
Returns true if this map contains a mapping for the specified
 key.

Specified by:
containsKey in interface Map<K,V>
Overrides:
containsKey in class AbstractMap<K,V>
Parameters:
key - key whose presence in this map is to be tested
Returns:
true if this map contains a mapping for the
         specified key
Throws:
ClassCastException - if the specified key cannot be compared
         with the keys currently in the map
NullPointerException - if the specified key is null
         and this map uses natural ordering, or its comparator
         does not permit null keys


"
70,TreeMap,2,V get(Object key),True,"Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.","

get
public V get(Object key)
Returns the value to which the specified key is mapped,
 or null if this map contains no mapping for the key.

 More formally, if this map contains a mapping from a key
 k to a value v such that key compares
 equal to k according to the map's ordering, then this
 method returns v; otherwise it returns null.
 (There can be at most one such mapping.)

 A return value of null does not necessarily
 indicate that the map contains no mapping for the key; it's also
 possible that the map explicitly maps the key to null.
 The containsKey operation may be used to
 distinguish these two cases.

Specified by:
get in interface Map<K,V>
Overrides:
get in class AbstractMap<K,V>
Parameters:
key - the key whose associated value is to be returned
Returns:
the value to which the specified key is mapped, or
         null if this map contains no mapping for the key
Throws:
ClassCastException - if the specified key cannot be compared
         with the keys currently in the map
NullPointerException - if the specified key is null
         and this map uses natural ordering, or its comparator
         does not permit null keys


"
70,TreeMap,3,"V put(K key, V value)",True,Associates the specified value with the specified key in this map.,"

put
public V put(K key,
             V value)
Associates the specified value with the specified key in this map.
 If the map previously contained a mapping for the key, the old
 value is replaced.

Specified by:
put in interface Map<K,V>
Overrides:
put in class AbstractMap<K,V>
Parameters:
key - key with which the specified value is to be associated
value - value to be associated with the specified key
Returns:
the previous value associated with key, or
         null if there was no mapping for key.
         (A null return can also indicate that the map
         previously associated null with key.)
Throws:
ClassCastException - if the specified key cannot be compared
         with the keys currently in the map
NullPointerException - if the specified key is null
         and this map uses natural ordering, or its comparator
         does not permit null keys


"
70,TreeMap,4,V remove(Object key),True,Removes the mapping for this key from this TreeMap if present.,"

remove
public V remove(Object key)
Removes the mapping for this key from this TreeMap if present.

Specified by:
remove in interface Map<K,V>
Overrides:
remove in class AbstractMap<K,V>
Parameters:
key - key for which mapping should be removed
Returns:
the previous value associated with key, or
         null if there was no mapping for key.
         (A null return can also indicate that the map
         previously associated null with key.)
Throws:
ClassCastException - if the specified key cannot be compared
         with the keys currently in the map
NullPointerException - if the specified key is null
         and this map uses natural ordering, or its comparator
         does not permit null keys


"
70,TreeMap,5,"V replace(K key, V value)",True,Replaces the entry for the specified key only if it is currently mapped to some value.,"

replace
public V replace(K key,
                 V value)
Description copied from interface: Map
Replaces the entry for the specified key only if it is
 currently mapped to some value.

Specified by:
replace in interface Map<K,V>
Parameters:
key - key with which the specified value is associated
value - value to be associated with the specified key
Returns:
the previous value associated with the specified key, or
         null if there was no mapping for the key.
         (A null return can also indicate that the map
         previously associated null with the key,
         if the implementation supports null values.)


"
71,TreeSet,1,boolean add(E e),True,Adds the specified element to this set if it is not already present.,"

add
public boolean add(E e)
Adds the specified element to this set if it is not already present.
 More formally, adds the specified element e to this set if
 the set contains no element e2 such that
 (e==null ? e2==null : e.equals(e2)).
 If this set already contains the element, the call leaves the set
 unchanged and returns false.

Specified by:
add in interface Collection<E>
Specified by:
add in interface Set<E>
Overrides:
add in class AbstractCollection<E>
Parameters:
e - element to be added to this set
Returns:
true if this set did not already contain the specified
         element
Throws:
ClassCastException - if the specified object cannot be compared
         with the elements currently in this set
NullPointerException - if the specified element is null
         and this set uses natural ordering, or its comparator
         does not permit null elements


"
71,TreeSet,2,boolean addAll(Collection<? extends E> c),True,Adds all of the elements in the specified collection to this set.,"

addAll
public boolean addAll(Collection<? extends E> c)
Adds all of the elements in the specified collection to this set.

Specified by:
addAll in interface Collection<E>
Specified by:
addAll in interface Set<E>
Overrides:
addAll in class AbstractCollection<E>
Parameters:
c - collection containing elements to be added to this set
Returns:
true if this set changed as a result of the call
Throws:
ClassCastException - if the elements provided cannot be compared
         with the elements currently in the set
NullPointerException - if the specified collection is null or
         if any element is null and this set uses natural ordering, or
         its comparator does not permit null elements
See Also:
AbstractCollection.add(Object)


"
71,TreeSet,3,void clear(),True,Removes all of the elements from this set.,"

clear
public void clear()
Removes all of the elements from this set.
 The set will be empty after this call returns.

Specified by:
clear in interface Collection<E>
Specified by:
clear in interface Set<E>
Overrides:
clear in class AbstractCollection<E>


"
71,TreeSet,4,boolean contains(Object o),True,Returns true if this set contains the specified element.,"

contains
public boolean contains(Object o)
Returns true if this set contains the specified element.
 More formally, returns true if and only if this set
 contains an element e such that
 (o==null ? e==null : o.equals(e)).

Specified by:
contains in interface Collection<E>
Specified by:
contains in interface Set<E>
Overrides:
contains in class AbstractCollection<E>
Parameters:
o - object to be checked for containment in this set
Returns:
true if this set contains the specified element
Throws:
ClassCastException - if the specified object cannot be compared
         with the elements currently in the set
NullPointerException - if the specified element is null
         and this set uses natural ordering, or its comparator
         does not permit null elements


"
71,TreeSet,5,boolean remove(Object o),True,Removes the specified element from this set if it is present.,"

remove
public boolean remove(Object o)
Removes the specified element from this set if it is present.
 More formally, removes an element e such that
 (o==null ? e==null : o.equals(e)),
 if this set contains such an element.  Returns true if
 this set contained the element (or equivalently, if this set
 changed as a result of the call).  (This set will not contain the
 element once the call returns.)

Specified by:
remove in interface Collection<E>
Specified by:
remove in interface Set<E>
Overrides:
remove in class AbstractCollection<E>
Parameters:
o - object to be removed from this set, if present
Returns:
true if this set contained the specified element
Throws:
ClassCastException - if the specified object cannot be compared
         with the elements currently in this set
NullPointerException - if the specified element is null
         and this set uses natural ordering, or its comparator
         does not permit null elements


"
72,UUID,1,UUID fromString(String name),True,Creates a UUID from the string standard representation as described in the toString() method.,"

fromString
public static UUID fromString(String name)
Creates a UUID from the string standard representation as
 described in the toString() method.

Parameters:
name - A string that specifies a UUID
Returns:
A UUID with the specified value
Throws:
IllegalArgumentException - If name does not conform to the string representation as
          described in toString()


"
72,UUID,2,UUID randomUUID(),True,Static factory to retrieve a type 4 (pseudo randomly generated) UUID.,"

randomUUID
public static UUID randomUUID()
Static factory to retrieve a type 4 (pseudo randomly generated) UUID.

 The UUID is generated using a cryptographically strong pseudo
 random number generator.

Returns:
A randomly generated UUID


"
72,UUID,3,int compareTo(UUID uuid),True,Compares this UUID with the specified UUID.,"

compareTo
public int compareTo(UUID val)
Compares this UUID with the specified UUID.

  The first of two UUIDs is greater than the second if the most
 significant field in which the UUIDs differ is greater for the first
 UUID.

Specified by:
compareTo in interface Comparable<UUID>
Parameters:
val - UUID to which this UUID is to be compared
Returns:
-1, 0 or 1 as this UUID is less than, equal to, or
          greater than val


"
72,UUID,4,String toString(),True,Returns a String object representing this UUID.,"

toString
public String toString()
Returns a String object representing this UUID.

  The UUID string representation is as described by this BNF:
 
 
 UUID                   = <time_low> ""-"" <time_mid> ""-""
                          <time_high_and_version> ""-""
                          <variant_and_sequence> ""-""
                          <node>
 time_low               = 4*<hexOctet>
 time_mid               = 2*<hexOctet>
 time_high_and_version  = 2*<hexOctet>
 variant_and_sequence   = 2*<hexOctet>
 node                   = 6*<hexOctet>
 hexOctet               = <hexDigit><hexDigit>
 hexDigit               =
       ""0"" | ""1"" | ""2"" | ""3"" | ""4"" | ""5"" | ""6"" | ""7"" | ""8"" | ""9""
       | ""a"" | ""b"" | ""c"" | ""d"" | ""e"" | ""f""
       | ""A"" | ""B"" | ""C"" | ""D"" | ""E"" | ""F""
 

Overrides:
toString in class Object
Returns:
A string representation of this UUID


"
72,UUID,5,long timestamp(),True,The timestamp value associated with this UUID.,"

timestamp
public long timestamp()
The timestamp value associated with this UUID.

  The 60 bit timestamp value is constructed from the time_low,
 time_mid, and time_hi fields of this UUID.  The resulting
 timestamp is measured in 100-nanosecond units since midnight,
 October 15, 1582 UTC.

  The timestamp value is only meaningful in a time-based UUID, which
 has version type 1.  If this UUID is not a time-based UUID then
 this method throws UnsupportedOperationException.

Returns:
The timestamp of this UUID.
Throws:
UnsupportedOperationException - If this UUID is not a version 1 UUID


"
73,Vector,1,boolean add(E e),True,Appends the specified element to the end of this Vector.,"

add
public boolean add(E e)
Appends the specified element to the end of this Vector.

Specified by:
add in interface Collection<E>
Specified by:
add in interface List<E>
Overrides:
add in class AbstractList<E>
Parameters:
e - element to be appended to this Vector
Returns:
true (as specified by Collection.add(E))
Since:
1.2


"
73,Vector,2,"boolean add(int index, E element)",False,,NULL
73,Vector,3,E get(int index),True,Returns the element at the specified position in this Vector.,"

get
public E get(int index)
Returns the element at the specified position in this Vector.

Specified by:
get in interface List<E>
Specified by:
get in class AbstractList<E>
Parameters:
index - index of the element to return
Returns:
object at the specified index
Throws:
ArrayIndexOutOfBoundsException - if the index is out of range
            (index < 0 || index >= size())
Since:
1.2


"
73,Vector,4,"E set(int index, E element)",True,Replaces the element at the specified position in this Vector with the specified element.,"

set
public E set(int index,
             E element)
Replaces the element at the specified position in this Vector with the
 specified element.

Specified by:
set in interface List<E>
Overrides:
set in class AbstractList<E>
Parameters:
index - index of the element to replace
element - element to be stored at the specified position
Returns:
the element previously at the specified position
Throws:
ArrayIndexOutOfBoundsException - if the index is out of range
         (index < 0 || index >= size())
Since:
1.2


"
73,Vector,5,boolean remove(Object o),True,"Removes the first occurrence of the specified element in this Vector If the Vector does not contain the element, it is unchanged.","

remove
public boolean remove(Object o)
Removes the first occurrence of the specified element in this Vector
 If the Vector does not contain the element, it is unchanged.  More
 formally, removes the element with the lowest index i such that
 (o==null ? get(i)==null : o.equals(get(i))) (if such
 an element exists).

Specified by:
remove in interface Collection<E>
Specified by:
remove in interface List<E>
Overrides:
remove in class AbstractCollection<E>
Parameters:
o - element to be removed from this Vector, if present
Returns:
true if the Vector contained the specified element
Since:
1.2


"
74,WeakHashMap,1,V get(Object key),True,"Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.","

get
public V get(Object key)
Returns the value to which the specified key is mapped,
 or null if this map contains no mapping for the key.

 More formally, if this map contains a mapping from a key
 k to a value v such that (key==null ? k==null :
 key.equals(k)), then this method returns v; otherwise
 it returns null.  (There can be at most one such mapping.)

 A return value of null does not necessarily
 indicate that the map contains no mapping for the key; it's also
 possible that the map explicitly maps the key to null.
 The containsKey operation may be used to
 distinguish these two cases.

Specified by:
get in interface Map<K,V>
Overrides:
get in class AbstractMap<K,V>
Parameters:
key - the key whose associated value is to be returned
Returns:
the value to which the specified key is mapped, or
         null if this map contains no mapping for the key
See Also:
put(Object, Object)


"
74,WeakHashMap,2,"V put(K key, V value)",True,Associates the specified value with the specified key in this map.,"

put
public V put(K key,
             V value)
Associates the specified value with the specified key in this map.
 If the map previously contained a mapping for this key, the old
 value is replaced.

Specified by:
put in interface Map<K,V>
Overrides:
put in class AbstractMap<K,V>
Parameters:
key - key with which the specified value is to be associated.
value - value to be associated with the specified key.
Returns:
the previous value associated with key, or
         null if there was no mapping for key.
         (A null return can also indicate that the map
         previously associated null with key.)


"
74,WeakHashMap,3,V remove(Object key),True,Removes the mapping for a key from this weak hash map if it is present.,"

remove
public V remove(Object key)
Removes the mapping for a key from this weak hash map if it is present.
 More formally, if this map contains a mapping from key k to
 value v such that (key==null ?  k==null :
 key.equals(k)), that mapping is removed.  (The map can contain
 at most one such mapping.)

 Returns the value to which this map previously associated the key,
 or null if the map contained no mapping for the key.  A
 return value of null does not necessarily indicate
 that the map contained no mapping for the key; it's also possible
 that the map explicitly mapped the key to null.

 The map will not contain a mapping for the specified key once the
 call returns.

Specified by:
remove in interface Map<K,V>
Overrides:
remove in class AbstractMap<K,V>
Parameters:
key - key whose mapping is to be removed from the map
Returns:
the previous value associated with key, or
         null if there was no mapping for key


"
74,WeakHashMap,4,void clear(),True,Removes all of the mappings from this map.,"

clear
public void clear()
Removes all of the mappings from this map.
 The map will be empty after this call returns.

Specified by:
clear in interface Map<K,V>
Overrides:
clear in class AbstractMap<K,V>


"
74,WeakHashMap,5,boolean containsKey(Object key),True,Returns true if this map contains a mapping for the specified key.,"

containsKey
public boolean containsKey(Object key)
Returns true if this map contains a mapping for the
 specified key.

Specified by:
containsKey in interface Map<K,V>
Overrides:
containsKey in class AbstractMap<K,V>
Parameters:
key - The key whose presence in this map is to be tested
Returns:
true if there is a mapping for key;
         false otherwise


"
