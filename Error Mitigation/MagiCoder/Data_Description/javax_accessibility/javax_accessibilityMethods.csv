ClassName,Method,Return Type,Description,Full Description
AccessibleBundle,toDisplayString(),String,Gets localized string describing the key using the default locale.,"

toDisplayString
public String toDisplayString()
Gets localized string describing the key using the default locale.

Returns:
a localized String describing the key for the default locale


"
AccessibleBundle,toDisplayString(Locale locale),String,Obtains the key as a localized string.,"

toDisplayString
public String toDisplayString(Locale locale)
Obtains the key as a localized string.
 If a localized string cannot be found for the key, the
 locale independent key stored in the role will be returned.

Parameters:
locale - the locale for which to obtain a localized string
Returns:
a localized String for the key.


"
AccessibleBundle,"toDisplayString(String resourceBundleName, Locale locale)",protected String,Obtains the key as a localized string.,"

toDisplayString
protected String toDisplayString(String resourceBundleName,
                                 Locale locale)
Obtains the key as a localized string.
 If a localized string cannot be found for the key, the
 locale independent key stored in the role will be returned.
 This method is intended to be used only by subclasses so that they
 can specify their own resource bundles which contain localized
 strings for their keys.

Parameters:
resourceBundleName - the name of the resource bundle to use for
 lookup
locale - the locale for which to obtain a localized string
Returns:
a localized String for the key.


"
AccessibleBundle,toString(),String,Gets localized string describing the key using the default locale.,"

toString
public String toString()
Gets localized string describing the key using the default locale.

Overrides:
toString in class Object
Returns:
a localized String describing the key using the default locale
See Also:
toDisplayString(java.lang.String, java.util.Locale)


"
AccessibleContext,addPropertyChangeListener(PropertyChangeListener listener),void,Adds a PropertyChangeListener to the listener list.,"

addPropertyChangeListener
public void addPropertyChangeListener(PropertyChangeListener listener)
Adds a PropertyChangeListener to the listener list.
 The listener is registered for all Accessible properties and will
 be called when those properties change.

Parameters:
listener - The PropertyChangeListener to be added
See Also:
ACCESSIBLE_NAME_PROPERTY, 
ACCESSIBLE_DESCRIPTION_PROPERTY, 
ACCESSIBLE_STATE_PROPERTY, 
ACCESSIBLE_VALUE_PROPERTY, 
ACCESSIBLE_SELECTION_PROPERTY, 
ACCESSIBLE_TEXT_PROPERTY, 
ACCESSIBLE_VISIBLE_DATA_PROPERTY


"
AccessibleContext,"firePropertyChange(String propertyName, Object oldValue, Object newValue)",void,Support for reporting bound property changes.,"

firePropertyChange
public void firePropertyChange(String propertyName,
                               Object oldValue,
                               Object newValue)
Support for reporting bound property changes.  If oldValue and
 newValue are not equal and the PropertyChangeEvent listener list
 is not empty, then fire a PropertyChange event to each listener.
 In general, this is for use by the Accessible objects themselves
 and should not be called by an application program.

Parameters:
propertyName - The programmatic name of the property that
 was changed.
oldValue - The old value of the property.
newValue - The new value of the property.
See Also:
PropertyChangeSupport, 
addPropertyChangeListener(java.beans.PropertyChangeListener), 
removePropertyChangeListener(java.beans.PropertyChangeListener), 
ACCESSIBLE_NAME_PROPERTY, 
ACCESSIBLE_DESCRIPTION_PROPERTY, 
ACCESSIBLE_STATE_PROPERTY, 
ACCESSIBLE_VALUE_PROPERTY, 
ACCESSIBLE_SELECTION_PROPERTY, 
ACCESSIBLE_TEXT_PROPERTY, 
ACCESSIBLE_VISIBLE_DATA_PROPERTY


"
AccessibleContext,getAccessibleAction(),AccessibleAction,Gets the AccessibleAction associated with this object that supports one or more actions.,"

getAccessibleAction
public AccessibleAction getAccessibleAction()
Gets the AccessibleAction associated with this object that supports
 one or more actions.

Returns:
AccessibleAction if supported by object; else return null
See Also:
AccessibleAction


"
AccessibleContext,getAccessibleChild(int i),abstract Accessible,Returns the specified Accessible child of the object.,"

getAccessibleChild
public abstract Accessible getAccessibleChild(int i)
Returns the specified Accessible child of the object.  The Accessible
 children of an Accessible object are zero-based, so the first child
 of an Accessible child is at index 0, the second child is at index 1,
 and so on.

Parameters:
i - zero-based index of child
Returns:
the Accessible child of the object
See Also:
getAccessibleChildrenCount()


"
AccessibleContext,getAccessibleChildrenCount(),abstract int,Returns the number of accessible children of the object.,"

getAccessibleChildrenCount
public abstract int getAccessibleChildrenCount()
Returns the number of accessible children of the object.

Returns:
the number of accessible children of the object.


"
AccessibleContext,getAccessibleComponent(),AccessibleComponent,Gets the AccessibleComponent associated with this object that has a graphical representation.,"

getAccessibleComponent
public AccessibleComponent getAccessibleComponent()
Gets the AccessibleComponent associated with this object that has a
 graphical representation.

Returns:
AccessibleComponent if supported by object; else return null
See Also:
AccessibleComponent


"
AccessibleContext,getAccessibleDescription(),String,Gets the accessibleDescription property of this object.,"

getAccessibleDescription
public String getAccessibleDescription()
Gets the accessibleDescription property of this object.  The
 accessibleDescription property of this object is a short localized
 phrase describing the purpose of the object.  For example, in the
 case of a 'Cancel' button, the accessibleDescription could be
 'Ignore changes and close dialog box.'

Returns:
the localized description of the object; null if
 this object does not have a description
See Also:
setAccessibleDescription(java.lang.String)


"
AccessibleContext,getAccessibleEditableText(),AccessibleEditableText,Gets the AccessibleEditableText associated with this object presenting editable text on the display.,"

getAccessibleEditableText
public AccessibleEditableText getAccessibleEditableText()
Gets the AccessibleEditableText associated with this object
 presenting editable text on the display.

Returns:
AccessibleEditableText if supported by object; else return null
Since:
1.4
See Also:
AccessibleEditableText


"
AccessibleContext,getAccessibleIcon(),AccessibleIcon[],Gets the AccessibleIcons associated with an object that has one or more associated icons,"

getAccessibleIcon
public AccessibleIcon[] getAccessibleIcon()
Gets the AccessibleIcons associated with an object that has
 one or more associated icons

Returns:
an array of AccessibleIcon if supported by object;
 otherwise return null
Since:
1.3
See Also:
AccessibleIcon


"
AccessibleContext,getAccessibleIndexInParent(),abstract int,Gets the 0-based index of this object in its accessible parent.,"

getAccessibleIndexInParent
public abstract int getAccessibleIndexInParent()
Gets the 0-based index of this object in its accessible parent.

Returns:
the 0-based index of this object in its parent; -1 if this
 object does not have an accessible parent.
See Also:
getAccessibleParent(), 
getAccessibleChildrenCount(), 
getAccessibleChild(int)


"
AccessibleContext,getAccessibleName(),String,Gets the accessibleName property of this object.,"

getAccessibleName
public String getAccessibleName()
Gets the accessibleName property of this object.  The accessibleName
 property of an object is a localized String that designates the purpose
 of the object.  For example, the accessibleName property of a label
 or button might be the text of the label or button itself.  In the
 case of an object that doesn't display its name, the accessibleName
 should still be set.  For example, in the case of a text field used
 to enter the name of a city, the accessibleName for the en_US locale
 could be 'city.'

Returns:
the localized name of the object; null if this
 object does not have a name
See Also:
setAccessibleName(java.lang.String)


"
AccessibleContext,getAccessibleParent(),Accessible,Gets the Accessible parent of this object.,"

getAccessibleParent
public Accessible getAccessibleParent()
Gets the Accessible parent of this object.

Returns:
the Accessible parent of this object; null if this
 object does not have an Accessible parent


"
AccessibleContext,getAccessibleRelationSet(),AccessibleRelationSet,Gets the AccessibleRelationSet associated with an object,"

getAccessibleRelationSet
public AccessibleRelationSet getAccessibleRelationSet()
Gets the AccessibleRelationSet associated with an object

Returns:
an AccessibleRelationSet if supported by object;
 otherwise return null
Since:
1.3
See Also:
AccessibleRelationSet


"
AccessibleContext,getAccessibleRole(),abstract AccessibleRole,Gets the role of this object.,"

getAccessibleRole
public abstract AccessibleRole getAccessibleRole()
Gets the role of this object.  The role of the object is the generic
 purpose or use of the class of this object.  For example, the role
 of a push button is AccessibleRole.PUSH_BUTTON.  The roles in
 AccessibleRole are provided so component developers can pick from
 a set of predefined roles.  This enables assistive technologies to
 provide a consistent interface to various tweaked subclasses of
 components (e.g., use AccessibleRole.PUSH_BUTTON for all components
 that act like a push button) as well as distinguish between subclasses
 that behave differently (e.g., AccessibleRole.CHECK_BOX for check boxes
 and AccessibleRole.RADIO_BUTTON for radio buttons).
 Note that the AccessibleRole class is also extensible, so
 custom component developers can define their own AccessibleRole's
 if the set of predefined roles is inadequate.

Returns:
an instance of AccessibleRole describing the role of the object
See Also:
AccessibleRole


"
AccessibleContext,getAccessibleSelection(),AccessibleSelection,Gets the AccessibleSelection associated with this object which allows its Accessible children to be selected.,"

getAccessibleSelection
public AccessibleSelection getAccessibleSelection()
Gets the AccessibleSelection associated with this object which allows its
 Accessible children to be selected.

Returns:
AccessibleSelection if supported by object; else return null
See Also:
AccessibleSelection


"
AccessibleContext,getAccessibleStateSet(),abstract AccessibleStateSet,Gets the state set of this object.,"

getAccessibleStateSet
public abstract AccessibleStateSet getAccessibleStateSet()
Gets the state set of this object.  The AccessibleStateSet of an object
 is composed of a set of unique AccessibleStates.  A change in the
 AccessibleStateSet of an object will cause a PropertyChangeEvent to
 be fired for the ACCESSIBLE_STATE_PROPERTY property.

Returns:
an instance of AccessibleStateSet containing the
 current state set of the object
See Also:
AccessibleStateSet, 
AccessibleState, 
addPropertyChangeListener(java.beans.PropertyChangeListener)


"
AccessibleContext,getAccessibleTable(),AccessibleTable,Gets the AccessibleTable associated with an object,"

getAccessibleTable
public AccessibleTable getAccessibleTable()
Gets the AccessibleTable associated with an object

Returns:
an AccessibleTable if supported by object;
 otherwise return null
Since:
1.3
See Also:
AccessibleTable


"
AccessibleContext,getAccessibleText(),AccessibleText,Gets the AccessibleText associated with this object presenting text on the display.,"

getAccessibleText
public AccessibleText getAccessibleText()
Gets the AccessibleText associated with this object presenting
 text on the display.

Returns:
AccessibleText if supported by object; else return null
See Also:
AccessibleText


"
AccessibleContext,getAccessibleValue(),AccessibleValue,Gets the AccessibleValue associated with this object that supports a Numerical value.,"

getAccessibleValue
public AccessibleValue getAccessibleValue()
Gets the AccessibleValue associated with this object that supports a
 Numerical value.

Returns:
AccessibleValue if supported by object; else return null
See Also:
AccessibleValue


"
AccessibleContext,getLocale(),abstract Locale,Gets the locale of the component.,"

getLocale
public abstract Locale getLocale()
                          throws IllegalComponentStateException
Gets the locale of the component. If the component does not have a
 locale, then the locale of its parent is returned.

Returns:
this component's locale.  If this component does not have
 a locale, the locale of its parent is returned.
Throws:
IllegalComponentStateException - If the Component does not have its own locale and has not yet been
 added to a containment hierarchy such that the locale can be
 determined from the containing parent.


"
AccessibleContext,removePropertyChangeListener(PropertyChangeListener listener),void,Removes a PropertyChangeListener from the listener list.,"

removePropertyChangeListener
public void removePropertyChangeListener(PropertyChangeListener listener)
Removes a PropertyChangeListener from the listener list.
 This removes a PropertyChangeListener that was registered
 for all properties.

Parameters:
listener - The PropertyChangeListener to be removed


"
AccessibleContext,setAccessibleDescription(String s),void,Sets the accessible description of this object.,"

setAccessibleDescription
public void setAccessibleDescription(String s)
Sets the accessible description of this object.  Changing the
 name will cause a PropertyChangeEvent to be fired for the
 ACCESSIBLE_DESCRIPTION_PROPERTY property.

Parameters:
s - the new localized description of the object
See Also:
setAccessibleName(java.lang.String), 
addPropertyChangeListener(java.beans.PropertyChangeListener)


"
AccessibleContext,setAccessibleName(String s),void,Sets the localized accessible name of this object.,"

setAccessibleName
public void setAccessibleName(String s)
Sets the localized accessible name of this object.  Changing the
 name will cause a PropertyChangeEvent to be fired for the
 ACCESSIBLE_NAME_PROPERTY property.

Parameters:
s - the new localized name of the object.
See Also:
getAccessibleName(), 
addPropertyChangeListener(java.beans.PropertyChangeListener)


"
AccessibleContext,setAccessibleParent(Accessible a),void,Sets the Accessible parent of this object.,"

setAccessibleParent
public void setAccessibleParent(Accessible a)
Sets the Accessible parent of this object.  This is meant to be used
 only in the situations where the actual component's parent should
 not be treated as the component's accessible parent and is a method
 that should only be called by the parent of the accessible child.

Parameters:
a - - Accessible to be set as the parent


"
AccessibleHyperlink,doAccessibleAction(int i),abstract boolean,Performs the specified Action on the object,"

doAccessibleAction
public abstract boolean doAccessibleAction(int i)
Performs the specified Action on the object

Specified by:
doAccessibleAction in interface AccessibleAction
Parameters:
i - zero-based index of actions
Returns:
true if the action was performed; otherwise false.
See Also:
getAccessibleActionCount()


"
AccessibleHyperlink,getAccessibleActionAnchor(int i),abstract Object,"Returns an object that represents the link anchor, as appropriate for that link.","

getAccessibleActionAnchor
public abstract Object getAccessibleActionAnchor(int i)
Returns an object that represents the link anchor,
 as appropriate for that link.  E.g. from HTML:
   <a href=""http://www.sun.com/access"">Accessibility</a>
 this method would return a String containing the text:
 ""Accessibility"".

 Similarly, from this HTML:
   <a HREF=""#top""><img src=""top-hat.gif"" alt=""top hat""></a>
 this might return the object ImageIcon(""top-hat.gif"", ""top hat"");

Parameters:
i - zero-based index of the actions
Returns:
an Object representing the hypertext anchor
See Also:
getAccessibleActionCount()


"
AccessibleHyperlink,getAccessibleActionCount(),abstract int,"Returns the number of accessible actions available in this Link If there are more than one, the first one is NOT considered the ""default"" action of this LINK object (e.g.","

getAccessibleActionCount
public abstract int getAccessibleActionCount()
Returns the number of accessible actions available in this Link
 If there are more than one, the first one is NOT considered the
 ""default"" action of this LINK object (e.g. in an HTML imagemap).
 In general, links will have only one AccessibleAction in them.

Specified by:
getAccessibleActionCount in interface AccessibleAction
Returns:
the zero-based number of Actions in this object


"
AccessibleHyperlink,getAccessibleActionDescription(int i),abstract String,Returns a String description of this particular link action.,"

getAccessibleActionDescription
public abstract String getAccessibleActionDescription(int i)
Returns a String description of this particular
 link action.  This should be a text string
 associated with anchoring text, this should be the
 anchor text.  E.g. from HTML:
   <a HREF=""http://www.sun.com/access"">Accessibility</a>
 this method would return ""Accessibility"".

 Similarly, from this HTML:
   <a HREF=""#top""><img src=""top-hat.gif"" alt=""top hat""></a>
 this method would return ""top hat""

Specified by:
getAccessibleActionDescription in interface AccessibleAction
Parameters:
i - zero-based index of the actions
Returns:
a String description of the action
See Also:
getAccessibleActionCount()


"
AccessibleHyperlink,getAccessibleActionObject(int i),abstract Object,"Returns an object that represents the link action, as appropriate for that link.","

getAccessibleActionObject
public abstract Object getAccessibleActionObject(int i)
Returns an object that represents the link action,
 as appropriate for that link.  E.g. from HTML:
   <a HREF=""http://www.sun.com/access"">Accessibility</a>
 this method would return a
 java.net.URL(""http://www.sun.com/access.html"");

Parameters:
i - zero-based index of the actions
Returns:
an Object representing the hypertext link itself
See Also:
getAccessibleActionCount()


"
AccessibleHyperlink,getEndIndex(),abstract int,Gets the index with the hypertext document at which this link ends,"

getEndIndex
public abstract int getEndIndex()
Gets the index with the hypertext document at which this
 link ends

Returns:
index of end of link


"
AccessibleHyperlink,getStartIndex(),abstract int,Gets the index with the hypertext document at which this link begins,"

getStartIndex
public abstract int getStartIndex()
Gets the index with the hypertext document at which this
 link begins

Returns:
index of start of link


"
AccessibleHyperlink,isValid(),abstract boolean,"Since the document a link is associated with may have changed, this method returns whether or not this Link is still valid (with respect to the document it references).","

isValid
public abstract boolean isValid()
Since the document a link is associated with may have
 changed, this method returns whether or not this Link is still valid
 (with respect to the document it references).

Returns:
a flag indicating whether this link is still valid with
         respect to the AccessibleHypertext it belongs to


"
AccessibleRelation,getKey(),String,Returns the key for this relation,"

getKey
public String getKey()
Returns the key for this relation

Returns:
the key for this relation
See Also:
CONTROLLER_FOR, 
CONTROLLED_BY, 
LABEL_FOR, 
LABELED_BY, 
MEMBER_OF


"
AccessibleRelation,getTarget(),Object[],Returns the target objects for this relation,"

getTarget
public Object[] getTarget()
Returns the target objects for this relation

Returns:
an array containing the target objects for this relation


"
AccessibleRelation,setTarget(Object target),void,Sets the target object for this relation,"

setTarget
public void setTarget(Object target)
Sets the target object for this relation

Parameters:
target - the target object for this relation


"
AccessibleRelation,setTarget(Object[] target),void,Sets the target objects for this relation,"

setTarget
public void setTarget(Object[] target)
Sets the target objects for this relation

Parameters:
target - an array containing the target objects for this relation


"
AccessibleRelationSet,add(AccessibleRelation relation),boolean,Adds a new relation to the current relation set.,"

add
public boolean add(AccessibleRelation relation)
Adds a new relation to the current relation set.  If the relation
 is already in the relation set, the target(s) of the specified
 relation is merged with the target(s) of the existing relation.
 Otherwise,  the new relation is added to the relation set.

Parameters:
relation - the relation to add to the relation set
Returns:
true if relation is added to the relation set; false if the
 relation set is unchanged


"
AccessibleRelationSet,addAll(AccessibleRelation[] relations),void,Adds all of the relations to the existing relation set.,"

addAll
public void addAll(AccessibleRelation[] relations)
Adds all of the relations to the existing relation set.  Duplicate
 entries are ignored.

Parameters:
relations - AccessibleRelation array describing the relation set.


"
AccessibleRelationSet,clear(),void,Removes all the relations from the current relation set.,"

clear
public void clear()
Removes all the relations from the current relation set.

"
AccessibleRelationSet,contains(String key),boolean,Returns whether the relation set contains a relation that matches the specified key.,"

contains
public boolean contains(String key)
Returns whether the relation set contains a relation
 that matches the specified key.

Parameters:
key - the AccessibleRelation key
Returns:
true if the relation is in the relation set; otherwise false


"
AccessibleRelationSet,get(String key),AccessibleRelation,Returns the relation that matches the specified key.,"

get
public AccessibleRelation get(String key)
Returns the relation that matches the specified key.

Parameters:
key - the AccessibleRelation key
Returns:
the relation, if one exists, that matches the specified key.
 Otherwise, null is returned.


"
AccessibleRelationSet,remove(AccessibleRelation relation),boolean,Removes a relation from the current relation set.,"

remove
public boolean remove(AccessibleRelation relation)
Removes a relation from the current relation set.  If the relation
 is not in the set, the relation set will be unchanged and the
 return value will be false.  If the relation is in the relation
 set, it will be removed from the set and the return value will be
 true.

Parameters:
relation - the relation to remove from the relation set
Returns:
true if the relation is in the relation set; false if the
 relation set is unchanged


"
AccessibleRelationSet,size(),int,Returns the number of relations in the relation set.,"

size
public int size()
Returns the number of relations in the relation set.

Returns:
the number of relations in the relation set


"
AccessibleRelationSet,toArray(),AccessibleRelation[],Returns the current relation set as an array of AccessibleRelation,"

toArray
public AccessibleRelation[] toArray()
Returns the current relation set as an array of AccessibleRelation

Returns:
AccessibleRelation array contacting the current relation.


"
AccessibleRelationSet,toString(),String,Creates a localized String representing all the relations in the set using the default locale.,"

toString
public String toString()
Creates a localized String representing all the relations in the set
 using the default locale.

Overrides:
toString in class Object
Returns:
comma separated localized String
See Also:
AccessibleBundle.toDisplayString(java.lang.String, java.util.Locale)


"
AccessibleResourceBundle,getContents(),Object[][],Deprecated.,"

getContents
public Object[][] getContents()
Deprecated. 
Returns the mapping between the programmatic keys and the
 localized display strings.

Specified by:
getContents in class ListResourceBundle
Returns:
an array of an Object array representing a
 key-value pair.


"
AccessibleStateSet,add(AccessibleState state),boolean,Adds a new state to the current state set if it is not already present.,"

add
public boolean add(AccessibleState state)
Adds a new state to the current state set if it is not already
 present.  If the state is already in the state set, the state
 set is unchanged and the return value is false.  Otherwise,
 the state is added to the state set and the return value is
 true.

Parameters:
state - the state to add to the state set
Returns:
true if state is added to the state set; false if the state set
 is unchanged


"
AccessibleStateSet,addAll(AccessibleState[] states),void,Adds all of the states to the existing state set.,"

addAll
public void addAll(AccessibleState[] states)
Adds all of the states to the existing state set.  Duplicate entries
 are ignored.

Parameters:
states - AccessibleState array describing the state set.


"
AccessibleStateSet,clear(),void,Removes all the states from the current state set.,"

clear
public void clear()
Removes all the states from the current state set.

"
AccessibleStateSet,contains(AccessibleState state),boolean,Checks if the current state is in the state set.,"

contains
public boolean contains(AccessibleState state)
Checks if the current state is in the state set.

Parameters:
state - the state
Returns:
true if the state is in the state set; otherwise false


"
AccessibleStateSet,remove(AccessibleState state),boolean,Removes a state from the current state set.,"

remove
public boolean remove(AccessibleState state)
Removes a state from the current state set.  If the state is not
 in the set, the state set will be unchanged and the return value
 will be false.  If the state is in the state set, it will be removed
 from the set and the return value will be true.

Parameters:
state - the state to remove from the state set
Returns:
true if the state is in the state set; false if the state set
 will be unchanged


"
AccessibleStateSet,toArray(),AccessibleState[],Returns the current state set as an array of AccessibleState,"

toArray
public AccessibleState[] toArray()
Returns the current state set as an array of AccessibleState

Returns:
AccessibleState array containing the current state.


"
AccessibleStateSet,toString(),String,Creates a localized String representing all the states in the set using the default locale.,"

toString
public String toString()
Creates a localized String representing all the states in the set
 using the default locale.

Overrides:
toString in class Object
Returns:
comma separated localized String
See Also:
AccessibleBundle.toDisplayString(java.lang.String, java.util.Locale)


"
