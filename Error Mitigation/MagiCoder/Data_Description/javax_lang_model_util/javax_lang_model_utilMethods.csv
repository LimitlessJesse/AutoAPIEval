ClassName,Method,Return Type,Description,Full Description
AbstractAnnotationValueVisitor6,visit(AnnotationValue av),R,Visits an annotation value as if by passing itself to that value's accept method passing null for the additional parameter.,"

visit
public final R visit(AnnotationValue av)
Visits an annotation value as if by passing itself to that
 value's accept method passing
 null for the additional parameter.  The invocation
 v.visit(av) is equivalent to av.accept(v,
 null).

Specified by:
visit in interface AnnotationValueVisitor<R,P>
Parameters:
av - the value to visit
Returns:
a visitor-specified result


"
AbstractAnnotationValueVisitor6,"visit(AnnotationValue av, P p)",R,Visits an annotation value as if by passing itself to that value's accept.,"

visit
public final R visit(AnnotationValue av,
                     P p)
Visits an annotation value as if by passing itself to that
 value's accept.  The invocation
 v.visit(av) is equivalent to av.accept(v, p).

Specified by:
visit in interface AnnotationValueVisitor<R,P>
Parameters:
av - the value to visit
p - a visitor-specified parameter
Returns:
a visitor-specified result


"
AbstractAnnotationValueVisitor6,"visitUnknown(AnnotationValue av, P p)",R,Visits an unknown kind of annotation value.,"

visitUnknown
public R visitUnknown(AnnotationValue av,
                      P p)
Visits an unknown kind of annotation value.
 This can occur if the language evolves and new kinds
 of value can be stored in an annotation.

 The default implementation of this method in AbstractAnnotationValueVisitor6 will always throw UnknownAnnotationValueException.  This behavior is not
 required of a subclass.

Specified by:
visitUnknown in interface AnnotationValueVisitor<R,P>
Parameters:
av - the unknown value being visited
p - a visitor-specified parameter
Returns:
the result of the visit


"
AbstractElementVisitor6,visit(Element e),R,Visits any program element as if by passing itself to that element's accept method and passing null for the additional parameter.,"

visit
public final R visit(Element e)
Visits any program element as if by passing itself to that
 element's accept method and passing
 null for the additional parameter.  The invocation
 v.visit(elem) is equivalent to elem.accept(v,
 null).

Specified by:
visit in interface ElementVisitor<R,P>
Parameters:
e - the element to visit
Returns:
a visitor-specified result


"
AbstractElementVisitor6,"visit(Element e, P p)",R,Visits any program element as if by passing itself to that element's accept method.,"

visit
public final R visit(Element e,
                     P p)
Visits any program element as if by passing itself to that
 element's accept method.  The invocation
 v.visit(elem) is equivalent to elem.accept(v,
 p).

Specified by:
visit in interface ElementVisitor<R,P>
Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
a visitor-specified result


"
AbstractElementVisitor6,"visitUnknown(Element e, P p)",R,Visits an unknown kind of element.,"

visitUnknown
public R visitUnknown(Element e,
                      P p)
Visits an unknown kind of element.
 This can occur if the language evolves and new kinds
 of elements are added to the Element hierarchy.

  The default implementation of this method in
 AbstractElementVisitor6 will always throw
 UnknownElementException.
 This behavior is not required of a subclass.

Specified by:
visitUnknown in interface ElementVisitor<R,P>
Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
a visitor-specified result
Throws:
UnknownElementException - a visitor implementation may optionally throw this exception


"
AbstractTypeVisitor6,visit(TypeMirror t),R,Visits any type mirror as if by passing itself to that type mirror's accept method and passing null for the additional parameter.,"

visit
public final R visit(TypeMirror t)
Visits any type mirror as if by passing itself to that type
 mirror's accept method and passing
 null for the additional parameter.  The invocation
 v.visit(t) is equivalent to t.accept(v, null).

Specified by:
visit in interface TypeVisitor<R,P>
Parameters:
t - the type to visit
Returns:
a visitor-specified result


"
AbstractTypeVisitor6,"visit(TypeMirror t, P p)",R,Visits any type mirror as if by passing itself to that type mirror's accept method.,"

visit
public final R visit(TypeMirror t,
                     P p)
Visits any type mirror as if by passing itself to that type
 mirror's accept method.  The
 invocation v.visit(t, p) is equivalent to t.accept(v, p).

Specified by:
visit in interface TypeVisitor<R,P>
Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
a visitor-specified result


"
AbstractTypeVisitor6,"visitIntersection(IntersectionType t, P p)",R,Visits an IntersectionType element by calling visitUnknown.,"

visitIntersection
public R visitIntersection(IntersectionType t,
                           P p)
Visits an IntersectionType element by calling visitUnknown.

Specified by:
visitIntersection in interface TypeVisitor<R,P>
Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
the result of visitUnknown
Since:
1.8


"
AbstractTypeVisitor6,"visitUnion(UnionType t, P p)",R,Visits a UnionType element by calling visitUnknown.,"

visitUnion
public R visitUnion(UnionType t,
                    P p)
Visits a UnionType element by calling visitUnknown.

Specified by:
visitUnion in interface TypeVisitor<R,P>
Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
the result of visitUnknown
Since:
1.7


"
AbstractTypeVisitor6,"visitUnknown(TypeMirror t, P p)",R,Visits an unknown kind of type.,"

visitUnknown
public R visitUnknown(TypeMirror t,
                      P p)
Visits an unknown kind of type.
 This can occur if the language evolves and new kinds
 of types are added to the TypeMirror hierarchy.

  The default implementation of this method in AbstractTypeVisitor6 will always throw UnknownTypeException.  This behavior is not required of a
 subclass.

Specified by:
visitUnknown in interface TypeVisitor<R,P>
Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
a visitor-specified result
Throws:
UnknownTypeException - a visitor implementation may optionally throw this exception


"
AbstractTypeVisitor7,"visitUnion(UnionType t, P p)",abstract R,Visits a UnionType in a manner defined by a subclass.,"

visitUnion
public abstract R visitUnion(UnionType t,
                             P p)
Visits a UnionType in a manner defined by a subclass.

Specified by:
visitUnion in interface TypeVisitor<R,P>
Overrides:
visitUnion in class AbstractTypeVisitor6<R,P>
Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
the result of the visit as defined by a subclass


"
AbstractTypeVisitor8,"visitIntersection(IntersectionType t, P p)",abstract R,Visits an IntersectionType in a manner defined by a subclass.,"

visitIntersection
public abstract R visitIntersection(IntersectionType t,
                                    P p)
Visits an IntersectionType in a manner defined by a subclass.

Specified by:
visitIntersection in interface TypeVisitor<R,P>
Overrides:
visitIntersection in class AbstractTypeVisitor6<R,P>
Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
the result of the visit as defined by a subclass


"
ElementFilter,constructorsIn(Iterable<? extends Element> elements),static List<ExecutableElement>,Returns a list of constructors in elements.,"

constructorsIn
public static List<ExecutableElement> constructorsIn(Iterable<? extends Element> elements)
Returns a list of constructors in elements.

Parameters:
elements - the elements to filter
Returns:
a list of constructors in elements


"
ElementFilter,constructorsIn(Set<? extends Element> elements),static Set<ExecutableElement>,Returns a set of constructors in elements.,"

constructorsIn
public static Set<ExecutableElement> constructorsIn(Set<? extends Element> elements)
Returns a set of constructors in elements.

Parameters:
elements - the elements to filter
Returns:
a set of constructors in elements


"
ElementFilter,fieldsIn(Iterable<? extends Element> elements),static List<VariableElement>,Returns a list of fields in elements.,"

fieldsIn
public static List<VariableElement> fieldsIn(Iterable<? extends Element> elements)
Returns a list of fields in elements.

Parameters:
elements - the elements to filter
Returns:
a list of fields in elements


"
ElementFilter,fieldsIn(Set<? extends Element> elements),static Set<VariableElement>,Returns a set of fields in elements.,"

fieldsIn
public static Set<VariableElement> fieldsIn(Set<? extends Element> elements)
Returns a set of fields in elements.

Parameters:
elements - the elements to filter
Returns:
a set of fields in elements


"
ElementFilter,methodsIn(Iterable<? extends Element> elements),static List<ExecutableElement>,Returns a list of methods in elements.,"

methodsIn
public static List<ExecutableElement> methodsIn(Iterable<? extends Element> elements)
Returns a list of methods in elements.

Parameters:
elements - the elements to filter
Returns:
a list of methods in elements


"
ElementFilter,methodsIn(Set<? extends Element> elements),static Set<ExecutableElement>,Returns a set of methods in elements.,"

methodsIn
public static Set<ExecutableElement> methodsIn(Set<? extends Element> elements)
Returns a set of methods in elements.

Parameters:
elements - the elements to filter
Returns:
a set of methods in elements


"
ElementFilter,packagesIn(Iterable<? extends Element> elements),static List<PackageElement>,Returns a list of packages in elements.,"

packagesIn
public static List<PackageElement> packagesIn(Iterable<? extends Element> elements)
Returns a list of packages in elements.

Parameters:
elements - the elements to filter
Returns:
a list of packages in elements


"
ElementFilter,packagesIn(Set<? extends Element> elements),static Set<PackageElement>,Returns a set of packages in elements.,"

packagesIn
public static Set<PackageElement> packagesIn(Set<? extends Element> elements)
Returns a set of packages in elements.

Parameters:
elements - the elements to filter
Returns:
a set of packages in elements


"
ElementFilter,typesIn(Iterable<? extends Element> elements),static List<TypeElement>,Returns a list of types in elements.,"

typesIn
public static List<TypeElement> typesIn(Iterable<? extends Element> elements)
Returns a list of types in elements.

Parameters:
elements - the elements to filter
Returns:
a list of types in elements


"
ElementFilter,typesIn(Set<? extends Element> elements),static Set<TypeElement>,Returns a set of types in elements.,"

typesIn
public static Set<TypeElement> typesIn(Set<? extends Element> elements)
Returns a set of types in elements.

Parameters:
elements - the elements to filter
Returns:
a set of types in elements


"
ElementKindVisitor6,"visitExecutable(ExecutableElement e, P p)",R,"Visits an executable element, dispatching to the visit method for the specific kind of executable, CONSTRUCTOR, INSTANCE_INIT, METHOD, or STATIC_INIT.","

visitExecutable
public R visitExecutable(ExecutableElement e,
                         P p)
Visits an executable element, dispatching to the visit method
 for the specific kind of executable,
 CONSTRUCTOR, INSTANCE_INIT, METHOD, or
 STATIC_INIT.

Specified by:
visitExecutable in interface ElementVisitor<R,P>
Overrides:
visitExecutable in class SimpleElementVisitor6<R,P>
Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of the kind-specific visit method


"
ElementKindVisitor6,"visitExecutableAsConstructor(ExecutableElement e, P p)",R,Visits a CONSTRUCTOR executable element by calling defaultAction.,"

visitExecutableAsConstructor
public R visitExecutableAsConstructor(ExecutableElement e,
                                      P p)
Visits a CONSTRUCTOR executable element by calling
 defaultAction.

Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
ElementKindVisitor6,"visitExecutableAsInstanceInit(ExecutableElement e, P p)",R,Visits an INSTANCE_INIT executable element by calling defaultAction.,"

visitExecutableAsInstanceInit
public R visitExecutableAsInstanceInit(ExecutableElement e,
                                       P p)
Visits an INSTANCE_INIT executable element by calling
 defaultAction.

Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
ElementKindVisitor6,"visitExecutableAsMethod(ExecutableElement e, P p)",R,Visits a METHOD executable element by calling defaultAction.,"

visitExecutableAsMethod
public R visitExecutableAsMethod(ExecutableElement e,
                                 P p)
Visits a METHOD executable element by calling
 defaultAction.

Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
ElementKindVisitor6,"visitExecutableAsStaticInit(ExecutableElement e, P p)",R,Visits a STATIC_INIT executable element by calling defaultAction.,"

visitExecutableAsStaticInit
public R visitExecutableAsStaticInit(ExecutableElement e,
                                     P p)
Visits a STATIC_INIT executable element by calling
 defaultAction.

Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
ElementKindVisitor6,"visitPackage(PackageElement e, P p)",R,Visits a package element.,"

visitPackage
public R visitPackage(PackageElement e,
                      P p)
Visits a package element. This implementation calls defaultAction.

 The element argument has kind PACKAGE.

Specified by:
visitPackage in interface ElementVisitor<R,P>
Overrides:
visitPackage in class SimpleElementVisitor6<R,P>
Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
ElementKindVisitor6,"visitType(TypeElement e, P p)",R,"Visits a type element, dispatching to the visit method for the specific kind of type, ANNOTATION_TYPE, CLASS, ENUM, or INTERFACE.","

visitType
public R visitType(TypeElement e,
                   P p)
Visits a type element, dispatching to the visit method for the
 specific kind of type, ANNOTATION_TYPE, CLASS, ENUM, or INTERFACE.

Specified by:
visitType in interface ElementVisitor<R,P>
Overrides:
visitType in class SimpleElementVisitor6<R,P>
Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of the kind-specific visit method


"
ElementKindVisitor6,"visitTypeAsAnnotationType(TypeElement e, P p)",R,Visits an ANNOTATION_TYPE type element by calling defaultAction.,"

visitTypeAsAnnotationType
public R visitTypeAsAnnotationType(TypeElement e,
                                   P p)
Visits an ANNOTATION_TYPE type element by calling
 defaultAction.

Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
ElementKindVisitor6,"visitTypeAsClass(TypeElement e, P p)",R,Visits a CLASS type element by calling defaultAction.,"

visitTypeAsClass
public R visitTypeAsClass(TypeElement e,
                          P p)
Visits a CLASS type element by calling defaultAction.

Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
ElementKindVisitor6,"visitTypeAsEnum(TypeElement e, P p)",R,Visits an ENUM type element by calling defaultAction.,"

visitTypeAsEnum
public R visitTypeAsEnum(TypeElement e,
                         P p)
Visits an ENUM type element by calling defaultAction.

Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
ElementKindVisitor6,"visitTypeAsInterface(TypeElement e, P p)",R,Visits an INTERFACE type element by calling defaultAction.,"

visitTypeAsInterface
public R visitTypeAsInterface(TypeElement e,
                              P p)
Visits an INTERFACE type element by calling defaultAction.
.

Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
ElementKindVisitor6,"visitTypeParameter(TypeParameterElement e, P p)",R,Visits a type parameter element.,"

visitTypeParameter
public R visitTypeParameter(TypeParameterElement e,
                            P p)
Visits a type parameter element. This implementation calls defaultAction.

 The element argument has kind TYPE_PARAMETER.

Specified by:
visitTypeParameter in interface ElementVisitor<R,P>
Overrides:
visitTypeParameter in class SimpleElementVisitor6<R,P>
Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
ElementKindVisitor6,"visitVariable(VariableElement e, P p)",R,"Visits a variable element, dispatching to the visit method for the specific kind of variable, ENUM_CONSTANT, EXCEPTION_PARAMETER, FIELD, LOCAL_VARIABLE, PARAMETER, or RESOURCE_VARIABLE.","

visitVariable
public R visitVariable(VariableElement e,
                       P p)
Visits a variable element, dispatching to the visit method for
 the specific kind of variable, ENUM_CONSTANT, EXCEPTION_PARAMETER, FIELD,
 LOCAL_VARIABLE, PARAMETER, or RESOURCE_VARIABLE.

Specified by:
visitVariable in interface ElementVisitor<R,P>
Overrides:
visitVariable in class SimpleElementVisitor6<R,P>
Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of the kind-specific visit method


"
ElementKindVisitor6,"visitVariableAsEnumConstant(VariableElement e, P p)",R,Visits an ENUM_CONSTANT variable element by calling defaultAction.,"

visitVariableAsEnumConstant
public R visitVariableAsEnumConstant(VariableElement e,
                                     P p)
Visits an ENUM_CONSTANT variable element by calling
 defaultAction.

Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
ElementKindVisitor6,"visitVariableAsExceptionParameter(VariableElement e, P p)",R,Visits an EXCEPTION_PARAMETER variable element by calling defaultAction.,"

visitVariableAsExceptionParameter
public R visitVariableAsExceptionParameter(VariableElement e,
                                           P p)
Visits an EXCEPTION_PARAMETER variable element by calling
 defaultAction.

Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
ElementKindVisitor6,"visitVariableAsField(VariableElement e, P p)",R,Visits a FIELD variable element by calling defaultAction.,"

visitVariableAsField
public R visitVariableAsField(VariableElement e,
                              P p)
Visits a FIELD variable element by calling
 defaultAction.

Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
ElementKindVisitor6,"visitVariableAsLocalVariable(VariableElement e, P p)",R,Visits a LOCAL_VARIABLE variable element by calling defaultAction.,"

visitVariableAsLocalVariable
public R visitVariableAsLocalVariable(VariableElement e,
                                      P p)
Visits a LOCAL_VARIABLE variable element by calling
 defaultAction.

Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
ElementKindVisitor6,"visitVariableAsParameter(VariableElement e, P p)",R,Visits a PARAMETER variable element by calling defaultAction.,"

visitVariableAsParameter
public R visitVariableAsParameter(VariableElement e,
                                  P p)
Visits a PARAMETER variable element by calling
 defaultAction.

Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
ElementKindVisitor6,"visitVariableAsResourceVariable(VariableElement e, P p)",R,Visits a RESOURCE_VARIABLE variable element by calling visitUnknown.,"

visitVariableAsResourceVariable
public R visitVariableAsResourceVariable(VariableElement e,
                                         P p)
Visits a RESOURCE_VARIABLE variable element by calling
 visitUnknown.

Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of visitUnknown
Since:
1.7


"
ElementKindVisitor7,"visitVariableAsResourceVariable(VariableElement e, P p)",R,Visits a RESOURCE_VARIABLE variable element by calling defaultAction.,"

visitVariableAsResourceVariable
public R visitVariableAsResourceVariable(VariableElement e,
                                         P p)
Visits a RESOURCE_VARIABLE variable element by calling
 defaultAction.

Overrides:
visitVariableAsResourceVariable in class ElementKindVisitor6<R,P>
Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
ElementScanner6,scan(Element e),R,"Convenience method equivalent to v.scan(e, null).","

scan
public final R scan(Element e)
Convenience method equivalent to v.scan(e, null).

Parameters:
e - the element to scan
Returns:
the result of scanning e.


"
ElementScanner6,"scan(Element e, P p)",R,"Processes an element by calling e.accept(this, p); this method may be overridden by subclasses.","

scan
public R scan(Element e,
              P p)
Processes an element by calling e.accept(this, p);
 this method may be overridden by subclasses.

Parameters:
e - the element to scan
p - a scanner-specified parameter
Returns:
the result of visiting e.


"
ElementScanner6,"scan(Iterable<? extends Element> iterable, P p)",R,"Iterates over the given elements and calls scan(Element, P) on each one.","

scan
public final R scan(Iterable<? extends Element> iterable,
                    P p)
Iterates over the given elements and calls scan(Element, P) on each one.  Returns
 the result of the last call to scan or DEFAULT_VALUE for an empty iterable.

Parameters:
iterable - the elements to scan
p - additional parameter
Returns:
the scan of the last element or DEFAULT_VALUE if no elements


"
ElementScanner6,"visitExecutable(ExecutableElement e, P p)",R,Visits an executable element.,"

visitExecutable
public R visitExecutable(ExecutableElement e,
                         P p)
Visits an executable element. This implementation scans the parameters.

Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of scanning


"
ElementScanner6,"visitPackage(PackageElement e, P p)",R,Visits a package element.,"

visitPackage
public R visitPackage(PackageElement e,
                      P p)
Visits a package element. This implementation scans the enclosed elements.

Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of scanning


"
ElementScanner6,"visitType(TypeElement e, P p)",R,Visits a type element.,"

visitType
public R visitType(TypeElement e,
                   P p)
Visits a type element. This implementation scans the enclosed elements.

Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of scanning


"
ElementScanner6,"visitTypeParameter(TypeParameterElement e, P p)",R,Visits a type parameter element.,"

visitTypeParameter
public R visitTypeParameter(TypeParameterElement e,
                            P p)
Visits a type parameter element. This implementation scans the enclosed elements.

Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of scanning


"
ElementScanner6,"visitVariable(VariableElement e, P p)",R,Visits a variable element.,"

visitVariable
public R visitVariable(VariableElement e,
                       P p)
Visits a variable element.

 This implementation scans the enclosed elements, unless the
 element is a RESOURCE_VARIABLE in which case visitUnknown is called.

Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of scanning


"
ElementScanner7,"visitVariable(VariableElement e, P p)",R,This implementation scans the enclosed elements.,"

visitVariable
public R visitVariable(VariableElement e,
                       P p)
This implementation scans the enclosed elements.

Specified by:
visitVariable in interface ElementVisitor<R,P>
Overrides:
visitVariable in class ElementScanner6<R,P>
Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of scanning


"
SimpleAnnotationValueVisitor6,"defaultAction(Object o, P p)",protected R,The default action for visit methods.,"

defaultAction
protected R defaultAction(Object o,
                          P p)
The default action for visit methods.  The implementation in
 this class just returns DEFAULT_VALUE; subclasses will
 commonly override this method.

Parameters:
o - the value of the annotation
p - a visitor-specified parameter
Returns:
DEFAULT_VALUE unless overridden


"
SimpleAnnotationValueVisitor6,"visitAnnotation(AnnotationMirror a, P p)",R,Visits an annotation value in an annotation.,"

visitAnnotation
public R visitAnnotation(AnnotationMirror a,
                         P p)
Visits an annotation value in an annotation. This implementation calls defaultAction.

Parameters:
a - the value being visited
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
SimpleAnnotationValueVisitor6,"visitArray(List<? extends AnnotationValue> vals, P p)",R,Visits an array value in an annotation.,"

visitArray
public R visitArray(List<? extends AnnotationValue> vals,
                    P p)
Visits an array value in an annotation. This implementation calls defaultAction.

Parameters:
vals - the value being visited
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
SimpleAnnotationValueVisitor6,"visitBoolean(boolean b, P p)",R,Visits a boolean value in an annotation.,"

visitBoolean
public R visitBoolean(boolean b,
                      P p)
Visits a boolean value in an annotation. This implementation calls defaultAction.

Parameters:
b - the value being visited
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
SimpleAnnotationValueVisitor6,"visitByte(byte b, P p)",R,Visits a byte value in an annotation.,"

visitByte
public R visitByte(byte b,
                   P p)
Visits a byte value in an annotation. This implementation calls defaultAction.

Parameters:
b - the value being visited
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
SimpleAnnotationValueVisitor6,"visitChar(char c, P p)",R,Visits a char value in an annotation.,"

visitChar
public R visitChar(char c,
                   P p)
Visits a char value in an annotation. This implementation calls defaultAction.

Parameters:
c - the value being visited
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
SimpleAnnotationValueVisitor6,"visitDouble(double d, P p)",R,Visits a double value in an annotation.,"

visitDouble
public R visitDouble(double d,
                     P p)
Visits a double value in an annotation. This implementation calls defaultAction.

Parameters:
d - the value being visited
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
SimpleAnnotationValueVisitor6,"visitEnumConstant(VariableElement c, P p)",R,Visits an enum value in an annotation.,"

visitEnumConstant
public R visitEnumConstant(VariableElement c,
                           P p)
Visits an enum value in an annotation. This implementation calls defaultAction.

Parameters:
c - the value being visited
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
SimpleAnnotationValueVisitor6,"visitFloat(float f, P p)",R,Visits a float value in an annotation.,"

visitFloat
public R visitFloat(float f,
                    P p)
Visits a float value in an annotation. This implementation calls defaultAction.

Parameters:
f - the value being visited
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
SimpleAnnotationValueVisitor6,"visitInt(int i, P p)",R,Visits an int value in an annotation.,"

visitInt
public R visitInt(int i,
                  P p)
Visits an int value in an annotation. This implementation calls defaultAction.

Parameters:
i - the value being visited
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
SimpleAnnotationValueVisitor6,"visitLong(long i, P p)",R,Visits a long value in an annotation.,"

visitLong
public R visitLong(long i,
                   P p)
Visits a long value in an annotation. This implementation calls defaultAction.

Parameters:
i - the value being visited
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
SimpleAnnotationValueVisitor6,"visitShort(short s, P p)",R,Visits a short value in an annotation.,"

visitShort
public R visitShort(short s,
                    P p)
Visits a short value in an annotation. This implementation calls defaultAction.

Parameters:
s - the value being visited
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
SimpleAnnotationValueVisitor6,"visitString(String s, P p)",R,Visits a string value in an annotation.,"

visitString
public R visitString(String s,
                     P p)
Visits a string value in an annotation. This implementation calls defaultAction.

Parameters:
s - the value being visited
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
SimpleAnnotationValueVisitor6,"visitType(TypeMirror t, P p)",R,Visits a type value in an annotation.,"

visitType
public R visitType(TypeMirror t,
                   P p)
Visits a type value in an annotation. This implementation calls defaultAction.

Parameters:
t - the value being visited
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
SimpleElementVisitor6,"defaultAction(Element e, P p)",protected R,The default action for visit methods.,"

defaultAction
protected R defaultAction(Element e,
                          P p)
The default action for visit methods.  The implementation in
 this class just returns DEFAULT_VALUE; subclasses will
 commonly override this method.

Parameters:
e - the element to process
p - a visitor-specified parameter
Returns:
DEFAULT_VALUE unless overridden


"
SimpleElementVisitor6,"visitExecutable(ExecutableElement e, P p)",R,Visits an executable element.,"

visitExecutable
public R visitExecutable(ExecutableElement e,
                         P p)
Visits an executable element. This implementation calls defaultAction.

Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
SimpleElementVisitor6,"visitPackage(PackageElement e, P p)",R,Visits a package element.,"

visitPackage
public R visitPackage(PackageElement e,
                      P p)
Visits a package element. This implementation calls defaultAction.

Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
SimpleElementVisitor6,"visitType(TypeElement e, P p)",R,Visits a type element.,"

visitType
public R visitType(TypeElement e,
                   P p)
Visits a type element. This implementation calls defaultAction.

Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
SimpleElementVisitor6,"visitTypeParameter(TypeParameterElement e, P p)",R,Visits a type parameter element.,"

visitTypeParameter
public R visitTypeParameter(TypeParameterElement e,
                            P p)
Visits a type parameter element. This implementation calls defaultAction.

Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
SimpleElementVisitor6,"visitVariable(VariableElement e, P p)",R,Visits a variable element.,"

visitVariable
public R visitVariable(VariableElement e,
                       P p)
Visits a variable element.

 This implementation calls defaultAction, unless the
 element is a RESOURCE_VARIABLE in which case visitUnknown is called.

Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction or visitUnknown


"
SimpleElementVisitor7,"visitVariable(VariableElement e, P p)",R,This implementation calls defaultAction.,"

visitVariable
public R visitVariable(VariableElement e,
                       P p)
This implementation calls defaultAction.

Specified by:
visitVariable in interface ElementVisitor<R,P>
Overrides:
visitVariable in class SimpleElementVisitor6<R,P>
Parameters:
e - the element to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
SimpleTypeVisitor6,"defaultAction(TypeMirror e, P p)",protected R,The default action for visit methods.,"

defaultAction
protected R defaultAction(TypeMirror e,
                          P p)
The default action for visit methods.  The implementation in
 this class just returns DEFAULT_VALUE; subclasses will
 commonly override this method.

Parameters:
e - the type to process
p - a visitor-specified parameter
Returns:
DEFAULT_VALUE unless overridden


"
SimpleTypeVisitor6,"visitArray(ArrayType t, P p)",R,Visits an array type.,"

visitArray
public R visitArray(ArrayType t,
                    P p)
Visits an array type. This implementation calls defaultAction.

Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
SimpleTypeVisitor6,"visitDeclared(DeclaredType t, P p)",R,Visits a declared type.,"

visitDeclared
public R visitDeclared(DeclaredType t,
                       P p)
Visits a declared type. This implementation calls defaultAction.

Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
SimpleTypeVisitor6,"visitError(ErrorType t, P p)",R,Visits an error type.,"

visitError
public R visitError(ErrorType t,
                    P p)
Visits an error type. This implementation calls defaultAction.

Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
SimpleTypeVisitor6,"visitExecutable(ExecutableType t, P p)",R,Visits an executable type.,"

visitExecutable
public R visitExecutable(ExecutableType t,
                         P p)
Visits an executable type. This implementation calls defaultAction.

Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
SimpleTypeVisitor6,"visitNoType(NoType t, P p)",R,Visits a NoType instance.,"

visitNoType
public R visitNoType(NoType t,
                     P p)
Visits a NoType instance. This implementation calls defaultAction.

Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
SimpleTypeVisitor6,"visitNull(NullType t, P p)",R,Visits the null type.,"

visitNull
public R visitNull(NullType t,
                   P p)
Visits the null type. This implementation calls defaultAction.

Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
SimpleTypeVisitor6,"visitPrimitive(PrimitiveType t, P p)",R,Visits a primitive type.,"

visitPrimitive
public R visitPrimitive(PrimitiveType t,
                        P p)
Visits a primitive type. This implementation calls defaultAction.

Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
SimpleTypeVisitor6,"visitTypeVariable(TypeVariable t, P p)",R,Visits a type variable.,"

visitTypeVariable
public R visitTypeVariable(TypeVariable t,
                           P p)
Visits a type variable. This implementation calls defaultAction.

Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
SimpleTypeVisitor6,"visitWildcard(WildcardType t, P p)",R,Visits a wildcard type.,"

visitWildcard
public R visitWildcard(WildcardType t,
                       P p)
Visits a wildcard type. This implementation calls defaultAction.

Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
SimpleTypeVisitor7,"visitUnion(UnionType t, P p)",R,This implementation visits a UnionType by calling defaultAction.,"

visitUnion
public R visitUnion(UnionType t,
                    P p)
This implementation visits a UnionType by calling
 defaultAction.

Specified by:
visitUnion in interface TypeVisitor<R,P>
Overrides:
visitUnion in class AbstractTypeVisitor6<R,P>
Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
SimpleTypeVisitor8,"visitIntersection(IntersectionType t, P p)",R,This implementation visits an IntersectionType by calling defaultAction.,"

visitIntersection
public R visitIntersection(IntersectionType t,
                           P p)
This implementation visits an IntersectionType by calling
 defaultAction.

Specified by:
visitIntersection in interface TypeVisitor<R,P>
Overrides:
visitIntersection in class AbstractTypeVisitor6<R,P>
Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
TypeKindVisitor6,"visitNoType(NoType t, P p)",R,"Visits a NoType instance, dispatching to the visit method for the specific kind of pseudo-type: VOID, PACKAGE, or NONE.","

visitNoType
public R visitNoType(NoType t,
                     P p)
Visits a NoType instance, dispatching to the visit method for
 the specific kind of pseudo-type:
 VOID, PACKAGE, or NONE.

Specified by:
visitNoType in interface TypeVisitor<R,P>
Overrides:
visitNoType in class SimpleTypeVisitor6<R,P>
Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
the result of the kind-specific visit method


"
TypeKindVisitor6,"visitNoTypeAsNone(NoType t, P p)",R,Visits a NONE pseudo-type by calling defaultAction.,"

visitNoTypeAsNone
public R visitNoTypeAsNone(NoType t,
                           P p)
Visits a NONE pseudo-type by calling
 defaultAction.

Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
TypeKindVisitor6,"visitNoTypeAsPackage(NoType t, P p)",R,Visits a PACKAGE pseudo-type by calling defaultAction.,"

visitNoTypeAsPackage
public R visitNoTypeAsPackage(NoType t,
                              P p)
Visits a PACKAGE pseudo-type by calling
 defaultAction.

Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
TypeKindVisitor6,"visitNoTypeAsVoid(NoType t, P p)",R,Visits a VOID pseudo-type by calling defaultAction.,"

visitNoTypeAsVoid
public R visitNoTypeAsVoid(NoType t,
                           P p)
Visits a VOID pseudo-type by calling
 defaultAction.

Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
TypeKindVisitor6,"visitPrimitive(PrimitiveType t, P p)",R,"Visits a primitive type, dispatching to the visit method for the specific kind of primitive type: BOOLEAN, BYTE, etc.","

visitPrimitive
public R visitPrimitive(PrimitiveType t,
                        P p)
Visits a primitive type, dispatching to the visit method for
 the specific kind of primitive type:
 BOOLEAN, BYTE, etc.

Specified by:
visitPrimitive in interface TypeVisitor<R,P>
Overrides:
visitPrimitive in class SimpleTypeVisitor6<R,P>
Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
the result of the kind-specific visit method


"
TypeKindVisitor6,"visitPrimitiveAsBoolean(PrimitiveType t, P p)",R,Visits a BOOLEAN primitive type by calling defaultAction.,"

visitPrimitiveAsBoolean
public R visitPrimitiveAsBoolean(PrimitiveType t,
                                 P p)
Visits a BOOLEAN primitive type by calling
 defaultAction.

Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
TypeKindVisitor6,"visitPrimitiveAsByte(PrimitiveType t, P p)",R,Visits a BYTE primitive type by calling defaultAction.,"

visitPrimitiveAsByte
public R visitPrimitiveAsByte(PrimitiveType t,
                              P p)
Visits a BYTE primitive type by calling
 defaultAction.

Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
TypeKindVisitor6,"visitPrimitiveAsChar(PrimitiveType t, P p)",R,Visits a CHAR primitive type by calling defaultAction.,"

visitPrimitiveAsChar
public R visitPrimitiveAsChar(PrimitiveType t,
                              P p)
Visits a CHAR primitive type by calling
 defaultAction.

Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
TypeKindVisitor6,"visitPrimitiveAsDouble(PrimitiveType t, P p)",R,Visits a DOUBLE primitive type by calling defaultAction.,"

visitPrimitiveAsDouble
public R visitPrimitiveAsDouble(PrimitiveType t,
                                P p)
Visits a DOUBLE primitive type by calling
 defaultAction.

Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
TypeKindVisitor6,"visitPrimitiveAsFloat(PrimitiveType t, P p)",R,Visits a FLOAT primitive type by calling defaultAction.,"

visitPrimitiveAsFloat
public R visitPrimitiveAsFloat(PrimitiveType t,
                               P p)
Visits a FLOAT primitive type by calling
 defaultAction.

Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
TypeKindVisitor6,"visitPrimitiveAsInt(PrimitiveType t, P p)",R,Visits an INT primitive type by calling defaultAction.,"

visitPrimitiveAsInt
public R visitPrimitiveAsInt(PrimitiveType t,
                             P p)
Visits an INT primitive type by calling
 defaultAction.

Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
TypeKindVisitor6,"visitPrimitiveAsLong(PrimitiveType t, P p)",R,Visits a LONG primitive type by calling defaultAction.,"

visitPrimitiveAsLong
public R visitPrimitiveAsLong(PrimitiveType t,
                              P p)
Visits a LONG primitive type by calling
 defaultAction.

Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
TypeKindVisitor6,"visitPrimitiveAsShort(PrimitiveType t, P p)",R,Visits a SHORT primitive type by calling defaultAction.,"

visitPrimitiveAsShort
public R visitPrimitiveAsShort(PrimitiveType t,
                               P p)
Visits a SHORT primitive type by calling
 defaultAction.

Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
TypeKindVisitor7,"visitUnion(UnionType t, P p)",R,This implementation visits a UnionType by calling defaultAction.,"

visitUnion
public R visitUnion(UnionType t,
                    P p)
This implementation visits a UnionType by calling
 defaultAction.

Specified by:
visitUnion in interface TypeVisitor<R,P>
Overrides:
visitUnion in class AbstractTypeVisitor6<R,P>
Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
TypeKindVisitor8,"visitIntersection(IntersectionType t, P p)",R,This implementation visits an IntersectionType by calling defaultAction.,"

visitIntersection
public R visitIntersection(IntersectionType t,
                           P p)
This implementation visits an IntersectionType by calling
 defaultAction.

Specified by:
visitIntersection in interface TypeVisitor<R,P>
Overrides:
visitIntersection in class AbstractTypeVisitor6<R,P>
Parameters:
t - the type to visit
p - a visitor-specified parameter
Returns:
the result of defaultAction


"
