Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,AsynchronousChannelGroup,1,"AsynchronousChannelGroup newInstance(int nThreads, ThreadFactory threadFactory, ExecutorService executor)",False,,NULL
0,AsynchronousChannelGroup,2,"AsynchronousChannelGroup newInstance(ExecutorService executor, AsynchronousChannelGroup parent)",False,,NULL
0,AsynchronousChannelGroup,3,AsynchronousChannelGroup newInstance(ExecutorService executor),False,,NULL
0,AsynchronousChannelGroup,4,AsynchronousChannelGroup newInstance(),False,,NULL
0,AsynchronousChannelGroup,5,AsynchronousChannelGroup open(),False,,NULL
1,AsynchronousFileChannel,1,"int read(ByteBuffer dst, long position)",False,,NULL
1,AsynchronousFileChannel,2,"Future<Integer> read(ByteBuffer dst, long position, Executor executor)",False,,NULL
1,AsynchronousFileChannel,3,"int write(ByteBuffer src, long position)",False,,NULL
1,AsynchronousFileChannel,4,"Future<Integer> write(ByteBuffer src, long position, Executor executor)",False,,NULL
1,AsynchronousFileChannel,5,long size(),True,Returns the current size of this channel's file.,"

size
public abstract long size()
                   throws IOException
Returns the current size of this channel's file.

Returns:
The current size of this channel's file, measured in bytes
Throws:
ClosedChannelException - If this channel is closed
IOException - If some other I/O error occurs


"
2,AsynchronousServerSocketChannel,1,AsynchronousServerSocketChannel open(),True,Opens an asynchronous server-socket channel.,"

open
public static AsynchronousServerSocketChannel open()
                                            throws IOException
Opens an asynchronous server-socket channel.

  This method returns an asynchronous server socket channel that is
 bound to the default group. This method is equivalent to evaluating
 the expression:
 
 open((AsynchronousChannelGroup)null);
 

Returns:
A new asynchronous server socket channel
Throws:
IOException - If an I/O error occurs


"
2,AsynchronousServerSocketChannel,2,AsynchronousServerSocketChannel bind(SocketAddress localAddress),True,Binds the channel's socket to a local address and configures the socket to listen for connections.,"

bind
public final AsynchronousServerSocketChannel bind(SocketAddress local)
                                           throws IOException
Binds the channel's socket to a local address and configures the socket to
 listen for connections.

  An invocation of this method is equivalent to the following:
 
 bind(local, 0);
 

Specified by:
bind in interface NetworkChannel
Parameters:
local - The local address to bind the socket, or null to bind
          to an automatically assigned socket address
Returns:
This channel
Throws:
AlreadyBoundException - If the socket is already bound
UnsupportedAddressTypeException - If the type of the given address is not supported
SecurityException - If a security manager is installed and it denies an unspecified
          permission. An implementation of this interface should specify
          any required permissions.
ClosedChannelException - If the channel is closed
IOException - If some other I/O error occurs
See Also:
NetworkChannel.getLocalAddress()


"
2,AsynchronousServerSocketChannel,3,"AsynchronousServerSocketChannel accept(CompletionHandler<AsynchronousSocketChannel,? super A attachment> handler)",False,,NULL
2,AsynchronousServerSocketChannel,4,"AsynchronousServerSocketChannel accept(CompletionHandler<AsynchronousSocketChannel,? super A attachment> handler, A attachment)",False,,NULL
2,AsynchronousServerSocketChannel,5,"AsynchronousServerSocketChannel accept(Executor executor, CompletionHandler<AsynchronousSocketChannel,? super A attachment> handler)",False,,NULL
3,AsynchronousSocketChannel,1,AsynchronousSocketChannel open(),True,Opens an asynchronous socket channel.,"

open
public static AsynchronousSocketChannel open()
                                      throws IOException
Opens an asynchronous socket channel.

  This method returns an asynchronous socket channel that is bound to
 the default group.This method is equivalent to evaluating the
 expression:
 
 open((AsynchronousChannelGroup)null);
 

Returns:
A new asynchronous socket channel
Throws:
IOException - If an I/O error occurs


"
3,AsynchronousSocketChannel,2,AsynchronousSocketChannel bind(SocketAddress local),True,Binds the channel's socket to a local address.,"

bind
public abstract AsynchronousSocketChannel bind(SocketAddress local)
                                        throws IOException
Description copied from interface: NetworkChannel
Binds the channel's socket to a local address.

  This method is used to establish an association between the socket and
 a local address. Once an association is established then the socket remains
 bound until the channel is closed. If the local parameter has the
 value null then the socket will be bound to an address that is
 assigned automatically.

Specified by:
bind in interface NetworkChannel
Parameters:
local - The address to bind the socket, or null to bind the socket
          to an automatically assigned socket address
Returns:
This channel
Throws:
ConnectionPendingException - If a connection operation is already in progress on this channel
AlreadyBoundException - If the socket is already bound
UnsupportedAddressTypeException - If the type of the given address is not supported
ClosedChannelException - If the channel is closed
IOException - If some other I/O error occurs
SecurityException - If a security manager has been installed and its
          checkListen method denies
          the operation
See Also:
NetworkChannel.getLocalAddress()


"
3,AsynchronousSocketChannel,3,AsynchronousSocketChannel connect(SocketAddress remote),False,,NULL
3,AsynchronousSocketChannel,4,AsynchronousSocketChannel finishConnect(),False,,NULL
3,AsynchronousSocketChannel,5,"AsynchronousSocketChannel read(ByteBuffer dst, A attachment, CompletionHandler<Integer,? super A> handler)",False,,NULL
3,AsynchronousSocketChannel,6,"AsynchronousSocketChannel write(ByteBuffer src, A attachment, CompletionHandler<Integer,? super A> handler)",False,,NULL
3,AsynchronousSocketChannel,7,AsynchronousSocketChannel close(),False,,NULL
3,AsynchronousSocketChannel,8,AsynchronousSocketChannel isOpen(),False,,NULL
3,AsynchronousSocketChannel,9,AsynchronousSocketChannel getLocalAddress(),False,,NULL
3,AsynchronousSocketChannel,10,AsynchronousSocketChannel getRemoteAddress(),False,,NULL
3,AsynchronousSocketChannel,11,"AsynchronousSocketChannel setOption(SocketOption<T> name, T value)",False,,NULL
3,AsynchronousSocketChannel,12,AsynchronousSocketChannel getOption(SocketOption<T> name),False,,NULL
3,AsynchronousSocketChannel,13,AsynchronousSocketChannel supportedOptions(),False,,NULL
3,AsynchronousSocketChannel,14,"AsynchronousSocketChannel bind(SocketAddress local, A attachment, CompletionHandler<Void,? super A> handler)",False,,NULL
3,AsynchronousSocketChannel,15,"AsynchronousSocketChannel connect(SocketAddress remote, A attachment, CompletionHandler<Void,? super A> handler)",False,,NULL
3,AsynchronousSocketChannel,16,"AsynchronousSocketChannel finishConnect(A attachment, CompletionHandler<Void,? super A> handler)",False,,NULL
3,AsynchronousSocketChannel,17,"AsynchronousSocketChannel read(ByteBuffer dst, A attachment, Long timeout, TimeUnit unit, CompletionHandler<Integer,? super A> handler)",False,,NULL
3,AsynchronousSocketChannel,18,"AsynchronousSocketChannel write(ByteBuffer src, A attachment, Long timeout, TimeUnit unit, CompletionHandler<Integer,? super A> handler)",False,,NULL
3,AsynchronousSocketChannel,19,"AsynchronousSocketChannel close(A attachment, CompletionHandler<Void,? super A> handler)",False,,NULL
3,AsynchronousSocketChannel,20,"AsynchronousSocketChannel isOpen(A attachment, CompletionHandler<Boolean,? super A> handler)",False,,NULL
3,AsynchronousSocketChannel,21,"AsynchronousSocketChannel getLocalAddress(A attachment, CompletionHandler<SocketAddress,? super A> handler)",False,,NULL
3,AsynchronousSocketChannel,22,"AsynchronousSocketChannel getRemoteAddress(A attachment, CompletionHandler<SocketAddress,? super A> handler)",False,,NULL
3,AsynchronousSocketChannel,23,"AsynchronousSocketChannel setOption(SocketOption<T> name, T value, A attachment, CompletionHandler<Void,? super A> handler)",False,,NULL
3,AsynchronousSocketChannel,24,"AsynchronousSocketChannel getOption(SocketOption<T> name, A attachment, CompletionHandler<T,? super A> handler)",False,,NULL
3,AsynchronousSocketChannel,25,"AsynchronousSocketChannel supportedOptions(A attachment, CompletionHandler<Set<SocketOption<?>>,? super A> handler)",False,,NULL
4,Channels,1,FileChannel getChannel(),False,,NULL
4,Channels,2,SocketChannel socket(),False,,NULL
4,Channels,3,ServerSocketChannel serverSocket(),False,,NULL
4,Channels,4,DatagramChannel datagram(),False,,NULL
4,Channels,5,AsynchronousFileChannel asyncFileChannel(),False,,NULL
5,DatagramChannel,1,DatagramChannel open(),True,Opens a datagram channel.,"

open
public static DatagramChannel open()
                            throws IOException
Opens a datagram channel.

  The new channel is created by invoking the openDatagramChannel method of the system-wide default SelectorProvider object.  The channel will not be
 connected.

  The ProtocolFamily of the channel's socket
 is platform (and possibly configuration) dependent and therefore unspecified.
 The open allows the protocol family to be
 selected when opening a datagram channel, and should be used to open
 datagram channels that are intended for Internet Protocol multicasting.

Returns:
A new datagram channel
Throws:
IOException - If an I/O error occurs


"
5,DatagramChannel,2,DatagramChannel bind(SocketAddress local),True,Binds the channel's socket to a local address.,"

bind
public abstract DatagramChannel bind(SocketAddress local)
                              throws IOException
Description copied from interface: NetworkChannel
Binds the channel's socket to a local address.

  This method is used to establish an association between the socket and
 a local address. Once an association is established then the socket remains
 bound until the channel is closed. If the local parameter has the
 value null then the socket will be bound to an address that is
 assigned automatically.

Specified by:
bind in interface NetworkChannel
Parameters:
local - The address to bind the socket, or null to bind the socket
          to an automatically assigned socket address
Returns:
This channel
Throws:
AlreadyBoundException - If the socket is already bound
UnsupportedAddressTypeException - If the type of the given address is not supported
ClosedChannelException - If the channel is closed
IOException - If some other I/O error occurs
SecurityException - If a security manager has been installed and its checkListen method denies the
          operation
Since:
1.7
See Also:
NetworkChannel.getLocalAddress()


"
5,DatagramChannel,3,int read(ByteBuffer dst),True,Reads a datagram from this channel.,"

read
public abstract int read(ByteBuffer dst)
                  throws IOException
Reads a datagram from this channel.

  This method may only be invoked if this channel's socket is
 connected, and it only accepts datagrams from the socket's peer.  If
 there are more bytes in the datagram than remain in the given buffer
 then the remainder of the datagram is silently discarded.  Otherwise
 this method behaves exactly as specified in the ReadableByteChannel interface.  

Specified by:
read in interface ReadableByteChannel
Parameters:
dst - The buffer into which bytes are to be transferred
Returns:
The number of bytes read, possibly zero, or -1 if the
          channel has reached end-of-stream
Throws:
NotYetConnectedException - If this channel's socket is not connected
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the read operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the read operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
5,DatagramChannel,4,int write(ByteBuffer src),True,Writes a datagram to this channel.,"

write
public abstract int write(ByteBuffer src)
                   throws IOException
Writes a datagram to this channel.

  This method may only be invoked if this channel's socket is
 connected, in which case it sends datagrams directly to the socket's
 peer.  Otherwise it behaves exactly as specified in the WritableByteChannel interface.  

Specified by:
write in interface WritableByteChannel
Parameters:
src - The buffer from which bytes are to be retrieved
Returns:
The number of bytes written, possibly zero
Throws:
NotYetConnectedException - If this channel's socket is not connected
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the write operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the write operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
5,DatagramChannel,5,"long read(ByteBuffer[] dsts, int offset, int length)",True,Reads a datagram from this channel.,"

read
public abstract long read(ByteBuffer[] dsts,
                          int offset,
                          int length)
                   throws IOException
Reads a datagram from this channel.

  This method may only be invoked if this channel's socket is
 connected, and it only accepts datagrams from the socket's peer.  If
 there are more bytes in the datagram than remain in the given buffers
 then the remainder of the datagram is silently discarded.  Otherwise
 this method behaves exactly as specified in the ScatteringByteChannel interface.  

Specified by:
read in interface ScatteringByteChannel
Parameters:
dsts - The buffers into which bytes are to be transferred
offset - The offset within the buffer array of the first buffer into
         which bytes are to be transferred; must be non-negative and no
         larger than dsts.length
length - The maximum number of buffers to be accessed; must be
         non-negative and no larger than
         dsts.length - offset
Returns:
The number of bytes read, possibly zero,
         or -1 if the channel has reached end-of-stream
Throws:
NotYetConnectedException - If this channel's socket is not connected
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the read operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the read operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
5,DatagramChannel,6,"long write(ByteBuffer[] srcs, int offset, int length)",True,Writes a datagram to this channel.,"

write
public abstract long write(ByteBuffer[] srcs,
                           int offset,
                           int length)
                    throws IOException
Writes a datagram to this channel.

  This method may only be invoked if this channel's socket is
 connected, in which case it sends datagrams directly to the socket's
 peer.  Otherwise it behaves exactly as specified in the GatheringByteChannel interface.  

Specified by:
write in interface GatheringByteChannel
Parameters:
srcs - The buffers from which bytes are to be retrieved
offset - The offset within the buffer array of the first buffer from
         which bytes are to be retrieved; must be non-negative and no
         larger than srcs.length
length - The maximum number of buffers to be accessed; must be
         non-negative and no larger than
         srcs.length - offset
Returns:
The number of bytes sent, which will be either the number
           of bytes that were remaining in the source buffer when this
           method was invoked or, if this channel is non-blocking, may be
           zero if there was insufficient room for the datagram in the
           underlying output buffer
Throws:
NotYetConnectedException - If this channel's socket is not connected
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the write operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the write operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
5,DatagramChannel,7,SocketAddress receive(ByteBuffer dst),True,Receives a datagram via this channel.,"

receive
public abstract SocketAddress receive(ByteBuffer dst)
                               throws IOException
Receives a datagram via this channel.

  If a datagram is immediately available, or if this channel is in
 blocking mode and one eventually becomes available, then the datagram is
 copied into the given byte buffer and its source address is returned.
 If this channel is in non-blocking mode and a datagram is not
 immediately available then this method immediately returns
 null.

  The datagram is transferred into the given byte buffer starting at
 its current position, as if by a regular read operation.  If there
 are fewer bytes remaining in the buffer than are required to hold the
 datagram then the remainder of the datagram is silently discarded.

  This method performs exactly the same security checks as the receive method of the DatagramSocket class.  That is, if the socket is not connected
 to a specific remote address and a security manager has been installed
 then for each datagram received this method verifies that the source's
 address and port number are permitted by the security manager's checkAccept method.  The overhead
 of this security check can be avoided by first connecting the socket via
 the connect method.

  This method may be invoked at any time.  If another thread has
 already initiated a read operation upon this channel, however, then an
 invocation of this method will block until the first operation is
 complete. If this channel's socket is not bound then this method will
 first cause the socket to be bound to an address that is assigned
 automatically, as if invoking the bind method with a
 parameter of null. 

Parameters:
dst - The buffer into which the datagram is to be transferred
Returns:
The datagram's source address,
          or null if this channel is in non-blocking mode
          and no datagram was immediately available
Throws:
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the read operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the read operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
SecurityException - If a security manager has been installed
          and it does not permit datagrams to be accepted
          from the datagram's sender
IOException - If some other I/O error occurs


"
5,DatagramChannel,8,"SocketAddress send(ByteBuffer src, SocketAddress target)",False,,NULL
5,DatagramChannel,9,"long read(ByteBuffer dst, SocketAddress target)",False,,NULL
5,DatagramChannel,10,"long write(ByteBuffer src, SocketAddress target)",False,,NULL
5,DatagramChannel,11,void close(),False,,NULL
5,DatagramChannel,12,boolean isOpen(),False,,NULL
5,DatagramChannel,13,SelectableChannel configureBlocking(boolean block),False,,NULL
5,DatagramChannel,14,SelectorProvider provider(),False,,NULL
5,DatagramChannel,15,"SelectionKey register(Selector sel, int ops, Object att)",False,,NULL
5,DatagramChannel,16,"SelectionKey register(Selector sel, int ops)",False,,NULL
5,DatagramChannel,17,SelectionKey keyFor(Selector sel),False,,NULL
5,DatagramChannel,18,void close(Selector sel),False,,NULL
5,DatagramChannel,19,"void close(Selector sel, SelectorKey key)",False,,NULL
5,DatagramChannel,20,"void close(Selector sel, SelectorKey key, Object att)",False,,NULL
5,DatagramChannel,21,"void close(Selector sel, SelectorKey key, Object att, boolean cancel)",False,,NULL
5,DatagramChannel,22,"void close(Selector sel, SelectorKey key, Object att, boolean cancel, boolean wakeup)",False,,NULL
5,DatagramChannel,23,"void close(Selector sel, SelectorKey key, Object att, boolean cancel, boolean wakeup, boolean interrupt)",False,,NULL
5,DatagramChannel,24,"void close(Selector sel, SelectorKey key, Object att, boolean cancel, boolean wakeup, boolean interrupt, boolean nowait)",False,,NULL
5,DatagramChannel,25,"void close(Selector sel, SelectorKey key, Object att, boolean cancel, boolean wakeup, boolean interrupt, boolean nowait, boolean notify)",False,,NULL
6,FileChannel,1,"FileChannel.open(Path path, OpenOption... options)",False,,NULL
6,FileChannel,2,FileChannel.position(),False,,NULL
6,FileChannel,3,FileChannel.size(),False,,NULL
6,FileChannel,4,FileChannel.read(ByteBuffer dst),False,,NULL
6,FileChannel,5,FileChannel.write(ByteBuffer src),False,,NULL
7,FileChannel.MapMode,1,FileChannel.MapMode.READ_ONLY,False,,NULL
7,FileChannel.MapMode,2,FileChannel.MapMode.READ_WRITE,False,,NULL
7,FileChannel.MapMode,3,FileChannel.MapMode.PRIVATE,False,,NULL
7,FileChannel.MapMode,4,FileChannel.MapMode.COPY_ON_WRITE,False,,NULL
7,FileChannel.MapMode,5,FileChannel.MapMode.DIRECT,False,,NULL
8,FileLock,1,"FileChannel.lock(long position, long size, boolean shared)",False,,NULL
8,FileLock,2,"FileLock tryLock(long position, long size, boolean shared)",False,,NULL
8,FileLock,3,"FileLock tryLock(long position, long size, boolean shared, long timeout, TimeUnit unit)",False,,NULL
8,FileLock,4,FileLock tryLock(),False,,NULL
8,FileLock,5,"FileLock tryLock(long timeout, TimeUnit unit)",False,,NULL
9,MembershipKey,1,MembershipKey join(MulticastChannel channel),False,,NULL
9,MembershipKey,2,boolean isValid(),True,Tells whether or not this membership is valid.,"

isValid
public abstract boolean isValid()
Tells whether or not this membership is valid.

  A multicast group membership is valid upon creation and remains
 valid until the membership is dropped by invoking the drop
 method, or the channel is closed.

Returns:
true if this membership key is valid, false
          otherwise


"
9,MembershipKey,3,void drop(),True,Drop membership.,"

drop
public abstract void drop()
Drop membership.

  If the membership key represents a membership to receive all datagrams
 then the membership is dropped and the channel will no longer receive any
 datagrams sent to the group. If the membership key is source-specific
 then the channel will no longer receive datagrams sent to the group from
 that source address.

  After membership is dropped it may still be possible to receive
 datagrams sent to the group. This can arise when datagrams are waiting to
 be received in the socket's receive buffer. After membership is dropped
 then the channel may join the group again
 in which case a new membership key is returned.

  Upon return, this membership object will be invalid.
 If the multicast group membership is already invalid then invoking this
 method has no effect. Once a multicast group membership is invalid,
 it remains invalid forever.

"
9,MembershipKey,4,MulticastChannel channel(),True,Returns the channel for which this membership key was created.,"

channel
public abstract MulticastChannel channel()
Returns the channel for which this membership key was created. This
 method will continue to return the channel even after the membership
 becomes invalid.

Returns:
the channel


"
9,MembershipKey,5,InetAddress group(),True,Returns the multicast group for which this membership key was created.,"

group
public abstract InetAddress group()
Returns the multicast group for which this membership key was created.
 This method will continue to return the group even after the membership
 becomes invalid.

Returns:
the multicast group


"
10,Pipe,1,Pipe.SourceChannel source(),True,Returns this pipe's source channel.,"

source
public abstract Pipe.SourceChannel source()
Returns this pipe's source channel.

Returns:
This pipe's source channel


"
10,Pipe,2,Pipe.SinkChannel sink(),True,Returns this pipe's sink channel.,"

sink
public abstract Pipe.SinkChannel sink()
Returns this pipe's sink channel.

Returns:
This pipe's sink channel


"
10,Pipe,3,void close(),False,,NULL
10,Pipe,4,boolean isOpen(),False,,NULL
10,Pipe,5,Set<SelectionKey> keys(),False,,NULL
11,Pipe.SinkChannel,1,Pipe.SinkChannel open(),False,,NULL
11,Pipe.SinkChannel,2,void write(ByteBuffer src),False,,NULL
11,Pipe.SinkChannel,3,int read(ByteBuffer dst),False,,NULL
11,Pipe.SinkChannel,4,void close(),False,,NULL
11,Pipe.SinkChannel,5,boolean isOpen(),False,,NULL
12,Pipe.SourceChannel,1,Pipe.SourceChannel.open(),False,,NULL
12,Pipe.SourceChannel,2,Pipe.SourceChannel.read(ByteBuffer dst),False,,NULL
12,Pipe.SourceChannel,3,Pipe.SourceChannel.read(ByteBuffer[] dsts),False,,NULL
12,Pipe.SourceChannel,4,"Pipe.SourceChannel.read(ByteBuffer dst, long position)",False,,NULL
12,Pipe.SourceChannel,5,"Pipe.SourceChannel.read(ByteBuffer[] dsts, int offset, int length)",False,,NULL
13,SelectableChannel,1,SocketChannel,False,,NULL
13,SelectableChannel,2,ServerSocketChannel,False,,NULL
13,SelectableChannel,3,DatagramChannel,False,,NULL
13,SelectableChannel,4,AsynchronousChannel,False,,NULL
13,SelectableChannel,5,Pipe.SinkChannel,False,,NULL
13,SelectableChannel,6,Pipe.SourceChannel,False,,NULL
13,SelectableChannel,7,FileChannel,False,,NULL
13,SelectableChannel,8,AsynchronousFileChannel,False,,NULL
13,SelectableChannel,9,Selector,False,,NULL
13,SelectableChannel,10,SelectionKey,False,,NULL
14,SelectionKey,1,int interestOps(),True,Retrieves this key's interest set.,"

interestOps
public abstract int interestOps()
Retrieves this key's interest set.

  It is guaranteed that the returned set will only contain operation
 bits that are valid for this key's channel.

  This method may be invoked at any time.  Whether or not it blocks,
 and for how long, is implementation-dependent.  

Returns:
This key's interest set
Throws:
CancelledKeyException - If this key has been cancelled


"
14,SelectionKey,2,SelectionKey interestOps(int ops),True,Sets this key's interest set to the given value.,"

interestOps
public abstract SelectionKey interestOps(int ops)
Sets this key's interest set to the given value.

  This method may be invoked at any time.  Whether or not it blocks,
 and for how long, is implementation-dependent.  

Parameters:
ops - The new interest set
Returns:
This selection key
Throws:
IllegalArgumentException - If a bit in the set does not correspond to an operation that
          is supported by this key's channel, that is, if
          (ops & ~channel().validOps()) != 0
CancelledKeyException - If this key has been cancelled


"
14,SelectionKey,3,SelectableChannel channel(),True,Returns the channel for which this key was created.,"

channel
public abstract SelectableChannel channel()
Returns the channel for which this key was created.  This method will
 continue to return the channel even after the key is cancelled.

Returns:
This key's channel


"
14,SelectionKey,4,Selector selector(),True,Returns the selector for which this key was created.,"

selector
public abstract Selector selector()
Returns the selector for which this key was created.  This method will
 continue to return the selector even after the key is cancelled.

Returns:
This key's selector


"
14,SelectionKey,5,boolean isValid(),True,Tells whether or not this key is valid.,"

isValid
public abstract boolean isValid()
Tells whether or not this key is valid.

  A key is valid upon creation and remains so until it is cancelled,
 its channel is closed, or its selector is closed.  

Returns:
true if, and only if, this key is valid


"
15,Selector,1,Selector.open(),False,,NULL
15,Selector,2,Selector.select(),False,,NULL
15,Selector,3,Selector.selectNow(),False,,NULL
15,Selector,4,Selector.wakeup(),False,,NULL
15,Selector,5,Selector.select(long timeout),False,,NULL
16,ServerSocketChannel,1,ServerSocketChannel open(),True,Opens a server-socket channel.,"

open
public static ServerSocketChannel open()
                                throws IOException
Opens a server-socket channel.

  The new channel is created by invoking the openServerSocketChannel method of the system-wide default SelectorProvider object.

  The new channel's socket is initially unbound; it must be bound to a
 specific address via one of its socket's bind methods before
 connections can be accepted.  

Returns:
A new socket channel
Throws:
IOException - If an I/O error occurs


"
16,ServerSocketChannel,2,ServerSocketChannel bind(SocketAddress local),True,Binds the channel's socket to a local address and configures the socket to listen for connections.,"

bind
public final ServerSocketChannel bind(SocketAddress local)
                               throws IOException
Binds the channel's socket to a local address and configures the socket
 to listen for connections.

  An invocation of this method is equivalent to the following:
 
 bind(local, 0);
 

Specified by:
bind in interface NetworkChannel
Parameters:
local - The local address to bind the socket, or null to bind
          to an automatically assigned socket address
Returns:
This channel
Throws:
AlreadyBoundException - If the socket is already bound
UnsupportedAddressTypeException - If the type of the given address is not supported
ClosedChannelException - If the channel is closed
IOException - If some other I/O error occurs
SecurityException - If a security manager has been installed and its checkListen method denies the
          operation
Since:
1.7
See Also:
NetworkChannel.getLocalAddress()


"
16,ServerSocketChannel,3,ServerSocketChannel accept(),False,,NULL
16,ServerSocketChannel,4,"SelectionKey register(Selector sel, int ops, Object att)",False,,NULL
16,ServerSocketChannel,5,"SelectionKey register(Selector sel, int ops)",False,,NULL
17,SocketChannel,1,SocketChannel socketChannel = SocketChannel.open(),False,,NULL
17,SocketChannel,2,SocketChannel socketChannel = SocketChannel.open(address),False,,NULL
17,SocketChannel,3,int read(ByteBuffer dst),True,Reads a sequence of bytes from this channel into the given buffer.,"

read
public abstract int read(ByteBuffer dst)
                  throws IOException
Description copied from interface: ReadableByteChannel
Reads a sequence of bytes from this channel into the given buffer.

  An attempt is made to read up to r bytes from the channel,
 where r is the number of bytes remaining in the buffer, that is,
 dst.remaining(), at the moment this method is invoked.

  Suppose that a byte sequence of length n is read, where
 0 <= n <= r.
 This byte sequence will be transferred into the buffer so that the first
 byte in the sequence is at index p and the last byte is at index
 p + n - 1,
 where p is the buffer's position at the moment this method is
 invoked.  Upon return the buffer's position will be equal to
 p + n; its limit will not have changed.

  A read operation might not fill the buffer, and in fact it might not
 read any bytes at all.  Whether or not it does so depends upon the
 nature and state of the channel.  A socket channel in non-blocking mode,
 for example, cannot read any more bytes than are immediately available
 from the socket's input buffer; similarly, a file channel cannot read
 any more bytes than remain in the file.  It is guaranteed, however, that
 if a channel is in blocking mode and there is at least one byte
 remaining in the buffer then this method will block until at least one
 byte is read.

  This method may be invoked at any time.  If another thread has
 already initiated a read operation upon this channel, however, then an
 invocation of this method will block until the first operation is
 complete. 

Specified by:
read in interface ReadableByteChannel
Parameters:
dst - The buffer into which bytes are to be transferred
Returns:
The number of bytes read, possibly zero, or -1 if the
          channel has reached end-of-stream
Throws:
NotYetConnectedException - If this channel is not yet connected
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the read operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the read operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
17,SocketChannel,4,int write(ByteBuffer src),True,Writes a sequence of bytes to this channel from the given buffer.,"

write
public abstract int write(ByteBuffer src)
                   throws IOException
Description copied from interface: WritableByteChannel
Writes a sequence of bytes to this channel from the given buffer.

  An attempt is made to write up to r bytes to the channel,
 where r is the number of bytes remaining in the buffer, that is,
 src.remaining(), at the moment this method is invoked.

  Suppose that a byte sequence of length n is written, where
 0 <= n <= r.
 This byte sequence will be transferred from the buffer starting at index
 p, where p is the buffer's position at the moment this
 method is invoked; the index of the last byte written will be
 p + n - 1.
 Upon return the buffer's position will be equal to
 p + n; its limit will not have changed.

  Unless otherwise specified, a write operation will return only after
 writing all of the r requested bytes.  Some types of channels,
 depending upon their state, may write only some of the bytes or possibly
 none at all.  A socket channel in non-blocking mode, for example, cannot
 write any more bytes than are free in the socket's output buffer.

  This method may be invoked at any time.  If another thread has
 already initiated a write operation upon this channel, however, then an
 invocation of this method will block until the first operation is
 complete. 

Specified by:
write in interface WritableByteChannel
Parameters:
src - The buffer from which bytes are to be retrieved
Returns:
The number of bytes written, possibly zero
Throws:
NotYetConnectedException - If this channel is not yet connected
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the write operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the write operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
17,SocketChannel,5,void close(),False,,NULL
