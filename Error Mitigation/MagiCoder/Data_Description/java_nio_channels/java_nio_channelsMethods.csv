ClassName,Method,Return Type,Description,Full Description
AsynchronousChannelGroup,"awaitTermination(long timeout, TimeUnit unit)",abstract boolean,Awaits termination of the group.,"

awaitTermination
public abstract boolean awaitTermination(long timeout,
                                         TimeUnit unit)
                                  throws InterruptedException
Awaits termination of the group.

  This method blocks until the group has terminated, or the timeout
 occurs, or the current thread is interrupted, whichever happens first.

Parameters:
timeout - The maximum time to wait, or zero or less to not wait
unit - The time unit of the timeout argument
Returns:
true if the group has terminated; false if the
          timeout elapsed before termination
Throws:
InterruptedException - If interrupted while waiting


"
AsynchronousChannelGroup,isShutdown(),abstract boolean,Tells whether or not this asynchronous channel group is shutdown.,"

isShutdown
public abstract boolean isShutdown()
Tells whether or not this asynchronous channel group is shutdown.

Returns:
true if this asynchronous channel group is shutdown or
          has been marked for shutdown.


"
AsynchronousChannelGroup,isTerminated(),abstract boolean,Tells whether or not this group has terminated.,"

isTerminated
public abstract boolean isTerminated()
Tells whether or not this group has terminated.

  Where this method returns true, then the associated thread
 pool has also terminated.

Returns:
true if this group has terminated


"
AsynchronousChannelGroup,provider(),AsynchronousChannelProvider,Returns the provider that created this channel group.,"

provider
public final AsynchronousChannelProvider provider()
Returns the provider that created this channel group.

Returns:
The provider that created this channel group


"
AsynchronousChannelGroup,shutdown(),abstract void,Initiates an orderly shutdown of the group.,"

shutdown
public abstract void shutdown()
Initiates an orderly shutdown of the group.

  This method marks the group as shutdown. Further attempts to construct
 channel that binds to this group will throw ShutdownChannelGroupException.
 The group terminates when all asynchronous channels in the group are
 closed, all actively executing completion handlers have run to completion,
 and all resources have been released. This method has no effect if the
 group is already shutdown.

"
AsynchronousChannelGroup,shutdownNow(),abstract void,Shuts down the group and closes all open channels in the group.,"

shutdownNow
public abstract void shutdownNow()
                          throws IOException
Shuts down the group and closes all open channels in the group.

  In addition to the actions performed by the shutdown
 method, this method invokes the close
 method on all open channels in the group. This method does not attempt to
 stop or interrupt threads that are executing completion handlers. The
 group terminates when all actively executing completion handlers have run
 to completion and all resources have been released. This method may be
 invoked at any time. If some other thread has already invoked it, then
 another invocation will block until the first invocation is complete,
 after which it will return without effect.

Throws:
IOException - If an I/O error occurs


"
AsynchronousChannelGroup,"withCachedThreadPool(ExecutorService executor, int initialSize)",static AsynchronousChannelGroup,Creates an asynchronous channel group with a given thread pool that creates new threads as needed.,"

withCachedThreadPool
public static AsynchronousChannelGroup withCachedThreadPool(ExecutorService executor,
                                                            int initialSize)
                                                     throws IOException
Creates an asynchronous channel group with a given thread pool that
 creates new threads as needed.

  The executor parameter is an ExecutorService that
 creates new threads as needed to execute tasks that are submitted to
 handle I/O events and dispatch completion results for operations initiated
 on asynchronous channels in the group. It may reuse previously constructed
 threads when they are available.

  The initialSize parameter may be used by the implementation
 as a hint as to the initial number of tasks it may submit. For
 example, it may be used to indicate the initial number of threads that
 wait on I/O events.

  The executor is intended to be used exclusively by the resulting
 asynchronous channel group. Termination of the group results in the
 orderly  shutdown of the executor
 service. Shutting down the executor service by other means results in
 unspecified behavior.

  The group is created by invoking the openAsynchronousChannelGroup(ExecutorService,int) method of the system-wide
 default AsynchronousChannelProvider object.

Parameters:
executor - The thread pool for the resulting group
initialSize - A value >=0 or a negative value for implementation
          specific default
Returns:
A new asynchronous channel group
Throws:
IOException - If an I/O error occurs
See Also:
Executors.newCachedThreadPool()


"
AsynchronousChannelGroup,"withFixedThreadPool(int nThreads, ThreadFactory threadFactory)",static AsynchronousChannelGroup,Creates an asynchronous channel group with a fixed thread pool.,"

withFixedThreadPool
public static AsynchronousChannelGroup withFixedThreadPool(int nThreads,
                                                           ThreadFactory threadFactory)
                                                    throws IOException
Creates an asynchronous channel group with a fixed thread pool.

  The resulting asynchronous channel group reuses a fixed number of
 threads. At any point, at most nThreads threads will be active
 processing tasks that are submitted to handle I/O events and dispatch
 completion results for operations initiated on asynchronous channels in
 the group.

  The group is created by invoking the openAsynchronousChannelGroup(int,ThreadFactory) method of the system-wide
 default AsynchronousChannelProvider object.

Parameters:
nThreads - The number of threads in the pool
threadFactory - The factory to use when creating new threads
Returns:
A new asynchronous channel group
Throws:
IllegalArgumentException - If nThreads <= 0
IOException - If an I/O error occurs


"
AsynchronousChannelGroup,withThreadPool(ExecutorService executor),static AsynchronousChannelGroup,Creates an asynchronous channel group with a given thread pool.,"

withThreadPool
public static AsynchronousChannelGroup withThreadPool(ExecutorService executor)
                                               throws IOException
Creates an asynchronous channel group with a given thread pool.

  The executor parameter is an ExecutorService that
 executes tasks submitted to dispatch completion results for operations
 initiated on asynchronous channels in the group.

  Care should be taken when configuring the executor service. It
 should support direct handoff or unbounded queuing of
 submitted tasks, and the thread that invokes the execute method should never invoke the task
 directly. An implementation may mandate additional constraints.

  The executor is intended to be used exclusively by the resulting
 asynchronous channel group. Termination of the group results in the
 orderly  shutdown of the executor
 service. Shutting down the executor service by other means results in
 unspecified behavior.

  The group is created by invoking the openAsynchronousChannelGroup(ExecutorService,int) method of the system-wide
 default AsynchronousChannelProvider object with an initialSize of 0.

Parameters:
executor - The thread pool for the resulting group
Returns:
A new asynchronous channel group
Throws:
IOException - If an I/O error occurs


"
AsynchronousFileChannel,force(boolean metaData),abstract void,Forces any updates to this channel's file to be written to the storage device that contains it.,"

force
public abstract void force(boolean metaData)
                    throws IOException
Forces any updates to this channel's file to be written to the storage
 device that contains it.

  If this channel's file resides on a local storage device then when
 this method returns it is guaranteed that all changes made to the file
 since this channel was created, or since this method was last invoked,
 will have been written to that device.  This is useful for ensuring that
 critical information is not lost in the event of a system crash.

  If the file does not reside on a local device then no such guarantee
 is made.

  The metaData parameter can be used to limit the number of
 I/O operations that this method is required to perform.  Passing
 false for this parameter indicates that only updates to the
 file's content need be written to storage; passing true
 indicates that updates to both the file's content and metadata must be
 written, which generally requires at least one more I/O operation.
 Whether this parameter actually has any effect is dependent upon the
 underlying operating system and is therefore unspecified.

  Invoking this method may cause an I/O operation to occur even if the
 channel was only opened for reading.  Some operating systems, for
 example, maintain a last-access time as part of a file's metadata, and
 this time is updated whenever the file is read.  Whether or not this is
 actually done is system-dependent and is therefore unspecified.

  This method is only guaranteed to force changes that were made to
 this channel's file via the methods defined in this class.

Parameters:
metaData - If true then this method is required to force changes
          to both the file's content and metadata to be written to
          storage; otherwise, it need only force content changes to be
          written
Throws:
ClosedChannelException - If this channel is closed
IOException - If some other I/O error occurs


"
AsynchronousFileChannel,lock(),Future<FileLock>,Acquires an exclusive lock on this channel's file.,"

lock
public final Future<FileLock> lock()
Acquires an exclusive lock on this channel's file.

  This method initiates an operation to acquire an exclusive lock on this
 channel's file. The method returns a Future representing the
 pending result of the operation. The Future's get method returns the FileLock on successful completion.

  An invocation of this method behaves in exactly the same way as the
 invocation
 
     ch.lock(0L, Long.MAX_VALUE, false)
 

Returns:
a Future object representing the pending result
Throws:
OverlappingFileLockException - If a lock is already held by this Java virtual machine, or there
          is already a pending attempt to lock a region
NonWritableChannelException - If this channel was not opened for writing


"
AsynchronousFileChannel,"lock(A attachment, CompletionHandler<FileLock,? super A> handler)",<A> void,Acquires an exclusive lock on this channel's file.,"

lock
public final <A> void lock(A attachment,
                           CompletionHandler<FileLock,? super A> handler)
Acquires an exclusive lock on this channel's file.

  This method initiates an operation to acquire a lock on the given
 region of this channel's file. The handler parameter is a
 completion handler that is invoked when the lock is acquired (or the
 operation fails). The result passed to the completion handler is the
 resulting FileLock.

  An invocation of this method of the form ch.lock(att,handler)
 behaves in exactly the same way as the invocation
 
     ch.lock(0L, Long.MAX_VALUE, false, att, handler)
 

Type Parameters:
A - The type of the attachment
Parameters:
attachment - The object to attach to the I/O operation; can be null
handler - The handler for consuming the result
Throws:
OverlappingFileLockException - If a lock is already held by this Java virtual machine, or there
          is already a pending attempt to lock a region
NonWritableChannelException - If this channel was not opened for writing


"
AsynchronousFileChannel,"lock(long position, long size, boolean shared)",abstract Future<FileLock>,Acquires a lock on the given region of this channel's file.,"

lock
public abstract Future<FileLock> lock(long position,
                                      long size,
                                      boolean shared)
Acquires a lock on the given region of this channel's file.

  This method initiates an operation to acquire a lock on the given
 region of this channel's file.  The method behaves in exactly the same
 manner as the lock(long, long, boolean, Object, CompletionHandler)
 method except that instead of specifying a completion handler, this
 method returns a Future representing the pending result. The
 Future's get method returns the FileLock on successful completion.

Parameters:
position - The position at which the locked region is to start; must be
          non-negative
size - The size of the locked region; must be non-negative, and the sum
          position + size must be non-negative
shared - true to request a shared lock, in which case this
          channel must be open for reading (and possibly writing);
          false to request an exclusive lock, in which case this
          channel must be open for writing (and possibly reading)
Returns:
a Future object representing the pending result
Throws:
OverlappingFileLockException - If a lock is already held by this Java virtual machine, or there
          is already a pending attempt to lock a region
IllegalArgumentException - If the preconditions on the parameters do not hold
NonReadableChannelException - If shared is true but this channel was not opened for reading
NonWritableChannelException - If shared is false but this channel was not opened for writing


"
AsynchronousFileChannel,"lock(long position, long size, boolean shared, A attachment, CompletionHandler<FileLock,? super A> handler)",abstract <A> void,Acquires a lock on the given region of this channel's file.,"

lock
public abstract <A> void lock(long position,
                              long size,
                              boolean shared,
                              A attachment,
                              CompletionHandler<FileLock,? super A> handler)
Acquires a lock on the given region of this channel's file.

  This method initiates an operation to acquire a lock on the given
 region of this channel's file. The handler parameter is a
 completion handler that is invoked when the lock is acquired (or the
 operation fails). The result passed to the completion handler is the
 resulting FileLock.

  The region specified by the position and size
 parameters need not be contained within, or even overlap, the actual
 underlying file.  Lock regions are fixed in size; if a locked region
 initially contains the end of the file and the file grows beyond the
 region then the new portion of the file will not be covered by the lock.
 If a file is expected to grow in size and a lock on the entire file is
 required then a region starting at zero, and no smaller than the
 expected maximum size of the file, should be locked.  The two-argument
 lock(Object,CompletionHandler) method simply locks a region
 of size Long.MAX_VALUE. If a lock that overlaps the requested
 region is already held by this Java virtual machine, or this method has
 been invoked to lock an overlapping region and that operation has not
 completed, then this method throws OverlappingFileLockException.

  Some operating systems do not support a mechanism to acquire a file
 lock in an asynchronous manner. Consequently an implementation may
 acquire the file lock in a background thread or from a task executed by
 a thread in the associated thread pool. If there are many lock operations
 outstanding then it may consume threads in the Java virtual machine for
 indefinite periods.

  Some operating systems do not support shared locks, in which case a
 request for a shared lock is automatically converted into a request for
 an exclusive lock.  Whether the newly-acquired lock is shared or
 exclusive may be tested by invoking the resulting lock object's isShared method.

  File locks are held on behalf of the entire Java virtual machine.
 They are not suitable for controlling access to a file by multiple
 threads within the same virtual machine.

Type Parameters:
A - The type of the attachment
Parameters:
position - The position at which the locked region is to start; must be
          non-negative
size - The size of the locked region; must be non-negative, and the sum
          position + size must be non-negative
shared - true to request a shared lock, in which case this
          channel must be open for reading (and possibly writing);
          false to request an exclusive lock, in which case this
          channel must be open for writing (and possibly reading)
attachment - The object to attach to the I/O operation; can be null
handler - The handler for consuming the result
Throws:
OverlappingFileLockException - If a lock that overlaps the requested region is already held by
          this Java virtual machine, or there is already a pending attempt
          to lock an overlapping region
IllegalArgumentException - If the preconditions on the parameters do not hold
NonReadableChannelException - If shared is true but this channel was not opened for reading
NonWritableChannelException - If shared is false but this channel was not opened for writing


"
AsynchronousFileChannel,"open(Path file, OpenOption... options)",static AsynchronousFileChannel,"Opens or creates a file for reading and/or writing, returning an asynchronous file channel to access the file.","

open
public static AsynchronousFileChannel open(Path file,
                                           OpenOption... options)
                                    throws IOException
Opens or creates a file for reading and/or writing, returning an
 asynchronous file channel to access the file.

  An invocation of this method behaves in exactly the same way as the
 invocation
 
     ch.open(file, opts, null, new FileAttribute<?>[0]);
 
 where opts is a Set containing the options specified to
 this method.

  The resulting channel is associated with default thread pool to which
 tasks are submitted to handle I/O events and dispatch to completion
 handlers that consume the result of asynchronous operations performed on
 the resulting channel.

Parameters:
file - The path of the file to open or create
options - Options specifying how the file is opened
Returns:
A new asynchronous file channel
Throws:
IllegalArgumentException - If the set contains an invalid combination of options
UnsupportedOperationException - If the file is associated with a provider that does not
          support creating file channels, or an unsupported open option is
          specified
IOException - If an I/O error occurs
SecurityException - If a security manager is installed and it denies an
          unspecified permission required by the implementation.
          In the case of the default provider, the SecurityManager.checkRead(String) method is invoked to check
          read access if the file is opened for reading. The SecurityManager.checkWrite(String) method is invoked to check
          write access if the file is opened for writing


"
AsynchronousFileChannel,"open(Path file, Set<? extends OpenOption> options, ExecutorService executor, FileAttribute<?>... attrs)",static AsynchronousFileChannel,"Opens or creates a file for reading and/or writing, returning an asynchronous file channel to access the file.","

open
public static AsynchronousFileChannel open(Path file,
                                           Set<? extends OpenOption> options,
                                           ExecutorService executor,
                                           FileAttribute<?>... attrs)
                                    throws IOException
Opens or creates a file for reading and/or writing, returning an
 asynchronous file channel to access the file.

  The options parameter determines how the file is opened.
 The READ and WRITE options determines if the file should be opened for reading and/or
 writing. If neither option is contained in the array then an existing file
 is opened for  reading.

  In addition to READ and WRITE, the following options
 may be present:

 
 Option Description 

 TRUNCATE_EXISTING 
 When opening an existing file, the file is first truncated to a
   size of 0 bytes. This option is ignored when the file is opened only
   for reading.


 CREATE_NEW 
 If this option is present then a new file is created, failing if
   the file already exists. When creating a file the check for the
   existence of the file and the creation of the file if it does not exist
   is atomic with respect to other file system operations. This option is
   ignored when the file is opened only for reading. 


 CREATE 
 If this option is present then an existing file is opened if it
   exists, otherwise a new file is created. When creating a file the check
   for the existence of the file and the creation of the file if it does
   not exist is atomic with respect to other file system operations. This
   option is ignored if the CREATE_NEW option is also present or
   the file is opened only for reading. 


 DELETE_ON_CLOSE 
 When this option is present then the implementation makes a
   best effort attempt to delete the file when closed by the
   the close method. If the close method is not
   invoked then a best effort attempt is made to delete the file
   when the Java virtual machine terminates. 


SPARSE 
 When creating a new file this option is a hint that the
   new file will be sparse. This option is ignored when not creating
   a new file. 


 SYNC 
 Requires that every update to the file's content or metadata be
   written synchronously to the underlying storage device. (see  Synchronized I/O file
   integrity). 


 DSYNC 
 Requires that every update to the file's content be written
   synchronously to the underlying storage device. (see  Synchronized I/O file
   integrity). 


 An implementation may also support additional options.

  The executor parameter is the ExecutorService to
 which tasks are submitted to handle I/O events and dispatch completion
 results for operations initiated on resulting channel.
 The nature of these tasks is highly implementation specific and so care
 should be taken when configuring the Executor. Minimally it
 should support an unbounded work queue and should not run tasks on the
 caller thread of the execute method.
 Shutting down the executor service while the channel is open results in
 unspecified behavior.

  The attrs parameter is an optional array of file file-attributes to set atomically when creating the file.

  The new channel is created by invoking the newFileChannel method on the
 provider that created the Path.

Parameters:
file - The path of the file to open or create
options - Options specifying how the file is opened
executor - The thread pool or null to associate the channel with
          the default thread pool
attrs - An optional list of file attributes to set atomically when
          creating the file
Returns:
A new asynchronous file channel
Throws:
IllegalArgumentException - If the set contains an invalid combination of options
UnsupportedOperationException - If the file is associated with a provider that does not
          support creating asynchronous file channels, or an unsupported
          open option is specified, or the array contains an attribute that
          cannot be set atomically when creating the file
IOException - If an I/O error occurs
SecurityException - If a security manager is installed and it denies an
          unspecified permission required by the implementation.
          In the case of the default provider, the SecurityManager.checkRead(String) method is invoked to check
          read access if the file is opened for reading. The SecurityManager.checkWrite(String) method is invoked to check
          write access if the file is opened for writing


"
AsynchronousFileChannel,"read(ByteBuffer dst, long position)",abstract Future<Integer>,"Reads a sequence of bytes from this channel into the given buffer, starting at the given file position.","

read
public abstract Future<Integer> read(ByteBuffer dst,
                                     long position)
Reads a sequence of bytes from this channel into the given buffer,
 starting at the given file position.

  This method initiates the reading of a sequence of bytes from this
 channel into the given buffer, starting at the given file position. This
 method returns a Future representing the pending result of the
 operation. The Future's get method returns
 the number of bytes read or -1 if the given position is greater
 than or equal to the file's size at the time that the read is attempted.

  This method works in the same manner as the AsynchronousByteChannel.read(ByteBuffer) method, except that bytes are
 read starting at the given file position. If the given file position is
 greater than the file's size at the time that the read is attempted then
 no bytes are read.

Parameters:
dst - The buffer into which bytes are to be transferred
position - The file position at which the transfer is to begin;
          must be non-negative
Returns:
A Future object representing the pending result
Throws:
IllegalArgumentException - If the position is negative or the buffer is read-only
NonReadableChannelException - If this channel was not opened for reading


"
AsynchronousFileChannel,"read(ByteBuffer dst, long position, A attachment, CompletionHandler<Integer,? super A> handler)",abstract <A> void,"Reads a sequence of bytes from this channel into the given buffer, starting at the given file position.","

read
public abstract <A> void read(ByteBuffer dst,
                              long position,
                              A attachment,
                              CompletionHandler<Integer,? super A> handler)
Reads a sequence of bytes from this channel into the given buffer,
 starting at the given file position.

  This method initiates the reading of a sequence of bytes from this
 channel into the given buffer, starting at the given file position. The
 result of the read is the number of bytes read or -1 if the given
 position is greater than or equal to the file's size at the time that the
 read is attempted.

  This method works in the same manner as the AsynchronousByteChannel.read(ByteBuffer,Object,CompletionHandler)
 method, except that bytes are read starting at the given file position.
 If the given file position is greater than the file's size at the time
 that the read is attempted then no bytes are read.

Type Parameters:
A - The type of the attachment
Parameters:
dst - The buffer into which bytes are to be transferred
position - The file position at which the transfer is to begin;
          must be non-negative
attachment - The object to attach to the I/O operation; can be null
handler - The handler for consuming the result
Throws:
IllegalArgumentException - If the position is negative or the buffer is read-only
NonReadableChannelException - If this channel was not opened for reading


"
AsynchronousFileChannel,size(),abstract long,Returns the current size of this channel's file.,"

size
public abstract long size()
                   throws IOException
Returns the current size of this channel's file.

Returns:
The current size of this channel's file, measured in bytes
Throws:
ClosedChannelException - If this channel is closed
IOException - If some other I/O error occurs


"
AsynchronousFileChannel,truncate(long size),abstract AsynchronousFileChannel,Truncates this channel's file to the given size.,"

truncate
public abstract AsynchronousFileChannel truncate(long size)
                                          throws IOException
Truncates this channel's file to the given size.

  If the given size is less than the file's current size then the file
 is truncated, discarding any bytes beyond the new end of the file.  If
 the given size is greater than or equal to the file's current size then
 the file is not modified. 

Parameters:
size - The new size, a non-negative byte count
Returns:
This file channel
Throws:
NonWritableChannelException - If this channel was not opened for writing
ClosedChannelException - If this channel is closed
IllegalArgumentException - If the new size is negative
IOException - If some other I/O error occurs


"
AsynchronousFileChannel,tryLock(),FileLock,Attempts to acquire an exclusive lock on this channel's file.,"

tryLock
public final FileLock tryLock()
                       throws IOException
Attempts to acquire an exclusive lock on this channel's file.

  An invocation of this method of the form ch.tryLock()
 behaves in exactly the same way as the invocation

 
     ch.tryLock(0L, Long.MAX_VALUE, false) 

Returns:
A lock object representing the newly-acquired lock,
          or null if the lock could not be acquired
          because another program holds an overlapping lock
Throws:
ClosedChannelException - If this channel is closed
OverlappingFileLockException - If a lock that overlaps the requested region is already held by
          this Java virtual machine, or if another thread is already
          blocked in this method and is attempting to lock an overlapping
          region
NonWritableChannelException - If shared is false but this channel was not opened for writing
IOException - If some other I/O error occurs
See Also:
lock(Object,CompletionHandler), 
lock(long,long,boolean,Object,CompletionHandler), 
tryLock(long,long,boolean)


"
AsynchronousFileChannel,"tryLock(long position, long size, boolean shared)",abstract FileLock,Attempts to acquire a lock on the given region of this channel's file.,"

tryLock
public abstract FileLock tryLock(long position,
                                 long size,
                                 boolean shared)
                          throws IOException
Attempts to acquire a lock on the given region of this channel's file.

  This method does not block. An invocation always returns immediately,
 either having acquired a lock on the requested region or having failed to
 do so.  If it fails to acquire a lock because an overlapping lock is held
 by another program then it returns null.  If it fails to acquire
 a lock for any other reason then an appropriate exception is thrown.

Parameters:
position - The position at which the locked region is to start; must be
         non-negative
size - The size of the locked region; must be non-negative, and the sum
         position + size must be non-negative
shared - true to request a shared lock,
         false to request an exclusive lock
Returns:
A lock object representing the newly-acquired lock,
          or null if the lock could not be acquired
          because another program holds an overlapping lock
Throws:
IllegalArgumentException - If the preconditions on the parameters do not hold
ClosedChannelException - If this channel is closed
OverlappingFileLockException - If a lock that overlaps the requested region is already held by
          this Java virtual machine, or if another thread is already
          blocked in this method and is attempting to lock an overlapping
          region of the same file
NonReadableChannelException - If shared is true but this channel was not opened for reading
NonWritableChannelException - If shared is false but this channel was not opened for writing
IOException - If some other I/O error occurs
See Also:
lock(Object,CompletionHandler), 
lock(long,long,boolean,Object,CompletionHandler), 
tryLock()


"
AsynchronousFileChannel,"write(ByteBuffer src, long position)",abstract Future<Integer>,"Writes a sequence of bytes to this channel from the given buffer, starting at the given file position.","

write
public abstract Future<Integer> write(ByteBuffer src,
                                      long position)
Writes a sequence of bytes to this channel from the given buffer, starting
 at the given file position.

  This method initiates the writing of a sequence of bytes to this
 channel from the given buffer, starting at the given file position. The
 method returns a Future representing the pending result of the
 write operation. The Future's get method
 returns the number of bytes written.

  This method works in the same manner as the AsynchronousByteChannel.write(ByteBuffer) method, except that bytes are
 written starting at the given file position. If the given position is
 greater than the file's size, at the time that the write is attempted,
 then the file will be grown to accommodate the new bytes; the values of
 any bytes between the previous end-of-file and the newly-written bytes
 are unspecified.

Parameters:
src - The buffer from which bytes are to be transferred
position - The file position at which the transfer is to begin;
          must be non-negative
Returns:
A Future object representing the pending result
Throws:
IllegalArgumentException - If the position is negative
NonWritableChannelException - If this channel was not opened for writing


"
AsynchronousFileChannel,"write(ByteBuffer src, long position, A attachment, CompletionHandler<Integer,? super A> handler)",abstract <A> void,"Writes a sequence of bytes to this channel from the given buffer, starting at the given file position.","

write
public abstract <A> void write(ByteBuffer src,
                               long position,
                               A attachment,
                               CompletionHandler<Integer,? super A> handler)
Writes a sequence of bytes to this channel from the given buffer, starting
 at the given file position.

  This method works in the same manner as the AsynchronousByteChannel.write(ByteBuffer,Object,CompletionHandler)
 method, except that bytes are written starting at the given file position.
 If the given position is greater than the file's size, at the time that
 the write is attempted, then the file will be grown to accommodate the new
 bytes; the values of any bytes between the previous end-of-file and the
 newly-written bytes are unspecified.

Type Parameters:
A - The type of the attachment
Parameters:
src - The buffer from which bytes are to be transferred
position - The file position at which the transfer is to begin;
          must be non-negative
attachment - The object to attach to the I/O operation; can be null
handler - The handler for consuming the result
Throws:
IllegalArgumentException - If the position is negative
NonWritableChannelException - If this channel was not opened for writing


"
AsynchronousServerSocketChannel,accept(),abstract Future<AsynchronousSocketChannel>,Accepts a connection.,"

accept
public abstract Future<AsynchronousSocketChannel> accept()
Accepts a connection.

  This method initiates an asynchronous operation to accept a
 connection made to this channel's socket. The method behaves in exactly
 the same manner as the accept(Object, CompletionHandler) method
 except that instead of specifying a completion handler, this method
 returns a Future representing the pending result. The Future's get method returns the AsynchronousSocketChannel to the new connection on successful completion.

Returns:
a Future object representing the pending result
Throws:
AcceptPendingException - If an accept operation is already in progress on this channel
NotYetBoundException - If this channel's socket has not yet been bound


"
AsynchronousServerSocketChannel,"accept(A attachment, CompletionHandler<AsynchronousSocketChannel,? super A> handler)",abstract <A> void,Accepts a connection.,"

accept
public abstract <A> void accept(A attachment,
                                CompletionHandler<AsynchronousSocketChannel,? super A> handler)
Accepts a connection.

  This method initiates an asynchronous operation to accept a
 connection made to this channel's socket. The handler parameter is
 a completion handler that is invoked when a connection is accepted (or
 the operation fails). The result passed to the completion handler is
 the AsynchronousSocketChannel to the new connection.

  When a new connection is accepted then the resulting AsynchronousSocketChannel will be bound to the same AsynchronousChannelGroup as this channel. If the group is shutdown and a connection is accepted,
 then the connection is closed, and the operation completes with an IOException and cause ShutdownChannelGroupException.

  To allow for concurrent handling of new connections, the completion
 handler is not invoked directly by the initiating thread when a new
 connection is accepted immediately (see Threading).

  If a security manager has been installed then it verifies that the
 address and port number of the connection's remote endpoint are permitted
 by the security manager's checkAccept
 method. The permission check is performed with privileges that are restricted
 by the calling context of this method. If the permission check fails then
 the connection is closed and the operation completes with a SecurityException.

Type Parameters:
A - The type of the attachment
Parameters:
attachment - The object to attach to the I/O operation; can be null
handler - The handler for consuming the result
Throws:
AcceptPendingException - If an accept operation is already in progress on this channel
NotYetBoundException - If this channel's socket has not yet been bound
ShutdownChannelGroupException - If the channel group has terminated


"
AsynchronousServerSocketChannel,bind(SocketAddress local),AsynchronousServerSocketChannel,Binds the channel's socket to a local address and configures the socket to listen for connections.,"

bind
public final AsynchronousServerSocketChannel bind(SocketAddress local)
                                           throws IOException
Binds the channel's socket to a local address and configures the socket to
 listen for connections.

  An invocation of this method is equivalent to the following:
 
 bind(local, 0);
 

Specified by:
bind in interface NetworkChannel
Parameters:
local - The local address to bind the socket, or null to bind
          to an automatically assigned socket address
Returns:
This channel
Throws:
AlreadyBoundException - If the socket is already bound
UnsupportedAddressTypeException - If the type of the given address is not supported
SecurityException - If a security manager is installed and it denies an unspecified
          permission. An implementation of this interface should specify
          any required permissions.
ClosedChannelException - If the channel is closed
IOException - If some other I/O error occurs
See Also:
NetworkChannel.getLocalAddress()


"
AsynchronousServerSocketChannel,"bind(SocketAddress local, int backlog)",abstract AsynchronousServerSocketChannel,Binds the channel's socket to a local address and configures the socket to listen for connections.,"

bind
public abstract AsynchronousServerSocketChannel bind(SocketAddress local,
                                                     int backlog)
                                              throws IOException
Binds the channel's socket to a local address and configures the socket to
 listen for connections.

  This method is used to establish an association between the socket and
 a local address. Once an association is established then the socket remains
 bound until the associated channel is closed.

  The backlog parameter is the maximum number of pending
 connections on the socket. Its exact semantics are implementation specific.
 In particular, an implementation may impose a maximum length or may choose
 to ignore the parameter altogther. If the backlog parameter has
 the value 0, or a negative value, then an implementation specific
 default is used.

Parameters:
local - The local address to bind the socket, or null to bind
          to an automatically assigned socket address
backlog - The maximum number of pending connections
Returns:
This channel
Throws:
AlreadyBoundException - If the socket is already bound
UnsupportedAddressTypeException - If the type of the given address is not supported
SecurityException - If a security manager has been installed and its checkListen method denies the operation
ClosedChannelException - If the channel is closed
IOException - If some other I/O error occurs


"
AsynchronousServerSocketChannel,getLocalAddress(),abstract SocketAddress,Returns the socket address that this channel's socket is bound to.,"

getLocalAddress
public abstract SocketAddress getLocalAddress()
                                       throws IOException
Returns the socket address that this channel's socket is bound to.

  Where the channel is bound to an Internet Protocol
 socket address then the return value from this method is of type InetSocketAddress.
 
 If there is a security manager set, its checkConnect method is
 called with the local address and -1 as its arguments to see
 if the operation is allowed. If the operation is not allowed,
 a SocketAddress representing the
 loopback address and the
 local port of the channel's socket is returned.

Specified by:
getLocalAddress in interface NetworkChannel
Returns:
The SocketAddress that the socket is bound to, or the
          SocketAddress representing the loopback address if
          denied by the security manager, or null if the
          channel's socket is not bound
Throws:
ClosedChannelException - If the channel is closed
IOException - If an I/O error occurs


"
AsynchronousServerSocketChannel,open(),static AsynchronousServerSocketChannel,Opens an asynchronous server-socket channel.,"

open
public static AsynchronousServerSocketChannel open()
                                            throws IOException
Opens an asynchronous server-socket channel.

  This method returns an asynchronous server socket channel that is
 bound to the default group. This method is equivalent to evaluating
 the expression:
 
 open((AsynchronousChannelGroup)null);
 

Returns:
A new asynchronous server socket channel
Throws:
IOException - If an I/O error occurs


"
AsynchronousServerSocketChannel,open(AsynchronousChannelGroup group),static AsynchronousServerSocketChannel,Opens an asynchronous server-socket channel.,"

open
public static AsynchronousServerSocketChannel open(AsynchronousChannelGroup group)
                                            throws IOException
Opens an asynchronous server-socket channel.

  The new channel is created by invoking the openAsynchronousServerSocketChannel method on the AsynchronousChannelProvider object that created
 the given group. If the group parameter is null then the
 resulting channel is created by the system-wide default provider, and
 bound to the default group.

Parameters:
group - The group to which the newly constructed channel should be bound,
          or null for the default group
Returns:
A new asynchronous server socket channel
Throws:
ShutdownChannelGroupException - If the channel group is shutdown
IOException - If an I/O error occurs


"
AsynchronousServerSocketChannel,provider(),AsynchronousChannelProvider,Returns the provider that created this channel.,"

provider
public final AsynchronousChannelProvider provider()
Returns the provider that created this channel.

Returns:
The provider that created this channel


"
AsynchronousServerSocketChannel,"setOption(SocketOption<T> name, T value)",abstract <T> AsynchronousServerSocketChannel,Sets the value of a socket option.,"

setOption
public abstract <T> AsynchronousServerSocketChannel setOption(SocketOption<T> name,
                                                              T value)
                                                       throws IOException
Description copied from interface: NetworkChannel
Sets the value of a socket option.

Specified by:
setOption in interface NetworkChannel
Type Parameters:
T - The type of the socket option value
Parameters:
name - The socket option
value - The value of the socket option. A value of null may be
          a valid value for some socket options.
Returns:
This channel
Throws:
IllegalArgumentException - If the value is not a valid value for this socket option
ClosedChannelException - If this channel is closed
IOException - If an I/O error occurs
See Also:
StandardSocketOptions


"
AsynchronousSocketChannel,bind(SocketAddress local),abstract AsynchronousSocketChannel,Binds the channel's socket to a local address.,"

bind
public abstract AsynchronousSocketChannel bind(SocketAddress local)
                                        throws IOException
Description copied from interface: NetworkChannel
Binds the channel's socket to a local address.

  This method is used to establish an association between the socket and
 a local address. Once an association is established then the socket remains
 bound until the channel is closed. If the local parameter has the
 value null then the socket will be bound to an address that is
 assigned automatically.

Specified by:
bind in interface NetworkChannel
Parameters:
local - The address to bind the socket, or null to bind the socket
          to an automatically assigned socket address
Returns:
This channel
Throws:
ConnectionPendingException - If a connection operation is already in progress on this channel
AlreadyBoundException - If the socket is already bound
UnsupportedAddressTypeException - If the type of the given address is not supported
ClosedChannelException - If the channel is closed
IOException - If some other I/O error occurs
SecurityException - If a security manager has been installed and its
          checkListen method denies
          the operation
See Also:
NetworkChannel.getLocalAddress()


"
AsynchronousSocketChannel,connect(SocketAddress remote),abstract Future<Void>,Connects this channel.,"

connect
public abstract Future<Void> connect(SocketAddress remote)
Connects this channel.

  This method initiates an operation to connect this channel. This
 method behaves in exactly the same manner as the connect(SocketAddress, Object, CompletionHandler) method except that
 instead of specifying a completion handler, this method returns a Future representing the pending result. The Future's get method returns null on successful completion.

Parameters:
remote - The remote address to which this channel is to be connected
Returns:
A Future object representing the pending result
Throws:
UnresolvedAddressException - If the given remote address is not fully resolved
UnsupportedAddressTypeException - If the type of the given remote address is not supported
AlreadyConnectedException - If this channel is already connected
ConnectionPendingException - If a connection operation is already in progress on this channel
SecurityException - If a security manager has been installed
          and it does not permit access to the given remote endpoint


"
AsynchronousSocketChannel,"connect(SocketAddress remote, A attachment, CompletionHandler<Void,? super A> handler)",abstract <A> void,Connects this channel.,"

connect
public abstract <A> void connect(SocketAddress remote,
                                 A attachment,
                                 CompletionHandler<Void,? super A> handler)
Connects this channel.

  This method initiates an operation to connect this channel. The
 handler parameter is a completion handler that is invoked when
 the connection is successfully established or connection cannot be
 established. If the connection cannot be established then the channel is
 closed.

  This method performs exactly the same security checks as the Socket class.  That is, if a security manager has been
 installed then this method verifies that its checkConnect method permits
 connecting to the address and port number of the given remote endpoint.

Type Parameters:
A - The type of the attachment
Parameters:
remote - The remote address to which this channel is to be connected
attachment - The object to attach to the I/O operation; can be null
handler - The handler for consuming the result
Throws:
UnresolvedAddressException - If the given remote address is not fully resolved
UnsupportedAddressTypeException - If the type of the given remote address is not supported
AlreadyConnectedException - If this channel is already connected
ConnectionPendingException - If a connection operation is already in progress on this channel
ShutdownChannelGroupException - If the channel group has terminated
SecurityException - If a security manager has been installed
          and it does not permit access to the given remote endpoint
See Also:
getRemoteAddress()


"
AsynchronousSocketChannel,getLocalAddress(),abstract SocketAddress,Returns the socket address that this channel's socket is bound to.,"

getLocalAddress
public abstract SocketAddress getLocalAddress()
                                       throws IOException
Returns the socket address that this channel's socket is bound to.

  Where the channel is bound to an Internet Protocol
 socket address then the return value from this method is of type InetSocketAddress.
 
 If there is a security manager set, its checkConnect method is
 called with the local address and -1 as its arguments to see
 if the operation is allowed. If the operation is not allowed,
 a SocketAddress representing the
 loopback address and the
 local port of the channel's socket is returned.

Specified by:
getLocalAddress in interface NetworkChannel
Returns:
The SocketAddress that the socket is bound to, or the
          SocketAddress representing the loopback address if
          denied by the security manager, or null if the
          channel's socket is not bound
Throws:
ClosedChannelException - If the channel is closed
IOException - If an I/O error occurs


"
AsynchronousSocketChannel,getRemoteAddress(),abstract SocketAddress,Returns the remote address to which this channel's socket is connected.,"

getRemoteAddress
public abstract SocketAddress getRemoteAddress()
                                        throws IOException
Returns the remote address to which this channel's socket is connected.

  Where the channel is bound and connected to an Internet Protocol
 socket address then the return value from this method is of type InetSocketAddress.

Returns:
The remote address; null if the channel's socket is not
          connected
Throws:
ClosedChannelException - If the channel is closed
IOException - If an I/O error occurs


"
AsynchronousSocketChannel,open(),static AsynchronousSocketChannel,Opens an asynchronous socket channel.,"

open
public static AsynchronousSocketChannel open()
                                      throws IOException
Opens an asynchronous socket channel.

  This method returns an asynchronous socket channel that is bound to
 the default group.This method is equivalent to evaluating the
 expression:
 
 open((AsynchronousChannelGroup)null);
 

Returns:
A new asynchronous socket channel
Throws:
IOException - If an I/O error occurs


"
AsynchronousSocketChannel,open(AsynchronousChannelGroup group),static AsynchronousSocketChannel,Opens an asynchronous socket channel.,"

open
public static AsynchronousSocketChannel open(AsynchronousChannelGroup group)
                                      throws IOException
Opens an asynchronous socket channel.

  The new channel is created by invoking the openAsynchronousSocketChannel method on the AsynchronousChannelProvider that created the group. If the group parameter
 is null then the resulting channel is created by the system-wide
 default provider, and bound to the default group.

Parameters:
group - The group to which the newly constructed channel should be bound,
          or null for the default group
Returns:
A new asynchronous socket channel
Throws:
ShutdownChannelGroupException - If the channel group is shutdown
IOException - If an I/O error occurs


"
AsynchronousSocketChannel,provider(),AsynchronousChannelProvider,Returns the provider that created this channel.,"

provider
public final AsynchronousChannelProvider provider()
Returns the provider that created this channel.

Returns:
The provider that created this channel


"
AsynchronousSocketChannel,read(ByteBuffer dst),abstract Future<Integer>,Reads a sequence of bytes from this channel into the given buffer.,"

read
public abstract Future<Integer> read(ByteBuffer dst)
Description copied from interface: AsynchronousByteChannel
Reads a sequence of bytes from this channel into the given buffer.

  This method initiates an asynchronous read operation to read a
 sequence of bytes from this channel into the given buffer. The method
 behaves in exactly the same manner as the read(ByteBuffer,Object,CompletionHandler) method except that instead
 of specifying a completion handler, this method returns a Future
 representing the pending result. The Future's get method returns the number of bytes read or -1 if no bytes
 could be read because the channel has reached end-of-stream.

Specified by:
read in interface AsynchronousByteChannel
Parameters:
dst - The buffer into which bytes are to be transferred
Returns:
A Future representing the result of the operation
Throws:
IllegalArgumentException - If the buffer is read-only
ReadPendingException - If the channel does not allow more than one read to be outstanding
          and a previous read has not completed
NotYetConnectedException - If this channel is not yet connected


"
AsynchronousSocketChannel,"read(ByteBuffer[] dsts, int offset, int length, long timeout, TimeUnit unit, A attachment, CompletionHandler<Long,? super A> handler)",abstract <A> void,Reads a sequence of bytes from this channel into a subsequence of the given buffers.,"

read
public abstract <A> void read(ByteBuffer[] dsts,
                              int offset,
                              int length,
                              long timeout,
                              TimeUnit unit,
                              A attachment,
                              CompletionHandler<Long,? super A> handler)
Reads a sequence of bytes from this channel into a subsequence of the
 given buffers. This operation, sometimes called a scattering read,
 is often useful when implementing network protocols that group data into
 segments consisting of one or more fixed-length headers followed by a
 variable-length body. The handler parameter is a completion
 handler that is invoked when the read operation completes (or fails). The
 result passed to the completion handler is the number of bytes read or
 -1 if no bytes could be read because the channel has reached
 end-of-stream.

  This method initiates a read of up to r bytes from this channel,
 where r is the total number of bytes remaining in the specified
 subsequence of the given buffer array, that is,

 
 dsts[offset].remaining()
     + dsts[offset+1].remaining()
     + ... + dsts[offset+length-1].remaining()

 at the moment that the read is attempted.

  Suppose that a byte sequence of length n is read, where
 0 < n <= r.
 Up to the first dsts[offset].remaining() bytes of this sequence
 are transferred into buffer dsts[offset], up to the next
 dsts[offset+1].remaining() bytes are transferred into buffer
 dsts[offset+1], and so forth, until the entire byte sequence
 is transferred into the given buffers.  As many bytes as possible are
 transferred into each buffer, hence the final position of each updated
 buffer, except the last updated buffer, is guaranteed to be equal to
 that buffer's limit. The underlying operating system may impose a limit
 on the number of buffers that may be used in an I/O operation. Where the
 number of buffers (with bytes remaining), exceeds this limit, then the
 I/O operation is performed with the maximum number of buffers allowed by
 the operating system.

  If a timeout is specified and the timeout elapses before the operation
 completes then it completes with the exception InterruptedByTimeoutException. Where a timeout occurs, and the
 implementation cannot guarantee that bytes have not been read, or will not
 be read from the channel into the given buffers, then further attempts to
 read from the channel will cause an unspecific runtime exception to be
 thrown.

Type Parameters:
A - The type of the attachment
Parameters:
dsts - The buffers into which bytes are to be transferred
offset - The offset within the buffer array of the first buffer into which
          bytes are to be transferred; must be non-negative and no larger than
          dsts.length
length - The maximum number of buffers to be accessed; must be non-negative
          and no larger than dsts.length - offset
timeout - The maximum time for the I/O operation to complete
unit - The time unit of the timeout argument
attachment - The object to attach to the I/O operation; can be null
handler - The handler for consuming the result
Throws:
IndexOutOfBoundsException - If the pre-conditions for the offset  and length
          parameter aren't met
IllegalArgumentException - If the buffer is read-only
ReadPendingException - If a read operation is already in progress on this channel
NotYetConnectedException - If this channel is not yet connected
ShutdownChannelGroupException - If the channel group has terminated


"
AsynchronousSocketChannel,"read(ByteBuffer dst, A attachment, CompletionHandler<Integer,? super A> handler)",<A> void,Reads a sequence of bytes from this channel into the given buffer.,"

read
public final <A> void read(ByteBuffer dst,
                           A attachment,
                           CompletionHandler<Integer,? super A> handler)
Description copied from interface: AsynchronousByteChannel
Reads a sequence of bytes from this channel into the given buffer.

  This method initiates an asynchronous read operation to read a
 sequence of bytes from this channel into the given buffer. The handler parameter is a completion handler that is invoked when the read
 operation completes (or fails). The result passed to the completion
 handler is the number of bytes read or -1 if no bytes could be
 read because the channel has reached end-of-stream.

  The read operation may read up to r bytes from the channel,
 where r is the number of bytes remaining in the buffer, that is,
 dst.remaining() at the time that the read is attempted. Where
 r is 0, the read operation completes immediately with a result of
 0 without initiating an I/O operation.

  Suppose that a byte sequence of length n is read, where
 0 < n <= r.
 This byte sequence will be transferred into the buffer so that the first
 byte in the sequence is at index p and the last byte is at index
 p + n - 1,
 where p is the buffer's position at the moment the read is
 performed. Upon completion the buffer's position will be equal to
 p + n; its limit will not have changed.

  Buffers are not safe for use by multiple concurrent threads so care
 should be taken to not access the buffer until the operation has
 completed.

  This method may be invoked at any time. Some channel types may not
 allow more than one read to be outstanding at any given time. If a thread
 initiates a read operation before a previous read operation has
 completed then a ReadPendingException will be thrown.

Specified by:
read in interface AsynchronousByteChannel
Type Parameters:
A - The type of the attachment
Parameters:
dst - The buffer into which bytes are to be transferred
attachment - The object to attach to the I/O operation; can be null
handler - The completion handler
Throws:
IllegalArgumentException - If the buffer is read-only
ReadPendingException - If the channel does not allow more than one read to be outstanding
          and a previous read has not completed
NotYetConnectedException - If this channel is not yet connected
ShutdownChannelGroupException - If the channel group has terminated


"
AsynchronousSocketChannel,"read(ByteBuffer dst, long timeout, TimeUnit unit, A attachment, CompletionHandler<Integer,? super A> handler)",abstract <A> void,Reads a sequence of bytes from this channel into the given buffer.,"

read
public abstract <A> void read(ByteBuffer dst,
                              long timeout,
                              TimeUnit unit,
                              A attachment,
                              CompletionHandler<Integer,? super A> handler)
Reads a sequence of bytes from this channel into the given buffer.

  This method initiates an asynchronous read operation to read a
 sequence of bytes from this channel into the given buffer. The handler parameter is a completion handler that is invoked when the read
 operation completes (or fails). The result passed to the completion
 handler is the number of bytes read or -1 if no bytes could be
 read because the channel has reached end-of-stream.

  If a timeout is specified and the timeout elapses before the operation
 completes then the operation completes with the exception InterruptedByTimeoutException. Where a timeout occurs, and the
 implementation cannot guarantee that bytes have not been read, or will not
 be read from the channel into the given buffer, then further attempts to
 read from the channel will cause an unspecific runtime exception to be
 thrown.

  Otherwise this method works in the same manner as the AsynchronousByteChannel.read(ByteBuffer,Object,CompletionHandler)
 method.

Type Parameters:
A - The type of the attachment
Parameters:
dst - The buffer into which bytes are to be transferred
timeout - The maximum time for the I/O operation to complete
unit - The time unit of the timeout argument
attachment - The object to attach to the I/O operation; can be null
handler - The handler for consuming the result
Throws:
IllegalArgumentException - If the buffer is read-only
ReadPendingException - If a read operation is already in progress on this channel
NotYetConnectedException - If this channel is not yet connected
ShutdownChannelGroupException - If the channel group has terminated


"
AsynchronousSocketChannel,"setOption(SocketOption<T> name, T value)",abstract <T> AsynchronousSocketChannel,Sets the value of a socket option.,"

setOption
public abstract <T> AsynchronousSocketChannel setOption(SocketOption<T> name,
                                                        T value)
                                                 throws IOException
Description copied from interface: NetworkChannel
Sets the value of a socket option.

Specified by:
setOption in interface NetworkChannel
Type Parameters:
T - The type of the socket option value
Parameters:
name - The socket option
value - The value of the socket option. A value of null may be
          a valid value for some socket options.
Returns:
This channel
Throws:
IllegalArgumentException - If the value is not a valid value for this socket option
ClosedChannelException - If this channel is closed
IOException - If an I/O error occurs
See Also:
StandardSocketOptions


"
AsynchronousSocketChannel,shutdownInput(),abstract AsynchronousSocketChannel,Shutdown the connection for reading without closing the channel.,"

shutdownInput
public abstract AsynchronousSocketChannel shutdownInput()
                                                 throws IOException
Shutdown the connection for reading without closing the channel.

  Once shutdown for reading then further reads on the channel will
 return -1, the end-of-stream indication. If the input side of the
 connection is already shutdown then invoking this method has no effect.
 The effect on an outstanding read operation is system dependent and
 therefore not specified. The effect, if any, when there is data in the
 socket receive buffer that has not been read, or data arrives subsequently,
 is also system dependent.

Returns:
The channel
Throws:
NotYetConnectedException - If this channel is not yet connected
ClosedChannelException - If this channel is closed
IOException - If some other I/O error occurs


"
AsynchronousSocketChannel,shutdownOutput(),abstract AsynchronousSocketChannel,Shutdown the connection for writing without closing the channel.,"

shutdownOutput
public abstract AsynchronousSocketChannel shutdownOutput()
                                                  throws IOException
Shutdown the connection for writing without closing the channel.

  Once shutdown for writing then further attempts to write to the
 channel will throw ClosedChannelException. If the output side of
 the connection is already shutdown then invoking this method has no
 effect. The effect on an outstanding write operation is system dependent
 and therefore not specified.

Returns:
The channel
Throws:
NotYetConnectedException - If this channel is not yet connected
ClosedChannelException - If this channel is closed
IOException - If some other I/O error occurs


"
AsynchronousSocketChannel,write(ByteBuffer src),abstract Future<Integer>,Writes a sequence of bytes to this channel from the given buffer.,"

write
public abstract Future<Integer> write(ByteBuffer src)
Description copied from interface: AsynchronousByteChannel
Writes a sequence of bytes to this channel from the given buffer.

  This method initiates an asynchronous write operation to write a
 sequence of bytes to this channel from the given buffer. The method
 behaves in exactly the same manner as the write(ByteBuffer,Object,CompletionHandler) method except that instead
 of specifying a completion handler, this method returns a Future
 representing the pending result. The Future's get method returns the number of bytes written.

Specified by:
write in interface AsynchronousByteChannel
Parameters:
src - The buffer from which bytes are to be retrieved
Returns:
A Future representing the result of the operation
Throws:
WritePendingException - If the channel does not allow more than one write to be outstanding
          and a previous write has not completed
NotYetConnectedException - If this channel is not yet connected


"
AsynchronousSocketChannel,"write(ByteBuffer[] srcs, int offset, int length, long timeout, TimeUnit unit, A attachment, CompletionHandler<Long,? super A> handler)",abstract <A> void,Writes a sequence of bytes to this channel from a subsequence of the given buffers.,"

write
public abstract <A> void write(ByteBuffer[] srcs,
                               int offset,
                               int length,
                               long timeout,
                               TimeUnit unit,
                               A attachment,
                               CompletionHandler<Long,? super A> handler)
Writes a sequence of bytes to this channel from a subsequence of the given
 buffers. This operation, sometimes called a gathering write, is
 often useful when implementing network protocols that group data into
 segments consisting of one or more fixed-length headers followed by a
 variable-length body. The handler parameter is a completion
 handler that is invoked when the write operation completes (or fails).
 The result passed to the completion handler is the number of bytes written.

  This method initiates a write of up to r bytes to this channel,
 where r is the total number of bytes remaining in the specified
 subsequence of the given buffer array, that is,

 
 srcs[offset].remaining()
     + srcs[offset+1].remaining()
     + ... + srcs[offset+length-1].remaining()

 at the moment that the write is attempted.

  Suppose that a byte sequence of length n is written, where
 0 < n <= r.
 Up to the first srcs[offset].remaining() bytes of this sequence
 are written from buffer srcs[offset], up to the next
 srcs[offset+1].remaining() bytes are written from buffer
 srcs[offset+1], and so forth, until the entire byte sequence is
 written.  As many bytes as possible are written from each buffer, hence
 the final position of each updated buffer, except the last updated
 buffer, is guaranteed to be equal to that buffer's limit. The underlying
 operating system may impose a limit on the number of buffers that may be
 used in an I/O operation. Where the number of buffers (with bytes
 remaining), exceeds this limit, then the I/O operation is performed with
 the maximum number of buffers allowed by the operating system.

  If a timeout is specified and the timeout elapses before the operation
 completes then it completes with the exception InterruptedByTimeoutException. Where a timeout occurs, and the
 implementation cannot guarantee that bytes have not been written, or will
 not be written to the channel from the given buffers, then further attempts
 to write to the channel will cause an unspecific runtime exception to be
 thrown.

Type Parameters:
A - The type of the attachment
Parameters:
srcs - The buffers from which bytes are to be retrieved
offset - The offset within the buffer array of the first buffer from which
          bytes are to be retrieved; must be non-negative and no larger
          than srcs.length
length - The maximum number of buffers to be accessed; must be non-negative
          and no larger than srcs.length - offset
timeout - The maximum time for the I/O operation to complete
unit - The time unit of the timeout argument
attachment - The object to attach to the I/O operation; can be null
handler - The handler for consuming the result
Throws:
IndexOutOfBoundsException - If the pre-conditions for the offset  and length
          parameter aren't met
WritePendingException - If a write operation is already in progress on this channel
NotYetConnectedException - If this channel is not yet connected
ShutdownChannelGroupException - If the channel group has terminated


"
AsynchronousSocketChannel,"write(ByteBuffer src, A attachment, CompletionHandler<Integer,? super A> handler)",<A> void,Writes a sequence of bytes to this channel from the given buffer.,"

write
public final <A> void write(ByteBuffer src,
                            A attachment,
                            CompletionHandler<Integer,? super A> handler)
Description copied from interface: AsynchronousByteChannel
Writes a sequence of bytes to this channel from the given buffer.

  This method initiates an asynchronous write operation to write a
 sequence of bytes to this channel from the given buffer. The handler parameter is a completion handler that is invoked when the write
 operation completes (or fails). The result passed to the completion
 handler is the number of bytes written.

  The write operation may write up to r bytes to the channel,
 where r is the number of bytes remaining in the buffer, that is,
 src.remaining() at the time that the write is attempted. Where
 r is 0, the write operation completes immediately with a result of
 0 without initiating an I/O operation.

  Suppose that a byte sequence of length n is written, where
 0 < n <= r.
 This byte sequence will be transferred from the buffer starting at index
 p, where p is the buffer's position at the moment the
 write is performed; the index of the last byte written will be
 p + n - 1.
 Upon completion the buffer's position will be equal to
 p + n; its limit will not have changed.

  Buffers are not safe for use by multiple concurrent threads so care
 should be taken to not access the buffer until the operation has
 completed.

  This method may be invoked at any time. Some channel types may not
 allow more than one write to be outstanding at any given time. If a thread
 initiates a write operation before a previous write operation has
 completed then a WritePendingException will be thrown.

Specified by:
write in interface AsynchronousByteChannel
Type Parameters:
A - The type of the attachment
Parameters:
src - The buffer from which bytes are to be retrieved
attachment - The object to attach to the I/O operation; can be null
handler - The completion handler object
Throws:
WritePendingException - If the channel does not allow more than one write to be outstanding
          and a previous write has not completed
NotYetConnectedException - If this channel is not yet connected
ShutdownChannelGroupException - If the channel group has terminated


"
AsynchronousSocketChannel,"write(ByteBuffer src, long timeout, TimeUnit unit, A attachment, CompletionHandler<Integer,? super A> handler)",abstract <A> void,Writes a sequence of bytes to this channel from the given buffer.,"

write
public abstract <A> void write(ByteBuffer src,
                               long timeout,
                               TimeUnit unit,
                               A attachment,
                               CompletionHandler<Integer,? super A> handler)
Writes a sequence of bytes to this channel from the given buffer.

  This method initiates an asynchronous write operation to write a
 sequence of bytes to this channel from the given buffer. The handler parameter is a completion handler that is invoked when the write
 operation completes (or fails). The result passed to the completion
 handler is the number of bytes written.

  If a timeout is specified and the timeout elapses before the operation
 completes then it completes with the exception InterruptedByTimeoutException. Where a timeout occurs, and the
 implementation cannot guarantee that bytes have not been written, or will
 not be written to the channel from the given buffer, then further attempts
 to write to the channel will cause an unspecific runtime exception to be
 thrown.

  Otherwise this method works in the same manner as the AsynchronousByteChannel.write(ByteBuffer,Object,CompletionHandler)
 method.

Type Parameters:
A - The type of the attachment
Parameters:
src - The buffer from which bytes are to be retrieved
timeout - The maximum time for the I/O operation to complete
unit - The time unit of the timeout argument
attachment - The object to attach to the I/O operation; can be null
handler - The handler for consuming the result
Throws:
WritePendingException - If a write operation is already in progress on this channel
NotYetConnectedException - If this channel is not yet connected
ShutdownChannelGroupException - If the channel group has terminated


"
Channels,newChannel(InputStream in),static ReadableByteChannel,Constructs a channel that reads bytes from the given stream.,"

newChannel
public static ReadableByteChannel newChannel(InputStream in)
Constructs a channel that reads bytes from the given stream.

  The resulting channel will not be buffered; it will simply redirect
 its I/O operations to the given stream.  Closing the channel will in
 turn cause the stream to be closed.  

Parameters:
in - The stream from which bytes are to be read
Returns:
A new readable byte channel


"
Channels,newChannel(OutputStream out),static WritableByteChannel,Constructs a channel that writes bytes to the given stream.,"

newChannel
public static WritableByteChannel newChannel(OutputStream out)
Constructs a channel that writes bytes to the given stream.

  The resulting channel will not be buffered; it will simply redirect
 its I/O operations to the given stream.  Closing the channel will in
 turn cause the stream to be closed.  

Parameters:
out - The stream to which bytes are to be written
Returns:
A new writable byte channel


"
Channels,newInputStream(AsynchronousByteChannel ch),static InputStream,Constructs a stream that reads bytes from the given channel.,"

newInputStream
public static InputStream newInputStream(AsynchronousByteChannel ch)
Constructs a stream that reads bytes from the given channel.

  The stream will not be buffered, and it will not support the mark or reset methods.  The
 stream will be safe for access by multiple concurrent threads.  Closing
 the stream will in turn cause the channel to be closed.  

Parameters:
ch - The channel from which bytes will be read
Returns:
A new input stream
Since:
1.7


"
Channels,newInputStream(ReadableByteChannel ch),static InputStream,Constructs a stream that reads bytes from the given channel.,"

newInputStream
public static InputStream newInputStream(ReadableByteChannel ch)
Constructs a stream that reads bytes from the given channel.

  The read methods of the resulting stream will throw an
 IllegalBlockingModeException if invoked while the underlying
 channel is in non-blocking mode.  The stream will not be buffered, and
 it will not support the mark or reset methods.  The stream will be safe for access by
 multiple concurrent threads.  Closing the stream will in turn cause the
 channel to be closed.  

Parameters:
ch - The channel from which bytes will be read
Returns:
A new input stream


"
Channels,newOutputStream(AsynchronousByteChannel ch),static OutputStream,Constructs a stream that writes bytes to the given channel.,"

newOutputStream
public static OutputStream newOutputStream(AsynchronousByteChannel ch)
Constructs a stream that writes bytes to the given channel.

  The stream will not be buffered. The stream will be safe for access
 by multiple concurrent threads.  Closing the stream will in turn cause
 the channel to be closed.  

Parameters:
ch - The channel to which bytes will be written
Returns:
A new output stream
Since:
1.7


"
Channels,newOutputStream(WritableByteChannel ch),static OutputStream,Constructs a stream that writes bytes to the given channel.,"

newOutputStream
public static OutputStream newOutputStream(WritableByteChannel ch)
Constructs a stream that writes bytes to the given channel.

  The write methods of the resulting stream will throw an
 IllegalBlockingModeException if invoked while the underlying
 channel is in non-blocking mode.  The stream will not be buffered.  The
 stream will be safe for access by multiple concurrent threads.  Closing
 the stream will in turn cause the channel to be closed.  

Parameters:
ch - The channel to which bytes will be written
Returns:
A new output stream


"
Channels,"newReader(ReadableByteChannel ch, CharsetDecoder dec, int minBufferCap)",static Reader,Constructs a reader that decodes bytes from the given channel using the given decoder.,"

newReader
public static Reader newReader(ReadableByteChannel ch,
                               CharsetDecoder dec,
                               int minBufferCap)
Constructs a reader that decodes bytes from the given channel using the
 given decoder.

  The resulting stream will contain an internal input buffer of at
 least minBufferCap bytes.  The stream's read methods
 will, as needed, fill the buffer by reading bytes from the underlying
 channel; if the channel is in non-blocking mode when bytes are to be
 read then an IllegalBlockingModeException will be thrown.  The
 resulting stream will not otherwise be buffered, and it will not support
 the mark or reset methods.
 Closing the stream will in turn cause the channel to be closed.  

Parameters:
ch - The channel from which bytes will be read
dec - The charset decoder to be used
minBufferCap - The minimum capacity of the internal byte buffer,
         or -1 if an implementation-dependent
         default capacity is to be used
Returns:
A new reader


"
Channels,"newReader(ReadableByteChannel ch, String csName)",static Reader,Constructs a reader that decodes bytes from the given channel according to the named charset.,"

newReader
public static Reader newReader(ReadableByteChannel ch,
                               String csName)
Constructs a reader that decodes bytes from the given channel according
 to the named charset.

  An invocation of this method of the form

 
 Channels.newReader(ch, csname)

 behaves in exactly the same way as the expression

 
 Channels.newReader(ch,
                    Charset.forName(csName)
                        .newDecoder(),
                    -1);

Parameters:
ch - The channel from which bytes will be read
csName - The name of the charset to be used
Returns:
A new reader
Throws:
UnsupportedCharsetException - If no support for the named charset is available
          in this instance of the Java virtual machine


"
Channels,"newWriter(WritableByteChannel ch, CharsetEncoder enc, int minBufferCap)",static Writer,Constructs a writer that encodes characters using the given encoder and writes the resulting bytes to the given channel.,"

newWriter
public static Writer newWriter(WritableByteChannel ch,
                               CharsetEncoder enc,
                               int minBufferCap)
Constructs a writer that encodes characters using the given encoder and
 writes the resulting bytes to the given channel.

  The resulting stream will contain an internal output buffer of at
 least minBufferCap bytes.  The stream's write methods
 will, as needed, flush the buffer by writing bytes to the underlying
 channel; if the channel is in non-blocking mode when bytes are to be
 written then an IllegalBlockingModeException will be thrown.
 The resulting stream will not otherwise be buffered.  Closing the stream
 will in turn cause the channel to be closed.  

Parameters:
ch - The channel to which bytes will be written
enc - The charset encoder to be used
minBufferCap - The minimum capacity of the internal byte buffer,
         or -1 if an implementation-dependent
         default capacity is to be used
Returns:
A new writer


"
Channels,"newWriter(WritableByteChannel ch, String csName)",static Writer,Constructs a writer that encodes characters according to the named charset and writes the resulting bytes to the given channel.,"

newWriter
public static Writer newWriter(WritableByteChannel ch,
                               String csName)
Constructs a writer that encodes characters according to the named
 charset and writes the resulting bytes to the given channel.

  An invocation of this method of the form

 
 Channels.newWriter(ch, csname)

 behaves in exactly the same way as the expression

 
 Channels.newWriter(ch,
                    Charset.forName(csName)
                        .newEncoder(),
                    -1);

Parameters:
ch - The channel to which bytes will be written
csName - The name of the charset to be used
Returns:
A new writer
Throws:
UnsupportedCharsetException - If no support for the named charset is available
          in this instance of the Java virtual machine


"
DatagramChannel,bind(SocketAddress local),abstract DatagramChannel,Binds the channel's socket to a local address.,"

bind
public abstract DatagramChannel bind(SocketAddress local)
                              throws IOException
Description copied from interface: NetworkChannel
Binds the channel's socket to a local address.

  This method is used to establish an association between the socket and
 a local address. Once an association is established then the socket remains
 bound until the channel is closed. If the local parameter has the
 value null then the socket will be bound to an address that is
 assigned automatically.

Specified by:
bind in interface NetworkChannel
Parameters:
local - The address to bind the socket, or null to bind the socket
          to an automatically assigned socket address
Returns:
This channel
Throws:
AlreadyBoundException - If the socket is already bound
UnsupportedAddressTypeException - If the type of the given address is not supported
ClosedChannelException - If the channel is closed
IOException - If some other I/O error occurs
SecurityException - If a security manager has been installed and its checkListen method denies the
          operation
Since:
1.7
See Also:
NetworkChannel.getLocalAddress()


"
DatagramChannel,connect(SocketAddress remote),abstract DatagramChannel,Connects this channel's socket.,"

connect
public abstract DatagramChannel connect(SocketAddress remote)
                                 throws IOException
Connects this channel's socket.

  The channel's socket is configured so that it only receives
 datagrams from, and sends datagrams to, the given remote peer
 address.  Once connected, datagrams may not be received from or sent to
 any other address.  A datagram socket remains connected until it is
 explicitly disconnected or until it is closed.

  This method performs exactly the same security checks as the connect method of the DatagramSocket class.  That is, if a security manager has been
 installed then this method verifies that its checkAccept and checkConnect methods permit
 datagrams to be received from and sent to, respectively, the given
 remote address.

  This method may be invoked at any time.  It will not have any effect
 on read or write operations that are already in progress at the moment
 that it is invoked. If this channel's socket is not bound then this method
 will first cause the socket to be bound to an address that is assigned
 automatically, as if invoking the bind method with a
 parameter of null. 

Parameters:
remote - The remote address to which this channel is to be connected
Returns:
This datagram channel
Throws:
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the connect operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the connect operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
SecurityException - If a security manager has been installed
          and it does not permit access to the given remote address
IOException - If some other I/O error occurs


"
DatagramChannel,disconnect(),abstract DatagramChannel,Disconnects this channel's socket.,"

disconnect
public abstract DatagramChannel disconnect()
                                    throws IOException
Disconnects this channel's socket.

  The channel's socket is configured so that it can receive datagrams
 from, and sends datagrams to, any remote address so long as the security
 manager, if installed, permits it.

  This method may be invoked at any time.  It will not have any effect
 on read or write operations that are already in progress at the moment
 that it is invoked.

  If this channel's socket is not connected, or if the channel is
 closed, then invoking this method has no effect.  

Returns:
This datagram channel
Throws:
IOException - If some other I/O error occurs


"
DatagramChannel,getLocalAddress(),abstract SocketAddress,Returns the socket address that this channel's socket is bound to.,"

getLocalAddress
public abstract SocketAddress getLocalAddress()
                                       throws IOException
Returns the socket address that this channel's socket is bound to.

  Where the channel is bound to an Internet Protocol
 socket address then the return value from this method is of type InetSocketAddress.
 
 If there is a security manager set, its checkConnect method is
 called with the local address and -1 as its arguments to see
 if the operation is allowed. If the operation is not allowed,
 a SocketAddress representing the
 loopback address and the
 local port of the channel's socket is returned.

Specified by:
getLocalAddress in interface NetworkChannel
Returns:
The SocketAddress that the socket is bound to, or the
          SocketAddress representing the loopback address if
          denied by the security manager, or null if the
          channel's socket is not bound
Throws:
ClosedChannelException - If the channel is closed
IOException - If an I/O error occurs


"
DatagramChannel,getRemoteAddress(),abstract SocketAddress,Returns the remote address to which this channel's socket is connected.,"

getRemoteAddress
public abstract SocketAddress getRemoteAddress()
                                        throws IOException
Returns the remote address to which this channel's socket is connected.

Returns:
The remote address; null if the channel's socket is not
          connected
Throws:
ClosedChannelException - If the channel is closed
IOException - If an I/O error occurs
Since:
1.7


"
DatagramChannel,isConnected(),abstract boolean,Tells whether or not this channel's socket is connected.,"

isConnected
public abstract boolean isConnected()
Tells whether or not this channel's socket is connected.

Returns:
true if, and only if, this channel's socket
          is open and connected


"
DatagramChannel,open(),static DatagramChannel,Opens a datagram channel.,"

open
public static DatagramChannel open()
                            throws IOException
Opens a datagram channel.

  The new channel is created by invoking the openDatagramChannel method of the system-wide default SelectorProvider object.  The channel will not be
 connected.

  The ProtocolFamily of the channel's socket
 is platform (and possibly configuration) dependent and therefore unspecified.
 The open allows the protocol family to be
 selected when opening a datagram channel, and should be used to open
 datagram channels that are intended for Internet Protocol multicasting.

Returns:
A new datagram channel
Throws:
IOException - If an I/O error occurs


"
DatagramChannel,open(ProtocolFamily family),static DatagramChannel,Opens a datagram channel.,"

open
public static DatagramChannel open(ProtocolFamily family)
                            throws IOException
Opens a datagram channel.

  The family parameter is used to specify the ProtocolFamily. If the datagram channel is to be used for IP multicasting
 then this should correspond to the address type of the multicast groups
 that this channel will join.

  The new channel is created by invoking the openDatagramChannel method of the system-wide default SelectorProvider object.  The channel will not be
 connected.

Parameters:
family - The protocol family
Returns:
A new datagram channel
Throws:
UnsupportedOperationException - If the specified protocol family is not supported. For example,
          suppose the parameter is specified as StandardProtocolFamily.INET6
          but IPv6 is not enabled on the platform.
IOException - If an I/O error occurs
Since:
1.7


"
DatagramChannel,read(ByteBuffer dst),abstract int,Reads a datagram from this channel.,"

read
public abstract int read(ByteBuffer dst)
                  throws IOException
Reads a datagram from this channel.

  This method may only be invoked if this channel's socket is
 connected, and it only accepts datagrams from the socket's peer.  If
 there are more bytes in the datagram than remain in the given buffer
 then the remainder of the datagram is silently discarded.  Otherwise
 this method behaves exactly as specified in the ReadableByteChannel interface.  

Specified by:
read in interface ReadableByteChannel
Parameters:
dst - The buffer into which bytes are to be transferred
Returns:
The number of bytes read, possibly zero, or -1 if the
          channel has reached end-of-stream
Throws:
NotYetConnectedException - If this channel's socket is not connected
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the read operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the read operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
DatagramChannel,read(ByteBuffer[] dsts),long,Reads a datagram from this channel.,"

read
public final long read(ByteBuffer[] dsts)
                throws IOException
Reads a datagram from this channel.

  This method may only be invoked if this channel's socket is
 connected, and it only accepts datagrams from the socket's peer.  If
 there are more bytes in the datagram than remain in the given buffers
 then the remainder of the datagram is silently discarded.  Otherwise
 this method behaves exactly as specified in the ScatteringByteChannel interface.  

Specified by:
read in interface ScatteringByteChannel
Parameters:
dsts - The buffers into which bytes are to be transferred
Returns:
The number of bytes read, possibly zero,
         or -1 if the channel has reached end-of-stream
Throws:
NotYetConnectedException - If this channel's socket is not connected
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the read operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the read operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
DatagramChannel,"read(ByteBuffer[] dsts, int offset, int length)",abstract long,Reads a datagram from this channel.,"

read
public abstract long read(ByteBuffer[] dsts,
                          int offset,
                          int length)
                   throws IOException
Reads a datagram from this channel.

  This method may only be invoked if this channel's socket is
 connected, and it only accepts datagrams from the socket's peer.  If
 there are more bytes in the datagram than remain in the given buffers
 then the remainder of the datagram is silently discarded.  Otherwise
 this method behaves exactly as specified in the ScatteringByteChannel interface.  

Specified by:
read in interface ScatteringByteChannel
Parameters:
dsts - The buffers into which bytes are to be transferred
offset - The offset within the buffer array of the first buffer into
         which bytes are to be transferred; must be non-negative and no
         larger than dsts.length
length - The maximum number of buffers to be accessed; must be
         non-negative and no larger than
         dsts.length - offset
Returns:
The number of bytes read, possibly zero,
         or -1 if the channel has reached end-of-stream
Throws:
NotYetConnectedException - If this channel's socket is not connected
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the read operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the read operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
DatagramChannel,receive(ByteBuffer dst),abstract SocketAddress,Receives a datagram via this channel.,"

receive
public abstract SocketAddress receive(ByteBuffer dst)
                               throws IOException
Receives a datagram via this channel.

  If a datagram is immediately available, or if this channel is in
 blocking mode and one eventually becomes available, then the datagram is
 copied into the given byte buffer and its source address is returned.
 If this channel is in non-blocking mode and a datagram is not
 immediately available then this method immediately returns
 null.

  The datagram is transferred into the given byte buffer starting at
 its current position, as if by a regular read operation.  If there
 are fewer bytes remaining in the buffer than are required to hold the
 datagram then the remainder of the datagram is silently discarded.

  This method performs exactly the same security checks as the receive method of the DatagramSocket class.  That is, if the socket is not connected
 to a specific remote address and a security manager has been installed
 then for each datagram received this method verifies that the source's
 address and port number are permitted by the security manager's checkAccept method.  The overhead
 of this security check can be avoided by first connecting the socket via
 the connect method.

  This method may be invoked at any time.  If another thread has
 already initiated a read operation upon this channel, however, then an
 invocation of this method will block until the first operation is
 complete. If this channel's socket is not bound then this method will
 first cause the socket to be bound to an address that is assigned
 automatically, as if invoking the bind method with a
 parameter of null. 

Parameters:
dst - The buffer into which the datagram is to be transferred
Returns:
The datagram's source address,
          or null if this channel is in non-blocking mode
          and no datagram was immediately available
Throws:
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the read operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the read operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
SecurityException - If a security manager has been installed
          and it does not permit datagrams to be accepted
          from the datagram's sender
IOException - If some other I/O error occurs


"
DatagramChannel,"send(ByteBuffer src, SocketAddress target)",abstract int,Sends a datagram via this channel.,"

send
public abstract int send(ByteBuffer src,
                         SocketAddress target)
                  throws IOException
Sends a datagram via this channel.

  If this channel is in non-blocking mode and there is sufficient room
 in the underlying output buffer, or if this channel is in blocking mode
 and sufficient room becomes available, then the remaining bytes in the
 given buffer are transmitted as a single datagram to the given target
 address.

  The datagram is transferred from the byte buffer as if by a regular
 write operation.

  This method performs exactly the same security checks as the send method of the DatagramSocket class.  That is, if the socket is not connected
 to a specific remote address and a security manager has been installed
 then for each datagram sent this method verifies that the target address
 and port number are permitted by the security manager's checkConnect method.  The
 overhead of this security check can be avoided by first connecting the
 socket via the connect method.

  This method may be invoked at any time.  If another thread has
 already initiated a write operation upon this channel, however, then an
 invocation of this method will block until the first operation is
 complete. If this channel's socket is not bound then this method will
 first cause the socket to be bound to an address that is assigned
 automatically, as if by invoking the bind method with a
 parameter of null. 

Parameters:
src - The buffer containing the datagram to be sent
target - The address to which the datagram is to be sent
Returns:
The number of bytes sent, which will be either the number
           of bytes that were remaining in the source buffer when this
           method was invoked or, if this channel is non-blocking, may be
           zero if there was insufficient room for the datagram in the
           underlying output buffer
Throws:
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the read operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the read operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
SecurityException - If a security manager has been installed
          and it does not permit datagrams to be sent
          to the given address
IOException - If some other I/O error occurs


"
DatagramChannel,"setOption(SocketOption<T> name, T value)",abstract <T> DatagramChannel,Sets the value of a socket option.,"

setOption
public abstract <T> DatagramChannel setOption(SocketOption<T> name,
                                              T value)
                                       throws IOException
Description copied from interface: NetworkChannel
Sets the value of a socket option.

Specified by:
setOption in interface NetworkChannel
Type Parameters:
T - The type of the socket option value
Parameters:
name - The socket option
value - The value of the socket option. A value of null may be
          a valid value for some socket options.
Returns:
This channel
Throws:
UnsupportedOperationException - If the socket option is not supported by this channel
IllegalArgumentException - If the value is not a valid value for this socket option
ClosedChannelException - If this channel is closed
IOException - If an I/O error occurs
Since:
1.7
See Also:
StandardSocketOptions


"
DatagramChannel,socket(),abstract DatagramSocket,Retrieves a datagram socket associated with this channel.,"

socket
public abstract DatagramSocket socket()
Retrieves a datagram socket associated with this channel.

  The returned object will not declare any public methods that are not
 declared in the DatagramSocket class.  

Returns:
A datagram socket associated with this channel


"
DatagramChannel,validOps(),int,Returns an operation set identifying this channel's supported operations.,"

validOps
public final int validOps()
Returns an operation set identifying this channel's supported
 operations.

  Datagram channels support reading and writing, so this method
 returns (SelectionKey.OP_READ | SelectionKey.OP_WRITE).  

Specified by:
validOps in class SelectableChannel
Returns:
The valid-operation set


"
DatagramChannel,write(ByteBuffer src),abstract int,Writes a datagram to this channel.,"

write
public abstract int write(ByteBuffer src)
                   throws IOException
Writes a datagram to this channel.

  This method may only be invoked if this channel's socket is
 connected, in which case it sends datagrams directly to the socket's
 peer.  Otherwise it behaves exactly as specified in the WritableByteChannel interface.  

Specified by:
write in interface WritableByteChannel
Parameters:
src - The buffer from which bytes are to be retrieved
Returns:
The number of bytes written, possibly zero
Throws:
NotYetConnectedException - If this channel's socket is not connected
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the write operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the write operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
DatagramChannel,write(ByteBuffer[] srcs),long,Writes a datagram to this channel.,"

write
public final long write(ByteBuffer[] srcs)
                 throws IOException
Writes a datagram to this channel.

  This method may only be invoked if this channel's socket is
 connected, in which case it sends datagrams directly to the socket's
 peer.  Otherwise it behaves exactly as specified in the GatheringByteChannel interface.  

Specified by:
write in interface GatheringByteChannel
Parameters:
srcs - The buffers from which bytes are to be retrieved
Returns:
The number of bytes sent, which will be either the number
           of bytes that were remaining in the source buffer when this
           method was invoked or, if this channel is non-blocking, may be
           zero if there was insufficient room for the datagram in the
           underlying output buffer
Throws:
NotYetConnectedException - If this channel's socket is not connected
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the write operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the write operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
DatagramChannel,"write(ByteBuffer[] srcs, int offset, int length)",abstract long,Writes a datagram to this channel.,"

write
public abstract long write(ByteBuffer[] srcs,
                           int offset,
                           int length)
                    throws IOException
Writes a datagram to this channel.

  This method may only be invoked if this channel's socket is
 connected, in which case it sends datagrams directly to the socket's
 peer.  Otherwise it behaves exactly as specified in the GatheringByteChannel interface.  

Specified by:
write in interface GatheringByteChannel
Parameters:
srcs - The buffers from which bytes are to be retrieved
offset - The offset within the buffer array of the first buffer from
         which bytes are to be retrieved; must be non-negative and no
         larger than srcs.length
length - The maximum number of buffers to be accessed; must be
         non-negative and no larger than
         srcs.length - offset
Returns:
The number of bytes sent, which will be either the number
           of bytes that were remaining in the source buffer when this
           method was invoked or, if this channel is non-blocking, may be
           zero if there was insufficient room for the datagram in the
           underlying output buffer
Throws:
NotYetConnectedException - If this channel's socket is not connected
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the write operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the write operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
FileChannel,force(boolean metaData),abstract void,Forces any updates to this channel's file to be written to the storage device that contains it.,"

force
public abstract void force(boolean metaData)
                    throws IOException
Forces any updates to this channel's file to be written to the storage
 device that contains it.

  If this channel's file resides on a local storage device then when
 this method returns it is guaranteed that all changes made to the file
 since this channel was created, or since this method was last invoked,
 will have been written to that device.  This is useful for ensuring that
 critical information is not lost in the event of a system crash.

  If the file does not reside on a local device then no such guarantee
 is made.

  The metaData parameter can be used to limit the number of
 I/O operations that this method is required to perform.  Passing
 false for this parameter indicates that only updates to the
 file's content need be written to storage; passing true
 indicates that updates to both the file's content and metadata must be
 written, which generally requires at least one more I/O operation.
 Whether this parameter actually has any effect is dependent upon the
 underlying operating system and is therefore unspecified.

  Invoking this method may cause an I/O operation to occur even if the
 channel was only opened for reading.  Some operating systems, for
 example, maintain a last-access time as part of a file's metadata, and
 this time is updated whenever the file is read.  Whether or not this is
 actually done is system-dependent and is therefore unspecified.

  This method is only guaranteed to force changes that were made to
 this channel's file via the methods defined in this class.  It may or
 may not force changes that were made by modifying the content of a
 mapped byte buffer obtained by
 invoking the map method.  Invoking the force method of the mapped byte buffer will
 force changes made to the buffer's content to be written.  

Parameters:
metaData - If true then this method is required to force changes
          to both the file's content and metadata to be written to
          storage; otherwise, it need only force content changes to be
          written
Throws:
ClosedChannelException - If this channel is closed
IOException - If some other I/O error occurs


"
FileChannel,lock(),FileLock,Acquires an exclusive lock on this channel's file.,"

lock
public final FileLock lock()
                    throws IOException
Acquires an exclusive lock on this channel's file.

  An invocation of this method of the form fc.lock() behaves
 in exactly the same way as the invocation

 
     fc.lock(0L, Long.MAX_VALUE, false) 

Returns:
A lock object representing the newly-acquired lock
Throws:
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel while the invoking
          thread is blocked in this method
FileLockInterruptionException - If the invoking thread is interrupted while blocked in this
          method
OverlappingFileLockException - If a lock that overlaps the requested region is already held by
          this Java virtual machine, or if another thread is already
          blocked in this method and is attempting to lock an overlapping
          region of the same file
NonWritableChannelException - If this channel was not opened for writing
IOException - If some other I/O error occurs
See Also:
lock(long,long,boolean), 
tryLock(), 
tryLock(long,long,boolean)


"
FileChannel,"lock(long position, long size, boolean shared)",abstract FileLock,Acquires a lock on the given region of this channel's file.,"

lock
public abstract FileLock lock(long position,
                              long size,
                              boolean shared)
                       throws IOException
Acquires a lock on the given region of this channel's file.

  An invocation of this method will block until the region can be
 locked, this channel is closed, or the invoking thread is interrupted,
 whichever comes first.

  If this channel is closed by another thread during an invocation of
 this method then an AsynchronousCloseException will be thrown.

  If the invoking thread is interrupted while waiting to acquire the
 lock then its interrupt status will be set and a FileLockInterruptionException will be thrown.  If the invoker's
 interrupt status is set when this method is invoked then that exception
 will be thrown immediately; the thread's interrupt status will not be
 changed.

  The region specified by the position and size
 parameters need not be contained within, or even overlap, the actual
 underlying file.  Lock regions are fixed in size; if a locked region
 initially contains the end of the file and the file grows beyond the
 region then the new portion of the file will not be covered by the lock.
 If a file is expected to grow in size and a lock on the entire file is
 required then a region starting at zero, and no smaller than the
 expected maximum size of the file, should be locked.  The zero-argument
 lock() method simply locks a region of size Long.MAX_VALUE.

  Some operating systems do not support shared locks, in which case a
 request for a shared lock is automatically converted into a request for
 an exclusive lock.  Whether the newly-acquired lock is shared or
 exclusive may be tested by invoking the resulting lock object's isShared method.

  File locks are held on behalf of the entire Java virtual machine.
 They are not suitable for controlling access to a file by multiple
 threads within the same virtual machine.  

Parameters:
position - The position at which the locked region is to start; must be
         non-negative
size - The size of the locked region; must be non-negative, and the sum
         position + size must be non-negative
shared - true to request a shared lock, in which case this
         channel must be open for reading (and possibly writing);
         false to request an exclusive lock, in which case this
         channel must be open for writing (and possibly reading)
Returns:
A lock object representing the newly-acquired lock
Throws:
IllegalArgumentException - If the preconditions on the parameters do not hold
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel while the invoking
          thread is blocked in this method
FileLockInterruptionException - If the invoking thread is interrupted while blocked in this
          method
OverlappingFileLockException - If a lock that overlaps the requested region is already held by
          this Java virtual machine, or if another thread is already
          blocked in this method and is attempting to lock an overlapping
          region
NonReadableChannelException - If shared is true this channel was not
          opened for reading
NonWritableChannelException - If shared is false but this channel was not
          opened for writing
IOException - If some other I/O error occurs
See Also:
lock(), 
tryLock(), 
tryLock(long,long,boolean)


"
FileChannel,"map(FileChannel.MapMode mode, long position, long size)",abstract MappedByteBuffer,Maps a region of this channel's file directly into memory.,"

map
public abstract MappedByteBuffer map(FileChannel.MapMode mode,
                                     long position,
                                     long size)
                              throws IOException
Maps a region of this channel's file directly into memory.

  A region of a file may be mapped into memory in one of three modes:
 

 Read-only: Any attempt to modify the resulting buffer
   will cause a ReadOnlyBufferException to be thrown.
   (MapMode.READ_ONLY) 
 Read/write: Changes made to the resulting buffer will
   eventually be propagated to the file; they may or may not be made
   visible to other programs that have mapped the same file.  (MapMode.READ_WRITE) 
 Private: Changes made to the resulting buffer will not
   be propagated to the file and will not be visible to other programs
   that have mapped the same file; instead, they will cause private
   copies of the modified portions of the buffer to be created.  (MapMode.PRIVATE) 

 For a read-only mapping, this channel must have been opened for
 reading; for a read/write or private mapping, this channel must have
 been opened for both reading and writing.

  The mapped byte buffer
 returned by this method will have a position of zero and a limit and
 capacity of size; its mark will be undefined.  The buffer and
 the mapping that it represents will remain valid until the buffer itself
 is garbage-collected.

  A mapping, once established, is not dependent upon the file channel
 that was used to create it.  Closing the channel, in particular, has no
 effect upon the validity of the mapping.

  Many of the details of memory-mapped files are inherently dependent
 upon the underlying operating system and are therefore unspecified.  The
 behavior of this method when the requested region is not completely
 contained within this channel's file is unspecified.  Whether changes
 made to the content or size of the underlying file, by this program or
 another, are propagated to the buffer is unspecified.  The rate at which
 changes to the buffer are propagated to the file is unspecified.

  For most operating systems, mapping a file into memory is more
 expensive than reading or writing a few tens of kilobytes of data via
 the usual read and write methods.  From the
 standpoint of performance it is generally only worth mapping relatively
 large files into memory.  

Parameters:
mode - One of the constants READ_ONLY, READ_WRITE, or PRIVATE defined in the FileChannel.MapMode class, according to
         whether the file is to be mapped read-only, read/write, or
         privately (copy-on-write), respectively
position - The position within the file at which the mapped region
         is to start; must be non-negative
size - The size of the region to be mapped; must be non-negative and
         no greater than Integer.MAX_VALUE
Returns:
The mapped byte buffer
Throws:
NonReadableChannelException - If the mode is READ_ONLY but
         this channel was not opened for reading
NonWritableChannelException - If the mode is READ_WRITE or
         PRIVATE but this channel was not opened
         for both reading and writing
IllegalArgumentException - If the preconditions on the parameters do not hold
IOException - If some other I/O error occurs
See Also:
FileChannel.MapMode, 
MappedByteBuffer


"
FileChannel,"open(Path path, OpenOption... options)",static FileChannel,"Opens or creates a file, returning a file channel to access the file.","

open
public static FileChannel open(Path path,
                               OpenOption... options)
                        throws IOException
Opens or creates a file, returning a file channel to access the file.

  An invocation of this method behaves in exactly the same way as the
 invocation
 
     fc.open(file, opts, new FileAttribute<?>[0]);
 
 where opts is a set of the options specified in the options array.

Parameters:
path - The path of the file to open or create
options - Options specifying how the file is opened
Returns:
A new file channel
Throws:
IllegalArgumentException - If the set contains an invalid combination of options
UnsupportedOperationException - If the path is associated with a provider that does not
          support creating file channels, or an unsupported open option is
          specified
IOException - If an I/O error occurs
SecurityException - If a security manager is installed and it denies an
          unspecified permission required by the implementation.
          In the case of the default provider, the SecurityManager.checkRead(String) method is invoked to check
          read access if the file is opened for reading. The SecurityManager.checkWrite(String) method is invoked to check
          write access if the file is opened for writing
Since:
1.7


"
FileChannel,"open(Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs)",static FileChannel,"Opens or creates a file, returning a file channel to access the file.","

open
public static FileChannel open(Path path,
                               Set<? extends OpenOption> options,
                               FileAttribute<?>... attrs)
                        throws IOException
Opens or creates a file, returning a file channel to access the file.

  The options parameter determines how the file is opened.
 The READ and WRITE options determine if the file should be opened for reading and/or
 writing. If neither option (or the APPEND
 option) is contained in the array then the file is opened for reading.
 By default reading or writing commences at the beginning of the file.

  In the addition to READ and WRITE, the following
 options may be present:

 
 Option Description 

 APPEND 
 If this option is present then the file is opened for writing and
     each invocation of the channel's write method first advances
     the position to the end of the file and then writes the requested
     data. Whether the advancement of the position and the writing of the
     data are done in a single atomic operation is system-dependent and
     therefore unspecified. This option may not be used in conjunction
     with the READ or TRUNCATE_EXISTING options. 


 TRUNCATE_EXISTING 
 If this option is present then the existing file is truncated to
   a size of 0 bytes. This option is ignored when the file is opened only
   for reading. 


 CREATE_NEW 
 If this option is present then a new file is created, failing if
   the file already exists. When creating a file the check for the
   existence of the file and the creation of the file if it does not exist
   is atomic with respect to other file system operations. This option is
   ignored when the file is opened only for reading. 


 CREATE 
 If this option is present then an existing file is opened if it
   exists, otherwise a new file is created. When creating a file the check
   for the existence of the file and the creation of the file if it does
   not exist is atomic with respect to other file system operations. This
   option is ignored if the CREATE_NEW option is also present or
   the file is opened only for reading. 


 DELETE_ON_CLOSE 
 When this option is present then the implementation makes a
   best effort attempt to delete the file when closed by the
   the close method. If the close method is not
   invoked then a best effort attempt is made to delete the file
   when the Java virtual machine terminates. 


SPARSE 
 When creating a new file this option is a hint that the
   new file will be sparse. This option is ignored when not creating
   a new file. 


 SYNC 
 Requires that every update to the file's content or metadata be
   written synchronously to the underlying storage device. (see  Synchronized I/O file
   integrity). 


 DSYNC 
 Requires that every update to the file's content be written
   synchronously to the underlying storage device. (see  Synchronized I/O file
   integrity). 


 An implementation may also support additional options.

  The attrs parameter is an optional array of file file-attributes to set atomically when creating the file.

  The new channel is created by invoking the newFileChannel method on the
 provider that created the Path.

Parameters:
path - The path of the file to open or create
options - Options specifying how the file is opened
attrs - An optional list of file attributes to set atomically when
          creating the file
Returns:
A new file channel
Throws:
IllegalArgumentException - If the set contains an invalid combination of options
UnsupportedOperationException - If the path is associated with a provider that does not
          support creating file channels, or an unsupported open option is
          specified, or the array contains an attribute that cannot be set
          atomically when creating the file
IOException - If an I/O error occurs
SecurityException - If a security manager is installed and it denies an
          unspecified permission required by the implementation.
          In the case of the default provider, the SecurityManager.checkRead(String) method is invoked to check
          read access if the file is opened for reading. The SecurityManager.checkWrite(String) method is invoked to check
          write access if the file is opened for writing
Since:
1.7


"
FileChannel,position(),abstract long,Returns this channel's file position.,"

position
public abstract long position()
                       throws IOException
Returns this channel's file position.

Specified by:
position in interface SeekableByteChannel
Returns:
This channel's file position,
          a non-negative integer counting the number of bytes
          from the beginning of the file to the current position
Throws:
ClosedChannelException - If this channel is closed
IOException - If some other I/O error occurs


"
FileChannel,position(long newPosition),abstract FileChannel,Sets this channel's file position.,"

position
public abstract FileChannel position(long newPosition)
                              throws IOException
Sets this channel's file position.

  Setting the position to a value that is greater than the file's
 current size is legal but does not change the size of the file.  A later
 attempt to read bytes at such a position will immediately return an
 end-of-file indication.  A later attempt to write bytes at such a
 position will cause the file to be grown to accommodate the new bytes;
 the values of any bytes between the previous end-of-file and the
 newly-written bytes are unspecified.  

Specified by:
position in interface SeekableByteChannel
Parameters:
newPosition - The new position, a non-negative integer counting
         the number of bytes from the beginning of the file
Returns:
This file channel
Throws:
ClosedChannelException - If this channel is closed
IllegalArgumentException - If the new position is negative
IOException - If some other I/O error occurs


"
FileChannel,read(ByteBuffer dst),abstract int,Reads a sequence of bytes from this channel into the given buffer.,"

read
public abstract int read(ByteBuffer dst)
                  throws IOException
Reads a sequence of bytes from this channel into the given buffer.

  Bytes are read starting at this channel's current file position, and
 then the file position is updated with the number of bytes actually
 read.  Otherwise this method behaves exactly as specified in the ReadableByteChannel interface. 

Specified by:
read in interface ReadableByteChannel
Specified by:
read in interface SeekableByteChannel
Parameters:
dst - The buffer into which bytes are to be transferred
Returns:
The number of bytes read, possibly zero, or -1 if the
          channel has reached end-of-stream
Throws:
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the read operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the read operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
FileChannel,read(ByteBuffer[] dsts),long,Reads a sequence of bytes from this channel into the given buffers.,"

read
public final long read(ByteBuffer[] dsts)
                throws IOException
Reads a sequence of bytes from this channel into the given buffers.

  Bytes are read starting at this channel's current file position, and
 then the file position is updated with the number of bytes actually
 read.  Otherwise this method behaves exactly as specified in the ScatteringByteChannel interface.  

Specified by:
read in interface ScatteringByteChannel
Parameters:
dsts - The buffers into which bytes are to be transferred
Returns:
The number of bytes read, possibly zero,
         or -1 if the channel has reached end-of-stream
Throws:
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the read operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the read operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
FileChannel,"read(ByteBuffer[] dsts, int offset, int length)",abstract long,Reads a sequence of bytes from this channel into a subsequence of the given buffers.,"

read
public abstract long read(ByteBuffer[] dsts,
                          int offset,
                          int length)
                   throws IOException
Reads a sequence of bytes from this channel into a subsequence of the
 given buffers.

  Bytes are read starting at this channel's current file position, and
 then the file position is updated with the number of bytes actually
 read.  Otherwise this method behaves exactly as specified in the ScatteringByteChannel interface.  

Specified by:
read in interface ScatteringByteChannel
Parameters:
dsts - The buffers into which bytes are to be transferred
offset - The offset within the buffer array of the first buffer into
         which bytes are to be transferred; must be non-negative and no
         larger than dsts.length
length - The maximum number of buffers to be accessed; must be
         non-negative and no larger than
         dsts.length - offset
Returns:
The number of bytes read, possibly zero,
         or -1 if the channel has reached end-of-stream
Throws:
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the read operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the read operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
FileChannel,"read(ByteBuffer dst, long position)",abstract int,"Reads a sequence of bytes from this channel into the given buffer, starting at the given file position.","

read
public abstract int read(ByteBuffer dst,
                         long position)
                  throws IOException
Reads a sequence of bytes from this channel into the given buffer,
 starting at the given file position.

  This method works in the same manner as the read(ByteBuffer) method, except that bytes are read starting at the
 given file position rather than at the channel's current position.  This
 method does not modify this channel's position.  If the given position
 is greater than the file's current size then no bytes are read.  

Parameters:
dst - The buffer into which bytes are to be transferred
position - The file position at which the transfer is to begin;
         must be non-negative
Returns:
The number of bytes read, possibly zero, or -1 if the
          given position is greater than or equal to the file's current
          size
Throws:
IllegalArgumentException - If the position is negative
NonReadableChannelException - If this channel was not opened for reading
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the read operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the read operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
FileChannel,size(),abstract long,Returns the current size of this channel's file.,"

size
public abstract long size()
                   throws IOException
Returns the current size of this channel's file.

Specified by:
size in interface SeekableByteChannel
Returns:
The current size of this channel's file,
          measured in bytes
Throws:
ClosedChannelException - If this channel is closed
IOException - If some other I/O error occurs


"
FileChannel,"transferFrom(ReadableByteChannel src, long position, long count)",abstract long,Transfers bytes into this channel's file from the given readable byte channel.,"

transferFrom
public abstract long transferFrom(ReadableByteChannel src,
                                  long position,
                                  long count)
                           throws IOException
Transfers bytes into this channel's file from the given readable byte
 channel.

  An attempt is made to read up to count bytes from the
 source channel and write them to this channel's file starting at the
 given position.  An invocation of this method may or may not
 transfer all of the requested bytes; whether or not it does so depends
 upon the natures and states of the channels.  Fewer than the requested
 number of bytes will be transferred if the source channel has fewer than
 count bytes remaining, or if the source channel is non-blocking
 and has fewer than count bytes immediately available in its
 input buffer.

  This method does not modify this channel's position.  If the given
 position is greater than the file's current size then no bytes are
 transferred.  If the source channel has a position then bytes are read
 starting at that position and then the position is incremented by the
 number of bytes read.

  This method is potentially much more efficient than a simple loop
 that reads from the source channel and writes to this channel.  Many
 operating systems can transfer bytes directly from the source channel
 into the filesystem cache without actually copying them.  

Parameters:
src - The source channel
position - The position within the file at which the transfer is to begin;
         must be non-negative
count - The maximum number of bytes to be transferred; must be
         non-negative
Returns:
The number of bytes, possibly zero,
          that were actually transferred
Throws:
IllegalArgumentException - If the preconditions on the parameters do not hold
NonReadableChannelException - If the source channel was not opened for reading
NonWritableChannelException - If this channel was not opened for writing
ClosedChannelException - If either this channel or the source channel is closed
AsynchronousCloseException - If another thread closes either channel
          while the transfer is in progress
ClosedByInterruptException - If another thread interrupts the current thread while the
          transfer is in progress, thereby closing both channels and
          setting the current thread's interrupt status
IOException - If some other I/O error occurs


"
FileChannel,"transferTo(long position, long count, WritableByteChannel target)",abstract long,Transfers bytes from this channel's file to the given writable byte channel.,"

transferTo
public abstract long transferTo(long position,
                                long count,
                                WritableByteChannel target)
                         throws IOException
Transfers bytes from this channel's file to the given writable byte
 channel.

  An attempt is made to read up to count bytes starting at
 the given position in this channel's file and write them to the
 target channel.  An invocation of this method may or may not transfer
 all of the requested bytes; whether or not it does so depends upon the
 natures and states of the channels.  Fewer than the requested number of
 bytes are transferred if this channel's file contains fewer than
 count bytes starting at the given position, or if the
 target channel is non-blocking and it has fewer than count
 bytes free in its output buffer.

  This method does not modify this channel's position.  If the given
 position is greater than the file's current size then no bytes are
 transferred.  If the target channel has a position then bytes are
 written starting at that position and then the position is incremented
 by the number of bytes written.

  This method is potentially much more efficient than a simple loop
 that reads from this channel and writes to the target channel.  Many
 operating systems can transfer bytes directly from the filesystem cache
 to the target channel without actually copying them.  

Parameters:
position - The position within the file at which the transfer is to begin;
         must be non-negative
count - The maximum number of bytes to be transferred; must be
         non-negative
target - The target channel
Returns:
The number of bytes, possibly zero,
          that were actually transferred
Throws:
IllegalArgumentException - If the preconditions on the parameters do not hold
NonReadableChannelException - If this channel was not opened for reading
NonWritableChannelException - If the target channel was not opened for writing
ClosedChannelException - If either this channel or the target channel is closed
AsynchronousCloseException - If another thread closes either channel
          while the transfer is in progress
ClosedByInterruptException - If another thread interrupts the current thread while the
          transfer is in progress, thereby closing both channels and
          setting the current thread's interrupt status
IOException - If some other I/O error occurs


"
FileChannel,truncate(long size),abstract FileChannel,Truncates this channel's file to the given size.,"

truncate
public abstract FileChannel truncate(long size)
                              throws IOException
Truncates this channel's file to the given size.

  If the given size is less than the file's current size then the file
 is truncated, discarding any bytes beyond the new end of the file.  If
 the given size is greater than or equal to the file's current size then
 the file is not modified.  In either case, if this channel's file
 position is greater than the given size then it is set to that size.
 

Specified by:
truncate in interface SeekableByteChannel
Parameters:
size - The new size, a non-negative byte count
Returns:
This file channel
Throws:
NonWritableChannelException - If this channel was not opened for writing
ClosedChannelException - If this channel is closed
IllegalArgumentException - If the new size is negative
IOException - If some other I/O error occurs


"
FileChannel,tryLock(),FileLock,Attempts to acquire an exclusive lock on this channel's file.,"

tryLock
public final FileLock tryLock()
                       throws IOException
Attempts to acquire an exclusive lock on this channel's file.

  An invocation of this method of the form fc.tryLock()
 behaves in exactly the same way as the invocation

 
     fc.tryLock(0L, Long.MAX_VALUE, false) 

Returns:
A lock object representing the newly-acquired lock,
          or null if the lock could not be acquired
          because another program holds an overlapping lock
Throws:
ClosedChannelException - If this channel is closed
OverlappingFileLockException - If a lock that overlaps the requested region is already held by
          this Java virtual machine, or if another thread is already
          blocked in this method and is attempting to lock an overlapping
          region
IOException - If some other I/O error occurs
See Also:
lock(), 
lock(long,long,boolean), 
tryLock(long,long,boolean)


"
FileChannel,"tryLock(long position, long size, boolean shared)",abstract FileLock,Attempts to acquire a lock on the given region of this channel's file.,"

tryLock
public abstract FileLock tryLock(long position,
                                 long size,
                                 boolean shared)
                          throws IOException
Attempts to acquire a lock on the given region of this channel's file.

  This method does not block.  An invocation always returns
 immediately, either having acquired a lock on the requested region or
 having failed to do so.  If it fails to acquire a lock because an
 overlapping lock is held by another program then it returns
 null.  If it fails to acquire a lock for any other reason then
 an appropriate exception is thrown.

  The region specified by the position and size
 parameters need not be contained within, or even overlap, the actual
 underlying file.  Lock regions are fixed in size; if a locked region
 initially contains the end of the file and the file grows beyond the
 region then the new portion of the file will not be covered by the lock.
 If a file is expected to grow in size and a lock on the entire file is
 required then a region starting at zero, and no smaller than the
 expected maximum size of the file, should be locked.  The zero-argument
 tryLock() method simply locks a region of size Long.MAX_VALUE.

  Some operating systems do not support shared locks, in which case a
 request for a shared lock is automatically converted into a request for
 an exclusive lock.  Whether the newly-acquired lock is shared or
 exclusive may be tested by invoking the resulting lock object's isShared method.

  File locks are held on behalf of the entire Java virtual machine.
 They are not suitable for controlling access to a file by multiple
 threads within the same virtual machine.  

Parameters:
position - The position at which the locked region is to start; must be
         non-negative
size - The size of the locked region; must be non-negative, and the sum
         position + size must be non-negative
shared - true to request a shared lock,
         false to request an exclusive lock
Returns:
A lock object representing the newly-acquired lock,
          or null if the lock could not be acquired
          because another program holds an overlapping lock
Throws:
IllegalArgumentException - If the preconditions on the parameters do not hold
ClosedChannelException - If this channel is closed
OverlappingFileLockException - If a lock that overlaps the requested region is already held by
          this Java virtual machine, or if another thread is already
          blocked in this method and is attempting to lock an overlapping
          region of the same file
IOException - If some other I/O error occurs
See Also:
lock(), 
lock(long,long,boolean), 
tryLock()


"
FileChannel,write(ByteBuffer src),abstract int,Writes a sequence of bytes to this channel from the given buffer.,"

write
public abstract int write(ByteBuffer src)
                   throws IOException
Writes a sequence of bytes to this channel from the given buffer.

  Bytes are written starting at this channel's current file position
 unless the channel is in append mode, in which case the position is
 first advanced to the end of the file.  The file is grown, if necessary,
 to accommodate the written bytes, and then the file position is updated
 with the number of bytes actually written.  Otherwise this method
 behaves exactly as specified by the WritableByteChannel
 interface. 

Specified by:
write in interface SeekableByteChannel
Specified by:
write in interface WritableByteChannel
Parameters:
src - The buffer from which bytes are to be retrieved
Returns:
The number of bytes written, possibly zero
Throws:
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the write operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the write operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
FileChannel,write(ByteBuffer[] srcs),long,Writes a sequence of bytes to this channel from the given buffers.,"

write
public final long write(ByteBuffer[] srcs)
                 throws IOException
Writes a sequence of bytes to this channel from the given buffers.

  Bytes are written starting at this channel's current file position
 unless the channel is in append mode, in which case the position is
 first advanced to the end of the file.  The file is grown, if necessary,
 to accommodate the written bytes, and then the file position is updated
 with the number of bytes actually written.  Otherwise this method
 behaves exactly as specified in the GatheringByteChannel
 interface.  

Specified by:
write in interface GatheringByteChannel
Parameters:
srcs - The buffers from which bytes are to be retrieved
Returns:
The number of bytes written, possibly zero
Throws:
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the write operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the write operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
FileChannel,"write(ByteBuffer[] srcs, int offset, int length)",abstract long,Writes a sequence of bytes to this channel from a subsequence of the given buffers.,"

write
public abstract long write(ByteBuffer[] srcs,
                           int offset,
                           int length)
                    throws IOException
Writes a sequence of bytes to this channel from a subsequence of the
 given buffers.

  Bytes are written starting at this channel's current file position
 unless the channel is in append mode, in which case the position is
 first advanced to the end of the file.  The file is grown, if necessary,
 to accommodate the written bytes, and then the file position is updated
 with the number of bytes actually written.  Otherwise this method
 behaves exactly as specified in the GatheringByteChannel
 interface.  

Specified by:
write in interface GatheringByteChannel
Parameters:
srcs - The buffers from which bytes are to be retrieved
offset - The offset within the buffer array of the first buffer from
         which bytes are to be retrieved; must be non-negative and no
         larger than srcs.length
length - The maximum number of buffers to be accessed; must be
         non-negative and no larger than
         srcs.length - offset
Returns:
The number of bytes written, possibly zero
Throws:
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the write operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the write operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
FileChannel,"write(ByteBuffer src, long position)",abstract int,"Writes a sequence of bytes to this channel from the given buffer, starting at the given file position.","

write
public abstract int write(ByteBuffer src,
                          long position)
                   throws IOException
Writes a sequence of bytes to this channel from the given buffer,
 starting at the given file position.

  This method works in the same manner as the write(ByteBuffer) method, except that bytes are written starting at
 the given file position rather than at the channel's current position.
 This method does not modify this channel's position.  If the given
 position is greater than the file's current size then the file will be
 grown to accommodate the new bytes; the values of any bytes between the
 previous end-of-file and the newly-written bytes are unspecified.  

Parameters:
src - The buffer from which bytes are to be transferred
position - The file position at which the transfer is to begin;
         must be non-negative
Returns:
The number of bytes written, possibly zero
Throws:
IllegalArgumentException - If the position is negative
NonWritableChannelException - If this channel was not opened for writing
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the write operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the write operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
FileChannel.MapMode,toString(),String,Returns a string describing this file-mapping mode.,"

toString
public String toString()
Returns a string describing this file-mapping mode.

Overrides:
toString in class Object
Returns:
A descriptive string


"
FileLock,acquiredBy(),Channel,Returns the channel upon whose file this lock was acquired.,"

acquiredBy
public Channel acquiredBy()
Returns the channel upon whose file this lock was acquired.

Returns:
The channel upon whose file this lock was acquired.
Since:
1.7


"
FileLock,channel(),FileChannel,Returns the file channel upon whose file this lock was acquired.,"

channel
public final FileChannel channel()
Returns the file channel upon whose file this lock was acquired.

  This method has been superseded by the acquiredBy
 method.

Returns:
The file channel, or null if the file lock was not
          acquired by a file channel.


"
FileLock,close(),void,This method invokes the release() method.,"

close
public final void close()
                 throws IOException
This method invokes the release() method. It was added
 to the class so that it could be used in conjunction with the
 automatic resource management block construct.

Specified by:
close in interface AutoCloseable
Throws:
IOException
Since:
1.7


"
FileLock,isShared(),boolean,Tells whether this lock is shared.,"

isShared
public final boolean isShared()
Tells whether this lock is shared.

Returns:
true if lock is shared,
         false if it is exclusive


"
FileLock,isValid(),abstract boolean,Tells whether or not this lock is valid.,"

isValid
public abstract boolean isValid()
Tells whether or not this lock is valid.

  A lock object remains valid until it is released or the associated
 file channel is closed, whichever comes first.  

Returns:
true if, and only if, this lock is valid


"
FileLock,"overlaps(long position, long size)",boolean,Tells whether or not this lock overlaps the given lock range.,"

overlaps
public final boolean overlaps(long position,
                              long size)
Tells whether or not this lock overlaps the given lock range.

Parameters:
position - The starting position of the lock range
size - The size of the lock range
Returns:
true if, and only if, this lock and the given lock
          range overlap by at least one byte


"
FileLock,position(),long,Returns the position within the file of the first byte of the locked region.,"

position
public final long position()
Returns the position within the file of the first byte of the locked
 region.

  A locked region need not be contained within, or even overlap, the
 actual underlying file, so the value returned by this method may exceed
 the file's current size.  

Returns:
The position


"
FileLock,release(),abstract void,Releases this lock.,"

release
public abstract void release()
                      throws IOException
Releases this lock.

  If this lock object is valid then invoking this method releases the
 lock and renders the object invalid.  If this lock object is invalid
 then invoking this method has no effect.  

Throws:
ClosedChannelException - If the channel that was used to acquire this lock
          is no longer open
IOException - If an I/O error occurs


"
FileLock,size(),long,Returns the size of the locked region in bytes.,"

size
public final long size()
Returns the size of the locked region in bytes.

  A locked region need not be contained within, or even overlap, the
 actual underlying file, so the value returned by this method may exceed
 the file's current size.  

Returns:
The size of the locked region


"
FileLock,toString(),String,"Returns a string describing the range, type, and validity of this lock.","

toString
public final String toString()
Returns a string describing the range, type, and validity of this lock.

Overrides:
toString in class Object
Returns:
A descriptive string


"
MembershipKey,block(InetAddress source),abstract MembershipKey,Block multicast datagrams from the given source address.,"

block
public abstract MembershipKey block(InetAddress source)
                             throws IOException
Block multicast datagrams from the given source address.

  If this membership key is not source-specific, and the underlying
 operating system supports source filtering, then this method blocks
 multicast datagrams from the given source address. If the given source
 address is already blocked then this method has no effect.
 After a source address is blocked it may still be possible to receive
 datagrams from that source. This can arise when datagrams are waiting to
 be received in the socket's receive buffer.

Parameters:
source - The source address to block
Returns:
This membership key
Throws:
IllegalArgumentException - If the source parameter is not a unicast address or
          is not the same address type as the multicast group
IllegalStateException - If this membership key is source-specific or is no longer valid
UnsupportedOperationException - If the underlying operating system does not support source
          filtering
IOException - If an I/O error occurs


"
MembershipKey,channel(),abstract MulticastChannel,Returns the channel for which this membership key was created.,"

channel
public abstract MulticastChannel channel()
Returns the channel for which this membership key was created. This
 method will continue to return the channel even after the membership
 becomes invalid.

Returns:
the channel


"
MembershipKey,drop(),abstract void,Drop membership.,"

drop
public abstract void drop()
Drop membership.

  If the membership key represents a membership to receive all datagrams
 then the membership is dropped and the channel will no longer receive any
 datagrams sent to the group. If the membership key is source-specific
 then the channel will no longer receive datagrams sent to the group from
 that source address.

  After membership is dropped it may still be possible to receive
 datagrams sent to the group. This can arise when datagrams are waiting to
 be received in the socket's receive buffer. After membership is dropped
 then the channel may join the group again
 in which case a new membership key is returned.

  Upon return, this membership object will be invalid.
 If the multicast group membership is already invalid then invoking this
 method has no effect. Once a multicast group membership is invalid,
 it remains invalid forever.

"
MembershipKey,group(),abstract InetAddress,Returns the multicast group for which this membership key was created.,"

group
public abstract InetAddress group()
Returns the multicast group for which this membership key was created.
 This method will continue to return the group even after the membership
 becomes invalid.

Returns:
the multicast group


"
MembershipKey,isValid(),abstract boolean,Tells whether or not this membership is valid.,"

isValid
public abstract boolean isValid()
Tells whether or not this membership is valid.

  A multicast group membership is valid upon creation and remains
 valid until the membership is dropped by invoking the drop
 method, or the channel is closed.

Returns:
true if this membership key is valid, false
          otherwise


"
MembershipKey,networkInterface(),abstract NetworkInterface,Returns the network interface for which this membership key was created.,"

networkInterface
public abstract NetworkInterface networkInterface()
Returns the network interface for which this membership key was created.
 This method will continue to return the network interface even after the
 membership becomes invalid.

Returns:
the network interface


"
MembershipKey,sourceAddress(),abstract InetAddress,"Returns the source address if this membership key is source-specific, or null if this membership is not source-specific.","

sourceAddress
public abstract InetAddress sourceAddress()
Returns the source address if this membership key is source-specific,
 or null if this membership is not source-specific.

Returns:
The source address if this membership key is source-specific,
          otherwise null


"
MembershipKey,unblock(InetAddress source),abstract MembershipKey,Unblock multicast datagrams from the given source address that was previously blocked using the block method.,"

unblock
public abstract MembershipKey unblock(InetAddress source)
Unblock multicast datagrams from the given source address that was
 previously blocked using the block method.

Parameters:
source - The source address to unblock
Returns:
This membership key
Throws:
IllegalStateException - If the given source address is not currently blocked or the
          membership key is no longer valid


"
Pipe,open(),static Pipe,Opens a pipe.,"

open
public static Pipe open()
                 throws IOException
Opens a pipe.

  The new pipe is created by invoking the openPipe method of the
 system-wide default SelectorProvider
 object.  

Returns:
A new pipe
Throws:
IOException - If an I/O error occurs


"
Pipe,sink(),abstract Pipe.SinkChannel,Returns this pipe's sink channel.,"

sink
public abstract Pipe.SinkChannel sink()
Returns this pipe's sink channel.

Returns:
This pipe's sink channel


"
Pipe,source(),abstract Pipe.SourceChannel,Returns this pipe's source channel.,"

source
public abstract Pipe.SourceChannel source()
Returns this pipe's source channel.

Returns:
This pipe's source channel


"
Pipe.SinkChannel,validOps(),int,Returns an operation set identifying this channel's supported operations.,"

validOps
public final int validOps()
Returns an operation set identifying this channel's supported
 operations.

  Pipe-sink channels only support writing, so this method returns
 SelectionKey.OP_WRITE.  

Specified by:
validOps in class SelectableChannel
Returns:
The valid-operation set


"
Pipe.SourceChannel,validOps(),int,Returns an operation set identifying this channel's supported operations.,"

validOps
public final int validOps()
Returns an operation set identifying this channel's supported
 operations.

  Pipe-source channels only support reading, so this method
 returns SelectionKey.OP_READ.  

Specified by:
validOps in class SelectableChannel
Returns:
The valid-operation set


"
SelectableChannel,blockingLock(),abstract Object,Retrieves the object upon which the configureBlocking and register methods synchronize.,"

blockingLock
public abstract Object blockingLock()
Retrieves the object upon which the configureBlocking and register methods synchronize.
 This is often useful in the implementation of adaptors that require a
 specific blocking mode to be maintained for a short period of time.

Returns:
The blocking-mode lock object


"
SelectableChannel,configureBlocking(boolean block),abstract SelectableChannel,Adjusts this channel's blocking mode.,"

configureBlocking
public abstract SelectableChannel configureBlocking(boolean block)
                                             throws IOException
Adjusts this channel's blocking mode.

  If this channel is registered with one or more selectors then an
 attempt to place it into blocking mode will cause an IllegalBlockingModeException to be thrown.

  This method may be invoked at any time.  The new blocking mode will
 only affect I/O operations that are initiated after this method returns.
 For some implementations this may require blocking until all pending I/O
 operations are complete.

  If this method is invoked while another invocation of this method or
 of the register method is in progress
 then it will first block until the other operation is complete. 

Parameters:
block - If true then this channel will be placed in
                blocking mode; if false then it will be placed
                non-blocking mode
Returns:
This selectable channel
Throws:
ClosedChannelException - If this channel is closed
IllegalBlockingModeException - If block is true and this channel is
          registered with one or more selectors
IOException - If an I/O error occurs


"
SelectableChannel,isBlocking(),abstract boolean,Tells whether or not every I/O operation on this channel will block until it completes.,"

isBlocking
public abstract boolean isBlocking()
Tells whether or not every I/O operation on this channel will block
 until it completes.  A newly-created channel is always in blocking mode.

  If this channel is closed then the value returned by this method is
 not specified. 

Returns:
true if, and only if, this channel is in blocking mode


"
SelectableChannel,isRegistered(),abstract boolean,Tells whether or not this channel is currently registered with any selectors.,"

isRegistered
public abstract boolean isRegistered()
Tells whether or not this channel is currently registered with any
 selectors.  A newly-created channel is not registered.

  Due to the inherent delay between key cancellation and channel
 deregistration, a channel may remain registered for some time after all
 of its keys have been cancelled.  A channel may also remain registered
 for some time after it is closed.  

Returns:
true if, and only if, this channel is registered


"
SelectableChannel,keyFor(Selector sel),abstract SelectionKey,Retrieves the key representing the channel's registration with the given selector.,"

keyFor
public abstract SelectionKey keyFor(Selector sel)
Retrieves the key representing the channel's registration with the given
 selector.

Parameters:
sel - The selector
Returns:
The key returned when this channel was last registered with the
          given selector, or null if this channel is not
          currently registered with that selector


"
SelectableChannel,provider(),abstract SelectorProvider,Returns the provider that created this channel.,"

provider
public abstract SelectorProvider provider()
Returns the provider that created this channel.

Returns:
The provider that created this channel


"
SelectableChannel,"register(Selector sel, int ops)",SelectionKey,"Registers this channel with the given selector, returning a selection key.","

register
public final SelectionKey register(Selector sel,
                                   int ops)
                            throws ClosedChannelException
Registers this channel with the given selector, returning a selection
 key.

  An invocation of this convenience method of the form

 sc.register(sel, ops)

 behaves in exactly the same way as the invocation

 sc.register(sel, ops, null)

Parameters:
sel - The selector with which this channel is to be registered
ops - The interest set for the resulting key
Returns:
A key representing the registration of this channel with
          the given selector
Throws:
ClosedChannelException - If this channel is closed
ClosedSelectorException - If the selector is closed
IllegalBlockingModeException - If this channel is in blocking mode
IllegalSelectorException - If this channel was not created by the same provider
          as the given selector
CancelledKeyException - If this channel is currently registered with the given selector
          but the corresponding key has already been cancelled
IllegalArgumentException - If a bit in ops does not correspond to an operation
          that is supported by this channel, that is, if set &
          ~validOps() != 0


"
SelectableChannel,"register(Selector sel, int ops, Object att)",abstract SelectionKey,"Registers this channel with the given selector, returning a selection key.","

register
public abstract SelectionKey register(Selector sel,
                                      int ops,
                                      Object att)
                               throws ClosedChannelException
Registers this channel with the given selector, returning a selection
 key.

  If this channel is currently registered with the given selector then
 the selection key representing that registration is returned.  The key's
 interest set will have been changed to ops, as if by invoking
 the interestOps(int) method.  If
 the att argument is not null then the key's attachment
 will have been set to that value.  A CancelledKeyException will
 be thrown if the key has already been cancelled.

  Otherwise this channel has not yet been registered with the given
 selector, so it is registered and the resulting new key is returned.
 The key's initial interest set will be ops and its attachment
 will be att.

  This method may be invoked at any time.  If this method is invoked
 while another invocation of this method or of the configureBlocking method is in progress
 then it will first block until the other operation is complete.  This
 method will then synchronize on the selector's key set and therefore may
 block if invoked concurrently with another registration or selection
 operation involving the same selector. 
 If this channel is closed while this operation is in progress then
 the key returned by this method will have been cancelled and will
 therefore be invalid. 

Parameters:
sel - The selector with which this channel is to be registered
ops - The interest set for the resulting key
att - The attachment for the resulting key; may be null
Returns:
A key representing the registration of this channel with
          the given selector
Throws:
ClosedChannelException - If this channel is closed
ClosedSelectorException - If the selector is closed
IllegalBlockingModeException - If this channel is in blocking mode
IllegalSelectorException - If this channel was not created by the same provider
          as the given selector
CancelledKeyException - If this channel is currently registered with the given selector
          but the corresponding key has already been cancelled
IllegalArgumentException - If a bit in the ops set does not correspond to an
          operation that is supported by this channel, that is, if
          set & ~validOps() != 0


"
SelectableChannel,validOps(),abstract int,Returns an operation set identifying this channel's supported operations.,"

validOps
public abstract int validOps()
Returns an operation set
 identifying this channel's supported operations.  The bits that are set
 in this integer value denote exactly the operations that are valid for
 this channel.  This method always returns the same value for a given
 concrete channel class.

Returns:
The valid-operation set


"
SelectionKey,attach(Object ob),Object,Attaches the given object to this key.,"

attach
public final Object attach(Object ob)
Attaches the given object to this key.

  An attached object may later be retrieved via the attachment method.  Only one object may be attached at a time; invoking
 this method causes any previous attachment to be discarded.  The current
 attachment may be discarded by attaching null.  

Parameters:
ob - The object to be attached; may be null
Returns:
The previously-attached object, if any,
          otherwise null


"
SelectionKey,attachment(),Object,Retrieves the current attachment.,"

attachment
public final Object attachment()
Retrieves the current attachment.

Returns:
The object currently attached to this key,
          or null if there is no attachment


"
SelectionKey,cancel(),abstract void,Requests that the registration of this key's channel with its selector be cancelled.,"

cancel
public abstract void cancel()
Requests that the registration of this key's channel with its selector
 be cancelled.  Upon return the key will be invalid and will have been
 added to its selector's cancelled-key set.  The key will be removed from
 all of the selector's key sets during the next selection operation.

  If this key has already been cancelled then invoking this method has
 no effect.  Once cancelled, a key remains forever invalid. 
 This method may be invoked at any time.  It synchronizes on the
 selector's cancelled-key set, and therefore may block briefly if invoked
 concurrently with a cancellation or selection operation involving the
 same selector.  

"
SelectionKey,channel(),abstract SelectableChannel,Returns the channel for which this key was created.,"

channel
public abstract SelectableChannel channel()
Returns the channel for which this key was created.  This method will
 continue to return the channel even after the key is cancelled.

Returns:
This key's channel


"
SelectionKey,interestOps(),abstract int,Retrieves this key's interest set.,"

interestOps
public abstract int interestOps()
Retrieves this key's interest set.

  It is guaranteed that the returned set will only contain operation
 bits that are valid for this key's channel.

  This method may be invoked at any time.  Whether or not it blocks,
 and for how long, is implementation-dependent.  

Returns:
This key's interest set
Throws:
CancelledKeyException - If this key has been cancelled


"
SelectionKey,interestOps(int ops),abstract SelectionKey,Sets this key's interest set to the given value.,"

interestOps
public abstract SelectionKey interestOps(int ops)
Sets this key's interest set to the given value.

  This method may be invoked at any time.  Whether or not it blocks,
 and for how long, is implementation-dependent.  

Parameters:
ops - The new interest set
Returns:
This selection key
Throws:
IllegalArgumentException - If a bit in the set does not correspond to an operation that
          is supported by this key's channel, that is, if
          (ops & ~channel().validOps()) != 0
CancelledKeyException - If this key has been cancelled


"
SelectionKey,isAcceptable(),boolean,Tests whether this key's channel is ready to accept a new socket connection.,"

isAcceptable
public final boolean isAcceptable()
Tests whether this key's channel is ready to accept a new socket
 connection.

  An invocation of this method of the form k.isAcceptable()
 behaves in exactly the same way as the expression

 
 k.readyOps() & OP_ACCEPT != 0
 
 If this key's channel does not support socket-accept operations then
 this method always returns false.  

Returns:
true if, and only if,
          readyOps() & OP_ACCEPT is nonzero
Throws:
CancelledKeyException - If this key has been cancelled


"
SelectionKey,isConnectable(),boolean,"Tests whether this key's channel has either finished, or failed to finish, its socket-connection operation.","

isConnectable
public final boolean isConnectable()
Tests whether this key's channel has either finished, or failed to
 finish, its socket-connection operation.

  An invocation of this method of the form k.isConnectable()
 behaves in exactly the same way as the expression

 
 k.readyOps() & OP_CONNECT != 0
 
 If this key's channel does not support socket-connect operations
 then this method always returns false.  

Returns:
true if, and only if,
          readyOps() & OP_CONNECT is nonzero
Throws:
CancelledKeyException - If this key has been cancelled


"
SelectionKey,isReadable(),boolean,Tests whether this key's channel is ready for reading.,"

isReadable
public final boolean isReadable()
Tests whether this key's channel is ready for reading.

  An invocation of this method of the form k.isReadable()
 behaves in exactly the same way as the expression

 
 k.readyOps() & OP_READ != 0
 
 If this key's channel does not support read operations then this
 method always returns false.  

Returns:
true if, and only if,
                readyOps() & OP_READ is nonzero
Throws:
CancelledKeyException - If this key has been cancelled


"
SelectionKey,isValid(),abstract boolean,Tells whether or not this key is valid.,"

isValid
public abstract boolean isValid()
Tells whether or not this key is valid.

  A key is valid upon creation and remains so until it is cancelled,
 its channel is closed, or its selector is closed.  

Returns:
true if, and only if, this key is valid


"
SelectionKey,isWritable(),boolean,Tests whether this key's channel is ready for writing.,"

isWritable
public final boolean isWritable()
Tests whether this key's channel is ready for writing.

  An invocation of this method of the form k.isWritable()
 behaves in exactly the same way as the expression

 
 k.readyOps() & OP_WRITE != 0
 
 If this key's channel does not support write operations then this
 method always returns false.  

Returns:
true if, and only if,
          readyOps() & OP_WRITE is nonzero
Throws:
CancelledKeyException - If this key has been cancelled


"
SelectionKey,readyOps(),abstract int,Retrieves this key's ready-operation set.,"

readyOps
public abstract int readyOps()
Retrieves this key's ready-operation set.

  It is guaranteed that the returned set will only contain operation
 bits that are valid for this key's channel.  

Returns:
This key's ready-operation set
Throws:
CancelledKeyException - If this key has been cancelled


"
SelectionKey,selector(),abstract Selector,Returns the selector for which this key was created.,"

selector
public abstract Selector selector()
Returns the selector for which this key was created.  This method will
 continue to return the selector even after the key is cancelled.

Returns:
This key's selector


"
Selector,close(),abstract void,Closes this selector.,"

close
public abstract void close()
                    throws IOException
Closes this selector.

  If a thread is currently blocked in one of this selector's selection
 methods then it is interrupted as if by invoking the selector's wakeup method.

  Any uncancelled keys still associated with this selector are
 invalidated, their channels are deregistered, and any other resources
 associated with this selector are released.

  If this selector is already closed then invoking this method has no
 effect.

  After a selector is closed, any further attempt to use it, except by
 invoking this method or the wakeup method, will cause a
 ClosedSelectorException to be thrown. 

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Throws:
IOException - If an I/O error occurs


"
Selector,isOpen(),abstract boolean,Tells whether or not this selector is open.,"

isOpen
public abstract boolean isOpen()
Tells whether or not this selector is open.

Returns:
true if, and only if, this selector is open


"
Selector,keys(),abstract Set<SelectionKey>,Returns this selector's key set.,"

keys
public abstract Set<SelectionKey> keys()
Returns this selector's key set.

  The key set is not directly modifiable.  A key is removed only after
 it has been cancelled and its channel has been deregistered.  Any
 attempt to modify the key set will cause an UnsupportedOperationException to be thrown.

  The key set is not thread-safe. 

Returns:
This selector's key set
Throws:
ClosedSelectorException - If this selector is closed


"
Selector,open(),static Selector,Opens a selector.,"

open
public static Selector open()
                     throws IOException
Opens a selector.

  The new selector is created by invoking the openSelector method
 of the system-wide default SelectorProvider object.  

Returns:
A new selector
Throws:
IOException - If an I/O error occurs


"
Selector,provider(),abstract SelectorProvider,Returns the provider that created this channel.,"

provider
public abstract SelectorProvider provider()
Returns the provider that created this channel.

Returns:
The provider that created this channel


"
Selector,select(),abstract int,Selects a set of keys whose corresponding channels are ready for I/O operations.,"

select
public abstract int select()
                    throws IOException
Selects a set of keys whose corresponding channels are ready for I/O
 operations.

  This method performs a blocking selection
 operation.  It returns only after at least one channel is selected,
 this selector's wakeup method is invoked, or the current
 thread is interrupted, whichever comes first.  

Returns:
The number of keys, possibly zero,
          whose ready-operation sets were updated
Throws:
IOException - If an I/O error occurs
ClosedSelectorException - If this selector is closed


"
Selector,select(long timeout),abstract int,Selects a set of keys whose corresponding channels are ready for I/O operations.,"

select
public abstract int select(long timeout)
                    throws IOException
Selects a set of keys whose corresponding channels are ready for I/O
 operations.

  This method performs a blocking selection
 operation.  It returns only after at least one channel is selected,
 this selector's wakeup method is invoked, the current
 thread is interrupted, or the given timeout period expires, whichever
 comes first.

  This method does not offer real-time guarantees: It schedules the
 timeout as if by invoking the Object.wait(long) method. 

Parameters:
timeout - If positive, block for up to timeout
                  milliseconds, more or less, while waiting for a
                  channel to become ready; if zero, block indefinitely;
                  must not be negative
Returns:
The number of keys, possibly zero,
          whose ready-operation sets were updated
Throws:
IOException - If an I/O error occurs
ClosedSelectorException - If this selector is closed
IllegalArgumentException - If the value of the timeout argument is negative


"
Selector,selectedKeys(),abstract Set<SelectionKey>,Returns this selector's selected-key set.,"

selectedKeys
public abstract Set<SelectionKey> selectedKeys()
Returns this selector's selected-key set.

  Keys may be removed from, but not directly added to, the
 selected-key set.  Any attempt to add an object to the key set will
 cause an UnsupportedOperationException to be thrown.

  The selected-key set is not thread-safe. 

Returns:
This selector's selected-key set
Throws:
ClosedSelectorException - If this selector is closed


"
Selector,selectNow(),abstract int,Selects a set of keys whose corresponding channels are ready for I/O operations.,"

selectNow
public abstract int selectNow()
                       throws IOException
Selects a set of keys whose corresponding channels are ready for I/O
 operations.

  This method performs a non-blocking selection
 operation.  If no channels have become selectable since the previous
 selection operation then this method immediately returns zero.

  Invoking this method clears the effect of any previous invocations
 of the wakeup method.  

Returns:
The number of keys, possibly zero, whose ready-operation sets
          were updated by the selection operation
Throws:
IOException - If an I/O error occurs
ClosedSelectorException - If this selector is closed


"
Selector,wakeup(),abstract Selector,Causes the first selection operation that has not yet returned to return immediately.,"

wakeup
public abstract Selector wakeup()
Causes the first selection operation that has not yet returned to return
 immediately.

  If another thread is currently blocked in an invocation of the
 select() or select(long) methods then that invocation
 will return immediately.  If no selection operation is currently in
 progress then the next invocation of one of these methods will return
 immediately unless the selectNow() method is invoked in the
 meantime.  In any case the value returned by that invocation may be
 non-zero.  Subsequent invocations of the select() or select(long) methods will block as usual unless this method is invoked
 again in the meantime.

  Invoking this method more than once between two successive selection
 operations has the same effect as invoking it just once.  

Returns:
This selector


"
ServerSocketChannel,accept(),abstract SocketChannel,Accepts a connection made to this channel's socket.,"

accept
public abstract SocketChannel accept()
                              throws IOException
Accepts a connection made to this channel's socket.

  If this channel is in non-blocking mode then this method will
 immediately return null if there are no pending connections.
 Otherwise it will block indefinitely until a new connection is available
 or an I/O error occurs.

  The socket channel returned by this method, if any, will be in
 blocking mode regardless of the blocking mode of this channel.

  This method performs exactly the same security checks as the accept method of the ServerSocket class.  That is, if a security manager has been
 installed then for each new connection this method verifies that the
 address and port number of the connection's remote endpoint are
 permitted by the security manager's checkAccept method.  

Returns:
The socket channel for the new connection,
          or null if this channel is in non-blocking mode
          and no connection is available to be accepted
Throws:
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the accept operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the accept operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
NotYetBoundException - If this channel's socket has not yet been bound
SecurityException - If a security manager has been installed
          and it does not permit access to the remote endpoint
          of the new connection
IOException - If some other I/O error occurs


"
ServerSocketChannel,bind(SocketAddress local),ServerSocketChannel,Binds the channel's socket to a local address and configures the socket to listen for connections.,"

bind
public final ServerSocketChannel bind(SocketAddress local)
                               throws IOException
Binds the channel's socket to a local address and configures the socket
 to listen for connections.

  An invocation of this method is equivalent to the following:
 
 bind(local, 0);
 

Specified by:
bind in interface NetworkChannel
Parameters:
local - The local address to bind the socket, or null to bind
          to an automatically assigned socket address
Returns:
This channel
Throws:
AlreadyBoundException - If the socket is already bound
UnsupportedAddressTypeException - If the type of the given address is not supported
ClosedChannelException - If the channel is closed
IOException - If some other I/O error occurs
SecurityException - If a security manager has been installed and its checkListen method denies the
          operation
Since:
1.7
See Also:
NetworkChannel.getLocalAddress()


"
ServerSocketChannel,"bind(SocketAddress local, int backlog)",abstract ServerSocketChannel,Binds the channel's socket to a local address and configures the socket to listen for connections.,"

bind
public abstract ServerSocketChannel bind(SocketAddress local,
                                         int backlog)
                                  throws IOException
Binds the channel's socket to a local address and configures the socket to
 listen for connections.

  This method is used to establish an association between the socket and
 a local address. Once an association is established then the socket remains
 bound until the channel is closed.

  The backlog parameter is the maximum number of pending
 connections on the socket. Its exact semantics are implementation specific.
 In particular, an implementation may impose a maximum length or may choose
 to ignore the parameter altogther. If the backlog parameter has
 the value 0, or a negative value, then an implementation specific
 default is used.

Parameters:
local - The address to bind the socket, or null to bind to an
          automatically assigned socket address
backlog - The maximum number of pending connections
Returns:
This channel
Throws:
AlreadyBoundException - If the socket is already bound
UnsupportedAddressTypeException - If the type of the given address is not supported
ClosedChannelException - If this channel is closed
IOException - If some other I/O error occurs
SecurityException - If a security manager has been installed and its checkListen method denies the
          operation
Since:
1.7


"
ServerSocketChannel,getLocalAddress(),abstract SocketAddress,Returns the socket address that this channel's socket is bound to.,"

getLocalAddress
public abstract SocketAddress getLocalAddress()
                                       throws IOException
Returns the socket address that this channel's socket is bound to.

  Where the channel is bound to an Internet Protocol
 socket address then the return value from this method is of type InetSocketAddress.
 
 If there is a security manager set, its checkConnect method is
 called with the local address and -1 as its arguments to see
 if the operation is allowed. If the operation is not allowed,
 a SocketAddress representing the
 loopback address and the
 local port of the channel's socket is returned.

Specified by:
getLocalAddress in interface NetworkChannel
Returns:
The SocketAddress that the socket is bound to, or the
          SocketAddress representing the loopback address if
          denied by the security manager, or null if the
          channel's socket is not bound
Throws:
ClosedChannelException - If the channel is closed
IOException - If an I/O error occurs


"
ServerSocketChannel,open(),static ServerSocketChannel,Opens a server-socket channel.,"

open
public static ServerSocketChannel open()
                                throws IOException
Opens a server-socket channel.

  The new channel is created by invoking the openServerSocketChannel method of the system-wide default SelectorProvider object.

  The new channel's socket is initially unbound; it must be bound to a
 specific address via one of its socket's bind methods before
 connections can be accepted.  

Returns:
A new socket channel
Throws:
IOException - If an I/O error occurs


"
ServerSocketChannel,"setOption(SocketOption<T> name, T value)",abstract <T> ServerSocketChannel,Sets the value of a socket option.,"

setOption
public abstract <T> ServerSocketChannel setOption(SocketOption<T> name,
                                                  T value)
                                           throws IOException
Description copied from interface: NetworkChannel
Sets the value of a socket option.

Specified by:
setOption in interface NetworkChannel
Type Parameters:
T - The type of the socket option value
Parameters:
name - The socket option
value - The value of the socket option. A value of null may be
          a valid value for some socket options.
Returns:
This channel
Throws:
UnsupportedOperationException - If the socket option is not supported by this channel
IllegalArgumentException - If the value is not a valid value for this socket option
ClosedChannelException - If this channel is closed
IOException - If an I/O error occurs
Since:
1.7
See Also:
StandardSocketOptions


"
ServerSocketChannel,socket(),abstract ServerSocket,Retrieves a server socket associated with this channel.,"

socket
public abstract ServerSocket socket()
Retrieves a server socket associated with this channel.

  The returned object will not declare any public methods that are not
 declared in the ServerSocket class.  

Returns:
A server socket associated with this channel


"
ServerSocketChannel,validOps(),int,Returns an operation set identifying this channel's supported operations.,"

validOps
public final int validOps()
Returns an operation set identifying this channel's supported
 operations.

  Server-socket channels only support the accepting of new
 connections, so this method returns SelectionKey.OP_ACCEPT.
 

Specified by:
validOps in class SelectableChannel
Returns:
The valid-operation set


"
SocketChannel,bind(SocketAddress local),abstract SocketChannel,Binds the channel's socket to a local address.,"

bind
public abstract SocketChannel bind(SocketAddress local)
                            throws IOException
Description copied from interface: NetworkChannel
Binds the channel's socket to a local address.

  This method is used to establish an association between the socket and
 a local address. Once an association is established then the socket remains
 bound until the channel is closed. If the local parameter has the
 value null then the socket will be bound to an address that is
 assigned automatically.

Specified by:
bind in interface NetworkChannel
Parameters:
local - The address to bind the socket, or null to bind the socket
          to an automatically assigned socket address
Returns:
This channel
Throws:
ConnectionPendingException - If a non-blocking connect operation is already in progress on
          this channel
AlreadyBoundException - If the socket is already bound
UnsupportedAddressTypeException - If the type of the given address is not supported
ClosedChannelException - If the channel is closed
IOException - If some other I/O error occurs
SecurityException - If a security manager has been installed and its
          checkListen method denies
          the operation
Since:
1.7
See Also:
NetworkChannel.getLocalAddress()


"
SocketChannel,connect(SocketAddress remote),abstract boolean,Connects this channel's socket.,"

connect
public abstract boolean connect(SocketAddress remote)
                         throws IOException
Connects this channel's socket.

  If this channel is in non-blocking mode then an invocation of this
 method initiates a non-blocking connection operation.  If the connection
 is established immediately, as can happen with a local connection, then
 this method returns true.  Otherwise this method returns
 false and the connection operation must later be completed by
 invoking the finishConnect method.

  If this channel is in blocking mode then an invocation of this
 method will block until the connection is established or an I/O error
 occurs.

  This method performs exactly the same security checks as the Socket class.  That is, if a security manager has been
 installed then this method verifies that its checkConnect method permits
 connecting to the address and port number of the given remote endpoint.

  This method may be invoked at any time.  If a read or write
 operation upon this channel is invoked while an invocation of this
 method is in progress then that operation will first block until this
 invocation is complete.  If a connection attempt is initiated but fails,
 that is, if an invocation of this method throws a checked exception,
 then the channel will be closed.  

Parameters:
remote - The remote address to which this channel is to be connected
Returns:
true if a connection was established,
          false if this channel is in non-blocking mode
          and the connection operation is in progress
Throws:
AlreadyConnectedException - If this channel is already connected
ConnectionPendingException - If a non-blocking connection operation is already in progress
          on this channel
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the connect operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the connect operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
UnresolvedAddressException - If the given remote address is not fully resolved
UnsupportedAddressTypeException - If the type of the given remote address is not supported
SecurityException - If a security manager has been installed
          and it does not permit access to the given remote endpoint
IOException - If some other I/O error occurs


"
SocketChannel,finishConnect(),abstract boolean,Finishes the process of connecting a socket channel.,"

finishConnect
public abstract boolean finishConnect()
                               throws IOException
Finishes the process of connecting a socket channel.

  A non-blocking connection operation is initiated by placing a socket
 channel in non-blocking mode and then invoking its connect method.  Once the connection is established, or the attempt has
 failed, the socket channel will become connectable and this method may
 be invoked to complete the connection sequence.  If the connection
 operation failed then invoking this method will cause an appropriate
 IOException to be thrown.

  If this channel is already connected then this method will not block
 and will immediately return true.  If this channel is in
 non-blocking mode then this method will return false if the
 connection process is not yet complete.  If this channel is in blocking
 mode then this method will block until the connection either completes
 or fails, and will always either return true or throw a checked
 exception describing the failure.

  This method may be invoked at any time.  If a read or write
 operation upon this channel is invoked while an invocation of this
 method is in progress then that operation will first block until this
 invocation is complete.  If a connection attempt fails, that is, if an
 invocation of this method throws a checked exception, then the channel
 will be closed.  

Returns:
true if, and only if, this channel's socket is now
          connected
Throws:
NoConnectionPendingException - If this channel is not connected and a connection operation
          has not been initiated
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the connect operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the connect operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
SocketChannel,getLocalAddress(),abstract SocketAddress,Returns the socket address that this channel's socket is bound to.,"

getLocalAddress
public abstract SocketAddress getLocalAddress()
                                       throws IOException
Returns the socket address that this channel's socket is bound to.

  Where the channel is bound to an Internet Protocol
 socket address then the return value from this method is of type InetSocketAddress.
 
 If there is a security manager set, its checkConnect method is
 called with the local address and -1 as its arguments to see
 if the operation is allowed. If the operation is not allowed,
 a SocketAddress representing the
 loopback address and the
 local port of the channel's socket is returned.

Specified by:
getLocalAddress in interface NetworkChannel
Returns:
The SocketAddress that the socket is bound to, or the
          SocketAddress representing the loopback address if
          denied by the security manager, or null if the
          channel's socket is not bound
Throws:
ClosedChannelException - If the channel is closed
IOException - If an I/O error occurs


"
SocketChannel,getRemoteAddress(),abstract SocketAddress,Returns the remote address to which this channel's socket is connected.,"

getRemoteAddress
public abstract SocketAddress getRemoteAddress()
                                        throws IOException
Returns the remote address to which this channel's socket is connected.

  Where the channel is bound and connected to an Internet Protocol
 socket address then the return value from this method is of type InetSocketAddress.

Returns:
The remote address; null if the channel's socket is not
          connected
Throws:
ClosedChannelException - If the channel is closed
IOException - If an I/O error occurs
Since:
1.7


"
SocketChannel,isConnected(),abstract boolean,Tells whether or not this channel's network socket is connected.,"

isConnected
public abstract boolean isConnected()
Tells whether or not this channel's network socket is connected.

Returns:
true if, and only if, this channel's network socket
          is open and connected


"
SocketChannel,isConnectionPending(),abstract boolean,Tells whether or not a connection operation is in progress on this channel.,"

isConnectionPending
public abstract boolean isConnectionPending()
Tells whether or not a connection operation is in progress on this
 channel.

Returns:
true if, and only if, a connection operation has been
          initiated on this channel but not yet completed by invoking the
          finishConnect method


"
SocketChannel,open(),static SocketChannel,Opens a socket channel.,"

open
public static SocketChannel open()
                          throws IOException
Opens a socket channel.

  The new channel is created by invoking the openSocketChannel method of the system-wide default SelectorProvider object.  

Returns:
A new socket channel
Throws:
IOException - If an I/O error occurs


"
SocketChannel,open(SocketAddress remote),static SocketChannel,Opens a socket channel and connects it to a remote address.,"

open
public static SocketChannel open(SocketAddress remote)
                          throws IOException
Opens a socket channel and connects it to a remote address.

  This convenience method works as if by invoking the open()
 method, invoking the connect method upon
 the resulting socket channel, passing it remote, and then
 returning that channel.  

Parameters:
remote - The remote address to which the new channel is to be connected
Returns:
A new, and connected, socket channel
Throws:
AsynchronousCloseException - If another thread closes this channel
          while the connect operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the connect operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
UnresolvedAddressException - If the given remote address is not fully resolved
UnsupportedAddressTypeException - If the type of the given remote address is not supported
SecurityException - If a security manager has been installed
          and it does not permit access to the given remote endpoint
IOException - If some other I/O error occurs


"
SocketChannel,read(ByteBuffer dst),abstract int,Reads a sequence of bytes from this channel into the given buffer.,"

read
public abstract int read(ByteBuffer dst)
                  throws IOException
Description copied from interface: ReadableByteChannel
Reads a sequence of bytes from this channel into the given buffer.

  An attempt is made to read up to r bytes from the channel,
 where r is the number of bytes remaining in the buffer, that is,
 dst.remaining(), at the moment this method is invoked.

  Suppose that a byte sequence of length n is read, where
 0 <= n <= r.
 This byte sequence will be transferred into the buffer so that the first
 byte in the sequence is at index p and the last byte is at index
 p + n - 1,
 where p is the buffer's position at the moment this method is
 invoked.  Upon return the buffer's position will be equal to
 p + n; its limit will not have changed.

  A read operation might not fill the buffer, and in fact it might not
 read any bytes at all.  Whether or not it does so depends upon the
 nature and state of the channel.  A socket channel in non-blocking mode,
 for example, cannot read any more bytes than are immediately available
 from the socket's input buffer; similarly, a file channel cannot read
 any more bytes than remain in the file.  It is guaranteed, however, that
 if a channel is in blocking mode and there is at least one byte
 remaining in the buffer then this method will block until at least one
 byte is read.

  This method may be invoked at any time.  If another thread has
 already initiated a read operation upon this channel, however, then an
 invocation of this method will block until the first operation is
 complete. 

Specified by:
read in interface ReadableByteChannel
Parameters:
dst - The buffer into which bytes are to be transferred
Returns:
The number of bytes read, possibly zero, or -1 if the
          channel has reached end-of-stream
Throws:
NotYetConnectedException - If this channel is not yet connected
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the read operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the read operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
SocketChannel,read(ByteBuffer[] dsts),long,Reads a sequence of bytes from this channel into the given buffers.,"

read
public final long read(ByteBuffer[] dsts)
                throws IOException
Description copied from interface: ScatteringByteChannel
Reads a sequence of bytes from this channel into the given buffers.

  An invocation of this method of the form c.read(dsts)
 behaves in exactly the same manner as the invocation

 
 c.read(dsts, 0, dsts.length);

Specified by:
read in interface ScatteringByteChannel
Parameters:
dsts - The buffers into which bytes are to be transferred
Returns:
The number of bytes read, possibly zero,
         or -1 if the channel has reached end-of-stream
Throws:
NotYetConnectedException - If this channel is not yet connected
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the read operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the read operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
SocketChannel,"read(ByteBuffer[] dsts, int offset, int length)",abstract long,Reads a sequence of bytes from this channel into a subsequence of the given buffers.,"

read
public abstract long read(ByteBuffer[] dsts,
                          int offset,
                          int length)
                   throws IOException
Description copied from interface: ScatteringByteChannel
Reads a sequence of bytes from this channel into a subsequence of the
 given buffers.

  An invocation of this method attempts to read up to r bytes
 from this channel, where r is the total number of bytes remaining
 the specified subsequence of the given buffer array, that is,

 
 dsts[offset].remaining()
     + dsts[offset+1].remaining()
     + ... + dsts[offset+length-1].remaining()

 at the moment that this method is invoked.

  Suppose that a byte sequence of length n is read, where
 0 <= n <= r.
 Up to the first dsts[offset].remaining() bytes of this sequence
 are transferred into buffer dsts[offset], up to the next
 dsts[offset+1].remaining() bytes are transferred into buffer
 dsts[offset+1], and so forth, until the entire byte sequence
 is transferred into the given buffers.  As many bytes as possible are
 transferred into each buffer, hence the final position of each updated
 buffer, except the last updated buffer, is guaranteed to be equal to
 that buffer's limit.

  This method may be invoked at any time.  If another thread has
 already initiated a read operation upon this channel, however, then an
 invocation of this method will block until the first operation is
 complete. 

Specified by:
read in interface ScatteringByteChannel
Parameters:
dsts - The buffers into which bytes are to be transferred
offset - The offset within the buffer array of the first buffer into
         which bytes are to be transferred; must be non-negative and no
         larger than dsts.length
length - The maximum number of buffers to be accessed; must be
         non-negative and no larger than
         dsts.length - offset
Returns:
The number of bytes read, possibly zero,
         or -1 if the channel has reached end-of-stream
Throws:
NotYetConnectedException - If this channel is not yet connected
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the read operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the read operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
SocketChannel,"setOption(SocketOption<T> name, T value)",abstract <T> SocketChannel,Sets the value of a socket option.,"

setOption
public abstract <T> SocketChannel setOption(SocketOption<T> name,
                                            T value)
                                     throws IOException
Description copied from interface: NetworkChannel
Sets the value of a socket option.

Specified by:
setOption in interface NetworkChannel
Type Parameters:
T - The type of the socket option value
Parameters:
name - The socket option
value - The value of the socket option. A value of null may be
          a valid value for some socket options.
Returns:
This channel
Throws:
UnsupportedOperationException - If the socket option is not supported by this channel
IllegalArgumentException - If the value is not a valid value for this socket option
ClosedChannelException - If this channel is closed
IOException - If an I/O error occurs
Since:
1.7
See Also:
StandardSocketOptions


"
SocketChannel,shutdownInput(),abstract SocketChannel,Shutdown the connection for reading without closing the channel.,"

shutdownInput
public abstract SocketChannel shutdownInput()
                                     throws IOException
Shutdown the connection for reading without closing the channel.

  Once shutdown for reading then further reads on the channel will
 return -1, the end-of-stream indication. If the input side of the
 connection is already shutdown then invoking this method has no effect.

Returns:
The channel
Throws:
NotYetConnectedException - If this channel is not yet connected
ClosedChannelException - If this channel is closed
IOException - If some other I/O error occurs
Since:
1.7


"
SocketChannel,shutdownOutput(),abstract SocketChannel,Shutdown the connection for writing without closing the channel.,"

shutdownOutput
public abstract SocketChannel shutdownOutput()
                                      throws IOException
Shutdown the connection for writing without closing the channel.

  Once shutdown for writing then further attempts to write to the
 channel will throw ClosedChannelException. If the output side of
 the connection is already shutdown then invoking this method has no
 effect.

Returns:
The channel
Throws:
NotYetConnectedException - If this channel is not yet connected
ClosedChannelException - If this channel is closed
IOException - If some other I/O error occurs
Since:
1.7


"
SocketChannel,socket(),abstract Socket,Retrieves a socket associated with this channel.,"

socket
public abstract Socket socket()
Retrieves a socket associated with this channel.

  The returned object will not declare any public methods that are not
 declared in the Socket class.  

Returns:
A socket associated with this channel


"
SocketChannel,validOps(),int,Returns an operation set identifying this channel's supported operations.,"

validOps
public final int validOps()
Returns an operation set identifying this channel's supported
 operations.

  Socket channels support connecting, reading, and writing, so this
 method returns (SelectionKey.OP_CONNECT
| SelectionKey.OP_READ | SelectionKey.OP_WRITE).  

Specified by:
validOps in class SelectableChannel
Returns:
The valid-operation set


"
SocketChannel,write(ByteBuffer src),abstract int,Writes a sequence of bytes to this channel from the given buffer.,"

write
public abstract int write(ByteBuffer src)
                   throws IOException
Description copied from interface: WritableByteChannel
Writes a sequence of bytes to this channel from the given buffer.

  An attempt is made to write up to r bytes to the channel,
 where r is the number of bytes remaining in the buffer, that is,
 src.remaining(), at the moment this method is invoked.

  Suppose that a byte sequence of length n is written, where
 0 <= n <= r.
 This byte sequence will be transferred from the buffer starting at index
 p, where p is the buffer's position at the moment this
 method is invoked; the index of the last byte written will be
 p + n - 1.
 Upon return the buffer's position will be equal to
 p + n; its limit will not have changed.

  Unless otherwise specified, a write operation will return only after
 writing all of the r requested bytes.  Some types of channels,
 depending upon their state, may write only some of the bytes or possibly
 none at all.  A socket channel in non-blocking mode, for example, cannot
 write any more bytes than are free in the socket's output buffer.

  This method may be invoked at any time.  If another thread has
 already initiated a write operation upon this channel, however, then an
 invocation of this method will block until the first operation is
 complete. 

Specified by:
write in interface WritableByteChannel
Parameters:
src - The buffer from which bytes are to be retrieved
Returns:
The number of bytes written, possibly zero
Throws:
NotYetConnectedException - If this channel is not yet connected
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the write operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the write operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
SocketChannel,write(ByteBuffer[] srcs),long,Writes a sequence of bytes to this channel from the given buffers.,"

write
public final long write(ByteBuffer[] srcs)
                 throws IOException
Description copied from interface: GatheringByteChannel
Writes a sequence of bytes to this channel from the given buffers.

  An invocation of this method of the form c.write(srcs)
 behaves in exactly the same manner as the invocation

 
 c.write(srcs, 0, srcs.length);

Specified by:
write in interface GatheringByteChannel
Parameters:
srcs - The buffers from which bytes are to be retrieved
Returns:
The number of bytes written, possibly zero
Throws:
NotYetConnectedException - If this channel is not yet connected
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the write operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the write operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
SocketChannel,"write(ByteBuffer[] srcs, int offset, int length)",abstract long,Writes a sequence of bytes to this channel from a subsequence of the given buffers.,"

write
public abstract long write(ByteBuffer[] srcs,
                           int offset,
                           int length)
                    throws IOException
Description copied from interface: GatheringByteChannel
Writes a sequence of bytes to this channel from a subsequence of the
 given buffers.

  An attempt is made to write up to r bytes to this channel,
 where r is the total number of bytes remaining in the specified
 subsequence of the given buffer array, that is,

 
 srcs[offset].remaining()
     + srcs[offset+1].remaining()
     + ... + srcs[offset+length-1].remaining()

 at the moment that this method is invoked.

  Suppose that a byte sequence of length n is written, where
 0 <= n <= r.
 Up to the first srcs[offset].remaining() bytes of this sequence
 are written from buffer srcs[offset], up to the next
 srcs[offset+1].remaining() bytes are written from buffer
 srcs[offset+1], and so forth, until the entire byte sequence is
 written.  As many bytes as possible are written from each buffer, hence
 the final position of each updated buffer, except the last updated
 buffer, is guaranteed to be equal to that buffer's limit.

  Unless otherwise specified, a write operation will return only after
 writing all of the r requested bytes.  Some types of channels,
 depending upon their state, may write only some of the bytes or possibly
 none at all.  A socket channel in non-blocking mode, for example, cannot
 write any more bytes than are free in the socket's output buffer.

  This method may be invoked at any time.  If another thread has
 already initiated a write operation upon this channel, however, then an
 invocation of this method will block until the first operation is
 complete. 

Specified by:
write in interface GatheringByteChannel
Parameters:
srcs - The buffers from which bytes are to be retrieved
offset - The offset within the buffer array of the first buffer from
         which bytes are to be retrieved; must be non-negative and no
         larger than srcs.length
length - The maximum number of buffers to be accessed; must be
         non-negative and no larger than
         srcs.length - offset
Returns:
The number of bytes written, possibly zero
Throws:
NotYetConnectedException - If this channel is not yet connected
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the write operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the write operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
