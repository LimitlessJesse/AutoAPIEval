Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,DESedeKeySpec,1,"DESedeKeySpec(byte[] key, int offset, int len)",False,,NULL
0,DESedeKeySpec,2,byte[] getKey(),True,Returns the DES-EDE key.,"

getKey
public byte[] getKey()
Returns the DES-EDE key.

Returns:
the DES-EDE key. Returns a new array
 each time this method is called.


"
0,DESedeKeySpec,3,int getKeyLength(),False,,NULL
0,DESedeKeySpec,4,int getAlgorithmParameterSpecType(),False,,NULL
0,DESedeKeySpec,5,AlgorithmParameterSpec getAlgorithmParameterSpec(),False,,NULL
0,DESedeKeySpec,6,AlgorithmParameterSpec getAlgorithmParameterSpec(String type),False,,NULL
0,DESedeKeySpec,7,AlgorithmParameterSpec getAlgorithmParameterSpec(Class<? extends AlgorithmParameterSpec> type),False,,NULL
0,DESedeKeySpec,8,"AlgorithmParameterSpec getAlgorithmParameterSpec(String type, String provider)",False,,NULL
0,DESedeKeySpec,9,"AlgorithmParameterSpec getAlgorithmParameterSpec(Class<? extends AlgorithmParameterSpec> type, String provider)",False,,NULL
0,DESedeKeySpec,10,"AlgorithmParameterSpec getAlgorithmParameterSpec(String type, Provider provider)",False,,NULL
0,DESedeKeySpec,11,"AlgorithmParameterSpec getAlgorithmParameterSpec(Class<? extends AlgorithmParameterSpec> type, Provider provider)",False,,NULL
1,DESKeySpec,1,"DESKeySpec(byte[] key, int offset, int len)",False,,NULL
1,DESKeySpec,2,byte[] getKey(),True,Returns the DES key material.,"

getKey
public byte[] getKey()
Returns the DES key material.

Returns:
the DES key material. Returns a new array
 each time this method is called.


"
1,DESKeySpec,3,int getKeyLength(),False,,NULL
1,DESKeySpec,4,int getOffset(),False,,NULL
1,DESKeySpec,5,int getLength(),False,,NULL
2,DHGenParameterSpec,1,"DHGenParameterSpec(int keySize, PrimeField field)",False,,NULL
2,DHGenParameterSpec,2,"DHGenParameterSpec(int keySize, PrimeField field, BigInteger p, BigInteger g)",False,,NULL
2,DHGenParameterSpec,3,int getKeySize(),False,,NULL
2,DHGenParameterSpec,4,PrimeField getField(),False,,NULL
2,DHGenParameterSpec,5,BigInteger getP(),False,,NULL
2,DHGenParameterSpec,6,BigInteger getG(),False,,NULL
3,DHParameterSpec,1,"DHParameterSpec(BigInteger p, BigInteger g)",False,,NULL
3,DHParameterSpec,2,BigInteger getP(),True,Returns the prime modulus p.,"

getP
public BigInteger getP()
Returns the prime modulus p.

Returns:
the prime modulus p


"
3,DHParameterSpec,3,BigInteger getG(),True,Returns the base generator g.,"

getG
public BigInteger getG()
Returns the base generator g.

Returns:
the base generator g


"
3,DHParameterSpec,4,int getL(),True,"Returns the size in bits, l, of the random exponent (private value).","

getL
public int getL()
Returns the size in bits, l, of the random exponent
 (private value).

Returns:
the size in bits, l, of the random exponent
 (private value), or 0 if this size has not been set


"
3,DHParameterSpec,5,void setL(int l),False,,NULL
3,DHParameterSpec,6,void setP(BigInteger p),False,,NULL
3,DHParameterSpec,7,void setG(BigInteger g),False,,NULL
3,DHParameterSpec,8,boolean equals(Object obj),False,,NULL
3,DHParameterSpec,9,int hashCode(),False,,NULL
3,DHParameterSpec,10,String toString(),False,,NULL
4,DHPrivateKeySpec,1,"DHPrivateKeySpec(BigInteger x, DHParameterSpec params)",False,,NULL
4,DHPrivateKeySpec,2,BigInteger getX(),True,Returns the private value x.,"

getX
public BigInteger getX()
Returns the private value x.

Returns:
the private value x


"
4,DHPrivateKeySpec,3,DHParameterSpec getParams(),False,,NULL
4,DHPrivateKeySpec,4,int hashCode(),False,,NULL
4,DHPrivateKeySpec,5,boolean equals(Object obj),False,,NULL
5,DHPublicKeySpec,1,"DHPublicKeySpec(BigInteger y, BigInteger p, BigInteger g)",False,,NULL
5,DHPublicKeySpec,2,BigInteger getG(),True,Returns the base generator g.,"

getG
public BigInteger getG()
Returns the base generator g.

Returns:
the base generator g


"
5,DHPublicKeySpec,3,BigInteger getP(),True,Returns the prime modulus p.,"

getP
public BigInteger getP()
Returns the prime modulus p.

Returns:
the prime modulus p


"
5,DHPublicKeySpec,4,BigInteger getY(),True,Returns the public value y.,"

getY
public BigInteger getY()
Returns the public value y.

Returns:
the public value y


"
5,DHPublicKeySpec,5,int hashCode(),False,,NULL
5,DHPublicKeySpec,6,boolean equals(Object obj),False,,NULL
5,DHPublicKeySpec,7,String toString(),False,,NULL
6,GCMParameterSpec,1,"GCMParameterSpec(int tLen, byte[] iv)",False,,NULL
6,GCMParameterSpec,2,byte[] getIV(),True,Returns the Initialization Vector (IV).,"

getIV
public byte[] getIV()
Returns the Initialization Vector (IV).

Returns:
the IV.  Creates a new array each time this method
 is called.


"
6,GCMParameterSpec,3,int getTLen(),True,Returns the authentication tag length.,"

getTLen
public int getTLen()
Returns the authentication tag length.

Returns:
the authentication tag length (in bits)


"
6,GCMParameterSpec,4,boolean equals(Object obj),False,,NULL
6,GCMParameterSpec,5,int hashCode(),False,,NULL
7,IvParameterSpec,1,IvParameterSpec(byte[] iv),False,,NULL
7,IvParameterSpec,2,byte[] getIV(),True,Returns the initialization vector (IV).,"

getIV
public byte[] getIV()
Returns the initialization vector (IV).

Returns:
the initialization vector (IV). Returns a new array
 each time this method is called.


"
7,IvParameterSpec,3,int hashCode(),False,,NULL
7,IvParameterSpec,4,boolean equals(Object obj),False,,NULL
7,IvParameterSpec,5,String toString(),False,,NULL
8,OAEPParameterSpec,1,"OAEPParameterSpec(String mgfAlgorithm, String maskAlgorithm, int maskLength)",False,,NULL
8,OAEPParameterSpec,2,String getMGFAlgorithm(),True,Returns the mask generation function algorithm name.,"

getMGFAlgorithm
public String getMGFAlgorithm()
Returns the mask generation function algorithm name.

Returns:
the mask generation function algorithm name.


"
8,OAEPParameterSpec,3,String getMaskAlgorithm(),False,,NULL
8,OAEPParameterSpec,4,int getMaskLength(),False,,NULL
8,OAEPParameterSpec,5,boolean equals(Object obj),False,,NULL
8,OAEPParameterSpec,6,int hashCode(),False,,NULL
9,PBEKeySpec,1,"PBEKeySpec(char[] password, byte[] salt, int iterationCount)",False,,NULL
9,PBEKeySpec,2,byte[] getSalt(),True,Returns a copy of the salt or null if not specified.,"

getSalt
public final byte[] getSalt()
Returns a copy of the salt or null if not specified.

  Note: this method should return a copy of the salt. It is
 the caller's responsibility to zero out the salt information after
 it is no longer needed.

Returns:
the salt.


"
9,PBEKeySpec,3,int getIterationCount(),True,Returns the iteration count or 0 if not specified.,"

getIterationCount
public final int getIterationCount()
Returns the iteration count or 0 if not specified.

Returns:
the iteration count.


"
9,PBEKeySpec,4,char[] getPassword(),True,Returns a copy of the password.,"

getPassword
public final char[] getPassword()
Returns a copy of the password.

  Note: this method returns a copy of the password. It is
 the caller's responsibility to zero out the password information after
 it is no longer needed.

Returns:
the password.
Throws:
IllegalStateException - if password has been cleared by
 calling clearPassword method.


"
9,PBEKeySpec,5,int getKeyLength(),True,Returns the to-be-derived key length or 0 if not specified.,"

getKeyLength
public final int getKeyLength()
Returns the to-be-derived key length or 0 if not specified.

  Note: this is used to indicate the preference on key length
 for variable-key-size ciphers. The actual key size depends on
 each provider's implementation.

Returns:
the to-be-derived key length.


"
10,PBEParameterSpec,1,"PBEParameterSpec(byte[] salt, int iterationCount)",False,,NULL
10,PBEParameterSpec,2,byte[] getSalt(),True,Returns the salt.,"

getSalt
public byte[] getSalt()
Returns the salt.

Returns:
the salt. Returns a new array
 each time this method is called.


"
10,PBEParameterSpec,3,int getIterationCount(),True,Returns the iteration count.,"

getIterationCount
public int getIterationCount()
Returns the iteration count.

Returns:
the iteration count


"
10,PBEParameterSpec,4,boolean equals(Object obj),False,,NULL
10,PBEParameterSpec,5,int hashCode(),False,,NULL
11,PSource,1,PSource.PSpecified,False,,NULL
11,PSource,2,PSource.PSalted,False,,NULL
11,PSource,3,PSource.PSpecified.getAlgorithmParameterSpec(),False,,NULL
11,PSource,4,PSource.PSalted.getSalt(),False,,NULL
11,PSource,5,PSource.PSalted.getIterationCount(),False,,NULL
12,PSource.PSpecified,1,PSpecified(byte[] seed),False,,NULL
12,PSource.PSpecified,2,byte[] getSeed(),False,,NULL
12,PSource.PSpecified,3,int getDigestAlgorithm(),False,,NULL
12,PSource.PSpecified,4,int getMGFAlgorithm(),False,,NULL
12,PSource.PSpecified,5,int getSaltLength(),False,,NULL
13,RC2ParameterSpec,1,"RC2ParameterSpec(int keySize, byte[] iv)",False,,NULL
13,RC2ParameterSpec,2,int getKeySize(),False,,NULL
13,RC2ParameterSpec,3,byte[] getIV(),True,Returns the IV or null if this parameter set does not contain an IV.,"

getIV
public byte[] getIV()
Returns the IV or null if this parameter set does not contain an IV.

Returns:
the IV or null if this parameter set does not contain an IV.
 Returns a new array each time this method is called.


"
13,RC2ParameterSpec,4,boolean equals(Object obj),True,Tests for equality between the specified object and this object.,"

equals
public boolean equals(Object obj)
Tests for equality between the specified object and this
 object. Two RC2ParameterSpec objects are considered equal if their
 effective key sizes and IVs are equal.
 (Two IV references are considered equal if both are null.)

Overrides:
equals in class Object
Parameters:
obj - the object to test for equality with this object.
Returns:
true if the objects are considered equal, false if
 obj is null or otherwise.
See Also:
Object.hashCode(), 
HashMap


"
13,RC2ParameterSpec,5,int hashCode(),True,Calculates a hash code value for the object.,"

hashCode
public int hashCode()
Calculates a hash code value for the object.
 Objects that are equal will also have the same hashcode.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
14,RC5ParameterSpec,1,"RC5ParameterSpec(int rounds, byte[] key)",False,,NULL
14,RC5ParameterSpec,2,int getRounds(),True,Returns the number of rounds.,"

getRounds
public int getRounds()
Returns the number of rounds.

Returns:
the number of rounds.


"
14,RC5ParameterSpec,3,byte[] getKey(),False,,NULL
14,RC5ParameterSpec,4,int hashCode(),True,Calculates a hash code value for the object.,"

hashCode
public int hashCode()
Calculates a hash code value for the object.
 Objects that are equal will also have the same hashcode.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
14,RC5ParameterSpec,5,boolean equals(Object obj),True,Tests for equality between the specified object and this object.,"

equals
public boolean equals(Object obj)
Tests for equality between the specified object and this
 object. Two RC5ParameterSpec objects are considered equal if their
 version numbers, number of rounds, word sizes, and IVs are equal.
 (Two IV references are considered equal if both are null.)

Overrides:
equals in class Object
Parameters:
obj - the object to test for equality with this object.
Returns:
true if the objects are considered equal, false if
 obj is null or otherwise.
See Also:
Object.hashCode(), 
HashMap


"
15,SecretKeySpec,1,"SecretKeySpec(byte[] key, String algorithm)",False,,NULL
15,SecretKeySpec,2,byte[] getEncoded(),True,Returns the key material of this secret key.,"

getEncoded
public byte[] getEncoded()
Returns the key material of this secret key.

Specified by:
getEncoded in interface Key
Returns:
the key material. Returns a new array
 each time this method is called.


"
15,SecretKeySpec,3,String getAlgorithm(),True,Returns the name of the algorithm associated with this secret key.,"

getAlgorithm
public String getAlgorithm()
Returns the name of the algorithm associated with this secret key.

Specified by:
getAlgorithm in interface Key
Returns:
the secret key algorithm.


"
15,SecretKeySpec,4,String getFormat(),True,Returns the name of the encoding format for this secret key.,"

getFormat
public String getFormat()
Returns the name of the encoding format for this secret key.

Specified by:
getFormat in interface Key
Returns:
the string ""RAW"".


"
15,SecretKeySpec,5,String getProvider(),False,,NULL
