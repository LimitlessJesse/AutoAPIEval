ClassName,Method,Return Type,Description,Full Description
ActionEvent,getActionCommand(),String,Returns the command string associated with this action.,"

getActionCommand
public String getActionCommand()
Returns the command string associated with this action.
 This string allows a ""modal"" component to specify one of several
 commands, depending on its state. For example, a single button might
 toggle between ""show details"" and ""hide details"". The source object
 and the event would be the same in each case, but the command string
 would identify the intended action.
 
 Note that if a null command string was passed
 to the constructor for this ActionEvent, this
 this method returns null.

Returns:
the string identifying the command for this event


"
ActionEvent,getModifiers(),int,Returns the modifier keys held down during this action event.,"

getModifiers
public int getModifiers()
Returns the modifier keys held down during this action event.

Returns:
the bitwise-or of the modifier constants


"
ActionEvent,getWhen(),long,Returns the timestamp of when this event occurred.,"

getWhen
public long getWhen()
Returns the timestamp of when this event occurred. Because an
 ActionEvent is a high-level, semantic event, the timestamp is typically
 the same as an underlying InputEvent.

Returns:
this event's timestamp
Since:
1.4


"
ActionEvent,paramString(),String,Returns a parameter string identifying this action event.,"

paramString
public String paramString()
Returns a parameter string identifying this action event.
 This method is useful for event-logging and for debugging.

Overrides:
paramString in class AWTEvent
Returns:
a string identifying the event and its associated command


"
AdjustmentEvent,getAdjustable(),Adjustable,Returns the Adjustable object where this event originated.,"

getAdjustable
public Adjustable getAdjustable()
Returns the Adjustable object where this event originated.

Returns:
the Adjustable object where this event originated


"
AdjustmentEvent,getAdjustmentType(),int,Returns the type of adjustment which caused the value changed event.,"

getAdjustmentType
public int getAdjustmentType()
Returns the type of adjustment which caused the value changed
 event.  It will have one of the following values:
 
UNIT_INCREMENT
UNIT_DECREMENT
BLOCK_INCREMENT
BLOCK_DECREMENT
TRACK


Returns:
one of the adjustment values listed above


"
AdjustmentEvent,getValue(),int,Returns the current value in the adjustment event.,"

getValue
public int getValue()
Returns the current value in the adjustment event.

Returns:
the current value in the adjustment event


"
AdjustmentEvent,getValueIsAdjusting(),boolean,Returns true if this is one of multiple adjustment events.,"

getValueIsAdjusting
public boolean getValueIsAdjusting()
Returns true if this is one of multiple
 adjustment events.

Returns:
true if this is one of multiple
         adjustment events, otherwise returns false
Since:
1.4


"
AdjustmentEvent,paramString(),String,Returns a string representing the state of this Event.,"

paramString
public String paramString()
Description copied from class: AWTEvent
Returns a string representing the state of this Event.
 This method is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not be
 null.

Overrides:
paramString in class AWTEvent
Returns:
a string representation of this event


"
AWTEventListenerProxy,eventDispatched(AWTEvent event),void,Forwards the AWT event to the listener delegate.,"

eventDispatched
public void eventDispatched(AWTEvent event)
Forwards the AWT event to the listener delegate.

Specified by:
eventDispatched in interface AWTEventListener
Parameters:
event - the AWT event


"
AWTEventListenerProxy,getEventMask(),long,Returns the event mask associated with the listener.,"

getEventMask
public long getEventMask()
Returns the event mask associated with the listener.

Returns:
the event mask associated with the listener


"
ComponentAdapter,componentHidden(ComponentEvent e),void,Invoked when the component has been made invisible.,"

componentHidden
public void componentHidden(ComponentEvent e)
Invoked when the component has been made invisible.

Specified by:
componentHidden in interface ComponentListener


"
ComponentAdapter,componentMoved(ComponentEvent e),void,Invoked when the component's position changes.,"

componentMoved
public void componentMoved(ComponentEvent e)
Invoked when the component's position changes.

Specified by:
componentMoved in interface ComponentListener


"
ComponentAdapter,componentResized(ComponentEvent e),void,Invoked when the component's size changes.,"

componentResized
public void componentResized(ComponentEvent e)
Invoked when the component's size changes.

Specified by:
componentResized in interface ComponentListener


"
ComponentAdapter,componentShown(ComponentEvent e),void,Invoked when the component has been made visible.,"

componentShown
public void componentShown(ComponentEvent e)
Invoked when the component has been made visible.

Specified by:
componentShown in interface ComponentListener


"
ComponentEvent,getComponent(),Component,Returns the originator of the event.,"

getComponent
public Component getComponent()
Returns the originator of the event.

Returns:
the Component object that originated
 the event, or null if the object is not a
 Component.


"
ComponentEvent,paramString(),String,Returns a parameter string identifying this event.,"

paramString
public String paramString()
Returns a parameter string identifying this event.
 This method is useful for event-logging and for debugging.

Overrides:
paramString in class AWTEvent
Returns:
a string identifying the event and its attributes


"
ContainerAdapter,componentAdded(ContainerEvent e),void,Invoked when a component has been added to the container.,"

componentAdded
public void componentAdded(ContainerEvent e)
Invoked when a component has been added to the container.

Specified by:
componentAdded in interface ContainerListener


"
ContainerAdapter,componentRemoved(ContainerEvent e),void,Invoked when a component has been removed from the container.,"

componentRemoved
public void componentRemoved(ContainerEvent e)
Invoked when a component has been removed from the container.

Specified by:
componentRemoved in interface ContainerListener


"
ContainerEvent,getChild(),Component,Returns the component that was affected by the event.,"

getChild
public Component getChild()
Returns the component that was affected by the event.

Returns:
the Component object that was added or removed


"
ContainerEvent,getContainer(),Container,Returns the originator of the event.,"

getContainer
public Container getContainer()
Returns the originator of the event.

Returns:
the Container object that originated
 the event, or null if the object is not a
 Container.


"
ContainerEvent,paramString(),String,Returns a parameter string identifying this event.,"

paramString
public String paramString()
Returns a parameter string identifying this event.
 This method is useful for event-logging and for debugging.

Overrides:
paramString in class ComponentEvent
Returns:
a string identifying the event and its attributes


"
FocusAdapter,focusGained(FocusEvent e),void,Invoked when a component gains the keyboard focus.,"

focusGained
public void focusGained(FocusEvent e)
Invoked when a component gains the keyboard focus.

Specified by:
focusGained in interface FocusListener


"
FocusAdapter,focusLost(FocusEvent e),void,Invoked when a component loses the keyboard focus.,"

focusLost
public void focusLost(FocusEvent e)
Invoked when a component loses the keyboard focus.

Specified by:
focusLost in interface FocusListener


"
FocusEvent,getOppositeComponent(),Component,Returns the other Component involved in this focus change.,"

getOppositeComponent
public Component getOppositeComponent()
Returns the other Component involved in this focus change. For a
 FOCUS_GAINED event, this is the Component that lost focus. For a
 FOCUS_LOST event, this is the Component that gained focus. If this
 focus change occurs with a native application, with a Java application
 in a different VM or context, or with no other Component, then null is
 returned.

Returns:
the other Component involved in the focus change, or null
Since:
1.4


"
FocusEvent,isTemporary(),boolean,Identifies the focus change event as temporary or permanent.,"

isTemporary
public boolean isTemporary()
Identifies the focus change event as temporary or permanent.

Returns:
true if the focus change is temporary;
         false otherwise


"
FocusEvent,paramString(),String,Returns a parameter string identifying this event.,"

paramString
public String paramString()
Returns a parameter string identifying this event.
 This method is useful for event-logging and for debugging.

Overrides:
paramString in class ComponentEvent
Returns:
a string identifying the event and its attributes


"
HierarchyBoundsAdapter,ancestorMoved(HierarchyEvent e),void,Called when an ancestor of the source is moved.,"

ancestorMoved
public void ancestorMoved(HierarchyEvent e)
Called when an ancestor of the source is moved.

Specified by:
ancestorMoved in interface HierarchyBoundsListener


"
HierarchyBoundsAdapter,ancestorResized(HierarchyEvent e),void,Called when an ancestor of the source is resized.,"

ancestorResized
public void ancestorResized(HierarchyEvent e)
Called when an ancestor of the source is resized.

Specified by:
ancestorResized in interface HierarchyBoundsListener


"
HierarchyEvent,getChanged(),Component,Returns the Component at the top of the hierarchy which was changed.,"

getChanged
public Component getChanged()
Returns the Component at the top of the hierarchy which was
 changed.

Returns:
the changed Component


"
HierarchyEvent,getChangedParent(),Container,Returns the parent of the Component returned by getChanged().,"

getChangedParent
public Container getChangedParent()
Returns the parent of the Component returned by 
 getChanged(). For a HIERARCHY_CHANGED event where the
 change was of type PARENT_CHANGED via a call to 
 Container.add, the parent returned is the parent
 after the add operation. For a HIERARCHY_CHANGED event where
 the change was of type PARENT_CHANGED via a call to 
 Container.remove, the parent returned is the parent
 before the remove operation. For all other events and types,
 the parent returned is the parent during the operation.

Returns:
the parent of the changed Component


"
HierarchyEvent,getChangeFlags(),long,Returns a bitmask which indicates the type(s) of HIERARCHY_CHANGED events represented in this event object.,"

getChangeFlags
public long getChangeFlags()
Returns a bitmask which indicates the type(s) of
 HIERARCHY_CHANGED events represented in this event object.
 The bits have been bitwise-ored together.

Returns:
the bitmask, or 0 if this is not an HIERARCHY_CHANGED
 event


"
HierarchyEvent,getComponent(),Component,Returns the originator of the event.,"

getComponent
public Component getComponent()
Returns the originator of the event.

Returns:
the Component object that originated
 the event, or null if the object is not a
 Component.


"
HierarchyEvent,paramString(),String,Returns a parameter string identifying this event.,"

paramString
public String paramString()
Returns a parameter string identifying this event.
 This method is useful for event-logging and for debugging.

Overrides:
paramString in class AWTEvent
Returns:
a string identifying the event and its attributes


"
InputEvent,consume(),void,Consumes this event so that it will not be processed in the default manner by the source which originated it.,"

consume
public void consume()
Consumes this event so that it will not be processed
 in the default manner by the source which originated it.

Overrides:
consume in class AWTEvent


"
InputEvent,getMaskForButton(int button),static int,A method to obtain a mask for any existing mouse button.,"

getMaskForButton
public static int getMaskForButton(int button)
A method to obtain a mask for any existing mouse button.
 The returned mask may be used for different purposes. Following are some of them:
 
 mousePress(buttons) and
      mouseRelease(buttons)
 as a modifiers parameter when creating a new MouseEvent instance
  to check modifiersEx of existing MouseEvent


Parameters:
button - is a number to represent a button starting from 1.
 For example,
 
 int button = InputEvent.getMaskForButton(1);
 
 will have the same meaning as
 
 int button = InputEvent.getMaskForButton(MouseEvent.BUTTON1);
 
 because MouseEvent.BUTTON1 equals to 1.
 If a mouse has three enabled buttons(see MouseInfo.getNumberOfButtons())
 then the values from the left column passed into the method will return
 corresponding values from the right column:
 
    button    returned mask
    BUTTON1  BUTTON1_DOWN_MASK
    BUTTON2  BUTTON2_DOWN_MASK
    BUTTON3  BUTTON3_DOWN_MASK
 
 If a mouse has more than three enabled buttons then more values
 are admissible (4, 5, etc.). There is no assigned constants for these extended buttons.
 The button masks for the extra buttons returned by this method have no assigned names like the
 first three button masks.
 
 This method has the following implementation restriction.
 It returns masks for a limited number of buttons only. The maximum number is
 implementation dependent and may vary.
 This limit is defined by the relevant number
 of buttons that may hypothetically exist on the mouse but it is greater than the
 MouseInfo.getNumberOfButtons().
 
Throws:
IllegalArgumentException - if button is less than zero or greater than the number
         of button masks reserved for buttons
Since:
7.0
See Also:
MouseInfo.getNumberOfButtons(), 
Toolkit.areExtraMouseButtonsEnabled(), 
getModifiers(), 
MouseEvent.getModifiersEx()


"
InputEvent,getModifiers(),int,Returns the modifier mask for this event.,"

getModifiers
public int getModifiers()
Returns the modifier mask for this event.

"
InputEvent,getModifiersEx(),int,Returns the extended modifier mask for this event.,"

getModifiersEx
public int getModifiersEx()
Returns the extended modifier mask for this event.
 
 Extended modifiers are the modifiers that ends with the _DOWN_MASK suffix,
 such as ALT_DOWN_MASK, BUTTON1_DOWN_MASK, and others.
 
 Extended modifiers represent the state of all modal keys,
 such as ALT, CTRL, META, and the mouse buttons just after
 the event occurred.
 
 For example, if the user presses button 1 followed by
 button 2, and then releases them in the same order,
 the following sequence of events is generated:
 
    MOUSE_PRESSED:  BUTTON1_DOWN_MASK
    MOUSE_PRESSED:  BUTTON1_DOWN_MASK | BUTTON2_DOWN_MASK
    MOUSE_RELEASED: BUTTON2_DOWN_MASK
    MOUSE_CLICKED:  BUTTON2_DOWN_MASK
    MOUSE_RELEASED:
    MOUSE_CLICKED:
 

 It is not recommended to compare the return value of this method
 using == because new modifiers can be added in the future.
 For example, the appropriate way to check that SHIFT and BUTTON1 are
 down, but CTRL is up is demonstrated by the following code:
 
    int onmask = SHIFT_DOWN_MASK | BUTTON1_DOWN_MASK;
    int offmask = CTRL_DOWN_MASK;
    if ((event.getModifiersEx() & (onmask | offmask)) == onmask) {
        ...
    }
 
 The above code will work even if new modifiers are added.

Since:
1.4


"
InputEvent,getModifiersExText(int modifiers),static String,"Returns a String describing the extended modifier keys and mouse buttons, such as ""Shift"", ""Button1"", or ""Ctrl+Shift"".","

getModifiersExText
public static String getModifiersExText(int modifiers)
Returns a String describing the extended modifier keys and
 mouse buttons, such as ""Shift"", ""Button1"", or ""Ctrl+Shift"".
 These strings can be localized by changing the
 awt.properties file.
 
 Note that passing negative parameter is incorrect,
 and will cause the returning an unspecified string.
 Zero parameter means that no modifiers were passed and will
 cause the returning an empty string.

Parameters:
modifiers - a modifier mask describing the extended
                modifier keys and mouse buttons for the event
Returns:
a text description of the combination of extended
         modifier keys and mouse buttons that were held down
         during the event.
Since:
1.4


"
InputEvent,getWhen(),long,"Returns the difference in milliseconds between the timestamp of when this event occurred and midnight, January 1, 1970 UTC.","

getWhen
public long getWhen()
Returns the difference in milliseconds between the timestamp of when this event occurred and
 midnight, January 1, 1970 UTC.

"
InputEvent,isAltDown(),boolean,Returns whether or not the Alt modifier is down on this event.,"

isAltDown
public boolean isAltDown()
Returns whether or not the Alt modifier is down on this event.

"
InputEvent,isAltGraphDown(),boolean,Returns whether or not the AltGraph modifier is down on this event.,"

isAltGraphDown
public boolean isAltGraphDown()
Returns whether or not the AltGraph modifier is down on this event.

"
InputEvent,isConsumed(),boolean,Returns whether or not this event has been consumed.,"

isConsumed
public boolean isConsumed()
Returns whether or not this event has been consumed.

Overrides:
isConsumed in class AWTEvent
See Also:
consume()


"
InputEvent,isControlDown(),boolean,Returns whether or not the Control modifier is down on this event.,"

isControlDown
public boolean isControlDown()
Returns whether or not the Control modifier is down on this event.

"
InputEvent,isMetaDown(),boolean,Returns whether or not the Meta modifier is down on this event.,"

isMetaDown
public boolean isMetaDown()
Returns whether or not the Meta modifier is down on this event.

"
InputEvent,isShiftDown(),boolean,Returns whether or not the Shift modifier is down on this event.,"

isShiftDown
public boolean isShiftDown()
Returns whether or not the Shift modifier is down on this event.

"
InputMethodEvent,consume(),void,Consumes this event so that it will not be processed in the default manner by the source which originated it.,"

consume
public void consume()
Consumes this event so that it will not be processed
 in the default manner by the source which originated it.

Overrides:
consume in class AWTEvent


"
InputMethodEvent,getCaret(),TextHitInfo,Gets the caret.,"

getCaret
public TextHitInfo getCaret()
Gets the caret.
 
 The offset of the caret is relative to the current
 composed text; that is, the composed text within getText()
 if this is an INPUT_METHOD_TEXT_CHANGED event,
 the composed text within getText() of the
 preceding INPUT_METHOD_TEXT_CHANGED event otherwise.

Returns:
the caret (a.k.a. insertion point).
 Null if there's no caret within current composed text.


"
InputMethodEvent,getCommittedCharacterCount(),int,Gets the number of committed characters in the text.,"

getCommittedCharacterCount
public int getCommittedCharacterCount()
Gets the number of committed characters in the text.

"
InputMethodEvent,getText(),AttributedCharacterIterator,Gets the combined committed and composed text.,"

getText
public AttributedCharacterIterator getText()
Gets the combined committed and composed text.
 Characters from index 0 to index getCommittedCharacterCount() - 1 are committed
 text, the remaining characters are composed text.

Returns:
the text.
 Always null for CARET_POSITION_CHANGED;
 may be null for INPUT_METHOD_TEXT_CHANGED if there's no composed or committed text.


"
InputMethodEvent,getVisiblePosition(),TextHitInfo,Gets the position that's most important to be visible.,"

getVisiblePosition
public TextHitInfo getVisiblePosition()
Gets the position that's most important to be visible.
 
 The offset of the visible position is relative to the current
 composed text; that is, the composed text within getText()
 if this is an INPUT_METHOD_TEXT_CHANGED event,
 the composed text within getText() of the
 preceding INPUT_METHOD_TEXT_CHANGED event otherwise.

Returns:
the position that's most important to be visible.
 Null if there's no recommendation for a visible position within current composed text.


"
InputMethodEvent,getWhen(),long,Returns the time stamp of when this event occurred.,"

getWhen
public long getWhen()
Returns the time stamp of when this event occurred.

Returns:
this event's timestamp
Since:
1.4


"
InputMethodEvent,isConsumed(),boolean,Returns whether or not this event has been consumed.,"

isConsumed
public boolean isConsumed()
Returns whether or not this event has been consumed.

Overrides:
isConsumed in class AWTEvent
See Also:
consume()


"
InputMethodEvent,paramString(),String,Returns a parameter string identifying this event.,"

paramString
public String paramString()
Returns a parameter string identifying this event.
 This method is useful for event-logging and for debugging.
 It contains the event ID in text form, the characters of the
 committed and composed text
 separated by ""+"", the number of committed characters,
 the caret, and the visible position.

Overrides:
paramString in class AWTEvent
Returns:
a string identifying the event and its attributes


"
InvocationEvent,dispatch(),void,Executes the Runnable's run() method and notifies the notifier (if any) when run() has returned or thrown an exception.,"

dispatch
public void dispatch()
Executes the Runnable's run() method and notifies the
 notifier (if any) when run() has returned or thrown an exception.

Specified by:
dispatch in interface ActiveEvent
See Also:
isDispatched()


"
InvocationEvent,getException(),Exception,Returns any Exception caught while executing the Runnable's run() method.,"

getException
public Exception getException()
Returns any Exception caught while executing the Runnable's run()
  method.

Returns:
A reference to the Exception if one was thrown; null if no
          Exception was thrown or if this InvocationEvent does not
          catch exceptions


"
InvocationEvent,getThrowable(),Throwable,Returns any Throwable caught while executing the Runnable's run() method.,"

getThrowable
public Throwable getThrowable()
Returns any Throwable caught while executing the Runnable's run()
  method.

Returns:
A reference to the Throwable if one was thrown; null if no
          Throwable was thrown or if this InvocationEvent does not
          catch Throwables
Since:
1.5


"
InvocationEvent,getWhen(),long,Returns the timestamp of when this event occurred.,"

getWhen
public long getWhen()
Returns the timestamp of when this event occurred.

Returns:
this event's timestamp
Since:
1.4


"
InvocationEvent,isDispatched(),boolean,"Returns true if the event is dispatched or any exception is thrown while dispatching, false otherwise.","

isDispatched
public boolean isDispatched()
Returns true if the event is dispatched or any exception is
 thrown while dispatching, false otherwise. The method should
 be called by a waiting thread that calls the notifier.wait() method.
 Since spurious wakeups are possible (as explained in Object.wait()),
 this method should be used in a waiting loop to ensure that the event
 got dispatched:
 
     while (!event.isDispatched()) {
         notifier.wait();
     }
 
 If the waiting thread wakes up without dispatching the event,
 the isDispatched() method returns false, and
 the while loop executes once more, thus, causing
 the awakened thread to revert to the waiting mode.
 
 If the notifier.notifyAll() happens before the waiting thread
 enters the notifier.wait() method, the while loop ensures
 that the waiting thread will not enter the notifier.wait() method.
 Otherwise, there is no guarantee that the waiting thread will ever be woken
 from the wait.

Returns:
true if the event has been dispatched, or any exception
 has been thrown while dispatching, false otherwise
Since:
1.7
See Also:
dispatch(), 
notifier, 
catchExceptions


"
InvocationEvent,paramString(),String,Returns a parameter string identifying this event.,"

paramString
public String paramString()
Returns a parameter string identifying this event.
 This method is useful for event-logging and for debugging.

Overrides:
paramString in class AWTEvent
Returns:
A string identifying the event and its attributes


"
ItemEvent,getItem(),Object,Returns the item affected by the event.,"

getItem
public Object getItem()
Returns the item affected by the event.

Returns:
the item (object) that was affected by the event


"
ItemEvent,getItemSelectable(),ItemSelectable,Returns the originator of the event.,"

getItemSelectable
public ItemSelectable getItemSelectable()
Returns the originator of the event.

Returns:
the ItemSelectable object that originated the event.


"
ItemEvent,getStateChange(),int,Returns the type of state change (selected or deselected).,"

getStateChange
public int getStateChange()
Returns the type of state change (selected or deselected).

Returns:
an integer that indicates whether the item was selected
         or deselected
See Also:
SELECTED, 
DESELECTED


"
ItemEvent,paramString(),String,Returns a parameter string identifying this item event.,"

paramString
public String paramString()
Returns a parameter string identifying this item event.
 This method is useful for event-logging and for debugging.

Overrides:
paramString in class AWTEvent
Returns:
a string identifying the event and its attributes


"
KeyAdapter,keyPressed(KeyEvent e),void,Invoked when a key has been pressed.,"

keyPressed
public void keyPressed(KeyEvent e)
Invoked when a key has been pressed.

Specified by:
keyPressed in interface KeyListener


"
KeyAdapter,keyReleased(KeyEvent e),void,Invoked when a key has been released.,"

keyReleased
public void keyReleased(KeyEvent e)
Invoked when a key has been released.

Specified by:
keyReleased in interface KeyListener


"
KeyAdapter,keyTyped(KeyEvent e),void,Invoked when a key has been typed.,"

keyTyped
public void keyTyped(KeyEvent e)
Invoked when a key has been typed.
 This event occurs when a key press is followed by a key release.

Specified by:
keyTyped in interface KeyListener


"
KeyEvent,getExtendedKeyCode(),int,Returns an extended key code for the event.,"

getExtendedKeyCode
public int getExtendedKeyCode()
Returns an extended key code for the event.
 The extended key code is a unique id assigned to  a key on the keyboard
 just like keyCode. However, unlike keyCode, this value depends on the
 current keyboard layout. For instance, pressing the left topmost letter key
 in a common English layout produces the same value as keyCode, VK_Q.
 Pressing the same key in a regular Russian layout gives another code, unique for the
 letter ""Cyrillic I short"".

Since:
1.7


"
KeyEvent,getExtendedKeyCodeForChar(int c),static int,Returns an extended key code for a unicode character.,"

getExtendedKeyCodeForChar
public static int getExtendedKeyCodeForChar(int c)
Returns an extended key code for a unicode character.

Returns:
for a unicode character with a corresponding VK_ constant -- this
   VK_ constant; for a character appearing on the primary
   level of a known keyboard layout -- a unique integer.
   If a character does not appear on the primary level of a known keyboard,
   VK_UNDEFINED is returned.
Since:
1.7


"
KeyEvent,getKeyChar(),char,Returns the character associated with the key in this event.,"

getKeyChar
public char getKeyChar()
Returns the character associated with the key in this event.
 For example, the KEY_TYPED event for shift + ""a""
 returns the value for ""A"".
 
KEY_PRESSED and KEY_RELEASED events
 are not intended for reporting of character input.  Therefore,
 the values returned by this method are guaranteed to be
 meaningful only for KEY_TYPED events.

Returns:
the Unicode character defined for this key event.
         If no valid Unicode character exists for this key event,
         CHAR_UNDEFINED is returned.


"
KeyEvent,getKeyCode(),int,Returns the integer keyCode associated with the key in this event.,"

getKeyCode
public int getKeyCode()
Returns the integer keyCode associated with the key in this event.

Returns:
the integer code for an actual key on the keyboard.
         (For KEY_TYPED events, the keyCode is
         VK_UNDEFINED.)


"
KeyEvent,getKeyLocation(),int,Returns the location of the key that originated this key event.,"

getKeyLocation
public int getKeyLocation()
Returns the location of the key that originated this key event.

 Some keys occur more than once on a keyboard, e.g. the left and
 right shift keys.  Additionally, some keys occur on the numeric
 keypad.  This provides a way of distinguishing such keys.

Returns:
the location of the key that was pressed or released.
         Always returns KEY_LOCATION_UNKNOWN for
         KEY_TYPED events.
Since:
1.4


"
KeyEvent,getKeyModifiersText(int modifiers),static String,"Returns a String describing the modifier key(s), such as ""Shift"", or ""Ctrl+Shift"".","

getKeyModifiersText
public static String getKeyModifiersText(int modifiers)
Returns a String describing the modifier key(s),
 such as ""Shift"", or ""Ctrl+Shift"".  These strings can be
 localized by changing the awt.properties file.
 
 Note that InputEvent.ALT_MASK and
 InputEvent.BUTTON2_MASK have the same value,
 so the string ""Alt"" is returned for both modifiers.  Likewise,
 InputEvent.META_MASK and
 InputEvent.BUTTON3_MASK have the same value,
 so the string ""Meta"" is returned for both modifiers.

Returns:
string a text description of the combination of modifier
                keys that were held down during the event
See Also:
InputEvent.getModifiersExText(int)


"
KeyEvent,getKeyText(int keyCode),static String,"Returns a String describing the keyCode, such as ""HOME"", ""F1"" or ""A"".","

getKeyText
public static String getKeyText(int keyCode)
Returns a String describing the keyCode, such as ""HOME"", ""F1"" or ""A"".
 These strings can be localized by changing the awt.properties file.

Returns:
a string containing a text description for a physical key,
         identified by its keyCode


"
KeyEvent,isActionKey(),boolean,"Returns whether the key in this event is an ""action"" key.","

isActionKey
public boolean isActionKey()
Returns whether the key in this event is an ""action"" key.
 Typically an action key does not fire a unicode character and is
 not a modifier key.

Returns:
true if the key is an ""action"" key,
         false otherwise


"
KeyEvent,paramString(),String,Returns a parameter string identifying this event.,"

paramString
public String paramString()
Returns a parameter string identifying this event.
 This method is useful for event logging and for debugging.

Overrides:
paramString in class ComponentEvent
Returns:
a string identifying the event and its attributes


"
KeyEvent,setKeyChar(char keyChar),void,Set the keyChar value to indicate a logical character.,"

setKeyChar
public void setKeyChar(char keyChar)
Set the keyChar value to indicate a logical character.

Parameters:
keyChar - a char corresponding to to the combination of keystrokes
                that make up this event.


"
KeyEvent,setKeyCode(int keyCode),void,Set the keyCode value to indicate a physical key.,"

setKeyCode
public void setKeyCode(int keyCode)
Set the keyCode value to indicate a physical key.

Parameters:
keyCode - an integer corresponding to an actual key on the keyboard.


"
KeyEvent,setModifiers(int modifiers),void,Deprecated. as of JDK1.1.4,"

setModifiers
@Deprecated
public void setModifiers(int modifiers)
Deprecated. as of JDK1.1.4
Set the modifiers to indicate additional keys that were held down
 (e.g. shift, ctrl, alt, meta) defined as part of InputEvent.
 
 NOTE:  use of this method is not recommended, because many AWT
 implementations do not recognize modifier changes.  This is
 especially true for KEY_TYPED events where the shift
 modifier is changed.

Parameters:
modifiers - an integer combination of the modifier constants.
See Also:
InputEvent


"
MouseAdapter,mouseClicked(MouseEvent e),void,Invoked when the mouse button has been clicked (pressed and released) on a component.,"

mouseClicked
public void mouseClicked(MouseEvent e)
Invoked when the mouse button has been clicked (pressed
 and released) on a component.

Specified by:
mouseClicked in interface MouseListener


"
MouseAdapter,mouseDragged(MouseEvent e),void,Invoked when a mouse button is pressed on a component and then dragged.,"

mouseDragged
public void mouseDragged(MouseEvent e)
Invoked when a mouse button is pressed on a component and then
 dragged.  MOUSE_DRAGGED events will continue to be
 delivered to the component where the drag originated until the
 mouse button is released (regardless of whether the mouse position
 is within the bounds of the component).
 
 Due to platform-dependent Drag&Drop implementations,
 MOUSE_DRAGGED events may not be delivered during a native
 Drag&Drop operation.

Specified by:
mouseDragged in interface MouseMotionListener
Since:
1.6


"
MouseAdapter,mouseEntered(MouseEvent e),void,Invoked when the mouse enters a component.,"

mouseEntered
public void mouseEntered(MouseEvent e)
Invoked when the mouse enters a component.

Specified by:
mouseEntered in interface MouseListener


"
MouseAdapter,mouseExited(MouseEvent e),void,Invoked when the mouse exits a component.,"

mouseExited
public void mouseExited(MouseEvent e)
Invoked when the mouse exits a component.

Specified by:
mouseExited in interface MouseListener


"
MouseAdapter,mouseMoved(MouseEvent e),void,Invoked when the mouse cursor has been moved onto a component but no buttons have been pushed.,"

mouseMoved
public void mouseMoved(MouseEvent e)
Invoked when the mouse cursor has been moved onto a component
 but no buttons have been pushed.

Specified by:
mouseMoved in interface MouseMotionListener
Since:
1.6


"
MouseAdapter,mousePressed(MouseEvent e),void,Invoked when a mouse button has been pressed on a component.,"

mousePressed
public void mousePressed(MouseEvent e)
Invoked when a mouse button has been pressed on a component.

Specified by:
mousePressed in interface MouseListener


"
MouseAdapter,mouseReleased(MouseEvent e),void,Invoked when a mouse button has been released on a component.,"

mouseReleased
public void mouseReleased(MouseEvent e)
Invoked when a mouse button has been released on a component.

Specified by:
mouseReleased in interface MouseListener


"
MouseAdapter,mouseWheelMoved(MouseWheelEvent e),void,Invoked when the mouse wheel is rotated.,"

mouseWheelMoved
public void mouseWheelMoved(MouseWheelEvent e)
Invoked when the mouse wheel is rotated.

Specified by:
mouseWheelMoved in interface MouseWheelListener
Since:
1.6
See Also:
MouseWheelEvent


"
MouseEvent,getButton(),int,"Returns which, if any, of the mouse buttons has changed state.","

getButton
public int getButton()
Returns which, if any, of the mouse buttons has changed state.
 The returned value is ranged
 from 0 to the MouseInfo.getNumberOfButtons()
 value.
 The returned value includes at least the following constants:
 
 NOBUTTON
 BUTTON1
 BUTTON2
 BUTTON3

 It is allowed to use those constants to compare with the returned button number in the application.
 For example,
 
 if (anEvent.getButton() == MouseEvent.BUTTON1) {
 
 In particular, for a mouse with one, two, or three buttons this method may return the following values:
 
 0 (NOBUTTON)
  1 (BUTTON1)
  2 (BUTTON2)
  3 (BUTTON3)
 
 Button numbers greater then BUTTON3 have no constant identifier. So if a mouse with five buttons is
 installed, this method may return the following values:
 
 0 (NOBUTTON)
  1 (BUTTON1)
  2 (BUTTON2)
  3 (BUTTON3)
  4
  5
 

 Note: If support for extended mouse buttons is disabled by Java
 then the AWT event subsystem does not produce mouse events for the extended mouse
 buttons. So it is not expected that this method returns anything except NOBUTTON, BUTTON1,
 BUTTON2, BUTTON3.

Returns:
one of the values from 0 to MouseInfo.getNumberOfButtons()
         if support for the extended mouse buttons is enabled by Java.
         That range includes NOBUTTON, BUTTON1, BUTTON2, BUTTON3;
         
NOBUTTON, BUTTON1, BUTTON2 or BUTTON3
         if support for the extended mouse buttons is disabled by Java
Since:
1.4
See Also:
Toolkit.areExtraMouseButtonsEnabled(), 
MouseInfo.getNumberOfButtons(), 
MouseEvent(Component, int, long, int, int, int, int, int, int, boolean, int), 
InputEvent.getMaskForButton(int)


"
MouseEvent,getClickCount(),int,Returns the number of mouse clicks associated with this event.,"

getClickCount
public int getClickCount()
Returns the number of mouse clicks associated with this event.

Returns:
integer value for the number of clicks


"
MouseEvent,getLocationOnScreen(),Point,"Returns the absolute x, y position of the event.","

getLocationOnScreen
public Point getLocationOnScreen()
Returns the absolute x, y position of the event.
 In a virtual device multi-screen environment in which the
 desktop area could span multiple physical screen devices,
 these coordinates are relative to the virtual coordinate system.
 Otherwise, these coordinates are relative to the coordinate system
 associated with the Component's GraphicsConfiguration.

Returns:
a Point object containing the absolute  x
  and y coordinates.
Since:
1.6
See Also:
GraphicsConfiguration


"
MouseEvent,getModifiersEx(),int,Returns the extended modifier mask for this event.,"

getModifiersEx
public int getModifiersEx()
Returns the extended modifier mask for this event.
 
 Extended modifiers are the modifiers that ends with the _DOWN_MASK suffix,
 such as ALT_DOWN_MASK, BUTTON1_DOWN_MASK, and others.
 
 Extended modifiers represent the state of all modal keys,
 such as ALT, CTRL, META, and the mouse buttons just after
 the event occurred.
 
 For example, if the user presses button 1 followed by
 button 2, and then releases them in the same order,
 the following sequence of events is generated:
 
    MOUSE_PRESSED:  BUTTON1_DOWN_MASK
    MOUSE_PRESSED:  BUTTON1_DOWN_MASK | BUTTON2_DOWN_MASK
    MOUSE_RELEASED: BUTTON2_DOWN_MASK
    MOUSE_CLICKED:  BUTTON2_DOWN_MASK
    MOUSE_RELEASED:
    MOUSE_CLICKED:
 

 It is not recommended to compare the return value of this method
 using == because new modifiers can be added in the future.
 For example, the appropriate way to check that SHIFT and BUTTON1 are
 down, but CTRL is up is demonstrated by the following code:
 
    int onmask = SHIFT_DOWN_MASK | BUTTON1_DOWN_MASK;
    int offmask = CTRL_DOWN_MASK;
    if ((event.getModifiersEx() & (onmask | offmask)) == onmask) {
        ...
    }
 
 The above code will work even if new modifiers are added.

Overrides:
getModifiersEx in class InputEvent


"
MouseEvent,getMouseModifiersText(int modifiers),static String,"Returns a String instance describing the modifier keys and mouse buttons that were down during the event, such as ""Shift"", or ""Ctrl+Shift"".","

getMouseModifiersText
public static String getMouseModifiersText(int modifiers)
Returns a String instance describing the modifier keys and
 mouse buttons that were down during the event, such as ""Shift"",
 or ""Ctrl+Shift"". These strings can be localized by changing
 the awt.properties file.
 
 Note that the InputEvent.ALT_MASK and
 InputEvent.BUTTON2_MASK have equal values,
 so the ""Alt"" string is returned for both modifiers.  Likewise,
 the InputEvent.META_MASK and
 InputEvent.BUTTON3_MASK have equal values,
 so the ""Meta"" string is returned for both modifiers.
 
 Note that passing negative parameter is incorrect,
 and will cause the returning an unspecified string.
 Zero parameter means that no modifiers were passed and will
 cause the returning an empty string.
 

Parameters:
modifiers - A modifier mask describing the modifier keys and
                  mouse buttons that were down during the event
Returns:
string   string text description of the combination of modifier
                  keys and mouse buttons that were down during the event
Since:
1.4
See Also:
InputEvent.getModifiersExText(int)


"
MouseEvent,getPoint(),Point,"Returns the x,y position of the event relative to the source component.","

getPoint
public Point getPoint()
Returns the x,y position of the event relative to the source component.

Returns:
a Point object containing the x and y coordinates
         relative to the source component


"
MouseEvent,getX(),int,Returns the horizontal x position of the event relative to the source component.,"

getX
public int getX()
Returns the horizontal x position of the event relative to the
 source component.

Returns:
x  an integer indicating horizontal position relative to
            the component


"
MouseEvent,getXOnScreen(),int,Returns the absolute horizontal x position of the event.,"

getXOnScreen
public int getXOnScreen()
Returns the absolute horizontal x position of the event.
 In a virtual device multi-screen environment in which the
 desktop area could span multiple physical screen devices,
 this coordinate is relative to the virtual coordinate system.
 Otherwise, this coordinate is relative to the coordinate system
 associated with the Component's GraphicsConfiguration.

Returns:
x  an integer indicating absolute horizontal position.
Since:
1.6
See Also:
GraphicsConfiguration


"
MouseEvent,getY(),int,Returns the vertical y position of the event relative to the source component.,"

getY
public int getY()
Returns the vertical y position of the event relative to the
 source component.

Returns:
y  an integer indicating vertical position relative to
            the component


"
MouseEvent,getYOnScreen(),int,Returns the absolute vertical y position of the event.,"

getYOnScreen
public int getYOnScreen()
Returns the absolute vertical y position of the event.
 In a virtual device multi-screen environment in which the
 desktop area could span multiple physical screen devices,
 this coordinate is relative to the virtual coordinate system.
 Otherwise, this coordinate is relative to the coordinate system
 associated with the Component's GraphicsConfiguration.

Returns:
y  an integer indicating absolute vertical position.
Since:
1.6
See Also:
GraphicsConfiguration


"
MouseEvent,isPopupTrigger(),boolean,Returns whether or not this mouse event is the popup menu trigger event for the platform.,"

isPopupTrigger
public boolean isPopupTrigger()
Returns whether or not this mouse event is the popup menu
 trigger event for the platform.
 Note: Popup menus are triggered differently
 on different systems. Therefore, isPopupTrigger
 should be checked in both mousePressed
 and mouseReleased
 for proper cross-platform functionality.

Returns:
boolean, true if this event is the popup menu trigger
         for this platform


"
MouseEvent,paramString(),String,Returns a parameter string identifying this event.,"

paramString
public String paramString()
Returns a parameter string identifying this event.
 This method is useful for event-logging and for debugging.

Overrides:
paramString in class ComponentEvent
Returns:
a string identifying the event and its attributes


"
MouseEvent,"translatePoint(int x, int y)",void,Translates the event's coordinates to a new position by adding specified x (horizontal) and y (vertical) offsets.,"

translatePoint
public void translatePoint(int x,
                           int y)
Translates the event's coordinates to a new position
 by adding specified x (horizontal) and y
 (vertical) offsets.

Parameters:
x - the horizontal x value to add to the current x
          coordinate position
y - the vertical y value to add to the current y
                coordinate position


"
MouseMotionAdapter,mouseDragged(MouseEvent e),void,Invoked when a mouse button is pressed on a component and then dragged.,"

mouseDragged
public void mouseDragged(MouseEvent e)
Invoked when a mouse button is pressed on a component and then
 dragged.  Mouse drag events will continue to be delivered to
 the component where the first originated until the mouse button is
 released (regardless of whether the mouse position is within the
 bounds of the component).

Specified by:
mouseDragged in interface MouseMotionListener


"
MouseMotionAdapter,mouseMoved(MouseEvent e),void,Invoked when the mouse button has been moved on a component (with no buttons no down).,"

mouseMoved
public void mouseMoved(MouseEvent e)
Invoked when the mouse button has been moved on a component
 (with no buttons no down).

Specified by:
mouseMoved in interface MouseMotionListener


"
MouseWheelEvent,getPreciseWheelRotation(),double,"Returns the number of ""clicks"" the mouse wheel was rotated, as a double.","

getPreciseWheelRotation
public double getPreciseWheelRotation()
Returns the number of ""clicks"" the mouse wheel was rotated, as a double.
 A partial rotation may occur if the mouse supports a high-resolution wheel.
 In this case, the return value will include a fractional ""click"".

Returns:
negative values if the mouse wheel was rotated up or away from
 the user, and positive values if the mouse wheel was rotated down or
 towards the user
Since:
1.7
See Also:
getWheelRotation()


"
MouseWheelEvent,getScrollAmount(),int,Returns the number of units that should be scrolled per click of mouse wheel rotation.,"

getScrollAmount
public int getScrollAmount()
Returns the number of units that should be scrolled per
 click of mouse wheel rotation.
 Only valid if getScrollType returns
 MouseWheelEvent.WHEEL_UNIT_SCROLL

Returns:
number of units to scroll, or an undefined value if
  getScrollType returns
  MouseWheelEvent.WHEEL_BLOCK_SCROLL
See Also:
getScrollType()


"
MouseWheelEvent,getScrollType(),int,Returns the type of scrolling that should take place in response to this event.,"

getScrollType
public int getScrollType()
Returns the type of scrolling that should take place in response to this
 event.  This is determined by the native platform.  Legal values are:
 
 MouseWheelEvent.WHEEL_UNIT_SCROLL
  MouseWheelEvent.WHEEL_BLOCK_SCROLL
 

Returns:
either MouseWheelEvent.WHEEL_UNIT_SCROLL or
  MouseWheelEvent.WHEEL_BLOCK_SCROLL, depending on the configuration of
  the native platform.
See Also:
Adjustable.getUnitIncrement(), 
Adjustable.getBlockIncrement(), 
Scrollable.getScrollableUnitIncrement(java.awt.Rectangle, int, int), 
Scrollable.getScrollableBlockIncrement(java.awt.Rectangle, int, int)


"
MouseWheelEvent,getUnitsToScroll(),int,This is a convenience method to aid in the implementation of the common-case MouseWheelListener - to scroll a ScrollPane or JScrollPane by an amount which conforms to the platform settings.,"

getUnitsToScroll
public int getUnitsToScroll()
This is a convenience method to aid in the implementation of
 the common-case MouseWheelListener - to scroll a ScrollPane or
 JScrollPane by an amount which conforms to the platform settings.
 (Note, however, that ScrollPane and
 JScrollPane already have this functionality built in.)
 
 This method returns the number of units to scroll when scroll type is
 MouseWheelEvent.WHEEL_UNIT_SCROLL, and should only be called if
 getScrollType returns MouseWheelEvent.WHEEL_UNIT_SCROLL.
 
 Direction of scroll, amount of wheel movement,
 and platform settings for wheel scrolling are all accounted for.
 This method does not and cannot take into account value of the
 Adjustable/Scrollable unit increment, as this will vary among
 scrolling components.
 
 A simplified example of how this method might be used in a
 listener:
 
  mouseWheelMoved(MouseWheelEvent event) {
      ScrollPane sp = getScrollPaneFromSomewhere();
      Adjustable adj = sp.getVAdjustable()
      if (MouseWheelEvent.getScrollType() == WHEEL_UNIT_SCROLL) {
          int totalScrollAmount =
              event.getUnitsToScroll() *
              adj.getUnitIncrement();
          adj.setValue(adj.getValue() + totalScrollAmount);
      }
  }
 

Returns:
the number of units to scroll based on the direction and amount
  of mouse wheel rotation, and on the wheel scrolling settings of the
  native platform
See Also:
getScrollType(), 
getScrollAmount(), 
MouseWheelListener, 
Adjustable, 
Adjustable.getUnitIncrement(), 
Scrollable, 
Scrollable.getScrollableUnitIncrement(java.awt.Rectangle, int, int), 
ScrollPane, 
ScrollPane.setWheelScrollingEnabled(boolean), 
JScrollPane, 
JScrollPane.setWheelScrollingEnabled(boolean)


"
MouseWheelEvent,getWheelRotation(),int,"Returns the number of ""clicks"" the mouse wheel was rotated, as an integer.","

getWheelRotation
public int getWheelRotation()
Returns the number of ""clicks"" the mouse wheel was rotated, as an integer.
 A partial rotation may occur if the mouse supports a high-resolution wheel.
 In this case, the method returns zero until a full ""click"" has been accumulated.

Returns:
negative values if the mouse wheel was rotated up/away from
 the user, and positive values if the mouse wheel was rotated down/
 towards the user
See Also:
getPreciseWheelRotation()


"
MouseWheelEvent,paramString(),String,Returns a parameter string identifying this event.,"

paramString
public String paramString()
Returns a parameter string identifying this event.
 This method is useful for event-logging and for debugging.

Overrides:
paramString in class MouseEvent
Returns:
a string identifying the event and its attributes


"
PaintEvent,getUpdateRect(),Rectangle,Returns the rectangle representing the area which needs to be repainted in response to this event.,"

getUpdateRect
public Rectangle getUpdateRect()
Returns the rectangle representing the area which needs to be
 repainted in response to this event.

"
PaintEvent,paramString(),String,Returns a parameter string identifying this event.,"

paramString
public String paramString()
Description copied from class: ComponentEvent
Returns a parameter string identifying this event.
 This method is useful for event-logging and for debugging.

Overrides:
paramString in class ComponentEvent
Returns:
a string identifying the event and its attributes


"
PaintEvent,setUpdateRect(Rectangle updateRect),void,Sets the rectangle representing the area which needs to be repainted in response to this event.,"

setUpdateRect
public void setUpdateRect(Rectangle updateRect)
Sets the rectangle representing the area which needs to be
 repainted in response to this event.

Parameters:
updateRect - the rectangle area which needs to be repainted


"
TextEvent,paramString(),String,Returns a parameter string identifying this text event.,"

paramString
public String paramString()
Returns a parameter string identifying this text event.
 This method is useful for event-logging and for debugging.

Overrides:
paramString in class AWTEvent
Returns:
a string identifying the event and its attributes


"
WindowAdapter,windowActivated(WindowEvent e),void,Invoked when a window is activated.,"

windowActivated
public void windowActivated(WindowEvent e)
Invoked when a window is activated.

Specified by:
windowActivated in interface WindowListener


"
WindowAdapter,windowClosed(WindowEvent e),void,Invoked when a window has been closed.,"

windowClosed
public void windowClosed(WindowEvent e)
Invoked when a window has been closed.

Specified by:
windowClosed in interface WindowListener


"
WindowAdapter,windowClosing(WindowEvent e),void,Invoked when a window is in the process of being closed.,"

windowClosing
public void windowClosing(WindowEvent e)
Invoked when a window is in the process of being closed.
 The close operation can be overridden at this point.

Specified by:
windowClosing in interface WindowListener


"
WindowAdapter,windowDeactivated(WindowEvent e),void,Invoked when a window is de-activated.,"

windowDeactivated
public void windowDeactivated(WindowEvent e)
Invoked when a window is de-activated.

Specified by:
windowDeactivated in interface WindowListener


"
WindowAdapter,windowDeiconified(WindowEvent e),void,Invoked when a window is de-iconified.,"

windowDeiconified
public void windowDeiconified(WindowEvent e)
Invoked when a window is de-iconified.

Specified by:
windowDeiconified in interface WindowListener


"
WindowAdapter,windowGainedFocus(WindowEvent e),void,"Invoked when the Window is set to be the focused Window, which means that the Window, or one of its subcomponents, will receive keyboard events.","

windowGainedFocus
public void windowGainedFocus(WindowEvent e)
Invoked when the Window is set to be the focused Window, which means
 that the Window, or one of its subcomponents, will receive keyboard
 events.

Specified by:
windowGainedFocus in interface WindowFocusListener
Since:
1.4


"
WindowAdapter,windowIconified(WindowEvent e),void,Invoked when a window is iconified.,"

windowIconified
public void windowIconified(WindowEvent e)
Invoked when a window is iconified.

Specified by:
windowIconified in interface WindowListener
See Also:
Frame.setIconImage(java.awt.Image)


"
WindowAdapter,windowLostFocus(WindowEvent e),void,"Invoked when the Window is no longer the focused Window, which means that keyboard events will no longer be delivered to the Window or any of its subcomponents.","

windowLostFocus
public void windowLostFocus(WindowEvent e)
Invoked when the Window is no longer the focused Window, which means
 that keyboard events will no longer be delivered to the Window or any of
 its subcomponents.

Specified by:
windowLostFocus in interface WindowFocusListener
Since:
1.4


"
WindowAdapter,windowOpened(WindowEvent e),void,Invoked when a window has been opened.,"

windowOpened
public void windowOpened(WindowEvent e)
Invoked when a window has been opened.

Specified by:
windowOpened in interface WindowListener


"
WindowAdapter,windowStateChanged(WindowEvent e),void,Invoked when a window state is changed.,"

windowStateChanged
public void windowStateChanged(WindowEvent e)
Invoked when a window state is changed.

Specified by:
windowStateChanged in interface WindowStateListener
Since:
1.4


"
WindowEvent,getNewState(),int,For WINDOW_STATE_CHANGED events returns the new state of the window.,"

getNewState
public int getNewState()
For WINDOW_STATE_CHANGED events returns the
 new state of the window. The state is
 represented as a bitwise mask.
 
NORMAL
Indicates that no state bits are set.
 ICONIFIED
MAXIMIZED_HORIZ
MAXIMIZED_VERT
MAXIMIZED_BOTH
Concatenates MAXIMIZED_HORIZ
 and MAXIMIZED_VERT.
 

Returns:
a bitwise mask of the new window state
Since:
1.4
See Also:
Frame.getExtendedState()


"
WindowEvent,getOldState(),int,For WINDOW_STATE_CHANGED events returns the previous state of the window.,"

getOldState
public int getOldState()
For WINDOW_STATE_CHANGED events returns the
 previous state of the window. The state is
 represented as a bitwise mask.
 
NORMAL
Indicates that no state bits are set.
 ICONIFIED
MAXIMIZED_HORIZ
MAXIMIZED_VERT
MAXIMIZED_BOTH
Concatenates MAXIMIZED_HORIZ
 and MAXIMIZED_VERT.
 

Returns:
a bitwise mask of the previous window state
Since:
1.4
See Also:
Frame.getExtendedState()


"
WindowEvent,getOppositeWindow(),Window,Returns the other Window involved in this focus or activation change.,"

getOppositeWindow
public Window getOppositeWindow()
Returns the other Window involved in this focus or activation change.
 For a WINDOW_ACTIVATED or WINDOW_GAINED_FOCUS event, this is the Window
 that lost activation or focus. For a WINDOW_DEACTIVATED or
 WINDOW_LOST_FOCUS event, this is the Window that gained activation or
 focus. For any other type of WindowEvent, or if the focus or activation
 change occurs with a native application, with a Java application in a
 different VM or context, or with no other Window, null is returned.

Returns:
the other Window involved in the focus or activation change, or
         null
Since:
1.4


"
WindowEvent,getWindow(),Window,Returns the originator of the event.,"

getWindow
public Window getWindow()
Returns the originator of the event.

Returns:
the Window object that originated the event


"
WindowEvent,paramString(),String,Returns a parameter string identifying this event.,"

paramString
public String paramString()
Returns a parameter string identifying this event.
 This method is useful for event-logging and for debugging.

Overrides:
paramString in class ComponentEvent
Returns:
a string identifying the event and its attributes


"
