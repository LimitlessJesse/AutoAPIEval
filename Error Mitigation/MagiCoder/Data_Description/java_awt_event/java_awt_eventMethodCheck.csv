Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,ActionEvent,1,"ActionEvent(Object source, int id)",False,,NULL
0,ActionEvent,2,"ActionEvent(Object source, int id, String command)",False,,NULL
0,ActionEvent,3,"ActionEvent(Object source, int id, String command, long when)",False,,NULL
0,ActionEvent,4,"ActionEvent(Object source, int id, String command, long when, int modifiers)",False,,NULL
0,ActionEvent,5,"ActionEvent(Object source, int id, String command, long when, int modifiers, InputEvent e)",False,,NULL
1,AdjustmentEvent,1,"AdjustmentEvent(Object source, int id)",False,,NULL
1,AdjustmentEvent,2,"AdjustmentEvent(Object source, int id, int adjustType)",False,,NULL
1,AdjustmentEvent,3,int getAdjustType(),False,,NULL
1,AdjustmentEvent,4,int getValue(),True,Returns the current value in the adjustment event.,"

getValue
public int getValue()
Returns the current value in the adjustment event.

Returns:
the current value in the adjustment event


"
1,AdjustmentEvent,5,int getValueIsAdjusting(),False,,NULL
2,AWTEventListenerProxy,1,void eventDispatched(AWTEvent event),True,Forwards the AWT event to the listener delegate.,"

eventDispatched
public void eventDispatched(AWTEvent event)
Forwards the AWT event to the listener delegate.

Specified by:
eventDispatched in interface AWTEventListener
Parameters:
event - the AWT event


"
2,AWTEventListenerProxy,2,void eventDispatched(Event event),False,,NULL
2,AWTEventListenerProxy,3,void eventDispatched(EventObject event),False,,NULL
2,AWTEventListenerProxy,4,void eventDispatched(java.util.EventObject event),False,,NULL
2,AWTEventListenerProxy,5,void eventDispatched(java.util.concurrent.atomic.AtomicReference<Event> event),False,,NULL
3,ComponentAdapter,1,void componentHidden(ComponentEvent e),True,Invoked when the component has been made invisible.,"

componentHidden
public void componentHidden(ComponentEvent e)
Invoked when the component has been made invisible.

Specified by:
componentHidden in interface ComponentListener


"
3,ComponentAdapter,2,void componentMoved(ComponentEvent e),True,Invoked when the component's position changes.,"

componentMoved
public void componentMoved(ComponentEvent e)
Invoked when the component's position changes.

Specified by:
componentMoved in interface ComponentListener


"
3,ComponentAdapter,3,void componentResized(ComponentEvent e),True,Invoked when the component's size changes.,"

componentResized
public void componentResized(ComponentEvent e)
Invoked when the component's size changes.

Specified by:
componentResized in interface ComponentListener


"
3,ComponentAdapter,4,void componentShown(ComponentEvent e),True,Invoked when the component has been made visible.,"

componentShown
public void componentShown(ComponentEvent e)
Invoked when the component has been made visible.

Specified by:
componentShown in interface ComponentListener


"
3,ComponentAdapter,5,void componentMoved(ComponentEvent e),True,Invoked when the component's position changes.,"

componentMoved
public void componentMoved(ComponentEvent e)
Invoked when the component's position changes.

Specified by:
componentMoved in interface ComponentListener


"
4,ComponentEvent,1,"ComponentEvent(Component source, int id)",False,,NULL
4,ComponentEvent,2,Component getSource(),False,,NULL
4,ComponentEvent,3,int getID(),False,,NULL
4,ComponentEvent,4,void paramChanged(),False,,NULL
4,ComponentEvent,5,void setSource(Component source),False,,NULL
5,ContainerAdapter,1,void componentAdded(ComponentEvent e),False,,NULL
5,ContainerAdapter,2,void componentRemoved(ComponentEvent e),False,,NULL
5,ContainerAdapter,3,void addChild(ContainerEvent e),False,,NULL
5,ContainerAdapter,4,void removeChild(ContainerEvent e),False,,NULL
5,ContainerAdapter,5,void childAdded(ContainerEvent e),False,,NULL
5,ContainerAdapter,6,void childRemoved(ContainerEvent e),False,,NULL
6,ContainerEvent,1,"ContainerEvent(Component source, int id)",False,,NULL
6,ContainerEvent,2,Component getSource(),False,,NULL
6,ContainerEvent,3,int getID(),False,,NULL
6,ContainerEvent,4,void setSource(Component source),False,,NULL
6,ContainerEvent,5,void setID(int id),False,,NULL
7,FocusAdapter,1,void focusGained(FocusEvent e),True,Invoked when a component gains the keyboard focus.,"

focusGained
public void focusGained(FocusEvent e)
Invoked when a component gains the keyboard focus.

Specified by:
focusGained in interface FocusListener


"
7,FocusAdapter,2,void focusLost(FocusEvent e),True,Invoked when a component loses the keyboard focus.,"

focusLost
public void focusLost(FocusEvent e)
Invoked when a component loses the keyboard focus.

Specified by:
focusLost in interface FocusListener


"
7,FocusAdapter,3,void focusGained(FocusEvent e),True,Invoked when a component gains the keyboard focus.,"

focusGained
public void focusGained(FocusEvent e)
Invoked when a component gains the keyboard focus.

Specified by:
focusGained in interface FocusListener


"
7,FocusAdapter,4,void focusLost(FocusEvent e),True,Invoked when a component loses the keyboard focus.,"

focusLost
public void focusLost(FocusEvent e)
Invoked when a component loses the keyboard focus.

Specified by:
focusLost in interface FocusListener


"
7,FocusAdapter,5,void focusGained(FocusEvent e),True,Invoked when a component gains the keyboard focus.,"

focusGained
public void focusGained(FocusEvent e)
Invoked when a component gains the keyboard focus.

Specified by:
focusGained in interface FocusListener


"
7,FocusAdapter,6,void focusLost(FocusEvent e),True,Invoked when a component loses the keyboard focus.,"

focusLost
public void focusLost(FocusEvent e)
Invoked when a component loses the keyboard focus.

Specified by:
focusLost in interface FocusListener


"
7,FocusAdapter,7,void focusGained(FocusEvent e),True,Invoked when a component gains the keyboard focus.,"

focusGained
public void focusGained(FocusEvent e)
Invoked when a component gains the keyboard focus.

Specified by:
focusGained in interface FocusListener


"
7,FocusAdapter,8,void focusLost(FocusEvent e),True,Invoked when a component loses the keyboard focus.,"

focusLost
public void focusLost(FocusEvent e)
Invoked when a component loses the keyboard focus.

Specified by:
focusLost in interface FocusListener


"
7,FocusAdapter,9,void focusGained(FocusEvent e),True,Invoked when a component gains the keyboard focus.,"

focusGained
public void focusGained(FocusEvent e)
Invoked when a component gains the keyboard focus.

Specified by:
focusGained in interface FocusListener


"
7,FocusAdapter,10,void focusLost(FocusEvent e),True,Invoked when a component loses the keyboard focus.,"

focusLost
public void focusLost(FocusEvent e)
Invoked when a component loses the keyboard focus.

Specified by:
focusLost in interface FocusListener


"
8,FocusEvent,1,boolean isTemporary(),True,Identifies the focus change event as temporary or permanent.,"

isTemporary
public boolean isTemporary()
Identifies the focus change event as temporary or permanent.

Returns:
true if the focus change is temporary;
         false otherwise


"
8,FocusEvent,2,Component getOppositeComponent(),True,Returns the other Component involved in this focus change.,"

getOppositeComponent
public Component getOppositeComponent()
Returns the other Component involved in this focus change. For a
 FOCUS_GAINED event, this is the Component that lost focus. For a
 FOCUS_LOST event, this is the Component that gained focus. If this
 focus change occurs with a native application, with a Java application
 in a different VM or context, or with no other Component, then null is
 returned.

Returns:
the other Component involved in the focus change, or null
Since:
1.4


"
8,FocusEvent,3,Component getComponent(),False,,NULL
8,FocusEvent,4,boolean isFocusGained(),False,,NULL
8,FocusEvent,5,boolean isFocusLost(),False,,NULL
9,HierarchyBoundsAdapter,1,void ancestorMoved(HierarchyEvent e),True,Called when an ancestor of the source is moved.,"

ancestorMoved
public void ancestorMoved(HierarchyEvent e)
Called when an ancestor of the source is moved.

Specified by:
ancestorMoved in interface HierarchyBoundsListener


"
9,HierarchyBoundsAdapter,2,void ancestorResized(HierarchyEvent e),True,Called when an ancestor of the source is resized.,"

ancestorResized
public void ancestorResized(HierarchyEvent e)
Called when an ancestor of the source is resized.

Specified by:
ancestorResized in interface HierarchyBoundsListener


"
9,HierarchyBoundsAdapter,3,void hierarchyChanged(HierarchyEvent e),False,,NULL
9,HierarchyBoundsAdapter,4,void hierarchyBoundsChanged(HierarchyEvent e),False,,NULL
9,HierarchyBoundsAdapter,5,void componentMoved(ComponentEvent e),False,,NULL
9,HierarchyBoundsAdapter,6,void componentResized(ComponentEvent e),False,,NULL
9,HierarchyBoundsAdapter,7,void componentShown(ComponentEvent e),False,,NULL
9,HierarchyBoundsAdapter,8,void componentHidden(ComponentEvent e),False,,NULL
9,HierarchyBoundsAdapter,9,void componentMoved(ContainerEvent e),False,,NULL
9,HierarchyBoundsAdapter,10,void componentRemoved(ContainerEvent e),False,,NULL
10,HierarchyEvent,1,int getChangeFlags(),False,,NULL
10,HierarchyEvent,2,Component getChanged(),True,Returns the Component at the top of the hierarchy which was changed.,"

getChanged
public Component getChanged()
Returns the Component at the top of the hierarchy which was
 changed.

Returns:
the changed Component


"
10,HierarchyEvent,3,Component[] getChangedPath(),False,,NULL
10,HierarchyEvent,4,Component getRoot(),False,,NULL
10,HierarchyEvent,5,int getID(),False,,NULL
11,InputEvent,1,boolean getAltGraphDown(),False,,NULL
11,InputEvent,2,boolean getControlDown(),False,,NULL
11,InputEvent,3,boolean getMetaDown(),False,,NULL
11,InputEvent,4,boolean getShiftDown(),False,,NULL
11,InputEvent,5,int getX(),False,,NULL
11,InputEvent,6,int getY(),False,,NULL
11,InputEvent,7,int getXOnScreen(),False,,NULL
11,InputEvent,8,int getYOnScreen(),False,,NULL
11,InputEvent,9,int getClickCount(),False,,NULL
11,InputEvent,10,int getButton(),False,,NULL
11,InputEvent,11,int getModifiers(),True,Returns the modifier mask for this event.,"

getModifiers
public int getModifiers()
Returns the modifier mask for this event.

"
11,InputEvent,12,int getModifiersEx(),True,Returns the extended modifier mask for this event.,"

getModifiersEx
public int getModifiersEx()
Returns the extended modifier mask for this event.
 
 Extended modifiers are the modifiers that ends with the _DOWN_MASK suffix,
 such as ALT_DOWN_MASK, BUTTON1_DOWN_MASK, and others.
 
 Extended modifiers represent the state of all modal keys,
 such as ALT, CTRL, META, and the mouse buttons just after
 the event occurred.
 
 For example, if the user presses button 1 followed by
 button 2, and then releases them in the same order,
 the following sequence of events is generated:
 
    MOUSE_PRESSED:  BUTTON1_DOWN_MASK
    MOUSE_PRESSED:  BUTTON1_DOWN_MASK | BUTTON2_DOWN_MASK
    MOUSE_RELEASED: BUTTON2_DOWN_MASK
    MOUSE_CLICKED:  BUTTON2_DOWN_MASK
    MOUSE_RELEASED:
    MOUSE_CLICKED:
 

 It is not recommended to compare the return value of this method
 using == because new modifiers can be added in the future.
 For example, the appropriate way to check that SHIFT and BUTTON1 are
 down, but CTRL is up is demonstrated by the following code:
 
    int onmask = SHIFT_DOWN_MASK | BUTTON1_DOWN_MASK;
    int offmask = CTRL_DOWN_MASK;
    if ((event.getModifiersEx() & (onmask | offmask)) == onmask) {
        ...
    }
 
 The above code will work even if new modifiers are added.

Since:
1.4


"
11,InputEvent,13,int getModifiersMask(),False,,NULL
11,InputEvent,14,int getModifiersExMask(),False,,NULL
11,InputEvent,15,int getModifiersMaskEx(),False,,NULL
11,InputEvent,16,int getModifiersExMaskEx(),False,,NULL
11,InputEvent,17,int getModifiersMaskExEx(),False,,NULL
11,InputEvent,18,int getModifiersExMaskExEx(),False,,NULL
11,InputEvent,19,int getModifiersMaskExExEx(),False,,NULL
11,InputEvent,20,int getModifiersExMaskExExEx(),False,,NULL
11,InputEvent,21,int getModifiersMaskExExExEx(),False,,NULL
11,InputEvent,22,int getModifiersExMaskExExExEx(),False,,NULL
11,InputEvent,23,int getModifiersMaskExExExExEx(),False,,NULL
11,InputEvent,24,int getModifiersExMaskExExExExEx(),False,,NULL
11,InputEvent,25,int getModifiersMaskExExExExExEx(),False,,NULL
11,InputEvent,26,int getModifiersExMaskExExExExExEx(),False,,NULL
11,InputEvent,27,int getModifiersMaskExExExExExExEx(),False,,NULL
11,InputEvent,28,int getModifiersExMaskExExExExExExEx(),False,,NULL
11,InputEvent,29,int getModifiersMaskExExExExExExExEx(),False,,NULL
11,InputEvent,30,int getModifiersExMaskExExExExExExExEx(),False,,NULL
11,InputEvent,31,int getModifiersMaskExExExExExExExExEx(),False,,NULL
11,InputEvent,32,int getModifiersExMaskExExExExExExExExEx(),False,,NULL
11,InputEvent,33,int getModifiersMaskExExExExExExExExExEx(),False,,NULL
11,InputEvent,34,int getModifiersExMaskExExExExExExExExExEx(),False,,NULL
11,InputEvent,35,int getModifiersMaskExExExExExExExExExExEx(),False,,NULL
11,InputEvent,36,int getModifiersExMaskExExExExExExExExExExEx(),False,,NULL
11,InputEvent,37,int getModifiersMaskExExExExExExExExExExExEx(),False,,NULL
11,InputEvent,38,int getModifiersExMaskExExExExExExExExExExExEx(),False,,NULL
11,InputEvent,39,int getModifiersMaskExExExExExExExExExExExExEx(),False,,NULL
11,InputEvent,40,int getModifiersExMaskExExExExExExExExExExExExEx(),False,,NULL
11,InputEvent,41,int getModifiersMaskExExExExExExExExExExExExExEx(),False,,NULL
11,InputEvent,42,int getModifiersExMaskExExExExExExExExExExExExExEx(),False,,NULL
11,InputEvent,43,int getModifiersMaskExExExExExExExExExExExExExExEx(),False,,NULL
11,InputEvent,44,int getModifiersExMaskExExExExExExExExExExExExExExEx(),False,,NULL
11,InputEvent,45,int getModifiersMaskExExExExExExExExExExExExExExExEx(),False,,NULL
11,InputEvent,46,int getModifiersExMaskExExExExExExExExExExExExExExExEx(),False,,NULL
11,InputEvent,47,int getModifiersMaskExExExExExExExExExExExExExExExExEx(),False,,NULL
11,InputEvent,48,int getModifiersExMaskExExExExExExExExExExExExExExExExEx(),False,,NULL
11,InputEvent,49,int getModifiersMaskExExExExExExExExExExExExExExExExExEx(),False,,NULL
11,InputEvent,50,int getModifiersExMaskExExExExExExExExExExExExExExExExExEx(),False,,NULL
11,InputEvent,51,int getModifiersMaskExExExExExExExExExExExExExExExExExExEx(),False,,NULL
11,InputEvent,52,int getModifiersExMaskExExExExExExExExExExExExExExExExExExEx(),False,,NULL
11,InputEvent,53,int getModifiersMaskExExExExExExExExExExExExExExExExExExExEx(),False,,NULL
11,InputEvent,54,int getModifiersExMaskExExExExExExExExExExExExExExExExExExExEx(),False,,NULL
11,InputEvent,55,int getModifiersMaskExExExExExExExExExExExExExExExExExExExExExEx(),False,,NULL
11,InputEvent,56,int getModifiersExMaskExExExExExExExExExExExExExExExExExExExExExEx(),False,,NULL
11,InputEvent,57,int getModifiersMaskExExExExExExExExExExExExExExExExExExExExExExEx(),False,,NULL
11,InputEvent,58,int getModifiersExMaskExExExExExExExExExExExExExExExExExExExExExExEx(),False,,NULL
11,InputEvent,59,int getModifiersMaskExExExExExExExExExExExExExExExExExExExExExExExEx(),False,,NULL
11,InputEvent,60,int getModifiersExMaskExExExExExExExExExExExExExExExExExExExExExExExEx(),False,,NULL
12,InputMethodEvent,1,boolean isCommitAction(),False,,NULL
12,InputMethodEvent,2,String getCommittedString(),False,,NULL
12,InputMethodEvent,3,String getDeletedString(),False,,NULL
12,InputMethodEvent,4,String getInsertedString(),False,,NULL
12,InputMethodEvent,5,String getReplacedString(),False,,NULL
12,InputMethodEvent,6,String getReplacedRangeStart(),False,,NULL
12,InputMethodEvent,7,String getReplacedRangeEnd(),False,,NULL
12,InputMethodEvent,8,String getComposition(),False,,NULL
12,InputMethodEvent,9,int getCursorPosition(),False,,NULL
12,InputMethodEvent,10,int getSelectionStart(),False,,NULL
12,InputMethodEvent,11,int getSelectionEnd(),False,,NULL
12,InputMethodEvent,12,int getModifiers(),False,,NULL
12,InputMethodEvent,13,int getKeyEventType(),False,,NULL
12,InputMethodEvent,14,int getKeyChar(),False,,NULL
12,InputMethodEvent,15,int getKeyLocation(),False,,NULL
12,InputMethodEvent,16,int getKeyCode(),False,,NULL
12,InputMethodEvent,17,int getKeyID(),False,,NULL
12,InputMethodEvent,18,int getKeyText(),False,,NULL
12,InputMethodEvent,19,int getKeyRune(),False,,NULL
12,InputMethodEvent,20,int getKeyModifiers(),False,,NULL
12,InputMethodEvent,21,int getKeyIndex(),False,,NULL
12,InputMethodEvent,22,int getKeyCharIndex(),False,,NULL
12,InputMethodEvent,23,int getKeyPlane(),False,,NULL
12,InputMethodEvent,24,int getKeyLevel(),False,,NULL
12,InputMethodEvent,25,int getKeySecondaryCode(),False,,NULL
12,InputMethodEvent,26,int getKeySecondaryLevel(),False,,NULL
12,InputMethodEvent,27,int getKeySecondaryPlane(),False,,NULL
12,InputMethodEvent,28,int getKeySecondaryVariant(),False,,NULL
12,InputMethodEvent,29,int getKeySecondaryLocation(),False,,NULL
12,InputMethodEvent,30,int getKeySecondaryModifiers(),False,,NULL
12,InputMethodEvent,31,int getKeySecondaryID(),False,,NULL
12,InputMethodEvent,32,int getKeySecondaryText(),False,,NULL
12,InputMethodEvent,33,int getKeySecondaryRune(),False,,NULL
12,InputMethodEvent,34,int getKeySecondaryIndex(),False,,NULL
12,InputMethodEvent,35,int getKeySecondaryCharIndex(),False,,NULL
12,InputMethodEvent,36,int getKeySecondaryPlane(),False,,NULL
12,InputMethodEvent,37,int getKeySecondaryLevel(),False,,NULL
12,InputMethodEvent,38,int getKeySecondaryVariant(),False,,NULL
12,InputMethodEvent,39,int getKeySecondaryLocation(),False,,NULL
12,InputMethodEvent,40,int getKeySecondaryModifiers(),False,,NULL
12,InputMethodEvent,41,int getKeySecondaryID(),False,,NULL
12,InputMethodEvent,42,int getKeySecondaryText(),False,,NULL
12,InputMethodEvent,43,int getKeySecondaryRune(),False,,NULL
12,InputMethodEvent,44,int getKeySecondaryIndex(),False,,NULL
12,InputMethodEvent,45,int getKeySecondaryCharIndex(),False,,NULL
12,InputMethodEvent,46,int getKeySecondaryPlane(),False,,NULL
12,InputMethodEvent,47,int getKeySecondaryLevel(),False,,NULL
12,InputMethodEvent,48,int getKeySecondaryVariant(),False,,NULL
12,InputMethodEvent,49,int getKeySecondaryLocation(),False,,NULL
12,InputMethodEvent,50,int getKeySecondaryModifiers(),False,,NULL
12,InputMethodEvent,51,int getKeySecondaryID(),False,,NULL
12,InputMethodEvent,52,int getKeySecondaryText(),False,,NULL
12,InputMethodEvent,53,int getKeySecondaryRune(),False,,NULL
12,InputMethodEvent,54,int getKeySecondaryIndex(),False,,NULL
12,InputMethodEvent,55,int getKeySecondaryCharIndex(),False,,NULL
12,InputMethodEvent,56,int getKeySecondaryPlane(),False,,NULL
12,InputMethodEvent,57,int getKeySecondaryLevel(),False,,NULL
12,InputMethodEvent,58,int getKeySecondaryVariant(),False,,NULL
12,InputMethodEvent,59,int getKeySecondaryLocation(),False,,NULL
12,InputMethodEvent,60,int getKeySecondaryModifiers(),False,,NULL
12,InputMethodEvent,61,int getKeySecondaryID(),False,,NULL
12,InputMethodEvent,62,int getKeySecondaryText(),False,,NULL
12,InputMethodEvent,63,int getKeySecondaryRune(),False,,NULL
12,InputMethodEvent,64,int getKeySecondaryIndex(),False,,NULL
12,InputMethodEvent,65,int getKeySecondaryCharIndex(),False,,NULL
12,InputMethodEvent,66,int getKeySecondaryPlane(),False,,NULL
12,InputMethodEvent,67,int getKeySecondaryLevel(),False,,NULL
12,InputMethodEvent,68,int getKeySecondaryVariant(),False,,NULL
12,InputMethodEvent,69,int getKeySecondaryLocation(),False,,NULL
12,InputMethodEvent,70,int getKeySecondaryModifiers(),False,,NULL
12,InputMethodEvent,71,int getKeySecondaryID(),False,,NULL
12,InputMethodEvent,72,int getKeySecondaryText(),False,,NULL
12,InputMethodEvent,73,int getKeySecondaryRune(),False,,NULL
12,InputMethodEvent,74,int getKeySecondaryIndex(),False,,NULL
13,InvocationEvent,1,"InvocationEvent(Object source, int id)",False,,NULL
13,InvocationEvent,2,int getID(),False,,NULL
13,InvocationEvent,3,Object getSource(),False,,NULL
13,InvocationEvent,4,void setSource(Object source),False,,NULL
13,InvocationEvent,5,void setID(int id),False,,NULL
14,ItemEvent,1,boolean isSelected(),False,,NULL
14,ItemEvent,2,int getStateChange(),True,Returns the type of state change (selected or deselected).,"

getStateChange
public int getStateChange()
Returns the type of state change (selected or deselected).

Returns:
an integer that indicates whether the item was selected
         or deselected
See Also:
SELECTED, 
DESELECTED


"
14,ItemEvent,3,ItemSelectable getItemSelectable(),True,Returns the originator of the event.,"

getItemSelectable
public ItemSelectable getItemSelectable()
Returns the originator of the event.

Returns:
the ItemSelectable object that originated the event.


"
14,ItemEvent,4,int getIndex(),False,,NULL
14,ItemEvent,5,"ItemEvent(Object source, int id, boolean selected, int stateChange, int index)",False,,NULL
15,KeyAdapter,1,void keyPressed(KeyEvent e),True,Invoked when a key has been pressed.,"

keyPressed
public void keyPressed(KeyEvent e)
Invoked when a key has been pressed.

Specified by:
keyPressed in interface KeyListener


"
15,KeyAdapter,2,void keyReleased(KeyEvent e),True,Invoked when a key has been released.,"

keyReleased
public void keyReleased(KeyEvent e)
Invoked when a key has been released.

Specified by:
keyReleased in interface KeyListener


"
15,KeyAdapter,3,void keyTyped(KeyEvent e),True,Invoked when a key has been typed.,"

keyTyped
public void keyTyped(KeyEvent e)
Invoked when a key has been typed.
 This event occurs when a key press is followed by a key release.

Specified by:
keyTyped in interface KeyListener


"
15,KeyAdapter,4,void keyPressed(KeyEvent e),True,Invoked when a key has been pressed.,"

keyPressed
public void keyPressed(KeyEvent e)
Invoked when a key has been pressed.

Specified by:
keyPressed in interface KeyListener


"
15,KeyAdapter,5,void keyReleased(KeyEvent e),True,Invoked when a key has been released.,"

keyReleased
public void keyReleased(KeyEvent e)
Invoked when a key has been released.

Specified by:
keyReleased in interface KeyListener


"
15,KeyAdapter,6,void keyTyped(KeyEvent e),True,Invoked when a key has been typed.,"

keyTyped
public void keyTyped(KeyEvent e)
Invoked when a key has been typed.
 This event occurs when a key press is followed by a key release.

Specified by:
keyTyped in interface KeyListener


"
15,KeyAdapter,7,void keyPressed(KeyEvent e),True,Invoked when a key has been pressed.,"

keyPressed
public void keyPressed(KeyEvent e)
Invoked when a key has been pressed.

Specified by:
keyPressed in interface KeyListener


"
15,KeyAdapter,8,void keyReleased(KeyEvent e),True,Invoked when a key has been released.,"

keyReleased
public void keyReleased(KeyEvent e)
Invoked when a key has been released.

Specified by:
keyReleased in interface KeyListener


"
15,KeyAdapter,9,void keyTyped(KeyEvent e),True,Invoked when a key has been typed.,"

keyTyped
public void keyTyped(KeyEvent e)
Invoked when a key has been typed.
 This event occurs when a key press is followed by a key release.

Specified by:
keyTyped in interface KeyListener


"
15,KeyAdapter,10,void keyPressed(KeyEvent e),True,Invoked when a key has been pressed.,"

keyPressed
public void keyPressed(KeyEvent e)
Invoked when a key has been pressed.

Specified by:
keyPressed in interface KeyListener


"
15,KeyAdapter,11,void keyReleased(KeyEvent e),True,Invoked when a key has been released.,"

keyReleased
public void keyReleased(KeyEvent e)
Invoked when a key has been released.

Specified by:
keyReleased in interface KeyListener


"
15,KeyAdapter,12,void keyTyped(KeyEvent e),True,Invoked when a key has been typed.,"

keyTyped
public void keyTyped(KeyEvent e)
Invoked when a key has been typed.
 This event occurs when a key press is followed by a key release.

Specified by:
keyTyped in interface KeyListener


"
15,KeyAdapter,13,void keyPressed(KeyEvent e),True,Invoked when a key has been pressed.,"

keyPressed
public void keyPressed(KeyEvent e)
Invoked when a key has been pressed.

Specified by:
keyPressed in interface KeyListener


"
15,KeyAdapter,14,void keyReleased(KeyEvent e),True,Invoked when a key has been released.,"

keyReleased
public void keyReleased(KeyEvent e)
Invoked when a key has been released.

Specified by:
keyReleased in interface KeyListener


"
15,KeyAdapter,15,void keyTyped(KeyEvent e),True,Invoked when a key has been typed.,"

keyTyped
public void keyTyped(KeyEvent e)
Invoked when a key has been typed.
 This event occurs when a key press is followed by a key release.

Specified by:
keyTyped in interface KeyListener


"
16,KeyEvent,1,int getKeyCode(),True,Returns the integer keyCode associated with the key in this event.,"

getKeyCode
public int getKeyCode()
Returns the integer keyCode associated with the key in this event.

Returns:
the integer code for an actual key on the keyboard.
         (For KEY_TYPED events, the keyCode is
         VK_UNDEFINED.)


"
16,KeyEvent,2,int getKeyLocation(),True,Returns the location of the key that originated this key event.,"

getKeyLocation
public int getKeyLocation()
Returns the location of the key that originated this key event.

 Some keys occur more than once on a keyboard, e.g. the left and
 right shift keys.  Additionally, some keys occur on the numeric
 keypad.  This provides a way of distinguishing such keys.

Returns:
the location of the key that was pressed or released.
         Always returns KEY_LOCATION_UNKNOWN for
         KEY_TYPED events.
Since:
1.4


"
16,KeyEvent,3,boolean isAltDown(),False,,NULL
16,KeyEvent,4,boolean isControlDown(),False,,NULL
16,KeyEvent,5,boolean isMetaDown(),False,,NULL
16,KeyEvent,6,boolean isShiftDown(),False,,NULL
16,KeyEvent,7,boolean isAltGraphDown(),False,,NULL
16,KeyEvent,8,boolean isExtendedKey(),False,,NULL
16,KeyEvent,9,boolean isKeyDown(int keyCode),False,,NULL
16,KeyEvent,10,boolean isKeyLocation(int keyLocation),False,,NULL
16,KeyEvent,11,boolean isKeyRepeat(),False,,NULL
16,KeyEvent,12,boolean isKeypad(),False,,NULL
16,KeyEvent,13,boolean isModifierKeyDown(int modifiers),False,,NULL
16,KeyEvent,14,"boolean isModifierKeyDown(int modifiers, int keyCode)",False,,NULL
16,KeyEvent,15,"boolean isModifierKeyDown(int modifiers, int keyCode, int keyLocation)",False,,NULL
16,KeyEvent,16,"boolean isModifierKeyDown(int modifiers, int keyCode, int keyLocation, int keyChar)",False,,NULL
16,KeyEvent,17,"boolean isModifierKeyDown(int modifiers, int keyCode, int keyLocation, int keyChar, int keyChar2)",False,,NULL
16,KeyEvent,18,"boolean isModifierKeyDown(int modifiers, int keyCode, int keyLocation, int keyChar, int keyChar2, int keyChar3)",False,,NULL
16,KeyEvent,19,"boolean isModifierKeyDown(int modifiers, int keyCode, int keyLocation, int keyChar, int keyChar2, int keyChar3, int keyChar4)",False,,NULL
16,KeyEvent,20,"boolean isModifierKeyDown(int modifiers, int keyCode, int keyLocation, int keyChar, int keyChar2, int keyChar3, int keyChar4, int keyChar5)",False,,NULL
17,MouseAdapter,1,void mouseClicked(MouseEvent e),True,Invoked when the mouse button has been clicked (pressed and released) on a component.,"

mouseClicked
public void mouseClicked(MouseEvent e)
Invoked when the mouse button has been clicked (pressed
 and released) on a component.

Specified by:
mouseClicked in interface MouseListener


"
17,MouseAdapter,2,void mousePressed(MouseEvent e),True,Invoked when a mouse button has been pressed on a component.,"

mousePressed
public void mousePressed(MouseEvent e)
Invoked when a mouse button has been pressed on a component.

Specified by:
mousePressed in interface MouseListener


"
17,MouseAdapter,3,void mouseReleased(MouseEvent e),True,Invoked when a mouse button has been released on a component.,"

mouseReleased
public void mouseReleased(MouseEvent e)
Invoked when a mouse button has been released on a component.

Specified by:
mouseReleased in interface MouseListener


"
17,MouseAdapter,4,void mouseEntered(MouseEvent e),True,Invoked when the mouse enters a component.,"

mouseEntered
public void mouseEntered(MouseEvent e)
Invoked when the mouse enters a component.

Specified by:
mouseEntered in interface MouseListener


"
17,MouseAdapter,5,void mouseExited(MouseEvent e),True,Invoked when the mouse exits a component.,"

mouseExited
public void mouseExited(MouseEvent e)
Invoked when the mouse exits a component.

Specified by:
mouseExited in interface MouseListener


"
18,MouseEvent,1,int getX(),True,Returns the horizontal x position of the event relative to the source component.,"

getX
public int getX()
Returns the horizontal x position of the event relative to the
 source component.

Returns:
x  an integer indicating horizontal position relative to
            the component


"
18,MouseEvent,2,int getY(),True,Returns the vertical y position of the event relative to the source component.,"

getY
public int getY()
Returns the vertical y position of the event relative to the
 source component.

Returns:
y  an integer indicating vertical position relative to
            the component


"
18,MouseEvent,3,int getClickCount(),True,Returns the number of mouse clicks associated with this event.,"

getClickCount
public int getClickCount()
Returns the number of mouse clicks associated with this event.

Returns:
integer value for the number of clicks


"
18,MouseEvent,4,int getButton(),True,"Returns which, if any, of the mouse buttons has changed state.","

getButton
public int getButton()
Returns which, if any, of the mouse buttons has changed state.
 The returned value is ranged
 from 0 to the MouseInfo.getNumberOfButtons()
 value.
 The returned value includes at least the following constants:
 
 NOBUTTON
 BUTTON1
 BUTTON2
 BUTTON3

 It is allowed to use those constants to compare with the returned button number in the application.
 For example,
 
 if (anEvent.getButton() == MouseEvent.BUTTON1) {
 
 In particular, for a mouse with one, two, or three buttons this method may return the following values:
 
 0 (NOBUTTON)
  1 (BUTTON1)
  2 (BUTTON2)
  3 (BUTTON3)
 
 Button numbers greater then BUTTON3 have no constant identifier. So if a mouse with five buttons is
 installed, this method may return the following values:
 
 0 (NOBUTTON)
  1 (BUTTON1)
  2 (BUTTON2)
  3 (BUTTON3)
  4
  5
 

 Note: If support for extended mouse buttons is disabled by Java
 then the AWT event subsystem does not produce mouse events for the extended mouse
 buttons. So it is not expected that this method returns anything except NOBUTTON, BUTTON1,
 BUTTON2, BUTTON3.

Returns:
one of the values from 0 to MouseInfo.getNumberOfButtons()
         if support for the extended mouse buttons is enabled by Java.
         That range includes NOBUTTON, BUTTON1, BUTTON2, BUTTON3;
         
NOBUTTON, BUTTON1, BUTTON2 or BUTTON3
         if support for the extended mouse buttons is disabled by Java
Since:
1.4
See Also:
Toolkit.areExtraMouseButtonsEnabled(), 
MouseInfo.getNumberOfButtons(), 
MouseEvent(Component, int, long, int, int, int, int, int, int, boolean, int), 
InputEvent.getMaskForButton(int)


"
18,MouseEvent,5,int getModifiers(),False,,NULL
18,MouseEvent,6,int getID(),False,,NULL
18,MouseEvent,7,Component getComponent(),False,,NULL
18,MouseEvent,8,Object getSource(),False,,NULL
18,MouseEvent,9,void consume(),False,,NULL
18,MouseEvent,10,"void setLocation(int x, int y)",False,,NULL
18,MouseEvent,11,void setID(int id),False,,NULL
18,MouseEvent,12,void setWhen(long when),False,,NULL
18,MouseEvent,13,void setModifiers(int modifiers),False,,NULL
18,MouseEvent,14,void setComponent(Component c),False,,NULL
18,MouseEvent,15,void setSource(Object source),False,,NULL
18,MouseEvent,16,void setButton(int button),False,,NULL
18,MouseEvent,17,void setClickCount(int clickCount),False,,NULL
18,MouseEvent,18,void setModifiersEx(int modifiersEx),False,,NULL
18,MouseEvent,19,void setModifiers(int modifiers),False,,NULL
18,MouseEvent,20,void setModifiersEx(int modifiersEx),False,,NULL
18,MouseEvent,21,void setModifiers(int modifiers),False,,NULL
18,MouseEvent,22,void setModifiersEx(int modifiersEx),False,,NULL
18,MouseEvent,23,void setModifiers(int modifiers),False,,NULL
18,MouseEvent,24,void setModifiersEx(int modifiersEx),False,,NULL
18,MouseEvent,25,void setModifiers(int modifiers),False,,NULL
18,MouseEvent,26,void setModifiersEx(int modifiersEx),False,,NULL
18,MouseEvent,27,void setModifiers(int modifiers),False,,NULL
18,MouseEvent,28,void setModifiersEx(int modifiersEx),False,,NULL
18,MouseEvent,29,void setModifiers(int modifiers),False,,NULL
18,MouseEvent,30,void setModifiersEx(int modifiersEx),False,,NULL
18,MouseEvent,31,void setModifiers(int modifiers),False,,NULL
18,MouseEvent,32,void setModifiersEx(int modifiersEx),False,,NULL
18,MouseEvent,33,void setModifiers(int modifiers),False,,NULL
18,MouseEvent,34,void setModifiersEx(int modifiersEx),False,,NULL
18,MouseEvent,35,void setModifiers(int modifiers),False,,NULL
18,MouseEvent,36,void setModifiersEx(int modifiersEx),False,,NULL
18,MouseEvent,37,void setModifiers(int modifiers),False,,NULL
18,MouseEvent,38,void setModifiersEx(int modifiersEx),False,,NULL
18,MouseEvent,39,void setModifiers(int modifiers),False,,NULL
18,MouseEvent,40,void setModifiersEx(int modifiersEx),False,,NULL
18,MouseEvent,41,void setModifiers(int modifiers),False,,NULL
18,MouseEvent,42,void setModifiersEx(int modifiersEx),False,,NULL
18,MouseEvent,43,void setModifiers(int modifiers),False,,NULL
18,MouseEvent,44,void setModifiersEx(int modifiersEx),False,,NULL
18,MouseEvent,45,void setModifiers(int modifiers),False,,NULL
18,MouseEvent,46,void setModifiersEx(int modifiersEx),False,,NULL
18,MouseEvent,47,void setModifiers(int modifiers),False,,NULL
18,MouseEvent,48,void setModifiersEx(int modifiersEx),False,,NULL
18,MouseEvent,49,void setModifiers(int modifiers),False,,NULL
18,MouseEvent,50,void setModifiersEx(int modifiersEx),False,,NULL
18,MouseEvent,51,void setModifiers(int modifiers),False,,NULL
18,MouseEvent,52,void setModifiersEx(int modifiersEx),False,,NULL
18,MouseEvent,53,void setModifiers(int modifiers),False,,NULL
18,MouseEvent,54,void setModifiersEx(int modifiersEx),False,,NULL
18,MouseEvent,55,void setModifiers(int modifiers),False,,NULL
18,MouseEvent,56,void setModifiersEx(int modifiersEx),False,,NULL
18,MouseEvent,57,void setModifiers(int modifiers),False,,NULL
18,MouseEvent,58,void setModifiersEx(int modifiersEx),False,,NULL
18,MouseEvent,59,void setModifiers(int modifiers),False,,NULL
18,MouseEvent,60,void setModifiersEx(int modifiersEx),False,,NULL
18,MouseEvent,61,void setModifiers(int modifiers),False,,NULL
18,MouseEvent,62,void setModifiersEx(int modifiersEx),False,,NULL
18,MouseEvent,63,void setModifiers(int modifiers),False,,NULL
18,MouseEvent,64,void setModifiersEx(int modifiersEx),False,,NULL
18,MouseEvent,65,void setModifiers(int modifiers),False,,NULL
18,MouseEvent,66,void setModifiersEx(int modifiersEx),False,,NULL
18,MouseEvent,67,void setModifiers(int modifiers),False,,NULL
18,MouseEvent,68,void setModifiersEx(int modifiersEx),False,,NULL
18,MouseEvent,69,void setModifiers(int modifiers),False,,NULL
18,MouseEvent,70,void setModifiersEx(int modifiersEx),False,,NULL
18,MouseEvent,71,void setModifiers(int modifiers),False,,NULL
18,MouseEvent,72,void setModifiersEx(int modifiersEx),False,,NULL
18,MouseEvent,73,void setModifiers(int modifiers),False,,NULL
18,MouseEvent,74,void setModifiersEx(int modifiersEx),False,,NULL
19,MouseMotionAdapter,1,void mouseDragged(MouseEvent e),True,Invoked when a mouse button is pressed on a component and then dragged.,"

mouseDragged
public void mouseDragged(MouseEvent e)
Invoked when a mouse button is pressed on a component and then
 dragged.  Mouse drag events will continue to be delivered to
 the component where the first originated until the mouse button is
 released (regardless of whether the mouse position is within the
 bounds of the component).

Specified by:
mouseDragged in interface MouseMotionListener


"
19,MouseMotionAdapter,2,void mouseMoved(MouseEvent e),True,Invoked when the mouse button has been moved on a component (with no buttons no down).,"

mouseMoved
public void mouseMoved(MouseEvent e)
Invoked when the mouse button has been moved on a component
 (with no buttons no down).

Specified by:
mouseMoved in interface MouseMotionListener


"
19,MouseMotionAdapter,3,void mouseEntered(MouseEvent e),False,,NULL
19,MouseMotionAdapter,4,void mouseExited(MouseEvent e),False,,NULL
19,MouseMotionAdapter,5,void mouseClicked(MouseEvent e),False,,NULL
20,MouseWheelEvent,1,int getScrollType(),True,Returns the type of scrolling that should take place in response to this event.,"

getScrollType
public int getScrollType()
Returns the type of scrolling that should take place in response to this
 event.  This is determined by the native platform.  Legal values are:
 
 MouseWheelEvent.WHEEL_UNIT_SCROLL
  MouseWheelEvent.WHEEL_BLOCK_SCROLL
 

Returns:
either MouseWheelEvent.WHEEL_UNIT_SCROLL or
  MouseWheelEvent.WHEEL_BLOCK_SCROLL, depending on the configuration of
  the native platform.
See Also:
Adjustable.getUnitIncrement(), 
Adjustable.getBlockIncrement(), 
Scrollable.getScrollableUnitIncrement(java.awt.Rectangle, int, int), 
Scrollable.getScrollableBlockIncrement(java.awt.Rectangle, int, int)


"
20,MouseWheelEvent,2,int getUnitsToScroll(),True,This is a convenience method to aid in the implementation of the common-case MouseWheelListener - to scroll a ScrollPane or JScrollPane by an amount which conforms to the platform settings.,"

getUnitsToScroll
public int getUnitsToScroll()
This is a convenience method to aid in the implementation of
 the common-case MouseWheelListener - to scroll a ScrollPane or
 JScrollPane by an amount which conforms to the platform settings.
 (Note, however, that ScrollPane and
 JScrollPane already have this functionality built in.)
 
 This method returns the number of units to scroll when scroll type is
 MouseWheelEvent.WHEEL_UNIT_SCROLL, and should only be called if
 getScrollType returns MouseWheelEvent.WHEEL_UNIT_SCROLL.
 
 Direction of scroll, amount of wheel movement,
 and platform settings for wheel scrolling are all accounted for.
 This method does not and cannot take into account value of the
 Adjustable/Scrollable unit increment, as this will vary among
 scrolling components.
 
 A simplified example of how this method might be used in a
 listener:
 
  mouseWheelMoved(MouseWheelEvent event) {
      ScrollPane sp = getScrollPaneFromSomewhere();
      Adjustable adj = sp.getVAdjustable()
      if (MouseWheelEvent.getScrollType() == WHEEL_UNIT_SCROLL) {
          int totalScrollAmount =
              event.getUnitsToScroll() *
              adj.getUnitIncrement();
          adj.setValue(adj.getValue() + totalScrollAmount);
      }
  }
 

Returns:
the number of units to scroll based on the direction and amount
  of mouse wheel rotation, and on the wheel scrolling settings of the
  native platform
See Also:
getScrollType(), 
getScrollAmount(), 
MouseWheelListener, 
Adjustable, 
Adjustable.getUnitIncrement(), 
Scrollable, 
Scrollable.getScrollableUnitIncrement(java.awt.Rectangle, int, int), 
ScrollPane, 
ScrollPane.setWheelScrollingEnabled(boolean), 
JScrollPane, 
JScrollPane.setWheelScrollingEnabled(boolean)


"
20,MouseWheelEvent,3,int getWheelRotation(),True,"Returns the number of ""clicks"" the mouse wheel was rotated, as an integer.","

getWheelRotation
public int getWheelRotation()
Returns the number of ""clicks"" the mouse wheel was rotated, as an integer.
 A partial rotation may occur if the mouse supports a high-resolution wheel.
 In this case, the method returns zero until a full ""click"" has been accumulated.

Returns:
negative values if the mouse wheel was rotated up/away from
 the user, and positive values if the mouse wheel was rotated down/
 towards the user
See Also:
getPreciseWheelRotation()


"
20,MouseWheelEvent,4,int getScrollAmount(),True,Returns the number of units that should be scrolled per click of mouse wheel rotation.,"

getScrollAmount
public int getScrollAmount()
Returns the number of units that should be scrolled per
 click of mouse wheel rotation.
 Only valid if getScrollType returns
 MouseWheelEvent.WHEEL_UNIT_SCROLL

Returns:
number of units to scroll, or an undefined value if
  getScrollType returns
  MouseWheelEvent.WHEEL_BLOCK_SCROLL
See Also:
getScrollType()


"
20,MouseWheelEvent,5,int getScrollPrecision(),False,,NULL
21,PaintEvent,1,"PaintEvent(Component c, Graphics g)",False,,NULL
21,PaintEvent,2,Graphics getGraphics(),False,,NULL
21,PaintEvent,3,Component getComponent(),False,,NULL
21,PaintEvent,4,void setComponent(Component c),False,,NULL
21,PaintEvent,5,void setGraphics(Graphics g),False,,NULL
22,TextEvent,1,"TextEvent(Object source, String text)",False,,NULL
22,TextEvent,2,String getText(),False,,NULL
22,TextEvent,3,Object getSource(),False,,NULL
22,TextEvent,4,void setSource(Object source),False,,NULL
22,TextEvent,5,void setText(String text),False,,NULL
23,WindowAdapter,1,void windowActivated(WindowEvent e),True,Invoked when a window is activated.,"

windowActivated
public void windowActivated(WindowEvent e)
Invoked when a window is activated.

Specified by:
windowActivated in interface WindowListener


"
23,WindowAdapter,2,void windowClosed(WindowEvent e),True,Invoked when a window has been closed.,"

windowClosed
public void windowClosed(WindowEvent e)
Invoked when a window has been closed.

Specified by:
windowClosed in interface WindowListener


"
23,WindowAdapter,3,void windowClosing(WindowEvent e),True,Invoked when a window is in the process of being closed.,"

windowClosing
public void windowClosing(WindowEvent e)
Invoked when a window is in the process of being closed.
 The close operation can be overridden at this point.

Specified by:
windowClosing in interface WindowListener


"
23,WindowAdapter,4,void windowDeactivated(WindowEvent e),True,Invoked when a window is de-activated.,"

windowDeactivated
public void windowDeactivated(WindowEvent e)
Invoked when a window is de-activated.

Specified by:
windowDeactivated in interface WindowListener


"
23,WindowAdapter,5,void windowDeiconified(WindowEvent e),True,Invoked when a window is de-iconified.,"

windowDeiconified
public void windowDeiconified(WindowEvent e)
Invoked when a window is de-iconified.

Specified by:
windowDeiconified in interface WindowListener


"
23,WindowAdapter,6,void windowIconified(WindowEvent e),True,Invoked when a window is iconified.,"

windowIconified
public void windowIconified(WindowEvent e)
Invoked when a window is iconified.

Specified by:
windowIconified in interface WindowListener
See Also:
Frame.setIconImage(java.awt.Image)


"
23,WindowAdapter,7,void windowOpened(WindowEvent e),True,Invoked when a window has been opened.,"

windowOpened
public void windowOpened(WindowEvent e)
Invoked when a window has been opened.

Specified by:
windowOpened in interface WindowListener


"
23,WindowAdapter,8,void windowGainedFocus(WindowEvent e),True,"Invoked when the Window is set to be the focused Window, which means that the Window, or one of its subcomponents, will receive keyboard events.","

windowGainedFocus
public void windowGainedFocus(WindowEvent e)
Invoked when the Window is set to be the focused Window, which means
 that the Window, or one of its subcomponents, will receive keyboard
 events.

Specified by:
windowGainedFocus in interface WindowFocusListener
Since:
1.4


"
23,WindowAdapter,9,void windowLostFocus(WindowEvent e),True,"Invoked when the Window is no longer the focused Window, which means that keyboard events will no longer be delivered to the Window or any of its subcomponents.","

windowLostFocus
public void windowLostFocus(WindowEvent e)
Invoked when the Window is no longer the focused Window, which means
 that keyboard events will no longer be delivered to the Window or any of
 its subcomponents.

Specified by:
windowLostFocus in interface WindowFocusListener
Since:
1.4


"
23,WindowAdapter,10,void windowStateChanged(WindowEvent e),True,Invoked when a window state is changed.,"

windowStateChanged
public void windowStateChanged(WindowEvent e)
Invoked when a window state is changed.

Specified by:
windowStateChanged in interface WindowStateListener
Since:
1.4


"
24,WindowEvent,1,"WindowEvent(Component source, int id)",False,,NULL
24,WindowEvent,2,getID(),False,,NULL
24,WindowEvent,3,getSource(),False,,NULL
24,WindowEvent,4,getWindow(),False,,NULL
24,WindowEvent,5,getModifiers(),False,,NULL
