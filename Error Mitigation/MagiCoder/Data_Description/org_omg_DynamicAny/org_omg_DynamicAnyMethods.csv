ClassName,Method,Return Type,Description,Full Description
_DynAnyFactoryStub,_ids(),String[],Retrieves a string array containing the repository identifiers supported by this ObjectImpl object.,"

_ids
public String[] _ids()
Description copied from class: ObjectImpl
Retrieves a string array containing the repository identifiers
 supported by this ObjectImpl object.  For example,
 for a stub, this method returns information about all the
 interfaces supported by the stub.

Specified by:
_ids in class ObjectImpl
Returns:
the array of all repository identifiers supported by this
         ObjectImpl instance


"
_DynAnyFactoryStub,create_dyn_any_from_type_code(TypeCode type),DynAny,Creates a DynAny from a TypeCode.,"

create_dyn_any_from_type_code
public DynAny create_dyn_any_from_type_code(TypeCode type)
                                     throws InconsistentTypeCode
Creates a DynAny from a TypeCode. Depending on the TypeCode, the created object may be of type DynAny,
 or one of its derived types, such as DynStruct. The returned reference can be narrowed to the derived type.
 In all cases, a DynAny constructed from a TypeCode has an initial default value.
 The default values of basic types are:
 
false for boolean
 zero for numeric types
 zero for types octet, char, and wchar
 the empty string for string and wstring
 null for object references
 a type code with a TCKind value of tk_null for type codes
 for any values, an any containing a type code with a TCKind value of tk_null type and no value
 
 For complex types, creation of the corresponding DynAny assigns a default value as follows:
 
For DynSequence it sets the current position to -1 and creates an empty sequence.
 For DynEnum it sets the current position to -1 and sets the value of the enumerator
     to the first enumerator value indicated by the TypeCode.
 For DynFixed it sets the current position to -1 and sets the value zero.
 For DynStruct it sets the current position to -1 for empty exceptions
     and to zero for all other TypeCodes. The members (if any) are (recursively) initialized
     to their default values.
 For DynArray sets the current position to zero and (recursively) initializes elements
     to their default value.
 For DynUnion sets the current position to zero. The discriminator value is set
     to a value consistent with the first named member of the union. That member is activated and (recursively)
     initialized to its default value.
 For DynValue and DynValueBox it initializes to a null value.
 

Specified by:
create_dyn_any_from_type_code in interface DynAnyFactoryOperations
Throws:
InconsistentTypeCode


"
_DynAnyFactoryStub,create_dyn_any(Any value),DynAny,Creates a new DynAny object from an any value.,"

create_dyn_any
public DynAny create_dyn_any(Any value)
                      throws InconsistentTypeCode
Creates a new DynAny object from an any value.
 A copy of the TypeCode associated with the any value is assigned to the resulting DynAny object.
 The value associated with the DynAny object is a copy of the value in the original any.
 The current position of the created DynAny is set to zero if the passed value has components,
 to -1 otherwise

Specified by:
create_dyn_any in interface DynAnyFactoryOperations
Throws:
InconsistentTypeCode - if value has a TypeCode with a TCKind of tk_Principal,
 tk_native, or tk_abstract_interface


"
_DynAnyStub,_ids(),String[],Retrieves a string array containing the repository identifiers supported by this ObjectImpl object.,"

_ids
public String[] _ids()
Description copied from class: ObjectImpl
Retrieves a string array containing the repository identifiers
 supported by this ObjectImpl object.  For example,
 for a stub, this method returns information about all the
 interfaces supported by the stub.

Specified by:
_ids in class ObjectImpl
Returns:
the array of all repository identifiers supported by this
         ObjectImpl instance


"
_DynAnyStub,assign(DynAny dyn_any),void,Initializes the value associated with a DynAny object with the value associated with another DynAny object.,"

assign
public void assign(DynAny dyn_any)
            throws TypeMismatch
Initializes the value associated with a DynAny object with the value
 associated with another DynAny object.
 The current position of the target DynAny is set to zero for values that have components
 and to -1 for values that do not have components.

Specified by:
assign in interface DynAnyOperations
Parameters:
dyn_any - 
Throws:
TypeMismatch - if the type of the passed DynAny is not equivalent to the type of target DynAny


"
_DynAnyStub,component_count(),int,Returns the number of components of a DynAny.,"

component_count
public int component_count()
Returns the number of components of a DynAny.
 For a DynAny without components, it returns zero.
 The operation only counts the components at the top level.
 For example, if component_count is invoked on a DynStruct with a single member,
 the return value is 1, irrespective of the type of the member.
 
For sequences, the operation returns the current number of elements.
 For structures, exceptions, and value types, the operation returns the number of members.
 For arrays, the operation returns the number of elements.
 For unions, the operation returns 2 if the discriminator indicates that a named member is active,
 otherwise, it returns 1.
 For DynFixed and DynEnum, the operation returns zero.
 

Specified by:
component_count in interface DynAnyOperations


"
_DynAnyStub,copy(),DynAny,Creates a new DynAny object whose value is a deep copy of the DynAny on which it is invoked.,"

copy
public DynAny copy()
Creates a new DynAny object whose value is a deep copy of the DynAny on which it is invoked.
 The operation is polymorphic, that is, invoking it on one of the types derived from DynAny,
 such as DynStruct, creates the derived type but returns its reference as the DynAny base type.

Specified by:
copy in interface DynAnyOperations
Returns:
a deep copy of the DynAny object


"
_DynAnyStub,current_component(),DynAny,Returns the DynAny for the component at the current position.,"

current_component
public DynAny current_component()
                         throws TypeMismatch
Returns the DynAny for the component at the current position.
 It does not advance the current position, so repeated calls to current_component
 without an intervening call to rewind, next, or seek return the same component.
 The returned DynAny object reference can be used to get/set the value of the current component.
 If the current component represents a complex type, the returned reference can be narrowed
 based on the TypeCode to get the interface corresponding to the to the complex type.
 Calling current_component on a DynAny that cannot have components,
 such as a DynEnum or an empty exception, raises TypeMismatch.
 Calling current_component on a DynAny whose current position is -1 returns a nil reference.
 The iteration operations, together with current_component, can be used
 to dynamically compose an any value. After creating a dynamic any, such as a DynStruct,
 current_component and next can be used to initialize all the components of the value.
 Once the dynamic value is completely initialized, to_any creates the corresponding any value.

Specified by:
current_component in interface DynAnyOperations
Throws:
TypeMismatch - If called on a DynAny that cannot have components,
 such as a DynEnum or an empty exception


"
_DynAnyStub,destroy(),void,Destroys a DynAny object.,"

destroy
public void destroy()
Destroys a DynAny object.
 This operation frees any resources used to represent the data value associated with a DynAny object.
 It must be invoked on references obtained from one of the creation operations on the ORB interface
 or on a reference returned by DynAny.copy() to avoid resource leaks.
 Invoking destroy on component DynAny objects (for example, on objects returned by the
 current_component operation) does nothing.
 Destruction of a DynAny object implies destruction of all DynAny objects obtained from it.
 That is, references to components of a destroyed DynAny become invalid.
 Invocations on such references raise OBJECT_NOT_EXIST.
 It is possible to manipulate a component of a DynAny beyond the life time of the DynAny
 from which the component was obtained by making a copy of the component with the copy operation
 before destroying the DynAny from which the component was obtained.

Specified by:
destroy in interface DynAnyOperations


"
_DynAnyStub,equal(DynAny dyn_any),boolean,Compares two DynAny values for equality.,"

equal
public boolean equal(DynAny dyn_any)
Compares two DynAny values for equality.
 Two DynAny values are equal if their TypeCodes are equivalent and, recursively, all component DynAnys
 have equal values.
 The current position of the two DynAnys being compared has no effect on the result of equal.

Specified by:
equal in interface DynAnyOperations
Returns:
true of the DynAnys are equal, false otherwise


"
_DynAnyStub,from_any(Any value),void,Initializes the value associated with a DynAny object with the value contained in an any.,"

from_any
public void from_any(Any value)
              throws TypeMismatch,
                     InvalidValue
Initializes the value associated with a DynAny object with the value contained in an any.
 The current position of the target DynAny is set to zero for values that have components
 and to -1 for values that do not have components.

Specified by:
from_any in interface DynAnyOperations
Throws:
TypeMismatch - if the type of the passed Any is not equivalent to the type of target DynAny
InvalidValue - if the passed Any does not contain a legal value (such as a null string)


"
_DynAnyStub,get_any(),Any,Extracts an Any value contained in the Any represented by this DynAny.,"

get_any
public Any get_any()
            throws TypeMismatch,
                   InvalidValue
Extracts an Any value contained in the Any represented by this DynAny.

Specified by:
get_any in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynAnyStub,get_boolean(),boolean,Extracts the boolean value from this DynAny.,"

get_boolean
public boolean get_boolean()
                    throws TypeMismatch,
                           InvalidValue
Extracts the boolean value from this DynAny.

Specified by:
get_boolean in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynAnyStub,get_char(),char,Extracts the char value from this DynAny.,"

get_char
public char get_char()
              throws TypeMismatch,
                     InvalidValue
Extracts the char value from this DynAny.

Specified by:
get_char in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynAnyStub,get_double(),double,Extracts the double value from this DynAny.,"

get_double
public double get_double()
                  throws TypeMismatch,
                         InvalidValue
Extracts the double value from this DynAny.

Specified by:
get_double in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynAnyStub,get_dyn_any(),DynAny,Extracts the Any value contained in the Any represented by this DynAny and returns it wrapped into a new DynAny.,"

get_dyn_any
public DynAny get_dyn_any()
                   throws TypeMismatch,
                          InvalidValue
Extracts the Any value contained in the Any represented by this DynAny and returns it wrapped
 into a new DynAny.

Specified by:
get_dyn_any in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynAnyStub,get_float(),float,Extracts the float value from this DynAny.,"

get_float
public float get_float()
                throws TypeMismatch,
                       InvalidValue
Extracts the float value from this DynAny.

Specified by:
get_float in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynAnyStub,get_long(),int,Extracts the integer value from this DynAny.,"

get_long
public int get_long()
             throws TypeMismatch,
                    InvalidValue
Extracts the integer value from this DynAny. The IDL long data type is mapped to the Java int data type.

Specified by:
get_long in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynAnyStub,get_longlong(),long,Extracts the long value from this DynAny.,"

get_longlong
public long get_longlong()
                  throws TypeMismatch,
                         InvalidValue
Extracts the long value from this DynAny. The IDL long long data type is mapped to the Java long data type.

Specified by:
get_longlong in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynAnyStub,get_octet(),byte,Extracts the byte value from this DynAny.,"

get_octet
public byte get_octet()
               throws TypeMismatch,
                      InvalidValue
Extracts the byte value from this DynAny. The IDL octet data type is mapped to the Java byte data type.

Specified by:
get_octet in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynAnyStub,get_reference(),Object,Extracts the reference to a CORBA Object from this DynAny.,"

get_reference
public Object get_reference()
                     throws TypeMismatch,
                            InvalidValue
Extracts the reference to a CORBA Object from this DynAny.

Specified by:
get_reference in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynAnyStub,get_short(),short,Extracts the short value from this DynAny.,"

get_short
public short get_short()
                throws TypeMismatch,
                       InvalidValue
Extracts the short value from this DynAny.

Specified by:
get_short in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynAnyStub,get_string(),String,Extracts the string value from this DynAny.,"

get_string
public String get_string()
                  throws TypeMismatch,
                         InvalidValue
Extracts the string value from this DynAny.
 Both bounded and unbounded strings are extracted using this method.

Specified by:
get_string in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynAnyStub,get_typecode(),TypeCode,Extracts the TypeCode object from this DynAny.,"

get_typecode
public TypeCode get_typecode()
                      throws TypeMismatch,
                             InvalidValue
Extracts the TypeCode object from this DynAny.

Specified by:
get_typecode in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynAnyStub,get_ulong(),int,Extracts the integer value from this DynAny.,"

get_ulong
public int get_ulong()
              throws TypeMismatch,
                     InvalidValue
Extracts the integer value from this DynAny. The IDL ulong data type is mapped to the Java int data type.

Specified by:
get_ulong in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynAnyStub,get_ulonglong(),long,Extracts the long value from this DynAny.,"

get_ulonglong
public long get_ulonglong()
                   throws TypeMismatch,
                          InvalidValue
Extracts the long value from this DynAny.
 The IDL unsigned long long data type is mapped to the Java long data type.

Specified by:
get_ulonglong in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynAnyStub,get_ushort(),short,Extracts the short value from this DynAny.,"

get_ushort
public short get_ushort()
                 throws TypeMismatch,
                        InvalidValue
Extracts the short value from this DynAny. The IDL ushort data type is mapped to the Java short data type.

Specified by:
get_ushort in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynAnyStub,get_val(),Serializable,Extracts a Serializable object from this DynAny.,"

get_val
public Serializable get_val()
                     throws TypeMismatch,
                            InvalidValue
Extracts a Serializable object from this DynAny.
 The IDL ValueBase type is mapped to the Java Serializable type.

Specified by:
get_val in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynAnyStub,get_wchar(),char,Extracts the long value from this DynAny.,"

get_wchar
public char get_wchar()
               throws TypeMismatch,
                      InvalidValue
Extracts the long value from this DynAny. The IDL wchar data type is mapped to the Java char data type.

Specified by:
get_wchar in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynAnyStub,get_wstring(),String,Extracts the string value from this DynAny.,"

get_wstring
public String get_wstring()
                   throws TypeMismatch,
                          InvalidValue
Extracts the string value from this DynAny.
 Both bounded and unbounded strings are extracted using this method.

Specified by:
get_wstring in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue


"
_DynAnyStub,insert_any(Any value),void,Inserts an Any value into the Any represented by this DynAny.,"

insert_any
public void insert_any(Any value)
                throws TypeMismatch,
                       InvalidValue
Inserts an Any value into the Any represented by this DynAny.

Specified by:
insert_any in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynAnyStub,insert_boolean(boolean value),void,Inserts a boolean value into the DynAny.,"

insert_boolean
public void insert_boolean(boolean value)
                    throws TypeMismatch,
                           InvalidValue
Inserts a boolean value into the DynAny.

Specified by:
insert_boolean in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynAnyStub,insert_char(char value),void,Inserts a char value into the DynAny.,"

insert_char
public void insert_char(char value)
                 throws TypeMismatch,
                        InvalidValue
Inserts a char value into the DynAny.

Specified by:
insert_char in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynAnyStub,insert_double(double value),void,Inserts a double value into the DynAny.,"

insert_double
public void insert_double(double value)
                   throws TypeMismatch,
                          InvalidValue
Inserts a double value into the DynAny.

Specified by:
insert_double in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynAnyStub,insert_dyn_any(DynAny value),void,Inserts the Any value contained in the parameter DynAny into the Any represented by this DynAny.,"

insert_dyn_any
public void insert_dyn_any(DynAny value)
                    throws TypeMismatch,
                           InvalidValue
Inserts the Any value contained in the parameter DynAny into the Any represented by this DynAny.

Specified by:
insert_dyn_any in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynAnyStub,insert_float(float value),void,Inserts a float value into the DynAny.,"

insert_float
public void insert_float(float value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a float value into the DynAny.

Specified by:
insert_float in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynAnyStub,insert_long(int value),void,Inserts an integer value into the DynAny.,"

insert_long
public void insert_long(int value)
                 throws TypeMismatch,
                        InvalidValue
Inserts an integer value into the DynAny. The IDL long data type is mapped to the Java int data type.

Specified by:
insert_long in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynAnyStub,insert_longlong(long value),void,Inserts a long value into the DynAny.,"

insert_longlong
public void insert_longlong(long value)
                     throws TypeMismatch,
                            InvalidValue
Inserts a long value into the DynAny. The IDL long long data type is mapped to the Java long data type.

Specified by:
insert_longlong in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynAnyStub,insert_octet(byte value),void,Inserts a byte value into the DynAny.,"

insert_octet
public void insert_octet(byte value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a byte value into the DynAny. The IDL octet data type is mapped to the Java byte data type.

Specified by:
insert_octet in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynAnyStub,insert_reference(Object value),void,Inserts a reference to a CORBA object into the DynAny.,"

insert_reference
public void insert_reference(Object value)
                      throws TypeMismatch,
                             InvalidValue
Inserts a reference to a CORBA object into the DynAny.

Specified by:
insert_reference in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynAnyStub,insert_short(short value),void,Inserts a short value into the DynAny.,"

insert_short
public void insert_short(short value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a short value into the DynAny.

Specified by:
insert_short in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynAnyStub,insert_string(String value),void,Inserts a string value into the DynAny.,"

insert_string
public void insert_string(String value)
                   throws TypeMismatch,
                          InvalidValue
Inserts a string value into the DynAny.
 Both bounded and unbounded strings are inserted using this method.

Specified by:
insert_string in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
InvalidValue - if the string inserted is longer than the bound of a bounded string
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynAnyStub,insert_typecode(TypeCode value),void,Inserts a TypeCode object into the DynAny.,"

insert_typecode
public void insert_typecode(TypeCode value)
                     throws TypeMismatch,
                            InvalidValue
Inserts a TypeCode object into the DynAny.

Specified by:
insert_typecode in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynAnyStub,insert_ulong(int value),void,Inserts an integer value into the DynAny.,"

insert_ulong
public void insert_ulong(int value)
                  throws TypeMismatch,
                         InvalidValue
Inserts an integer value into the DynAny. The IDL ulong data type is mapped to the Java int data type.

Specified by:
insert_ulong in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynAnyStub,insert_ulonglong(long value),void,Inserts a long value into the DynAny.,"

insert_ulonglong
public void insert_ulonglong(long value)
                      throws TypeMismatch,
                             InvalidValue
Inserts a long value into the DynAny.
 The IDL unsigned long long data type is mapped to the Java long data type.

Specified by:
insert_ulonglong in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynAnyStub,insert_ushort(short value),void,Inserts a short value into the DynAny.,"

insert_ushort
public void insert_ushort(short value)
                   throws TypeMismatch,
                          InvalidValue
Inserts a short value into the DynAny. The IDL ushort data type is mapped to the Java short data type.

Specified by:
insert_ushort in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynAnyStub,insert_val(Serializable value),void,Inserts a reference to a Serializable object into this DynAny.,"

insert_val
public void insert_val(Serializable value)
                throws TypeMismatch,
                       InvalidValue
Inserts a reference to a Serializable object into this DynAny.
 The IDL ValueBase type is mapped to the Java Serializable type.

Specified by:
insert_val in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynAnyStub,insert_wchar(char value),void,Inserts a char value into the DynAny.,"

insert_wchar
public void insert_wchar(char value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a char value into the DynAny. The IDL wchar data type is mapped to the Java char data type.

Specified by:
insert_wchar in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynAnyStub,insert_wstring(String value),void,Inserts a string value into the DynAny.,"

insert_wstring
public void insert_wstring(String value)
                    throws TypeMismatch,
                           InvalidValue
Inserts a string value into the DynAny.
 Both bounded and unbounded strings are inserted using this method.

Specified by:
insert_wstring in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
InvalidValue - if the string inserted is longer than the bound of a bounded string
TypeMismatch


"
_DynAnyStub,next(),boolean,Advances the current position to the next component.,"

next
public boolean next()
Advances the current position to the next component.
 The operation returns true while the resulting current position indicates a component, false otherwise.
 A false return value leaves the current position at -1.
 Invoking next on a DynAny without components leaves the current position at -1 and returns false.

Specified by:
next in interface DynAnyOperations


"
_DynAnyStub,rewind(),void,Is equivalent to seek(0).,"

rewind
public void rewind()
Is equivalent to seek(0).

Specified by:
rewind in interface DynAnyOperations


"
_DynAnyStub,seek(int index),boolean,Sets the current position to index.,"

seek
public boolean seek(int index)
Sets the current position to index. The current position is indexed 0 to n-1, that is,
 index zero corresponds to the first component. The operation returns true if the resulting
 current position indicates a component of the DynAny and false if index indicates
 a position that does not correspond to a component.
 Calling seek with a negative index is legal. It sets the current position to -1 to indicate
 no component and returns false. Passing a non-negative index value for a DynAny that does not
 have a component at the corresponding position sets the current position to -1 and returns false.

Specified by:
seek in interface DynAnyOperations


"
_DynAnyStub,to_any(),Any,Creates an any value from a DynAny object.,"

to_any
public Any to_any()
Creates an any value from a DynAny object.
 A copy of the TypeCode associated with the DynAny object is assigned to the resulting any.
 The value associated with the DynAny object is copied into the any.

Specified by:
to_any in interface DynAnyOperations
Returns:
a new Any object with the same value and TypeCode


"
_DynAnyStub,type(),TypeCode,Returns the TypeCode associated with this DynAny object.,"

type
public TypeCode type()
Returns the TypeCode associated with this DynAny object.
 A DynAny object is created with a TypeCode value assigned to it.
 This TypeCode value determines the type of the value handled through the DynAny object.
 Note that the TypeCode associated with a DynAny object is initialized at the time the
 DynAny is created and cannot be changed during lifetime of the DynAny object.

Specified by:
type in interface DynAnyOperations
Returns:
The TypeCode associated with this DynAny object


"
_DynArrayStub,_ids(),String[],Retrieves a string array containing the repository identifiers supported by this ObjectImpl object.,"

_ids
public String[] _ids()
Description copied from class: ObjectImpl
Retrieves a string array containing the repository identifiers
 supported by this ObjectImpl object.  For example,
 for a stub, this method returns information about all the
 interfaces supported by the stub.

Specified by:
_ids in class ObjectImpl
Returns:
the array of all repository identifiers supported by this
         ObjectImpl instance


"
_DynArrayStub,assign(DynAny dyn_any),void,Initializes the value associated with a DynAny object with the value associated with another DynAny object.,"

assign
public void assign(DynAny dyn_any)
            throws TypeMismatch
Initializes the value associated with a DynAny object with the value
 associated with another DynAny object.
 The current position of the target DynAny is set to zero for values that have components
 and to -1 for values that do not have components.

Specified by:
assign in interface DynAnyOperations
Parameters:
dyn_any - 
Throws:
TypeMismatch - if the type of the passed DynAny is not equivalent to the type of target DynAny


"
_DynArrayStub,component_count(),int,Returns the number of components of a DynAny.,"

component_count
public int component_count()
Returns the number of components of a DynAny.
 For a DynAny without components, it returns zero.
 The operation only counts the components at the top level.
 For example, if component_count is invoked on a DynStruct with a single member,
 the return value is 1, irrespective of the type of the member.
 
For sequences, the operation returns the current number of elements.
 For structures, exceptions, and value types, the operation returns the number of members.
 For arrays, the operation returns the number of elements.
 For unions, the operation returns 2 if the discriminator indicates that a named member is active,
 otherwise, it returns 1.
 For DynFixed and DynEnum, the operation returns zero.
 

Specified by:
component_count in interface DynAnyOperations


"
_DynArrayStub,copy(),DynAny,Creates a new DynAny object whose value is a deep copy of the DynAny on which it is invoked.,"

copy
public DynAny copy()
Creates a new DynAny object whose value is a deep copy of the DynAny on which it is invoked.
 The operation is polymorphic, that is, invoking it on one of the types derived from DynAny,
 such as DynStruct, creates the derived type but returns its reference as the DynAny base type.

Specified by:
copy in interface DynAnyOperations
Returns:
a deep copy of the DynAny object


"
_DynArrayStub,current_component(),DynAny,Returns the DynAny for the component at the current position.,"

current_component
public DynAny current_component()
                         throws TypeMismatch
Returns the DynAny for the component at the current position.
 It does not advance the current position, so repeated calls to current_component
 without an intervening call to rewind, next, or seek return the same component.
 The returned DynAny object reference can be used to get/set the value of the current component.
 If the current component represents a complex type, the returned reference can be narrowed
 based on the TypeCode to get the interface corresponding to the to the complex type.
 Calling current_component on a DynAny that cannot have components,
 such as a DynEnum or an empty exception, raises TypeMismatch.
 Calling current_component on a DynAny whose current position is -1 returns a nil reference.
 The iteration operations, together with current_component, can be used
 to dynamically compose an any value. After creating a dynamic any, such as a DynStruct,
 current_component and next can be used to initialize all the components of the value.
 Once the dynamic value is completely initialized, to_any creates the corresponding any value.

Specified by:
current_component in interface DynAnyOperations
Throws:
TypeMismatch - If called on a DynAny that cannot have components,
 such as a DynEnum or an empty exception


"
_DynArrayStub,destroy(),void,Destroys a DynAny object.,"

destroy
public void destroy()
Destroys a DynAny object.
 This operation frees any resources used to represent the data value associated with a DynAny object.
 It must be invoked on references obtained from one of the creation operations on the ORB interface
 or on a reference returned by DynAny.copy() to avoid resource leaks.
 Invoking destroy on component DynAny objects (for example, on objects returned by the
 current_component operation) does nothing.
 Destruction of a DynAny object implies destruction of all DynAny objects obtained from it.
 That is, references to components of a destroyed DynAny become invalid.
 Invocations on such references raise OBJECT_NOT_EXIST.
 It is possible to manipulate a component of a DynAny beyond the life time of the DynAny
 from which the component was obtained by making a copy of the component with the copy operation
 before destroying the DynAny from which the component was obtained.

Specified by:
destroy in interface DynAnyOperations


"
_DynArrayStub,equal(DynAny dyn_any),boolean,Compares two DynAny values for equality.,"

equal
public boolean equal(DynAny dyn_any)
Compares two DynAny values for equality.
 Two DynAny values are equal if their TypeCodes are equivalent and, recursively, all component DynAnys
 have equal values.
 The current position of the two DynAnys being compared has no effect on the result of equal.

Specified by:
equal in interface DynAnyOperations
Returns:
true of the DynAnys are equal, false otherwise


"
_DynArrayStub,from_any(Any value),void,Initializes the value associated with a DynAny object with the value contained in an any.,"

from_any
public void from_any(Any value)
              throws TypeMismatch,
                     InvalidValue
Initializes the value associated with a DynAny object with the value contained in an any.
 The current position of the target DynAny is set to zero for values that have components
 and to -1 for values that do not have components.

Specified by:
from_any in interface DynAnyOperations
Throws:
TypeMismatch - if the type of the passed Any is not equivalent to the type of target DynAny
InvalidValue - if the passed Any does not contain a legal value (such as a null string)


"
_DynArrayStub,get_any(),Any,Extracts an Any value contained in the Any represented by this DynAny.,"

get_any
public Any get_any()
            throws TypeMismatch,
                   InvalidValue
Extracts an Any value contained in the Any represented by this DynAny.

Specified by:
get_any in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynArrayStub,get_boolean(),boolean,Extracts the boolean value from this DynAny.,"

get_boolean
public boolean get_boolean()
                    throws TypeMismatch,
                           InvalidValue
Extracts the boolean value from this DynAny.

Specified by:
get_boolean in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynArrayStub,get_char(),char,Extracts the char value from this DynAny.,"

get_char
public char get_char()
              throws TypeMismatch,
                     InvalidValue
Extracts the char value from this DynAny.

Specified by:
get_char in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynArrayStub,get_double(),double,Extracts the double value from this DynAny.,"

get_double
public double get_double()
                  throws TypeMismatch,
                         InvalidValue
Extracts the double value from this DynAny.

Specified by:
get_double in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynArrayStub,get_dyn_any(),DynAny,Extracts the Any value contained in the Any represented by this DynAny and returns it wrapped into a new DynAny.,"

get_dyn_any
public DynAny get_dyn_any()
                   throws TypeMismatch,
                          InvalidValue
Extracts the Any value contained in the Any represented by this DynAny and returns it wrapped
 into a new DynAny.

Specified by:
get_dyn_any in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynArrayStub,get_elements_as_dyn_any(),DynAny[],Returns the elements of the DynArray as DynAnys.,"

get_elements_as_dyn_any
public DynAny[] get_elements_as_dyn_any()
Returns the elements of the DynArray as DynAnys.

Specified by:
get_elements_as_dyn_any in interface DynArrayOperations


"
_DynArrayStub,get_elements(),Any[],Returns the elements of the DynArray.,"

get_elements
public Any[] get_elements()
Returns the elements of the DynArray.

Specified by:
get_elements in interface DynArrayOperations


"
_DynArrayStub,get_float(),float,Extracts the float value from this DynAny.,"

get_float
public float get_float()
                throws TypeMismatch,
                       InvalidValue
Extracts the float value from this DynAny.

Specified by:
get_float in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynArrayStub,get_long(),int,Extracts the integer value from this DynAny.,"

get_long
public int get_long()
             throws TypeMismatch,
                    InvalidValue
Extracts the integer value from this DynAny. The IDL long data type is mapped to the Java int data type.

Specified by:
get_long in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynArrayStub,get_longlong(),long,Extracts the long value from this DynAny.,"

get_longlong
public long get_longlong()
                  throws TypeMismatch,
                         InvalidValue
Extracts the long value from this DynAny. The IDL long long data type is mapped to the Java long data type.

Specified by:
get_longlong in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynArrayStub,get_octet(),byte,Extracts the byte value from this DynAny.,"

get_octet
public byte get_octet()
               throws TypeMismatch,
                      InvalidValue
Extracts the byte value from this DynAny. The IDL octet data type is mapped to the Java byte data type.

Specified by:
get_octet in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynArrayStub,get_reference(),Object,Extracts the reference to a CORBA Object from this DynAny.,"

get_reference
public Object get_reference()
                     throws TypeMismatch,
                            InvalidValue
Extracts the reference to a CORBA Object from this DynAny.

Specified by:
get_reference in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynArrayStub,get_short(),short,Extracts the short value from this DynAny.,"

get_short
public short get_short()
                throws TypeMismatch,
                       InvalidValue
Extracts the short value from this DynAny.

Specified by:
get_short in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynArrayStub,get_string(),String,Extracts the string value from this DynAny.,"

get_string
public String get_string()
                  throws TypeMismatch,
                         InvalidValue
Extracts the string value from this DynAny.
 Both bounded and unbounded strings are extracted using this method.

Specified by:
get_string in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynArrayStub,get_typecode(),TypeCode,Extracts the TypeCode object from this DynAny.,"

get_typecode
public TypeCode get_typecode()
                      throws TypeMismatch,
                             InvalidValue
Extracts the TypeCode object from this DynAny.

Specified by:
get_typecode in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynArrayStub,get_ulong(),int,Extracts the integer value from this DynAny.,"

get_ulong
public int get_ulong()
              throws TypeMismatch,
                     InvalidValue
Extracts the integer value from this DynAny. The IDL ulong data type is mapped to the Java int data type.

Specified by:
get_ulong in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynArrayStub,get_ulonglong(),long,Extracts the long value from this DynAny.,"

get_ulonglong
public long get_ulonglong()
                   throws TypeMismatch,
                          InvalidValue
Extracts the long value from this DynAny.
 The IDL unsigned long long data type is mapped to the Java long data type.

Specified by:
get_ulonglong in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynArrayStub,get_ushort(),short,Extracts the short value from this DynAny.,"

get_ushort
public short get_ushort()
                 throws TypeMismatch,
                        InvalidValue
Extracts the short value from this DynAny. The IDL ushort data type is mapped to the Java short data type.

Specified by:
get_ushort in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynArrayStub,get_val(),Serializable,Extracts a Serializable object from this DynAny.,"

get_val
public Serializable get_val()
                     throws TypeMismatch,
                            InvalidValue
Extracts a Serializable object from this DynAny.
 The IDL ValueBase type is mapped to the Java Serializable type.

Specified by:
get_val in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynArrayStub,get_wchar(),char,Extracts the long value from this DynAny.,"

get_wchar
public char get_wchar()
               throws TypeMismatch,
                      InvalidValue
Extracts the long value from this DynAny. The IDL wchar data type is mapped to the Java char data type.

Specified by:
get_wchar in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynArrayStub,get_wstring(),String,Extracts the string value from this DynAny.,"

get_wstring
public String get_wstring()
                   throws TypeMismatch,
                          InvalidValue
Extracts the string value from this DynAny.
 Both bounded and unbounded strings are extracted using this method.

Specified by:
get_wstring in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue


"
_DynArrayStub,insert_any(Any value),void,Inserts an Any value into the Any represented by this DynAny.,"

insert_any
public void insert_any(Any value)
                throws TypeMismatch,
                       InvalidValue
Inserts an Any value into the Any represented by this DynAny.

Specified by:
insert_any in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynArrayStub,insert_boolean(boolean value),void,Inserts a boolean value into the DynAny.,"

insert_boolean
public void insert_boolean(boolean value)
                    throws TypeMismatch,
                           InvalidValue
Inserts a boolean value into the DynAny.

Specified by:
insert_boolean in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynArrayStub,insert_char(char value),void,Inserts a char value into the DynAny.,"

insert_char
public void insert_char(char value)
                 throws TypeMismatch,
                        InvalidValue
Inserts a char value into the DynAny.

Specified by:
insert_char in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynArrayStub,insert_double(double value),void,Inserts a double value into the DynAny.,"

insert_double
public void insert_double(double value)
                   throws TypeMismatch,
                          InvalidValue
Inserts a double value into the DynAny.

Specified by:
insert_double in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynArrayStub,insert_dyn_any(DynAny value),void,Inserts the Any value contained in the parameter DynAny into the Any represented by this DynAny.,"

insert_dyn_any
public void insert_dyn_any(DynAny value)
                    throws TypeMismatch,
                           InvalidValue
Inserts the Any value contained in the parameter DynAny into the Any represented by this DynAny.

Specified by:
insert_dyn_any in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynArrayStub,insert_float(float value),void,Inserts a float value into the DynAny.,"

insert_float
public void insert_float(float value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a float value into the DynAny.

Specified by:
insert_float in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynArrayStub,insert_long(int value),void,Inserts an integer value into the DynAny.,"

insert_long
public void insert_long(int value)
                 throws TypeMismatch,
                        InvalidValue
Inserts an integer value into the DynAny. The IDL long data type is mapped to the Java int data type.

Specified by:
insert_long in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynArrayStub,insert_longlong(long value),void,Inserts a long value into the DynAny.,"

insert_longlong
public void insert_longlong(long value)
                     throws TypeMismatch,
                            InvalidValue
Inserts a long value into the DynAny. The IDL long long data type is mapped to the Java long data type.

Specified by:
insert_longlong in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynArrayStub,insert_octet(byte value),void,Inserts a byte value into the DynAny.,"

insert_octet
public void insert_octet(byte value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a byte value into the DynAny. The IDL octet data type is mapped to the Java byte data type.

Specified by:
insert_octet in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynArrayStub,insert_reference(Object value),void,Inserts a reference to a CORBA object into the DynAny.,"

insert_reference
public void insert_reference(Object value)
                      throws TypeMismatch,
                             InvalidValue
Inserts a reference to a CORBA object into the DynAny.

Specified by:
insert_reference in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynArrayStub,insert_short(short value),void,Inserts a short value into the DynAny.,"

insert_short
public void insert_short(short value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a short value into the DynAny.

Specified by:
insert_short in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynArrayStub,insert_string(String value),void,Inserts a string value into the DynAny.,"

insert_string
public void insert_string(String value)
                   throws TypeMismatch,
                          InvalidValue
Inserts a string value into the DynAny.
 Both bounded and unbounded strings are inserted using this method.

Specified by:
insert_string in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
InvalidValue - if the string inserted is longer than the bound of a bounded string
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynArrayStub,insert_typecode(TypeCode value),void,Inserts a TypeCode object into the DynAny.,"

insert_typecode
public void insert_typecode(TypeCode value)
                     throws TypeMismatch,
                            InvalidValue
Inserts a TypeCode object into the DynAny.

Specified by:
insert_typecode in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynArrayStub,insert_ulong(int value),void,Inserts an integer value into the DynAny.,"

insert_ulong
public void insert_ulong(int value)
                  throws TypeMismatch,
                         InvalidValue
Inserts an integer value into the DynAny. The IDL ulong data type is mapped to the Java int data type.

Specified by:
insert_ulong in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynArrayStub,insert_ulonglong(long value),void,Inserts a long value into the DynAny.,"

insert_ulonglong
public void insert_ulonglong(long value)
                      throws TypeMismatch,
                             InvalidValue
Inserts a long value into the DynAny.
 The IDL unsigned long long data type is mapped to the Java long data type.

Specified by:
insert_ulonglong in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynArrayStub,insert_ushort(short value),void,Inserts a short value into the DynAny.,"

insert_ushort
public void insert_ushort(short value)
                   throws TypeMismatch,
                          InvalidValue
Inserts a short value into the DynAny. The IDL ushort data type is mapped to the Java short data type.

Specified by:
insert_ushort in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynArrayStub,insert_val(Serializable value),void,Inserts a reference to a Serializable object into this DynAny.,"

insert_val
public void insert_val(Serializable value)
                throws TypeMismatch,
                       InvalidValue
Inserts a reference to a Serializable object into this DynAny.
 The IDL ValueBase type is mapped to the Java Serializable type.

Specified by:
insert_val in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynArrayStub,insert_wchar(char value),void,Inserts a char value into the DynAny.,"

insert_wchar
public void insert_wchar(char value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a char value into the DynAny. The IDL wchar data type is mapped to the Java char data type.

Specified by:
insert_wchar in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynArrayStub,insert_wstring(String value),void,Inserts a string value into the DynAny.,"

insert_wstring
public void insert_wstring(String value)
                    throws TypeMismatch,
                           InvalidValue
Inserts a string value into the DynAny.
 Both bounded and unbounded strings are inserted using this method.

Specified by:
insert_wstring in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
InvalidValue - if the string inserted is longer than the bound of a bounded string
TypeMismatch


"
_DynArrayStub,next(),boolean,Advances the current position to the next component.,"

next
public boolean next()
Advances the current position to the next component.
 The operation returns true while the resulting current position indicates a component, false otherwise.
 A false return value leaves the current position at -1.
 Invoking next on a DynAny without components leaves the current position at -1 and returns false.

Specified by:
next in interface DynAnyOperations


"
_DynArrayStub,rewind(),void,Is equivalent to seek(0).,"

rewind
public void rewind()
Is equivalent to seek(0).

Specified by:
rewind in interface DynAnyOperations


"
_DynArrayStub,seek(int index),boolean,Sets the current position to index.,"

seek
public boolean seek(int index)
Sets the current position to index. The current position is indexed 0 to n-1, that is,
 index zero corresponds to the first component. The operation returns true if the resulting
 current position indicates a component of the DynAny and false if index indicates
 a position that does not correspond to a component.
 Calling seek with a negative index is legal. It sets the current position to -1 to indicate
 no component and returns false. Passing a non-negative index value for a DynAny that does not
 have a component at the corresponding position sets the current position to -1 and returns false.

Specified by:
seek in interface DynAnyOperations


"
_DynArrayStub,set_elements_as_dyn_any(DynAny[] value),void,Sets the DynArray to contain the passed elements.,"

set_elements_as_dyn_any
public void set_elements_as_dyn_any(DynAny[] value)
                             throws TypeMismatch,
                                    InvalidValue
Sets the DynArray to contain the passed elements.

Specified by:
set_elements_as_dyn_any in interface DynArrayOperations
Throws:
TypeMismatch - if one or more elements have a type that is inconsistent with the DynArrays TypeCode
InvalidValue - if the sequence does not contain the same number of elements as the array dimension


"
_DynArrayStub,set_elements(Any[] value),void,Sets the DynArray to contain the passed elements.,"

set_elements
public void set_elements(Any[] value)
                  throws TypeMismatch,
                         InvalidValue
Sets the DynArray to contain the passed elements.

Specified by:
set_elements in interface DynArrayOperations
Throws:
TypeMismatch - if one or more elements have a type that is inconsistent with the DynArrays TypeCode
InvalidValue - if the sequence does not contain the same number of elements as the array dimension


"
_DynArrayStub,to_any(),Any,Creates an any value from a DynAny object.,"

to_any
public Any to_any()
Creates an any value from a DynAny object.
 A copy of the TypeCode associated with the DynAny object is assigned to the resulting any.
 The value associated with the DynAny object is copied into the any.

Specified by:
to_any in interface DynAnyOperations
Returns:
a new Any object with the same value and TypeCode


"
_DynArrayStub,type(),TypeCode,Returns the TypeCode associated with this DynAny object.,"

type
public TypeCode type()
Returns the TypeCode associated with this DynAny object.
 A DynAny object is created with a TypeCode value assigned to it.
 This TypeCode value determines the type of the value handled through the DynAny object.
 Note that the TypeCode associated with a DynAny object is initialized at the time the
 DynAny is created and cannot be changed during lifetime of the DynAny object.

Specified by:
type in interface DynAnyOperations
Returns:
The TypeCode associated with this DynAny object


"
_DynEnumStub,_ids(),String[],Retrieves a string array containing the repository identifiers supported by this ObjectImpl object.,"

_ids
public String[] _ids()
Description copied from class: ObjectImpl
Retrieves a string array containing the repository identifiers
 supported by this ObjectImpl object.  For example,
 for a stub, this method returns information about all the
 interfaces supported by the stub.

Specified by:
_ids in class ObjectImpl
Returns:
the array of all repository identifiers supported by this
         ObjectImpl instance


"
_DynEnumStub,assign(DynAny dyn_any),void,Initializes the value associated with a DynAny object with the value associated with another DynAny object.,"

assign
public void assign(DynAny dyn_any)
            throws TypeMismatch
Initializes the value associated with a DynAny object with the value
 associated with another DynAny object.
 The current position of the target DynAny is set to zero for values that have components
 and to -1 for values that do not have components.

Specified by:
assign in interface DynAnyOperations
Parameters:
dyn_any - 
Throws:
TypeMismatch - if the type of the passed DynAny is not equivalent to the type of target DynAny


"
_DynEnumStub,component_count(),int,Returns the number of components of a DynAny.,"

component_count
public int component_count()
Returns the number of components of a DynAny.
 For a DynAny without components, it returns zero.
 The operation only counts the components at the top level.
 For example, if component_count is invoked on a DynStruct with a single member,
 the return value is 1, irrespective of the type of the member.
 
For sequences, the operation returns the current number of elements.
 For structures, exceptions, and value types, the operation returns the number of members.
 For arrays, the operation returns the number of elements.
 For unions, the operation returns 2 if the discriminator indicates that a named member is active,
 otherwise, it returns 1.
 For DynFixed and DynEnum, the operation returns zero.
 

Specified by:
component_count in interface DynAnyOperations


"
_DynEnumStub,copy(),DynAny,Creates a new DynAny object whose value is a deep copy of the DynAny on which it is invoked.,"

copy
public DynAny copy()
Creates a new DynAny object whose value is a deep copy of the DynAny on which it is invoked.
 The operation is polymorphic, that is, invoking it on one of the types derived from DynAny,
 such as DynStruct, creates the derived type but returns its reference as the DynAny base type.

Specified by:
copy in interface DynAnyOperations
Returns:
a deep copy of the DynAny object


"
_DynEnumStub,current_component(),DynAny,Returns the DynAny for the component at the current position.,"

current_component
public DynAny current_component()
                         throws TypeMismatch
Returns the DynAny for the component at the current position.
 It does not advance the current position, so repeated calls to current_component
 without an intervening call to rewind, next, or seek return the same component.
 The returned DynAny object reference can be used to get/set the value of the current component.
 If the current component represents a complex type, the returned reference can be narrowed
 based on the TypeCode to get the interface corresponding to the to the complex type.
 Calling current_component on a DynAny that cannot have components,
 such as a DynEnum or an empty exception, raises TypeMismatch.
 Calling current_component on a DynAny whose current position is -1 returns a nil reference.
 The iteration operations, together with current_component, can be used
 to dynamically compose an any value. After creating a dynamic any, such as a DynStruct,
 current_component and next can be used to initialize all the components of the value.
 Once the dynamic value is completely initialized, to_any creates the corresponding any value.

Specified by:
current_component in interface DynAnyOperations
Throws:
TypeMismatch - If called on a DynAny that cannot have components,
 such as a DynEnum or an empty exception


"
_DynEnumStub,destroy(),void,Destroys a DynAny object.,"

destroy
public void destroy()
Destroys a DynAny object.
 This operation frees any resources used to represent the data value associated with a DynAny object.
 It must be invoked on references obtained from one of the creation operations on the ORB interface
 or on a reference returned by DynAny.copy() to avoid resource leaks.
 Invoking destroy on component DynAny objects (for example, on objects returned by the
 current_component operation) does nothing.
 Destruction of a DynAny object implies destruction of all DynAny objects obtained from it.
 That is, references to components of a destroyed DynAny become invalid.
 Invocations on such references raise OBJECT_NOT_EXIST.
 It is possible to manipulate a component of a DynAny beyond the life time of the DynAny
 from which the component was obtained by making a copy of the component with the copy operation
 before destroying the DynAny from which the component was obtained.

Specified by:
destroy in interface DynAnyOperations


"
_DynEnumStub,equal(DynAny dyn_any),boolean,Compares two DynAny values for equality.,"

equal
public boolean equal(DynAny dyn_any)
Compares two DynAny values for equality.
 Two DynAny values are equal if their TypeCodes are equivalent and, recursively, all component DynAnys
 have equal values.
 The current position of the two DynAnys being compared has no effect on the result of equal.

Specified by:
equal in interface DynAnyOperations
Returns:
true of the DynAnys are equal, false otherwise


"
_DynEnumStub,from_any(Any value),void,Initializes the value associated with a DynAny object with the value contained in an any.,"

from_any
public void from_any(Any value)
              throws TypeMismatch,
                     InvalidValue
Initializes the value associated with a DynAny object with the value contained in an any.
 The current position of the target DynAny is set to zero for values that have components
 and to -1 for values that do not have components.

Specified by:
from_any in interface DynAnyOperations
Throws:
TypeMismatch - if the type of the passed Any is not equivalent to the type of target DynAny
InvalidValue - if the passed Any does not contain a legal value (such as a null string)


"
_DynEnumStub,get_any(),Any,Extracts an Any value contained in the Any represented by this DynAny.,"

get_any
public Any get_any()
            throws TypeMismatch,
                   InvalidValue
Extracts an Any value contained in the Any represented by this DynAny.

Specified by:
get_any in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynEnumStub,get_as_string(),String,Returns the value of the DynEnum as an IDL identifier.,"

get_as_string
public String get_as_string()
Returns the value of the DynEnum as an IDL identifier.

Specified by:
get_as_string in interface DynEnumOperations


"
_DynEnumStub,get_as_ulong(),int,Returns the value of the DynEnum as the enumerated value's ordinal value.,"

get_as_ulong
public int get_as_ulong()
Returns the value of the DynEnum as the enumerated value's ordinal value.
 Enumerators have ordinal values 0 to n-1, as they appear from left to right
 in the corresponding IDL definition.

Specified by:
get_as_ulong in interface DynEnumOperations


"
_DynEnumStub,get_boolean(),boolean,Extracts the boolean value from this DynAny.,"

get_boolean
public boolean get_boolean()
                    throws TypeMismatch,
                           InvalidValue
Extracts the boolean value from this DynAny.

Specified by:
get_boolean in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynEnumStub,get_char(),char,Extracts the char value from this DynAny.,"

get_char
public char get_char()
              throws TypeMismatch,
                     InvalidValue
Extracts the char value from this DynAny.

Specified by:
get_char in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynEnumStub,get_double(),double,Extracts the double value from this DynAny.,"

get_double
public double get_double()
                  throws TypeMismatch,
                         InvalidValue
Extracts the double value from this DynAny.

Specified by:
get_double in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynEnumStub,get_dyn_any(),DynAny,Extracts the Any value contained in the Any represented by this DynAny and returns it wrapped into a new DynAny.,"

get_dyn_any
public DynAny get_dyn_any()
                   throws TypeMismatch,
                          InvalidValue
Extracts the Any value contained in the Any represented by this DynAny and returns it wrapped
 into a new DynAny.

Specified by:
get_dyn_any in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynEnumStub,get_float(),float,Extracts the float value from this DynAny.,"

get_float
public float get_float()
                throws TypeMismatch,
                       InvalidValue
Extracts the float value from this DynAny.

Specified by:
get_float in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynEnumStub,get_long(),int,Extracts the integer value from this DynAny.,"

get_long
public int get_long()
             throws TypeMismatch,
                    InvalidValue
Extracts the integer value from this DynAny. The IDL long data type is mapped to the Java int data type.

Specified by:
get_long in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynEnumStub,get_longlong(),long,Extracts the long value from this DynAny.,"

get_longlong
public long get_longlong()
                  throws TypeMismatch,
                         InvalidValue
Extracts the long value from this DynAny. The IDL long long data type is mapped to the Java long data type.

Specified by:
get_longlong in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynEnumStub,get_octet(),byte,Extracts the byte value from this DynAny.,"

get_octet
public byte get_octet()
               throws TypeMismatch,
                      InvalidValue
Extracts the byte value from this DynAny. The IDL octet data type is mapped to the Java byte data type.

Specified by:
get_octet in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynEnumStub,get_reference(),Object,Extracts the reference to a CORBA Object from this DynAny.,"

get_reference
public Object get_reference()
                     throws TypeMismatch,
                            InvalidValue
Extracts the reference to a CORBA Object from this DynAny.

Specified by:
get_reference in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynEnumStub,get_short(),short,Extracts the short value from this DynAny.,"

get_short
public short get_short()
                throws TypeMismatch,
                       InvalidValue
Extracts the short value from this DynAny.

Specified by:
get_short in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynEnumStub,get_string(),String,Extracts the string value from this DynAny.,"

get_string
public String get_string()
                  throws TypeMismatch,
                         InvalidValue
Extracts the string value from this DynAny.
 Both bounded and unbounded strings are extracted using this method.

Specified by:
get_string in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynEnumStub,get_typecode(),TypeCode,Extracts the TypeCode object from this DynAny.,"

get_typecode
public TypeCode get_typecode()
                      throws TypeMismatch,
                             InvalidValue
Extracts the TypeCode object from this DynAny.

Specified by:
get_typecode in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynEnumStub,get_ulong(),int,Extracts the integer value from this DynAny.,"

get_ulong
public int get_ulong()
              throws TypeMismatch,
                     InvalidValue
Extracts the integer value from this DynAny. The IDL ulong data type is mapped to the Java int data type.

Specified by:
get_ulong in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynEnumStub,get_ulonglong(),long,Extracts the long value from this DynAny.,"

get_ulonglong
public long get_ulonglong()
                   throws TypeMismatch,
                          InvalidValue
Extracts the long value from this DynAny.
 The IDL unsigned long long data type is mapped to the Java long data type.

Specified by:
get_ulonglong in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynEnumStub,get_ushort(),short,Extracts the short value from this DynAny.,"

get_ushort
public short get_ushort()
                 throws TypeMismatch,
                        InvalidValue
Extracts the short value from this DynAny. The IDL ushort data type is mapped to the Java short data type.

Specified by:
get_ushort in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynEnumStub,get_val(),Serializable,Extracts a Serializable object from this DynAny.,"

get_val
public Serializable get_val()
                     throws TypeMismatch,
                            InvalidValue
Extracts a Serializable object from this DynAny.
 The IDL ValueBase type is mapped to the Java Serializable type.

Specified by:
get_val in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynEnumStub,get_wchar(),char,Extracts the long value from this DynAny.,"

get_wchar
public char get_wchar()
               throws TypeMismatch,
                      InvalidValue
Extracts the long value from this DynAny. The IDL wchar data type is mapped to the Java char data type.

Specified by:
get_wchar in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynEnumStub,get_wstring(),String,Extracts the string value from this DynAny.,"

get_wstring
public String get_wstring()
                   throws TypeMismatch,
                          InvalidValue
Extracts the string value from this DynAny.
 Both bounded and unbounded strings are extracted using this method.

Specified by:
get_wstring in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue


"
_DynEnumStub,insert_any(Any value),void,Inserts an Any value into the Any represented by this DynAny.,"

insert_any
public void insert_any(Any value)
                throws TypeMismatch,
                       InvalidValue
Inserts an Any value into the Any represented by this DynAny.

Specified by:
insert_any in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynEnumStub,insert_boolean(boolean value),void,Inserts a boolean value into the DynAny.,"

insert_boolean
public void insert_boolean(boolean value)
                    throws TypeMismatch,
                           InvalidValue
Inserts a boolean value into the DynAny.

Specified by:
insert_boolean in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynEnumStub,insert_char(char value),void,Inserts a char value into the DynAny.,"

insert_char
public void insert_char(char value)
                 throws TypeMismatch,
                        InvalidValue
Inserts a char value into the DynAny.

Specified by:
insert_char in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynEnumStub,insert_double(double value),void,Inserts a double value into the DynAny.,"

insert_double
public void insert_double(double value)
                   throws TypeMismatch,
                          InvalidValue
Inserts a double value into the DynAny.

Specified by:
insert_double in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynEnumStub,insert_dyn_any(DynAny value),void,Inserts the Any value contained in the parameter DynAny into the Any represented by this DynAny.,"

insert_dyn_any
public void insert_dyn_any(DynAny value)
                    throws TypeMismatch,
                           InvalidValue
Inserts the Any value contained in the parameter DynAny into the Any represented by this DynAny.

Specified by:
insert_dyn_any in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynEnumStub,insert_float(float value),void,Inserts a float value into the DynAny.,"

insert_float
public void insert_float(float value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a float value into the DynAny.

Specified by:
insert_float in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynEnumStub,insert_long(int value),void,Inserts an integer value into the DynAny.,"

insert_long
public void insert_long(int value)
                 throws TypeMismatch,
                        InvalidValue
Inserts an integer value into the DynAny. The IDL long data type is mapped to the Java int data type.

Specified by:
insert_long in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynEnumStub,insert_longlong(long value),void,Inserts a long value into the DynAny.,"

insert_longlong
public void insert_longlong(long value)
                     throws TypeMismatch,
                            InvalidValue
Inserts a long value into the DynAny. The IDL long long data type is mapped to the Java long data type.

Specified by:
insert_longlong in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynEnumStub,insert_octet(byte value),void,Inserts a byte value into the DynAny.,"

insert_octet
public void insert_octet(byte value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a byte value into the DynAny. The IDL octet data type is mapped to the Java byte data type.

Specified by:
insert_octet in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynEnumStub,insert_reference(Object value),void,Inserts a reference to a CORBA object into the DynAny.,"

insert_reference
public void insert_reference(Object value)
                      throws TypeMismatch,
                             InvalidValue
Inserts a reference to a CORBA object into the DynAny.

Specified by:
insert_reference in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynEnumStub,insert_short(short value),void,Inserts a short value into the DynAny.,"

insert_short
public void insert_short(short value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a short value into the DynAny.

Specified by:
insert_short in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynEnumStub,insert_string(String value),void,Inserts a string value into the DynAny.,"

insert_string
public void insert_string(String value)
                   throws TypeMismatch,
                          InvalidValue
Inserts a string value into the DynAny.
 Both bounded and unbounded strings are inserted using this method.

Specified by:
insert_string in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
InvalidValue - if the string inserted is longer than the bound of a bounded string
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynEnumStub,insert_typecode(TypeCode value),void,Inserts a TypeCode object into the DynAny.,"

insert_typecode
public void insert_typecode(TypeCode value)
                     throws TypeMismatch,
                            InvalidValue
Inserts a TypeCode object into the DynAny.

Specified by:
insert_typecode in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynEnumStub,insert_ulong(int value),void,Inserts an integer value into the DynAny.,"

insert_ulong
public void insert_ulong(int value)
                  throws TypeMismatch,
                         InvalidValue
Inserts an integer value into the DynAny. The IDL ulong data type is mapped to the Java int data type.

Specified by:
insert_ulong in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynEnumStub,insert_ulonglong(long value),void,Inserts a long value into the DynAny.,"

insert_ulonglong
public void insert_ulonglong(long value)
                      throws TypeMismatch,
                             InvalidValue
Inserts a long value into the DynAny.
 The IDL unsigned long long data type is mapped to the Java long data type.

Specified by:
insert_ulonglong in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynEnumStub,insert_ushort(short value),void,Inserts a short value into the DynAny.,"

insert_ushort
public void insert_ushort(short value)
                   throws TypeMismatch,
                          InvalidValue
Inserts a short value into the DynAny. The IDL ushort data type is mapped to the Java short data type.

Specified by:
insert_ushort in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynEnumStub,insert_val(Serializable value),void,Inserts a reference to a Serializable object into this DynAny.,"

insert_val
public void insert_val(Serializable value)
                throws TypeMismatch,
                       InvalidValue
Inserts a reference to a Serializable object into this DynAny.
 The IDL ValueBase type is mapped to the Java Serializable type.

Specified by:
insert_val in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynEnumStub,insert_wchar(char value),void,Inserts a char value into the DynAny.,"

insert_wchar
public void insert_wchar(char value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a char value into the DynAny. The IDL wchar data type is mapped to the Java char data type.

Specified by:
insert_wchar in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynEnumStub,insert_wstring(String value),void,Inserts a string value into the DynAny.,"

insert_wstring
public void insert_wstring(String value)
                    throws TypeMismatch,
                           InvalidValue
Inserts a string value into the DynAny.
 Both bounded and unbounded strings are inserted using this method.

Specified by:
insert_wstring in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
InvalidValue - if the string inserted is longer than the bound of a bounded string
TypeMismatch


"
_DynEnumStub,next(),boolean,Advances the current position to the next component.,"

next
public boolean next()
Advances the current position to the next component.
 The operation returns true while the resulting current position indicates a component, false otherwise.
 A false return value leaves the current position at -1.
 Invoking next on a DynAny without components leaves the current position at -1 and returns false.

Specified by:
next in interface DynAnyOperations


"
_DynEnumStub,rewind(),void,Is equivalent to seek(0).,"

rewind
public void rewind()
Is equivalent to seek(0).

Specified by:
rewind in interface DynAnyOperations


"
_DynEnumStub,seek(int index),boolean,Sets the current position to index.,"

seek
public boolean seek(int index)
Sets the current position to index. The current position is indexed 0 to n-1, that is,
 index zero corresponds to the first component. The operation returns true if the resulting
 current position indicates a component of the DynAny and false if index indicates
 a position that does not correspond to a component.
 Calling seek with a negative index is legal. It sets the current position to -1 to indicate
 no component and returns false. Passing a non-negative index value for a DynAny that does not
 have a component at the corresponding position sets the current position to -1 and returns false.

Specified by:
seek in interface DynAnyOperations


"
_DynEnumStub,set_as_string(String value),void,Sets the value of the DynEnum to the enumerated value whose IDL identifier is passed in the value parameter.,"

set_as_string
public void set_as_string(String value)
                   throws InvalidValue
Sets the value of the DynEnum to the enumerated value whose IDL identifier is passed in the value parameter.

Specified by:
set_as_string in interface DynEnumOperations
Throws:
InvalidValue - If value contains a string that is not a valid IDL identifier
            for the corresponding enumerated type


"
_DynEnumStub,set_as_ulong(int value),void,Sets the value of the DynEnum as the enumerated value's ordinal value.,"

set_as_ulong
public void set_as_ulong(int value)
                  throws InvalidValue
Sets the value of the DynEnum as the enumerated value's ordinal value.

Specified by:
set_as_ulong in interface DynEnumOperations
Throws:
InvalidValue - If value contains a value that is outside the range of ordinal values
            for the corresponding enumerated type


"
_DynEnumStub,to_any(),Any,Creates an any value from a DynAny object.,"

to_any
public Any to_any()
Creates an any value from a DynAny object.
 A copy of the TypeCode associated with the DynAny object is assigned to the resulting any.
 The value associated with the DynAny object is copied into the any.

Specified by:
to_any in interface DynAnyOperations
Returns:
a new Any object with the same value and TypeCode


"
_DynEnumStub,type(),TypeCode,Returns the TypeCode associated with this DynAny object.,"

type
public TypeCode type()
Returns the TypeCode associated with this DynAny object.
 A DynAny object is created with a TypeCode value assigned to it.
 This TypeCode value determines the type of the value handled through the DynAny object.
 Note that the TypeCode associated with a DynAny object is initialized at the time the
 DynAny is created and cannot be changed during lifetime of the DynAny object.

Specified by:
type in interface DynAnyOperations
Returns:
The TypeCode associated with this DynAny object


"
_DynFixedStub,_ids(),String[],Retrieves a string array containing the repository identifiers supported by this ObjectImpl object.,"

_ids
public String[] _ids()
Description copied from class: ObjectImpl
Retrieves a string array containing the repository identifiers
 supported by this ObjectImpl object.  For example,
 for a stub, this method returns information about all the
 interfaces supported by the stub.

Specified by:
_ids in class ObjectImpl
Returns:
the array of all repository identifiers supported by this
         ObjectImpl instance


"
_DynFixedStub,assign(DynAny dyn_any),void,Initializes the value associated with a DynAny object with the value associated with another DynAny object.,"

assign
public void assign(DynAny dyn_any)
            throws TypeMismatch
Initializes the value associated with a DynAny object with the value
 associated with another DynAny object.
 The current position of the target DynAny is set to zero for values that have components
 and to -1 for values that do not have components.

Specified by:
assign in interface DynAnyOperations
Parameters:
dyn_any - 
Throws:
TypeMismatch - if the type of the passed DynAny is not equivalent to the type of target DynAny


"
_DynFixedStub,component_count(),int,Returns the number of components of a DynAny.,"

component_count
public int component_count()
Returns the number of components of a DynAny.
 For a DynAny without components, it returns zero.
 The operation only counts the components at the top level.
 For example, if component_count is invoked on a DynStruct with a single member,
 the return value is 1, irrespective of the type of the member.
 
For sequences, the operation returns the current number of elements.
 For structures, exceptions, and value types, the operation returns the number of members.
 For arrays, the operation returns the number of elements.
 For unions, the operation returns 2 if the discriminator indicates that a named member is active,
 otherwise, it returns 1.
 For DynFixed and DynEnum, the operation returns zero.
 

Specified by:
component_count in interface DynAnyOperations


"
_DynFixedStub,copy(),DynAny,Creates a new DynAny object whose value is a deep copy of the DynAny on which it is invoked.,"

copy
public DynAny copy()
Creates a new DynAny object whose value is a deep copy of the DynAny on which it is invoked.
 The operation is polymorphic, that is, invoking it on one of the types derived from DynAny,
 such as DynStruct, creates the derived type but returns its reference as the DynAny base type.

Specified by:
copy in interface DynAnyOperations
Returns:
a deep copy of the DynAny object


"
_DynFixedStub,current_component(),DynAny,Returns the DynAny for the component at the current position.,"

current_component
public DynAny current_component()
                         throws TypeMismatch
Returns the DynAny for the component at the current position.
 It does not advance the current position, so repeated calls to current_component
 without an intervening call to rewind, next, or seek return the same component.
 The returned DynAny object reference can be used to get/set the value of the current component.
 If the current component represents a complex type, the returned reference can be narrowed
 based on the TypeCode to get the interface corresponding to the to the complex type.
 Calling current_component on a DynAny that cannot have components,
 such as a DynEnum or an empty exception, raises TypeMismatch.
 Calling current_component on a DynAny whose current position is -1 returns a nil reference.
 The iteration operations, together with current_component, can be used
 to dynamically compose an any value. After creating a dynamic any, such as a DynStruct,
 current_component and next can be used to initialize all the components of the value.
 Once the dynamic value is completely initialized, to_any creates the corresponding any value.

Specified by:
current_component in interface DynAnyOperations
Throws:
TypeMismatch - If called on a DynAny that cannot have components,
 such as a DynEnum or an empty exception


"
_DynFixedStub,destroy(),void,Destroys a DynAny object.,"

destroy
public void destroy()
Destroys a DynAny object.
 This operation frees any resources used to represent the data value associated with a DynAny object.
 It must be invoked on references obtained from one of the creation operations on the ORB interface
 or on a reference returned by DynAny.copy() to avoid resource leaks.
 Invoking destroy on component DynAny objects (for example, on objects returned by the
 current_component operation) does nothing.
 Destruction of a DynAny object implies destruction of all DynAny objects obtained from it.
 That is, references to components of a destroyed DynAny become invalid.
 Invocations on such references raise OBJECT_NOT_EXIST.
 It is possible to manipulate a component of a DynAny beyond the life time of the DynAny
 from which the component was obtained by making a copy of the component with the copy operation
 before destroying the DynAny from which the component was obtained.

Specified by:
destroy in interface DynAnyOperations


"
_DynFixedStub,equal(DynAny dyn_any),boolean,Compares two DynAny values for equality.,"

equal
public boolean equal(DynAny dyn_any)
Compares two DynAny values for equality.
 Two DynAny values are equal if their TypeCodes are equivalent and, recursively, all component DynAnys
 have equal values.
 The current position of the two DynAnys being compared has no effect on the result of equal.

Specified by:
equal in interface DynAnyOperations
Returns:
true of the DynAnys are equal, false otherwise


"
_DynFixedStub,from_any(Any value),void,Initializes the value associated with a DynAny object with the value contained in an any.,"

from_any
public void from_any(Any value)
              throws TypeMismatch,
                     InvalidValue
Initializes the value associated with a DynAny object with the value contained in an any.
 The current position of the target DynAny is set to zero for values that have components
 and to -1 for values that do not have components.

Specified by:
from_any in interface DynAnyOperations
Throws:
TypeMismatch - if the type of the passed Any is not equivalent to the type of target DynAny
InvalidValue - if the passed Any does not contain a legal value (such as a null string)


"
_DynFixedStub,get_any(),Any,Extracts an Any value contained in the Any represented by this DynAny.,"

get_any
public Any get_any()
            throws TypeMismatch,
                   InvalidValue
Extracts an Any value contained in the Any represented by this DynAny.

Specified by:
get_any in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynFixedStub,get_boolean(),boolean,Extracts the boolean value from this DynAny.,"

get_boolean
public boolean get_boolean()
                    throws TypeMismatch,
                           InvalidValue
Extracts the boolean value from this DynAny.

Specified by:
get_boolean in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynFixedStub,get_char(),char,Extracts the char value from this DynAny.,"

get_char
public char get_char()
              throws TypeMismatch,
                     InvalidValue
Extracts the char value from this DynAny.

Specified by:
get_char in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynFixedStub,get_double(),double,Extracts the double value from this DynAny.,"

get_double
public double get_double()
                  throws TypeMismatch,
                         InvalidValue
Extracts the double value from this DynAny.

Specified by:
get_double in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynFixedStub,get_dyn_any(),DynAny,Extracts the Any value contained in the Any represented by this DynAny and returns it wrapped into a new DynAny.,"

get_dyn_any
public DynAny get_dyn_any()
                   throws TypeMismatch,
                          InvalidValue
Extracts the Any value contained in the Any represented by this DynAny and returns it wrapped
 into a new DynAny.

Specified by:
get_dyn_any in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynFixedStub,get_float(),float,Extracts the float value from this DynAny.,"

get_float
public float get_float()
                throws TypeMismatch,
                       InvalidValue
Extracts the float value from this DynAny.

Specified by:
get_float in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynFixedStub,get_long(),int,Extracts the integer value from this DynAny.,"

get_long
public int get_long()
             throws TypeMismatch,
                    InvalidValue
Extracts the integer value from this DynAny. The IDL long data type is mapped to the Java int data type.

Specified by:
get_long in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynFixedStub,get_longlong(),long,Extracts the long value from this DynAny.,"

get_longlong
public long get_longlong()
                  throws TypeMismatch,
                         InvalidValue
Extracts the long value from this DynAny. The IDL long long data type is mapped to the Java long data type.

Specified by:
get_longlong in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynFixedStub,get_octet(),byte,Extracts the byte value from this DynAny.,"

get_octet
public byte get_octet()
               throws TypeMismatch,
                      InvalidValue
Extracts the byte value from this DynAny. The IDL octet data type is mapped to the Java byte data type.

Specified by:
get_octet in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynFixedStub,get_reference(),Object,Extracts the reference to a CORBA Object from this DynAny.,"

get_reference
public Object get_reference()
                     throws TypeMismatch,
                            InvalidValue
Extracts the reference to a CORBA Object from this DynAny.

Specified by:
get_reference in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynFixedStub,get_short(),short,Extracts the short value from this DynAny.,"

get_short
public short get_short()
                throws TypeMismatch,
                       InvalidValue
Extracts the short value from this DynAny.

Specified by:
get_short in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynFixedStub,get_string(),String,Extracts the string value from this DynAny.,"

get_string
public String get_string()
                  throws TypeMismatch,
                         InvalidValue
Extracts the string value from this DynAny.
 Both bounded and unbounded strings are extracted using this method.

Specified by:
get_string in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynFixedStub,get_typecode(),TypeCode,Extracts the TypeCode object from this DynAny.,"

get_typecode
public TypeCode get_typecode()
                      throws TypeMismatch,
                             InvalidValue
Extracts the TypeCode object from this DynAny.

Specified by:
get_typecode in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynFixedStub,get_ulong(),int,Extracts the integer value from this DynAny.,"

get_ulong
public int get_ulong()
              throws TypeMismatch,
                     InvalidValue
Extracts the integer value from this DynAny. The IDL ulong data type is mapped to the Java int data type.

Specified by:
get_ulong in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynFixedStub,get_ulonglong(),long,Extracts the long value from this DynAny.,"

get_ulonglong
public long get_ulonglong()
                   throws TypeMismatch,
                          InvalidValue
Extracts the long value from this DynAny.
 The IDL unsigned long long data type is mapped to the Java long data type.

Specified by:
get_ulonglong in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynFixedStub,get_ushort(),short,Extracts the short value from this DynAny.,"

get_ushort
public short get_ushort()
                 throws TypeMismatch,
                        InvalidValue
Extracts the short value from this DynAny. The IDL ushort data type is mapped to the Java short data type.

Specified by:
get_ushort in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynFixedStub,get_val(),Serializable,Extracts a Serializable object from this DynAny.,"

get_val
public Serializable get_val()
                     throws TypeMismatch,
                            InvalidValue
Extracts a Serializable object from this DynAny.
 The IDL ValueBase type is mapped to the Java Serializable type.

Specified by:
get_val in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynFixedStub,get_value(),String,Returns the value of a DynFixed.,"

get_value
public String get_value()
Returns the value of a DynFixed.

Specified by:
get_value in interface DynFixedOperations


"
_DynFixedStub,get_wchar(),char,Extracts the long value from this DynAny.,"

get_wchar
public char get_wchar()
               throws TypeMismatch,
                      InvalidValue
Extracts the long value from this DynAny. The IDL wchar data type is mapped to the Java char data type.

Specified by:
get_wchar in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynFixedStub,get_wstring(),String,Extracts the string value from this DynAny.,"

get_wstring
public String get_wstring()
                   throws TypeMismatch,
                          InvalidValue
Extracts the string value from this DynAny.
 Both bounded and unbounded strings are extracted using this method.

Specified by:
get_wstring in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue


"
_DynFixedStub,insert_any(Any value),void,Inserts an Any value into the Any represented by this DynAny.,"

insert_any
public void insert_any(Any value)
                throws TypeMismatch,
                       InvalidValue
Inserts an Any value into the Any represented by this DynAny.

Specified by:
insert_any in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynFixedStub,insert_boolean(boolean value),void,Inserts a boolean value into the DynAny.,"

insert_boolean
public void insert_boolean(boolean value)
                    throws TypeMismatch,
                           InvalidValue
Inserts a boolean value into the DynAny.

Specified by:
insert_boolean in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynFixedStub,insert_char(char value),void,Inserts a char value into the DynAny.,"

insert_char
public void insert_char(char value)
                 throws TypeMismatch,
                        InvalidValue
Inserts a char value into the DynAny.

Specified by:
insert_char in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynFixedStub,insert_double(double value),void,Inserts a double value into the DynAny.,"

insert_double
public void insert_double(double value)
                   throws TypeMismatch,
                          InvalidValue
Inserts a double value into the DynAny.

Specified by:
insert_double in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynFixedStub,insert_dyn_any(DynAny value),void,Inserts the Any value contained in the parameter DynAny into the Any represented by this DynAny.,"

insert_dyn_any
public void insert_dyn_any(DynAny value)
                    throws TypeMismatch,
                           InvalidValue
Inserts the Any value contained in the parameter DynAny into the Any represented by this DynAny.

Specified by:
insert_dyn_any in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynFixedStub,insert_float(float value),void,Inserts a float value into the DynAny.,"

insert_float
public void insert_float(float value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a float value into the DynAny.

Specified by:
insert_float in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynFixedStub,insert_long(int value),void,Inserts an integer value into the DynAny.,"

insert_long
public void insert_long(int value)
                 throws TypeMismatch,
                        InvalidValue
Inserts an integer value into the DynAny. The IDL long data type is mapped to the Java int data type.

Specified by:
insert_long in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynFixedStub,insert_longlong(long value),void,Inserts a long value into the DynAny.,"

insert_longlong
public void insert_longlong(long value)
                     throws TypeMismatch,
                            InvalidValue
Inserts a long value into the DynAny. The IDL long long data type is mapped to the Java long data type.

Specified by:
insert_longlong in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynFixedStub,insert_octet(byte value),void,Inserts a byte value into the DynAny.,"

insert_octet
public void insert_octet(byte value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a byte value into the DynAny. The IDL octet data type is mapped to the Java byte data type.

Specified by:
insert_octet in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynFixedStub,insert_reference(Object value),void,Inserts a reference to a CORBA object into the DynAny.,"

insert_reference
public void insert_reference(Object value)
                      throws TypeMismatch,
                             InvalidValue
Inserts a reference to a CORBA object into the DynAny.

Specified by:
insert_reference in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynFixedStub,insert_short(short value),void,Inserts a short value into the DynAny.,"

insert_short
public void insert_short(short value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a short value into the DynAny.

Specified by:
insert_short in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynFixedStub,insert_string(String value),void,Inserts a string value into the DynAny.,"

insert_string
public void insert_string(String value)
                   throws TypeMismatch,
                          InvalidValue
Inserts a string value into the DynAny.
 Both bounded and unbounded strings are inserted using this method.

Specified by:
insert_string in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
InvalidValue - if the string inserted is longer than the bound of a bounded string
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynFixedStub,insert_typecode(TypeCode value),void,Inserts a TypeCode object into the DynAny.,"

insert_typecode
public void insert_typecode(TypeCode value)
                     throws TypeMismatch,
                            InvalidValue
Inserts a TypeCode object into the DynAny.

Specified by:
insert_typecode in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynFixedStub,insert_ulong(int value),void,Inserts an integer value into the DynAny.,"

insert_ulong
public void insert_ulong(int value)
                  throws TypeMismatch,
                         InvalidValue
Inserts an integer value into the DynAny. The IDL ulong data type is mapped to the Java int data type.

Specified by:
insert_ulong in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynFixedStub,insert_ulonglong(long value),void,Inserts a long value into the DynAny.,"

insert_ulonglong
public void insert_ulonglong(long value)
                      throws TypeMismatch,
                             InvalidValue
Inserts a long value into the DynAny.
 The IDL unsigned long long data type is mapped to the Java long data type.

Specified by:
insert_ulonglong in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynFixedStub,insert_ushort(short value),void,Inserts a short value into the DynAny.,"

insert_ushort
public void insert_ushort(short value)
                   throws TypeMismatch,
                          InvalidValue
Inserts a short value into the DynAny. The IDL ushort data type is mapped to the Java short data type.

Specified by:
insert_ushort in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynFixedStub,insert_val(Serializable value),void,Inserts a reference to a Serializable object into this DynAny.,"

insert_val
public void insert_val(Serializable value)
                throws TypeMismatch,
                       InvalidValue
Inserts a reference to a Serializable object into this DynAny.
 The IDL ValueBase type is mapped to the Java Serializable type.

Specified by:
insert_val in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynFixedStub,insert_wchar(char value),void,Inserts a char value into the DynAny.,"

insert_wchar
public void insert_wchar(char value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a char value into the DynAny. The IDL wchar data type is mapped to the Java char data type.

Specified by:
insert_wchar in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynFixedStub,insert_wstring(String value),void,Inserts a string value into the DynAny.,"

insert_wstring
public void insert_wstring(String value)
                    throws TypeMismatch,
                           InvalidValue
Inserts a string value into the DynAny.
 Both bounded and unbounded strings are inserted using this method.

Specified by:
insert_wstring in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
InvalidValue - if the string inserted is longer than the bound of a bounded string
TypeMismatch


"
_DynFixedStub,next(),boolean,Advances the current position to the next component.,"

next
public boolean next()
Advances the current position to the next component.
 The operation returns true while the resulting current position indicates a component, false otherwise.
 A false return value leaves the current position at -1.
 Invoking next on a DynAny without components leaves the current position at -1 and returns false.

Specified by:
next in interface DynAnyOperations


"
_DynFixedStub,rewind(),void,Is equivalent to seek(0).,"

rewind
public void rewind()
Is equivalent to seek(0).

Specified by:
rewind in interface DynAnyOperations


"
_DynFixedStub,seek(int index),boolean,Sets the current position to index.,"

seek
public boolean seek(int index)
Sets the current position to index. The current position is indexed 0 to n-1, that is,
 index zero corresponds to the first component. The operation returns true if the resulting
 current position indicates a component of the DynAny and false if index indicates
 a position that does not correspond to a component.
 Calling seek with a negative index is legal. It sets the current position to -1 to indicate
 no component and returns false. Passing a non-negative index value for a DynAny that does not
 have a component at the corresponding position sets the current position to -1 and returns false.

Specified by:
seek in interface DynAnyOperations


"
_DynFixedStub,set_value(String val),boolean,Sets the value of the DynFixed.,"

set_value
public boolean set_value(String val)
                  throws TypeMismatch,
                         InvalidValue
Sets the value of the DynFixed.
 The val string must contain a fixed string constant in the same format as used for IDL fixed-point literals.
 However, the trailing d or D is optional. The return value is true if val can be represented as the DynFixed
 without loss of precision. If val has more fractional digits than can be represented in the DynFixed,
 fractional digits are truncated and the return value is false.

Specified by:
set_value in interface DynFixedOperations
Throws:
TypeMismatch - If val does not contain a valid fixed-point literal or contains extraneous
            characters other than leading or trailing white space
InvalidValue - If val contains a value whose scale exceeds that of the DynFixed
            or is not initialized


"
_DynFixedStub,to_any(),Any,Creates an any value from a DynAny object.,"

to_any
public Any to_any()
Creates an any value from a DynAny object.
 A copy of the TypeCode associated with the DynAny object is assigned to the resulting any.
 The value associated with the DynAny object is copied into the any.

Specified by:
to_any in interface DynAnyOperations
Returns:
a new Any object with the same value and TypeCode


"
_DynFixedStub,type(),TypeCode,Returns the TypeCode associated with this DynAny object.,"

type
public TypeCode type()
Returns the TypeCode associated with this DynAny object.
 A DynAny object is created with a TypeCode value assigned to it.
 This TypeCode value determines the type of the value handled through the DynAny object.
 Note that the TypeCode associated with a DynAny object is initialized at the time the
 DynAny is created and cannot be changed during lifetime of the DynAny object.

Specified by:
type in interface DynAnyOperations
Returns:
The TypeCode associated with this DynAny object


"
_DynSequenceStub,_ids(),String[],Retrieves a string array containing the repository identifiers supported by this ObjectImpl object.,"

_ids
public String[] _ids()
Description copied from class: ObjectImpl
Retrieves a string array containing the repository identifiers
 supported by this ObjectImpl object.  For example,
 for a stub, this method returns information about all the
 interfaces supported by the stub.

Specified by:
_ids in class ObjectImpl
Returns:
the array of all repository identifiers supported by this
         ObjectImpl instance


"
_DynSequenceStub,assign(DynAny dyn_any),void,Initializes the value associated with a DynAny object with the value associated with another DynAny object.,"

assign
public void assign(DynAny dyn_any)
            throws TypeMismatch
Initializes the value associated with a DynAny object with the value
 associated with another DynAny object.
 The current position of the target DynAny is set to zero for values that have components
 and to -1 for values that do not have components.

Specified by:
assign in interface DynAnyOperations
Parameters:
dyn_any - 
Throws:
TypeMismatch - if the type of the passed DynAny is not equivalent to the type of target DynAny


"
_DynSequenceStub,component_count(),int,Returns the number of components of a DynAny.,"

component_count
public int component_count()
Returns the number of components of a DynAny.
 For a DynAny without components, it returns zero.
 The operation only counts the components at the top level.
 For example, if component_count is invoked on a DynStruct with a single member,
 the return value is 1, irrespective of the type of the member.
 
For sequences, the operation returns the current number of elements.
 For structures, exceptions, and value types, the operation returns the number of members.
 For arrays, the operation returns the number of elements.
 For unions, the operation returns 2 if the discriminator indicates that a named member is active,
 otherwise, it returns 1.
 For DynFixed and DynEnum, the operation returns zero.
 

Specified by:
component_count in interface DynAnyOperations


"
_DynSequenceStub,copy(),DynAny,Creates a new DynAny object whose value is a deep copy of the DynAny on which it is invoked.,"

copy
public DynAny copy()
Creates a new DynAny object whose value is a deep copy of the DynAny on which it is invoked.
 The operation is polymorphic, that is, invoking it on one of the types derived from DynAny,
 such as DynStruct, creates the derived type but returns its reference as the DynAny base type.

Specified by:
copy in interface DynAnyOperations
Returns:
a deep copy of the DynAny object


"
_DynSequenceStub,current_component(),DynAny,Returns the DynAny for the component at the current position.,"

current_component
public DynAny current_component()
                         throws TypeMismatch
Returns the DynAny for the component at the current position.
 It does not advance the current position, so repeated calls to current_component
 without an intervening call to rewind, next, or seek return the same component.
 The returned DynAny object reference can be used to get/set the value of the current component.
 If the current component represents a complex type, the returned reference can be narrowed
 based on the TypeCode to get the interface corresponding to the to the complex type.
 Calling current_component on a DynAny that cannot have components,
 such as a DynEnum or an empty exception, raises TypeMismatch.
 Calling current_component on a DynAny whose current position is -1 returns a nil reference.
 The iteration operations, together with current_component, can be used
 to dynamically compose an any value. After creating a dynamic any, such as a DynStruct,
 current_component and next can be used to initialize all the components of the value.
 Once the dynamic value is completely initialized, to_any creates the corresponding any value.

Specified by:
current_component in interface DynAnyOperations
Throws:
TypeMismatch - If called on a DynAny that cannot have components,
 such as a DynEnum or an empty exception


"
_DynSequenceStub,destroy(),void,Destroys a DynAny object.,"

destroy
public void destroy()
Destroys a DynAny object.
 This operation frees any resources used to represent the data value associated with a DynAny object.
 It must be invoked on references obtained from one of the creation operations on the ORB interface
 or on a reference returned by DynAny.copy() to avoid resource leaks.
 Invoking destroy on component DynAny objects (for example, on objects returned by the
 current_component operation) does nothing.
 Destruction of a DynAny object implies destruction of all DynAny objects obtained from it.
 That is, references to components of a destroyed DynAny become invalid.
 Invocations on such references raise OBJECT_NOT_EXIST.
 It is possible to manipulate a component of a DynAny beyond the life time of the DynAny
 from which the component was obtained by making a copy of the component with the copy operation
 before destroying the DynAny from which the component was obtained.

Specified by:
destroy in interface DynAnyOperations


"
_DynSequenceStub,equal(DynAny dyn_any),boolean,Compares two DynAny values for equality.,"

equal
public boolean equal(DynAny dyn_any)
Compares two DynAny values for equality.
 Two DynAny values are equal if their TypeCodes are equivalent and, recursively, all component DynAnys
 have equal values.
 The current position of the two DynAnys being compared has no effect on the result of equal.

Specified by:
equal in interface DynAnyOperations
Returns:
true of the DynAnys are equal, false otherwise


"
_DynSequenceStub,from_any(Any value),void,Initializes the value associated with a DynAny object with the value contained in an any.,"

from_any
public void from_any(Any value)
              throws TypeMismatch,
                     InvalidValue
Initializes the value associated with a DynAny object with the value contained in an any.
 The current position of the target DynAny is set to zero for values that have components
 and to -1 for values that do not have components.

Specified by:
from_any in interface DynAnyOperations
Throws:
TypeMismatch - if the type of the passed Any is not equivalent to the type of target DynAny
InvalidValue - if the passed Any does not contain a legal value (such as a null string)


"
_DynSequenceStub,get_any(),Any,Extracts an Any value contained in the Any represented by this DynAny.,"

get_any
public Any get_any()
            throws TypeMismatch,
                   InvalidValue
Extracts an Any value contained in the Any represented by this DynAny.

Specified by:
get_any in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynSequenceStub,get_boolean(),boolean,Extracts the boolean value from this DynAny.,"

get_boolean
public boolean get_boolean()
                    throws TypeMismatch,
                           InvalidValue
Extracts the boolean value from this DynAny.

Specified by:
get_boolean in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynSequenceStub,get_char(),char,Extracts the char value from this DynAny.,"

get_char
public char get_char()
              throws TypeMismatch,
                     InvalidValue
Extracts the char value from this DynAny.

Specified by:
get_char in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynSequenceStub,get_double(),double,Extracts the double value from this DynAny.,"

get_double
public double get_double()
                  throws TypeMismatch,
                         InvalidValue
Extracts the double value from this DynAny.

Specified by:
get_double in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynSequenceStub,get_dyn_any(),DynAny,Extracts the Any value contained in the Any represented by this DynAny and returns it wrapped into a new DynAny.,"

get_dyn_any
public DynAny get_dyn_any()
                   throws TypeMismatch,
                          InvalidValue
Extracts the Any value contained in the Any represented by this DynAny and returns it wrapped
 into a new DynAny.

Specified by:
get_dyn_any in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynSequenceStub,get_elements_as_dyn_any(),DynAny[],Returns the DynAnys representing the elements of the sequence.,"

get_elements_as_dyn_any
public DynAny[] get_elements_as_dyn_any()
Returns the DynAnys representing the elements of the sequence.

Specified by:
get_elements_as_dyn_any in interface DynSequenceOperations


"
_DynSequenceStub,get_elements(),Any[],Returns the elements of the sequence.,"

get_elements
public Any[] get_elements()
Returns the elements of the sequence.

Specified by:
get_elements in interface DynSequenceOperations


"
_DynSequenceStub,get_float(),float,Extracts the float value from this DynAny.,"

get_float
public float get_float()
                throws TypeMismatch,
                       InvalidValue
Extracts the float value from this DynAny.

Specified by:
get_float in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynSequenceStub,get_length(),int,Returns the current length of the sequence.,"

get_length
public int get_length()
Returns the current length of the sequence.

Specified by:
get_length in interface DynSequenceOperations


"
_DynSequenceStub,get_long(),int,Extracts the integer value from this DynAny.,"

get_long
public int get_long()
             throws TypeMismatch,
                    InvalidValue
Extracts the integer value from this DynAny. The IDL long data type is mapped to the Java int data type.

Specified by:
get_long in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynSequenceStub,get_longlong(),long,Extracts the long value from this DynAny.,"

get_longlong
public long get_longlong()
                  throws TypeMismatch,
                         InvalidValue
Extracts the long value from this DynAny. The IDL long long data type is mapped to the Java long data type.

Specified by:
get_longlong in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynSequenceStub,get_octet(),byte,Extracts the byte value from this DynAny.,"

get_octet
public byte get_octet()
               throws TypeMismatch,
                      InvalidValue
Extracts the byte value from this DynAny. The IDL octet data type is mapped to the Java byte data type.

Specified by:
get_octet in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynSequenceStub,get_reference(),Object,Extracts the reference to a CORBA Object from this DynAny.,"

get_reference
public Object get_reference()
                     throws TypeMismatch,
                            InvalidValue
Extracts the reference to a CORBA Object from this DynAny.

Specified by:
get_reference in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynSequenceStub,get_short(),short,Extracts the short value from this DynAny.,"

get_short
public short get_short()
                throws TypeMismatch,
                       InvalidValue
Extracts the short value from this DynAny.

Specified by:
get_short in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynSequenceStub,get_string(),String,Extracts the string value from this DynAny.,"

get_string
public String get_string()
                  throws TypeMismatch,
                         InvalidValue
Extracts the string value from this DynAny.
 Both bounded and unbounded strings are extracted using this method.

Specified by:
get_string in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynSequenceStub,get_typecode(),TypeCode,Extracts the TypeCode object from this DynAny.,"

get_typecode
public TypeCode get_typecode()
                      throws TypeMismatch,
                             InvalidValue
Extracts the TypeCode object from this DynAny.

Specified by:
get_typecode in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynSequenceStub,get_ulong(),int,Extracts the integer value from this DynAny.,"

get_ulong
public int get_ulong()
              throws TypeMismatch,
                     InvalidValue
Extracts the integer value from this DynAny. The IDL ulong data type is mapped to the Java int data type.

Specified by:
get_ulong in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynSequenceStub,get_ulonglong(),long,Extracts the long value from this DynAny.,"

get_ulonglong
public long get_ulonglong()
                   throws TypeMismatch,
                          InvalidValue
Extracts the long value from this DynAny.
 The IDL unsigned long long data type is mapped to the Java long data type.

Specified by:
get_ulonglong in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynSequenceStub,get_ushort(),short,Extracts the short value from this DynAny.,"

get_ushort
public short get_ushort()
                 throws TypeMismatch,
                        InvalidValue
Extracts the short value from this DynAny. The IDL ushort data type is mapped to the Java short data type.

Specified by:
get_ushort in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynSequenceStub,get_val(),Serializable,Extracts a Serializable object from this DynAny.,"

get_val
public Serializable get_val()
                     throws TypeMismatch,
                            InvalidValue
Extracts a Serializable object from this DynAny.
 The IDL ValueBase type is mapped to the Java Serializable type.

Specified by:
get_val in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynSequenceStub,get_wchar(),char,Extracts the long value from this DynAny.,"

get_wchar
public char get_wchar()
               throws TypeMismatch,
                      InvalidValue
Extracts the long value from this DynAny. The IDL wchar data type is mapped to the Java char data type.

Specified by:
get_wchar in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynSequenceStub,get_wstring(),String,Extracts the string value from this DynAny.,"

get_wstring
public String get_wstring()
                   throws TypeMismatch,
                          InvalidValue
Extracts the string value from this DynAny.
 Both bounded and unbounded strings are extracted using this method.

Specified by:
get_wstring in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue


"
_DynSequenceStub,insert_any(Any value),void,Inserts an Any value into the Any represented by this DynAny.,"

insert_any
public void insert_any(Any value)
                throws TypeMismatch,
                       InvalidValue
Inserts an Any value into the Any represented by this DynAny.

Specified by:
insert_any in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynSequenceStub,insert_boolean(boolean value),void,Inserts a boolean value into the DynAny.,"

insert_boolean
public void insert_boolean(boolean value)
                    throws TypeMismatch,
                           InvalidValue
Inserts a boolean value into the DynAny.

Specified by:
insert_boolean in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynSequenceStub,insert_char(char value),void,Inserts a char value into the DynAny.,"

insert_char
public void insert_char(char value)
                 throws TypeMismatch,
                        InvalidValue
Inserts a char value into the DynAny.

Specified by:
insert_char in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynSequenceStub,insert_double(double value),void,Inserts a double value into the DynAny.,"

insert_double
public void insert_double(double value)
                   throws TypeMismatch,
                          InvalidValue
Inserts a double value into the DynAny.

Specified by:
insert_double in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynSequenceStub,insert_dyn_any(DynAny value),void,Inserts the Any value contained in the parameter DynAny into the Any represented by this DynAny.,"

insert_dyn_any
public void insert_dyn_any(DynAny value)
                    throws TypeMismatch,
                           InvalidValue
Inserts the Any value contained in the parameter DynAny into the Any represented by this DynAny.

Specified by:
insert_dyn_any in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynSequenceStub,insert_float(float value),void,Inserts a float value into the DynAny.,"

insert_float
public void insert_float(float value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a float value into the DynAny.

Specified by:
insert_float in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynSequenceStub,insert_long(int value),void,Inserts an integer value into the DynAny.,"

insert_long
public void insert_long(int value)
                 throws TypeMismatch,
                        InvalidValue
Inserts an integer value into the DynAny. The IDL long data type is mapped to the Java int data type.

Specified by:
insert_long in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynSequenceStub,insert_longlong(long value),void,Inserts a long value into the DynAny.,"

insert_longlong
public void insert_longlong(long value)
                     throws TypeMismatch,
                            InvalidValue
Inserts a long value into the DynAny. The IDL long long data type is mapped to the Java long data type.

Specified by:
insert_longlong in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynSequenceStub,insert_octet(byte value),void,Inserts a byte value into the DynAny.,"

insert_octet
public void insert_octet(byte value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a byte value into the DynAny. The IDL octet data type is mapped to the Java byte data type.

Specified by:
insert_octet in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynSequenceStub,insert_reference(Object value),void,Inserts a reference to a CORBA object into the DynAny.,"

insert_reference
public void insert_reference(Object value)
                      throws TypeMismatch,
                             InvalidValue
Inserts a reference to a CORBA object into the DynAny.

Specified by:
insert_reference in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynSequenceStub,insert_short(short value),void,Inserts a short value into the DynAny.,"

insert_short
public void insert_short(short value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a short value into the DynAny.

Specified by:
insert_short in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynSequenceStub,insert_string(String value),void,Inserts a string value into the DynAny.,"

insert_string
public void insert_string(String value)
                   throws TypeMismatch,
                          InvalidValue
Inserts a string value into the DynAny.
 Both bounded and unbounded strings are inserted using this method.

Specified by:
insert_string in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
InvalidValue - if the string inserted is longer than the bound of a bounded string
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynSequenceStub,insert_typecode(TypeCode value),void,Inserts a TypeCode object into the DynAny.,"

insert_typecode
public void insert_typecode(TypeCode value)
                     throws TypeMismatch,
                            InvalidValue
Inserts a TypeCode object into the DynAny.

Specified by:
insert_typecode in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynSequenceStub,insert_ulong(int value),void,Inserts an integer value into the DynAny.,"

insert_ulong
public void insert_ulong(int value)
                  throws TypeMismatch,
                         InvalidValue
Inserts an integer value into the DynAny. The IDL ulong data type is mapped to the Java int data type.

Specified by:
insert_ulong in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynSequenceStub,insert_ulonglong(long value),void,Inserts a long value into the DynAny.,"

insert_ulonglong
public void insert_ulonglong(long value)
                      throws TypeMismatch,
                             InvalidValue
Inserts a long value into the DynAny.
 The IDL unsigned long long data type is mapped to the Java long data type.

Specified by:
insert_ulonglong in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynSequenceStub,insert_ushort(short value),void,Inserts a short value into the DynAny.,"

insert_ushort
public void insert_ushort(short value)
                   throws TypeMismatch,
                          InvalidValue
Inserts a short value into the DynAny. The IDL ushort data type is mapped to the Java short data type.

Specified by:
insert_ushort in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynSequenceStub,insert_val(Serializable value),void,Inserts a reference to a Serializable object into this DynAny.,"

insert_val
public void insert_val(Serializable value)
                throws TypeMismatch,
                       InvalidValue
Inserts a reference to a Serializable object into this DynAny.
 The IDL ValueBase type is mapped to the Java Serializable type.

Specified by:
insert_val in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynSequenceStub,insert_wchar(char value),void,Inserts a char value into the DynAny.,"

insert_wchar
public void insert_wchar(char value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a char value into the DynAny. The IDL wchar data type is mapped to the Java char data type.

Specified by:
insert_wchar in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynSequenceStub,insert_wstring(String value),void,Inserts a string value into the DynAny.,"

insert_wstring
public void insert_wstring(String value)
                    throws TypeMismatch,
                           InvalidValue
Inserts a string value into the DynAny.
 Both bounded and unbounded strings are inserted using this method.

Specified by:
insert_wstring in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
InvalidValue - if the string inserted is longer than the bound of a bounded string
TypeMismatch


"
_DynSequenceStub,next(),boolean,Advances the current position to the next component.,"

next
public boolean next()
Advances the current position to the next component.
 The operation returns true while the resulting current position indicates a component, false otherwise.
 A false return value leaves the current position at -1.
 Invoking next on a DynAny without components leaves the current position at -1 and returns false.

Specified by:
next in interface DynAnyOperations


"
_DynSequenceStub,rewind(),void,Is equivalent to seek(0).,"

rewind
public void rewind()
Is equivalent to seek(0).

Specified by:
rewind in interface DynAnyOperations


"
_DynSequenceStub,seek(int index),boolean,Sets the current position to index.,"

seek
public boolean seek(int index)
Sets the current position to index. The current position is indexed 0 to n-1, that is,
 index zero corresponds to the first component. The operation returns true if the resulting
 current position indicates a component of the DynAny and false if index indicates
 a position that does not correspond to a component.
 Calling seek with a negative index is legal. It sets the current position to -1 to indicate
 no component and returns false. Passing a non-negative index value for a DynAny that does not
 have a component at the corresponding position sets the current position to -1 and returns false.

Specified by:
seek in interface DynAnyOperations


"
_DynSequenceStub,set_elements_as_dyn_any(DynAny[] value),void,Sets the elements of a sequence using DynAnys.,"

set_elements_as_dyn_any
public void set_elements_as_dyn_any(DynAny[] value)
                             throws TypeMismatch,
                                    InvalidValue
Sets the elements of a sequence using DynAnys.
 The length of the DynSequence is set to the length of value. The current position is set to zero
 if value has non-zero length and to -1 if value is a zero-length sequence.

Specified by:
set_elements_as_dyn_any in interface DynSequenceOperations
Throws:
TypeMismatch - if value contains one or more elements whose TypeCode is not equivalent
            to the element TypeCode of the DynSequence
InvalidValue - if the length of value exceeds the bound of a bounded sequence


"
_DynSequenceStub,set_elements(Any[] value),void,Sets the elements of a sequence.,"

set_elements
public void set_elements(Any[] value)
                  throws TypeMismatch,
                         InvalidValue
Sets the elements of a sequence.
 The length of the DynSequence is set to the length of value. The current position is set to zero
 if value has non-zero length and to -1 if value is a zero-length sequence.

Specified by:
set_elements in interface DynSequenceOperations
Throws:
TypeMismatch - if value contains one or more elements whose TypeCode is not equivalent
            to the element TypeCode of the DynSequence
InvalidValue - if the length of value exceeds the bound of a bounded sequence


"
_DynSequenceStub,set_length(int len),void,Sets the length of the sequence.,"

set_length
public void set_length(int len)
                throws InvalidValue
Sets the length of the sequence.
 Increasing the length of a sequence adds new elements at the tail without affecting the values
 of already existing elements. Newly added elements are default-initialized.
 Increasing the length of a sequence sets the current position to the first newly-added element
 if the previous current position was -1. Otherwise, if the previous current position was not -1,
 the current position is not affected.
 Decreasing the length of a sequence removes elements from the tail without affecting the value
 of those elements that remain. The new current position after decreasing the length of a sequence
 is determined as follows:
 
If the length of the sequence is set to zero, the current position is set to -1.
 If the current position is -1 before decreasing the length, it remains at -1.
 If the current position indicates a valid element and that element is not removed when the length
     is decreased, the current position remains unaffected.
 If the current position indicates a valid element and that element is removed,
     the current position is set to -1.
 

Specified by:
set_length in interface DynSequenceOperations
Throws:
InvalidValue - if this is a bounded sequence and len is larger than the bound


"
_DynSequenceStub,to_any(),Any,Creates an any value from a DynAny object.,"

to_any
public Any to_any()
Creates an any value from a DynAny object.
 A copy of the TypeCode associated with the DynAny object is assigned to the resulting any.
 The value associated with the DynAny object is copied into the any.

Specified by:
to_any in interface DynAnyOperations
Returns:
a new Any object with the same value and TypeCode


"
_DynSequenceStub,type(),TypeCode,Returns the TypeCode associated with this DynAny object.,"

type
public TypeCode type()
Returns the TypeCode associated with this DynAny object.
 A DynAny object is created with a TypeCode value assigned to it.
 This TypeCode value determines the type of the value handled through the DynAny object.
 Note that the TypeCode associated with a DynAny object is initialized at the time the
 DynAny is created and cannot be changed during lifetime of the DynAny object.

Specified by:
type in interface DynAnyOperations
Returns:
The TypeCode associated with this DynAny object


"
_DynStructStub,_ids(),String[],Retrieves a string array containing the repository identifiers supported by this ObjectImpl object.,"

_ids
public String[] _ids()
Description copied from class: ObjectImpl
Retrieves a string array containing the repository identifiers
 supported by this ObjectImpl object.  For example,
 for a stub, this method returns information about all the
 interfaces supported by the stub.

Specified by:
_ids in class ObjectImpl
Returns:
the array of all repository identifiers supported by this
         ObjectImpl instance


"
_DynStructStub,assign(DynAny dyn_any),void,Initializes the value associated with a DynAny object with the value associated with another DynAny object.,"

assign
public void assign(DynAny dyn_any)
            throws TypeMismatch
Initializes the value associated with a DynAny object with the value
 associated with another DynAny object.
 The current position of the target DynAny is set to zero for values that have components
 and to -1 for values that do not have components.

Specified by:
assign in interface DynAnyOperations
Parameters:
dyn_any - 
Throws:
TypeMismatch - if the type of the passed DynAny is not equivalent to the type of target DynAny


"
_DynStructStub,component_count(),int,Returns the number of components of a DynAny.,"

component_count
public int component_count()
Returns the number of components of a DynAny.
 For a DynAny without components, it returns zero.
 The operation only counts the components at the top level.
 For example, if component_count is invoked on a DynStruct with a single member,
 the return value is 1, irrespective of the type of the member.
 
For sequences, the operation returns the current number of elements.
 For structures, exceptions, and value types, the operation returns the number of members.
 For arrays, the operation returns the number of elements.
 For unions, the operation returns 2 if the discriminator indicates that a named member is active,
 otherwise, it returns 1.
 For DynFixed and DynEnum, the operation returns zero.
 

Specified by:
component_count in interface DynAnyOperations


"
_DynStructStub,copy(),DynAny,Creates a new DynAny object whose value is a deep copy of the DynAny on which it is invoked.,"

copy
public DynAny copy()
Creates a new DynAny object whose value is a deep copy of the DynAny on which it is invoked.
 The operation is polymorphic, that is, invoking it on one of the types derived from DynAny,
 such as DynStruct, creates the derived type but returns its reference as the DynAny base type.

Specified by:
copy in interface DynAnyOperations
Returns:
a deep copy of the DynAny object


"
_DynStructStub,current_component(),DynAny,Returns the DynAny for the component at the current position.,"

current_component
public DynAny current_component()
                         throws TypeMismatch
Returns the DynAny for the component at the current position.
 It does not advance the current position, so repeated calls to current_component
 without an intervening call to rewind, next, or seek return the same component.
 The returned DynAny object reference can be used to get/set the value of the current component.
 If the current component represents a complex type, the returned reference can be narrowed
 based on the TypeCode to get the interface corresponding to the to the complex type.
 Calling current_component on a DynAny that cannot have components,
 such as a DynEnum or an empty exception, raises TypeMismatch.
 Calling current_component on a DynAny whose current position is -1 returns a nil reference.
 The iteration operations, together with current_component, can be used
 to dynamically compose an any value. After creating a dynamic any, such as a DynStruct,
 current_component and next can be used to initialize all the components of the value.
 Once the dynamic value is completely initialized, to_any creates the corresponding any value.

Specified by:
current_component in interface DynAnyOperations
Throws:
TypeMismatch - If called on a DynAny that cannot have components,
 such as a DynEnum or an empty exception


"
_DynStructStub,current_member_kind(),TCKind,Returns the TCKind associated with the member at the current position.,"

current_member_kind
public TCKind current_member_kind()
                           throws TypeMismatch,
                                  InvalidValue
Returns the TCKind associated with the member at the current position.

Specified by:
current_member_kind in interface DynStructOperations
Throws:
TypeMismatch - if the DynStruct represents an empty exception.
InvalidValue - if the current position does not indicate a member


"
_DynStructStub,current_member_name(),String,Returns the name of the member at the current position.,"

current_member_name
public String current_member_name()
                           throws TypeMismatch,
                                  InvalidValue
Returns the name of the member at the current position.
 This operation may return an empty string since the TypeCode of the value being
 manipulated may not contain the names of members.

Specified by:
current_member_name in interface DynStructOperations
Throws:
TypeMismatch - if the DynStruct represents an empty exception.
InvalidValue - if the current position does not indicate a member


"
_DynStructStub,destroy(),void,Destroys a DynAny object.,"

destroy
public void destroy()
Destroys a DynAny object.
 This operation frees any resources used to represent the data value associated with a DynAny object.
 It must be invoked on references obtained from one of the creation operations on the ORB interface
 or on a reference returned by DynAny.copy() to avoid resource leaks.
 Invoking destroy on component DynAny objects (for example, on objects returned by the
 current_component operation) does nothing.
 Destruction of a DynAny object implies destruction of all DynAny objects obtained from it.
 That is, references to components of a destroyed DynAny become invalid.
 Invocations on such references raise OBJECT_NOT_EXIST.
 It is possible to manipulate a component of a DynAny beyond the life time of the DynAny
 from which the component was obtained by making a copy of the component with the copy operation
 before destroying the DynAny from which the component was obtained.

Specified by:
destroy in interface DynAnyOperations


"
_DynStructStub,equal(DynAny dyn_any),boolean,Compares two DynAny values for equality.,"

equal
public boolean equal(DynAny dyn_any)
Compares two DynAny values for equality.
 Two DynAny values are equal if their TypeCodes are equivalent and, recursively, all component DynAnys
 have equal values.
 The current position of the two DynAnys being compared has no effect on the result of equal.

Specified by:
equal in interface DynAnyOperations
Returns:
true of the DynAnys are equal, false otherwise


"
_DynStructStub,from_any(Any value),void,Initializes the value associated with a DynAny object with the value contained in an any.,"

from_any
public void from_any(Any value)
              throws TypeMismatch,
                     InvalidValue
Initializes the value associated with a DynAny object with the value contained in an any.
 The current position of the target DynAny is set to zero for values that have components
 and to -1 for values that do not have components.

Specified by:
from_any in interface DynAnyOperations
Throws:
TypeMismatch - if the type of the passed Any is not equivalent to the type of target DynAny
InvalidValue - if the passed Any does not contain a legal value (such as a null string)


"
_DynStructStub,get_any(),Any,Extracts an Any value contained in the Any represented by this DynAny.,"

get_any
public Any get_any()
            throws TypeMismatch,
                   InvalidValue
Extracts an Any value contained in the Any represented by this DynAny.

Specified by:
get_any in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynStructStub,get_boolean(),boolean,Extracts the boolean value from this DynAny.,"

get_boolean
public boolean get_boolean()
                    throws TypeMismatch,
                           InvalidValue
Extracts the boolean value from this DynAny.

Specified by:
get_boolean in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynStructStub,get_char(),char,Extracts the char value from this DynAny.,"

get_char
public char get_char()
              throws TypeMismatch,
                     InvalidValue
Extracts the char value from this DynAny.

Specified by:
get_char in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynStructStub,get_double(),double,Extracts the double value from this DynAny.,"

get_double
public double get_double()
                  throws TypeMismatch,
                         InvalidValue
Extracts the double value from this DynAny.

Specified by:
get_double in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynStructStub,get_dyn_any(),DynAny,Extracts the Any value contained in the Any represented by this DynAny and returns it wrapped into a new DynAny.,"

get_dyn_any
public DynAny get_dyn_any()
                   throws TypeMismatch,
                          InvalidValue
Extracts the Any value contained in the Any represented by this DynAny and returns it wrapped
 into a new DynAny.

Specified by:
get_dyn_any in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynStructStub,get_float(),float,Extracts the float value from this DynAny.,"

get_float
public float get_float()
                throws TypeMismatch,
                       InvalidValue
Extracts the float value from this DynAny.

Specified by:
get_float in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynStructStub,get_long(),int,Extracts the integer value from this DynAny.,"

get_long
public int get_long()
             throws TypeMismatch,
                    InvalidValue
Extracts the integer value from this DynAny. The IDL long data type is mapped to the Java int data type.

Specified by:
get_long in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynStructStub,get_longlong(),long,Extracts the long value from this DynAny.,"

get_longlong
public long get_longlong()
                  throws TypeMismatch,
                         InvalidValue
Extracts the long value from this DynAny. The IDL long long data type is mapped to the Java long data type.

Specified by:
get_longlong in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynStructStub,get_members_as_dyn_any(),NameDynAnyPair[],Returns a sequence of NameDynAnyPairs describing the name and the value of each member in the struct associated with a DynStruct object.,"

get_members_as_dyn_any
public NameDynAnyPair[] get_members_as_dyn_any()
Returns a sequence of NameDynAnyPairs describing the name and the value of each member
 in the struct associated with a DynStruct object.
 The sequence contains members in the same order as the declaration order of members
 as indicated by the DynStruct's TypeCode. The current position is not affected.
 The member names in the returned sequence will be empty strings if the DynStruct's TypeCode
 does not contain member names.

Specified by:
get_members_as_dyn_any in interface DynStructOperations


"
_DynStructStub,get_members(),NameValuePair[],Returns a sequence of NameValuePairs describing the name and the value of each member in the struct associated with a DynStruct object.,"

get_members
public NameValuePair[] get_members()
Returns a sequence of NameValuePairs describing the name and the value of each member
 in the struct associated with a DynStruct object.
 The sequence contains members in the same order as the declaration order of members
 as indicated by the DynStruct's TypeCode. The current position is not affected.
 The member names in the returned sequence will be empty strings if the DynStruct's TypeCode
 does not contain member names.

Specified by:
get_members in interface DynStructOperations


"
_DynStructStub,get_octet(),byte,Extracts the byte value from this DynAny.,"

get_octet
public byte get_octet()
               throws TypeMismatch,
                      InvalidValue
Extracts the byte value from this DynAny. The IDL octet data type is mapped to the Java byte data type.

Specified by:
get_octet in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynStructStub,get_reference(),Object,Extracts the reference to a CORBA Object from this DynAny.,"

get_reference
public Object get_reference()
                     throws TypeMismatch,
                            InvalidValue
Extracts the reference to a CORBA Object from this DynAny.

Specified by:
get_reference in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynStructStub,get_short(),short,Extracts the short value from this DynAny.,"

get_short
public short get_short()
                throws TypeMismatch,
                       InvalidValue
Extracts the short value from this DynAny.

Specified by:
get_short in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynStructStub,get_string(),String,Extracts the string value from this DynAny.,"

get_string
public String get_string()
                  throws TypeMismatch,
                         InvalidValue
Extracts the string value from this DynAny.
 Both bounded and unbounded strings are extracted using this method.

Specified by:
get_string in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynStructStub,get_typecode(),TypeCode,Extracts the TypeCode object from this DynAny.,"

get_typecode
public TypeCode get_typecode()
                      throws TypeMismatch,
                             InvalidValue
Extracts the TypeCode object from this DynAny.

Specified by:
get_typecode in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynStructStub,get_ulong(),int,Extracts the integer value from this DynAny.,"

get_ulong
public int get_ulong()
              throws TypeMismatch,
                     InvalidValue
Extracts the integer value from this DynAny. The IDL ulong data type is mapped to the Java int data type.

Specified by:
get_ulong in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynStructStub,get_ulonglong(),long,Extracts the long value from this DynAny.,"

get_ulonglong
public long get_ulonglong()
                   throws TypeMismatch,
                          InvalidValue
Extracts the long value from this DynAny.
 The IDL unsigned long long data type is mapped to the Java long data type.

Specified by:
get_ulonglong in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynStructStub,get_ushort(),short,Extracts the short value from this DynAny.,"

get_ushort
public short get_ushort()
                 throws TypeMismatch,
                        InvalidValue
Extracts the short value from this DynAny. The IDL ushort data type is mapped to the Java short data type.

Specified by:
get_ushort in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynStructStub,get_val(),Serializable,Extracts a Serializable object from this DynAny.,"

get_val
public Serializable get_val()
                     throws TypeMismatch,
                            InvalidValue
Extracts a Serializable object from this DynAny.
 The IDL ValueBase type is mapped to the Java Serializable type.

Specified by:
get_val in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynStructStub,get_wchar(),char,Extracts the long value from this DynAny.,"

get_wchar
public char get_wchar()
               throws TypeMismatch,
                      InvalidValue
Extracts the long value from this DynAny. The IDL wchar data type is mapped to the Java char data type.

Specified by:
get_wchar in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynStructStub,get_wstring(),String,Extracts the string value from this DynAny.,"

get_wstring
public String get_wstring()
                   throws TypeMismatch,
                          InvalidValue
Extracts the string value from this DynAny.
 Both bounded and unbounded strings are extracted using this method.

Specified by:
get_wstring in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue


"
_DynStructStub,insert_any(Any value),void,Inserts an Any value into the Any represented by this DynAny.,"

insert_any
public void insert_any(Any value)
                throws TypeMismatch,
                       InvalidValue
Inserts an Any value into the Any represented by this DynAny.

Specified by:
insert_any in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynStructStub,insert_boolean(boolean value),void,Inserts a boolean value into the DynAny.,"

insert_boolean
public void insert_boolean(boolean value)
                    throws TypeMismatch,
                           InvalidValue
Inserts a boolean value into the DynAny.

Specified by:
insert_boolean in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynStructStub,insert_char(char value),void,Inserts a char value into the DynAny.,"

insert_char
public void insert_char(char value)
                 throws TypeMismatch,
                        InvalidValue
Inserts a char value into the DynAny.

Specified by:
insert_char in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynStructStub,insert_double(double value),void,Inserts a double value into the DynAny.,"

insert_double
public void insert_double(double value)
                   throws TypeMismatch,
                          InvalidValue
Inserts a double value into the DynAny.

Specified by:
insert_double in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynStructStub,insert_dyn_any(DynAny value),void,Inserts the Any value contained in the parameter DynAny into the Any represented by this DynAny.,"

insert_dyn_any
public void insert_dyn_any(DynAny value)
                    throws TypeMismatch,
                           InvalidValue
Inserts the Any value contained in the parameter DynAny into the Any represented by this DynAny.

Specified by:
insert_dyn_any in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynStructStub,insert_float(float value),void,Inserts a float value into the DynAny.,"

insert_float
public void insert_float(float value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a float value into the DynAny.

Specified by:
insert_float in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynStructStub,insert_long(int value),void,Inserts an integer value into the DynAny.,"

insert_long
public void insert_long(int value)
                 throws TypeMismatch,
                        InvalidValue
Inserts an integer value into the DynAny. The IDL long data type is mapped to the Java int data type.

Specified by:
insert_long in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynStructStub,insert_longlong(long value),void,Inserts a long value into the DynAny.,"

insert_longlong
public void insert_longlong(long value)
                     throws TypeMismatch,
                            InvalidValue
Inserts a long value into the DynAny. The IDL long long data type is mapped to the Java long data type.

Specified by:
insert_longlong in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynStructStub,insert_octet(byte value),void,Inserts a byte value into the DynAny.,"

insert_octet
public void insert_octet(byte value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a byte value into the DynAny. The IDL octet data type is mapped to the Java byte data type.

Specified by:
insert_octet in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynStructStub,insert_reference(Object value),void,Inserts a reference to a CORBA object into the DynAny.,"

insert_reference
public void insert_reference(Object value)
                      throws TypeMismatch,
                             InvalidValue
Inserts a reference to a CORBA object into the DynAny.

Specified by:
insert_reference in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynStructStub,insert_short(short value),void,Inserts a short value into the DynAny.,"

insert_short
public void insert_short(short value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a short value into the DynAny.

Specified by:
insert_short in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynStructStub,insert_string(String value),void,Inserts a string value into the DynAny.,"

insert_string
public void insert_string(String value)
                   throws TypeMismatch,
                          InvalidValue
Inserts a string value into the DynAny.
 Both bounded and unbounded strings are inserted using this method.

Specified by:
insert_string in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
InvalidValue - if the string inserted is longer than the bound of a bounded string
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynStructStub,insert_typecode(TypeCode value),void,Inserts a TypeCode object into the DynAny.,"

insert_typecode
public void insert_typecode(TypeCode value)
                     throws TypeMismatch,
                            InvalidValue
Inserts a TypeCode object into the DynAny.

Specified by:
insert_typecode in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynStructStub,insert_ulong(int value),void,Inserts an integer value into the DynAny.,"

insert_ulong
public void insert_ulong(int value)
                  throws TypeMismatch,
                         InvalidValue
Inserts an integer value into the DynAny. The IDL ulong data type is mapped to the Java int data type.

Specified by:
insert_ulong in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynStructStub,insert_ulonglong(long value),void,Inserts a long value into the DynAny.,"

insert_ulonglong
public void insert_ulonglong(long value)
                      throws TypeMismatch,
                             InvalidValue
Inserts a long value into the DynAny.
 The IDL unsigned long long data type is mapped to the Java long data type.

Specified by:
insert_ulonglong in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynStructStub,insert_ushort(short value),void,Inserts a short value into the DynAny.,"

insert_ushort
public void insert_ushort(short value)
                   throws TypeMismatch,
                          InvalidValue
Inserts a short value into the DynAny. The IDL ushort data type is mapped to the Java short data type.

Specified by:
insert_ushort in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynStructStub,insert_val(Serializable value),void,Inserts a reference to a Serializable object into this DynAny.,"

insert_val
public void insert_val(Serializable value)
                throws TypeMismatch,
                       InvalidValue
Inserts a reference to a Serializable object into this DynAny.
 The IDL ValueBase type is mapped to the Java Serializable type.

Specified by:
insert_val in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynStructStub,insert_wchar(char value),void,Inserts a char value into the DynAny.,"

insert_wchar
public void insert_wchar(char value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a char value into the DynAny. The IDL wchar data type is mapped to the Java char data type.

Specified by:
insert_wchar in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynStructStub,insert_wstring(String value),void,Inserts a string value into the DynAny.,"

insert_wstring
public void insert_wstring(String value)
                    throws TypeMismatch,
                           InvalidValue
Inserts a string value into the DynAny.
 Both bounded and unbounded strings are inserted using this method.

Specified by:
insert_wstring in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
InvalidValue - if the string inserted is longer than the bound of a bounded string
TypeMismatch


"
_DynStructStub,next(),boolean,Advances the current position to the next component.,"

next
public boolean next()
Advances the current position to the next component.
 The operation returns true while the resulting current position indicates a component, false otherwise.
 A false return value leaves the current position at -1.
 Invoking next on a DynAny without components leaves the current position at -1 and returns false.

Specified by:
next in interface DynAnyOperations


"
_DynStructStub,rewind(),void,Is equivalent to seek(0).,"

rewind
public void rewind()
Is equivalent to seek(0).

Specified by:
rewind in interface DynAnyOperations


"
_DynStructStub,seek(int index),boolean,Sets the current position to index.,"

seek
public boolean seek(int index)
Sets the current position to index. The current position is indexed 0 to n-1, that is,
 index zero corresponds to the first component. The operation returns true if the resulting
 current position indicates a component of the DynAny and false if index indicates
 a position that does not correspond to a component.
 Calling seek with a negative index is legal. It sets the current position to -1 to indicate
 no component and returns false. Passing a non-negative index value for a DynAny that does not
 have a component at the corresponding position sets the current position to -1 and returns false.

Specified by:
seek in interface DynAnyOperations


"
_DynStructStub,set_members_as_dyn_any(NameDynAnyPair[] value),void,Initializes the struct data value associated with a DynStruct object from a sequence of NameDynAnyPairs.,"

set_members_as_dyn_any
public void set_members_as_dyn_any(NameDynAnyPair[] value)
                            throws TypeMismatch,
                                   InvalidValue
Initializes the struct data value associated with a DynStruct object from a sequence of NameDynAnyPairs.
 The operation sets the current position to zero if the passed sequences has non-zero length. Otherwise,
 if an empty sequence is passed, the current position is set to -1.
 Members must appear in the NameDynAnyPairs in the order in which they appear in the IDL specification
 of the struct as indicated by the DynStruct's TypeCode or they must be empty strings.
 The operation makes no attempt to assign member values based on member names.

Specified by:
set_members_as_dyn_any in interface DynStructOperations
Throws:
TypeMismatch - if the member names supplied in the passed sequence do not match the
            corresponding member name in the DynStruct's TypeCode and they are not empty strings
InvalidValue - if the passed sequence has a number of elements that disagrees
            with the number of members as indicated by the DynStruct's TypeCode


"
_DynStructStub,set_members(NameValuePair[] value),void,Initializes the struct data value associated with a DynStruct object from a sequence of NameValuePairs.,"

set_members
public void set_members(NameValuePair[] value)
                 throws TypeMismatch,
                        InvalidValue
Initializes the struct data value associated with a DynStruct object from a sequence of NameValuePairs.
 The operation sets the current position to zero if the passed sequences has non-zero length. Otherwise,
 if an empty sequence is passed, the current position is set to -1.
 Members must appear in the NameValuePairs in the order in which they appear in the IDL specification
 of the struct as indicated by the DynStruct's TypeCode or they must be empty strings.
 The operation makes no attempt to assign member values based on member names.

Specified by:
set_members in interface DynStructOperations
Throws:
TypeMismatch - if the member names supplied in the passed sequence do not match the
            corresponding member name in the DynStruct's TypeCode and they are not empty strings
InvalidValue - if the passed sequence has a number of elements that disagrees
            with the number of members as indicated by the DynStruct's TypeCode


"
_DynStructStub,to_any(),Any,Creates an any value from a DynAny object.,"

to_any
public Any to_any()
Creates an any value from a DynAny object.
 A copy of the TypeCode associated with the DynAny object is assigned to the resulting any.
 The value associated with the DynAny object is copied into the any.

Specified by:
to_any in interface DynAnyOperations
Returns:
a new Any object with the same value and TypeCode


"
_DynStructStub,type(),TypeCode,Returns the TypeCode associated with this DynAny object.,"

type
public TypeCode type()
Returns the TypeCode associated with this DynAny object.
 A DynAny object is created with a TypeCode value assigned to it.
 This TypeCode value determines the type of the value handled through the DynAny object.
 Note that the TypeCode associated with a DynAny object is initialized at the time the
 DynAny is created and cannot be changed during lifetime of the DynAny object.

Specified by:
type in interface DynAnyOperations
Returns:
The TypeCode associated with this DynAny object


"
_DynUnionStub,_ids(),String[],Retrieves a string array containing the repository identifiers supported by this ObjectImpl object.,"

_ids
public String[] _ids()
Description copied from class: ObjectImpl
Retrieves a string array containing the repository identifiers
 supported by this ObjectImpl object.  For example,
 for a stub, this method returns information about all the
 interfaces supported by the stub.

Specified by:
_ids in class ObjectImpl
Returns:
the array of all repository identifiers supported by this
         ObjectImpl instance


"
_DynUnionStub,assign(DynAny dyn_any),void,Initializes the value associated with a DynAny object with the value associated with another DynAny object.,"

assign
public void assign(DynAny dyn_any)
            throws TypeMismatch
Initializes the value associated with a DynAny object with the value
 associated with another DynAny object.
 The current position of the target DynAny is set to zero for values that have components
 and to -1 for values that do not have components.

Specified by:
assign in interface DynAnyOperations
Parameters:
dyn_any - 
Throws:
TypeMismatch - if the type of the passed DynAny is not equivalent to the type of target DynAny


"
_DynUnionStub,component_count(),int,Returns the number of components of a DynAny.,"

component_count
public int component_count()
Returns the number of components of a DynAny.
 For a DynAny without components, it returns zero.
 The operation only counts the components at the top level.
 For example, if component_count is invoked on a DynStruct with a single member,
 the return value is 1, irrespective of the type of the member.
 
For sequences, the operation returns the current number of elements.
 For structures, exceptions, and value types, the operation returns the number of members.
 For arrays, the operation returns the number of elements.
 For unions, the operation returns 2 if the discriminator indicates that a named member is active,
 otherwise, it returns 1.
 For DynFixed and DynEnum, the operation returns zero.
 

Specified by:
component_count in interface DynAnyOperations


"
_DynUnionStub,copy(),DynAny,Creates a new DynAny object whose value is a deep copy of the DynAny on which it is invoked.,"

copy
public DynAny copy()
Creates a new DynAny object whose value is a deep copy of the DynAny on which it is invoked.
 The operation is polymorphic, that is, invoking it on one of the types derived from DynAny,
 such as DynStruct, creates the derived type but returns its reference as the DynAny base type.

Specified by:
copy in interface DynAnyOperations
Returns:
a deep copy of the DynAny object


"
_DynUnionStub,current_component(),DynAny,Returns the DynAny for the component at the current position.,"

current_component
public DynAny current_component()
                         throws TypeMismatch
Returns the DynAny for the component at the current position.
 It does not advance the current position, so repeated calls to current_component
 without an intervening call to rewind, next, or seek return the same component.
 The returned DynAny object reference can be used to get/set the value of the current component.
 If the current component represents a complex type, the returned reference can be narrowed
 based on the TypeCode to get the interface corresponding to the to the complex type.
 Calling current_component on a DynAny that cannot have components,
 such as a DynEnum or an empty exception, raises TypeMismatch.
 Calling current_component on a DynAny whose current position is -1 returns a nil reference.
 The iteration operations, together with current_component, can be used
 to dynamically compose an any value. After creating a dynamic any, such as a DynStruct,
 current_component and next can be used to initialize all the components of the value.
 Once the dynamic value is completely initialized, to_any creates the corresponding any value.

Specified by:
current_component in interface DynAnyOperations
Throws:
TypeMismatch - If called on a DynAny that cannot have components,
 such as a DynEnum or an empty exception


"
_DynUnionStub,destroy(),void,Destroys a DynAny object.,"

destroy
public void destroy()
Destroys a DynAny object.
 This operation frees any resources used to represent the data value associated with a DynAny object.
 It must be invoked on references obtained from one of the creation operations on the ORB interface
 or on a reference returned by DynAny.copy() to avoid resource leaks.
 Invoking destroy on component DynAny objects (for example, on objects returned by the
 current_component operation) does nothing.
 Destruction of a DynAny object implies destruction of all DynAny objects obtained from it.
 That is, references to components of a destroyed DynAny become invalid.
 Invocations on such references raise OBJECT_NOT_EXIST.
 It is possible to manipulate a component of a DynAny beyond the life time of the DynAny
 from which the component was obtained by making a copy of the component with the copy operation
 before destroying the DynAny from which the component was obtained.

Specified by:
destroy in interface DynAnyOperations


"
_DynUnionStub,discriminator_kind(),TCKind,Returns the TCKind value of the discriminators TypeCode.,"

discriminator_kind
public TCKind discriminator_kind()
Returns the TCKind value of the discriminators TypeCode.

Specified by:
discriminator_kind in interface DynUnionOperations


"
_DynUnionStub,equal(DynAny dyn_any),boolean,Compares two DynAny values for equality.,"

equal
public boolean equal(DynAny dyn_any)
Compares two DynAny values for equality.
 Two DynAny values are equal if their TypeCodes are equivalent and, recursively, all component DynAnys
 have equal values.
 The current position of the two DynAnys being compared has no effect on the result of equal.

Specified by:
equal in interface DynAnyOperations
Returns:
true of the DynAnys are equal, false otherwise


"
_DynUnionStub,from_any(Any value),void,Initializes the value associated with a DynAny object with the value contained in an any.,"

from_any
public void from_any(Any value)
              throws TypeMismatch,
                     InvalidValue
Initializes the value associated with a DynAny object with the value contained in an any.
 The current position of the target DynAny is set to zero for values that have components
 and to -1 for values that do not have components.

Specified by:
from_any in interface DynAnyOperations
Throws:
TypeMismatch - if the type of the passed Any is not equivalent to the type of target DynAny
InvalidValue - if the passed Any does not contain a legal value (such as a null string)


"
_DynUnionStub,get_any(),Any,Extracts an Any value contained in the Any represented by this DynAny.,"

get_any
public Any get_any()
            throws TypeMismatch,
                   InvalidValue
Extracts an Any value contained in the Any represented by this DynAny.

Specified by:
get_any in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynUnionStub,get_boolean(),boolean,Extracts the boolean value from this DynAny.,"

get_boolean
public boolean get_boolean()
                    throws TypeMismatch,
                           InvalidValue
Extracts the boolean value from this DynAny.

Specified by:
get_boolean in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynUnionStub,get_char(),char,Extracts the char value from this DynAny.,"

get_char
public char get_char()
              throws TypeMismatch,
                     InvalidValue
Extracts the char value from this DynAny.

Specified by:
get_char in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynUnionStub,get_discriminator(),DynAny,Returns the current discriminator value.,"

get_discriminator
public DynAny get_discriminator()
Returns the current discriminator value.

Specified by:
get_discriminator in interface DynUnionOperations


"
_DynUnionStub,get_double(),double,Extracts the double value from this DynAny.,"

get_double
public double get_double()
                  throws TypeMismatch,
                         InvalidValue
Extracts the double value from this DynAny.

Specified by:
get_double in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynUnionStub,get_dyn_any(),DynAny,Extracts the Any value contained in the Any represented by this DynAny and returns it wrapped into a new DynAny.,"

get_dyn_any
public DynAny get_dyn_any()
                   throws TypeMismatch,
                          InvalidValue
Extracts the Any value contained in the Any represented by this DynAny and returns it wrapped
 into a new DynAny.

Specified by:
get_dyn_any in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynUnionStub,get_float(),float,Extracts the float value from this DynAny.,"

get_float
public float get_float()
                throws TypeMismatch,
                       InvalidValue
Extracts the float value from this DynAny.

Specified by:
get_float in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynUnionStub,get_long(),int,Extracts the integer value from this DynAny.,"

get_long
public int get_long()
             throws TypeMismatch,
                    InvalidValue
Extracts the integer value from this DynAny. The IDL long data type is mapped to the Java int data type.

Specified by:
get_long in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynUnionStub,get_longlong(),long,Extracts the long value from this DynAny.,"

get_longlong
public long get_longlong()
                  throws TypeMismatch,
                         InvalidValue
Extracts the long value from this DynAny. The IDL long long data type is mapped to the Java long data type.

Specified by:
get_longlong in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynUnionStub,get_octet(),byte,Extracts the byte value from this DynAny.,"

get_octet
public byte get_octet()
               throws TypeMismatch,
                      InvalidValue
Extracts the byte value from this DynAny. The IDL octet data type is mapped to the Java byte data type.

Specified by:
get_octet in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynUnionStub,get_reference(),Object,Extracts the reference to a CORBA Object from this DynAny.,"

get_reference
public Object get_reference()
                     throws TypeMismatch,
                            InvalidValue
Extracts the reference to a CORBA Object from this DynAny.

Specified by:
get_reference in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynUnionStub,get_short(),short,Extracts the short value from this DynAny.,"

get_short
public short get_short()
                throws TypeMismatch,
                       InvalidValue
Extracts the short value from this DynAny.

Specified by:
get_short in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynUnionStub,get_string(),String,Extracts the string value from this DynAny.,"

get_string
public String get_string()
                  throws TypeMismatch,
                         InvalidValue
Extracts the string value from this DynAny.
 Both bounded and unbounded strings are extracted using this method.

Specified by:
get_string in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynUnionStub,get_typecode(),TypeCode,Extracts the TypeCode object from this DynAny.,"

get_typecode
public TypeCode get_typecode()
                      throws TypeMismatch,
                             InvalidValue
Extracts the TypeCode object from this DynAny.

Specified by:
get_typecode in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynUnionStub,get_ulong(),int,Extracts the integer value from this DynAny.,"

get_ulong
public int get_ulong()
              throws TypeMismatch,
                     InvalidValue
Extracts the integer value from this DynAny. The IDL ulong data type is mapped to the Java int data type.

Specified by:
get_ulong in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynUnionStub,get_ulonglong(),long,Extracts the long value from this DynAny.,"

get_ulonglong
public long get_ulonglong()
                   throws TypeMismatch,
                          InvalidValue
Extracts the long value from this DynAny.
 The IDL unsigned long long data type is mapped to the Java long data type.

Specified by:
get_ulonglong in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynUnionStub,get_ushort(),short,Extracts the short value from this DynAny.,"

get_ushort
public short get_ushort()
                 throws TypeMismatch,
                        InvalidValue
Extracts the short value from this DynAny. The IDL ushort data type is mapped to the Java short data type.

Specified by:
get_ushort in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynUnionStub,get_val(),Serializable,Extracts a Serializable object from this DynAny.,"

get_val
public Serializable get_val()
                     throws TypeMismatch,
                            InvalidValue
Extracts a Serializable object from this DynAny.
 The IDL ValueBase type is mapped to the Java Serializable type.

Specified by:
get_val in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynUnionStub,get_wchar(),char,Extracts the long value from this DynAny.,"

get_wchar
public char get_wchar()
               throws TypeMismatch,
                      InvalidValue
Extracts the long value from this DynAny. The IDL wchar data type is mapped to the Java char data type.

Specified by:
get_wchar in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynUnionStub,get_wstring(),String,Extracts the string value from this DynAny.,"

get_wstring
public String get_wstring()
                   throws TypeMismatch,
                          InvalidValue
Extracts the string value from this DynAny.
 Both bounded and unbounded strings are extracted using this method.

Specified by:
get_wstring in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue


"
_DynUnionStub,has_no_active_member(),boolean,"Returns true if the union has no active member, that is, the unions value consists solely of its discriminator because the discriminator has a value that is not listed as an explicit case label.","

has_no_active_member
public boolean has_no_active_member()
Returns true if the union has no active member, that is, the unions value consists solely
 of its discriminator because the discriminator has a value that is not listed as an explicit case label.
 Calling this operation on a union that has a default case returns false.
 Calling this operation on a union that uses the entire range of discriminator values
 for explicit case labels returns false.

Specified by:
has_no_active_member in interface DynUnionOperations


"
_DynUnionStub,insert_any(Any value),void,Inserts an Any value into the Any represented by this DynAny.,"

insert_any
public void insert_any(Any value)
                throws TypeMismatch,
                       InvalidValue
Inserts an Any value into the Any represented by this DynAny.

Specified by:
insert_any in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynUnionStub,insert_boolean(boolean value),void,Inserts a boolean value into the DynAny.,"

insert_boolean
public void insert_boolean(boolean value)
                    throws TypeMismatch,
                           InvalidValue
Inserts a boolean value into the DynAny.

Specified by:
insert_boolean in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynUnionStub,insert_char(char value),void,Inserts a char value into the DynAny.,"

insert_char
public void insert_char(char value)
                 throws TypeMismatch,
                        InvalidValue
Inserts a char value into the DynAny.

Specified by:
insert_char in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynUnionStub,insert_double(double value),void,Inserts a double value into the DynAny.,"

insert_double
public void insert_double(double value)
                   throws TypeMismatch,
                          InvalidValue
Inserts a double value into the DynAny.

Specified by:
insert_double in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynUnionStub,insert_dyn_any(DynAny value),void,Inserts the Any value contained in the parameter DynAny into the Any represented by this DynAny.,"

insert_dyn_any
public void insert_dyn_any(DynAny value)
                    throws TypeMismatch,
                           InvalidValue
Inserts the Any value contained in the parameter DynAny into the Any represented by this DynAny.

Specified by:
insert_dyn_any in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynUnionStub,insert_float(float value),void,Inserts a float value into the DynAny.,"

insert_float
public void insert_float(float value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a float value into the DynAny.

Specified by:
insert_float in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynUnionStub,insert_long(int value),void,Inserts an integer value into the DynAny.,"

insert_long
public void insert_long(int value)
                 throws TypeMismatch,
                        InvalidValue
Inserts an integer value into the DynAny. The IDL long data type is mapped to the Java int data type.

Specified by:
insert_long in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynUnionStub,insert_longlong(long value),void,Inserts a long value into the DynAny.,"

insert_longlong
public void insert_longlong(long value)
                     throws TypeMismatch,
                            InvalidValue
Inserts a long value into the DynAny. The IDL long long data type is mapped to the Java long data type.

Specified by:
insert_longlong in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynUnionStub,insert_octet(byte value),void,Inserts a byte value into the DynAny.,"

insert_octet
public void insert_octet(byte value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a byte value into the DynAny. The IDL octet data type is mapped to the Java byte data type.

Specified by:
insert_octet in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynUnionStub,insert_reference(Object value),void,Inserts a reference to a CORBA object into the DynAny.,"

insert_reference
public void insert_reference(Object value)
                      throws TypeMismatch,
                             InvalidValue
Inserts a reference to a CORBA object into the DynAny.

Specified by:
insert_reference in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynUnionStub,insert_short(short value),void,Inserts a short value into the DynAny.,"

insert_short
public void insert_short(short value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a short value into the DynAny.

Specified by:
insert_short in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynUnionStub,insert_string(String value),void,Inserts a string value into the DynAny.,"

insert_string
public void insert_string(String value)
                   throws TypeMismatch,
                          InvalidValue
Inserts a string value into the DynAny.
 Both bounded and unbounded strings are inserted using this method.

Specified by:
insert_string in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
InvalidValue - if the string inserted is longer than the bound of a bounded string
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynUnionStub,insert_typecode(TypeCode value),void,Inserts a TypeCode object into the DynAny.,"

insert_typecode
public void insert_typecode(TypeCode value)
                     throws TypeMismatch,
                            InvalidValue
Inserts a TypeCode object into the DynAny.

Specified by:
insert_typecode in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynUnionStub,insert_ulong(int value),void,Inserts an integer value into the DynAny.,"

insert_ulong
public void insert_ulong(int value)
                  throws TypeMismatch,
                         InvalidValue
Inserts an integer value into the DynAny. The IDL ulong data type is mapped to the Java int data type.

Specified by:
insert_ulong in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynUnionStub,insert_ulonglong(long value),void,Inserts a long value into the DynAny.,"

insert_ulonglong
public void insert_ulonglong(long value)
                      throws TypeMismatch,
                             InvalidValue
Inserts a long value into the DynAny.
 The IDL unsigned long long data type is mapped to the Java long data type.

Specified by:
insert_ulonglong in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynUnionStub,insert_ushort(short value),void,Inserts a short value into the DynAny.,"

insert_ushort
public void insert_ushort(short value)
                   throws TypeMismatch,
                          InvalidValue
Inserts a short value into the DynAny. The IDL ushort data type is mapped to the Java short data type.

Specified by:
insert_ushort in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynUnionStub,insert_val(Serializable value),void,Inserts a reference to a Serializable object into this DynAny.,"

insert_val
public void insert_val(Serializable value)
                throws TypeMismatch,
                       InvalidValue
Inserts a reference to a Serializable object into this DynAny.
 The IDL ValueBase type is mapped to the Java Serializable type.

Specified by:
insert_val in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynUnionStub,insert_wchar(char value),void,Inserts a char value into the DynAny.,"

insert_wchar
public void insert_wchar(char value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a char value into the DynAny. The IDL wchar data type is mapped to the Java char data type.

Specified by:
insert_wchar in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynUnionStub,insert_wstring(String value),void,Inserts a string value into the DynAny.,"

insert_wstring
public void insert_wstring(String value)
                    throws TypeMismatch,
                           InvalidValue
Inserts a string value into the DynAny.
 Both bounded and unbounded strings are inserted using this method.

Specified by:
insert_wstring in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
InvalidValue - if the string inserted is longer than the bound of a bounded string
TypeMismatch


"
_DynUnionStub,member_kind(),TCKind,Returns the TCKind value of the currently active members TypeCode.,"

member_kind
public TCKind member_kind()
                   throws InvalidValue
Returns the TCKind value of the currently active members TypeCode.

Specified by:
member_kind in interface DynUnionOperations
Throws:
InvalidValue - if the union does not have a currently active member


"
_DynUnionStub,member_name(),String,Returns the name of the currently active member.,"

member_name
public String member_name()
                   throws InvalidValue
Returns the name of the currently active member. If the unions TypeCode does not contain
 a member name for the currently active member, the operation returns an empty string.

Specified by:
member_name in interface DynUnionOperations
Throws:
InvalidValue - if the union has no active member


"
_DynUnionStub,member(),DynAny,Returns the currently active member.,"

member
public DynAny member()
              throws InvalidValue
Returns the currently active member. Note that the returned reference remains valid only
 for as long as the currently active member does not change. Using the returned reference
 beyond the life time of the currently active member raises OBJECT_NOT_EXIST.

Specified by:
member in interface DynUnionOperations
Throws:
InvalidValue - if the union has no active member


"
_DynUnionStub,next(),boolean,Advances the current position to the next component.,"

next
public boolean next()
Advances the current position to the next component.
 The operation returns true while the resulting current position indicates a component, false otherwise.
 A false return value leaves the current position at -1.
 Invoking next on a DynAny without components leaves the current position at -1 and returns false.

Specified by:
next in interface DynAnyOperations


"
_DynUnionStub,rewind(),void,Is equivalent to seek(0).,"

rewind
public void rewind()
Is equivalent to seek(0).

Specified by:
rewind in interface DynAnyOperations


"
_DynUnionStub,seek(int index),boolean,Sets the current position to index.,"

seek
public boolean seek(int index)
Sets the current position to index. The current position is indexed 0 to n-1, that is,
 index zero corresponds to the first component. The operation returns true if the resulting
 current position indicates a component of the DynAny and false if index indicates
 a position that does not correspond to a component.
 Calling seek with a negative index is legal. It sets the current position to -1 to indicate
 no component and returns false. Passing a non-negative index value for a DynAny that does not
 have a component at the corresponding position sets the current position to -1 and returns false.

Specified by:
seek in interface DynAnyOperations


"
_DynUnionStub,set_discriminator(DynAny d),void,Sets the discriminator of the DynUnion to the specified value.,"

set_discriminator
public void set_discriminator(DynAny d)
                       throws TypeMismatch
Sets the discriminator of the DynUnion to the specified value.
 Setting the discriminator to a value that is consistent with the currently active union member
 does not affect the currently active member. Setting the discriminator to a value that is inconsistent
 with the currently active member deactivates the member and activates the member that is consistent
 with the new discriminator value (if there is a member for that value) by initializing the member
 to its default value.
 Setting the discriminator of a union sets the current position to 0 if the discriminator value
 indicates a non-existent union member (has_no_active_member returns true in this case).
 Otherwise, if the discriminator value indicates a named union member, the current position is set to 1
 (has_no_active_member returns false and component_count returns 2 in this case).

Specified by:
set_discriminator in interface DynUnionOperations
Throws:
TypeMismatch - if the TypeCode of the parameter is not equivalent to the TypeCode
            of the union's discriminator


"
_DynUnionStub,set_to_default_member(),void,Sets the discriminator to a value that is consistent with the value of the default case of a union.,"

set_to_default_member
public void set_to_default_member()
                           throws TypeMismatch
Sets the discriminator to a value that is consistent with the value of the default case of a union.
 It sets the current position to zero and causes component_count to return 2.

Specified by:
set_to_default_member in interface DynUnionOperations
Throws:
TypeMismatch - if the union does not have an explicit default case


"
_DynUnionStub,set_to_no_active_member(),void,Sets the discriminator to a value that does not correspond to any of the unions case labels.,"

set_to_no_active_member
public void set_to_no_active_member()
                             throws TypeMismatch
Sets the discriminator to a value that does not correspond to any of the unions case labels.
 It sets the current position to zero and causes component_count to return 1.

Specified by:
set_to_no_active_member in interface DynUnionOperations
Throws:
TypeMismatch - if the union has an explicit default case or if it uses the entire range
            of discriminator values for explicit case labels


"
_DynUnionStub,to_any(),Any,Creates an any value from a DynAny object.,"

to_any
public Any to_any()
Creates an any value from a DynAny object.
 A copy of the TypeCode associated with the DynAny object is assigned to the resulting any.
 The value associated with the DynAny object is copied into the any.

Specified by:
to_any in interface DynAnyOperations
Returns:
a new Any object with the same value and TypeCode


"
_DynUnionStub,type(),TypeCode,Returns the TypeCode associated with this DynAny object.,"

type
public TypeCode type()
Returns the TypeCode associated with this DynAny object.
 A DynAny object is created with a TypeCode value assigned to it.
 This TypeCode value determines the type of the value handled through the DynAny object.
 Note that the TypeCode associated with a DynAny object is initialized at the time the
 DynAny is created and cannot be changed during lifetime of the DynAny object.

Specified by:
type in interface DynAnyOperations
Returns:
The TypeCode associated with this DynAny object


"
_DynValueStub,_ids(),String[],Retrieves a string array containing the repository identifiers supported by this ObjectImpl object.,"

_ids
public String[] _ids()
Description copied from class: ObjectImpl
Retrieves a string array containing the repository identifiers
 supported by this ObjectImpl object.  For example,
 for a stub, this method returns information about all the
 interfaces supported by the stub.

Specified by:
_ids in class ObjectImpl
Returns:
the array of all repository identifiers supported by this
         ObjectImpl instance


"
_DynValueStub,assign(DynAny dyn_any),void,Initializes the value associated with a DynAny object with the value associated with another DynAny object.,"

assign
public void assign(DynAny dyn_any)
            throws TypeMismatch
Initializes the value associated with a DynAny object with the value
 associated with another DynAny object.
 The current position of the target DynAny is set to zero for values that have components
 and to -1 for values that do not have components.

Specified by:
assign in interface DynAnyOperations
Parameters:
dyn_any - 
Throws:
TypeMismatch - if the type of the passed DynAny is not equivalent to the type of target DynAny


"
_DynValueStub,component_count(),int,Returns the number of components of a DynAny.,"

component_count
public int component_count()
Returns the number of components of a DynAny.
 For a DynAny without components, it returns zero.
 The operation only counts the components at the top level.
 For example, if component_count is invoked on a DynStruct with a single member,
 the return value is 1, irrespective of the type of the member.
 
For sequences, the operation returns the current number of elements.
 For structures, exceptions, and value types, the operation returns the number of members.
 For arrays, the operation returns the number of elements.
 For unions, the operation returns 2 if the discriminator indicates that a named member is active,
 otherwise, it returns 1.
 For DynFixed and DynEnum, the operation returns zero.
 

Specified by:
component_count in interface DynAnyOperations


"
_DynValueStub,copy(),DynAny,Creates a new DynAny object whose value is a deep copy of the DynAny on which it is invoked.,"

copy
public DynAny copy()
Creates a new DynAny object whose value is a deep copy of the DynAny on which it is invoked.
 The operation is polymorphic, that is, invoking it on one of the types derived from DynAny,
 such as DynStruct, creates the derived type but returns its reference as the DynAny base type.

Specified by:
copy in interface DynAnyOperations
Returns:
a deep copy of the DynAny object


"
_DynValueStub,current_component(),DynAny,Returns the DynAny for the component at the current position.,"

current_component
public DynAny current_component()
                         throws TypeMismatch
Returns the DynAny for the component at the current position.
 It does not advance the current position, so repeated calls to current_component
 without an intervening call to rewind, next, or seek return the same component.
 The returned DynAny object reference can be used to get/set the value of the current component.
 If the current component represents a complex type, the returned reference can be narrowed
 based on the TypeCode to get the interface corresponding to the to the complex type.
 Calling current_component on a DynAny that cannot have components,
 such as a DynEnum or an empty exception, raises TypeMismatch.
 Calling current_component on a DynAny whose current position is -1 returns a nil reference.
 The iteration operations, together with current_component, can be used
 to dynamically compose an any value. After creating a dynamic any, such as a DynStruct,
 current_component and next can be used to initialize all the components of the value.
 Once the dynamic value is completely initialized, to_any creates the corresponding any value.

Specified by:
current_component in interface DynAnyOperations
Throws:
TypeMismatch - If called on a DynAny that cannot have components,
 such as a DynEnum or an empty exception


"
_DynValueStub,current_member_kind(),TCKind,Returns the TCKind associated with the member at the current position.,"

current_member_kind
public TCKind current_member_kind()
                           throws TypeMismatch,
                                  InvalidValue
Returns the TCKind associated with the member at the current position.

Specified by:
current_member_kind in interface DynValueOperations
Throws:
TypeMismatch - if the DynValue represents a null value type.
InvalidValue - if the current position does not indicate a member


"
_DynValueStub,current_member_name(),String,Returns the name of the member at the current position.,"

current_member_name
public String current_member_name()
                           throws TypeMismatch,
                                  InvalidValue
Returns the name of the member at the current position.
 This operation may return an empty string since the TypeCode of the value being
 manipulated may not contain the names of members.

Specified by:
current_member_name in interface DynValueOperations
Throws:
TypeMismatch - if the DynValue represents a null value type.
InvalidValue - if the current position does not indicate a member


"
_DynValueStub,destroy(),void,Destroys a DynAny object.,"

destroy
public void destroy()
Destroys a DynAny object.
 This operation frees any resources used to represent the data value associated with a DynAny object.
 It must be invoked on references obtained from one of the creation operations on the ORB interface
 or on a reference returned by DynAny.copy() to avoid resource leaks.
 Invoking destroy on component DynAny objects (for example, on objects returned by the
 current_component operation) does nothing.
 Destruction of a DynAny object implies destruction of all DynAny objects obtained from it.
 That is, references to components of a destroyed DynAny become invalid.
 Invocations on such references raise OBJECT_NOT_EXIST.
 It is possible to manipulate a component of a DynAny beyond the life time of the DynAny
 from which the component was obtained by making a copy of the component with the copy operation
 before destroying the DynAny from which the component was obtained.

Specified by:
destroy in interface DynAnyOperations


"
_DynValueStub,equal(DynAny dyn_any),boolean,Compares two DynAny values for equality.,"

equal
public boolean equal(DynAny dyn_any)
Compares two DynAny values for equality.
 Two DynAny values are equal if their TypeCodes are equivalent and, recursively, all component DynAnys
 have equal values.
 The current position of the two DynAnys being compared has no effect on the result of equal.

Specified by:
equal in interface DynAnyOperations
Returns:
true of the DynAnys are equal, false otherwise


"
_DynValueStub,from_any(Any value),void,Initializes the value associated with a DynAny object with the value contained in an any.,"

from_any
public void from_any(Any value)
              throws TypeMismatch,
                     InvalidValue
Initializes the value associated with a DynAny object with the value contained in an any.
 The current position of the target DynAny is set to zero for values that have components
 and to -1 for values that do not have components.

Specified by:
from_any in interface DynAnyOperations
Throws:
TypeMismatch - if the type of the passed Any is not equivalent to the type of target DynAny
InvalidValue - if the passed Any does not contain a legal value (such as a null string)


"
_DynValueStub,get_any(),Any,Extracts an Any value contained in the Any represented by this DynAny.,"

get_any
public Any get_any()
            throws TypeMismatch,
                   InvalidValue
Extracts an Any value contained in the Any represented by this DynAny.

Specified by:
get_any in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynValueStub,get_boolean(),boolean,Extracts the boolean value from this DynAny.,"

get_boolean
public boolean get_boolean()
                    throws TypeMismatch,
                           InvalidValue
Extracts the boolean value from this DynAny.

Specified by:
get_boolean in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynValueStub,get_char(),char,Extracts the char value from this DynAny.,"

get_char
public char get_char()
              throws TypeMismatch,
                     InvalidValue
Extracts the char value from this DynAny.

Specified by:
get_char in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynValueStub,get_double(),double,Extracts the double value from this DynAny.,"

get_double
public double get_double()
                  throws TypeMismatch,
                         InvalidValue
Extracts the double value from this DynAny.

Specified by:
get_double in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynValueStub,get_dyn_any(),DynAny,Extracts the Any value contained in the Any represented by this DynAny and returns it wrapped into a new DynAny.,"

get_dyn_any
public DynAny get_dyn_any()
                   throws TypeMismatch,
                          InvalidValue
Extracts the Any value contained in the Any represented by this DynAny and returns it wrapped
 into a new DynAny.

Specified by:
get_dyn_any in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynValueStub,get_float(),float,Extracts the float value from this DynAny.,"

get_float
public float get_float()
                throws TypeMismatch,
                       InvalidValue
Extracts the float value from this DynAny.

Specified by:
get_float in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynValueStub,get_long(),int,Extracts the integer value from this DynAny.,"

get_long
public int get_long()
             throws TypeMismatch,
                    InvalidValue
Extracts the integer value from this DynAny. The IDL long data type is mapped to the Java int data type.

Specified by:
get_long in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynValueStub,get_longlong(),long,Extracts the long value from this DynAny.,"

get_longlong
public long get_longlong()
                  throws TypeMismatch,
                         InvalidValue
Extracts the long value from this DynAny. The IDL long long data type is mapped to the Java long data type.

Specified by:
get_longlong in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynValueStub,get_members_as_dyn_any(),NameDynAnyPair[],Returns a sequence of NameDynAnyPairs describing the name and the value of each member in the value type.,"

get_members_as_dyn_any
public NameDynAnyPair[] get_members_as_dyn_any()
                                        throws InvalidValue
Returns a sequence of NameDynAnyPairs describing the name and the value of each member
 in the value type.
 The sequence contains members in the same order as the declaration order of members
 as indicated by the DynValue's TypeCode. The current position is not affected.
 The member names in the returned sequence will be empty strings if the DynValue's TypeCode
 does not contain member names.

Specified by:
get_members_as_dyn_any in interface DynValueOperations
Throws:
InvalidValue - if this object represents a null value type


"
_DynValueStub,get_members(),NameValuePair[],Returns a sequence of NameValuePairs describing the name and the value of each member in the value type.,"

get_members
public NameValuePair[] get_members()
                            throws InvalidValue
Returns a sequence of NameValuePairs describing the name and the value of each member
 in the value type.
 The sequence contains members in the same order as the declaration order of members
 as indicated by the DynValue's TypeCode. The current position is not affected.
 The member names in the returned sequence will be empty strings if the DynValue's TypeCode
 does not contain member names.

Specified by:
get_members in interface DynValueOperations
Throws:
InvalidValue - if this object represents a null value type


"
_DynValueStub,get_octet(),byte,Extracts the byte value from this DynAny.,"

get_octet
public byte get_octet()
               throws TypeMismatch,
                      InvalidValue
Extracts the byte value from this DynAny. The IDL octet data type is mapped to the Java byte data type.

Specified by:
get_octet in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynValueStub,get_reference(),Object,Extracts the reference to a CORBA Object from this DynAny.,"

get_reference
public Object get_reference()
                     throws TypeMismatch,
                            InvalidValue
Extracts the reference to a CORBA Object from this DynAny.

Specified by:
get_reference in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynValueStub,get_short(),short,Extracts the short value from this DynAny.,"

get_short
public short get_short()
                throws TypeMismatch,
                       InvalidValue
Extracts the short value from this DynAny.

Specified by:
get_short in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynValueStub,get_string(),String,Extracts the string value from this DynAny.,"

get_string
public String get_string()
                  throws TypeMismatch,
                         InvalidValue
Extracts the string value from this DynAny.
 Both bounded and unbounded strings are extracted using this method.

Specified by:
get_string in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynValueStub,get_typecode(),TypeCode,Extracts the TypeCode object from this DynAny.,"

get_typecode
public TypeCode get_typecode()
                      throws TypeMismatch,
                             InvalidValue
Extracts the TypeCode object from this DynAny.

Specified by:
get_typecode in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynValueStub,get_ulong(),int,Extracts the integer value from this DynAny.,"

get_ulong
public int get_ulong()
              throws TypeMismatch,
                     InvalidValue
Extracts the integer value from this DynAny. The IDL ulong data type is mapped to the Java int data type.

Specified by:
get_ulong in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynValueStub,get_ulonglong(),long,Extracts the long value from this DynAny.,"

get_ulonglong
public long get_ulonglong()
                   throws TypeMismatch,
                          InvalidValue
Extracts the long value from this DynAny.
 The IDL unsigned long long data type is mapped to the Java long data type.

Specified by:
get_ulonglong in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynValueStub,get_ushort(),short,Extracts the short value from this DynAny.,"

get_ushort
public short get_ushort()
                 throws TypeMismatch,
                        InvalidValue
Extracts the short value from this DynAny. The IDL ushort data type is mapped to the Java short data type.

Specified by:
get_ushort in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynValueStub,get_val(),Serializable,Extracts a Serializable object from this DynAny.,"

get_val
public Serializable get_val()
                     throws TypeMismatch,
                            InvalidValue
Extracts a Serializable object from this DynAny.
 The IDL ValueBase type is mapped to the Java Serializable type.

Specified by:
get_val in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynValueStub,get_wchar(),char,Extracts the long value from this DynAny.,"

get_wchar
public char get_wchar()
               throws TypeMismatch,
                      InvalidValue
Extracts the long value from this DynAny. The IDL wchar data type is mapped to the Java char data type.

Specified by:
get_wchar in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue - if this DynAny has components but has a current position of -1


"
_DynValueStub,get_wstring(),String,Extracts the string value from this DynAny.,"

get_wstring
public String get_wstring()
                   throws TypeMismatch,
                          InvalidValue
Extracts the string value from this DynAny.
 Both bounded and unbounded strings are extracted using this method.

Specified by:
get_wstring in interface DynAnyOperations
Throws:
TypeMismatch - if the accessed component in the DynAny is of a type
 that is not equivalent to the requested type.
TypeMismatch - if called on a DynAny whose current component itself has components
InvalidValue


"
_DynValueStub,insert_any(Any value),void,Inserts an Any value into the Any represented by this DynAny.,"

insert_any
public void insert_any(Any value)
                throws TypeMismatch,
                       InvalidValue
Inserts an Any value into the Any represented by this DynAny.

Specified by:
insert_any in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynValueStub,insert_boolean(boolean value),void,Inserts a boolean value into the DynAny.,"

insert_boolean
public void insert_boolean(boolean value)
                    throws TypeMismatch,
                           InvalidValue
Inserts a boolean value into the DynAny.

Specified by:
insert_boolean in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynValueStub,insert_char(char value),void,Inserts a char value into the DynAny.,"

insert_char
public void insert_char(char value)
                 throws TypeMismatch,
                        InvalidValue
Inserts a char value into the DynAny.

Specified by:
insert_char in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynValueStub,insert_double(double value),void,Inserts a double value into the DynAny.,"

insert_double
public void insert_double(double value)
                   throws TypeMismatch,
                          InvalidValue
Inserts a double value into the DynAny.

Specified by:
insert_double in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynValueStub,insert_dyn_any(DynAny value),void,Inserts the Any value contained in the parameter DynAny into the Any represented by this DynAny.,"

insert_dyn_any
public void insert_dyn_any(DynAny value)
                    throws TypeMismatch,
                           InvalidValue
Inserts the Any value contained in the parameter DynAny into the Any represented by this DynAny.

Specified by:
insert_dyn_any in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynValueStub,insert_float(float value),void,Inserts a float value into the DynAny.,"

insert_float
public void insert_float(float value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a float value into the DynAny.

Specified by:
insert_float in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynValueStub,insert_long(int value),void,Inserts an integer value into the DynAny.,"

insert_long
public void insert_long(int value)
                 throws TypeMismatch,
                        InvalidValue
Inserts an integer value into the DynAny. The IDL long data type is mapped to the Java int data type.

Specified by:
insert_long in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynValueStub,insert_longlong(long value),void,Inserts a long value into the DynAny.,"

insert_longlong
public void insert_longlong(long value)
                     throws TypeMismatch,
                            InvalidValue
Inserts a long value into the DynAny. The IDL long long data type is mapped to the Java long data type.

Specified by:
insert_longlong in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynValueStub,insert_octet(byte value),void,Inserts a byte value into the DynAny.,"

insert_octet
public void insert_octet(byte value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a byte value into the DynAny. The IDL octet data type is mapped to the Java byte data type.

Specified by:
insert_octet in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynValueStub,insert_reference(Object value),void,Inserts a reference to a CORBA object into the DynAny.,"

insert_reference
public void insert_reference(Object value)
                      throws TypeMismatch,
                             InvalidValue
Inserts a reference to a CORBA object into the DynAny.

Specified by:
insert_reference in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynValueStub,insert_short(short value),void,Inserts a short value into the DynAny.,"

insert_short
public void insert_short(short value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a short value into the DynAny.

Specified by:
insert_short in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynValueStub,insert_string(String value),void,Inserts a string value into the DynAny.,"

insert_string
public void insert_string(String value)
                   throws TypeMismatch,
                          InvalidValue
Inserts a string value into the DynAny.
 Both bounded and unbounded strings are inserted using this method.

Specified by:
insert_string in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
InvalidValue - if the string inserted is longer than the bound of a bounded string
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynValueStub,insert_typecode(TypeCode value),void,Inserts a TypeCode object into the DynAny.,"

insert_typecode
public void insert_typecode(TypeCode value)
                     throws TypeMismatch,
                            InvalidValue
Inserts a TypeCode object into the DynAny.

Specified by:
insert_typecode in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynValueStub,insert_ulong(int value),void,Inserts an integer value into the DynAny.,"

insert_ulong
public void insert_ulong(int value)
                  throws TypeMismatch,
                         InvalidValue
Inserts an integer value into the DynAny. The IDL ulong data type is mapped to the Java int data type.

Specified by:
insert_ulong in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynValueStub,insert_ulonglong(long value),void,Inserts a long value into the DynAny.,"

insert_ulonglong
public void insert_ulonglong(long value)
                      throws TypeMismatch,
                             InvalidValue
Inserts a long value into the DynAny.
 The IDL unsigned long long data type is mapped to the Java long data type.

Specified by:
insert_ulonglong in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynValueStub,insert_ushort(short value),void,Inserts a short value into the DynAny.,"

insert_ushort
public void insert_ushort(short value)
                   throws TypeMismatch,
                          InvalidValue
Inserts a short value into the DynAny. The IDL ushort data type is mapped to the Java short data type.

Specified by:
insert_ushort in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynValueStub,insert_val(Serializable value),void,Inserts a reference to a Serializable object into this DynAny.,"

insert_val
public void insert_val(Serializable value)
                throws TypeMismatch,
                       InvalidValue
Inserts a reference to a Serializable object into this DynAny.
 The IDL ValueBase type is mapped to the Java Serializable type.

Specified by:
insert_val in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynValueStub,insert_wchar(char value),void,Inserts a char value into the DynAny.,"

insert_wchar
public void insert_wchar(char value)
                  throws TypeMismatch,
                         InvalidValue
Inserts a char value into the DynAny. The IDL wchar data type is mapped to the Java char data type.

Specified by:
insert_wchar in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
TypeMismatch - if called on a DynAny whose current component itself has components


"
_DynValueStub,insert_wstring(String value),void,Inserts a string value into the DynAny.,"

insert_wstring
public void insert_wstring(String value)
                    throws TypeMismatch,
                           InvalidValue
Inserts a string value into the DynAny.
 Both bounded and unbounded strings are inserted using this method.

Specified by:
insert_wstring in interface DynAnyOperations
Throws:
InvalidValue - if this DynAny has components but has a current position of -1
InvalidValue - if the string inserted is longer than the bound of a bounded string
TypeMismatch


"
_DynValueStub,is_null(),boolean,Returns true if the DynValueCommon represents a null value type.,"

is_null
public boolean is_null()
Returns true if the DynValueCommon represents a null value type.

Specified by:
is_null in interface DynValueCommonOperations


"
_DynValueStub,next(),boolean,Advances the current position to the next component.,"

next
public boolean next()
Advances the current position to the next component.
 The operation returns true while the resulting current position indicates a component, false otherwise.
 A false return value leaves the current position at -1.
 Invoking next on a DynAny without components leaves the current position at -1 and returns false.

Specified by:
next in interface DynAnyOperations


"
_DynValueStub,rewind(),void,Is equivalent to seek(0).,"

rewind
public void rewind()
Is equivalent to seek(0).

Specified by:
rewind in interface DynAnyOperations


"
_DynValueStub,seek(int index),boolean,Sets the current position to index.,"

seek
public boolean seek(int index)
Sets the current position to index. The current position is indexed 0 to n-1, that is,
 index zero corresponds to the first component. The operation returns true if the resulting
 current position indicates a component of the DynAny and false if index indicates
 a position that does not correspond to a component.
 Calling seek with a negative index is legal. It sets the current position to -1 to indicate
 no component and returns false. Passing a non-negative index value for a DynAny that does not
 have a component at the corresponding position sets the current position to -1 and returns false.

Specified by:
seek in interface DynAnyOperations


"
_DynValueStub,set_members_as_dyn_any(NameDynAnyPair[] value),void,Initializes the value type's members from a sequence of NameDynAnyPairs.,"

set_members_as_dyn_any
public void set_members_as_dyn_any(NameDynAnyPair[] value)
                            throws TypeMismatch,
                                   InvalidValue
Initializes the value type's members from a sequence of NameDynAnyPairs.
 The operation sets the current position to zero if the passed sequences has non-zero length. Otherwise,
 if an empty sequence is passed, the current position is set to -1.
 A null value type can be initialized to a non-null value type using this method.
 Members must appear in the NameDynAnyPairs in the order in which they appear in the IDL specification
 of the value type as indicated by the DynValue's TypeCode or they must be empty strings.
 The operation makes no attempt to assign member values based on member names.

Specified by:
set_members_as_dyn_any in interface DynValueOperations
Throws:
TypeMismatch - if the member names supplied in the passed sequence do not match the
            corresponding member name in the DynValue's TypeCode and they are not empty strings
InvalidValue - if the passed sequence has a number of elements that disagrees
            with the number of members as indicated by the DynValue's TypeCode


"
_DynValueStub,set_members(NameValuePair[] value),void,Initializes the value type's members from a sequence of NameValuePairs.,"

set_members
public void set_members(NameValuePair[] value)
                 throws TypeMismatch,
                        InvalidValue
Initializes the value type's members from a sequence of NameValuePairs.
 The operation sets the current position to zero if the passed sequences has non-zero length. Otherwise,
 if an empty sequence is passed, the current position is set to -1.
 A null value type can be initialized to a non-null value type using this method.
 Members must appear in the NameValuePairs in the order in which they appear in the IDL specification
 of the value type as indicated by the DynValue's TypeCode or they must be empty strings.
 The operation makes no attempt to assign member values based on member names.

Specified by:
set_members in interface DynValueOperations
Throws:
TypeMismatch - if the member names supplied in the passed sequence do not match the
            corresponding member name in the DynValue's TypeCode and they are not empty strings
InvalidValue - if the passed sequence has a number of elements that disagrees
            with the number of members as indicated by the DynValue's TypeCode


"
_DynValueStub,set_to_null(),void,Changes the representation of a DynValueCommon to a null value type.,"

set_to_null
public void set_to_null()
Changes the representation of a DynValueCommon to a null value type.

Specified by:
set_to_null in interface DynValueCommonOperations


"
_DynValueStub,set_to_value(),void,Replaces a null value type with a newly constructed value.,"

set_to_value
public void set_to_value()
Replaces a null value type with a newly constructed value. Its components are initialized
 to default values as in DynAnyFactory.create_dyn_any_from_type_code.
 If the DynValueCommon represents a non-null value type, then this operation has no effect.

Specified by:
set_to_value in interface DynValueCommonOperations


"
_DynValueStub,to_any(),Any,Creates an any value from a DynAny object.,"

to_any
public Any to_any()
Creates an any value from a DynAny object.
 A copy of the TypeCode associated with the DynAny object is assigned to the resulting any.
 The value associated with the DynAny object is copied into the any.

Specified by:
to_any in interface DynAnyOperations
Returns:
a new Any object with the same value and TypeCode


"
_DynValueStub,type(),TypeCode,Returns the TypeCode associated with this DynAny object.,"

type
public TypeCode type()
Returns the TypeCode associated with this DynAny object.
 A DynAny object is created with a TypeCode value assigned to it.
 This TypeCode value determines the type of the value handled through the DynAny object.
 Note that the TypeCode associated with a DynAny object is initialized at the time the
 DynAny is created and cannot be changed during lifetime of the DynAny object.

Specified by:
type in interface DynAnyOperations
Returns:
The TypeCode associated with this DynAny object


"
AnySeqHelper,extract(Any a),static Any[],NULL,"

extract
public static Any[] extract(Any a)

"
AnySeqHelper,id(),static String,NULL,"

id
public static String id()

"
AnySeqHelper,"insert(Any a, Any[] that)",static void,NULL,"

insert
public static void insert(Any a,
                          Any[] that)

"
AnySeqHelper,read(InputStream istream),static Any[],NULL,"

read
public static Any[] read(InputStream istream)

"
AnySeqHelper,type(),static TypeCode,NULL,"

type
public static TypeCode type()

"
AnySeqHelper,"write(OutputStream ostream, Any[] value)",static void,NULL,"

write
public static void write(OutputStream ostream,
                         Any[] value)

"
DynAnyFactoryHelper,extract(Any a),static DynAnyFactory,NULL,"

extract
public static DynAnyFactory extract(Any a)

"
DynAnyFactoryHelper,id(),static String,NULL,"

id
public static String id()

"
DynAnyFactoryHelper,"insert(Any a, DynAnyFactory that)",static void,NULL,"

insert
public static void insert(Any a,
                          DynAnyFactory that)

"
DynAnyFactoryHelper,narrow(Object obj),static DynAnyFactory,NULL,"

narrow
public static DynAnyFactory narrow(Object obj)

"
DynAnyFactoryHelper,read(InputStream istream),static DynAnyFactory,NULL,"

read
public static DynAnyFactory read(InputStream istream)

"
DynAnyFactoryHelper,type(),static TypeCode,NULL,"

type
public static TypeCode type()

"
DynAnyFactoryHelper,unchecked_narrow(Object obj),static DynAnyFactory,NULL,"

unchecked_narrow
public static DynAnyFactory unchecked_narrow(Object obj)

"
DynAnyFactoryHelper,"write(OutputStream ostream, DynAnyFactory value)",static void,NULL,"

write
public static void write(OutputStream ostream,
                         DynAnyFactory value)

"
DynAnyHelper,extract(Any a),static DynAny,NULL,"

extract
public static DynAny extract(Any a)

"
DynAnyHelper,id(),static String,NULL,"

id
public static String id()

"
DynAnyHelper,"insert(Any a, DynAny that)",static void,NULL,"

insert
public static void insert(Any a,
                          DynAny that)

"
DynAnyHelper,narrow(Object obj),static DynAny,NULL,"

narrow
public static DynAny narrow(Object obj)

"
DynAnyHelper,read(InputStream istream),static DynAny,NULL,"

read
public static DynAny read(InputStream istream)

"
DynAnyHelper,type(),static TypeCode,NULL,"

type
public static TypeCode type()

"
DynAnyHelper,unchecked_narrow(Object obj),static DynAny,NULL,"

unchecked_narrow
public static DynAny unchecked_narrow(Object obj)

"
DynAnyHelper,"write(OutputStream ostream, DynAny value)",static void,NULL,"

write
public static void write(OutputStream ostream,
                         DynAny value)

"
DynAnySeqHelper,extract(Any a),static DynAny[],NULL,"

extract
public static DynAny[] extract(Any a)

"
DynAnySeqHelper,id(),static String,NULL,"

id
public static String id()

"
DynAnySeqHelper,"insert(Any a, DynAny[] that)",static void,NULL,"

insert
public static void insert(Any a,
                          DynAny[] that)

"
DynAnySeqHelper,read(InputStream istream),static DynAny[],NULL,"

read
public static DynAny[] read(InputStream istream)

"
DynAnySeqHelper,type(),static TypeCode,NULL,"

type
public static TypeCode type()

"
DynAnySeqHelper,"write(OutputStream ostream, DynAny[] value)",static void,NULL,"

write
public static void write(OutputStream ostream,
                         DynAny[] value)

"
DynArrayHelper,extract(Any a),static DynArray,NULL,"

extract
public static DynArray extract(Any a)

"
DynArrayHelper,id(),static String,NULL,"

id
public static String id()

"
DynArrayHelper,"insert(Any a, DynArray that)",static void,NULL,"

insert
public static void insert(Any a,
                          DynArray that)

"
DynArrayHelper,narrow(Object obj),static DynArray,NULL,"

narrow
public static DynArray narrow(Object obj)

"
DynArrayHelper,read(InputStream istream),static DynArray,NULL,"

read
public static DynArray read(InputStream istream)

"
DynArrayHelper,type(),static TypeCode,NULL,"

type
public static TypeCode type()

"
DynArrayHelper,unchecked_narrow(Object obj),static DynArray,NULL,"

unchecked_narrow
public static DynArray unchecked_narrow(Object obj)

"
DynArrayHelper,"write(OutputStream ostream, DynArray value)",static void,NULL,"

write
public static void write(OutputStream ostream,
                         DynArray value)

"
DynEnumHelper,extract(Any a),static DynEnum,NULL,"

extract
public static DynEnum extract(Any a)

"
DynEnumHelper,id(),static String,NULL,"

id
public static String id()

"
DynEnumHelper,"insert(Any a, DynEnum that)",static void,NULL,"

insert
public static void insert(Any a,
                          DynEnum that)

"
DynEnumHelper,narrow(Object obj),static DynEnum,NULL,"

narrow
public static DynEnum narrow(Object obj)

"
DynEnumHelper,read(InputStream istream),static DynEnum,NULL,"

read
public static DynEnum read(InputStream istream)

"
DynEnumHelper,type(),static TypeCode,NULL,"

type
public static TypeCode type()

"
DynEnumHelper,unchecked_narrow(Object obj),static DynEnum,NULL,"

unchecked_narrow
public static DynEnum unchecked_narrow(Object obj)

"
DynEnumHelper,"write(OutputStream ostream, DynEnum value)",static void,NULL,"

write
public static void write(OutputStream ostream,
                         DynEnum value)

"
DynFixedHelper,extract(Any a),static DynFixed,NULL,"

extract
public static DynFixed extract(Any a)

"
DynFixedHelper,id(),static String,NULL,"

id
public static String id()

"
DynFixedHelper,"insert(Any a, DynFixed that)",static void,NULL,"

insert
public static void insert(Any a,
                          DynFixed that)

"
DynFixedHelper,narrow(Object obj),static DynFixed,NULL,"

narrow
public static DynFixed narrow(Object obj)

"
DynFixedHelper,read(InputStream istream),static DynFixed,NULL,"

read
public static DynFixed read(InputStream istream)

"
DynFixedHelper,type(),static TypeCode,NULL,"

type
public static TypeCode type()

"
DynFixedHelper,unchecked_narrow(Object obj),static DynFixed,NULL,"

unchecked_narrow
public static DynFixed unchecked_narrow(Object obj)

"
DynFixedHelper,"write(OutputStream ostream, DynFixed value)",static void,NULL,"

write
public static void write(OutputStream ostream,
                         DynFixed value)

"
DynSequenceHelper,extract(Any a),static DynSequence,NULL,"

extract
public static DynSequence extract(Any a)

"
DynSequenceHelper,id(),static String,NULL,"

id
public static String id()

"
DynSequenceHelper,"insert(Any a, DynSequence that)",static void,NULL,"

insert
public static void insert(Any a,
                          DynSequence that)

"
DynSequenceHelper,narrow(Object obj),static DynSequence,NULL,"

narrow
public static DynSequence narrow(Object obj)

"
DynSequenceHelper,read(InputStream istream),static DynSequence,NULL,"

read
public static DynSequence read(InputStream istream)

"
DynSequenceHelper,type(),static TypeCode,NULL,"

type
public static TypeCode type()

"
DynSequenceHelper,unchecked_narrow(Object obj),static DynSequence,NULL,"

unchecked_narrow
public static DynSequence unchecked_narrow(Object obj)

"
DynSequenceHelper,"write(OutputStream ostream, DynSequence value)",static void,NULL,"

write
public static void write(OutputStream ostream,
                         DynSequence value)

"
DynStructHelper,extract(Any a),static DynStruct,NULL,"

extract
public static DynStruct extract(Any a)

"
DynStructHelper,id(),static String,NULL,"

id
public static String id()

"
DynStructHelper,"insert(Any a, DynStruct that)",static void,NULL,"

insert
public static void insert(Any a,
                          DynStruct that)

"
DynStructHelper,narrow(Object obj),static DynStruct,NULL,"

narrow
public static DynStruct narrow(Object obj)

"
DynStructHelper,read(InputStream istream),static DynStruct,NULL,"

read
public static DynStruct read(InputStream istream)

"
DynStructHelper,type(),static TypeCode,NULL,"

type
public static TypeCode type()

"
DynStructHelper,unchecked_narrow(Object obj),static DynStruct,NULL,"

unchecked_narrow
public static DynStruct unchecked_narrow(Object obj)

"
DynStructHelper,"write(OutputStream ostream, DynStruct value)",static void,NULL,"

write
public static void write(OutputStream ostream,
                         DynStruct value)

"
DynUnionHelper,extract(Any a),static DynUnion,NULL,"

extract
public static DynUnion extract(Any a)

"
DynUnionHelper,id(),static String,NULL,"

id
public static String id()

"
DynUnionHelper,"insert(Any a, DynUnion that)",static void,NULL,"

insert
public static void insert(Any a,
                          DynUnion that)

"
DynUnionHelper,narrow(Object obj),static DynUnion,NULL,"

narrow
public static DynUnion narrow(Object obj)

"
DynUnionHelper,read(InputStream istream),static DynUnion,NULL,"

read
public static DynUnion read(InputStream istream)

"
DynUnionHelper,type(),static TypeCode,NULL,"

type
public static TypeCode type()

"
DynUnionHelper,unchecked_narrow(Object obj),static DynUnion,NULL,"

unchecked_narrow
public static DynUnion unchecked_narrow(Object obj)

"
DynUnionHelper,"write(OutputStream ostream, DynUnion value)",static void,NULL,"

write
public static void write(OutputStream ostream,
                         DynUnion value)

"
DynValueHelper,extract(Any a),static DynValue,NULL,"

extract
public static DynValue extract(Any a)

"
DynValueHelper,id(),static String,NULL,"

id
public static String id()

"
DynValueHelper,"insert(Any a, DynValue that)",static void,NULL,"

insert
public static void insert(Any a,
                          DynValue that)

"
DynValueHelper,narrow(Object obj),static DynValue,NULL,"

narrow
public static DynValue narrow(Object obj)

"
DynValueHelper,read(InputStream istream),static DynValue,NULL,"

read
public static DynValue read(InputStream istream)

"
DynValueHelper,type(),static TypeCode,NULL,"

type
public static TypeCode type()

"
DynValueHelper,unchecked_narrow(Object obj),static DynValue,NULL,"

unchecked_narrow
public static DynValue unchecked_narrow(Object obj)

"
DynValueHelper,"write(OutputStream ostream, DynValue value)",static void,NULL,"

write
public static void write(OutputStream ostream,
                         DynValue value)

"
FieldNameHelper,extract(Any a),static String,NULL,"

extract
public static String extract(Any a)

"
FieldNameHelper,id(),static String,NULL,"

id
public static String id()

"
FieldNameHelper,"insert(Any a, String that)",static void,NULL,"

insert
public static void insert(Any a,
                          String that)

"
FieldNameHelper,read(InputStream istream),static String,NULL,"

read
public static String read(InputStream istream)

"
FieldNameHelper,type(),static TypeCode,NULL,"

type
public static TypeCode type()

"
FieldNameHelper,"write(OutputStream ostream, String value)",static void,NULL,"

write
public static void write(OutputStream ostream,
                         String value)

"
NameDynAnyPairHelper,extract(Any a),static NameDynAnyPair,NULL,"

extract
public static NameDynAnyPair extract(Any a)

"
NameDynAnyPairHelper,id(),static String,NULL,"

id
public static String id()

"
NameDynAnyPairHelper,"insert(Any a, NameDynAnyPair that)",static void,NULL,"

insert
public static void insert(Any a,
                          NameDynAnyPair that)

"
NameDynAnyPairHelper,read(InputStream istream),static NameDynAnyPair,NULL,"

read
public static NameDynAnyPair read(InputStream istream)

"
NameDynAnyPairHelper,type(),static TypeCode,NULL,"

type
public static TypeCode type()

"
NameDynAnyPairHelper,"write(OutputStream ostream, NameDynAnyPair value)",static void,NULL,"

write
public static void write(OutputStream ostream,
                         NameDynAnyPair value)

"
NameDynAnyPairSeqHelper,extract(Any a),static NameDynAnyPair[],NULL,"

extract
public static NameDynAnyPair[] extract(Any a)

"
NameDynAnyPairSeqHelper,id(),static String,NULL,"

id
public static String id()

"
NameDynAnyPairSeqHelper,"insert(Any a, NameDynAnyPair[] that)",static void,NULL,"

insert
public static void insert(Any a,
                          NameDynAnyPair[] that)

"
NameDynAnyPairSeqHelper,read(InputStream istream),static NameDynAnyPair[],NULL,"

read
public static NameDynAnyPair[] read(InputStream istream)

"
NameDynAnyPairSeqHelper,type(),static TypeCode,NULL,"

type
public static TypeCode type()

"
NameDynAnyPairSeqHelper,"write(OutputStream ostream, NameDynAnyPair[] value)",static void,NULL,"

write
public static void write(OutputStream ostream,
                         NameDynAnyPair[] value)

"
NameValuePairHelper,extract(Any a),static NameValuePair,NULL,"

extract
public static NameValuePair extract(Any a)

"
NameValuePairHelper,id(),static String,NULL,"

id
public static String id()

"
NameValuePairHelper,"insert(Any a, NameValuePair that)",static void,NULL,"

insert
public static void insert(Any a,
                          NameValuePair that)

"
NameValuePairHelper,read(InputStream istream),static NameValuePair,NULL,"

read
public static NameValuePair read(InputStream istream)

"
NameValuePairHelper,type(),static TypeCode,NULL,"

type
public static TypeCode type()

"
NameValuePairHelper,"write(OutputStream ostream, NameValuePair value)",static void,NULL,"

write
public static void write(OutputStream ostream,
                         NameValuePair value)

"
NameValuePairSeqHelper,extract(Any a),static NameValuePair[],NULL,"

extract
public static NameValuePair[] extract(Any a)

"
NameValuePairSeqHelper,id(),static String,NULL,"

id
public static String id()

"
NameValuePairSeqHelper,"insert(Any a, NameValuePair[] that)",static void,NULL,"

insert
public static void insert(Any a,
                          NameValuePair[] that)

"
NameValuePairSeqHelper,read(InputStream istream),static NameValuePair[],NULL,"

read
public static NameValuePair[] read(InputStream istream)

"
NameValuePairSeqHelper,type(),static TypeCode,NULL,"

type
public static TypeCode type()

"
NameValuePairSeqHelper,"write(OutputStream ostream, NameValuePair[] value)",static void,NULL,"

write
public static void write(OutputStream ostream,
                         NameValuePair[] value)

"
