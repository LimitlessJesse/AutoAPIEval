Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,ConsoleHandler,1,void close(),True,Override StreamHandler.close to do a flush but not to close the output stream.,"

close
public void close()
Override StreamHandler.close to do a flush but not
 to close the output stream.  That is, we do not
 close System.err.

Overrides:
close in class StreamHandler


"
0,ConsoleHandler,2,void flush(),False,,NULL
0,ConsoleHandler,3,void publish(LogRecord record),True,Publish a LogRecord.,"

publish
public void publish(LogRecord record)
Publish a LogRecord.
 
 The logging request was made initially to a Logger object,
 which initialized the LogRecord and forwarded it here.
 

Overrides:
publish in class StreamHandler
Parameters:
record - description of the log event. A null record is
                 silently ignored and is not published


"
0,ConsoleHandler,4,void setLevel(Level newLevel),False,,NULL
0,ConsoleHandler,5,void setFormatter(Formatter newFormatter),False,,NULL
1,ErrorManager,1,"void error(String message, Exception ex, int code)",True,The error method is called when a Handler failure occurs.,"

error
public void error(String msg,
                  Exception ex,
                  int code)
The error method is called when a Handler failure occurs.
 
 This method may be overridden in subclasses.  The default
 behavior in this base class is that the first call is
 reported to System.err, and subsequent calls are ignored.

Parameters:
msg - a descriptive string (may be null)
ex - an exception (may be null)
code - an error code defined in ErrorManager


"
1,ErrorManager,2,void info(String message),False,,NULL
1,ErrorManager,3,void warning(String message),False,,NULL
1,ErrorManager,4,void severe(String message),False,,NULL
1,ErrorManager,5,"void throwable(String message, Throwable t)",False,,NULL
2,FileHandler,1,"FileHandler(String pattern, int limit, int count)",False,,NULL
2,FileHandler,2,"FileHandler(String pattern, int limit, int count, boolean append)",False,,NULL
2,FileHandler,3,void publish(LogRecord record),True,Format and publish a LogRecord.,"

publish
public void publish(LogRecord record)
Format and publish a LogRecord.

Overrides:
publish in class StreamHandler
Parameters:
record - description of the log event. A null record is
                 silently ignored and is not published


"
2,FileHandler,4,void flush(),False,,NULL
2,FileHandler,5,void close(),True,Close all the files.,"

close
public void close()
           throws SecurityException
Close all the files.

Overrides:
close in class StreamHandler
Throws:
SecurityException - if a security manager exists and if
             the caller does not have LoggingPermission(""control"").


"
3,Formatter,1,String format(LogRecord record),True,Format the given log record and return the formatted string.,"

format
public abstract String format(LogRecord record)
Format the given log record and return the formatted string.
 
 The resulting formatted String will normally include a
 localized and formatted version of the LogRecord's message field.
 It is recommended to use the formatMessage(java.util.logging.LogRecord)
 convenience method to localize and format the message field.

Parameters:
record - the log record to be formatted.
Returns:
the formatted log record


"
3,Formatter,2,String getHead(Handler h),True,Return the header string for a set of formatted records.,"

getHead
public String getHead(Handler h)
Return the header string for a set of formatted records.
 
 This base class returns an empty string, but this may be
 overridden by subclasses.

Parameters:
h - The target handler (can be null)
Returns:
header string


"
3,Formatter,3,String getTail(Handler h),True,Return the tail string for a set of formatted records.,"

getTail
public String getTail(Handler h)
Return the tail string for a set of formatted records.
 
 This base class returns an empty string, but this may be
 overridden by subclasses.

Parameters:
h - The target handler (can be null)
Returns:
tail string


"
3,Formatter,4,void setContext(LoggingContext context),False,,NULL
3,Formatter,5,void setFormat(String format),False,,NULL
4,Handler,1,void close(),True,Close the Handler and free all associated resources.,"

close
public abstract void close()
                    throws SecurityException
Close the Handler and free all associated resources.
 
 The close method will perform a flush and then close the
 Handler.   After close has been called this Handler
 should no longer be used.  Method calls may either be silently
 ignored or may throw runtime exceptions.

Throws:
SecurityException - if a security manager exists and if
             the caller does not have LoggingPermission(""control"").


"
4,Handler,2,void flush(),True,Flush any buffered output.,"

flush
public abstract void flush()
Flush any buffered output.

"
4,Handler,3,void publish(LogRecord record),True,Publish a LogRecord.,"

publish
public abstract void publish(LogRecord record)
Publish a LogRecord.
 
 The logging request was made initially to a Logger object,
 which initialized the LogRecord and forwarded it here.
 
 The Handler  is responsible for formatting the message, when and
 if necessary.  The formatting should include localization.

Parameters:
record - description of the log event. A null record is
                 silently ignored and is not published


"
4,Handler,4,void setFormatter(Formatter newFormatter),True,Set a Formatter.,"

setFormatter
public void setFormatter(Formatter newFormatter)
                  throws SecurityException
Set a Formatter.  This Formatter will be used
 to format LogRecords for this Handler.
 
 Some Handlers may not use Formatters, in
 which case the Formatter will be remembered, but not used.
 

Parameters:
newFormatter - the Formatter to use (may not be null)
Throws:
SecurityException - if a security manager exists and if
             the caller does not have LoggingPermission(""control"").


"
4,Handler,5,void setFilter(Filter newFilter),True,Set a Filter to control output on this Handler.,"

setFilter
public void setFilter(Filter newFilter)
               throws SecurityException
Set a Filter to control output on this Handler.
 
 For each call of publish the Handler will call
 this Filter (if it is non-null) to check if the
 LogRecord should be published or discarded.

Parameters:
newFilter - a Filter object (may be null)
Throws:
SecurityException - if a security manager exists and if
             the caller does not have LoggingPermission(""control"").


"
4,Handler,6,void setLevel(Level newLevel),True,Set the log level specifying which message levels will be logged by this Handler.,"

setLevel
public void setLevel(Level newLevel)
              throws SecurityException
Set the log level specifying which message levels will be
 logged by this Handler.  Message levels lower than this
 value will be discarded.
 
 The intention is to allow developers to turn on voluminous
 logging, but to limit the messages that are sent to certain
 Handlers.

Parameters:
newLevel - the new value for the log level
Throws:
SecurityException - if a security manager exists and if
             the caller does not have LoggingPermission(""control"").


"
4,Handler,7,void setEncoding(String encoding),True,Set the character encoding used by this Handler.,"

setEncoding
public void setEncoding(String encoding)
                 throws SecurityException,
                        UnsupportedEncodingException
Set the character encoding used by this Handler.
 
 The encoding should be set before any LogRecords are written
 to the Handler.

Parameters:
encoding - The name of a supported character encoding.
        May be null, to indicate the default platform encoding.
Throws:
SecurityException - if a security manager exists and if
             the caller does not have LoggingPermission(""control"").
UnsupportedEncodingException - if the named encoding is
          not supported.


"
4,Handler,8,void setErrorManager(ErrorManager em),True,Define an ErrorManager for this Handler.,"

setErrorManager
public void setErrorManager(ErrorManager em)
Define an ErrorManager for this Handler.
 
 The ErrorManager's ""error"" method will be invoked if any
 errors occur while using this Handler.

Parameters:
em - the new ErrorManager
Throws:
SecurityException - if a security manager exists and if
             the caller does not have LoggingPermission(""control"").


"
4,Handler,9,void setOutputStream(OutputStream out),False,,NULL
4,Handler,10,void setOutputStream(OutputStream out),False,,NULL
4,Handler,11,void setOutputStream(OutputStream out),False,,NULL
4,Handler,12,void setOutputStream(OutputStream out),False,,NULL
4,Handler,13,void setOutputStream(OutputStream out),False,,NULL
4,Handler,14,void setOutputStream(OutputStream out),False,,NULL
4,Handler,15,void setOutputStream(OutputStream out),False,,NULL
4,Handler,16,void setOutputStream(OutputStream out),False,,NULL
4,Handler,17,void setOutputStream(OutputStream out),False,,NULL
4,Handler,18,void setOutputStream(OutputStream out),False,,NULL
4,Handler,19,void setOutputStream(OutputStream out),False,,NULL
4,Handler,20,void setOutputStream(OutputStream out),False,,NULL
5,Level,1,Level ALL,False,,NULL
5,Level,2,Level CONFIG,False,,NULL
5,Level,3,Level FINE,False,,NULL
5,Level,4,Level FINER,False,,NULL
5,Level,5,Level FINEST,False,,NULL
5,Level,6,Level INFO,False,,NULL
5,Level,7,Level OFF,False,,NULL
5,Level,8,Level SEVERE,False,,NULL
5,Level,9,Level WARNING,False,,NULL
5,Level,10,Level parse(String s),True,Parse a level name string into a Level.,"

parse
public static Level parse(String name)
                   throws IllegalArgumentException
Parse a level name string into a Level.
 
 The argument string may consist of either a level name
 or an integer value.
 
 For example:
 
     ""SEVERE""
      ""1000""
 

Parameters:
name - string to be parsed
Returns:
The parsed value. Passing an integer that corresponds to a known name
 (e.g., 700) will return the associated name (e.g., CONFIG).
 Passing an integer that does not (e.g., 1) will return a new level name
 initialized to that value.
Throws:
NullPointerException - if the name is null
IllegalArgumentException - if the value is not valid.
 Valid values are integers between Integer.MIN_VALUE
 and Integer.MAX_VALUE, and all known level names.
 Known names are the levels defined by this class (e.g., FINE,
 FINER, FINEST), or created by this class with
 appropriate package access, or new levels defined or created
 by subclasses.


"
6,Logger,1,void setLevel(Level newLevel),True,Set the log level specifying which message levels will be logged by this logger.,"

setLevel
public void setLevel(Level newLevel)
              throws SecurityException
Set the log level specifying which message levels will be
 logged by this logger.  Message levels lower than this
 value will be discarded.  The level value Level.OFF
 can be used to turn off logging.
 
 If the new level is null, it means that this node should
 inherit its level from its nearest ancestor with a specific
 (non-null) level value.

Parameters:
newLevel - the new value for the log level (may be null)
Throws:
SecurityException - if a security manager exists,
          this logger is not anonymous, and the caller
          does not have LoggingPermission(""control"").


"
6,Logger,2,"void log(Level level, String msg)",True,"Log a message, with no arguments.","

log
public void log(Level level,
                String msg)
Log a message, with no arguments.
 
 If the logger is currently enabled for the given message
 level then the given message is forwarded to all the
 registered output Handler objects.
 

Parameters:
level - One of the message level identifiers, e.g., SEVERE
msg - The string message (or a key in the message catalog)


"
6,Logger,3,"void log(Level level, String msg, Throwable thrown)",True,"Log a message, with associated Throwable information.","

log
public void log(Level level,
                String msg,
                Throwable thrown)
Log a message, with associated Throwable information.
 
 If the logger is currently enabled for the given message
 level then the given arguments are stored in a LogRecord
 which is forwarded to all registered output handlers.
 
 Note that the thrown argument is stored in the LogRecord thrown
 property, rather than the LogRecord parameters property.  Thus it is
 processed specially by output Formatters and is not treated
 as a formatting parameter to the LogRecord message property.
 

Parameters:
level - One of the message level identifiers, e.g., SEVERE
msg - The string message (or a key in the message catalog)
thrown - Throwable associated with log message.


"
6,Logger,4,void log(LogRecord record),True,Log a LogRecord.,"

log
public void log(LogRecord record)
Log a LogRecord.
 
 All the other logging methods in this class call through
 this method to actually perform any logging.  Subclasses can
 override this single method to capture all log activity.

Parameters:
record - the LogRecord to be published


"
6,Logger,5,void severe(String msg),True,Log a SEVERE message.,"

severe
public void severe(String msg)
Log a SEVERE message.
 
 If the logger is currently enabled for the SEVERE message
 level then the given message is forwarded to all the
 registered output Handler objects.
 

Parameters:
msg - The string message (or a key in the message catalog)


"
7,LoggingPermission,1,"LoggingPermission(String name, String actions)",False,,NULL
7,LoggingPermission,2,String getActions(),False,,NULL
7,LoggingPermission,3,String getName(),False,,NULL
7,LoggingPermission,4,boolean implies(Permission p),False,,NULL
7,LoggingPermission,5,boolean equals(Object obj),False,,NULL
8,LogManager,1,void reset(),True,Reset the logging configuration.,"

reset
public void reset()
           throws SecurityException
Reset the logging configuration.
 
 For all named loggers, the reset operation removes and closes
 all Handlers and (except for the root logger) sets the level
 to null.  The root logger's level is set to Level.INFO.

Throws:
SecurityException - if a security manager exists and if
             the caller does not have LoggingPermission(""control"").


"
8,LogManager,2,void readConfiguration(),True,Reinitialize the logging properties and reread the logging configuration.,"

readConfiguration
public void readConfiguration()
                       throws IOException,
                              SecurityException
Reinitialize the logging properties and reread the logging configuration.
 
 The same rules are used for locating the configuration properties
 as are used at startup.  So normally the logging properties will
 be re-read from the same file that was used at startup.
 
 Any log level definitions in the new configuration file will be
 applied using Logger.setLevel(), if the target Logger exists.
 
 A PropertyChangeEvent will be fired after the properties are read.

Throws:
SecurityException - if a security manager exists and if
             the caller does not have LoggingPermission(""control"").
IOException - if there are IO problems reading the configuration.


"
8,LogManager,3,Logger getLogger(String name),True,Method to find a named logger.,"

getLogger
public Logger getLogger(String name)
Method to find a named logger.
 
 Note that since untrusted code may create loggers with
 arbitrary names this method should not be relied on to
 find Loggers for security sensitive logging.
 It is also important to note that the Logger associated with the
 String name may be garbage collected at any time if there
 is no strong reference to the Logger. The caller of this method
 must check the return value for null in order to properly handle
 the case where the Logger has been garbage collected.
 

Parameters:
name - name of the logger
Returns:
matching logger or null if none is found


"
8,LogManager,4,void addLogger(Logger logger),False,,NULL
8,LogManager,5,void removeLogger(Logger logger),False,,NULL
9,LogRecord,1,void setLoggerName(String name),True,Set the source Logger's name.,"

setLoggerName
public void setLoggerName(String name)
Set the source Logger's name.

Parameters:
name - the source logger name (may be null)


"
9,LogRecord,2,String getLoggerName(),True,Get the source Logger's name.,"

getLoggerName
public String getLoggerName()
Get the source Logger's name.

Returns:
source logger name (may be null)


"
9,LogRecord,3,void setMessage(String msg),True,"Set the ""raw"" log message, before localization or formatting.","

setMessage
public void setMessage(String message)
Set the ""raw"" log message, before localization or formatting.

Parameters:
message - the raw message string (may be null)


"
9,LogRecord,4,String getMessage(),True,"Get the ""raw"" log message, before localization or formatting.","

getMessage
public String getMessage()
Get the ""raw"" log message, before localization or formatting.
 
 May be null, which is equivalent to the empty string """".
 
 This message may be either the final text or a localization key.
 
 During formatting, if the source logger has a localization
 ResourceBundle and if that ResourceBundle has an entry for
 this message string, then the message string is replaced
 with the localized value.

Returns:
the raw message string


"
9,LogRecord,5,void setLevel(Level level),True,"Set the logging message level, for example Level.SEVERE.","

setLevel
public void setLevel(Level level)
Set the logging message level, for example Level.SEVERE.

Parameters:
level - the logging message level


"
9,LogRecord,6,Level getLevel(),True,"Get the logging message level, for example Level.SEVERE.","

getLevel
public Level getLevel()
Get the logging message level, for example Level.SEVERE.

Returns:
the logging message level


"
9,LogRecord,7,void setMillis(long millis),True,Set event time.,"

setMillis
public void setMillis(long millis)
Set event time.

Parameters:
millis - event time in millis since 1970


"
9,LogRecord,8,long getMillis(),True,Get event time in milliseconds since 1970.,"

getMillis
public long getMillis()
Get event time in milliseconds since 1970.

Returns:
event time in millis since 1970


"
9,LogRecord,9,void setSourceClassName(String sourceClassName),True,Set the name of the class that (allegedly) issued the logging request.,"

setSourceClassName
public void setSourceClassName(String sourceClassName)
Set the name of the class that (allegedly) issued the logging request.

Parameters:
sourceClassName - the source class name (may be null)


"
9,LogRecord,10,String getSourceClassName(),True,Get the name of the class that (allegedly) issued the logging request.,"

getSourceClassName
public String getSourceClassName()
Get the  name of the class that (allegedly) issued the logging request.
 
 Note that this sourceClassName is not verified and may be spoofed.
 This information may either have been provided as part of the
 logging call, or it may have been inferred automatically by the
 logging framework.  In the latter case, the information may only
 be approximate and may in fact describe an earlier call on the
 stack frame.
 
 May be null if no information could be obtained.

Returns:
the source class name


"
9,LogRecord,11,void setSourceMethodName(String sourceMethodName),True,Set the name of the method that (allegedly) issued the logging request.,"

setSourceMethodName
public void setSourceMethodName(String sourceMethodName)
Set the name of the method that (allegedly) issued the logging request.

Parameters:
sourceMethodName - the source method name (may be null)


"
9,LogRecord,12,String getSourceMethodName(),True,Get the name of the method that (allegedly) issued the logging request.,"

getSourceMethodName
public String getSourceMethodName()
Get the  name of the method that (allegedly) issued the logging request.
 
 Note that this sourceMethodName is not verified and may be spoofed.
 This information may either have been provided as part of the
 logging call, or it may have been inferred automatically by the
 logging framework.  In the latter case, the information may only
 be approximate and may in fact describe an earlier call on the
 stack frame.
 
 May be null if no information could be obtained.

Returns:
the source method name


"
9,LogRecord,13,void setThreadID(long threadID),False,,NULL
9,LogRecord,14,long getThreadID(),False,,NULL
9,LogRecord,15,void setThrown(Throwable thrown),True,Set a throwable associated with the log event.,"

setThrown
public void setThrown(Throwable thrown)
Set a throwable associated with the log event.

Parameters:
thrown - a throwable (may be null)


"
9,LogRecord,16,Throwable getThrown(),True,Get any throwable associated with the log record.,"

getThrown
public Throwable getThrown()
Get any throwable associated with the log record.
 
 If the event involved an exception, this will be the
 exception object. Otherwise null.

Returns:
a throwable


"
9,LogRecord,17,void setResourceBundle(ResourceBundle bundle),True,Set the localization resource bundle.,"

setResourceBundle
public void setResourceBundle(ResourceBundle bundle)
Set the localization resource bundle.

Parameters:
bundle - localization bundle (may be null)


"
9,LogRecord,18,ResourceBundle getResourceBundle(),True,Get the localization resource bundle,"

getResourceBundle
public ResourceBundle getResourceBundle()
Get the localization resource bundle
 
 This is the ResourceBundle that should be used to localize
 the message string before formatting it.  The result may
 be null if the message is not localizable, or if no suitable
 ResourceBundle is available.

Returns:
the localization resource bundle


"
9,LogRecord,19,void setResourceBundle(ResourceBundle bundle),True,Set the localization resource bundle.,"

setResourceBundle
public void setResourceBundle(ResourceBundle bundle)
Set the localization resource bundle.

Parameters:
bundle - localization bundle (may be null)


"
9,LogRecord,20,ResourceBundle getResourceBundle(),True,Get the localization resource bundle,"

getResourceBundle
public ResourceBundle getResourceBundle()
Get the localization resource bundle
 
 This is the ResourceBundle that should be used to localize
 the message string before formatting it.  The result may
 be null if the message is not localizable, or if no suitable
 ResourceBundle is available.

Returns:
the localization resource bundle


"
9,LogRecord,21,void setParameters(Object[] parameters),True,Set the parameters to the log message.,"

setParameters
public void setParameters(Object[] parameters)
Set the parameters to the log message.

Parameters:
parameters - the log message parameters. (may be null)


"
9,LogRecord,22,Object[] getParameters(),True,Get the parameters to the log message.,"

getParameters
public Object[] getParameters()
Get the parameters to the log message.

Returns:
the log message parameters.  May be null if
                  there are no parameters.


"
9,LogRecord,23,void setSequenceNumber(long seqNum),True,Set the sequence number.,"

setSequenceNumber
public void setSequenceNumber(long seq)
Set the sequence number.
 
 Sequence numbers are normally assigned in the LogRecord constructor,
 so it should not normally be necessary to use this method.

Parameters:
seq - the sequence number


"
9,LogRecord,24,long getSequenceNumber(),True,Get the sequence number.,"

getSequenceNumber
public long getSequenceNumber()
Get the sequence number.
 
 Sequence numbers are normally assigned in the LogRecord
 constructor, which assigns unique sequence numbers to
 each new LogRecord in increasing order.

Returns:
the sequence number


"
9,LogRecord,25,void setMillis(long millis),True,Set event time.,"

setMillis
public void setMillis(long millis)
Set event time.

Parameters:
millis - event time in millis since 1970


"
9,LogRecord,26,long getMillis(),True,Get event time in milliseconds since 1970.,"

getMillis
public long getMillis()
Get event time in milliseconds since 1970.

Returns:
event time in millis since 1970


"
9,LogRecord,27,void setThreadID(long threadID),False,,NULL
9,LogRecord,28,long getThreadID(),False,,NULL
9,LogRecord,29,void setThrown(Throwable thrown),True,Set a throwable associated with the log event.,"

setThrown
public void setThrown(Throwable thrown)
Set a throwable associated with the log event.

Parameters:
thrown - a throwable (may be null)


"
9,LogRecord,30,Throwable getThrown(),True,Get any throwable associated with the log record.,"

getThrown
public Throwable getThrown()
Get any throwable associated with the log record.
 
 If the event involved an exception, this will be the
 exception object. Otherwise null.

Returns:
a throwable


"
9,LogRecord,31,void setResourceBundle(ResourceBundle bundle),True,Set the localization resource bundle.,"

setResourceBundle
public void setResourceBundle(ResourceBundle bundle)
Set the localization resource bundle.

Parameters:
bundle - localization bundle (may be null)


"
9,LogRecord,32,ResourceBundle getResourceBundle(),True,Get the localization resource bundle,"

getResourceBundle
public ResourceBundle getResourceBundle()
Get the localization resource bundle
 
 This is the ResourceBundle that should be used to localize
 the message string before formatting it.  The result may
 be null if the message is not localizable, or if no suitable
 ResourceBundle is available.

Returns:
the localization resource bundle


"
9,LogRecord,33,void setParameters(Object[] parameters),True,Set the parameters to the log message.,"

setParameters
public void setParameters(Object[] parameters)
Set the parameters to the log message.

Parameters:
parameters - the log message parameters. (may be null)


"
9,LogRecord,34,Object[] getParameters(),True,Get the parameters to the log message.,"

getParameters
public Object[] getParameters()
Get the parameters to the log message.

Returns:
the log message parameters.  May be null if
                  there are no parameters.


"
9,LogRecord,35,void setSequenceNumber(long seqNum),True,Set the sequence number.,"

setSequenceNumber
public void setSequenceNumber(long seq)
Set the sequence number.
 
 Sequence numbers are normally assigned in the LogRecord constructor,
 so it should not normally be necessary to use this method.

Parameters:
seq - the sequence number


"
9,LogRecord,36,long getSequenceNumber(),True,Get the sequence number.,"

getSequenceNumber
public long getSequenceNumber()
Get the sequence number.
 
 Sequence numbers are normally assigned in the LogRecord
 constructor, which assigns unique sequence numbers to
 each new LogRecord in increasing order.

Returns:
the sequence number


"
9,LogRecord,37,void setMillis(long millis),True,Set event time.,"

setMillis
public void setMillis(long millis)
Set event time.

Parameters:
millis - event time in millis since 1970


"
9,LogRecord,38,long getMillis(),True,Get event time in milliseconds since 1970.,"

getMillis
public long getMillis()
Get event time in milliseconds since 1970.

Returns:
event time in millis since 1970


"
9,LogRecord,39,void setThreadID(long threadID),False,,NULL
9,LogRecord,40,long getThreadID(),False,,NULL
9,LogRecord,41,void setThrown(Throwable thrown),True,Set a throwable associated with the log event.,"

setThrown
public void setThrown(Throwable thrown)
Set a throwable associated with the log event.

Parameters:
thrown - a throwable (may be null)


"
9,LogRecord,42,Throwable getThrown(),True,Get any throwable associated with the log record.,"

getThrown
public Throwable getThrown()
Get any throwable associated with the log record.
 
 If the event involved an exception, this will be the
 exception object. Otherwise null.

Returns:
a throwable


"
9,LogRecord,43,void setResourceBundle(ResourceBundle bundle),True,Set the localization resource bundle.,"

setResourceBundle
public void setResourceBundle(ResourceBundle bundle)
Set the localization resource bundle.

Parameters:
bundle - localization bundle (may be null)


"
9,LogRecord,44,ResourceBundle getResourceBundle(),True,Get the localization resource bundle,"

getResourceBundle
public ResourceBundle getResourceBundle()
Get the localization resource bundle
 
 This is the ResourceBundle that should be used to localize
 the message string before formatting it.  The result may
 be null if the message is not localizable, or if no suitable
 ResourceBundle is available.

Returns:
the localization resource bundle


"
9,LogRecord,45,void setParameters(Object[] parameters),True,Set the parameters to the log message.,"

setParameters
public void setParameters(Object[] parameters)
Set the parameters to the log message.

Parameters:
parameters - the log message parameters. (may be null)


"
9,LogRecord,46,Object[] getParameters(),True,Get the parameters to the log message.,"

getParameters
public Object[] getParameters()
Get the parameters to the log message.

Returns:
the log message parameters.  May be null if
                  there are no parameters.


"
9,LogRecord,47,void setSequenceNumber(long seqNum),True,Set the sequence number.,"

setSequenceNumber
public void setSequenceNumber(long seq)
Set the sequence number.
 
 Sequence numbers are normally assigned in the LogRecord constructor,
 so it should not normally be necessary to use this method.

Parameters:
seq - the sequence number


"
9,LogRecord,48,long getSequenceNumber(),True,Get the sequence number.,"

getSequenceNumber
public long getSequenceNumber()
Get the sequence number.
 
 Sequence numbers are normally assigned in the LogRecord
 constructor, which assigns unique sequence numbers to
 each new LogRecord in increasing order.

Returns:
the sequence number


"
9,LogRecord,49,void setMillis(long millis),True,Set event time.,"

setMillis
public void setMillis(long millis)
Set event time.

Parameters:
millis - event time in millis since 1970


"
9,LogRecord,50,long getMillis(),True,Get event time in milliseconds since 1970.,"

getMillis
public long getMillis()
Get event time in milliseconds since 1970.

Returns:
event time in millis since 1970


"
9,LogRecord,51,void setThreadID(long threadID),False,,NULL
9,LogRecord,52,long getThreadID(),False,,NULL
9,LogRecord,53,void setThrown(Throwable thrown),True,Set a throwable associated with the log event.,"

setThrown
public void setThrown(Throwable thrown)
Set a throwable associated with the log event.

Parameters:
thrown - a throwable (may be null)


"
9,LogRecord,54,Throwable getThrown(),True,Get any throwable associated with the log record.,"

getThrown
public Throwable getThrown()
Get any throwable associated with the log record.
 
 If the event involved an exception, this will be the
 exception object. Otherwise null.

Returns:
a throwable


"
9,LogRecord,55,void setResourceBundle(ResourceBundle bundle),True,Set the localization resource bundle.,"

setResourceBundle
public void setResourceBundle(ResourceBundle bundle)
Set the localization resource bundle.

Parameters:
bundle - localization bundle (may be null)


"
9,LogRecord,56,ResourceBundle getResourceBundle(),True,Get the localization resource bundle,"

getResourceBundle
public ResourceBundle getResourceBundle()
Get the localization resource bundle
 
 This is the ResourceBundle that should be used to localize
 the message string before formatting it.  The result may
 be null if the message is not localizable, or if no suitable
 ResourceBundle is available.

Returns:
the localization resource bundle


"
9,LogRecord,57,void setParameters(Object[] parameters),True,Set the parameters to the log message.,"

setParameters
public void setParameters(Object[] parameters)
Set the parameters to the log message.

Parameters:
parameters - the log message parameters. (may be null)


"
9,LogRecord,58,Object[] getParameters(),True,Get the parameters to the log message.,"

getParameters
public Object[] getParameters()
Get the parameters to the log message.

Returns:
the log message parameters.  May be null if
                  there are no parameters.


"
9,LogRecord,59,void setSequenceNumber(long seqNum),True,Set the sequence number.,"

setSequenceNumber
public void setSequenceNumber(long seq)
Set the sequence number.
 
 Sequence numbers are normally assigned in the LogRecord constructor,
 so it should not normally be necessary to use this method.

Parameters:
seq - the sequence number


"
9,LogRecord,60,long getSequenceNumber(),True,Get the sequence number.,"

getSequenceNumber
public long getSequenceNumber()
Get the sequence number.
 
 Sequence numbers are normally assigned in the LogRecord
 constructor, which assigns unique sequence numbers to
 each new LogRecord in increasing order.

Returns:
the sequence number


"
10,MemoryHandler,1,"MemoryHandler(Handler target, int size, Level pushLevel, boolean ignoreOverflow)",False,,NULL
10,MemoryHandler,2,void push(),True,Push any buffered output to the target Handler.,"

push
public void push()
Push any buffered output to the target Handler.
 
 The buffer is then cleared.

"
10,MemoryHandler,3,void setPushLevel(Level newLevel),True,Set the pushLevel.,"

setPushLevel
public void setPushLevel(Level newLevel)
                  throws SecurityException
Set the pushLevel.  After a LogRecord is copied
 into our internal buffer, if its level is greater than or equal to
 the pushLevel, then push will be called.

Parameters:
newLevel - the new value of the pushLevel
Throws:
SecurityException - if a security manager exists and if
             the caller does not have LoggingPermission(""control"").


"
10,MemoryHandler,4,void setSize(int newSize),False,,NULL
10,MemoryHandler,5,void setIgnoreOverflow(boolean ignoreOverflow),False,,NULL
11,SimpleFormatter,1,String format(LogRecord record),True,Format the given LogRecord.,"

format
public String format(LogRecord record)
Format the given LogRecord.
 
 The formatting can be customized by specifying the
 format string
 in the 
java.util.logging.SimpleFormatter.format property.
 The given LogRecord will be formatted as if by calling:
 
    String.format(format, date, source, logger, level, message, thrown);
 
 where the arguments are:

format - the java.util.Formatter format string specified in the
     java.util.logging.SimpleFormatter.format property
     or the default format.
date - a Date object representing
     event time of the log record.
source - a string representing the caller, if available;
     otherwise, the logger's name.
logger - the logger's name.
level - the log level.
message - the formatted log message
     returned from the Formatter.formatMessage(LogRecord)
     method.  It uses java.text
     formatting and does not use the java.util.Formatter
     format argument.
thrown - a string representing
     the throwable
     associated with the log record and its backtrace
     beginning with a newline character, if any;
     otherwise, an empty string.

Some example formats:

 java.util.logging.SimpleFormatter.format=""%4$s: %5$s [%1$tc]%n""
This prints 1 line with the log level (4$),
     the log message (5$) and the timestamp (1$) in
     a square bracket.
     
     WARNING: warning message [Tue Mar 22 13:11:31 PDT 2011]
     
 java.util.logging.SimpleFormatter.format=""%1$tc %2$s%n%4$s: %5$s%6$s%n""
This prints 2 lines where the first line includes
     the timestamp (1$) and the source (2$);
     the second line includes the log level (4$) and
     the log message (5$) followed with the throwable
     and its backtrace (6$), if any:
     
     Tue Mar 22 13:11:31 PDT 2011 MyClass fatal
     SEVERE: several message with an exception
     java.lang.IllegalArgumentException: invalid argument
             at MyClass.mash(MyClass.java:9)
             at MyClass.crunch(MyClass.java:6)
             at MyClass.main(MyClass.java:3)
     
 java.util.logging.SimpleFormatter.format=""%1$tb %1$td, %1$tY %1$tl:%1$tM:%1$tS %1$Tp %2$s%n%4$s: %5$s%n""
This prints 2 lines similar to the example above
         with a different date/time formatting and does not print
         the throwable and its backtrace:
     
     Mar 22, 2011 1:11:31 PM MyClass fatal
     SEVERE: several message with an exception
     

This method can also be overridden in a subclass.
 It is recommended to use the Formatter.formatMessage(java.util.logging.LogRecord)
 convenience method to localize and format the message field.

Specified by:
format in class Formatter
Parameters:
record - the log record to be formatted.
Returns:
a formatted log record


"
11,SimpleFormatter,2,String getHead(),False,,NULL
11,SimpleFormatter,3,String getTail(),False,,NULL
11,SimpleFormatter,4,void setHead(String head),False,,NULL
11,SimpleFormatter,5,void setTail(String tail),False,,NULL
12,SocketHandler,1,void close(),True,Close this output stream.,"

close
public void close()
           throws SecurityException
Close this output stream.

Overrides:
close in class StreamHandler
Throws:
SecurityException - if a security manager exists and if
             the caller does not have LoggingPermission(""control"").


"
12,SocketHandler,2,void flush(),False,,NULL
12,SocketHandler,3,void publish(LogRecord record),True,Format and publish a LogRecord.,"

publish
public void publish(LogRecord record)
Format and publish a LogRecord.

Overrides:
publish in class StreamHandler
Parameters:
record - description of the log event. A null record is
                 silently ignored and is not published


"
12,SocketHandler,4,void setFormatter(Formatter newFormatter),False,,NULL
12,SocketHandler,5,void setLevel(Level newLevel),False,,NULL
13,StreamHandler,1,void close(),True,Close the current output stream.,"

close
public void close()
           throws SecurityException
Close the current output stream.
 
 The Formatter's ""tail"" string is written to the stream before it
 is closed.  In addition, if the Formatter's ""head"" string has not
 yet been written to the stream, it will be written before the
 ""tail"" string.

Specified by:
close in class Handler
Throws:
SecurityException - if a security manager exists and if
             the caller does not have LoggingPermission(""control"").


"
13,StreamHandler,2,void flush(),True,Flush any buffered messages.,"

flush
public void flush()
Flush any buffered messages.

Specified by:
flush in class Handler


"
13,StreamHandler,3,void publish(LogRecord record),True,Format and publish a LogRecord.,"

publish
public void publish(LogRecord record)
Format and publish a LogRecord.
 
 The StreamHandler first checks if there is an OutputStream
 and if the given LogRecord has at least the required log level.
 If not it silently returns.  If so, it calls any associated
 Filter to check if the record should be published.  If so,
 it calls its Formatter to format the record and then writes
 the result to the current output stream.
 
 If this is the first LogRecord to be written to a given
 OutputStream, the Formatter's ""head"" string is
 written to the stream before the LogRecord is written.

Specified by:
publish in class Handler
Parameters:
record - description of the log event. A null record is
                 silently ignored and is not published


"
13,StreamHandler,4,void setLevel(Level newLevel),False,,NULL
13,StreamHandler,5,void setFormatter(Formatter newFormatter),False,,NULL
14,XMLFormatter,1,String format(LogRecord record),True,Format the given message to XML.,"

format
public String format(LogRecord record)
Format the given message to XML.
 
 This method can be overridden in a subclass.
 It is recommended to use the Formatter.formatMessage(java.util.logging.LogRecord)
 convenience method to localize and format the message field.

Specified by:
format in class Formatter
Parameters:
record - the log record to be formatted.
Returns:
a formatted log record


"
14,XMLFormatter,2,String getHead(Handler h),True,Return the header string for a set of XML formatted records.,"

getHead
public String getHead(Handler h)
Return the header string for a set of XML formatted records.

Overrides:
getHead in class Formatter
Parameters:
h - The target handler (can be null)
Returns:
a valid XML string


"
14,XMLFormatter,3,String getTail(Handler h),True,Return the tail string for a set of XML formatted records.,"

getTail
public String getTail(Handler h)
Return the tail string for a set of XML formatted records.

Overrides:
getTail in class Formatter
Parameters:
h - The target handler (can be null)
Returns:
a valid XML string


"
14,XMLFormatter,4,void setContext(LogRecord record),False,,NULL
14,XMLFormatter,5,void setTail(String tail),False,,NULL
