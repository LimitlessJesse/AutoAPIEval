ClassName,Method,Return Type,Description,Full Description
MidiDeviceProvider,getDevice(MidiDevice.Info info),abstract MidiDevice,Obtains an instance of the device represented by the info object.,"

getDevice
public abstract MidiDevice getDevice(MidiDevice.Info info)
Obtains an instance of the device represented by the info object.

Parameters:
info - an info object that describes the desired device
Returns:
device instance
Throws:
IllegalArgumentException - if the info object specified does not
         match the info object for a device supported by this
         MidiDeviceProvider


"
MidiDeviceProvider,getDeviceInfo(),abstract MidiDevice.Info[],Obtains the set of info objects representing the device or devices provided by this MidiDeviceProvider.,"

getDeviceInfo
public abstract MidiDevice.Info[] getDeviceInfo()
Obtains the set of info objects representing the device or devices
 provided by this MidiDeviceProvider.

Returns:
set of device info objects


"
MidiDeviceProvider,isDeviceSupported(MidiDevice.Info info),boolean,Indicates whether the device provider supports the device represented by the specified device info object.,"

isDeviceSupported
public boolean isDeviceSupported(MidiDevice.Info info)
Indicates whether the device provider supports the device represented by
 the specified device info object.

Parameters:
info - an info object that describes the device for which support
         is queried
Returns:
true if the specified device is supported, otherwise
         false


"
MidiFileReader,getMidiFileFormat(File file),abstract MidiFileFormat,Obtains the MIDI file format of the File provided.,"

getMidiFileFormat
public abstract MidiFileFormat getMidiFileFormat(File file)
                                          throws InvalidMidiDataException,
                                                 IOException
Obtains the MIDI file format of the File provided. The
 File must point to valid MIDI file data.

Parameters:
file - the File from which file format information should
         be extracted
Returns:
a MidiFileFormat object describing the MIDI file format
Throws:
InvalidMidiDataException - if the File does not point to
         valid MIDI file data recognized by the system
IOException - if an I/O exception occurs


"
MidiFileReader,getMidiFileFormat(InputStream stream),abstract MidiFileFormat,Obtains the MIDI file format of the input stream provided.,"

getMidiFileFormat
public abstract MidiFileFormat getMidiFileFormat(InputStream stream)
                                          throws InvalidMidiDataException,
                                                 IOException
Obtains the MIDI file format of the input stream provided. The stream
 must point to valid MIDI file data. In general, MIDI file readers may
 need to read some data from the stream before determining whether they
 support it. These parsers must be able to mark the stream, read enough
 data to determine whether they support the stream, and, if not, reset the
 stream's read pointer to its original position. If the input stream does
 not support this, this method may fail with an IOException.

Parameters:
stream - the input stream from which file format information
         should be extracted
Returns:
a MidiFileFormat object describing the MIDI file format
Throws:
InvalidMidiDataException - if the stream does not point to valid
         MIDI file data recognized by the system
IOException - if an I/O exception occurs
See Also:
InputStream.markSupported(), 
InputStream.mark(int)


"
MidiFileReader,getMidiFileFormat(URL url),abstract MidiFileFormat,Obtains the MIDI file format of the URL provided.,"

getMidiFileFormat
public abstract MidiFileFormat getMidiFileFormat(URL url)
                                          throws InvalidMidiDataException,
                                                 IOException
Obtains the MIDI file format of the URL provided. The URL must point to
 valid MIDI file data.

Parameters:
url - the URL from which file format information should be
         extracted
Returns:
a MidiFileFormat object describing the MIDI file format
Throws:
InvalidMidiDataException - if the URL does not point to valid MIDI
         file data recognized by the system
IOException - if an I/O exception occurs


"
MidiFileReader,getSequence(File file),abstract Sequence,Obtains a MIDI sequence from the File provided.,"

getSequence
public abstract Sequence getSequence(File file)
                              throws InvalidMidiDataException,
                                     IOException
Obtains a MIDI sequence from the File provided. The File
 must point to valid MIDI file data.

Parameters:
file - the File from which the Sequence should be
         constructed
Returns:
a Sequence object based on the MIDI file data pointed to
         by the File
Throws:
InvalidMidiDataException - if the File does not point to
         valid MIDI file data recognized by the system
IOException - if an I/O exception occurs


"
MidiFileReader,getSequence(InputStream stream),abstract Sequence,Obtains a MIDI sequence from the input stream provided.,"

getSequence
public abstract Sequence getSequence(InputStream stream)
                              throws InvalidMidiDataException,
                                     IOException
Obtains a MIDI sequence from the input stream provided. The stream must
 point to valid MIDI file data. In general, MIDI file readers may need to
 read some data from the stream before determining whether they support
 it. These parsers must be able to mark the stream, read enough data to
 determine whether they support the stream, and, if not, reset the
 stream's read pointer to its original position. If the input stream does
 not support this, this method may fail with an IOException.

Parameters:
stream - the input stream from which the Sequence should
         be constructed
Returns:
a Sequence object based on the MIDI file data contained
         in the input stream.
Throws:
InvalidMidiDataException - if the stream does not point to valid
         MIDI file data recognized by the system
IOException - if an I/O exception occurs
See Also:
InputStream.markSupported(), 
InputStream.mark(int)


"
MidiFileReader,getSequence(URL url),abstract Sequence,Obtains a MIDI sequence from the URL provided.,"

getSequence
public abstract Sequence getSequence(URL url)
                              throws InvalidMidiDataException,
                                     IOException
Obtains a MIDI sequence from the URL provided. The URL must point to
 valid MIDI file data.

Parameters:
url - the URL for which the Sequence should be constructed
Returns:
a Sequence object based on the MIDI file data pointed to
         by the URL
Throws:
InvalidMidiDataException - if the URL does not point to valid MIDI
         file data recognized by the system
IOException - if an I/O exception occurs


"
MidiFileWriter,getMidiFileTypes(),abstract int[],Obtains the set of MIDI file types for which file writing support is provided by this file writer.,"

getMidiFileTypes
public abstract int[] getMidiFileTypes()
Obtains the set of MIDI file types for which file writing support is
 provided by this file writer.

Returns:
array of file types. If no file types are supported, an array of
         length 0 is returned.


"
MidiFileWriter,getMidiFileTypes(Sequence sequence),abstract int[],Obtains the file types that this file writer can write from the sequence specified.,"

getMidiFileTypes
public abstract int[] getMidiFileTypes(Sequence sequence)
Obtains the file types that this file writer can write from the sequence
 specified.

Parameters:
sequence - the sequence for which MIDI file type support is
         queried
Returns:
array of file types. If no file types are supported, returns an
         array of length 0.


"
MidiFileWriter,isFileTypeSupported(int fileType),boolean,Indicates whether file writing support for the specified MIDI file type is provided by this file writer.,"

isFileTypeSupported
public boolean isFileTypeSupported(int fileType)
Indicates whether file writing support for the specified MIDI file type
 is provided by this file writer.

Parameters:
fileType - the file type for which write capabilities are queried
Returns:
true if the file type is supported, otherwise
         false


"
MidiFileWriter,"isFileTypeSupported(int fileType, Sequence sequence)",boolean,Indicates whether a MIDI file of the file type specified can be written from the sequence indicated.,"

isFileTypeSupported
public boolean isFileTypeSupported(int fileType,
                                   Sequence sequence)
Indicates whether a MIDI file of the file type specified can be written
 from the sequence indicated.

Parameters:
fileType - the file type for which write capabilities are queried
sequence - the sequence for which file writing support is queried
Returns:
true if the file type is supported for this sequence,
         otherwise false


"
MidiFileWriter,"write(Sequence in, int fileType, File out)",abstract int,Writes a stream of bytes representing a MIDI file of the file type indicated to the external file provided.,"

write
public abstract int write(Sequence in,
                          int fileType,
                          File out)
                   throws IOException
Writes a stream of bytes representing a MIDI file of the file type
 indicated to the external file provided.

Parameters:
in - sequence containing MIDI data to be written to the external
         file
fileType - type of the file to be written to the external file
out - external file to which the file data should be written
Returns:
the number of bytes written to the file
Throws:
IOException - if an I/O exception occurs
IllegalArgumentException - if the file type is not supported by
         this file writer
See Also:
isFileTypeSupported(int, Sequence), 
getMidiFileTypes(Sequence)


"
MidiFileWriter,"write(Sequence in, int fileType, OutputStream out)",abstract int,Writes a stream of bytes representing a MIDI file of the file type indicated to the output stream provided.,"

write
public abstract int write(Sequence in,
                          int fileType,
                          OutputStream out)
                   throws IOException
Writes a stream of bytes representing a MIDI file of the file type
 indicated to the output stream provided.

Parameters:
in - sequence containing MIDI data to be written to the file
fileType - type of the file to be written to the output stream
out - stream to which the file data should be written
Returns:
the number of bytes written to the output stream
Throws:
IOException - if an I/O exception occurs
IllegalArgumentException - if the file type is not supported by
         this file writer
See Also:
isFileTypeSupported(int, Sequence), 
getMidiFileTypes(Sequence)


"
SoundbankReader,getSoundbank(File file),abstract Soundbank,Obtains a soundbank object from the File provided.,"

getSoundbank
public abstract Soundbank getSoundbank(File file)
                                throws InvalidMidiDataException,
                                       IOException
Obtains a soundbank object from the File provided.

Parameters:
file - the File representing the soundbank
Returns:
soundbank object
Throws:
InvalidMidiDataException - if the file does not point to valid MIDI
         soundbank data recognized by this soundbank reader
IOException - if an I/O error occurs


"
SoundbankReader,getSoundbank(InputStream stream),abstract Soundbank,Obtains a soundbank object from the InputStream provided.,"

getSoundbank
public abstract Soundbank getSoundbank(InputStream stream)
                                throws InvalidMidiDataException,
                                       IOException
Obtains a soundbank object from the InputStream provided.

Parameters:
stream - InputStream representing the soundbank
Returns:
soundbank object
Throws:
InvalidMidiDataException - if the stream does not point to valid
         MIDI soundbank data recognized by this soundbank reader
IOException - if an I/O error occurs


"
SoundbankReader,getSoundbank(URL url),abstract Soundbank,Obtains a soundbank object from the URL provided.,"

getSoundbank
public abstract Soundbank getSoundbank(URL url)
                                throws InvalidMidiDataException,
                                       IOException
Obtains a soundbank object from the URL provided.

Parameters:
url - URL representing the soundbank.
Returns:
soundbank object
Throws:
InvalidMidiDataException - if the URL does not point to valid MIDI
         soundbank data recognized by this soundbank reader
IOException - if an I/O error occurs


"
