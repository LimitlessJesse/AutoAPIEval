ClassName,Method,Return Type,Description,Full Description
AncestorEvent,getAncestor(),Container,Returns the ancestor that the event actually occurred on.,"

getAncestor
public Container getAncestor()
Returns the ancestor that the event actually occurred on.

"
AncestorEvent,getAncestorParent(),Container,Returns the parent of the ancestor the event actually occurred on.,"

getAncestorParent
public Container getAncestorParent()
Returns the parent of the ancestor the event actually occurred on.
 This is most interesting in an ANCESTOR_REMOVED event, as
 the ancestor may no longer be in the component hierarchy.

"
AncestorEvent,getComponent(),JComponent,Returns the component that the listener was added to.,"

getComponent
public JComponent getComponent()
Returns the component that the listener was added to.

"
CaretEvent,getDot(),abstract int,Fetches the location of the caret.,"

getDot
public abstract int getDot()
Fetches the location of the caret.

Returns:
the dot >= 0


"
CaretEvent,getMark(),abstract int,Fetches the location of other end of a logical selection.,"

getMark
public abstract int getMark()
Fetches the location of other end of a logical
 selection.  If there is no selection, this
 will be the same as dot.

Returns:
the mark >= 0


"
DocumentEvent.EventType,toString(),String,Converts the type to a string.,"

toString
public String toString()
Converts the type to a string.

Overrides:
toString in class Object
Returns:
the string


"
EventListenerList,"add(Class<T> t, T l)",<T extends EventListener> void,Adds the listener as a listener of the specified type.,"

add
public <T extends EventListener> void add(Class<T> t,
                                          T l)
Adds the listener as a listener of the specified type.

Parameters:
t - the type of the listener to be added
l - the listener to be added


"
EventListenerList,getListenerCount(),int,Returns the total number of listeners for this listener list.,"

getListenerCount
public int getListenerCount()
Returns the total number of listeners for this listener list.

"
EventListenerList,getListenerCount(Class<?> t),int,Returns the total number of listeners of the supplied type for this listener list.,"

getListenerCount
public int getListenerCount(Class<?> t)
Returns the total number of listeners of the supplied type
 for this listener list.

"
EventListenerList,getListenerList(),Object[],Passes back the event listener list as an array of ListenerType-listener pairs.,"

getListenerList
public Object[] getListenerList()
Passes back the event listener list as an array
 of ListenerType-listener pairs.  Note that for
 performance reasons, this implementation passes back
 the actual data structure in which the listener data
 is stored internally!
 This method is guaranteed to pass back a non-null
 array, so that no null-checking is required in
 fire methods.  A zero-length array of Object should
 be returned if there are currently no listeners.

 WARNING!!! Absolutely NO modification of
 the data contained in this array should be made -- if
 any such manipulation is necessary, it should be done
 on a copy of the array returned rather than the array
 itself.

"
EventListenerList,getListeners(Class<T> t),<T extends EventListener> T[],Return an array of all the listeners of the given type.,"

getListeners
public <T extends EventListener> T[] getListeners(Class<T> t)
Return an array of all the listeners of the given type.

Returns:
all of the listeners of the specified type.
Throws:
ClassCastException - if the supplied class
          is not assignable to EventListener
Since:
1.3


"
EventListenerList,"remove(Class<T> t, T l)",<T extends EventListener> void,Removes the listener as a listener of the specified type.,"

remove
public <T extends EventListener> void remove(Class<T> t,
                                             T l)
Removes the listener as a listener of the specified type.

Parameters:
t - the type of the listener to be removed
l - the listener to be removed


"
EventListenerList,toString(),String,Returns a string representation of the EventListenerList.,"

toString
public String toString()
Returns a string representation of the EventListenerList.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
HyperlinkEvent,getDescription(),String,Get the description of the link as a string.,"

getDescription
public String getDescription()
Get the description of the link as a string.
 This may be useful if a URL can't be formed
 from the description, in which case the associated
 URL would be null.

"
HyperlinkEvent,getEventType(),HyperlinkEvent.EventType,Gets the type of event.,"

getEventType
public HyperlinkEvent.EventType getEventType()
Gets the type of event.

Returns:
the type


"
HyperlinkEvent,getInputEvent(),InputEvent,Returns the InputEvent that triggered the hyperlink event.,"

getInputEvent
public InputEvent getInputEvent()
Returns the InputEvent that triggered the hyperlink event.
 This will typically be a MouseEvent.  If a constructor is used
 that does not specify an InputEvent, or @{code null}
 was specified as the InputEvent, this returns null.

Returns:
InputEvent that triggered the hyperlink event, or null
Since:
1.7


"
HyperlinkEvent,getSourceElement(),Element,Returns the Element that corresponds to the source of the event.,"

getSourceElement
public Element getSourceElement()
Returns the Element that corresponds to the source of the
 event. This will typically be an Element representing
 an anchor. If a constructor that is used that does not specify a source
 Element, or null was specified as the source
 Element, this will return null.

Returns:
Element indicating source of event, or null
Since:
1.4


"
HyperlinkEvent,getURL(),URL,Gets the URL that the link refers to.,"

getURL
public URL getURL()
Gets the URL that the link refers to.

Returns:
the URL


"
HyperlinkEvent.EventType,toString(),String,Converts the type to a string.,"

toString
public String toString()
Converts the type to a string.

Overrides:
toString in class Object
Returns:
the string


"
InternalFrameAdapter,internalFrameActivated(InternalFrameEvent e),void,Invoked when an internal frame is activated.,"

internalFrameActivated
public void internalFrameActivated(InternalFrameEvent e)
Invoked when an internal frame is activated.

Specified by:
internalFrameActivated in interface InternalFrameListener
See Also:
JInternalFrame.setSelected(boolean)


"
InternalFrameAdapter,internalFrameClosed(InternalFrameEvent e),void,Invoked when an internal frame has been closed.,"

internalFrameClosed
public void internalFrameClosed(InternalFrameEvent e)
Invoked when an internal frame has been closed.

Specified by:
internalFrameClosed in interface InternalFrameListener
See Also:
JInternalFrame.setClosed(boolean)


"
InternalFrameAdapter,internalFrameClosing(InternalFrameEvent e),void,Invoked when an internal frame is in the process of being closed.,"

internalFrameClosing
public void internalFrameClosing(InternalFrameEvent e)
Invoked when an internal frame is in the process of being closed.
 The close operation can be overridden at this point.

Specified by:
internalFrameClosing in interface InternalFrameListener
See Also:
JInternalFrame.setDefaultCloseOperation(int)


"
InternalFrameAdapter,internalFrameDeactivated(InternalFrameEvent e),void,Invoked when an internal frame is de-activated.,"

internalFrameDeactivated
public void internalFrameDeactivated(InternalFrameEvent e)
Invoked when an internal frame is de-activated.

Specified by:
internalFrameDeactivated in interface InternalFrameListener
See Also:
JInternalFrame.setSelected(boolean)


"
InternalFrameAdapter,internalFrameDeiconified(InternalFrameEvent e),void,Invoked when an internal frame is de-iconified.,"

internalFrameDeiconified
public void internalFrameDeiconified(InternalFrameEvent e)
Invoked when an internal frame is de-iconified.

Specified by:
internalFrameDeiconified in interface InternalFrameListener
See Also:
JInternalFrame.setIcon(boolean)


"
InternalFrameAdapter,internalFrameIconified(InternalFrameEvent e),void,Invoked when an internal frame is iconified.,"

internalFrameIconified
public void internalFrameIconified(InternalFrameEvent e)
Invoked when an internal frame is iconified.

Specified by:
internalFrameIconified in interface InternalFrameListener
See Also:
JInternalFrame.setIcon(boolean)


"
InternalFrameAdapter,internalFrameOpened(InternalFrameEvent e),void,Invoked when an internal frame has been opened.,"

internalFrameOpened
public void internalFrameOpened(InternalFrameEvent e)
Invoked when an internal frame has been opened.

Specified by:
internalFrameOpened in interface InternalFrameListener
See Also:
JInternalFrame.show()


"
InternalFrameEvent,getInternalFrame(),JInternalFrame,Returns the originator of the event.,"

getInternalFrame
public JInternalFrame getInternalFrame()
Returns the originator of the event.

Returns:
the JInternalFrame object that originated the event
Since:
1.3


"
InternalFrameEvent,paramString(),String,Returns a parameter string identifying this event.,"

paramString
public String paramString()
Returns a parameter string identifying this event.
 This method is useful for event logging and for debugging.

Overrides:
paramString in class AWTEvent
Returns:
a string identifying the event and its attributes


"
ListDataEvent,getIndex0(),int,Returns the lower index of the range.,"

getIndex0
public int getIndex0()
Returns the lower index of the range. For a single
 element, this value is the same as that returned by getIndex1().

Returns:
an int representing the lower index value


"
ListDataEvent,getIndex1(),int,Returns the upper index of the range.,"

getIndex1
public int getIndex1()
Returns the upper index of the range. For a single
 element, this value is the same as that returned by getIndex0().

Returns:
an int representing the upper index value


"
ListDataEvent,getType(),int,Returns the event type.,"

getType
public int getType()
Returns the event type. The possible values are:
 
 CONTENTS_CHANGED
 INTERVAL_ADDED
 INTERVAL_REMOVED


Returns:
an int representing the type value


"
ListDataEvent,toString(),String,Returns a string representation of this ListDataEvent.,"

toString
public String toString()
Returns a string representation of this ListDataEvent. This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
toString in class EventObject
Returns:
a string representation of this ListDataEvent.
Since:
1.4


"
ListSelectionEvent,getFirstIndex(),int,Returns the index of the first row whose selection may have changed.,"

getFirstIndex
public int getFirstIndex()
Returns the index of the first row whose selection may have changed.
 getFirstIndex() <= getLastIndex()

Returns:
the first row whose selection value may have changed,
         where zero is the first row


"
ListSelectionEvent,getLastIndex(),int,Returns the index of the last row whose selection may have changed.,"

getLastIndex
public int getLastIndex()
Returns the index of the last row whose selection may have changed.
 getLastIndex() >= getFirstIndex()

Returns:
the last row whose selection value may have changed,
         where zero is the first row


"
ListSelectionEvent,getValueIsAdjusting(),boolean,"Returns whether or not this is one in a series of multiple events, where changes are still being made.","

getValueIsAdjusting
public boolean getValueIsAdjusting()
Returns whether or not this is one in a series of multiple events,
 where changes are still being made. See the documentation for
 ListSelectionModel.setValueIsAdjusting(boolean) for
 more details on how this is used.

Returns:
true if this is one in a series of multiple events,
         where changes are still being made


"
ListSelectionEvent,toString(),String,Returns a String that displays and identifies this object's properties.,"

toString
public String toString()
Returns a String that displays and identifies this
 object's properties.

Overrides:
toString in class EventObject
Returns:
a String representation of this object


"
MenuDragMouseEvent,getMenuSelectionManager(),MenuSelectionManager,Returns the current menu selection manager.,"

getMenuSelectionManager
public MenuSelectionManager getMenuSelectionManager()
Returns the current menu selection manager.

Returns:
a MenuSelectionManager object


"
MenuDragMouseEvent,getPath(),MenuElement[],Returns the path to the selected menu item.,"

getPath
public MenuElement[] getPath()
Returns the path to the selected menu item.

Returns:
an array of MenuElement objects representing the path value


"
MenuKeyEvent,getMenuSelectionManager(),MenuSelectionManager,Returns the current menu selection manager.,"

getMenuSelectionManager
public MenuSelectionManager getMenuSelectionManager()
Returns the current menu selection manager.

Returns:
a MenuSelectionManager object


"
MenuKeyEvent,getPath(),MenuElement[],Returns the path to the menu item referenced by this event.,"

getPath
public MenuElement[] getPath()
Returns the path to the menu item referenced by this event.

Returns:
an array of MenuElement objects representing the path value


"
RowSorterEvent,convertPreviousRowIndexToModel(int index),int,Returns the location of index in terms of the model prior to the sort.,"

convertPreviousRowIndexToModel
public int convertPreviousRowIndexToModel(int index)
Returns the location of index in terms of the
 model prior to the sort.  This method is only useful for events
 of type SORTED.  This method will return -1 if the
 index is not valid, or the locations prior to the sort have not
 been provided.

Parameters:
index - the index in terms of the view
Returns:
the index in terms of the model prior to the sort, or -1 if
         the location is not valid or the mapping was not provided.


"
RowSorterEvent,getPreviousRowCount(),int,Returns the number of rows before the sort.,"

getPreviousRowCount
public int getPreviousRowCount()
Returns the number of rows before the sort.  This method is only
 useful for events of type SORTED and if the
 last locations have not been provided will return 0.

Returns:
the number of rows in terms of the view prior to the sort


"
RowSorterEvent,getSource(),RowSorter,Returns the source of the event as a RowSorter.,"

getSource
public RowSorter getSource()
Returns the source of the event as a RowSorter.

Overrides:
getSource in class EventObject
Returns:
the source of the event as a RowSorter


"
RowSorterEvent,getType(),RowSorterEvent.Type,Returns the type of event.,"

getType
public RowSorterEvent.Type getType()
Returns the type of event.

Returns:
the type of event


"
SwingPropertyChangeSupport,firePropertyChange(PropertyChangeEvent evt),void,Fires a property change event to listeners that have been registered to track updates of all properties or a property with the specified name.,"

firePropertyChange
public void firePropertyChange(PropertyChangeEvent evt)
Fires a property change event to listeners
 that have been registered to track updates of
 all properties or a property with the specified name.
 
 No event is fired if the given event's old and new values are equal and non-null.

 
 If isNotifyOnEDT() is true and called off the
 Event Dispatch Thread this implementation uses
 SwingUtilities.invokeLater to send out the notification
 on the Event Dispatch Thread. This ensures  listeners
 are only ever notified on the Event Dispatch Thread.

Overrides:
firePropertyChange in class PropertyChangeSupport
Parameters:
evt - the PropertyChangeEvent to be fired
Throws:
NullPointerException - if evt is
         null
Since:
1.6


"
SwingPropertyChangeSupport,isNotifyOnEDT(),boolean,Returns notifyOnEDT property.,"

isNotifyOnEDT
public final boolean isNotifyOnEDT()
Returns notifyOnEDT property.

Returns:
notifyOnEDT property
Since:
1.6
See Also:
SwingPropertyChangeSupport(Object sourceBean, boolean notifyOnEDT)


"
TableColumnModelEvent,getFromIndex(),int,Returns the fromIndex.,"

getFromIndex
public int getFromIndex()
Returns the fromIndex.  Valid for removed or moved events

"
TableColumnModelEvent,getToIndex(),int,Returns the toIndex.,"

getToIndex
public int getToIndex()
Returns the toIndex.  Valid for add and moved events

"
TableModelEvent,getColumn(),int,Returns the column for the event.,"

getColumn
public int getColumn()
Returns the column for the event.  If the return
  value is ALL_COLUMNS; it means every column in the specified
  rows changed.

"
TableModelEvent,getFirstRow(),int,Returns the first row that changed.,"

getFirstRow
public int getFirstRow()
Returns the first row that changed.  HEADER_ROW means the meta data,
 ie. names, types and order of the columns.

"
TableModelEvent,getLastRow(),int,Returns the last row that changed.,"

getLastRow
public int getLastRow()
Returns the last row that changed.

"
TableModelEvent,getType(),int,"Returns the type of event - one of: INSERT, UPDATE and DELETE.","

getType
public int getType()
Returns the type of event - one of: INSERT, UPDATE and DELETE.

"
TreeExpansionEvent,getPath(),TreePath,Returns the path to the value that has been expanded/collapsed.,"

getPath
public TreePath getPath()
Returns the path to the value that has been expanded/collapsed.

"
TreeModelEvent,getChildIndices(),int[],Returns the values of the child indexes.,"

getChildIndices
public int[] getChildIndices()
Returns the values of the child indexes. If this is a removal event
 the indexes point to locations in the initial list where items
 were removed. If it is an insert, the indices point to locations
 in the final list where the items were added. For node changes,
 the indices point to the locations of the modified nodes.

Returns:
an array of int containing index locations for
         the children specified by the event


"
TreeModelEvent,getChildren(),Object[],Returns the objects that are children of the node identified by getPath at the locations specified by getChildIndices.,"

getChildren
public Object[] getChildren()
Returns the objects that are children of the node identified by
 getPath at the locations specified by
 getChildIndices. If this is a removal event the
 returned objects are no longer children of the parent node.

Returns:
an array of Object containing the children specified by
         the event
See Also:
getPath(), 
getChildIndices()


"
TreeModelEvent,getPath(),Object[],Convenience method to get the array of objects from the TreePath instance that this event wraps.,"

getPath
public Object[] getPath()
Convenience method to get the array of objects from the TreePath
 instance that this event wraps.

Returns:
an array of Objects, where the first Object is the one
         stored at the root and the last object is the one
         stored at the node identified by the path


"
TreeModelEvent,getTreePath(),TreePath,"For all events, except treeStructureChanged, returns the parent of the changed nodes.","

getTreePath
public TreePath getTreePath()
For all events, except treeStructureChanged,
 returns the parent of the changed nodes.
 For treeStructureChanged events, returns the ancestor of the
 structure that has changed. This and
 getChildIndices are used to get a list of the effected
 nodes.
 
 The one exception to this is a treeNodesChanged event that is to
 identify the root, in which case this will return the root
 and getChildIndices will return null.

Returns:
the TreePath used in identifying the changed nodes.
See Also:
TreePath.getLastPathComponent()


"
TreeModelEvent,toString(),String,Returns a string that displays and identifies this object's properties.,"

toString
public String toString()
Returns a string that displays and identifies this object's
 properties.

Overrides:
toString in class EventObject
Returns:
a String representation of this object


"
TreeSelectionEvent,cloneWithSource(Object newSource),Object,"Returns a copy of the receiver, but with the source being newSource.","

cloneWithSource
public Object cloneWithSource(Object newSource)
Returns a copy of the receiver, but with the source being newSource.

"
TreeSelectionEvent,getNewLeadSelectionPath(),TreePath,Returns the current lead path.,"

getNewLeadSelectionPath
public TreePath getNewLeadSelectionPath()
Returns the current lead path.

"
TreeSelectionEvent,getOldLeadSelectionPath(),TreePath,Returns the path that was previously the lead path.,"

getOldLeadSelectionPath
public TreePath getOldLeadSelectionPath()
Returns the path that was previously the lead path.

"
TreeSelectionEvent,getPath(),TreePath,Returns the first path element.,"

getPath
public TreePath getPath()
Returns the first path element.

"
TreeSelectionEvent,getPaths(),TreePath[],Returns the paths that have been added or removed from the selection.,"

getPaths
public TreePath[] getPaths()
Returns the paths that have been added or removed from the
 selection.

"
TreeSelectionEvent,isAddedPath(),boolean,Returns whether the path identified by getPath was added to the selection.,"

isAddedPath
public boolean isAddedPath()
Returns whether the path identified by getPath was
 added to the selection.  A return value of true
 indicates the path identified by getPath was added to
 the selection. A return value of false indicates getPath was selected, but is no longer selected.

Returns:
true if getPath was added to the selection,
         false otherwise


"
TreeSelectionEvent,isAddedPath(int index),boolean,Returns whether the path at getPaths()[index] was added to the selection.,"

isAddedPath
public boolean isAddedPath(int index)
Returns whether the path at getPaths()[index] was added
 to the selection.  A return value of true indicates the
 path was added to the selection. A return value of false
 indicates the path is no longer selected.

Parameters:
index - the index of the path to test
Returns:
true if the path was added to the selection,
         false otherwise
Throws:
IllegalArgumentException - if index is outside the range of
         getPaths
Since:
1.3
See Also:
getPaths()


"
TreeSelectionEvent,isAddedPath(TreePath path),boolean,Returns whether the specified path was added to the selection.,"

isAddedPath
public boolean isAddedPath(TreePath path)
Returns whether the specified path was added to the selection.
 A return value of true indicates the path identified by
 path was added to the selection. A return value of
 false indicates path is no longer selected. This method
 is only valid for the paths returned from getPaths(); invoking
 with a path not included in getPaths() throws an
 IllegalArgumentException.

Parameters:
path - the path to test
Returns:
true if path was added to the selection,
         false otherwise
Throws:
IllegalArgumentException - if path is not contained
         in getPaths
See Also:
getPaths()


"
UndoableEditEvent,getEdit(),UndoableEdit,Returns the edit value.,"

getEdit
public UndoableEdit getEdit()
Returns the edit value.

Returns:
the UndoableEdit object encapsulating the edit


"
