ClassName,Method,Return Type,Description,Full Description
Instrument,getPatch(),Patch,Obtains the Patch object that indicates the bank and program numbers where this instrument is to be stored in the synthesizer.,"

getPatch
public Patch getPatch()
Obtains the Patch object that indicates the bank and program
 numbers where this instrument is to be stored in the synthesizer.

Returns:
this instrument's patch


"
MetaMessage,clone(),Object,Creates a new object of the same class and with the same contents as this object.,"

clone
public Object clone()
Creates a new object of the same class and with the same contents
 as this object.

Specified by:
clone in class MidiMessage
Returns:
a clone of this instance
See Also:
Cloneable


"
MetaMessage,getData(),byte[],Obtains a copy of the data for the meta message.,"

getData
public byte[] getData()
Obtains a copy of the data for the meta message.  The returned
 array of bytes does not include the status byte or the message
 length data.  The length of the data for the meta message is
 the length of the array.  Note that the length of the entire
 message includes the status byte and the meta message type
 byte, and therefore may be longer than the returned array.

Returns:
array containing the meta message data.
See Also:
MidiMessage.getLength()


"
MetaMessage,getType(),int,Obtains the type of the MetaMessage.,"

getType
public int getType()
Obtains the type of the MetaMessage.

Returns:
an integer representing the MetaMessage type


"
MetaMessage,"setMessage(int type, byte[] data, int length)",void,Sets the message parameters for a MetaMessage.,"

setMessage
public void setMessage(int type,
                       byte[] data,
                       int length)
                throws InvalidMidiDataException
Sets the message parameters for a MetaMessage.
 Since only one status byte value, 0xFF, is allowed for meta-messages,
 it does not need to be specified here.  Calls to getStatus return
 0xFF for all meta-messages.
 
 The type argument should be a valid value for the byte that
 follows the status byte in the MetaMessage.  The data argument
 should contain all the subsequent bytes of the MetaMessage.  In other words,
 the byte that specifies the type of MetaMessage is not considered a data byte.

Parameters:
type - meta-message type (must be less than 128)
data - the data bytes in the MIDI message
length - the number of bytes in the data
 byte array
Throws:
InvalidMidiDataException - if the
 parameter values do not specify a valid MIDI meta message


"
MidiDevice.Info,equals(Object obj),boolean,Reports whether two objects are equal.,"

equals
public final boolean equals(Object obj)
Reports whether two objects are equal.
 Returns true if the objects are identical.

Overrides:
equals in class Object
Parameters:
obj - the reference object with which to compare this
 object
Returns:
true if this object is the same as the
 obj argument; false otherwise
See Also:
Object.hashCode(), 
HashMap


"
MidiDevice.Info,getDescription(),String,Obtains the description of the device.,"

getDescription
public final String getDescription()
Obtains the description of the device.

Returns:
a description of the device


"
MidiDevice.Info,getName(),String,Obtains the name of the device.,"

getName
public final String getName()
Obtains the name of the device.

Returns:
a string containing the device's name


"
MidiDevice.Info,getVendor(),String,Obtains the name of the company who supplies the device.,"

getVendor
public final String getVendor()
Obtains the name of the company who supplies the device.

Returns:
device the vendor's name


"
MidiDevice.Info,getVersion(),String,Obtains the version of the device.,"

getVersion
public final String getVersion()
Obtains the version of the device.

Returns:
textual version information for the device.


"
MidiDevice.Info,hashCode(),int,Finalizes the hashcode method.,"

hashCode
public final int hashCode()
Finalizes the hashcode method.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
MidiDevice.Info,toString(),String,Provides a string representation of the device information.,"

toString
public final String toString()
Provides a string representation of the device information.

Overrides:
toString in class Object
Returns:
a description of the info object


"
MidiEvent,getMessage(),MidiMessage,Obtains the MIDI message contained in the event.,"

getMessage
public MidiMessage getMessage()
Obtains the MIDI message contained in the event.

Returns:
the MIDI message


"
MidiEvent,getTick(),long,"Obtains the time-stamp for the event, in MIDI ticks","

getTick
public long getTick()
Obtains the time-stamp for the event, in MIDI ticks

Returns:
the time-stamp for the event, in MIDI ticks


"
MidiEvent,setTick(long tick),void,"Sets the time-stamp for the event, in MIDI ticks","

setTick
public void setTick(long tick)
Sets the time-stamp for the event, in MIDI ticks

Parameters:
tick - the new time-stamp, in MIDI ticks


"
MidiFileFormat,getByteLength(),int,"Obtains the length of the MIDI file, expressed in 8-bit bytes.","

getByteLength
public int getByteLength()
Obtains the length of the MIDI file, expressed in 8-bit bytes.

Returns:
the number of bytes in the file, or UNKNOWN_LENGTH if not known
See Also:
UNKNOWN_LENGTH


"
MidiFileFormat,getDivisionType(),float,Obtains the timing division type for the MIDI file.,"

getDivisionType
public float getDivisionType()
Obtains the timing division type for the MIDI file.

Returns:
the division type (PPQ or one of the SMPTE types)
See Also:
Sequence.Sequence(float, int), 
Sequence.PPQ, 
Sequence.SMPTE_24, 
Sequence.SMPTE_25, 
Sequence.SMPTE_30DROP, 
Sequence.SMPTE_30, 
Sequence.getDivisionType()


"
MidiFileFormat,getMicrosecondLength(),long,"Obtains the length of the MIDI file, expressed in microseconds.","

getMicrosecondLength
public long getMicrosecondLength()
Obtains the length of the MIDI file, expressed in microseconds.

Returns:
the file's duration in microseconds, or UNKNOWN_LENGTH if not known
See Also:
Sequence.getMicrosecondLength(), 
getByteLength(), 
UNKNOWN_LENGTH


"
MidiFileFormat,getProperty(String key),Object,Obtain the property value specified by the key.,"

getProperty
public Object getProperty(String key)
Obtain the property value specified by the key.
 The concept of properties is further explained in
 the class description.

 If the specified property is not defined for a
 particular file format, this method returns
 null.

Parameters:
key - the key of the desired property
Returns:
the value of the property with the specified key,
         or null if the property does not exist.
Since:
1.5
See Also:
properties()


"
MidiFileFormat,getResolution(),int,Obtains the timing resolution for the MIDI file.,"

getResolution
public int getResolution()
Obtains the timing resolution for the MIDI file.
 If the division type is PPQ, the resolution is specified in ticks per beat.
 For SMTPE timing, the resolution is specified in ticks per frame.

Returns:
the number of ticks per beat (PPQ) or per frame (SMPTE)
See Also:
getDivisionType(), 
Sequence.getResolution()


"
MidiFileFormat,getType(),int,Obtains the MIDI file type.,"

getType
public int getType()
Obtains the MIDI file type.

Returns:
the file's type (0, 1, or 2)


"
MidiFileFormat,properties(),"Map<String,Object>",Obtain an unmodifiable map of properties.,"

properties
public Map<String,Object> properties()
Obtain an unmodifiable map of properties.
 The concept of properties is further explained in
 the class description.

Returns:
a Map<String,Object> object containing
         all properties. If no properties are recognized, an empty map is
         returned.
Since:
1.5
See Also:
getProperty(String)


"
MidiMessage,clone(),abstract Object,Creates a new object of the same class and with the same contents as this object.,"

clone
public abstract Object clone()
Creates a new object of the same class and with the same contents
 as this object.

Overrides:
clone in class Object
Returns:
a clone of this instance.
See Also:
Cloneable


"
MidiMessage,getLength(),int,Obtains the total length of the MIDI message in bytes.,"

getLength
public int getLength()
Obtains the total length of the MIDI message in bytes.  A
 MIDI message consists of one status byte and zero or more
 data bytes.  The return value ranges from 1 for system real-time messages,
 to 2 or 3 for channel messages, to any value for meta and system
 exclusive messages.

Returns:
the length of the message in bytes


"
MidiMessage,getMessage(),byte[],Obtains the MIDI message data.,"

getMessage
public byte[] getMessage()
Obtains the MIDI message data.  The first byte of the returned byte
 array is the status byte of the message.  Any subsequent bytes up to
 the length of the message are data bytes.  The byte array may have a
 length which is greater than that of the actual message; the total
 length of the message in bytes is reported by the getLength()
 method.

Returns:
the byte array containing the complete MidiMessage data


"
MidiMessage,getStatus(),int,Obtains the status byte for the MIDI message.,"

getStatus
public int getStatus()
Obtains the status byte for the MIDI message.  The status ""byte"" is
 represented as an integer; see the
 discussion in the
 MidiMessage class description.

Returns:
the integer representation of this event's status byte


"
MidiMessage,"setMessage(byte[] data, int length)",protected void,Sets the data for the MIDI message.,"

setMessage
protected void setMessage(byte[] data,
                          int length)
                   throws InvalidMidiDataException
Sets the data for the MIDI message.   This protected
 method is called by concrete subclasses, which should
 ensure that the data array specifies a complete, valid MIDI
 message.

Parameters:
data - the data bytes in the MIDI message
length - the number of bytes in the data byte array
Throws:
InvalidMidiDataException - if the parameter values do not specify a valid MIDI meta message


"
MidiSystem,getMidiDevice(MidiDevice.Info info),static MidiDevice,Obtains the requested MIDI device.,"

getMidiDevice
public static MidiDevice getMidiDevice(MidiDevice.Info info)
                                throws MidiUnavailableException
Obtains the requested MIDI device.

Parameters:
info - a device information object representing the desired device.
Returns:
the requested device
Throws:
MidiUnavailableException - if the requested device is not available
 due to resource restrictions
IllegalArgumentException - if the info object does not represent
 a MIDI device installed on the system
See Also:
getMidiDeviceInfo()


"
MidiSystem,getMidiDeviceInfo(),static MidiDevice.Info[],Obtains an array of information objects representing the set of all MIDI devices available on the system.,"

getMidiDeviceInfo
public static MidiDevice.Info[] getMidiDeviceInfo()
Obtains an array of information objects representing
 the set of all MIDI devices available on the system.
 A returned information object can then be used to obtain the
 corresponding device object, by invoking
 getMidiDevice.

Returns:
an array of MidiDevice.Info objects, one
 for each installed MIDI device.  If no such devices are installed,
 an array of length 0 is returned.


"
MidiSystem,getMidiFileFormat(File file),static MidiFileFormat,Obtains the MIDI file format of the specified File.,"

getMidiFileFormat
public static MidiFileFormat getMidiFileFormat(File file)
                                        throws InvalidMidiDataException,
                                               IOException
Obtains the MIDI file format of the specified File.  The
 File must point to valid MIDI file data for a file type
 recognized by the system.
 
 This operation can only succeed for files of a type which can be parsed
 by an installed file reader.  It may fail with an InvalidMidiDataException
 even for valid files if no compatible file reader is installed.  It
 will also fail with an InvalidMidiDataException if a compatible file reader
 is installed, but encounters errors while determining the file format.

Parameters:
file - the File from which file format information
 should be extracted
Returns:
a MidiFileFormat object describing the MIDI file
 format
Throws:
InvalidMidiDataException - if the File does not point
  to valid MIDI file data recognized by the system
IOException - if an I/O exception occurs while accessing the file
See Also:
getMidiFileFormat(InputStream), 
getMidiFileFormat(URL)


"
MidiSystem,getMidiFileFormat(InputStream stream),static MidiFileFormat,Obtains the MIDI file format of the data in the specified input stream.,"

getMidiFileFormat
public static MidiFileFormat getMidiFileFormat(InputStream stream)
                                        throws InvalidMidiDataException,
                                               IOException
Obtains the MIDI file format of the data in the specified input stream.
 The stream must point to valid MIDI file data for a file type recognized
 by the system.
 
 This method and/or the code it invokes may need to read some data from
 the stream to determine whether its data format is supported.  The
 implementation may therefore
 need to mark the stream, read enough data to determine whether it is in
 a supported format, and reset the stream's read pointer to its original
 position.  If the input stream does not permit this set of operations,
 this method may fail with an IOException.
 
 This operation can only succeed for files of a type which can be parsed
 by an installed file reader.  It may fail with an InvalidMidiDataException
 even for valid files if no compatible file reader is installed.  It
 will also fail with an InvalidMidiDataException if a compatible file reader
 is installed, but encounters errors while determining the file format.

Parameters:
stream - the input stream from which file format information
 should be extracted
Returns:
an MidiFileFormat object describing the MIDI file
 format
Throws:
InvalidMidiDataException - if the stream does not point to valid
 MIDI file data recognized by the system
IOException - if an I/O exception occurs while accessing the
 stream
See Also:
getMidiFileFormat(URL), 
getMidiFileFormat(File), 
InputStream.markSupported(), 
InputStream.mark(int)


"
MidiSystem,getMidiFileFormat(URL url),static MidiFileFormat,Obtains the MIDI file format of the data in the specified URL.,"

getMidiFileFormat
public static MidiFileFormat getMidiFileFormat(URL url)
                                        throws InvalidMidiDataException,
                                               IOException
Obtains the MIDI file format of the data in the specified URL.  The URL
 must point to valid MIDI file data for a file type recognized
 by the system.
 
 This operation can only succeed for files of a type which can be parsed
 by an installed file reader.  It may fail with an InvalidMidiDataException
 even for valid files if no compatible file reader is installed.  It
 will also fail with an InvalidMidiDataException if a compatible file reader
 is installed, but encounters errors while determining the file format.

Parameters:
url - the URL from which file format information should be
 extracted
Returns:
a MidiFileFormat object describing the MIDI file
 format
Throws:
InvalidMidiDataException - if the URL does not point to valid MIDI
 file data recognized by the system
IOException - if an I/O exception occurs while accessing the URL
See Also:
getMidiFileFormat(InputStream), 
getMidiFileFormat(File)


"
MidiSystem,getMidiFileTypes(),static int[],Obtains the set of MIDI file types for which file writing support is provided by the system.,"

getMidiFileTypes
public static int[] getMidiFileTypes()
Obtains the set of MIDI file types for which file writing support is
 provided by the system.

Returns:
array of unique file types.  If no file types are supported,
 an array of length 0 is returned.


"
MidiSystem,getMidiFileTypes(Sequence sequence),static int[],Obtains the set of MIDI file types that the system can write from the sequence specified.,"

getMidiFileTypes
public static int[] getMidiFileTypes(Sequence sequence)
Obtains the set of MIDI file types that the system can write from the
 sequence specified.

Parameters:
sequence - the sequence for which MIDI file type support
 is queried
Returns:
the set of unique supported file types.  If no file types are supported,
 returns an array of length 0.


"
MidiSystem,getReceiver(),static Receiver,Obtains a MIDI receiver from an external MIDI port or other default device.,"

getReceiver
public static Receiver getReceiver()
                            throws MidiUnavailableException
Obtains a MIDI receiver from an external MIDI port
 or other default device.
 The returned receiver always implements
 the MidiDeviceReceiver interface.

 If the system property
 javax.sound.midi.Receiver
 is defined or it is defined in the file ""sound.properties"",
 it is used to identify the device that provides the default receiver.
 For details, refer to the class description.

 If a suitable MIDI port is not available, the Receiver is
 retrieved from an installed synthesizer.

 If a native receiver provided by the default device does not implement
 the MidiDeviceReceiver interface, it will be wrapped in a
 wrapper class that implements the MidiDeviceReceiver interface.
 The corresponding Receiver method calls will be forwarded
 to the native receiver.

 If this method returns successfully, the MidiDevice the
 Receiver belongs to is opened implicitly, if it is
 not already open. It is possible to close an implicitly opened
 device by calling close
 on the returned Receiver. All open Receiver
 instances have to be closed in order to release system resources
 hold by the MidiDevice. For a
 detailed description of open/close behaviour see the class
 description of MidiDevice.

Returns:
the default MIDI receiver
Throws:
MidiUnavailableException - if the default receiver is not
         available due to resource restrictions,
         or no device providing receivers is installed in the system


"
MidiSystem,getSequence(File file),static Sequence,Obtains a MIDI sequence from the specified File.,"

getSequence
public static Sequence getSequence(File file)
                            throws InvalidMidiDataException,
                                   IOException
Obtains a MIDI sequence from the specified File.
 The File must point to valid MIDI file data
 for a file type recognized by the system.
 
 This operation can only succeed for files of a type which can be parsed
 by an installed file reader.  It may fail with an InvalidMidiDataException
 even for valid files if no compatible file reader is installed.  It
 will also fail with an InvalidMidiDataException if a compatible file reader
 is installed, but encounters errors while constructing the Sequence
 object from the file data.

Parameters:
file - the File from which the Sequence
 should be constructed
Returns:
a Sequence object based on the MIDI file data
 pointed to by the File
Throws:
InvalidMidiDataException - if the File does not point to valid MIDI
 file data recognized by the system
IOException - if an I/O exception occurs


"
MidiSystem,getSequence(InputStream stream),static Sequence,Obtains a MIDI sequence from the specified input stream.,"

getSequence
public static Sequence getSequence(InputStream stream)
                            throws InvalidMidiDataException,
                                   IOException
Obtains a MIDI sequence from the specified input stream.  The stream must
 point to valid MIDI file data for a file type recognized
 by the system.
 
 This method and/or the code it invokes may need to read some data
 from the stream to determine whether
 its data format is supported.  The implementation may therefore
 need to mark the stream, read enough data to determine whether it is in
 a supported format, and reset the stream's read pointer to its original
 position.  If the input stream does not permit this set of operations,
 this method may fail with an IOException.
 
 This operation can only succeed for files of a type which can be parsed
 by an installed file reader.  It may fail with an InvalidMidiDataException
 even for valid files if no compatible file reader is installed.  It
 will also fail with an InvalidMidiDataException if a compatible file reader
 is installed, but encounters errors while constructing the Sequence
 object from the file data.

Parameters:
stream - the input stream from which the Sequence
 should be constructed
Returns:
a Sequence object based on the MIDI file data
 contained in the input stream
Throws:
InvalidMidiDataException - if the stream does not point to
 valid MIDI file data recognized by the system
IOException - if an I/O exception occurs while accessing the
 stream
See Also:
InputStream.markSupported(), 
InputStream.mark(int)


"
MidiSystem,getSequence(URL url),static Sequence,Obtains a MIDI sequence from the specified URL.,"

getSequence
public static Sequence getSequence(URL url)
                            throws InvalidMidiDataException,
                                   IOException
Obtains a MIDI sequence from the specified URL.  The URL must
 point to valid MIDI file data for a file type recognized
 by the system.
 
 This operation can only succeed for files of a type which can be parsed
 by an installed file reader.  It may fail with an InvalidMidiDataException
 even for valid files if no compatible file reader is installed.  It
 will also fail with an InvalidMidiDataException if a compatible file reader
 is installed, but encounters errors while constructing the Sequence
 object from the file data.

Parameters:
url - the URL from which the Sequence should be
 constructed
Returns:
a Sequence object based on the MIDI file data
 pointed to by the URL
Throws:
InvalidMidiDataException - if the URL does not point to valid MIDI
 file data recognized by the system
IOException - if an I/O exception occurs while accessing the URL


"
MidiSystem,getSequencer(),static Sequencer,"Obtains the default Sequencer, connected to a default device.","

getSequencer
public static Sequencer getSequencer()
                              throws MidiUnavailableException
Obtains the default Sequencer, connected to
 a default device.
 The returned Sequencer instance is
 connected to the default Synthesizer,
 as returned by getSynthesizer().
 If there is no Synthesizer
 available, or the default Synthesizer
 cannot be opened, the sequencer is connected
 to the default Receiver, as returned
 by getReceiver().
 The connection is made by retrieving a Transmitter
 instance from the Sequencer and setting its
 Receiver.
 Closing and re-opening the sequencer will restore the
 connection to the default device.

 This method is equivalent to calling
 getSequencer(true).

 If the system property
 javax.sound.midi.Sequencer
 is defined or it is defined in the file ""sound.properties"",
 it is used to identify the default sequencer.
 For details, refer to the class description.

Returns:
the default sequencer, connected to a default Receiver
Throws:
MidiUnavailableException - if the sequencer is not
         available due to resource restrictions,
         or there is no Receiver available by any
         installed MidiDevice,
         or no sequencer is installed in the system.
See Also:
getSequencer(boolean), 
getSynthesizer(), 
getReceiver()


"
MidiSystem,getSequencer(boolean connected),static Sequencer,"Obtains the default Sequencer, optionally connected to a default device.","

getSequencer
public static Sequencer getSequencer(boolean connected)
                              throws MidiUnavailableException
Obtains the default Sequencer, optionally
 connected to a default device.

 If connected is true, the returned
 Sequencer instance is
 connected to the default Synthesizer,
 as returned by getSynthesizer().
 If there is no Synthesizer
 available, or the default Synthesizer
 cannot be opened, the sequencer is connected
 to the default Receiver, as returned
 by getReceiver().
 The connection is made by retrieving a Transmitter
 instance from the Sequencer and setting its
 Receiver.
 Closing and re-opening the sequencer will restore the
 connection to the default device.

 If connected is false, the returned
 Sequencer instance is not connected, it
 has no open Transmitters. In order to
 play the sequencer on a MIDI device, or a Synthesizer,
 it is necessary to get a Transmitter and set its
 Receiver.

 If the system property
 javax.sound.midi.Sequencer
 is defined or it is defined in the file ""sound.properties"",
 it is used to identify the default sequencer.
 For details, refer to the class description.

Parameters:
connected - whether or not the returned Sequencer
 is connected to the default Synthesizer
Returns:
the default sequencer
Throws:
MidiUnavailableException - if the sequencer is not
         available due to resource restrictions,
         or no sequencer is installed in the system,
         or if connected is true, and there is
         no Receiver available by any installed
         MidiDevice
Since:
1.5
See Also:
getSynthesizer(), 
getReceiver()


"
MidiSystem,getSoundbank(File file),static Soundbank,Constructs a Soundbank by reading it from the specified File.,"

getSoundbank
public static Soundbank getSoundbank(File file)
                              throws InvalidMidiDataException,
                                     IOException
Constructs a Soundbank by reading it from the specified
 File.
 The File must point to a valid MIDI soundbank file.

Parameters:
file - the source of the sound bank data
Returns:
the sound bank
Throws:
InvalidMidiDataException - if the File does not
 point to valid MIDI soundbank data recognized by the system
IOException - if an I/O error occurred when loading the soundbank


"
MidiSystem,getSoundbank(InputStream stream),static Soundbank,Constructs a MIDI sound bank by reading it from the specified stream.,"

getSoundbank
public static Soundbank getSoundbank(InputStream stream)
                              throws InvalidMidiDataException,
                                     IOException
Constructs a MIDI sound bank by reading it from the specified stream.
 The stream must point to
 a valid MIDI soundbank file.  In general, MIDI soundbank providers may
 need to read some data from the stream before determining whether they
 support it.  These parsers must
 be able to mark the stream, read enough data to determine whether they
 support the stream, and, if not, reset the stream's read pointer to
 its original position.  If the input stream does not support this,
 this method may fail with an IOException.

Parameters:
stream - the source of the sound bank data.
Returns:
the sound bank
Throws:
InvalidMidiDataException - if the stream does not point to
 valid MIDI soundbank data recognized by the system
IOException - if an I/O error occurred when loading the soundbank
See Also:
InputStream.markSupported(), 
InputStream.mark(int)


"
MidiSystem,getSoundbank(URL url),static Soundbank,Constructs a Soundbank by reading it from the specified URL.,"

getSoundbank
public static Soundbank getSoundbank(URL url)
                              throws InvalidMidiDataException,
                                     IOException
Constructs a Soundbank by reading it from the specified URL.
 The URL must point to a valid MIDI soundbank file.

Parameters:
url - the source of the sound bank data
Returns:
the sound bank
Throws:
InvalidMidiDataException - if the URL does not point to valid MIDI
 soundbank data recognized by the system
IOException - if an I/O error occurred when loading the soundbank


"
MidiSystem,getSynthesizer(),static Synthesizer,Obtains the default synthesizer.,"

getSynthesizer
public static Synthesizer getSynthesizer()
                                  throws MidiUnavailableException
Obtains the default synthesizer.

 If the system property
 javax.sound.midi.Synthesizer
 is defined or it is defined in the file ""sound.properties"",
 it is used to identify the default synthesizer.
 For details, refer to the class description.

Returns:
the default synthesizer
Throws:
MidiUnavailableException - if the synthesizer is not
         available due to resource restrictions,
         or no synthesizer is installed in the system


"
MidiSystem,getTransmitter(),static Transmitter,Obtains a MIDI transmitter from an external MIDI port or other default source.,"

getTransmitter
public static Transmitter getTransmitter()
                                  throws MidiUnavailableException
Obtains a MIDI transmitter from an external MIDI port
 or other default source.
 The returned transmitter always implements
 the MidiDeviceTransmitter interface.

 If the system property
 javax.sound.midi.Transmitter
 is defined or it is defined in the file ""sound.properties"",
 it is used to identify the device that provides the default transmitter.
 For details, refer to the class description.

 If a native transmitter provided by the default device does not implement
 the MidiDeviceTransmitter interface, it will be wrapped in a
 wrapper class that implements the MidiDeviceTransmitter interface.
 The corresponding Transmitter method calls will be forwarded
 to the native transmitter.

 If this method returns successfully, the MidiDevice the
 Transmitter belongs to is opened implicitly, if it
 is not already open. It is possible to close an implicitly
 opened device by calling close on the returned
 Transmitter. All open Transmitter
 instances have to be closed in order to release system resources
 hold by the MidiDevice. For a detailed description
 of open/close behaviour see the class description of MidiDevice.

Returns:
the default MIDI transmitter
Throws:
MidiUnavailableException - if the default transmitter is not
         available due to resource restrictions,
         or no device providing transmitters is installed in the system


"
MidiSystem,isFileTypeSupported(int fileType),static boolean,Indicates whether file writing support for the specified MIDI file type is provided by the system.,"

isFileTypeSupported
public static boolean isFileTypeSupported(int fileType)
Indicates whether file writing support for the specified MIDI file type
 is provided by the system.

Parameters:
fileType - the file type for which write capabilities are queried
Returns:
true if the file type is supported,
 otherwise false


"
MidiSystem,"isFileTypeSupported(int fileType, Sequence sequence)",static boolean,Indicates whether a MIDI file of the file type specified can be written from the sequence indicated.,"

isFileTypeSupported
public static boolean isFileTypeSupported(int fileType,
                                          Sequence sequence)
Indicates whether a MIDI file of the file type specified can be written
 from the sequence indicated.

Parameters:
fileType - the file type for which write capabilities
 are queried
sequence - the sequence for which file writing support is queried
Returns:
true if the file type is supported for this
 sequence, otherwise false


"
MidiSystem,"write(Sequence in, int type, File out)",static int,Writes a stream of bytes representing a file of the MIDI file type indicated to the external file provided.,"

write
public static int write(Sequence in,
                        int type,
                        File out)
                 throws IOException
Writes a stream of bytes representing a file of the MIDI file type
 indicated to the external file provided.

Parameters:
in - sequence containing MIDI data to be written to the file
type - the file type of the file to be written to the output stream
out - external file to which the file data should be written
Returns:
the number of bytes written to the file
Throws:
IOException - if an I/O exception occurs
IllegalArgumentException - if the file type is not supported by
 the system
See Also:
isFileTypeSupported(int, Sequence), 
getMidiFileTypes(Sequence)


"
MidiSystem,"write(Sequence in, int fileType, OutputStream out)",static int,Writes a stream of bytes representing a file of the MIDI file type indicated to the output stream provided.,"

write
public static int write(Sequence in,
                        int fileType,
                        OutputStream out)
                 throws IOException
Writes a stream of bytes representing a file of the MIDI file type
 indicated to the output stream provided.

Parameters:
in - sequence containing MIDI data to be written to the file
fileType - the file type of the file to be written to the output stream
out - stream to which the file data should be written
Returns:
the number of bytes written to the output stream
Throws:
IOException - if an I/O exception occurs
IllegalArgumentException - if the file format is not supported by
 the system
See Also:
isFileTypeSupported(int, Sequence), 
getMidiFileTypes(Sequence)


"
Patch,getBank(),int,Returns the number of the bank that contains the instrument whose location this Patch specifies.,"

getBank
public int getBank()
Returns the number of the bank that contains the instrument
 whose location this Patch specifies.

Returns:
the bank number, whose range is from 0 to 16383
See Also:
MidiChannel.programChange(int, int)


"
Patch,getProgram(),int,"Returns the index, within a bank, of the instrument whose location this Patch specifies.","

getProgram
public int getProgram()
Returns the index, within
 a bank, of the instrument whose location this Patch specifies.

Returns:
the instrument's program number, whose range is from 0 to 127
See Also:
MidiChannel.getProgram(), 
MidiChannel.programChange(int), 
MidiChannel.programChange(int, int)


"
Sequence,createTrack(),Track,"Creates a new, initially empty track as part of this sequence.","

createTrack
public Track createTrack()
Creates a new, initially empty track as part of this sequence.
 The track initially contains the meta-event End of Track.
 The newly created track is returned.  All tracks in the sequence
 may be retrieved using getTracks().  Tracks may be
 removed from the sequence using deleteTrack(javax.sound.midi.Track).

Returns:
the newly created track


"
Sequence,deleteTrack(Track track),boolean,Removes the specified track from the sequence.,"

deleteTrack
public boolean deleteTrack(Track track)
Removes the specified track from the sequence.

Parameters:
track - the track to remove
Returns:
true if the track existed in the track and was removed,
 otherwise false.
See Also:
createTrack(), 
getTracks()


"
Sequence,getDivisionType(),float,Obtains the timing division type for this sequence.,"

getDivisionType
public float getDivisionType()
Obtains the timing division type for this sequence.

Returns:
the division type (PPQ or one of the SMPTE types)
See Also:
PPQ, 
SMPTE_24, 
SMPTE_25, 
SMPTE_30DROP, 
SMPTE_30, 
Sequence(float, int), 
MidiFileFormat.getDivisionType()


"
Sequence,getMicrosecondLength(),long,"Obtains the duration of this sequence, expressed in microseconds.","

getMicrosecondLength
public long getMicrosecondLength()
Obtains the duration of this sequence, expressed in microseconds.

Returns:
this sequence's duration in microseconds.


"
Sequence,getPatchList(),Patch[],Obtains a list of patches referenced in this sequence.,"

getPatchList
public Patch[] getPatchList()
Obtains a list of patches referenced in this sequence.
 This patch list may be used to load the required
 Instrument objects
 into a Synthesizer.

Returns:
an array of Patch objects used in this sequence
See Also:
Synthesizer.loadInstruments(Soundbank, Patch[])


"
Sequence,getResolution(),int,Obtains the timing resolution for this sequence.,"

getResolution
public int getResolution()
Obtains the timing resolution for this sequence.
 If the sequence's division type is PPQ, the resolution is specified in ticks per beat.
 For SMTPE timing, the resolution is specified in ticks per frame.

Returns:
the number of ticks per beat (PPQ) or per frame (SMPTE)
See Also:
getDivisionType(), 
Sequence(float, int), 
MidiFileFormat.getResolution()


"
Sequence,getTickLength(),long,"Obtains the duration of this sequence, expressed in MIDI ticks.","

getTickLength
public long getTickLength()
Obtains the duration of this sequence, expressed in MIDI ticks.

Returns:
this sequence's length in ticks
See Also:
getMicrosecondLength()


"
Sequence,getTracks(),Track[],Obtains an array containing all the tracks in this sequence.,"

getTracks
public Track[] getTracks()
Obtains an array containing all the tracks in this sequence.
 If the sequence contains no tracks, an array of length 0 is returned.

Returns:
the array of tracks
See Also:
createTrack(), 
deleteTrack(javax.sound.midi.Track)


"
Sequencer.SyncMode,equals(Object obj),boolean,Determines whether two objects are equal.,"

equals
public final boolean equals(Object obj)
Determines whether two objects are equal.
 Returns true if the objects are identical

Overrides:
equals in class Object
Parameters:
obj - the reference object with which to compare
Returns:
true if this object is the same as the
 obj argument, false otherwise
See Also:
Object.hashCode(), 
HashMap


"
Sequencer.SyncMode,hashCode(),int,Finalizes the hashcode method.,"

hashCode
public final int hashCode()
Finalizes the hashcode method.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Sequencer.SyncMode,toString(),String,Provides this synchronization mode's name as the string representation of the mode.,"

toString
public final String toString()
Provides this synchronization mode's name as the string
 representation of the mode.

Overrides:
toString in class Object
Returns:
the name of this synchronization mode


"
ShortMessage,clone(),Object,Creates a new object of the same class and with the same contents as this object.,"

clone
public Object clone()
Creates a new object of the same class and with the same contents
 as this object.

Specified by:
clone in class MidiMessage
Returns:
a clone of this instance.
See Also:
Cloneable


"
ShortMessage,getChannel(),int,Obtains the MIDI channel associated with this event.,"

getChannel
public int getChannel()
Obtains the MIDI channel associated with this event.  This method
 assumes that the event is a MIDI channel message; if not, the return
 value will not be meaningful.

Returns:
MIDI channel associated with the message.
See Also:
setMessage(int, int, int, int)


"
ShortMessage,getCommand(),int,Obtains the MIDI command associated with this event.,"

getCommand
public int getCommand()
Obtains the MIDI command associated with this event.  This method
 assumes that the event is a MIDI channel message; if not, the return
 value will not be meaningful.

Returns:
the MIDI command associated with this event
See Also:
setMessage(int, int, int, int)


"
ShortMessage,getData1(),int,Obtains the first data byte in the message.,"

getData1
public int getData1()
Obtains the first data byte in the message.

Returns:
the value of the data1 field
See Also:
setMessage(int, int, int)


"
ShortMessage,getData2(),int,Obtains the second data byte in the message.,"

getData2
public int getData2()
Obtains the second data byte in the message.

Returns:
the value of the data2 field
See Also:
setMessage(int, int, int)


"
ShortMessage,getDataLength(int status),protected int,Retrieves the number of data bytes associated with a particular status byte value.,"

getDataLength
protected final int getDataLength(int status)
                           throws InvalidMidiDataException
Retrieves the number of data bytes associated with a particular
 status byte value.

Parameters:
status - status byte value, which must represent a short MIDI message
Returns:
data length in bytes (0, 1, or 2)
Throws:
InvalidMidiDataException - if the
 status argument does not represent the status byte for any
 short message


"
ShortMessage,setMessage(int status),void,Sets the parameters for a MIDI message that takes no data bytes.,"

setMessage
public void setMessage(int status)
                throws InvalidMidiDataException
Sets the parameters for a MIDI message that takes no data bytes.

Parameters:
status - the MIDI status byte
Throws:
InvalidMidiDataException - if status does not
 specify a valid MIDI status byte for a message that requires no data bytes.
See Also:
setMessage(int, int, int), 
setMessage(int, int, int, int)


"
ShortMessage,"setMessage(int status, int data1, int data2)",void,Sets the parameters for a MIDI message that takes one or two data bytes.,"

setMessage
public void setMessage(int status,
                       int data1,
                       int data2)
                throws InvalidMidiDataException
Sets the  parameters for a MIDI message that takes one or two data
 bytes.  If the message takes only one data byte, the second data
 byte is ignored; if the message does not take any data bytes, both
 data bytes are ignored.

Parameters:
status - the MIDI status byte
data1 - the first data byte
data2 - the second data byte
Throws:
InvalidMidiDataException - if the
 the status byte, or all data bytes belonging to the message, do
 not specify a valid MIDI message.
See Also:
setMessage(int, int, int, int), 
setMessage(int)


"
ShortMessage,"setMessage(int command, int channel, int data1, int data2)",void,Sets the short message parameters for a channel message which takes up to two data bytes.,"

setMessage
public void setMessage(int command,
                       int channel,
                       int data1,
                       int data2)
                throws InvalidMidiDataException
Sets the short message parameters for a  channel message
 which takes up to two data bytes.  If the message only
 takes one data byte, the second data byte is ignored; if
 the message does not take any data bytes, both data bytes
 are ignored.

Parameters:
command - the MIDI command represented by this message
channel - the channel associated with the message
data1 - the first data byte
data2 - the second data byte
Throws:
InvalidMidiDataException - if the
 status byte or all data bytes belonging to the message, do
 not specify a valid MIDI message
See Also:
setMessage(int, int, int), 
setMessage(int), 
getCommand(), 
getChannel(), 
getData1(), 
getData2()


"
SoundbankResource,getData(),abstract Object,Obtains the sampled audio that is stored in this SoundbankResource.,"

getData
public abstract Object getData()
Obtains the sampled audio that is stored in this SoundbankResource.
 The type of object returned depends on the implementation of the
 concrete class, and may be queried using getDataClass.

Returns:
an object containing the sampled audio data
See Also:
getDataClass()


"
SoundbankResource,getDataClass(),Class<?>,Obtains the class used by this sample to represent its data.,"

getDataClass
public Class<?> getDataClass()
Obtains the class used by this sample to represent its data.
 The object returned by getData will be of this
 class.  If this SoundbankResource object does not support
 direct access to its data, returns null.

Returns:
the class used to represent the sample's data, or
 null if the data is not accessible


"
SoundbankResource,getName(),String,Obtains the name of the resource.,"

getName
public String getName()
Obtains the name of the resource.  This should generally be a string
 descriptive of the resource.

Returns:
the instrument's name


"
SoundbankResource,getSoundbank(),Soundbank,Obtains the sound bank that contains this SoundbankResource.,"

getSoundbank
public Soundbank getSoundbank()
Obtains the sound bank that contains this SoundbankResource.

Returns:
the sound bank in which this SoundbankResource is stored


"
SysexMessage,clone(),Object,Creates a new object of the same class and with the same contents as this object.,"

clone
public Object clone()
Creates a new object of the same class and with the same contents
 as this object.

Specified by:
clone in class MidiMessage
Returns:
a clone of this instance
See Also:
Cloneable


"
SysexMessage,getData(),byte[],Obtains a copy of the data for the system exclusive message.,"

getData
public byte[] getData()
Obtains a copy of the data for the system exclusive message.
 The returned array of bytes does not include the status byte.

Returns:
array containing the system exclusive message data.


"
SysexMessage,"setMessage(byte[] data, int length)",void,Sets the data for the system exclusive message.,"

setMessage
public void setMessage(byte[] data,
                       int length)
                throws InvalidMidiDataException
Sets the data for the system exclusive message.   The
 first byte of the data array must be a valid system
 exclusive status byte (0xF0 or 0xF7).

Overrides:
setMessage in class MidiMessage
Parameters:
data - the system exclusive message data
length - the length of the valid message data in
 the array, including the status byte.
Throws:
InvalidMidiDataException - if the parameter values do not specify a valid MIDI meta message


"
SysexMessage,"setMessage(int status, byte[] data, int length)",void,Sets the data for the system exclusive message.,"

setMessage
public void setMessage(int status,
                       byte[] data,
                       int length)
                throws InvalidMidiDataException
Sets the data for the system exclusive message.

Parameters:
status - the status byte for the message (0xF0 or 0xF7)
data - the system exclusive message data
length - the length of the valid message data in
 the array
Throws:
InvalidMidiDataException - if the status byte is invalid for a sysex message


"
Track,add(MidiEvent event),boolean,Adds a new event to the track.,"

add
public boolean add(MidiEvent event)
Adds a new event to the track.  However, if the event is already
 contained in the track, it is not added again.  The list of events
 is kept in time order, meaning that this event inserted at the
 appropriate place in the list, not necessarily at the end.

Parameters:
event - the event to add
Returns:
true if the event did not already exist in the
 track and was added, otherwise false


"
Track,get(int index),MidiEvent,Obtains the event at the specified index.,"

get
public MidiEvent get(int index)
              throws ArrayIndexOutOfBoundsException
Obtains the event at the specified index.

Parameters:
index - the location of the desired event in the event vector
Returns:
the event at the specified index
Throws:
ArrayIndexOutOfBoundsException - if the
 specified index is negative or not less than the current size of
 this track.
See Also:
size()


"
Track,remove(MidiEvent event),boolean,Removes the specified event from the track.,"

remove
public boolean remove(MidiEvent event)
Removes the specified event from the track.

Parameters:
event - the event to remove
Returns:
true if the event existed in the track and was removed,
 otherwise false


"
Track,size(),int,Obtains the number of events in this track.,"

size
public int size()
Obtains the number of events in this track.

Returns:
the size of the track's event vector


"
Track,ticks(),long,"Obtains the length of the track, expressed in MIDI ticks.","

ticks
public long ticks()
Obtains the length of the track, expressed in MIDI ticks.  (The
 duration of a tick in seconds is determined by the timing resolution
 of the Sequence containing this track, and also by
 the tempo of the music as set by the sequencer.)

Returns:
the duration, in ticks
See Also:
Sequence.Sequence(float, int), 
Sequencer.setTempoInBPM(float), 
Sequencer.getTickPosition()


"
