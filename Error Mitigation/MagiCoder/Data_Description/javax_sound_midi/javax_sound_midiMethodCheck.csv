Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,Instrument,1,getPatch(),False,,NULL
0,Instrument,2,getBank(),False,,NULL
0,Instrument,3,getPatchName(),False,,NULL
0,Instrument,4,getBankName(),False,,NULL
0,Instrument,5,getMidiChannel(),False,,NULL
0,Instrument,6,getMidiChannelName(),False,,NULL
0,Instrument,7,getMidiChannelType(),False,,NULL
0,Instrument,8,getMidiChannelTypeName(),False,,NULL
0,Instrument,9,getMidiChannelProgram(),False,,NULL
0,Instrument,10,getMidiChannelProgramName(),False,,NULL
0,Instrument,11,getMidiChannelVolume(),False,,NULL
0,Instrument,12,getMidiChannelVolumeName(),False,,NULL
0,Instrument,13,getMidiChannelBalance(),False,,NULL
0,Instrument,14,getMidiChannelBalanceName(),False,,NULL
0,Instrument,15,getMidiChannelExpression(),False,,NULL
0,Instrument,16,getMidiChannelExpressionName(),False,,NULL
0,Instrument,17,getMidiChannelModulation(),False,,NULL
0,Instrument,18,getMidiChannelModulationName(),False,,NULL
0,Instrument,19,getMidiChannelPan(),False,,NULL
0,Instrument,20,getMidiChannelPanName(),False,,NULL
0,Instrument,21,getMidiChannelSustain(),False,,NULL
0,Instrument,22,getMidiChannelSustainName(),False,,NULL
0,Instrument,23,getMidiChannelOmni(),False,,NULL
0,Instrument,24,getMidiChannelOmniName(),False,,NULL
0,Instrument,25,getMidiChannelMono(),False,,NULL
0,Instrument,26,getMidiChannelMonoName(),False,,NULL
0,Instrument,27,getMidiChannelPoly(),False,,NULL
0,Instrument,28,getMidiChannelPolyName(),False,,NULL
0,Instrument,29,getMidiChannelSolo(),False,,NULL
0,Instrument,30,getMidiChannelSoloName(),False,,NULL
0,Instrument,31,getMidiChannelRpn(),False,,NULL
0,Instrument,32,getMidiChannelRpnName(),False,,NULL
0,Instrument,33,getMidiChannelNrpn(),False,,NULL
0,Instrument,34,getMidiChannelNrpnName(),False,,NULL
0,Instrument,35,getMidiChannelTuning(),False,,NULL
0,Instrument,36,getMidiChannelTuningName(),False,,NULL
0,Instrument,37,getMidiChannelSmpteOffset(),False,,NULL
0,Instrument,38,getMidiChannelSmpteOffsetName(),False,,NULL
0,Instrument,39,getMidiChannelTempo(),False,,NULL
0,Instrument,40,getMidiChannelTempoName(),False,,NULL
0,Instrument,41,getMidiChannelTimeSignature(),False,,NULL
0,Instrument,42,getMidiChannelTimeSignatureName(),False,,NULL
0,Instrument,43,getMidiChannelKeySignature(),False,,NULL
0,Instrument,44,getMidiChannelKeySignatureName(),False,,NULL
0,Instrument,45,getMidiChannelSequencer(),False,,NULL
0,Instrument,46,getMidiChannelSequencerName(),False,,NULL
0,Instrument,47,getMidiChannelSequencerTickPosition(),False,,NULL
0,Instrument,48,getMidiChannelSequencerTickPositionName(),False,,NULL
0,Instrument,49,getMidiChannelSequencerTickPositionIncrement(),False,,NULL
0,Instrument,50,getMidiChannelSequencerTickPositionIncrementName(),False,,NULL
0,Instrument,51,getMidiChannelSequencerTickPositionIncrementType(),False,,NULL
0,Instrument,52,getMidiChannelSequencerTickPositionIncrementTypeName(),False,,NULL
0,Instrument,53,getMidiChannelSequencerTickPositionIncrementValue(),False,,NULL
0,Instrument,54,getMidiChannelSequencerTickPositionIncrementValueName(),False,,NULL
0,Instrument,55,getMidiChannelSequencerTickPositionIncrementValueType(),False,,NULL
1,MetaMessage,1,"MetaMessage(int command, byte[] data)",False,,NULL
1,MetaMessage,2,int getCommand(),False,,NULL
1,MetaMessage,3,byte[] getData(),True,Obtains a copy of the data for the meta message.,"

getData
public byte[] getData()
Obtains a copy of the data for the meta message.  The returned
 array of bytes does not include the status byte or the message
 length data.  The length of the data for the meta message is
 the length of the array.  Note that the length of the entire
 message includes the status byte and the meta message type
 byte, and therefore may be longer than the returned array.

Returns:
array containing the meta message data.
See Also:
MidiMessage.getLength()


"
1,MetaMessage,4,int getLength(),False,,NULL
1,MetaMessage,5,"void setMessage(int command, byte[] data, int length)",True,Sets the message parameters for a MetaMessage.,"

setMessage
public void setMessage(int type,
                       byte[] data,
                       int length)
                throws InvalidMidiDataException
Sets the message parameters for a MetaMessage.
 Since only one status byte value, 0xFF, is allowed for meta-messages,
 it does not need to be specified here.  Calls to getStatus return
 0xFF for all meta-messages.
 
 The type argument should be a valid value for the byte that
 follows the status byte in the MetaMessage.  The data argument
 should contain all the subsequent bytes of the MetaMessage.  In other words,
 the byte that specifies the type of MetaMessage is not considered a data byte.

Parameters:
type - meta-message type (must be less than 128)
data - the data bytes in the MIDI message
length - the number of bytes in the data
 byte array
Throws:
InvalidMidiDataException - if the
 parameter values do not specify a valid MIDI meta message


"
2,MidiDevice.Info,1,MidiDevice.Info getDeviceInfo(),False,,NULL
2,MidiDevice.Info,2,String getName(),True,Obtains the name of the device.,"

getName
public final String getName()
Obtains the name of the device.

Returns:
a string containing the device's name


"
2,MidiDevice.Info,3,String getVendor(),True,Obtains the name of the company who supplies the device.,"

getVendor
public final String getVendor()
Obtains the name of the company who supplies the device.

Returns:
device the vendor's name


"
2,MidiDevice.Info,4,String getDescription(),True,Obtains the description of the device.,"

getDescription
public final String getDescription()
Obtains the description of the device.

Returns:
a description of the device


"
2,MidiDevice.Info,5,String getVersion(),True,Obtains the version of the device.,"

getVersion
public final String getVersion()
Obtains the version of the device.

Returns:
textual version information for the device.


"
3,MidiEvent,1,"MidiEvent(MidiMessage message, long tick)",False,,NULL
3,MidiEvent,2,MidiMessage getMessage(),True,Obtains the MIDI message contained in the event.,"

getMessage
public MidiMessage getMessage()
Obtains the MIDI message contained in the event.

Returns:
the MIDI message


"
3,MidiEvent,3,long getTick(),True,"Obtains the time-stamp for the event, in MIDI ticks","

getTick
public long getTick()
Obtains the time-stamp for the event, in MIDI ticks

Returns:
the time-stamp for the event, in MIDI ticks


"
3,MidiEvent,4,void setMessage(MidiMessage message),False,,NULL
3,MidiEvent,5,void setTick(long tick),True,"Sets the time-stamp for the event, in MIDI ticks","

setTick
public void setTick(long tick)
Sets the time-stamp for the event, in MIDI ticks

Parameters:
tick - the new time-stamp, in MIDI ticks


"
4,MidiFileFormat,1,"MidiFileFormat(int type, int divisionType, int resolution)",False,,NULL
4,MidiFileFormat,2,int getDivisionType(),False,,NULL
4,MidiFileFormat,3,int getResolution(),True,Obtains the timing resolution for the MIDI file.,"

getResolution
public int getResolution()
Obtains the timing resolution for the MIDI file.
 If the division type is PPQ, the resolution is specified in ticks per beat.
 For SMTPE timing, the resolution is specified in ticks per frame.

Returns:
the number of ticks per beat (PPQ) or per frame (SMPTE)
See Also:
getDivisionType(), 
Sequence.getResolution()


"
4,MidiFileFormat,4,int getType(),True,Obtains the MIDI file type.,"

getType
public int getType()
Obtains the MIDI file type.

Returns:
the file's type (0, 1, or 2)


"
4,MidiFileFormat,5,void setDivisionType(int divisionType),False,,NULL
4,MidiFileFormat,6,void setResolution(int resolution),False,,NULL
4,MidiFileFormat,7,void setType(int type),False,,NULL
4,MidiFileFormat,8,String toString(),False,,NULL
5,MidiMessage,1,MidiMessage getMessage(),False,,NULL
5,MidiMessage,2,int getStatus(),True,Obtains the status byte for the MIDI message.,"

getStatus
public int getStatus()
Obtains the status byte for the MIDI message.  The status ""byte"" is
 represented as an integer; see the
 discussion in the
 MidiMessage class description.

Returns:
the integer representation of this event's status byte


"
5,MidiMessage,3,int getLength(),True,Obtains the total length of the MIDI message in bytes.,"

getLength
public int getLength()
Obtains the total length of the MIDI message in bytes.  A
 MIDI message consists of one status byte and zero or more
 data bytes.  The return value ranges from 1 for system real-time messages,
 to 2 or 3 for channel messages, to any value for meta and system
 exclusive messages.

Returns:
the length of the message in bytes


"
5,MidiMessage,4,byte[] getMessage(),True,Obtains the MIDI message data.,"

getMessage
public byte[] getMessage()
Obtains the MIDI message data.  The first byte of the returned byte
 array is the status byte of the message.  Any subsequent bytes up to
 the length of the message are data bytes.  The byte array may have a
 length which is greater than that of the actual message; the total
 length of the message in bytes is reported by the getLength()
 method.

Returns:
the byte array containing the complete MidiMessage data


"
5,MidiMessage,5,int getTick(),False,,NULL
6,MidiSystem,1,MidiSystem.getMidiDeviceInfo(),False,,NULL
6,MidiSystem,2,MidiSystem.getMidiDevice(),False,,NULL
6,MidiSystem,3,MidiSystem.getSynthesizer(),False,,NULL
6,MidiSystem,4,MidiSystem.getTransmitter(),False,,NULL
6,MidiSystem,5,MidiSystem.getReceiver(),False,,NULL
7,Patch,1,getPatchName(),False,,NULL
7,Patch,2,getPatchBank(),False,,NULL
7,Patch,3,getPatchProgram(),False,,NULL
7,Patch,4,getPatchNumber(),False,,NULL
7,Patch,5,getPatchClass(),False,,NULL
8,Sequence,1,"Sequence getSequence(Track[] tracks, int resolution)",False,,NULL
8,Sequence,2,Track[] getTracks(),True,Obtains an array containing all the tracks in this sequence.,"

getTracks
public Track[] getTracks()
Obtains an array containing all the tracks in this sequence.
 If the sequence contains no tracks, an array of length 0 is returned.

Returns:
the array of tracks
See Also:
createTrack(), 
deleteTrack(javax.sound.midi.Track)


"
8,Sequence,3,int getResolution(),True,Obtains the timing resolution for this sequence.,"

getResolution
public int getResolution()
Obtains the timing resolution for this sequence.
 If the sequence's division type is PPQ, the resolution is specified in ticks per beat.
 For SMTPE timing, the resolution is specified in ticks per frame.

Returns:
the number of ticks per beat (PPQ) or per frame (SMPTE)
See Also:
getDivisionType(), 
Sequence(float, int), 
MidiFileFormat.getResolution()


"
8,Sequence,4,void setResolution(int resolution),False,,NULL
8,Sequence,5,void setTickLength(long tickLength),False,,NULL
9,Sequencer.SyncMode,1,getMasterSyncMode(),False,,NULL
9,Sequencer.SyncMode,2,getMasterSyncMode(int track),False,,NULL
9,Sequencer.SyncMode,3,"getMasterSyncMode(int track, int channel)",False,,NULL
9,Sequencer.SyncMode,4,"getMasterSyncMode(int track, int channel, int noteNumber)",False,,NULL
9,Sequencer.SyncMode,5,"getMasterSyncMode(int track, int channel, int noteNumber, int noteValue)",False,,NULL
9,Sequencer.SyncMode,6,"getMasterSyncMode(int track, int channel, int noteNumber, int noteValue, int noteLength)",False,,NULL
9,Sequencer.SyncMode,7,"getMasterSyncMode(int track, int channel, int noteNumber, int noteValue, int noteLength, int noteVelocity)",False,,NULL
9,Sequencer.SyncMode,8,"getMasterSyncMode(int track, int channel, int noteNumber, int noteValue, int noteLength, int noteVelocity, int noteStartTime)",False,,NULL
9,Sequencer.SyncMode,9,"getMasterSyncMode(int track, int channel, int noteNumber, int noteValue, int noteLength, int noteVelocity, int noteStartTime, int noteEndTime)",False,,NULL
9,Sequencer.SyncMode,10,"getMasterSyncMode(int track, int channel, int noteNumber, int noteValue, int noteLength, int noteVelocity, int noteStartTime, int noteEndTime, int noteTick)",False,,NULL
9,Sequencer.SyncMode,11,"getMasterSyncMode(int track, int channel, int noteNumber, int noteValue, int noteLength, int noteVelocity, int noteStartTime, int noteEndTime, int noteTick, int noteDuration)",False,,NULL
9,Sequencer.SyncMode,12,"getMasterSyncMode(int track, int channel, int noteNumber, int noteValue, int noteLength, int noteVelocity, int noteStartTime, int noteEndTime, int noteTick, int noteDuration, int noteTempo)",False,,NULL
9,Sequencer.SyncMode,13,"getMasterSyncMode(int track, int channel, int noteNumber, int noteValue, int noteLength, int noteVelocity, int noteStartTime, int noteEndTime, int noteTick, int noteDuration, int noteTempo, int noteTimeSignature)",False,,NULL
9,Sequencer.SyncMode,14,"getMasterSyncMode(int track, int channel, int noteNumber, int noteValue, int noteLength, int noteVelocity, int noteStartTime, int noteEndTime, int noteTick, int noteDuration, int noteTempo, int noteTimeSignature, int noteKeySignature)",False,,NULL
9,Sequencer.SyncMode,15,"getMasterSyncMode(int track, int channel, int noteNumber, int noteValue, int noteLength, int noteVelocity, int noteStartTime, int noteEndTime, int noteTick, int noteDuration, int noteTempo, int noteTimeSignature, int noteKeySignature, int notePitchBend)",False,,NULL
9,Sequencer.SyncMode,16,"getMasterSyncMode(int track, int channel, int noteNumber, int noteValue, int noteLength, int noteVelocity, int noteStartTime, int noteEndTime, int noteTick, int noteDuration, int noteTempo, int noteTimeSignature, int noteKeySignature, int notePitchBend, int noteChannelPressure)",False,,NULL
9,Sequencer.SyncMode,17,"getMasterSyncMode(int track, int channel, int noteNumber, int noteValue, int noteLength, int noteVelocity, int noteStartTime, int noteEndTime, int noteTick, int noteDuration, int noteTempo, int noteTimeSignature, int noteKeySignature, int notePitchBend, int noteChannelPressure, int notePolyPressure)",False,,NULL
9,Sequencer.SyncMode,18,"getMasterSyncMode(int track, int channel, int noteNumber, int noteValue, int noteLength, int noteVelocity, int noteStartTime, int noteEndTime, int noteTick, int noteDuration, int noteTempo, int noteTimeSignature, int noteKeySignature, int notePitchBend, int noteChannelPressure, int notePolyPressure, int noteSysEx)",False,,NULL
9,Sequencer.SyncMode,19,"getMasterSyncMode(int track, int channel, int noteNumber, int noteValue, int noteLength, int noteVelocity, int noteStartTime, int noteEndTime, int noteTick, int noteDuration, int noteTempo, int noteTimeSignature, int noteKeySignature, int notePitchBend, int noteChannelPressure, int notePolyPressure, int noteSysEx, int noteSysExLength)",False,,NULL
10,ShortMessage,1,ShortMessage(),False,,NULL
10,ShortMessage,2,"setMessage(int command, int channel, int data1, int data2)",False,,NULL
10,ShortMessage,3,getCommand(),False,,NULL
10,ShortMessage,4,getChannel(),False,,NULL
10,ShortMessage,5,getData1(),False,,NULL
10,ShortMessage,6,getData2(),False,,NULL
10,ShortMessage,7,"setMessage(byte[] message, int length)",False,,NULL
10,ShortMessage,8,getLength(),False,,NULL
10,ShortMessage,9,getStatus(),False,,NULL
10,ShortMessage,10,getData(),False,,NULL
11,SoundbankResource,1,int getBankSize(),False,,NULL
11,SoundbankResource,2,"Instrument getInstrument(int bank, int program)",False,,NULL
11,SoundbankResource,3,"String getInstrumentName(int bank, int program)",False,,NULL
11,SoundbankResource,4,"String getProgramName(int bank, int program)",False,,NULL
11,SoundbankResource,5,String getBankName(int bank),False,,NULL
12,SysexMessage,1,SysexMessage(byte[] data),False,,NULL
12,SysexMessage,2,byte[] getData(),True,Obtains a copy of the data for the system exclusive message.,"

getData
public byte[] getData()
Obtains a copy of the data for the system exclusive message.
 The returned array of bytes does not include the status byte.

Returns:
array containing the system exclusive message data.


"
12,SysexMessage,3,int getLength(),False,,NULL
12,SysexMessage,4,int getType(),False,,NULL
12,SysexMessage,5,int getSequenceNumber(),False,,NULL
12,SysexMessage,6,int getManufacturerId(),False,,NULL
12,SysexMessage,7,int getDeviceId(),False,,NULL
12,SysexMessage,8,int getCommand(),False,,NULL
12,SysexMessage,9,int getChannel(),False,,NULL
12,SysexMessage,10,int getData(int index),False,,NULL
12,SysexMessage,11,int getDataLength(),False,,NULL
12,SysexMessage,12,int getStatus(),False,,NULL
12,SysexMessage,13,int getStatus(int index),False,,NULL
12,SysexMessage,14,int getStatusLength(),False,,NULL
12,SysexMessage,15,int getType0(),False,,NULL
12,SysexMessage,16,int getType1(),False,,NULL
12,SysexMessage,17,int getType2(),False,,NULL
12,SysexMessage,18,int getType3(),False,,NULL
12,SysexMessage,19,int getType4(),False,,NULL
12,SysexMessage,20,int getType5(),False,,NULL
12,SysexMessage,21,int getType6(),False,,NULL
12,SysexMessage,22,int getType7(),False,,NULL
12,SysexMessage,23,int getType8(),False,,NULL
12,SysexMessage,24,int getType9(),False,,NULL
12,SysexMessage,25,int getTypeA(),False,,NULL
12,SysexMessage,26,int getTypeB(),False,,NULL
12,SysexMessage,27,int getTypeC(),False,,NULL
12,SysexMessage,28,int getTypeD(),False,,NULL
12,SysexMessage,29,int getTypeE(),False,,NULL
12,SysexMessage,30,int getTypeF(),False,,NULL
13,Track,1,int getSize(),False,,NULL
13,Track,2,MidiEvent get(int index),True,Obtains the event at the specified index.,"

get
public MidiEvent get(int index)
              throws ArrayIndexOutOfBoundsException
Obtains the event at the specified index.

Parameters:
index - the location of the desired event in the event vector
Returns:
the event at the specified index
Throws:
ArrayIndexOutOfBoundsException - if the
 specified index is negative or not less than the current size of
 this track.
See Also:
size()


"
13,Track,3,void add(MidiEvent event),False,,NULL
13,Track,4,"void insert(MidiEvent event, int index)",False,,NULL
13,Track,5,void remove(int index),False,,NULL
14,VoiceStatus,1,getCurrentMicrosecondPosition(),False,,NULL
14,VoiceStatus,2,getCurrentNote(),False,,NULL
14,VoiceStatus,3,getCurrentNoteOnVelocity(),False,,NULL
14,VoiceStatus,4,getCurrentNoteOffVelocity(),False,,NULL
14,VoiceStatus,5,getCurrentController(),False,,NULL
14,VoiceStatus,6,getCurrentControllerValue(),False,,NULL
14,VoiceStatus,7,getCurrentPatch(),False,,NULL
14,VoiceStatus,8,getCurrentPatchBank(),False,,NULL
14,VoiceStatus,9,getCurrentProgram(),False,,NULL
14,VoiceStatus,10,getCurrentProgramChange(),False,,NULL
14,VoiceStatus,11,getCurrentSustainPedalOn(),False,,NULL
14,VoiceStatus,12,getCurrentSustainPedalOff(),False,,NULL
14,VoiceStatus,13,getCurrentPolyPressure(),False,,NULL
14,VoiceStatus,14,getCurrentChannelPressure(),False,,NULL
14,VoiceStatus,15,getCurrentPitchBend(),False,,NULL
14,VoiceStatus,16,getCurrentPitchBendSensitivity(),False,,NULL
14,VoiceStatus,17,getCurrentAftertouch(),False,,NULL
14,VoiceStatus,18,getCurrentAftertouchSensitivity(),False,,NULL
14,VoiceStatus,19,getCurrentNoteLength(),False,,NULL
14,VoiceStatus,20,getCurrentNoteLengthCounter(),False,,NULL
14,VoiceStatus,21,getCurrentNoteLengthCounterReset(),False,,NULL
14,VoiceStatus,22,getCurrentNoteLengthCounterResetValue(),False,,NULL
14,VoiceStatus,23,getCurrentNoteLengthCounterResetValue(),False,,NULL
14,VoiceStatus,24,getCurrentNoteLengthCounterResetValue(),False,,NULL
14,VoiceStatus,25,getCurrentNoteLengthCounterResetValue(),False,,NULL
