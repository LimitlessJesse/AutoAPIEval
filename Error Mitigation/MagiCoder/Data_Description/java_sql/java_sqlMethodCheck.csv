Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,Date,1,Date(long date),False,,NULL
0,Date,2,long getTime(),False,,NULL
0,Date,3,void setTime(long time),True,Sets an existing Date object using the given milliseconds time value.,"

setTime
public void setTime(long date)
Sets an existing Date object
 using the given milliseconds time value.
 If the given milliseconds value contains time information,
 the driver will set the time components to the
 time in the default time zone (the time zone of the Java virtual
 machine running the application) that corresponds to zero GMT.

Overrides:
setTime in class Date
Parameters:
date - milliseconds since January 1, 1970, 00:00:00 GMT not
        to exceed the milliseconds representation for the year 8099.
        A negative number indicates the number of milliseconds
        before January 1, 1970, 00:00:00 GMT.


"
0,Date,4,int compareTo(Date anotherDate),False,,NULL
0,Date,5,boolean after(Date when),False,,NULL
0,Date,6,boolean before(Date when),False,,NULL
0,Date,7,int getDate(),False,,NULL
0,Date,8,int getDay(),False,,NULL
0,Date,9,int getHours(),True,Deprecated.,"

getHours
@Deprecated
public int getHours()
Deprecated. 
This method is deprecated and should not be used because SQL Date
 values do not have a time component.

Overrides:
getHours in class Date
Returns:
the hour represented by this date.
Throws:
IllegalArgumentException - if this method is invoked
See Also:
setHours(int)


"
0,Date,10,int getMinutes(),True,Deprecated.,"

getMinutes
@Deprecated
public int getMinutes()
Deprecated. 
This method is deprecated and should not be used because SQL Date
 values do not have a time component.

Overrides:
getMinutes in class Date
Returns:
the number of minutes past the hour represented by this date.
Throws:
IllegalArgumentException - if this method is invoked
See Also:
setMinutes(int)


"
0,Date,11,int getMonth(),False,,NULL
0,Date,12,int getSeconds(),True,Deprecated.,"

getSeconds
@Deprecated
public int getSeconds()
Deprecated. 
This method is deprecated and should not be used because SQL Date
 values do not have a time component.

Overrides:
getSeconds in class Date
Returns:
the number of seconds past the minute represented by this date.
Throws:
IllegalArgumentException - if this method is invoked
See Also:
setSeconds(int)


"
0,Date,13,int getTimezoneOffset(),False,,NULL
0,Date,14,int getYear(),False,,NULL
0,Date,15,void setDate(int date),False,,NULL
0,Date,16,void setHours(int hours),True,Deprecated.,"

setHours
@Deprecated
public void setHours(int i)
Deprecated. 
This method is deprecated and should not be used because SQL Date
 values do not have a time component.

Overrides:
setHours in class Date
Parameters:
i - the hour value.
Throws:
IllegalArgumentException - if this method is invoked
See Also:
getHours()


"
0,Date,17,void setMinutes(int minutes),True,Deprecated.,"

setMinutes
@Deprecated
public void setMinutes(int i)
Deprecated. 
This method is deprecated and should not be used because SQL Date
 values do not have a time component.

Overrides:
setMinutes in class Date
Parameters:
i - the value of the minutes.
Throws:
IllegalArgumentException - if this method is invoked
See Also:
getMinutes()


"
0,Date,18,void setMonth(int month),False,,NULL
0,Date,19,void setSeconds(int seconds),True,Deprecated.,"

setSeconds
@Deprecated
public void setSeconds(int i)
Deprecated. 
This method is deprecated and should not be used because SQL Date
 values do not have a time component.

Overrides:
setSeconds in class Date
Parameters:
i - the seconds value.
Throws:
IllegalArgumentException - if this method is invoked
See Also:
getSeconds()


"
0,Date,20,void setTime(long time),True,Sets an existing Date object using the given milliseconds time value.,"

setTime
public void setTime(long date)
Sets an existing Date object
 using the given milliseconds time value.
 If the given milliseconds value contains time information,
 the driver will set the time components to the
 time in the default time zone (the time zone of the Java virtual
 machine running the application) that corresponds to zero GMT.

Overrides:
setTime in class Date
Parameters:
date - milliseconds since January 1, 1970, 00:00:00 GMT not
        to exceed the milliseconds representation for the year 8099.
        A negative number indicates the number of milliseconds
        before January 1, 1970, 00:00:00 GMT.


"
0,Date,21,void setYear(int year),False,,NULL
0,Date,22,"Date valueOf(int year, int month, int date)",False,,NULL
0,Date,23,"Date valueOf(int year, int month, int date, int hours, int minutes)",False,,NULL
0,Date,24,"Date valueOf(int year, int month, int date, int hours, int minutes, int seconds)",False,,NULL
0,Date,25,"Date valueOf(int year, int month, int date, int hours, int minutes, int seconds, int timezoneOffset)",False,,NULL
1,DriverManager,1,"DriverManager.getConnection(String url, String user, String password)",False,,NULL
1,DriverManager,2,DriverManager.getDrivers(),False,,NULL
1,DriverManager,3,DriverManager.getDriver(String url),False,,NULL
1,DriverManager,4,DriverManager.registerDriver(Driver driver),False,,NULL
1,DriverManager,5,DriverManager.unregisterDriver(Driver driver),False,,NULL
2,DriverPropertyInfo,1,"DriverPropertyInfo[] getPropertyInfo(String url, Properties info)",False,,NULL
2,DriverPropertyInfo,2,"Connection getConnection(String url, Properties info)",False,,NULL
2,DriverPropertyInfo,3,"Connection getConnection(String url, String user, String password)",False,,NULL
2,DriverPropertyInfo,4,boolean jdbcCompliant(),False,,NULL
2,DriverPropertyInfo,5,void setLogWriter(PrintWriter out),False,,NULL
2,DriverPropertyInfo,6,PrintWriter getLogWriter(),False,,NULL
2,DriverPropertyInfo,7,void setLoginTimeout(int seconds),False,,NULL
2,DriverPropertyInfo,8,int getLoginTimeout(),False,,NULL
2,DriverPropertyInfo,9,boolean acceptsURL(String url),False,,NULL
3,SQLPermission,1,SQLPermission(String name),False,,NULL
3,SQLPermission,2,"SQLPermission(String name, String actions)",False,,NULL
3,SQLPermission,3,String getActions(),False,,NULL
3,SQLPermission,4,String getName(),False,,NULL
3,SQLPermission,5,boolean implies(Permission p),False,,NULL
4,Time,1,Time(long time),False,,NULL
4,Time,2,long getTime(),False,,NULL
4,Time,3,int getHours(),False,,NULL
4,Time,4,int getMinutes(),False,,NULL
4,Time,5,int getSeconds(),False,,NULL
4,Time,6,int getTimezoneOffset(),False,,NULL
4,Time,7,int hashCode(),False,,NULL
4,Time,8,void setHours(int hours),False,,NULL
4,Time,9,void setMinutes(int minutes),False,,NULL
4,Time,10,void setSeconds(int seconds),False,,NULL
4,Time,11,void setTime(long time),True,Sets a Time object using a milliseconds time value.,"

setTime
public void setTime(long time)
Sets a Time object using a milliseconds time value.

Overrides:
setTime in class Date
Parameters:
time - milliseconds since January 1, 1970, 00:00:00 GMT;
             a negative number is milliseconds before
               January 1, 1970, 00:00:00 GMT


"
4,Time,12,String toString(),True,Formats a time in JDBC time escape format.,"

toString
public String toString()
Formats a time in JDBC time escape format.

Overrides:
toString in class Date
Returns:
a String in hh:mm:ss format
See Also:
Date.toLocaleString(), 
Date.toGMTString()


"
4,Time,13,int compareTo(Time time),False,,NULL
4,Time,14,boolean equals(Object obj),False,,NULL
4,Time,15,int compareTo(Object obj),False,,NULL
4,Time,16,int compareTo(Time time),False,,NULL
4,Time,17,int compareTo(Object obj),False,,NULL
4,Time,18,int compareTo(Time time),False,,NULL
4,Time,19,int compareTo(Object obj),False,,NULL
4,Time,20,int compareTo(Time time),False,,NULL
5,Timestamp,1,Timestamp(long date),False,,NULL
5,Timestamp,2,long getTime(),True,"Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this Timestamp object.","

getTime
public long getTime()
Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT
 represented by this Timestamp object.

Overrides:
getTime in class Date
Returns:
the number of milliseconds since January 1, 1970, 00:00:00 GMT
          represented by this date.
See Also:
setTime(long)


"
5,Timestamp,3,int compareTo(Timestamp anotherTimestamp),True,Compares this Timestamp object to the given Timestamp object.,"

compareTo
public int compareTo(Timestamp ts)
Compares this Timestamp object to the given
 Timestamp object.

Parameters:
ts - the Timestamp object to be compared to
                this Timestamp object
Returns:
the value 0 if the two Timestamp
          objects are equal; a value less than 0 if this
          Timestamp object is before the given argument;
          and a value greater than 0 if this
          Timestamp object is after the given argument.
Since:
1.4


"
5,Timestamp,4,int compareTo(Object obj),False,,NULL
5,Timestamp,5,boolean equals(Object obj),True,Tests to see if this Timestamp object is equal to the given object.,"

equals
public boolean equals(Object ts)
Tests to see if this Timestamp object is
 equal to the given object.

 This version of the method equals has been added
 to fix the incorrect
 signature of Timestamp.equals(Timestamp) and to preserve backward
 compatibility with existing class files.

 Note: This method is not symmetric with respect to the
 equals(Object) method in the base class.

Overrides:
equals in class Date
Parameters:
ts - the Object value to compare with
Returns:
true if the given Object is an instance
         of a Timestamp that
         is equal to this Timestamp object;
         false otherwise
See Also:
Date.getTime()


"
5,Timestamp,6,int hashCode(),True,Returns a hash code value for this object.,"

hashCode
public int hashCode()
Returns a hash code value for this object. The result is the
 exclusive OR of the two halves of the primitive long
 value returned by the Date.getTime()
 method. That is, the hash code is the value of the expression:
 
 (int)(this.getTime()^(this.getTime() >>> 32))
 

 The hashCode method uses the underlying java.util.Date
 implementation and therefore does not include nanos in its computation.

Overrides:
hashCode in class Date
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
5,Timestamp,7,String toString(),True,Formats a timestamp in JDBC timestamp escape format.,"

toString
public String toString()
Formats a timestamp in JDBC timestamp escape format.
         yyyy-mm-dd hh:mm:ss.fffffffff,
 where ffffffffff indicates nanoseconds.
 

Overrides:
toString in class Date
Returns:
a String object in
           yyyy-mm-dd hh:mm:ss.fffffffff format
See Also:
Date.toLocaleString(), 
Date.toGMTString()


"
5,Timestamp,8,void setTime(long time),True,"Sets this Timestamp object to represent a point in time that is time milliseconds after January 1, 1970 00:00:00 GMT.","

setTime
public void setTime(long time)
Sets this Timestamp object to represent a point in time that is
 time milliseconds after January 1, 1970 00:00:00 GMT.

Overrides:
setTime in class Date
Parameters:
time - the number of milliseconds.
See Also:
getTime(), 
Timestamp(long time), 
Calendar


"
5,Timestamp,9,long getTime(),True,"Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this Timestamp object.","

getTime
public long getTime()
Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT
 represented by this Timestamp object.

Overrides:
getTime in class Date
Returns:
the number of milliseconds since January 1, 1970, 00:00:00 GMT
          represented by this date.
See Also:
setTime(long)


"
5,Timestamp,10,Timestamp(long date),False,,NULL
6,Types,1,int CHAR,False,,NULL
6,Types,2,int VARCHAR,False,,NULL
6,Types,3,int LONGVARCHAR,False,,NULL
6,Types,4,int NUMERIC,False,,NULL
6,Types,5,int DECIMAL,False,,NULL
6,Types,6,int BIT,False,,NULL
6,Types,7,int TINYINT,False,,NULL
6,Types,8,int SMALLINT,False,,NULL
6,Types,9,int INTEGER,False,,NULL
6,Types,10,int BIGINT,False,,NULL
6,Types,11,int REAL,False,,NULL
6,Types,12,int FLOAT,False,,NULL
6,Types,13,int DOUBLE,False,,NULL
6,Types,14,int BINARY,False,,NULL
6,Types,15,int VARBINARY,False,,NULL
6,Types,16,int LONGVARBINARY,False,,NULL
6,Types,17,int DATE,False,,NULL
6,Types,18,int TIME,False,,NULL
6,Types,19,int TIMESTAMP,False,,NULL
6,Types,20,int CLOB,False,,NULL
6,Types,21,int BLOB,False,,NULL
6,Types,22,int ARRAY,False,,NULL
6,Types,23,int STRUCT,False,,NULL
6,Types,24,int JAVA_OBJECT,False,,NULL
6,Types,25,int DISTINCT,False,,NULL
6,Types,26,int REF,False,,NULL
6,Types,27,int DATALINK,False,,NULL
6,Types,28,int ROWID,False,,NULL
6,Types,29,int NCHAR,False,,NULL
6,Types,30,int NVARCHAR,False,,NULL
6,Types,31,int LONGNVARCHAR,False,,NULL
6,Types,32,int NCLOB,False,,NULL
6,Types,33,int SQLXML,False,,NULL
6,Types,34,int REF_CURSOR,False,,NULL
6,Types,35,int TIME_WITH_TIMEZONE,False,,NULL
6,Types,36,int TIMESTAMP_WITH_TIMEZONE,False,,NULL
