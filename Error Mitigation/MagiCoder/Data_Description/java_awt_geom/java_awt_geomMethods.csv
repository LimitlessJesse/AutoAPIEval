ClassName,Method,Return Type,Description,Full Description
AffineTransform,clone(),Object,Returns a copy of this AffineTransform object.,"

clone
public Object clone()
Returns a copy of this AffineTransform object.

Overrides:
clone in class Object
Returns:
an Object that is a copy of this
 AffineTransform object.
Since:
1.2
See Also:
Cloneable


"
AffineTransform,concatenate(AffineTransform Tx),void,Concatenates an AffineTransform Tx to this AffineTransform Cx in the most commonly useful way to provide a new user space that is mapped to the former user space by Tx.,"

concatenate
public void concatenate(AffineTransform Tx)
Concatenates an AffineTransform Tx to
 this AffineTransform Cx in the most commonly useful
 way to provide a new user space
 that is mapped to the former user space by Tx.
 Cx is updated to perform the combined transformation.
 Transforming a point p by the updated transform Cx' is
 equivalent to first transforming p by Tx and then
 transforming the result by the original transform Cx like this:
 Cx'(p) = Cx(Tx(p))
 In matrix notation, if this transform Cx is
 represented by the matrix [this] and Tx is represented
 by the matrix [Tx] then this method does the following:
 
          [this] = [this] x [Tx]
 

Parameters:
Tx - the AffineTransform object to be
 concatenated with this AffineTransform object.
Since:
1.2
See Also:
preConcatenate(java.awt.geom.AffineTransform)


"
AffineTransform,createInverse(),AffineTransform,Returns an AffineTransform object representing the inverse transformation.,"

createInverse
public AffineTransform createInverse()
                              throws NoninvertibleTransformException
Returns an AffineTransform object representing the
 inverse transformation.
 The inverse transform Tx' of this transform Tx
 maps coordinates transformed by Tx back
 to their original coordinates.
 In other words, Tx'(Tx(p)) = p = Tx(Tx'(p)).
 
 If this transform maps all coordinates onto a point or a line
 then it will not have an inverse, since coordinates that do
 not lie on the destination point or line will not have an inverse
 mapping.
 The getDeterminant method can be used to determine if this
 transform has no inverse, in which case an exception will be
 thrown if the createInverse method is called.

Returns:
a new AffineTransform object representing the
 inverse transformation.
Throws:
NoninvertibleTransformException - if the matrix cannot be inverted.
Since:
1.2
See Also:
getDeterminant()


"
AffineTransform,createTransformedShape(Shape pSrc),Shape,Returns a new Shape object defined by the geometry of the specified Shape after it has been transformed by this transform.,"

createTransformedShape
public Shape createTransformedShape(Shape pSrc)
Returns a new Shape object defined by the geometry of the
 specified Shape after it has been transformed by
 this transform.

Parameters:
pSrc - the specified Shape object to be
 transformed by this transform.
Returns:
a new Shape object that defines the geometry
 of the transformed Shape, or null if pSrc is null.
Since:
1.2


"
AffineTransform,"deltaTransform(double[] srcPts, int srcOff, double[] dstPts, int dstOff, int numPts)",void,Transforms an array of relative distance vectors by this transform.,"

deltaTransform
public void deltaTransform(double[] srcPts,
                           int srcOff,
                           double[] dstPts,
                           int dstOff,
                           int numPts)
Transforms an array of relative distance vectors by this
 transform.
 A relative distance vector is transformed without applying the
 translation components of the affine transformation matrix
 using the following equations:
 
  [  x' ]   [  m00  m01 (m02) ] [  x  ]   [ m00x + m01y ]
  [  y' ] = [  m10  m11 (m12) ] [  y  ] = [ m10x + m11y ]
  [ (1) ]   [  (0)  (0) ( 1 ) ] [ (1) ]   [     (1)     ]
 
 The two coordinate array sections can be exactly the same or
 can be overlapping sections of the same array without affecting the
 validity of the results.
 This method ensures that no source coordinates are
 overwritten by a previous operation before they can be transformed.
 The coordinates are stored in the arrays starting at the indicated
 offset in the order [x0, y0, x1, y1, ..., xn, yn].

Parameters:
srcPts - the array containing the source distance vectors.
 Each vector is stored as a pair of relative x, y coordinates.
dstPts - the array into which the transformed distance vectors
 are returned.  Each vector is stored as a pair of relative
 x, y coordinates.
srcOff - the offset to the first vector to be transformed
 in the source array
dstOff - the offset to the location of the first
 transformed vector that is stored in the destination array
numPts - the number of vector coordinate pairs to be
 transformed
Since:
1.2


"
AffineTransform,"deltaTransform(Point2D ptSrc, Point2D ptDst)",Point2D,Transforms the relative distance vector specified by ptSrc and stores the result in ptDst.,"

deltaTransform
public Point2D deltaTransform(Point2D ptSrc,
                              Point2D ptDst)
Transforms the relative distance vector specified by
 ptSrc and stores the result in ptDst.
 A relative distance vector is transformed without applying the
 translation components of the affine transformation matrix
 using the following equations:
 
  [  x' ]   [  m00  m01 (m02) ] [  x  ]   [ m00x + m01y ]
  [  y' ] = [  m10  m11 (m12) ] [  y  ] = [ m10x + m11y ]
  [ (1) ]   [  (0)  (0) ( 1 ) ] [ (1) ]   [     (1)     ]
 
 If ptDst is null, a new
 Point2D object is allocated and then the result of the
 transform is stored in this object.
 In either case, ptDst, which contains the
 transformed point, is returned for convenience.
 If ptSrc and ptDst are the same object,
 the input point is correctly overwritten with the transformed
 point.

Parameters:
ptSrc - the distance vector to be delta transformed
ptDst - the resulting transformed distance vector
Returns:
ptDst, which contains the result of the
 transformation.
Since:
1.2


"
AffineTransform,equals(Object obj),boolean,Returns true if this AffineTransform represents the same affine coordinate transform as the specified argument.,"

equals
public boolean equals(Object obj)
Returns true if this AffineTransform
 represents the same affine coordinate transform as the specified
 argument.

Overrides:
equals in class Object
Parameters:
obj - the Object to test for equality with this
 AffineTransform
Returns:
true if obj equals this
 AffineTransform object; false otherwise.
Since:
1.2
See Also:
Object.hashCode(), 
HashMap


"
AffineTransform,getDeterminant(),double,Returns the determinant of the matrix representation of the transform.,"

getDeterminant
public double getDeterminant()
Returns the determinant of the matrix representation of the transform.
 The determinant is useful both to determine if the transform can
 be inverted and to get a single value representing the
 combined X and Y scaling of the transform.
 
 If the determinant is non-zero, then this transform is
 invertible and the various methods that depend on the inverse
 transform do not need to throw a
 NoninvertibleTransformException.
 If the determinant is zero then this transform can not be
 inverted since the transform maps all input coordinates onto
 a line or a point.
 If the determinant is near enough to zero then inverse transform
 operations might not carry enough precision to produce meaningful
 results.
 
 If this transform represents a uniform scale, as indicated by
 the getType method then the determinant also
 represents the square of the uniform scale factor by which all of
 the points are expanded from or contracted towards the origin.
 If this transform represents a non-uniform scale or more general
 transform then the determinant is not likely to represent a
 value useful for any purpose other than determining if inverse
 transforms are possible.
 
 Mathematically, the determinant is calculated using the formula:
 
          |  m00  m01  m02  |
          |  m10  m11  m12  |  =  m00 * m11 - m01 * m10
          |   0    0    1   |
 

Returns:
the determinant of the matrix used to transform the
 coordinates.
Since:
1.2
See Also:
getType(), 
createInverse(), 
inverseTransform(java.awt.geom.Point2D, java.awt.geom.Point2D), 
TYPE_UNIFORM_SCALE


"
AffineTransform,getMatrix(double[] flatmatrix),void,Retrieves the 6 specifiable values in the 3x3 affine transformation matrix and places them into an array of double precisions values.,"

getMatrix
public void getMatrix(double[] flatmatrix)
Retrieves the 6 specifiable values in the 3x3 affine transformation
 matrix and places them into an array of double precisions values.
 The values are stored in the array as
 { m00 m10 m01 m11 m02 m12 }.
 An array of 4 doubles can also be specified, in which case only the
 first four elements representing the non-transform
 parts of the array are retrieved and the values are stored into
 the array as { m00 m10 m01 m11 }

Parameters:
flatmatrix - the double array used to store the returned
 values.
Since:
1.2
See Also:
getScaleX(), 
getScaleY(), 
getShearX(), 
getShearY(), 
getTranslateX(), 
getTranslateY()


"
AffineTransform,getQuadrantRotateInstance(int numquadrants),static AffineTransform,Returns a transform that rotates coordinates by the specified number of quadrants.,"

getQuadrantRotateInstance
public static AffineTransform getQuadrantRotateInstance(int numquadrants)
Returns a transform that rotates coordinates by the specified
 number of quadrants.
 This operation is equivalent to calling:
 
     AffineTransform.getRotateInstance(numquadrants * Math.PI / 2.0);
 
 Rotating by a positive number of quadrants rotates points on
 the positive X axis toward the positive Y axis.

Parameters:
numquadrants - the number of 90 degree arcs to rotate by
Returns:
an AffineTransform object that rotates
  coordinates by the specified number of quadrants.
Since:
1.6


"
AffineTransform,"getQuadrantRotateInstance(int numquadrants, double anchorx, double anchory)",static AffineTransform,Returns a transform that rotates coordinates by the specified number of quadrants around the specified anchor point.,"

getQuadrantRotateInstance
public static AffineTransform getQuadrantRotateInstance(int numquadrants,
                                                        double anchorx,
                                                        double anchory)
Returns a transform that rotates coordinates by the specified
 number of quadrants around the specified anchor point.
 This operation is equivalent to calling:
 
     AffineTransform.getRotateInstance(numquadrants * Math.PI / 2.0,
                                       anchorx, anchory);
 
 Rotating by a positive number of quadrants rotates points on
 the positive X axis toward the positive Y axis.

Parameters:
numquadrants - the number of 90 degree arcs to rotate by
anchorx - the X coordinate of the rotation anchor point
anchory - the Y coordinate of the rotation anchor point
Returns:
an AffineTransform object that rotates
  coordinates by the specified number of quadrants around the
  specified anchor point.
Since:
1.6


"
AffineTransform,getRotateInstance(double theta),static AffineTransform,Returns a transform representing a rotation transformation.,"

getRotateInstance
public static AffineTransform getRotateInstance(double theta)
Returns a transform representing a rotation transformation.
 The matrix representing the returned transform is:
 
          [   cos(theta)    -sin(theta)    0   ]
          [   sin(theta)     cos(theta)    0   ]
          [       0              0         1   ]
 
 Rotating by a positive angle theta rotates points on the positive
 X axis toward the positive Y axis.
 Note also the discussion of
 Handling 90-Degree Rotations
 above.

Parameters:
theta - the angle of rotation measured in radians
Returns:
an AffineTransform object that is a rotation
  transformation, created with the specified angle of rotation.
Since:
1.2


"
AffineTransform,"getRotateInstance(double vecx, double vecy)",static AffineTransform,Returns a transform that rotates coordinates according to a rotation vector.,"

getRotateInstance
public static AffineTransform getRotateInstance(double vecx,
                                                double vecy)
Returns a transform that rotates coordinates according to
 a rotation vector.
 All coordinates rotate about the origin by the same amount.
 The amount of rotation is such that coordinates along the former
 positive X axis will subsequently align with the vector pointing
 from the origin to the specified vector coordinates.
 If both vecx and vecy are 0.0,
 an identity transform is returned.
 This operation is equivalent to calling:
 
     AffineTransform.getRotateInstance(Math.atan2(vecy, vecx));
 

Parameters:
vecx - the X coordinate of the rotation vector
vecy - the Y coordinate of the rotation vector
Returns:
an AffineTransform object that rotates
  coordinates according to the specified rotation vector.
Since:
1.6


"
AffineTransform,"getRotateInstance(double theta, double anchorx, double anchory)",static AffineTransform,Returns a transform that rotates coordinates around an anchor point.,"

getRotateInstance
public static AffineTransform getRotateInstance(double theta,
                                                double anchorx,
                                                double anchory)
Returns a transform that rotates coordinates around an anchor point.
 This operation is equivalent to translating the coordinates so
 that the anchor point is at the origin (S1), then rotating them
 about the new origin (S2), and finally translating so that the
 intermediate origin is restored to the coordinates of the original
 anchor point (S3).
 
 This operation is equivalent to the following sequence of calls:
 
     AffineTransform Tx = new AffineTransform();
     Tx.translate(anchorx, anchory);    // S3: final translation
     Tx.rotate(theta);                  // S2: rotate around anchor
     Tx.translate(-anchorx, -anchory);  // S1: translate anchor to origin
 
 The matrix representing the returned transform is:
 
          [   cos(theta)    -sin(theta)    x-x*cos+y*sin  ]
          [   sin(theta)     cos(theta)    y-x*sin-y*cos  ]
          [       0              0               1        ]
 
 Rotating by a positive angle theta rotates points on the positive
 X axis toward the positive Y axis.
 Note also the discussion of
 Handling 90-Degree Rotations
 above.

Parameters:
theta - the angle of rotation measured in radians
anchorx - the X coordinate of the rotation anchor point
anchory - the Y coordinate of the rotation anchor point
Returns:
an AffineTransform object that rotates
  coordinates around the specified point by the specified angle of
  rotation.
Since:
1.2


"
AffineTransform,"getRotateInstance(double vecx, double vecy, double anchorx, double anchory)",static AffineTransform,Returns a transform that rotates coordinates around an anchor point according to a rotation vector.,"

getRotateInstance
public static AffineTransform getRotateInstance(double vecx,
                                                double vecy,
                                                double anchorx,
                                                double anchory)
Returns a transform that rotates coordinates around an anchor
 point according to a rotation vector.
 All coordinates rotate about the specified anchor coordinates
 by the same amount.
 The amount of rotation is such that coordinates along the former
 positive X axis will subsequently align with the vector pointing
 from the origin to the specified vector coordinates.
 If both vecx and vecy are 0.0,
 an identity transform is returned.
 This operation is equivalent to calling:
 
     AffineTransform.getRotateInstance(Math.atan2(vecy, vecx),
                                       anchorx, anchory);
 

Parameters:
vecx - the X coordinate of the rotation vector
vecy - the Y coordinate of the rotation vector
anchorx - the X coordinate of the rotation anchor point
anchory - the Y coordinate of the rotation anchor point
Returns:
an AffineTransform object that rotates
  coordinates around the specified point according to the
  specified rotation vector.
Since:
1.6


"
AffineTransform,"getScaleInstance(double sx, double sy)",static AffineTransform,Returns a transform representing a scaling transformation.,"

getScaleInstance
public static AffineTransform getScaleInstance(double sx,
                                               double sy)
Returns a transform representing a scaling transformation.
 The matrix representing the returned transform is:
 
          [   sx   0    0   ]
          [   0    sy   0   ]
          [   0    0    1   ]
 

Parameters:
sx - the factor by which coordinates are scaled along the
 X axis direction
sy - the factor by which coordinates are scaled along the
 Y axis direction
Returns:
an AffineTransform object that scales
  coordinates by the specified factors.
Since:
1.2


"
AffineTransform,getScaleX(),double,Returns the X coordinate scaling element (m00) of the 3x3 affine transformation matrix.,"

getScaleX
public double getScaleX()
Returns the X coordinate scaling element (m00) of the 3x3
 affine transformation matrix.

Returns:
a double value that is the X coordinate of the scaling
  element of the affine transformation matrix.
Since:
1.2
See Also:
getMatrix(double[])


"
AffineTransform,getScaleY(),double,Returns the Y coordinate scaling element (m11) of the 3x3 affine transformation matrix.,"

getScaleY
public double getScaleY()
Returns the Y coordinate scaling element (m11) of the 3x3
 affine transformation matrix.

Returns:
a double value that is the Y coordinate of the scaling
  element of the affine transformation matrix.
Since:
1.2
See Also:
getMatrix(double[])


"
AffineTransform,"getShearInstance(double shx, double shy)",static AffineTransform,Returns a transform representing a shearing transformation.,"

getShearInstance
public static AffineTransform getShearInstance(double shx,
                                               double shy)
Returns a transform representing a shearing transformation.
 The matrix representing the returned transform is:
 
          [   1   shx   0   ]
          [  shy   1    0   ]
          [   0    0    1   ]
 

Parameters:
shx - the multiplier by which coordinates are shifted in the
 direction of the positive X axis as a factor of their Y coordinate
shy - the multiplier by which coordinates are shifted in the
 direction of the positive Y axis as a factor of their X coordinate
Returns:
an AffineTransform object that shears
  coordinates by the specified multipliers.
Since:
1.2


"
AffineTransform,getShearX(),double,Returns the X coordinate shearing element (m01) of the 3x3 affine transformation matrix.,"

getShearX
public double getShearX()
Returns the X coordinate shearing element (m01) of the 3x3
 affine transformation matrix.

Returns:
a double value that is the X coordinate of the shearing
  element of the affine transformation matrix.
Since:
1.2
See Also:
getMatrix(double[])


"
AffineTransform,getShearY(),double,Returns the Y coordinate shearing element (m10) of the 3x3 affine transformation matrix.,"

getShearY
public double getShearY()
Returns the Y coordinate shearing element (m10) of the 3x3
 affine transformation matrix.

Returns:
a double value that is the Y coordinate of the shearing
  element of the affine transformation matrix.
Since:
1.2
See Also:
getMatrix(double[])


"
AffineTransform,"getTranslateInstance(double tx, double ty)",static AffineTransform,Returns a transform representing a translation transformation.,"

getTranslateInstance
public static AffineTransform getTranslateInstance(double tx,
                                                   double ty)
Returns a transform representing a translation transformation.
 The matrix representing the returned transform is:
 
          [   1    0    tx  ]
          [   0    1    ty  ]
          [   0    0    1   ]
 

Parameters:
tx - the distance by which coordinates are translated in the
 X axis direction
ty - the distance by which coordinates are translated in the
 Y axis direction
Returns:
an AffineTransform object that represents a
  translation transformation, created with the specified vector.
Since:
1.2


"
AffineTransform,getTranslateX(),double,Returns the X coordinate of the translation element (m02) of the 3x3 affine transformation matrix.,"

getTranslateX
public double getTranslateX()
Returns the X coordinate of the translation element (m02) of the
 3x3 affine transformation matrix.

Returns:
a double value that is the X coordinate of the translation
  element of the affine transformation matrix.
Since:
1.2
See Also:
getMatrix(double[])


"
AffineTransform,getTranslateY(),double,Returns the Y coordinate of the translation element (m12) of the 3x3 affine transformation matrix.,"

getTranslateY
public double getTranslateY()
Returns the Y coordinate of the translation element (m12) of the
 3x3 affine transformation matrix.

Returns:
a double value that is the Y coordinate of the translation
  element of the affine transformation matrix.
Since:
1.2
See Also:
getMatrix(double[])


"
AffineTransform,getType(),int,Retrieves the flag bits describing the conversion properties of this transform.,"

getType
public int getType()
Retrieves the flag bits describing the conversion properties of
 this transform.
 The return value is either one of the constants TYPE_IDENTITY
 or TYPE_GENERAL_TRANSFORM, or a combination of the
 appropriate flag bits.
 A valid combination of flag bits is an exclusive OR operation
 that can combine
 the TYPE_TRANSLATION flag bit
 in addition to either of the
 TYPE_UNIFORM_SCALE or TYPE_GENERAL_SCALE flag bits
 as well as either of the
 TYPE_QUADRANT_ROTATION or TYPE_GENERAL_ROTATION flag bits.

Returns:
the OR combination of any of the indicated flags that
 apply to this transform
Since:
1.2
See Also:
TYPE_IDENTITY, 
TYPE_TRANSLATION, 
TYPE_UNIFORM_SCALE, 
TYPE_GENERAL_SCALE, 
TYPE_QUADRANT_ROTATION, 
TYPE_GENERAL_ROTATION, 
TYPE_GENERAL_TRANSFORM


"
AffineTransform,hashCode(),int,Returns the hashcode for this transform.,"

hashCode
public int hashCode()
Returns the hashcode for this transform.

Overrides:
hashCode in class Object
Returns:
a hash code for this transform.
Since:
1.2
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
AffineTransform,"inverseTransform(double[] srcPts, int srcOff, double[] dstPts, int dstOff, int numPts)",void,Inverse transforms an array of double precision coordinates by this transform.,"

inverseTransform
public void inverseTransform(double[] srcPts,
                             int srcOff,
                             double[] dstPts,
                             int dstOff,
                             int numPts)
                      throws NoninvertibleTransformException
Inverse transforms an array of double precision coordinates by
 this transform.
 The two coordinate array sections can be exactly the same or
 can be overlapping sections of the same array without affecting the
 validity of the results.
 This method ensures that no source coordinates are
 overwritten by a previous operation before they can be transformed.
 The coordinates are stored in the arrays starting at the specified
 offset in the order [x0, y0, x1, y1, ..., xn, yn].

Parameters:
srcPts - the array containing the source point coordinates.
 Each point is stored as a pair of x, y coordinates.
dstPts - the array into which the transformed point
 coordinates are returned.  Each point is stored as a pair of
 x, y coordinates.
srcOff - the offset to the first point to be transformed
 in the source array
dstOff - the offset to the location of the first
 transformed point that is stored in the destination array
numPts - the number of point objects to be transformed
Throws:
NoninvertibleTransformException - if the matrix cannot be
                                         inverted.
Since:
1.2


"
AffineTransform,"inverseTransform(Point2D ptSrc, Point2D ptDst)",Point2D,Inverse transforms the specified ptSrc and stores the result in ptDst.,"

inverseTransform
public Point2D inverseTransform(Point2D ptSrc,
                                Point2D ptDst)
                         throws NoninvertibleTransformException
Inverse transforms the specified ptSrc and stores the
 result in ptDst.
 If ptDst is null, a new
 Point2D object is allocated and then the result of the
 transform is stored in this object.
 In either case, ptDst, which contains the transformed
 point, is returned for convenience.
 If ptSrc and ptDst are the same
 object, the input point is correctly overwritten with the
 transformed point.

Parameters:
ptSrc - the point to be inverse transformed
ptDst - the resulting transformed point
Returns:
ptDst, which contains the result of the
 inverse transform.
Throws:
NoninvertibleTransformException - if the matrix cannot be
                                         inverted.
Since:
1.2


"
AffineTransform,invert(),void,Sets this transform to the inverse of itself.,"

invert
public void invert()
            throws NoninvertibleTransformException
Sets this transform to the inverse of itself.
 The inverse transform Tx' of this transform Tx
 maps coordinates transformed by Tx back
 to their original coordinates.
 In other words, Tx'(Tx(p)) = p = Tx(Tx'(p)).
 
 If this transform maps all coordinates onto a point or a line
 then it will not have an inverse, since coordinates that do
 not lie on the destination point or line will not have an inverse
 mapping.
 The getDeterminant method can be used to determine if this
 transform has no inverse, in which case an exception will be
 thrown if the invert method is called.

Throws:
NoninvertibleTransformException - if the matrix cannot be inverted.
Since:
1.6
See Also:
getDeterminant()


"
AffineTransform,isIdentity(),boolean,Returns true if this AffineTransform is an identity transform.,"

isIdentity
public boolean isIdentity()
Returns true if this AffineTransform is
 an identity transform.

Returns:
true if this AffineTransform is
 an identity transform; false otherwise.
Since:
1.2


"
AffineTransform,preConcatenate(AffineTransform Tx),void,Concatenates an AffineTransform Tx to this AffineTransform Cx in a less commonly used way such that Tx modifies the coordinate transformation relative to the absolute pixel space rather than relative to the existing user space.,"

preConcatenate
public void preConcatenate(AffineTransform Tx)
Concatenates an AffineTransform Tx to
 this AffineTransform Cx
 in a less commonly used way such that Tx modifies the
 coordinate transformation relative to the absolute pixel
 space rather than relative to the existing user space.
 Cx is updated to perform the combined transformation.
 Transforming a point p by the updated transform Cx' is
 equivalent to first transforming p by the original transform
 Cx and then transforming the result by
 Tx like this:
 Cx'(p) = Tx(Cx(p))
 In matrix notation, if this transform Cx
 is represented by the matrix [this] and Tx is
 represented by the matrix [Tx] then this method does the
 following:
 
          [this] = [Tx] x [this]
 

Parameters:
Tx - the AffineTransform object to be
 concatenated with this AffineTransform object.
Since:
1.2
See Also:
concatenate(java.awt.geom.AffineTransform)


"
AffineTransform,quadrantRotate(int numquadrants),void,Concatenates this transform with a transform that rotates coordinates by the specified number of quadrants.,"

quadrantRotate
public void quadrantRotate(int numquadrants)
Concatenates this transform with a transform that rotates
 coordinates by the specified number of quadrants.
 This is equivalent to calling:
 
     rotate(numquadrants * Math.PI / 2.0);
 
 Rotating by a positive number of quadrants rotates points on
 the positive X axis toward the positive Y axis.

Parameters:
numquadrants - the number of 90 degree arcs to rotate by
Since:
1.6


"
AffineTransform,"quadrantRotate(int numquadrants, double anchorx, double anchory)",void,Concatenates this transform with a transform that rotates coordinates by the specified number of quadrants around the specified anchor point.,"

quadrantRotate
public void quadrantRotate(int numquadrants,
                           double anchorx,
                           double anchory)
Concatenates this transform with a transform that rotates
 coordinates by the specified number of quadrants around
 the specified anchor point.
 This method is equivalent to calling:
 
     rotate(numquadrants * Math.PI / 2.0, anchorx, anchory);
 
 Rotating by a positive number of quadrants rotates points on
 the positive X axis toward the positive Y axis.

Parameters:
numquadrants - the number of 90 degree arcs to rotate by
anchorx - the X coordinate of the rotation anchor point
anchory - the Y coordinate of the rotation anchor point
Since:
1.6


"
AffineTransform,rotate(double theta),void,Concatenates this transform with a rotation transformation.,"

rotate
public void rotate(double theta)
Concatenates this transform with a rotation transformation.
 This is equivalent to calling concatenate(R), where R is an
 AffineTransform represented by the following matrix:
 
          [   cos(theta)    -sin(theta)    0   ]
          [   sin(theta)     cos(theta)    0   ]
          [       0              0         1   ]
 
 Rotating by a positive angle theta rotates points on the positive
 X axis toward the positive Y axis.
 Note also the discussion of
 Handling 90-Degree Rotations
 above.

Parameters:
theta - the angle of rotation measured in radians
Since:
1.2


"
AffineTransform,"rotate(double vecx, double vecy)",void,Concatenates this transform with a transform that rotates coordinates according to a rotation vector.,"

rotate
public void rotate(double vecx,
                   double vecy)
Concatenates this transform with a transform that rotates
 coordinates according to a rotation vector.
 All coordinates rotate about the origin by the same amount.
 The amount of rotation is such that coordinates along the former
 positive X axis will subsequently align with the vector pointing
 from the origin to the specified vector coordinates.
 If both vecx and vecy are 0.0,
 no additional rotation is added to this transform.
 This operation is equivalent to calling:
 
          rotate(Math.atan2(vecy, vecx));
 

Parameters:
vecx - the X coordinate of the rotation vector
vecy - the Y coordinate of the rotation vector
Since:
1.6


"
AffineTransform,"rotate(double theta, double anchorx, double anchory)",void,Concatenates this transform with a transform that rotates coordinates around an anchor point.,"

rotate
public void rotate(double theta,
                   double anchorx,
                   double anchory)
Concatenates this transform with a transform that rotates
 coordinates around an anchor point.
 This operation is equivalent to translating the coordinates so
 that the anchor point is at the origin (S1), then rotating them
 about the new origin (S2), and finally translating so that the
 intermediate origin is restored to the coordinates of the original
 anchor point (S3).
 
 This operation is equivalent to the following sequence of calls:
 
     translate(anchorx, anchory);      // S3: final translation
     rotate(theta);                    // S2: rotate around anchor
     translate(-anchorx, -anchory);    // S1: translate anchor to origin
 
 Rotating by a positive angle theta rotates points on the positive
 X axis toward the positive Y axis.
 Note also the discussion of
 Handling 90-Degree Rotations
 above.

Parameters:
theta - the angle of rotation measured in radians
anchorx - the X coordinate of the rotation anchor point
anchory - the Y coordinate of the rotation anchor point
Since:
1.2


"
AffineTransform,"rotate(double vecx, double vecy, double anchorx, double anchory)",void,Concatenates this transform with a transform that rotates coordinates around an anchor point according to a rotation vector.,"

rotate
public void rotate(double vecx,
                   double vecy,
                   double anchorx,
                   double anchory)
Concatenates this transform with a transform that rotates
 coordinates around an anchor point according to a rotation
 vector.
 All coordinates rotate about the specified anchor coordinates
 by the same amount.
 The amount of rotation is such that coordinates along the former
 positive X axis will subsequently align with the vector pointing
 from the origin to the specified vector coordinates.
 If both vecx and vecy are 0.0,
 the transform is not modified in any way.
 This method is equivalent to calling:
 
     rotate(Math.atan2(vecy, vecx), anchorx, anchory);
 

Parameters:
vecx - the X coordinate of the rotation vector
vecy - the Y coordinate of the rotation vector
anchorx - the X coordinate of the rotation anchor point
anchory - the Y coordinate of the rotation anchor point
Since:
1.6


"
AffineTransform,"scale(double sx, double sy)",void,Concatenates this transform with a scaling transformation.,"

scale
public void scale(double sx,
                  double sy)
Concatenates this transform with a scaling transformation.
 This is equivalent to calling concatenate(S), where S is an
 AffineTransform represented by the following matrix:
 
          [   sx   0    0   ]
          [   0    sy   0   ]
          [   0    0    1   ]
 

Parameters:
sx - the factor by which coordinates are scaled along the
 X axis direction
sy - the factor by which coordinates are scaled along the
 Y axis direction
Since:
1.2


"
AffineTransform,setToIdentity(),void,Resets this transform to the Identity transform.,"

setToIdentity
public void setToIdentity()
Resets this transform to the Identity transform.

Since:
1.2


"
AffineTransform,setToQuadrantRotation(int numquadrants),void,Sets this transform to a rotation transformation that rotates coordinates by the specified number of quadrants.,"

setToQuadrantRotation
public void setToQuadrantRotation(int numquadrants)
Sets this transform to a rotation transformation that rotates
 coordinates by the specified number of quadrants.
 This operation is equivalent to calling:
 
     setToRotation(numquadrants * Math.PI / 2.0);
 
 Rotating by a positive number of quadrants rotates points on
 the positive X axis toward the positive Y axis.

Parameters:
numquadrants - the number of 90 degree arcs to rotate by
Since:
1.6


"
AffineTransform,"setToQuadrantRotation(int numquadrants, double anchorx, double anchory)",void,Sets this transform to a translated rotation transformation that rotates coordinates by the specified number of quadrants around the specified anchor point.,"

setToQuadrantRotation
public void setToQuadrantRotation(int numquadrants,
                                  double anchorx,
                                  double anchory)
Sets this transform to a translated rotation transformation
 that rotates coordinates by the specified number of quadrants
 around the specified anchor point.
 This operation is equivalent to calling:
 
     setToRotation(numquadrants * Math.PI / 2.0, anchorx, anchory);
 
 Rotating by a positive number of quadrants rotates points on
 the positive X axis toward the positive Y axis.

Parameters:
numquadrants - the number of 90 degree arcs to rotate by
anchorx - the X coordinate of the rotation anchor point
anchory - the Y coordinate of the rotation anchor point
Since:
1.6


"
AffineTransform,setToRotation(double theta),void,Sets this transform to a rotation transformation.,"

setToRotation
public void setToRotation(double theta)
Sets this transform to a rotation transformation.
 The matrix representing this transform becomes:
 
          [   cos(theta)    -sin(theta)    0   ]
          [   sin(theta)     cos(theta)    0   ]
          [       0              0         1   ]
 
 Rotating by a positive angle theta rotates points on the positive
 X axis toward the positive Y axis.
 Note also the discussion of
 Handling 90-Degree Rotations
 above.

Parameters:
theta - the angle of rotation measured in radians
Since:
1.2


"
AffineTransform,"setToRotation(double vecx, double vecy)",void,Sets this transform to a rotation transformation that rotates coordinates according to a rotation vector.,"

setToRotation
public void setToRotation(double vecx,
                          double vecy)
Sets this transform to a rotation transformation that rotates
 coordinates according to a rotation vector.
 All coordinates rotate about the origin by the same amount.
 The amount of rotation is such that coordinates along the former
 positive X axis will subsequently align with the vector pointing
 from the origin to the specified vector coordinates.
 If both vecx and vecy are 0.0,
 the transform is set to an identity transform.
 This operation is equivalent to calling:
 
     setToRotation(Math.atan2(vecy, vecx));
 

Parameters:
vecx - the X coordinate of the rotation vector
vecy - the Y coordinate of the rotation vector
Since:
1.6


"
AffineTransform,"setToRotation(double theta, double anchorx, double anchory)",void,Sets this transform to a translated rotation transformation.,"

setToRotation
public void setToRotation(double theta,
                          double anchorx,
                          double anchory)
Sets this transform to a translated rotation transformation.
 This operation is equivalent to translating the coordinates so
 that the anchor point is at the origin (S1), then rotating them
 about the new origin (S2), and finally translating so that the
 intermediate origin is restored to the coordinates of the original
 anchor point (S3).
 
 This operation is equivalent to the following sequence of calls:
 
     setToTranslation(anchorx, anchory); // S3: final translation
     rotate(theta);                      // S2: rotate around anchor
     translate(-anchorx, -anchory);      // S1: translate anchor to origin
 
 The matrix representing this transform becomes:
 
          [   cos(theta)    -sin(theta)    x-x*cos+y*sin  ]
          [   sin(theta)     cos(theta)    y-x*sin-y*cos  ]
          [       0              0               1        ]
 
 Rotating by a positive angle theta rotates points on the positive
 X axis toward the positive Y axis.
 Note also the discussion of
 Handling 90-Degree Rotations
 above.

Parameters:
theta - the angle of rotation measured in radians
anchorx - the X coordinate of the rotation anchor point
anchory - the Y coordinate of the rotation anchor point
Since:
1.2


"
AffineTransform,"setToRotation(double vecx, double vecy, double anchorx, double anchory)",void,Sets this transform to a rotation transformation that rotates coordinates around an anchor point according to a rotation vector.,"

setToRotation
public void setToRotation(double vecx,
                          double vecy,
                          double anchorx,
                          double anchory)
Sets this transform to a rotation transformation that rotates
 coordinates around an anchor point according to a rotation
 vector.
 All coordinates rotate about the specified anchor coordinates
 by the same amount.
 The amount of rotation is such that coordinates along the former
 positive X axis will subsequently align with the vector pointing
 from the origin to the specified vector coordinates.
 If both vecx and vecy are 0.0,
 the transform is set to an identity transform.
 This operation is equivalent to calling:
 
     setToTranslation(Math.atan2(vecy, vecx), anchorx, anchory);
 

Parameters:
vecx - the X coordinate of the rotation vector
vecy - the Y coordinate of the rotation vector
anchorx - the X coordinate of the rotation anchor point
anchory - the Y coordinate of the rotation anchor point
Since:
1.6


"
AffineTransform,"setToScale(double sx, double sy)",void,Sets this transform to a scaling transformation.,"

setToScale
public void setToScale(double sx,
                       double sy)
Sets this transform to a scaling transformation.
 The matrix representing this transform becomes:
 
          [   sx   0    0   ]
          [   0    sy   0   ]
          [   0    0    1   ]
 

Parameters:
sx - the factor by which coordinates are scaled along the
 X axis direction
sy - the factor by which coordinates are scaled along the
 Y axis direction
Since:
1.2


"
AffineTransform,"setToShear(double shx, double shy)",void,Sets this transform to a shearing transformation.,"

setToShear
public void setToShear(double shx,
                       double shy)
Sets this transform to a shearing transformation.
 The matrix representing this transform becomes:
 
          [   1   shx   0   ]
          [  shy   1    0   ]
          [   0    0    1   ]
 

Parameters:
shx - the multiplier by which coordinates are shifted in the
 direction of the positive X axis as a factor of their Y coordinate
shy - the multiplier by which coordinates are shifted in the
 direction of the positive Y axis as a factor of their X coordinate
Since:
1.2


"
AffineTransform,"setToTranslation(double tx, double ty)",void,Sets this transform to a translation transformation.,"

setToTranslation
public void setToTranslation(double tx,
                             double ty)
Sets this transform to a translation transformation.
 The matrix representing this transform becomes:
 
          [   1    0    tx  ]
          [   0    1    ty  ]
          [   0    0    1   ]
 

Parameters:
tx - the distance by which coordinates are translated in the
 X axis direction
ty - the distance by which coordinates are translated in the
 Y axis direction
Since:
1.2


"
AffineTransform,setTransform(AffineTransform Tx),void,Sets this transform to a copy of the transform in the specified AffineTransform object.,"

setTransform
public void setTransform(AffineTransform Tx)
Sets this transform to a copy of the transform in the specified
 AffineTransform object.

Parameters:
Tx - the AffineTransform object from which to
 copy the transform
Since:
1.2


"
AffineTransform,"setTransform(double m00, double m10, double m01, double m11, double m02, double m12)",void,Sets this transform to the matrix specified by the 6 double precision values.,"

setTransform
public void setTransform(double m00,
                         double m10,
                         double m01,
                         double m11,
                         double m02,
                         double m12)
Sets this transform to the matrix specified by the 6
 double precision values.

Parameters:
m00 - the X coordinate scaling element of the 3x3 matrix
m10 - the Y coordinate shearing element of the 3x3 matrix
m01 - the X coordinate shearing element of the 3x3 matrix
m11 - the Y coordinate scaling element of the 3x3 matrix
m02 - the X coordinate translation element of the 3x3 matrix
m12 - the Y coordinate translation element of the 3x3 matrix
Since:
1.2


"
AffineTransform,"shear(double shx, double shy)",void,Concatenates this transform with a shearing transformation.,"

shear
public void shear(double shx,
                  double shy)
Concatenates this transform with a shearing transformation.
 This is equivalent to calling concatenate(SH), where SH is an
 AffineTransform represented by the following matrix:
 
          [   1   shx   0   ]
          [  shy   1    0   ]
          [   0    0    1   ]
 

Parameters:
shx - the multiplier by which coordinates are shifted in the
 direction of the positive X axis as a factor of their Y coordinate
shy - the multiplier by which coordinates are shifted in the
 direction of the positive Y axis as a factor of their X coordinate
Since:
1.2


"
AffineTransform,toString(),String,Returns a String that represents the value of this Object.,"

toString
public String toString()
Returns a String that represents the value of this
 Object.

Overrides:
toString in class Object
Returns:
a String representing the value of this
 Object.
Since:
1.2


"
AffineTransform,"transform(double[] srcPts, int srcOff, double[] dstPts, int dstOff, int numPts)",void,Transforms an array of double precision coordinates by this transform.,"

transform
public void transform(double[] srcPts,
                      int srcOff,
                      double[] dstPts,
                      int dstOff,
                      int numPts)
Transforms an array of double precision coordinates by this transform.
 The two coordinate array sections can be exactly the same or
 can be overlapping sections of the same array without affecting the
 validity of the results.
 This method ensures that no source coordinates are
 overwritten by a previous operation before they can be transformed.
 The coordinates are stored in the arrays starting at the indicated
 offset in the order [x0, y0, x1, y1, ..., xn, yn].

Parameters:
srcPts - the array containing the source point coordinates.
 Each point is stored as a pair of x, y coordinates.
dstPts - the array into which the transformed point
 coordinates are returned.  Each point is stored as a pair of
 x, y coordinates.
srcOff - the offset to the first point to be transformed
 in the source array
dstOff - the offset to the location of the first
 transformed point that is stored in the destination array
numPts - the number of point objects to be transformed
Since:
1.2


"
AffineTransform,"transform(double[] srcPts, int srcOff, float[] dstPts, int dstOff, int numPts)",void,Transforms an array of double precision coordinates by this transform and stores the results into an array of floats.,"

transform
public void transform(double[] srcPts,
                      int srcOff,
                      float[] dstPts,
                      int dstOff,
                      int numPts)
Transforms an array of double precision coordinates by this transform
 and stores the results into an array of floats.
 The coordinates are stored in the arrays starting at the specified
 offset in the order [x0, y0, x1, y1, ..., xn, yn].

Parameters:
srcPts - the array containing the source point coordinates.
 Each point is stored as a pair of x, y coordinates.
dstPts - the array into which the transformed point
 coordinates are returned.  Each point is stored as a pair of
 x, y coordinates.
srcOff - the offset to the first point to be transformed
 in the source array
dstOff - the offset to the location of the first
 transformed point that is stored in the destination array
numPts - the number of point objects to be transformed
Since:
1.2


"
AffineTransform,"transform(float[] srcPts, int srcOff, double[] dstPts, int dstOff, int numPts)",void,Transforms an array of floating point coordinates by this transform and stores the results into an array of doubles.,"

transform
public void transform(float[] srcPts,
                      int srcOff,
                      double[] dstPts,
                      int dstOff,
                      int numPts)
Transforms an array of floating point coordinates by this transform
 and stores the results into an array of doubles.
 The coordinates are stored in the arrays starting at the specified
 offset in the order [x0, y0, x1, y1, ..., xn, yn].

Parameters:
srcPts - the array containing the source point coordinates.
 Each point is stored as a pair of x, y coordinates.
dstPts - the array into which the transformed point coordinates
 are returned.  Each point is stored as a pair of x, y
 coordinates.
srcOff - the offset to the first point to be transformed
 in the source array
dstOff - the offset to the location of the first
 transformed point that is stored in the destination array
numPts - the number of points to be transformed
Since:
1.2


"
AffineTransform,"transform(float[] srcPts, int srcOff, float[] dstPts, int dstOff, int numPts)",void,Transforms an array of floating point coordinates by this transform.,"

transform
public void transform(float[] srcPts,
                      int srcOff,
                      float[] dstPts,
                      int dstOff,
                      int numPts)
Transforms an array of floating point coordinates by this transform.
 The two coordinate array sections can be exactly the same or
 can be overlapping sections of the same array without affecting the
 validity of the results.
 This method ensures that no source coordinates are overwritten by a
 previous operation before they can be transformed.
 The coordinates are stored in the arrays starting at the specified
 offset in the order [x0, y0, x1, y1, ..., xn, yn].

Parameters:
srcPts - the array containing the source point coordinates.
 Each point is stored as a pair of x, y coordinates.
dstPts - the array into which the transformed point coordinates
 are returned.  Each point is stored as a pair of x, y
 coordinates.
srcOff - the offset to the first point to be transformed
 in the source array
dstOff - the offset to the location of the first
 transformed point that is stored in the destination array
numPts - the number of points to be transformed
Since:
1.2


"
AffineTransform,"transform(Point2D[] ptSrc, int srcOff, Point2D[] ptDst, int dstOff, int numPts)",void,Transforms an array of point objects by this transform.,"

transform
public void transform(Point2D[] ptSrc,
                      int srcOff,
                      Point2D[] ptDst,
                      int dstOff,
                      int numPts)
Transforms an array of point objects by this transform.
 If any element of the ptDst array is
 null, a new Point2D object is allocated
 and stored into that element before storing the results of the
 transformation.
 
 Note that this method does not take any precautions to
 avoid problems caused by storing results into Point2D
 objects that will be used as the source for calculations
 further down the source array.
 This method does guarantee that if a specified Point2D
 object is both the source and destination for the same single point
 transform operation then the results will not be stored until
 the calculations are complete to avoid storing the results on
 top of the operands.
 If, however, the destination Point2D object for one
 operation is the same object as the source Point2D
 object for another operation further down the source array then
 the original coordinates in that point are overwritten before
 they can be converted.

Parameters:
ptSrc - the array containing the source point objects
ptDst - the array into which the transform point objects are
 returned
srcOff - the offset to the first point object to be
 transformed in the source array
dstOff - the offset to the location of the first
 transformed point object that is stored in the destination array
numPts - the number of point objects to be transformed
Since:
1.2


"
AffineTransform,"transform(Point2D ptSrc, Point2D ptDst)",Point2D,Transforms the specified ptSrc and stores the result in ptDst.,"

transform
public Point2D transform(Point2D ptSrc,
                         Point2D ptDst)
Transforms the specified ptSrc and stores the result
 in ptDst.
 If ptDst is null, a new Point2D
 object is allocated and then the result of the transformation is
 stored in this object.
 In either case, ptDst, which contains the
 transformed point, is returned for convenience.
 If ptSrc and ptDst are the same
 object, the input point is correctly overwritten with
 the transformed point.

Parameters:
ptSrc - the specified Point2D to be transformed
ptDst - the specified Point2D that stores the
 result of transforming ptSrc
Returns:
the ptDst after transforming
 ptSrc and storing the result in ptDst.
Since:
1.2


"
AffineTransform,"translate(double tx, double ty)",void,Concatenates this transform with a translation transformation.,"

translate
public void translate(double tx,
                      double ty)
Concatenates this transform with a translation transformation.
 This is equivalent to calling concatenate(T), where T is an
 AffineTransform represented by the following matrix:
 
          [   1    0    tx  ]
          [   0    1    ty  ]
          [   0    0    1   ]
 

Parameters:
tx - the distance by which coordinates are translated in the
 X axis direction
ty - the distance by which coordinates are translated in the
 Y axis direction
Since:
1.2


"
Arc2D,"contains(double x, double y)",boolean,Determines whether or not the specified point is inside the boundary of the arc.,"

contains
public boolean contains(double x,
                        double y)
Determines whether or not the specified point is inside the boundary
 of the arc.

Parameters:
x - The X coordinate of the point to test.
y - The Y coordinate of the point to test.
Returns:
true if the point lies within the bound of
 the arc, false if the point lies outside of the
 arc's bounds.
Since:
1.2


"
Arc2D,"contains(double x, double y, double w, double h)",boolean,Determines whether or not the interior of the arc entirely contains the specified rectangle.,"

contains
public boolean contains(double x,
                        double y,
                        double w,
                        double h)
Determines whether or not the interior of the arc entirely contains
 the specified rectangle.

Parameters:
x - The X coordinate of the rectangle's upper-left corner.
y - The Y coordinate of the rectangle's upper-left corner.
w - The width of the rectangle.
h - The height of the rectangle.
Returns:
true if the arc contains the rectangle,
 false if the arc doesn't contain the rectangle.
Since:
1.2
See Also:
Area, 
Shape.intersects(double, double, double, double)


"
Arc2D,contains(Rectangle2D r),boolean,Determines whether or not the interior of the arc entirely contains the specified rectangle.,"

contains
public boolean contains(Rectangle2D r)
Determines whether or not the interior of the arc entirely contains
 the specified rectangle.

Specified by:
contains in interface Shape
Overrides:
contains in class RectangularShape
Parameters:
r - The Rectangle2D to test.
Returns:
true if the arc contains the rectangle,
 false if the arc doesn't contain the rectangle.
Since:
1.2
See Also:
Shape.contains(double, double, double, double)


"
Arc2D,containsAngle(double angle),boolean,Determines whether or not the specified angle is within the angular extents of the arc.,"

containsAngle
public boolean containsAngle(double angle)
Determines whether or not the specified angle is within the
 angular extents of the arc.

Parameters:
angle - The angle to test.
Returns:
true if the arc contains the angle,
 false if the arc doesn't contain the angle.
Since:
1.2


"
Arc2D,equals(Object obj),boolean,Determines whether or not the specified Object is equal to this Arc2D.,"

equals
public boolean equals(Object obj)
Determines whether or not the specified Object is
 equal to this Arc2D.  The specified
 Object is equal to this Arc2D
 if it is an instance of Arc2D and if its
 location, size, arc extents and type are the same as this
 Arc2D.

Overrides:
equals in class Object
Parameters:
obj - an Object to be compared with this
             Arc2D.
Returns:
true if obj is an instance
          of Arc2D and has the same values;
          false otherwise.
Since:
1.6
See Also:
Object.hashCode(), 
HashMap


"
Arc2D,getAngleExtent(),abstract double,Returns the angular extent of the arc.,"

getAngleExtent
public abstract double getAngleExtent()
Returns the angular extent of the arc.

Returns:
A double value that represents the angular extent
 of the arc in degrees.
Since:
1.2
See Also:
setAngleExtent(double)


"
Arc2D,getAngleStart(),abstract double,Returns the starting angle of the arc.,"

getAngleStart
public abstract double getAngleStart()
Returns the starting angle of the arc.

Returns:
A double value that represents the starting angle
 of the arc in degrees.
Since:
1.2
See Also:
setAngleStart(double)


"
Arc2D,getArcType(),int,"Returns the arc closure type of the arc: OPEN, CHORD, or PIE.","

getArcType
public int getArcType()
Returns the arc closure type of the arc: OPEN,
 CHORD, or PIE.

Returns:
One of the integer constant closure types defined
 in this class.
Since:
1.2
See Also:
setArcType(int)


"
Arc2D,getBounds2D(),Rectangle2D,Returns the high-precision framing rectangle of the arc.,"

getBounds2D
public Rectangle2D getBounds2D()
Returns the high-precision framing rectangle of the arc.  The framing
 rectangle contains only the part of this Arc2D that is
 in between the starting and ending angles and contains the pie
 wedge, if this Arc2D has a PIE closure type.
 
 This method differs from the
 getBounds in that the
 getBounds method only returns the bounds of the
 enclosing ellipse of this Arc2D without considering
 the starting and ending angles of this Arc2D.

Returns:
the Rectangle2D that represents the arc's
 framing rectangle.
Since:
1.2
See Also:
Shape.getBounds()


"
Arc2D,getEndPoint(),Point2D,Returns the ending point of the arc.,"

getEndPoint
public Point2D getEndPoint()
Returns the ending point of the arc.  This point is the
 intersection of the ray from the center defined by the
 starting angle plus the angular extent of the arc and the
 elliptical boundary of the arc.

Returns:
A Point2D object representing the
 x,y coordinates  of the ending point of the arc.
Since:
1.2


"
Arc2D,getPathIterator(AffineTransform at),PathIterator,Returns an iteration object that defines the boundary of the arc.,"

getPathIterator
public PathIterator getPathIterator(AffineTransform at)
Returns an iteration object that defines the boundary of the
 arc.
 This iterator is multithread safe.
 Arc2D guarantees that
 modifications to the geometry of the arc
 do not affect any iterations of that geometry that
 are already in process.

Parameters:
at - an optional AffineTransform to be applied
 to the coordinates as they are returned in the iteration, or null
 if the untransformed coordinates are desired.
Returns:
A PathIterator that defines the arc's boundary.
Since:
1.2


"
Arc2D,getStartPoint(),Point2D,Returns the starting point of the arc.,"

getStartPoint
public Point2D getStartPoint()
Returns the starting point of the arc.  This point is the
 intersection of the ray from the center defined by the
 starting angle and the elliptical boundary of the arc.

Returns:
A Point2D object representing the
 x,y coordinates of the starting point of the arc.
Since:
1.2


"
Arc2D,hashCode(),int,Returns the hashcode for this Arc2D.,"

hashCode
public int hashCode()
Returns the hashcode for this Arc2D.

Overrides:
hashCode in class Object
Returns:
the hashcode for this Arc2D.
Since:
1.6
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Arc2D,"intersects(double x, double y, double w, double h)",boolean,Determines whether or not the interior of the arc intersects the interior of the specified rectangle.,"

intersects
public boolean intersects(double x,
                          double y,
                          double w,
                          double h)
Determines whether or not the interior of the arc intersects
 the interior of the specified rectangle.

Parameters:
x - The X coordinate of the rectangle's upper-left corner.
y - The Y coordinate of the rectangle's upper-left corner.
w - The width of the rectangle.
h - The height of the rectangle.
Returns:
true if the arc intersects the rectangle,
 false if the arc doesn't intersect the rectangle.
Since:
1.2
See Also:
Area


"
Arc2D,"makeBounds(double x, double y, double w, double h)",protected abstract Rectangle2D,Constructs a Rectangle2D of the appropriate precision to hold the parameters calculated to be the framing rectangle of this arc.,"

makeBounds
protected abstract Rectangle2D makeBounds(double x,
                                          double y,
                                          double w,
                                          double h)
Constructs a Rectangle2D of the appropriate precision
 to hold the parameters calculated to be the framing rectangle
 of this arc.

Parameters:
x - The X coordinate of the upper-left corner of the
 framing rectangle.
y - The Y coordinate of the upper-left corner of the
 framing rectangle.
w - The width of the framing rectangle.
h - The height of the framing rectangle.
Returns:
a Rectangle2D that is the framing rectangle
     of this arc.
Since:
1.2


"
Arc2D,setAngleExtent(double angExt),abstract void,Sets the angular extent of this arc to the specified double value.,"

setAngleExtent
public abstract void setAngleExtent(double angExt)
Sets the angular extent of this arc to the specified double
 value.

Parameters:
angExt - The angular extent of the arc in degrees.
Since:
1.2
See Also:
getAngleExtent()


"
Arc2D,"setAngles(double x1, double y1, double x2, double y2)",void,Sets the starting angle and angular extent of this arc using two sets of coordinates.,"

setAngles
public void setAngles(double x1,
                      double y1,
                      double x2,
                      double y2)
Sets the starting angle and angular extent of this arc using two
 sets of coordinates. The first set of coordinates is used to
 determine the angle of the starting point relative to the arc's
 center. The second set of coordinates is used to determine the
 angle of the end point relative to the arc's center.
 The arc will always be non-empty and extend counterclockwise
 from the first point around to the second point.

Parameters:
x1 - The X coordinate of the arc's starting point.
y1 - The Y coordinate of the arc's starting point.
x2 - The X coordinate of the arc's ending point.
y2 - The Y coordinate of the arc's ending point.
Since:
1.2


"
Arc2D,"setAngles(Point2D p1, Point2D p2)",void,Sets the starting angle and angular extent of this arc using two points.,"

setAngles
public void setAngles(Point2D p1,
                      Point2D p2)
Sets the starting angle and angular extent of this arc using
 two points. The first point is used to determine the angle of
 the starting point relative to the arc's center.
 The second point is used to determine the angle of the end point
 relative to the arc's center.
 The arc will always be non-empty and extend counterclockwise
 from the first point around to the second point.

Parameters:
p1 - The Point2D that defines the arc's
 starting point.
p2 - The Point2D that defines the arc's
 ending point.
Since:
1.2


"
Arc2D,setAngleStart(double angSt),abstract void,Sets the starting angle of this arc to the specified double value.,"

setAngleStart
public abstract void setAngleStart(double angSt)
Sets the starting angle of this arc to the specified double
 value.

Parameters:
angSt - The starting angle of the arc in degrees.
Since:
1.2
See Also:
getAngleStart()


"
Arc2D,setAngleStart(Point2D p),void,Sets the starting angle of this arc to the angle that the specified point defines relative to the center of this arc.,"

setAngleStart
public void setAngleStart(Point2D p)
Sets the starting angle of this arc to the angle that the
 specified point defines relative to the center of this arc.
 The angular extent of the arc will remain the same.

Parameters:
p - The Point2D that defines the starting angle.
Since:
1.2
See Also:
getAngleStart()


"
Arc2D,setArc(Arc2D a),void,Sets this arc to be the same as the specified arc.,"

setArc
public void setArc(Arc2D a)
Sets this arc to be the same as the specified arc.

Parameters:
a - The Arc2D to use to set the arc's values.
Since:
1.2


"
Arc2D,"setArc(double x, double y, double w, double h, double angSt, double angExt, int closure)",abstract void,"Sets the location, size, angular extents, and closure type of this arc to the specified double values.","

setArc
public abstract void setArc(double x,
                            double y,
                            double w,
                            double h,
                            double angSt,
                            double angExt,
                            int closure)
Sets the location, size, angular extents, and closure type of
 this arc to the specified double values.

Parameters:
x - The X coordinate of the upper-left corner of the arc.
y - The Y coordinate of the upper-left corner of the arc.
w - The overall width of the full ellipse of which
          this arc is a partial section.
h - The overall height of the full ellipse of which
          this arc is a partial section.
angSt - The starting angle of the arc in degrees.
angExt - The angular extent of the arc in degrees.
closure - The closure type for the arc:
 OPEN, CHORD, or PIE.
Since:
1.2


"
Arc2D,"setArc(Point2D loc, Dimension2D size, double angSt, double angExt, int closure)",void,"Sets the location, size, angular extents, and closure type of this arc to the specified values.","

setArc
public void setArc(Point2D loc,
                   Dimension2D size,
                   double angSt,
                   double angExt,
                   int closure)
Sets the location, size, angular extents, and closure type of
 this arc to the specified values.

Parameters:
loc - The Point2D representing the coordinates of
 the upper-left corner of the arc.
size - The Dimension2D representing the width
 and height of the full ellipse of which this arc is
 a partial section.
angSt - The starting angle of the arc in degrees.
angExt - The angular extent of the arc in degrees.
closure - The closure type for the arc:
 OPEN, CHORD, or PIE.
Since:
1.2


"
Arc2D,"setArc(Rectangle2D rect, double angSt, double angExt, int closure)",void,"Sets the location, size, angular extents, and closure type of this arc to the specified values.","

setArc
public void setArc(Rectangle2D rect,
                   double angSt,
                   double angExt,
                   int closure)
Sets the location, size, angular extents, and closure type of
 this arc to the specified values.

Parameters:
rect - The framing rectangle that defines the
 outer boundary of the full ellipse of which this arc is a
 partial section.
angSt - The starting angle of the arc in degrees.
angExt - The angular extent of the arc in degrees.
closure - The closure type for the arc:
 OPEN, CHORD, or PIE.
Since:
1.2


"
Arc2D,"setArcByCenter(double x, double y, double radius, double angSt, double angExt, int closure)",void,"Sets the position, bounds, angular extents, and closure type of this arc to the specified values.","

setArcByCenter
public void setArcByCenter(double x,
                           double y,
                           double radius,
                           double angSt,
                           double angExt,
                           int closure)
Sets the position, bounds, angular extents, and closure type of
 this arc to the specified values. The arc is defined by a center
 point and a radius rather than a framing rectangle for the full ellipse.

Parameters:
x - The X coordinate of the center of the arc.
y - The Y coordinate of the center of the arc.
radius - The radius of the arc.
angSt - The starting angle of the arc in degrees.
angExt - The angular extent of the arc in degrees.
closure - The closure type for the arc:
 OPEN, CHORD, or PIE.
Since:
1.2


"
Arc2D,"setArcByTangent(Point2D p1, Point2D p2, Point2D p3, double radius)",void,"Sets the position, bounds, and angular extents of this arc to the specified value.","

setArcByTangent
public void setArcByTangent(Point2D p1,
                            Point2D p2,
                            Point2D p3,
                            double radius)
Sets the position, bounds, and angular extents of this arc to the
 specified value. The starting angle of the arc is tangent to the
 line specified by points (p1, p2), the ending angle is tangent to
 the line specified by points (p2, p3), and the arc has the
 specified radius.

Parameters:
p1 - The first point that defines the arc. The starting
 angle of the arc is tangent to the line specified by points (p1, p2).
p2 - The second point that defines the arc. The starting
 angle of the arc is tangent to the line specified by points (p1, p2).
 The ending angle of the arc is tangent to the line specified by
 points (p2, p3).
p3 - The third point that defines the arc. The ending angle
 of the arc is tangent to the line specified by points (p2, p3).
radius - The radius of the arc.
Since:
1.2


"
Arc2D,setArcType(int type),void,"Sets the closure type of this arc to the specified value: OPEN, CHORD, or PIE.","

setArcType
public void setArcType(int type)
Sets the closure type of this arc to the specified value:
 OPEN, CHORD, or PIE.

Parameters:
type - The integer constant that represents the closure
 type of this arc: OPEN, CHORD, or
 PIE.
Throws:
IllegalArgumentException - if type is not
 0, 1, or 2.+
Since:
1.2
See Also:
getArcType()


"
Arc2D,"setFrame(double x, double y, double w, double h)",void,Sets the location and size of the framing rectangle of this Shape to the specified rectangular values.,"

setFrame
public void setFrame(double x,
                     double y,
                     double w,
                     double h)
Sets the location and size of the framing rectangle of this
 Shape to the specified rectangular values.
 Note that the arc
 partially inscribes
 the framing rectangle of this RectangularShape.

Specified by:
setFrame in class RectangularShape
Parameters:
x - the X coordinate of the upper-left corner of the
          specified rectangular shape
y - the Y coordinate of the upper-left corner of the
          specified rectangular shape
w - the width of the specified rectangular shape
h - the height of the specified rectangular shape
Since:
1.2
See Also:
RectangularShape.getFrame()


"
Arc2D.Double,getAngleExtent(),double,Returns the angular extent of the arc.,"

getAngleExtent
public double getAngleExtent()
Returns the angular extent of the arc.

Specified by:
getAngleExtent in class Arc2D
Returns:
A double value that represents the angular extent
 of the arc in degrees.
Since:
1.2
See Also:
Arc2D.setAngleExtent(double)


"
Arc2D.Double,getAngleStart(),double,Returns the starting angle of the arc.,"

getAngleStart
public double getAngleStart()
Returns the starting angle of the arc.

Specified by:
getAngleStart in class Arc2D
Returns:
A double value that represents the starting angle
 of the arc in degrees.
Since:
1.2
See Also:
Arc2D.setAngleStart(double)


"
Arc2D.Double,getHeight(),double,Returns the height of the framing rectangle in double precision.,"

getHeight
public double getHeight()
Returns the height of the framing rectangle
 in double precision.
 Note that the arc
 partially inscribes
 the framing rectangle of this RectangularShape.

Specified by:
getHeight in class RectangularShape
Returns:
the height of the framing rectangle.
Since:
1.2


"
Arc2D.Double,getWidth(),double,Returns the width of the framing rectangle in double precision.,"

getWidth
public double getWidth()
Returns the width of the framing rectangle in
 double precision.
 Note that the arc
 partially inscribes
 the framing rectangle of this RectangularShape.

Specified by:
getWidth in class RectangularShape
Returns:
the width of the framing rectangle.
Since:
1.2


"
Arc2D.Double,getX(),double,Returns the X coordinate of the upper-left corner of the framing rectangle in double precision.,"

getX
public double getX()
Returns the X coordinate of the upper-left corner of
 the framing rectangle in double precision.
 Note that the arc
 partially inscribes
 the framing rectangle of this RectangularShape.

Specified by:
getX in class RectangularShape
Returns:
the X coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
Arc2D.Double,getY(),double,Returns the Y coordinate of the upper-left corner of the framing rectangle in double precision.,"

getY
public double getY()
Returns the Y coordinate of the upper-left corner of
 the framing rectangle in double precision.
 Note that the arc
 partially inscribes
 the framing rectangle of this RectangularShape.

Specified by:
getY in class RectangularShape
Returns:
the Y coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
Arc2D.Double,isEmpty(),boolean,Determines whether the RectangularShape is empty.,"

isEmpty
public boolean isEmpty()
Determines whether the RectangularShape is empty.
 When the RectangularShape is empty, it encloses no
 area.

Specified by:
isEmpty in class RectangularShape
Returns:
true if the RectangularShape is empty;
          false otherwise.
Since:
1.2


"
Arc2D.Double,"makeBounds(double x, double y, double w, double h)",protected Rectangle2D,Constructs a Rectangle2D of the appropriate precision to hold the parameters calculated to be the framing rectangle of this arc.,"

makeBounds
protected Rectangle2D makeBounds(double x,
                                 double y,
                                 double w,
                                 double h)
Constructs a Rectangle2D of the appropriate precision
 to hold the parameters calculated to be the framing rectangle
 of this arc.

Specified by:
makeBounds in class Arc2D
Parameters:
x - The X coordinate of the upper-left corner of the
 framing rectangle.
y - The Y coordinate of the upper-left corner of the
 framing rectangle.
w - The width of the framing rectangle.
h - The height of the framing rectangle.
Returns:
a Rectangle2D that is the framing rectangle
     of this arc.
Since:
1.2


"
Arc2D.Double,setAngleExtent(double angExt),void,Sets the angular extent of this arc to the specified double value.,"

setAngleExtent
public void setAngleExtent(double angExt)
Sets the angular extent of this arc to the specified double
 value.

Specified by:
setAngleExtent in class Arc2D
Parameters:
angExt - The angular extent of the arc in degrees.
Since:
1.2
See Also:
Arc2D.getAngleExtent()


"
Arc2D.Double,setAngleStart(double angSt),void,Sets the starting angle of this arc to the specified double value.,"

setAngleStart
public void setAngleStart(double angSt)
Sets the starting angle of this arc to the specified double
 value.

Specified by:
setAngleStart in class Arc2D
Parameters:
angSt - The starting angle of the arc in degrees.
Since:
1.2
See Also:
Arc2D.getAngleStart()


"
Arc2D.Double,"setArc(double x, double y, double w, double h, double angSt, double angExt, int closure)",void,"Sets the location, size, angular extents, and closure type of this arc to the specified double values.","

setArc
public void setArc(double x,
                   double y,
                   double w,
                   double h,
                   double angSt,
                   double angExt,
                   int closure)
Sets the location, size, angular extents, and closure type of
 this arc to the specified double values.

Specified by:
setArc in class Arc2D
Parameters:
x - The X coordinate of the upper-left corner of the arc.
y - The Y coordinate of the upper-left corner of the arc.
w - The overall width of the full ellipse of which
          this arc is a partial section.
h - The overall height of the full ellipse of which
          this arc is a partial section.
angSt - The starting angle of the arc in degrees.
angExt - The angular extent of the arc in degrees.
closure - The closure type for the arc:
 Arc2D.OPEN, Arc2D.CHORD, or Arc2D.PIE.
Since:
1.2


"
Arc2D.Float,getAngleExtent(),double,Returns the angular extent of the arc.,"

getAngleExtent
public double getAngleExtent()
Returns the angular extent of the arc.

Specified by:
getAngleExtent in class Arc2D
Returns:
A double value that represents the angular extent
 of the arc in degrees.
Since:
1.2
See Also:
Arc2D.setAngleExtent(double)


"
Arc2D.Float,getAngleStart(),double,Returns the starting angle of the arc.,"

getAngleStart
public double getAngleStart()
Returns the starting angle of the arc.

Specified by:
getAngleStart in class Arc2D
Returns:
A double value that represents the starting angle
 of the arc in degrees.
Since:
1.2
See Also:
Arc2D.setAngleStart(double)


"
Arc2D.Float,getHeight(),double,Returns the height of the framing rectangle in double precision.,"

getHeight
public double getHeight()
Returns the height of the framing rectangle
 in double precision.
 Note that the arc
 partially inscribes
 the framing rectangle of this RectangularShape.

Specified by:
getHeight in class RectangularShape
Returns:
the height of the framing rectangle.
Since:
1.2


"
Arc2D.Float,getWidth(),double,Returns the width of the framing rectangle in double precision.,"

getWidth
public double getWidth()
Returns the width of the framing rectangle in
 double precision.
 Note that the arc
 partially inscribes
 the framing rectangle of this RectangularShape.

Specified by:
getWidth in class RectangularShape
Returns:
the width of the framing rectangle.
Since:
1.2


"
Arc2D.Float,getX(),double,Returns the X coordinate of the upper-left corner of the framing rectangle in double precision.,"

getX
public double getX()
Returns the X coordinate of the upper-left corner of
 the framing rectangle in double precision.
 Note that the arc
 partially inscribes
 the framing rectangle of this RectangularShape.

Specified by:
getX in class RectangularShape
Returns:
the X coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
Arc2D.Float,getY(),double,Returns the Y coordinate of the upper-left corner of the framing rectangle in double precision.,"

getY
public double getY()
Returns the Y coordinate of the upper-left corner of
 the framing rectangle in double precision.
 Note that the arc
 partially inscribes
 the framing rectangle of this RectangularShape.

Specified by:
getY in class RectangularShape
Returns:
the Y coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
Arc2D.Float,isEmpty(),boolean,Determines whether the RectangularShape is empty.,"

isEmpty
public boolean isEmpty()
Determines whether the RectangularShape is empty.
 When the RectangularShape is empty, it encloses no
 area.

Specified by:
isEmpty in class RectangularShape
Returns:
true if the RectangularShape is empty;
          false otherwise.
Since:
1.2


"
Arc2D.Float,"makeBounds(double x, double y, double w, double h)",protected Rectangle2D,Constructs a Rectangle2D of the appropriate precision to hold the parameters calculated to be the framing rectangle of this arc.,"

makeBounds
protected Rectangle2D makeBounds(double x,
                                 double y,
                                 double w,
                                 double h)
Constructs a Rectangle2D of the appropriate precision
 to hold the parameters calculated to be the framing rectangle
 of this arc.

Specified by:
makeBounds in class Arc2D
Parameters:
x - The X coordinate of the upper-left corner of the
 framing rectangle.
y - The Y coordinate of the upper-left corner of the
 framing rectangle.
w - The width of the framing rectangle.
h - The height of the framing rectangle.
Returns:
a Rectangle2D that is the framing rectangle
     of this arc.
Since:
1.2


"
Arc2D.Float,setAngleExtent(double angExt),void,Sets the angular extent of this arc to the specified double value.,"

setAngleExtent
public void setAngleExtent(double angExt)
Sets the angular extent of this arc to the specified double
 value.

Specified by:
setAngleExtent in class Arc2D
Parameters:
angExt - The angular extent of the arc in degrees.
Since:
1.2
See Also:
Arc2D.getAngleExtent()


"
Arc2D.Float,setAngleStart(double angSt),void,Sets the starting angle of this arc to the specified double value.,"

setAngleStart
public void setAngleStart(double angSt)
Sets the starting angle of this arc to the specified double
 value.

Specified by:
setAngleStart in class Arc2D
Parameters:
angSt - The starting angle of the arc in degrees.
Since:
1.2
See Also:
Arc2D.getAngleStart()


"
Arc2D.Float,"setArc(double x, double y, double w, double h, double angSt, double angExt, int closure)",void,"Sets the location, size, angular extents, and closure type of this arc to the specified double values.","

setArc
public void setArc(double x,
                   double y,
                   double w,
                   double h,
                   double angSt,
                   double angExt,
                   int closure)
Sets the location, size, angular extents, and closure type of
 this arc to the specified double values.

Specified by:
setArc in class Arc2D
Parameters:
x - The X coordinate of the upper-left corner of the arc.
y - The Y coordinate of the upper-left corner of the arc.
w - The overall width of the full ellipse of which
          this arc is a partial section.
h - The overall height of the full ellipse of which
          this arc is a partial section.
angSt - The starting angle of the arc in degrees.
angExt - The angular extent of the arc in degrees.
closure - The closure type for the arc:
 Arc2D.OPEN, Arc2D.CHORD, or Arc2D.PIE.
Since:
1.2


"
Area,add(Area rhs),void,Adds the shape of the specified Area to the shape of this Area.,"

add
public void add(Area rhs)
Adds the shape of the specified Area to the
 shape of this Area.
 The resulting shape of this Area will include
 the union of both shapes, or all areas that were contained
 in either this or the specified Area.
 
     // Example:
     Area a1 = new Area([triangle 0,0 => 8,0 => 0,8]);
     Area a2 = new Area([triangle 0,0 => 8,0 => 8,8]);
     a1.add(a2);

        a1(before)     +         a2         =     a1(after)

     ################     ################     ################
     ##############         ##############     ################
     ############             ############     ################
     ##########                 ##########     ################
     ########                     ########     ################
     ######                         ######     ######    ######
     ####                             ####     ####        ####
     ##                                 ##     ##            ##
 

Parameters:
rhs - the Area to be added to the
          current shape
Throws:
NullPointerException - if rhs is null
Since:
1.2


"
Area,clone(),Object,Returns an exact copy of this Area object.,"

clone
public Object clone()
Returns an exact copy of this Area object.

Overrides:
clone in class Object
Returns:
Created clone object
Since:
1.2
See Also:
Cloneable


"
Area,"contains(double x, double y)",boolean,"Tests if the specified coordinates are inside the boundary of the Shape, as described by the definition of insideness.","

contains
public boolean contains(double x,
                        double y)
Tests if the specified coordinates are inside the boundary of the
 Shape, as described by the
 
 definition of insideness.

Specified by:
contains in interface Shape
Parameters:
x - the specified X coordinate to be tested
y - the specified Y coordinate to be tested
Returns:
true if the specified coordinates are inside
         the Shape boundary; false
         otherwise.
Since:
1.2


"
Area,"contains(double x, double y, double w, double h)",boolean,Tests if the interior of the Shape entirely contains the specified rectangular area.,"

contains
public boolean contains(double x,
                        double y,
                        double w,
                        double h)
Tests if the interior of the Shape entirely contains
 the specified rectangular area.  All coordinates that lie inside
 the rectangular area must lie within the Shape for the
 entire rectangular area to be considered contained within the
 Shape.
 
 The Shape.contains() method allows a Shape
 implementation to conservatively return false when:
 

 the intersect method returns true and
 
 the calculations to determine whether or not the
 Shape entirely contains the rectangular area are
 prohibitively expensive.
 
 This means that for some Shapes this method might
 return false even though the Shape contains
 the rectangular area.
 The Area class performs
 more accurate geometric computations than most
 Shape objects and therefore can be used if a more precise
 answer is required.

Specified by:
contains in interface Shape
Parameters:
x - the X coordinate of the upper-left corner
          of the specified rectangular area
y - the Y coordinate of the upper-left corner
          of the specified rectangular area
w - the width of the specified rectangular area
h - the height of the specified rectangular area
Returns:
true if the interior of the Shape
          entirely contains the specified rectangular area;
          false otherwise or, if the Shape
          contains the rectangular area and the
          intersects method returns true
          and the containment calculations would be too expensive to
          perform.
Since:
1.2
See Also:
Area, 
Shape.intersects(double, double, double, double)


"
Area,contains(Point2D p),boolean,"Tests if a specified Point2D is inside the boundary of the Shape, as described by the definition of insideness.","

contains
public boolean contains(Point2D p)
Tests if a specified Point2D is inside the boundary
 of the Shape, as described by the
 
 definition of insideness.

Specified by:
contains in interface Shape
Parameters:
p - the specified Point2D to be tested
Returns:
true if the specified Point2D is
          inside the boundary of the Shape;
          false otherwise.
Since:
1.2


"
Area,contains(Rectangle2D r),boolean,Tests if the interior of the Shape entirely contains the specified Rectangle2D.,"

contains
public boolean contains(Rectangle2D r)
Tests if the interior of the Shape entirely contains the
 specified Rectangle2D.
 The Shape.contains() method allows a Shape
 implementation to conservatively return false when:
 

 the intersect method returns true and
 
 the calculations to determine whether or not the
 Shape entirely contains the Rectangle2D
 are prohibitively expensive.
 
 This means that for some Shapes this method might
 return false even though the Shape contains
 the Rectangle2D.
 The Area class performs
 more accurate geometric computations than most
 Shape objects and therefore can be used if a more precise
 answer is required.

Specified by:
contains in interface Shape
Parameters:
r - The specified Rectangle2D
Returns:
true if the interior of the Shape
          entirely contains the Rectangle2D;
          false otherwise or, if the Shape
          contains the Rectangle2D and the
          intersects method returns true
          and the containment calculations would be too expensive to
          perform.
Since:
1.2
See Also:
Shape.contains(double, double, double, double)


"
Area,createTransformedArea(AffineTransform t),Area,Creates a new Area object that contains the same geometry as this Area transformed by the specified AffineTransform.,"

createTransformedArea
public Area createTransformedArea(AffineTransform t)
Creates a new Area object that contains the same
 geometry as this Area transformed by the specified
 AffineTransform.  This Area object
 is unchanged.

Parameters:
t - the specified AffineTransform used to transform
           the new Area
Returns:
a new Area object representing the transformed
           geometry.
Throws:
NullPointerException - if t is null
Since:
1.2


"
Area,equals(Area other),boolean,Tests whether the geometries of the two Area objects are equal.,"

equals
public boolean equals(Area other)
Tests whether the geometries of the two Area objects
 are equal.
 This method will return false if the argument is null.

Parameters:
other - the Area to be compared to this
          Area
Returns:
true if the two geometries are equal;
          false otherwise.
Since:
1.2


"
Area,exclusiveOr(Area rhs),void,"Sets the shape of this Area to be the combined area of its current shape and the shape of the specified Area, minus their intersection.","

exclusiveOr
public void exclusiveOr(Area rhs)
Sets the shape of this Area to be the combined area
 of its current shape and the shape of the specified Area,
 minus their intersection.
 The resulting shape of this Area will include
 only areas that were contained in either this Area
 or in the specified Area, but not in both.
 
     // Example:
     Area a1 = new Area([triangle 0,0 => 8,0 => 0,8]);
     Area a2 = new Area([triangle 0,0 => 8,0 => 8,8]);
     a1.exclusiveOr(a2);

        a1(before)    xor        a2         =     a1(after)

     ################     ################
     ##############         ##############     ##            ##
     ############             ############     ####        ####
     ##########                 ##########     ######    ######
     ########                     ########     ################
     ######                         ######     ######    ######
     ####                             ####     ####        ####
     ##                                 ##     ##            ##
 

Parameters:
rhs - the Area to be exclusive ORed with this
          Area.
Throws:
NullPointerException - if rhs is null
Since:
1.2


"
Area,getBounds(),Rectangle,Returns a bounding Rectangle that completely encloses this Area.,"

getBounds
public Rectangle getBounds()
Returns a bounding Rectangle that completely encloses
 this Area.
 
 The Area class will attempt to return the tightest bounding
 box possible for the Shape.  The bounding box will not be
 padded to include the control points of curves in the outline
 of the Shape, but should tightly fit the actual geometry of
 the outline itself.  Since the returned object represents
 the bounding box with integers, the bounding box can only be
 as tight as the nearest integer coordinates that encompass
 the geometry of the Shape.

Specified by:
getBounds in interface Shape
Returns:
the bounding Rectangle for the
 Area.
Since:
1.2
See Also:
Shape.getBounds2D()


"
Area,getBounds2D(),Rectangle2D,Returns a high precision bounding Rectangle2D that completely encloses this Area.,"

getBounds2D
public Rectangle2D getBounds2D()
Returns a high precision bounding Rectangle2D that
 completely encloses this Area.
 
 The Area class will attempt to return the tightest bounding
 box possible for the Shape.  The bounding box will not be
 padded to include the control points of curves in the outline
 of the Shape, but should tightly fit the actual geometry of
 the outline itself.

Specified by:
getBounds2D in interface Shape
Returns:
the bounding Rectangle2D for the
 Area.
Since:
1.2
See Also:
Shape.getBounds()


"
Area,getPathIterator(AffineTransform at),PathIterator,Creates a PathIterator for the outline of this Area object.,"

getPathIterator
public PathIterator getPathIterator(AffineTransform at)
Creates a PathIterator for the outline of this
 Area object.  This Area object is unchanged.

Specified by:
getPathIterator in interface Shape
Parameters:
at - an optional AffineTransform to be applied to
 the coordinates as they are returned in the iteration, or
 null if untransformed coordinates are desired
Returns:
the PathIterator object that returns the
          geometry of the outline of this Area, one
          segment at a time.
Since:
1.2


"
Area,"getPathIterator(AffineTransform at, double flatness)",PathIterator,Creates a PathIterator for the flattened outline of this Area object.,"

getPathIterator
public PathIterator getPathIterator(AffineTransform at,
                                    double flatness)
Creates a PathIterator for the flattened outline of
 this Area object.  Only uncurved path segments
 represented by the SEG_MOVETO, SEG_LINETO, and SEG_CLOSE point
 types are returned by the iterator.  This Area
 object is unchanged.

Specified by:
getPathIterator in interface Shape
Parameters:
at - an optional AffineTransform to be
 applied to the coordinates as they are returned in the
 iteration, or null if untransformed coordinates
 are desired
flatness - the maximum amount that the control points
 for a given curve can vary from colinear before a subdivided
 curve is replaced by a straight line connecting the end points
Returns:
the PathIterator object that returns the
 geometry of the outline of this Area, one segment
 at a time.
Since:
1.2


"
Area,intersect(Area rhs),void,Sets the shape of this Area to the intersection of its current shape and the shape of the specified Area.,"

intersect
public void intersect(Area rhs)
Sets the shape of this Area to the intersection of
 its current shape and the shape of the specified Area.
 The resulting shape of this Area will include
 only areas that were contained in both this Area
 and also in the specified Area.
 
     // Example:
     Area a1 = new Area([triangle 0,0 => 8,0 => 0,8]);
     Area a2 = new Area([triangle 0,0 => 8,0 => 8,8]);
     a1.intersect(a2);

      a1(before)   intersect     a2         =     a1(after)

     ################     ################     ################
     ##############         ##############       ############
     ############             ############         ########
     ##########                 ##########           ####
     ########                     ########
     ######                         ######
     ####                             ####
     ##                                 ##
 

Parameters:
rhs - the Area to be intersected with this
          Area
Throws:
NullPointerException - if rhs is null
Since:
1.2


"
Area,"intersects(double x, double y, double w, double h)",boolean,Tests if the interior of the Shape intersects the interior of a specified rectangular area.,"

intersects
public boolean intersects(double x,
                          double y,
                          double w,
                          double h)
Tests if the interior of the Shape intersects the
 interior of a specified rectangular area.
 The rectangular area is considered to intersect the Shape
 if any point is contained in both the interior of the
 Shape and the specified rectangular area.
 
 The Shape.intersects() method allows a Shape
 implementation to conservatively return true when:
 

 there is a high probability that the rectangular area and the
 Shape intersect, but
 
 the calculations to accurately determine this intersection
 are prohibitively expensive.
 
 This means that for some Shapes this method might
 return true even though the rectangular area does not
 intersect the Shape.
 The Area class performs
 more accurate computations of geometric intersection than most
 Shape objects and therefore can be used if a more precise
 answer is required.

Specified by:
intersects in interface Shape
Parameters:
x - the X coordinate of the upper-left corner
          of the specified rectangular area
y - the Y coordinate of the upper-left corner
          of the specified rectangular area
w - the width of the specified rectangular area
h - the height of the specified rectangular area
Returns:
true if the interior of the Shape and
          the interior of the rectangular area intersect, or are
          both highly likely to intersect and intersection calculations
          would be too expensive to perform; false otherwise.
Since:
1.2
See Also:
Area


"
Area,intersects(Rectangle2D r),boolean,Tests if the interior of the Shape intersects the interior of a specified Rectangle2D.,"

intersects
public boolean intersects(Rectangle2D r)
Tests if the interior of the Shape intersects the
 interior of a specified Rectangle2D.
 The Shape.intersects() method allows a Shape
 implementation to conservatively return true when:
 

 there is a high probability that the Rectangle2D and the
 Shape intersect, but
 
 the calculations to accurately determine this intersection
 are prohibitively expensive.
 
 This means that for some Shapes this method might
 return true even though the Rectangle2D does not
 intersect the Shape.
 The Area class performs
 more accurate computations of geometric intersection than most
 Shape objects and therefore can be used if a more precise
 answer is required.

Specified by:
intersects in interface Shape
Parameters:
r - the specified Rectangle2D
Returns:
true if the interior of the Shape and
          the interior of the specified Rectangle2D
          intersect, or are both highly likely to intersect and intersection
          calculations would be too expensive to perform; false
          otherwise.
Since:
1.2
See Also:
Shape.intersects(double, double, double, double)


"
Area,isEmpty(),boolean,Tests whether this Area object encloses any area.,"

isEmpty
public boolean isEmpty()
Tests whether this Area object encloses any area.

Returns:
true if this Area object
 represents an empty area; false otherwise.
Since:
1.2


"
Area,isPolygonal(),boolean,Tests whether this Area consists entirely of straight edged polygonal geometry.,"

isPolygonal
public boolean isPolygonal()
Tests whether this Area consists entirely of
 straight edged polygonal geometry.

Returns:
true if the geometry of this
 Area consists entirely of line segments;
 false otherwise.
Since:
1.2


"
Area,isRectangular(),boolean,Tests whether this Area is rectangular in shape.,"

isRectangular
public boolean isRectangular()
Tests whether this Area is rectangular in shape.

Returns:
true if the geometry of this
 Area is rectangular in shape; false
 otherwise.
Since:
1.2


"
Area,isSingular(),boolean,Tests whether this Area is comprised of a single closed subpath.,"

isSingular
public boolean isSingular()
Tests whether this Area is comprised of a single
 closed subpath.  This method returns true if the
 path contains 0 or 1 subpaths, or false if the path
 contains more than 1 subpath.  The subpaths are counted by the
 number of SEG_MOVETO  segments
 that appear in the path.

Returns:
true if the Area is comprised
 of a single basic geometry; false otherwise.
Since:
1.2


"
Area,reset(),void,Removes all of the geometry from this Area and restores it to an empty area.,"

reset
public void reset()
Removes all of the geometry from this Area and
 restores it to an empty area.

Since:
1.2


"
Area,subtract(Area rhs),void,Subtracts the shape of the specified Area from the shape of this Area.,"

subtract
public void subtract(Area rhs)
Subtracts the shape of the specified Area from the
 shape of this Area.
 The resulting shape of this Area will include
 areas that were contained only in this Area
 and not in the specified Area.
 
     // Example:
     Area a1 = new Area([triangle 0,0 => 8,0 => 0,8]);
     Area a2 = new Area([triangle 0,0 => 8,0 => 8,8]);
     a1.subtract(a2);

        a1(before)     -         a2         =     a1(after)

     ################     ################
     ##############         ##############     ##
     ############             ############     ####
     ##########                 ##########     ######
     ########                     ########     ########
     ######                         ######     ######
     ####                             ####     ####
     ##                                 ##     ##
 

Parameters:
rhs - the Area to be subtracted from the
          current shape
Throws:
NullPointerException - if rhs is null
Since:
1.2


"
Area,transform(AffineTransform t),void,Transforms the geometry of this Area using the specified AffineTransform.,"

transform
public void transform(AffineTransform t)
Transforms the geometry of this Area using the specified
 AffineTransform.  The geometry is transformed in place, which
 permanently changes the enclosed area defined by this object.

Parameters:
t - the transformation used to transform the area
Throws:
NullPointerException - if t is null
Since:
1.2


"
CubicCurve2D,clone(),Object,Creates a new object of the same class as this object.,"

clone
public Object clone()
Creates a new object of the same class as this object.

Overrides:
clone in class Object
Returns:
a clone of this instance.
Throws:
OutOfMemoryError - if there is not enough memory.
Since:
1.2
See Also:
Cloneable


"
CubicCurve2D,"contains(double x, double y)",boolean,"Tests if the specified coordinates are inside the boundary of the Shape, as described by the definition of insideness.","

contains
public boolean contains(double x,
                        double y)
Tests if the specified coordinates are inside the boundary of the
 Shape, as described by the
 
 definition of insideness.

Specified by:
contains in interface Shape
Parameters:
x - the specified X coordinate to be tested
y - the specified Y coordinate to be tested
Returns:
true if the specified coordinates are inside
         the Shape boundary; false
         otherwise.
Since:
1.2


"
CubicCurve2D,"contains(double x, double y, double w, double h)",boolean,Tests if the interior of the Shape entirely contains the specified rectangular area.,"

contains
public boolean contains(double x,
                        double y,
                        double w,
                        double h)
Tests if the interior of the Shape entirely contains
 the specified rectangular area.  All coordinates that lie inside
 the rectangular area must lie within the Shape for the
 entire rectangular area to be considered contained within the
 Shape.
 
 The Shape.contains() method allows a Shape
 implementation to conservatively return false when:
 

 the intersect method returns true and
 
 the calculations to determine whether or not the
 Shape entirely contains the rectangular area are
 prohibitively expensive.
 
 This means that for some Shapes this method might
 return false even though the Shape contains
 the rectangular area.
 The Area class performs
 more accurate geometric computations than most
 Shape objects and therefore can be used if a more precise
 answer is required.

Specified by:
contains in interface Shape
Parameters:
x - the X coordinate of the upper-left corner
          of the specified rectangular area
y - the Y coordinate of the upper-left corner
          of the specified rectangular area
w - the width of the specified rectangular area
h - the height of the specified rectangular area
Returns:
true if the interior of the Shape
          entirely contains the specified rectangular area;
          false otherwise or, if the Shape
          contains the rectangular area and the
          intersects method returns true
          and the containment calculations would be too expensive to
          perform.
Since:
1.2
See Also:
Area, 
Shape.intersects(double, double, double, double)


"
CubicCurve2D,contains(Point2D p),boolean,"Tests if a specified Point2D is inside the boundary of the Shape, as described by the definition of insideness.","

contains
public boolean contains(Point2D p)
Tests if a specified Point2D is inside the boundary
 of the Shape, as described by the
 
 definition of insideness.

Specified by:
contains in interface Shape
Parameters:
p - the specified Point2D to be tested
Returns:
true if the specified Point2D is
          inside the boundary of the Shape;
          false otherwise.
Since:
1.2


"
CubicCurve2D,contains(Rectangle2D r),boolean,Tests if the interior of the Shape entirely contains the specified Rectangle2D.,"

contains
public boolean contains(Rectangle2D r)
Tests if the interior of the Shape entirely contains the
 specified Rectangle2D.
 The Shape.contains() method allows a Shape
 implementation to conservatively return false when:
 

 the intersect method returns true and
 
 the calculations to determine whether or not the
 Shape entirely contains the Rectangle2D
 are prohibitively expensive.
 
 This means that for some Shapes this method might
 return false even though the Shape contains
 the Rectangle2D.
 The Area class performs
 more accurate geometric computations than most
 Shape objects and therefore can be used if a more precise
 answer is required.

Specified by:
contains in interface Shape
Parameters:
r - The specified Rectangle2D
Returns:
true if the interior of the Shape
          entirely contains the Rectangle2D;
          false otherwise or, if the Shape
          contains the Rectangle2D and the
          intersects method returns true
          and the containment calculations would be too expensive to
          perform.
Since:
1.2
See Also:
Shape.contains(double, double, double, double)


"
CubicCurve2D,getBounds(),Rectangle,Returns an integer Rectangle that completely encloses the Shape.,"

getBounds
public Rectangle getBounds()
Returns an integer Rectangle that completely encloses the
 Shape.  Note that there is no guarantee that the
 returned Rectangle is the smallest bounding box that
 encloses the Shape, only that the Shape
 lies entirely within the indicated  Rectangle.  The
 returned Rectangle might also fail to completely
 enclose the Shape if the Shape overflows
 the limited range of the integer data type.  The
 getBounds2D method generally returns a
 tighter bounding box due to its greater flexibility in
 representation.

 
 Note that the 
 definition of insideness can lead to situations where points
 on the defining outline of the shape may not be considered
 contained in the returned bounds object, but only in cases
 where those points are also not considered contained in the original
 shape.
 

 If a point is inside the shape according to the
 contains(point) method, then
 it must be inside the returned Rectangle bounds object
 according to the contains(point)
 method of the bounds. Specifically:
 

shape.contains(x,y) requires bounds.contains(x,y)


 If a point is not inside the shape, then it might
 still be contained in the bounds object:
 

bounds.contains(x,y) does not imply shape.contains(x,y)


Specified by:
getBounds in interface Shape
Returns:
an integer Rectangle that completely encloses
                 the Shape.
Since:
1.2
See Also:
Shape.getBounds2D()


"
CubicCurve2D,getCtrlP1(),abstract Point2D,Returns the first control point.,"

getCtrlP1
public abstract Point2D getCtrlP1()
Returns the first control point.

Returns:
a Point2D that is the first control point of
         the CubicCurve2D.
Since:
1.2


"
CubicCurve2D,getCtrlP2(),abstract Point2D,Returns the second control point.,"

getCtrlP2
public abstract Point2D getCtrlP2()
Returns the second control point.

Returns:
a Point2D that is the second control point of
         the CubicCurve2D.
Since:
1.2


"
CubicCurve2D,getCtrlX1(),abstract double,Returns the X coordinate of the first control point in double precision.,"

getCtrlX1
public abstract double getCtrlX1()
Returns the X coordinate of the first control point in double precision.

Returns:
the X coordinate of the first control point of the
         CubicCurve2D.
Since:
1.2


"
CubicCurve2D,getCtrlX2(),abstract double,Returns the X coordinate of the second control point in double precision.,"

getCtrlX2
public abstract double getCtrlX2()
Returns the X coordinate of the second control point
 in double precision.

Returns:
the X coordinate of the second control point of the
         CubicCurve2D.
Since:
1.2


"
CubicCurve2D,getCtrlY1(),abstract double,Returns the Y coordinate of the first control point in double precision.,"

getCtrlY1
public abstract double getCtrlY1()
Returns the Y coordinate of the first control point in double precision.

Returns:
the Y coordinate of the first control point of the
         CubicCurve2D.
Since:
1.2


"
CubicCurve2D,getCtrlY2(),abstract double,Returns the Y coordinate of the second control point in double precision.,"

getCtrlY2
public abstract double getCtrlY2()
Returns the Y coordinate of the second control point
 in double precision.

Returns:
the Y coordinate of the second control point of the
         CubicCurve2D.
Since:
1.2


"
CubicCurve2D,getFlatness(),double,Returns the flatness of this curve.,"

getFlatness
public double getFlatness()
Returns the flatness of this curve.  The flatness is the
 maximum distance of a control point from the line connecting the
 end points.

Returns:
the flatness of this curve.
Since:
1.2


"
CubicCurve2D,"getFlatness(double[] coords, int offset)",static double,Returns the flatness of the cubic curve specified by the control points stored in the indicated array at the indicated index.,"

getFlatness
public static double getFlatness(double[] coords,
                                 int offset)
Returns the flatness of the cubic curve specified
 by the control points stored in the indicated array at the
 indicated index.  The flatness is the maximum distance
 of a control point from the line connecting the end points.

Parameters:
coords - an array containing coordinates
offset - the index of coords from which to begin
          getting the end points and control points of the curve
Returns:
the flatness of the CubicCurve2D
          specified by the coordinates in coords at
          the specified offset.
Since:
1.2


"
CubicCurve2D,"getFlatness(double x1, double y1, double ctrlx1, double ctrly1, double ctrlx2, double ctrly2, double x2, double y2)",static double,Returns the flatness of the cubic curve specified by the indicated control points.,"

getFlatness
public static double getFlatness(double x1,
                                 double y1,
                                 double ctrlx1,
                                 double ctrly1,
                                 double ctrlx2,
                                 double ctrly2,
                                 double x2,
                                 double y2)
Returns the flatness of the cubic curve specified
 by the indicated control points. The flatness is the maximum distance
 of a control point from the line connecting the end points.

Parameters:
x1 - the X coordinate that specifies the start point
           of a CubicCurve2D
y1 - the Y coordinate that specifies the start point
           of a CubicCurve2D
ctrlx1 - the X coordinate that specifies the first control point
               of a CubicCurve2D
ctrly1 - the Y coordinate that specifies the first control point
               of a CubicCurve2D
ctrlx2 - the X coordinate that specifies the second control point
               of a CubicCurve2D
ctrly2 - the Y coordinate that specifies the second control point
               of a CubicCurve2D
x2 - the X coordinate that specifies the end point
           of a CubicCurve2D
y2 - the Y coordinate that specifies the end point
           of a CubicCurve2D
Returns:
the flatness of the CubicCurve2D
          represented by the specified coordinates.
Since:
1.2


"
CubicCurve2D,getFlatnessSq(),double,Returns the square of the flatness of this curve.,"

getFlatnessSq
public double getFlatnessSq()
Returns the square of the flatness of this curve.  The flatness is the
 maximum distance of a control point from the line connecting the
 end points.

Returns:
the square of the flatness of this curve.
Since:
1.2


"
CubicCurve2D,"getFlatnessSq(double[] coords, int offset)",static double,Returns the square of the flatness of the cubic curve specified by the control points stored in the indicated array at the indicated index.,"

getFlatnessSq
public static double getFlatnessSq(double[] coords,
                                   int offset)
Returns the square of the flatness of the cubic curve specified
 by the control points stored in the indicated array at the
 indicated index. The flatness is the maximum distance
 of a control point from the line connecting the end points.

Parameters:
coords - an array containing coordinates
offset - the index of coords from which to begin
          getting the end points and control points of the curve
Returns:
the square of the flatness of the CubicCurve2D
          specified by the coordinates in coords at
          the specified offset.
Since:
1.2


"
CubicCurve2D,"getFlatnessSq(double x1, double y1, double ctrlx1, double ctrly1, double ctrlx2, double ctrly2, double x2, double y2)",static double,Returns the square of the flatness of the cubic curve specified by the indicated control points.,"

getFlatnessSq
public static double getFlatnessSq(double x1,
                                   double y1,
                                   double ctrlx1,
                                   double ctrly1,
                                   double ctrlx2,
                                   double ctrly2,
                                   double x2,
                                   double y2)
Returns the square of the flatness of the cubic curve specified
 by the indicated control points. The flatness is the maximum distance
 of a control point from the line connecting the end points.

Parameters:
x1 - the X coordinate that specifies the start point
           of a CubicCurve2D
y1 - the Y coordinate that specifies the start point
           of a CubicCurve2D
ctrlx1 - the X coordinate that specifies the first control point
               of a CubicCurve2D
ctrly1 - the Y coordinate that specifies the first control point
               of a CubicCurve2D
ctrlx2 - the X coordinate that specifies the second control point
               of a CubicCurve2D
ctrly2 - the Y coordinate that specifies the second control point
               of a CubicCurve2D
x2 - the X coordinate that specifies the end point
           of a CubicCurve2D
y2 - the Y coordinate that specifies the end point
           of a CubicCurve2D
Returns:
the square of the flatness of the CubicCurve2D
          represented by the specified coordinates.
Since:
1.2


"
CubicCurve2D,getP1(),abstract Point2D,Returns the start point.,"

getP1
public abstract Point2D getP1()
Returns the start point.

Returns:
a Point2D that is the start point of
         the CubicCurve2D.
Since:
1.2


"
CubicCurve2D,getP2(),abstract Point2D,Returns the end point.,"

getP2
public abstract Point2D getP2()
Returns the end point.

Returns:
a Point2D that is the end point of
         the CubicCurve2D.
Since:
1.2


"
CubicCurve2D,getPathIterator(AffineTransform at),PathIterator,Returns an iteration object that defines the boundary of the shape.,"

getPathIterator
public PathIterator getPathIterator(AffineTransform at)
Returns an iteration object that defines the boundary of the
 shape.
 The iterator for this class is not multi-threaded safe,
 which means that this CubicCurve2D class does not
 guarantee that modifications to the geometry of this
 CubicCurve2D object do not affect any iterations of
 that geometry that are already in process.

Specified by:
getPathIterator in interface Shape
Parameters:
at - an optional AffineTransform to be applied to the
 coordinates as they are returned in the iteration, or null
 if untransformed coordinates are desired
Returns:
the PathIterator object that returns the
          geometry of the outline of this CubicCurve2D, one
          segment at a time.
Since:
1.2


"
CubicCurve2D,"getPathIterator(AffineTransform at, double flatness)",PathIterator,Return an iteration object that defines the boundary of the flattened shape.,"

getPathIterator
public PathIterator getPathIterator(AffineTransform at,
                                    double flatness)
Return an iteration object that defines the boundary of the
 flattened shape.
 The iterator for this class is not multi-threaded safe,
 which means that this CubicCurve2D class does not
 guarantee that modifications to the geometry of this
 CubicCurve2D object do not affect any iterations of
 that geometry that are already in process.

Specified by:
getPathIterator in interface Shape
Parameters:
at - an optional AffineTransform to be applied to the
 coordinates as they are returned in the iteration, or null
 if untransformed coordinates are desired
flatness - the maximum amount that the control points
 for a given curve can vary from colinear before a subdivided
 curve is replaced by a straight line connecting the end points
Returns:
the PathIterator object that returns the
 geometry of the outline of this CubicCurve2D,
 one segment at a time.
Since:
1.2


"
CubicCurve2D,getX1(),abstract double,Returns the X coordinate of the start point in double precision.,"

getX1
public abstract double getX1()
Returns the X coordinate of the start point in double precision.

Returns:
the X coordinate of the start point of the
         CubicCurve2D.
Since:
1.2


"
CubicCurve2D,getX2(),abstract double,Returns the X coordinate of the end point in double precision.,"

getX2
public abstract double getX2()
Returns the X coordinate of the end point in double precision.

Returns:
the X coordinate of the end point of the
         CubicCurve2D.
Since:
1.2


"
CubicCurve2D,getY1(),abstract double,Returns the Y coordinate of the start point in double precision.,"

getY1
public abstract double getY1()
Returns the Y coordinate of the start point in double precision.

Returns:
the Y coordinate of the start point of the
         CubicCurve2D.
Since:
1.2


"
CubicCurve2D,getY2(),abstract double,Returns the Y coordinate of the end point in double precision.,"

getY2
public abstract double getY2()
Returns the Y coordinate of the end point in double precision.

Returns:
the Y coordinate of the end point of the
         CubicCurve2D.
Since:
1.2


"
CubicCurve2D,"intersects(double x, double y, double w, double h)",boolean,Tests if the interior of the Shape intersects the interior of a specified rectangular area.,"

intersects
public boolean intersects(double x,
                          double y,
                          double w,
                          double h)
Tests if the interior of the Shape intersects the
 interior of a specified rectangular area.
 The rectangular area is considered to intersect the Shape
 if any point is contained in both the interior of the
 Shape and the specified rectangular area.
 
 The Shape.intersects() method allows a Shape
 implementation to conservatively return true when:
 

 there is a high probability that the rectangular area and the
 Shape intersect, but
 
 the calculations to accurately determine this intersection
 are prohibitively expensive.
 
 This means that for some Shapes this method might
 return true even though the rectangular area does not
 intersect the Shape.
 The Area class performs
 more accurate computations of geometric intersection than most
 Shape objects and therefore can be used if a more precise
 answer is required.

Specified by:
intersects in interface Shape
Parameters:
x - the X coordinate of the upper-left corner
          of the specified rectangular area
y - the Y coordinate of the upper-left corner
          of the specified rectangular area
w - the width of the specified rectangular area
h - the height of the specified rectangular area
Returns:
true if the interior of the Shape and
          the interior of the rectangular area intersect, or are
          both highly likely to intersect and intersection calculations
          would be too expensive to perform; false otherwise.
Since:
1.2
See Also:
Area


"
CubicCurve2D,intersects(Rectangle2D r),boolean,Tests if the interior of the Shape intersects the interior of a specified Rectangle2D.,"

intersects
public boolean intersects(Rectangle2D r)
Tests if the interior of the Shape intersects the
 interior of a specified Rectangle2D.
 The Shape.intersects() method allows a Shape
 implementation to conservatively return true when:
 

 there is a high probability that the Rectangle2D and the
 Shape intersect, but
 
 the calculations to accurately determine this intersection
 are prohibitively expensive.
 
 This means that for some Shapes this method might
 return true even though the Rectangle2D does not
 intersect the Shape.
 The Area class performs
 more accurate computations of geometric intersection than most
 Shape objects and therefore can be used if a more precise
 answer is required.

Specified by:
intersects in interface Shape
Parameters:
r - the specified Rectangle2D
Returns:
true if the interior of the Shape and
          the interior of the specified Rectangle2D
          intersect, or are both highly likely to intersect and intersection
          calculations would be too expensive to perform; false
          otherwise.
Since:
1.2
See Also:
Shape.intersects(double, double, double, double)


"
CubicCurve2D,setCurve(CubicCurve2D c),void,Sets the location of the end points and control points of this curve to the same as those in the specified CubicCurve2D.,"

setCurve
public void setCurve(CubicCurve2D c)
Sets the location of the end points and control points of this curve
 to the same as those in the specified CubicCurve2D.

Parameters:
c - the specified CubicCurve2D
Since:
1.2


"
CubicCurve2D,"setCurve(double[] coords, int offset)",void,Sets the location of the end points and control points of this curve to the double coordinates at the specified offset in the specified array.,"

setCurve
public void setCurve(double[] coords,
                     int offset)
Sets the location of the end points and control points of this curve
 to the double coordinates at the specified offset in the specified
 array.

Parameters:
coords - a double array containing coordinates
offset - the index of coords from which to begin
          setting the end points and control points of this curve
          to the coordinates contained in coords
Since:
1.2


"
CubicCurve2D,"setCurve(double x1, double y1, double ctrlx1, double ctrly1, double ctrlx2, double ctrly2, double x2, double y2)",abstract void,Sets the location of the end points and control points of this curve to the specified double coordinates.,"

setCurve
public abstract void setCurve(double x1,
                              double y1,
                              double ctrlx1,
                              double ctrly1,
                              double ctrlx2,
                              double ctrly2,
                              double x2,
                              double y2)
Sets the location of the end points and control points of this curve
 to the specified double coordinates.

Parameters:
x1 - the X coordinate used to set the start point
           of this CubicCurve2D
y1 - the Y coordinate used to set the start point
           of this CubicCurve2D
ctrlx1 - the X coordinate used to set the first control point
               of this CubicCurve2D
ctrly1 - the Y coordinate used to set the first control point
               of this CubicCurve2D
ctrlx2 - the X coordinate used to set the second control point
               of this CubicCurve2D
ctrly2 - the Y coordinate used to set the second control point
               of this CubicCurve2D
x2 - the X coordinate used to set the end point
           of this CubicCurve2D
y2 - the Y coordinate used to set the end point
           of this CubicCurve2D
Since:
1.2


"
CubicCurve2D,"setCurve(Point2D[] pts, int offset)",void,Sets the location of the end points and control points of this curve to the coordinates of the Point2D objects at the specified offset in the specified array.,"

setCurve
public void setCurve(Point2D[] pts,
                     int offset)
Sets the location of the end points and control points of this curve
 to the coordinates of the Point2D objects at the specified
 offset in the specified array.

Parameters:
pts - an array of Point2D objects
offset - the index of pts from which to begin setting
          the end points and control points of this curve to the
          points contained in pts
Since:
1.2


"
CubicCurve2D,"setCurve(Point2D p1, Point2D cp1, Point2D cp2, Point2D p2)",void,Sets the location of the end points and control points of this curve to the specified Point2D coordinates.,"

setCurve
public void setCurve(Point2D p1,
                     Point2D cp1,
                     Point2D cp2,
                     Point2D p2)
Sets the location of the end points and control points of this curve
 to the specified Point2D coordinates.

Parameters:
p1 - the first specified Point2D used to set the
          start point of this curve
cp1 - the second specified Point2D used to set the
          first control point of this curve
cp2 - the third specified Point2D used to set the
          second control point of this curve
p2 - the fourth specified Point2D used to set the
          end point of this curve
Since:
1.2


"
CubicCurve2D,solveCubic(double[] eqn),static int,"Solves the cubic whose coefficients are in the eqn array and places the non-complex roots back into the same array, returning the number of roots.","

solveCubic
public static int solveCubic(double[] eqn)
Solves the cubic whose coefficients are in the eqn
 array and places the non-complex roots back into the same array,
 returning the number of roots.  The solved cubic is represented
 by the equation:
 
     eqn = {c, b, a, d}
     dx^3 + ax^2 + bx + c = 0
 
 A return value of -1 is used to distinguish a constant equation
 that might be always 0 or never 0 from an equation that has no
 zeroes.

Parameters:
eqn - an array containing coefficients for a cubic
Returns:
the number of roots, or -1 if the equation is a constant.
Since:
1.2


"
CubicCurve2D,"solveCubic(double[] eqn, double[] res)",static int,"Solve the cubic whose coefficients are in the eqn array and place the non-complex roots into the res array, returning the number of roots.","

solveCubic
public static int solveCubic(double[] eqn,
                             double[] res)
Solve the cubic whose coefficients are in the eqn
 array and place the non-complex roots into the res
 array, returning the number of roots.
 The cubic solved is represented by the equation:
     eqn = {c, b, a, d}
     dx^3 + ax^2 + bx + c = 0
 A return value of -1 is used to distinguish a constant equation,
 which may be always 0 or never 0, from an equation which has no
 zeroes.

Parameters:
eqn - the specified array of coefficients to use to solve
        the cubic equation
res - the array that contains the non-complex roots
        resulting from the solution of the cubic equation
Returns:
the number of roots, or -1 if the equation is a constant
Since:
1.3


"
CubicCurve2D,"subdivide(CubicCurve2D left, CubicCurve2D right)",void,Subdivides this cubic curve and stores the resulting two subdivided curves into the left and right curve parameters.,"

subdivide
public void subdivide(CubicCurve2D left,
                      CubicCurve2D right)
Subdivides this cubic curve and stores the resulting two
 subdivided curves into the left and right curve parameters.
 Either or both of the left and right objects may be the same
 as this object or null.

Parameters:
left - the cubic curve object for storing for the left or
 first half of the subdivided curve
right - the cubic curve object for storing for the right or
 second half of the subdivided curve
Since:
1.2


"
CubicCurve2D,"subdivide(CubicCurve2D src, CubicCurve2D left, CubicCurve2D right)",static void,Subdivides the cubic curve specified by the src parameter and stores the resulting two subdivided curves into the left and right curve parameters.,"

subdivide
public static void subdivide(CubicCurve2D src,
                             CubicCurve2D left,
                             CubicCurve2D right)
Subdivides the cubic curve specified by the src parameter
 and stores the resulting two subdivided curves into the
 left and right curve parameters.
 Either or both of the left and right objects
 may be the same as the src object or null.

Parameters:
src - the cubic curve to be subdivided
left - the cubic curve object for storing the left or
 first half of the subdivided curve
right - the cubic curve object for storing the right or
 second half of the subdivided curve
Since:
1.2


"
CubicCurve2D,"subdivide(double[] src, int srcoff, double[] left, int leftoff, double[] right, int rightoff)",static void,Subdivides the cubic curve specified by the coordinates stored in the src array at indices srcoff through (srcoff + 7) and stores the resulting two subdivided curves into the two result arrays at the corresponding indices.,"

subdivide
public static void subdivide(double[] src,
                             int srcoff,
                             double[] left,
                             int leftoff,
                             double[] right,
                             int rightoff)
Subdivides the cubic curve specified by the coordinates
 stored in the src array at indices srcoff
 through (srcoff + 7) and stores the
 resulting two subdivided curves into the two result arrays at the
 corresponding indices.
 Either or both of the left and right
 arrays may be null or a reference to the same array
 as the src array.
 Note that the last point in the first subdivided curve is the
 same as the first point in the second subdivided curve. Thus,
 it is possible to pass the same array for left
 and right and to use offsets, such as rightoff
 equals (leftoff + 6), in order
 to avoid allocating extra storage for this common point.

Parameters:
src - the array holding the coordinates for the source curve
srcoff - the offset into the array of the beginning of the
 the 6 source coordinates
left - the array for storing the coordinates for the first
 half of the subdivided curve
leftoff - the offset into the array of the beginning of the
 the 6 left coordinates
right - the array for storing the coordinates for the second
 half of the subdivided curve
rightoff - the offset into the array of the beginning of the
 the 6 right coordinates
Since:
1.2


"
CubicCurve2D.Double,getBounds2D(),Rectangle2D,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.,"

getBounds2D
public Rectangle2D getBounds2D()
Returns a high precision and more accurate bounding box of
 the Shape than the getBounds method.
 Note that there is no guarantee that the returned
 Rectangle2D is the smallest bounding box that encloses
 the Shape, only that the Shape lies
 entirely within the indicated Rectangle2D.  The
 bounding box returned by this method is usually tighter than that
 returned by the getBounds method and never fails due
 to overflow problems since the return value can be an instance of
 the Rectangle2D that uses double precision values to
 store the dimensions.

 
 Note that the 
 definition of insideness can lead to situations where points
 on the defining outline of the shape may not be considered
 contained in the returned bounds object, but only in cases
 where those points are also not considered contained in the original
 shape.
 

 If a point is inside the shape according to the
 contains(point) method, then it must
 be inside the returned Rectangle2D bounds object according
 to the contains(point) method of the
 bounds. Specifically:
 

shape.contains(p) requires bounds.contains(p)


 If a point is not inside the shape, then it might
 still be contained in the bounds object:
 

bounds.contains(p) does not imply shape.contains(p)


Specified by:
getBounds2D in interface Shape
Returns:
an instance of Rectangle2D that is a
                 high-precision bounding box of the Shape.
Since:
1.2
See Also:
Shape.getBounds()


"
CubicCurve2D.Double,getCtrlP1(),Point2D,Returns the first control point.,"

getCtrlP1
public Point2D getCtrlP1()
Returns the first control point.

Specified by:
getCtrlP1 in class CubicCurve2D
Returns:
a Point2D that is the first control point of
         the CubicCurve2D.
Since:
1.2


"
CubicCurve2D.Double,getCtrlP2(),Point2D,Returns the second control point.,"

getCtrlP2
public Point2D getCtrlP2()
Returns the second control point.

Specified by:
getCtrlP2 in class CubicCurve2D
Returns:
a Point2D that is the second control point of
         the CubicCurve2D.
Since:
1.2


"
CubicCurve2D.Double,getCtrlX1(),double,Returns the X coordinate of the first control point in double precision.,"

getCtrlX1
public double getCtrlX1()
Returns the X coordinate of the first control point in double precision.

Specified by:
getCtrlX1 in class CubicCurve2D
Returns:
the X coordinate of the first control point of the
         CubicCurve2D.
Since:
1.2


"
CubicCurve2D.Double,getCtrlX2(),double,Returns the X coordinate of the second control point in double precision.,"

getCtrlX2
public double getCtrlX2()
Returns the X coordinate of the second control point
 in double precision.

Specified by:
getCtrlX2 in class CubicCurve2D
Returns:
the X coordinate of the second control point of the
         CubicCurve2D.
Since:
1.2


"
CubicCurve2D.Double,getCtrlY1(),double,Returns the Y coordinate of the first control point in double precision.,"

getCtrlY1
public double getCtrlY1()
Returns the Y coordinate of the first control point in double precision.

Specified by:
getCtrlY1 in class CubicCurve2D
Returns:
the Y coordinate of the first control point of the
         CubicCurve2D.
Since:
1.2


"
CubicCurve2D.Double,getCtrlY2(),double,Returns the Y coordinate of the second control point in double precision.,"

getCtrlY2
public double getCtrlY2()
Returns the Y coordinate of the second control point
 in double precision.

Specified by:
getCtrlY2 in class CubicCurve2D
Returns:
the Y coordinate of the second control point of the
         CubicCurve2D.
Since:
1.2


"
CubicCurve2D.Double,getP1(),Point2D,Returns the start point.,"

getP1
public Point2D getP1()
Returns the start point.

Specified by:
getP1 in class CubicCurve2D
Returns:
a Point2D that is the start point of
         the CubicCurve2D.
Since:
1.2


"
CubicCurve2D.Double,getP2(),Point2D,Returns the end point.,"

getP2
public Point2D getP2()
Returns the end point.

Specified by:
getP2 in class CubicCurve2D
Returns:
a Point2D that is the end point of
         the CubicCurve2D.
Since:
1.2


"
CubicCurve2D.Double,getX1(),double,Returns the X coordinate of the start point in double precision.,"

getX1
public double getX1()
Returns the X coordinate of the start point in double precision.

Specified by:
getX1 in class CubicCurve2D
Returns:
the X coordinate of the start point of the
         CubicCurve2D.
Since:
1.2


"
CubicCurve2D.Double,getX2(),double,Returns the X coordinate of the end point in double precision.,"

getX2
public double getX2()
Returns the X coordinate of the end point in double precision.

Specified by:
getX2 in class CubicCurve2D
Returns:
the X coordinate of the end point of the
         CubicCurve2D.
Since:
1.2


"
CubicCurve2D.Double,getY1(),double,Returns the Y coordinate of the start point in double precision.,"

getY1
public double getY1()
Returns the Y coordinate of the start point in double precision.

Specified by:
getY1 in class CubicCurve2D
Returns:
the Y coordinate of the start point of the
         CubicCurve2D.
Since:
1.2


"
CubicCurve2D.Double,getY2(),double,Returns the Y coordinate of the end point in double precision.,"

getY2
public double getY2()
Returns the Y coordinate of the end point in double precision.

Specified by:
getY2 in class CubicCurve2D
Returns:
the Y coordinate of the end point of the
         CubicCurve2D.
Since:
1.2


"
CubicCurve2D.Double,"setCurve(double x1, double y1, double ctrlx1, double ctrly1, double ctrlx2, double ctrly2, double x2, double y2)",void,Sets the location of the end points and control points of this curve to the specified double coordinates.,"

setCurve
public void setCurve(double x1,
                     double y1,
                     double ctrlx1,
                     double ctrly1,
                     double ctrlx2,
                     double ctrly2,
                     double x2,
                     double y2)
Sets the location of the end points and control points of this curve
 to the specified double coordinates.

Specified by:
setCurve in class CubicCurve2D
Parameters:
x1 - the X coordinate used to set the start point
           of this CubicCurve2D
y1 - the Y coordinate used to set the start point
           of this CubicCurve2D
ctrlx1 - the X coordinate used to set the first control point
               of this CubicCurve2D
ctrly1 - the Y coordinate used to set the first control point
               of this CubicCurve2D
ctrlx2 - the X coordinate used to set the second control point
               of this CubicCurve2D
ctrly2 - the Y coordinate used to set the second control point
               of this CubicCurve2D
x2 - the X coordinate used to set the end point
           of this CubicCurve2D
y2 - the Y coordinate used to set the end point
           of this CubicCurve2D
Since:
1.2


"
CubicCurve2D.Float,getBounds2D(),Rectangle2D,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.,"

getBounds2D
public Rectangle2D getBounds2D()
Returns a high precision and more accurate bounding box of
 the Shape than the getBounds method.
 Note that there is no guarantee that the returned
 Rectangle2D is the smallest bounding box that encloses
 the Shape, only that the Shape lies
 entirely within the indicated Rectangle2D.  The
 bounding box returned by this method is usually tighter than that
 returned by the getBounds method and never fails due
 to overflow problems since the return value can be an instance of
 the Rectangle2D that uses double precision values to
 store the dimensions.

 
 Note that the 
 definition of insideness can lead to situations where points
 on the defining outline of the shape may not be considered
 contained in the returned bounds object, but only in cases
 where those points are also not considered contained in the original
 shape.
 

 If a point is inside the shape according to the
 contains(point) method, then it must
 be inside the returned Rectangle2D bounds object according
 to the contains(point) method of the
 bounds. Specifically:
 

shape.contains(p) requires bounds.contains(p)


 If a point is not inside the shape, then it might
 still be contained in the bounds object:
 

bounds.contains(p) does not imply shape.contains(p)


Specified by:
getBounds2D in interface Shape
Returns:
an instance of Rectangle2D that is a
                 high-precision bounding box of the Shape.
Since:
1.2
See Also:
Shape.getBounds()


"
CubicCurve2D.Float,getCtrlP1(),Point2D,Returns the first control point.,"

getCtrlP1
public Point2D getCtrlP1()
Returns the first control point.

Specified by:
getCtrlP1 in class CubicCurve2D
Returns:
a Point2D that is the first control point of
         the CubicCurve2D.
Since:
1.2


"
CubicCurve2D.Float,getCtrlP2(),Point2D,Returns the second control point.,"

getCtrlP2
public Point2D getCtrlP2()
Returns the second control point.

Specified by:
getCtrlP2 in class CubicCurve2D
Returns:
a Point2D that is the second control point of
         the CubicCurve2D.
Since:
1.2


"
CubicCurve2D.Float,getCtrlX1(),double,Returns the X coordinate of the first control point in double precision.,"

getCtrlX1
public double getCtrlX1()
Returns the X coordinate of the first control point in double precision.

Specified by:
getCtrlX1 in class CubicCurve2D
Returns:
the X coordinate of the first control point of the
         CubicCurve2D.
Since:
1.2


"
CubicCurve2D.Float,getCtrlX2(),double,Returns the X coordinate of the second control point in double precision.,"

getCtrlX2
public double getCtrlX2()
Returns the X coordinate of the second control point
 in double precision.

Specified by:
getCtrlX2 in class CubicCurve2D
Returns:
the X coordinate of the second control point of the
         CubicCurve2D.
Since:
1.2


"
CubicCurve2D.Float,getCtrlY1(),double,Returns the Y coordinate of the first control point in double precision.,"

getCtrlY1
public double getCtrlY1()
Returns the Y coordinate of the first control point in double precision.

Specified by:
getCtrlY1 in class CubicCurve2D
Returns:
the Y coordinate of the first control point of the
         CubicCurve2D.
Since:
1.2


"
CubicCurve2D.Float,getCtrlY2(),double,Returns the Y coordinate of the second control point in double precision.,"

getCtrlY2
public double getCtrlY2()
Returns the Y coordinate of the second control point
 in double precision.

Specified by:
getCtrlY2 in class CubicCurve2D
Returns:
the Y coordinate of the second control point of the
         CubicCurve2D.
Since:
1.2


"
CubicCurve2D.Float,getP1(),Point2D,Returns the start point.,"

getP1
public Point2D getP1()
Returns the start point.

Specified by:
getP1 in class CubicCurve2D
Returns:
a Point2D that is the start point of
         the CubicCurve2D.
Since:
1.2


"
CubicCurve2D.Float,getP2(),Point2D,Returns the end point.,"

getP2
public Point2D getP2()
Returns the end point.

Specified by:
getP2 in class CubicCurve2D
Returns:
a Point2D that is the end point of
         the CubicCurve2D.
Since:
1.2


"
CubicCurve2D.Float,getX1(),double,Returns the X coordinate of the start point in double precision.,"

getX1
public double getX1()
Returns the X coordinate of the start point in double precision.

Specified by:
getX1 in class CubicCurve2D
Returns:
the X coordinate of the start point of the
         CubicCurve2D.
Since:
1.2


"
CubicCurve2D.Float,getX2(),double,Returns the X coordinate of the end point in double precision.,"

getX2
public double getX2()
Returns the X coordinate of the end point in double precision.

Specified by:
getX2 in class CubicCurve2D
Returns:
the X coordinate of the end point of the
         CubicCurve2D.
Since:
1.2


"
CubicCurve2D.Float,getY1(),double,Returns the Y coordinate of the start point in double precision.,"

getY1
public double getY1()
Returns the Y coordinate of the start point in double precision.

Specified by:
getY1 in class CubicCurve2D
Returns:
the Y coordinate of the start point of the
         CubicCurve2D.
Since:
1.2


"
CubicCurve2D.Float,getY2(),double,Returns the Y coordinate of the end point in double precision.,"

getY2
public double getY2()
Returns the Y coordinate of the end point in double precision.

Specified by:
getY2 in class CubicCurve2D
Returns:
the Y coordinate of the end point of the
         CubicCurve2D.
Since:
1.2


"
CubicCurve2D.Float,"setCurve(double x1, double y1, double ctrlx1, double ctrly1, double ctrlx2, double ctrly2, double x2, double y2)",void,Sets the location of the end points and control points of this curve to the specified double coordinates.,"

setCurve
public void setCurve(double x1,
                     double y1,
                     double ctrlx1,
                     double ctrly1,
                     double ctrlx2,
                     double ctrly2,
                     double x2,
                     double y2)
Sets the location of the end points and control points of this curve
 to the specified double coordinates.

Specified by:
setCurve in class CubicCurve2D
Parameters:
x1 - the X coordinate used to set the start point
           of this CubicCurve2D
y1 - the Y coordinate used to set the start point
           of this CubicCurve2D
ctrlx1 - the X coordinate used to set the first control point
               of this CubicCurve2D
ctrly1 - the Y coordinate used to set the first control point
               of this CubicCurve2D
ctrlx2 - the X coordinate used to set the second control point
               of this CubicCurve2D
ctrly2 - the Y coordinate used to set the second control point
               of this CubicCurve2D
x2 - the X coordinate used to set the end point
           of this CubicCurve2D
y2 - the Y coordinate used to set the end point
           of this CubicCurve2D
Since:
1.2


"
CubicCurve2D.Float,"setCurve(float x1, float y1, float ctrlx1, float ctrly1, float ctrlx2, float ctrly2, float x2, float y2)",void,Sets the location of the end points and control points of this curve to the specified float coordinates.,"

setCurve
public void setCurve(float x1,
                     float y1,
                     float ctrlx1,
                     float ctrly1,
                     float ctrlx2,
                     float ctrly2,
                     float x2,
                     float y2)
Sets the location of the end points and control points
 of this curve to the specified float coordinates.

Parameters:
x1 - the X coordinate used to set the start point
           of this CubicCurve2D
y1 - the Y coordinate used to set the start point
           of this CubicCurve2D
ctrlx1 - the X coordinate used to set the first control point
               of this CubicCurve2D
ctrly1 - the Y coordinate used to set the first control point
               of this CubicCurve2D
ctrlx2 - the X coordinate used to set the second control point
               of this CubicCurve2D
ctrly2 - the Y coordinate used to set the second control point
               of this CubicCurve2D
x2 - the X coordinate used to set the end point
           of this CubicCurve2D
y2 - the Y coordinate used to set the end point
           of this CubicCurve2D
Since:
1.2


"
Dimension2D,clone(),Object,Creates a new object of the same class as this object.,"

clone
public Object clone()
Creates a new object of the same class as this object.

Overrides:
clone in class Object
Returns:
a clone of this instance.
Throws:
OutOfMemoryError - if there is not enough memory.
Since:
1.2
See Also:
Cloneable


"
Dimension2D,getHeight(),abstract double,Returns the height of this Dimension in double precision.,"

getHeight
public abstract double getHeight()
Returns the height of this Dimension in double
 precision.

Returns:
the height of this Dimension.
Since:
1.2


"
Dimension2D,getWidth(),abstract double,Returns the width of this Dimension in double precision.,"

getWidth
public abstract double getWidth()
Returns the width of this Dimension in double
 precision.

Returns:
the width of this Dimension.
Since:
1.2


"
Dimension2D,setSize(Dimension2D d),void,Sets the size of this Dimension2D object to match the specified size.,"

setSize
public void setSize(Dimension2D d)
Sets the size of this Dimension2D object to
 match the specified size.
 This method is included for completeness, to parallel the
 getSize method of Component.

Parameters:
d - the new size for the Dimension2D
 object
Since:
1.2


"
Dimension2D,"setSize(double width, double height)",abstract void,Sets the size of this Dimension object to the specified width and height.,"

setSize
public abstract void setSize(double width,
                             double height)
Sets the size of this Dimension object to the
 specified width and height.
 This method is included for completeness, to parallel the
 getSize method of
 Component.

Parameters:
width - the new width for the Dimension
 object
height - the new height for the Dimension
 object
Since:
1.2


"
Ellipse2D,"contains(double x, double y)",boolean,"Tests if the specified coordinates are inside the boundary of the Shape, as described by the definition of insideness.","

contains
public boolean contains(double x,
                        double y)
Tests if the specified coordinates are inside the boundary of the
 Shape, as described by the
 
 definition of insideness.

Parameters:
x - the specified X coordinate to be tested
y - the specified Y coordinate to be tested
Returns:
true if the specified coordinates are inside
         the Shape boundary; false
         otherwise.
Since:
1.2


"
Ellipse2D,"contains(double x, double y, double w, double h)",boolean,Tests if the interior of the Shape entirely contains the specified rectangular area.,"

contains
public boolean contains(double x,
                        double y,
                        double w,
                        double h)
Tests if the interior of the Shape entirely contains
 the specified rectangular area.  All coordinates that lie inside
 the rectangular area must lie within the Shape for the
 entire rectangular area to be considered contained within the
 Shape.
 
 The Shape.contains() method allows a Shape
 implementation to conservatively return false when:
 

 the intersect method returns true and
 
 the calculations to determine whether or not the
 Shape entirely contains the rectangular area are
 prohibitively expensive.
 
 This means that for some Shapes this method might
 return false even though the Shape contains
 the rectangular area.
 The Area class performs
 more accurate geometric computations than most
 Shape objects and therefore can be used if a more precise
 answer is required.

Parameters:
x - the X coordinate of the upper-left corner
          of the specified rectangular area
y - the Y coordinate of the upper-left corner
          of the specified rectangular area
w - the width of the specified rectangular area
h - the height of the specified rectangular area
Returns:
true if the interior of the Shape
          entirely contains the specified rectangular area;
          false otherwise or, if the Shape
          contains the rectangular area and the
          intersects method returns true
          and the containment calculations would be too expensive to
          perform.
Since:
1.2
See Also:
Area, 
Shape.intersects(double, double, double, double)


"
Ellipse2D,equals(Object obj),boolean,Determines whether or not the specified Object is equal to this Ellipse2D.,"

equals
public boolean equals(Object obj)
Determines whether or not the specified Object is
 equal to this Ellipse2D.  The specified
 Object is equal to this Ellipse2D
 if it is an instance of Ellipse2D and if its
 location and size are the same as this Ellipse2D.

Overrides:
equals in class Object
Parameters:
obj - an Object to be compared with this
             Ellipse2D.
Returns:
true if obj is an instance
          of Ellipse2D and has the same values;
          false otherwise.
Since:
1.6
See Also:
Object.hashCode(), 
HashMap


"
Ellipse2D,getPathIterator(AffineTransform at),PathIterator,Returns an iteration object that defines the boundary of this Ellipse2D.,"

getPathIterator
public PathIterator getPathIterator(AffineTransform at)
Returns an iteration object that defines the boundary of this
 Ellipse2D.
 The iterator for this class is multi-threaded safe, which means
 that this Ellipse2D class guarantees that
 modifications to the geometry of this Ellipse2D
 object do not affect any iterations of that geometry that
 are already in process.

Parameters:
at - an optional AffineTransform to be applied to
 the coordinates as they are returned in the iteration, or
 null if untransformed coordinates are desired
Returns:
the PathIterator object that returns the
          geometry of the outline of this Ellipse2D,
          one segment at a time.
Since:
1.2


"
Ellipse2D,hashCode(),int,Returns the hashcode for this Ellipse2D.,"

hashCode
public int hashCode()
Returns the hashcode for this Ellipse2D.

Overrides:
hashCode in class Object
Returns:
the hashcode for this Ellipse2D.
Since:
1.6
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Ellipse2D,"intersects(double x, double y, double w, double h)",boolean,Tests if the interior of the Shape intersects the interior of a specified rectangular area.,"

intersects
public boolean intersects(double x,
                          double y,
                          double w,
                          double h)
Tests if the interior of the Shape intersects the
 interior of a specified rectangular area.
 The rectangular area is considered to intersect the Shape
 if any point is contained in both the interior of the
 Shape and the specified rectangular area.
 
 The Shape.intersects() method allows a Shape
 implementation to conservatively return true when:
 

 there is a high probability that the rectangular area and the
 Shape intersect, but
 
 the calculations to accurately determine this intersection
 are prohibitively expensive.
 
 This means that for some Shapes this method might
 return true even though the rectangular area does not
 intersect the Shape.
 The Area class performs
 more accurate computations of geometric intersection than most
 Shape objects and therefore can be used if a more precise
 answer is required.

Parameters:
x - the X coordinate of the upper-left corner
          of the specified rectangular area
y - the Y coordinate of the upper-left corner
          of the specified rectangular area
w - the width of the specified rectangular area
h - the height of the specified rectangular area
Returns:
true if the interior of the Shape and
          the interior of the rectangular area intersect, or are
          both highly likely to intersect and intersection calculations
          would be too expensive to perform; false otherwise.
Since:
1.2
See Also:
Area


"
Ellipse2D.Double,getBounds2D(),Rectangle2D,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.,"

getBounds2D
public Rectangle2D getBounds2D()
Returns a high precision and more accurate bounding box of
 the Shape than the getBounds method.
 Note that there is no guarantee that the returned
 Rectangle2D is the smallest bounding box that encloses
 the Shape, only that the Shape lies
 entirely within the indicated Rectangle2D.  The
 bounding box returned by this method is usually tighter than that
 returned by the getBounds method and never fails due
 to overflow problems since the return value can be an instance of
 the Rectangle2D that uses double precision values to
 store the dimensions.

 
 Note that the 
 definition of insideness can lead to situations where points
 on the defining outline of the shape may not be considered
 contained in the returned bounds object, but only in cases
 where those points are also not considered contained in the original
 shape.
 

 If a point is inside the shape according to the
 contains(point) method, then it must
 be inside the returned Rectangle2D bounds object according
 to the contains(point) method of the
 bounds. Specifically:
 

shape.contains(p) requires bounds.contains(p)


 If a point is not inside the shape, then it might
 still be contained in the bounds object:
 

bounds.contains(p) does not imply shape.contains(p)


Specified by:
getBounds2D in interface Shape
Returns:
an instance of Rectangle2D that is a
                 high-precision bounding box of the Shape.
Since:
1.2
See Also:
Shape.getBounds()


"
Ellipse2D.Double,getHeight(),double,Returns the height of the framing rectangle in double precision.,"

getHeight
public double getHeight()
Returns the height of the framing rectangle
 in double precision.

Specified by:
getHeight in class RectangularShape
Returns:
the height of the framing rectangle.
Since:
1.2


"
Ellipse2D.Double,getWidth(),double,Returns the width of the framing rectangle in double precision.,"

getWidth
public double getWidth()
Returns the width of the framing rectangle in
 double precision.

Specified by:
getWidth in class RectangularShape
Returns:
the width of the framing rectangle.
Since:
1.2


"
Ellipse2D.Double,getX(),double,Returns the X coordinate of the upper-left corner of the framing rectangle in double precision.,"

getX
public double getX()
Returns the X coordinate of the upper-left corner of
 the framing rectangle in double precision.

Specified by:
getX in class RectangularShape
Returns:
the X coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
Ellipse2D.Double,getY(),double,Returns the Y coordinate of the upper-left corner of the framing rectangle in double precision.,"

getY
public double getY()
Returns the Y coordinate of the upper-left corner of
 the framing rectangle in double precision.

Specified by:
getY in class RectangularShape
Returns:
the Y coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
Ellipse2D.Double,isEmpty(),boolean,Determines whether the RectangularShape is empty.,"

isEmpty
public boolean isEmpty()
Determines whether the RectangularShape is empty.
 When the RectangularShape is empty, it encloses no
 area.

Specified by:
isEmpty in class RectangularShape
Returns:
true if the RectangularShape is empty;
          false otherwise.
Since:
1.2


"
Ellipse2D.Double,"setFrame(double x, double y, double w, double h)",void,Sets the location and size of the framing rectangle of this Shape to the specified rectangular values.,"

setFrame
public void setFrame(double x,
                     double y,
                     double w,
                     double h)
Sets the location and size of the framing rectangle of this
 Shape to the specified rectangular values.

Specified by:
setFrame in class RectangularShape
Parameters:
x - the X coordinate of the upper-left corner of the
          specified rectangular shape
y - the Y coordinate of the upper-left corner of the
          specified rectangular shape
w - the width of the specified rectangular shape
h - the height of the specified rectangular shape
Since:
1.2
See Also:
RectangularShape.getFrame()


"
Ellipse2D.Float,getBounds2D(),Rectangle2D,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.,"

getBounds2D
public Rectangle2D getBounds2D()
Returns a high precision and more accurate bounding box of
 the Shape than the getBounds method.
 Note that there is no guarantee that the returned
 Rectangle2D is the smallest bounding box that encloses
 the Shape, only that the Shape lies
 entirely within the indicated Rectangle2D.  The
 bounding box returned by this method is usually tighter than that
 returned by the getBounds method and never fails due
 to overflow problems since the return value can be an instance of
 the Rectangle2D that uses double precision values to
 store the dimensions.

 
 Note that the 
 definition of insideness can lead to situations where points
 on the defining outline of the shape may not be considered
 contained in the returned bounds object, but only in cases
 where those points are also not considered contained in the original
 shape.
 

 If a point is inside the shape according to the
 contains(point) method, then it must
 be inside the returned Rectangle2D bounds object according
 to the contains(point) method of the
 bounds. Specifically:
 

shape.contains(p) requires bounds.contains(p)


 If a point is not inside the shape, then it might
 still be contained in the bounds object:
 

bounds.contains(p) does not imply shape.contains(p)


Specified by:
getBounds2D in interface Shape
Returns:
an instance of Rectangle2D that is a
                 high-precision bounding box of the Shape.
Since:
1.2
See Also:
Shape.getBounds()


"
Ellipse2D.Float,getHeight(),double,Returns the height of the framing rectangle in double precision.,"

getHeight
public double getHeight()
Returns the height of the framing rectangle
 in double precision.

Specified by:
getHeight in class RectangularShape
Returns:
the height of the framing rectangle.
Since:
1.2


"
Ellipse2D.Float,getWidth(),double,Returns the width of the framing rectangle in double precision.,"

getWidth
public double getWidth()
Returns the width of the framing rectangle in
 double precision.

Specified by:
getWidth in class RectangularShape
Returns:
the width of the framing rectangle.
Since:
1.2


"
Ellipse2D.Float,getX(),double,Returns the X coordinate of the upper-left corner of the framing rectangle in double precision.,"

getX
public double getX()
Returns the X coordinate of the upper-left corner of
 the framing rectangle in double precision.

Specified by:
getX in class RectangularShape
Returns:
the X coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
Ellipse2D.Float,getY(),double,Returns the Y coordinate of the upper-left corner of the framing rectangle in double precision.,"

getY
public double getY()
Returns the Y coordinate of the upper-left corner of
 the framing rectangle in double precision.

Specified by:
getY in class RectangularShape
Returns:
the Y coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
Ellipse2D.Float,isEmpty(),boolean,Determines whether the RectangularShape is empty.,"

isEmpty
public boolean isEmpty()
Determines whether the RectangularShape is empty.
 When the RectangularShape is empty, it encloses no
 area.

Specified by:
isEmpty in class RectangularShape
Returns:
true if the RectangularShape is empty;
          false otherwise.
Since:
1.2


"
Ellipse2D.Float,"setFrame(double x, double y, double w, double h)",void,Sets the location and size of the framing rectangle of this Shape to the specified rectangular values.,"

setFrame
public void setFrame(double x,
                     double y,
                     double w,
                     double h)
Sets the location and size of the framing rectangle of this
 Shape to the specified rectangular values.

Specified by:
setFrame in class RectangularShape
Parameters:
x - the X coordinate of the upper-left corner of the
          specified rectangular shape
y - the Y coordinate of the upper-left corner of the
          specified rectangular shape
w - the width of the specified rectangular shape
h - the height of the specified rectangular shape
Since:
1.2
See Also:
RectangularShape.getFrame()


"
Ellipse2D.Float,"setFrame(float x, float y, float w, float h)",void,Sets the location and size of the framing rectangle of this Shape to the specified rectangular values.,"

setFrame
public void setFrame(float x,
                     float y,
                     float w,
                     float h)
Sets the location and size of the framing rectangle of this
 Shape to the specified rectangular values.

Parameters:
x - the X coordinate of the upper-left corner of the
              specified rectangular shape
y - the Y coordinate of the upper-left corner of the
              specified rectangular shape
w - the width of the specified rectangular shape
h - the height of the specified rectangular shape
Since:
1.2


"
FlatteningPathIterator,currentSegment(double[] coords),int,Returns the coordinates and type of the current path segment in the iteration.,"

currentSegment
public int currentSegment(double[] coords)
Returns the coordinates and type of the current path segment in
 the iteration.
 The return value is the path segment type:
 SEG_MOVETO, SEG_LINETO, or SEG_CLOSE.
 A double array of length 6 must be passed in and can be used to
 store the coordinates of the point(s).
 Each point is stored as a pair of double x,y coordinates.
 SEG_MOVETO and SEG_LINETO types return one point,
 and SEG_CLOSE does not return any points.

Specified by:
currentSegment in interface PathIterator
Parameters:
coords - an array that holds the data returned from
 this method
Returns:
the path segment type of the current path segment.
Throws:
NoSuchElementException - if there
          are no more elements in the flattening path to be
          returned.
See Also:
PathIterator.SEG_MOVETO, 
PathIterator.SEG_LINETO, 
PathIterator.SEG_CLOSE


"
FlatteningPathIterator,currentSegment(float[] coords),int,Returns the coordinates and type of the current path segment in the iteration.,"

currentSegment
public int currentSegment(float[] coords)
Returns the coordinates and type of the current path segment in
 the iteration.
 The return value is the path segment type:
 SEG_MOVETO, SEG_LINETO, or SEG_CLOSE.
 A float array of length 6 must be passed in and can be used to
 store the coordinates of the point(s).
 Each point is stored as a pair of float x,y coordinates.
 SEG_MOVETO and SEG_LINETO types return one point,
 and SEG_CLOSE does not return any points.

Specified by:
currentSegment in interface PathIterator
Parameters:
coords - an array that holds the data returned from
 this method
Returns:
the path segment type of the current path segment.
Throws:
NoSuchElementException - if there
          are no more elements in the flattening path to be
          returned.
See Also:
PathIterator.SEG_MOVETO, 
PathIterator.SEG_LINETO, 
PathIterator.SEG_CLOSE


"
FlatteningPathIterator,getFlatness(),double,Returns the flatness of this iterator.,"

getFlatness
public double getFlatness()
Returns the flatness of this iterator.

Returns:
the flatness of this FlatteningPathIterator.


"
FlatteningPathIterator,getRecursionLimit(),int,Returns the recursion limit of this iterator.,"

getRecursionLimit
public int getRecursionLimit()
Returns the recursion limit of this iterator.

Returns:
the recursion limit of this
 FlatteningPathIterator.


"
FlatteningPathIterator,getWindingRule(),int,Returns the winding rule for determining the interior of the path.,"

getWindingRule
public int getWindingRule()
Returns the winding rule for determining the interior of the
 path.

Specified by:
getWindingRule in interface PathIterator
Returns:
the winding rule of the original unflattened path being
 iterated over.
See Also:
PathIterator.WIND_EVEN_ODD, 
PathIterator.WIND_NON_ZERO


"
FlatteningPathIterator,isDone(),boolean,Tests if the iteration is complete.,"

isDone
public boolean isDone()
Tests if the iteration is complete.

Specified by:
isDone in interface PathIterator
Returns:
true if all the segments have
 been read; false otherwise.


"
FlatteningPathIterator,next(),void,Moves the iterator to the next segment of the path forwards along the primary direction of traversal as long as there are more points in that direction.,"

next
public void next()
Moves the iterator to the next segment of the path forwards
 along the primary direction of traversal as long as there are
 more points in that direction.

Specified by:
next in interface PathIterator


"
Line2D,clone(),Object,Creates a new object of the same class as this object.,"

clone
public Object clone()
Creates a new object of the same class as this object.

Overrides:
clone in class Object
Returns:
a clone of this instance.
Throws:
OutOfMemoryError - if there is not enough memory.
Since:
1.2
See Also:
Cloneable


"
Line2D,"contains(double x, double y)",boolean,Tests if a specified coordinate is inside the boundary of this Line2D.,"

contains
public boolean contains(double x,
                        double y)
Tests if a specified coordinate is inside the boundary of this
 Line2D.  This method is required to implement the
 Shape interface, but in the case of Line2D
 objects it always returns false since a line contains
 no area.

Specified by:
contains in interface Shape
Parameters:
x - the X coordinate of the specified point to be tested
y - the Y coordinate of the specified point to be tested
Returns:
false because a Line2D contains
 no area.
Since:
1.2


"
Line2D,"contains(double x, double y, double w, double h)",boolean,Tests if the interior of this Line2D entirely contains the specified set of rectangular coordinates.,"

contains
public boolean contains(double x,
                        double y,
                        double w,
                        double h)
Tests if the interior of this Line2D entirely contains
 the specified set of rectangular coordinates.
 This method is required to implement the Shape interface,
 but in the case of Line2D objects it always returns
 false since a line contains no area.

Specified by:
contains in interface Shape
Parameters:
x - the X coordinate of the upper-left corner of the
          specified rectangular area
y - the Y coordinate of the upper-left corner of the
          specified rectangular area
w - the width of the specified rectangular area
h - the height of the specified rectangular area
Returns:
false because a Line2D contains
 no area.
Since:
1.2
See Also:
Area, 
Shape.intersects(double, double, double, double)


"
Line2D,contains(Point2D p),boolean,Tests if a given Point2D is inside the boundary of this Line2D.,"

contains
public boolean contains(Point2D p)
Tests if a given Point2D is inside the boundary of
 this Line2D.
 This method is required to implement the Shape interface,
 but in the case of Line2D objects it always returns
 false since a line contains no area.

Specified by:
contains in interface Shape
Parameters:
p - the specified Point2D to be tested
Returns:
false because a Line2D contains
 no area.
Since:
1.2


"
Line2D,contains(Rectangle2D r),boolean,Tests if the interior of this Line2D entirely contains the specified Rectangle2D.,"

contains
public boolean contains(Rectangle2D r)
Tests if the interior of this Line2D entirely contains
 the specified Rectangle2D.
 This method is required to implement the Shape interface,
 but in the case of Line2D objects it always returns
 false since a line contains no area.

Specified by:
contains in interface Shape
Parameters:
r - the specified Rectangle2D to be tested
Returns:
false because a Line2D contains
 no area.
Since:
1.2
See Also:
Shape.contains(double, double, double, double)


"
Line2D,getBounds(),Rectangle,Returns an integer Rectangle that completely encloses the Shape.,"

getBounds
public Rectangle getBounds()
Returns an integer Rectangle that completely encloses the
 Shape.  Note that there is no guarantee that the
 returned Rectangle is the smallest bounding box that
 encloses the Shape, only that the Shape
 lies entirely within the indicated  Rectangle.  The
 returned Rectangle might also fail to completely
 enclose the Shape if the Shape overflows
 the limited range of the integer data type.  The
 getBounds2D method generally returns a
 tighter bounding box due to its greater flexibility in
 representation.

 
 Note that the 
 definition of insideness can lead to situations where points
 on the defining outline of the shape may not be considered
 contained in the returned bounds object, but only in cases
 where those points are also not considered contained in the original
 shape.
 

 If a point is inside the shape according to the
 contains(point) method, then
 it must be inside the returned Rectangle bounds object
 according to the contains(point)
 method of the bounds. Specifically:
 

shape.contains(x,y) requires bounds.contains(x,y)


 If a point is not inside the shape, then it might
 still be contained in the bounds object:
 

bounds.contains(x,y) does not imply shape.contains(x,y)


Specified by:
getBounds in interface Shape
Returns:
an integer Rectangle that completely encloses
                 the Shape.
Since:
1.2
See Also:
Shape.getBounds2D()


"
Line2D,getP1(),abstract Point2D,Returns the start Point2D of this Line2D.,"

getP1
public abstract Point2D getP1()
Returns the start Point2D of this Line2D.

Returns:
the start Point2D of this Line2D.
Since:
1.2


"
Line2D,getP2(),abstract Point2D,Returns the end Point2D of this Line2D.,"

getP2
public abstract Point2D getP2()
Returns the end Point2D of this Line2D.

Returns:
the end Point2D of this Line2D.
Since:
1.2


"
Line2D,getPathIterator(AffineTransform at),PathIterator,Returns an iteration object that defines the boundary of this Line2D.,"

getPathIterator
public PathIterator getPathIterator(AffineTransform at)
Returns an iteration object that defines the boundary of this
 Line2D.
 The iterator for this class is not multi-threaded safe,
 which means that this Line2D class does not
 guarantee that modifications to the geometry of this
 Line2D object do not affect any iterations of that
 geometry that are already in process.

Specified by:
getPathIterator in interface Shape
Parameters:
at - the specified AffineTransform
Returns:
a PathIterator that defines the boundary of this
          Line2D.
Since:
1.2


"
Line2D,"getPathIterator(AffineTransform at, double flatness)",PathIterator,Returns an iteration object that defines the boundary of this flattened Line2D.,"

getPathIterator
public PathIterator getPathIterator(AffineTransform at,
                                    double flatness)
Returns an iteration object that defines the boundary of this
 flattened Line2D.
 The iterator for this class is not multi-threaded safe,
 which means that this Line2D class does not
 guarantee that modifications to the geometry of this
 Line2D object do not affect any iterations of that
 geometry that are already in process.

Specified by:
getPathIterator in interface Shape
Parameters:
at - the specified AffineTransform
flatness - the maximum amount that the control points for a
          given curve can vary from colinear before a subdivided
          curve is replaced by a straight line connecting the
          end points.  Since a Line2D object is
          always flat, this parameter is ignored.
Returns:
a PathIterator that defines the boundary of the
                  flattened Line2D
Since:
1.2


"
Line2D,getX1(),abstract double,Returns the X coordinate of the start point in double precision.,"

getX1
public abstract double getX1()
Returns the X coordinate of the start point in double precision.

Returns:
the X coordinate of the start point of this
         Line2D object.
Since:
1.2


"
Line2D,getX2(),abstract double,Returns the X coordinate of the end point in double precision.,"

getX2
public abstract double getX2()
Returns the X coordinate of the end point in double precision.

Returns:
the X coordinate of the end point of this
         Line2D object.
Since:
1.2


"
Line2D,getY1(),abstract double,Returns the Y coordinate of the start point in double precision.,"

getY1
public abstract double getY1()
Returns the Y coordinate of the start point in double precision.

Returns:
the Y coordinate of the start point of this
         Line2D object.
Since:
1.2


"
Line2D,getY2(),abstract double,Returns the Y coordinate of the end point in double precision.,"

getY2
public abstract double getY2()
Returns the Y coordinate of the end point in double precision.

Returns:
the Y coordinate of the end point of this
         Line2D object.
Since:
1.2


"
Line2D,"intersects(double x, double y, double w, double h)",boolean,Tests if the interior of the Shape intersects the interior of a specified rectangular area.,"

intersects
public boolean intersects(double x,
                          double y,
                          double w,
                          double h)
Tests if the interior of the Shape intersects the
 interior of a specified rectangular area.
 The rectangular area is considered to intersect the Shape
 if any point is contained in both the interior of the
 Shape and the specified rectangular area.
 
 The Shape.intersects() method allows a Shape
 implementation to conservatively return true when:
 

 there is a high probability that the rectangular area and the
 Shape intersect, but
 
 the calculations to accurately determine this intersection
 are prohibitively expensive.
 
 This means that for some Shapes this method might
 return true even though the rectangular area does not
 intersect the Shape.
 The Area class performs
 more accurate computations of geometric intersection than most
 Shape objects and therefore can be used if a more precise
 answer is required.

Specified by:
intersects in interface Shape
Parameters:
x - the X coordinate of the upper-left corner
          of the specified rectangular area
y - the Y coordinate of the upper-left corner
          of the specified rectangular area
w - the width of the specified rectangular area
h - the height of the specified rectangular area
Returns:
true if the interior of the Shape and
          the interior of the rectangular area intersect, or are
          both highly likely to intersect and intersection calculations
          would be too expensive to perform; false otherwise.
Since:
1.2
See Also:
Area


"
Line2D,intersects(Rectangle2D r),boolean,Tests if the interior of the Shape intersects the interior of a specified Rectangle2D.,"

intersects
public boolean intersects(Rectangle2D r)
Tests if the interior of the Shape intersects the
 interior of a specified Rectangle2D.
 The Shape.intersects() method allows a Shape
 implementation to conservatively return true when:
 

 there is a high probability that the Rectangle2D and the
 Shape intersect, but
 
 the calculations to accurately determine this intersection
 are prohibitively expensive.
 
 This means that for some Shapes this method might
 return true even though the Rectangle2D does not
 intersect the Shape.
 The Area class performs
 more accurate computations of geometric intersection than most
 Shape objects and therefore can be used if a more precise
 answer is required.

Specified by:
intersects in interface Shape
Parameters:
r - the specified Rectangle2D
Returns:
true if the interior of the Shape and
          the interior of the specified Rectangle2D
          intersect, or are both highly likely to intersect and intersection
          calculations would be too expensive to perform; false
          otherwise.
Since:
1.2
See Also:
Shape.intersects(double, double, double, double)


"
Line2D,"intersectsLine(double x1, double y1, double x2, double y2)",boolean,"Tests if the line segment from (x1,y1) to (x2,y2) intersects this line segment.","

intersectsLine
public boolean intersectsLine(double x1,
                              double y1,
                              double x2,
                              double y2)
Tests if the line segment from (x1,y1) to
 (x2,y2) intersects this line segment.

Parameters:
x1 - the X coordinate of the start point of the
           specified line segment
y1 - the Y coordinate of the start point of the
           specified line segment
x2 - the X coordinate of the end point of the
           specified line segment
y2 - the Y coordinate of the end point of the
           specified line segment
Returns:
<true> if this line segment and the specified line segment
                  intersect each other; false otherwise.
Since:
1.2


"
Line2D,intersectsLine(Line2D l),boolean,Tests if the specified line segment intersects this line segment.,"

intersectsLine
public boolean intersectsLine(Line2D l)
Tests if the specified line segment intersects this line segment.

Parameters:
l - the specified Line2D
Returns:
true if this line segment and the specified line
                  segment intersect each other;
                  false otherwise.
Since:
1.2


"
Line2D,"linesIntersect(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4)",static boolean,"Tests if the line segment from (x1,y1) to (x2,y2) intersects the line segment from (x3,y3) to (x4,y4).","

linesIntersect
public static boolean linesIntersect(double x1,
                                     double y1,
                                     double x2,
                                     double y2,
                                     double x3,
                                     double y3,
                                     double x4,
                                     double y4)
Tests if the line segment from (x1,y1) to
 (x2,y2) intersects the line segment from (x3,y3)
 to (x4,y4).

Parameters:
x1 - the X coordinate of the start point of the first
           specified line segment
y1 - the Y coordinate of the start point of the first
           specified line segment
x2 - the X coordinate of the end point of the first
           specified line segment
y2 - the Y coordinate of the end point of the first
           specified line segment
x3 - the X coordinate of the start point of the second
           specified line segment
y3 - the Y coordinate of the start point of the second
           specified line segment
x4 - the X coordinate of the end point of the second
           specified line segment
y4 - the Y coordinate of the end point of the second
           specified line segment
Returns:
true if the first specified line segment
                  and the second specified line segment intersect
                  each other; false otherwise.
Since:
1.2


"
Line2D,"ptLineDist(double px, double py)",double,Returns the distance from a point to this line.,"

ptLineDist
public double ptLineDist(double px,
                         double py)
Returns the distance from a point to this line.
 The distance measured is the distance between the specified
 point and the closest point on the infinitely-extended line
 defined by this Line2D.  If the specified point
 intersects the line, this method returns 0.0.

Parameters:
px - the X coordinate of the specified point being
           measured against this line
py - the Y coordinate of the specified point being
           measured against this line
Returns:
a double value that is the distance from a specified point
                  to the current line.
Since:
1.2
See Also:
ptSegDist(double, double)


"
Line2D,"ptLineDist(double x1, double y1, double x2, double y2, double px, double py)",static double,Returns the distance from a point to a line.,"

ptLineDist
public static double ptLineDist(double x1,
                                double y1,
                                double x2,
                                double y2,
                                double px,
                                double py)
Returns the distance from a point to a line.
 The distance measured is the distance between the specified
 point and the closest point on the infinitely-extended line
 defined by the specified coordinates.  If the specified point
 intersects the line, this method returns 0.0.

Parameters:
x1 - the X coordinate of the start point of the specified line
y1 - the Y coordinate of the start point of the specified line
x2 - the X coordinate of the end point of the specified line
y2 - the Y coordinate of the end point of the specified line
px - the X coordinate of the specified point being
           measured against the specified line
py - the Y coordinate of the specified point being
           measured against the specified line
Returns:
a double value that is the distance from the specified
                   point to the specified line.
Since:
1.2
See Also:
ptSegDist(double, double, double, double, double, double)


"
Line2D,ptLineDist(Point2D pt),double,Returns the distance from a Point2D to this line.,"

ptLineDist
public double ptLineDist(Point2D pt)
Returns the distance from a Point2D to this line.
 The distance measured is the distance between the specified
 point and the closest point on the infinitely-extended line
 defined by this Line2D.  If the specified point
 intersects the line, this method returns 0.0.

Parameters:
pt - the specified Point2D being measured
Returns:
a double value that is the distance from a specified
                  Point2D to the current line.
Since:
1.2
See Also:
ptSegDist(Point2D)


"
Line2D,"ptLineDistSq(double px, double py)",double,Returns the square of the distance from a point to this line.,"

ptLineDistSq
public double ptLineDistSq(double px,
                           double py)
Returns the square of the distance from a point to this line.
 The distance measured is the distance between the specified
 point and the closest point on the infinitely-extended line
 defined by this Line2D.  If the specified point
 intersects the line, this method returns 0.0.

Parameters:
px - the X coordinate of the specified point being
           measured against this line
py - the Y coordinate of the specified point being
           measured against this line
Returns:
a double value that is the square of the distance from a
                  specified point to the current line.
Since:
1.2
See Also:
ptSegDistSq(double, double)


"
Line2D,"ptLineDistSq(double x1, double y1, double x2, double y2, double px, double py)",static double,Returns the square of the distance from a point to a line.,"

ptLineDistSq
public static double ptLineDistSq(double x1,
                                  double y1,
                                  double x2,
                                  double y2,
                                  double px,
                                  double py)
Returns the square of the distance from a point to a line.
 The distance measured is the distance between the specified
 point and the closest point on the infinitely-extended line
 defined by the specified coordinates.  If the specified point
 intersects the line, this method returns 0.0.

Parameters:
x1 - the X coordinate of the start point of the specified line
y1 - the Y coordinate of the start point of the specified line
x2 - the X coordinate of the end point of the specified line
y2 - the Y coordinate of the end point of the specified line
px - the X coordinate of the specified point being
           measured against the specified line
py - the Y coordinate of the specified point being
           measured against the specified line
Returns:
a double value that is the square of the distance from the
                  specified point to the specified line.
Since:
1.2
See Also:
ptSegDistSq(double, double, double, double, double, double)


"
Line2D,ptLineDistSq(Point2D pt),double,Returns the square of the distance from a specified Point2D to this line.,"

ptLineDistSq
public double ptLineDistSq(Point2D pt)
Returns the square of the distance from a specified
 Point2D to this line.
 The distance measured is the distance between the specified
 point and the closest point on the infinitely-extended line
 defined by this Line2D.  If the specified point
 intersects the line, this method returns 0.0.

Parameters:
pt - the specified Point2D being measured
           against this line
Returns:
a double value that is the square of the distance from a
                  specified Point2D to the current
                  line.
Since:
1.2
See Also:
ptSegDistSq(Point2D)


"
Line2D,"ptSegDist(double px, double py)",double,Returns the distance from a point to this line segment.,"

ptSegDist
public double ptSegDist(double px,
                        double py)
Returns the distance from a point to this line segment.
 The distance measured is the distance between the specified
 point and the closest point between the current line's end points.
 If the specified point intersects the line segment in between the
 end points, this method returns 0.0.

Parameters:
px - the X coordinate of the specified point being
           measured against this line segment
py - the Y coordinate of the specified point being
           measured against this line segment
Returns:
a double value that is the distance from the specified
                  point to the current line segment.
Since:
1.2
See Also:
ptLineDist(double, double)


"
Line2D,"ptSegDist(double x1, double y1, double x2, double y2, double px, double py)",static double,Returns the distance from a point to a line segment.,"

ptSegDist
public static double ptSegDist(double x1,
                               double y1,
                               double x2,
                               double y2,
                               double px,
                               double py)
Returns the distance from a point to a line segment.
 The distance measured is the distance between the specified
 point and the closest point between the specified end points.
 If the specified point intersects the line segment in between the
 end points, this method returns 0.0.

Parameters:
x1 - the X coordinate of the start point of the
           specified line segment
y1 - the Y coordinate of the start point of the
           specified line segment
x2 - the X coordinate of the end point of the
           specified line segment
y2 - the Y coordinate of the end point of the
           specified line segment
px - the X coordinate of the specified point being
           measured against the specified line segment
py - the Y coordinate of the specified point being
           measured against the specified line segment
Returns:
a double value that is the distance from the specified point
                          to the specified line segment.
Since:
1.2
See Also:
ptLineDist(double, double, double, double, double, double)


"
Line2D,ptSegDist(Point2D pt),double,Returns the distance from a Point2D to this line segment.,"

ptSegDist
public double ptSegDist(Point2D pt)
Returns the distance from a Point2D to this line
 segment.
 The distance measured is the distance between the specified
 point and the closest point between the current line's end points.
 If the specified point intersects the line segment in between the
 end points, this method returns 0.0.

Parameters:
pt - the specified Point2D being measured
          against this line segment
Returns:
a double value that is the distance from the specified
                          Point2D to the current line
                          segment.
Since:
1.2
See Also:
ptLineDist(Point2D)


"
Line2D,"ptSegDistSq(double px, double py)",double,Returns the square of the distance from a point to this line segment.,"

ptSegDistSq
public double ptSegDistSq(double px,
                          double py)
Returns the square of the distance from a point to this line segment.
 The distance measured is the distance between the specified
 point and the closest point between the current line's end points.
 If the specified point intersects the line segment in between the
 end points, this method returns 0.0.

Parameters:
px - the X coordinate of the specified point being
           measured against this line segment
py - the Y coordinate of the specified point being
           measured against this line segment
Returns:
a double value that is the square of the distance from the
                  specified point to the current line segment.
Since:
1.2
See Also:
ptLineDistSq(double, double)


"
Line2D,"ptSegDistSq(double x1, double y1, double x2, double y2, double px, double py)",static double,Returns the square of the distance from a point to a line segment.,"

ptSegDistSq
public static double ptSegDistSq(double x1,
                                 double y1,
                                 double x2,
                                 double y2,
                                 double px,
                                 double py)
Returns the square of the distance from a point to a line segment.
 The distance measured is the distance between the specified
 point and the closest point between the specified end points.
 If the specified point intersects the line segment in between the
 end points, this method returns 0.0.

Parameters:
x1 - the X coordinate of the start point of the
           specified line segment
y1 - the Y coordinate of the start point of the
           specified line segment
x2 - the X coordinate of the end point of the
           specified line segment
y2 - the Y coordinate of the end point of the
           specified line segment
px - the X coordinate of the specified point being
           measured against the specified line segment
py - the Y coordinate of the specified point being
           measured against the specified line segment
Returns:
a double value that is the square of the distance from the
                  specified point to the specified line segment.
Since:
1.2
See Also:
ptLineDistSq(double, double, double, double, double, double)


"
Line2D,ptSegDistSq(Point2D pt),double,Returns the square of the distance from a Point2D to this line segment.,"

ptSegDistSq
public double ptSegDistSq(Point2D pt)
Returns the square of the distance from a Point2D to
 this line segment.
 The distance measured is the distance between the specified
 point and the closest point between the current line's end points.
 If the specified point intersects the line segment in between the
 end points, this method returns 0.0.

Parameters:
pt - the specified Point2D being measured against
           this line segment.
Returns:
a double value that is the square of the distance from the
                  specified Point2D to the current
                  line segment.
Since:
1.2
See Also:
ptLineDistSq(Point2D)


"
Line2D,"relativeCCW(double px, double py)",int,"Returns an indicator of where the specified point (px,py) lies with respect to this line segment.","

relativeCCW
public int relativeCCW(double px,
                       double py)
Returns an indicator of where the specified point
 (px,py) lies with respect to this line segment.
 See the method comments of
 relativeCCW(double, double, double, double, double, double)
 to interpret the return value.

Parameters:
px - the X coordinate of the specified point
           to be compared with this Line2D
py - the Y coordinate of the specified point
           to be compared with this Line2D
Returns:
an integer that indicates the position of the specified
         coordinates with respect to this Line2D
Since:
1.2
See Also:
relativeCCW(double, double, double, double, double, double)


"
Line2D,"relativeCCW(double x1, double y1, double x2, double y2, double px, double py)",static int,"Returns an indicator of where the specified point (px,py) lies with respect to the line segment from (x1,y1) to (x2,y2).","

relativeCCW
public static int relativeCCW(double x1,
                              double y1,
                              double x2,
                              double y2,
                              double px,
                              double py)
Returns an indicator of where the specified point
 (px,py) lies with respect to the line segment from
 (x1,y1) to (x2,y2).
 The return value can be either 1, -1, or 0 and indicates
 in which direction the specified line must pivot around its
 first end point, (x1,y1), in order to point at the
 specified point (px,py).
 A return value of 1 indicates that the line segment must
 turn in the direction that takes the positive X axis towards
 the negative Y axis.  In the default coordinate system used by
 Java 2D, this direction is counterclockwise.
 A return value of -1 indicates that the line segment must
 turn in the direction that takes the positive X axis towards
 the positive Y axis.  In the default coordinate system, this
 direction is clockwise.
 A return value of 0 indicates that the point lies
 exactly on the line segment.  Note that an indicator value
 of 0 is rare and not useful for determining collinearity
 because of floating point rounding issues.
 If the point is colinear with the line segment, but
 not between the end points, then the value will be -1 if the point
 lies ""beyond (x1,y1)"" or 1 if the point lies
 ""beyond (x2,y2)"".

Parameters:
x1 - the X coordinate of the start point of the
           specified line segment
y1 - the Y coordinate of the start point of the
           specified line segment
x2 - the X coordinate of the end point of the
           specified line segment
y2 - the Y coordinate of the end point of the
           specified line segment
px - the X coordinate of the specified point to be
           compared with the specified line segment
py - the Y coordinate of the specified point to be
           compared with the specified line segment
Returns:
an integer that indicates the position of the third specified
                  coordinates with respect to the line segment formed
                  by the first two specified coordinates.
Since:
1.2


"
Line2D,relativeCCW(Point2D p),int,Returns an indicator of where the specified Point2D lies with respect to this line segment.,"

relativeCCW
public int relativeCCW(Point2D p)
Returns an indicator of where the specified Point2D
 lies with respect to this line segment.
 See the method comments of
 relativeCCW(double, double, double, double, double, double)
 to interpret the return value.

Parameters:
p - the specified Point2D to be compared
          with this Line2D
Returns:
an integer that indicates the position of the specified
         Point2D with respect to this Line2D
Since:
1.2
See Also:
relativeCCW(double, double, double, double, double, double)


"
Line2D,"setLine(double x1, double y1, double x2, double y2)",abstract void,Sets the location of the end points of this Line2D to the specified double coordinates.,"

setLine
public abstract void setLine(double x1,
                             double y1,
                             double x2,
                             double y2)
Sets the location of the end points of this Line2D to
 the specified double coordinates.

Parameters:
x1 - the X coordinate of the start point
y1 - the Y coordinate of the start point
x2 - the X coordinate of the end point
y2 - the Y coordinate of the end point
Since:
1.2


"
Line2D,setLine(Line2D l),void,Sets the location of the end points of this Line2D to the same as those end points of the specified Line2D.,"

setLine
public void setLine(Line2D l)
Sets the location of the end points of this Line2D to
 the same as those end points of the specified Line2D.

Parameters:
l - the specified Line2D
Since:
1.2


"
Line2D,"setLine(Point2D p1, Point2D p2)",void,Sets the location of the end points of this Line2D to the specified Point2D coordinates.,"

setLine
public void setLine(Point2D p1,
                    Point2D p2)
Sets the location of the end points of this Line2D to
 the specified Point2D coordinates.

Parameters:
p1 - the start Point2D of the line segment
p2 - the end Point2D of the line segment
Since:
1.2


"
Line2D.Double,getBounds2D(),Rectangle2D,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.,"

getBounds2D
public Rectangle2D getBounds2D()
Returns a high precision and more accurate bounding box of
 the Shape than the getBounds method.
 Note that there is no guarantee that the returned
 Rectangle2D is the smallest bounding box that encloses
 the Shape, only that the Shape lies
 entirely within the indicated Rectangle2D.  The
 bounding box returned by this method is usually tighter than that
 returned by the getBounds method and never fails due
 to overflow problems since the return value can be an instance of
 the Rectangle2D that uses double precision values to
 store the dimensions.

 
 Note that the 
 definition of insideness can lead to situations where points
 on the defining outline of the shape may not be considered
 contained in the returned bounds object, but only in cases
 where those points are also not considered contained in the original
 shape.
 

 If a point is inside the shape according to the
 contains(point) method, then it must
 be inside the returned Rectangle2D bounds object according
 to the contains(point) method of the
 bounds. Specifically:
 

shape.contains(p) requires bounds.contains(p)


 If a point is not inside the shape, then it might
 still be contained in the bounds object:
 

bounds.contains(p) does not imply shape.contains(p)


Specified by:
getBounds2D in interface Shape
Returns:
an instance of Rectangle2D that is a
                 high-precision bounding box of the Shape.
Since:
1.2
See Also:
Shape.getBounds()


"
Line2D.Double,getP1(),Point2D,Returns the start Point2D of this Line2D.,"

getP1
public Point2D getP1()
Returns the start Point2D of this Line2D.

Specified by:
getP1 in class Line2D
Returns:
the start Point2D of this Line2D.
Since:
1.2


"
Line2D.Double,getP2(),Point2D,Returns the end Point2D of this Line2D.,"

getP2
public Point2D getP2()
Returns the end Point2D of this Line2D.

Specified by:
getP2 in class Line2D
Returns:
the end Point2D of this Line2D.
Since:
1.2


"
Line2D.Double,getX1(),double,Returns the X coordinate of the start point in double precision.,"

getX1
public double getX1()
Returns the X coordinate of the start point in double precision.

Specified by:
getX1 in class Line2D
Returns:
the X coordinate of the start point of this
         Line2D object.
Since:
1.2


"
Line2D.Double,getX2(),double,Returns the X coordinate of the end point in double precision.,"

getX2
public double getX2()
Returns the X coordinate of the end point in double precision.

Specified by:
getX2 in class Line2D
Returns:
the X coordinate of the end point of this
         Line2D object.
Since:
1.2


"
Line2D.Double,getY1(),double,Returns the Y coordinate of the start point in double precision.,"

getY1
public double getY1()
Returns the Y coordinate of the start point in double precision.

Specified by:
getY1 in class Line2D
Returns:
the Y coordinate of the start point of this
         Line2D object.
Since:
1.2


"
Line2D.Double,getY2(),double,Returns the Y coordinate of the end point in double precision.,"

getY2
public double getY2()
Returns the Y coordinate of the end point in double precision.

Specified by:
getY2 in class Line2D
Returns:
the Y coordinate of the end point of this
         Line2D object.
Since:
1.2


"
Line2D.Double,"setLine(double x1, double y1, double x2, double y2)",void,Sets the location of the end points of this Line2D to the specified double coordinates.,"

setLine
public void setLine(double x1,
                    double y1,
                    double x2,
                    double y2)
Sets the location of the end points of this Line2D to
 the specified double coordinates.

Specified by:
setLine in class Line2D
Parameters:
x1 - the X coordinate of the start point
y1 - the Y coordinate of the start point
x2 - the X coordinate of the end point
y2 - the Y coordinate of the end point
Since:
1.2


"
Line2D.Float,getBounds2D(),Rectangle2D,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.,"

getBounds2D
public Rectangle2D getBounds2D()
Returns a high precision and more accurate bounding box of
 the Shape than the getBounds method.
 Note that there is no guarantee that the returned
 Rectangle2D is the smallest bounding box that encloses
 the Shape, only that the Shape lies
 entirely within the indicated Rectangle2D.  The
 bounding box returned by this method is usually tighter than that
 returned by the getBounds method and never fails due
 to overflow problems since the return value can be an instance of
 the Rectangle2D that uses double precision values to
 store the dimensions.

 
 Note that the 
 definition of insideness can lead to situations where points
 on the defining outline of the shape may not be considered
 contained in the returned bounds object, but only in cases
 where those points are also not considered contained in the original
 shape.
 

 If a point is inside the shape according to the
 contains(point) method, then it must
 be inside the returned Rectangle2D bounds object according
 to the contains(point) method of the
 bounds. Specifically:
 

shape.contains(p) requires bounds.contains(p)


 If a point is not inside the shape, then it might
 still be contained in the bounds object:
 

bounds.contains(p) does not imply shape.contains(p)


Specified by:
getBounds2D in interface Shape
Returns:
an instance of Rectangle2D that is a
                 high-precision bounding box of the Shape.
Since:
1.2
See Also:
Shape.getBounds()


"
Line2D.Float,getP1(),Point2D,Returns the start Point2D of this Line2D.,"

getP1
public Point2D getP1()
Returns the start Point2D of this Line2D.

Specified by:
getP1 in class Line2D
Returns:
the start Point2D of this Line2D.
Since:
1.2


"
Line2D.Float,getP2(),Point2D,Returns the end Point2D of this Line2D.,"

getP2
public Point2D getP2()
Returns the end Point2D of this Line2D.

Specified by:
getP2 in class Line2D
Returns:
the end Point2D of this Line2D.
Since:
1.2


"
Line2D.Float,getX1(),double,Returns the X coordinate of the start point in double precision.,"

getX1
public double getX1()
Returns the X coordinate of the start point in double precision.

Specified by:
getX1 in class Line2D
Returns:
the X coordinate of the start point of this
         Line2D object.
Since:
1.2


"
Line2D.Float,getX2(),double,Returns the X coordinate of the end point in double precision.,"

getX2
public double getX2()
Returns the X coordinate of the end point in double precision.

Specified by:
getX2 in class Line2D
Returns:
the X coordinate of the end point of this
         Line2D object.
Since:
1.2


"
Line2D.Float,getY1(),double,Returns the Y coordinate of the start point in double precision.,"

getY1
public double getY1()
Returns the Y coordinate of the start point in double precision.

Specified by:
getY1 in class Line2D
Returns:
the Y coordinate of the start point of this
         Line2D object.
Since:
1.2


"
Line2D.Float,getY2(),double,Returns the Y coordinate of the end point in double precision.,"

getY2
public double getY2()
Returns the Y coordinate of the end point in double precision.

Specified by:
getY2 in class Line2D
Returns:
the Y coordinate of the end point of this
         Line2D object.
Since:
1.2


"
Line2D.Float,"setLine(double x1, double y1, double x2, double y2)",void,Sets the location of the end points of this Line2D to the specified double coordinates.,"

setLine
public void setLine(double x1,
                    double y1,
                    double x2,
                    double y2)
Sets the location of the end points of this Line2D to
 the specified double coordinates.

Specified by:
setLine in class Line2D
Parameters:
x1 - the X coordinate of the start point
y1 - the Y coordinate of the start point
x2 - the X coordinate of the end point
y2 - the Y coordinate of the end point
Since:
1.2


"
Line2D.Float,"setLine(float x1, float y1, float x2, float y2)",void,Sets the location of the end points of this Line2D to the specified float coordinates.,"

setLine
public void setLine(float x1,
                    float y1,
                    float x2,
                    float y2)
Sets the location of the end points of this Line2D
 to the specified float coordinates.

Parameters:
x1 - the X coordinate of the start point
y1 - the Y coordinate of the start point
x2 - the X coordinate of the end point
y2 - the Y coordinate of the end point
Since:
1.2


"
Path2D,"append(PathIterator pi, boolean connect)",abstract void,"Appends the geometry of the specified PathIterator object to the path, possibly connecting the new geometry to the existing path segments with a line segment.","

append
public abstract void append(PathIterator pi,
                            boolean connect)
Appends the geometry of the specified
 PathIterator object
 to the path, possibly connecting the new geometry to the existing
 path segments with a line segment.
 If the connect parameter is true and the
 path is not empty then any initial moveTo in the
 geometry of the appended Shape is turned into a
 lineTo segment.
 If the destination coordinates of such a connecting lineTo
 segment match the ending coordinates of a currently open
 subpath then the segment is omitted as superfluous.
 The winding rule of the specified Shape is ignored
 and the appended geometry is governed by the winding
 rule specified for this path.

Parameters:
pi - the PathIterator whose geometry is appended to
           this path
connect - a boolean to control whether or not to turn an initial
                moveTo segment into a lineTo segment
                to connect the new geometry to the existing path
Since:
1.6


"
Path2D,"append(Shape s, boolean connect)",void,"Appends the geometry of the specified Shape object to the path, possibly connecting the new geometry to the existing path segments with a line segment.","

append
public final void append(Shape s,
                         boolean connect)
Appends the geometry of the specified Shape object to the
 path, possibly connecting the new geometry to the existing path
 segments with a line segment.
 If the connect parameter is true and the
 path is not empty then any initial moveTo in the
 geometry of the appended Shape
 is turned into a lineTo segment.
 If the destination coordinates of such a connecting lineTo
 segment match the ending coordinates of a currently open
 subpath then the segment is omitted as superfluous.
 The winding rule of the specified Shape is ignored
 and the appended geometry is governed by the winding
 rule specified for this path.

Parameters:
s - the Shape whose geometry is appended
          to this path
connect - a boolean to control whether or not to turn an initial
                moveTo segment into a lineTo segment
                to connect the new geometry to the existing path
Since:
1.6


"
Path2D,clone(),abstract Object,Creates a new object of the same class as this object.,"

clone
public abstract Object clone()
Creates a new object of the same class as this object.

Overrides:
clone in class Object
Returns:
a clone of this instance.
Throws:
OutOfMemoryError - if there is not enough memory.
Since:
1.6
See Also:
Cloneable


"
Path2D,closePath(),void,Closes the current subpath by drawing a straight line back to the coordinates of the last moveTo.,"

closePath
public final void closePath()
Closes the current subpath by drawing a straight line back to
 the coordinates of the last moveTo.  If the path is already
 closed then this method has no effect.

Since:
1.6


"
Path2D,"contains(double x, double y)",boolean,"Tests if the specified coordinates are inside the boundary of the Shape, as described by the definition of insideness.","

contains
public final boolean contains(double x,
                              double y)
Tests if the specified coordinates are inside the boundary of the
 Shape, as described by the
 
 definition of insideness.

Specified by:
contains in interface Shape
Parameters:
x - the specified X coordinate to be tested
y - the specified Y coordinate to be tested
Returns:
true if the specified coordinates are inside
         the Shape boundary; false
         otherwise.
Since:
1.6


"
Path2D,"contains(double x, double y, double w, double h)",boolean,Tests if the interior of the Shape entirely contains the specified rectangular area.,"

contains
public final boolean contains(double x,
                              double y,
                              double w,
                              double h)
Tests if the interior of the Shape entirely contains
 the specified rectangular area.  All coordinates that lie inside
 the rectangular area must lie within the Shape for the
 entire rectangular area to be considered contained within the
 Shape.
 
 The Shape.contains() method allows a Shape
 implementation to conservatively return false when:
 

 the intersect method returns true and
 
 the calculations to determine whether or not the
 Shape entirely contains the rectangular area are
 prohibitively expensive.
 
 This means that for some Shapes this method might
 return false even though the Shape contains
 the rectangular area.
 The Area class performs
 more accurate geometric computations than most
 Shape objects and therefore can be used if a more precise
 answer is required.
 
 This method object may conservatively return false in
 cases where the specified rectangular area intersects a
 segment of the path, but that segment does not represent a
 boundary between the interior and exterior of the path.
 Such segments could lie entirely within the interior of the
 path if they are part of a path with a WIND_NON_ZERO
 winding rule or if the segments are retraced in the reverse
 direction such that the two sets of segments cancel each
 other out without any exterior area falling between them.
 To determine whether segments represent true boundaries of
 the interior of the path would require extensive calculations
 involving all of the segments of the path and the winding
 rule and are thus beyond the scope of this implementation.

Specified by:
contains in interface Shape
Parameters:
x - the X coordinate of the upper-left corner
          of the specified rectangular area
y - the Y coordinate of the upper-left corner
          of the specified rectangular area
w - the width of the specified rectangular area
h - the height of the specified rectangular area
Returns:
true if the interior of the Shape
          entirely contains the specified rectangular area;
          false otherwise or, if the Shape
          contains the rectangular area and the
          intersects method returns true
          and the containment calculations would be too expensive to
          perform.
Since:
1.6
See Also:
Area, 
Shape.intersects(double, double, double, double)


"
Path2D,"contains(PathIterator pi, double x, double y)",static boolean,Tests if the specified coordinates are inside the closed boundary of the specified PathIterator.,"

contains
public static boolean contains(PathIterator pi,
                               double x,
                               double y)
Tests if the specified coordinates are inside the closed
 boundary of the specified PathIterator.
 
 This method provides a basic facility for implementors of
 the Shape interface to implement support for the
 Shape.contains(double, double) method.

Parameters:
pi - the specified PathIterator
x - the specified X coordinate
y - the specified Y coordinate
Returns:
true if the specified coordinates are inside the
         specified PathIterator; false otherwise
Since:
1.6


"
Path2D,"contains(PathIterator pi, double x, double y, double w, double h)",static boolean,Tests if the specified rectangular area is entirely inside the closed boundary of the specified PathIterator.,"

contains
public static boolean contains(PathIterator pi,
                               double x,
                               double y,
                               double w,
                               double h)
Tests if the specified rectangular area is entirely inside the
 closed boundary of the specified PathIterator.
 
 This method provides a basic facility for implementors of
 the Shape interface to implement support for the
 Shape.contains(double, double, double, double) method.
 
 This method object may conservatively return false in
 cases where the specified rectangular area intersects a
 segment of the path, but that segment does not represent a
 boundary between the interior and exterior of the path.
 Such segments could lie entirely within the interior of the
 path if they are part of a path with a WIND_NON_ZERO
 winding rule or if the segments are retraced in the reverse
 direction such that the two sets of segments cancel each
 other out without any exterior area falling between them.
 To determine whether segments represent true boundaries of
 the interior of the path would require extensive calculations
 involving all of the segments of the path and the winding
 rule and are thus beyond the scope of this implementation.

Parameters:
pi - the specified PathIterator
x - the specified X coordinate
y - the specified Y coordinate
w - the width of the specified rectangular area
h - the height of the specified rectangular area
Returns:
true if the specified PathIterator contains
         the specified rectangular area; false otherwise.
Since:
1.6


"
Path2D,"contains(PathIterator pi, Point2D p)",static boolean,Tests if the specified Point2D is inside the closed boundary of the specified PathIterator.,"

contains
public static boolean contains(PathIterator pi,
                               Point2D p)
Tests if the specified Point2D is inside the closed
 boundary of the specified PathIterator.
 
 This method provides a basic facility for implementors of
 the Shape interface to implement support for the
 Shape.contains(Point2D) method.

Parameters:
pi - the specified PathIterator
p - the specified Point2D
Returns:
true if the specified coordinates are inside the
         specified PathIterator; false otherwise
Since:
1.6


"
Path2D,"contains(PathIterator pi, Rectangle2D r)",static boolean,Tests if the specified Rectangle2D is entirely inside the closed boundary of the specified PathIterator.,"

contains
public static boolean contains(PathIterator pi,
                               Rectangle2D r)
Tests if the specified Rectangle2D is entirely inside the
 closed boundary of the specified PathIterator.
 
 This method provides a basic facility for implementors of
 the Shape interface to implement support for the
 Shape.contains(Rectangle2D) method.
 
 This method object may conservatively return false in
 cases where the specified rectangular area intersects a
 segment of the path, but that segment does not represent a
 boundary between the interior and exterior of the path.
 Such segments could lie entirely within the interior of the
 path if they are part of a path with a WIND_NON_ZERO
 winding rule or if the segments are retraced in the reverse
 direction such that the two sets of segments cancel each
 other out without any exterior area falling between them.
 To determine whether segments represent true boundaries of
 the interior of the path would require extensive calculations
 involving all of the segments of the path and the winding
 rule and are thus beyond the scope of this implementation.

Parameters:
pi - the specified PathIterator
r - a specified Rectangle2D
Returns:
true if the specified PathIterator contains
         the specified Rectangle2D; false otherwise.
Since:
1.6


"
Path2D,contains(Point2D p),boolean,"Tests if a specified Point2D is inside the boundary of the Shape, as described by the definition of insideness.","

contains
public final boolean contains(Point2D p)
Tests if a specified Point2D is inside the boundary
 of the Shape, as described by the
 
 definition of insideness.

Specified by:
contains in interface Shape
Parameters:
p - the specified Point2D to be tested
Returns:
true if the specified Point2D is
          inside the boundary of the Shape;
          false otherwise.
Since:
1.6


"
Path2D,contains(Rectangle2D r),boolean,Tests if the interior of the Shape entirely contains the specified Rectangle2D.,"

contains
public final boolean contains(Rectangle2D r)
Tests if the interior of the Shape entirely contains the
 specified Rectangle2D.
 The Shape.contains() method allows a Shape
 implementation to conservatively return false when:
 

 the intersect method returns true and
 
 the calculations to determine whether or not the
 Shape entirely contains the Rectangle2D
 are prohibitively expensive.
 
 This means that for some Shapes this method might
 return false even though the Shape contains
 the Rectangle2D.
 The Area class performs
 more accurate geometric computations than most
 Shape objects and therefore can be used if a more precise
 answer is required.
 
 This method object may conservatively return false in
 cases where the specified rectangular area intersects a
 segment of the path, but that segment does not represent a
 boundary between the interior and exterior of the path.
 Such segments could lie entirely within the interior of the
 path if they are part of a path with a WIND_NON_ZERO
 winding rule or if the segments are retraced in the reverse
 direction such that the two sets of segments cancel each
 other out without any exterior area falling between them.
 To determine whether segments represent true boundaries of
 the interior of the path would require extensive calculations
 involving all of the segments of the path and the winding
 rule and are thus beyond the scope of this implementation.

Specified by:
contains in interface Shape
Parameters:
r - The specified Rectangle2D
Returns:
true if the interior of the Shape
          entirely contains the Rectangle2D;
          false otherwise or, if the Shape
          contains the Rectangle2D and the
          intersects method returns true
          and the containment calculations would be too expensive to
          perform.
Since:
1.6
See Also:
Shape.contains(double, double, double, double)


"
Path2D,createTransformedShape(AffineTransform at),Shape,Returns a new Shape representing a transformed version of this Path2D.,"

createTransformedShape
public final Shape createTransformedShape(AffineTransform at)
Returns a new Shape representing a transformed version
 of this Path2D.
 Note that the exact type and coordinate precision of the return
 value is not specified for this method.
 The method will return a Shape that contains no less precision
 for the transformed geometry than this Path2D currently
 maintains, but it may contain no more precision either.
 If the tradeoff of precision vs. storage size in the result is
 important then the convenience constructors in the
 Path2D.Float
 and
 Path2D.Double
 subclasses should be used to make the choice explicit.

Parameters:
at - the AffineTransform used to transform a
           new Shape.
Returns:
a new Shape, transformed with the specified
         AffineTransform.
Since:
1.6


"
Path2D,"curveTo(double x1, double y1, double x2, double y2, double x3, double y3)",abstract void,"Adds a curved segment, defined by three new points, to the path by drawing a Bézier curve that intersects both the current coordinates and the specified coordinates (x3,y3), using the specified points (x1,y1) and (x2,y2) as Bézier control points.","

curveTo
public abstract void curveTo(double x1,
                             double y1,
                             double x2,
                             double y2,
                             double x3,
                             double y3)
Adds a curved segment, defined by three new points, to the path by
 drawing a Bézier curve that intersects both the current
 coordinates and the specified coordinates (x3,y3),
 using the specified points (x1,y1) and (x2,y2) as
 Bézier control points.
 All coordinates are specified in double precision.

Parameters:
x1 - the X coordinate of the first Bézier control point
y1 - the Y coordinate of the first Bézier control point
x2 - the X coordinate of the second Bézier control point
y2 - the Y coordinate of the second Bézier control point
x3 - the X coordinate of the final end point
y3 - the Y coordinate of the final end point
Since:
1.6


"
Path2D,getBounds(),Rectangle,Returns an integer Rectangle that completely encloses the Shape.,"

getBounds
public final Rectangle getBounds()
Returns an integer Rectangle that completely encloses the
 Shape.  Note that there is no guarantee that the
 returned Rectangle is the smallest bounding box that
 encloses the Shape, only that the Shape
 lies entirely within the indicated  Rectangle.  The
 returned Rectangle might also fail to completely
 enclose the Shape if the Shape overflows
 the limited range of the integer data type.  The
 getBounds2D method generally returns a
 tighter bounding box due to its greater flexibility in
 representation.

 
 Note that the 
 definition of insideness can lead to situations where points
 on the defining outline of the shape may not be considered
 contained in the returned bounds object, but only in cases
 where those points are also not considered contained in the original
 shape.
 

 If a point is inside the shape according to the
 contains(point) method, then
 it must be inside the returned Rectangle bounds object
 according to the contains(point)
 method of the bounds. Specifically:
 

shape.contains(x,y) requires bounds.contains(x,y)


 If a point is not inside the shape, then it might
 still be contained in the bounds object:
 

bounds.contains(x,y) does not imply shape.contains(x,y)


Specified by:
getBounds in interface Shape
Returns:
an integer Rectangle that completely encloses
                 the Shape.
Since:
1.6
See Also:
Shape.getBounds2D()


"
Path2D,getCurrentPoint(),Point2D,Returns the coordinates most recently added to the end of the path as a Point2D object.,"

getCurrentPoint
public final Point2D getCurrentPoint()
Returns the coordinates most recently added to the end of the path
 as a Point2D object.

Returns:
a Point2D object containing the ending coordinates of
         the path or null if there are no points in the path.
Since:
1.6


"
Path2D,"getPathIterator(AffineTransform at, double flatness)",PathIterator,Returns an iterator object that iterates along the Shape boundary and provides access to a flattened view of the Shape outline geometry.,"

getPathIterator
public final PathIterator getPathIterator(AffineTransform at,
                                          double flatness)
Returns an iterator object that iterates along the Shape
 boundary and provides access to a flattened view of the
 Shape outline geometry.
 
 Only SEG_MOVETO, SEG_LINETO, and SEG_CLOSE point types are
 returned by the iterator.
 
 If an optional AffineTransform is specified,
 the coordinates returned in the iteration are transformed
 accordingly.
 
 The amount of subdivision of the curved segments is controlled
 by the flatness parameter, which specifies the
 maximum distance that any point on the unflattened transformed
 curve can deviate from the returned flattened path segments.
 Note that a limit on the accuracy of the flattened path might be
 silently imposed, causing very small flattening parameters to be
 treated as larger values.  This limit, if there is one, is
 defined by the particular implementation that is used.
 
 Each call to this method returns a fresh PathIterator
 object that traverses the Shape object geometry
 independently from any other PathIterator objects in use at
 the same time.
 
 It is recommended, but not guaranteed, that objects
 implementing the Shape interface isolate iterations
 that are in process from any changes that might occur to the original
 object's geometry during such iterations.
 
 The iterator for this class is not multi-threaded safe,
 which means that this Path2D class does not
 guarantee that modifications to the geometry of this
 Path2D object do not affect any iterations of
 that geometry that are already in process.

Specified by:
getPathIterator in interface Shape
Parameters:
at - an optional AffineTransform to be applied to the
          coordinates as they are returned in the iteration, or
          null if untransformed coordinates are desired
flatness - the maximum distance that the line segments used to
          approximate the curved segments are allowed to deviate
          from any point on the original curve
Returns:
a new PathIterator that independently traverses
         a flattened view of the geometry of the  Shape.
Since:
1.6


"
Path2D,getWindingRule(),int,Returns the fill style winding rule.,"

getWindingRule
public final int getWindingRule()
Returns the fill style winding rule.

Returns:
an integer representing the current winding rule.
Since:
1.6
See Also:
WIND_EVEN_ODD, 
WIND_NON_ZERO, 
setWindingRule(int)


"
Path2D,"intersects(double x, double y, double w, double h)",boolean,Tests if the interior of the Shape intersects the interior of a specified rectangular area.,"

intersects
public final boolean intersects(double x,
                                double y,
                                double w,
                                double h)
Tests if the interior of the Shape intersects the
 interior of a specified rectangular area.
 The rectangular area is considered to intersect the Shape
 if any point is contained in both the interior of the
 Shape and the specified rectangular area.
 
 The Shape.intersects() method allows a Shape
 implementation to conservatively return true when:
 

 there is a high probability that the rectangular area and the
 Shape intersect, but
 
 the calculations to accurately determine this intersection
 are prohibitively expensive.
 
 This means that for some Shapes this method might
 return true even though the rectangular area does not
 intersect the Shape.
 The Area class performs
 more accurate computations of geometric intersection than most
 Shape objects and therefore can be used if a more precise
 answer is required.
 
 This method object may conservatively return true in
 cases where the specified rectangular area intersects a
 segment of the path, but that segment does not represent a
 boundary between the interior and exterior of the path.
 Such a case may occur if some set of segments of the
 path are retraced in the reverse direction such that the
 two sets of segments cancel each other out without any
 interior area between them.
 To determine whether segments represent true boundaries of
 the interior of the path would require extensive calculations
 involving all of the segments of the path and the winding
 rule and are thus beyond the scope of this implementation.

Specified by:
intersects in interface Shape
Parameters:
x - the X coordinate of the upper-left corner
          of the specified rectangular area
y - the Y coordinate of the upper-left corner
          of the specified rectangular area
w - the width of the specified rectangular area
h - the height of the specified rectangular area
Returns:
true if the interior of the Shape and
          the interior of the rectangular area intersect, or are
          both highly likely to intersect and intersection calculations
          would be too expensive to perform; false otherwise.
Since:
1.6
See Also:
Area


"
Path2D,"intersects(PathIterator pi, double x, double y, double w, double h)",static boolean,Tests if the interior of the specified PathIterator intersects the interior of a specified set of rectangular coordinates.,"

intersects
public static boolean intersects(PathIterator pi,
                                 double x,
                                 double y,
                                 double w,
                                 double h)
Tests if the interior of the specified PathIterator
 intersects the interior of a specified set of rectangular
 coordinates.
 
 This method provides a basic facility for implementors of
 the Shape interface to implement support for the
 Shape.intersects(double, double, double, double) method.
 
 This method object may conservatively return true in
 cases where the specified rectangular area intersects a
 segment of the path, but that segment does not represent a
 boundary between the interior and exterior of the path.
 Such a case may occur if some set of segments of the
 path are retraced in the reverse direction such that the
 two sets of segments cancel each other out without any
 interior area between them.
 To determine whether segments represent true boundaries of
 the interior of the path would require extensive calculations
 involving all of the segments of the path and the winding
 rule and are thus beyond the scope of this implementation.

Parameters:
pi - the specified PathIterator
x - the specified X coordinate
y - the specified Y coordinate
w - the width of the specified rectangular coordinates
h - the height of the specified rectangular coordinates
Returns:
true if the specified PathIterator and
         the interior of the specified set of rectangular
         coordinates intersect each other; false otherwise.
Since:
1.6


"
Path2D,"intersects(PathIterator pi, Rectangle2D r)",static boolean,Tests if the interior of the specified PathIterator intersects the interior of a specified Rectangle2D.,"

intersects
public static boolean intersects(PathIterator pi,
                                 Rectangle2D r)
Tests if the interior of the specified PathIterator
 intersects the interior of a specified Rectangle2D.
 
 This method provides a basic facility for implementors of
 the Shape interface to implement support for the
 Shape.intersects(Rectangle2D) method.
 
 This method object may conservatively return true in
 cases where the specified rectangular area intersects a
 segment of the path, but that segment does not represent a
 boundary between the interior and exterior of the path.
 Such a case may occur if some set of segments of the
 path are retraced in the reverse direction such that the
 two sets of segments cancel each other out without any
 interior area between them.
 To determine whether segments represent true boundaries of
 the interior of the path would require extensive calculations
 involving all of the segments of the path and the winding
 rule and are thus beyond the scope of this implementation.

Parameters:
pi - the specified PathIterator
r - the specified Rectangle2D
Returns:
true if the specified PathIterator and
         the interior of the specified Rectangle2D
         intersect each other; false otherwise.
Since:
1.6


"
Path2D,intersects(Rectangle2D r),boolean,Tests if the interior of the Shape intersects the interior of a specified Rectangle2D.,"

intersects
public final boolean intersects(Rectangle2D r)
Tests if the interior of the Shape intersects the
 interior of a specified Rectangle2D.
 The Shape.intersects() method allows a Shape
 implementation to conservatively return true when:
 

 there is a high probability that the Rectangle2D and the
 Shape intersect, but
 
 the calculations to accurately determine this intersection
 are prohibitively expensive.
 
 This means that for some Shapes this method might
 return true even though the Rectangle2D does not
 intersect the Shape.
 The Area class performs
 more accurate computations of geometric intersection than most
 Shape objects and therefore can be used if a more precise
 answer is required.
 
 This method object may conservatively return true in
 cases where the specified rectangular area intersects a
 segment of the path, but that segment does not represent a
 boundary between the interior and exterior of the path.
 Such a case may occur if some set of segments of the
 path are retraced in the reverse direction such that the
 two sets of segments cancel each other out without any
 interior area between them.
 To determine whether segments represent true boundaries of
 the interior of the path would require extensive calculations
 involving all of the segments of the path and the winding
 rule and are thus beyond the scope of this implementation.

Specified by:
intersects in interface Shape
Parameters:
r - the specified Rectangle2D
Returns:
true if the interior of the Shape and
          the interior of the specified Rectangle2D
          intersect, or are both highly likely to intersect and intersection
          calculations would be too expensive to perform; false
          otherwise.
Since:
1.6
See Also:
Shape.intersects(double, double, double, double)


"
Path2D,"lineTo(double x, double y)",abstract void,Adds a point to the path by drawing a straight line from the current coordinates to the new specified coordinates specified in double precision.,"

lineTo
public abstract void lineTo(double x,
                            double y)
Adds a point to the path by drawing a straight line from the
 current coordinates to the new specified coordinates
 specified in double precision.

Parameters:
x - the specified X coordinate
y - the specified Y coordinate
Since:
1.6


"
Path2D,"moveTo(double x, double y)",abstract void,Adds a point to the path by moving to the specified coordinates specified in double precision.,"

moveTo
public abstract void moveTo(double x,
                            double y)
Adds a point to the path by moving to the specified
 coordinates specified in double precision.

Parameters:
x - the specified X coordinate
y - the specified Y coordinate
Since:
1.6


"
Path2D,"quadTo(double x1, double y1, double x2, double y2)",abstract void,"Adds a curved segment, defined by two new points, to the path by drawing a Quadratic curve that intersects both the current coordinates and the specified coordinates (x2,y2), using the specified point (x1,y1) as a quadratic parametric control point.","

quadTo
public abstract void quadTo(double x1,
                            double y1,
                            double x2,
                            double y2)
Adds a curved segment, defined by two new points, to the path by
 drawing a Quadratic curve that intersects both the current
 coordinates and the specified coordinates (x2,y2),
 using the specified point (x1,y1) as a quadratic
 parametric control point.
 All coordinates are specified in double precision.

Parameters:
x1 - the X coordinate of the quadratic control point
y1 - the Y coordinate of the quadratic control point
x2 - the X coordinate of the final end point
y2 - the Y coordinate of the final end point
Since:
1.6


"
Path2D,reset(),void,Resets the path to empty.,"

reset
public final void reset()
Resets the path to empty.  The append position is set back to the
 beginning of the path and all coordinates and point types are
 forgotten.

Since:
1.6


"
Path2D,setWindingRule(int rule),void,Sets the winding rule for this path to the specified value.,"

setWindingRule
public final void setWindingRule(int rule)
Sets the winding rule for this path to the specified value.

Parameters:
rule - an integer representing the specified
             winding rule
Throws:
IllegalArgumentException - if
          rule is not either
          WIND_EVEN_ODD or
          WIND_NON_ZERO
Since:
1.6
See Also:
getWindingRule()


"
Path2D,transform(AffineTransform at),abstract void,Transforms the geometry of this path using the specified AffineTransform.,"

transform
public abstract void transform(AffineTransform at)
Transforms the geometry of this path using the specified
 AffineTransform.
 The geometry is transformed in place, which permanently changes the
 boundary defined by this object.

Parameters:
at - the AffineTransform used to transform the area
Since:
1.6


"
Path2D.Double,"append(PathIterator pi, boolean connect)",void,"Appends the geometry of the specified PathIterator object to the path, possibly connecting the new geometry to the existing path segments with a line segment.","

append
public final void append(PathIterator pi,
                         boolean connect)
Appends the geometry of the specified
 PathIterator object
 to the path, possibly connecting the new geometry to the existing
 path segments with a line segment.
 If the connect parameter is true and the
 path is not empty then any initial moveTo in the
 geometry of the appended Shape is turned into a
 lineTo segment.
 If the destination coordinates of such a connecting lineTo
 segment match the ending coordinates of a currently open
 subpath then the segment is omitted as superfluous.
 The winding rule of the specified Shape is ignored
 and the appended geometry is governed by the winding
 rule specified for this path.

Specified by:
append in class Path2D
Parameters:
pi - the PathIterator whose geometry is appended to
           this path
connect - a boolean to control whether or not to turn an initial
                moveTo segment into a lineTo segment
                to connect the new geometry to the existing path
Since:
1.6


"
Path2D.Double,clone(),Object,Creates a new object of the same class as this object.,"

clone
public final Object clone()
Creates a new object of the same class as this object.

Specified by:
clone in class Path2D
Returns:
a clone of this instance.
Throws:
OutOfMemoryError - if there is not enough memory.
Since:
1.6
See Also:
Cloneable


"
Path2D.Double,"curveTo(double x1, double y1, double x2, double y2, double x3, double y3)",void,"Adds a curved segment, defined by three new points, to the path by drawing a Bézier curve that intersects both the current coordinates and the specified coordinates (x3,y3), using the specified points (x1,y1) and (x2,y2) as Bézier control points.","

curveTo
public final void curveTo(double x1,
                          double y1,
                          double x2,
                          double y2,
                          double x3,
                          double y3)
Adds a curved segment, defined by three new points, to the path by
 drawing a Bézier curve that intersects both the current
 coordinates and the specified coordinates (x3,y3),
 using the specified points (x1,y1) and (x2,y2) as
 Bézier control points.
 All coordinates are specified in double precision.

Specified by:
curveTo in class Path2D
Parameters:
x1 - the X coordinate of the first Bézier control point
y1 - the Y coordinate of the first Bézier control point
x2 - the X coordinate of the second Bézier control point
y2 - the Y coordinate of the second Bézier control point
x3 - the X coordinate of the final end point
y3 - the Y coordinate of the final end point
Since:
1.6


"
Path2D.Double,getBounds2D(),Rectangle2D,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.,"

getBounds2D
public final Rectangle2D getBounds2D()
Returns a high precision and more accurate bounding box of
 the Shape than the getBounds method.
 Note that there is no guarantee that the returned
 Rectangle2D is the smallest bounding box that encloses
 the Shape, only that the Shape lies
 entirely within the indicated Rectangle2D.  The
 bounding box returned by this method is usually tighter than that
 returned by the getBounds method and never fails due
 to overflow problems since the return value can be an instance of
 the Rectangle2D that uses double precision values to
 store the dimensions.

 
 Note that the 
 definition of insideness can lead to situations where points
 on the defining outline of the shape may not be considered
 contained in the returned bounds object, but only in cases
 where those points are also not considered contained in the original
 shape.
 

 If a point is inside the shape according to the
 contains(point) method, then it must
 be inside the returned Rectangle2D bounds object according
 to the contains(point) method of the
 bounds. Specifically:
 

shape.contains(p) requires bounds.contains(p)


 If a point is not inside the shape, then it might
 still be contained in the bounds object:
 

bounds.contains(p) does not imply shape.contains(p)


Specified by:
getBounds2D in interface Shape
Returns:
an instance of Rectangle2D that is a
                 high-precision bounding box of the Shape.
Since:
1.6
See Also:
Shape.getBounds()


"
Path2D.Double,getPathIterator(AffineTransform at),PathIterator,Returns an iterator object that iterates along the Shape boundary and provides access to the geometry of the Shape outline.,"

getPathIterator
public final PathIterator getPathIterator(AffineTransform at)
Returns an iterator object that iterates along the
 Shape boundary and provides access to the geometry of the
 Shape outline.  If an optional AffineTransform
 is specified, the coordinates returned in the iteration are
 transformed accordingly.
 
 Each call to this method returns a fresh PathIterator
 object that traverses the geometry of the Shape object
 independently from any other PathIterator objects in use
 at the same time.
 
 It is recommended, but not guaranteed, that objects
 implementing the Shape interface isolate iterations
 that are in process from any changes that might occur to the original
 object's geometry during such iterations.
 
 The iterator for this class is not multi-threaded safe,
 which means that the Path2D class does not
 guarantee that modifications to the geometry of this
 Path2D object do not affect any iterations of
 that geometry that are already in process.

Specified by:
getPathIterator in interface Shape
Parameters:
at - an AffineTransform
Returns:
a new PathIterator that iterates along the boundary
         of this Shape and provides access to the geometry
         of this Shape's outline
Since:
1.6


"
Path2D.Double,"lineTo(double x, double y)",void,Adds a point to the path by drawing a straight line from the current coordinates to the new specified coordinates specified in double precision.,"

lineTo
public final void lineTo(double x,
                         double y)
Adds a point to the path by drawing a straight line from the
 current coordinates to the new specified coordinates
 specified in double precision.

Specified by:
lineTo in class Path2D
Parameters:
x - the specified X coordinate
y - the specified Y coordinate
Since:
1.6


"
Path2D.Double,"moveTo(double x, double y)",void,Adds a point to the path by moving to the specified coordinates specified in double precision.,"

moveTo
public final void moveTo(double x,
                         double y)
Adds a point to the path by moving to the specified
 coordinates specified in double precision.

Specified by:
moveTo in class Path2D
Parameters:
x - the specified X coordinate
y - the specified Y coordinate
Since:
1.6


"
Path2D.Double,"quadTo(double x1, double y1, double x2, double y2)",void,"Adds a curved segment, defined by two new points, to the path by drawing a Quadratic curve that intersects both the current coordinates and the specified coordinates (x2,y2), using the specified point (x1,y1) as a quadratic parametric control point.","

quadTo
public final void quadTo(double x1,
                         double y1,
                         double x2,
                         double y2)
Adds a curved segment, defined by two new points, to the path by
 drawing a Quadratic curve that intersects both the current
 coordinates and the specified coordinates (x2,y2),
 using the specified point (x1,y1) as a quadratic
 parametric control point.
 All coordinates are specified in double precision.

Specified by:
quadTo in class Path2D
Parameters:
x1 - the X coordinate of the quadratic control point
y1 - the Y coordinate of the quadratic control point
x2 - the X coordinate of the final end point
y2 - the Y coordinate of the final end point
Since:
1.6


"
Path2D.Double,transform(AffineTransform at),void,Transforms the geometry of this path using the specified AffineTransform.,"

transform
public final void transform(AffineTransform at)
Transforms the geometry of this path using the specified
 AffineTransform.
 The geometry is transformed in place, which permanently changes the
 boundary defined by this object.

Specified by:
transform in class Path2D
Parameters:
at - the AffineTransform used to transform the area
Since:
1.6


"
Path2D.Float,"append(PathIterator pi, boolean connect)",void,"Appends the geometry of the specified PathIterator object to the path, possibly connecting the new geometry to the existing path segments with a line segment.","

append
public final void append(PathIterator pi,
                         boolean connect)
Appends the geometry of the specified
 PathIterator object
 to the path, possibly connecting the new geometry to the existing
 path segments with a line segment.
 If the connect parameter is true and the
 path is not empty then any initial moveTo in the
 geometry of the appended Shape is turned into a
 lineTo segment.
 If the destination coordinates of such a connecting lineTo
 segment match the ending coordinates of a currently open
 subpath then the segment is omitted as superfluous.
 The winding rule of the specified Shape is ignored
 and the appended geometry is governed by the winding
 rule specified for this path.

Specified by:
append in class Path2D
Parameters:
pi - the PathIterator whose geometry is appended to
           this path
connect - a boolean to control whether or not to turn an initial
                moveTo segment into a lineTo segment
                to connect the new geometry to the existing path
Since:
1.6


"
Path2D.Float,clone(),Object,Creates a new object of the same class as this object.,"

clone
public final Object clone()
Creates a new object of the same class as this object.

Specified by:
clone in class Path2D
Returns:
a clone of this instance.
Throws:
OutOfMemoryError - if there is not enough memory.
Since:
1.6
See Also:
Cloneable


"
Path2D.Float,"curveTo(double x1, double y1, double x2, double y2, double x3, double y3)",void,"Adds a curved segment, defined by three new points, to the path by drawing a Bézier curve that intersects both the current coordinates and the specified coordinates (x3,y3), using the specified points (x1,y1) and (x2,y2) as Bézier control points.","

curveTo
public final void curveTo(double x1,
                          double y1,
                          double x2,
                          double y2,
                          double x3,
                          double y3)
Adds a curved segment, defined by three new points, to the path by
 drawing a Bézier curve that intersects both the current
 coordinates and the specified coordinates (x3,y3),
 using the specified points (x1,y1) and (x2,y2) as
 Bézier control points.
 All coordinates are specified in double precision.

Specified by:
curveTo in class Path2D
Parameters:
x1 - the X coordinate of the first Bézier control point
y1 - the Y coordinate of the first Bézier control point
x2 - the X coordinate of the second Bézier control point
y2 - the Y coordinate of the second Bézier control point
x3 - the X coordinate of the final end point
y3 - the Y coordinate of the final end point
Since:
1.6


"
Path2D.Float,"curveTo(float x1, float y1, float x2, float y2, float x3, float y3)",void,"Adds a curved segment, defined by three new points, to the path by drawing a Bézier curve that intersects both the current coordinates and the specified coordinates (x3,y3), using the specified points (x1,y1) and (x2,y2) as Bézier control points.","

curveTo
public final void curveTo(float x1,
                          float y1,
                          float x2,
                          float y2,
                          float x3,
                          float y3)
Adds a curved segment, defined by three new points, to the path by
 drawing a Bézier curve that intersects both the current
 coordinates and the specified coordinates (x3,y3),
 using the specified points (x1,y1) and (x2,y2) as
 Bézier control points.
 All coordinates are specified in float precision.
 
 This method provides a single precision variant of
 the double precision curveTo() method on the
 base Path2D class.

Parameters:
x1 - the X coordinate of the first Bézier control point
y1 - the Y coordinate of the first Bézier control point
x2 - the X coordinate of the second Bézier control point
y2 - the Y coordinate of the second Bézier control point
x3 - the X coordinate of the final end point
y3 - the Y coordinate of the final end point
Since:
1.6
See Also:
Path2D.curveTo(double, double, double, double, double, double)


"
Path2D.Float,getBounds2D(),Rectangle2D,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.,"

getBounds2D
public final Rectangle2D getBounds2D()
Returns a high precision and more accurate bounding box of
 the Shape than the getBounds method.
 Note that there is no guarantee that the returned
 Rectangle2D is the smallest bounding box that encloses
 the Shape, only that the Shape lies
 entirely within the indicated Rectangle2D.  The
 bounding box returned by this method is usually tighter than that
 returned by the getBounds method and never fails due
 to overflow problems since the return value can be an instance of
 the Rectangle2D that uses double precision values to
 store the dimensions.

 
 Note that the 
 definition of insideness can lead to situations where points
 on the defining outline of the shape may not be considered
 contained in the returned bounds object, but only in cases
 where those points are also not considered contained in the original
 shape.
 

 If a point is inside the shape according to the
 contains(point) method, then it must
 be inside the returned Rectangle2D bounds object according
 to the contains(point) method of the
 bounds. Specifically:
 

shape.contains(p) requires bounds.contains(p)


 If a point is not inside the shape, then it might
 still be contained in the bounds object:
 

bounds.contains(p) does not imply shape.contains(p)


Specified by:
getBounds2D in interface Shape
Returns:
an instance of Rectangle2D that is a
                 high-precision bounding box of the Shape.
Since:
1.6
See Also:
Shape.getBounds()


"
Path2D.Float,getPathIterator(AffineTransform at),PathIterator,Returns an iterator object that iterates along the Shape boundary and provides access to the geometry of the Shape outline.,"

getPathIterator
public final PathIterator getPathIterator(AffineTransform at)
Returns an iterator object that iterates along the
 Shape boundary and provides access to the geometry of the
 Shape outline.  If an optional AffineTransform
 is specified, the coordinates returned in the iteration are
 transformed accordingly.
 
 Each call to this method returns a fresh PathIterator
 object that traverses the geometry of the Shape object
 independently from any other PathIterator objects in use
 at the same time.
 
 It is recommended, but not guaranteed, that objects
 implementing the Shape interface isolate iterations
 that are in process from any changes that might occur to the original
 object's geometry during such iterations.
 
 The iterator for this class is not multi-threaded safe,
 which means that the Path2D class does not
 guarantee that modifications to the geometry of this
 Path2D object do not affect any iterations of
 that geometry that are already in process.

Specified by:
getPathIterator in interface Shape
Parameters:
at - an optional AffineTransform to be applied to the
          coordinates as they are returned in the iteration, or
          null if untransformed coordinates are desired
Returns:
a new PathIterator object, which independently
          traverses the geometry of the Shape.
Since:
1.6


"
Path2D.Float,"lineTo(double x, double y)",void,Adds a point to the path by drawing a straight line from the current coordinates to the new specified coordinates specified in double precision.,"

lineTo
public final void lineTo(double x,
                         double y)
Adds a point to the path by drawing a straight line from the
 current coordinates to the new specified coordinates
 specified in double precision.

Specified by:
lineTo in class Path2D
Parameters:
x - the specified X coordinate
y - the specified Y coordinate
Since:
1.6


"
Path2D.Float,"lineTo(float x, float y)",void,Adds a point to the path by drawing a straight line from the current coordinates to the new specified coordinates specified in float precision.,"

lineTo
public final void lineTo(float x,
                         float y)
Adds a point to the path by drawing a straight line from the
 current coordinates to the new specified coordinates
 specified in float precision.
 
 This method provides a single precision variant of
 the double precision lineTo() method on the
 base Path2D class.

Parameters:
x - the specified X coordinate
y - the specified Y coordinate
Since:
1.6
See Also:
Path2D.lineTo(double, double)


"
Path2D.Float,"moveTo(double x, double y)",void,Adds a point to the path by moving to the specified coordinates specified in double precision.,"

moveTo
public final void moveTo(double x,
                         double y)
Adds a point to the path by moving to the specified
 coordinates specified in double precision.

Specified by:
moveTo in class Path2D
Parameters:
x - the specified X coordinate
y - the specified Y coordinate
Since:
1.6


"
Path2D.Float,"moveTo(float x, float y)",void,Adds a point to the path by moving to the specified coordinates specified in float precision.,"

moveTo
public final void moveTo(float x,
                         float y)
Adds a point to the path by moving to the specified
 coordinates specified in float precision.
 
 This method provides a single precision variant of
 the double precision moveTo() method on the
 base Path2D class.

Parameters:
x - the specified X coordinate
y - the specified Y coordinate
Since:
1.6
See Also:
Path2D.moveTo(double, double)


"
Path2D.Float,"quadTo(double x1, double y1, double x2, double y2)",void,"Adds a curved segment, defined by two new points, to the path by drawing a Quadratic curve that intersects both the current coordinates and the specified coordinates (x2,y2), using the specified point (x1,y1) as a quadratic parametric control point.","

quadTo
public final void quadTo(double x1,
                         double y1,
                         double x2,
                         double y2)
Adds a curved segment, defined by two new points, to the path by
 drawing a Quadratic curve that intersects both the current
 coordinates and the specified coordinates (x2,y2),
 using the specified point (x1,y1) as a quadratic
 parametric control point.
 All coordinates are specified in double precision.

Specified by:
quadTo in class Path2D
Parameters:
x1 - the X coordinate of the quadratic control point
y1 - the Y coordinate of the quadratic control point
x2 - the X coordinate of the final end point
y2 - the Y coordinate of the final end point
Since:
1.6


"
Path2D.Float,"quadTo(float x1, float y1, float x2, float y2)",void,"Adds a curved segment, defined by two new points, to the path by drawing a Quadratic curve that intersects both the current coordinates and the specified coordinates (x2,y2), using the specified point (x1,y1) as a quadratic parametric control point.","

quadTo
public final void quadTo(float x1,
                         float y1,
                         float x2,
                         float y2)
Adds a curved segment, defined by two new points, to the path by
 drawing a Quadratic curve that intersects both the current
 coordinates and the specified coordinates (x2,y2),
 using the specified point (x1,y1) as a quadratic
 parametric control point.
 All coordinates are specified in float precision.
 
 This method provides a single precision variant of
 the double precision quadTo() method on the
 base Path2D class.

Parameters:
x1 - the X coordinate of the quadratic control point
y1 - the Y coordinate of the quadratic control point
x2 - the X coordinate of the final end point
y2 - the Y coordinate of the final end point
Since:
1.6
See Also:
Path2D.quadTo(double, double, double, double)


"
Path2D.Float,transform(AffineTransform at),void,Transforms the geometry of this path using the specified AffineTransform.,"

transform
public final void transform(AffineTransform at)
Transforms the geometry of this path using the specified
 AffineTransform.
 The geometry is transformed in place, which permanently changes the
 boundary defined by this object.

Specified by:
transform in class Path2D
Parameters:
at - the AffineTransform used to transform the area
Since:
1.6


"
Point2D,clone(),Object,Creates a new object of the same class and with the same contents as this object.,"

clone
public Object clone()
Creates a new object of the same class and with the
 same contents as this object.

Overrides:
clone in class Object
Returns:
a clone of this instance.
Throws:
OutOfMemoryError - if there is not enough memory.
Since:
1.2
See Also:
Cloneable


"
Point2D,"distance(double px, double py)",double,Returns the distance from this Point2D to a specified point.,"

distance
public double distance(double px,
                       double py)
Returns the distance from this Point2D to
 a specified point.

Parameters:
px - the X coordinate of the specified point to be measured
           against this Point2D
py - the Y coordinate of the specified point to be measured
           against this Point2D
Returns:
the distance between this Point2D
 and a specified point.
Since:
1.2


"
Point2D,"distance(double x1, double y1, double x2, double y2)",static double,Returns the distance between two points.,"

distance
public static double distance(double x1,
                              double y1,
                              double x2,
                              double y2)
Returns the distance between two points.

Parameters:
x1 - the X coordinate of the first specified point
y1 - the Y coordinate of the first specified point
x2 - the X coordinate of the second specified point
y2 - the Y coordinate of the second specified point
Returns:
the distance between the two sets of specified
 coordinates.
Since:
1.2


"
Point2D,distance(Point2D pt),double,Returns the distance from this Point2D to a specified Point2D.,"

distance
public double distance(Point2D pt)
Returns the distance from this Point2D to a
 specified Point2D.

Parameters:
pt - the specified point to be measured
           against this Point2D
Returns:
the distance between this Point2D and
 the specified Point2D.
Since:
1.2


"
Point2D,"distanceSq(double px, double py)",double,Returns the square of the distance from this Point2D to a specified point.,"

distanceSq
public double distanceSq(double px,
                         double py)
Returns the square of the distance from this
 Point2D to a specified point.

Parameters:
px - the X coordinate of the specified point to be measured
           against this Point2D
py - the Y coordinate of the specified point to be measured
           against this Point2D
Returns:
the square of the distance between this
 Point2D and the specified point.
Since:
1.2


"
Point2D,"distanceSq(double x1, double y1, double x2, double y2)",static double,Returns the square of the distance between two points.,"

distanceSq
public static double distanceSq(double x1,
                                double y1,
                                double x2,
                                double y2)
Returns the square of the distance between two points.

Parameters:
x1 - the X coordinate of the first specified point
y1 - the Y coordinate of the first specified point
x2 - the X coordinate of the second specified point
y2 - the Y coordinate of the second specified point
Returns:
the square of the distance between the two
 sets of specified coordinates.
Since:
1.2


"
Point2D,distanceSq(Point2D pt),double,Returns the square of the distance from this Point2D to a specified Point2D.,"

distanceSq
public double distanceSq(Point2D pt)
Returns the square of the distance from this
 Point2D to a specified Point2D.

Parameters:
pt - the specified point to be measured
           against this Point2D
Returns:
the square of the distance between this
 Point2D to a specified Point2D.
Since:
1.2


"
Point2D,equals(Object obj),boolean,Determines whether or not two points are equal.,"

equals
public boolean equals(Object obj)
Determines whether or not two points are equal. Two instances of
 Point2D are equal if the values of their
 x and y member fields, representing
 their position in the coordinate space, are the same.

Overrides:
equals in class Object
Parameters:
obj - an object to be compared with this Point2D
Returns:
true if the object to be compared is
         an instance of Point2D and has
         the same values; false otherwise.
Since:
1.2
See Also:
Object.hashCode(), 
HashMap


"
Point2D,getX(),abstract double,Returns the X coordinate of this Point2D in double precision.,"

getX
public abstract double getX()
Returns the X coordinate of this Point2D in
 double precision.

Returns:
the X coordinate of this Point2D.
Since:
1.2


"
Point2D,getY(),abstract double,Returns the Y coordinate of this Point2D in double precision.,"

getY
public abstract double getY()
Returns the Y coordinate of this Point2D in
 double precision.

Returns:
the Y coordinate of this Point2D.
Since:
1.2


"
Point2D,hashCode(),int,Returns the hashcode for this Point2D.,"

hashCode
public int hashCode()
Returns the hashcode for this Point2D.

Overrides:
hashCode in class Object
Returns:
a hash code for this Point2D.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Point2D,"setLocation(double x, double y)",abstract void,Sets the location of this Point2D to the specified double coordinates.,"

setLocation
public abstract void setLocation(double x,
                                 double y)
Sets the location of this Point2D to the
 specified double coordinates.

Parameters:
x - the new X coordinate of this Point2D
y - the new Y coordinate of this Point2D
Since:
1.2


"
Point2D,setLocation(Point2D p),void,Sets the location of this Point2D to the same coordinates as the specified Point2D object.,"

setLocation
public void setLocation(Point2D p)
Sets the location of this Point2D to the same
 coordinates as the specified Point2D object.

Parameters:
p - the specified Point2D to which to set
 this Point2D
Since:
1.2


"
Point2D.Double,getX(),double,Returns the X coordinate of this Point2D in double precision.,"

getX
public double getX()
Returns the X coordinate of this Point2D in
 double precision.

Specified by:
getX in class Point2D
Returns:
the X coordinate of this Point2D.
Since:
1.2


"
Point2D.Double,getY(),double,Returns the Y coordinate of this Point2D in double precision.,"

getY
public double getY()
Returns the Y coordinate of this Point2D in
 double precision.

Specified by:
getY in class Point2D
Returns:
the Y coordinate of this Point2D.
Since:
1.2


"
Point2D.Double,"setLocation(double x, double y)",void,Sets the location of this Point2D to the specified double coordinates.,"

setLocation
public void setLocation(double x,
                        double y)
Sets the location of this Point2D to the
 specified double coordinates.

Specified by:
setLocation in class Point2D
Parameters:
x - the new X coordinate of this Point2D
y - the new Y coordinate of this Point2D
Since:
1.2


"
Point2D.Double,toString(),String,Returns a String that represents the value of this Point2D.,"

toString
public String toString()
Returns a String that represents the value
 of this Point2D.

Overrides:
toString in class Object
Returns:
a string representation of this Point2D.
Since:
1.2


"
Point2D.Float,getX(),double,Returns the X coordinate of this Point2D in double precision.,"

getX
public double getX()
Returns the X coordinate of this Point2D in
 double precision.

Specified by:
getX in class Point2D
Returns:
the X coordinate of this Point2D.
Since:
1.2


"
Point2D.Float,getY(),double,Returns the Y coordinate of this Point2D in double precision.,"

getY
public double getY()
Returns the Y coordinate of this Point2D in
 double precision.

Specified by:
getY in class Point2D
Returns:
the Y coordinate of this Point2D.
Since:
1.2


"
Point2D.Float,"setLocation(double x, double y)",void,Sets the location of this Point2D to the specified double coordinates.,"

setLocation
public void setLocation(double x,
                        double y)
Sets the location of this Point2D to the
 specified double coordinates.

Specified by:
setLocation in class Point2D
Parameters:
x - the new X coordinate of this Point2D
y - the new Y coordinate of this Point2D
Since:
1.2


"
Point2D.Float,"setLocation(float x, float y)",void,Sets the location of this Point2D to the specified float coordinates.,"

setLocation
public void setLocation(float x,
                        float y)
Sets the location of this Point2D to the
 specified float coordinates.

Parameters:
x - the new X coordinate of this Point2D
y - the new Y coordinate of this Point2D
Since:
1.2


"
Point2D.Float,toString(),String,Returns a String that represents the value of this Point2D.,"

toString
public String toString()
Returns a String that represents the value
 of this Point2D.

Overrides:
toString in class Object
Returns:
a string representation of this Point2D.
Since:
1.2


"
QuadCurve2D,clone(),Object,Creates a new object of the same class and with the same contents as this object.,"

clone
public Object clone()
Creates a new object of the same class and with the same contents
 as this object.

Overrides:
clone in class Object
Returns:
a clone of this instance.
Throws:
OutOfMemoryError - if there is not enough memory.
Since:
1.2
See Also:
Cloneable


"
QuadCurve2D,"contains(double x, double y)",boolean,"Tests if the specified coordinates are inside the boundary of the Shape, as described by the definition of insideness.","

contains
public boolean contains(double x,
                        double y)
Tests if the specified coordinates are inside the boundary of the
 Shape, as described by the
 
 definition of insideness.

Specified by:
contains in interface Shape
Parameters:
x - the specified X coordinate to be tested
y - the specified Y coordinate to be tested
Returns:
true if the specified coordinates are inside
         the Shape boundary; false
         otherwise.
Since:
1.2


"
QuadCurve2D,"contains(double x, double y, double w, double h)",boolean,Tests if the interior of the Shape entirely contains the specified rectangular area.,"

contains
public boolean contains(double x,
                        double y,
                        double w,
                        double h)
Tests if the interior of the Shape entirely contains
 the specified rectangular area.  All coordinates that lie inside
 the rectangular area must lie within the Shape for the
 entire rectangular area to be considered contained within the
 Shape.
 
 The Shape.contains() method allows a Shape
 implementation to conservatively return false when:
 

 the intersect method returns true and
 
 the calculations to determine whether or not the
 Shape entirely contains the rectangular area are
 prohibitively expensive.
 
 This means that for some Shapes this method might
 return false even though the Shape contains
 the rectangular area.
 The Area class performs
 more accurate geometric computations than most
 Shape objects and therefore can be used if a more precise
 answer is required.

Specified by:
contains in interface Shape
Parameters:
x - the X coordinate of the upper-left corner
          of the specified rectangular area
y - the Y coordinate of the upper-left corner
          of the specified rectangular area
w - the width of the specified rectangular area
h - the height of the specified rectangular area
Returns:
true if the interior of the Shape
          entirely contains the specified rectangular area;
          false otherwise or, if the Shape
          contains the rectangular area and the
          intersects method returns true
          and the containment calculations would be too expensive to
          perform.
Since:
1.2
See Also:
Area, 
Shape.intersects(double, double, double, double)


"
QuadCurve2D,contains(Point2D p),boolean,"Tests if a specified Point2D is inside the boundary of the Shape, as described by the definition of insideness.","

contains
public boolean contains(Point2D p)
Tests if a specified Point2D is inside the boundary
 of the Shape, as described by the
 
 definition of insideness.

Specified by:
contains in interface Shape
Parameters:
p - the specified Point2D to be tested
Returns:
true if the specified Point2D is
          inside the boundary of the Shape;
          false otherwise.
Since:
1.2


"
QuadCurve2D,contains(Rectangle2D r),boolean,Tests if the interior of the Shape entirely contains the specified Rectangle2D.,"

contains
public boolean contains(Rectangle2D r)
Tests if the interior of the Shape entirely contains the
 specified Rectangle2D.
 The Shape.contains() method allows a Shape
 implementation to conservatively return false when:
 

 the intersect method returns true and
 
 the calculations to determine whether or not the
 Shape entirely contains the Rectangle2D
 are prohibitively expensive.
 
 This means that for some Shapes this method might
 return false even though the Shape contains
 the Rectangle2D.
 The Area class performs
 more accurate geometric computations than most
 Shape objects and therefore can be used if a more precise
 answer is required.

Specified by:
contains in interface Shape
Parameters:
r - The specified Rectangle2D
Returns:
true if the interior of the Shape
          entirely contains the Rectangle2D;
          false otherwise or, if the Shape
          contains the Rectangle2D and the
          intersects method returns true
          and the containment calculations would be too expensive to
          perform.
Since:
1.2
See Also:
Shape.contains(double, double, double, double)


"
QuadCurve2D,getBounds(),Rectangle,Returns an integer Rectangle that completely encloses the Shape.,"

getBounds
public Rectangle getBounds()
Returns an integer Rectangle that completely encloses the
 Shape.  Note that there is no guarantee that the
 returned Rectangle is the smallest bounding box that
 encloses the Shape, only that the Shape
 lies entirely within the indicated  Rectangle.  The
 returned Rectangle might also fail to completely
 enclose the Shape if the Shape overflows
 the limited range of the integer data type.  The
 getBounds2D method generally returns a
 tighter bounding box due to its greater flexibility in
 representation.

 
 Note that the 
 definition of insideness can lead to situations where points
 on the defining outline of the shape may not be considered
 contained in the returned bounds object, but only in cases
 where those points are also not considered contained in the original
 shape.
 

 If a point is inside the shape according to the
 contains(point) method, then
 it must be inside the returned Rectangle bounds object
 according to the contains(point)
 method of the bounds. Specifically:
 

shape.contains(x,y) requires bounds.contains(x,y)


 If a point is not inside the shape, then it might
 still be contained in the bounds object:
 

bounds.contains(x,y) does not imply shape.contains(x,y)


Specified by:
getBounds in interface Shape
Returns:
an integer Rectangle that completely encloses
                 the Shape.
Since:
1.2
See Also:
Shape.getBounds2D()


"
QuadCurve2D,getCtrlPt(),abstract Point2D,Returns the control point.,"

getCtrlPt
public abstract Point2D getCtrlPt()
Returns the control point.

Returns:
a Point2D that is the control point of this
          Point2D.
Since:
1.2


"
QuadCurve2D,getCtrlX(),abstract double,Returns the X coordinate of the control point in double precision.,"

getCtrlX
public abstract double getCtrlX()
Returns the X coordinate of the control point in
 double precision.

Returns:
X coordinate the control point
Since:
1.2


"
QuadCurve2D,getCtrlY(),abstract double,Returns the Y coordinate of the control point in double precision.,"

getCtrlY
public abstract double getCtrlY()
Returns the Y coordinate of the control point in
 double precision.

Returns:
the Y coordinate of the control point.
Since:
1.2


"
QuadCurve2D,getFlatness(),double,"Returns the flatness, or maximum distance of a control point from the line connecting the end points, of this QuadCurve2D.","

getFlatness
public double getFlatness()
Returns the flatness, or maximum distance of a
 control point from the line connecting the end points, of this
 QuadCurve2D.

Returns:
the flatness of this QuadCurve2D.
Since:
1.2


"
QuadCurve2D,"getFlatness(double[] coords, int offset)",static double,"Returns the flatness, or maximum distance of a control point from the line connecting the end points, of the quadratic curve specified by the control points stored in the indicated array at the indicated index.","

getFlatness
public static double getFlatness(double[] coords,
                                 int offset)
Returns the flatness, or maximum distance of a
 control point from the line connecting the end points, of the
 quadratic curve specified by the control points stored in the
 indicated array at the indicated index.

Parameters:
coords - an array containing coordinate values
offset - the index into coords from which to
          start getting the coordinate values
Returns:
the flatness of a quadratic curve defined by the
          specified array at the specified offset.
Since:
1.2


"
QuadCurve2D,"getFlatness(double x1, double y1, double ctrlx, double ctrly, double x2, double y2)",static double,"Returns the flatness, or maximum distance of a control point from the line connecting the end points, of the quadratic curve specified by the indicated control points.","

getFlatness
public static double getFlatness(double x1,
                                 double y1,
                                 double ctrlx,
                                 double ctrly,
                                 double x2,
                                 double y2)
Returns the flatness, or maximum distance of a
 control point from the line connecting the end points, of the
 quadratic curve specified by the indicated control points.

Parameters:
x1 - the X coordinate of the start point
y1 - the Y coordinate of the start point
ctrlx - the X coordinate of the control point
ctrly - the Y coordinate of the control point
x2 - the X coordinate of the end point
y2 - the Y coordinate of the end point
Returns:
the flatness of the quadratic curve defined by the
          specified coordinates.
Since:
1.2


"
QuadCurve2D,getFlatnessSq(),double,"Returns the square of the flatness, or maximum distance of a control point from the line connecting the end points, of this QuadCurve2D.","

getFlatnessSq
public double getFlatnessSq()
Returns the square of the flatness, or maximum distance of a
 control point from the line connecting the end points, of this
 QuadCurve2D.

Returns:
the square of the flatness of this
          QuadCurve2D.
Since:
1.2


"
QuadCurve2D,"getFlatnessSq(double[] coords, int offset)",static double,"Returns the square of the flatness, or maximum distance of a control point from the line connecting the end points, of the quadratic curve specified by the control points stored in the indicated array at the indicated index.","

getFlatnessSq
public static double getFlatnessSq(double[] coords,
                                   int offset)
Returns the square of the flatness, or maximum distance of a
 control point from the line connecting the end points, of the
 quadratic curve specified by the control points stored in the
 indicated array at the indicated index.

Parameters:
coords - an array containing coordinate values
offset - the index into coords from which to
          to start getting the values from the array
Returns:
the flatness of the quadratic curve that is defined by the
          values in the specified array at the specified index.
Since:
1.2


"
QuadCurve2D,"getFlatnessSq(double x1, double y1, double ctrlx, double ctrly, double x2, double y2)",static double,"Returns the square of the flatness, or maximum distance of a control point from the line connecting the end points, of the quadratic curve specified by the indicated control points.","

getFlatnessSq
public static double getFlatnessSq(double x1,
                                   double y1,
                                   double ctrlx,
                                   double ctrly,
                                   double x2,
                                   double y2)
Returns the square of the flatness, or maximum distance of a
 control point from the line connecting the end points, of the
 quadratic curve specified by the indicated control points.

Parameters:
x1 - the X coordinate of the start point
y1 - the Y coordinate of the start point
ctrlx - the X coordinate of the control point
ctrly - the Y coordinate of the control point
x2 - the X coordinate of the end point
y2 - the Y coordinate of the end point
Returns:
the square of the flatness of the quadratic curve
          defined by the specified coordinates.
Since:
1.2


"
QuadCurve2D,getP1(),abstract Point2D,Returns the start point.,"

getP1
public abstract Point2D getP1()
Returns the start point.

Returns:
a Point2D that is the start point of this
          QuadCurve2D.
Since:
1.2


"
QuadCurve2D,getP2(),abstract Point2D,Returns the end point.,"

getP2
public abstract Point2D getP2()
Returns the end point.

Returns:
a Point object that is the end point
          of this Point2D.
Since:
1.2


"
QuadCurve2D,getPathIterator(AffineTransform at),PathIterator,Returns an iteration object that defines the boundary of the shape of this QuadCurve2D.,"

getPathIterator
public PathIterator getPathIterator(AffineTransform at)
Returns an iteration object that defines the boundary of the
 shape of this QuadCurve2D.
 The iterator for this class is not multi-threaded safe,
 which means that this QuadCurve2D class does not
 guarantee that modifications to the geometry of this
 QuadCurve2D object do not affect any iterations of
 that geometry that are already in process.

Specified by:
getPathIterator in interface Shape
Parameters:
at - an optional AffineTransform to apply to the
          shape boundary
Returns:
a PathIterator object that defines the boundary
          of the shape.
Since:
1.2


"
QuadCurve2D,"getPathIterator(AffineTransform at, double flatness)",PathIterator,Returns an iteration object that defines the boundary of the flattened shape of this QuadCurve2D.,"

getPathIterator
public PathIterator getPathIterator(AffineTransform at,
                                    double flatness)
Returns an iteration object that defines the boundary of the
 flattened shape of this QuadCurve2D.
 The iterator for this class is not multi-threaded safe,
 which means that this QuadCurve2D class does not
 guarantee that modifications to the geometry of this
 QuadCurve2D object do not affect any iterations of
 that geometry that are already in process.

Specified by:
getPathIterator in interface Shape
Parameters:
at - an optional AffineTransform to apply
          to the boundary of the shape
flatness - the maximum distance that the control points for a
          subdivided curve can be with respect to a line connecting
          the end points of this curve before this curve is
          replaced by a straight line connecting the end points.
Returns:
a PathIterator object that defines the
          flattened boundary of the shape.
Since:
1.2


"
QuadCurve2D,getX1(),abstract double,Returns the X coordinate of the start point in double in precision.,"

getX1
public abstract double getX1()
Returns the X coordinate of the start point in
 double in precision.

Returns:
the X coordinate of the start point.
Since:
1.2


"
QuadCurve2D,getX2(),abstract double,Returns the X coordinate of the end point in double precision.,"

getX2
public abstract double getX2()
Returns the X coordinate of the end point in
 double precision.

Returns:
the x coordinate of the end point.
Since:
1.2


"
QuadCurve2D,getY1(),abstract double,Returns the Y coordinate of the start point in double precision.,"

getY1
public abstract double getY1()
Returns the Y coordinate of the start point in
 double precision.

Returns:
the Y coordinate of the start point.
Since:
1.2


"
QuadCurve2D,getY2(),abstract double,Returns the Y coordinate of the end point in double precision.,"

getY2
public abstract double getY2()
Returns the Y coordinate of the end point in
 double precision.

Returns:
the Y coordinate of the end point.
Since:
1.2


"
QuadCurve2D,"intersects(double x, double y, double w, double h)",boolean,Tests if the interior of the Shape intersects the interior of a specified rectangular area.,"

intersects
public boolean intersects(double x,
                          double y,
                          double w,
                          double h)
Tests if the interior of the Shape intersects the
 interior of a specified rectangular area.
 The rectangular area is considered to intersect the Shape
 if any point is contained in both the interior of the
 Shape and the specified rectangular area.
 
 The Shape.intersects() method allows a Shape
 implementation to conservatively return true when:
 

 there is a high probability that the rectangular area and the
 Shape intersect, but
 
 the calculations to accurately determine this intersection
 are prohibitively expensive.
 
 This means that for some Shapes this method might
 return true even though the rectangular area does not
 intersect the Shape.
 The Area class performs
 more accurate computations of geometric intersection than most
 Shape objects and therefore can be used if a more precise
 answer is required.

Specified by:
intersects in interface Shape
Parameters:
x - the X coordinate of the upper-left corner
          of the specified rectangular area
y - the Y coordinate of the upper-left corner
          of the specified rectangular area
w - the width of the specified rectangular area
h - the height of the specified rectangular area
Returns:
true if the interior of the Shape and
          the interior of the rectangular area intersect, or are
          both highly likely to intersect and intersection calculations
          would be too expensive to perform; false otherwise.
Since:
1.2
See Also:
Area


"
QuadCurve2D,intersects(Rectangle2D r),boolean,Tests if the interior of the Shape intersects the interior of a specified Rectangle2D.,"

intersects
public boolean intersects(Rectangle2D r)
Tests if the interior of the Shape intersects the
 interior of a specified Rectangle2D.
 The Shape.intersects() method allows a Shape
 implementation to conservatively return true when:
 

 there is a high probability that the Rectangle2D and the
 Shape intersect, but
 
 the calculations to accurately determine this intersection
 are prohibitively expensive.
 
 This means that for some Shapes this method might
 return true even though the Rectangle2D does not
 intersect the Shape.
 The Area class performs
 more accurate computations of geometric intersection than most
 Shape objects and therefore can be used if a more precise
 answer is required.

Specified by:
intersects in interface Shape
Parameters:
r - the specified Rectangle2D
Returns:
true if the interior of the Shape and
          the interior of the specified Rectangle2D
          intersect, or are both highly likely to intersect and intersection
          calculations would be too expensive to perform; false
          otherwise.
Since:
1.2
See Also:
Shape.intersects(double, double, double, double)


"
QuadCurve2D,"setCurve(double[] coords, int offset)",void,Sets the location of the end points and control points of this QuadCurve2D to the double coordinates at the specified offset in the specified array.,"

setCurve
public void setCurve(double[] coords,
                     int offset)
Sets the location of the end points and control points of this
 QuadCurve2D to the double coordinates at
 the specified offset in the specified array.

Parameters:
coords - the array containing coordinate values
offset - the index into the array from which to start
          getting the coordinate values and assigning them to this
          QuadCurve2D
Since:
1.2


"
QuadCurve2D,"setCurve(double x1, double y1, double ctrlx, double ctrly, double x2, double y2)",abstract void,Sets the location of the end points and control point of this curve to the specified double coordinates.,"

setCurve
public abstract void setCurve(double x1,
                              double y1,
                              double ctrlx,
                              double ctrly,
                              double x2,
                              double y2)
Sets the location of the end points and control point of this curve
 to the specified double coordinates.

Parameters:
x1 - the X coordinate of the start point
y1 - the Y coordinate of the start point
ctrlx - the X coordinate of the control point
ctrly - the Y coordinate of the control point
x2 - the X coordinate of the end point
y2 - the Y coordinate of the end point
Since:
1.2


"
QuadCurve2D,"setCurve(Point2D[] pts, int offset)",void,Sets the location of the end points and control points of this QuadCurve2D to the coordinates of the Point2D objects at the specified offset in the specified array.,"

setCurve
public void setCurve(Point2D[] pts,
                     int offset)
Sets the location of the end points and control points of this
 QuadCurve2D to the coordinates of the
 Point2D objects at the specified offset in
 the specified array.

Parameters:
pts - an array containing Point2D that define
          coordinate values
offset - the index into pts from which to start
          getting the coordinate values and assigning them to this
          QuadCurve2D
Since:
1.2


"
QuadCurve2D,"setCurve(Point2D p1, Point2D cp, Point2D p2)",void,Sets the location of the end points and control point of this QuadCurve2D to the specified Point2D coordinates.,"

setCurve
public void setCurve(Point2D p1,
                     Point2D cp,
                     Point2D p2)
Sets the location of the end points and control point of this
 QuadCurve2D to the specified Point2D
 coordinates.

Parameters:
p1 - the start point
cp - the control point
p2 - the end point
Since:
1.2


"
QuadCurve2D,setCurve(QuadCurve2D c),void,Sets the location of the end points and control point of this QuadCurve2D to the same as those in the specified QuadCurve2D.,"

setCurve
public void setCurve(QuadCurve2D c)
Sets the location of the end points and control point of this
 QuadCurve2D to the same as those in the specified
 QuadCurve2D.

Parameters:
c - the specified QuadCurve2D
Since:
1.2


"
QuadCurve2D,solveQuadratic(double[] eqn),static int,"Solves the quadratic whose coefficients are in the eqn array and places the non-complex roots back into the same array, returning the number of roots.","

solveQuadratic
public static int solveQuadratic(double[] eqn)
Solves the quadratic whose coefficients are in the eqn
 array and places the non-complex roots back into the same array,
 returning the number of roots.  The quadratic solved is represented
 by the equation:
 
     eqn = {C, B, A};
     ax^2 + bx + c = 0
 
 A return value of -1 is used to distinguish a constant
 equation, which might be always 0 or never 0, from an equation that
 has no zeroes.

Parameters:
eqn - the array that contains the quadratic coefficients
Returns:
the number of roots, or -1 if the equation is
          a constant
Since:
1.2


"
QuadCurve2D,"solveQuadratic(double[] eqn, double[] res)",static int,"Solves the quadratic whose coefficients are in the eqn array and places the non-complex roots into the res array, returning the number of roots.","

solveQuadratic
public static int solveQuadratic(double[] eqn,
                                 double[] res)
Solves the quadratic whose coefficients are in the eqn
 array and places the non-complex roots into the res
 array, returning the number of roots.
 The quadratic solved is represented by the equation:
 
     eqn = {C, B, A};
     ax^2 + bx + c = 0
 
 A return value of -1 is used to distinguish a constant
 equation, which might be always 0 or never 0, from an equation that
 has no zeroes.

Parameters:
eqn - the specified array of coefficients to use to solve
        the quadratic equation
res - the array that contains the non-complex roots
        resulting from the solution of the quadratic equation
Returns:
the number of roots, or -1 if the equation is
  a constant.
Since:
1.3


"
QuadCurve2D,"subdivide(double[] src, int srcoff, double[] left, int leftoff, double[] right, int rightoff)",static void,Subdivides the quadratic curve specified by the coordinates stored in the src array at indices srcoff through srcoff + 5 and stores the resulting two subdivided curves into the two result arrays at the corresponding indices.,"

subdivide
public static void subdivide(double[] src,
                             int srcoff,
                             double[] left,
                             int leftoff,
                             double[] right,
                             int rightoff)
Subdivides the quadratic curve specified by the coordinates
 stored in the src array at indices
 srcoff through srcoff + 5
 and stores the resulting two subdivided curves into the two
 result arrays at the corresponding indices.
 Either or both of the left and right
 arrays can be null or a reference to the same array
 and offset as the src array.
 Note that the last point in the first subdivided curve is the
 same as the first point in the second subdivided curve.  Thus,
 it is possible to pass the same array for left and
 right and to use offsets such that
 rightoff equals leftoff + 4 in order
 to avoid allocating extra storage for this common point.

Parameters:
src - the array holding the coordinates for the source curve
srcoff - the offset into the array of the beginning of the
 the 6 source coordinates
left - the array for storing the coordinates for the first
 half of the subdivided curve
leftoff - the offset into the array of the beginning of the
 the 6 left coordinates
right - the array for storing the coordinates for the second
 half of the subdivided curve
rightoff - the offset into the array of the beginning of the
 the 6 right coordinates
Since:
1.2


"
QuadCurve2D,"subdivide(QuadCurve2D left, QuadCurve2D right)",void,Subdivides this QuadCurve2D and stores the resulting two subdivided curves into the left and right curve parameters.,"

subdivide
public void subdivide(QuadCurve2D left,
                      QuadCurve2D right)
Subdivides this QuadCurve2D and stores the resulting
 two subdivided curves into the left and
 right curve parameters.
 Either or both of the left and right
 objects can be the same as this QuadCurve2D or
 null.

Parameters:
left - the QuadCurve2D object for storing the
 left or first half of the subdivided curve
right - the QuadCurve2D object for storing the
 right or second half of the subdivided curve
Since:
1.2


"
QuadCurve2D,"subdivide(QuadCurve2D src, QuadCurve2D left, QuadCurve2D right)",static void,Subdivides the quadratic curve specified by the src parameter and stores the resulting two subdivided curves into the left and right curve parameters.,"

subdivide
public static void subdivide(QuadCurve2D src,
                             QuadCurve2D left,
                             QuadCurve2D right)
Subdivides the quadratic curve specified by the src
 parameter and stores the resulting two subdivided curves into the
 left and right curve parameters.
 Either or both of the left and right
 objects can be the same as the src object or
 null.

Parameters:
src - the quadratic curve to be subdivided
left - the QuadCurve2D object for storing the
          left or first half of the subdivided curve
right - the QuadCurve2D object for storing the
          right or second half of the subdivided curve
Since:
1.2


"
QuadCurve2D.Double,getBounds2D(),Rectangle2D,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.,"

getBounds2D
public Rectangle2D getBounds2D()
Returns a high precision and more accurate bounding box of
 the Shape than the getBounds method.
 Note that there is no guarantee that the returned
 Rectangle2D is the smallest bounding box that encloses
 the Shape, only that the Shape lies
 entirely within the indicated Rectangle2D.  The
 bounding box returned by this method is usually tighter than that
 returned by the getBounds method and never fails due
 to overflow problems since the return value can be an instance of
 the Rectangle2D that uses double precision values to
 store the dimensions.

 
 Note that the 
 definition of insideness can lead to situations where points
 on the defining outline of the shape may not be considered
 contained in the returned bounds object, but only in cases
 where those points are also not considered contained in the original
 shape.
 

 If a point is inside the shape according to the
 contains(point) method, then it must
 be inside the returned Rectangle2D bounds object according
 to the contains(point) method of the
 bounds. Specifically:
 

shape.contains(p) requires bounds.contains(p)


 If a point is not inside the shape, then it might
 still be contained in the bounds object:
 

bounds.contains(p) does not imply shape.contains(p)


Specified by:
getBounds2D in interface Shape
Returns:
an instance of Rectangle2D that is a
                 high-precision bounding box of the Shape.
Since:
1.2
See Also:
Shape.getBounds()


"
QuadCurve2D.Double,getCtrlPt(),Point2D,Returns the control point.,"

getCtrlPt
public Point2D getCtrlPt()
Returns the control point.

Specified by:
getCtrlPt in class QuadCurve2D
Returns:
a Point2D that is the control point of this
          Point2D.
Since:
1.2


"
QuadCurve2D.Double,getCtrlX(),double,Returns the X coordinate of the control point in double precision.,"

getCtrlX
public double getCtrlX()
Returns the X coordinate of the control point in
 double precision.

Specified by:
getCtrlX in class QuadCurve2D
Returns:
X coordinate the control point
Since:
1.2


"
QuadCurve2D.Double,getCtrlY(),double,Returns the Y coordinate of the control point in double precision.,"

getCtrlY
public double getCtrlY()
Returns the Y coordinate of the control point in
 double precision.

Specified by:
getCtrlY in class QuadCurve2D
Returns:
the Y coordinate of the control point.
Since:
1.2


"
QuadCurve2D.Double,getP1(),Point2D,Returns the start point.,"

getP1
public Point2D getP1()
Returns the start point.

Specified by:
getP1 in class QuadCurve2D
Returns:
a Point2D that is the start point of this
          QuadCurve2D.
Since:
1.2


"
QuadCurve2D.Double,getP2(),Point2D,Returns the end point.,"

getP2
public Point2D getP2()
Returns the end point.

Specified by:
getP2 in class QuadCurve2D
Returns:
a Point object that is the end point
          of this Point2D.
Since:
1.2


"
QuadCurve2D.Double,getX1(),double,Returns the X coordinate of the start point in double in precision.,"

getX1
public double getX1()
Returns the X coordinate of the start point in
 double in precision.

Specified by:
getX1 in class QuadCurve2D
Returns:
the X coordinate of the start point.
Since:
1.2


"
QuadCurve2D.Double,getX2(),double,Returns the X coordinate of the end point in double precision.,"

getX2
public double getX2()
Returns the X coordinate of the end point in
 double precision.

Specified by:
getX2 in class QuadCurve2D
Returns:
the x coordinate of the end point.
Since:
1.2


"
QuadCurve2D.Double,getY1(),double,Returns the Y coordinate of the start point in double precision.,"

getY1
public double getY1()
Returns the Y coordinate of the start point in
 double precision.

Specified by:
getY1 in class QuadCurve2D
Returns:
the Y coordinate of the start point.
Since:
1.2


"
QuadCurve2D.Double,getY2(),double,Returns the Y coordinate of the end point in double precision.,"

getY2
public double getY2()
Returns the Y coordinate of the end point in
 double precision.

Specified by:
getY2 in class QuadCurve2D
Returns:
the Y coordinate of the end point.
Since:
1.2


"
QuadCurve2D.Double,"setCurve(double x1, double y1, double ctrlx, double ctrly, double x2, double y2)",void,Sets the location of the end points and control point of this curve to the specified double coordinates.,"

setCurve
public void setCurve(double x1,
                     double y1,
                     double ctrlx,
                     double ctrly,
                     double x2,
                     double y2)
Sets the location of the end points and control point of this curve
 to the specified double coordinates.

Specified by:
setCurve in class QuadCurve2D
Parameters:
x1 - the X coordinate of the start point
y1 - the Y coordinate of the start point
ctrlx - the X coordinate of the control point
ctrly - the Y coordinate of the control point
x2 - the X coordinate of the end point
y2 - the Y coordinate of the end point
Since:
1.2


"
QuadCurve2D.Float,getBounds2D(),Rectangle2D,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.,"

getBounds2D
public Rectangle2D getBounds2D()
Returns a high precision and more accurate bounding box of
 the Shape than the getBounds method.
 Note that there is no guarantee that the returned
 Rectangle2D is the smallest bounding box that encloses
 the Shape, only that the Shape lies
 entirely within the indicated Rectangle2D.  The
 bounding box returned by this method is usually tighter than that
 returned by the getBounds method and never fails due
 to overflow problems since the return value can be an instance of
 the Rectangle2D that uses double precision values to
 store the dimensions.

 
 Note that the 
 definition of insideness can lead to situations where points
 on the defining outline of the shape may not be considered
 contained in the returned bounds object, but only in cases
 where those points are also not considered contained in the original
 shape.
 

 If a point is inside the shape according to the
 contains(point) method, then it must
 be inside the returned Rectangle2D bounds object according
 to the contains(point) method of the
 bounds. Specifically:
 

shape.contains(p) requires bounds.contains(p)


 If a point is not inside the shape, then it might
 still be contained in the bounds object:
 

bounds.contains(p) does not imply shape.contains(p)


Specified by:
getBounds2D in interface Shape
Returns:
an instance of Rectangle2D that is a
                 high-precision bounding box of the Shape.
Since:
1.2
See Also:
Shape.getBounds()


"
QuadCurve2D.Float,getCtrlPt(),Point2D,Returns the control point.,"

getCtrlPt
public Point2D getCtrlPt()
Returns the control point.

Specified by:
getCtrlPt in class QuadCurve2D
Returns:
a Point2D that is the control point of this
          Point2D.
Since:
1.2


"
QuadCurve2D.Float,getCtrlX(),double,Returns the X coordinate of the control point in double precision.,"

getCtrlX
public double getCtrlX()
Returns the X coordinate of the control point in
 double precision.

Specified by:
getCtrlX in class QuadCurve2D
Returns:
X coordinate the control point
Since:
1.2


"
QuadCurve2D.Float,getCtrlY(),double,Returns the Y coordinate of the control point in double precision.,"

getCtrlY
public double getCtrlY()
Returns the Y coordinate of the control point in
 double precision.

Specified by:
getCtrlY in class QuadCurve2D
Returns:
the Y coordinate of the control point.
Since:
1.2


"
QuadCurve2D.Float,getP1(),Point2D,Returns the start point.,"

getP1
public Point2D getP1()
Returns the start point.

Specified by:
getP1 in class QuadCurve2D
Returns:
a Point2D that is the start point of this
          QuadCurve2D.
Since:
1.2


"
QuadCurve2D.Float,getP2(),Point2D,Returns the end point.,"

getP2
public Point2D getP2()
Returns the end point.

Specified by:
getP2 in class QuadCurve2D
Returns:
a Point object that is the end point
          of this Point2D.
Since:
1.2


"
QuadCurve2D.Float,getX1(),double,Returns the X coordinate of the start point in double in precision.,"

getX1
public double getX1()
Returns the X coordinate of the start point in
 double in precision.

Specified by:
getX1 in class QuadCurve2D
Returns:
the X coordinate of the start point.
Since:
1.2


"
QuadCurve2D.Float,getX2(),double,Returns the X coordinate of the end point in double precision.,"

getX2
public double getX2()
Returns the X coordinate of the end point in
 double precision.

Specified by:
getX2 in class QuadCurve2D
Returns:
the x coordinate of the end point.
Since:
1.2


"
QuadCurve2D.Float,getY1(),double,Returns the Y coordinate of the start point in double precision.,"

getY1
public double getY1()
Returns the Y coordinate of the start point in
 double precision.

Specified by:
getY1 in class QuadCurve2D
Returns:
the Y coordinate of the start point.
Since:
1.2


"
QuadCurve2D.Float,getY2(),double,Returns the Y coordinate of the end point in double precision.,"

getY2
public double getY2()
Returns the Y coordinate of the end point in
 double precision.

Specified by:
getY2 in class QuadCurve2D
Returns:
the Y coordinate of the end point.
Since:
1.2


"
QuadCurve2D.Float,"setCurve(double x1, double y1, double ctrlx, double ctrly, double x2, double y2)",void,Sets the location of the end points and control point of this curve to the specified double coordinates.,"

setCurve
public void setCurve(double x1,
                     double y1,
                     double ctrlx,
                     double ctrly,
                     double x2,
                     double y2)
Sets the location of the end points and control point of this curve
 to the specified double coordinates.

Specified by:
setCurve in class QuadCurve2D
Parameters:
x1 - the X coordinate of the start point
y1 - the Y coordinate of the start point
ctrlx - the X coordinate of the control point
ctrly - the Y coordinate of the control point
x2 - the X coordinate of the end point
y2 - the Y coordinate of the end point
Since:
1.2


"
QuadCurve2D.Float,"setCurve(float x1, float y1, float ctrlx, float ctrly, float x2, float y2)",void,Sets the location of the end points and control point of this curve to the specified float coordinates.,"

setCurve
public void setCurve(float x1,
                     float y1,
                     float ctrlx,
                     float ctrly,
                     float x2,
                     float y2)
Sets the location of the end points and control point of this curve
 to the specified float coordinates.

Parameters:
x1 - the X coordinate of the start point
y1 - the Y coordinate of the start point
ctrlx - the X coordinate of the control point
ctrly - the Y coordinate of the control point
x2 - the X coordinate of the end point
y2 - the Y coordinate of the end point
Since:
1.2


"
Rectangle2D,"add(double newx, double newy)",void,"Adds a point, specified by the double precision arguments newx and newy, to this Rectangle2D.","

add
public void add(double newx,
                double newy)
Adds a point, specified by the double precision arguments
 newx and newy, to this
 Rectangle2D.  The resulting Rectangle2D
 is the smallest Rectangle2D that
 contains both the original Rectangle2D and the
 specified point.
 
 After adding a point, a call to contains with the
 added point as an argument does not necessarily return
 true. The contains method does not
 return true for points on the right or bottom
 edges of a rectangle. Therefore, if the added point falls on
 the left or bottom edge of the enlarged rectangle,
 contains returns false for that point.

Parameters:
newx - the X coordinate of the new point
newy - the Y coordinate of the new point
Since:
1.2


"
Rectangle2D,add(Point2D pt),void,Adds the Point2D object pt to this Rectangle2D.,"

add
public void add(Point2D pt)
Adds the Point2D object pt to this
 Rectangle2D.
 The resulting Rectangle2D is the smallest
 Rectangle2D that contains both the original
 Rectangle2D and the specified Point2D.
 
 After adding a point, a call to contains with the
 added point as an argument does not necessarily return
 true. The contains
 method does not return true for points on the right
 or bottom edges of a rectangle. Therefore, if the added point falls
 on the left or bottom edge of the enlarged rectangle,
 contains returns false for that point.

Parameters:
pt - the new Point2D to add to this
 Rectangle2D.
Since:
1.2


"
Rectangle2D,add(Rectangle2D r),void,Adds a Rectangle2D object to this Rectangle2D.,"

add
public void add(Rectangle2D r)
Adds a Rectangle2D object to this
 Rectangle2D.  The resulting Rectangle2D
 is the union of the two Rectangle2D objects.

Parameters:
r - the Rectangle2D to add to this
 Rectangle2D.
Since:
1.2


"
Rectangle2D,"contains(double x, double y)",boolean,"Tests if the specified coordinates are inside the boundary of the Shape, as described by the definition of insideness.","

contains
public boolean contains(double x,
                        double y)
Tests if the specified coordinates are inside the boundary of the
 Shape, as described by the
 
 definition of insideness.

Parameters:
x - the specified X coordinate to be tested
y - the specified Y coordinate to be tested
Returns:
true if the specified coordinates are inside
         the Shape boundary; false
         otherwise.
Since:
1.2


"
Rectangle2D,"contains(double x, double y, double w, double h)",boolean,Tests if the interior of the Shape entirely contains the specified rectangular area.,"

contains
public boolean contains(double x,
                        double y,
                        double w,
                        double h)
Tests if the interior of the Shape entirely contains
 the specified rectangular area.  All coordinates that lie inside
 the rectangular area must lie within the Shape for the
 entire rectangular area to be considered contained within the
 Shape.
 
 The Shape.contains() method allows a Shape
 implementation to conservatively return false when:
 

 the intersect method returns true and
 
 the calculations to determine whether or not the
 Shape entirely contains the rectangular area are
 prohibitively expensive.
 
 This means that for some Shapes this method might
 return false even though the Shape contains
 the rectangular area.
 The Area class performs
 more accurate geometric computations than most
 Shape objects and therefore can be used if a more precise
 answer is required.

Parameters:
x - the X coordinate of the upper-left corner
          of the specified rectangular area
y - the Y coordinate of the upper-left corner
          of the specified rectangular area
w - the width of the specified rectangular area
h - the height of the specified rectangular area
Returns:
true if the interior of the Shape
          entirely contains the specified rectangular area;
          false otherwise or, if the Shape
          contains the rectangular area and the
          intersects method returns true
          and the containment calculations would be too expensive to
          perform.
Since:
1.2
See Also:
Area, 
Shape.intersects(double, double, double, double)


"
Rectangle2D,createIntersection(Rectangle2D r),abstract Rectangle2D,Returns a new Rectangle2D object representing the intersection of this Rectangle2D with the specified Rectangle2D.,"

createIntersection
public abstract Rectangle2D createIntersection(Rectangle2D r)
Returns a new Rectangle2D object representing the
 intersection of this Rectangle2D with the specified
 Rectangle2D.

Parameters:
r - the Rectangle2D to be intersected with
 this Rectangle2D
Returns:
the largest Rectangle2D contained in both
          the specified Rectangle2D and in this
          Rectangle2D.
Since:
1.2


"
Rectangle2D,createUnion(Rectangle2D r),abstract Rectangle2D,Returns a new Rectangle2D object representing the union of this Rectangle2D with the specified Rectangle2D.,"

createUnion
public abstract Rectangle2D createUnion(Rectangle2D r)
Returns a new Rectangle2D object representing the
 union of this Rectangle2D with the specified
 Rectangle2D.

Parameters:
r - the Rectangle2D to be combined with
 this Rectangle2D
Returns:
the smallest Rectangle2D containing both
 the specified Rectangle2D and this
 Rectangle2D.
Since:
1.2


"
Rectangle2D,equals(Object obj),boolean,Determines whether or not the specified Object is equal to this Rectangle2D.,"

equals
public boolean equals(Object obj)
Determines whether or not the specified Object is
 equal to this Rectangle2D.  The specified
 Object is equal to this Rectangle2D
 if it is an instance of Rectangle2D and if its
 location and size are the same as this Rectangle2D.

Overrides:
equals in class Object
Parameters:
obj - an Object to be compared with this
 Rectangle2D.
Returns:
true if obj is an instance
                     of Rectangle2D and has
                     the same values; false otherwise.
Since:
1.2
See Also:
Object.hashCode(), 
HashMap


"
Rectangle2D,getBounds2D(),Rectangle2D,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.,"

getBounds2D
public Rectangle2D getBounds2D()
Returns a high precision and more accurate bounding box of
 the Shape than the getBounds method.
 Note that there is no guarantee that the returned
 Rectangle2D is the smallest bounding box that encloses
 the Shape, only that the Shape lies
 entirely within the indicated Rectangle2D.  The
 bounding box returned by this method is usually tighter than that
 returned by the getBounds method and never fails due
 to overflow problems since the return value can be an instance of
 the Rectangle2D that uses double precision values to
 store the dimensions.

 
 Note that the 
 definition of insideness can lead to situations where points
 on the defining outline of the shape may not be considered
 contained in the returned bounds object, but only in cases
 where those points are also not considered contained in the original
 shape.
 

 If a point is inside the shape according to the
 contains(point) method, then it must
 be inside the returned Rectangle2D bounds object according
 to the contains(point) method of the
 bounds. Specifically:
 

shape.contains(p) requires bounds.contains(p)


 If a point is not inside the shape, then it might
 still be contained in the bounds object:
 

bounds.contains(p) does not imply shape.contains(p)


Returns:
an instance of Rectangle2D that is a
                 high-precision bounding box of the Shape.
Since:
1.2
See Also:
Shape.getBounds()


"
Rectangle2D,getPathIterator(AffineTransform at),PathIterator,Returns an iteration object that defines the boundary of this Rectangle2D.,"

getPathIterator
public PathIterator getPathIterator(AffineTransform at)
Returns an iteration object that defines the boundary of this
 Rectangle2D.
 The iterator for this class is multi-threaded safe, which means
 that this Rectangle2D class guarantees that
 modifications to the geometry of this Rectangle2D
 object do not affect any iterations of that geometry that
 are already in process.

Parameters:
at - an optional AffineTransform to be applied to
 the coordinates as they are returned in the iteration, or
 null if untransformed coordinates are desired
Returns:
the PathIterator object that returns the
          geometry of the outline of this
          Rectangle2D, one segment at a time.
Since:
1.2


"
Rectangle2D,"getPathIterator(AffineTransform at, double flatness)",PathIterator,Returns an iteration object that defines the boundary of the flattened Rectangle2D.,"

getPathIterator
public PathIterator getPathIterator(AffineTransform at,
                                    double flatness)
Returns an iteration object that defines the boundary of the
 flattened Rectangle2D.  Since rectangles are already
 flat, the flatness parameter is ignored.
 The iterator for this class is multi-threaded safe, which means
 that this Rectangle2D class guarantees that
 modifications to the geometry of this Rectangle2D
 object do not affect any iterations of that geometry that
 are already in process.

Specified by:
getPathIterator in interface Shape
Overrides:
getPathIterator in class RectangularShape
Parameters:
at - an optional AffineTransform to be applied to
 the coordinates as they are returned in the iteration, or
 null if untransformed coordinates are desired
flatness - the maximum distance that the line segments used to
 approximate the curved segments are allowed to deviate from any
 point on the original curve.  Since rectangles are already flat,
 the flatness parameter is ignored.
Returns:
the PathIterator object that returns the
          geometry of the outline of this
          Rectangle2D, one segment at a time.
Since:
1.2


"
Rectangle2D,hashCode(),int,Returns the hashcode for this Rectangle2D.,"

hashCode
public int hashCode()
Returns the hashcode for this Rectangle2D.

Overrides:
hashCode in class Object
Returns:
the hashcode for this Rectangle2D.
Since:
1.2
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Rectangle2D,"intersect(Rectangle2D src1, Rectangle2D src2, Rectangle2D dest)",static void,Intersects the pair of specified source Rectangle2D objects and puts the result into the specified destination Rectangle2D object.,"

intersect
public static void intersect(Rectangle2D src1,
                             Rectangle2D src2,
                             Rectangle2D dest)
Intersects the pair of specified source Rectangle2D
 objects and puts the result into the specified destination
 Rectangle2D object.  One of the source rectangles
 can also be the destination to avoid creating a third Rectangle2D
 object, but in this case the original points of this source
 rectangle will be overwritten by this method.

Parameters:
src1 - the first of a pair of Rectangle2D
 objects to be intersected with each other
src2 - the second of a pair of Rectangle2D
 objects to be intersected with each other
dest - the Rectangle2D that holds the
 results of the intersection of src1 and
 src2
Since:
1.2


"
Rectangle2D,"intersects(double x, double y, double w, double h)",boolean,Tests if the interior of the Shape intersects the interior of a specified rectangular area.,"

intersects
public boolean intersects(double x,
                          double y,
                          double w,
                          double h)
Tests if the interior of the Shape intersects the
 interior of a specified rectangular area.
 The rectangular area is considered to intersect the Shape
 if any point is contained in both the interior of the
 Shape and the specified rectangular area.
 
 The Shape.intersects() method allows a Shape
 implementation to conservatively return true when:
 

 there is a high probability that the rectangular area and the
 Shape intersect, but
 
 the calculations to accurately determine this intersection
 are prohibitively expensive.
 
 This means that for some Shapes this method might
 return true even though the rectangular area does not
 intersect the Shape.
 The Area class performs
 more accurate computations of geometric intersection than most
 Shape objects and therefore can be used if a more precise
 answer is required.

Parameters:
x - the X coordinate of the upper-left corner
          of the specified rectangular area
y - the Y coordinate of the upper-left corner
          of the specified rectangular area
w - the width of the specified rectangular area
h - the height of the specified rectangular area
Returns:
true if the interior of the Shape and
          the interior of the rectangular area intersect, or are
          both highly likely to intersect and intersection calculations
          would be too expensive to perform; false otherwise.
Since:
1.2
See Also:
Area


"
Rectangle2D,"intersectsLine(double x1, double y1, double x2, double y2)",boolean,Tests if the specified line segment intersects the interior of this Rectangle2D.,"

intersectsLine
public boolean intersectsLine(double x1,
                              double y1,
                              double x2,
                              double y2)
Tests if the specified line segment intersects the interior of this
 Rectangle2D.

Parameters:
x1 - the X coordinate of the start point of the specified
           line segment
y1 - the Y coordinate of the start point of the specified
           line segment
x2 - the X coordinate of the end point of the specified
           line segment
y2 - the Y coordinate of the end point of the specified
           line segment
Returns:
true if the specified line segment intersects
 the interior of this Rectangle2D; false
 otherwise.
Since:
1.2


"
Rectangle2D,intersectsLine(Line2D l),boolean,Tests if the specified line segment intersects the interior of this Rectangle2D.,"

intersectsLine
public boolean intersectsLine(Line2D l)
Tests if the specified line segment intersects the interior of this
 Rectangle2D.

Parameters:
l - the specified Line2D to test for intersection
 with the interior of this Rectangle2D
Returns:
true if the specified Line2D
 intersects the interior of this Rectangle2D;
 false otherwise.
Since:
1.2


"
Rectangle2D,"outcode(double x, double y)",abstract int,Determines where the specified coordinates lie with respect to this Rectangle2D.,"

outcode
public abstract int outcode(double x,
                            double y)
Determines where the specified coordinates lie with respect
 to this Rectangle2D.
 This method computes a binary OR of the appropriate mask values
 indicating, for each side of this Rectangle2D,
 whether or not the specified coordinates are on the same side
 of the edge as the rest of this Rectangle2D.

Parameters:
x - the specified X coordinate
y - the specified Y coordinate
Returns:
the logical OR of all appropriate out codes.
Since:
1.2
See Also:
OUT_LEFT, 
OUT_TOP, 
OUT_RIGHT, 
OUT_BOTTOM


"
Rectangle2D,outcode(Point2D p),int,Determines where the specified Point2D lies with respect to this Rectangle2D.,"

outcode
public int outcode(Point2D p)
Determines where the specified Point2D lies with
 respect to this Rectangle2D.
 This method computes a binary OR of the appropriate mask values
 indicating, for each side of this Rectangle2D,
 whether or not the specified Point2D is on the same
 side of the edge as the rest of this Rectangle2D.

Parameters:
p - the specified Point2D
Returns:
the logical OR of all appropriate out codes.
Since:
1.2
See Also:
OUT_LEFT, 
OUT_TOP, 
OUT_RIGHT, 
OUT_BOTTOM


"
Rectangle2D,"setFrame(double x, double y, double w, double h)",void,Sets the location and size of the outer bounds of this Rectangle2D to the specified rectangular values.,"

setFrame
public void setFrame(double x,
                     double y,
                     double w,
                     double h)
Sets the location and size of the outer bounds of this
 Rectangle2D to the specified rectangular values.

Specified by:
setFrame in class RectangularShape
Parameters:
x - the X coordinate of the upper-left corner
          of this Rectangle2D
y - the Y coordinate of the upper-left corner
          of this Rectangle2D
w - the width of this Rectangle2D
h - the height of this Rectangle2D
Since:
1.2
See Also:
RectangularShape.getFrame()


"
Rectangle2D,"setRect(double x, double y, double w, double h)",abstract void,Sets the location and size of this Rectangle2D to the specified double values.,"

setRect
public abstract void setRect(double x,
                             double y,
                             double w,
                             double h)
Sets the location and size of this Rectangle2D
 to the specified double values.

Parameters:
x - the X coordinate of the upper-left corner
          of this Rectangle2D
y - the Y coordinate of the upper-left corner
          of this Rectangle2D
w - the width of this Rectangle2D
h - the height of this Rectangle2D
Since:
1.2


"
Rectangle2D,setRect(Rectangle2D r),void,Sets this Rectangle2D to be the same as the specified Rectangle2D.,"

setRect
public void setRect(Rectangle2D r)
Sets this Rectangle2D to be the same as the specified
 Rectangle2D.

Parameters:
r - the specified Rectangle2D
Since:
1.2


"
Rectangle2D,"union(Rectangle2D src1, Rectangle2D src2, Rectangle2D dest)",static void,Unions the pair of source Rectangle2D objects and puts the result into the specified destination Rectangle2D object.,"

union
public static void union(Rectangle2D src1,
                         Rectangle2D src2,
                         Rectangle2D dest)
Unions the pair of source Rectangle2D objects
 and puts the result into the specified destination
 Rectangle2D object.  One of the source rectangles
 can also be the destination to avoid creating a third Rectangle2D
 object, but in this case the original points of this source
 rectangle will be overwritten by this method.

Parameters:
src1 - the first of a pair of Rectangle2D
 objects to be combined with each other
src2 - the second of a pair of Rectangle2D
 objects to be combined with each other
dest - the Rectangle2D that holds the
 results of the union of src1 and
 src2
Since:
1.2


"
Rectangle2D.Double,createIntersection(Rectangle2D r),Rectangle2D,Returns a new Rectangle2D object representing the intersection of this Rectangle2D with the specified Rectangle2D.,"

createIntersection
public Rectangle2D createIntersection(Rectangle2D r)
Returns a new Rectangle2D object representing the
 intersection of this Rectangle2D with the specified
 Rectangle2D.

Specified by:
createIntersection in class Rectangle2D
Parameters:
r - the Rectangle2D to be intersected with
 this Rectangle2D
Returns:
the largest Rectangle2D contained in both
          the specified Rectangle2D and in this
          Rectangle2D.
Since:
1.2


"
Rectangle2D.Double,createUnion(Rectangle2D r),Rectangle2D,Returns a new Rectangle2D object representing the union of this Rectangle2D with the specified Rectangle2D.,"

createUnion
public Rectangle2D createUnion(Rectangle2D r)
Returns a new Rectangle2D object representing the
 union of this Rectangle2D with the specified
 Rectangle2D.

Specified by:
createUnion in class Rectangle2D
Parameters:
r - the Rectangle2D to be combined with
 this Rectangle2D
Returns:
the smallest Rectangle2D containing both
 the specified Rectangle2D and this
 Rectangle2D.
Since:
1.2


"
Rectangle2D.Double,getBounds2D(),Rectangle2D,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.,"

getBounds2D
public Rectangle2D getBounds2D()
Returns a high precision and more accurate bounding box of
 the Shape than the getBounds method.
 Note that there is no guarantee that the returned
 Rectangle2D is the smallest bounding box that encloses
 the Shape, only that the Shape lies
 entirely within the indicated Rectangle2D.  The
 bounding box returned by this method is usually tighter than that
 returned by the getBounds method and never fails due
 to overflow problems since the return value can be an instance of
 the Rectangle2D that uses double precision values to
 store the dimensions.

 
 Note that the 
 definition of insideness can lead to situations where points
 on the defining outline of the shape may not be considered
 contained in the returned bounds object, but only in cases
 where those points are also not considered contained in the original
 shape.
 

 If a point is inside the shape according to the
 contains(point) method, then it must
 be inside the returned Rectangle2D bounds object according
 to the contains(point) method of the
 bounds. Specifically:
 

shape.contains(p) requires bounds.contains(p)


 If a point is not inside the shape, then it might
 still be contained in the bounds object:
 

bounds.contains(p) does not imply shape.contains(p)


Specified by:
getBounds2D in interface Shape
Overrides:
getBounds2D in class Rectangle2D
Returns:
an instance of Rectangle2D that is a
                 high-precision bounding box of the Shape.
Since:
1.2
See Also:
Shape.getBounds()


"
Rectangle2D.Double,getHeight(),double,Returns the height of the framing rectangle in double precision.,"

getHeight
public double getHeight()
Returns the height of the framing rectangle
 in double precision.

Specified by:
getHeight in class RectangularShape
Returns:
the height of the framing rectangle.
Since:
1.2


"
Rectangle2D.Double,getWidth(),double,Returns the width of the framing rectangle in double precision.,"

getWidth
public double getWidth()
Returns the width of the framing rectangle in
 double precision.

Specified by:
getWidth in class RectangularShape
Returns:
the width of the framing rectangle.
Since:
1.2


"
Rectangle2D.Double,getX(),double,Returns the X coordinate of the upper-left corner of the framing rectangle in double precision.,"

getX
public double getX()
Returns the X coordinate of the upper-left corner of
 the framing rectangle in double precision.

Specified by:
getX in class RectangularShape
Returns:
the X coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
Rectangle2D.Double,getY(),double,Returns the Y coordinate of the upper-left corner of the framing rectangle in double precision.,"

getY
public double getY()
Returns the Y coordinate of the upper-left corner of
 the framing rectangle in double precision.

Specified by:
getY in class RectangularShape
Returns:
the Y coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
Rectangle2D.Double,isEmpty(),boolean,Determines whether the RectangularShape is empty.,"

isEmpty
public boolean isEmpty()
Determines whether the RectangularShape is empty.
 When the RectangularShape is empty, it encloses no
 area.

Specified by:
isEmpty in class RectangularShape
Returns:
true if the RectangularShape is empty;
          false otherwise.
Since:
1.2


"
Rectangle2D.Double,"outcode(double x, double y)",int,Determines where the specified coordinates lie with respect to this Rectangle2D.,"

outcode
public int outcode(double x,
                   double y)
Determines where the specified coordinates lie with respect
 to this Rectangle2D.
 This method computes a binary OR of the appropriate mask values
 indicating, for each side of this Rectangle2D,
 whether or not the specified coordinates are on the same side
 of the edge as the rest of this Rectangle2D.

Specified by:
outcode in class Rectangle2D
Parameters:
x - the specified X coordinate
y - the specified Y coordinate
Returns:
the logical OR of all appropriate out codes.
Since:
1.2
See Also:
Rectangle2D.OUT_LEFT, 
Rectangle2D.OUT_TOP, 
Rectangle2D.OUT_RIGHT, 
Rectangle2D.OUT_BOTTOM


"
Rectangle2D.Double,"setRect(double x, double y, double w, double h)",void,Sets the location and size of this Rectangle2D to the specified double values.,"

setRect
public void setRect(double x,
                    double y,
                    double w,
                    double h)
Sets the location and size of this Rectangle2D
 to the specified double values.

Specified by:
setRect in class Rectangle2D
Parameters:
x - the X coordinate of the upper-left corner
          of this Rectangle2D
y - the Y coordinate of the upper-left corner
          of this Rectangle2D
w - the width of this Rectangle2D
h - the height of this Rectangle2D
Since:
1.2


"
Rectangle2D.Double,setRect(Rectangle2D r),void,Sets this Rectangle2D to be the same as the specified Rectangle2D.,"

setRect
public void setRect(Rectangle2D r)
Sets this Rectangle2D to be the same as the specified
 Rectangle2D.

Overrides:
setRect in class Rectangle2D
Parameters:
r - the specified Rectangle2D
Since:
1.2


"
Rectangle2D.Double,toString(),String,Returns the String representation of this Rectangle2D.,"

toString
public String toString()
Returns the String representation of this
 Rectangle2D.

Overrides:
toString in class Object
Returns:
a String representing this
 Rectangle2D.
Since:
1.2


"
Rectangle2D.Float,createIntersection(Rectangle2D r),Rectangle2D,Returns a new Rectangle2D object representing the intersection of this Rectangle2D with the specified Rectangle2D.,"

createIntersection
public Rectangle2D createIntersection(Rectangle2D r)
Returns a new Rectangle2D object representing the
 intersection of this Rectangle2D with the specified
 Rectangle2D.

Specified by:
createIntersection in class Rectangle2D
Parameters:
r - the Rectangle2D to be intersected with
 this Rectangle2D
Returns:
the largest Rectangle2D contained in both
          the specified Rectangle2D and in this
          Rectangle2D.
Since:
1.2


"
Rectangle2D.Float,createUnion(Rectangle2D r),Rectangle2D,Returns a new Rectangle2D object representing the union of this Rectangle2D with the specified Rectangle2D.,"

createUnion
public Rectangle2D createUnion(Rectangle2D r)
Returns a new Rectangle2D object representing the
 union of this Rectangle2D with the specified
 Rectangle2D.

Specified by:
createUnion in class Rectangle2D
Parameters:
r - the Rectangle2D to be combined with
 this Rectangle2D
Returns:
the smallest Rectangle2D containing both
 the specified Rectangle2D and this
 Rectangle2D.
Since:
1.2


"
Rectangle2D.Float,getBounds2D(),Rectangle2D,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.,"

getBounds2D
public Rectangle2D getBounds2D()
Returns a high precision and more accurate bounding box of
 the Shape than the getBounds method.
 Note that there is no guarantee that the returned
 Rectangle2D is the smallest bounding box that encloses
 the Shape, only that the Shape lies
 entirely within the indicated Rectangle2D.  The
 bounding box returned by this method is usually tighter than that
 returned by the getBounds method and never fails due
 to overflow problems since the return value can be an instance of
 the Rectangle2D that uses double precision values to
 store the dimensions.

 
 Note that the 
 definition of insideness can lead to situations where points
 on the defining outline of the shape may not be considered
 contained in the returned bounds object, but only in cases
 where those points are also not considered contained in the original
 shape.
 

 If a point is inside the shape according to the
 contains(point) method, then it must
 be inside the returned Rectangle2D bounds object according
 to the contains(point) method of the
 bounds. Specifically:
 

shape.contains(p) requires bounds.contains(p)


 If a point is not inside the shape, then it might
 still be contained in the bounds object:
 

bounds.contains(p) does not imply shape.contains(p)


Specified by:
getBounds2D in interface Shape
Overrides:
getBounds2D in class Rectangle2D
Returns:
an instance of Rectangle2D that is a
                 high-precision bounding box of the Shape.
Since:
1.2
See Also:
Shape.getBounds()


"
Rectangle2D.Float,getHeight(),double,Returns the height of the framing rectangle in double precision.,"

getHeight
public double getHeight()
Returns the height of the framing rectangle
 in double precision.

Specified by:
getHeight in class RectangularShape
Returns:
the height of the framing rectangle.
Since:
1.2


"
Rectangle2D.Float,getWidth(),double,Returns the width of the framing rectangle in double precision.,"

getWidth
public double getWidth()
Returns the width of the framing rectangle in
 double precision.

Specified by:
getWidth in class RectangularShape
Returns:
the width of the framing rectangle.
Since:
1.2


"
Rectangle2D.Float,getX(),double,Returns the X coordinate of the upper-left corner of the framing rectangle in double precision.,"

getX
public double getX()
Returns the X coordinate of the upper-left corner of
 the framing rectangle in double precision.

Specified by:
getX in class RectangularShape
Returns:
the X coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
Rectangle2D.Float,getY(),double,Returns the Y coordinate of the upper-left corner of the framing rectangle in double precision.,"

getY
public double getY()
Returns the Y coordinate of the upper-left corner of
 the framing rectangle in double precision.

Specified by:
getY in class RectangularShape
Returns:
the Y coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
Rectangle2D.Float,isEmpty(),boolean,Determines whether the RectangularShape is empty.,"

isEmpty
public boolean isEmpty()
Determines whether the RectangularShape is empty.
 When the RectangularShape is empty, it encloses no
 area.

Specified by:
isEmpty in class RectangularShape
Returns:
true if the RectangularShape is empty;
          false otherwise.
Since:
1.2


"
Rectangle2D.Float,"outcode(double x, double y)",int,Determines where the specified coordinates lie with respect to this Rectangle2D.,"

outcode
public int outcode(double x,
                   double y)
Determines where the specified coordinates lie with respect
 to this Rectangle2D.
 This method computes a binary OR of the appropriate mask values
 indicating, for each side of this Rectangle2D,
 whether or not the specified coordinates are on the same side
 of the edge as the rest of this Rectangle2D.

Specified by:
outcode in class Rectangle2D
Parameters:
x - the specified X coordinate
y - the specified Y coordinate
Returns:
the logical OR of all appropriate out codes.
Since:
1.2
See Also:
Rectangle2D.OUT_LEFT, 
Rectangle2D.OUT_TOP, 
Rectangle2D.OUT_RIGHT, 
Rectangle2D.OUT_BOTTOM


"
Rectangle2D.Float,"setRect(double x, double y, double w, double h)",void,Sets the location and size of this Rectangle2D to the specified double values.,"

setRect
public void setRect(double x,
                    double y,
                    double w,
                    double h)
Sets the location and size of this Rectangle2D
 to the specified double values.

Specified by:
setRect in class Rectangle2D
Parameters:
x - the X coordinate of the upper-left corner
          of this Rectangle2D
y - the Y coordinate of the upper-left corner
          of this Rectangle2D
w - the width of this Rectangle2D
h - the height of this Rectangle2D
Since:
1.2


"
Rectangle2D.Float,"setRect(float x, float y, float w, float h)",void,Sets the location and size of this Rectangle2D to the specified float values.,"

setRect
public void setRect(float x,
                    float y,
                    float w,
                    float h)
Sets the location and size of this Rectangle2D
 to the specified float values.

Parameters:
x - the X coordinate of the upper-left corner
          of this Rectangle2D
y - the Y coordinate of the upper-left corner
          of this Rectangle2D
w - the width of this Rectangle2D
h - the height of this Rectangle2D
Since:
1.2


"
Rectangle2D.Float,setRect(Rectangle2D r),void,Sets this Rectangle2D to be the same as the specified Rectangle2D.,"

setRect
public void setRect(Rectangle2D r)
Sets this Rectangle2D to be the same as the specified
 Rectangle2D.

Overrides:
setRect in class Rectangle2D
Parameters:
r - the specified Rectangle2D
Since:
1.2


"
Rectangle2D.Float,toString(),String,Returns the String representation of this Rectangle2D.,"

toString
public String toString()
Returns the String representation of this
 Rectangle2D.

Overrides:
toString in class Object
Returns:
a String representing this
 Rectangle2D.
Since:
1.2


"
RectangularShape,clone(),Object,Creates a new object of the same class and with the same contents as this object.,"

clone
public Object clone()
Creates a new object of the same class and with the same
 contents as this object.

Overrides:
clone in class Object
Returns:
a clone of this instance.
Throws:
OutOfMemoryError - if there is not enough memory.
Since:
1.2
See Also:
Cloneable


"
RectangularShape,contains(Point2D p),boolean,"Tests if a specified Point2D is inside the boundary of the Shape, as described by the definition of insideness.","

contains
public boolean contains(Point2D p)
Tests if a specified Point2D is inside the boundary
 of the Shape, as described by the
 
 definition of insideness.

Specified by:
contains in interface Shape
Parameters:
p - the specified Point2D to be tested
Returns:
true if the specified Point2D is
          inside the boundary of the Shape;
          false otherwise.
Since:
1.2


"
RectangularShape,contains(Rectangle2D r),boolean,Tests if the interior of the Shape entirely contains the specified Rectangle2D.,"

contains
public boolean contains(Rectangle2D r)
Tests if the interior of the Shape entirely contains the
 specified Rectangle2D.
 The Shape.contains() method allows a Shape
 implementation to conservatively return false when:
 

 the intersect method returns true and
 
 the calculations to determine whether or not the
 Shape entirely contains the Rectangle2D
 are prohibitively expensive.
 
 This means that for some Shapes this method might
 return false even though the Shape contains
 the Rectangle2D.
 The Area class performs
 more accurate geometric computations than most
 Shape objects and therefore can be used if a more precise
 answer is required.

Specified by:
contains in interface Shape
Parameters:
r - The specified Rectangle2D
Returns:
true if the interior of the Shape
          entirely contains the Rectangle2D;
          false otherwise or, if the Shape
          contains the Rectangle2D and the
          intersects method returns true
          and the containment calculations would be too expensive to
          perform.
Since:
1.2
See Also:
Shape.contains(double, double, double, double)


"
RectangularShape,getBounds(),Rectangle,Returns an integer Rectangle that completely encloses the Shape.,"

getBounds
public Rectangle getBounds()
Returns an integer Rectangle that completely encloses the
 Shape.  Note that there is no guarantee that the
 returned Rectangle is the smallest bounding box that
 encloses the Shape, only that the Shape
 lies entirely within the indicated  Rectangle.  The
 returned Rectangle might also fail to completely
 enclose the Shape if the Shape overflows
 the limited range of the integer data type.  The
 getBounds2D method generally returns a
 tighter bounding box due to its greater flexibility in
 representation.

 
 Note that the 
 definition of insideness can lead to situations where points
 on the defining outline of the shape may not be considered
 contained in the returned bounds object, but only in cases
 where those points are also not considered contained in the original
 shape.
 

 If a point is inside the shape according to the
 contains(point) method, then
 it must be inside the returned Rectangle bounds object
 according to the contains(point)
 method of the bounds. Specifically:
 

shape.contains(x,y) requires bounds.contains(x,y)


 If a point is not inside the shape, then it might
 still be contained in the bounds object:
 

bounds.contains(x,y) does not imply shape.contains(x,y)


Specified by:
getBounds in interface Shape
Returns:
an integer Rectangle that completely encloses
                 the Shape.
Since:
1.2
See Also:
Shape.getBounds2D()


"
RectangularShape,getCenterX(),double,Returns the X coordinate of the center of the framing rectangle of the Shape in double precision.,"

getCenterX
public double getCenterX()
Returns the X coordinate of the center of the framing
 rectangle of the Shape in double
 precision.

Returns:
the X coordinate of the center of the framing rectangle
          of the Shape.
Since:
1.2


"
RectangularShape,getCenterY(),double,Returns the Y coordinate of the center of the framing rectangle of the Shape in double precision.,"

getCenterY
public double getCenterY()
Returns the Y coordinate of the center of the framing
 rectangle of the Shape in double
 precision.

Returns:
the Y coordinate of the center of the framing rectangle
          of the Shape.
Since:
1.2


"
RectangularShape,getFrame(),Rectangle2D,Returns the framing Rectangle2D that defines the overall shape of this object.,"

getFrame
public Rectangle2D getFrame()
Returns the framing Rectangle2D
 that defines the overall shape of this object.

Returns:
a Rectangle2D, specified in
 double coordinates.
Since:
1.2
See Also:
setFrame(double, double, double, double), 
setFrame(Point2D, Dimension2D), 
setFrame(Rectangle2D)


"
RectangularShape,getHeight(),abstract double,Returns the height of the framing rectangle in double precision.,"

getHeight
public abstract double getHeight()
Returns the height of the framing rectangle
 in double precision.

Returns:
the height of the framing rectangle.
Since:
1.2


"
RectangularShape,getMaxX(),double,Returns the largest X coordinate of the framing rectangle of the Shape in double precision.,"

getMaxX
public double getMaxX()
Returns the largest X coordinate of the framing
 rectangle of the Shape in double
 precision.

Returns:
the largest X coordinate of the framing
          rectangle of the Shape.
Since:
1.2


"
RectangularShape,getMaxY(),double,Returns the largest Y coordinate of the framing rectangle of the Shape in double precision.,"

getMaxY
public double getMaxY()
Returns the largest Y coordinate of the framing
 rectangle of the Shape in double
 precision.

Returns:
the largest Y coordinate of the framing
          rectangle of the Shape.
Since:
1.2


"
RectangularShape,getMinX(),double,Returns the smallest X coordinate of the framing rectangle of the Shape in double precision.,"

getMinX
public double getMinX()
Returns the smallest X coordinate of the framing
 rectangle of the Shape in double
 precision.

Returns:
the smallest X coordinate of the framing
          rectangle of the Shape.
Since:
1.2


"
RectangularShape,getMinY(),double,Returns the smallest Y coordinate of the framing rectangle of the Shape in double precision.,"

getMinY
public double getMinY()
Returns the smallest Y coordinate of the framing
 rectangle of the Shape in double
 precision.

Returns:
the smallest Y coordinate of the framing
          rectangle of the Shape.
Since:
1.2


"
RectangularShape,"getPathIterator(AffineTransform at, double flatness)",PathIterator,Returns an iterator object that iterates along the Shape object's boundary and provides access to a flattened view of the outline of the Shape object's geometry.,"

getPathIterator
public PathIterator getPathIterator(AffineTransform at,
                                    double flatness)
Returns an iterator object that iterates along the
 Shape object's boundary and provides access to a
 flattened view of the outline of the Shape
 object's geometry.
 
 Only SEG_MOVETO, SEG_LINETO, and SEG_CLOSE point types will
 be returned by the iterator.
 
 The amount of subdivision of the curved segments is controlled
 by the flatness parameter, which specifies the
 maximum distance that any point on the unflattened transformed
 curve can deviate from the returned flattened path segments.
 An optional AffineTransform can
 be specified so that the coordinates returned in the iteration are
 transformed accordingly.

Specified by:
getPathIterator in interface Shape
Parameters:
at - an optional AffineTransform to be applied to the
          coordinates as they are returned in the iteration,
          or null if untransformed coordinates are desired.
flatness - the maximum distance that the line segments used to
          approximate the curved segments are allowed to deviate
          from any point on the original curve
Returns:
a PathIterator object that provides access to
          the Shape object's flattened geometry.
Since:
1.2


"
RectangularShape,getWidth(),abstract double,Returns the width of the framing rectangle in double precision.,"

getWidth
public abstract double getWidth()
Returns the width of the framing rectangle in
 double precision.

Returns:
the width of the framing rectangle.
Since:
1.2


"
RectangularShape,getX(),abstract double,Returns the X coordinate of the upper-left corner of the framing rectangle in double precision.,"

getX
public abstract double getX()
Returns the X coordinate of the upper-left corner of
 the framing rectangle in double precision.

Returns:
the X coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
RectangularShape,getY(),abstract double,Returns the Y coordinate of the upper-left corner of the framing rectangle in double precision.,"

getY
public abstract double getY()
Returns the Y coordinate of the upper-left corner of
 the framing rectangle in double precision.

Returns:
the Y coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
RectangularShape,intersects(Rectangle2D r),boolean,Tests if the interior of the Shape intersects the interior of a specified Rectangle2D.,"

intersects
public boolean intersects(Rectangle2D r)
Tests if the interior of the Shape intersects the
 interior of a specified Rectangle2D.
 The Shape.intersects() method allows a Shape
 implementation to conservatively return true when:
 

 there is a high probability that the Rectangle2D and the
 Shape intersect, but
 
 the calculations to accurately determine this intersection
 are prohibitively expensive.
 
 This means that for some Shapes this method might
 return true even though the Rectangle2D does not
 intersect the Shape.
 The Area class performs
 more accurate computations of geometric intersection than most
 Shape objects and therefore can be used if a more precise
 answer is required.

Specified by:
intersects in interface Shape
Parameters:
r - the specified Rectangle2D
Returns:
true if the interior of the Shape and
          the interior of the specified Rectangle2D
          intersect, or are both highly likely to intersect and intersection
          calculations would be too expensive to perform; false
          otherwise.
Since:
1.2
See Also:
Shape.intersects(double, double, double, double)


"
RectangularShape,isEmpty(),abstract boolean,Determines whether the RectangularShape is empty.,"

isEmpty
public abstract boolean isEmpty()
Determines whether the RectangularShape is empty.
 When the RectangularShape is empty, it encloses no
 area.

Returns:
true if the RectangularShape is empty;
          false otherwise.
Since:
1.2


"
RectangularShape,"setFrame(double x, double y, double w, double h)",abstract void,Sets the location and size of the framing rectangle of this Shape to the specified rectangular values.,"

setFrame
public abstract void setFrame(double x,
                              double y,
                              double w,
                              double h)
Sets the location and size of the framing rectangle of this
 Shape to the specified rectangular values.

Parameters:
x - the X coordinate of the upper-left corner of the
          specified rectangular shape
y - the Y coordinate of the upper-left corner of the
          specified rectangular shape
w - the width of the specified rectangular shape
h - the height of the specified rectangular shape
Since:
1.2
See Also:
getFrame()


"
RectangularShape,"setFrame(Point2D loc, Dimension2D size)",void,"Sets the location and size of the framing rectangle of this Shape to the specified Point2D and Dimension2D, respectively.","

setFrame
public void setFrame(Point2D loc,
                     Dimension2D size)
Sets the location and size of the framing rectangle of this
 Shape to the specified Point2D and
 Dimension2D, respectively.  The framing rectangle is used
 by the subclasses of RectangularShape to define
 their geometry.

Parameters:
loc - the specified Point2D
size - the specified Dimension2D
Since:
1.2
See Also:
getFrame()


"
RectangularShape,setFrame(Rectangle2D r),void,Sets the framing rectangle of this Shape to be the specified Rectangle2D.,"

setFrame
public void setFrame(Rectangle2D r)
Sets the framing rectangle of this Shape to
 be the specified Rectangle2D.  The framing rectangle is
 used by the subclasses of RectangularShape to define
 their geometry.

Parameters:
r - the specified Rectangle2D
Since:
1.2
See Also:
getFrame()


"
RectangularShape,"setFrameFromCenter(double centerX, double centerY, double cornerX, double cornerY)",void,Sets the framing rectangle of this Shape based on the specified center point coordinates and corner point coordinates.,"

setFrameFromCenter
public void setFrameFromCenter(double centerX,
                               double centerY,
                               double cornerX,
                               double cornerY)
Sets the framing rectangle of this Shape
 based on the specified center point coordinates and corner point
 coordinates.  The framing rectangle is used by the subclasses of
 RectangularShape to define their geometry.

Parameters:
centerX - the X coordinate of the specified center point
centerY - the Y coordinate of the specified center point
cornerX - the X coordinate of the specified corner point
cornerY - the Y coordinate of the specified corner point
Since:
1.2


"
RectangularShape,"setFrameFromCenter(Point2D center, Point2D corner)",void,Sets the framing rectangle of this Shape based on a specified center Point2D and corner Point2D.,"

setFrameFromCenter
public void setFrameFromCenter(Point2D center,
                               Point2D corner)
Sets the framing rectangle of this Shape based on a
 specified center Point2D and corner
 Point2D.  The framing rectangle is used by the subclasses
 of RectangularShape to define their geometry.

Parameters:
center - the specified center Point2D
corner - the specified corner Point2D
Since:
1.2


"
RectangularShape,"setFrameFromDiagonal(double x1, double y1, double x2, double y2)",void,Sets the diagonal of the framing rectangle of this Shape based on the two specified coordinates.,"

setFrameFromDiagonal
public void setFrameFromDiagonal(double x1,
                                 double y1,
                                 double x2,
                                 double y2)
Sets the diagonal of the framing rectangle of this Shape
 based on the two specified coordinates.  The framing rectangle is
 used by the subclasses of RectangularShape to define
 their geometry.

Parameters:
x1 - the X coordinate of the start point of the specified diagonal
y1 - the Y coordinate of the start point of the specified diagonal
x2 - the X coordinate of the end point of the specified diagonal
y2 - the Y coordinate of the end point of the specified diagonal
Since:
1.2


"
RectangularShape,"setFrameFromDiagonal(Point2D p1, Point2D p2)",void,Sets the diagonal of the framing rectangle of this Shape based on two specified Point2D objects.,"

setFrameFromDiagonal
public void setFrameFromDiagonal(Point2D p1,
                                 Point2D p2)
Sets the diagonal of the framing rectangle of this Shape
 based on two specified Point2D objects.  The framing
 rectangle is used by the subclasses of RectangularShape
 to define their geometry.

Parameters:
p1 - the start Point2D of the specified diagonal
p2 - the end Point2D of the specified diagonal
Since:
1.2


"
RoundRectangle2D,"contains(double x, double y)",boolean,"Tests if the specified coordinates are inside the boundary of the Shape, as described by the definition of insideness.","

contains
public boolean contains(double x,
                        double y)
Tests if the specified coordinates are inside the boundary of the
 Shape, as described by the
 
 definition of insideness.

Parameters:
x - the specified X coordinate to be tested
y - the specified Y coordinate to be tested
Returns:
true if the specified coordinates are inside
         the Shape boundary; false
         otherwise.
Since:
1.2


"
RoundRectangle2D,"contains(double x, double y, double w, double h)",boolean,Tests if the interior of the Shape entirely contains the specified rectangular area.,"

contains
public boolean contains(double x,
                        double y,
                        double w,
                        double h)
Tests if the interior of the Shape entirely contains
 the specified rectangular area.  All coordinates that lie inside
 the rectangular area must lie within the Shape for the
 entire rectangular area to be considered contained within the
 Shape.
 
 The Shape.contains() method allows a Shape
 implementation to conservatively return false when:
 

 the intersect method returns true and
 
 the calculations to determine whether or not the
 Shape entirely contains the rectangular area are
 prohibitively expensive.
 
 This means that for some Shapes this method might
 return false even though the Shape contains
 the rectangular area.
 The Area class performs
 more accurate geometric computations than most
 Shape objects and therefore can be used if a more precise
 answer is required.

Parameters:
x - the X coordinate of the upper-left corner
          of the specified rectangular area
y - the Y coordinate of the upper-left corner
          of the specified rectangular area
w - the width of the specified rectangular area
h - the height of the specified rectangular area
Returns:
true if the interior of the Shape
          entirely contains the specified rectangular area;
          false otherwise or, if the Shape
          contains the rectangular area and the
          intersects method returns true
          and the containment calculations would be too expensive to
          perform.
Since:
1.2
See Also:
Area, 
Shape.intersects(double, double, double, double)


"
RoundRectangle2D,equals(Object obj),boolean,Determines whether or not the specified Object is equal to this RoundRectangle2D.,"

equals
public boolean equals(Object obj)
Determines whether or not the specified Object is
 equal to this RoundRectangle2D.  The specified
 Object is equal to this RoundRectangle2D
 if it is an instance of RoundRectangle2D and if its
 location, size, and corner arc dimensions are the same as this
 RoundRectangle2D.

Overrides:
equals in class Object
Parameters:
obj - an Object to be compared with this
             RoundRectangle2D.
Returns:
true if obj is an instance
          of RoundRectangle2D and has the same values;
          false otherwise.
Since:
1.6
See Also:
Object.hashCode(), 
HashMap


"
RoundRectangle2D,getArcHeight(),abstract double,Gets the height of the arc that rounds off the corners.,"

getArcHeight
public abstract double getArcHeight()
Gets the height of the arc that rounds off the corners.

Returns:
the height of the arc that rounds off the corners
 of this RoundRectangle2D.
Since:
1.2


"
RoundRectangle2D,getArcWidth(),abstract double,Gets the width of the arc that rounds off the corners.,"

getArcWidth
public abstract double getArcWidth()
Gets the width of the arc that rounds off the corners.

Returns:
the width of the arc that rounds off the corners
 of this RoundRectangle2D.
Since:
1.2


"
RoundRectangle2D,getPathIterator(AffineTransform at),PathIterator,Returns an iteration object that defines the boundary of this RoundRectangle2D.,"

getPathIterator
public PathIterator getPathIterator(AffineTransform at)
Returns an iteration object that defines the boundary of this
 RoundRectangle2D.
 The iterator for this class is multi-threaded safe, which means
 that this RoundRectangle2D class guarantees that
 modifications to the geometry of this RoundRectangle2D
 object do not affect any iterations of that geometry that
 are already in process.

Parameters:
at - an optional AffineTransform to be applied to
 the coordinates as they are returned in the iteration, or
 null if untransformed coordinates are desired
Returns:
the PathIterator object that returns the
          geometry of the outline of this
          RoundRectangle2D, one segment at a time.
Since:
1.2


"
RoundRectangle2D,hashCode(),int,Returns the hashcode for this RoundRectangle2D.,"

hashCode
public int hashCode()
Returns the hashcode for this RoundRectangle2D.

Overrides:
hashCode in class Object
Returns:
the hashcode for this RoundRectangle2D.
Since:
1.6
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
RoundRectangle2D,"intersects(double x, double y, double w, double h)",boolean,Tests if the interior of the Shape intersects the interior of a specified rectangular area.,"

intersects
public boolean intersects(double x,
                          double y,
                          double w,
                          double h)
Tests if the interior of the Shape intersects the
 interior of a specified rectangular area.
 The rectangular area is considered to intersect the Shape
 if any point is contained in both the interior of the
 Shape and the specified rectangular area.
 
 The Shape.intersects() method allows a Shape
 implementation to conservatively return true when:
 

 there is a high probability that the rectangular area and the
 Shape intersect, but
 
 the calculations to accurately determine this intersection
 are prohibitively expensive.
 
 This means that for some Shapes this method might
 return true even though the rectangular area does not
 intersect the Shape.
 The Area class performs
 more accurate computations of geometric intersection than most
 Shape objects and therefore can be used if a more precise
 answer is required.

Parameters:
x - the X coordinate of the upper-left corner
          of the specified rectangular area
y - the Y coordinate of the upper-left corner
          of the specified rectangular area
w - the width of the specified rectangular area
h - the height of the specified rectangular area
Returns:
true if the interior of the Shape and
          the interior of the rectangular area intersect, or are
          both highly likely to intersect and intersection calculations
          would be too expensive to perform; false otherwise.
Since:
1.2
See Also:
Area


"
RoundRectangle2D,"setFrame(double x, double y, double w, double h)",void,Sets the location and size of the framing rectangle of this Shape to the specified rectangular values.,"

setFrame
public void setFrame(double x,
                     double y,
                     double w,
                     double h)
Sets the location and size of the framing rectangle of this
 Shape to the specified rectangular values.

Specified by:
setFrame in class RectangularShape
Parameters:
x - the X coordinate of the upper-left corner of the
          specified rectangular shape
y - the Y coordinate of the upper-left corner of the
          specified rectangular shape
w - the width of the specified rectangular shape
h - the height of the specified rectangular shape
Since:
1.2
See Also:
RectangularShape.getFrame()


"
RoundRectangle2D,"setRoundRect(double x, double y, double w, double h, double arcWidth, double arcHeight)",abstract void,"Sets the location, size, and corner radii of this RoundRectangle2D to the specified double values.","

setRoundRect
public abstract void setRoundRect(double x,
                                  double y,
                                  double w,
                                  double h,
                                  double arcWidth,
                                  double arcHeight)
Sets the location, size, and corner radii of this
 RoundRectangle2D to the specified
 double values.

Parameters:
x - the X coordinate to which to set the
          location of this RoundRectangle2D
y - the Y coordinate to which to set the
          location of this RoundRectangle2D
w - the width to which to set this
          RoundRectangle2D
h - the height to which to set this
          RoundRectangle2D
arcWidth - the width to which to set the arc of this
                 RoundRectangle2D
arcHeight - the height to which to set the arc of this
                  RoundRectangle2D
Since:
1.2


"
RoundRectangle2D,setRoundRect(RoundRectangle2D rr),void,Sets this RoundRectangle2D to be the same as the specified RoundRectangle2D.,"

setRoundRect
public void setRoundRect(RoundRectangle2D rr)
Sets this RoundRectangle2D to be the same as the
 specified RoundRectangle2D.

Parameters:
rr - the specified RoundRectangle2D
Since:
1.2


"
RoundRectangle2D.Double,getArcHeight(),double,Gets the height of the arc that rounds off the corners.,"

getArcHeight
public double getArcHeight()
Gets the height of the arc that rounds off the corners.

Specified by:
getArcHeight in class RoundRectangle2D
Returns:
the height of the arc that rounds off the corners
 of this RoundRectangle2D.
Since:
1.2


"
RoundRectangle2D.Double,getArcWidth(),double,Gets the width of the arc that rounds off the corners.,"

getArcWidth
public double getArcWidth()
Gets the width of the arc that rounds off the corners.

Specified by:
getArcWidth in class RoundRectangle2D
Returns:
the width of the arc that rounds off the corners
 of this RoundRectangle2D.
Since:
1.2


"
RoundRectangle2D.Double,getBounds2D(),Rectangle2D,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.,"

getBounds2D
public Rectangle2D getBounds2D()
Returns a high precision and more accurate bounding box of
 the Shape than the getBounds method.
 Note that there is no guarantee that the returned
 Rectangle2D is the smallest bounding box that encloses
 the Shape, only that the Shape lies
 entirely within the indicated Rectangle2D.  The
 bounding box returned by this method is usually tighter than that
 returned by the getBounds method and never fails due
 to overflow problems since the return value can be an instance of
 the Rectangle2D that uses double precision values to
 store the dimensions.

 
 Note that the 
 definition of insideness can lead to situations where points
 on the defining outline of the shape may not be considered
 contained in the returned bounds object, but only in cases
 where those points are also not considered contained in the original
 shape.
 

 If a point is inside the shape according to the
 contains(point) method, then it must
 be inside the returned Rectangle2D bounds object according
 to the contains(point) method of the
 bounds. Specifically:
 

shape.contains(p) requires bounds.contains(p)


 If a point is not inside the shape, then it might
 still be contained in the bounds object:
 

bounds.contains(p) does not imply shape.contains(p)


Specified by:
getBounds2D in interface Shape
Returns:
an instance of Rectangle2D that is a
                 high-precision bounding box of the Shape.
Since:
1.2
See Also:
Shape.getBounds()


"
RoundRectangle2D.Double,getHeight(),double,Returns the height of the framing rectangle in double precision.,"

getHeight
public double getHeight()
Returns the height of the framing rectangle
 in double precision.

Specified by:
getHeight in class RectangularShape
Returns:
the height of the framing rectangle.
Since:
1.2


"
RoundRectangle2D.Double,getWidth(),double,Returns the width of the framing rectangle in double precision.,"

getWidth
public double getWidth()
Returns the width of the framing rectangle in
 double precision.

Specified by:
getWidth in class RectangularShape
Returns:
the width of the framing rectangle.
Since:
1.2


"
RoundRectangle2D.Double,getX(),double,Returns the X coordinate of the upper-left corner of the framing rectangle in double precision.,"

getX
public double getX()
Returns the X coordinate of the upper-left corner of
 the framing rectangle in double precision.

Specified by:
getX in class RectangularShape
Returns:
the X coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
RoundRectangle2D.Double,getY(),double,Returns the Y coordinate of the upper-left corner of the framing rectangle in double precision.,"

getY
public double getY()
Returns the Y coordinate of the upper-left corner of
 the framing rectangle in double precision.

Specified by:
getY in class RectangularShape
Returns:
the Y coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
RoundRectangle2D.Double,isEmpty(),boolean,Determines whether the RectangularShape is empty.,"

isEmpty
public boolean isEmpty()
Determines whether the RectangularShape is empty.
 When the RectangularShape is empty, it encloses no
 area.

Specified by:
isEmpty in class RectangularShape
Returns:
true if the RectangularShape is empty;
          false otherwise.
Since:
1.2


"
RoundRectangle2D.Double,"setRoundRect(double x, double y, double w, double h, double arcw, double arch)",void,"Sets the location, size, and corner radii of this RoundRectangle2D to the specified double values.","

setRoundRect
public void setRoundRect(double x,
                         double y,
                         double w,
                         double h,
                         double arcw,
                         double arch)
Sets the location, size, and corner radii of this
 RoundRectangle2D to the specified
 double values.

Specified by:
setRoundRect in class RoundRectangle2D
Parameters:
x - the X coordinate to which to set the
          location of this RoundRectangle2D
y - the Y coordinate to which to set the
          location of this RoundRectangle2D
w - the width to which to set this
          RoundRectangle2D
h - the height to which to set this
          RoundRectangle2D
arcw - the width to which to set the arc of this
                 RoundRectangle2D
arch - the height to which to set the arc of this
                  RoundRectangle2D
Since:
1.2


"
RoundRectangle2D.Double,setRoundRect(RoundRectangle2D rr),void,Sets this RoundRectangle2D to be the same as the specified RoundRectangle2D.,"

setRoundRect
public void setRoundRect(RoundRectangle2D rr)
Sets this RoundRectangle2D to be the same as the
 specified RoundRectangle2D.

Overrides:
setRoundRect in class RoundRectangle2D
Parameters:
rr - the specified RoundRectangle2D
Since:
1.2


"
RoundRectangle2D.Float,getArcHeight(),double,Gets the height of the arc that rounds off the corners.,"

getArcHeight
public double getArcHeight()
Gets the height of the arc that rounds off the corners.

Specified by:
getArcHeight in class RoundRectangle2D
Returns:
the height of the arc that rounds off the corners
 of this RoundRectangle2D.
Since:
1.2


"
RoundRectangle2D.Float,getArcWidth(),double,Gets the width of the arc that rounds off the corners.,"

getArcWidth
public double getArcWidth()
Gets the width of the arc that rounds off the corners.

Specified by:
getArcWidth in class RoundRectangle2D
Returns:
the width of the arc that rounds off the corners
 of this RoundRectangle2D.
Since:
1.2


"
RoundRectangle2D.Float,getBounds2D(),Rectangle2D,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.,"

getBounds2D
public Rectangle2D getBounds2D()
Returns a high precision and more accurate bounding box of
 the Shape than the getBounds method.
 Note that there is no guarantee that the returned
 Rectangle2D is the smallest bounding box that encloses
 the Shape, only that the Shape lies
 entirely within the indicated Rectangle2D.  The
 bounding box returned by this method is usually tighter than that
 returned by the getBounds method and never fails due
 to overflow problems since the return value can be an instance of
 the Rectangle2D that uses double precision values to
 store the dimensions.

 
 Note that the 
 definition of insideness can lead to situations where points
 on the defining outline of the shape may not be considered
 contained in the returned bounds object, but only in cases
 where those points are also not considered contained in the original
 shape.
 

 If a point is inside the shape according to the
 contains(point) method, then it must
 be inside the returned Rectangle2D bounds object according
 to the contains(point) method of the
 bounds. Specifically:
 

shape.contains(p) requires bounds.contains(p)


 If a point is not inside the shape, then it might
 still be contained in the bounds object:
 

bounds.contains(p) does not imply shape.contains(p)


Specified by:
getBounds2D in interface Shape
Returns:
an instance of Rectangle2D that is a
                 high-precision bounding box of the Shape.
Since:
1.2
See Also:
Shape.getBounds()


"
RoundRectangle2D.Float,getHeight(),double,Returns the height of the framing rectangle in double precision.,"

getHeight
public double getHeight()
Returns the height of the framing rectangle
 in double precision.

Specified by:
getHeight in class RectangularShape
Returns:
the height of the framing rectangle.
Since:
1.2


"
RoundRectangle2D.Float,getWidth(),double,Returns the width of the framing rectangle in double precision.,"

getWidth
public double getWidth()
Returns the width of the framing rectangle in
 double precision.

Specified by:
getWidth in class RectangularShape
Returns:
the width of the framing rectangle.
Since:
1.2


"
RoundRectangle2D.Float,getX(),double,Returns the X coordinate of the upper-left corner of the framing rectangle in double precision.,"

getX
public double getX()
Returns the X coordinate of the upper-left corner of
 the framing rectangle in double precision.

Specified by:
getX in class RectangularShape
Returns:
the X coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
RoundRectangle2D.Float,getY(),double,Returns the Y coordinate of the upper-left corner of the framing rectangle in double precision.,"

getY
public double getY()
Returns the Y coordinate of the upper-left corner of
 the framing rectangle in double precision.

Specified by:
getY in class RectangularShape
Returns:
the Y coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
RoundRectangle2D.Float,isEmpty(),boolean,Determines whether the RectangularShape is empty.,"

isEmpty
public boolean isEmpty()
Determines whether the RectangularShape is empty.
 When the RectangularShape is empty, it encloses no
 area.

Specified by:
isEmpty in class RectangularShape
Returns:
true if the RectangularShape is empty;
          false otherwise.
Since:
1.2


"
RoundRectangle2D.Float,"setRoundRect(double x, double y, double w, double h, double arcw, double arch)",void,"Sets the location, size, and corner radii of this RoundRectangle2D to the specified double values.","

setRoundRect
public void setRoundRect(double x,
                         double y,
                         double w,
                         double h,
                         double arcw,
                         double arch)
Sets the location, size, and corner radii of this
 RoundRectangle2D to the specified
 double values.

Specified by:
setRoundRect in class RoundRectangle2D
Parameters:
x - the X coordinate to which to set the
          location of this RoundRectangle2D
y - the Y coordinate to which to set the
          location of this RoundRectangle2D
w - the width to which to set this
          RoundRectangle2D
h - the height to which to set this
          RoundRectangle2D
arcw - the width to which to set the arc of this
                 RoundRectangle2D
arch - the height to which to set the arc of this
                  RoundRectangle2D
Since:
1.2


"
RoundRectangle2D.Float,"setRoundRect(float x, float y, float w, float h, float arcw, float arch)",void,"Sets the location, size, and corner radii of this RoundRectangle2D to the specified float values.","

setRoundRect
public void setRoundRect(float x,
                         float y,
                         float w,
                         float h,
                         float arcw,
                         float arch)
Sets the location, size, and corner radii of this
 RoundRectangle2D to the specified
 float values.

Parameters:
x - the X coordinate to which to set the
          location of this RoundRectangle2D
y - the Y coordinate to which to set the
          location of this RoundRectangle2D
w - the width to which to set this
          RoundRectangle2D
h - the height to which to set this
          RoundRectangle2D
arcw - the width to which to set the arc of this
             RoundRectangle2D
arch - the height to which to set the arc of this
             RoundRectangle2D
Since:
1.2


"
RoundRectangle2D.Float,setRoundRect(RoundRectangle2D rr),void,Sets this RoundRectangle2D to be the same as the specified RoundRectangle2D.,"

setRoundRect
public void setRoundRect(RoundRectangle2D rr)
Sets this RoundRectangle2D to be the same as the
 specified RoundRectangle2D.

Overrides:
setRoundRect in class RoundRectangle2D
Parameters:
rr - the specified RoundRectangle2D
Since:
1.2


"
