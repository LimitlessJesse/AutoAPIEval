Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,AffineTransform,1,AffineTransform(),False,,NULL
0,AffineTransform,2,"AffineTransform(double m00, double m01, double m02, double m10, double m11, double m12)",False,,NULL
0,AffineTransform,3,void concat(AffineTransform at),False,,NULL
0,AffineTransform,4,"void setToTranslation(double tx, double ty)",True,Sets this transform to a translation transformation.,"

setToTranslation
public void setToTranslation(double tx,
                             double ty)
Sets this transform to a translation transformation.
 The matrix representing this transform becomes:
 
          [   1    0    tx  ]
          [   0    1    ty  ]
          [   0    0    1   ]
 

Parameters:
tx - the distance by which coordinates are translated in the
 X axis direction
ty - the distance by which coordinates are translated in the
 Y axis direction
Since:
1.2


"
0,AffineTransform,5,"void setToScale(double sx, double sy)",True,Sets this transform to a scaling transformation.,"

setToScale
public void setToScale(double sx,
                       double sy)
Sets this transform to a scaling transformation.
 The matrix representing this transform becomes:
 
          [   sx   0    0   ]
          [   0    sy   0   ]
          [   0    0    1   ]
 

Parameters:
sx - the factor by which coordinates are scaled along the
 X axis direction
sy - the factor by which coordinates are scaled along the
 Y axis direction
Since:
1.2


"
0,AffineTransform,6,void setToRotation(double radians),True,Sets this transform to a rotation transformation.,"

setToRotation
public void setToRotation(double theta)
Sets this transform to a rotation transformation.
 The matrix representing this transform becomes:
 
          [   cos(theta)    -sin(theta)    0   ]
          [   sin(theta)     cos(theta)    0   ]
          [       0              0         1   ]
 
 Rotating by a positive angle theta rotates points on the positive
 X axis toward the positive Y axis.
 Note also the discussion of
 Handling 90-Degree Rotations
 above.

Parameters:
theta - the angle of rotation measured in radians
Since:
1.2


"
0,AffineTransform,7,"void setToShear(double shx, double shy)",True,Sets this transform to a shearing transformation.,"

setToShear
public void setToShear(double shx,
                       double shy)
Sets this transform to a shearing transformation.
 The matrix representing this transform becomes:
 
          [   1   shx   0   ]
          [  shy   1    0   ]
          [   0    0    1   ]
 

Parameters:
shx - the multiplier by which coordinates are shifted in the
 direction of the positive X axis as a factor of their Y coordinate
shy - the multiplier by which coordinates are shifted in the
 direction of the positive Y axis as a factor of their X coordinate
Since:
1.2


"
0,AffineTransform,8,void setTransform(AffineTransform at),True,Sets this transform to a copy of the transform in the specified AffineTransform object.,"

setTransform
public void setTransform(AffineTransform Tx)
Sets this transform to a copy of the transform in the specified
 AffineTransform object.

Parameters:
Tx - the AffineTransform object from which to
 copy the transform
Since:
1.2


"
0,AffineTransform,9,"void transform(Point2D src, Point2D dst)",False,,NULL
0,AffineTransform,10,"void transform(Rectangle2D src, Rectangle2D dst)",False,,NULL
0,AffineTransform,11,void inverse(AffineTransform at),False,,NULL
0,AffineTransform,12,boolean isIdentity(),True,Returns true if this AffineTransform is an identity transform.,"

isIdentity
public boolean isIdentity()
Returns true if this AffineTransform is
 an identity transform.

Returns:
true if this AffineTransform is
 an identity transform; false otherwise.
Since:
1.2


"
0,AffineTransform,13,boolean isTranslation(),False,,NULL
0,AffineTransform,14,boolean isScale(),False,,NULL
0,AffineTransform,15,boolean isRotation(),False,,NULL
0,AffineTransform,16,boolean isShear(),False,,NULL
0,AffineTransform,17,boolean isIdentity(double tol),False,,NULL
0,AffineTransform,18,boolean isTranslation(double tol),False,,NULL
0,AffineTransform,19,boolean isScale(double tol),False,,NULL
0,AffineTransform,20,boolean isRotation(double tol),False,,NULL
0,AffineTransform,21,boolean isShear(double tol),False,,NULL
1,Arc2D,1,"Arc2D(Rectangle2D r, double startAngle, double arcAngle, int type)",False,,NULL
1,Arc2D,2,double getStartAngle(),False,,NULL
1,Arc2D,3,double getArcAngle(),False,,NULL
1,Arc2D,4,int getType(),False,,NULL
1,Arc2D,5,boolean contains(Point2D p),False,,NULL
1,Arc2D,6,boolean contains(Rectangle2D r),True,Determines whether or not the interior of the arc entirely contains the specified rectangle.,"

contains
public boolean contains(Rectangle2D r)
Determines whether or not the interior of the arc entirely contains
 the specified rectangle.

Specified by:
contains in interface Shape
Overrides:
contains in class RectangularShape
Parameters:
r - The Rectangle2D to test.
Returns:
true if the arc contains the rectangle,
 false if the arc doesn't contain the rectangle.
Since:
1.2
See Also:
Shape.contains(double, double, double, double)


"
1,Arc2D,7,boolean intersects(Rectangle2D r),False,,NULL
1,Arc2D,8,boolean intersects(Arc2D a),False,,NULL
1,Arc2D,9,"boolean contains(double x, double y)",True,Determines whether or not the specified point is inside the boundary of the arc.,"

contains
public boolean contains(double x,
                        double y)
Determines whether or not the specified point is inside the boundary
 of the arc.

Parameters:
x - The X coordinate of the point to test.
y - The Y coordinate of the point to test.
Returns:
true if the point lies within the bound of
 the arc, false if the point lies outside of the
 arc's bounds.
Since:
1.2


"
1,Arc2D,10,"boolean contains(Rectangle2D r, double x, double y, double w, double h)",False,,NULL
1,Arc2D,11,"boolean intersects(double x, double y, double w, double h)",True,Determines whether or not the interior of the arc intersects the interior of the specified rectangle.,"

intersects
public boolean intersects(double x,
                          double y,
                          double w,
                          double h)
Determines whether or not the interior of the arc intersects
 the interior of the specified rectangle.

Parameters:
x - The X coordinate of the rectangle's upper-left corner.
y - The Y coordinate of the rectangle's upper-left corner.
w - The width of the rectangle.
h - The height of the rectangle.
Returns:
true if the arc intersects the rectangle,
 false if the arc doesn't intersect the rectangle.
Since:
1.2
See Also:
Area


"
1,Arc2D,12,"boolean intersects(Arc2D a, double x, double y, double w, double h)",False,,NULL
1,Arc2D,13,"boolean contains(double x, double y, double w, double h)",True,Determines whether or not the interior of the arc entirely contains the specified rectangle.,"

contains
public boolean contains(double x,
                        double y,
                        double w,
                        double h)
Determines whether or not the interior of the arc entirely contains
 the specified rectangle.

Parameters:
x - The X coordinate of the rectangle's upper-left corner.
y - The Y coordinate of the rectangle's upper-left corner.
w - The width of the rectangle.
h - The height of the rectangle.
Returns:
true if the arc contains the rectangle,
 false if the arc doesn't contain the rectangle.
Since:
1.2
See Also:
Area, 
Shape.intersects(double, double, double, double)


"
1,Arc2D,14,"boolean intersects(double x, double y, double w, double h, double x1, double y1, double w1, double h1)",False,,NULL
1,Arc2D,15,"boolean intersects(Arc2D a, double x, double y, double w, double h, double x1, double y1, double w1, double h1)",False,,NULL
2,Arc2D.Double,1,"Arc2D.Double(double x, double y, double w, double h, double start, double extent)",False,,NULL
2,Arc2D.Double,2,double getX(),True,Returns the X coordinate of the upper-left corner of the framing rectangle in double precision.,"

getX
public double getX()
Returns the X coordinate of the upper-left corner of
 the framing rectangle in double precision.
 Note that the arc
 partially inscribes
 the framing rectangle of this RectangularShape.

Specified by:
getX in class RectangularShape
Returns:
the X coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
2,Arc2D.Double,3,double getY(),True,Returns the Y coordinate of the upper-left corner of the framing rectangle in double precision.,"

getY
public double getY()
Returns the Y coordinate of the upper-left corner of
 the framing rectangle in double precision.
 Note that the arc
 partially inscribes
 the framing rectangle of this RectangularShape.

Specified by:
getY in class RectangularShape
Returns:
the Y coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
2,Arc2D.Double,4,double getWidth(),True,Returns the width of the framing rectangle in double precision.,"

getWidth
public double getWidth()
Returns the width of the framing rectangle in
 double precision.
 Note that the arc
 partially inscribes
 the framing rectangle of this RectangularShape.

Specified by:
getWidth in class RectangularShape
Returns:
the width of the framing rectangle.
Since:
1.2


"
2,Arc2D.Double,5,double getHeight(),True,Returns the height of the framing rectangle in double precision.,"

getHeight
public double getHeight()
Returns the height of the framing rectangle
 in double precision.
 Note that the arc
 partially inscribes
 the framing rectangle of this RectangularShape.

Specified by:
getHeight in class RectangularShape
Returns:
the height of the framing rectangle.
Since:
1.2


"
2,Arc2D.Double,6,double getStartAngle(),False,,NULL
2,Arc2D.Double,7,double getExtentAngle(),False,,NULL
2,Arc2D.Double,8,"boolean contains(double x, double y)",False,,NULL
2,Arc2D.Double,9,"boolean intersects(double x, double y, double w, double h)",False,,NULL
2,Arc2D.Double,10,"boolean contains(double x, double y, double w, double h)",False,,NULL
3,Arc2D.Float,1,"Arc2D.Float(float x, float y, float w, float h, float start, float arc)",False,,NULL
3,Arc2D.Float,2,"boolean contains(double x, double y)",False,,NULL
3,Arc2D.Float,3,boolean contains(Point2D p),False,,NULL
3,Arc2D.Float,4,boolean contains(Rectangle2D r),False,,NULL
3,Arc2D.Float,5,"boolean contains(double x, double y, double w, double h)",False,,NULL
3,Arc2D.Float,6,"boolean contains(Rectangle2D r, int t)",False,,NULL
3,Arc2D.Float,7,"boolean contains(double x, double y, double w, double h, int t)",False,,NULL
3,Arc2D.Float,8,"boolean intersects(double x, double y, double w, double h)",False,,NULL
3,Arc2D.Float,9,boolean intersects(Rectangle2D r),False,,NULL
3,Arc2D.Float,10,"boolean intersects(double x, double y, double w, double h, int t)",False,,NULL
3,Arc2D.Float,11,"boolean intersects(Rectangle2D r, int t)",False,,NULL
3,Arc2D.Float,12,"boolean intersectsLine(double x1, double y1, double x2, double y2)",False,,NULL
3,Arc2D.Float,13,boolean intersects(Line2D l),False,,NULL
3,Arc2D.Float,14,"boolean intersects(double x1, double y1, double x2, double y2, int t)",False,,NULL
3,Arc2D.Float,15,"boolean intersects(Line2D l, int t)",False,,NULL
4,Area,1,boolean add(Area area),False,,NULL
4,Area,2,boolean contains(Point2D p),True,"Tests if a specified Point2D is inside the boundary of the Shape, as described by the definition of insideness.","

contains
public boolean contains(Point2D p)
Tests if a specified Point2D is inside the boundary
 of the Shape, as described by the
 
 definition of insideness.

Specified by:
contains in interface Shape
Parameters:
p - the specified Point2D to be tested
Returns:
true if the specified Point2D is
          inside the boundary of the Shape;
          false otherwise.
Since:
1.2


"
4,Area,3,boolean contains(Rectangle2D r),True,Tests if the interior of the Shape entirely contains the specified Rectangle2D.,"

contains
public boolean contains(Rectangle2D r)
Tests if the interior of the Shape entirely contains the
 specified Rectangle2D.
 The Shape.contains() method allows a Shape
 implementation to conservatively return false when:
 

 the intersect method returns true and
 
 the calculations to determine whether or not the
 Shape entirely contains the Rectangle2D
 are prohibitively expensive.
 
 This means that for some Shapes this method might
 return false even though the Shape contains
 the Rectangle2D.
 The Area class performs
 more accurate geometric computations than most
 Shape objects and therefore can be used if a more precise
 answer is required.

Specified by:
contains in interface Shape
Parameters:
r - The specified Rectangle2D
Returns:
true if the interior of the Shape
          entirely contains the Rectangle2D;
          false otherwise or, if the Shape
          contains the Rectangle2D and the
          intersects method returns true
          and the containment calculations would be too expensive to
          perform.
Since:
1.2
See Also:
Shape.contains(double, double, double, double)


"
4,Area,4,boolean contains(Area area),False,,NULL
4,Area,5,boolean intersects(Rectangle2D r),True,Tests if the interior of the Shape intersects the interior of a specified Rectangle2D.,"

intersects
public boolean intersects(Rectangle2D r)
Tests if the interior of the Shape intersects the
 interior of a specified Rectangle2D.
 The Shape.intersects() method allows a Shape
 implementation to conservatively return true when:
 

 there is a high probability that the Rectangle2D and the
 Shape intersect, but
 
 the calculations to accurately determine this intersection
 are prohibitively expensive.
 
 This means that for some Shapes this method might
 return true even though the Rectangle2D does not
 intersect the Shape.
 The Area class performs
 more accurate computations of geometric intersection than most
 Shape objects and therefore can be used if a more precise
 answer is required.

Specified by:
intersects in interface Shape
Parameters:
r - the specified Rectangle2D
Returns:
true if the interior of the Shape and
          the interior of the specified Rectangle2D
          intersect, or are both highly likely to intersect and intersection
          calculations would be too expensive to perform; false
          otherwise.
Since:
1.2
See Also:
Shape.intersects(double, double, double, double)


"
4,Area,6,boolean intersects(Area area),False,,NULL
4,Area,7,boolean isEmpty(),True,Tests whether this Area object encloses any area.,"

isEmpty
public boolean isEmpty()
Tests whether this Area object encloses any area.

Returns:
true if this Area object
 represents an empty area; false otherwise.
Since:
1.2


"
4,Area,8,boolean isRectangular(),True,Tests whether this Area is rectangular in shape.,"

isRectangular
public boolean isRectangular()
Tests whether this Area is rectangular in shape.

Returns:
true if the geometry of this
 Area is rectangular in shape; false
 otherwise.
Since:
1.2


"
4,Area,9,boolean isEmpty(),True,Tests whether this Area object encloses any area.,"

isEmpty
public boolean isEmpty()
Tests whether this Area object encloses any area.

Returns:
true if this Area object
 represents an empty area; false otherwise.
Since:
1.2


"
4,Area,10,boolean isRectangular(),True,Tests whether this Area is rectangular in shape.,"

isRectangular
public boolean isRectangular()
Tests whether this Area is rectangular in shape.

Returns:
true if the geometry of this
 Area is rectangular in shape; false
 otherwise.
Since:
1.2


"
4,Area,11,boolean isEmpty(),True,Tests whether this Area object encloses any area.,"

isEmpty
public boolean isEmpty()
Tests whether this Area object encloses any area.

Returns:
true if this Area object
 represents an empty area; false otherwise.
Since:
1.2


"
4,Area,12,boolean isRectangular(),True,Tests whether this Area is rectangular in shape.,"

isRectangular
public boolean isRectangular()
Tests whether this Area is rectangular in shape.

Returns:
true if the geometry of this
 Area is rectangular in shape; false
 otherwise.
Since:
1.2


"
4,Area,13,boolean isEmpty(),True,Tests whether this Area object encloses any area.,"

isEmpty
public boolean isEmpty()
Tests whether this Area object encloses any area.

Returns:
true if this Area object
 represents an empty area; false otherwise.
Since:
1.2


"
4,Area,14,boolean isRectangular(),True,Tests whether this Area is rectangular in shape.,"

isRectangular
public boolean isRectangular()
Tests whether this Area is rectangular in shape.

Returns:
true if the geometry of this
 Area is rectangular in shape; false
 otherwise.
Since:
1.2


"
4,Area,15,boolean isEmpty(),True,Tests whether this Area object encloses any area.,"

isEmpty
public boolean isEmpty()
Tests whether this Area object encloses any area.

Returns:
true if this Area object
 represents an empty area; false otherwise.
Since:
1.2


"
4,Area,16,boolean isRectangular(),True,Tests whether this Area is rectangular in shape.,"

isRectangular
public boolean isRectangular()
Tests whether this Area is rectangular in shape.

Returns:
true if the geometry of this
 Area is rectangular in shape; false
 otherwise.
Since:
1.2


"
4,Area,17,boolean isEmpty(),True,Tests whether this Area object encloses any area.,"

isEmpty
public boolean isEmpty()
Tests whether this Area object encloses any area.

Returns:
true if this Area object
 represents an empty area; false otherwise.
Since:
1.2


"
4,Area,18,boolean isRectangular(),True,Tests whether this Area is rectangular in shape.,"

isRectangular
public boolean isRectangular()
Tests whether this Area is rectangular in shape.

Returns:
true if the geometry of this
 Area is rectangular in shape; false
 otherwise.
Since:
1.2


"
4,Area,19,boolean isEmpty(),True,Tests whether this Area object encloses any area.,"

isEmpty
public boolean isEmpty()
Tests whether this Area object encloses any area.

Returns:
true if this Area object
 represents an empty area; false otherwise.
Since:
1.2


"
4,Area,20,boolean isRectangular(),True,Tests whether this Area is rectangular in shape.,"

isRectangular
public boolean isRectangular()
Tests whether this Area is rectangular in shape.

Returns:
true if the geometry of this
 Area is rectangular in shape; false
 otherwise.
Since:
1.2


"
5,CubicCurve2D,1,"CubicCurve2D(double x1, double y1, double ctrlX1, double ctrlY1, double ctrlX2, double ctrlY2, double x2, double y2)",False,,NULL
5,CubicCurve2D,2,double getCtrlX1(),True,Returns the X coordinate of the first control point in double precision.,"

getCtrlX1
public abstract double getCtrlX1()
Returns the X coordinate of the first control point in double precision.

Returns:
the X coordinate of the first control point of the
         CubicCurve2D.
Since:
1.2


"
5,CubicCurve2D,3,double getCtrlY1(),True,Returns the Y coordinate of the first control point in double precision.,"

getCtrlY1
public abstract double getCtrlY1()
Returns the Y coordinate of the first control point in double precision.

Returns:
the Y coordinate of the first control point of the
         CubicCurve2D.
Since:
1.2


"
5,CubicCurve2D,4,double getCtrlX2(),True,Returns the X coordinate of the second control point in double precision.,"

getCtrlX2
public abstract double getCtrlX2()
Returns the X coordinate of the second control point
 in double precision.

Returns:
the X coordinate of the second control point of the
         CubicCurve2D.
Since:
1.2


"
5,CubicCurve2D,5,double getCtrlY2(),True,Returns the Y coordinate of the second control point in double precision.,"

getCtrlY2
public abstract double getCtrlY2()
Returns the Y coordinate of the second control point
 in double precision.

Returns:
the Y coordinate of the second control point of the
         CubicCurve2D.
Since:
1.2


"
5,CubicCurve2D,6,double getX1(),True,Returns the X coordinate of the start point in double precision.,"

getX1
public abstract double getX1()
Returns the X coordinate of the start point in double precision.

Returns:
the X coordinate of the start point of the
         CubicCurve2D.
Since:
1.2


"
5,CubicCurve2D,7,double getY1(),True,Returns the Y coordinate of the start point in double precision.,"

getY1
public abstract double getY1()
Returns the Y coordinate of the start point in double precision.

Returns:
the Y coordinate of the start point of the
         CubicCurve2D.
Since:
1.2


"
5,CubicCurve2D,8,double getX2(),True,Returns the X coordinate of the end point in double precision.,"

getX2
public abstract double getX2()
Returns the X coordinate of the end point in double precision.

Returns:
the X coordinate of the end point of the
         CubicCurve2D.
Since:
1.2


"
5,CubicCurve2D,9,double getY2(),True,Returns the Y coordinate of the end point in double precision.,"

getY2
public abstract double getY2()
Returns the Y coordinate of the end point in double precision.

Returns:
the Y coordinate of the end point of the
         CubicCurve2D.
Since:
1.2


"
5,CubicCurve2D,10,double[] getCubicPts(),False,,NULL
5,CubicCurve2D,11,double[] getPt(int index),False,,NULL
5,CubicCurve2D,12,double[] getPts(),False,,NULL
5,CubicCurve2D,13,double getPathIterator(AffineTransform at),False,,NULL
5,CubicCurve2D,14,"double getPathIterator(AffineTransform at, double flatness)",False,,NULL
5,CubicCurve2D,15,double getPathIterator(double flatness),False,,NULL
5,CubicCurve2D,16,double getPathIterator(),False,,NULL
5,CubicCurve2D,17,double getFlatness(),True,Returns the flatness of this curve.,"

getFlatness
public double getFlatness()
Returns the flatness of this curve.  The flatness is the
 maximum distance of a control point from the line connecting the
 end points.

Returns:
the flatness of this curve.
Since:
1.2


"
5,CubicCurve2D,18,double getWindingRule(),False,,NULL
5,CubicCurve2D,19,double getStartPoint(),False,,NULL
5,CubicCurve2D,20,double getEndPoint(),False,,NULL
6,CubicCurve2D.Double,1,"CubicCurve2D.Double(double x1, double y1, double ctrlX1, double ctrlY1, double ctrlX2, double ctrlY2, double x2, double y2)",False,,NULL
6,CubicCurve2D.Double,2,double getCtrlX1(),True,Returns the X coordinate of the first control point in double precision.,"

getCtrlX1
public double getCtrlX1()
Returns the X coordinate of the first control point in double precision.

Specified by:
getCtrlX1 in class CubicCurve2D
Returns:
the X coordinate of the first control point of the
         CubicCurve2D.
Since:
1.2


"
6,CubicCurve2D.Double,3,double getCtrlY1(),True,Returns the Y coordinate of the first control point in double precision.,"

getCtrlY1
public double getCtrlY1()
Returns the Y coordinate of the first control point in double precision.

Specified by:
getCtrlY1 in class CubicCurve2D
Returns:
the Y coordinate of the first control point of the
         CubicCurve2D.
Since:
1.2


"
6,CubicCurve2D.Double,4,double getCtrlX2(),True,Returns the X coordinate of the second control point in double precision.,"

getCtrlX2
public double getCtrlX2()
Returns the X coordinate of the second control point
 in double precision.

Specified by:
getCtrlX2 in class CubicCurve2D
Returns:
the X coordinate of the second control point of the
         CubicCurve2D.
Since:
1.2


"
6,CubicCurve2D.Double,5,double getCtrlY2(),True,Returns the Y coordinate of the second control point in double precision.,"

getCtrlY2
public double getCtrlY2()
Returns the Y coordinate of the second control point
 in double precision.

Specified by:
getCtrlY2 in class CubicCurve2D
Returns:
the Y coordinate of the second control point of the
         CubicCurve2D.
Since:
1.2


"
6,CubicCurve2D.Double,6,double getX1(),True,Returns the X coordinate of the start point in double precision.,"

getX1
public double getX1()
Returns the X coordinate of the start point in double precision.

Specified by:
getX1 in class CubicCurve2D
Returns:
the X coordinate of the start point of the
         CubicCurve2D.
Since:
1.2


"
6,CubicCurve2D.Double,7,double getY1(),True,Returns the Y coordinate of the start point in double precision.,"

getY1
public double getY1()
Returns the Y coordinate of the start point in double precision.

Specified by:
getY1 in class CubicCurve2D
Returns:
the Y coordinate of the start point of the
         CubicCurve2D.
Since:
1.2


"
6,CubicCurve2D.Double,8,double getX2(),True,Returns the X coordinate of the end point in double precision.,"

getX2
public double getX2()
Returns the X coordinate of the end point in double precision.

Specified by:
getX2 in class CubicCurve2D
Returns:
the X coordinate of the end point of the
         CubicCurve2D.
Since:
1.2


"
6,CubicCurve2D.Double,9,double getY2(),True,Returns the Y coordinate of the end point in double precision.,"

getY2
public double getY2()
Returns the Y coordinate of the end point in double precision.

Specified by:
getY2 in class CubicCurve2D
Returns:
the Y coordinate of the end point of the
         CubicCurve2D.
Since:
1.2


"
6,CubicCurve2D.Double,10,"void setCurve(double x1, double y1, double ctrlX1, double ctrlY1, double ctrlX2, double ctrlY2, double x2, double y2)",True,Sets the location of the end points and control points of this curve to the specified double coordinates.,"

setCurve
public void setCurve(double x1,
                     double y1,
                     double ctrlx1,
                     double ctrly1,
                     double ctrlx2,
                     double ctrly2,
                     double x2,
                     double y2)
Sets the location of the end points and control points of this curve
 to the specified double coordinates.

Specified by:
setCurve in class CubicCurve2D
Parameters:
x1 - the X coordinate used to set the start point
           of this CubicCurve2D
y1 - the Y coordinate used to set the start point
           of this CubicCurve2D
ctrlx1 - the X coordinate used to set the first control point
               of this CubicCurve2D
ctrly1 - the Y coordinate used to set the first control point
               of this CubicCurve2D
ctrlx2 - the X coordinate used to set the second control point
               of this CubicCurve2D
ctrly2 - the Y coordinate used to set the second control point
               of this CubicCurve2D
x2 - the X coordinate used to set the end point
           of this CubicCurve2D
y2 - the Y coordinate used to set the end point
           of this CubicCurve2D
Since:
1.2


"
7,CubicCurve2D.Float,1,"CubicCurve2D.Float(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4)",False,,NULL
7,CubicCurve2D.Float,2,"void setCurve(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4)",True,Sets the location of the end points and control points of this curve to the specified float coordinates.,"

setCurve
public void setCurve(float x1,
                     float y1,
                     float ctrlx1,
                     float ctrly1,
                     float ctrlx2,
                     float ctrly2,
                     float x2,
                     float y2)
Sets the location of the end points and control points
 of this curve to the specified float coordinates.

Parameters:
x1 - the X coordinate used to set the start point
           of this CubicCurve2D
y1 - the Y coordinate used to set the start point
           of this CubicCurve2D
ctrlx1 - the X coordinate used to set the first control point
               of this CubicCurve2D
ctrly1 - the Y coordinate used to set the first control point
               of this CubicCurve2D
ctrlx2 - the X coordinate used to set the second control point
               of this CubicCurve2D
ctrly2 - the Y coordinate used to set the second control point
               of this CubicCurve2D
x2 - the X coordinate used to set the end point
           of this CubicCurve2D
y2 - the Y coordinate used to set the end point
           of this CubicCurve2D
Since:
1.2


"
7,CubicCurve2D.Float,3,float getX1(),False,,NULL
7,CubicCurve2D.Float,4,float getY1(),False,,NULL
7,CubicCurve2D.Float,5,float getX2(),False,,NULL
7,CubicCurve2D.Float,6,float getY2(),False,,NULL
7,CubicCurve2D.Float,7,float getX3(),False,,NULL
7,CubicCurve2D.Float,8,float getY3(),False,,NULL
7,CubicCurve2D.Float,9,float getX4(),False,,NULL
7,CubicCurve2D.Float,10,float getY4(),False,,NULL
7,CubicCurve2D.Float,11,float[] getCubicPoints(),False,,NULL
7,CubicCurve2D.Float,12,float[] getCubicPoints(float[] pts),False,,NULL
7,CubicCurve2D.Float,13,float getCtrlValue(int which),False,,NULL
7,CubicCurve2D.Float,14,"void setCtrlValue(int which, float value)",False,,NULL
7,CubicCurve2D.Float,15,"float getCtrlValue(int which, float[] pts)",False,,NULL
7,CubicCurve2D.Float,16,"float getCtrlValue(int which, float[] pts, int offset)",False,,NULL
7,CubicCurve2D.Float,17,"float getCtrlValue(int which, float[] pts, int offset, int length)",False,,NULL
7,CubicCurve2D.Float,18,"float getCtrlValue(int which, float[] pts, int offset, int length, int stride)",False,,NULL
7,CubicCurve2D.Float,19,"float getCtrlValue(int which, float[] pts, int offset, int length, int stride, int order)",False,,NULL
7,CubicCurve2D.Float,20,"float getCtrlValue(int which, float[] pts, int offset, int length, int stride, int order, int type)",False,,NULL
8,Dimension2D,1,double getWidth(),True,Returns the width of this Dimension in double precision.,"

getWidth
public abstract double getWidth()
Returns the width of this Dimension in double
 precision.

Returns:
the width of this Dimension.
Since:
1.2


"
8,Dimension2D,2,double getHeight(),True,Returns the height of this Dimension in double precision.,"

getHeight
public abstract double getHeight()
Returns the height of this Dimension in double
 precision.

Returns:
the height of this Dimension.
Since:
1.2


"
8,Dimension2D,3,"void setSize(double width, double height)",True,Sets the size of this Dimension object to the specified width and height.,"

setSize
public abstract void setSize(double width,
                             double height)
Sets the size of this Dimension object to the
 specified width and height.
 This method is included for completeness, to parallel the
 getSize method of
 Component.

Parameters:
width - the new width for the Dimension
 object
height - the new height for the Dimension
 object
Since:
1.2


"
8,Dimension2D,4,void setSize(Dimension2D d),True,Sets the size of this Dimension2D object to match the specified size.,"

setSize
public void setSize(Dimension2D d)
Sets the size of this Dimension2D object to
 match the specified size.
 This method is included for completeness, to parallel the
 getSize method of Component.

Parameters:
d - the new size for the Dimension2D
 object
Since:
1.2


"
8,Dimension2D,5,"void setSize(double width, double height)",True,Sets the size of this Dimension object to the specified width and height.,"

setSize
public abstract void setSize(double width,
                             double height)
Sets the size of this Dimension object to the
 specified width and height.
 This method is included for completeness, to parallel the
 getSize method of
 Component.

Parameters:
width - the new width for the Dimension
 object
height - the new height for the Dimension
 object
Since:
1.2


"
9,Ellipse2D,1,"boolean contains(double x, double y)",True,"Tests if the specified coordinates are inside the boundary of the Shape, as described by the definition of insideness.","

contains
public boolean contains(double x,
                        double y)
Tests if the specified coordinates are inside the boundary of the
 Shape, as described by the
 
 definition of insideness.

Parameters:
x - the specified X coordinate to be tested
y - the specified Y coordinate to be tested
Returns:
true if the specified coordinates are inside
         the Shape boundary; false
         otherwise.
Since:
1.2


"
9,Ellipse2D,2,boolean contains(Point2D p),False,,NULL
9,Ellipse2D,3,boolean contains(Rectangle2D r),False,,NULL
9,Ellipse2D,4,boolean contains(Ellipse2D e),False,,NULL
9,Ellipse2D,5,"boolean intersects(double x, double y, double w, double h)",True,Tests if the interior of the Shape intersects the interior of a specified rectangular area.,"

intersects
public boolean intersects(double x,
                          double y,
                          double w,
                          double h)
Tests if the interior of the Shape intersects the
 interior of a specified rectangular area.
 The rectangular area is considered to intersect the Shape
 if any point is contained in both the interior of the
 Shape and the specified rectangular area.
 
 The Shape.intersects() method allows a Shape
 implementation to conservatively return true when:
 

 there is a high probability that the rectangular area and the
 Shape intersect, but
 
 the calculations to accurately determine this intersection
 are prohibitively expensive.
 
 This means that for some Shapes this method might
 return true even though the rectangular area does not
 intersect the Shape.
 The Area class performs
 more accurate computations of geometric intersection than most
 Shape objects and therefore can be used if a more precise
 answer is required.

Parameters:
x - the X coordinate of the upper-left corner
          of the specified rectangular area
y - the Y coordinate of the upper-left corner
          of the specified rectangular area
w - the width of the specified rectangular area
h - the height of the specified rectangular area
Returns:
true if the interior of the Shape and
          the interior of the rectangular area intersect, or are
          both highly likely to intersect and intersection calculations
          would be too expensive to perform; false otherwise.
Since:
1.2
See Also:
Area


"
10,Ellipse2D.Double,1,double getX(),True,Returns the X coordinate of the upper-left corner of the framing rectangle in double precision.,"

getX
public double getX()
Returns the X coordinate of the upper-left corner of
 the framing rectangle in double precision.

Specified by:
getX in class RectangularShape
Returns:
the X coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
10,Ellipse2D.Double,2,double getY(),True,Returns the Y coordinate of the upper-left corner of the framing rectangle in double precision.,"

getY
public double getY()
Returns the Y coordinate of the upper-left corner of
 the framing rectangle in double precision.

Specified by:
getY in class RectangularShape
Returns:
the Y coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
10,Ellipse2D.Double,3,double getWidth(),True,Returns the width of the framing rectangle in double precision.,"

getWidth
public double getWidth()
Returns the width of the framing rectangle in
 double precision.

Specified by:
getWidth in class RectangularShape
Returns:
the width of the framing rectangle.
Since:
1.2


"
10,Ellipse2D.Double,4,double getHeight(),True,Returns the height of the framing rectangle in double precision.,"

getHeight
public double getHeight()
Returns the height of the framing rectangle
 in double precision.

Specified by:
getHeight in class RectangularShape
Returns:
the height of the framing rectangle.
Since:
1.2


"
10,Ellipse2D.Double,5,"void setFrame(double x, double y, double w, double h)",True,Sets the location and size of the framing rectangle of this Shape to the specified rectangular values.,"

setFrame
public void setFrame(double x,
                     double y,
                     double w,
                     double h)
Sets the location and size of the framing rectangle of this
 Shape to the specified rectangular values.

Specified by:
setFrame in class RectangularShape
Parameters:
x - the X coordinate of the upper-left corner of the
          specified rectangular shape
y - the Y coordinate of the upper-left corner of the
          specified rectangular shape
w - the width of the specified rectangular shape
h - the height of the specified rectangular shape
Since:
1.2
See Also:
RectangularShape.getFrame()


"
11,Ellipse2D.Float,1,"boolean contains(double x, double y)",False,,NULL
11,Ellipse2D.Float,2,boolean contains(Point2D p),False,,NULL
11,Ellipse2D.Float,3,boolean contains(Rectangle2D r),False,,NULL
11,Ellipse2D.Float,4,"boolean contains(double x, double y, double w, double h)",False,,NULL
11,Ellipse2D.Float,5,"boolean intersects(double x, double y, double w, double h)",False,,NULL
11,Ellipse2D.Float,6,boolean intersects(Rectangle2D r),False,,NULL
11,Ellipse2D.Float,7,"boolean intersectsLine(double x1, double y1, double x2, double y2)",False,,NULL
11,Ellipse2D.Float,8,boolean intersects(Line2D l),False,,NULL
11,Ellipse2D.Float,9,Rectangle2D getBounds2D(),True,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.,"

getBounds2D
public Rectangle2D getBounds2D()
Returns a high precision and more accurate bounding box of
 the Shape than the getBounds method.
 Note that there is no guarantee that the returned
 Rectangle2D is the smallest bounding box that encloses
 the Shape, only that the Shape lies
 entirely within the indicated Rectangle2D.  The
 bounding box returned by this method is usually tighter than that
 returned by the getBounds method and never fails due
 to overflow problems since the return value can be an instance of
 the Rectangle2D that uses double precision values to
 store the dimensions.

 
 Note that the 
 definition of insideness can lead to situations where points
 on the defining outline of the shape may not be considered
 contained in the returned bounds object, but only in cases
 where those points are also not considered contained in the original
 shape.
 

 If a point is inside the shape according to the
 contains(point) method, then it must
 be inside the returned Rectangle2D bounds object according
 to the contains(point) method of the
 bounds. Specifically:
 

shape.contains(p) requires bounds.contains(p)


 If a point is not inside the shape, then it might
 still be contained in the bounds object:
 

bounds.contains(p) does not imply shape.contains(p)


Specified by:
getBounds2D in interface Shape
Returns:
an instance of Rectangle2D that is a
                 high-precision bounding box of the Shape.
Since:
1.2
See Also:
Shape.getBounds()


"
11,Ellipse2D.Float,10,boolean isEmpty(),True,Determines whether the RectangularShape is empty.,"

isEmpty
public boolean isEmpty()
Determines whether the RectangularShape is empty.
 When the RectangularShape is empty, it encloses no
 area.

Specified by:
isEmpty in class RectangularShape
Returns:
true if the RectangularShape is empty;
          false otherwise.
Since:
1.2


"
11,Ellipse2D.Float,11,"void setFrame(double x, double y, double w, double h)",True,Sets the location and size of the framing rectangle of this Shape to the specified rectangular values.,"

setFrame
public void setFrame(double x,
                     double y,
                     double w,
                     double h)
Sets the location and size of the framing rectangle of this
 Shape to the specified rectangular values.

Specified by:
setFrame in class RectangularShape
Parameters:
x - the X coordinate of the upper-left corner of the
          specified rectangular shape
y - the Y coordinate of the upper-left corner of the
          specified rectangular shape
w - the width of the specified rectangular shape
h - the height of the specified rectangular shape
Since:
1.2
See Also:
RectangularShape.getFrame()


"
11,Ellipse2D.Float,12,void setFrame(Rectangle2D r),False,,NULL
11,Ellipse2D.Float,13,"void setFrameFromCenter(double x, double y, double w, double h)",False,,NULL
11,Ellipse2D.Float,14,"void setFrameFromDiagonal(double x1, double y1, double x2, double y2)",False,,NULL
11,Ellipse2D.Float,15,"void setFrameFromCenter(Point2D p, double w, double h)",False,,NULL
11,Ellipse2D.Float,16,"void setFrameFromDiagonal(Point2D p1, Point2D p2)",False,,NULL
11,Ellipse2D.Float,17,"void setFrame(double x, double y, double w, double h)",True,Sets the location and size of the framing rectangle of this Shape to the specified rectangular values.,"

setFrame
public void setFrame(double x,
                     double y,
                     double w,
                     double h)
Sets the location and size of the framing rectangle of this
 Shape to the specified rectangular values.

Specified by:
setFrame in class RectangularShape
Parameters:
x - the X coordinate of the upper-left corner of the
          specified rectangular shape
y - the Y coordinate of the upper-left corner of the
          specified rectangular shape
w - the width of the specified rectangular shape
h - the height of the specified rectangular shape
Since:
1.2
See Also:
RectangularShape.getFrame()


"
11,Ellipse2D.Float,18,void setFrame(Rectangle2D r),False,,NULL
11,Ellipse2D.Float,19,"void setFrameFromCenter(double x, double y, double w, double h)",False,,NULL
11,Ellipse2D.Float,20,"void setFrameFromDiagonal(double x1, double y1, double x2, double y2)",False,,NULL
12,FlatteningPathIterator,1,boolean hasNext(),False,,NULL
12,FlatteningPathIterator,2,void next(),True,Moves the iterator to the next segment of the path forwards along the primary direction of traversal as long as there are more points in that direction.,"

next
public void next()
Moves the iterator to the next segment of the path forwards
 along the primary direction of traversal as long as there are
 more points in that direction.

Specified by:
next in interface PathIterator


"
12,FlatteningPathIterator,3,int currentSegment(float[] coords),True,Returns the coordinates and type of the current path segment in the iteration.,"

currentSegment
public int currentSegment(float[] coords)
Returns the coordinates and type of the current path segment in
 the iteration.
 The return value is the path segment type:
 SEG_MOVETO, SEG_LINETO, or SEG_CLOSE.
 A float array of length 6 must be passed in and can be used to
 store the coordinates of the point(s).
 Each point is stored as a pair of float x,y coordinates.
 SEG_MOVETO and SEG_LINETO types return one point,
 and SEG_CLOSE does not return any points.

Specified by:
currentSegment in interface PathIterator
Parameters:
coords - an array that holds the data returned from
 this method
Returns:
the path segment type of the current path segment.
Throws:
NoSuchElementException - if there
          are no more elements in the flattening path to be
          returned.
See Also:
PathIterator.SEG_MOVETO, 
PathIterator.SEG_LINETO, 
PathIterator.SEG_CLOSE


"
12,FlatteningPathIterator,4,int currentSegment(float[] coords),True,Returns the coordinates and type of the current path segment in the iteration.,"

currentSegment
public int currentSegment(float[] coords)
Returns the coordinates and type of the current path segment in
 the iteration.
 The return value is the path segment type:
 SEG_MOVETO, SEG_LINETO, or SEG_CLOSE.
 A float array of length 6 must be passed in and can be used to
 store the coordinates of the point(s).
 Each point is stored as a pair of float x,y coordinates.
 SEG_MOVETO and SEG_LINETO types return one point,
 and SEG_CLOSE does not return any points.

Specified by:
currentSegment in interface PathIterator
Parameters:
coords - an array that holds the data returned from
 this method
Returns:
the path segment type of the current path segment.
Throws:
NoSuchElementException - if there
          are no more elements in the flattening path to be
          returned.
See Also:
PathIterator.SEG_MOVETO, 
PathIterator.SEG_LINETO, 
PathIterator.SEG_CLOSE


"
12,FlatteningPathIterator,5,int getWindingRule(),True,Returns the winding rule for determining the interior of the path.,"

getWindingRule
public int getWindingRule()
Returns the winding rule for determining the interior of the
 path.

Specified by:
getWindingRule in interface PathIterator
Returns:
the winding rule of the original unflattened path being
 iterated over.
See Also:
PathIterator.WIND_EVEN_ODD, 
PathIterator.WIND_NON_ZERO


"
13,GeneralPath,1,GeneralPath(),False,,NULL
13,GeneralPath,2,GeneralPath(GeneralPath p),False,,NULL
13,GeneralPath,3,boolean isEmpty(),False,,NULL
13,GeneralPath,4,int getWindingRule(),False,,NULL
13,GeneralPath,5,void setWindingRule(int windingRule),False,,NULL
13,GeneralPath,6,void reset(),False,,NULL
13,GeneralPath,7,"void append(PathIterator pi, boolean isWindingEven)",False,,NULL
13,GeneralPath,8,"void append(GeneralPath gp, boolean isWindingEven)",False,,NULL
13,GeneralPath,9,"void lineTo(double x, double y)",False,,NULL
13,GeneralPath,10,"void curveTo(double x1, double y1, double x2, double y2, double x3, double y3)",False,,NULL
13,GeneralPath,11,"void quadTo(double x1, double y1, double x2, double y2)",False,,NULL
13,GeneralPath,12,void closePath(),False,,NULL
13,GeneralPath,13,PathIterator getPathIterator(AffineTransform at),False,,NULL
13,GeneralPath,14,Rectangle2D getBounds2D(),False,,NULL
13,GeneralPath,15,"boolean contains(double x, double y)",False,,NULL
13,GeneralPath,16,"boolean intersects(double x, double y, double w, double h)",False,,NULL
13,GeneralPath,17,boolean intersects(Rectangle2D r),False,,NULL
13,GeneralPath,18,boolean intersects(GeneralPath gp),False,,NULL
13,GeneralPath,19,boolean contains(Point2D p),False,,NULL
13,GeneralPath,20,boolean contains(GeneralPath gp),False,,NULL
14,Line2D,1,"Line2D(double x1, double y1, double x2, double y2)",False,,NULL
14,Line2D,2,double getX1(),True,Returns the X coordinate of the start point in double precision.,"

getX1
public abstract double getX1()
Returns the X coordinate of the start point in double precision.

Returns:
the X coordinate of the start point of this
         Line2D object.
Since:
1.2


"
14,Line2D,3,double getY1(),True,Returns the Y coordinate of the start point in double precision.,"

getY1
public abstract double getY1()
Returns the Y coordinate of the start point in double precision.

Returns:
the Y coordinate of the start point of this
         Line2D object.
Since:
1.2


"
14,Line2D,4,double getX2(),True,Returns the X coordinate of the end point in double precision.,"

getX2
public abstract double getX2()
Returns the X coordinate of the end point in double precision.

Returns:
the X coordinate of the end point of this
         Line2D object.
Since:
1.2


"
14,Line2D,5,double getY2(),True,Returns the Y coordinate of the end point in double precision.,"

getY2
public abstract double getY2()
Returns the Y coordinate of the end point in double precision.

Returns:
the Y coordinate of the end point of this
         Line2D object.
Since:
1.2


"
14,Line2D,6,double getP1(),False,,NULL
14,Line2D,7,double getP2(),False,,NULL
14,Line2D,8,double getSlope(),False,,NULL
14,Line2D,9,"double getSlope(double x1, double y1, double x2, double y2)",False,,NULL
14,Line2D,10,"double getSlope(Point2D p1, Point2D p2)",False,,NULL
14,Line2D,11,"double getSlope(double x1, double y1, double x2, double y2, double x3, double y3)",False,,NULL
14,Line2D,12,"double getSlope(Point2D p1, Point2D p2, Point2D p3)",False,,NULL
14,Line2D,13,double getP1(),False,,NULL
14,Line2D,14,double getP2(),False,,NULL
14,Line2D,15,double getP1(),False,,NULL
14,Line2D,16,double getP2(),False,,NULL
14,Line2D,17,double getP1(),False,,NULL
14,Line2D,18,double getP2(),False,,NULL
14,Line2D,19,double getP1(),False,,NULL
14,Line2D,20,double getP2(),False,,NULL
15,Line2D.Double,1,"Line2D.Double(double x1, double y1, double x2, double y2)",False,,NULL
15,Line2D.Double,2,double getX1(),True,Returns the X coordinate of the start point in double precision.,"

getX1
public double getX1()
Returns the X coordinate of the start point in double precision.

Specified by:
getX1 in class Line2D
Returns:
the X coordinate of the start point of this
         Line2D object.
Since:
1.2


"
15,Line2D.Double,3,double getY1(),True,Returns the Y coordinate of the start point in double precision.,"

getY1
public double getY1()
Returns the Y coordinate of the start point in double precision.

Specified by:
getY1 in class Line2D
Returns:
the Y coordinate of the start point of this
         Line2D object.
Since:
1.2


"
15,Line2D.Double,4,double getX2(),True,Returns the X coordinate of the end point in double precision.,"

getX2
public double getX2()
Returns the X coordinate of the end point in double precision.

Specified by:
getX2 in class Line2D
Returns:
the X coordinate of the end point of this
         Line2D object.
Since:
1.2


"
15,Line2D.Double,5,double getY2(),True,Returns the Y coordinate of the end point in double precision.,"

getY2
public double getY2()
Returns the Y coordinate of the end point in double precision.

Specified by:
getY2 in class Line2D
Returns:
the Y coordinate of the end point of this
         Line2D object.
Since:
1.2


"
15,Line2D.Double,6,double getP1(),False,,NULL
15,Line2D.Double,7,double getP2(),False,,NULL
15,Line2D.Double,8,double getSlope(),False,,NULL
15,Line2D.Double,9,"double getSlope(double x1, double y1, double x2, double y2)",False,,NULL
15,Line2D.Double,10,double getLength(),False,,NULL
16,Line2D.Float,1,"boolean contains(double x, double y)",False,,NULL
16,Line2D.Float,2,boolean contains(Point2D p),False,,NULL
16,Line2D.Float,3,double getX1(),True,Returns the X coordinate of the start point in double precision.,"

getX1
public double getX1()
Returns the X coordinate of the start point in double precision.

Specified by:
getX1 in class Line2D
Returns:
the X coordinate of the start point of this
         Line2D object.
Since:
1.2


"
16,Line2D.Float,4,double getY1(),True,Returns the Y coordinate of the start point in double precision.,"

getY1
public double getY1()
Returns the Y coordinate of the start point in double precision.

Specified by:
getY1 in class Line2D
Returns:
the Y coordinate of the start point of this
         Line2D object.
Since:
1.2


"
16,Line2D.Float,5,double getX2(),True,Returns the X coordinate of the end point in double precision.,"

getX2
public double getX2()
Returns the X coordinate of the end point in double precision.

Specified by:
getX2 in class Line2D
Returns:
the X coordinate of the end point of this
         Line2D object.
Since:
1.2


"
16,Line2D.Float,6,double getY2(),True,Returns the Y coordinate of the end point in double precision.,"

getY2
public double getY2()
Returns the Y coordinate of the end point in double precision.

Specified by:
getY2 in class Line2D
Returns:
the Y coordinate of the end point of this
         Line2D object.
Since:
1.2


"
16,Line2D.Float,7,double getP1(),False,,NULL
16,Line2D.Float,8,double getP2(),False,,NULL
16,Line2D.Float,9,double getSlope(),False,,NULL
16,Line2D.Float,10,"double getSlope(Point2D p1, Point2D p2)",False,,NULL
16,Line2D.Float,11,"double getSlope(double x1, double y1, double x2, double y2)",False,,NULL
16,Line2D.Float,12,double getLength(),False,,NULL
16,Line2D.Float,13,double getP1(),False,,NULL
16,Line2D.Float,14,double getP2(),False,,NULL
16,Line2D.Float,15,double getP1(),False,,NULL
16,Line2D.Float,16,double getP2(),False,,NULL
16,Line2D.Float,17,double getP1(),False,,NULL
16,Line2D.Float,18,double getP2(),False,,NULL
16,Line2D.Float,19,double getP1(),False,,NULL
16,Line2D.Float,20,double getP2(),False,,NULL
17,Path2D,1,Path2D(),False,,NULL
17,Path2D,2,Path2D(int windingRule),False,,NULL
17,Path2D,3,"void append(Path2D src, boolean connect)",False,,NULL
17,Path2D,4,void closePath(),True,Closes the current subpath by drawing a straight line back to the coordinates of the last moveTo.,"

closePath
public final void closePath()
Closes the current subpath by drawing a straight line back to
 the coordinates of the last moveTo.  If the path is already
 closed then this method has no effect.

Since:
1.6


"
17,Path2D,5,"boolean contains(double x, double y)",True,"Tests if the specified coordinates are inside the boundary of the Shape, as described by the definition of insideness.","

contains
public final boolean contains(double x,
                              double y)
Tests if the specified coordinates are inside the boundary of the
 Shape, as described by the
 
 definition of insideness.

Specified by:
contains in interface Shape
Parameters:
x - the specified X coordinate to be tested
y - the specified Y coordinate to be tested
Returns:
true if the specified coordinates are inside
         the Shape boundary; false
         otherwise.
Since:
1.6


"
17,Path2D,6,boolean contains(Point2D p),True,"Tests if a specified Point2D is inside the boundary of the Shape, as described by the definition of insideness.","

contains
public final boolean contains(Point2D p)
Tests if a specified Point2D is inside the boundary
 of the Shape, as described by the
 
 definition of insideness.

Specified by:
contains in interface Shape
Parameters:
p - the specified Point2D to be tested
Returns:
true if the specified Point2D is
          inside the boundary of the Shape;
          false otherwise.
Since:
1.6


"
17,Path2D,7,boolean contains(Rectangle2D r),True,Tests if the interior of the Shape entirely contains the specified Rectangle2D.,"

contains
public final boolean contains(Rectangle2D r)
Tests if the interior of the Shape entirely contains the
 specified Rectangle2D.
 The Shape.contains() method allows a Shape
 implementation to conservatively return false when:
 

 the intersect method returns true and
 
 the calculations to determine whether or not the
 Shape entirely contains the Rectangle2D
 are prohibitively expensive.
 
 This means that for some Shapes this method might
 return false even though the Shape contains
 the Rectangle2D.
 The Area class performs
 more accurate geometric computations than most
 Shape objects and therefore can be used if a more precise
 answer is required.
 
 This method object may conservatively return false in
 cases where the specified rectangular area intersects a
 segment of the path, but that segment does not represent a
 boundary between the interior and exterior of the path.
 Such segments could lie entirely within the interior of the
 path if they are part of a path with a WIND_NON_ZERO
 winding rule or if the segments are retraced in the reverse
 direction such that the two sets of segments cancel each
 other out without any exterior area falling between them.
 To determine whether segments represent true boundaries of
 the interior of the path would require extensive calculations
 involving all of the segments of the path and the winding
 rule and are thus beyond the scope of this implementation.

Specified by:
contains in interface Shape
Parameters:
r - The specified Rectangle2D
Returns:
true if the interior of the Shape
          entirely contains the Rectangle2D;
          false otherwise or, if the Shape
          contains the Rectangle2D and the
          intersects method returns true
          and the containment calculations would be too expensive to
          perform.
Since:
1.6
See Also:
Shape.contains(double, double, double, double)


"
17,Path2D,8,"boolean contains(double x, double y, double w, double h)",True,Tests if the interior of the Shape entirely contains the specified rectangular area.,"

contains
public final boolean contains(double x,
                              double y,
                              double w,
                              double h)
Tests if the interior of the Shape entirely contains
 the specified rectangular area.  All coordinates that lie inside
 the rectangular area must lie within the Shape for the
 entire rectangular area to be considered contained within the
 Shape.
 
 The Shape.contains() method allows a Shape
 implementation to conservatively return false when:
 

 the intersect method returns true and
 
 the calculations to determine whether or not the
 Shape entirely contains the rectangular area are
 prohibitively expensive.
 
 This means that for some Shapes this method might
 return false even though the Shape contains
 the rectangular area.
 The Area class performs
 more accurate geometric computations than most
 Shape objects and therefore can be used if a more precise
 answer is required.
 
 This method object may conservatively return false in
 cases where the specified rectangular area intersects a
 segment of the path, but that segment does not represent a
 boundary between the interior and exterior of the path.
 Such segments could lie entirely within the interior of the
 path if they are part of a path with a WIND_NON_ZERO
 winding rule or if the segments are retraced in the reverse
 direction such that the two sets of segments cancel each
 other out without any exterior area falling between them.
 To determine whether segments represent true boundaries of
 the interior of the path would require extensive calculations
 involving all of the segments of the path and the winding
 rule and are thus beyond the scope of this implementation.

Specified by:
contains in interface Shape
Parameters:
x - the X coordinate of the upper-left corner
          of the specified rectangular area
y - the Y coordinate of the upper-left corner
          of the specified rectangular area
w - the width of the specified rectangular area
h - the height of the specified rectangular area
Returns:
true if the interior of the Shape
          entirely contains the specified rectangular area;
          false otherwise or, if the Shape
          contains the rectangular area and the
          intersects method returns true
          and the containment calculations would be too expensive to
          perform.
Since:
1.6
See Also:
Area, 
Shape.intersects(double, double, double, double)


"
17,Path2D,9,boolean contains(Path2D p),False,,NULL
17,Path2D,10,boolean intersects(Rectangle2D r),True,Tests if the interior of the Shape intersects the interior of a specified Rectangle2D.,"

intersects
public final boolean intersects(Rectangle2D r)
Tests if the interior of the Shape intersects the
 interior of a specified Rectangle2D.
 The Shape.intersects() method allows a Shape
 implementation to conservatively return true when:
 

 there is a high probability that the Rectangle2D and the
 Shape intersect, but
 
 the calculations to accurately determine this intersection
 are prohibitively expensive.
 
 This means that for some Shapes this method might
 return true even though the Rectangle2D does not
 intersect the Shape.
 The Area class performs
 more accurate computations of geometric intersection than most
 Shape objects and therefore can be used if a more precise
 answer is required.
 
 This method object may conservatively return true in
 cases where the specified rectangular area intersects a
 segment of the path, but that segment does not represent a
 boundary between the interior and exterior of the path.
 Such a case may occur if some set of segments of the
 path are retraced in the reverse direction such that the
 two sets of segments cancel each other out without any
 interior area between them.
 To determine whether segments represent true boundaries of
 the interior of the path would require extensive calculations
 involving all of the segments of the path and the winding
 rule and are thus beyond the scope of this implementation.

Specified by:
intersects in interface Shape
Parameters:
r - the specified Rectangle2D
Returns:
true if the interior of the Shape and
          the interior of the specified Rectangle2D
          intersect, or are both highly likely to intersect and intersection
          calculations would be too expensive to perform; false
          otherwise.
Since:
1.6
See Also:
Shape.intersects(double, double, double, double)


"
17,Path2D,11,"boolean intersects(double x, double y, double w, double h)",True,Tests if the interior of the Shape intersects the interior of a specified rectangular area.,"

intersects
public final boolean intersects(double x,
                                double y,
                                double w,
                                double h)
Tests if the interior of the Shape intersects the
 interior of a specified rectangular area.
 The rectangular area is considered to intersect the Shape
 if any point is contained in both the interior of the
 Shape and the specified rectangular area.
 
 The Shape.intersects() method allows a Shape
 implementation to conservatively return true when:
 

 there is a high probability that the rectangular area and the
 Shape intersect, but
 
 the calculations to accurately determine this intersection
 are prohibitively expensive.
 
 This means that for some Shapes this method might
 return true even though the rectangular area does not
 intersect the Shape.
 The Area class performs
 more accurate computations of geometric intersection than most
 Shape objects and therefore can be used if a more precise
 answer is required.
 
 This method object may conservatively return true in
 cases where the specified rectangular area intersects a
 segment of the path, but that segment does not represent a
 boundary between the interior and exterior of the path.
 Such a case may occur if some set of segments of the
 path are retraced in the reverse direction such that the
 two sets of segments cancel each other out without any
 interior area between them.
 To determine whether segments represent true boundaries of
 the interior of the path would require extensive calculations
 involving all of the segments of the path and the winding
 rule and are thus beyond the scope of this implementation.

Specified by:
intersects in interface Shape
Parameters:
x - the X coordinate of the upper-left corner
          of the specified rectangular area
y - the Y coordinate of the upper-left corner
          of the specified rectangular area
w - the width of the specified rectangular area
h - the height of the specified rectangular area
Returns:
true if the interior of the Shape and
          the interior of the rectangular area intersect, or are
          both highly likely to intersect and intersection calculations
          would be too expensive to perform; false otherwise.
Since:
1.6
See Also:
Area


"
17,Path2D,12,boolean intersects(Path2D p),False,,NULL
17,Path2D,13,"boolean intersectsLine(double x1, double y1, double x2, double y2)",False,,NULL
17,Path2D,14,boolean isEmpty(),False,,NULL
17,Path2D,15,void reset(),True,Resets the path to empty.,"

reset
public final void reset()
Resets the path to empty.  The append position is set back to the
 beginning of the path and all coordinates and point types are
 forgotten.

Since:
1.6


"
17,Path2D,16,void setWindingRule(int windingRule),True,Sets the winding rule for this path to the specified value.,"

setWindingRule
public final void setWindingRule(int rule)
Sets the winding rule for this path to the specified value.

Parameters:
rule - an integer representing the specified
             winding rule
Throws:
IllegalArgumentException - if
          rule is not either
          WIND_EVEN_ODD or
          WIND_NON_ZERO
Since:
1.6
See Also:
getWindingRule()


"
17,Path2D,17,void transform(AffineTransform at),True,Transforms the geometry of this path using the specified AffineTransform.,"

transform
public abstract void transform(AffineTransform at)
Transforms the geometry of this path using the specified
 AffineTransform.
 The geometry is transformed in place, which permanently changes the
 boundary defined by this object.

Parameters:
at - the AffineTransform used to transform the area
Since:
1.6


"
17,Path2D,18,"void append(PathIterator pi, boolean connect)",True,"Appends the geometry of the specified PathIterator object to the path, possibly connecting the new geometry to the existing path segments with a line segment.","

append
public abstract void append(PathIterator pi,
                            boolean connect)
Appends the geometry of the specified
 PathIterator object
 to the path, possibly connecting the new geometry to the existing
 path segments with a line segment.
 If the connect parameter is true and the
 path is not empty then any initial moveTo in the
 geometry of the appended Shape is turned into a
 lineTo segment.
 If the destination coordinates of such a connecting lineTo
 segment match the ending coordinates of a currently open
 subpath then the segment is omitted as superfluous.
 The winding rule of the specified Shape is ignored
 and the appended geometry is governed by the winding
 rule specified for this path.

Parameters:
pi - the PathIterator whose geometry is appended to
           this path
connect - a boolean to control whether or not to turn an initial
                moveTo segment into a lineTo segment
                to connect the new geometry to the existing path
Since:
1.6


"
17,Path2D,19,PathIterator getPathIterator(AffineTransform at),False,,NULL
17,Path2D,20,"PathIterator getPathIterator(AffineTransform at, double flatness)",True,Returns an iterator object that iterates along the Shape boundary and provides access to a flattened view of the Shape outline geometry.,"

getPathIterator
public final PathIterator getPathIterator(AffineTransform at,
                                          double flatness)
Returns an iterator object that iterates along the Shape
 boundary and provides access to a flattened view of the
 Shape outline geometry.
 
 Only SEG_MOVETO, SEG_LINETO, and SEG_CLOSE point types are
 returned by the iterator.
 
 If an optional AffineTransform is specified,
 the coordinates returned in the iteration are transformed
 accordingly.
 
 The amount of subdivision of the curved segments is controlled
 by the flatness parameter, which specifies the
 maximum distance that any point on the unflattened transformed
 curve can deviate from the returned flattened path segments.
 Note that a limit on the accuracy of the flattened path might be
 silently imposed, causing very small flattening parameters to be
 treated as larger values.  This limit, if there is one, is
 defined by the particular implementation that is used.
 
 Each call to this method returns a fresh PathIterator
 object that traverses the Shape object geometry
 independently from any other PathIterator objects in use at
 the same time.
 
 It is recommended, but not guaranteed, that objects
 implementing the Shape interface isolate iterations
 that are in process from any changes that might occur to the original
 object's geometry during such iterations.
 
 The iterator for this class is not multi-threaded safe,
 which means that this Path2D class does not
 guarantee that modifications to the geometry of this
 Path2D object do not affect any iterations of
 that geometry that are already in process.

Specified by:
getPathIterator in interface Shape
Parameters:
at - an optional AffineTransform to be applied to the
          coordinates as they are returned in the iteration, or
          null if untransformed coordinates are desired
flatness - the maximum distance that the line segments used to
          approximate the curved segments are allowed to deviate
          from any point on the original curve
Returns:
a new PathIterator that independently traverses
         a flattened view of the geometry of the  Shape.
Since:
1.6


"
18,Path2D.Double,1,boolean add(E e),False,,NULL
18,Path2D.Double,2,boolean contains(Object o),False,,NULL
18,Path2D.Double,3,boolean remove(Object o),False,,NULL
18,Path2D.Double,4,boolean isEmpty(),False,,NULL
18,Path2D.Double,5,int size(),False,,NULL
19,Path2D.Float,1,boolean add(E e),False,,NULL
19,Path2D.Float,2,boolean contains(Object o),False,,NULL
19,Path2D.Float,3,boolean remove(Object o),False,,NULL
19,Path2D.Float,4,boolean isEmpty(),False,,NULL
19,Path2D.Float,5,int size(),False,,NULL
20,Point2D,1,double getX(),True,Returns the X coordinate of this Point2D in double precision.,"

getX
public abstract double getX()
Returns the X coordinate of this Point2D in
 double precision.

Returns:
the X coordinate of this Point2D.
Since:
1.2


"
20,Point2D,2,double getY(),True,Returns the Y coordinate of this Point2D in double precision.,"

getY
public abstract double getY()
Returns the Y coordinate of this Point2D in
 double precision.

Returns:
the Y coordinate of this Point2D.
Since:
1.2


"
20,Point2D,3,"void setLocation(double x, double y)",True,Sets the location of this Point2D to the specified double coordinates.,"

setLocation
public abstract void setLocation(double x,
                                 double y)
Sets the location of this Point2D to the
 specified double coordinates.

Parameters:
x - the new X coordinate of this Point2D
y - the new Y coordinate of this Point2D
Since:
1.2


"
20,Point2D,4,void setLocation(Point2D p),True,Sets the location of this Point2D to the same coordinates as the specified Point2D object.,"

setLocation
public void setLocation(Point2D p)
Sets the location of this Point2D to the same
 coordinates as the specified Point2D object.

Parameters:
p - the specified Point2D to which to set
 this Point2D
Since:
1.2


"
20,Point2D,5,"double distance(double x1, double y1, double x2, double y2)",True,Returns the distance between two points.,"

distance
public static double distance(double x1,
                              double y1,
                              double x2,
                              double y2)
Returns the distance between two points.

Parameters:
x1 - the X coordinate of the first specified point
y1 - the Y coordinate of the first specified point
x2 - the X coordinate of the second specified point
y2 - the Y coordinate of the second specified point
Returns:
the distance between the two sets of specified
 coordinates.
Since:
1.2


"
21,Point2D.Double,1,double getX(),True,Returns the X coordinate of this Point2D in double precision.,"

getX
public double getX()
Returns the X coordinate of this Point2D in
 double precision.

Specified by:
getX in class Point2D
Returns:
the X coordinate of this Point2D.
Since:
1.2


"
21,Point2D.Double,2,double getY(),True,Returns the Y coordinate of this Point2D in double precision.,"

getY
public double getY()
Returns the Y coordinate of this Point2D in
 double precision.

Specified by:
getY in class Point2D
Returns:
the Y coordinate of this Point2D.
Since:
1.2


"
21,Point2D.Double,3,"void setLocation(double x, double y)",True,Sets the location of this Point2D to the specified double coordinates.,"

setLocation
public void setLocation(double x,
                        double y)
Sets the location of this Point2D to the
 specified double coordinates.

Specified by:
setLocation in class Point2D
Parameters:
x - the new X coordinate of this Point2D
y - the new Y coordinate of this Point2D
Since:
1.2


"
21,Point2D.Double,4,void setLocation(Point2D p),False,,NULL
21,Point2D.Double,5,"double distance(double x, double y)",False,,NULL
22,Point2D.Float,1,float getX(),False,,NULL
22,Point2D.Float,2,float getY(),False,,NULL
22,Point2D.Float,3,"void setLocation(float x, float y)",True,Sets the location of this Point2D to the specified float coordinates.,"

setLocation
public void setLocation(float x,
                        float y)
Sets the location of this Point2D to the
 specified float coordinates.

Parameters:
x - the new X coordinate of this Point2D
y - the new Y coordinate of this Point2D
Since:
1.2


"
22,Point2D.Float,4,void setLocation(Point2D p),False,,NULL
22,Point2D.Float,5,"void translate(double tx, double ty)",False,,NULL
23,QuadCurve2D,1,"QuadCurve2D(double x1, double y1, double ctrlX, double ctrlY, double x2, double y2)",False,,NULL
23,QuadCurve2D,2,double getCtrlX(),True,Returns the X coordinate of the control point in double precision.,"

getCtrlX
public abstract double getCtrlX()
Returns the X coordinate of the control point in
 double precision.

Returns:
X coordinate the control point
Since:
1.2


"
23,QuadCurve2D,3,double getCtrlY(),True,Returns the Y coordinate of the control point in double precision.,"

getCtrlY
public abstract double getCtrlY()
Returns the Y coordinate of the control point in
 double precision.

Returns:
the Y coordinate of the control point.
Since:
1.2


"
23,QuadCurve2D,4,double getX1(),True,Returns the X coordinate of the start point in double in precision.,"

getX1
public abstract double getX1()
Returns the X coordinate of the start point in
 double in precision.

Returns:
the X coordinate of the start point.
Since:
1.2


"
23,QuadCurve2D,5,double getY1(),True,Returns the Y coordinate of the start point in double precision.,"

getY1
public abstract double getY1()
Returns the Y coordinate of the start point in
 double precision.

Returns:
the Y coordinate of the start point.
Since:
1.2


"
23,QuadCurve2D,6,double getX2(),True,Returns the X coordinate of the end point in double precision.,"

getX2
public abstract double getX2()
Returns the X coordinate of the end point in
 double precision.

Returns:
the x coordinate of the end point.
Since:
1.2


"
23,QuadCurve2D,7,double getY2(),True,Returns the Y coordinate of the end point in double precision.,"

getY2
public abstract double getY2()
Returns the Y coordinate of the end point in
 double precision.

Returns:
the Y coordinate of the end point.
Since:
1.2


"
23,QuadCurve2D,8,double getWidth(),False,,NULL
23,QuadCurve2D,9,double getHeight(),False,,NULL
23,QuadCurve2D,10,double getBounds2D(),False,,NULL
23,QuadCurve2D,11,"double getPathIterator(AffineTransform at, double flatness)",False,,NULL
23,QuadCurve2D,12,"boolean intersectsLine(double x1, double y1, double x2, double y2)",False,,NULL
23,QuadCurve2D,13,"boolean contains(double x, double y)",True,"Tests if the specified coordinates are inside the boundary of the Shape, as described by the definition of insideness.","

contains
public boolean contains(double x,
                        double y)
Tests if the specified coordinates are inside the boundary of the
 Shape, as described by the
 
 definition of insideness.

Specified by:
contains in interface Shape
Parameters:
x - the specified X coordinate to be tested
y - the specified Y coordinate to be tested
Returns:
true if the specified coordinates are inside
         the Shape boundary; false
         otherwise.
Since:
1.2


"
23,QuadCurve2D,14,boolean contains(Point2D p),True,"Tests if a specified Point2D is inside the boundary of the Shape, as described by the definition of insideness.","

contains
public boolean contains(Point2D p)
Tests if a specified Point2D is inside the boundary
 of the Shape, as described by the
 
 definition of insideness.

Specified by:
contains in interface Shape
Parameters:
p - the specified Point2D to be tested
Returns:
true if the specified Point2D is
          inside the boundary of the Shape;
          false otherwise.
Since:
1.2


"
23,QuadCurve2D,15,boolean contains(Rectangle2D r),True,Tests if the interior of the Shape entirely contains the specified Rectangle2D.,"

contains
public boolean contains(Rectangle2D r)
Tests if the interior of the Shape entirely contains the
 specified Rectangle2D.
 The Shape.contains() method allows a Shape
 implementation to conservatively return false when:
 

 the intersect method returns true and
 
 the calculations to determine whether or not the
 Shape entirely contains the Rectangle2D
 are prohibitively expensive.
 
 This means that for some Shapes this method might
 return false even though the Shape contains
 the Rectangle2D.
 The Area class performs
 more accurate geometric computations than most
 Shape objects and therefore can be used if a more precise
 answer is required.

Specified by:
contains in interface Shape
Parameters:
r - The specified Rectangle2D
Returns:
true if the interior of the Shape
          entirely contains the Rectangle2D;
          false otherwise or, if the Shape
          contains the Rectangle2D and the
          intersects method returns true
          and the containment calculations would be too expensive to
          perform.
Since:
1.2
See Also:
Shape.contains(double, double, double, double)


"
23,QuadCurve2D,16,boolean contains(QuadCurve2D q),False,,NULL
23,QuadCurve2D,17,boolean contains(GeneralPath gp),False,,NULL
23,QuadCurve2D,18,boolean contains(AffineTransform at),False,,NULL
23,QuadCurve2D,19,"boolean contains(double x, double y, double w, double h)",True,Tests if the interior of the Shape entirely contains the specified rectangular area.,"

contains
public boolean contains(double x,
                        double y,
                        double w,
                        double h)
Tests if the interior of the Shape entirely contains
 the specified rectangular area.  All coordinates that lie inside
 the rectangular area must lie within the Shape for the
 entire rectangular area to be considered contained within the
 Shape.
 
 The Shape.contains() method allows a Shape
 implementation to conservatively return false when:
 

 the intersect method returns true and
 
 the calculations to determine whether or not the
 Shape entirely contains the rectangular area are
 prohibitively expensive.
 
 This means that for some Shapes this method might
 return false even though the Shape contains
 the rectangular area.
 The Area class performs
 more accurate geometric computations than most
 Shape objects and therefore can be used if a more precise
 answer is required.

Specified by:
contains in interface Shape
Parameters:
x - the X coordinate of the upper-left corner
          of the specified rectangular area
y - the Y coordinate of the upper-left corner
          of the specified rectangular area
w - the width of the specified rectangular area
h - the height of the specified rectangular area
Returns:
true if the interior of the Shape
          entirely contains the specified rectangular area;
          false otherwise or, if the Shape
          contains the rectangular area and the
          intersects method returns true
          and the containment calculations would be too expensive to
          perform.
Since:
1.2
See Also:
Area, 
Shape.intersects(double, double, double, double)


"
23,QuadCurve2D,20,"boolean intersects(double x, double y, double w, double h)",True,Tests if the interior of the Shape intersects the interior of a specified rectangular area.,"

intersects
public boolean intersects(double x,
                          double y,
                          double w,
                          double h)
Tests if the interior of the Shape intersects the
 interior of a specified rectangular area.
 The rectangular area is considered to intersect the Shape
 if any point is contained in both the interior of the
 Shape and the specified rectangular area.
 
 The Shape.intersects() method allows a Shape
 implementation to conservatively return true when:
 

 there is a high probability that the rectangular area and the
 Shape intersect, but
 
 the calculations to accurately determine this intersection
 are prohibitively expensive.
 
 This means that for some Shapes this method might
 return true even though the rectangular area does not
 intersect the Shape.
 The Area class performs
 more accurate computations of geometric intersection than most
 Shape objects and therefore can be used if a more precise
 answer is required.

Specified by:
intersects in interface Shape
Parameters:
x - the X coordinate of the upper-left corner
          of the specified rectangular area
y - the Y coordinate of the upper-left corner
          of the specified rectangular area
w - the width of the specified rectangular area
h - the height of the specified rectangular area
Returns:
true if the interior of the Shape and
          the interior of the rectangular area intersect, or are
          both highly likely to intersect and intersection calculations
          would be too expensive to perform; false otherwise.
Since:
1.2
See Also:
Area


"
24,QuadCurve2D.Double,1,"QuadCurve2D.Double(double x1, double y1, double ctrlX, double ctrlY, double x2, double y2)",False,,NULL
24,QuadCurve2D.Double,2,double getCtrlX(),True,Returns the X coordinate of the control point in double precision.,"

getCtrlX
public double getCtrlX()
Returns the X coordinate of the control point in
 double precision.

Specified by:
getCtrlX in class QuadCurve2D
Returns:
X coordinate the control point
Since:
1.2


"
24,QuadCurve2D.Double,3,double getCtrlY(),True,Returns the Y coordinate of the control point in double precision.,"

getCtrlY
public double getCtrlY()
Returns the Y coordinate of the control point in
 double precision.

Specified by:
getCtrlY in class QuadCurve2D
Returns:
the Y coordinate of the control point.
Since:
1.2


"
24,QuadCurve2D.Double,4,double getX1(),True,Returns the X coordinate of the start point in double in precision.,"

getX1
public double getX1()
Returns the X coordinate of the start point in
 double in precision.

Specified by:
getX1 in class QuadCurve2D
Returns:
the X coordinate of the start point.
Since:
1.2


"
24,QuadCurve2D.Double,5,double getY1(),True,Returns the Y coordinate of the start point in double precision.,"

getY1
public double getY1()
Returns the Y coordinate of the start point in
 double precision.

Specified by:
getY1 in class QuadCurve2D
Returns:
the Y coordinate of the start point.
Since:
1.2


"
24,QuadCurve2D.Double,6,double getX2(),True,Returns the X coordinate of the end point in double precision.,"

getX2
public double getX2()
Returns the X coordinate of the end point in
 double precision.

Specified by:
getX2 in class QuadCurve2D
Returns:
the x coordinate of the end point.
Since:
1.2


"
24,QuadCurve2D.Double,7,double getY2(),True,Returns the Y coordinate of the end point in double precision.,"

getY2
public double getY2()
Returns the Y coordinate of the end point in
 double precision.

Specified by:
getY2 in class QuadCurve2D
Returns:
the Y coordinate of the end point.
Since:
1.2


"
24,QuadCurve2D.Double,8,"void setCurve(double x1, double y1, double ctrlX, double ctrlY, double x2, double y2)",True,Sets the location of the end points and control point of this curve to the specified double coordinates.,"

setCurve
public void setCurve(double x1,
                     double y1,
                     double ctrlx,
                     double ctrly,
                     double x2,
                     double y2)
Sets the location of the end points and control point of this curve
 to the specified double coordinates.

Specified by:
setCurve in class QuadCurve2D
Parameters:
x1 - the X coordinate of the start point
y1 - the Y coordinate of the start point
ctrlx - the X coordinate of the control point
ctrly - the Y coordinate of the control point
x2 - the X coordinate of the end point
y2 - the Y coordinate of the end point
Since:
1.2


"
24,QuadCurve2D.Double,9,"void setCtrlPoint(double ctrlX, double ctrlY)",False,,NULL
24,QuadCurve2D.Double,10,"void setPoint(double x1, double y1, double x2, double y2)",False,,NULL
24,QuadCurve2D.Double,11,"void setStartPoint(double x1, double y1)",False,,NULL
24,QuadCurve2D.Double,12,"void setEndPoint(double x2, double y2)",False,,NULL
24,QuadCurve2D.Double,13,double getPathIterator(AffineTransform at),False,,NULL
24,QuadCurve2D.Double,14,"boolean contains(double x, double y, double tolerance)",False,,NULL
24,QuadCurve2D.Double,15,"boolean intersects(double x, double y, double w, double h, double tolerance)",False,,NULL
25,QuadCurve2D.Float,1,float getCtrlX(),False,,NULL
25,QuadCurve2D.Float,2,float getCtrlY(),False,,NULL
25,QuadCurve2D.Float,3,float getX1(),False,,NULL
25,QuadCurve2D.Float,4,float getY1(),False,,NULL
25,QuadCurve2D.Float,5,float getX2(),False,,NULL
25,QuadCurve2D.Float,6,float getY2(),False,,NULL
25,QuadCurve2D.Float,7,"void setCurve(float x1, float y1, float ctrlX, float ctrlY, float x2, float y2)",True,Sets the location of the end points and control point of this curve to the specified float coordinates.,"

setCurve
public void setCurve(float x1,
                     float y1,
                     float ctrlx,
                     float ctrly,
                     float x2,
                     float y2)
Sets the location of the end points and control point of this curve
 to the specified float coordinates.

Parameters:
x1 - the X coordinate of the start point
y1 - the Y coordinate of the start point
ctrlx - the X coordinate of the control point
ctrly - the Y coordinate of the control point
x2 - the X coordinate of the end point
y2 - the Y coordinate of the end point
Since:
1.2


"
25,QuadCurve2D.Float,8,"void setCurve(double x1, double y1, double ctrlX, double ctrlY, double x2, double y2)",True,Sets the location of the end points and control point of this curve to the specified double coordinates.,"

setCurve
public void setCurve(double x1,
                     double y1,
                     double ctrlx,
                     double ctrly,
                     double x2,
                     double y2)
Sets the location of the end points and control point of this curve
 to the specified double coordinates.

Specified by:
setCurve in class QuadCurve2D
Parameters:
x1 - the X coordinate of the start point
y1 - the Y coordinate of the start point
ctrlx - the X coordinate of the control point
ctrly - the Y coordinate of the control point
x2 - the X coordinate of the end point
y2 - the Y coordinate of the end point
Since:
1.2


"
25,QuadCurve2D.Float,9,"void setCurve(Point2D.Float p1, Point2D.Float ctrl, Point2D.Float p2)",False,,NULL
25,QuadCurve2D.Float,10,"void setCurve(Point2D p1, Point2D ctrl, Point2D p2)",False,,NULL
25,QuadCurve2D.Float,11,"void setCurve(double x1, double y1, Point2D.Float ctrl, double x2, double y2)",False,,NULL
25,QuadCurve2D.Float,12,"void setCurve(double x1, double y1, Point2D ctrl, double x2, double y2)",False,,NULL
25,QuadCurve2D.Float,13,"void setCurve(Point2D.Float p1, Point2D.Float ctrl, double x2, double y2)",False,,NULL
25,QuadCurve2D.Float,14,"void setCurve(Point2D p1, Point2D ctrl, double x2, double y2)",False,,NULL
25,QuadCurve2D.Float,15,"void setCurve(double x1, double y1, double ctrlX, double ctrlY, Point2D.Float p2)",False,,NULL
25,QuadCurve2D.Float,16,"void setCurve(double x1, double y1, double ctrlX, double ctrlY, Point2D p2)",False,,NULL
25,QuadCurve2D.Float,17,"void setCurve(Point2D.Float p1, double ctrlX, double ctrlY, Point2D.Float p2)",False,,NULL
25,QuadCurve2D.Float,18,"void setCurve(Point2D p1, double ctrlX, double ctrlY, Point2D p2)",False,,NULL
25,QuadCurve2D.Float,19,"void setCurve(double x1, double y1, Point2D.Float ctrl, Point2D.Float p2)",False,,NULL
25,QuadCurve2D.Float,20,"void setCurve(double x1, double y1, Point2D ctrl, Point2D p2)",False,,NULL
26,Rectangle2D,1,double getX(),False,,NULL
26,Rectangle2D,2,double getY(),False,,NULL
26,Rectangle2D,3,double getWidth(),False,,NULL
26,Rectangle2D,4,double getHeight(),False,,NULL
26,Rectangle2D,5,"boolean contains(double x, double y)",True,"Tests if the specified coordinates are inside the boundary of the Shape, as described by the definition of insideness.","

contains
public boolean contains(double x,
                        double y)
Tests if the specified coordinates are inside the boundary of the
 Shape, as described by the
 
 definition of insideness.

Parameters:
x - the specified X coordinate to be tested
y - the specified Y coordinate to be tested
Returns:
true if the specified coordinates are inside
         the Shape boundary; false
         otherwise.
Since:
1.2


"
27,Rectangle2D.Double,1,double getX(),True,Returns the X coordinate of the upper-left corner of the framing rectangle in double precision.,"

getX
public double getX()
Returns the X coordinate of the upper-left corner of
 the framing rectangle in double precision.

Specified by:
getX in class RectangularShape
Returns:
the X coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
27,Rectangle2D.Double,2,double getY(),True,Returns the Y coordinate of the upper-left corner of the framing rectangle in double precision.,"

getY
public double getY()
Returns the Y coordinate of the upper-left corner of
 the framing rectangle in double precision.

Specified by:
getY in class RectangularShape
Returns:
the Y coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
27,Rectangle2D.Double,3,double getWidth(),True,Returns the width of the framing rectangle in double precision.,"

getWidth
public double getWidth()
Returns the width of the framing rectangle in
 double precision.

Specified by:
getWidth in class RectangularShape
Returns:
the width of the framing rectangle.
Since:
1.2


"
27,Rectangle2D.Double,4,double getHeight(),True,Returns the height of the framing rectangle in double precision.,"

getHeight
public double getHeight()
Returns the height of the framing rectangle
 in double precision.

Specified by:
getHeight in class RectangularShape
Returns:
the height of the framing rectangle.
Since:
1.2


"
27,Rectangle2D.Double,5,"void setFrame(double x, double y, double w, double h)",False,,NULL
28,Rectangle2D.Float,1,float getX(),False,,NULL
28,Rectangle2D.Float,2,float getY(),False,,NULL
28,Rectangle2D.Float,3,float getWidth(),False,,NULL
28,Rectangle2D.Float,4,float getHeight(),False,,NULL
28,Rectangle2D.Float,5,"void setRect(float x, float y, float w, float h)",True,Sets the location and size of this Rectangle2D to the specified float values.,"

setRect
public void setRect(float x,
                    float y,
                    float w,
                    float h)
Sets the location and size of this Rectangle2D
 to the specified float values.

Parameters:
x - the X coordinate of the upper-left corner
          of this Rectangle2D
y - the Y coordinate of the upper-left corner
          of this Rectangle2D
w - the width of this Rectangle2D
h - the height of this Rectangle2D
Since:
1.2


"
29,RectangularShape,1,RectangularShape getBounds(),False,,NULL
29,RectangularShape,2,RectangularShape getBounds2D(),False,,NULL
29,RectangularShape,3,"boolean contains(double x, double y)",False,,NULL
29,RectangularShape,4,boolean contains(Point2D p),True,"Tests if a specified Point2D is inside the boundary of the Shape, as described by the definition of insideness.","

contains
public boolean contains(Point2D p)
Tests if a specified Point2D is inside the boundary
 of the Shape, as described by the
 
 definition of insideness.

Specified by:
contains in interface Shape
Parameters:
p - the specified Point2D to be tested
Returns:
true if the specified Point2D is
          inside the boundary of the Shape;
          false otherwise.
Since:
1.2


"
29,RectangularShape,5,"boolean contains(double x, double y, double w, double h)",False,,NULL
29,RectangularShape,6,boolean contains(Rectangle2D r),True,Tests if the interior of the Shape entirely contains the specified Rectangle2D.,"

contains
public boolean contains(Rectangle2D r)
Tests if the interior of the Shape entirely contains the
 specified Rectangle2D.
 The Shape.contains() method allows a Shape
 implementation to conservatively return false when:
 

 the intersect method returns true and
 
 the calculations to determine whether or not the
 Shape entirely contains the Rectangle2D
 are prohibitively expensive.
 
 This means that for some Shapes this method might
 return false even though the Shape contains
 the Rectangle2D.
 The Area class performs
 more accurate geometric computations than most
 Shape objects and therefore can be used if a more precise
 answer is required.

Specified by:
contains in interface Shape
Parameters:
r - The specified Rectangle2D
Returns:
true if the interior of the Shape
          entirely contains the Rectangle2D;
          false otherwise or, if the Shape
          contains the Rectangle2D and the
          intersects method returns true
          and the containment calculations would be too expensive to
          perform.
Since:
1.2
See Also:
Shape.contains(double, double, double, double)


"
29,RectangularShape,7,"boolean intersects(double x, double y, double w, double h)",False,,NULL
29,RectangularShape,8,boolean intersects(Rectangle2D r),True,Tests if the interior of the Shape intersects the interior of a specified Rectangle2D.,"

intersects
public boolean intersects(Rectangle2D r)
Tests if the interior of the Shape intersects the
 interior of a specified Rectangle2D.
 The Shape.intersects() method allows a Shape
 implementation to conservatively return true when:
 

 there is a high probability that the Rectangle2D and the
 Shape intersect, but
 
 the calculations to accurately determine this intersection
 are prohibitively expensive.
 
 This means that for some Shapes this method might
 return true even though the Rectangle2D does not
 intersect the Shape.
 The Area class performs
 more accurate computations of geometric intersection than most
 Shape objects and therefore can be used if a more precise
 answer is required.

Specified by:
intersects in interface Shape
Parameters:
r - the specified Rectangle2D
Returns:
true if the interior of the Shape and
          the interior of the specified Rectangle2D
          intersect, or are both highly likely to intersect and intersection
          calculations would be too expensive to perform; false
          otherwise.
Since:
1.2
See Also:
Shape.intersects(double, double, double, double)


"
29,RectangularShape,9,"boolean contains(double x, double y, double w, double h, double arcWidth, double arcHeight)",False,,NULL
29,RectangularShape,10,"boolean contains(Rectangle2D r, double arcWidth, double arcHeight)",False,,NULL
30,RoundRectangle2D,1,"RoundRectangle2D(double x, double y, double w, double h, double arcw, double arch)",False,,NULL
30,RoundRectangle2D,2,double getArcWidth(),True,Gets the width of the arc that rounds off the corners.,"

getArcWidth
public abstract double getArcWidth()
Gets the width of the arc that rounds off the corners.

Returns:
the width of the arc that rounds off the corners
 of this RoundRectangle2D.
Since:
1.2


"
30,RoundRectangle2D,3,double getArcHeight(),True,Gets the height of the arc that rounds off the corners.,"

getArcHeight
public abstract double getArcHeight()
Gets the height of the arc that rounds off the corners.

Returns:
the height of the arc that rounds off the corners
 of this RoundRectangle2D.
Since:
1.2


"
30,RoundRectangle2D,4,double getHeight(),False,,NULL
30,RoundRectangle2D,5,double getWidth(),False,,NULL
30,RoundRectangle2D,6,double getX(),False,,NULL
30,RoundRectangle2D,7,double getY(),False,,NULL
30,RoundRectangle2D,8,Rectangle2D getBounds2D(),False,,NULL
30,RoundRectangle2D,9,"boolean contains(double x, double y)",True,"Tests if the specified coordinates are inside the boundary of the Shape, as described by the definition of insideness.","

contains
public boolean contains(double x,
                        double y)
Tests if the specified coordinates are inside the boundary of the
 Shape, as described by the
 
 definition of insideness.

Parameters:
x - the specified X coordinate to be tested
y - the specified Y coordinate to be tested
Returns:
true if the specified coordinates are inside
         the Shape boundary; false
         otherwise.
Since:
1.2


"
30,RoundRectangle2D,10,boolean contains(Point2D p),False,,NULL
30,RoundRectangle2D,11,"boolean intersects(double x, double y, double w, double h)",True,Tests if the interior of the Shape intersects the interior of a specified rectangular area.,"

intersects
public boolean intersects(double x,
                          double y,
                          double w,
                          double h)
Tests if the interior of the Shape intersects the
 interior of a specified rectangular area.
 The rectangular area is considered to intersect the Shape
 if any point is contained in both the interior of the
 Shape and the specified rectangular area.
 
 The Shape.intersects() method allows a Shape
 implementation to conservatively return true when:
 

 there is a high probability that the rectangular area and the
 Shape intersect, but
 
 the calculations to accurately determine this intersection
 are prohibitively expensive.
 
 This means that for some Shapes this method might
 return true even though the rectangular area does not
 intersect the Shape.
 The Area class performs
 more accurate computations of geometric intersection than most
 Shape objects and therefore can be used if a more precise
 answer is required.

Parameters:
x - the X coordinate of the upper-left corner
          of the specified rectangular area
y - the Y coordinate of the upper-left corner
          of the specified rectangular area
w - the width of the specified rectangular area
h - the height of the specified rectangular area
Returns:
true if the interior of the Shape and
          the interior of the rectangular area intersect, or are
          both highly likely to intersect and intersection calculations
          would be too expensive to perform; false otherwise.
Since:
1.2
See Also:
Area


"
30,RoundRectangle2D,12,boolean intersects(Rectangle2D r),False,,NULL
30,RoundRectangle2D,13,"boolean intersectsLine(double x1, double y1, double x2, double y2)",False,,NULL
30,RoundRectangle2D,14,boolean intersects(Line2D l),False,,NULL
30,RoundRectangle2D,15,boolean intersects(RoundRectangle2D rr),False,,NULL
30,RoundRectangle2D,16,boolean contains(RoundRectangle2D rr),False,,NULL
30,RoundRectangle2D,17,boolean contains(Rectangle2D r),False,,NULL
30,RoundRectangle2D,18,"boolean contains(RoundRectangle2D rr, int t)",False,,NULL
30,RoundRectangle2D,19,"boolean contains(Rectangle2D r, int t)",False,,NULL
30,RoundRectangle2D,20,"boolean intersects(RoundRectangle2D rr, int t)",False,,NULL
30,RoundRectangle2D,21,"boolean intersects(Rectangle2D r, int t)",False,,NULL
31,RoundRectangle2D.Double,1,"RoundRectangle2D.Double(double x, double y, double w, double h, double arcw, double arch)",False,,NULL
31,RoundRectangle2D.Double,2,double getArcWidth(),True,Gets the width of the arc that rounds off the corners.,"

getArcWidth
public double getArcWidth()
Gets the width of the arc that rounds off the corners.

Specified by:
getArcWidth in class RoundRectangle2D
Returns:
the width of the arc that rounds off the corners
 of this RoundRectangle2D.
Since:
1.2


"
31,RoundRectangle2D.Double,3,double getArcHeight(),True,Gets the height of the arc that rounds off the corners.,"

getArcHeight
public double getArcHeight()
Gets the height of the arc that rounds off the corners.

Specified by:
getArcHeight in class RoundRectangle2D
Returns:
the height of the arc that rounds off the corners
 of this RoundRectangle2D.
Since:
1.2


"
31,RoundRectangle2D.Double,4,double getHeight(),True,Returns the height of the framing rectangle in double precision.,"

getHeight
public double getHeight()
Returns the height of the framing rectangle
 in double precision.

Specified by:
getHeight in class RectangularShape
Returns:
the height of the framing rectangle.
Since:
1.2


"
31,RoundRectangle2D.Double,5,double getWidth(),True,Returns the width of the framing rectangle in double precision.,"

getWidth
public double getWidth()
Returns the width of the framing rectangle in
 double precision.

Specified by:
getWidth in class RectangularShape
Returns:
the width of the framing rectangle.
Since:
1.2


"
31,RoundRectangle2D.Double,6,double getX(),True,Returns the X coordinate of the upper-left corner of the framing rectangle in double precision.,"

getX
public double getX()
Returns the X coordinate of the upper-left corner of
 the framing rectangle in double precision.

Specified by:
getX in class RectangularShape
Returns:
the X coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
31,RoundRectangle2D.Double,7,double getY(),True,Returns the Y coordinate of the upper-left corner of the framing rectangle in double precision.,"

getY
public double getY()
Returns the Y coordinate of the upper-left corner of
 the framing rectangle in double precision.

Specified by:
getY in class RectangularShape
Returns:
the Y coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
31,RoundRectangle2D.Double,8,void setArcWidth(double arcw),False,,NULL
31,RoundRectangle2D.Double,9,void setArcHeight(double arch),False,,NULL
31,RoundRectangle2D.Double,10,"void setFrame(double x, double y, double w, double h)",False,,NULL
31,RoundRectangle2D.Double,11,"void setRoundRect(double x, double y, double w, double h, double arcw, double arch)",True,"Sets the location, size, and corner radii of this RoundRectangle2D to the specified double values.","

setRoundRect
public void setRoundRect(double x,
                         double y,
                         double w,
                         double h,
                         double arcw,
                         double arch)
Sets the location, size, and corner radii of this
 RoundRectangle2D to the specified
 double values.

Specified by:
setRoundRect in class RoundRectangle2D
Parameters:
x - the X coordinate to which to set the
          location of this RoundRectangle2D
y - the Y coordinate to which to set the
          location of this RoundRectangle2D
w - the width to which to set this
          RoundRectangle2D
h - the height to which to set this
          RoundRectangle2D
arcw - the width to which to set the arc of this
                 RoundRectangle2D
arch - the height to which to set the arc of this
                  RoundRectangle2D
Since:
1.2


"
31,RoundRectangle2D.Double,12,"boolean contains(double x, double y)",False,,NULL
31,RoundRectangle2D.Double,13,"boolean contains(double x, double y, double w, double h)",False,,NULL
31,RoundRectangle2D.Double,14,"boolean intersects(double x, double y, double w, double h)",False,,NULL
31,RoundRectangle2D.Double,15,Rectangle2D getBounds2D(),True,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.,"

getBounds2D
public Rectangle2D getBounds2D()
Returns a high precision and more accurate bounding box of
 the Shape than the getBounds method.
 Note that there is no guarantee that the returned
 Rectangle2D is the smallest bounding box that encloses
 the Shape, only that the Shape lies
 entirely within the indicated Rectangle2D.  The
 bounding box returned by this method is usually tighter than that
 returned by the getBounds method and never fails due
 to overflow problems since the return value can be an instance of
 the Rectangle2D that uses double precision values to
 store the dimensions.

 
 Note that the 
 definition of insideness can lead to situations where points
 on the defining outline of the shape may not be considered
 contained in the returned bounds object, but only in cases
 where those points are also not considered contained in the original
 shape.
 

 If a point is inside the shape according to the
 contains(point) method, then it must
 be inside the returned Rectangle2D bounds object according
 to the contains(point) method of the
 bounds. Specifically:
 

shape.contains(p) requires bounds.contains(p)


 If a point is not inside the shape, then it might
 still be contained in the bounds object:
 

bounds.contains(p) does not imply shape.contains(p)


Specified by:
getBounds2D in interface Shape
Returns:
an instance of Rectangle2D that is a
                 high-precision bounding box of the Shape.
Since:
1.2
See Also:
Shape.getBounds()


"
32,RoundRectangle2D.Float,1,"RoundRectangle2D.Float(float x, float y, float w, float h, float arcw, float arch)",False,,NULL
32,RoundRectangle2D.Float,2,float getArcWidth(),False,,NULL
32,RoundRectangle2D.Float,3,float getArcHeight(),False,,NULL
32,RoundRectangle2D.Float,4,"void setRoundRect(float x, float y, float w, float h, float arcw, float arch)",True,"Sets the location, size, and corner radii of this RoundRectangle2D to the specified float values.","

setRoundRect
public void setRoundRect(float x,
                         float y,
                         float w,
                         float h,
                         float arcw,
                         float arch)
Sets the location, size, and corner radii of this
 RoundRectangle2D to the specified
 float values.

Parameters:
x - the X coordinate to which to set the
          location of this RoundRectangle2D
y - the Y coordinate to which to set the
          location of this RoundRectangle2D
w - the width to which to set this
          RoundRectangle2D
h - the height to which to set this
          RoundRectangle2D
arcw - the width to which to set the arc of this
             RoundRectangle2D
arch - the height to which to set the arc of this
             RoundRectangle2D
Since:
1.2


"
32,RoundRectangle2D.Float,5,"boolean contains(double x, double y)",False,,NULL
32,RoundRectangle2D.Float,6,"boolean contains(double x, double y, double w, double h)",False,,NULL
32,RoundRectangle2D.Float,7,"boolean intersects(double x, double y, double w, double h)",False,,NULL
32,RoundRectangle2D.Float,8,Rectangle2D getBounds2D(),True,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.,"

getBounds2D
public Rectangle2D getBounds2D()
Returns a high precision and more accurate bounding box of
 the Shape than the getBounds method.
 Note that there is no guarantee that the returned
 Rectangle2D is the smallest bounding box that encloses
 the Shape, only that the Shape lies
 entirely within the indicated Rectangle2D.  The
 bounding box returned by this method is usually tighter than that
 returned by the getBounds method and never fails due
 to overflow problems since the return value can be an instance of
 the Rectangle2D that uses double precision values to
 store the dimensions.

 
 Note that the 
 definition of insideness can lead to situations where points
 on the defining outline of the shape may not be considered
 contained in the returned bounds object, but only in cases
 where those points are also not considered contained in the original
 shape.
 

 If a point is inside the shape according to the
 contains(point) method, then it must
 be inside the returned Rectangle2D bounds object according
 to the contains(point) method of the
 bounds. Specifically:
 

shape.contains(p) requires bounds.contains(p)


 If a point is not inside the shape, then it might
 still be contained in the bounds object:
 

bounds.contains(p) does not imply shape.contains(p)


Specified by:
getBounds2D in interface Shape
Returns:
an instance of Rectangle2D that is a
                 high-precision bounding box of the Shape.
Since:
1.2
See Also:
Shape.getBounds()


"
32,RoundRectangle2D.Float,9,boolean contains(Point2D p),False,,NULL
32,RoundRectangle2D.Float,10,boolean contains(Rectangle2D r),False,,NULL
32,RoundRectangle2D.Float,11,boolean intersects(Rectangle2D r),False,,NULL
32,RoundRectangle2D.Float,12,Rectangle2D getBounds(),False,,NULL
32,RoundRectangle2D.Float,13,"boolean contains(double x, double y, double w, double h, double px, double py)",False,,NULL
32,RoundRectangle2D.Float,14,"boolean intersects(double x, double y, double w, double h, double px, double py)",False,,NULL
32,RoundRectangle2D.Float,15,"boolean contains(double x, double y, double w, double h, double px, double py, double pw, double ph)",False,,NULL
32,RoundRectangle2D.Float,16,"boolean intersects(double x, double y, double w, double h, double px, double py, double pw, double ph)",False,,NULL
