Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,Buffer,1,int capacity(),True,Returns this buffer's capacity.,"

capacity
public final int capacity()
Returns this buffer's capacity.

Returns:
The capacity of this buffer


"
0,Buffer,2,int position(),True,Returns this buffer's position.,"

position
public final int position()
Returns this buffer's position.

Returns:
The position of this buffer


"
0,Buffer,3,Buffer position(int newPosition),True,Sets this buffer's position.,"

position
public final Buffer position(int newPosition)
Sets this buffer's position.  If the mark is defined and larger than the
 new position then it is discarded.

Parameters:
newPosition - The new position value; must be non-negative
         and no larger than the current limit
Returns:
This buffer
Throws:
IllegalArgumentException - If the preconditions on newPosition do not hold


"
0,Buffer,4,int limit(),True,Returns this buffer's limit.,"

limit
public final int limit()
Returns this buffer's limit.

Returns:
The limit of this buffer


"
0,Buffer,5,Buffer limit(int newLimit),True,Sets this buffer's limit.,"

limit
public final Buffer limit(int newLimit)
Sets this buffer's limit.  If the position is larger than the new limit
 then it is set to the new limit.  If the mark is defined and larger than
 the new limit then it is discarded.

Parameters:
newLimit - The new limit value; must be non-negative
         and no larger than this buffer's capacity
Returns:
This buffer
Throws:
IllegalArgumentException - If the preconditions on newLimit do not hold


"
0,Buffer,6,Buffer flip(),True,Flips this buffer.,"

flip
public final Buffer flip()
Flips this buffer.  The limit is set to the current position and then
 the position is set to zero.  If the mark is defined then it is
 discarded.

  After a sequence of channel-read or put operations, invoke
 this method to prepare for a sequence of channel-write or relative
 get operations.  For example:

 
 buf.put(magic);    // Prepend header
 in.read(buf);      // Read data into rest of buffer
 buf.flip();        // Flip buffer
 out.write(buf);    // Write header + data to channel
 This method is often used in conjunction with the compact method when transferring data from
 one place to another.  

Returns:
This buffer


"
0,Buffer,7,Buffer rewind(),True,Rewinds this buffer.,"

rewind
public final Buffer rewind()
Rewinds this buffer.  The position is set to zero and the mark is
 discarded.

  Invoke this method before a sequence of channel-write or get
 operations, assuming that the limit has already been set
 appropriately.  For example:

 
 out.write(buf);    // Write remaining data
 buf.rewind();      // Rewind buffer
 buf.get(array);    // Copy data into array

Returns:
This buffer


"
0,Buffer,8,boolean hasRemaining(),True,Tells whether there are any elements between the current position and the limit.,"

hasRemaining
public final boolean hasRemaining()
Tells whether there are any elements between the current position and
 the limit.

Returns:
true if, and only if, there is at least one element
          remaining in this buffer


"
0,Buffer,9,int remaining(),True,Returns the number of elements between the current position and the limit.,"

remaining
public final int remaining()
Returns the number of elements between the current position and the
 limit.

Returns:
The number of elements remaining in this buffer


"
0,Buffer,10,Buffer clear(),True,Clears this buffer.,"

clear
public final Buffer clear()
Clears this buffer.  The position is set to zero, the limit is set to
 the capacity, and the mark is discarded.

  Invoke this method before using a sequence of channel-read or
 put operations to fill this buffer.  For example:

 
 buf.clear();     // Prepare buffer for reading
 in.read(buf);    // Read data
 This method does not actually erase the data in the buffer, but it
 is named as if it did because it will most often be used in situations
 in which that might as well be the case. 

Returns:
This buffer


"
0,Buffer,11,Buffer compact(),False,,NULL
0,Buffer,12,Buffer duplicate(),False,,NULL
0,Buffer,13,Buffer slice(),False,,NULL
0,Buffer,14,Buffer asReadOnlyBuffer(),False,,NULL
0,Buffer,15,Buffer asReadOnlyBuffer(int mark),False,,NULL
0,Buffer,16,"Buffer asReadOnlyBuffer(int position, int limit)",False,,NULL
0,Buffer,17,"Buffer asReadOnlyBuffer(int mark, int position, int limit)",False,,NULL
0,Buffer,18,Buffer order(),False,,NULL
0,Buffer,19,Buffer order(ByteOrder bo),False,,NULL
0,Buffer,20,Buffer mark(),True,Sets this buffer's mark at its position.,"

mark
public final Buffer mark()
Sets this buffer's mark at its position.

Returns:
This buffer


"
0,Buffer,21,Buffer reset(),True,Resets this buffer's position to the previously-marked position.,"

reset
public final Buffer reset()
Resets this buffer's position to the previously-marked position.

  Invoking this method neither changes nor discards the mark's
 value. 

Returns:
This buffer
Throws:
InvalidMarkException - If the mark has not been set


"
0,Buffer,22,Buffer markSupported(),False,,NULL
0,Buffer,23,Buffer get(int index),False,,NULL
0,Buffer,24,"Buffer get(int index, ByteBuffer dst)",False,,NULL
0,Buffer,25,"Buffer put(int index, byte b)",False,,NULL
0,Buffer,26,"Buffer put(int index, ByteBuffer src)",False,,NULL
0,Buffer,27,Buffer get(byte[] dst),False,,NULL
0,Buffer,28,"Buffer get(int offset, byte[] dst)",False,,NULL
0,Buffer,29,"Buffer get(int offset, byte[] dst, int length)",False,,NULL
0,Buffer,30,Buffer put(byte[] src),False,,NULL
0,Buffer,31,"Buffer put(int offset, byte[] src)",False,,NULL
0,Buffer,32,"Buffer put(int offset, byte[] src, int length)",False,,NULL
0,Buffer,33,Buffer get(ByteBuffer dst),False,,NULL
0,Buffer,34,Buffer put(ByteBuffer src),False,,NULL
0,Buffer,35,"Buffer get(int index, Class<?> componentType)",False,,NULL
0,Buffer,36,"Buffer put(int index, Object component)",False,,NULL
0,Buffer,37,Buffer get(Class<?> componentType),False,,NULL
0,Buffer,38,Buffer put(Object component),False,,NULL
0,Buffer,39,"Buffer get(int index, Class<?> componentType, Object dst)",False,,NULL
0,Buffer,40,"Buffer put(int index, Object src, int offset, int length)",False,,NULL
0,Buffer,41,"Buffer get(Object dst, int offset, int length)",False,,NULL
0,Buffer,42,"Buffer put(Object src, int offset, int length)",False,,NULL
0,Buffer,43,"Buffer get(int index, Class<?> componentType, Object dst, int offset, int length)",False,,NULL
0,Buffer,44,"Buffer put(int index, Object src, int offset, int length)",False,,NULL
0,Buffer,45,"Buffer get(Object dst, int offset, int length)",False,,NULL
0,Buffer,46,"Buffer put(Object src, int offset, int length)",False,,NULL
0,Buffer,47,"Buffer get(int index, Class<?> componentType, Object dst, int offset, int length)",False,,NULL
0,Buffer,48,"Buffer put(int index, Object src, int offset, int length)",False,,NULL
0,Buffer,49,"Buffer get(Object dst, int offset, int length)",False,,NULL
0,Buffer,50,"Buffer put(Object src, int offset, int length)",False,,NULL
0,Buffer,51,"Buffer get(int index, Class<?> componentType, Object dst, int offset, int length)",False,,NULL
0,Buffer,52,"Buffer put(int index, Object src, int offset, int length)",False,,NULL
0,Buffer,53,"Buffer get(Object dst, int offset, int length)",False,,NULL
0,Buffer,54,"Buffer put(Object src, int offset, int length)",False,,NULL
0,Buffer,55,"Buffer get(int index, Class<?> componentType, Object dst, int offset, int length)",False,,NULL
0,Buffer,56,"Buffer put(int index, Object src, int offset, int length)",False,,NULL
1,ByteBuffer,1,ByteBuffer allocate(int capacity),True,Allocates a new byte buffer.,"

allocate
public static ByteBuffer allocate(int capacity)
Allocates a new byte buffer.

  The new buffer's position will be zero, its limit will be its
 capacity, its mark will be undefined, and each of its elements will be
 initialized to zero.  It will have a backing array,
 and its array offset will be zero.

Parameters:
capacity - The new buffer's capacity, in bytes
Returns:
The new byte buffer
Throws:
IllegalArgumentException - If the capacity is a negative integer


"
1,ByteBuffer,2,ByteBuffer wrap(byte[] array),True,Wraps a byte array into a buffer.,"

wrap
public static ByteBuffer wrap(byte[] array)
Wraps a byte array into a buffer.

  The new buffer will be backed by the given byte array;
 that is, modifications to the buffer will cause the array to be modified
 and vice versa.  The new buffer's capacity and limit will be
 array.length, its position will be zero, and its mark will be
 undefined.  Its backing array will be the
 given array, and its array offset> will
 be zero.  

Parameters:
array - The array that will back this buffer
Returns:
The new byte buffer


"
1,ByteBuffer,3,"ByteBuffer get(byte[] dst, int offset, int length)",True,Relative bulk get method.,"

get
public ByteBuffer get(byte[] dst,
                      int offset,
                      int length)
Relative bulk get method.

  This method transfers bytes from this buffer into the given
 destination array.  If there are fewer bytes remaining in the
 buffer than are required to satisfy the request, that is, if
 length > remaining(), then no
 bytes are transferred and a BufferUnderflowException is
 thrown.

  Otherwise, this method copies length bytes from this
 buffer into the given array, starting at the current position of this
 buffer and at the given offset in the array.  The position of this
 buffer is then incremented by length.

  In other words, an invocation of this method of the form
 src.get(dst, off, len) has exactly the same effect as
 the loop

 
     for (int i = off; i < off + len; i++)
         dst[i] = src.get():
 

 except that it first checks that there are sufficient bytes in
 this buffer and it is potentially much more efficient.

Parameters:
dst - The array into which bytes are to be written
offset - The offset within the array of the first byte to be
         written; must be non-negative and no larger than
         dst.length
length - The maximum number of bytes to be written to the given
         array; must be non-negative and no larger than
         dst.length - offset
Returns:
This buffer
Throws:
BufferUnderflowException - If there are fewer than length bytes
          remaining in this buffer
IndexOutOfBoundsException - If the preconditions on the offset and length
          parameters do not hold


"
1,ByteBuffer,4,"ByteBuffer put(byte[] src, int offset, int length)",True,Relative bulk put method (optional operation).,"

put
public ByteBuffer put(byte[] src,
                      int offset,
                      int length)
Relative bulk put method  (optional operation).

  This method transfers bytes into this buffer from the given
 source array.  If there are more bytes to be copied from the array
 than remain in this buffer, that is, if
 length > remaining(), then no
 bytes are transferred and a BufferOverflowException is
 thrown.

  Otherwise, this method copies length bytes from the
 given array into this buffer, starting at the given offset in the array
 and at the current position of this buffer.  The position of this buffer
 is then incremented by length.

  In other words, an invocation of this method of the form
 dst.put(src, off, len) has exactly the same effect as
 the loop

 
     for (int i = off; i < off + len; i++)
         dst.put(a[i]);
 

 except that it first checks that there is sufficient space in this
 buffer and it is potentially much more efficient.

Parameters:
src - The array from which bytes are to be read
offset - The offset within the array of the first byte to be read;
         must be non-negative and no larger than array.length
length - The number of bytes to be read from the given array;
         must be non-negative and no larger than
         array.length - offset
Returns:
This buffer
Throws:
BufferOverflowException - If there is insufficient space in this buffer
IndexOutOfBoundsException - If the preconditions on the offset and length
          parameters do not hold
ReadOnlyBufferException - If this buffer is read-only


"
1,ByteBuffer,5,ByteBuffer flip(),False,,NULL
2,ByteOrder,1,ByteOrder nativeOrder(),True,Retrieves the native byte order of the underlying platform.,"

nativeOrder
public static ByteOrder nativeOrder()
Retrieves the native byte order of the underlying platform.

  This method is defined so that performance-sensitive Java code can
 allocate direct buffers with the same byte order as the hardware.
 Native code libraries are often more efficient when such buffers are
 used.  

Returns:
The native byte order of the hardware upon which this Java
          virtual machine is running


"
2,ByteOrder,2,ByteOrder BIG_ENDIAN,False,,NULL
2,ByteOrder,3,ByteOrder LITTLE_ENDIAN,False,,NULL
2,ByteOrder,4,ByteOrder byteOrder(),False,,NULL
2,ByteOrder,5,void order(ByteOrder byteOrder),False,,NULL
3,CharBuffer,1,int capacity(),False,,NULL
3,CharBuffer,2,CharBuffer put(CharSequence src),False,,NULL
3,CharBuffer,3,CharBuffer get(CharBuffer dst),False,,NULL
3,CharBuffer,4,CharBuffer compact(),True,Compacts this buffer (optional operation).,"

compact
public abstract CharBuffer compact()
Compacts this buffer  (optional operation).

  The chars between the buffer's current position and its limit,
 if any, are copied to the beginning of the buffer.  That is, the
 char at index p = position() is copied
 to index zero, the char at index p + 1 is copied
 to index one, and so forth until the char at index
 limit() - 1 is copied to index
 n = limit() - 1 - p.
 The buffer's position is then set to n+1 and its limit is set to
 its capacity.  The mark, if defined, is discarded.

  The buffer's position is set to the number of chars copied,
 rather than to zero, so that an invocation of this method can be
 followed immediately by an invocation of another relative put
 method. 

Returns:
This buffer
Throws:
ReadOnlyBufferException - If this buffer is read-only


"
3,CharBuffer,5,CharBuffer duplicate(),True,Creates a new char buffer that shares this buffer's content.,"

duplicate
public abstract CharBuffer duplicate()
Creates a new char buffer that shares this buffer's content.

  The content of the new buffer will be that of this buffer.  Changes
 to this buffer's content will be visible in the new buffer, and vice
 versa; the two buffers' position, limit, and mark values will be
 independent.

  The new buffer's capacity, limit, position, and mark values will be
 identical to those of this buffer.  The new buffer will be direct if,
 and only if, this buffer is direct, and it will be read-only if, and
 only if, this buffer is read-only.  

Returns:
The new char buffer


"
4,DoubleBuffer,1,DoubleBuffer put(double x),True,Relative put method (optional operation).,"

put
public abstract DoubleBuffer put(double d)
Relative put method  (optional operation).

  Writes the given double into this buffer at the current
 position, and then increments the position. 

Parameters:
d - The double to be written
Returns:
This buffer
Throws:
BufferOverflowException - If this buffer's current position is not smaller than its limit
ReadOnlyBufferException - If this buffer is read-only


"
4,DoubleBuffer,2,DoubleBuffer get(),False,,NULL
4,DoubleBuffer,3,DoubleBuffer get(int index),False,,NULL
4,DoubleBuffer,4,DoubleBuffer asReadOnlyBuffer(),True,"Creates a new, read-only double buffer that shares this buffer's content.","

asReadOnlyBuffer
public abstract DoubleBuffer asReadOnlyBuffer()
Creates a new, read-only double buffer that shares this buffer's
 content.

  The content of the new buffer will be that of this buffer.  Changes
 to this buffer's content will be visible in the new buffer; the new
 buffer itself, however, will be read-only and will not allow the shared
 content to be modified.  The two buffers' position, limit, and mark
 values will be independent.

  The new buffer's capacity, limit, position, and mark values will be
 identical to those of this buffer.

  If this buffer is itself read-only then this method behaves in
 exactly the same way as the duplicate method.  

Returns:
The new, read-only double buffer


"
4,DoubleBuffer,5,DoubleBuffer compact(),True,Compacts this buffer (optional operation).,"

compact
public abstract DoubleBuffer compact()
Compacts this buffer  (optional operation).

  The doubles between the buffer's current position and its limit,
 if any, are copied to the beginning of the buffer.  That is, the
 double at index p = position() is copied
 to index zero, the double at index p + 1 is copied
 to index one, and so forth until the double at index
 limit() - 1 is copied to index
 n = limit() - 1 - p.
 The buffer's position is then set to n+1 and its limit is set to
 its capacity.  The mark, if defined, is discarded.

  The buffer's position is set to the number of doubles copied,
 rather than to zero, so that an invocation of this method can be
 followed immediately by an invocation of another relative put
 method. 

Returns:
This buffer
Throws:
ReadOnlyBufferException - If this buffer is read-only


"
5,FloatBuffer,1,int capacity(),False,,NULL
5,FloatBuffer,2,FloatBuffer clear(),False,,NULL
5,FloatBuffer,3,FloatBuffer flip(),False,,NULL
5,FloatBuffer,4,boolean hasRemaining(),False,,NULL
5,FloatBuffer,5,FloatBuffer limit(int newLimit),False,,NULL
5,FloatBuffer,6,FloatBuffer mark(),False,,NULL
5,FloatBuffer,7,FloatBuffer position(int newPosition),False,,NULL
5,FloatBuffer,8,FloatBuffer rewind(),False,,NULL
5,FloatBuffer,9,FloatBuffer get(),False,,NULL
5,FloatBuffer,10,FloatBuffer get(int index),False,,NULL
5,FloatBuffer,11,FloatBuffer put(float f),True,Relative put method (optional operation).,"

put
public abstract FloatBuffer put(float f)
Relative put method  (optional operation).

  Writes the given float into this buffer at the current
 position, and then increments the position. 

Parameters:
f - The float to be written
Returns:
This buffer
Throws:
BufferOverflowException - If this buffer's current position is not smaller than its limit
ReadOnlyBufferException - If this buffer is read-only


"
5,FloatBuffer,12,"FloatBuffer put(int index, float f)",True,Absolute put method (optional operation).,"

put
public abstract FloatBuffer put(int index,
                                float f)
Absolute put method  (optional operation).

  Writes the given float into this buffer at the given
 index. 

Parameters:
index - The index at which the float will be written
f - The float value to be written
Returns:
This buffer
Throws:
IndexOutOfBoundsException - If index is negative
          or not smaller than the buffer's limit
ReadOnlyBufferException - If this buffer is read-only


"
5,FloatBuffer,13,FloatBuffer compact(),True,Compacts this buffer (optional operation).,"

compact
public abstract FloatBuffer compact()
Compacts this buffer  (optional operation).

  The floats between the buffer's current position and its limit,
 if any, are copied to the beginning of the buffer.  That is, the
 float at index p = position() is copied
 to index zero, the float at index p + 1 is copied
 to index one, and so forth until the float at index
 limit() - 1 is copied to index
 n = limit() - 1 - p.
 The buffer's position is then set to n+1 and its limit is set to
 its capacity.  The mark, if defined, is discarded.

  The buffer's position is set to the number of floats copied,
 rather than to zero, so that an invocation of this method can be
 followed immediately by an invocation of another relative put
 method. 

Returns:
This buffer
Throws:
ReadOnlyBufferException - If this buffer is read-only


"
5,FloatBuffer,14,FloatBuffer duplicate(),True,Creates a new float buffer that shares this buffer's content.,"

duplicate
public abstract FloatBuffer duplicate()
Creates a new float buffer that shares this buffer's content.

  The content of the new buffer will be that of this buffer.  Changes
 to this buffer's content will be visible in the new buffer, and vice
 versa; the two buffers' position, limit, and mark values will be
 independent.

  The new buffer's capacity, limit, position, and mark values will be
 identical to those of this buffer.  The new buffer will be direct if,
 and only if, this buffer is direct, and it will be read-only if, and
 only if, this buffer is read-only.  

Returns:
The new float buffer


"
5,FloatBuffer,15,FloatBuffer slice(),True,Creates a new float buffer whose content is a shared subsequence of this buffer's content.,"

slice
public abstract FloatBuffer slice()
Creates a new float buffer whose content is a shared subsequence of
 this buffer's content.

  The content of the new buffer will start at this buffer's current
 position.  Changes to this buffer's content will be visible in the new
 buffer, and vice versa; the two buffers' position, limit, and mark
 values will be independent.

  The new buffer's position will be zero, its capacity and its limit
 will be the number of floats remaining in this buffer, and its mark
 will be undefined.  The new buffer will be direct if, and only if, this
 buffer is direct, and it will be read-only if, and only if, this buffer
 is read-only.  

Returns:
The new float buffer


"
6,IntBuffer,1,int capacity(),False,,NULL
6,IntBuffer,2,IntBuffer duplicate(),True,Creates a new int buffer that shares this buffer's content.,"

duplicate
public abstract IntBuffer duplicate()
Creates a new int buffer that shares this buffer's content.

  The content of the new buffer will be that of this buffer.  Changes
 to this buffer's content will be visible in the new buffer, and vice
 versa; the two buffers' position, limit, and mark values will be
 independent.

  The new buffer's capacity, limit, position, and mark values will be
 identical to those of this buffer.  The new buffer will be direct if,
 and only if, this buffer is direct, and it will be read-only if, and
 only if, this buffer is read-only.  

Returns:
The new int buffer


"
6,IntBuffer,3,int get(),True,Relative get method.,"

get
public abstract int get()
Relative get method.  Reads the int at this buffer's
 current position, and then increments the position.

Returns:
The int at the buffer's current position
Throws:
BufferUnderflowException - If the buffer's current position is not smaller than its limit


"
6,IntBuffer,4,int get(int index),True,Absolute get method.,"

get
public abstract int get(int index)
Absolute get method.  Reads the int at the given
 index.

Parameters:
index - The index from which the int will be read
Returns:
The int at the given index
Throws:
IndexOutOfBoundsException - If index is negative
          or not smaller than the buffer's limit


"
6,IntBuffer,5,IntBuffer limit(int newLimit),False,,NULL
6,IntBuffer,6,int position(),False,,NULL
6,IntBuffer,7,IntBuffer position(int newPosition),False,,NULL
6,IntBuffer,8,IntBuffer put(int x),True,Relative put method (optional operation).,"

put
public abstract IntBuffer put(int i)
Relative put method  (optional operation).

  Writes the given int into this buffer at the current
 position, and then increments the position. 

Parameters:
i - The int to be written
Returns:
This buffer
Throws:
BufferOverflowException - If this buffer's current position is not smaller than its limit
ReadOnlyBufferException - If this buffer is read-only


"
6,IntBuffer,9,"IntBuffer put(int index, int x)",True,Absolute put method (optional operation).,"

put
public abstract IntBuffer put(int index,
                              int i)
Absolute put method  (optional operation).

  Writes the given int into this buffer at the given
 index. 

Parameters:
index - The index at which the int will be written
i - The int value to be written
Returns:
This buffer
Throws:
IndexOutOfBoundsException - If index is negative
          or not smaller than the buffer's limit
ReadOnlyBufferException - If this buffer is read-only


"
6,IntBuffer,10,IntBuffer slice(),True,Creates a new int buffer whose content is a shared subsequence of this buffer's content.,"

slice
public abstract IntBuffer slice()
Creates a new int buffer whose content is a shared subsequence of
 this buffer's content.

  The content of the new buffer will start at this buffer's current
 position.  Changes to this buffer's content will be visible in the new
 buffer, and vice versa; the two buffers' position, limit, and mark
 values will be independent.

  The new buffer's position will be zero, its capacity and its limit
 will be the number of ints remaining in this buffer, and its mark
 will be undefined.  The new buffer will be direct if, and only if, this
 buffer is direct, and it will be read-only if, and only if, this buffer
 is read-only.  

Returns:
The new int buffer


"
6,IntBuffer,11,IntBuffer compact(),True,Compacts this buffer (optional operation).,"

compact
public abstract IntBuffer compact()
Compacts this buffer  (optional operation).

  The ints between the buffer's current position and its limit,
 if any, are copied to the beginning of the buffer.  That is, the
 int at index p = position() is copied
 to index zero, the int at index p + 1 is copied
 to index one, and so forth until the int at index
 limit() - 1 is copied to index
 n = limit() - 1 - p.
 The buffer's position is then set to n+1 and its limit is set to
 its capacity.  The mark, if defined, is discarded.

  The buffer's position is set to the number of ints copied,
 rather than to zero, so that an invocation of this method can be
 followed immediately by an invocation of another relative put
 method. 

Returns:
This buffer
Throws:
ReadOnlyBufferException - If this buffer is read-only


"
6,IntBuffer,12,boolean hasArray(),True,Tells whether or not this buffer is backed by an accessible int array.,"

hasArray
public final boolean hasArray()
Tells whether or not this buffer is backed by an accessible int
 array.

  If this method returns true then the array
 and arrayOffset methods may safely be invoked.
 

Specified by:
hasArray in class Buffer
Returns:
true if, and only if, this buffer
          is backed by an array and is not read-only


"
6,IntBuffer,13,int arrayOffset(),True,Returns the offset within this buffer's backing array of the first element of the buffer (optional operation).,"

arrayOffset
public final int arrayOffset()
Returns the offset within this buffer's backing array of the first
 element of the buffer  (optional operation).

  If this buffer is backed by an array then buffer position p
 corresponds to array index p + arrayOffset().

  Invoke the hasArray method before invoking this
 method in order to ensure that this buffer has an accessible backing
 array.  

Specified by:
arrayOffset in class Buffer
Returns:
The offset within this buffer's array
          of the first element of the buffer
Throws:
ReadOnlyBufferException - If this buffer is backed by an array but is read-only
UnsupportedOperationException - If this buffer is not backed by an accessible array


"
6,IntBuffer,14,int remaining(),False,,NULL
6,IntBuffer,15,boolean hasRemaining(),False,,NULL
6,IntBuffer,16,boolean isReadOnly(),False,,NULL
6,IntBuffer,17,boolean isDirect(),True,Tells whether or not this int buffer is direct.,"

isDirect
public abstract boolean isDirect()
Tells whether or not this int buffer is direct.

Specified by:
isDirect in class Buffer
Returns:
true if, and only if, this buffer is direct


"
6,IntBuffer,18,ByteOrder order(),True,Retrieves this buffer's byte order.,"

order
public abstract ByteOrder order()
Retrieves this buffer's byte order.

  The byte order of an int buffer created by allocation or by
 wrapping an existing int array is the native order of the underlying
 hardware.  The byte order of an int buffer created as a view of a byte buffer is that of the
 byte buffer at the moment that the view is created.  

Returns:
This buffer's byte order


"
6,IntBuffer,19,IntBuffer asReadOnlyBuffer(),True,"Creates a new, read-only int buffer that shares this buffer's content.","

asReadOnlyBuffer
public abstract IntBuffer asReadOnlyBuffer()
Creates a new, read-only int buffer that shares this buffer's
 content.

  The content of the new buffer will be that of this buffer.  Changes
 to this buffer's content will be visible in the new buffer; the new
 buffer itself, however, will be read-only and will not allow the shared
 content to be modified.  The two buffers' position, limit, and mark
 values will be independent.

  The new buffer's capacity, limit, position, and mark values will be
 identical to those of this buffer.

  If this buffer is itself read-only then this method behaves in
 exactly the same way as the duplicate method.  

Returns:
The new, read-only int buffer


"
6,IntBuffer,20,IntBuffer asReadOnlyBuffer(int mark),False,,NULL
7,LongBuffer,1,int capacity(),False,,NULL
7,LongBuffer,2,LongBuffer duplicate(),True,Creates a new long buffer that shares this buffer's content.,"

duplicate
public abstract LongBuffer duplicate()
Creates a new long buffer that shares this buffer's content.

  The content of the new buffer will be that of this buffer.  Changes
 to this buffer's content will be visible in the new buffer, and vice
 versa; the two buffers' position, limit, and mark values will be
 independent.

  The new buffer's capacity, limit, position, and mark values will be
 identical to those of this buffer.  The new buffer will be direct if,
 and only if, this buffer is direct, and it will be read-only if, and
 only if, this buffer is read-only.  

Returns:
The new long buffer


"
7,LongBuffer,3,LongBuffer flip(),False,,NULL
7,LongBuffer,4,boolean hasArray(),True,Tells whether or not this buffer is backed by an accessible long array.,"

hasArray
public final boolean hasArray()
Tells whether or not this buffer is backed by an accessible long
 array.

  If this method returns true then the array
 and arrayOffset methods may safely be invoked.
 

Specified by:
hasArray in class Buffer
Returns:
true if, and only if, this buffer
          is backed by an array and is not read-only


"
7,LongBuffer,5,long get(int index),True,Absolute get method.,"

get
public abstract long get(int index)
Absolute get method.  Reads the long at the given
 index.

Parameters:
index - The index from which the long will be read
Returns:
The long at the given index
Throws:
IndexOutOfBoundsException - If index is negative
          or not smaller than the buffer's limit


"
7,LongBuffer,6,LongBuffer put(long x),True,Relative put method (optional operation).,"

put
public abstract LongBuffer put(long l)
Relative put method  (optional operation).

  Writes the given long into this buffer at the current
 position, and then increments the position. 

Parameters:
l - The long to be written
Returns:
This buffer
Throws:
BufferOverflowException - If this buffer's current position is not smaller than its limit
ReadOnlyBufferException - If this buffer is read-only


"
7,LongBuffer,7,"LongBuffer put(int index, long x)",True,Absolute put method (optional operation).,"

put
public abstract LongBuffer put(int index,
                               long l)
Absolute put method  (optional operation).

  Writes the given long into this buffer at the given
 index. 

Parameters:
index - The index at which the long will be written
l - The long value to be written
Returns:
This buffer
Throws:
IndexOutOfBoundsException - If index is negative
          or not smaller than the buffer's limit
ReadOnlyBufferException - If this buffer is read-only


"
7,LongBuffer,8,LongBuffer compact(),True,Compacts this buffer (optional operation).,"

compact
public abstract LongBuffer compact()
Compacts this buffer  (optional operation).

  The longs between the buffer's current position and its limit,
 if any, are copied to the beginning of the buffer.  That is, the
 long at index p = position() is copied
 to index zero, the long at index p + 1 is copied
 to index one, and so forth until the long at index
 limit() - 1 is copied to index
 n = limit() - 1 - p.
 The buffer's position is then set to n+1 and its limit is set to
 its capacity.  The mark, if defined, is discarded.

  The buffer's position is set to the number of longs copied,
 rather than to zero, so that an invocation of this method can be
 followed immediately by an invocation of another relative put
 method. 

Returns:
This buffer
Throws:
ReadOnlyBufferException - If this buffer is read-only


"
7,LongBuffer,9,int remaining(),False,,NULL
7,LongBuffer,10,long get(),True,Relative get method.,"

get
public abstract long get()
Relative get method.  Reads the long at this buffer's
 current position, and then increments the position.

Returns:
The long at the buffer's current position
Throws:
BufferUnderflowException - If the buffer's current position is not smaller than its limit


"
7,LongBuffer,11,LongBuffer put(LongBuffer src),True,Relative bulk put method (optional operation).,"

put
public LongBuffer put(LongBuffer src)
Relative bulk put method  (optional operation).

  This method transfers the longs remaining in the given source
 buffer into this buffer.  If there are more longs remaining in the
 source buffer than in this buffer, that is, if
 src.remaining() > remaining(),
 then no longs are transferred and a BufferOverflowException is thrown.

  Otherwise, this method copies
 n = src.remaining() longs from the given
 buffer into this buffer, starting at each buffer's current position.
 The positions of both buffers are then incremented by n.

  In other words, an invocation of this method of the form
 dst.put(src) has exactly the same effect as the loop

 
     while (src.hasRemaining())
         dst.put(src.get()); 

 except that it first checks that there is sufficient space in this
 buffer and it is potentially much more efficient.

Parameters:
src - The source buffer from which longs are to be read;
         must not be this buffer
Returns:
This buffer
Throws:
BufferOverflowException - If there is insufficient space in this buffer
          for the remaining longs in the source buffer
IllegalArgumentException - If the source buffer is this buffer
ReadOnlyBufferException - If this buffer is read-only


"
7,LongBuffer,12,LongBuffer get(LongBuffer dst),False,,NULL
7,LongBuffer,13,LongBuffer slice(),True,Creates a new long buffer whose content is a shared subsequence of this buffer's content.,"

slice
public abstract LongBuffer slice()
Creates a new long buffer whose content is a shared subsequence of
 this buffer's content.

  The content of the new buffer will start at this buffer's current
 position.  Changes to this buffer's content will be visible in the new
 buffer, and vice versa; the two buffers' position, limit, and mark
 values will be independent.

  The new buffer's position will be zero, its capacity and its limit
 will be the number of longs remaining in this buffer, and its mark
 will be undefined.  The new buffer will be direct if, and only if, this
 buffer is direct, and it will be read-only if, and only if, this buffer
 is read-only.  

Returns:
The new long buffer


"
7,LongBuffer,14,"long get(long[] dst, int offset, int length)",False,,NULL
7,LongBuffer,15,"long set(long[] src, int offset, int length)",False,,NULL
7,LongBuffer,16,long load(),False,,NULL
7,LongBuffer,17,void load(ByteBuffer src),False,,NULL
7,LongBuffer,18,void get(ByteBuffer dst),False,,NULL
7,LongBuffer,19,"void get(ByteBuffer dst, int index)",False,,NULL
7,LongBuffer,20,void put(ByteBuffer src),False,,NULL
7,LongBuffer,21,"void put(ByteBuffer src, int index)",False,,NULL
7,LongBuffer,22,void compact(ByteBuffer dst),False,,NULL
7,LongBuffer,23,void clear(),False,,NULL
7,LongBuffer,24,boolean isReadOnly(),False,,NULL
7,LongBuffer,25,boolean isDirect(),True,Tells whether or not this long buffer is direct.,"

isDirect
public abstract boolean isDirect()
Tells whether or not this long buffer is direct.

Specified by:
isDirect in class Buffer
Returns:
true if, and only if, this buffer is direct


"
7,LongBuffer,26,"long get(ByteBuffer dst, int index)",False,,NULL
7,LongBuffer,27,"void put(ByteBuffer src, int index)",False,,NULL
7,LongBuffer,28,"void compact(ByteBuffer dst, int index)",False,,NULL
7,LongBuffer,29,"void clear(ByteBuffer dst, int index)",False,,NULL
7,LongBuffer,30,void mark(),False,,NULL
7,LongBuffer,31,void reset(),False,,NULL
7,LongBuffer,32,void rewind(),False,,NULL
7,LongBuffer,33,"long get(ByteBuffer dst, long position)",False,,NULL
7,LongBuffer,34,"void put(ByteBuffer src, long position)",False,,NULL
7,LongBuffer,35,"void compact(ByteBuffer dst, long position)",False,,NULL
7,LongBuffer,36,"void clear(ByteBuffer dst, long position)",False,,NULL
7,LongBuffer,37,void mark(long position),False,,NULL
7,LongBuffer,38,void reset(long position),False,,NULL
7,LongBuffer,39,void rewind(long position),False,,NULL
7,LongBuffer,40,"long get(ByteBuffer dst, long position, int length)",False,,NULL
7,LongBuffer,41,"void put(ByteBuffer src, long position, int length)",False,,NULL
7,LongBuffer,42,"void compact(ByteBuffer dst, long position, int length)",False,,NULL
7,LongBuffer,43,"void clear(ByteBuffer dst, long position, int length)",False,,NULL
7,LongBuffer,44,"void mark(long position, int limit)",False,,NULL
7,LongBuffer,45,"void reset(long position, int limit)",False,,NULL
7,LongBuffer,46,"void rewind(long position, int limit)",False,,NULL
7,LongBuffer,47,"long get(ByteBuffer dst, long position, int length, int offset)",False,,NULL
7,LongBuffer,48,"void put(ByteBuffer src, long position, int length, int offset)",False,,NULL
7,LongBuffer,49,"void compact(ByteBuffer dst, long position, int length, int offset)",False,,NULL
7,LongBuffer,50,"void clear(ByteBuffer dst, long position, int length, int offset)",False,,NULL
7,LongBuffer,51,"void mark(long position, int limit, int offset)",False,,NULL
7,LongBuffer,52,"void reset(long position, int limit, int offset)",False,,NULL
7,LongBuffer,53,"void rewind(long position, int limit, int offset)",False,,NULL
7,LongBuffer,54,"long get(ByteBuffer dst, long position, int length, int offset, int stride)",False,,NULL
7,LongBuffer,55,"void put(ByteBuffer src, long position, int length, int offset, int stride)",False,,NULL
7,LongBuffer,56,"void compact(ByteBuffer dst, long position, int length, int offset, int stride)",False,,NULL
7,LongBuffer,57,"void clear(ByteBuffer dst, long position, int length, int offset, int stride)",False,,NULL
7,LongBuffer,58,"void mark(long position, int limit, int offset, int stride)",False,,NULL
8,MappedByteBuffer,1,"MappedByteBuffer get(FileChannel.MapMode mode, long position, long size)",False,,NULL
8,MappedByteBuffer,2,"MappedByteBuffer load(FileChannel.MapMode mode, long position, long size)",False,,NULL
8,MappedByteBuffer,3,"MappedByteBuffer put(FileChannel.MapMode mode, long position, long size)",False,,NULL
8,MappedByteBuffer,4,"MappedByteBuffer force(FileChannel.MapMode mode, long position, long size)",False,,NULL
8,MappedByteBuffer,5,MappedByteBuffer clear(),False,,NULL
9,ShortBuffer,1,int capacity(),False,,NULL
9,ShortBuffer,2,ShortBuffer put(short x),True,Relative put method (optional operation).,"

put
public abstract ShortBuffer put(short s)
Relative put method  (optional operation).

  Writes the given short into this buffer at the current
 position, and then increments the position. 

Parameters:
s - The short to be written
Returns:
This buffer
Throws:
BufferOverflowException - If this buffer's current position is not smaller than its limit
ReadOnlyBufferException - If this buffer is read-only


"
9,ShortBuffer,3,short get(),True,Relative get method.,"

get
public abstract short get()
Relative get method.  Reads the short at this buffer's
 current position, and then increments the position.

Returns:
The short at the buffer's current position
Throws:
BufferUnderflowException - If the buffer's current position is not smaller than its limit


"
9,ShortBuffer,4,ShortBuffer flip(),False,,NULL
9,ShortBuffer,5,ShortBuffer rewind(),False,,NULL
