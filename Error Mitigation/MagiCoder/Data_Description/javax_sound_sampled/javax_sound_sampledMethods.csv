ClassName,Method,Return Type,Description,Full Description
AudioFileFormat,getByteLength(),int,Obtains the size in bytes of the entire audio file (not just its audio data).,"

getByteLength
public int getByteLength()
Obtains the size in bytes of the entire audio file (not just its audio data).

Returns:
the audio file length in bytes
See Also:
AudioSystem.NOT_SPECIFIED


"
AudioFileFormat,getFormat(),AudioFormat,Obtains the format of the audio data contained in the audio file.,"

getFormat
public AudioFormat getFormat()
Obtains the format of the audio data contained in the audio file.

Returns:
the audio data format


"
AudioFileFormat,getFrameLength(),int,"Obtains the length of the audio data contained in the file, expressed in sample frames.","

getFrameLength
public int getFrameLength()
Obtains the length of the audio data contained in the file, expressed in sample frames.

Returns:
the number of sample frames of audio data in the file
See Also:
AudioSystem.NOT_SPECIFIED


"
AudioFileFormat,getProperty(String key),Object,Obtain the property value specified by the key.,"

getProperty
public Object getProperty(String key)
Obtain the property value specified by the key.
 The concept of properties is further explained in
 the class description.

 If the specified property is not defined for a
 particular file format, this method returns
 null.

Parameters:
key - the key of the desired property
Returns:
the value of the property with the specified key,
         or null if the property does not exist.
Since:
1.5
See Also:
properties()


"
AudioFileFormat,getType(),AudioFileFormat.Type,"Obtains the audio file type, such as WAVE or AU.","

getType
public AudioFileFormat.Type getType()
Obtains the audio file type, such as WAVE or AU.

Returns:
the audio file type
See Also:
AudioFileFormat.Type.WAVE, 
AudioFileFormat.Type.AU, 
AudioFileFormat.Type.AIFF, 
AudioFileFormat.Type.AIFC, 
AudioFileFormat.Type.SND


"
AudioFileFormat,properties(),"Map<String,Object>",Obtain an unmodifiable map of properties.,"

properties
public Map<String,Object> properties()
Obtain an unmodifiable map of properties.
 The concept of properties is further explained in
 the class description.

Returns:
a Map<String,Object> object containing
         all properties. If no properties are recognized, an empty map is
         returned.
Since:
1.5
See Also:
getProperty(String)


"
AudioFileFormat,toString(),String,Provides a string representation of the file format.,"

toString
public String toString()
Provides a string representation of the file format.

Overrides:
toString in class Object
Returns:
the file format as a string


"
AudioFileFormat.Type,equals(Object obj),boolean,Finalizes the equals method,"

equals
public final boolean equals(Object obj)
Finalizes the equals method

Overrides:
equals in class Object
Parameters:
obj - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
AudioFileFormat.Type,getExtension(),String,Obtains the common file name extension for this file type.,"

getExtension
public String getExtension()
Obtains the common file name extension for this file type.

Returns:
file type extension


"
AudioFileFormat.Type,hashCode(),int,Finalizes the hashCode method,"

hashCode
public final int hashCode()
Finalizes the hashCode method

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
AudioFileFormat.Type,toString(),String,Provides the file type's name as the String representation of the file type.,"

toString
public final String toString()
Provides the file type's name as the String representation
 of the file type.

Overrides:
toString in class Object
Returns:
the file type's name


"
AudioFormat,getChannels(),int,Obtains the number of channels.,"

getChannels
public int getChannels()
Obtains the number of channels.
 When this AudioFormat is used for queries (e.g. AudioSystem.isConversionSupported) or capabilities (e.g. DataLine.Info.getFormats), a return value of
 AudioSystem.NOT_SPECIFIED means that any (positive) number of channels is
 acceptable.

Returns:
The number of channels (1 for mono, 2 for stereo, etc.),
 or AudioSystem.NOT_SPECIFIED
See Also:
AudioSystem.NOT_SPECIFIED


"
AudioFormat,getEncoding(),AudioFormat.Encoding,Obtains the type of encoding for sounds in this format.,"

getEncoding
public AudioFormat.Encoding getEncoding()
Obtains the type of encoding for sounds in this format.

Returns:
the encoding type
See Also:
AudioFormat.Encoding.PCM_SIGNED, 
AudioFormat.Encoding.PCM_UNSIGNED, 
AudioFormat.Encoding.ULAW, 
AudioFormat.Encoding.ALAW


"
AudioFormat,getFrameRate(),float,Obtains the frame rate in frames per second.,"

getFrameRate
public float getFrameRate()
Obtains the frame rate in frames per second.
 When this AudioFormat is used for queries (e.g. AudioSystem.isConversionSupported) or capabilities (e.g. DataLine.Info.getFormats), a frame rate of
 AudioSystem.NOT_SPECIFIED means that any frame rate is
 acceptable. AudioSystem.NOT_SPECIFIED is also returned when
 the frame rate is not defined for this audio format.

Returns:
the number of frames per second,
 or AudioSystem.NOT_SPECIFIED
See Also:
getSampleRate(), 
AudioSystem.NOT_SPECIFIED


"
AudioFormat,getFrameSize(),int,Obtains the frame size in bytes.,"

getFrameSize
public int getFrameSize()
Obtains the frame size in bytes.
 When this AudioFormat is used for queries (e.g. AudioSystem.isConversionSupported) or capabilities (e.g. DataLine.Info.getFormats), a frame size of
 AudioSystem.NOT_SPECIFIED means that any frame size is
 acceptable. AudioSystem.NOT_SPECIFIED is also returned when
 the frame size is not defined for this audio format.

Returns:
the number of bytes per frame,
 or AudioSystem.NOT_SPECIFIED
See Also:
getSampleSizeInBits(), 
AudioSystem.NOT_SPECIFIED


"
AudioFormat,getProperty(String key),Object,Obtain the property value specified by the key.,"

getProperty
public Object getProperty(String key)
Obtain the property value specified by the key.
 The concept of properties is further explained in
 the class description.

 If the specified property is not defined for a
 particular file format, this method returns
 null.

Parameters:
key - the key of the desired property
Returns:
the value of the property with the specified key,
         or null if the property does not exist.
Since:
1.5
See Also:
properties()


"
AudioFormat,getSampleRate(),float,Obtains the sample rate.,"

getSampleRate
public float getSampleRate()
Obtains the sample rate.
 For compressed formats, the return value is the sample rate of the uncompressed
 audio data.
 When this AudioFormat is used for queries (e.g. AudioSystem.isConversionSupported) or capabilities (e.g. DataLine.Info.getFormats), a sample rate of
 AudioSystem.NOT_SPECIFIED means that any sample rate is
 acceptable. AudioSystem.NOT_SPECIFIED is also returned when
 the sample rate is not defined for this audio format.

Returns:
the number of samples per second,
 or AudioSystem.NOT_SPECIFIED
See Also:
getFrameRate(), 
AudioSystem.NOT_SPECIFIED


"
AudioFormat,getSampleSizeInBits(),int,Obtains the size of a sample.,"

getSampleSizeInBits
public int getSampleSizeInBits()
Obtains the size of a sample.
 For compressed formats, the return value is the sample size of the
 uncompressed audio data.
 When this AudioFormat is used for queries (e.g. AudioSystem.isConversionSupported) or capabilities (e.g. DataLine.Info.getFormats), a sample size of
 AudioSystem.NOT_SPECIFIED means that any sample size is
 acceptable. AudioSystem.NOT_SPECIFIED is also returned when
 the sample size is not defined for this audio format.

Returns:
the number of bits in each sample,
 or AudioSystem.NOT_SPECIFIED
See Also:
getFrameSize(), 
AudioSystem.NOT_SPECIFIED


"
AudioFormat,isBigEndian(),boolean,Indicates whether the audio data is stored in big-endian or little-endian byte order.,"

isBigEndian
public boolean isBigEndian()
Indicates whether the audio data is stored in big-endian or little-endian
 byte order.  If the sample size is not more than one byte, the return value is
 irrelevant.

Returns:
true if the data is stored in big-endian byte order,
 false if little-endian


"
AudioFormat,matches(AudioFormat format),boolean,Indicates whether this format matches the one specified.,"

matches
public boolean matches(AudioFormat format)
Indicates whether this format matches the one specified.
 To match, two formats must have the same encoding,
 and consistent values of the number of channels, sample rate, sample size,
 frame rate, and frame size.
 The values of the property are consistent if they are equal
 or the specified format has the property value
 AudioSystem.NOT_SPECIFIED.
 The byte order (big-endian or little-endian) must be the same
 if the sample size is greater than one byte.

Parameters:
format - format to test for match
Returns:
true if this format matches the one specified,
         false otherwise.


"
AudioFormat,properties(),"Map<String,Object>",Obtain an unmodifiable map of properties.,"

properties
public Map<String,Object> properties()
Obtain an unmodifiable map of properties.
 The concept of properties is further explained in
 the class description.

Returns:
a Map<String,Object> object containing
         all properties. If no properties are recognized, an empty map is
         returned.
Since:
1.5
See Also:
getProperty(String)


"
AudioFormat,toString(),String,"Returns a string that describes the format, such as: ""PCM SIGNED 22050 Hz 16 bit mono big-endian"".","

toString
public String toString()
Returns a string that describes the format, such as:
 ""PCM SIGNED 22050 Hz 16 bit mono big-endian"".  The contents of the string
 may vary between implementations of Java Sound.

Overrides:
toString in class Object
Returns:
a string that describes the format parameters


"
AudioFormat.Encoding,equals(Object obj),boolean,Finalizes the equals method,"

equals
public final boolean equals(Object obj)
Finalizes the equals method

Overrides:
equals in class Object
Parameters:
obj - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
AudioFormat.Encoding,hashCode(),int,Finalizes the hashCode method,"

hashCode
public final int hashCode()
Finalizes the hashCode method

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
AudioFormat.Encoding,toString(),String,Provides the String representation of the encoding.,"

toString
public final String toString()
Provides the String representation of the encoding.  This String is
 the same name that was passed to the constructor.  For the predefined encodings, the name
 is similar to the encoding's variable (field) name.  For example, PCM_SIGNED.toString() returns
 the name ""pcm_signed"".

Overrides:
toString in class Object
Returns:
the encoding name


"
AudioInputStream,available(),int,Returns the maximum number of bytes that can be read (or skipped over) from this audio input stream without blocking.,"

available
public int available()
              throws IOException
Returns the maximum number of bytes that can be read (or skipped over) from this
 audio input stream without blocking.  This limit applies only to the next invocation of
 a read or skip method for this audio input stream; the limit
 can vary each time these methods are invoked.
 Depending on the underlying stream,an IOException may be thrown if this
 stream is closed.

Overrides:
available in class InputStream
Returns:
the number of bytes that can be read from this audio input stream without blocking
Throws:
IOException - if an input or output error occurs
See Also:
read(byte[], int, int), 
read(byte[]), 
read(), 
skip(long)


"
AudioInputStream,close(),void,Closes this audio input stream and releases any system resources associated with the stream.,"

close
public void close()
           throws IOException
Closes this audio input stream and releases any system resources associated
 with the stream.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class InputStream
Throws:
IOException - if an input or output error occurs


"
AudioInputStream,getFormat(),AudioFormat,Obtains the audio format of the sound data in this audio input stream.,"

getFormat
public AudioFormat getFormat()
Obtains the audio format of the sound data in this audio input stream.

Returns:
an audio format object describing this stream's format


"
AudioInputStream,getFrameLength(),long,"Obtains the length of the stream, expressed in sample frames rather than bytes.","

getFrameLength
public long getFrameLength()
Obtains the length of the stream, expressed in sample frames rather than bytes.

Returns:
the length in sample frames


"
AudioInputStream,mark(int readlimit),void,Marks the current position in this audio input stream.,"

mark
public void mark(int readlimit)
Marks the current position in this audio input stream.

Overrides:
mark in class InputStream
Parameters:
readlimit - the maximum number of bytes that can be read before
 the mark position becomes invalid.
See Also:
reset(), 
markSupported()


"
AudioInputStream,markSupported(),boolean,Tests whether this audio input stream supports the mark and reset methods.,"

markSupported
public boolean markSupported()
Tests whether this audio input stream supports the mark and
 reset methods.

Overrides:
markSupported in class InputStream
Returns:
true if this stream supports the mark
 and reset methods; false otherwise
See Also:
mark(int), 
reset()


"
AudioInputStream,read(),int,Reads the next byte of data from the audio input stream.,"

read
public int read()
         throws IOException
Reads the next byte of data from the audio input stream.  The audio input
 stream's frame size must be one byte, or an IOException
 will be thrown.

Specified by:
read in class InputStream
Returns:
the next byte of data, or -1 if the end of the stream is reached
Throws:
IOException - if an input or output error occurs
See Also:
read(byte[], int, int), 
read(byte[]), 



"
AudioInputStream,read(byte[] b),int,Reads some number of bytes from the audio input stream and stores them into the buffer array b.,"

read
public int read(byte[] b)
         throws IOException
Reads some number of bytes from the audio input stream and stores them into
 the buffer array b. The number of bytes actually read is
 returned as an integer. This method blocks until input data is
 available, the end of the stream is detected, or an exception is thrown.
 This method will always read an integral number of frames.
 If the length of the array is not an integral number
 of frames, a maximum of b.length - (b.length % frameSize)
  bytes will be read.

Overrides:
read in class InputStream
Parameters:
b - the buffer into which the data is read
Returns:
the total number of bytes read into the buffer, or -1 if there
 is no more data because the end of the stream has been reached
Throws:
IOException - if an input or output error occurs
See Also:
read(byte[], int, int), 
read(), 
available()


"
AudioInputStream,"read(byte[] b, int off, int len)",int,"Reads up to a specified maximum number of bytes of data from the audio stream, putting them into the given byte array.","

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads up to a specified maximum number of bytes of data from the audio
 stream, putting them into the given byte array.
 This method will always read an integral number of frames.
 If len does not specify an integral number
 of frames, a maximum of len - (len % frameSize)
  bytes will be read.

Overrides:
read in class InputStream
Parameters:
b - the buffer into which the data is read
off - the offset, from the beginning of array b, at which
 the data will be written
len - the maximum number of bytes to read
Returns:
the total number of bytes read into the buffer, or -1 if there
 is no more data because the end of the stream has been reached
Throws:
IOException - if an input or output error occurs
See Also:
read(byte[]), 
read(), 
skip(long), 
available()


"
AudioInputStream,reset(),void,Repositions this audio input stream to the position it had at the time its mark method was last invoked.,"

reset
public void reset()
           throws IOException
Repositions this audio input stream to the position it had at the time its
 mark method was last invoked.

Overrides:
reset in class InputStream
Throws:
IOException - if an input or output error occurs.
See Also:
mark(int), 
markSupported()


"
AudioInputStream,skip(long n),long,Skips over and discards a specified number of bytes from this audio input stream.,"

skip
public long skip(long n)
          throws IOException
Skips over and discards a specified number of bytes from this
 audio input stream.

Overrides:
skip in class InputStream
Parameters:
n - the requested number of bytes to be skipped
Returns:
the actual number of bytes skipped
Throws:
IOException - if an input or output error occurs
See Also:
read(), 
available()


"
AudioSystem,getAudioFileFormat(File file),static AudioFileFormat,Obtains the audio file format of the specified File.,"

getAudioFileFormat
public static AudioFileFormat getAudioFileFormat(File file)
                                          throws UnsupportedAudioFileException,
                                                 IOException
Obtains the audio file format of the specified File.  The File must
 point to valid audio file data.

Parameters:
file - the File from which file format information should be
 extracted
Returns:
an AudioFileFormat object describing the audio file format
Throws:
UnsupportedAudioFileException - if the File does not point to valid audio
 file data recognized by the system
IOException - if an I/O exception occurs


"
AudioSystem,getAudioFileFormat(InputStream stream),static AudioFileFormat,Obtains the audio file format of the provided input stream.,"

getAudioFileFormat
public static AudioFileFormat getAudioFileFormat(InputStream stream)
                                          throws UnsupportedAudioFileException,
                                                 IOException
Obtains the audio file format of the provided input stream.  The stream must
 point to valid audio file data.  The implementation of this method may require
 multiple parsers to examine the stream to determine whether they support it.
 These parsers must be able to mark the stream, read enough data to determine whether they
 support the stream, and, if not, reset the stream's read pointer to its original
 position.  If the input stream does not support these operations, this method may fail
 with an IOException.

Parameters:
stream - the input stream from which file format information should be
 extracted
Returns:
an AudioFileFormat object describing the stream's audio file format
Throws:
UnsupportedAudioFileException - if the stream does not point to valid audio
 file data recognized by the system
IOException - if an input/output exception occurs
See Also:
InputStream.markSupported(), 
InputStream.mark(int)


"
AudioSystem,getAudioFileFormat(URL url),static AudioFileFormat,Obtains the audio file format of the specified URL.,"

getAudioFileFormat
public static AudioFileFormat getAudioFileFormat(URL url)
                                          throws UnsupportedAudioFileException,
                                                 IOException
Obtains the audio file format of the specified URL.  The URL must
 point to valid audio file data.

Parameters:
url - the URL from which file format information should be
 extracted
Returns:
an AudioFileFormat object describing the audio file format
Throws:
UnsupportedAudioFileException - if the URL does not point to valid audio
 file data recognized by the system
IOException - if an input/output exception occurs


"
AudioSystem,getAudioFileTypes(),static AudioFileFormat.Type[],Obtains the file types for which file writing support is provided by the system.,"

getAudioFileTypes
public static AudioFileFormat.Type[] getAudioFileTypes()
Obtains the file types for which file writing support is provided by the system.

Returns:
array of unique file types.  If no file types are supported,
 an array of length 0 is returned.


"
AudioSystem,getAudioFileTypes(AudioInputStream stream),static AudioFileFormat.Type[],Obtains the file types that the system can write from the audio input stream specified.,"

getAudioFileTypes
public static AudioFileFormat.Type[] getAudioFileTypes(AudioInputStream stream)
Obtains the file types that the system can write from the
 audio input stream specified.

Parameters:
stream - the audio input stream for which audio file type support
 is queried
Returns:
array of file types.  If no file types are supported,
 an array of length 0 is returned.


"
AudioSystem,"getAudioInputStream(AudioFormat.Encoding targetEncoding, AudioInputStream sourceStream)",static AudioInputStream,"Obtains an audio input stream of the indicated encoding, by converting the provided audio input stream.","

getAudioInputStream
public static AudioInputStream getAudioInputStream(AudioFormat.Encoding targetEncoding,
                                                   AudioInputStream sourceStream)
Obtains an audio input stream of the indicated encoding, by converting the
 provided audio input stream.

Parameters:
targetEncoding - the desired encoding after conversion
sourceStream - the stream to be converted
Returns:
an audio input stream of the indicated encoding
Throws:
IllegalArgumentException - if the conversion is not supported
See Also:
getTargetEncodings(AudioFormat.Encoding), 
getTargetEncodings(AudioFormat), 
isConversionSupported(AudioFormat.Encoding, AudioFormat), 
getAudioInputStream(AudioFormat, AudioInputStream)


"
AudioSystem,"getAudioInputStream(AudioFormat targetFormat, AudioInputStream sourceStream)",static AudioInputStream,"Obtains an audio input stream of the indicated format, by converting the provided audio input stream.","

getAudioInputStream
public static AudioInputStream getAudioInputStream(AudioFormat targetFormat,
                                                   AudioInputStream sourceStream)
Obtains an audio input stream of the indicated format, by converting the
 provided audio input stream.

Parameters:
targetFormat - the desired audio format after conversion
sourceStream - the stream to be converted
Returns:
an audio input stream of the indicated format
Throws:
IllegalArgumentException - if the conversion is not supported
 #see #getTargetEncodings(AudioFormat)
See Also:
getTargetFormats(AudioFormat.Encoding, AudioFormat), 
isConversionSupported(AudioFormat, AudioFormat), 
getAudioInputStream(AudioFormat.Encoding, AudioInputStream)


"
AudioSystem,getAudioInputStream(File file),static AudioInputStream,Obtains an audio input stream from the provided File.,"

getAudioInputStream
public static AudioInputStream getAudioInputStream(File file)
                                            throws UnsupportedAudioFileException,
                                                   IOException
Obtains an audio input stream from the provided File.  The File must
 point to valid audio file data.

Parameters:
file - the File for which the AudioInputStream should be
 constructed
Returns:
an AudioInputStream object based on the audio file data pointed
 to by the File
Throws:
UnsupportedAudioFileException - if the File does not point to valid audio
 file data recognized by the system
IOException - if an I/O exception occurs


"
AudioSystem,getAudioInputStream(InputStream stream),static AudioInputStream,Obtains an audio input stream from the provided input stream.,"

getAudioInputStream
public static AudioInputStream getAudioInputStream(InputStream stream)
                                            throws UnsupportedAudioFileException,
                                                   IOException
Obtains an audio input stream from the provided input stream.  The stream must
 point to valid audio file data.  The implementation of this method may
 require multiple parsers to
 examine the stream to determine whether they support it.  These parsers must
 be able to mark the stream, read enough data to determine whether they
 support the stream, and, if not, reset the stream's read pointer to its original
 position.  If the input stream does not support these operation, this method may fail
 with an IOException.

Parameters:
stream - the input stream from which the AudioInputStream should be
 constructed
Returns:
an AudioInputStream object based on the audio file data contained
 in the input stream.
Throws:
UnsupportedAudioFileException - if the stream does not point to valid audio
 file data recognized by the system
IOException - if an I/O exception occurs
See Also:
InputStream.markSupported(), 
InputStream.mark(int)


"
AudioSystem,getAudioInputStream(URL url),static AudioInputStream,Obtains an audio input stream from the URL provided.,"

getAudioInputStream
public static AudioInputStream getAudioInputStream(URL url)
                                            throws UnsupportedAudioFileException,
                                                   IOException
Obtains an audio input stream from the URL provided.  The URL must
 point to valid audio file data.

Parameters:
url - the URL for which the AudioInputStream should be
 constructed
Returns:
an AudioInputStream object based on the audio file data pointed
 to by the URL
Throws:
UnsupportedAudioFileException - if the URL does not point to valid audio
 file data recognized by the system
IOException - if an I/O exception occurs


"
AudioSystem,getClip(),static Clip,Obtains a clip that can be used for playing back an audio file or an audio stream.,"

getClip
public static Clip getClip()
                    throws LineUnavailableException
Obtains a clip that can be used for playing back
 an audio file or an audio stream. The returned clip
 will be provided by the default system mixer, or,
 if not possible, by any other mixer installed in the
 system that supports a Clip
 object.

 The returned clip must be opened with the
 open(AudioFormat) or
 open(AudioInputStream) method.

 This is a high-level method that uses getMixer
 and getLine internally.

 If the system property
 javax.sound.sampled.Clip
 is defined or it is defined in the file ""sound.properties"",
 it is used to retrieve the default clip.
 For details, refer to the class description.

Returns:
the desired clip object
Throws:
LineUnavailableException - if a clip object
 is not available due to resource restrictions
SecurityException - if a clip object
 is not available due to security restrictions
IllegalArgumentException - if the system does not
 support at least one clip instance through any installed mixer
Since:
1.5
See Also:
getClip(Mixer.Info)


"
AudioSystem,getClip(Mixer.Info mixerInfo),static Clip,Obtains a clip from the specified mixer that can be used for playing back an audio file or an audio stream.,"

getClip
public static Clip getClip(Mixer.Info mixerInfo)
                    throws LineUnavailableException
Obtains a clip from the specified mixer that can be
 used for playing back an audio file or an audio stream.

 The returned clip must be opened with the
 open(AudioFormat) or
 open(AudioInputStream) method.

 This is a high-level method that uses getMixer
 and getLine internally.

Parameters:
mixerInfo - a Mixer.Info object representing the
 desired mixer, or null for the system default mixer
Returns:
a clip object from the specified mixer
Throws:
LineUnavailableException - if a clip
 is not available from this mixer due to resource restrictions
SecurityException - if a clip
 is not available from this mixer due to security restrictions
IllegalArgumentException - if the system does not
 support at least one clip through the specified mixer
Since:
1.5
See Also:
getClip()


"
AudioSystem,getLine(Line.Info info),static Line,Obtains a line that matches the description in the specified Line.Info object.,"

getLine
public static Line getLine(Line.Info info)
                    throws LineUnavailableException
Obtains a line that matches the description in the specified
 Line.Info object.

 If a DataLine is requested, and info
 is an instance of DataLine.Info specifying at least
 one fully qualified audio format, the last one
 will be used as the default format of the returned
 DataLine.

 If system properties
 javax.sound.sampled.Clip,
 javax.sound.sampled.Port,
 javax.sound.sampled.SourceDataLine and
 javax.sound.sampled.TargetDataLine are defined
 or they are defined in the file ""sound.properties"",
 they are used to retrieve default lines.
 For details, refer to the class description.

 If the respective property is not set, or the mixer
 requested in the property is not installed or does not provide the
 requested line, all installed mixers are queried for the
 requested line type. A Line will be returned from the first mixer
 providing the requested line type.

Parameters:
info - a Line.Info object describing the desired kind of line
Returns:
a line of the requested kind
Throws:
LineUnavailableException - if a matching line
 is not available due to resource restrictions
SecurityException - if a matching line
 is not available due to security restrictions
IllegalArgumentException - if the system does not
 support at least one line matching the specified
 Line.Info object
 through any installed mixer


"
AudioSystem,getMixer(Mixer.Info info),static Mixer,Obtains the requested audio mixer.,"

getMixer
public static Mixer getMixer(Mixer.Info info)
Obtains the requested audio mixer.

Parameters:
info - a Mixer.Info object representing the desired
 mixer, or null for the system default mixer
Returns:
the requested mixer
Throws:
SecurityException - if the requested mixer
 is unavailable because of security restrictions
IllegalArgumentException - if the info object does not represent
 a mixer installed on the system
See Also:
getMixerInfo()


"
AudioSystem,getMixerInfo(),static Mixer.Info[],Obtains an array of mixer info objects that represents the set of audio mixers that are currently installed on the system.,"

getMixerInfo
public static Mixer.Info[] getMixerInfo()
Obtains an array of mixer info objects that represents
 the set of audio mixers that are currently installed on the system.

Returns:
an array of info objects for the currently installed mixers.  If no mixers
 are available on the system, an array of length 0 is returned.
See Also:
getMixer(javax.sound.sampled.Mixer.Info)


"
AudioSystem,getSourceDataLine(AudioFormat format),static SourceDataLine,Obtains a source data line that can be used for playing back audio data in the format specified by the AudioFormat object.,"

getSourceDataLine
public static SourceDataLine getSourceDataLine(AudioFormat format)
                                        throws LineUnavailableException
Obtains a source data line that can be used for playing back
 audio data in the format specified by the
 AudioFormat object. The returned line
 will be provided by the default system mixer, or,
 if not possible, by any other mixer installed in the
 system that supports a matching
 SourceDataLine object.

 The returned line should be opened with the
 open(AudioFormat) or
 open(AudioFormat, int) method.

 This is a high-level method that uses getMixer
 and getLine internally.

 The returned SourceDataLine's default
 audio format will be initialized with format.

 If the system property
 javax.sound.sampled.SourceDataLine
 is defined or it is defined in the file ""sound.properties"",
 it is used to retrieve the default source data line.
 For details, refer to the class description.

Parameters:
format - an AudioFormat object specifying
        the supported audio format of the returned line,
        or null for any audio format
Returns:
the desired SourceDataLine object
Throws:
LineUnavailableException - if a matching source data line
         is not available due to resource restrictions
SecurityException - if a matching source data line
         is not available due to security restrictions
IllegalArgumentException - if the system does not
         support at least one source data line supporting the
         specified audio format through any installed mixer
Since:
1.5
See Also:
getSourceDataLine(AudioFormat, Mixer.Info)


"
AudioSystem,"getSourceDataLine(AudioFormat format, Mixer.Info mixerinfo)",static SourceDataLine,"Obtains a source data line that can be used for playing back audio data in the format specified by the AudioFormat object, provided by the mixer specified by the Mixer.Info object.","

getSourceDataLine
public static SourceDataLine getSourceDataLine(AudioFormat format,
                                               Mixer.Info mixerinfo)
                                        throws LineUnavailableException
Obtains a source data line that can be used for playing back
 audio data in the format specified by the
 AudioFormat object, provided by the mixer
 specified by the Mixer.Info object.

 The returned line should be opened with the
 open(AudioFormat) or
 open(AudioFormat, int) method.

 This is a high-level method that uses getMixer
 and getLine internally.

 The returned SourceDataLine's default
 audio format will be initialized with format.

Parameters:
format - an AudioFormat object specifying
        the supported audio format of the returned line,
        or null for any audio format
mixerinfo - a Mixer.Info object representing
        the desired mixer, or null for the system
        default mixer
Returns:
the desired SourceDataLine object
Throws:
LineUnavailableException - if a matching source data
         line is not available from the specified mixer due
         to resource restrictions
SecurityException - if a matching source data line
         is not available from the specified mixer due to
         security restrictions
IllegalArgumentException - if the specified mixer does
         not support at least one source data line supporting
         the specified audio format
Since:
1.5
See Also:
getSourceDataLine(AudioFormat)


"
AudioSystem,getSourceLineInfo(Line.Info info),static Line.Info[],Obtains information about all source lines of a particular type that are supported by the installed mixers.,"

getSourceLineInfo
public static Line.Info[] getSourceLineInfo(Line.Info info)
Obtains information about all source lines of a particular type that are supported
 by the installed mixers.

Parameters:
info - a Line.Info object that specifies the kind of
 lines about which information is requested
Returns:
an array of Line.Info objects describing source lines matching
 the type requested.  If no matching source lines are supported, an array of length 0
 is returned.
See Also:
Mixer.getSourceLineInfo(Line.Info)


"
AudioSystem,getTargetDataLine(AudioFormat format),static TargetDataLine,Obtains a target data line that can be used for recording audio data in the format specified by the AudioFormat object.,"

getTargetDataLine
public static TargetDataLine getTargetDataLine(AudioFormat format)
                                        throws LineUnavailableException
Obtains a target data line that can be used for recording
 audio data in the format specified by the
 AudioFormat object. The returned line
 will be provided by the default system mixer, or,
 if not possible, by any other mixer installed in the
 system that supports a matching
 TargetDataLine object.

 The returned line should be opened with the
 open(AudioFormat) or
 open(AudioFormat, int) method.

 This is a high-level method that uses getMixer
 and getLine internally.

 The returned TargetDataLine's default
 audio format will be initialized with format.

 If the system property
 javax.sound.sampled.TargetDataLine
 is defined or it is defined in the file ""sound.properties"",
 it is used to retrieve the default target data line.
 For details, refer to the class description.

Parameters:
format - an AudioFormat object specifying
        the supported audio format of the returned line,
        or null for any audio format
Returns:
the desired TargetDataLine object
Throws:
LineUnavailableException - if a matching target data line
         is not available due to resource restrictions
SecurityException - if a matching target data line
         is not available due to security restrictions
IllegalArgumentException - if the system does not
         support at least one target data line supporting the
         specified audio format through any installed mixer
Since:
1.5
See Also:
getTargetDataLine(AudioFormat, Mixer.Info), 
AudioPermission


"
AudioSystem,"getTargetDataLine(AudioFormat format, Mixer.Info mixerinfo)",static TargetDataLine,"Obtains a target data line that can be used for recording audio data in the format specified by the AudioFormat object, provided by the mixer specified by the Mixer.Info object.","

getTargetDataLine
public static TargetDataLine getTargetDataLine(AudioFormat format,
                                               Mixer.Info mixerinfo)
                                        throws LineUnavailableException
Obtains a target data line that can be used for recording
 audio data in the format specified by the
 AudioFormat object, provided by the mixer
 specified by the Mixer.Info object.

 The returned line should be opened with the
 open(AudioFormat) or
 open(AudioFormat, int) method.

 This is a high-level method that uses getMixer
 and getLine internally.

 The returned TargetDataLine's default
 audio format will be initialized with format.

Parameters:
format - an AudioFormat object specifying
        the supported audio format of the returned line,
        or null for any audio format
mixerinfo - a Mixer.Info object representing the
        desired mixer, or null for the system default mixer
Returns:
the desired TargetDataLine object
Throws:
LineUnavailableException - if a matching target data
         line is not available from the specified mixer due
         to resource restrictions
SecurityException - if a matching target data line
         is not available from the specified mixer due to
         security restrictions
IllegalArgumentException - if the specified mixer does
         not support at least one target data line supporting
         the specified audio format
Since:
1.5
See Also:
getTargetDataLine(AudioFormat), 
AudioPermission


"
AudioSystem,getTargetEncodings(AudioFormat.Encoding sourceEncoding),static AudioFormat.Encoding[],Obtains the encodings that the system can obtain from an audio input stream with the specified encoding using the set of installed format converters.,"

getTargetEncodings
public static AudioFormat.Encoding[] getTargetEncodings(AudioFormat.Encoding sourceEncoding)
Obtains the encodings that the system can obtain from an
 audio input stream with the specified encoding using the set
 of installed format converters.

Parameters:
sourceEncoding - the encoding for which conversion support
 is queried
Returns:
array of encodings.  If sourceEncodingis not supported,
 an array of length 0 is returned. Otherwise, the array will have a length
 of at least 1, representing sourceEncoding (no conversion).


"
AudioSystem,getTargetEncodings(AudioFormat sourceFormat),static AudioFormat.Encoding[],Obtains the encodings that the system can obtain from an audio input stream with the specified format using the set of installed format converters.,"

getTargetEncodings
public static AudioFormat.Encoding[] getTargetEncodings(AudioFormat sourceFormat)
Obtains the encodings that the system can obtain from an
 audio input stream with the specified format using the set
 of installed format converters.

Parameters:
sourceFormat - the audio format for which conversion
 is queried
Returns:
array of encodings. If sourceFormatis not supported,
 an array of length 0 is returned. Otherwise, the array will have a length
 of at least 1, representing the encoding of sourceFormat (no conversion).


"
AudioSystem,"getTargetFormats(AudioFormat.Encoding targetEncoding, AudioFormat sourceFormat)",static AudioFormat[],Obtains the formats that have a particular encoding and that the system can obtain from a stream of the specified format using the set of installed format converters.,"

getTargetFormats
public static AudioFormat[] getTargetFormats(AudioFormat.Encoding targetEncoding,
                                             AudioFormat sourceFormat)
Obtains the formats that have a particular encoding and that the system can
 obtain from a stream of the specified format using the set of
 installed format converters.

Parameters:
targetEncoding - the desired encoding after conversion
sourceFormat - the audio format before conversion
Returns:
array of formats.  If no formats of the specified
 encoding are supported, an array of length 0 is returned.


"
AudioSystem,getTargetLineInfo(Line.Info info),static Line.Info[],Obtains information about all target lines of a particular type that are supported by the installed mixers.,"

getTargetLineInfo
public static Line.Info[] getTargetLineInfo(Line.Info info)
Obtains information about all target lines of a particular type that are supported
 by the installed mixers.

Parameters:
info - a Line.Info object that specifies the kind of
 lines about which information is requested
Returns:
an array of Line.Info objects describing target lines matching
 the type requested.  If no matching target lines are supported, an array of length 0
 is returned.
See Also:
Mixer.getTargetLineInfo(Line.Info)


"
AudioSystem,"isConversionSupported(AudioFormat.Encoding targetEncoding, AudioFormat sourceFormat)",static boolean,Indicates whether an audio input stream of the specified encoding can be obtained from an audio input stream that has the specified format.,"

isConversionSupported
public static boolean isConversionSupported(AudioFormat.Encoding targetEncoding,
                                            AudioFormat sourceFormat)
Indicates whether an audio input stream of the specified encoding
 can be obtained from an audio input stream that has the specified
 format.

Parameters:
targetEncoding - the desired encoding after conversion
sourceFormat - the audio format before conversion
Returns:
true if the conversion is supported,
 otherwise false


"
AudioSystem,"isConversionSupported(AudioFormat targetFormat, AudioFormat sourceFormat)",static boolean,Indicates whether an audio input stream of a specified format can be obtained from an audio input stream of another specified format.,"

isConversionSupported
public static boolean isConversionSupported(AudioFormat targetFormat,
                                            AudioFormat sourceFormat)
Indicates whether an audio input stream of a specified format
 can be obtained from an audio input stream of another specified format.

Parameters:
targetFormat - the desired audio format after conversion
sourceFormat - the audio format before conversion
Returns:
true if the conversion is supported,
 otherwise false


"
AudioSystem,isFileTypeSupported(AudioFileFormat.Type fileType),static boolean,Indicates whether file writing support for the specified file type is provided by the system.,"

isFileTypeSupported
public static boolean isFileTypeSupported(AudioFileFormat.Type fileType)
Indicates whether file writing support for the specified file type is provided
 by the system.

Parameters:
fileType - the file type for which write capabilities are queried
Returns:
true if the file type is supported,
 otherwise false


"
AudioSystem,"isFileTypeSupported(AudioFileFormat.Type fileType, AudioInputStream stream)",static boolean,Indicates whether an audio file of the specified file type can be written from the indicated audio input stream.,"

isFileTypeSupported
public static boolean isFileTypeSupported(AudioFileFormat.Type fileType,
                                          AudioInputStream stream)
Indicates whether an audio file of the specified file type can be written
 from the indicated audio input stream.

Parameters:
fileType - the file type for which write capabilities are queried
stream - the stream for which file-writing support is queried
Returns:
true if the file type is supported for this audio input stream,
 otherwise false


"
AudioSystem,isLineSupported(Line.Info info),static boolean,Indicates whether the system supports any lines that match the specified Line.Info object.,"

isLineSupported
public static boolean isLineSupported(Line.Info info)
Indicates whether the system supports any lines that match
 the specified Line.Info object.  A line is supported if
 any installed mixer supports it.

Parameters:
info - a Line.Info object describing the line for which support is queried
Returns:
true if at least one matching line is
 supported, otherwise false
See Also:
Mixer.isLineSupported(Line.Info)


"
AudioSystem,"write(AudioInputStream stream, AudioFileFormat.Type fileType, File out)",static int,Writes a stream of bytes representing an audio file of the specified file type to the external file provided.,"

write
public static int write(AudioInputStream stream,
                        AudioFileFormat.Type fileType,
                        File out)
                 throws IOException
Writes a stream of bytes representing an audio file of the specified file type
 to the external file provided.

Parameters:
stream - the audio input stream containing audio data to be
 written to the file
fileType - the kind of audio file to write
out - the external file to which the file data should be written
Returns:
the number of bytes written to the file
Throws:
IOException - if an I/O exception occurs
IllegalArgumentException - if the file type is not supported by
 the system
See Also:
isFileTypeSupported(javax.sound.sampled.AudioFileFormat.Type), 
getAudioFileTypes()


"
AudioSystem,"write(AudioInputStream stream, AudioFileFormat.Type fileType, OutputStream out)",static int,Writes a stream of bytes representing an audio file of the specified file type to the output stream provided.,"

write
public static int write(AudioInputStream stream,
                        AudioFileFormat.Type fileType,
                        OutputStream out)
                 throws IOException
Writes a stream of bytes representing an audio file of the specified file type
 to the output stream provided.  Some file types require that
 the length be written into the file header; such files cannot be written from
 start to finish unless the length is known in advance.  An attempt
 to write a file of such a type will fail with an IOException if the length in
 the audio file type is AudioSystem.NOT_SPECIFIED.

Parameters:
stream - the audio input stream containing audio data to be
 written to the file
fileType - the kind of audio file to write
out - the stream to which the file data should be written
Returns:
the number of bytes written to the output stream
Throws:
IOException - if an input/output exception occurs
IllegalArgumentException - if the file type is not supported by
 the system
See Also:
isFileTypeSupported(javax.sound.sampled.AudioFileFormat.Type), 
getAudioFileTypes()


"
BooleanControl,getStateLabel(boolean state),String,Obtains the label for the specified state.,"

getStateLabel
public String getStateLabel(boolean state)
Obtains the label for the specified state.

Parameters:
state - the state whose label will be returned
Returns:
the label for the specified state, such as ""true"" or ""on""
 for true, or ""false"" or ""off"" for false.


"
BooleanControl,getValue(),boolean,Obtains this control's current value.,"

getValue
public boolean getValue()
Obtains this control's current value.

Returns:
current value.


"
BooleanControl,setValue(boolean value),void,Sets the current value for the control.,"

setValue
public void setValue(boolean value)
Sets the current value for the control.  The default
 implementation simply sets the value as indicated.
 Some controls require that their line be open before they can be affected
 by setting a value.

Parameters:
value - desired new value.


"
BooleanControl,toString(),String,Provides a string representation of the control,"

toString
public String toString()
Provides a string representation of the control

Overrides:
toString in class Control
Returns:
a string description


"
CompoundControl,getMemberControls(),Control[],Returns the set of member controls that comprise the compound control.,"

getMemberControls
public Control[] getMemberControls()
Returns the set of member controls that comprise the compound control.

Returns:
the set of member controls.


"
CompoundControl,toString(),String,Provides a string representation of the control,"

toString
public String toString()
Provides a string representation of the control

Overrides:
toString in class Control
Returns:
a string description


"
Control,getType(),Control.Type,Obtains the control's type.,"

getType
public Control.Type getType()
Obtains the control's type.

Returns:
the control's type.


"
Control,toString(),String,Obtains a String describing the control type and its current state.,"

toString
public String toString()
Obtains a String describing the control type and its current state.

Overrides:
toString in class Object
Returns:
a String representation of the Control.


"
Control.Type,equals(Object obj),boolean,Finalizes the equals method,"

equals
public final boolean equals(Object obj)
Finalizes the equals method

Overrides:
equals in class Object
Parameters:
obj - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
Control.Type,hashCode(),int,Finalizes the hashCode method,"

hashCode
public final int hashCode()
Finalizes the hashCode method

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Control.Type,toString(),String,Provides the String representation of the control type.,"

toString
public final String toString()
Provides the String representation of the control type.  This String is
 the same name that was passed to the constructor.

Overrides:
toString in class Object
Returns:
the control type name


"
DataLine.Info,getFormats(),AudioFormat[],Obtains a set of audio formats supported by the data line.,"

getFormats
public AudioFormat[] getFormats()
Obtains a set of audio formats supported by the data line.
 Note that isFormatSupported(AudioFormat) might return
 true for certain additional formats that are missing from
 the set returned by getFormats().  The reverse is not
 the case: isFormatSupported(AudioFormat) is guaranteed to return
 true for all formats returned by getFormats().

 Some fields in the AudioFormat instances can be set to
 NOT_SPECIFIED
 if that field does not apply to the format,
 or if the format supports a wide range of values for that field.
 For example, a multi-channel device supporting up to
 64 channels, could set the channel field in the
 AudioFormat instances returned by this
 method to NOT_SPECIFIED.

Returns:
a set of supported audio formats.
See Also:
isFormatSupported(AudioFormat)


"
DataLine.Info,getMaxBufferSize(),int,Obtains the maximum buffer size supported by the data line.,"

getMaxBufferSize
public int getMaxBufferSize()
Obtains the maximum buffer size supported by the data line.

Returns:
maximum buffer size in bytes, or AudioSystem.NOT_SPECIFIED


"
DataLine.Info,getMinBufferSize(),int,Obtains the minimum buffer size supported by the data line.,"

getMinBufferSize
public int getMinBufferSize()
Obtains the minimum buffer size supported by the data line.

Returns:
minimum buffer size in bytes, or AudioSystem.NOT_SPECIFIED


"
DataLine.Info,isFormatSupported(AudioFormat format),boolean,Indicates whether this data line supports a particular audio format.,"

isFormatSupported
public boolean isFormatSupported(AudioFormat format)
Indicates whether this data line supports a particular audio format.
 The default implementation of this method simply returns true if
 the specified format matches any of the supported formats.

Parameters:
format - the audio format for which support is queried.
Returns:
true if the format is supported, otherwise false
See Also:
getFormats(), 
AudioFormat.matches(javax.sound.sampled.AudioFormat)


"
DataLine.Info,matches(Line.Info info),boolean,Determines whether the specified info object matches this one.,"

matches
public boolean matches(Line.Info info)
Determines whether the specified info object matches this one.
 To match, the superclass match requirements must be met.  In
 addition, this object's minimum buffer size must be at least as
 large as that of the object specified, its maximum buffer size must
 be at most as large as that of the object specified, and all of its
 formats must match formats supported by the object specified.

Overrides:
matches in class Line.Info
Parameters:
info - the info object which is being compared to this one
Returns:
true if this object matches the one specified,
 otherwise false.


"
DataLine.Info,toString(),String,Obtains a textual description of the data line info.,"

toString
public String toString()
Obtains a textual description of the data line info.

Overrides:
toString in class Line.Info
Returns:
a string description


"
EnumControl,getValue(),Object,Obtains this control's current value.,"

getValue
public Object getValue()
Obtains this control's current value.

Returns:
the current value


"
EnumControl,getValues(),Object[],Returns the set of possible values for this control.,"

getValues
public Object[] getValues()
Returns the set of possible values for this control.

Returns:
the set of possible values


"
EnumControl,setValue(Object value),void,Sets the current value for the control.,"

setValue
public void setValue(Object value)
Sets the current value for the control.  The default implementation
 simply sets the value as indicated.  If the value indicated is not
 supported, an IllegalArgumentException is thrown.
 Some controls require that their line be open before they can be affected
 by setting a value.

Parameters:
value - the desired new value
Throws:
IllegalArgumentException - if the value indicated does not fall
 within the allowable range


"
EnumControl,toString(),String,Provides a string representation of the control.,"

toString
public String toString()
Provides a string representation of the control.

Overrides:
toString in class Control
Returns:
a string description


"
FloatControl,getMaximum(),float,Obtains the maximum value permitted.,"

getMaximum
public float getMaximum()
Obtains the maximum value permitted.

Returns:
the maximum allowable value


"
FloatControl,getMaxLabel(),String,"Obtains the label for the maximum value, such as ""Right"" or ""Full.""","

getMaxLabel
public String getMaxLabel()
Obtains the label for the maximum value, such as ""Right"" or ""Full.""

Returns:
the maximum value label, or a zero-length string if no label      * has been set


"
FloatControl,getMidLabel(),String,"Obtains the label for the mid-point value, such as ""Center"" or ""Default.""","

getMidLabel
public String getMidLabel()
Obtains the label for the mid-point value, such as ""Center"" or ""Default.""

Returns:
the mid-point value label, or a zero-length string if no label    * has been set


"
FloatControl,getMinimum(),float,Obtains the minimum value permitted.,"

getMinimum
public float getMinimum()
Obtains the minimum value permitted.

Returns:
the minimum allowable value


"
FloatControl,getMinLabel(),String,"Obtains the label for the minimum value, such as ""Left"" or ""Off.""","

getMinLabel
public String getMinLabel()
Obtains the label for the minimum value, such as ""Left"" or ""Off.""

Returns:
the minimum value label, or a zero-length string if no label      * has been set


"
FloatControl,getPrecision(),float,"Obtains the resolution or granularity of the control, in the units that the control measures.","

getPrecision
public float getPrecision()
Obtains the resolution or granularity of the control, in the units
 that the control measures.
 The precision is the size of the increment between discrete valid values
 for this control, over the set of supported floating-point values.

Returns:
the control's precision


"
FloatControl,getUnits(),String,"Obtains the label for the units in which the control's values are expressed, such as ""dB"" or ""frames per second.""","

getUnits
public String getUnits()
Obtains the label for the units in which the control's values are expressed,
 such as ""dB"" or ""frames per second.""

Returns:
the units label, or a zero-length string if no label


"
FloatControl,getUpdatePeriod(),int,"Obtains the smallest time interval, in microseconds, over which the control's value can change during a shift.","

getUpdatePeriod
public int getUpdatePeriod()
Obtains the smallest time interval, in microseconds, over which the control's value can
 change during a shift.  The update period is the inverse of the frequency with which
 the control updates its value during a shift.  If the implementation does not support value shifting over
 time, it should set the control's value to the final value immediately
 and return -1 from this method.

Returns:
update period in microseconds, or -1 if shifting over time is unsupported
See Also:
shift(float, float, int)


"
FloatControl,getValue(),float,Obtains this control's current value.,"

getValue
public float getValue()
Obtains this control's current value.

Returns:
the current value


"
FloatControl,setValue(float newValue),void,Sets the current value for the control.,"

setValue
public void setValue(float newValue)
Sets the current value for the control.  The default implementation
 simply sets the value as indicated.  If the value indicated is greater
 than the maximum value, or smaller than the minimum value, an
 IllegalArgumentException is thrown.
 Some controls require that their line be open before they can be affected
 by setting a value.

Parameters:
newValue - desired new value
Throws:
IllegalArgumentException - if the value indicated does not fall
 within the allowable range


"
FloatControl,"shift(float from, float to, int microseconds)",void,"Changes the control value from the initial value to the final value linearly over the specified time period, specified in microseconds.","

shift
public void shift(float from,
                  float to,
                  int microseconds)
Changes the control value from the initial value to the final
 value linearly over the specified time period, specified in microseconds.
 This method returns without blocking; it does not wait for the shift
 to complete.  An implementation should complete the operation within the time
 specified.  The default implementation simply changes the value
 to the final value immediately.

Parameters:
from - initial value at the beginning of the shift
to - final value after the shift
microseconds - maximum duration of the shift in microseconds
Throws:
IllegalArgumentException - if either from or to
     value does not fall within the allowable range
See Also:
getUpdatePeriod()


"
FloatControl,toString(),String,Provides a string representation of the control,"

toString
public String toString()
Provides a string representation of the control

Overrides:
toString in class Control
Returns:
a string description


"
Line.Info,getLineClass(),Class<?>,Obtains the class of the line that this Line.Info object describes.,"

getLineClass
public Class<?> getLineClass()
Obtains the class of the line that this Line.Info object describes.

Returns:
the described line's class


"
Line.Info,matches(Line.Info info),boolean,Indicates whether the specified info object matches this one.,"

matches
public boolean matches(Line.Info info)
Indicates whether the specified info object matches this one.
 To match, the specified object must be identical to or
 a special case of this one.  The specified info object
 must be either an instance of the same class as this one,
 or an instance of a sub-type of this one.  In addition, the
 attributes of the specified object must be compatible with the
 capabilities of this one.  Specifically, the routing configuration
 for the specified info object must be compatible with that of this
 one.
 Subclasses may add other criteria to determine whether the two objects
 match.

Parameters:
info - the info object which is being compared to this one
Returns:
true if the specified object matches this one,
 false otherwise


"
Line.Info,toString(),String,Obtains a textual description of the line info.,"

toString
public String toString()
Obtains a textual description of the line info.

Overrides:
toString in class Object
Returns:
a string description


"
LineEvent,getFramePosition(),long,"Obtains the position in the line's audio data when the event occurred, expressed in sample frames.","

getFramePosition
public final long getFramePosition()
Obtains the position in the line's audio data when the event occurred, expressed in sample frames.
 For example, if a source line had already played back 14 sample frames at the time it was
 paused, the pause event would report the line's position as 14.  The next frame to be processed
 would be frame number 14 using zero-based numbering, or 15 using one-based numbering.
 
 Note that this field is relevant only to certain events generated by
 data lines, such as START and STOP.  For
 events generated by lines that do not count sample frames, and for any
 other events for which this value is not known, the position value
 should be AudioSystem.NOT_SPECIFIED.

Returns:
the line's position as a sample frame number


"
LineEvent,getLine(),Line,Obtains the audio line that is the source of this event.,"

getLine
public final Line getLine()
Obtains the audio line that is the source of this event.

Returns:
the line responsible for this event


"
LineEvent,getType(),LineEvent.Type,Obtains the event's type.,"

getType
public final LineEvent.Type getType()
Obtains the event's type.

Returns:
this event's type (LineEvent.Type.OPEN, LineEvent.Type.CLOSE,
 LineEvent.Type.START, or LineEvent.Type.STOP)


"
LineEvent,toString(),String,Obtains a string representation of the event.,"

toString
public String toString()
Obtains a string representation of the event.  The contents of the string may vary
 between implementations of Java Sound.

Overrides:
toString in class EventObject
Returns:
a string describing the event.


"
LineEvent.Type,equals(Object obj),boolean,"Indicates whether the specified object is equal to this event type, returning true if the objects are identical.","

equals
public final boolean equals(Object obj)
Indicates whether the specified object is equal to this event type,
 returning true if the objects are identical.

Overrides:
equals in class Object
Parameters:
obj - the reference object with which to compare
Returns:
true if this event type is the same as
 obj; false otherwise
See Also:
Object.hashCode(), 
HashMap


"
LineEvent.Type,hashCode(),int,Finalizes the hashcode method.,"

hashCode
public final int hashCode()
Finalizes the hashcode method.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
LineEvent.Type,toString(),String,Returns the type name as the string representation.,"

toString
public String toString()
Returns the type name as the string representation.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
Mixer.Info,equals(Object obj),boolean,"Indicates whether two info objects are equal, returning true if they are identical.","

equals
public final boolean equals(Object obj)
Indicates whether two info objects are equal, returning true if
 they are identical.

Overrides:
equals in class Object
Parameters:
obj - the reference object with which to compare this info
 object
Returns:
true if this info object is the same as the
 obj argument; false otherwise
See Also:
Object.hashCode(), 
HashMap


"
Mixer.Info,getDescription(),String,Obtains the description of the mixer.,"

getDescription
public final String getDescription()
Obtains the description of the mixer.

Returns:
a textual description of the mixer


"
Mixer.Info,getName(),String,Obtains the name of the mixer.,"

getName
public final String getName()
Obtains the name of the mixer.

Returns:
a string that names the mixer


"
Mixer.Info,getVendor(),String,Obtains the vendor of the mixer.,"

getVendor
public final String getVendor()
Obtains the vendor of the mixer.

Returns:
a string that names the mixer's vendor


"
Mixer.Info,getVersion(),String,Obtains the version of the mixer.,"

getVersion
public final String getVersion()
Obtains the version of the mixer.

Returns:
textual version information for the mixer


"
Mixer.Info,hashCode(),int,Finalizes the hashcode method.,"

hashCode
public final int hashCode()
Finalizes the hashcode method.

Overrides:
hashCode in class Object
Returns:
the hashcode for this object
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Mixer.Info,toString(),String,Provides a string representation of the mixer info.,"

toString
public final String toString()
Provides a string representation of the mixer info.

Overrides:
toString in class Object
Returns:
a string describing the info object


"
Port.Info,equals(Object obj),boolean,Finalizes the equals method,"

equals
public final boolean equals(Object obj)
Finalizes the equals method

Overrides:
equals in class Object
Parameters:
obj - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
Port.Info,getName(),String,Obtains the name of the port.,"

getName
public String getName()
Obtains the name of the port.

Returns:
the string that names the port


"
Port.Info,hashCode(),int,Finalizes the hashCode method,"

hashCode
public final int hashCode()
Finalizes the hashCode method

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Port.Info,isSource(),boolean,Indicates whether the port is a source or a target for its mixer.,"

isSource
public boolean isSource()
Indicates whether the port is a source or a target for its mixer.

Returns:
true if the port is a source port (such
 as a microphone), false if the port is a target port
 (such as a speaker).


"
Port.Info,matches(Line.Info info),boolean,Indicates whether this info object specified matches this one.,"

matches
public boolean matches(Line.Info info)
Indicates whether this info object specified matches this one.
 To match, the match requirements of the superclass must be
 met and the types must be equal.

Overrides:
matches in class Line.Info
Parameters:
info - the info object for which the match is queried
Returns:
true if the specified object matches this one,
 false otherwise


"
Port.Info,toString(),String,Provides a String representation of the port.,"

toString
public final String toString()
Provides a String representation
 of the port.

Overrides:
toString in class Line.Info
Returns:
a string that describes the port


"
ReverbType,equals(Object obj),boolean,"Indicates whether the specified object is equal to this reverb type, returning true if the objects are identical.","

equals
public final boolean equals(Object obj)
Indicates whether the specified object is equal to this reverb type,
 returning true if the objects are identical.

Overrides:
equals in class Object
Parameters:
obj - the reference object with which to compare
Returns:
true if this reverb type is the same as
 obj; false otherwise
See Also:
Object.hashCode(), 
HashMap


"
ReverbType,getDecayTime(),int,"Obtains the decay time, which is the amount of time over which the late reflections attenuate to effective zero.","

getDecayTime
public final int getDecayTime()
Obtains the decay time, which is the amount of time over which the
 late reflections attenuate to effective zero.  The effective zero
 value is implementation-dependent.

Returns:
the decay time of the late reflections, in microseconds


"
ReverbType,getEarlyReflectionDelay(),int,Returns the early reflection delay time in microseconds.,"

getEarlyReflectionDelay
public final int getEarlyReflectionDelay()
Returns the early reflection delay time in microseconds.
 This is the amount of time between when the direct signal is
 heard and when the first early reflections are heard.

Returns:
early reflection delay time for this reverb type, in microseconds


"
ReverbType,getEarlyReflectionIntensity(),float,Returns the early reflection intensity in decibels.,"

getEarlyReflectionIntensity
public final float getEarlyReflectionIntensity()
Returns the early reflection intensity in decibels.
 This is the amplitude attenuation of the first early reflections
 relative to the direct signal.

Returns:
early reflection intensity for this reverb type, in dB


"
ReverbType,getLateReflectionDelay(),int,Returns the late reflection delay time in microseconds.,"

getLateReflectionDelay
public final int getLateReflectionDelay()
Returns the late reflection delay time in microseconds.
 This is the amount of time between when the first early reflections
 are heard and when the first late reflections are heard.

Returns:
late reflection delay time for this reverb type, in microseconds


"
ReverbType,getLateReflectionIntensity(),float,Returns the late reflection intensity in decibels.,"

getLateReflectionIntensity
public final float getLateReflectionIntensity()
Returns the late reflection intensity in decibels.
 This is the amplitude attenuation of the first late reflections
 relative to the direct signal.

Returns:
late reflection intensity for this reverb type, in dB


"
ReverbType,getName(),String,Obtains the name of this reverb type.,"

getName
public String getName()
Obtains the name of this reverb type.

Returns:
the name of this reverb type
Since:
1.5


"
ReverbType,hashCode(),int,Finalizes the hashcode method.,"

hashCode
public final int hashCode()
Finalizes the hashcode method.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
ReverbType,toString(),String,"Provides a String representation of the reverb type, including its name and its parameter settings.","

toString
public final String toString()
Provides a String representation of the reverb type,
 including its name and its parameter settings.
 The exact contents of the string may vary between implementations of
 Java Sound.

Overrides:
toString in class Object
Returns:
reverberation type name and description


"
