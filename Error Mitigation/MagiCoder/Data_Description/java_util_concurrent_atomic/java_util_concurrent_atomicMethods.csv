ClassName,Method,Return Type,Description,Full Description
AtomicBoolean,"compareAndSet(boolean expect, boolean update)",boolean,Atomically sets the value to the given updated value if the current value == the expected value.,"

compareAndSet
public final boolean compareAndSet(boolean expect,
                                   boolean update)
Atomically sets the value to the given updated value
 if the current value == the expected value.

Parameters:
expect - the expected value
update - the new value
Returns:
true if successful. False return indicates that
 the actual value was not equal to the expected value.


"
AtomicBoolean,get(),boolean,Returns the current value.,"

get
public final boolean get()
Returns the current value.

Returns:
the current value


"
AtomicBoolean,getAndSet(boolean newValue),boolean,Atomically sets to the given value and returns the previous value.,"

getAndSet
public final boolean getAndSet(boolean newValue)
Atomically sets to the given value and returns the previous value.

Parameters:
newValue - the new value
Returns:
the previous value


"
AtomicBoolean,lazySet(boolean newValue),void,Eventually sets to the given value.,"

lazySet
public final void lazySet(boolean newValue)
Eventually sets to the given value.

Parameters:
newValue - the new value
Since:
1.6


"
AtomicBoolean,set(boolean newValue),void,Unconditionally sets to the given value.,"

set
public final void set(boolean newValue)
Unconditionally sets to the given value.

Parameters:
newValue - the new value


"
AtomicBoolean,toString(),String,Returns the String representation of the current value.,"

toString
public String toString()
Returns the String representation of the current value.

Overrides:
toString in class Object
Returns:
the String representation of the current value


"
AtomicBoolean,"weakCompareAndSet(boolean expect, boolean update)",boolean,Atomically sets the value to the given updated value if the current value == the expected value.,"

weakCompareAndSet
public boolean weakCompareAndSet(boolean expect,
                                 boolean update)
Atomically sets the value to the given updated value
 if the current value == the expected value.

 May fail
 spuriously and does not provide ordering guarantees, so is
 only rarely an appropriate alternative to compareAndSet.

Parameters:
expect - the expected value
update - the new value
Returns:
true if successful


"
AtomicInteger,"accumulateAndGet(int x, IntBinaryOperator accumulatorFunction)",int,"Atomically updates the current value with the results of applying the given function to the current and given values, returning the updated value.","

accumulateAndGet
public final int accumulateAndGet(int x,
                                  IntBinaryOperator accumulatorFunction)
Atomically updates the current value with the results of
 applying the given function to the current and given values,
 returning the updated value. The function should be
 side-effect-free, since it may be re-applied when attempted
 updates fail due to contention among threads.  The function
 is applied with the current value as its first argument,
 and the given update as the second argument.

Parameters:
x - the update value
accumulatorFunction - a side-effect-free function of two arguments
Returns:
the updated value
Since:
1.8


"
AtomicInteger,addAndGet(int delta),int,Atomically adds the given value to the current value.,"

addAndGet
public final int addAndGet(int delta)
Atomically adds the given value to the current value.

Parameters:
delta - the value to add
Returns:
the updated value


"
AtomicInteger,"compareAndSet(int expect, int update)",boolean,Atomically sets the value to the given updated value if the current value == the expected value.,"

compareAndSet
public final boolean compareAndSet(int expect,
                                   int update)
Atomically sets the value to the given updated value
 if the current value == the expected value.

Parameters:
expect - the expected value
update - the new value
Returns:
true if successful. False return indicates that
 the actual value was not equal to the expected value.


"
AtomicInteger,decrementAndGet(),int,Atomically decrements by one the current value.,"

decrementAndGet
public final int decrementAndGet()
Atomically decrements by one the current value.

Returns:
the updated value


"
AtomicInteger,doubleValue(),double,Returns the value of this AtomicInteger as a double after a widening primitive conversion.,"

doubleValue
public double doubleValue()
Returns the value of this AtomicInteger as a double
 after a widening primitive conversion.

Specified by:
doubleValue in class Number
Returns:
the numeric value represented by this object after conversion
          to type double.
See  The Java™ Language Specification:
5.1.2 Widening Primitive Conversions


"
AtomicInteger,floatValue(),float,Returns the value of this AtomicInteger as a float after a widening primitive conversion.,"

floatValue
public float floatValue()
Returns the value of this AtomicInteger as a float
 after a widening primitive conversion.

Specified by:
floatValue in class Number
Returns:
the numeric value represented by this object after conversion
          to type float.
See  The Java™ Language Specification:
5.1.2 Widening Primitive Conversions


"
AtomicInteger,get(),int,Gets the current value.,"

get
public final int get()
Gets the current value.

Returns:
the current value


"
AtomicInteger,"getAndAccumulate(int x, IntBinaryOperator accumulatorFunction)",int,"Atomically updates the current value with the results of applying the given function to the current and given values, returning the previous value.","

getAndAccumulate
public final int getAndAccumulate(int x,
                                  IntBinaryOperator accumulatorFunction)
Atomically updates the current value with the results of
 applying the given function to the current and given values,
 returning the previous value. The function should be
 side-effect-free, since it may be re-applied when attempted
 updates fail due to contention among threads.  The function
 is applied with the current value as its first argument,
 and the given update as the second argument.

Parameters:
x - the update value
accumulatorFunction - a side-effect-free function of two arguments
Returns:
the previous value
Since:
1.8


"
AtomicInteger,getAndAdd(int delta),int,Atomically adds the given value to the current value.,"

getAndAdd
public final int getAndAdd(int delta)
Atomically adds the given value to the current value.

Parameters:
delta - the value to add
Returns:
the previous value


"
AtomicInteger,getAndDecrement(),int,Atomically decrements by one the current value.,"

getAndDecrement
public final int getAndDecrement()
Atomically decrements by one the current value.

Returns:
the previous value


"
AtomicInteger,getAndIncrement(),int,Atomically increments by one the current value.,"

getAndIncrement
public final int getAndIncrement()
Atomically increments by one the current value.

Returns:
the previous value


"
AtomicInteger,getAndSet(int newValue),int,Atomically sets to the given value and returns the old value.,"

getAndSet
public final int getAndSet(int newValue)
Atomically sets to the given value and returns the old value.

Parameters:
newValue - the new value
Returns:
the previous value


"
AtomicInteger,getAndUpdate(IntUnaryOperator updateFunction),int,"Atomically updates the current value with the results of applying the given function, returning the previous value.","

getAndUpdate
public final int getAndUpdate(IntUnaryOperator updateFunction)
Atomically updates the current value with the results of
 applying the given function, returning the previous value. The
 function should be side-effect-free, since it may be re-applied
 when attempted updates fail due to contention among threads.

Parameters:
updateFunction - a side-effect-free function
Returns:
the previous value
Since:
1.8


"
AtomicInteger,incrementAndGet(),int,Atomically increments by one the current value.,"

incrementAndGet
public final int incrementAndGet()
Atomically increments by one the current value.

Returns:
the updated value


"
AtomicInteger,intValue(),int,Returns the value of this AtomicInteger as an int.,"

intValue
public int intValue()
Returns the value of this AtomicInteger as an int.

Specified by:
intValue in class Number
Returns:
the numeric value represented by this object after conversion
          to type int.


"
AtomicInteger,lazySet(int newValue),void,Eventually sets to the given value.,"

lazySet
public final void lazySet(int newValue)
Eventually sets to the given value.

Parameters:
newValue - the new value
Since:
1.6


"
AtomicInteger,longValue(),long,Returns the value of this AtomicInteger as a long after a widening primitive conversion.,"

longValue
public long longValue()
Returns the value of this AtomicInteger as a long
 after a widening primitive conversion.

Specified by:
longValue in class Number
Returns:
the numeric value represented by this object after conversion
          to type long.
See  The Java™ Language Specification:
5.1.2 Widening Primitive Conversions


"
AtomicInteger,set(int newValue),void,Sets to the given value.,"

set
public final void set(int newValue)
Sets to the given value.

Parameters:
newValue - the new value


"
AtomicInteger,toString(),String,Returns the String representation of the current value.,"

toString
public String toString()
Returns the String representation of the current value.

Overrides:
toString in class Object
Returns:
the String representation of the current value


"
AtomicInteger,updateAndGet(IntUnaryOperator updateFunction),int,"Atomically updates the current value with the results of applying the given function, returning the updated value.","

updateAndGet
public final int updateAndGet(IntUnaryOperator updateFunction)
Atomically updates the current value with the results of
 applying the given function, returning the updated value. The
 function should be side-effect-free, since it may be re-applied
 when attempted updates fail due to contention among threads.

Parameters:
updateFunction - a side-effect-free function
Returns:
the updated value
Since:
1.8


"
AtomicInteger,"weakCompareAndSet(int expect, int update)",boolean,Atomically sets the value to the given updated value if the current value == the expected value.,"

weakCompareAndSet
public final boolean weakCompareAndSet(int expect,
                                       int update)
Atomically sets the value to the given updated value
 if the current value == the expected value.

 May fail
 spuriously and does not provide ordering guarantees, so is
 only rarely an appropriate alternative to compareAndSet.

Parameters:
expect - the expected value
update - the new value
Returns:
true if successful


"
AtomicIntegerArray,"accumulateAndGet(int i, int x, IntBinaryOperator accumulatorFunction)",int,"Atomically updates the element at index i with the results of applying the given function to the current and given values, returning the updated value.","

accumulateAndGet
public final int accumulateAndGet(int i,
                                  int x,
                                  IntBinaryOperator accumulatorFunction)
Atomically updates the element at index i with the
 results of applying the given function to the current and
 given values, returning the updated value. The function should
 be side-effect-free, since it may be re-applied when attempted
 updates fail due to contention among threads.  The function is
 applied with the current value at index i as its first
 argument, and the given update as the second argument.

Parameters:
i - the index
x - the update value
accumulatorFunction - a side-effect-free function of two arguments
Returns:
the updated value
Since:
1.8


"
AtomicIntegerArray,"addAndGet(int i, int delta)",int,Atomically adds the given value to the element at index i.,"

addAndGet
public final int addAndGet(int i,
                           int delta)
Atomically adds the given value to the element at index i.

Parameters:
i - the index
delta - the value to add
Returns:
the updated value


"
AtomicIntegerArray,"compareAndSet(int i, int expect, int update)",boolean,Atomically sets the element at position i to the given updated value if the current value == the expected value.,"

compareAndSet
public final boolean compareAndSet(int i,
                                   int expect,
                                   int update)
Atomically sets the element at position i to the given
 updated value if the current value == the expected value.

Parameters:
i - the index
expect - the expected value
update - the new value
Returns:
true if successful. False return indicates that
 the actual value was not equal to the expected value.


"
AtomicIntegerArray,decrementAndGet(int i),int,Atomically decrements by one the element at index i.,"

decrementAndGet
public final int decrementAndGet(int i)
Atomically decrements by one the element at index i.

Parameters:
i - the index
Returns:
the updated value


"
AtomicIntegerArray,get(int i),int,Gets the current value at position i.,"

get
public final int get(int i)
Gets the current value at position i.

Parameters:
i - the index
Returns:
the current value


"
AtomicIntegerArray,"getAndAccumulate(int i, int x, IntBinaryOperator accumulatorFunction)",int,"Atomically updates the element at index i with the results of applying the given function to the current and given values, returning the previous value.","

getAndAccumulate
public final int getAndAccumulate(int i,
                                  int x,
                                  IntBinaryOperator accumulatorFunction)
Atomically updates the element at index i with the
 results of applying the given function to the current and
 given values, returning the previous value. The function should
 be side-effect-free, since it may be re-applied when attempted
 updates fail due to contention among threads.  The function is
 applied with the current value at index i as its first
 argument, and the given update as the second argument.

Parameters:
i - the index
x - the update value
accumulatorFunction - a side-effect-free function of two arguments
Returns:
the previous value
Since:
1.8


"
AtomicIntegerArray,"getAndAdd(int i, int delta)",int,Atomically adds the given value to the element at index i.,"

getAndAdd
public final int getAndAdd(int i,
                           int delta)
Atomically adds the given value to the element at index i.

Parameters:
i - the index
delta - the value to add
Returns:
the previous value


"
AtomicIntegerArray,getAndDecrement(int i),int,Atomically decrements by one the element at index i.,"

getAndDecrement
public final int getAndDecrement(int i)
Atomically decrements by one the element at index i.

Parameters:
i - the index
Returns:
the previous value


"
AtomicIntegerArray,getAndIncrement(int i),int,Atomically increments by one the element at index i.,"

getAndIncrement
public final int getAndIncrement(int i)
Atomically increments by one the element at index i.

Parameters:
i - the index
Returns:
the previous value


"
AtomicIntegerArray,"getAndSet(int i, int newValue)",int,Atomically sets the element at position i to the given value and returns the old value.,"

getAndSet
public final int getAndSet(int i,
                           int newValue)
Atomically sets the element at position i to the given
 value and returns the old value.

Parameters:
i - the index
newValue - the new value
Returns:
the previous value


"
AtomicIntegerArray,"getAndUpdate(int i, IntUnaryOperator updateFunction)",int,"Atomically updates the element at index i with the results of applying the given function, returning the previous value.","

getAndUpdate
public final int getAndUpdate(int i,
                              IntUnaryOperator updateFunction)
Atomically updates the element at index i with the results
 of applying the given function, returning the previous value. The
 function should be side-effect-free, since it may be re-applied
 when attempted updates fail due to contention among threads.

Parameters:
i - the index
updateFunction - a side-effect-free function
Returns:
the previous value
Since:
1.8


"
AtomicIntegerArray,incrementAndGet(int i),int,Atomically increments by one the element at index i.,"

incrementAndGet
public final int incrementAndGet(int i)
Atomically increments by one the element at index i.

Parameters:
i - the index
Returns:
the updated value


"
AtomicIntegerArray,"lazySet(int i, int newValue)",void,Eventually sets the element at position i to the given value.,"

lazySet
public final void lazySet(int i,
                          int newValue)
Eventually sets the element at position i to the given value.

Parameters:
i - the index
newValue - the new value
Since:
1.6


"
AtomicIntegerArray,length(),int,Returns the length of the array.,"

length
public final int length()
Returns the length of the array.

Returns:
the length of the array


"
AtomicIntegerArray,"set(int i, int newValue)",void,Sets the element at position i to the given value.,"

set
public final void set(int i,
                      int newValue)
Sets the element at position i to the given value.

Parameters:
i - the index
newValue - the new value


"
AtomicIntegerArray,toString(),String,Returns the String representation of the current values of array.,"

toString
public String toString()
Returns the String representation of the current values of array.

Overrides:
toString in class Object
Returns:
the String representation of the current values of array


"
AtomicIntegerArray,"updateAndGet(int i, IntUnaryOperator updateFunction)",int,"Atomically updates the element at index i with the results of applying the given function, returning the updated value.","

updateAndGet
public final int updateAndGet(int i,
                              IntUnaryOperator updateFunction)
Atomically updates the element at index i with the results
 of applying the given function, returning the updated value. The
 function should be side-effect-free, since it may be re-applied
 when attempted updates fail due to contention among threads.

Parameters:
i - the index
updateFunction - a side-effect-free function
Returns:
the updated value
Since:
1.8


"
AtomicIntegerArray,"weakCompareAndSet(int i, int expect, int update)",boolean,Atomically sets the element at position i to the given updated value if the current value == the expected value.,"

weakCompareAndSet
public final boolean weakCompareAndSet(int i,
                                       int expect,
                                       int update)
Atomically sets the element at position i to the given
 updated value if the current value == the expected value.

 May fail
 spuriously and does not provide ordering guarantees, so is
 only rarely an appropriate alternative to compareAndSet.

Parameters:
i - the index
expect - the expected value
update - the new value
Returns:
true if successful


"
AtomicIntegerFieldUpdater,"accumulateAndGet(T obj, int x, IntBinaryOperator accumulatorFunction)",int,"Atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the updated value.","

accumulateAndGet
public final int accumulateAndGet(T obj,
                                  int x,
                                  IntBinaryOperator accumulatorFunction)
Atomically updates the field of the given object managed by this
 updater with the results of applying the given function to the
 current and given values, returning the updated value. The
 function should be side-effect-free, since it may be re-applied
 when attempted updates fail due to contention among threads.  The
 function is applied with the current value as its first argument,
 and the given update as the second argument.

Parameters:
obj - An object whose field to get and set
x - the update value
accumulatorFunction - a side-effect-free function of two arguments
Returns:
the updated value
Since:
1.8


"
AtomicIntegerFieldUpdater,"addAndGet(T obj, int delta)",int,Atomically adds the given value to the current value of the field of the given object managed by this updater.,"

addAndGet
public int addAndGet(T obj,
                     int delta)
Atomically adds the given value to the current value of the field of
 the given object managed by this updater.

Parameters:
obj - An object whose field to get and set
delta - the value to add
Returns:
the updated value


"
AtomicIntegerFieldUpdater,"compareAndSet(T obj, int expect, int update)",abstract boolean,Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value.,"

compareAndSet
public abstract boolean compareAndSet(T obj,
                                      int expect,
                                      int update)
Atomically sets the field of the given object managed by this updater
 to the given updated value if the current value == the
 expected value. This method is guaranteed to be atomic with respect to
 other calls to compareAndSet and set, but not
 necessarily with respect to other changes in the field.

Parameters:
obj - An object whose field to conditionally set
expect - the expected value
update - the new value
Returns:
true if successful
Throws:
ClassCastException - if obj is not an instance
 of the class possessing the field established in the constructor


"
AtomicIntegerFieldUpdater,decrementAndGet(T obj),int,Atomically decrements by one the current value of the field of the given object managed by this updater.,"

decrementAndGet
public int decrementAndGet(T obj)
Atomically decrements by one the current value of the field of the
 given object managed by this updater.

Parameters:
obj - An object whose field to get and set
Returns:
the updated value


"
AtomicIntegerFieldUpdater,get(T obj),abstract int,Gets the current value held in the field of the given object managed by this updater.,"

get
public abstract int get(T obj)
Gets the current value held in the field of the given object managed
 by this updater.

Parameters:
obj - An object whose field to get
Returns:
the current value


"
AtomicIntegerFieldUpdater,"getAndAccumulate(T obj, int x, IntBinaryOperator accumulatorFunction)",int,"Atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the previous value.","

getAndAccumulate
public final int getAndAccumulate(T obj,
                                  int x,
                                  IntBinaryOperator accumulatorFunction)
Atomically updates the field of the given object managed by this
 updater with the results of applying the given function to the
 current and given values, returning the previous value. The
 function should be side-effect-free, since it may be re-applied
 when attempted updates fail due to contention among threads.  The
 function is applied with the current value as its first argument,
 and the given update as the second argument.

Parameters:
obj - An object whose field to get and set
x - the update value
accumulatorFunction - a side-effect-free function of two arguments
Returns:
the previous value
Since:
1.8


"
AtomicIntegerFieldUpdater,"getAndAdd(T obj, int delta)",int,Atomically adds the given value to the current value of the field of the given object managed by this updater.,"

getAndAdd
public int getAndAdd(T obj,
                     int delta)
Atomically adds the given value to the current value of the field of
 the given object managed by this updater.

Parameters:
obj - An object whose field to get and set
delta - the value to add
Returns:
the previous value


"
AtomicIntegerFieldUpdater,getAndDecrement(T obj),int,Atomically decrements by one the current value of the field of the given object managed by this updater.,"

getAndDecrement
public int getAndDecrement(T obj)
Atomically decrements by one the current value of the field of the
 given object managed by this updater.

Parameters:
obj - An object whose field to get and set
Returns:
the previous value


"
AtomicIntegerFieldUpdater,getAndIncrement(T obj),int,Atomically increments by one the current value of the field of the given object managed by this updater.,"

getAndIncrement
public int getAndIncrement(T obj)
Atomically increments by one the current value of the field of the
 given object managed by this updater.

Parameters:
obj - An object whose field to get and set
Returns:
the previous value


"
AtomicIntegerFieldUpdater,"getAndSet(T obj, int newValue)",int,Atomically sets the field of the given object managed by this updater to the given value and returns the old value.,"

getAndSet
public int getAndSet(T obj,
                     int newValue)
Atomically sets the field of the given object managed by this updater
 to the given value and returns the old value.

Parameters:
obj - An object whose field to get and set
newValue - the new value
Returns:
the previous value


"
AtomicIntegerFieldUpdater,"getAndUpdate(T obj, IntUnaryOperator updateFunction)",int,"Atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the previous value.","

getAndUpdate
public final int getAndUpdate(T obj,
                              IntUnaryOperator updateFunction)
Atomically updates the field of the given object managed by this updater
 with the results of applying the given function, returning the previous
 value. The function should be side-effect-free, since it may be
 re-applied when attempted updates fail due to contention among threads.

Parameters:
obj - An object whose field to get and set
updateFunction - a side-effect-free function
Returns:
the previous value
Since:
1.8


"
AtomicIntegerFieldUpdater,incrementAndGet(T obj),int,Atomically increments by one the current value of the field of the given object managed by this updater.,"

incrementAndGet
public int incrementAndGet(T obj)
Atomically increments by one the current value of the field of the
 given object managed by this updater.

Parameters:
obj - An object whose field to get and set
Returns:
the updated value


"
AtomicIntegerFieldUpdater,"lazySet(T obj, int newValue)",abstract void,Eventually sets the field of the given object managed by this updater to the given updated value.,"

lazySet
public abstract void lazySet(T obj,
                             int newValue)
Eventually sets the field of the given object managed by this
 updater to the given updated value.

Parameters:
obj - An object whose field to set
newValue - the new value
Since:
1.6


"
AtomicIntegerFieldUpdater,"newUpdater(Class<U> tclass, String fieldName)",static <U> AtomicIntegerFieldUpdater<U>,Creates and returns an updater for objects with the given field.,"

newUpdater
public static <U> AtomicIntegerFieldUpdater<U> newUpdater(Class<U> tclass,
                                                          String fieldName)
Creates and returns an updater for objects with the given field.
 The Class argument is needed to check that reflective types and
 generic types match.

Type Parameters:
U - the type of instances of tclass
Parameters:
tclass - the class of the objects holding the field
fieldName - the name of the field to be updated
Returns:
the updater
Throws:
IllegalArgumentException - if the field is not a
 volatile integer type
RuntimeException - with a nested reflection-based
 exception if the class does not hold field or is the wrong type,
 or the field is inaccessible to the caller according to Java language
 access control


"
AtomicIntegerFieldUpdater,"set(T obj, int newValue)",abstract void,Sets the field of the given object managed by this updater to the given updated value.,"

set
public abstract void set(T obj,
                         int newValue)
Sets the field of the given object managed by this updater to the
 given updated value. This operation is guaranteed to act as a volatile
 store with respect to subsequent invocations of compareAndSet.

Parameters:
obj - An object whose field to set
newValue - the new value


"
AtomicIntegerFieldUpdater,"updateAndGet(T obj, IntUnaryOperator updateFunction)",int,"Atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the updated value.","

updateAndGet
public final int updateAndGet(T obj,
                              IntUnaryOperator updateFunction)
Atomically updates the field of the given object managed by this updater
 with the results of applying the given function, returning the updated
 value. The function should be side-effect-free, since it may be
 re-applied when attempted updates fail due to contention among threads.

Parameters:
obj - An object whose field to get and set
updateFunction - a side-effect-free function
Returns:
the updated value
Since:
1.8


"
AtomicIntegerFieldUpdater,"weakCompareAndSet(T obj, int expect, int update)",abstract boolean,Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value.,"

weakCompareAndSet
public abstract boolean weakCompareAndSet(T obj,
                                          int expect,
                                          int update)
Atomically sets the field of the given object managed by this updater
 to the given updated value if the current value == the
 expected value. This method is guaranteed to be atomic with respect to
 other calls to compareAndSet and set, but not
 necessarily with respect to other changes in the field.

 May fail
 spuriously and does not provide ordering guarantees, so is
 only rarely an appropriate alternative to compareAndSet.

Parameters:
obj - An object whose field to conditionally set
expect - the expected value
update - the new value
Returns:
true if successful
Throws:
ClassCastException - if obj is not an instance
 of the class possessing the field established in the constructor


"
AtomicLong,"accumulateAndGet(long x, LongBinaryOperator accumulatorFunction)",long,"Atomically updates the current value with the results of applying the given function to the current and given values, returning the updated value.","

accumulateAndGet
public final long accumulateAndGet(long x,
                                   LongBinaryOperator accumulatorFunction)
Atomically updates the current value with the results of
 applying the given function to the current and given values,
 returning the updated value. The function should be
 side-effect-free, since it may be re-applied when attempted
 updates fail due to contention among threads.  The function
 is applied with the current value as its first argument,
 and the given update as the second argument.

Parameters:
x - the update value
accumulatorFunction - a side-effect-free function of two arguments
Returns:
the updated value
Since:
1.8


"
AtomicLong,addAndGet(long delta),long,Atomically adds the given value to the current value.,"

addAndGet
public final long addAndGet(long delta)
Atomically adds the given value to the current value.

Parameters:
delta - the value to add
Returns:
the updated value


"
AtomicLong,"compareAndSet(long expect, long update)",boolean,Atomically sets the value to the given updated value if the current value == the expected value.,"

compareAndSet
public final boolean compareAndSet(long expect,
                                   long update)
Atomically sets the value to the given updated value
 if the current value == the expected value.

Parameters:
expect - the expected value
update - the new value
Returns:
true if successful. False return indicates that
 the actual value was not equal to the expected value.


"
AtomicLong,decrementAndGet(),long,Atomically decrements by one the current value.,"

decrementAndGet
public final long decrementAndGet()
Atomically decrements by one the current value.

Returns:
the updated value


"
AtomicLong,doubleValue(),double,Returns the value of this AtomicLong as a double after a widening primitive conversion.,"

doubleValue
public double doubleValue()
Returns the value of this AtomicLong as a double
 after a widening primitive conversion.

Specified by:
doubleValue in class Number
Returns:
the numeric value represented by this object after conversion
          to type double.
See  The Java™ Language Specification:
5.1.2 Widening Primitive Conversions


"
AtomicLong,floatValue(),float,Returns the value of this AtomicLong as a float after a widening primitive conversion.,"

floatValue
public float floatValue()
Returns the value of this AtomicLong as a float
 after a widening primitive conversion.

Specified by:
floatValue in class Number
Returns:
the numeric value represented by this object after conversion
          to type float.
See  The Java™ Language Specification:
5.1.2 Widening Primitive Conversions


"
AtomicLong,get(),long,Gets the current value.,"

get
public final long get()
Gets the current value.

Returns:
the current value


"
AtomicLong,"getAndAccumulate(long x, LongBinaryOperator accumulatorFunction)",long,"Atomically updates the current value with the results of applying the given function to the current and given values, returning the previous value.","

getAndAccumulate
public final long getAndAccumulate(long x,
                                   LongBinaryOperator accumulatorFunction)
Atomically updates the current value with the results of
 applying the given function to the current and given values,
 returning the previous value. The function should be
 side-effect-free, since it may be re-applied when attempted
 updates fail due to contention among threads.  The function
 is applied with the current value as its first argument,
 and the given update as the second argument.

Parameters:
x - the update value
accumulatorFunction - a side-effect-free function of two arguments
Returns:
the previous value
Since:
1.8


"
AtomicLong,getAndAdd(long delta),long,Atomically adds the given value to the current value.,"

getAndAdd
public final long getAndAdd(long delta)
Atomically adds the given value to the current value.

Parameters:
delta - the value to add
Returns:
the previous value


"
AtomicLong,getAndDecrement(),long,Atomically decrements by one the current value.,"

getAndDecrement
public final long getAndDecrement()
Atomically decrements by one the current value.

Returns:
the previous value


"
AtomicLong,getAndIncrement(),long,Atomically increments by one the current value.,"

getAndIncrement
public final long getAndIncrement()
Atomically increments by one the current value.

Returns:
the previous value


"
AtomicLong,getAndSet(long newValue),long,Atomically sets to the given value and returns the old value.,"

getAndSet
public final long getAndSet(long newValue)
Atomically sets to the given value and returns the old value.

Parameters:
newValue - the new value
Returns:
the previous value


"
AtomicLong,getAndUpdate(LongUnaryOperator updateFunction),long,"Atomically updates the current value with the results of applying the given function, returning the previous value.","

getAndUpdate
public final long getAndUpdate(LongUnaryOperator updateFunction)
Atomically updates the current value with the results of
 applying the given function, returning the previous value. The
 function should be side-effect-free, since it may be re-applied
 when attempted updates fail due to contention among threads.

Parameters:
updateFunction - a side-effect-free function
Returns:
the previous value
Since:
1.8


"
AtomicLong,incrementAndGet(),long,Atomically increments by one the current value.,"

incrementAndGet
public final long incrementAndGet()
Atomically increments by one the current value.

Returns:
the updated value


"
AtomicLong,intValue(),int,Returns the value of this AtomicLong as an int after a narrowing primitive conversion.,"

intValue
public int intValue()
Returns the value of this AtomicLong as an int
 after a narrowing primitive conversion.

Specified by:
intValue in class Number
Returns:
the numeric value represented by this object after conversion
          to type int.
See  The Java™ Language Specification:
5.1.3 Narrowing Primitive Conversions


"
AtomicLong,lazySet(long newValue),void,Eventually sets to the given value.,"

lazySet
public final void lazySet(long newValue)
Eventually sets to the given value.

Parameters:
newValue - the new value
Since:
1.6


"
AtomicLong,longValue(),long,Returns the value of this AtomicLong as a long.,"

longValue
public long longValue()
Returns the value of this AtomicLong as a long.

Specified by:
longValue in class Number
Returns:
the numeric value represented by this object after conversion
          to type long.


"
AtomicLong,set(long newValue),void,Sets to the given value.,"

set
public final void set(long newValue)
Sets to the given value.

Parameters:
newValue - the new value


"
AtomicLong,toString(),String,Returns the String representation of the current value.,"

toString
public String toString()
Returns the String representation of the current value.

Overrides:
toString in class Object
Returns:
the String representation of the current value


"
AtomicLong,updateAndGet(LongUnaryOperator updateFunction),long,"Atomically updates the current value with the results of applying the given function, returning the updated value.","

updateAndGet
public final long updateAndGet(LongUnaryOperator updateFunction)
Atomically updates the current value with the results of
 applying the given function, returning the updated value. The
 function should be side-effect-free, since it may be re-applied
 when attempted updates fail due to contention among threads.

Parameters:
updateFunction - a side-effect-free function
Returns:
the updated value
Since:
1.8


"
AtomicLong,"weakCompareAndSet(long expect, long update)",boolean,Atomically sets the value to the given updated value if the current value == the expected value.,"

weakCompareAndSet
public final boolean weakCompareAndSet(long expect,
                                       long update)
Atomically sets the value to the given updated value
 if the current value == the expected value.

 May fail
 spuriously and does not provide ordering guarantees, so is
 only rarely an appropriate alternative to compareAndSet.

Parameters:
expect - the expected value
update - the new value
Returns:
true if successful


"
AtomicLongArray,"accumulateAndGet(int i, long x, LongBinaryOperator accumulatorFunction)",long,"Atomically updates the element at index i with the results of applying the given function to the current and given values, returning the updated value.","

accumulateAndGet
public final long accumulateAndGet(int i,
                                   long x,
                                   LongBinaryOperator accumulatorFunction)
Atomically updates the element at index i with the
 results of applying the given function to the current and
 given values, returning the updated value. The function should
 be side-effect-free, since it may be re-applied when attempted
 updates fail due to contention among threads.  The function is
 applied with the current value at index i as its first
 argument, and the given update as the second argument.

Parameters:
i - the index
x - the update value
accumulatorFunction - a side-effect-free function of two arguments
Returns:
the updated value
Since:
1.8


"
AtomicLongArray,"addAndGet(int i, long delta)",long,Atomically adds the given value to the element at index i.,"

addAndGet
public long addAndGet(int i,
                      long delta)
Atomically adds the given value to the element at index i.

Parameters:
i - the index
delta - the value to add
Returns:
the updated value


"
AtomicLongArray,"compareAndSet(int i, long expect, long update)",boolean,Atomically sets the element at position i to the given updated value if the current value == the expected value.,"

compareAndSet
public final boolean compareAndSet(int i,
                                   long expect,
                                   long update)
Atomically sets the element at position i to the given
 updated value if the current value == the expected value.

Parameters:
i - the index
expect - the expected value
update - the new value
Returns:
true if successful. False return indicates that
 the actual value was not equal to the expected value.


"
AtomicLongArray,decrementAndGet(int i),long,Atomically decrements by one the element at index i.,"

decrementAndGet
public final long decrementAndGet(int i)
Atomically decrements by one the element at index i.

Parameters:
i - the index
Returns:
the updated value


"
AtomicLongArray,get(int i),long,Gets the current value at position i.,"

get
public final long get(int i)
Gets the current value at position i.

Parameters:
i - the index
Returns:
the current value


"
AtomicLongArray,"getAndAccumulate(int i, long x, LongBinaryOperator accumulatorFunction)",long,"Atomically updates the element at index i with the results of applying the given function to the current and given values, returning the previous value.","

getAndAccumulate
public final long getAndAccumulate(int i,
                                   long x,
                                   LongBinaryOperator accumulatorFunction)
Atomically updates the element at index i with the
 results of applying the given function to the current and
 given values, returning the previous value. The function should
 be side-effect-free, since it may be re-applied when attempted
 updates fail due to contention among threads.  The function is
 applied with the current value at index i as its first
 argument, and the given update as the second argument.

Parameters:
i - the index
x - the update value
accumulatorFunction - a side-effect-free function of two arguments
Returns:
the previous value
Since:
1.8


"
AtomicLongArray,"getAndAdd(int i, long delta)",long,Atomically adds the given value to the element at index i.,"

getAndAdd
public final long getAndAdd(int i,
                            long delta)
Atomically adds the given value to the element at index i.

Parameters:
i - the index
delta - the value to add
Returns:
the previous value


"
AtomicLongArray,getAndDecrement(int i),long,Atomically decrements by one the element at index i.,"

getAndDecrement
public final long getAndDecrement(int i)
Atomically decrements by one the element at index i.

Parameters:
i - the index
Returns:
the previous value


"
AtomicLongArray,getAndIncrement(int i),long,Atomically increments by one the element at index i.,"

getAndIncrement
public final long getAndIncrement(int i)
Atomically increments by one the element at index i.

Parameters:
i - the index
Returns:
the previous value


"
AtomicLongArray,"getAndSet(int i, long newValue)",long,Atomically sets the element at position i to the given value and returns the old value.,"

getAndSet
public final long getAndSet(int i,
                            long newValue)
Atomically sets the element at position i to the given value
 and returns the old value.

Parameters:
i - the index
newValue - the new value
Returns:
the previous value


"
AtomicLongArray,"getAndUpdate(int i, LongUnaryOperator updateFunction)",long,"Atomically updates the element at index i with the results of applying the given function, returning the previous value.","

getAndUpdate
public final long getAndUpdate(int i,
                               LongUnaryOperator updateFunction)
Atomically updates the element at index i with the results
 of applying the given function, returning the previous value. The
 function should be side-effect-free, since it may be re-applied
 when attempted updates fail due to contention among threads.

Parameters:
i - the index
updateFunction - a side-effect-free function
Returns:
the previous value
Since:
1.8


"
AtomicLongArray,incrementAndGet(int i),long,Atomically increments by one the element at index i.,"

incrementAndGet
public final long incrementAndGet(int i)
Atomically increments by one the element at index i.

Parameters:
i - the index
Returns:
the updated value


"
AtomicLongArray,"lazySet(int i, long newValue)",void,Eventually sets the element at position i to the given value.,"

lazySet
public final void lazySet(int i,
                          long newValue)
Eventually sets the element at position i to the given value.

Parameters:
i - the index
newValue - the new value
Since:
1.6


"
AtomicLongArray,length(),int,Returns the length of the array.,"

length
public final int length()
Returns the length of the array.

Returns:
the length of the array


"
AtomicLongArray,"set(int i, long newValue)",void,Sets the element at position i to the given value.,"

set
public final void set(int i,
                      long newValue)
Sets the element at position i to the given value.

Parameters:
i - the index
newValue - the new value


"
AtomicLongArray,toString(),String,Returns the String representation of the current values of array.,"

toString
public String toString()
Returns the String representation of the current values of array.

Overrides:
toString in class Object
Returns:
the String representation of the current values of array


"
AtomicLongArray,"updateAndGet(int i, LongUnaryOperator updateFunction)",long,"Atomically updates the element at index i with the results of applying the given function, returning the updated value.","

updateAndGet
public final long updateAndGet(int i,
                               LongUnaryOperator updateFunction)
Atomically updates the element at index i with the results
 of applying the given function, returning the updated value. The
 function should be side-effect-free, since it may be re-applied
 when attempted updates fail due to contention among threads.

Parameters:
i - the index
updateFunction - a side-effect-free function
Returns:
the updated value
Since:
1.8


"
AtomicLongArray,"weakCompareAndSet(int i, long expect, long update)",boolean,Atomically sets the element at position i to the given updated value if the current value == the expected value.,"

weakCompareAndSet
public final boolean weakCompareAndSet(int i,
                                       long expect,
                                       long update)
Atomically sets the element at position i to the given
 updated value if the current value == the expected value.

 May fail
 spuriously and does not provide ordering guarantees, so is
 only rarely an appropriate alternative to compareAndSet.

Parameters:
i - the index
expect - the expected value
update - the new value
Returns:
true if successful


"
AtomicLongFieldUpdater,"accumulateAndGet(T obj, long x, LongBinaryOperator accumulatorFunction)",long,"Atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the updated value.","

accumulateAndGet
public final long accumulateAndGet(T obj,
                                   long x,
                                   LongBinaryOperator accumulatorFunction)
Atomically updates the field of the given object managed by this
 updater with the results of applying the given function to the
 current and given values, returning the updated value. The
 function should be side-effect-free, since it may be re-applied
 when attempted updates fail due to contention among threads.  The
 function is applied with the current value as its first argument,
 and the given update as the second argument.

Parameters:
obj - An object whose field to get and set
x - the update value
accumulatorFunction - a side-effect-free function of two arguments
Returns:
the updated value
Since:
1.8


"
AtomicLongFieldUpdater,"addAndGet(T obj, long delta)",long,Atomically adds the given value to the current value of the field of the given object managed by this updater.,"

addAndGet
public long addAndGet(T obj,
                      long delta)
Atomically adds the given value to the current value of the field of
 the given object managed by this updater.

Parameters:
obj - An object whose field to get and set
delta - the value to add
Returns:
the updated value


"
AtomicLongFieldUpdater,"compareAndSet(T obj, long expect, long update)",abstract boolean,Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value.,"

compareAndSet
public abstract boolean compareAndSet(T obj,
                                      long expect,
                                      long update)
Atomically sets the field of the given object managed by this updater
 to the given updated value if the current value == the
 expected value. This method is guaranteed to be atomic with respect to
 other calls to compareAndSet and set, but not
 necessarily with respect to other changes in the field.

Parameters:
obj - An object whose field to conditionally set
expect - the expected value
update - the new value
Returns:
true if successful
Throws:
ClassCastException - if obj is not an instance
 of the class possessing the field established in the constructor


"
AtomicLongFieldUpdater,decrementAndGet(T obj),long,Atomically decrements by one the current value of the field of the given object managed by this updater.,"

decrementAndGet
public long decrementAndGet(T obj)
Atomically decrements by one the current value of the field of the
 given object managed by this updater.

Parameters:
obj - An object whose field to get and set
Returns:
the updated value


"
AtomicLongFieldUpdater,get(T obj),abstract long,Gets the current value held in the field of the given object managed by this updater.,"

get
public abstract long get(T obj)
Gets the current value held in the field of the given object managed
 by this updater.

Parameters:
obj - An object whose field to get
Returns:
the current value


"
AtomicLongFieldUpdater,"getAndAccumulate(T obj, long x, LongBinaryOperator accumulatorFunction)",long,"Atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the previous value.","

getAndAccumulate
public final long getAndAccumulate(T obj,
                                   long x,
                                   LongBinaryOperator accumulatorFunction)
Atomically updates the field of the given object managed by this
 updater with the results of applying the given function to the
 current and given values, returning the previous value. The
 function should be side-effect-free, since it may be re-applied
 when attempted updates fail due to contention among threads.  The
 function is applied with the current value as its first argument,
 and the given update as the second argument.

Parameters:
obj - An object whose field to get and set
x - the update value
accumulatorFunction - a side-effect-free function of two arguments
Returns:
the previous value
Since:
1.8


"
AtomicLongFieldUpdater,"getAndAdd(T obj, long delta)",long,Atomically adds the given value to the current value of the field of the given object managed by this updater.,"

getAndAdd
public long getAndAdd(T obj,
                      long delta)
Atomically adds the given value to the current value of the field of
 the given object managed by this updater.

Parameters:
obj - An object whose field to get and set
delta - the value to add
Returns:
the previous value


"
AtomicLongFieldUpdater,getAndDecrement(T obj),long,Atomically decrements by one the current value of the field of the given object managed by this updater.,"

getAndDecrement
public long getAndDecrement(T obj)
Atomically decrements by one the current value of the field of the
 given object managed by this updater.

Parameters:
obj - An object whose field to get and set
Returns:
the previous value


"
AtomicLongFieldUpdater,getAndIncrement(T obj),long,Atomically increments by one the current value of the field of the given object managed by this updater.,"

getAndIncrement
public long getAndIncrement(T obj)
Atomically increments by one the current value of the field of the
 given object managed by this updater.

Parameters:
obj - An object whose field to get and set
Returns:
the previous value


"
AtomicLongFieldUpdater,"getAndSet(T obj, long newValue)",long,Atomically sets the field of the given object managed by this updater to the given value and returns the old value.,"

getAndSet
public long getAndSet(T obj,
                      long newValue)
Atomically sets the field of the given object managed by this updater
 to the given value and returns the old value.

Parameters:
obj - An object whose field to get and set
newValue - the new value
Returns:
the previous value


"
AtomicLongFieldUpdater,"getAndUpdate(T obj, LongUnaryOperator updateFunction)",long,"Atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the previous value.","

getAndUpdate
public final long getAndUpdate(T obj,
                               LongUnaryOperator updateFunction)
Atomically updates the field of the given object managed by this updater
 with the results of applying the given function, returning the previous
 value. The function should be side-effect-free, since it may be
 re-applied when attempted updates fail due to contention among threads.

Parameters:
obj - An object whose field to get and set
updateFunction - a side-effect-free function
Returns:
the previous value
Since:
1.8


"
AtomicLongFieldUpdater,incrementAndGet(T obj),long,Atomically increments by one the current value of the field of the given object managed by this updater.,"

incrementAndGet
public long incrementAndGet(T obj)
Atomically increments by one the current value of the field of the
 given object managed by this updater.

Parameters:
obj - An object whose field to get and set
Returns:
the updated value


"
AtomicLongFieldUpdater,"lazySet(T obj, long newValue)",abstract void,Eventually sets the field of the given object managed by this updater to the given updated value.,"

lazySet
public abstract void lazySet(T obj,
                             long newValue)
Eventually sets the field of the given object managed by this
 updater to the given updated value.

Parameters:
obj - An object whose field to set
newValue - the new value
Since:
1.6


"
AtomicLongFieldUpdater,"newUpdater(Class<U> tclass, String fieldName)",static <U> AtomicLongFieldUpdater<U>,Creates and returns an updater for objects with the given field.,"

newUpdater
public static <U> AtomicLongFieldUpdater<U> newUpdater(Class<U> tclass,
                                                       String fieldName)
Creates and returns an updater for objects with the given field.
 The Class argument is needed to check that reflective types and
 generic types match.

Type Parameters:
U - the type of instances of tclass
Parameters:
tclass - the class of the objects holding the field
fieldName - the name of the field to be updated
Returns:
the updater
Throws:
IllegalArgumentException - if the field is not a
 volatile long type
RuntimeException - with a nested reflection-based
 exception if the class does not hold field or is the wrong type,
 or the field is inaccessible to the caller according to Java language
 access control


"
AtomicLongFieldUpdater,"set(T obj, long newValue)",abstract void,Sets the field of the given object managed by this updater to the given updated value.,"

set
public abstract void set(T obj,
                         long newValue)
Sets the field of the given object managed by this updater to the
 given updated value. This operation is guaranteed to act as a volatile
 store with respect to subsequent invocations of compareAndSet.

Parameters:
obj - An object whose field to set
newValue - the new value


"
AtomicLongFieldUpdater,"updateAndGet(T obj, LongUnaryOperator updateFunction)",long,"Atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the updated value.","

updateAndGet
public final long updateAndGet(T obj,
                               LongUnaryOperator updateFunction)
Atomically updates the field of the given object managed by this updater
 with the results of applying the given function, returning the updated
 value. The function should be side-effect-free, since it may be
 re-applied when attempted updates fail due to contention among threads.

Parameters:
obj - An object whose field to get and set
updateFunction - a side-effect-free function
Returns:
the updated value
Since:
1.8


"
AtomicLongFieldUpdater,"weakCompareAndSet(T obj, long expect, long update)",abstract boolean,Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value.,"

weakCompareAndSet
public abstract boolean weakCompareAndSet(T obj,
                                          long expect,
                                          long update)
Atomically sets the field of the given object managed by this updater
 to the given updated value if the current value == the
 expected value. This method is guaranteed to be atomic with respect to
 other calls to compareAndSet and set, but not
 necessarily with respect to other changes in the field.

 May fail
 spuriously and does not provide ordering guarantees, so is
 only rarely an appropriate alternative to compareAndSet.

Parameters:
obj - An object whose field to conditionally set
expect - the expected value
update - the new value
Returns:
true if successful
Throws:
ClassCastException - if obj is not an instance
 of the class possessing the field established in the constructor


"
AtomicMarkableReference,"attemptMark(V expectedReference, boolean newMark)",boolean,Atomically sets the value of the mark to the given update value if the current reference is == to the expected reference.,"

attemptMark
public boolean attemptMark(V expectedReference,
                           boolean newMark)
Atomically sets the value of the mark to the given update value
 if the current reference is == to the expected
 reference.  Any given invocation of this operation may fail
 (return false) spuriously, but repeated invocation
 when the current value holds the expected value and no other
 thread is also attempting to set the value will eventually
 succeed.

Parameters:
expectedReference - the expected value of the reference
newMark - the new value for the mark
Returns:
true if successful


"
AtomicMarkableReference,"compareAndSet(V expectedReference, V newReference, boolean expectedMark, boolean newMark)",boolean,Atomically sets the value of both the reference and mark to the given update values if the current reference is == to the expected reference and the current mark is equal to the expected mark.,"

compareAndSet
public boolean compareAndSet(V expectedReference,
                             V newReference,
                             boolean expectedMark,
                             boolean newMark)
Atomically sets the value of both the reference and mark
 to the given update values if the
 current reference is == to the expected reference
 and the current mark is equal to the expected mark.

Parameters:
expectedReference - the expected value of the reference
newReference - the new value for the reference
expectedMark - the expected value of the mark
newMark - the new value for the mark
Returns:
true if successful


"
AtomicMarkableReference,get(boolean[] markHolder),V,Returns the current values of both the reference and the mark.,"

get
public V get(boolean[] markHolder)
Returns the current values of both the reference and the mark.
 Typical usage is boolean[1] holder; ref = v.get(holder); .

Parameters:
markHolder - an array of size of at least one. On return,
 markholder[0] will hold the value of the mark.
Returns:
the current value of the reference


"
AtomicMarkableReference,getReference(),V,Returns the current value of the reference.,"

getReference
public V getReference()
Returns the current value of the reference.

Returns:
the current value of the reference


"
AtomicMarkableReference,isMarked(),boolean,Returns the current value of the mark.,"

isMarked
public boolean isMarked()
Returns the current value of the mark.

Returns:
the current value of the mark


"
AtomicMarkableReference,"set(V newReference, boolean newMark)",void,Unconditionally sets the value of both the reference and mark.,"

set
public void set(V newReference,
                boolean newMark)
Unconditionally sets the value of both the reference and mark.

Parameters:
newReference - the new value for the reference
newMark - the new value for the mark


"
AtomicMarkableReference,"weakCompareAndSet(V expectedReference, V newReference, boolean expectedMark, boolean newMark)",boolean,Atomically sets the value of both the reference and mark to the given update values if the current reference is == to the expected reference and the current mark is equal to the expected mark.,"

weakCompareAndSet
public boolean weakCompareAndSet(V expectedReference,
                                 V newReference,
                                 boolean expectedMark,
                                 boolean newMark)
Atomically sets the value of both the reference and mark
 to the given update values if the
 current reference is == to the expected reference
 and the current mark is equal to the expected mark.

 May fail
 spuriously and does not provide ordering guarantees, so is
 only rarely an appropriate alternative to compareAndSet.

Parameters:
expectedReference - the expected value of the reference
newReference - the new value for the reference
expectedMark - the expected value of the mark
newMark - the new value for the mark
Returns:
true if successful


"
AtomicReference,"accumulateAndGet(V x, BinaryOperator<V> accumulatorFunction)",V,"Atomically updates the current value with the results of applying the given function to the current and given values, returning the updated value.","

accumulateAndGet
public final V accumulateAndGet(V x,
                                BinaryOperator<V> accumulatorFunction)
Atomically updates the current value with the results of
 applying the given function to the current and given values,
 returning the updated value. The function should be
 side-effect-free, since it may be re-applied when attempted
 updates fail due to contention among threads.  The function
 is applied with the current value as its first argument,
 and the given update as the second argument.

Parameters:
x - the update value
accumulatorFunction - a side-effect-free function of two arguments
Returns:
the updated value
Since:
1.8


"
AtomicReference,"compareAndSet(V expect, V update)",boolean,Atomically sets the value to the given updated value if the current value == the expected value.,"

compareAndSet
public final boolean compareAndSet(V expect,
                                   V update)
Atomically sets the value to the given updated value
 if the current value == the expected value.

Parameters:
expect - the expected value
update - the new value
Returns:
true if successful. False return indicates that
 the actual value was not equal to the expected value.


"
AtomicReference,get(),V,Gets the current value.,"

get
public final V get()
Gets the current value.

Returns:
the current value


"
AtomicReference,"getAndAccumulate(V x, BinaryOperator<V> accumulatorFunction)",V,"Atomically updates the current value with the results of applying the given function to the current and given values, returning the previous value.","

getAndAccumulate
public final V getAndAccumulate(V x,
                                BinaryOperator<V> accumulatorFunction)
Atomically updates the current value with the results of
 applying the given function to the current and given values,
 returning the previous value. The function should be
 side-effect-free, since it may be re-applied when attempted
 updates fail due to contention among threads.  The function
 is applied with the current value as its first argument,
 and the given update as the second argument.

Parameters:
x - the update value
accumulatorFunction - a side-effect-free function of two arguments
Returns:
the previous value
Since:
1.8


"
AtomicReference,getAndSet(V newValue),V,Atomically sets to the given value and returns the old value.,"

getAndSet
public final V getAndSet(V newValue)
Atomically sets to the given value and returns the old value.

Parameters:
newValue - the new value
Returns:
the previous value


"
AtomicReference,getAndUpdate(UnaryOperator<V> updateFunction),V,"Atomically updates the current value with the results of applying the given function, returning the previous value.","

getAndUpdate
public final V getAndUpdate(UnaryOperator<V> updateFunction)
Atomically updates the current value with the results of
 applying the given function, returning the previous value. The
 function should be side-effect-free, since it may be re-applied
 when attempted updates fail due to contention among threads.

Parameters:
updateFunction - a side-effect-free function
Returns:
the previous value
Since:
1.8


"
AtomicReference,lazySet(V newValue),void,Eventually sets to the given value.,"

lazySet
public final void lazySet(V newValue)
Eventually sets to the given value.

Parameters:
newValue - the new value
Since:
1.6


"
AtomicReference,set(V newValue),void,Sets to the given value.,"

set
public final void set(V newValue)
Sets to the given value.

Parameters:
newValue - the new value


"
AtomicReference,toString(),String,Returns the String representation of the current value.,"

toString
public String toString()
Returns the String representation of the current value.

Overrides:
toString in class Object
Returns:
the String representation of the current value


"
AtomicReference,updateAndGet(UnaryOperator<V> updateFunction),V,"Atomically updates the current value with the results of applying the given function, returning the updated value.","

updateAndGet
public final V updateAndGet(UnaryOperator<V> updateFunction)
Atomically updates the current value with the results of
 applying the given function, returning the updated value. The
 function should be side-effect-free, since it may be re-applied
 when attempted updates fail due to contention among threads.

Parameters:
updateFunction - a side-effect-free function
Returns:
the updated value
Since:
1.8


"
AtomicReference,"weakCompareAndSet(V expect, V update)",boolean,Atomically sets the value to the given updated value if the current value == the expected value.,"

weakCompareAndSet
public final boolean weakCompareAndSet(V expect,
                                       V update)
Atomically sets the value to the given updated value
 if the current value == the expected value.

 May fail
 spuriously and does not provide ordering guarantees, so is
 only rarely an appropriate alternative to compareAndSet.

Parameters:
expect - the expected value
update - the new value
Returns:
true if successful


"
AtomicReferenceArray,"accumulateAndGet(int i, E x, BinaryOperator<E> accumulatorFunction)",E,"Atomically updates the element at index i with the results of applying the given function to the current and given values, returning the updated value.","

accumulateAndGet
public final E accumulateAndGet(int i,
                                E x,
                                BinaryOperator<E> accumulatorFunction)
Atomically updates the element at index i with the
 results of applying the given function to the current and
 given values, returning the updated value. The function should
 be side-effect-free, since it may be re-applied when attempted
 updates fail due to contention among threads.  The function is
 applied with the current value at index i as its first
 argument, and the given update as the second argument.

Parameters:
i - the index
x - the update value
accumulatorFunction - a side-effect-free function of two arguments
Returns:
the updated value
Since:
1.8


"
AtomicReferenceArray,"compareAndSet(int i, E expect, E update)",boolean,Atomically sets the element at position i to the given updated value if the current value == the expected value.,"

compareAndSet
public final boolean compareAndSet(int i,
                                   E expect,
                                   E update)
Atomically sets the element at position i to the given
 updated value if the current value == the expected value.

Parameters:
i - the index
expect - the expected value
update - the new value
Returns:
true if successful. False return indicates that
 the actual value was not equal to the expected value.


"
AtomicReferenceArray,get(int i),E,Gets the current value at position i.,"

get
public final E get(int i)
Gets the current value at position i.

Parameters:
i - the index
Returns:
the current value


"
AtomicReferenceArray,"getAndAccumulate(int i, E x, BinaryOperator<E> accumulatorFunction)",E,"Atomically updates the element at index i with the results of applying the given function to the current and given values, returning the previous value.","

getAndAccumulate
public final E getAndAccumulate(int i,
                                E x,
                                BinaryOperator<E> accumulatorFunction)
Atomically updates the element at index i with the
 results of applying the given function to the current and
 given values, returning the previous value. The function should
 be side-effect-free, since it may be re-applied when attempted
 updates fail due to contention among threads.  The function is
 applied with the current value at index i as its first
 argument, and the given update as the second argument.

Parameters:
i - the index
x - the update value
accumulatorFunction - a side-effect-free function of two arguments
Returns:
the previous value
Since:
1.8


"
AtomicReferenceArray,"getAndSet(int i, E newValue)",E,Atomically sets the element at position i to the given value and returns the old value.,"

getAndSet
public final E getAndSet(int i,
                         E newValue)
Atomically sets the element at position i to the given
 value and returns the old value.

Parameters:
i - the index
newValue - the new value
Returns:
the previous value


"
AtomicReferenceArray,"getAndUpdate(int i, UnaryOperator<E> updateFunction)",E,"Atomically updates the element at index i with the results of applying the given function, returning the previous value.","

getAndUpdate
public final E getAndUpdate(int i,
                            UnaryOperator<E> updateFunction)
Atomically updates the element at index i with the results
 of applying the given function, returning the previous value. The
 function should be side-effect-free, since it may be re-applied
 when attempted updates fail due to contention among threads.

Parameters:
i - the index
updateFunction - a side-effect-free function
Returns:
the previous value
Since:
1.8


"
AtomicReferenceArray,"lazySet(int i, E newValue)",void,Eventually sets the element at position i to the given value.,"

lazySet
public final void lazySet(int i,
                          E newValue)
Eventually sets the element at position i to the given value.

Parameters:
i - the index
newValue - the new value
Since:
1.6


"
AtomicReferenceArray,length(),int,Returns the length of the array.,"

length
public final int length()
Returns the length of the array.

Returns:
the length of the array


"
AtomicReferenceArray,"set(int i, E newValue)",void,Sets the element at position i to the given value.,"

set
public final void set(int i,
                      E newValue)
Sets the element at position i to the given value.

Parameters:
i - the index
newValue - the new value


"
AtomicReferenceArray,toString(),String,Returns the String representation of the current values of array.,"

toString
public String toString()
Returns the String representation of the current values of array.

Overrides:
toString in class Object
Returns:
the String representation of the current values of array


"
AtomicReferenceArray,"updateAndGet(int i, UnaryOperator<E> updateFunction)",E,"Atomically updates the element at index i with the results of applying the given function, returning the updated value.","

updateAndGet
public final E updateAndGet(int i,
                            UnaryOperator<E> updateFunction)
Atomically updates the element at index i with the results
 of applying the given function, returning the updated value. The
 function should be side-effect-free, since it may be re-applied
 when attempted updates fail due to contention among threads.

Parameters:
i - the index
updateFunction - a side-effect-free function
Returns:
the updated value
Since:
1.8


"
AtomicReferenceArray,"weakCompareAndSet(int i, E expect, E update)",boolean,Atomically sets the element at position i to the given updated value if the current value == the expected value.,"

weakCompareAndSet
public final boolean weakCompareAndSet(int i,
                                       E expect,
                                       E update)
Atomically sets the element at position i to the given
 updated value if the current value == the expected value.

 May fail
 spuriously and does not provide ordering guarantees, so is
 only rarely an appropriate alternative to compareAndSet.

Parameters:
i - the index
expect - the expected value
update - the new value
Returns:
true if successful


"
AtomicReferenceFieldUpdater,"accumulateAndGet(T obj, V x, BinaryOperator<V> accumulatorFunction)",V,"Atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the updated value.","

accumulateAndGet
public final V accumulateAndGet(T obj,
                                V x,
                                BinaryOperator<V> accumulatorFunction)
Atomically updates the field of the given object managed by this
 updater with the results of applying the given function to the
 current and given values, returning the updated value. The
 function should be side-effect-free, since it may be re-applied
 when attempted updates fail due to contention among threads.  The
 function is applied with the current value as its first argument,
 and the given update as the second argument.

Parameters:
obj - An object whose field to get and set
x - the update value
accumulatorFunction - a side-effect-free function of two arguments
Returns:
the updated value
Since:
1.8


"
AtomicReferenceFieldUpdater,"compareAndSet(T obj, V expect, V update)",abstract boolean,Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value.,"

compareAndSet
public abstract boolean compareAndSet(T obj,
                                      V expect,
                                      V update)
Atomically sets the field of the given object managed by this updater
 to the given updated value if the current value == the
 expected value. This method is guaranteed to be atomic with respect to
 other calls to compareAndSet and set, but not
 necessarily with respect to other changes in the field.

Parameters:
obj - An object whose field to conditionally set
expect - the expected value
update - the new value
Returns:
true if successful


"
AtomicReferenceFieldUpdater,get(T obj),abstract V,Gets the current value held in the field of the given object managed by this updater.,"

get
public abstract V get(T obj)
Gets the current value held in the field of the given object managed
 by this updater.

Parameters:
obj - An object whose field to get
Returns:
the current value


"
AtomicReferenceFieldUpdater,"getAndAccumulate(T obj, V x, BinaryOperator<V> accumulatorFunction)",V,"Atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the previous value.","

getAndAccumulate
public final V getAndAccumulate(T obj,
                                V x,
                                BinaryOperator<V> accumulatorFunction)
Atomically updates the field of the given object managed by this
 updater with the results of applying the given function to the
 current and given values, returning the previous value. The
 function should be side-effect-free, since it may be re-applied
 when attempted updates fail due to contention among threads.  The
 function is applied with the current value as its first argument,
 and the given update as the second argument.

Parameters:
obj - An object whose field to get and set
x - the update value
accumulatorFunction - a side-effect-free function of two arguments
Returns:
the previous value
Since:
1.8


"
AtomicReferenceFieldUpdater,"getAndSet(T obj, V newValue)",V,Atomically sets the field of the given object managed by this updater to the given value and returns the old value.,"

getAndSet
public V getAndSet(T obj,
                   V newValue)
Atomically sets the field of the given object managed by this updater
 to the given value and returns the old value.

Parameters:
obj - An object whose field to get and set
newValue - the new value
Returns:
the previous value


"
AtomicReferenceFieldUpdater,"getAndUpdate(T obj, UnaryOperator<V> updateFunction)",V,"Atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the previous value.","

getAndUpdate
public final V getAndUpdate(T obj,
                            UnaryOperator<V> updateFunction)
Atomically updates the field of the given object managed by this updater
 with the results of applying the given function, returning the previous
 value. The function should be side-effect-free, since it may be
 re-applied when attempted updates fail due to contention among threads.

Parameters:
obj - An object whose field to get and set
updateFunction - a side-effect-free function
Returns:
the previous value
Since:
1.8


"
AtomicReferenceFieldUpdater,"lazySet(T obj, V newValue)",abstract void,Eventually sets the field of the given object managed by this updater to the given updated value.,"

lazySet
public abstract void lazySet(T obj,
                             V newValue)
Eventually sets the field of the given object managed by this
 updater to the given updated value.

Parameters:
obj - An object whose field to set
newValue - the new value
Since:
1.6


"
AtomicReferenceFieldUpdater,"newUpdater(Class<U> tclass, Class<W> vclass, String fieldName)","static <U,W> AtomicReferenceFieldUpdater<U,W>",Creates and returns an updater for objects with the given field.,"

newUpdater
public static <U,W> AtomicReferenceFieldUpdater<U,W> newUpdater(Class<U> tclass,
                                                                Class<W> vclass,
                                                                String fieldName)
Creates and returns an updater for objects with the given field.
 The Class arguments are needed to check that reflective types and
 generic types match.

Type Parameters:
U - the type of instances of tclass
W - the type of instances of vclass
Parameters:
tclass - the class of the objects holding the field
vclass - the class of the field
fieldName - the name of the field to be updated
Returns:
the updater
Throws:
ClassCastException - if the field is of the wrong type
IllegalArgumentException - if the field is not volatile
RuntimeException - with a nested reflection-based
 exception if the class does not hold field or is the wrong type,
 or the field is inaccessible to the caller according to Java language
 access control


"
AtomicReferenceFieldUpdater,"set(T obj, V newValue)",abstract void,Sets the field of the given object managed by this updater to the given updated value.,"

set
public abstract void set(T obj,
                         V newValue)
Sets the field of the given object managed by this updater to the
 given updated value. This operation is guaranteed to act as a volatile
 store with respect to subsequent invocations of compareAndSet.

Parameters:
obj - An object whose field to set
newValue - the new value


"
AtomicReferenceFieldUpdater,"updateAndGet(T obj, UnaryOperator<V> updateFunction)",V,"Atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the updated value.","

updateAndGet
public final V updateAndGet(T obj,
                            UnaryOperator<V> updateFunction)
Atomically updates the field of the given object managed by this updater
 with the results of applying the given function, returning the updated
 value. The function should be side-effect-free, since it may be
 re-applied when attempted updates fail due to contention among threads.

Parameters:
obj - An object whose field to get and set
updateFunction - a side-effect-free function
Returns:
the updated value
Since:
1.8


"
AtomicReferenceFieldUpdater,"weakCompareAndSet(T obj, V expect, V update)",abstract boolean,Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value.,"

weakCompareAndSet
public abstract boolean weakCompareAndSet(T obj,
                                          V expect,
                                          V update)
Atomically sets the field of the given object managed by this updater
 to the given updated value if the current value == the
 expected value. This method is guaranteed to be atomic with respect to
 other calls to compareAndSet and set, but not
 necessarily with respect to other changes in the field.

 May fail
 spuriously and does not provide ordering guarantees, so is
 only rarely an appropriate alternative to compareAndSet.

Parameters:
obj - An object whose field to conditionally set
expect - the expected value
update - the new value
Returns:
true if successful


"
AtomicStampedReference,"attemptStamp(V expectedReference, int newStamp)",boolean,Atomically sets the value of the stamp to the given update value if the current reference is == to the expected reference.,"

attemptStamp
public boolean attemptStamp(V expectedReference,
                            int newStamp)
Atomically sets the value of the stamp to the given update value
 if the current reference is == to the expected
 reference.  Any given invocation of this operation may fail
 (return false) spuriously, but repeated invocation
 when the current value holds the expected value and no other
 thread is also attempting to set the value will eventually
 succeed.

Parameters:
expectedReference - the expected value of the reference
newStamp - the new value for the stamp
Returns:
true if successful


"
AtomicStampedReference,"compareAndSet(V expectedReference, V newReference, int expectedStamp, int newStamp)",boolean,Atomically sets the value of both the reference and stamp to the given update values if the current reference is == to the expected reference and the current stamp is equal to the expected stamp.,"

compareAndSet
public boolean compareAndSet(V expectedReference,
                             V newReference,
                             int expectedStamp,
                             int newStamp)
Atomically sets the value of both the reference and stamp
 to the given update values if the
 current reference is == to the expected reference
 and the current stamp is equal to the expected stamp.

Parameters:
expectedReference - the expected value of the reference
newReference - the new value for the reference
expectedStamp - the expected value of the stamp
newStamp - the new value for the stamp
Returns:
true if successful


"
AtomicStampedReference,get(int[] stampHolder),V,Returns the current values of both the reference and the stamp.,"

get
public V get(int[] stampHolder)
Returns the current values of both the reference and the stamp.
 Typical usage is int[1] holder; ref = v.get(holder); .

Parameters:
stampHolder - an array of size of at least one.  On return,
 stampholder[0] will hold the value of the stamp.
Returns:
the current value of the reference


"
AtomicStampedReference,getReference(),V,Returns the current value of the reference.,"

getReference
public V getReference()
Returns the current value of the reference.

Returns:
the current value of the reference


"
AtomicStampedReference,getStamp(),int,Returns the current value of the stamp.,"

getStamp
public int getStamp()
Returns the current value of the stamp.

Returns:
the current value of the stamp


"
AtomicStampedReference,"set(V newReference, int newStamp)",void,Unconditionally sets the value of both the reference and stamp.,"

set
public void set(V newReference,
                int newStamp)
Unconditionally sets the value of both the reference and stamp.

Parameters:
newReference - the new value for the reference
newStamp - the new value for the stamp


"
AtomicStampedReference,"weakCompareAndSet(V expectedReference, V newReference, int expectedStamp, int newStamp)",boolean,Atomically sets the value of both the reference and stamp to the given update values if the current reference is == to the expected reference and the current stamp is equal to the expected stamp.,"

weakCompareAndSet
public boolean weakCompareAndSet(V expectedReference,
                                 V newReference,
                                 int expectedStamp,
                                 int newStamp)
Atomically sets the value of both the reference and stamp
 to the given update values if the
 current reference is == to the expected reference
 and the current stamp is equal to the expected stamp.

 May fail
 spuriously and does not provide ordering guarantees, so is
 only rarely an appropriate alternative to compareAndSet.

Parameters:
expectedReference - the expected value of the reference
newReference - the new value for the reference
expectedStamp - the expected value of the stamp
newStamp - the new value for the stamp
Returns:
true if successful


"
DoubleAccumulator,accumulate(double x),void,Updates with the given value.,"

accumulate
public void accumulate(double x)
Updates with the given value.

Parameters:
x - the value


"
DoubleAccumulator,doubleValue(),double,Equivalent to get().,"

doubleValue
public double doubleValue()
Equivalent to get().

Specified by:
doubleValue in class Number
Returns:
the current value


"
DoubleAccumulator,floatValue(),float,Returns the current value as a float after a narrowing primitive conversion.,"

floatValue
public float floatValue()
Returns the current value as a float
 after a narrowing primitive conversion.

Specified by:
floatValue in class Number
Returns:
the numeric value represented by this object after conversion
          to type float.


"
DoubleAccumulator,get(),double,Returns the current value.,"

get
public double get()
Returns the current value.  The returned value is NOT
 an atomic snapshot; invocation in the absence of concurrent
 updates returns an accurate result, but concurrent updates that
 occur while the value is being calculated might not be
 incorporated.

Returns:
the current value


"
DoubleAccumulator,getThenReset(),double,Equivalent in effect to get() followed by reset().,"

getThenReset
public double getThenReset()
Equivalent in effect to get() followed by reset(). This method may apply for example during quiescent
 points between multithreaded computations.  If there are
 updates concurrent with this method, the returned value is
 not guaranteed to be the final value occurring before
 the reset.

Returns:
the value before reset


"
DoubleAccumulator,intValue(),int,Returns the current value as an int after a narrowing primitive conversion.,"

intValue
public int intValue()
Returns the current value as an int
 after a narrowing primitive conversion.

Specified by:
intValue in class Number
Returns:
the numeric value represented by this object after conversion
          to type int.


"
DoubleAccumulator,longValue(),long,Returns the current value as a long after a narrowing primitive conversion.,"

longValue
public long longValue()
Returns the current value as a long
 after a narrowing primitive conversion.

Specified by:
longValue in class Number
Returns:
the numeric value represented by this object after conversion
          to type long.


"
DoubleAccumulator,reset(),void,Resets variables maintaining updates to the identity value.,"

reset
public void reset()
Resets variables maintaining updates to the identity value.
 This method may be a useful alternative to creating a new
 updater, but is only effective if there are no concurrent
 updates.  Because this method is intrinsically racy, it should
 only be used when it is known that no threads are concurrently
 updating.

"
DoubleAccumulator,toString(),String,Returns the String representation of the current value.,"

toString
public String toString()
Returns the String representation of the current value.

Overrides:
toString in class Object
Returns:
the String representation of the current value


"
DoubleAdder,add(double x),void,Adds the given value.,"

add
public void add(double x)
Adds the given value.

Parameters:
x - the value to add


"
DoubleAdder,doubleValue(),double,Equivalent to sum().,"

doubleValue
public double doubleValue()
Equivalent to sum().

Specified by:
doubleValue in class Number
Returns:
the sum


"
DoubleAdder,floatValue(),float,Returns the sum() as a float after a narrowing primitive conversion.,"

floatValue
public float floatValue()
Returns the sum() as a float
 after a narrowing primitive conversion.

Specified by:
floatValue in class Number
Returns:
the numeric value represented by this object after conversion
          to type float.


"
DoubleAdder,intValue(),int,Returns the sum() as an int after a narrowing primitive conversion.,"

intValue
public int intValue()
Returns the sum() as an int after a
 narrowing primitive conversion.

Specified by:
intValue in class Number
Returns:
the numeric value represented by this object after conversion
          to type int.


"
DoubleAdder,longValue(),long,Returns the sum() as a long after a narrowing primitive conversion.,"

longValue
public long longValue()
Returns the sum() as a long after a
 narrowing primitive conversion.

Specified by:
longValue in class Number
Returns:
the numeric value represented by this object after conversion
          to type long.


"
DoubleAdder,reset(),void,Resets variables maintaining the sum to zero.,"

reset
public void reset()
Resets variables maintaining the sum to zero.  This method may
 be a useful alternative to creating a new adder, but is only
 effective if there are no concurrent updates.  Because this
 method is intrinsically racy, it should only be used when it is
 known that no threads are concurrently updating.

"
DoubleAdder,sum(),double,Returns the current sum.,"

sum
public double sum()
Returns the current sum.  The returned value is NOT an
 atomic snapshot; invocation in the absence of concurrent
 updates returns an accurate result, but concurrent updates that
 occur while the sum is being calculated might not be
 incorporated.  Also, because floating-point arithmetic is not
 strictly associative, the returned result need not be identical
 to the value that would be obtained in a sequential series of
 updates to a single variable.

Returns:
the sum


"
DoubleAdder,sumThenReset(),double,Equivalent in effect to sum() followed by reset().,"

sumThenReset
public double sumThenReset()
Equivalent in effect to sum() followed by reset(). This method may apply for example during quiescent
 points between multithreaded computations.  If there are
 updates concurrent with this method, the returned value is
 not guaranteed to be the final value occurring before
 the reset.

Returns:
the sum


"
DoubleAdder,toString(),String,Returns the String representation of the sum().,"

toString
public String toString()
Returns the String representation of the sum().

Overrides:
toString in class Object
Returns:
the String representation of the sum()


"
LongAccumulator,accumulate(long x),void,Updates with the given value.,"

accumulate
public void accumulate(long x)
Updates with the given value.

Parameters:
x - the value


"
LongAccumulator,doubleValue(),double,Returns the current value as a double after a widening primitive conversion.,"

doubleValue
public double doubleValue()
Returns the current value as a double
 after a widening primitive conversion.

Specified by:
doubleValue in class Number
Returns:
the numeric value represented by this object after conversion
          to type double.


"
LongAccumulator,floatValue(),float,Returns the current value as a float after a widening primitive conversion.,"

floatValue
public float floatValue()
Returns the current value as a float
 after a widening primitive conversion.

Specified by:
floatValue in class Number
Returns:
the numeric value represented by this object after conversion
          to type float.


"
LongAccumulator,get(),long,Returns the current value.,"

get
public long get()
Returns the current value.  The returned value is NOT
 an atomic snapshot; invocation in the absence of concurrent
 updates returns an accurate result, but concurrent updates that
 occur while the value is being calculated might not be
 incorporated.

Returns:
the current value


"
LongAccumulator,getThenReset(),long,Equivalent in effect to get() followed by reset().,"

getThenReset
public long getThenReset()
Equivalent in effect to get() followed by reset(). This method may apply for example during quiescent
 points between multithreaded computations.  If there are
 updates concurrent with this method, the returned value is
 not guaranteed to be the final value occurring before
 the reset.

Returns:
the value before reset


"
LongAccumulator,intValue(),int,Returns the current value as an int after a narrowing primitive conversion.,"

intValue
public int intValue()
Returns the current value as an int
 after a narrowing primitive conversion.

Specified by:
intValue in class Number
Returns:
the numeric value represented by this object after conversion
          to type int.


"
LongAccumulator,longValue(),long,Equivalent to get().,"

longValue
public long longValue()
Equivalent to get().

Specified by:
longValue in class Number
Returns:
the current value


"
LongAccumulator,reset(),void,Resets variables maintaining updates to the identity value.,"

reset
public void reset()
Resets variables maintaining updates to the identity value.
 This method may be a useful alternative to creating a new
 updater, but is only effective if there are no concurrent
 updates.  Because this method is intrinsically racy, it should
 only be used when it is known that no threads are concurrently
 updating.

"
LongAccumulator,toString(),String,Returns the String representation of the current value.,"

toString
public String toString()
Returns the String representation of the current value.

Overrides:
toString in class Object
Returns:
the String representation of the current value


"
LongAdder,add(long x),void,Adds the given value.,"

add
public void add(long x)
Adds the given value.

Parameters:
x - the value to add


"
LongAdder,decrement(),void,Equivalent to add(-1).,"

decrement
public void decrement()
Equivalent to add(-1).

"
LongAdder,doubleValue(),double,Returns the sum() as a double after a widening primitive conversion.,"

doubleValue
public double doubleValue()
Returns the sum() as a double after a widening
 primitive conversion.

Specified by:
doubleValue in class Number
Returns:
the numeric value represented by this object after conversion
          to type double.


"
LongAdder,floatValue(),float,Returns the sum() as a float after a widening primitive conversion.,"

floatValue
public float floatValue()
Returns the sum() as a float
 after a widening primitive conversion.

Specified by:
floatValue in class Number
Returns:
the numeric value represented by this object after conversion
          to type float.


"
LongAdder,increment(),void,Equivalent to add(1).,"

increment
public void increment()
Equivalent to add(1).

"
LongAdder,intValue(),int,Returns the sum() as an int after a narrowing primitive conversion.,"

intValue
public int intValue()
Returns the sum() as an int after a narrowing
 primitive conversion.

Specified by:
intValue in class Number
Returns:
the numeric value represented by this object after conversion
          to type int.


"
LongAdder,longValue(),long,Equivalent to sum().,"

longValue
public long longValue()
Equivalent to sum().

Specified by:
longValue in class Number
Returns:
the sum


"
LongAdder,reset(),void,Resets variables maintaining the sum to zero.,"

reset
public void reset()
Resets variables maintaining the sum to zero.  This method may
 be a useful alternative to creating a new adder, but is only
 effective if there are no concurrent updates.  Because this
 method is intrinsically racy, it should only be used when it is
 known that no threads are concurrently updating.

"
LongAdder,sum(),long,Returns the current sum.,"

sum
public long sum()
Returns the current sum.  The returned value is NOT an
 atomic snapshot; invocation in the absence of concurrent
 updates returns an accurate result, but concurrent updates that
 occur while the sum is being calculated might not be
 incorporated.

Returns:
the sum


"
LongAdder,sumThenReset(),long,Equivalent in effect to sum() followed by reset().,"

sumThenReset
public long sumThenReset()
Equivalent in effect to sum() followed by reset(). This method may apply for example during quiescent
 points between multithreaded computations.  If there are
 updates concurrent with this method, the returned value is
 not guaranteed to be the final value occurring before
 the reset.

Returns:
the sum


"
LongAdder,toString(),String,Returns the String representation of the sum().,"

toString
public String toString()
Returns the String representation of the sum().

Overrides:
toString in class Object
Returns:
the String representation of the sum()


"
