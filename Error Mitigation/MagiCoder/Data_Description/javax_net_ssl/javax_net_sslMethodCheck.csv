Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,CertPathTrustManagerParameters,1,CertPathTrustManagerParameters(),False,,NULL
0,CertPathTrustManagerParameters,2,getTrustManagers(),False,,NULL
0,CertPathTrustManagerParameters,3,getCheckEndEntity(),False,,NULL
0,CertPathTrustManagerParameters,4,getCheckCRLs(),False,,NULL
0,CertPathTrustManagerParameters,5,getCheckRevocation(),False,,NULL
1,ExtendedSSLSession,1,getCipherSuite(),False,,NULL
1,ExtendedSSLSession,2,getPeerCertificates(),False,,NULL
1,ExtendedSSLSession,3,getPeerCertificateChain(),False,,NULL
1,ExtendedSSLSession,4,getPeerPrincipal(),False,,NULL
1,ExtendedSSLSession,5,getRequestedServerNames(),False,,NULL
1,ExtendedSSLSession,6,getRequestedSessionId(),False,,NULL
1,ExtendedSSLSession,7,getRequestedTLSVersions(),False,,NULL
1,ExtendedSSLSession,8,getRequestedCipherSuites(),False,,NULL
1,ExtendedSSLSession,9,getRequestedExtensions(),False,,NULL
1,ExtendedSSLSession,10,getRequestedApplicationProtocols(),False,,NULL
1,ExtendedSSLSession,11,getRequestedApplicationProtocols(),False,,NULL
1,ExtendedSSLSession,12,getRequestedApplicationProtocols(),False,,NULL
1,ExtendedSSLSession,13,getRequestedApplicationProtocols(),False,,NULL
1,ExtendedSSLSession,14,getRequestedApplicationProtocols(),False,,NULL
1,ExtendedSSLSession,15,getRequestedApplicationProtocols(),False,,NULL
1,ExtendedSSLSession,16,getRequestedApplicationProtocols(),False,,NULL
1,ExtendedSSLSession,17,getRequestedApplicationProtocols(),False,,NULL
1,ExtendedSSLSession,18,getRequestedApplicationProtocols(),False,,NULL
1,ExtendedSSLSession,19,getRequestedApplicationProtocols(),False,,NULL
1,ExtendedSSLSession,20,getRequestedApplicationProtocols(),False,,NULL
2,HandshakeCompletedEvent,1,HandshakeCompletedEvent(SSLSocket sslSocket),False,,NULL
2,HandshakeCompletedEvent,2,SSLSocket getSSLSocket(),False,,NULL
2,HandshakeCompletedEvent,3,String getCipherSuite(),True,Returns the cipher suite in use by the session which was produced by the handshake.,"

getCipherSuite
public String getCipherSuite()
Returns the cipher suite in use by the session which was produced
 by the handshake.  (This is a convenience method for
 getting the ciphersuite from the SSLsession.)

Returns:
the name of the cipher suite negotiated during this session.


"
2,HandshakeCompletedEvent,4,String getLocalPrincipal(),False,,NULL
2,HandshakeCompletedEvent,5,String getRemotePrincipal(),False,,NULL
2,HandshakeCompletedEvent,6,String getLocalCertificates(),False,,NULL
2,HandshakeCompletedEvent,7,String getRemoteCertificates(),False,,NULL
2,HandshakeCompletedEvent,8,String getLocalCertificate(),False,,NULL
2,HandshakeCompletedEvent,9,String getRemoteCertificate(),False,,NULL
2,HandshakeCompletedEvent,10,String getLocalCertificateType(),False,,NULL
2,HandshakeCompletedEvent,11,String getRemoteCertificateType(),False,,NULL
2,HandshakeCompletedEvent,12,String getLocalCertificateKeyType(),False,,NULL
2,HandshakeCompletedEvent,13,String getRemoteCertificateKeyType(),False,,NULL
2,HandshakeCompletedEvent,14,String getLocalCertificateKey(),False,,NULL
2,HandshakeCompletedEvent,15,String getRemoteCertificateKey(),False,,NULL
2,HandshakeCompletedEvent,16,String getLocalCertificateSerialNumber(),False,,NULL
2,HandshakeCompletedEvent,17,String getRemoteCertificateSerialNumber(),False,,NULL
2,HandshakeCompletedEvent,18,String getLocalCertificateValidNotBeforeDate(),False,,NULL
2,HandshakeCompletedEvent,19,String getRemoteCertificateValidNotBeforeDate(),False,,NULL
2,HandshakeCompletedEvent,20,String getLocalCertificateValidNotAfterDate(),False,,NULL
2,HandshakeCompletedEvent,21,String getRemoteCertificateValidNotAfterDate(),False,,NULL
2,HandshakeCompletedEvent,22,String getLocalCertificateIssuerDN(),False,,NULL
2,HandshakeCompletedEvent,23,String getRemoteCertificateIssuerDN(),False,,NULL
2,HandshakeCompletedEvent,24,String getLocalCertificateSubjectDN(),False,,NULL
2,HandshakeCompletedEvent,25,String getRemoteCertificateSubjectDN(),False,,NULL
3,HttpsURLConnection,1,setSSLSocketFactory(SSLSocketFactory factory),False,,NULL
3,HttpsURLConnection,2,setHostnameVerifier(HostnameVerifier verifier),False,,NULL
3,HttpsURLConnection,3,setDefaultHostnameVerifier(HostnameVerifier verifier),False,,NULL
3,HttpsURLConnection,4,setDefaultSSLSocketFactory(SSLSocketFactory factory),False,,NULL
3,HttpsURLConnection,5,setRequestMethod(String method),False,,NULL
4,KeyManagerFactory,1,KeyManagerFactory(),False,,NULL
4,KeyManagerFactory,2,"init(KeyStore keystore, char[] password)",False,,NULL
4,KeyManagerFactory,3,"init(KeyStore keystore, char[] password, SecureRandom random)",False,,NULL
4,KeyManagerFactory,4,getKeyManagers(),False,,NULL
4,KeyManagerFactory,5,getAlgorithm(),False,,NULL
5,KeyManagerFactorySpi,1,KeyManagerFactorySpi(),False,,NULL
5,KeyManagerFactorySpi,2,init(KeyStore ks),False,,NULL
5,KeyManagerFactorySpi,3,getKeyManagers(),False,,NULL
5,KeyManagerFactorySpi,4,getAlgorithm(),False,,NULL
5,KeyManagerFactorySpi,5,"engineInit(KeyStore ks, char[] password)",False,,NULL
6,KeyStoreBuilderParameters,1,KeyStoreBuilderParameters(KeyStore.Builder[] keyStoreBuilders),False,,NULL
6,KeyStoreBuilderParameters,2,KeyStore.Builder[] getKeyStoreBuilders(),False,,NULL
6,KeyStoreBuilderParameters,3,void setKeyStoreBuilders(KeyStore.Builder[] keyStoreBuilders),False,,NULL
6,KeyStoreBuilderParameters,4,int size(),False,,NULL
6,KeyStoreBuilderParameters,5,KeyStore.Builder get(int index),False,,NULL
7,SNIHostName,1,SNIHostName(String hostName),False,,NULL
7,SNIHostName,2,String getHostName(),False,,NULL
7,SNIHostName,3,boolean equals(Object obj),True,Compares this server name to the specified object.,"

equals
public boolean equals(Object other)
Compares this server name to the specified object.
 
 Per RFC 6066, DNS
 hostnames are case-insensitive.  Two server hostnames are equal if,
 and only if, they have the same name type, and the hostnames are
 equal in a case-independent comparison.

Overrides:
equals in class SNIServerName
Parameters:
other - the other server name object to compare with.
Returns:
true if, and only if, the other is considered
         equal to this instance
See Also:
Object.hashCode(), 
HashMap


"
7,SNIHostName,4,int hashCode(),True,Returns a hash code value for this SNIHostName.,"

hashCode
public int hashCode()
Returns a hash code value for this SNIHostName.
 
 The hash code value is generated using the case-insensitive hostname
 of this SNIHostName.

Overrides:
hashCode in class SNIServerName
Returns:
a hash code value for this SNIHostName.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
7,SNIHostName,5,String toString(),True,"Returns a string representation of the object, including the DNS hostname in this SNIHostName object.","

toString
public String toString()
Returns a string representation of the object, including the DNS
 hostname in this SNIHostName object.
 
 The exact details of the representation are unspecified and subject
 to change, but the following may be regarded as typical:
 
     ""type=host_name (0), value= <hostname>""
 
 The ""<hostname>"" is an ASCII representation of the hostname,
 which may contains A-labels.  For example, a returned value of an pseudo
 hostname may look like:
 
     ""type=host_name (0), value=www.example.com""
 
 or
 
     ""type=host_name (0), value=xn--fsqu00a.xn--0zwm56d""
 

 Please NOTE that the exact details of the representation are unspecified
 and subject to change.

Overrides:
toString in class SNIServerName
Returns:
a string representation of the object.


"
8,SNIMatcher,1,boolean matches(SNIServerName serverName),True,Attempts to match the given SNIServerName.,"

matches
public abstract boolean matches(SNIServerName serverName)
Attempts to match the given SNIServerName.

Parameters:
serverName - the SNIServerName instance on which this matcher
         performs match operations
Returns:
true if, and only if, the matcher matches the
         given serverName
Throws:
NullPointerException - if serverName is null
IllegalArgumentException - if serverName is
         not of the given server name type of this matcher
See Also:
SNIServerName


"
8,SNIMatcher,2,boolean matches(String hostname),False,,NULL
8,SNIMatcher,3,boolean matches(String[] hostnames),False,,NULL
8,SNIMatcher,4,boolean matches(List<String> hostnames),False,,NULL
8,SNIMatcher,5,boolean matches(String[][] hostnameMappings),False,,NULL
9,SNIServerName,1,boolean equals(Object obj),True,"Indicates whether some other object is ""equal to"" this server name.","

equals
public boolean equals(Object other)
Indicates whether some other object is ""equal to"" this server name.

Overrides:
equals in class Object
Parameters:
other - the reference object with which to compare.
Returns:
true if, and only if, other is of the same class
         of this object, and has the same name type and
         encoded value as this server name.
See Also:
Object.hashCode(), 
HashMap


"
9,SNIServerName,2,int hashCode(),True,Returns a hash code value for this server name.,"

hashCode
public int hashCode()
Returns a hash code value for this server name.
 
 The hash code value is generated using the name type and encoded
 value of this server name.

Overrides:
hashCode in class Object
Returns:
a hash code value for this server name.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
9,SNIServerName,3,String getType(),False,,NULL
9,SNIServerName,4,String getValue(),False,,NULL
9,SNIServerName,5,String toString(),True,"Returns a string representation of this server name, including the server name type and the encoded server name value in this SNIServerName object.","

toString
public String toString()
Returns a string representation of this server name, including the server
 name type and the encoded server name value in this
 SNIServerName object.
 
 The exact details of the representation are unspecified and subject
 to change, but the following may be regarded as typical:
 
     ""type= <name type>, value= <name value>""
 

 In this class, the format of ""<name type>"" is
 ""[LITERAL] (INTEGER)"", where the optional ""LITERAL"" is the literal
 name, and INTEGER is the integer value of the name type.  The format
 of ""<name value>"" is ""XX:...:XX"", where ""XX"" is the
 hexadecimal digit representation of a byte value. For example, a
 returned value of an pseudo server name may look like:
 
     ""type=(31), value=77:77:77:2E:65:78:61:6D:70:6C:65:2E:63:6E""
 
 or
 
     ""type=host_name (0), value=77:77:77:2E:65:78:61:6D:70:6C:65:2E:63:6E""
 

 Please NOTE that the exact details of the representation are unspecified
 and subject to change, and subclasses may override the method with
 their own formats.

Overrides:
toString in class Object
Returns:
a string representation of this server name


"
10,SSLContext,1,SSLContext getInstance(String protocol),True,Returns a SSLContext object that implements the specified secure socket protocol.,"

getInstance
public static SSLContext getInstance(String protocol)
                              throws NoSuchAlgorithmException
Returns a SSLContext object that implements the
 specified secure socket protocol.

  This method traverses the list of registered security Providers,
 starting with the most preferred Provider.
 A new SSLContext object encapsulating the
 SSLContextSpi implementation from the first
 Provider that supports the specified protocol is returned.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
protocol - the standard name of the requested protocol.
          See the SSLContext section in the 
          Java Cryptography Architecture Standard Algorithm Name
          Documentation
          for information about standard protocol names.
Returns:
the new SSLContext object.
Throws:
NoSuchAlgorithmException - if no Provider supports a
          SSLContextSpi implementation for the
          specified protocol.
NullPointerException - if protocol is null.
See Also:
Provider


"
10,SSLContext,2,"SSLContext getInstance(String protocol, String provider)",True,Returns a SSLContext object that implements the specified secure socket protocol.,"

getInstance
public static SSLContext getInstance(String protocol,
                                     String provider)
                              throws NoSuchAlgorithmException,
                                     NoSuchProviderException
Returns a SSLContext object that implements the
 specified secure socket protocol.

  A new SSLContext object encapsulating the
 SSLContextSpi implementation from the specified provider
 is returned.  The specified provider must be registered
 in the security provider list.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
protocol - the standard name of the requested protocol.
          See the SSLContext section in the 
          Java Cryptography Architecture Standard Algorithm Name
          Documentation
          for information about standard protocol names.
provider - the name of the provider.
Returns:
the new SSLContext object.
Throws:
NoSuchAlgorithmException - if a SSLContextSpi
          implementation for the specified protocol is not
          available from the specified provider.
NoSuchProviderException - if the specified provider is not
          registered in the security provider list.
IllegalArgumentException - if the provider name is null or empty.
NullPointerException - if protocol is null.
See Also:
Provider


"
10,SSLContext,3,"SSLContext getInstance(String protocol, Provider provider)",True,Returns a SSLContext object that implements the specified secure socket protocol.,"

getInstance
public static SSLContext getInstance(String protocol,
                                     Provider provider)
                              throws NoSuchAlgorithmException
Returns a SSLContext object that implements the
 specified secure socket protocol.

  A new SSLContext object encapsulating the
 SSLContextSpi implementation from the specified Provider
 object is returned.  Note that the specified Provider object
 does not have to be registered in the provider list.

Parameters:
protocol - the standard name of the requested protocol.
          See the SSLContext section in the 
          Java Cryptography Architecture Standard Algorithm Name
          Documentation
          for information about standard protocol names.
provider - an instance of the provider.
Returns:
the new SSLContext object.
Throws:
NoSuchAlgorithmException - if a SSLContextSpi
          implementation for the specified protocol is not available
          from the specified Provider object.
IllegalArgumentException - if the provider is null.
NullPointerException - if protocol is null.
See Also:
Provider


"
10,SSLContext,4,"SSLContext getInstance(String protocol, String provider, SecureRandom random)",False,,NULL
10,SSLContext,5,"SSLContext getInstance(String protocol, Provider provider, SecureRandom random)",False,,NULL
11,SSLContextSpi,1,SSLContextSpi(),False,,NULL
11,SSLContextSpi,2,"void init(KeyManager[] km, TrustManager[] tm, SecureRandom sr)",False,,NULL
11,SSLContextSpi,3,SSLContextSpi copy(),False,,NULL
11,SSLContextSpi,4,SSLContext createSSLContext(),False,,NULL
11,SSLContextSpi,5,SSLEngine createSSLEngine(),False,,NULL
12,SSLEngine,1,SSLEngine(),False,,NULL
12,SSLEngine,2,setUseClientMode(boolean mode),False,,NULL
12,SSLEngine,3,beginHandshake(),False,,NULL
12,SSLEngine,4,getSession(),False,,NULL
12,SSLEngine,5,getHandshakeStatus(),False,,NULL
12,SSLEngine,6,getApplicationProtocol(),False,,NULL
12,SSLEngine,7,getEnabledProtocols(),False,,NULL
12,SSLEngine,8,getEnabledCipherSuites(),False,,NULL
12,SSLEngine,9,getNeedClientAuth(),False,,NULL
12,SSLEngine,10,getNeedServerAuth(),False,,NULL
12,SSLEngine,11,getWantClientAuth(),False,,NULL
12,SSLEngine,12,getWantServerAuth(),False,,NULL
12,SSLEngine,13,getPeerCertificates(),False,,NULL
12,SSLEngine,14,getLocalCertificate(),False,,NULL
12,SSLEngine,15,getLocalPrincipal(),False,,NULL
12,SSLEngine,16,getPeerPrincipal(),False,,NULL
12,SSLEngine,17,getSessionContext(),False,,NULL
12,SSLEngine,18,getApplicationProtocolSelector(),False,,NULL
12,SSLEngine,19,getDelegatedCredentials(),False,,NULL
12,SSLEngine,20,getDelegatedPrincipal(),False,,NULL
12,SSLEngine,21,getHandshakeApplicationProtocol(),False,,NULL
12,SSLEngine,22,getHandshakeApplicationProtocolSelector(),False,,NULL
12,SSLEngine,23,getHandshakeApplicationProtocolNegotiated(),False,,NULL
12,SSLEngine,24,getHandshakeApplicationProtocolNegotiation(),False,,NULL
12,SSLEngine,25,getHandshakeApplicationProtocolSelectorResult(),False,,NULL
12,SSLEngine,26,getHandshakeApplicationProtocolNegotiationResult(),False,,NULL
12,SSLEngine,27,getHandshakeApplicationProtocolSelectorResult(),False,,NULL
12,SSLEngine,28,getHandshakeApplicationProtocolNegotiationResult(),False,,NULL
12,SSLEngine,29,getHandshakeApplicationProtocolNegotiationResult(),False,,NULL
12,SSLEngine,30,getHandshakeApplicationProtocolNegotiationResult(),False,,NULL
13,SSLEngineResult,1,boolean isValid(),False,,NULL
13,SSLEngineResult,2,HandshakeStatus getHandshakeStatus(),False,,NULL
13,SSLEngineResult,3,HandshakeStatus getStatus(),False,,NULL
13,SSLEngineResult,4,boolean isCipherSuiteNegotiated(),False,,NULL
13,SSLEngineResult,5,boolean isApplicationData(),False,,NULL
13,SSLEngineResult,6,boolean isEmpty(),False,,NULL
13,SSLEngineResult,7,boolean isTruncated(),False,,NULL
13,SSLEngineResult,8,boolean isConsumed(),False,,NULL
13,SSLEngineResult,9,boolean isBuilt(),False,,NULL
13,SSLEngineResult,10,boolean isNeedMoreData(),False,,NULL
13,SSLEngineResult,11,boolean isNeedWrite(),False,,NULL
13,SSLEngineResult,12,boolean isNeedRead(),False,,NULL
13,SSLEngineResult,13,boolean isNeedTrafficUpdate(),False,,NULL
13,SSLEngineResult,14,boolean isNeedClientAuth(),False,,NULL
13,SSLEngineResult,15,boolean isNeedSessionTicket(),False,,NULL
13,SSLEngineResult,16,boolean isNeedSessionTicketExtension(),False,,NULL
13,SSLEngineResult,17,boolean isNeedSessionTicketKey(),False,,NULL
13,SSLEngineResult,18,boolean isNeedSessionTicketSignature(),False,,NULL
13,SSLEngineResult,19,boolean isNeedSessionTicketSignatureAndKey(),False,,NULL
13,SSLEngineResult,20,boolean isNeedSessionTicketSignatureAndKeyExtension(),False,,NULL
13,SSLEngineResult,21,boolean isNeedSessionTicketSignatureAndKeyExtensionAndTicket(),False,,NULL
13,SSLEngineResult,22,boolean isNeedSessionTicketSignatureAndKeyExtensionAndTicketExtension(),False,,NULL
13,SSLEngineResult,23,boolean isNeedSessionTicketSignatureAndKeyExtensionAndTicketExtensionAndTicket(),False,,NULL
13,SSLEngineResult,24,boolean isNeedSessionTicketSignatureAndKeyExtensionAndTicketExtensionAndTicketExtension(),False,,NULL
13,SSLEngineResult,25,boolean isNeedSessionTicketSignatureAndKeyExtensionAndTicketExtensionAndTicketExtensionAndTicket(),False,,NULL
14,SSLParameters,1,SSLParameters(),False,,NULL
14,SSLParameters,2,setCipherSuites(String[] cipherSuites),False,,NULL
14,SSLParameters,3,setProtocols(String[] protocols),False,,NULL
14,SSLParameters,4,setNeedClientAuth(boolean needClientAuth),False,,NULL
14,SSLParameters,5,setWantClientAuth(boolean wantClientAuth),False,,NULL
14,SSLParameters,6,setUseClientMode(boolean useClientMode),False,,NULL
14,SSLParameters,7,setUseServerMode(boolean useServerMode),False,,NULL
14,SSLParameters,8,setWantServerAuth(boolean wantServerAuth),False,,NULL
14,SSLParameters,9,setNeedServerAuth(boolean needServerAuth),False,,NULL
14,SSLParameters,10,setWantClientAuth(boolean wantClientAuth),False,,NULL
14,SSLParameters,11,setNeedClientAuth(boolean needClientAuth),False,,NULL
14,SSLParameters,12,setUseClientMode(boolean useClientMode),False,,NULL
14,SSLParameters,13,setUseServerMode(boolean useServerMode),False,,NULL
14,SSLParameters,14,setWantServerAuth(boolean wantServerAuth),False,,NULL
14,SSLParameters,15,setNeedServerAuth(boolean needServerAuth),False,,NULL
15,SSLPermission,1,boolean implies(Permission p),False,,NULL
15,SSLPermission,2,boolean equals(Object obj),False,,NULL
15,SSLPermission,3,int hashCode(),False,,NULL
15,SSLPermission,4,String getActions(),False,,NULL
15,SSLPermission,5,String getName(),False,,NULL
16,SSLServerSocket,1,SSLServerSocket(int port),False,,NULL
16,SSLServerSocket,2,"SSLServerSocket(int port, int backlog)",False,,NULL
16,SSLServerSocket,3,"SSLServerSocket(int port, int backlog, InetAddress bindAddr)",False,,NULL
16,SSLServerSocket,4,"SSLServerSocket(int port, int backlog, InetAddress bindAddr, boolean reuseAddr)",False,,NULL
16,SSLServerSocket,5,"SSLServerSocket(int port, int backlog, InetAddress bindAddr, boolean reuseAddr, int recvBufSize)",False,,NULL
17,SSLServerSocketFactory,1,SSLServerSocketFactory(),False,,NULL
17,SSLServerSocketFactory,2,"SSLServerSocketFactory(KeyManager[] km, TrustManager[] tm)",False,,NULL
17,SSLServerSocketFactory,3,"SSLServerSocketFactory(KeyManagerFactory kmf, TrustManagerFactory tmf)",False,,NULL
17,SSLServerSocketFactory,4,"SSLServerSocketFactory(KeyManagerFactory kmf, TrustManagerFactory tmf, SecureRandom sr)",False,,NULL
17,SSLServerSocketFactory,5,SSLServerSocket createServerSocket(int port),False,,NULL
18,SSLSessionBindingEvent,1,getSession(),False,,NULL
18,SSLSessionBindingEvent,2,getName(),False,,NULL
18,SSLSessionBindingEvent,3,getValue(),False,,NULL
18,SSLSessionBindingEvent,4,getClass(),False,,NULL
18,SSLSessionBindingEvent,5,hashCode(),False,,NULL
19,SSLSocket,1,"SSLSocket(InetAddress address, int port)",False,,NULL
19,SSLSocket,2,"SSLSocket(Socket socket, InputStream in, boolean autoClose)",False,,NULL
19,SSLSocket,3,"SSLSocket(Socket socket, String host, int port, boolean autoClose)",False,,NULL
19,SSLSocket,4,"SSLSocket(Socket socket, InputStream in, OutputStream out, boolean autoClose)",False,,NULL
19,SSLSocket,5,"SSLSocket(Socket socket, String host, int port, InputStream in, OutputStream out, boolean autoClose)",False,,NULL
19,SSLSocket,6,"SSLSocket(Socket socket, String host, int port, InputStream in, OutputStream out, boolean autoClose, boolean wantClientAuth)",False,,NULL
19,SSLSocket,7,"SSLSocket(Socket socket, String host, int port, InputStream in, OutputStream out, boolean autoClose, boolean wantClientAuth, boolean wantServerAuth)",False,,NULL
19,SSLSocket,8,"SSLSocket(Socket socket, String host, int port, InputStream in, OutputStream out, boolean autoClose, boolean wantClientAuth, boolean wantServerAuth, boolean wantConstantTime)",False,,NULL
19,SSLSocket,9,"SSLSocket(Socket socket, String host, int port, InputStream in, OutputStream out, boolean autoClose, boolean wantClientAuth, boolean wantServerAuth, boolean wantConstantTime, boolean wantDeploymentProtection)",False,,NULL
19,SSLSocket,10,"SSLSocket(Socket socket, String host, int port, InputStream in, OutputStream out, boolean autoClose, boolean wantClientAuth, boolean wantServerAuth, boolean wantConstantTime, boolean wantDeploymentProtection, boolean wantUnrestrictedUse)",False,,NULL
19,SSLSocket,11,"SSLSocket(Socket socket, String host, int port, InputStream in, OutputStream out, boolean autoClose, boolean wantClientAuth, boolean wantServerAuth, boolean wantConstantTime, boolean wantDeploymentProtection, boolean wantUnrestrictedUse, boolean wantLegacySessionMgmt)",False,,NULL
19,SSLSocket,12,"SSLSocket(Socket socket, String host, int port, InputStream in, OutputStream out, boolean autoClose, boolean wantClientAuth, boolean wantServerAuth, boolean wantConstantTime, boolean wantDeploymentProtection, boolean wantUnrestrictedUse, boolean wantLegacySessionMgmt, boolean wantMaintainSession)",False,,NULL
19,SSLSocket,13,"SSLSocket(Socket socket, String host, int port, InputStream in, OutputStream out, boolean autoClose, boolean wantClientAuth, boolean wantServerAuth, boolean wantConstantTime, boolean wantDeploymentProtection, boolean wantUnrestrictedUse, boolean wantLegacySessionMgmt, boolean wantMaintainSession, boolean wantMaintainSession)",False,,NULL
20,SSLSocketFactory,1,SSLSocketFactory getDefault(),False,,NULL
20,SSLSocketFactory,2,"SSLSocket createSocket(Socket socket, String host, int port, boolean autoClose)",False,,NULL
20,SSLSocketFactory,3,"SSLSocket createSocket(String host, int port)",False,,NULL
20,SSLSocketFactory,4,"SSLSocket createSocket(String host, int port, InetAddress localAddress, int localPort)",False,,NULL
20,SSLSocketFactory,5,"SSLSocket createSocket(Socket socket, String host, int port, InetAddress localAddress, int localPort, HttpClientContext context)",False,,NULL
21,StandardConstants,1,SSL_CLIENT,False,,NULL
21,StandardConstants,2,SSL_SERVER,False,,NULL
21,StandardConstants,3,SSL_MODE_ENABLE_PARTIAL_WRITE,False,,NULL
21,StandardConstants,4,SSL_MODE_DISABLE_PARTIAL_WRITE,False,,NULL
21,StandardConstants,5,SSL_MODE_AUTO_RETRY,False,,NULL
21,StandardConstants,6,SSL_MODE_NO_RETRY,False,,NULL
21,StandardConstants,7,SSL_MODE_RECORD_PROTECTION,False,,NULL
21,StandardConstants,8,SSL_MODE_NO_RECORD_PROTECTION,False,,NULL
21,StandardConstants,9,SSL_MODE_RECORD_COMPRESSION,False,,NULL
21,StandardConstants,10,SSL_MODE_NO_RECORD_COMPRESSION,False,,NULL
21,StandardConstants,11,SSL_MODE_RECORD_LAYERS,False,,NULL
21,StandardConstants,12,SSL_MODE_NO_RECORD_LAYERS,False,,NULL
21,StandardConstants,13,SSL_MODE_RECORD_ATONCE,False,,NULL
21,StandardConstants,14,SSL_MODE_NO_RECORD_ATONCE,False,,NULL
21,StandardConstants,15,SSL_MODE_RECORD_BUF_LAYERS,False,,NULL
21,StandardConstants,16,SSL_MODE_NO_RECORD_BUF_LAYERS,False,,NULL
21,StandardConstants,17,SSL_MODE_RECORD_BUF_ATONCE,False,,NULL
21,StandardConstants,18,SSL_MODE_NO_RECORD_BUF_ATONCE,False,,NULL
21,StandardConstants,19,SSL_MODE_RECORD_BUF_PROTECTION,False,,NULL
21,StandardConstants,20,SSL_MODE_NO_RECORD_BUF_PROTECTION,False,,NULL
21,StandardConstants,21,SSL_MODE_RECORD_BUF_COMPRESSION,False,,NULL
21,StandardConstants,22,SSL_MODE_NO_RECORD_BUF_COMPRESSION,False,,NULL
21,StandardConstants,23,SSL_MODE_RECORD_BUF_LAYERS,False,,NULL
21,StandardConstants,24,SSL_MODE_NO_RECORD_BUF_LAYERS,False,,NULL
21,StandardConstants,25,SSL_MODE_RECORD_BUF_ATONCE,False,,NULL
21,StandardConstants,26,SSL_MODE_NO_RECORD_BUF_ATONCE,False,,NULL
21,StandardConstants,27,SSL_MODE_RECORD_BUF_PROTECTION,False,,NULL
21,StandardConstants,28,SSL_MODE_NO_RECORD_BUF_PROTECTION,False,,NULL
21,StandardConstants,29,SSL_MODE_RECORD_BUF_COMPRESSION,False,,NULL
21,StandardConstants,30,SSL_MODE_NO_RECORD_BUF_COMPRESSION,False,,NULL
22,TrustManagerFactory,1,TrustManagerFactory getInstance(String algorithm),True,Returns a TrustManagerFactory object that acts as a factory for trust managers.,"

getInstance
public static final TrustManagerFactory getInstance(String algorithm)
                                             throws NoSuchAlgorithmException
Returns a TrustManagerFactory object that acts as a
 factory for trust managers.

  This method traverses the list of registered security Providers,
 starting with the most preferred Provider.
 A new TrustManagerFactory object encapsulating the
 TrustManagerFactorySpi implementation from the first
 Provider that supports the specified algorithm is returned.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
algorithm - the standard name of the requested trust management
          algorithm.  See the 
          Java Secure Socket Extension Reference Guide 
          for information about standard algorithm names.
Returns:
the new TrustManagerFactory object.
Throws:
NoSuchAlgorithmException - if no Provider supports a
          TrustManagerFactorySpi implementation for the
          specified algorithm.
NullPointerException - if algorithm is null.
See Also:
Provider


"
22,TrustManagerFactory,2,"TrustManagerFactory getInstance(String algorithm, String provider)",True,Returns a TrustManagerFactory object that acts as a factory for trust managers.,"

getInstance
public static final TrustManagerFactory getInstance(String algorithm,
                                                    String provider)
                                             throws NoSuchAlgorithmException,
                                                    NoSuchProviderException
Returns a TrustManagerFactory object that acts as a
 factory for trust managers.

  A new KeyManagerFactory object encapsulating the
 KeyManagerFactorySpi implementation from the specified provider
 is returned.  The specified provider must be registered
 in the security provider list.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
algorithm - the standard name of the requested trust management
          algorithm.  See the 
          Java Secure Socket Extension Reference Guide 
          for information about standard algorithm names.
provider - the name of the provider.
Returns:
the new TrustManagerFactory object
Throws:
NoSuchAlgorithmException - if a TrustManagerFactorySpi
          implementation for the specified algorithm is not
          available from the specified provider.
NoSuchProviderException - if the specified provider is not
          registered in the security provider list.
IllegalArgumentException - if the provider name is null or empty.
NullPointerException - if algorithm is null.
See Also:
Provider


"
22,TrustManagerFactory,3,"TrustManagerFactory getInstance(String algorithm, Provider provider)",True,Returns a TrustManagerFactory object that acts as a factory for trust managers.,"

getInstance
public static final TrustManagerFactory getInstance(String algorithm,
                                                    Provider provider)
                                             throws NoSuchAlgorithmException
Returns a TrustManagerFactory object that acts as a
 factory for trust managers.

  A new TrustManagerFactory object encapsulating the
 TrustManagerFactorySpi implementation from the specified Provider
 object is returned.  Note that the specified Provider object
 does not have to be registered in the provider list.

Parameters:
algorithm - the standard name of the requested trust management
          algorithm.  See the 
          Java Secure Socket Extension Reference Guide 
          for information about standard algorithm names.
provider - an instance of the provider.
Returns:
the new TrustManagerFactory object.
Throws:
NoSuchAlgorithmException - if a TrustManagerFactorySpi
          implementation for the specified algorithm is not available
          from the specified Provider object.
IllegalArgumentException - if the provider is null.
NullPointerException - if algorithm is null.
See Also:
Provider


"
22,TrustManagerFactory,4,String[] getSupportedAlgorithms(),False,,NULL
22,TrustManagerFactory,5,Provider getProvider(),True,Returns the provider of this TrustManagerFactory object.,"

getProvider
public final Provider getProvider()
Returns the provider of this TrustManagerFactory object.

Returns:
the provider of this TrustManagerFactory object


"
23,TrustManagerFactorySpi,1,TrustManagerFactorySpi(),False,,NULL
23,TrustManagerFactorySpi,2,init(KeyStore ks),False,,NULL
23,TrustManagerFactorySpi,3,getTrustManagers(),False,,NULL
23,TrustManagerFactorySpi,4,engineGetTrustManagers(),False,,NULL
23,TrustManagerFactorySpi,5,engineInit(KeyStore ks),False,,NULL
24,X509ExtendedKeyManager,1,"getClientAliases(String keyType, Principal[] issuers)",False,,NULL
24,X509ExtendedKeyManager,2,"getServerAliases(String keyType, Principal[] issuers)",False,,NULL
24,X509ExtendedKeyManager,3,"chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket)",False,,NULL
24,X509ExtendedKeyManager,4,"chooseServerAlias(String keyType, Principal[] issuers, Socket socket)",False,,NULL
24,X509ExtendedKeyManager,5,getCertificateChain(String alias),False,,NULL
25,X509ExtendedTrustManager,1,"void checkClientTrusted(X509Certificate[] chain, String authType)",False,,NULL
25,X509ExtendedTrustManager,2,"void checkServerTrusted(X509Certificate[] chain, String authType)",False,,NULL
25,X509ExtendedTrustManager,3,X509Certificate[] getAcceptedIssuers(),False,,NULL
25,X509ExtendedTrustManager,4,"void checkClientTrusted(X509Certificate[] chain, String authType, Socket socket)",True,"Given the partial or complete certificate chain provided by the peer, build and validate the certificate path based on the authentication type and ssl parameters.","

checkClientTrusted
public abstract void checkClientTrusted(X509Certificate[] chain,
                                        String authType,
                                        Socket socket)
                                 throws CertificateException
Given the partial or complete certificate chain provided by the
 peer, build and validate the certificate path based on the
 authentication type and ssl parameters.
 
 The authentication type is determined by the actual certificate
 used. For instance, if RSAPublicKey is used, the authType
 should be ""RSA"". Checking is case-sensitive.
 
 If the socket parameter is an instance of
 SSLSocket, and the endpoint identification
 algorithm of the SSLParameters is non-empty, to prevent
 man-in-the-middle attacks, the address that the socket
 connected to should be checked against the peer's identity presented
 in the end-entity X509 certificate, as specified in the endpoint
 identification algorithm.
 
 If the socket parameter is an instance of
 SSLSocket, and the algorithm constraints of the
 SSLParameters is non-null, for every certificate in the
 certification path, fields such as subject public key, the signature
 algorithm, key usage, extended key usage, etc. need to conform to the
 algorithm constraints in place on this socket.

Parameters:
chain - the peer certificate chain
authType - the key exchange algorithm used
socket - the socket used for this connection. This parameter
        can be null, which indicates that implementations need not check
        the ssl parameters
Throws:
IllegalArgumentException - if null or zero-length array is passed
        in for the chain parameter or if null or zero-length
        string is passed in for the authType parameter
CertificateException - if the certificate chain is not trusted
        by this TrustManager
See Also:
SSLParameters.getEndpointIdentificationAlgorithm(), 
SSLParameters.setEndpointIdentificationAlgorithm(String), 
SSLParameters.getAlgorithmConstraints(), 
SSLParameters.setAlgorithmConstraints(AlgorithmConstraints)


"
25,X509ExtendedTrustManager,5,"void checkServerTrusted(X509Certificate[] chain, String authType, Socket socket)",True,"Given the partial or complete certificate chain provided by the peer, build and validate the certificate path based on the authentication type and ssl parameters.","

checkServerTrusted
public abstract void checkServerTrusted(X509Certificate[] chain,
                                        String authType,
                                        Socket socket)
                                 throws CertificateException
Given the partial or complete certificate chain provided by the
 peer, build and validate the certificate path based on the
 authentication type and ssl parameters.
 
 The authentication type is the key exchange algorithm portion
 of the cipher suites represented as a String, such as ""RSA"",
 ""DHE_DSS"". Note: for some exportable cipher suites, the key
 exchange algorithm is determined at run time during the
 handshake. For instance, for TLS_RSA_EXPORT_WITH_RC4_40_MD5,
 the authType should be RSA_EXPORT when an ephemeral RSA key is
 used for the key exchange, and RSA when the key from the server
 certificate is used. Checking is case-sensitive.
 
 If the socket parameter is an instance of
 SSLSocket, and the endpoint identification
 algorithm of the SSLParameters is non-empty, to prevent
 man-in-the-middle attacks, the address that the socket
 connected to should be checked against the peer's identity presented
 in the end-entity X509 certificate, as specified in the endpoint
 identification algorithm.
 
 If the socket parameter is an instance of
 SSLSocket, and the algorithm constraints of the
  SSLParameters is non-null, for every certificate in the
 certification path, fields such as subject public key, the signature
 algorithm, key usage, extended key usage, etc. need to conform to the
 algorithm constraints in place on this socket.

Parameters:
chain - the peer certificate chain
authType - the key exchange algorithm used
socket - the socket used for this connection. This parameter
        can be null, which indicates that implementations need not check
        the ssl parameters
Throws:
IllegalArgumentException - if null or zero-length array is passed
        in for the chain parameter or if null or zero-length
        string is passed in for the authType parameter
CertificateException - if the certificate chain is not trusted
        by this TrustManager
See Also:
SSLParameters.getEndpointIdentificationAlgorithm(), 
SSLParameters.setEndpointIdentificationAlgorithm(String), 
SSLParameters.getAlgorithmConstraints(), 
SSLParameters.setAlgorithmConstraints(AlgorithmConstraints)


"
25,X509ExtendedTrustManager,6,"void checkClientTrusted(X509Certificate[] chain, String authType, SSLEngine engine)",True,"Given the partial or complete certificate chain provided by the peer, build and validate the certificate path based on the authentication type and ssl parameters.","

checkClientTrusted
public abstract void checkClientTrusted(X509Certificate[] chain,
                                        String authType,
                                        SSLEngine engine)
                                 throws CertificateException
Given the partial or complete certificate chain provided by the
 peer, build and validate the certificate path based on the
 authentication type and ssl parameters.
 
 The authentication type is determined by the actual certificate
 used. For instance, if RSAPublicKey is used, the authType
 should be ""RSA"". Checking is case-sensitive.
 
 If the engine parameter is available, and the endpoint
 identification algorithm of the SSLParameters is
 non-empty, to prevent man-in-the-middle attacks, the address that
 the engine connected to should be checked against
 the peer's identity presented in the end-entity X509 certificate,
 as specified in the endpoint identification algorithm.
 
 If the engine parameter is available, and the algorithm
 constraints of the SSLParameters is non-null, for every
 certificate in the certification path, fields such as subject public
 key, the signature algorithm, key usage, extended key usage, etc.
 need to conform to the algorithm constraints in place on this engine.

Parameters:
chain - the peer certificate chain
authType - the key exchange algorithm used
engine - the engine used for this connection. This parameter
        can be null, which indicates that implementations need not check
        the ssl parameters
Throws:
IllegalArgumentException - if null or zero-length array is passed
        in for the chain parameter or if null or zero-length
        string is passed in for the authType parameter
CertificateException - if the certificate chain is not trusted
        by this TrustManager
See Also:
SSLParameters.getEndpointIdentificationAlgorithm(), 
SSLParameters.setEndpointIdentificationAlgorithm(String), 
SSLParameters.getAlgorithmConstraints(), 
SSLParameters.setAlgorithmConstraints(AlgorithmConstraints)


"
25,X509ExtendedTrustManager,7,"void checkServerTrusted(X509Certificate[] chain, String authType, SSLEngine engine)",True,"Given the partial or complete certificate chain provided by the peer, build and validate the certificate path based on the authentication type and ssl parameters.","

checkServerTrusted
public abstract void checkServerTrusted(X509Certificate[] chain,
                                        String authType,
                                        SSLEngine engine)
                                 throws CertificateException
Given the partial or complete certificate chain provided by the
 peer, build and validate the certificate path based on the
 authentication type and ssl parameters.
 
 The authentication type is the key exchange algorithm portion
 of the cipher suites represented as a String, such as ""RSA"",
 ""DHE_DSS"". Note: for some exportable cipher suites, the key
 exchange algorithm is determined at run time during the
 handshake. For instance, for TLS_RSA_EXPORT_WITH_RC4_40_MD5,
 the authType should be RSA_EXPORT when an ephemeral RSA key is
 used for the key exchange, and RSA when the key from the server
 certificate is used. Checking is case-sensitive.
 
 If the engine parameter is available, and the endpoint
 identification algorithm of the SSLParameters is
 non-empty, to prevent man-in-the-middle attacks, the address that
 the engine connected to should be checked against
 the peer's identity presented in the end-entity X509 certificate,
 as specified in the endpoint identification algorithm.
 
 If the engine parameter is available, and the algorithm
 constraints of the SSLParameters is non-null, for every
 certificate in the certification path, fields such as subject public
 key, the signature algorithm, key usage, extended key usage, etc.
 need to conform to the algorithm constraints in place on this engine.

Parameters:
chain - the peer certificate chain
authType - the key exchange algorithm used
engine - the engine used for this connection. This parameter
        can be null, which indicates that implementations need not check
        the ssl parameters
Throws:
IllegalArgumentException - if null or zero-length array is passed
        in for the chain parameter or if null or zero-length
        string is passed in for the authType parameter
CertificateException - if the certificate chain is not trusted
        by this TrustManager
See Also:
SSLParameters.getEndpointIdentificationAlgorithm(), 
SSLParameters.setEndpointIdentificationAlgorithm(String), 
SSLParameters.getAlgorithmConstraints(), 
SSLParameters.setAlgorithmConstraints(AlgorithmConstraints)


"
25,X509ExtendedTrustManager,8,"void checkClientTrusted(X509Certificate[] chain, String authType, SSLEngine sslEngine, Principal peerPrincipal)",False,,NULL
25,X509ExtendedTrustManager,9,"void checkServerTrusted(X509Certificate[] chain, String authType, SSLEngine sslEngine, Principal peerPrincipal)",False,,NULL
25,X509ExtendedTrustManager,10,"void checkClientTrusted(X509Certificate[] chain, String authType, SSLEngine sslEngine, Principal peerPrincipal, CertPath certPath)",False,,NULL
25,X509ExtendedTrustManager,11,"void checkServerTrusted(X509Certificate[] chain, String authType, SSLEngine sslEngine, Principal peerPrincipal, CertPath certPath)",False,,NULL
