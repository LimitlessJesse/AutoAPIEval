Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,AbstractAction,1,void actionPerformed(ActionEvent e),False,,NULL
0,AbstractAction,2,"void putValue(Object key, Object value)",False,,NULL
0,AbstractAction,3,Object getValue(Object key),False,,NULL
0,AbstractAction,4,void setEnabled(boolean b),True,Sets whether the Action is enabled.,"

setEnabled
public void setEnabled(boolean newValue)
Sets whether the Action is enabled. The default is true.

Specified by:
setEnabled in interface Action
Parameters:
newValue - true to enable the action, false to
                  disable it
See Also:
Action.setEnabled(boolean)


"
0,AbstractAction,5,boolean isEnabled(),True,Returns true if the action is enabled.,"

isEnabled
public boolean isEnabled()
Returns true if the action is enabled.

Specified by:
isEnabled in interface Action
Returns:
true if the action is enabled, false otherwise
See Also:
Action.isEnabled()


"
1,AbstractButton,1,void setActionCommand(String actionCommand),True,Sets the action command for this button.,"

setActionCommand
public void setActionCommand(String actionCommand)
Sets the action command for this button.

Parameters:
actionCommand - the action command for this button


"
1,AbstractButton,2,String getActionCommand(),True,Returns the action command for this button.,"

getActionCommand
public String getActionCommand()
Returns the action command for this button.

Returns:
the action command for this button


"
1,AbstractButton,3,void setSelected(boolean b),True,Sets the state of the button.,"

setSelected
public void setSelected(boolean b)
Sets the state of the button. Note that this method does not
 trigger an actionEvent.
 Call doClick to perform a programmatic action change.

Parameters:
b - true if the button is selected, otherwise false


"
1,AbstractButton,4,boolean isSelected(),True,Returns the state of the button.,"

isSelected
public boolean isSelected()
Returns the state of the button. True if the
 toggle button is selected, false if it's not.

Returns:
true if the toggle button is selected, otherwise false


"
1,AbstractButton,5,void setEnabled(boolean b),True,Enables (or disables) the button.,"

setEnabled
public void setEnabled(boolean b)
Enables (or disables) the button.

Overrides:
setEnabled in class JComponent
Parameters:
b - true to enable the button, otherwise false
See Also:
Component.isEnabled(), 
Component.isLightweight()


"
1,AbstractButton,6,boolean isEnabled(),False,,NULL
1,AbstractButton,7,void setFocusPainted(boolean b),True,"Sets the paintFocus property, which must be true for the focus state to be painted.","

setFocusPainted
public void setFocusPainted(boolean b)
Sets the paintFocus property, which must
 be true for the focus state to be painted.
 The default value for the paintFocus property
 is true.
 Some look and feels might not paint focus state;
 they will ignore this property.

Parameters:
b - if true, the focus state should be painted
See Also:
isFocusPainted()


"
1,AbstractButton,8,boolean isFocusPainted(),True,Gets the paintFocus property.,"

isFocusPainted
public boolean isFocusPainted()
Gets the paintFocus property.

Returns:
the paintFocus property
See Also:
setFocusPainted(boolean)


"
1,AbstractButton,9,void setContentAreaFilled(boolean b),True,Sets the contentAreaFilled property.,"

setContentAreaFilled
public void setContentAreaFilled(boolean b)
Sets the contentAreaFilled property.
 If true the button will paint the content
 area.  If you wish to have a transparent button, such as
 an icon only button, for example, then you should set
 this to false. Do not call setOpaque(false).
 The default value for the the contentAreaFilled
 property is true.
 
 This function may cause the component's opaque property to change.
 
 The exact behavior of calling this function varies on a
 component-by-component and L&F-by-L&F basis.

Parameters:
b - if true, the content should be filled; if false
          the content area is not filled
See Also:
isContentAreaFilled(), 
JComponent.setOpaque(boolean)


"
1,AbstractButton,10,boolean isContentAreaFilled(),True,Gets the contentAreaFilled property.,"

isContentAreaFilled
public boolean isContentAreaFilled()
Gets the contentAreaFilled property.

Returns:
the contentAreaFilled property
See Also:
setContentAreaFilled(boolean)


"
1,AbstractButton,11,void setBorderPainted(boolean b),True,Sets the borderPainted property.,"

setBorderPainted
public void setBorderPainted(boolean b)
Sets the borderPainted property.
 If true and the button has a border,
 the border is painted. The default value for the
 borderPainted property is true.
 
 Some look and feels might not support
 the borderPainted property,
 in which case they ignore this.

Parameters:
b - if true and border property is not null,
          the border is painted
See Also:
isBorderPainted()


"
1,AbstractButton,12,boolean isBorderPainted(),True,Gets the borderPainted property.,"

isBorderPainted
public boolean isBorderPainted()
Gets the borderPainted property.

Returns:
the value of the borderPainted property
See Also:
setBorderPainted(boolean)


"
1,AbstractButton,13,void setMargin(Insets insets),True,Sets space for margin between the button's border and the label.,"

setMargin
public void setMargin(Insets m)
Sets space for margin between the button's border and
 the label. Setting to null will cause the button to
 use the default margin.  The button's default Border
 object will use this value to create the proper margin.
 However, if a non-default border is set on the button,
 it is that Border object's responsibility to create the
 appropriate margin space (else this property will
 effectively be ignored).

Parameters:
m - the space between the border and the label


"
1,AbstractButton,14,Insets getMargin(),True,Returns the margin between the button's border and the label.,"

getMargin
public Insets getMargin()
Returns the margin between the button's border and
 the label.

Returns:
an Insets object specifying the margin
          between the botton's border and the label
See Also:
setMargin(java.awt.Insets)


"
1,AbstractButton,15,void setText(String text),True,Sets the button's text.,"

setText
public void setText(String text)
Sets the button's text.

Parameters:
text - the string used to set the text
See Also:
getText()


"
1,AbstractButton,16,String getText(),True,Returns the button's text.,"

getText
public String getText()
Returns the button's text.

Returns:
the buttons text
See Also:
setText(java.lang.String)


"
1,AbstractButton,17,void setIcon(Icon icon),True,Sets the button's default icon.,"

setIcon
public void setIcon(Icon defaultIcon)
Sets the button's default icon. This icon is
 also used as the ""pressed"" and ""disabled"" icon if
 there is no explicitly set pressed icon.

Parameters:
defaultIcon - the icon used as the default image
See Also:
getIcon(), 
setPressedIcon(javax.swing.Icon)


"
1,AbstractButton,18,Icon getIcon(),True,Returns the default icon.,"

getIcon
public Icon getIcon()
Returns the default icon.

Returns:
the default Icon
See Also:
setIcon(javax.swing.Icon)


"
1,AbstractButton,19,void setHorizontalTextPosition(int position),True,Sets the horizontal position of the text relative to the icon.,"

setHorizontalTextPosition
public void setHorizontalTextPosition(int textPosition)
Sets the horizontal position of the text relative to the icon.

Parameters:
textPosition - one of the following values:
 
SwingConstants.RIGHT
SwingConstants.LEFT
SwingConstants.CENTER
SwingConstants.LEADING
SwingConstants.TRAILING (the default)
 
Throws:
IllegalArgumentException - if textPosition
          is not one of the legal values listed above


"
1,AbstractButton,20,int getHorizontalTextPosition(),True,Returns the horizontal position of the text relative to the icon.,"

getHorizontalTextPosition
public int getHorizontalTextPosition()
Returns the horizontal position of the text relative to the icon.

Returns:
the horizontalTextPosition property,
          one of the following values:
 
SwingConstants.RIGHT
SwingConstants.LEFT
SwingConstants.CENTER
SwingConstants.LEADING
SwingConstants.TRAILING (the default)
 


"
1,AbstractButton,21,void setVerticalTextPosition(int position),True,Sets the vertical position of the text relative to the icon.,"

setVerticalTextPosition
public void setVerticalTextPosition(int textPosition)
Sets the vertical position of the text relative to the icon.

Parameters:
textPosition - one of the following values:
 
SwingConstants.CENTER (the default)
 SwingConstants.TOP
SwingConstants.BOTTOM



"
1,AbstractButton,22,int getVerticalTextPosition(),True,Returns the vertical position of the text relative to the icon.,"

getVerticalTextPosition
public int getVerticalTextPosition()
Returns the vertical position of the text relative to the icon.

Returns:
the verticalTextPosition property,
          one of the following values:
 
SwingConstants.CENTER (the default)
 SwingConstants.TOP
SwingConstants.BOTTOM



"
1,AbstractButton,23,void setRolloverEnabled(boolean b),True,"Sets the rolloverEnabled property, which must be true for rollover effects to occur.","

setRolloverEnabled
public void setRolloverEnabled(boolean b)
Sets the rolloverEnabled property, which
 must be true for rollover effects to occur.
 The default value for the rolloverEnabled
 property is false.
 Some look and feels might not implement rollover effects;
 they will ignore this property.

Parameters:
b - if true, rollover effects should be painted
See Also:
isRolloverEnabled()


"
1,AbstractButton,24,boolean isRolloverEnabled(),True,Gets the rolloverEnabled property.,"

isRolloverEnabled
public boolean isRolloverEnabled()
Gets the rolloverEnabled property.

Returns:
the value of the rolloverEnabled property
See Also:
setRolloverEnabled(boolean)


"
1,AbstractButton,25,void setRolloverIcon(Icon icon),True,Sets the rollover icon for the button.,"

setRolloverIcon
public void setRolloverIcon(Icon rolloverIcon)
Sets the rollover icon for the button.

Parameters:
rolloverIcon - the icon used as the ""rollover"" image
See Also:
getRolloverIcon()


"
1,AbstractButton,26,Icon getRolloverIcon(),True,Returns the rollover icon for the button.,"

getRolloverIcon
public Icon getRolloverIcon()
Returns the rollover icon for the button.

Returns:
the rolloverIcon property
See Also:
setRolloverIcon(javax.swing.Icon)


"
1,AbstractButton,27,void setPressedIcon(Icon icon),True,Sets the pressed icon for the button.,"

setPressedIcon
public void setPressedIcon(Icon pressedIcon)
Sets the pressed icon for the button.

Parameters:
pressedIcon - the icon used as the ""pressed"" image
See Also:
getPressedIcon()


"
1,AbstractButton,28,Icon getPressedIcon(),True,Returns the pressed icon for the button.,"

getPressedIcon
public Icon getPressedIcon()
Returns the pressed icon for the button.

Returns:
the pressedIcon property
See Also:
setPressedIcon(javax.swing.Icon)


"
1,AbstractButton,29,void setDisabledIcon(Icon icon),True,Sets the disabled icon for the button.,"

setDisabledIcon
public void setDisabledIcon(Icon disabledIcon)
Sets the disabled icon for the button.

Parameters:
disabledIcon - the icon used as the disabled image
See Also:
getDisabledIcon()


"
1,AbstractButton,30,Icon getDisabledIcon(),True,Returns the icon used by the button when it's disabled.,"

getDisabledIcon
public Icon getDisabledIcon()
Returns the icon used by the button when it's disabled.
 If no disabled icon has been set this will forward the call to
 the look and feel to construct an appropriate disabled Icon.
 
 Some look and feels might not render the disabled Icon, in which
 case they will ignore this.

Returns:
the disabledIcon property
See Also:
getPressedIcon(), 
setDisabledIcon(javax.swing.Icon), 
LookAndFeel.getDisabledIcon(javax.swing.JComponent, javax.swing.Icon)


"
1,AbstractButton,31,void setFocusIcon(Icon icon),False,,NULL
1,AbstractButton,32,Icon getFocusIcon(),False,,NULL
1,AbstractButton,33,void setSelectedIcon(Icon icon),True,Sets the selected icon for the button.,"

setSelectedIcon
public void setSelectedIcon(Icon selectedIcon)
Sets the selected icon for the button.

Parameters:
selectedIcon - the icon used as the ""selected"" image
See Also:
getSelectedIcon()


"
1,AbstractButton,34,Icon getSelectedIcon(),True,Returns the selected icon for the button.,"

getSelectedIcon
public Icon getSelectedIcon()
Returns the selected icon for the button.

Returns:
the selectedIcon property
See Also:
setSelectedIcon(javax.swing.Icon)


"
1,AbstractButton,35,void setRolloverSelectedIcon(Icon icon),True,Sets the rollover selected icon for the button.,"

setRolloverSelectedIcon
public void setRolloverSelectedIcon(Icon rolloverSelectedIcon)
Sets the rollover selected icon for the button.

Parameters:
rolloverSelectedIcon - the icon used as the
          ""selected rollover"" image
See Also:
getRolloverSelectedIcon()


"
1,AbstractButton,36,Icon getRolloverSelectedIcon(),True,Returns the rollover selection icon for the button.,"

getRolloverSelectedIcon
public Icon getRolloverSelectedIcon()
Returns the rollover selection icon for the button.

Returns:
the rolloverSelectedIcon property
See Also:
setRolloverSelectedIcon(javax.swing.Icon)


"
1,AbstractButton,37,void setPressedSelectedIcon(Icon icon),False,,NULL
1,AbstractButton,38,Icon getPressedSelectedIcon(),False,,NULL
1,AbstractButton,39,void setDisabledSelectedIcon(Icon icon),True,Sets the disabled selection icon for the button.,"

setDisabledSelectedIcon
public void setDisabledSelectedIcon(Icon disabledSelectedIcon)
Sets the disabled selection icon for the button.

Parameters:
disabledSelectedIcon - the icon used as the disabled
          selection image
See Also:
getDisabledSelectedIcon()


"
1,AbstractButton,40,Icon getDisabledSelectedIcon(),True,Returns the icon used by the button when it's disabled and selected.,"

getDisabledSelectedIcon
public Icon getDisabledSelectedIcon()
Returns the icon used by the button when it's disabled and selected.
 If no disabled selection icon has been set, this will forward
 the call to the LookAndFeel to construct an appropriate disabled
 Icon from the selection icon if it has been set and to
 getDisabledIcon() otherwise.
 
 Some look and feels might not render the disabled selected Icon, in
 which case they will ignore this.

Returns:
the disabledSelectedIcon property
See Also:
getDisabledIcon(), 
setDisabledSelectedIcon(javax.swing.Icon), 
LookAndFeel.getDisabledSelectedIcon(javax.swing.JComponent, javax.swing.Icon)


"
1,AbstractButton,41,void setFocusSelectedIcon(Icon icon),False,,NULL
1,AbstractButton,42,Icon getFocusSelectedIcon(),False,,NULL
1,AbstractButton,43,void setRolloverEnabled(boolean b),True,"Sets the rolloverEnabled property, which must be true for rollover effects to occur.","

setRolloverEnabled
public void setRolloverEnabled(boolean b)
Sets the rolloverEnabled property, which
 must be true for rollover effects to occur.
 The default value for the rolloverEnabled
 property is false.
 Some look and feels might not implement rollover effects;
 they will ignore this property.

Parameters:
b - if true, rollover effects should be painted
See Also:
isRolloverEnabled()


"
1,AbstractButton,44,boolean isRolloverEnabled(),True,Gets the rolloverEnabled property.,"

isRolloverEnabled
public boolean isRolloverEnabled()
Gets the rolloverEnabled property.

Returns:
the value of the rolloverEnabled property
See Also:
setRolloverEnabled(boolean)


"
1,AbstractButton,45,void setRolloverIcon(Icon icon),True,Sets the rollover icon for the button.,"

setRolloverIcon
public void setRolloverIcon(Icon rolloverIcon)
Sets the rollover icon for the button.

Parameters:
rolloverIcon - the icon used as the ""rollover"" image
See Also:
getRolloverIcon()


"
1,AbstractButton,46,Icon getRolloverIcon(),True,Returns the rollover icon for the button.,"

getRolloverIcon
public Icon getRolloverIcon()
Returns the rollover icon for the button.

Returns:
the rolloverIcon property
See Also:
setRolloverIcon(javax.swing.Icon)


"
1,AbstractButton,47,void setPressedIcon(Icon icon),True,Sets the pressed icon for the button.,"

setPressedIcon
public void setPressedIcon(Icon pressedIcon)
Sets the pressed icon for the button.

Parameters:
pressedIcon - the icon used as the ""pressed"" image
See Also:
getPressedIcon()


"
1,AbstractButton,48,Icon getPressedIcon(),True,Returns the pressed icon for the button.,"

getPressedIcon
public Icon getPressedIcon()
Returns the pressed icon for the button.

Returns:
the pressedIcon property
See Also:
setPressedIcon(javax.swing.Icon)


"
1,AbstractButton,49,void setDisabledIcon(Icon icon),True,Sets the disabled icon for the button.,"

setDisabledIcon
public void setDisabledIcon(Icon disabledIcon)
Sets the disabled icon for the button.

Parameters:
disabledIcon - the icon used as the disabled image
See Also:
getDisabledIcon()


"
1,AbstractButton,50,Icon getDisabledIcon(),True,Returns the icon used by the button when it's disabled.,"

getDisabledIcon
public Icon getDisabledIcon()
Returns the icon used by the button when it's disabled.
 If no disabled icon has been set this will forward the call to
 the look and feel to construct an appropriate disabled Icon.
 
 Some look and feels might not render the disabled Icon, in which
 case they will ignore this.

Returns:
the disabledIcon property
See Also:
getPressedIcon(), 
setDisabledIcon(javax.swing.Icon), 
LookAndFeel.getDisabledIcon(javax.swing.JComponent, javax.swing.Icon)


"
1,AbstractButton,51,void setFocusIcon(Icon icon),False,,NULL
1,AbstractButton,52,Icon getFocusIcon(),False,,NULL
1,AbstractButton,53,void setSelectedIcon(Icon icon),True,Sets the selected icon for the button.,"

setSelectedIcon
public void setSelectedIcon(Icon selectedIcon)
Sets the selected icon for the button.

Parameters:
selectedIcon - the icon used as the ""selected"" image
See Also:
getSelectedIcon()


"
1,AbstractButton,54,Icon getSelectedIcon(),True,Returns the selected icon for the button.,"

getSelectedIcon
public Icon getSelectedIcon()
Returns the selected icon for the button.

Returns:
the selectedIcon property
See Also:
setSelectedIcon(javax.swing.Icon)


"
1,AbstractButton,55,void setRolloverSelectedIcon(Icon icon),True,Sets the rollover selected icon for the button.,"

setRolloverSelectedIcon
public void setRolloverSelectedIcon(Icon rolloverSelectedIcon)
Sets the rollover selected icon for the button.

Parameters:
rolloverSelectedIcon - the icon used as the
          ""selected rollover"" image
See Also:
getRolloverSelectedIcon()


"
1,AbstractButton,56,Icon getRolloverSelectedIcon(),True,Returns the rollover selection icon for the button.,"

getRolloverSelectedIcon
public Icon getRolloverSelectedIcon()
Returns the rollover selection icon for the button.

Returns:
the rolloverSelectedIcon property
See Also:
setRolloverSelectedIcon(javax.swing.Icon)


"
1,AbstractButton,57,void setPressedSelectedIcon(Icon icon),False,,NULL
1,AbstractButton,58,Icon getPressedSelectedIcon(),False,,NULL
1,AbstractButton,59,void setDisabledSelectedIcon(Icon icon),True,Sets the disabled selection icon for the button.,"

setDisabledSelectedIcon
public void setDisabledSelectedIcon(Icon disabledSelectedIcon)
Sets the disabled selection icon for the button.

Parameters:
disabledSelectedIcon - the icon used as the disabled
          selection image
See Also:
getDisabledSelectedIcon()


"
1,AbstractButton,60,Icon getDisabledSelectedIcon(),True,Returns the icon used by the button when it's disabled and selected.,"

getDisabledSelectedIcon
public Icon getDisabledSelectedIcon()
Returns the icon used by the button when it's disabled and selected.
 If no disabled selection icon has been set, this will forward
 the call to the LookAndFeel to construct an appropriate disabled
 Icon from the selection icon if it has been set and to
 getDisabledIcon() otherwise.
 
 Some look and feels might not render the disabled selected Icon, in
 which case they will ignore this.

Returns:
the disabledSelectedIcon property
See Also:
getDisabledIcon(), 
setDisabledSelectedIcon(javax.swing.Icon), 
LookAndFeel.getDisabledSelectedIcon(javax.swing.JComponent, javax.swing.Icon)


"
1,AbstractButton,61,void setFocusSelectedIcon(Icon icon),False,,NULL
1,AbstractButton,62,Icon getFocusSelectedIcon(),False,,NULL
1,AbstractButton,63,void setRolloverEnabled(boolean b),True,"Sets the rolloverEnabled property, which must be true for rollover effects to occur.","

setRolloverEnabled
public void setRolloverEnabled(boolean b)
Sets the rolloverEnabled property, which
 must be true for rollover effects to occur.
 The default value for the rolloverEnabled
 property is false.
 Some look and feels might not implement rollover effects;
 they will ignore this property.

Parameters:
b - if true, rollover effects should be painted
See Also:
isRolloverEnabled()


"
1,AbstractButton,64,boolean isRolloverEnabled(),True,Gets the rolloverEnabled property.,"

isRolloverEnabled
public boolean isRolloverEnabled()
Gets the rolloverEnabled property.

Returns:
the value of the rolloverEnabled property
See Also:
setRolloverEnabled(boolean)


"
1,AbstractButton,65,void setRolloverIcon(Icon icon),True,Sets the rollover icon for the button.,"

setRolloverIcon
public void setRolloverIcon(Icon rolloverIcon)
Sets the rollover icon for the button.

Parameters:
rolloverIcon - the icon used as the ""rollover"" image
See Also:
getRolloverIcon()


"
1,AbstractButton,66,Icon getRolloverIcon(),True,Returns the rollover icon for the button.,"

getRolloverIcon
public Icon getRolloverIcon()
Returns the rollover icon for the button.

Returns:
the rolloverIcon property
See Also:
setRolloverIcon(javax.swing.Icon)


"
1,AbstractButton,67,void setPressedIcon(Icon icon),True,Sets the pressed icon for the button.,"

setPressedIcon
public void setPressedIcon(Icon pressedIcon)
Sets the pressed icon for the button.

Parameters:
pressedIcon - the icon used as the ""pressed"" image
See Also:
getPressedIcon()


"
1,AbstractButton,68,Icon getPressedIcon(),True,Returns the pressed icon for the button.,"

getPressedIcon
public Icon getPressedIcon()
Returns the pressed icon for the button.

Returns:
the pressedIcon property
See Also:
setPressedIcon(javax.swing.Icon)


"
1,AbstractButton,69,void setDisabledIcon(Icon icon),True,Sets the disabled icon for the button.,"

setDisabledIcon
public void setDisabledIcon(Icon disabledIcon)
Sets the disabled icon for the button.

Parameters:
disabledIcon - the icon used as the disabled image
See Also:
getDisabledIcon()


"
1,AbstractButton,70,Icon getDisabledIcon(),True,Returns the icon used by the button when it's disabled.,"

getDisabledIcon
public Icon getDisabledIcon()
Returns the icon used by the button when it's disabled.
 If no disabled icon has been set this will forward the call to
 the look and feel to construct an appropriate disabled Icon.
 
 Some look and feels might not render the disabled Icon, in which
 case they will ignore this.

Returns:
the disabledIcon property
See Also:
getPressedIcon(), 
setDisabledIcon(javax.swing.Icon), 
LookAndFeel.getDisabledIcon(javax.swing.JComponent, javax.swing.Icon)


"
1,AbstractButton,71,void setFocusIcon(Icon icon),False,,NULL
1,AbstractButton,72,Icon getFocusIcon(),False,,NULL
2,AbstractCellEditor,1,boolean isCellEditable(EventObject anEvent),True,Returns true.,"

isCellEditable
public boolean isCellEditable(EventObject e)
Returns true.

Specified by:
isCellEditable in interface CellEditor
Parameters:
e - an event object
Returns:
true
See Also:
CellEditor.shouldSelectCell(java.util.EventObject)


"
2,AbstractCellEditor,2,void cancelCellEditing(),True,Calls fireEditingCanceled.,"

cancelCellEditing
public void cancelCellEditing()
Calls fireEditingCanceled.

Specified by:
cancelCellEditing in interface CellEditor


"
2,AbstractCellEditor,3,void addCellEditorListener(CellEditorListener l),True,Adds a CellEditorListener to the listener list.,"

addCellEditorListener
public void addCellEditorListener(CellEditorListener l)
Adds a CellEditorListener to the listener list.

Specified by:
addCellEditorListener in interface CellEditor
Parameters:
l - the new listener to be added


"
2,AbstractCellEditor,4,void removeCellEditorListener(CellEditorListener l),True,Removes a CellEditorListener from the listener list.,"

removeCellEditorListener
public void removeCellEditorListener(CellEditorListener l)
Removes a CellEditorListener from the listener list.

Specified by:
removeCellEditorListener in interface CellEditor
Parameters:
l - the listener to be removed


"
2,AbstractCellEditor,5,"Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column)",False,,NULL
3,AbstractListModel,1,boolean add(E e),False,,NULL
3,AbstractListModel,2,E getElementAt(int index),False,,NULL
3,AbstractListModel,3,int getSize(),False,,NULL
3,AbstractListModel,4,void remove(int index),False,,NULL
3,AbstractListModel,5,"void setElementAt(E e, int index)",False,,NULL
4,AbstractSpinnerModel,1,boolean isEditable(),False,,NULL
4,AbstractSpinnerModel,2,void setValue(Object value),False,,NULL
4,AbstractSpinnerModel,3,Object getNextValue(),False,,NULL
4,AbstractSpinnerModel,4,Object getPreviousValue(),False,,NULL
4,AbstractSpinnerModel,5,void addChangeListener(ChangeListener l),True,Adds a ChangeListener to the model's listener list.,"

addChangeListener
public void addChangeListener(ChangeListener l)
Adds a ChangeListener to the model's listener list.  The
 ChangeListeners must be notified when the models value changes.

Specified by:
addChangeListener in interface SpinnerModel
Parameters:
l - the ChangeListener to add
See Also:
removeChangeListener(javax.swing.event.ChangeListener), 
SpinnerModel.addChangeListener(javax.swing.event.ChangeListener)


"
5,ActionMap,1,"void put(Object key, Action action)",True,Adds a binding for key to action.,"

put
public void put(Object key,
                Action action)
Adds a binding for key to action.
 If action is null, this removes the current binding
 for key.
 In most instances, key will be
 action.getValue(NAME).

"
5,ActionMap,2,Action get(Object key),True,"Returns the binding for key, messaging the parent ActionMap if the binding is not locally defined.","

get
public Action get(Object key)
Returns the binding for key, messaging the
 parent ActionMap if the binding is not locally defined.

"
5,ActionMap,3,Action remove(Object key),False,,NULL
5,ActionMap,4,boolean containsKey(Object key),False,,NULL
5,ActionMap,5,boolean containsValue(Object value),False,,NULL
6,BorderFactory,1,"Border createBevelBorder(int bevelType, Color highlight, Color shadow)",True,"Creates a beveled border of the specified type, using the specified highlighting and shadowing.","

createBevelBorder
public static Border createBevelBorder(int type,
                                       Color highlight,
                                       Color shadow)
Creates a beveled border of the specified type, using
 the specified highlighting and shadowing. The outer
 edge of the highlighted area uses a brighter shade of
 the highlight color. The inner edge of the shadow area
 uses a brighter shade of the shadow color.

Parameters:
type - an integer specifying either
                  BevelBorder.LOWERED or
                  BevelBorder.RAISED
highlight - a Color object for highlights
shadow - a Color object for shadows
Returns:
the Border object


"
6,BorderFactory,2,"Border createCompoundBorder(Border outsideBorder, Border insideBorder)",False,,NULL
6,BorderFactory,3,"Border createEmptyBorder(int top, int left, int bottom, int right)",True,"Creates an empty border that takes up space but which does no drawing, specifying the width of the top, left, bottom, and right sides.","

createEmptyBorder
public static Border createEmptyBorder(int top,
                                       int left,
                                       int bottom,
                                       int right)
Creates an empty border that takes up space but which does
 no drawing, specifying the width of the top, left, bottom, and
 right sides.

Parameters:
top - an integer specifying the width of the top,
                  in pixels
left - an integer specifying the width of the left side,
                  in pixels
bottom - an integer specifying the width of the bottom,
                  in pixels
right - an integer specifying the width of the right side,
                  in pixels
Returns:
the Border object


"
6,BorderFactory,4,Border createEtchedBorder(),True,"Creates a border with an ""etched"" look using the component's current background color for highlighting and shading.","

createEtchedBorder
public static Border createEtchedBorder()
Creates a border with an ""etched"" look using
 the component's current background color for
 highlighting and shading.

Returns:
the Border object


"
6,BorderFactory,5,"Border createLineBorder(Color lineColor, int thickness)",True,Creates a line border with the specified color and width.,"

createLineBorder
public static Border createLineBorder(Color color,
                                      int thickness)
Creates a line border with the specified color
 and width. The width applies to all four sides of the
 border. To specify widths individually for the top,
 bottom, left, and right, use
 createMatteBorder(int,int,int,int,Color).

Parameters:
color - a Color to use for the line
thickness - an integer specifying the width in pixels
Returns:
the Border object


"
6,BorderFactory,6,"Border createMatteBorder(int top, int left, int bottom, int right, Color matteColor)",False,,NULL
6,BorderFactory,7,"Border createTitledBorder(Border border, String title)",False,,NULL
6,BorderFactory,8,"Border createTitledBorder(Border border, String title, int justification, int position, Font titleFont, Color titleColor)",False,,NULL
6,BorderFactory,9,"Border createTitledBorder(Border border, String title, int justification, int position, Font titleFont, Color titleColor, Color titleShadowColor)",False,,NULL
6,BorderFactory,10,"Border createTitledBorder(Border border, String title, int justification, int position, Font titleFont, Color titleColor, Color titleShadowColor, Color titleHighlightColor)",False,,NULL
7,Box,1,boolean add(E e),False,,NULL
7,Box,2,void add(Component comp),False,,NULL
7,Box,3,"void add(Component comp, Object constraints)",False,,NULL
7,Box,4,"void add(Component comp, Object constraints, int index)",False,,NULL
7,Box,5,"void add(Component comp, Object constraints, int index)",False,,NULL
8,Box.Filler,1,boolean add(E e),False,,NULL
8,Box.Filler,2,"void add(int index, E element)",False,,NULL
8,Box.Filler,3,boolean addAll(Collection<? extends E> c),False,,NULL
8,Box.Filler,4,"boolean addAll(int index, Collection<? extends E> c)",False,,NULL
8,Box.Filler,5,void clear(),False,,NULL
9,BoxLayout,1,"BoxLayout(Container target, int axis)",False,,NULL
9,BoxLayout,2,"void addLayoutComponent(String name, Component comp)",True,Not used by this class.,"

addLayoutComponent
public void addLayoutComponent(String name,
                               Component comp)
Not used by this class.

Specified by:
addLayoutComponent in interface LayoutManager
Parameters:
name - the name of the component
comp - the component


"
9,BoxLayout,3,"void addLayoutComponent(Component comp, Object constraints)",True,Not used by this class.,"

addLayoutComponent
public void addLayoutComponent(Component comp,
                               Object constraints)
Not used by this class.

Specified by:
addLayoutComponent in interface LayoutManager2
Parameters:
comp - the component
constraints - constraints


"
9,BoxLayout,4,"void addLayoutComponent(String name, Component comp, int index)",False,,NULL
9,BoxLayout,5,"void addLayoutComponent(Component comp, Object constraints, int index)",False,,NULL
9,BoxLayout,6,"void addLayoutComponent(String name, Component comp, int width, int height)",False,,NULL
9,BoxLayout,7,"void addLayoutComponent(Component comp, Object constraints, int width, int height)",False,,NULL
9,BoxLayout,8,"void addLayoutComponent(String name, Component comp, int width, int height, int hints)",False,,NULL
9,BoxLayout,9,"void addLayoutComponent(Component comp, Object constraints, int width, int height, int hints)",False,,NULL
9,BoxLayout,10,"void addLayoutComponent(String name, Component comp, int width, int height, float max, float weight)",False,,NULL
9,BoxLayout,11,"void addLayoutComponent(Component comp, Object constraints, int width, int height, float max, float weight)",False,,NULL
9,BoxLayout,12,"void addLayoutComponent(String name, Component comp, int width, int height, float max, float weight, int hints)",False,,NULL
9,BoxLayout,13,"void addLayoutComponent(Component comp, Object constraints, int width, int height, float max, float weight, int hints)",False,,NULL
9,BoxLayout,14,"void addLayoutComponent(String name, Component comp, int width, int height, float max, float weight, float min, float preferred)",False,,NULL
9,BoxLayout,15,"void addLayoutComponent(Component comp, Object constraints, int width, int height, float max, float weight, float min, float preferred)",False,,NULL
9,BoxLayout,16,"void addLayoutComponent(String name, Component comp, int width, int height, float max, float weight, float min, float preferred, int hints)",False,,NULL
9,BoxLayout,17,"void addLayoutComponent(Component comp, Object constraints, int width, int height, float max, float weight, float min, float preferred, int hints)",False,,NULL
9,BoxLayout,18,"void addLayoutComponent(String name, Component comp, int width, int height, float max, float weight, float min, float preferred, float alignmentX, float alignmentY)",False,,NULL
9,BoxLayout,19,"void addLayoutComponent(Component comp, Object constraints, int width, int height, float max, float weight, float min, float preferred, float alignmentX, float alignmentY)",False,,NULL
9,BoxLayout,20,"void addLayoutComponent(String name, Component comp, int width, int height, float max, float weight, float min, float preferred, float alignmentX, float alignmentY, int hints)",False,,NULL
9,BoxLayout,21,"void addLayoutComponent(Component comp, Object constraints, int width, int height, float max, float weight, float min, float preferred, float alignmentX, float alignmentY, int hints)",False,,NULL
9,BoxLayout,22,"void addLayoutComponent(String name, Component comp, int width, int height, float max, float weight, float min, float preferred, float alignmentX, float alignmentY, float alignmentZ, int hints)",False,,NULL
9,BoxLayout,23,"void addLayoutComponent(Component comp, Object constraints, int width, int height, float max, float weight, float min, float preferred, float alignmentX, float alignmentY, float alignmentZ, int hints)",False,,NULL
9,BoxLayout,24,"void addLayoutComponent(String name, Component comp, int width, int height, float max, float weight, float min, float preferred, float alignmentX, float alignmentY, float alignmentZ, float marginWidth, float marginHeight, int hints)",False,,NULL
9,BoxLayout,25,"void addLayoutComponent(Component comp, Object constraints, int width, int height, float max, float weight, float min, float preferred, float alignmentX, float alignmentY, float alignmentZ, float marginWidth, float marginHeight, int hints)",False,,NULL
10,ButtonGroup,1,boolean add(ButtonModel m),False,,NULL
10,ButtonGroup,2,void add(AbstractButton b),True,Adds the button to the group.,"

add
public void add(AbstractButton b)
Adds the button to the group.

Parameters:
b - the button to be added


"
10,ButtonGroup,3,void clearSelection(),True,Clears the selection such that none of the buttons in the ButtonGroup are selected.,"

clearSelection
public void clearSelection()
Clears the selection such that none of the buttons
 in the ButtonGroup are selected.

Since:
1.6


"
10,ButtonGroup,4,ButtonModel getSelection(),True,Returns the model of the selected button.,"

getSelection
public ButtonModel getSelection()
Returns the model of the selected button.

Returns:
the selected button model


"
10,ButtonGroup,5,"void setSelected(ButtonModel m, boolean b)",True,Sets the selected value for the ButtonModel.,"

setSelected
public void setSelected(ButtonModel m,
                        boolean b)
Sets the selected value for the ButtonModel.
 Only one button in the group may be selected at a time.

Parameters:
m - the ButtonModel
b - true if this button is to be
   selected, otherwise false


"
11,CellRendererPane,1,void add(Component comp),False,,NULL
11,CellRendererPane,2,"void add(Component comp, Object constraints)",False,,NULL
11,CellRendererPane,3,"void add(Component comp, Object constraints, int index)",False,,NULL
11,CellRendererPane,4,"void add(Component comp, Object constraints, int index, int weightx, int weighty)",False,,NULL
11,CellRendererPane,5,"void add(Component comp, Object constraints, int index, double weightx, double weighty)",False,,NULL
11,CellRendererPane,6,"void add(Component comp, Object constraints, int index, double weightx, double weighty, int anchor)",False,,NULL
11,CellRendererPane,7,"void add(Component comp, Object constraints, int index, double weightx, double weighty, int anchor, int fill)",False,,NULL
11,CellRendererPane,8,"void add(Component comp, Object constraints, int index, double weightx, double weighty, int anchor, int fill, double sizeweight)",False,,NULL
11,CellRendererPane,9,"void add(Component comp, Object constraints, int index, double weightx, double weighty, int anchor, int fill, double sizeweight, int maxsize)",False,,NULL
11,CellRendererPane,10,"void add(Component comp, Object constraints, int index, double weightx, double weighty, int anchor, int fill, double sizeweight, int maxsize, int minsize)",False,,NULL
11,CellRendererPane,11,"void add(Component comp, Object constraints, int index, double weightx, double weighty, int anchor, int fill, double sizeweight, int maxsize, int minsize, int minwidth, int minheight)",False,,NULL
11,CellRendererPane,12,"void add(Component comp, Object constraints, int index, double weightx, double weighty, int anchor, int fill, double sizeweight, int maxsize, int minsize, int minwidth, int minheight, int prefwidth, int prefheight)",False,,NULL
11,CellRendererPane,13,"void add(Component comp, Object constraints, int index, double weightx, double weighty, int anchor, int fill, double sizeweight, int maxsize, int minsize, int minwidth, int minheight, int prefwidth, int prefheight, int maxwidth, int maxheight)",False,,NULL
11,CellRendererPane,14,"void add(Component comp, Object constraints, int index, double weightx, double weighty, int anchor, int fill, double sizeweight, int maxsize, int minsize, int minwidth, int minheight, int prefwidth, int prefheight, int maxwidth, int maxheight, int minx, int miny)",False,,NULL
11,CellRendererPane,15,"void add(Component comp, Object constraints, int index, double weightx, double weighty, int anchor, int fill, double sizeweight, int maxsize, int minsize, int minwidth, int minheight, int prefwidth, int prefheight, int maxwidth, int maxheight, int minx, int miny, int prefx, int prefy)",False,,NULL
11,CellRendererPane,16,"void add(Component comp, Object constraints, int index, double weightx, double weighty, int anchor, int fill, double sizeweight, int maxsize, int minsize, int minwidth, int minheight, int prefwidth, int prefheight, int maxwidth, int maxheight, int minx, int miny, int prefx, int prefy, int maxx, int maxy)",False,,NULL
11,CellRendererPane,17,"void add(Component comp, Object constraints, int index, double weightx, double weighty, int anchor, int fill, double sizeweight, int maxsize, int minsize, int minwidth, int minheight, int prefwidth, int prefheight, int maxwidth, int maxheight, int minx, int miny, int prefx, int prefy, int maxx, int maxy, int minz, int maxz)",False,,NULL
11,CellRendererPane,18,"void add(Component comp, Object constraints, int index, double weightx, double weighty, int anchor, int fill, double sizeweight, int maxsize, int minsize, int minwidth, int minheight, int prefwidth, int prefheight, int maxwidth, int maxheight, int minx, int miny, int prefx, int prefy, int maxx, int maxy, int minz, int maxz, int prefz)",False,,NULL
12,ComponentInputMap,1,"void add(KeyStroke keyStroke, Action action)",False,,NULL
12,ComponentInputMap,2,Action get(KeyStroke keyStroke),False,,NULL
12,ComponentInputMap,3,"void put(KeyStroke keyStroke, Action action)",False,,NULL
12,ComponentInputMap,4,Action remove(KeyStroke keyStroke),False,,NULL
12,ComponentInputMap,5,void clear(),True,Removes all the mappings from this object.,"

clear
public void clear()
Removes all the mappings from this object.

Overrides:
clear in class InputMap


"
13,DebugGraphics,1,"void drawLine(int x1, int y1, int x2, int y2)",True,Overrides Graphics.drawLine.,"

drawLine
public void drawLine(int x1,
                     int y1,
                     int x2,
                     int y2)
Overrides Graphics.drawLine.

Specified by:
drawLine in class Graphics
Parameters:
x1 - the first point's x coordinate.
y1 - the first point's y coordinate.
x2 - the second point's x coordinate.
y2 - the second point's y coordinate.


"
13,DebugGraphics,2,"void drawRect(int x, int y, int width, int height)",True,Overrides Graphics.drawRect.,"

drawRect
public void drawRect(int x,
                     int y,
                     int width,
                     int height)
Overrides Graphics.drawRect.

Overrides:
drawRect in class Graphics
Parameters:
x - the x coordinate
                         of the rectangle to be drawn.
y - the y coordinate
                         of the rectangle to be drawn.
width - the width of the rectangle to be drawn.
height - the height of the rectangle to be drawn.
See Also:
Graphics.fillRect(int, int, int, int), 
Graphics.clearRect(int, int, int, int)


"
13,DebugGraphics,3,"void drawOval(int x, int y, int width, int height)",True,Overrides Graphics.drawOval.,"

drawOval
public void drawOval(int x,
                     int y,
                     int width,
                     int height)
Overrides Graphics.drawOval.

Specified by:
drawOval in class Graphics
Parameters:
x - the x coordinate of the upper left
                     corner of the oval to be drawn.
y - the y coordinate of the upper left
                     corner of the oval to be drawn.
width - the width of the oval to be drawn.
height - the height of the oval to be drawn.
See Also:
Graphics.fillOval(int, int, int, int)


"
13,DebugGraphics,4,"void drawArc(int x, int y, int width, int height, int startAngle, int arcAngle)",True,Overrides Graphics.drawArc.,"

drawArc
public void drawArc(int x,
                    int y,
                    int width,
                    int height,
                    int startAngle,
                    int arcAngle)
Overrides Graphics.drawArc.

Specified by:
drawArc in class Graphics
Parameters:
x - the x coordinate of the
                    upper-left corner of the arc to be drawn.
y - the y  coordinate of the
                    upper-left corner of the arc to be drawn.
width - the width of the arc to be drawn.
height - the height of the arc to be drawn.
startAngle - the beginning angle.
arcAngle - the angular extent of the arc,
                    relative to the start angle.
See Also:
Graphics.fillArc(int, int, int, int, int, int)


"
13,DebugGraphics,5,"void drawPolygon(int[] xPoints, int[] yPoints, int nPoints)",True,Overrides Graphics.drawPolygon.,"

drawPolygon
public void drawPolygon(int[] xPoints,
                        int[] yPoints,
                        int nPoints)
Overrides Graphics.drawPolygon.

Specified by:
drawPolygon in class Graphics
Parameters:
xPoints - a an array of x coordinates.
yPoints - a an array of y coordinates.
nPoints - a the total number of points.
See Also:
Graphics.fillPolygon(int[], int[], int), 
Graphics.drawPolyline(int[], int[], int)


"
14,DefaultBoundedRangeModel,1,boolean isAdjusting(),False,,NULL
14,DefaultBoundedRangeModel,2,int getExtent(),True,Returns the model's extent.,"

getExtent
public int getExtent()
Returns the model's extent.

Specified by:
getExtent in interface BoundedRangeModel
Returns:
the model's extent
See Also:
setExtent(int), 
BoundedRangeModel.getExtent()


"
14,DefaultBoundedRangeModel,3,int getMaximum(),True,Returns the model's maximum.,"

getMaximum
public int getMaximum()
Returns the model's maximum.

Specified by:
getMaximum in interface BoundedRangeModel
Returns:
the model's maximum
See Also:
setMaximum(int), 
BoundedRangeModel.getMaximum()


"
14,DefaultBoundedRangeModel,4,int getMinimum(),True,Returns the model's minimum.,"

getMinimum
public int getMinimum()
Returns the model's minimum.

Specified by:
getMinimum in interface BoundedRangeModel
Returns:
the model's minimum
See Also:
setMinimum(int), 
BoundedRangeModel.getMinimum()


"
14,DefaultBoundedRangeModel,5,int getValue(),True,Returns the model's current value.,"

getValue
public int getValue()
Returns the model's current value.

Specified by:
getValue in interface BoundedRangeModel
Returns:
the model's current value
See Also:
setValue(int), 
BoundedRangeModel.getValue()


"
14,DefaultBoundedRangeModel,6,void setValueIsAdjusting(boolean b),True,Sets the valueIsAdjusting property.,"

setValueIsAdjusting
public void setValueIsAdjusting(boolean b)
Sets the valueIsAdjusting property.

Specified by:
setValueIsAdjusting in interface BoundedRangeModel
Parameters:
b - true if the upcoming changes to the value property are part of a series
See Also:
getValueIsAdjusting(), 
setValue(int), 
BoundedRangeModel.setValueIsAdjusting(boolean)


"
14,DefaultBoundedRangeModel,7,void setExtent(int extent),True,Sets the extent to n after ensuring that n is greater than or equal to zero and falls within the model's constraints:,"

setExtent
public void setExtent(int n)
Sets the extent to n after ensuring that n
 is greater than or equal to zero and falls within the model's
 constraints:
 
     minimum <= value <= value+extent <= maximum
 

Specified by:
setExtent in interface BoundedRangeModel
Parameters:
n - the model's new extent
See Also:
BoundedRangeModel.setExtent(int)


"
14,DefaultBoundedRangeModel,8,void setMaximum(int maximum),True,Sets the maximum to n after ensuring that n that the other three properties obey the model's constraints:,"

setMaximum
public void setMaximum(int n)
Sets the maximum to n after ensuring that n
 that the other three properties obey the model's constraints:
 
     minimum <= value <= value+extent <= maximum
 

Specified by:
setMaximum in interface BoundedRangeModel
Parameters:
n - the model's new maximum
See Also:
BoundedRangeModel.setMaximum(int)


"
14,DefaultBoundedRangeModel,9,void setMinimum(int minimum),True,Sets the minimum to n after ensuring that n that the other three properties obey the model's constraints:,"

setMinimum
public void setMinimum(int n)
Sets the minimum to n after ensuring that n
 that the other three properties obey the model's constraints:
 
     minimum <= value <= value+extent <= maximum
 

Specified by:
setMinimum in interface BoundedRangeModel
Parameters:
n - the model's new minimum
See Also:
getMinimum(), 
BoundedRangeModel.setMinimum(int)


"
14,DefaultBoundedRangeModel,10,void setValue(int value),True,Sets the current value of the model.,"

setValue
public void setValue(int n)
Sets the current value of the model. For a slider, that
 determines where the knob appears. Ensures that the new
 value, n falls within the model's constraints:
 
     minimum <= value <= value+extent <= maximum
 

Specified by:
setValue in interface BoundedRangeModel
Parameters:
n - the model's new value
See Also:
BoundedRangeModel.setValue(int)


"
15,DefaultButtonModel,1,boolean isArmed(),True,Indicates partial commitment towards triggering the button.,"

isArmed
public boolean isArmed()
Indicates partial commitment towards triggering the
 button.

Specified by:
isArmed in interface ButtonModel
Returns:
true if the button is armed,
         and ready to be triggered
See Also:
ButtonModel.setArmed(boolean)


"
15,DefaultButtonModel,2,void setArmed(boolean b),True,Marks the button as armed or unarmed.,"

setArmed
public void setArmed(boolean b)
Marks the button as armed or unarmed.

Specified by:
setArmed in interface ButtonModel
Parameters:
b - whether or not the button should be armed


"
15,DefaultButtonModel,3,boolean isPressed(),True,Indicates if the button is pressed.,"

isPressed
public boolean isPressed()
Indicates if the button is pressed.

Specified by:
isPressed in interface ButtonModel
Returns:
true if the button is pressed


"
15,DefaultButtonModel,4,void setPressed(boolean b),True,Sets the button to pressed or unpressed.,"

setPressed
public void setPressed(boolean b)
Sets the button to pressed or unpressed.

Specified by:
setPressed in interface ButtonModel
Parameters:
b - whether or not the button should be pressed
See Also:
ButtonModel.isPressed()


"
15,DefaultButtonModel,5,boolean isRollover(),True,Indicates that the mouse is over the button.,"

isRollover
public boolean isRollover()
Indicates that the mouse is over the button.

Specified by:
isRollover in interface ButtonModel
Returns:
true if the mouse is over the button


"
15,DefaultButtonModel,6,void setRollover(boolean b),True,Sets or clears the button's rollover state,"

setRollover
public void setRollover(boolean b)
Sets or clears the button's rollover state

Specified by:
setRollover in interface ButtonModel
Parameters:
b - whether or not the button is in the rollover state
See Also:
ButtonModel.isRollover()


"
15,DefaultButtonModel,7,boolean isSelected(),True,Indicates if the button has been selected.,"

isSelected
public boolean isSelected()
Indicates if the button has been selected. Only needed for
 certain types of buttons - such as radio buttons and check boxes.

Specified by:
isSelected in interface ButtonModel
Returns:
true if the button is selected


"
15,DefaultButtonModel,8,void setSelected(boolean b),True,Selects or deselects the button.,"

setSelected
public void setSelected(boolean b)
Selects or deselects the button.

Specified by:
setSelected in interface ButtonModel
Parameters:
b - true selects the button,
          false deselects the button


"
15,DefaultButtonModel,9,void setEnabled(boolean b),True,Enables or disables the button.,"

setEnabled
public void setEnabled(boolean b)
Enables or disables the button.

Specified by:
setEnabled in interface ButtonModel
Parameters:
b - whether or not the button should be enabled
See Also:
ButtonModel.isEnabled()


"
15,DefaultButtonModel,10,boolean isEnabled(),True,"Indicates if the button can be selected or triggered by an input device, such as a mouse pointer.","

isEnabled
public boolean isEnabled()
Indicates if the button can be selected or triggered by
 an input device, such as a mouse pointer.

Specified by:
isEnabled in interface ButtonModel
Returns:
true if the button is enabled


"
15,DefaultButtonModel,11,void setMnemonic(int mnemonic),True,Sets the keyboard mnemonic (shortcut key or accelerator key) for the button.,"

setMnemonic
public void setMnemonic(int key)
Sets the keyboard mnemonic (shortcut key or
 accelerator key) for the button.

Specified by:
setMnemonic in interface ButtonModel
Parameters:
key - an int specifying the accelerator key


"
15,DefaultButtonModel,12,int getMnemonic(),True,Gets the keyboard mnemonic for the button.,"

getMnemonic
public int getMnemonic()
Gets the keyboard mnemonic for the button.

Specified by:
getMnemonic in interface ButtonModel
Returns:
an int specifying the accelerator key
See Also:
ButtonModel.setMnemonic(int)


"
15,DefaultButtonModel,13,void setActionCommand(String command),True,Sets the action command string that gets sent as part of the ActionEvent when the button is triggered.,"

setActionCommand
public void setActionCommand(String actionCommand)
Sets the action command string that gets sent as part of the
 ActionEvent when the button is triggered.

Specified by:
setActionCommand in interface ButtonModel
Parameters:
actionCommand - the String that identifies the generated event
See Also:
ButtonModel.getActionCommand(), 
ActionEvent.getActionCommand()


"
15,DefaultButtonModel,14,String getActionCommand(),True,Returns the action command string for the button.,"

getActionCommand
public String getActionCommand()
Returns the action command string for the button.

Specified by:
getActionCommand in interface ButtonModel
Returns:
the String that identifies the generated event
See Also:
ButtonModel.setActionCommand(java.lang.String)


"
15,DefaultButtonModel,15,void setHorizontalAlignment(int alignment),False,,NULL
15,DefaultButtonModel,16,int getHorizontalAlignment(),False,,NULL
15,DefaultButtonModel,17,void setVerticalAlignment(int alignment),False,,NULL
15,DefaultButtonModel,18,int getVerticalAlignment(),False,,NULL
15,DefaultButtonModel,19,void setIcon(Icon icon),False,,NULL
15,DefaultButtonModel,20,Icon getIcon(),False,,NULL
15,DefaultButtonModel,21,void setRolloverIcon(Icon icon),False,,NULL
15,DefaultButtonModel,22,Icon getRolloverIcon(),False,,NULL
15,DefaultButtonModel,23,void setSelectedIcon(Icon icon),False,,NULL
15,DefaultButtonModel,24,Icon getSelectedIcon(),False,,NULL
15,DefaultButtonModel,25,void setDisabledIcon(Icon icon),False,,NULL
15,DefaultButtonModel,26,Icon getDisabledIcon(),False,,NULL
15,DefaultButtonModel,27,void setPressedIcon(Icon icon),False,,NULL
15,DefaultButtonModel,28,Icon getPressedIcon(),False,,NULL
15,DefaultButtonModel,29,void setContentAreaFilled(boolean b),False,,NULL
15,DefaultButtonModel,30,boolean isContentAreaFilled(),False,,NULL
15,DefaultButtonModel,31,void setBorderPainted(boolean b),False,,NULL
15,DefaultButtonModel,32,boolean isBorderPainted(),False,,NULL
15,DefaultButtonModel,33,void setFocusPainted(boolean b),False,,NULL
15,DefaultButtonModel,34,boolean isFocusPainted(),False,,NULL
15,DefaultButtonModel,35,void setDefaultCapable(boolean b),False,,NULL
15,DefaultButtonModel,36,boolean isDefaultCapable(),False,,NULL
15,DefaultButtonModel,37,void setDefaultButton(boolean b),False,,NULL
15,DefaultButtonModel,38,boolean isDefaultButton(),False,,NULL
15,DefaultButtonModel,39,void setRolloverEnabled(boolean b),False,,NULL
15,DefaultButtonModel,40,boolean isRolloverEnabled(),False,,NULL
15,DefaultButtonModel,41,void setPressed(boolean b),True,Sets the button to pressed or unpressed.,"

setPressed
public void setPressed(boolean b)
Sets the button to pressed or unpressed.

Specified by:
setPressed in interface ButtonModel
Parameters:
b - whether or not the button should be pressed
See Also:
ButtonModel.isPressed()


"
15,DefaultButtonModel,42,boolean isPressed(),True,Indicates if the button is pressed.,"

isPressed
public boolean isPressed()
Indicates if the button is pressed.

Specified by:
isPressed in interface ButtonModel
Returns:
true if the button is pressed


"
15,DefaultButtonModel,43,void setRollover(boolean b),True,Sets or clears the button's rollover state,"

setRollover
public void setRollover(boolean b)
Sets or clears the button's rollover state

Specified by:
setRollover in interface ButtonModel
Parameters:
b - whether or not the button is in the rollover state
See Also:
ButtonModel.isRollover()


"
15,DefaultButtonModel,44,boolean isRollover(),True,Indicates that the mouse is over the button.,"

isRollover
public boolean isRollover()
Indicates that the mouse is over the button.

Specified by:
isRollover in interface ButtonModel
Returns:
true if the mouse is over the button


"
15,DefaultButtonModel,45,void setSelected(boolean b),True,Selects or deselects the button.,"

setSelected
public void setSelected(boolean b)
Selects or deselects the button.

Specified by:
setSelected in interface ButtonModel
Parameters:
b - true selects the button,
          false deselects the button


"
15,DefaultButtonModel,46,boolean isSelected(),True,Indicates if the button has been selected.,"

isSelected
public boolean isSelected()
Indicates if the button has been selected. Only needed for
 certain types of buttons - such as radio buttons and check boxes.

Specified by:
isSelected in interface ButtonModel
Returns:
true if the button is selected


"
15,DefaultButtonModel,47,void setEnabled(boolean b),True,Enables or disables the button.,"

setEnabled
public void setEnabled(boolean b)
Enables or disables the button.

Specified by:
setEnabled in interface ButtonModel
Parameters:
b - whether or not the button should be enabled
See Also:
ButtonModel.isEnabled()


"
15,DefaultButtonModel,48,boolean isEnabled(),True,"Indicates if the button can be selected or triggered by an input device, such as a mouse pointer.","

isEnabled
public boolean isEnabled()
Indicates if the button can be selected or triggered by
 an input device, such as a mouse pointer.

Specified by:
isEnabled in interface ButtonModel
Returns:
true if the button is enabled


"
15,DefaultButtonModel,49,void setMnemonic(int mnemonic),True,Sets the keyboard mnemonic (shortcut key or accelerator key) for the button.,"

setMnemonic
public void setMnemonic(int key)
Sets the keyboard mnemonic (shortcut key or
 accelerator key) for the button.

Specified by:
setMnemonic in interface ButtonModel
Parameters:
key - an int specifying the accelerator key


"
15,DefaultButtonModel,50,int getMnemonic(),True,Gets the keyboard mnemonic for the button.,"

getMnemonic
public int getMnemonic()
Gets the keyboard mnemonic for the button.

Specified by:
getMnemonic in interface ButtonModel
Returns:
an int specifying the accelerator key
See Also:
ButtonModel.setMnemonic(int)


"
15,DefaultButtonModel,51,void setActionCommand(String command),True,Sets the action command string that gets sent as part of the ActionEvent when the button is triggered.,"

setActionCommand
public void setActionCommand(String actionCommand)
Sets the action command string that gets sent as part of the
 ActionEvent when the button is triggered.

Specified by:
setActionCommand in interface ButtonModel
Parameters:
actionCommand - the String that identifies the generated event
See Also:
ButtonModel.getActionCommand(), 
ActionEvent.getActionCommand()


"
15,DefaultButtonModel,52,String getActionCommand(),True,Returns the action command string for the button.,"

getActionCommand
public String getActionCommand()
Returns the action command string for the button.

Specified by:
getActionCommand in interface ButtonModel
Returns:
the String that identifies the generated event
See Also:
ButtonModel.setActionCommand(java.lang.String)


"
15,DefaultButtonModel,53,void setHorizontalAlignment(int alignment),False,,NULL
15,DefaultButtonModel,54,int getHorizontalAlignment(),False,,NULL
15,DefaultButtonModel,55,void setVerticalAlignment(int alignment),False,,NULL
15,DefaultButtonModel,56,int getVerticalAlignment(),False,,NULL
15,DefaultButtonModel,57,void setIcon(Icon icon),False,,NULL
15,DefaultButtonModel,58,Icon getIcon(),False,,NULL
15,DefaultButtonModel,59,void setRolloverIcon(Icon icon),False,,NULL
15,DefaultButtonModel,60,Icon getRolloverIcon(),False,,NULL
15,DefaultButtonModel,61,void setSelectedIcon(Icon icon),False,,NULL
15,DefaultButtonModel,62,Icon getSelectedIcon(),False,,NULL
15,DefaultButtonModel,63,void setDisabledIcon(Icon icon),False,,NULL
15,DefaultButtonModel,64,Icon getDisabledIcon(),False,,NULL
15,DefaultButtonModel,65,void setPressedIcon(Icon icon),False,,NULL
15,DefaultButtonModel,66,Icon getPressedIcon(),False,,NULL
15,DefaultButtonModel,67,void setContentAreaFilled(boolean b),False,,NULL
15,DefaultButtonModel,68,boolean isContentAreaFilled(),False,,NULL
15,DefaultButtonModel,69,void setBorderPainted(boolean b),False,,NULL
15,DefaultButtonModel,70,boolean isBorderPainted(),False,,NULL
15,DefaultButtonModel,71,void setFocusPainted(boolean b),False,,NULL
15,DefaultButtonModel,72,boolean isFocusPainted(),False,,NULL
15,DefaultButtonModel,73,void setDefaultCapable(boolean b),False,,NULL
16,DefaultCellEditor,1,boolean isCellEditable(EventObject anEvent),True,Forwards the message from the CellEditor to the delegate.,"

isCellEditable
public boolean isCellEditable(EventObject anEvent)
Forwards the message from the CellEditor to
 the delegate.

Specified by:
isCellEditable in interface CellEditor
Overrides:
isCellEditable in class AbstractCellEditor
Parameters:
anEvent - an event object
Returns:
true
See Also:
DefaultCellEditor.EditorDelegate.isCellEditable(EventObject)


"
16,DefaultCellEditor,2,"Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column)",True,Implements the TableCellEditor interface.,"

getTableCellEditorComponent
public Component getTableCellEditorComponent(JTable table,
                                             Object value,
                                             boolean isSelected,
                                             int row,
                                             int column)
Implements the TableCellEditor interface.

Specified by:
getTableCellEditorComponent in interface TableCellEditor
Parameters:
table - the JTable that is asking the
                          editor to edit; can be null
value - the value of the cell to be edited; it is
                          up to the specific editor to interpret
                          and draw the value.  For example, if value is
                          the string ""true"", it could be rendered as a
                          string or it could be rendered as a check
                          box that is checked.  null
                          is a valid value
isSelected - true if the cell is to be rendered with
                          highlighting
row - the row of the cell being edited
column - the column of the cell being edited
Returns:
the component for editing


"
16,DefaultCellEditor,3,Object getCellEditorValue(),True,Forwards the message from the CellEditor to the delegate.,"

getCellEditorValue
public Object getCellEditorValue()
Forwards the message from the CellEditor to
 the delegate.

Specified by:
getCellEditorValue in interface CellEditor
Returns:
the value contained in the editor
See Also:
DefaultCellEditor.EditorDelegate.getCellEditorValue()


"
16,DefaultCellEditor,4,void cancelCellEditing(),True,Forwards the message from the CellEditor to the delegate.,"

cancelCellEditing
public void cancelCellEditing()
Forwards the message from the CellEditor to
 the delegate.

Specified by:
cancelCellEditing in interface CellEditor
Overrides:
cancelCellEditing in class AbstractCellEditor
See Also:
DefaultCellEditor.EditorDelegate.cancelCellEditing()


"
16,DefaultCellEditor,5,void addCellEditorListener(CellEditorListener l),False,,NULL
17,DefaultComboBoxModel,1,boolean add(E e),False,,NULL
17,DefaultComboBoxModel,2,"void add(int index, E element)",False,,NULL
17,DefaultComboBoxModel,3,boolean addAll(Collection<? extends E> c),False,,NULL
17,DefaultComboBoxModel,4,void clear(),False,,NULL
17,DefaultComboBoxModel,5,boolean contains(Object o),False,,NULL
18,DefaultDesktopManager,1,void beginDraggingFrame(JInternalFrame f),False,,NULL
18,DefaultDesktopManager,2,void endDraggingFrame(JInternalFrame f),False,,NULL
18,DefaultDesktopManager,3,"void dragFrame(JInternalFrame f, int newX, int newY)",False,,NULL
18,DefaultDesktopManager,4,"void endResizingFrame(JInternalFrame f, int newWidth, int newHeight)",False,,NULL
18,DefaultDesktopManager,5,"void beginResizingFrame(JInternalFrame f, int direction)",False,,NULL
18,DefaultDesktopManager,6,void addNotify(),False,,NULL
18,DefaultDesktopManager,7,void removeNotify(),False,,NULL
18,DefaultDesktopManager,8,void addFrame(JInternalFrame f),False,,NULL
18,DefaultDesktopManager,9,void removeFrame(JInternalFrame f),False,,NULL
18,DefaultDesktopManager,10,void activateFrame(JInternalFrame f),True,This will activate f moving it to the front.,"

activateFrame
public void activateFrame(JInternalFrame f)
This will activate f moving it to the front. It will
 set the current active frame's (if any)
 IS_SELECTED_PROPERTY to false.
 There can be only one active frame across all Layers.

Specified by:
activateFrame in interface DesktopManager
Parameters:
f - the JInternalFrame to be activated


"
18,DefaultDesktopManager,11,void deactivateFrame(JInternalFrame f),True,"Generally, indicate that this frame has lost focus.","

deactivateFrame
public void deactivateFrame(JInternalFrame f)
Description copied from interface: DesktopManager
Generally, indicate that this frame has lost focus. This is usually called
 after the JInternalFrame's IS_SELECTED_PROPERTY has been set to false.

Specified by:
deactivateFrame in interface DesktopManager


"
18,DefaultDesktopManager,12,void selectFrame(JInternalFrame f),False,,NULL
18,DefaultDesktopManager,13,void unselectFrame(JInternalFrame f),False,,NULL
18,DefaultDesktopManager,14,"void setBounds(int x, int y, int width, int height)",False,,NULL
18,DefaultDesktopManager,15,void setBounds(Rectangle newBounds),False,,NULL
18,DefaultDesktopManager,16,"void setBounds(Rectangle newBounds, Rectangle oldBounds)",False,,NULL
18,DefaultDesktopManager,17,"void setBounds(Rectangle newBounds, Rectangle oldBounds, boolean animate)",False,,NULL
18,DefaultDesktopManager,18,"void setBounds(Rectangle newBounds, Rectangle oldBounds, boolean animate, boolean immediate)",False,,NULL
18,DefaultDesktopManager,19,"void setBounds(Rectangle newBounds, Rectangle oldBounds, boolean animate, boolean immediate, boolean forcibly)",False,,NULL
18,DefaultDesktopManager,20,"void setBounds(Rectangle newBounds, Rectangle oldBounds, boolean animate, boolean immediate, boolean forcibly, boolean force)",False,,NULL
19,DefaultFocusManager,1,void addFocusListener(FocusListener l),False,,NULL
19,DefaultFocusManager,2,void addWindowFocusListener(WindowFocusListener l),False,,NULL
19,DefaultFocusManager,3,void removeFocusListener(FocusListener l),False,,NULL
19,DefaultFocusManager,4,void removeWindowFocusListener(WindowFocusListener l),False,,NULL
19,DefaultFocusManager,5,void transferFocusBackward(),False,,NULL
20,DefaultListCellRenderer,1,void setIcon(Icon icon),False,,NULL
20,DefaultListCellRenderer,2,void setText(String text),False,,NULL
20,DefaultListCellRenderer,3,void setBackground(Color background),False,,NULL
20,DefaultListCellRenderer,4,void setForeground(Color foreground),False,,NULL
20,DefaultListCellRenderer,5,void setEnabled(boolean enabled),False,,NULL
21,DefaultListCellRenderer.UIResource,1,boolean isUIResource(),False,,NULL
21,DefaultListCellRenderer.UIResource,2,void setIcon(Icon icon),False,,NULL
21,DefaultListCellRenderer.UIResource,3,void setText(String text),False,,NULL
21,DefaultListCellRenderer.UIResource,4,void setBackground(Color background),False,,NULL
21,DefaultListCellRenderer.UIResource,5,void setForeground(Color foreground),False,,NULL
22,DefaultListModel,1,boolean add(E e),False,,NULL
22,DefaultListModel,2,E get(int index),True,Returns the element at the specified position in this list.,"

get
public E get(int index)
Returns the element at the specified position in this list.
 
 Throws an ArrayIndexOutOfBoundsException
 if the index is out of range
 (index < 0 || index >= size()).

Parameters:
index - index of element to return


"
22,DefaultListModel,3,E remove(int index),True,Removes the element at the specified position in this list.,"

remove
public E remove(int index)
Removes the element at the specified position in this list.
 Returns the element that was removed from the list.
 
 Throws an ArrayIndexOutOfBoundsException
 if the index is out of range
 (index < 0 || index >= size()).

Parameters:
index - the index of the element to removed
Returns:
the element previously at the specified position


"
22,DefaultListModel,4,int size(),True,Returns the number of components in this list.,"

size
public int size()
Returns the number of components in this list.

Returns:
the number of components in this list
See Also:
Vector.size()


"
22,DefaultListModel,5,void clear(),True,Removes all of the elements from this list.,"

clear
public void clear()
Removes all of the elements from this list.  The list will
 be empty after this call returns (unless it throws an exception).

"
23,DefaultListSelectionModel,1,"void addSelectionInterval(int index0, int index1)",True,Changes the selection to be the set union of the current selection and the indices between index0 and index1 inclusive.,"

addSelectionInterval
public void addSelectionInterval(int index0,
                                 int index1)
Changes the selection to be the set union of the current selection
 and the indices between index0 and index1 inclusive.
 
 In SINGLE_SELECTION selection mode, this is equivalent
 to calling setSelectionInterval, and only the second index
 is used. In SINGLE_INTERVAL_SELECTION selection mode, this
 method behaves like setSelectionInterval, unless the given
 interval is immediately adjacent to or overlaps the existing selection,
 and can therefore be used to grow it.
 
 If this represents a change to the current selection, then each
 ListSelectionListener is notified of the change. Note that
 index0 doesn't have to be less than or equal to index1.
 
 If either index is -1, this method does nothing and returns
 without exception. Otherwise, if either index is less than -1,
 an IndexOutOfBoundsException is thrown.

Specified by:
addSelectionInterval in interface ListSelectionModel
Parameters:
index0 - one end of the interval.
index1 - other end of the interval
Throws:
IndexOutOfBoundsException - if either index is less than -1
         (and neither index is -1)
See Also:
addListSelectionListener(javax.swing.event.ListSelectionListener), 
setSelectionInterval(int, int)


"
23,DefaultListSelectionModel,2,void clearSelection(),True,Change the selection to the empty set.,"

clearSelection
public void clearSelection()
Change the selection to the empty set.  If this represents
 a change to the current selection then notify each ListSelectionListener.

Specified by:
clearSelection in interface ListSelectionModel
See Also:
ListSelectionModel.addListSelectionListener(javax.swing.event.ListSelectionListener)


"
23,DefaultListSelectionModel,3,boolean isSelectedIndex(int index),True,Returns true if the specified index is selected.,"

isSelectedIndex
public boolean isSelectedIndex(int index)
Returns true if the specified index is selected.

Specified by:
isSelectedIndex in interface ListSelectionModel


"
23,DefaultListSelectionModel,4,"void setSelectionInterval(int index0, int index1)",True,Changes the selection to be between index0 and index1 inclusive.,"

setSelectionInterval
public void setSelectionInterval(int index0,
                                 int index1)
Changes the selection to be between index0 and index1
 inclusive. index0 doesn't have to be less than or equal to
 index1.
 
 In SINGLE_SELECTION selection mode, only the second index
 is used.
 
 If this represents a change to the current selection, then each
 ListSelectionListener is notified of the change.
 
 If either index is -1, this method does nothing and returns
 without exception. Otherwise, if either index is less than -1,
 an IndexOutOfBoundsException is thrown.

Specified by:
setSelectionInterval in interface ListSelectionModel
Parameters:
index0 - one end of the interval.
index1 - other end of the interval
Throws:
IndexOutOfBoundsException - if either index is less than -1
         (and neither index is -1)
See Also:
addListSelectionListener(javax.swing.event.ListSelectionListener)


"
23,DefaultListSelectionModel,5,void setValueIsAdjusting(boolean b),True,"Sets the valueIsAdjusting property, which indicates whether or not upcoming selection changes should be considered part of a single change.","

setValueIsAdjusting
public void setValueIsAdjusting(boolean isAdjusting)
Sets the valueIsAdjusting property, which indicates whether
 or not upcoming selection changes should be considered part of a single
 change. The value of this property is used to initialize the
 valueIsAdjusting property of the ListSelectionEvents that
 are generated.
 
 For example, if the selection is being updated in response to a user
 drag, this property can be set to true when the drag is initiated
 and set to false when the drag is finished. During the drag,
 listeners receive events with a valueIsAdjusting property
 set to true. At the end of the drag, when the change is
 finalized, listeners receive an event with the value set to false.
 Listeners can use this pattern if they wish to update only when a change
 has been finalized.
 
 Setting this property to true begins a series of changes that
 is to be considered part of a single change. When the property is changed
 back to false, an event is sent out characterizing the entire
 selection change (if there was one), with the event's
 valueIsAdjusting property set to false.

Specified by:
setValueIsAdjusting in interface ListSelectionModel
Parameters:
isAdjusting - the new value of the property
See Also:
ListSelectionModel.getValueIsAdjusting(), 
ListSelectionEvent.getValueIsAdjusting()


"
24,DefaultRowSorter,1,void setSortKeys(List<? extends SortKey> keys),False,,NULL
24,DefaultRowSorter,2,void toggleSortOrder(int column),True,"Reverses the sort order from ascending to descending (or descending to ascending) if the specified column is already the primary sorted column; otherwise, makes the specified column the primary sorted column, with an ascending sort order.","

toggleSortOrder
public void toggleSortOrder(int column)
Reverses the sort order from ascending to descending (or
 descending to ascending) if the specified column is already the
 primary sorted column; otherwise, makes the specified column
 the primary sorted column, with an ascending sort order.  If
 the specified column is not sortable, this method has no
 effect.

Specified by:
toggleSortOrder in class RowSorter<M>
Parameters:
column - index of the column to make the primary sorted column,
        in terms of the underlying model
Throws:
IndexOutOfBoundsException - if column is outside the range of
         the underlying model
See Also:
setSortable(int,boolean), 
setMaxSortKeys(int)


"
24,DefaultRowSorter,3,void sort(),True,"Sorts and filters the rows in the view based on the sort keys of the columns currently being sorted and the filter, if any, associated with this sorter.","

sort
public void sort()
Sorts and filters the rows in the view based on the sort keys
 of the columns currently being sorted and the filter, if any,
 associated with this sorter.  An empty sortKeys list
 indicates that the view should unsorted, the same as the model.

See Also:
setRowFilter(javax.swing.RowFilter<? super M, ? super I>), 
setSortKeys(java.util.List<? extends javax.swing.RowSorter.SortKey>)


"
24,DefaultRowSorter,4,"void sort(int columnIndex, boolean ascending)",False,,NULL
24,DefaultRowSorter,5,"void sort(int columnIndex, int sortType)",False,,NULL
25,DefaultRowSorter.ModelWrapper,1,boolean isSorted(),False,,NULL
25,DefaultRowSorter.ModelWrapper,2,void setSortKeys(List<SortKey> sortKeys),False,,NULL
25,DefaultRowSorter.ModelWrapper,3,List<SortKey> getSortKeys(),False,,NULL
25,DefaultRowSorter.ModelWrapper,4,"void setSortable(int column, boolean sortable)",False,,NULL
25,DefaultRowSorter.ModelWrapper,5,boolean isSortable(int column),False,,NULL
26,DefaultSingleSelectionModel,1,boolean isSelected(int index),False,,NULL
26,DefaultSingleSelectionModel,2,"void setSelected(int index, boolean b)",False,,NULL
26,DefaultSingleSelectionModel,3,void clearSelection(),True,Clears the selection (to -1).,"

clearSelection
public void clearSelection()
Description copied from interface: SingleSelectionModel
Clears the selection (to -1).

Specified by:
clearSelection in interface SingleSelectionModel


"
26,DefaultSingleSelectionModel,4,"void addSelectionInterval(int index0, int index1)",False,,NULL
26,DefaultSingleSelectionModel,5,"void removeSelectionInterval(int index0, int index1)",False,,NULL
27,FocusManager,1,void addFocusListener(FocusListener l),False,,NULL
27,FocusManager,2,void addWindowFocusListener(WindowFocusListener l),False,,NULL
27,FocusManager,3,Component getFocusOwner(),False,,NULL
27,FocusManager,4,"void requestFocus(Component c, int direction)",False,,NULL
27,FocusManager,5,void remove(FocusListener l),False,,NULL
27,FocusManager,6,void remove(WindowFocusListener l),False,,NULL
27,FocusManager,7,void setDefaultFocusOwner(Component c),False,,NULL
27,FocusManager,8,void setFocusOwner(Component c),False,,NULL
27,FocusManager,9,void transferFocus(Component c),False,,NULL
27,FocusManager,10,void transferFocusBackward(),False,,NULL
27,FocusManager,11,void transferFocusForward(),False,,NULL
27,FocusManager,12,void updateFocusOwner(Component c),False,,NULL
27,FocusManager,13,void updateWindowFocusOwner(Window w),False,,NULL
27,FocusManager,14,void dispatchEvent(FocusEvent e),False,,NULL
27,FocusManager,15,void dispatchEvent(WindowEvent e),False,,NULL
28,GrayFilter,1,GrayFilter(float brightness),False,,NULL
28,GrayFilter,2,"GrayFilter(float brightness, float contrast)",False,,NULL
28,GrayFilter,3,ImageFilter getImageFilter(boolean b),False,,NULL
28,GrayFilter,4,"ImageFilter getImageFilter(boolean b, float f)",False,,NULL
28,GrayFilter,5,"ImageFilter getImageFilter(boolean b, float f, float f1)",False,,NULL
29,GroupLayout,1,void setHorizontalGroup(javax.swing.GroupLayout.Group group),False,,NULL
29,GroupLayout,2,void setVerticalGroup(javax.swing.GroupLayout.Group group),False,,NULL
29,GroupLayout,3,"void linkSize(javax.swing.GroupLayout.SequentialGroup group, int constraint, int... constraints)",False,,NULL
29,GroupLayout,4,"void linkInsets(javax.swing.GroupLayout.SequentialGroup group, int top, int left, int bottom, int right, int... insets)",False,,NULL
29,GroupLayout,5,"void setPadding(int top, int left, int bottom, int right)",False,,NULL
30,ImageIcon,1,ImageIcon(String filename),False,,NULL
30,ImageIcon,2,ImageIcon(URL url),False,,NULL
30,ImageIcon,3,ImageIcon(Image image),False,,NULL
30,ImageIcon,4,"ImageIcon(Image image, String description)",False,,NULL
30,ImageIcon,5,"ImageIcon(Image image, String description, int iconWidth, int iconHeight)",False,,NULL
31,InputMap,1,"void put(KeyStroke keyStroke, Object value)",True,Adds a binding for keyStroke to actionMapKey.,"

put
public void put(KeyStroke keyStroke,
                Object actionMapKey)
Adds a binding for keyStroke to actionMapKey.
 If actionMapKey is null, this removes the current binding
 for keyStroke.

"
31,InputMap,2,Object get(Object key),False,,NULL
31,InputMap,3,Object remove(Object key),False,,NULL
31,InputMap,4,boolean containsKey(Object key),False,,NULL
31,InputMap,5,boolean containsValue(Object value),False,,NULL
32,InputVerifier,1,boolean verify(JComponent input),True,Checks whether the JComponent's input is valid.,"

verify
public abstract boolean verify(JComponent input)
Checks whether the JComponent's input is valid. This method should
 have no side effects. It returns a boolean indicating the status
 of the argument's input.

Parameters:
input - the JComponent to verify
Returns:
true when valid, false when invalid
See Also:
JComponent.setInputVerifier(javax.swing.InputVerifier), 
JComponent.getInputVerifier()


"
32,InputVerifier,2,boolean shouldYieldFocus(JComponent input),True,Calls verify(input) to ensure that the input is valid.,"

shouldYieldFocus
public boolean shouldYieldFocus(JComponent input)
Calls verify(input) to ensure that the input is valid.
 This method can have side effects. In particular, this method
 is called when the user attempts to advance focus out of the
 argument component into another Swing component in this window.
 If this method returns true, then the focus is transfered
 normally; if it returns false, then the focus remains in
 the argument component.

Parameters:
input - the JComponent to verify
Returns:
true when valid, false when invalid
See Also:
JComponent.setInputVerifier(javax.swing.InputVerifier), 
JComponent.getInputVerifier()


"
32,InputVerifier,3,void deinstall(JComponent input),False,,NULL
32,InputVerifier,4,void install(JComponent input),False,,NULL
32,InputVerifier,5,boolean shouldYieldFocusNext(JComponent input),False,,NULL
33,InternalFrameFocusTraversalPolicy,1,"void setInitialComponent(JInternalFrame iframe, JComponent comp)",False,,NULL
33,InternalFrameFocusTraversalPolicy,2,JComponent getInitialComponent(JInternalFrame iframe),False,,NULL
33,InternalFrameFocusTraversalPolicy,3,"void setComponentAfter(JComponent comp, JComponent nextComp)",False,,NULL
33,InternalFrameFocusTraversalPolicy,4,JComponent getComponentAfter(JComponent comp),False,,NULL
33,InternalFrameFocusTraversalPolicy,5,"void setComponentBefore(JComponent comp, JComponent prevComp)",False,,NULL
33,InternalFrameFocusTraversalPolicy,6,JComponent getComponentBefore(JComponent comp),False,,NULL
33,InternalFrameFocusTraversalPolicy,7,void setFirstComponent(JComponent comp),False,,NULL
33,InternalFrameFocusTraversalPolicy,8,JComponent getFirstComponent(),False,,NULL
33,InternalFrameFocusTraversalPolicy,9,void setLastComponent(JComponent comp),False,,NULL
33,InternalFrameFocusTraversalPolicy,10,JComponent getLastComponent(),False,,NULL
33,InternalFrameFocusTraversalPolicy,11,"void setPriority(JComponent comp, int priority)",False,,NULL
33,InternalFrameFocusTraversalPolicy,12,int getPriority(JComponent comp),False,,NULL
33,InternalFrameFocusTraversalPolicy,13,"void setPriority(JComponent comp, int priority)",False,,NULL
33,InternalFrameFocusTraversalPolicy,14,int getPriority(JComponent comp),False,,NULL
33,InternalFrameFocusTraversalPolicy,15,"void setPriority(JComponent comp, int priority)",False,,NULL
33,InternalFrameFocusTraversalPolicy,16,int getPriority(JComponent comp),False,,NULL
33,InternalFrameFocusTraversalPolicy,17,"void setPriority(JComponent comp, int priority)",False,,NULL
33,InternalFrameFocusTraversalPolicy,18,int getPriority(JComponent comp),False,,NULL
33,InternalFrameFocusTraversalPolicy,19,"void setPriority(JComponent comp, int priority)",False,,NULL
33,InternalFrameFocusTraversalPolicy,20,int getPriority(JComponent comp),False,,NULL
34,JApplet,1,void init(),False,,NULL
34,JApplet,2,void start(),False,,NULL
34,JApplet,3,void stop(),False,,NULL
34,JApplet,4,void destroy(),False,,NULL
34,JApplet,5,void paint(Graphics g),False,,NULL
35,JButton,1,JButton(),False,,NULL
35,JButton,2,void setText(String text),False,,NULL
35,JButton,3,String getText(),False,,NULL
35,JButton,4,void setIcon(Icon icon),False,,NULL
35,JButton,5,Icon getIcon(),False,,NULL
36,JCheckBox,1,boolean isSelected(),False,,NULL
36,JCheckBox,2,void setSelected(boolean b),False,,NULL
36,JCheckBox,3,void setEnabled(boolean b),False,,NULL
36,JCheckBox,4,"void setBounds(int x, int y, int width, int height)",False,,NULL
36,JCheckBox,5,void setText(String text),False,,NULL
37,JCheckBoxMenuItem,1,boolean isSelected(),False,,NULL
37,JCheckBoxMenuItem,2,void setSelected(boolean aValue),False,,NULL
37,JCheckBoxMenuItem,3,void setState(boolean aValue),True,Sets the selected-state of the item.,"

setState
public void setState(boolean b)
Sets the selected-state of the item. This method
 exists for AWT compatibility only.  New code should
 use setSelected() instead.

Parameters:
b - a boolean value indicating the item's
           selected-state, where true=selected


"
37,JCheckBoxMenuItem,4,void setEnabled(boolean aFlag),False,,NULL
37,JCheckBoxMenuItem,5,void setActionCommand(String aCommand),False,,NULL
38,JColorChooser,1,JColorChooser.getColor(),False,,NULL
38,JColorChooser,2,JColorChooser.setColor(Color color),False,,NULL
38,JColorChooser,3,"JColorChooser.showDialog(Component parent, String title, Color initialColor)",False,,NULL
38,JColorChooser,4,"JColorChooser.showDialog(Component parent, String title, Color initialColor, ColorSelectionModel selectionModel)",False,,NULL
38,JColorChooser,5,JColorChooser.createHSBColorPicker(),False,,NULL
39,JComboBox,1,boolean add(E e),False,,NULL
39,JComboBox,2,void addItem(Object item),False,,NULL
39,JComboBox,3,void addItemListener(ItemListener l),True,Adds an ItemListener.,"

addItemListener
public void addItemListener(ItemListener aListener)
Adds an ItemListener.
 
aListener will receive one or two ItemEvents when
 the selected item changes.

Specified by:
addItemListener in interface ItemSelectable
Parameters:
aListener - the ItemListener that is to be notified
See Also:
setSelectedItem(java.lang.Object)


"
39,JComboBox,4,void addKeyListener(KeyListener l),False,,NULL
39,JComboBox,5,void addMouseListener(MouseListener l),False,,NULL
39,JComboBox,6,void addMouseMotionListener(MouseMotionListener l),False,,NULL
39,JComboBox,7,void addMouseWheelListener(MouseWheelListener l),False,,NULL
39,JComboBox,8,void addPopupMenuListener(PopupMenuListener l),True,Adds a PopupMenu listener which will listen to notification messages from the popup portion of the combo box.,"

addPopupMenuListener
public void addPopupMenuListener(PopupMenuListener l)
Adds a PopupMenu listener which will listen to notification
 messages from the popup portion of the combo box.
 
 For all standard look and feels shipped with Java, the popup list
 portion of combo box is implemented as a JPopupMenu.
 A custom look and feel may not implement it this way and will
 therefore not receive the notification.

Parameters:
l - the PopupMenuListener to add
Since:
1.4


"
39,JComboBox,9,void addSelectionListener(ListSelectionListener l),False,,NULL
39,JComboBox,10,void addWindowListener(WindowListener l),False,,NULL
39,JComboBox,11,void clearSelection(),False,,NULL
39,JComboBox,12,Component getEditor(),False,,NULL
39,JComboBox,13,Object getSelectedItem(),True,Returns the current selected item.,"

getSelectedItem
public Object getSelectedItem()
Returns the current selected item.
 
 If the combo box is editable, then this value may not have been added
 to the combo box with addItem, insertItemAt
 or the data constructors.

Returns:
the current selected Object
See Also:
setSelectedItem(java.lang.Object)


"
39,JComboBox,14,int getSelectedIndex(),True,Returns the first item in the list that matches the given item.,"

getSelectedIndex
public int getSelectedIndex()
Returns the first item in the list that matches the given item.
 The result is not always defined if the JComboBox
 allows selected items that are not in the list.
 Returns -1 if there is no selected item or if the user specified
 an item which is not in the list.

Returns:
an integer specifying the currently selected list item,
                  where 0 specifies
                  the first item in the list;
                  or -1 if no item is selected or if
                  the currently selected item is not in the list


"
39,JComboBox,15,"void insertItemAt(Object item, int index)",False,,NULL
39,JComboBox,16,void removeItem(Object item),True,Removes an item from the item list.,"

removeItem
public void removeItem(Object anObject)
Removes an item from the item list.
 This method works only if the JComboBox uses a
 mutable data model.

Parameters:
anObject - the object to remove from the item list
See Also:
MutableComboBoxModel


"
39,JComboBox,17,void removeItemListener(ItemListener l),True,Removes an ItemListener.,"

removeItemListener
public void removeItemListener(ItemListener aListener)
Removes an ItemListener.

Specified by:
removeItemListener in interface ItemSelectable
Parameters:
aListener - the ItemListener to remove
See Also:
ItemEvent


"
39,JComboBox,18,void removeKeyListener(KeyListener l),False,,NULL
39,JComboBox,19,void removeMouseListener(MouseListener l),False,,NULL
39,JComboBox,20,void removeMouseMotionListener(MouseMotionListener l),False,,NULL
39,JComboBox,21,void removeMouseWheelListener(MouseWheelListener l),False,,NULL
39,JComboBox,22,void removePopupMenuListener(PopupMenuListener l),True,Removes a PopupMenuListener.,"

removePopupMenuListener
public void removePopupMenuListener(PopupMenuListener l)
Removes a PopupMenuListener.

Parameters:
l - the PopupMenuListener to remove
Since:
1.4
See Also:
addPopupMenuListener(javax.swing.event.PopupMenuListener)


"
39,JComboBox,23,void removeSelectionListener(ListSelectionListener l),False,,NULL
39,JComboBox,24,void removeWindowListener(WindowListener l),False,,NULL
39,JComboBox,25,void setSelectedItem(Object anObject),True,Sets the selected item in the combo box display area to the object in the argument.,"

setSelectedItem
public void setSelectedItem(Object anObject)
Sets the selected item in the combo box display area to the object in
 the argument.
 If anObject is in the list, the display area shows
 anObject selected.
 
 If anObject is not in the list and the combo box is
 uneditable, it will not change the current selection. For editable
 combo boxes, the selection will change to anObject.
 
 If this constitutes a change in the selected item,
 ItemListeners added to the combo box will be notified with
 one or two ItemEvents.
 If there is a current selected item, an ItemEvent will be
 fired and the state change will be ItemEvent.DESELECTED.
 If anObject is in the list and is not currently selected
 then an ItemEvent will be fired and the state change will
 be ItemEvent.SELECTED.
 
ActionListeners added to the combo box will be notified
 with an ActionEvent when this method is called.

Parameters:
anObject - the list object to select; use null to
                        clear the selection


"
39,JComboBox,26,void setSelectedIndex(int index),True,Selects the item at index anIndex.,"

setSelectedIndex
public void setSelectedIndex(int anIndex)
Selects the item at index anIndex.

Parameters:
anIndex - an integer specifying the list item to select,
                  where 0 specifies the first item in the list and -1 indicates no selection
Throws:
IllegalArgumentException - if anIndex < -1 or
                  anIndex is greater than or equal to size


"
39,JComboBox,27,void setModel(ComboBoxModel aModel),False,,NULL
39,JComboBox,28,void setEditable(boolean aFlag),True,Determines whether the JComboBox field is editable.,"

setEditable
public void setEditable(boolean aFlag)
Determines whether the JComboBox field is editable.
 An editable JComboBox allows the user to type into the
 field or selected an item from the list to initialize the field,
 after which it can be edited. (The editing affects only the field,
 the list item remains intact.) A non editable JComboBox
 displays the selected item in the field,
 but the selection cannot be modified.

Parameters:
aFlag - a boolean value, where true indicates that the
                  field is editable


"
39,JComboBox,29,void setRenderer(ListCellRenderer aRenderer),False,,NULL
39,JComboBox,30,void setPrototypeDisplayValue(Object aValue),False,,NULL
39,JComboBox,31,void setMaximumRowCount(int aCount),True,Sets the maximum number of rows the JComboBox displays.,"

setMaximumRowCount
public void setMaximumRowCount(int count)
Sets the maximum number of rows the JComboBox displays.
 If the number of objects in the model is greater than count,
 the combo box uses a scrollbar.

Parameters:
count - an integer specifying the maximum number of items to
              display in the list before using a scrollbar


"
39,JComboBox,32,void setVisibleRowCount(int aCount),False,,NULL
39,JComboBox,33,void setEditable(boolean aFlag),True,Determines whether the JComboBox field is editable.,"

setEditable
public void setEditable(boolean aFlag)
Determines whether the JComboBox field is editable.
 An editable JComboBox allows the user to type into the
 field or selected an item from the list to initialize the field,
 after which it can be edited. (The editing affects only the field,
 the list item remains intact.) A non editable JComboBox
 displays the selected item in the field,
 but the selection cannot be modified.

Parameters:
aFlag - a boolean value, where true indicates that the
                  field is editable


"
39,JComboBox,34,void setPrototypeDisplayValue(Object aValue),False,,NULL
39,JComboBox,35,void setMaximumRowCount(int aCount),True,Sets the maximum number of rows the JComboBox displays.,"

setMaximumRowCount
public void setMaximumRowCount(int count)
Sets the maximum number of rows the JComboBox displays.
 If the number of objects in the model is greater than count,
 the combo box uses a scrollbar.

Parameters:
count - an integer specifying the maximum number of items to
              display in the list before using a scrollbar


"
39,JComboBox,36,void setVisibleRowCount(int aCount),False,,NULL
39,JComboBox,37,void setEditable(boolean aFlag),True,Determines whether the JComboBox field is editable.,"

setEditable
public void setEditable(boolean aFlag)
Determines whether the JComboBox field is editable.
 An editable JComboBox allows the user to type into the
 field or selected an item from the list to initialize the field,
 after which it can be edited. (The editing affects only the field,
 the list item remains intact.) A non editable JComboBox
 displays the selected item in the field,
 but the selection cannot be modified.

Parameters:
aFlag - a boolean value, where true indicates that the
                  field is editable


"
39,JComboBox,38,void setPrototypeDisplayValue(Object aValue),False,,NULL
39,JComboBox,39,void setMaximumRowCount(int aCount),True,Sets the maximum number of rows the JComboBox displays.,"

setMaximumRowCount
public void setMaximumRowCount(int count)
Sets the maximum number of rows the JComboBox displays.
 If the number of objects in the model is greater than count,
 the combo box uses a scrollbar.

Parameters:
count - an integer specifying the maximum number of items to
              display in the list before using a scrollbar


"
39,JComboBox,40,void setVisibleRowCount(int aCount),False,,NULL
40,JComponent,1,void add(Component comp),False,,NULL
40,JComponent,2,"void add(Component comp, Object constraints)",False,,NULL
40,JComponent,3,"void add(Component comp, Object constraints, int index)",False,,NULL
40,JComponent,4,"void add(Component comp, int index)",False,,NULL
40,JComponent,5,"void add(Component comp, Object constraints, int index)",False,,NULL
41,JDesktopPane,1,JDesktopPane(),False,,NULL
41,JDesktopPane,2,add(Component comp),False,,NULL
41,JDesktopPane,3,remove(Component comp),False,,NULL
41,JDesktopPane,4,setSize(Dimension d),False,,NULL
41,JDesktopPane,5,"setSize(int width, int height)",False,,NULL
41,JDesktopPane,6,setPreferredSize(Dimension preferredSize),False,,NULL
41,JDesktopPane,7,setMaximumSize(Dimension maximumSize),False,,NULL
41,JDesktopPane,8,setMinimumSize(Dimension minimumSize),False,,NULL
41,JDesktopPane,9,setLayout(LayoutManager mgr),False,,NULL
41,JDesktopPane,10,setBackground(Color bg),False,,NULL
41,JDesktopPane,11,setBorder(Border b),False,,NULL
41,JDesktopPane,12,setOpaque(boolean isOpaque),False,,NULL
41,JDesktopPane,13,setVisible(boolean isVisible),False,,NULL
41,JDesktopPane,14,setEnabled(boolean isEnabled),False,,NULL
41,JDesktopPane,15,setFocusable(boolean focusable),False,,NULL
41,JDesktopPane,16,setFont(Font font),False,,NULL
41,JDesktopPane,17,setToolTipText(String toolTipText),False,,NULL
41,JDesktopPane,18,setComponentOrientation(ComponentOrientation cOrientation),False,,NULL
41,JDesktopPane,19,setAlignmentX(float alignment),False,,NULL
41,JDesktopPane,20,setAlignmentY(float alignment),False,,NULL
41,JDesktopPane,21,setBorder(Border border),False,,NULL
41,JDesktopPane,22,setBackground(Color bg),False,,NULL
41,JDesktopPane,23,setForeground(Color fg),False,,NULL
41,JDesktopPane,24,setCursor(Cursor cursor),False,,NULL
41,JDesktopPane,25,setEnabled(boolean isEnabled),False,,NULL
41,JDesktopPane,26,setFocusable(boolean focusable),False,,NULL
41,JDesktopPane,27,setFont(Font font),False,,NULL
41,JDesktopPane,28,setToolTipText(String toolTipText),False,,NULL
41,JDesktopPane,29,setComponentOrientation(ComponentOrientation cOrientation),False,,NULL
41,JDesktopPane,30,setAlignmentX(float alignment),False,,NULL
41,JDesktopPane,31,setAlignmentY(float alignment),False,,NULL
41,JDesktopPane,32,setBorder(Border border),False,,NULL
41,JDesktopPane,33,setBackground(Color bg),False,,NULL
41,JDesktopPane,34,setForeground(Color fg),False,,NULL
41,JDesktopPane,35,setCursor(Cursor cursor),False,,NULL
41,JDesktopPane,36,setEnabled(boolean isEnabled),False,,NULL
41,JDesktopPane,37,setFocusable(boolean focusable),False,,NULL
41,JDesktopPane,38,setFont(Font font),False,,NULL
41,JDesktopPane,39,setToolTipText(String toolTipText),False,,NULL
41,JDesktopPane,40,setComponentOrientation(ComponentOrientation cOrientation),False,,NULL
41,JDesktopPane,41,setAlignmentX(float alignment),False,,NULL
41,JDesktopPane,42,setAlignmentY(float alignment),False,,NULL
41,JDesktopPane,43,setBorder(Border border),False,,NULL
41,JDesktopPane,44,setBackground(Color bg),False,,NULL
41,JDesktopPane,45,setForeground(Color fg),False,,NULL
41,JDesktopPane,46,setCursor(Cursor cursor),False,,NULL
41,JDesktopPane,47,setEnabled(boolean isEnabled),False,,NULL
41,JDesktopPane,48,setFocusable(boolean focusable),False,,NULL
41,JDesktopPane,49,setFont(Font font),False,,NULL
41,JDesktopPane,50,setToolTipText(String toolTipText),False,,NULL
41,JDesktopPane,51,setComponentOrientation(ComponentOrientation cOrientation),False,,NULL
41,JDesktopPane,52,setAlignmentX(float alignment),False,,NULL
41,JDesktopPane,53,setAlignmentY(float alignment),False,,NULL
41,JDesktopPane,54,setBorder(Border border),False,,NULL
41,JDesktopPane,55,setBackground(Color bg),False,,NULL
41,JDesktopPane,56,setForeground(Color fg),False,,NULL
41,JDesktopPane,57,setCursor(Cursor cursor),False,,NULL
41,JDesktopPane,58,setEnabled(boolean isEnabled),False,,NULL
41,JDesktopPane,59,setFocusable(boolean focusable),False,,NULL
41,JDesktopPane,60,setFont(Font font),False,,NULL
41,JDesktopPane,61,setToolTipText(String toolTipText),False,,NULL
41,JDesktopPane,62,setComponentOrientation(ComponentOrientation cOrientation),False,,NULL
41,JDesktopPane,63,setAlignmentX(float alignment),False,,NULL
41,JDesktopPane,64,setAlignmentY(float alignment),False,,NULL
42,JDialog,1,"JDialog(Frame owner, String title, int modal)",False,,NULL
42,JDialog,2,"void setSize(int width, int height)",False,,NULL
42,JDialog,3,"void setLocation(int x, int y)",False,,NULL
42,JDialog,4,void setVisible(boolean b),False,,NULL
42,JDialog,5,void dispose(),False,,NULL
43,JEditorPane,1,void setContentType(String type),True,Sets the type of content that this editor handles.,"

setContentType
public final void setContentType(String type)
Sets the type of content that this editor
 handles.  This calls getEditorKitForContentType,
 and then setEditorKit if an editor kit can
 be successfully located.  This is mostly convenience method
 that can be used as an alternative to calling
 setEditorKit directly.
 
 If there is a charset definition specified as a parameter
 of the content type specification, it will be used when
 loading input streams using the associated EditorKit.
 For example if the type is specified as
 text/html; charset=EUC-JP the content
 will be loaded using the EditorKit registered for
 text/html and the Reader provided to
 the EditorKit to load unicode into the document will
 use the EUC-JP charset for translating
 to unicode.  If the type is not recognized, the content
 will be loaded using the EditorKit registered
 for plain text, text/plain.

Parameters:
type - the non-null mime type for the content editing
   support
Throws:
NullPointerException - if the type parameter
          is null
See Also:
getContentType()


"
43,JEditorPane,2,void setText(String text),True,"Sets the text of this TextComponent to the specified content, which is expected to be in the format of the content type of this editor.","

setText
public void setText(String t)
Sets the text of this TextComponent to the specified
 content,
 which is expected to be in the format of the content type of
 this editor.  For example, if the type is set to text/html
 the string should be specified in terms of HTML.
 
 This is implemented to remove the contents of the current document,
 and replace them by parsing the given string using the current
 EditorKit.  This gives the semantics of the
 superclass by not changing
 out the model, while supporting the content type currently set on
 this component.  The assumption is that the previous content is
 relatively
 small, and that the previous content doesn't have side effects.
 Both of those assumptions can be violated and cause undesirable results.
 To avoid this, create a new document,
 getEditorKit().createDefaultDocument(), and replace the
 existing Document with the new one. You are then assured the
 previous Document won't have any lingering state.
 

 Leaving the existing model in place means that the old view will be
 torn down, and a new view created, where replacing the document would
 avoid the tear down of the old view.
 
 Some formats (such as HTML) can install things into the document that
 can influence future contents.  HTML can have style information embedded
 that would influence the next content installed unexpectedly.
 

 An alternative way to load this component with a string would be to
 create a StringReader and call the read method.  In this case the model
 would be replaced after it was initialized with the contents of the
 string.

Overrides:
setText in class JTextComponent
Parameters:
t - the new text to be set; if null the old
    text will be deleted
See Also:
getText()


"
43,JEditorPane,3,String getText(),True,Returns the text contained in this TextComponent in terms of the content type of this editor.,"

getText
public String getText()
Returns the text contained in this TextComponent
 in terms of the
 content type of this editor.  If an exception is thrown while
 attempting to retrieve the text, null will be returned.
 This is implemented to call JTextComponent.write with
 a StringWriter.

Overrides:
getText in class JTextComponent
Returns:
the text
See Also:
setText(java.lang.String)


"
43,JEditorPane,4,void addHyperlinkListener(HyperlinkListener l),True,"Adds a hyperlink listener for notification of any changes, for example when a link is selected and entered.","

addHyperlinkListener
public void addHyperlinkListener(HyperlinkListener listener)
Adds a hyperlink listener for notification of any changes, for example
 when a link is selected and entered.

Parameters:
listener - the listener


"
43,JEditorPane,5,void removeHyperlinkListener(HyperlinkListener l),True,Removes a hyperlink listener.,"

removeHyperlinkListener
public void removeHyperlinkListener(HyperlinkListener listener)
Removes a hyperlink listener.

Parameters:
listener - the listener


"
44,JFileChooser,1,int showOpenDialog(Frame owner),False,,NULL
44,JFileChooser,2,int showSaveDialog(Frame owner),False,,NULL
44,JFileChooser,3,void setDialogTitle(String title),True,Sets the string that goes in the JFileChooser window's title bar.,"

setDialogTitle
public void setDialogTitle(String dialogTitle)
Sets the string that goes in the JFileChooser window's
 title bar.

Parameters:
dialogTitle - the new String for the title bar
See Also:
getDialogTitle()


"
44,JFileChooser,4,void setDialogType(int dialogType),True,Sets the type of this dialog.,"

setDialogType
public void setDialogType(int dialogType)
Sets the type of this dialog. Use OPEN_DIALOG when you
 want to bring up a file chooser that the user can use to open a file.
 Likewise, use SAVE_DIALOG for letting the user choose
 a file for saving.
 Use CUSTOM_DIALOG when you want to use the file
 chooser in a context other than ""Open"" or ""Save"".
 For instance, you might want to bring up a file chooser that allows
 the user to choose a file to execute. Note that you normally would not
 need to set the JFileChooser to use
 CUSTOM_DIALOG
 since a call to setApproveButtonText does this for you.
 The default dialog type is JFileChooser.OPEN_DIALOG.

Parameters:
dialogType - the type of dialog to be displayed:
 
JFileChooser.OPEN_DIALOG
 JFileChooser.SAVE_DIALOG
 JFileChooser.CUSTOM_DIALOG
 
Throws:
IllegalArgumentException - if dialogType is
                          not legal
See Also:
getDialogType(), 
setApproveButtonText(java.lang.String)


"
44,JFileChooser,5,void setFileSelectionMode(int mode),True,"Sets the JFileChooser to allow the user to just select files, just select directories, or select both files and directories.","

setFileSelectionMode
public void setFileSelectionMode(int mode)
Sets the JFileChooser to allow the user to just
 select files, just select
 directories, or select both files and directories.  The default is
 JFilesChooser.FILES_ONLY.

Parameters:
mode - the type of files to be displayed:
 
JFileChooser.FILES_ONLY
 JFileChooser.DIRECTORIES_ONLY
 JFileChooser.FILES_AND_DIRECTORIES
 
Throws:
IllegalArgumentException - if mode is an
                          illegal file selection mode
See Also:
getFileSelectionMode()


"
45,JFormattedTextField,1,JFormattedTextField(NumberFormat format),False,,NULL
45,JFormattedTextField,2,void setValue(Object value),True,Sets the value that will be formatted by an AbstractFormatter obtained from the current AbstractFormatterFactory.,"

setValue
public void setValue(Object value)
Sets the value that will be formatted by an
 AbstractFormatter obtained from the current
 AbstractFormatterFactory. If no
 AbstractFormatterFactory has been specified, this will
 attempt to create one based on the type of value.
 
 The default value of this property is null.
 
 This is a JavaBeans bound property.

Parameters:
value - Current value to display


"
45,JFormattedTextField,3,Object getValue(),True,Returns the last valid value.,"

getValue
public Object getValue()
Returns the last valid value. Based on the editing policy of
 the AbstractFormatter this may not return the current
 value. The currently edited value can be obtained by invoking
 commitEdit followed by getValue.

Returns:
Last valid value


"
45,JFormattedTextField,4,void setFormatterFactory(FormatterFactory factory),False,,NULL
45,JFormattedTextField,5,FormatterFactory getFormatterFactory(),False,,NULL
46,JFormattedTextField.AbstractFormatter,1,abstract String valueToString(Object value),False,,NULL
46,JFormattedTextField.AbstractFormatter,2,abstract Object stringToValue(String text) throws ParseException,False,,NULL
46,JFormattedTextField.AbstractFormatter,3,abstract AbstractFormatter getClone(),False,,NULL
46,JFormattedTextField.AbstractFormatter,4,abstract AbstractFormatter getInstance(),False,,NULL
46,JFormattedTextField.AbstractFormatter,5,abstract AbstractFormatter getInstance(AbstractFormatter formatter),False,,NULL
47,JFormattedTextField.AbstractFormatterFactory,1,AbstractFormatterFactory(),False,,NULL
47,JFormattedTextField.AbstractFormatterFactory,2,AbstractFormatter getFormatter(JFormattedTextField tf),False,,NULL
47,JFormattedTextField.AbstractFormatterFactory,3,void install(JFormattedTextField tf),False,,NULL
47,JFormattedTextField.AbstractFormatterFactory,4,void uninstall(JFormattedTextField tf),False,,NULL
47,JFormattedTextField.AbstractFormatterFactory,5,void uninstallAll(),False,,NULL
48,JFrame,1,JFrame(),False,,NULL
48,JFrame,2,"setSize(int width, int height)",False,,NULL
48,JFrame,3,setVisible(boolean b),False,,NULL
48,JFrame,4,setDefaultCloseOperation(int operation),False,,NULL
48,JFrame,5,add(Component comp),False,,NULL
49,JInternalFrame,1,JInternalFrame(String title),False,,NULL
49,JInternalFrame,2,void setClosable(boolean b),True,Sets whether this JInternalFrame can be closed by some user action.,"

setClosable
public void setClosable(boolean b)
Sets whether this JInternalFrame can be closed by
 some user action.

Parameters:
b - a boolean value, where true means this internal frame can be closed


"
49,JInternalFrame,3,void setIconifiable(boolean b),True,"Sets the iconable property, which must be true for the user to be able to make the JInternalFrame an icon.","

setIconifiable
public void setIconifiable(boolean b)
Sets the iconable property,
 which must be true
 for the user to be able to
 make the JInternalFrame an icon.
 Some look and feels might not implement iconification;
 they will ignore this property.

Parameters:
b - a boolean, where true means this internal frame can be iconified


"
49,JInternalFrame,4,void setMaximizable(boolean b),True,"Sets the maximizable property, which determines whether the JInternalFrame can be maximized by some user action.","

setMaximizable
public void setMaximizable(boolean b)
Sets the maximizable property,
 which determines whether the JInternalFrame
 can be maximized by
 some user action.
 Some look and feels might not support maximizing internal frames;
 they will ignore this property.

Parameters:
b - true to specify that this internal frame should be maximizable; false to specify that it should not be


"
49,JInternalFrame,5,void setResizable(boolean b),True,Sets whether the JInternalFrame can be resized by some user action.,"

setResizable
public void setResizable(boolean b)
Sets whether the JInternalFrame can be resized by some
 user action.

Parameters:
b - a boolean, where true means this internal frame can be resized


"
49,JInternalFrame,6,void setTitle(String title),True,Sets the JInternalFrame title.,"

setTitle
public void setTitle(String title)
Sets the JInternalFrame title. title
 may have a null value.

Parameters:
title - the String to display in the title bar
See Also:
getTitle()


"
49,JInternalFrame,7,void setVisible(boolean b),False,,NULL
49,JInternalFrame,8,"void setBounds(int x, int y, int width, int height)",False,,NULL
49,JInternalFrame,9,void setDefaultCloseOperation(int operation),True,"Sets the operation that will happen by default when the user initiates a ""close"" on this internal frame.","

setDefaultCloseOperation
public void setDefaultCloseOperation(int operation)
Sets the operation that will happen by default when
 the user initiates a ""close"" on this internal frame.
 The possible choices are:
 

DO_NOTHING_ON_CLOSE
 Do nothing.
      This requires the program to handle the operation
      in the internalFrameClosing method
      of a registered InternalFrameListener object.
 HIDE_ON_CLOSE
 Automatically make the internal frame invisible.
 DISPOSE_ON_CLOSE
 Automatically dispose of the internal frame.
 

 The default value is DISPOSE_ON_CLOSE.
 Before performing the specified close operation,
 the internal frame fires
 an INTERNAL_FRAME_CLOSING event.

Parameters:
operation - one of the following constants defined in
                  javax.swing.WindowConstants
                  (an interface implemented by
                  JInternalFrame):
                  DO_NOTHING_ON_CLOSE,
                  HIDE_ON_CLOSE, or
                  DISPOSE_ON_CLOSE
See Also:
addInternalFrameListener(javax.swing.event.InternalFrameListener), 
getDefaultCloseOperation(), 
JComponent.setVisible(boolean), 
dispose(), 
InternalFrameEvent.INTERNAL_FRAME_CLOSING


"
49,JInternalFrame,10,void setContentPane(Container contentPane),True,Sets this JInternalFrame's contentPane property.,"

setContentPane
public void setContentPane(Container c)
Sets this JInternalFrame's contentPane
 property.

Specified by:
setContentPane in interface RootPaneContainer
Parameters:
c - the content pane for this internal frame
Throws:
IllegalComponentStateException - (a runtime
           exception) if the content pane parameter is null
See Also:
RootPaneContainer.getContentPane()


"
49,JInternalFrame,11,void setIconImage(Image img),False,,NULL
49,JInternalFrame,12,void setJMenuBar(JMenuBar mbar),True,Sets the menuBar property for this JInternalFrame.,"

setJMenuBar
public void setJMenuBar(JMenuBar m)
Sets the menuBar property for this JInternalFrame.

Parameters:
m - the JMenuBar to use in this internal frame
See Also:
getJMenuBar()


"
49,JInternalFrame,13,void setMenu(JMenu menu),False,,NULL
49,JInternalFrame,14,"void setSize(int width, int height)",False,,NULL
49,JInternalFrame,15,"void setLocation(int x, int y)",False,,NULL
49,JInternalFrame,16,void setLocationRelativeTo(Component c),False,,NULL
49,JInternalFrame,17,void setAlwaysOnTop(boolean b),False,,NULL
49,JInternalFrame,18,void setType(int type),False,,NULL
49,JInternalFrame,19,void setSelected(boolean b),True,Selects or deselects the internal frame if it's showing.,"

setSelected
public void setSelected(boolean selected)
                 throws PropertyVetoException
Selects or deselects the internal frame
 if it's showing.
 A JInternalFrame normally draws its title bar
 differently if it is
 the selected frame, which indicates to the user that this
 internal frame has the focus.
 When this method changes the state of the internal frame
 from deselected to selected, it fires an
 InternalFrameEvent.INTERNAL_FRAME_ACTIVATED event.
 If the change is from selected to deselected,
 an InternalFrameEvent.INTERNAL_FRAME_DEACTIVATED event
 is fired.

Parameters:
selected - a boolean, where true means this internal frame
                  should become selected (currently active)
                  and false means it should become deselected
Throws:
PropertyVetoException - when the attempt to set the
            property is vetoed by the JInternalFrame
See Also:
Component.isShowing(), 
InternalFrameEvent.INTERNAL_FRAME_ACTIVATED, 
InternalFrameEvent.INTERNAL_FRAME_DEACTIVATED


"
49,JInternalFrame,20,void setSelectedHierarchically(boolean b),False,,NULL
49,JInternalFrame,21,void setSelectedHierarchically(boolean b),False,,NULL
49,JInternalFrame,22,void setSelectedHierarchically(boolean b),False,,NULL
49,JInternalFrame,23,void setSelectedHierarchically(boolean b),False,,NULL
49,JInternalFrame,24,void setSelectedHierarchically(boolean b),False,,NULL
49,JInternalFrame,25,void setSelectedHierarchically(boolean b),False,,NULL
50,JInternalFrame.JDesktopIcon,1,boolean isIcon(),False,,NULL
50,JInternalFrame.JDesktopIcon,2,void setIcon(boolean b),False,,NULL
50,JInternalFrame.JDesktopIcon,3,"void setIcon(boolean b, boolean b1)",False,,NULL
50,JInternalFrame.JDesktopIcon,4,"void setIcon(boolean b, boolean b1, boolean b2)",False,,NULL
50,JInternalFrame.JDesktopIcon,5,"void setIcon(boolean b, boolean b1, boolean b2, boolean b3)",False,,NULL
51,JLabel,1,void setText(String text),True,Defines the single line of text this component will display.,"

setText
public void setText(String text)
Defines the single line of text this component will display.  If
 the value of text is null or empty string, nothing is displayed.
 
 The default value of this property is null.
 
 This is a JavaBeans bound property.

See Also:
setVerticalTextPosition(int), 
setHorizontalTextPosition(int), 
setIcon(javax.swing.Icon)


"
51,JLabel,2,void setIcon(Icon icon),True,Defines the icon this component will display.,"

setIcon
public void setIcon(Icon icon)
Defines the icon this component will display.  If
 the value of icon is null, nothing is displayed.
 
 The default value of this property is null.
 
 This is a JavaBeans bound property.

See Also:
setVerticalTextPosition(int), 
setHorizontalTextPosition(int), 
getIcon()


"
51,JLabel,3,void setHorizontalAlignment(int alignment),True,Sets the alignment of the label's contents along the X axis.,"

setHorizontalAlignment
public void setHorizontalAlignment(int alignment)
Sets the alignment of the label's contents along the X axis.
 
 This is a JavaBeans bound property.

Parameters:
alignment - One of the following constants
           defined in SwingConstants:
           LEFT,
           CENTER (the default for image-only labels),
           RIGHT,
           LEADING (the default for text-only labels) or
           TRAILING.
See Also:
SwingConstants, 
getHorizontalAlignment()


"
51,JLabel,4,void setVerticalAlignment(int alignment),True,Sets the alignment of the label's contents along the Y axis.,"

setVerticalAlignment
public void setVerticalAlignment(int alignment)
Sets the alignment of the label's contents along the Y axis.
 
 The default value of this property is CENTER.

Parameters:
alignment - One of the following constants
           defined in SwingConstants:
           TOP,
           CENTER (the default), or
           BOTTOM.
See Also:
SwingConstants, 
getVerticalAlignment()


"
51,JLabel,5,"void setBounds(int x, int y, int width, int height)",False,,NULL
52,JLayer,1,JLayer(Component component),False,,NULL
52,JLayer,2,void setView(LayerUI layerUI),False,,NULL
52,JLayer,3,LayerUI getLayerUI(),False,,NULL
52,JLayer,4,void setLayerEventMask(int mask),False,,NULL
52,JLayer,5,int getLayerEventMask(),False,,NULL
52,JLayer,6,"void setLayerProperty(Object key, Object value)",False,,NULL
52,JLayer,7,Object getLayerProperty(Object key),False,,NULL
52,JLayer,8,"void setLayerAttributes(Map<?,?> attributes)",False,,NULL
52,JLayer,9,"Map<?,?> getLayerAttributes()",False,,NULL
52,JLayer,10,void setLayerEventDispatcher(EventDispatcher dispatcher),False,,NULL
52,JLayer,11,EventDispatcher getLayerEventDispatcher(),False,,NULL
52,JLayer,12,void setLayerEventQueue(EventQueue eventQueue),False,,NULL
52,JLayer,13,EventQueue getLayerEventQueue(),False,,NULL
52,JLayer,14,void setLayerEventFilter(EventFilter filter),False,,NULL
52,JLayer,15,EventFilter getLayerEventFilter(),False,,NULL
52,JLayer,16,void setLayerEventMask(int mask),False,,NULL
52,JLayer,17,int getLayerEventMask(),False,,NULL
52,JLayer,18,void setLayerEventDispatcher(EventDispatcher dispatcher),False,,NULL
52,JLayer,19,EventDispatcher getLayerEventDispatcher(),False,,NULL
52,JLayer,20,void setLayerEventQueue(EventQueue eventQueue),False,,NULL
52,JLayer,21,EventQueue getLayerEventQueue(),False,,NULL
52,JLayer,22,void setLayerEventFilter(EventFilter filter),False,,NULL
52,JLayer,23,EventFilter getLayerEventFilter(),False,,NULL
52,JLayer,24,void setLayerEventMask(int mask),False,,NULL
52,JLayer,25,int getLayerEventMask(),False,,NULL
53,JLayeredPane,1,"void add(Component comp, Object constraints)",False,,NULL
53,JLayeredPane,2,"void add(Component comp, Object constraints, int index)",False,,NULL
53,JLayeredPane,3,"void add(Component comp, int x, int y)",False,,NULL
53,JLayeredPane,4,"void add(Component comp, int x, int y, int width, int height)",False,,NULL
53,JLayeredPane,5,void doLayout(),False,,NULL
54,JList,1,boolean add(E e),False,,NULL
54,JList,2,"void add(int index, E element)",False,,NULL
54,JList,3,boolean addAll(Collection<? extends E> c),False,,NULL
54,JList,4,"boolean addAll(int index, Collection<? extends E> c)",False,,NULL
54,JList,5,void clear(),False,,NULL
55,JList.DropLocation,1,int getIndex(),True,Returns the index where dropped data should be placed in the list.,"

getIndex
public int getIndex()
Returns the index where dropped data should be placed in the
 list. Interpretation of the value depends on the drop mode set on
 the associated component. If the drop mode is either
 DropMode.USE_SELECTION or DropMode.ON,
 the return value is an index of a row in the list. If the drop mode is
 DropMode.INSERT, the return value refers to the index
 where the data should be inserted. If the drop mode is
 DropMode.ON_OR_INSERT, the value of
 isInsert() indicates whether the index is an index
 of a row, or an insert index.
 
-1 indicates that the drop occurred over empty space,
 and no index could be calculated.

Returns:
the drop index


"
55,JList.DropLocation,2,int getDropLocation(),False,,NULL
55,JList.DropLocation,3,boolean isInsert(),True,Returns whether or not this location represents an insert location.,"

isInsert
public boolean isInsert()
Returns whether or not this location represents an insert
 location.

Returns:
whether or not this is an insert location


"
55,JList.DropLocation,4,boolean isBefore(),False,,NULL
55,JList.DropLocation,5,boolean isAfter(),False,,NULL
56,JMenu,1,JMenu(String label),False,,NULL
56,JMenu,2,void add(JMenuItem item),False,,NULL
56,JMenu,3,void add(JMenu submenu),False,,NULL
56,JMenu,4,void setMnemonic(int mnemonic),False,,NULL
56,JMenu,5,void setEnabled(boolean b),False,,NULL
57,JMenuBar,1,JMenuBar(),False,,NULL
57,JMenuBar,2,void add(JMenu c),False,,NULL
57,JMenuBar,3,void remove(JMenu c),False,,NULL
57,JMenuBar,4,JMenu[] getMenus(),False,,NULL
57,JMenuBar,5,JMenu getMenu(int index),True,Returns the menu at the specified position in the menu bar.,"

getMenu
public JMenu getMenu(int index)
Returns the menu at the specified position in the menu bar.

Parameters:
index - an integer giving the position in the menu bar, where
               0 is the first position
Returns:
the JMenu at that position, or null if
          if there is no JMenu at that position (ie. if
          it is a JMenuItem)


"
58,JMenuItem,1,boolean add(E e),False,,NULL
58,JMenuItem,2,void addActionListener(ActionListener l),False,,NULL
58,JMenuItem,3,void addItemListener(ItemListener l),False,,NULL
58,JMenuItem,4,void setEnabled(boolean b),True,Enables or disables the menu item.,"

setEnabled
public void setEnabled(boolean b)
Enables or disables the menu item.

Overrides:
setEnabled in class AbstractButton
Parameters:
b - true to enable the item
See Also:
Component.isEnabled(), 
Component.isLightweight()


"
58,JMenuItem,5,void setSelected(boolean b),False,,NULL
59,JOptionPane,1,showInputDialog(Object message),False,,NULL
59,JOptionPane,2,showMessageDialog(Object message),False,,NULL
59,JOptionPane,3,showConfirmDialog(Object message),False,,NULL
59,JOptionPane,4,showOptionDialog(Object message),False,,NULL
59,JOptionPane,5,showInternalFrameDialog(Object message),False,,NULL
60,JPanel,1,JPanel(),False,,NULL
60,JPanel,2,void add(Component comp),False,,NULL
60,JPanel,3,void remove(Component comp),False,,NULL
60,JPanel,4,void setLayout(LayoutManager mgr),False,,NULL
60,JPanel,5,void setBackground(Color bg),False,,NULL
61,JPasswordField,1,JPasswordField(),False,,NULL
61,JPasswordField,2,void setEchoChar(char c),True,Sets the echo character for this JPasswordField.,"

setEchoChar
public void setEchoChar(char c)
Sets the echo character for this JPasswordField.
 Note that this is largely a suggestion, since the
 view that gets installed can use whatever graphic techniques
 it desires to represent the field.  Setting a value of 0 indicates
 that you wish to see the text as it is typed, similar to
 the behavior of a standard JTextField.

Parameters:
c - the echo character to display
See Also:
echoCharIsSet(), 
getEchoChar()


"
61,JPasswordField,3,char getEchoChar(),True,Returns the character to be used for echoing.,"

getEchoChar
public char getEchoChar()
Returns the character to be used for echoing.  The default is '*'.
 The default may be different depending on the currently running Look
 and Feel. For example, Metal/Ocean's default is a bullet character.

Returns:
the echo character, 0 if unset
See Also:
setEchoChar(char), 
echoCharIsSet()


"
61,JPasswordField,4,void setEchoOn(boolean b),False,,NULL
61,JPasswordField,5,boolean isEchoOn(),False,,NULL
62,JPopupMenu,1,JPopupMenu(),False,,NULL
62,JPopupMenu,2,void add(JMenuItem item),False,,NULL
62,JPopupMenu,3,void add(JMenu subMenu),False,,NULL
62,JPopupMenu,4,void addSeparator(),True,Appends a new separator at the end of the menu.,"

addSeparator
public void addSeparator()
Appends a new separator at the end of the menu.

"
62,JPopupMenu,5,void setInvoker(Component invoker),True,Sets the invoker of this popup menu -- the component in which the popup menu menu is to be displayed.,"

setInvoker
public void setInvoker(Component invoker)
Sets the invoker of this popup menu -- the component in which
 the popup menu menu is to be displayed.

Parameters:
invoker - the Component in which the popup
          menu is displayed


"
63,JPopupMenu.Separator,1,boolean add(E e),False,,NULL
63,JPopupMenu.Separator,2,void addSeparator(),False,,NULL
63,JPopupMenu.Separator,3,void add(Component c),False,,NULL
63,JPopupMenu.Separator,4,void add(Action a),False,,NULL
63,JPopupMenu.Separator,5,void add(String label),False,,NULL
64,JProgressBar,1,int getMaximum(),True,Returns the progress bar's maximum value from the BoundedRangeModel.,"

getMaximum
public int getMaximum()
Returns the progress bar's maximum value
 from the BoundedRangeModel.

Returns:
the progress bar's maximum value
See Also:
setMaximum(int), 
BoundedRangeModel.getMaximum()


"
64,JProgressBar,2,int getMinimum(),True,Returns the progress bar's minimum value from the BoundedRangeModel.,"

getMinimum
public int getMinimum()
Returns the progress bar's minimum value
 from the BoundedRangeModel.

Returns:
the progress bar's minimum value
See Also:
setMinimum(int), 
BoundedRangeModel.getMinimum()


"
64,JProgressBar,3,int getValue(),True,Returns the progress bar's current value from the BoundedRangeModel.,"

getValue
public int getValue()
Returns the progress bar's current value
 from the BoundedRangeModel.
 The value is always between the
 minimum and maximum values, inclusive.

Returns:
the current value of the progress bar
See Also:
setValue(int), 
BoundedRangeModel.getValue()


"
64,JProgressBar,4,void setMaximum(int newMax),True,Sets the progress bar's maximum value (stored in the progress bar's data model) to n.,"

setMaximum
public void setMaximum(int n)
Sets the progress bar's maximum value
 (stored in the progress bar's data model) to n.
 
 The underlying BoundedRangeModel handles any mathematical
 issues arising from assigning faulty values.
 See the BoundedRangeModel documentation for details.
 
 If the maximum value is different from the previous maximum,
 all change listeners are notified.

Parameters:
n - the new maximum
See Also:
getMaximum(), 
addChangeListener(javax.swing.event.ChangeListener), 
BoundedRangeModel.setMaximum(int)


"
64,JProgressBar,5,void setMinimum(int newMin),True,Sets the progress bar's minimum value (stored in the progress bar's data model) to n.,"

setMinimum
public void setMinimum(int n)
Sets the progress bar's minimum value
 (stored in the progress bar's data model) to n.
 
 The data model (a BoundedRangeModel instance)
 handles any mathematical
 issues arising from assigning faulty values.
 See the BoundedRangeModel documentation for details.
 
 If the minimum value is different from the previous minimum,
 all change listeners are notified.

Parameters:
n - the new minimum
See Also:
getMinimum(), 
addChangeListener(javax.swing.event.ChangeListener), 
BoundedRangeModel.setMinimum(int)


"
64,JProgressBar,6,void setValue(int newValue),True,Sets the progress bar's current value to n.,"

setValue
public void setValue(int n)
Sets the progress bar's current value to n.  This method
 forwards the new value to the model.
 
 The data model (an instance of BoundedRangeModel)
 handles any mathematical
 issues arising from assigning faulty values.  See the
 BoundedRangeModel documentation for details.
 
 If the new value is different from the previous value,
 all change listeners are notified.

Parameters:
n - the new value
See Also:
getValue(), 
addChangeListener(javax.swing.event.ChangeListener), 
BoundedRangeModel.setValue(int)


"
64,JProgressBar,7,void setString(String newString),True,Sets the value of the progress string.,"

setString
public void setString(String s)
Sets the value of the progress string. By default,
 this string is null, implying the built-in behavior of
 using a simple percent string.
 If you have provided a custom progress string and want to revert to
 the built-in behavior, set the string back to null.
 
 The progress string is painted only if
 the isStringPainted method returns true.

Parameters:
s - the value of the progress string
See Also:
getString(), 
setStringPainted(boolean), 
isStringPainted()


"
64,JProgressBar,8,String getString(),True,Returns a String representation of the current progress.,"

getString
public String getString()
Returns a String representation of the current progress.
 By default, this returns a simple percentage String based on
 the value returned from getPercentComplete.  An example
 would be the ""42%"".  You can change this by calling setString.

Returns:
the value of the progress string, or a simple percentage string
         if the progress string is null
See Also:
setString(java.lang.String)


"
64,JProgressBar,9,void setStringPainted(boolean b),True,"Sets the value of the stringPainted property, which determines whether the progress bar should render a progress string.","

setStringPainted
public void setStringPainted(boolean b)
Sets the value of the stringPainted property,
 which determines whether the progress bar
 should render a progress string.
 The default is false, meaning
 no string is painted.
 Some look and feels might not support progress strings
 or might support them only when the progress bar is in determinate mode.

Parameters:
b - true if the progress bar should render a string
See Also:
isStringPainted(), 
setString(java.lang.String)


"
64,JProgressBar,10,boolean isStringPainted(),True,Returns the value of the stringPainted property.,"

isStringPainted
public boolean isStringPainted()
Returns the value of the stringPainted property.

Returns:
the value of the stringPainted property
See Also:
setStringPainted(boolean), 
setString(java.lang.String)


"
65,JRadioButton,1,JRadioButton(),False,,NULL
65,JRadioButton,2,void setSelected(boolean b),False,,NULL
65,JRadioButton,3,boolean isSelected(),False,,NULL
65,JRadioButton,4,void setActionCommand(String actionCommand),False,,NULL
65,JRadioButton,5,String getActionCommand(),False,,NULL
66,JRadioButtonMenuItem,1,boolean isSelected(),False,,NULL
66,JRadioButtonMenuItem,2,void setSelected(boolean b),False,,NULL
66,JRadioButtonMenuItem,3,void setActionCommand(String actionCommand),False,,NULL
66,JRadioButtonMenuItem,4,String getActionCommand(),False,,NULL
66,JRadioButtonMenuItem,5,void setEnabled(boolean b),False,,NULL
67,JRootPane,1,JRootPane(),False,,NULL
67,JRootPane,2,void setContentPane(Component contentPane),False,,NULL
67,JRootPane,3,void setOpaque(boolean isOpaque),False,,NULL
67,JRootPane,4,void setWindowDecorationStyle(int style),True,"Sets the type of Window decorations (such as borders, widgets for closing a Window, title ...) the JRootPane should provide.","

setWindowDecorationStyle
public void setWindowDecorationStyle(int windowDecorationStyle)
Sets the type of Window decorations (such as borders, widgets for
 closing a Window, title ...) the JRootPane should
 provide. The default is to provide no Window decorations
 (NONE).
 
 This is only a hint, and some look and feels may not support
 this.
 This is a bound property.

Parameters:
windowDecorationStyle - Constant identifying Window decorations
        to provide.
Throws:
IllegalArgumentException - if style is
        not one of: NONE, FRAME,
        PLAIN_DIALOG, INFORMATION_DIALOG,
        ERROR_DIALOG, COLOR_CHOOSER_DIALOG,
        FILE_CHOOSER_DIALOG, QUESTION_DIALOG, or
        WARNING_DIALOG.
Since:
1.4
See Also:
JDialog.setDefaultLookAndFeelDecorated(boolean), 
JFrame.setDefaultLookAndFeelDecorated(boolean), 
LookAndFeel.getSupportsWindowDecorations()


"
67,JRootPane,5,void setTabbedPane(JTabbedPane tabbedPane),False,,NULL
68,JScrollBar,1,int getValue(),True,Returns the scrollbar's value.,"

getValue
public int getValue()
Returns the scrollbar's value.

Specified by:
getValue in interface Adjustable
Returns:
the model's value property
See Also:
setValue(int)


"
68,JScrollBar,2,void setValue(int value),True,Sets the scrollbar's value.,"

setValue
public void setValue(int value)
Sets the scrollbar's value.  This method just forwards the value
 to the model.

Specified by:
setValue in interface Adjustable
Parameters:
value - the current value, between minimum
    and maximum - visibleAmount
See Also:
getValue(), 
BoundedRangeModel.setValue(int)


"
68,JScrollBar,3,int getMinimum(),True,Returns the minimum value supported by the scrollbar (usually zero).,"

getMinimum
public int getMinimum()
Returns the minimum value supported by the scrollbar
 (usually zero).

Specified by:
getMinimum in interface Adjustable
Returns:
the value of the model's minimum property
See Also:
setMinimum(int)


"
68,JScrollBar,4,int getMaximum(),True,The maximum value of the scrollbar is maximum - extent.,"

getMaximum
public int getMaximum()
The maximum value of the scrollbar is maximum - extent.

Specified by:
getMaximum in interface Adjustable
Returns:
the value of the model's maximum property
See Also:
setMaximum(int)


"
68,JScrollBar,5,int getUnitIncrement(),True,For backwards compatibility with java.awt.Scrollbar.,"

getUnitIncrement
public int getUnitIncrement()
For backwards compatibility with java.awt.Scrollbar.

Specified by:
getUnitIncrement in interface Adjustable
Returns:
the unit value increment for the adjustable object
See Also:
Adjustable.getUnitIncrement(), 
getUnitIncrement(int)


"
69,JScrollPane,1,JScrollPane(),False,,NULL
69,JScrollPane,2,void setViewportView(Component view),True,Creates a viewport if necessary and then sets its view.,"

setViewportView
public void setViewportView(Component view)
Creates a viewport if necessary and then sets its view.  Applications
 that don't provide the view directly to the JScrollPane
 constructor
 should use this method to specify the scrollable child that's going
 to be displayed in the scrollpane. For example:
 
 JScrollPane scrollpane = new JScrollPane();
 scrollpane.setViewportView(myBigComponentToScroll);
 
 Applications should not add children directly to the scrollpane.

Parameters:
view - the component to add to the viewport
See Also:
setViewport(javax.swing.JViewport), 
JViewport.setView(java.awt.Component)


"
69,JScrollPane,3,void setHorizontalScrollBarPolicy(int policy),True,Determines when the horizontal scrollbar appears in the scrollpane.,"

setHorizontalScrollBarPolicy
public void setHorizontalScrollBarPolicy(int policy)
Determines when the horizontal scrollbar appears in the scrollpane.
 The options are:
ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED
ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER
ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS


Parameters:
policy - one of the three values listed above
Throws:
IllegalArgumentException - if policy
                          is not one of the legal values shown above
See Also:
getHorizontalScrollBarPolicy()


"
69,JScrollPane,4,void setVerticalScrollBarPolicy(int policy),True,Determines when the vertical scrollbar appears in the scrollpane.,"

setVerticalScrollBarPolicy
public void setVerticalScrollBarPolicy(int policy)
Determines when the vertical scrollbar appears in the scrollpane.
 Legal values are:
 
ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED
ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER
ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS


Parameters:
policy - one of the three values listed above
Throws:
IllegalArgumentException - if policy
                          is not one of the legal values shown above
See Also:
getVerticalScrollBarPolicy()


"
69,JScrollPane,5,void getViewport().setViewPosition(Point p),False,,NULL
70,JSeparator,1,JSeparator(),False,,NULL
70,JSeparator,2,void setOrientation(int orientation),True,Sets the orientation of the separator.,"

setOrientation
public void setOrientation(int orientation)
Sets the orientation of the separator.
 The default value of this property is HORIZONTAL.

Parameters:
orientation - either SwingConstants.HORIZONTAL
                  or SwingConstants.VERTICAL
Throws:
IllegalArgumentException - if orientation
          is neither SwingConstants.HORIZONTAL
          nor SwingConstants.VERTICAL
See Also:
SwingConstants, 
getOrientation()


"
70,JSeparator,3,int getOrientation(),True,Returns the orientation of this separator.,"

getOrientation
public int getOrientation()
Returns the orientation of this separator.

Returns:
The value of the orientation property, one of the
           following constants defined in SwingConstants:
           VERTICAL, or
           HORIZONTAL.
See Also:
SwingConstants, 
setOrientation(int)


"
70,JSeparator,4,void setForeground(Color c),False,,NULL
70,JSeparator,5,Color getForeground(),False,,NULL
71,JSlider,1,int getMajorTickSpacing(),True,This method returns the major tick spacing.,"

getMajorTickSpacing
public int getMajorTickSpacing()
This method returns the major tick spacing.  The number that is returned
 represents the distance, measured in values, between each major tick mark.
 If you have a slider with a range from 0 to 50 and the major tick spacing
 is set to 10, you will get major ticks next to the following values:
 0, 10, 20, 30, 40, 50.

Returns:
the number of values between major ticks
See Also:
setMajorTickSpacing(int)


"
71,JSlider,2,int getMinorTickSpacing(),True,This method returns the minor tick spacing.,"

getMinorTickSpacing
public int getMinorTickSpacing()
This method returns the minor tick spacing.  The number that is returned
 represents the distance, measured in values, between each minor tick mark.
 If you have a slider with a range from 0 to 50 and the minor tick spacing
 is set to 10, you will get minor ticks next to the following values:
 0, 10, 20, 30, 40, 50.

Returns:
the number of values between minor ticks
See Also:
getMinorTickSpacing()


"
71,JSlider,3,int getPaintTicks(),False,,NULL
71,JSlider,4,int getPaintLabels(),False,,NULL
71,JSlider,5,int getOrientation(),True,Return this slider's vertical or horizontal orientation.,"

getOrientation
public int getOrientation()
Return this slider's vertical or horizontal orientation.

Returns:
SwingConstants.VERTICAL or
  SwingConstants.HORIZONTAL
See Also:
setOrientation(int)


"
71,JSlider,6,int getValue(),True,Returns the slider's current value from the BoundedRangeModel.,"

getValue
public int getValue()
Returns the slider's current value
 from the BoundedRangeModel.

Returns:
the current value of the slider
See Also:
setValue(int), 
BoundedRangeModel.getValue()


"
71,JSlider,7,int getMinimum(),True,Returns the minimum value supported by the slider from the BoundedRangeModel.,"

getMinimum
public int getMinimum()
Returns the minimum value supported by the slider
 from the BoundedRangeModel.

Returns:
the value of the model's minimum property
See Also:
setMinimum(int), 
BoundedRangeModel.getMinimum()


"
71,JSlider,8,int getMaximum(),True,Returns the maximum value supported by the slider from the BoundedRangeModel.,"

getMaximum
public int getMaximum()
Returns the maximum value supported by the slider
 from the BoundedRangeModel.

Returns:
the value of the model's maximum property
See Also:
setMaximum(int), 
BoundedRangeModel.getMaximum()


"
71,JSlider,9,int getMajorTickSpacing(),True,This method returns the major tick spacing.,"

getMajorTickSpacing
public int getMajorTickSpacing()
This method returns the major tick spacing.  The number that is returned
 represents the distance, measured in values, between each major tick mark.
 If you have a slider with a range from 0 to 50 and the major tick spacing
 is set to 10, you will get major ticks next to the following values:
 0, 10, 20, 30, 40, 50.

Returns:
the number of values between major ticks
See Also:
setMajorTickSpacing(int)


"
71,JSlider,10,int getMinorTickSpacing(),True,This method returns the minor tick spacing.,"

getMinorTickSpacing
public int getMinorTickSpacing()
This method returns the minor tick spacing.  The number that is returned
 represents the distance, measured in values, between each minor tick mark.
 If you have a slider with a range from 0 to 50 and the minor tick spacing
 is set to 10, you will get minor ticks next to the following values:
 0, 10, 20, 30, 40, 50.

Returns:
the number of values between minor ticks
See Also:
getMinorTickSpacing()


"
71,JSlider,11,int getPaintTicks(),False,,NULL
71,JSlider,12,int getPaintLabels(),False,,NULL
71,JSlider,13,int getOrientation(),True,Return this slider's vertical or horizontal orientation.,"

getOrientation
public int getOrientation()
Return this slider's vertical or horizontal orientation.

Returns:
SwingConstants.VERTICAL or
  SwingConstants.HORIZONTAL
See Also:
setOrientation(int)


"
71,JSlider,14,int getValue(),True,Returns the slider's current value from the BoundedRangeModel.,"

getValue
public int getValue()
Returns the slider's current value
 from the BoundedRangeModel.

Returns:
the current value of the slider
See Also:
setValue(int), 
BoundedRangeModel.getValue()


"
71,JSlider,15,int getMinimum(),True,Returns the minimum value supported by the slider from the BoundedRangeModel.,"

getMinimum
public int getMinimum()
Returns the minimum value supported by the slider
 from the BoundedRangeModel.

Returns:
the value of the model's minimum property
See Also:
setMinimum(int), 
BoundedRangeModel.getMinimum()


"
71,JSlider,16,int getMaximum(),True,Returns the maximum value supported by the slider from the BoundedRangeModel.,"

getMaximum
public int getMaximum()
Returns the maximum value supported by the slider
 from the BoundedRangeModel.

Returns:
the value of the model's maximum property
See Also:
setMaximum(int), 
BoundedRangeModel.getMaximum()


"
71,JSlider,17,int getMajorTickSpacing(),True,This method returns the major tick spacing.,"

getMajorTickSpacing
public int getMajorTickSpacing()
This method returns the major tick spacing.  The number that is returned
 represents the distance, measured in values, between each major tick mark.
 If you have a slider with a range from 0 to 50 and the major tick spacing
 is set to 10, you will get major ticks next to the following values:
 0, 10, 20, 30, 40, 50.

Returns:
the number of values between major ticks
See Also:
setMajorTickSpacing(int)


"
71,JSlider,18,int getMinorTickSpacing(),True,This method returns the minor tick spacing.,"

getMinorTickSpacing
public int getMinorTickSpacing()
This method returns the minor tick spacing.  The number that is returned
 represents the distance, measured in values, between each minor tick mark.
 If you have a slider with a range from 0 to 50 and the minor tick spacing
 is set to 10, you will get minor ticks next to the following values:
 0, 10, 20, 30, 40, 50.

Returns:
the number of values between minor ticks
See Also:
getMinorTickSpacing()


"
71,JSlider,19,int getPaintTicks(),False,,NULL
71,JSlider,20,int getPaintLabels(),False,,NULL
71,JSlider,21,int getOrientation(),True,Return this slider's vertical or horizontal orientation.,"

getOrientation
public int getOrientation()
Return this slider's vertical or horizontal orientation.

Returns:
SwingConstants.VERTICAL or
  SwingConstants.HORIZONTAL
See Also:
setOrientation(int)


"
71,JSlider,22,int getValue(),True,Returns the slider's current value from the BoundedRangeModel.,"

getValue
public int getValue()
Returns the slider's current value
 from the BoundedRangeModel.

Returns:
the current value of the slider
See Also:
setValue(int), 
BoundedRangeModel.getValue()


"
71,JSlider,23,int getMinimum(),True,Returns the minimum value supported by the slider from the BoundedRangeModel.,"

getMinimum
public int getMinimum()
Returns the minimum value supported by the slider
 from the BoundedRangeModel.

Returns:
the value of the model's minimum property
See Also:
setMinimum(int), 
BoundedRangeModel.getMinimum()


"
71,JSlider,24,int getMaximum(),True,Returns the maximum value supported by the slider from the BoundedRangeModel.,"

getMaximum
public int getMaximum()
Returns the maximum value supported by the slider
 from the BoundedRangeModel.

Returns:
the value of the model's maximum property
See Also:
setMaximum(int), 
BoundedRangeModel.getMaximum()


"
71,JSlider,25,int getMajorTickSpacing(),True,This method returns the major tick spacing.,"

getMajorTickSpacing
public int getMajorTickSpacing()
This method returns the major tick spacing.  The number that is returned
 represents the distance, measured in values, between each major tick mark.
 If you have a slider with a range from 0 to 50 and the major tick spacing
 is set to 10, you will get major ticks next to the following values:
 0, 10, 20, 30, 40, 50.

Returns:
the number of values between major ticks
See Also:
setMajorTickSpacing(int)


"
71,JSlider,26,int getMinorTickSpacing(),True,This method returns the minor tick spacing.,"

getMinorTickSpacing
public int getMinorTickSpacing()
This method returns the minor tick spacing.  The number that is returned
 represents the distance, measured in values, between each minor tick mark.
 If you have a slider with a range from 0 to 50 and the minor tick spacing
 is set to 10, you will get minor ticks next to the following values:
 0, 10, 20, 30, 40, 50.

Returns:
the number of values between minor ticks
See Also:
getMinorTickSpacing()


"
71,JSlider,27,int getPaintTicks(),False,,NULL
71,JSlider,28,int getPaintLabels(),False,,NULL
71,JSlider,29,int getOrientation(),True,Return this slider's vertical or horizontal orientation.,"

getOrientation
public int getOrientation()
Return this slider's vertical or horizontal orientation.

Returns:
SwingConstants.VERTICAL or
  SwingConstants.HORIZONTAL
See Also:
setOrientation(int)


"
71,JSlider,30,int getValue(),True,Returns the slider's current value from the BoundedRangeModel.,"

getValue
public int getValue()
Returns the slider's current value
 from the BoundedRangeModel.

Returns:
the current value of the slider
See Also:
setValue(int), 
BoundedRangeModel.getValue()


"
71,JSlider,31,int getMinimum(),True,Returns the minimum value supported by the slider from the BoundedRangeModel.,"

getMinimum
public int getMinimum()
Returns the minimum value supported by the slider
 from the BoundedRangeModel.

Returns:
the value of the model's minimum property
See Also:
setMinimum(int), 
BoundedRangeModel.getMinimum()


"
71,JSlider,32,int getMaximum(),True,Returns the maximum value supported by the slider from the BoundedRangeModel.,"

getMaximum
public int getMaximum()
Returns the maximum value supported by the slider
 from the BoundedRangeModel.

Returns:
the value of the model's maximum property
See Also:
setMaximum(int), 
BoundedRangeModel.getMaximum()


"
71,JSlider,33,int getMajorTickSpacing(),True,This method returns the major tick spacing.,"

getMajorTickSpacing
public int getMajorTickSpacing()
This method returns the major tick spacing.  The number that is returned
 represents the distance, measured in values, between each major tick mark.
 If you have a slider with a range from 0 to 50 and the major tick spacing
 is set to 10, you will get major ticks next to the following values:
 0, 10, 20, 30, 40, 50.

Returns:
the number of values between major ticks
See Also:
setMajorTickSpacing(int)


"
71,JSlider,34,int getMinorTickSpacing(),True,This method returns the minor tick spacing.,"

getMinorTickSpacing
public int getMinorTickSpacing()
This method returns the minor tick spacing.  The number that is returned
 represents the distance, measured in values, between each minor tick mark.
 If you have a slider with a range from 0 to 50 and the minor tick spacing
 is set to 10, you will get minor ticks next to the following values:
 0, 10, 20, 30, 40, 50.

Returns:
the number of values between minor ticks
See Also:
getMinorTickSpacing()


"
71,JSlider,35,int getPaintTicks(),False,,NULL
71,JSlider,36,int getPaintLabels(),False,,NULL
71,JSlider,37,int getOrientation(),True,Return this slider's vertical or horizontal orientation.,"

getOrientation
public int getOrientation()
Return this slider's vertical or horizontal orientation.

Returns:
SwingConstants.VERTICAL or
  SwingConstants.HORIZONTAL
See Also:
setOrientation(int)


"
71,JSlider,38,int getValue(),True,Returns the slider's current value from the BoundedRangeModel.,"

getValue
public int getValue()
Returns the slider's current value
 from the BoundedRangeModel.

Returns:
the current value of the slider
See Also:
setValue(int), 
BoundedRangeModel.getValue()


"
71,JSlider,39,int getMinimum(),True,Returns the minimum value supported by the slider from the BoundedRangeModel.,"

getMinimum
public int getMinimum()
Returns the minimum value supported by the slider
 from the BoundedRangeModel.

Returns:
the value of the model's minimum property
See Also:
setMinimum(int), 
BoundedRangeModel.getMinimum()


"
71,JSlider,40,int getMaximum(),True,Returns the maximum value supported by the slider from the BoundedRangeModel.,"

getMaximum
public int getMaximum()
Returns the maximum value supported by the slider
 from the BoundedRangeModel.

Returns:
the value of the model's maximum property
See Also:
setMaximum(int), 
BoundedRangeModel.getMaximum()


"
72,JSpinner,1,SpinnerModel getModel(),True,Returns the SpinnerModel that defines this spinners sequence of values.,"

getModel
public SpinnerModel getModel()
Returns the SpinnerModel that defines
 this spinners sequence of values.

Returns:
the value of the model property
See Also:
setModel(javax.swing.SpinnerModel)


"
72,JSpinner,2,void setModel(SpinnerModel model),True,Changes the model that represents the value of this spinner.,"

setModel
public void setModel(SpinnerModel model)
Changes the model that represents the value of this spinner.
 If the editor property has not been explicitly set,
 the editor property is (implicitly) set after the ""model""
PropertyChangeEvent has been fired.  The editor
 property is set to the value returned by createEditor,
 as in:
 
 setEditor(createEditor(model));
 

Parameters:
model - the new SpinnerModel
Throws:
IllegalArgumentException - if model is null
See Also:
getModel(), 
getEditor(), 
setEditor(javax.swing.JComponent)


"
72,JSpinner,3,void setEditor(JComponent editor),True,Changes the JComponent that displays the current value of the SpinnerModel.,"

setEditor
public void setEditor(JComponent editor)
Changes the JComponent that displays the current value
 of the SpinnerModel.  It is the responsibility of this
 method to disconnect the old editor from the model and to
 connect the new editor.  This may mean removing the
 old editors ChangeListener from the model or the
 spinner itself and adding one for the new editor.

Parameters:
editor - the new editor
Throws:
IllegalArgumentException - if editor is null
See Also:
getEditor(), 
createEditor(javax.swing.SpinnerModel), 
getModel()


"
72,JSpinner,4,JComponent getEditor(),True,Returns the component that displays and potentially changes the model's value.,"

getEditor
public JComponent getEditor()
Returns the component that displays and potentially
 changes the model's value.

Returns:
the component that displays and potentially
    changes the model's value
See Also:
setEditor(javax.swing.JComponent), 
createEditor(javax.swing.SpinnerModel)


"
72,JSpinner,5,void setValue(Object value),True,"Changes current value of the model, typically this value is displayed by the editor.","

setValue
public void setValue(Object value)
Changes current value of the model, typically
 this value is displayed by the editor.
 If the SpinnerModel implementation
 doesn't support the specified value then an
 IllegalArgumentException is thrown.
 
 This method simply delegates to the model.
 It is equivalent to:
 
 getModel().setValue(value)
 

Throws:
IllegalArgumentException - if value isn't allowed
See Also:
getValue(), 
SpinnerModel.setValue(java.lang.Object)


"
73,JSpinner.DateEditor,1,boolean isEditable(),False,,NULL
73,JSpinner.DateEditor,2,void setText(String text),False,,NULL
73,JSpinner.DateEditor,3,String getText(),False,,NULL
73,JSpinner.DateEditor,4,void selectAll(),False,,NULL
73,JSpinner.DateEditor,5,void focusGained(FocusEvent e),False,,NULL
74,JSpinner.DefaultEditor,1,SpinnerDateModel(),False,,NULL
74,JSpinner.DefaultEditor,2,SpinnerListModel(List list),False,,NULL
74,JSpinner.DefaultEditor,3,SpinnerModel(),False,,NULL
74,JSpinner.DefaultEditor,4,SpinnerNumberModel(),False,,NULL
74,JSpinner.DefaultEditor,5,SpinnerModel(),False,,NULL
75,JSpinner.ListEditor,1,boolean add(E e),False,,NULL
75,JSpinner.ListEditor,2,void addListDataListener(ListDataListener l),False,,NULL
75,JSpinner.ListEditor,3,void clearSelection(),False,,NULL
75,JSpinner.ListEditor,4,void removeListDataListener(ListDataListener l),False,,NULL
75,JSpinner.ListEditor,5,"void setSelectedValue(Object value, boolean updateModel)",False,,NULL
76,JSpinner.NumberEditor,1,boolean isEditable(),False,,NULL
76,JSpinner.NumberEditor,2,void setValue(Object value),False,,NULL
76,JSpinner.NumberEditor,3,Object getValue(),False,,NULL
76,JSpinner.NumberEditor,4,void setFormats(String[] formats),False,,NULL
76,JSpinner.NumberEditor,5,String[] getFormats(),False,,NULL
77,JSplitPane,1,JSplitPane(),False,,NULL
77,JSplitPane,2,void setDividerLocation(double location),True,Sets the divider location as a percentage of the JSplitPane's size.,"

setDividerLocation
public void setDividerLocation(double proportionalLocation)
Sets the divider location as a percentage of the
 JSplitPane's size.
 
 This method is implemented in terms of
 setDividerLocation(int).
 This method immediately changes the size of the split pane based on
 its current size. If the split pane is not correctly realized and on
 screen, this method will have no effect (new divider location will
 become (current size * proportionalLocation) which is 0).

Parameters:
proportionalLocation - a double-precision floating point value
        that specifies a percentage, from zero (top/left) to 1.0
        (bottom/right)
Throws:
IllegalArgumentException - if the specified location is < 0
            or > 1.0


"
77,JSplitPane,3,void setDividerSize(int size),True,Sets the size of the divider.,"

setDividerSize
public void setDividerSize(int newSize)
Sets the size of the divider.

Parameters:
newSize - an integer giving the size of the divider in pixels


"
77,JSplitPane,4,void setOneTouchExpandable(boolean expandable),True,"Sets the value of the oneTouchExpandable property, which must be true for the JSplitPane to provide a UI widget on the divider to quickly expand/collapse the divider.","

setOneTouchExpandable
public void setOneTouchExpandable(boolean newValue)
Sets the value of the oneTouchExpandable property,
 which must be true for the
 JSplitPane to provide a UI widget
 on the divider to quickly expand/collapse the divider.
 The default value of this property is false.
 Some look and feels might not support one-touch expanding;
 they will ignore this property.

Parameters:
newValue - true to specify that the split pane should provide a
        collapse/expand widget
See Also:
isOneTouchExpandable()


"
77,JSplitPane,5,void setOrientation(int orientation),True,"Sets the orientation, or how the splitter is divided.","

setOrientation
public void setOrientation(int orientation)
Sets the orientation, or how the splitter is divided. The options
 are:
JSplitPane.VERTICAL_SPLIT  (above/below orientation of components)
 JSplitPane.HORIZONTAL_SPLIT  (left/right orientation of components)
 

Parameters:
orientation - an integer specifying the orientation
Throws:
IllegalArgumentException - if orientation is not one of:
        HORIZONTAL_SPLIT or VERTICAL_SPLIT.


"
78,JTabbedPane,1,"int addTab(String title, Icon icon, Component component, String tip)",False,,NULL
78,JTabbedPane,2,"int addTab(String title, Icon icon, Component component)",False,,NULL
78,JTabbedPane,3,"int insertTab(String title, Icon icon, Component component, String tip, int index)",False,,NULL
78,JTabbedPane,4,"int insertTab(String title, Icon icon, Component component, int index)",False,,NULL
78,JTabbedPane,5,void remove(int index),True,Removes the tab and component which corresponds to the specified index.,"

remove
public void remove(int index)
Removes the tab and component which corresponds to the specified index.

Overrides:
remove in class Container
Parameters:
index - the index of the component to remove from the
          tabbedpane
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < 0 || index >= tab count)
See Also:
addTab(java.lang.String, javax.swing.Icon, java.awt.Component, java.lang.String), 
removeTabAt(int)


"
78,JTabbedPane,6,void removeAll(),True,Removes all the tabs and their corresponding components from the tabbedpane.,"

removeAll
public void removeAll()
Removes all the tabs and their corresponding components
 from the tabbedpane.

Overrides:
removeAll in class Container
See Also:
addTab(java.lang.String, javax.swing.Icon, java.awt.Component, java.lang.String), 
removeTabAt(int)


"
78,JTabbedPane,7,"void setEnabledAt(int index, boolean enabled)",True,Sets whether or not the tab at index is enabled.,"

setEnabledAt
public void setEnabledAt(int index,
                         boolean enabled)
Sets whether or not the tab at index is enabled.
 An internal exception is raised if there is no tab at that index.

Parameters:
index - the tab index which should be enabled/disabled
enabled - whether or not the tab should be enabled
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < 0 || index >= tab count)
See Also:
isEnabledAt(int)


"
78,JTabbedPane,8,"void setIconAt(int index, Icon icon)",True,Sets the icon at index to icon which can be null.,"

setIconAt
public void setIconAt(int index,
                      Icon icon)
Sets the icon at index to icon which can be
 null. This does not set disabled icon at icon.
 If the new Icon is different than the current Icon and disabled icon
 is not explicitly set, the LookAndFeel will be asked to generate a disabled
 Icon. To explicitly set disabled icon, use setDisableIconAt().
 The icon is not shown if a tab component for this tab was specified.
 An internal exception is raised if there is no tab at that index.

Parameters:
index - the tab index where the icon should be set
icon - the icon to be displayed in the tab
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < 0 || index >= tab count)
See Also:
setDisabledIconAt(int, javax.swing.Icon), 
getIconAt(int), 
getDisabledIconAt(int), 
setTabComponentAt(int, java.awt.Component)


"
78,JTabbedPane,9,void setSelectedIndex(int index),True,Sets the selected index for this tabbedpane.,"

setSelectedIndex
public void setSelectedIndex(int index)
Sets the selected index for this tabbedpane. The index must be
 a valid tab index or -1, which indicates that no tab should be selected
 (can also be used when there are no tabs in the tabbedpane).  If a -1
 value is specified when the tabbedpane contains one or more tabs, then
 the results will be implementation defined.

Parameters:
index - the index to be selected
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < -1 || index >= tab count)
See Also:
getSelectedIndex(), 
SingleSelectionModel.setSelectedIndex(int)


"
78,JTabbedPane,10,"void setTabComponentAt(int index, Component component)",True,Sets the component that is responsible for rendering the title for the specified tab.,"

setTabComponentAt
public void setTabComponentAt(int index,
                              Component component)
Sets the component that is responsible for rendering the
 title for the specified tab.  A null value means
 JTabbedPane will render the title and/or icon for
 the specified tab.  A non-null value means the component will
 render the title and JTabbedPane will not render
 the title and/or icon.
 
 Note: The component must not be one that the developer has
       already added to the tabbed pane.

Parameters:
index - the tab index where the component should be set
component - the component to render the title for the
                  specified tab
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < 0 || index >= tab count)
IllegalArgumentException - if component has already been
            added to this JTabbedPane
Since:
1.6
See Also:
getTabComponentAt(int)


"
78,JTabbedPane,11,void setTabPlacement(int placement),True,Sets the tab placement for this tabbedpane.,"

setTabPlacement
public void setTabPlacement(int tabPlacement)
Sets the tab placement for this tabbedpane.
 Possible values are:
JTabbedPane.TOP
JTabbedPane.BOTTOM
JTabbedPane.LEFT
JTabbedPane.RIGHT

 The default value, if not set, is SwingConstants.TOP.

Parameters:
tabPlacement - the placement for the tabs relative to the content
Throws:
IllegalArgumentException - if tab placement value isn't one
                          of the above valid values


"
78,JTabbedPane,12,"void setTitleAt(int index, String title)",True,Sets the title at index to title which can be null.,"

setTitleAt
public void setTitleAt(int index,
                       String title)
Sets the title at index to title which
 can be null.
 The title is not shown if a tab component for this tab was specified.
 An internal exception is raised if there is no tab at that index.

Parameters:
index - the tab index where the title should be set
title - the title to be displayed in the tab
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < 0 || index >= tab count)
See Also:
getTitleAt(int), 
setTabComponentAt(int, java.awt.Component)


"
78,JTabbedPane,13,"void setToolTipTextAt(int index, String tip)",True,Sets the tooltip text at index to toolTipText which can be null.,"

setToolTipTextAt
public void setToolTipTextAt(int index,
                             String toolTipText)
Sets the tooltip text at index to toolTipText
 which can be null.
 An internal exception is raised if there is no tab at that index.

Parameters:
index - the tab index where the tooltip text should be set
toolTipText - the tooltip text to be displayed for the tab
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < 0 || index >= tab count)
Since:
1.3
See Also:
getToolTipTextAt(int)


"
78,JTabbedPane,14,void setVisible(boolean aFlag),False,,NULL
78,JTabbedPane,15,"void setVisible(int index, boolean aFlag)",False,,NULL
78,JTabbedPane,16,void setTabLayoutPolicy(int policy),True,Sets the policy which the tabbedpane will use in laying out the tabs when all the tabs will not fit within a single run.,"

setTabLayoutPolicy
public void setTabLayoutPolicy(int tabLayoutPolicy)
Sets the policy which the tabbedpane will use in laying out the tabs
 when all the tabs will not fit within a single run.
 Possible values are:
 
JTabbedPane.WRAP_TAB_LAYOUT
JTabbedPane.SCROLL_TAB_LAYOUT


 The default value, if not set by the UI, is JTabbedPane.WRAP_TAB_LAYOUT.
 
 Some look and feels might only support a subset of the possible
 layout policies, in which case the value of this property may be
 ignored.

Parameters:
tabLayoutPolicy - the policy used to layout the tabs
Throws:
IllegalArgumentException - if layoutPolicy value isn't one
                          of the above valid values
Since:
1.4
See Also:
getTabLayoutPolicy()


"
78,JTabbedPane,17,void setTabLocation(int location),False,,NULL
78,JTabbedPane,18,void setTabSize(Dimension size),False,,NULL
78,JTabbedPane,19,"void setTabSize(int width, int height)",False,,NULL
78,JTabbedPane,20,void setTabSize(int width),False,,NULL
78,JTabbedPane,21,void setTabSize(int height),False,,NULL
78,JTabbedPane,22,"void setTabSize(float width, float height)",False,,NULL
78,JTabbedPane,23,void setTabSize(float width),False,,NULL
78,JTabbedPane,24,void setTabSize(float height),False,,NULL
78,JTabbedPane,25,"void setTabSize(double width, double height)",False,,NULL
78,JTabbedPane,26,void setTabSize(double width),False,,NULL
78,JTabbedPane,27,void setTabSize(double height),False,,NULL
78,JTabbedPane,28,"void setTabSize(int width, int height, int depth)",False,,NULL
78,JTabbedPane,29,"void setTabSize(float width, float height, float depth)",False,,NULL
78,JTabbedPane,30,"void setTabSize(double width, double height, double depth)",False,,NULL
78,JTabbedPane,31,"void setTabSize(Dimension size, int depth)",False,,NULL
78,JTabbedPane,32,"void setTabSize(int width, int height, int depth, int weight)",False,,NULL
78,JTabbedPane,33,"void setTabSize(float width, float height, float depth, float weight)",False,,NULL
78,JTabbedPane,34,"void setTabSize(double width, double height, double depth, double weight)",False,,NULL
78,JTabbedPane,35,"void setTabSize(Dimension size, int depth, int weight)",False,,NULL
78,JTabbedPane,36,"void setTabSize(int width, int height, int depth, int weight, int margin)",False,,NULL
78,JTabbedPane,37,"void setTabSize(float width, float height, float depth, float weight, float margin)",False,,NULL
78,JTabbedPane,38,"void setTabSize(double width, double height, double depth, double weight, double margin)",False,,NULL
78,JTabbedPane,39,"void setTabSize(Dimension size, int depth, int weight, int margin)",False,,NULL
78,JTabbedPane,40,"void setTabSize(int width, int height, int depth, int weight, int margin, int padding)",False,,NULL
78,JTabbedPane,41,"void setTabSize(float width, float height, float depth, float weight, float margin, float padding)",False,,NULL
78,JTabbedPane,42,"void setTabSize(double width, double height, double depth, double weight, double margin, double padding)",False,,NULL
78,JTabbedPane,43,"void setTabSize(Dimension size, int depth, int weight, int margin, int padding)",False,,NULL
78,JTabbedPane,44,"void setTabSize(int width, int height, int depth, int weight, int margin, int padding, int border)",False,,NULL
78,JTabbedPane,45,"void setTabSize(float width, float height, float depth, float weight, float margin, float padding, float border)",False,,NULL
78,JTabbedPane,46,"void setTabSize(double width, double height, double depth, double weight, double margin, double padding, double border)",False,,NULL
78,JTabbedPane,47,"void setTabSize(Dimension size, int depth, int weight, int margin, int padding, int border)",False,,NULL
78,JTabbedPane,48,"void setTabSize(int width, int height, int depth, int weight, int margin, int padding, int border, int marginType)",False,,NULL
79,JTable,1,"JTable(int row, int column)",False,,NULL
79,JTable,2,"void setValueAt(Object aValue, int rowIndex, int columnIndex)",True,Sets the value for the cell in the table model at row and column.,"

setValueAt
public void setValueAt(Object aValue,
                       int row,
                       int column)
Sets the value for the cell in the table model at row
 and column.
 
Note: The column is specified in the table view's display
              order, and not in the TableModel's column
              order.  This is an important distinction because as the
              user rearranges the columns in the table,
              the column at a given index in the view will change.
              Meanwhile the user's actions never affect the model's
              column ordering.

 aValue is the new value.

Parameters:
aValue - the new value
row - the row of the cell to be changed
column - the column of the cell to be changed
See Also:
getValueAt(int, int)


"
79,JTable,3,"Object getValueAt(int rowIndex, int columnIndex)",True,Returns the cell value at row and column.,"

getValueAt
public Object getValueAt(int row,
                         int column)
Returns the cell value at row and column.
 
Note: The column is specified in the table view's display
              order, and not in the TableModel's column
              order.  This is an important distinction because as the
              user rearranges the columns in the table,
              the column at a given index in the view will change.
              Meanwhile the user's actions never affect the model's
              column ordering.

Parameters:
row - the row whose value is to be queried
column - the column whose value is to be queried
Returns:
the Object at the specified cell


"
79,JTable,4,void setRowCount(int rows),False,,NULL
79,JTable,5,void setColumnCount(int columns),False,,NULL
80,JTable.DropLocation,1,int getColumn(),True,Returns the column index where a dropped item should be placed in the table.,"

getColumn
public int getColumn()
Returns the column index where a dropped item should be placed in the
 table. Interpretation of the value depends on the return of
 isInsertColumn(). If that method returns
 true this value indicates the index where a new
 column should be inserted. Otherwise, it represents the value
 of an existing column on which the data was dropped. This index is
 in terms of the view.
 
-1 indicates that the drop occurred over empty space,
 and no column could be calculated.

Returns:
the drop row


"
80,JTable.DropLocation,2,int getRow(),True,Returns the row index where a dropped item should be placed in the table.,"

getRow
public int getRow()
Returns the row index where a dropped item should be placed in the
 table. Interpretation of the value depends on the return of
 isInsertRow(). If that method returns
 true this value indicates the index where a new
 row should be inserted. Otherwise, it represents the value
 of an existing row on which the data was dropped. This index is
 in terms of the view.
 
-1 indicates that the drop occurred over empty space,
 and no row could be calculated.

Returns:
the drop row


"
80,JTable.DropLocation,3,boolean isInsert(),False,,NULL
80,JTable.DropLocation,4,boolean isBefore(),False,,NULL
80,JTable.DropLocation,5,boolean isAfter(),False,,NULL
81,JTextArea,1,JTextArea(),False,,NULL
81,JTextArea,2,void append(String str),True,Appends the given text to the end of the document.,"

append
public void append(String str)
Appends the given text to the end of the document.  Does nothing if
 the model is null or the string is null or empty.

Parameters:
str - the text to insert
See Also:
insert(java.lang.String, int)


"
81,JTextArea,3,void setText(String t),False,,NULL
81,JTextArea,4,String getText(),False,,NULL
81,JTextArea,5,void setLineWrap(boolean b),True,Sets the line-wrapping policy of the text area.,"

setLineWrap
public void setLineWrap(boolean wrap)
Sets the line-wrapping policy of the text area.  If set
 to true the lines will be wrapped if they are too long
 to fit within the allocated width.  If set to false,
 the lines will always be unwrapped.  A PropertyChange
 event (""lineWrap"") is fired when the policy is changed.
 By default this property is false.

Parameters:
wrap - indicates if lines should be wrapped
See Also:
getLineWrap()


"
82,JTextField,1,JTextField(),False,,NULL
82,JTextField,2,void setText(String text),False,,NULL
82,JTextField,3,String getText(),False,,NULL
82,JTextField,4,void setEditable(boolean b),False,,NULL
82,JTextField,5,void setColumns(int columns),True,"Sets the number of columns in this TextField, and then invalidate the layout.","

setColumns
public void setColumns(int columns)
Sets the number of columns in this TextField,
 and then invalidate the layout.

Parameters:
columns - the number of columns >= 0
Throws:
IllegalArgumentException - if columns
          is less than 0


"
83,JTextPane,1,void setContentType(String type),False,,NULL
83,JTextPane,2,String getContentType(),False,,NULL
83,JTextPane,3,"void setCharacterAttributes(SimpleAttributeSet a, boolean b)",False,,NULL
83,JTextPane,4,void addKeyListener(KeyListener l),False,,NULL
83,JTextPane,5,void addMouseListener(MouseListener l),False,,NULL
83,JTextPane,6,void addMouseMotionListener(MouseMotionListener l),False,,NULL
83,JTextPane,7,void addCaretListener(CaretListener l),False,,NULL
83,JTextPane,8,void addHyperlinkListener(HyperlinkListener l),False,,NULL
83,JTextPane,9,void addDocumentListener(DocumentListener l),False,,NULL
83,JTextPane,10,void addUndoableEditListener(UndoableEditListener l),False,,NULL
83,JTextPane,11,void addInputMethodListener(InputMethodListener l),False,,NULL
83,JTextPane,12,void addFocusListener(FocusListener l),False,,NULL
83,JTextPane,13,void addKeyboardActionListener(KeyboardActionListener l),False,,NULL
83,JTextPane,14,void addTextListener(TextListener l),False,,NULL
83,JTextPane,15,void addEditorKit(EditorKit kit),False,,NULL
83,JTextPane,16,void addElement(Element e),False,,NULL
83,JTextPane,17,void add(String str),False,,NULL
83,JTextPane,18,void add(Element e),False,,NULL
83,JTextPane,19,void add(AbstractDocument.Content c),False,,NULL
83,JTextPane,20,void add(AbstractDocument.Branch c),False,,NULL
83,JTextPane,21,void add(AbstractDocument.Leaf c),False,,NULL
83,JTextPane,22,"void add(AbstractDocument.Content c, int i)",False,,NULL
83,JTextPane,23,"void add(AbstractDocument.Branch c, int i)",False,,NULL
83,JTextPane,24,"void add(AbstractDocument.Leaf c, int i)",False,,NULL
83,JTextPane,25,"void add(AbstractDocument.Content c, int i, int j)",False,,NULL
83,JTextPane,26,"void add(AbstractDocument.Branch c, int i, int j)",False,,NULL
83,JTextPane,27,"void add(AbstractDocument.Leaf c, int i, int j)",False,,NULL
83,JTextPane,28,"void add(AbstractDocument.Content c, int i, int j, int k)",False,,NULL
83,JTextPane,29,"void add(AbstractDocument.Branch c, int i, int j, int k)",False,,NULL
83,JTextPane,30,"void add(AbstractDocument.Leaf c, int i, int j, int k)",False,,NULL
83,JTextPane,31,"void add(AbstractDocument.Content c, int i, int j, int k, int l)",False,,NULL
83,JTextPane,32,"void add(AbstractDocument.Branch c, int i, int j, int k, int l)",False,,NULL
83,JTextPane,33,"void add(AbstractDocument.Leaf c, int i, int j, int k, int l)",False,,NULL
83,JTextPane,34,"void add(AbstractDocument.Content c, int i, int j, int k, int l, int m)",False,,NULL
83,JTextPane,35,"void add(AbstractDocument.Branch c, int i, int j, int k, int l, int m)",False,,NULL
83,JTextPane,36,"void add(AbstractDocument.Leaf c, int i, int j, int k, int l, int m)",False,,NULL
83,JTextPane,37,"void add(AbstractDocument.Content c, int i, int j, int k, int l, int m, int n)",False,,NULL
83,JTextPane,38,"void add(AbstractDocument.Branch c, int i, int j, int k, int l, int m, int n)",False,,NULL
83,JTextPane,39,"void add(AbstractDocument.Leaf c, int i, int j, int k, int l, int m, int n)",False,,NULL
83,JTextPane,40,"void add(AbstractDocument.Content c, int i, int j, int k, int l, int m, int n, int o)",False,,NULL
83,JTextPane,41,"void add(AbstractDocument.Branch c, int i, int j, int k, int l, int m, int n, int o)",False,,NULL
83,JTextPane,42,"void add(AbstractDocument.Leaf c, int i, int j, int k, int l, int m, int n, int o)",False,,NULL
83,JTextPane,43,"void add(AbstractDocument.Content c, int i, int j, int k, int l, int m, int n, int o, int p)",False,,NULL
83,JTextPane,44,"void add(AbstractDocument.Branch c, int i, int j, int k, int l, int m, int n, int o, int p)",False,,NULL
83,JTextPane,45,"void add(AbstractDocument.Leaf c, int i, int j, int k, int l, int m, int n, int o, int p)",False,,NULL
84,JToggleButton,1,boolean isSelected(),False,,NULL
84,JToggleButton,2,void setSelected(boolean b),False,,NULL
84,JToggleButton,3,void setSelectedIcon(Icon icon),False,,NULL
84,JToggleButton,4,void setIcon(Icon icon),False,,NULL
84,JToggleButton,5,void setAction(Action a),False,,NULL
85,JToggleButton.ToggleButtonModel,1,boolean isSelected(),True,Checks if the button is selected.,"

isSelected
public boolean isSelected()
Checks if the button is selected.

Specified by:
isSelected in interface ButtonModel
Overrides:
isSelected in class DefaultButtonModel
Returns:
true if the button is selected


"
85,JToggleButton.ToggleButtonModel,2,void setSelected(boolean b),True,Sets the selected state of the button.,"

setSelected
public void setSelected(boolean b)
Sets the selected state of the button.

Specified by:
setSelected in interface ButtonModel
Overrides:
setSelected in class DefaultButtonModel
Parameters:
b - true selects the toggle button,
          false deselects the toggle button.


"
85,JToggleButton.ToggleButtonModel,3,void setEnabled(boolean b),False,,NULL
85,JToggleButton.ToggleButtonModel,4,void setArmed(boolean b),False,,NULL
85,JToggleButton.ToggleButtonModel,5,void setPressed(boolean b),True,Sets the pressed state of the toggle button.,"

setPressed
public void setPressed(boolean b)
Sets the pressed state of the toggle button.

Specified by:
setPressed in interface ButtonModel
Overrides:
setPressed in class DefaultButtonModel
Parameters:
b - whether or not the button should be pressed
See Also:
ButtonModel.isPressed()


"
85,JToggleButton.ToggleButtonModel,6,void setRollover(boolean b),False,,NULL
85,JToggleButton.ToggleButtonModel,7,void setRolloverEnabled(boolean b),False,,NULL
85,JToggleButton.ToggleButtonModel,8,void setSelected(boolean b),True,Sets the selected state of the button.,"

setSelected
public void setSelected(boolean b)
Sets the selected state of the button.

Specified by:
setSelected in interface ButtonModel
Overrides:
setSelected in class DefaultButtonModel
Parameters:
b - true selects the toggle button,
          false deselects the toggle button.


"
85,JToggleButton.ToggleButtonModel,9,void setSelected(boolean b),True,Sets the selected state of the button.,"

setSelected
public void setSelected(boolean b)
Sets the selected state of the button.

Specified by:
setSelected in interface ButtonModel
Overrides:
setSelected in class DefaultButtonModel
Parameters:
b - true selects the toggle button,
          false deselects the toggle button.


"
85,JToggleButton.ToggleButtonModel,10,void setSelected(boolean b),True,Sets the selected state of the button.,"

setSelected
public void setSelected(boolean b)
Sets the selected state of the button.

Specified by:
setSelected in interface ButtonModel
Overrides:
setSelected in class DefaultButtonModel
Parameters:
b - true selects the toggle button,
          false deselects the toggle button.


"
85,JToggleButton.ToggleButtonModel,11,void setSelected(boolean b),True,Sets the selected state of the button.,"

setSelected
public void setSelected(boolean b)
Sets the selected state of the button.

Specified by:
setSelected in interface ButtonModel
Overrides:
setSelected in class DefaultButtonModel
Parameters:
b - true selects the toggle button,
          false deselects the toggle button.


"
85,JToggleButton.ToggleButtonModel,12,void setSelected(boolean b),True,Sets the selected state of the button.,"

setSelected
public void setSelected(boolean b)
Sets the selected state of the button.

Specified by:
setSelected in interface ButtonModel
Overrides:
setSelected in class DefaultButtonModel
Parameters:
b - true selects the toggle button,
          false deselects the toggle button.


"
85,JToggleButton.ToggleButtonModel,13,void setSelected(boolean b),True,Sets the selected state of the button.,"

setSelected
public void setSelected(boolean b)
Sets the selected state of the button.

Specified by:
setSelected in interface ButtonModel
Overrides:
setSelected in class DefaultButtonModel
Parameters:
b - true selects the toggle button,
          false deselects the toggle button.


"
85,JToggleButton.ToggleButtonModel,14,void setSelected(boolean b),True,Sets the selected state of the button.,"

setSelected
public void setSelected(boolean b)
Sets the selected state of the button.

Specified by:
setSelected in interface ButtonModel
Overrides:
setSelected in class DefaultButtonModel
Parameters:
b - true selects the toggle button,
          false deselects the toggle button.


"
85,JToggleButton.ToggleButtonModel,15,void setSelected(boolean b),True,Sets the selected state of the button.,"

setSelected
public void setSelected(boolean b)
Sets the selected state of the button.

Specified by:
setSelected in interface ButtonModel
Overrides:
setSelected in class DefaultButtonModel
Parameters:
b - true selects the toggle button,
          false deselects the toggle button.


"
85,JToggleButton.ToggleButtonModel,16,void setSelected(boolean b),True,Sets the selected state of the button.,"

setSelected
public void setSelected(boolean b)
Sets the selected state of the button.

Specified by:
setSelected in interface ButtonModel
Overrides:
setSelected in class DefaultButtonModel
Parameters:
b - true selects the toggle button,
          false deselects the toggle button.


"
85,JToggleButton.ToggleButtonModel,17,void setSelected(boolean b),True,Sets the selected state of the button.,"

setSelected
public void setSelected(boolean b)
Sets the selected state of the button.

Specified by:
setSelected in interface ButtonModel
Overrides:
setSelected in class DefaultButtonModel
Parameters:
b - true selects the toggle button,
          false deselects the toggle button.


"
85,JToggleButton.ToggleButtonModel,18,void setSelected(boolean b),True,Sets the selected state of the button.,"

setSelected
public void setSelected(boolean b)
Sets the selected state of the button.

Specified by:
setSelected in interface ButtonModel
Overrides:
setSelected in class DefaultButtonModel
Parameters:
b - true selects the toggle button,
          false deselects the toggle button.


"
85,JToggleButton.ToggleButtonModel,19,void setSelected(boolean b),True,Sets the selected state of the button.,"

setSelected
public void setSelected(boolean b)
Sets the selected state of the button.

Specified by:
setSelected in interface ButtonModel
Overrides:
setSelected in class DefaultButtonModel
Parameters:
b - true selects the toggle button,
          false deselects the toggle button.


"
85,JToggleButton.ToggleButtonModel,20,void setSelected(boolean b),True,Sets the selected state of the button.,"

setSelected
public void setSelected(boolean b)
Sets the selected state of the button.

Specified by:
setSelected in interface ButtonModel
Overrides:
setSelected in class DefaultButtonModel
Parameters:
b - true selects the toggle button,
          false deselects the toggle button.


"
86,JToolBar,1,JToolBar(),False,,NULL
86,JToolBar,2,void add(Action a),False,,NULL
86,JToolBar,3,void add(Component c),False,,NULL
86,JToolBar,4,"void add(Action a, String s)",False,,NULL
86,JToolBar,5,"void add(Component c, String s)",False,,NULL
86,JToolBar,6,"void add(Action a, String s, String t)",False,,NULL
86,JToolBar,7,"void add(Component c, String s, String t)",False,,NULL
86,JToolBar,8,"void add(Action a, String s, String t, String u)",False,,NULL
86,JToolBar,9,"void add(Component c, String s, String t, String u)",False,,NULL
86,JToolBar,10,"void add(Action a, String s, String t, String u, String v)",False,,NULL
86,JToolBar,11,"void add(Component c, String s, String t, String u, String v)",False,,NULL
86,JToolBar,12,"void add(Action a, String s, String t, String u, String v, String w)",False,,NULL
86,JToolBar,13,"void add(Component c, String s, String t, String u, String v, String w)",False,,NULL
86,JToolBar,14,"void add(Action a, String s, String t, String u, String v, String w, String x)",False,,NULL
86,JToolBar,15,"void add(Component c, String s, String t, String u, String v, String w, String x)",False,,NULL
87,JToolBar.Separator,1,boolean isSeparator(),False,,NULL
87,JToolBar.Separator,2,void setSeparator(boolean separator),False,,NULL
87,JToolBar.Separator,3,void setOrientation(int orientation),False,,NULL
87,JToolBar.Separator,4,int getOrientation(),False,,NULL
87,JToolBar.Separator,5,void setSize(Dimension size),False,,NULL
87,JToolBar.Separator,6,Dimension getSize(),False,,NULL
87,JToolBar.Separator,7,void setPreferredSize(Dimension preferredSize),False,,NULL
87,JToolBar.Separator,8,Dimension getPreferredSize(),True,Returns the preferred size for the separator.,"

getPreferredSize
public Dimension getPreferredSize()
Returns the preferred size for the separator.

Overrides:
getPreferredSize in class JComponent
Returns:
the Dimension object containing the separator's
         preferred size
See Also:
JComponent.setPreferredSize(java.awt.Dimension), 
ComponentUI


"
87,JToolBar.Separator,9,void setMinimumSize(Dimension minimumSize),False,,NULL
87,JToolBar.Separator,10,Dimension getMinimumSize(),True,Returns the minimum size for the separator.,"

getMinimumSize
public Dimension getMinimumSize()
Returns the minimum size for the separator.

Overrides:
getMinimumSize in class JComponent
Returns:
the Dimension object containing the separator's
         minimum size
See Also:
JComponent.setMinimumSize(java.awt.Dimension), 
ComponentUI


"
87,JToolBar.Separator,11,void setMaximumSize(Dimension maximumSize),False,,NULL
87,JToolBar.Separator,12,Dimension getMaximumSize(),True,Returns the maximum size for the separator.,"

getMaximumSize
public Dimension getMaximumSize()
Returns the maximum size for the separator.

Overrides:
getMaximumSize in class JComponent
Returns:
the Dimension object containing the separator's
         maximum size
See Also:
JComponent.setMaximumSize(java.awt.Dimension), 
ComponentUI


"
87,JToolBar.Separator,13,void setUI(SeparatorUI ui),False,,NULL
87,JToolBar.Separator,14,SeparatorUI getUI(),False,,NULL
87,JToolBar.Separator,15,void updateUI(),False,,NULL
88,JToolTip,1,void setTipText(String text),True,Sets the text to show when the tool tip is displayed.,"

setTipText
public void setTipText(String tipText)
Sets the text to show when the tool tip is displayed.
 The string tipText may be null.

Parameters:
tipText - the String to display


"
88,JToolTip,2,String getTipText(),True,Returns the text that is shown when the tool tip is displayed.,"

getTipText
public String getTipText()
Returns the text that is shown when the tool tip is displayed.
 The returned value may be null.

Returns:
the String that is displayed


"
88,JToolTip,3,"void setTipText(String text, int x, int y)",False,,NULL
88,JToolTip,4,"void setTipText(String text, int x, int y, int width, int height)",False,,NULL
88,JToolTip,5,"void setTipText(String text, int x, int y, int width, int height, int delay, int duration)",False,,NULL
89,JTree,1,TreeNode getRoot(),False,,NULL
89,JTree,2,void setRootVisible(boolean b),True,Determines whether or not the root node from the TreeModel is visible.,"

setRootVisible
public void setRootVisible(boolean rootVisible)
Determines whether or not the root node from
 the TreeModel is visible.
 
 This is a bound property.

Parameters:
rootVisible - true if the root node of the tree is to be displayed
See Also:
rootVisible


"
89,JTree,3,void setShowsRootHandles(boolean b),True,"Sets the value of the showsRootHandles property, which specifies whether the node handles should be displayed.","

setShowsRootHandles
public void setShowsRootHandles(boolean newValue)
Sets the value of the showsRootHandles property,
 which specifies whether the node handles should be displayed.
 The default value of this property depends on the constructor
 used to create the JTree.
 Some look and feels might not support handles;
 they will ignore this property.
 
 This is a bound property.

Parameters:
newValue - true if root handles should be displayed;
                 otherwise, false
See Also:
showsRootHandles, 
getShowsRootHandles()


"
89,JTree,4,void setCellRenderer(TreeCellRenderer renderer),True,Sets the TreeCellRenderer that will be used to draw each cell.,"

setCellRenderer
public void setCellRenderer(TreeCellRenderer x)
Sets the TreeCellRenderer that will be used to
 draw each cell.
 
 This is a bound property.

Parameters:
x - the TreeCellRenderer that is to render each cell


"
89,JTree,5,void setModel(TreeModel newModel),True,Sets the TreeModel that will provide the data.,"

setModel
public void setModel(TreeModel newModel)
Sets the TreeModel that will provide the data.
 
 This is a bound property.

Parameters:
newModel - the TreeModel that is to provide the data


"
90,JTree.DropLocation,1,int getChildIndex(),True,Returns the index where the dropped data should be inserted with respect to the path returned by getPath().,"

getChildIndex
public int getChildIndex()
Returns the index where the dropped data should be inserted
 with respect to the path returned by getPath().
 
 For drop modes DropMode.USE_SELECTION and
 DropMode.ON, this index is unimportant (and it will
 always be -1) as the only interesting data is the
 path over which the drop operation occurred.
 
 For drop mode DropMode.INSERT, this index
 indicates the index at which the data should be inserted into
 the parent path represented by getPath().
 -1 indicates that the drop occurred over the
 parent itself, and in most cases should be treated as inserting
 into either the beginning or the end of the parent's list of
 children.
 
 For DropMode.ON_OR_INSERT, this value will be
 an insert index, as described above, or -1 if
 the drop occurred over the path itself.

Returns:
the child index
See Also:
getPath()


"
90,JTree.DropLocation,2,int getPath(),False,,NULL
90,JTree.DropLocation,3,int getParentPath(),False,,NULL
90,JTree.DropLocation,4,int getInsertPosition(),False,,NULL
90,JTree.DropLocation,5,int getDropLocation(),False,,NULL
91,JTree.DynamicUtilTreeNode,1,boolean add(E e),False,,NULL
91,JTree.DynamicUtilTreeNode,2,boolean addAll(Collection<? extends E> c),False,,NULL
91,JTree.DynamicUtilTreeNode,3,void clear(),False,,NULL
91,JTree.DynamicUtilTreeNode,4,boolean contains(Object o),False,,NULL
91,JTree.DynamicUtilTreeNode,5,boolean containsAll(Collection<?> c),False,,NULL
92,JTree.EmptySelectionModel,1,boolean isSelectionEmpty(),False,,NULL
92,JTree.EmptySelectionModel,2,void setSelectionPath(TreePath path),False,,NULL
92,JTree.EmptySelectionModel,3,TreePath getSelectionPath(),False,,NULL
92,JTree.EmptySelectionModel,4,void addSelectionPath(TreePath path),False,,NULL
92,JTree.EmptySelectionModel,5,void removeSelectionPath(TreePath path),False,,NULL
93,JViewport,1,void setView(Component view),True,"Sets the JViewport's one lightweight child (view), which can be null.","

setView
public void setView(Component view)
Sets the JViewport's one lightweight child
 (view), which can be null.

Parameters:
view - the viewport's new lightweight child
See Also:
getView()


"
93,JViewport,2,Component getView(),True,Returns the JViewport's one child or null.,"

getView
public Component getView()
Returns the JViewport's one child or null.

Returns:
the viewports child, or null if none exists
See Also:
setView(java.awt.Component)


"
93,JViewport,3,void setViewPosition(Point p),True,"Sets the view coordinates that appear in the upper left hand corner of the viewport, does nothing if there's no view.","

setViewPosition
public void setViewPosition(Point p)
Sets the view coordinates that appear in the upper left
 hand corner of the viewport, does nothing if there's no view.

Parameters:
p - a Point object giving the upper left coordinates


"
93,JViewport,4,Point getViewPosition(),True,"Returns the view coordinates that appear in the upper left hand corner of the viewport, or 0,0 if there's no view.","

getViewPosition
public Point getViewPosition()
Returns the view coordinates that appear in the upper left
 hand corner of the viewport, or 0,0 if there's no view.

Returns:
a Point object giving the upper left coordinates


"
93,JViewport,5,void setViewSize(Dimension d),True,Sets the size of the view.,"

setViewSize
public void setViewSize(Dimension newSize)
Sets the size of the view.  A state changed event will be fired.

Parameters:
newSize - a Dimension object specifying the new
          size of the view


"
93,JViewport,6,Dimension getViewSize(),True,"If the view's size hasn't been explicitly set, return the preferred size, otherwise return the view's current size.","

getViewSize
public Dimension getViewSize()
If the view's size hasn't been explicitly set, return the
 preferred size, otherwise return the view's current size.
 If there is no view, return 0,0.

Returns:
a Dimension object specifying the size of the view


"
93,JViewport,7,void scrollRectToVisible(Rectangle r),True,Scrolls the view so that Rectangle within the view becomes visible.,"

scrollRectToVisible
public void scrollRectToVisible(Rectangle contentRect)
Scrolls the view so that Rectangle
 within the view becomes visible.
 
 This attempts to validate the view before scrolling if the
 view is currently not valid - isValid returns false.
 To avoid excessive validation when the containment hierarchy is
 being created this will not validate if one of the ancestors does not
 have a peer, or there is no validate root ancestor, or one of the
 ancestors is not a Window or Applet.
 
 Note that this method will not scroll outside of the
 valid viewport; for example, if contentRect is larger
 than the viewport, scrolling will be confined to the viewport's
 bounds.

Overrides:
scrollRectToVisible in class JComponent
Parameters:
contentRect - the Rectangle to display
See Also:
JComponent.isValidateRoot(), 
Component.isValid(), 
Component.getPeer()


"
93,JViewport,8,"void scrollRectToVisible(Rectangle r, Hint hint)",False,,NULL
93,JViewport,9,void getViewRect(Rectangle r),False,,NULL
93,JViewport,10,void getBounds(Rectangle r),False,,NULL
93,JViewport,11,void setParent(Container parent),False,,NULL
93,JViewport,12,Container getParent(),False,,NULL
93,JViewport,13,void setViewportSize(Dimension d),False,,NULL
93,JViewport,14,Dimension getViewportSize(),False,,NULL
93,JViewport,15,void setViewportView(Component view),False,,NULL
93,JViewport,16,Component getViewportView(),False,,NULL
93,JViewport,17,void setCorner(int corner),False,,NULL
93,JViewport,18,int getCorner(),False,,NULL
93,JViewport,19,void setTransferHandler(TransferHandler handler),False,,NULL
93,JViewport,20,TransferHandler getTransferHandler(),False,,NULL
93,JViewport,21,void setDragMode(int mode),False,,NULL
93,JViewport,22,int getDragMode(),False,,NULL
93,JViewport,23,void setAutoscrolls(boolean autoscrolls),False,,NULL
93,JViewport,24,boolean getAutoscrolls(),False,,NULL
93,JViewport,25,void setAutoscrolls(boolean autoscrolls),False,,NULL
93,JViewport,26,boolean getAutoscrolls(),False,,NULL
93,JViewport,27,void setAutoscrolls(boolean autoscrolls),False,,NULL
93,JViewport,28,boolean getAutoscrolls(),False,,NULL
93,JViewport,29,void setAutoscrolls(boolean autoscrolls),False,,NULL
93,JViewport,30,boolean getAutoscrolls(),False,,NULL
94,JWindow,1,JWindow(),False,,NULL
94,JWindow,2,"void setBounds(int x, int y, int width, int height)",False,,NULL
94,JWindow,3,void setVisible(boolean b),False,,NULL
94,JWindow,4,void dispose(),False,,NULL
94,JWindow,5,void toFront(),False,,NULL
95,KeyStroke,1,KeyStroke getKeyStrokeForEvent(KeyEvent e),True,Returns a KeyStroke which represents the stroke which generated a given KeyEvent.,"

getKeyStrokeForEvent
public static KeyStroke getKeyStrokeForEvent(KeyEvent anEvent)
Returns a KeyStroke which represents the stroke which generated a given
 KeyEvent.
 
 This method obtains the keyChar from a KeyTyped event, and the keyCode
 from a KeyPressed or KeyReleased event. The KeyEvent modifiers are
 obtained for all three types of KeyEvent.

Parameters:
anEvent - the KeyEvent from which to obtain the KeyStroke
Returns:
the KeyStroke that precipitated the event
Throws:
NullPointerException - if anEvent is null


"
95,KeyStroke,2,KeyStroke getKeyStroke(String keyEvent),True,Parses a string and returns a KeyStroke.,"

getKeyStroke
public static KeyStroke getKeyStroke(String s)
Parses a string and returns a KeyStroke.
 The string must have the following syntax:
 
    <modifiers>* (<typedID> | <pressedReleasedID>)

    modifiers := shift | control | ctrl | meta | alt | altGraph
    typedID := typed <typedKey>
    typedKey := string of length 1 giving Unicode character.
    pressedReleasedID := (pressed | released) key
    key := KeyEvent key code name, i.e. the name following ""VK_"".
 
 If typed, pressed or released is not specified, pressed is assumed. Here
 are some examples:
 
     ""INSERT"" => getKeyStroke(KeyEvent.VK_INSERT, 0);
     ""control DELETE"" => getKeyStroke(KeyEvent.VK_DELETE, InputEvent.CTRL_MASK);
     ""alt shift X"" => getKeyStroke(KeyEvent.VK_X, InputEvent.ALT_MASK | InputEvent.SHIFT_MASK);
     ""alt shift released X"" => getKeyStroke(KeyEvent.VK_X, InputEvent.ALT_MASK | InputEvent.SHIFT_MASK, true);
     ""typed a"" => getKeyStroke('a');
 

 In order to maintain backward-compatibility, specifying a null String,
 or a String which is formatted incorrectly, returns null.

Parameters:
s - a String formatted as described above
Returns:
a KeyStroke object for that String, or null if the specified
         String is null, or is formatted incorrectly
See Also:
KeyEvent


"
95,KeyStroke,3,"KeyStroke getKeyStroke(char keyChar, int modifiers)",False,,NULL
95,KeyStroke,4,"KeyStroke getKeyStroke(String keyEvent, int modifiers)",False,,NULL
95,KeyStroke,5,"KeyStroke getKeyStroke(int keyCode, int modifiers)",True,"Returns a shared instance of a KeyStroke, given a numeric key code and a set of modifiers.","

getKeyStroke
public static KeyStroke getKeyStroke(int keyCode,
                                     int modifiers)
Returns a shared instance of a KeyStroke, given a numeric key code and a
 set of modifiers. The returned KeyStroke will correspond to a key press.
 
 The ""virtual key"" constants defined in java.awt.event.KeyEvent can be
 used to specify the key code. For example:
java.awt.event.KeyEvent.VK_ENTER
 java.awt.event.KeyEvent.VK_TAB
 java.awt.event.KeyEvent.VK_SPACE
 
 Alternatively, the key code may be obtained by calling
 java.awt.event.KeyEvent.getExtendedKeyCodeForChar.

 The modifiers consist of any combination of:
java.awt.event.InputEvent.SHIFT_DOWN_MASK
 java.awt.event.InputEvent.CTRL_DOWN_MASK
 java.awt.event.InputEvent.META_DOWN_MASK
 java.awt.event.InputEvent.ALT_DOWN_MASK
 java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK
 
 The old modifiers 
java.awt.event.InputEvent.SHIFT_MASK
 java.awt.event.InputEvent.CTRL_MASK
 java.awt.event.InputEvent.META_MASK
 java.awt.event.InputEvent.ALT_MASK
 java.awt.event.InputEvent.ALT_GRAPH_MASK
 
 also can be used, but they are mapped to _DOWN_ modifiers.

 Since these numbers are all different powers of two, any combination of
 them is an integer in which each bit represents a different modifier
 key. Use 0 to specify no modifiers.

Parameters:
keyCode - an int specifying the numeric code for a keyboard key
modifiers - a bitwise-ored combination of any modifiers
Returns:
a KeyStroke object for that key
See Also:
KeyEvent, 
InputEvent


"
96,LayoutFocusTraversalPolicy,1,boolean isFocusTraversable(Component c),False,,NULL
96,LayoutFocusTraversalPolicy,2,void setInitialComponent(Component c),False,,NULL
96,LayoutFocusTraversalPolicy,3,Component getInitialComponent(),False,,NULL
96,LayoutFocusTraversalPolicy,4,void addComponent(Component c),False,,NULL
96,LayoutFocusTraversalPolicy,5,void removeComponent(Component c),False,,NULL
97,LayoutStyle,1,void setAlignment(int alignment),False,,NULL
97,LayoutStyle,2,void setHgap(int hgap),False,,NULL
97,LayoutStyle,3,void setVgap(int vgap),False,,NULL
97,LayoutStyle,4,void setContainerGap(int containerGap),False,,NULL
97,LayoutStyle,5,void setAncestorGap(int ancestorGap),False,,NULL
98,LookAndFeel,1,void setDefaultLookAndFeelDecorated(boolean decorated),False,,NULL
98,LookAndFeel,2,void setDefaultLookAndFeel(LookAndFeel lf),False,,NULL
98,LookAndFeel,3,void setCurrentTheme(Theme theme),False,,NULL
98,LookAndFeel,4,"void setCurrentTheme(Theme theme, boolean decorated)",False,,NULL
98,LookAndFeel,5,"void setCurrentTheme(Theme theme, boolean decorated, boolean useSystemProperties)",False,,NULL
99,MenuSelectionManager,1,"void setSelectedPath(MenuSelectionManager msm, MenuItem[] path)",False,,NULL
99,MenuSelectionManager,2,MenuItem[] getSelectedPath(MenuSelectionManager msm),False,,NULL
99,MenuSelectionManager,3,"void addMenuSelectionListener(MenuSelectionManager msm, MenuSelectionListener l)",False,,NULL
99,MenuSelectionManager,4,"void removeMenuSelectionListener(MenuSelectionManager msm, MenuSelectionListener l)",False,,NULL
99,MenuSelectionManager,5,"void setSelectedPath(MenuSelectionManager msm, MenuItem[] path)",False,,NULL
100,OverlayLayout,1,"void addLayoutComponent(String name, Component comp)",True,Adds the specified component to the layout.,"

addLayoutComponent
public void addLayoutComponent(String name,
                               Component comp)
Adds the specified component to the layout. Used by
 this class to know when to invalidate layout.

Specified by:
addLayoutComponent in interface LayoutManager
Parameters:
name - the name of the component
comp - the the component to be added


"
100,OverlayLayout,2,void removeLayoutComponent(Component comp),True,Removes the specified component from the layout.,"

removeLayoutComponent
public void removeLayoutComponent(Component comp)
Removes the specified component from the layout. Used by
 this class to know when to invalidate layout.

Specified by:
removeLayoutComponent in interface LayoutManager
Parameters:
comp - the component to remove


"
100,OverlayLayout,3,Dimension preferredLayoutSize(Container parent),True,Returns the preferred dimensions for this layout given the components in the specified target container.,"

preferredLayoutSize
public Dimension preferredLayoutSize(Container target)
Returns the preferred dimensions for this layout given the components
 in the specified target container.  Recomputes the layout if it
 has been invalidated.  Factors in the current inset setting returned
 by getInsets().

Specified by:
preferredLayoutSize in interface LayoutManager
Parameters:
target - the component which needs to be laid out
Returns:
a Dimension object containing the preferred dimensions
See Also:
minimumLayoutSize(java.awt.Container)


"
100,OverlayLayout,4,Dimension minimumLayoutSize(Container parent),True,Returns the minimum dimensions needed to lay out the components contained in the specified target container.,"

minimumLayoutSize
public Dimension minimumLayoutSize(Container target)
Returns the minimum dimensions needed to lay out the components
 contained in the specified target container.  Recomputes the layout
 if it has been invalidated, and factors in the current inset setting.

Specified by:
minimumLayoutSize in interface LayoutManager
Parameters:
target - the component which needs to be laid out
Returns:
a Dimension object containing the minimum dimensions
See Also:
preferredLayoutSize(java.awt.Container)


"
100,OverlayLayout,5,void layoutContainer(Container parent),True,Called by the AWT when the specified container needs to be laid out.,"

layoutContainer
public void layoutContainer(Container target)
Called by the AWT when the specified container needs to be laid out.

Specified by:
layoutContainer in interface LayoutManager
Parameters:
target - the container to lay out
Throws:
AWTError - if the target isn't the container specified to the
                      constructor


"
101,Popup,1,void show(),True,Makes the Popup visible.,"

show
public void show()
Makes the Popup visible. If the Popup is
 currently visible, this has no effect.

"
101,Popup,2,void hide(),True,Hides and disposes of the Popup.,"

hide
public void hide()
Hides and disposes of the Popup. Once a Popup
 has been disposed you should no longer invoke methods on it. A
 disposed Popup may be reclaimed and later used
 based on the PopupFactory. As such, if you invoke methods
 on a disposed Popup, indeterminate
 behavior will result.

"
101,Popup,3,"void setLocation(int x, int y)",False,,NULL
101,Popup,4,"void setSize(int width, int height)",False,,NULL
101,Popup,5,void setVisible(boolean b),False,,NULL
102,PopupFactory,1,"PopupFactory createPopup(Component owner, JComponent contents)",False,,NULL
102,PopupFactory,2,"Popup createPopup(Component owner, JComponent contents, int x, int y)",False,,NULL
102,PopupFactory,3,"Popup createPopup(Component owner, JComponent contents, int x, int y, boolean isModal)",False,,NULL
102,PopupFactory,4,"Popup createPopup(Component owner, JComponent contents, int x, int y, boolean isModal, boolean isLightweight)",False,,NULL
102,PopupFactory,5,"Popup createPopup(Component owner, JComponent contents, int x, int y, boolean isModal, boolean isLightweight, boolean isModalLocator)",False,,NULL
103,ProgressMonitor,1,int getMaximum(),True,Returns the maximum value -- the higher end of the progress value.,"

getMaximum
public int getMaximum()
Returns the maximum value -- the higher end of the progress value.

Returns:
an int representing the maximum value
See Also:
setMaximum(int)


"
103,ProgressMonitor,2,int getMinimum(),True,Returns the minimum value -- the lower end of the progress value.,"

getMinimum
public int getMinimum()
Returns the minimum value -- the lower end of the progress value.

Returns:
an int representing the minimum value
See Also:
setMinimum(int)


"
103,ProgressMonitor,3,int getCurrent(),False,,NULL
103,ProgressMonitor,4,void setCurrent(int current),False,,NULL
103,ProgressMonitor,5,void setNote(String note),True,Specifies the additional note that is displayed along with the progress message.,"

setNote
public void setNote(String note)
Specifies the additional note that is displayed along with the
 progress message. Used, for example, to show which file the
 is currently being copied during a multiple-file copy.

Parameters:
note - a String specifying the note to display
See Also:
getNote()


"
103,ProgressMonitor,6,void setProgress(int current),True,Indicate the progress of the operation being monitored.,"

setProgress
public void setProgress(int nv)
Indicate the progress of the operation being monitored.
 If the specified value is >= the maximum, the progress
 monitor is closed.

Parameters:
nv - an int specifying the current value, between the
        maximum and minimum specified for this component
See Also:
setMinimum(int), 
setMaximum(int), 
close()


"
103,ProgressMonitor,7,void setMillisToPopup(int millis),True,Specifies the amount of time it will take for the popup to appear.,"

setMillisToPopup
public void setMillisToPopup(int millisToPopup)
Specifies the amount of time it will take for the popup to appear.
 (If the predicted time remaining is less than this time, the popup
 won't be displayed.)

Parameters:
millisToPopup - an int specifying the time in milliseconds
See Also:
getMillisToPopup()


"
103,ProgressMonitor,8,void setMillisToPopup(int millis),True,Specifies the amount of time it will take for the popup to appear.,"

setMillisToPopup
public void setMillisToPopup(int millisToPopup)
Specifies the amount of time it will take for the popup to appear.
 (If the predicted time remaining is less than this time, the popup
 won't be displayed.)

Parameters:
millisToPopup - an int specifying the time in milliseconds
See Also:
getMillisToPopup()


"
103,ProgressMonitor,9,void setMillisToPopup(int millis),True,Specifies the amount of time it will take for the popup to appear.,"

setMillisToPopup
public void setMillisToPopup(int millisToPopup)
Specifies the amount of time it will take for the popup to appear.
 (If the predicted time remaining is less than this time, the popup
 won't be displayed.)

Parameters:
millisToPopup - an int specifying the time in milliseconds
See Also:
getMillisToPopup()


"
103,ProgressMonitor,10,void setMillisToPopup(int millis),True,Specifies the amount of time it will take for the popup to appear.,"

setMillisToPopup
public void setMillisToPopup(int millisToPopup)
Specifies the amount of time it will take for the popup to appear.
 (If the predicted time remaining is less than this time, the popup
 won't be displayed.)

Parameters:
millisToPopup - an int specifying the time in milliseconds
See Also:
getMillisToPopup()


"
103,ProgressMonitor,11,void setMillisToPopup(int millis),True,Specifies the amount of time it will take for the popup to appear.,"

setMillisToPopup
public void setMillisToPopup(int millisToPopup)
Specifies the amount of time it will take for the popup to appear.
 (If the predicted time remaining is less than this time, the popup
 won't be displayed.)

Parameters:
millisToPopup - an int specifying the time in milliseconds
See Also:
getMillisToPopup()


"
103,ProgressMonitor,12,void setMillisToPopup(int millis),True,Specifies the amount of time it will take for the popup to appear.,"

setMillisToPopup
public void setMillisToPopup(int millisToPopup)
Specifies the amount of time it will take for the popup to appear.
 (If the predicted time remaining is less than this time, the popup
 won't be displayed.)

Parameters:
millisToPopup - an int specifying the time in milliseconds
See Also:
getMillisToPopup()


"
103,ProgressMonitor,13,void setMillisToPopup(int millis),True,Specifies the amount of time it will take for the popup to appear.,"

setMillisToPopup
public void setMillisToPopup(int millisToPopup)
Specifies the amount of time it will take for the popup to appear.
 (If the predicted time remaining is less than this time, the popup
 won't be displayed.)

Parameters:
millisToPopup - an int specifying the time in milliseconds
See Also:
getMillisToPopup()


"
103,ProgressMonitor,14,void setMillisToPopup(int millis),True,Specifies the amount of time it will take for the popup to appear.,"

setMillisToPopup
public void setMillisToPopup(int millisToPopup)
Specifies the amount of time it will take for the popup to appear.
 (If the predicted time remaining is less than this time, the popup
 won't be displayed.)

Parameters:
millisToPopup - an int specifying the time in milliseconds
See Also:
getMillisToPopup()


"
103,ProgressMonitor,15,void setMillisToPopup(int millis),True,Specifies the amount of time it will take for the popup to appear.,"

setMillisToPopup
public void setMillisToPopup(int millisToPopup)
Specifies the amount of time it will take for the popup to appear.
 (If the predicted time remaining is less than this time, the popup
 won't be displayed.)

Parameters:
millisToPopup - an int specifying the time in milliseconds
See Also:
getMillisToPopup()


"
103,ProgressMonitor,16,void setMillisToPopup(int millis),True,Specifies the amount of time it will take for the popup to appear.,"

setMillisToPopup
public void setMillisToPopup(int millisToPopup)
Specifies the amount of time it will take for the popup to appear.
 (If the predicted time remaining is less than this time, the popup
 won't be displayed.)

Parameters:
millisToPopup - an int specifying the time in milliseconds
See Also:
getMillisToPopup()


"
103,ProgressMonitor,17,void setMillisToPopup(int millis),True,Specifies the amount of time it will take for the popup to appear.,"

setMillisToPopup
public void setMillisToPopup(int millisToPopup)
Specifies the amount of time it will take for the popup to appear.
 (If the predicted time remaining is less than this time, the popup
 won't be displayed.)

Parameters:
millisToPopup - an int specifying the time in milliseconds
See Also:
getMillisToPopup()


"
103,ProgressMonitor,18,void setMillisToPopup(int millis),True,Specifies the amount of time it will take for the popup to appear.,"

setMillisToPopup
public void setMillisToPopup(int millisToPopup)
Specifies the amount of time it will take for the popup to appear.
 (If the predicted time remaining is less than this time, the popup
 won't be displayed.)

Parameters:
millisToPopup - an int specifying the time in milliseconds
See Also:
getMillisToPopup()


"
103,ProgressMonitor,19,void setMillisToPopup(int millis),True,Specifies the amount of time it will take for the popup to appear.,"

setMillisToPopup
public void setMillisToPopup(int millisToPopup)
Specifies the amount of time it will take for the popup to appear.
 (If the predicted time remaining is less than this time, the popup
 won't be displayed.)

Parameters:
millisToPopup - an int specifying the time in milliseconds
See Also:
getMillisToPopup()


"
103,ProgressMonitor,20,void setMillisToPopup(int millis),True,Specifies the amount of time it will take for the popup to appear.,"

setMillisToPopup
public void setMillisToPopup(int millisToPopup)
Specifies the amount of time it will take for the popup to appear.
 (If the predicted time remaining is less than this time, the popup
 won't be displayed.)

Parameters:
millisToPopup - an int specifying the time in milliseconds
See Also:
getMillisToPopup()


"
104,ProgressMonitorInputStream,1,ProgressMonitorInputStream(InputStream in),False,,NULL
104,ProgressMonitorInputStream,2,void setProgress(int bytesRead),False,,NULL
104,ProgressMonitorInputStream,3,void setMillisToPopup(long millisToPopup),False,,NULL
104,ProgressMonitorInputStream,4,void setNote(String note),False,,NULL
104,ProgressMonitorInputStream,5,void setMinimum(int minimum),False,,NULL
104,ProgressMonitorInputStream,6,void setMaximum(int maximum),False,,NULL
104,ProgressMonitorInputStream,7,void setMessage(String message),False,,NULL
104,ProgressMonitorInputStream,8,void setDialogType(int dialogType),False,,NULL
104,ProgressMonitorInputStream,9,void setCanceled(boolean canceled),False,,NULL
104,ProgressMonitorInputStream,10,void setNote(String note),False,,NULL
104,ProgressMonitorInputStream,11,void setProgress(int bytesRead),False,,NULL
104,ProgressMonitorInputStream,12,void setMillisToPopup(long millisToPopup),False,,NULL
104,ProgressMonitorInputStream,13,void setMinimum(int minimum),False,,NULL
104,ProgressMonitorInputStream,14,void setMaximum(int maximum),False,,NULL
104,ProgressMonitorInputStream,15,void setMessage(String message),False,,NULL
104,ProgressMonitorInputStream,16,void setDialogType(int dialogType),False,,NULL
104,ProgressMonitorInputStream,17,void setCanceled(boolean canceled),False,,NULL
104,ProgressMonitorInputStream,18,void setNote(String note),False,,NULL
104,ProgressMonitorInputStream,19,void setProgress(int bytesRead),False,,NULL
104,ProgressMonitorInputStream,20,void setMillisToPopup(long millisToPopup),False,,NULL
104,ProgressMonitorInputStream,21,void setMinimum(int minimum),False,,NULL
104,ProgressMonitorInputStream,22,void setMaximum(int maximum),False,,NULL
104,ProgressMonitorInputStream,23,void setMessage(String message),False,,NULL
104,ProgressMonitorInputStream,24,void setDialogType(int dialogType),False,,NULL
104,ProgressMonitorInputStream,25,void setCanceled(boolean canceled),False,,NULL
105,RepaintManager,1,"void addDirtyRegion(int x, int y, int width, int height)",False,,NULL
105,RepaintManager,2,void addDirtyRegion(Rectangle r),False,,NULL
105,RepaintManager,3,void addInvalidComponent(Component c),False,,NULL
105,RepaintManager,4,"void addDirtyRegion(int x, int y, int width, int height)",False,,NULL
105,RepaintManager,5,void addDirtyRegion(Rectangle r),False,,NULL
106,RowFilter,1,RowFilter.EntryFilter<Object> accept(RowFilter.Entry<?> entry),False,,NULL
106,RowFilter,2,"RowFilter<Object, Object> andFilter(RowFilter<Object, Object> filter)",False,,NULL
106,RowFilter,3,"RowFilter<Object, Object> orFilter(RowFilter<Object, Object> filter)",False,,NULL
106,RowFilter,4,"RowFilter<Object, Object> notFilter(RowFilter<Object, Object> filter)",False,,NULL
106,RowFilter,5,"RowFilter<Object, Object> equalsFilter(int column, Object value)",False,,NULL
107,RowFilter.Entry,1,boolean include(Entry entry),False,,NULL
107,RowFilter.Entry,2,Object getValue(int columnIndex),True,Returns the value at the specified index.,"

getValue
public abstract Object getValue(int index)
Returns the value at the specified index.  This may return
 null.  When used with a table, index
 corresponds to the column number in the model.

Parameters:
index - the index of the value to get
Returns:
value at the specified index
Throws:
IndexOutOfBoundsException - if index < 0 or
         >= getValueCount


"
107,RowFilter.Entry,3,"Object getValue(int columnIndex, Class<?> type)",False,,NULL
107,RowFilter.Entry,4,"Object getValue(int columnIndex, Class<?> type, boolean convert)",False,,NULL
107,RowFilter.Entry,5,"Object getValue(int columnIndex, Class<?> type, boolean convert, boolean ignoreCase)",False,,NULL
108,RowSorter,1,RowSorter(),False,,NULL
108,RowSorter,2,void setModel(ListModel<? extends E> model),False,,NULL
108,RowSorter,3,void setRowFilter(RowFilter<E> filter),False,,NULL
108,RowSorter,4,void setSortKeys(List<? extends SortKey> keys),False,,NULL
108,RowSorter,5,"void toggleSortKey(int columnIndex, int sortOrder)",False,,NULL
109,RowSorter.SortKey,1,"SortKey(int columnIndex, int sortOrder)",False,,NULL
109,RowSorter.SortKey,2,int getColumnIndex(),False,,NULL
109,RowSorter.SortKey,3,int getSortOrder(),False,,NULL
109,RowSorter.SortKey,4,void setColumnIndex(int columnIndex),False,,NULL
109,RowSorter.SortKey,5,void setSortOrder(int sortOrder),False,,NULL
110,ScrollPaneLayout,1,"void addLayoutComponent(String name, Component comp)",True,Adds the specified component to the layout.,"

addLayoutComponent
public void addLayoutComponent(String s,
                               Component c)
Adds the specified component to the layout. The layout is
 identified using one of:
 
ScrollPaneConstants.VIEWPORT
 ScrollPaneConstants.VERTICAL_SCROLLBAR
 ScrollPaneConstants.HORIZONTAL_SCROLLBAR
 ScrollPaneConstants.ROW_HEADER
 ScrollPaneConstants.COLUMN_HEADER
 ScrollPaneConstants.LOWER_LEFT_CORNER
 ScrollPaneConstants.LOWER_RIGHT_CORNER
 ScrollPaneConstants.UPPER_LEFT_CORNER
 ScrollPaneConstants.UPPER_RIGHT_CORNER
 

Specified by:
addLayoutComponent in interface LayoutManager
Parameters:
s - the component identifier
c - the the component to be added
Throws:
IllegalArgumentException - if s is an invalid key


"
110,ScrollPaneLayout,2,Dimension preferredLayoutSize(Container parent),True,"The preferred size of a ScrollPane is the size of the insets, plus the preferred size of the viewport, plus the preferred size of the visible headers, plus the preferred size of the scrollbars that will appear given the current view and the current scrollbar displayPolicies.","

preferredLayoutSize
public Dimension preferredLayoutSize(Container parent)
The preferred size of a ScrollPane is the size of the insets,
 plus the preferred size of the viewport, plus the preferred size of
 the visible headers, plus the preferred size of the scrollbars
 that will appear given the current view and the current
 scrollbar displayPolicies.
 Note that the rowHeader is calculated as part of the preferred width
 and the colHeader is calculated as part of the preferred size.

Specified by:
preferredLayoutSize in interface LayoutManager
Parameters:
parent - the Container that will be laid out
Returns:
a Dimension object specifying the preferred size of the
         viewport and any scrollbars
See Also:
ViewportLayout, 
LayoutManager


"
110,ScrollPaneLayout,3,Dimension minimumLayoutSize(Container parent),True,"The minimum size of a ScrollPane is the size of the insets plus minimum size of the viewport, plus the scrollpane's viewportBorder insets, plus the minimum size of the visible headers, plus the minimum size of the scrollbars whose displayPolicy isn't NEVER.","

minimumLayoutSize
public Dimension minimumLayoutSize(Container parent)
The minimum size of a ScrollPane is the size of the insets
 plus minimum size of the viewport, plus the scrollpane's
 viewportBorder insets, plus the minimum size
 of the visible headers, plus the minimum size of the
 scrollbars whose displayPolicy isn't NEVER.

Specified by:
minimumLayoutSize in interface LayoutManager
Parameters:
parent - the Container that will be laid out
Returns:
a Dimension object specifying the minimum size
See Also:
LayoutManager.preferredLayoutSize(java.awt.Container)


"
110,ScrollPaneLayout,4,void layoutContainer(Container parent),True,Lays out the scrollpane.,"

layoutContainer
public void layoutContainer(Container parent)
Lays out the scrollpane. The positioning of components depends on
 the following constraints:
 
 The row header, if present and visible, gets its preferred
 width and the viewport's height.

  The column header, if present and visible, gets its preferred
 height and the viewport's width.

  If a vertical scrollbar is needed, i.e. if the viewport's extent
 height is smaller than its view height or if the displayPolicy
 is ALWAYS, it's treated like the row header with respect to its
 dimensions and is made visible.

  If a horizontal scrollbar is needed, it is treated like the
 column header (see the paragraph above regarding the vertical scrollbar).

  If the scrollpane has a non-null
viewportBorder, then space is allocated for that.

  The viewport gets the space available after accounting for
 the previous constraints.

  The corner components, if provided, are aligned with the
 ends of the scrollbars and headers. If there is a vertical
 scrollbar, the right corners appear; if there is a horizontal
 scrollbar, the lower corners appear; a row header gets left
 corners, and a column header gets upper corners.
 

Specified by:
layoutContainer in interface LayoutManager
Parameters:
parent - the Container to lay out


"
110,ScrollPaneLayout,5,void removeLayoutComponent(Component comp),True,Removes the specified component from the layout.,"

removeLayoutComponent
public void removeLayoutComponent(Component c)
Removes the specified component from the layout.

Specified by:
removeLayoutComponent in interface LayoutManager
Parameters:
c - the component to remove


"
111,ScrollPaneLayout.UIResource,1,"void addLayoutComponent(String name, Component comp)",False,,NULL
111,ScrollPaneLayout.UIResource,2,void removeLayoutComponent(Component comp),False,,NULL
111,ScrollPaneLayout.UIResource,3,Dimension preferredLayoutSize(Container parent),False,,NULL
111,ScrollPaneLayout.UIResource,4,Dimension minimumLayoutSize(Container parent),False,,NULL
111,ScrollPaneLayout.UIResource,5,void layoutContainer(Container parent),False,,NULL
112,SizeRequirements,1,int getHeight(),False,,NULL
112,SizeRequirements,2,int getMaximumHeight(),False,,NULL
112,SizeRequirements,3,int getMinimumHeight(),False,,NULL
112,SizeRequirements,4,int getWidth(),False,,NULL
112,SizeRequirements,5,int getMaximumWidth(),False,,NULL
112,SizeRequirements,6,int getMinimumWidth(),False,,NULL
113,SizeSequence,1,boolean add(E e),False,,NULL
113,SizeSequence,2,"void add(int index, E element)",False,,NULL
113,SizeSequence,3,void clear(),False,,NULL
113,SizeSequence,4,boolean contains(Object o),False,,NULL
113,SizeSequence,5,E get(int index),False,,NULL
114,SortingFocusTraversalPolicy,1,SortingFocusTraversalPolicy(Comparator<? super Component> comparator),False,,NULL
114,SortingFocusTraversalPolicy,2,void setComparator(Comparator<? super Component> comparator),True,Sets the Comparator which will be used to sort the Components in a focus traversal cycle.,"

setComparator
protected void setComparator(Comparator<? super Component> comparator)
Sets the Comparator which will be used to sort the Components in a
 focus traversal cycle.

Parameters:
comparator - the Comparator which will be used for sorting


"
114,SortingFocusTraversalPolicy,3,Comparator<? super Component> getComparator(),True,Returns the Comparator which will be used to sort the Components in a focus traversal cycle.,"

getComparator
protected Comparator<? super Component> getComparator()
Returns the Comparator which will be used to sort the Components in a
 focus traversal cycle.

Returns:
the Comparator which will be used for sorting


"
114,SortingFocusTraversalPolicy,4,void sort(List<Component> list),False,,NULL
114,SortingFocusTraversalPolicy,5,void sort(Component[] array),False,,NULL
115,SpinnerDateModel,1,SpinnerDateModel(),False,,NULL
115,SpinnerDateModel,2,void setDate(Date date),False,,NULL
115,SpinnerDateModel,3,Date getDate(),True,Returns the current element in this sequence of Dates.,"

getDate
public Date getDate()
Returns the current element in this sequence of Dates.
 This method is equivalent to (Date)getValue.

Returns:
the value property
See Also:
setValue(java.lang.Object)


"
115,SpinnerDateModel,4,void setCalendarField(int calendarField),True,Changes the size of the date value change computed by the nextValue and previousValue methods.,"

setCalendarField
public void setCalendarField(int calendarField)
Changes the size of the date value change computed
 by the nextValue and previousValue methods.
 The calendarField parameter must be one of the
 Calendar field constants like Calendar.MONTH
 or Calendar.MINUTE.
 The nextValue and previousValue methods
 simply move the specified Calendar field forward or backward
 by one unit with the Calendar.add method.
 You should use this method with care as some UIs may set the
 calendarField before committing the edit to spin the field under
 the cursor. If you only want one field to spin you can subclass
 and ignore the setCalendarField calls.

Parameters:
calendarField - one of
  
Calendar.ERA
Calendar.YEAR
Calendar.MONTH
Calendar.WEEK_OF_YEAR
Calendar.WEEK_OF_MONTH
Calendar.DAY_OF_MONTH
Calendar.DAY_OF_YEAR
Calendar.DAY_OF_WEEK
Calendar.DAY_OF_WEEK_IN_MONTH
Calendar.AM_PM
Calendar.HOUR
Calendar.HOUR_OF_DAY
Calendar.MINUTE
Calendar.SECOND
Calendar.MILLISECOND


 This method fires a ChangeEvent if the
 calendarField has changed.
See Also:
getCalendarField(), 
getNextValue(), 
getPreviousValue(), 
Calendar.add(int, int), 
AbstractSpinnerModel.addChangeListener(javax.swing.event.ChangeListener)


"
115,SpinnerDateModel,5,int getCalendarField(),True,Returns the Calendar field that is added to or subtracted from by the nextValue and previousValue methods.,"

getCalendarField
public int getCalendarField()
Returns the Calendar field that is added to or subtracted from
 by the nextValue and previousValue methods.

Returns:
the value of the calendarField property
See Also:
setCalendarField(int)


"
116,SpinnerListModel,1,SpinnerListModel(),False,,NULL
116,SpinnerListModel,2,void addListDataListener(ListDataListener l),False,,NULL
116,SpinnerListModel,3,void removeListDataListener(ListDataListener l),False,,NULL
116,SpinnerListModel,4,Object getNextValue(),True,Returns the next legal value of the underlying sequence or null if value is already the last element.,"

getNextValue
public Object getNextValue()
Returns the next legal value of the underlying sequence or
 null if value is already the last element.

Specified by:
getNextValue in interface SpinnerModel
Returns:
the next legal value of the underlying sequence or
     null if value is already the last element
See Also:
SpinnerModel.getNextValue(), 
getPreviousValue()


"
116,SpinnerListModel,5,Object getPreviousValue(),True,Returns the previous element of the underlying sequence or null if value is already the first element.,"

getPreviousValue
public Object getPreviousValue()
Returns the previous element of the underlying sequence or
 null if value is already the first element.

Specified by:
getPreviousValue in interface SpinnerModel
Returns:
the previous element of the underlying sequence or
     null if value is already the first element
See Also:
SpinnerModel.getPreviousValue(), 
getNextValue()


"
116,SpinnerListModel,6,Object getSelectedValue(),False,,NULL
116,SpinnerListModel,7,"void setSelectedValue(Object value, boolean updateModel)",False,,NULL
116,SpinnerListModel,8,int getSize(),False,,NULL
116,SpinnerListModel,9,Object getElementAt(int index),False,,NULL
116,SpinnerListModel,10,int getIndexOf(Object obj),False,,NULL
116,SpinnerListModel,11,"void insertElementAt(Object obj, int index)",False,,NULL
116,SpinnerListModel,12,void removeElementAt(int index),False,,NULL
116,SpinnerListModel,13,void setListData(Object[] listData),False,,NULL
116,SpinnerListModel,14,void setListData(List listData),False,,NULL
116,SpinnerListModel,15,void add(Object obj),False,,NULL
116,SpinnerListModel,16,"void add(int index, Object obj)",False,,NULL
116,SpinnerListModel,17,void clear(),False,,NULL
116,SpinnerListModel,18,boolean contains(Object obj),False,,NULL
116,SpinnerListModel,19,Object get(int index),False,,NULL
116,SpinnerListModel,20,int indexOf(Object obj),False,,NULL
116,SpinnerListModel,21,boolean isEmpty(),False,,NULL
116,SpinnerListModel,22,Iterator iterator(),False,,NULL
116,SpinnerListModel,23,Object remove(int index),False,,NULL
116,SpinnerListModel,24,boolean remove(Object obj),False,,NULL
116,SpinnerListModel,25,"Object set(int index, Object element)",False,,NULL
116,SpinnerListModel,26,int size(),False,,NULL
116,SpinnerListModel,27,"List subList(int fromIndex, int toIndex)",False,,NULL
116,SpinnerListModel,28,Object[] toArray(),False,,NULL
116,SpinnerListModel,29,Object[] toArray(Object[] a),False,,NULL
116,SpinnerListModel,30,ListIterator listIterator(),False,,NULL
116,SpinnerListModel,31,ListIterator listIterator(int index),False,,NULL
117,SpinnerNumberModel,1,"SpinnerNumberModel(int value, int minimum, int maximum, int stepSize)",False,,NULL
117,SpinnerNumberModel,2,int getValue(),False,,NULL
117,SpinnerNumberModel,3,void setValue(int value),False,,NULL
117,SpinnerNumberModel,4,int getMinimum(),False,,NULL
117,SpinnerNumberModel,5,int getMaximum(),False,,NULL
117,SpinnerNumberModel,6,int getStepSize(),False,,NULL
117,SpinnerNumberModel,7,void setStepSize(int stepSize),False,,NULL
117,SpinnerNumberModel,8,"void setRange(int minimum, int maximum)",False,,NULL
117,SpinnerNumberModel,9,"void setRange(int minimum, int maximum, int stepSize)",False,,NULL
117,SpinnerNumberModel,10,void addChangeListener(ChangeListener l),False,,NULL
117,SpinnerNumberModel,11,void removeChangeListener(ChangeListener l),False,,NULL
117,SpinnerNumberModel,12,void fireStateChanged(),False,,NULL
117,SpinnerNumberModel,13,void setValueIsAdjusting(boolean b),False,,NULL
117,SpinnerNumberModel,14,boolean getValueIsAdjusting(),False,,NULL
117,SpinnerNumberModel,15,void setExtendRange(boolean b),False,,NULL
117,SpinnerNumberModel,16,boolean getExtendRange(),False,,NULL
117,SpinnerNumberModel,17,void setInteger(boolean b),False,,NULL
117,SpinnerNumberModel,18,boolean getInteger(),False,,NULL
117,SpinnerNumberModel,19,void setFocus(boolean b),False,,NULL
117,SpinnerNumberModel,20,boolean getFocus(),False,,NULL
118,Spring,1,boolean add(E e),False,,NULL
118,Spring,2,"void add(int index, E element)",False,,NULL
118,Spring,3,boolean addAll(Collection<? extends E> c),False,,NULL
118,Spring,4,"boolean addAll(int index, Collection<? extends E> c)",False,,NULL
118,Spring,5,void clear(),False,,NULL
119,SpringLayout,1,"void addLayoutComponent(Component comp, Object constraints)",True,"If constraints is an instance of SpringLayout.Constraints, associates the constraints with the specified component.","

addLayoutComponent
public void addLayoutComponent(Component component,
                               Object constraints)
If constraints is an instance of
 SpringLayout.Constraints,
 associates the constraints with the specified component.
 

Specified by:
addLayoutComponent in interface LayoutManager2
Parameters:
component - the component being added
constraints - the component's constraints
See Also:
SpringLayout.Constraints


"
119,SpringLayout,2,"void addLayoutComponent(String name, Component comp)",True,"Has no effect, since this layout manager does not use a per-component string.","

addLayoutComponent
public void addLayoutComponent(String name,
                               Component c)
Has no effect,
 since this layout manager does not
 use a per-component string.

Specified by:
addLayoutComponent in interface LayoutManager
Parameters:
name - the string to be associated with the component
c - the component to be added


"
119,SpringLayout,3,"void addLayoutComponent(Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,4,"void addLayoutComponent(String name, Component comp, int index)",False,,NULL
119,SpringLayout,5,"void addLayoutComponent(String name, Component comp, Object constraints)",False,,NULL
119,SpringLayout,6,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,7,"void addLayoutComponent(Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,8,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,9,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,10,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,11,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,12,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,13,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,14,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,15,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,16,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,17,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,18,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,19,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,20,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,21,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,22,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,23,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,24,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,25,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,26,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,27,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,28,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,29,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,30,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,31,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,32,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,33,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,34,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,35,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,36,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,37,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,38,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,39,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,40,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,41,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,42,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,43,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,44,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,45,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,46,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,47,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,48,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,49,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,50,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,51,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,52,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,53,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
119,SpringLayout,54,"void addLayoutComponent(String name, Component comp, Object constraints, int index)",False,,NULL
120,SpringLayout.Constraints,1,void setConstraint(int constraint),False,,NULL
120,SpringLayout.Constraints,2,"void setConstraint(int constraint, int value)",False,,NULL
120,SpringLayout.Constraints,3,"void setConstraint(int constraint, int value, int weight)",False,,NULL
120,SpringLayout.Constraints,4,"void setConstraint(int constraint, int value, int weight, int fill)",False,,NULL
120,SpringLayout.Constraints,5,"void setConstraint(int constraint, int value, int weight, int fill, int align)",False,,NULL
121,SwingUtilities,1,void invokeLater(Runnable runnable),True,Causes doRun.run() to be executed asynchronously on the AWT event dispatching thread.,"

invokeLater
public static void invokeLater(Runnable doRun)
Causes doRun.run() to be executed asynchronously on the
 AWT event dispatching thread.  This will happen after all
 pending AWT events have been processed.  This method should
 be used when an application thread needs to update the GUI.
 In the following example the invokeLater call queues
 the Runnable object doHelloWorld
 on the event dispatching thread and
 then prints a message.
 
 Runnable doHelloWorld = new Runnable() {
     public void run() {
         System.out.println(""Hello World on "" + Thread.currentThread());
     }
 };

 SwingUtilities.invokeLater(doHelloWorld);
 System.out.println(""This might well be displayed before the other message."");
 
 If invokeLater is called from the event dispatching thread --
 for example, from a JButton's ActionListener -- the doRun.run() will
 still be deferred until all pending events have been processed.
 Note that if the doRun.run() throws an uncaught exception
 the event dispatching thread will unwind (not the current thread).
 
 Additional documentation and examples for this method can be
 found in
 Concurrency in Swing.
 
 As of 1.3 this method is just a cover for java.awt.EventQueue.invokeLater().
 
 Unlike the rest of Swing, this method can be invoked from any thread.

See Also:
invokeAndWait(java.lang.Runnable)


"
121,SwingUtilities,2,void invokeAndWait(Runnable runnable),True,Causes doRun.run() to be executed synchronously on the AWT event dispatching thread.,"

invokeAndWait
public static void invokeAndWait(Runnable doRun)
                          throws InterruptedException,
                                 InvocationTargetException
Causes doRun.run() to be executed synchronously on the
 AWT event dispatching thread.  This call blocks until
 all pending AWT events have been processed and (then)
 doRun.run() returns. This method should
 be used when an application thread needs to update the GUI.
 It shouldn't be called from the event dispatching thread.
 Here's an example that creates a new application thread
 that uses invokeAndWait to print a string from the event
 dispatching thread and then, when that's finished, print
 a string from the application thread.
 
 final Runnable doHelloWorld = new Runnable() {
     public void run() {
         System.out.println(""Hello World on "" + Thread.currentThread());
     }
 };

 Thread appThread = new Thread() {
     public void run() {
         try {
             SwingUtilities.invokeAndWait(doHelloWorld);
         }
         catch (Exception e) {
             e.printStackTrace();
         }
         System.out.println(""Finished on "" + Thread.currentThread());
     }
 };
 appThread.start();
 
 Note that if the Runnable.run method throws an
 uncaught exception
 (on the event dispatching thread) it's caught and rethrown, as
 an InvocationTargetException, on the caller's thread.
 
 Additional documentation and examples for this method can be
 found in
 Concurrency in Swing.
 
 As of 1.3 this method is just a cover for
 java.awt.EventQueue.invokeAndWait().

Throws:
InterruptedException - if we're interrupted while waiting for
             the event dispatching thread to finish executing
             doRun.run()
InvocationTargetException - if an exception is thrown
             while running doRun
See Also:
invokeLater(java.lang.Runnable)


"
121,SwingUtilities,3,boolean isEventDispatchThread(),True,Returns true if the current thread is an AWT event dispatching thread.,"

isEventDispatchThread
public static boolean isEventDispatchThread()
Returns true if the current thread is an AWT event dispatching thread.
 
 As of 1.3 this method is just a cover for
 java.awt.EventQueue.isDispatchThread().

Returns:
true if the current thread is an AWT event dispatching thread


"
121,SwingUtilities,4,void groupAffinity(Object group),False,,NULL
121,SwingUtilities,5,Object getGroupAffinity(Object group),False,,NULL
122,SwingWorker,1,void execute(),True,Schedules this SwingWorker for execution on a worker thread.,"

execute
public final void execute()
Schedules this SwingWorker for execution on a worker
 thread. There are a number of worker threads available. In the
 event all worker threads are busy handling other
 SwingWorkers this SwingWorker is placed in a waiting
 queue.

 
 Note:
 SwingWorker is only designed to be executed once.  Executing a
 SwingWorker more than once will not result in invoking the
 doInBackground method twice.

"
122,SwingWorker,2,void cancel(boolean mayInterruptIfRunning),False,,NULL
122,SwingWorker,3,boolean isCancelled(),True,Returns true if this task was cancelled before it completed normally.,"

isCancelled
public final boolean isCancelled()
Returns true if this task was cancelled before it completed
 normally.

Specified by:
isCancelled in interface Future<T>
Returns:
true if this task was cancelled before it completed


"
122,SwingWorker,4,boolean isDone(),True,Returns true if this task completed.,"

isDone
public final boolean isDone()
Returns true if this task completed.

 Completion may be due to normal termination, an exception, or
 cancellation -- in all of these cases, this method will return
 true.

Specified by:
isDone in interface Future<T>
Returns:
true if this task completed


"
122,SwingWorker,5,V get(),False,,NULL
123,Timer,1,"Timer(int delay, ActionListener listener)",False,,NULL
123,Timer,2,void start(),True,"Starts the Timer, causing it to start sending action events to its listeners.","

start
public void start()
Starts the Timer,
 causing it to start sending action events
 to its listeners.

See Also:
stop()


"
123,Timer,3,void stop(),True,"Stops the Timer, causing it to stop sending action events to its listeners.","

stop
public void stop()
Stops the Timer,
 causing it to stop sending action events
 to its listeners.

See Also:
start()


"
123,Timer,4,void setDelay(int delay),True,"Sets the Timer's between-event delay, the number of milliseconds between successive action events.","

setDelay
public void setDelay(int delay)
Sets the Timer's between-event delay, the number of milliseconds
 between successive action events. This does not affect the initial delay
 property, which can be set by the setInitialDelay method.

Parameters:
delay - the delay in milliseconds
See Also:
setInitialDelay(int)


"
123,Timer,5,void setInitialDelay(int delay),True,"Sets the Timer's initial delay, the time in milliseconds to wait after the timer is started before firing the first event.","

setInitialDelay
public void setInitialDelay(int initialDelay)
Sets the Timer's initial delay, the time
 in milliseconds to wait after the timer is started
 before firing the first event. Upon construction, this
 is set to be the same as the between-event delay,
 but then its value is independent and remains unaffected
 by changes to the between-event delay.

Parameters:
initialDelay - the initial delay, in milliseconds
See Also:
setDelay(int)


"
124,ToolTipManager,1,void setLightWeightPopupEnabled(boolean b),True,"When displaying the JToolTip, the ToolTipManager chooses to use a lightweight JPanel if it fits.","

setLightWeightPopupEnabled
public void setLightWeightPopupEnabled(boolean aFlag)
When displaying the JToolTip, the
 ToolTipManager chooses to use a lightweight
 JPanel if it fits. This method allows you to
 disable this feature. You have to do disable it if your
 application mixes light weight and heavy weights components.

Parameters:
aFlag - true if a lightweight panel is desired, false otherwise


"
124,ToolTipManager,2,boolean isLightWeightPopupEnabled(),True,"Returns true if lightweight (all-Java) Tooltips are in use, or false if heavyweight (native peer) Tooltips are being used.","

isLightWeightPopupEnabled
public boolean isLightWeightPopupEnabled()
Returns true if lightweight (all-Java) Tooltips
 are in use, or false if heavyweight (native peer)
 Tooltips are being used.

Returns:
true if lightweight ToolTips are in use


"
124,ToolTipManager,3,void setDismissDelay(int delay),True,Specifies the dismissal delay value.,"

setDismissDelay
public void setDismissDelay(int milliseconds)
Specifies the dismissal delay value.

Parameters:
milliseconds - the number of milliseconds to delay
        before taking away the tooltip
See Also:
getDismissDelay()


"
124,ToolTipManager,4,int getDismissDelay(),True,Returns the dismissal delay value.,"

getDismissDelay
public int getDismissDelay()
Returns the dismissal delay value.

Returns:
an integer representing the dismissal delay value,
          in milliseconds
See Also:
setDismissDelay(int)


"
124,ToolTipManager,5,void setInitialDelay(int delay),True,Specifies the initial delay value.,"

setInitialDelay
public void setInitialDelay(int milliseconds)
Specifies the initial delay value.

Parameters:
milliseconds - the number of milliseconds to delay
        (after the cursor has paused) before displaying the
        tooltip
See Also:
getInitialDelay()


"
125,TransferHandler,1,boolean canImport(TransferSupport support),False,,NULL
125,TransferHandler,2,boolean importData(TransferSupport support),False,,NULL
125,TransferHandler,3,boolean canExport(TransferSupport support),False,,NULL
125,TransferHandler,4,"boolean exportAsFile(JComponent c, File file, int action)",False,,NULL
125,TransferHandler,5,"void exportToClipboard(JComponent c, Clipboard clipboard, int action)",True,Causes a transfer from the given component to the given clipboard.,"

exportToClipboard
public void exportToClipboard(JComponent comp,
                              Clipboard clip,
                              int action)
                       throws IllegalStateException
Causes a transfer from the given component to the
 given clipboard.  This method is called by the default cut and
 copy actions registered in a component's action map.
 
 The transfer will take place using the java.awt.datatransfer
 mechanism, requiring no further effort from the developer. Any data
 transfer will be complete and the exportDone
 method will be called with the action that occurred, before this method
 returns. Should the clipboard be unavailable when attempting to place
 data on it, the IllegalStateException thrown by
 Clipboard.setContents(Transferable, ClipboardOwner) will
 be propagated through this method. However,
 exportDone will first be called with an action
 of NONE for consistency.

Parameters:
comp - the component holding the data to be transferred;
              provided to enable sharing of TransferHandlers
clip - the clipboard to transfer the data into
action - the transfer action requested; this should
  be a value of either COPY or MOVE;
  the operation performed is the intersection  of the transfer
  capabilities given by getSourceActions and the requested action;
  the intersection may result in an action of NONE
  if the requested action isn't supported
Throws:
IllegalStateException - if the clipboard is currently unavailable
See Also:
Clipboard.setContents(Transferable, ClipboardOwner)


"
126,TransferHandler.DropLocation,1,int getDropLocation(),False,,NULL
126,TransferHandler.DropLocation,2,int getInsertPosition(),False,,NULL
126,TransferHandler.DropLocation,3,int getDropOperation(),False,,NULL
126,TransferHandler.DropLocation,4,boolean isInsert(),False,,NULL
126,TransferHandler.DropLocation,5,boolean isMove(),False,,NULL
127,TransferHandler.TransferSupport,1,boolean canImport(TransferHandler.TransferSupport support),False,,NULL
127,TransferHandler.TransferSupport,2,boolean canExport(TransferHandler.TransferSupport support),False,,NULL
127,TransferHandler.TransferSupport,3,"void exportToClipboard(JComponent comp, Clipboard clipboard, Transferable t)",False,,NULL
127,TransferHandler.TransferSupport,4,Transferable importData(TransferHandler.TransferSupport support),False,,NULL
127,TransferHandler.TransferSupport,5,"void exportDone(JComponent comp, Transferable t, int action)",False,,NULL
127,TransferHandler.TransferSupport,6,void importData(TransferHandler.TransferSupport support),False,,NULL
127,TransferHandler.TransferSupport,7,void drop(TransferHandler.TransferSupport support),False,,NULL
127,TransferHandler.TransferSupport,8,"void exportToDragboard(JComponent comp, DragSource ds, int action)",False,,NULL
127,TransferHandler.TransferSupport,9,void importFromDragboard(TransferHandler.TransferSupport support),False,,NULL
127,TransferHandler.TransferSupport,10,void drop(TransferHandler.TransferSupport support),False,,NULL
127,TransferHandler.TransferSupport,11,"void exportToClipboard(JComponent comp, Clipboard clipboard, Transferable t)",False,,NULL
127,TransferHandler.TransferSupport,12,void importData(TransferHandler.TransferSupport support),False,,NULL
127,TransferHandler.TransferSupport,13,"void exportDone(JComponent comp, Transferable t, int action)",False,,NULL
127,TransferHandler.TransferSupport,14,void importData(TransferHandler.TransferSupport support),False,,NULL
127,TransferHandler.TransferSupport,15,void drop(TransferHandler.TransferSupport support),False,,NULL
128,UIDefaults,1,"void put(Object key, Object value)",False,,NULL
128,UIDefaults,2,Object get(Object key),True,Returns the value for key.,"

get
public Object get(Object key)
Returns the value for key.  If the value is a
 UIDefaults.LazyValue then the real
 value is computed with LazyValue.createValue(),
 the table entry is replaced, and the real value is returned.
 If the value is an UIDefaults.ActiveValue
 the table entry is not replaced - the value is computed
 with ActiveValue.createValue() for each
 get() call.

 If the key is not found in the table then it is searched for in the list
 of resource bundles maintained by this object.  The resource bundles are
 searched most recently added first using the locale returned by
 getDefaultLocale.  LazyValues and
 ActiveValues are not supported in the resource bundles.

Specified by:
get in interface Map<Object,Object>
Overrides:
get in class Hashtable<Object,Object>
Parameters:
key - the desired key
Returns:
the value for key
Since:
1.4
See Also:
UIDefaults.LazyValue, 
UIDefaults.ActiveValue, 
Hashtable.get(java.lang.Object), 
getDefaultLocale(), 
addResourceBundle(java.lang.String)


"
128,UIDefaults,3,Enumeration keys(),False,,NULL
128,UIDefaults,4,void remove(Object key),False,,NULL
128,UIDefaults,5,void clear(),False,,NULL
129,UIDefaults.LazyInputMap,1,boolean add(E e),False,,NULL
129,UIDefaults.LazyInputMap,2,"void add(int index, E element)",False,,NULL
129,UIDefaults.LazyInputMap,3,boolean addAll(Collection<? extends E> c),False,,NULL
129,UIDefaults.LazyInputMap,4,"boolean addAll(int index, Collection<? extends E> c)",False,,NULL
129,UIDefaults.LazyInputMap,5,void clear(),False,,NULL
130,UIDefaults.ProxyLazyValue,1,boolean isLoaded(),False,,NULL
130,UIDefaults.ProxyLazyValue,2,Object get(),False,,NULL
130,UIDefaults.ProxyLazyValue,3,void set(Object value),False,,NULL
130,UIDefaults.ProxyLazyValue,4,void unload(),False,,NULL
130,UIDefaults.ProxyLazyValue,5,Object clone(),False,,NULL
131,UIManager,1,void setLookAndFeel(String className),True,"Loads the LookAndFeel specified by the given class name, using the current thread's context class loader, and passes it to setLookAndFeel(LookAndFeel).","

setLookAndFeel
public static void setLookAndFeel(String className)
                           throws ClassNotFoundException,
                                  InstantiationException,
                                  IllegalAccessException,
                                  UnsupportedLookAndFeelException
Loads the LookAndFeel specified by the given class
 name, using the current thread's context class loader, and
 passes it to setLookAndFeel(LookAndFeel).

Parameters:
className - a string specifying the name of the class that implements
        the look and feel
Throws:
ClassNotFoundException - if the LookAndFeel
           class could not be found
InstantiationException - if a new instance of the class
          couldn't be created
IllegalAccessException - if the class or initializer isn't accessible
UnsupportedLookAndFeelException - if
          lnf.isSupportedLookAndFeel() is false
ClassCastException - if className does not identify
         a class that extends LookAndFeel


"
131,UIManager,2,String getDefaults().get(String key),False,,NULL
131,UIManager,3,void addPropertyChangeListener(PropertyChangeListener listener),True,Adds a PropertyChangeListener to the listener list.,"

addPropertyChangeListener
public static void addPropertyChangeListener(PropertyChangeListener listener)
Adds a PropertyChangeListener to the listener list.
 The listener is registered for all properties.

Parameters:
listener - the PropertyChangeListener to be added
See Also:
PropertyChangeSupport


"
131,UIManager,4,void updateComponentTreeUI(Container root),False,,NULL
131,UIManager,5,"void setLookAndFeel(String className, ClassLoader classLoader)",False,,NULL
132,UIManager.LookAndFeelInfo,1,String getName(),True,Returns the name of the look and feel in a form suitable for a menu or other presentation,"

getName
public String getName()
Returns the name of the look and feel in a form suitable
 for a menu or other presentation

Returns:
a String containing the name
See Also:
LookAndFeel.getName()


"
132,UIManager.LookAndFeelInfo,2,String getClassName(),True,Returns the name of the class that implements this look and feel.,"

getClassName
public String getClassName()
Returns the name of the class that implements this look and feel.

Returns:
the name of the class that implements this
              LookAndFeel
See Also:
LookAndFeel


"
132,UIManager.LookAndFeelInfo,3,String getStyle(),False,,NULL
132,UIManager.LookAndFeelInfo,4,String getHierarchy(),False,,NULL
132,UIManager.LookAndFeelInfo,5,String getID(),False,,NULL
133,ViewportLayout,1,"void addLayoutComponent(String name, Component comp)",True,Adds the specified component to the layout.,"

addLayoutComponent
public void addLayoutComponent(String name,
                               Component c)
Adds the specified component to the layout. Not used by this class.

Specified by:
addLayoutComponent in interface LayoutManager
Parameters:
name - the name of the component
c - the the component to be added


"
133,ViewportLayout,2,"void addLayoutComponent(Component comp, Object constraints)",False,,NULL
133,ViewportLayout,3,"void addLayoutComponent(String name, Component comp, int index)",False,,NULL
133,ViewportLayout,4,"void addLayoutComponent(Component comp, Object constraints, int index)",False,,NULL
133,ViewportLayout,5,void removeLayoutComponent(Component comp),True,Removes the specified component from the layout.,"

removeLayoutComponent
public void removeLayoutComponent(Component c)
Removes the specified component from the layout. Not used by
 this class.

Specified by:
removeLayoutComponent in interface LayoutManager
Parameters:
c - the component to remove


"
