ClassName,Method,Return Type,Description,Full Description
DragGestureEvent,getComponent(),Component,Returns the Component associated with this DragGestureEvent.,"

getComponent
public Component getComponent()
Returns the Component associated
 with this DragGestureEvent.
 

Returns:
the Component


"
DragGestureEvent,getDragAction(),int,Returns an int representing the action selected by the user.,"

getDragAction
public int getDragAction()
Returns an int representing the
 action selected by the user.
 

Returns:
the action selected by the user


"
DragGestureEvent,getDragOrigin(),Point,Returns a Point in the coordinates of the Component over which the drag originated.,"

getDragOrigin
public Point getDragOrigin()
Returns a Point in the coordinates
 of the Component over which the drag originated.
 

Returns:
the Point where the drag originated in Component coords.


"
DragGestureEvent,getDragSource(),DragSource,Returns the DragSource.,"

getDragSource
public DragSource getDragSource()
Returns the DragSource.
 

Returns:
the DragSource


"
DragGestureEvent,getSourceAsDragGestureRecognizer(),DragGestureRecognizer,Returns the source as a DragGestureRecognizer.,"

getSourceAsDragGestureRecognizer
public DragGestureRecognizer getSourceAsDragGestureRecognizer()
Returns the source as a DragGestureRecognizer.
 

Returns:
the source as a DragGestureRecognizer


"
DragGestureEvent,getTriggerEvent(),InputEvent,Returns the initial event that triggered the gesture.,"

getTriggerEvent
public InputEvent getTriggerEvent()
Returns the initial event that triggered the gesture.
 

Returns:
the first ""triggering"" event in the sequence of the gesture


"
DragGestureEvent,iterator(),Iterator<InputEvent>,Returns an Iterator for the events comprising the gesture.,"

iterator
public Iterator<InputEvent> iterator()
Returns an Iterator for the events
 comprising the gesture.
 

Returns:
an Iterator for the events comprising the gesture


"
DragGestureEvent,"startDrag(Cursor dragCursor, Image dragImage, Point imageOffset, Transferable transferable, DragSourceListener dsl)",void,"Start the drag given the initial Cursor to display, a drag Image, the offset of the Image, the Transferable object, and the DragSourceListener to use.","

startDrag
public void startDrag(Cursor dragCursor,
                      Image dragImage,
                      Point imageOffset,
                      Transferable transferable,
                      DragSourceListener dsl)
               throws InvalidDnDOperationException
Start the drag given the initial Cursor to display,
 a drag Image, the offset of
 the Image,
 the Transferable object, and
 the DragSourceListener to use.
 

Parameters:
dragCursor - The initial Cursor for this drag operation
                       or null for the default cursor handling;
                       see
                       DragSourceContext
                       for more details on the cursor handling mechanism
                       during drag and drop
dragImage - The source's dragImage
imageOffset - The dragImage's offset
transferable - The source's Transferable
dsl - The source's DragSourceListener
 
Throws:
InvalidDnDOperationException - if
 the Drag and Drop system is unable to
 initiate a drag operation, or if the user
 attempts to start a drag while an existing
 drag operation is still executing.


"
DragGestureEvent,"startDrag(Cursor dragCursor, Transferable transferable)",void,Starts the drag operation given the Cursor for this drag operation and the Transferable representing the source data for this drag operation.,"

startDrag
public void startDrag(Cursor dragCursor,
                      Transferable transferable)
               throws InvalidDnDOperationException
Starts the drag operation given the Cursor for this drag
 operation and the Transferable representing the source data
 for this drag operation.
 
 If a null Cursor is specified no exception will
 be thrown and default drag cursors will be used instead.
 
 If a null Transferable is specified
 NullPointerException will be thrown.

Parameters:
dragCursor - The initial Cursor for this drag operation
                       or null for the default cursor handling;
                       see
                       DragSourceContext
                       for more details on the cursor handling mechanism
                       during drag and drop
transferable - The Transferable representing the source
                     data for this drag operation.
Throws:
InvalidDnDOperationException - if the Drag and Drop
         system is unable to initiate a drag operation, or if the user
         attempts to start a drag while an existing drag operation is
         still executing.
NullPointerException - if the Transferable is null
Since:
1.4


"
DragGestureEvent,"startDrag(Cursor dragCursor, Transferable transferable, DragSourceListener dsl)",void,"Starts the drag given the initial Cursor to display, the Transferable object, and the DragSourceListener to use.","

startDrag
public void startDrag(Cursor dragCursor,
                      Transferable transferable,
                      DragSourceListener dsl)
               throws InvalidDnDOperationException
Starts the drag given the initial Cursor to display,
 the Transferable object,
 and the DragSourceListener to use.
 

Parameters:
dragCursor - The initial Cursor for this drag operation
                       or null for the default cursor handling;
                       see
                       DragSourceContext
                       for more details on the cursor handling mechanism
                       during drag and drop
transferable - The source's Transferable
dsl - The source's DragSourceListener
 
Throws:
InvalidDnDOperationException - if
 the Drag and Drop system is unable to
 initiate a drag operation, or if the user
 attempts to start a drag while an existing
 drag operation is still executing.


"
DragGestureEvent,toArray(),Object[],Returns an Object array of the events comprising the drag gesture.,"

toArray
public Object[] toArray()
Returns an Object array of the
 events comprising the drag gesture.
 

Returns:
an array of the events comprising the gesture


"
DragGestureEvent,toArray(Object[] array),Object[],Returns an array of the events comprising the drag gesture.,"

toArray
public Object[] toArray(Object[] array)
Returns an array of the events comprising the drag gesture.
 

Parameters:
array - the array of EventObject sub(types)
 
Returns:
an array of the events comprising the gesture


"
DragGestureRecognizer,addDragGestureListener(DragGestureListener dgl),void,Register a new DragGestureListener.,"

addDragGestureListener
public void addDragGestureListener(DragGestureListener dgl)
                            throws TooManyListenersException
Register a new DragGestureListener.
 

Parameters:
dgl - the DragGestureListener to register
 with this DragGestureRecognizer.
 
Throws:
TooManyListenersException - if a
 DragGestureListener has already been added.


"
DragGestureRecognizer,appendEvent(InputEvent awtie),protected void,Listeners registered on the Component by this Recognizer shall record all Events that are recognized as part of the series of Events that go to comprise a Drag and Drop initiating gesture via this API.,"

appendEvent
protected void appendEvent(InputEvent awtie)
Listeners registered on the Component by this Recognizer shall record
 all Events that are recognized as part of the series of Events that go
 to comprise a Drag and Drop initiating gesture via this API.

 This method is used by a DragGestureRecognizer
 implementation to add an InputEvent
 subclass (that it believes is one in a series
 of events that comprise a Drag and Drop operation)
 to the array of events that this
 DragGestureRecognizer maintains internally.
 

Parameters:
awtie - the InputEvent
 to add to this DragGestureRecognizer's
 internal array of events. Note that null
 is not a valid value, and will be ignored.


"
DragGestureRecognizer,"fireDragGestureRecognized(int dragAction, Point p)",protected void,Notify the DragGestureListener that a Drag and Drop initiating gesture has occurred.,"

fireDragGestureRecognized
protected void fireDragGestureRecognized(int dragAction,
                                         Point p)
Notify the DragGestureListener that a Drag and Drop initiating
 gesture has occurred. Then reset the state of the Recognizer.
 

Parameters:
dragAction - The action initially selected by the users gesture
p - The point (in Component coords) where the gesture originated


"
DragGestureRecognizer,getComponent(),Component,"This method returns the Component that is to be ""observed"" by the DragGestureRecognizer for drag initiating gestures.","

getComponent
public Component getComponent()
This method returns the Component
 that is to be ""observed"" by the
 DragGestureRecognizer
 for drag initiating gestures.
 

Returns:
The Component this DragGestureRecognizer
 is associated with


"
DragGestureRecognizer,getDragSource(),DragSource,This method returns the DragSource this DragGestureRecognizer will use in order to process the Drag and Drop operation.,"

getDragSource
public DragSource getDragSource()
This method returns the DragSource
 this DragGestureRecognizer
 will use in order to process the Drag and Drop
 operation.
 

Returns:
the DragSource


"
DragGestureRecognizer,getSourceActions(),int,This method returns an int representing the type of action(s) this Drag and Drop operation will support.,"

getSourceActions
public int getSourceActions()
This method returns an int representing the
 type of action(s) this Drag and Drop
 operation will support.
 

Returns:
the currently permitted source action(s)


"
DragGestureRecognizer,getTriggerEvent(),InputEvent,This method returns the first event in the series of events that initiated the Drag and Drop operation.,"

getTriggerEvent
public InputEvent getTriggerEvent()
This method returns the first event in the
 series of events that initiated
 the Drag and Drop operation.
 

Returns:
the initial event that triggered the drag gesture


"
DragGestureRecognizer,registerListeners(),protected abstract void,register this DragGestureRecognizer's Listeners with the Component subclasses must override this method,"

registerListeners
protected abstract void registerListeners()
register this DragGestureRecognizer's Listeners with the Component

 subclasses must override this method

"
DragGestureRecognizer,removeDragGestureListener(DragGestureListener dgl),void,unregister the current DragGestureListener,"

removeDragGestureListener
public void removeDragGestureListener(DragGestureListener dgl)
unregister the current DragGestureListener
 

Parameters:
dgl - the DragGestureListener to unregister
 from this DragGestureRecognizer

Throws:
IllegalArgumentException - if
 dgl is not (equal to) the currently registered DragGestureListener.


"
DragGestureRecognizer,resetRecognizer(),void,"Reset the Recognizer, if its currently recognizing a gesture, ignore it.","

resetRecognizer
public void resetRecognizer()
Reset the Recognizer, if its currently recognizing a gesture, ignore
 it.

"
DragGestureRecognizer,setComponent(Component c),void,set the Component that the DragGestureRecognizer is associated with registerListeners() and unregisterListeners() are called as a side effect as appropriate.,"

setComponent
public void setComponent(Component c)
set the Component that the DragGestureRecognizer is associated with

 registerListeners() and unregisterListeners() are called as a side
 effect as appropriate.
 

Parameters:
c - The Component or null


"
DragGestureRecognizer,setSourceActions(int actions),void,This method sets the permitted source drag action(s) for this Drag and Drop operation.,"

setSourceActions
public void setSourceActions(int actions)
This method sets the permitted source drag action(s)
 for this Drag and Drop operation.
 

Parameters:
actions - the permitted source drag action(s)


"
DragGestureRecognizer,unregisterListeners(),protected abstract void,unregister this DragGestureRecognizer's Listeners with the Component subclasses must override this method,"

unregisterListeners
protected abstract void unregisterListeners()
unregister this DragGestureRecognizer's Listeners with the Component

 subclasses must override this method

"
DragSource,addDragSourceListener(DragSourceListener dsl),void,Adds the specified DragSourceListener to this DragSource to receive drag source events during drag operations intiated with this DragSource.,"

addDragSourceListener
public void addDragSourceListener(DragSourceListener dsl)
Adds the specified DragSourceListener to this
 DragSource to receive drag source events during drag
 operations intiated with this DragSource.
 If a null listener is specified, no action is taken and no
 exception is thrown.

Parameters:
dsl - the DragSourceListener to add
Since:
1.4
See Also:
removeDragSourceListener(java.awt.dnd.DragSourceListener), 
getDragSourceListeners()


"
DragSource,addDragSourceMotionListener(DragSourceMotionListener dsml),void,Adds the specified DragSourceMotionListener to this DragSource to receive drag motion events during drag operations intiated with this DragSource.,"

addDragSourceMotionListener
public void addDragSourceMotionListener(DragSourceMotionListener dsml)
Adds the specified DragSourceMotionListener to this
 DragSource to receive drag motion events during drag
 operations intiated with this DragSource.
 If a null listener is specified, no action is taken and no
 exception is thrown.

Parameters:
dsml - the DragSourceMotionListener to add
Since:
1.4
See Also:
removeDragSourceMotionListener(java.awt.dnd.DragSourceMotionListener), 
getDragSourceMotionListeners()


"
DragSource,"createDefaultDragGestureRecognizer(Component c, int actions, DragGestureListener dgl)",DragGestureRecognizer,"Creates a new DragGestureRecognizer that implements the default abstract subclass of DragGestureRecognizer for this DragSource, and sets the specified Component and DragGestureListener on the newly created object.","

createDefaultDragGestureRecognizer
public DragGestureRecognizer createDefaultDragGestureRecognizer(Component c,
                                                                int actions,
                                                                DragGestureListener dgl)
Creates a new DragGestureRecognizer
 that implements the default
 abstract subclass of DragGestureRecognizer
 for this DragSource,
 and sets the specified Component
 and DragGestureListener on the
 newly created object.

 For this DragSource
 the default is MouseDragGestureRecognizer.
 

Parameters:
c - the Component target for the recognizer
actions - the permitted source actions
dgl - the DragGestureListener to notify
 
Returns:
the new DragGestureRecognizer or null
    if the Toolkit.createDragGestureRecognizer method
    has no implementation available for
    the requested DragGestureRecognizer
    subclass and returns null


"
DragSource,"createDragGestureRecognizer(Class<T> recognizerAbstractClass, Component c, int actions, DragGestureListener dgl)",<T extends DragGestureRecognizer> T,"Creates a new DragGestureRecognizer that implements the specified abstract subclass of DragGestureRecognizer, and sets the specified Component and DragGestureListener on the newly created object.","

createDragGestureRecognizer
public <T extends DragGestureRecognizer> T createDragGestureRecognizer(Class<T> recognizerAbstractClass,
                                                                       Component c,
                                                                       int actions,
                                                                       DragGestureListener dgl)
Creates a new DragGestureRecognizer
 that implements the specified
 abstract subclass of
 DragGestureRecognizer, and
 sets the specified Component
 and DragGestureListener on
 the newly created object.
 

Parameters:
recognizerAbstractClass - the requested abstract type
actions - the permitted source drag actions
c - the Component target
dgl - the DragGestureListener to notify
 
Returns:
the new DragGestureRecognizer or null
    if the Toolkit.createDragGestureRecognizer method
    has no implementation available for
    the requested DragGestureRecognizer
    subclass and returns null


"
DragSource,"createDragSourceContext(java.awt.dnd.peer.DragSourceContextPeer dscp, DragGestureEvent dgl, Cursor dragCursor, Image dragImage, Point imageOffset, Transferable t, DragSourceListener dsl)",protected DragSourceContext,Creates the DragSourceContext to handle the current drag operation.,"

createDragSourceContext
protected DragSourceContext createDragSourceContext(java.awt.dnd.peer.DragSourceContextPeer dscp,
                                                    DragGestureEvent dgl,
                                                    Cursor dragCursor,
                                                    Image dragImage,
                                                    Point imageOffset,
                                                    Transferable t,
                                                    DragSourceListener dsl)
Creates the DragSourceContext to handle the current drag
 operation.
 
 To incorporate a new DragSourceContext
 subclass, subclass DragSource and
 override this method.
 
 If dragImage is null, no image is used
 to represent the drag over feedback for this drag operation, but
 NullPointerException is not thrown.
 
 If dsl is null, no drag source listener
 is registered with the created DragSourceContext,
 but NullPointerException is not thrown.

Parameters:
dscp - The DragSourceContextPeer for this drag
dgl - The DragGestureEvent that triggered the
                      drag
dragCursor - The initial Cursor for this drag operation
                       or null for the default cursor handling;
                       see DragSourceContext class
                       for more details on the cursor handling mechanism during drag and drop
dragImage - The Image to drag or null
imageOffset - The offset of the Image origin from the
                      hotspot of the cursor at the instant of the trigger
t - The subject data of the drag
dsl - The DragSourceListener
Returns:
the DragSourceContext
Throws:
NullPointerException - if dscp is null
NullPointerException - if dgl is null
NullPointerException - if dragImage is not
    null and imageOffset is null
NullPointerException - if t is null
IllegalArgumentException - if the Component
         associated with the trigger event is null.
IllegalArgumentException - if the DragSource for the
         trigger event is null.
IllegalArgumentException - if the drag action for the
         trigger event is DnDConstants.ACTION_NONE.
IllegalArgumentException - if the source actions for the
         DragGestureRecognizer associated with the trigger
         event are equal to DnDConstants.ACTION_NONE.


"
DragSource,getDefaultDragSource(),static DragSource,Gets the DragSource object associated with the underlying platform.,"

getDefaultDragSource
public static DragSource getDefaultDragSource()
Gets the DragSource object associated with
 the underlying platform.

Returns:
the platform DragSource
Throws:
HeadlessException - if GraphicsEnvironment.isHeadless()
            returns true
See Also:
GraphicsEnvironment.isHeadless()


"
DragSource,getDragSourceListeners(),DragSourceListener[],Gets all the DragSourceListeners registered with this DragSource.,"

getDragSourceListeners
public DragSourceListener[] getDragSourceListeners()
Gets all the DragSourceListeners
 registered with this DragSource.

Returns:
all of this DragSource's
         DragSourceListeners or an empty array if no
         such listeners are currently registered
Since:
1.4
See Also:
addDragSourceListener(java.awt.dnd.DragSourceListener), 
removeDragSourceListener(java.awt.dnd.DragSourceListener)


"
DragSource,getDragSourceMotionListeners(),DragSourceMotionListener[],Gets all of the DragSourceMotionListeners registered with this DragSource.,"

getDragSourceMotionListeners
public DragSourceMotionListener[] getDragSourceMotionListeners()
Gets all of the  DragSourceMotionListeners
 registered with this DragSource.

Returns:
all of this DragSource's
         DragSourceMotionListeners or an empty array if no
         such listeners are currently registered
Since:
1.4
See Also:
addDragSourceMotionListener(java.awt.dnd.DragSourceMotionListener), 
removeDragSourceMotionListener(java.awt.dnd.DragSourceMotionListener)


"
DragSource,getDragThreshold(),static int,Returns the drag gesture motion threshold.,"

getDragThreshold
public static int getDragThreshold()
Returns the drag gesture motion threshold. The drag gesture motion threshold
 defines the recommended behavior for MouseDragGestureRecognizers.
 
 If the system property awt.dnd.drag.threshold is set to
 a positive integer, this method returns the value of the system property;
 otherwise if a pertinent desktop property is available and supported by
 the implementation of the Java platform, this method returns the value of
 that property; otherwise this method returns some default value.
 The pertinent desktop property can be queried using
 java.awt.Toolkit.getDesktopProperty(""DnD.gestureMotionThreshold"").

Returns:
the drag gesture motion threshold
Since:
1.5
See Also:
MouseDragGestureRecognizer


"
DragSource,getFlavorMap(),FlavorMap,This method returns the FlavorMap for this DragSource.,"

getFlavorMap
public FlavorMap getFlavorMap()
This method returns the
 FlavorMap for this DragSource.
 

Returns:
the FlavorMap for this DragSource


"
DragSource,getListeners(Class<T> listenerType),<T extends EventListener> T[],Gets all the objects currently registered as FooListeners upon this DragSource.,"

getListeners
public <T extends EventListener> T[] getListeners(Class<T> listenerType)
Gets all the objects currently registered as
 FooListeners upon this DragSource.
 FooListeners are registered using the
 addFooListener method.

Parameters:
listenerType - the type of listeners requested; this parameter
          should specify an interface that descends from
          java.util.EventListener
Returns:
an array of all objects registered as
          FooListeners on this
          DragSource, or an empty array if no such listeners
          have been added
Throws:
ClassCastException - if listenerType
          doesn't specify a class or interface that implements
          java.util.EventListener
Since:
1.4
See Also:
getDragSourceListeners(), 
getDragSourceMotionListeners()


"
DragSource,isDragImageSupported(),static boolean,Reports whether or not drag Image support is available on the underlying platform.,"

isDragImageSupported
public static boolean isDragImageSupported()
Reports
 whether or not drag
 Image support
 is available on the underlying platform.
 

Returns:
if the Drag Image support is available on this platform


"
DragSource,removeDragSourceListener(DragSourceListener dsl),void,Removes the specified DragSourceListener from this DragSource.,"

removeDragSourceListener
public void removeDragSourceListener(DragSourceListener dsl)
Removes the specified DragSourceListener from this
 DragSource.
 If a null listener is specified, no action is taken and no
 exception is thrown.
 If the listener specified by the argument was not previously added to
 this DragSource, no action is taken and no exception
 is thrown.

Parameters:
dsl - the DragSourceListener to remove
Since:
1.4
See Also:
addDragSourceListener(java.awt.dnd.DragSourceListener), 
getDragSourceListeners()


"
DragSource,removeDragSourceMotionListener(DragSourceMotionListener dsml),void,Removes the specified DragSourceMotionListener from this DragSource.,"

removeDragSourceMotionListener
public void removeDragSourceMotionListener(DragSourceMotionListener dsml)
Removes the specified DragSourceMotionListener from this
 DragSource.
 If a null listener is specified, no action is taken and no
 exception is thrown.
 If the listener specified by the argument was not previously added to
 this DragSource, no action is taken and no exception
 is thrown.

Parameters:
dsml - the DragSourceMotionListener to remove
Since:
1.4
See Also:
addDragSourceMotionListener(java.awt.dnd.DragSourceMotionListener), 
getDragSourceMotionListeners()


"
DragSource,"startDrag(DragGestureEvent trigger, Cursor dragCursor, Image dragImage, Point dragOffset, Transferable transferable, DragSourceListener dsl)",void,"Start a drag, given the DragGestureEvent that initiated the drag, the initial Cursor to use, the Image to drag, the offset of the Image origin from the hotspot of the Cursor at the instant of the trigger, the subject data of the drag, and the DragSourceListener.","

startDrag
public void startDrag(DragGestureEvent trigger,
                      Cursor dragCursor,
                      Image dragImage,
                      Point dragOffset,
                      Transferable transferable,
                      DragSourceListener dsl)
               throws InvalidDnDOperationException
Start a drag, given the DragGestureEvent
 that initiated the drag, the initial Cursor
 to use,
 the Image to drag,
 the offset of the Image origin
 from the hotspot of the Cursor
 at the instant of the trigger,
 the subject data of the drag, and
 the DragSourceListener.
 

Parameters:
trigger - the DragGestureEvent that initiated the drag
dragCursor - the initial Cursor for this drag operation
                       or null for the default cursor handling;
                       see DragSourceContext
                       for more details on the cursor handling mechanism during drag and drop
dragImage - the Image to drag or null
dragOffset - the offset of the Image origin from the hotspot
                          of the Cursor at the instant of the trigger
transferable - the subject data of the drag
dsl - the DragSourceListener

Throws:
InvalidDnDOperationException - if the Drag and Drop
    system is unable to initiate a drag operation, or if the user
    attempts to start a drag while an existing drag operation
    is still executing


"
DragSource,"startDrag(DragGestureEvent trigger, Cursor dragCursor, Image dragImage, Point imageOffset, Transferable transferable, DragSourceListener dsl, FlavorMap flavorMap)",void,"Start a drag, given the DragGestureEvent that initiated the drag, the initial Cursor to use, the Image to drag, the offset of the Image origin from the hotspot of the Cursor at the instant of the trigger, the Transferable subject data of the drag, the DragSourceListener, and the FlavorMap.","

startDrag
public void startDrag(DragGestureEvent trigger,
                      Cursor dragCursor,
                      Image dragImage,
                      Point imageOffset,
                      Transferable transferable,
                      DragSourceListener dsl,
                      FlavorMap flavorMap)
               throws InvalidDnDOperationException
Start a drag, given the DragGestureEvent
 that initiated the drag, the initial
 Cursor to use,
 the Image to drag,
 the offset of the Image origin
 from the hotspot of the Cursor at
 the instant of the trigger,
 the Transferable subject data
 of the drag, the DragSourceListener,
 and the FlavorMap.
 

Parameters:
trigger - the DragGestureEvent that initiated the drag
dragCursor - the initial Cursor for this drag operation
                       or null for the default cursor handling;
                       see DragSourceContext
                       for more details on the cursor handling mechanism during drag and drop
dragImage - the image to drag or null
imageOffset - the offset of the Image origin from the hotspot
                       of the Cursor at the instant of the trigger
transferable - the subject data of the drag
dsl - the DragSourceListener
flavorMap - the FlavorMap to use, or null

Throws:
InvalidDnDOperationException - if the Drag and Drop
    system is unable to initiate a drag operation, or if the user
    attempts to start a drag while an existing drag operation
    is still executing


"
DragSource,"startDrag(DragGestureEvent trigger, Cursor dragCursor, Transferable transferable, DragSourceListener dsl)",void,"Start a drag, given the DragGestureEvent that initiated the drag, the initial Cursor to use, the Transferable subject data of the drag, and the DragSourceListener.","

startDrag
public void startDrag(DragGestureEvent trigger,
                      Cursor dragCursor,
                      Transferable transferable,
                      DragSourceListener dsl)
               throws InvalidDnDOperationException
Start a drag, given the DragGestureEvent
 that initiated the drag, the initial
 Cursor to
 use,
 the Transferable subject data
 of the drag, and the DragSourceListener.
 

Parameters:
trigger - the DragGestureEvent that initiated the drag
dragCursor - the initial Cursor for this drag operation
                       or null for the default cursor handling;
                       see DragSourceContext class
                       for more details on the cursor handling mechanism during drag and drop
transferable - the subject data of the drag
dsl - the DragSourceListener

Throws:
InvalidDnDOperationException - if the Drag and Drop
    system is unable to initiate a drag operation, or if the user
    attempts to start a drag while an existing drag operation
    is still executing


"
DragSource,"startDrag(DragGestureEvent trigger, Cursor dragCursor, Transferable transferable, DragSourceListener dsl, FlavorMap flavorMap)",void,"Start a drag, given the DragGestureEvent that initiated the drag, the initial Cursor to use, the Transferable subject data of the drag, the DragSourceListener, and the FlavorMap.","

startDrag
public void startDrag(DragGestureEvent trigger,
                      Cursor dragCursor,
                      Transferable transferable,
                      DragSourceListener dsl,
                      FlavorMap flavorMap)
               throws InvalidDnDOperationException
Start a drag, given the DragGestureEvent
 that initiated the drag, the initial
 Cursor to use,
 the Transferable subject data
 of the drag, the DragSourceListener,
 and the FlavorMap.
 

Parameters:
trigger - the DragGestureEvent that
 initiated the drag
dragCursor - the initial Cursor for this drag operation
                       or null for the default cursor handling;
                       see DragSourceContext
                       for more details on the cursor handling mechanism during drag and drop
transferable - the subject data of the drag
dsl - the DragSourceListener
flavorMap - the FlavorMap to use or null

Throws:
InvalidDnDOperationException - if the Drag and Drop
    system is unable to initiate a drag operation, or if the user
    attempts to start a drag while an existing drag operation
    is still executing


"
DragSourceAdapter,dragDropEnd(DragSourceDropEvent dsde),void,This method is invoked to signify that the Drag and Drop operation is complete.,"

dragDropEnd
public void dragDropEnd(DragSourceDropEvent dsde)
This method is invoked to signify that the Drag and Drop
 operation is complete. The getDropSuccess() method of
 the DragSourceDropEvent can be used to
 determine the termination state. The getDropAction() method
 returns the operation that the drop site selected
 to apply to the Drop operation. Once this method is complete, the
 current DragSourceContext and
 associated resources become invalid.

Specified by:
dragDropEnd in interface DragSourceListener
Parameters:
dsde - the DragSourceDropEvent


"
DragSourceAdapter,dragEnter(DragSourceDragEvent dsde),void,Called as the cursor's hotspot enters a platform-dependent drop site.,"

dragEnter
public void dragEnter(DragSourceDragEvent dsde)
Called as the cursor's hotspot enters a platform-dependent drop site.
 This method is invoked when all the following conditions are true:
 
The cursor's hotspot enters the operable part of
 a platform-dependent drop site.
 The drop site is active.
 The drop site accepts the drag.
 

Specified by:
dragEnter in interface DragSourceListener
Parameters:
dsde - the DragSourceDragEvent


"
DragSourceAdapter,dragExit(DragSourceEvent dse),void,Called as the cursor's hotspot exits a platform-dependent drop site.,"

dragExit
public void dragExit(DragSourceEvent dse)
Called as the cursor's hotspot exits a platform-dependent drop site.
 This method is invoked when any of the following conditions are true:
 
The cursor's hotspot no longer intersects the operable part
 of the drop site associated with the previous dragEnter() invocation.
 
 OR
 
The drop site associated with the previous dragEnter() invocation
 is no longer active.
 
 OR
 
 The drop site associated with the previous dragEnter() invocation
 has rejected the drag.
 

Specified by:
dragExit in interface DragSourceListener
Parameters:
dse - the DragSourceEvent


"
DragSourceAdapter,dragMouseMoved(DragSourceDragEvent dsde),void,Called whenever the mouse is moved during a drag operation.,"

dragMouseMoved
public void dragMouseMoved(DragSourceDragEvent dsde)
Called whenever the mouse is moved during a drag operation.

Specified by:
dragMouseMoved in interface DragSourceMotionListener
Parameters:
dsde - the DragSourceDragEvent


"
DragSourceAdapter,dragOver(DragSourceDragEvent dsde),void,Called as the cursor's hotspot moves over a platform-dependent drop site.,"

dragOver
public void dragOver(DragSourceDragEvent dsde)
Called as the cursor's hotspot moves over a platform-dependent drop site.
 This method is invoked when all the following conditions are true:
 
The cursor's hotspot has moved, but still intersects the
 operable part of the drop site associated with the previous
 dragEnter() invocation.
 The drop site is still active.
 The drop site accepts the drag.
 

Specified by:
dragOver in interface DragSourceListener
Parameters:
dsde - the DragSourceDragEvent


"
DragSourceAdapter,dropActionChanged(DragSourceDragEvent dsde),void,Called when the user has modified the drop gesture.,"

dropActionChanged
public void dropActionChanged(DragSourceDragEvent dsde)
Called when the user has modified the drop gesture.
 This method is invoked when the state of the input
 device(s) that the user is interacting with changes.
 Such devices are typically the mouse buttons or keyboard
 modifiers that the user is interacting with.

Specified by:
dropActionChanged in interface DragSourceListener
Parameters:
dsde - the DragSourceDragEvent


"
DragSourceContext,addDragSourceListener(DragSourceListener dsl),void,Add a DragSourceListener to this DragSourceContext if one has not already been added.,"

addDragSourceListener
public void addDragSourceListener(DragSourceListener dsl)
                           throws TooManyListenersException
Add a DragSourceListener to this
 DragSourceContext if one has not already been added.
 If a DragSourceListener already exists,
 this method throws a TooManyListenersException.
 

Parameters:
dsl - the DragSourceListener to add.
 Note that while null is not prohibited,
 it is not acceptable as a parameter.
 
Throws:
TooManyListenersException - if
 a DragSourceListener has already been added


"
DragSourceContext,dragDropEnd(DragSourceDropEvent dsde),void,"Calls dragDropEnd on the DragSourceListeners registered with this DragSourceContext and with the associated DragSource, and passes them the specified DragSourceDropEvent.","

dragDropEnd
public void dragDropEnd(DragSourceDropEvent dsde)
Calls dragDropEnd on the
 DragSourceListeners registered with this
 DragSourceContext and with the associated
 DragSource, and passes them the specified
 DragSourceDropEvent.

Specified by:
dragDropEnd in interface DragSourceListener
Parameters:
dsde - the DragSourceDropEvent


"
DragSourceContext,dragEnter(DragSourceDragEvent dsde),void,"Calls dragEnter on the DragSourceListeners registered with this DragSourceContext and with the associated DragSource, and passes them the specified DragSourceDragEvent.","

dragEnter
public void dragEnter(DragSourceDragEvent dsde)
Calls dragEnter on the
 DragSourceListeners registered with this
 DragSourceContext and with the associated
 DragSource, and passes them the specified
 DragSourceDragEvent.

Specified by:
dragEnter in interface DragSourceListener
Parameters:
dsde - the DragSourceDragEvent


"
DragSourceContext,dragExit(DragSourceEvent dse),void,"Calls dragExit on the DragSourceListeners registered with this DragSourceContext and with the associated DragSource, and passes them the specified DragSourceEvent.","

dragExit
public void dragExit(DragSourceEvent dse)
Calls dragExit on the
 DragSourceListeners registered with this
 DragSourceContext and with the associated
 DragSource, and passes them the specified
 DragSourceEvent.

Specified by:
dragExit in interface DragSourceListener
Parameters:
dse - the DragSourceEvent


"
DragSourceContext,dragMouseMoved(DragSourceDragEvent dsde),void,"Calls dragMouseMoved on the DragSourceMotionListeners registered with the DragSource associated with this DragSourceContext, and them passes the specified DragSourceDragEvent.","

dragMouseMoved
public void dragMouseMoved(DragSourceDragEvent dsde)
Calls dragMouseMoved on the
 DragSourceMotionListeners registered with the
 DragSource associated with this
 DragSourceContext, and them passes the specified
 DragSourceDragEvent.

Specified by:
dragMouseMoved in interface DragSourceMotionListener
Parameters:
dsde - the DragSourceDragEvent
Since:
1.4


"
DragSourceContext,dragOver(DragSourceDragEvent dsde),void,"Calls dragOver on the DragSourceListeners registered with this DragSourceContext and with the associated DragSource, and passes them the specified DragSourceDragEvent.","

dragOver
public void dragOver(DragSourceDragEvent dsde)
Calls dragOver on the
 DragSourceListeners registered with this
 DragSourceContext and with the associated
 DragSource, and passes them the specified
 DragSourceDragEvent.

Specified by:
dragOver in interface DragSourceListener
Parameters:
dsde - the DragSourceDragEvent


"
DragSourceContext,dropActionChanged(DragSourceDragEvent dsde),void,"Calls dropActionChanged on the DragSourceListeners registered with this DragSourceContext and with the associated DragSource, and passes them the specified DragSourceDragEvent.","

dropActionChanged
public void dropActionChanged(DragSourceDragEvent dsde)
Calls dropActionChanged on the
 DragSourceListeners registered with this
 DragSourceContext and with the associated
 DragSource, and passes them the specified
 DragSourceDragEvent.

Specified by:
dropActionChanged in interface DragSourceListener
Parameters:
dsde - the DragSourceDragEvent


"
DragSourceContext,getComponent(),Component,Returns the Component associated with this DragSourceContext.,"

getComponent
public Component getComponent()
Returns the Component associated with this
 DragSourceContext.

Returns:
the Component that started the drag


"
DragSourceContext,getCursor(),Cursor,Returns the current drag Cursor.,"

getCursor
public Cursor getCursor()
Returns the current drag Cursor.
 

Returns:
the current drag Cursor


"
DragSourceContext,getDragSource(),DragSource,Returns the DragSource that instantiated this DragSourceContext.,"

getDragSource
public DragSource getDragSource()
Returns the DragSource
 that instantiated this DragSourceContext.

Returns:
the DragSource that
   instantiated this DragSourceContext


"
DragSourceContext,getSourceActions(),int,Returns a bitwise mask of DnDConstants that represent the set of drop actions supported by the drag source for the drag operation associated with this DragSourceContext.,"

getSourceActions
public int getSourceActions()
Returns a bitwise mask of DnDConstants that
 represent the set of drop actions supported by the drag source for the
 drag operation associated with this DragSourceContext.

Returns:
the drop actions supported by the drag source


"
DragSourceContext,getTransferable(),Transferable,Returns the Transferable associated with this DragSourceContext.,"

getTransferable
public Transferable getTransferable()
Returns the Transferable associated with
 this DragSourceContext.

Returns:
the Transferable


"
DragSourceContext,getTrigger(),DragGestureEvent,Returns the DragGestureEvent that initially triggered the drag.,"

getTrigger
public DragGestureEvent getTrigger()
Returns the DragGestureEvent
 that initially triggered the drag.

Returns:
the Event that triggered the drag


"
DragSourceContext,removeDragSourceListener(DragSourceListener dsl),void,Removes the specified DragSourceListener from this DragSourceContext.,"

removeDragSourceListener
public void removeDragSourceListener(DragSourceListener dsl)
Removes the specified DragSourceListener
 from  this DragSourceContext.

Parameters:
dsl - the DragSourceListener to remove;
     note that while null is not prohibited,
     it is not acceptable as a parameter


"
DragSourceContext,setCursor(Cursor c),void,Sets the cursor for this drag operation to the specified Cursor.,"

setCursor
public void setCursor(Cursor c)
Sets the cursor for this drag operation to the specified
 Cursor.  If the specified Cursor
 is null, the default drag cursor behavior is
 activated for this drag operation, otherwise it is deactivated.

Parameters:
c - the initial Cursor for this drag operation,
                       or null for the default cursor handling;
                       see class
                       level documentation for more details
                       on the cursor handling during drag and drop


"
DragSourceContext,transferablesFlavorsChanged(),void,Notifies the peer that the Transferable's DataFlavors have changed.,"

transferablesFlavorsChanged
public void transferablesFlavorsChanged()
Notifies the peer that the Transferable's
 DataFlavors have changed.

"
DragSourceContext,"updateCurrentCursor(int sourceAct, int targetAct, int status)",protected void,"If the default drag cursor behavior is active, this method sets the default drag cursor for the specified actions supported by the drag source, the drop target action, and status, otherwise this method does nothing.","

updateCurrentCursor
protected void updateCurrentCursor(int sourceAct,
                                   int targetAct,
                                   int status)
If the default drag cursor behavior is active, this method
 sets the default drag cursor for the specified actions
 supported by the drag source, the drop target action,
 and status, otherwise this method does nothing.

Parameters:
sourceAct - the actions supported by the drag source
targetAct - the drop target action
status - one of the fields DEFAULT,
               ENTER, OVER,
               CHANGED


"
DragSourceDragEvent,getDropAction(),int,This method returns the logical intersection of the target drop action and the set of drop actions supported by the drag source.,"

getDropAction
public int getDropAction()
This method returns the logical intersection of
 the target drop action and the set of drop actions supported by
 the drag source.

Returns:
the logical intersection of the target drop action and
         the set of drop actions supported by the drag source.


"
DragSourceDragEvent,getGestureModifiers(),int,This method returns an int representing the current state of the input device modifiers associated with the user's gesture.,"

getGestureModifiers
public int getGestureModifiers()
This method returns an int representing
 the current state of the input device modifiers
 associated with the user's gesture. Typically these
 would be mouse buttons or keyboard modifiers.
 
 If the modifiers passed to the constructor
 are invalid, this method returns them unchanged.

Returns:
the current state of the input device modifiers


"
DragSourceDragEvent,getGestureModifiersEx(),int,This method returns an int representing the current state of the input device extended modifiers associated with the user's gesture.,"

getGestureModifiersEx
public int getGestureModifiersEx()
This method returns an int representing
 the current state of the input device extended modifiers
 associated with the user's gesture.
 See InputEvent.getModifiersEx()

 If the modifiers passed to the constructor
 are invalid, this method returns them unchanged.

Returns:
the current state of the input device extended modifiers
Since:
1.4


"
DragSourceDragEvent,getTargetActions(),int,This method returns the target drop action.,"

getTargetActions
public int getTargetActions()
This method returns the target drop action.

Returns:
the target drop action.


"
DragSourceDragEvent,getUserAction(),int,This method returns the user drop action.,"

getUserAction
public int getUserAction()
This method returns the user drop action.

Returns:
the user drop action.


"
DragSourceDropEvent,getDropAction(),int,This method returns an int representing the action performed by the target on the subject of the drop.,"

getDropAction
public int getDropAction()
This method returns an int representing
 the action performed by the target on the subject of the drop.

Returns:
the action performed by the target on the subject of the drop
         if the drop target accepted the drop and the target drop action
         is supported by the drag source; otherwise,
         DnDConstants.ACTION_NONE.


"
DragSourceDropEvent,getDropSuccess(),boolean,This method returns a boolean indicating if the drop was successful.,"

getDropSuccess
public boolean getDropSuccess()
This method returns a boolean indicating
 if the drop was successful.

Returns:
true if the drop target accepted the drop and
         successfully performed a drop action;
         false if the drop target rejected the drop or
         if the drop target accepted the drop, but failed to perform
         a drop action.


"
DragSourceEvent,getDragSourceContext(),DragSourceContext,This method returns the DragSourceContext that originated the event.,"

getDragSourceContext
public DragSourceContext getDragSourceContext()
This method returns the DragSourceContext that
 originated the event.
 

Returns:
the DragSourceContext that originated the event


"
DragSourceEvent,getLocation(),Point,"This method returns a Point indicating the cursor location in screen coordinates at the moment this event occurred, or null if the cursor location is not specified for this event.","

getLocation
public Point getLocation()
This method returns a Point indicating the cursor
 location in screen coordinates at the moment this event occurred, or
 null if the cursor location is not specified for this
 event.

Returns:
the Point indicating the cursor location
         or null if the cursor location is not specified
Since:
1.4


"
DragSourceEvent,getX(),int,"This method returns the horizontal coordinate of the cursor location in screen coordinates at the moment this event occurred, or zero if the cursor location is not specified for this event.","

getX
public int getX()
This method returns the horizontal coordinate of the cursor location in
 screen coordinates at the moment this event occurred, or zero if the
 cursor location is not specified for this event.

Returns:
an integer indicating the horizontal coordinate of the cursor
         location or zero if the cursor location is not specified
Since:
1.4


"
DragSourceEvent,getY(),int,"This method returns the vertical coordinate of the cursor location in screen coordinates at the moment this event occurred, or zero if the cursor location is not specified for this event.","

getY
public int getY()
This method returns the vertical coordinate of the cursor location in
 screen coordinates at the moment this event occurred, or zero if the
 cursor location is not specified for this event.

Returns:
an integer indicating the vertical coordinate of the cursor
         location or zero if the cursor location is not specified
Since:
1.4


"
DropTarget,addDropTargetListener(DropTargetListener dtl),void,Adds a new DropTargetListener (UNICAST SOURCE).,"

addDropTargetListener
public void addDropTargetListener(DropTargetListener dtl)
                           throws TooManyListenersException
Adds a new DropTargetListener (UNICAST SOURCE).
 

Parameters:
dtl - The new DropTargetListener

Throws:
TooManyListenersException - if a
 DropTargetListener is already added to this
 DropTarget.


"
DropTarget,addNotify(java.awt.peer.ComponentPeer peer),void,Notify the DropTarget that it has been associated with a Component This method is usually called from java.awt.Component.addNotify() of the Component associated with this DropTarget to notify the DropTarget that a ComponentPeer has been associated with that Component.,"

addNotify
public void addNotify(java.awt.peer.ComponentPeer peer)
Notify the DropTarget that it has been associated with a Component


 This method is usually called from java.awt.Component.addNotify() of
 the Component associated with this DropTarget to notify the DropTarget
 that a ComponentPeer has been associated with that Component.

 Calling this method, other than to notify this DropTarget of the
 association of the ComponentPeer with the Component may result in
 a malfunction of the DnD system.

 

Parameters:
peer - The Peer of the Component we are associated with!


"
DropTarget,clearAutoscroll(),protected void,clear autoscrolling,"

clearAutoscroll
protected void clearAutoscroll()
clear autoscrolling

"
DropTarget,"createDropTargetAutoScroller(Component c, Point p)",protected DropTarget.DropTargetAutoScroller,create an embedded autoscroller,"

createDropTargetAutoScroller
protected DropTarget.DropTargetAutoScroller createDropTargetAutoScroller(Component c,
                                                                         Point p)
create an embedded autoscroller
 

Parameters:
c - the Component
p - the Point


"
DropTarget,createDropTargetContext(),protected DropTargetContext,Creates the DropTargetContext associated with this DropTarget.,"

createDropTargetContext
protected DropTargetContext createDropTargetContext()
Creates the DropTargetContext associated with this DropTarget.
 Subclasses may override this method to instantiate their own
 DropTargetContext subclass.

 This call is typically *only* called by the platform's
 DropTargetContextPeer as a drag operation encounters this
 DropTarget. Accessing the Context while no Drag is current
 has undefined results.

"
DropTarget,dragEnter(DropTargetDragEvent dtde),void,Calls dragEnter on the registered DropTargetListener and passes it the specified DropTargetDragEvent.,"

dragEnter
public void dragEnter(DropTargetDragEvent dtde)
Calls dragEnter on the registered
 DropTargetListener and passes it
 the specified DropTargetDragEvent.
 Has no effect if this DropTarget
 is not active.

Specified by:
dragEnter in interface DropTargetListener
Parameters:
dtde - the DropTargetDragEvent
Throws:
NullPointerException - if this DropTarget
         is active and dtde is null
See Also:
isActive()


"
DropTarget,dragExit(DropTargetEvent dte),void,Calls dragExit on the registered DropTargetListener and passes it the specified DropTargetEvent.,"

dragExit
public void dragExit(DropTargetEvent dte)
Calls dragExit on the registered
 DropTargetListener and passes it
 the specified DropTargetEvent.
 Has no effect if this DropTarget
 is not active.
 
 This method itself does not throw any exception
 for null parameter but for exceptions thrown by
 the respective method of the listener.

Specified by:
dragExit in interface DropTargetListener
Parameters:
dte - the DropTargetEvent
See Also:
isActive()


"
DropTarget,dragOver(DropTargetDragEvent dtde),void,Calls dragOver on the registered DropTargetListener and passes it the specified DropTargetDragEvent.,"

dragOver
public void dragOver(DropTargetDragEvent dtde)
Calls dragOver on the registered
 DropTargetListener and passes it
 the specified DropTargetDragEvent.
 Has no effect if this DropTarget
 is not active.

Specified by:
dragOver in interface DropTargetListener
Parameters:
dtde - the DropTargetDragEvent
Throws:
NullPointerException - if this DropTarget
         is active and dtde is null
See Also:
isActive()


"
DropTarget,drop(DropTargetDropEvent dtde),void,Calls drop on the registered DropTargetListener and passes it the specified DropTargetDropEvent if this DropTarget is active.,"

drop
public void drop(DropTargetDropEvent dtde)
Calls drop on the registered
 DropTargetListener and passes it
 the specified DropTargetDropEvent
 if this DropTarget is active.

Specified by:
drop in interface DropTargetListener
Parameters:
dtde - the DropTargetDropEvent
Throws:
NullPointerException - if dtde is null
         and at least one of the following is true: this
         DropTarget is not active, or there is
         no a DropTargetListener registered.
See Also:
isActive()


"
DropTarget,dropActionChanged(DropTargetDragEvent dtde),void,Calls dropActionChanged on the registered DropTargetListener and passes it the specified DropTargetDragEvent.,"

dropActionChanged
public void dropActionChanged(DropTargetDragEvent dtde)
Calls dropActionChanged on the registered
 DropTargetListener and passes it
 the specified DropTargetDragEvent.
 Has no effect if this DropTarget
 is not active.

Specified by:
dropActionChanged in interface DropTargetListener
Parameters:
dtde - the DropTargetDragEvent
Throws:
NullPointerException - if this DropTarget
         is active and dtde is null
See Also:
isActive()


"
DropTarget,getComponent(),Component,Gets the Component associated with this DropTarget.,"

getComponent
public Component getComponent()
Gets the Component associated
 with this DropTarget.
 

Returns:
the current Component


"
DropTarget,getDefaultActions(),int,Gets an int representing the current action(s) supported by this DropTarget.,"

getDefaultActions
public int getDefaultActions()
Gets an int representing the
 current action(s) supported by this DropTarget.
 

Returns:
the current default actions


"
DropTarget,getDropTargetContext(),DropTargetContext,Gets the DropTargetContext associated with this DropTarget.,"

getDropTargetContext
public DropTargetContext getDropTargetContext()
Gets the DropTargetContext associated
 with this DropTarget.
 

Returns:
the DropTargetContext associated with this DropTarget.


"
DropTarget,getFlavorMap(),FlavorMap,Gets the FlavorMap associated with this DropTarget.,"

getFlavorMap
public FlavorMap getFlavorMap()
Gets the FlavorMap
 associated with this DropTarget.
 If no FlavorMap has been set for this
 DropTarget, it is associated with the default
 FlavorMap.
 

Returns:
the FlavorMap for this DropTarget


"
DropTarget,initializeAutoscrolling(Point p),protected void,initialize autoscrolling,"

initializeAutoscrolling
protected void initializeAutoscrolling(Point p)
initialize autoscrolling
 

Parameters:
p - the Point


"
DropTarget,isActive(),boolean,Reports whether or not this DropTarget is currently active (ready to accept drops).,"

isActive
public boolean isActive()
Reports whether or not
 this DropTarget
 is currently active (ready to accept drops).
 

Returns:
true if active, false if not


"
DropTarget,removeDropTargetListener(DropTargetListener dtl),void,Removes the current DropTargetListener (UNICAST SOURCE).,"

removeDropTargetListener
public void removeDropTargetListener(DropTargetListener dtl)
Removes the current DropTargetListener (UNICAST SOURCE).
 

Parameters:
dtl - the DropTargetListener to deregister.


"
DropTarget,removeNotify(java.awt.peer.ComponentPeer peer),void,Notify the DropTarget that it has been disassociated from a Component This method is usually called from java.awt.Component.removeNotify() of the Component associated with this DropTarget to notify the DropTarget that a ComponentPeer has been disassociated with that Component.,"

removeNotify
public void removeNotify(java.awt.peer.ComponentPeer peer)
Notify the DropTarget that it has been disassociated from a Component


 This method is usually called from java.awt.Component.removeNotify() of
 the Component associated with this DropTarget to notify the DropTarget
 that a ComponentPeer has been disassociated with that Component.

 Calling this method, other than to notify this DropTarget of the
 disassociation of the ComponentPeer from the Component may result in
 a malfunction of the DnD system.

 

Parameters:
peer - The Peer of the Component we are being disassociated from!


"
DropTarget,setActive(boolean isActive),void,"Sets the DropTarget active if true, inactive if false.","

setActive
public void setActive(boolean isActive)
Sets the DropTarget active if true,
 inactive if false.
 

Parameters:
isActive - sets the DropTarget (in)active.


"
DropTarget,setComponent(Component c),void,"Note: this interface is required to permit the safe association of a DropTarget with a Component in one of two ways, either: component.setDropTarget(droptarget); or droptarget.setComponent(component);","

setComponent
public void setComponent(Component c)
Note: this interface is required to permit the safe association
 of a DropTarget with a Component in one of two ways, either:
  component.setDropTarget(droptarget); 
 or  droptarget.setComponent(component); 

 The Component will receive drops only if it is enabled.

Parameters:
c - The new Component this DropTarget
 is to be associated with.


"
DropTarget,setDefaultActions(int ops),void,Sets the default acceptable actions for this DropTarget,"

setDefaultActions
public void setDefaultActions(int ops)
Sets the default acceptable actions for this DropTarget


Parameters:
ops - the default actions
See Also:
DnDConstants


"
DropTarget,setFlavorMap(FlavorMap fm),void,Sets the FlavorMap associated with this DropTarget.,"

setFlavorMap
public void setFlavorMap(FlavorMap fm)
Sets the FlavorMap associated
 with this DropTarget.
 

Parameters:
fm - the new FlavorMap, or null to
 associate the default FlavorMap with this DropTarget.


"
DropTarget,updateAutoscroll(Point dragCursorLocn),protected void,update autoscrolling with current cursor location,"

updateAutoscroll
protected void updateAutoscroll(Point dragCursorLocn)
update autoscrolling with current cursor location
 

Parameters:
dragCursorLocn - the Point


"
DropTarget.DropTargetAutoScroller,actionPerformed(ActionEvent e),void,cause autoscroll to occur,"

actionPerformed
public void actionPerformed(ActionEvent e)
cause autoscroll to occur
 

Specified by:
actionPerformed in interface ActionListener
Parameters:
e - the ActionEvent


"
DropTarget.DropTargetAutoScroller,stop(),protected void,cause autoscrolling to stop,"

stop
protected void stop()
cause autoscrolling to stop

"
DropTarget.DropTargetAutoScroller,updateLocation(Point newLocn),protected void,cause autoscroll to occur,"

updateLocation
protected void updateLocation(Point newLocn)
cause autoscroll to occur
 

Parameters:
newLocn - the Point


"
DropTargetAdapter,dragEnter(DropTargetDragEvent dtde),void,"Called while a drag operation is ongoing, when the mouse pointer enters the operable part of the drop site for the DropTarget registered with this listener.","

dragEnter
public void dragEnter(DropTargetDragEvent dtde)
Called while a drag operation is ongoing, when the mouse pointer enters
 the operable part of the drop site for the DropTarget
 registered with this listener.

Specified by:
dragEnter in interface DropTargetListener
Parameters:
dtde - the DropTargetDragEvent


"
DropTargetAdapter,dragExit(DropTargetEvent dte),void,"Called while a drag operation is ongoing, when the mouse pointer has exited the operable part of the drop site for the DropTarget registered with this listener.","

dragExit
public void dragExit(DropTargetEvent dte)
Called while a drag operation is ongoing, when the mouse pointer has
 exited the operable part of the drop site for the
 DropTarget registered with this listener.

Specified by:
dragExit in interface DropTargetListener
Parameters:
dte - the DropTargetEvent


"
DropTargetAdapter,dragOver(DropTargetDragEvent dtde),void,"Called when a drag operation is ongoing, while the mouse pointer is still over the operable part of the drop site for the DropTarget registered with this listener.","

dragOver
public void dragOver(DropTargetDragEvent dtde)
Called when a drag operation is ongoing, while the mouse pointer is still
 over the operable part of the drop site for the DropTarget
 registered with this listener.

Specified by:
dragOver in interface DropTargetListener
Parameters:
dtde - the DropTargetDragEvent


"
DropTargetAdapter,dropActionChanged(DropTargetDragEvent dtde),void,Called if the user has modified the current drop gesture.,"

dropActionChanged
public void dropActionChanged(DropTargetDragEvent dtde)
Called if the user has modified
 the current drop gesture.

Specified by:
dropActionChanged in interface DropTargetListener
Parameters:
dtde - the DropTargetDragEvent


"
DropTargetContext,acceptDrag(int dragOperation),protected void,accept the Drag.,"

acceptDrag
protected void acceptDrag(int dragOperation)
accept the Drag.
 

Parameters:
dragOperation - the supported action(s)


"
DropTargetContext,acceptDrop(int dropOperation),protected void,called to signal that the drop is acceptable using the specified operation.,"

acceptDrop
protected void acceptDrop(int dropOperation)
called to signal that the drop is acceptable
 using the specified operation.
 must be called during DropTargetListener.drop method invocation.
 

Parameters:
dropOperation - the supported action(s)


"
DropTargetContext,addNotify(java.awt.dnd.peer.DropTargetContextPeer dtcp),void,Called when associated with the DropTargetContextPeer.,"

addNotify
public void addNotify(java.awt.dnd.peer.DropTargetContextPeer dtcp)
Called when associated with the DropTargetContextPeer.
 

Parameters:
dtcp - the DropTargetContextPeer


"
DropTargetContext,"createTransferableProxy(Transferable t, boolean local)",protected Transferable,Creates a TransferableProxy to proxy for the specified Transferable.,"

createTransferableProxy
protected Transferable createTransferableProxy(Transferable t,
                                               boolean local)
Creates a TransferableProxy to proxy for the specified
 Transferable.

Parameters:
t - the Transferable to be proxied
local - true if t represents
        the result of a local drag-n-drop operation.
Returns:
the new TransferableProxy instance.


"
DropTargetContext,dropComplete(boolean success),void,This method signals that the drop is completed and if it was successful or not.,"

dropComplete
public void dropComplete(boolean success)
                  throws InvalidDnDOperationException
This method signals that the drop is completed and
 if it was successful or not.
 

Parameters:
success - true for success, false if not
 
Throws:
InvalidDnDOperationException - if a drop is not outstanding/extant


"
DropTargetContext,getComponent(),Component,This method returns the Component associated with this DropTargetContext.,"

getComponent
public Component getComponent()
This method returns the Component associated with
 this DropTargetContext.
 

Returns:
the Component associated with this Context


"
DropTargetContext,getCurrentDataFlavors(),protected DataFlavor[],get the available DataFlavors of the Transferable operand of this operation.,"

getCurrentDataFlavors
protected DataFlavor[] getCurrentDataFlavors()
get the available DataFlavors of the
 Transferable operand of this operation.
 

Returns:
a DataFlavor[] containing the
 supported DataFlavors of the
 Transferable operand.


"
DropTargetContext,getCurrentDataFlavorsAsList(),protected List<DataFlavor>,This method returns a the currently available DataFlavors of the Transferable operand as a java.util.List.,"

getCurrentDataFlavorsAsList
protected List<DataFlavor> getCurrentDataFlavorsAsList()
This method returns a the currently available DataFlavors
 of the Transferable operand
 as a java.util.List.
 

Returns:
the currently available
 DataFlavors as a java.util.List


"
DropTargetContext,getDropTarget(),DropTarget,This method returns the DropTarget associated with this DropTargetContext.,"

getDropTarget
public DropTarget getDropTarget()
This method returns the DropTarget associated with this
 DropTargetContext.
 

Returns:
the DropTarget associated with this DropTargetContext


"
DropTargetContext,getTargetActions(),protected int,This method returns an int representing the current actions this DropTarget will accept.,"

getTargetActions
protected int getTargetActions()
This method returns an int representing the
 current actions this DropTarget will accept.
 

Returns:
the current actions acceptable to this DropTarget


"
DropTargetContext,getTransferable(),protected Transferable,get the Transferable (proxy) operand of this operation,"

getTransferable
protected Transferable getTransferable()
                                throws InvalidDnDOperationException
get the Transferable (proxy) operand of this operation
 

Returns:
the Transferable
Throws:
InvalidDnDOperationException - if a drag is not outstanding/extant
 


"
DropTargetContext,isDataFlavorSupported(DataFlavor df),protected boolean,This method returns a boolean indicating if the given DataFlavor is supported by this DropTargetContext.,"

isDataFlavorSupported
protected boolean isDataFlavorSupported(DataFlavor df)
This method returns a boolean
 indicating if the given DataFlavor is
 supported by this DropTargetContext.
 

Parameters:
df - the DataFlavor

Returns:
if the DataFlavor specified is supported


"
DropTargetContext,rejectDrag(),protected void,reject the Drag.,"

rejectDrag
protected void rejectDrag()
reject the Drag.

"
DropTargetContext,rejectDrop(),protected void,called to signal that the drop is unacceptable.,"

rejectDrop
protected void rejectDrop()
called to signal that the drop is unacceptable.
 must be called during DropTargetListener.drop method invocation.

"
DropTargetContext,removeNotify(),void,Called when disassociated with the DropTargetContextPeer.,"

removeNotify
public void removeNotify()
Called when disassociated with the DropTargetContextPeer.

"
DropTargetContext,setTargetActions(int actions),protected void,This method sets the current actions acceptable to this DropTarget.,"

setTargetActions
protected void setTargetActions(int actions)
This method sets the current actions acceptable to
 this DropTarget.
 

Parameters:
actions - an int representing the supported action(s)


"
DropTargetDragEvent,acceptDrag(int dragOperation),void,Accepts the drag.,"

acceptDrag
public void acceptDrag(int dragOperation)
Accepts the drag.

 This method should be called from a
 DropTargetListeners dragEnter,
 dragOver, and dropActionChanged
 methods if the implementation wishes to accept an operation
 from the srcActions other than the one selected by
 the user as represented by the dropAction.

Parameters:
dragOperation - the operation accepted by the target


"
DropTargetDragEvent,getCurrentDataFlavors(),DataFlavor[],This method returns the current DataFlavors from the DropTargetContext.,"

getCurrentDataFlavors
public DataFlavor[] getCurrentDataFlavors()
This method returns the current DataFlavors from the
 DropTargetContext.
 

Returns:
current DataFlavors from the DropTargetContext


"
DropTargetDragEvent,getCurrentDataFlavorsAsList(),List<DataFlavor>,This method returns the current DataFlavors as a java.util.List,"

getCurrentDataFlavorsAsList
public List<DataFlavor> getCurrentDataFlavorsAsList()
This method returns the current DataFlavors
 as a java.util.List


Returns:
a java.util.List of the Current DataFlavors


"
DropTargetDragEvent,getDropAction(),int,This method returns the user drop action.,"

getDropAction
public int getDropAction()
This method returns the user drop action.

Returns:
the user drop action


"
DropTargetDragEvent,getLocation(),Point,This method returns a Point indicating the Cursor's current location within the Component's coordinates.,"

getLocation
public Point getLocation()
This method returns a Point
 indicating the Cursor's current
 location within the Component's
 coordinates.
 

Returns:
the current cursor location in
 Component's coords.


"
DropTargetDragEvent,getSourceActions(),int,This method returns the source drop actions.,"

getSourceActions
public int getSourceActions()
This method returns the source drop actions.

Returns:
the source drop actions


"
DropTargetDragEvent,getTransferable(),Transferable,This method returns the Transferable object that represents the data associated with the current drag operation.,"

getTransferable
public Transferable getTransferable()
This method returns the Transferable object that represents
 the data associated with the current drag operation.

Returns:
the Transferable associated with the drag operation
Throws:
InvalidDnDOperationException - if the data associated with the drag
         operation is not available
Since:
1.5


"
DropTargetDragEvent,isDataFlavorSupported(DataFlavor df),boolean,This method returns a boolean indicating if the specified DataFlavor is supported.,"

isDataFlavorSupported
public boolean isDataFlavorSupported(DataFlavor df)
This method returns a boolean indicating
 if the specified DataFlavor is supported.
 

Parameters:
df - the DataFlavor to test
 
Returns:
if a particular DataFlavor is supported


"
DropTargetDragEvent,rejectDrag(),void,Rejects the drag as a result of examining either the dropAction or the available DataFlavor types.,"

rejectDrag
public void rejectDrag()
Rejects the drag as a result of examining either the
 dropAction or the available DataFlavor
 types.

"
DropTargetDropEvent,acceptDrop(int dropAction),void,"accept the drop, using the specified action.","

acceptDrop
public void acceptDrop(int dropAction)
accept the drop, using the specified action.
 

Parameters:
dropAction - the specified action


"
DropTargetDropEvent,dropComplete(boolean success),void,This method notifies the DragSource that the drop transfer(s) are completed.,"

dropComplete
public void dropComplete(boolean success)
This method notifies the DragSource
 that the drop transfer(s) are completed.
 

Parameters:
success - a boolean indicating that the drop transfer(s) are completed.


"
DropTargetDropEvent,getCurrentDataFlavors(),DataFlavor[],This method returns the current DataFlavors.,"

getCurrentDataFlavors
public DataFlavor[] getCurrentDataFlavors()
This method returns the current DataFlavors.
 

Returns:
current DataFlavors


"
DropTargetDropEvent,getCurrentDataFlavorsAsList(),List<DataFlavor>,This method returns the currently available DataFlavors as a java.util.List.,"

getCurrentDataFlavorsAsList
public List<DataFlavor> getCurrentDataFlavorsAsList()
This method returns the currently available
 DataFlavors as a java.util.List.
 

Returns:
the currently available DataFlavors as a java.util.List


"
DropTargetDropEvent,getDropAction(),int,This method returns the user drop action.,"

getDropAction
public int getDropAction()
This method returns the user drop action.

Returns:
the user drop actions.


"
DropTargetDropEvent,getLocation(),Point,This method returns a Point indicating the Cursor's current location in the Component's coordinates.,"

getLocation
public Point getLocation()
This method returns a Point
 indicating the Cursor's current
 location in the Component's coordinates.
 

Returns:
the current Cursor location in Component's coords.


"
DropTargetDropEvent,getSourceActions(),int,This method returns the source drop actions.,"

getSourceActions
public int getSourceActions()
This method returns the source drop actions.

Returns:
the source drop actions.


"
DropTargetDropEvent,getTransferable(),Transferable,This method returns the Transferable object associated with the drop.,"

getTransferable
public Transferable getTransferable()
This method returns the Transferable object
 associated with the drop.
 

Returns:
the Transferable associated with the drop


"
DropTargetDropEvent,isDataFlavorSupported(DataFlavor df),boolean,This method returns a boolean indicating if the specified DataFlavor is available from the source.,"

isDataFlavorSupported
public boolean isDataFlavorSupported(DataFlavor df)
This method returns a boolean indicating if the
 specified DataFlavor is available
 from the source.
 

Parameters:
df - the DataFlavor to test
 
Returns:
if the DataFlavor specified is available from the source


"
DropTargetDropEvent,isLocalTransfer(),boolean,This method returns an int indicating if the source is in the same JVM as the target.,"

isLocalTransfer
public boolean isLocalTransfer()
This method returns an int indicating if
 the source is in the same JVM as the target.
 

Returns:
if the Source is in the same JVM


"
DropTargetDropEvent,rejectDrop(),void,reject the Drop.,"

rejectDrop
public void rejectDrop()
reject the Drop.

"
DropTargetEvent,getDropTargetContext(),DropTargetContext,This method returns the DropTargetContext associated with this DropTargetEvent.,"

getDropTargetContext
public DropTargetContext getDropTargetContext()
This method returns the DropTargetContext
 associated with this DropTargetEvent.
 

Returns:
the DropTargetContext


"
MouseDragGestureRecognizer,mouseClicked(MouseEvent e),void,Invoked when the mouse has been clicked on a component.,"

mouseClicked
public void mouseClicked(MouseEvent e)
Invoked when the mouse has been clicked on a component.
 

Specified by:
mouseClicked in interface MouseListener
Parameters:
e - the MouseEvent


"
MouseDragGestureRecognizer,mouseDragged(MouseEvent e),void,Invoked when a mouse button is pressed on a component.,"

mouseDragged
public void mouseDragged(MouseEvent e)
Invoked when a mouse button is pressed on a component.
 

Specified by:
mouseDragged in interface MouseMotionListener
Parameters:
e - the MouseEvent


"
MouseDragGestureRecognizer,mouseEntered(MouseEvent e),void,Invoked when the mouse enters a component.,"

mouseEntered
public void mouseEntered(MouseEvent e)
Invoked when the mouse enters a component.
 

Specified by:
mouseEntered in interface MouseListener
Parameters:
e - the MouseEvent


"
MouseDragGestureRecognizer,mouseExited(MouseEvent e),void,Invoked when the mouse exits a component.,"

mouseExited
public void mouseExited(MouseEvent e)
Invoked when the mouse exits a component.
 

Specified by:
mouseExited in interface MouseListener
Parameters:
e - the MouseEvent


"
MouseDragGestureRecognizer,mouseMoved(MouseEvent e),void,Invoked when the mouse button has been moved on a component (with no buttons no down).,"

mouseMoved
public void mouseMoved(MouseEvent e)
Invoked when the mouse button has been moved on a component
 (with no buttons no down).
 

Specified by:
mouseMoved in interface MouseMotionListener
Parameters:
e - the MouseEvent


"
MouseDragGestureRecognizer,mousePressed(MouseEvent e),void,Invoked when a mouse button has been pressed on a Component.,"

mousePressed
public void mousePressed(MouseEvent e)
Invoked when a mouse button has been
 pressed on a Component.
 

Specified by:
mousePressed in interface MouseListener
Parameters:
e - the MouseEvent


"
MouseDragGestureRecognizer,mouseReleased(MouseEvent e),void,Invoked when a mouse button has been released on a component.,"

mouseReleased
public void mouseReleased(MouseEvent e)
Invoked when a mouse button has been released on a component.
 

Specified by:
mouseReleased in interface MouseListener
Parameters:
e - the MouseEvent


"
MouseDragGestureRecognizer,registerListeners(),protected void,register this DragGestureRecognizer's Listeners with the Component,"

registerListeners
protected void registerListeners()
register this DragGestureRecognizer's Listeners with the Component

Specified by:
registerListeners in class DragGestureRecognizer


"
MouseDragGestureRecognizer,unregisterListeners(),protected void,unregister this DragGestureRecognizer's Listeners with the Component subclasses must override this method,"

unregisterListeners
protected void unregisterListeners()
unregister this DragGestureRecognizer's Listeners with the Component

 subclasses must override this method

Specified by:
unregisterListeners in class DragGestureRecognizer


"
