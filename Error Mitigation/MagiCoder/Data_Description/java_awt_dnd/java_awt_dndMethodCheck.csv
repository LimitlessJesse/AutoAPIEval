Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,DnDConstants,1,final int ACTION_COPY,False,,NULL
0,DnDConstants,2,final int ACTION_MOVE,False,,NULL
0,DnDConstants,3,final int ACTION_REFERENCE,False,,NULL
0,DnDConstants,4,final int ACTION_NONE,False,,NULL
0,DnDConstants,5,final int ACTION_LINK,False,,NULL
1,DragGestureEvent,1,"DragGestureEvent(Component source, int id, long when)",False,,NULL
1,DragGestureEvent,2,Component getSource(),False,,NULL
1,DragGestureEvent,3,int getID(),False,,NULL
1,DragGestureEvent,4,long getWhen(),False,,NULL
1,DragGestureEvent,5,void consume(),False,,NULL
2,DragGestureRecognizer,1,void dragGestureRecognized(DragGestureEvent dge),False,,NULL
2,DragGestureRecognizer,2,void dragGestureRecognitionEnded(DragGestureEvent dge),False,,NULL
2,DragGestureRecognizer,3,void dragGestureRecognitionStarted(DragGestureEvent dge),False,,NULL
2,DragGestureRecognizer,4,void dragGestureUpdated(DragGestureEvent dge),False,,NULL
2,DragGestureRecognizer,5,void dragMouseMoved(DragGestureEvent dge),False,,NULL
3,DragSource,1,void createDefaultDragGestureRecognizer(DragGestureRecognizer dgr),False,,NULL
3,DragSource,2,"void createDefaultDragGestureRecognizer(DragGestureRecognizer dgr, int flags)",False,,NULL
3,DragSource,3,"void startDrag(DragSourceContext dsc, DragGestureEvent dge, int actionMask)",False,,NULL
3,DragSource,4,"void startDrag(DragSourceContext dsc, DragGestureEvent dge, int actionMask, int modifiers)",False,,NULL
3,DragSource,5,"void startDrag(DragSourceContext dsc, DragGestureEvent dge, int actionMask, int modifiers, int buttonMask)",False,,NULL
4,DragSourceAdapter,1,void dragEnter(DragSourceDragEvent dsde),True,Called as the cursor's hotspot enters a platform-dependent drop site.,"

dragEnter
public void dragEnter(DragSourceDragEvent dsde)
Called as the cursor's hotspot enters a platform-dependent drop site.
 This method is invoked when all the following conditions are true:
 
The cursor's hotspot enters the operable part of
 a platform-dependent drop site.
 The drop site is active.
 The drop site accepts the drag.
 

Specified by:
dragEnter in interface DragSourceListener
Parameters:
dsde - the DragSourceDragEvent


"
4,DragSourceAdapter,2,void dragOver(DragSourceDragEvent dsde),True,Called as the cursor's hotspot moves over a platform-dependent drop site.,"

dragOver
public void dragOver(DragSourceDragEvent dsde)
Called as the cursor's hotspot moves over a platform-dependent drop site.
 This method is invoked when all the following conditions are true:
 
The cursor's hotspot has moved, but still intersects the
 operable part of the drop site associated with the previous
 dragEnter() invocation.
 The drop site is still active.
 The drop site accepts the drag.
 

Specified by:
dragOver in interface DragSourceListener
Parameters:
dsde - the DragSourceDragEvent


"
4,DragSourceAdapter,3,void dropActionChanged(DragSourceDragEvent dsde),True,Called when the user has modified the drop gesture.,"

dropActionChanged
public void dropActionChanged(DragSourceDragEvent dsde)
Called when the user has modified the drop gesture.
 This method is invoked when the state of the input
 device(s) that the user is interacting with changes.
 Such devices are typically the mouse buttons or keyboard
 modifiers that the user is interacting with.

Specified by:
dropActionChanged in interface DragSourceListener
Parameters:
dsde - the DragSourceDragEvent


"
4,DragSourceAdapter,4,void dragExit(DragSourceEvent dse),True,Called as the cursor's hotspot exits a platform-dependent drop site.,"

dragExit
public void dragExit(DragSourceEvent dse)
Called as the cursor's hotspot exits a platform-dependent drop site.
 This method is invoked when any of the following conditions are true:
 
The cursor's hotspot no longer intersects the operable part
 of the drop site associated with the previous dragEnter() invocation.
 
 OR
 
The drop site associated with the previous dragEnter() invocation
 is no longer active.
 
 OR
 
 The drop site associated with the previous dragEnter() invocation
 has rejected the drag.
 

Specified by:
dragExit in interface DragSourceListener
Parameters:
dse - the DragSourceEvent


"
4,DragSourceAdapter,5,void drop(DragSourceDropEvent dsde),False,,NULL
5,DragSourceContext,1,"void startDrag(DragSourceContext dsContext, Transferable t, int action)",False,,NULL
5,DragSourceContext,2,"void drag(DragSourceContext dsContext, Transferable t, int action)",False,,NULL
5,DragSourceContext,3,"void drop(DragSourceContext dsContext, Transferable t, int action)",False,,NULL
5,DragSourceContext,4,void dragExit(DragSourceContext dsContext),False,,NULL
5,DragSourceContext,5,void dragOver(DragSourceContext dsContext),False,,NULL
6,DragSourceDragEvent,1,"DragSourceDragEvent(DragSourceContext dsContext, int action, int x, int y, int modifiers)",False,,NULL
6,DragSourceDragEvent,2,int getX(),False,,NULL
6,DragSourceDragEvent,3,int getY(),False,,NULL
6,DragSourceDragEvent,4,int getModifiers(),False,,NULL
6,DragSourceDragEvent,5,int getAction(),False,,NULL
7,DragSourceDropEvent,1,"DragSourceDropEvent(DragSourceContext sourceContext, int dropAction, int x, int y, boolean isDropTarget)",False,,NULL
7,DragSourceDropEvent,2,DragSourceContext getSourceContext(),False,,NULL
7,DragSourceDropEvent,3,int getDropAction(),True,This method returns an int representing the action performed by the target on the subject of the drop.,"

getDropAction
public int getDropAction()
This method returns an int representing
 the action performed by the target on the subject of the drop.

Returns:
the action performed by the target on the subject of the drop
         if the drop target accepted the drop and the target drop action
         is supported by the drag source; otherwise,
         DnDConstants.ACTION_NONE.


"
7,DragSourceDropEvent,4,int getX(),False,,NULL
7,DragSourceDropEvent,5,int getY(),False,,NULL
7,DragSourceDropEvent,6,boolean isDropTarget(),False,,NULL
8,DragSourceEvent,1,"DragSourceEvent(DragSourceContext dsctx, int id, int action, int modifiers, int x, int y, int dropAction)",False,,NULL
8,DragSourceEvent,2,int getAction(),False,,NULL
8,DragSourceEvent,3,DragSourceContext getDragSourceContext(),True,This method returns the DragSourceContext that originated the event.,"

getDragSourceContext
public DragSourceContext getDragSourceContext()
This method returns the DragSourceContext that
 originated the event.
 

Returns:
the DragSourceContext that originated the event


"
8,DragSourceEvent,4,int getDropAction(),False,,NULL
8,DragSourceEvent,5,int getModifiers(),False,,NULL
9,DropTarget,1,"DropTarget(Component target, DropTargetListener listener)",False,,NULL
9,DropTarget,2,void drop(DropTargetDropEvent dtde),True,Calls drop on the registered DropTargetListener and passes it the specified DropTargetDropEvent if this DropTarget is active.,"

drop
public void drop(DropTargetDropEvent dtde)
Calls drop on the registered
 DropTargetListener and passes it
 the specified DropTargetDropEvent
 if this DropTarget is active.

Specified by:
drop in interface DropTargetListener
Parameters:
dtde - the DropTargetDropEvent
Throws:
NullPointerException - if dtde is null
         and at least one of the following is true: this
         DropTarget is not active, or there is
         no a DropTargetListener registered.
See Also:
isActive()


"
9,DropTarget,3,void dragEnter(DropTargetDragEvent dtde),True,Calls dragEnter on the registered DropTargetListener and passes it the specified DropTargetDragEvent.,"

dragEnter
public void dragEnter(DropTargetDragEvent dtde)
Calls dragEnter on the registered
 DropTargetListener and passes it
 the specified DropTargetDragEvent.
 Has no effect if this DropTarget
 is not active.

Specified by:
dragEnter in interface DropTargetListener
Parameters:
dtde - the DropTargetDragEvent
Throws:
NullPointerException - if this DropTarget
         is active and dtde is null
See Also:
isActive()


"
9,DropTarget,4,void dragOver(DropTargetDragEvent dtde),True,Calls dragOver on the registered DropTargetListener and passes it the specified DropTargetDragEvent.,"

dragOver
public void dragOver(DropTargetDragEvent dtde)
Calls dragOver on the registered
 DropTargetListener and passes it
 the specified DropTargetDragEvent.
 Has no effect if this DropTarget
 is not active.

Specified by:
dragOver in interface DropTargetListener
Parameters:
dtde - the DropTargetDragEvent
Throws:
NullPointerException - if this DropTarget
         is active and dtde is null
See Also:
isActive()


"
9,DropTarget,5,void dropActionChanged(DropTargetDragEvent dtde),True,Calls dropActionChanged on the registered DropTargetListener and passes it the specified DropTargetDragEvent.,"

dropActionChanged
public void dropActionChanged(DropTargetDragEvent dtde)
Calls dropActionChanged on the registered
 DropTargetListener and passes it
 the specified DropTargetDragEvent.
 Has no effect if this DropTarget
 is not active.

Specified by:
dropActionChanged in interface DropTargetListener
Parameters:
dtde - the DropTargetDragEvent
Throws:
NullPointerException - if this DropTarget
         is active and dtde is null
See Also:
isActive()


"
10,DropTarget.DropTargetAutoScroller,1,void drop(DropTargetDropEvent dtde),False,,NULL
10,DropTarget.DropTargetAutoScroller,2,void dragEnter(DropTargetDragEvent dtde),False,,NULL
10,DropTarget.DropTargetAutoScroller,3,void dragOver(DropTargetDragEvent dtde),False,,NULL
10,DropTarget.DropTargetAutoScroller,4,void dragExit(DropTargetEvent dte),False,,NULL
10,DropTarget.DropTargetAutoScroller,5,void dropActionChanged(DropTargetDragEvent dtde),False,,NULL
11,DropTargetAdapter,1,void drop(DropTargetDropEvent dtde),False,,NULL
11,DropTargetAdapter,2,void dragEnter(DropTargetDragEvent dtde),True,"Called while a drag operation is ongoing, when the mouse pointer enters the operable part of the drop site for the DropTarget registered with this listener.","

dragEnter
public void dragEnter(DropTargetDragEvent dtde)
Called while a drag operation is ongoing, when the mouse pointer enters
 the operable part of the drop site for the DropTarget
 registered with this listener.

Specified by:
dragEnter in interface DropTargetListener
Parameters:
dtde - the DropTargetDragEvent


"
11,DropTargetAdapter,3,void dragOver(DropTargetDragEvent dtde),True,"Called when a drag operation is ongoing, while the mouse pointer is still over the operable part of the drop site for the DropTarget registered with this listener.","

dragOver
public void dragOver(DropTargetDragEvent dtde)
Called when a drag operation is ongoing, while the mouse pointer is still
 over the operable part of the drop site for the DropTarget
 registered with this listener.

Specified by:
dragOver in interface DropTargetListener
Parameters:
dtde - the DropTargetDragEvent


"
11,DropTargetAdapter,4,void dragExit(DropTargetEvent dte),True,"Called while a drag operation is ongoing, when the mouse pointer has exited the operable part of the drop site for the DropTarget registered with this listener.","

dragExit
public void dragExit(DropTargetEvent dte)
Called while a drag operation is ongoing, when the mouse pointer has
 exited the operable part of the drop site for the
 DropTarget registered with this listener.

Specified by:
dragExit in interface DropTargetListener
Parameters:
dte - the DropTargetEvent


"
11,DropTargetAdapter,5,void dropActionChanged(DropTargetDragEvent dtde),True,Called if the user has modified the current drop gesture.,"

dropActionChanged
public void dropActionChanged(DropTargetDragEvent dtde)
Called if the user has modified
 the current drop gesture.

Specified by:
dropActionChanged in interface DropTargetListener
Parameters:
dtde - the DropTargetDragEvent


"
12,DropTargetContext,1,"DropTargetContext(DropTarget dt, Component c)",False,,NULL
12,DropTargetContext,2,void dropComplete(boolean drop),True,This method signals that the drop is completed and if it was successful or not.,"

dropComplete
public void dropComplete(boolean success)
                  throws InvalidDnDOperationException
This method signals that the drop is completed and
 if it was successful or not.
 

Parameters:
success - true for success, false if not
 
Throws:
InvalidDnDOperationException - if a drop is not outstanding/extant


"
12,DropTargetContext,3,void dropEnter(DropTargetDragEvent dtde),False,,NULL
12,DropTargetContext,4,void dropExit(DropTargetEvent dte),False,,NULL
12,DropTargetContext,5,void drop(DropTargetDropEvent dtde),False,,NULL
13,DropTargetDragEvent,1,int getDropAction(),True,This method returns the user drop action.,"

getDropAction
public int getDropAction()
This method returns the user drop action.

Returns:
the user drop action


"
13,DropTargetDragEvent,2,java.awt.datatransfer.Transferable getTransferable(),False,,NULL
13,DropTargetDragEvent,3,java.awt.Point getLocation(),False,,NULL
13,DropTargetDragEvent,4,void consumeDrag(int action),False,,NULL
13,DropTargetDragEvent,5,void resetDragDistance(),False,,NULL
14,DropTargetDropEvent,1,"DropTargetDropEvent(java.awt.datatransfer.DropTargetContext context, int dropAction)",False,,NULL
14,DropTargetDropEvent,2,int getDropAction(),True,This method returns the user drop action.,"

getDropAction
public int getDropAction()
This method returns the user drop action.

Returns:
the user drop actions.


"
14,DropTargetDropEvent,3,java.awt.datatransfer.Transferable getTransferable(),False,,NULL
14,DropTargetDropEvent,4,java.awt.datatransfer.DataFlavor[] getDataFlavors(),False,,NULL
14,DropTargetDropEvent,5,boolean isDataFlavorSupported(java.awt.datatransfer.DataFlavor flavor),False,,NULL
15,DropTargetEvent,1,"DropTargetEvent(DropTargetContext context, DropTargetDragEvent dte)",False,,NULL
15,DropTargetEvent,2,"DropTargetEvent(DropTargetContext context, DropTargetDropEvent dte)",False,,NULL
15,DropTargetEvent,3,DropTargetContext getDropTargetContext(),True,This method returns the DropTargetContext associated with this DropTargetEvent.,"

getDropTargetContext
public DropTargetContext getDropTargetContext()
This method returns the DropTargetContext
 associated with this DropTargetEvent.
 

Returns:
the DropTargetContext


"
15,DropTargetEvent,4,DropTargetDragEvent getDropTargetDragEvent(),False,,NULL
15,DropTargetEvent,5,DropTargetDropEvent getDropTargetDropEvent(),False,,NULL
16,MouseDragGestureRecognizer,1,boolean canDecode(DropTargetContext context),False,,NULL
16,MouseDragGestureRecognizer,2,void dragEnter(DropTargetContext context),False,,NULL
16,MouseDragGestureRecognizer,3,void dragExit(DropTargetContext context),False,,NULL
16,MouseDragGestureRecognizer,4,void dragOver(DropTargetContext context),False,,NULL
16,MouseDragGestureRecognizer,5,void dropActionChanged(),False,,NULL
