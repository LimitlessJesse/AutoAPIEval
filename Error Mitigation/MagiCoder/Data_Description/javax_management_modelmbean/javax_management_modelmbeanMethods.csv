ClassName,Method,Return Type,Description,Full Description
DescriptorSupport,clone(),Object,Returns a new Descriptor which is a duplicate of the Descriptor.,"

clone
public Object clone()
             throws RuntimeOperationsException
Returns a new Descriptor which is a duplicate of the Descriptor.

Specified by:
clone in interface Descriptor
Overrides:
clone in class Object
Returns:
a clone of this instance.
Throws:
RuntimeOperationsException - for illegal value for
 field Names or field Values.  If the descriptor construction
 fails for any reason, this exception will be thrown.
See Also:
Cloneable


"
DescriptorSupport,equals(Object o),boolean,Compares this descriptor to the given object.,"

equals
public boolean equals(Object o)
Compares this descriptor to the given object.  The objects are equal if
 the given object is also a Descriptor, and if the two Descriptors have
 the same field names (possibly differing in case) and the same
 associated values.  The respective values for a field in the two
 Descriptors are equal if the following conditions hold:

 
If one value is null then the other must be too.
If one value is a primitive array then the other must be a primitive
 array of the same type with the same elements.
If one value is an object array then the other must be too and
 Arrays.deepEquals
 must return true.
Otherwise Object.equals(Object) must return true.


Specified by:
equals in interface Descriptor
Overrides:
equals in class Object
Parameters:
o - the object to compare with.
Returns:
true if the objects are the same; false
 otherwise.
See Also:
Object.hashCode(), 
HashMap


"
DescriptorSupport,getFieldNames(),String[],Returns all the field names in the descriptor.,"

getFieldNames
public String[] getFieldNames()
Description copied from interface: Descriptor
Returns all the field names in the descriptor.

Specified by:
getFieldNames in interface Descriptor
Returns:
String array of field names. If the descriptor is empty,
 you will get an empty array.


"
DescriptorSupport,getFields(),String[],Returns all of the fields contained in this descriptor as a string array.,"

getFields
public String[] getFields()
Description copied from interface: Descriptor
Returns all of the fields contained in this descriptor as a string array.

Specified by:
getFields in interface Descriptor
Returns:
String array of fields in the format fieldName=fieldValue
If the value of a field is not a String, then the toString() method
 will be called on it and the returned value, enclosed in parentheses,
 used as the value for the field in the returned array. If the value
 of a field is null, then the value of the field in the returned array
 will be empty.  If the descriptor is empty, you will get
 an empty array.
See Also:
Descriptor.setFields(java.lang.String[], java.lang.Object[])


"
DescriptorSupport,getFieldValue(String fieldName),Object,"Returns the value for a specific field name, or null if no value is present for that name.","

getFieldValue
public Object getFieldValue(String fieldName)
                     throws RuntimeOperationsException
Description copied from interface: Descriptor
Returns the value for a specific field name, or null if no value
 is present for that name.

Specified by:
getFieldValue in interface Descriptor
Parameters:
fieldName - the field name.
Returns:
the corresponding value, or null if the field is not present.
Throws:
RuntimeOperationsException - if the field name is illegal.


"
DescriptorSupport,getFieldValues(String... fieldNames),Object[],Returns all the field values in the descriptor as an array of Objects.,"

getFieldValues
public Object[] getFieldValues(String... fieldNames)
Description copied from interface: Descriptor
Returns all the field values in the descriptor as an array of Objects. The
 returned values are in the same order as the fieldNames String array parameter.

Specified by:
getFieldValues in interface Descriptor
Parameters:
fieldNames - String array of the names of the fields that
 the values should be returned for.  If the array is empty then
 an empty array will be returned.  If the array is null then all
 values will be returned, as if the parameter were the array
 returned by Descriptor.getFieldNames().  If a field name in the
 array does not exist, including the case where it is null or
 the empty string, then null is returned for the matching array
 element being returned.
Returns:
Object array of field values. If the list of fieldNames
 is empty, you will get an empty array.


"
DescriptorSupport,hashCode(),int,Returns the hash code value for this descriptor.,"

hashCode
public int hashCode()
Returns the hash code value for this descriptor.  The hash
 code is computed as the sum of the hash codes for each field in
 the descriptor.  The hash code of a field with name n
 and value v is n.toLowerCase().hashCode() ^ h.
 Here h is the hash code of v, computed as
 follows:

If v is null then h is 0.
If v is a primitive array then h is computed using
 the appropriate overloading of java.util.Arrays.hashCode.
If v is an object array then h is computed using
 Arrays.deepHashCode.
Otherwise h is v.hashCode().


Specified by:
hashCode in interface Descriptor
Overrides:
hashCode in class Object
Returns:
A hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
DescriptorSupport,isValid(),boolean,Returns true if all of the fields have legal values given their names.,"

isValid
public boolean isValid()
                throws RuntimeOperationsException
Returns true if all of the fields have legal values given their
 names.
 
 This implementation does not support  interoperating with a directory
 or lookup service. Thus, conforming to the specification, no checking is
 done on the ""export"" field.
 
 Otherwise this implementation returns false if:
 
 name and descriptorType fieldNames are not defined, or
 null, or empty, or not String
  class, role, getMethod, setMethod fieldNames, if defined,
 are null or not String
  persistPeriod, currencyTimeLimit, lastUpdatedTimeStamp,
 lastReturnedTimeStamp if defined, are null, or not a Numeric
 String or not a Numeric Value >= -1
  log fieldName, if defined, is null, or not a Boolean or
 not a String with value ""t"", ""f"", ""true"", ""false"". These String
 values must not be case sensitive.
  visibility fieldName, if defined, is null, or not a
 Numeric String or a not Numeric Value >= 1 and <= 4
  severity fieldName, if defined, is null, or not a Numeric
 String or not a Numeric Value >= 0 and <= 6
 persistPolicy fieldName, if defined, is null, or not one of
 the following strings:
   ""OnUpdate"", ""OnTimer"", ""NoMoreOftenThan"", ""OnUnregister"", ""Always"",
   ""Never"". These String values must not be case sensitive.


Specified by:
isValid in interface Descriptor
Returns:
true if the values are legal.
Throws:
RuntimeOperationsException - If the validity checking
 fails for any reason, this exception will be thrown.


"
DescriptorSupport,removeField(String fieldName),void,Removes a field from the descriptor.,"

removeField
public void removeField(String fieldName)
Description copied from interface: Descriptor
Removes a field from the descriptor.

Specified by:
removeField in interface Descriptor
Parameters:
fieldName - String name of the field to be removed.
 If the field name is illegal or the field is not found,
 no exception is thrown.


"
DescriptorSupport,"setField(String fieldName, Object fieldValue)",void,Sets the value for a specific field name.,"

setField
public void setField(String fieldName,
                     Object fieldValue)
              throws RuntimeOperationsException
Description copied from interface: Descriptor
Sets the value for a specific field name. This will
 modify an existing field or add a new field.
The field value will be validated before it is set.
 If it is not valid, then an exception will be thrown.
 The meaning of validity is dependent on the descriptor
 implementation.

Specified by:
setField in interface Descriptor
Parameters:
fieldName - The field name to be set. Cannot be null or empty.
fieldValue - The field value to be set for the field
 name. Can be null if that is a valid value for the field.
Throws:
RuntimeOperationsException - if the field name or field value
 is illegal (wrapped exception is IllegalArgumentException); or
 if the descriptor is immutable (wrapped exception is
 UnsupportedOperationException).


"
DescriptorSupport,"setFields(String[] fieldNames, Object[] fieldValues)",void,Sets all fields in the field names array to the new value with the same index in the field values array.,"

setFields
public void setFields(String[] fieldNames,
                      Object[] fieldValues)
               throws RuntimeOperationsException
Description copied from interface: Descriptor
Sets all fields in the field names array to the new value with
 the same index in the field values array. Array sizes must match.
The field value will be validated before it is set.
 If it is not valid, then an exception will be thrown.
 If the arrays are empty, then no change will take effect.

Specified by:
setFields in interface Descriptor
Parameters:
fieldNames - String array of field names. The array and array
 elements cannot be null.
fieldValues - Object array of the corresponding field values.
 The array cannot be null. Elements of the array can be null.
Throws:
RuntimeOperationsException - if the change fails for any reason.
 Wrapped exception is IllegalArgumentException if
 fieldNames or fieldValues is null, or if
 the arrays are of different lengths, or if there is an
 illegal value in one of them.
 Wrapped exception is UnsupportedOperationException
 if the descriptor is immutable, and the call would change
 its contents.
See Also:
Descriptor.getFields()


"
DescriptorSupport,toString(),String,Returns a human readable string representing the descriptor.,"

toString
public String toString()
Returns a human readable string representing the
 descriptor.  The string will be in the format of
 ""fieldName=fieldValue,fieldName2=fieldValue2,...""

 If there are no fields in the descriptor, then an empty String
 is returned.

 If a fieldValue is an object then the toString() method is
 called on it and its returned value is used as the value for
 the field enclosed in parenthesis.

Overrides:
toString in class Object
Returns:
a string representation of the object.
Throws:
RuntimeOperationsException - for illegal value for
 field Names or field Values.  If the descriptor string fails
 for any reason, this exception will be thrown.


"
DescriptorSupport,toXMLString(),String,Returns an XML String representing the descriptor.,"

toXMLString
public String toXMLString()
Returns an XML String representing the descriptor.
The format is not defined, but an implementation must
 ensure that the string returned by this method can be
 used to build an equivalent descriptor when instantiated
 using the constructor DescriptorSupport(String inStr).
Fields which are not String objects will have toString()
 called on them to create the value. The value will be
 enclosed in parentheses.  It is not guaranteed that you can
 reconstruct these objects unless they have been
 specifically set up to support toString() in a meaningful
 format and have a matching constructor that accepts a
 String in the same format.
If the descriptor is empty the following String is
 returned: <Descriptor></Descriptor>

Returns:
the XML string.
Throws:
RuntimeOperationsException - for illegal value for
 field Names or field Values.  If the XML formatted string
 construction fails for any reason, this exception will be
 thrown.


"
ModelMBeanAttributeInfo,clone(),Object,Creates and returns a new ModelMBeanAttributeInfo which is a duplicate of this ModelMBeanAttributeInfo.,"

clone
public Object clone()
Creates and returns a new ModelMBeanAttributeInfo which is a duplicate of this ModelMBeanAttributeInfo.

Overrides:
clone in class MBeanAttributeInfo
Returns:
a clone of this instance.
Throws:
RuntimeOperationsException - for illegal value for
 field Names or field Values.  If the descriptor construction
 fails for any reason, this exception will be thrown.
See Also:
Cloneable


"
ModelMBeanAttributeInfo,getDescriptor(),Descriptor,Gets a copy of the associated Descriptor for the ModelMBeanAttributeInfo.,"

getDescriptor
public Descriptor getDescriptor()
Gets a copy of the associated Descriptor for the
 ModelMBeanAttributeInfo.

Specified by:
getDescriptor in interface DescriptorRead
Overrides:
getDescriptor in class MBeanFeatureInfo
Returns:
Descriptor associated with the
 ModelMBeanAttributeInfo object.
See Also:
setDescriptor(javax.management.Descriptor)


"
ModelMBeanAttributeInfo,setDescriptor(Descriptor inDescriptor),void,Sets associated Descriptor (full replace) for the ModelMBeanAttributeDescriptor.,"

setDescriptor
public void setDescriptor(Descriptor inDescriptor)
Sets associated Descriptor (full replace) for the
 ModelMBeanAttributeDescriptor.  If the new Descriptor is
 null, then the associated Descriptor reverts to a default
 descriptor.  The Descriptor is validated before it is
 assigned.  If the new Descriptor is invalid, then a
 RuntimeOperationsException wrapping an
 IllegalArgumentException is thrown.

Specified by:
setDescriptor in interface DescriptorAccess
Parameters:
inDescriptor - replaces the Descriptor associated with the
 ModelMBeanAttributeInfo
Throws:
RuntimeOperationsException - Wraps an
 IllegalArgumentException for an invalid Descriptor
See Also:
getDescriptor()


"
ModelMBeanAttributeInfo,toString(),String,Returns a human-readable version of the ModelMBeanAttributeInfo instance.,"

toString
public String toString()
Returns a human-readable version of the
 ModelMBeanAttributeInfo instance.

Overrides:
toString in class MBeanAttributeInfo
Returns:
a string representation of the object.


"
ModelMBeanConstructorInfo,clone(),Object,Creates and returns a new ModelMBeanConstructorInfo which is a duplicate of this ModelMBeanConstructorInfo.,"

clone
public Object clone()
Creates and returns a new ModelMBeanConstructorInfo which is a duplicate of this ModelMBeanConstructorInfo.

Overrides:
clone in class MBeanConstructorInfo
Returns:
a clone of this instance.
See Also:
Cloneable


"
ModelMBeanConstructorInfo,getDescriptor(),Descriptor,Returns a copy of the associated Descriptor.,"

getDescriptor
public Descriptor getDescriptor()
Returns a copy of the associated Descriptor.

Specified by:
getDescriptor in interface DescriptorRead
Overrides:
getDescriptor in class MBeanFeatureInfo
Returns:
Descriptor associated with the
 ModelMBeanConstructorInfo object.
See Also:
setDescriptor(javax.management.Descriptor)


"
ModelMBeanConstructorInfo,setDescriptor(Descriptor inDescriptor),void,Sets associated Descriptor (full replace) of ModelMBeanConstructorInfo.,"

setDescriptor
public void setDescriptor(Descriptor inDescriptor)
Sets associated Descriptor (full replace) of
 ModelMBeanConstructorInfo.  If the new Descriptor is null,
 then the associated Descriptor reverts to a default
 descriptor.  The Descriptor is validated before it is
 assigned.  If the new Descriptor is invalid, then a
 RuntimeOperationsException wrapping an
 IllegalArgumentException is thrown.

Specified by:
setDescriptor in interface DescriptorAccess
Parameters:
inDescriptor - replaces the Descriptor associated with
 the ModelMBeanConstructor. If the descriptor does not
 contain all the following fields, the missing ones are added with
 their default values: displayName, name, role, descriptorType.
Throws:
RuntimeOperationsException - Wraps an
 IllegalArgumentException.  The descriptor is invalid, or
 descriptor field ""name"" is present but not equal to name
 parameter, or descriptor field ""descriptorType"" is present
 but not equal to ""operation"" or descriptor field ""role"" is
 present but not equal to ""constructor"".
See Also:
getDescriptor()


"
ModelMBeanConstructorInfo,toString(),String,Returns a string containing the entire contents of the ModelMBeanConstructorInfo in human readable form.,"

toString
public String toString()
Returns a string containing the entire contents of the ModelMBeanConstructorInfo in human readable form.

Overrides:
toString in class MBeanConstructorInfo
Returns:
a string representation of the object.


"
ModelMBeanInfoSupport,clone(),Object,Returns a shallow clone of this instance.,"

clone
public Object clone()
Returns a shallow clone of this instance.  Neither the Descriptor nor
 the contained arrays (ModelMBeanAttributeInfo[] etc) are
 cloned.  This method is chiefly of interest to modify the Descriptor
 of the clone via setDescriptor without affecting
 the Descriptor of the original object.

Specified by:
clone in interface ModelMBeanInfo
Overrides:
clone in class MBeanInfo
Returns:
a shallow clone of this instance.
See Also:
Cloneable


"
ModelMBeanInfoSupport,getAttribute(String inName),ModelMBeanAttributeInfo,Returns a ModelMBeanAttributeInfo requested by name.,"

getAttribute
public ModelMBeanAttributeInfo getAttribute(String inName)
                                     throws MBeanException,
                                            RuntimeOperationsException
Description copied from interface: ModelMBeanInfo
Returns a ModelMBeanAttributeInfo requested by name.

Specified by:
getAttribute in interface ModelMBeanInfo
Parameters:
inName - The name of the ModelMBeanAttributeInfo to get.
 If no ModelMBeanAttributeInfo exists for this name null is returned.
Returns:
the attribute info for the named attribute, or null
 if there is none.
Throws:
MBeanException - Wraps a distributed communication
 Exception.
RuntimeOperationsException - Wraps an
 IllegalArgumentException for a null attribute name.


"
ModelMBeanInfoSupport,getConstructor(String inName),ModelMBeanConstructorInfo,Returns the ModelMBeanConstructorInfo requested by name.,"

getConstructor
public ModelMBeanConstructorInfo getConstructor(String inName)
                                         throws MBeanException,
                                                RuntimeOperationsException
Returns the ModelMBeanConstructorInfo requested by name.
 If no ModelMBeanConstructorInfo exists for this name null is returned.

Parameters:
inName - the name of the constructor.
Returns:
the constructor info for the named constructor, or null
 if there is none.
Throws:
MBeanException - Wraps a distributed communication Exception.
RuntimeOperationsException - Wraps an IllegalArgumentException
            for a null constructor name.


"
ModelMBeanInfoSupport,getDescriptor(),Descriptor,Get the descriptor of this MBeanInfo.,"

getDescriptor
public Descriptor getDescriptor()
Description copied from class: MBeanInfo
Get the descriptor of this MBeanInfo.  Changing the returned value
 will have no affect on the original descriptor.

Specified by:
getDescriptor in interface DescriptorRead
Overrides:
getDescriptor in class MBeanInfo
Returns:
a descriptor that is either immutable or a copy of the original.
Since:
1.6


"
ModelMBeanInfoSupport,getDescriptor(String inDescriptorName),Descriptor,Returns a Descriptor requested by name.,"

getDescriptor
public Descriptor getDescriptor(String inDescriptorName)
                         throws MBeanException,
                                RuntimeOperationsException
Returns a Descriptor requested by name.

Parameters:
inDescriptorName - The name of the descriptor.
Returns:
Descriptor containing a descriptor for the ModelMBean with the
         same name. If no descriptor is found, null is returned.
Throws:
MBeanException - Wraps a distributed communication Exception.
RuntimeOperationsException - Wraps an IllegalArgumentException
            for null name.
See Also:
setDescriptor(javax.management.Descriptor, java.lang.String)


"
ModelMBeanInfoSupport,"getDescriptor(String inDescriptorName, String inDescriptorType)",Descriptor,Returns a Descriptor requested by name and descriptorType.,"

getDescriptor
public Descriptor getDescriptor(String inDescriptorName,
                                String inDescriptorType)
                         throws MBeanException,
                                RuntimeOperationsException
Description copied from interface: ModelMBeanInfo
Returns a Descriptor requested by name and descriptorType.

Specified by:
getDescriptor in interface ModelMBeanInfo
Parameters:
inDescriptorName - The name of the descriptor.
inDescriptorType - The type of the descriptor being
 requested.  If this is null or empty then all types are
 searched. Valid types are 'mbean', 'attribute', 'constructor'
 'operation', and 'notification'. This value will be equal to
 the 'descriptorType' field in the descriptor that is returned.
Returns:
Descriptor containing the descriptor for the ModelMBean
 with the same name and descriptorType.  If no descriptor is
 found, null is returned.
Throws:
MBeanException - Wraps a distributed communication Exception.
RuntimeOperationsException - Wraps an IllegalArgumentException for a null descriptor name or null or invalid type.
 The type must be ""mbean"",""attribute"", ""constructor"", ""operation"", or ""notification"".
See Also:
ModelMBeanInfo.setDescriptor(javax.management.Descriptor, java.lang.String)


"
ModelMBeanInfoSupport,getDescriptors(String inDescriptorType),Descriptor[],Returns a Descriptor array consisting of all Descriptors for the ModelMBeanInfo of type inDescriptorType.,"

getDescriptors
public Descriptor[] getDescriptors(String inDescriptorType)
                            throws MBeanException,
                                   RuntimeOperationsException
Description copied from interface: ModelMBeanInfo
Returns a Descriptor array consisting of all
 Descriptors for the ModelMBeanInfo of type inDescriptorType.

Specified by:
getDescriptors in interface ModelMBeanInfo
Parameters:
inDescriptorType - value of descriptorType field that must be set for the descriptor
 to be returned.  Must be ""mbean"", ""attribute"", ""operation"", ""constructor"" or ""notification"".
 If it is null or empty then all types will be returned.
Returns:
Descriptor array containing all descriptors for the ModelMBean if type inDescriptorType.
Throws:
MBeanException - Wraps a distributed communication Exception.
RuntimeOperationsException - Wraps an IllegalArgumentException when the descriptorType in parameter is
 not one of: ""mbean"", ""attribute"", ""operation"", ""constructor"", ""notification"", empty or null.
See Also:
ModelMBeanInfo.setDescriptors(javax.management.Descriptor[])


"
ModelMBeanInfoSupport,getMBeanDescriptor(),Descriptor,Returns the ModelMBean's descriptor which contains MBean wide policies.,"

getMBeanDescriptor
public Descriptor getMBeanDescriptor()
                              throws MBeanException
Description copied from interface: ModelMBeanInfo
Returns the ModelMBean's descriptor which contains MBean wide
 policies.  This descriptor contains metadata about the MBean and default
 policies for persistence and caching.

 The fields in the descriptor are defined, but not limited to, the
 following.  Note that when the Type in this table is Number, a String
 that is the decimal representation of a Long can also be used.

NameTypeMeaning
nameString
MBean name.
descriptorTypeString
Must be ""mbean"".
displayNameString
Name of MBean to be used in displays.
persistPolicyString
One of: OnUpdate|OnTimer|NoMoreOftenThan|OnUnregister|Always|Never.
         See the section ""MBean Descriptor Fields"" in the JMX specification
         document.
persistLocationString
The fully qualified directory name where the MBean should be
         persisted (if appropriate).
persistFileString
File name into which the MBean should be persisted.
persistPeriodNumber
Frequency of persist cycle in seconds, for OnTime and
         NoMoreOftenThan PersistPolicy
currencyTimeLimitNumber
How long cached value is valid: <0 never, =0 always,
         >0 seconds.
logString
t: log all notifications, f: log no notifications.
logfileString
Fully qualified filename to log events to.
visibilityNumber
1-4 where 1: always visible 4: rarely visible.
exportString
Name to be used to export/expose this MBean so that it is
         findable by other JMX Agents.
presentationStringString
XML formatted string to allow presentation of data to be
         associated with the MBean.


 The default descriptor is: name=className,descriptorType=""mbean"", displayName=className,
  persistPolicy=""never"",log=""F"",visibility=""1""
 If the descriptor does not contain all these fields, they will be added with these default values.

 Note: because of inconsistencies in previous versions of
 this specification, it is recommended not to use negative or zero
 values for currencyTimeLimit.  To indicate that a
 cached value is never valid, omit the
 currencyTimeLimit field.  To indicate that it is
 always valid, use a very large number for this field.

Specified by:
getMBeanDescriptor in interface ModelMBeanInfo
Returns:
the MBean descriptor.
Throws:
MBeanException - Wraps a distributed communication
 Exception.
See Also:
ModelMBeanInfo.setMBeanDescriptor(javax.management.Descriptor)


"
ModelMBeanInfoSupport,getNotification(String inName),ModelMBeanNotificationInfo,Returns a ModelMBeanNotificationInfo requested by name.,"

getNotification
public ModelMBeanNotificationInfo getNotification(String inName)
                                           throws MBeanException,
                                                  RuntimeOperationsException
Description copied from interface: ModelMBeanInfo
Returns a ModelMBeanNotificationInfo requested by name.

Specified by:
getNotification in interface ModelMBeanInfo
Parameters:
inName - The name of the ModelMBeanNotificationInfo to get.
 If no ModelMBeanNotificationInfo exists for this name null is returned.
Returns:
the info for the named notification, or null if there
 is none.
Throws:
MBeanException - Wraps a distributed communication Exception.
RuntimeOperationsException - Wraps an IllegalArgumentException for a null notification name.


"
ModelMBeanInfoSupport,getOperation(String inName),ModelMBeanOperationInfo,Returns a ModelMBeanOperationInfo requested by name.,"

getOperation
public ModelMBeanOperationInfo getOperation(String inName)
                                     throws MBeanException,
                                            RuntimeOperationsException
Description copied from interface: ModelMBeanInfo
Returns a ModelMBeanOperationInfo requested by name.

Specified by:
getOperation in interface ModelMBeanInfo
Parameters:
inName - The name of the ModelMBeanOperationInfo to get.
 If no ModelMBeanOperationInfo exists for this name null is returned.
Returns:
the operation info for the named operation, or null
 if there is none.
Throws:
MBeanException - Wraps a distributed communication Exception.
RuntimeOperationsException - Wraps an IllegalArgumentException for a null operation name.


"
ModelMBeanInfoSupport,"setDescriptor(Descriptor inDescriptor, String inDescriptorType)",void,Sets descriptors in the info array of type inDescriptorType for the ModelMBean.,"

setDescriptor
public void setDescriptor(Descriptor inDescriptor,
                          String inDescriptorType)
                   throws MBeanException,
                          RuntimeOperationsException
Description copied from interface: ModelMBeanInfo
Sets descriptors in the info array of type inDescriptorType
 for the ModelMBean.  The setDescriptor method of the
 corresponding ModelMBean*Info will be called to set the
 specified descriptor.

Specified by:
setDescriptor in interface ModelMBeanInfo
Parameters:
inDescriptor - The descriptor to be set in the
 ModelMBean. It must NOT be null.  All descriptors must have
 name and descriptorType fields.
inDescriptorType - The type of the descriptor being
 set. If this is null then the descriptorType field in the
 descriptor is used. If specified this value must be set in
 the descriptorType field in the descriptor. Must be
 ""mbean"",""attribute"", ""constructor"", ""operation"", or
 ""notification"".
Throws:
MBeanException - Wraps a distributed communication
 Exception.
RuntimeOperationsException - Wraps an
 IllegalArgumentException for illegal or null arguments or
 if the name field of the descriptor is not found in the
 corresponding MBeanAttributeInfo or MBeanConstructorInfo or
 MBeanNotificationInfo or MBeanOperationInfo.
See Also:
ModelMBeanInfo.getDescriptor(java.lang.String, java.lang.String)


"
ModelMBeanInfoSupport,setDescriptors(Descriptor[] inDescriptors),void,Adds or replaces descriptors in the ModelMBeanInfo.,"

setDescriptors
public void setDescriptors(Descriptor[] inDescriptors)
                    throws MBeanException,
                           RuntimeOperationsException
Description copied from interface: ModelMBeanInfo
Adds or replaces descriptors in the ModelMBeanInfo.

Specified by:
setDescriptors in interface ModelMBeanInfo
Parameters:
inDescriptors - The descriptors to be set in the ModelMBeanInfo. Null
 elements of the list will be ignored.  All descriptors must have name and descriptorType fields.
Throws:
MBeanException - Wraps a distributed communication Exception.
RuntimeOperationsException - Wraps an IllegalArgumentException for a null or invalid descriptor.
See Also:
ModelMBeanInfo.getDescriptors(java.lang.String)


"
ModelMBeanInfoSupport,setMBeanDescriptor(Descriptor inMBeanDescriptor),void,Sets the ModelMBean's descriptor.,"

setMBeanDescriptor
public void setMBeanDescriptor(Descriptor inMBeanDescriptor)
                        throws MBeanException,
                               RuntimeOperationsException
Description copied from interface: ModelMBeanInfo
Sets the ModelMBean's descriptor.  This descriptor contains default, MBean wide
 metadata about the MBean and default policies for persistence and caching. This operation
 does a complete replacement of the descriptor, no merging is done. If the descriptor to
 set to is null then the default descriptor will be created.
 The default descriptor is: name=className,descriptorType=""mbean"", displayName=className,
  persistPolicy=""never"",log=""F"",visibility=""1""
 If the descriptor does not contain all these fields, they will be added with these default values.

 See getMBeanDescriptor method javadoc for description of valid field names.

Specified by:
setMBeanDescriptor in interface ModelMBeanInfo
Parameters:
inMBeanDescriptor - the descriptor to set.
Throws:
MBeanException - Wraps a distributed communication Exception.
RuntimeOperationsException - Wraps an IllegalArgumentException  for invalid descriptor.
See Also:
ModelMBeanInfo.getMBeanDescriptor()


"
ModelMBeanNotificationInfo,clone(),Object,Creates and returns a new ModelMBeanNotificationInfo which is a duplicate of this ModelMBeanNotificationInfo.,"

clone
public Object clone()
Creates and returns a new ModelMBeanNotificationInfo which is a
 duplicate of this ModelMBeanNotificationInfo.

Overrides:
clone in class MBeanNotificationInfo
Returns:
a clone of this instance.
See Also:
Cloneable


"
ModelMBeanNotificationInfo,getDescriptor(),Descriptor,Returns a copy of the associated Descriptor for the ModelMBeanNotificationInfo.,"

getDescriptor
public Descriptor getDescriptor()
Returns a copy of the associated Descriptor for the
 ModelMBeanNotificationInfo.

Specified by:
getDescriptor in interface DescriptorRead
Overrides:
getDescriptor in class MBeanFeatureInfo
Returns:
Descriptor associated with the
 ModelMBeanNotificationInfo object.
See Also:
setDescriptor(javax.management.Descriptor)


"
ModelMBeanNotificationInfo,setDescriptor(Descriptor inDescriptor),void,"Sets associated Descriptor (full replace) for the ModelMBeanNotificationInfo If the new Descriptor is null, then the associated Descriptor reverts to a default descriptor.","

setDescriptor
public void setDescriptor(Descriptor inDescriptor)
Sets associated Descriptor (full replace) for the
 ModelMBeanNotificationInfo If the new Descriptor is null,
 then the associated Descriptor reverts to a default
 descriptor.  The Descriptor is validated before it is
 assigned.  If the new Descriptor is invalid, then a
 RuntimeOperationsException wrapping an
 IllegalArgumentException is thrown.

Specified by:
setDescriptor in interface DescriptorAccess
Parameters:
inDescriptor - replaces the Descriptor associated with the
 ModelMBeanNotification interface
Throws:
RuntimeOperationsException - Wraps an
 IllegalArgumentException for invalid Descriptor.
See Also:
getDescriptor()


"
ModelMBeanNotificationInfo,toString(),String,Returns a human readable string containing ModelMBeanNotificationInfo.,"

toString
public String toString()
Returns a human readable string containing
 ModelMBeanNotificationInfo.

Overrides:
toString in class MBeanNotificationInfo
Returns:
a string describing this object.


"
ModelMBeanOperationInfo,clone(),Object,Creates and returns a new ModelMBeanOperationInfo which is a duplicate of this ModelMBeanOperationInfo.,"

clone
public Object clone()
Creates and returns a new ModelMBeanOperationInfo which is a
 duplicate of this ModelMBeanOperationInfo.

Overrides:
clone in class MBeanOperationInfo
Returns:
a clone of this instance.
See Also:
Cloneable


"
ModelMBeanOperationInfo,getDescriptor(),Descriptor,Returns a copy of the associated Descriptor of the ModelMBeanOperationInfo.,"

getDescriptor
public Descriptor getDescriptor()
Returns a copy of the associated Descriptor of the
 ModelMBeanOperationInfo.

Specified by:
getDescriptor in interface DescriptorRead
Overrides:
getDescriptor in class MBeanFeatureInfo
Returns:
Descriptor associated with the
 ModelMBeanOperationInfo object.
See Also:
setDescriptor(javax.management.Descriptor)


"
ModelMBeanOperationInfo,setDescriptor(Descriptor inDescriptor),void,"Sets associated Descriptor (full replace) for the ModelMBeanOperationInfo If the new Descriptor is null, then the associated Descriptor reverts to a default descriptor.","

setDescriptor
public void setDescriptor(Descriptor inDescriptor)
Sets associated Descriptor (full replace) for the
 ModelMBeanOperationInfo If the new Descriptor is null, then
 the associated Descriptor reverts to a default descriptor.
 The Descriptor is validated before it is assigned.  If the
 new Descriptor is invalid, then a
 RuntimeOperationsException wrapping an
 IllegalArgumentException is thrown.

Specified by:
setDescriptor in interface DescriptorAccess
Parameters:
inDescriptor - replaces the Descriptor associated with the
 ModelMBeanOperation.
Throws:
RuntimeOperationsException - Wraps an
 IllegalArgumentException for invalid Descriptor.
See Also:
getDescriptor()


"
ModelMBeanOperationInfo,toString(),String,Returns a string containing the entire contents of the ModelMBeanOperationInfo in human readable form.,"

toString
public String toString()
Returns a string containing the entire contents of the
 ModelMBeanOperationInfo in human readable form.

Overrides:
toString in class MBeanOperationInfo
Returns:
a string representation of the object.


"
RequiredModelMBean,"addAttributeChangeNotificationListener(NotificationListener inlistener, String inAttributeName, Object inhandback)",void,Registers an object which implements the NotificationListener interface as a listener.,"

addAttributeChangeNotificationListener
public void addAttributeChangeNotificationListener(NotificationListener inlistener,
                                                   String inAttributeName,
                                                   Object inhandback)
                                            throws MBeanException,
                                                   RuntimeOperationsException,
                                                   IllegalArgumentException
Description copied from interface: ModelMBeanNotificationBroadcaster
Registers an object which implements the NotificationListener interface as a listener.  This
 object's 'handleNotification()' method will be invoked when any attributeChangeNotification is issued through
 or by the ModelMBean.  This does not include other Notifications.  They must be registered
 for independently. An AttributeChangeNotification will be generated for this attributeName.

Specified by:
addAttributeChangeNotificationListener in interface ModelMBeanNotificationBroadcaster
Parameters:
inlistener - The listener object which will handles notifications emitted by the registered MBean.
inAttributeName - The name of the ModelMBean attribute for which to receive change notifications.
      If null, then all attribute changes will cause an attributeChangeNotification to be issued.
inhandback - The context to be sent to the listener with the notification when a notification is emitted.
Throws:
MBeanException - Wraps a distributed communication Exception.
RuntimeOperationsException - Wraps an IllegalArgumentException The attribute name passed in parameter does not exist.
IllegalArgumentException - The listener cannot be null.
See Also:
ModelMBeanNotificationBroadcaster.removeAttributeChangeNotificationListener(javax.management.NotificationListener, java.lang.String)


"
RequiredModelMBean,"addNotificationListener(NotificationListener listener, NotificationFilter filter, Object handback)",void,Registers an object which implements the NotificationListener interface as a listener.,"

addNotificationListener
public void addNotificationListener(NotificationListener listener,
                                    NotificationFilter filter,
                                    Object handback)
                             throws IllegalArgumentException
Registers an object which implements the NotificationListener
 interface as a listener.  This
 object's 'handleNotification()' method will be invoked when any
 notification is issued through or by the ModelMBean.  This does
 not include attributeChangeNotifications.  They must be registered
 for independently.

Specified by:
addNotificationListener in interface NotificationBroadcaster
Parameters:
listener - The listener object which will handles
        notifications emitted by the registered MBean.
filter - The filter object. If null, no filtering will be
        performed before handling notifications.
handback - The context to be sent to the listener with
        the notification when a notification is emitted.
Throws:
IllegalArgumentException - The listener cannot be null.
See Also:
removeNotificationListener(javax.management.NotificationListener)


"
RequiredModelMBean,getAttribute(String attrName),Object,Returns the value of a specific attribute defined for this ModelMBean.,"

getAttribute
public Object getAttribute(String attrName)
                    throws AttributeNotFoundException,
                           MBeanException,
                           ReflectionException
Returns the value of a specific attribute defined for this
 ModelMBean.
 The last value returned by an attribute may be cached in the
 attribute's descriptor.
 The valid value will be in the 'value' field if there is one.
 If the 'currencyTimeLimit' field in the descriptor is:
 
 <0 Then the value is not cached and is never valid.
       The getter method is invoked for the attribute.
       The 'value' and 'lastUpdatedTimeStamp' fields are cleared.
 =0 Then the value is always cached and always valid.
       The 'value' field is returned. If there is no'value' field
       then the getter method is invoked for the attribute.
       The 'lastUpdatedTimeStamp' field and `value' fields are set
       to the attribute's value and the current time stamp.
 >0 Represents the number of seconds that the 'value'
       field is valid.
       The 'value' field is no longer valid when
       'lastUpdatedTimeStamp' + 'currencyTimeLimit' > Now.
   
When 'value' is valid, 'value' is returned.
When 'value' is no longer valid then the getter
            method is invoked for the attribute.
            The 'lastUpdatedTimeStamp' field and `value' fields
            are updated.


Note: because of inconsistencies in previous versions of
 this specification, it is recommended not to use negative or zero
 values for currencyTimeLimit.  To indicate that a
 cached value is never valid, omit the
 currencyTimeLimit field.  To indicate that it is
 always valid, use a very large number for this field.
If the 'getMethod' field contains the name of a valid
 operation descriptor, then the method described by the
 operation descriptor is executed.  The response from the
 method is returned as the value of the attribute.  If the
 operation fails or the returned value is not compatible with
 the declared type of the attribute, an exception will be thrown.
If no 'getMethod' field is defined then the default value of the
 attribute is returned. If the returned value is not compatible with
 the declared type of the attribute, an exception will be thrown.
The declared type of the attribute is the String returned by
 MBeanAttributeInfo.getType().  A value is compatible
 with this type if one of the following is true:
 
the value is null;
the declared name is a primitive type name (such as ""int"")
     and the value is an instance of the corresponding wrapper
     type (such as java.lang.Integer);
the name of the value's class is identical to the declared name;
the declared name can be loaded by the value's class loader and
     produces a class to which the value can be assigned.

In this implementation, in every case where the getMethod needs to
 be called, because the method is invoked through the standard ""invoke""
 method and thus needs operationInfo, an operation must be specified
 for that getMethod so that the invocation works correctly.

Specified by:
getAttribute in interface DynamicMBean
Parameters:
attrName - A String specifying the name of the
 attribute to be retrieved. It must match the name of a
 ModelMBeanAttributeInfo.
Returns:
The value of the retrieved attribute from the
 descriptor 'value' field or from the invocation of the
 operation in the 'getMethod' field of the descriptor.
Throws:
AttributeNotFoundException - The specified attribute is
    not accessible in the MBean.
    The following cases may result in an AttributeNotFoundException:
    
 No ModelMBeanInfo was found for the Model MBean.
 No ModelMBeanAttributeInfo was found for the specified
           attribute name.
 The ModelMBeanAttributeInfo isReadable method returns
           'false'.

MBeanException - Wraps one of the following Exceptions:
    
 InvalidAttributeValueException: A wrong value type
           was received from the attribute's getter method or
           no 'getMethod' field defined in the descriptor for
           the attribute and no default value exists.
 ServiceNotFoundException: No
           ModelMBeanOperationInfo defined for the attribute's
           getter method or no descriptor associated with the
           ModelMBeanOperationInfo or the managed resource is
           null.
 InvalidTargetObjectTypeException The 'targetType'
           field value is not 'objectReference'.
 An Exception thrown by the managed object's getter.

ReflectionException - Wraps an Exception
    thrown while trying to invoke the getter.
RuntimeOperationsException - Wraps an
    IllegalArgumentException: The attribute name in
    parameter is null.
See Also:
setAttribute(javax.management.Attribute)


"
RequiredModelMBean,getAttributes(String[] attrNames),AttributeList,Returns the values of several attributes in the ModelMBean.,"

getAttributes
public AttributeList getAttributes(String[] attrNames)
Returns the values of several attributes in the ModelMBean.
 Executes a getAttribute for each attribute name in the
 attrNames array passed in.

Specified by:
getAttributes in interface DynamicMBean
Parameters:
attrNames - A String array of names of the attributes
 to be retrieved.
Returns:
The array of the retrieved attributes.
Throws:
RuntimeOperationsException - Wraps an
 IllegalArgumentException: The object name in parameter is
 null or attributes in parameter is null.
See Also:
setAttributes(javax.management.AttributeList)


"
RequiredModelMBean,getClassLoaderRepository(),protected ClassLoaderRepository,Return the Class Loader Repository used to perform class loading.,"

getClassLoaderRepository
protected ClassLoaderRepository getClassLoaderRepository()
Return the Class Loader Repository used to perform class loading.
 Subclasses may wish to redefine this method in order to return
 the appropriate ClassLoaderRepository
 that should be used in this object.

Returns:
the Class Loader Repository.


"
RequiredModelMBean,getMBeanInfo(),MBeanInfo,"Returns the attributes, operations, constructors and notifications that this RequiredModelMBean exposes for management.","

getMBeanInfo
public MBeanInfo getMBeanInfo()
Returns the attributes, operations, constructors and notifications
 that this RequiredModelMBean exposes for management.

Specified by:
getMBeanInfo in interface DynamicMBean
Returns:
An instance of ModelMBeanInfo allowing retrieval all
          attributes, operations, and Notifications of this MBean.


"
RequiredModelMBean,getNotificationInfo(),MBeanNotificationInfo[],Returns the array of Notifications always generated by the RequiredModelMBean.,"

getNotificationInfo
public MBeanNotificationInfo[] getNotificationInfo()
Returns the array of Notifications always generated by the
 RequiredModelMBean.
 

 RequiredModelMBean may always send also two additional notifications:
 
 One with descriptor ""name=GENERIC,descriptorType=notification,log=T,severity=6,displayName=jmx.modelmbean.generic""
 Second is a standard attribute change notification
        with descriptor ""name=ATTRIBUTE_CHANGE,descriptorType=notification,log=T,severity=6,displayName=jmx.attribute.change""

 Thus these two notifications are always added to those specified
 by the application.

Specified by:
getNotificationInfo in interface NotificationBroadcaster
Returns:
MBeanNotificationInfo[]


"
RequiredModelMBean,"invoke(String opName, Object[] opArgs, String[] sig)",Object,Invokes a method on or through a RequiredModelMBean and returns the result of the method execution.,"

invoke
public Object invoke(String opName,
                     Object[] opArgs,
                     String[] sig)
              throws MBeanException,
                     ReflectionException
Invokes a method on or through a RequiredModelMBean and returns
 the result of the method execution.
 
 If the given method to be invoked, together with the provided
 signature, matches one of RequiredModelMbean
 accessible methods, this one will be call. Otherwise the call to
 the given method will be tried on the managed resource.
 
 The last value returned by an operation may be cached in
 the operation's descriptor which
 is in the ModelMBeanOperationInfo's descriptor.
 The valid value will be in the 'value' field if there is one.
 If the 'currencyTimeLimit' field in the descriptor is:
 
<0 Then the value is not cached and is never valid.
      The operation method is invoked.
      The 'value' and 'lastUpdatedTimeStamp' fields are cleared.
=0 Then the value is always cached and always valid.
      The 'value' field is returned. If there is no 'value' field
      then the operation method is invoked for the attribute.
      The 'lastUpdatedTimeStamp' field and `value' fields are set to
      the operation's return value and the current time stamp.
>0 Represents the number of seconds that the 'value'
      field is valid.
      The 'value' field is no longer valid when
      'lastUpdatedTimeStamp' + 'currencyTimeLimit' > Now.
      
When 'value' is valid, 'value' is returned.
When 'value' is no longer valid then the operation
             method is invoked. The 'lastUpdatedTimeStamp' field
             and `value' fields are updated.



Note: because of inconsistencies in previous versions of
 this specification, it is recommended not to use negative or zero
 values for currencyTimeLimit.  To indicate that a
 cached value is never valid, omit the
 currencyTimeLimit field.  To indicate that it is
 always valid, use a very large number for this field.

Specified by:
invoke in interface DynamicMBean
Parameters:
opName - The name of the method to be invoked. The
     name can be the fully qualified method name including the
     classname, or just the method name if the classname is
     defined in the 'class' field of the operation descriptor.
opArgs - An array containing the parameters to be set
     when the operation is invoked
sig - An array containing the signature of the
     operation. The class objects will be loaded using the same
     class loader as the one used for loading the MBean on which
     the operation was invoked.
Returns:
The object returned by the method, which represents the
     result of invoking the method on the specified managed resource.
Throws:
MBeanException - Wraps one of the following Exceptions:
 
 An Exception thrown by the managed object's invoked method.
 ServiceNotFoundException: No ModelMBeanOperationInfo or
      no descriptor defined for the specified operation or the managed
      resource is null.
 InvalidTargetObjectTypeException: The 'targetType'
      field value is not 'objectReference'.

ReflectionException - Wraps an Exception
      thrown while trying to invoke the method.
RuntimeOperationsException - Wraps an
      IllegalArgumentException Method name is null.


"
RequiredModelMBean,load(),void,Instantiates this MBean instance with the data found for the MBean in the persistent store.,"

load
public void load()
          throws MBeanException,
                 RuntimeOperationsException,
                 InstanceNotFoundException
Instantiates this MBean instance with the data found for
 the MBean in the persistent store.  The data loaded could include
 attribute and operation values.
This method should be called during construction or
 initialization of this instance, and before the MBean is
 registered with the MBeanServer.
If the implementation of this class does not support
 persistence, an MBeanException wrapping a ServiceNotFoundException is thrown.

Specified by:
load in interface PersistentMBean
Throws:
MBeanException - Wraps another exception, or
 persistence is not supported
RuntimeOperationsException - Wraps exceptions from the
 persistence mechanism
InstanceNotFoundException - Could not find or load
 this MBean from persistent storage


"
RequiredModelMBean,postDeregister(),void,Allows the MBean to perform any operations needed after having been unregistered in the MBean server.,"

postDeregister
public void postDeregister()
Allows the MBean to perform any operations needed after having been
 unregistered in the MBean server.
 
 In order to ensure proper run-time semantics of RequireModelMBean,
 Any subclass of RequiredModelMBean overloading or overriding this
 method should call super.postDeregister() in its own
 postDeregister implementation.

Specified by:
postDeregister in interface MBeanRegistration


"
RequiredModelMBean,postRegister(Boolean registrationDone),void,Allows the MBean to perform any operations needed after having been registered in the MBean server or after the registration has failed.,"

postRegister
public void postRegister(Boolean registrationDone)
Allows the MBean to perform any operations needed after having been
 registered in the MBean server or after the registration has failed.
 
 In order to ensure proper run-time semantics of RequireModelMBean,
 Any subclass of RequiredModelMBean overloading or overriding this
 method should call super.postRegister(registrationDone)
 in its own postRegister implementation.

Specified by:
postRegister in interface MBeanRegistration
Parameters:
registrationDone - Indicates whether or not the MBean has
 been successfully registered in the MBean server. The value
 false means that the registration phase has failed.


"
RequiredModelMBean,preDeregister(),void,Allows the MBean to perform any operations it needs before being unregistered by the MBean server.,"

preDeregister
public void preDeregister()
                   throws Exception
Allows the MBean to perform any operations it needs before
 being unregistered by the MBean server.
 
 In order to ensure proper run-time semantics of RequireModelMBean,
 Any subclass of RequiredModelMBean overloading or overriding this
 method should call super.preDeregister() in its own
 preDeregister implementation.

Specified by:
preDeregister in interface MBeanRegistration
Throws:
Exception - This exception will be caught by
 the MBean server and re-thrown as an
 MBeanRegistrationException.


"
RequiredModelMBean,"preRegister(MBeanServer server, ObjectName name)",ObjectName,Allows the MBean to perform any operations it needs before being registered in the MBean server.,"

preRegister
public ObjectName preRegister(MBeanServer server,
                              ObjectName name)
                       throws Exception
Allows the MBean to perform any operations it needs before
 being registered in the MBean server.  If the name of the MBean
 is not specified, the MBean can provide a name for its
 registration.  If any exception is raised, the MBean will not be
 registered in the MBean server.
 
 In order to ensure proper run-time semantics of RequireModelMBean,
 Any subclass of RequiredModelMBean overloading or overriding this
 method should call super.preRegister(server, name)
 in its own preRegister implementation.

Specified by:
preRegister in interface MBeanRegistration
Parameters:
server - The MBean server in which the MBean will be registered.
name - The object name of the MBean.  This name is null if
 the name parameter to one of the createMBean or
 registerMBean methods in the MBeanServer
 interface is null.  In that case, this method must return a
 non-null ObjectName for the new MBean.
Returns:
The name under which the MBean is to be registered.
 This value must not be null.  If the name
 parameter is not null, it will usually but not necessarily be
 the returned value.
Throws:
Exception - This exception will be caught by
 the MBean server and re-thrown as an
 MBeanRegistrationException.


"
RequiredModelMBean,"removeAttributeChangeNotificationListener(NotificationListener inlistener, String inAttributeName)",void,Removes a listener for attributeChangeNotifications from the RequiredModelMBean.,"

removeAttributeChangeNotificationListener
public void removeAttributeChangeNotificationListener(NotificationListener inlistener,
                                                      String inAttributeName)
                                               throws MBeanException,
                                                      RuntimeOperationsException,
                                                      ListenerNotFoundException
Description copied from interface: ModelMBeanNotificationBroadcaster
Removes a listener for attributeChangeNotifications from the RequiredModelMBean.

Specified by:
removeAttributeChangeNotificationListener in interface ModelMBeanNotificationBroadcaster
Parameters:
inlistener - The listener name which was handling notifications emitted by the registered MBean.
 This method will remove all information related to this listener.
inAttributeName - The attribute for which the listener no longer wants to receive attributeChangeNotifications.
 If null the listener will be removed for all attributeChangeNotifications.
Throws:
MBeanException - Wraps a distributed communication Exception.
RuntimeOperationsException - Wraps an IllegalArgumentException If the inAttributeName parameter does not
 correspond to an attribute name.
ListenerNotFoundException - The listener is not registered in the MBean or is null.
See Also:
ModelMBeanNotificationBroadcaster.addAttributeChangeNotificationListener(javax.management.NotificationListener, java.lang.String, java.lang.Object)


"
RequiredModelMBean,removeNotificationListener(NotificationListener listener),void,Removes a listener for Notifications from the RequiredModelMBean.,"

removeNotificationListener
public void removeNotificationListener(NotificationListener listener)
                                throws ListenerNotFoundException
Removes a listener for Notifications from the RequiredModelMBean.

Specified by:
removeNotificationListener in interface NotificationBroadcaster
Parameters:
listener - The listener name which was handling notifications
    emitted by the registered MBean.
    This method will remove all information related to this listener.
Throws:
ListenerNotFoundException - The listener is not registered
    in the MBean or is null.
See Also:
addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)


"
RequiredModelMBean,"removeNotificationListener(NotificationListener listener, NotificationFilter filter, Object handback)",void,Removes a listener from this MBean.,"

removeNotificationListener
public void removeNotificationListener(NotificationListener listener,
                                       NotificationFilter filter,
                                       Object handback)
                                throws ListenerNotFoundException
Description copied from interface: NotificationEmitter
Removes a listener from this MBean.  The MBean must have a
 listener that exactly matches the given listener,
 filter, and handback parameters.  If
 there is more than one such listener, only one is removed.
The filter and handback parameters
 may be null if and only if they are null in a listener to be
 removed.

Specified by:
removeNotificationListener in interface NotificationEmitter
Parameters:
listener - A listener that was previously added to this
 MBean.
filter - The filter that was specified when the listener
 was added.
handback - The handback that was specified when the listener was
 added.
Throws:
ListenerNotFoundException - The listener is not
 registered with the MBean, or it is not registered with the
 given filter and handback.


"
RequiredModelMBean,"sendAttributeChangeNotification(Attribute inOldVal, Attribute inNewVal)",void,Sends an attributeChangeNotification which contains the old value and new value for the attribute to the registered AttributeChangeNotification listeners on the ModelMBean.,"

sendAttributeChangeNotification
public void sendAttributeChangeNotification(Attribute inOldVal,
                                            Attribute inNewVal)
                                     throws MBeanException,
                                            RuntimeOperationsException
Description copied from interface: ModelMBeanNotificationBroadcaster
Sends an attributeChangeNotification which contains the old value and new value for the
 attribute to the registered AttributeChangeNotification listeners on the ModelMBean.
 

Specified by:
sendAttributeChangeNotification in interface ModelMBeanNotificationBroadcaster
Parameters:
inOldVal - The original value for the Attribute
inNewVal - The current value for the Attribute
 
 The constructed attributeChangeNotification will be:
   type        ""jmx.attribute.change""
   source      this ModelMBean instance
   sequence    1
   attributeName oldValue.getName()
   attributeType oldValue's class
   attributeOldValue oldValue.getValue()
   attributeNewValue newValue.getValue()
 
Throws:
MBeanException - Wraps a distributed communication Exception.
RuntimeOperationsException - Wraps an IllegalArgumentException: An Attribute object passed in parameter is null
 or the names of the two Attribute objects in parameter are not the same.


"
RequiredModelMBean,sendAttributeChangeNotification(AttributeChangeNotification ntfyObj),void,Sends an attributeChangeNotification which is passed in to the registered attributeChangeNotification listeners on the ModelMBean.,"

sendAttributeChangeNotification
public void sendAttributeChangeNotification(AttributeChangeNotification ntfyObj)
                                     throws MBeanException,
                                            RuntimeOperationsException
Description copied from interface: ModelMBeanNotificationBroadcaster
Sends an attributeChangeNotification which is passed in to
 the registered attributeChangeNotification listeners on the
 ModelMBean.

Specified by:
sendAttributeChangeNotification in interface ModelMBeanNotificationBroadcaster
Parameters:
ntfyObj - The notification which is to be passed
 to the 'handleNotification' method of the listener object.
Throws:
MBeanException - Wraps a distributed communication Exception.
RuntimeOperationsException - Wraps an IllegalArgumentException: The AttributeChangeNotification object passed in parameter is null.


"
RequiredModelMBean,sendNotification(Notification ntfyObj),void,Sends a Notification which is passed in to the registered Notification listeners on the ModelMBean as a jmx.modelmbean.generic notification.,"

sendNotification
public void sendNotification(Notification ntfyObj)
                      throws MBeanException,
                             RuntimeOperationsException
Description copied from interface: ModelMBeanNotificationBroadcaster
Sends a Notification which is passed in to the registered
 Notification listeners on the ModelMBean as a
 jmx.modelmbean.generic notification.

Specified by:
sendNotification in interface ModelMBeanNotificationBroadcaster
Parameters:
ntfyObj - The notification which is to be passed to
 the 'handleNotification' method of the listener object.
Throws:
MBeanException - Wraps a distributed communication Exception.
RuntimeOperationsException - Wraps an IllegalArgumentException:
       The Notification object passed in parameter is null.


"
RequiredModelMBean,sendNotification(String ntfyText),void,Sends a Notification which contains the text string that is passed in to the registered Notification listeners on the ModelMBean.,"

sendNotification
public void sendNotification(String ntfyText)
                      throws MBeanException,
                             RuntimeOperationsException
Description copied from interface: ModelMBeanNotificationBroadcaster
Sends a Notification which contains the text string that is passed in
 to the registered Notification listeners on the ModelMBean.

Specified by:
sendNotification in interface ModelMBeanNotificationBroadcaster
Parameters:
ntfyText - The text which is to be passed in the Notification to the 'handleNotification'
 method of the listener object.
 the constructed Notification will be:
   type        ""jmx.modelmbean.generic""
   source      this ModelMBean instance
   sequence    1
Throws:
MBeanException - Wraps a distributed communication Exception.
RuntimeOperationsException - Wraps an IllegalArgumentException:
       The Notification text string passed in parameter is null.


"
RequiredModelMBean,setAttribute(Attribute attribute),void,Sets the value of a specific attribute of a named ModelMBean.,"

setAttribute
public void setAttribute(Attribute attribute)
                  throws AttributeNotFoundException,
                         InvalidAttributeValueException,
                         MBeanException,
                         ReflectionException
Sets the value of a specific attribute of a named ModelMBean.

 If the 'setMethod' field of the attribute's descriptor
 contains the name of a valid operation descriptor, then the
 method described by the operation descriptor is executed.
 In this implementation, the operation descriptor must be specified
 correctly and assigned to the modelMBeanInfo so that the 'setMethod'
 works correctly.
 The response from the method is set as the value of the attribute
 in the descriptor.

 If currencyTimeLimit is > 0, then the new value for the
 attribute is cached in the attribute descriptor's
 'value' field and the 'lastUpdatedTimeStamp' field is set to
 the current time stamp.

 If the persist field of the attribute's descriptor is not null
 then Persistence policy from the attribute descriptor is used to
 guide storing the attribute in a persistent store.
 Store the MBean if 'persistPolicy' field is:
 
 != ""never""
 = ""always""
 = ""onUpdate""
 = ""onTimer"" and now > 'lastPersistTime' + 'persistPeriod'
 = ""NoMoreOftenThan"" and now > 'lastPersistTime' +
         'persistPeriod'

 Do not store the MBean if 'persistPolicy' field is:
 
 = ""never""
 = = ""onTimer"" && now < 'lastPersistTime' + 'persistPeriod'
 = ""onUnregister""
 = = ""NoMoreOftenThan"" and now < 'lastPersistTime' +
        'persistPeriod'

The ModelMBeanInfo of the Model MBean is stored in a file.

Specified by:
setAttribute in interface DynamicMBean
Parameters:
attribute - The Attribute instance containing the name of
        the attribute to be set and the value it is to be set to.
Throws:
AttributeNotFoundException - The specified attribute is
   not accessible in the MBean.
   The following cases may result in an AttributeNotFoundException:
   
 No ModelMBeanAttributeInfo is found for the specified
          attribute.
 The ModelMBeanAttributeInfo's isWritable method returns
          'false'.

InvalidAttributeValueException - No descriptor is defined
   for the specified attribute.
MBeanException - Wraps one of the following Exceptions:
   
 An Exception thrown by the managed object's setter.
 A ServiceNotFoundException if a setMethod field is
          defined in the descriptor for the attribute and the managed
          resource is null; or if no setMethod field is defined and
          caching is not enabled for the attribute.
          Note that if there is no getMethod field either, then caching
          is automatically enabled.
 InvalidTargetObjectTypeException The 'targetType'
          field value is not 'objectReference'.
 An Exception thrown by the managed object's getter.

ReflectionException - Wraps an Exception
   thrown while trying to invoke the setter.
RuntimeOperationsException - Wraps an
   IllegalArgumentException: The attribute in parameter is
   null.
See Also:
getAttribute(java.lang.String)


"
RequiredModelMBean,setAttributes(AttributeList attributes),AttributeList,Sets the values of an array of attributes of this ModelMBean.,"

setAttributes
public AttributeList setAttributes(AttributeList attributes)
Sets the values of an array of attributes of this ModelMBean.
 Executes the setAttribute() method for each attribute in the list.

Specified by:
setAttributes in interface DynamicMBean
Parameters:
attributes - A list of attributes: The identification of the
 attributes to be set and  the values they are to be set to.
Returns:
The array of attributes that were set, with their new
    values in Attribute instances.
Throws:
RuntimeOperationsException - Wraps an
   IllegalArgumentException: The object name in parameter
   is null or attributes in parameter is null.
See Also:
getAttributes(java.lang.String[])


"
RequiredModelMBean,"setManagedResource(Object mr, String mr_type)",void,Sets the instance handle of the object against which to execute all methods in this ModelMBean management interface (MBeanInfo and Descriptors).,"

setManagedResource
public void setManagedResource(Object mr,
                               String mr_type)
                        throws MBeanException,
                               RuntimeOperationsException,
                               InstanceNotFoundException,
                               InvalidTargetObjectTypeException
Sets the instance handle of the object against which to
 execute all methods in this ModelMBean management interface
 (MBeanInfo and Descriptors).

Specified by:
setManagedResource in interface ModelMBean
Parameters:
mr - Object that is the managed resource
mr_type - The type of reference for the managed resource.
     Can be: ""ObjectReference"", ""Handle"", ""IOR"", ""EJBHandle"",
         or ""RMIReference"".
     In this implementation only ""ObjectReference"" is supported.
Throws:
MBeanException - The initializer of the object has
            thrown an exception.
InstanceNotFoundException - The managed resource
            object could not be found
InvalidTargetObjectTypeException - The managed
            resource type should be ""ObjectReference"".
RuntimeOperationsException - Wraps a RuntimeException when setting the resource.


"
RequiredModelMBean,setModelMBeanInfo(ModelMBeanInfo mbi),void,Initializes a ModelMBean object using ModelMBeanInfo passed in.,"

setModelMBeanInfo
public void setModelMBeanInfo(ModelMBeanInfo mbi)
                       throws MBeanException,
                              RuntimeOperationsException
Initializes a ModelMBean object using ModelMBeanInfo passed in.
 This method makes it possible to set a customized ModelMBeanInfo on
 the ModelMBean as long as it is not registered with the MBeanServer.
 
 Once the ModelMBean's ModelMBeanInfo (with Descriptors) are
 customized and set on the ModelMBean, the  ModelMBean be
 registered with the MBeanServer.
 
 If the ModelMBean is currently registered, this method throws
 a RuntimeOperationsException wrapping an
 IllegalStateException

 If the given inModelMBeanInfo does not contain any
 ModelMBeanNotificationInfo for the GENERIC
 or ATTRIBUTE_CHANGE notifications, then the
 RequiredModelMBean will supply its own default
 ModelMBeanNotificationInfos for
 those missing notifications.

Specified by:
setModelMBeanInfo in interface ModelMBean
Parameters:
mbi - The ModelMBeanInfo object to be used
        by the ModelMBean.
Throws:
MBeanException - Wraps a distributed communication
        Exception.
RuntimeOperationsException - Wraps an IllegalArgumentException if
         the MBeanInfo passed in parameter is null.
Wraps an IllegalStateException if the ModelMBean
         is currently registered in the MBeanServer.



"
RequiredModelMBean,store(),void,Captures the current state of this MBean instance and writes it out to the persistent store.,"

store
public void store()
           throws MBeanException,
                  RuntimeOperationsException,
                  InstanceNotFoundException
Captures the current state of this MBean instance and writes
 it out to the persistent store.  The state stored could include
 attribute and operation values.
If the implementation of this class does not support
 persistence, an MBeanException wrapping a ServiceNotFoundException is thrown.
Persistence policy from the MBean and attribute descriptor
 is used to guide execution of this method. The MBean should be
 stored if 'persistPolicy' field is:
  != ""never""
   = ""always""
   = ""onTimer"" and now > 'lastPersistTime' + 'persistPeriod'
   = ""NoMoreOftenThan"" and now > 'lastPersistTime' + 'persistPeriod'
   = ""onUnregister""
 
Do not store the MBean if 'persistPolicy' field is:

    = ""never""
    = ""onUpdate""
    = ""onTimer"" && now < 'lastPersistTime' + 'persistPeriod'
 

Specified by:
store in interface PersistentMBean
Throws:
MBeanException - Wraps another exception, or
 persistence is not supported
RuntimeOperationsException - Wraps exceptions from the
 persistence mechanism
InstanceNotFoundException - Could not find/access the
 persistent store


"
