ClassName,Method,Return Type,Description,Full Description
Charset,aliases(),Set<String>,Returns a set containing this charset's aliases.,"

aliases
public final Set<String> aliases()
Returns a set containing this charset's aliases.

Returns:
An immutable set of this charset's aliases


"
Charset,availableCharsets(),"static SortedMap<String,Charset>",Constructs a sorted map from canonical charset names to charset objects.,"

availableCharsets
public static SortedMap<String,Charset> availableCharsets()
Constructs a sorted map from canonical charset names to charset objects.

  The map returned by this method will have one entry for each charset
 for which support is available in the current Java virtual machine.  If
 two or more supported charsets have the same canonical name then the
 resulting map will contain just one of them; which one it will contain
 is not specified. 
 The invocation of this method, and the subsequent use of the
 resulting map, may cause time-consuming disk or network I/O operations
 to occur.  This method is provided for applications that need to
 enumerate all of the available charsets, for example to allow user
 charset selection.  This method is not used by the forName method, which instead employs an efficient incremental lookup
 algorithm.

  This method may return different results at different times if new
 charset providers are dynamically made available to the current Java
 virtual machine.  In the absence of such changes, the charsets returned
 by this method are exactly those that can be retrieved via the forName method.  

Returns:
An immutable, case-insensitive map from canonical charset names
         to charset objects


"
Charset,canEncode(),boolean,Tells whether or not this charset supports encoding.,"

canEncode
public boolean canEncode()
Tells whether or not this charset supports encoding.

  Nearly all charsets support encoding.  The primary exceptions are
 special-purpose auto-detect charsets whose decoders can determine
 which of several possible encoding schemes is in use by examining the
 input byte sequence.  Such charsets do not support encoding because
 there is no way to determine which encoding should be used on output.
 Implementations of such charsets should override this method to return
 false. 

Returns:
true if, and only if, this charset supports encoding


"
Charset,compareTo(Charset that),int,Compares this charset to another.,"

compareTo
public final int compareTo(Charset that)
Compares this charset to another.

  Charsets are ordered by their canonical names, without regard to
 case. 

Specified by:
compareTo in interface Comparable<Charset>
Parameters:
that - The charset to which this charset is to be compared
Returns:
A negative integer, zero, or a positive integer as this charset
         is less than, equal to, or greater than the specified charset


"
Charset,contains(Charset cs),abstract boolean,Tells whether or not this charset contains the given charset.,"

contains
public abstract boolean contains(Charset cs)
Tells whether or not this charset contains the given charset.

  A charset C is said to contain a charset D if,
 and only if, every character representable in D is also
 representable in C.  If this relationship holds then it is
 guaranteed that every string that can be encoded in D can also be
 encoded in C without performing any replacements.

  That C contains D does not imply that each character
 representable in C by a particular byte sequence is represented
 in D by the same byte sequence, although sometimes this is the
 case.

  Every charset contains itself.

  This method computes an approximation of the containment relation:
 If it returns true then the given charset is known to be
 contained by this charset; if it returns false, however, then
 it is not necessarily the case that the given charset is not contained
 in this charset.

Parameters:
cs - The given charset
Returns:
true if the given charset is contained in this charset


"
Charset,decode(ByteBuffer bb),CharBuffer,Convenience method that decodes bytes in this charset into Unicode characters.,"

decode
public final CharBuffer decode(ByteBuffer bb)
Convenience method that decodes bytes in this charset into Unicode
 characters.

  An invocation of this method upon a charset cs returns the
 same result as the expression

 
     cs.newDecoder()
       .onMalformedInput(CodingErrorAction.REPLACE)
       .onUnmappableCharacter(CodingErrorAction.REPLACE)
       .decode(bb); 

 except that it is potentially more efficient because it can cache
 decoders between successive invocations.

  This method always replaces malformed-input and unmappable-character
 sequences with this charset's default replacement byte array.  In order
 to detect such sequences, use the CharsetDecoder.decode(java.nio.ByteBuffer) method directly.  

Parameters:
bb - The byte buffer to be decoded
Returns:
A char buffer containing the decoded characters


"
Charset,defaultCharset(),static Charset,Returns the default charset of this Java virtual machine.,"

defaultCharset
public static Charset defaultCharset()
Returns the default charset of this Java virtual machine.

  The default charset is determined during virtual-machine startup and
 typically depends upon the locale and charset of the underlying
 operating system.

Returns:
A charset object for the default charset
Since:
1.5


"
Charset,displayName(),String,Returns this charset's human-readable name for the default locale.,"

displayName
public String displayName()
Returns this charset's human-readable name for the default locale.

  The default implementation of this method simply returns this
 charset's canonical name.  Concrete subclasses of this class may
 override this method in order to provide a localized display name. 

Returns:
The display name of this charset in the default locale


"
Charset,displayName(Locale locale),String,Returns this charset's human-readable name for the given locale.,"

displayName
public String displayName(Locale locale)
Returns this charset's human-readable name for the given locale.

  The default implementation of this method simply returns this
 charset's canonical name.  Concrete subclasses of this class may
 override this method in order to provide a localized display name. 

Parameters:
locale - The locale for which the display name is to be retrieved
Returns:
The display name of this charset in the given locale


"
Charset,encode(CharBuffer cb),ByteBuffer,Convenience method that encodes Unicode characters into bytes in this charset.,"

encode
public final ByteBuffer encode(CharBuffer cb)
Convenience method that encodes Unicode characters into bytes in this
 charset.

  An invocation of this method upon a charset cs returns the
 same result as the expression

 
     cs.newEncoder()
       .onMalformedInput(CodingErrorAction.REPLACE)
       .onUnmappableCharacter(CodingErrorAction.REPLACE)
       .encode(bb); 

 except that it is potentially more efficient because it can cache
 encoders between successive invocations.

  This method always replaces malformed-input and unmappable-character
 sequences with this charset's default replacement string.  In order to
 detect such sequences, use the CharsetEncoder.encode(java.nio.CharBuffer) method directly.  

Parameters:
cb - The char buffer to be encoded
Returns:
A byte buffer containing the encoded characters


"
Charset,encode(String str),ByteBuffer,Convenience method that encodes a string into bytes in this charset.,"

encode
public final ByteBuffer encode(String str)
Convenience method that encodes a string into bytes in this charset.

  An invocation of this method upon a charset cs returns the
 same result as the expression

 
     cs.encode(CharBuffer.wrap(s)); 

Parameters:
str - The string to be encoded
Returns:
A byte buffer containing the encoded characters


"
Charset,equals(Object ob),boolean,Tells whether or not this object is equal to another.,"

equals
public final boolean equals(Object ob)
Tells whether or not this object is equal to another.

  Two charsets are equal if, and only if, they have the same canonical
 names.  A charset is never equal to any other type of object.  

Overrides:
equals in class Object
Parameters:
ob - the reference object with which to compare.
Returns:
true if, and only if, this charset is equal to the
          given object
See Also:
Object.hashCode(), 
HashMap


"
Charset,forName(String charsetName),static Charset,Returns a charset object for the named charset.,"

forName
public static Charset forName(String charsetName)
Returns a charset object for the named charset.

Parameters:
charsetName - The name of the requested charset; may be either
         a canonical name or an alias
Returns:
A charset object for the named charset
Throws:
IllegalCharsetNameException - If the given charset name is illegal
IllegalArgumentException - If the given charsetName is null
UnsupportedCharsetException - If no support for the named charset is available
          in this instance of the Java virtual machine


"
Charset,hashCode(),int,Computes a hashcode for this charset.,"

hashCode
public final int hashCode()
Computes a hashcode for this charset.

Overrides:
hashCode in class Object
Returns:
An integer hashcode
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Charset,isRegistered(),boolean,Tells whether or not this charset is registered in the IANA Charset Registry.,"

isRegistered
public final boolean isRegistered()
Tells whether or not this charset is registered in the IANA Charset
 Registry.

Returns:
true if, and only if, this charset is known by its
          implementor to be registered with the IANA


"
Charset,isSupported(String charsetName),static boolean,Tells whether the named charset is supported.,"

isSupported
public static boolean isSupported(String charsetName)
Tells whether the named charset is supported.

Parameters:
charsetName - The name of the requested charset; may be either
         a canonical name or an alias
Returns:
true if, and only if, support for the named charset
          is available in the current Java virtual machine
Throws:
IllegalCharsetNameException - If the given charset name is illegal
IllegalArgumentException - If the given charsetName is null


"
Charset,name(),String,Returns this charset's canonical name.,"

name
public final String name()
Returns this charset's canonical name.

Returns:
The canonical name of this charset


"
Charset,newDecoder(),abstract CharsetDecoder,Constructs a new decoder for this charset.,"

newDecoder
public abstract CharsetDecoder newDecoder()
Constructs a new decoder for this charset.

Returns:
A new decoder for this charset


"
Charset,newEncoder(),abstract CharsetEncoder,Constructs a new encoder for this charset.,"

newEncoder
public abstract CharsetEncoder newEncoder()
Constructs a new encoder for this charset.

Returns:
A new encoder for this charset
Throws:
UnsupportedOperationException - If this charset does not support encoding


"
Charset,toString(),String,Returns a string describing this charset.,"

toString
public final String toString()
Returns a string describing this charset.

Overrides:
toString in class Object
Returns:
A string describing this charset


"
CharsetDecoder,averageCharsPerByte(),float,Returns the average number of characters that will be produced for each byte of input.,"

averageCharsPerByte
public final float averageCharsPerByte()
Returns the average number of characters that will be produced for each
 byte of input.  This heuristic value may be used to estimate the size
 of the output buffer required for a given input sequence.

Returns:
The average number of characters produced
          per byte of input


"
CharsetDecoder,charset(),Charset,Returns the charset that created this decoder.,"

charset
public final Charset charset()
Returns the charset that created this decoder.

Returns:
This decoder's charset


"
CharsetDecoder,decode(ByteBuffer in),CharBuffer,Convenience method that decodes the remaining content of a single input byte buffer into a newly-allocated character buffer.,"

decode
public final CharBuffer decode(ByteBuffer in)
                        throws CharacterCodingException
Convenience method that decodes the remaining content of a single input
 byte buffer into a newly-allocated character buffer.

  This method implements an entire decoding
 operation; that is, it resets this decoder, then it decodes the
 bytes in the given byte buffer, and finally it flushes this
 decoder.  This method should therefore not be invoked if a decoding
 operation is already in progress.  

Parameters:
in - The input byte buffer
Returns:
A newly-allocated character buffer containing the result of the
         decoding operation.  The buffer's position will be zero and its
         limit will follow the last character written.
Throws:
IllegalStateException - If a decoding operation is already in progress
MalformedInputException - If the byte sequence starting at the input buffer's current
          position is not legal for this charset and the current malformed-input action
          is CodingErrorAction.REPORT
UnmappableCharacterException - If the byte sequence starting at the input buffer's current
          position cannot be mapped to an equivalent character sequence and
          the current unmappable-character action is CodingErrorAction.REPORT
CharacterCodingException


"
CharsetDecoder,"decode(ByteBuffer in, CharBuffer out, boolean endOfInput)",CoderResult,"Decodes as many bytes as possible from the given input buffer, writing the results to the given output buffer.","

decode
public final CoderResult decode(ByteBuffer in,
                                CharBuffer out,
                                boolean endOfInput)
Decodes as many bytes as possible from the given input buffer,
 writing the results to the given output buffer.

  The buffers are read from, and written to, starting at their current
 positions.  At most in.remaining() bytes
 will be read and at most out.remaining()
 characters will be written.  The buffers' positions will be advanced to
 reflect the bytes read and the characters written, but their marks and
 limits will not be modified.

  In addition to reading bytes from the input buffer and writing
 characters to the output buffer, this method returns a CoderResult
 object to describe its reason for termination:

 
 CoderResult.UNDERFLOW indicates that as much of the
   input buffer as possible has been decoded.  If there is no further
   input then the invoker can proceed to the next step of the
   decoding operation.  Otherwise this method
   should be invoked again with further input.  
 CoderResult.OVERFLOW indicates that there is
   insufficient space in the output buffer to decode any more bytes.
   This method should be invoked again with an output buffer that has
   more remaining characters. This is
   typically done by draining any decoded characters from the output
   buffer.  
 A malformed-input result indicates that a malformed-input
   error has been detected.  The malformed bytes begin at the input
   buffer's (possibly incremented) position; the number of malformed
   bytes may be determined by invoking the result object's length method.  This case applies only if the
   malformed action of this decoder
   is CodingErrorAction.REPORT; otherwise the malformed input
   will be ignored or replaced, as requested.  
 An unmappable-character result indicates that an
   unmappable-character error has been detected.  The bytes that
   decode the unmappable character begin at the input buffer's (possibly
   incremented) position; the number of such bytes may be determined
   by invoking the result object's length
   method.  This case applies only if the unmappable action of this decoder is CodingErrorAction.REPORT; otherwise the unmappable character will be
   ignored or replaced, as requested.  


 In any case, if this method is to be reinvoked in the same decoding
 operation then care should be taken to preserve any bytes remaining
 in the input buffer so that they are available to the next invocation.

  The endOfInput parameter advises this method as to whether
 the invoker can provide further input beyond that contained in the given
 input buffer.  If there is a possibility of providing additional input
 then the invoker should pass false for this parameter; if there
 is no possibility of providing further input then the invoker should
 pass true.  It is not erroneous, and in fact it is quite
 common, to pass false in one invocation and later discover that
 no further input was actually available.  It is critical, however, that
 the final invocation of this method in a sequence of invocations always
 pass true so that any remaining undecoded input will be treated
 as being malformed.

  This method works by invoking the decodeLoop
 method, interpreting its results, handling error conditions, and
 reinvoking it as necessary.  

Parameters:
in - The input byte buffer
out - The output character buffer
endOfInput - true if, and only if, the invoker can provide no
         additional input bytes beyond those in the given buffer
Returns:
A coder-result object describing the reason for termination
Throws:
IllegalStateException - If a decoding operation is already in progress and the previous
          step was an invocation neither of the reset
          method, nor of this method with a value of false for
          the endOfInput parameter, nor of this method with a
          value of true for the endOfInput parameter
          but a return value indicating an incomplete decoding operation
CoderMalfunctionError - If an invocation of the decodeLoop method threw
          an unexpected exception


"
CharsetDecoder,"decodeLoop(ByteBuffer in, CharBuffer out)",protected abstract CoderResult,Decodes one or more bytes into one or more characters.,"

decodeLoop
protected abstract CoderResult decodeLoop(ByteBuffer in,
                                          CharBuffer out)
Decodes one or more bytes into one or more characters.

  This method encapsulates the basic decoding loop, decoding as many
 bytes as possible until it either runs out of input, runs out of room
 in the output buffer, or encounters a decoding error.  This method is
 invoked by the decode method, which handles result
 interpretation and error recovery.

  The buffers are read from, and written to, starting at their current
 positions.  At most in.remaining() bytes
 will be read, and at most out.remaining()
 characters will be written.  The buffers' positions will be advanced to
 reflect the bytes read and the characters written, but their marks and
 limits will not be modified.

  This method returns a CoderResult object to describe its
 reason for termination, in the same manner as the decode
 method.  Most implementations of this method will handle decoding errors
 by returning an appropriate result object for interpretation by the
 decode method.  An optimized implementation may instead
 examine the relevant error action and implement that action itself.

  An implementation of this method may perform arbitrary lookahead by
 returning CoderResult.UNDERFLOW until it receives sufficient
 input.  

Parameters:
in - The input byte buffer
out - The output character buffer
Returns:
A coder-result object describing the reason for termination


"
CharsetDecoder,detectedCharset(),Charset,Retrieves the charset that was detected by this decoder (optional operation).,"

detectedCharset
public Charset detectedCharset()
Retrieves the charset that was detected by this
 decoder  (optional operation).

  If this decoder implements an auto-detecting charset then this
 method returns the actual charset once it has been detected.  After that
 point, this method returns the same value for the duration of the
 current decoding operation.  If not enough input bytes have yet been
 read to determine the actual charset then this method throws an IllegalStateException.

  The default implementation of this method always throws an UnsupportedOperationException; it should be overridden by
 auto-detecting decoders to return the appropriate value.  

Returns:
The charset detected by this auto-detecting decoder,
          or null if the charset has not yet been determined
Throws:
IllegalStateException - If insufficient bytes have been read to determine a charset
UnsupportedOperationException - If this decoder does not implement an auto-detecting charset


"
CharsetDecoder,flush(CharBuffer out),CoderResult,Flushes this decoder.,"

flush
public final CoderResult flush(CharBuffer out)
Flushes this decoder.

  Some decoders maintain internal state and may need to write some
 final characters to the output buffer once the overall input sequence has
 been read.

  Any additional output is written to the output buffer beginning at
 its current position.  At most out.remaining()
 characters will be written.  The buffer's position will be advanced
 appropriately, but its mark and limit will not be modified.

  If this method completes successfully then it returns CoderResult.UNDERFLOW.  If there is insufficient room in the output
 buffer then it returns CoderResult.OVERFLOW.  If this happens
 then this method must be invoked again, with an output buffer that has
 more room, in order to complete the current decoding
 operation.

  If this decoder has already been flushed then invoking this method
 has no effect.

  This method invokes the implFlush method to
 perform the actual flushing operation.  

Parameters:
out - The output character buffer
Returns:
A coder-result object, either CoderResult.UNDERFLOW or
          CoderResult.OVERFLOW
Throws:
IllegalStateException - If the previous step of the current decoding operation was an
          invocation neither of the flush method nor of
          the three-argument decode method
          with a value of true for the endOfInput
          parameter


"
CharsetDecoder,implFlush(CharBuffer out),protected CoderResult,Flushes this decoder.,"

implFlush
protected CoderResult implFlush(CharBuffer out)
Flushes this decoder.

  The default implementation of this method does nothing, and always
 returns CoderResult.UNDERFLOW.  This method should be overridden
 by decoders that may need to write final characters to the output buffer
 once the entire input sequence has been read. 

Parameters:
out - The output character buffer
Returns:
A coder-result object, either CoderResult.UNDERFLOW or
          CoderResult.OVERFLOW


"
CharsetDecoder,implOnMalformedInput(CodingErrorAction newAction),protected void,Reports a change to this decoder's malformed-input action.,"

implOnMalformedInput
protected void implOnMalformedInput(CodingErrorAction newAction)
Reports a change to this decoder's malformed-input action.

  The default implementation of this method does nothing.  This method
 should be overridden by decoders that require notification of changes to
 the malformed-input action.  

Parameters:
newAction - The new action


"
CharsetDecoder,implOnUnmappableCharacter(CodingErrorAction newAction),protected void,Reports a change to this decoder's unmappable-character action.,"

implOnUnmappableCharacter
protected void implOnUnmappableCharacter(CodingErrorAction newAction)
Reports a change to this decoder's unmappable-character action.

  The default implementation of this method does nothing.  This method
 should be overridden by decoders that require notification of changes to
 the unmappable-character action.  

Parameters:
newAction - The new action


"
CharsetDecoder,implReplaceWith(String newReplacement),protected void,Reports a change to this decoder's replacement value.,"

implReplaceWith
protected void implReplaceWith(String newReplacement)
Reports a change to this decoder's replacement value.

  The default implementation of this method does nothing.  This method
 should be overridden by decoders that require notification of changes to
 the replacement.  

Parameters:
newReplacement - The replacement value


"
CharsetDecoder,implReset(),protected void,"Resets this decoder, clearing any charset-specific internal state.","

implReset
protected void implReset()
Resets this decoder, clearing any charset-specific internal state.

  The default implementation of this method does nothing.  This method
 should be overridden by decoders that maintain internal state.  

"
CharsetDecoder,isAutoDetecting(),boolean,Tells whether or not this decoder implements an auto-detecting charset.,"

isAutoDetecting
public boolean isAutoDetecting()
Tells whether or not this decoder implements an auto-detecting charset.

  The default implementation of this method always returns
 false; it should be overridden by auto-detecting decoders to
 return true.  

Returns:
true if, and only if, this decoder implements an
          auto-detecting charset


"
CharsetDecoder,isCharsetDetected(),boolean,Tells whether or not this decoder has yet detected a charset (optional operation).,"

isCharsetDetected
public boolean isCharsetDetected()
Tells whether or not this decoder has yet detected a
 charset  (optional operation).

  If this decoder implements an auto-detecting charset then at a
 single point during a decoding operation this method may start returning
 true to indicate that a specific charset has been detected in
 the input byte sequence.  Once this occurs, the detectedCharset method may be invoked to retrieve the detected charset.

  That this method returns false does not imply that no bytes
 have yet been decoded.  Some auto-detecting decoders are capable of
 decoding some, or even all, of an input byte sequence without fixing on
 a particular charset.

  The default implementation of this method always throws an UnsupportedOperationException; it should be overridden by
 auto-detecting decoders to return true once the input charset
 has been determined.  

Returns:
true if, and only if, this decoder has detected a
          specific charset
Throws:
UnsupportedOperationException - If this decoder does not implement an auto-detecting charset


"
CharsetDecoder,malformedInputAction(),CodingErrorAction,Returns this decoder's current action for malformed-input errors.,"

malformedInputAction
public CodingErrorAction malformedInputAction()
Returns this decoder's current action for malformed-input errors.

Returns:
The current malformed-input action, which is never null


"
CharsetDecoder,maxCharsPerByte(),float,Returns the maximum number of characters that will be produced for each byte of input.,"

maxCharsPerByte
public final float maxCharsPerByte()
Returns the maximum number of characters that will be produced for each
 byte of input.  This value may be used to compute the worst-case size
 of the output buffer required for a given input sequence.

Returns:
The maximum number of characters that will be produced per
          byte of input


"
CharsetDecoder,onMalformedInput(CodingErrorAction newAction),CharsetDecoder,Changes this decoder's action for malformed-input errors.,"

onMalformedInput
public final CharsetDecoder onMalformedInput(CodingErrorAction newAction)
Changes this decoder's action for malformed-input errors.

  This method invokes the implOnMalformedInput method, passing the new action.  

Parameters:
newAction - The new action; must not be null
Returns:
This decoder
Throws:
IllegalArgumentException - If the precondition on the parameter does not hold


"
CharsetDecoder,onUnmappableCharacter(CodingErrorAction newAction),CharsetDecoder,Changes this decoder's action for unmappable-character errors.,"

onUnmappableCharacter
public final CharsetDecoder onUnmappableCharacter(CodingErrorAction newAction)
Changes this decoder's action for unmappable-character errors.

  This method invokes the implOnUnmappableCharacter method, passing the new action.  

Parameters:
newAction - The new action; must not be null
Returns:
This decoder
Throws:
IllegalArgumentException - If the precondition on the parameter does not hold


"
CharsetDecoder,replacement(),String,Returns this decoder's replacement value.,"

replacement
public final String replacement()
Returns this decoder's replacement value.

Returns:
This decoder's current replacement,
          which is never null and is never empty


"
CharsetDecoder,replaceWith(String newReplacement),CharsetDecoder,Changes this decoder's replacement value.,"

replaceWith
public final CharsetDecoder replaceWith(String newReplacement)
Changes this decoder's replacement value.

  This method invokes the implReplaceWith
 method, passing the new replacement, after checking that the new
 replacement is acceptable.  

Parameters:
newReplacement - The replacement value


         The new replacement; must not be null
         and must have non-zero length
Returns:
This decoder
Throws:
IllegalArgumentException - If the preconditions on the parameter do not hold


"
CharsetDecoder,reset(),CharsetDecoder,"Resets this decoder, clearing any internal state.","

reset
public final CharsetDecoder reset()
Resets this decoder, clearing any internal state.

  This method resets charset-independent state and also invokes the
 implReset method in order to perform any
 charset-specific reset actions.  

Returns:
This decoder


"
CharsetDecoder,unmappableCharacterAction(),CodingErrorAction,Returns this decoder's current action for unmappable-character errors.,"

unmappableCharacterAction
public CodingErrorAction unmappableCharacterAction()
Returns this decoder's current action for unmappable-character errors.

Returns:
The current unmappable-character action, which is never
         null


"
CharsetEncoder,averageBytesPerChar(),float,Returns the average number of bytes that will be produced for each character of input.,"

averageBytesPerChar
public final float averageBytesPerChar()
Returns the average number of bytes that will be produced for each
 character of input.  This heuristic value may be used to estimate the size
 of the output buffer required for a given input sequence.

Returns:
The average number of bytes produced
          per character of input


"
CharsetEncoder,canEncode(char c),boolean,Tells whether or not this encoder can encode the given character.,"

canEncode
public boolean canEncode(char c)
Tells whether or not this encoder can encode the given character.

  This method returns false if the given character is a
 surrogate character; such characters can be interpreted only when they
 are members of a pair consisting of a high surrogate followed by a low
 surrogate.  The canEncode(CharSequence) method may be used to test whether or not a
 character sequence can be encoded.

  This method may modify this encoder's state; it should therefore not
 be invoked if an encoding operation is already in
 progress.

  The default implementation of this method is not very efficient; it
 should generally be overridden to improve performance.  

Parameters:
c - The given character
Returns:
true if, and only if, this encoder can encode
          the given character
Throws:
IllegalStateException - If an encoding operation is already in progress


"
CharsetEncoder,canEncode(CharSequence cs),boolean,Tells whether or not this encoder can encode the given character sequence.,"

canEncode
public boolean canEncode(CharSequence cs)
Tells whether or not this encoder can encode the given character
 sequence.

  If this method returns false for a particular character
 sequence then more information about why the sequence cannot be encoded
 may be obtained by performing a full encoding
 operation.

  This method may modify this encoder's state; it should therefore not
 be invoked if an encoding operation is already in progress.

  The default implementation of this method is not very efficient; it
 should generally be overridden to improve performance.  

Parameters:
cs - The given character sequence
Returns:
true if, and only if, this encoder can encode
          the given character without throwing any exceptions and without
          performing any replacements
Throws:
IllegalStateException - If an encoding operation is already in progress


"
CharsetEncoder,charset(),Charset,Returns the charset that created this encoder.,"

charset
public final Charset charset()
Returns the charset that created this encoder.

Returns:
This encoder's charset


"
CharsetEncoder,encode(CharBuffer in),ByteBuffer,Convenience method that encodes the remaining content of a single input character buffer into a newly-allocated byte buffer.,"

encode
public final ByteBuffer encode(CharBuffer in)
                        throws CharacterCodingException
Convenience method that encodes the remaining content of a single input
 character buffer into a newly-allocated byte buffer.

  This method implements an entire encoding
 operation; that is, it resets this encoder, then it encodes the
 characters in the given character buffer, and finally it flushes this
 encoder.  This method should therefore not be invoked if an encoding
 operation is already in progress.  

Parameters:
in - The input character buffer
Returns:
A newly-allocated byte buffer containing the result of the
         encoding operation.  The buffer's position will be zero and its
         limit will follow the last byte written.
Throws:
IllegalStateException - If an encoding operation is already in progress
MalformedInputException - If the character sequence starting at the input buffer's current
          position is not a legal sixteen-bit Unicode sequence and the current malformed-input action
          is CodingErrorAction.REPORT
UnmappableCharacterException - If the character sequence starting at the input buffer's current
          position cannot be mapped to an equivalent byte sequence and
          the current unmappable-character action is CodingErrorAction.REPORT
CharacterCodingException


"
CharsetEncoder,"encode(CharBuffer in, ByteBuffer out, boolean endOfInput)",CoderResult,"Encodes as many characters as possible from the given input buffer, writing the results to the given output buffer.","

encode
public final CoderResult encode(CharBuffer in,
                                ByteBuffer out,
                                boolean endOfInput)
Encodes as many characters as possible from the given input buffer,
 writing the results to the given output buffer.

  The buffers are read from, and written to, starting at their current
 positions.  At most in.remaining() characters
 will be read and at most out.remaining()
 bytes will be written.  The buffers' positions will be advanced to
 reflect the characters read and the bytes written, but their marks and
 limits will not be modified.

  In addition to reading characters from the input buffer and writing
 bytes to the output buffer, this method returns a CoderResult
 object to describe its reason for termination:

 
 CoderResult.UNDERFLOW indicates that as much of the
   input buffer as possible has been encoded.  If there is no further
   input then the invoker can proceed to the next step of the
   encoding operation.  Otherwise this method
   should be invoked again with further input.  
 CoderResult.OVERFLOW indicates that there is
   insufficient space in the output buffer to encode any more characters.
   This method should be invoked again with an output buffer that has
   more remaining bytes. This is
   typically done by draining any encoded bytes from the output
   buffer.  
 A malformed-input result indicates that a malformed-input
   error has been detected.  The malformed characters begin at the input
   buffer's (possibly incremented) position; the number of malformed
   characters may be determined by invoking the result object's length method.  This case applies only if the
   malformed action of this encoder
   is CodingErrorAction.REPORT; otherwise the malformed input
   will be ignored or replaced, as requested.  
 An unmappable-character result indicates that an
   unmappable-character error has been detected.  The characters that
   encode the unmappable character begin at the input buffer's (possibly
   incremented) position; the number of such characters may be determined
   by invoking the result object's length
   method.  This case applies only if the unmappable action of this encoder is CodingErrorAction.REPORT; otherwise the unmappable character will be
   ignored or replaced, as requested.  


 In any case, if this method is to be reinvoked in the same encoding
 operation then care should be taken to preserve any characters remaining
 in the input buffer so that they are available to the next invocation.

  The endOfInput parameter advises this method as to whether
 the invoker can provide further input beyond that contained in the given
 input buffer.  If there is a possibility of providing additional input
 then the invoker should pass false for this parameter; if there
 is no possibility of providing further input then the invoker should
 pass true.  It is not erroneous, and in fact it is quite
 common, to pass false in one invocation and later discover that
 no further input was actually available.  It is critical, however, that
 the final invocation of this method in a sequence of invocations always
 pass true so that any remaining unencoded input will be treated
 as being malformed.

  This method works by invoking the encodeLoop
 method, interpreting its results, handling error conditions, and
 reinvoking it as necessary.  

Parameters:
in - The input character buffer
out - The output byte buffer
endOfInput - true if, and only if, the invoker can provide no
         additional input characters beyond those in the given buffer
Returns:
A coder-result object describing the reason for termination
Throws:
IllegalStateException - If an encoding operation is already in progress and the previous
          step was an invocation neither of the reset
          method, nor of this method with a value of false for
          the endOfInput parameter, nor of this method with a
          value of true for the endOfInput parameter
          but a return value indicating an incomplete encoding operation
CoderMalfunctionError - If an invocation of the encodeLoop method threw
          an unexpected exception


"
CharsetEncoder,"encodeLoop(CharBuffer in, ByteBuffer out)",protected abstract CoderResult,Encodes one or more characters into one or more bytes.,"

encodeLoop
protected abstract CoderResult encodeLoop(CharBuffer in,
                                          ByteBuffer out)
Encodes one or more characters into one or more bytes.

  This method encapsulates the basic encoding loop, encoding as many
 characters as possible until it either runs out of input, runs out of room
 in the output buffer, or encounters an encoding error.  This method is
 invoked by the encode method, which handles result
 interpretation and error recovery.

  The buffers are read from, and written to, starting at their current
 positions.  At most in.remaining() characters
 will be read, and at most out.remaining()
 bytes will be written.  The buffers' positions will be advanced to
 reflect the characters read and the bytes written, but their marks and
 limits will not be modified.

  This method returns a CoderResult object to describe its
 reason for termination, in the same manner as the encode
 method.  Most implementations of this method will handle encoding errors
 by returning an appropriate result object for interpretation by the
 encode method.  An optimized implementation may instead
 examine the relevant error action and implement that action itself.

  An implementation of this method may perform arbitrary lookahead by
 returning CoderResult.UNDERFLOW until it receives sufficient
 input.  

Parameters:
in - The input character buffer
out - The output byte buffer
Returns:
A coder-result object describing the reason for termination


"
CharsetEncoder,flush(ByteBuffer out),CoderResult,Flushes this encoder.,"

flush
public final CoderResult flush(ByteBuffer out)
Flushes this encoder.

  Some encoders maintain internal state and may need to write some
 final bytes to the output buffer once the overall input sequence has
 been read.

  Any additional output is written to the output buffer beginning at
 its current position.  At most out.remaining()
 bytes will be written.  The buffer's position will be advanced
 appropriately, but its mark and limit will not be modified.

  If this method completes successfully then it returns CoderResult.UNDERFLOW.  If there is insufficient room in the output
 buffer then it returns CoderResult.OVERFLOW.  If this happens
 then this method must be invoked again, with an output buffer that has
 more room, in order to complete the current encoding
 operation.

  If this encoder has already been flushed then invoking this method
 has no effect.

  This method invokes the implFlush method to
 perform the actual flushing operation.  

Parameters:
out - The output byte buffer
Returns:
A coder-result object, either CoderResult.UNDERFLOW or
          CoderResult.OVERFLOW
Throws:
IllegalStateException - If the previous step of the current encoding operation was an
          invocation neither of the flush method nor of
          the three-argument encode method
          with a value of true for the endOfInput
          parameter


"
CharsetEncoder,implFlush(ByteBuffer out),protected CoderResult,Flushes this encoder.,"

implFlush
protected CoderResult implFlush(ByteBuffer out)
Flushes this encoder.

  The default implementation of this method does nothing, and always
 returns CoderResult.UNDERFLOW.  This method should be overridden
 by encoders that may need to write final bytes to the output buffer
 once the entire input sequence has been read. 

Parameters:
out - The output byte buffer
Returns:
A coder-result object, either CoderResult.UNDERFLOW or
          CoderResult.OVERFLOW


"
CharsetEncoder,implOnMalformedInput(CodingErrorAction newAction),protected void,Reports a change to this encoder's malformed-input action.,"

implOnMalformedInput
protected void implOnMalformedInput(CodingErrorAction newAction)
Reports a change to this encoder's malformed-input action.

  The default implementation of this method does nothing.  This method
 should be overridden by encoders that require notification of changes to
 the malformed-input action.  

Parameters:
newAction - The new action


"
CharsetEncoder,implOnUnmappableCharacter(CodingErrorAction newAction),protected void,Reports a change to this encoder's unmappable-character action.,"

implOnUnmappableCharacter
protected void implOnUnmappableCharacter(CodingErrorAction newAction)
Reports a change to this encoder's unmappable-character action.

  The default implementation of this method does nothing.  This method
 should be overridden by encoders that require notification of changes to
 the unmappable-character action.  

Parameters:
newAction - The new action


"
CharsetEncoder,implReplaceWith(byte[] newReplacement),protected void,Reports a change to this encoder's replacement value.,"

implReplaceWith
protected void implReplaceWith(byte[] newReplacement)
Reports a change to this encoder's replacement value.

  The default implementation of this method does nothing.  This method
 should be overridden by encoders that require notification of changes to
 the replacement.  

Parameters:
newReplacement - The replacement value


"
CharsetEncoder,implReset(),protected void,"Resets this encoder, clearing any charset-specific internal state.","

implReset
protected void implReset()
Resets this encoder, clearing any charset-specific internal state.

  The default implementation of this method does nothing.  This method
 should be overridden by encoders that maintain internal state.  

"
CharsetEncoder,isLegalReplacement(byte[] repl),boolean,Tells whether or not the given byte array is a legal replacement value for this encoder.,"

isLegalReplacement
public boolean isLegalReplacement(byte[] repl)
Tells whether or not the given byte array is a legal replacement value
 for this encoder.

  A replacement is legal if, and only if, it is a legal sequence of
 bytes in this encoder's charset; that is, it must be possible to decode
 the replacement into one or more sixteen-bit Unicode characters.

  The default implementation of this method is not very efficient; it
 should generally be overridden to improve performance.  

Parameters:
repl - The byte array to be tested
Returns:
true if, and only if, the given byte array
          is a legal replacement value for this encoder


"
CharsetEncoder,malformedInputAction(),CodingErrorAction,Returns this encoder's current action for malformed-input errors.,"

malformedInputAction
public CodingErrorAction malformedInputAction()
Returns this encoder's current action for malformed-input errors.

Returns:
The current malformed-input action, which is never null


"
CharsetEncoder,maxBytesPerChar(),float,Returns the maximum number of bytes that will be produced for each character of input.,"

maxBytesPerChar
public final float maxBytesPerChar()
Returns the maximum number of bytes that will be produced for each
 character of input.  This value may be used to compute the worst-case size
 of the output buffer required for a given input sequence.

Returns:
The maximum number of bytes that will be produced per
          character of input


"
CharsetEncoder,onMalformedInput(CodingErrorAction newAction),CharsetEncoder,Changes this encoder's action for malformed-input errors.,"

onMalformedInput
public final CharsetEncoder onMalformedInput(CodingErrorAction newAction)
Changes this encoder's action for malformed-input errors.

  This method invokes the implOnMalformedInput method, passing the new action.  

Parameters:
newAction - The new action; must not be null
Returns:
This encoder
Throws:
IllegalArgumentException - If the precondition on the parameter does not hold


"
CharsetEncoder,onUnmappableCharacter(CodingErrorAction newAction),CharsetEncoder,Changes this encoder's action for unmappable-character errors.,"

onUnmappableCharacter
public final CharsetEncoder onUnmappableCharacter(CodingErrorAction newAction)
Changes this encoder's action for unmappable-character errors.

  This method invokes the implOnUnmappableCharacter method, passing the new action.  

Parameters:
newAction - The new action; must not be null
Returns:
This encoder
Throws:
IllegalArgumentException - If the precondition on the parameter does not hold


"
CharsetEncoder,replacement(),byte[],Returns this encoder's replacement value.,"

replacement
public final byte[] replacement()
Returns this encoder's replacement value.

Returns:
This encoder's current replacement,
          which is never null and is never empty


"
CharsetEncoder,replaceWith(byte[] newReplacement),CharsetEncoder,Changes this encoder's replacement value.,"

replaceWith
public final CharsetEncoder replaceWith(byte[] newReplacement)
Changes this encoder's replacement value.

  This method invokes the implReplaceWith
 method, passing the new replacement, after checking that the new
 replacement is acceptable.  

Parameters:
newReplacement - The replacement value






         The new replacement; must not be null, must have
         non-zero length, must not be longer than the value returned by
         the maxBytesPerChar method, and
         must be legal
Returns:
This encoder
Throws:
IllegalArgumentException - If the preconditions on the parameter do not hold


"
CharsetEncoder,reset(),CharsetEncoder,"Resets this encoder, clearing any internal state.","

reset
public final CharsetEncoder reset()
Resets this encoder, clearing any internal state.

  This method resets charset-independent state and also invokes the
 implReset method in order to perform any
 charset-specific reset actions.  

Returns:
This encoder


"
CharsetEncoder,unmappableCharacterAction(),CodingErrorAction,Returns this encoder's current action for unmappable-character errors.,"

unmappableCharacterAction
public CodingErrorAction unmappableCharacterAction()
Returns this encoder's current action for unmappable-character errors.

Returns:
The current unmappable-character action, which is never
         null


"
CoderResult,isError(),boolean,Tells whether or not this object describes an error condition.,"

isError
public boolean isError()
Tells whether or not this object describes an error condition.

Returns:
true if, and only if, this object denotes either a
          malformed-input error or an unmappable-character error


"
CoderResult,isMalformed(),boolean,Tells whether or not this object describes a malformed-input error.,"

isMalformed
public boolean isMalformed()
Tells whether or not this object describes a malformed-input error.

Returns:
true if, and only if, this object denotes a
          malformed-input error


"
CoderResult,isOverflow(),boolean,Tells whether or not this object describes an overflow condition.,"

isOverflow
public boolean isOverflow()
Tells whether or not this object describes an overflow condition.

Returns:
true if, and only if, this object denotes overflow


"
CoderResult,isUnderflow(),boolean,Tells whether or not this object describes an underflow condition.,"

isUnderflow
public boolean isUnderflow()
Tells whether or not this object describes an underflow condition.

Returns:
true if, and only if, this object denotes underflow


"
CoderResult,isUnmappable(),boolean,Tells whether or not this object describes an unmappable-character error.,"

isUnmappable
public boolean isUnmappable()
Tells whether or not this object describes an unmappable-character
 error.

Returns:
true if, and only if, this object denotes an
          unmappable-character error


"
CoderResult,length(),int,Returns the length of the erroneous input described by this object (optional operation).,"

length
public int length()
Returns the length of the erroneous input described by this
 object  (optional operation).

Returns:
The length of the erroneous input, a positive integer
Throws:
UnsupportedOperationException - If this object does not describe an error condition, that is,
          if the isError does not return true


"
CoderResult,malformedForLength(int length),static CoderResult,Static factory method that returns the unique object describing a malformed-input error of the given length.,"

malformedForLength
public static CoderResult malformedForLength(int length)
Static factory method that returns the unique object describing a
 malformed-input error of the given length.

Parameters:
length - The given length
Returns:
The requested coder-result object


"
CoderResult,throwException(),void,Throws an exception appropriate to the result described by this object.,"

throwException
public void throwException()
                    throws CharacterCodingException
Throws an exception appropriate to the result described by this object.

Throws:
BufferUnderflowException - If this object is UNDERFLOW
BufferOverflowException - If this object is OVERFLOW
MalformedInputException - If this object represents a malformed-input error; the
          exception's length value will be that of this object
UnmappableCharacterException - If this object represents an unmappable-character error; the
          exceptions length value will be that of this object
CharacterCodingException


"
CoderResult,toString(),String,Returns a string describing this coder result.,"

toString
public String toString()
Returns a string describing this coder result.

Overrides:
toString in class Object
Returns:
A descriptive string


"
CoderResult,unmappableForLength(int length),static CoderResult,Static factory method that returns the unique result object describing an unmappable-character error of the given length.,"

unmappableForLength
public static CoderResult unmappableForLength(int length)
Static factory method that returns the unique result object describing
 an unmappable-character error of the given length.

Parameters:
length - The given length
Returns:
The requested coder-result object


"
CodingErrorAction,toString(),String,Returns a string describing this action.,"

toString
public String toString()
Returns a string describing this action.

Overrides:
toString in class Object
Returns:
A descriptive string


"
