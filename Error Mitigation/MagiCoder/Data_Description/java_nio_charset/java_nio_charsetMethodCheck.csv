Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,Charset,1,Charset forName(String charsetName),True,Returns a charset object for the named charset.,"

forName
public static Charset forName(String charsetName)
Returns a charset object for the named charset.

Parameters:
charsetName - The name of the requested charset; may be either
         a canonical name or an alias
Returns:
A charset object for the named charset
Throws:
IllegalCharsetNameException - If the given charset name is illegal
IllegalArgumentException - If the given charsetName is null
UnsupportedCharsetException - If no support for the named charset is available
          in this instance of the Java virtual machine


"
0,Charset,2,byte[] encode(CharBuffer input),False,,NULL
0,Charset,3,CharBuffer decode(ByteBuffer input),True,Convenience method that decodes bytes in this charset into Unicode characters.,"

decode
public final CharBuffer decode(ByteBuffer bb)
Convenience method that decodes bytes in this charset into Unicode
 characters.

  An invocation of this method upon a charset cs returns the
 same result as the expression

 
     cs.newDecoder()
       .onMalformedInput(CodingErrorAction.REPLACE)
       .onUnmappableCharacter(CodingErrorAction.REPLACE)
       .decode(bb); 

 except that it is potentially more efficient because it can cache
 decoders between successive invocations.

  This method always replaces malformed-input and unmappable-character
 sequences with this charset's default replacement byte array.  In order
 to detect such sequences, use the CharsetDecoder.decode(java.nio.ByteBuffer) method directly.  

Parameters:
bb - The byte buffer to be decoded
Returns:
A char buffer containing the decoded characters


"
0,Charset,4,ByteBuffer encode(String input),True,Convenience method that encodes a string into bytes in this charset.,"

encode
public final ByteBuffer encode(String str)
Convenience method that encodes a string into bytes in this charset.

  An invocation of this method upon a charset cs returns the
 same result as the expression

 
     cs.encode(CharBuffer.wrap(s)); 

Parameters:
str - The string to be encoded
Returns:
A byte buffer containing the encoded characters


"
0,Charset,5,String decode(ByteBuffer input),False,,NULL
1,CharsetDecoder,1,CharsetDecoder reset(),True,"Resets this decoder, clearing any internal state.","

reset
public final CharsetDecoder reset()
Resets this decoder, clearing any internal state.

  This method resets charset-independent state and also invokes the
 implReset method in order to perform any
 charset-specific reset actions.  

Returns:
This decoder


"
1,CharsetDecoder,2,ByteBuffer decode(ByteBuffer in),False,,NULL
1,CharsetDecoder,3,"ByteBuffer decode(ByteBuffer in, CoderResult out)",False,,NULL
1,CharsetDecoder,4,"ByteBuffer decode(ByteBuffer in, CharBuffer out, boolean endOfInput)",False,,NULL
1,CharsetDecoder,5,"ByteBuffer decode(ByteBuffer in, CharBuffer out, boolean endOfInput, boolean flush)",False,,NULL
2,CharsetEncoder,1,boolean canEncode(CharBuffer in),False,,NULL
2,CharsetEncoder,2,boolean isLegalReplacement(byte[] replacement),True,Tells whether or not the given byte array is a legal replacement value for this encoder.,"

isLegalReplacement
public boolean isLegalReplacement(byte[] repl)
Tells whether or not the given byte array is a legal replacement value
 for this encoder.

  A replacement is legal if, and only if, it is a legal sequence of
 bytes in this encoder's charset; that is, it must be possible to decode
 the replacement into one or more sixteen-bit Unicode characters.

  The default implementation of this method is not very efficient; it
 should generally be overridden to improve performance.  

Parameters:
repl - The byte array to be tested
Returns:
true if, and only if, the given byte array
          is a legal replacement value for this encoder


"
2,CharsetEncoder,3,boolean isLegalSequence(byte[] bytes),False,,NULL
2,CharsetEncoder,4,int maxBytesPerChar(),False,,NULL
2,CharsetEncoder,5,"int encode(CharBuffer in, ByteBuffer out, boolean endOfInput)",False,,NULL
3,CoderResult,1,CoderResult getError(),False,,NULL
3,CoderResult,2,boolean isMalformed(),True,Tells whether or not this object describes a malformed-input error.,"

isMalformed
public boolean isMalformed()
Tells whether or not this object describes a malformed-input error.

Returns:
true if, and only if, this object denotes a
          malformed-input error


"
3,CoderResult,3,boolean isOverflow(),True,Tells whether or not this object describes an overflow condition.,"

isOverflow
public boolean isOverflow()
Tells whether or not this object describes an overflow condition.

Returns:
true if, and only if, this object denotes overflow


"
3,CoderResult,4,boolean isUnderflow(),True,Tells whether or not this object describes an underflow condition.,"

isUnderflow
public boolean isUnderflow()
Tells whether or not this object describes an underflow condition.

Returns:
true if, and only if, this object denotes underflow


"
3,CoderResult,5,boolean isUnmappable(),True,Tells whether or not this object describes an unmappable-character error.,"

isUnmappable
public boolean isUnmappable()
Tells whether or not this object describes an unmappable-character
 error.

Returns:
true if, and only if, this object denotes an
          unmappable-character error


"
4,CodingErrorAction,1,CodingErrorAction REPORT(),False,,NULL
4,CodingErrorAction,2,CodingErrorAction REPLACE(),False,,NULL
4,CodingErrorAction,3,CodingErrorAction IGNORE(),False,,NULL
4,CodingErrorAction,4,CodingErrorAction REPLACE(),False,,NULL
4,CodingErrorAction,5,CodingErrorAction REPLACE(),False,,NULL
5,StandardCharsets,1,Charset US_ASCII,False,,NULL
5,StandardCharsets,2,Charset ISO_8859_1,False,,NULL
5,StandardCharsets,3,Charset UTF_8,False,,NULL
5,StandardCharsets,4,Charset UTF_16,False,,NULL
5,StandardCharsets,5,Charset UTF_16BE,False,,NULL
5,StandardCharsets,6,Charset UTF_16LE,False,,NULL
5,StandardCharsets,7,Charset UTF_32,False,,NULL
5,StandardCharsets,8,Charset UTF_32BE,False,,NULL
5,StandardCharsets,9,Charset UTF_32LE,False,,NULL
5,StandardCharsets,10,Charset DEFAULT_CHARSET,False,,NULL
5,StandardCharsets,11,Charset forName(String charsetName),False,,NULL
5,StandardCharsets,12,Charset[] values(),False,,NULL
5,StandardCharsets,13,Charset decode(String name),False,,NULL
5,StandardCharsets,14,Charset encode(String name),False,,NULL
