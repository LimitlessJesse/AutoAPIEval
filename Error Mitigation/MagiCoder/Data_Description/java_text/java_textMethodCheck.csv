Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,Annotation,1,Annotation getAnnotation(String annotationType),False,,NULL
0,Annotation,2,Annotation[] getAnnotations(),False,,NULL
0,Annotation,3,Annotation[] getDeclaredAnnotations(),False,,NULL
0,Annotation,4,boolean isAnnotationPresent(String annotationType),False,,NULL
0,Annotation,5,Annotation[] getAnnotationsByType(Class<? extends Annotation> annotationType),False,,NULL
1,AttributedCharacterIterator.Attribute,1,int getRunLimit(),False,,NULL
1,AttributedCharacterIterator.Attribute,2,"int getRunLimit(int start, int end)",False,,NULL
1,AttributedCharacterIterator.Attribute,3,"int getRunLimit(int start, int end, int[] runs)",False,,NULL
1,AttributedCharacterIterator.Attribute,4,"int getRunLimit(int start, int end, int[] runs, int offset)",False,,NULL
1,AttributedCharacterIterator.Attribute,5,"int getRunLimit(int start, int end, int[] runs, int offset, int length)",False,,NULL
2,AttributedString,1,AttributedCharacterIterator iterator(),False,,NULL
2,AttributedString,2,AttributeSet getAttributes(),False,,NULL
2,AttributedString,3,"AttributeSet getAttributes(int start, int end)",False,,NULL
2,AttributedString,4,int getRunLimit(),False,,NULL
2,AttributedString,5,"int getRunStart(int start, int end)",False,,NULL
3,Bidi,1,"Bidi.getRunDirection(int start, int limit)",False,,NULL
3,Bidi,2,"Bidi.reorderVisual(char[] text, int start, int limit)",False,,NULL
3,Bidi,3,"Bidi.reorderLogical(char[] text, int start, int limit)",False,,NULL
3,Bidi,4,"Bidi.reorderInVisualContext(char[] text, int start, int limit)",False,,NULL
3,Bidi,5,"Bidi.reorderInLogicalContext(char[] text, int start, int limit)",False,,NULL
4,BreakIterator,1,int first(),True,Returns the first boundary.,"

first
public abstract int first()
Returns the first boundary. The iterator's current position is set
 to the first text boundary.

Returns:
The character index of the first text boundary.


"
4,BreakIterator,2,int following(int offset),True,Returns the first boundary following the specified character offset.,"

following
public abstract int following(int offset)
Returns the first boundary following the specified character offset. If the
 specified offset equals to the last text boundary, it returns
 BreakIterator.DONE and the iterator's current position is unchanged.
 Otherwise, the iterator's current position is set to the returned boundary.
 The value returned is always greater than the offset or the value
 BreakIterator.DONE.

Parameters:
offset - the character offset to begin scanning.
Returns:
The first boundary after the specified offset or
 BreakIterator.DONE if the last text boundary is passed in
 as the offset.
Throws:
IllegalArgumentException - if the specified offset is less than
 the first text boundary or greater than the last text boundary.


"
4,BreakIterator,3,int last(),True,Returns the last boundary.,"

last
public abstract int last()
Returns the last boundary. The iterator's current position is set
 to the last text boundary.

Returns:
The character index of the last text boundary.


"
4,BreakIterator,4,int next(int offset),True,Returns the nth boundary from the current boundary.,"

next
public abstract int next(int n)
Returns the nth boundary from the current boundary. If either
 the first or last text boundary has been reached, it returns
 BreakIterator.DONE and the current position is set to either
 the first or last text boundary depending on which one is reached. Otherwise,
 the iterator's current position is set to the new boundary.
 For example, if the iterator's current position is the mth text boundary
 and three more boundaries exist from the current boundary to the last text
 boundary, the next(2) call will return m + 2. The new text position is set
 to the (m + 2)th text boundary. A next(4) call would return
 BreakIterator.DONE and the last text boundary would become the
 new text position.

Parameters:
n - which boundary to return.  A value of 0
 does nothing.  Negative values move to previous boundaries
 and positive values move to later boundaries.
Returns:
The character index of the nth boundary from the current position
 or BreakIterator.DONE if either first or last text boundary
 has been reached.


"
4,BreakIterator,5,int previous(),True,Returns the boundary preceding the current boundary.,"

previous
public abstract int previous()
Returns the boundary preceding the current boundary. If the current boundary
 is the first text boundary, it returns BreakIterator.DONE and
 the iterator's current position is unchanged. Otherwise, the iterator's
 current position is set to the boundary preceding the current boundary.

Returns:
The character index of the previous text boundary or
 BreakIterator.DONE if the current boundary is the first text
 boundary.


"
5,ChoiceFormat,1,ChoiceFormat(String pattern),False,,NULL
5,ChoiceFormat,2,"String format(double[] limits, String[] formats, String result)",False,,NULL
5,ChoiceFormat,3,String format(double number),False,,NULL
5,ChoiceFormat,4,String toPattern(),True,Gets the pattern.,"

toPattern
public String toPattern()
Gets the pattern.

Returns:
the pattern string


"
5,ChoiceFormat,5,double[] getLimits(),True,Get the limits passed in the constructor.,"

getLimits
public double[] getLimits()
Get the limits passed in the constructor.

Returns:
the limits.


"
6,CollationElementIterator,1,int getMaxExpansion(),False,,NULL
6,CollationElementIterator,2,int getOffset(),True,Returns the character offset in the original text corresponding to the next collation element.,"

getOffset
public int getOffset()
Returns the character offset in the original text corresponding to the next
 collation element.  (That is, getOffset() returns the position in the text
 corresponding to the collation element that will be returned by the next
 call to next().)  This value will always be the index of the FIRST character
 corresponding to the collation element (a contracting character sequence is
 when two or more characters all correspond to the same collation element).
 This means if you do setOffset(x) followed immediately by getOffset(), getOffset()
 won't necessarily return x.

Returns:
The character offset in the original text corresponding to the collation
 element that will be returned by the next call to next().
Since:
1.2


"
6,CollationElementIterator,3,int getLimit(),False,,NULL
6,CollationElementIterator,4,boolean hasNext(),False,,NULL
6,CollationElementIterator,5,CollationElement next(),False,,NULL
6,CollationElementIterator,6,void setOffset(int newOffset),True,"Sets the iterator to point to the collation element corresponding to the specified character (the parameter is a CHARACTER offset in the original string, not an offset into its corresponding sequence of collation elements).","

setOffset
public void setOffset(int newOffset)
Sets the iterator to point to the collation element corresponding to
 the specified character (the parameter is a CHARACTER offset in the
 original string, not an offset into its corresponding sequence of
 collation elements).  The value returned by the next call to next()
 will be the collation element corresponding to the specified position
 in the text.  If that position is in the middle of a contracting
 character sequence, the result of the next call to next() is the
 collation element for that sequence.  This means that getOffset()
 is not guaranteed to return the same value as was passed to a preceding
 call to setOffset().

Parameters:
newOffset - The new character offset into the original text.
Since:
1.2


"
6,CollationElementIterator,7,void setLimit(int newLimit),False,,NULL
6,CollationElementIterator,8,void reset(),True,Resets the cursor to the beginning of the string.,"

reset
public void reset()
Resets the cursor to the beginning of the string.  The next call
 to next() will return the first collation element in the string.

"
6,CollationElementIterator,9,void setText(String newText),True,Set a new string over which to iterate.,"

setText
public void setText(String source)
Set a new string over which to iterate.

Parameters:
source - the new source text
Since:
1.2


"
6,CollationElementIterator,10,String getText(),False,,NULL
7,CollationKey,1,CollationKey getCollationKey(),False,,NULL
7,CollationKey,2,int compareTo(CollationKey key),True,Compare this CollationKey to the target CollationKey.,"

compareTo
public abstract int compareTo(CollationKey target)
Compare this CollationKey to the target CollationKey. The collation rules of the
 Collator object which created these keys are applied. Note:
 CollationKeys created by different Collators can not be compared.

Specified by:
compareTo in interface Comparable<CollationKey>
Parameters:
target - target CollationKey
Returns:
Returns an integer value. Value is less than zero if this is less
 than target, value is zero if this and target are equal and value is greater than
 zero if this is greater than target.
See Also:
Collator.compare(java.lang.String, java.lang.String)


"
7,CollationKey,3,int hashCode(),False,,NULL
7,CollationKey,4,boolean equals(Object obj),False,,NULL
7,CollationKey,5,String toString(),False,,NULL
8,Collator,1,"int compare(String s1, String s2)",True,Compares the source string to the target string according to the collation rules for this Collator.,"

compare
public abstract int compare(String source,
                            String target)
Compares the source string to the target string according to the
 collation rules for this Collator.  Returns an integer less than,
 equal to or greater than zero depending on whether the source String is
 less than, equal to or greater than the target string.  See the Collator
 class description for an example of use.
 
 For a one time comparison, this method has the best performance. If a
 given String will be involved in multiple comparisons, CollationKey.compareTo
 has the best performance. See the Collator class description for an example
 using CollationKeys.

Parameters:
source - the source string.
target - the target string.
Returns:
Returns an integer value. Value is less than zero if source is less than
 target, value is zero if source and target are equal, value is greater than zero
 if source is greater than target.
See Also:
CollationKey, 
getCollationKey(java.lang.String)


"
8,Collator,2,"int compare(Object o1, Object o2)",True,Compares its two arguments for order.,"

compare
public int compare(Object o1,
                   Object o2)
Compares its two arguments for order.  Returns a negative integer,
 zero, or a positive integer as the first argument is less than, equal
 to, or greater than the second.
 
 This implementation merely returns
   compare((String)o1, (String)o2) .

Specified by:
compare in interface Comparator<Object>
Parameters:
o1 - the first object to be compared.
o2 - the second object to be compared.
Returns:
a negative integer, zero, or a positive integer as the
         first argument is less than, equal to, or greater than the
         second.
Throws:
ClassCastException - the arguments cannot be cast to Strings.
Since:
1.2
See Also:
Comparator


"
8,Collator,3,"int compare(String source, String target)",True,Compares the source string to the target string according to the collation rules for this Collator.,"

compare
public abstract int compare(String source,
                            String target)
Compares the source string to the target string according to the
 collation rules for this Collator.  Returns an integer less than,
 equal to or greater than zero depending on whether the source String is
 less than, equal to or greater than the target string.  See the Collator
 class description for an example of use.
 
 For a one time comparison, this method has the best performance. If a
 given String will be involved in multiple comparisons, CollationKey.compareTo
 has the best performance. See the Collator class description for an example
 using CollationKeys.

Parameters:
source - the source string.
target - the target string.
Returns:
Returns an integer value. Value is less than zero if source is less than
 target, value is zero if source and target are equal, value is greater than zero
 if source is greater than target.
See Also:
CollationKey, 
getCollationKey(java.lang.String)


"
8,Collator,4,"int compare(String source, String target, int sourceIndex, int targetIndex, int sourceCount, int targetCount)",False,,NULL
8,Collator,5,int hashCode(),True,Generates the hash code for this Collator.,"

hashCode
public abstract int hashCode()
Generates the hash code for this Collator.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
9,DateFormat,1,final String format(Date date),False,,NULL
9,DateFormat,2,Date parse(String source) throws ParseException,True,Parses text from the beginning of the given string to produce a date.,"

parse
public Date parse(String source)
           throws ParseException
Parses text from the beginning of the given string to produce a date.
 The method may not use the entire text of the given string.
 
 See the parse(String, ParsePosition) method for more information
 on date parsing.

Parameters:
source - A String whose beginning should be parsed.
Returns:
A Date parsed from the string.
Throws:
ParseException - if the beginning of the specified string
            cannot be parsed.


"
9,DateFormat,3,final void setTimeZone(TimeZone value),False,,NULL
9,DateFormat,4,final void setLenient(boolean lenient),False,,NULL
9,DateFormat,5,final boolean isLenient(),False,,NULL
10,DateFormat.Field,1,"StringBuffer format(Date date, StringBuffer toAppendTo, FieldPosition fieldPosition)",False,,NULL
10,DateFormat.Field,2,"Date parse(String source, ParsePosition pos)",False,,NULL
10,DateFormat.Field,3,Date parse(String source),False,,NULL
10,DateFormat.Field,4,String format(Date date),False,,NULL
10,DateFormat.Field,5,"StringBuffer format(Date date, StringBuffer toAppendTo, FieldPosition fieldPosition)",False,,NULL
11,DateFormatSymbols,1,getEras(),False,,NULL
11,DateFormatSymbols,2,getMonths(),False,,NULL
11,DateFormatSymbols,3,getShortMonths(),False,,NULL
11,DateFormatSymbols,4,getShortWeekdays(),False,,NULL
11,DateFormatSymbols,5,getWeekdays(),False,,NULL
12,DecimalFormat,1,DecimalFormat(String pattern),False,,NULL
12,DecimalFormat,2,String format(double number),False,,NULL
12,DecimalFormat,3,String format(long number),False,,NULL
12,DecimalFormat,4,Number parse(String source),False,,NULL
12,DecimalFormat,5,"Number parse(String source, ParsePosition parsePosition)",True,Parses text from a string to produce a Number.,"

parse
public Number parse(String text,
                    ParsePosition pos)
Parses text from a string to produce a Number.
 
 The method attempts to parse text starting at the index given by
 pos.
 If parsing succeeds, then the index of pos is updated
 to the index after the last character used (parsing does not necessarily
 use all characters up to the end of the string), and the parsed
 number is returned. The updated pos can be used to
 indicate the starting point for the next call to this method.
 If an error occurs, then the index of pos is not
 changed, the error index of pos is set to the index of
 the character where the error occurred, and null is returned.
 
 The subclass returned depends on the value of isParseBigDecimal()
 as well as on the string being parsed.
 
If isParseBigDecimal() is false (the default),
       most integer values are returned as Long
       objects, no matter how they are written: ""17"" and
       ""17.000"" both parse to Long(17).
       Values that cannot fit into a Long are returned as
       Doubles. This includes values with a fractional part,
       infinite values, NaN, and the value -0.0.
       DecimalFormat does not decide whether to
       return a Double or a Long based on the
       presence of a decimal separator in the source string. Doing so
       would prevent integers that overflow the mantissa of a double,
       such as ""-9,223,372,036,854,775,808.00"", from being
       parsed accurately.
       
       Callers may use the Number methods
       doubleValue, longValue, etc., to obtain
       the type they want.
   If isParseBigDecimal() is true, values are returned
       as BigDecimal objects. The values are the ones
       constructed by BigDecimal.BigDecimal(String)
       for corresponding strings in locale-independent format. The
       special cases negative and positive infinity and NaN are returned
       as Double instances holding the values of the
       corresponding Double constants.
 

DecimalFormat parses all Unicode characters that represent
 decimal digits, as defined by Character.digit(). In
 addition, DecimalFormat also recognizes as digits the ten
 consecutive characters starting with the localized zero digit defined in
 the DecimalFormatSymbols object.

Specified by:
parse in class NumberFormat
Parameters:
text - the string to be parsed
pos - A ParsePosition object with index and error
             index information as described above.
Returns:
the parsed value, or null if the parse fails
Throws:
NullPointerException - if text or
             pos is null.
See Also:
NumberFormat.isParseIntegerOnly(), 
Format.parseObject(java.lang.String, java.text.ParsePosition)


"
13,DecimalFormatSymbols,1,DecimalFormatSymbols(),False,,NULL
13,DecimalFormatSymbols,2,void setDecimalSeparator(char newValue),True,Sets the character used for decimal sign.,"

setDecimalSeparator
public void setDecimalSeparator(char decimalSeparator)
Sets the character used for decimal sign. Different for French, etc.

Parameters:
decimalSeparator - the character used for decimal sign


"
13,DecimalFormatSymbols,3,char getDecimalSeparator(),True,Gets the character used for decimal sign.,"

getDecimalSeparator
public char getDecimalSeparator()
Gets the character used for decimal sign. Different for French, etc.

Returns:
the character used for decimal sign


"
13,DecimalFormatSymbols,4,void setGroupingSeparator(char newValue),True,Sets the character used for thousands separator.,"

setGroupingSeparator
public void setGroupingSeparator(char groupingSeparator)
Sets the character used for thousands separator. Different for French, etc.

Parameters:
groupingSeparator - the grouping separator


"
13,DecimalFormatSymbols,5,char getGroupingSeparator(),True,Gets the character used for thousands separator.,"

getGroupingSeparator
public char getGroupingSeparator()
Gets the character used for thousands separator. Different for French, etc.

Returns:
the grouping separator


"
13,DecimalFormatSymbols,6,void setPerMill(char newValue),True,Sets the character used for per mille sign.,"

setPerMill
public void setPerMill(char perMill)
Sets the character used for per mille sign. Different for Arabic, etc.

Parameters:
perMill - the character used for per mille sign


"
13,DecimalFormatSymbols,7,char getPerMill(),True,Gets the character used for per mille sign.,"

getPerMill
public char getPerMill()
Gets the character used for per mille sign. Different for Arabic, etc.

Returns:
the character used for per mille sign


"
13,DecimalFormatSymbols,8,void setZeroDigit(char newValue),True,Sets the character used for zero.,"

setZeroDigit
public void setZeroDigit(char zeroDigit)
Sets the character used for zero. Different for Arabic, etc.

Parameters:
zeroDigit - the character used for zero


"
13,DecimalFormatSymbols,9,char getZeroDigit(),True,Gets the character used for zero.,"

getZeroDigit
public char getZeroDigit()
Gets the character used for zero. Different for Arabic, etc.

Returns:
the character used for zero


"
13,DecimalFormatSymbols,10,void setDigit(char newValue),True,Sets the character used for a digit in a pattern.,"

setDigit
public void setDigit(char digit)
Sets the character used for a digit in a pattern.

Parameters:
digit - the character used for a digit in a pattern


"
13,DecimalFormatSymbols,11,char getDigit(),True,Gets the character used for a digit in a pattern.,"

getDigit
public char getDigit()
Gets the character used for a digit in a pattern.

Returns:
the character used for a digit in a pattern


"
13,DecimalFormatSymbols,12,void setMinusSign(char newValue),True,Sets the character used to represent minus sign.,"

setMinusSign
public void setMinusSign(char minusSign)
Sets the character used to represent minus sign. If no explicit
 negative format is specified, one is formed by prefixing
 minusSign to the positive format.

Parameters:
minusSign - the character representing minus sign


"
13,DecimalFormatSymbols,13,char getMinusSign(),True,Gets the character used to represent minus sign.,"

getMinusSign
public char getMinusSign()
Gets the character used to represent minus sign. If no explicit
 negative format is specified, one is formed by prefixing
 minusSign to the positive format.

Returns:
the character representing minus sign


"
13,DecimalFormatSymbols,14,void setPatternSeparator(char newValue),True,Sets the character used to separate positive and negative subpatterns in a pattern.,"

setPatternSeparator
public void setPatternSeparator(char patternSeparator)
Sets the character used to separate positive and negative subpatterns
 in a pattern.

Parameters:
patternSeparator - the pattern separator


"
13,DecimalFormatSymbols,15,char getPatternSeparator(),True,Gets the character used to separate positive and negative subpatterns in a pattern.,"

getPatternSeparator
public char getPatternSeparator()
Gets the character used to separate positive and negative subpatterns
 in a pattern.

Returns:
the pattern separator


"
13,DecimalFormatSymbols,16,void setCurrencySymbol(String newValue),True,Sets the currency symbol for the currency of these DecimalFormatSymbols in their locale.,"

setCurrencySymbol
public void setCurrencySymbol(String currency)
Sets the currency symbol for the currency of these
 DecimalFormatSymbols in their locale.

Parameters:
currency - the currency symbol
Since:
1.2


"
13,DecimalFormatSymbols,17,String getCurrencySymbol(),True,Returns the currency symbol for the currency of these DecimalFormatSymbols in their locale.,"

getCurrencySymbol
public String getCurrencySymbol()
Returns the currency symbol for the currency of these
 DecimalFormatSymbols in their locale.

Returns:
the currency symbol
Since:
1.2


"
13,DecimalFormatSymbols,18,void setMonetaryDecimalSeparator(char newValue),True,Sets the monetary decimal separator.,"

setMonetaryDecimalSeparator
public void setMonetaryDecimalSeparator(char sep)
Sets the monetary decimal separator.

Parameters:
sep - the monetary decimal separator
Since:
1.2


"
13,DecimalFormatSymbols,19,char getMonetaryDecimalSeparator(),True,Returns the monetary decimal separator.,"

getMonetaryDecimalSeparator
public char getMonetaryDecimalSeparator()
Returns the monetary decimal separator.

Returns:
the monetary decimal separator
Since:
1.2


"
13,DecimalFormatSymbols,20,void setExponentSeparator(String newValue),True,Sets the string used to separate the mantissa from the exponent.,"

setExponentSeparator
public void setExponentSeparator(String exp)
Sets the string used to separate the mantissa from the exponent.
 Examples: ""x10^"" for 1.23x10^4, ""E"" for 1.23E4.

Parameters:
exp - the exponent separator string
Throws:
NullPointerException - if exp is null
Since:
1.6
See Also:
getExponentSeparator()


"
13,DecimalFormatSymbols,21,String getExponentSeparator(),True,Returns the string used to separate the mantissa from the exponent.,"

getExponentSeparator
public String getExponentSeparator()
Returns the string used to separate the mantissa from the exponent.
 Examples: ""x10^"" for 1.23x10^4, ""E"" for 1.23E4.

Returns:
the exponent separator string
Since:
1.6
See Also:
setExponentSeparator(java.lang.String)


"
13,DecimalFormatSymbols,22,void setPercent(char newValue),True,Sets the character used for percent sign.,"

setPercent
public void setPercent(char percent)
Sets the character used for percent sign. Different for Arabic, etc.

Parameters:
percent - the character used for percent sign


"
13,DecimalFormatSymbols,23,char getPercent(),True,Gets the character used for percent sign.,"

getPercent
public char getPercent()
Gets the character used for percent sign. Different for Arabic, etc.

Returns:
the character used for percent sign


"
13,DecimalFormatSymbols,24,void setNaNSymbol(String newValue),False,,NULL
13,DecimalFormatSymbols,25,String getNaNSymbol(),False,,NULL
13,DecimalFormatSymbols,26,void setInfinitySymbol(String newValue),False,,NULL
13,DecimalFormatSymbols,27,String getInfinitySymbol(),False,,NULL
14,FieldPosition,1,int getBeginIndex(),True,Retrieves the index of the first character in the requested field.,"

getBeginIndex
public int getBeginIndex()
Retrieves the index of the first character in the requested field.

Returns:
the begin index


"
14,FieldPosition,2,int getEndIndex(),True,Retrieves the index of the character following the last character in the requested field.,"

getEndIndex
public int getEndIndex()
Retrieves the index of the character following the last character in the
 requested field.

Returns:
the end index


"
14,FieldPosition,3,void setBeginIndex(int newBegin),True,Sets the begin index.,"

setBeginIndex
public void setBeginIndex(int bi)
Sets the begin index.  For use by subclasses of Format.

Parameters:
bi - the begin index
Since:
1.2


"
14,FieldPosition,4,void setEndIndex(int newEnd),True,Sets the end index.,"

setEndIndex
public void setEndIndex(int ei)
Sets the end index.  For use by subclasses of Format.

Parameters:
ei - the end index
Since:
1.2


"
14,FieldPosition,5,void setFieldWidth(int newWidth),False,,NULL
15,Format,1,String format(Object obj),True,Formats an object to produce a string.,"

format
public final String format(Object obj)
Formats an object to produce a string. This is equivalent to
 
format(obj,
         new StringBuffer(), new FieldPosition(0)).toString();


Parameters:
obj - The object to format
Returns:
Formatted string.
Throws:
IllegalArgumentException - if the Format cannot format the given
            object


"
15,Format,2,"StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos)",True,Formats an object and appends the resulting text to a given string buffer.,"

format
public abstract StringBuffer format(Object obj,
                                    StringBuffer toAppendTo,
                                    FieldPosition pos)
Formats an object and appends the resulting text to a given string
 buffer.
 If the pos argument identifies a field used by the format,
 then its indices are set to the beginning and end of the first such
 field encountered.

Parameters:
obj - The object to format
toAppendTo - where the text is to be appended
pos - A FieldPosition identifying a field
               in the formatted text
Returns:
the string buffer passed in as toAppendTo,
               with formatted text appended
Throws:
NullPointerException - if toAppendTo or
            pos is null
IllegalArgumentException - if the Format cannot format the given
            object


"
15,Format,3,"String format(Object obj, Formatter formatter)",False,,NULL
15,Format,4,"String format(Object obj, Formatter formatter, FieldPosition pos)",False,,NULL
15,Format,5,"String format(Object obj, Formatter formatter, FieldPosition pos, ObjectBuffer buffer)",False,,NULL
16,Format.Field,1,"StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos)",False,,NULL
16,Format.Field,2,String format(Object obj),False,,NULL
16,Format.Field,3,"StringBuffer format(long number, StringBuffer toAppendTo, FieldPosition pos)",False,,NULL
16,Format.Field,4,String format(long number),False,,NULL
16,Format.Field,5,"StringBuffer format(double number, StringBuffer toAppendTo, FieldPosition pos)",False,,NULL
16,Format.Field,6,String format(double number),False,,NULL
16,Format.Field,7,"StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos)",False,,NULL
16,Format.Field,8,String format(Object obj),False,,NULL
16,Format.Field,9,"StringBuffer format(long number, StringBuffer toAppendTo, FieldPosition pos)",False,,NULL
16,Format.Field,10,String format(long number),False,,NULL
16,Format.Field,11,"StringBuffer format(double number, StringBuffer toAppendTo, FieldPosition pos)",False,,NULL
16,Format.Field,12,String format(double number),False,,NULL
17,MessageFormat,1,String format(Object... args),False,,NULL
17,MessageFormat,2,String format(Object[] args),False,,NULL
17,MessageFormat,3,"String format(Object arg0, Object arg1, Object... arg2)",False,,NULL
17,MessageFormat,4,"StringBuffer format(StringBuffer toAppendTo, Object... args)",False,,NULL
17,MessageFormat,5,"StringBuffer format(StringBuffer toAppendTo, Object[] args)",False,,NULL
18,MessageFormat.Field,1,"AttributedCharacterIterator formatToCharacterIterator(String pattern, Object... arguments)",False,,NULL
18,MessageFormat.Field,2,"String format(String pattern, Object... arguments)",False,,NULL
18,MessageFormat.Field,3,"String format(Locale locale, String pattern, Object... arguments)",False,,NULL
18,MessageFormat.Field,4,"String format(String pattern, Object arg0, Object arg1, Object... arguments)",False,,NULL
18,MessageFormat.Field,5,"String format(Locale locale, String pattern, Object arg0, Object arg1, Object... arguments)",False,,NULL
19,Normalizer,1,"String normalize(String src, Form form)",False,,NULL
19,Normalizer,2,"String[] split(String src, int limit)",False,,NULL
19,Normalizer,3,String strip(String src),False,,NULL
19,Normalizer,4,String toLowerCase(Locale locale),False,,NULL
19,Normalizer,5,String toUpperCase(Locale locale),False,,NULL
20,NumberFormat,1,NumberFormat getInstance(),True,Returns a general-purpose number format for the current default FORMAT locale.,"

getInstance
public static final NumberFormat getInstance()
Returns a general-purpose number format for the current default
 FORMAT locale.
 This is the same as calling
 getNumberInstance().

Returns:
the NumberFormat instance for general-purpose number
 formatting


"
20,NumberFormat,2,NumberFormat getInstance(Locale locale),True,Returns a general-purpose number format for the specified locale.,"

getInstance
public static NumberFormat getInstance(Locale inLocale)
Returns a general-purpose number format for the specified locale.
 This is the same as calling
 getNumberInstance(inLocale).

Parameters:
inLocale - the desired locale
Returns:
the NumberFormat instance for general-purpose number
 formatting


"
20,NumberFormat,3,String format(double number),True,Specialization of format.,"

format
public final String format(double number)
Specialization of format.

Parameters:
number - the double number to format
Returns:
the formatted String
Throws:
ArithmeticException - if rounding is needed with rounding
                   mode being set to RoundingMode.UNNECESSARY
See Also:
Format.format(java.lang.Object)


"
20,NumberFormat,4,String format(long number),True,Specialization of format.,"

format
public final String format(long number)
Specialization of format.

Parameters:
number - the long number to format
Returns:
the formatted String
Throws:
ArithmeticException - if rounding is needed with rounding
                   mode being set to RoundingMode.UNNECESSARY
See Also:
Format.format(java.lang.Object)


"
20,NumberFormat,5,Number parse(String source),True,Parses text from the beginning of the given string to produce a number.,"

parse
public Number parse(String source)
             throws ParseException
Parses text from the beginning of the given string to produce a number.
 The method may not use the entire text of the given string.
 
 See the parse(String, ParsePosition) method for more information
 on number parsing.

Parameters:
source - A String whose beginning should be parsed.
Returns:
A Number parsed from the string.
Throws:
ParseException - if the beginning of the specified string
            cannot be parsed.


"
21,NumberFormat.Field,1,NumberFormat.Field getFieldAttribute(String fieldName),False,,NULL
21,NumberFormat.Field,2,FieldPosition[] getFieldPositions(),False,,NULL
21,NumberFormat.Field,3,NumberFormat.Field[] getFields(),False,,NULL
21,NumberFormat.Field,4,NumberFormat.Field getIntegerField(),False,,NULL
21,NumberFormat.Field,5,NumberFormat.Field getNumberField(),False,,NULL
21,NumberFormat.Field,6,NumberFormat.Field getPercentField(),False,,NULL
21,NumberFormat.Field,7,NumberFormat.Field getZeroDigitField(),False,,NULL
21,NumberFormat.Field,8,NumberFormat.Field getCurrencyField(),False,,NULL
21,NumberFormat.Field,9,NumberFormat.Field getFractionField(),False,,NULL
21,NumberFormat.Field,10,NumberFormat.Field getExponentField(),False,,NULL
21,NumberFormat.Field,11,NumberFormat.Field getGroupingField(),False,,NULL
21,NumberFormat.Field,12,NumberFormat.Field getPatternField(),False,,NULL
21,NumberFormat.Field,13,NumberFormat.Field getSignField(),False,,NULL
21,NumberFormat.Field,14,NumberFormat.Field getTypeField(),False,,NULL
21,NumberFormat.Field,15,NumberFormat.Field getUnitField(),False,,NULL
21,NumberFormat.Field,16,NumberFormat.Field getValueField(),False,,NULL
21,NumberFormat.Field,17,NumberFormat.Field getCurrency(),False,,NULL
21,NumberFormat.Field,18,NumberFormat.Field getInteger(),False,,NULL
21,NumberFormat.Field,19,NumberFormat.Field getNumber(),False,,NULL
21,NumberFormat.Field,20,NumberFormat.Field getPercent(),False,,NULL
21,NumberFormat.Field,21,NumberFormat.Field getZeroDigit(),False,,NULL
21,NumberFormat.Field,22,NumberFormat.Field getFraction(),False,,NULL
21,NumberFormat.Field,23,NumberFormat.Field getExponent(),False,,NULL
21,NumberFormat.Field,24,NumberFormat.Field getGrouping(),False,,NULL
21,NumberFormat.Field,25,NumberFormat.Field getPattern(),False,,NULL
21,NumberFormat.Field,26,NumberFormat.Field getSign(),False,,NULL
21,NumberFormat.Field,27,NumberFormat.Field getType(),False,,NULL
21,NumberFormat.Field,28,NumberFormat.Field getUnit(),False,,NULL
21,NumberFormat.Field,29,NumberFormat.Field getValue(),False,,NULL
22,ParsePosition,1,int getErrorIndex(),True,"Retrieve the index at which an error occurred, or -1 if the error index has not been set.","

getErrorIndex
public int getErrorIndex()
Retrieve the index at which an error occurred, or -1 if the
 error index has not been set.

Returns:
the index at which an error occurred
Since:
1.2


"
22,ParsePosition,2,void setErrorIndex(int errorIndex),True,Set the index at which a parse error occurred.,"

setErrorIndex
public void setErrorIndex(int ei)
Set the index at which a parse error occurred.  Formatters
 should set this before returning an error code from their
 parseObject method.  The default value is -1 if this is not set.

Parameters:
ei - the index at which an error occurred
Since:
1.2


"
22,ParsePosition,3,void setIndex(int newIndex),True,Set the current parse position.,"

setIndex
public void setIndex(int index)
Set the current parse position.

Parameters:
index - the current parse position


"
22,ParsePosition,4,int getIndex(),True,Retrieve the current parse position.,"

getIndex
public int getIndex()
Retrieve the current parse position.  On input to a parse method, this
 is the index of the character at which parsing will begin; on output, it
 is the index of the character following the last character parsed.

Returns:
the current parse position


"
22,ParsePosition,5,void setErrorIndex(int errorIndex),True,Set the index at which a parse error occurred.,"

setErrorIndex
public void setErrorIndex(int ei)
Set the index at which a parse error occurred.  Formatters
 should set this before returning an error code from their
 parseObject method.  The default value is -1 if this is not set.

Parameters:
ei - the index at which an error occurred
Since:
1.2


"
23,RuleBasedCollator,1,"int compare(String source, String target)",True,Compares the character data stored in two different strings based on the collation rules.,"

compare
public int compare(String source,
                   String target)
Compares the character data stored in two different strings based on the
 collation rules.  Returns information about whether a string is less
 than, greater than or equal to another string in a language.
 This can be overriden in a subclass.

Specified by:
compare in class Collator
Parameters:
source - the source string.
target - the target string.
Returns:
Returns an integer value. Value is less than zero if source is less than
 target, value is zero if source and target are equal, value is greater than zero
 if source is greater than target.
Throws:
NullPointerException - if source or target is null.
See Also:
CollationKey, 
Collator.getCollationKey(java.lang.String)


"
23,RuleBasedCollator,2,"int compare(Object o1, Object o2)",False,,NULL
23,RuleBasedCollator,3,int getCollationKey(String source).getSourceString(),False,,NULL
23,RuleBasedCollator,4,int getCollationKey(String source).getWeight(int weight),False,,NULL
23,RuleBasedCollator,5,int getCollationKey(String source).getMaximumLength(),False,,NULL
23,RuleBasedCollator,6,int getCollationKey(String source).getSourceString(),False,,NULL
23,RuleBasedCollator,7,int getCollationKey(String source).getWeight(int weight),False,,NULL
23,RuleBasedCollator,8,int getCollationKey(String source).getMaximumLength(),False,,NULL
23,RuleBasedCollator,9,int getCollationKey(String source).getSourceString(),False,,NULL
23,RuleBasedCollator,10,int getCollationKey(String source).getWeight(int weight),False,,NULL
23,RuleBasedCollator,11,int getCollationKey(String source).getMaximumLength(),False,,NULL
23,RuleBasedCollator,12,int getCollationKey(String source).getSourceString(),False,,NULL
23,RuleBasedCollator,13,int getCollationKey(String source).getWeight(int weight),False,,NULL
23,RuleBasedCollator,14,int getCollationKey(String source).getMaximumLength(),False,,NULL
23,RuleBasedCollator,15,int getCollationKey(String source).getSourceString(),False,,NULL
23,RuleBasedCollator,16,int getCollationKey(String source).getWeight(int weight),False,,NULL
23,RuleBasedCollator,17,int getCollationKey(String source).getMaximumLength(),False,,NULL
23,RuleBasedCollator,18,int getCollationKey(String source).getSourceString(),False,,NULL
23,RuleBasedCollator,19,int getCollationKey(String source).getWeight(int weight),False,,NULL
23,RuleBasedCollator,20,int getCollationKey(String source).getMaximumLength(),False,,NULL
24,SimpleDateFormat,1,final String format(Date date),False,,NULL
24,SimpleDateFormat,2,final Date parse(String source),False,,NULL
24,SimpleDateFormat,3,final void applyPattern(String pattern),False,,NULL
24,SimpleDateFormat,4,final String toPattern(),False,,NULL
24,SimpleDateFormat,5,final boolean isLenient(),False,,NULL
25,StringCharacterIterator,1,char first(),True,Implements CharacterIterator.first() for String.,"

first
public char first()
Implements CharacterIterator.first() for String.

Specified by:
first in interface CharacterIterator
Returns:
the first character in the text, or DONE if the text is empty
See Also:
CharacterIterator.first()


"
25,StringCharacterIterator,2,char last(),True,Implements CharacterIterator.last() for String.,"

last
public char last()
Implements CharacterIterator.last() for String.

Specified by:
last in interface CharacterIterator
Returns:
the last character in the text, or DONE if the text is empty
See Also:
CharacterIterator.last()


"
25,StringCharacterIterator,3,char current(),True,Implements CharacterIterator.current() for String.,"

current
public char current()
Implements CharacterIterator.current() for String.

Specified by:
current in interface CharacterIterator
Returns:
the character at the current position or DONE if the current
 position is off the end of the text.
See Also:
CharacterIterator.current()


"
25,StringCharacterIterator,4,char next(),True,Implements CharacterIterator.next() for String.,"

next
public char next()
Implements CharacterIterator.next() for String.

Specified by:
next in interface CharacterIterator
Returns:
the character at the new position or DONE if the new
 position is off the end of the text range.
See Also:
CharacterIterator.next()


"
25,StringCharacterIterator,5,char previous(),True,Implements CharacterIterator.previous() for String.,"

previous
public char previous()
Implements CharacterIterator.previous() for String.

Specified by:
previous in interface CharacterIterator
Returns:
the character at the new position or DONE if the current
 position is equal to getBeginIndex().
See Also:
CharacterIterator.previous()


"
25,StringCharacterIterator,6,char setIndex(int position),True,Implements CharacterIterator.setIndex() for String.,"

setIndex
public char setIndex(int p)
Implements CharacterIterator.setIndex() for String.

Specified by:
setIndex in interface CharacterIterator
Parameters:
p - the position within the text.  Valid values range from
 getBeginIndex() to getEndIndex().  An IllegalArgumentException is thrown
 if an invalid value is supplied.
Returns:
the character at the specified position or DONE if the specified position is equal to getEndIndex()
See Also:
CharacterIterator.setIndex(int)


"
25,StringCharacterIterator,7,int getBeginIndex(),True,Implements CharacterIterator.getBeginIndex() for String.,"

getBeginIndex
public int getBeginIndex()
Implements CharacterIterator.getBeginIndex() for String.

Specified by:
getBeginIndex in interface CharacterIterator
Returns:
the index at which the text begins.
See Also:
CharacterIterator.getBeginIndex()


"
25,StringCharacterIterator,8,int getEndIndex(),True,Implements CharacterIterator.getEndIndex() for String.,"

getEndIndex
public int getEndIndex()
Implements CharacterIterator.getEndIndex() for String.

Specified by:
getEndIndex in interface CharacterIterator
Returns:
the index after the last character in the text
See Also:
CharacterIterator.getEndIndex()


"
25,StringCharacterIterator,9,int getIndex(),True,Implements CharacterIterator.getIndex() for String.,"

getIndex
public int getIndex()
Implements CharacterIterator.getIndex() for String.

Specified by:
getIndex in interface CharacterIterator
Returns:
the current index.
See Also:
CharacterIterator.getIndex()


"
25,StringCharacterIterator,10,Object clone(),True,Creates a copy of this iterator.,"

clone
public Object clone()
Creates a copy of this iterator.

Specified by:
clone in interface CharacterIterator
Overrides:
clone in class Object
Returns:
A copy of this
See Also:
Cloneable


"
25,StringCharacterIterator,11,boolean equals(Object obj),True,Compares the equality of two StringCharacterIterator objects.,"

equals
public boolean equals(Object obj)
Compares the equality of two StringCharacterIterator objects.

Overrides:
equals in class Object
Parameters:
obj - the StringCharacterIterator object to be compared with.
Returns:
true if the given obj is the same as this
 StringCharacterIterator object; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
25,StringCharacterIterator,12,int hashCode(),True,Computes a hashcode for this iterator.,"

hashCode
public int hashCode()
Computes a hashcode for this iterator.

Overrides:
hashCode in class Object
Returns:
A hash code
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
25,StringCharacterIterator,13,String toString(),False,,NULL
