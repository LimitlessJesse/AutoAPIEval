Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,AffineTransformOp,1,"AffineTransformOp(AffineTransform at, int type)",False,,NULL
0,AffineTransformOp,2,"BufferedImage filter(BufferedImage src, BufferedImage dst)",True,Transforms the source BufferedImage and stores the results in the destination BufferedImage.,"

filter
public final BufferedImage filter(BufferedImage src,
                                  BufferedImage dst)
Transforms the source BufferedImage and stores the results
 in the destination BufferedImage.
 If the color models for the two images do not match, a color
 conversion into the destination color model is performed.
 If the destination image is null,
 a BufferedImage is created with the source
 ColorModel.
 
 The coordinates of the rectangle returned by
 getBounds2D(BufferedImage)
 are not necessarily the same as the coordinates of the
 BufferedImage returned by this method.  If the
 upper-left corner coordinates of the rectangle are
 negative then this part of the rectangle is not drawn.  If the
 upper-left corner coordinates of the  rectangle are positive
 then the filtered image is drawn at that position in the
 destination BufferedImage.
 
 An IllegalArgumentException is thrown if the source is
 the same as the destination.

Specified by:
filter in interface BufferedImageOp
Parameters:
src - The BufferedImage to transform.
dst - The BufferedImage in which to store the results
 of the transformation.
Returns:
The filtered BufferedImage.
Throws:
IllegalArgumentException - if src and
         dst are the same
ImagingOpException - if the image cannot be transformed
         because of a data-processing error that might be
         caused by an invalid image format, tile format, or
         image-processing operation, or any other unsupported
         operation.


"
0,AffineTransformOp,3,AffineTransform getTransform(),True,Returns the affine transform used by this transform operation.,"

getTransform
public final AffineTransform getTransform()
Returns the affine transform used by this transform operation.

Returns:
The AffineTransform associated with this op.


"
0,AffineTransformOp,4,void setTransform(AffineTransform at),False,,NULL
0,AffineTransformOp,5,int getType(),False,,NULL
1,AreaAveragingScaleFilter,1,void setFilterQuality(int filterQuality),False,,NULL
1,AreaAveragingScaleFilter,2,int getFilterQuality(),False,,NULL
1,AreaAveragingScaleFilter,3,void setScale(double scale),False,,NULL
1,AreaAveragingScaleFilter,4,double getScale(),False,,NULL
1,AreaAveragingScaleFilter,5,void setAreaAveraging(boolean areaAveraging),False,,NULL
2,BandCombineOp,1,"void setPixel(int x, int y, int rgb)",False,,NULL
2,BandCombineOp,2,"int getPixel(int x, int y)",False,,NULL
2,BandCombineOp,3,"void setPixels(int x, int y, int w, int h, int[] pixels)",False,,NULL
2,BandCombineOp,4,"int[] getPixels(int x, int y, int w, int h, int[] pixels)",False,,NULL
2,BandCombineOp,5,void setColor(int rgb),False,,NULL
2,BandCombineOp,6,int getColor(),False,,NULL
2,BandCombineOp,7,void setData(Raster raster),False,,NULL
2,BandCombineOp,8,Raster getData(),False,,NULL
2,BandCombineOp,9,void setSampleModel(SampleModel sm),False,,NULL
2,BandCombineOp,10,SampleModel getSampleModel(),False,,NULL
2,BandCombineOp,11,void setColorModel(ColorModel cm),False,,NULL
2,BandCombineOp,12,ColorModel getColorModel(),False,,NULL
2,BandCombineOp,13,void setTile(Tile tile),False,,NULL
2,BandCombineOp,14,Tile getTile(),False,,NULL
2,BandCombineOp,15,"void setProperty(String name, Object value)",False,,NULL
2,BandCombineOp,16,Object getProperty(String name),False,,NULL
2,BandCombineOp,17,"void setProperty(String name, Object value, boolean preserve)",False,,NULL
2,BandCombineOp,18,"Object getProperty(String name, Object defaultValue)",False,,NULL
2,BandCombineOp,19,"void setProperty(String name, Object value, boolean preserve, boolean preserveDefault)",False,,NULL
2,BandCombineOp,20,"Object getProperty(String name, Object defaultValue, boolean preserveDefault)",False,,NULL
3,BandedSampleModel,1,int getNumBands(),False,,NULL
3,BandedSampleModel,2,int getSampleSize(int band),False,,NULL
3,BandedSampleModel,3,int getPixelStride(int band),False,,NULL
3,BandedSampleModel,4,int getScanlineStride(int band),False,,NULL
3,BandedSampleModel,5,int getWidth(),False,,NULL
3,BandedSampleModel,6,int getHeight(),False,,NULL
3,BandedSampleModel,7,int getTransferType(int band),False,,NULL
3,BandedSampleModel,8,int getDataType(int band),False,,NULL
3,BandedSampleModel,9,int getNumDataElements(),False,,NULL
3,BandedSampleModel,10,int getMinimumBand(),False,,NULL
3,BandedSampleModel,11,int getMaximumBand(),False,,NULL
3,BandedSampleModel,12,int getBandOffset(int band),False,,NULL
3,BandedSampleModel,13,int getBand(int bandIndex),False,,NULL
3,BandedSampleModel,14,"int getBand(int x, int y)",False,,NULL
3,BandedSampleModel,15,"int getBand(int x, int y, int w, int h)",False,,NULL
3,BandedSampleModel,16,"int getBand(int x, int y, int w, int h, int[] bands)",False,,NULL
3,BandedSampleModel,17,"int getBand(int x, int y, int w, int h, int[] bands, int[] offsets)",False,,NULL
3,BandedSampleModel,18,"int getBand(int x, int y, int w, int h, int[] bands, int[] offsets, int[] strides)",False,,NULL
3,BandedSampleModel,19,"int getBand(int x, int y, int w, int h, int[] bands, int[] offsets, int[] strides, int[] types)",False,,NULL
3,BandedSampleModel,20,"int getBand(int x, int y, int w, int h, int[] bands, int[] offsets, int[] strides, int[] types, int[] sizes)",False,,NULL
3,BandedSampleModel,21,"int getBand(int x, int y, int w, int h, int[] bands, int[] offsets, int[] strides, int[] types, int[] sizes, int[] transfers)",False,,NULL
3,BandedSampleModel,22,"int getBand(int x, int y, int w, int h, int[] bands, int[] offsets, int[] strides, int[] types, int[] sizes, int[] transfers, int[] dataTypes)",False,,NULL
3,BandedSampleModel,23,"int getBand(int x, int y, int w, int h, int[] bands, int[] offsets, int[] strides, int[] types, int[] sizes, int[] transfers, int[] dataTypes, int[] endiannesses)",False,,NULL
3,BandedSampleModel,24,"int getBand(int x, int y, int w, int h, int[] bands, int[] offsets, int[] strides, int[] types, int[] sizes, int[] transfers, int[] dataTypes, int[] endiannesses, int[] signs)",False,,NULL
3,BandedSampleModel,25,"int getBand(int x, int y, int w, int h, int[] bands, int[] offsets, int[] strides, int[] types, int[] sizes, int[] transfers, int[] dataTypes, int[] endiannesses, int[] signs, int[] byteOrders)",False,,NULL
4,BufferedImage,1,"BufferedImage(int width, int height, int imageType)",False,,NULL
4,BufferedImage,2,int getWidth(),True,Returns the width of the BufferedImage.,"

getWidth
public int getWidth()
Returns the width of the BufferedImage.

Specified by:
getWidth in interface RenderedImage
Returns:
the width of this BufferedImage


"
4,BufferedImage,3,int getHeight(),True,Returns the height of the BufferedImage.,"

getHeight
public int getHeight()
Returns the height of the BufferedImage.

Specified by:
getHeight in interface RenderedImage
Returns:
the height of this BufferedImage


"
4,BufferedImage,4,int getType(),True,Returns the image type.,"

getType
public int getType()
Returns the image type.  If it is not one of the known types,
 TYPE_CUSTOM is returned.

Returns:
the image type of this BufferedImage.
See Also:
TYPE_INT_RGB, 
TYPE_INT_ARGB, 
TYPE_INT_ARGB_PRE, 
TYPE_INT_BGR, 
TYPE_3BYTE_BGR, 
TYPE_4BYTE_ABGR, 
TYPE_4BYTE_ABGR_PRE, 
TYPE_BYTE_GRAY, 
TYPE_BYTE_BINARY, 
TYPE_BYTE_INDEXED, 
TYPE_USHORT_GRAY, 
TYPE_USHORT_565_RGB, 
TYPE_USHORT_555_RGB, 
TYPE_CUSTOM


"
4,BufferedImage,5,Graphics getGraphics(),True,"This method returns a Graphics2D, but is here for backwards compatibility.","

getGraphics
public Graphics getGraphics()
This method returns a Graphics2D, but is here
 for backwards compatibility.  createGraphics is more
 convenient, since it is declared to return a
 Graphics2D.

Specified by:
getGraphics in class Image
Returns:
a Graphics2D, which can be used to draw into
          this image.
See Also:
Graphics, 
Component.createImage(int, int)


"
5,BufferedImageFilter,1,BufferedImageFilter(),False,,NULL
5,BufferedImageFilter,2,BufferedImageFilter(ImageFilter filter),False,,NULL
5,BufferedImageFilter,3,ImageFilter getFilter(),False,,NULL
5,BufferedImageFilter,4,void setFilter(ImageFilter filter),False,,NULL
5,BufferedImageFilter,5,"BufferedImage filter(BufferedImage src, BufferedImage dst)",False,,NULL
6,BufferStrategy,1,int getBufferCount(),False,,NULL
6,BufferStrategy,2,"void setSize(int width, int height)",False,,NULL
6,BufferStrategy,3,void setMaximumLag(int maximumLag),False,,NULL
6,BufferStrategy,4,void setMinimumLag(int minimumLag),False,,NULL
6,BufferStrategy,5,void setSurface(Surface surface),False,,NULL
6,BufferStrategy,6,void setDrawSurface(Surface surface),False,,NULL
6,BufferStrategy,7,void setDoubleBuffered(boolean doubleBuffered),False,,NULL
6,BufferStrategy,8,void setIgnoreRepaint(boolean ignoreRepaint),False,,NULL
6,BufferStrategy,9,void setRegionClipping(boolean regionClipping),False,,NULL
6,BufferStrategy,10,void setClip(Rectangle clip),False,,NULL
6,BufferStrategy,11,void setBackground(Color color),False,,NULL
6,BufferStrategy,12,void setClear(int clear),False,,NULL
6,BufferStrategy,13,void setClearOnBufferSwap(boolean clearOnBufferSwap),False,,NULL
6,BufferStrategy,14,void setSwapBehavior(int swapBehavior),False,,NULL
6,BufferStrategy,15,void setPageFlipping(boolean pageFlipping),False,,NULL
6,BufferStrategy,16,void setPageFlip(int pageFlip),False,,NULL
6,BufferStrategy,17,"void setPageFlip(int pageFlip, int pageFlipMask)",False,,NULL
6,BufferStrategy,18,"void setPageFlip(int pageFlip, int pageFlipMask, int pageFlipMask2)",False,,NULL
6,BufferStrategy,19,"void setPageFlip(int pageFlip, int pageFlipMask, int pageFlipMask2, int pageFlipMask3)",False,,NULL
6,BufferStrategy,20,"void setPageFlip(int pageFlip, int pageFlipMask, int pageFlipMask2, int pageFlipMask3, int pageFlipMask4)",False,,NULL
6,BufferStrategy,21,"void setPageFlip(int pageFlip, int pageFlipMask, int pageFlipMask2, int pageFlipMask3, int pageFlipMask4, int pageFlipMask5)",False,,NULL
6,BufferStrategy,22,"void setPageFlip(int pageFlip, int pageFlipMask, int pageFlipMask2, int pageFlipMask3, int pageFlipMask4, int pageFlipMask5, int pageFlipMask6)",False,,NULL
6,BufferStrategy,23,"void setPageFlip(int pageFlip, int pageFlipMask, int pageFlipMask2, int pageFlipMask3, int pageFlipMask4, int pageFlipMask5, int pageFlipMask6, int pageFlipMask7)",False,,NULL
6,BufferStrategy,24,"void setPageFlip(int pageFlip, int pageFlipMask, int pageFlipMask2, int pageFlipMask3, int pageFlipMask4, int pageFlipMask5, int pageFlipMask6, int pageFlipMask7, int pageFlipMask8)",False,,NULL
6,BufferStrategy,25,"void setPageFlip(int pageFlip, int pageFlipMask, int pageFlipMask2, int pageFlipMask3, int pageFlipMask4, int pageFlipMask5, int pageFlipMask6, int pageFlipMask7, int pageFlipMask8, int pageFlipMask9)",False,,NULL
6,BufferStrategy,26,"void setPageFlip(int pageFlip, int pageFlipMask, int pageFlipMask2, int pageFlipMask3, int pageFlipMask4, int pageFlipMask5, int pageFlipMask6, int pageFlipMask7, int pageFlipMask8, int pageFlipMask9, int pageFlipMask10)",False,,NULL
6,BufferStrategy,27,"void setPageFlip(int pageFlip, int pageFlipMask, int pageFlipMask2, int pageFlipMask3, int pageFlipMask4, int pageFlipMask5, int pageFlipMask6, int pageFlipMask7, int pageFlipMask8, int pageFlipMask9, int pageFlipMask10, int pageFlipMask11)",False,,NULL
6,BufferStrategy,28,"void setPageFlip(int pageFlip, int pageFlipMask, int pageFlipMask2, int pageFlipMask3, int pageFlipMask4, int pageFlipMask5, int pageFlipMask6, int pageFlipMask7, int pageFlipMask8, int pageFlipMask9, int pageFlipMask10, int pageFlipMask11, int pageFlipMask12)",False,,NULL
6,BufferStrategy,29,"void setPageFlip(int pageFlip, int pageFlipMask, int pageFlipMask2, int pageFlipMask3, int pageFlipMask4, int pageFlipMask5, int pageFlipMask6, int pageFlipMask7, int pageFlipMask8, int pageFlipMask9, int pageFlipMask10, int pageFlipMask11, int pageFlipMask12, int pageFlipMask13)",False,,NULL
6,BufferStrategy,30,"void setPageFlip(int pageFlip, int pageFlipMask, int pageFlipMask2, int pageFlipMask3, int pageFlipMask4, int pageFlipMask5, int pageFlipMask6, int pageFlipMask7, int pageFlipMask8, int pageFlipMask9, int pageFlipMask10, int pageFlipMask11, int pageFlipMask12, int pageFlipMask13, int pageFlipMask14)",False,,NULL
6,BufferStrategy,31,"void setPageFlip(int pageFlip, int pageFlipMask, int pageFlipMask2, int pageFlipMask3, int pageFlipMask4, int pageFlipMask5, int pageFlipMask6, int pageFlipMask7, int pageFlipMask8, int pageFlipMask9, int pageFlipMask10, int pageFlipMask11, int pageFlipMask12, int pageFlipMask13, int pageFlipMask14, int pageFlipMask15)",False,,NULL
7,ByteLookupTable,1,int[] getLUT(),False,,NULL
7,ByteLookupTable,2,int[] getLUT(int[] p),False,,NULL
7,ByteLookupTable,3,void setLUT(int[] p),False,,NULL
7,ByteLookupTable,4,"void setTableValue(int index, int value)",False,,NULL
7,ByteLookupTable,5,int getTableValue(int index),False,,NULL
8,ColorConvertOp,1,"BufferedImage filter(BufferedImage src, BufferedImage dst)",True,ColorConverts the source BufferedImage.,"

filter
public final BufferedImage filter(BufferedImage src,
                                  BufferedImage dest)
ColorConverts the source BufferedImage.
 If the destination image is null,
 a BufferedImage will be created with an appropriate ColorModel.

Specified by:
filter in interface BufferedImageOp
Parameters:
src - the source BufferedImage to be converted
dest - the destination BufferedImage,
        or null
Returns:
dest color converted from src
         or a new, converted BufferedImage
         if dest is null
Throws:
IllegalArgumentException - if dest is null and this op was
             constructed using the constructor which takes only a
             RenderingHints argument, since the operation is ill defined.


"
8,ColorConvertOp,2,RenderingHints getRenderingHints(),True,Returns the rendering hints used by this op.,"

getRenderingHints
public final RenderingHints getRenderingHints()
Returns the rendering hints used by this op.

Specified by:
getRenderingHints in interface BufferedImageOp
Specified by:
getRenderingHints in interface RasterOp
Returns:
the RenderingHints object of this
         ColorConvertOp


"
8,ColorConvertOp,3,void setRenderingHints(RenderingHints rh),False,,NULL
8,ColorConvertOp,4,ColorSpace getColorSpaceConversion(),False,,NULL
8,ColorConvertOp,5,void setColorSpaceConversion(ColorSpace cs),False,,NULL
9,ColorModel,1,int getAlpha(int pixel),True,"Returns the alpha component for the specified pixel, scaled from 0 to 255.","

getAlpha
public abstract int getAlpha(int pixel)
Returns the alpha component for the specified pixel, scaled
 from 0 to 255.  The pixel value is specified as an int.
 An IllegalArgumentException is thrown if pixel
 values for this ColorModel are not conveniently
 representable as a single int.

Parameters:
pixel - the specified pixel
Returns:
the value of alpha component of the specified pixel.


"
9,ColorModel,2,int getBlue(int pixel),True,"Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB.","

getBlue
public abstract int getBlue(int pixel)
Returns the blue color component for the specified pixel, scaled
 from 0 to 255 in the default RGB ColorSpace, sRGB.  A color conversion
 is done if necessary.  The pixel value is specified as an int.
 An IllegalArgumentException is thrown if pixel values
 for this ColorModel are not conveniently representable
 as a single int.  The returned value is a non pre-multiplied
 value, for example, if the alpha is premultiplied, this method
 divides it out before returning the value.  If the alpha value is
 0, the blue value is 0.

Parameters:
pixel - the specified pixel
Returns:
the value of the blue component of the specified pixel.


"
9,ColorModel,3,int getGreen(int pixel),True,"Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB.","

getGreen
public abstract int getGreen(int pixel)
Returns the green color component for the specified pixel, scaled
 from 0 to 255 in the default RGB ColorSpace, sRGB.  A color conversion
 is done if necessary.  The pixel value is specified as an int.
 An IllegalArgumentException is thrown if pixel
 values for this ColorModel are not conveniently
 representable as a single int.  The returned value is a non
 pre-multiplied value.  For example, if the alpha is premultiplied,
 this method divides it out before returning
 the value.  If the alpha value is 0, the green value is 0.

Parameters:
pixel - the specified pixel
Returns:
the value of the green component of the specified pixel.


"
9,ColorModel,4,int getRed(int pixel),True,"Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB.","

getRed
public abstract int getRed(int pixel)
Returns the red color component for the specified pixel, scaled
 from 0 to 255 in the default RGB ColorSpace, sRGB.  A color conversion
 is done if necessary.  The pixel value is specified as an int.
 An IllegalArgumentException is thrown if pixel
 values for this ColorModel are not conveniently
 representable as a single int.  The returned value is not a
 pre-multiplied value.  For example, if the
 alpha is premultiplied, this method divides it out before returning
 the value.  If the alpha value is 0, the red value is 0.

Parameters:
pixel - a specified pixel
Returns:
the value of the red component of the specified pixel.


"
9,ColorModel,5,int getTransparency(),True,Returns the transparency.,"

getTransparency
public int getTransparency()
Returns the transparency.  Returns either OPAQUE, BITMASK,
 or TRANSLUCENT.

Specified by:
getTransparency in interface Transparency
Returns:
the transparency of this ColorModel.
See Also:
Transparency.OPAQUE, 
Transparency.BITMASK, 
Transparency.TRANSLUCENT


"
10,ComponentColorModel,1,int getAlpha(int pixel),True,"Returns the alpha component for the specified pixel, scaled from 0 to 255.","

getAlpha
public int getAlpha(int pixel)
Returns the alpha component for the specified pixel, scaled
 from 0 to 255.   The pixel value is specified as an int.

Specified by:
getAlpha in class ColorModel
Parameters:
pixel - The pixel from which you want to get the alpha component.
Returns:
The alpha component for the specified pixel, as an int.
Throws:
IllegalArgumentException - If there is more than
 one component in this ColorModel.
IllegalArgumentException - If the component value for this
 ColorModel is signed


"
10,ComponentColorModel,2,int getBlue(int pixel),True,"Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB.","

getBlue
public int getBlue(int pixel)
Returns the blue color component for the specified pixel, scaled
 from 0 to 255 in the default RGB ColorSpace, sRGB.  A color conversion
 is done if necessary.  The pixel value is specified as an int.
 The returned value will be a non
 pre-multiplied value. If the alpha is premultiplied, this method
 divides it out before returning the value (if the alpha value is 0,
 the blue value will be 0).

Specified by:
getBlue in class ColorModel
Parameters:
pixel - The pixel from which you want to get the blue color component.
Returns:
The blue color component for the specified pixel, as an int.
Throws:
IllegalArgumentException - If there is more than
 one component in this ColorModel.
IllegalArgumentException - If the component value for this
 ColorModel is signed


"
10,ComponentColorModel,3,int getGreen(int pixel),True,"Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB.","

getGreen
public int getGreen(int pixel)
Returns the green color component for the specified pixel, scaled
 from 0 to 255 in the default RGB ColorSpace, sRGB.  A color conversion
 is done if necessary.  The pixel value is specified as an int.
 The returned value will be a non
 pre-multiplied value. If the alpha is premultiplied, this method
 divides it out before returning the value (if the alpha value is 0,
 the green value will be 0).

Specified by:
getGreen in class ColorModel
Parameters:
pixel - The pixel from which you want to get the green color component.
Returns:
The green color component for the specified pixel, as an int.
Throws:
IllegalArgumentException - If there is more than
 one component in this ColorModel.
IllegalArgumentException - If the component value for this
 ColorModel is signed


"
10,ComponentColorModel,4,int getRed(int pixel),True,"Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB.","

getRed
public int getRed(int pixel)
Returns the red color component for the specified pixel, scaled
 from 0 to 255 in the default RGB ColorSpace, sRGB.  A color conversion
 is done if necessary.  The pixel value is specified as an int.
 The returned value will be a non pre-multiplied value.
 If the alpha is premultiplied, this method divides
 it out before returning the value (if the alpha value is 0,
 the red value will be 0).

Specified by:
getRed in class ColorModel
Parameters:
pixel - The pixel from which you want to get the red color component.
Returns:
The red color component for the specified pixel, as an int.
Throws:
IllegalArgumentException - If there is more than
 one component in this ColorModel.
IllegalArgumentException - If the component value for this
 ColorModel is signed


"
10,ComponentColorModel,5,int getTransparency(),False,,NULL
11,ComponentSampleModel,1,int getSampleSize(int band),True,Returns the number of bits per sample for the specified band.,"

getSampleSize
public final int getSampleSize(int band)
Returns the number of bits per sample for the specified band.

Specified by:
getSampleSize in class SampleModel
Parameters:
band - the specified band
Returns:
the number of bits per sample for the specified band.


"
11,ComponentSampleModel,2,int getSampleModelDimensionCount(),False,,NULL
11,ComponentSampleModel,3,int getSampleSize(int band),True,Returns the number of bits per sample for the specified band.,"

getSampleSize
public final int getSampleSize(int band)
Returns the number of bits per sample for the specified band.

Specified by:
getSampleSize in class SampleModel
Parameters:
band - the specified band
Returns:
the number of bits per sample for the specified band.


"
11,ComponentSampleModel,4,int getSampleSize(int band),True,Returns the number of bits per sample for the specified band.,"

getSampleSize
public final int getSampleSize(int band)
Returns the number of bits per sample for the specified band.

Specified by:
getSampleSize in class SampleModel
Parameters:
band - the specified band
Returns:
the number of bits per sample for the specified band.


"
11,ComponentSampleModel,5,int getSampleSize(int band),True,Returns the number of bits per sample for the specified band.,"

getSampleSize
public final int getSampleSize(int band)
Returns the number of bits per sample for the specified band.

Specified by:
getSampleSize in class SampleModel
Parameters:
band - the specified band
Returns:
the number of bits per sample for the specified band.


"
12,ConvolveOp,1,"BufferedImage filter(BufferedImage src, BufferedImage dst)",True,Performs a convolution on BufferedImages.,"

filter
public final BufferedImage filter(BufferedImage src,
                                  BufferedImage dst)
Performs a convolution on BufferedImages.  Each component of the
 source image will be convolved (including the alpha component, if
 present).
 If the color model in the source image is not the same as that
 in the destination image, the pixels will be converted
 in the destination.  If the destination image is null,
 a BufferedImage will be created with the source ColorModel.
 The IllegalArgumentException may be thrown if the source is the
 same as the destination.

Specified by:
filter in interface BufferedImageOp
Parameters:
src - the source BufferedImage to filter
dst - the destination BufferedImage for the
        filtered src
Returns:
the filtered BufferedImage
Throws:
NullPointerException - if src is null
IllegalArgumentException - if src equals
         dst
ImagingOpException - if src cannot be filtered


"
12,ConvolveOp,2,"BufferedImage filter(BufferedImage src, RenderingHints hints)",False,,NULL
12,ConvolveOp,3,"BufferedImage filter(BufferedImage src, BufferedImage dst, RenderingHints hints)",False,,NULL
12,ConvolveOp,4,"BufferedImage filter(BufferedImage src, RenderingHints hints, ImageObserver observer)",False,,NULL
12,ConvolveOp,5,"BufferedImage filter(BufferedImage src, BufferedImage dst, RenderingHints hints, ImageObserver observer)",False,,NULL
13,CropImageFilter,1,int getHeight(),False,,NULL
13,CropImageFilter,2,int getWidth(),False,,NULL
13,CropImageFilter,3,int getX(),False,,NULL
13,CropImageFilter,4,int getY(),False,,NULL
13,CropImageFilter,5,"void setCropSize(int width, int height)",False,,NULL
14,DataBuffer,1,"int getElem(int bank, int b, int g, int r)",False,,NULL
14,DataBuffer,2,"void setElem(int bank, int b, int g, int r, int val)",False,,NULL
14,DataBuffer,3,int getNumBanks(),True,Returns the number of banks in this DataBuffer.,"

getNumBanks
public int getNumBanks()
Returns the number of banks in this DataBuffer.

Returns:
the number of banks.


"
14,DataBuffer,4,int getSize(),True,Returns the size (in array elements) of all banks.,"

getSize
public int getSize()
Returns the size (in array elements) of all banks.

Returns:
the size of all banks.


"
14,DataBuffer,5,int getDataType(),True,Returns the data type of this DataBuffer.,"

getDataType
public int getDataType()
Returns the data type of this DataBuffer.

Returns:
the data type of this DataBuffer.


"
15,DataBufferByte,1,"getElem(int bank, int i)",False,,NULL
15,DataBufferByte,2,"setElem(int bank, int i, int val)",False,,NULL
15,DataBufferByte,3,getNumBanks(),False,,NULL
15,DataBufferByte,4,getSize(),False,,NULL
15,DataBufferByte,5,getData(),False,,NULL
16,DataBufferDouble,1,getData(),False,,NULL
16,DataBufferDouble,2,getElem(int i),False,,NULL
16,DataBufferDouble,3,"setElem(int i, double val)",False,,NULL
16,DataBufferDouble,4,getNumBanks(),False,,NULL
16,DataBufferDouble,5,getNumDataElements(),False,,NULL
16,DataBufferDouble,6,getSize(),False,,NULL
16,DataBufferDouble,7,setData(double[] data),False,,NULL
16,DataBufferDouble,8,"setElem(int bank, int i, double val)",False,,NULL
16,DataBufferDouble,9,getNumBanks(),False,,NULL
16,DataBufferDouble,10,getNumDataElements(),False,,NULL
16,DataBufferDouble,11,getSize(),False,,NULL
16,DataBufferDouble,12,setData(double[] data),False,,NULL
16,DataBufferDouble,13,"setElem(int bank, int i, double val)",False,,NULL
16,DataBufferDouble,14,getNumBanks(),False,,NULL
16,DataBufferDouble,15,getNumDataElements(),False,,NULL
16,DataBufferDouble,16,getSize(),False,,NULL
16,DataBufferDouble,17,setData(double[] data),False,,NULL
16,DataBufferDouble,18,"setElem(int bank, int i, double val)",False,,NULL
16,DataBufferDouble,19,getNumBanks(),False,,NULL
16,DataBufferDouble,20,getNumDataElements(),False,,NULL
16,DataBufferDouble,21,getSize(),False,,NULL
16,DataBufferDouble,22,setData(double[] data),False,,NULL
16,DataBufferDouble,23,"setElem(int bank, int i, double val)",False,,NULL
16,DataBufferDouble,24,getNumBanks(),False,,NULL
16,DataBufferDouble,25,getNumDataElements(),False,,NULL
16,DataBufferDouble,26,getSize(),False,,NULL
16,DataBufferDouble,27,setData(double[] data),False,,NULL
16,DataBufferDouble,28,"setElem(int bank, int i, double val)",False,,NULL
16,DataBufferDouble,29,getNumBanks(),False,,NULL
16,DataBufferDouble,30,getNumDataElements(),False,,NULL
16,DataBufferDouble,31,getSize(),False,,NULL
16,DataBufferDouble,32,setData(double[] data),False,,NULL
16,DataBufferDouble,33,"setElem(int bank, int i, double val)",False,,NULL
16,DataBufferDouble,34,getNumBanks(),False,,NULL
16,DataBufferDouble,35,getNumDataElements(),False,,NULL
16,DataBufferDouble,36,getSize(),False,,NULL
16,DataBufferDouble,37,setData(double[] data),False,,NULL
16,DataBufferDouble,38,"setElem(int bank, int i, double val)",False,,NULL
16,DataBufferDouble,39,getNumBanks(),False,,NULL
16,DataBufferDouble,40,getNumDataElements(),False,,NULL
16,DataBufferDouble,41,getSize(),False,,NULL
16,DataBufferDouble,42,setData(double[] data),False,,NULL
16,DataBufferDouble,43,"setElem(int bank, int i, double val)",False,,NULL
16,DataBufferDouble,44,getNumBanks(),False,,NULL
16,DataBufferDouble,45,getNumDataElements(),False,,NULL
16,DataBufferDouble,46,getSize(),False,,NULL
16,DataBufferDouble,47,setData(double[] data),False,,NULL
16,DataBufferDouble,48,"setElem(int bank, int i, double val)",False,,NULL
16,DataBufferDouble,49,getNumBanks(),False,,NULL
16,DataBufferDouble,50,getNumDataElements(),False,,NULL
16,DataBufferDouble,51,getSize(),False,,NULL
16,DataBufferDouble,52,setData(double[] data),False,,NULL
16,DataBufferDouble,53,"setElem(int bank, int i, double val)",False,,NULL
16,DataBufferDouble,54,getNumBanks(),False,,NULL
16,DataBufferDouble,55,getNumDataElements(),False,,NULL
16,DataBufferDouble,56,getSize(),False,,NULL
16,DataBufferDouble,57,setData(double[] data),False,,NULL
16,DataBufferDouble,58,"setElem(int bank, int i, double val)",False,,NULL
16,DataBufferDouble,59,getNumBanks(),False,,NULL
16,DataBufferDouble,60,getNumDataElements(),False,,NULL
16,DataBufferDouble,61,getSize(),False,,NULL
16,DataBufferDouble,62,setData(double[] data),False,,NULL
16,DataBufferDouble,63,"setElem(int bank, int i, double val)",False,,NULL
16,DataBufferDouble,64,getNumBanks(),False,,NULL
16,DataBufferDouble,65,getNumDataElements(),False,,NULL
16,DataBufferDouble,66,getSize(),False,,NULL
16,DataBufferDouble,67,setData(double[] data),False,,NULL
16,DataBufferDouble,68,"setElem(int bank, int i, double val)",False,,NULL
16,DataBufferDouble,69,getNumBanks(),False,,NULL
16,DataBufferDouble,70,getNumDataElements(),False,,NULL
16,DataBufferDouble,71,getSize(),False,,NULL
16,DataBufferDouble,72,setData(double[] data),False,,NULL
16,DataBufferDouble,73,"setElem(int bank, int i, double val)",False,,NULL
16,DataBufferDouble,74,getNumBanks(),False,,NULL
17,DataBufferFloat,1,"getElem(int band, int pixel)",False,,NULL
17,DataBufferFloat,2,"setElem(int band, int pixel, float val)",False,,NULL
17,DataBufferFloat,3,getNumBands(),False,,NULL
17,DataBufferFloat,4,getSize(),False,,NULL
17,DataBufferFloat,5,getData(),False,,NULL
18,DataBufferInt,1,"int getElem(int bank, int i)",True,Returns the requested data array element from the specified bank.,"

getElem
public int getElem(int bank,
                   int i)
Returns the requested data array element from the specified bank.

Specified by:
getElem in class DataBuffer
Parameters:
bank - The bank from which you want to get a data array element.
i - The data array element you want to get.
Returns:
The requested data array element as an integer.
See Also:
setElem(int, int), 
setElem(int, int, int)


"
18,DataBufferInt,2,"void setElem(int bank, int i, int val)",True,Sets the requested data array element in the specified bank to the integer value i.,"

setElem
public void setElem(int bank,
                    int i,
                    int val)
Sets the requested data array element in the specified bank
 to the integer value i.

Specified by:
setElem in class DataBuffer
Parameters:
bank - The bank in which you want to set the data array element.
i - The data array element you want to set.
val - The integer value to which you want to set the specified data array element.
See Also:
getElem(int), 
getElem(int, int)


"
18,DataBufferInt,3,int getNumBanks(),False,,NULL
18,DataBufferInt,4,int getSize(),False,,NULL
18,DataBufferInt,5,int getElem(int i),True,Returns the requested data array element from the first (default) bank.,"

getElem
public int getElem(int i)
Returns the requested data array element from the first (default) bank.

Overrides:
getElem in class DataBuffer
Parameters:
i - The data array element you want to get.
Returns:
The requested data array element as an integer.
See Also:
setElem(int, int), 
setElem(int, int, int)


"
19,DataBufferShort,1,"getElem(int bank, int i)",False,,NULL
19,DataBufferShort,2,"setElem(int bank, int i, short val)",False,,NULL
19,DataBufferShort,3,getNumBanks(),False,,NULL
19,DataBufferShort,4,getSize(),False,,NULL
19,DataBufferShort,5,getData(),False,,NULL
20,DataBufferUShort,1,"getElem(int bank, int i)",False,,NULL
20,DataBufferUShort,2,"setElem(int bank, int i, int val)",False,,NULL
20,DataBufferUShort,3,getNumBanks(),False,,NULL
20,DataBufferUShort,4,getSize(),False,,NULL
20,DataBufferUShort,5,getData(),False,,NULL
21,DirectColorModel,1,int getAlphaMask(),True,Returns the mask indicating which bits in an int pixel representation contain the alpha component.,"

getAlphaMask
public final int getAlphaMask()
Returns the mask indicating which bits in an int pixel
 representation contain the alpha component.

Returns:
the mask, which indicates which bits of the int
         pixel representation contain the alpha sample.


"
21,DirectColorModel,2,int getAlphaShift(),False,,NULL
21,DirectColorModel,3,int getBlueMask(),True,Returns the mask indicating which bits in an int pixel representation contain the blue color component.,"

getBlueMask
public final int getBlueMask()
Returns the mask indicating which bits in an int pixel
 representation contain the blue color component.

Returns:
the mask, which indicates which bits of the int
         pixel representation contain the blue color sample.


"
21,DirectColorModel,4,int getBlueShift(),False,,NULL
21,DirectColorModel,5,int getGreenMask(),True,Returns the mask indicating which bits in an int pixel representation contain the green color component.,"

getGreenMask
public final int getGreenMask()
Returns the mask indicating which bits in an int pixel
 representation contain the green color component.

Returns:
the mask, which indicates which bits of the int
         pixel representation contain the green color sample.


"
21,DirectColorModel,6,int getGreenShift(),False,,NULL
21,DirectColorModel,7,int getPixelSize(),False,,NULL
21,DirectColorModel,8,int getRedMask(),True,Returns the mask indicating which bits in an int pixel representation contain the red color component.,"

getRedMask
public final int getRedMask()
Returns the mask indicating which bits in an int pixel
 representation contain the red color component.

Returns:
the mask, which indicates which bits of the int
         pixel representation contain the red color sample.


"
21,DirectColorModel,9,int getRedShift(),False,,NULL
21,DirectColorModel,10,int getTransparency(),False,,NULL
21,DirectColorModel,11,int getTransparency(Raster raster),False,,NULL
21,DirectColorModel,12,int getTransparency(int pixel),False,,NULL
21,DirectColorModel,13,"int getTransparency(int pixel, Raster raster)",False,,NULL
21,DirectColorModel,14,"int getTransparency(int pixel, int x, int y, Raster raster)",False,,NULL
21,DirectColorModel,15,"int getTransparency(int pixel, int x, int y, int w, int h, Raster raster)",False,,NULL
21,DirectColorModel,16,"int getTransparency(int pixel, int x, int y, int w, int h, int[] pixels, int off, int scansize)",False,,NULL
21,DirectColorModel,17,"int getTransparency(int pixel, int x, int y, int w, int h, int[] pixels, int off, int scansize, Raster raster)",False,,NULL
21,DirectColorModel,18,"int getTransparency(int pixel, int x, int y, int w, int h, int[] pixels, int off, int scansize, WritableRaster raster)",False,,NULL
21,DirectColorModel,19,"int getTransparency(int pixel, int x, int y, int w, int h, int[] pixels, int off, int scansize, WritableRaster raster, RasterOp rasterOp)",False,,NULL
21,DirectColorModel,20,"int getTransparency(int pixel, int x, int y, int w, int h, int[] pixels, int off, int scansize, WritableRaster raster, RasterOp rasterOp, RenderingHints hints)",False,,NULL
22,FilteredImageSource,1,BufferedImageFilter getFilter(),False,,NULL
22,FilteredImageSource,2,RenderingHints getRenderingHints(),False,,NULL
22,FilteredImageSource,3,Image getSource(),False,,NULL
22,FilteredImageSource,4,Object getProperty(String name),False,,NULL
22,FilteredImageSource,5,boolean isPropertySupported(String name),False,,NULL
23,ImageFilter,1,abstract boolean isRGB(),False,,NULL
23,ImageFilter,2,"abstract int filterRGB(int x, int y, int rgb)",False,,NULL
23,ImageFilter,3,abstract ImageFilter getTransparencyFilter(boolean alpha),False,,NULL
23,ImageFilter,4,"abstract ImageFilter getTransparencyFilter(boolean alpha, int alphaMask)",False,,NULL
23,ImageFilter,5,"abstract ImageFilter getTransparencyFilter(boolean alpha, int alphaMask, int alphaMask2)",False,,NULL
24,IndexColorModel,1,int getPixelSize(),False,,NULL
24,IndexColorModel,2,int getMapSize(),True,Returns the size of the color/alpha component arrays in this IndexColorModel.,"

getMapSize
public final int getMapSize()
Returns the size of the color/alpha component arrays in this
 IndexColorModel.

Returns:
the size of the color and alpha component arrays.


"
24,IndexColorModel,3,int getRed(int pixel),True,"Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB.","

getRed
public final int getRed(int pixel)
Returns the red color component for the specified pixel, scaled
 from 0 to 255 in the default RGB ColorSpace, sRGB.  The pixel value
 is specified as an int.
 Only the lower n bits of the pixel value, as specified in the
 class description above, are used to
 calculate the returned value.
 The returned value is a non pre-multiplied value.

Specified by:
getRed in class ColorModel
Parameters:
pixel - the specified pixel
Returns:
the value of the red color component for the specified pixel


"
24,IndexColorModel,4,int getGreen(int pixel),True,"Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB.","

getGreen
public final int getGreen(int pixel)
Returns the green color component for the specified pixel, scaled
 from 0 to 255 in the default RGB ColorSpace, sRGB.  The pixel value
 is specified as an int.
 Only the lower n bits of the pixel value, as specified in the
 class description above, are used to
 calculate the returned value.
 The returned value is a non pre-multiplied value.

Specified by:
getGreen in class ColorModel
Parameters:
pixel - the specified pixel
Returns:
the value of the green color component for the specified pixel


"
24,IndexColorModel,5,int getBlue(int pixel),True,"Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB.","

getBlue
public final int getBlue(int pixel)
Returns the blue color component for the specified pixel, scaled
 from 0 to 255 in the default RGB ColorSpace, sRGB.  The pixel value
 is specified as an int.
 Only the lower n bits of the pixel value, as specified in the
 class description above, are used to
 calculate the returned value.
 The returned value is a non pre-multiplied value.

Specified by:
getBlue in class ColorModel
Parameters:
pixel - the specified pixel
Returns:
the value of the blue color component for the specified pixel


"
24,IndexColorModel,6,int getAlpha(int pixel),True,"Returns the alpha component for the specified pixel, scaled from 0 to 255.","

getAlpha
public final int getAlpha(int pixel)
Returns the alpha component for the specified pixel, scaled
 from 0 to 255.  The pixel value is specified as an int.
 Only the lower n bits of the pixel value, as specified in the
 class description above, are used to
 calculate the returned value.

Specified by:
getAlpha in class ColorModel
Parameters:
pixel - the specified pixel
Returns:
the value of the alpha component for the specified pixel


"
24,IndexColorModel,7,int getRGB(int pixel),True,Returns the color/alpha components of the pixel in the default RGB color model format.,"

getRGB
public final int getRGB(int pixel)
Returns the color/alpha components of the pixel in the default
 RGB color model format.  The pixel value is specified as an int.
 Only the lower n bits of the pixel value, as specified in the
 class description above, are used to
 calculate the returned value.
 The returned value is in a non pre-multiplied format.

Overrides:
getRGB in class ColorModel
Parameters:
pixel - the specified pixel
Returns:
the color and alpha components of the specified pixel
See Also:
ColorModel.getRGBdefault()


"
24,IndexColorModel,8,int getAlphaRGB(int pixel),False,,NULL
24,IndexColorModel,9,"int getPixel(int index, int[] pixels)",False,,NULL
24,IndexColorModel,10,"int getPixel(int x, int y, int[] pixels)",False,,NULL
24,IndexColorModel,11,"int getPixel(int x, int y, int w, int[] pixels, int offset, int scansize)",False,,NULL
24,IndexColorModel,12,"int getPixel(int x, int y, int w, int h, int[] pixels, int offset, int scansize)",False,,NULL
24,IndexColorModel,13,"int getPixel(int x, int y, int w, int h, int[] pixels, int offset, int scansize, int[] scanline, int scanlineOffset)",False,,NULL
24,IndexColorModel,14,"int getPixel(int x, int y, int w, int h, int[] pixels, int offset, int scansize, int[] scanline, int scanlineOffset, int[] work)",False,,NULL
24,IndexColorModel,15,"int getPixel(int x, int y, int w, int h, int[] pixels, int offset, int scansize, int[] scanline, int scanlineOffset, int[] work, int[] workOffset)",False,,NULL
24,IndexColorModel,16,"int getPixel(int x, int y, int w, int h, int[] pixels, int offset, int scansize, int[] scanline, int scanlineOffset, int[] work, int[] workOffset, int[] workScanline)",False,,NULL
24,IndexColorModel,17,"int getPixel(int x, int y, int w, int h, int[] pixels, int offset, int scansize, int[] scanline, int scanlineOffset, int[] work, int[] workOffset, int[] workScanline, int[] workPixels)",False,,NULL
24,IndexColorModel,18,"int getPixel(int x, int y, int w, int h, int[] pixels, int offset, int scansize, int[] scanline, int scanlineOffset, int[] work, int[] workOffset, int[] workScanline, int[] workPixels, int[] workPixelsOffset)",False,,NULL
24,IndexColorModel,19,"int getPixel(int x, int y, int w, int h, int[] pixels, int offset, int scansize, int[] scanline, int scanlineOffset, int[] work, int[] workOffset, int[] workScanline, int[] workPixels, int[] workPixelsOffset, int[] workPixelsScanline)",False,,NULL
24,IndexColorModel,20,"int getPixel(int x, int y, int w, int h, int[] pixels, int offset, int scansize, int[] scanline, int scanlineOffset, int[] work, int[] workOffset, int[] workScanline, int[] workPixels, int[] workPixelsOffset, int[] workPixelsScanline, int[] workPixelsPixels)",False,,NULL
25,Kernel,1,"Kernel(int width, int height, float[] kernelElements)",False,,NULL
25,Kernel,2,int getHeight(),True,Returns the height of this Kernel.,"

getHeight
public final int getHeight()
Returns the height of this Kernel.

Returns:
the height of this Kernel.


"
25,Kernel,3,float[] getKernelElements(),False,,NULL
25,Kernel,4,int getWidth(),True,Returns the width of this Kernel.,"

getWidth
public final int getWidth()
Returns the width of this Kernel.

Returns:
the width of this Kernel.


"
25,Kernel,5,void setKernelElements(float[] kernelElements),False,,NULL
26,LookupOp,1,"int[] lookupPixel(int srcPixel, int srcIndex)",False,,NULL
26,LookupOp,2,"int[] lookupPixels(int[] srcPixels, int srcIndex, int[] dstPixels, int dstIndex, int length)",False,,NULL
26,LookupOp,3,int[] lookupTable(int[] table),False,,NULL
26,LookupOp,4,int[] getLookupTable(),False,,NULL
26,LookupOp,5,"void setPixelIncrement(int dx, int dy)",False,,NULL
27,LookupTable,1,int[] getLUT(),False,,NULL
27,LookupTable,2,"void setTableValue(int index, int value)",False,,NULL
27,LookupTable,3,"void setTableValues(int startIndex, int[] values)",False,,NULL
27,LookupTable,4,void setTable(int[] table),False,,NULL
27,LookupTable,5,void invertLUT(),False,,NULL
28,MemoryImageSource,1,"MemoryImageSource(int width, int height, int[] pixels, int offset, int scansize)",False,,NULL
28,MemoryImageSource,2,int getWidth(),False,,NULL
28,MemoryImageSource,3,int getHeight(),False,,NULL
28,MemoryImageSource,4,"int getPixel(int x, int y)",False,,NULL
28,MemoryImageSource,5,"int getPixel(int i, int[] pixels, int offset)",False,,NULL
29,MultiPixelPackedSampleModel,1,int getPixelStride(),False,,NULL
29,MultiPixelPackedSampleModel,2,int getScanlineStride(),True,Returns the scanline stride.,"

getScanlineStride
public int getScanlineStride()
Returns the scanline stride.

Returns:
the scanline stride of this
 MultiPixelPackedSampleModel.


"
29,MultiPixelPackedSampleModel,3,int getWidth(),False,,NULL
29,MultiPixelPackedSampleModel,4,int getHeight(),False,,NULL
29,MultiPixelPackedSampleModel,5,int getTransparency(),False,,NULL
29,MultiPixelPackedSampleModel,6,int getNumDataElements(),True,"Returns the number of data elements needed to transfer one pixel via the getDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer) and setDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer) methods.","

getNumDataElements
public int getNumDataElements()
Returns the number of data elements needed to transfer one pixel
 via the getDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer) and setDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer)
 methods.  For a MultiPixelPackedSampleModel, this is
 one.

Specified by:
getNumDataElements in class SampleModel
Returns:
the number of data elements.
See Also:
SampleModel.getDataElements(int, int, Object, DataBuffer), 
SampleModel.getDataElements(int, int, int, int, Object, DataBuffer), 
SampleModel.setDataElements(int, int, Object, DataBuffer), 
SampleModel.setDataElements(int, int, int, int, Object, DataBuffer), 
SampleModel.getTransferType()


"
29,MultiPixelPackedSampleModel,7,"int getDataElement(int x, int y, int[] data)",False,,NULL
29,MultiPixelPackedSampleModel,8,"void setDataElement(int x, int y, int[] data)",False,,NULL
29,MultiPixelPackedSampleModel,9,"void setPixel(int x, int y, int rgb)",False,,NULL
29,MultiPixelPackedSampleModel,10,"int getPixel(int x, int y)",False,,NULL
30,PackedColorModel,1,int getAlphaMask(),False,,NULL
30,PackedColorModel,2,int getAlphaShift(),False,,NULL
30,PackedColorModel,3,int getBlueMask(),False,,NULL
30,PackedColorModel,4,int getBlueShift(),False,,NULL
30,PackedColorModel,5,int getGreenMask(),False,,NULL
30,PackedColorModel,6,int getGreenShift(),False,,NULL
30,PackedColorModel,7,int getRedMask(),False,,NULL
30,PackedColorModel,8,int getRedShift(),False,,NULL
30,PackedColorModel,9,int getTransparency(),False,,NULL
30,PackedColorModel,10,int getPixelSize(),False,,NULL
30,PackedColorModel,11,int getNumComponents(),False,,NULL
30,PackedColorModel,12,int getComponentSize(int component),False,,NULL
30,PackedColorModel,13,int getComponentMask(int component),False,,NULL
30,PackedColorModel,14,int getComponentShift(int component),False,,NULL
30,PackedColorModel,15,int getColorSize(),False,,NULL
30,PackedColorModel,16,int getAlpha(),False,,NULL
30,PackedColorModel,17,int getBlue(),False,,NULL
30,PackedColorModel,18,int getGreen(),False,,NULL
30,PackedColorModel,19,int getRed(),False,,NULL
30,PackedColorModel,20,int getRGB(int color),False,,NULL
30,PackedColorModel,21,int getRGB(int[] color),False,,NULL
30,PackedColorModel,22,"int getRGB(int[] color, int offset)",False,,NULL
30,PackedColorModel,23,"int getRGB(int[] color, int offset, int[] dst)",False,,NULL
30,PackedColorModel,24,"int getRGB(int[] color, int offset, int[] dst, int dstOffset)",False,,NULL
30,PackedColorModel,25,"int getRGB(int[] color, int offset, int[] dst, int dstOffset, int length)",False,,NULL
30,PackedColorModel,26,"int getRGB(int[] color, int offset, int[] dst, int dstOffset, int length, int[] work)",False,,NULL
30,PackedColorModel,27,"int getRGB(int[] color, int offset, int[] dst, int dstOffset, int length, int[] work, int workOffset)",False,,NULL
30,PackedColorModel,28,"int getRGB(int[] color, int offset, int[] dst, int dstOffset, int length, int[] work, int workOffset, int[] alpha)",False,,NULL
30,PackedColorModel,29,"int getRGB(int[] color, int offset, int[] dst, int dstOffset, int length, int[] work, int workOffset, int[] alpha, int alphaOffset)",False,,NULL
30,PackedColorModel,30,"int getRGB(int[] color, int offset, int[] dst, int dstOffset, int length, int[] work, int workOffset, int[] alpha, int alphaOffset, int[] alphaWork)",False,,NULL
30,PackedColorModel,31,"int getRGB(int[] color, int offset, int[] dst, int dstOffset, int length, int[] work, int workOffset, int[] alpha, int alphaOffset, int[] alphaWork, int alphaWorkOffset)",False,,NULL
30,PackedColorModel,32,"int getRGB(int[] color, int offset, int[] dst, int dstOffset, int length, int[] work, int workOffset, int[] alpha, int alphaOffset, int[] alphaWork, int alphaWorkOffset, int[] alphaAlpha)",False,,NULL
30,PackedColorModel,33,"int getRGB(int[] color, int offset, int[] dst, int dstOffset, int length, int[] work, int workOffset, int[] alpha, int alphaOffset, int[] alphaWork, int alphaWorkOffset, int[] alphaAlpha, int alphaAlphaOffset)",False,,NULL
30,PackedColorModel,34,"int getRGB(int[] color, int offset, int[] dst, int dstOffset, int length, int[] work, int workOffset, int[] alpha, int alphaOffset, int[] alphaWork, int alphaWorkOffset, int[] alphaAlpha, int alphaAlphaOffset, int[] alphaAlphaWork)",False,,NULL
30,PackedColorModel,35,"int getRGB(int[] color, int offset, int[] dst, int dstOffset, int length, int[] work, int workOffset, int[] alpha, int alphaOffset, int[] alphaWork, int alphaWorkOffset, int[] alphaAlpha, int alphaAlphaOffset, int[] alphaAlphaWork, int alphaAlphaWorkOffset)",False,,NULL
30,PackedColorModel,36,"int getRGB(int[] color, int offset, int[] dst, int dstOffset, int length, int[] work, int workOffset, int[] alpha, int alphaOffset, int[] alphaWork, int alphaWorkOffset, int[] alphaAlpha, int alphaAlphaOffset, int[] alphaAlphaWork, int alphaAlphaWorkOffset, int[] alphaAlphaAlpha)",False,,NULL
30,PackedColorModel,37,"int getRGB(int[] color, int offset, int[] dst, int dstOffset, int length, int[] work, int workOffset, int[] alpha, int alphaOffset, int[] alphaWork, int alphaWorkOffset, int[] alphaAlpha, int alphaAlphaOffset, int[] alphaAlphaWork, int alphaAlphaWorkOffset, int[] alphaAlphaAlpha, int alphaAlphaAlphaOffset)",False,,NULL
30,PackedColorModel,38,"int getRGB(int[] color, int offset, int[] dst, int dstOffset, int length, int[] work, int workOffset, int[] alpha, int alphaOffset, int[] alphaWork, int alphaWorkOffset, int[] alphaAlpha, int alphaAlphaOffset, int[] alphaAlphaWork, int alphaAlphaWorkOffset, int[] alphaAlphaAlpha, int alphaAlphaAlphaOffset, int[] alphaAlphaAlphaWork)",False,,NULL
30,PackedColorModel,39,"int getRGB(int[] color, int offset, int[] dst, int dstOffset, int length, int[] work, int workOffset, int[] alpha, int alphaOffset, int[] alphaWork, int alphaWorkOffset, int[] alphaAlpha, int alphaAlphaOffset, int[] alphaAlphaWork, int alphaAlphaWorkOffset, int[] alphaAlphaAlpha, int alphaAlphaAlphaOffset, int[] alphaAlphaAlphaWork, int alphaAlphaAlphaWorkOffset)",False,,NULL
31,PixelGrabber,1,"int getPixel(int x, int y)",False,,NULL
31,PixelGrabber,2,"int getPixel(int x, int y, int[] pixel)",False,,NULL
31,PixelGrabber,3,"int getPixels(int x, int y, int w, int h, int[] pixels)",False,,NULL
31,PixelGrabber,4,"int getPixels(int x, int y, int w, int h, int[] pixels, int off)",False,,NULL
31,PixelGrabber,5,"int getPixels(int x, int y, int w, int h, int[] pixels, int off, int scansize)",False,,NULL
32,PixelInterleavedSampleModel,1,int getPixelStride(),False,,NULL
32,PixelInterleavedSampleModel,2,int getWidth(),False,,NULL
32,PixelInterleavedSampleModel,3,int getHeight(),False,,NULL
32,PixelInterleavedSampleModel,4,int getMinTileDim(),False,,NULL
32,PixelInterleavedSampleModel,5,int getScanlineStride(),False,,NULL
32,PixelInterleavedSampleModel,6,int getTransferType(),False,,NULL
32,PixelInterleavedSampleModel,7,int getNumDataElements(),False,,NULL
32,PixelInterleavedSampleModel,8,int getNumBands(),False,,NULL
32,PixelInterleavedSampleModel,9,int getBandOffset(int band),False,,NULL
32,PixelInterleavedSampleModel,10,int getBandOffsets(int[] offsets),False,,NULL
32,PixelInterleavedSampleModel,11,int getBandIndices(int[] indices),False,,NULL
32,PixelInterleavedSampleModel,12,int getBandIndex(int band),False,,NULL
32,PixelInterleavedSampleModel,13,int getSampleSize(int band),False,,NULL
32,PixelInterleavedSampleModel,14,int getSampleSize(int[] sizes),False,,NULL
32,PixelInterleavedSampleModel,15,"int getSampleSize(int[] sizes, int start, int length)",False,,NULL
32,PixelInterleavedSampleModel,16,"int getSampleSize(int[] sizes, int start, int length, int[] offsets)",False,,NULL
32,PixelInterleavedSampleModel,17,"int getSampleSize(int[] sizes, int start, int length, int[] offsets, int[] indices)",False,,NULL
32,PixelInterleavedSampleModel,18,"int getSampleSize(int[] sizes, int start, int length, int[] offsets, int[] indices, int[] samples)",False,,NULL
32,PixelInterleavedSampleModel,19,"int getSampleSize(int[] sizes, int start, int length, int[] offsets, int[] indices, int[] samples, int[] bands)",False,,NULL
32,PixelInterleavedSampleModel,20,"int getSampleSize(int[] sizes, int start, int length, int[] offsets, int[] indices, int[] samples, int[] bands, int[] types)",False,,NULL
33,Raster,1,int getNumBands(),True,Returns the number of bands (samples per pixel) in this Raster.,"

getNumBands
public final int getNumBands()
Returns the number of bands (samples per pixel) in this Raster.

Returns:
the number of bands of this Raster.


"
33,Raster,2,int getNumDataElements(),True,Returns the number of data elements needed to transfer one pixel via the getDataElements and setDataElements methods.,"

getNumDataElements
public final int getNumDataElements()
Returns the number of data elements needed to transfer one pixel
  via the getDataElements and setDataElements methods.  When pixels
  are transferred via these methods, they may be transferred in a
  packed or unpacked format, depending on the implementation of the
  underlying SampleModel.  Using these methods, pixels are transferred
  as an array of getNumDataElements() elements of a primitive type given
  by getTransferType().  The TransferType may or may not be the same
  as the storage data type of the DataBuffer.

Returns:
the number of data elements.


"
33,Raster,3,int getNumRows(),False,,NULL
33,Raster,4,int getNumColumns(),False,,NULL
33,Raster,5,"int getSample(int band, int x, int y, int[] sample)",False,,NULL
33,Raster,6,int getSampleModel(),False,,NULL
33,Raster,7,int getMinSampleValue(int band),False,,NULL
33,Raster,8,int getMaxSampleValue(int band),False,,NULL
33,Raster,9,int getMinValue(int band),False,,NULL
33,Raster,10,int getMaxValue(int band),False,,NULL
33,Raster,11,int getScale(int band),False,,NULL
33,Raster,12,int getOffset(int band),False,,NULL
33,Raster,13,int getDataBuffer(),False,,NULL
33,Raster,14,"int getSample(int x, int y, int[] sample)",False,,NULL
33,Raster,15,"int getSample(int x, int y, int w, int h, int[] sample)",False,,NULL
33,Raster,16,"int getSample(int x, int y, int w, int h, int[] sample, int startX, int startY)",False,,NULL
33,Raster,17,"int getSample(int x, int y, int w, int h, int[] sample, int startX, int startY, int startSample)",False,,NULL
33,Raster,18,"int getSample(int x, int y, int w, int h, int[] sample, int startX, int startY, int startSample, int startBand)",False,,NULL
33,Raster,19,"int getSample(int x, int y, int w, int h, int[] sample, int startX, int startY, int startSample, int startBand, int startRow)",False,,NULL
33,Raster,20,"int getSample(int x, int y, int w, int h, int[] sample, int startX, int startY, int startSample, int startBand, int startRow, int startCol)",False,,NULL
33,Raster,21,"int getSample(int x, int y, int w, int h, int[] sample, int startX, int startY, int startSample, int startBand, int startRow, int startCol, int startPixel)",False,,NULL
33,Raster,22,"int getSample(int x, int y, int w, int h, int[] sample, int startX, int startY, int startSample, int startBand, int startRow, int startCol, int startPixel, int startBand)",False,,NULL
33,Raster,23,"int getSample(int x, int y, int w, int h, int[] sample, int startX, int startY, int startSample, int startBand, int startRow, int startCol, int startPixel, int startBand, int startPixel)",False,,NULL
33,Raster,24,"int getSample(int x, int y, int w, int h, int[] sample, int startX, int startY, int startSample, int startBand, int startRow, int startCol, int startPixel, int startBand, int startPixel, int startBand)",False,,NULL
33,Raster,25,"int getSample(int x, int y, int w, int h, int[] sample, int startX, int startY, int startSample, int startBand, int startRow, int startCol, int startPixel, int startBand, int startPixel, int startBand, int startPixel)",False,,NULL
34,ReplicateScaleFilter,1,"void filter(Image src, Image dst, int width, int height, int x, int y)",False,,NULL
34,ReplicateScaleFilter,2,void setScale(float scale),False,,NULL
34,ReplicateScaleFilter,3,float getScale(),False,,NULL
34,ReplicateScaleFilter,4,boolean equals(Object obj),False,,NULL
34,ReplicateScaleFilter,5,int hashCode(),False,,NULL
35,RescaleOp,1,"RescaleOp(float scale, float offset)",False,,NULL
35,RescaleOp,2,"void filter(Raster src, Raster dest)",False,,NULL
35,RescaleOp,3,void setScale(float scale),False,,NULL
35,RescaleOp,4,void setOffset(float offset),False,,NULL
35,RescaleOp,5,"void setPixel(int x, int y, int rgb)",False,,NULL
35,RescaleOp,6,"int getPixel(int x, int y)",False,,NULL
35,RescaleOp,7,void setColorMap(ColorMap map),False,,NULL
35,RescaleOp,8,ColorMap getColorMap(),False,,NULL
35,RescaleOp,9,void setHints(RenderingHints hints),False,,NULL
35,RescaleOp,10,RenderingHints getHints(),False,,NULL
36,RGBImageFilter,1,"int filterRGB(int x, int y, int rgb)",True,Subclasses must specify a method to convert a single input pixel in the default RGB ColorModel to a single output pixel.,"

filterRGB
public abstract int filterRGB(int x,
                              int y,
                              int rgb)
Subclasses must specify a method to convert a single input pixel
 in the default RGB ColorModel to a single output pixel.

Parameters:
x - the X coordinate of the pixel
y - the Y coordinate of the pixel
rgb - the integer pixel representation in the default RGB
            color model
Returns:
a filtered pixel in the default RGB color model.
See Also:
ColorModel.getRGBdefault(), 
filterRGBPixels(int, int, int, int, int[], int, int)


"
36,RGBImageFilter,2,"void setRGB(int x, int y, int rgb)",False,,NULL
36,RGBImageFilter,3,"void setPixels(int x, int y, int w, int h, int[] pixels)",False,,NULL
36,RGBImageFilter,4,"void setPixels(int x, int y, int w, int h, int[] pixels, int off, int scansize)",False,,NULL
36,RGBImageFilter,5,"void setPixels(int x, int y, int w, int h, int[] pixels, int off)",False,,NULL
37,SampleModel,1,int getSampleSizeInBits(int band),False,,NULL
37,SampleModel,2,int getNumBands(),True,Returns the total number of bands of image data.,"

getNumBands
public final int getNumBands()
Returns the total number of bands of image data.

Returns:
the number of bands of image data that this
          SampleModel describes.


"
37,SampleModel,3,"int getSample(int x, int y, int band)",False,,NULL
37,SampleModel,4,int getWidth(),True,Returns the width in pixels.,"

getWidth
public final int getWidth()
Returns the width in pixels.

Returns:
the width in pixels of the region of image data
          that this SampleModel describes.


"
37,SampleModel,5,int getHeight(),True,Returns the height in pixels.,"

getHeight
public final int getHeight()
Returns the height in pixels.

Returns:
the height in pixels of the region of image data
          that this SampleModel describes.


"
37,SampleModel,6,int getMinimumBandIndex(),False,,NULL
37,SampleModel,7,int getMaximumBandIndex(),False,,NULL
37,SampleModel,8,int getTransferType(),True,Returns the TransferType used to transfer pixels via the getDataElements and setDataElements methods.,"

getTransferType
public int getTransferType()
Returns the TransferType used to transfer pixels via the
  getDataElements and setDataElements methods.  When pixels
  are transferred via these methods, they may be transferred in a
  packed or unpacked format, depending on the implementation of the
  SampleModel.  Using these methods, pixels are transferred as an
  array of getNumDataElements() elements of a primitive type given
  by getTransferType().  The TransferType may or may not be the same
  as the storage DataType.  The TransferType will be one of the types
  defined in DataBuffer.

Returns:
the transfer type.
See Also:
getDataElements(int, int, Object, DataBuffer), 
getDataElements(int, int, int, int, Object, DataBuffer), 
setDataElements(int, int, Object, DataBuffer), 
setDataElements(int, int, int, int, Object, DataBuffer), 
getNumDataElements(), 
DataBuffer


"
37,SampleModel,9,int getPixelStride(),False,,NULL
37,SampleModel,10,int getScanlineStride(),False,,NULL
37,SampleModel,11,int getSampleStride(),False,,NULL
37,SampleModel,12,int getSampleSize(int band),True,Returns the size in bits of samples for the specified band.,"

getSampleSize
public abstract int getSampleSize(int band)
Returns the size in bits of samples for the specified band.

Parameters:
band - the specified band
Returns:
the size of the samples of the specified band.


"
37,SampleModel,13,int getBandOffset(int band),False,,NULL
37,SampleModel,14,int getBand(int band),False,,NULL
37,SampleModel,15,int getBandOffset(int band),False,,NULL
37,SampleModel,16,int getBand(int band),False,,NULL
37,SampleModel,17,int getBandOffset(int band),False,,NULL
37,SampleModel,18,int getBand(int band),False,,NULL
37,SampleModel,19,int getBandOffset(int band),False,,NULL
37,SampleModel,20,int getBand(int band),False,,NULL
37,SampleModel,21,int getBandOffset(int band),False,,NULL
37,SampleModel,22,int getBand(int band),False,,NULL
37,SampleModel,23,int getBandOffset(int band),False,,NULL
37,SampleModel,24,int getBand(int band),False,,NULL
37,SampleModel,25,int getBandOffset(int band),False,,NULL
37,SampleModel,26,int getBand(int band),False,,NULL
37,SampleModel,27,int getBandOffset(int band),False,,NULL
37,SampleModel,28,int getBand(int band),False,,NULL
37,SampleModel,29,int getBandOffset(int band),False,,NULL
37,SampleModel,30,int getBand(int band),False,,NULL
37,SampleModel,31,int getBandOffset(int band),False,,NULL
37,SampleModel,32,int getBand(int band),False,,NULL
37,SampleModel,33,int getBandOffset(int band),False,,NULL
37,SampleModel,34,int getBand(int band),False,,NULL
37,SampleModel,35,int getBandOffset(int band),False,,NULL
37,SampleModel,36,int getBand(int band),False,,NULL
37,SampleModel,37,int getBandOffset(int band),False,,NULL
37,SampleModel,38,int getBand(int band),False,,NULL
37,SampleModel,39,int getBandOffset(int band),False,,NULL
37,SampleModel,40,int getBand(int band),False,,NULL
37,SampleModel,41,int getBandOffset(int band),False,,NULL
37,SampleModel,42,int getBand(int band),False,,NULL
37,SampleModel,43,int getBandOffset(int band),False,,NULL
37,SampleModel,44,int getBand(int band),False,,NULL
37,SampleModel,45,int getBandOffset(int band),False,,NULL
37,SampleModel,46,int getBand(int band),False,,NULL
37,SampleModel,47,int getBandOffset(int band),False,,NULL
37,SampleModel,48,int getBand(int band),False,,NULL
37,SampleModel,49,int getBandOffset(int band),False,,NULL
37,SampleModel,50,int getBand(int band),False,,NULL
37,SampleModel,51,int getBandOffset(int band),False,,NULL
37,SampleModel,52,int getBand(int band),False,,NULL
37,SampleModel,53,int getBandOffset(int band),False,,NULL
37,SampleModel,54,int getBand(int band),False,,NULL
37,SampleModel,55,int getBandOffset(int band),False,,NULL
37,SampleModel,56,int getBand(int band),False,,NULL
37,SampleModel,57,int getBandOffset(int band),False,,NULL
37,SampleModel,58,int getBand(int band),False,,NULL
37,SampleModel,59,int getBandOffset(int band),False,,NULL
37,SampleModel,60,int getBand(int band),False,,NULL
37,SampleModel,61,int getBandOffset(int band),False,,NULL
37,SampleModel,62,int getBand(int band),False,,NULL
37,SampleModel,63,int getBandOffset(int band),False,,NULL
37,SampleModel,64,int getBand(int band),False,,NULL
37,SampleModel,65,int getBandOffset(int band),False,,NULL
37,SampleModel,66,int getBand(int band),False,,NULL
37,SampleModel,67,int getBandOffset(int band),False,,NULL
37,SampleModel,68,int getBand(int band),False,,NULL
37,SampleModel,69,int getBandOffset(int band),False,,NULL
37,SampleModel,70,int getBand(int band),False,,NULL
37,SampleModel,71,int getBandOffset(int band),False,,NULL
37,SampleModel,72,int getBand(int band),False,,NULL
37,SampleModel,73,int getBandOffset(int band),False,,NULL
37,SampleModel,74,int getBand(int band),False,,NULL
37,SampleModel,75,int getBandOffset(int band),False,,NULL
37,SampleModel,76,int getBand(int band),False,,NULL
37,SampleModel,77,int getBandOffset(int band),False,,NULL
37,SampleModel,78,int getBand(int band),False,,NULL
37,SampleModel,79,int getBandOffset(int band),False,,NULL
37,SampleModel,80,int getBand(int band),False,,NULL
37,SampleModel,81,int getBandOffset(int band),False,,NULL
37,SampleModel,82,int getBand(int band),False,,NULL
37,SampleModel,83,int getBandOffset(int band),False,,NULL
38,ShortLookupTable,1,"short[] getPixels(int start, int length)",False,,NULL
38,ShortLookupTable,2,"void setPixels(int start, int length, short[] pixels)",False,,NULL
38,ShortLookupTable,3,short getPixel(int i),False,,NULL
38,ShortLookupTable,4,"void setPixel(int i, short pixel)",False,,NULL
38,ShortLookupTable,5,int getNumPixels(),False,,NULL
39,SinglePixelPackedSampleModel,1,"int getSample(int x, int y, int band)",False,,NULL
39,SinglePixelPackedSampleModel,2,"int getSample(int x, int y, int band, SampleModel sm)",False,,NULL
39,SinglePixelPackedSampleModel,3,int getSampleSize(int band),True,Returns the number of bits per sample for the specified band.,"

getSampleSize
public int getSampleSize(int band)
Returns the number of bits per sample for the specified band.

Specified by:
getSampleSize in class SampleModel
Parameters:
band - the specified band
Returns:
the size of the samples of the specified band.


"
39,SinglePixelPackedSampleModel,4,int getWidth(),False,,NULL
39,SinglePixelPackedSampleModel,5,int getHeight(),False,,NULL
39,SinglePixelPackedSampleModel,6,int getNumBands(),False,,NULL
39,SinglePixelPackedSampleModel,7,int getTransparency(),False,,NULL
39,SinglePixelPackedSampleModel,8,int getPixelStride(),False,,NULL
39,SinglePixelPackedSampleModel,9,int getScanlineStride(),True,Returns the scanline stride of this SinglePixelPackedSampleModel.,"

getScanlineStride
public int getScanlineStride()
Returns the scanline stride of this SinglePixelPackedSampleModel.

Returns:
the scanline stride of this
          SinglePixelPackedSampleModel.


"
39,SinglePixelPackedSampleModel,10,int getDataType(),False,,NULL
39,SinglePixelPackedSampleModel,11,int getDataOffset(),False,,NULL
39,SinglePixelPackedSampleModel,12,int getBandOffset(int band),False,,NULL
39,SinglePixelPackedSampleModel,13,int getBandOffsets(),False,,NULL
39,SinglePixelPackedSampleModel,14,int getBandIndices(),False,,NULL
39,SinglePixelPackedSampleModel,15,int getBand(int band),False,,NULL
39,SinglePixelPackedSampleModel,16,"int getBand(int band, SampleModel sm)",False,,NULL
39,SinglePixelPackedSampleModel,17,"int getBand(int band, SampleModel sm, int[] bandIndices)",False,,NULL
39,SinglePixelPackedSampleModel,18,"int getBand(int band, SampleModel sm, int[] bandIndices, int[] bandOffsets)",False,,NULL
39,SinglePixelPackedSampleModel,19,"int getBand(int band, SampleModel sm, int[] bandIndices, int[] bandOffsets, int[] bandStrides)",False,,NULL
39,SinglePixelPackedSampleModel,20,"int getBand(int band, SampleModel sm, int[] bandIndices, int[] bandOffsets, int[] bandStrides, int[] bandSizes)",False,,NULL
39,SinglePixelPackedSampleModel,21,"int getBand(int band, SampleModel sm, int[] bandIndices, int[] bandOffsets, int[] bandStrides, int[] bandSizes, int[] bandTypes)",False,,NULL
39,SinglePixelPackedSampleModel,22,"int getBand(int band, SampleModel sm, int[] bandIndices, int[] bandOffsets, int[] bandStrides, int[] bandSizes, int[] bandTypes, int[] bandMasks)",False,,NULL
39,SinglePixelPackedSampleModel,23,"int getBand(int band, SampleModel sm, int[] bandIndices, int[] bandOffsets, int[] bandStrides, int[] bandSizes, int[] bandTypes, int[] bandMasks, int[] bandOffsets2)",False,,NULL
39,SinglePixelPackedSampleModel,24,"int getBand(int band, SampleModel sm, int[] bandIndices, int[] bandOffsets, int[] bandStrides, int[] bandSizes, int[] bandTypes, int[] bandMasks, int[] bandOffsets2, int[] bandStrides2)",False,,NULL
39,SinglePixelPackedSampleModel,25,"int getBand(int band, SampleModel sm, int[] bandIndices, int[] bandOffsets, int[] bandStrides, int[] bandSizes, int[] bandTypes, int[] bandMasks, int[] bandOffsets2, int[] bandStrides2, int[] bandSizes2)",False,,NULL
40,VolatileImage,1,"VolatileImage createSimilarVolatileImage(int width, int height, int transparency)",False,,NULL
40,VolatileImage,2,Graphics2D createGraphics(),True,"Creates a Graphics2D, which can be used to draw into this VolatileImage.","

createGraphics
public abstract Graphics2D createGraphics()
Creates a Graphics2D, which can be used to draw into
 this VolatileImage.

Returns:
a Graphics2D, used for drawing into this
          image.


"
40,VolatileImage,3,void flush(),False,,NULL
40,VolatileImage,4,void validate(),False,,NULL
40,VolatileImage,5,void setAccelerationPriority(int priority),False,,NULL
41,WritableRaster,1,int getNumBands(),False,,NULL
41,WritableRaster,2,int getWidth(),False,,NULL
41,WritableRaster,3,int getHeight(),False,,NULL
41,WritableRaster,4,"int getSample(int x, int y, int band)",False,,NULL
41,WritableRaster,5,"void setSample(int x, int y, int band, int sample)",True,"Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using an int for input.","

setSample
public void setSample(int x,
                      int y,
                      int b,
                      int s)
Sets a sample in the specified band for the pixel located at (x,y)
 in the DataBuffer using an int for input.
 An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.
 However, explicit bounds checking is not guaranteed.

Parameters:
x - The X coordinate of the pixel location.
y - The Y coordinate of the pixel location.
b - The band to set.
s - The input sample.
Throws:
ArrayIndexOutOfBoundsException - if the coordinates or
 the band index are not in bounds.


"
41,WritableRaster,6,"void setPixel(int x, int y, int[] pixel)",True,Sets a pixel in the DataBuffer using an int array of samples for input.,"

setPixel
public void setPixel(int x,
                     int y,
                     int[] iArray)
Sets a pixel in the DataBuffer using an int array of samples for input.
 An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.
 However, explicit bounds checking is not guaranteed.

Parameters:
x - The X coordinate of the pixel location.
y - The Y coordinate of the pixel location.
iArray - The input samples in a int array.
Throws:
NullPointerException - if iArray is null.
ArrayIndexOutOfBoundsException - if the coordinates are not
 in bounds, or if iArray is too small to hold the input.


"
41,WritableRaster,7,"int[] getPixel(int x, int y, int[] pixel)",False,,NULL
41,WritableRaster,8,void setRect(Rectangle rect),False,,NULL
41,WritableRaster,9,Rectangle getRect(),False,,NULL
41,WritableRaster,10,"void setDataElements(int x, int y, Rectangle rect, DataBuffer data)",False,,NULL
41,WritableRaster,11,"DataBuffer getDataElements(int x, int y, Rectangle rect, DataBuffer data)",False,,NULL
41,WritableRaster,12,"void setSample(int x, int y, int band, double sample)",True,"Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a double for input.","

setSample
public void setSample(int x,
                      int y,
                      int b,
                      double s)
Sets a sample in the specified band for the pixel located at (x,y)
 in the DataBuffer using a double for input.
 An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.
 However, explicit bounds checking is not guaranteed.

Parameters:
x - The X coordinate of the pixel location.
y - The Y coordinate of the pixel location.
b - The band to set.
s - The input sample as a double.
Throws:
ArrayIndexOutOfBoundsException - if the coordinates or
 the band index are not in bounds.


"
41,WritableRaster,13,"double getSample(int x, int y, int band)",False,,NULL
41,WritableRaster,14,"void setPixel(int x, int y, double[] pixel)",True,Sets a pixel in the DataBuffer using a double array of samples for input.,"

setPixel
public void setPixel(int x,
                     int y,
                     double[] dArray)
Sets a pixel in the DataBuffer using a double array of samples for input.
 An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.
 However, explicit bounds checking is not guaranteed.

Parameters:
x - The X coordinate of the pixel location.
y - The Y coordinate of the pixel location.
dArray - The input samples in a double array.
Throws:
NullPointerException - if dArray is null.
ArrayIndexOutOfBoundsException - if the coordinates are not
 in bounds, or if dArray is too small to hold the input.


"
41,WritableRaster,15,"double[] getPixel(int x, int y, double[] pixel)",False,,NULL
41,WritableRaster,16,"void setDataElements(int x, int y, Rectangle rect, DataBuffer.Type dataType, double[] data)",False,,NULL
41,WritableRaster,17,"double[] getDataElements(int x, int y, Rectangle rect, DataBuffer.Type dataType, double[] data)",False,,NULL
41,WritableRaster,18,"void setPixels(int x, int y, int w, int h, DataBuffer data)",False,,NULL
41,WritableRaster,19,"DataBuffer getPixels(int x, int y, int w, int h, DataBuffer data)",False,,NULL
41,WritableRaster,20,"void setPixels(int x, int y, int w, int h, DataBuffer.Type dataType, double[] data)",False,,NULL
41,WritableRaster,21,"double[] getPixels(int x, int y, int w, int h, DataBuffer.Type dataType, double[] data)",False,,NULL
