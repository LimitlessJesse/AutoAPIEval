ClassName,Method,Return Type,Description,Full Description
AppConfigurationEntry,getControlFlag(),AppConfigurationEntry.LoginModuleControlFlag,"Return the controlFlag (either REQUIRED, REQUISITE, SUFFICIENT, or OPTIONAL) for this LoginModule.","

getControlFlag
public AppConfigurationEntry.LoginModuleControlFlag getControlFlag()
Return the controlFlag
 (either REQUIRED, REQUISITE, SUFFICIENT, or OPTIONAL)
 for this LoginModule.

Returns:
the controlFlag
          (either REQUIRED, REQUISITE, SUFFICIENT, or OPTIONAL)
          for this LoginModule.


"
AppConfigurationEntry,getLoginModuleName(),String,Get the class name of the configured LoginModule.,"

getLoginModuleName
public String getLoginModuleName()
Get the class name of the configured LoginModule.

Returns:
the class name of the configured LoginModule as
          a String.


"
AppConfigurationEntry,getOptions(),"Map<String,?>",Get the options configured for this LoginModule.,"

getOptions
public Map<String,?> getOptions()
Get the options configured for this LoginModule.

Returns:
the options configured for this LoginModule
          as an unmodifiable Map.


"
AppConfigurationEntry.LoginModuleControlFlag,toString(),String,Return a String representation of this controlFlag.,"

toString
public String toString()
Return a String representation of this controlFlag.

  The String has the format, ""LoginModuleControlFlag: flag"",
 where flag is either required, requisite,
 sufficient, or optional.

Overrides:
toString in class Object
Returns:
a String representation of this controlFlag.


"
Configuration,getAppConfigurationEntry(String name),abstract AppConfigurationEntry[],Retrieve the AppConfigurationEntries for the specified name from this Configuration.,"

getAppConfigurationEntry
public abstract AppConfigurationEntry[] getAppConfigurationEntry(String name)
Retrieve the AppConfigurationEntries for the specified name
 from this Configuration.

 

Parameters:
name - the name used to index the Configuration.
Returns:
an array of AppConfigurationEntries for the specified name
          from this Configuration, or null if there are no entries
          for the specified name


"
Configuration,getConfiguration(),static Configuration,Get the installed login Configuration.,"

getConfiguration
public static Configuration getConfiguration()
Get the installed login Configuration.

 

Returns:
the login Configuration.  If a Configuration object was set
          via the Configuration.setConfiguration method,
          then that object is returned.  Otherwise, a default
          Configuration object is returned.
Throws:
SecurityException - if the caller does not have permission
                          to retrieve the Configuration.
See Also:
setConfiguration(javax.security.auth.login.Configuration)


"
Configuration,"getInstance(String type, Configuration.Parameters params)",static Configuration,Returns a Configuration object of the specified type.,"

getInstance
public static Configuration getInstance(String type,
                                        Configuration.Parameters params)
                                 throws NoSuchAlgorithmException
Returns a Configuration object of the specified type.

  This method traverses the list of registered security providers,
 starting with the most preferred Provider.
 A new Configuration object encapsulating the
 ConfigurationSpi implementation from the first
 Provider that supports the specified type is returned.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
type - the specified Configuration type.  See the Configuration
    section in the 
    Java Cryptography Architecture Standard Algorithm Name
    Documentation for a list of standard Configuration types.
params - parameters for the Configuration, which may be null.
Returns:
the new Configuration object.
Throws:
SecurityException - if the caller does not have permission
          to get a Configuration instance for the specified type.
NullPointerException - if the specified type is null.
IllegalArgumentException - if the specified parameters
          are not understood by the ConfigurationSpi implementation
          from the selected Provider.
NoSuchAlgorithmException - if no Provider supports a
          ConfigurationSpi implementation for the specified type.
Since:
1.6
See Also:
Provider


"
Configuration,"getInstance(String type, Configuration.Parameters params, Provider provider)",static Configuration,Returns a Configuration object of the specified type.,"

getInstance
public static Configuration getInstance(String type,
                                        Configuration.Parameters params,
                                        Provider provider)
                                 throws NoSuchAlgorithmException
Returns a Configuration object of the specified type.

  A new Configuration object encapsulating the
 ConfigurationSpi implementation from the specified Provider
 object is returned.  Note that the specified Provider object
 does not have to be registered in the provider list.

Parameters:
type - the specified Configuration type.  See the Configuration
    section in the 
    Java Cryptography Architecture Standard Algorithm Name
    Documentation for a list of standard Configuration types.
params - parameters for the Configuration, which may be null.
provider - the Provider.
Returns:
the new Configuration object.
Throws:
SecurityException - if the caller does not have permission
          to get a Configuration instance for the specified type.
NullPointerException - if the specified type is null.
IllegalArgumentException - if the specified Provider is null,
          or if the specified parameters are not understood by
          the ConfigurationSpi implementation from the specified Provider.
NoSuchAlgorithmException - if the specified Provider does not
          support a ConfigurationSpi implementation for the specified
          type.
Since:
1.6
See Also:
Provider


"
Configuration,"getInstance(String type, Configuration.Parameters params, String provider)",static Configuration,Returns a Configuration object of the specified type.,"

getInstance
public static Configuration getInstance(String type,
                                        Configuration.Parameters params,
                                        String provider)
                                 throws NoSuchProviderException,
                                        NoSuchAlgorithmException
Returns a Configuration object of the specified type.

  A new Configuration object encapsulating the
 ConfigurationSpi implementation from the specified provider
 is returned.   The specified provider must be registered
 in the provider list.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
type - the specified Configuration type.  See the Configuration
    section in the 
    Java Cryptography Architecture Standard Algorithm Name
    Documentation for a list of standard Configuration types.
params - parameters for the Configuration, which may be null.
provider - the provider.
Returns:
the new Configuration object.
Throws:
SecurityException - if the caller does not have permission
          to get a Configuration instance for the specified type.
NullPointerException - if the specified type is null.
IllegalArgumentException - if the specified provider
          is null or empty,
          or if the specified parameters are not understood by
          the ConfigurationSpi implementation from the specified provider.
NoSuchProviderException - if the specified provider is not
          registered in the security provider list.
NoSuchAlgorithmException - if the specified provider does not
          support a ConfigurationSpi implementation for the specified
          type.
Since:
1.6
See Also:
Provider


"
Configuration,getParameters(),Configuration.Parameters,Return Configuration parameters.,"

getParameters
public Configuration.Parameters getParameters()
Return Configuration parameters.

  This Configuration instance will only have parameters if it
 was obtained via a call to Configuration.getInstance.
 Otherwise this method returns null.

Returns:
Configuration parameters, or null.
Since:
1.6


"
Configuration,getProvider(),Provider,Return the Provider of this Configuration.,"

getProvider
public Provider getProvider()
Return the Provider of this Configuration.

  This Configuration instance will only have a Provider if it
 was obtained via a call to Configuration.getInstance.
 Otherwise this method returns null.

Returns:
the Provider of this Configuration, or null.
Since:
1.6


"
Configuration,getType(),String,Return the type of this Configuration.,"

getType
public String getType()
Return the type of this Configuration.

  This Configuration instance will only have a type if it
 was obtained via a call to Configuration.getInstance.
 Otherwise this method returns null.

Returns:
the type of this Configuration, or null.
Since:
1.6


"
Configuration,refresh(),void,Refresh and reload the Configuration.,"

refresh
public void refresh()
Refresh and reload the Configuration.

  This method causes this Configuration object to refresh/reload its
 contents in an implementation-dependent manner.
 For example, if this Configuration object stores its entries in a file,
 calling refresh may cause the file to be re-read.

  The default implementation of this method does nothing.
 This method should be overridden if a refresh operation is supported
 by the implementation.

Throws:
SecurityException - if the caller does not have permission
                          to refresh its Configuration.


"
Configuration,setConfiguration(Configuration configuration),static void,Set the login Configuration.,"

setConfiguration
public static void setConfiguration(Configuration configuration)
Set the login Configuration.

 

Parameters:
configuration - the new Configuration
Throws:
SecurityException - if the current thread does not have
                  Permission to set the Configuration.
See Also:
getConfiguration()


"
ConfigurationSpi,engineGetAppConfigurationEntry(String name),protected abstract AppConfigurationEntry[],Retrieve the AppConfigurationEntries for the specified name.,"

engineGetAppConfigurationEntry
protected abstract AppConfigurationEntry[] engineGetAppConfigurationEntry(String name)
Retrieve the AppConfigurationEntries for the specified name.

 

Parameters:
name - the name used to index the Configuration.
Returns:
an array of AppConfigurationEntries for the specified
          name, or null if there are no entries.


"
ConfigurationSpi,engineRefresh(),protected void,Refresh and reload the Configuration.,"

engineRefresh
protected void engineRefresh()
Refresh and reload the Configuration.

  This method causes this Configuration object to refresh/reload its
 contents in an implementation-dependent manner.
 For example, if this Configuration object stores its entries in a file,
 calling refresh may cause the file to be re-read.

  The default implementation of this method does nothing.
 This method should be overridden if a refresh operation is supported
 by the implementation.

Throws:
SecurityException - if the caller does not have permission
          to refresh its Configuration.


"
LoginContext,getSubject(),Subject,Return the authenticated Subject.,"

getSubject
public Subject getSubject()
Return the authenticated Subject.

 

Returns:
the authenticated Subject.  If the caller specified a
          Subject to this LoginContext's constructor,
          this method returns the caller-specified Subject.
          If a Subject was not specified and authentication succeeds,
          this method returns the Subject instantiated and used for
          authentication by this LoginContext.
          If a Subject was not specified, and authentication fails or
          has not been attempted, this method returns null.


"
LoginContext,login(),void,Perform the authentication.,"

login
public void login()
           throws LoginException
Perform the authentication.

  This method invokes the login method for each
 LoginModule configured for the name specified to the
 LoginContext constructor, as determined by the login
 Configuration.  Each LoginModule
 then performs its respective type of authentication
 (username/password, smart card pin verification, etc.).

  This method completes a 2-phase authentication process by
 calling each configured LoginModule's commit method
 if the overall authentication succeeded (the relevant REQUIRED,
 REQUISITE, SUFFICIENT, and OPTIONAL LoginModules succeeded),
 or by calling each configured LoginModule's abort method
 if the overall authentication failed.  If authentication succeeded,
 each successful LoginModule's commit method associates
 the relevant Principals and Credentials with the Subject.
 If authentication failed, each LoginModule's abort method
 removes/destroys any previously stored state.

  If the commit phase of the authentication process
 fails, then the overall authentication fails and this method
 invokes the abort method for each configured
 LoginModule.

  If the abort phase
 fails for any reason, then this method propagates the
 original exception thrown either during the login phase
 or the commit phase.  In either case, the overall
 authentication fails.

  In the case where multiple LoginModules fail,
 this method propagates the exception raised by the first
 LoginModule which failed.

  Note that if this method enters the abort phase
 (either the login or commit phase failed),
 this method invokes all LoginModules configured for the
 application regardless of their respective Configuration
 flag parameters.  Essentially this means that Requisite
 and Sufficient semantics are ignored during the
 abort phase.  This guarantees that proper cleanup
 and state restoration can take place.

 

Throws:
LoginException - if the authentication fails.


"
LoginContext,logout(),void,Logout the Subject.,"

logout
public void logout()
            throws LoginException
Logout the Subject.

  This method invokes the logout method for each
 LoginModule configured for this LoginContext.
 Each LoginModule performs its respective logout procedure
 which may include removing/destroying
 Principal and Credential information
 from the Subject and state cleanup.

  Note that this method invokes all LoginModules configured for the
 application regardless of their respective
 Configuration flag parameters.  Essentially this means
 that Requisite and Sufficient semantics are
 ignored for this method.  This guarantees that proper cleanup
 and state restoration can take place.

 

Throws:
LoginException - if the logout fails.


"
