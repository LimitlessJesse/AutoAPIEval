Sample: 0 LogStream
----------------------------------------------------------------
1. `void close()`: This method closes the log stream.
2. `void flush()`: This method flushes the log stream.
3. `void write(String s)`: This method writes a string to the log stream.
4. `void write(byte[] b)`: This method writes a byte array to the log stream.
5. `void write(int b)`: This method writes a byte to the log stream.
================================================================

Sample: 1 ObjID
----------------------------------------------------------------
1. `int hashCode()`: This method returns a hash code value for the object.
2. `boolean equals(Object obj)`: This method indicates whether some other object is "equal to" this one.
3. `static ObjID read(ObjectInput in) throws IOException`: This method reads an ObjID instance from an ObjectInput.
4. `void write(ObjectOutput out) throws IOException`: This method writes the ObjID to an ObjectOutput.
5. `String toString()`: This method returns a string representation of the object.
================================================================

Sample: 2 Operation
----------------------------------------------------------------
1. `void exportObject(Remote obj)`: Exports the remote object to make it available to receive incoming calls.
2. `Remote toStub(Remote obj)`: Returns a stub for the remote object passed as a parameter.
3. `void unexportObject(Remote obj, boolean force)`: Unexports the remote object, making it no longer available to receive incoming calls.
4. `String getLog()`: Returns a string representation of the log of RMI calls made to the server.
5. `void setLog(String log)`: Sets the log of RMI calls made to the server.
================================================================

Sample: 3 RemoteObject
----------------------------------------------------------------
1. `RemoteRef getRef()`: This method returns the remote reference for the remote object.
2. `String getRefClass()`: This method returns the class name of the remote reference.
3. `void setRef(RemoteRef ref)`: This method sets the remote reference for the remote object.
4. `void setRefClass(String refClass)`: This method sets the class name of the remote reference.
5. `void done(RemoteCall call)`: This method indicates that a call has completed.
================================================================

Sample: 4 RemoteObjectInvocationHandler
----------------------------------------------------------------
1. `Object invoke(Remote obj, Method method, Object[] args)`: This method invokes a method on a remote object.
2. `Remote getProxyClass(ClassLoader loader, Class<?>... interfaces)`: This method returns a proxy class for the specified interfaces.
3. `RemoteObjectInvocationHandler(Remote obj)`: Constructor that creates a new RemoteObjectInvocationHandler instance with the specified remote object.
4. `Object getTarget()`: This method returns the target remote object associated with this invocation handler.
5. `void setTarget(Remote obj)`: This method sets the target remote object for this invocation handler.
================================================================

Sample: 5 RemoteServer
----------------------------------------------------------------
1. `String getClientHost()`: This method returns the hostname of the client that exported the remote object.
2. `int getLog()`: This method returns the log level for the server.
3. `void setLog(int newLog)`: This method sets the log level for the server.
4. `void setRef(ObjID id, Remote obj)`: This method sets the remote reference for the specified object ID.
5. `void setSocketFactory(RMIClientSocketFactory csf)`: This method sets the client socket factory used by the server.
================================================================

Sample: 6 RemoteStub
----------------------------------------------------------------
1. `Object clone()`: Returns a clone of the remote object that is a stub for the same remote object.
2. `String getRefClass(String refClassName)`: Returns the class name of the stub for the specified class name.
3. `Remote toStub(Remote obj)`: Returns a stub for the specified remote object.
4. `void setRefClass(String refClassName, String stubClassName)`: Sets the class name of the stub for the specified class name.
5. `void setLog(OutputStream out)`: Sets the log stream for this stub.
================================================================

Sample: 7 RMIClassLoader
----------------------------------------------------------------
1. `Class<?> loadClass(String codebase, String name)`: This method loads a class from the specified codebase URL and class name.
2. `Class<?> loadClass(URL codebase, String name)`: This method loads a class from the specified codebase URL object and class name.
3. `Class<?> loadClass(String name)`: This method loads a class using the default codebase URL and the specified class name.
4. `Class<?> loadProxyClass(String codebase, String[] interfaces)`: This method loads a dynamic proxy class from the specified codebase URL and interface names.
5. `Class<?> loadProxyClass(URL codebase, String[] interfaces)`: This method loads a dynamic proxy class from the specified codebase URL object and interface names.
================================================================

Sample: 8 RMIClassLoaderSpi
----------------------------------------------------------------
1. `Class<?> loadClass(String codebase, String name)`: This method loads a class from the given codebase with the specified name.
2. `Class<?> loadProxyClass(String codebase, String[] interfaces)`: This method loads a dynamic proxy class from the given codebase with the specified interfaces.
3. `ClassLoader getClassLoader(String codebase)`: This method returns the class loader for the given codebase.
4. `String getClassAnnotation(Class<?> cl)`: This method returns the annotation string for the specified class.
5. `String getLoaderAnnotation(ClassLoader loader)`: This method returns the annotation string for the specified class loader.
================================================================

Sample: 9 RMISocketFactory
----------------------------------------------------------------
1. `ServerSocket createServerSocket(int port)`: This method creates a server socket on the specified port.
2. `Socket createSocket(String host, int port)`: This method creates a client socket connected to the specified host and port.
3. `int hashCode()`: This method returns the hash code value for the object.
4. `boolean equals(Object obj)`: This method compares this object to the specified object.
5. `String toString()`: This method returns a string representation of the object.
================================================================

Sample: 10 UID
----------------------------------------------------------------
1. `int hashCode()`: This method returns a hash code value for the object.
2. `boolean equals(Object obj)`: This method compares this UID to the specified object.
3. `String toString()`: This method returns a string representation of the object.
4. `byte[] marshal()`: This method returns the unique identifier as an array of bytes.
5. `static UID read(DataInput in) throws IOException`: This method reads a UID instance from a DataInput stream.
================================================================

Sample: 11 UnicastRemoteObject
----------------------------------------------------------------
1. `RemoteRef getRef()`: Returns the remote reference for the remote object.
2. `String getClientHost()`: Returns the hostname of the client that exported the remote object.
3. `Object clone()`: Creates and returns a copy of this object.
4. `void exportObject(Remote obj)`: Exports the specified remote object.
5. `Remote exportObject(Remote obj, int port)`: Exports the specified remote object on the specified port.
================================================================

