Sample: 0 MultiButtonUI
----------------------------------------------------------------
1. `ButtonUI getUI(int a)`: This method returns the UI for the specified index.
2. `int getUIsLength()`: This method returns the number of UIs in this MultiButtonUI.
3. `void setUIs(ButtonUI[] uis)`: This method sets the array of ButtonUIs to be used by this MultiButtonUI.
4. `void update(Graphics g, JComponent c)`: This method updates the specified component with the given graphics context.
5. `void paint(Graphics g, JComponent c)`: This method paints the specified component with the given graphics context.
================================================================

Sample: 1 MultiColorChooserUI
----------------------------------------------------------------
1. `ColorChooserUI getUI(int a)`: This method returns the ColorChooserUI object for the specified index.
2. `int getUIsLength()`: This method returns the number of ColorChooserUI objects in this MultiColorChooserUI.
3. `void setUIs(ColorChooserUI[] uis)`: This method sets the array of ColorChooserUI objects for this MultiColorChooserUI.
4. `void uninstallUI(JComponent c)`: This method uninstalls the UI for the specified component.
5. `void update(Graphics g, JComponent c)`: This method updates the specified component with the given graphics context.
================================================================

Sample: 2 MultiComboBoxUI
----------------------------------------------------------------
1. `ComboBoxUI getUI(int a)`: This method returns the UI for the specified component.
2. `int getUIsLength()`: This method returns the number of UIs in the MultiComboBoxUI.
3. `void setUIs(ComboBoxUI[] uis)`: This method sets the array of ComboBoxUIs to be used by the MultiComboBoxUI.
4. `void update(Graphics g, JComponent c)`: This method updates the specified component using the provided graphics context.
5. `void uninstallUI(JComponent c)`: This method uninstalls the UI for the specified component.
================================================================

Sample: 3 MultiDesktopIconUI
----------------------------------------------------------------
1. `DesktopIconUI getUI(int a)`: This method returns the UI for the specified index.
2. `int getUIsLength()`: This method returns the number of UIs in the multiplexing UI.
3. `void setUIs(DesktopIconUI[] uis)`: This method sets the array of UIs to be multiplexed.
4. `void update(Graphics g, JComponent c)`: This method updates the specified component with the given graphics context.
5. `void paint(Graphics g, JComponent c)`: This method paints the specified component with the given graphics context.
================================================================

Sample: 4 MultiDesktopPaneUI
----------------------------------------------------------------
1. `DesktopPaneUI createUI(JComponent a)`: This method creates a new instance of MultiDesktopPaneUI.
2. `DesktopPaneUI[] getUIs()`: This method returns an array of DesktopPaneUIs that are being multiplexed.
3. `void setUIs(DesktopPaneUI[] uis)`: This method sets the array of DesktopPaneUIs to be multiplexed.
4. `void update(Graphics g, JComponent c)`: This method updates the specified component's UI.
5. `boolean contains(JComponent a)`: This method checks if the specified component is contained in the multiplexed UIs.
================================================================

Sample: 5 MultiFileChooserUI
----------------------------------------------------------------
1. `ComponentUI createUI(JComponent a)`: This method creates a new instance of MultiFileChooserUI for a specified JComponent.
2. `FileChooserUI[] getUIs()`: This method returns an array of FileChooserUI objects that are being multiplexed.
3. `void setUIs(FileChooserUI[] uis)`: This method sets the array of FileChooserUI objects to be multiplexed.
4. `ComponentUI getUI(JComponent a)`: This method returns the UI delegate for a specified JComponent.
5. `int getUIsCount()`: This method returns the number of FileChooserUI objects being multiplexed.
================================================================

Sample: 6 MultiInternalFrameUI
----------------------------------------------------------------
1. `void addUI(InternalFrameUI ui)`: This method adds the specified InternalFrameUI to the list of UIs managed by this MultiInternalFrameUI.
2. `void removeUI(InternalFrameUI ui)`: This method removes the specified InternalFrameUI from the list of UIs managed by this MultiInternalFrameUI.
3. `InternalFrameUI getUI(JComponent component)`: This method returns the UI delegate for the specified JComponent.
4. `int getUIsLength()`: This method returns the number of UIs in the list managed by this MultiInternalFrameUI.
5. `InternalFrameUI[] getUIs()`: This method returns an array of all the UIs managed by this MultiInternalFrameUI.
================================================================

Sample: 7 MultiLabelUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
3. `void paint(Graphics g, JComponent c)`: This method paints the UI for a component.
4. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size for the UI component.
5. `Dimension getMinimumSize(JComponent c)`: This method returns the minimum size for the UI component.
================================================================

Sample: 8 MultiListUI
----------------------------------------------------------------
1. `ListUI getListUI()`: This method returns the ListUI object associated with this MultiListUI.
2. `int locationToIndex(JList list, Point location)`: This method returns the index of the cell at the specified coordinates.
3. `Rectangle getCellBounds(JList list, int index1, int index2)`: This method returns the bounding rectangle for the range of cells specified by the two indices.
4. `int getNextMatch(JList list, String prefix, int startIndex, Position.Bias bias)`: This method returns the index of the next item in the list that starts with the specified prefix.
5. `int convertIndexToModel(JList list, int viewIndex)`: This method converts the index in the view coordinate system to the underlying model coordinate system.
================================================================

Sample: 9 MultiLookAndFeel
----------------------------------------------------------------
1. `LookAndFeel getLookAndFeel(int a)`: This method returns the look and feel object for the specified index.
2. `LookAndFeel[] getInstalledLookAndFeels()`: This method returns an array of look and feel objects that are currently installed.
3. `LookAndFeel getDefaultLookAndFeel()`: This method returns the default look and feel object.
4. `void addAuxiliaryLookAndFeel(LookAndFeel laf)`: This method adds an auxiliary look and feel to the list of look and feels.
5. `void removeAuxiliaryLookAndFeel(LookAndFeel laf)`: This method removes an auxiliary look and feel from the list of look and feels.
================================================================

Sample: 10 MultiMenuBarUI
----------------------------------------------------------------
1. `ComponentUI createUI(JComponent x)`: This method creates a new instance of MultiMenuBarUI for a specific JComponent.
2. `MenuBarUI[] getUIs()`: This method returns an array of MenuBarUI objects that are being multiplexed.
3. `void setUIs(MenuBarUI[] uis)`: This method sets the array of MenuBarUI objects to be multiplexed.
4. `void uninstallUI(JComponent x)`: This method uninstalls the UI for a specific JComponent.
5. `void update(Graphics g, JComponent c)`: This method updates the specified JComponent with the given Graphics object.
================================================================

Sample: 11 MultiMenuItemUI
----------------------------------------------------------------
1. `MenuItemUI getUI(int a)`: This method returns the UI for the specified MenuItemUI.
2. `MenuItemUI[] getUIs()`: This method returns an array of all the MenuItemUIs.
3. `void setUIs(MenuItemUI[] uis)`: This method sets the array of MenuItemUIs.
4. `void update(Graphics g, JComponent c)`: This method updates the specified Graphics object for the given JComponent.
5. `boolean isFocusTraversable(JMenuItem a)`: This method returns true if the specified JMenuItem is focus traversable.
================================================================

Sample: 12 MultiOptionPaneUI
----------------------------------------------------------------
1. `ComponentUI createUI(JComponent x)`: This method creates a new UI object for the specified component.
2. `ComponentUI[] getUIs()`: This method returns an array of the UI objects contained in this MultiOptionPaneUI.
3. `ComponentUI getDefault()`: This method returns the default UI object for this MultiOptionPaneUI.
4. `ComponentUI getUI(JComponent x)`: This method returns the UI object for the specified component.
5. `void setUIs(ComponentUI[] uis)`: This method sets the array of UI objects for this MultiOptionPaneUI.
================================================================

Sample: 13 MultiPanelUI
----------------------------------------------------------------
1. `ComponentUI getUI(int a)`: This method returns the UI object for the specified component.
2. `ComponentUI[] getUIs()`: This method returns an array of the UI objects associated with this MultiPanelUI.
3. `void setUIs(ComponentUI[] uis)`: This method sets the UI objects for this MultiPanelUI.
4. `void update(Graphics g, JComponent c)`: This method updates the specified component's UI.
5. `void paint(Graphics g, JComponent c)`: This method paints the specified component's UI.
================================================================

Sample: 14 MultiPopupMenuUI
----------------------------------------------------------------
1. `PopupMenuUI getUI(int a)`: This method returns the UI for the specified index.
2. `int getUIsLength()`: This method returns the number of UIs in this MultiPopupMenuUI.
3. `ComponentUI getUIs(int a, ComponentUI[] uis)`: This method returns the UIs for the specified index.
4. `void setUIs(ComponentUI[] uis)`: This method sets the UIs for this MultiPopupMenuUI.
5. `void uninstallUI(JComponent c)`: This method uninstalls the UI for the specified component.
================================================================

Sample: 15 MultiProgressBarUI
----------------------------------------------------------------
1. `ProgressBarUI getUI(int a)`: This method returns the UI for the specified component.
2. `int getUIsLength()`: This method returns the number of UIs in this MultiProgressBarUI.
3. `void setUIs(ProgressBarUI[] uis)`: This method sets the array of ProgressBarUIs to be used.
4. `void resetUIs()`: This method resets the UIs to their default values.
5. `void setUI(ProgressBarUI ui)`: This method sets the UI to be used.
================================================================

Sample: 16 MultiRootPaneUI
----------------------------------------------------------------
1. `RootPaneUI getUI(JComponent a)`: This method returns the UI delegate for the specified component.
2. `RootPaneUI[] getUIs()`: This method returns an array of UI delegates.
3. `void setUIs(RootPaneUI[] uis)`: This method sets the array of UI delegates.
4. `void uninstallUI(JComponent a)`: This method uninstalls the UI delegate for the specified component.
5. `void update(Graphics g, JComponent c)`: This method updates the specified component's UI.
================================================================

Sample: 17 MultiScrollBarUI
----------------------------------------------------------------
1. `ScrollBarUI getUI(int a)`: This method returns the UI for the specified component.
2. `int getUIsLength()`: This method returns the number of UIs in this MultiScrollBarUI.
3. `void setUIs(ScrollBarUI[] uis)`: This method sets the array of UIs to be used by this MultiScrollBarUI.
4. `void syncAll(int a, int b)`: This method synchronizes all the UIs in this MultiScrollBarUI.
5. `void syncWithUI(int a, int b, ScrollBarUI ui)`: This method synchronizes the specified UI with the given parameters.
================================================================

Sample: 18 MultiScrollPaneUI
----------------------------------------------------------------
1. `ScrollPaneUI createUI(JComponent c)`: This method creates a new instance of MultiScrollPaneUI for a specified JComponent.
2. `ComponentUI[] getUIs()`: This method returns an array of ComponentUI objects representing the different look and feels to be combined.
3. `void setUIs(ComponentUI[] uis)`: This method sets the array of ComponentUI objects to be used for combining different look and feels.
4. `ComponentUI getUI(JComponent c)`: This method returns the ComponentUI object associated with a specified JComponent.
5. `boolean containsUI(ComponentUI ui)`: This method checks if a specific ComponentUI object is contained within the MultiScrollPaneUI.
================================================================

Sample: 19 MultiSeparatorUI
----------------------------------------------------------------
1. `SeparatorUI createUI(JComponent c)`: This method creates a new instance of the UI delegate for the specified component.
2. `int getUIsLength()`: This method returns the number of UI delegates in the multiplexing UI.
3. `SeparatorUI getUI(int i)`: This method returns the UI delegate at the specified index in the multiplexing UI.
4. `int getSelectedIndex(JComponent c)`: This method returns the index of the selected UI delegate for the specified component.
5. `void setSelectedIndex(JComponent c, int index)`: This method sets the selected UI delegate index for the specified component.
================================================================

Sample: 20 MultiSliderUI
----------------------------------------------------------------
1. `SliderUI getUI(int a)`: This method returns the UI for the specified component.
2. `int getUIsLength()`: This method returns the number of UIs in this MultiSliderUI.
3. `void setUIs(SliderUI[] uis)`: This method sets the UIs for this MultiSliderUI.
4. `void uninstallUI(JComponent c)`: This method uninstalls the UI for the specified component.
5. `void update(Graphics g, JComponent c)`: This method updates the specified component using the specified graphics.
================================================================

Sample: 21 MultiSpinnerUI
----------------------------------------------------------------
1. `SpinnerUI getUI(int a)`: This method returns the UI for the specified index.
2. `int getUIsLength()`: This method returns the number of UIs in the multiplexing UI.
3. `void setUIs(SpinnerUI[] uis)`: This method sets the array of SpinnerUIs to be used in the multiplexing UI.
4. `void update(Graphics g, JComponent c)`: This method updates the specified component with the given graphics context.
5. `void paint(Graphics g, JComponent c)`: This method paints the specified component with the given graphics context.
================================================================

Sample: 22 MultiSplitPaneUI
----------------------------------------------------------------
1. `ComponentUI createUI(JComponent x)`: This method creates a new instance of MultiSplitPaneUI for a specified JComponent.
2. `ComponentUI[] getUIs()`: This method returns an array of ComponentUI objects representing the different SplitPaneUIs being used.
3. `void setUIs(ComponentUI[] uis)`: This method sets the array of ComponentUI objects representing the different SplitPaneUIs to be used.
4. `void resetUIs()`: This method resets the array of ComponentUI objects to null.
5. `void setUI(ComponentUI ui)`: This method sets a single ComponentUI object to be used for the MultiSplitPaneUI.
================================================================

Sample: 23 MultiTabbedPaneUI
----------------------------------------------------------------
1. `TabbedPaneUI getUI(int a)`: This method returns the UI for the specified tab index.
2. `TabbedPaneUI[] getUIs()`: This method returns an array of all the UIs in use.
3. `int tabForCoordinate(JTabbedPane a, int b, int c)`: This method returns the tab index for the specified coordinates.
4. `int tabForCoordinate(JTabbedPane a, int b, int c, int d)`: This method returns the tab index for the specified coordinates and orientation.
5. `int tabForCoordinate(JTabbedPane a, int b, int c, int d, int e)`: This method returns the tab index for the specified coordinates, orientation, and index.
================================================================

Sample: 24 MultiTableHeaderUI
----------------------------------------------------------------
1. `TableHeaderUI getUI(int a)`: This method returns the UI for the specified index.
2. `TableHeaderUI[] getUIs()`: This method returns an array of all the UIs.
3. `void setUIs(TableHeaderUI[] uis)`: This method sets the array of UIs to be used.
4. `void uninstallUI(JComponent c)`: This method uninstalls the UI from the specified component.
5. `void update(Graphics g, JComponent c)`: This method updates the UI for the specified component.
================================================================

Sample: 25 MultiTableUI
----------------------------------------------------------------
1. `TableUI getUI(int a)`: This method returns the UI for the specified component.
2. `TableUI[] getUIs()`: This method returns an array of TableUIs.
3. `void setUIs(TableUI[] uis)`: This method sets the array of TableUIs.
4. `void update(Graphics g, JComponent c)`: This method updates the specified component with the given graphics context.
5. `boolean containsUI(UI ui)`: This method checks if the specified UI is contained in this MultiTableUI.
================================================================

Sample: 26 MultiTextUI
----------------------------------------------------------------
1. `TextUI getUI(int n)`: This method returns the TextUI object at the specified index.
2. `int getUICount()`: This method returns the number of TextUI objects in this MultiTextUI.
3. `void setUIs(TextUI[] uis)`: This method sets the array of TextUI objects to be used by this MultiTextUI.
4. `void update(Graphics g, JComponent c)`: This method updates the specified component using the provided graphics context.
5. `void paint(Graphics g, JComponent c)`: This method paints the specified component using the provided graphics context.
================================================================

Sample: 27 MultiToolBarUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a specified component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a specified component.
3. `ToolBarUI[] getUIs()`: This method returns an array of the UIs associated with this MultiToolBarUI.
4. `ComponentUI getUI(JComponent a)`: This method returns the UI for a specified component.
5. `int getUICount()`: This method returns the number of UIs associated with this MultiToolBarUI.
================================================================

Sample: 28 MultiToolTipUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a specified component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a specified component.
3. `ToolTipUI getToolTipUIs(int i)`: This method returns the ToolTipUI at the specified index.
4. `int getToolTipUIsCount()`: This method returns the number of ToolTipUIs in the multiplexing UI.
5. `void update(Graphics g, JComponent c)`: This method updates the UI for a specified component.
================================================================

Sample: 29 MultiTreeUI
----------------------------------------------------------------
1. `void completeUIInstall()`
2. `void completeUIUninstall()`
3. `TreeUI createUI(JComponent a)`
4. `void uninstallUI(JComponent a)`
5. `void update(Graphics a, JComponent b)`
================================================================

Sample: 30 MultiViewportUI
----------------------------------------------------------------
1. `void completeUIInstall()`
2. `void completeUIUninstall()`
3. `ComponentUI createUI(JComponent a)`
4. `void installUI(JComponent a)`
5. `void uninstallUI(JComponent a)`
================================================================

