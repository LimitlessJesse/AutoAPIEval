ClassName,Method,Return Type,Description
CallSite,dynamicInvoker(),abstract MethodHandle,Produces a method handle equivalent to an invokedynamic instruction which has been linked to this call site.
CallSite,getTarget(),abstract MethodHandle,"Returns the target method of the call site, according to the behavior defined by this call site's specific class."
CallSite,setTarget(MethodHandle newTarget),abstract void,"Updates the target method of this call site, according to the behavior defined by this call site's specific class."
CallSite,type(),MethodType,Returns the type of this call site's target.
ConstantCallSite,dynamicInvoker(),MethodHandle,Returns this call site's permanent target.
ConstantCallSite,getTarget(),MethodHandle,"Returns the target method of the call site, which behaves like a final field of the ConstantCallSite."
ConstantCallSite,setTarget(MethodHandle ignore),void,Always throws an UnsupportedOperationException.
LambdaMetafactory,"altMetafactory(MethodHandles.Lookup caller, String invokedName, MethodType invokedType, Object... args)",static CallSite,"Facilitates the creation of simple ""function objects"" that implement one or more interfaces by delegation to a provided MethodHandle, after appropriate type adaptation and partial evaluation of arguments."
LambdaMetafactory,"metafactory(MethodHandles.Lookup caller, String invokedName, MethodType invokedType, MethodType samMethodType, MethodHandle implMethod, MethodType instantiatedMethodType)",static CallSite,"Facilitates the creation of simple ""function objects"" that implement one or more interfaces by delegation to a provided MethodHandle, after appropriate type adaptation and partial evaluation of arguments."
MethodHandle,"asCollector(Class<?> arrayType, int arrayLength)",MethodHandle,"Makes an array-collecting method handle, which accepts a given number of trailing positional arguments and collects them into an array argument."
MethodHandle,asFixedArity(),MethodHandle,Makes a fixed arity method handle which is otherwise equivalent to the current method handle.
MethodHandle,"asSpreader(Class<?> arrayType, int arrayLength)",MethodHandle,"Makes an array-spreading method handle, which accepts a trailing array argument and spreads its elements as positional arguments."
MethodHandle,asType(MethodType newType),MethodHandle,Produces an adapter method handle which adapts the type of the current method handle to a new type.
MethodHandle,asVarargsCollector(Class<?> arrayType),MethodHandle,Makes a variable arity adapter which is able to accept any number of trailing positional arguments and collect them into an array argument.
MethodHandle,bindTo(Object x),MethodHandle,"Binds a value x to the first argument of a method handle, without invoking it."
MethodHandle,invoke(Object... args),Object,"Invokes the method handle, allowing any caller type descriptor, and optionally performing conversions on arguments and return values."
MethodHandle,invokeExact(Object... args),Object,"Invokes the method handle, allowing any caller type descriptor, but requiring an exact type match."
MethodHandle,invokeWithArguments(List<?> arguments),Object,"Performs a variable arity invocation, passing the arguments in the given array to the method handle, as if via an inexact invoke from a call site which mentions only the type Object, and whose arity is the length of the argument array."
MethodHandle,invokeWithArguments(Object... arguments),Object,"Performs a variable arity invocation, passing the arguments in the given list to the method handle, as if via an inexact invoke from a call site which mentions only the type Object, and whose arity is the length of the argument list."
MethodHandle,isVarargsCollector(),boolean,Determines if this method handle supports variable arity calls.
MethodHandle,toString(),String,"Returns a string representation of the method handle, starting with the string ""MethodHandle"" and ending with the string representation of the method handle's type."
MethodHandle,type(),MethodType,Reports the type of this method handle.
MethodHandleProxies,"asInterfaceInstance(Class<T> intfc, MethodHandle target)",static <T> T,Produces an instance of the given single-method interface which redirects its calls to the given method handle.
MethodHandleProxies,isWrapperInstance(Object x),static boolean,Determines if the given object was produced by a call to asInterfaceInstance.
MethodHandleProxies,wrapperInstanceTarget(Object x),static MethodHandle,Produces or recovers a target method handle which is behaviorally equivalent to the unique method of this wrapper instance.
MethodHandleProxies,wrapperInstanceType(Object x),static Class<?>,Recovers the unique single-method interface type for which this wrapper instance was created.
MethodHandles,arrayElementGetter(Class<?> arrayClass),static MethodHandle,Produces a method handle giving read access to elements of an array.
MethodHandles,arrayElementSetter(Class<?> arrayClass),static MethodHandle,Produces a method handle giving write access to elements of an array.
MethodHandles,"catchException(MethodHandle target, Class<? extends Throwable> exType, MethodHandle handler)",static MethodHandle,"Makes a method handle which adapts a target method handle, by running it inside an exception handler."
MethodHandles,"collectArguments(MethodHandle target, int pos, MethodHandle filter)",static MethodHandle,Adapts a target method handle by pre-processing a sub-sequence of its arguments with a filter (another method handle).
MethodHandles,"constant(Class<?> type, Object value)",static MethodHandle,Produces a method handle of the requested return type which returns the given constant value every time it is invoked.
MethodHandles,"dropArguments(MethodHandle target, int pos, Class<?>... valueTypes)",static MethodHandle,Produces a method handle which will discard some dummy arguments before calling some other specified target method handle.
MethodHandles,"dropArguments(MethodHandle target, int pos, List<Class<?>> valueTypes)",static MethodHandle,Produces a method handle which will discard some dummy arguments before calling some other specified target method handle.
MethodHandles,exactInvoker(MethodType type),static MethodHandle,"Produces a special invoker method handle which can be used to invoke any method handle of the given type, as if by invokeExact."
MethodHandles,"explicitCastArguments(MethodHandle target, MethodType newType)",static MethodHandle,Produces a method handle which adapts the type of the given method handle to a new type by pairwise argument and return type conversion.
MethodHandles,"filterArguments(MethodHandle target, int pos, MethodHandle... filters)",static MethodHandle,"Adapts a target method handle by pre-processing one or more of its arguments, each with its own unary filter function, and then calling the target with each pre-processed argument replaced by the result of its corresponding filter function."
MethodHandles,"filterReturnValue(MethodHandle target, MethodHandle filter)",static MethodHandle,Adapts a target method handle by post-processing its return value (if any) with a filter (another method handle).
MethodHandles,"foldArguments(MethodHandle target, MethodHandle combiner)",static MethodHandle,"Adapts a target method handle by pre-processing some of its arguments, and then calling the target with the result of the pre-processing, inserted into the original sequence of arguments."
MethodHandles,"guardWithTest(MethodHandle test, MethodHandle target, MethodHandle fallback)",static MethodHandle,"Makes a method handle which adapts a target method handle, by guarding it with a test, a boolean-valued method handle."
MethodHandles,identity(Class<?> type),static MethodHandle,Produces a method handle which returns its sole argument when invoked.
MethodHandles,"insertArguments(MethodHandle target, int pos, Object... values)",static MethodHandle,Provides a target method handle with one or more bound arguments in advance of the method handle's invocation.
MethodHandles,invoker(MethodType type),static MethodHandle,"Produces a special invoker method handle which can be used to invoke any method handle compatible with the given type, as if by invoke."
MethodHandles,lookup(),static MethodHandles.Lookup,Returns a lookup object with full capabilities to emulate all supported bytecode behaviors of the caller.
MethodHandles,"permuteArguments(MethodHandle target, MethodType newType, int... reorder)",static MethodHandle,"Produces a method handle which adapts the calling sequence of the given method handle to a new type, by reordering the arguments."
MethodHandles,publicLookup(),static MethodHandles.Lookup,Returns a lookup object which is trusted minimally.
MethodHandles,"reflectAs(Class<T> expected, MethodHandle target)",static <T extends Member>T,"Performs an unchecked ""crack"" of a direct method handle."
MethodHandles,"spreadInvoker(MethodType type, int leadingArgCount)",static MethodHandle,"Produces a method handle which will invoke any method handle of the given type, with a given number of trailing arguments replaced by a single trailing Object[] array."
MethodHandles,"throwException(Class<?> returnType, Class<? extends Throwable> exType)",static MethodHandle,Produces a method handle which will throw exceptions of the given exType.
MethodHandles.Lookup,"bind(Object receiver, String name, MethodType type)",MethodHandle,Produces an early-bound method handle for a non-static method.
MethodHandles.Lookup,"findConstructor(Class<?> refc, MethodType type)",MethodHandle,"Produces a method handle which creates an object and initializes it, using the constructor of the specified type."
MethodHandles.Lookup,"findGetter(Class<?> refc, String name, Class<?> type)",MethodHandle,Produces a method handle giving read access to a non-static field.
MethodHandles.Lookup,"findSetter(Class<?> refc, String name, Class<?> type)",MethodHandle,Produces a method handle giving write access to a non-static field.
MethodHandles.Lookup,"findSpecial(Class<?> refc, String name, MethodType type, Class<?> specialCaller)",MethodHandle,Produces an early-bound method handle for a virtual method.
MethodHandles.Lookup,"findStatic(Class<?> refc, String name, MethodType type)",MethodHandle,Produces a method handle for a static method.
MethodHandles.Lookup,"findStaticGetter(Class<?> refc, String name, Class<?> type)",MethodHandle,Produces a method handle giving read access to a static field.
MethodHandles.Lookup,"findStaticSetter(Class<?> refc, String name, Class<?> type)",MethodHandle,Produces a method handle giving write access to a static field.
MethodHandles.Lookup,"findVirtual(Class<?> refc, String name, MethodType type)",MethodHandle,Produces a method handle for a virtual method.
MethodHandles.Lookup,in(Class<?> requestedLookupClass),MethodHandles.Lookup,Creates a lookup on the specified new lookup class.
MethodHandles.Lookup,lookupClass(),Class<?>,Tells which class is performing the lookup.
MethodHandles.Lookup,lookupModes(),int,Tells which access-protection classes of members this lookup object can produce.
MethodHandles.Lookup,revealDirect(MethodHandle target),MethodHandleInfo,Cracks a direct method handle created by this lookup object or a similar one.
MethodHandles.Lookup,toString(),String,Displays the name of the class from which lookups are to be made.
MethodHandles.Lookup,unreflect(Method m),MethodHandle,"Makes a direct method handle to m, if the lookup class has permission."
MethodHandles.Lookup,unreflectConstructor(Constructor<?> c),MethodHandle,Produces a method handle for a reflected constructor.
MethodHandles.Lookup,unreflectGetter(Field f),MethodHandle,Produces a method handle giving read access to a reflected field.
MethodHandles.Lookup,unreflectSetter(Field f),MethodHandle,Produces a method handle giving write access to a reflected field.
MethodHandles.Lookup,"unreflectSpecial(Method m, Class<?> specialCaller)",MethodHandle,Produces a method handle for a reflected method.
MethodType,appendParameterTypes(Class<?>... ptypesToInsert),MethodType,Finds or creates a method type with additional parameter types.
MethodType,appendParameterTypes(List<Class<?>> ptypesToInsert),MethodType,Finds or creates a method type with additional parameter types.
MethodType,"changeParameterType(int num, Class<?> nptype)",MethodType,Finds or creates a method type with a single different parameter type.
MethodType,changeReturnType(Class<?> nrtype),MethodType,Finds or creates a method type with a different return type.
MethodType,"dropParameterTypes(int start, int end)",MethodType,Finds or creates a method type with some parameter types omitted.
MethodType,equals(Object x),boolean,Compares the specified object with this type for equality.
MethodType,erase(),MethodType,Erases all reference types to Object.
MethodType,"fromMethodDescriptorString(String descriptor, ClassLoader loader)",static MethodType,"Finds or creates an instance of a method type, given the spelling of its bytecode descriptor."
MethodType,generic(),MethodType,"Converts all types, both reference and primitive, to Object."
MethodType,genericMethodType(int objectArgCount),static MethodType,Finds or creates a method type whose components are all Object.
MethodType,"genericMethodType(int objectArgCount, boolean finalArray)",static MethodType,Finds or creates a method type whose components are Object with an optional trailing Object[] array.
MethodType,hashCode(),int,Returns the hash code value for this method type.
MethodType,hasPrimitives(),boolean,Reports if this type contains a primitive argument or return value.
MethodType,hasWrappers(),boolean,Reports if this type contains a wrapper argument or return value.
MethodType,"insertParameterTypes(int num, Class<?>... ptypesToInsert)",MethodType,Finds or creates a method type with additional parameter types.
MethodType,"insertParameterTypes(int num, List<Class<?>> ptypesToInsert)",MethodType,Finds or creates a method type with additional parameter types.
MethodType,methodType(Class<?> rtype),static MethodType,Finds or creates a method type with the given components.
MethodType,"methodType(Class<?> rtype, Class<?> ptype0)",static MethodType,Finds or creates a method type with the given components.
MethodType,"methodType(Class<?> rtype, Class<?>[] ptypes)",static MethodType,Finds or creates an instance of the given method type.
MethodType,"methodType(Class<?> rtype, Class<?> ptype0, Class<?>... ptypes)",static MethodType,Finds or creates a method type with the given components.
MethodType,"methodType(Class<?> rtype, List<Class<?>> ptypes)",static MethodType,Finds or creates a method type with the given components.
MethodType,"methodType(Class<?> rtype, MethodType ptypes)",static MethodType,Finds or creates a method type with the given components.
MethodType,parameterArray(),Class<?>[],Presents the parameter types as an array (a convenience method).
MethodType,parameterCount(),int,Returns the number of parameter types in this method type.
MethodType,parameterList(),List<Class<?>>,Presents the parameter types as a list (a convenience method).
MethodType,parameterType(int num),Class<?>,"Returns the parameter type at the specified index, within this method type."
MethodType,returnType(),Class<?>,Returns the return type of this method type.
MethodType,toMethodDescriptorString(),String,Produces a bytecode descriptor representation of the method type.
MethodType,toString(),String,"Returns a string representation of the method type, of the form ""(PT0,PT1...)RT""."
MethodType,unwrap(),MethodType,Converts all wrapper types to their corresponding primitive types.
MethodType,wrap(),MethodType,Converts all primitive types to their corresponding wrapper types.
MutableCallSite,dynamicInvoker(),MethodHandle,Produces a method handle equivalent to an invokedynamic instruction which has been linked to this call site.
MutableCallSite,getTarget(),MethodHandle,"Returns the target method of the call site, which behaves like a normal field of the MutableCallSite."
MutableCallSite,setTarget(MethodHandle newTarget),void,"Updates the target method of this call site, as a normal variable."
MutableCallSite,syncAll(MutableCallSite[] sites),static void,"Performs a synchronization operation on each call site in the given array, forcing all other threads to throw away any cached values previously loaded from the target of any of the call sites."
SerializedLambda,getCapturedArg(int i),Object,Get a dynamic argument to the lambda capture site.
SerializedLambda,getCapturedArgCount(),int,Get the count of dynamic arguments to the lambda capture site.
SerializedLambda,getCapturingClass(),String,Get the name of the class that captured this lambda.
SerializedLambda,getFunctionalInterfaceClass(),String,Get the name of the invoked type to which this lambda has been converted
SerializedLambda,getFunctionalInterfaceMethodName(),String,Get the name of the primary method for the functional interface to which this lambda has been converted.
SerializedLambda,getFunctionalInterfaceMethodSignature(),String,Get the signature of the primary method for the functional interface to which this lambda has been converted.
SerializedLambda,getImplClass(),String,Get the name of the class containing the implementation method.
SerializedLambda,getImplMethodKind(),int,Get the method handle kind (see MethodHandleInfo) of the implementation method.
SerializedLambda,getImplMethodName(),String,Get the name of the implementation method.
SerializedLambda,getImplMethodSignature(),String,Get the signature of the implementation method.
SerializedLambda,getInstantiatedMethodType(),String,Get the signature of the primary functional interface method after type variables are substituted with their instantiation from the capture site.
SerializedLambda,toString(),String,Returns a string representation of the object.
SwitchPoint,"guardWithTest(MethodHandle target, MethodHandle fallback)",MethodHandle,Returns a method handle which always delegates either to the target or the fallback.
SwitchPoint,hasBeenInvalidated(),boolean,Determines if this switch point has been invalidated yet.
SwitchPoint,invalidateAll(SwitchPoint[] switchPoints),static void,Sets all of the given switch points into the invalid state.
VolatileCallSite,dynamicInvoker(),MethodHandle,Produces a method handle equivalent to an invokedynamic instruction which has been linked to this call site.
VolatileCallSite,getTarget(),MethodHandle,"Returns the target method of the call site, which behaves like a volatile field of the VolatileCallSite."
VolatileCallSite,setTarget(MethodHandle newTarget),void,"Updates the target method of this call site, as a volatile variable."
