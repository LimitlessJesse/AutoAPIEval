Sample: 0 CallSite
----------------------------------------------------------------
1. `MethodHandle getTarget()`: This method returns the target MethodHandle held by the CallSite.
2. `void setTarget(MethodHandle target)`: This method sets the target MethodHandle for the CallSite.
3. `MethodType type()`: This method returns the type of the target MethodHandle.
4. `MethodHandle dynamicInvoker()`: This method returns a MethodHandle that can be used to invoke the target MethodHandle with the same arguments.
5. `void syncAll(CallSite[] sites)`: This method synchronizes all CallSites in the given array.
================================================================

Sample: 1 ConstantCallSite
----------------------------------------------------------------
1. `MethodHandle dynamicInvoker()`: Returns the MethodHandle for the target of this ConstantCallSite.
2. `Object getTarget()`: Returns the target of this ConstantCallSite.
3. `CallSite dynamicInvoker()`: Returns the CallSite for the target of this ConstantCallSite.
4. `void setTarget(MethodHandle newTarget)`: Sets a new target for this ConstantCallSite.
5. `void setTargetNormal(MethodHandle newTarget)`: Sets a new target for this ConstantCallSite, which is considered to be a normal target.
================================================================

Sample: 2 LambdaMetafactory
----------------------------------------------------------------
1. CallSite altMetafactory()
   - Return type: CallSite
   - Parameters: None

2. MethodHandle altMetafactory(MethodHandles.Lookup caller, String invokedName, MethodType invokedType, Object... args)
   - Return type: MethodHandle
   - Parameters: MethodHandles.Lookup caller, String invokedName, MethodType invokedType, Object... args

3. MethodHandle altMetafactory(MethodHandles.Lookup caller, String invokedName, MethodType invokedType, Object... args)
   - Return type: MethodHandle
   - Parameters: MethodHandles.Lookup caller, String invokedName, MethodType invokedType, Object... args

4. MethodHandle altMetafactory(MethodHandles.Lookup caller, String invokedName, MethodType invokedType, Object... args)
   - Return type: MethodHandle
   - Parameters: MethodHandles.Lookup caller, String invokedName, MethodType invokedType, Object... args

5. MethodHandle altMetafactory(MethodHandles.Lookup caller, String invokedName, MethodType invokedType, Object... args)
   - Return type: MethodHandle
   - Parameters: MethodHandles.Lookup caller, String invokedName, MethodType invokedType, Object... args
================================================================

Sample: 3 MethodHandle
----------------------------------------------------------------
1. `Object invoke(Object... args)`: This method invokes the method handle, passing the specified arguments.
2. `MethodType type()`: This method returns the type of the method handle.
3. `MethodHandle asType(MethodType newType)`: This method adjusts the type of the method handle to the new type.
4. `MethodHandle bindTo(Object value)`: This method creates a method handle which, when invoked, will ignore its first argument and invoke the original method handle with the specified value bound as the first argument.
5. `MethodHandle dropArguments(int pos, Class<?>... types)`: This method returns a method handle which, when invoked, will ignore a specified number of arguments at the specified position.
================================================================

Sample: 4 MethodHandleProxies
----------------------------------------------------------------
1. `Object asInterfaceInstance(Class<?> intfc, MethodHandle target)`: This method returns a single-method interface instance that delegates to the given method handle.
2. `MethodHandle asCollector(Class<?> arrayType, int arrayLength)`: This method returns a method handle which collects arguments into an array before calling another method handle.
3. `MethodHandle asVarargsCollector(Class<?> arrayType)`: This method returns a method handle which collects arguments into an array before calling another method handle, with variable arity.
4. `MethodHandle filterArguments(int pos, MethodHandle filter, MethodHandle target)`: This method returns a method handle which filters arguments before calling another method handle.
5. `MethodHandle foldArguments(MethodHandle target, MethodHandle combiner)`: This method returns a method handle which combines arguments before calling another method handle.
================================================================

Sample: 5 MethodHandles
----------------------------------------------------------------
1. `MethodHandle asType(MethodType newType)`: This method returns a new method handle which is a view of the original with a different type.
2. `MethodHandle bindTo(Object x)`: This method returns a new method handle which is a copy of the original with the leading argument bound to the specified object.
3. `MethodHandle dropArguments(int pos, Class<?>... types)`: This method returns a new method handle which is a copy of the original with the specified arguments removed.
4. `MethodHandle filterArguments(int pos, MethodHandle filter, MethodHandle... filters)`: This method returns a new method handle which is a copy of the original with the specified arguments filtered by the given filter method handles.
5. `MethodHandle asCollector(Class<?> arrayType, int arrayLength)`: This method returns a new method handle which is a copy of the original with the trailing arguments collected into an array of the specified type and length.
================================================================

Sample: 6 MethodHandles.Lookup
----------------------------------------------------------------
1. MethodHandle findStatic(Class<?> refc, String name, MethodType type)
   - Return type: MethodHandle
   - Parameters: Class<?> refc, String name, MethodType type

2. MethodHandle findVirtual(Class<?> refc, String name, MethodType type)
   - Return type: MethodHandle
   - Parameters: Class<?> refc, String name, MethodType type

3. MethodHandle findSpecial(Class<?> refc, String name, MethodType type, Class<?> specialCaller)
   - Return type: MethodHandle
   - Parameters: Class<?> refc, String name, MethodType type, Class<?> specialCaller

4. MethodHandle findConstructor(Class<?> refc, MethodType type)
   - Return type: MethodHandle
   - Parameters: Class<?> refc, MethodType type

5. MethodHandle unreflectConstructor(Constructor<?> constructor)
   - Return type: MethodHandle
   - Parameters: Constructor<?> constructor
================================================================

Sample: 7 MethodType
----------------------------------------------------------------
1. `MethodType genericMethodType(Class<?>... ptypes)`: This method creates a method type with the given parameter types and a return type of Object.
2. `MethodType changeParameterType(int num, Class<?> nptype)`: This method creates a new method type by replacing the parameter type at the specified index with the given parameter type.
3. `MethodType changeReturnType(Class<?> nrtype)`: This method creates a new method type by replacing the return type with the given return type.
4. `MethodType dropParameterTypes(int start, int end)`: This method creates a new method type by dropping the parameter types within the specified range.
5. `MethodType insertParameterTypes(int pos, Class<?>... ptypes)`: This method creates a new method type by inserting the given parameter types at the specified position.
================================================================

Sample: 8 MutableCallSite
----------------------------------------------------------------
1. `void setTarget(MethodHandle newTarget)`: This method sets a new target for the MutableCallSite.
2. `MethodHandle getTarget()`: This method returns the current target of the MutableCallSite.
3. `void syncAll(MutableCallSite[] sites)`: This method synchronizes all MutableCallSites in the given array with their current target values.
4. `void syncWith(MutableCallSite other)`: This method synchronizes the target of this MutableCallSite with the target of another MutableCallSite.
5. `void setTargetNormal(MethodHandle newTarget)`: This method sets a new target for the MutableCallSite, but does not change the target if it is currently set to a specific value.
================================================================

Sample: 9 SerializedLambda
----------------------------------------------------------------
1. `String getImplMethodName()`: Returns the name of the method in the functional interface that the lambda expression implements.
2. `String getImplMethodSignature()`: Returns the signature of the method in the functional interface that the lambda expression implements.
3. `String getImplMethodKind()`: Returns the kind of the method in the functional interface that the lambda expression implements.
4. `Object getCapturedArg(int argIndex)`: Returns the captured argument at the specified index.
5. `Object getCapturedArg(String argName)`: Returns the captured argument with the specified name.
================================================================

Sample: 10 SwitchPoint
----------------------------------------------------------------
1. `SwitchPoint invalidateAndSwitch()`: This method invalidates the current SwitchPoint and returns a new SwitchPoint for use in subsequent transitions.
2. `boolean hasBeenInvalidated()`: This method returns true if the SwitchPoint has been invalidated.
3. `void invalidate()`: This method invalidates the SwitchPoint, causing subsequent transitions to occur.
4. `boolean isValid()`: This method returns true if the SwitchPoint is currently valid.
5. `void guardWithTest(MethodHandle fallback, MethodHandle target)`: This method guards the SwitchPoint with the specified test and target MethodHandles.
================================================================

Sample: 11 VolatileCallSite
----------------------------------------------------------------
1. `void setTarget(MethodHandle target)`: This method sets a new target for the VolatileCallSite.
2. `MethodHandle getTarget()`: This method returns the current target of the VolatileCallSite.
3. `void setTargetNormal(MethodHandle target)`: This method sets a new target for the VolatileCallSite without volatile semantics.
4. `void setTargetVolatile(MethodHandle target)`: This method sets a new target for the VolatileCallSite with volatile semantics.
5. `void syncAll(VolatileCallSite[] sites)`: This method synchronizes all the given VolatileCallSites.
================================================================

