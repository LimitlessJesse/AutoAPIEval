Sample: 0 Adler32
----------------------------------------------------------------
1. `void update(byte[] buf, int off, int len)`: This method updates the checksum with the bytes from the specified array.
2. `void update(int b)`: This method updates the checksum with the specified byte.
3. `void reset()`: This method resets the checksum to its initial value.
4. `long getValue()`: This method returns the current checksum value.
5. `void update(ByteBuffer buf)`: This method updates the checksum with the bytes from the specified ByteBuffer.
================================================================

Sample: 1 CheckedInputStream
----------------------------------------------------------------
1. `int read()`: This method reads the next byte of data from the input stream.
2. `int read(byte[] b, int off, int len)`: This method reads up to len bytes of data from the input stream into an array of bytes.
3. `long skip(long n)`: This method skips over and discards n bytes of data from the input stream.
4. `Checksum getChecksum()`: This method returns the Checksum object associated with this CheckedInputStream.
5. `void close()`: This method closes the input stream.
================================================================

Sample: 2 CheckedOutputStream
----------------------------------------------------------------
1. `void write(int b)`: This method writes the specified byte to the output stream.
2. `void write(byte[] b, int off, int len)`: This method writes len bytes from the specified byte array starting at offset off to the output stream.
3. `void flush()`: This method flushes the output stream.
4. `Checksum getChecksum()`: This method returns the checksum value.
5. `void setChecksum(Checksum checksum)`: This method sets the checksum object to use for computing checksums.
================================================================

Sample: 3 CRC32
----------------------------------------------------------------
1. `void update(byte[] buf, int off, int len)`: This method updates the CRC-32 checksum with the specified byte array.
2. `void update(int b)`: This method updates the CRC-32 checksum with the specified byte.
3. `long getValue()`: This method returns the current value of the CRC-32 checksum.
4. `void reset()`: This method resets the CRC-32 checksum to its initial value.
5. `void update(ByteBuffer buffer)`: This method updates the CRC-32 checksum with the bytes from the specified ByteBuffer.
================================================================

Sample: 4 Deflater
----------------------------------------------------------------
1. `void setInput(byte[] input)`: This method sets the input data to be compressed.
2. `void finish()`: This method indicates that compression should stop with the current contents of the input buffer.
3. `int deflate(byte[] output)`: This method compresses data into the output buffer.
4. `void setLevel(int level)`: This method sets the compression level to be used.
5. `void setStrategy(int strategy)`: This method sets the compression strategy to be used.
================================================================

Sample: 5 DeflaterInputStream
----------------------------------------------------------------
1. `int read(byte[] b)`: This method reads compressed data into a byte array.
2. `int read(byte[] b, int off, int len)`: This method reads compressed data into a byte array starting at the specified offset and up to the specified length.
3. `int read()`: This method reads a single byte of compressed data.
4. `void close()`: This method closes the input stream.
5. `int available()`: This method returns the number of bytes that can be read from the input stream without blocking.
================================================================

Sample: 6 DeflaterOutputStream
----------------------------------------------------------------
1. `void write(byte[] b, int off, int len)`: This method writes compressed data to the output stream.
2. `void finish()`: This method finishes writing compressed data to the output stream without closing it.
3. `void flush()`: This method flushes the compressed data to the output stream.
4. `void setLevel(int level)`: This method sets the compression level for the output stream.
5. `void setStrategy(int strategy)`: This method sets the compression strategy for the output stream.
================================================================

Sample: 7 GZIPInputStream
----------------------------------------------------------------
1. `int read(byte[] buf, int off, int len)`: This method reads compressed data into a byte array.
2. `void close()`: This method closes the input stream.
3. `int available()`: This method returns the number of bytes that can be read without blocking.
4. `long skip(long n)`: This method skips over and discards n bytes of data from the input stream.
5. `void finish()`: This method finishes writing compressed data to the output stream.
================================================================

Sample: 8 GZIPOutputStream
----------------------------------------------------------------
1. `void finish()`: This method finishes writing the compressed data to the output stream without closing the underlying stream.
2. `void write(byte[] buf, int off, int len)`: This method writes compressed data to the output stream from the specified byte array.
3. `void setLevel(int level)`: This method sets the compression level for the output stream.
4. `void setComment(String comment)`: This method sets the optional comment string for the output stream.
5. `void setMethod(int method)`: This method sets the compression method for the output stream.
================================================================

Sample: 9 Inflater
----------------------------------------------------------------
1. `void setInput(byte[] b, int off, int len)`: This method sets input data for decompression.
2. `int inflate(byte[] b, int off, int len)`: This method decompresses data into the specified buffer.
3. `boolean needsInput()`: This method returns true if no input data is available for decompression.
4. `boolean finished()`: This method returns true if the end of the compressed data stream has been reached.
5. `int getRemaining()`: This method returns the number of uncompressed bytes remaining.
================================================================

Sample: 10 InflaterInputStream
----------------------------------------------------------------
1. `int read(byte[] b)`: This method reads compressed data into a byte array.
2. `int read(byte[] b, int off, int len)`: This method reads compressed data into a byte array with specified offset and length.
3. `void setDictionary(byte[] b)`: This method sets the preset dictionary for InflaterInputStream.
4. `boolean needsInput()`: This method returns true if input data is needed to fill the input buffer.
5. `void setInput(byte[] b)`: This method sets the input data for decompression.
================================================================

Sample: 11 InflaterOutputStream
----------------------------------------------------------------
1. `void write(byte[] b, int off, int len)`: This method writes compressed data to the output stream.
2. `void finish()`: This method finishes writing compressed data to the output stream.
3. `void flush()`: This method flushes the output stream.
4. `void setDictionary(byte[] b)`: This method sets the dictionary to be used for compression.
5. `void setLevel(int level)`: This method sets the compression level for the output stream.
================================================================

Sample: 12 ZipEntry
----------------------------------------------------------------
1. `String getName()`: This method returns the name of the ZIP file entry.
2. `long getSize()`: This method returns the uncompressed size of the ZIP file entry.
3. `long getCompressedSize()`: This method returns the compressed size of the ZIP file entry.
4. `long getTime()`: This method returns the last modification time of the ZIP file entry.
5. `boolean isDirectory()`: This method returns true if the ZIP file entry represents a directory.
================================================================

Sample: 13 ZipFile
----------------------------------------------------------------
1. `ZipEntry getEntry(String name)`: This method returns the ZipEntry for the specified entry name.
2. `Enumeration<? extends ZipEntry> entries()`: This method returns an enumeration of all the ZipEntries in the ZipFile.
3. `InputStream getInputStream(ZipEntry entry)`: This method returns an InputStream for reading the contents of the specified ZipEntry.
4. `void close()`: This method closes the ZipFile and releases any system resources associated with it.
5. `int size()`: This method returns the number of entries in the ZipFile.
================================================================

Sample: 14 ZipInputStream
----------------------------------------------------------------
1. `ZipEntry getNextEntry()`: This method returns the next ZIP file entry or null if there are no more entries.
2. `void closeEntry()`: This method closes the current ZIP entry and positions the stream for reading the next entry.
3. `int read(byte[] b, int off, int len)`: This method reads up to len bytes of data from the input stream into an array of bytes.
4. `void close()`: This method closes the input stream.
5. `int available()`: This method returns the number of bytes that can be read from the current ZIP entry without blocking.
================================================================

Sample: 15 ZipOutputStream
----------------------------------------------------------------
1. `void putNextEntry(ZipEntry e)`: This method positions the stream to the start of the specified ZIP file entry.
2. `void closeEntry()`: This method closes the current ZIP entry and positions the stream for writing the next entry.
3. `void setComment(String comment)`: This method sets the ZIP file comment.
4. `void setMethod(int method)`: This method sets the compression method for writing entries in the ZIP file.
5. `void setLevel(int level)`: This method sets the compression level for writing entries in the ZIP file.
================================================================

