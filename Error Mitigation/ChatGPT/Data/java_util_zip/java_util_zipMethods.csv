ClassName,Method,Return Type,Description
Adler32,getValue(),long,Returns the checksum value.
Adler32,reset(),void,Resets the checksum to initial value.
Adler32,update(byte[] b),void,Updates the checksum with the specified array of bytes.
Adler32,"update(byte[] b, int off, int len)",void,Updates the checksum with the specified array of bytes.
Adler32,update(ByteBuffer buffer),void,Updates the checksum with the bytes from the specified buffer.
Adler32,update(int b),void,Updates the checksum with the specified byte (the low eight bits of the argument b).
CheckedInputStream,getChecksum(),Checksum,Returns the Checksum for this input stream.
CheckedInputStream,read(),int,Reads a byte.
CheckedInputStream,"read(byte[] buf, int off, int len)",int,Reads into an array of bytes.
CheckedInputStream,skip(long n),long,Skips specified number of bytes of input.
CheckedOutputStream,getChecksum(),Checksum,Returns the Checksum for this output stream.
CheckedOutputStream,"write(byte[] b, int off, int len)",void,Writes an array of bytes.
CheckedOutputStream,write(int b),void,Writes a byte.
CRC32,getValue(),long,Returns CRC-32 value.
CRC32,reset(),void,Resets CRC-32 to initial value.
CRC32,update(byte[] b),void,Updates the CRC-32 checksum with the specified array of bytes.
CRC32,"update(byte[] b, int off, int len)",void,Updates the CRC-32 checksum with the specified array of bytes.
CRC32,update(ByteBuffer buffer),void,Updates the checksum with the bytes from the specified buffer.
CRC32,update(int b),void,Updates the CRC-32 checksum with the specified byte (the low eight bits of the argument b).
Deflater,deflate(byte[] b),int,Compresses the input data and fills specified buffer with compressed data.
Deflater,"deflate(byte[] b, int off, int len)",int,Compresses the input data and fills specified buffer with compressed data.
Deflater,"deflate(byte[] b, int off, int len, int flush)",int,Compresses the input data and fills the specified buffer with compressed data.
Deflater,end(),void,Closes the compressor and discards any unprocessed input.
Deflater,finalize(),protected void,Closes the compressor when garbage is collected.
Deflater,finish(),void,"When called, indicates that compression should end with the current contents of the input buffer."
Deflater,finished(),boolean,Returns true if the end of the compressed data output stream has been reached.
Deflater,getAdler(),int,Returns the ADLER-32 value of the uncompressed data.
Deflater,getBytesRead(),long,Returns the total number of uncompressed bytes input so far.
Deflater,getBytesWritten(),long,Returns the total number of compressed bytes output so far.
Deflater,getTotalIn(),int,Returns the total number of uncompressed bytes input so far.
Deflater,getTotalOut(),int,Returns the total number of compressed bytes output so far.
Deflater,needsInput(),boolean,Returns true if the input data buffer is empty and setInput() should be called in order to provide more input.
Deflater,reset(),void,Resets deflater so that a new set of input data can be processed.
Deflater,setDictionary(byte[] b),void,Sets preset dictionary for compression.
Deflater,"setDictionary(byte[] b, int off, int len)",void,Sets preset dictionary for compression.
Deflater,setInput(byte[] b),void,Sets input data for compression.
Deflater,"setInput(byte[] b, int off, int len)",void,Sets input data for compression.
Deflater,setLevel(int level),void,Sets the compression level to the specified value.
Deflater,setStrategy(int strategy),void,Sets the compression strategy to the specified value.
DeflaterInputStream,available(),int,"Returns 0 after EOF has been reached, otherwise always return 1."
DeflaterInputStream,close(),void,"Closes this input stream and its underlying input stream, discarding any pending uncompressed data."
DeflaterInputStream,mark(int limit),void,This operation is not supported.
DeflaterInputStream,markSupported(),boolean,Always returns false because this input stream does not support the mark() and reset() methods.
DeflaterInputStream,read(),int,Reads a single byte of compressed data from the input stream.
DeflaterInputStream,"read(byte[] b, int off, int len)",int,Reads compressed data into a byte array.
DeflaterInputStream,reset(),void,This operation is not supported.
DeflaterInputStream,skip(long n),long,Skips over and discards data from the input stream.
DeflaterOutputStream,close(),void,Writes remaining compressed data to the output stream and closes the underlying stream.
DeflaterOutputStream,deflate(),protected void,Writes next block of compressed data to the output stream.
DeflaterOutputStream,finish(),void,Finishes writing compressed data to the output stream without closing the underlying stream.
DeflaterOutputStream,flush(),void,Flushes the compressed output stream.
DeflaterOutputStream,"write(byte[] b, int off, int len)",void,Writes an array of bytes to the compressed output stream.
DeflaterOutputStream,write(int b),void,Writes a byte to the compressed output stream.
GZIPInputStream,close(),void,Closes this input stream and releases any system resources associated with the stream.
GZIPInputStream,"read(byte[] buf, int off, int len)",int,Reads uncompressed data into an array of bytes.
GZIPOutputStream,finish(),void,Finishes writing compressed data to the output stream without closing the underlying stream.
GZIPOutputStream,"write(byte[] buf, int off, int len)",void,Writes array of bytes to the compressed output stream.
Inflater,end(),void,Closes the decompressor and discards any unprocessed input.
Inflater,finalize(),protected void,Closes the decompressor when garbage is collected.
Inflater,finished(),boolean,Returns true if the end of the compressed data stream has been reached.
Inflater,getAdler(),int,Returns the ADLER-32 value of the uncompressed data.
Inflater,getBytesRead(),long,Returns the total number of compressed bytes input so far.
Inflater,getBytesWritten(),long,Returns the total number of uncompressed bytes output so far.
Inflater,getRemaining(),int,Returns the total number of bytes remaining in the input buffer.
Inflater,getTotalIn(),int,Returns the total number of compressed bytes input so far.
Inflater,getTotalOut(),int,Returns the total number of uncompressed bytes output so far.
Inflater,inflate(byte[] b),int,Uncompresses bytes into specified buffer.
Inflater,"inflate(byte[] b, int off, int len)",int,Uncompresses bytes into specified buffer.
Inflater,needsDictionary(),boolean,Returns true if a preset dictionary is needed for decompression.
Inflater,needsInput(),boolean,Returns true if no data remains in the input buffer.
Inflater,reset(),void,Resets inflater so that a new set of input data can be processed.
Inflater,setDictionary(byte[] b),void,Sets the preset dictionary to the given array of bytes.
Inflater,"setDictionary(byte[] b, int off, int len)",void,Sets the preset dictionary to the given array of bytes.
Inflater,setInput(byte[] b),void,Sets input data for decompression.
Inflater,"setInput(byte[] b, int off, int len)",void,Sets input data for decompression.
InflaterInputStream,available(),int,"Returns 0 after EOF has been reached, otherwise always return 1."
InflaterInputStream,close(),void,Closes this input stream and releases any system resources associated with the stream.
InflaterInputStream,fill(),protected void,Fills input buffer with more data to decompress.
InflaterInputStream,mark(int readlimit),void,Marks the current position in this input stream.
InflaterInputStream,markSupported(),boolean,Tests if this input stream supports the mark and reset methods.
InflaterInputStream,read(),int,Reads a byte of uncompressed data.
InflaterInputStream,"read(byte[] b, int off, int len)",int,Reads uncompressed data into an array of bytes.
InflaterInputStream,reset(),void,Repositions this stream to the position at the time the mark method was last called on this input stream.
InflaterInputStream,skip(long n),long,Skips specified number of bytes of uncompressed data.
InflaterOutputStream,close(),void,Writes any remaining uncompressed data to the output stream and closes the underlying output stream.
InflaterOutputStream,finish(),void,Finishes writing uncompressed data to the output stream without closing the underlying stream.
InflaterOutputStream,flush(),void,"Flushes this output stream, forcing any pending buffered output bytes to be written."
InflaterOutputStream,"write(byte[] b, int off, int len)",void,Writes an array of bytes to the uncompressed output stream.
InflaterOutputStream,write(int b),void,Writes a byte to the uncompressed output stream.
ZipEntry,clone(),Object,Returns a copy of this entry.
ZipEntry,getComment(),String,Returns the comment string for the entry.
ZipEntry,getCompressedSize(),long,Returns the size of the compressed entry data.
ZipEntry,getCrc(),long,Returns the CRC-32 checksum of the uncompressed entry data.
ZipEntry,getCreationTime(),FileTime,Returns the creation time of the entry.
ZipEntry,getExtra(),byte[],Returns the extra field data for the entry.
ZipEntry,getLastAccessTime(),FileTime,Returns the last access time of the entry.
ZipEntry,getLastModifiedTime(),FileTime,Returns the last modification time of the entry.
ZipEntry,getMethod(),int,Returns the compression method of the entry.
ZipEntry,getName(),String,Returns the name of the entry.
ZipEntry,getSize(),long,Returns the uncompressed size of the entry data.
ZipEntry,getTime(),long,Returns the last modification time of the entry.
ZipEntry,hashCode(),int,Returns the hash code value for this entry.
ZipEntry,isDirectory(),boolean,Returns true if this is a directory entry.
ZipEntry,setComment(String comment),void,Sets the optional comment string for the entry.
ZipEntry,setCompressedSize(long csize),void,Sets the size of the compressed entry data.
ZipEntry,setCrc(long crc),void,Sets the CRC-32 checksum of the uncompressed entry data.
ZipEntry,setCreationTime(FileTime time),ZipEntry,Sets the creation time of the entry.
ZipEntry,setExtra(byte[] extra),void,Sets the optional extra field data for the entry.
ZipEntry,setLastAccessTime(FileTime time),ZipEntry,Sets the last access time of the entry.
ZipEntry,setLastModifiedTime(FileTime time),ZipEntry,Sets the last modification time of the entry.
ZipEntry,setMethod(int method),void,Sets the compression method for the entry.
ZipEntry,setSize(long size),void,Sets the uncompressed size of the entry data.
ZipEntry,setTime(long time),void,Sets the last modification time of the entry.
ZipEntry,toString(),String,Returns a string representation of the ZIP entry.
ZipFile,close(),void,Closes the ZIP file.
ZipFile,entries(),Enumeration<? extends ZipEntry>,Returns an enumeration of the ZIP file entries.
ZipFile,finalize(),protected void,Ensures that the system resources held by this ZipFile object are released when there are no more references to it.
ZipFile,getComment(),String,"Returns the zip file comment, or null if none."
ZipFile,getEntry(String name),ZipEntry,"Returns the zip file entry for the specified name, or null if not found."
ZipFile,getInputStream(ZipEntry entry),InputStream,Returns an input stream for reading the contents of the specified zip file entry.
ZipFile,getName(),String,Returns the path name of the ZIP file.
ZipFile,size(),int,Returns the number of entries in the ZIP file.
ZipFile,stream(),Stream<? extends ZipEntry>,Return an ordered Stream over the ZIP file entries.
ZipInputStream,available(),int,"Returns 0 after EOF has reached for the current entry data, otherwise always return 1."
ZipInputStream,close(),void,Closes this input stream and releases any system resources associated with the stream.
ZipInputStream,closeEntry(),void,Closes the current ZIP entry and positions the stream for reading the next entry.
ZipInputStream,createZipEntry(String name),protected ZipEntry,Creates a new ZipEntry object for the specified entry name.
ZipInputStream,getNextEntry(),ZipEntry,Reads the next ZIP file entry and positions the stream at the beginning of the entry data.
ZipInputStream,"read(byte[] b, int off, int len)",int,Reads from the current ZIP entry into an array of bytes.
ZipInputStream,skip(long n),long,Skips specified number of bytes in the current ZIP entry.
ZipOutputStream,close(),void,Closes the ZIP output stream as well as the stream being filtered.
ZipOutputStream,closeEntry(),void,Closes the current ZIP entry and positions the stream for writing the next entry.
ZipOutputStream,finish(),void,Finishes writing the contents of the ZIP output stream without closing the underlying stream.
ZipOutputStream,putNextEntry(ZipEntry e),void,Begins writing a new ZIP file entry and positions the stream to the start of the entry data.
ZipOutputStream,setComment(String comment),void,Sets the ZIP file comment.
ZipOutputStream,setLevel(int level),void,Sets the compression level for subsequent entries which are DEFLATED.
ZipOutputStream,setMethod(int method),void,Sets the default compression method for subsequent entries.
ZipOutputStream,"write(byte[] b, int off, int len)",void,Writes an array of bytes to the current ZIP entry data.
