Sample: 0 Collectors
----------------------------------------------------------------
1. `Collector<T, A, R> toList()`: This method returns a Collector that accumulates the input elements into a new List.
2. `Collector<T, A, R> toSet()`: This method returns a Collector that accumulates the input elements into a new Set.
3. `Collector<T, ?, Map<K, List<T>>> groupingBy(Function<? super T, ? extends K> classifier)`: This method returns a Collector implementing a "group by" operation on input elements, grouping elements according to a classification function.
4. `Collector<T, ?, Map<K, D>> groupingBy(Function<? super T, ? extends K> classifier, Collector<? super T, A, D> downstream)`: This method returns a Collector implementing a cascaded "group by" operation on input elements, grouping elements according to a classification function and then applying a downstream collector to the elements of each group.
5. `Collector<T, ?, Map<Boolean, List<T>>> partitioningBy(Predicate<? super T> predicate)`: This method returns a Collector implementing a partitioning operation on input elements, partitioning elements into two groups according to a predicate.
================================================================

Sample: 1 StreamSupport
----------------------------------------------------------------
1. `Stream<E> stream()`: This method returns a sequential Stream with the elements of this stream.
2. `Stream<E> parallelStream()`: This method returns a possibly parallel Stream with the elements of this stream.
3. `Stream<E> stream(Spliterator<E> spliterator)`: This method creates a sequential or parallel Stream from a Spliterator.
4. `Stream<E> stream(Iterable<E> iterable, boolean parallel)`: This method creates a sequential or parallel Stream from an Iterable.
5. `Stream<E> stream(Iterator<E> iterator, int characteristics, boolean parallel)`: This method creates a sequential or parallel Stream from an Iterator with specified characteristics.
================================================================

