ClassName,Method,Return Type,Description
Collectors,averagingDouble(ToDoubleFunction<? super T> mapper),"static <T> Collector<T,?,Double>",Returns a Collector that produces the arithmetic mean of a double-valued function applied to the input elements.
Collectors,averagingInt(ToIntFunction<? super T> mapper),"static <T> Collector<T,?,Double>",Returns a Collector that produces the arithmetic mean of an integer-valued function applied to the input elements.
Collectors,averagingLong(ToLongFunction<? super T> mapper),"static <T> Collector<T,?,Double>",Returns a Collector that produces the arithmetic mean of a long-valued function applied to the input elements.
Collectors,"collectingAndThen(Collector<T,A,R> downstream, Function<R,RR> finisher)","static <T,A,R,RR> Collector<T,A,RR>",Adapts a Collector to perform an additional finishing transformation.
Collectors,counting(),"static <T> Collector<T,?,Long>",Returns a Collector accepting elements of type T that counts the number of input elements.
Collectors,"groupingBy(Function<? super T,? extends K> classifier)","static <T,K> Collector<T,?,Map<K,List<T>>>","Returns a Collector implementing a ""group by"" operation on input elements of type T, grouping elements according to a classification function, and returning the results in a Map."
Collectors,"groupingBy(Function<? super T,? extends K> classifier, Collector<? super T,A,D> downstream)","static <T,K,A,D> Collector<T,?,Map<K,D>>","Returns a Collector implementing a cascaded ""group by"" operation on input elements of type T, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream Collector."
Collectors,"groupingBy(Function<? super T,? extends K> classifier, Supplier<M> mapFactory, Collector<? super T,A,D> downstream)","static <T,K,D,A,M extends Map<K,D>>Collector<T,?,M>","Returns a Collector implementing a cascaded ""group by"" operation on input elements of type T, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream Collector."
Collectors,"groupingByConcurrent(Function<? super T,? extends K> classifier)","static <T,K> Collector<T,?,ConcurrentMap<K,List<T>>>","Returns a concurrent Collector implementing a ""group by"" operation on input elements of type T, grouping elements according to a classification function."
Collectors,"groupingByConcurrent(Function<? super T,? extends K> classifier, Collector<? super T,A,D> downstream)","static <T,K,A,D> Collector<T,?,ConcurrentMap<K,D>>","Returns a concurrent Collector implementing a cascaded ""group by"" operation on input elements of type T, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream Collector."
Collectors,"groupingByConcurrent(Function<? super T,? extends K> classifier, Supplier<M> mapFactory, Collector<? super T,A,D> downstream)","static <T,K,A,D,M extends ConcurrentMap<K,D>>Collector<T,?,M>","Returns a concurrent Collector implementing a cascaded ""group by"" operation on input elements of type T, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream Collector."
Collectors,joining(),"static Collector<CharSequence,?,String>","Returns a Collector that concatenates the input elements into a String, in encounter order."
Collectors,joining(CharSequence delimiter),"static Collector<CharSequence,?,String>","Returns a Collector that concatenates the input elements, separated by the specified delimiter, in encounter order."
Collectors,"joining(CharSequence delimiter, CharSequence prefix, CharSequence suffix)","static Collector<CharSequence,?,String>","Returns a Collector that concatenates the input elements, separated by the specified delimiter, with the specified prefix and suffix, in encounter order."
Collectors,"mapping(Function<? super T,? extends U> mapper, Collector<? super U,A,R> downstream)","static <T,U,A,R> Collector<T,?,R>",Adapts a Collector accepting elements of type U to one accepting elements of type T by applying a mapping function to each input element before accumulation.
Collectors,maxBy(Comparator<? super T> comparator),"static <T> Collector<T,?,Optional<T>>","Returns a Collector that produces the maximal element according to a given Comparator, described as an Optional<T>."
Collectors,minBy(Comparator<? super T> comparator),"static <T> Collector<T,?,Optional<T>>","Returns a Collector that produces the minimal element according to a given Comparator, described as an Optional<T>."
Collectors,partitioningBy(Predicate<? super T> predicate),"static <T> Collector<T,?,Map<Boolean,List<T>>>","Returns a Collector which partitions the input elements according to a Predicate, and organizes them into a Map<Boolean, List<T>>."
Collectors,"partitioningBy(Predicate<? super T> predicate, Collector<? super T,A,D> downstream)","static <T,D,A> Collector<T,?,Map<Boolean,D>>","Returns a Collector which partitions the input elements according to a Predicate, reduces the values in each partition according to another Collector, and organizes them into a Map<Boolean, D> whose values are the result of the downstream reduction."
Collectors,reducing(BinaryOperator<T> op),"static <T> Collector<T,?,Optional<T>>",Returns a Collector which performs a reduction of its input elements under a specified BinaryOperator.
Collectors,"reducing(T identity, BinaryOperator<T> op)","static <T> Collector<T,?,T>",Returns a Collector which performs a reduction of its input elements under a specified BinaryOperator using the provided identity.
Collectors,"reducing(U identity, Function<? super T,? extends U> mapper, BinaryOperator<U> op)","static <T,U> Collector<T,?,U>",Returns a Collector which performs a reduction of its input elements under a specified mapping function and BinaryOperator.
Collectors,summarizingDouble(ToDoubleFunction<? super T> mapper),"static <T> Collector<T,?,DoubleSummaryStatistics>","Returns a Collector which applies an double-producing mapping function to each input element, and returns summary statistics for the resulting values."
Collectors,summarizingInt(ToIntFunction<? super T> mapper),"static <T> Collector<T,?,IntSummaryStatistics>","Returns a Collector which applies an int-producing mapping function to each input element, and returns summary statistics for the resulting values."
Collectors,summarizingLong(ToLongFunction<? super T> mapper),"static <T> Collector<T,?,LongSummaryStatistics>","Returns a Collector which applies an long-producing mapping function to each input element, and returns summary statistics for the resulting values."
Collectors,summingDouble(ToDoubleFunction<? super T> mapper),"static <T> Collector<T,?,Double>",Returns a Collector that produces the sum of a double-valued function applied to the input elements.
Collectors,summingInt(ToIntFunction<? super T> mapper),"static <T> Collector<T,?,Integer>",Returns a Collector that produces the sum of a integer-valued function applied to the input elements.
Collectors,summingLong(ToLongFunction<? super T> mapper),"static <T> Collector<T,?,Long>",Returns a Collector that produces the sum of a long-valued function applied to the input elements.
Collectors,toCollection(Supplier<C> collectionFactory),"static <T,C extends Collection<T>>Collector<T,?,C>","Returns a Collector that accumulates the input elements into a new Collection, in encounter order."
Collectors,"toConcurrentMap(Function<? super T,? extends K> keyMapper, Function<? super T,? extends U> valueMapper)","static <T,K,U> Collector<T,?,ConcurrentMap<K,U>>",Returns a concurrent Collector that accumulates elements into a ConcurrentMap whose keys and values are the result of applying the provided mapping functions to the input elements.
Collectors,"toConcurrentMap(Function<? super T,? extends K> keyMapper, Function<? super T,? extends U> valueMapper, BinaryOperator<U> mergeFunction)","static <T,K,U> Collector<T,?,ConcurrentMap<K,U>>",Returns a concurrent Collector that accumulates elements into a ConcurrentMap whose keys and values are the result of applying the provided mapping functions to the input elements.
Collectors,"toConcurrentMap(Function<? super T,? extends K> keyMapper, Function<? super T,? extends U> valueMapper, BinaryOperator<U> mergeFunction, Supplier<M> mapSupplier)","static <T,K,U,M extends ConcurrentMap<K,U>>Collector<T,?,M>",Returns a concurrent Collector that accumulates elements into a ConcurrentMap whose keys and values are the result of applying the provided mapping functions to the input elements.
Collectors,toList(),"static <T> Collector<T,?,List<T>>",Returns a Collector that accumulates the input elements into a new List.
Collectors,"toMap(Function<? super T,? extends K> keyMapper, Function<? super T,? extends U> valueMapper)","static <T,K,U> Collector<T,?,Map<K,U>>",Returns a Collector that accumulates elements into a Map whose keys and values are the result of applying the provided mapping functions to the input elements.
Collectors,"toMap(Function<? super T,? extends K> keyMapper, Function<? super T,? extends U> valueMapper, BinaryOperator<U> mergeFunction)","static <T,K,U> Collector<T,?,Map<K,U>>",Returns a Collector that accumulates elements into a Map whose keys and values are the result of applying the provided mapping functions to the input elements.
Collectors,"toMap(Function<? super T,? extends K> keyMapper, Function<? super T,? extends U> valueMapper, BinaryOperator<U> mergeFunction, Supplier<M> mapSupplier)","static <T,K,U,M extends Map<K,U>>Collector<T,?,M>",Returns a Collector that accumulates elements into a Map whose keys and values are the result of applying the provided mapping functions to the input elements.
Collectors,toSet(),"static <T> Collector<T,?,Set<T>>",Returns a Collector that accumulates the input elements into a new Set.
StreamSupport,"doubleStream(Spliterator.OfDouble spliterator, boolean parallel)",static DoubleStream,Creates a new sequential or parallel DoubleStream from a Spliterator.OfDouble.
StreamSupport,"doubleStream(Supplier<? extends Spliterator.OfDouble> supplier, int characteristics, boolean parallel)",static DoubleStream,Creates a new sequential or parallel DoubleStream from a Supplier of Spliterator.OfDouble.
StreamSupport,"intStream(Spliterator.OfInt spliterator, boolean parallel)",static IntStream,Creates a new sequential or parallel IntStream from a Spliterator.OfInt.
StreamSupport,"intStream(Supplier<? extends Spliterator.OfInt> supplier, int characteristics, boolean parallel)",static IntStream,Creates a new sequential or parallel IntStream from a Supplier of Spliterator.OfInt.
StreamSupport,"longStream(Spliterator.OfLong spliterator, boolean parallel)",static LongStream,Creates a new sequential or parallel LongStream from a Spliterator.OfLong.
StreamSupport,"longStream(Supplier<? extends Spliterator.OfLong> supplier, int characteristics, boolean parallel)",static LongStream,Creates a new sequential or parallel LongStream from a Supplier of Spliterator.OfLong.
StreamSupport,"stream(Spliterator<T> spliterator, boolean parallel)",static <T> Stream<T>,Creates a new sequential or parallel Stream from a Spliterator.
StreamSupport,"stream(Supplier<? extends Spliterator<T>> supplier, int characteristics, boolean parallel)",static <T> Stream<T>,Creates a new sequential or parallel Stream from a Supplier of Spliterator.
