Sample: 0 DefaultMetalTheme
----------------------------------------------------------------
1. `Color getPrimary1()`: This method returns the primary 1 color of the Metal theme.
2. `Color getPrimary2()`: This method returns the primary 2 color of the Metal theme.
3. `Color getPrimary3()`: This method returns the primary 3 color of the Metal theme.
4. `Color getSecondary1()`: This method returns the secondary 1 color of the Metal theme.
5. `Color getSecondary2()`: This method returns the secondary 2 color of the Metal theme.
================================================================

Sample: 1 MetalBorders
----------------------------------------------------------------
1. `Border getButtonBorder()`: This method returns a Border object for a button in the metal look and feel.
2. `Border getDesktopIconBorder()`: This method returns a Border object for a desktop icon in the metal look and feel.
3. `Border getInternalFrameBorder()`: This method returns a Border object for an internal frame in the metal look and feel.
4. `Border getMenuItemBorder()`: This method returns a Border object for a menu item in the metal look and feel.
5. `Border getToolBarBorder()`: This method returns a Border object for a toolbar in the metal look and feel.
================================================================

Sample: 2 MetalBorders.ButtonBorder
----------------------------------------------------------------
1. `Border getButtonBorder()`: This method returns the button border used in the Metal look and feel.
2. `Border getToggleButtonBorder()`: This method returns the toggle button border used in the Metal look and feel.
3. `Border getTextFieldBorder()`: This method returns the text field border used in the Metal look and feel.
4. `Border getDesktopIconBorder()`: This method returns the border used for desktop icons in the Metal look and feel.
5. `Border getMenuItemBorder()`: This method returns the border used for menu items in the Metal look and feel.
================================================================

Sample: 3 MetalBorders.Flush3DBorder
----------------------------------------------------------------
1. `Border getBorder()`: This method returns the border object.
2. `Insets getBorderInsets(Component c, Insets insets)`: This method returns the border insets for the specified component.
3. `boolean isBorderOpaque()`: This method returns true if the border is opaque, false otherwise.
4. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component.
5. `void setBorderOpaque(boolean isOpaque)`: This method sets whether the border is opaque or not.
================================================================

Sample: 4 MetalBorders.InternalFrameBorder
----------------------------------------------------------------
1. `Border getBorder()`: This method returns the border object used for painting the border of the component.
2. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component with the specified position and size.
3. `Insets getBorderInsets(Component c, Insets insets)`: This method returns the border insets for the specified component.
4. `boolean isBorderOpaque()`: This method returns whether the border is opaque or not.
5. `void setBorderOpaque(boolean isOpaque)`: This method sets whether the border should be opaque or not.
================================================================

Sample: 5 MetalBorders.MenuBarBorder
----------------------------------------------------------------
1. `Border getMenuBarBorder()`: This method returns the border for a menu bar.
2. `Border getMenuItemBorder()`: This method returns the border for a menu item.
3. `Border getInternalFrameBorder()`: This method returns the border for an internal frame.
4. `Border getDesktopIconBorder()`: This method returns the border for a desktop icon.
5. `Border getToolBarBorder()`: This method returns the border for a tool bar.
================================================================

Sample: 6 MetalBorders.MenuItemBorder
----------------------------------------------------------------
1. `Border getBorder()`: This method returns the border object.
2. `void setBorder(Border border)`: This method sets the border object.
3. `boolean isBorderOpaque()`: This method returns true if the border is opaque.
4. `Insets getBorderInsets(Component c)`: This method returns the border insets for the specified component.
5. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component.
================================================================

Sample: 7 MetalBorders.OptionDialogBorder
----------------------------------------------------------------
1. `Border getBorder()`: This method returns the border object.
2. `Insets getBorderInsets(Component c, Insets insets)`: This method returns the border insets for the specified component.
3. `ColorUIResource getPrimaryControlDarkShadow()`: This method returns the primary control dark shadow color.
4. `ColorUIResource getPrimaryControlShadow()`: This method returns the primary control shadow color.
5. `ColorUIResource getPrimaryControlInfo()`: This method returns the primary control info color.
================================================================

Sample: 8 MetalBorders.PaletteBorder
----------------------------------------------------------------
1. `Insets getBorderInsets(Component c)`: This method returns the border insets for the specified component.
2. `boolean isBorderOpaque()`: This method returns true if the border is opaque, false otherwise.
3. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component.
4. `void setBorderInsets(Component c, Insets insets)`: This method sets the border insets for the specified component.
5. `void setBorderOpaque(boolean isOpaque)`: This method sets whether the border is opaque or not.
================================================================

Sample: 9 MetalBorders.PopupMenuBorder
----------------------------------------------------------------
1. `Border getBorder()`: This method returns the border object used for popup menus.
2. `void setBorder(Border border)`: This method sets the border object to be used for popup menus.
3. `boolean isBorderOpaque()`: This method returns true if the border is opaque.
4. `Insets getBorderInsets(Component c)`: This method returns the border insets for the specified component.
5. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component with the specified graphics context and bounds.
================================================================

Sample: 10 MetalBorders.RolloverButtonBorder
----------------------------------------------------------------
1. `Border getBorder()`: This method returns the border object.
2. `void setBorder(Border border)`: This method sets the border object.
3. `Insets getBorderInsets(Component c, Insets insets)`: This method returns the border insets for the specified component.
4. `boolean isBorderOpaque()`: This method returns true if the border is opaque.
5. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component.
================================================================

Sample: 11 MetalBorders.ScrollPaneBorder
----------------------------------------------------------------
1. `Border getBorder()`: This method returns the border object used for scroll panes.
2. `void setBorder(Border border)`: This method sets the border object to be used for scroll panes.
3. `boolean isBorderOpaque()`: This method returns a boolean value indicating whether the border is opaque.
4. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component with the specified graphics context and bounds.
5. `Insets getBorderInsets(Component c, Insets insets)`: This method returns the border insets for the specified component.
================================================================

Sample: 12 MetalBorders.TableHeaderBorder
----------------------------------------------------------------
1. `Insets getBorderInsets(Component c)`: This method returns the border insets for the specified component.
2. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component with the specified graphics context and bounds.
3. `boolean isBorderOpaque()`: This method returns whether or not the border is opaque.
4. `void setBorderOpaque(boolean isOpaque)`: This method sets whether the border is opaque or not.
5. `void setRollover(boolean isRollover)`: This method sets whether the border should be displayed as a rollover border.
================================================================

Sample: 13 MetalBorders.TextFieldBorder
----------------------------------------------------------------
1. `Border getBorder()`: This method returns the border object used for text fields.
2. `void setBorder(Border border)`: This method sets the border object to be used for text fields.
3. `Insets getBorderInsets(Component c)`: This method returns the border insets for the specified component.
4. `boolean isBorderOpaque()`: This method returns whether the border is opaque.
5. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component.
================================================================

Sample: 14 MetalBorders.ToggleButtonBorder
----------------------------------------------------------------
1. `Border getToggleButtonBorder()`: This method returns the toggle button border.
2. `void setToggleButtonBorder(Border border)`: This method sets the toggle button border.
3. `Insets getBorderInsets(Component c, Insets insets)`: This method returns the border insets for the specified component.
4. `boolean isBorderOpaque()`: This method returns true if the border is opaque.
5. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component.
================================================================

Sample: 15 MetalBorders.ToolBarBorder
----------------------------------------------------------------
1. `Border getBorder()`: This method returns the border object used for a toolbar.
2. `void setBorder(Border border)`: This method sets the border object to be used for a toolbar.
3. `boolean isBorderOpaque()`: This method returns whether the border is opaque.
4. `void setRollover(boolean rollover)`: This method sets whether rollover effects are enabled for the toolbar.
5. `void setFloatable(boolean floatable)`: This method sets whether the toolbar is floatable.
================================================================

Sample: 16 MetalButtonUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a specified component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a specified component.
3. `void paint(Graphics g, JComponent c)`: This method paints the specified component using the provided graphics context.
4. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the specified component.
5. `Dimension getMinimumSize(JComponent c)`: This method returns the minimum size of the specified component.
================================================================

Sample: 17 MetalCheckBoxIcon
----------------------------------------------------------------
1. `int getIconWidth()`
2. `int getIconHeight()`
3. `void paintIcon(Component c, Graphics g, int x, int y)`
4. `boolean equals(Object obj)`
5. `int hashCode()`
================================================================

Sample: 18 MetalCheckBoxUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI delegate for the specified component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI delegate for the specified component.
3. `Icon getDefaultIcon()`: This method returns the default icon for the checkbox.
4. `Icon getDisabledIcon()`: This method returns the disabled icon for the checkbox.
5. `Icon getSelectedIcon()`: This method returns the selected icon for the checkbox.
================================================================

Sample: 19 MetalComboBoxButton
----------------------------------------------------------------
1. `void setPopupVisible(boolean v)`: Sets the visibility of the popup.
2. `void setBorder(Border b)`: Sets the border of the button.
3. `void setMargin(Insets m)`: Sets the margin of the button.
4. `void setFocusPainted(boolean b)`: Sets whether the button should paint the focus.
5. `void setRequestFocusEnabled(boolean b)`: Sets whether the button should be able to request focus.
================================================================

Sample: 20 MetalComboBoxEditor
----------------------------------------------------------------
1. `Component getEditorComponent()`: This method returns the editor component used for editing the combo box.
2. `void setItem(Object anObject)`: This method sets the item that should be edited. 
3. `Object getItem()`: This method returns the currently edited item.
4. `void selectAll()`: This method selects all the text in the editor component.
5. `void addActionListener(ActionListener l)`: This method adds an ActionListener to the editor component.
================================================================

Sample: 21 MetalComboBoxEditor.UIResource
----------------------------------------------------------------
1. `void setItem(Object anObject)`: This method sets the item that should be edited. 
2. `Object getItem()`: This method returns the edited item.
3. `void selectAll()`: This method selects all the text in the editor.
4. `void addActionListener(ActionListener l)`: This method adds an ActionListener to the editor.
5. `void removeActionListener(ActionListener l)`: This method removes an ActionListener from the editor.
================================================================

Sample: 22 MetalComboBoxIcon
----------------------------------------------------------------
1. `void paintIcon(Component c, Graphics g, int x, int y)`: This method paints the icon at the specified location on the specified component.
2. `int getIconWidth()`: This method returns the width of the icon.
3. `int getIconHeight()`: This method returns the height of the icon.
4. `MetalComboBoxIcon()`: Constructor for creating a new MetalComboBoxIcon object.
5. `boolean equals(Object obj)`: This method compares this MetalComboBoxIcon to the specified object.
================================================================

Sample: 23 MetalComboBoxUI
----------------------------------------------------------------
1. `void setPopupVisible(JComboBox c, boolean v)`: This method sets the visibility of the popup for the specified JComboBox.
2. `void setPopupWidth(JComboBox c, int width)`: This method sets the width of the popup for the specified JComboBox.
3. `void setPopupHeight(JComboBox c, int height)`: This method sets the height of the popup for the specified JComboBox.
4. `void setPopupLocation(JComboBox c, int x, int y)`: This method sets the location of the popup for the specified JComboBox.
5. `void setPopupMaxRowCount(JComboBox c, int count)`: This method sets the maximum number of rows to display in the popup for the specified JComboBox.
================================================================

Sample: 24 MetalDesktopIconUI
----------------------------------------------------------------
1. `void setBounds(int x, int y, int width, int height)`: This method sets the bounds of the desktop icon.
2. `void setOpaque(boolean isOpaque)`: This method sets whether the desktop icon is opaque.
3. `void setUI(MetalDesktopIconUI ui)`: This method sets the MetalDesktopIconUI for the desktop icon.
4. `void updateUI()`: This method updates the UI of the desktop icon.
5. `void setIcon(JInternalFrame.JDesktopIcon icon)`: This method sets the icon for the desktop icon.
================================================================

Sample: 25 MetalFileChooserUI
----------------------------------------------------------------
1. `void ensureFileIsVisible(JFileChooser fc, File f)`: This method ensures that the specified file is visible in the file chooser.
2. `File getDirectory()`: This method returns the current directory of the file chooser.
3. `File getDirectory(int index)`: This method returns the directory at the specified index in the file chooser.
4. `File getSelectedFile()`: This method returns the currently selected file in the file chooser.
5. `void rescanCurrentDirectory(JFileChooser fc)`: This method rescans the current directory in the file chooser.
================================================================

Sample: 26 MetalIconFactory
----------------------------------------------------------------
1. `Icon getTreeControlIcon(boolean isCollapsed)`: This method returns an Icon for the tree control based on the specified boolean parameter.
2. `Icon getTreeFolderIcon()`: This method returns an Icon for the tree folder.
3. `Icon getTreeLeafIcon()`: This method returns an Icon for the tree leaf.
4. `Icon getMenuArrowIcon()`: This method returns an Icon for the menu arrow.
5. `Icon getMenuItemCheckIcon()`: This method returns an Icon for the menu item check.
================================================================

Sample: 27 MetalIconFactory.FileIcon16
----------------------------------------------------------------
1. `Icon getTreeFolderIcon()`: This method returns an Icon object representing the tree folder icon.
2. `Icon getTreeLeafIcon()`: This method returns an Icon object representing the tree leaf icon.
3. `Icon getFileIcon(File f)`: This method returns an Icon object representing the file icon for the specified File object.
4. `Icon getComputerIcon()`: This method returns an Icon object representing the computer icon.
5. `Icon getFloppyDriveIcon()`: This method returns an Icon object representing the floppy drive icon.
================================================================

Sample: 28 MetalIconFactory.FolderIcon16
----------------------------------------------------------------
1. `Icon getTreeFolderIcon()`: This method returns an Icon object representing the default tree folder icon.
2. `Icon getTreeLeafIcon()`: This method returns an Icon object representing the default tree leaf icon.
3. `Icon getFileChooserDetailViewIcon()`: This method returns an Icon object representing the default file chooser detail view icon.
4. `Icon getFileChooserHomeFolderIcon()`: This method returns an Icon object representing the default file chooser home folder icon.
5. `Icon getFileChooserListViewIcon()`: This method returns an Icon object representing the default file chooser list view icon.
================================================================

Sample: 29 MetalIconFactory.PaletteCloseIcon
----------------------------------------------------------------
1. `Icon getPaletteCloseIcon(int width, int height)`: This method returns an icon for the Palette close with the specified width and height.
2. `int getIconWidth()`: This method returns the width of the Palette close icon.
3. `int getIconHeight()`: This method returns the height of the Palette close icon.
4. `void paintIcon(Component c, Graphics g, int x, int y)`: This method paints the Palette close icon at the specified location on the specified component using the specified graphics context.
5. `String getDescription()`: This method returns a description of the Palette close icon.
================================================================

Sample: 30 MetalIconFactory.TreeControlIcon
----------------------------------------------------------------
1. `Icon getTreeControlIcon(boolean isCollapsed)`: This method returns an icon representing a tree control, either collapsed or expanded.
2. `Icon getTreeFolderIcon()`: This method returns an icon representing a tree folder.
3. `Icon getTreeLeafIcon()`: This method returns an icon representing a tree leaf node.
4. `Icon getTreeControlIcon(boolean isCollapsed, boolean isLeaf)`: This method returns an icon representing a tree control, taking into account whether the node is collapsed and if it is a leaf node.
5. `Icon getTreeControlIcon(boolean isCollapsed, boolean isLeaf, boolean isExpanded, boolean isLeafExpanded)`: This method returns an icon representing a tree control, considering various states such as collapsed, expanded, leaf, and leaf expanded.
================================================================

Sample: 31 MetalIconFactory.TreeFolderIcon
----------------------------------------------------------------
1. `Icon getTreeFolderIcon()`: This method returns an Icon object representing the tree folder icon.
2. `Icon getTreeFolderCollapsedIcon()`: This method returns an Icon object representing the collapsed tree folder icon.
3. `Icon getTreeFolderExpandedIcon()`: This method returns an Icon object representing the expanded tree folder icon.
4. `Icon getTreeLeafIcon()`: This method returns an Icon object representing the tree leaf icon.
5. `Icon getTreeControlIcon(boolean isCollapsed)`: This method returns an Icon object representing the tree control icon based on the specified boolean parameter indicating whether the tree node is collapsed or expanded.
================================================================

Sample: 32 MetalIconFactory.TreeLeafIcon
----------------------------------------------------------------
1. `Icon getTreeLeafIcon()`: This method returns the icon for a tree leaf node.
2. `Icon getTreeControlIcon(boolean isCollapsed)`: This method returns the icon for a tree control node based on whether it is collapsed or expanded.
3. `Icon getTreeFolderIcon()`: This method returns the icon for a tree folder node.
4. `Icon getTreeComputerIcon()`: This method returns the icon for a tree computer node.
5. `Icon getTreeHardDriveIcon()`: This method returns the icon for a tree hard drive node.
================================================================

Sample: 33 MetalInternalFrameTitlePane
----------------------------------------------------------------
1. `void setIconifyEnabled(boolean iconifyEnabled)`: This method sets whether the title bar should include an iconify button.
2. `void setMaximizeEnabled(boolean maximizeEnabled)`: This method sets whether the title bar should include a maximize button.
3. `void setCloseEnabled(boolean closeEnabled)`: This method sets whether the title bar should include a close button.
4. `void setPalette(boolean isPalette)`: This method sets whether the internal frame is a palette.
5. `void setPaletteClose(boolean isPaletteClose)`: This method sets whether the palette should include a close button.
================================================================

Sample: 34 MetalInternalFrameUI
----------------------------------------------------------------
1. `void setPalette(boolean isPalette)`: This method sets whether the internal frame is a palette.
2. `void setPaletteTitle(String paletteTitle)`: This method sets the title of the palette.
3. `void setPaletteCloseToActive(boolean isPaletteCloseToActive)`: This method sets whether the palette should close when it loses focus.
4. `void setPaletteState(int state)`: This method sets the state of the palette.
5. `void setPaletteBorder(Border border)`: This method sets the border of the palette.
================================================================

Sample: 35 MetalLabelUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a specified component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a specified component.
3. `void paint(Graphics g, JComponent c)`: This method paints the specified component using the provided graphics context.
4. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the specified component.
5. `Dimension getMinimumSize(JComponent c)`: This method returns the minimum size of the specified component.
================================================================

Sample: 36 MetalLookAndFeel
----------------------------------------------------------------
1. `void setCurrentTheme(MetalTheme theme)`: This method sets the current theme for the Metal Look and Feel.
2. `MetalTheme getCurrentTheme()`: This method returns the current theme being used by the Metal Look and Feel.
3. `void setTheme(MetalTheme theme)`: This method sets the theme for the Metal Look and Feel.
4. `MetalTheme getTheme()`: This method returns the theme being used by the Metal Look and Feel.
5. `void setContrast(int newValue)`: This method sets the contrast value for the Metal Look and Feel.
================================================================

Sample: 37 MetalMenuBarUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a given component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a given component.
3. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size for a given component.
4. `Dimension getMinimumSize(JComponent c)`: This method returns the minimum size for a given component.
5. `Dimension getMaximumSize(JComponent c)`: This method returns the maximum size for a given component.
================================================================

Sample: 38 MetalPopupMenuSeparatorUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a specified component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a specified component.
3. `void paint(Graphics g, JComponent c)`: This method paints the separator on the specified component using the provided graphics context.
4. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the separator for the specified component.
5. `Dimension getMinimumSize(JComponent c)`: This method returns the minimum size of the separator for the specified component.
================================================================

Sample: 39 MetalProgressBarUI
----------------------------------------------------------------
1. `void paintDeterminate(Graphics g, JComponent c)`: This method paints the progress bar for the determinate mode.
2. `void paintIndeterminate(Graphics g, JComponent c)`: This method paints the progress bar for the indeterminate mode.
3. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the progress bar.
4. `void installUI(JComponent c)`: This method installs the UI for a component.
5. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
================================================================

Sample: 40 MetalRadioButtonUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
3. `Icon getDefaultIcon()`: This method returns the default icon for the radio button.
4. `Icon getSelectedIcon()`: This method returns the selected icon for the radio button.
5. `Icon getDisabledIcon()`: This method returns the disabled icon for the radio button.
================================================================

Sample: 41 MetalRootPaneUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a specified component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a specified component.
3. `void installDefaults(JRootPane c)`: This method installs the default properties for a specified root pane component.
4. `void uninstallDefaults(JRootPane c)`: This method uninstalls the default properties for a specified root pane component.
5. `void installListeners(JRootPane c)`: This method installs the listeners for a specified root pane component.
================================================================

Sample: 42 MetalScrollBarUI
----------------------------------------------------------------
1. `void paintTrack(Graphics g, JComponent c, Rectangle trackBounds)`: This method paints the track of the scrollbar.
2. `void paintThumb(Graphics g, JComponent c, Rectangle thumbBounds)`: This method paints the thumb of the scrollbar.
3. `void paintDecreaseHighlight(Graphics g)`: This method paints the highlight of the decrease button of the scrollbar.
4. `void paintIncreaseHighlight(Graphics g)`: This method paints the highlight of the increase button of the scrollbar.
5. `void layoutHScrollbar(JScrollBar sb)`: This method lays out the horizontal scrollbar.
================================================================

Sample: 43 MetalScrollButton
----------------------------------------------------------------
1. `void setDirection(int direction)`: This method sets the direction of the scrollbar arrow button.
2. `int getDirection()`: This method returns the direction of the scrollbar arrow button.
3. `void setRepeat(boolean repeat)`: This method sets whether the scrollbar arrow button should repeat when pressed continuously.
4. `boolean getRepeat()`: This method returns whether the scrollbar arrow button should repeat when pressed continuously.
5. `void setScrollableAmount(int scrollableAmount)`: This method sets the amount by which the scrollbar arrow button should scroll.
================================================================

Sample: 44 MetalScrollPaneUI
----------------------------------------------------------------
1. `JScrollBar createScrollBar(int orientation)`: This method creates a new instance of JScrollBar with the specified orientation.
2. `void layoutVScrollbar(JScrollBar vsb, int x, int y, int width, int height)`: This method lays out the vertical scrollbar within the specified bounds.
3. `void layoutHScrollbar(JScrollBar hsb, int x, int y, int width, int height)`: This method lays out the horizontal scrollbar within the specified bounds.
4. `void syncScrollPaneWithViewport(JScrollPane sp)`: This method synchronizes the scroll pane with its viewport.
5. `void syncWithScrollPane(JScrollPane sp)`: This method synchronizes the scroll pane with the specified scroll pane.
================================================================

Sample: 45 MetalSeparatorUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI delegate for the specified component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI delegate for the specified component.
3. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the specified component.
4. `void paint(Graphics g, JComponent c)`: This method paints the specified component using the specified graphics context.
5. `void paintVerticalPartOfLeg(Graphics g, Rectangle data, Insets insets)`: This method paints the vertical part of the separator.
================================================================

Sample: 46 MetalSliderUI
----------------------------------------------------------------
1. `void paintThumb(Graphics g)`: This method paints the thumb of the slider.
2. `void paintTrack(Graphics g)`: This method paints the track of the slider.
3. `void paintFocus(Graphics g)`: This method paints the focus indicator of the slider.
4. `void paintTicks(Graphics g)`: This method paints the tick marks of the slider.
5. `void paintLabels(Graphics g)`: This method paints the labels of the slider.
================================================================

Sample: 47 MetalSplitPaneUI
----------------------------------------------------------------
1. `void finishDrag(int newLocation)`: This method finishes the dragging session.
2. `void startDrag(int newLocation, int dividerIndex)`: This method starts a dragging session.
3. `void resetToPreferredSizes(JSplitPane jc)`: This method resets the sizes of the JSplitPane to the preferred sizes.
4. `void setContinuousLayout(JSplitPane jc, boolean newContinuousLayout)`: This method sets whether the JSplitPane should continuously layout the components while being dragged.
5. `void setDividerLocation(JSplitPane jc, int location)`: This method sets the location of the divider.
================================================================

Sample: 48 MetalTabbedPaneUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI delegate for the specified component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI delegate for the specified component.
3. `Rectangle getTabBounds(JTabbedPane pane, int index)`: This method returns the bounds of the specified tab in the tabbed pane's coordinate space.
4. `int tabForCoordinate(JTabbedPane pane, int x, int y)`: This method returns the tab index which intersects the specified point.
5. `void paint(Graphics g, JComponent c)`: This method paints the tabbed pane.
================================================================

Sample: 49 MetalTextFieldUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
3. `MetalTextFieldUI createUI(JComponent c)`: This method creates a new instance of MetalTextFieldUI for a component.
4. `void paint(Graphics g, JComponent c)`: This method paints the UI for a component.
5. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size for a component.
================================================================

Sample: 50 MetalTheme
----------------------------------------------------------------
1. `ColorUIResource getPrimary1()`: This method returns the primary 1 color used by the Metal Look and Feel.
2. `ColorUIResource getPrimary2()`: This method returns the primary 2 color used by the Metal Look and Feel.
3. `ColorUIResource getPrimary3()`: This method returns the primary 3 color used by the Metal Look and Feel.
4. `ColorUIResource getSecondary1()`: This method returns the secondary 1 color used by the Metal Look and Feel.
5. `ColorUIResource getSecondary2()`: This method returns the secondary 2 color used by the Metal Look and Feel.
================================================================

Sample: 51 MetalToggleButtonUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI delegate for the specified component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI delegate for the specified component.
3. `void paint(Graphics g, JComponent c)`: This method paints the specified component using the look and feel of the MetalToggleButtonUI.
4. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the specified component.
5. `Dimension getMinimumSize(JComponent c)`: This method returns the minimum size of the specified component.
================================================================

Sample: 52 MetalToolBarUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI delegate for the specified component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI delegate for the specified component.
3. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size for the specified component.
4. `void paint(Graphics g, JComponent c)`: This method paints the specified component using the specified graphics context.
5. `void update(Graphics g, JComponent c)`: This method updates the specified component using the specified graphics context.
================================================================

Sample: 53 MetalToolTipUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI delegate for the specified component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI delegate for the specified component.
3. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the tooltip component.
4. `Dimension getMinimumSize(JComponent c)`: This method returns the minimum size of the tooltip component.
5. `Dimension getMaximumSize(JComponent c)`: This method returns the maximum size of the tooltip component.
================================================================

Sample: 54 MetalTreeUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a specified component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a specified component.
3. `Rectangle getPathBounds(JTree tree, TreePath path)`: This method returns the bounding rectangle, in the tree's coordinate system, for the specified path.
4. `TreePath getPathForRow(JTree tree, int row)`: This method returns the path for a specified row in the tree.
5. `int getRowForPath(JTree tree, TreePath path)`: This method returns the row for a specified path in the tree.
================================================================

Sample: 55 OceanTheme
----------------------------------------------------------------
1. `Color getPrimary1()`: This method returns the primary 1 color of the theme.
2. `Color getPrimary2()`: This method returns the primary 2 color of the theme.
3. `Color getPrimary3()`: This method returns the primary 3 color of the theme.
4. `Color getSecondary1()`: This method returns the secondary 1 color of the theme.
5. `Color getSecondary2()`: This method returns the secondary 2 color of the theme.
================================================================

