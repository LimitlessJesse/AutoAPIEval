Sample: 0 CertPathTrustManagerParameters
----------------------------------------------------------------
1. `CertPathTrustManagerParameters getParameters()`: This method returns the CertPathParameters object associated with this CertPathTrustManagerParameters instance.
2. `void setParameters(CertPathParameters parameters)`: This method sets the CertPathParameters object for this CertPathTrustManagerParameters instance.
3. `boolean equals(Object obj)`: This method compares this CertPathTrustManagerParameters instance with the specified object for equality.
4. `int hashCode()`: This method returns a hash code value for the object.
5. `String toString()`: This method returns a string representation of the object.
================================================================

Sample: 1 ExtendedSSLSession
----------------------------------------------------------------
1. `String getLocalPrincipal()`: This method returns the local principal associated with this session.
2. `String getPeerPrincipal()`: This method returns the peer principal associated with this session.
3. `String getCipherSuite()`: This method returns the cipher suite in use by this session.
4. `String getProtocol()`: This method returns the protocol in use by this session.
5. `byte[] getId()`: This method returns the identifier of this session.
================================================================

Sample: 2 HandshakeCompletedEvent
----------------------------------------------------------------
1. `SSLSession getSession()`: This method returns the SSL session associated with the completed handshake.
2. `String getCipherSuite()`: This method returns the name of the cipher suite used in the SSL handshake.
3. `X509Certificate[] getLocalCertificates()`: This method returns the certificates that were sent to the peer during the SSL handshake.
4. `X509Certificate[] getPeerCertificates()`: This method returns the certificates that were received from the peer during the SSL handshake.
5. `Principal getPeerPrincipal()`: This method returns the principal that was sent by the peer during the SSL handshake.
================================================================

Sample: 3 HttpsURLConnection
----------------------------------------------------------------
1. `void setHostnameVerifier(HostnameVerifier verifier)`: This method sets the HostnameVerifier used to verify the hostname of the server.
2. `void setSSLSocketFactory(SSLSocketFactory factory)`: This method sets the SSLSocketFactory used to create SSL sockets.
3. `void setDefaultSSLSocketFactory(SSLSocketFactory factory)`: This method sets the default SSLSocketFactory used by all instances of HttpsURLConnection.
4. `void setDefaultHostnameVerifier(HostnameVerifier verifier)`: This method sets the default HostnameVerifier used by all instances of HttpsURLConnection.
5. `void setSSLSocketFactory(SSLSocketFactory factory)`: This method sets the SSLSocketFactory used to create SSL sockets for this connection.
================================================================

Sample: 4 KeyManagerFactory
----------------------------------------------------------------
1. `static KeyManagerFactory getInstance(String algorithm)`: This method returns a KeyManagerFactory object that implements the specified algorithm.
2. `void init(KeyStore ks, char[] password)`: This method initializes this factory with a source of key material.
3. `KeyManager[] getKeyManagers()`: This method returns the key managers configured for this factory.
4. `String getAlgorithm()`: This method returns the algorithm name of this KeyManagerFactory.
5. `void init(ManagerFactoryParameters spec)`: This method initializes this factory with a source of key material using the specified ManagerFactoryParameters.
================================================================

Sample: 5 KeyManagerFactorySpi
----------------------------------------------------------------
1. `KeyManager[] engineGetKeyManagers()`: This method returns an array of KeyManagers.
2. `void engineInit(KeyStore ks, char[] password)`: This method initializes this KeyManagerFactorySpi with a source of key material.
3. `void engineInit(ManagerFactoryParameters spec)`: This method initializes this KeyManagerFactorySpi with a source of key material.
4. `String engineToString()`: This method returns a string representation of this KeyManagerFactorySpi.
5. `KeyManagerFactorySpi()`: Constructor for creating a new KeyManagerFactorySpi instance.
================================================================

Sample: 6 KeyStoreBuilderParameters
----------------------------------------------------------------
1. `List<KeyStore.Builder> getKeyStoreBuilders()`: This method returns a List of KeyStore Builders encapsulated in the KeyStoreBuilderParameters object.
2. `int hashCode()`: This method returns the hash code value for the KeyStoreBuilderParameters object.
3. `boolean equals(Object obj)`: This method compares the KeyStoreBuilderParameters object with the specified object for equality.
4. `String toString()`: This method returns a string representation of the KeyStoreBuilderParameters object.
5. `KeyStoreBuilderParameters(List<KeyStore.Builder> keyStoreBuilders)`: Constructor that creates a new KeyStoreBuilderParameters object with the specified List of KeyStore Builders.
================================================================

Sample: 7 SNIHostName
----------------------------------------------------------------
1. `String getAsciiName()`: This method returns the ASCII-encoded server name.
2. `byte[] getEncoded()`: This method returns the encoded server name.
3. `boolean equals(Object obj)`: This method compares this SNIHostName to the specified object.
4. `int hashCode()`: This method returns a hash code value for the object.
5. `String toString()`: This method returns a string representation of the object.
================================================================

Sample: 8 SNIMatcher
----------------------------------------------------------------
1. `SNIMatcher clone()`: This method creates and returns a copy of this SNIMatcher instance.
2. `boolean matches(SNIServerName serverName)`: This method checks if the given SNIServerName instance matches the criteria specified by this SNIMatcher.
3. `int type()`: This method returns the type of the SNIMatcher.
4. `String toString()`: This method returns a string representation of the SNIMatcher.
5. `boolean equals(Object obj)`: This method checks if the specified object is equal to this SNIMatcher instance.
================================================================

Sample: 9 SNIServerName
----------------------------------------------------------------
1. `String getType()`: This method returns the type of the server name.
2. `byte[] getEncoded()`: This method returns the encoded form of the server name.
3. `String toString()`: This method returns a string representation of the server name.
4. `boolean equals(Object obj)`: This method compares this server name to the specified object.
5. `int hashCode()`: This method returns a hash code value for the server name.
================================================================

Sample: 10 SSLContext
----------------------------------------------------------------
1. `static SSLContext getInstance(String protocol)`: This method returns a SSLContext object for the specified protocol.
2. `void init(KeyManager[] km, TrustManager[] tm, SecureRandom random) throws KeyManagementException`: This method initializes this context with the given key managers, trust managers, and secure random number generator.
3. `SSLSocketFactory getSocketFactory()`: This method returns the default SSL socket factory of this context.
4. `SSLServerSocketFactory getServerSocketFactory()`: This method returns the default SSL server socket factory of this context.
5. `SSLEngine createSSLEngine()`: This method creates a new SSLEngine using this context's configuration.
================================================================

Sample: 11 SSLContextSpi
----------------------------------------------------------------
1. `SSLContextSpi engineInit(KeyManager[] km, TrustManager[] tm, SecureRandom sr)`: This method initializes this SSLContextSpi with the given key and trust managers, and a source of randomness.
2. `SSLSocketFactory engineGetSocketFactory()`: This method returns the SSL socket factory for this SSLContextSpi.
3. `SSLServerSocketFactory engineGetServerSocketFactory()`: This method returns the SSL server socket factory for this SSLContextSpi.
4. `SSLSessionContext engineGetServerSessionContext()`: This method returns the SSL session context for server-side SSL sessions.
5. `SSLSessionContext engineGetClientSessionContext()`: This method returns the SSL session context for client-side SSL sessions.
================================================================

Sample: 12 SSLEngine
----------------------------------------------------------------
1. `void beginHandshake()`: Initiates the SSL/TLS handshake.
2. `SSLEngineResult wrap(ByteBuffer[] srcs, int offset, int length, ByteBuffer dst)`: Wraps outbound application data into SSL/TLS packets.
3. `SSLEngineResult unwrap(ByteBuffer src, ByteBuffer[] dsts, int offset, int length)`: Unwraps inbound SSL/TLS packets into application data.
4. `void closeInbound()`: Signals that no more inbound data will be sent.
5. `void closeOutbound()`: Signals that no more outbound data will be sent.
================================================================

Sample: 13 SSLEngineResult
----------------------------------------------------------------
1. `int bytesConsumed()`: Returns the number of bytes consumed from the input buffer in the SSLEngineResult.
2. `int bytesProduced()`: Returns the number of bytes produced in the SSLEngineResult.
3. `SSLEngineResult.HandshakeStatus getHandshakeStatus()`: Returns the HandshakeStatus in the SSLEngineResult.
4. `SSLEngineResult.Status getStatus()`: Returns the Status in the SSLEngineResult.
5. `Runnable getHandshakeStatus()`: Returns the Runnable task to be executed for the HandshakeStatus in the SSLEngineResult.
================================================================

Sample: 14 SSLParameters
----------------------------------------------------------------
1. `String[] getCipherSuites()`: This method returns an array of the cipher suites that are enabled for use on this connection.
2. `String[] getProtocols()`: This method returns an array of the protocols that are enabled for use on this connection.
3. `void setCipherSuites(String[] cipherSuites)`: This method sets the cipher suites to be enabled for use on this connection.
4. `void setProtocols(String[] protocols)`: This method sets the protocols to be enabled for use on this connection.
5. `void setEndpointIdentificationAlgorithm(String algorithm)`: This method sets the endpoint identification algorithm to be used when verifying the endpoint's hostname.
================================================================

Sample: 15 SSLPermission
----------------------------------------------------------------
1. `String getName()`: This method returns the name of the SSLPermission.
2. `boolean implies(Permission permission)`: This method checks if the specified permission is implied by this SSLPermission.
3. `SSLPermission(String name)`: Constructor that creates a new SSLPermission with the specified name.
4. `int hashCode()`: This method returns the hash code value for this SSLPermission.
5. `boolean equals(Object obj)`: This method checks if this SSLPermission is equal to the specified object.
================================================================

Sample: 16 SSLServerSocket
----------------------------------------------------------------
1. `SSLParameters getSSLParameters()`: This method returns the SSLParameters object associated with this SSLServerSocket.
2. `String[] getEnabledCipherSuites()`: This method returns an array of cipher suites that are currently enabled for use on this SSLServerSocket.
3. `String[] getSupportedCipherSuites()`: This method returns an array of the cipher suites that are supported by this SSLServerSocket.
4. `void setNeedClientAuth(boolean need)`: This method sets whether this SSLServerSocket needs client authentication.
5. `void setWantClientAuth(boolean want)`: This method sets whether this SSLServerSocket wants client authentication.
================================================================

Sample: 17 SSLServerSocketFactory
----------------------------------------------------------------
1. `SSLServerSocket createServerSocket(int port)`: This method creates a SSLServerSocket bound to the specified port.
2. `SSLServerSocket createServerSocket(int port, int backlog)`: This method creates a SSLServerSocket bound to the specified port with the specified backlog.
3. `SSLServerSocket createServerSocket(int port, int backlog, InetAddress address)`: This method creates a SSLServerSocket bound to the specified port with the specified backlog and local address.
4. `SSLServerSocket createServerSocket()`: This method creates a SSLServerSocket without binding it to any specific port.
5. `String[] getDefaultCipherSuites()`: This method returns the names of the cipher suites that are enabled by default.
================================================================

Sample: 18 SSLSessionBindingEvent
----------------------------------------------------------------
1. `String getName()`: This method returns the name of the attribute whose binding has changed.
2. `Object getValue()`: This method returns the value of the attribute whose binding has changed.
3. `SSLSession getSession()`: This method returns the SSL session associated with the event.
4. `SSLSessionBindingEvent(SSLSession session, String name)`: Constructor for SSLSessionBindingEvent class with SSLSession and attribute name as parameters.
5. `void valueBound(SSLSessionBindingEvent event)`: This method is called when an attribute is added to a session.
================================================================

Sample: 19 SSLSocket
----------------------------------------------------------------
1. `void startHandshake()`: This method initiates the SSL handshake between the client and server.
2. `SSLSession getSession()`: This method returns the SSL session associated with this SSLSocket.
3. `void setEnabledCipherSuites(String[] suites)`: This method sets the list of cipher suites that will be used in the SSL handshake.
4. `void setEnabledProtocols(String[] protocols)`: This method sets the list of protocols that will be enabled for use on this SSLSocket.
5. `void setNeedClientAuth(boolean need)`: This method sets whether the client is required to authenticate itself during the SSL handshake.
================================================================

Sample: 20 SSLSocketFactory
----------------------------------------------------------------
1. `SSLSocket createSocket(String host, int port)`: This method creates a new SSLSocket connected to the specified host and port.
2. `SSLSocket createSocket(InetAddress address, int port)`: This method creates a new SSLSocket connected to the specified InetAddress and port.
3. `SSLSocket createSocket(Socket s, String host, int port, boolean autoClose)`: This method creates a new SSLSocket connected to the specified host and port, using an existing socket for the underlying connection.
4. `SSLSocket createSocket(InetAddress address, int port, InetAddress localAddress, int localPort)`: This method creates a new SSLSocket connected to the specified InetAddress and port, using the specified local address and port.
5. `SSLSocket createSocket(Socket s, InputStream consumed, boolean autoClose)`: This method creates a new SSLSocket connected to the specified host and port, using an existing socket for the underlying connection and consuming the specified input stream.
================================================================

Sample: 21 StandardConstants
----------------------------------------------------------------
1. `int getSecurityPropertyInt(String property)`: This method returns the integer value of the specified security property.
2. `String getSecurityPropertyString(String property)`: This method returns the string value of the specified security property.
3. `boolean isConstraintViolationException(Throwable cause)`: This method checks if the specified Throwable is a constraint violation exception.
4. `boolean isSecurityPropertySupported(String property)`: This method checks if the specified security property is supported.
5. `boolean isSecurityPropertySupported(String property, String value)`: This method checks if the specified security property supports the specified value.
================================================================

Sample: 22 TrustManagerFactory
----------------------------------------------------------------
1. `String getDefaultAlgorithm()`: This method returns the default algorithm name for the TrustManagerFactory.
2. `TrustManager[] getTrustManagers()`: This method returns the array of TrustManagers initialized with the factory's key material.
3. `String getAlgorithm()`: This method returns the algorithm name of this TrustManagerFactory.
4. `void init(KeyStore ks)`: This method initializes this TrustManagerFactory with a source of certificate authorities and related trust material.
5. `void init(ManagerFactoryParameters spec)`: This method initializes this TrustManagerFactory with a source of certification paths and related trust material.
================================================================

Sample: 23 TrustManagerFactorySpi
----------------------------------------------------------------
1. `TrustManager[] engineGetTrustManagers()`: This method returns an array of TrustManagers based on the implementation.
2. `void engineInit(KeyStore ks)`: This method initializes this TrustManagerFactorySpi with a source of certificate authorities and related trust material.
3. `void engineInit(ManagerFactoryParameters spec)`: This method initializes this TrustManagerFactorySpi with a source of provider-specific parameters.
4. `TrustManagerFactorySpi engineGetInstance(String algorithm)`: This method returns a new instance of the specified TrustManagerFactorySpi implementation.
5. `String engineGetAlgorithm()`: This method returns the algorithm name of this TrustManagerFactorySpi.
================================================================

Sample: 24 X509ExtendedKeyManager
----------------------------------------------------------------
1. `String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket)`: This method chooses an alias for the client side of the connection.
2. `String chooseServerAlias(String keyType, Principal[] issuers, Socket socket)`: This method chooses an alias for the server side of the connection.
3. `X509Certificate[] getCertificateChain(String alias)`: This method returns the certificate chain associated with the given alias.
4. `String[] getClientAliases(String keyType, Principal[] issuers)`: This method returns all the client aliases that match the specified key type and issuers.
5. `String[] getServerAliases(String keyType, Principal[] issuers)`: This method returns all the server aliases that match the specified key type and issuers.
================================================================

Sample: 25 X509ExtendedTrustManager
----------------------------------------------------------------
1. `void checkClientTrusted(X509Certificate[] chain, String authType, Socket socket)`: This method checks whether the specified certificate chain can be trusted for client authentication on the specified socket.
2. `void checkServerTrusted(X509Certificate[] chain, String authType, Socket socket)`: This method checks whether the specified certificate chain can be trusted for server authentication on the specified socket.
3. `void checkClientTrusted(X509Certificate[] chain, String authType, SSLEngine engine)`: This method checks whether the specified certificate chain can be trusted for client authentication on the specified SSL engine.
4. `void checkServerTrusted(X509Certificate[] chain, String authType, SSLEngine engine)`: This method checks whether the specified certificate chain can be trusted for server authentication on the specified SSL engine.
5. `X509Certificate[] getAcceptedIssuers()`: This method returns an array of certificate authorities that are trusted for authenticating peers.
================================================================

