Sample: DSAGenParameterSpec_1
----------------------------------------------------------------
stdout:
Length of the prime P: 1024

================================================================

Sample: DSAGenParameterSpec_2
----------------------------------------------------------------
stdout:
Subprime Q Length: 160

================================================================

Sample: DSAGenParameterSpec_3
----------------------------------------------------------------
stdout:
Subprime Q Length: 160

================================================================

Sample: DSAGenParameterSpec_4
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.IllegalArgumentException: seedLen must be equal to or greater than subprimeQLen
	at java.base/java.security.spec.DSAGenParameterSpec.<init>(DSAGenParameterSpec.java:94)
	at DSAGenParameterSpec_4.main(DSAGenParameterSpec_4.java:5)

================================================================

Sample: DSAParameterSpec_1
----------------------------------------------------------------
stdout:
Prime p: 11

================================================================

Sample: DSAParameterSpec_2
----------------------------------------------------------------
stdout:
Sub-prime q: 5

================================================================

Sample: DSAParameterSpec_3
----------------------------------------------------------------
stdout:
Base g: 7

================================================================

Sample: DSAPrivateKeySpec_1
----------------------------------------------------------------
stdout:
Private Key x: 1234567890

================================================================

Sample: DSAPrivateKeySpec_2
----------------------------------------------------------------
stdout:
Prime p: 9876543210

================================================================

Sample: DSAPrivateKeySpec_3
----------------------------------------------------------------
stdout:
Sub-prime q: 13579

================================================================

Sample: DSAPrivateKeySpec_4
----------------------------------------------------------------
stdout:
Base g: 2468135790

================================================================

Sample: DSAPublicKeySpec_1
----------------------------------------------------------------
stdout:
Public Key Y: 1234567890

================================================================

Sample: ECFieldFp_1
----------------------------------------------------------------
stdout:
Prime value: 13

================================================================

Sample: ECFieldFp_2
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/ECFieldFp_2.java:5: error: incompatible types: int cannot be converted to BigInteger
        ECFieldFp ecField = new ECFieldFp(11); // Create an instance of ECFieldFp with prime p = 11
                                          ^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
1 error


================================================================

Sample: ECFieldFp_3
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/ECFieldFp_3.java:5: error: incompatible types: int cannot be converted to BigInteger
        ECFieldFp field1 = new ECFieldFp(7);
                                         ^
./Data/java_security_spec/javaFiles/ECFieldFp_3.java:6: error: incompatible types: int cannot be converted to BigInteger
        ECFieldFp field2 = new ECFieldFp(7);
                                         ^
./Data/java_security_spec/javaFiles/ECFieldFp_3.java:11: error: incompatible types: int cannot be converted to BigInteger
        ECFieldFp field3 = new ECFieldFp(11);
                                         ^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
3 errors


================================================================

Sample: ECFieldFp_4
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/ECFieldFp_4.java:5: error: incompatible types: int cannot be converted to BigInteger
        ECFieldFp ecField = new ECFieldFp(10); // Example value for the prime modulus
                                          ^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
1 error


================================================================

Sample: ECGenParameterSpec_1
----------------------------------------------------------------
stdout:
EC domain parameter name: secp256r1

================================================================

Sample: ECPoint_4
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/ECPoint_4.java:5: error: incompatible types: int cannot be converted to BigInteger
        ECPoint point1 = new ECPoint(1, 2);
                                     ^
./Data/java_security_spec/javaFiles/ECPoint_4.java:6: error: incompatible types: int cannot be converted to BigInteger
        ECPoint point2 = new ECPoint(1, 2);
                                     ^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
2 errors


================================================================

Sample: ECPrivateKeySpec_1
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.NullPointerException: params is null
	at java.base/java.security.spec.ECPrivateKeySpec.<init>(ECPrivateKeySpec.java:59)
	at ECPrivateKeySpec_1.main(ECPrivateKeySpec_1.java:8)

================================================================

Sample: ECPrivateKeySpec_2
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/ECPrivateKeySpec_2.java:7: error: no suitable constructor found for EllipticCurve(no arguments)
        EllipticCurve curve = new EllipticCurve();
                              ^
    constructor EllipticCurve.EllipticCurve(ECField,BigInteger,BigInteger) is not applicable
      (actual and formal argument lists differ in length)
    constructor EllipticCurve.EllipticCurve(ECField,BigInteger,BigInteger,byte[]) is not applicable
      (actual and formal argument lists differ in length)
1 error


================================================================

Sample: ECPublicKeySpec_1
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/ECPublicKeySpec_1.java:7: error: incompatible types: int cannot be converted to BigInteger
        ECPoint point = new ECPoint(1, 2);
                                    ^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
1 error


================================================================

Sample: ECPublicKeySpec_2
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.NullPointerException: w is null
	at java.base/java.security.spec.ECPublicKeySpec.<init>(ECPublicKeySpec.java:57)
	at ECPublicKeySpec_2.main(ECPublicKeySpec_2.java:7)

================================================================

Sample: EllipticCurve_5
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/EllipticCurve_5.java:6: error: ECField is abstract; cannot be instantiated
        ECField field = new ECField(10);
                        ^
./Data/java_security_spec/javaFiles/EllipticCurve_5.java:7: error: incompatible types: int cannot be converted to BigInteger
        EllipticCurve curve1 = new EllipticCurve(field, 5, 7);
                                                        ^
./Data/java_security_spec/javaFiles/EllipticCurve_5.java:8: error: incompatible types: int cannot be converted to BigInteger
        EllipticCurve curve2 = new EllipticCurve(field, 5, 7);
                                                        ^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
3 errors


================================================================

Sample: EncodedKeySpec_1
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/EncodedKeySpec_1.java:5: error: EncodedKeySpec is abstract; cannot be instantiated
        EncodedKeySpec keySpec = new EncodedKeySpec(new byte[]{1, 2, 3, 4, 5});
                                 ^
1 error


================================================================

Sample: EncodedKeySpec_2
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/EncodedKeySpec_2.java:5: error: EncodedKeySpec is abstract; cannot be instantiated
        EncodedKeySpec keySpec = new EncodedKeySpec(new byte[]{});
                                 ^
1 error


================================================================

Sample: MGF1ParameterSpec_1
----------------------------------------------------------------
stdout:
Message digest algorithm: SHA-256

================================================================

Sample: PKCS8EncodedKeySpec_1
----------------------------------------------------------------
stdout:
Encoded key: [1, 2, 3, 4, 5]

================================================================

Sample: PKCS8EncodedKeySpec_2
----------------------------------------------------------------
stdout:
Format: PKCS#8

================================================================

Sample: PSSParameterSpec_1
----------------------------------------------------------------
stdout:
Salt Length: 20

================================================================

Sample: PSSParameterSpec_2
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/PSSParameterSpec_2.java:5: error: no suitable constructor found for PSSParameterSpec(String,String,int,int)
        PSSParameterSpec pssParamSpec = new PSSParameterSpec("SHA-256", "MGF1", PSSParameterSpec.DEFAULT.getSaltLength(), PSSParameterSpec.DEFAULT.getTrailerField());
                                        ^
    constructor PSSParameterSpec.PSSParameterSpec() is not applicable
      (actual and formal argument lists differ in length)
    constructor PSSParameterSpec.PSSParameterSpec(String,String,AlgorithmParameterSpec,int,int) is not applicable
      (actual and formal argument lists differ in length)
    constructor PSSParameterSpec.PSSParameterSpec(int) is not applicable
      (actual and formal argument lists differ in length)
1 error


================================================================

Sample: PSSParameterSpec_3
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/PSSParameterSpec_3.java:5: error: cannot find symbol
        PSSParameterSpec pssParamSpec = new PSSParameterSpec("SHA-256", "MGF1", PSSParameterSpec.DEFAULT_MGF_DIGEST, PSSParameterSpec.DEFAULT_SALT_LENGTH, PSSParameterSpec.TRAILER_FIELD_BC);
                                                                                                ^
  symbol:   variable DEFAULT_MGF_DIGEST
  location: class PSSParameterSpec
./Data/java_security_spec/javaFiles/PSSParameterSpec_3.java:5: error: cannot find symbol
        PSSParameterSpec pssParamSpec = new PSSParameterSpec("SHA-256", "MGF1", PSSParameterSpec.DEFAULT_MGF_DIGEST, PSSParameterSpec.DEFAULT_SALT_LENGTH, PSSParameterSpec.TRAILER_FIELD_BC);
                                                                                                                                     ^
  symbol:   variable DEFAULT_SALT_LENGTH
  location: class PSSParameterSpec
2 errors


================================================================

Sample: PSSParameterSpec_5
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/PSSParameterSpec_5.java:5: error: incompatible types: String cannot be converted to AlgorithmParameterSpec
        PSSParameterSpec pssParamSpec = new PSSParameterSpec("SHA-256", "MGF1", "MGF1ParameterSpec.SHA-256", 32, 1);
                                                                                ^
./Data/java_security_spec/javaFiles/PSSParameterSpec_5.java:6: error: cannot find symbol
        AlgorithmParameterSpec mgfParams = pssParamSpec.getMGFParameters();
        ^
  symbol:   class AlgorithmParameterSpec
  location: class PSSParameterSpec_5
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
2 errors


================================================================

Sample: RSAKeyGenParameterSpec_2
----------------------------------------------------------------
stdout:
Public Exponent: 65537

================================================================

Sample: RSAKeyGenParameterSpec_4
----------------------------------------------------------------
stdout:
Public Exponent: 65537

================================================================

Sample: RSAKeyGenParameterSpec_5
----------------------------------------------------------------
stdout:
RSA key size: 1024

================================================================

Sample: RSAMultiPrimePrivateCrtKeySpec_1
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/RSAMultiPrimePrivateCrtKeySpec_1.java:7: error: no suitable constructor found for RSAMultiPrimePrivateCrtKeySpec(no arguments)
        RSAMultiPrimePrivateCrtKeySpec keySpec = new RSAMultiPrimePrivateCrtKeySpec(
                                                 ^
    constructor RSAMultiPrimePrivateCrtKeySpec.RSAMultiPrimePrivateCrtKeySpec(BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,RSAOtherPrimeInfo[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor RSAMultiPrimePrivateCrtKeySpec.RSAMultiPrimePrivateCrtKeySpec(BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,RSAOtherPrimeInfo[],AlgorithmParameterSpec) is not applicable
      (actual and formal argument lists differ in length)
1 error


================================================================

Sample: RSAMultiPrimePrivateCrtKeySpec_2
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.NullPointerException: the privateExponent parameter must be non-null
	at java.base/java.util.Objects.requireNonNull(Objects.java:235)
	at java.base/java.security.spec.RSAMultiPrimePrivateCrtKeySpec.<init>(RSAMultiPrimePrivateCrtKeySpec.java:140)
	at java.base/java.security.spec.RSAMultiPrimePrivateCrtKeySpec.<init>(RSAMultiPrimePrivateCrtKeySpec.java:94)
	at RSAMultiPrimePrivateCrtKeySpec_2.main(RSAMultiPrimePrivateCrtKeySpec_2.java:7)

================================================================

Sample: RSAMultiPrimePrivateCrtKeySpec_3
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/RSAMultiPrimePrivateCrtKeySpec_3.java:16: error: incompatible types: BigInteger[] cannot be converted to RSAOtherPrimeInfo[]
                new BigInteger[]{new BigInteger("otherPrimeInfo1"), new BigInteger("otherPrimeInfo2")} // Example otherPrimeInfo values
                ^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
1 error


================================================================

Sample: RSAMultiPrimePrivateCrtKeySpec_4
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/RSAMultiPrimePrivateCrtKeySpec_4.java:7: error: no suitable constructor found for RSAMultiPrimePrivateCrtKeySpec(BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger[],BigInteger[],BigInteger[])
        RSAMultiPrimePrivateCrtKeySpec keySpec = new RSAMultiPrimePrivateCrtKeySpec(
                                                 ^
    constructor RSAMultiPrimePrivateCrtKeySpec.RSAMultiPrimePrivateCrtKeySpec(BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,RSAOtherPrimeInfo[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor RSAMultiPrimePrivateCrtKeySpec.RSAMultiPrimePrivateCrtKeySpec(BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,RSAOtherPrimeInfo[],AlgorithmParameterSpec) is not applicable
      (actual and formal argument lists differ in length)
1 error


================================================================

Sample: RSAMultiPrimePrivateCrtKeySpec_5
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/RSAMultiPrimePrivateCrtKeySpec_5.java:6: error: no suitable constructor found for RSAMultiPrimePrivateCrtKeySpec(BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger[],BigInteger[],BigInteger[])
        RSAMultiPrimePrivateCrtKeySpec keySpec = new RSAMultiPrimePrivateCrtKeySpec(
                                                 ^
    constructor RSAMultiPrimePrivateCrtKeySpec.RSAMultiPrimePrivateCrtKeySpec(BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,RSAOtherPrimeInfo[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor RSAMultiPrimePrivateCrtKeySpec.RSAMultiPrimePrivateCrtKeySpec(BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,RSAOtherPrimeInfo[],AlgorithmParameterSpec) is not applicable
      (actual and formal argument lists differ in length)
1 error


================================================================

Sample: RSAOtherPrimeInfo_2
----------------------------------------------------------------
stdout:
Prime Exponent: 3

================================================================

Sample: RSAOtherPrimeInfo_3
----------------------------------------------------------------
stdout:
Retrieved prime: 65537

================================================================

Sample: RSAPrivateCrtKeySpec_2
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.NumberFormatException: For input string: "modulus"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.math.BigInteger.<init>(BigInteger.java:538)
	at java.base/java.math.BigInteger.<init>(BigInteger.java:676)
	at RSAPrivateCrtKeySpec_2.main(RSAPrivateCrtKeySpec_2.java:6)

================================================================

Sample: RSAPrivateCrtKeySpec_4
----------------------------------------------------------------
stdout:
PrimeP: 1234

================================================================

Sample: RSAPrivateCrtKeySpec_5
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.NumberFormatException: For input string: "modulus"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.math.BigInteger.<init>(BigInteger.java:538)
	at java.base/java.math.BigInteger.<init>(BigInteger.java:676)
	at RSAPrivateCrtKeySpec_5.main(RSAPrivateCrtKeySpec_5.java:6)

================================================================

Sample: RSAPrivateKeySpec_1
----------------------------------------------------------------
stdout:
Retrieved Modulus: 1234567890

================================================================

Sample: RSAPrivateKeySpec_2
----------------------------------------------------------------
stdout:
Private Exponent: 9876543210

================================================================

Sample: RSAPublicKeySpec_1
----------------------------------------------------------------
stdout:
Modulus: 1234567890

================================================================

Sample: RSAPublicKeySpec_2
----------------------------------------------------------------
stdout:
Public Exponent: 65537

================================================================

Sample: X509EncodedKeySpec_1
----------------------------------------------------------------
stdout:
Encoded key: [B@319b92f3

================================================================

Sample: X509EncodedKeySpec_2
----------------------------------------------------------------
stdout:
Encoding format: X.509

================================================================

