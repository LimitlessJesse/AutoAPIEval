Sample: 0 BasicArrowButton
----------------------------------------------------------------
1. `int getDirection()`: This method returns the direction in which the arrow is pointing.
2. `void setDirection(int direction)`: This method sets the direction in which the arrow should point.
3. `int getShadowHeight()`: This method returns the height of the shadow drawn under the arrow.
4. `void setShadowHeight(int shadowHeight)`: This method sets the height of the shadow drawn under the arrow.
5. `int getShadowWidth()`: This method returns the width of the shadow drawn under the arrow.
================================================================

Sample: 1 BasicBorders
----------------------------------------------------------------
1. `Border getButtonBorder()`: This method returns a Border object appropriate for a basic look and feel button.
2. `Border getCheckBoxBorder()`: This method returns a Border object appropriate for a basic look and feel checkbox.
3. `Border getRadioButtonBorder()`: This method returns a Border object appropriate for a basic look and feel radio button.
4. `Border getTextFieldBorder()`: This method returns a Border object appropriate for a basic look and feel text field.
5. `Border getProgressBarBorder()`: This method returns a Border object appropriate for a basic look and feel progress bar.
================================================================

Sample: 2 BasicBorders.ButtonBorder
----------------------------------------------------------------
1. `Insets getBorderInsets(Component c)`: This method returns the border insets for the specified component.
2. `boolean isBorderOpaque()`: This method returns whether or not the border is opaque.
3. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component.
4. `void setBorderInsets(Component c, Insets insets)`: This method sets the border insets for the specified component.
5. `void setBorderOpaque(boolean isOpaque)`: This method sets whether or not the border is opaque.
================================================================

Sample: 3 BasicBorders.FieldBorder
----------------------------------------------------------------
1. `Border getBorder()`: This method returns the border object used for a field.
2. `void setBorder(Border border)`: This method sets the border object to be used for a field.
3. `Insets getBorderInsets(Component c)`: This method returns the border insets for a field.
4. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for a field.
5. `boolean isBorderOpaque()`: This method returns whether the border is opaque.
================================================================

Sample: 4 BasicBorders.MarginBorder
----------------------------------------------------------------
1. `Insets getBorderInsets(Component c)`: This method returns the border insets for the specified component.
2. `boolean isBorderOpaque()`: This method returns true if the border is opaque, false otherwise.
3. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component.
4. `void setBorderInsets(Component c, Insets insets)`: This method sets the border insets for the specified component.
5. `void setBorderOpaque(boolean isOpaque)`: This method sets whether the border is opaque or not.
================================================================

Sample: 5 BasicBorders.MenuBarBorder
----------------------------------------------------------------
1. `Border getMenuBarBorder()`: This method returns the border object for the menu bar.
2. `void setMenuBarBorder(Border border)`: This method sets the border object for the menu bar.
3. `Insets getBorderInsets(Component c, Insets insets)`: This method returns the border insets for the specified component.
4. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component.
5. `boolean isBorderOpaque()`: This method returns a boolean value indicating whether the border is opaque.
================================================================

Sample: 6 BasicBorders.RadioButtonBorder
----------------------------------------------------------------
1. `Border getBorder()`: This method returns the border object used for radio buttons.
2. `Insets getBorderInsets(Component c)`: This method returns the insets of the border.
3. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for a radio button.
4. `boolean isBorderOpaque()`: This method returns whether or not the border is opaque.
5. `void setBorder(Border border)`: This method sets the border for the radio button.
================================================================

Sample: 7 BasicBorders.RolloverButtonBorder
----------------------------------------------------------------
1. `Insets getBorderInsets(Component c)`: This method returns the border insets for the specified component.
2. `boolean isBorderOpaque()`: This method returns whether or not the border is opaque.
3. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component.
4. `void setBorderInsets(Component c, Insets insets)`: This method sets the border insets for the specified component.
5. `void setRollover(boolean b)`: This method sets whether the button is in a rollover state.
================================================================

Sample: 8 BasicBorders.SplitPaneBorder
----------------------------------------------------------------
1. `Insets getBorderInsets(Component c)`: This method returns the border insets for the specified component.
2. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component.
3. `boolean isBorderOpaque()`: This method returns whether the border is opaque.
4. `void setBorderInsets(Component c, Insets insets)`: This method sets the border insets for the specified component.
5. `void setBorderOpaque(boolean isOpaque)`: This method sets whether the border is opaque.
================================================================

Sample: 9 BasicBorders.ToggleButtonBorder
----------------------------------------------------------------
1. `Border getBorder()`: This method returns the border object used for toggle buttons.
2. `void setBorder(Border border)`: This method sets the border object to be used for toggle buttons.
3. `Insets getBorderInsets(Component c)`: This method returns the border insets for the specified component.
4. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component.
5. `boolean isBorderOpaque()`: This method returns whether the border is opaque.
================================================================

Sample: 10 BasicButtonListener
----------------------------------------------------------------
1. void focusGained(FocusEvent e)
2. void focusLost(FocusEvent e)
3. void mouseEntered(MouseEvent e)
4. void mouseExited(MouseEvent e)
5. void mousePressed(MouseEvent e)
================================================================

Sample: 11 BasicButtonUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
3. `void paint(Graphics g, JComponent c)`: This method paints the specified component according to the look and feel.
4. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the component.
5. `Dimension getMinimumSize(JComponent c)`: This method returns the minimum size of the component.
================================================================

Sample: 12 BasicCheckBoxMenuItemUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a given component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a given component.
3. `void paint(Graphics g, JComponent c)`: This method paints the checkbox menu item.
4. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the checkbox menu item.
5. `Dimension getMinimumSize(JComponent c)`: This method returns the minimum size of the checkbox menu item.
================================================================

Sample: 13 BasicCheckBoxUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI delegate for the specified component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI delegate for the specified component.
3. `void paint(Graphics g, JComponent c)`: This method paints the checkbox.
4. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the checkbox.
5. `Dimension getMinimumSize(JComponent c)`: This method returns the minimum size of the checkbox.
================================================================

Sample: 14 BasicColorChooserUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a specified component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a specified component.
3. `void createDefaultChoosers()`: This method creates the default color choosers.
4. `void uninstallDefaultChoosers()`: This method uninstalls the default color choosers.
5. `void installDefaults()`: This method installs the default colors for the UI.
================================================================

Sample: 15 BasicComboBoxEditor
----------------------------------------------------------------
1. `void setItem(Object anObject)`: This method sets the item that should be edited. Parameters: Object anObject - the item to be edited.
2. `Object getItem()`: This method returns the edited item. Return type: Object.
3. `void selectAll()`: This method selects all the text in the editor. No parameters.
4. `void addActionListener(ActionListener l)`: This method adds an ActionListener to the editor. Parameters: ActionListener l - the ActionListener to be added.
5. `void removeActionListener(ActionListener l)`: This method removes an ActionListener from the editor. Parameters: ActionListener l - the ActionListener to be removed.
================================================================

Sample: 16 BasicComboBoxEditor.UIResource
----------------------------------------------------------------
1. `void setItem(Object anObject)`: This method sets the item that should be edited. Parameters: Object anObject - the item to be edited.
2. `Object getItem()`: This method returns the edited item. Return type: Object.
3. `void selectAll()`: This method selects all the text in the editor. No parameters.
4. `void addActionListener(ActionListener l)`: This method adds an ActionListener to the editor. Parameters: ActionListener l - the ActionListener to be added.
5. `void removeActionListener(ActionListener l)`: This method removes an ActionListener from the editor. Parameters: ActionListener l - the ActionListener to be removed.
================================================================

Sample: 17 BasicComboBoxRenderer
----------------------------------------------------------------
1. `Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)`: This method returns a component that renders the specified value in a list cell.

2. `void setBorder(Border b)`: This method sets the border of the combo box renderer.

3. `void setOpaque(boolean isOpaque)`: This method sets whether or not the combo box renderer is opaque.

4. `void setBackground(Color bg)`: This method sets the background color of the combo box renderer.

5. `void setForeground(Color fg)`: This method sets the foreground color of the combo box renderer.
================================================================

Sample: 18 BasicComboBoxRenderer.UIResource
----------------------------------------------------------------
1. `void getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)`: This method returns a component that has been configured to display the specified value.
2. `void setHorizontalAlignment(int alignment)`: This method sets the horizontal alignment of the renderer.
3. `void setVerticalAlignment(int alignment)`: This method sets the vertical alignment of the renderer.
4. `void setBorder(Border b)`: This method sets the border of the renderer.
5. `void setOpaque(boolean isOpaque)`: This method sets whether or not the renderer is opaque.
================================================================

Sample: 19 BasicComboBoxUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI delegate for the specified component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI delegate for the specified component.
3. `void configureEditor()`: This method configures the editor component.
4. `void configureArrowButton()`: This method configures the arrow button component.
5. `void configurePopup()`: This method configures the popup component.
================================================================

Sample: 20 BasicComboPopup
----------------------------------------------------------------
1. `void show()`: This method displays the popup.
2. `void hide()`: This method hides the popup.
3. `boolean isVisible()`: This method returns true if the popup is visible, false otherwise.
4. `void removeAll()`: This method removes all items from the popup.
5. `Component getComponent()`: This method returns the component associated with the popup.
================================================================

Sample: 21 BasicDesktopIconUI
----------------------------------------------------------------
1. `void setIcon(boolean icon)`: This method sets whether the desktop icon is displayed.
2. `void setBounds(int x, int y, int w, int h)`: This method sets the bounds of the desktop icon.
3. `void setUI(BasicDesktopIconUI ui)`: This method sets the BasicDesktopIconUI for the desktop icon.
4. `void updateUI()`: This method updates the UI for the desktop icon.
5. `void setOpaque(boolean isOpaque)`: This method sets whether the desktop icon is opaque.
================================================================

Sample: 22 BasicDesktopPaneUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
3. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the component.
4. `Dimension getMinimumSize(JComponent c)`: This method returns the minimum size of the component.
5. `Dimension getMaximumSize(JComponent c)`: This method returns the maximum size of the component.
================================================================

Sample: 23 BasicDirectoryModel
----------------------------------------------------------------
1. `int getSize()`: This method returns the number of files in the directory model.
2. `File getDirectory(int index)`: This method returns the file at the specified index in the directory model.
3. `void setDirectory(File directory)`: This method sets the directory to be displayed in the directory model.
4. `void setFilter(FileFilter filter)`: This method sets the file filter to be used in the directory model.
5. `void invalidateFileCache()`: This method invalidates the file cache in the directory model.
================================================================

Sample: 24 BasicEditorPaneUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
3. `void installDefaults()`: This method installs the default colors, fonts, and borders.
4. `void uninstallDefaults()`: This method uninstalls the default colors, fonts, and borders.
5. `void installListeners()`: This method installs the listeners for the editor pane.
================================================================

Sample: 25 BasicFileChooserUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI delegate for the specified component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI delegate for the specified component.
3. `File getDirectory()`: This method returns the current directory of the file chooser.
4. `File getSelectedFile()`: This method returns the selected file in the file chooser.
5. `void rescanCurrentDirectory(JFileChooser fc)`: This method rescans the files in the current directory of the file chooser.
================================================================

Sample: 26 BasicFormattedTextFieldUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
3. `void installListeners(JFormattedTextField ftf)`: This method installs the listeners for a formatted text field.
4. `void uninstallListeners(JFormattedTextField ftf)`: This method uninstalls the listeners for a formatted text field.
5. `void propertyChange(PropertyChangeEvent e)`: This method is called when a bound property is changed.
================================================================

Sample: 27 BasicGraphicsUtils
----------------------------------------------------------------
1. `void drawString(Graphics g, String text, int x, int y)`: This method draws the specified text at the specified location using the specified graphics context.
2. `Rectangle getTextBounds(JComponent c, FontMetrics fm, String text, int x, int y)`: This method returns the bounds of the specified text when rendered using the specified font metrics at the specified location.
3. `void drawDashedRect(int x, int y, int width, int height, Graphics g)`: This method draws a dashed rectangle with the specified dimensions at the specified location using the specified graphics context.
4. `void drawEtchedRect(Graphics g, int x, int y, int width, int height)`: This method draws an etched rectangle with the specified dimensions at the specified location using the specified graphics context.
5. `void drawLoweredBevel(Graphics g, int x, int y, int width, int height)`: This method draws a lowered bevel with the specified dimensions at the specified location using the specified graphics context.
================================================================

Sample: 28 BasicHTML
----------------------------------------------------------------
1. `View getHTMLView(JComponent c)`: This method returns an HTML view for the specified Swing component.
2. `String getText(JComponent c)`: This method returns the text content of the specified Swing component.
3. `void setPropertiesFromAttributes(JComponent c, AttributeSet a)`: This method sets the properties of the specified Swing component based on the given attributes.
4. `void updateView(JComponent c)`: This method updates the HTML view for the specified Swing component.
5. `void paint(Graphics g, JComponent c)`: This method paints the HTML view onto the specified Swing component using the given graphics context.
================================================================

Sample: 29 BasicIconFactory
----------------------------------------------------------------
1. `Icon getCheckBoxIcon()`: This method returns an Icon object representing a checkbox icon.
2. `Icon getCheckBoxMenuItemIcon()`: This method returns an Icon object representing a checkbox menu item icon.
3. `Icon getMenuArrowIcon()`: This method returns an Icon object representing a menu arrow icon.
4. `Icon getRadioButtonIcon()`: This method returns an Icon object representing a radio button icon.
5. `Icon getRadioButtonMenuItemIcon()`: This method returns an Icon object representing a radio button menu item icon.
================================================================

Sample: 30 BasicInternalFrameTitlePane
----------------------------------------------------------------
1. `void setIcon(Icon icon)`: This method sets the icon displayed in the title bar.
2. `void setTitle(String title)`: This method sets the title displayed in the title bar.
3. `void setMaximizeIcon(Icon icon)`: This method sets the icon used for maximizing the internal frame.
4. `void setMinimizeIcon(Icon icon)`: This method sets the icon used for minimizing the internal frame.
5. `void setCloseIcon(Icon icon)`: This method sets the icon used for closing the internal frame.
================================================================

Sample: 31 BasicInternalFrameUI
----------------------------------------------------------------
1. `void setNorthPane(JComponent c)`
2. `void setSouthPane(JComponent c)`
3. `void setEastPane(JComponent c)`
4. `void setWestPane(JComponent c)`
5. `void setCenterPane(JComponent c)`
================================================================

Sample: 32 BasicLabelUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
3. `void paint(Graphics g, JComponent c)`: This method paints the label component.
4. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the label component.
5. `Dimension getMinimumSize(JComponent c)`: This method returns the minimum size of the label component.
================================================================

Sample: 33 BasicListUI
----------------------------------------------------------------
1. `int locationToIndex(Point location)`: This method returns the index of the cell at the specified coordinates.
2. `Rectangle getCellBounds(JList list, int index1, int index2)`: This method returns the bounds of the specified range of cells.
3. `void updateLayoutState()`: This method updates the layout state based on the current list properties.
4. `void paint(Graphics g, JComponent c)`: This method paints the list cells.
5. `void installUI(JComponent c)`: This method installs the UI for a component.
================================================================

Sample: 34 BasicLookAndFeel
----------------------------------------------------------------
1. `void uninitialize()`: This method is used to uninitialize the look and feel.
2. `void initialize()`: This method is used to initialize the look and feel.
3. `String getDescription()`: This method returns a description of the look and feel.
4. `String getID()`: This method returns the identifier for the look and feel.
5. `String getName()`: This method returns the name of the look and feel.
================================================================

Sample: 35 BasicMenuBarUI
----------------------------------------------------------------
1. void installUI(JComponent c): This method installs the UI delegate for the specified component.
2. void uninstallUI(JComponent c): This method uninstalls the UI delegate for the specified component.
3. Dimension getPreferredSize(JComponent c): This method returns the preferred size of the specified component.
4. Dimension getMinimumSize(JComponent c): This method returns the minimum size of the specified component.
5. Dimension getMaximumSize(JComponent c): This method returns the maximum size of the specified component.
================================================================

Sample: 36 BasicMenuItemUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
3. `void paint(Graphics g, JComponent c)`: This method paints the specified component.
4. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the specified component.
5. `Dimension getMinimumSize(JComponent c)`: This method returns the minimum size of the specified component.
================================================================

Sample: 37 BasicMenuUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI delegate for the specified component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI delegate for the specified component.
3. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the specified component.
4. `Dimension getMinimumSize(JComponent c)`: This method returns the minimum size of the specified component.
5. `Dimension getMaximumSize(JComponent c)`: This method returns the maximum size of the specified component.
================================================================

Sample: 38 BasicOptionPaneUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
3. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size for the specified component.
4. `void selectInitialValue(JOptionPane op)`: This method selects the initial value for the specified JOptionPane.
5. `void showMessage(JOptionPane op, int messageType)`: This method displays a message using the specified JOptionPane and message type.
================================================================

Sample: 39 BasicOptionPaneUI.ButtonAreaLayout
----------------------------------------------------------------
1. `void layoutContainer(Container parent)`: This method lays out the specified container.
2. `Dimension preferredLayoutSize(Container parent)`: This method calculates the preferred size dimensions for the specified container.
3. `Dimension minimumLayoutSize(Container parent)`: This method calculates the minimum size dimensions for the specified container.
4. `Dimension maximumLayoutSize(Container target)`: This method calculates the maximum size dimensions for the specified container.
5. `void addLayoutComponent(String name, Component comp)`: This method adds the specified component to the layout.
================================================================

Sample: 40 BasicPanelUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
3. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the component.
4. `Dimension getMinimumSize(JComponent c)`: This method returns the minimum size of the component.
5. `Dimension getMaximumSize(JComponent c)`: This method returns the maximum size of the component.
================================================================

Sample: 41 BasicPasswordFieldUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
3. `void paint(Graphics g, JComponent c)`: This method paints the password field.
4. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the password field.
5. `void update(Graphics g, JComponent c)`: This method updates the password field.
================================================================

Sample: 42 BasicPopupMenuSeparatorUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a specified component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a specified component.
3. `void paint(Graphics g, JComponent c)`: This method paints the separator on the specified component using the provided graphics context.
4. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the separator on the specified component.
5. `Dimension getMinimumSize(JComponent c)`: This method returns the minimum size of the separator on the specified component.
================================================================

Sample: 43 BasicPopupMenuUI
----------------------------------------------------------------
1. `void installDefaults()`
2. `void installListeners()`
3. `void installKeyboardActions()`
4. `void uninstallDefaults()`
5. `void uninstallListeners()`
================================================================

Sample: 44 BasicProgressBarUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI delegate for the specified component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI delegate for the specified component.
3. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the progress bar.
4. `void paintDeterminate(Graphics g, JComponent c)`: This method paints the progress bar for the determinate mode.
5. `void paintIndeterminate(Graphics g, JComponent c)`: This method paints the progress bar for the indeterminate mode.
================================================================

Sample: 45 BasicRadioButtonMenuItemUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
3. `void paint(Graphics g, JComponent c)`: This method paints the specified component according to the look and feel.
4. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size for the specified component.
5. `Dimension getMinimumSize(JComponent c)`: This method returns the minimum size for the specified component.
================================================================

Sample: 46 BasicRadioButtonUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
3. `Icon getDefaultIcon()`: This method returns the default icon for the radio button.
4. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size for the radio button.
5. `void paintIcon(Graphics g, JComponent c, int x, int y)`: This method paints the icon for the radio button.
================================================================

Sample: 47 BasicRootPaneUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
3. `void installDefaults(JRootPane c)`: This method installs the default properties for a JRootPane component.
4. `void uninstallDefaults(JRootPane c)`: This method uninstalls the default properties for a JRootPane component.
5. `BasicRootPaneUI createUI(JComponent c)`: This method creates a new instance of BasicRootPaneUI for a component.
================================================================

Sample: 48 BasicScrollBarUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI delegate for the specified component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI delegate for the specified component.
3. `void paintThumb(Graphics g, JComponent c, Rectangle thumbBounds)`: This method paints the thumb.
4. `void paintTrack(Graphics g, JComponent c, Rectangle trackBounds)`: This method paints the track.
5. `void paintDecreaseHighlight(Graphics g)`: This method paints the decrease highlight.
================================================================

Sample: 49 BasicScrollPaneUI
----------------------------------------------------------------
1. `JScrollPane createScrollPane(JComponent view)`: This method creates a JScrollPane with the specified view component.
2. `void installUI(JComponent c)`: This method installs the UI for a specified component.
3. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a specified component.
4. `void installListeners(JScrollPane scrollpane)`: This method installs the listeners for a specified JScrollPane component.
5. `void uninstallListeners(JScrollPane scrollpane)`: This method uninstalls the listeners for a specified JScrollPane component.
================================================================

Sample: 50 BasicSeparatorUI
----------------------------------------------------------------
1. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the separator component.
2. `void paint(Graphics g, JComponent c)`: This method paints the separator component using the provided graphics context.
3. `void installUI(JComponent c)`: This method installs the UI for the separator component.
4. `void uninstallUI(JComponent c)`: This method uninstalls the UI for the separator component.
5. `void paintVertical(Graphics g, JSeparator s)`: This method paints a vertical separator using the provided graphics context.
================================================================

Sample: 51 BasicSliderUI
----------------------------------------------------------------
1. `void calculateGeometry()`
2. `int xPositionForValue(int value)`
3. `int yPositionForValue(int value)`
4. `Rectangle getTrackRect()`
5. `Rectangle getThumbRect()`
================================================================

Sample: 52 BasicSpinnerUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI delegate for the specified component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI delegate for the specified component.
3. `void paint(Graphics g, JComponent c)`: This method paints the specified component using the specified graphics context.
4. `void paintBorder(Graphics g, JComponent c)`: This method paints the border of the specified component using the specified graphics context.
5. `void paintComponent(Graphics g, JComponent c)`: This method paints the content area of the specified component using the specified graphics context.
================================================================

Sample: 53 BasicSplitPaneDivider
----------------------------------------------------------------
1. `void setBorder(Border border)`: This method sets the border of the divider.
2. `void setDividerSize(int newSize)`: This method sets the size of the divider.
3. `void setBasicSplitPaneUI(BasicSplitPaneUI ui)`: This method sets the BasicSplitPaneUI for the divider.
4. `void setDividerLocation(int location)`: This method sets the location of the divider.
5. `void setLastDragLocation(int location)`: This method sets the last drag location of the divider.
================================================================

Sample: 54 BasicSplitPaneUI
----------------------------------------------------------------
1. `void setDividerLocation(javax.swing.JSplitPane splitPane, int location)`: This method sets the location of the divider within the split pane.
2. `int getDividerLocation(javax.swing.JSplitPane splitPane)`: This method returns the location of the divider within the split pane.
3. `void setContinuousLayout(javax.swing.JSplitPane splitPane, boolean newContinuousLayout)`: This method sets whether the split pane should continuously layout its components during a drag.
4. `boolean isContinuousLayout(javax.swing.JSplitPane splitPane)`: This method returns whether the split pane continuously layouts its components during a drag.
5. `void resetToPreferredSizes(javax.swing.JSplitPane splitPane)`: This method resets the sizes of the split pane's children to their preferred sizes.
================================================================

Sample: 55 BasicTabbedPaneUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI delegate for the specified component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI delegate for the specified component.
3. `Rectangle getTabBounds(JTabbedPane pane, int index)`: This method returns the bounds of the specified tab in the tabbed pane.
4. `int tabForCoordinate(JTabbedPane pane, int x, int y)`: This method returns the tab index for the specified coordinates within the tabbed pane.
5. `void paint(Graphics g, JComponent c)`: This method paints the tabbed pane.
================================================================

Sample: 56 BasicTableHeaderUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
3. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the component.
4. `void paint(Graphics g, JComponent c)`: This method paints the component.
5. `void update(Graphics g, JComponent c)`: This method updates the component.
================================================================

Sample: 57 BasicTableUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
3. `void paint(Graphics g, JComponent c)`: This method paints the specified component.
4. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the component.
5. `void installDefaults()` : This method installs the default colors, fonts, and other properties for the UI.
================================================================

Sample: 58 BasicTextAreaUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
3. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the component.
4. `Dimension getMinimumSize(JComponent c)`: This method returns the minimum size of the component.
5. `Dimension getMaximumSize(JComponent c)`: This method returns the maximum size of the component.
================================================================

Sample: 59 BasicTextFieldUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
3. `void paint(Graphics g, JComponent c)`: This method paints the specified component.
4. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the specified component.
5. `Dimension getMinimumSize(JComponent c)`: This method returns the minimum size of the specified component.
================================================================

Sample: 60 BasicTextPaneUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
3. `void installDefaults()`: This method installs the default colors, fonts, and borders.
4. `void uninstallDefaults()`: This method uninstalls the default colors, fonts, and borders.
5. `void installListeners()`: This method installs the listeners for the component.
================================================================

Sample: 61 BasicTextUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
3. `View create(Element elem)`: This method creates a view for an element.
4. `void damageRange(JTextComponent t, int p0, int p1)`: This method marks a range of text as needing repaint.
5. `void modelToView(JTextComponent t, int pos, Position.Bias bias)`: This method converts a model location to a view location.
================================================================

Sample: 62 BasicTextUI.BasicCaret
----------------------------------------------------------------
1. `void install(JTextComponent c)`: This method installs the caret in the specified text component.
2. `void deinstall(JTextComponent c)`: This method deinstalls the caret from the specified text component.
3. `void damage(Rectangle r)`: This method causes the caret to repaint the area surrounding the specified rectangle.
4. `void focusGained(FocusEvent e)`: This method is called when the caret gains focus.
5. `void focusLost(FocusEvent e)`: This method is called when the caret loses focus.
================================================================

Sample: 63 BasicTextUI.BasicHighlighter
----------------------------------------------------------------
1. `void install(JTextComponent c)`: This method installs the necessary properties into the JTextComponent.
2. `void deinstall(JTextComponent c)`: This method removes the necessary properties from the JTextComponent.
3. `void paintLayeredHighlights(Graphics g, int p0, int p1, Shape viewBounds, JTextComponent editor, View view)`: This method paints the highlights.
4. `void removeAllHighlights()`: This method removes all highlights.
5. `void changeHighlight(int tag, int p0, int p1)`: This method changes the highlight at the specified position.
================================================================

Sample: 64 BasicToggleButtonUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
3. `BasicToggleButtonUI createUI(JComponent c)`: This method creates a new instance of BasicToggleButtonUI for a component.
4. `void paint(Graphics g, JComponent c)`: This method paints the UI for a component.
5. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size for a component.
================================================================

Sample: 65 BasicToolBarSeparatorUI
----------------------------------------------------------------
1. void installUI(JComponent c): This method installs the UI delegate for the specified component.
2. void uninstallUI(JComponent c): This method uninstalls the UI delegate for the specified component.
3. Dimension getPreferredSize(JComponent c): This method returns the preferred size of the specified component.
4. void paint(Graphics g, JComponent c): This method paints the specified component using the provided graphics context.
5. boolean isOpaque(): This method returns true if the component is opaque, false otherwise.
================================================================

Sample: 66 BasicToolBarUI
----------------------------------------------------------------
1. `void setRollover(boolean rollover)`: This method sets whether or not the toolbar buttons should be in rollover state.
2. `void setFloatable(boolean floatable)`: This method sets whether the toolbar can be dragged around by the user.
3. `void setOrientation(int orientation)`: This method sets the orientation of the toolbar (either HORIZONTAL or VERTICAL).
4. `void setBorderPainted(boolean borderPainted)`: This method sets whether the toolbar should have a border painted around it.
5. `void setMargin(Insets m)`: This method sets the margin between the toolbar's border and its contents.
================================================================

Sample: 67 BasicToolTipUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a specified component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a specified component.
3. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size for the tool tip component.
4. `Dimension getMinimumSize(JComponent c)`: This method returns the minimum size for the tool tip component.
5. `Dimension getMaximumSize(JComponent c)`: This method returns the maximum size for the tool tip component.
================================================================

Sample: 68 BasicTreeUI
----------------------------------------------------------------
1. `void setExpandedState(javax.swing.JTree tree, javax.swing.tree.TreePath path, boolean state)`: This method sets the expanded state of a specified tree path in a JTree component.
2. `void setLeftChildIndent(int newAmount)`: This method sets the amount by which the left child of a node is indented.
3. `void setRightChildIndent(int newAmount)`: This method sets the amount by which the right child of a node is indented.
4. `void setRowHeight(int newRowHeight)`: This method sets the height of each row in the tree.
5. `void setCollapsedIcon(javax.swing.Icon newIcon)`: This method sets the icon used to represent collapsed nodes in the tree.
================================================================

Sample: 69 BasicViewportUI
----------------------------------------------------------------
1. `void setView(javax.swing.JComponent view)`: This method sets the view component for this viewport.
2. `javax.swing.JComponent getView()`: This method returns the view component of this viewport.
3. `void setExtentSize(java.awt.Dimension newExtent)`: This method sets the size of the visible part of the view.
4. `java.awt.Dimension getExtentSize()`: This method returns the size of the visible part of the view.
5. `void setViewPosition(java.awt.Point p)`: This method sets the position of the view within the viewport.
================================================================

Sample: 70 DefaultMenuLayout
----------------------------------------------------------------
1. `void layoutContainer(Container target)`: This method lays out the specified container.
2. `Dimension preferredLayoutSize(Container target)`: This method calculates the preferred size dimensions for the specified container.
3. `Dimension minimumLayoutSize(Container target)`: This method calculates the minimum size dimensions for the specified container.
4. `Dimension maximumLayoutSize(Container target)`: This method calculates the maximum size dimensions for the specified container.
5. `void addLayoutComponent(String name, Component comp)`: This method adds the specified component to the layout.
================================================================

