Sample: 0 AuthorizeCallback
----------------------------------------------------------------
1. `String getAuthenticationID()`: This method returns the authentication ID.
2. `String getAuthorizationID()`: This method returns the authorization ID.
3. `boolean isAuthorized()`: This method returns a boolean indicating whether the authentication ID is authorized to act on behalf of the authorization ID.
4. `void setAuthorized(boolean ok)`: This method sets whether the authentication ID is authorized to act on behalf of the authorization ID.
5. `void setAuthorizedID(String id)`: This method sets the authorization ID.
================================================================

Sample: 1 RealmCallback
----------------------------------------------------------------
1. `String getDefaultRealm()`: This method returns the default realm.
2. `void setRealm(String realm)`: This method sets the realm.
3. `String getRealm()`: This method returns the realm.
4. `void setText(String text)`: This method sets the text for the realm callback.
5. `String getText()`: This method returns the text for the realm callback.
================================================================

Sample: 2 RealmChoiceCallback
----------------------------------------------------------------
1. `String[] getChoices()`: This method returns an array of realm choices.
2. `int getDefaultChoice()`: This method returns the index of the default realm choice.
3. `void setSelectedIndex(int selectedIndex)`: This method sets the selected realm choice index.
4. `int getSelectedIndex()`: This method returns the index of the selected realm choice.
5. `String getSelectedValue()`: This method returns the value of the selected realm choice.
================================================================

Sample: 3 Sasl
----------------------------------------------------------------
1. `SaslClient createSaslClient(String[] mechanisms, String authorizationId, String protocol, String serverName, Map<String, ?> props, CallbackHandler cbh)`: This method creates a new SaslClient using the specified parameters.
2. `SaslServer createSaslServer(String mechanism, String protocol, String serverName, Map<String, ?> props, CallbackHandler cbh)`: This method creates a new SaslServer using the specified parameters.
3. `String[] getMechanismNames(Map<String, ?> props)`: This method returns an array of names of the supported mechanisms.
4. `byte[] evaluateResponse(byte[] response)`: This method evaluates the response data and generates a challenge.
5. `void dispose()`: This method releases any resources associated with this SaslClient or SaslServer instance.
================================================================

