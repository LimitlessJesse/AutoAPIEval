Sample: 0 DateTimeFormatter
----------------------------------------------------------------
1. `static DateTimeFormatter ofPattern(String pattern)`: This method returns a new DateTimeFormatter using the specified pattern.
2. `String format(TemporalAccessor temporal)`: This method formats the specified temporal object using this formatter.
3. `TemporalAccessor parse(CharSequence text)`: This method parses the specified text into a temporal object using this formatter.
4. `TemporalAccessor parse(CharSequence text, ParsePosition position)`: This method parses the specified text into a temporal object using this formatter, starting at the specified position.
5. `TemporalAccessor parseBest(CharSequence text, TemporalQuery<?>... queries)`: This method parses the specified text into a temporal object using this formatter, trying multiple queries to find the best match.
================================================================

Sample: 1 DateTimeFormatterBuilder
----------------------------------------------------------------
1. `java.time.format.DateTimeFormatterBuilder appendLiteral(char literal)`: This method appends a literal to the formatter.
2. `java.time.format.DateTimeFormatterBuilder appendValue(TemporalField field, int width)`: This method appends the value of a date-time field to the formatter.
3. `java.time.format.DateTimeFormatterBuilder parseCaseSensitive()`: This method configures the parser to be case sensitive when parsing text.
4. `java.time.format.DateTimeFormatterBuilder parseLenient()`: This method configures the parser to be lenient when parsing text.
5. `java.time.format.DateTimeFormatterBuilder optionalStart()`: This method starts an optional section of the formatter.
================================================================

Sample: 2 DecimalStyle
----------------------------------------------------------------
1. `char getDecimalSeparator()`: Returns the character used as the decimal separator.
2. `char getDigit()`: Returns the character used for digits in the decimal style.
3. `char getZeroDigit()`: Returns the character used for zero in the decimal style.
4. `DecimalStyle withDecimalSeparator(char decimalSeparator)`: Returns a new DecimalStyle with the specified decimal separator.
5. `DecimalStyle withDigit(char digit)`: Returns a new DecimalStyle with the specified digit character.
================================================================

