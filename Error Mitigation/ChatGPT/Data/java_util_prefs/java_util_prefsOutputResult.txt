Sample: AbstractPreferences_1
----------------------------------------------------------------
output:
./Data/java_util_prefs/javaFiles/AbstractPreferences_1.java:6: error: constructor AbstractPreferences in class AbstractPreferences cannot be applied to given types;
        AbstractPreferences preferences = new AbstractPreferences() {
                                          ^
  required: AbstractPreferences,String
  found:    no arguments
  reason: actual and formal argument lists differ in length
./Data/java_util_prefs/javaFiles/AbstractPreferences_1.java:6: error: <anonymous AbstractPreferences_1$1> is not abstract and does not override abstract method flushSpi() in AbstractPreferences
        AbstractPreferences preferences = new AbstractPreferences() {
                                                                    ^
2 errors


================================================================

Sample: AbstractPreferences_2
----------------------------------------------------------------
output:
./Data/java_util_prefs/javaFiles/AbstractPreferences_2.java:5: error: constructor AbstractPreferences in class AbstractPreferences cannot be applied to given types;
        AbstractPreferences preferences = new AbstractPreferences() {
                                          ^
  required: AbstractPreferences,String
  found:    no arguments
  reason: actual and formal argument lists differ in length
./Data/java_util_prefs/javaFiles/AbstractPreferences_2.java:5: error: <anonymous AbstractPreferences_2$1> is not abstract and does not override abstract method flushSpi() in AbstractPreferences
        AbstractPreferences preferences = new AbstractPreferences() {
                                                                    ^
./Data/java_util_prefs/javaFiles/AbstractPreferences_2.java:23: error: cannot find symbol
                    if (changeListeners != null) {
                        ^
  symbol: variable changeListeners
./Data/java_util_prefs/javaFiles/AbstractPreferences_2.java:24: error: cannot find symbol
                        enqueuePreferenceChangeEvent(key, value);
                        ^
  symbol: method enqueuePreferenceChangeEvent(String,String)
4 errors


================================================================

Sample: AbstractPreferences_3
----------------------------------------------------------------
output:
./Data/java_util_prefs/javaFiles/AbstractPreferences_3.java:5: error: constructor AbstractPreferences in class AbstractPreferences cannot be applied to given types;
        AbstractPreferences preferences = new AbstractPreferences() {
                                          ^
  required: AbstractPreferences,String
  found:    no arguments
  reason: actual and formal argument lists differ in length
./Data/java_util_prefs/javaFiles/AbstractPreferences_3.java:5: error: <anonymous AbstractPreferences_3$1> is not abstract and does not override abstract method flushSpi() in AbstractPreferences
        AbstractPreferences preferences = new AbstractPreferences() {
                                                                    ^
2 errors


================================================================

Sample: AbstractPreferences_4
----------------------------------------------------------------
output:
./Data/java_util_prefs/javaFiles/AbstractPreferences_4.java:5: error: constructor AbstractPreferences in class AbstractPreferences cannot be applied to given types;
        AbstractPreferences preferences = new AbstractPreferences() {
                                          ^
  required: AbstractPreferences,String
  found:    no arguments
  reason: actual and formal argument lists differ in length
./Data/java_util_prefs/javaFiles/AbstractPreferences_4.java:5: error: <anonymous AbstractPreferences_4$1> is not abstract and does not override abstract method flushSpi() in AbstractPreferences
        AbstractPreferences preferences = new AbstractPreferences() {
                                                                    ^
2 errors


================================================================

Sample: AbstractPreferences_5
----------------------------------------------------------------
output:
./Data/java_util_prefs/javaFiles/AbstractPreferences_5.java:6: error: constructor AbstractPreferences in class AbstractPreferences cannot be applied to given types;
        AbstractPreferences preferences = new AbstractPreferences() {
                                          ^
  required: AbstractPreferences,String
  found:    no arguments
  reason: actual and formal argument lists differ in length
./Data/java_util_prefs/javaFiles/AbstractPreferences_5.java:6: error: <anonymous AbstractPreferences_5$1> is not abstract and does not override abstract method flushSpi() in AbstractPreferences
        AbstractPreferences preferences = new AbstractPreferences() {
                                                                    ^
./Data/java_util_prefs/javaFiles/AbstractPreferences_5.java:10: error: cannot find symbol
                lock();
                ^
  symbol: method lock()
3 errors


================================================================

Sample: NodeChangeEvent_1
----------------------------------------------------------------
output:
./Data/java_util_prefs/javaFiles/NodeChangeEvent_1.java:6: error: <anonymous NodeChangeEvent_1$1> is not abstract and does not override abstract method exportSubtree(OutputStream) in Preferences
        NodeChangeEvent event = new NodeChangeEvent(new Preferences() {
                                                                      ^
./Data/java_util_prefs/javaFiles/NodeChangeEvent_1.java:61: error: <anonymous NodeChangeEvent_1$2> is not abstract and does not override abstract method exportSubtree(OutputStream) in Preferences
        }, new Preferences() {
                             ^
2 errors


================================================================

Sample: NodeChangeEvent_2
----------------------------------------------------------------
output:
./Data/java_util_prefs/javaFiles/NodeChangeEvent_2.java:6: error: <anonymous NodeChangeEvent_2$1> is not abstract and does not override abstract method exportSubtree(OutputStream) in Preferences
        NodeChangeEvent event = new NodeChangeEvent(new Preferences() {
                                                                      ^
./Data/java_util_prefs/javaFiles/NodeChangeEvent_2.java:6: error: constructor NodeChangeEvent in class NodeChangeEvent cannot be applied to given types;
        NodeChangeEvent event = new NodeChangeEvent(new Preferences() {
                                ^
  required: Preferences,Preferences
  found:    <anonymous Preferences>
  reason: actual and formal argument lists differ in length
2 errors


================================================================

Sample: Preferences_1
----------------------------------------------------------------
stdout:
Value: value1

================================================================

Sample: Preferences_2
----------------------------------------------------------------
stdout:
Retrieved value: value1

================================================================

Sample: Preferences_3
----------------------------------------------------------------
stdout:
byteArrayKey: AQIDBAU=
isTrue: true
key: value
key1: value1
key2: value2
number: 42

================================================================

Sample: Preferences_4
----------------------------------------------------------------
stdout:
Value for key1: default

================================================================

Sample: Preferences_5
----------------------------------------------------------------
stdout:
Value for key1: value1
Value for key2: value2

================================================================

