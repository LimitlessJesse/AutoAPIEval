Sample: 0 DESedeKeySpec
----------------------------------------------------------------
1. `byte[] getKey()`: This method returns the key in a byte array.
2. `DESedeKeySpec(byte[] key)`: Constructor that creates a DESedeKeySpec object with the provided key.
3. `int getKeySize()`: This method returns the size of the key in bits.
4. `boolean equals(Object obj)`: This method compares the specified object with this key specification for equality.
5. `int hashCode()`: This method returns a hash code value for the key specification.
================================================================

Sample: 1 DESKeySpec
----------------------------------------------------------------
1. `DESKeySpec(byte[] key)`: This method constructs a DES key specification from the provided byte array key.
2. `byte[] getKey()`: This method returns the key in byte array form.
3. `void clear()`: This method clears the key data.
4. `boolean isParityAdjusted()`: This method checks if the key is adjusted for parity.
5. `String toString()`: This method returns a string representation of the key.
================================================================

Sample: 2 DHGenParameterSpec
----------------------------------------------------------------
1. `int getPrimeSize()`: This method returns the size of the prime modulus in bits.
2. `BigInteger getP()`: This method returns the prime modulus P.
3. `BigInteger getG()`: This method returns the base generator G.
4. `DHGenParameterSpec(BigInteger prime, BigInteger generator, int l)`: Constructor that creates a new DHGenParameterSpec with the specified prime modulus, base generator, and size of the random exponent.
5. `int getExponentSize()`: This method returns the size of the random exponent in bits.
================================================================

Sample: 3 DHParameterSpec
----------------------------------------------------------------
1. `BigInteger getP()`: This method returns the prime modulus P.
2. `BigInteger getG()`: This method returns the base generator G.
3. `int getL()`: This method returns the size in bits of the random exponent (private value).
4. `DHParameterSpec(BigInteger p, BigInteger g)`: Constructor that creates a new DHParameterSpec with the specified prime modulus P and base generator G.
5. `boolean equals(Object obj)`: This method compares the specified object with this DHParameterSpec for equality.
================================================================

Sample: 4 DHPrivateKeySpec
----------------------------------------------------------------
1. `BigInteger getX()`: This method returns the private value, x.
2. `DHParameterSpec getParams()`: This method returns the associated parameters.
3. `DHPrivateKeySpec(BigInteger x, DHParameterSpec params)`: Constructor that creates a new DHPrivateKeySpec with the specified private value and parameters.
4. `boolean equals(Object obj)`: This method compares the specified object with this DHPrivateKeySpec for equality.
5. `int hashCode()`: This method returns a hash code value for the DHPrivateKeySpec.
================================================================

Sample: 5 DHPublicKeySpec
----------------------------------------------------------------
1. `BigInteger getY()`: This method returns the public key value, Y.
2. `BigInteger getP()`: This method returns the prime modulus, P.
3. `BigInteger getG()`: This method returns the base generator, G.
4. `DHPublicKeySpec(BigInteger y, BigInteger p, BigInteger g)`: This constructor creates a new DHPublicKeySpec with the specified public key, prime modulus, and base generator.
5. `boolean equals(Object obj)`: This method compares the specified object with this DHPublicKeySpec for equality.
================================================================

Sample: 6 GCMParameterSpec
----------------------------------------------------------------
1. `int getTLen()`: This method returns the length of the authentication tag in bits.
2. `byte[] getIV()`: This method returns the initialization vector (IV) used in the GCM mode.
3. `int getTLenInBits()`: This method returns the length of the authentication tag in bits as an integer.
4. `byte[] getAAD()`: This method returns the additional authenticated data (AAD) used in the GCM mode.
5. `byte[] getNonce()`: This method returns the nonce used in the GCM mode.
================================================================

Sample: 7 IvParameterSpec
----------------------------------------------------------------
1. `byte[] getIV()`: This method returns the initialization vector (IV) as a byte array.
2. `int getOffset()`: This method returns the offset within the IV where the cipher feedback starts.
3. `void setIV(byte[] iv)`: This method sets the initialization vector (IV) using the provided byte array.
4. `void setOffset(int offset)`: This method sets the offset within the IV where the cipher feedback starts.
5. `String toString()`: This method returns a string representation of the IVParameterSpec.
================================================================

Sample: 8 OAEPParameterSpec
----------------------------------------------------------------
1. `String getDigestAlgorithm()`: This method returns the digest algorithm name.
2. `String getMGFAlgorithm()`: This method returns the mask generation function algorithm name.
3. `PSource getPSource()`: This method returns the source of the encoding input P.
4. `AlgorithmParameterSpec getParameterSpec()`: This method returns the algorithm parameter specification.
5. `OAEPParameterSpec clone()`: This method creates and returns a copy of this object.
================================================================

Sample: 9 PBEKeySpec
----------------------------------------------------------------
1. `char[] getPassword()`: This method returns the password.
2. `byte[] getSalt()`: This method returns the salt used for password-based encryption.
3. `int getIterationCount()`: This method returns the iteration count for password-based encryption.
4. `int getKeyLength()`: This method returns the key length for password-based encryption.
5. `PBEKeySpec(char[] password, byte[] salt, int iterationCount, int keyLength)`: Constructor that creates a new PBEKeySpec with the specified password, salt, iteration count, and key length.
================================================================

Sample: 10 PBEParameterSpec
----------------------------------------------------------------
1. `int getIterationCount()`: This method returns the iteration count used for password-based encryption.
2. `byte[] getSalt()`: This method returns the salt used for password-based encryption.
3. `PBEParameterSpec(byte[] salt, int iterationCount)`: Constructor that creates a new PBEParameterSpec with the specified salt and iteration count.
4. `void setIterationCount(int iterationCount)`: This method sets the iteration count used for password-based encryption.
5. `void setSalt(byte[] salt)`: This method sets the salt used for password-based encryption.
================================================================

Sample: 11 PSource
----------------------------------------------------------------
1. `String getAlgorithm()`: This method returns the algorithm name of the PSource.
2. `byte[] getDigestInput()`: This method returns a copy of the digest input used in the PSource.
3. `PSource.PSpecified getPSpecified()`: This method returns the PSpecified object used in the PSource.
4. `int hashCode()`: This method returns the hash code value for the PSource.
5. `String toString()`: This method returns a string representation of the PSource.
================================================================

Sample: 12 PSource.PSpecified
----------------------------------------------------------------
1. `byte[] getValue()`: This method returns the value of the PSource.PSpecified.
2. `String getAlgorithm()`: This method returns the algorithm name of the PSource.PSpecified.
3. `int hashCode()`: This method returns the hash code value for the PSource.PSpecified.
4. `boolean equals(Object obj)`: This method compares the specified object with the PSource.PSpecified for equality.
5. `String toString()`: This method returns a string representation of the PSource.PSpecified.
================================================================

Sample: 13 RC2ParameterSpec
----------------------------------------------------------------
1. `int getEffectiveKeyBits()`: This method returns the effective key size in bits.
2. `byte[] getIV()`: This method returns the initialization vector (IV).
3. `int getIterationCount()`: This method returns the iteration count.
4. `RC2ParameterSpec(int effectiveKeyBits, byte[] iv)`: Constructor that creates a new RC2ParameterSpec with the specified effective key size and IV.
5. `RC2ParameterSpec(int effectiveKeyBits, byte[] iv, int iterationCount)`: Constructor that creates a new RC2ParameterSpec with the specified effective key size, IV, and iteration count.
================================================================

Sample: 14 RC5ParameterSpec
----------------------------------------------------------------
1. `int getRounds()`: This method returns the number of rounds in the RC5 algorithm.
2. `int getWordSize()`: This method returns the word size in bits for the RC5 algorithm.
3. `byte[] getIV()`: This method returns the initialization vector (IV) used in the RC5 algorithm.
4. `int getBlockSize()`: This method returns the block size in bytes for the RC5 algorithm.
5. `RC5ParameterSpec(int version, int rounds, int wordSize, int blockSize)`: Constructor that creates a new RC5ParameterSpec with the specified version, number of rounds, word size, and block size.
================================================================

Sample: 15 SecretKeySpec
----------------------------------------------------------------
1. `byte[] getEncoded()`: This method returns the key material of the secret key.
2. `String getAlgorithm()`: This method returns the name of the algorithm associated with the secret key.
3. `String getFormat()`: This method returns the name of the format of the encoded key.
4. `int hashCode()`: This method returns a hash code value for the object.
5. `boolean equals(Object obj)`: This method compares the specified object with this secret key for equality.
================================================================

