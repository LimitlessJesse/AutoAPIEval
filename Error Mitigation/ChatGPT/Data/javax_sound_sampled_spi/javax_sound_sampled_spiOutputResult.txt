Sample: AudioFileReader_1
----------------------------------------------------------------
output:
./Data/javax_sound_sampled_spi/javaFiles/AudioFileReader_1.java:9: error: <anonymous AudioFileReader_1$1> is not abstract and does not override abstract method getAudioInputStream(File) in AudioFileReader
        AudioFileReader audioFileReader = new AudioFileReader() {
                                                                ^
1 error


================================================================

Sample: AudioFileReader_3
----------------------------------------------------------------
output:
./Data/javax_sound_sampled_spi/javaFiles/AudioFileReader_3.java:9: error: <anonymous AudioFileReader_3$1> is not abstract and does not override abstract method getAudioInputStream(File) in AudioFileReader
        AudioFileReader audioFileReader = new AudioFileReader() {
                                                                ^
1 error


================================================================

Sample: AudioFileReader_4
----------------------------------------------------------------
output:
./Data/javax_sound_sampled_spi/javaFiles/AudioFileReader_4.java:9: error: <anonymous AudioFileReader_4$1> is not abstract and does not override abstract method getAudioInputStream(File) in AudioFileReader
        AudioFileReader audioFileReader = new AudioFileReader() {
                                                                ^
1 error


================================================================

Sample: AudioFileReader_5
----------------------------------------------------------------
output:
./Data/javax_sound_sampled_spi/javaFiles/AudioFileReader_5.java:9: error: <anonymous AudioFileReader_5$1> is not abstract and does not override abstract method getAudioInputStream(File) in AudioFileReader
        AudioFileReader audioFileReader = new AudioFileReader() {
                                                                ^
1 error


================================================================

Sample: AudioFileWriter_1
----------------------------------------------------------------
output:
./Data/javax_sound_sampled_spi/javaFiles/AudioFileWriter_1.java:6: error: <anonymous AudioFileWriter_1$1> is not abstract and does not override abstract method write(AudioInputStream,Type,File) in AudioFileWriter
        AudioFileWriter audioFileWriter = new AudioFileWriter() {
                                                                ^
1 error


================================================================

Sample: AudioFileWriter_2
----------------------------------------------------------------
output:
./Data/javax_sound_sampled_spi/javaFiles/AudioFileWriter_2.java:9: error: <anonymous AudioFileWriter_2$1> is not abstract and does not override abstract method write(AudioInputStream,Type,OutputStream) in AudioFileWriter
        AudioFileWriter audioFileWriter = new AudioFileWriter() {
                                                                ^
1 error


================================================================

Sample: AudioFileWriter_3
----------------------------------------------------------------
output:
./Data/javax_sound_sampled_spi/javaFiles/AudioFileWriter_3.java:9: error: <anonymous AudioFileWriter_3$1> is not abstract and does not override abstract method write(AudioInputStream,Type,File) in AudioFileWriter
        AudioFileWriter audioFileWriter = new AudioFileWriter() {
                                                                ^
1 error


================================================================

Sample: AudioFileWriter_4
----------------------------------------------------------------
output:
./Data/javax_sound_sampled_spi/javaFiles/AudioFileWriter_4.java:6: error: <anonymous AudioFileWriter_4$1> is not abstract and does not override abstract method write(AudioInputStream,Type,File) in AudioFileWriter
        AudioFileWriter audioFileWriter = new AudioFileWriter() {
                                                                ^
1 error


================================================================

Sample: AudioFileWriter_5
----------------------------------------------------------------
output:
./Data/javax_sound_sampled_spi/javaFiles/AudioFileWriter_5.java:7: error: <anonymous AudioFileWriter_5$1> is not abstract and does not override abstract method write(AudioInputStream,Type,File) in AudioFileWriter
        AudioFileWriter audioFileWriter = new AudioFileWriter() {
                                                                ^
1 error


================================================================

Sample: FormatConversionProvider_3
----------------------------------------------------------------
output:
./Data/javax_sound_sampled_spi/javaFiles/FormatConversionProvider_3.java:7: error: <anonymous FormatConversionProvider_3$1> is not abstract and does not override abstract method getAudioInputStream(AudioFormat,AudioInputStream) in FormatConversionProvider
        FormatConversionProvider provider = new FormatConversionProvider() {
                                                                           ^
1 error


================================================================

Sample: FormatConversionProvider_4
----------------------------------------------------------------
output:
./Data/javax_sound_sampled_spi/javaFiles/FormatConversionProvider_4.java:7: error: <anonymous FormatConversionProvider_4$1> is not abstract and does not override abstract method getAudioInputStream(Encoding,AudioInputStream) in FormatConversionProvider
        FormatConversionProvider provider = new FormatConversionProvider() {
                                                                           ^
1 error


================================================================

Sample: FormatConversionProvider_5
----------------------------------------------------------------
output:
./Data/javax_sound_sampled_spi/javaFiles/FormatConversionProvider_5.java:6: error: FormatConversionProvider is abstract; cannot be instantiated
        FormatConversionProvider provider = new FormatConversionProvider(); // Instantiate the FormatConversionProvider
                                            ^
./Data/javax_sound_sampled_spi/javaFiles/FormatConversionProvider_5.java:7: error: no suitable constructor found for AudioFormat(no arguments)
        AudioFormat targetFormat = new AudioFormat(); // Create the desired format of outgoing data
                                   ^
    constructor AudioFormat.AudioFormat(Encoding,float,int,int,int,float,boolean) is not applicable
      (actual and formal argument lists differ in length)
    constructor AudioFormat.AudioFormat(Encoding,float,int,int,int,float,boolean,Map<String,Object>) is not applicable
      (actual and formal argument lists differ in length)
    constructor AudioFormat.AudioFormat(float,int,int,boolean,boolean) is not applicable
      (actual and formal argument lists differ in length)
./Data/javax_sound_sampled_spi/javaFiles/FormatConversionProvider_5.java:8: error: no suitable constructor found for AudioFormat(no arguments)
        AudioFormat sourceFormat = new AudioFormat(); // Create the format of the incoming data
                                   ^
    constructor AudioFormat.AudioFormat(Encoding,float,int,int,int,float,boolean) is not applicable
      (actual and formal argument lists differ in length)
    constructor AudioFormat.AudioFormat(Encoding,float,int,int,int,float,boolean,Map<String,Object>) is not applicable
      (actual and formal argument lists differ in length)
    constructor AudioFormat.AudioFormat(float,int,int,boolean,boolean) is not applicable
      (actual and formal argument lists differ in length)
3 errors


================================================================

Sample: MixerProvider_1
----------------------------------------------------------------
output:
./Data/javax_sound_sampled_spi/javaFiles/MixerProvider_1.java:6: error: cannot find symbol
        MixerProvider provider = new MyMixerProvider(); // Replace MyMixerProvider with your custom MixerProvider implementation
                                     ^
  symbol:   class MyMixerProvider
  location: class MixerProvider_1
1 error


================================================================

Sample: MixerProvider_2
----------------------------------------------------------------
output:
./Data/javax_sound_sampled_spi/javaFiles/MixerProvider_2.java:6: error: cannot find symbol
        MixerProvider provider = new CustomMixerProvider(); // CustomMixerProvider is a subclass of MixerProvider
                                     ^
  symbol:   class CustomMixerProvider
  location: class MixerProvider_2
./Data/javax_sound_sampled_spi/javaFiles/MixerProvider_2.java:7: error: Info(String,String,String,String) has protected access in Info
        Mixer.Info info = new Mixer.Info("CustomMixer", "Custom Mixer Description", "Custom Vendor", "1.0");
                          ^
2 errors


================================================================

Sample: MixerProvider_3
----------------------------------------------------------------
output:
./Data/javax_sound_sampled_spi/javaFiles/MixerProvider_3.java:6: error: MixerProvider is abstract; cannot be instantiated
        MixerProvider mixerProvider = new MixerProvider(); // Instantiate the MixerProvider
                                      ^
./Data/javax_sound_sampled_spi/javaFiles/MixerProvider_3.java:7: error: Info(String,String,String,String) has protected access in Info
        Mixer.Info mixerInfo = new Mixer.Info("TestMixer", "TestVendor", "TestDescription", "TestVersion"); // Create a Mixer.Info object
                               ^
2 errors


================================================================

