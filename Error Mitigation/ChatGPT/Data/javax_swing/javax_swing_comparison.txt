Sample: 0 AbstractAction
----------------------------------------------------------------
1. `Object getValue(String key)`: This method returns the value associated with the specified key.
2. `void putValue(String key, Object value)`: This method associates the specified value with the specified key.
3. `void actionPerformed(ActionEvent e)`: This method performs the action.
4. `void setEnabled(boolean newValue)`: This method enables or disables the action.
5. `void setEnabled(boolean enabled)`: This method sets the enabled state of the action.
================================================================

Sample: 1 AbstractButton
----------------------------------------------------------------
1. `void setMnemonic(int mnemonic)`: This method sets the keyboard mnemonic on the button.
2. `void setActionCommand(String command)`: This method sets the action command for the button.
3. `void setBorderPainted(boolean b)`: This method sets whether the button should paint its border.
4. `void setFocusPainted(boolean b)`: This method sets whether the button should paint its focus.
5. `void setRolloverEnabled(boolean b)`: This method sets whether rollover effects should be enabled for the button.
================================================================

Sample: 2 AbstractCellEditor
----------------------------------------------------------------
1. `Object getCellEditorValue()`: This method returns the value contained in the editor.
2. `boolean stopCellEditing()`: This method stops editing and returns true to indicate that editing has stopped.
3. `void cancelCellEditing()`: This method cancels editing.
4. `Component getComponent()`: This method returns the editor's editing component.
5. `boolean isCellEditable(EventObject anEvent)`: This method returns true if anEvent is a MouseEvent and the modifiers are correct.
================================================================

Sample: 3 AbstractListModel
----------------------------------------------------------------
1. `int getSize()`: This method returns the number of elements in the list.
2. `Object getElementAt(int index)`: This method returns the element at the specified index in the list.
3. `void addElement(Object element)`: This method appends the specified element to the end of the list.
4. `void insertElementAt(Object element, int index)`: This method inserts the specified element at the specified position in the list.
5. `void removeElement(Object element)`: This method removes the specified element from the list.
================================================================

Sample: 4 AbstractSpinnerModel
----------------------------------------------------------------
1. `Object getNextValue()`: This method returns the next legal value of the sequence.
2. `Object getPreviousValue()`: This method returns the previous legal value of the sequence.
3. `void setValue(Object value)`: This method sets the current value for the model.
4. `void setMinimum(Object minimum)`: This method sets the minimum allowable value for the model.
5. `void setMaximum(Object maximum)`: This method sets the maximum allowable value for the model.
================================================================

Sample: 5 ActionMap
----------------------------------------------------------------
1. `void put(Object key, Action action)`: This method associates the specified Action with the specified key in this ActionMap.
2. `Action get(Object key)`: This method returns the Action mapped to the specified key in this ActionMap.
3. `void remove(Object key)`: This method removes the mapping for the specified key from this ActionMap if present.
4. `void clear()`: This method removes all mappings from this ActionMap.
5. `int size()`: This method returns the number of key-action mappings in this ActionMap.
================================================================

Sample: 6 BorderFactory
----------------------------------------------------------------
1. `javax.swing.border.Border createEmptyBorder(int top, int left, int bottom, int right)`: This method creates an empty border with the specified top, left, bottom, and right insets.
2. `javax.swing.border.Border createLineBorder(java.awt.Color color)`: This method creates a line border with the specified color.
3. `javax.swing.border.Border createMatteBorder(int top, int left, int bottom, int right, java.awt.Image tileIcon)`: This method creates a matte border with the specified insets and tile icon.
4. `javax.swing.border.Border createEtchedBorder()`: This method creates an etched border.
5. `javax.swing.border.Border createCompoundBorder(javax.swing.border.Border outsideBorder, javax.swing.border.Border insideBorder)`: This method creates a compound border with the specified outside and inside borders.
================================================================

Sample: 7 Box
----------------------------------------------------------------
1. `void add(Component comp)`: This method adds the specified component to this container.
2. `void addGlue()`: This method adds a glue component to the end of the container.
3. `void addStrut(int width)`: This method adds a fixed width strut to the end of the container.
4. `void createHorizontalGlue()`: This method creates a horizontal glue component.
5. `void createVerticalGlue()`: This method creates a vertical glue component.
================================================================

Sample: 8 Box.Filler
----------------------------------------------------------------
1. `Dimension getPreferredSize()`: This method returns the preferred size of the filler.
2. `void changeShape(Dimension min, Dimension pref, Dimension max)`: This method changes the shape of the filler to the specified dimensions.
3. `void changeShape(Dimension size)`: This method changes the shape of the filler to the specified size.
4. `void setSpring(int s)`: This method sets the spring characteristics of the filler.
5. `void setAlignmentX(float alignmentX)`: This method sets the horizontal alignment of the filler.
================================================================

Sample: 9 BoxLayout
----------------------------------------------------------------
1. `void setAxis(int axis)`: This method sets the layout's axis to be either BoxLayout.X_AXIS or BoxLayout.Y_AXIS.
2. `void addLayoutComponent(Component comp)`: This method adds the specified component to the layout, using the default constraints.
3. `void addLayoutComponent(Component comp, Object constraints)`: This method adds the specified component to the layout, using the specified constraints.
4. `void removeLayoutComponent(Component comp)`: This method removes the specified component from the layout.
5. `Dimension preferredLayoutSize(Container target)`: This method calculates the preferred size dimensions for the specified container, given the components it contains.
================================================================

Sample: 10 ButtonGroup
----------------------------------------------------------------
1. `void add(AbstractButton b)`: This method adds the specified button to this group.
2. `Enumeration<AbstractButton> getElements()`: This method returns an enumeration of all the buttons in this group.
3. `AbstractButton getSelection()`: This method returns the selected button in this group.
4. `void setSelected(AbstractButton b, boolean selected)`: This method sets the selected state of the specified button in this group.
5. `void clearSelection()`: This method clears the selection such that no button in this group is selected.
================================================================

Sample: 11 CellRendererPane
----------------------------------------------------------------
1. `void paintComponent(Graphics g)`: This method paints the specified component.
2. `void invalidate()`: This method invalidates the layout, indicating that if the layout manager has cached information it should be discarded.
3. `void add(Component comp)`: This method adds the specified component to this container.
4. `void remove(Component comp)`: This method removes the specified component from this container.
5. `Component getComponent(int n)`: This method returns the nth component in the container.
================================================================

Sample: 12 ComponentInputMap
----------------------------------------------------------------
1. `void put(KeyStroke keyStroke, Object actionMapKey)`: Associates the specified KeyStroke with the specified actionMapKey in this ComponentInputMap.
2. `void remove(KeyStroke key)`: Removes the mapping for the specified KeyStroke from this ComponentInputMap.
3. `void clear()`: Removes all mappings from this ComponentInputMap.
4. `Object get(KeyStroke keyStroke)`: Returns the actionMapKey for the specified KeyStroke in this ComponentInputMap.
5. `KeyStroke[] keys()`: Returns an array of all the KeyStrokes in this ComponentInputMap.
================================================================

Sample: 13 DebugGraphics
----------------------------------------------------------------
1. `void setDebugOptions(int options)`: This method sets the debug options for this DebugGraphics object.
2. `int getDebugOptions()`: This method returns the current debug options for this DebugGraphics object.
3. `void setFlashColor(Color c)`: This method sets the flash color for this DebugGraphics object.
4. `Color getFlashColor()`: This method returns the current flash color for this DebugGraphics object.
5. `void flash(Rectangle r)`: This method flashes the specified rectangle on the screen.
================================================================

Sample: 14 DefaultBoundedRangeModel
----------------------------------------------------------------
1. `int getExtent()`: This method returns the extent, or "visible amount", of the model.
2. `int getValue()`: This method returns the current value of the model.
3. `int getMinimum()`: This method returns the minimum value of the model.
4. `int getMaximum()`: This method returns the maximum value of the model.
5. `void setRangeProperties(int value, int extent, int min, int max, boolean adjusting)`: This method sets all of the BoundedRangeModel properties at once.
================================================================

Sample: 15 DefaultButtonModel
----------------------------------------------------------------
1. `void setArmed(boolean b)`: Sets the armed state of the button model.
2. `void setPressed(boolean b)`: Sets the pressed state of the button model.
3. `void setRollover(boolean b)`: Sets the rollover state of the button model.
4. `void setMnemonic(int key)`: Sets the mnemonic key for the button model.
5. `void setActionCommand(String actionCommand)`: Sets the action command string for the button model.
================================================================

Sample: 16 DefaultCellEditor
----------------------------------------------------------------
1. `Object getCellEditorValue()`: This method returns the value contained in the editor.
2. `Component getComponent()`: This method returns the editor component.
3. `void setClickCountToStart(int count)`: This method sets the number of clicks needed to start editing.
4. `void setClickCountToStart(int count)`: This method sets the number of clicks needed to start editing.
5. `void setClickCountToStart(int count)`: This method sets the number of clicks needed to start editing.
================================================================

Sample: 17 DefaultComboBoxModel
----------------------------------------------------------------
1. `void removeAllElements()`: This method removes all elements from the combo box model.
2. `void removeElement(Object anObject)`: This method removes the specified element from the combo box model.
3. `void insertElementAt(Object anObject, int index)`: This method inserts the specified element at the specified index in the combo box model.
4. `Object getElementAt(int index)`: This method returns the element at the specified index in the combo box model.
5. `int getSize()`: This method returns the number of elements in the combo box model.
================================================================

Sample: 18 DefaultDesktopManager
----------------------------------------------------------------
1. `void activateFrame(JInternalFrame f)`: This method activates the specified internal frame.
2. `void closeFrame(JInternalFrame f)`: This method closes the specified internal frame.
3. `void deiconifyFrame(JInternalFrame f)`: This method deiconifies the specified internal frame.
4. `void iconifyFrame(JInternalFrame f)`: This method iconifies the specified internal frame.
5. `void openFrame(JInternalFrame f)`: This method opens the specified internal frame.
================================================================

Sample: 19 DefaultFocusManager
----------------------------------------------------------------
1. `void focusNextComponent(Component aComponent)`: This method moves the focus to the next focusable component after the specified component.
2. `void focusPreviousComponent(Component aComponent)`: This method moves the focus to the previous focusable component before the specified component.
3. `void upFocusCycle(Component aComponent)`: This method moves the focus to the previous focus cycle root in the traversal cycle.
4. `void downFocusCycle(Container aContainer)`: This method moves the focus to the next focus cycle root in the traversal cycle.
5. `void processKeyEvent(Component aComponent, KeyEvent keyEvent)`: This method processes a key event occurring on a component.
================================================================

Sample: 20 DefaultListCellRenderer
----------------------------------------------------------------
1. `Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)`: This method returns a Component that renders an item in a list based on the specified parameters.
2. `void setValue(Object value)`: This method sets the value of the current list cell renderer.
3. `void setIcon(Icon icon)`: This method sets the icon to be displayed for the current list cell renderer.
4. `void setText(String text)`: This method sets the text to be displayed for the current list cell renderer.
5. `void setBackground(Color color)`: This method sets the background color for the current list cell renderer.
================================================================

Sample: 21 DefaultListCellRenderer.UIResource
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the default cell renderer for a specific component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the default cell renderer for a specific component.
3. `void updateUI()`: This method updates the UI for the default cell renderer.
4. `void paint(Graphics g)`: This method paints the default cell renderer.
5. `void validate()`: This method validates the default cell renderer.
================================================================

Sample: 22 DefaultListModel
----------------------------------------------------------------
1. `void addElement(Object obj)`: This method appends the specified object to the end of this list.
2. `void insertElementAt(Object obj, int index)`: This method inserts the specified object at the specified position in this list.
3. `void removeElement(Object obj)`: This method removes the first occurrence of the specified object from this list.
4. `void removeElementAt(int index)`: This method removes the element at the specified position in this list.
5. `Object getElementAt(int index)`: This method returns the element at the specified position in this list.
================================================================

Sample: 23 DefaultListSelectionModel
----------------------------------------------------------------
1. `void setSelectionInterval(int anchor, int lead)`: This method sets the selection to be the union of the specified interval with current selection.
2. `void addSelectionInterval(int index0, int index1)`: This method adds the specified interval to the selection.
3. `void removeSelectionInterval(int index0, int index1)`: This method removes the specified interval from the selection.
4. `void insertIndexInterval(int index, int length, boolean before)`: This method inserts a contiguous block of indices into the selection.
5. `void removeIndexInterval(int index0, int index1)`: This method removes a contiguous block of indices from the selection.
================================================================

Sample: 24 DefaultRowSorter
----------------------------------------------------------------
1. `void setSortKeys(List<? extends RowSorter.SortKey> sortKeys)`: This method sets the sort keys for the RowSorter.
2. `void toggleSortOrder(int column)`: This method toggles the sort order of the specified column.
3. `void setSortable(int column, boolean sortable)`: This method sets whether a column is sortable or not.
4. `void setRowFilter(RowFilter<? super M, ? super Integer> filter)`: This method sets the filter for the RowSorter.
5. `void setModel(M model)`: This method sets the model for the RowSorter.
================================================================

Sample: 25 DefaultRowSorter.ModelWrapper
----------------------------------------------------------------
1. `Object getValueAt(int row, int column)`: This method returns the value at the specified row and column in the model.
2. `void setValueAt(Object value, int row, int column)`: This method sets the value at the specified row and column in the model.
3. `int getColumnCount()`: This method returns the number of columns in the model.
4. `int getRowCount()`: This method returns the number of rows in the model.
5. `void modelStructureChanged()`: This method notifies the model that the structure has changed.
================================================================

Sample: 26 DefaultSingleSelectionModel
----------------------------------------------------------------
1. `void clearSelection()`: This method clears the selection, so that no indices are selected.
2. `int getSelectedIndex()`: This method returns the index of the selected item, or -1 if no item is selected.
3. `void setSelectedIndex(int index)`: This method sets the selected index to the specified index.
4. `void moveLeadSelectionIndex(int leadIndex)`: This method moves the lead selection index to the specified index.
5. `void setAnchorSelectionIndex(int anchorIndex)`: This method sets the anchor selection index to the specified index.
================================================================

Sample: 27 FocusManager
----------------------------------------------------------------
1. `Component getComponent()` : This method returns the Component that currently has the focus.
2. `void clearGlobalFocusOwner()` : This method clears the global focus owner.
3. `void clearFocusOwner()` : This method clears the focus owner.
4. `void clearManagingFocus()` : This method clears the managing focus.
5. `void clearGlobalPermanentFocusOwner()` : This method clears the global permanent focus owner.
================================================================

Sample: 28 GrayFilter
----------------------------------------------------------------
1. `Image filterRGB(Image img, int r, int g, int b)`: This method applies a RGB filter to the specified image.
2. `Image createDisabledImage(Image i)`: This method creates a disabled version of the specified image.
3. `Image createDisabledImage(Image i, int r, int g, int b)`: This method creates a disabled version of the specified image with the specified RGB values.
4. `Image createDisabledImage(Image i, int r, int g, int b, int a)`: This method creates a disabled version of the specified image with the specified RGB and alpha values.
5. `Image createDisabledImage(Image i, int r, int g, int b, int a, boolean condition)`: This method creates a disabled version of the specified image with the specified RGB, alpha values, and condition.
================================================================

Sample: 29 GroupLayout
----------------------------------------------------------------
1. `Group createParallelGroup(int axis, boolean resizable)`: This method creates a ParallelGroup for the specified axis with the specified resizable property.
2. `Group createSequentialGroup()`: This method creates a SequentialGroup.
3. `void linkSize(Component... components)`: This method links the sizes of the specified components.
4. `void setAutoCreateGaps(boolean autoCreateGaps)`: This method sets whether the gaps between components should be automatically created.
5. `void setAutoCreateContainerGaps(boolean autoCreateContainerGaps)`: This method sets whether the gaps between components and the container should be automatically created.
================================================================

Sample: 30 ImageIcon
----------------------------------------------------------------
1. `int getIconHeight()`: This method returns the height of the icon.
2. `int getIconWidth()`: This method returns the width of the icon.
3. `Image getImage()`: This method returns the image used to paint the icon.
4. `void paintIcon(Component c, Graphics g, int x, int y)`: This method paints the icon at the specified location.
5. `void setImage(Image image)`: This method sets the image to be used for painting the icon.
================================================================

Sample: 31 InputMap
----------------------------------------------------------------
1. `void put(KeyStroke keyStroke, Object actionMapKey)`: This method binds the specified KeyStroke to the specified actionMapKey.
2. `void remove(KeyStroke key)`: This method removes the binding for the specified KeyStroke.
3. `void clear()`: This method removes all the mappings from this InputMap.
4. `Object get(KeyStroke keyStroke)`: This method returns the Object that is bound to the specified KeyStroke.
5. `KeyStroke[] keys()`: This method returns an array of all the KeyStrokes in this InputMap.
================================================================

Sample: 32 InputVerifier
----------------------------------------------------------------
1. `boolean verify(JComponent input)`: This method verifies the input component and returns true if the input is valid, false otherwise.
2. `void shouldYieldFocus(JComponent input)`: This method determines whether the input component should yield focus when the focus traversal keys are used.
3. `void verify(JComponent input)`: This method verifies the input component and throws a VerifyException if the input is not valid.
4. `void shouldYieldFocus(JComponent input, boolean shouldYield)`: This method sets whether the input component should yield focus when the focus traversal keys are used.
5. `void verify(JComponent input, boolean shouldYield)`: This method verifies the input component and throws a VerifyException if the input is not valid, with an option to set whether the input should yield focus.
================================================================

Sample: 33 InternalFrameFocusTraversalPolicy
----------------------------------------------------------------
1. `Component getComponentAfter(Container aContainer, Component aComponent)`: This method returns the Component that should receive the focus after aComponent in aContainer.
2. `Component getComponentBefore(Container aContainer, Component aComponent)`: This method returns the Component that should receive the focus before aComponent in aContainer.
3. `Component getFirstComponent(Container aContainer)`: This method returns the first Component in aContainer that should receive the focus.
4. `Component getLastComponent(Container aContainer)`: This method returns the last Component in aContainer that should receive the focus.
5. `Component getDefaultComponent(Container aContainer)`: This method returns the default Component to focus on in aContainer.
================================================================

Sample: 34 JApplet
----------------------------------------------------------------
1. `void init()`: This method is called by the browser or applet viewer to inform this applet that it has been loaded into the system.
2. `void start()`: This method is called after the init method to start the applet.
3. `void stop()`: This method is called when the applet is stopped.
4. `void destroy()`: This method is called when the applet is destroyed.
5. `JRootPane createRootPane()`: This method creates the rootPane property for this JApplet.
================================================================

Sample: 35 JButton
----------------------------------------------------------------
1. `void setText(String text)`: This method sets the text of the button to the specified string.
2. `String getText()`: This method returns the text of the button.
3. `void setEnabled(boolean enabled)`: This method enables or disables the button based on the specified boolean value.
4. `void addActionListener(ActionListener listener)`: This method adds an ActionListener to the button.
5. `void setToolTipText(String text)`: This method sets the tooltip text for the button.
================================================================

Sample: 36 JCheckBox
----------------------------------------------------------------
1. `void setSelected(boolean selected)`: This method sets the selected state of the check box.
2. `boolean isSelected()`: This method returns true if the check box is selected, false otherwise.
3. `void setText(String text)`: This method sets the text displayed on the check box.
4. `String getText()`: This method returns the text displayed on the check box.
5. `void setEnabled(boolean enabled)`: This method sets whether the check box is enabled or disabled.
================================================================

Sample: 37 JCheckBoxMenuItem
----------------------------------------------------------------
1. `void setState(boolean b)`: This method sets the selected state of the checkbox menu item.
2. `boolean getState()`: This method returns the selected state of the checkbox menu item.
3. `void setSelected(boolean b)`: This method sets whether the checkbox menu item is selected or not.
4. `boolean isSelected()`: This method returns true if the checkbox menu item is selected, false otherwise.
5. `void setAccelerator(KeyStroke keyStroke)`: This method sets the keyboard accelerator for the checkbox menu item.
================================================================

Sample: 38 JColorChooser
----------------------------------------------------------------
1. `Color showDialog(Component parent, String title, Color initialColor)`: This method displays a modal color-chooser dialog and returns the chosen color.
2. `void setColor(Color color)`: This method sets the selected color in the color chooser to the specified color.
3. `Color getColor()`: This method returns the currently selected color in the color chooser.
4. `void setPreviewPanel(JPanel preview): This method sets the preview panel that shows a preview of the selected color.
5. `void setChooserPanels(AbstractColorChooserPanel[] panels)`: This method sets the array of color chooser panels to be displayed in the color chooser dialog.
================================================================

Sample: 39 JComboBox
----------------------------------------------------------------
1. `void addItem(Object item)`: This method adds an item to the end of the combo box.
2. `void insertItemAt(Object item, int index)`: This method inserts an item at the specified index in the combo box.
3. `void removeItem(Object item)`: This method removes the specified item from the combo box.
4. `void removeAllItems()`: This method removes all items from the combo box.
5. `Object getSelectedItem()`: This method returns the currently selected item in the combo box.
================================================================

Sample: 40 JComponent
----------------------------------------------------------------
1. `void setToolTipText(String text)`: Sets the tooltip text for the component.
2. `void setOpaque(boolean isOpaque)`: Sets whether this component is opaque.
3. `void setBorder(Border border)`: Sets the border of the component.
4. `void setPreferredSize(Dimension preferredSize)`: Sets the preferred size of the component.
5. `void setEnabled(boolean enabled)`: Sets whether this component is enabled.
================================================================

Sample: 41 JDesktopPane
----------------------------------------------------------------
1. `void setDragMode(int mode)`: This method sets the drag mode for this desktop pane.
2. `void setDesktopManager(DesktopManager d)`: This method sets the desktop manager for this desktop pane.
3. `JInternalFrame[] getAllFrames()`: This method returns an array of all the internal frames in this desktop pane.
4. `void selectFrame(boolean doSelect)`: This method selects or deselects the currently active frame in this desktop pane.
5. `void setComponentZOrder(Component comp, int index)`: This method sets the Z order of the specified component in this desktop pane.
================================================================

Sample: 42 JDialog
----------------------------------------------------------------
1. `void setTitle(String title)`: This method sets the title of the dialog window.
2. `void setModal(boolean modal)`: This method sets whether the dialog window is modal or not.
3. `void setResizable(boolean resizable)`: This method sets whether the dialog window is resizable or not.
4. `void setContentPane(Container contentPane)`: This method sets the content pane for the dialog window.
5. `void setDefaultCloseOperation(int operation)`: This method sets the default close operation for the dialog window.
================================================================

Sample: 43 JEditorPane
----------------------------------------------------------------
1. `void setPage(String url)`: This method sets the URL of the page being displayed.
2. `void setText(String t)`: This method sets the text of this text component to the specified text.
3. `String getText()`: This method returns the text contained in this text component.
4. `void setContentType(String type)`: This method sets the content type for the editor.
5. `void setEditable(boolean editable)`: This method sets whether or not this text component is editable.
================================================================

Sample: 44 JFileChooser
----------------------------------------------------------------
1. `int showOpenDialog(Component parent)`: This method displays the file chooser dialog for opening a file and returns the user's choice.
2. `int showSaveDialog(Component parent)`: This method displays the file chooser dialog for saving a file and returns the user's choice.
3. `File getSelectedFile()`: This method returns the selected file chosen by the user.
4. `File[] getSelectedFiles()`: This method returns an array of selected files chosen by the user in multi-selection mode.
5. `void setFileFilter(FileFilter filter)`: This method sets the file filter to be used by the file chooser dialog.
================================================================

Sample: 45 JFormattedTextField
----------------------------------------------------------------
1. `Object getValue()`: This method returns the current value of the formatted text field.
2. `void setValue(Object value)`: This method sets the current value of the formatted text field to the specified object.
3. `void setFormatter(AbstractFormatter formatter)`: This method sets the formatter used to format the value in the text field.
4. `void setFocusLostBehavior(int behavior)`: This method sets the behavior when the formatted text field loses focus.
5. `void setPlaceholder(String text)`: This method sets the placeholder text to be displayed when the field is empty.
================================================================

Sample: 46 JFormattedTextField.AbstractFormatter
----------------------------------------------------------------
1. `Object stringToValue(String text)`: This method converts the given text String to an Object.
2. `String valueToString(Object value)`: This method converts the given Object value to a String.
3. `void install(JFormattedTextField ftf)`: This method installs the AbstractFormatter onto the specified JFormattedTextField.
4. `void uninstall()`: This method uninstalls the AbstractFormatter from the JFormattedTextField it is currently installed on.
5. `void setCommitsOnValidEdit(boolean commitsOnValidEdit)`: This method sets whether the JFormattedTextField should commit the value on a valid edit.
================================================================

Sample: 47 JFormattedTextField.AbstractFormatterFactory
----------------------------------------------------------------
1. `AbstractFormatter getFormatter(JFormattedTextField tf)`: This method returns an AbstractFormatter instance for the specified JFormattedTextField.
2. `JFormattedTextField.AbstractFormatter getFormatterWhenSet()`: This method returns the AbstractFormatter instance that will be used when a value is set on the JFormattedTextField.
3. `void setDefaultFormatter(AbstractFormatter defaultFormatter)`: This method sets the default AbstractFormatter to be used by the factory.
4. `void setDisplayFormatter(AbstractFormatter displayFormatter)`: This method sets the AbstractFormatter to be used for displaying values in the JFormattedTextField.
5. `void setValueClass(Class<?> valueClass)`: This method sets the Class of the value that will be formatted by the AbstractFormatter instances created by this factory.
================================================================

Sample: 48 JFrame
----------------------------------------------------------------
1. `void setDefaultCloseOperation(int operation)`: Sets the operation that will happen by default when the user initiates a "close" on this frame.
2. `void setTitle(String title)`: Sets the title for this frame to the specified string.
3. `void setSize(int width, int height)`: Resizes this component so that it has width width and height height.
4. `void setVisible(boolean b)`: Makes the frame visible or invisible.
5. `void setResizable(boolean resizable)`: Sets whether this frame is resizable by the user.
================================================================

Sample: 49 JInternalFrame
----------------------------------------------------------------
1. `void setResizable(boolean resizable)`: This method sets whether the internal frame can be resized by the user.
2. `void setIconifiable(boolean iconifiable)`: This method sets whether the internal frame can be iconified.
3. `void setMaximizable(boolean maximizable)`: This method sets whether the internal frame can be maximized.
4. `void setClosable(boolean closable)`: This method sets whether the internal frame can be closed by the user.
5. `void setTitle(String title)`: This method sets the title displayed in the internal frame's title bar.
================================================================

Sample: 50 JInternalFrame.JDesktopIcon
----------------------------------------------------------------
1. `void setBounds(int x, int y, int width, int height)`: This method sets the bounds for the JDesktopIcon.
2. `void setUI(JDesktopIconUI ui)`: This method sets the UI delegate for the JDesktopIcon.
3. `void setInternalFrame(JInternalFrame f)`: This method sets the JInternalFrame associated with the JDesktopIcon.
4. `void setVisible(boolean visible)`: This method sets the visibility of the JDesktopIcon.
5. `void setToolTipText(String text)`: This method sets the tooltip text for the JDesktopIcon.
================================================================

Sample: 51 JLabel
----------------------------------------------------------------
1. `void setText(String text)`: This method sets the text of the JLabel to the specified text.
2. `String getText()`: This method returns the text of the JLabel.
3. `void setIcon(Icon icon)`: This method sets the icon of the JLabel to the specified icon.
4. `Icon getIcon()`: This method returns the icon of the JLabel.
5. `void setHorizontalAlignment(int alignment)`: This method sets the horizontal alignment of the JLabel.
================================================================

Sample: 52 JLayer
----------------------------------------------------------------
1. `void setView(Component view)`: This method sets the view component that will be decorated by the JLayer.
2. `void setLayerEventMask(long mask)`: This method sets the event mask for the JLayer to specify which AWTEvents should be forwarded to the JLayer's event listeners.
3. `void setUI(LayerUI<? extends Component> ui)`: This method sets the LayerUI for the JLayer, which defines the look and feel of the decorated component.
4. `void setGlassPane(Component glassPane)`: This method sets the glass pane component for the JLayer, which is displayed on top of the decorated component.
5. `void setBorder(Border border)`: This method sets the border for the JLayer, which defines the visual boundary of the decorated component.
================================================================

Sample: 53 JLayeredPane
----------------------------------------------------------------
1. `void add(Component comp, Integer layer)`: Adds the specified component to this layered pane at the specified layer.
2. `void setPosition(Component c, int position)`: Sets the position of the specified component within its layer.
3. `void setLayer(Component c, int layer)`: Sets the layer of the specified component.
4. `void moveToFront(Component c)`: Moves the specified component to the front.
5. `void moveToBack(Component c)`: Moves the specified component to the back.
================================================================

Sample: 54 JList
----------------------------------------------------------------
1. `void setListData(Object[] listData)`: This method sets the list model to display the specified array of objects.
2. `int getSelectedIndex()`: This method returns the index of the first selected item in the list.
3. `void setSelectedIndex(int index)`: This method selects the specified index in the list.
4. `Object getSelectedValue()`: This method returns the value of the first selected item in the list.
5. `void clearSelection()`: This method clears the selection in the list.
================================================================

Sample: 55 JList.DropLocation
----------------------------------------------------------------
1. `int getIndex()`: This method returns the index of the drop location.
2. `boolean isInsert()`: This method returns true if the drop location represents an insert location.
3. `boolean isInsertRow()`: This method returns true if the drop location represents an insert row location.
4. `boolean isInsertColumn()`: This method returns true if the drop location represents an insert column location.
5. `boolean isInsertRow()`: This method returns true if the drop location represents an insert row location.
================================================================

Sample: 56 JMenu
----------------------------------------------------------------
1. `void add(JMenuItem menuItem)`: This method adds a JMenuItem to the end of the menu.
2. `void insert(JMenuItem menuItem, int index)`: This method inserts a JMenuItem at the specified index in the menu.
3. `void remove(int index)`: This method removes the JMenuItem at the specified index from the menu.
4. `void removeAll()`: This method removes all JMenuItems from the menu.
5. `JMenuItem getItem(int index)`: This method returns the JMenuItem at the specified index in the menu.
================================================================

Sample: 57 JMenuBar
----------------------------------------------------------------
1. `void add(JMenu menu)`: This method adds a new menu to the menu bar.
2. `void remove(int index)`: This method removes the menu at the specified index from the menu bar.
3. `JMenu getMenu(int index)`: This method returns the menu at the specified index in the menu bar.
4. `int getMenuCount()`: This method returns the number of menus in the menu bar.
5. `void setHelpMenu(JMenu menu)`: This method sets the help menu for the menu bar.
================================================================

Sample: 58 JMenuItem
----------------------------------------------------------------
1. `void setAccelerator(KeyStroke keyStroke)`: Sets the accelerator keystroke combination for this menu item.
2. `void setArmed(boolean b)`: Sets whether the menu item should be armed.
3. `void setMnemonic(int mnemonic)`: Sets the keyboard mnemonic on the menu item.
4. `void setToolTipText(String text)`: Sets the tooltip text for the menu item.
5. `void setAction(Action a)`: Sets the action for the menu item.
================================================================

Sample: 59 JOptionPane
----------------------------------------------------------------
1. `int showConfirmDialog(Component parentComponent, Object message)`: This method displays a confirmation dialog with the specified message and returns an integer representing the user's choice.
2. `void showMessageDialog(Component parentComponent, Object message)`: This method displays a message dialog with the specified message.
3. `String showInputDialog(Component parentComponent, Object message)`: This method displays an input dialog with the specified message and returns the user's input as a String.
4. `int showOptionDialog(Component parentComponent, Object message, String title, int optionType, int messageType, Icon icon, Object[] options, Object initialValue)`: This method displays a customized option dialog with the specified parameters and returns the user's choice as an integer.
5. `void showInternalMessageDialog(Component parentComponent, Object message)`: This method displays an internal message dialog with the specified message.
================================================================

Sample: 60 JPanel
----------------------------------------------------------------
1. `void setLayout(LayoutManager layout)`: This method sets the layout manager for this container.
2. `void setOpaque(boolean isOpaque)`: This method sets the opacity of this component.
3. `void setBorder(Border border)`: This method sets the border of this component.
4. `void setToolTipText(String text)`: This method sets the tooltip text for this component.
5. `void setDoubleBuffered(boolean aFlag)`: This method sets whether this component should use a buffer to paint its contents.
================================================================

Sample: 61 JPasswordField
----------------------------------------------------------------
1. `char[] getPassword()`: This method returns the password as a character array.
2. `void setEchoChar(char c)`: This method sets the echo character for this JPasswordField.
3. `void setSelectionStart(int selectionStart)`: This method sets the starting position of the selected text.
4. `void setSelectionEnd(int selectionEnd)`: This method sets the end position of the selected text.
5. `void setEditable(boolean editable)`: This method sets whether this JPasswordField is editable or not.
================================================================

Sample: 62 JPopupMenu
----------------------------------------------------------------
1. `void add(JMenuItem menuItem)`: This method adds a JMenuItem to the popup menu.
2. `void show(Component invoker, int x, int y)`: This method displays the popup menu at the specified location relative to the specified component.
3. `void setVisible(boolean b)`: This method sets the visibility of the popup menu.
4. `void remove(int index)`: This method removes the menu item at the specified index from the popup menu.
5. `Component getInvoker()`: This method returns the component that invoked the popup menu.
================================================================

Sample: 63 JPopupMenu.Separator
----------------------------------------------------------------
1. `void setUI(SeparatorUI ui)`: This method sets the look and feel delegate for this separator.
2. `SeparatorUI getUI()`: This method returns the look and feel delegate for this separator.
3. `void setBorder(Border border)`: This method sets the border of this separator.
4. `Border getBorder()`: This method returns the border of this separator.
5. `void setOrientation(int orientation)`: This method sets the orientation of this separator.
================================================================

Sample: 64 JProgressBar
----------------------------------------------------------------
1. `void setMinimum(int n)`: This method sets the minimum value of the progress bar.
2. `void setMaximum(int n)`: This method sets the maximum value of the progress bar.
3. `void setValue(int n)`: This method sets the current value of the progress bar.
4. `void setStringPainted(boolean b)`: This method determines whether the progress bar should render a progress string.
5. `void setIndeterminate(boolean newValue)`: This method sets the progress bar to indeterminate mode, where the progress is not defined by a specific value.
================================================================

Sample: 65 JRadioButton
----------------------------------------------------------------
1. `void setSelected(boolean selected)`: This method sets the selected state of the radio button.
2. `boolean isSelected()`: This method returns true if the radio button is selected, false otherwise.
3. `void setEnabled(boolean enabled)`: This method enables or disables the radio button.
4. `void setText(String text)`: This method sets the text of the radio button.
5. `String getText()`: This method returns the text of the radio button.
================================================================

Sample: 66 JRadioButtonMenuItem
----------------------------------------------------------------
1. `void setSelected(boolean b)`: This method sets the selected state of the radio button menu item.
2. `boolean isSelected()`: This method returns true if the radio button menu item is selected, false otherwise.
3. `void setAccelerator(KeyStroke keyStroke)`: This method sets the accelerator key for the radio button menu item.
4. `KeyStroke getAccelerator()`: This method returns the accelerator key for the radio button menu item.
5. `void setActionCommand(String command)`: This method sets the action command for the radio button menu item.
================================================================

Sample: 67 JRootPane
----------------------------------------------------------------
1. `JMenuBar getJMenuBar()`: This method returns the JMenuBar that is set on this JRootPane.
2. `JLayeredPane getLayeredPane()`: This method returns the JLayeredPane that manages the layered pane used by this JRootPane.
3. `Container getContentPane()`: This method returns the content pane of this JRootPane.
4. `void setContentPane(Container contentPane)`: This method sets the content pane for this JRootPane.
5. `void setGlassPane(Component glassPane)`: This method sets the glass pane for this JRootPane.
================================================================

Sample: 68 JScrollBar
----------------------------------------------------------------
1. `void setValues(int value, int extent, int min, int max)`: This method sets the current value, extent, minimum, and maximum values for the scrollbar.
2. `void setValue(int value)`: This method sets the current value of the scrollbar.
3. `void setUnitIncrement(int unitIncrement)`: This method sets the unit increment value for the scrollbar.
4. `void setBlockIncrement(int blockIncrement)`: This method sets the block increment value for the scrollbar.
5. `void setOrientation(int orientation)`: This method sets the orientation of the scrollbar.
================================================================

Sample: 69 JScrollPane
----------------------------------------------------------------
1. `void setViewportView(Component view)`: This method sets the component that will be scrolled by this scroll pane.
2. `void setHorizontalScrollBarPolicy(int policy)`: This method sets the horizontal scroll bar policy for the scroll pane.
3. `void setVerticalScrollBarPolicy(int policy)`: This method sets the vertical scroll bar policy for the scroll pane.
4. `void setWheelScrollingEnabled(boolean handleWheel)` : This method enables or disables scrolling by using the mouse wheel.
5. `void setViewportBorder(Border border)`: This method sets the border around the viewport of the scroll pane.
================================================================

Sample: 70 JSeparator
----------------------------------------------------------------
1. `void setOrientation(int orientation)`: This method sets the orientation of the separator, either HORIZONTAL or VERTICAL.
2. `int getOrientation()`: This method returns the current orientation of the separator.
3. `void setForeground(Color fg)`: This method sets the foreground color of the separator.
4. `Color getForeground()`: This method returns the current foreground color of the separator.
5. `void setBorder(Border border)`: This method sets the border of the separator.
================================================================

Sample: 71 JSlider
----------------------------------------------------------------
1. `int getValue()`: This method returns the current value of the slider.
2. `void setValue(int value)`: This method sets the current value of the slider to the specified value.
3. `int getMinimum()`: This method returns the minimum value that the slider can represent.
4. `int getMaximum()`: This method returns the maximum value that the slider can represent.
5. `void setMajorTickSpacing(int n)`: This method sets the spacing between major tick marks.
================================================================

Sample: 72 JSpinner
----------------------------------------------------------------
1. `Object getValue()`: This method returns the current value of the JSpinner.
2. `void setValue(Object value)`: This method sets the current value of the JSpinner to the specified value.
3. `void setModel(SpinnerModel model)`: This method sets the SpinnerModel that defines the sequence of values for the JSpinner.
4. `void setEditor(JComponent editor)`: This method sets the editor component for the JSpinner.
5. `void addChangeListener(ChangeListener listener)`: This method adds a ChangeListener to listen for changes in the JSpinner's value.
================================================================

Sample: 73 JSpinner.DateEditor
----------------------------------------------------------------
1. `JSpinner.DateEditor(javax.swing.JSpinner spinner)`: This constructor creates a new DateEditor for the specified JSpinner.
2. `void commitEdit()`: This method commits the currently edited value to the JSpinner's model.
3. `java.awt.Component getUiComponent()`: This method returns the editor's UI component.
4. `void setFormat(java.text.SimpleDateFormat format)`: This method sets the format used to display the date in the editor.
5. `void setTextFieldEditable(boolean editable)`: This method sets whether the text field in the editor is editable.
================================================================

Sample: 74 JSpinner.DefaultEditor
----------------------------------------------------------------
1. `void stateChanged(ChangeEvent e)`: This method is called when the spinner's model changes.
2. `void propertyChange(PropertyChangeEvent e)`: This method is called when a bound property is changed.
3. `void commitEdit()`: This method commits the currently edited value to the spinner's model.
4. `void cancelEdit()`: This method cancels the editing of the current value.
5. `void setTextField(JFormattedTextField ftf)`: This method sets the JFormattedTextField used for editing the spinner's value.
================================================================

Sample: 75 JSpinner.ListEditor
----------------------------------------------------------------
1. `void setListValue(Object value)`: This method sets the value of the JSpinner editor to the specified object.
2. `Object getListValue()`: This method returns the current value of the JSpinner editor as an object.
3. `void selectAll()`: This method selects all the text in the editor component.
4. `void setValue(Object value)`: This method sets the value of the JSpinner editor to the specified object.
5. `Object getValue()`: This method returns the current value of the JSpinner editor as an object.
================================================================

Sample: 76 JSpinner.NumberEditor
----------------------------------------------------------------
1. `void setMinimumSize(Dimension size)`: Sets the minimum size of the editor.
2. `void setMaximumSize(Dimension size)`: Sets the maximum size of the editor.
3. `void setAlignmentX(float alignmentX)`: Sets the horizontal alignment of the editor.
4. `void setAlignmentY(float alignmentY)`: Sets the vertical alignment of the editor.
5. `void setBorder(Border border)`: Sets the border of the editor.
================================================================

Sample: 77 JSplitPane
----------------------------------------------------------------
1. `void setDividerLocation(double proportionalLocation)`: Sets the location of the divider. Parameters: proportionalLocation - a double value between 0.0 and 1.0 representing the proportional location of the divider.
2. `void setOrientation(int orientation)`: Sets the orientation of the JSplitPane. Parameters: orientation - an int value representing the orientation (JSplitPane.HORIZONTAL_SPLIT or JSplitPane.VERTICAL_SPLIT).
3. `void setLeftComponent(Component comp)`: Sets the component on the left side of the divider. Parameters: comp - the Component to set on the left side.
4. `void setRightComponent(Component comp)`: Sets the component on the right side of the divider. Parameters: comp - the Component to set on the right side.
5. `void setContinuousLayout(boolean newContinuousLayout)`: Sets whether the JSplitPane should continuously layout the components while the divider is being moved. Parameters: newContinuousLayout - a boolean value indicating whether continuous layout should be enabled.
================================================================

Sample: 78 JTabbedPane
----------------------------------------------------------------
1. `void addTab(String title, Component component)`: This method adds a tab with the specified title and component to the tabbed pane.
2. `void insertTab(String title, Icon icon, Component component, String tip, int index)`: This method inserts a tab with the specified title, icon, component, and tooltip text at the specified index in the tabbed pane.
3. `void removeTabAt(int index)`: This method removes the tab at the specified index from the tabbed pane.
4. `void setSelectedIndex(int index)`: This method sets the selected tab to the one at the specified index in the tabbed pane.
5. `Component getSelectedComponent()`: This method returns the component that is currently selected in the tabbed pane.
================================================================

Sample: 79 JTable
----------------------------------------------------------------
1. `void setModel(TableModel dataModel)`: This method sets the data model for the JTable.
2. `void setRowSelectionAllowed(boolean rowSelectionAllowed)`: This method sets whether rows can be selected in the JTable.
3. `void setColumnSelectionAllowed(boolean columnSelectionAllowed)`: This method sets whether columns can be selected in the JTable.
4. `void setAutoResizeMode(int mode)`: This method sets the auto-resize mode for the JTable columns.
5. `void setCellSelectionEnabled(boolean cellSelectionEnabled)`: This method sets whether individual cells can be selected in the JTable.
================================================================

Sample: 80 JTable.DropLocation
----------------------------------------------------------------
1. `int getColumn()`: This method returns the column index of the drop location.
2. `int getRow()`: This method returns the row index of the drop location.
3. `boolean isInsertRow()`: This method returns true if the drop location is an insert row.
4. `boolean isInsertColumn()`: This method returns true if the drop location is an insert column.
5. `String toString()`: This method returns a string representation of the drop location.
================================================================

Sample: 81 JTextArea
----------------------------------------------------------------
1. `void append(String str)`: This method appends the specified text to the end of the JTextArea.
2. `void insert(String str, int pos)`: This method inserts the specified text at the specified position in the JTextArea.
3. `void setEditable(boolean editable)`: This method sets whether the JTextArea is editable or not.
4. `String getText()`: This method returns the text contained in the JTextArea.
5. `void setLineWrap(boolean wrap)`: This method sets whether the JTextArea should wrap lines or not.
================================================================

Sample: 82 JTextField
----------------------------------------------------------------
1. `void setText(String text)`: This method sets the text of the JTextField to the specified string.
2. `String getText()`: This method returns the text contained in the JTextField.
3. `void setEditable(boolean editable)`: This method sets whether the text in the JTextField can be edited by the user.
4. `void setColumns(int columns)`: This method sets the number of columns in the JTextField.
5. `void addActionListener(ActionListener listener)`: This method adds an ActionListener to the JTextField to listen for action events.
================================================================

Sample: 83 JTextPane
----------------------------------------------------------------
1. `void setCharacterAttributes(AttributeSet attr, boolean replace)`: This method sets the attributes for the current selection in the text pane.
2. `void insertComponent(Component c)`: This method inserts a component into the document at the current caret position.
3. `void replaceSelection(String content)`: This method replaces the currently selected content with the specified text.
4. `void setParagraphAttributes(AttributeSet attr, boolean replace)`: This method sets the attributes for the current paragraph in the text pane.
5. `void setLogicalStyle(Style s)`: This method sets the logical style to use for the paragraph at the current caret position.
================================================================

Sample: 84 JToggleButton
----------------------------------------------------------------
1. `void setSelected(boolean selected)`: This method sets the selected state of the button.
2. `boolean isSelected()`: This method returns true if the button is selected, false otherwise.
3. `void setActionCommand(String command)`: This method sets the action command for the button.
4. `String getActionCommand()`: This method returns the action command for the button.
5. `void setIcon(Icon icon)`: This method sets the icon for the button.
================================================================

Sample: 85 JToggleButton.ToggleButtonModel
----------------------------------------------------------------
1. `void setSelected(boolean selected)`: This method sets the selected state of the ToggleButton model.
2. `boolean isSelected()`: This method returns the selected state of the ToggleButton model.
3. `void setPressed(boolean pressed)`: This method sets the pressed state of the ToggleButton model.
4. `boolean isPressed()`: This method returns the pressed state of the ToggleButton model.
5. `void setArmed(boolean armed)`: This method sets the armed state of the ToggleButton model.
================================================================

Sample: 86 JToolBar
----------------------------------------------------------------
1. `void addSeparator()`: This method adds a separator to the toolbar.
2. `void setFloatable(boolean floatable)`: This method sets whether the toolbar can be dragged and floated by the user.
3. `void setRollover(boolean rollover)`: This method sets whether rollover effects are enabled for the toolbar buttons.
4. `void setOrientation(int orientation)`: This method sets the orientation of the toolbar (either HORIZONTAL or VERTICAL).
5. `void setBorderPainted(boolean b)`: This method sets whether the toolbar border is painted.
================================================================

Sample: 87 JToolBar.Separator
----------------------------------------------------------------
1. `javax.swing.JToolBar.Separator()`: Constructor for creating a toolbar-specific separator.
2. `void setOrientation(int orientation)`: Sets the orientation of the separator.
3. `int getOrientation()`: Returns the orientation of the separator.
4. `void setBorder(Border b)`: Sets the border of the separator.
5. `Border getBorder()`: Returns the border of the separator.
================================================================

Sample: 88 JToolTip
----------------------------------------------------------------
1. `void setTipText(String tipText)`: This method sets the text to be displayed by the tooltip.
2. `String getTipText()`: This method returns the text currently displayed by the tooltip.
3. `void setComponent(JComponent component)`: This method sets the component for which the tooltip is being displayed.
4. `JComponent getComponent()`: This method returns the component for which the tooltip is being displayed.
5. `void setDismissDelay(int dismissDelay)`: This method sets the delay before the tooltip disappears after the mouse exits the component.
================================================================

Sample: 89 JTree
----------------------------------------------------------------
1. `void expandRow(int row)`: Expands the row at the specified index in the JTree.
2. `void collapseRow(int row)`: Collapses the row at the specified index in the JTree.
3. `TreePath getPathForRow(int row)`: Returns the TreePath for the specified row in the JTree.
4. `void setRootVisible(boolean visible)`: Sets whether the root node of the JTree is visible.
5. `void setShowsRootHandles(boolean newValue)`: Sets whether the JTree displays handles for the root node.
================================================================

Sample: 90 JTree.DropLocation
----------------------------------------------------------------
1. `int getChildIndex()`: This method returns the index of the child in the parent node.
2. `int getChildIndex(JTree tree)`: This method returns the index of the child in the specified JTree.
3. `int getPathIndex()`: This method returns the index of the drop location in the path.
4. `int getRow()`: This method returns the row of the drop location.
5. `boolean isInsert()`: This method returns true if the drop location represents an insert location.
================================================================

Sample: 91 JTree.DynamicUtilTreeNode
----------------------------------------------------------------
1. `void setUserObject(Object userObject)`: This method sets the user object associated with this node.
2. `Object getUserObject()`: This method returns the user object associated with this node.
3. `void add(Object child)`: This method adds the specified child node to this node.
4. `void remove(Object child)`: This method removes the specified child node from this node.
5. `int getChildCount()`: This method returns the number of children of this node.
================================================================

Sample: 92 JTree.EmptySelectionModel
----------------------------------------------------------------
1. `void setSelectionPaths(TreePath[] paths)`: This method sets the selection to the specified TreePaths.
2. `void setSelectionRows(int[] rows)`: This method sets the selection to the specified rows.
3. `void clearSelection()`: This method clears the selection.
4. `void addSelectionPath(TreePath path)`: This method adds the specified path to the selection.
5. `void addSelectionPaths(TreePath[] paths)`: This method adds the specified paths to the selection.
================================================================

Sample: 93 JViewport
----------------------------------------------------------------
1. `void setView(Component view)`: This method sets the component that will be displayed within the viewport.
2. `Component getView()`: This method returns the component that is currently being displayed within the viewport.
3. `void setViewPosition(Point p)`: This method sets the position of the viewport's view in the coordinate space of the view.
4. `Point getViewPosition()`: This method returns the current position of the viewport's view in the coordinate space of the view.
5. `void scrollRectToVisible(Rectangle contentRect)`: This method scrolls the viewport so that the specified rectangle within the view is visible.
================================================================

Sample: 94 JWindow
----------------------------------------------------------------
1. `void setLocation(int x, int y)`: This method sets the location of the JWindow to the specified x and y coordinates.
2. `void setSize(int width, int height)`: This method sets the size of the JWindow to the specified width and height.
3. `void setVisible(boolean visible)`: This method sets the visibility of the JWindow to the specified boolean value.
4. `void setAlwaysOnTop(boolean alwaysOnTop)`: This method sets whether the JWindow should always be on top of other windows.
5. `void setOpacity(float opacity)`: This method sets the opacity of the JWindow to the specified float value.
================================================================

Sample: 95 KeyStroke
----------------------------------------------------------------
1. `KeyStroke getKeyStroke(char keyChar)`: This method returns a KeyStroke object for a key represented by the specified character.
2. `KeyStroke getKeyStroke(int keyCode, int modifiers)`: This method returns a KeyStroke object for a key represented by the specified key code and modifiers.
3. `KeyStroke getKeyStroke(String s)`: This method returns a KeyStroke object for a key represented by the specified string.
4. `int getKeyCode()`: This method returns the numeric key code for this KeyStroke.
5. `int getModifiers()`: This method returns the modifiers for this KeyStroke.
================================================================

Sample: 96 LayoutFocusTraversalPolicy
----------------------------------------------------------------
1. `Component getComponentAfter(Container aContainer, Component aComponent)`: This method returns the Component that should receive the focus after aComponent in aContainer.
2. `Component getComponentBefore(Container aContainer, Component aComponent)`: This method returns the Component that should receive the focus before aComponent in aContainer.
3. `Component getFirstComponent(Container aContainer)`: This method returns the first Component in the traversal cycle.
4. `Component getLastComponent(Container aContainer)`: This method returns the last Component in the traversal cycle.
5. `Component getDefaultComponent(Container aContainer)`: This method returns the default Component to focus on.
================================================================

Sample: 97 LayoutStyle
----------------------------------------------------------------
1. `ComponentPlacement getComponentPlacement(Component c)`: This method returns the component placement for the specified component.
2. `int getPreferredGap(ComponentPlacement type, Component c1, Component c2)`: This method returns the gap size to use between two components based on the specified component placement type.
3. `int getContainerGap(Component c, int type, Container parent)`: This method returns the gap size to use around the specified component within the specified container.
4. `void setComponentPlacement(Component c, ComponentPlacement type)`: This method sets the component placement for the specified component.
5. `void setInstance(LayoutStyle style)`: This method sets the LayoutStyle instance to be used for layout operations.
================================================================

Sample: 98 LookAndFeel
----------------------------------------------------------------
1. `String getName()`: This method returns the name of the look and feel.
2. `String getDescription()`: This method returns a brief description of the look and feel.
3. `UIDefaults getDefaults()`: This method returns the UIDefaults for the look and feel.
4. `boolean isSupportedLookAndFeel()`: This method returns true if the look and feel is supported on the current platform.
5. `boolean isNativeLookAndFeel()`: This method returns true if the look and feel is a native look and feel.
================================================================

Sample: 99 MenuSelectionManager
----------------------------------------------------------------
1. `void clearSelectedPath()`: This method clears the selected path.
2. `MenuElement[] getSelectedPath()`: This method returns an array of MenuElement objects representing the selected path.
3. `void processKeyEvent(KeyEvent e)`: This method processes a key event.
4. `void setSelectedPath(MenuElement[] path)`: This method sets the selected path.
5. `void setSelectedPath(MenuElement[] path, boolean push)` : This method sets the selected path and specifies whether to push the path onto the stack.
================================================================

Sample: 100 OverlayLayout
----------------------------------------------------------------
1. `void addLayoutComponent(Component comp, Object constraints)`: This method adds the specified component to the layout, using the specified constraints.
2. `void layoutContainer(Container parent)`: This method lays out the specified container using this layout.
3. `Dimension preferredLayoutSize(Container parent)`: This method calculates the preferred size dimensions for the specified container, given the components it contains.
4. `Dimension minimumLayoutSize(Container parent)`: This method calculates the minimum size dimensions for the specified container, given the components it contains.
5. `Dimension maximumLayoutSize(Container target)`: This method calculates the maximum size dimensions for the specified container, given the components it contains.
================================================================

Sample: 101 Popup
----------------------------------------------------------------
1. `void show(Component owner, int x, int y)`: This method displays the popup at the specified location relative to the specified component.
2. `void hide()`: This method hides the popup.
3. `void pack()`: This method sizes the popup to fit the preferred size of its contents.
4. `void setBorder(Border border)`: This method sets the border of the popup.
5. `void setLightWeightPopupEnabled(boolean aFlag)`: This method sets whether lightweight (all-Java language) popups are used.
================================================================

Sample: 102 PopupFactory
----------------------------------------------------------------
1. `Popup getPopup(Component owner, Component contents, int x, int y)`: This method returns a Popup object that represents a popup menu.
2. `Popup getPopup(Component owner, Component contents, int x, int y, int xAdjustment, int yAdjustment)`: This method returns a Popup object that represents a popup menu with adjustments for the x and y coordinates.
3. `Popup getPopup(Component owner, JPopupMenu popup, int x, int y)`: This method returns a Popup object that represents a popup menu with a JPopupMenu as its contents.
4. `Popup getPopup(Component owner, JPopupMenu popup, int x, int y, int xAdjustment, int yAdjustment)`: This method returns a Popup object that represents a popup menu with a JPopupMenu as its contents and adjustments for the x and y coordinates.
5. `void setPopupType(int type)`: This method sets the type of popup to be created by this factory.
================================================================

Sample: 103 ProgressMonitor
----------------------------------------------------------------
1. `void setProgress(int progress)`: This method sets the progress of the operation being monitored.
2. `void setMillisToDecideToPopup(int millisToDecideToPopup)`: This method sets the amount of time in milliseconds before the progress monitor decides to popup a progress monitor dialog.
3. `void setMillisToPopup(int millisToPopup)`: This method sets the amount of time in milliseconds that the progress monitor will wait before updating the progress monitor dialog.
4. `void setNote(String note)`: This method sets the note to be displayed on the progress monitor dialog.
5. `void close()`: This method closes the progress monitor dialog.
================================================================

Sample: 104 ProgressMonitorInputStream
----------------------------------------------------------------
1. `int read()`: This method reads the next byte of data from the input stream.
2. `int read(byte[] b, int off, int len)`: This method reads up to len bytes of data from the input stream into an array of bytes.
3. `long skip(long n)`: This method skips over and discards n bytes of data from the input stream.
4. `int available()`: This method returns the number of bytes that can be read from the input stream without blocking.
5. `void close()`: This method closes the input stream and releases any system resources associated with it.
================================================================

Sample: 105 RepaintManager
----------------------------------------------------------------
1. `void addDirtyRegion(JComponent c, int x, int y, int w, int h)`: This method adds a region to be repainted.
2. `void markCompletelyDirty(JComponent c)`: This method marks a component as completely dirty, causing it to be completely repainted.
3. `void markCompletelyClean(JComponent c)`: This method marks a component as completely clean, indicating that it does not need to be repainted.
4. `void addInvalidComponent(JComponent invalidComponent)`: This method adds a component to the list of invalid components that need to be repainted.
5. `void validateInvalidComponents()`: This method validates all invalid components, causing them to be repainted.
================================================================

Sample: 106 RowFilter
----------------------------------------------------------------
1. `RowFilter.Entry<M,I> include(int index, M model)`: This method returns a RowFilter.Entry object that includes the specified index in the model.
2. `RowFilter.Entry<M,I> exclude(int index, M model)`: This method returns a RowFilter.Entry object that excludes the specified index in the model.
3. `RowFilter.Entry<M,I> include(javax.swing.RowFilter.Entry<? extends M,? extends I> entry)`: This method returns a RowFilter.Entry object that includes the specified entry.
4. `RowFilter.Entry<M,I> exclude(javax.swing.RowFilter.Entry<? extends M,? extends I> entry)`: This method returns a RowFilter.Entry object that excludes the specified entry.
5. `RowFilter.Entry<M,I> include(javax.swing.RowFilter<M,I> filter, M model, int index)`: This method returns a RowFilter.Entry object that includes the specified index in the model based on the given filter.
================================================================

Sample: 107 RowFilter.Entry
----------------------------------------------------------------
1. `Object getValue(int identifier)`: This method returns the value of the entry's data for the specified identifier.
2. `int getModelRowCount()`: This method returns the number of rows in the underlying model.
3. `int getIdentifier(int index)`: This method returns the identifier for the specified row index.
4. `int getValueCount()`: This method returns the number of values in the entry.
5. `String getStringValue(int identifier)`: This method returns the string value of the entry's data for the specified identifier.
================================================================

Sample: 108 RowSorter
----------------------------------------------------------------
1. `void setSortKeys(List<? extends RowSorter.SortKey> sortKeys)`: This method sets the sort keys for the RowSorter.
2. `void toggleSortOrder(int column)`: This method toggles the sort order of the specified column.
3. `void setSortKeys(List<? extends RowSorter.SortKey> sortKeys)`: This method sets the sort keys for the RowSorter.
4. `void setSortsOnUpdates(boolean sortsOnUpdates)`: This method sets whether the RowSorter should perform a sort when the underlying model is updated.
5. `void setRowFilter(RowFilter<? super M, ? super Integer> filter)`: This method sets the filter that determines which rows, if any, should be included.
================================================================

Sample: 109 RowSorter.SortKey
----------------------------------------------------------------
1. `int getColumn()`: This method returns the index of the column that this SortKey represents.
2. `SortOrder getSortOrder()`: This method returns the sort order for the column that this SortKey represents.
3. `SortKey(int column, SortOrder sortOrder)`: Constructor that creates a new SortKey with the specified column index and sort order.
4. `boolean equals(Object o)`: This method compares this SortKey to the specified object.
5. `int hashCode()`: This method returns the hash code value for this SortKey.
================================================================

Sample: 110 ScrollPaneLayout
----------------------------------------------------------------
1. `void layoutContainer(Container parent)`: This method lays out the scrollpane.
2. `Dimension preferredLayoutSize(Container parent)`: This method calculates the preferred size dimensions for the specified container.
3. `Dimension minimumLayoutSize(Container parent)`: This method calculates the minimum size dimensions for the specified container.
4. `void syncWithScrollPane(JScrollPane sp)`: This method synchronizes the layout of the scrollpane with the specified scrollpane.
5. `void syncWithScrollPane(JScrollPane sp, boolean isVertical)` : This method synchronizes the layout of the scrollpane with the specified scrollpane, with an option to specify if it is vertical.
================================================================

Sample: 111 ScrollPaneLayout.UIResource
----------------------------------------------------------------
1. `Dimension preferredLayoutSize(Container parent)`: This method calculates the preferred size dimensions for the specified container.
2. `Dimension minimumLayoutSize(Container parent)`: This method calculates the minimum size dimensions for the specified container.
3. `void layoutContainer(Container parent)`: This method lays out the specified container.
4. `void syncWithScrollPane(JScrollPane sp)`: This method synchronizes the layout state with the JScrollPane.
5. `void syncWithScrollPane(JScrollPane sp, boolean isVertical)`: This method synchronizes the layout state with the JScrollPane for the specified orientation.
================================================================

Sample: 112 SizeRequirements
----------------------------------------------------------------
1. `int getMinimumSize()`: This method returns the minimum size required by the component.
2. `int getPreferredSpan()`: This method returns the preferred span of the component.
3. `int getMaximumSize()`: This method returns the maximum size allowed for the component.
4. `void setMinimumSize(int minimumSize)`: This method sets the minimum size required by the component.
5. `void setPreferredSpan(int preferredSpan)`: This method sets the preferred span of the component.
================================================================

Sample: 113 SizeSequence
----------------------------------------------------------------
1. `int getSize()`: This method returns the number of sizes in the SizeSequence.
2. `int getSize(int index)`: This method returns the size at the specified index in the SizeSequence.
3. `void setSize(int index, int size)`: This method sets the size at the specified index in the SizeSequence to the specified size.
4. `void insertSize(int index, int size)`: This method inserts a size at the specified index in the SizeSequence.
5. `void removeSize(int index)`: This method removes the size at the specified index in the SizeSequence.
================================================================

Sample: 114 SortingFocusTraversalPolicy
----------------------------------------------------------------
1. `Component getComponentAfter(Container aContainer, Component aComponent)`: This method returns the Component that should receive the focus after aComponent in aContainer.
2. `Component getComponentBefore(Container aContainer, Component aComponent)`: This method returns the Component that should receive the focus before aComponent in aContainer.
3. `Component getFirstComponent(Container aContainer)`: This method returns the first Component in the traversal cycle.
4. `Component getLastComponent(Container aContainer)`: This method returns the last Component in the traversal cycle.
5. `Component getDefaultComponent(Container aContainer)`: This method returns the default Component to focus on.
================================================================

Sample: 115 SpinnerDateModel
----------------------------------------------------------------
1. `Date getNextValue()`: This method returns the next Date value in the sequence.
2. `Date getPreviousValue()`: This method returns the previous Date value in the sequence.
3. `void setStart(Date start)`: This method sets the start Date for the sequence.
4. `void setEnd(Date end)`: This method sets the end Date for the sequence.
5. `void setCalendarField(int calendarField)`: This method sets the calendar field for the sequence.
================================================================

Sample: 116 SpinnerListModel
----------------------------------------------------------------
1. `Object getNextValue()`: This method returns the next value in the sequence.
2. `Object getPreviousValue()`: This method returns the previous value in the sequence.
3. `void setList(List<?> list)`: This method sets the list of values for the SpinnerModel.
4. `void setList(List<?> list, Object initialValue)`: This method sets the list of values for the SpinnerModel and specifies an initial value.
5. `void setList(Object[] values)`: This method sets the array of values for the SpinnerModel.
================================================================

Sample: 117 SpinnerNumberModel
----------------------------------------------------------------
1. `Object getNextValue()`: This method returns the next value in the sequence.
2. `Object getPreviousValue()`: This method returns the previous value in the sequence.
3. `void setMinimum(Object minimum)`: This method sets the minimum value of the sequence.
4. `void setMaximum(Object maximum)`: This method sets the maximum value of the sequence.
5. `void setStepSize(Number stepSize)`: This method sets the step size for incrementing or decrementing the sequence.
================================================================

Sample: 118 Spring
----------------------------------------------------------------
1. `int getMinimumValue()`: This method returns the minimum value property of the Spring instance.
2. `int getPreferredValue()`: This method returns the preferred value property of the Spring instance.
3. `int getMaximumValue()`: This method returns the maximum value property of the Spring instance.
4. `void setMinimumValue(int minValue)`: This method sets the minimum value property of the Spring instance.
5. `void setPreferredValue(int prefValue)`: This method sets the preferred value property of the Spring instance.
================================================================

Sample: 119 SpringLayout
----------------------------------------------------------------
1. `void putConstraint(String edgeName, Component c1, int pad, String relation, Component c2)`: This method sets a constraint that one edge of c1 should be a certain distance away from a certain edge of c2.
2. `SpringLayout.Constraints getConstraints(Component c)`: This method returns the constraints for the specified component.
3. `Spring xConstraint(Component c)`: This method returns the spring representing the horizontal position of the specified component.
4. `Spring yConstraint(Component c)`: This method returns the spring representing the vertical position of the specified component.
5. `void removeLayoutComponent(Component c)`: This method removes the constraints for the specified component.
================================================================

Sample: 120 SpringLayout.Constraints
----------------------------------------------------------------
1. `SpringLayout.Constraints()`: Constructor for creating a new Constraints object.
2. `void setX(Spring x)`: Sets the Spring that represents the horizontal position of the component.
3. `void setY(Spring y)`: Sets the Spring that represents the vertical position of the component.
4. `void setWidth(Spring width)`: Sets the Spring that represents the width of the component.
5. `void setHeight(Spring height)`: Sets the Spring that represents the height of the component.
================================================================

Sample: 121 SwingUtilities
----------------------------------------------------------------
1. `void invokeLater(Runnable doRun)`: This method causes the Runnable to have its run method called in the dispatch thread of the EventQueue.
2. `void invokeAndWait(Runnable doRun)`: This method causes the Runnable to have its run method called in the dispatch thread of the EventQueue and waits for it to finish.
3. `void updateComponentTreeUI(Component c)`: This method updates the UI for the specified component and all of its descendants.
4. `void setSystemLookAndFeel()`: This method sets the look and feel to the system look and feel.
5. `void setLookAndFeel(String className)`: This method sets the look and feel to the specified class name.
================================================================

Sample: 122 SwingWorker
----------------------------------------------------------------
1. `Void doInBackground()`: This method is used to perform the background computation in a SwingWorker thread.
2. `void done()`: This method is called on the Event Dispatch Thread after the doInBackground method is finished.
3. `void execute()`: This method starts the background thread to execute the SwingWorker task.
4. `void publish(V... chunks)`: This method is used to publish intermediate results from the background thread to the Event Dispatch Thread.
5. `void process(List<V> chunks)`: This method is called on the Event Dispatch Thread after publish is called to process the published chunks.
================================================================

Sample: 123 Timer
----------------------------------------------------------------
1. `void start()`: This method starts the Timer, causing it to start generating ActionEvents.
2. `void stop()`: This method stops the Timer, causing it to stop generating ActionEvents.
3. `void setDelay(int delay)`: This method sets the delay between ActionEvents in milliseconds.
4. `void setRepeats(boolean flag)`: This method sets whether the Timer should repeat or not.
5. `void addActionListener(ActionListener listener)`: This method adds an ActionListener to the Timer to receive ActionEvents.
================================================================

Sample: 124 ToolTipManager
----------------------------------------------------------------
1. `void setInitialDelay(int milliseconds)`: Sets the initial delay value for the ToolTips.
2. `int getInitialDelay()`: Returns the initial delay value for the ToolTips.
3. `void setDismissDelay(int milliseconds)`: Sets the dismiss delay value for the ToolTips.
4. `int getDismissDelay()`: Returns the dismiss delay value for the ToolTips.
5. `void setReshowDelay(int milliseconds)`: Sets the reshow delay value for the ToolTips.
================================================================

Sample: 125 TransferHandler
----------------------------------------------------------------
1. `void exportAsDrag(JComponent comp, InputEvent e, int action)`: This method initiates a drag operation.
2. `void exportToClipboard(JComponent comp, Clipboard clip, int action)`: This method transfers the contents of the source component to the clipboard.
3. `void exportDone(JComponent source, Transferable data, int action)`: This method is called to signal the completion of the transfer.
4. `boolean canImport(TransferSupport support)`: This method determines whether or not the data can be imported.
5. `boolean importData(TransferSupport support)`: This method imports the data into the component.
================================================================

Sample: 126 TransferHandler.DropLocation
----------------------------------------------------------------
1. `int getChildIndex()`: This method returns the index of the child component within the drop location.
   
2. `Point getDropPoint()`: This method returns the point where the data should be inserted in the drop location.

3. `boolean isInsert()`: This method returns true if the drop location represents an insert location.

4. `boolean isInsertRow()`: This method returns true if the drop location represents an insert row location.

5. `boolean isInsertColumn()`: This method returns true if the drop location represents an insert column location.
================================================================

Sample: 127 TransferHandler.TransferSupport
----------------------------------------------------------------
1. `boolean isDataFlavorSupported(DataFlavor flavor)`: This method returns true if the specified data flavor is supported.
2. `Component getComponent()`: This method returns the component that is the source of the transfer.
3. `int getSourceActions()`: This method returns the type of actions supported by the source.
4. `boolean isDrop()`: This method returns true if the transfer involves a drop operation.
5. `boolean isDataFlavorAvailable(DataFlavor flavor)`: This method returns true if the specified data flavor is available.
================================================================

Sample: 128 UIDefaults
----------------------------------------------------------------
1. `Object get(Object key)`: This method returns the value to which the specified key is mapped in this UIDefaults.
2. `void putDefaults(Object[] keyValueList)`: This method puts all of the key/value pairs in the specified array into this UIDefaults.
3. `void addPropertyChangeListener(PropertyChangeListener listener)`: This method adds a PropertyChangeListener to the listener list for a specific property.
4. `void removePropertyChangeListener(PropertyChangeListener listener)`: This method removes a PropertyChangeListener from the listener list for a specific property.
5. `void setDefaultLocale(Locale l)`: This method sets the default locale.
================================================================

Sample: 129 UIDefaults.LazyInputMap
----------------------------------------------------------------
1. `void createValue(javax.swing.UIDefaults table)`: This method creates a InputMap in the specified UIDefaults table.
2. `void put(javax.swing.KeyStroke keyStroke, java.lang.Object actionMapKey)`: This method associates the specified KeyStroke with the specified actionMapKey.
3. `void remove(javax.swing.KeyStroke key)`: This method removes the mapping for the specified KeyStroke.
4. `java.lang.Object get(javax.swing.KeyStroke key)`: This method returns the actionMapKey associated with the specified KeyStroke.
5. `javax.swing.InputMap getInputMap()`: This method returns the InputMap associated with this LazyInputMap.
================================================================

Sample: 130 UIDefaults.ProxyLazyValue
----------------------------------------------------------------
1. `Object createValue(UIDefaults table)`: This method creates the value for the LazyValue instance.
2. `boolean equals(Object obj)`: This method compares this LazyValue to the specified object.
3. `int hashCode()`: This method returns a hash code value for the LazyValue.
4. `String toString()`: This method returns a string representation of the LazyValue.
5. `void setProxy(UIDefaults.ProxyLazyValue.ProxyLazyValueProvider provider)`: This method sets the ProxyLazyValueProvider for the LazyValue instance.
================================================================

Sample: 131 UIManager
----------------------------------------------------------------
1. `LookAndFeel getLookAndFeel()`: This method returns the current look and feel.
2. `void setLookAndFeel(LookAndFeel newLookAndFeel)`: This method sets the current look and feel to the specified one.
3. `String getSystemLookAndFeelClassName()`: This method returns the class name of the current system look and feel.
4. `void addPropertyChangeListener(PropertyChangeListener listener)`: This method adds a PropertyChangeListener to listen for changes in the look and feel.
5. `UIDefaults getDefaults()`: This method returns the default values for the current look and feel.
================================================================

Sample: 132 UIManager.LookAndFeelInfo
----------------------------------------------------------------
1. `String getClassName()`: This method returns the fully qualified class name of the LookAndFeel.
2. `String getName()`: This method returns the name of the LookAndFeel.
3. `String toString()`: This method returns a string representation of the LookAndFeelInfo.
4. `boolean equals(Object obj)`: This method compares the specified object with this LookAndFeelInfo for equality.
5. `int hashCode()`: This method returns a hash code value for the LookAndFeelInfo.
================================================================

Sample: 133 ViewportLayout
----------------------------------------------------------------
1. `Dimension preferredLayoutSize(Container parent)`: This method calculates the preferred size dimensions for the specified container.
2. `Dimension minimumLayoutSize(Container parent)`: This method calculates the minimum size dimensions for the specified container.
3. `void layoutContainer(Container parent)`: This method lays out the specified container.
4. `void addLayoutComponent(String name, Component comp)`: This method adds the specified component to the layout, using the specified constraint object.
5. `void removeLayoutComponent(Component comp)`: This method removes the specified component from the layout.
================================================================

