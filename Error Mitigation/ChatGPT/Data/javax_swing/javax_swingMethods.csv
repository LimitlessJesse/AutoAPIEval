ClassName,Method,Return Type,Description
AbstractAction,addPropertyChangeListener(PropertyChangeListener listener),void,Adds a PropertyChangeListener to the listener list.
AbstractAction,clone(),protected Object,Clones the abstract action.
AbstractAction,"firePropertyChange(String propertyName, Object oldValue, Object newValue)",protected void,Supports reporting bound property changes.
AbstractAction,getKeys(),Object[],"Returns an array of Objects which are keys for which values have been set for this AbstractAction, or null if no keys have values set."
AbstractAction,getPropertyChangeListeners(),PropertyChangeListener[],Returns an array of all the PropertyChangeListeners added to this AbstractAction with addPropertyChangeListener().
AbstractAction,getValue(String key),Object,Gets the Object associated with the specified key.
AbstractAction,isEnabled(),boolean,Returns true if the action is enabled.
AbstractAction,"putValue(String key, Object newValue)",void,Sets the Value associated with the specified key.
AbstractAction,removePropertyChangeListener(PropertyChangeListener listener),void,Removes a PropertyChangeListener from the listener list.
AbstractAction,setEnabled(boolean newValue),void,Sets whether the Action is enabled.
AbstractButton,"actionPropertyChanged(Action action, String propertyName)",protected void,Updates the button's state in response to property changes in the associated action.
AbstractButton,addActionListener(ActionListener l),void,Adds an ActionListener to the button.
AbstractButton,addChangeListener(ChangeListener l),void,Adds a ChangeListener to the button.
AbstractButton,"addImpl(Component comp, Object constraints, int index)",protected void,"Adds the specified component to this container at the specified index, refer to Container.addImpl(Component, Object, int) for a complete description of this method."
AbstractButton,addItemListener(ItemListener l),void,Adds an ItemListener to the checkbox.
AbstractButton,"checkHorizontalKey(int key, String exception)",protected int,Verify that the key argument is a legal value for the horizontalAlignment and horizontalTextPosition properties.
AbstractButton,"checkVerticalKey(int key, String exception)",protected int,Verify that the key argument is a legal value for the vertical properties.
AbstractButton,configurePropertiesFromAction(Action a),protected void,Sets the properties on this button to match those in the specified Action.
AbstractButton,createActionListener(),protected ActionListener,NULL
AbstractButton,createActionPropertyChangeListener(Action a),protected PropertyChangeListener,Creates and returns a PropertyChangeListener that is responsible for listening for changes from the specified Action and updating the appropriate properties.
AbstractButton,createChangeListener(),protected ChangeListener,Subclasses that want to handle ChangeEvents differently can override this to return another ChangeListener implementation.
AbstractButton,createItemListener(),protected ItemListener,NULL
AbstractButton,doClick(),void,"Programmatically perform a ""click""."
AbstractButton,doClick(int pressTime),void,"Programmatically perform a ""click""."
AbstractButton,fireActionPerformed(ActionEvent event),protected void,Notifies all listeners that have registered interest for notification on this event type.
AbstractButton,fireItemStateChanged(ItemEvent event),protected void,Notifies all listeners that have registered interest for notification on this event type.
AbstractButton,fireStateChanged(),protected void,Notifies all listeners that have registered interest for notification on this event type.
AbstractButton,getAction(),Action,"Returns the currently set Action for this ActionEvent source, or null if no Action is set."
AbstractButton,getActionCommand(),String,Returns the action command for this button.
AbstractButton,getActionListeners(),ActionListener[],Returns an array of all the ActionListeners added to this AbstractButton with addActionListener().
AbstractButton,getChangeListeners(),ChangeListener[],Returns an array of all the ChangeListeners added to this AbstractButton with addChangeListener().
AbstractButton,getDisabledIcon(),Icon,Returns the icon used by the button when it's disabled.
AbstractButton,getDisabledSelectedIcon(),Icon,Returns the icon used by the button when it's disabled and selected.
AbstractButton,getDisplayedMnemonicIndex(),int,"Returns the character, as an index, that the look and feel should provide decoration for as representing the mnemonic character."
AbstractButton,getHideActionText(),boolean,"Returns the value of the hideActionText property, which determines whether the button displays text from the Action."
AbstractButton,getHorizontalAlignment(),int,Returns the horizontal alignment of the icon and text.
AbstractButton,getHorizontalTextPosition(),int,Returns the horizontal position of the text relative to the icon.
AbstractButton,getIcon(),Icon,Returns the default icon.
AbstractButton,getIconTextGap(),int,Returns the amount of space between the text and the icon displayed in this button.
AbstractButton,getItemListeners(),ItemListener[],Returns an array of all the ItemListeners added to this AbstractButton with addItemListener().
AbstractButton,getLabel(),String,Deprecated. - Replaced by getText
AbstractButton,getMargin(),Insets,Returns the margin between the button's border and the label.
AbstractButton,getMnemonic(),int,Returns the keyboard mnemonic from the the current model.
AbstractButton,getModel(),ButtonModel,Returns the model that this button represents.
AbstractButton,getMultiClickThreshhold(),long,Gets the amount of time (in milliseconds) required between mouse press events for the button to generate the corresponding action events.
AbstractButton,getPressedIcon(),Icon,Returns the pressed icon for the button.
AbstractButton,getRolloverIcon(),Icon,Returns the rollover icon for the button.
AbstractButton,getRolloverSelectedIcon(),Icon,Returns the rollover selection icon for the button.
AbstractButton,getSelectedIcon(),Icon,Returns the selected icon for the button.
AbstractButton,getSelectedObjects(),Object[],Returns an array (length 1) containing the label or null if the button is not selected.
AbstractButton,getText(),String,Returns the button's text.
AbstractButton,getUI(),ButtonUI,Returns the L&F object that renders this component.
AbstractButton,getVerticalAlignment(),int,Returns the vertical alignment of the text and icon.
AbstractButton,getVerticalTextPosition(),int,Returns the vertical position of the text relative to the icon.
AbstractButton,"imageUpdate(Image img, int infoflags, int x, int y, int w, int h)",boolean,This is overridden to return false if the current Icon's Image is not equal to the passed in Image img.
AbstractButton,"init(String text, Icon icon)",protected void,NULL
AbstractButton,isBorderPainted(),boolean,Gets the borderPainted property.
AbstractButton,isContentAreaFilled(),boolean,Gets the contentAreaFilled property.
AbstractButton,isFocusPainted(),boolean,Gets the paintFocus property.
AbstractButton,isRolloverEnabled(),boolean,Gets the rolloverEnabled property.
AbstractButton,isSelected(),boolean,Returns the state of the button.
AbstractButton,paintBorder(Graphics g),protected void,Paint the button's border if BorderPainted property is true and the button has a border.
AbstractButton,paramString(),protected String,Returns a string representation of this AbstractButton.
AbstractButton,removeActionListener(ActionListener l),void,Removes an ActionListener from the button.
AbstractButton,removeChangeListener(ChangeListener l),void,Removes a ChangeListener from the button.
AbstractButton,removeItemListener(ItemListener l),void,Removes an ItemListener from the button.
AbstractButton,removeNotify(),void,Notifies this component that it no longer has a parent component.
AbstractButton,setAction(Action a),void,Sets the Action.
AbstractButton,setActionCommand(String actionCommand),void,Sets the action command for this button.
AbstractButton,setBorderPainted(boolean b),void,Sets the borderPainted property.
AbstractButton,setContentAreaFilled(boolean b),void,Sets the contentAreaFilled property.
AbstractButton,setDisabledIcon(Icon disabledIcon),void,Sets the disabled icon for the button.
AbstractButton,setDisabledSelectedIcon(Icon disabledSelectedIcon),void,Sets the disabled selection icon for the button.
AbstractButton,setDisplayedMnemonicIndex(int index),void,Provides a hint to the look and feel as to which character in the text should be decorated to represent the mnemonic.
AbstractButton,setEnabled(boolean b),void,Enables (or disables) the button.
AbstractButton,setFocusPainted(boolean b),void,"Sets the paintFocus property, which must be true for the focus state to be painted."
AbstractButton,setHideActionText(boolean hideActionText),void,"Sets the hideActionText property, which determines whether the button displays text from the Action."
AbstractButton,setHorizontalAlignment(int alignment),void,Sets the horizontal alignment of the icon and text.
AbstractButton,setHorizontalTextPosition(int textPosition),void,Sets the horizontal position of the text relative to the icon.
AbstractButton,setIcon(Icon defaultIcon),void,Sets the button's default icon.
AbstractButton,setIconTextGap(int iconTextGap),void,"If both the icon and text properties are set, this property defines the space between them."
AbstractButton,setLabel(String label),void,Deprecated. - Replaced by setText(text)
AbstractButton,setLayout(LayoutManager mgr),void,"Sets the layout manager for this container, refer to Container.setLayout(LayoutManager) for a complete description of this method."
AbstractButton,setMargin(Insets m),void,Sets space for margin between the button's border and the label.
AbstractButton,setMnemonic(char mnemonic),void,"This method is now obsolete, please use setMnemonic(int) to set the mnemonic for a button."
AbstractButton,setMnemonic(int mnemonic),void,Sets the keyboard mnemonic on the current model.
AbstractButton,setModel(ButtonModel newModel),void,Sets the model that this button represents.
AbstractButton,setMultiClickThreshhold(long threshhold),void,Sets the amount of time (in milliseconds) required between mouse press events for the button to generate the corresponding action events.
AbstractButton,setPressedIcon(Icon pressedIcon),void,Sets the pressed icon for the button.
AbstractButton,setRolloverEnabled(boolean b),void,"Sets the rolloverEnabled property, which must be true for rollover effects to occur."
AbstractButton,setRolloverIcon(Icon rolloverIcon),void,Sets the rollover icon for the button.
AbstractButton,setRolloverSelectedIcon(Icon rolloverSelectedIcon),void,Sets the rollover selected icon for the button.
AbstractButton,setSelected(boolean b),void,Sets the state of the button.
AbstractButton,setSelectedIcon(Icon selectedIcon),void,Sets the selected icon for the button.
AbstractButton,setText(String text),void,Sets the button's text.
AbstractButton,setUI(ButtonUI ui),void,Sets the L&F object that renders this component.
AbstractButton,setVerticalAlignment(int alignment),void,Sets the vertical alignment of the icon and text.
AbstractButton,setVerticalTextPosition(int textPosition),void,Sets the vertical position of the text relative to the icon.
AbstractButton,updateUI(),void,Resets the UI property to a value from the current look and feel.
AbstractCellEditor,addCellEditorListener(CellEditorListener l),void,Adds a CellEditorListener to the listener list.
AbstractCellEditor,cancelCellEditing(),void,Calls fireEditingCanceled.
AbstractCellEditor,fireEditingCanceled(),protected void,Notifies all listeners that have registered interest for notification on this event type.
AbstractCellEditor,fireEditingStopped(),protected void,Notifies all listeners that have registered interest for notification on this event type.
AbstractCellEditor,getCellEditorListeners(),CellEditorListener[],Returns an array of all the CellEditorListeners added to this AbstractCellEditor with addCellEditorListener().
AbstractCellEditor,isCellEditable(EventObject e),boolean,Returns true.
AbstractCellEditor,removeCellEditorListener(CellEditorListener l),void,Removes a CellEditorListener from the listener list.
AbstractCellEditor,shouldSelectCell(EventObject anEvent),boolean,Returns true.
AbstractCellEditor,stopCellEditing(),boolean,Calls fireEditingStopped and returns true.
AbstractListModel,addListDataListener(ListDataListener l),void,Adds a listener to the list that's notified each time a change to the data model occurs.
AbstractListModel,"fireContentsChanged(Object source, int index0, int index1)",protected void,AbstractListModel subclasses must call this method after one or more elements of the list change.
AbstractListModel,"fireIntervalAdded(Object source, int index0, int index1)",protected void,AbstractListModel subclasses must call this method after one or more elements are added to the model.
AbstractListModel,"fireIntervalRemoved(Object source, int index0, int index1)",protected void,AbstractListModel subclasses must call this method after one or more elements are removed from the model.
AbstractListModel,getListDataListeners(),ListDataListener[],Returns an array of all the list data listeners registered on this AbstractListModel.
AbstractListModel,getListeners(Class<T> listenerType),<T extends EventListener>T[],Returns an array of all the objects currently registered as FooListeners upon this model.
AbstractListModel,removeListDataListener(ListDataListener l),void,Removes a listener from the list that's notified each time a change to the data model occurs.
AbstractSpinnerModel,addChangeListener(ChangeListener l),void,Adds a ChangeListener to the model's listener list.
AbstractSpinnerModel,fireStateChanged(),protected void,Run each ChangeListeners stateChanged() method.
AbstractSpinnerModel,getChangeListeners(),ChangeListener[],Returns an array of all the ChangeListeners added to this AbstractSpinnerModel with addChangeListener().
AbstractSpinnerModel,getListeners(Class<T> listenerType),<T extends EventListener>T[],Return an array of all the listeners of the given type that were added to this model.
AbstractSpinnerModel,removeChangeListener(ChangeListener l),void,Removes a ChangeListener from the model's listener list.
ActionMap,allKeys(),Object[],Returns an array of the keys defined in this ActionMap and its parent.
ActionMap,clear(),void,Removes all the mappings from this ActionMap.
ActionMap,get(Object key),Action,"Returns the binding for key, messaging the parent ActionMap if the binding is not locally defined."
ActionMap,getParent(),ActionMap,Returns this ActionMap's parent.
ActionMap,keys(),Object[],Returns the Action names that are bound in this ActionMap.
ActionMap,"put(Object key, Action action)",void,Adds a binding for key to action.
ActionMap,remove(Object key),void,Removes the binding for key from this ActionMap.
ActionMap,setParent(ActionMap map),void,Sets this ActionMap's parent.
ActionMap,size(),int,Returns the number of bindings in this ActionMap.
BorderFactory,createBevelBorder(int type),static Border,"Creates a beveled border of the specified type, using brighter shades of the component's current background color for highlighting, and darker shading for shadows."
BorderFactory,"createBevelBorder(int type, Color highlight, Color shadow)",static Border,"Creates a beveled border of the specified type, using the specified highlighting and shadowing."
BorderFactory,"createBevelBorder(int type, Color highlightOuter, Color highlightInner, Color shadowOuter, Color shadowInner)",static Border,"Creates a beveled border of the specified type, using the specified colors for the inner and outer highlight and shadow areas."
BorderFactory,createCompoundBorder(),static CompoundBorder,Creates a compound border with a null inside edge and a null outside edge.
BorderFactory,"createCompoundBorder(Border outsideBorder, Border insideBorder)",static CompoundBorder,Creates a compound border specifying the border objects to use for the outside and inside edges.
BorderFactory,createDashedBorder(Paint paint),static Border,Creates a dashed border of the specified paint.
BorderFactory,"createDashedBorder(Paint paint, float length, float spacing)",static Border,"Creates a dashed border of the specified paint, relative length, and relative spacing."
BorderFactory,"createDashedBorder(Paint paint, float thickness, float length, float spacing, boolean rounded)",static Border,"Creates a dashed border of the specified paint, thickness, line shape, relative length, and relative spacing."
BorderFactory,createEmptyBorder(),static Border,Creates an empty border that takes up no space.
BorderFactory,"createEmptyBorder(int top, int left, int bottom, int right)",static Border,"Creates an empty border that takes up space but which does no drawing, specifying the width of the top, left, bottom, and right sides."
BorderFactory,createEtchedBorder(),static Border,"Creates a border with an ""etched"" look using the component's current background color for highlighting and shading."
BorderFactory,"createEtchedBorder(Color highlight, Color shadow)",static Border,"Creates a border with an ""etched"" look using the specified highlighting and shading colors."
BorderFactory,createEtchedBorder(int type),static Border,"Creates a border with an ""etched"" look using the component's current background color for highlighting and shading."
BorderFactory,"createEtchedBorder(int type, Color highlight, Color shadow)",static Border,"Creates a border with an ""etched"" look using the specified highlighting and shading colors."
BorderFactory,createLineBorder(Color color),static Border,Creates a line border withe the specified color.
BorderFactory,"createLineBorder(Color color, int thickness)",static Border,Creates a line border with the specified color and width.
BorderFactory,"createLineBorder(Color color, int thickness, boolean rounded)",static Border,"Creates a line border with the specified color, thickness, and corner shape."
BorderFactory,createLoweredBevelBorder(),static Border,"Creates a border with a lowered beveled edge, using brighter shades of the component's current background color for highlighting, and darker shading for shadows."
BorderFactory,createLoweredSoftBevelBorder(),static Border,"Creates a beveled border with a lowered edge and softened corners, using brighter shades of the component's current background color for highlighting, and darker shading for shadows."
BorderFactory,"createMatteBorder(int top, int left, int bottom, int right, Color color)",static MatteBorder,Creates a matte-look border using a solid color.
BorderFactory,"createMatteBorder(int top, int left, int bottom, int right, Icon tileIcon)",static MatteBorder,Creates a matte-look border that consists of multiple tiles of a specified icon.
BorderFactory,createRaisedBevelBorder(),static Border,"Creates a border with a raised beveled edge, using brighter shades of the component's current background color for highlighting, and darker shading for shadows."
BorderFactory,createRaisedSoftBevelBorder(),static Border,"Creates a beveled border with a raised edge and softened corners, using brighter shades of the component's current background color for highlighting, and darker shading for shadows."
BorderFactory,createSoftBevelBorder(int type),static Border,"Creates a beveled border of the specified type with softened corners, using brighter shades of the component's current background color for highlighting, and darker shading for shadows."
BorderFactory,"createSoftBevelBorder(int type, Color highlight, Color shadow)",static Border,"Creates a beveled border of the specified type with softened corners, using the specified highlighting and shadowing."
BorderFactory,"createSoftBevelBorder(int type, Color highlightOuter, Color highlightInner, Color shadowOuter, Color shadowInner)",static Border,"Creates a beveled border of the specified type with softened corners, using the specified colors for the inner and outer edges of the highlight and the shadow areas."
BorderFactory,createStrokeBorder(BasicStroke stroke),static Border,Creates a border of the specified stroke.
BorderFactory,"createStrokeBorder(BasicStroke stroke, Paint paint)",static Border,Creates a border of the specified stroke and paint.
BorderFactory,createTitledBorder(Border border),static TitledBorder,"Creates a new titled border with an empty title, the specified border object, the default text position (determined by the current look and feel), the default justification (leading), and the default font and text color (determined by the current look and feel)."
BorderFactory,"createTitledBorder(Border border, String title)",static TitledBorder,"Adds a title to an existing border, with default positioning (determined by the current look and feel), default justification (leading) and the default font and text color (determined by the current look and feel)."
BorderFactory,"createTitledBorder(Border border, String title, int titleJustification, int titlePosition)",static TitledBorder,"Adds a title to an existing border, with the specified positioning and using the default font and text color (determined by the current look and feel)."
BorderFactory,"createTitledBorder(Border border, String title, int titleJustification, int titlePosition, Font titleFont)",static TitledBorder,"Adds a title to an existing border, with the specified positioning and font, and using the default text color (determined by the current look and feel)."
BorderFactory,"createTitledBorder(Border border, String title, int titleJustification, int titlePosition, Font titleFont, Color titleColor)",static TitledBorder,"Adds a title to an existing border, with the specified positioning, font and color."
BorderFactory,createTitledBorder(String title),static TitledBorder,"Creates a new titled border with the specified title, the default border type (determined by the current look and feel), the default text position (determined by the current look and feel), the default justification (leading), and the default font and text color (determined by the current look and feel)."
Box,createGlue(),static Component,"Creates an invisible ""glue"" component that can be useful in a Box whose visible components have a maximum width (for a horizontal box) or height (for a vertical box)."
Box,createHorizontalBox(),static Box,Creates a Box that displays its components from left to right.
Box,createHorizontalGlue(),static Component,Creates a horizontal glue component.
Box,createHorizontalStrut(int width),static Component,"Creates an invisible, fixed-width component."
Box,createRigidArea(Dimension d),static Component,Creates an invisible component that's always the specified size.
Box,createVerticalBox(),static Box,Creates a Box that displays its components from top to bottom.
Box,createVerticalGlue(),static Component,Creates a vertical glue component.
Box,createVerticalStrut(int height),static Component,"Creates an invisible, fixed-height component."
Box,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this Box.
Box,paintComponent(Graphics g),protected void,Paints this Box.
Box,setLayout(LayoutManager l),void,"Throws an AWTError, since a Box can use only a BoxLayout."
Box.Filler,"changeShape(Dimension min, Dimension pref, Dimension max)",void,Change the size requests for this shape.
Box.Filler,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this Box.Filler.
Box.Filler,paintComponent(Graphics g),protected void,Paints this Filler.
BoxLayout,"addLayoutComponent(Component comp, Object constraints)",void,Not used by this class.
BoxLayout,"addLayoutComponent(String name, Component comp)",void,Not used by this class.
BoxLayout,getAxis(),int,Returns the axis that was used to lay out components.
BoxLayout,getLayoutAlignmentX(Container target),float,Returns the alignment along the X axis for the container.
BoxLayout,getLayoutAlignmentY(Container target),float,Returns the alignment along the Y axis for the container.
BoxLayout,getTarget(),Container,Returns the container that uses this layout manager.
BoxLayout,invalidateLayout(Container target),void,"Indicates that a child has changed its layout related information, and thus any cached calculations should be flushed."
BoxLayout,layoutContainer(Container target),void,Called by the AWT when the specified container needs to be laid out.
BoxLayout,maximumLayoutSize(Container target),Dimension,Returns the maximum dimensions the target container can use to lay out the components it contains.
BoxLayout,minimumLayoutSize(Container target),Dimension,Returns the minimum dimensions needed to lay out the components contained in the specified target container.
BoxLayout,preferredLayoutSize(Container target),Dimension,"Returns the preferred dimensions for this layout, given the components in the specified target container."
BoxLayout,removeLayoutComponent(Component comp),void,Not used by this class.
ButtonGroup,add(AbstractButton b),void,Adds the button to the group.
ButtonGroup,clearSelection(),void,Clears the selection such that none of the buttons in the ButtonGroup are selected.
ButtonGroup,getButtonCount(),int,Returns the number of buttons in the group.
ButtonGroup,getElements(),Enumeration<AbstractButton>,Returns all the buttons that are participating in this group.
ButtonGroup,getSelection(),ButtonModel,Returns the model of the selected button.
ButtonGroup,isSelected(ButtonModel m),boolean,Returns whether a ButtonModel is selected.
ButtonGroup,remove(AbstractButton b),void,Removes the button from the group.
ButtonGroup,"setSelected(ButtonModel m, boolean b)",void,Sets the selected value for the ButtonModel.
CellRendererPane,"addImpl(Component x, Object constraints, int index)",protected void,If the specified component is already a child of this then we don't bother doing anything - stacking order doesn't matter for cell renderer components (CellRendererPane doesn't paint anyway).
CellRendererPane,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this CellRendererPane.
CellRendererPane,invalidate(),void,Overridden to avoid propagating a invalidate up the tree when the cell renderer child is configured.
CellRendererPane,paint(Graphics g),void,Shouldn't be called.
CellRendererPane,"paintComponent(Graphics g, Component c, Container p, int x, int y, int w, int h)",void,"Calls this.paintComponent(g, c, p, x, y, w, h, false)."
CellRendererPane,"paintComponent(Graphics g, Component c, Container p, int x, int y, int w, int h, boolean shouldValidate)",void,Paint a cell renderer component c on graphics object g.
CellRendererPane,"paintComponent(Graphics g, Component c, Container p, Rectangle r)",void,"Calls this.paintComponent() with the rectangles x,y,width,height fields."
CellRendererPane,update(Graphics g),void,Shouldn't be called.
ComponentInputMap,clear(),void,Removes all the mappings from this object.
ComponentInputMap,getComponent(),JComponent,Returns the component the InputMap was created for.
ComponentInputMap,"put(KeyStroke keyStroke, Object actionMapKey)",void,Adds a binding for keyStroke to actionMapKey.
ComponentInputMap,remove(KeyStroke key),void,Removes the binding for key from this object.
ComponentInputMap,setParent(InputMap map),void,"Sets the parent, which must be a ComponentInputMap associated with the same component as this ComponentInputMap."
DebugGraphics,"clearRect(int x, int y, int width, int height)",void,Overrides Graphics.clearRect.
DebugGraphics,"clipRect(int x, int y, int width, int height)",void,Overrides Graphics.clipRect.
DebugGraphics,"copyArea(int x, int y, int width, int height, int destX, int destY)",void,Overrides Graphics.copyArea.
DebugGraphics,create(),Graphics,Overrides Graphics.create to return a DebugGraphics object.
DebugGraphics,"create(int x, int y, int width, int height)",Graphics,Overrides Graphics.create to return a DebugGraphics object.
DebugGraphics,dispose(),void,Overrides Graphics.dispose.
DebugGraphics,"draw3DRect(int x, int y, int width, int height, boolean raised)",void,Overrides Graphics.draw3DRect.
DebugGraphics,"drawArc(int x, int y, int width, int height, int startAngle, int arcAngle)",void,Overrides Graphics.drawArc.
DebugGraphics,"drawBytes(byte[] data, int offset, int length, int x, int y)",void,Overrides Graphics.drawBytes.
DebugGraphics,"drawChars(char[] data, int offset, int length, int x, int y)",void,Overrides Graphics.drawChars.
DebugGraphics,"drawImage(Image img, int x, int y, Color bgcolor, ImageObserver observer)",boolean,Overrides Graphics.drawImage.
DebugGraphics,"drawImage(Image img, int x, int y, ImageObserver observer)",boolean,Overrides Graphics.drawImage.
DebugGraphics,"drawImage(Image img, int x, int y, int width, int height, Color bgcolor, ImageObserver observer)",boolean,Overrides Graphics.drawImage.
DebugGraphics,"drawImage(Image img, int x, int y, int width, int height, ImageObserver observer)",boolean,Overrides Graphics.drawImage.
DebugGraphics,"drawImage(Image img, int dx1, int dy1, int dx2, int dy2, int sx1, int sy1, int sx2, int sy2, Color bgcolor, ImageObserver observer)",boolean,Overrides Graphics.drawImage.
DebugGraphics,"drawImage(Image img, int dx1, int dy1, int dx2, int dy2, int sx1, int sy1, int sx2, int sy2, ImageObserver observer)",boolean,Overrides Graphics.drawImage.
DebugGraphics,"drawLine(int x1, int y1, int x2, int y2)",void,Overrides Graphics.drawLine.
DebugGraphics,"drawOval(int x, int y, int width, int height)",void,Overrides Graphics.drawOval.
DebugGraphics,"drawPolygon(int[] xPoints, int[] yPoints, int nPoints)",void,Overrides Graphics.drawPolygon.
DebugGraphics,"drawPolyline(int[] xPoints, int[] yPoints, int nPoints)",void,Overrides Graphics.drawPolyline.
DebugGraphics,"drawRect(int x, int y, int width, int height)",void,Overrides Graphics.drawRect.
DebugGraphics,"drawRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight)",void,Overrides Graphics.drawRoundRect.
DebugGraphics,"drawString(AttributedCharacterIterator iterator, int x, int y)",void,Overrides Graphics.drawString.
DebugGraphics,"drawString(String aString, int x, int y)",void,Overrides Graphics.drawString.
DebugGraphics,"fill3DRect(int x, int y, int width, int height, boolean raised)",void,Overrides Graphics.fill3DRect.
DebugGraphics,"fillArc(int x, int y, int width, int height, int startAngle, int arcAngle)",void,Overrides Graphics.fillArc.
DebugGraphics,"fillOval(int x, int y, int width, int height)",void,Overrides Graphics.fillOval.
DebugGraphics,"fillPolygon(int[] xPoints, int[] yPoints, int nPoints)",void,Overrides Graphics.fillPolygon.
DebugGraphics,"fillRect(int x, int y, int width, int height)",void,Overrides Graphics.fillRect.
DebugGraphics,"fillRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight)",void,Overrides Graphics.fillRoundRect.
DebugGraphics,flashColor(),static Color,Returns the Color used to flash drawing operations.
DebugGraphics,flashCount(),static int,Returns the number of times that drawing operations will flash.
DebugGraphics,flashTime(),static int,Returns the time delay of drawing operation flashing.
DebugGraphics,getClip(),Shape,Overrides Graphics.getClip.
DebugGraphics,getClipBounds(),Rectangle,Overrides Graphics.getClipBounds.
DebugGraphics,getColor(),Color,Returns the Color used for text drawing operations.
DebugGraphics,getDebugOptions(),int,Returns the current debugging options for this DebugGraphics.
DebugGraphics,getFont(),Font,Returns the Font used for text drawing operations.
DebugGraphics,getFontMetrics(),FontMetrics,Overrides Graphics.getFontMetrics.
DebugGraphics,getFontMetrics(Font f),FontMetrics,Overrides Graphics.getFontMetrics.
DebugGraphics,isDrawingBuffer(),boolean,Returns the drawingBuffer value.
DebugGraphics,logStream(),static PrintStream,Returns the stream to which the DebugGraphics logs drawing operations.
DebugGraphics,"setClip(int x, int y, int width, int height)",void,Overrides Graphics.setClip.
DebugGraphics,setClip(Shape clip),void,Overrides Graphics.setClip.
DebugGraphics,setColor(Color aColor),void,Sets the color to be used for drawing and filling lines and shapes.
DebugGraphics,setDebugOptions(int options),void,Enables/disables diagnostic information about every graphics operation.
DebugGraphics,setFlashColor(Color flashColor),static void,Sets the Color used to flash drawing operations.
DebugGraphics,setFlashCount(int flashCount),static void,Sets the number of times that drawing operations will flash.
DebugGraphics,setFlashTime(int flashTime),static void,Sets the time delay of drawing operation flashing.
DebugGraphics,setFont(Font aFont),void,Sets the Font used for text drawing operations.
DebugGraphics,setLogStream(PrintStream stream),static void,Sets the stream to which the DebugGraphics logs drawing operations.
DebugGraphics,setPaintMode(),void,Overrides Graphics.setPaintMode.
DebugGraphics,setXORMode(Color aColor),void,Overrides Graphics.setXORMode.
DebugGraphics,"translate(int x, int y)",void,Overrides Graphics.translate.
DefaultBoundedRangeModel,addChangeListener(ChangeListener l),void,Adds a ChangeListener.
DefaultBoundedRangeModel,fireStateChanged(),protected void,Runs each ChangeListener's stateChanged method.
DefaultBoundedRangeModel,getChangeListeners(),ChangeListener[],Returns an array of all the change listeners registered on this DefaultBoundedRangeModel.
DefaultBoundedRangeModel,getExtent(),int,Returns the model's extent.
DefaultBoundedRangeModel,getListeners(Class<T> listenerType),<T extends EventListener>T[],Returns an array of all the objects currently registered as FooListeners upon this model.
DefaultBoundedRangeModel,getMaximum(),int,Returns the model's maximum.
DefaultBoundedRangeModel,getMinimum(),int,Returns the model's minimum.
DefaultBoundedRangeModel,getValue(),int,Returns the model's current value.
DefaultBoundedRangeModel,getValueIsAdjusting(),boolean,Returns true if the value is in the process of changing as a result of actions being taken by the user.
DefaultBoundedRangeModel,removeChangeListener(ChangeListener l),void,Removes a ChangeListener.
DefaultBoundedRangeModel,setExtent(int n),void,Sets the extent to n after ensuring that n is greater than or equal to zero and falls within the model's constraints:
DefaultBoundedRangeModel,setMaximum(int n),void,Sets the maximum to n after ensuring that n that the other three properties obey the model's constraints:
DefaultBoundedRangeModel,setMinimum(int n),void,Sets the minimum to n after ensuring that n that the other three properties obey the model's constraints:
DefaultBoundedRangeModel,"setRangeProperties(int newValue, int newExtent, int newMin, int newMax, boolean adjusting)",void,Sets all of the BoundedRangeModel properties after forcing the arguments to obey the usual constraints:
DefaultBoundedRangeModel,setValue(int n),void,Sets the current value of the model.
DefaultBoundedRangeModel,setValueIsAdjusting(boolean b),void,Sets the valueIsAdjusting property.
DefaultBoundedRangeModel,toString(),String,Returns a string that displays all of the BoundedRangeModel properties.
DefaultButtonModel,addActionListener(ActionListener l),void,Adds an ActionListener to the model.
DefaultButtonModel,addChangeListener(ChangeListener l),void,Adds a ChangeListener to the model.
DefaultButtonModel,addItemListener(ItemListener l),void,Adds an ItemListener to the model.
DefaultButtonModel,fireActionPerformed(ActionEvent e),protected void,Notifies all listeners that have registered interest for notification on this event type.
DefaultButtonModel,fireItemStateChanged(ItemEvent e),protected void,Notifies all listeners that have registered interest for notification on this event type.
DefaultButtonModel,fireStateChanged(),protected void,Notifies all listeners that have registered interest for notification on this event type.
DefaultButtonModel,getActionCommand(),String,Returns the action command string for the button.
DefaultButtonModel,getActionListeners(),ActionListener[],Returns an array of all the action listeners registered on this DefaultButtonModel.
DefaultButtonModel,getChangeListeners(),ChangeListener[],Returns an array of all the change listeners registered on this DefaultButtonModel.
DefaultButtonModel,getGroup(),ButtonGroup,Returns the group that the button belongs to.
DefaultButtonModel,getItemListeners(),ItemListener[],Returns an array of all the item listeners registered on this DefaultButtonModel.
DefaultButtonModel,getListeners(Class<T> listenerType),<T extends EventListener>T[],Returns an array of all the objects currently registered as FooListeners upon this model.
DefaultButtonModel,getMnemonic(),int,Gets the keyboard mnemonic for the button.
DefaultButtonModel,getSelectedObjects(),Object[],Overridden to return null.
DefaultButtonModel,isArmed(),boolean,Indicates partial commitment towards triggering the button.
DefaultButtonModel,isEnabled(),boolean,"Indicates if the button can be selected or triggered by an input device, such as a mouse pointer."
DefaultButtonModel,isPressed(),boolean,Indicates if the button is pressed.
DefaultButtonModel,isRollover(),boolean,Indicates that the mouse is over the button.
DefaultButtonModel,isSelected(),boolean,Indicates if the button has been selected.
DefaultButtonModel,removeActionListener(ActionListener l),void,Removes an ActionListener from the model.
DefaultButtonModel,removeChangeListener(ChangeListener l),void,Removes a ChangeListener from the model.
DefaultButtonModel,removeItemListener(ItemListener l),void,Removes an ItemListener from the model.
DefaultButtonModel,setActionCommand(String actionCommand),void,Sets the action command string that gets sent as part of the ActionEvent when the button is triggered.
DefaultButtonModel,setArmed(boolean b),void,Marks the button as armed or unarmed.
DefaultButtonModel,setEnabled(boolean b),void,Enables or disables the button.
DefaultButtonModel,setGroup(ButtonGroup group),void,"Identifies the group the button belongs to -- needed for radio buttons, which are mutually exclusive within their group."
DefaultButtonModel,setMnemonic(int key),void,Sets the keyboard mnemonic (shortcut key or accelerator key) for the button.
DefaultButtonModel,setPressed(boolean b),void,Sets the button to pressed or unpressed.
DefaultButtonModel,setRollover(boolean b),void,Sets or clears the button's rollover state
DefaultButtonModel,setSelected(boolean b),void,Selects or deselects the button.
DefaultCellEditor,cancelCellEditing(),void,Forwards the message from the CellEditor to the delegate.
DefaultCellEditor,getCellEditorValue(),Object,Forwards the message from the CellEditor to the delegate.
DefaultCellEditor,getClickCountToStart(),int,Returns the number of clicks needed to start editing.
DefaultCellEditor,getComponent(),Component,Returns a reference to the editor component.
DefaultCellEditor,"getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column)",Component,Implements the TableCellEditor interface.
DefaultCellEditor,"getTreeCellEditorComponent(JTree tree, Object value, boolean isSelected, boolean expanded, boolean leaf, int row)",Component,Implements the TreeCellEditor interface.
DefaultCellEditor,isCellEditable(EventObject anEvent),boolean,Forwards the message from the CellEditor to the delegate.
DefaultCellEditor,setClickCountToStart(int count),void,Specifies the number of clicks needed to start editing.
DefaultCellEditor,shouldSelectCell(EventObject anEvent),boolean,Forwards the message from the CellEditor to the delegate.
DefaultCellEditor,stopCellEditing(),boolean,Forwards the message from the CellEditor to the delegate.
DefaultComboBoxModel,addElement(E anObject),void,Adds an item at the end of the model.
DefaultComboBoxModel,getElementAt(int index),E,Returns the value at the specified index.
DefaultComboBoxModel,getIndexOf(Object anObject),int,Returns the index-position of the specified object in the list.
DefaultComboBoxModel,getSelectedItem(),Object,Returns the selected item
DefaultComboBoxModel,getSize(),int,Returns the length of the list.
DefaultComboBoxModel,"insertElementAt(E anObject, int index)",void,Adds an item at a specific index.
DefaultComboBoxModel,removeAllElements(),void,Empties the list.
DefaultComboBoxModel,removeElement(Object anObject),void,Removes an item from the model.
DefaultComboBoxModel,removeElementAt(int index),void,Removes an item at a specific index.
DefaultComboBoxModel,setSelectedItem(Object anObject),void,Set the value of the selected item.
DefaultDesktopManager,activateFrame(JInternalFrame f),void,This will activate f moving it to the front.
DefaultDesktopManager,beginDraggingFrame(JComponent f),void,This method is normally called when the user has indicated that they will begin dragging a component around.
DefaultDesktopManager,"beginResizingFrame(JComponent f, int direction)",void,This methods is normally called when the user has indicated that they will begin resizing the frame.
DefaultDesktopManager,closeFrame(JInternalFrame f),void,"Removes the frame, and, if necessary, the desktopIcon, from its parent."
DefaultDesktopManager,deactivateFrame(JInternalFrame f),void,"Generally, indicate that this frame has lost focus."
DefaultDesktopManager,deiconifyFrame(JInternalFrame f),void,Removes the desktopIcon from its parent and adds its frame to the parent.
DefaultDesktopManager,"dragFrame(JComponent f, int newX, int newY)",void,Moves the visible location of the frame being dragged to the location specified.
DefaultDesktopManager,endDraggingFrame(JComponent f),void,This method signals the end of the dragging session.
DefaultDesktopManager,endResizingFrame(JComponent f),void,This method signals the end of the resize session.
DefaultDesktopManager,getBoundsForIconOf(JInternalFrame f),protected Rectangle,The iconifyFrame() code calls this to determine the proper bounds for the desktopIcon.
DefaultDesktopManager,getPreviousBounds(JInternalFrame f),protected Rectangle,Gets the normal bounds of the component prior to the component being maximized.
DefaultDesktopManager,iconifyFrame(JInternalFrame f),void,Removes the frame from its parent and adds its desktopIcon to the parent.
DefaultDesktopManager,maximizeFrame(JInternalFrame f),void,Resizes the frame to fill its parents bounds.
DefaultDesktopManager,minimizeFrame(JInternalFrame f),void,Restores the frame back to its size and position prior to a maximizeFrame call.
DefaultDesktopManager,openFrame(JInternalFrame f),void,Normally this method will not be called.
DefaultDesktopManager,removeIconFor(JInternalFrame f),protected void,Convenience method to remove the desktopIcon of f is necessary.
DefaultDesktopManager,"resizeFrame(JComponent f, int newX, int newY, int newWidth, int newHeight)",void,Calls setBoundsForFrame with the new values.
DefaultDesktopManager,"setBoundsForFrame(JComponent f, int newX, int newY, int newWidth, int newHeight)",void,This moves the JComponent and repaints the damaged areas.
DefaultDesktopManager,"setPreviousBounds(JInternalFrame f, Rectangle r)",protected void,Stores the bounds of the component just before a maximize call.
DefaultDesktopManager,"setWasIcon(JInternalFrame f, Boolean value)",protected void,Sets that the component has been iconized and the bounds of the desktopIcon are valid.
DefaultDesktopManager,wasIcon(JInternalFrame f),protected boolean,"Returns true if the component has been iconized and the bounds of the desktopIcon are valid, otherwise returns false."
DefaultFocusManager,"compareTabOrder(Component a, Component b)",boolean,NULL
DefaultFocusManager,"getComponentAfter(Container aContainer, Component aComponent)",Component,NULL
DefaultFocusManager,"getComponentBefore(Container aContainer, Component aComponent)",Component,NULL
DefaultFocusManager,getFirstComponent(Container aContainer),Component,NULL
DefaultFocusManager,getLastComponent(Container aContainer),Component,NULL
DefaultListCellRenderer,"firePropertyChange(String propertyName, boolean oldValue, boolean newValue)",void,Overridden for performance reasons.
DefaultListCellRenderer,"firePropertyChange(String propertyName, byte oldValue, byte newValue)",void,Overridden for performance reasons.
DefaultListCellRenderer,"firePropertyChange(String propertyName, char oldValue, char newValue)",void,Overridden for performance reasons.
DefaultListCellRenderer,"firePropertyChange(String propertyName, double oldValue, double newValue)",void,Overridden for performance reasons.
DefaultListCellRenderer,"firePropertyChange(String propertyName, float oldValue, float newValue)",void,Overridden for performance reasons.
DefaultListCellRenderer,"firePropertyChange(String propertyName, int oldValue, int newValue)",void,Overridden for performance reasons.
DefaultListCellRenderer,"firePropertyChange(String propertyName, long oldValue, long newValue)",void,Overridden for performance reasons.
DefaultListCellRenderer,"firePropertyChange(String propertyName, Object oldValue, Object newValue)",protected void,Overridden for performance reasons.
DefaultListCellRenderer,"firePropertyChange(String propertyName, short oldValue, short newValue)",void,Overridden for performance reasons.
DefaultListCellRenderer,"getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus)",Component,Return a component that has been configured to display the specified value.
DefaultListCellRenderer,invalidate(),void,Overridden for performance reasons.
DefaultListCellRenderer,isOpaque(),boolean,Overridden for performance reasons.
DefaultListCellRenderer,repaint(),void,Overridden for performance reasons.
DefaultListCellRenderer,"repaint(long tm, int x, int y, int width, int height)",void,Overridden for performance reasons.
DefaultListCellRenderer,repaint(Rectangle r),void,Overridden for performance reasons.
DefaultListCellRenderer,revalidate(),void,Overridden for performance reasons.
DefaultListCellRenderer,validate(),void,Overridden for performance reasons.
DefaultListModel,"add(int index, E element)",void,Inserts the specified element at the specified position in this list.
DefaultListModel,addElement(E element),void,Adds the specified component to the end of this list.
DefaultListModel,capacity(),int,Returns the current capacity of this list.
DefaultListModel,clear(),void,Removes all of the elements from this list.
DefaultListModel,contains(Object elem),boolean,Tests whether the specified object is a component in this list.
DefaultListModel,copyInto(Object[] anArray),void,Copies the components of this list into the specified array.
DefaultListModel,elementAt(int index),E,Returns the component at the specified index.
DefaultListModel,elements(),Enumeration<E>,Returns an enumeration of the components of this list.
DefaultListModel,ensureCapacity(int minCapacity),void,"Increases the capacity of this list, if necessary, to ensure that it can hold at least the number of components specified by the minimum capacity argument."
DefaultListModel,firstElement(),E,Returns the first component of this list.
DefaultListModel,get(int index),E,Returns the element at the specified position in this list.
DefaultListModel,getElementAt(int index),E,Returns the component at the specified index.
DefaultListModel,getSize(),int,Returns the number of components in this list.
DefaultListModel,indexOf(Object elem),int,Searches for the first occurrence of elem.
DefaultListModel,"indexOf(Object elem, int index)",int,"Searches for the first occurrence of elem, beginning the search at index."
DefaultListModel,"insertElementAt(E element, int index)",void,Inserts the specified element as a component in this list at the specified index.
DefaultListModel,isEmpty(),boolean,Tests whether this list has any components.
DefaultListModel,lastElement(),E,Returns the last component of the list.
DefaultListModel,lastIndexOf(Object elem),int,Returns the index of the last occurrence of elem.
DefaultListModel,"lastIndexOf(Object elem, int index)",int,"Searches backwards for elem, starting from the specified index, and returns an index to it."
DefaultListModel,remove(int index),E,Removes the element at the specified position in this list.
DefaultListModel,removeAllElements(),void,Removes all components from this list and sets its size to zero.
DefaultListModel,removeElement(Object obj),boolean,Removes the first (lowest-indexed) occurrence of the argument from this list.
DefaultListModel,removeElementAt(int index),void,Deletes the component at the specified index.
DefaultListModel,"removeRange(int fromIndex, int toIndex)",void,Deletes the components at the specified range of indexes.
DefaultListModel,"set(int index, E element)",E,Replaces the element at the specified position in this list with the specified element.
DefaultListModel,"setElementAt(E element, int index)",void,Sets the component at the specified index of this list to be the specified element.
DefaultListModel,setSize(int newSize),void,Sets the size of this list.
DefaultListModel,size(),int,Returns the number of components in this list.
DefaultListModel,toArray(),Object[],Returns an array containing all of the elements in this list in the correct order.
DefaultListModel,toString(),String,Returns a string that displays and identifies this object's properties.
DefaultListModel,trimToSize(),void,Trims the capacity of this list to be the list's current size.
DefaultListSelectionModel,addListSelectionListener(ListSelectionListener l),void,Add a listener to the list that's notified each time a change to the selection occurs.
DefaultListSelectionModel,"addSelectionInterval(int index0, int index1)",void,Changes the selection to be the set union of the current selection and the indices between index0 and index1 inclusive.
DefaultListSelectionModel,clearSelection(),void,Change the selection to the empty set.
DefaultListSelectionModel,clone(),Object,Returns a clone of this selection model with the same selection.
DefaultListSelectionModel,fireValueChanged(boolean isAdjusting),protected void,Notifies listeners that we have ended a series of adjustments.
DefaultListSelectionModel,"fireValueChanged(int firstIndex, int lastIndex)",protected void,"Notifies ListSelectionListeners that the value of the selection, in the closed interval firstIndex, lastIndex, has changed."
DefaultListSelectionModel,"fireValueChanged(int firstIndex, int lastIndex, boolean isAdjusting)",protected void,NULL
DefaultListSelectionModel,getAnchorSelectionIndex(),int,"Return the first index argument from the most recent call to setSelectionInterval(), addSelectionInterval() or removeSelectionInterval()."
DefaultListSelectionModel,getLeadSelectionIndex(),int,"Return the second index argument from the most recent call to setSelectionInterval(), addSelectionInterval() or removeSelectionInterval()."
DefaultListSelectionModel,getListeners(Class<T> listenerType),<T extends EventListener>T[],Returns an array of all the objects currently registered as FooListeners upon this model.
DefaultListSelectionModel,getListSelectionListeners(),ListSelectionListener[],Returns an array of all the list selection listeners registered on this DefaultListSelectionModel.
DefaultListSelectionModel,getMaxSelectionIndex(),int,Returns the last selected index or -1 if the selection is empty.
DefaultListSelectionModel,getMinSelectionIndex(),int,Returns the first selected index or -1 if the selection is empty.
DefaultListSelectionModel,getSelectionMode(),int,Returns the current selection mode.
DefaultListSelectionModel,getValueIsAdjusting(),boolean,Returns true if the selection is undergoing a series of changes.
DefaultListSelectionModel,"insertIndexInterval(int index, int length, boolean before)",void,Insert length indices beginning before/after index.
DefaultListSelectionModel,isLeadAnchorNotificationEnabled(),boolean,Returns the value of the leadAnchorNotificationEnabled flag.
DefaultListSelectionModel,isSelectedIndex(int index),boolean,Returns true if the specified index is selected.
DefaultListSelectionModel,isSelectionEmpty(),boolean,Returns true if no indices are selected.
DefaultListSelectionModel,moveLeadSelectionIndex(int leadIndex),void,"Set the lead selection index, leaving all selection values unchanged."
DefaultListSelectionModel,"removeIndexInterval(int index0, int index1)",void,"Remove the indices in the interval index0,index1 (inclusive) from the selection model."
DefaultListSelectionModel,removeListSelectionListener(ListSelectionListener l),void,Remove a listener from the list that's notified each time a change to the selection occurs.
DefaultListSelectionModel,"removeSelectionInterval(int index0, int index1)",void,Changes the selection to be the set difference of the current selection and the indices between index0 and index1 inclusive.
DefaultListSelectionModel,setAnchorSelectionIndex(int anchorIndex),void,"Set the anchor selection index, leaving all selection values unchanged."
DefaultListSelectionModel,setLeadAnchorNotificationEnabled(boolean flag),void,Sets the value of the leadAnchorNotificationEnabled flag.
DefaultListSelectionModel,setLeadSelectionIndex(int leadIndex),void,"Sets the lead selection index, ensuring that values between the anchor and the new lead are either all selected or all deselected."
DefaultListSelectionModel,"setSelectionInterval(int index0, int index1)",void,Changes the selection to be between index0 and index1 inclusive.
DefaultListSelectionModel,setSelectionMode(int selectionMode),void,Sets the selection mode.
DefaultListSelectionModel,setValueIsAdjusting(boolean isAdjusting),void,"Sets the valueIsAdjusting property, which indicates whether or not upcoming selection changes should be considered part of a single change."
DefaultListSelectionModel,toString(),String,Returns a string that displays and identifies this object's properties.
DefaultRowSorter,allRowsChanged(),void,Invoked when the contents of the underlying model have completely changed.
DefaultRowSorter,convertRowIndexToModel(int index),int,Returns the location of index in terms of the underlying model.
DefaultRowSorter,convertRowIndexToView(int index),int,Returns the location of index in terms of the view.
DefaultRowSorter,getComparator(int column),Comparator<?>,Returns the Comparator for the specified column.
DefaultRowSorter,getMaxSortKeys(),int,Returns the maximum number of sort keys.
DefaultRowSorter,getModel(),M,Returns the underlying model.
DefaultRowSorter,getModelRowCount(),int,Returns the number of rows in the underlying model.
DefaultRowSorter,getModelWrapper(),"protected DefaultRowSorter.ModelWrapper<M,I>",Returns the model wrapper providing the data that is being sorted and filtered.
DefaultRowSorter,getRowFilter(),"RowFilter<? super M,? super I>","Returns the filter that determines which rows, if any, should be hidden from view."
DefaultRowSorter,getSortKeys(),List<? extends RowSorter.SortKey>,Returns the current sort keys.
DefaultRowSorter,getSortsOnUpdates(),boolean,"Returns true if a sort should happen when the underlying model is updated; otherwise, returns false."
DefaultRowSorter,getViewRowCount(),int,Returns the number of rows in the view.
DefaultRowSorter,isSortable(int column),boolean,"Returns true if the specified column is sortable; otherwise, false."
DefaultRowSorter,modelStructureChanged(),void,Invoked when the underlying model structure has completely changed.
DefaultRowSorter,"rowsDeleted(int firstRow, int endRow)",void,Invoked when rows have been deleted from the underlying model in the specified range (inclusive).
DefaultRowSorter,"rowsInserted(int firstRow, int endRow)",void,Invoked when rows have been inserted into the underlying model in the specified range (inclusive).
DefaultRowSorter,"rowsUpdated(int firstRow, int endRow)",void,Invoked when rows have been changed in the underlying model between the specified range (inclusive).
DefaultRowSorter,"rowsUpdated(int firstRow, int endRow, int column)",void,Invoked when the column in the rows have been updated in the underlying model between the specified range.
DefaultRowSorter,"setComparator(int column, Comparator<?> comparator)",void,Sets the Comparator to use when sorting the specified column.
DefaultRowSorter,setMaxSortKeys(int max),void,Sets the maximum number of sort keys.
DefaultRowSorter,"setModelWrapper(DefaultRowSorter.ModelWrapper<M,I> modelWrapper)",protected void,Sets the model wrapper providing the data that is being sorted and filtered.
DefaultRowSorter,"setRowFilter(RowFilter<? super M,? super I> filter)",void,"Sets the filter that determines which rows, if any, should be hidden from the view."
DefaultRowSorter,"setSortable(int column, boolean sortable)",void,Sets whether or not the specified column is sortable.
DefaultRowSorter,setSortKeys(List<? extends RowSorter.SortKey> sortKeys),void,Sets the sort keys.
DefaultRowSorter,setSortsOnUpdates(boolean sortsOnUpdates),void,"If true, specifies that a sort should happen when the underlying model is updated (rowsUpdated is invoked)."
DefaultRowSorter,sort(),void,"Sorts and filters the rows in the view based on the sort keys of the columns currently being sorted and the filter, if any, associated with this sorter."
DefaultRowSorter,toggleSortOrder(int column),void,"Reverses the sort order from ascending to descending (or descending to ascending) if the specified column is already the primary sorted column; otherwise, makes the specified column the primary sorted column, with an ascending sort order."
DefaultRowSorter,useToString(int column),protected boolean,Returns whether or not to convert the value to a string before doing comparisons when sorting.
DefaultRowSorter.ModelWrapper,getColumnCount(),abstract int,Returns the number of columns in the model.
DefaultRowSorter.ModelWrapper,getIdentifier(int row),abstract I,Returns the identifier for the specified row.
DefaultRowSorter.ModelWrapper,getModel(),abstract M,Returns the underlying model that this Model is wrapping.
DefaultRowSorter.ModelWrapper,getRowCount(),abstract int,Returns the number of rows in the model.
DefaultRowSorter.ModelWrapper,"getStringValueAt(int row, int column)",String,Returns the value as a String at the specified index.
DefaultRowSorter.ModelWrapper,"getValueAt(int row, int column)",abstract Object,Returns the value at the specified index.
DefaultSingleSelectionModel,addChangeListener(ChangeListener l),void,Adds a ChangeListener to the button.
DefaultSingleSelectionModel,clearSelection(),void,Clears the selection (to -1).
DefaultSingleSelectionModel,fireStateChanged(),protected void,Notifies all listeners that have registered interest for notification on this event type.
DefaultSingleSelectionModel,getChangeListeners(),ChangeListener[],Returns an array of all the change listeners registered on this DefaultSingleSelectionModel.
DefaultSingleSelectionModel,getListeners(Class<T> listenerType),<T extends EventListener>T[],Returns an array of all the objects currently registered as FooListeners upon this model.
DefaultSingleSelectionModel,getSelectedIndex(),int,Returns the model's selection.
DefaultSingleSelectionModel,isSelected(),boolean,Returns true if the selection model currently has a selected value.
DefaultSingleSelectionModel,removeChangeListener(ChangeListener l),void,Removes a ChangeListener from the button.
DefaultSingleSelectionModel,setSelectedIndex(int index),void,Sets the model's selected index to index.
FocusManager,disableSwingFocusManager(),static void,"Deprecated. as of 1.4, replaced by KeyboardFocusManager.setDefaultFocusTraversalPolicy(FocusTraversalPolicy)"
FocusManager,getCurrentManager(),static FocusManager,Returns the current KeyboardFocusManager instance for the calling thread's context.
FocusManager,isFocusManagerEnabled(),static boolean,"Deprecated. As of 1.4, replaced by KeyboardFocusManager.getDefaultFocusTraversalPolicy()"
FocusManager,setCurrentManager(FocusManager aFocusManager),static void,Sets the current KeyboardFocusManager instance for the calling thread's context.
GrayFilter,createDisabledImage(Image i),static Image,Creates a disabled image
GrayFilter,"filterRGB(int x, int y, int rgb)",int,Overrides RGBImageFilter.filterRGB.
GroupLayout,"addLayoutComponent(Component component, Object constraints)",void,Notification that a Component has been added to the parent container.
GroupLayout,"addLayoutComponent(String name, Component component)",void,Notification that a Component has been added to the parent container.
GroupLayout,"createBaselineGroup(boolean resizable, boolean anchorBaselineToTop)",GroupLayout.ParallelGroup,Creates and returns a ParallelGroup that aligns it's elements along the baseline.
GroupLayout,createParallelGroup(),GroupLayout.ParallelGroup,Creates and returns a ParallelGroup with an alignment of Alignment.LEADING.
GroupLayout,createParallelGroup(GroupLayout.Alignment alignment),GroupLayout.ParallelGroup,Creates and returns a ParallelGroup with the specified alignment.
GroupLayout,"createParallelGroup(GroupLayout.Alignment alignment, boolean resizable)",GroupLayout.ParallelGroup,Creates and returns a ParallelGroup with the specified alignment and resize behavior.
GroupLayout,createSequentialGroup(),GroupLayout.SequentialGroup,Creates and returns a SequentialGroup.
GroupLayout,getAutoCreateContainerGaps(),boolean,Returns true if gaps between the container and components that border the container are automatically created.
GroupLayout,getAutoCreateGaps(),boolean,Returns true if gaps between components are automatically created.
GroupLayout,getHonorsVisibility(),boolean,Returns whether component visibility is considered when sizing and positioning components.
GroupLayout,getLayoutAlignmentX(Container parent),float,Returns the alignment along the x axis.
GroupLayout,getLayoutAlignmentY(Container parent),float,Returns the alignment along the y axis.
GroupLayout,getLayoutStyle(),LayoutStyle,Returns the LayoutStyle used for calculating the preferred gap between components.
GroupLayout,invalidateLayout(Container parent),void,"Invalidates the layout, indicating that if the layout manager has cached information it should be discarded."
GroupLayout,layoutContainer(Container parent),void,Lays out the specified container.
GroupLayout,linkSize(Component... components),void,"Forces the specified components to have the same size regardless of their preferred, minimum or maximum sizes."
GroupLayout,"linkSize(int axis, Component... components)",void,"Forces the specified components to have the same size along the specified axis regardless of their preferred, minimum or maximum sizes."
GroupLayout,maximumLayoutSize(Container parent),Dimension,Returns the maximum size for the specified container.
GroupLayout,minimumLayoutSize(Container parent),Dimension,Returns the minimum size for the specified container.
GroupLayout,preferredLayoutSize(Container parent),Dimension,Returns the preferred size for the specified container.
GroupLayout,removeLayoutComponent(Component component),void,Notification that a Component has been removed from the parent container.
GroupLayout,"replace(Component existingComponent, Component newComponent)",void,Replaces an existing component with a new one.
GroupLayout,setAutoCreateContainerGaps(boolean autoCreateContainerPadding),void,Sets whether a gap between the container and components that touch the border of the container should automatically be created.
GroupLayout,setAutoCreateGaps(boolean autoCreatePadding),void,Sets whether a gap between components should automatically be created.
GroupLayout,setHonorsVisibility(boolean honorsVisibility),void,Sets whether component visibility is considered when sizing and positioning components.
GroupLayout,"setHonorsVisibility(Component component, Boolean honorsVisibility)",void,Sets whether the component's visibility is considered for sizing and positioning.
GroupLayout,setHorizontalGroup(GroupLayout.Group group),void,Sets the Group that positions and sizes components along the horizontal axis.
GroupLayout,setLayoutStyle(LayoutStyle layoutStyle),void,Sets the LayoutStyle used to calculate the preferred gaps between components.
GroupLayout,setVerticalGroup(GroupLayout.Group group),void,Sets the Group that positions and sizes components along the vertical axis.
GroupLayout,toString(),String,Returns a string representation of this GroupLayout.
ImageIcon,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this ImageIcon.
ImageIcon,getDescription(),String,Gets the description of the image.
ImageIcon,getIconHeight(),int,Gets the height of the icon.
ImageIcon,getIconWidth(),int,Gets the width of the icon.
ImageIcon,getImage(),Image,Returns this icon's Image.
ImageIcon,getImageLoadStatus(),int,Returns the status of the image loading operation.
ImageIcon,getImageObserver(),ImageObserver,Returns the image observer for the image.
ImageIcon,loadImage(Image image),protected void,"Loads the image, returning only when the image is loaded."
ImageIcon,"paintIcon(Component c, Graphics g, int x, int y)",void,Paints the icon.
ImageIcon,setDescription(String description),void,Sets the description of the image.
ImageIcon,setImage(Image image),void,Sets the image displayed by this icon.
ImageIcon,setImageObserver(ImageObserver observer),void,Sets the image observer for the image.
ImageIcon,toString(),String,Returns a string representation of this image.
InputMap,allKeys(),KeyStroke[],Returns an array of the KeyStrokes defined in this InputMap and its parent.
InputMap,clear(),void,Removes all the mappings from this InputMap.
InputMap,get(KeyStroke keyStroke),Object,"Returns the binding for keyStroke, messaging the parent InputMap if the binding is not locally defined."
InputMap,getParent(),InputMap,Gets this InputMap's parent.
InputMap,keys(),KeyStroke[],Returns the KeyStrokes that are bound in this InputMap.
InputMap,"put(KeyStroke keyStroke, Object actionMapKey)",void,Adds a binding for keyStroke to actionMapKey.
InputMap,remove(KeyStroke key),void,Removes the binding for key from this InputMap.
InputMap,setParent(InputMap map),void,Sets this InputMap's parent.
InputMap,size(),int,Returns the number of KeyStroke bindings.
InputVerifier,shouldYieldFocus(JComponent input),boolean,Calls verify(input) to ensure that the input is valid.
InputVerifier,verify(JComponent input),abstract boolean,Checks whether the JComponent's input is valid.
InternalFrameFocusTraversalPolicy,getInitialComponent(JInternalFrame frame),Component,Returns the Component that should receive the focus when a JInternalFrame is selected for the first time.
JApplet,"addImpl(Component comp, Object constraints, int index)",protected void,Adds the specified child Component.
JApplet,createRootPane(),protected JRootPane,Called by the constructor methods to create the default rootPane.
JApplet,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JApplet.
JApplet,getContentPane(),Container,Returns the contentPane object for this applet.
JApplet,getGlassPane(),Component,Returns the glassPane object for this applet.
JApplet,getGraphics(),Graphics,Creates a graphics context for this component.
JApplet,getJMenuBar(),JMenuBar,Returns the menubar set on this applet.
JApplet,getLayeredPane(),JLayeredPane,Returns the layeredPane object for this applet.
JApplet,getRootPane(),JRootPane,Returns the rootPane object for this applet.
JApplet,getTransferHandler(),TransferHandler,Gets the transferHandler property.
JApplet,isRootPaneCheckingEnabled(),protected boolean,Returns whether calls to add and setLayout are forwarded to the contentPane.
JApplet,paramString(),protected String,Returns a string representation of this JApplet.
JApplet,remove(Component comp),void,Removes the specified component from the container.
JApplet,"repaint(long time, int x, int y, int width, int height)",void,Repaints the specified rectangle of this component within time milliseconds.
JApplet,setContentPane(Container contentPane),void,Sets the contentPane property.
JApplet,setGlassPane(Component glassPane),void,Sets the glassPane property.
JApplet,setJMenuBar(JMenuBar menuBar),void,Sets the menubar for this applet.
JApplet,setLayeredPane(JLayeredPane layeredPane),void,Sets the layeredPane property.
JApplet,setLayout(LayoutManager manager),void,Sets the LayoutManager.
JApplet,setRootPane(JRootPane root),protected void,Sets the rootPane property.
JApplet,setRootPaneCheckingEnabled(boolean enabled),protected void,Sets whether calls to add and setLayout are forwarded to the contentPane.
JApplet,setTransferHandler(TransferHandler newHandler),void,"Sets the transferHandler property, which is a mechanism to support transfer of data into this component."
JApplet,update(Graphics g),void,Just calls paint(g).
JButton,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JButton.
JButton,getUIClassID(),String,Returns a string that specifies the name of the L&F class that renders this component.
JButton,isDefaultButton(),boolean,"Gets the value of the defaultButton property, which if true means that this button is the current default button for its JRootPane."
JButton,isDefaultCapable(),boolean,Gets the value of the defaultCapable property.
JButton,paramString(),protected String,Returns a string representation of this JButton.
JButton,removeNotify(),void,"Overrides JComponent.removeNotify to check if this button is currently set as the default button on the RootPane, and if so, sets the RootPane's default button to null to ensure the RootPane doesn't hold onto an invalid button reference."
JButton,setDefaultCapable(boolean defaultCapable),void,"Sets the defaultCapable property, which determines whether this button can be made the default button for its root pane."
JButton,updateUI(),void,Resets the UI property to a value from the current look and feel.
JCheckBox,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JCheckBox.
JCheckBox,getUIClassID(),String,Returns a string that specifies the name of the L&F class that renders this component.
JCheckBox,isBorderPaintedFlat(),boolean,Gets the value of the borderPaintedFlat property.
JCheckBox,paramString(),protected String,Returns a string representation of this JCheckBox.
JCheckBox,setBorderPaintedFlat(boolean b),void,"Sets the borderPaintedFlat property, which gives a hint to the look and feel as to the appearance of the check box border."
JCheckBox,updateUI(),void,Resets the UI property to a value from the current look and feel.
JCheckBoxMenuItem,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JCheckBoxMenuItem.
JCheckBoxMenuItem,getSelectedObjects(),Object[],Returns an array (length 1) containing the check box menu item label or null if the check box is not selected.
JCheckBoxMenuItem,getState(),boolean,Returns the selected-state of the item.
JCheckBoxMenuItem,getUIClassID(),String,Returns the name of the L&F class that renders this component.
JCheckBoxMenuItem,paramString(),protected String,Returns a string representation of this JCheckBoxMenuItem.
JCheckBoxMenuItem,setState(boolean b),void,Sets the selected-state of the item.
JColorChooser,addChooserPanel(AbstractColorChooserPanel panel),void,Adds a color chooser panel to the color chooser.
JColorChooser,"createDialog(Component c, String title, boolean modal, JColorChooser chooserPane, ActionListener okListener, ActionListener cancelListener)",static JDialog,"Creates and returns a new dialog containing the specified ColorChooser pane along with ""OK"", ""Cancel"", and ""Reset"" buttons."
JColorChooser,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JColorChooser.
JColorChooser,getChooserPanels(),AbstractColorChooserPanel[],Returns the specified color panels.
JColorChooser,getColor(),Color,Gets the current color value from the color chooser.
JColorChooser,getDragEnabled(),boolean,Gets the value of the dragEnabled property.
JColorChooser,getPreviewPanel(),JComponent,Returns the preview panel that shows a chosen color.
JColorChooser,getSelectionModel(),ColorSelectionModel,Returns the data model that handles color selections.
JColorChooser,getUI(),ColorChooserUI,Returns the L&F object that renders this component.
JColorChooser,getUIClassID(),String,Returns the name of the L&F class that renders this component.
JColorChooser,paramString(),protected String,Returns a string representation of this JColorChooser.
JColorChooser,removeChooserPanel(AbstractColorChooserPanel panel),AbstractColorChooserPanel,Removes the Color Panel specified.
JColorChooser,setChooserPanels(AbstractColorChooserPanel[] panels),void,Specifies the Color Panels used to choose a color value.
JColorChooser,setColor(Color color),void,Sets the current color of the color chooser to the specified color.
JColorChooser,setColor(int c),void,Sets the current color of the color chooser to the specified color.
JColorChooser,"setColor(int r, int g, int b)",void,Sets the current color of the color chooser to the specified RGB color.
JColorChooser,setDragEnabled(boolean b),void,"Sets the dragEnabled property, which must be true to enable automatic drag handling (the first part of drag and drop) on this component."
JColorChooser,setPreviewPanel(JComponent preview),void,Sets the current preview panel.
JColorChooser,setSelectionModel(ColorSelectionModel newModel),void,Sets the model containing the selected color.
JColorChooser,setUI(ColorChooserUI ui),void,Sets the L&F object that renders this component.
JColorChooser,"showDialog(Component component, String title, Color initialColor)",static Color,Shows a modal color-chooser dialog and blocks until the dialog is hidden.
JColorChooser,updateUI(),void,Notification from the UIManager that the L&F has changed.
JComboBox,actionPerformed(ActionEvent e),void,This method is public as an implementation side effect.
JComboBox,"actionPropertyChanged(Action action, String propertyName)",protected void,Updates the combobox's state in response to property changes in associated action.
JComboBox,addActionListener(ActionListener l),void,Adds an ActionListener.
JComboBox,addItem(E item),void,Adds an item to the item list.
JComboBox,addItemListener(ItemListener aListener),void,Adds an ItemListener.
JComboBox,addPopupMenuListener(PopupMenuListener l),void,Adds a PopupMenu listener which will listen to notification messages from the popup portion of the combo box.
JComboBox,"configureEditor(ComboBoxEditor anEditor, Object anItem)",void,Initializes the editor with the specified item.
JComboBox,configurePropertiesFromAction(Action a),protected void,Sets the properties on this combobox to match those in the specified Action.
JComboBox,contentsChanged(ListDataEvent e),void,This method is public as an implementation side effect.
JComboBox,createActionPropertyChangeListener(Action a),protected PropertyChangeListener,Creates and returns a PropertyChangeListener that is responsible for listening for changes from the specified Action and updating the appropriate properties.
JComboBox,createDefaultKeySelectionManager(),protected JComboBox.KeySelectionManager,Returns an instance of the default key-selection manager.
JComboBox,fireActionEvent(),protected void,Notifies all listeners that have registered interest for notification on this event type.
JComboBox,fireItemStateChanged(ItemEvent e),protected void,Notifies all listeners that have registered interest for notification on this event type.
JComboBox,firePopupMenuCanceled(),void,Notifies PopupMenuListeners that the popup portion of the combo box has been canceled.
JComboBox,firePopupMenuWillBecomeInvisible(),void,Notifies PopupMenuListeners that the popup portion of the combo box has become invisible.
JComboBox,firePopupMenuWillBecomeVisible(),void,Notifies PopupMenuListeners that the popup portion of the combo box will become visible.
JComboBox,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JComboBox.
JComboBox,getAction(),Action,"Returns the currently set Action for this ActionEvent source, or null if no Action is set."
JComboBox,getActionCommand(),String,Returns the action command that is included in the event sent to action listeners.
JComboBox,getActionListeners(),ActionListener[],Returns an array of all the ActionListeners added to this JComboBox with addActionListener().
JComboBox,getEditor(),ComboBoxEditor,Returns the editor used to paint and edit the selected item in the JComboBox field.
JComboBox,getItemAt(int index),E,Returns the list item at the specified index.
JComboBox,getItemCount(),int,Returns the number of items in the list.
JComboBox,getItemListeners(),ItemListener[],Returns an array of all the ItemListeners added to this JComboBox with addItemListener().
JComboBox,getKeySelectionManager(),JComboBox.KeySelectionManager,Returns the list's key-selection manager.
JComboBox,getMaximumRowCount(),int,Returns the maximum number of items the combo box can display without a scrollbar
JComboBox,getModel(),ComboBoxModel<E>,Returns the data model currently used by the JComboBox.
JComboBox,getPopupMenuListeners(),PopupMenuListener[],Returns an array of all the PopupMenuListeners added to this JComboBox with addPopupMenuListener().
JComboBox,getPrototypeDisplayValue(),E,"Returns the ""prototypical display"" value - an Object used for the calculation of the display height and width."
JComboBox,getRenderer(),ListCellRenderer<? super E>,Returns the renderer used to display the selected item in the JComboBox field.
JComboBox,getSelectedIndex(),int,Returns the first item in the list that matches the given item.
JComboBox,getSelectedItem(),Object,Returns the current selected item.
JComboBox,getSelectedObjects(),Object[],Returns an array containing the selected item.
JComboBox,getUI(),ComboBoxUI,Returns the L&F object that renders this component.
JComboBox,getUIClassID(),String,Returns the name of the L&F class that renders this component.
JComboBox,hidePopup(),void,Causes the combo box to close its popup window.
JComboBox,"insertItemAt(E item, int index)",void,Inserts an item into the item list at a given index.
JComboBox,installAncestorListener(),protected void,NULL
JComboBox,intervalAdded(ListDataEvent e),void,This method is public as an implementation side effect.
JComboBox,intervalRemoved(ListDataEvent e),void,This method is public as an implementation side effect.
JComboBox,isEditable(),boolean,Returns true if the JComboBox is editable.
JComboBox,isLightWeightPopupEnabled(),boolean,Gets the value of the lightWeightPopupEnabled property.
JComboBox,isPopupVisible(),boolean,Determines the visibility of the popup.
JComboBox,paramString(),protected String,Returns a string representation of this JComboBox.
JComboBox,"processKeyBinding(KeyStroke ks, KeyEvent e, int condition, boolean pressed)",protected boolean,Invoked to process the key bindings for ks as the result of the KeyEvent e.
JComboBox,processKeyEvent(KeyEvent e),void,"Handles KeyEvents, looking for the Tab key."
JComboBox,removeActionListener(ActionListener l),void,Removes an ActionListener.
JComboBox,removeAllItems(),void,Removes all items from the item list.
JComboBox,removeItem(Object anObject),void,Removes an item from the item list.
JComboBox,removeItemAt(int anIndex),void,Removes the item at anIndex This method works only if the JComboBox uses a mutable data model.
JComboBox,removeItemListener(ItemListener aListener),void,Removes an ItemListener.
JComboBox,removePopupMenuListener(PopupMenuListener l),void,Removes a PopupMenuListener.
JComboBox,selectedItemChanged(),protected void,This protected method is implementation specific.
JComboBox,selectWithKeyChar(char keyChar),boolean,"Selects the list item that corresponds to the specified keyboard character and returns true, if there is an item corresponding to that character."
JComboBox,setAction(Action a),void,Sets the Action for the ActionEvent source.
JComboBox,setActionCommand(String aCommand),void,Sets the action command that should be included in the event sent to action listeners.
JComboBox,setEditable(boolean aFlag),void,Determines whether the JComboBox field is editable.
JComboBox,setEditor(ComboBoxEditor anEditor),void,Sets the editor used to paint and edit the selected item in the JComboBox field.
JComboBox,setEnabled(boolean b),void,Enables the combo box so that items can be selected.
JComboBox,setKeySelectionManager(JComboBox.KeySelectionManager aManager),void,Sets the object that translates a keyboard character into a list selection.
JComboBox,setLightWeightPopupEnabled(boolean aFlag),void,"Sets the lightWeightPopupEnabled property, which provides a hint as to whether or not a lightweight Component should be used to contain the JComboBox, versus a heavyweight Component such as a Panel or a Window."
JComboBox,setMaximumRowCount(int count),void,Sets the maximum number of rows the JComboBox displays.
JComboBox,setModel(ComboBoxModel<E> aModel),void,Sets the data model that the JComboBox uses to obtain the list of items.
JComboBox,setPopupVisible(boolean v),void,Sets the visibility of the popup.
JComboBox,setPrototypeDisplayValue(E prototypeDisplayValue),void,Sets the prototype display value used to calculate the size of the display for the UI portion.
JComboBox,setRenderer(ListCellRenderer<? super E> aRenderer),void,Sets the renderer that paints the list items and the item selected from the list in the JComboBox field.
JComboBox,setSelectedIndex(int anIndex),void,Selects the item at index anIndex.
JComboBox,setSelectedItem(Object anObject),void,Sets the selected item in the combo box display area to the object in the argument.
JComboBox,setUI(ComboBoxUI ui),void,Sets the L&F object that renders this component.
JComboBox,showPopup(),void,Causes the combo box to display its popup window.
JComboBox,updateUI(),void,Resets the UI property to a value from the current look and feel.
JComponent,addAncestorListener(AncestorListener listener),void,Registers listener so that it will receive AncestorEvents when it or any of its ancestors move or are made visible or invisible.
JComponent,addNotify(),void,Notifies this component that it now has a parent component.
JComponent,addVetoableChangeListener(VetoableChangeListener listener),void,Adds a VetoableChangeListener to the listener list.
JComponent,computeVisibleRect(Rectangle visibleRect),void,"Returns the Component's ""visible rect rectangle"" - the intersection of the visible rectangles for this component and all of its ancestors."
JComponent,"contains(int x, int y)",boolean,Gives the UI delegate an opportunity to define the precise shape of this component for the sake of mouse processing.
JComponent,createToolTip(),JToolTip,Returns the instance of JToolTip that should be used to display the tooltip.
JComponent,disable(),void,"Deprecated. As of JDK version 1.1, replaced by java.awt.Component.setEnabled(boolean)."
JComponent,enable(),void,"Deprecated. As of JDK version 1.1, replaced by java.awt.Component.setEnabled(boolean)."
JComponent,"firePropertyChange(String propertyName, boolean oldValue, boolean newValue)",void,Support for reporting bound property changes for boolean properties.
JComponent,"firePropertyChange(String propertyName, char oldValue, char newValue)",void,Reports a bound property change.
JComponent,"firePropertyChange(String propertyName, int oldValue, int newValue)",void,Support for reporting bound property changes for integer properties.
JComponent,"fireVetoableChange(String propertyName, Object oldValue, Object newValue)",protected void,Supports reporting constrained property changes.
JComponent,getActionForKeyStroke(KeyStroke aKeyStroke),ActionListener,Returns the object that will perform the action registered for a given keystroke.
JComponent,getActionMap(),ActionMap,Returns the ActionMap used to determine what Action to fire for particular KeyStroke binding.
JComponent,getAlignmentX(),float,Overrides Container.getAlignmentX to return the vertical alignment.
JComponent,getAlignmentY(),float,Overrides Container.getAlignmentY to return the horizontal alignment.
JComponent,getAncestorListeners(),AncestorListener[],Returns an array of all the ancestor listeners registered on this component.
JComponent,getAutoscrolls(),boolean,Gets the autoscrolls property.
JComponent,"getBaseline(int width, int height)",int,Returns the baseline.
JComponent,getBaselineResizeBehavior(),Component.BaselineResizeBehavior,Returns an enum indicating how the baseline of the component changes as the size changes.
JComponent,getBorder(),Border,Returns the border of this component or null if no border is currently set.
JComponent,getBounds(Rectangle rv),Rectangle,"Stores the bounds of this component into ""return value"" rv and returns rv."
JComponent,getClientProperty(Object key),Object,Returns the value of the property with the specified key.
JComponent,getComponentGraphics(Graphics g),protected Graphics,Returns the graphics object used to paint this component.
JComponent,getComponentPopupMenu(),JPopupMenu,Returns JPopupMenu that assigned for this component.
JComponent,getConditionForKeyStroke(KeyStroke aKeyStroke),int,Returns the condition that determines whether a registered action occurs in response to the specified keystroke.
JComponent,getDebugGraphicsOptions(),int,Returns the state of graphics debugging.
JComponent,getDefaultLocale(),static Locale,Returns the default locale used to initialize each JComponent's locale property upon creation.
JComponent,getFontMetrics(Font font),FontMetrics,Gets the FontMetrics for the specified Font.
JComponent,getGraphics(),Graphics,"Returns this component's graphics context, which lets you draw on a component."
JComponent,getHeight(),int,Returns the current height of this component.
JComponent,getInheritsPopupMenu(),boolean,Returns true if the JPopupMenu should be inherited from the parent.
JComponent,getInputMap(),InputMap,Returns the InputMap that is used when the component has focus.
JComponent,getInputMap(int condition),InputMap,Returns the InputMap that is used during condition.
JComponent,getInputVerifier(),InputVerifier,Returns the input verifier for this component.
JComponent,getInsets(),Insets,"If a border has been set on this component, returns the border's insets; otherwise calls super.getInsets."
JComponent,getInsets(Insets insets),Insets,Returns an Insets object containing this component's inset values.
JComponent,getListeners(Class<T> listenerType),<T extends EventListener>T[],Returns an array of all the objects currently registered as FooListeners upon this JComponent.
JComponent,getLocation(Point rv),Point,"Stores the x,y origin of this component into ""return value"" rv and returns rv."
JComponent,getMaximumSize(),Dimension,If the maximum size has been set to a non-null value just returns it.
JComponent,getMinimumSize(),Dimension,If the minimum size has been set to a non-null value just returns it.
JComponent,getNextFocusableComponent(),Component,"Deprecated. As of 1.4, replaced by FocusTraversalPolicy."
JComponent,getPopupLocation(MouseEvent event),Point,Returns the preferred location to display the popup menu in this component's coordinate system.
JComponent,getPreferredSize(),Dimension,If the preferredSize has been set to a non-null value just returns it.
JComponent,getRegisteredKeyStrokes(),KeyStroke[],Returns the KeyStrokes that will initiate registered actions.
JComponent,getRootPane(),JRootPane,Returns the JRootPane ancestor for this component.
JComponent,getSize(Dimension rv),Dimension,"Stores the width/height of this component into ""return value"" rv and returns rv."
JComponent,getToolTipLocation(MouseEvent event),Point,Returns the tooltip location in this component's coordinate system.
JComponent,getToolTipText(),String,Returns the tooltip string that has been set with setToolTipText.
JComponent,getToolTipText(MouseEvent event),String,Returns the string to be used as the tooltip for event.
JComponent,getTopLevelAncestor(),Container,"Returns the top-level ancestor of this component (either the containing Window or Applet), or null if this component has not been added to any container."
JComponent,getTransferHandler(),TransferHandler,Gets the transferHandler property.
JComponent,getUIClassID(),String,Returns the UIDefaults key used to look up the name of the swing.plaf.ComponentUI class that defines the look and feel for this component.
JComponent,getVerifyInputWhenFocusTarget(),boolean,Returns the value that indicates whether the input verifier for the current focus owner will be called before this component requests focus.
JComponent,getVetoableChangeListeners(),VetoableChangeListener[],Returns an array of all the vetoable change listeners registered on this component.
JComponent,getVisibleRect(),Rectangle,"Returns the Component's ""visible rectangle"" - the intersection of this component's visible rectangle, new Rectangle(0, 0, getWidth(), getHeight()), and all of its ancestors' visible rectangles."
JComponent,getWidth(),int,Returns the current width of this component.
JComponent,getX(),int,Returns the current x coordinate of the component's origin.
JComponent,getY(),int,Returns the current y coordinate of the component's origin.
JComponent,grabFocus(),void,"Requests that this Component get the input focus, and that this Component's top-level ancestor become the focused Window."
JComponent,hide(),void,Deprecated.
JComponent,isDoubleBuffered(),boolean,Returns whether this component should use a buffer to paint.
JComponent,isLightweightComponent(Component c),static boolean,"Returns true if this component is lightweight, that is, if it doesn't have a native window system peer."
JComponent,isManagingFocus(),boolean,"Deprecated. As of 1.4, replaced by Component.setFocusTraversalKeys(int, Set) and Container.setFocusCycleRoot(boolean)."
JComponent,isOpaque(),boolean,Returns true if this component is completely opaque.
JComponent,isOptimizedDrawingEnabled(),boolean,"Returns true if this component tiles its children -- that is, if it can guarantee that the children will not overlap."
JComponent,isPaintingForPrint(),boolean,Returns true if the current painting operation on this component is part of a print operation.
JComponent,isPaintingOrigin(),protected boolean,"Returns true if a paint triggered on a child component should cause painting to originate from this Component, or one of its ancestors."
JComponent,isPaintingTile(),boolean,Returns true if the component is currently painting a tile.
JComponent,isRequestFocusEnabled(),boolean,Returns true if this JComponent should get focus; otherwise returns false.
JComponent,isValidateRoot(),boolean,"If this method returns true, revalidate calls by descendants of this component will cause the entire tree beginning with this root to be validated."
JComponent,paint(Graphics g),void,Invoked by Swing to draw components.
JComponent,paintBorder(Graphics g),protected void,Paints the component's border.
JComponent,paintChildren(Graphics g),protected void,Paints this component's children.
JComponent,paintComponent(Graphics g),protected void,"Calls the UI delegate's paint method, if the UI delegate is non-null."
JComponent,"paintImmediately(int x, int y, int w, int h)",void,"Paints the specified region in this component and all of its descendants that overlap the region, immediately."
JComponent,paintImmediately(Rectangle r),void,Paints the specified region now.
JComponent,paramString(),protected String,Returns a string representation of this JComponent.
JComponent,print(Graphics g),void,Invoke this method to print the component to the specified Graphics.
JComponent,printAll(Graphics g),void,Invoke this method to print the component.
JComponent,printBorder(Graphics g),protected void,Prints the component's border.
JComponent,printChildren(Graphics g),protected void,Prints this component's children.
JComponent,printComponent(Graphics g),protected void,This is invoked during a printing operation.
JComponent,processComponentKeyEvent(KeyEvent e),protected void,Processes any key events that the component itself recognizes.
JComponent,"processKeyBinding(KeyStroke ks, KeyEvent e, int condition, boolean pressed)",protected boolean,Invoked to process the key bindings for ks as the result of the KeyEvent e.
JComponent,processKeyEvent(KeyEvent e),protected void,Overrides processKeyEvent to process events.
JComponent,processMouseEvent(MouseEvent e),protected void,"Processes mouse events occurring on this component by dispatching them to any registered MouseListener objects, refer to Component.processMouseEvent(MouseEvent) for a complete description of this method."
JComponent,processMouseMotionEvent(MouseEvent e),protected void,"Processes mouse motion events, such as MouseEvent.MOUSE_DRAGGED."
JComponent,"putClientProperty(Object key, Object value)",void,"Adds an arbitrary key/value ""client property"" to this component."
JComponent,"registerKeyboardAction(ActionListener anAction, KeyStroke aKeyStroke, int aCondition)",void,"This method is now obsolete, please use a combination of getActionMap() and getInputMap() for similar behavior."
JComponent,"registerKeyboardAction(ActionListener anAction, String aCommand, KeyStroke aKeyStroke, int aCondition)",void,"This method is now obsolete, please use a combination of getActionMap() and getInputMap() for similar behavior."
JComponent,removeAncestorListener(AncestorListener listener),void,Unregisters listener so that it will no longer receive AncestorEvents.
JComponent,removeNotify(),void,Notifies this component that it no longer has a parent component.
JComponent,removeVetoableChangeListener(VetoableChangeListener listener),void,Removes a VetoableChangeListener from the listener list.
JComponent,"repaint(long tm, int x, int y, int width, int height)",void,Adds the specified region to the dirty region list if the component is showing.
JComponent,repaint(Rectangle r),void,Adds the specified region to the dirty region list if the component is showing.
JComponent,requestDefaultFocus(),boolean,"Deprecated. As of 1.4, replaced by FocusTraversalPolicy.getDefaultComponent(Container).requestFocus()"
JComponent,requestFocus(),void,Requests that this Component gets the input focus.
JComponent,requestFocus(boolean temporary),boolean,Requests that this Component gets the input focus.
JComponent,requestFocusInWindow(),boolean,Requests that this Component gets the input focus.
JComponent,requestFocusInWindow(boolean temporary),protected boolean,Requests that this Component gets the input focus.
JComponent,resetKeyboardActions(),void,Unregisters all the bindings in the first tier InputMaps and ActionMap.
JComponent,"reshape(int x, int y, int w, int h)",void,"Deprecated. As of JDK 5, replaced by Component.setBounds(int, int, int, int). Moves and resizes this component."
JComponent,revalidate(),void,Supports deferred automatic layout.
JComponent,scrollRectToVisible(Rectangle aRect),void,Forwards the scrollRectToVisible() message to the JComponent's parent.
JComponent,setActionMap(ActionMap am),void,Sets the ActionMap to am.
JComponent,setAlignmentX(float alignmentX),void,Sets the the vertical alignment.
JComponent,setAlignmentY(float alignmentY),void,Sets the the horizontal alignment.
JComponent,setAutoscrolls(boolean autoscrolls),void,Sets the autoscrolls property.
JComponent,setBackground(Color bg),void,Sets the background color of this component.
JComponent,setBorder(Border border),void,Sets the border of this component.
JComponent,setComponentPopupMenu(JPopupMenu popup),void,Sets the JPopupMenu for this JComponent.
JComponent,setDebugGraphicsOptions(int debugOptions),void,Enables or disables diagnostic information about every graphics operation performed within the component or one of its children.
JComponent,setDefaultLocale(Locale l),static void,Sets the default locale used to initialize each JComponent's locale property upon creation.
JComponent,setDoubleBuffered(boolean aFlag),void,Sets whether this component should use a buffer to paint.
JComponent,setEnabled(boolean enabled),void,Sets whether or not this component is enabled.
JComponent,"setFocusTraversalKeys(int id, Set<? extends AWTKeyStroke> keystrokes)",void,Sets the focus traversal keys for a given traversal operation for this Component.
JComponent,setFont(Font font),void,Sets the font for this component.
JComponent,setForeground(Color fg),void,Sets the foreground color of this component.
JComponent,setInheritsPopupMenu(boolean value),void,Sets whether or not getComponentPopupMenu should delegate to the parent if this component does not have a JPopupMenu assigned to it.
JComponent,"setInputMap(int condition, InputMap map)",void,Sets the InputMap to use under the condition condition to map.
JComponent,setInputVerifier(InputVerifier inputVerifier),void,Sets the input verifier for this component.
JComponent,setMaximumSize(Dimension maximumSize),void,Sets the maximum size of this component to a constant value.
JComponent,setMinimumSize(Dimension minimumSize),void,Sets the minimum size of this component to a constant value.
JComponent,setNextFocusableComponent(Component aComponent),void,"Deprecated. As of 1.4, replaced by FocusTraversalPolicy"
JComponent,setOpaque(boolean isOpaque),void,If true the component paints every pixel within its bounds.
JComponent,setPreferredSize(Dimension preferredSize),void,Sets the preferred size of this component.
JComponent,setRequestFocusEnabled(boolean requestFocusEnabled),void,Provides a hint as to whether or not this JComponent should get focus.
JComponent,setToolTipText(String text),void,Registers the text to display in a tool tip.
JComponent,setTransferHandler(TransferHandler newHandler),void,"Sets the TransferHandler, which provides support for transfer of data into and out of this component via cut/copy/paste and drag and drop."
JComponent,setUI(ComponentUI newUI),protected void,Sets the look and feel delegate for this component.
JComponent,setVerifyInputWhenFocusTarget(boolean verifyInputWhenFocusTarget),void,Sets the value to indicate whether input verifier for the current focus owner will be called before this component requests focus.
JComponent,setVisible(boolean aFlag),void,Makes the component visible or invisible.
JComponent,unregisterKeyboardAction(KeyStroke aKeyStroke),void,This method is now obsolete.
JComponent,update(Graphics g),void,Calls paint.
JComponent,updateUI(),void,Resets the UI property to a value from the current look and feel.
JDesktopPane,"addImpl(Component comp, Object constraints, int index)",protected void,Adds the specified component to this container at the specified index.
JDesktopPane,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JDesktopPane.
JDesktopPane,getAllFrames(),JInternalFrame[],Returns all JInternalFrames currently displayed in the desktop.
JDesktopPane,getAllFramesInLayer(int layer),JInternalFrame[],Returns all JInternalFrames currently displayed in the specified layer of the desktop.
JDesktopPane,getDesktopManager(),DesktopManager,Returns the DesktopManger that handles desktop-specific UI actions.
JDesktopPane,getDragMode(),int,"Gets the current ""dragging style"" used by the desktop pane."
JDesktopPane,getSelectedFrame(),JInternalFrame,"Returns the currently active JInternalFrame in this JDesktopPane, or null if no JInternalFrame is currently active."
JDesktopPane,getUI(),DesktopPaneUI,Returns the L&F object that renders this component.
JDesktopPane,getUIClassID(),String,Returns the name of the L&F class that renders this component.
JDesktopPane,paramString(),protected String,Returns a string representation of this JDesktopPane.
JDesktopPane,remove(Component comp),void,Removes the specified component from this container.
JDesktopPane,remove(int index),void,Remove the indexed component from this pane.
JDesktopPane,removeAll(),void,Removes all the components from this container.
JDesktopPane,selectFrame(boolean forward),JInternalFrame,Selects the next JInternalFrame in this desktop pane.
JDesktopPane,"setComponentZOrder(Component comp, int index)",void,Moves the specified component to the specified z-order index in the container.
JDesktopPane,setDesktopManager(DesktopManager d),void,Sets the DesktopManger that will handle desktop-specific UI actions.
JDesktopPane,setDragMode(int dragMode),void,"Sets the ""dragging style"" used by the desktop pane."
JDesktopPane,setSelectedFrame(JInternalFrame f),void,Sets the currently active JInternalFrame in this JDesktopPane.
JDesktopPane,setUI(DesktopPaneUI ui),void,Sets the L&F object that renders this component.
JDesktopPane,updateUI(),void,Notification from the UIManager that the L&F has changed.
JDialog,"addImpl(Component comp, Object constraints, int index)",protected void,Adds the specified child Component.
JDialog,createRootPane(),protected JRootPane,Called by the constructor methods to create the default rootPane.
JDialog,dialogInit(),protected void,Called by the constructors to init the JDialog properly.
JDialog,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JDialog.
JDialog,getContentPane(),Container,Returns the contentPane object for this dialog.
JDialog,getDefaultCloseOperation(),int,"Returns the operation which occurs when the user initiates a ""close"" on this dialog."
JDialog,getGlassPane(),Component,Returns the glassPane object for this dialog.
JDialog,getGraphics(),Graphics,Creates a graphics context for this component.
JDialog,getJMenuBar(),JMenuBar,Returns the menubar set on this dialog.
JDialog,getLayeredPane(),JLayeredPane,Returns the layeredPane object for this dialog.
JDialog,getRootPane(),JRootPane,Returns the rootPane object for this dialog.
JDialog,getTransferHandler(),TransferHandler,Gets the transferHandler property.
JDialog,isDefaultLookAndFeelDecorated(),static boolean,Returns true if newly created JDialogs should have their Window decorations provided by the current look and feel.
JDialog,isRootPaneCheckingEnabled(),protected boolean,Returns whether calls to add and setLayout are forwarded to the contentPane.
JDialog,paramString(),protected String,Returns a string representation of this JDialog.
JDialog,processWindowEvent(WindowEvent e),protected void,Handles window events depending on the state of the defaultCloseOperation property.
JDialog,remove(Component comp),void,Removes the specified component from the container.
JDialog,"repaint(long time, int x, int y, int width, int height)",void,Repaints the specified rectangle of this component within time milliseconds.
JDialog,setContentPane(Container contentPane),void,Sets the contentPane property.
JDialog,setDefaultCloseOperation(int operation),void,"Sets the operation that will happen by default when the user initiates a ""close"" on this dialog."
JDialog,setDefaultLookAndFeelDecorated(boolean defaultLookAndFeelDecorated),static void,"Provides a hint as to whether or not newly created JDialogs should have their Window decorations (such as borders, widgets to close the window, title...) provided by the current look and feel."
JDialog,setGlassPane(Component glassPane),void,Sets the glassPane property.
JDialog,setJMenuBar(JMenuBar menu),void,Sets the menubar for this dialog.
JDialog,setLayeredPane(JLayeredPane layeredPane),void,Sets the layeredPane property.
JDialog,setLayout(LayoutManager manager),void,Sets the LayoutManager.
JDialog,setRootPane(JRootPane root),protected void,Sets the rootPane property.
JDialog,setRootPaneCheckingEnabled(boolean enabled),protected void,Sets whether calls to add and setLayout are forwarded to the contentPane.
JDialog,setTransferHandler(TransferHandler newHandler),void,"Sets the transferHandler property, which is a mechanism to support transfer of data into this component."
JDialog,update(Graphics g),void,Calls paint(g).
JEditorPane,addHyperlinkListener(HyperlinkListener listener),void,"Adds a hyperlink listener for notification of any changes, for example when a link is selected and entered."
JEditorPane,createDefaultEditorKit(),protected EditorKit,Creates the default editor kit (PlainEditorKit) for when the component is first created.
JEditorPane,createEditorKitForContentType(String type),static EditorKit,Creates a handler for the given type from the default registry of editor kits.
JEditorPane,fireHyperlinkUpdate(HyperlinkEvent e),void,Notifies all listeners that have registered interest for notification on this event type.
JEditorPane,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JEditorPane.
JEditorPane,getContentType(),String,Gets the type of content that this editor is currently set to deal with.
JEditorPane,getEditorKit(),EditorKit,Fetches the currently installed kit for handling content.
JEditorPane,getEditorKitClassNameForContentType(String type),static String,Returns the currently registered EditorKit class name for the type type.
JEditorPane,getEditorKitForContentType(String type),EditorKit,Fetches the editor kit to use for the given type of content.
JEditorPane,getHyperlinkListeners(),HyperlinkListener[],Returns an array of all the HyperLinkListeners added to this JEditorPane with addHyperlinkListener().
JEditorPane,getPage(),URL,Gets the current URL being displayed.
JEditorPane,getPreferredSize(),Dimension,Returns the preferred size for the JEditorPane.
JEditorPane,getScrollableTracksViewportHeight(),boolean,Returns true if a viewport should always force the height of this Scrollable to match the height of the viewport.
JEditorPane,getScrollableTracksViewportWidth(),boolean,Returns true if a viewport should always force the width of this Scrollable to match the width of the viewport.
JEditorPane,getStream(URL page),protected InputStream,"Fetches a stream for the given URL, which is about to be loaded by the setPage method."
JEditorPane,getText(),String,Returns the text contained in this TextComponent in terms of the content type of this editor.
JEditorPane,getUIClassID(),String,Gets the class ID for the UI.
JEditorPane,paramString(),protected String,Returns a string representation of this JEditorPane.
JEditorPane,"read(InputStream in, Object desc)",void,This method initializes from a stream.
JEditorPane,"registerEditorKitForContentType(String type, String classname)",static void,Establishes the default bindings of type to classname.
JEditorPane,"registerEditorKitForContentType(String type, String classname, ClassLoader loader)",static void,Establishes the default bindings of type to classname.
JEditorPane,removeHyperlinkListener(HyperlinkListener listener),void,Removes a hyperlink listener.
JEditorPane,replaceSelection(String content),void,Replaces the currently selected content with new content represented by the given string.
JEditorPane,scrollToReference(String reference),void,"Scrolls the view to the given reference location (that is, the value returned by the UL.getRef method for the URL being displayed)."
JEditorPane,setContentType(String type),void,Sets the type of content that this editor handles.
JEditorPane,setEditorKit(EditorKit kit),void,Sets the currently installed kit for handling content.
JEditorPane,"setEditorKitForContentType(String type, EditorKit k)",void,Directly sets the editor kit to use for the given type.
JEditorPane,setPage(String url),void,Sets the current URL being displayed.
JEditorPane,setPage(URL page),void,Sets the current URL being displayed.
JEditorPane,setText(String t),void,"Sets the text of this TextComponent to the specified content, which is expected to be in the format of the content type of this editor."
JFileChooser,accept(File f),boolean,Returns true if the file should be displayed.
JFileChooser,addActionListener(ActionListener l),void,Adds an ActionListener to the file chooser.
JFileChooser,addChoosableFileFilter(FileFilter filter),void,Adds a filter to the list of user choosable file filters.
JFileChooser,approveSelection(),void,"Called by the UI when the user hits the Approve button (labeled ""Open"" or ""Save"", by default)."
JFileChooser,cancelSelection(),void,Called by the UI when the user chooses the Cancel button.
JFileChooser,changeToParentDirectory(),void,Changes the directory to be set to the parent of the current directory.
JFileChooser,createDialog(Component parent),protected JDialog,Creates and returns a new JDialog wrapping this centered on the parent in the parent's frame.
JFileChooser,ensureFileIsVisible(File f),void,"Makes sure that the specified file is viewable, and not hidden."
JFileChooser,fireActionPerformed(String command),protected void,Notifies all listeners that have registered interest for notification on this event type.
JFileChooser,getAcceptAllFileFilter(),FileFilter,Returns the AcceptAll file filter.
JFileChooser,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JFileChooser.
JFileChooser,getAccessory(),JComponent,Returns the accessory component.
JFileChooser,getActionListeners(),ActionListener[],Returns an array of all the action listeners registered on this file chooser.
JFileChooser,getApproveButtonMnemonic(),int,Returns the approve button's mnemonic.
JFileChooser,getApproveButtonText(),String,Returns the text used in the ApproveButton in the FileChooserUI.
JFileChooser,getApproveButtonToolTipText(),String,Returns the tooltip text used in the ApproveButton.
JFileChooser,getChoosableFileFilters(),FileFilter[],Gets the list of user choosable file filters.
JFileChooser,getControlButtonsAreShown(),boolean,Returns the value of the controlButtonsAreShown property.
JFileChooser,getCurrentDirectory(),File,Returns the current directory.
JFileChooser,getDescription(File f),String,Returns the file description.
JFileChooser,getDialogTitle(),String,Gets the string that goes in the JFileChooser's titlebar.
JFileChooser,getDialogType(),int,Returns the type of this dialog.
JFileChooser,getDragEnabled(),boolean,Gets the value of the dragEnabled property.
JFileChooser,getFileFilter(),FileFilter,Returns the currently selected file filter.
JFileChooser,getFileSelectionMode(),int,Returns the current file-selection mode.
JFileChooser,getFileSystemView(),FileSystemView,Returns the file system view.
JFileChooser,getFileView(),FileView,Returns the current file view.
JFileChooser,getIcon(File f),Icon,"Returns the icon for this file or type of file, depending on the system."
JFileChooser,getName(File f),String,Returns the filename.
JFileChooser,getSelectedFile(),File,Returns the selected file.
JFileChooser,getSelectedFiles(),File[],Returns a list of selected files if the file chooser is set to allow multiple selection.
JFileChooser,getTypeDescription(File f),String,Returns the file type.
JFileChooser,getUI(),FileChooserUI,Gets the UI object which implements the L&F for this component.
JFileChooser,getUIClassID(),String,Returns a string that specifies the name of the L&F class that renders this component.
JFileChooser,isAcceptAllFileFilterUsed(),boolean,Returns whether the AcceptAll FileFilter is used.
JFileChooser,isDirectorySelectionEnabled(),boolean,Convenience call that determines if directories are selectable based on the current file selection mode.
JFileChooser,isFileHidingEnabled(),boolean,"Returns true if hidden files are not shown in the file chooser; otherwise, returns false."
JFileChooser,isFileSelectionEnabled(),boolean,Convenience call that determines if files are selectable based on the current file selection mode.
JFileChooser,isMultiSelectionEnabled(),boolean,Returns true if multiple files can be selected.
JFileChooser,isTraversable(File f),boolean,Returns true if the file (directory) can be visited.
JFileChooser,paramString(),protected String,Returns a string representation of this JFileChooser.
JFileChooser,removeActionListener(ActionListener l),void,Removes an ActionListener from the file chooser.
JFileChooser,removeChoosableFileFilter(FileFilter f),boolean,Removes a filter from the list of user choosable file filters.
JFileChooser,rescanCurrentDirectory(),void,Tells the UI to rescan its files list from the current directory.
JFileChooser,resetChoosableFileFilters(),void,Resets the choosable file filter list to its starting state.
JFileChooser,setAcceptAllFileFilterUsed(boolean b),void,Determines whether the AcceptAll FileFilter is used as an available choice in the choosable filter list.
JFileChooser,setAccessory(JComponent newAccessory),void,Sets the accessory component.
JFileChooser,setApproveButtonMnemonic(char mnemonic),void,Sets the approve button's mnemonic using a character.
JFileChooser,setApproveButtonMnemonic(int mnemonic),void,Sets the approve button's mnemonic using a numeric keycode.
JFileChooser,setApproveButtonText(String approveButtonText),void,Sets the text used in the ApproveButton in the FileChooserUI.
JFileChooser,setApproveButtonToolTipText(String toolTipText),void,Sets the tooltip text used in the ApproveButton.
JFileChooser,setControlButtonsAreShown(boolean b),void,Sets the property that indicates whether the approve and cancel buttons are shown in the file chooser.
JFileChooser,setCurrentDirectory(File dir),void,Sets the current directory.
JFileChooser,setDialogTitle(String dialogTitle),void,Sets the string that goes in the JFileChooser window's title bar.
JFileChooser,setDialogType(int dialogType),void,Sets the type of this dialog.
JFileChooser,setDragEnabled(boolean b),void,"Sets the dragEnabled property, which must be true to enable automatic drag handling (the first part of drag and drop) on this component."
JFileChooser,setFileFilter(FileFilter filter),void,Sets the current file filter.
JFileChooser,setFileHidingEnabled(boolean b),void,Sets file hiding on or off.
JFileChooser,setFileSelectionMode(int mode),void,"Sets the JFileChooser to allow the user to just select files, just select directories, or select both files and directories."
JFileChooser,setFileSystemView(FileSystemView fsv),void,"Sets the file system view that the JFileChooser uses for accessing and creating file system resources, such as finding the floppy drive and getting a list of root drives."
JFileChooser,setFileView(FileView fileView),void,"Sets the file view to used to retrieve UI information, such as the icon that represents a file or the type description of a file."
JFileChooser,setMultiSelectionEnabled(boolean b),void,Sets the file chooser to allow multiple file selections.
JFileChooser,setSelectedFile(File file),void,Sets the selected file.
JFileChooser,setSelectedFiles(File[] selectedFiles),void,Sets the list of selected files if the file chooser is set to allow multiple selection.
JFileChooser,setup(FileSystemView view),protected void,Performs common constructor initialization and setup.
JFileChooser,"showDialog(Component parent, String approveButtonText)",int,Pops a custom file chooser dialog with a custom approve button.
JFileChooser,showOpenDialog(Component parent),int,"Pops up an ""Open File"" file chooser dialog."
JFileChooser,showSaveDialog(Component parent),int,"Pops up a ""Save File"" file chooser dialog."
JFileChooser,updateUI(),void,Resets the UI property to a value from the current look and feel.
JFormattedTextField,commitEdit(),void,Forces the current value to be taken from the AbstractFormatter and set as the current value.
JFormattedTextField,getActions(),Action[],Fetches the command list for the editor.
JFormattedTextField,getFocusLostBehavior(),int,Returns the behavior when focus is lost.
JFormattedTextField,getFormatter(),JFormattedTextField.AbstractFormatter,Returns the AbstractFormatter that is used to format and parse the current value.
JFormattedTextField,getFormatterFactory(),JFormattedTextField.AbstractFormatterFactory,Returns the current AbstractFormatterFactory.
JFormattedTextField,getUIClassID(),String,Gets the class ID for a UI.
JFormattedTextField,getValue(),Object,Returns the last valid value.
JFormattedTextField,invalidEdit(),protected void,Invoked when the user inputs an invalid value.
JFormattedTextField,isEditValid(),boolean,Returns true if the current value being edited is valid.
JFormattedTextField,processFocusEvent(FocusEvent e),protected void,"Processes any focus events, such as FocusEvent.FOCUS_GAINED or FocusEvent.FOCUS_LOST."
JFormattedTextField,processInputMethodEvent(InputMethodEvent e),protected void,"Processes any input method events, such as InputMethodEvent.INPUT_METHOD_TEXT_CHANGED or InputMethodEvent.CARET_POSITION_CHANGED."
JFormattedTextField,setDocument(Document doc),void,Associates the editor with a text document.
JFormattedTextField,setFocusLostBehavior(int behavior),void,Sets the behavior when focus is lost.
JFormattedTextField,setFormatter(JFormattedTextField.AbstractFormatter format),protected void,Sets the current AbstractFormatter.
JFormattedTextField,setFormatterFactory(JFormattedTextField.AbstractFormatterFactory tf),void,Sets the AbstractFormatterFactory.
JFormattedTextField,setValue(Object value),void,Sets the value that will be formatted by an AbstractFormatter obtained from the current AbstractFormatterFactory.
JFormattedTextField.AbstractFormatter,clone(),protected Object,Clones the AbstractFormatter.
JFormattedTextField.AbstractFormatter,getActions(),protected Action[],Subclass and override if you wish to provide a custom set of Actions.
JFormattedTextField.AbstractFormatter,getDocumentFilter(),protected DocumentFilter,Subclass and override if you wish to provide a DocumentFilter to restrict what can be input.
JFormattedTextField.AbstractFormatter,getFormattedTextField(),protected JFormattedTextField,Returns the current JFormattedTextField the AbstractFormatter is installed on.
JFormattedTextField.AbstractFormatter,getNavigationFilter(),protected NavigationFilter,Subclass and override if you wish to provide a filter to restrict where the user can navigate to.
JFormattedTextField.AbstractFormatter,install(JFormattedTextField ftf),void,Installs the AbstractFormatter onto a particular JFormattedTextField.
JFormattedTextField.AbstractFormatter,invalidEdit(),protected void,This should be invoked when the user types an invalid character.
JFormattedTextField.AbstractFormatter,setEditValid(boolean valid),protected void,Invoke this to update the editValid property of the JFormattedTextField.
JFormattedTextField.AbstractFormatter,stringToValue(String text),abstract Object,Parses text returning an arbitrary Object.
JFormattedTextField.AbstractFormatter,uninstall(),void,Uninstalls any state the AbstractFormatter may have installed on the JFormattedTextField.
JFormattedTextField.AbstractFormatter,valueToString(Object value),abstract String,Returns the string value to display for value.
JFormattedTextField.AbstractFormatterFactory,getFormatter(JFormattedTextField tf),abstract JFormattedTextField.AbstractFormatter,Returns an AbstractFormatter that can handle formatting of the passed in JFormattedTextField.
JFrame,"addImpl(Component comp, Object constraints, int index)",protected void,Adds the specified child Component.
JFrame,createRootPane(),protected JRootPane,Called by the constructor methods to create the default rootPane.
JFrame,frameInit(),protected void,Called by the constructors to init the JFrame properly.
JFrame,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JFrame.
JFrame,getContentPane(),Container,Returns the contentPane object for this frame.
JFrame,getDefaultCloseOperation(),int,"Returns the operation that occurs when the user initiates a ""close"" on this frame."
JFrame,getGlassPane(),Component,Returns the glassPane object for this frame.
JFrame,getGraphics(),Graphics,Creates a graphics context for this component.
JFrame,getJMenuBar(),JMenuBar,Returns the menubar set on this frame.
JFrame,getLayeredPane(),JLayeredPane,Returns the layeredPane object for this frame.
JFrame,getRootPane(),JRootPane,Returns the rootPane object for this frame.
JFrame,getTransferHandler(),TransferHandler,Gets the transferHandler property.
JFrame,isDefaultLookAndFeelDecorated(),static boolean,Returns true if newly created JFrames should have their Window decorations provided by the current look and feel.
JFrame,isRootPaneCheckingEnabled(),protected boolean,Returns whether calls to add and setLayout are forwarded to the contentPane.
JFrame,paramString(),protected String,Returns a string representation of this JFrame.
JFrame,processWindowEvent(WindowEvent e),protected void,Processes window events occurring on this component.
JFrame,remove(Component comp),void,Removes the specified component from the container.
JFrame,"repaint(long time, int x, int y, int width, int height)",void,Repaints the specified rectangle of this component within time milliseconds.
JFrame,setContentPane(Container contentPane),void,Sets the contentPane property.
JFrame,setDefaultCloseOperation(int operation),void,"Sets the operation that will happen by default when the user initiates a ""close"" on this frame."
JFrame,setDefaultLookAndFeelDecorated(boolean defaultLookAndFeelDecorated),static void,"Provides a hint as to whether or not newly created JFrames should have their Window decorations (such as borders, widgets to close the window, title...) provided by the current look and feel."
JFrame,setGlassPane(Component glassPane),void,Sets the glassPane property.
JFrame,setIconImage(Image image),void,Sets the image to be displayed as the icon for this window.
JFrame,setJMenuBar(JMenuBar menubar),void,Sets the menubar for this frame.
JFrame,setLayeredPane(JLayeredPane layeredPane),void,Sets the layeredPane property.
JFrame,setLayout(LayoutManager manager),void,Sets the LayoutManager.
JFrame,setRootPane(JRootPane root),protected void,Sets the rootPane property.
JFrame,setRootPaneCheckingEnabled(boolean enabled),protected void,Sets whether calls to add and setLayout are forwarded to the contentPane.
JFrame,setTransferHandler(TransferHandler newHandler),void,"Sets the transferHandler property, which is a mechanism to support transfer of data into this component."
JFrame,update(Graphics g),void,Just calls paint(g).
JInternalFrame,"addImpl(Component comp, Object constraints, int index)",protected void,Adds the specified child Component.
JInternalFrame,addInternalFrameListener(InternalFrameListener l),void,Adds the specified listener to receive internal frame events from this internal frame.
JInternalFrame,createRootPane(),protected JRootPane,Called by the constructor to set up the JRootPane.
JInternalFrame,dispose(),void,"Makes this internal frame invisible, unselected, and closed."
JInternalFrame,doDefaultCloseAction(),void,Fires an INTERNAL_FRAME_CLOSING event and then performs the action specified by the internal frame's default close operation.
JInternalFrame,fireInternalFrameEvent(int id),protected void,Fires an internal frame event.
JInternalFrame,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JInternalFrame.
JInternalFrame,getContentPane(),Container,Returns the content pane for this internal frame.
JInternalFrame,getDefaultCloseOperation(),int,"Returns the default operation that occurs when the user initiates a ""close"" on this internal frame."
JInternalFrame,getDesktopIcon(),JInternalFrame.JDesktopIcon,Returns the JDesktopIcon used when this JInternalFrame is iconified.
JInternalFrame,getDesktopPane(),JDesktopPane,Convenience method that searches the ancestor hierarchy for a JDesktop instance.
JInternalFrame,getFocusCycleRootAncestor(),Container,Always returns null because JInternalFrames must always be roots of a focus traversal cycle.
JInternalFrame,getFocusOwner(),Component,"If this JInternalFrame is active, returns the child that has focus."
JInternalFrame,getFrameIcon(),Icon,Returns the image displayed in the title bar of this internal frame (usually in the top-left corner).
JInternalFrame,getGlassPane(),Component,Returns the glass pane for this internal frame.
JInternalFrame,getInternalFrameListeners(),InternalFrameListener[],Returns an array of all the InternalFrameListeners added to this JInternalFrame with addInternalFrameListener.
JInternalFrame,getJMenuBar(),JMenuBar,"Returns the current JMenuBar for this JInternalFrame, or null if no menu bar has been set."
JInternalFrame,getLastCursor(),Cursor,Returns the last Cursor that was set by the setCursor method that is not a resizable Cursor.
JInternalFrame,getLayer(),int,Convenience method for getting the layer attribute of this component.
JInternalFrame,getLayeredPane(),JLayeredPane,Returns the layered pane for this internal frame.
JInternalFrame,getMenuBar(),JMenuBar,"Deprecated. As of Swing version 1.0.3, replaced by getJMenuBar()."
JInternalFrame,getMostRecentFocusOwner(),Component,Returns the child component of this JInternalFrame that will receive the focus when this JInternalFrame is selected.
JInternalFrame,getNormalBounds(),Rectangle,"If the JInternalFrame is not in maximized state, returns getBounds(); otherwise, returns the bounds that the JInternalFrame would be restored to."
JInternalFrame,getRootPane(),JRootPane,Returns the rootPane object for this internal frame.
JInternalFrame,getTitle(),String,Returns the title of the JInternalFrame.
JInternalFrame,getUI(),InternalFrameUI,Returns the look-and-feel object that renders this component.
JInternalFrame,getUIClassID(),String,Returns the name of the look-and-feel class that renders this component.
JInternalFrame,getWarningString(),String,Gets the warning string that is displayed with this internal frame.
JInternalFrame,hide(),void,NULL
JInternalFrame,isClosable(),boolean,Returns whether this JInternalFrame can be closed by some user action.
JInternalFrame,isClosed(),boolean,Returns whether this JInternalFrame is currently closed.
JInternalFrame,isFocusCycleRoot(),boolean,Always returns true because all JInternalFrames must be roots of a focus traversal cycle.
JInternalFrame,isIcon(),boolean,Returns whether the JInternalFrame is currently iconified.
JInternalFrame,isIconifiable(),boolean,"Gets the iconable property, which by default is false."
JInternalFrame,isMaximizable(),boolean,Gets the value of the maximizable property.
JInternalFrame,isMaximum(),boolean,Returns whether the JInternalFrame is currently maximized.
JInternalFrame,isResizable(),boolean,Returns whether the JInternalFrame can be resized by some user action.
JInternalFrame,isRootPaneCheckingEnabled(),protected boolean,Returns whether calls to add and setLayout are forwarded to the contentPane.
JInternalFrame,isSelected(),boolean,"Returns whether the JInternalFrame is the currently ""selected"" or active frame."
JInternalFrame,moveToBack(),void,Convenience method that moves this component to position -1 if its parent is a JLayeredPane.
JInternalFrame,moveToFront(),void,Convenience method that moves this component to position 0 if its parent is a JLayeredPane.
JInternalFrame,pack(),void,Causes subcomponents of this JInternalFrame to be laid out at their preferred size.
JInternalFrame,paintComponent(Graphics g),protected void,Overridden to allow optimized painting when the internal frame is being dragged.
JInternalFrame,paramString(),protected String,Returns a string representation of this JInternalFrame.
JInternalFrame,remove(Component comp),void,Removes the specified component from the container.
JInternalFrame,removeInternalFrameListener(InternalFrameListener l),void,Removes the specified internal frame listener so that it no longer receives internal frame events from this internal frame.
JInternalFrame,"reshape(int x, int y, int width, int height)",void,Moves and resizes this component.
JInternalFrame,restoreSubcomponentFocus(),void,Requests the internal frame to restore focus to the last subcomponent that had focus.
JInternalFrame,setClosable(boolean b),void,Sets whether this JInternalFrame can be closed by some user action.
JInternalFrame,setClosed(boolean b),void,Closes this internal frame if the argument is true.
JInternalFrame,setContentPane(Container c),void,Sets this JInternalFrame's contentPane property.
JInternalFrame,setCursor(Cursor cursor),void,Sets the cursor image to the specified cursor.
JInternalFrame,setDefaultCloseOperation(int operation),void,"Sets the operation that will happen by default when the user initiates a ""close"" on this internal frame."
JInternalFrame,setDesktopIcon(JInternalFrame.JDesktopIcon d),void,Sets the JDesktopIcon associated with this JInternalFrame.
JInternalFrame,setFocusCycleRoot(boolean focusCycleRoot),void,Does nothing because JInternalFrames must always be roots of a focus traversal cycle.
JInternalFrame,setFrameIcon(Icon icon),void,Sets an image to be displayed in the titlebar of this internal frame (usually in the top-left corner).
JInternalFrame,setGlassPane(Component glass),void,Sets this JInternalFrame's glassPane property.
JInternalFrame,setIcon(boolean b),void,"Iconifies or de-iconifies this internal frame, if the look and feel supports iconification."
JInternalFrame,setIconifiable(boolean b),void,"Sets the iconable property, which must be true for the user to be able to make the JInternalFrame an icon."
JInternalFrame,setJMenuBar(JMenuBar m),void,Sets the menuBar property for this JInternalFrame.
JInternalFrame,setLayer(int layer),void,Convenience method for setting the layer attribute of this component.
JInternalFrame,setLayer(Integer layer),void,Convenience method for setting the layer attribute of this component.
JInternalFrame,setLayeredPane(JLayeredPane layered),void,Sets this JInternalFrame's layeredPane property.
JInternalFrame,setLayout(LayoutManager manager),void,"Ensures that, by default, the layout of this component cannot be set."
JInternalFrame,setMaximizable(boolean b),void,"Sets the maximizable property, which determines whether the JInternalFrame can be maximized by some user action."
JInternalFrame,setMaximum(boolean b),void,Maximizes and restores this internal frame.
JInternalFrame,setMenuBar(JMenuBar m),void,Deprecated. As of Swing version 1.0.3 replaced by setJMenuBar(JMenuBar m).
JInternalFrame,setNormalBounds(Rectangle r),void,"Sets the normal bounds for this internal frame, the bounds that this internal frame would be restored to from its maximized state."
JInternalFrame,setResizable(boolean b),void,Sets whether the JInternalFrame can be resized by some user action.
JInternalFrame,setRootPane(JRootPane root),protected void,Sets the rootPane property for this JInternalFrame.
JInternalFrame,setRootPaneCheckingEnabled(boolean enabled),protected void,Sets whether calls to add and setLayout are forwarded to the contentPane.
JInternalFrame,setSelected(boolean selected),void,Selects or deselects the internal frame if it's showing.
JInternalFrame,setTitle(String title),void,Sets the JInternalFrame title.
JInternalFrame,setUI(InternalFrameUI ui),void,Sets the UI delegate for this JInternalFrame.
JInternalFrame,show(),void,"If the internal frame is not visible, brings the internal frame to the front, makes it visible, and attempts to select it."
JInternalFrame,toBack(),void,Sends this internal frame to the back.
JInternalFrame,toFront(),void,Brings this internal frame to the front.
JInternalFrame,updateUI(),void,Notification from the UIManager that the look and feel has changed.
JInternalFrame.JDesktopIcon,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JDesktopIcon.
JInternalFrame.JDesktopIcon,getDesktopPane(),JDesktopPane,Convenience method to ask the icon for the Desktop object it belongs to.
JInternalFrame.JDesktopIcon,getInternalFrame(),JInternalFrame,Returns the JInternalFrame that this DesktopIcon is associated with.
JInternalFrame.JDesktopIcon,getUI(),DesktopIconUI,Returns the look-and-feel object that renders this component.
JInternalFrame.JDesktopIcon,getUIClassID(),String,Returns the name of the look-and-feel class that renders this component.
JInternalFrame.JDesktopIcon,setInternalFrame(JInternalFrame f),void,Sets the JInternalFrame with which this DesktopIcon is associated.
JInternalFrame.JDesktopIcon,setUI(DesktopIconUI ui),void,Sets the look-and-feel object that renders this component.
JInternalFrame.JDesktopIcon,updateUI(),void,Notification from the UIManager that the look and feel has changed.
JLabel,"checkHorizontalKey(int key, String message)",protected int,Verify that key is a legal value for the horizontalAlignment properties.
JLabel,"checkVerticalKey(int key, String message)",protected int,Verify that key is a legal value for the verticalAlignment or verticalTextPosition properties.
JLabel,getAccessibleContext(),AccessibleContext,Get the AccessibleContext of this object
JLabel,getDisabledIcon(),Icon,Returns the icon used by the label when it's disabled.
JLabel,getDisplayedMnemonic(),int,Return the keycode that indicates a mnemonic key.
JLabel,getDisplayedMnemonicIndex(),int,"Returns the character, as an index, that the look and feel should provide decoration for as representing the mnemonic character."
JLabel,getHorizontalAlignment(),int,Returns the alignment of the label's contents along the X axis.
JLabel,getHorizontalTextPosition(),int,"Returns the horizontal position of the label's text, relative to its image."
JLabel,getIcon(),Icon,"Returns the graphic image (glyph, icon) that the label displays."
JLabel,getIconTextGap(),int,Returns the amount of space between the text and the icon displayed in this label.
JLabel,getLabelFor(),Component,Get the component this is labelling.
JLabel,getText(),String,Returns the text string that the label displays.
JLabel,getUI(),LabelUI,Returns the L&F object that renders this component.
JLabel,getUIClassID(),String,Returns a string that specifies the name of the l&f class that renders this component.
JLabel,getVerticalAlignment(),int,Returns the alignment of the label's contents along the Y axis.
JLabel,getVerticalTextPosition(),int,"Returns the vertical position of the label's text, relative to its image."
JLabel,"imageUpdate(Image img, int infoflags, int x, int y, int w, int h)",boolean,This is overridden to return false if the current Icon's Image is not equal to the passed in Image img.
JLabel,paramString(),protected String,Returns a string representation of this JLabel.
JLabel,setDisabledIcon(Icon disabledIcon),void,"Set the icon to be displayed if this JLabel is ""disabled"" (JLabel.setEnabled(false))."
JLabel,setDisplayedMnemonic(char aChar),void,Specifies the displayedMnemonic as a char value.
JLabel,setDisplayedMnemonic(int key),void,Specify a keycode that indicates a mnemonic key.
JLabel,setDisplayedMnemonicIndex(int index),void,Provides a hint to the look and feel as to which character in the text should be decorated to represent the mnemonic.
JLabel,setHorizontalAlignment(int alignment),void,Sets the alignment of the label's contents along the X axis.
JLabel,setHorizontalTextPosition(int textPosition),void,"Sets the horizontal position of the label's text, relative to its image."
JLabel,setIcon(Icon icon),void,Defines the icon this component will display.
JLabel,setIconTextGap(int iconTextGap),void,"If both the icon and text properties are set, this property defines the space between them."
JLabel,setLabelFor(Component c),void,Set the component this is labelling.
JLabel,setText(String text),void,Defines the single line of text this component will display.
JLabel,setUI(LabelUI ui),void,Sets the L&F object that renders this component.
JLabel,setVerticalAlignment(int alignment),void,Sets the alignment of the label's contents along the Y axis.
JLabel,setVerticalTextPosition(int textPosition),void,"Sets the vertical position of the label's text, relative to its image."
JLabel,updateUI(),void,Resets the UI property to a value from the current look and feel.
JLayer,"addImpl(Component comp, Object constraints, int index)",protected void,This method is not supported by JLayer and always throws UnsupportedOperationException
JLayer,addNotify(),void,Notifies this component that it now has a parent component.
JLayer,createGlassPane(),JPanel,Called by the constructor methods to create a default glassPane.
JLayer,doLayout(),void,"Delegates its functionality to the LayerUI.doLayout(JLayer) method, if LayerUI is set."
JLayer,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JLayer.
JLayer,getGlassPane(),JPanel,Returns the JLayer's glassPane component or null.
JLayer,getLayerEventMask(),long,Returns the bitmap of event mask to receive by this JLayer and its LayerUI.
JLayer,getPreferredScrollableViewportSize(),Dimension,Returns the preferred size of the viewport for a view component.
JLayer,"getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction)",int,"Returns a scroll increment, which is required for components that display logical rows or columns in order to completely expose one block of rows or columns, depending on the value of orientation."
JLayer,getScrollableTracksViewportHeight(),boolean,"Returns false to indicate that the height of the viewport does not determine the height of the layer, unless the preferred height of the layer is smaller than the height of the viewport."
JLayer,getScrollableTracksViewportWidth(),boolean,"Returns false to indicate that the width of the viewport does not determine the width of the layer, unless the preferred width of the layer is smaller than the width of the viewport."
JLayer,"getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction)",int,"Returns a scroll increment, which is required for components that display logical rows or columns in order to completely expose one new row or column, depending on the value of orientation."
JLayer,getUI(),LayerUI<? super V>,Returns the LayerUI for this JLayer.
JLayer,getView(),V,Returns the JLayer's view component or null.
JLayer,isOptimizedDrawingEnabled(),boolean,The JLayer overrides the default implementation of this method (in JComponent) to return false.
JLayer,isPaintingOrigin(),protected boolean,"Always returns true to cause painting to originate from JLayer, or one of its ancestors."
JLayer,paint(Graphics g),void,Delegates all painting to the LayerUI object.
JLayer,paintComponent(Graphics g),protected void,"This method is empty, because all painting is done by paint(Graphics) and ComponentUI.update(Graphics, JComponent) methods"
JLayer,"paintImmediately(int x, int y, int w, int h)",void,"Delegates its functionality to the LayerUI.paintImmediately(int, int, int, int, JLayer) method, if LayerUI is set."
JLayer,propertyChange(PropertyChangeEvent evt),void,This method gets called when a bound property is changed.
JLayer,remove(Component comp),void,Removes the specified component from this container.
JLayer,removeAll(),void,Removes all the components from this container.
JLayer,removeNotify(),void,Notifies this component that it no longer has a parent component.
JLayer,setBorder(Border border),void,"A non-null border, or non-zero insets, isn't supported, to prevent the geometry of this component from becoming complex enough to inhibit subclassing of LayerUI class."
JLayer,setGlassPane(JPanel glassPane),void,"Sets the JLayer's glassPane component, which can be null."
JLayer,setLayerEventMask(long layerEventMask),void,"Enables the events from JLayer and all its descendants defined by the specified event mask parameter to be delivered to the LayerUI.eventDispatched(AWTEvent, JLayer) method."
JLayer,setLayout(LayoutManager mgr),void,Sets the layout manager for this container.
JLayer,setUI(LayerUI<? super V> ui),void,Sets the LayerUI which will perform painting and receive input events for this JLayer.
JLayer,setView(V view),void,"Sets the JLayer's view component, which can be null."
JLayer,updateUI(),void,"Delegates its functionality to the LayerUI.updateUI(JLayer) method, if LayerUI is set."
JLayeredPane,"addImpl(Component comp, Object constraints, int index)",protected void,Adds the specified component to this container at the specified index.
JLayeredPane,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JLayeredPane.
JLayeredPane,getComponentCountInLayer(int layer),int,Returns the number of children currently in the specified layer.
JLayeredPane,getComponentsInLayer(int layer),Component[],Returns an array of the components in the specified layer.
JLayeredPane,getComponentToLayer(),"protected Hashtable<Component,Integer>",Returns the hashtable that maps components to layers.
JLayeredPane,getIndexOf(Component c),int,Returns the index of the specified Component.
JLayeredPane,getLayer(Component c),int,Returns the layer attribute for the specified Component.
JLayeredPane,getLayer(JComponent c),static int,"Gets the layer property for a JComponent, it does not cause any side effects like setLayer()."
JLayeredPane,getLayeredPaneAbove(Component c),static JLayeredPane,Convenience method that returns the first JLayeredPane which contains the specified component.
JLayeredPane,getObjectForLayer(int layer),protected Integer,Returns the Integer object associated with a specified layer.
JLayeredPane,getPosition(Component c),int,Get the relative position of the component within its layer.
JLayeredPane,highestLayer(),int,Returns the highest layer value from all current children.
JLayeredPane,"insertIndexForLayer(int layer, int position)",protected int,Primitive method that determines the proper location to insert a new child based on layer and position requests.
JLayeredPane,isOptimizedDrawingEnabled(),boolean,"Returns false if components in the pane can overlap, which makes optimized drawing impossible."
JLayeredPane,lowestLayer(),int,Returns the lowest layer value from all current children.
JLayeredPane,moveToBack(Component c),void,Moves the component to the bottom of the components in its current layer (position -1).
JLayeredPane,moveToFront(Component c),void,Moves the component to the top of the components in its current layer (position 0).
JLayeredPane,paint(Graphics g),void,Paints this JLayeredPane within the specified graphics context.
JLayeredPane,paramString(),protected String,Returns a string representation of this JLayeredPane.
JLayeredPane,"putLayer(JComponent c, int layer)",static void,Sets the layer property on a JComponent.
JLayeredPane,remove(int index),void,Remove the indexed component from this pane.
JLayeredPane,removeAll(),void,Removes all the components from this container.
JLayeredPane,"setLayer(Component c, int layer)",void,"Sets the layer attribute on the specified component, making it the bottommost component in that layer."
JLayeredPane,"setLayer(Component c, int layer, int position)",void,Sets the layer attribute for the specified component and also sets its position within that layer.
JLayeredPane,"setPosition(Component c, int position)",void,"Moves the component to position within its current layer, where 0 is the topmost position within the layer and -1 is the bottommost position."
JList,addListSelectionListener(ListSelectionListener listener),void,"Adds a listener to the list, to be notified each time a change to the selection occurs; the preferred way of listening for selection state changes."
JList,"addSelectionInterval(int anchor, int lead)",void,Sets the selection to be the union of the specified interval with current selection.
JList,clearSelection(),void,"Clears the selection; after calling this method, isSelectionEmpty will return true."
JList,createSelectionModel(),protected ListSelectionModel,Returns an instance of DefaultListSelectionModel; called during construction to initialize the list's selection model property.
JList,ensureIndexIsVisible(int index),void,Scrolls the list within an enclosing viewport to make the specified cell completely visible.
JList,"fireSelectionValueChanged(int firstIndex, int lastIndex, boolean isAdjusting)",protected void,Notifies ListSelectionListeners added directly to the list of selection changes made to the selection model.
JList,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JList.
JList,getAnchorSelectionIndex(),int,Returns the anchor selection index.
JList,"getCellBounds(int index0, int index1)",Rectangle,"Returns the bounding rectangle, in the list's coordinate system, for the range of cells specified by the two indices."
JList,getCellRenderer(),ListCellRenderer<? super E>,Returns the object responsible for painting list items.
JList,getDragEnabled(),boolean,Returns whether or not automatic drag handling is enabled.
JList,getDropLocation(),JList.DropLocation,"Returns the location that this component should visually indicate as the drop location during a DnD operation over the component, or null if no location is to currently be shown."
JList,getDropMode(),DropMode,Returns the drop mode for this component.
JList,getFirstVisibleIndex(),int,Returns the smallest list index that is currently visible.
JList,getFixedCellHeight(),int,Returns the value of the fixedCellHeight property.
JList,getFixedCellWidth(),int,Returns the value of the fixedCellWidth property.
JList,getLastVisibleIndex(),int,Returns the largest list index that is currently visible.
JList,getLayoutOrientation(),int,"Returns the layout orientation property for the list: VERTICAL if the layout is a single column of cells, VERTICAL_WRAP if the layout is ""newspaper style"" with the content flowing vertically then horizontally, or HORIZONTAL_WRAP if the layout is ""newspaper style"" with the content flowing horizontally then vertically."
JList,getLeadSelectionIndex(),int,Returns the lead selection index.
JList,getListSelectionListeners(),ListSelectionListener[],Returns an array of all the ListSelectionListeners added to this JList by way of addListSelectionListener.
JList,getMaxSelectionIndex(),int,"Returns the largest selected cell index, or -1 if the selection is empty."
JList,getMinSelectionIndex(),int,"Returns the smallest selected cell index, or -1 if the selection is empty."
JList,getModel(),ListModel<E>,Returns the data model that holds the list of items displayed by the JList component.
JList,"getNextMatch(String prefix, int startIndex, Position.Bias bias)",int,Returns the next list element whose toString value starts with the given prefix.
JList,getPreferredScrollableViewportSize(),Dimension,Computes the size of viewport needed to display visibleRowCount rows.
JList,getPrototypeCellValue(),E,"Returns the ""prototypical"" cell value -- a value used to calculate a fixed width and height for cells."
JList,"getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction)",int,Returns the distance to scroll to expose the next or previous block.
JList,getScrollableTracksViewportHeight(),boolean,"Returns true if this JList is displayed in a JViewport and the viewport is taller than the list's preferred height, or if the layout orientation is VERTICAL_WRAP and visibleRowCount <= 0; otherwise returns false."
JList,getScrollableTracksViewportWidth(),boolean,"Returns true if this JList is displayed in a JViewport and the viewport is wider than the list's preferred width, or if the layout orientation is HORIZONTAL_WRAP and visibleRowCount <= 0; otherwise returns false."
JList,"getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction)",int,Returns the distance to scroll to expose the next or previous row (for vertical scrolling) or column (for horizontal scrolling).
JList,getSelectedIndex(),int,Returns the smallest selected cell index; the selection when only a single item is selected in the list.
JList,getSelectedIndices(),int[],"Returns an array of all of the selected indices, in increasing order."
JList,getSelectedValue(),E,Returns the value for the smallest selected cell index; the selected value when only a single item is selected in the list.
JList,getSelectedValues(),Object[],"Deprecated. As of JDK 1.7, replaced by getSelectedValuesList()"
JList,getSelectedValuesList(),List<E>,"Returns a list of all the selected items, in increasing order based on their indices in the list."
JList,getSelectionBackground(),Color,Returns the color used to draw the background of selected items.
JList,getSelectionForeground(),Color,Returns the color used to draw the foreground of selected items.
JList,getSelectionMode(),int,Returns the current selection mode for the list.
JList,getSelectionModel(),ListSelectionModel,Returns the current selection model.
JList,getToolTipText(MouseEvent event),String,Returns the tooltip text to be used for the given event.
JList,getUI(),ListUI,"Returns the ListUI, the look and feel object that renders this component."
JList,getUIClassID(),String,"Returns ""ListUI"", the UIDefaults key used to look up the name of the javax.swing.plaf.ListUI class that defines the look and feel for this component."
JList,getValueIsAdjusting(),boolean,Returns the value of the selection model's isAdjusting property.
JList,getVisibleRowCount(),int,Returns the value of the visibleRowCount property.
JList,indexToLocation(int index),Point,Returns the origin of the specified item in the list's coordinate system.
JList,isSelectedIndex(int index),boolean,"Returns true if the specified index is selected, else false."
JList,isSelectionEmpty(),boolean,"Returns true if nothing is selected, else false."
JList,locationToIndex(Point location),int,Returns the cell index closest to the given location in the list's coordinate system.
JList,paramString(),protected String,Returns a String representation of this JList.
JList,removeListSelectionListener(ListSelectionListener listener),void,Removes a selection listener from the list.
JList,"removeSelectionInterval(int index0, int index1)",void,Sets the selection to be the set difference of the specified interval and the current selection.
JList,setCellRenderer(ListCellRenderer<? super E> cellRenderer),void,Sets the delegate that is used to paint each cell in the list.
JList,setDragEnabled(boolean b),void,Turns on or off automatic drag handling.
JList,setDropMode(DropMode dropMode),void,Sets the drop mode for this component.
JList,setFixedCellHeight(int height),void,Sets a fixed value to be used for the height of every cell in the list.
JList,setFixedCellWidth(int width),void,Sets a fixed value to be used for the width of every cell in the list.
JList,setLayoutOrientation(int layoutOrientation),void,Defines the way list cells are layed out.
JList,setListData(E[] listData),void,"Constructs a read-only ListModel from an array of items, and calls setModel with this model."
JList,setListData(Vector<? extends E> listData),void,Constructs a read-only ListModel from a Vector and calls setModel with this model.
JList,setModel(ListModel<E> model),void,"Sets the model that represents the contents or ""value"" of the list, notifies property change listeners, and then clears the list's selection."
JList,setPrototypeCellValue(E prototypeCellValue),void,"Sets the prototypeCellValue property, and then (if the new value is non-null), computes the fixedCellWidth and fixedCellHeight properties by requesting the cell renderer component for the given value (and index 0) from the cell renderer, and using that component's preferred size."
JList,setSelectedIndex(int index),void,Selects a single cell.
JList,setSelectedIndices(int[] indices),void,Changes the selection to be the set of indices specified by the given array.
JList,"setSelectedValue(Object anObject, boolean shouldScroll)",void,Selects the specified object from the list.
JList,setSelectionBackground(Color selectionBackground),void,"Sets the color used to draw the background of selected items, which cell renderers can use fill selected cells."
JList,setSelectionForeground(Color selectionForeground),void,"Sets the color used to draw the foreground of selected items, which cell renderers can use to render text and graphics."
JList,"setSelectionInterval(int anchor, int lead)",void,Selects the specified interval.
JList,setSelectionMode(int selectionMode),void,Sets the selection mode for the list.
JList,setSelectionModel(ListSelectionModel selectionModel),void,Sets the selectionModel for the list to a non-null ListSelectionModel implementation.
JList,setUI(ListUI ui),void,"Sets the ListUI, the look and feel object that renders this component."
JList,setValueIsAdjusting(boolean b),void,Sets the selection model's valueIsAdjusting property.
JList,setVisibleRowCount(int visibleRowCount),void,"Sets the visibleRowCount property, which has different meanings depending on the layout orientation: For a VERTICAL layout orientation, this sets the preferred number of rows to display without requiring scrolling; for other orientations, it affects the wrapping of cells."
JList,updateUI(),void,Resets the ListUI property by setting it to the value provided by the current look and feel.
JList.DropLocation,getIndex(),int,Returns the index where dropped data should be placed in the list.
JList.DropLocation,isInsert(),boolean,Returns whether or not this location represents an insert location.
JList.DropLocation,toString(),String,Returns a string representation of this drop location.
JMenu,add(Action a),JMenuItem,Creates a new menu item attached to the specified Action object and appends it to the end of this menu.
JMenu,add(Component c),Component,Appends a component to the end of this menu.
JMenu,"add(Component c, int index)",Component,Adds the specified component to this container at the given position.
JMenu,add(JMenuItem menuItem),JMenuItem,Appends a menu item to the end of this menu.
JMenu,add(String s),JMenuItem,Creates a new menu item with the specified text and appends it to the end of this menu.
JMenu,addMenuListener(MenuListener l),void,Adds a listener for menu events.
JMenu,addSeparator(),void,Appends a new separator to the end of the menu.
JMenu,applyComponentOrientation(ComponentOrientation o),void,Sets the ComponentOrientation property of this menu and all components contained within it.
JMenu,createActionChangeListener(JMenuItem b),protected PropertyChangeListener,Returns a properly configured PropertyChangeListener which updates the control as changes to the Action occur.
JMenu,createActionComponent(Action a),protected JMenuItem,Factory method which creates the JMenuItem for Actions added to the JMenu.
JMenu,createWinListener(JPopupMenu p),protected JMenu.WinListener,Creates a window-closing listener for the popup.
JMenu,doClick(int pressTime),void,"Programmatically performs a ""click""."
JMenu,fireMenuCanceled(),protected void,Notifies all listeners that have registered interest for notification on this event type.
JMenu,fireMenuDeselected(),protected void,Notifies all listeners that have registered interest for notification on this event type.
JMenu,fireMenuSelected(),protected void,Notifies all listeners that have registered interest for notification on this event type.
JMenu,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JMenu.
JMenu,getComponent(),Component,Returns the java.awt.Component used to paint this MenuElement.
JMenu,getDelay(),int,"Returns the suggested delay, in milliseconds, before submenus are popped up or down."
JMenu,getItem(int pos),JMenuItem,Returns the JMenuItem at the specified position.
JMenu,getItemCount(),int,"Returns the number of items on the menu, including separators."
JMenu,getMenuComponent(int n),Component,Returns the component at position n.
JMenu,getMenuComponentCount(),int,Returns the number of components on the menu.
JMenu,getMenuComponents(),Component[],Returns an array of Components of the menu's subcomponents.
JMenu,getMenuListeners(),MenuListener[],Returns an array of all the MenuListeners added to this JMenu with addMenuListener().
JMenu,getPopupMenu(),JPopupMenu,Returns the popupmenu associated with this menu.
JMenu,getPopupMenuOrigin(),protected Point,Computes the origin for the JMenu's popup menu.
JMenu,getSubElements(),MenuElement[],Returns an array of MenuElements containing the submenu for this menu component.
JMenu,getUIClassID(),String,Returns the name of the L&F class that renders this component.
JMenu,"insert(Action a, int pos)",JMenuItem,Inserts a new menu item attached to the specified Action object at a given position.
JMenu,"insert(JMenuItem mi, int pos)",JMenuItem,Inserts the specified JMenuitem at a given position.
JMenu,"insert(String s, int pos)",void,Inserts a new menu item with the specified text at a given position.
JMenu,insertSeparator(int index),void,Inserts a separator at the specified position.
JMenu,isMenuComponent(Component c),boolean,Returns true if the specified component exists in the submenu hierarchy.
JMenu,isPopupMenuVisible(),boolean,Returns true if the menu's popup window is visible.
JMenu,isSelected(),boolean,Returns true if the menu is currently selected (highlighted).
JMenu,isTearOff(),boolean,Returns true if the menu can be torn off.
JMenu,isTopLevelMenu(),boolean,"Returns true if the menu is a 'top-level menu', that is, if it is the direct child of a menubar."
JMenu,menuSelectionChanged(boolean isIncluded),void,Messaged when the menubar selection changes to activate or deactivate this menu.
JMenu,paramString(),protected String,Returns a string representation of this JMenu.
JMenu,processKeyEvent(KeyEvent evt),protected void,Processes key stroke events such as mnemonics and accelerators.
JMenu,remove(Component c),void,Removes the component c from this menu.
JMenu,remove(int pos),void,Removes the menu item at the specified index from this menu.
JMenu,remove(JMenuItem item),void,Removes the specified menu item from this menu.
JMenu,removeAll(),void,Removes all menu items from this menu.
JMenu,removeMenuListener(MenuListener l),void,Removes a listener for menu events.
JMenu,setAccelerator(KeyStroke keyStroke),void,setAccelerator is not defined for JMenu.
JMenu,setComponentOrientation(ComponentOrientation o),void,Sets the language-sensitive orientation that is to be used to order the elements or text within this component.
JMenu,setDelay(int d),void,Sets the suggested delay before the menu's PopupMenu is popped up or down.
JMenu,"setMenuLocation(int x, int y)",void,Sets the location of the popup component.
JMenu,setModel(ButtonModel newModel),void,"Sets the data model for the ""menu button"" -- the label that the user clicks to open or close the menu."
JMenu,setPopupMenuVisible(boolean b),void,Sets the visibility of the menu's popup.
JMenu,setSelected(boolean b),void,Sets the selection status of the menu.
JMenu,updateUI(),void,Resets the UI property with a value from the current look and feel.
JMenuBar,add(JMenu c),JMenu,Appends the specified menu to the end of the menu bar.
JMenuBar,addNotify(),void,Overrides JComponent.addNotify to register this menu bar with the current keyboard manager.
JMenuBar,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JMenuBar.
JMenuBar,getComponent(),Component,Implemented to be a MenuElement.
JMenuBar,getComponentAtIndex(int i),Component,Deprecated. replaced by getComponent(int i)
JMenuBar,getComponentIndex(Component c),int,Returns the index of the specified component.
JMenuBar,getHelpMenu(),JMenu,Gets the help menu for the menu bar.
JMenuBar,getMargin(),Insets,Returns the margin between the menubar's border and its menus.
JMenuBar,getMenu(int index),JMenu,Returns the menu at the specified position in the menu bar.
JMenuBar,getMenuCount(),int,Returns the number of items in the menu bar.
JMenuBar,getSelectionModel(),SingleSelectionModel,Returns the model object that handles single selections.
JMenuBar,getSubElements(),MenuElement[],Implemented to be a MenuElement -- returns the menus in this menu bar.
JMenuBar,getUI(),MenuBarUI,Returns the menubar's current UI.
JMenuBar,getUIClassID(),String,Returns the name of the L&F class that renders this component.
JMenuBar,isBorderPainted(),boolean,Returns true if the menu bars border should be painted.
JMenuBar,isSelected(),boolean,Returns true if the menu bar currently has a component selected.
JMenuBar,menuSelectionChanged(boolean isIncluded),void,Implemented to be a MenuElement -- does nothing.
JMenuBar,paintBorder(Graphics g),protected void,Paints the menubar's border if BorderPainted property is true.
JMenuBar,paramString(),protected String,Returns a string representation of this JMenuBar.
JMenuBar,"processKeyBinding(KeyStroke ks, KeyEvent e, int condition, boolean pressed)",protected boolean,Subclassed to check all the child menus.
JMenuBar,"processKeyEvent(KeyEvent e, MenuElement[] path, MenuSelectionManager manager)",void,Implemented to be a MenuElement -- does nothing.
JMenuBar,"processMouseEvent(MouseEvent event, MenuElement[] path, MenuSelectionManager manager)",void,Implemented to be a MenuElement -- does nothing.
JMenuBar,removeNotify(),void,Overrides JComponent.removeNotify to unregister this menu bar with the current keyboard manager.
JMenuBar,setBorderPainted(boolean b),void,Sets whether the border should be painted.
JMenuBar,setHelpMenu(JMenu menu),void,"Sets the help menu that appears when the user selects the ""help"" option in the menu bar."
JMenuBar,setMargin(Insets m),void,Sets the margin between the menubar's border and its menus.
JMenuBar,setSelected(Component sel),void,"Sets the currently selected component, producing a a change to the selection model."
JMenuBar,setSelectionModel(SingleSelectionModel model),void,Sets the model object to handle single selections.
JMenuBar,setUI(MenuBarUI ui),void,Sets the L&F object that renders this component.
JMenuBar,updateUI(),void,Resets the UI property with a value from the current look and feel.
JMenuItem,"actionPropertyChanged(Action action, String propertyName)",protected void,Updates the button's state in response to property changes in the associated action.
JMenuItem,addMenuDragMouseListener(MenuDragMouseListener l),void,Adds a MenuDragMouseListener to the menu item.
JMenuItem,addMenuKeyListener(MenuKeyListener l),void,Adds a MenuKeyListener to the menu item.
JMenuItem,configurePropertiesFromAction(Action a),protected void,Sets the properties on this button to match those in the specified Action.
JMenuItem,fireMenuDragMouseDragged(MenuDragMouseEvent event),protected void,Notifies all listeners that have registered interest for notification on this event type.
JMenuItem,fireMenuDragMouseEntered(MenuDragMouseEvent event),protected void,Notifies all listeners that have registered interest for notification on this event type.
JMenuItem,fireMenuDragMouseExited(MenuDragMouseEvent event),protected void,Notifies all listeners that have registered interest for notification on this event type.
JMenuItem,fireMenuDragMouseReleased(MenuDragMouseEvent event),protected void,Notifies all listeners that have registered interest for notification on this event type.
JMenuItem,fireMenuKeyPressed(MenuKeyEvent event),protected void,Notifies all listeners that have registered interest for notification on this event type.
JMenuItem,fireMenuKeyReleased(MenuKeyEvent event),protected void,Notifies all listeners that have registered interest for notification on this event type.
JMenuItem,fireMenuKeyTyped(MenuKeyEvent event),protected void,Notifies all listeners that have registered interest for notification on this event type.
JMenuItem,getAccelerator(),KeyStroke,Returns the KeyStroke which serves as an accelerator for the menu item.
JMenuItem,getAccessibleContext(),AccessibleContext,Returns the AccessibleContext associated with this JMenuItem.
JMenuItem,getComponent(),Component,Returns the java.awt.Component used to paint this object.
JMenuItem,getMenuDragMouseListeners(),MenuDragMouseListener[],Returns an array of all the MenuDragMouseListeners added to this JMenuItem with addMenuDragMouseListener().
JMenuItem,getMenuKeyListeners(),MenuKeyListener[],Returns an array of all the MenuKeyListeners added to this JMenuItem with addMenuKeyListener().
JMenuItem,getSubElements(),MenuElement[],This method returns an array containing the sub-menu components for this menu component.
JMenuItem,getUIClassID(),String,Returns the suffix used to construct the name of the L&F class used to render this component.
JMenuItem,"init(String text, Icon icon)",protected void,Initializes the menu item with the specified text and icon.
JMenuItem,isArmed(),boolean,"Returns whether the menu item is ""armed""."
JMenuItem,menuSelectionChanged(boolean isIncluded),void,Called by the MenuSelectionManager when the MenuElement is selected or unselected.
JMenuItem,paramString(),protected String,Returns a string representation of this JMenuItem.
JMenuItem,"processKeyEvent(KeyEvent e, MenuElement[] path, MenuSelectionManager manager)",void,"Processes a key event forwarded from the MenuSelectionManager and changes the menu selection, if necessary, by using MenuSelectionManager's API."
JMenuItem,processMenuDragMouseEvent(MenuDragMouseEvent e),void,Handles mouse drag in a menu.
JMenuItem,processMenuKeyEvent(MenuKeyEvent e),void,Handles a keystroke in a menu.
JMenuItem,"processMouseEvent(MouseEvent e, MenuElement[] path, MenuSelectionManager manager)",void,"Processes a mouse event forwarded from the MenuSelectionManager and changes the menu selection, if necessary, by using the MenuSelectionManager's API."
JMenuItem,removeMenuDragMouseListener(MenuDragMouseListener l),void,Removes a MenuDragMouseListener from the menu item.
JMenuItem,removeMenuKeyListener(MenuKeyListener l),void,Removes a MenuKeyListener from the menu item.
JMenuItem,setAccelerator(KeyStroke keyStroke),void,Sets the key combination which invokes the menu item's action listeners without navigating the menu hierarchy.
JMenuItem,setArmed(boolean b),void,"Identifies the menu item as ""armed""."
JMenuItem,setEnabled(boolean b),void,Enables or disables the menu item.
JMenuItem,setModel(ButtonModel newModel),void,Sets the model that this button represents.
JMenuItem,setUI(MenuItemUI ui),void,Sets the look and feel object that renders this component.
JMenuItem,updateUI(),void,Resets the UI property with a value from the current look and feel.
JOptionPane,"createDialog(Component parentComponent, String title)",JDialog,Creates and returns a new JDialog wrapping this centered on the parentComponent in the parentComponent's frame.
JOptionPane,createDialog(String title),JDialog,Creates and returns a new parentless JDialog with the specified title.
JOptionPane,"createInternalFrame(Component parentComponent, String title)",JInternalFrame,Creates and returns an instance of JInternalFrame.
JOptionPane,getAccessibleContext(),AccessibleContext,Returns the AccessibleContext associated with this JOptionPane.
JOptionPane,getDesktopPaneForComponent(Component parentComponent),static JDesktopPane,Returns the specified component's desktop pane.
JOptionPane,getFrameForComponent(Component parentComponent),static Frame,Returns the specified component's Frame.
JOptionPane,getIcon(),Icon,Returns the icon this pane displays.
JOptionPane,getInitialSelectionValue(),Object,Returns the input value that is displayed as initially selected to the user.
JOptionPane,getInitialValue(),Object,Returns the initial value.
JOptionPane,getInputValue(),Object,"Returns the value the user has input, if wantsInput is true."
JOptionPane,getMaxCharactersPerLineCount(),int,Returns the maximum number of characters to place on a line in a message.
JOptionPane,getMessage(),Object,Returns the message-object this pane displays.
JOptionPane,getMessageType(),int,Returns the message type.
JOptionPane,getOptions(),Object[],Returns the choices the user can make.
JOptionPane,getOptionType(),int,Returns the type of options that are displayed.
JOptionPane,getRootFrame(),static Frame,Returns the Frame to use for the class methods in which a frame is not provided.
JOptionPane,getSelectionValues(),Object[],Returns the input selection values.
JOptionPane,getUI(),OptionPaneUI,Returns the UI object which implements the L&F for this component.
JOptionPane,getUIClassID(),String,Returns the name of the UI class that implements the L&F for this component.
JOptionPane,getValue(),Object,Returns the value the user has selected.
JOptionPane,getWantsInput(),boolean,Returns the value of the wantsInput property.
JOptionPane,paramString(),protected String,Returns a string representation of this JOptionPane.
JOptionPane,selectInitialValue(),void,"Requests that the initial value be selected, which will set focus to the initial value."
JOptionPane,setIcon(Icon newIcon),void,Sets the icon to display.
JOptionPane,setInitialSelectionValue(Object newValue),void,Sets the input value that is initially displayed as selected to the user.
JOptionPane,setInitialValue(Object newInitialValue),void,Sets the initial value that is to be enabled -- the Component that has the focus when the pane is initially displayed.
JOptionPane,setInputValue(Object newValue),void,Sets the input value that was selected or input by the user.
JOptionPane,setMessage(Object newMessage),void,Sets the option pane's message-object.
JOptionPane,setMessageType(int newType),void,Sets the option pane's message type.
JOptionPane,setOptions(Object[] newOptions),void,Sets the options this pane displays.
JOptionPane,setOptionType(int newType),void,Sets the options to display.
JOptionPane,setRootFrame(Frame newRootFrame),static void,Sets the frame to use for class methods in which a frame is not provided.
JOptionPane,setSelectionValues(Object[] newValues),void,Sets the input selection values for a pane that provides the user with a list of items to choose from.
JOptionPane,setUI(OptionPaneUI ui),void,Sets the UI object which implements the L&F for this component.
JOptionPane,setValue(Object newValue),void,Sets the value the user has chosen.
JOptionPane,setWantsInput(boolean newValue),void,Sets the wantsInput property.
JOptionPane,"showConfirmDialog(Component parentComponent, Object message)",static int,"Brings up a dialog with the options Yes, No and Cancel; with the title, Select an Option."
JOptionPane,"showConfirmDialog(Component parentComponent, Object message, String title, int optionType)",static int,Brings up a dialog where the number of choices is determined by the optionType parameter.
JOptionPane,"showConfirmDialog(Component parentComponent, Object message, String title, int optionType, int messageType)",static int,"Brings up a dialog where the number of choices is determined by the optionType parameter, where the messageType parameter determines the icon to display."
JOptionPane,"showConfirmDialog(Component parentComponent, Object message, String title, int optionType, int messageType, Icon icon)",static int,"Brings up a dialog with a specified icon, where the number of choices is determined by the optionType parameter."
JOptionPane,"showInputDialog(Component parentComponent, Object message)",static String,Shows a question-message dialog requesting input from the user parented to parentComponent.
JOptionPane,"showInputDialog(Component parentComponent, Object message, Object initialSelectionValue)",static String,Shows a question-message dialog requesting input from the user and parented to parentComponent.
JOptionPane,"showInputDialog(Component parentComponent, Object message, String title, int messageType)",static String,Shows a dialog requesting input from the user parented to parentComponent with the dialog having the title title and message type messageType.
JOptionPane,"showInputDialog(Component parentComponent, Object message, String title, int messageType, Icon icon, Object[] selectionValues, Object initialSelectionValue)",static Object,"Prompts the user for input in a blocking dialog where the initial selection, possible selections, and all other options can be specified."
JOptionPane,showInputDialog(Object message),static String,Shows a question-message dialog requesting input from the user.
JOptionPane,"showInputDialog(Object message, Object initialSelectionValue)",static String,"Shows a question-message dialog requesting input from the user, with the input value initialized to initialSelectionValue."
JOptionPane,"showInternalConfirmDialog(Component parentComponent, Object message)",static int,"Brings up an internal dialog panel with the options Yes, No and Cancel; with the title, Select an Option."
JOptionPane,"showInternalConfirmDialog(Component parentComponent, Object message, String title, int optionType)",static int,Brings up a internal dialog panel where the number of choices is determined by the optionType parameter.
JOptionPane,"showInternalConfirmDialog(Component parentComponent, Object message, String title, int optionType, int messageType)",static int,"Brings up an internal dialog panel where the number of choices is determined by the optionType parameter, where the messageType parameter determines the icon to display."
JOptionPane,"showInternalConfirmDialog(Component parentComponent, Object message, String title, int optionType, int messageType, Icon icon)",static int,"Brings up an internal dialog panel with a specified icon, where the number of choices is determined by the optionType parameter."
JOptionPane,"showInternalInputDialog(Component parentComponent, Object message)",static String,Shows an internal question-message dialog requesting input from the user parented to parentComponent.
JOptionPane,"showInternalInputDialog(Component parentComponent, Object message, String title, int messageType)",static String,Shows an internal dialog requesting input from the user parented to parentComponent with the dialog having the title title and message type messageType.
JOptionPane,"showInternalInputDialog(Component parentComponent, Object message, String title, int messageType, Icon icon, Object[] selectionValues, Object initialSelectionValue)",static Object,"Prompts the user for input in a blocking internal dialog where the initial selection, possible selections, and all other options can be specified."
JOptionPane,"showInternalMessageDialog(Component parentComponent, Object message)",static void,Brings up an internal confirmation dialog panel.
JOptionPane,"showInternalMessageDialog(Component parentComponent, Object message, String title, int messageType)",static void,Brings up an internal dialog panel that displays a message using a default icon determined by the messageType parameter.
JOptionPane,"showInternalMessageDialog(Component parentComponent, Object message, String title, int messageType, Icon icon)",static void,"Brings up an internal dialog panel displaying a message, specifying all parameters."
JOptionPane,"showInternalOptionDialog(Component parentComponent, Object message, String title, int optionType, int messageType, Icon icon, Object[] options, Object initialValue)",static int,"Brings up an internal dialog panel with a specified icon, where the initial choice is determined by the initialValue parameter and the number of choices is determined by the optionType parameter."
JOptionPane,"showMessageDialog(Component parentComponent, Object message)",static void,"Brings up an information-message dialog titled ""Message""."
JOptionPane,"showMessageDialog(Component parentComponent, Object message, String title, int messageType)",static void,Brings up a dialog that displays a message using a default icon determined by the messageType parameter.
JOptionPane,"showMessageDialog(Component parentComponent, Object message, String title, int messageType, Icon icon)",static void,"Brings up a dialog displaying a message, specifying all parameters."
JOptionPane,"showOptionDialog(Component parentComponent, Object message, String title, int optionType, int messageType, Icon icon, Object[] options, Object initialValue)",static int,"Brings up a dialog with a specified icon, where the initial choice is determined by the initialValue parameter and the number of choices is determined by the optionType parameter."
JOptionPane,updateUI(),void,Notification from the UIManager that the L&F has changed.
JPanel,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JPanel.
JPanel,getUI(),PanelUI,Returns the look and feel (L&amp;F) object that renders this component.
JPanel,getUIClassID(),String,Returns a string that specifies the name of the L&F class that renders this component.
JPanel,paramString(),protected String,Returns a string representation of this JPanel.
JPanel,setUI(PanelUI ui),void,Sets the look and feel (L&F) object that renders this component.
JPanel,updateUI(),void,Resets the UI property with a value from the current look and feel.
JPasswordField,copy(),void,"Invokes provideErrorFeedback on the current look and feel, which typically initiates an error beep."
JPasswordField,cut(),void,"Invokes provideErrorFeedback on the current look and feel, which typically initiates an error beep."
JPasswordField,echoCharIsSet(),boolean,Returns true if this JPasswordField has a character set for echoing.
JPasswordField,getAccessibleContext(),AccessibleContext,Returns the AccessibleContext associated with this JPasswordField.
JPasswordField,getEchoChar(),char,Returns the character to be used for echoing.
JPasswordField,getPassword(),char[],Returns the text contained in this TextComponent.
JPasswordField,getText(),String,"Deprecated. As of Java 2 platform v1.2, replaced by getPassword."
JPasswordField,"getText(int offs, int len)",String,"Deprecated. As of Java 2 platform v1.2, replaced by getPassword."
JPasswordField,getUIClassID(),String,Returns the name of the L&F class that renders this component.
JPasswordField,paramString(),protected String,Returns a string representation of this JPasswordField.
JPasswordField,setEchoChar(char c),void,Sets the echo character for this JPasswordField.
JPasswordField,setText(String t),void,Sets the text of this TextComponent to the specified text.
JPasswordField,updateUI(),void,Reloads the pluggable UI.
JPopupMenu,add(Action a),JMenuItem,Appends a new menu item to the end of the menu which dispatches the specified Action object.
JPopupMenu,add(JMenuItem menuItem),JMenuItem,Appends the specified menu item to the end of this menu.
JPopupMenu,add(String s),JMenuItem,Creates a new menu item with the specified text and appends it to the end of this menu.
JPopupMenu,addMenuKeyListener(MenuKeyListener l),void,Adds a MenuKeyListener to the popup menu.
JPopupMenu,addPopupMenuListener(PopupMenuListener l),void,Adds a PopupMenu listener.
JPopupMenu,addSeparator(),void,Appends a new separator at the end of the menu.
JPopupMenu,createActionChangeListener(JMenuItem b),protected PropertyChangeListener,Returns a properly configured PropertyChangeListener which updates the control as changes to the Action occur.
JPopupMenu,createActionComponent(Action a),protected JMenuItem,Factory method which creates the JMenuItem for Actions added to the JPopupMenu.
JPopupMenu,firePopupMenuCanceled(),protected void,Notifies PopupMenuListeners that this popup menu is cancelled.
JPopupMenu,firePopupMenuWillBecomeInvisible(),protected void,Notifies PopupMenuListeners that this popup menu will become invisible.
JPopupMenu,firePopupMenuWillBecomeVisible(),protected void,Notifies PopupMenuListeners that this popup menu will become visible.
JPopupMenu,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JPopupMenu.
JPopupMenu,getComponent(),Component,Returns this JPopupMenu component.
JPopupMenu,getComponentAtIndex(int i),Component,Deprecated. replaced by Container.getComponent(int)
JPopupMenu,getComponentIndex(Component c),int,Returns the index of the specified component.
JPopupMenu,getDefaultLightWeightPopupEnabled(),static boolean,"Gets the defaultLightWeightPopupEnabled property, which by default is true."
JPopupMenu,getInvoker(),Component,Returns the component which is the 'invoker' of this popup menu.
JPopupMenu,getLabel(),String,Returns the popup menu's label
JPopupMenu,getMargin(),Insets,"Returns the margin, in pixels, between the popup menu's border and its containers."
JPopupMenu,getMenuKeyListeners(),MenuKeyListener[],Returns an array of all the MenuKeyListeners added to this JPopupMenu with addMenuKeyListener().
JPopupMenu,getPopupMenuListeners(),PopupMenuListener[],Returns an array of all the PopupMenuListeners added to this JMenuItem with addPopupMenuListener().
JPopupMenu,getSelectionModel(),SingleSelectionModel,Returns the model object that handles single selections.
JPopupMenu,getSubElements(),MenuElement[],Returns an array of MenuElements containing the submenu for this menu component.
JPopupMenu,getUI(),PopupMenuUI,Returns the look and feel (L&F) object that renders this component.
JPopupMenu,getUIClassID(),String,Returns the name of the L&F class that renders this component.
JPopupMenu,"insert(Action a, int index)",void,Inserts a menu item for the specified Action object at a given position.
JPopupMenu,"insert(Component component, int index)",void,Inserts the specified component into the menu at a given position.
JPopupMenu,isBorderPainted(),boolean,Checks whether the border should be painted.
JPopupMenu,isLightWeightPopupEnabled(),boolean,Gets the lightWeightPopupEnabled property.
JPopupMenu,isPopupTrigger(MouseEvent e),boolean,Returns true if the MouseEvent is considered a popup trigger by the JPopupMenu's currently installed UI.
JPopupMenu,isVisible(),boolean,Returns true if the popup menu is visible (currently being displayed).
JPopupMenu,menuSelectionChanged(boolean isIncluded),void,Messaged when the menubar selection changes to activate or deactivate this menu.
JPopupMenu,pack(),void,Lays out the container so that it uses the minimum space needed to display its contents.
JPopupMenu,paintBorder(Graphics g),protected void,Paints the popup menu's border if the borderPainted property is true.
JPopupMenu,paramString(),protected String,Returns a string representation of this JPopupMenu.
JPopupMenu,processFocusEvent(FocusEvent evt),protected void,Processes focus events occurring on this component by dispatching them to any registered FocusListener objects.
JPopupMenu,processKeyEvent(KeyEvent evt),protected void,Processes key stroke events such as mnemonics and accelerators.
JPopupMenu,"processKeyEvent(KeyEvent e, MenuElement[] path, MenuSelectionManager manager)",void,"Processes a key event forwarded from the MenuSelectionManager and changes the menu selection, if necessary, by using MenuSelectionManager's API."
JPopupMenu,"processMouseEvent(MouseEvent event, MenuElement[] path, MenuSelectionManager manager)",void,"This method is required to conform to the MenuElement interface, but it not implemented."
JPopupMenu,remove(int pos),void,Removes the component at the specified index from this popup menu.
JPopupMenu,removeMenuKeyListener(MenuKeyListener l),void,Removes a MenuKeyListener from the popup menu.
JPopupMenu,removePopupMenuListener(PopupMenuListener l),void,Removes a PopupMenu listener.
JPopupMenu,setBorderPainted(boolean b),void,Sets whether the border should be painted.
JPopupMenu,setDefaultLightWeightPopupEnabled(boolean aFlag),static void,Sets the default value of the lightWeightPopupEnabled property.
JPopupMenu,setInvoker(Component invoker),void,Sets the invoker of this popup menu -- the component in which the popup menu menu is to be displayed.
JPopupMenu,setLabel(String label),void,Sets the popup menu's label.
JPopupMenu,setLightWeightPopupEnabled(boolean aFlag),void,"Sets the value of the lightWeightPopupEnabled property, which by default is true."
JPopupMenu,"setLocation(int x, int y)",void,"Sets the location of the upper left corner of the popup menu using x, y coordinates."
JPopupMenu,setPopupSize(Dimension d),void,Sets the size of the Popup window using a Dimension object.
JPopupMenu,"setPopupSize(int width, int height)",void,Sets the size of the Popup window to the specified width and height.
JPopupMenu,setSelected(Component sel),void,"Sets the currently selected component, This will result in a change to the selection model."
JPopupMenu,setSelectionModel(SingleSelectionModel model),void,Sets the model object to handle single selections.
JPopupMenu,setUI(PopupMenuUI ui),void,Sets the L&F object that renders this component.
JPopupMenu,setVisible(boolean b),void,Sets the visibility of the popup menu.
JPopupMenu,"show(Component invoker, int x, int y)",void,"Displays the popup menu at the position x,y in the coordinate space of the component invoker."
JPopupMenu,updateUI(),void,Resets the UI property to a value from the current look and feel.
JPopupMenu.Separator,getUIClassID(),String,Returns the name of the L&F class that renders this component.
JProgressBar,addChangeListener(ChangeListener l),void,Adds the specified ChangeListener to the progress bar.
JProgressBar,createChangeListener(),protected ChangeListener,Subclasses that want to handle change events from the model differently can override this to return an instance of a custom ChangeListener implementation.
JProgressBar,fireStateChanged(),protected void,"Send a ChangeEvent, whose source is this JProgressBar, to all ChangeListeners that have registered interest in ChangeEvents."
JProgressBar,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JProgressBar.
JProgressBar,getChangeListeners(),ChangeListener[],Returns an array of all the ChangeListeners added to this progress bar with addChangeListener.
JProgressBar,getMaximum(),int,Returns the progress bar's maximum value from the BoundedRangeModel.
JProgressBar,getMinimum(),int,Returns the progress bar's minimum value from the BoundedRangeModel.
JProgressBar,getModel(),BoundedRangeModel,Returns the data model used by this progress bar.
JProgressBar,getOrientation(),int,"Returns SwingConstants.VERTICAL or SwingConstants.HORIZONTAL, depending on the orientation of the progress bar."
JProgressBar,getPercentComplete(),double,Returns the percent complete for the progress bar.
JProgressBar,getString(),String,Returns a String representation of the current progress.
JProgressBar,getUI(),ProgressBarUI,Returns the look-and-feel object that renders this component.
JProgressBar,getUIClassID(),String,Returns the name of the look-and-feel class that renders this component.
JProgressBar,getValue(),int,Returns the progress bar's current value from the BoundedRangeModel.
JProgressBar,isBorderPainted(),boolean,Returns the borderPainted property.
JProgressBar,isIndeterminate(),boolean,Returns the value of the indeterminate property.
JProgressBar,isStringPainted(),boolean,Returns the value of the stringPainted property.
JProgressBar,paintBorder(Graphics g),protected void,Paints the progress bar's border if the borderPainted property is true.
JProgressBar,paramString(),protected String,Returns a string representation of this JProgressBar.
JProgressBar,removeChangeListener(ChangeListener l),void,Removes a ChangeListener from the progress bar.
JProgressBar,setBorderPainted(boolean b),void,"Sets the borderPainted property, which is true if the progress bar should paint its border."
JProgressBar,setIndeterminate(boolean newValue),void,"Sets the indeterminate property of the progress bar, which determines whether the progress bar is in determinate or indeterminate mode."
JProgressBar,setMaximum(int n),void,Sets the progress bar's maximum value (stored in the progress bar's data model) to n.
JProgressBar,setMinimum(int n),void,Sets the progress bar's minimum value (stored in the progress bar's data model) to n.
JProgressBar,setModel(BoundedRangeModel newModel),void,Sets the data model used by the JProgressBar.
JProgressBar,setOrientation(int newOrientation),void,"Sets the progress bar's orientation to newOrientation, which must be SwingConstants.VERTICAL or SwingConstants.HORIZONTAL."
JProgressBar,setString(String s),void,Sets the value of the progress string.
JProgressBar,setStringPainted(boolean b),void,"Sets the value of the stringPainted property, which determines whether the progress bar should render a progress string."
JProgressBar,setUI(ProgressBarUI ui),void,Sets the look-and-feel object that renders this component.
JProgressBar,setValue(int n),void,Sets the progress bar's current value to n.
JProgressBar,updateUI(),void,Resets the UI property to a value from the current look and feel.
JRadioButton,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JRadioButton.
JRadioButton,getUIClassID(),String,Returns the name of the L&F class that renders this component.
JRadioButton,paramString(),protected String,Returns a string representation of this JRadioButton.
JRadioButton,updateUI(),void,Resets the UI property to a value from the current look and feel.
JRadioButtonMenuItem,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JRadioButtonMenuItem.
JRadioButtonMenuItem,getUIClassID(),String,Returns the name of the L&F class that renders this component.
JRadioButtonMenuItem,paramString(),protected String,Returns a string representation of this JRadioButtonMenuItem.
JRootPane,"addImpl(Component comp, Object constraints, int index)",protected void,Overridden to enforce the position of the glass component as the zero child.
JRootPane,addNotify(),void,Notifies this component that it now has a parent component.
JRootPane,createContentPane(),protected Container,Called by the constructor methods to create the default contentPane.
JRootPane,createGlassPane(),protected Component,Called by the constructor methods to create the default glassPane.
JRootPane,createLayeredPane(),protected JLayeredPane,Called by the constructor methods to create the default layeredPane.
JRootPane,createRootLayout(),protected LayoutManager,Called by the constructor methods to create the default layoutManager.
JRootPane,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JRootPane.
JRootPane,getContentPane(),Container,Returns the content pane -- the container that holds the components parented by the root pane.
JRootPane,getDefaultButton(),JButton,Returns the value of the defaultButton property.
JRootPane,getGlassPane(),Component,Returns the current glass pane for this JRootPane.
JRootPane,getJMenuBar(),JMenuBar,Returns the menu bar from the layered pane.
JRootPane,getLayeredPane(),JLayeredPane,Gets the layered pane used by the root pane.
JRootPane,getMenuBar(),JMenuBar,Deprecated. As of Swing version 1.0.3 replaced by getJMenuBar().
JRootPane,getUI(),RootPaneUI,Returns the L&F object that renders this component.
JRootPane,getUIClassID(),String,Returns a string that specifies the name of the L&F class that renders this component.
JRootPane,getWindowDecorationStyle(),int,Returns a constant identifying the type of Window decorations the JRootPane is providing.
JRootPane,isOptimizedDrawingEnabled(),boolean,"The glassPane and contentPane have the same bounds, which means JRootPane does not tiles its children and this should return false."
JRootPane,isValidateRoot(),boolean,"If a descendant of this JRootPane calls revalidate, validate from here on down."
JRootPane,paramString(),protected String,Returns a string representation of this JRootPane.
JRootPane,removeNotify(),void,Notifies this component that it no longer has a parent component.
JRootPane,setContentPane(Container content),void,Sets the content pane -- the container that holds the components parented by the root pane.
JRootPane,setDefaultButton(JButton defaultButton),void,"Sets the defaultButton property, which determines the current default button for this JRootPane."
JRootPane,setDoubleBuffered(boolean aFlag),void,Sets whether this component should use a buffer to paint.
JRootPane,setGlassPane(Component glass),void,Sets a specified Component to be the glass pane for this root pane.
JRootPane,setJMenuBar(JMenuBar menu),void,Adds or changes the menu bar used in the layered pane.
JRootPane,setLayeredPane(JLayeredPane layered),void,Sets the layered pane for the root pane.
JRootPane,setMenuBar(JMenuBar menu),void,Deprecated. As of Swing version 1.0.3 replaced by setJMenuBar(JMenuBar menu).
JRootPane,setUI(RootPaneUI ui),void,Sets the L&F object that renders this component.
JRootPane,setWindowDecorationStyle(int windowDecorationStyle),void,"Sets the type of Window decorations (such as borders, widgets for closing a Window, title ...) the JRootPane should provide."
JRootPane,updateUI(),void,Resets the UI property to a value from the current look and feel.
JScrollBar,addAdjustmentListener(AdjustmentListener l),void,Adds an AdjustmentListener.
JScrollBar,"fireAdjustmentValueChanged(int id, int type, int value)",protected void,Notify listeners that the scrollbar's model has changed.
JScrollBar,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JScrollBar.
JScrollBar,getAdjustmentListeners(),AdjustmentListener[],Returns an array of all the AdjustmentListeners added to this JScrollBar with addAdjustmentListener().
JScrollBar,getBlockIncrement(),int,For backwards compatibility with java.awt.Scrollbar.
JScrollBar,getBlockIncrement(int direction),int,"Returns the amount to change the scrollbar's value by, given a block (usually ""page"") up/down request."
JScrollBar,getMaximum(),int,The maximum value of the scrollbar is maximum - extent.
JScrollBar,getMaximumSize(),Dimension,The scrollbar is flexible along it's scrolling axis and rigid along the other axis.
JScrollBar,getMinimum(),int,Returns the minimum value supported by the scrollbar (usually zero).
JScrollBar,getMinimumSize(),Dimension,The scrollbar is flexible along it's scrolling axis and rigid along the other axis.
JScrollBar,getModel(),BoundedRangeModel,"Returns data model that handles the scrollbar's four fundamental properties: minimum, maximum, value, extent."
JScrollBar,getOrientation(),int,Returns the component's orientation (horizontal or vertical).
JScrollBar,getUI(),ScrollBarUI,Returns the delegate that implements the look and feel for this component.
JScrollBar,getUIClassID(),String,Returns the name of the LookAndFeel class for this component.
JScrollBar,getUnitIncrement(),int,For backwards compatibility with java.awt.Scrollbar.
JScrollBar,getUnitIncrement(int direction),int,"Returns the amount to change the scrollbar's value by, given a unit up/down request."
JScrollBar,getValue(),int,Returns the scrollbar's value.
JScrollBar,getValueIsAdjusting(),boolean,True if the scrollbar knob is being dragged.
JScrollBar,getVisibleAmount(),int,"Returns the scrollbar's extent, aka its ""visibleAmount""."
JScrollBar,paramString(),protected String,Returns a string representation of this JScrollBar.
JScrollBar,removeAdjustmentListener(AdjustmentListener l),void,Removes an AdjustmentEvent listener.
JScrollBar,setBlockIncrement(int blockIncrement),void,Sets the blockIncrement property.
JScrollBar,setEnabled(boolean x),void,Enables the component so that the knob position can be changed.
JScrollBar,setMaximum(int maximum),void,Sets the model's maximum property.
JScrollBar,setMinimum(int minimum),void,Sets the model's minimum property.
JScrollBar,setModel(BoundedRangeModel newModel),void,"Sets the model that handles the scrollbar's four fundamental properties: minimum, maximum, value, extent."
JScrollBar,setOrientation(int orientation),void,Set the scrollbar's orientation to either VERTICAL or HORIZONTAL.
JScrollBar,setUI(ScrollBarUI ui),void,Sets the L&F object that renders this component.
JScrollBar,setUnitIncrement(int unitIncrement),void,Sets the unitIncrement property.
JScrollBar,setValue(int value),void,Sets the scrollbar's value.
JScrollBar,setValueIsAdjusting(boolean b),void,Sets the model's valueIsAdjusting property.
JScrollBar,"setValues(int newValue, int newExtent, int newMin, int newMax)",void,Sets the four BoundedRangeModel properties after forcing the arguments to obey the usual constraints:
JScrollBar,setVisibleAmount(int extent),void,Set the model's extent property.
JScrollBar,updateUI(),void,Overrides JComponent.updateUI.
JScrollPane,createHorizontalScrollBar(),JScrollBar,Returns a JScrollPane.ScrollBar by default.
JScrollPane,createVerticalScrollBar(),JScrollBar,Returns a JScrollPane.ScrollBar by default.
JScrollPane,createViewport(),protected JViewport,Returns a new JViewport by default.
JScrollPane,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JScrollPane.
JScrollPane,getColumnHeader(),JViewport,Returns the column header.
JScrollPane,getCorner(String key),Component,Returns the component at the specified corner.
JScrollPane,getHorizontalScrollBar(),JScrollBar,Returns the horizontal scroll bar that controls the viewport's horizontal view position.
JScrollPane,getHorizontalScrollBarPolicy(),int,Returns the horizontal scroll bar policy value.
JScrollPane,getRowHeader(),JViewport,Returns the row header.
JScrollPane,getUI(),ScrollPaneUI,Returns the look and feel (L&F) object that renders this component.
JScrollPane,getUIClassID(),String,Returns the suffix used to construct the name of the L&F class used to render this component.
JScrollPane,getVerticalScrollBar(),JScrollBar,Returns the vertical scroll bar that controls the viewports vertical view position.
JScrollPane,getVerticalScrollBarPolicy(),int,Returns the vertical scroll bar policy value.
JScrollPane,getViewport(),JViewport,Returns the current JViewport.
JScrollPane,getViewportBorder(),Border,Returns the Border object that surrounds the viewport.
JScrollPane,getViewportBorderBounds(),Rectangle,Returns the bounds of the viewport's border.
JScrollPane,isValidateRoot(),boolean,Overridden to return true so that any calls to revalidate on any descendants of this JScrollPane will cause the entire tree beginning with this JScrollPane to be validated.
JScrollPane,isWheelScrollingEnabled(),boolean,Indicates whether or not scrolling will take place in response to the mouse wheel.
JScrollPane,paramString(),protected String,Returns a string representation of this JScrollPane.
JScrollPane,setColumnHeader(JViewport columnHeader),void,"Removes the old columnHeader, if it exists; if the new columnHeader isn't null, syncs the x coordinate of its viewPosition with the viewport (if there is one) and then adds it to the scroll pane."
JScrollPane,setColumnHeaderView(Component view),void,"Creates a column-header viewport if necessary, sets its view, and then adds the column-header viewport to the scrollpane."
JScrollPane,setComponentOrientation(ComponentOrientation co),void,Sets the orientation for the vertical and horizontal scrollbars as determined by the ComponentOrientation argument.
JScrollPane,"setCorner(String key, Component corner)",void,"Adds a child that will appear in one of the scroll panes corners, if there's room."
JScrollPane,setHorizontalScrollBar(JScrollBar horizontalScrollBar),void,Adds the scrollbar that controls the viewport's horizontal view position to the scrollpane.
JScrollPane,setHorizontalScrollBarPolicy(int policy),void,Determines when the horizontal scrollbar appears in the scrollpane.
JScrollPane,setLayout(LayoutManager layout),void,Sets the layout manager for this JScrollPane.
JScrollPane,setRowHeader(JViewport rowHeader),void,"Removes the old rowHeader, if it exists; if the new rowHeader isn't null, syncs the y coordinate of its viewPosition with the viewport (if there is one) and then adds it to the scroll pane."
JScrollPane,setRowHeaderView(Component view),void,"Creates a row-header viewport if necessary, sets its view and then adds the row-header viewport to the scrollpane."
JScrollPane,setUI(ScrollPaneUI ui),void,Sets the ScrollPaneUI object that provides the look and feel (L&F) for this component.
JScrollPane,setVerticalScrollBar(JScrollBar verticalScrollBar),void,Adds the scrollbar that controls the viewports vertical view position to the scrollpane.
JScrollPane,setVerticalScrollBarPolicy(int policy),void,Determines when the vertical scrollbar appears in the scrollpane.
JScrollPane,setViewport(JViewport viewport),void,"Removes the old viewport (if there is one); forces the viewPosition of the new viewport to be in the +x,+y quadrant; syncs up the row and column headers (if there are any) with the new viewport; and finally syncs the scrollbars and headers with the new viewport."
JScrollPane,setViewportBorder(Border viewportBorder),void,Adds a border around the viewport.
JScrollPane,setViewportView(Component view),void,Creates a viewport if necessary and then sets its view.
JScrollPane,setWheelScrollingEnabled(boolean handleWheel),void,Enables/disables scrolling in response to movement of the mouse wheel.
JScrollPane,updateUI(),void,Replaces the current ScrollPaneUI object with a version from the current default look and feel.
JSeparator,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JSeparator.
JSeparator,getOrientation(),int,Returns the orientation of this separator.
JSeparator,getUI(),SeparatorUI,Returns the L&F object that renders this component.
JSeparator,getUIClassID(),String,Returns the name of the L&F class that renders this component.
JSeparator,paramString(),protected String,Returns a string representation of this JSeparator.
JSeparator,setOrientation(int orientation),void,Sets the orientation of the separator.
JSeparator,setUI(SeparatorUI ui),void,Sets the L&F object that renders this component.
JSeparator,updateUI(),void,Resets the UI property to a value from the current look and feel.
JSlider,addChangeListener(ChangeListener l),void,Adds a ChangeListener to the slider.
JSlider,createChangeListener(),protected ChangeListener,Subclasses that want to handle ChangeEvents from the model differently can override this to return an instance of a custom ChangeListener implementation.
JSlider,createStandardLabels(int increment),Hashtable,"Creates a Hashtable of numerical text labels, starting at the slider minimum, and using the increment specified."
JSlider,"createStandardLabels(int increment, int start)",Hashtable,"Creates a Hashtable of numerical text labels, starting at the starting point specified, and using the increment specified."
JSlider,fireStateChanged(),protected void,"Send a ChangeEvent, whose source is this JSlider, to all ChangeListeners that have registered interest in ChangeEvents."
JSlider,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JSlider.
JSlider,getChangeListeners(),ChangeListener[],Returns an array of all the ChangeListeners added to this JSlider with addChangeListener().
JSlider,getExtent(),int,"Returns the ""extent"" from the BoundedRangeModel."
JSlider,getInverted(),boolean,"Returns true if the value-range shown for the slider is reversed,"
JSlider,getLabelTable(),Dictionary,Returns the dictionary of what labels to draw at which values.
JSlider,getMajorTickSpacing(),int,This method returns the major tick spacing.
JSlider,getMaximum(),int,Returns the maximum value supported by the slider from the BoundedRangeModel.
JSlider,getMinimum(),int,Returns the minimum value supported by the slider from the BoundedRangeModel.
JSlider,getMinorTickSpacing(),int,This method returns the minor tick spacing.
JSlider,getModel(),BoundedRangeModel,"Returns the BoundedRangeModel that handles the slider's three fundamental properties: minimum, maximum, value."
JSlider,getOrientation(),int,Return this slider's vertical or horizontal orientation.
JSlider,getPaintLabels(),boolean,Tells if labels are to be painted.
JSlider,getPaintTicks(),boolean,Tells if tick marks are to be painted.
JSlider,getPaintTrack(),boolean,Tells if the track (area the slider slides in) is to be painted.
JSlider,getSnapToTicks(),boolean,Returns true if the knob (and the data value it represents) resolve to the closest tick mark next to where the user positioned the knob.
JSlider,getUI(),SliderUI,Gets the UI object which implements the L&F for this component.
JSlider,getUIClassID(),String,Returns the name of the L&F class that renders this component.
JSlider,getValue(),int,Returns the slider's current value from the BoundedRangeModel.
JSlider,getValueIsAdjusting(),boolean,Returns the valueIsAdjusting property from the model.
JSlider,"imageUpdate(Image img, int infoflags, int x, int y, int w, int h)",boolean,Repaints the component when the image has changed.
JSlider,paramString(),protected String,Returns a string representation of this JSlider.
JSlider,removeChangeListener(ChangeListener l),void,Removes a ChangeListener from the slider.
JSlider,setExtent(int extent),void,"Sets the size of the range ""covered"" by the knob."
JSlider,setFont(Font font),void,Sets the font for this component.
JSlider,setInverted(boolean b),void,Specify true to reverse the value-range shown for the slider and false to put the value range in the normal order.
JSlider,setLabelTable(Dictionary labels),void,Used to specify what label will be drawn at any given value.
JSlider,setMajorTickSpacing(int n),void,This method sets the major tick spacing.
JSlider,setMaximum(int maximum),void,Sets the slider's maximum value to maximum.
JSlider,setMinimum(int minimum),void,Sets the slider's minimum value to minimum.
JSlider,setMinorTickSpacing(int n),void,This method sets the minor tick spacing.
JSlider,setModel(BoundedRangeModel newModel),void,"Sets the BoundedRangeModel that handles the slider's three fundamental properties: minimum, maximum, value."
JSlider,setOrientation(int orientation),void,Set the slider's orientation to either SwingConstants.VERTICAL or SwingConstants.HORIZONTAL.
JSlider,setPaintLabels(boolean b),void,Determines whether labels are painted on the slider.
JSlider,setPaintTicks(boolean b),void,Determines whether tick marks are painted on the slider.
JSlider,setPaintTrack(boolean b),void,Determines whether the track is painted on the slider.
JSlider,setSnapToTicks(boolean b),void,Specifying true makes the knob (and the data value it represents) resolve to the closest tick mark next to where the user positioned the knob.
JSlider,setUI(SliderUI ui),void,Sets the UI object which implements the L&F for this component.
JSlider,setValue(int n),void,Sets the slider's current value to n.
JSlider,setValueIsAdjusting(boolean b),void,Sets the model's valueIsAdjusting property.
JSlider,updateLabelUIs(),protected void,Updates the UIs for the labels in the label table by calling updateUI on each label.
JSlider,updateUI(),void,Resets the UI property to a value from the current look and feel.
JSpinner,addChangeListener(ChangeListener listener),void,Adds a listener to the list that is notified each time a change to the model occurs.
JSpinner,commitEdit(),void,Commits the currently edited value to the SpinnerModel.
JSpinner,createEditor(SpinnerModel model),protected JComponent,This method is called by the constructors to create the JComponent that displays the current value of the sequence.
JSpinner,fireStateChanged(),protected void,"Sends a ChangeEvent, whose source is this JSpinner, to each ChangeListener."
JSpinner,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext for the JSpinner
JSpinner,getChangeListeners(),ChangeListener[],Returns an array of all the ChangeListeners added to this JSpinner with addChangeListener().
JSpinner,getEditor(),JComponent,Returns the component that displays and potentially changes the model's value.
JSpinner,getModel(),SpinnerModel,Returns the SpinnerModel that defines this spinners sequence of values.
JSpinner,getNextValue(),Object,Returns the object in the sequence that comes after the object returned by getValue().
JSpinner,getPreviousValue(),Object,Returns the object in the sequence that comes before the object returned by getValue().
JSpinner,getUI(),SpinnerUI,Returns the look and feel (L&F) object that renders this component.
JSpinner,getUIClassID(),String,Returns the suffix used to construct the name of the look and feel (L&F) class used to render this component.
JSpinner,getValue(),Object,"Returns the current value of the model, typically this value is displayed by the editor."
JSpinner,removeChangeListener(ChangeListener listener),void,Removes a ChangeListener from this spinner.
JSpinner,setEditor(JComponent editor),void,Changes the JComponent that displays the current value of the SpinnerModel.
JSpinner,setModel(SpinnerModel model),void,Changes the model that represents the value of this spinner.
JSpinner,setUI(SpinnerUI ui),void,Sets the look and feel (L&F) object that renders this component.
JSpinner,setValue(Object value),void,"Changes current value of the model, typically this value is displayed by the editor."
JSpinner,updateUI(),void,Resets the UI property with the value from the current look and feel.
JSpinner.DateEditor,getFormat(),SimpleDateFormat,Returns the java.text.SimpleDateFormat object the JFormattedTextField uses to parse and format numbers.
JSpinner.DateEditor,getModel(),SpinnerDateModel,Return our spinner ancestor's SpinnerDateModel.
JSpinner.DefaultEditor,"addLayoutComponent(String name, Component child)",void,This LayoutManager method does nothing.
JSpinner.DefaultEditor,commitEdit(),void,Pushes the currently edited value to the SpinnerModel.
JSpinner.DefaultEditor,dismiss(JSpinner spinner),void,Disconnect this editor from the specified JSpinner.
JSpinner.DefaultEditor,"getBaseline(int width, int height)",int,Returns the baseline.
JSpinner.DefaultEditor,getBaselineResizeBehavior(),Component.BaselineResizeBehavior,Returns an enum indicating how the baseline of the component changes as the size changes.
JSpinner.DefaultEditor,getSpinner(),JSpinner,Returns the JSpinner ancestor of this editor or null if none of the ancestors are a JSpinner.
JSpinner.DefaultEditor,getTextField(),JFormattedTextField,Returns the JFormattedTextField child of this editor.
JSpinner.DefaultEditor,layoutContainer(Container parent),void,Resize the one (and only) child to completely fill the area within the parents insets.
JSpinner.DefaultEditor,minimumLayoutSize(Container parent),Dimension,Returns the minimum size of first (and only) child plus the size of the parents insets.
JSpinner.DefaultEditor,preferredLayoutSize(Container parent),Dimension,Returns the preferred size of first (and only) child plus the size of the parents insets.
JSpinner.DefaultEditor,propertyChange(PropertyChangeEvent e),void,Called by the JFormattedTextFieldPropertyChangeListener.
JSpinner.DefaultEditor,removeLayoutComponent(Component child),void,This LayoutManager method does nothing.
JSpinner.DefaultEditor,stateChanged(ChangeEvent e),void,This method is called when the spinner's model's state changes.
JSpinner.ListEditor,getModel(),SpinnerListModel,Return our spinner ancestor's SpinnerNumberModel.
JSpinner.NumberEditor,getFormat(),DecimalFormat,Returns the java.text.DecimalFormat object the JFormattedTextField uses to parse and format numbers.
JSpinner.NumberEditor,getModel(),SpinnerNumberModel,Return our spinner ancestor's SpinnerNumberModel.
JSplitPane,"addImpl(Component comp, Object constraints, int index)",protected void,Adds the specified component to this split pane.
JSplitPane,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JSplitPane.
JSplitPane,getBottomComponent(),Component,"Returns the component below, or to the right of the divider."
JSplitPane,getDividerLocation(),int,Returns the last value passed to setDividerLocation.
JSplitPane,getDividerSize(),int,Returns the size of the divider.
JSplitPane,getLastDividerLocation(),int,Returns the last location the divider was at.
JSplitPane,getLeftComponent(),Component,Returns the component to the left (or above) the divider.
JSplitPane,getMaximumDividerLocation(),int,Returns the maximum location of the divider from the look and feel implementation.
JSplitPane,getMinimumDividerLocation(),int,Returns the minimum location of the divider from the look and feel implementation.
JSplitPane,getOrientation(),int,Returns the orientation.
JSplitPane,getResizeWeight(),double,Returns the number that determines how extra space is distributed.
JSplitPane,getRightComponent(),Component,Returns the component to the right (or below) the divider.
JSplitPane,getTopComponent(),Component,"Returns the component above, or to the left of the divider."
JSplitPane,getUI(),SplitPaneUI,Returns the SplitPaneUI that is providing the current look and feel.
JSplitPane,getUIClassID(),String,Returns the name of the L&F class that renders this component.
JSplitPane,isContinuousLayout(),boolean,Gets the continuousLayout property.
JSplitPane,isOneTouchExpandable(),boolean,Gets the oneTouchExpandable property.
JSplitPane,isValidateRoot(),boolean,"Returns true, so that calls to revalidate on any descendant of this JSplitPane will cause a request to be queued that will validate the JSplitPane and all its descendants."
JSplitPane,paintChildren(Graphics g),protected void,"Subclassed to message the UI with finishedPaintingChildren after super has been messaged, as well as painting the border."
JSplitPane,paramString(),protected String,Returns a string representation of this JSplitPane.
JSplitPane,remove(Component component),void,"Removes the child component, component from the pane."
JSplitPane,remove(int index),void,Removes the Component at the specified index.
JSplitPane,removeAll(),void,Removes all the child components from the split pane.
JSplitPane,resetToPreferredSizes(),void,Lays out the JSplitPane layout based on the preferred size of the children components.
JSplitPane,setBottomComponent(Component comp),void,"Sets the component below, or to the right of the divider."
JSplitPane,setContinuousLayout(boolean newContinuousLayout),void,"Sets the value of the continuousLayout property, which must be true for the child components to be continuously redisplayed and laid out during user intervention."
JSplitPane,setDividerLocation(double proportionalLocation),void,Sets the divider location as a percentage of the JSplitPane's size.
JSplitPane,setDividerLocation(int location),void,Sets the location of the divider.
JSplitPane,setDividerSize(int newSize),void,Sets the size of the divider.
JSplitPane,setLastDividerLocation(int newLastLocation),void,Sets the last location the divider was at to newLastLocation.
JSplitPane,setLeftComponent(Component comp),void,Sets the component to the left (or above) the divider.
JSplitPane,setOneTouchExpandable(boolean newValue),void,"Sets the value of the oneTouchExpandable property, which must be true for the JSplitPane to provide a UI widget on the divider to quickly expand/collapse the divider."
JSplitPane,setOrientation(int orientation),void,"Sets the orientation, or how the splitter is divided."
JSplitPane,setResizeWeight(double value),void,Specifies how to distribute extra space when the size of the split pane changes.
JSplitPane,setRightComponent(Component comp),void,Sets the component to the right (or below) the divider.
JSplitPane,setTopComponent(Component comp),void,"Sets the component above, or to the left of the divider."
JSplitPane,setUI(SplitPaneUI ui),void,Sets the L&F object that renders this component.
JSplitPane,updateUI(),void,Notification from the UIManager that the L&F has changed.
JTabbedPane,add(Component component),Component,Adds a component with a tab title defaulting to the name of the component which is the result of calling component.getName.
JTabbedPane,"add(Component component, int index)",Component,Adds a component at the specified tab index with a tab title defaulting to the name of the component.
JTabbedPane,"add(Component component, Object constraints)",void,Adds a component to the tabbed pane.
JTabbedPane,"add(Component component, Object constraints, int index)",void,Adds a component at the specified tab index.
JTabbedPane,"add(String title, Component component)",Component,Adds a component with the specified tab title.
JTabbedPane,addChangeListener(ChangeListener l),void,Adds a ChangeListener to this tabbedpane.
JTabbedPane,"addTab(String title, Component component)",void,Adds a component represented by a title and no icon.
JTabbedPane,"addTab(String title, Icon icon, Component component)",void,"Adds a component represented by a title and/or icon, either of which can be null."
JTabbedPane,"addTab(String title, Icon icon, Component component, String tip)",void,"Adds a component and tip represented by a title and/or icon, either of which can be null."
JTabbedPane,createChangeListener(),protected ChangeListener,Subclasses that want to handle ChangeEvents differently can override this to return a subclass of ModelListener or another ChangeListener implementation.
JTabbedPane,fireStateChanged(),protected void,"Sends a ChangeEvent, with this JTabbedPane as the source, to each registered listener."
JTabbedPane,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JTabbedPane.
JTabbedPane,getBackgroundAt(int index),Color,Returns the tab background color at index.
JTabbedPane,getBoundsAt(int index),Rectangle,Returns the tab bounds at index.
JTabbedPane,getChangeListeners(),ChangeListener[],Returns an array of all the ChangeListeners added to this JTabbedPane with addChangeListener.
JTabbedPane,getComponentAt(int index),Component,Returns the component at index.
JTabbedPane,getDisabledIconAt(int index),Icon,Returns the tab disabled icon at index.
JTabbedPane,getDisplayedMnemonicIndexAt(int tabIndex),int,"Returns the character, as an index, that the look and feel should provide decoration for as representing the mnemonic character."
JTabbedPane,getForegroundAt(int index),Color,Returns the tab foreground color at index.
JTabbedPane,getIconAt(int index),Icon,Returns the tab icon at index.
JTabbedPane,getMnemonicAt(int tabIndex),int,Returns the keyboard mnemonic for accessing the specified tab.
JTabbedPane,getModel(),SingleSelectionModel,Returns the model associated with this tabbedpane.
JTabbedPane,getSelectedComponent(),Component,Returns the currently selected component for this tabbedpane.
JTabbedPane,getSelectedIndex(),int,Returns the currently selected index for this tabbedpane.
JTabbedPane,getTabComponentAt(int index),Component,Returns the tab component at index.
JTabbedPane,getTabCount(),int,Returns the number of tabs in this tabbedpane.
JTabbedPane,getTabLayoutPolicy(),int,Returns the policy used by the tabbedpane to layout the tabs when all the tabs will not fit within a single run.
JTabbedPane,getTabPlacement(),int,Returns the placement of the tabs for this tabbedpane.
JTabbedPane,getTabRunCount(),int,Returns the number of tab runs currently used to display the tabs.
JTabbedPane,getTitleAt(int index),String,Returns the tab title at index.
JTabbedPane,getToolTipText(MouseEvent event),String,Returns the tooltip text for the component determined by the mouse event location.
JTabbedPane,getToolTipTextAt(int index),String,Returns the tab tooltip text at index.
JTabbedPane,getUI(),TabbedPaneUI,Returns the UI object which implements the L&F for this component.
JTabbedPane,getUIClassID(),String,Returns the name of the UI class that implements the L&F for this component.
JTabbedPane,"indexAtLocation(int x, int y)",int,Returns the tab index corresponding to the tab whose bounds intersect the specified location.
JTabbedPane,indexOfComponent(Component component),int,Returns the index of the tab for the specified component.
JTabbedPane,indexOfTab(Icon icon),int,"Returns the first tab index with a given icon, or -1 if no tab has this icon."
JTabbedPane,indexOfTab(String title),int,"Returns the first tab index with a given title, or -1 if no tab has this title."
JTabbedPane,indexOfTabComponent(Component tabComponent),int,Returns the index of the tab for the specified tab component.
JTabbedPane,"insertTab(String title, Icon icon, Component component, String tip, int index)",void,"Inserts a new tab for the given component, at the given index, represented by the given title and/or icon, either of which may be null."
JTabbedPane,isEnabledAt(int index),boolean,Returns whether or not the tab at index is currently enabled.
JTabbedPane,paramString(),protected String,Returns a string representation of this JTabbedPane.
JTabbedPane,remove(Component component),void,Removes the specified Component from the JTabbedPane.
JTabbedPane,remove(int index),void,Removes the tab and component which corresponds to the specified index.
JTabbedPane,removeAll(),void,Removes all the tabs and their corresponding components from the tabbedpane.
JTabbedPane,removeChangeListener(ChangeListener l),void,Removes a ChangeListener from this tabbedpane.
JTabbedPane,removeTabAt(int index),void,Removes the tab at index.
JTabbedPane,"setBackgroundAt(int index, Color background)",void,"Sets the background color at index to background which can be null, in which case the tab's background color will default to the background color of the tabbedpane."
JTabbedPane,"setComponentAt(int index, Component component)",void,Sets the component at index to component.
JTabbedPane,"setDisabledIconAt(int index, Icon disabledIcon)",void,Sets the disabled icon at index to icon which can be null.
JTabbedPane,"setDisplayedMnemonicIndexAt(int tabIndex, int mnemonicIndex)",void,Provides a hint to the look and feel as to which character in the text should be decorated to represent the mnemonic.
JTabbedPane,"setEnabledAt(int index, boolean enabled)",void,Sets whether or not the tab at index is enabled.
JTabbedPane,"setForegroundAt(int index, Color foreground)",void,"Sets the foreground color at index to foreground which can be null, in which case the tab's foreground color will default to the foreground color of this tabbedpane."
JTabbedPane,"setIconAt(int index, Icon icon)",void,Sets the icon at index to icon which can be null.
JTabbedPane,"setMnemonicAt(int tabIndex, int mnemonic)",void,Sets the keyboard mnemonic for accessing the specified tab.
JTabbedPane,setModel(SingleSelectionModel model),void,Sets the model to be used with this tabbedpane.
JTabbedPane,setSelectedComponent(Component c),void,Sets the selected component for this tabbedpane.
JTabbedPane,setSelectedIndex(int index),void,Sets the selected index for this tabbedpane.
JTabbedPane,"setTabComponentAt(int index, Component component)",void,Sets the component that is responsible for rendering the title for the specified tab.
JTabbedPane,setTabLayoutPolicy(int tabLayoutPolicy),void,Sets the policy which the tabbedpane will use in laying out the tabs when all the tabs will not fit within a single run.
JTabbedPane,setTabPlacement(int tabPlacement),void,Sets the tab placement for this tabbedpane.
JTabbedPane,"setTitleAt(int index, String title)",void,Sets the title at index to title which can be null.
JTabbedPane,"setToolTipTextAt(int index, String toolTipText)",void,Sets the tooltip text at index to toolTipText which can be null.
JTabbedPane,setUI(TabbedPaneUI ui),void,Sets the UI object which implements the L&F for this component.
JTabbedPane,updateUI(),void,Resets the UI property to a value from the current look and feel.
JTable,addColumn(TableColumn aColumn),void,Appends aColumn to the end of the array of columns held by this JTable's column model.
JTable,"addColumnSelectionInterval(int index0, int index1)",void,"Adds the columns from index0 to index1, inclusive, to the current selection."
JTable,addNotify(),void,Calls the configureEnclosingScrollPane method.
JTable,"addRowSelectionInterval(int index0, int index1)",void,"Adds the rows from index0 to index1, inclusive, to the current selection."
JTable,"changeSelection(int rowIndex, int columnIndex, boolean toggle, boolean extend)",void,"Updates the selection models of the table, depending on the state of the two flags: toggle and extend."
JTable,clearSelection(),void,Deselects all selected columns and rows.
JTable,columnAdded(TableColumnModelEvent e),void,Invoked when a column is added to the table column model.
JTable,columnAtPoint(Point point),int,"Returns the index of the column that point lies in, or -1 if the result is not in the range [0, getColumnCount()-1]."
JTable,columnMarginChanged(ChangeEvent e),void,Invoked when a column is moved due to a margin change.
JTable,columnMoved(TableColumnModelEvent e),void,Invoked when a column is repositioned.
JTable,columnRemoved(TableColumnModelEvent e),void,Invoked when a column is removed from the table column model.
JTable,columnSelectionChanged(ListSelectionEvent e),void,Invoked when the selection model of the TableColumnModel is changed.
JTable,configureEnclosingScrollPane(),protected void,"If this JTable is the viewportView of an enclosing JScrollPane (the usual situation), configure this ScrollPane by, amongst other things, installing the table's tableHeader as the columnHeaderView of the scroll pane."
JTable,convertColumnIndexToModel(int viewColumnIndex),int,Maps the index of the column in the view at viewColumnIndex to the index of the column in the table model.
JTable,convertColumnIndexToView(int modelColumnIndex),int,Maps the index of the column in the table model at modelColumnIndex to the index of the column in the view.
JTable,convertRowIndexToModel(int viewRowIndex),int,Maps the index of the row in terms of the view to the underlying TableModel.
JTable,convertRowIndexToView(int modelRowIndex),int,Maps the index of the row in terms of the TableModel to the view.
JTable,createDefaultColumnModel(),protected TableColumnModel,"Returns the default column model object, which is a DefaultTableColumnModel."
JTable,createDefaultColumnsFromModel(),void,Creates default columns for the table from the data model using the getColumnCount method defined in the TableModel interface.
JTable,createDefaultDataModel(),protected TableModel,"Returns the default table model object, which is a DefaultTableModel."
JTable,createDefaultEditors(),protected void,"Creates default cell editors for objects, numbers, and boolean values."
JTable,createDefaultRenderers(),protected void,"Creates default cell renderers for objects, numbers, doubles, dates, booleans, and icons."
JTable,createDefaultSelectionModel(),protected ListSelectionModel,"Returns the default selection model object, which is a DefaultListSelectionModel."
JTable,createDefaultTableHeader(),protected JTableHeader,"Returns the default table header object, which is a JTableHeader."
JTable,createScrollPaneForTable(JTable aTable),static JScrollPane,"Deprecated. As of Swing version 1.0.2, replaced by new JScrollPane(aTable)."
JTable,doLayout(),void,Causes this table to lay out its rows and columns.
JTable,"editCellAt(int row, int column)",boolean,"Programmatically starts editing the cell at row and column, if those indices are in the valid range, and the cell at those indices is editable."
JTable,"editCellAt(int row, int column, EventObject e)",boolean,"Programmatically starts editing the cell at row and column, if those indices are in the valid range, and the cell at those indices is editable."
JTable,editingCanceled(ChangeEvent e),void,Invoked when editing is canceled.
JTable,editingStopped(ChangeEvent e),void,Invoked when editing is finished.
JTable,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JTable.
JTable,getAutoCreateColumnsFromModel(),boolean,Determines whether the table will create default columns from the model.
JTable,getAutoCreateRowSorter(),boolean,"Returns true if whenever the model changes, a new RowSorter should be created and installed as the table's sorter; otherwise, returns false."
JTable,getAutoResizeMode(),int,Returns the auto resize mode of the table.
JTable,getCellEditor(),TableCellEditor,"Returns the active cell editor, which is null if the table is not currently editing."
JTable,"getCellEditor(int row, int column)",TableCellEditor,Returns an appropriate editor for the cell specified by row and column.
JTable,"getCellRect(int row, int column, boolean includeSpacing)",Rectangle,Returns a rectangle for the cell that lies at the intersection of row and column.
JTable,"getCellRenderer(int row, int column)",TableCellRenderer,Returns an appropriate renderer for the cell specified by this row and column.
JTable,getCellSelectionEnabled(),boolean,Returns true if both row and column selection models are enabled.
JTable,getColumn(Object identifier),TableColumn,"Returns the TableColumn object for the column in the table whose identifier is equal to identifier, when compared using equals."
JTable,getColumnClass(int column),Class<?>,Returns the type of the column appearing in the view at column position column.
JTable,getColumnCount(),int,Returns the number of columns in the column model.
JTable,getColumnModel(),TableColumnModel,Returns the TableColumnModel that contains all column information of this table.
JTable,getColumnName(int column),String,Returns the name of the column appearing in the view at column position column.
JTable,getColumnSelectionAllowed(),boolean,Returns true if columns can be selected.
JTable,getDefaultEditor(Class<?> columnClass),TableCellEditor,Returns the editor to be used when no editor has been set in a TableColumn.
JTable,getDefaultRenderer(Class<?> columnClass),TableCellRenderer,Returns the cell renderer to be used when no renderer has been set in a TableColumn.
JTable,getDragEnabled(),boolean,Returns whether or not automatic drag handling is enabled.
JTable,getDropLocation(),JTable.DropLocation,"Returns the location that this component should visually indicate as the drop location during a DnD operation over the component, or null if no location is to currently be shown."
JTable,getDropMode(),DropMode,Returns the drop mode for this component.
JTable,getEditingColumn(),int,Returns the index of the column that contains the cell currently being edited.
JTable,getEditingRow(),int,Returns the index of the row that contains the cell currently being edited.
JTable,getEditorComponent(),Component,Returns the component that is handling the editing session.
JTable,getFillsViewportHeight(),boolean,Returns whether or not this table is always made large enough to fill the height of an enclosing viewport.
JTable,getGridColor(),Color,Returns the color used to draw grid lines.
JTable,getIntercellSpacing(),Dimension,Returns the horizontal and vertical space between cells.
JTable,getModel(),TableModel,Returns the TableModel that provides the data displayed by this JTable.
JTable,getPreferredScrollableViewportSize(),Dimension,Returns the preferred size of the viewport for this table.
JTable,"getPrintable(JTable.PrintMode printMode, MessageFormat headerFormat, MessageFormat footerFormat)",Printable,Return a Printable for use in printing this JTable.
JTable,getRowCount(),int,"Returns the number of rows that can be shown in the JTable, given unlimited space."
JTable,getRowHeight(),int,"Returns the height of a table row, in pixels."
JTable,getRowHeight(int row),int,"Returns the height, in pixels, of the cells in row."
JTable,getRowMargin(),int,"Gets the amount of empty space, in pixels, between cells."
JTable,getRowSelectionAllowed(),boolean,Returns true if rows can be selected.
JTable,getRowSorter(),RowSorter<? extends TableModel>,Returns the object responsible for sorting.
JTable,"getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction)",int,"Returns visibleRect.height or visibleRect.width, depending on this table's orientation."
JTable,getScrollableTracksViewportHeight(),boolean,"Returns false to indicate that the height of the viewport does not determine the height of the table, unless getFillsViewportHeight is true and the preferred height of the table is smaller than the viewport's height."
JTable,getScrollableTracksViewportWidth(),boolean,"Returns false if autoResizeMode is set to AUTO_RESIZE_OFF, which indicates that the width of the viewport does not determine the width of the table."
JTable,"getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction)",int,Returns the scroll increment (in pixels) that completely exposes one new row or column (depending on the orientation).
JTable,getSelectedColumn(),int,"Returns the index of the first selected column, -1 if no column is selected."
JTable,getSelectedColumnCount(),int,Returns the number of selected columns.
JTable,getSelectedColumns(),int[],Returns the indices of all selected columns.
JTable,getSelectedRow(),int,"Returns the index of the first selected row, -1 if no row is selected."
JTable,getSelectedRowCount(),int,Returns the number of selected rows.
JTable,getSelectedRows(),int[],Returns the indices of all selected rows.
JTable,getSelectionBackground(),Color,Returns the background color for selected cells.
JTable,getSelectionForeground(),Color,Returns the foreground color for selected cells.
JTable,getSelectionModel(),ListSelectionModel,Returns the ListSelectionModel that is used to maintain row selection state.
JTable,getShowHorizontalLines(),boolean,"Returns true if the table draws horizontal lines between cells, false if it doesn't."
JTable,getShowVerticalLines(),boolean,"Returns true if the table draws vertical lines between cells, false if it doesn't."
JTable,getSurrendersFocusOnKeystroke(),boolean,Returns true if the editor should get the focus when keystrokes cause the editor to be activated
JTable,getTableHeader(),JTableHeader,Returns the tableHeader used by this JTable.
JTable,getToolTipText(MouseEvent event),String,Overrides JComponent's getToolTipText method in order to allow the renderer's tips to be used if it has text set.
JTable,getUI(),TableUI,Returns the L&F object that renders this component.
JTable,getUIClassID(),String,Returns the suffix used to construct the name of the L&F class used to render this component.
JTable,getUpdateSelectionOnSort(),boolean,Returns true if the selection should be updated after sorting.
JTable,"getValueAt(int row, int column)",Object,Returns the cell value at row and column.
JTable,initializeLocalVars(),protected void,Initializes table properties to their default values.
JTable,"isCellEditable(int row, int column)",boolean,Returns true if the cell at row and column is editable.
JTable,"isCellSelected(int row, int column)",boolean,Returns true if the specified indices are in the valid range of rows and columns and the cell at the specified position is selected.
JTable,isColumnSelected(int column),boolean,"Returns true if the specified index is in the valid range of columns, and the column at that index is selected."
JTable,isEditing(),boolean,Returns true if a cell is being edited.
JTable,isRowSelected(int row),boolean,"Returns true if the specified index is in the valid range of rows, and the row at that index is selected."
JTable,"moveColumn(int column, int targetColumn)",void,Moves the column column to the position currently occupied by the column targetColumn in the view.
JTable,paramString(),protected String,Returns a string representation of this table.
JTable,"prepareEditor(TableCellEditor editor, int row, int column)",Component,"Prepares the editor by querying the data model for the value and selection state of the cell at row, column."
JTable,"prepareRenderer(TableCellRenderer renderer, int row, int column)",Component,"Prepares the renderer by querying the data model for the value and selection state of the cell at row, column."
JTable,print(),boolean,"A convenience method that displays a printing dialog, and then prints this JTable in mode PrintMode.FIT_WIDTH, with no header or footer text."
JTable,print(JTable.PrintMode printMode),boolean,"A convenience method that displays a printing dialog, and then prints this JTable in the given printing mode, with no header or footer text."
JTable,"print(JTable.PrintMode printMode, MessageFormat headerFormat, MessageFormat footerFormat)",boolean,"A convenience method that displays a printing dialog, and then prints this JTable in the given printing mode, with the specified header and footer text."
JTable,"print(JTable.PrintMode printMode, MessageFormat headerFormat, MessageFormat footerFormat, boolean showPrintDialog, PrintRequestAttributeSet attr, boolean interactive)",boolean,"Prints this table, as specified by the fully featured print method, with the default printer specified as the print service."
JTable,"print(JTable.PrintMode printMode, MessageFormat headerFormat, MessageFormat footerFormat, boolean showPrintDialog, PrintRequestAttributeSet attr, boolean interactive, PrintService service)",boolean,Prints this JTable.
JTable,"processKeyBinding(KeyStroke ks, KeyEvent e, int condition, boolean pressed)",protected boolean,Invoked to process the key bindings for ks as the result of the KeyEvent e.
JTable,removeColumn(TableColumn aColumn),void,Removes aColumn from this JTable's array of columns.
JTable,"removeColumnSelectionInterval(int index0, int index1)",void,"Deselects the columns from index0 to index1, inclusive."
JTable,removeEditor(),void,Discards the editor object and frees the real estate it used for cell rendering.
JTable,removeNotify(),void,Calls the unconfigureEnclosingScrollPane method.
JTable,"removeRowSelectionInterval(int index0, int index1)",void,"Deselects the rows from index0 to index1, inclusive."
JTable,resizeAndRepaint(),protected void,Equivalent to revalidate followed by repaint.
JTable,rowAtPoint(Point point),int,"Returns the index of the row that point lies in, or -1 if the result is not in the range [0, getRowCount()-1]."
JTable,selectAll(),void,"Selects all rows, columns, and cells in the table."
JTable,setAutoCreateColumnsFromModel(boolean autoCreateColumnsFromModel),void,Sets this table's autoCreateColumnsFromModel flag.
JTable,setAutoCreateRowSorter(boolean autoCreateRowSorter),void,Specifies whether a RowSorter should be created for the table whenever its model changes.
JTable,setAutoResizeMode(int mode),void,Sets the table's auto resize mode when the table is resized.
JTable,setCellEditor(TableCellEditor anEditor),void,Sets the active cell editor.
JTable,setCellSelectionEnabled(boolean cellSelectionEnabled),void,Sets whether this table allows both a column selection and a row selection to exist simultaneously.
JTable,setColumnModel(TableColumnModel columnModel),void,Sets the column model for this table to newModel and registers for listener notifications from the new column model.
JTable,setColumnSelectionAllowed(boolean columnSelectionAllowed),void,Sets whether the columns in this model can be selected.
JTable,"setColumnSelectionInterval(int index0, int index1)",void,"Selects the columns from index0 to index1, inclusive."
JTable,"setDefaultEditor(Class<?> columnClass, TableCellEditor editor)",void,Sets a default cell editor to be used if no editor has been set in a TableColumn.
JTable,"setDefaultRenderer(Class<?> columnClass, TableCellRenderer renderer)",void,Sets a default cell renderer to be used if no renderer has been set in a TableColumn.
JTable,setDragEnabled(boolean b),void,Turns on or off automatic drag handling.
JTable,setDropMode(DropMode dropMode),void,Sets the drop mode for this component.
JTable,setEditingColumn(int aColumn),void,Sets the editingColumn variable.
JTable,setEditingRow(int aRow),void,Sets the editingRow variable.
JTable,setFillsViewportHeight(boolean fillsViewportHeight),void,Sets whether or not this table is always made large enough to fill the height of an enclosing viewport.
JTable,setGridColor(Color gridColor),void,Sets the color used to draw grid lines to gridColor and redisplays.
JTable,setIntercellSpacing(Dimension intercellSpacing),void,Sets the rowMargin and the columnMargin -- the height and width of the space between cells -- to intercellSpacing.
JTable,setModel(TableModel dataModel),void,Sets the data model for this table to newModel and registers with it for listener notifications from the new data model.
JTable,setPreferredScrollableViewportSize(Dimension size),void,Sets the preferred size of the viewport for this table.
JTable,setRowHeight(int rowHeight),void,"Sets the height, in pixels, of all cells to rowHeight, revalidates, and repaints."
JTable,"setRowHeight(int row, int rowHeight)",void,"Sets the height for row to rowHeight, revalidates, and repaints."
JTable,setRowMargin(int rowMargin),void,Sets the amount of empty space between cells in adjacent rows.
JTable,setRowSelectionAllowed(boolean rowSelectionAllowed),void,Sets whether the rows in this model can be selected.
JTable,"setRowSelectionInterval(int index0, int index1)",void,"Selects the rows from index0 to index1, inclusive."
JTable,setRowSorter(RowSorter<? extends TableModel> sorter),void,Sets the RowSorter.
JTable,setSelectionBackground(Color selectionBackground),void,Sets the background color for selected cells.
JTable,setSelectionForeground(Color selectionForeground),void,Sets the foreground color for selected cells.
JTable,setSelectionMode(int selectionMode),void,"Sets the table's selection mode to allow only single selections, a single contiguous interval, or multiple intervals."
JTable,setSelectionModel(ListSelectionModel newModel),void,Sets the row selection model for this table to newModel and registers for listener notifications from the new selection model.
JTable,setShowGrid(boolean showGrid),void,Sets whether the table draws grid lines around cells.
JTable,setShowHorizontalLines(boolean showHorizontalLines),void,Sets whether the table draws horizontal lines between cells.
JTable,setShowVerticalLines(boolean showVerticalLines),void,Sets whether the table draws vertical lines between cells.
JTable,setSurrendersFocusOnKeystroke(boolean surrendersFocusOnKeystroke),void,Sets whether editors in this JTable get the keyboard focus when an editor is activated as a result of the JTable forwarding keyboard events for a cell.
JTable,setTableHeader(JTableHeader tableHeader),void,Sets the tableHeader working with this JTable to newHeader.
JTable,setUI(TableUI ui),void,Sets the L&F object that renders this component and repaints.
JTable,setUpdateSelectionOnSort(boolean update),void,Specifies whether the selection should be updated after sorting.
JTable,"setValueAt(Object aValue, int row, int column)",void,Sets the value for the cell in the table model at row and column.
JTable,sizeColumnsToFit(boolean lastColumnOnly),void,"Deprecated. As of Swing version 1.0.3, replaced by doLayout()."
JTable,sizeColumnsToFit(int resizingColumn),void,Obsolete as of Java 2 platform v1.4.
JTable,sorterChanged(RowSorterEvent e),void,RowSorterListener notification that the RowSorter has changed in some way.
JTable,tableChanged(TableModelEvent e),void,Invoked when this table's TableModel generates a TableModelEvent.
JTable,unconfigureEnclosingScrollPane(),protected void,Reverses the effect of configureEnclosingScrollPane by replacing the columnHeaderView of the enclosing scroll pane with null.
JTable,updateUI(),void,Notification from the UIManager that the L&F has changed.
JTable,valueChanged(ListSelectionEvent e),void,Invoked when the row selection changes -- repaints to show the new selection.
JTable.DropLocation,getColumn(),int,Returns the column index where a dropped item should be placed in the table.
JTable.DropLocation,getRow(),int,Returns the row index where a dropped item should be placed in the table.
JTable.DropLocation,isInsertColumn(),boolean,Returns whether or not this location represents an insert of a column.
JTable.DropLocation,isInsertRow(),boolean,Returns whether or not this location represents an insert of a row.
JTable.DropLocation,toString(),String,Returns a string representation of this drop location.
JTextArea,append(String str),void,Appends the given text to the end of the document.
JTextArea,createDefaultModel(),protected Document,Creates the default implementation of the model to be used at construction if one isn't explicitly given.
JTextArea,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JTextArea.
JTextArea,getColumns(),int,Returns the number of columns in the TextArea.
JTextArea,getColumnWidth(),protected int,Gets column width.
JTextArea,getLineCount(),int,Determines the number of lines contained in the area.
JTextArea,getLineEndOffset(int line),int,Determines the offset of the end of the given line.
JTextArea,getLineOfOffset(int offset),int,Translates an offset into the components text to a line number.
JTextArea,getLineStartOffset(int line),int,Determines the offset of the start of the given line.
JTextArea,getLineWrap(),boolean,Gets the line-wrapping policy of the text area.
JTextArea,getPreferredScrollableViewportSize(),Dimension,Returns the preferred size of the viewport if this component is embedded in a JScrollPane.
JTextArea,getPreferredSize(),Dimension,Returns the preferred size of the TextArea.
JTextArea,getRowHeight(),protected int,Defines the meaning of the height of a row.
JTextArea,getRows(),int,Returns the number of rows in the TextArea.
JTextArea,getScrollableTracksViewportWidth(),boolean,Returns true if a viewport should always force the width of this Scrollable to match the width of the viewport.
JTextArea,"getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction)",int,"Components that display logical rows or columns should compute the scroll increment that will completely expose one new row or column, depending on the value of orientation."
JTextArea,getTabSize(),int,Gets the number of characters used to expand tabs.
JTextArea,getUIClassID(),String,Returns the class ID for the UI.
JTextArea,getWrapStyleWord(),boolean,Gets the style of wrapping used if the text area is wrapping lines.
JTextArea,"insert(String str, int pos)",void,Inserts the specified text at the specified position.
JTextArea,paramString(),protected String,Returns a string representation of this JTextArea.
JTextArea,"replaceRange(String str, int start, int end)",void,Replaces text from the indicated start to end position with the new text specified.
JTextArea,setColumns(int columns),void,Sets the number of columns for this TextArea.
JTextArea,setFont(Font f),void,Sets the current font.
JTextArea,setLineWrap(boolean wrap),void,Sets the line-wrapping policy of the text area.
JTextArea,setRows(int rows),void,Sets the number of rows for this TextArea.
JTextArea,setTabSize(int size),void,Sets the number of characters to expand tabs to.
JTextArea,setWrapStyleWord(boolean word),void,Sets the style of wrapping used if the text area is wrapping lines.
JTextField,"actionPropertyChanged(Action action, String propertyName)",protected void,Updates the textfield's state in response to property changes in associated action.
JTextField,addActionListener(ActionListener l),void,Adds the specified action listener to receive action events from this textfield.
JTextField,configurePropertiesFromAction(Action a),protected void,Sets the properties on this textfield to match those in the specified Action.
JTextField,createActionPropertyChangeListener(Action a),protected PropertyChangeListener,Creates and returns a PropertyChangeListener that is responsible for listening for changes from the specified Action and updating the appropriate properties.
JTextField,createDefaultModel(),protected Document,Creates the default implementation of the model to be used at construction if one isn't explicitly given.
JTextField,fireActionPerformed(),protected void,Notifies all listeners that have registered interest for notification on this event type.
JTextField,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JTextField.
JTextField,getAction(),Action,"Returns the currently set Action for this ActionEvent source, or null if no Action is set."
JTextField,getActionListeners(),ActionListener[],Returns an array of all the ActionListeners added to this JTextField with addActionListener().
JTextField,getActions(),Action[],Fetches the command list for the editor.
JTextField,getColumns(),int,Returns the number of columns in this TextField.
JTextField,getColumnWidth(),protected int,Returns the column width.
JTextField,getHorizontalAlignment(),int,Returns the horizontal alignment of the text.
JTextField,getHorizontalVisibility(),BoundedRangeModel,Gets the visibility of the text field.
JTextField,getPreferredSize(),Dimension,Returns the preferred size Dimensions needed for this TextField.
JTextField,getScrollOffset(),int,"Gets the scroll offset, in pixels."
JTextField,getUIClassID(),String,Gets the class ID for a UI.
JTextField,isValidateRoot(),boolean,"Calls to revalidate that come from within the textfield itself will be handled by validating the textfield, unless the textfield is contained within a JViewport, in which case this returns false."
JTextField,paramString(),protected String,Returns a string representation of this JTextField.
JTextField,postActionEvent(),void,Processes action events occurring on this textfield by dispatching them to any registered ActionListener objects.
JTextField,removeActionListener(ActionListener l),void,Removes the specified action listener so that it no longer receives action events from this textfield.
JTextField,scrollRectToVisible(Rectangle r),void,Scrolls the field left or right.
JTextField,setAction(Action a),void,Sets the Action for the ActionEvent source.
JTextField,setActionCommand(String command),void,Sets the command string used for action events.
JTextField,setColumns(int columns),void,"Sets the number of columns in this TextField, and then invalidate the layout."
JTextField,setDocument(Document doc),void,Associates the editor with a text document.
JTextField,setFont(Font f),void,Sets the current font.
JTextField,setHorizontalAlignment(int alignment),void,Sets the horizontal alignment of the text.
JTextField,setScrollOffset(int scrollOffset),void,"Sets the scroll offset, in pixels."
JTextPane,"addStyle(String nm, Style parent)",Style,Adds a new style into the logical style hierarchy.
JTextPane,createDefaultEditorKit(),protected EditorKit,Creates the EditorKit to use by default.
JTextPane,getCharacterAttributes(),AttributeSet,"Fetches the character attributes in effect at the current location of the caret, or null."
JTextPane,getInputAttributes(),MutableAttributeSet,Gets the input attributes for the pane.
JTextPane,getLogicalStyle(),Style,"Fetches the logical style assigned to the paragraph represented by the current position of the caret, or null."
JTextPane,getParagraphAttributes(),AttributeSet,"Fetches the current paragraph attributes in effect at the location of the caret, or null if none."
JTextPane,getStyle(String nm),Style,Fetches a named non-null style previously added.
JTextPane,getStyledDocument(),StyledDocument,Fetches the model associated with the editor.
JTextPane,getStyledEditorKit(),protected StyledEditorKit,Gets the editor kit.
JTextPane,getUIClassID(),String,Returns the class ID for the UI.
JTextPane,insertComponent(Component c),void,Inserts a component into the document as a replacement for the currently selected content.
JTextPane,insertIcon(Icon g),void,Inserts an icon into the document as a replacement for the currently selected content.
JTextPane,paramString(),protected String,Returns a string representation of this JTextPane.
JTextPane,removeStyle(String nm),void,Removes a named non-null style previously added to the document.
JTextPane,replaceSelection(String content),void,Replaces the currently selected content with new content represented by the given string.
JTextPane,"setCharacterAttributes(AttributeSet attr, boolean replace)",void,Applies the given attributes to character content.
JTextPane,setDocument(Document doc),void,Associates the editor with a text document.
JTextPane,setEditorKit(EditorKit kit),void,Sets the currently installed kit for handling content.
JTextPane,setLogicalStyle(Style s),void,Sets the logical style to use for the paragraph at the current caret position.
JTextPane,"setParagraphAttributes(AttributeSet attr, boolean replace)",void,Applies the given attributes to paragraphs.
JTextPane,setStyledDocument(StyledDocument doc),void,Associates the editor with a text document.
JToggleButton,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JToggleButton.
JToggleButton,getUIClassID(),String,Returns a string that specifies the name of the l&f class that renders this component.
JToggleButton,paramString(),protected String,Returns a string representation of this JToggleButton.
JToggleButton,updateUI(),void,Resets the UI property to a value from the current look and feel.
JToggleButton.ToggleButtonModel,isSelected(),boolean,Checks if the button is selected.
JToggleButton.ToggleButtonModel,setPressed(boolean b),void,Sets the pressed state of the toggle button.
JToggleButton.ToggleButtonModel,setSelected(boolean b),void,Sets the selected state of the button.
JToolBar,add(Action a),JButton,Adds a new JButton which dispatches the action.
JToolBar,"addImpl(Component comp, Object constraints, int index)",protected void,"If a JButton is being added, it is initially set to be disabled."
JToolBar,addSeparator(),void,Appends a separator of default size to the end of the tool bar.
JToolBar,addSeparator(Dimension size),void,Appends a separator of a specified size to the end of the tool bar.
JToolBar,createActionChangeListener(JButton b),protected PropertyChangeListener,"Returns a properly configured PropertyChangeListener which updates the control as changes to the Action occur, or null if the default property change listener for the control is desired."
JToolBar,createActionComponent(Action a),protected JButton,Factory method which creates the JButton for Actions added to the JToolBar.
JToolBar,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JToolBar.
JToolBar,getComponentAtIndex(int i),Component,Returns the component at the specified index.
JToolBar,getComponentIndex(Component c),int,Returns the index of the specified component.
JToolBar,getMargin(),Insets,Returns the margin between the tool bar's border and its buttons.
JToolBar,getOrientation(),int,Returns the current orientation of the tool bar.
JToolBar,getUI(),ToolBarUI,Returns the tool bar's current UI.
JToolBar,getUIClassID(),String,Returns the name of the L&F class that renders this component.
JToolBar,isBorderPainted(),boolean,Gets the borderPainted property.
JToolBar,isFloatable(),boolean,Gets the floatable property.
JToolBar,isRollover(),boolean,Returns the rollover state.
JToolBar,paintBorder(Graphics g),protected void,Paints the tool bar's border if the borderPainted property is true.
JToolBar,paramString(),protected String,Returns a string representation of this JToolBar.
JToolBar,setBorderPainted(boolean b),void,"Sets the borderPainted property, which is true if the border should be painted."
JToolBar,setFloatable(boolean b),void,"Sets the floatable property, which must be true for the user to move the tool bar."
JToolBar,setLayout(LayoutManager mgr),void,Sets the layout manager for this container.
JToolBar,setMargin(Insets m),void,Sets the margin between the tool bar's border and its buttons.
JToolBar,setOrientation(int o),void,Sets the orientation of the tool bar.
JToolBar,setRollover(boolean rollover),void,Sets the rollover state of this toolbar.
JToolBar,setUI(ToolBarUI ui),void,Sets the L&F object that renders this component.
JToolBar,updateUI(),void,Notification from the UIFactory that the L&F has changed.
JToolBar.Separator,getMaximumSize(),Dimension,Returns the maximum size for the separator.
JToolBar.Separator,getMinimumSize(),Dimension,Returns the minimum size for the separator.
JToolBar.Separator,getPreferredSize(),Dimension,Returns the preferred size for the separator.
JToolBar.Separator,getSeparatorSize(),Dimension,Returns the size of the separator
JToolBar.Separator,getUIClassID(),String,Returns the name of the L&F class that renders this component.
JToolBar.Separator,setSeparatorSize(Dimension size),void,Sets the size of the separator.
JToolTip,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JToolTip.
JToolTip,getComponent(),JComponent,Returns the component the tooltip applies to.
JToolTip,getTipText(),String,Returns the text that is shown when the tool tip is displayed.
JToolTip,getUI(),ToolTipUI,Returns the L&F object that renders this component.
JToolTip,getUIClassID(),String,Returns the name of the L&F class that renders this component.
JToolTip,paramString(),protected String,Returns a string representation of this JToolTip.
JToolTip,setComponent(JComponent c),void,Specifies the component that the tooltip describes.
JToolTip,setTipText(String tipText),void,Sets the text to show when the tool tip is displayed.
JToolTip,updateUI(),void,Resets the UI property to a value from the current look and feel.
JTree,"addSelectionInterval(int index0, int index1)",void,Adds the specified rows (inclusive) to the selection.
JTree,addSelectionPath(TreePath path),void,Adds the node identified by the specified TreePath to the current selection.
JTree,addSelectionPaths(TreePath[] paths),void,Adds each path in the array of paths to the current selection.
JTree,addSelectionRow(int row),void,Adds the path at the specified row to the current selection.
JTree,addSelectionRows(int[] rows),void,Adds the paths at each of the specified rows to the current selection.
JTree,addTreeExpansionListener(TreeExpansionListener tel),void,Adds a listener for TreeExpansion events.
JTree,addTreeSelectionListener(TreeSelectionListener tsl),void,Adds a listener for TreeSelection events.
JTree,addTreeWillExpandListener(TreeWillExpandListener tel),void,Adds a listener for TreeWillExpand events.
JTree,cancelEditing(),void,Cancels the current editing session.
JTree,clearSelection(),void,Clears the selection.
JTree,clearToggledPaths(),protected void,Clears the cache of toggled tree paths.
JTree,collapsePath(TreePath path),void,Ensures that the node identified by the specified path is collapsed and viewable.
JTree,collapseRow(int row),void,Ensures that the node in the specified row is collapsed.
JTree,"convertValueToText(Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus)",String,Called by the renderers to convert the specified value to text.
JTree,createTreeModel(Object value),protected static TreeModel,Returns a TreeModel wrapping the specified object.
JTree,createTreeModelListener(),protected TreeModelListener,Creates and returns an instance of TreeModelHandler.
JTree,expandPath(TreePath path),void,Ensures that the node identified by the specified path is expanded and viewable.
JTree,expandRow(int row),void,Ensures that the node in the specified row is expanded and viewable.
JTree,fireTreeCollapsed(TreePath path),void,Notifies all listeners that have registered interest for notification on this event type.
JTree,fireTreeExpanded(TreePath path),void,Notifies all listeners that have registered interest for notification on this event type.
JTree,fireTreeWillCollapse(TreePath path),void,Notifies all listeners that have registered interest for notification on this event type.
JTree,fireTreeWillExpand(TreePath path),void,Notifies all listeners that have registered interest for notification on this event type.
JTree,fireValueChanged(TreeSelectionEvent e),protected void,Notifies all listeners that have registered interest for notification on this event type.
JTree,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JTree.
JTree,getAnchorSelectionPath(),TreePath,Returns the path identified as the anchor.
JTree,getCellEditor(),TreeCellEditor,Returns the editor used to edit entries in the tree.
JTree,getCellRenderer(),TreeCellRenderer,Returns the current TreeCellRenderer that is rendering each cell.
JTree,"getClosestPathForLocation(int x, int y)",TreePath,"Returns the path to the node that is closest to x,y."
JTree,"getClosestRowForLocation(int x, int y)",int,"Returns the row to the node that is closest to x,y."
JTree,getDefaultTreeModel(),protected static TreeModel,Creates and returns a sample TreeModel.
JTree,getDescendantToggledPaths(TreePath parent),protected Enumeration<TreePath>,Returns an Enumeration of TreePaths that have been expanded that are descendants of parent.
JTree,getDragEnabled(),boolean,Returns whether or not automatic drag handling is enabled.
JTree,getDropLocation(),JTree.DropLocation,"Returns the location that this component should visually indicate as the drop location during a DnD operation over the component, or null if no location is to currently be shown."
JTree,getDropMode(),DropMode,Returns the drop mode for this component.
JTree,getEditingPath(),TreePath,Returns the path to the element that is currently being edited.
JTree,getExpandedDescendants(TreePath parent),Enumeration<TreePath>,Returns an Enumeration of the descendants of the path parent that are currently expanded.
JTree,getExpandsSelectedPaths(),boolean,Returns the expandsSelectedPaths property.
JTree,getInvokesStopCellEditing(),boolean,Returns the indicator that tells what happens when editing is interrupted.
JTree,getLastSelectedPathComponent(),Object,Returns the last path component of the selected path.
JTree,getLeadSelectionPath(),TreePath,Returns the path identified as the lead.
JTree,getLeadSelectionRow(),int,Returns the row index corresponding to the lead path.
JTree,getMaxSelectionRow(),int,Returns the largest selected row.
JTree,getMinSelectionRow(),int,Returns the smallest selected row.
JTree,getModel(),TreeModel,Returns the TreeModel that is providing the data.
JTree,"getNextMatch(String prefix, int startingRow, Position.Bias bias)",TreePath,Returns the TreePath to the next tree element that begins with a prefix.
JTree,"getPathBetweenRows(int index0, int index1)",protected TreePath[],Returns the paths (inclusive) between the specified rows.
JTree,getPathBounds(TreePath path),Rectangle,Returns the Rectangle that the specified node will be drawn into.
JTree,"getPathForLocation(int x, int y)",TreePath,Returns the path for the node at the specified location.
JTree,getPathForRow(int row),TreePath,Returns the path for the specified row.
JTree,getPreferredScrollableViewportSize(),Dimension,Returns the preferred display size of a JTree.
JTree,getRowBounds(int row),Rectangle,Returns the Rectangle that the node at the specified row is drawn in.
JTree,getRowCount(),int,Returns the number of viewable nodes.
JTree,"getRowForLocation(int x, int y)",int,Returns the row for the specified location.
JTree,getRowForPath(TreePath path),int,Returns the row that displays the node identified by the specified path.
JTree,getRowHeight(),int,Returns the height of each row.
JTree,"getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction)",int,"Returns the amount for a block increment, which is the height or width of visibleRect, based on orientation."
JTree,getScrollableTracksViewportHeight(),boolean,"Returns false to indicate that the height of the viewport does not determine the height of the table, unless the preferred height of the tree is smaller than the viewports height."
JTree,getScrollableTracksViewportWidth(),boolean,"Returns false to indicate that the width of the viewport does not determine the width of the table, unless the preferred width of the tree is smaller than the viewports width."
JTree,"getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction)",int,Returns the amount to increment when scrolling.
JTree,getScrollsOnExpand(),boolean,Returns the value of the scrollsOnExpand property.
JTree,getSelectionCount(),int,Returns the number of nodes selected.
JTree,getSelectionModel(),TreeSelectionModel,Returns the model for selections.
JTree,getSelectionPath(),TreePath,Returns the path to the first selected node.
JTree,getSelectionPaths(),TreePath[],Returns the paths of all selected values.
JTree,getSelectionRows(),int[],Returns all of the currently selected rows.
JTree,getShowsRootHandles(),boolean,Returns the value of the showsRootHandles property.
JTree,getToggleClickCount(),int,Returns the number of mouse clicks needed to expand or close a node.
JTree,getToolTipText(MouseEvent event),String,Overrides JComponent's getToolTipText method in order to allow renderer's tips to be used if it has text set.
JTree,getTreeExpansionListeners(),TreeExpansionListener[],Returns an array of all the TreeExpansionListeners added to this JTree with addTreeExpansionListener().
JTree,getTreeSelectionListeners(),TreeSelectionListener[],Returns an array of all the TreeSelectionListeners added to this JTree with addTreeSelectionListener().
JTree,getTreeWillExpandListeners(),TreeWillExpandListener[],Returns an array of all the TreeWillExpandListeners added to this JTree with addTreeWillExpandListener().
JTree,getUI(),TreeUI,Returns the L&F object that renders this component.
JTree,getUIClassID(),String,Returns the name of the L&F class that renders this component.
JTree,getVisibleRowCount(),int,Returns the number of rows that are displayed in the display area.
JTree,hasBeenExpanded(TreePath path),boolean,Returns true if the node identified by the path has ever been expanded.
JTree,isCollapsed(int row),boolean,Returns true if the node at the specified display row is collapsed.
JTree,isCollapsed(TreePath path),boolean,"Returns true if the value identified by path is currently collapsed, this will return false if any of the values in path are currently not being displayed."
JTree,isEditable(),boolean,Returns true if the tree is editable.
JTree,isEditing(),boolean,Returns true if the tree is being edited.
JTree,isExpanded(int row),boolean,Returns true if the node at the specified display row is currently expanded.
JTree,isExpanded(TreePath path),boolean,"Returns true if the node identified by the path is currently expanded,"
JTree,isFixedRowHeight(),boolean,Returns true if the height of each display row is a fixed size.
JTree,isLargeModel(),boolean,Returns true if the tree is configured for a large model.
JTree,isPathEditable(TreePath path),boolean,Returns isEditable.
JTree,isPathSelected(TreePath path),boolean,Returns true if the item identified by the path is currently selected.
JTree,isRootVisible(),boolean,Returns true if the root node of the tree is displayed.
JTree,isRowSelected(int row),boolean,Returns true if the node identified by row is selected.
JTree,isSelectionEmpty(),boolean,Returns true if the selection is currently empty.
JTree,isVisible(TreePath path),boolean,"Returns true if the value identified by path is currently viewable, which means it is either the root or all of its parents are expanded."
JTree,makeVisible(TreePath path),void,Ensures that the node identified by path is currently viewable.
JTree,paramString(),protected String,Returns a string representation of this JTree.
JTree,"removeDescendantSelectedPaths(TreePath path, boolean includePath)",protected boolean,Removes any paths in the selection that are descendants of path.
JTree,removeDescendantToggledPaths(Enumeration<TreePath> toRemove),protected void,Removes any descendants of the TreePaths in toRemove that have been expanded.
JTree,"removeSelectionInterval(int index0, int index1)",void,Removes the specified rows (inclusive) from the selection.
JTree,removeSelectionPath(TreePath path),void,Removes the node identified by the specified path from the current selection.
JTree,removeSelectionPaths(TreePath[] paths),void,Removes the nodes identified by the specified paths from the current selection.
JTree,removeSelectionRow(int row),void,Removes the row at the index row from the current selection.
JTree,removeSelectionRows(int[] rows),void,Removes the rows that are selected at each of the specified rows.
JTree,removeTreeExpansionListener(TreeExpansionListener tel),void,Removes a listener for TreeExpansion events.
JTree,removeTreeSelectionListener(TreeSelectionListener tsl),void,Removes a TreeSelection listener.
JTree,removeTreeWillExpandListener(TreeWillExpandListener tel),void,Removes a listener for TreeWillExpand events.
JTree,scrollPathToVisible(TreePath path),void,Makes sure all the path components in path are expanded (except for the last path component) and scrolls so that the node identified by the path is displayed.
JTree,scrollRowToVisible(int row),void,Scrolls the item identified by row until it is displayed.
JTree,setAnchorSelectionPath(TreePath newPath),void,Sets the path identified as the anchor.
JTree,setCellEditor(TreeCellEditor cellEditor),void,Sets the cell editor.
JTree,setCellRenderer(TreeCellRenderer x),void,Sets the TreeCellRenderer that will be used to draw each cell.
JTree,setDragEnabled(boolean b),void,Turns on or off automatic drag handling.
JTree,setDropMode(DropMode dropMode),void,Sets the drop mode for this component.
JTree,setEditable(boolean flag),void,Determines whether the tree is editable.
JTree,"setExpandedState(TreePath path, boolean state)",protected void,Sets the expanded state of this JTree.
JTree,setExpandsSelectedPaths(boolean newValue),void,Configures the expandsSelectedPaths property.
JTree,setInvokesStopCellEditing(boolean newValue),void,"Determines what happens when editing is interrupted by selecting another node in the tree, a change in the tree's data, or by some other means."
JTree,setLargeModel(boolean newValue),void,Specifies whether the UI should use a large model.
JTree,setLeadSelectionPath(TreePath newPath),void,Sets the path identifies as the lead.
JTree,setModel(TreeModel newModel),void,Sets the TreeModel that will provide the data.
JTree,setRootVisible(boolean rootVisible),void,Determines whether or not the root node from the TreeModel is visible.
JTree,setRowHeight(int rowHeight),void,"Sets the height of each cell, in pixels."
JTree,setScrollsOnExpand(boolean newValue),void,"Sets the scrollsOnExpand property, which determines whether the tree might scroll to show previously hidden children."
JTree,"setSelectionInterval(int index0, int index1)",void,Selects the rows in the specified interval (inclusive).
JTree,setSelectionModel(TreeSelectionModel selectionModel),void,Sets the tree's selection model.
JTree,setSelectionPath(TreePath path),void,Selects the node identified by the specified path.
JTree,setSelectionPaths(TreePath[] paths),void,Selects the nodes identified by the specified array of paths.
JTree,setSelectionRow(int row),void,Selects the node at the specified row in the display.
JTree,setSelectionRows(int[] rows),void,Selects the nodes corresponding to each of the specified rows in the display.
JTree,setShowsRootHandles(boolean newValue),void,"Sets the value of the showsRootHandles property, which specifies whether the node handles should be displayed."
JTree,setToggleClickCount(int clickCount),void,Sets the number of mouse clicks before a node will expand or close.
JTree,setUI(TreeUI ui),void,Sets the L&F object that renders this component.
JTree,setVisibleRowCount(int newCount),void,Sets the number of rows that are to be displayed.
JTree,startEditingAtPath(TreePath path),void,Selects the node identified by the specified path and initiates editing.
JTree,stopEditing(),boolean,Ends the current editing session.
JTree,treeDidChange(),void,"Sent when the tree has changed enough that we need to resize the bounds, but not enough that we need to remove the expanded node set (e.g nodes were expanded or collapsed, or nodes were inserted into the tree)."
JTree,updateUI(),void,Notification from the UIManager that the L&F has changed.
JTree.DropLocation,getChildIndex(),int,Returns the index where the dropped data should be inserted with respect to the path returned by getPath().
JTree.DropLocation,getPath(),TreePath,Returns the path where dropped data should be placed in the tree.
JTree.DropLocation,toString(),String,Returns a string representation of this drop location.
JTree.DynamicUtilTreeNode,children(),Enumeration,"Subclassed to load the children, if necessary."
JTree.DynamicUtilTreeNode,"createChildren(DefaultMutableTreeNode parent, Object children)",static void,Adds to parent all the children in children.
JTree.DynamicUtilTreeNode,getChildAt(int index),TreeNode,"Subclassed to load the children, if necessary."
JTree.DynamicUtilTreeNode,getChildCount(),int,Returns the number of child nodes.
JTree.DynamicUtilTreeNode,isLeaf(),boolean,Returns true if this node allows children.
JTree.DynamicUtilTreeNode,loadChildren(),protected void,Loads the children based on childValue.
JTree.EmptySelectionModel,addPropertyChangeListener(PropertyChangeListener listener),void,This is overriden to do nothing; EmptySelectionModel does not allow a selection.
JTree.EmptySelectionModel,addSelectionPaths(TreePath[] paths),void,This is overriden to do nothing; EmptySelectionModel does not allow a selection.
JTree.EmptySelectionModel,addTreeSelectionListener(TreeSelectionListener listener),void,This is overriden to do nothing; EmptySelectionModel does not allow a selection.
JTree.EmptySelectionModel,removePropertyChangeListener(PropertyChangeListener listener),void,This is overriden to do nothing; EmptySelectionModel does not allow a selection.
JTree.EmptySelectionModel,removeSelectionPaths(TreePath[] paths),void,This is overriden to do nothing; EmptySelectionModel does not allow a selection.
JTree.EmptySelectionModel,removeTreeSelectionListener(TreeSelectionListener listener),void,This is overriden to do nothing; EmptySelectionModel does not allow a selection.
JTree.EmptySelectionModel,setRowMapper(RowMapper mapper),void,This is overriden to do nothing; EmptySelectionModel does not allow a selection.
JTree.EmptySelectionModel,setSelectionMode(int mode),void,This is overriden to do nothing; EmptySelectionModel does not allow a selection.
JTree.EmptySelectionModel,setSelectionPaths(TreePath[] paths),void,This is overriden to do nothing; EmptySelectionModel does not allow a selection.
JTree.EmptySelectionModel,sharedInstance(),static JTree.EmptySelectionModel,Returns the single instance of EmptySelectionModel.
JViewport,addChangeListener(ChangeListener l),void,"Adds a ChangeListener to the list that is notified each time the view's size, position, or the viewport's extent size has changed."
JViewport,"addImpl(Component child, Object constraints, int index)",protected void,"Sets the JViewport's one lightweight child, which can be null."
JViewport,"computeBlit(int dx, int dy, Point blitFrom, Point blitTo, Dimension blitSize, Rectangle blitPaint)",protected boolean,Computes the parameters for a blit where the backing store image currently contains oldLoc in the upper left hand corner and we're scrolling to newLoc.
JViewport,createLayoutManager(),protected LayoutManager,Subclassers can override this to install a different layout manager (or null) in the constructor.
JViewport,createViewListener(),protected JViewport.ViewListener,Creates a listener for the view.
JViewport,"firePropertyChange(String propertyName, Object oldValue, Object newValue)",protected void,Notifies listeners of a property change.
JViewport,fireStateChanged(),protected void,"Notifies all ChangeListeners when the views size, position, or the viewports extent size has changed."
JViewport,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JViewport.
JViewport,getChangeListeners(),ChangeListener[],Returns an array of all the ChangeListeners added to this JViewport with addChangeListener().
JViewport,getExtentSize(),Dimension,Returns the size of the visible part of the view in view coordinates.
JViewport,getInsets(),Insets,"Returns the insets (border) dimensions as (0,0,0,0), since borders are not supported on a JViewport."
JViewport,getInsets(Insets insets),Insets,Returns an Insets object containing this JViewports inset values.
JViewport,getScrollMode(),int,Returns the current scrolling mode.
JViewport,getUI(),ViewportUI,Returns the L&F object that renders this component.
JViewport,getUIClassID(),String,Returns a string that specifies the name of the L&F class that renders this component.
JViewport,getView(),Component,Returns the JViewport's one child or null.
JViewport,getViewPosition(),Point,"Returns the view coordinates that appear in the upper left hand corner of the viewport, or 0,0 if there's no view."
JViewport,getViewRect(),Rectangle,Returns a rectangle whose origin is getViewPosition and size is getExtentSize.
JViewport,getViewSize(),Dimension,"If the view's size hasn't been explicitly set, return the preferred size, otherwise return the view's current size."
JViewport,isBackingStoreEnabled(),boolean,"Deprecated. As of Java 2 platform v1.3, replaced by getScrollMode()."
JViewport,isOptimizedDrawingEnabled(),boolean,The JViewport overrides the default implementation of this method (in JComponent) to return false.
JViewport,isPaintingOrigin(),protected boolean,"Returns true if scroll mode is a BACKINGSTORE_SCROLL_MODE to cause painting to originate from JViewport, or one of its ancestors."
JViewport,paint(Graphics g),void,"Depending on whether the backingStore is enabled, either paint the image through the backing store or paint just the recently exposed part, using the backing store to ""blit"" the remainder."
JViewport,paramString(),protected String,Returns a string representation of this JViewport.
JViewport,remove(Component child),void,Removes the Viewports one lightweight child.
JViewport,removeChangeListener(ChangeListener l),void,"Removes a ChangeListener from the list that's notified each time the views size, position, or the viewports extent size has changed."
JViewport,"repaint(long tm, int x, int y, int w, int h)",void,Always repaint in the parents coordinate system to make sure only one paint is performed by the RepaintManager.
JViewport,"reshape(int x, int y, int w, int h)",void,Sets the bounds of this viewport.
JViewport,scrollRectToVisible(Rectangle contentRect),void,Scrolls the view so that Rectangle within the view becomes visible.
JViewport,setBackingStoreEnabled(boolean enabled),void,"Deprecated. As of Java 2 platform v1.3, replaced by setScrollMode()."
JViewport,setBorder(Border border),void,"The viewport ""scrolls"" its child (called the ""view"") by the normal parent/child clipping (typically the view is moved in the opposite direction of the scroll)."
JViewport,setExtentSize(Dimension newExtent),void,Sets the size of the visible part of the view using view coordinates.
JViewport,setScrollMode(int mode),void,Used to control the method of scrolling the viewport contents.
JViewport,setUI(ViewportUI ui),void,Sets the L&F object that renders this component.
JViewport,setView(Component view),void,"Sets the JViewport's one lightweight child (view), which can be null."
JViewport,setViewPosition(Point p),void,"Sets the view coordinates that appear in the upper left hand corner of the viewport, does nothing if there's no view."
JViewport,setViewSize(Dimension newSize),void,Sets the size of the view.
JViewport,toViewCoordinates(Dimension size),Dimension,Converts a size in pixel coordinates to view coordinates.
JViewport,toViewCoordinates(Point p),Point,Converts a point in pixel coordinates to view coordinates.
JViewport,updateUI(),void,Resets the UI property to a value from the current look and feel.
JWindow,"addImpl(Component comp, Object constraints, int index)",protected void,Adds the specified child Component.
JWindow,createRootPane(),protected JRootPane,Called by the constructor methods to create the default rootPane.
JWindow,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JWindow.
JWindow,getContentPane(),Container,Returns the Container which is the contentPane for this window.
JWindow,getGlassPane(),Component,Returns the glassPane Component for this window.
JWindow,getGraphics(),Graphics,Creates a graphics context for this component.
JWindow,getLayeredPane(),JLayeredPane,Returns the layeredPane object for this window.
JWindow,getRootPane(),JRootPane,Returns the rootPane object for this window.
JWindow,getTransferHandler(),TransferHandler,Gets the transferHandler property.
JWindow,isRootPaneCheckingEnabled(),protected boolean,Returns whether calls to add and setLayout are forwarded to the contentPane.
JWindow,paramString(),protected String,Returns a string representation of this JWindow.
JWindow,remove(Component comp),void,Removes the specified component from the container.
JWindow,"repaint(long time, int x, int y, int width, int height)",void,Repaints the specified rectangle of this component within time milliseconds.
JWindow,setContentPane(Container contentPane),void,Sets the contentPane property for this window.
JWindow,setGlassPane(Component glassPane),void,Sets the glassPane property.
JWindow,setLayeredPane(JLayeredPane layeredPane),void,Sets the layeredPane property.
JWindow,setLayout(LayoutManager manager),void,Sets the LayoutManager.
JWindow,setRootPane(JRootPane root),protected void,Sets the new rootPane object for this window.
JWindow,setRootPaneCheckingEnabled(boolean enabled),protected void,Sets whether calls to add and setLayout are forwarded to the contentPane.
JWindow,setTransferHandler(TransferHandler newHandler),void,"Sets the transferHandler property, which is a mechanism to support transfer of data into this component."
JWindow,update(Graphics g),void,Calls paint(g).
JWindow,windowInit(),protected void,Called by the constructors to init the JWindow properly.
KeyStroke,getKeyStroke(char keyChar),static KeyStroke,Returns a shared instance of a KeyStroke that represents a KEY_TYPED event for the specified character.
KeyStroke,"getKeyStroke(Character keyChar, int modifiers)",static KeyStroke,Returns a shared instance of a KeyStroke that represents a KEY_TYPED event for the specified Character object and a set of modifiers.
KeyStroke,"getKeyStroke(char keyChar, boolean onKeyRelease)",static KeyStroke,Deprecated. use getKeyStroke(char)
KeyStroke,"getKeyStroke(int keyCode, int modifiers)",static KeyStroke,"Returns a shared instance of a KeyStroke, given a numeric key code and a set of modifiers."
KeyStroke,"getKeyStroke(int keyCode, int modifiers, boolean onKeyRelease)",static KeyStroke,"Returns a shared instance of a KeyStroke, given a numeric key code and a set of modifiers, specifying whether the key is activated when it is pressed or released."
KeyStroke,getKeyStroke(String s),static KeyStroke,Parses a string and returns a KeyStroke.
KeyStroke,getKeyStrokeForEvent(KeyEvent anEvent),static KeyStroke,Returns a KeyStroke which represents the stroke which generated a given KeyEvent.
LayoutFocusTraversalPolicy,accept(Component aComponent),protected boolean,Determines whether the specified Component is an acceptable choice as the new focus owner.
LayoutFocusTraversalPolicy,"getComponentAfter(Container aContainer, Component aComponent)",Component,Returns the Component that should receive the focus after aComponent.
LayoutFocusTraversalPolicy,"getComponentBefore(Container aContainer, Component aComponent)",Component,Returns the Component that should receive the focus before aComponent.
LayoutFocusTraversalPolicy,getFirstComponent(Container aContainer),Component,Returns the first Component in the traversal cycle.
LayoutFocusTraversalPolicy,getLastComponent(Container aContainer),Component,Returns the last Component in the traversal cycle.
LayoutStyle,"getContainerGap(JComponent component, int position, Container parent)",abstract int,Returns the amount of space to place between the component and specified edge of its parent.
LayoutStyle,getInstance(),static LayoutStyle,Returns the shared instance of LayoutStyle.
LayoutStyle,"getPreferredGap(JComponent component1, JComponent component2, LayoutStyle.ComponentPlacement type, int position, Container parent)",abstract int,Returns the amount of space to use between two components.
LayoutStyle,setInstance(LayoutStyle style),static void,Sets the shared instance of LayoutStyle.
LookAndFeel,getDefaults(),UIDefaults,Returns the look and feel defaults.
LookAndFeel,getDescription(),abstract String,"Return a one line description of this look and feel implementation, e.g."
LookAndFeel,"getDesktopPropertyValue(String systemPropertyName, Object fallbackValue)",static Object,Returns the value of the specified system desktop property by invoking Toolkit.getDefaultToolkit().getDesktopProperty().
LookAndFeel,"getDisabledIcon(JComponent component, Icon icon)",Icon,Returns an Icon with a disabled appearance.
LookAndFeel,"getDisabledSelectedIcon(JComponent component, Icon icon)",Icon,Returns an Icon for use by disabled components that are also selected.
LookAndFeel,getID(),abstract String,Return a string that identifies this look and feel.
LookAndFeel,getLayoutStyle(),LayoutStyle,Returns the LayoutStyle for this look and feel.
LookAndFeel,getName(),abstract String,"Return a short string that identifies this look and feel, e.g."
LookAndFeel,getSupportsWindowDecorations(),boolean,Returns true if the LookAndFeel returned RootPaneUI instances support providing Window decorations in a JRootPane.
LookAndFeel,initialize(),void,Initializes the look and feel.
LookAndFeel,"installBorder(JComponent c, String defaultBorderName)",static void,Convenience method for setting a component's border property with a value from the defaults.
LookAndFeel,"installColors(JComponent c, String defaultBgName, String defaultFgName)",static void,Convenience method for setting a component's foreground and background color properties with values from the defaults.
LookAndFeel,"installColorsAndFont(JComponent c, String defaultBgName, String defaultFgName, String defaultFontName)",static void,"Convenience method for setting a component's foreground, background and font properties with values from the defaults."
LookAndFeel,"installProperty(JComponent c, String propertyName, Object propertyValue)",static void,Convenience method for installing a property with the specified name and value on a component if that property has not already been set by the developer.
LookAndFeel,isNativeLookAndFeel(),abstract boolean,"If the underlying platform has a ""native"" look and feel, and this is an implementation of it, return true."
LookAndFeel,isSupportedLookAndFeel(),abstract boolean,Return true if the underlying platform supports and or permits this look and feel.
LookAndFeel,"loadKeyBindings(InputMap retMap, Object[] keys)",static void,Populates an InputMap with the specified bindings.
LookAndFeel,"makeComponentInputMap(JComponent c, Object[] keys)",static ComponentInputMap,Creates a ComponentInputMapUIResource from keys.
LookAndFeel,"makeIcon(Class<?> baseClass, String gifFile)",static Object,Creates and returns a UIDefault.LazyValue that loads an image.
LookAndFeel,makeInputMap(Object[] keys),static InputMap,Creates a InputMapUIResource from keys.
LookAndFeel,makeKeyBindings(Object[] keyBindingList),static JTextComponent.KeyBinding[],Convenience method for building an array of KeyBindings.
LookAndFeel,provideErrorFeedback(Component component),void,"Invoked when the user attempts an invalid operation, such as pasting into an uneditable JTextField that has focus."
LookAndFeel,toString(),String,Returns a string that displays and identifies this object's properties.
LookAndFeel,uninitialize(),void,Uninitializes the look and feel.
LookAndFeel,uninstallBorder(JComponent c),static void,Convenience method for uninstalling a border.
MenuSelectionManager,addChangeListener(ChangeListener l),void,Adds a ChangeListener to the button.
MenuSelectionManager,clearSelectedPath(),void,Tell the menu selection to close and unselect all the menu components.
MenuSelectionManager,"componentForPoint(Component source, Point sourcePoint)",Component,Returns the component in the currently selected path which contains sourcePoint.
MenuSelectionManager,defaultManager(),static MenuSelectionManager,Returns the default menu selection manager.
MenuSelectionManager,fireStateChanged(),protected void,Notifies all listeners that have registered interest for notification on this event type.
MenuSelectionManager,getChangeListeners(),ChangeListener[],Returns an array of all the ChangeListeners added to this MenuSelectionManager with addChangeListener().
MenuSelectionManager,getSelectedPath(),MenuElement[],Returns the path to the currently selected menu item
MenuSelectionManager,isComponentPartOfCurrentMenu(Component c),boolean,Return true if c is part of the currently used menu
MenuSelectionManager,processKeyEvent(KeyEvent e),void,"When a MenuElement receives an event from a KeyListener, it should never process the event directly."
MenuSelectionManager,processMouseEvent(MouseEvent event),void,"When a MenuElement receives an event from a MouseListener, it should never process the event directly."
MenuSelectionManager,removeChangeListener(ChangeListener l),void,Removes a ChangeListener from the button.
MenuSelectionManager,setSelectedPath(MenuElement[] path),void,Changes the selection in the menu hierarchy.
OverlayLayout,"addLayoutComponent(Component comp, Object constraints)",void,"Adds the specified component to the layout, using the specified constraint object."
OverlayLayout,"addLayoutComponent(String name, Component comp)",void,Adds the specified component to the layout.
OverlayLayout,getLayoutAlignmentX(Container target),float,Returns the alignment along the x axis for the container.
OverlayLayout,getLayoutAlignmentY(Container target),float,Returns the alignment along the y axis for the container.
OverlayLayout,getTarget(),Container,Returns the container that uses this layout manager.
OverlayLayout,invalidateLayout(Container target),void,"Indicates a child has changed its layout related information, which causes any cached calculations to be flushed."
OverlayLayout,layoutContainer(Container target),void,Called by the AWT when the specified container needs to be laid out.
OverlayLayout,maximumLayoutSize(Container target),Dimension,Returns the maximum dimensions needed to lay out the components contained in the specified target container.
OverlayLayout,minimumLayoutSize(Container target),Dimension,Returns the minimum dimensions needed to lay out the components contained in the specified target container.
OverlayLayout,preferredLayoutSize(Container target),Dimension,Returns the preferred dimensions for this layout given the components in the specified target container.
OverlayLayout,removeLayoutComponent(Component comp),void,Removes the specified component from the layout.
Popup,hide(),void,Hides and disposes of the Popup.
Popup,show(),void,Makes the Popup visible.
PopupFactory,"getPopup(Component owner, Component contents, int x, int y)",Popup,Creates a Popup for the Component owner containing the Component contents.
PopupFactory,getSharedInstance(),static PopupFactory,Returns the shared PopupFactory which can be used to obtain Popups.
PopupFactory,setSharedInstance(PopupFactory factory),static void,Sets the PopupFactory that will be used to obtain Popups.
ProgressMonitor,close(),void,Indicate that the operation is complete.
ProgressMonitor,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext for the ProgressMonitor
ProgressMonitor,getMaximum(),int,Returns the maximum value -- the higher end of the progress value.
ProgressMonitor,getMillisToDecideToPopup(),int,Returns the amount of time this object waits before deciding whether or not to popup a progress monitor.
ProgressMonitor,getMillisToPopup(),int,Returns the amount of time it will take for the popup to appear.
ProgressMonitor,getMinimum(),int,Returns the minimum value -- the lower end of the progress value.
ProgressMonitor,getNote(),String,Specifies the additional note that is displayed along with the progress message.
ProgressMonitor,isCanceled(),boolean,Returns true if the user hits the Cancel button in the progress dialog.
ProgressMonitor,setMaximum(int m),void,Specifies the maximum value.
ProgressMonitor,setMillisToDecideToPopup(int millisToDecideToPopup),void,Specifies the amount of time to wait before deciding whether or not to popup a progress monitor.
ProgressMonitor,setMillisToPopup(int millisToPopup),void,Specifies the amount of time it will take for the popup to appear.
ProgressMonitor,setMinimum(int m),void,Specifies the minimum value.
ProgressMonitor,setNote(String note),void,Specifies the additional note that is displayed along with the progress message.
ProgressMonitor,setProgress(int nv),void,Indicate the progress of the operation being monitored.
ProgressMonitorInputStream,close(),void,Overrides FilterInputStream.close to close the progress monitor as well as the stream.
ProgressMonitorInputStream,getProgressMonitor(),ProgressMonitor,Get the ProgressMonitor object being used by this stream.
ProgressMonitorInputStream,read(),int,Overrides FilterInputStream.read to update the progress monitor after the read.
ProgressMonitorInputStream,read(byte[] b),int,Overrides FilterInputStream.read to update the progress monitor after the read.
ProgressMonitorInputStream,"read(byte[] b, int off, int len)",int,Overrides FilterInputStream.read to update the progress monitor after the read.
ProgressMonitorInputStream,reset(),void,Overrides FilterInputStream.reset to reset the progress monitor as well as the stream.
ProgressMonitorInputStream,skip(long n),long,Overrides FilterInputStream.skip to update the progress monitor after the skip.
RepaintManager,"addDirtyRegion(Applet applet, int x, int y, int w, int h)",void,Adds applet to the list of Components that need to be repainted.
RepaintManager,"addDirtyRegion(JComponent c, int x, int y, int w, int h)",void,Add a component in the list of components that should be refreshed.
RepaintManager,"addDirtyRegion(Window window, int x, int y, int w, int h)",void,Adds window to the list of Components that need to be repainted.
RepaintManager,addInvalidComponent(JComponent invalidComponent),void,Mark the component as in need of layout and queue a runnable for the event dispatching thread that will validate the components first isValidateRoot() ancestor.
RepaintManager,currentManager(Component c),static RepaintManager,Return the RepaintManager for the calling thread given a Component.
RepaintManager,currentManager(JComponent c),static RepaintManager,Return the RepaintManager for the calling thread given a JComponent.
RepaintManager,getDirtyRegion(JComponent aComponent),Rectangle,Return the current dirty region for a component.
RepaintManager,getDoubleBufferMaximumSize(),Dimension,Returns the maximum double buffer size.
RepaintManager,"getOffscreenBuffer(Component c, int proposedWidth, int proposedHeight)",Image,Return the offscreen buffer that should be used as a double buffer with the component c.
RepaintManager,"getVolatileOffscreenBuffer(Component c, int proposedWidth, int proposedHeight)",Image,Return a volatile offscreen buffer that should be used as a double buffer with the specified component c.
RepaintManager,isCompletelyDirty(JComponent aComponent),boolean,Convenience method that returns true if aComponent will be completely painted during the next paintDirtyRegions().
RepaintManager,isDoubleBufferingEnabled(),boolean,Returns true if this RepaintManager is double buffered.
RepaintManager,markCompletelyClean(JComponent aComponent),void,Mark a component completely clean.
RepaintManager,markCompletelyDirty(JComponent aComponent),void,Mark a component completely dirty.
RepaintManager,paintDirtyRegions(),void,Paint all of the components that have been marked dirty.
RepaintManager,removeInvalidComponent(JComponent component),void,Remove a component from the list of invalid components.
RepaintManager,setCurrentManager(RepaintManager aRepaintManager),static void,Set the RepaintManager that should be used for the calling thread.
RepaintManager,setDoubleBufferingEnabled(boolean aFlag),void,Enables or disables double buffering in this RepaintManager.
RepaintManager,setDoubleBufferMaximumSize(Dimension d),void,Set the maximum double buffer size.
RepaintManager,toString(),String,Returns a string that displays and identifies this object's properties.
RepaintManager,validateInvalidComponents(),void,Validate all of the components that have been marked invalid.
RowFilter,"andFilter(Iterable<? extends RowFilter<? super M,? super I>> filters)","static <M,I> RowFilter<M,I>",Returns a RowFilter that includes entries if all of the supplied filters include the entry.
RowFilter,"dateFilter(RowFilter.ComparisonType type, Date date, int... indices)","static <M,I> RowFilter<M,I>",Returns a RowFilter that includes entries that have at least one Date value meeting the specified criteria.
RowFilter,"include(RowFilter.Entry<? extends M,? extends I> entry)",abstract boolean,Returns true if the specified entry should be shown; returns false if the entry should be hidden.
RowFilter,"notFilter(RowFilter<M,I> filter)","static <M,I> RowFilter<M,I>",Returns a RowFilter that includes entries if the supplied filter does not include the entry.
RowFilter,"numberFilter(RowFilter.ComparisonType type, Number number, int... indices)","static <M,I> RowFilter<M,I>",Returns a RowFilter that includes entries that have at least one Number value meeting the specified criteria.
RowFilter,"orFilter(Iterable<? extends RowFilter<? super M,? super I>> filters)","static <M,I> RowFilter<M,I>",Returns a RowFilter that includes entries if any of the supplied filters includes the entry.
RowFilter,"regexFilter(String regex, int... indices)","static <M,I> RowFilter<M,I>",Returns a RowFilter that uses a regular expression to determine which entries to include.
RowFilter.Entry,getIdentifier(),abstract I,Returns the identifer (in the model) of the entry.
RowFilter.Entry,getModel(),abstract M,Returns the underlying model.
RowFilter.Entry,getStringValue(int index),String,Returns the string value at the specified index.
RowFilter.Entry,getValue(int index),abstract Object,Returns the value at the specified index.
RowFilter.Entry,getValueCount(),abstract int,Returns the number of values in the entry.
RowSorter,addRowSorterListener(RowSorterListener l),void,Adds a RowSorterListener to receive notification about this RowSorter.
RowSorter,allRowsChanged(),abstract void,Invoked when the contents of the underlying model have completely changed.
RowSorter,convertRowIndexToModel(int index),abstract int,Returns the location of index in terms of the underlying model.
RowSorter,convertRowIndexToView(int index),abstract int,Returns the location of index in terms of the view.
RowSorter,fireRowSorterChanged(int[] lastRowIndexToModel),protected void,Notifies listener that the mapping has changed.
RowSorter,fireSortOrderChanged(),protected void,Notifies listener that the sort order has changed.
RowSorter,getModel(),abstract M,Returns the underlying model.
RowSorter,getModelRowCount(),abstract int,Returns the number of rows in the underlying model.
RowSorter,getSortKeys(),abstract List<? extends RowSorter.SortKey>,Returns the current sort keys.
RowSorter,getViewRowCount(),abstract int,Returns the number of rows in the view.
RowSorter,modelStructureChanged(),abstract void,Invoked when the underlying model structure has completely changed.
RowSorter,removeRowSorterListener(RowSorterListener l),void,Removes a RowSorterListener.
RowSorter,"rowsDeleted(int firstRow, int endRow)",abstract void,Invoked when rows have been deleted from the underlying model in the specified range (inclusive).
RowSorter,"rowsInserted(int firstRow, int endRow)",abstract void,Invoked when rows have been inserted into the underlying model in the specified range (inclusive).
RowSorter,"rowsUpdated(int firstRow, int endRow)",abstract void,Invoked when rows have been changed in the underlying model between the specified range (inclusive).
RowSorter,"rowsUpdated(int firstRow, int endRow, int column)",abstract void,Invoked when the column in the rows have been updated in the underlying model between the specified range.
RowSorter,setSortKeys(List<? extends RowSorter.SortKey> keys),abstract void,Sets the current sort keys.
RowSorter,toggleSortOrder(int column),abstract void,Reverses the sort order of the specified column.
RowSorter.SortKey,equals(Object o),boolean,Returns true if this object equals the specified object.
RowSorter.SortKey,getColumn(),int,Returns the index of the column.
RowSorter.SortKey,getSortOrder(),SortOrder,Returns the sort order of the column.
RowSorter.SortKey,hashCode(),int,Returns the hash code for this SortKey.
ScrollPaneLayout,"addLayoutComponent(String s, Component c)",void,Adds the specified component to the layout.
ScrollPaneLayout,"addSingletonComponent(Component oldC, Component newC)",protected Component,Removes an existing component.
ScrollPaneLayout,getColumnHeader(),JViewport,Returns the JViewport object that is the column header.
ScrollPaneLayout,getCorner(String key),Component,Returns the Component at the specified corner.
ScrollPaneLayout,getHorizontalScrollBar(),JScrollBar,Returns the JScrollBar object that handles horizontal scrolling.
ScrollPaneLayout,getHorizontalScrollBarPolicy(),int,Returns the horizontal scrollbar-display policy.
ScrollPaneLayout,getRowHeader(),JViewport,Returns the JViewport object that is the row header.
ScrollPaneLayout,getVerticalScrollBar(),JScrollBar,Returns the JScrollBar object that handles vertical scrolling.
ScrollPaneLayout,getVerticalScrollBarPolicy(),int,Returns the vertical scrollbar-display policy.
ScrollPaneLayout,getViewport(),JViewport,Returns the JViewport object that displays the scrollable contents.
ScrollPaneLayout,getViewportBorderBounds(JScrollPane scrollpane),Rectangle,Deprecated. As of JDK version Swing1.1 replaced by JScrollPane.getViewportBorderBounds().
ScrollPaneLayout,layoutContainer(Container parent),void,Lays out the scrollpane.
ScrollPaneLayout,minimumLayoutSize(Container parent),Dimension,"The minimum size of a ScrollPane is the size of the insets plus minimum size of the viewport, plus the scrollpane's viewportBorder insets, plus the minimum size of the visible headers, plus the minimum size of the scrollbars whose displayPolicy isn't NEVER."
ScrollPaneLayout,preferredLayoutSize(Container parent),Dimension,"The preferred size of a ScrollPane is the size of the insets, plus the preferred size of the viewport, plus the preferred size of the visible headers, plus the preferred size of the scrollbars that will appear given the current view and the current scrollbar displayPolicies."
ScrollPaneLayout,removeLayoutComponent(Component c),void,Removes the specified component from the layout.
ScrollPaneLayout,setHorizontalScrollBarPolicy(int x),void,Sets the horizontal scrollbar-display policy.
ScrollPaneLayout,setVerticalScrollBarPolicy(int x),void,Sets the vertical scrollbar-display policy.
ScrollPaneLayout,syncWithScrollPane(JScrollPane sp),void,This method is invoked after the ScrollPaneLayout is set as the LayoutManager of a JScrollPane.
SizeRequirements,"adjustSizes(int delta, SizeRequirements[] children)",static int[],Adjust a specified array of sizes by a given amount.
SizeRequirements,"calculateAlignedPositions(int allocated, SizeRequirements total, SizeRequirements[] children, int[] offsets, int[] spans)",static void,Creates a bunch of offset/span pairs specifying how to lay out a set of components with the specified alignments.
SizeRequirements,"calculateAlignedPositions(int allocated, SizeRequirements total, SizeRequirements[] children, int[] offsets, int[] spans, boolean normal)",static void,Creates a set of offset/span pairs specifying how to lay out a set of components with the specified alignments.
SizeRequirements,"calculateTiledPositions(int allocated, SizeRequirements total, SizeRequirements[] children, int[] offsets, int[] spans)",static void,Creates a set of offset/span pairs representing how to lay out a set of components end-to-end.
SizeRequirements,"calculateTiledPositions(int allocated, SizeRequirements total, SizeRequirements[] children, int[] offsets, int[] spans, boolean forward)",static void,Creates a set of offset/span pairs representing how to lay out a set of components end-to-end.
SizeRequirements,getAlignedSizeRequirements(SizeRequirements[] children),static SizeRequirements,Determines the total space necessary to align a set of components.
SizeRequirements,getTiledSizeRequirements(SizeRequirements[] children),static SizeRequirements,Determines the total space necessary to place a set of components end-to-end.
SizeRequirements,toString(),String,"Returns a string describing the minimum, preferred, and maximum size requirements, along with the alignment."
SizeSequence,getIndex(int position),int,Returns the index of the entry that corresponds to the specified position.
SizeSequence,getPosition(int index),int,Returns the start position for the specified entry.
SizeSequence,getSize(int index),int,Returns the size of the specified entry.
SizeSequence,getSizes(),int[],Returns the size of all entries.
SizeSequence,"insertEntries(int start, int length, int value)",void,Adds a contiguous group of entries to this SizeSequence.
SizeSequence,"removeEntries(int start, int length)",void,Removes a contiguous group of entries from this SizeSequence.
SizeSequence,"setSize(int index, int size)",void,Sets the size of the specified entry.
SizeSequence,setSizes(int[] sizes),void,"Resets this SizeSequence object, using the data in the sizes argument."
SortingFocusTraversalPolicy,accept(Component aComponent),protected boolean,Determines whether a Component is an acceptable choice as the new focus owner.
SortingFocusTraversalPolicy,getComparator(),protected Comparator<? super Component>,Returns the Comparator which will be used to sort the Components in a focus traversal cycle.
SortingFocusTraversalPolicy,"getComponentAfter(Container aContainer, Component aComponent)",Component,Returns the Component that should receive the focus after aComponent.
SortingFocusTraversalPolicy,"getComponentBefore(Container aContainer, Component aComponent)",Component,Returns the Component that should receive the focus before aComponent.
SortingFocusTraversalPolicy,getDefaultComponent(Container aContainer),Component,Returns the default Component to focus.
SortingFocusTraversalPolicy,getFirstComponent(Container aContainer),Component,Returns the first Component in the traversal cycle.
SortingFocusTraversalPolicy,getImplicitDownCycleTraversal(),boolean,Returns whether this SortingFocusTraversalPolicy transfers focus down- cycle implicitly.
SortingFocusTraversalPolicy,getLastComponent(Container aContainer),Component,Returns the last Component in the traversal cycle.
SortingFocusTraversalPolicy,setComparator(Comparator<? super Component> comparator),protected void,Sets the Comparator which will be used to sort the Components in a focus traversal cycle.
SortingFocusTraversalPolicy,setImplicitDownCycleTraversal(boolean implicitDownCycleTraversal),void,Sets whether this SortingFocusTraversalPolicy transfers focus down-cycle implicitly.
SpinnerDateModel,getCalendarField(),int,Returns the Calendar field that is added to or subtracted from by the nextValue and previousValue methods.
SpinnerDateModel,getDate(),Date,Returns the current element in this sequence of Dates.
SpinnerDateModel,getEnd(),Comparable,Returns the last Date in the sequence.
SpinnerDateModel,getNextValue(),Object,"Returns the next Date in the sequence, or null if the next date is after end."
SpinnerDateModel,getPreviousValue(),Object,"Returns the previous Date in the sequence, or null if the previous date is before start."
SpinnerDateModel,getStart(),Comparable,Returns the first Date in the sequence.
SpinnerDateModel,getValue(),Object,Returns the current element in this sequence of Dates.
SpinnerDateModel,setCalendarField(int calendarField),void,Changes the size of the date value change computed by the nextValue and previousValue methods.
SpinnerDateModel,setEnd(Comparable end),void,Changes the upper limit for Dates in this sequence.
SpinnerDateModel,setStart(Comparable start),void,Changes the lower limit for Dates in this sequence.
SpinnerDateModel,setValue(Object value),void,Sets the current Date for this sequence.
SpinnerListModel,getList(),List<?>,Returns the List that defines the sequence for this model.
SpinnerListModel,getNextValue(),Object,Returns the next legal value of the underlying sequence or null if value is already the last element.
SpinnerListModel,getPreviousValue(),Object,Returns the previous element of the underlying sequence or null if value is already the first element.
SpinnerListModel,getValue(),Object,Returns the current element of the sequence.
SpinnerListModel,setList(List<?> list),void,Changes the list that defines this sequence and resets the index of the models value to zero.
SpinnerListModel,setValue(Object elt),void,Changes the current element of the sequence and notifies ChangeListeners.
SpinnerNumberModel,getMaximum(),Comparable,Returns the last number in the sequence.
SpinnerNumberModel,getMinimum(),Comparable,Returns the first number in this sequence.
SpinnerNumberModel,getNextValue(),Object,Returns the next number in the sequence.
SpinnerNumberModel,getNumber(),Number,Returns the value of the current element of the sequence.
SpinnerNumberModel,getPreviousValue(),Object,Returns the previous number in the sequence.
SpinnerNumberModel,getStepSize(),Number,Returns the size of the value change computed by the getNextValue and getPreviousValue methods.
SpinnerNumberModel,getValue(),Object,Returns the value of the current element of the sequence.
SpinnerNumberModel,setMaximum(Comparable maximum),void,Changes the upper bound for numbers in this sequence.
SpinnerNumberModel,setMinimum(Comparable minimum),void,Changes the lower bound for numbers in this sequence.
SpinnerNumberModel,setStepSize(Number stepSize),void,Changes the size of the value change computed by the getNextValue and getPreviousValue methods.
SpinnerNumberModel,setValue(Object value),void,Sets the current value for this sequence.
Spring,constant(int pref),static Spring,"Returns a strut -- a spring whose minimum, preferred, and maximum values each have the value pref."
Spring,"constant(int min, int pref, int max)",static Spring,"Returns a spring whose minimum, preferred, and maximum values have the values: min, pref, and max respectively."
Spring,getMaximumValue(),abstract int,Returns the maximum value of this Spring.
Spring,getMinimumValue(),abstract int,Returns the minimum value of this Spring.
Spring,getPreferredValue(),abstract int,Returns the preferred value of this Spring.
Spring,getValue(),abstract int,Returns the current value of this Spring.
Spring,height(Component c),static Spring,"Returns a spring whose minimum, preferred, maximum and value properties are defined by the heights of the minimumSize, preferredSize, maximumSize and size properties of the supplied component."
Spring,"max(Spring s1, Spring s2)",static Spring,"Returns max(s1, s2): a spring whose value is always greater than (or equal to) the values of both s1 and s2."
Spring,minus(Spring s),static Spring,Returns -s: a spring running in the opposite direction to s.
Spring,"scale(Spring s, float factor)",static Spring,"Returns a spring whose minimum, preferred, maximum and value properties are each multiples of the properties of the argument spring, s."
Spring,setValue(int value),abstract void,Sets the current value of this Spring to value.
Spring,"sum(Spring s1, Spring s2)",static Spring,Returns s1+s2: a spring representing s1 and s2 in series.
Spring,width(Component c),static Spring,"Returns a spring whose minimum, preferred, maximum and value properties are defined by the widths of the minimumSize, preferredSize, maximumSize and size properties of the supplied component."
SpringLayout,"addLayoutComponent(Component component, Object constraints)",void,"If constraints is an instance of SpringLayout.Constraints, associates the constraints with the specified component."
SpringLayout,"addLayoutComponent(String name, Component c)",void,"Has no effect, since this layout manager does not use a per-component string."
SpringLayout,"getConstraint(String edgeName, Component c)",Spring,Returns the spring controlling the distance between the specified edge of the component and the top or left edge of its parent.
SpringLayout,getConstraints(Component c),SpringLayout.Constraints,Returns the constraints for the specified component.
SpringLayout,getLayoutAlignmentX(Container p),float,Returns 0.5f (centered).
SpringLayout,getLayoutAlignmentY(Container p),float,Returns 0.5f (centered).
SpringLayout,invalidateLayout(Container p),void,"Invalidates the layout, indicating that if the layout manager has cached information it should be discarded."
SpringLayout,layoutContainer(Container parent),void,Lays out the specified container.
SpringLayout,maximumLayoutSize(Container parent),Dimension,"Calculates the maximum size dimensions for the specified container, given the components it contains."
SpringLayout,minimumLayoutSize(Container parent),Dimension,"Calculates the minimum size dimensions for the specified container, given the components it contains."
SpringLayout,preferredLayoutSize(Container parent),Dimension,"Calculates the preferred size dimensions for the specified container, given the components it contains."
SpringLayout,"putConstraint(String e1, Component c1, int pad, String e2, Component c2)",void,"Links edge e1 of component c1 to edge e2 of component c2, with a fixed distance between the edges."
SpringLayout,"putConstraint(String e1, Component c1, Spring s, String e2, Component c2)",void,Links edge e1 of component c1 to edge e2 of component c2.
SpringLayout,removeLayoutComponent(Component c),void,Removes the constraints associated with the specified component.
SpringLayout.Constraints,getConstraint(String edgeName),Spring,"Returns the value of the specified edge, which may be a derived value, or even null."
SpringLayout.Constraints,getHeight(),Spring,Returns the value of the height property.
SpringLayout.Constraints,getWidth(),Spring,Returns the value of the width property.
SpringLayout.Constraints,getX(),Spring,Returns the value of the x property.
SpringLayout.Constraints,getY(),Spring,Returns the value of the y property.
SpringLayout.Constraints,"setConstraint(String edgeName, Spring s)",void,Sets the spring controlling the specified edge.
SpringLayout.Constraints,setHeight(Spring height),void,"Sets the height property, which controls the height of a component."
SpringLayout.Constraints,setWidth(Spring width),void,"Sets the width property, which controls the width of a component."
SpringLayout.Constraints,setX(Spring x),void,"Sets the x property, which controls the x value of a component's location."
SpringLayout.Constraints,setY(Spring y),void,"Sets the y property, which controls the y value of a component's location."
SwingUtilities,"calculateInnerArea(JComponent c, Rectangle r)",static Rectangle,Stores the position and size of the inner painting area of the specified component in r and returns r.
SwingUtilities,"computeDifference(Rectangle rectA, Rectangle rectB)",static Rectangle[],Convenience returning an array of rect representing the regions within rectA that do not overlap with rectB.
SwingUtilities,"computeIntersection(int x, int y, int width, int height, Rectangle dest)",static Rectangle,Convenience to calculate the intersection of two rectangles without allocating a new rectangle.
SwingUtilities,"computeStringWidth(FontMetrics fm, String str)",static int,"Compute the width of the string using a font with the specified ""metrics"" (sizes)."
SwingUtilities,"computeUnion(int x, int y, int width, int height, Rectangle dest)",static Rectangle,Convenience method that calculates the union of two rectangles without allocating a new rectangle.
SwingUtilities,"convertMouseEvent(Component source, MouseEvent sourceEvent, Component destination)",static MouseEvent,Returns a MouseEvent similar to sourceEvent except that its x and y members have been converted to destination's coordinate system.
SwingUtilities,"convertPoint(Component source, int x, int y, Component destination)",static Point,"Convert the point (x,y) in source coordinate system to destination coordinate system."
SwingUtilities,"convertPoint(Component source, Point aPoint, Component destination)",static Point,Convert a aPoint in source coordinate system to destination coordinate system.
SwingUtilities,"convertPointFromScreen(Point p, Component c)",static void,Convert a point from a screen coordinates to a component's coordinate system
SwingUtilities,"convertPointToScreen(Point p, Component c)",static void,Convert a point from a component's coordinate system to screen coordinates.
SwingUtilities,"convertRectangle(Component source, Rectangle aRectangle, Component destination)",static Rectangle,Convert the rectangle aRectangle in source coordinate system to destination coordinate system.
SwingUtilities,findFocusOwner(Component c),static Component,"Deprecated. As of 1.4, replaced by KeyboardFocusManager.getFocusOwner()."
SwingUtilities,"getAccessibleAt(Component c, Point p)",static Accessible,"Returns the Accessible child contained at the local coordinate Point, if one exists."
SwingUtilities,"getAccessibleChild(Component c, int i)",static Accessible,Return the nth Accessible child of the object.
SwingUtilities,getAccessibleChildrenCount(Component c),static int,Returns the number of accessible children in the object.
SwingUtilities,getAccessibleIndexInParent(Component c),static int,Get the index of this object in its accessible parent.
SwingUtilities,getAccessibleStateSet(Component c),static AccessibleStateSet,Get the state of this object.
SwingUtilities,"getAncestorNamed(String name, Component comp)",static Container,Convenience method for searching above comp in the component hierarchy and returns the first object of name it finds.
SwingUtilities,"getAncestorOfClass(Class<?> c, Component comp)",static Container,Convenience method for searching above comp in the component hierarchy and returns the first object of class c it finds.
SwingUtilities,"getDeepestComponentAt(Component parent, int x, int y)",static Component,"Returns the deepest visible descendent Component of parent that contains the location x, y."
SwingUtilities,getLocalBounds(Component aComponent),static Rectangle,"Return the rectangle (0,0,bounds.width,bounds.height) for the component aComponent"
SwingUtilities,getRoot(Component c),static Component,Returns the root component for the current component tree.
SwingUtilities,getRootPane(Component c),static JRootPane,If c is a JRootPane descendant return its JRootPane ancestor.
SwingUtilities,getUIActionMap(JComponent component),static ActionMap,Returns the ActionMap provided by the UI in component component.
SwingUtilities,"getUIInputMap(JComponent component, int condition)",static InputMap,Returns the InputMap provided by the UI for condition condition in component component.
SwingUtilities,getUnwrappedParent(Component component),static Container,Returns the first ancestor of the component which is not an instance of JLayer.
SwingUtilities,getUnwrappedView(JViewport viewport),static Component,Returns the first JViewport's descendant which is not an instance of JLayer.
SwingUtilities,getWindowAncestor(Component c),static Window,"Returns the first Window ancestor of c, or null if c is not contained inside a Window."
SwingUtilities,invokeAndWait(Runnable doRun),static void,Causes doRun.run() to be executed synchronously on the AWT event dispatching thread.
SwingUtilities,invokeLater(Runnable doRun),static void,Causes doRun.run() to be executed asynchronously on the AWT event dispatching thread.
SwingUtilities,"isDescendingFrom(Component a, Component b)",static boolean,Return true if a component a descends from a component b
SwingUtilities,isEventDispatchThread(),static boolean,Returns true if the current thread is an AWT event dispatching thread.
SwingUtilities,isLeftMouseButton(MouseEvent anEvent),static boolean,Returns true if the mouse event specifies the left mouse button.
SwingUtilities,isMiddleMouseButton(MouseEvent anEvent),static boolean,Returns true if the mouse event specifies the middle mouse button.
SwingUtilities,"isRectangleContainingRectangle(Rectangle a, Rectangle b)",static boolean,Return true if a contains b
SwingUtilities,isRightMouseButton(MouseEvent anEvent),static boolean,Returns true if the mouse event specifies the right mouse button.
SwingUtilities,"layoutCompoundLabel(FontMetrics fm, String text, Icon icon, int verticalAlignment, int horizontalAlignment, int verticalTextPosition, int horizontalTextPosition, Rectangle viewR, Rectangle iconR, Rectangle textR, int textIconGap)",static String,"Compute and return the location of the icons origin, the location of origin of the text baseline, and a possibly clipped version of the compound labels string."
SwingUtilities,"layoutCompoundLabel(JComponent c, FontMetrics fm, String text, Icon icon, int verticalAlignment, int horizontalAlignment, int verticalTextPosition, int horizontalTextPosition, Rectangle viewR, Rectangle iconR, Rectangle textR, int textIconGap)",static String,"Compute and return the location of the icons origin, the location of origin of the text baseline, and a possibly clipped version of the compound labels string."
SwingUtilities,"notifyAction(Action action, KeyStroke ks, KeyEvent event, Object sender, int modifiers)",static boolean,Invokes actionPerformed on action if action is enabled (and non-null).
SwingUtilities,"paintComponent(Graphics g, Component c, Container p, int x, int y, int w, int h)",static void,Paints a component to the specified Graphics.
SwingUtilities,"paintComponent(Graphics g, Component c, Container p, Rectangle r)",static void,Paints a component to the specified Graphics.
SwingUtilities,processKeyBindings(KeyEvent event),static boolean,Process the key bindings for the Component associated with event.
SwingUtilities,"replaceUIActionMap(JComponent component, ActionMap uiActionMap)",static void,Convenience method to change the UI ActionMap for component to uiActionMap.
SwingUtilities,"replaceUIInputMap(JComponent component, int type, InputMap uiInputMap)",static void,Convenience method to change the UI InputMap for component to uiInputMap.
SwingUtilities,updateComponentTreeUI(Component c),static void,"A simple minded look and feel change: ask each node in the tree to updateUI() -- that is, to initialize its UI property with the current look and feel."
SwingUtilities,windowForComponent(Component c),static Window,"Returns the first Window ancestor of c, or null if c is not contained inside a Window."
SwingWorker,addPropertyChangeListener(PropertyChangeListener listener),void,Adds a PropertyChangeListener to the listener list.
SwingWorker,cancel(boolean mayInterruptIfRunning),boolean,Attempts to cancel execution of this task.
SwingWorker,doInBackground(),protected abstract T,"Computes a result, or throws an exception if unable to do so."
SwingWorker,done(),protected void,Executed on the Event Dispatch Thread after the doInBackground method is finished.
SwingWorker,execute(),void,Schedules this SwingWorker for execution on a worker thread.
SwingWorker,"firePropertyChange(String propertyName, Object oldValue, Object newValue)",void,Reports a bound property update to any registered listeners.
SwingWorker,get(),T,"Waits if necessary for the computation to complete, and then retrieves its result."
SwingWorker,"get(long timeout, TimeUnit unit)",T,"Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available."
SwingWorker,getProgress(),int,Returns the progress bound property.
SwingWorker,getPropertyChangeSupport(),PropertyChangeSupport,Returns the PropertyChangeSupport for this SwingWorker.
SwingWorker,getState(),SwingWorker.StateValue,Returns the SwingWorker state bound property.
SwingWorker,isCancelled(),boolean,Returns true if this task was cancelled before it completed normally.
SwingWorker,isDone(),boolean,Returns true if this task completed.
SwingWorker,process(List<V> chunks),protected void,Receives data chunks from the publish method asynchronously on the Event Dispatch Thread.
SwingWorker,publish(V... chunks),protected void,Sends data chunks to the process(java.util.List<V>) method.
SwingWorker,removePropertyChangeListener(PropertyChangeListener listener),void,Removes a PropertyChangeListener from the listener list.
SwingWorker,run(),void,Sets this Future to the result of computation unless it has been cancelled.
SwingWorker,setProgress(int progress),protected void,Sets the progress bound property.
Timer,addActionListener(ActionListener listener),void,Adds an action listener to the Timer.
Timer,fireActionPerformed(ActionEvent e),protected void,Notifies all listeners that have registered interest for notification on this event type.
Timer,getActionCommand(),String,Returns the string that will be delivered as the action command in ActionEvents fired by this timer.
Timer,getActionListeners(),ActionListener[],Returns an array of all the action listeners registered on this timer.
Timer,getDelay(),int,"Returns the delay, in milliseconds, between firings of action events."
Timer,getInitialDelay(),int,Returns the Timer's initial delay.
Timer,getListeners(Class<T> listenerType),<T extends EventListener>T[],Returns an array of all the objects currently registered as FooListeners upon this Timer.
Timer,getLogTimers(),static boolean,Returns true if logging is enabled.
Timer,isCoalesce(),boolean,Returns true if the Timer coalesces multiple pending action events.
Timer,isRepeats(),boolean,Returns true (the default) if the Timer will send an action event to its listeners multiple times.
Timer,isRunning(),boolean,Returns true if the Timer is running.
Timer,removeActionListener(ActionListener listener),void,Removes the specified action listener from the Timer.
Timer,restart(),void,"Restarts the Timer, canceling any pending firings and causing it to fire with its initial delay."
Timer,setActionCommand(String command),void,Sets the string that will be delivered as the action command in ActionEvents fired by this timer.
Timer,setCoalesce(boolean flag),void,Sets whether the Timer coalesces multiple pending ActionEvent firings.
Timer,setDelay(int delay),void,"Sets the Timer's between-event delay, the number of milliseconds between successive action events."
Timer,setInitialDelay(int initialDelay),void,"Sets the Timer's initial delay, the time in milliseconds to wait after the timer is started before firing the first event."
Timer,setLogTimers(boolean flag),static void,Enables or disables the timer log.
Timer,setRepeats(boolean flag),void,"If flag is false, instructs the Timer to send only one action event to its listeners."
Timer,start(),void,"Starts the Timer, causing it to start sending action events to its listeners."
Timer,stop(),void,"Stops the Timer, causing it to stop sending action events to its listeners."
ToolTipManager,getDismissDelay(),int,Returns the dismissal delay value.
ToolTipManager,getInitialDelay(),int,Returns the initial delay value.
ToolTipManager,getReshowDelay(),int,Returns the reshow delay property.
ToolTipManager,isEnabled(),boolean,Returns true if this object is enabled.
ToolTipManager,isLightWeightPopupEnabled(),boolean,"Returns true if lightweight (all-Java) Tooltips are in use, or false if heavyweight (native peer) Tooltips are being used."
ToolTipManager,mouseDragged(MouseEvent event),void,Called when the mouse is pressed and dragged.
ToolTipManager,mouseEntered(MouseEvent event),void,Called when the mouse enters the region of a component.
ToolTipManager,mouseExited(MouseEvent event),void,Called when the mouse exits the region of a component.
ToolTipManager,mouseMoved(MouseEvent event),void,Called when the mouse is moved.
ToolTipManager,mousePressed(MouseEvent event),void,Called when the mouse is pressed.
ToolTipManager,registerComponent(JComponent component),void,Registers a component for tooltip management.
ToolTipManager,setDismissDelay(int milliseconds),void,Specifies the dismissal delay value.
ToolTipManager,setEnabled(boolean flag),void,Enables or disables the tooltip.
ToolTipManager,setInitialDelay(int milliseconds),void,Specifies the initial delay value.
ToolTipManager,setLightWeightPopupEnabled(boolean aFlag),void,"When displaying the JToolTip, the ToolTipManager chooses to use a lightweight JPanel if it fits."
ToolTipManager,setReshowDelay(int milliseconds),void,Used to specify the amount of time before the user has to wait initialDelay milliseconds before a tooltip will be shown.
ToolTipManager,sharedInstance(),static ToolTipManager,Returns a shared ToolTipManager instance.
ToolTipManager,unregisterComponent(JComponent component),void,Removes a component from tooltip control.
TransferHandler,"canImport(JComponent comp, DataFlavor[] transferFlavors)",boolean,Indicates whether a component will accept an import of the given set of data flavors prior to actually attempting to import it.
TransferHandler,canImport(TransferHandler.TransferSupport support),boolean,"This method is called repeatedly during a drag and drop operation to allow the developer to configure properties of, and to return the acceptability of transfers; with a return value of true indicating that the transfer represented by the given TransferSupport (which contains all of the details of the transfer) is acceptable at the current time, and a value of false rejecting the transfer."
TransferHandler,createTransferable(JComponent c),protected Transferable,Creates a Transferable to use as the source for a data transfer.
TransferHandler,"exportAsDrag(JComponent comp, InputEvent e, int action)",void,Causes the Swing drag support to be initiated.
TransferHandler,"exportDone(JComponent source, Transferable data, int action)",protected void,Invoked after data has been exported.
TransferHandler,"exportToClipboard(JComponent comp, Clipboard clip, int action)",void,Causes a transfer from the given component to the given clipboard.
TransferHandler,getCopyAction(),static Action,Returns an Action that performs copy operations to the clipboard.
TransferHandler,getCutAction(),static Action,Returns an Action that performs cut operations to the clipboard.
TransferHandler,getDragImage(),Image,Returns the drag image.
TransferHandler,getDragImageOffset(),Point,Returns an anchor offset for the image to drag.
TransferHandler,getPasteAction(),static Action,Returns an Action that performs paste operations from the clipboard.
TransferHandler,getSourceActions(JComponent c),int,"Returns the type of transfer actions supported by the source; any bitwise-OR combination of COPY, MOVE and LINK."
TransferHandler,getVisualRepresentation(Transferable t),Icon,Returns an object that establishes the look of a transfer.
TransferHandler,"importData(JComponent comp, Transferable t)",boolean,Causes a transfer to a component from a clipboard or a DND drop operation.
TransferHandler,importData(TransferHandler.TransferSupport support),boolean,Causes a transfer to occur from a clipboard or a drag and drop operation.
TransferHandler,setDragImage(Image img),void,Sets the drag image parameter.
TransferHandler,setDragImageOffset(Point p),void,Sets an anchor offset for the image to drag.
TransferHandler.DropLocation,getDropPoint(),Point,"Returns the drop point, representing the mouse's current location within the component."
TransferHandler.DropLocation,toString(),String,Returns a string representation of this drop location.
TransferHandler.TransferSupport,getComponent(),Component,Returns the target component of this transfer.
TransferHandler.TransferSupport,getDataFlavors(),DataFlavor[],Returns the data flavors for this transfer.
TransferHandler.TransferSupport,getDropAction(),int,"Returns the action chosen for the drop, when this TransferSupport represents a drop."
TransferHandler.TransferSupport,getDropLocation(),TransferHandler.DropLocation,"Returns the current (non-null) drop location for the component, when this TransferSupport represents a drop."
TransferHandler.TransferSupport,getSourceDropActions(),int,"Returns the drag source's supported drop actions, when this TransferSupport represents a drop."
TransferHandler.TransferSupport,getTransferable(),Transferable,Returns the Transferable associated with this transfer.
TransferHandler.TransferSupport,getUserDropAction(),int,"Returns the user drop action for the drop, when this TransferSupport represents a drop."
TransferHandler.TransferSupport,isDataFlavorSupported(DataFlavor df),boolean,Returns whether or not the given data flavor is supported.
TransferHandler.TransferSupport,isDrop(),boolean,Returns whether or not this TransferSupport represents a drop operation.
TransferHandler.TransferSupport,setDropAction(int dropAction),void,"Sets the drop action for the transfer - which must represent a drop - to the given action, instead of the default user drop action."
TransferHandler.TransferSupport,setShowDropLocation(boolean showDropLocation),void,Sets whether or not the drop location should be visually indicated for the transfer - which must represent a drop.
UIDefaults,addPropertyChangeListener(PropertyChangeListener listener),void,Adds a PropertyChangeListener to the listener list.
UIDefaults,addResourceBundle(String bundleName),void,Adds a resource bundle to the list of resource bundles that are searched for localized values.
UIDefaults,"firePropertyChange(String propertyName, Object oldValue, Object newValue)",protected void,Support for reporting bound property changes.
UIDefaults,get(Object key),Object,Returns the value for key.
UIDefaults,"get(Object key, Locale l)",Object,Returns the value for key associated with the given locale.
UIDefaults,getBoolean(Object key),boolean,"If the value of key is boolean, return the boolean value, otherwise return false."
UIDefaults,"getBoolean(Object key, Locale l)",boolean,"If the value of key for the given Locale is boolean, return the boolean value, otherwise return false."
UIDefaults,getBorder(Object key),Border,"If the value of key is a Border return it, otherwise return null."
UIDefaults,"getBorder(Object key, Locale l)",Border,"If the value of key for the given Locale is a Border return it, otherwise return null."
UIDefaults,getColor(Object key),Color,"If the value of key is a Color return it, otherwise return null."
UIDefaults,"getColor(Object key, Locale l)",Color,"If the value of key for the given Locale is a Color return it, otherwise return null."
UIDefaults,getDefaultLocale(),Locale,Returns the default locale.
UIDefaults,getDimension(Object key),Dimension,"If the value of key is a Dimension return it, otherwise return null."
UIDefaults,"getDimension(Object key, Locale l)",Dimension,"If the value of key for the given Locale is a Dimension return it, otherwise return null."
UIDefaults,getFont(Object key),Font,"If the value of key is a Font return it, otherwise return null."
UIDefaults,"getFont(Object key, Locale l)",Font,"If the value of key for the given Locale is a Font return it, otherwise return null."
UIDefaults,getIcon(Object key),Icon,"If the value of key is an Icon return it, otherwise return null."
UIDefaults,"getIcon(Object key, Locale l)",Icon,"If the value of key for the given Locale is an Icon return it, otherwise return null."
UIDefaults,getInsets(Object key),Insets,"If the value of key is an Insets return it, otherwise return null."
UIDefaults,"getInsets(Object key, Locale l)",Insets,"If the value of key for the given Locale is an Insets return it, otherwise return null."
UIDefaults,getInt(Object key),int,"If the value of key is an Integer return its integer value, otherwise return 0."
UIDefaults,"getInt(Object key, Locale l)",int,"If the value of key for the given Locale is an Integer return its integer value, otherwise return 0."
UIDefaults,getPropertyChangeListeners(),PropertyChangeListener[],Returns an array of all the PropertyChangeListeners added to this UIDefaults with addPropertyChangeListener().
UIDefaults,getString(Object key),String,"If the value of key is a String return it, otherwise return null."
UIDefaults,"getString(Object key, Locale l)",String,"If the value of key for the given Locale is a String return it, otherwise return null."
UIDefaults,getUI(JComponent target),ComponentUI,Creates an ComponentUI implementation for the specified component.
UIDefaults,getUIClass(String uiClassID),Class<? extends ComponentUI>,Returns the L&F class that renders this component.
UIDefaults,"getUIClass(String uiClassID, ClassLoader uiClassLoader)",Class<? extends ComponentUI>,The value of get(uidClassID) must be the String name of a class that implements the corresponding ComponentUI class.
UIDefaults,getUIError(String msg),protected void,"If getUI() fails for any reason, it calls this method before returning null."
UIDefaults,"put(Object key, Object value)",Object,Sets the value of key to value for all locales.
UIDefaults,putDefaults(Object[] keyValueList),void,Puts all of the key/value pairs in the database and unconditionally generates one PropertyChangeEvent.
UIDefaults,removePropertyChangeListener(PropertyChangeListener listener),void,Removes a PropertyChangeListener from the listener list.
UIDefaults,removeResourceBundle(String bundleName),void,Removes a resource bundle from the list of resource bundles that are searched for localized defaults.
UIDefaults,setDefaultLocale(Locale l),void,Sets the default locale.
UIDefaults.LazyInputMap,createValue(UIDefaults table),Object,Creates an InputMap with the bindings that are passed in.
UIDefaults.ProxyLazyValue,createValue(UIDefaults table),Object,Creates the value retrieved from the UIDefaults table.
UIManager,addAuxiliaryLookAndFeel(LookAndFeel laf),static void,Adds a LookAndFeel to the list of auxiliary look and feels.
UIManager,addPropertyChangeListener(PropertyChangeListener listener),static void,Adds a PropertyChangeListener to the listener list.
UIManager,get(Object key),static Object,Returns an object from the defaults.
UIManager,"get(Object key, Locale l)",static Object,Returns an object from the defaults that is appropriate for the given locale.
UIManager,getAuxiliaryLookAndFeels(),static LookAndFeel[],Returns the list of auxiliary look and feels (can be null).
UIManager,getBoolean(Object key),static boolean,Returns a boolean from the defaults which is associated with the key value.
UIManager,"getBoolean(Object key, Locale l)",static boolean,Returns a boolean from the defaults which is associated with the key value and the given Locale.
UIManager,getBorder(Object key),static Border,Returns a border from the defaults.
UIManager,"getBorder(Object key, Locale l)",static Border,Returns a border from the defaults that is appropriate for the given locale.
UIManager,getColor(Object key),static Color,Returns a color from the defaults.
UIManager,"getColor(Object key, Locale l)",static Color,Returns a color from the defaults that is appropriate for the given locale.
UIManager,getCrossPlatformLookAndFeelClassName(),static String,Returns the name of the LookAndFeel class that implements the default cross platform look and feel -- the Java Look and Feel (JLF).
UIManager,getDefaults(),static UIDefaults,Returns the defaults.
UIManager,getDimension(Object key),static Dimension,Returns a dimension from the defaults.
UIManager,"getDimension(Object key, Locale l)",static Dimension,Returns a dimension from the defaults that is appropriate for the given locale.
UIManager,getFont(Object key),static Font,Returns a font from the defaults.
UIManager,"getFont(Object key, Locale l)",static Font,Returns a font from the defaults that is appropriate for the given locale.
UIManager,getIcon(Object key),static Icon,Returns an Icon from the defaults.
UIManager,"getIcon(Object key, Locale l)",static Icon,Returns an Icon from the defaults that is appropriate for the given locale.
UIManager,getInsets(Object key),static Insets,Returns an Insets object from the defaults.
UIManager,"getInsets(Object key, Locale l)",static Insets,Returns an Insets object from the defaults that is appropriate for the given locale.
UIManager,getInstalledLookAndFeels(),static UIManager.LookAndFeelInfo[],Returns an array of LookAndFeelInfos representing the LookAndFeel implementations currently available.
UIManager,getInt(Object key),static int,Returns an integer from the defaults.
UIManager,"getInt(Object key, Locale l)",static int,Returns an integer from the defaults that is appropriate for the given locale.
UIManager,getLookAndFeel(),static LookAndFeel,Returns the current look and feel or null.
UIManager,getLookAndFeelDefaults(),static UIDefaults,"Returns the UIDefaults from the current look and feel, that were obtained at the time the look and feel was installed."
UIManager,getPropertyChangeListeners(),static PropertyChangeListener[],Returns an array of all the PropertyChangeListeners added to this UIManager with addPropertyChangeListener().
UIManager,getString(Object key),static String,Returns a string from the defaults.
UIManager,"getString(Object key, Locale l)",static String,Returns a string from the defaults that is appropriate for the given locale.
UIManager,getSystemLookAndFeelClassName(),static String,"Returns the name of the LookAndFeel class that implements the native system look and feel if there is one, otherwise the name of the default cross platform LookAndFeel class."
UIManager,getUI(JComponent target),static ComponentUI,Returns the appropriate ComponentUI implementation for target.
UIManager,"installLookAndFeel(String name, String className)",static void,Adds the specified look and feel to the set of available look and feels.
UIManager,installLookAndFeel(UIManager.LookAndFeelInfo info),static void,Adds the specified look and feel to the set of available look and feels.
UIManager,"put(Object key, Object value)",static Object,Stores an object in the developer defaults.
UIManager,removeAuxiliaryLookAndFeel(LookAndFeel laf),static boolean,Removes a LookAndFeel from the list of auxiliary look and feels.
UIManager,removePropertyChangeListener(PropertyChangeListener listener),static void,Removes a PropertyChangeListener from the listener list.
UIManager,setInstalledLookAndFeels(UIManager.LookAndFeelInfo[] infos),static void,Sets the set of available look and feels.
UIManager,setLookAndFeel(LookAndFeel newLookAndFeel),static void,Sets the current look and feel to newLookAndFeel.
UIManager,setLookAndFeel(String className),static void,"Loads the LookAndFeel specified by the given class name, using the current thread's context class loader, and passes it to setLookAndFeel(LookAndFeel)."
UIManager.LookAndFeelInfo,getClassName(),String,Returns the name of the class that implements this look and feel.
UIManager.LookAndFeelInfo,getName(),String,Returns the name of the look and feel in a form suitable for a menu or other presentation
UIManager.LookAndFeelInfo,toString(),String,Returns a string that displays and identifies this object's properties.
ViewportLayout,"addLayoutComponent(String name, Component c)",void,Adds the specified component to the layout.
ViewportLayout,layoutContainer(Container parent),void,Called by the AWT when the specified container needs to be laid out.
ViewportLayout,minimumLayoutSize(Container parent),Dimension,Returns the minimum dimensions needed to layout the components contained in the specified target container.
ViewportLayout,preferredLayoutSize(Container parent),Dimension,Returns the preferred dimensions for this layout given the components in the specified target container.
ViewportLayout,removeLayoutComponent(Component c),void,Removes the specified component from the layout.
