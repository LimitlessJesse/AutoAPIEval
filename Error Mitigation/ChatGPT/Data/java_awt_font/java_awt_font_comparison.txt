Sample: 0 FontRenderContext
----------------------------------------------------------------
1. `FontRenderContext(AffineTransform tx, boolean isAntiAliased, boolean usesFractionalMetrics)`: This constructor creates a new FontRenderContext object with the specified transform, anti-aliasing, and fractional metrics settings.
   
2. `boolean isAntiAliased()`: This method returns whether or not anti-aliasing is used for text rendering in this FontRenderContext.

3. `boolean usesFractionalMetrics()`: This method returns whether or not fractional metrics are used for text rendering in this FontRenderContext.

4. `AffineTransform getTransform()`: This method returns the transform associated with this FontRenderContext.

5. `Object getAntiAliasingHint()`: This method returns the hint that specifies the anti-aliasing rendering mode for text in this FontRenderContext.
================================================================

Sample: 1 GlyphJustificationInfo
----------------------------------------------------------------
1. `float getWeight()`: This method returns the weight of the glyph justification information.
2. `float getGrowAbsorb()`: This method returns the grow absorb value of the glyph justification information.
3. `float getGrowPriority()`: This method returns the grow priority value of the glyph justification information.
4. `float getShrinkAbsorb()`: This method returns the shrink absorb value of the glyph justification information.
5. `float getShrinkPriority()`: This method returns the shrink priority value of the glyph justification information.
================================================================

Sample: 2 GlyphMetrics
----------------------------------------------------------------
1. `float getAdvance()`: This method returns the advance width of the glyph.
2. `float getLSB()`: This method returns the left side bearing of the glyph.
3. `float getRSB()`: This method returns the right side bearing of the glyph.
4. `float getBounds2D()`: This method returns the bounds of the glyph as a Rectangle2D.
5. `boolean isStandardWidth()`: This method returns true if the glyph is a standard width.
================================================================

Sample: 3 GlyphVector
----------------------------------------------------------------
1. `Shape getGlyphLogicalBounds(int glyphIndex)`: This method returns a Shape that is the logical bounds of the specified glyph.
2. `Rectangle getGlyphPixelBounds(int glyphIndex, FontRenderContext renderContext, float x, float y)`: This method returns a Rectangle that is the pixel bounds of the specified glyph.
3. `Point2D getGlyphPosition(int glyphIndex)`: This method returns a Point2D that is the position of the specified glyph.
4. `void setGlyphPosition(int glyphIndex, Point2D newPos)`: This method sets the position of the specified glyph to the specified Point2D.
5. `void setGlyphTransform(int glyphIndex, AffineTransform newTX)`: This method sets the transform of the specified glyph to the specified AffineTransform.
================================================================

Sample: 4 GraphicAttribute
----------------------------------------------------------------
1. `Rectangle2D getBounds()`: This method returns the bounds of the GraphicAttribute.
2. `int getAlignment()`: This method returns the alignment of the GraphicAttribute.
3. `float getAdvance()`: This method returns the advance of the GraphicAttribute.
4. `boolean equals(Object obj)`: This method checks if the specified object is equal to this GraphicAttribute.
5. `int hashCode()`: This method returns a hash code value for the GraphicAttribute.
================================================================

Sample: 5 ImageGraphicAttribute
----------------------------------------------------------------
1. `ImageGraphicAttribute(Image image, int alignment, float originX, float originY)`: This constructor creates a new ImageGraphicAttribute with the specified image, alignment, originX, and originY.
2. `Image getImage()`: This method returns the image associated with this ImageGraphicAttribute.
3. `int getAlignment()`: This method returns the alignment of the image within the TextLayout.
4. `float getOriginX()`: This method returns the X coordinate of the origin of the image.
5. `float getOriginY()`: This method returns the Y coordinate of the origin of the image.
================================================================

Sample: 6 LayoutPath
----------------------------------------------------------------
1. `void setPathIterator(PathIterator pi)`: Sets the path iterator for this LayoutPath.
2. `PathIterator getPathIterator()`: Returns the path iterator for this LayoutPath.
3. `void pointToPath(Point2D point, Point2D location)`: Maps a point in user space to a location relative to the baseline.
4. `Point2D pathToPoint(Point2D location)`: Maps a location relative to the baseline to a point in user space.
5. `void setAdvance(float advance)`: Sets the advance for this LayoutPath.
================================================================

Sample: 7 LineBreakMeasurer
----------------------------------------------------------------
1. `TextLayout nextLayout(float wrappingWidth)`: This method returns the next layout, which fits within the specified wrapping width.
2. `int getPosition()`: This method returns the current position in the text being measured.
3. `int nextOffset(int offset, int limit, boolean requireNextWord)`: This method returns the next offset in the text, starting from the specified offset and up to the specified limit.
4. `TextLayout nextLayout(float wrappingWidth, int offset, boolean requireNextWord)`: This method returns the next layout, starting from the specified offset and fitting within the specified wrapping width.
5. `void setPosition(int newPosition)`: This method sets the current position in the text being measured to the specified position.
================================================================

Sample: 8 LineMetrics
----------------------------------------------------------------
1. `float getAscent()`: This method returns the ascent of the font.
2. `float getDescent()`: This method returns the descent of the font.
3. `float getHeight()`: This method returns the height of the font.
4. `float getLeading()`: This method returns the leading of the font.
5. `float getStrikethroughOffset()`: This method returns the offset from the baseline to the strikethrough line.
================================================================

Sample: 9 NumericShaper
----------------------------------------------------------------
1. `NumericShaper getContextualShaper(int script)`: This method returns a NumericShaper object for the specified script.
2. `int getRanges()`: This method returns the range of Unicode code points that this NumericShaper object handles.
3. `int shape(char[] text, int start, int count, int context, int flags)`: This method shapes the specified text using the shaper's rules.
4. `int shape(char[] text, int start, int count, int context)`: This method shapes the specified text using the shaper's rules without any additional flags.
5. `int shape(char[] text, int start, int count)`: This method shapes the specified text using the shaper's rules without any additional context or flags.
================================================================

Sample: 10 ShapeGraphicAttribute
----------------------------------------------------------------
1. `ShapeGraphicAttribute(Shape shape, int alignment, boolean stroke, boolean fill)`: This constructor creates a new ShapeGraphicAttribute with the specified shape, alignment, stroke, and fill parameters.
2. `Shape getShape()`: This method returns the shape associated with this ShapeGraphicAttribute.
3. `int getAlignment()`: This method returns the alignment of the shape within the TextLayout.
4. `boolean isStroke()`: This method returns true if the shape is drawn as a stroke, false if it is filled.
5. `boolean isFill()`: This method returns true if the shape is filled, false if it is drawn as a stroke.
================================================================

Sample: 11 TextAttribute
----------------------------------------------------------------
1. `Object clone()`: This method creates a copy of the TextAttribute object.
2. `boolean equals(Object obj)`: This method compares the specified object with this TextAttribute object for equality.
3. `int hashCode()`: This method returns the hash code value for this TextAttribute object.
4. `String toString()`: This method returns a string representation of the TextAttribute object.
5. `static TextAttribute resolve(String name)`: This method returns the TextAttribute object for the specified attribute name.
================================================================

Sample: 12 TextHitInfo
----------------------------------------------------------------
1. `int getInsertionIndex()`: This method returns the insertion index of the TextHitInfo.
2. `boolean isLeadingEdge()`: This method returns true if the TextHitInfo is at the leading edge of the character.
3. `boolean isTrailingEdge()`: This method returns true if the TextHitInfo is at the trailing edge of the character.
4. `TextHitInfo getOtherHit()`: This method returns the TextHitInfo for the other side of the character.
5. `int getCharIndex()`: This method returns the character index of the TextHitInfo.
================================================================

Sample: 13 TextLayout
----------------------------------------------------------------
1. `Rectangle2D getBounds()`: Returns the bounds of this TextLayout.
2. `Shape getOutline(AffineTransform tx)`: Returns the outline of this TextLayout, transformed by the specified AffineTransform.
3. `TextHitInfo hitTestChar(int charIndex)`: Returns a TextHitInfo corresponding to the specified character index.
4. `TextHitInfo hitTestChar(float x, float y)`: Returns a TextHitInfo corresponding to the specified coordinates.
5. `TextLayout getJustifiedLayout(float justificationWidth)`: Returns a new TextLayout with the same characters and attributes as this TextLayout, but with different justification properties.
================================================================

Sample: 14 TextLayout.CaretPolicy
----------------------------------------------------------------
1. `TextHitInfo getStrongCaret(TextHitInfo hit1, TextHitInfo hit2)`: This method returns the strong caret location between two specified TextHitInfo objects.
2. `boolean equals(Object obj)`: This method checks if this CaretPolicy is equal to the specified object.
3. `int hashCode()`: This method returns the hash code value for this CaretPolicy.
4. `String toString()`: This method returns a string representation of this CaretPolicy.
5. `CaretPolicy getStrongCaretPolicy()`: This method returns the strong caret policy.
================================================================

Sample: 15 TextMeasurer
----------------------------------------------------------------
1. `TextLayout getLayout(int start, int limit)`: This method returns a TextLayout for the specified range of characters.
2. `float getAdvanceBetween(int start, int limit)`: This method returns the advance width between the specified range of characters.
3. `float getAdvance(char[] chars, int start, int limit)`: This method returns the advance width for the specified range of characters in the given character array.
4. `float getAdvance(char[] chars, int start, int limit, int offset)`: This method returns the advance width for the specified range of characters in the given character array with the specified offset.
5. `float getAdvance(char c)`: This method returns the advance width for the specified character.
================================================================

Sample: 16 TransformAttribute
----------------------------------------------------------------
1. `TransformAttribute(Transform transform)`: This constructor creates a new TransformAttribute with the specified transform.
2. `Transform getTransform()`: This method returns the transform associated with this attribute.
3. `boolean equals(Object rhs)`: This method compares this TransformAttribute to the specified object.
4. `int hashCode()`: This method returns a hash code value for the object.
5. `String toString()`: This method returns a string representation of the object.
================================================================

