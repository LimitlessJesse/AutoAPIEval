Sample: 0 Clipboard
----------------------------------------------------------------
1. `void setContents(Transferable contents, ClipboardOwner owner)`: This method sets the current contents of the clipboard to the specified transferable object with the specified clipboard owner.
2. `Transferable getContents(Object requestor)`: This method returns the current contents of the clipboard as a transferable object for the specified requestor.
3. `void addFlavorListener(FlavorListener listener)`: This method adds a flavor listener to listen for changes in the available data flavors on the clipboard.
4. `void removeFlavorListener(FlavorListener listener)`: This method removes a flavor listener from listening for changes in the available data flavors on the clipboard.
5. `boolean isDataFlavorAvailable(DataFlavor flavor)`: This method checks if the specified data flavor is available in the current contents of the clipboard.
================================================================

Sample: 1 DataFlavor
----------------------------------------------------------------
1. `Class<?> getRepresentationClass()`: This method returns the class which objects supported by this DataFlavor will belong.
2. `String getMimeType()`: This method returns the MIME type string for this DataFlavor.
3. `boolean isMimeTypeEqual(String mimeType)`: This method checks if the MIME type passed in is equal to the MIME type of this DataFlavor.
4. `boolean isFlavorSerializedObjectType()`: This method checks if the representation class is of type java.io.InputStream.
5. `boolean isMimeTypeSerializedObject()`: This method checks if the MIME type is equal to "application/x-java-serialized-object".
================================================================

Sample: 2 FlavorEvent
----------------------------------------------------------------
1. `DataFlavor[] getChangedDataFlavors()`: This method returns an array of DataFlavors that have changed in the Clipboard.
2. `boolean isConsumed()`: This method returns a boolean value indicating whether the FlavorEvent has been consumed.
3. `FlavorListener[] getListeners()`: This method returns an array of FlavorListeners registered to receive FlavorEvents from the event source.
4. `void consume()`: This method marks the FlavorEvent as consumed, preventing it from being processed further by other listeners.
5. `void setSource(Object newSource)`: This method sets the new source of the FlavorEvent.
================================================================

Sample: 3 StringSelection
----------------------------------------------------------------
1. `String getTransferDataFlavors()`: This method returns an array of DataFlavor objects indicating the flavors the data can be provided in.
2. `boolean isDataFlavorSupported(DataFlavor flavor)`: This method returns whether or not the specified data flavor is supported for this object.
3. `void setString(String data)`: This method sets the string data to be transferred.
4. `String toString()`: This method returns a string representation of the object.
5. `Object getTransferData(DataFlavor flavor)`: This method returns an object which represents the data to be transferred.
================================================================

Sample: 4 SystemFlavorMap
----------------------------------------------------------------
1. `void addFlavorForUnencodedNative(String nat, DataFlavor flav)`: This method adds a mapping from a native format name to a DataFlavor.
2. `void addUnencodedNativeForFlavor(DataFlavor flav, String nat)`: This method adds a mapping from a DataFlavor to a native format name.
3. `void clear():` This method removes all mappings from this SystemFlavorMap.
4. `DataFlavor[] getFlavorsForNative(String nat)`: This method returns an array of DataFlavors that correspond to the specified native format name.
5. `String[] getNativesForFlavor(DataFlavor flav)`: This method returns an array of native format names that correspond to the specified DataFlavor.
================================================================

