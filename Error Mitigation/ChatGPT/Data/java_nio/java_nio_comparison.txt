Sample: 0 Buffer
----------------------------------------------------------------
1. `int capacity()`: Returns the capacity of this buffer.
2. `Buffer clear()`: Clears this buffer. The position is set to zero, the limit is set to the capacity, and the mark is discarded.
3. `Buffer flip()`: Flips this buffer. The limit is set to the current position, then the position is set to zero.
4. `boolean hasRemaining()`: Returns true if there are elements remaining in this buffer, false otherwise.
5. `int remaining()`: Returns the number of elements between the current position and the limit.
================================================================

Sample: 1 ByteBuffer
----------------------------------------------------------------
1. `ByteBuffer allocate(int capacity)`: This method allocates a new byte buffer with the specified capacity.
2. `ByteBuffer wrap(byte[] array)`: This method wraps a byte array into a byte buffer.
3. `ByteBuffer put(byte b)`: This method writes a byte to the buffer at the current position and then increments the position.
4. `byte get()`: This method reads a byte from the buffer at the current position and then increments the position.
5. `ByteBuffer clear()`: This method clears the buffer, resetting the position to zero and the limit to the capacity.
================================================================

Sample: 2 ByteOrder
----------------------------------------------------------------
1. `ByteOrder nativeOrder()`: This method returns the native byte order of the underlying platform.
2. `static ByteOrder BIG_ENDIAN`: This method returns the big-endian byte order.
3. `static ByteOrder LITTLE_ENDIAN`: This method returns the little-endian byte order.
4. `int compareTo(ByteOrder bo)`: This method compares this ByteOrder to another ByteOrder.
5. `String toString()`: This method returns a string representation of this ByteOrder.
================================================================

Sample: 3 CharBuffer
----------------------------------------------------------------
1. `CharBuffer clear()`: This method clears this buffer. The position is set to zero, the limit is set to the capacity, and the mark is discarded.
2. `CharBuffer flip()`: This method flips this buffer. The limit is set to the current position, then the position is set to zero.
3. `CharBuffer rewind()`: This method rewinds this buffer. The position is set to zero and the mark is discarded.
4. `CharBuffer slice()`: This method creates a new buffer that shares this buffer's content. The new buffer's position, limit, capacity, and mark are independent of this buffer.
5. `CharBuffer duplicate()`: This method creates a new buffer that is a duplicate of this buffer. The new buffer's position, limit, capacity, and mark are the same as this buffer.
================================================================

Sample: 4 DoubleBuffer
----------------------------------------------------------------
1. `double get()`: This method retrieves the double at the buffer's current position.
2. `DoubleBuffer put(double d)`: This method puts a double into the buffer at the current position and increments the position.
3. `DoubleBuffer slice()`: This method creates a new double buffer that shares the content of the original buffer.
4. `DoubleBuffer duplicate()`: This method creates a new double buffer that is a duplicate of the original buffer.
5. `DoubleBuffer compact()`: This method compacts the buffer by discarding the bytes before the current position and moving the remaining bytes to the beginning of the buffer.
================================================================

Sample: 5 FloatBuffer
----------------------------------------------------------------
1. `static FloatBuffer allocate(int capacity)`: This method allocates a new float buffer with the specified capacity.
2. `static FloatBuffer wrap(float[] array)`: This method wraps a float array into a buffer.
3. `FloatBuffer put(float f)`: This method puts a float value into the buffer.
4. `float get()`: This method retrieves the float value at the current buffer's position.
5. `FloatBuffer duplicate()`: This method creates a new buffer that shares the content with the original buffer.
================================================================

Sample: 6 IntBuffer
----------------------------------------------------------------
1. `IntBuffer allocate(int capacity)`: This method allocates a new int buffer with the specified capacity.
2. `IntBuffer duplicate()`: This method creates a new int buffer that shares the content of the original buffer.
3. `IntBuffer slice()`: This method creates a new int buffer that shares the content of the original buffer, but with a different position, limit, and capacity.
4. `IntBuffer asReadOnlyBuffer()`: This method creates a new read-only int buffer that shares the content of the original buffer.
5. `IntBuffer compact()`: This method compacts the int buffer by discarding the elements before the current position and moving the remaining elements to the beginning of the buffer.
================================================================

Sample: 7 LongBuffer
----------------------------------------------------------------
1. `static LongBuffer allocate(int capacity)`: This method allocates a new long buffer with the specified capacity.
2. `LongBuffer put(long[] src)`: This method writes the long array into this buffer.
3. `long get()`: This method reads the long at this buffer's current position, and then increments the position.
4. `LongBuffer rewind()`: This method resets this buffer's position to zero.
5. `LongBuffer slice()`: This method creates a new long buffer that shares this buffer's content.
================================================================

Sample: 8 MappedByteBuffer
----------------------------------------------------------------
1. `int capacity()`: Returns the capacity of this buffer.
2. `MappedByteBuffer force()`: Forces any changes made to this buffer's content to be written to the storage device.
3. `MappedByteBuffer load()`: Loads the content of this buffer into physical memory.
4. `MappedByteBuffer slice()`: Creates a new buffer that shares this buffer's content.
5. `MappedByteBuffer duplicate()`: Creates a new buffer that shares this buffer's content but has its own position, limit, and mark.
================================================================

Sample: 9 ShortBuffer
----------------------------------------------------------------
1. `short get()`: This method retrieves the short at the buffer's current position.
2. `ShortBuffer put(short s)`: This method puts a short into the buffer at the current position.
3. `ShortBuffer slice()`: This method creates a new short buffer that shares this buffer's content.
4. `ShortBuffer duplicate()`: This method creates a new short buffer that shares this buffer's content, but with its own position, limit, and mark.
5. `ShortBuffer compact()`: This method compacts the buffer by moving the remaining elements to the beginning of the buffer.
================================================================

