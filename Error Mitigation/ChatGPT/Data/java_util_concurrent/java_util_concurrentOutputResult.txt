Sample: ArrayBlockingQueue_1
----------------------------------------------------------------
stdout:
Element added successfully: true

================================================================

Sample: ArrayBlockingQueue_2
----------------------------------------------------------------
stdout:
Queue: [First, Second]
Head of the queue: First
Updated Queue: [Second]

================================================================

Sample: ArrayBlockingQueue_3
----------------------------------------------------------------
stdout:
Head of the queue: First

================================================================

Sample: ArrayBlockingQueue_4
----------------------------------------------------------------
stdout:
Remaining Capacity: 5
Remaining Capacity after adding 1 element: 4

================================================================

Sample: ArrayBlockingQueue_5
----------------------------------------------------------------
stdout:
Size of the queue: 3

================================================================

Sample: CompletableFuture_2
----------------------------------------------------------------
stdout:
Exception occurred: Something went wrong
Result: 0

================================================================

Sample: CompletableFuture_4
----------------------------------------------------------------
stdout:
Received result: Hello

================================================================

Sample: ConcurrentHashMap_1
----------------------------------------------------------------
stdout:
Value for key 'Two': 2

================================================================

Sample: ConcurrentHashMap_2
----------------------------------------------------------------
stdout:
Value for key 'One': 1
Value for key 'Four': null

================================================================

Sample: ConcurrentHashMap_3
----------------------------------------------------------------
stdout:
Removed value: 2
Map after removal: {One=1, Three=3}

================================================================

Sample: ConcurrentHashMap_4
----------------------------------------------------------------
stdout:
Contains key 'One': true
Contains key 'Three': false

================================================================

Sample: ConcurrentHashMap_KeySetView_4
----------------------------------------------------------------
stdout:
Before clear: [A, B]
After clear: []

================================================================

Sample: ConcurrentHashMap_KeySetView_5
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ConcurrentHashMap_KeySetView_5.java:10: error: cannot find symbol
        Spliterator<String> spliterator = keySetView.spliterator();
        ^
  symbol:   class Spliterator
  location: class ConcurrentHashMap_KeySetView_5
1 error


================================================================

Sample: ConcurrentLinkedDeque_1
----------------------------------------------------------------
stdout:
Element added successfully: true

================================================================

Sample: ConcurrentLinkedDeque_2
----------------------------------------------------------------
stdout:
Deque before poll: [First, Second]
Element polled: First
Deque after poll: [Second]

================================================================

Sample: ConcurrentLinkedDeque_3
----------------------------------------------------------------
stdout:
Head of the deque: First

================================================================

Sample: ConcurrentLinkedDeque_4
----------------------------------------------------------------
stdout:
Deque before removal: [First, Second, Third]
Element 'Second' removed: true
Deque after removal: [First, Third]

================================================================

Sample: ConcurrentLinkedDeque_5
----------------------------------------------------------------
stdout:
true
false

================================================================

Sample: ConcurrentLinkedQueue_1
----------------------------------------------------------------
stdout:
Element added successfully: true

================================================================

Sample: ConcurrentLinkedQueue_2
----------------------------------------------------------------
stdout:
Queue: [First, Second]
Head of the queue: First
Updated Queue: [Second]

================================================================

Sample: ConcurrentLinkedQueue_3
----------------------------------------------------------------
stdout:
Head of the queue: First

================================================================

Sample: ConcurrentLinkedQueue_4
----------------------------------------------------------------
stdout:
Is queue empty? true

================================================================

Sample: ConcurrentLinkedQueue_5
----------------------------------------------------------------
stdout:
Size of the queue: 2

================================================================

Sample: ConcurrentSkipListMap_1
----------------------------------------------------------------
stdout:
Previous value: null
Previous value: null
Previous value: One
Map: {1=One, 2=Two}

================================================================

Sample: ConcurrentSkipListMap_2
----------------------------------------------------------------
stdout:
Map before removal: {1=One, 2=Two}
Removed value: One
Map after removal: {2=Two}

================================================================

Sample: ConcurrentSkipListMap_3
----------------------------------------------------------------
stdout:
Initial map: {1=One, 2=Two}
Replaced value: Two
Updated map: {1=One, 2=New Two}

================================================================

Sample: ConcurrentSkipListMap_4
----------------------------------------------------------------
stdout:
One
Default

================================================================

Sample: ConcurrentSkipListMap_5
----------------------------------------------------------------
stdout:
{1=One, 2=Two}

================================================================

Sample: ConcurrentSkipListSet_1
----------------------------------------------------------------
stdout:
true
false

================================================================

Sample: ConcurrentSkipListSet_2
----------------------------------------------------------------
stdout:
Set before removal: [Hello, World]
Element 'Hello' removed: true
Set after removal: [World]

================================================================

Sample: ConcurrentSkipListSet_3
----------------------------------------------------------------
stdout:
Initial set: [1, 2, 3]
First element removed: 1
Set after removal: [2, 3]

================================================================

Sample: ConcurrentSkipListSet_4
----------------------------------------------------------------
stdout:
Initial set: [1, 2, 3]
Last element removed: 3
Set after removal: [1, 2]

================================================================

Sample: ConcurrentSkipListSet_5
----------------------------------------------------------------
stdout:
Original set: [1, 2, 3]
Descending set: [3, 2, 1]

================================================================

Sample: CopyOnWriteArrayList_1
----------------------------------------------------------------
stdout:
[Hello]

================================================================

Sample: CopyOnWriteArrayList_2
----------------------------------------------------------------
stdout:
List before clear: [Hello]
List after clear: []

================================================================

Sample: CopyOnWriteArrayList_3
----------------------------------------------------------------
stdout:
List before removeAll: [Hello, World]
List after removeAll: [World]
Result: true

================================================================

Sample: CopyOnWriteArrayList_4
----------------------------------------------------------------
stdout:
Original list: [Hello, World]
Element replaced: World
Updated list: [Hello, Java]

================================================================

Sample: CopyOnWriteArrayList_5
----------------------------------------------------------------
stdout:
Hello

================================================================

Sample: CopyOnWriteArraySet_1
----------------------------------------------------------------
stdout:
true
false

================================================================

Sample: CopyOnWriteArraySet_2
----------------------------------------------------------------
stdout:
Set before removal: [Hello, World]
Element 'Hello' removed: true
Set after removal: [World]

================================================================

Sample: CopyOnWriteArraySet_3
----------------------------------------------------------------
stdout:
true

================================================================

Sample: CopyOnWriteArraySet_4
----------------------------------------------------------------
stdout:
Size of set: 2

================================================================

Sample: CopyOnWriteArraySet_5
----------------------------------------------------------------
stdout:
Set before clear: [Hello]
Set after clear: []

================================================================

Sample: CountDownLatch_1
----------------------------------------------------------------
stdout:
Thread is waiting...
Thread has been released

================================================================

Sample: CountDownLatch_2
----------------------------------------------------------------
================================================================

Sample: CountDownLatch_3
----------------------------------------------------------------
stdout:
Current count: 1

================================================================

Sample: CountDownLatch_4
----------------------------------------------------------------
stdout:
Count reached zero: false

================================================================

Sample: CountedCompleter_1
----------------------------------------------------------------
================================================================

Sample: CountedCompleter_3
----------------------------------------------------------------
================================================================

Sample: CountedCompleter_4
----------------------------------------------------------------
================================================================

Sample: CountedCompleter_5
----------------------------------------------------------------
================================================================

Sample: CyclicBarrier_1
----------------------------------------------------------------
stdout:
Number of parties required to trip the barrier: 3

================================================================

Sample: CyclicBarrier_2
----------------------------------------------------------------
timeout: process took too long
================================================================

Sample: CyclicBarrier_3
----------------------------------------------------------------
stderr:
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.CyclicBarrier.dowait(CyclicBarrier.java:259)
	at java.base/java.util.concurrent.CyclicBarrier.await(CyclicBarrier.java:437)
	at CyclicBarrier_3.main(CyclicBarrier_3.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.execute(Main.java:419)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:192)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)

================================================================

Sample: CyclicBarrier_4
----------------------------------------------------------------
stdout:
Is barrier broken? false

================================================================

Sample: CyclicBarrier_5
----------------------------------------------------------------
================================================================

Sample: DelayQueue_1
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/DelayQueue_1.java:5: error: type argument String is not within bounds of type-variable E
        DelayQueue<String> delayQueue = new DelayQueue<>();
                   ^
  where E is a type-variable:
    E extends Delayed declared in class DelayQueue
./Data/java_util_concurrent/javaFiles/DelayQueue_1.java:5: error: incompatible types: cannot infer type arguments for DelayQueue<>
        DelayQueue<String> delayQueue = new DelayQueue<>();
                                                      ^
    reason: inference variable E has incompatible bounds
      equality constraints: String
      lower bounds: Delayed
  where E is a type-variable:
    E extends Delayed declared in class DelayQueue
2 errors


================================================================

Sample: DelayQueue_2
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/DelayQueue_2.java:5: error: type argument String is not within bounds of type-variable E
        DelayQueue<String> delayQueue = new DelayQueue<>();
                   ^
  where E is a type-variable:
    E extends Delayed declared in class DelayQueue
./Data/java_util_concurrent/javaFiles/DelayQueue_2.java:5: error: incompatible types: cannot infer type arguments for DelayQueue<>
        DelayQueue<String> delayQueue = new DelayQueue<>();
                                                      ^
    reason: inference variable E has incompatible bounds
      equality constraints: String
      lower bounds: Delayed
  where E is a type-variable:
    E extends Delayed declared in class DelayQueue
2 errors


================================================================

Sample: DelayQueue_3
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/DelayQueue_3.java:5: error: type argument String is not within bounds of type-variable E
        DelayQueue<String> delayQueue = new DelayQueue<>();
                   ^
  where E is a type-variable:
    E extends Delayed declared in class DelayQueue
./Data/java_util_concurrent/javaFiles/DelayQueue_3.java:5: error: incompatible types: cannot infer type arguments for DelayQueue<>
        DelayQueue<String> delayQueue = new DelayQueue<>();
                                                      ^
    reason: inference variable E has incompatible bounds
      equality constraints: String
      lower bounds: Delayed
  where E is a type-variable:
    E extends Delayed declared in class DelayQueue
2 errors


================================================================

Sample: DelayQueue_4
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/DelayQueue_4.java:6: error: type argument String is not within bounds of type-variable E
        DelayQueue<String> delayQueue = new DelayQueue<>();
                   ^
  where E is a type-variable:
    E extends Delayed declared in class DelayQueue
./Data/java_util_concurrent/javaFiles/DelayQueue_4.java:6: error: incompatible types: cannot infer type arguments for DelayQueue<>
        DelayQueue<String> delayQueue = new DelayQueue<>();
                                                      ^
    reason: inference variable E has incompatible bounds
      equality constraints: String
      lower bounds: Delayed
  where E is a type-variable:
    E extends Delayed declared in class DelayQueue
2 errors


================================================================

Sample: DelayQueue_5
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/DelayQueue_5.java:6: error: type argument String is not within bounds of type-variable E
        DelayQueue<String> delayQueue = new DelayQueue<>();
                   ^
  where E is a type-variable:
    E extends Delayed declared in class DelayQueue
./Data/java_util_concurrent/javaFiles/DelayQueue_5.java:6: error: incompatible types: cannot infer type arguments for DelayQueue<>
        DelayQueue<String> delayQueue = new DelayQueue<>();
                                                      ^
    reason: inference variable E has incompatible bounds
      equality constraints: String
      lower bounds: Delayed
  where E is a type-variable:
    E extends Delayed declared in class DelayQueue
2 errors


================================================================

Sample: Exchanger_1
----------------------------------------------------------------
stdout:
Thread 1 is waiting to exchange data...
Thread 2 is waiting to exchange data...
Thread 2 received: Data from Thread 1
Thread 1 received: Data from Thread 2

================================================================

Sample: Exchanger_2
----------------------------------------------------------------
stderr:
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.Exchanger.exchange(Exchanger.java:627)
	at Exchanger_2.main(Exchanger_2.java:10)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.execute(Main.java:419)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:192)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)

================================================================

Sample: ExecutorCompletionService_1
----------------------------------------------------------------
timeout: process took too long
================================================================

Sample: ExecutorCompletionService_2
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ExecutorCompletionService_2.java:8: error: incompatible types: bad return type in lambda expression
        Future<String> future = completionService.submit(() -> {
                                                         ^
    unexpected return value
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
1 error


================================================================

Sample: ExecutorCompletionService_3
----------------------------------------------------------------
stdout:
Task completed

================================================================

Sample: ExecutorCompletionService_4
----------------------------------------------------------------
timeout: process took too long
================================================================

Sample: ExecutorCompletionService_5
----------------------------------------------------------------
stdout:
Task completed

================================================================

Sample: Executors_1
----------------------------------------------------------------
stdout:
Task 1 executed by thread: pool-1-thread-1
Task 2 executed by thread: pool-1-thread-2

================================================================

Sample: Executors_2
----------------------------------------------------------------
================================================================

Sample: Executors_3
----------------------------------------------------------------
stdout:
Thread factory created: java.util.concurrent.Executors$DefaultThreadFactory@6eceb130

================================================================

Sample: Executors_5
----------------------------------------------------------------
================================================================

Sample: ForkJoinPool_1
----------------------------------------------------------------
================================================================

Sample: ForkJoinPool_2
----------------------------------------------------------------
stdout:
Parallelism level: 20

================================================================

Sample: ForkJoinPool_3
----------------------------------------------------------------
stdout:
Steal Count: 0

================================================================

Sample: ForkJoinPool_4
----------------------------------------------------------------
stdout:
Active Thread Count: 0

================================================================

Sample: ForkJoinPool_5
----------------------------------------------------------------
stdout:
All worker threads are currently idle: true

================================================================

Sample: ForkJoinTask_2
----------------------------------------------------------------
timeout: process took too long
================================================================

Sample: ForkJoinTask_3
----------------------------------------------------------------
stdout:
Task cancelled: true

================================================================

Sample: ForkJoinTask_4
----------------------------------------------------------------
stdout:
Task is done: false

================================================================

Sample: ForkJoinTask_5
----------------------------------------------------------------
stdout:
Task is cancelled: false

================================================================

Sample: ForkJoinWorkerThread_1
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.NullPointerException: Cannot invoke "java.util.concurrent.ForkJoinPool.nextWorkerThreadName()" because "pool" is null
	at java.base/java.util.concurrent.ForkJoinWorkerThread.<init>(ForkJoinWorkerThread.java:74)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.<init>(ForkJoinWorkerThread.java:103)
	at ForkJoinWorkerThread_1$1.<init>(ForkJoinWorkerThread_1.java:6)
	at ForkJoinWorkerThread_1.main(ForkJoinWorkerThread_1.java:6)

================================================================

Sample: ForkJoinWorkerThread_2
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ForkJoinWorkerThread_2.java:17: error: onTermination(Throwable) has protected access in ForkJoinWorkerThread
        workerThread.onTermination(new Exception("Simulated exception"));
                    ^
1 error


================================================================

Sample: ForkJoinWorkerThread_3
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.NullPointerException: Cannot invoke "java.util.concurrent.ForkJoinPool.nextWorkerThreadName()" because "pool" is null
	at java.base/java.util.concurrent.ForkJoinWorkerThread.<init>(ForkJoinWorkerThread.java:74)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.<init>(ForkJoinWorkerThread.java:103)
	at ForkJoinWorkerThread_3$1.<init>(ForkJoinWorkerThread_3.java:6)
	at ForkJoinWorkerThread_3.main(ForkJoinWorkerThread_3.java:6)

================================================================

Sample: ForkJoinWorkerThread_4
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.NullPointerException: Cannot invoke "java.util.concurrent.ForkJoinPool.nextWorkerThreadName()" because "pool" is null
	at java.base/java.util.concurrent.ForkJoinWorkerThread.<init>(ForkJoinWorkerThread.java:74)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.<init>(ForkJoinWorkerThread.java:103)
	at ForkJoinWorkerThread_4$1.<init>(ForkJoinWorkerThread_4.java:5)
	at ForkJoinWorkerThread_4.main(ForkJoinWorkerThread_4.java:5)

================================================================

Sample: FutureTask_1
----------------------------------------------------------------
================================================================

Sample: FutureTask_2
----------------------------------------------------------------
================================================================

Sample: FutureTask_3
----------------------------------------------------------------
stdout:
Task is cancelled: true

================================================================

Sample: FutureTask_4
----------------------------------------------------------------
stdout:
Task is done: false

================================================================

Sample: FutureTask_5
----------------------------------------------------------------
stdout:
Result: Result

================================================================

Sample: LinkedBlockingDeque_1
----------------------------------------------------------------
stdout:
Element added successfully

================================================================

Sample: LinkedBlockingDeque_2
----------------------------------------------------------------
stdout:
Element taken: First

================================================================

Sample: LinkedBlockingDeque_3
----------------------------------------------------------------
stdout:
Offering element 1: true
Offering element 2: true
Offering element 3: true
Offering element 4: true
Offering element 5: true
Offering element 6: false

================================================================

Sample: LinkedBlockingDeque_4
----------------------------------------------------------------
stdout:
Deque before poll: [First, Second]
Element polled: First
Deque after poll: [Second]

================================================================

Sample: LinkedBlockingDeque_5
----------------------------------------------------------------
stdout:
Remaining capacity: 2

================================================================

Sample: LinkedBlockingQueue_1
----------------------------------------------------------------
stdout:
true
true
true
true
true
false

================================================================

Sample: LinkedBlockingQueue_2
----------------------------------------------------------------
stdout:
Queue: [First, Second]
Head of the queue: First
Updated Queue: [Second]

================================================================

Sample: LinkedBlockingQueue_3
----------------------------------------------------------------
stdout:
Head of the queue: First

================================================================

Sample: LinkedBlockingQueue_4
----------------------------------------------------------------
stdout:
Element added to the queue

================================================================

Sample: LinkedBlockingQueue_5
----------------------------------------------------------------
stdout:
Queue before removal: [First, Second, Third]
Element 'Second' removed: true
Queue after removal: [First, Third]

================================================================

Sample: LinkedTransferQueue_1
----------------------------------------------------------------
stdout:
Element transferred: false

================================================================

Sample: LinkedTransferQueue_2
----------------------------------------------------------------
stdout:
Transfer successful: false

================================================================

Sample: LinkedTransferQueue_3
----------------------------------------------------------------
stdout:
Hello

================================================================

Sample: LinkedTransferQueue_4
----------------------------------------------------------------
stdout:
Has waiting consumer: false

================================================================

Sample: LinkedTransferQueue_5
----------------------------------------------------------------
stdout:
Number of waiting consumers: 0

================================================================

Sample: Phaser_1
----------------------------------------------------------------
stdout:
Arrival phase number: 0

================================================================

Sample: Phaser_2
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.IllegalStateException: Attempted arrival of unregistered party for java.util.concurrent.Phaser@4d1b0d2a[phase = 0 parties = 0 arrived = 0]
	at java.base/java.util.concurrent.Phaser.doArrive(Phaser.java:389)
	at java.base/java.util.concurrent.Phaser.arrive(Phaser.java:630)
	at Phaser_2.main(Phaser_2.java:6)

================================================================

Sample: Phaser_3
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.IllegalStateException: Attempted arrival of unregistered party for java.util.concurrent.Phaser@4d1b0d2a[phase = 0 parties = 0 arrived = 0]
	at java.base/java.util.concurrent.Phaser.doArrive(Phaser.java:389)
	at java.base/java.util.concurrent.Phaser.arriveAndDeregister(Phaser.java:650)
	at Phaser_3.main(Phaser_3.java:6)

================================================================

Sample: Phaser_4
----------------------------------------------------------------
timeout: process took too long
================================================================

Sample: Phaser_5
----------------------------------------------------------------
stdout:
Arrival phase number: 0

================================================================

Sample: PriorityBlockingQueue_1
----------------------------------------------------------------
stdout:
[3, 5, 8]

================================================================

Sample: PriorityBlockingQueue_2
----------------------------------------------------------------
stdout:
Head of the queue: 3

================================================================

Sample: PriorityBlockingQueue_3
----------------------------------------------------------------
stdout:
Head of the queue: 3

================================================================

Sample: PriorityBlockingQueue_4
----------------------------------------------------------------
stdout:
Head of the queue: 3

================================================================

Sample: PriorityBlockingQueue_5
----------------------------------------------------------------
stdout:
Size of the PriorityBlockingQueue: 3

================================================================

Sample: RecursiveAction_1
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/RecursiveAction_1.java:3: error: class MyRecursiveAction is public, should be declared in a file named MyRecursiveAction.java
public class MyRecursiveAction extends RecursiveAction {
       ^
1 error


================================================================

Sample: RecursiveTask_1
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/RecursiveTask_1.java:13: error: compute() has protected access in RecursiveTask
        Integer result = task.compute();
                             ^
  where V is a type-variable:
    V extends Object declared in class RecursiveTask
1 error


================================================================

Sample: ScheduledThreadPoolExecutor_1
----------------------------------------------------------------
stdout:
Task executed after delay

================================================================

Sample: ScheduledThreadPoolExecutor_3
----------------------------------------------------------------
timeout: process took too long
================================================================

Sample: ScheduledThreadPoolExecutor_4
----------------------------------------------------------------
stdout:
Executing task...
Executing task...
Executing task...
Executing task...
Executing task...

================================================================

Sample: ScheduledThreadPoolExecutor_5
----------------------------------------------------------------
stdout:
Continue existing periodic tasks after shutdown policy set to true

================================================================

Sample: Semaphore_1
----------------------------------------------------------------
stdout:
Permit acquired successfully

================================================================

Sample: Semaphore_2
----------------------------------------------------------------
stdout:
Semaphore acquired
Semaphore released

================================================================

Sample: Semaphore_3
----------------------------------------------------------------
stdout:
Available permits: 5

================================================================

Sample: Semaphore_4
----------------------------------------------------------------
stdout:
Number of threads waiting to acquire: 0

================================================================

Sample: Semaphore_5
----------------------------------------------------------------
stdout:
Permit acquired: true

================================================================

Sample: SynchronousQueue_1
----------------------------------------------------------------
timeout: process took too long
================================================================

Sample: SynchronousQueue_2
----------------------------------------------------------------
stdout:
Removed element: Element

================================================================

Sample: SynchronousQueue_3
----------------------------------------------------------------
stdout:
Element added to queue: false

================================================================

Sample: SynchronousQueue_4
----------------------------------------------------------------
timeout: process took too long
================================================================

Sample: SynchronousQueue_5
----------------------------------------------------------------
stdout:
Remaining Capacity: 0

================================================================

Sample: ThreadPoolExecutor_1
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ThreadPoolExecutor_1.java:5: error: cannot find symbol
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>());
                                                                       ^
  symbol:   variable TimeUnit
  location: class ThreadPoolExecutor_1
./Data/java_util_concurrent/javaFiles/ThreadPoolExecutor_1.java:5: error: cannot find symbol
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>());
                                                                                                  ^
  symbol:   class LinkedBlockingQueue
  location: class ThreadPoolExecutor_1
2 errors


================================================================

Sample: ThreadPoolExecutor_2
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ThreadPoolExecutor_2.java:6: error: no suitable constructor found for ThreadPoolExecutor(int,int,long,<null>)
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0L, null);
                                      ^
    constructor ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue<Runnable>) is not applicable
      (actual and formal argument lists differ in length)
    constructor ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue<Runnable>,ThreadFactory) is not applicable
      (actual and formal argument lists differ in length)
    constructor ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue<Runnable>,RejectedExecutionHandler) is not applicable
      (actual and formal argument lists differ in length)
    constructor ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue<Runnable>,ThreadFactory,RejectedExecutionHandler) is not applicable
      (actual and formal argument lists differ in length)
1 error


================================================================

Sample: ThreadPoolExecutor_3
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ThreadPoolExecutor_3.java:6: error: cannot find symbol
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>());
                                                                                                  ^
  symbol:   class LinkedBlockingQueue
  location: class ThreadPoolExecutor_3
1 error


================================================================

Sample: ThreadPoolExecutor_4
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ThreadPoolExecutor_4.java:5: error: no suitable constructor found for ThreadPoolExecutor(int,int,long,<null>)
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0L, null);
                                      ^
    constructor ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue<Runnable>) is not applicable
      (actual and formal argument lists differ in length)
    constructor ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue<Runnable>,ThreadFactory) is not applicable
      (actual and formal argument lists differ in length)
    constructor ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue<Runnable>,RejectedExecutionHandler) is not applicable
      (actual and formal argument lists differ in length)
    constructor ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue<Runnable>,ThreadFactory,RejectedExecutionHandler) is not applicable
      (actual and formal argument lists differ in length)
1 error


================================================================

Sample: ThreadPoolExecutor_5
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.NullPointerException
	at java.base/java.util.concurrent.ThreadPoolExecutor.<init>(ThreadPoolExecutor.java:1305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.<init>(ThreadPoolExecutor.java:1189)
	at ThreadPoolExecutor_5.main(ThreadPoolExecutor_5.java:5)

================================================================

Sample: ThreadPoolExecutor_AbortPolicy_1
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ThreadPoolExecutor_AbortPolicy_1.java:6: error: incompatible types: AbortPolicy cannot be converted to BlockingQueue<Runnable>
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0L, null, new ThreadPoolExecutor.AbortPolicy());
                                                                             ^
./Data/java_util_concurrent/javaFiles/ThreadPoolExecutor_AbortPolicy_1.java:9: error: cannot find symbol
            executor.rejectedExecution(() -> System.out.println("Task rejected"), executor);
                    ^
  symbol:   method rejectedExecution(()->System[...]ted"),ThreadPoolExecutor)
  location: variable executor of type ThreadPoolExecutor
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
2 errors


================================================================

Sample: ThreadPoolExecutor_CallerRunsPolicy_1
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ThreadPoolExecutor_CallerRunsPolicy_1.java:7: error: incompatible types: CallerRunsPolicy cannot be converted to BlockingQueue<Runnable>
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new ThreadPoolExecutor.CallerRunsPolicy());
                                                                                              ^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
1 error


================================================================

Sample: ThreadPoolExecutor_CallerRunsPolicy_2
----------------------------------------------------------------
stdout:
Task 1 is running
Task 2 is running
Task 3 is running

================================================================

Sample: ThreadPoolExecutor_CallerRunsPolicy_3
----------------------------------------------------------------
timeout: process took too long
================================================================

Sample: ThreadPoolExecutor_CallerRunsPolicy_4
----------------------------------------------------------------
stdout:
Task is rejected

================================================================

Sample: ThreadPoolExecutor_CallerRunsPolicy_5
----------------------------------------------------------------
stdout:
Task is being executed

================================================================

Sample: ThreadPoolExecutor_DiscardOldestPolicy_1
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ThreadPoolExecutor_DiscardOldestPolicy_1.java:7: error: incompatible types: DiscardOldestPolicy cannot be converted to BlockingQueue<Runnable>
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0, TimeUnit.SECONDS, new ThreadPoolExecutor.DiscardOldestPolicy());
                                                                                        ^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
1 error


================================================================

Sample: ThreadPoolExecutor_DiscardPolicy_1
----------------------------------------------------------------
stdout:
Task 1
Task 2
Task 3

================================================================

