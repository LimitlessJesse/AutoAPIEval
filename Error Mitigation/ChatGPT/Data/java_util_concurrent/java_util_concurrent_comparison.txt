Sample: 0 AbstractExecutorService
----------------------------------------------------------------
1. `void shutdown()`: Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted.
2. `List<Runnable> shutdownNow()`: Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution.
3. `boolean isShutdown()`: Returns true if this executor has been shut down.
4. `boolean isTerminated()`: Returns true if all tasks have completed following shut down.
5. `boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException`: Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first.
================================================================

Sample: 1 ArrayBlockingQueue
----------------------------------------------------------------
1. `boolean offer(E e)`: This method inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if this queue is full.
2. `E poll()`: This method retrieves and removes the head of this queue, or returns null if this queue is empty.
3. `E peek()`: This method retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.
4. `int remainingCapacity()`: This method returns the number of additional elements that this queue can ideally accept without blocking.
5. `int size()`: This method returns the number of elements in this queue.
================================================================

Sample: 2 CompletableFuture
----------------------------------------------------------------
1. `CompletableFuture<T> complete(T value)`: This method completes this CompletableFuture with the given value.
2. `CompletableFuture<T> exceptionally(Function<Throwable, ? extends T> fn)`: This method returns a new CompletableFuture that is completed when this CompletableFuture completes exceptionally, with the result of the given function of the exception triggering this CompletableFuture's completion.
3. `CompletableFuture<T> thenApply(Function<? super T,? extends U> fn)`: This method returns a new CompletableFuture that is completed with the result of applying the given function to the result of this CompletableFuture.
4. `CompletableFuture<Void> thenAccept(Consumer<? super T> action)`: This method returns a new CompletableFuture that is completed when this CompletableFuture completes, with the result of invoking the given action with the result of this CompletableFuture.
5. `CompletableFuture<T> exceptionallyCompose(Function<Throwable, ? extends CompletionStage<T>> fn)`: This method returns a new CompletableFuture that is completed when this CompletableFuture completes exceptionally, with the result of the given function of the exception triggering this CompletableFuture's completion.
================================================================

Sample: 3 ConcurrentHashMap
----------------------------------------------------------------
1. `V put(K key, V value)`: This method associates the specified value with the specified key in this map.
2. `V get(Object key)`: This method returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.
3. `V remove(Object key)`: This method removes the mapping for a key from this map if it is present.
4. `boolean containsKey(Object key)`: This method returns true if this map contains a mapping for the specified key.
5. `Set<K> keySet()`: This method returns a Set view of the keys contained in this map.
================================================================

Sample: 4 ConcurrentHashMap.KeySetView
----------------------------------------------------------------
1. `boolean addKey(K key)`: This method adds the specified key to the KeySetView.
2. `boolean removeKey(Object key)`: This method removes the specified key from the KeySetView.
3. `boolean containsKey(Object key)`: This method returns true if the KeySetView contains the specified key.
4. `void clear()`: This method removes all keys from the KeySetView.
5. `Spliterator<K> spliterator()`: This method creates a Spliterator over the keys in the KeySetView.
================================================================

Sample: 5 ConcurrentLinkedDeque
----------------------------------------------------------------
1. `boolean offer(E e)`: This method inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available.
2. `E poll()`: This method retrieves and removes the head of the deque, or returns null if the deque is empty.
3. `E peek()`: This method retrieves, but does not remove, the head of the deque, or returns null if the deque is empty.
4. `boolean remove(Object o)`: This method removes the first occurrence of the specified element from the deque, if it is present.
5. `boolean contains(Object o)`: This method returns true if the deque contains the specified element.
================================================================

Sample: 6 ConcurrentLinkedQueue
----------------------------------------------------------------
1. `boolean offer(E e)`: This method inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available.
2. `E poll()`: This method retrieves and removes the head of this queue, or returns null if this queue is empty.
3. `E peek()`: This method retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.
4. `boolean isEmpty()`: This method returns true if this queue contains no elements.
5. `int size()`: This method returns the number of elements in this queue.
================================================================

Sample: 7 ConcurrentSkipListMap
----------------------------------------------------------------
1. `V putIfAbsent(K key, V value)`: This method associates the specified value with the specified key in this map if the key is not already associated with a value.
2. `V remove(Object key)`: This method removes the mapping for a key from this map if it is present.
3. `V replace(K key, V value)`: This method replaces the entry for the specified key only if it is currently mapped to some value.
4. `V getOrDefault(Object key, V defaultValue)`: This method returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.
5. `ConcurrentNavigableMap<K,V> subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)`: This method returns a view of the portion of this map whose keys range from fromKey to toKey.
================================================================

Sample: 8 ConcurrentSkipListSet
----------------------------------------------------------------
1. `boolean add(E e)`: This method adds the specified element to this set if it is not already present.
2. `boolean remove(Object o)`: This method removes the specified element from this set if it is present.
3. `E pollFirst()`: This method retrieves and removes the first (lowest) element, or returns null if this set is empty.
4. `E pollLast()`: This method retrieves and removes the last (highest) element, or returns null if this set is empty.
5. `NavigableSet<E> descendingSet()`: This method returns a reverse order view of the elements contained in this set.
================================================================

Sample: 9 CopyOnWriteArrayList
----------------------------------------------------------------
1. `boolean addIfAbsent(E e)`: This method appends the specified element to the end of this list if it is not already present.
2. `void clear()`: This method removes all of the elements from this list.
3. `boolean removeAll(Collection<?> c)`: This method removes from this list all of its elements that are contained in the specified collection.
4. `E set(int index, E element)`: This method replaces the element at the specified position in this list with the specified element.
5. `Object[] toArray()`: This method returns an array containing all of the elements in this list in proper sequence.
================================================================

Sample: 10 CopyOnWriteArraySet
----------------------------------------------------------------
1. `boolean add(E e)`: This method adds the specified element to this set if it is not already present.
2. `boolean remove(Object o)`: This method removes the specified element from this set if it is present.
3. `boolean contains(Object o)`: This method returns true if this set contains the specified element.
4. `int size()`: This method returns the number of elements in this set.
5. `void clear()`: This method removes all of the elements from this set.
================================================================

Sample: 11 CountDownLatch
----------------------------------------------------------------
1. `void await()`: This method causes the current thread to wait until the countDownLatch has counted down to zero.
2. `void countDown()`: This method decrements the count of the countDownLatch, releasing all waiting threads if the count reaches zero.
3. `long getCount()`: This method returns the current count of the countDownLatch.
4. `boolean await(long timeout, TimeUnit unit) throws InterruptedException`: This method causes the current thread to wait until the countDownLatch has counted down to zero, or until the specified timeout expires.
5. `void await(Consumer<Long> consumer)`: This method waits until the countDownLatch has counted down to zero, and then performs the specified action with the final count value.
================================================================

Sample: 12 CountedCompleter
----------------------------------------------------------------
1. `void onCompletion(CountedCompleter<?> caller)`: This method specifies an action to perform when this task is complete and there are no remaining pending actions.
2. `void onExceptionalCompletion(Throwable ex, CountedCompleter<?> caller)`: This method specifies an action to perform when this task completes exceptionally with the given exception and there are no remaining pending actions.
3. `void tryComplete()`: This method attempts to trigger this task's completion, and if successful, invokes onCompletion(CountedCompleter) or onExceptionalCompletion(Throwable, CountedCompleter) as appropriate.
4. `void propagateCompletion()`: This method propagates completion to this task's completer, if one exists, and otherwise decrements its pending count.
5. `void setPendingCount(int count)`: This method sets the pending count to the given value.
================================================================

Sample: 13 CyclicBarrier
----------------------------------------------------------------
1. `int getParties()`: This method returns the number of parties required to trip the barrier.
2. `int await()`: This method causes the current thread to wait until all parties have reached the barrier.
3. `int await(long timeout, TimeUnit unit) throws InterruptedException, BrokenBarrierException, TimeoutException`: This method causes the current thread to wait until all parties have reached the barrier or the specified waiting time elapses.
4. `boolean isBroken()`: This method queries if this barrier is in a broken state.
5. `void reset()`: This method resets the barrier to its initial state.
================================================================

Sample: 14 DelayQueue
----------------------------------------------------------------
1. `boolean offer(E e)`: This method inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available.
2. `E poll()`: This method retrieves and removes the head of this queue, or returns null if this queue is empty.
3. `E peek()`: This method retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.
4. `void put(E e) throws InterruptedException`: This method inserts the specified element into this queue, waiting if necessary for space to become available.
5. `E take() throws InterruptedException`: This method retrieves and removes the head of this queue, waiting if necessary until an element becomes available.
================================================================

Sample: 15 Exchanger
----------------------------------------------------------------
1. `V exchange(V x)`: This method waits for another thread to arrive at this exchange point, and then exchanges the given object for the object provided by the other thread.
2. `V exchange(V x, long timeout, TimeUnit unit) throws InterruptedException, TimeoutException`: This method waits for another thread to arrive at this exchange point, and then exchanges the given object for the object provided by the other thread, with a timeout.
3. `boolean hasWaitingConsumer()`: This method returns true if there are threads waiting to exchange elements.
4. `boolean remove(V x)`: This method removes the specified element from the exchange if it is present.
5. `int getWaitingConsumerCount()`: This method returns the number of threads waiting to exchange elements.
================================================================

Sample: 16 ExecutorCompletionService
----------------------------------------------------------------
1. `Future<V> submit(Callable<V> task)`: This method submits a task for execution and returns a Future representing the pending results of the task.
2. `Future<V> submit(Runnable task, V result)`: This method submits a task for execution and returns a Future representing the pending results of the task with the specified result value.
3. `Future<V> take()`: This method retrieves and removes the Future representing the next completed task, waiting if none are yet present.
4. `Future<V> poll()`: This method retrieves and removes the Future representing the next completed task, or returns null if none are present.
5. `Future<V> poll(long timeout, TimeUnit unit)`: This method retrieves and removes the Future representing the next completed task, waiting if necessary up to the specified timeout.
================================================================

Sample: 17 Executors
----------------------------------------------------------------
1. `ExecutorService newFixedThreadPool(int nThreads)`: This method creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue.
2. `ScheduledExecutorService newScheduledThreadPool(int corePoolSize)`: This method creates a thread pool that can schedule commands to run after a given delay, or to execute periodically.
3. `ThreadFactory defaultThreadFactory()`: This method returns a default thread factory used to create new threads.
4. `Callable<Void> callable(Runnable task)`: This method returns a Callable object that when called, will run the given task and return null.
5. `ExecutorService unconfigurableExecutorService(ExecutorService executor)`: This method returns an ExecutorService that delegates all method calls to the given executor, but prevents the executor from being reconfigured.
================================================================

Sample: 18 ForkJoinPool
----------------------------------------------------------------
1. `void execute(ForkJoinTask<?> task)`: This method arranges for (asynchronous) execution of the given task.
2. `int getParallelism()`: This method returns the targeted parallelism level of this pool.
3. `long getStealCount()`: This method returns an estimate of the total number of tasks stolen from one thread's work queue by another.
4. `int getActiveThreadCount()`: This method returns an estimate of the number of threads that are currently stealing or executing tasks.
5. `boolean isQuiescent()`: This method returns true if all worker threads are currently idle.
================================================================

Sample: 19 ForkJoinTask
----------------------------------------------------------------
1. `void fork()`: This method arranges to asynchronously execute this task in the pool the current task is running in.
2. `V join()`: This method returns the result of the computation when it is done.
3. `boolean cancel(boolean mayInterruptIfRunning)`: This method may cancel the task, and if so, may also arrange for a `RuntimeException` to be thrown by `join`.
4. `boolean isDone()`: This method returns true if this task completed.
5. `boolean isCancelled()`: This method returns true if this task was cancelled before it completed normally.
================================================================

Sample: 20 ForkJoinWorkerThread
----------------------------------------------------------------
1. `void onStart()`: This method is called when the worker thread is started.
2. `void onTermination(Throwable exception)`: This method is called when the worker thread is about to terminate.
3. `ForkJoinPool getPool()`: This method returns the ForkJoinPool that this worker thread belongs to.
4. `int getPoolIndex()`: This method returns the index number of this worker thread in its ForkJoinPool.
5. `void setAsyncMode(boolean async)`: This method sets whether this worker thread should run in async mode.
================================================================

Sample: 21 FutureTask
----------------------------------------------------------------
1. `void run()`: This method initiates the computation.
2. `boolean cancel(boolean mayInterruptIfRunning)`: This method attempts to cancel execution of this task.
3. `boolean isCancelled()`: This method returns true if this task was cancelled before it completed normally.
4. `boolean isDone()`: This method returns true if this task completed.
5. `V get() throws InterruptedException, ExecutionException`: This method waits if necessary for the computation to complete, and then retrieves its result.
================================================================

Sample: 22 LinkedBlockingDeque
----------------------------------------------------------------
1. `void put(E e)`: Inserts the specified element at the end of this deque, waiting if necessary for space to become available.
2. `E take()`: Retrieves and removes the first element of this deque, waiting if necessary until an element becomes available.
3. `boolean offer(E e)`: Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions.
4. `E poll()`: Retrieves and removes the first element of this deque, or returns null if this deque is empty.
5. `int remainingCapacity()`: Returns the number of additional elements that this deque can ideally accept without blocking.
================================================================

Sample: 23 LinkedBlockingQueue
----------------------------------------------------------------
1. `boolean offer(E e)`: This method inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available.
2. `E poll()`: This method retrieves and removes the head of this queue, or returns null if this queue is empty.
3. `E peek()`: This method retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.
4. `void put(E e)`: This method inserts the specified element into this queue, waiting if necessary for space to become available.
5. `boolean remove(Object o)`: This method removes a single instance of the specified element from this queue, if it is present.
================================================================

Sample: 24 LinkedTransferQueue
----------------------------------------------------------------
1. `boolean tryTransfer(E e)`: Attempts to transfer the element to a waiting consumer immediately, returning true if successful.
2. `boolean tryTransfer(E e, long timeout, TimeUnit unit)`: Attempts to transfer the element to a waiting consumer, waiting up to the specified time if necessary.
3. `E take()`: Retrieves and removes the head of the queue, waiting if necessary until an element becomes available.
4. `boolean hasWaitingConsumer()`: Returns true if there is at least one consumer waiting to receive an element via `take()` or timed poll.
5. `int getWaitingConsumerCount()`: Returns an estimate of the number of consumers waiting to receive elements via `take()` or timed poll.
================================================================

Sample: 25 Phaser
----------------------------------------------------------------
1. `int register()`: This method registers a new unarrived party to this phaser.
2. `int arrive()`: This method arrives at this phaser and deregisters from it without waiting for others to arrive.
3. `int arriveAndDeregister()`: This method arrives at this phaser and deregisters from it, returning the arrival phase number.
4. `int arriveAndAwaitAdvance()`: This method arrives at this phaser and awaits others.
5. `int bulkRegister(int parties)`: This method registers the given number of additional parties to this phaser.
================================================================

Sample: 26 PriorityBlockingQueue
----------------------------------------------------------------
1. `boolean offer(E e)`: This method inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available.
2. `E poll()`: This method retrieves and removes the head of this queue, or returns null if this queue is empty.
3. `E peek()`: This method retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.
4. `E take() throws InterruptedException`: This method retrieves and removes the head of this queue, waiting if necessary until an element becomes available.
5. `int size()`: This method returns the number of elements in this queue.
================================================================

Sample: 27 RecursiveAction
----------------------------------------------------------------
1. `void compute()`: This method performs the computation. No parameters.
2. `void invokeAll(ForkJoinTask<?>... tasks)`: This method synchronously executes the given tasks, returning when all are complete. Parameter: array of ForkJoinTasks.
3. `void fork()`: This method arranges to asynchronously execute this task in the pool the current task is running in. No parameters.
4. `void join()`: This method joins this task, without returning a result. No parameters.
5. `boolean tryUnfork()`: This method attempts to unschedule this task for execution. Returns a boolean value.
================================================================

Sample: 28 RecursiveTask
----------------------------------------------------------------
1. `V compute()`: This method computes the result of the task.
2. `void completeExceptionally(Throwable ex)`: This method completes the task exceptionally with the specified exception.
3. `ForkJoinTask<V> fork()`: This method arranges to asynchronously execute this task in the pool the current task is running in.
4. `V join()`: This method returns the result of the computation when it is done.
5. `boolean tryUnfork()`: This method attempts to unschedule this task for execution.
================================================================

Sample: 29 ScheduledThreadPoolExecutor
----------------------------------------------------------------
1. `ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit)`: This method schedules the specified command to run after the given delay.
   
2. `ScheduledFuture<?> schedule(Callable<V> callable, long delay, TimeUnit unit)`: This method schedules the specified callable to run after the given delay.

3. `ScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)`: This method schedules the specified command to run periodically at a fixed rate.

4. `ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit)`: This method schedules the specified command to run periodically with a fixed delay between the end of one execution and the start of the next.

5. `void setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean value)`: This method sets the policy for what happens to existing periodic tasks when the executor is shut down.
================================================================

Sample: 30 Semaphore
----------------------------------------------------------------
1. `void acquire()`: This method acquires a permit from this semaphore, blocking until one is available.
2. `void release()`: This method releases a permit, returning it to the semaphore.
3. `int availablePermits()`: This method returns the current number of permits available in this semaphore.
4. `int getQueueLength()`: This method returns the number of threads waiting to acquire a permit from this semaphore.
5. `boolean tryAcquire()`: This method acquires a permit from this semaphore if one is available, returning true if successful.
================================================================

Sample: 31 SynchronousQueue
----------------------------------------------------------------
1. `void put(E e)`: This method inserts the specified element into this queue, waiting if necessary for space to become available.
2. `E take()`: This method retrieves and removes the head of this queue, waiting if necessary until an element becomes available.
3. `boolean offer(E e)`: This method inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions.
4. `E poll()`: This method retrieves and removes the head of this queue, or returns null if this queue is empty.
5. `int remainingCapacity()`: This method returns the number of additional elements that this queue can ideally accept without blocking.
================================================================

Sample: 32 ThreadLocalRandom
----------------------------------------------------------------
1. int nextInt(int bound): This method returns a pseudorandom int value between zero (inclusive) and the specified bound (exclusive).
2. double nextDouble(): This method returns a pseudorandom double value between 0.0 and 1.0.
3. long nextLong(long bound): This method returns a pseudorandom long value between zero (inclusive) and the specified bound (exclusive).
4. double nextGaussian(): This method returns a pseudorandom double value with a mean of 0.0 and a standard deviation of 1.0.
5. void setSeed(long seed): This method sets the seed of the random number generator for the current thread.
================================================================

Sample: 33 ThreadPoolExecutor
----------------------------------------------------------------
1. `void execute(Runnable command)`: This method executes the given command at some time in the future.
2. `List<Runnable> shutdownNow()`: This method attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were waiting to be executed.
3. `boolean awaitTermination(long timeout, TimeUnit unit)`: This method blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first.
4. `int getActiveCount()`: This method returns the approximate number of threads that are actively executing tasks.
5. `boolean isTerminated()`: This method returns true if all tasks have completed following shut down.
================================================================

Sample: 34 ThreadPoolExecutor.AbortPolicy
----------------------------------------------------------------
1. `void rejectedExecution(Runnable r, ThreadPoolExecutor executor)`: This method is called when a task cannot be executed by a ThreadPoolExecutor.
2. `void onShutdown()`: This method is called when the ThreadPoolExecutor is shutting down.
3. `void terminated()`: This method is called after the last task has been executed and the ThreadPoolExecutor has shut down.
4. `void beforeExecute(Thread t, Runnable r)`: This method is called before a task is executed by a thread in the ThreadPoolExecutor.
5. `void afterExecute(Runnable r, Throwable t)`: This method is called after a task has completed execution in the ThreadPoolExecutor.
================================================================

Sample: 35 ThreadPoolExecutor.CallerRunsPolicy
----------------------------------------------------------------
1. `void rejectedExecution(Runnable r, ThreadPoolExecutor executor)`: This method is called when the Executor has no more threads or queue slots available to execute the given task.
2. `void rejectedExecution(Runnable r, ThreadPoolExecutor executor)`: This method is called when the Executor has no more threads or queue slots available to execute the given task.
3. `void rejectedExecution(Runnable r, ThreadPoolExecutor executor)`: This method is called when the Executor has no more threads or queue slots available to execute the given task.
4. `void rejectedExecution(Runnable r, ThreadPoolExecutor executor)`: This method is called when the Executor has no more threads or queue slots available to execute the given task.
5. `void rejectedExecution(Runnable r, ThreadPoolExecutor executor)`: This method is called when the Executor has no more threads or queue slots available to execute the given task.
================================================================

Sample: 36 ThreadPoolExecutor.DiscardOldestPolicy
----------------------------------------------------------------
1. `void rejectedExecution(Runnable r, ThreadPoolExecutor executor)`: This method handles a rejected execution of a task by discarding the oldest unhandled request and then retries execution, unless the executor is shut down, in which case the task is discarded.
2. `String toString()`: This method returns a string representation of the DiscardOldestPolicy.
3. `boolean equals(Object obj)`: This method compares the specified object with this DiscardOldestPolicy for equality.
4. `int hashCode()`: This method returns the hash code value for the DiscardOldestPolicy.
5. `DiscardOldestPolicy clone()`: This method creates and returns a copy of this DiscardOldestPolicy.
================================================================

Sample: 37 ThreadPoolExecutor.DiscardPolicy
----------------------------------------------------------------
1. `void rejectedExecution(Runnable r, ThreadPoolExecutor executor)`: This method is called when a task cannot be executed by the ThreadPoolExecutor.
2. `void discardPolicy()`: This method represents the DiscardPolicy behavior of discarding the rejected task without throwing an exception.
3. `void onRejectedTask(Runnable task)`: This method handles the rejected task by discarding it silently.
4. `void handleRejectedTask(Runnable task, ThreadPoolExecutor executor)`: This method handles the rejected task by discarding it without any notification.
5. `void discardRejectedTask(Runnable task)`: This method discards the rejected task without any further action.
================================================================

