Sample: 0 Authenticator
----------------------------------------------------------------
1. `void setPasswordAuthentication(String host, int port, String protocol, String prompt, String scheme, String authType, URL url, PasswordAuthentication auth)`: This method sets the default authenticator that will be used by all networking code when a password is required.
2. `PasswordAuthentication requestPasswordAuthentication(InetAddress addr, int port, String protocol, String prompt, String scheme)`: This method requests authentication for a network connection.
3. `void setDefault(Authenticator a)`: This method sets the default authenticator that will be used by all networking code.
4. `Authenticator getDefault()`: This method gets the default authenticator.
5. `void setRequestingHost(String host)`: This method sets the hostname of the site or proxy requesting authentication.
================================================================

Sample: 1 CacheRequest
----------------------------------------------------------------
1. `void abort()`: This method aborts the attempt to cache the response.
2. `OutputStream getBody()`: This method returns an OutputStream to write the response body to.
3. `void close()`: This method closes the cache entry and releases any resources associated with it.
4. `void delete()`: This method deletes the cache entry.
5. `void setResponseHeaders(Map<String, List<String>> headers)`: This method sets the response headers for the cache entry.
================================================================

Sample: 2 CacheResponse
----------------------------------------------------------------
1. `Map<String, List<String>> getHeaders()`: This method returns the headers for the cached response.
2. `InputStream getBody()`: This method returns the body of the cached response as an InputStream.
3. `URI getURI()`: This method returns the URI of the cached response.
4. `String getCipherSuite()`: This method returns the cipher suite of the cached response.
5. `List<Certificate> getServerCertificates()`: This method returns the list of server certificates from the cached response.
================================================================

Sample: 3 ContentHandler
----------------------------------------------------------------
1. `Object getContent(URLConnection urlc)`: This method returns the content read from the specified URLConnection.
2. `String getContentType(URLConnection urlc)`: This method returns the content type of the object that the ContentHandler reads.
3. `Object getContent(URLConnection urlc, Class[] classes)`: This method returns the content read from the specified URLConnection, with the possibility of specifying the expected classes for the content.
4. `ContentHandler createContentHandler(String mimetype)`: This method creates a new ContentHandler instance for the specified MIME type.
5. `void setURL(URLConnection urlc, URL url)`: This method sets the URL of the specified URLConnection.
================================================================

Sample: 4 CookieHandler
----------------------------------------------------------------
1. `CookieHandler getDefault()`: This method returns the default system-wide CookieHandler.
2. `void setDefault(CookieHandler cHandler)`: This method sets the system-wide CookieHandler.
3. `Map<String, List<String>> get(URI uri, Map<String, List<String>> requestHeaders)`: This method retrieves cookies from the cookie store for the specified URI and HTTP request headers.
4. `void put(URI uri, Map<String, List<String>> responseHeaders)`: This method stores cookies for the specified URI based on the response headers received.
5. `void setCookiePolicy(CookiePolicy policy)`: This method sets the cookie policy for this CookieHandler.
================================================================

Sample: 5 CookieManager
----------------------------------------------------------------
1. `void setCookiePolicy(CookiePolicy cookiePolicy)`: This method sets the cookie policy for this CookieManager.
2. `Map<String, List<String>> get(URI uri, Map<String, List<String>> requestHeaders)`: This method gets all the applicable cookies from the cookie store for the specified URI in the request headers.
3. `void put(URI uri, Map<String, List<String>> responseHeaders)`: This method stores cookies from the response headers received from the specified URI.
4. `void put(URI uri, HttpCookie cookie)`: This method stores a cookie in the cookie store for the specified URI.
5. `Map<URI, List<HttpCookie>> getCookieStore()`: This method returns the cookie store containing all the cookies.
================================================================

Sample: 6 DatagramPacket
----------------------------------------------------------------
1. `void setData(byte[] buf)`: This method sets the data buffer for this packet.
2. `byte[] getData()`: This method returns the data buffer of this packet.
3. `void setLength(int length)`: This method sets the length of the data to be sent or received.
4. `int getLength()`: This method returns the length of the data in this packet.
5. `SocketAddress getSocketAddress()`: This method returns the socket address of the sender or receiver of this packet.
================================================================

Sample: 7 DatagramSocket
----------------------------------------------------------------
1. `void bind(SocketAddress bindpoint)`: Binds this datagram socket to the specified local address and port.
2. `void close()`: Closes this datagram socket.
3. `void connect(SocketAddress address)`: Connects this socket to a remote socket address.
4. `void disconnect()`: Disconnects this socket from the remote socket address.
5. `void send(DatagramPacket p)`: Sends a datagram packet from this socket.
================================================================

Sample: 8 DatagramSocketImpl
----------------------------------------------------------------
1. `void create()`: This method creates a new DatagramSocketImpl instance.
2. `void bind(int port, InetAddress laddr)`: This method binds the DatagramSocketImpl to a specific port and address.
3. `void send(DatagramPacket p)`: This method sends a datagram packet from the DatagramSocketImpl.
4. `void receive(DatagramPacket p)`: This method receives a datagram packet into the DatagramSocketImpl.
5. `void close()`: This method closes the DatagramSocketImpl.
================================================================

Sample: 9 HttpCookie
----------------------------------------------------------------
1. `String getName()`: This method returns the name of the cookie.
2. `String getValue()`: This method returns the value of the cookie.
3. `void setPath(String path)`: This method sets the path on the server where the cookie is valid.
4. `void setMaxAge(long expiry)`: This method sets the maximum age of the cookie in seconds.
5. `void setSecure(boolean secure)`: This method sets whether the cookie should only be sent over secure connections.
================================================================

Sample: 10 HttpURLConnection
----------------------------------------------------------------
1. `void setRequestMethod(String method)`: This method sets the request method to be used for the URL connection.
2. `int getResponseCode()`: This method gets the HTTP response code from the server.
3. `void setRequestProperty(String key, String value)`: This method sets a general request property.
4. `InputStream getInputStream()`: This method returns an input stream that reads from this open connection.
5. `void connect()`: This method establishes a connection to the URL referenced by this URLConnection object.
================================================================

Sample: 11 IDN
----------------------------------------------------------------
1. `String toASCII(String input)`: This method converts an internationalized domain name (IDN) to its ASCII Compatible Encoding (ACE) representation.
2. `String toUnicode(String input)`: This method converts an ASCII Compatible Encoding (ACE) representation of an IDN to its Unicode representation.
3. `boolean isLDHLabel(String label)`: This method checks if the given label is a valid Letter-Digit-Hyphen (LDH) label.
4. `boolean isValid(String input)`: This method checks if the given input is a valid internationalized domain name (IDN).
5. `String nameprep(String input)`: This method performs Nameprep processing on the given input string.
================================================================

Sample: 12 Inet4Address
----------------------------------------------------------------
1. `static Inet4Address getByAddress(byte[] addr)`: This method returns an InetAddress object given the raw IP address in network byte order.
2. `static Inet4Address getByAddress(String host, byte[] addr)`: This method returns an InetAddress object given the raw IP address and the host name.
3. `static Inet4Address getByName(String host)`: This method returns an InetAddress object given the host name.
4. `static Inet4Address getLocalHost()`: This method returns the local host address.
5. `static Inet4Address getLoopbackAddress()`: This method returns the loopback address.
================================================================

Sample: 13 Inet6Address
----------------------------------------------------------------
1. `Inet6Address getByAddress(byte[] addr)`: This method returns an Inet6Address object given the raw IP address in a byte array.
2. `int getScopeId()`: This method returns the scope identifier of the Inet6Address.
3. `boolean isAnyLocalAddress()`: This method returns true if the Inet6Address is an "any local" address.
4. `boolean isLinkLocalAddress()`: This method returns true if the Inet6Address is a link-local address.
5. `boolean isSiteLocalAddress()`: This method returns true if the Inet6Address is a site-local address.
================================================================

Sample: 14 InetAddress
----------------------------------------------------------------
1. `static InetAddress getByName(String host)`: This method returns the IP address of a host given its name.
2. `byte[] getAddress()`: This method returns the raw IP address in network byte order.
3. `String getHostAddress()`: This method returns the IP address string in textual presentation.
4. `String getHostName()`: This method returns the host name for this IP address.
5. `boolean isReachable(int timeout)`: This method checks if the address is reachable within the specified timeout.
================================================================

Sample: 15 InetSocketAddress
----------------------------------------------------------------
1. `int getPort()`: This method returns the port number.
2. `String getHostName()`: This method returns the hostname.
3. `InetAddress getAddress()`: This method returns the IP address.
4. `boolean isUnresolved()`: This method returns true if the hostname couldn't be resolved.
5. `String toString()`: This method returns a string representation of the InetSocketAddress.
================================================================

Sample: 16 InterfaceAddress
----------------------------------------------------------------
1. `InetAddress getAddress()`: This method returns the InetAddress representing the address of the network interface.
2. `short getNetworkPrefixLength()`: This method returns the network prefix length for the address.
3. `boolean equals(Object obj)`: This method compares this InterfaceAddress to the specified object.
4. `int hashCode()`: This method returns a hash code value for the object.
5. `String toString()`: This method returns a string representation of the object.
================================================================

Sample: 17 JarURLConnection
----------------------------------------------------------------
1. `JarFile getJarFile()`: This method returns the JarFile object for this connection.
2. `JarEntry getJarEntry()`: This method returns the JarEntry object for this connection.
3. `Attributes getAttributes()`: This method returns the Attributes object for this connection.
4. `Manifest getManifest()`: This method returns the Manifest object for this connection.
5. `void setUseCaches(boolean useCaches)`: This method sets whether or not to allow caching for this connection.
================================================================

Sample: 18 MulticastSocket
----------------------------------------------------------------
1. `void joinGroup(SocketAddress mcastaddr, NetworkInterface netIf)`: This method joins a multicast group on a specified network interface.
2. `void leaveGroup(SocketAddress mcastaddr, NetworkInterface netIf)`: This method leaves a multicast group on a specified network interface.
3. `void setInterface(InetAddress inf)`: This method sets the network interface for outgoing multicast packets.
4. `void setTimeToLive(int ttl)`: This method sets the time-to-live for multicast packets sent on this socket.
5. `void setLoopbackMode(boolean disable)` : This method disables or enables the loopback mode for multicast packets sent on this socket.
================================================================

Sample: 19 NetPermission
----------------------------------------------------------------
1. `void checkConnect(String host, int port)`: This method checks if the application is allowed to connect to the specified host and port.
2. `void checkListen(int port)`: This method checks if the application is allowed to listen on the specified port.
3. `void checkAccept(String host, int port)`: This method checks if the application is allowed to accept connections from the specified host and port.
4. `void checkMulticast(InetAddress maddr)`: This method checks if the application is allowed to use multicast sockets with the specified multicast address.
5. `void checkPropertiesAccess()`: This method checks if the application is allowed to access system properties related to networking.
================================================================

Sample: 20 NetworkInterface
----------------------------------------------------------------
1. `String getName()`: This method returns the name of the network interface.
2. `Enumeration<InetAddress> getInetAddresses()`: This method returns an Enumeration of all the IP addresses assigned to this network interface.
3. `boolean isUp()`: This method returns true if the network interface is up and running.
4. `boolean isLoopback()`: This method returns true if the network interface is a loopback interface.
5. `boolean isVirtual()`: This method returns true if the network interface is a virtual interface.
================================================================

Sample: 21 PasswordAuthentication
----------------------------------------------------------------
1. `String getUserName()`: This method returns the username associated with the PasswordAuthentication object.
2. `char[] getPassword()`: This method returns the password associated with the PasswordAuthentication object.
3. `void setUserName(String username)`: This method sets the username for the PasswordAuthentication object.
4. `void setPassword(char[] password)`: This method sets the password for the PasswordAuthentication object.
5. `boolean equals(Object obj)`: This method compares the specified object with this PasswordAuthentication object for equality.
================================================================

Sample: 22 Proxy
----------------------------------------------------------------
1. `Proxy.Type type()`: This method returns the type of this proxy.
2. `SocketAddress address()`: This method returns the socket address of this proxy.
3. `String toString()`: This method returns a string representation of this proxy.
4. `boolean equals(Object obj)`: This method compares this proxy to the specified object.
5. `int hashCode()`: This method returns a hash code value for this proxy.
================================================================

Sample: 23 ProxySelector
----------------------------------------------------------------
1. `List<Proxy> select(URI uri)`: This method selects the proxy server to use for the specified URI.
2. `void connectFailed(URI uri, SocketAddress sa, IOException ioe)`: This method notifies the selector that a connection to the proxy has failed.
3. `List<Proxy> select(URI uri)`: This method selects the proxy server to use for the specified URI.
4. `void connectFailed(URI uri, SocketAddress sa, IOException ioe)`: This method notifies the selector that a connection to the proxy has failed.
5. `ProxySelector getDefault()`: This method returns the system-wide default proxy selector.
================================================================

Sample: 24 ResponseCache
----------------------------------------------------------------
1. `ResponseCache getDefault()`: Returns the default response cache.
2. `void setDefault(ResponseCache responseCache)`: Sets the default response cache to the specified response cache.
3. `CacheResponse get(URI uri, String requestMethod, Map<String, List<String>> requestHeaders)`: Returns the cached response for the specified URI, request method, and request headers.
4. `CacheRequest put(URI uri, URLConnection connection)`: Puts the response for the specified URI and URL connection into the cache.
5. `void delete(URI uri, String requestMethod, Map<String, List<String>> requestHeaders)`: Removes the cached response for the specified URI, request method, and request headers.
================================================================

Sample: 25 SecureCacheResponse
----------------------------------------------------------------
1. `Map<String, List<String>> getHeaders()`: This method returns the headers associated with this cache response.
2. `InputStream getBody()`: This method returns the body of the cache response as an InputStream.
3. `String getCipherSuite()`: This method returns the cipher suite used for secure communication.
4. `List<Certificate> getLocalCertificateChain()`: This method returns the chain of certificates used by the local entity during the SSL handshake.
5. `List<Certificate> getServerCertificateChain()`: This method returns the chain of certificates sent by the server during the SSL handshake.
================================================================

Sample: 26 ServerSocket
----------------------------------------------------------------
1. `void bind(SocketAddress endpoint)`: This method binds the ServerSocket to a specific address and port.
2. `Socket accept()`: This method listens for a connection to be made to this socket and accepts it.
3. `void close()`: This method closes the ServerSocket.
4. `InetAddress getInetAddress()`: This method returns the local address to which the socket is bound.
5. `int getLocalPort()`: This method returns the local port number to which this socket is bound.
================================================================

Sample: 27 Socket
----------------------------------------------------------------
1. `void connect(SocketAddress endpoint)`: This method connects this socket to the server at the specified endpoint.
2. `InputStream getInputStream()`: This method returns an input stream for this socket.
3. `OutputStream getOutputStream()`: This method returns an output stream for this socket.
4. `void setSoTimeout(int timeout)`: This method sets the timeout in milliseconds for blocking socket operations.
5. `void close()`: This method closes this socket.
================================================================

Sample: 28 SocketAddress
----------------------------------------------------------------
1. `SocketAddress getAddress()`: This method returns the address that this SocketAddress represents.
2. `boolean equals(Object obj)`: This method compares this SocketAddress to the specified object.
3. `int hashCode()`: This method returns a hash code value for the object.
4. `String toString()`: This method returns a string representation of the object.
5. `SocketAddress createSocketAddress(String hostname, int port)`: This method creates a new SocketAddress with the specified hostname and port number.
================================================================

Sample: 29 SocketImpl
----------------------------------------------------------------
1. `void setOption(int optID, Object value)`: This method sets the value of the specified socket option.
2. `Object getOption(int optID)`: This method gets the value of the specified socket option.
3. `void create(boolean stream)`: This method creates either a stream or a datagram socket.
4. `void connect(String host, int port)`: This method connects the socket to the specified host and port number.
5. `void bind(InetAddress host, int port)`: This method binds the socket to the specified local address and port number.
================================================================

Sample: 30 SocketPermission
----------------------------------------------------------------
1. `void checkConnect(String host, int port)`: This method checks permission to connect to the specified host and port.
2. `void checkListen(int port)`: This method checks permission to listen on the specified port.
3. `void checkAccept(String host, int port)`: This method checks permission to accept connections from the specified host and port.
4. `void checkMulticast(InetAddress maddr)`: This method checks permission to join a multicast group.
5. `void checkResolve(String host)`: This method checks permission to resolve the specified host name.
================================================================

Sample: 31 StandardSocketOptions
----------------------------------------------------------------
1. `static StandardSocketOptions<Boolean> SO_KEEPALIVE()`: This method returns a socket option representing whether the socket will send keep-alive messages.
2. `static StandardSocketOptions<Integer> SO_RCVBUF()`: This method returns a socket option representing the receive buffer size.
3. `static StandardSocketOptions<Integer> SO_SNDBUF()`: This method returns a socket option representing the send buffer size.
4. `static StandardSocketOptions<Integer> TCP_NODELAY()`: This method returns a socket option representing whether the Nagle algorithm is disabled.
5. `static StandardSocketOptions<Boolean> SO_REUSEADDR()`: This method returns a socket option representing whether the socket can be bound to an address that is already in use.
================================================================

Sample: 32 URI
----------------------------------------------------------------
1. `String getScheme()`: This method returns the scheme component of the URI.
2. `String getHost()`: This method returns the host component of the URI.
3. `int getPort()`: This method returns the port component of the URI.
4. `String getPath()`: This method returns the path component of the URI.
5. `String getQuery()`: This method returns the query component of the URI.
================================================================

Sample: 33 URL
----------------------------------------------------------------
1. `String getFile()`: This method returns the file name of the URL.
2. `String getHost()`: This method returns the host name of the URL.
3. `int getPort()`: This method returns the port number of the URL.
4. `String getProtocol()`: This method returns the protocol of the URL.
5. `String toString()`: This method returns a string representation of the URL.
================================================================

Sample: 34 URLClassLoader
----------------------------------------------------------------
1. `Class<?> findClass(String name)`: This method finds and returns the class with the specified binary name.
2. `URL findResource(String name)`: This method finds the resource with the specified name.
3. `Enumeration<URL> findResources(String name)`: This method finds all resources with the specified name.
4. `void close()`: This method closes this URLClassLoader and releases any resources associated with it.
5. `void addURL(URL url)`: This method adds the specified URL to the list of URLs to search for classes and resources.
================================================================

Sample: 35 URLConnection
----------------------------------------------------------------
1. `void connect()`: This method establishes a connection to the URL referenced by this URLConnection object.
2. `InputStream getInputStream()`: This method returns an input stream that reads from this open connection.
3. `OutputStream getOutputStream()`: This method returns an output stream that writes to this connection.
4. `int getContentLength()`: This method returns the content length in bytes specified by the response header field.
5. `String getContentType()`: This method returns the value of the content-type header field.
================================================================

Sample: 36 URLDecoder
----------------------------------------------------------------
1. `String decode(String s)`: This method decodes a application/x-www-form-urlencoded string using a specific encoding scheme.
2. `String decode(String s, String enc)`: This method decodes a application/x-www-form-urlencoded string using a specific encoding scheme.
3. `String decode(String s, Charset charset)`: This method decodes a application/x-www-form-urlencoded string using a specific charset.
4. `String decode(String s, String enc, boolean plusAsBlank)`: This method decodes a application/x-www-form-urlencoded string using a specific encoding scheme, with the option to treat the '+' character as a space.
5. `String decode(String s, Charset charset, boolean plusAsBlank)`: This method decodes a application/x-www-form-urlencoded string using a specific charset, with the option to treat the '+' character as a space.
================================================================

Sample: 37 URLEncoder
----------------------------------------------------------------
1. `String encode(String s)`: This method encodes a string into application/x-www-form-urlencoded format.
2. `String encode(String s, String enc)`: This method encodes a string using a specific encoding scheme.
3. `String encode(String s, Charset charset)`: This method encodes a string using a specific charset.
4. `String encode(String s, CharsetEncoder enc)`: This method encodes a string using a specific charset encoder.
5. `String encode(String s, CharsetEncoder enc, CharBuffer cb)`: This method encodes a string using a specific charset encoder and character buffer.
================================================================

Sample: 38 URLPermission
----------------------------------------------------------------
1. `String getActions()`: This method returns the actions specified in the URLPermission.
2. `String getHost()`: This method returns the host component of the URL in the permission.
3. `int getPort()`: This method returns the port number in the URLPermission.
4. `String getProtocol()`: This method returns the protocol component of the URL in the permission.
5. `String getURL()`: This method returns the URL string in the permission.
================================================================

Sample: 39 URLStreamHandler
----------------------------------------------------------------
1. `URLConnection openConnection(URL u)`: This method opens a connection to the specified URL and returns a URLConnection object.
2. `void parseURL(URL u, String spec, int start, int limit)`: This method parses the URL and sets the fields in the URL object.
3. `int getDefaultPort()`: This method returns the default port for the protocol handled by this stream handler.
4. `boolean equals(URL u1, URL u2)`: This method compares two URLs for equality.
5. `int hashCode(URL u)`: This method returns a hash code for the specified URL.
================================================================

