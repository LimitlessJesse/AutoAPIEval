ClassName,Method,Return Type,Description
Authenticator,getPasswordAuthentication(),protected PasswordAuthentication,Called when password authorization is needed.
Authenticator,getRequestingHost(),protected String,"Gets the hostname of the site or proxy requesting authentication, or null if not available."
Authenticator,getRequestingPort(),protected int,Gets the port number for the requested connection.
Authenticator,getRequestingPrompt(),protected String,Gets the prompt string given by the requestor.
Authenticator,getRequestingProtocol(),protected String,Give the protocol that's requesting the connection.
Authenticator,getRequestingScheme(),protected String,"Gets the scheme of the requestor (the HTTP scheme for an HTTP firewall, for example)."
Authenticator,getRequestingSite(),protected InetAddress,"Gets the InetAddress of the site requesting authorization, or null if not available."
Authenticator,getRequestingURL(),protected URL,Returns the URL that resulted in this request for authentication.
Authenticator,getRequestorType(),protected Authenticator.RequestorType,Returns whether the requestor is a Proxy or a Server.
Authenticator,"requestPasswordAuthentication(InetAddress addr, int port, String protocol, String prompt, String scheme)",static PasswordAuthentication,Ask the authenticator that has been registered with the system for a password.
Authenticator,"requestPasswordAuthentication(String host, InetAddress addr, int port, String protocol, String prompt, String scheme)",static PasswordAuthentication,Ask the authenticator that has been registered with the system for a password.
Authenticator,"requestPasswordAuthentication(String host, InetAddress addr, int port, String protocol, String prompt, String scheme, URL url, Authenticator.RequestorType reqType)",static PasswordAuthentication,Ask the authenticator that has been registered with the system for a password.
Authenticator,setDefault(Authenticator a),static void,Sets the authenticator that will be used by the networking code when a proxy or an HTTP server asks for authentication.
CacheRequest,abort(),abstract void,Aborts the attempt to cache the response.
CacheRequest,getBody(),abstract OutputStream,Returns an OutputStream to which the response body can be written.
CacheResponse,getBody(),abstract InputStream,Returns the response body as an InputStream.
CacheResponse,getHeaders(),"abstract Map<String,List<String>>",Returns the response headers as a Map.
ContentHandler,getContent(URLConnection urlc),abstract Object,"Given a URL connect stream positioned at the beginning of the representation of an object, this method reads that stream and creates an object from it."
ContentHandler,"getContent(URLConnection urlc, Class[] classes)",Object,"Given a URL connect stream positioned at the beginning of the representation of an object, this method reads that stream and creates an object that matches one of the types specified."
CookieHandler,"get(URI uri, Map<String,List<String>> requestHeaders)","abstract Map<String,List<String>>",Gets all the applicable cookies from a cookie cache for the specified uri in the request header.
CookieHandler,getDefault(),static CookieHandler,Gets the system-wide cookie handler.
CookieHandler,"put(URI uri, Map<String,List<String>> responseHeaders)",abstract void,"Sets all the applicable cookies, examples are response header fields that are named Set-Cookie2, present in the response headers into a cookie cache."
CookieHandler,setDefault(CookieHandler cHandler),static void,Sets (or unsets) the system-wide cookie handler.
CookieManager,"get(URI uri, Map<String,List<String>> requestHeaders)","Map<String,List<String>>",Gets all the applicable cookies from a cookie cache for the specified uri in the request header.
CookieManager,getCookieStore(),CookieStore,To retrieve current cookie store.
CookieManager,"put(URI uri, Map<String,List<String>> responseHeaders)",void,"Sets all the applicable cookies, examples are response header fields that are named Set-Cookie2, present in the response headers into a cookie cache."
CookieManager,setCookiePolicy(CookiePolicy cookiePolicy),void,To set the cookie policy of this cookie manager.
DatagramPacket,getAddress(),InetAddress,Returns the IP address of the machine to which this datagram is being sent or from which the datagram was received.
DatagramPacket,getData(),byte[],Returns the data buffer.
DatagramPacket,getLength(),int,Returns the length of the data to be sent or the length of the data received.
DatagramPacket,getOffset(),int,Returns the offset of the data to be sent or the offset of the data received.
DatagramPacket,getPort(),int,Returns the port number on the remote host to which this datagram is being sent or from which the datagram was received.
DatagramPacket,getSocketAddress(),SocketAddress,Gets the SocketAddress (usually IP address + port number) of the remote host that this packet is being sent to or is coming from.
DatagramPacket,setAddress(InetAddress iaddr),void,Sets the IP address of the machine to which this datagram is being sent.
DatagramPacket,setData(byte[] buf),void,Set the data buffer for this packet.
DatagramPacket,"setData(byte[] buf, int offset, int length)",void,Set the data buffer for this packet.
DatagramPacket,setLength(int length),void,Set the length for this packet.
DatagramPacket,setPort(int iport),void,Sets the port number on the remote host to which this datagram is being sent.
DatagramPacket,setSocketAddress(SocketAddress address),void,Sets the SocketAddress (usually IP address + port number) of the remote host to which this datagram is being sent.
DatagramSocket,bind(SocketAddress addr),void,Binds this DatagramSocket to a specific address and port.
DatagramSocket,close(),void,Closes this datagram socket.
DatagramSocket,"connect(InetAddress address, int port)",void,Connects the socket to a remote address for this socket.
DatagramSocket,connect(SocketAddress addr),void,Connects this socket to a remote socket address (IP address + port number).
DatagramSocket,disconnect(),void,Disconnects the socket.
DatagramSocket,getBroadcast(),boolean,Tests if SO_BROADCAST is enabled.
DatagramSocket,getChannel(),DatagramChannel,"Returns the unique DatagramChannel object associated with this datagram socket, if any."
DatagramSocket,getInetAddress(),InetAddress,Returns the address to which this socket is connected.
DatagramSocket,getLocalAddress(),InetAddress,Gets the local address to which the socket is bound.
DatagramSocket,getLocalPort(),int,Returns the port number on the local host to which this socket is bound.
DatagramSocket,getLocalSocketAddress(),SocketAddress,Returns the address of the endpoint this socket is bound to.
DatagramSocket,getPort(),int,Returns the port number to which this socket is connected.
DatagramSocket,getReceiveBufferSize(),int,"Get value of the SO_RCVBUF option for this DatagramSocket, that is the buffer size used by the platform for input on this DatagramSocket."
DatagramSocket,getRemoteSocketAddress(),SocketAddress,"Returns the address of the endpoint this socket is connected to, or null if it is unconnected."
DatagramSocket,getReuseAddress(),boolean,Tests if SO_REUSEADDR is enabled.
DatagramSocket,getSendBufferSize(),int,"Get value of the SO_SNDBUF option for this DatagramSocket, that is the buffer size used by the platform for output on this DatagramSocket."
DatagramSocket,getSoTimeout(),int,Retrieve setting for SO_TIMEOUT.
DatagramSocket,getTrafficClass(),int,Gets traffic class or type-of-service in the IP datagram header for packets sent from this DatagramSocket.
DatagramSocket,isBound(),boolean,Returns the binding state of the socket.
DatagramSocket,isClosed(),boolean,Returns whether the socket is closed or not.
DatagramSocket,isConnected(),boolean,Returns the connection state of the socket.
DatagramSocket,receive(DatagramPacket p),void,Receives a datagram packet from this socket.
DatagramSocket,send(DatagramPacket p),void,Sends a datagram packet from this socket.
DatagramSocket,setBroadcast(boolean on),void,Enable/disable SO_BROADCAST.
DatagramSocket,setDatagramSocketImplFactory(DatagramSocketImplFactory fac),static void,Sets the datagram socket implementation factory for the application.
DatagramSocket,setReceiveBufferSize(int size),void,Sets the SO_RCVBUF option to the specified value for this DatagramSocket.
DatagramSocket,setReuseAddress(boolean on),void,Enable/disable the SO_REUSEADDR socket option.
DatagramSocket,setSendBufferSize(int size),void,Sets the SO_SNDBUF option to the specified value for this DatagramSocket.
DatagramSocket,setSoTimeout(int timeout),void,"Enable/disable SO_TIMEOUT with the specified timeout, in milliseconds."
DatagramSocket,setTrafficClass(int tc),void,Sets traffic class or type-of-service octet in the IP datagram header for datagrams sent from this DatagramSocket.
DatagramSocketImpl,"bind(int lport, InetAddress laddr)",protected abstract void,Binds a datagram socket to a local port and address.
DatagramSocketImpl,close(),protected abstract void,Close the socket.
DatagramSocketImpl,"connect(InetAddress address, int port)",protected void,Connects a datagram socket to a remote destination.
DatagramSocketImpl,create(),protected abstract void,Creates a datagram socket.
DatagramSocketImpl,disconnect(),protected void,Disconnects a datagram socket from its remote destination.
DatagramSocketImpl,getFileDescriptor(),protected FileDescriptor,Gets the datagram socket file descriptor.
DatagramSocketImpl,getLocalPort(),protected int,Gets the local port.
DatagramSocketImpl,getTimeToLive(),protected abstract int,Retrieve the TTL (time-to-live) option.
DatagramSocketImpl,getTTL(),protected abstract byte,Deprecated. use getTimeToLive instead.
DatagramSocketImpl,join(InetAddress inetaddr),protected abstract void,Join the multicast group.
DatagramSocketImpl,"joinGroup(SocketAddress mcastaddr, NetworkInterface netIf)",protected abstract void,Join the multicast group.
DatagramSocketImpl,leave(InetAddress inetaddr),protected abstract void,Leave the multicast group.
DatagramSocketImpl,"leaveGroup(SocketAddress mcastaddr, NetworkInterface netIf)",protected abstract void,Leave the multicast group.
DatagramSocketImpl,peek(InetAddress i),protected abstract int,Peek at the packet to see who it is from.
DatagramSocketImpl,peekData(DatagramPacket p),protected abstract int,Peek at the packet to see who it is from.
DatagramSocketImpl,receive(DatagramPacket p),protected abstract void,Receive the datagram packet.
DatagramSocketImpl,send(DatagramPacket p),protected abstract void,Sends a datagram packet.
DatagramSocketImpl,setTimeToLive(int ttl),protected abstract void,Set the TTL (time-to-live) option.
DatagramSocketImpl,setTTL(byte ttl),protected abstract void,Deprecated. use setTimeToLive instead.
HttpCookie,clone(),Object,Create and return a copy of this object.
HttpCookie,"domainMatches(String domain, String host)",static boolean,The utility method to check whether a host name is in a domain or not.
HttpCookie,equals(Object obj),boolean,Test the equality of two HTTP cookies.
HttpCookie,getComment(),String,"Returns the comment describing the purpose of this cookie, or null if the cookie has no comment."
HttpCookie,getCommentURL(),String,"Returns the comment URL describing the purpose of this cookie, or null if the cookie has no comment URL."
HttpCookie,getDiscard(),boolean,Returns the discard attribute of the cookie
HttpCookie,getDomain(),String,Returns the domain name set for this cookie.
HttpCookie,getMaxAge(),long,"Returns the maximum age of the cookie, specified in seconds."
HttpCookie,getName(),String,Returns the name of the cookie.
HttpCookie,getPath(),String,Returns the path on the server to which the browser returns this cookie.
HttpCookie,getPortlist(),String,Returns the port list attribute of the cookie
HttpCookie,getSecure(),boolean,"Returns true if sending this cookie should be restricted to a secure protocol, or false if the it can be sent using any protocol."
HttpCookie,getValue(),String,Returns the value of the cookie.
HttpCookie,getVersion(),int,Returns the version of the protocol this cookie complies with.
HttpCookie,hasExpired(),boolean,Reports whether this HTTP cookie has expired or not.
HttpCookie,hashCode(),int,Returns the hash code of this HTTP cookie.
HttpCookie,isHttpOnly(),boolean,Returns true if this cookie contains the HttpOnly attribute.
HttpCookie,parse(String header),static List<HttpCookie>,Constructs cookies from set-cookie or set-cookie2 header string.
HttpCookie,setComment(String purpose),void,Specifies a comment that describes a cookie's purpose.
HttpCookie,setCommentURL(String purpose),void,Specifies a comment URL that describes a cookie's purpose.
HttpCookie,setDiscard(boolean discard),void,Specify whether user agent should discard the cookie unconditionally.
HttpCookie,setDomain(String pattern),void,Specifies the domain within which this cookie should be presented.
HttpCookie,setHttpOnly(boolean httpOnly),void,Indicates whether the cookie should be considered HTTP Only.
HttpCookie,setMaxAge(long expiry),void,Sets the maximum age of the cookie in seconds.
HttpCookie,setPath(String uri),void,Specifies a path for the cookie to which the client should return the cookie.
HttpCookie,setPortlist(String ports),void,"Specify the portlist of the cookie, which restricts the port(s) to which a cookie may be sent back in a Cookie header."
HttpCookie,setSecure(boolean flag),void,"Indicates whether the cookie should only be sent using a secure protocol, such as HTTPS or SSL."
HttpCookie,setValue(String newValue),void,Assigns a new value to a cookie after the cookie is created.
HttpCookie,setVersion(int v),void,Sets the version of the cookie protocol this cookie complies with.
HttpCookie,toString(),String,"Constructs a cookie header string representation of this cookie, which is in the format defined by corresponding cookie specification, but without the leading ""Cookie:"" token."
HttpURLConnection,disconnect(),abstract void,Indicates that other requests to the server are unlikely in the near future.
HttpURLConnection,getErrorStream(),InputStream,Returns the error stream if the connection failed but the server sent useful data nonetheless.
HttpURLConnection,getFollowRedirects(),static boolean,Returns a boolean indicating whether or not HTTP redirects (3xx) should be automatically followed.
HttpURLConnection,getHeaderField(int n),String,Returns the value for the nth header field.
HttpURLConnection,"getHeaderFieldDate(String name, long Default)",long,Returns the value of the named field parsed as date.
HttpURLConnection,getHeaderFieldKey(int n),String,Returns the key for the nth header field.
HttpURLConnection,getInstanceFollowRedirects(),boolean,Returns the value of this HttpURLConnection's instanceFollowRedirects field.
HttpURLConnection,getPermission(),Permission,Returns a SocketPermission object representing the permission necessary to connect to the destination host and port.
HttpURLConnection,getRequestMethod(),String,Get the request method.
HttpURLConnection,getResponseCode(),int,Gets the status code from an HTTP response message.
HttpURLConnection,getResponseMessage(),String,"Gets the HTTP response message, if any, returned along with the response code from a server."
HttpURLConnection,setChunkedStreamingMode(int chunklen),void,"This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is not known in advance."
HttpURLConnection,setFixedLengthStreamingMode(int contentLength),void,"This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is known in advance."
HttpURLConnection,setFixedLengthStreamingMode(long contentLength),void,"This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is known in advance."
HttpURLConnection,setFollowRedirects(boolean set),static void,Sets whether HTTP redirects (requests with response code 3xx) should be automatically followed by this class.
HttpURLConnection,setInstanceFollowRedirects(boolean followRedirects),void,Sets whether HTTP redirects (requests with response code 3xx) should be automatically followed by this HttpURLConnection instance.
HttpURLConnection,setRequestMethod(String method),void,"Set the method for the URL request, one of: GET POST HEAD OPTIONS PUT DELETE TRACE are legal, subject to protocol restrictions."
HttpURLConnection,usingProxy(),abstract boolean,Indicates if the connection is going through a proxy.
IDN,toASCII(String input),static String,"Translates a string from Unicode to ASCII Compatible Encoding (ACE), as defined by the ToASCII operation of RFC 3490."
IDN,"toASCII(String input, int flag)",static String,"Translates a string from Unicode to ASCII Compatible Encoding (ACE), as defined by the ToASCII operation of RFC 3490."
IDN,toUnicode(String input),static String,"Translates a string from ASCII Compatible Encoding (ACE) to Unicode, as defined by the ToUnicode operation of RFC 3490."
IDN,"toUnicode(String input, int flag)",static String,"Translates a string from ASCII Compatible Encoding (ACE) to Unicode, as defined by the ToUnicode operation of RFC 3490."
Inet4Address,equals(Object obj),boolean,Compares this object against the specified object.
Inet4Address,getAddress(),byte[],Returns the raw IP address of this InetAddress object.
Inet4Address,getHostAddress(),String,Returns the IP address string in textual presentation form.
Inet4Address,hashCode(),int,Returns a hashcode for this IP address.
Inet4Address,isAnyLocalAddress(),boolean,Utility routine to check if the InetAddress in a wildcard address.
Inet4Address,isLinkLocalAddress(),boolean,Utility routine to check if the InetAddress is an link local address.
Inet4Address,isLoopbackAddress(),boolean,Utility routine to check if the InetAddress is a loopback address.
Inet4Address,isMCGlobal(),boolean,Utility routine to check if the multicast address has global scope.
Inet4Address,isMCLinkLocal(),boolean,Utility routine to check if the multicast address has link scope.
Inet4Address,isMCNodeLocal(),boolean,Utility routine to check if the multicast address has node scope.
Inet4Address,isMCOrgLocal(),boolean,Utility routine to check if the multicast address has organization scope.
Inet4Address,isMCSiteLocal(),boolean,Utility routine to check if the multicast address has site scope.
Inet4Address,isMulticastAddress(),boolean,Utility routine to check if the InetAddress is an IP multicast address.
Inet4Address,isSiteLocalAddress(),boolean,Utility routine to check if the InetAddress is a site local address.
Inet6Address,equals(Object obj),boolean,Compares this object against the specified object.
Inet6Address,getAddress(),byte[],Returns the raw IP address of this InetAddress object.
Inet6Address,"getByAddress(String host, byte[] addr, int scope_id)",static Inet6Address,"Create an Inet6Address in the exact manner of InetAddress.getByAddress(String,byte[]) except that the IPv6 scope_id is set to the given numeric value."
Inet6Address,"getByAddress(String host, byte[] addr, NetworkInterface nif)",static Inet6Address,"Create an Inet6Address in the exact manner of InetAddress.getByAddress(String,byte[]) except that the IPv6 scope_id is set to the value corresponding to the given interface for the address type specified in addr."
Inet6Address,getHostAddress(),String,Returns the IP address string in textual presentation.
Inet6Address,getScopedInterface(),NetworkInterface,"Returns the scoped interface, if this instance was created with with a scoped interface."
Inet6Address,getScopeId(),int,"Returns the numeric scopeId, if this instance is associated with an interface."
Inet6Address,hashCode(),int,Returns a hashcode for this IP address.
Inet6Address,isAnyLocalAddress(),boolean,Utility routine to check if the InetAddress in a wildcard address.
Inet6Address,isIPv4CompatibleAddress(),boolean,Utility routine to check if the InetAddress is an IPv4 compatible IPv6 address.
Inet6Address,isLinkLocalAddress(),boolean,Utility routine to check if the InetAddress is an link local address.
Inet6Address,isLoopbackAddress(),boolean,Utility routine to check if the InetAddress is a loopback address.
Inet6Address,isMCGlobal(),boolean,Utility routine to check if the multicast address has global scope.
Inet6Address,isMCLinkLocal(),boolean,Utility routine to check if the multicast address has link scope.
Inet6Address,isMCNodeLocal(),boolean,Utility routine to check if the multicast address has node scope.
Inet6Address,isMCOrgLocal(),boolean,Utility routine to check if the multicast address has organization scope.
Inet6Address,isMCSiteLocal(),boolean,Utility routine to check if the multicast address has site scope.
Inet6Address,isMulticastAddress(),boolean,Utility routine to check if the InetAddress is an IP multicast address.
Inet6Address,isSiteLocalAddress(),boolean,Utility routine to check if the InetAddress is a site local address.
InetAddress,equals(Object obj),boolean,Compares this object against the specified object.
InetAddress,getAddress(),byte[],Returns the raw IP address of this InetAddress object.
InetAddress,getAllByName(String host),static InetAddress[],"Given the name of a host, returns an array of its IP addresses, based on the configured name service on the system."
InetAddress,getByAddress(byte[] addr),static InetAddress,Returns an InetAddress object given the raw IP address .
InetAddress,"getByAddress(String host, byte[] addr)",static InetAddress,Creates an InetAddress based on the provided host name and IP address.
InetAddress,getByName(String host),static InetAddress,"Determines the IP address of a host, given the host's name."
InetAddress,getCanonicalHostName(),String,Gets the fully qualified domain name for this IP address.
InetAddress,getHostAddress(),String,Returns the IP address string in textual presentation.
InetAddress,getHostName(),String,Gets the host name for this IP address.
InetAddress,getLocalHost(),static InetAddress,Returns the address of the local host.
InetAddress,getLoopbackAddress(),static InetAddress,Returns the loopback address.
InetAddress,hashCode(),int,Returns a hashcode for this IP address.
InetAddress,isAnyLocalAddress(),boolean,Utility routine to check if the InetAddress in a wildcard address.
InetAddress,isLinkLocalAddress(),boolean,Utility routine to check if the InetAddress is an link local address.
InetAddress,isLoopbackAddress(),boolean,Utility routine to check if the InetAddress is a loopback address.
InetAddress,isMCGlobal(),boolean,Utility routine to check if the multicast address has global scope.
InetAddress,isMCLinkLocal(),boolean,Utility routine to check if the multicast address has link scope.
InetAddress,isMCNodeLocal(),boolean,Utility routine to check if the multicast address has node scope.
InetAddress,isMCOrgLocal(),boolean,Utility routine to check if the multicast address has organization scope.
InetAddress,isMCSiteLocal(),boolean,Utility routine to check if the multicast address has site scope.
InetAddress,isMulticastAddress(),boolean,Utility routine to check if the InetAddress is an IP multicast address.
InetAddress,isReachable(int timeout),boolean,Test whether that address is reachable.
InetAddress,"isReachable(NetworkInterface netif, int ttl, int timeout)",boolean,Test whether that address is reachable.
InetAddress,isSiteLocalAddress(),boolean,Utility routine to check if the InetAddress is a site local address.
InetAddress,toString(),String,Converts this IP address to a String.
InetSocketAddress,"createUnresolved(String host, int port)",static InetSocketAddress,Creates an unresolved socket address from a hostname and a port number.
InetSocketAddress,equals(Object obj),boolean,Compares this object against the specified object.
InetSocketAddress,getAddress(),InetAddress,Gets the InetAddress.
InetSocketAddress,getHostName(),String,Gets the hostname.
InetSocketAddress,getHostString(),String,"Returns the hostname, or the String form of the address if it doesn't have a hostname (it was created using a literal)."
InetSocketAddress,getPort(),int,Gets the port number.
InetSocketAddress,hashCode(),int,Returns a hashcode for this socket address.
InetSocketAddress,isUnresolved(),boolean,Checks whether the address has been resolved or not.
InetSocketAddress,toString(),String,Constructs a string representation of this InetSocketAddress.
InterfaceAddress,equals(Object obj),boolean,Compares this object against the specified object.
InterfaceAddress,getAddress(),InetAddress,Returns an InetAddress for this address.
InterfaceAddress,getBroadcast(),InetAddress,Returns an InetAddress for the broadcast address for this InterfaceAddress.
InterfaceAddress,getNetworkPrefixLength(),short,Returns the network prefix length for this address.
InterfaceAddress,hashCode(),int,Returns a hashcode for this Interface address.
InterfaceAddress,toString(),String,Converts this Interface address to a String.
JarURLConnection,getAttributes(),Attributes,"Return the Attributes object for this connection if the URL for it points to a JAR file entry, null otherwise."
JarURLConnection,getCertificates(),Certificate[],"Return the Certificate object for this connection if the URL for it points to a JAR file entry, null otherwise."
JarURLConnection,getEntryName(),String,Return the entry name for this connection.
JarURLConnection,getJarEntry(),JarEntry,"Return the JAR entry object for this connection, if any."
JarURLConnection,getJarFile(),abstract JarFile,Return the JAR file for this connection.
JarURLConnection,getJarFileURL(),URL,Returns the URL for the Jar file for this connection.
JarURLConnection,getMainAttributes(),Attributes,Returns the main Attributes for the JAR file for this connection.
JarURLConnection,getManifest(),Manifest,"Returns the Manifest for this connection, or null if none."
MulticastSocket,getInterface(),InetAddress,Retrieve the address of the network interface used for multicast packets.
MulticastSocket,getLoopbackMode(),boolean,Get the setting for local loopback of multicast datagrams.
MulticastSocket,getNetworkInterface(),NetworkInterface,Get the multicast network interface set.
MulticastSocket,getTimeToLive(),int,Get the default time-to-live for multicast packets sent out on the socket.
MulticastSocket,getTTL(),byte,"Deprecated. use the getTimeToLive method instead, which returns an int instead of a byte."
MulticastSocket,joinGroup(InetAddress mcastaddr),void,Joins a multicast group.
MulticastSocket,"joinGroup(SocketAddress mcastaddr, NetworkInterface netIf)",void,Joins the specified multicast group at the specified interface.
MulticastSocket,leaveGroup(InetAddress mcastaddr),void,Leave a multicast group.
MulticastSocket,"leaveGroup(SocketAddress mcastaddr, NetworkInterface netIf)",void,Leave a multicast group on a specified local interface.
MulticastSocket,"send(DatagramPacket p, byte ttl)",void,Deprecated. Use the following code or its equivalent instead: ...... int ttl = mcastSocket.getTimeToLive(); mcastSocket.setTimeToLive(newttl); mcastSocket.send(p); mcastSocket.setTimeToLive(ttl); ......
MulticastSocket,setInterface(InetAddress inf),void,Set the multicast network interface used by methods whose behavior would be affected by the value of the network interface.
MulticastSocket,setLoopbackMode(boolean disable),void,Disable/Enable local loopback of multicast datagrams The option is used by the platform's networking code as a hint for setting whether multicast data will be looped back to the local socket.
MulticastSocket,setNetworkInterface(NetworkInterface netIf),void,Specify the network interface for outgoing multicast datagrams sent on this socket.
MulticastSocket,setTimeToLive(int ttl),void,Set the default time-to-live for multicast packets sent out on this MulticastSocket in order to control the scope of the multicasts.
MulticastSocket,setTTL(byte ttl),void,"Deprecated. use the setTimeToLive method instead, which uses int instead of byte as the type for ttl."
NetworkInterface,equals(Object obj),boolean,Compares this object against the specified object.
NetworkInterface,getByIndex(int index),static NetworkInterface,Get a network interface given its index.
NetworkInterface,getByInetAddress(InetAddress addr),static NetworkInterface,Convenience method to search for a network interface that has the specified Internet Protocol (IP) address bound to it.
NetworkInterface,getByName(String name),static NetworkInterface,Searches for the network interface with the specified name.
NetworkInterface,getDisplayName(),String,Get the display name of this network interface.
NetworkInterface,getHardwareAddress(),byte[],Returns the hardware address (usually MAC) of the interface if it has one and if it can be accessed given the current privileges.
NetworkInterface,getIndex(),int,Returns the index of this network interface.
NetworkInterface,getInetAddresses(),Enumeration<InetAddress>,Convenience method to return an Enumeration with all or a subset of the InetAddresses bound to this network interface.
NetworkInterface,getInterfaceAddresses(),List<InterfaceAddress>,Get a List of all or a subset of the InterfaceAddresses of this network interface.
NetworkInterface,getMTU(),int,Returns the Maximum Transmission Unit (MTU) of this interface.
NetworkInterface,getName(),String,Get the name of this network interface.
NetworkInterface,getNetworkInterfaces(),static Enumeration<NetworkInterface>,Returns all the interfaces on this machine.
NetworkInterface,getParent(),NetworkInterface,"Returns the parent NetworkInterface of this interface if this is a subinterface, or null if it is a physical (non virtual) interface or has no parent."
NetworkInterface,getSubInterfaces(),Enumeration<NetworkInterface>,Get an Enumeration with all the subinterfaces (also known as virtual interfaces) attached to this network interface.
NetworkInterface,hashCode(),int,Returns a hash code value for the object.
NetworkInterface,isLoopback(),boolean,Returns whether a network interface is a loopback interface.
NetworkInterface,isPointToPoint(),boolean,Returns whether a network interface is a point to point interface.
NetworkInterface,isUp(),boolean,Returns whether a network interface is up and running.
NetworkInterface,isVirtual(),boolean,Returns whether this interface is a virtual interface (also called subinterface).
NetworkInterface,supportsMulticast(),boolean,Returns whether a network interface supports multicasting or not.
NetworkInterface,toString(),String,Returns a string representation of the object.
PasswordAuthentication,getPassword(),char[],Returns the user password.
PasswordAuthentication,getUserName(),String,Returns the user name.
Proxy,address(),SocketAddress,"Returns the socket address of the proxy, or null if its a direct connection."
Proxy,equals(Object obj),boolean,Compares this object against the specified object.
Proxy,hashCode(),int,Returns a hashcode for this Proxy.
Proxy,toString(),String,Constructs a string representation of this Proxy.
Proxy,type(),Proxy.Type,Returns the proxy type.
ProxySelector,"connectFailed(URI uri, SocketAddress sa, IOException ioe)",abstract void,Called to indicate that a connection could not be established to a proxy/socks server.
ProxySelector,getDefault(),static ProxySelector,Gets the system-wide proxy selector.
ProxySelector,select(URI uri),abstract List<Proxy>,Selects all the applicable proxies based on the protocol to access the resource with and a destination address to access the resource at.
ProxySelector,setDefault(ProxySelector ps),static void,Sets (or unsets) the system-wide proxy selector.
ResponseCache,"get(URI uri, String rqstMethod, Map<String,List<String>> rqstHeaders)",abstract CacheResponse,"Retrieve the cached response based on the requesting uri, request method and request headers."
ResponseCache,getDefault(),static ResponseCache,Gets the system-wide response cache.
ResponseCache,"put(URI uri, URLConnection conn)",abstract CacheRequest,"The protocol handler calls this method after a resource has been retrieved, and the ResponseCache must decide whether or not to store the resource in its cache."
ResponseCache,setDefault(ResponseCache responseCache),static void,Sets (or unsets) the system-wide cache.
SecureCacheResponse,getCipherSuite(),abstract String,Returns the cipher suite in use on the original connection that retrieved the network resource.
SecureCacheResponse,getLocalCertificateChain(),abstract List<Certificate>,Returns the certificate chain that were sent to the server during handshaking of the original connection that retrieved the network resource.
SecureCacheResponse,getLocalPrincipal(),abstract Principal,Returns the principal that was sent to the server during handshaking in the original connection that retrieved the network resource.
SecureCacheResponse,getPeerPrincipal(),abstract Principal,Returns the server's principal which was established as part of defining the session during the original connection that retrieved the network resource.
SecureCacheResponse,getServerCertificateChain(),abstract List<Certificate>,"Returns the server's certificate chain, which was established as part of defining the session in the original connection that retrieved the network resource, from cache."
ServerSocket,accept(),Socket,Listens for a connection to be made to this socket and accepts it.
ServerSocket,bind(SocketAddress endpoint),void,Binds the ServerSocket to a specific address (IP address and port number).
ServerSocket,"bind(SocketAddress endpoint, int backlog)",void,Binds the ServerSocket to a specific address (IP address and port number).
ServerSocket,close(),void,Closes this socket.
ServerSocket,getChannel(),ServerSocketChannel,"Returns the unique ServerSocketChannel object associated with this socket, if any."
ServerSocket,getInetAddress(),InetAddress,Returns the local address of this server socket.
ServerSocket,getLocalPort(),int,Returns the port number on which this socket is listening.
ServerSocket,getLocalSocketAddress(),SocketAddress,Returns the address of the endpoint this socket is bound to.
ServerSocket,getReceiveBufferSize(),int,"Gets the value of the SO_RCVBUF option for this ServerSocket, that is the proposed buffer size that will be used for Sockets accepted from this ServerSocket."
ServerSocket,getReuseAddress(),boolean,Tests if SO_REUSEADDR is enabled.
ServerSocket,getSoTimeout(),int,Retrieve setting for SO_TIMEOUT.
ServerSocket,implAccept(Socket s),protected void,Subclasses of ServerSocket use this method to override accept() to return their own subclass of socket.
ServerSocket,isBound(),boolean,Returns the binding state of the ServerSocket.
ServerSocket,isClosed(),boolean,Returns the closed state of the ServerSocket.
ServerSocket,"setPerformancePreferences(int connectionTime, int latency, int bandwidth)",void,Sets performance preferences for this ServerSocket.
ServerSocket,setReceiveBufferSize(int size),void,Sets a default proposed value for the SO_RCVBUF option for sockets accepted from this ServerSocket.
ServerSocket,setReuseAddress(boolean on),void,Enable/disable the SO_REUSEADDR socket option.
ServerSocket,setSocketFactory(SocketImplFactory fac),static void,Sets the server socket implementation factory for the application.
ServerSocket,setSoTimeout(int timeout),void,"Enable/disable SO_TIMEOUT with the specified timeout, in milliseconds."
ServerSocket,toString(),String,Returns the implementation address and implementation port of this socket as a String.
Socket,bind(SocketAddress bindpoint),void,Binds the socket to a local address.
Socket,close(),void,Closes this socket.
Socket,connect(SocketAddress endpoint),void,Connects this socket to the server.
Socket,"connect(SocketAddress endpoint, int timeout)",void,Connects this socket to the server with a specified timeout value.
Socket,getChannel(),SocketChannel,"Returns the unique SocketChannel object associated with this socket, if any."
Socket,getInetAddress(),InetAddress,Returns the address to which the socket is connected.
Socket,getInputStream(),InputStream,Returns an input stream for this socket.
Socket,getKeepAlive(),boolean,Tests if SO_KEEPALIVE is enabled.
Socket,getLocalAddress(),InetAddress,Gets the local address to which the socket is bound.
Socket,getLocalPort(),int,Returns the local port number to which this socket is bound.
Socket,getLocalSocketAddress(),SocketAddress,Returns the address of the endpoint this socket is bound to.
Socket,getOOBInline(),boolean,Tests if SO_OOBINLINE is enabled.
Socket,getOutputStream(),OutputStream,Returns an output stream for this socket.
Socket,getPort(),int,Returns the remote port number to which this socket is connected.
Socket,getReceiveBufferSize(),int,"Gets the value of the SO_RCVBUF option for this Socket, that is the buffer size used by the platform for input on this Socket."
Socket,getRemoteSocketAddress(),SocketAddress,"Returns the address of the endpoint this socket is connected to, or null if it is unconnected."
Socket,getReuseAddress(),boolean,Tests if SO_REUSEADDR is enabled.
Socket,getSendBufferSize(),int,"Get value of the SO_SNDBUF option for this Socket, that is the buffer size used by the platform for output on this Socket."
Socket,getSoLinger(),int,Returns setting for SO_LINGER.
Socket,getSoTimeout(),int,Returns setting for SO_TIMEOUT.
Socket,getTcpNoDelay(),boolean,Tests if TCP_NODELAY is enabled.
Socket,getTrafficClass(),int,Gets traffic class or type-of-service in the IP header for packets sent from this Socket
Socket,isBound(),boolean,Returns the binding state of the socket.
Socket,isClosed(),boolean,Returns the closed state of the socket.
Socket,isConnected(),boolean,Returns the connection state of the socket.
Socket,isInputShutdown(),boolean,Returns whether the read-half of the socket connection is closed.
Socket,isOutputShutdown(),boolean,Returns whether the write-half of the socket connection is closed.
Socket,sendUrgentData(int data),void,Send one byte of urgent data on the socket.
Socket,setKeepAlive(boolean on),void,Enable/disable SO_KEEPALIVE.
Socket,setOOBInline(boolean on),void,"Enable/disable SO_OOBINLINE (receipt of TCP urgent data) By default, this option is disabled and TCP urgent data received on a socket is silently discarded."
Socket,"setPerformancePreferences(int connectionTime, int latency, int bandwidth)",void,Sets performance preferences for this socket.
Socket,setReceiveBufferSize(int size),void,Sets the SO_RCVBUF option to the specified value for this Socket.
Socket,setReuseAddress(boolean on),void,Enable/disable the SO_REUSEADDR socket option.
Socket,setSendBufferSize(int size),void,Sets the SO_SNDBUF option to the specified value for this Socket.
Socket,setSocketImplFactory(SocketImplFactory fac),static void,Sets the client socket implementation factory for the application.
Socket,"setSoLinger(boolean on, int linger)",void,Enable/disable SO_LINGER with the specified linger time in seconds.
Socket,setSoTimeout(int timeout),void,"Enable/disable SO_TIMEOUT with the specified timeout, in milliseconds."
Socket,setTcpNoDelay(boolean on),void,Enable/disable TCP_NODELAY (disable/enable Nagle's algorithm).
Socket,setTrafficClass(int tc),void,Sets traffic class or type-of-service octet in the IP header for packets sent from this Socket.
Socket,shutdownInput(),void,"Places the input stream for this socket at ""end of stream""."
Socket,shutdownOutput(),void,Disables the output stream for this socket.
Socket,toString(),String,Converts this socket to a String.
SocketImpl,accept(SocketImpl s),protected abstract void,Accepts a connection.
SocketImpl,available(),protected abstract int,Returns the number of bytes that can be read from this socket without blocking.
SocketImpl,"bind(InetAddress host, int port)",protected abstract void,Binds this socket to the specified local IP address and port number.
SocketImpl,close(),protected abstract void,Closes this socket.
SocketImpl,"connect(InetAddress address, int port)",protected abstract void,Connects this socket to the specified port number on the specified host.
SocketImpl,"connect(SocketAddress address, int timeout)",protected abstract void,Connects this socket to the specified port number on the specified host.
SocketImpl,"connect(String host, int port)",protected abstract void,Connects this socket to the specified port on the named host.
SocketImpl,create(boolean stream),protected abstract void,Creates either a stream or a datagram socket.
SocketImpl,getFileDescriptor(),protected FileDescriptor,Returns the value of this socket's fd field.
SocketImpl,getInetAddress(),protected InetAddress,Returns the value of this socket's address field.
SocketImpl,getInputStream(),protected abstract InputStream,Returns an input stream for this socket.
SocketImpl,getLocalPort(),protected int,Returns the value of this socket's localport field.
SocketImpl,getOutputStream(),protected abstract OutputStream,Returns an output stream for this socket.
SocketImpl,getPort(),protected int,Returns the value of this socket's port field.
SocketImpl,listen(int backlog),protected abstract void,Sets the maximum queue length for incoming connection indications (a request to connect) to the count argument.
SocketImpl,sendUrgentData(int data),protected abstract void,Send one byte of urgent data on the socket.
SocketImpl,"setPerformancePreferences(int connectionTime, int latency, int bandwidth)",protected void,Sets performance preferences for this socket.
SocketImpl,shutdownInput(),protected void,"Places the input stream for this socket at ""end of stream""."
SocketImpl,shutdownOutput(),protected void,Disables the output stream for this socket.
SocketImpl,supportsUrgentData(),protected boolean,Returns whether or not this SocketImpl supports sending urgent data.
SocketImpl,toString(),String,Returns the address and port of this socket as a String.
SocketPermission,equals(Object obj),boolean,Checks two SocketPermission objects for equality.
SocketPermission,getActions(),String,Returns the canonical string representation of the actions.
SocketPermission,hashCode(),int,Returns the hash code value for this object.
SocketPermission,implies(Permission p),boolean,"Checks if this socket permission object ""implies"" the specified permission."
SocketPermission,newPermissionCollection(),PermissionCollection,Returns a new PermissionCollection object for storing SocketPermission objects.
URI,compareTo(URI that),int,"Compares this URI to another object, which must be a URI."
URI,create(String str),static URI,Creates a URI by parsing the given string.
URI,equals(Object ob),boolean,Tests this URI for equality with another object.
URI,getAuthority(),String,Returns the decoded authority component of this URI.
URI,getFragment(),String,Returns the decoded fragment component of this URI.
URI,getHost(),String,Returns the host component of this URI.
URI,getPath(),String,Returns the decoded path component of this URI.
URI,getPort(),int,Returns the port number of this URI.
URI,getQuery(),String,Returns the decoded query component of this URI.
URI,getRawAuthority(),String,Returns the raw authority component of this URI.
URI,getRawFragment(),String,Returns the raw fragment component of this URI.
URI,getRawPath(),String,Returns the raw path component of this URI.
URI,getRawQuery(),String,Returns the raw query component of this URI.
URI,getRawSchemeSpecificPart(),String,Returns the raw scheme-specific part of this URI.
URI,getRawUserInfo(),String,Returns the raw user-information component of this URI.
URI,getScheme(),String,Returns the scheme component of this URI.
URI,getSchemeSpecificPart(),String,Returns the decoded scheme-specific part of this URI.
URI,getUserInfo(),String,Returns the decoded user-information component of this URI.
URI,hashCode(),int,Returns a hash-code value for this URI.
URI,isAbsolute(),boolean,Tells whether or not this URI is absolute.
URI,isOpaque(),boolean,Tells whether or not this URI is opaque.
URI,normalize(),URI,Normalizes this URI's path.
URI,parseServerAuthority(),URI,"Attempts to parse this URI's authority component, if defined, into user-information, host, and port components."
URI,relativize(URI uri),URI,Relativizes the given URI against this URI.
URI,resolve(String str),URI,Constructs a new URI by parsing the given string and then resolving it against this URI.
URI,resolve(URI uri),URI,Resolves the given URI against this URI.
URI,toASCIIString(),String,Returns the content of this URI as a US-ASCII string.
URI,toString(),String,Returns the content of this URI as a string.
URI,toURL(),URL,Constructs a URL from this URI.
URL,equals(Object obj),boolean,Compares this URL for equality with another object.
URL,getAuthority(),String,Gets the authority part of this URL.
URL,getContent(),Object,Gets the contents of this URL.
URL,getContent(Class[] classes),Object,Gets the contents of this URL.
URL,getDefaultPort(),int,Gets the default port number of the protocol associated with this URL.
URL,getFile(),String,Gets the file name of this URL.
URL,getHost(),String,"Gets the host name of this URL, if applicable."
URL,getPath(),String,Gets the path part of this URL.
URL,getPort(),int,Gets the port number of this URL.
URL,getProtocol(),String,Gets the protocol name of this URL.
URL,getQuery(),String,Gets the query part of this URL.
URL,getRef(),String,"Gets the anchor (also known as the ""reference"") of this URL."
URL,getUserInfo(),String,Gets the userInfo part of this URL.
URL,hashCode(),int,Creates an integer suitable for hash table indexing.
URL,openConnection(),URLConnection,Returns a URLConnection instance that represents a connection to the remote object referred to by the URL.
URL,openConnection(Proxy proxy),URLConnection,"Same as openConnection(), except that the connection will be made through the specified proxy; Protocol handlers that do not support proxing will ignore the proxy parameter and make a normal connection."
URL,openStream(),InputStream,Opens a connection to this URL and returns an InputStream for reading from that connection.
URL,sameFile(URL other),boolean,"Compares two URLs, excluding the fragment component."
URL,setURLStreamHandlerFactory(URLStreamHandlerFactory fac),static void,Sets an application's URLStreamHandlerFactory.
URL,toExternalForm(),String,Constructs a string representation of this URL.
URL,toString(),String,Constructs a string representation of this URL.
URL,toURI(),URI,Returns a URI equivalent to this URL.
URLClassLoader,addURL(URL url),protected void,Appends the specified URL to the list of URLs to search for classes and resources.
URLClassLoader,close(),void,"Closes this URLClassLoader, so that it can no longer be used to load new classes or resources that are defined by this loader."
URLClassLoader,"definePackage(String name, Manifest man, URL url)",protected Package,Defines a new package by name in this ClassLoader.
URLClassLoader,findClass(String name),protected Class<?>,Finds and loads the class with the specified name from the URL search path.
URLClassLoader,findResource(String name),URL,Finds the resource with the specified name on the URL search path.
URLClassLoader,findResources(String name),Enumeration<URL>,Returns an Enumeration of URLs representing all of the resources on the URL search path having the specified name.
URLClassLoader,getPermissions(CodeSource codesource),protected PermissionCollection,Returns the permissions for the given codesource object.
URLClassLoader,getResourceAsStream(String name),InputStream,Returns an input stream for reading the specified resource.
URLClassLoader,getURLs(),URL[],Returns the search path of URLs for loading classes and resources.
URLClassLoader,newInstance(URL[] urls),static URLClassLoader,Creates a new instance of URLClassLoader for the specified URLs and default parent class loader.
URLClassLoader,"newInstance(URL[] urls, ClassLoader parent)",static URLClassLoader,Creates a new instance of URLClassLoader for the specified URLs and parent class loader.
URLConnection,"addRequestProperty(String key, String value)",void,Adds a general request property specified by a key-value pair.
URLConnection,connect(),abstract void,"Opens a communications link to the resource referenced by this URL, if such a connection has not already been established."
URLConnection,getAllowUserInteraction(),boolean,Returns the value of the allowUserInteraction field for this object.
URLConnection,getConnectTimeout(),int,Returns setting for connect timeout.
URLConnection,getContent(),Object,Retrieves the contents of this URL connection.
URLConnection,getContent(Class[] classes),Object,Retrieves the contents of this URL connection.
URLConnection,getContentEncoding(),String,Returns the value of the content-encoding header field.
URLConnection,getContentLength(),int,Returns the value of the content-length header field.
URLConnection,getContentLengthLong(),long,Returns the value of the content-length header field as a long.
URLConnection,getContentType(),String,Returns the value of the content-type header field.
URLConnection,getDate(),long,Returns the value of the date header field.
URLConnection,getDefaultAllowUserInteraction(),static boolean,Returns the default value of the allowUserInteraction field.
URLConnection,getDefaultRequestProperty(String key),static String,Deprecated. The instance specific getRequestProperty method should be used after an appropriate instance of URLConnection is obtained.
URLConnection,getDefaultUseCaches(),boolean,Returns the default value of a URLConnection's useCaches flag.
URLConnection,getDoInput(),boolean,Returns the value of this URLConnection's doInput flag.
URLConnection,getDoOutput(),boolean,Returns the value of this URLConnection's doOutput flag.
URLConnection,getExpiration(),long,Returns the value of the expires header field.
URLConnection,getFileNameMap(),static FileNameMap,Loads filename map (a mimetable) from a data file.
URLConnection,getHeaderField(int n),String,Returns the value for the nth header field.
URLConnection,getHeaderField(String name),String,Returns the value of the named header field.
URLConnection,"getHeaderFieldDate(String name, long Default)",long,Returns the value of the named field parsed as date.
URLConnection,"getHeaderFieldInt(String name, int Default)",int,Returns the value of the named field parsed as a number.
URLConnection,getHeaderFieldKey(int n),String,Returns the key for the nth header field.
URLConnection,"getHeaderFieldLong(String name, long Default)",long,Returns the value of the named field parsed as a number.
URLConnection,getHeaderFields(),"Map<String,List<String>>",Returns an unmodifiable Map of the header fields.
URLConnection,getIfModifiedSince(),long,Returns the value of this object's ifModifiedSince field.
URLConnection,getInputStream(),InputStream,Returns an input stream that reads from this open connection.
URLConnection,getLastModified(),long,Returns the value of the last-modified header field.
URLConnection,getOutputStream(),OutputStream,Returns an output stream that writes to this connection.
URLConnection,getPermission(),Permission,Returns a permission object representing the permission necessary to make the connection represented by this object.
URLConnection,getReadTimeout(),int,Returns setting for read timeout.
URLConnection,getRequestProperties(),"Map<String,List<String>>",Returns an unmodifiable Map of general request properties for this connection.
URLConnection,getRequestProperty(String key),String,Returns the value of the named general request property for this connection.
URLConnection,getURL(),URL,Returns the value of this URLConnection's URL field.
URLConnection,getUseCaches(),boolean,Returns the value of this URLConnection's useCaches field.
URLConnection,guessContentTypeFromName(String fname),static String,"Tries to determine the content type of an object, based on the specified ""file"" component of a URL."
URLConnection,guessContentTypeFromStream(InputStream is),static String,Tries to determine the type of an input stream based on the characters at the beginning of the input stream.
URLConnection,setAllowUserInteraction(boolean allowuserinteraction),void,Set the value of the allowUserInteraction field of this URLConnection.
URLConnection,setConnectTimeout(int timeout),void,"Sets a specified timeout value, in milliseconds, to be used when opening a communications link to the resource referenced by this URLConnection."
URLConnection,setContentHandlerFactory(ContentHandlerFactory fac),static void,Sets the ContentHandlerFactory of an application.
URLConnection,setDefaultAllowUserInteraction(boolean defaultallowuserinteraction),static void,Sets the default value of the allowUserInteraction field for all future URLConnection objects to the specified value.
URLConnection,"setDefaultRequestProperty(String key, String value)",static void,Deprecated. The instance specific setRequestProperty method should be used after an appropriate instance of URLConnection is obtained. Invoking this method will have no effect.
URLConnection,setDefaultUseCaches(boolean defaultusecaches),void,Sets the default value of the useCaches field to the specified value.
URLConnection,setDoInput(boolean doinput),void,Sets the value of the doInput field for this URLConnection to the specified value.
URLConnection,setDoOutput(boolean dooutput),void,Sets the value of the doOutput field for this URLConnection to the specified value.
URLConnection,setFileNameMap(FileNameMap map),static void,Sets the FileNameMap.
URLConnection,setIfModifiedSince(long ifmodifiedsince),void,Sets the value of the ifModifiedSince field of this URLConnection to the specified value.
URLConnection,setReadTimeout(int timeout),void,"Sets the read timeout to a specified timeout, in milliseconds."
URLConnection,"setRequestProperty(String key, String value)",void,Sets the general request property.
URLConnection,setUseCaches(boolean usecaches),void,Sets the value of the useCaches field of this URLConnection to the specified value.
URLConnection,toString(),String,Returns a String representation of this URL connection.
URLDecoder,decode(String s),static String,"Deprecated. The resulting string may vary depending on the platform's default encoding. Instead, use the decode(String,String) method to specify the encoding."
URLDecoder,"decode(String s, String enc)",static String,Decodes a application/x-www-form-urlencoded string using a specific encoding scheme.
URLEncoder,encode(String s),static String,"Deprecated. The resulting string may vary depending on the platform's default encoding. Instead, use the encode(String,String) method to specify the encoding."
URLEncoder,"encode(String s, String enc)",static String,Translates a string into application/x-www-form-urlencoded format using a specific encoding scheme.
URLPermission,equals(Object p),boolean,"Returns true if, this.getActions().equals(p.getActions()) and p's url equals this's url."
URLPermission,getActions(),String,"Returns the normalized method list and request header list, in the form:"
URLPermission,hashCode(),int,Returns a hashcode calculated from the hashcode of the actions String and the url string.
URLPermission,implies(Permission p),boolean,Checks if this URLPermission implies the given permission.
URLStreamHandler,"equals(URL u1, URL u2)",protected boolean,Provides the default equals calculation.
URLStreamHandler,getDefaultPort(),protected int,Returns the default port for a URL parsed by this handler.
URLStreamHandler,getHostAddress(URL u),protected InetAddress,Get the IP address of our host.
URLStreamHandler,hashCode(URL u),protected int,Provides the default hash calculation.
URLStreamHandler,"hostsEqual(URL u1, URL u2)",protected boolean,Compares the host components of two URLs.
URLStreamHandler,openConnection(URL u),protected abstract URLConnection,Opens a connection to the object referenced by the URL argument.
URLStreamHandler,"openConnection(URL u, Proxy p)",protected URLConnection,"Same as openConnection(URL), except that the connection will be made through the specified proxy; Protocol handlers that do not support proxying will ignore the proxy parameter and make a normal connection."
URLStreamHandler,"parseURL(URL u, String spec, int start, int limit)",protected void,Parses the string representation of a URL into a URL object.
URLStreamHandler,"sameFile(URL u1, URL u2)",protected boolean,"Compare two urls to see whether they refer to the same file, i.e., having the same protocol, host, port, and path."
URLStreamHandler,"setURL(URL u, String protocol, String host, int port, String file, String ref)",protected void,"Deprecated. Use setURL(URL, String, String, int, String, String, String, String);"
URLStreamHandler,"setURL(URL u, String protocol, String host, int port, String authority, String userInfo, String path, String query, String ref)",protected void,Sets the fields of the URL argument to the indicated values.
URLStreamHandler,toExternalForm(URL u),protected String,Converts a URL of a specific protocol to a String.
