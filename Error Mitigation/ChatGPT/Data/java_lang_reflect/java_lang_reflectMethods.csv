ClassName,Method,Return Type,Description
AccessibleObject,getAnnotation(Class<T> annotationClass),<T extends Annotation>T,"Returns this element's annotation for the specified type if such an annotation is present, else null."
AccessibleObject,getAnnotations(),Annotation[],Returns annotations that are present on this element.
AccessibleObject,getAnnotationsByType(Class<T> annotationClass),<T extends Annotation>T[],Returns annotations that are associated with this element.
AccessibleObject,getDeclaredAnnotation(Class<T> annotationClass),<T extends Annotation>T,"Returns this element's annotation for the specified type if such an annotation is directly present, else null."
AccessibleObject,getDeclaredAnnotations(),Annotation[],Returns annotations that are directly present on this element.
AccessibleObject,getDeclaredAnnotationsByType(Class<T> annotationClass),<T extends Annotation>T[],Returns this element's annotation(s) for the specified type if such annotations are either directly present or indirectly present.
AccessibleObject,isAccessible(),boolean,Get the value of the accessible flag for this object.
AccessibleObject,isAnnotationPresent(Class<? extends Annotation> annotationClass),boolean,"Returns true if an annotation for the specified type is present on this element, else false."
AccessibleObject,"setAccessible(AccessibleObject[] array, boolean flag)",static void,Convenience method to set the accessible flag for an array of objects with a single security check (for efficiency).
AccessibleObject,setAccessible(boolean flag),void,Set the accessible flag for this object to the indicated boolean value.
Array,"get(Object array, int index)",static Object,Returns the value of the indexed component in the specified array object.
Array,"getBoolean(Object array, int index)",static boolean,"Returns the value of the indexed component in the specified array object, as a boolean."
Array,"getByte(Object array, int index)",static byte,"Returns the value of the indexed component in the specified array object, as a byte."
Array,"getChar(Object array, int index)",static char,"Returns the value of the indexed component in the specified array object, as a char."
Array,"getDouble(Object array, int index)",static double,"Returns the value of the indexed component in the specified array object, as a double."
Array,"getFloat(Object array, int index)",static float,"Returns the value of the indexed component in the specified array object, as a float."
Array,"getInt(Object array, int index)",static int,"Returns the value of the indexed component in the specified array object, as an int."
Array,getLength(Object array),static int,"Returns the length of the specified array object, as an int."
Array,"getLong(Object array, int index)",static long,"Returns the value of the indexed component in the specified array object, as a long."
Array,"getShort(Object array, int index)",static short,"Returns the value of the indexed component in the specified array object, as a short."
Array,"newInstance(Class<?> componentType, int... dimensions)",static Object,Creates a new array with the specified component type and dimensions.
Array,"newInstance(Class<?> componentType, int length)",static Object,Creates a new array with the specified component type and length.
Array,"set(Object array, int index, Object value)",static void,Sets the value of the indexed component of the specified array object to the specified new value.
Array,"setBoolean(Object array, int index, boolean z)",static void,Sets the value of the indexed component of the specified array object to the specified boolean value.
Array,"setByte(Object array, int index, byte b)",static void,Sets the value of the indexed component of the specified array object to the specified byte value.
Array,"setChar(Object array, int index, char c)",static void,Sets the value of the indexed component of the specified array object to the specified char value.
Array,"setDouble(Object array, int index, double d)",static void,Sets the value of the indexed component of the specified array object to the specified double value.
Array,"setFloat(Object array, int index, float f)",static void,Sets the value of the indexed component of the specified array object to the specified float value.
Array,"setInt(Object array, int index, int i)",static void,Sets the value of the indexed component of the specified array object to the specified int value.
Array,"setLong(Object array, int index, long l)",static void,Sets the value of the indexed component of the specified array object to the specified long value.
Array,"setShort(Object array, int index, short s)",static void,Sets the value of the indexed component of the specified array object to the specified short value.
Constructor,equals(Object obj),boolean,Compares this Constructor against the specified object.
Constructor,getAnnotatedReceiverType(),AnnotatedType,Returns an AnnotatedType object that represents the use of a type to specify the receiver type of the method/constructor represented by this Executable object.
Constructor,getAnnotatedReturnType(),AnnotatedType,Returns an AnnotatedType object that represents the use of a type to specify the return type of the method/constructor represented by this Executable.
Constructor,getAnnotation(Class<T> annotationClass),<T extends Annotation>T,"Returns this element's annotation for the specified type if such an annotation is present, else null."
Constructor,getDeclaredAnnotations(),Annotation[],Returns annotations that are directly present on this element.
Constructor,getDeclaringClass(),Class<T>,Returns the Class object representing the class or interface that declares the executable represented by this object.
Constructor,getExceptionTypes(),Class<?>[],Returns an array of Class objects that represent the types of exceptions declared to be thrown by the underlying executable represented by this object.
Constructor,getGenericExceptionTypes(),Type[],Returns an array of Type objects that represent the exceptions declared to be thrown by this executable object.
Constructor,getGenericParameterTypes(),Type[],"Returns an array of Type objects that represent the formal parameter types, in declaration order, of the executable represented by this object."
Constructor,getModifiers(),int,Returns the Java language modifiers for the executable represented by this object.
Constructor,getName(),String,"Returns the name of this constructor, as a string."
Constructor,getParameterAnnotations(),Annotation[][],"Returns an array of arrays of Annotations that represent the annotations on the formal parameters, in declaration order, of the Executable represented by this object."
Constructor,getParameterCount(),int,Returns the number of formal parameters (whether explicitly declared or implicitly declared or neither) for the executable represented by this object.
Constructor,getParameterTypes(),Class<?>[],"Returns an array of Class objects that represent the formal parameter types, in declaration order, of the executable represented by this object."
Constructor,getTypeParameters(),TypeVariable<Constructor<T>>[],"Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order."
Constructor,hashCode(),int,Returns a hashcode for this Constructor.
Constructor,isSynthetic(),boolean,Returns true if this executable is a synthetic construct; returns false otherwise.
Constructor,isVarArgs(),boolean,Returns true if this executable was declared to take a variable number of arguments; returns false otherwise.
Constructor,newInstance(Object... initargs),T,"Uses the constructor represented by this Constructor object to create and initialize a new instance of the constructor's declaring class, with the specified initialization parameters."
Constructor,toGenericString(),String,"Returns a string describing this Constructor, including type parameters."
Constructor,toString(),String,Returns a string describing this Constructor.
Executable,getAnnotatedExceptionTypes(),AnnotatedType[],Returns an array of AnnotatedType objects that represent the use of types to specify the declared exceptions of the method/constructor represented by this Executable.
Executable,getAnnotatedParameterTypes(),AnnotatedType[],Returns an array of AnnotatedType objects that represent the use of types to specify formal parameter types of the method/constructor represented by this Executable.
Executable,getAnnotatedReceiverType(),AnnotatedType,Returns an AnnotatedType object that represents the use of a type to specify the receiver type of the method/constructor represented by this Executable object.
Executable,getAnnotatedReturnType(),abstract AnnotatedType,Returns an AnnotatedType object that represents the use of a type to specify the return type of the method/constructor represented by this Executable.
Executable,getAnnotation(Class<T> annotationClass),<T extends Annotation>T,"Returns this element's annotation for the specified type if such an annotation is present, else null."
Executable,getAnnotationsByType(Class<T> annotationClass),<T extends Annotation>T[],Returns annotations that are associated with this element.
Executable,getDeclaredAnnotations(),Annotation[],Returns annotations that are directly present on this element.
Executable,getDeclaringClass(),abstract Class<?>,Returns the Class object representing the class or interface that declares the executable represented by this object.
Executable,getExceptionTypes(),abstract Class<?>[],Returns an array of Class objects that represent the types of exceptions declared to be thrown by the underlying executable represented by this object.
Executable,getGenericExceptionTypes(),Type[],Returns an array of Type objects that represent the exceptions declared to be thrown by this executable object.
Executable,getGenericParameterTypes(),Type[],"Returns an array of Type objects that represent the formal parameter types, in declaration order, of the executable represented by this object."
Executable,getModifiers(),abstract int,Returns the Java language modifiers for the executable represented by this object.
Executable,getName(),abstract String,Returns the name of the executable represented by this object.
Executable,getParameterAnnotations(),abstract Annotation[][],"Returns an array of arrays of Annotations that represent the annotations on the formal parameters, in declaration order, of the Executable represented by this object."
Executable,getParameterCount(),int,Returns the number of formal parameters (whether explicitly declared or implicitly declared or neither) for the executable represented by this object.
Executable,getParameters(),Parameter[],Returns an array of Parameter objects that represent all the parameters to the underlying executable represented by this object.
Executable,getParameterTypes(),abstract Class<?>[],"Returns an array of Class objects that represent the formal parameter types, in declaration order, of the executable represented by this object."
Executable,getTypeParameters(),abstract TypeVariable<?>[],"Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order."
Executable,isSynthetic(),boolean,Returns true if this executable is a synthetic construct; returns false otherwise.
Executable,isVarArgs(),boolean,Returns true if this executable was declared to take a variable number of arguments; returns false otherwise.
Executable,toGenericString(),abstract String,"Returns a string describing this Executable, including any type parameters."
Field,equals(Object obj),boolean,Compares this Field against the specified object.
Field,get(Object obj),Object,"Returns the value of the field represented by this Field, on the specified object."
Field,getAnnotatedType(),AnnotatedType,Returns an AnnotatedType object that represents the use of a type to specify the declared type of the field represented by this Field.
Field,getAnnotation(Class<T> annotationClass),<T extends Annotation>T,"Returns this element's annotation for the specified type if such an annotation is present, else null."
Field,getAnnotationsByType(Class<T> annotationClass),<T extends Annotation>T[],Returns annotations that are associated with this element.
Field,getBoolean(Object obj),boolean,Gets the value of a static or instance boolean field.
Field,getByte(Object obj),byte,Gets the value of a static or instance byte field.
Field,getChar(Object obj),char,Gets the value of a static or instance field of type char or of another primitive type convertible to type char via a widening conversion.
Field,getDeclaredAnnotations(),Annotation[],Returns annotations that are directly present on this element.
Field,getDeclaringClass(),Class<?>,Returns the Class object representing the class or interface that declares the field represented by this Field object.
Field,getDouble(Object obj),double,Gets the value of a static or instance field of type double or of another primitive type convertible to type double via a widening conversion.
Field,getFloat(Object obj),float,Gets the value of a static or instance field of type float or of another primitive type convertible to type float via a widening conversion.
Field,getGenericType(),Type,Returns a Type object that represents the declared type for the field represented by this Field object.
Field,getInt(Object obj),int,Gets the value of a static or instance field of type int or of another primitive type convertible to type int via a widening conversion.
Field,getLong(Object obj),long,Gets the value of a static or instance field of type long or of another primitive type convertible to type long via a widening conversion.
Field,getModifiers(),int,"Returns the Java language modifiers for the field represented by this Field object, as an integer."
Field,getName(),String,Returns the name of the field represented by this Field object.
Field,getShort(Object obj),short,Gets the value of a static or instance field of type short or of another primitive type convertible to type short via a widening conversion.
Field,getType(),Class<?>,Returns a Class object that identifies the declared type for the field represented by this Field object.
Field,hashCode(),int,Returns a hashcode for this Field.
Field,isEnumConstant(),boolean,Returns true if this field represents an element of an enumerated type; returns false otherwise.
Field,isSynthetic(),boolean,Returns true if this field is a synthetic field; returns false otherwise.
Field,"set(Object obj, Object value)",void,Sets the field represented by this Field object on the specified object argument to the specified new value.
Field,"setBoolean(Object obj, boolean z)",void,Sets the value of a field as a boolean on the specified object.
Field,"setByte(Object obj, byte b)",void,Sets the value of a field as a byte on the specified object.
Field,"setChar(Object obj, char c)",void,Sets the value of a field as a char on the specified object.
Field,"setDouble(Object obj, double d)",void,Sets the value of a field as a double on the specified object.
Field,"setFloat(Object obj, float f)",void,Sets the value of a field as a float on the specified object.
Field,"setInt(Object obj, int i)",void,Sets the value of a field as an int on the specified object.
Field,"setLong(Object obj, long l)",void,Sets the value of a field as a long on the specified object.
Field,"setShort(Object obj, short s)",void,Sets the value of a field as a short on the specified object.
Field,toGenericString(),String,"Returns a string describing this Field, including its generic type."
Field,toString(),String,Returns a string describing this Field.
Method,equals(Object obj),boolean,Compares this Method against the specified object.
Method,getAnnotatedReturnType(),AnnotatedType,Returns an AnnotatedType object that represents the use of a type to specify the return type of the method/constructor represented by this Executable.
Method,getAnnotation(Class<T> annotationClass),<T extends Annotation>T,"Returns this element's annotation for the specified type if such an annotation is present, else null."
Method,getDeclaredAnnotations(),Annotation[],Returns annotations that are directly present on this element.
Method,getDeclaringClass(),Class<?>,Returns the Class object representing the class or interface that declares the executable represented by this object.
Method,getDefaultValue(),Object,Returns the default value for the annotation member represented by this Method instance.
Method,getExceptionTypes(),Class<?>[],Returns an array of Class objects that represent the types of exceptions declared to be thrown by the underlying executable represented by this object.
Method,getGenericExceptionTypes(),Type[],Returns an array of Type objects that represent the exceptions declared to be thrown by this executable object.
Method,getGenericParameterTypes(),Type[],"Returns an array of Type objects that represent the formal parameter types, in declaration order, of the executable represented by this object."
Method,getGenericReturnType(),Type,Returns a Type object that represents the formal return type of the method represented by this Method object.
Method,getModifiers(),int,Returns the Java language modifiers for the executable represented by this object.
Method,getName(),String,"Returns the name of the method represented by this Method object, as a String."
Method,getParameterAnnotations(),Annotation[][],"Returns an array of arrays of Annotations that represent the annotations on the formal parameters, in declaration order, of the Executable represented by this object."
Method,getParameterCount(),int,Returns the number of formal parameters (whether explicitly declared or implicitly declared or neither) for the executable represented by this object.
Method,getParameterTypes(),Class<?>[],"Returns an array of Class objects that represent the formal parameter types, in declaration order, of the executable represented by this object."
Method,getReturnType(),Class<?>,Returns a Class object that represents the formal return type of the method represented by this Method object.
Method,getTypeParameters(),TypeVariable<Method>[],"Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order."
Method,hashCode(),int,Returns a hashcode for this Method.
Method,"invoke(Object obj, Object... args)",Object,"Invokes the underlying method represented by this Method object, on the specified object with the specified parameters."
Method,isBridge(),boolean,Returns true if this method is a bridge method; returns false otherwise.
Method,isDefault(),boolean,Returns true if this method is a default method; returns false otherwise.
Method,isSynthetic(),boolean,Returns true if this executable is a synthetic construct; returns false otherwise.
Method,isVarArgs(),boolean,Returns true if this executable was declared to take a variable number of arguments; returns false otherwise.
Method,toGenericString(),String,"Returns a string describing this Method, including type parameters."
Method,toString(),String,Returns a string describing this Method.
Modifier,classModifiers(),static int,Return an int value OR-ing together the source language modifiers that can be applied to a class.
Modifier,constructorModifiers(),static int,Return an int value OR-ing together the source language modifiers that can be applied to a constructor.
Modifier,fieldModifiers(),static int,Return an int value OR-ing together the source language modifiers that can be applied to a field.
Modifier,interfaceModifiers(),static int,Return an int value OR-ing together the source language modifiers that can be applied to an interface.
Modifier,isAbstract(int mod),static boolean,"Return true if the integer argument includes the abstract modifier, false otherwise."
Modifier,isFinal(int mod),static boolean,"Return true if the integer argument includes the final modifier, false otherwise."
Modifier,isInterface(int mod),static boolean,"Return true if the integer argument includes the interface modifier, false otherwise."
Modifier,isNative(int mod),static boolean,"Return true if the integer argument includes the native modifier, false otherwise."
Modifier,isPrivate(int mod),static boolean,"Return true if the integer argument includes the private modifier, false otherwise."
Modifier,isProtected(int mod),static boolean,"Return true if the integer argument includes the protected modifier, false otherwise."
Modifier,isPublic(int mod),static boolean,"Return true if the integer argument includes the public modifier, false otherwise."
Modifier,isStatic(int mod),static boolean,"Return true if the integer argument includes the static modifier, false otherwise."
Modifier,isStrict(int mod),static boolean,"Return true if the integer argument includes the strictfp modifier, false otherwise."
Modifier,isSynchronized(int mod),static boolean,"Return true if the integer argument includes the synchronized modifier, false otherwise."
Modifier,isTransient(int mod),static boolean,"Return true if the integer argument includes the transient modifier, false otherwise."
Modifier,isVolatile(int mod),static boolean,"Return true if the integer argument includes the volatile modifier, false otherwise."
Modifier,methodModifiers(),static int,Return an int value OR-ing together the source language modifiers that can be applied to a method.
Modifier,parameterModifiers(),static int,Return an int value OR-ing together the source language modifiers that can be applied to a parameter.
Modifier,toString(int mod),static String,Return a string describing the access modifier flags in the specified modifier.
Parameter,equals(Object obj),boolean,Compares based on the executable and the index.
Parameter,getAnnotatedType(),AnnotatedType,Returns an AnnotatedType object that represents the use of a type to specify the type of the formal parameter represented by this Parameter.
Parameter,getAnnotation(Class<T> annotationClass),<T extends Annotation>T,"Returns this element's annotation for the specified type if such an annotation is present, else null."
Parameter,getAnnotations(),Annotation[],Returns annotations that are present on this element.
Parameter,getAnnotationsByType(Class<T> annotationClass),<T extends Annotation>T[],Returns annotations that are associated with this element.
Parameter,getDeclaredAnnotation(Class<T> annotationClass),<T extends Annotation>T,"Returns this element's annotation for the specified type if such an annotation is directly present, else null."
Parameter,getDeclaredAnnotations(),Annotation[],Returns annotations that are directly present on this element.
Parameter,getDeclaredAnnotationsByType(Class<T> annotationClass),<T extends Annotation>T[],Returns this element's annotation(s) for the specified type if such annotations are either directly present or indirectly present.
Parameter,getDeclaringExecutable(),Executable,Return the Executable which declares this parameter.
Parameter,getModifiers(),int,Get the modifier flags for this the parameter represented by this Parameter object.
Parameter,getName(),String,Returns the name of the parameter.
Parameter,getParameterizedType(),Type,Returns a Type object that identifies the parameterized type for the parameter represented by this Parameter object.
Parameter,getType(),Class<?>,Returns a Class object that identifies the declared type for the parameter represented by this Parameter object.
Parameter,hashCode(),int,Returns a hash code based on the executable's hash code and the index.
Parameter,isImplicit(),boolean,Returns true if this parameter is implicitly declared in source code; returns false otherwise.
Parameter,isNamePresent(),boolean,Returns true if the parameter has a name according to the class file; returns false otherwise.
Parameter,isSynthetic(),boolean,Returns true if this parameter is neither implicitly nor explicitly declared in source code; returns false otherwise.
Parameter,isVarArgs(),boolean,Returns true if this parameter represents a variable argument list; returns false otherwise.
Parameter,toString(),String,Returns a string describing this parameter.
Proxy,getInvocationHandler(Object proxy),static InvocationHandler,Returns the invocation handler for the specified proxy instance.
Proxy,"getProxyClass(ClassLoader loader, Class<?>... interfaces)",static Class<?>,Returns the java.lang.Class object for a proxy class given a class loader and an array of interfaces.
Proxy,isProxyClass(Class<?> cl),static boolean,Returns true if and only if the specified class was dynamically generated to be a proxy class using the getProxyClass method or the newProxyInstance method.
Proxy,"newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h)",static Object,Returns an instance of a proxy class for the specified interfaces that dispatches method invocations to the specified invocation handler.
