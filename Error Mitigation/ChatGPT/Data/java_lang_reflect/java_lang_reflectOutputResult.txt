Sample: AccessibleObject_1
----------------------------------------------------------------
output:
./Data/java_lang_reflect/javaFiles/AccessibleObject_1.java:6: error: illegal start of expression
        try {
        ^
1 error


================================================================

Sample: AccessibleObject_2
----------------------------------------------------------------
stdout:
Is accessible: false

stderr:
Note: ./Data/java_lang_reflect/javaFiles/AccessibleObject_2.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.

================================================================

Sample: AccessibleObject_3
----------------------------------------------------------------
output:
./Data/java_lang_reflect/javaFiles/AccessibleObject_3.java:7: error: '.class' expected
        Annotation[] annotations = accessibleObject.getAnnotations();
                     ^
1 error


================================================================

Sample: AccessibleObject_5
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.NullPointerException: Cannot invoke "java.lang.reflect.AccessibleObject.checkCanSetAccessible(java.lang.Class)" because "ao" is null
	at java.base/java.lang.reflect.AccessibleObject.setAccessible(AccessibleObject.java:130)
	at AccessibleObject_5.main(AccessibleObject_5.java:11)

================================================================

Sample: Array_1
----------------------------------------------------------------
stdout:
0
10
20
30
40

================================================================

Sample: Array_2
----------------------------------------------------------------
stdout:
Length of the array: 5

================================================================

Sample: Array_3
----------------------------------------------------------------
stdout:
Value at index 2: 3

================================================================

Sample: Array_4
----------------------------------------------------------------
stdout:
0
0
10
0
0

================================================================

Sample: Constructor_2
----------------------------------------------------------------
================================================================

Sample: Constructor_3
----------------------------------------------------------------
stdout:
Modifiers: public
Modifiers: public
Modifiers: public
Modifiers: public
Modifiers: public
Modifiers: public
Modifiers: public
Modifiers: public
Modifiers: public
Modifiers: public
Modifiers: public
Modifiers: public
Modifiers: public
Modifiers: public
Modifiers: public

================================================================

Sample: Constructor_4
----------------------------------------------------------------
output:
./Data/java_lang_reflect/javaFiles/Constructor_4.java:5: error: unreported exception NoSuchMethodException; must be caught or declared to be thrown
        Constructor<?> constructor = Constructor_4.class.getConstructor();
                                                                       ^
1 error


================================================================

Sample: Constructor_5
----------------------------------------------------------------
stdout:
Parameter types for String constructor:
java.lang.String

================================================================

Sample: Executable_2
----------------------------------------------------------------
stdout:
Declaring class: Executable_2

================================================================

Sample: Executable_3
----------------------------------------------------------------
output:
./Data/java_lang_reflect/javaFiles/Executable_3.java:6: error: '.class' expected
        int parameterCount = executable.getParameterCount();
            ^
1 error


================================================================

Sample: Executable_4
----------------------------------------------------------------
================================================================

Sample: Field_1
----------------------------------------------------------------
stdout:
Declaring class: MyClass

================================================================

Sample: Field_2
----------------------------------------------------------------
================================================================

Sample: Field_3
----------------------------------------------------------------
output:
./Data/java_lang_reflect/javaFiles/Field_3.java:5: error: unreported exception NoSuchFieldException; must be caught or declared to be thrown
        Field field = Field_3.class.getDeclaredField("fieldName");
                                                    ^
1 error


================================================================

Sample: Field_4
----------------------------------------------------------------
================================================================

Sample: Field_5
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.reflect.InaccessibleObjectException: Unable to make field private final byte[] java.lang.String.value accessible: module java.base does not "opens java.lang" to unnamed module @15b3e5b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at Field_5.main(Field_5.java:8)

================================================================

Sample: Method_1
----------------------------------------------------------------
output:
./Data/java_lang_reflect/javaFiles/Method_1.java:5: error: unreported exception NoSuchMethodException; must be caught or declared to be thrown
        Method method = Method_1.class.getMethod("main", String[].class);
                                                ^
1 error


================================================================

Sample: Method_2
----------------------------------------------------------------
output:
./Data/java_lang_reflect/javaFiles/Method_2.java:5: error: unreported exception NoSuchMethodException; must be caught or declared to be thrown
        Method method = Method_2.class.getMethod("main", String[].class);
                                                ^
1 error


================================================================

Sample: Method_3
----------------------------------------------------------------
stdout:
Parameter types for method 'main':
[Ljava.lang.String;

================================================================

Sample: Method_4
----------------------------------------------------------------
stdout:
Length of the string: 5

================================================================

Sample: Method_5
----------------------------------------------------------------
stdout:
Method name: main
Modifiers: public static

Method name: wait
Modifiers: public final

Method name: wait
Modifiers: public final

Method name: wait
Modifiers: public final native

Method name: equals
Modifiers: public

Method name: toString
Modifiers: public

Method name: hashCode
Modifiers: public native

Method name: getClass
Modifiers: public final native

Method name: notify
Modifiers: public final native

Method name: notifyAll
Modifiers: public final native


================================================================

Sample: Parameter_1
----------------------------------------------------------------
output:
./Data/java_lang_reflect/javaFiles/Parameter_1.java:6: error: ';' expected
        String paramName = parameter.getName();
              ^
1 error


================================================================

Sample: Parameter_2
----------------------------------------------------------------
stdout:
Modifiers for parameter: 0

================================================================

Sample: Parameter_3
----------------------------------------------------------------
stdout:
Parameterized Type: java.lang.String
Parameterized Type: int

================================================================

Sample: Parameter_5
----------------------------------------------------------------
stdout:
Annotated Type: int

================================================================

Sample: Proxy_1
----------------------------------------------------------------
stdout:
Method myMethod is being called

================================================================

Sample: Proxy_2
----------------------------------------------------------------
stdout:
Proxy class: jdk.proxy1.$Proxy0

stderr:
Note: ./Data/java_lang_reflect/javaFiles/Proxy_2.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.

================================================================

Sample: Proxy_3
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.IllegalArgumentException: not a proxy instance
	at java.base/java.lang.reflect.Proxy.getInvocationHandler(Proxy.java:1136)
	at Proxy_3.main(Proxy_3.java:7)

================================================================

Sample: Proxy_4
----------------------------------------------------------------
stderr:
Note: ./Data/java_lang_reflect/javaFiles/Proxy_4.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
Exception in thread "main" java.lang.IllegalArgumentException: Proxy_4 is not an interface
	at java.base/java.lang.reflect.Proxy$ProxyBuilder.validateProxyInterfaces(Proxy.java:706)
	at java.base/java.lang.reflect.Proxy$ProxyBuilder.<init>(Proxy.java:648)
	at java.base/java.lang.reflect.Proxy$ProxyBuilder.<init>(Proxy.java:656)
	at java.base/java.lang.reflect.Proxy.lambda$getProxyConstructor$0(Proxy.java:429)
	at java.base/jdk.internal.loader.AbstractClassLoaderValue$Memoizer.get(AbstractClassLoaderValue.java:329)
	at java.base/jdk.internal.loader.AbstractClassLoaderValue.computeIfAbsent(AbstractClassLoaderValue.java:205)
	at java.base/java.lang.reflect.Proxy.getProxyConstructor(Proxy.java:427)
	at java.base/java.lang.reflect.Proxy.getProxyClass(Proxy.java:398)
	at Proxy_4.main(Proxy_4.java:5)

================================================================

