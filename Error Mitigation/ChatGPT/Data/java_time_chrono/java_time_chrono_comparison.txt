Sample: 0 AbstractChronology
----------------------------------------------------------------
1. `ChronoLocalDate date(int prolepticYear, int month, int dayOfMonth)`: This method returns a ChronoLocalDate representing the specified date in this chronology.
2. `ChronoLocalDate dateNow()`: This method returns the current date in this chronology.
3. `ChronoLocalDate dateNow(Clock clock)`: This method returns the current date in this chronology based on the specified clock.
4. `ChronoLocalDate dateNow(ZoneId zone)`: This method returns the current date in this chronology based on the specified time-zone.
5. `ChronoLocalDate dateNow(Chronology chrono)`: This method returns the current date in the specified chronology.
================================================================

Sample: 1 HijrahChronology
----------------------------------------------------------------
1. `HijrahDate date(int prolepticYear, int month, int dayOfMonth)`: This method returns a Hijrah date based on the proleptic year, month, and day of the month.
2. `HijrahDate date(TemporalAccessor temporal)`: This method returns a Hijrah date based on the specified temporal accessor.
3. `HijrahEra eraOf(int eraValue)`: This method returns the Hijrah era for the specified era value.
4. `HijrahDate now()`: This method returns the current Hijrah date based on the system clock.
5. `HijrahDate dateNow(Clock clock)`: This method returns the current Hijrah date based on the specified clock.
================================================================

Sample: 2 HijrahDate
----------------------------------------------------------------
1. `HijrahDate plusDays(long days)`: This method returns a new HijrahDate object that is a specified number of days after this date.
2. `HijrahDate minusDays(long days)`: This method returns a new HijrahDate object that is a specified number of days before this date.
3. `HijrahDate with(TemporalAdjuster adjuster)`: This method returns a new HijrahDate object based on the specified TemporalAdjuster.
4. `HijrahDate withYear(int year)`: This method returns a new HijrahDate object with the specified year.
5. `HijrahDate withMonth(int month)`: This method returns a new HijrahDate object with the specified month.
================================================================

Sample: 3 IsoChronology
----------------------------------------------------------------
1. `IsoChronology getInstance()`: This method returns the singleton instance of the ISO calendar system.
2. `boolean isLeapYear(long prolepticYear)`: This method checks if the specified proleptic year is a leap year in the ISO calendar system.
3. `int prolepticYear(Era era, int yearOfEra)`: This method calculates the proleptic year from the era and year of era in the ISO calendar system.
4. `IsoEra eraOf(int eraValue)`: This method returns the ISO era for the specified era value.
5. `int eraValue(Era era)`: This method returns the era value for the specified ISO era.
================================================================

Sample: 4 JapaneseChronology
----------------------------------------------------------------
1. `JapaneseDate date(int prolepticYear, int month, int dayOfMonth)`: This method returns a JapaneseDate with the specified proleptic year, month, and day of month.
2. `JapaneseEra eraOf(int eraValue)`: This method returns the JapaneseEra for the specified era value.
3. `JapaneseDate date(Era era, int yearOfEra, int month, int dayOfMonth)`: This method returns a JapaneseDate with the specified era, year of era, month, and day of month.
4. `JapaneseDate dateNow()`: This method returns the current JapaneseDate based on the system clock.
5. `JapaneseDate dateNow(Clock clock)`: This method returns the current JapaneseDate based on the specified clock.
================================================================

Sample: 5 JapaneseDate
----------------------------------------------------------------
1. `JapaneseDate plusDays(long days)`: This method returns a JapaneseDate object that is a specified number of days after this date.
2. `JapaneseDate minusDays(long days)`: This method returns a JapaneseDate object that is a specified number of days before this date.
3. `JapaneseEra getEra()`: This method returns the JapaneseEra associated with this JapaneseDate.
4. `int lengthOfMonth()`: This method returns the length of the month represented by this JapaneseDate.
5. `JapaneseDate with(ChronoField field, long newValue)`: This method returns a copy of this JapaneseDate with the specified field set to a new value.
================================================================

Sample: 6 JapaneseEra
----------------------------------------------------------------
1. `int getValue()`: This method returns the value of the Japanese era.
2. `String getDisplayName(TextStyle style, Locale locale)`: This method returns the textual representation of the Japanese era.
3. `boolean isSupported(TemporalField field)`: This method checks if the specified field is supported by the Japanese era.
4. `JapaneseEra of(int japaneseEraValue)`: This method returns the Japanese era for the specified era value.
5. `int compareTo(JapaneseEra other)`: This method compares this Japanese era to another Japanese era.
================================================================

Sample: 7 MinguoChronology
----------------------------------------------------------------
1. `static MinguoChronology of(String calendarId)`: This method returns the Minguo chronology for the specified calendar ID.
2. `static MinguoDate now()`: This method returns the current date in the Minguo calendar system.
3. `static MinguoDate date(int prolepticYear, int month, int dayOfMonth)`: This method returns a Minguo date based on the proleptic year, month, and day of month provided.
4. `static MinguoDate date(TemporalAccessor temporal)`: This method returns a Minguo date based on the temporal accessor provided.
5. `static MinguoDate dateYearDay(int prolepticYear, int dayOfYear)`: This method returns a Minguo date based on the proleptic year and day of year provided.
================================================================

Sample: 8 MinguoDate
----------------------------------------------------------------
1. `int getYear()`: This method returns the year value of the Minguo date.
2. `int getMonthValue()`: This method returns the month value of the Minguo date.
3. `int getDayOfMonth()`: This method returns the day of the month value of the Minguo date.
4. `DayOfWeek getDayOfWeek()`: This method returns the day of the week of the Minguo date.
5. `LocalDate toLocalDate()`: This method converts the Minguo date to a LocalDate in the ISO calendar system.
================================================================

Sample: 9 ThaiBuddhistChronology
----------------------------------------------------------------
1. `ThaiBuddhistDate date(int prolepticYear, int month, int dayOfMonth)`: This method returns a ThaiBuddhistDate representing the specified proleptic year, month, and day of month.
2. `ThaiBuddhistDate date(Era era, int yearOfEra, int month, int dayOfMonth)`: This method returns a ThaiBuddhistDate representing the specified era, year of era, month, and day of month.
3. `ThaiBuddhistDate dateYearDay(int prolepticYear, int dayOfYear)`: This method returns a ThaiBuddhistDate representing the specified proleptic year and day of year.
4. `ThaiBuddhistDate dateYearDay(Era era, int yearOfEra, int dayOfYear)`: This method returns a ThaiBuddhistDate representing the specified era, year of era, and day of year.
5. `ThaiBuddhistDate resolveDate(Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle)`: This method returns a ThaiBuddhistDate obtained by resolving the specified field values using the specified resolver style.
================================================================

Sample: 10 ThaiBuddhistDate
----------------------------------------------------------------
1. `int getDayOfMonth()`: Returns the day-of-month field.
2. `int getDayOfYear()`: Returns the day-of-year field.
3. `int getMonthValue()`: Returns the month-of-year field.
4. `int getYear()`: Returns the year field.
5. `ThaiBuddhistDate plusDays(long daysToAdd)`: Returns a copy of this date with the specified number of days added.
================================================================

