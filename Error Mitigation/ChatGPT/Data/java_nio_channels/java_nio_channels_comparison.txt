Sample: 0 AsynchronousChannelGroup
----------------------------------------------------------------
1. `AsynchronousChannelGroup open(ExecutorService executor)`: This method opens an asynchronous channel group with the specified executor service.
2. `AsynchronousChannelGroup open(ExecutorService executor, int initialSize)`: This method opens an asynchronous channel group with the specified executor service and initial size.
3. `AsynchronousChannelGroup open(ExecutorService executor, int initialSize, ThreadFactory threadFactory)`: This method opens an asynchronous channel group with the specified executor service, initial size, and thread factory.
4. `AsynchronousChannelGroup open(ExecutorService executor, int initialSize, CompletionHandler<Void, Object> handler)`: This method opens an asynchronous channel group with the specified executor service, initial size, and completion handler.
5. `AsynchronousChannelGroup open(ExecutorService executor, int initialSize, ThreadFactory threadFactory, CompletionHandler<Void, Object> handler)`: This method opens an asynchronous channel group with the specified executor service, initial size, thread factory, and completion handler.
================================================================

Sample: 1 AsynchronousFileChannel
----------------------------------------------------------------
1. `Future<Integer> read(ByteBuffer dst, long position)`: This method reads a sequence of bytes from this channel into the given buffer at the given file position.
2. `Future<Integer> write(ByteBuffer src, long position)`: This method writes a sequence of bytes to this channel from the given buffer at the given file position.
3. `Future<Void> truncate(long size)`: This method truncates the file to the given size.
4. `Future<FileLock> lock(long position, long size, boolean shared)`: This method acquires a lock on the given region of the file.
5. `Future<Integer> read(ByteBuffer[] dsts, int offset, int length, long position)`: This method reads a sequence of bytes from this channel into a subsequence of the given buffers at the given file position.
================================================================

Sample: 2 AsynchronousServerSocketChannel
----------------------------------------------------------------
1. `AsynchronousServerSocketChannel open()`: This method opens a server-socket channel.
2. `AsynchronousServerSocketChannel bind(SocketAddress local)`: This method binds the channel's socket to a local address.
3. `AsynchronousServerSocketChannel bind(SocketAddress local, int backlog)`: This method binds the channel's socket to a local address with a specific backlog value.
4. `AsynchronousServerSocketChannel bind(SocketAddress local, int backlog, NetworkInterface networkInterface)`: This method binds the channel's socket to a local address with a specific backlog value and network interface.
5. `AsynchronousServerSocketChannel bind(SocketAddress local, int backlog, InetAddress[] addresses)`: This method binds the channel's socket to a local address with a specific backlog value and array of addresses.
================================================================

Sample: 3 AsynchronousSocketChannel
----------------------------------------------------------------
1. `Future<Integer> read(ByteBuffer dst)`: Reads a sequence of bytes from this channel into the given buffer.
2. `Future<Integer> write(ByteBuffer src)`: Writes a sequence of bytes to this channel from the given buffer.
3. `AsynchronousSocketChannel bind(SocketAddress local)`: Binds the channel's socket to a local address.
4. `AsynchronousSocketChannel connect(SocketAddress remote)`: Connects this channel's socket to the given remote address.
5. `void close()`: Closes this channel.
================================================================

Sample: 4 Channels
----------------------------------------------------------------
1. `ReadableByteChannel newChannel(InputStream in)`: This method returns a new readable byte channel that reads bytes from the given input stream.
2. `WritableByteChannel newChannel(OutputStream out)`: This method returns a new writable byte channel that writes bytes to the given output stream.
3. `SeekableByteChannel newChannel(Path path, OpenOption... options)`: This method opens or creates a file, returning a seekable byte channel to access the file.
4. `FileChannel open(File file, Set<? extends OpenOption> options)`: This method opens or creates a file, returning a file channel to access the file.
5. `SocketChannel open(SocketAddress remote)`: This method opens a socket channel and connects it to the specified remote address.
================================================================

Sample: 5 DatagramChannel
----------------------------------------------------------------
1. `DatagramChannel open()`: This method opens a datagram channel.
2. `int send(ByteBuffer src, SocketAddress target)`: This method sends a datagram via this channel.
3. `SocketAddress receive(ByteBuffer dst)`: This method receives a datagram via this channel.
4. `int write(ByteBuffer src)`: This method writes a sequence of bytes to this channel from the given buffer.
5. `int read(ByteBuffer dst)`: This method reads a sequence of bytes from this channel into the given buffer.
================================================================

Sample: 6 FileChannel
----------------------------------------------------------------
1. `int read(ByteBuffer dst)`: This method reads a sequence of bytes from this channel into the given buffer.
2. `long write(ByteBuffer src)`: This method writes a sequence of bytes from the given buffer to this channel.
3. `FileLock lock(long position, long size, boolean shared)`: This method acquires a lock on the given region of this channel's file.
4. `MappedByteBuffer map(FileChannel.MapMode mode, long position, long size)`: This method maps a region of this channel's file directly into memory.
5. `long transferTo(long position, long count, WritableByteChannel target)`: This method transfers bytes from this channel's file to the target channel.
================================================================

Sample: 7 FileChannel.MapMode
----------------------------------------------------------------
1. `FileChannel.MapMode PRIVATE()`: This method returns a FileChannel.MapMode object representing the private mode for file mapping.
2. `FileChannel.MapMode READ_ONLY()`: This method returns a FileChannel.MapMode object representing the read-only mode for file mapping.
3. `FileChannel.MapMode READ_WRITE()`: This method returns a FileChannel.MapMode object representing the read-write mode for file mapping.
4. `boolean isPrivate()`: This method returns true if the file mapping mode is private, false otherwise.
5. `boolean isReadOnly()`: This method returns true if the file mapping mode is read-only, false otherwise.
================================================================

Sample: 8 FileLock
----------------------------------------------------------------
1. `void release()`: This method releases the lock.
2. `boolean isValid()`: This method checks if the lock is valid.
3. `long position()`: This method returns the position within the file of the first byte of the locked region.
4. `long size()`: This method returns the size of the locked region.
5. `Channel channel()`: This method returns the channel upon which the lock was acquired.
================================================================

Sample: 9 MembershipKey
----------------------------------------------------------------
1. `MembershipKey block()`: This method blocks the membership key.
2. `MembershipKey unblock()`: This method unblocks the membership key.
3. `MembershipKey drop()`: This method drops the membership key.
4. `NetworkInterface networkInterface()`: This method returns the network interface associated with the membership key.
5. `InetAddress sourceAddress()`: This method returns the source address associated with the membership key.
================================================================

Sample: 10 Pipe
----------------------------------------------------------------
1. `Pipe.SinkChannel sink()`: This method returns the sink channel of the pipe.
2. `Pipe.SourceChannel source()`: This method returns the source channel of the pipe.
3. `void close()`: This method closes both the sink and source channels of the pipe.
4. `boolean isOpen()`: This method checks if the pipe is open.
5. `void write(ByteBuffer src)`: This method writes bytes from the given buffer to the sink channel of the pipe.
================================================================

Sample: 11 Pipe.SinkChannel
----------------------------------------------------------------
1. `int write(ByteBuffer src)`: This method writes bytes into this channel from the given buffer.
2. `long write(ByteBuffer[] srcs, int offset, int length)`: This method writes bytes from a sequence of buffers into this channel.
3. `long write(ByteBuffer[] srcs)`: This method writes bytes from a sequence of buffers into this channel.
4. `long transferFrom(ReadableByteChannel src, long position, long count)`: This method transfers bytes from a source channel into this channel.
5. `long transferFrom(FileChannel src, long position, long count)`: This method transfers bytes from a file channel into this channel.
================================================================

Sample: 12 Pipe.SourceChannel
----------------------------------------------------------------
1. `int read(ByteBuffer dst)`: This method reads a sequence of bytes from this channel into the given buffer.
2. `long read(ByteBuffer[] dsts, int offset, int length)`: This method reads a sequence of bytes from this channel into a subsequence of the given buffers.
3. `long read(ByteBuffer[] dsts)`: This method reads a sequence of bytes from this channel into the given buffers.
4. `Pipe.SourceChannel configureBlocking(boolean block)`: This method configures this channel to be blocking or non-blocking.
5. `long read(ByteBuffer[] dsts, int offset, int length)`: This method reads a sequence of bytes from this channel into a subsequence of the given buffers.
================================================================

Sample: 13 SelectableChannel
----------------------------------------------------------------
1. `SelectionKey key()`: Returns the selection key representing the channel's registration with a selector.
2. `int validOps()`: Returns the operation set that this channel supports.
3. `SelectableChannel configureBlocking(boolean block)`: Configures this channel to operate in blocking or non-blocking mode.
4. `SelectorProvider provider()`: Returns the provider that created this channel.
5. `int validOps()`: Returns the operation set that this channel supports.
================================================================

Sample: 14 SelectionKey
----------------------------------------------------------------
1. int interestOps()
2. SelectableChannel channel()
3. Selector selector()
4. boolean isAcceptable()
5. boolean isConnectable()
================================================================

Sample: 15 Selector
----------------------------------------------------------------
1. int select(): This method performs a blocking selection operation.
2. Set<SelectionKey> keys(): This method returns the keys associated with this selector.
3. int selectNow(): This method performs a non-blocking selection operation.
4. Selector wakeup(): This method wakes up the selector if it is currently blocked in a selection operation.
5. int select(long timeout): This method performs a selection operation with a specified timeout.
================================================================

Sample: 16 ServerSocketChannel
----------------------------------------------------------------
1. `ServerSocketChannel open()`: This method opens a server-socket channel.
2. `ServerSocket socket()`: This method retrieves a server socket associated with this channel.
3. `SelectionKey register(Selector sel, int ops)`: This method registers this channel with the given selector for the given operations set.
4. `ServerSocketChannel bind(SocketAddress local)`: This method binds the channel's socket to a local address.
5. `SocketChannel accept()`: This method accepts a connection made to this channel's socket.
================================================================

Sample: 17 SocketChannel
----------------------------------------------------------------
1. `SocketChannel open()`: This method opens a socket channel.
2. `int write(ByteBuffer src)`: This method writes a sequence of bytes to this channel from the given buffer.
3. `int read(ByteBuffer dst)`: This method reads a sequence of bytes from this channel into the given buffer.
4. `SocketChannel bind(SocketAddress local)`: This method binds the channel's socket to a local address.
5. `SocketChannel connect(SocketAddress remote)`: This method initiates a connection to a remote server.
================================================================

