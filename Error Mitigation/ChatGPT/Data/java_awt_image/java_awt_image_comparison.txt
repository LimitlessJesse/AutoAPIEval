Sample: 0 AffineTransformOp
----------------------------------------------------------------
1. `BufferedImage filter(BufferedImage src, BufferedImage dest)`: This method applies a filter operation to the source image and stores the result in the destination image.
2. `BufferedImage createCompatibleDestImage(BufferedImage src, ColorModel destCM)`: This method creates a destination image with the specified color model that is compatible with the source image.
3. `void filter(Raster src, WritableRaster dest)`: This method applies a filter operation to the source raster and stores the result in the destination raster.
4. `Point2D getPoint2D(Point2D srcPt, Point2D dstPt)`: This method transforms the specified point and stores the result in the destination point.
5. `Rectangle2D getBounds2D(BufferedImage src)`: This method returns the bounding box of the transformed destination image.
================================================================

Sample: 1 AreaAveragingScaleFilter
----------------------------------------------------------------
1. `void setHints(int hints)`: This method sets the hints that the algorithm uses to choose between speed and quality in scaling.
2. `void setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize)`: This method sets the pixels for the specified area of the image.
3. `void setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize)`: This method sets the pixels for the specified area of the image using byte array.
4. `void setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize, int xoffset, int yoffset)`: This method sets the pixels for the specified area of the image with specified offsets.
5. `void setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize, int xoffset, int yoffset)`: This method sets the pixels for the specified area of the image using byte array with specified offsets.
================================================================

Sample: 2 BandCombineOp
----------------------------------------------------------------
1. `Raster filter(Raster src, Raster dest)`: This method applies the band combine operation to a Raster and stores the result in another Raster.
2. `int getNumBands()`: This method returns the number of bands in the matrix used for the band combine operation.
3. `float[] getMatrix()`: This method returns a copy of the matrix used for the band combine operation.
4. `void setMatrix(float[] matrix)`: This method sets the matrix to be used for the band combine operation.
5. `boolean equals(Object obj)`: This method checks if the specified object is equal to this BandCombineOp.
================================================================

Sample: 3 BandedSampleModel
----------------------------------------------------------------
1. `int getNumBands()`: This method returns the number of bands in the sample model.
2. `int[] getBandOffsets()`: This method returns an array of band offsets.
3. `int[] getBankIndices()`: This method returns an array of bank indices.
4. `int[] getPixelStride()`: This method returns an array of pixel strides.
5. `int[] getScanlineStride()`: This method returns an array of scanline strides.
================================================================

Sample: 4 BufferedImage
----------------------------------------------------------------
1. `int getWidth()`: This method returns the width of the image.
2. `int getHeight()`: This method returns the height of the image.
3. `int getRGB(int x, int y)`: This method returns the RGB value of the pixel at the specified coordinates.
4. `void setRGB(int x, int y, int rgb)`: This method sets the RGB value of the pixel at the specified coordinates.
5. `BufferedImage getSubimage(int x, int y, int w, int h)`: This method returns a subimage of the BufferedImage.
================================================================

Sample: 5 BufferedImageFilter
----------------------------------------------------------------
1. `BufferedImageFilterOp getFilterOp()`: This method returns the BufferedImageOp used by the BufferedImageFilter.
2. `void setFilterOp(BufferedImageOp op)`: This method sets the BufferedImageOp to be used by the BufferedImageFilter.
3. `BufferedImage getFilteredBufferedImage(BufferedImage src, BufferedImage dest)`: This method applies the filter operation to the source BufferedImage and stores the result in the destination BufferedImage.
4. `void setHints(Map hints)`: This method sets the rendering hints for the BufferedImageFilter.
5. `void setSourceRegion(Rectangle region)`: This method sets the region of the source image to be filtered by the BufferedImageFilter.
================================================================

Sample: 6 BufferStrategy
----------------------------------------------------------------
1. `Graphics getDrawGraphics()`: This method returns the Graphics context for the drawing buffer.
2. `boolean contentsLost()`: This method returns whether the drawing buffer was lost since the last call to getDrawGraphics.
3. `void show()`: This method makes the next available buffer visible by either copying the memory or changing the display pointer.
4. `BufferCapabilities getCapabilities()`: This method returns the buffering capabilities of this BufferStrategy.
5. `Image getDrawBuffer()`: This method returns the back buffer for rendering.
================================================================

Sample: 7 ByteLookupTable
----------------------------------------------------------------
1. `int getOffset()`: This method returns the offset of this lookup table.
2. `int[] getTable()`: This method returns a reference to the data array of this lookup table.
3. `int[] lookupPixel(int[] src, int[] dst)`: This method performs a lookup operation on a single pixel in the source and destination arrays.
4. `int[] lookupPixels(int[] src, int[] dst, int numPixels)`: This method performs a lookup operation on multiple pixels in the source and destination arrays.
5. `void setOffset(int offset)`: This method sets the offset of this lookup table.
================================================================

Sample: 8 ColorConvertOp
----------------------------------------------------------------
1. `BufferedImage filter(BufferedImage src, BufferedImage dest)`: This method performs a pixel-by-pixel color conversion of the data in the source image and stores the result in the destination image.
2. `int getRGB(Object inData)`: This method returns the output RGB value for a given input data value.
3. `void setColorModel(ColorModel newmodel)`: This method sets the color model to be used for the color conversion.
4. `void setDestinationType(ColorSpace cs)`: This method sets the destination color space for the color conversion.
5. `void setRenderingHints(Map<?, ?> hints)`: This method sets the rendering hints for the color conversion.
================================================================

Sample: 9 ColorModel
----------------------------------------------------------------
1. `int getRed(int pixel)`: This method returns the red color component of the specified pixel.
2. `int getGreen(int pixel)`: This method returns the green color component of the specified pixel.
3. `int getBlue(int pixel)`: This method returns the blue color component of the specified pixel.
4. `int getAlpha(int pixel)`: This method returns the alpha component of the specified pixel.
5. `int getRGB(int r, int g, int b)`: This method returns the pixel value representing the specified red, green, and blue color components.
================================================================

Sample: 10 ComponentColorModel
----------------------------------------------------------------
1. `int getAlpha(int pixel)`: This method returns the alpha component from a pixel value.
2. `int getBlue(int pixel)`: This method returns the blue component from a pixel value.
3. `int getGreen(int pixel)`: This method returns the green component from a pixel value.
4. `int getRed(int pixel)`: This method returns the red component from a pixel value.
5. `int getRGB(int r, int g, int b)`: This method returns a pixel value representing the specified RGB values.
================================================================

Sample: 11 ComponentSampleModel
----------------------------------------------------------------
1. `int getNumBands()`: This method returns the number of bands in the sample model.
2. `int getNumComponents()`: This method returns the number of components in the sample model.
3. `int getPixelStride()`: This method returns the pixel stride of the sample model.
4. `int getScanlineStride()`: This method returns the scanline stride of the sample model.
5. `int[] getBandOffsets()`: This method returns an array of band offsets.
================================================================

Sample: 12 ConvolveOp
----------------------------------------------------------------
1. `BufferedImage filter(BufferedImage src, BufferedImage dest)`: This method applies a convolution operation to the source image and stores the result in the destination image.
2. `Kernel getKernel()`: This method returns the kernel used for the convolution operation.
3. `RenderingHints getRenderingHints()`: This method returns the rendering hints used for the operation.
4. `Point getPoint2D(Point srcPt, Point dstPt)`: This method returns the location in the destination image that corresponds to the specified point in the source image.
5. `BufferedImage createCompatibleDestImage(BufferedImage src, ColorModel destCM)`: This method creates a compatible destination image for the convolution operation.
================================================================

Sample: 13 CropImageFilter
----------------------------------------------------------------
1. `void setHints(int hints)`: This method sets the hints for this CropImageFilter.
2. `int getHints()`: This method returns the hints for this CropImageFilter.
3. `void setDimensions(int width, int height)`: This method sets the dimensions for cropping the image.
4. `int getWidth()`: This method returns the width of the cropped image.
5. `int getHeight()`: This method returns the height of the cropped image.
================================================================

Sample: 14 DataBuffer
----------------------------------------------------------------
1. `int getSize()`: This method returns the size of the data buffer.
2. `int getElem(int bank, int i)`: This method returns the data element at the specified bank and index.
3. `void setElem(int bank, int i, int val)`: This method sets the data element at the specified bank and index to the specified value.
4. `int getOffset()`: This method returns the offset of the data buffer.
5. `int getNumBanks()`: This method returns the number of banks in the data buffer.
================================================================

Sample: 15 DataBufferByte
----------------------------------------------------------------
1. `byte[] getData()`: This method returns the data stored in the DataBuffer as a byte array.
2. `int getElem(int bank, int i)`: This method returns the data element at the specified bank and index.
3. `void setElem(int bank, int i, int val)`: This method sets the data element at the specified bank and index to the specified value.
4. `int getElem(int i)`: This method returns the data element at the specified index.
5. `void setElem(int i, int val)`: This method sets the data element at the specified index to the specified value.
================================================================

Sample: 16 DataBufferDouble
----------------------------------------------------------------
1. `double getElem(int bank, int i)`: This method returns the data element at the specified bank and index.
2. `void setElem(int bank, int i, double val)`: This method sets the data element at the specified bank and index to the given value.
3. `double[] getData()`: This method returns the data array stored in the DataBufferDouble.
4. `int getElem(int i)`: This method returns the data element at the specified index.
5. `void setElem(int i, double val)`: This method sets the data element at the specified index to the given value.
================================================================

Sample: 17 DataBufferFloat
----------------------------------------------------------------
1. `float[] getData()`: This method returns the data stored in the DataBufferFloat as an array of floats.
2. `void setData(float[] data)`: This method sets the data in the DataBufferFloat to the specified array of floats.
3. `float getElem(int bank, int i)`: This method returns the data element at the specified bank and index.
4. `void setElem(int bank, int i, float val)`: This method sets the data element at the specified bank and index to the specified value.
5. `int getElemFloat(int i)`: This method returns the data element at the specified index as a float.
================================================================

Sample: 18 DataBufferInt
----------------------------------------------------------------
1. `int[] getData()`: This method returns the data stored in the DataBuffer as an array of integers.
2. `int getElem(int bank, int i)`: This method returns the data element at the specified bank and index.
3. `void setElem(int bank, int i, int val)`: This method sets the data element at the specified bank and index to the given value.
4. `int getElem(int i)`: This method returns the data element at the specified index.
5. `void setElem(int i, int val)`: This method sets the data element at the specified index to the given value.
================================================================

Sample: 19 DataBufferShort
----------------------------------------------------------------
1. `short getElem(int bank, int i)`: This method returns the data element at the specified bank and index.
2. `void setElem(int bank, int i, short val)`: This method sets the data element at the specified bank and index to the specified value.
3. `short[] getData()`: This method returns the data array.
4. `int getElem(int i)`: This method returns the data element at the specified index.
5. `void setElem(int i, short val)`: This method sets the data element at the specified index to the specified value.
================================================================

Sample: 20 DataBufferUShort
----------------------------------------------------------------
1. `short[] getData()`: This method returns the data stored in the DataBufferUShort as an array of shorts.
2. `int getElem(int bank, int i)`: This method returns the data element at the specified bank and index.
3. `void setElem(int bank, int i, int val)`: This method sets the data element at the specified bank and index to the given value.
4. `int getElem(int i)`: This method returns the data element at the specified index.
5. `void setElem(int i, int val)`: This method sets the data element at the specified index to the given value.
================================================================

Sample: 21 DirectColorModel
----------------------------------------------------------------
1. `int getRed(int pixel)`: This method returns the red color component of the specified pixel.
2. `int getGreen(int pixel)`: This method returns the green color component of the specified pixel.
3. `int getBlue(int pixel)`: This method returns the blue color component of the specified pixel.
4. `int getAlpha(int pixel)`: This method returns the alpha component of the specified pixel.
5. `int getRGB(int r, int g, int b)`: This method returns an RGB value representing the specified red, green, and blue values.
================================================================

Sample: 22 FilteredImageSource
----------------------------------------------------------------
1. `void setDimensions(int width, int height)`: This method sets the dimensions of the filtered image.
2. `void setHints(int hints)`: This method sets the hints for the filtering operation.
3. `void setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize)`: This method sets a specified rectangular region of pixels to the specified RGB values.
4. `void setProperties(Hashtable<?, ?> props)`: This method sets the properties for the filtered image.
5. `void setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize)`: This method sets a specified rectangular region of pixels to the specified RGB values in byte array format.
================================================================

Sample: 23 ImageFilter
----------------------------------------------------------------
1. `void setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize)`: This method sets the pixels for an area of the image.
2. `void setColorModel(ColorModel model)`: This method sets the ColorModel for the image data.
3. `void setHints(int hints)`: This method sets the hints for the image data.
4. `void setDimensions(int width, int height)`: This method sets the dimensions of the image.
5. `void imageComplete(int status)`: This method signals that the image is complete with the specified status.
================================================================

Sample: 24 IndexColorModel
----------------------------------------------------------------
1. `int getRed(int pixel)`: This method returns the red component of the specified pixel value.
2. `int getGreen(int pixel)`: This method returns the green component of the specified pixel value.
3. `int getBlue(int pixel)`: This method returns the blue component of the specified pixel value.
4. `int getAlpha(int pixel)`: This method returns the alpha component of the specified pixel value.
5. `int getTransparentPixel()`: This method returns the pixel value that should be treated as transparent.
================================================================

Sample: 25 Kernel
----------------------------------------------------------------
1. `int getWidth()`: This method returns the width of the Kernel matrix.
2. `int getHeight()`: This method returns the height of the Kernel matrix.
3. `float[] getKernelData(float[] data)`: This method returns the kernel data in a float array.
4. `void setKernelData(float[] data)`: This method sets the kernel data using the provided float array.
5. `Kernel(int width, int height, float[] data)`: This method constructs a Kernel with the specified width, height, and data.
================================================================

Sample: 26 LookupOp
----------------------------------------------------------------
1. `BufferedImage filter(BufferedImage src, BufferedImage dest)`: This method applies a lookup table transformation to the source image and stores the result in the destination image.
2. `int[] lookupPixel(int[] src, int[] dest)`: This method performs a lookup operation on a single pixel value from the source to the destination.
3. `void setTable(int[] table)`: This method sets the lookup table used for the operation.
4. `int[] getTable()`: This method returns the lookup table used for the operation.
5. `void setDest(BufferedImage dest)`: This method sets the destination image for the operation.
================================================================

Sample: 27 LookupTable
----------------------------------------------------------------
1. `int getNumComponents()`: This method returns the number of components in the lookup table.
2. `int[] getOffsets()`: This method returns an array of offsets for each color component.
3. `int[] getComponentSize()`: This method returns an array of component sizes for each color component.
4. `int[][] getTable()`: This method returns the lookup table data as a two-dimensional array.
5. `void setTable(int[][] table)`: This method sets the lookup table data using the provided two-dimensional array.
================================================================

Sample: 28 MemoryImageSource
----------------------------------------------------------------
1. `void setAnimated(boolean animated)`: This method sets the flag that indicates whether this MemoryImageSource object is animated.
2. `void setFullBufferUpdates(boolean fullbuffers)`: This method sets the flag that indicates whether this MemoryImageSource object should send the entire buffer of pixels when an update is requested.
3. `void setHints(int hints)`: This method sets the hints that the ImageConsumer uses to process the pixels delivered by this ImageProducer.
4. `void setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize)`: This method delivers the pixels of the specified rectangle of pixels in a specified ColorModel to the ImageConsumer specified.
5. `void setProperties(Hashtable<?, ?> props)`: This method sets a set of properties in the form of a Hashtable on this MemoryImageSource.
================================================================

Sample: 29 MultiPixelPackedSampleModel
----------------------------------------------------------------
1. `int getNumBands()`: This method returns the number of bands in the image.
2. `int getSampleSize(int band)`: This method returns the number of bits per sample for the specified band.
3. `int getScanlineStride()`: This method returns the offset in data between two consecutive scanlines.
4. `int getPixelBitStride()`: This method returns the number of bits between two consecutive pixels.
5. `int getOffset(int x, int y)`: This method returns the offset in data for accessing the pixel at the specified coordinates.
================================================================

Sample: 30 PackedColorModel
----------------------------------------------------------------
1. `int getAlpha(int pixel)`: This method returns the alpha component from a pixel value.
2. `int getBlue(int pixel)`: This method returns the blue component from a pixel value.
3. `int getGreen(int pixel)`: This method returns the green component from a pixel value.
4. `int getRed(int pixel)`: This method returns the red component from a pixel value.
5. `int getRGB(int r, int g, int b)`: This method returns a packed RGB value representing the specified red, green, and blue values.
================================================================

Sample: 31 PixelGrabber
----------------------------------------------------------------
1. `int getWidth()`: This method returns the width of the image.
2. `int getHeight()`: This method returns the height of the image.
3. `int[] getPixels()`: This method returns an array of integers containing the pixel data.
4. `boolean grabPixels()`: This method grabs the pixels from the image.
5. `void setDimensions(int width, int height)`: This method sets the dimensions of the image.
================================================================

Sample: 32 PixelInterleavedSampleModel
----------------------------------------------------------------
1. `int getNumBands()`: This method returns the number of bands in the sample model.
2. `int getNumDataElements()`: This method returns the number of data elements per pixel.
3. `int[] getBandOffsets()`: This method returns an array of band offsets.
4. `int[] getPixelStride()`: This method returns the pixel stride of the sample model.
5. `int[] getScanlineStride()`: This method returns the scanline stride of the sample model.
================================================================

Sample: 33 Raster
----------------------------------------------------------------
1. `int getWidth()`: This method returns the width of the raster in pixels.
2. `int getHeight()`: This method returns the height of the raster in pixels.
3. `int[] getPixel(int x, int y, int[] iArray)`: This method returns the pixel data for the specified location as an array of integers.
4. `void setPixel(int x, int y, int[] iArray)`: This method sets the pixel data for the specified location using the provided array of integers.
5. `WritableRaster createCompatibleWritableRaster()`: This method creates a new writable raster with the same size and sample model as the original raster.
================================================================

Sample: 34 ReplicateScaleFilter
----------------------------------------------------------------
1. `void setHints(int hints)`: This method sets the hints for the scaling algorithm.
2. `int getHints()`: This method returns the hints for the scaling algorithm.
3. `void setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize)`: This method sets the pixels for the specified rectangle of the image.
4. `void setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize)`: This method sets the pixels for the specified rectangle of the image using byte array.
5. `void setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize)`: This method sets the pixels for the specified rectangle of the image using int array.
================================================================

Sample: 35 RescaleOp
----------------------------------------------------------------
1. `BufferedImage filter(BufferedImage src, BufferedImage dest)`: This method applies a rescale operation to the given BufferedImage and stores the result in the destination BufferedImage.
2. `BufferedImage createCompatibleDestImage(BufferedImage src, ColorModel destCM)`: This method creates a destination image with the specified ColorModel that is compatible with the source image.
3. `Raster filter(Raster src, WritableRaster dest)`: This method applies a rescale operation to the given Raster and stores the result in the destination WritableRaster.
4. `Point2D getPoint2D(Point2D srcPt, Point2D dstPt)`: This method returns the location of the corresponding point in the destination image for a given point in the source image.
5. `Rectangle2D getBounds2D(BufferedImage src)`: This method returns the bounds of the rescaled image for the given source image.
================================================================

Sample: 36 RGBImageFilter
----------------------------------------------------------------
1. `void setDimensions(int width, int height)`: This method sets the dimensions of the image filter.
2. `void setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize)`: This method sets the pixels of the image filter.
3. `void setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize)`: This method sets the pixels of the image filter.
4. `void substituteColorModel(ColorModel model, ColorModel newmodel)`: This method substitutes the color model of the image filter.
5. `void substitutePixels(UnpackedImage img)`: This method substitutes the pixels of the image filter.
================================================================

Sample: 37 SampleModel
----------------------------------------------------------------
1. `int getNumBands()`: This method returns the number of bands in the SampleModel.
2. `int getNumDataElements()`: This method returns the number of data elements in a pixel.
3. `int getSampleSize(int band)`: This method returns the number of bits per sample for the specified band.
4. `int[] getSampleSize()`: This method returns an array of the number of bits per sample for all bands.
5. `int[] getPixel(int x, int y, int[] iArray)`: This method returns the pixel data for the specified location as an array of integers.
================================================================

Sample: 38 ShortLookupTable
----------------------------------------------------------------
1. `int[] getOffsets()`: This method returns the offsets of this ShortLookupTable.
2. `int[][] getTable()`: This method returns a reference to the data array of this ShortLookupTable.
3. `ShortLookupTable(int offset, short[][] data)`: Constructor that creates a ShortLookupTable with the specified offset and data array.
4. `int getNumComponents()`: This method returns the number of components in this ShortLookupTable.
5. `ShortLookupTable createInverse()`: This method creates and returns an inverse of this ShortLookupTable.
================================================================

Sample: 39 SinglePixelPackedSampleModel
----------------------------------------------------------------
1. `int[] getPixel(int x, int y, int[] iArray)`: This method returns the pixel data for the specified pixel in the provided array.
2. `int getSample(int x, int y, int b, DataBuffer data)`: This method returns the sample data for the specified band at the specified pixel coordinates.
3. `int[] getSamples(int x, int y, int w, int h, int b, int[] iArray, DataBuffer data)`: This method returns an array of samples for the specified band within the specified region.
4. `void setDataElements(int x, int y, Object obj, DataBuffer data)`: This method sets the data elements for the specified pixel using the provided object.
5. `void setPixel(int x, int y, int[] iArray, DataBuffer data)`: This method sets the pixel data for the specified pixel using the provided array.
================================================================

Sample: 40 VolatileImage
----------------------------------------------------------------
1. `Graphics2D createGraphics()`: This method returns a Graphics2D object for rendering into this VolatileImage.
2. `int validate(GraphicsConfiguration gc)`: This method validates the VolatileImage for rendering. It returns a status code indicating the success or failure of the validation.
3. `void flush()`: This method releases the resources used by this VolatileImage.
4. `boolean contentsLost()`: This method returns true if the contents of the VolatileImage have been lost.
5. `ImageCapabilities getCapabilities()`: This method returns the ImageCapabilities object that describes the capabilities of this VolatileImage.
================================================================

Sample: 41 WritableRaster
----------------------------------------------------------------
1. `void setPixel(int x, int y, int[] iArray)`: This method sets the pixel data for the specified location.
2. `void setDataElements(int x, int y, Object obj)`: This method sets the data elements for the specified location.
3. `void setPixels(int x, int y, int w, int h, int[] iArray)`: This method sets a rectangular region of pixel data.
4. `void setDataElements(int x, int y, Raster raster)`: This method sets the data elements for the specified location from another raster.
5. `void setSamples(int x, int y, int w, int h, int b, int[] iArray)`: This method sets a rectangular region of samples for a specified band.
================================================================

