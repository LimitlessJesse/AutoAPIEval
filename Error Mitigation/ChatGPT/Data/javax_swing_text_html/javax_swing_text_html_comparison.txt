Sample: 0 BlockView
----------------------------------------------------------------
1. `float getTopInset()`: This method returns the top inset for the block view.
2. `float getBottomInset()`: This method returns the bottom inset for the block view.
3. `float getLeftInset()`: This method returns the left inset for the block view.
4. `float getRightInset()`: This method returns the right inset for the block view.
5. `void setInsets(float top, float left, float bottom, float right)`: This method sets the insets for the block view.
================================================================

Sample: 1 CSS
----------------------------------------------------------------
1. `CSS.Attribute getAttribute(String name)`: This method returns the CSS attribute with the specified name.
2. `String[] getNames()`: This method returns an array of all the CSS attribute names.
3. `CSS.Attribute resolve(String name)`: This method resolves the CSS attribute with the specified name.
4. `int size()`: This method returns the number of CSS attributes in the enumeration.
5. `Iterator<CSS.Attribute> iterator()`: This method returns an iterator over the CSS attributes in the enumeration.
================================================================

Sample: 2 CSS.Attribute
----------------------------------------------------------------
1. `String getName()`: This method returns the name of the CSS attribute.
2. `boolean isInherited()`: This method returns true if the CSS attribute is inherited, false otherwise.
3. `boolean isKnownProperty()`: This method returns true if the CSS attribute is a known property, false otherwise.
4. `boolean isShorthand()`: This method returns true if the CSS attribute is a shorthand property, false otherwise.
5. `String toString()`: This method returns a string representation of the CSS attribute.
================================================================

Sample: 3 FormSubmitEvent
----------------------------------------------------------------
1. `FormSubmitEvent(Object source, URL url, String method, Map<String, String> data)`: This constructor creates a new FormSubmitEvent with the specified parameters.
   
2. `URL getURL()`: This method returns the URL of the form that was submitted.

3. `String getMethod()`: This method returns the method (e.g. GET or POST) used to submit the form.

4. `Map<String, String> getData()`: This method returns a map of key-value pairs representing the data submitted with the form.

5. `String toString()`: This method returns a string representation of the FormSubmitEvent.
================================================================

Sample: 4 FormView
----------------------------------------------------------------
1. `void paint(java.awt.Graphics g, java.awt.Shape allocation)`: This method paints the view.
2. `float getPreferredSpan(int axis)`: This method returns the preferred span for the specified axis.
3. `void setParent(javax.swing.text.View parent)`: This method sets the parent view.
4. `void setPropertiesFromAttributes()`: This method sets the properties from the attributes.
5. `void changedUpdate(javax.swing.event.DocumentEvent e, java.awt.Shape a, javax.swing.text.ViewFactory f)`: This method notifies the view of the change.
================================================================

Sample: 5 HTML
----------------------------------------------------------------
1. `void setDefaultStyleSheet(StyleSheet s)`: This method sets the default style sheet for the HTML document.
2. `void setParser(Parser p)`: This method sets the parser for the HTML document.
3. `void setInnerHTML(Element elem, String html)`: This method sets the inner HTML content of the specified element.
4. `void insertAfterEnd(Element elem, String html)`: This method inserts HTML content after the end of the specified element.
5. `void insertBeforeStart(Element elem, String html)`: This method inserts HTML content before the start of the specified element.
================================================================

Sample: 6 HTML.Attribute
----------------------------------------------------------------
1. `String getKey()`: This method returns the key of the HTML attribute.
2. `String toString()`: This method returns a string representation of the HTML attribute.
3. `boolean isKnown()`: This method returns true if the HTML attribute is a known attribute.
4. `boolean isObsolete()`: This method returns true if the HTML attribute is obsolete.
5. `boolean isSimple()`: This method returns true if the HTML attribute is a simple attribute.
================================================================

Sample: 7 HTML.Tag
----------------------------------------------------------------
1. `String toString()`: This method returns the name of the HTML tag as a String.
2. `boolean isBlock()`: This method returns true if the HTML tag is a block tag, false otherwise.
3. `boolean isPreformatted()`: This method returns true if the HTML tag is a preformatted tag, false otherwise.
4. `boolean isEmpty()`: This method returns true if the HTML tag is an empty tag, false otherwise.
5. `boolean isMetaContent()`: This method returns true if the HTML tag is a meta content tag, false otherwise.
================================================================

Sample: 8 HTML.UnknownTag
----------------------------------------------------------------
1. `void registerTag(HTML.Tag t)`: This method registers a new tag with the editor kit.
2. `void deRegisterTag(HTML.Tag t)`: This method de-registers a tag from the editor kit.
3. `void setParser(HTMLEditorKit.Parser p)`: This method sets the parser for the editor kit.
4. `void setStyleSheet(StyleSheet s)`: This method sets the style sheet for the editor kit.
5. `void setDefaultStyleSheet(StyleSheet s)`: This method sets the default style sheet for the editor kit.
================================================================

Sample: 9 HTMLDocument
----------------------------------------------------------------
1. `Element getElement(String key)`: This method returns the element with the specified key.
2. `void setBase(URL url)`: This method sets the base URL for the document.
3. `void setPreservesUnknownTags(boolean preserves)`: This method sets whether unknown tags should be preserved.
4. `void setParser(Parser p)`: This method sets the parser for the document.
5. `void setInnerHTML(Element elem, String htmlText)`: This method sets the inner HTML content of the specified element.
================================================================

Sample: 10 HTMLDocument.Iterator
----------------------------------------------------------------
1. `boolean isValid()`: This method returns true if the iterator is currently pointing to a valid tag, false otherwise.
2. `void next()`: This method moves the iterator to the next tag in the document.
3. `String getTag()`: This method returns the tag name of the current tag that the iterator is pointing to.
4. `int getStartOffset()`: This method returns the starting offset of the current tag in the document.
5. `int getEndOffset()`: This method returns the ending offset of the current tag in the document.
================================================================

Sample: 11 HTMLEditorKit
----------------------------------------------------------------
1. `void insertHTML(HTMLDocument doc, int offset, String html, int popDepth, int pushDepth, HTML.Tag insertTag)`: This method inserts HTML into a document at the specified offset.
2. `void write(Writer out, Document doc, int pos, int len)`: This method writes content from a document to a writer.
3. `void read(Reader in, Document doc, int pos)`: This method reads content from a reader into a document.
4. `void insertAfterEnd(Element elem, String html)`: This method inserts HTML after the end of a specified element.
5. `void insertBeforeStart(Element elem, String html)`: This method inserts HTML before the start of a specified element.
================================================================

Sample: 12 HTMLEditorKit.HTMLFactory
----------------------------------------------------------------
1. View create(Element elem): This method creates a view for the given element.
2. View create(Element elem, int p0, int p1): This method creates a view for the given element within the specified range.
3. View create(Element elem, int p0, int p1, int axis): This method creates a view for the given element within the specified range and axis.
4. View create(Element elem, int axis): This method creates a view for the given element with the specified axis.
5. View create(Element elem, int p0, int p1, int axis, int direction): This method creates a view for the given element within the specified range, axis, and direction.
================================================================

Sample: 13 HTMLEditorKit.HTMLTextAction
----------------------------------------------------------------
1. `void insertHTML(HTMLDocument doc, int offset, String html, int popDepth, int pushDepth, HTML.Tag insertTag)`: This method inserts HTML into the document at the specified offset with specified depth and tag.
2. `void insertHTML(HTMLDocument doc, int offset, String html, int popDepth, int pushDepth, HTML.Tag insertTag, HTML.Tag alternateTag)`: This method inserts HTML into the document at the specified offset with specified depth and tags.
3. `void insertHTML(HTMLDocument doc, int offset, String html, int popDepth, int pushDepth, HTML.Tag insertTag, HTML.Tag alternateTag, HTML.Tag[] insertTags)`: This method inserts HTML into the document at the specified offset with specified depth and multiple tags.
4. `void insertHTML(HTMLDocument doc, int offset, String html, int popDepth, int pushDepth, HTML.Tag insertTag, HTML.Tag alternateTag, HTML.Tag[] insertTags, HTML.Tag[] alternateTags)`: This method inserts HTML into the document at the specified offset with specified depth and multiple tags.
5. `void insertHTML(HTMLDocument doc, int offset, String html, int popDepth, int pushDepth, HTML.Tag insertTag, HTML.Tag alternateTag, HTML.Tag[] insertTags, HTML.Tag[] alternateTags, HTML.Tag[] insertAfterTags)`: This method inserts HTML into the document at the specified offset with specified depth, tags, and tags to insert after.
================================================================

Sample: 14 HTMLEditorKit.InsertHTMLTextAction
----------------------------------------------------------------
1. `void insertHTML(HTMLDocument doc, int offset, String html, int popDepth, int pushDepth, HTML.Tag insertTag)`: This method inserts the specified HTML string into the HTML document at the given offset with specified pop and push depths and insert tag.
2. `void insertHTML(HTMLDocument doc, int offset, String html, int popDepth, int pushDepth, HTML.Tag insertTag, HTML.Attribute[] attrs)`: This method inserts the specified HTML string into the HTML document at the given offset with specified pop and push depths, insert tag, and attributes.
3. `void insertHTML(HTMLDocument doc, int offset, String html, int popDepth, int pushDepth, HTML.Tag insertTag, HTML.Attribute[] attrs, boolean isContainer)`: This method inserts the specified HTML string into the HTML document at the given offset with specified pop and push depths, insert tag, attributes, and container flag.
4. `void insertHTML(HTMLDocument doc, int offset, String html, int popDepth, int pushDepth, HTML.Tag insertTag, HTML.Attribute[] attrs, boolean isContainer, boolean replaceSelection)`: This method inserts the specified HTML string into the HTML document at the given offset with specified pop and push depths, insert tag, attributes, container flag, and replace selection flag.
5. `void insertHTML(HTMLDocument doc, int offset, String html, int popDepth, int pushDepth, HTML.Tag insertTag, HTML.Attribute[] attrs, boolean isContainer, boolean replaceSelection, boolean adjustSelection)`: This method inserts the specified HTML string into the HTML document at the given offset with specified pop and push depths, insert tag, attributes, container flag, replace selection flag, and adjust selection flag.
================================================================

Sample: 15 HTMLEditorKit.LinkController
----------------------------------------------------------------
1. `void mouseClicked(MouseEvent e)`: This method handles the mouse clicked event on the associated component.
2. `void mouseEntered(MouseEvent e)`: This method handles the mouse entered event on the associated component.
3. `void mouseExited(MouseEvent e)`: This method handles the mouse exited event on the associated component.
4. `void mousePressed(MouseEvent e)`: This method handles the mouse pressed event on the associated component.
5. `void mouseReleased(MouseEvent e)`: This method handles the mouse released event on the associated component.
================================================================

Sample: 16 HTMLEditorKit.Parser
----------------------------------------------------------------
1. `void parse(Reader r, HTMLEditorKit.ParserCallback cb, boolean ignoreCharSet)`: This method parses the given reader and invokes the callback for the parsed elements.
2. `void parse(Reader r, HTMLEditorKit.ParserCallback cb, int pos, boolean ignoreCharSet)`: This method parses the given reader starting at the specified position and invokes the callback for the parsed elements.
3. `void parse(InputStream in, HTMLEditorKit.ParserCallback cb, boolean ignoreCharSet)`: This method parses the given input stream and invokes the callback for the parsed elements.
4. `void parse(Reader r, HTMLEditorKit.ParserCallback cb, int pos)`: This method parses the given reader starting at the specified position and invokes the callback for the parsed elements.
5. `void parse(InputStream in, HTMLEditorKit.ParserCallback cb)`: This method parses the given input stream and invokes the callback for the parsed elements.
================================================================

Sample: 17 HTMLEditorKit.ParserCallback
----------------------------------------------------------------
1. void flush(): This method flushes any remaining state.
2. void handleComment(char[] data, int pos): This method is called when a comment is encountered.
3. void handleEndTag(HTML.Tag t, int pos): This method is called when an end tag is encountered.
4. void handleSimpleTag(HTML.Tag t, MutableAttributeSet a, int pos): This method is called when a simple tag is encountered.
5. void handleStartTag(HTML.Tag t, MutableAttributeSet a, int pos): This method is called when a start tag is encountered.
================================================================

Sample: 18 HTMLFrameHyperlinkEvent
----------------------------------------------------------------
1. void processEvent(): This method processes the event by calling the appropriate method on the listener.
2. String getTarget(): This method returns the target of the link that was activated.
3. String getTargetFrame(): This method returns the name of the frame in which the link was activated.
4. URL getURL(): This method returns the URL of the link that was activated.
5. String getInputEvent(): This method returns the input event that triggered the hyperlink event.
================================================================

Sample: 19 HTMLWriter
----------------------------------------------------------------
1. `void write()`: This method writes out the given HTML content.
2. `void writeAttributes(AttributeSet attributes)`: This method writes out the given attributes for an element.
3. `void writeEndTag(Element elem)`: This method writes out the end tag for the given element.
4. `void writeStartTag(Element elem)`: This method writes out the start tag for the given element.
5. `void writeStyleSheet(StyleSheet styleSheet)`: This method writes out the given style sheet.
================================================================

Sample: 20 ImageView
----------------------------------------------------------------
1. `void setLoadsSynchronously(boolean loadsSynchronously)`: This method sets whether the image should be loaded synchronously or asynchronously.
2. `void setProperties(Hashtable props)`: This method sets the properties for the image.
3. `void setDocument(HTMLDocument doc)`: This method sets the HTML document for the image.
4. `void setElement(Element elem)`: This method sets the element for the image.
5. `void setAttributes(AttributeSet attr)`: This method sets the attributes for the image.
================================================================

Sample: 21 InlineView
----------------------------------------------------------------
1. `void setAttributes(AttributeSet attr)`: This method sets the attributes for the view.
2. `void paint(Graphics g, Shape a)`: This method paints the view.
3. `float getPreferredSpan(int axis)`: This method returns the preferred span for the view along an axis.
4. `Shape modelToView(int pos, Shape a, Position.Bias b)`: This method converts the model coordinate to a view coordinate.
5. `int viewToModel(float x, float y, Shape a, Position.Bias[] biasReturn)`: This method converts the view coordinate to a model coordinate.
================================================================

Sample: 22 ListView
----------------------------------------------------------------
1. `void setModel(ListModel model)`: This method sets the data model for the list view.
2. `void setSelectionModel(ListSelectionModel selectionModel)`: This method sets the selection model for the list view.
3. `void setCellRenderer(ListCellRenderer cellRenderer)`: This method sets the cell renderer for the list view.
4. `void setLayoutOrientation(int layoutOrientation)`: This method sets the layout orientation for the list view.
5. `void setVisibleRowCount(int visibleRowCount)`: This method sets the number of visible rows in the list view.
================================================================

Sample: 23 MinimalHTMLWriter
----------------------------------------------------------------
1. `void write()`: This method writes out the HTML content for the document.
2. `void writeAttributes(AttributeSet attr)`: This method writes out the attributes for the given attribute set.
3. `void writeEmbeddedTags(AttributeSet attr)`: This method writes out the embedded tags for the given attribute set.
4. `void writeStartTag(Element elem)`: This method writes out the start tag for the given element.
5. `void writeEndTag(Element elem)`: This method writes out the end tag for the given element.
================================================================

Sample: 24 ObjectView
----------------------------------------------------------------
1. `void setParameters(AttributeSet attr)`: This method sets the parameters for the <object> element.
2. `void setDocument(Document doc)`: This method sets the document for the <object> element.
3. `void setParent(View parent)`: This method sets the parent view for the <object> element.
4. `void setElement(Element elem)`: This method sets the element for the <object> element.
5. `void setContainer(Container c)`: This method sets the container for the <object> element.
================================================================

Sample: 25 Option
----------------------------------------------------------------
1. `void setLabel(String label)`: This method sets the label for the option.
2. `String getLabel()`: This method returns the label of the option.
3. `void setValue(String value)`: This method sets the value for the option.
4. `String getValue()`: This method returns the value of the option.
5. `void setSelected(boolean selected)`: This method sets whether the option is selected or not.
================================================================

Sample: 26 ParagraphView
----------------------------------------------------------------
1. `float getMinimumSpan(int axis)`: This method returns the minimum span for the paragraph view along the specified axis.
2. `float getPreferredSpan(int axis)`: This method returns the preferred span for the paragraph view along the specified axis.
3. `void setParent(View parent)`: This method sets the parent view of the paragraph view.
4. `void setPropertiesFromAttributes()`: This method sets the properties of the paragraph view based on the attributes.
5. `void setInsets(float top, float left, float bottom, float right)`: This method sets the insets for the paragraph view.
================================================================

Sample: 27 StyleSheet
----------------------------------------------------------------
1. `void addRule(String rule)`: This method adds a CSS rule to the style sheet.
2. `void removeRule(String rule)`: This method removes a CSS rule from the style sheet.
3. `String getRule(String selector)`: This method returns the CSS rule for the specified selector.
4. `Enumeration<String> getRuleNames()`: This method returns an enumeration of all the CSS rule names in the style sheet.
5. `void importStyleSheet(URL url)`: This method imports a style sheet from the specified URL.
================================================================

Sample: 28 StyleSheet.BoxPainter
----------------------------------------------------------------
1. `void paint(java.awt.Graphics g, int x, int y, int w, int h, javax.swing.text.View v)`: This method paints the CSS box decoration.
2. `java.awt.Rectangle getPaintingInsets()`: This method returns the insets of the CSS box decoration for painting.
3. `java.awt.Dimension getPreferredSize(javax.swing.text.View v)`: This method returns the preferred size of the CSS box decoration.
4. `void paint(java.awt.Graphics g, float x, float y, float w, float h, javax.swing.text.View v)`: This method paints the CSS box decoration with floating point precision.
5. `java.awt.Rectangle getInteriorAllocation(javax.swing.text.View v)`: This method returns the interior allocation of the CSS box decoration.
================================================================

Sample: 29 StyleSheet.ListPainter
----------------------------------------------------------------
1. `void paint(java.awt.Graphics g, java.awt.Shape allocation)`: This method paints the list item at the specified allocation using the given graphics context.
2. `java.awt.Shape modelToView(int pos, java.awt.Shape a, javax.swing.text.Position.Bias b)`: This method converts the given position in the model to a view location.
3. `int viewToModel(float x, float y, java.awt.Shape a, javax.swing.text.Position.Bias[] biasReturn)`: This method converts the given view location to a position within the model.
4. `void setStyleSheet(javax.swing.text.html.StyleSheet styleSheet)`: This method sets the style sheet to be used for rendering the list items.
5. `void setBulleted(boolean bulleted)`: This method sets whether the list items should be rendered as bulleted or not.
================================================================

