Sample: 0 DnDConstants
----------------------------------------------------------------
1. int ACTION_COPY(): This method returns the constant value representing the copy action for a Drag and Drop operation.
2. int ACTION_MOVE(): This method returns the constant value representing the move action for a Drag and Drop operation.
3. int ACTION_COPY_OR_MOVE(): This method returns the constant value representing the copy or move action for a Drag and Drop operation.
4. int ACTION_LINK(): This method returns the constant value representing the link action for a Drag and Drop operation.
5. int ACTION_REFERENCE(): This method returns the constant value representing the reference action for a Drag and Drop operation.
================================================================

Sample: 1 DragGestureEvent
----------------------------------------------------------------
1. `InputEvent getTriggerEvent()`: This method returns the InputEvent that triggered this DragGestureEvent.
2. `Component getComponent()`: This method returns the Component associated with this DragGestureEvent.
3. `DragSource getDragSource()`: This method returns the DragSource that is associated with this DragGestureEvent.
4. `DragGestureRecognizer getSourceAsDragGestureRecognizer()`: This method returns the DragGestureRecognizer that is the source of this DragGestureEvent.
5. `void startDrag(Cursor dragCursor, Transferable transferable)`: This method initiates the Drag and Drop operation with the specified drag cursor and transferable object.
================================================================

Sample: 2 DragGestureRecognizer
----------------------------------------------------------------
1. `void registerListeners()`: This method registers the listeners for the drag gesture recognition.
2. `void unregisterListeners()`: This method unregisters the listeners for the drag gesture recognition.
3. `void setComponent(Component c)`: This method sets the Component associated with this DragGestureRecognizer.
4. `void setSourceActions(int actions)`: This method sets the permitted source actions for the associated Component.
5. `void setTriggerEvent(InputEvent e)`: This method sets the trigger event that initiates the drag gesture.
================================================================

Sample: 3 DragSource
----------------------------------------------------------------
1. `void startDrag(DragGestureEvent dge)`: This method starts the drag operation based on the specified DragGestureEvent.
2. `void addDragSourceListener(DragSourceListener dsl)`: This method adds the specified DragSourceListener to receive drag source events during the drag and drop operation.
3. `void removeDragSourceListener(DragSourceListener dsl)`: This method removes the specified DragSourceListener from receiving drag source events.
4. `void setCursor(Cursor c)`: This method sets the cursor to be used during the drag and drop operation.
5. `void setDragSourceContext(DragSourceContext dsc)`: This method sets the DragSourceContext for the drag and drop operation.
================================================================

Sample: 4 DragSourceAdapter
----------------------------------------------------------------
1. `void dragEnter(DragSourceDragEvent dsde)`: This method is called when the cursor enters the drop site of the DropTarget.
2. `void dragOver(DragSourceDragEvent dsde)`: This method is called when the cursor is still over the drop site of the DropTarget.
3. `void dropActionChanged(DragSourceDragEvent dsde)`: This method is called when the user has modified the current drop gesture.
4. `void dragExit(DragSourceEvent dse)`: This method is called when the cursor has exited the drop site of the DropTarget.
5. `void dragDropEnd(DragSourceDropEvent dsde)`: This method is called to signal that the drag operation has ended.
================================================================

Sample: 5 DragSourceContext
----------------------------------------------------------------
1. `void startDrag(DragGestureEvent dge, Cursor dragCursor, Image dragImage, Point imageOffset, Transferable transferable, DragSourceListener dsl)`: This method starts the drag operation.
2. `void addDragSourceListener(DragSourceListener dsl)`: This method adds the specified DragSourceListener to receive drag source events during the drag and drop operation.
3. `void removeDragSourceListener(DragSourceListener dsl)`: This method removes the specified DragSourceListener from the list of listeners.
4. `void setCursor(Cursor cursor)`: This method sets the cursor for this DragSourceContext.
5. `void transferablesFlavorsChanged()`: This method notifies the DragSourceContext that the Transferable's DataFlavor has changed.
================================================================

Sample: 6 DragSourceDragEvent
----------------------------------------------------------------
1. `int getX()`: This method returns the x coordinate of the cursor location in the coordinate system of the source component.
2. `int getY()`: This method returns the y coordinate of the cursor location in the coordinate system of the source component.
3. `int getTargetActions()`: This method returns the current target drop action.
4. `DragSourceContext getDragSourceContext()`: This method returns the DragSourceContext associated with this DragSourceDragEvent.
5. `int getGestureModifiers()`: This method returns the current gesture modifiers.
================================================================

Sample: 7 DragSourceDropEvent
----------------------------------------------------------------
1. void dropComplete(boolean success)
2. DataFlavor[] getCurrentDataFlavors()
3. Transferable getTransferable()
4. boolean isLocalTransfer()
5. boolean isActionSupported(int action)
================================================================

Sample: 8 DragSourceEvent
----------------------------------------------------------------
1. `void startDrag(DragGestureEvent trigger)`: This method initiates the Drag and Drop operation.
2. `void dragEnter(DragSourceDragEvent dsde)`: This method is called when the cursor enters the drop target.
3. `void dragOver(DragSourceDragEvent dsde)`: This method is called when the cursor is over the drop target.
4. `void dragExit(DragSourceEvent dse)`: This method is called when the cursor exits the drop target.
5. `void dropActionChanged(DragSourceDragEvent dsde)`: This method is called when the user has modified the drop action.
================================================================

Sample: 9 DropTarget
----------------------------------------------------------------
1. `void addDropTargetListener(DropTargetListener dtl)`: This method adds the specified DropTargetListener to receive drop events from this DropTarget.
2. `void removeDropTargetListener(DropTargetListener dtl)`: This method removes the specified DropTargetListener so that it no longer receives drop events from this DropTarget.
3. `void setComponent(Component c)`: This method sets the Component associated with this DropTarget.
4. `void setDefaultActions(int ops)`: This method sets the default acceptable actions for this DropTarget.
5. `void setActive(boolean isActive)`: This method sets the active state of this DropTarget.
================================================================

Sample: 10 DropTarget.DropTargetAutoScroller
----------------------------------------------------------------
1. `void stop()`: This method stops the autoscrolling.
2. `void updatePoint(Point p)`: This method updates the current location for autoscrolling.
3. `void updateRegion(Rectangle r, Point p)`: This method updates the current region and location for autoscrolling.
4. `void updateVisibleRegion(Rectangle r)`: This method updates the visible region for autoscrolling.
5. `void updateWindow(Point p)`: This method updates the current window location for autoscrolling.
================================================================

Sample: 11 DropTargetAdapter
----------------------------------------------------------------
1. `void dragEnter(DropTargetDragEvent dtde)`: This method is called when a drag operation is ongoing, and the cursor has entered the DropTarget's visible geometry.
2. `void dragOver(DropTargetDragEvent dtde)`: This method is called when a drag operation is ongoing, and the cursor is still over the DropTarget's visible geometry.
3. `void drop(DropTargetDropEvent dtde)`: This method is called when the drag operation has terminated with a drop on the DropTarget.
4. `void dropActionChanged(DropTargetDragEvent dtde)`: This method is called when the user has modified the current drop gesture.
5. `void dragExit(DropTargetEvent dte)`: This method is called when a drag operation has exited the DropTarget's visible geometry.
================================================================

Sample: 12 DropTargetContext
----------------------------------------------------------------
1. `Transferable getTransferable()`: This method returns the Transferable object associated with the current drag and drop operation.
2. `Component getComponent()`: This method returns the Component associated with the DropTargetContext.
3. `DropTarget getDropTarget()`: This method returns the DropTarget associated with the DropTargetContext.
4. `Point getComponentLocation()`: This method returns the location of the cursor relative to the Component associated with the DropTargetContext.
5. `void dropComplete(boolean success)`: This method notifies the system that the drop operation has been completed, with a boolean parameter indicating the success of the operation.
================================================================

Sample: 13 DropTargetDragEvent
----------------------------------------------------------------
1. `int getX()`: This method returns the x location of the drag event.
2. `int getY()`: This method returns the y location of the drag event.
3. `DataFlavor[] getCurrentDataFlavors()`: This method returns an array of DataFlavor objects representing the current data flavors available.
4. `Transferable getTransferable()`: This method returns the Transferable object associated with the drag operation.
5. `int getDropAction()`: This method returns the current drop action selected by the user.
================================================================

Sample: 14 DropTargetDropEvent
----------------------------------------------------------------
1. void acceptDrop(int dropAction)
2. DataFlavor[] getCurrentDataFlavors()
3. Transferable getTransferable()
4. Point getLocation()
5. int getDropAction()
================================================================

Sample: 15 DropTargetEvent
----------------------------------------------------------------
1. `DropTargetContext getDropTargetContext()`: This method returns the DropTargetContext associated with this DropTargetEvent.
2. `DataFlavor[] getCurrentDataFlavors()`: This method returns an array of DataFlavor objects representing the current data flavors of the Transferable object associated with this event.
3. `Transferable getTransferable()`: This method returns the Transferable object associated with this event.
4. `boolean isLocalTransfer()`: This method returns true if the transfer is local to the same JVM, false otherwise.
5. `boolean isDataFlavorSupported(DataFlavor df)`: This method returns true if the specified DataFlavor is supported, false otherwise.
================================================================

Sample: 16 MouseDragGestureRecognizer
----------------------------------------------------------------
1. `void registerListeners()`: This method registers the listeners needed for this MouseDragGestureRecognizer to function properly.
2. `void unregisterListeners()`: This method unregisters the listeners associated with this MouseDragGestureRecognizer.
3. `void setSourceActions(int actions)`: This method sets the permitted source actions for this MouseDragGestureRecognizer.
4. `void setTriggerEvent(MouseEvent trigger)` : This method sets the trigger event for this MouseDragGestureRecognizer.
5. `void setComponent(Component c)`: This method sets the component associated with this MouseDragGestureRecognizer.
================================================================

