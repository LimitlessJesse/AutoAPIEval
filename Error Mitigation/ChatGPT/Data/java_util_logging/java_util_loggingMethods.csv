ClassName,Method,Return Type,Description
ConsoleHandler,close(),void,Override StreamHandler.close to do a flush but not to close the output stream.
ConsoleHandler,publish(LogRecord record),void,Publish a LogRecord.
ErrorManager,"error(String msg, Exception ex, int code)",void,The error method is called when a Handler failure occurs.
FileHandler,close(),void,Close all the files.
FileHandler,publish(LogRecord record),void,Format and publish a LogRecord.
Formatter,format(LogRecord record),abstract String,Format the given log record and return the formatted string.
Formatter,formatMessage(LogRecord record),String,Localize and format the message string from a log record.
Formatter,getHead(Handler h),String,Return the header string for a set of formatted records.
Formatter,getTail(Handler h),String,Return the tail string for a set of formatted records.
Handler,close(),abstract void,Close the Handler and free all associated resources.
Handler,flush(),abstract void,Flush any buffered output.
Handler,getEncoding(),String,Return the character encoding for this Handler.
Handler,getErrorManager(),ErrorManager,Retrieves the ErrorManager for this Handler.
Handler,getFilter(),Filter,Get the current Filter for this Handler.
Handler,getFormatter(),Formatter,Return the Formatter for this Handler.
Handler,getLevel(),Level,Get the log level specifying which messages will be logged by this Handler.
Handler,isLoggable(LogRecord record),boolean,Check if this Handler would actually log a given LogRecord.
Handler,publish(LogRecord record),abstract void,Publish a LogRecord.
Handler,"reportError(String msg, Exception ex, int code)",protected void,Protected convenience method to report an error to this Handler's ErrorManager.
Handler,setEncoding(String encoding),void,Set the character encoding used by this Handler.
Handler,setErrorManager(ErrorManager em),void,Define an ErrorManager for this Handler.
Handler,setFilter(Filter newFilter),void,Set a Filter to control output on this Handler.
Handler,setFormatter(Formatter newFormatter),void,Set a Formatter.
Handler,setLevel(Level newLevel),void,Set the log level specifying which message levels will be logged by this Handler.
Level,equals(Object ox),boolean,Compare two objects for value equality.
Level,getLocalizedName(),String,"Return the localized string name of the Level, for the current default locale."
Level,getName(),String,Return the non-localized string name of the Level.
Level,getResourceBundleName(),String,"Return the level's localization resource bundle name, or null if no localization bundle is defined."
Level,hashCode(),int,Generate a hashcode.
Level,intValue(),int,Get the integer value for this level.
Level,parse(String name),static Level,Parse a level name string into a Level.
Level,toString(),String,Returns a string representation of this Level.
Logger,addHandler(Handler handler),void,Add a log Handler to receive logging messages.
Logger,config(String msg),void,Log a CONFIG message.
Logger,config(Supplier<String> msgSupplier),void,"Log a CONFIG message, which is only to be constructed if the logging level is such that the message will actually be logged."
Logger,"entering(String sourceClass, String sourceMethod)",void,Log a method entry.
Logger,"entering(String sourceClass, String sourceMethod, Object param1)",void,"Log a method entry, with one parameter."
Logger,"entering(String sourceClass, String sourceMethod, Object[] params)",void,"Log a method entry, with an array of parameters."
Logger,"exiting(String sourceClass, String sourceMethod)",void,Log a method return.
Logger,"exiting(String sourceClass, String sourceMethod, Object result)",void,"Log a method return, with result object."
Logger,fine(String msg),void,Log a FINE message.
Logger,fine(Supplier<String> msgSupplier),void,"Log a FINE message, which is only to be constructed if the logging level is such that the message will actually be logged."
Logger,finer(String msg),void,Log a FINER message.
Logger,finer(Supplier<String> msgSupplier),void,"Log a FINER message, which is only to be constructed if the logging level is such that the message will actually be logged."
Logger,finest(String msg),void,Log a FINEST message.
Logger,finest(Supplier<String> msgSupplier),void,"Log a FINEST message, which is only to be constructed if the logging level is such that the message will actually be logged."
Logger,getAnonymousLogger(),static Logger,Create an anonymous Logger.
Logger,getAnonymousLogger(String resourceBundleName),static Logger,Create an anonymous Logger.
Logger,getFilter(),Filter,Get the current filter for this Logger.
Logger,getGlobal(),static Logger,Return global logger object with the name Logger.GLOBAL_LOGGER_NAME.
Logger,getHandlers(),Handler[],Get the Handlers associated with this logger.
Logger,getLevel(),Level,Get the log Level that has been specified for this Logger.
Logger,getLogger(String name),static Logger,Find or create a logger for a named subsystem.
Logger,"getLogger(String name, String resourceBundleName)",static Logger,Find or create a logger for a named subsystem.
Logger,getName(),String,Get the name for this logger.
Logger,getParent(),Logger,Return the parent for this Logger.
Logger,getResourceBundle(),ResourceBundle,Retrieve the localization resource bundle for this logger.
Logger,getResourceBundleName(),String,Retrieve the localization resource bundle name for this logger.
Logger,getUseParentHandlers(),boolean,Discover whether or not this logger is sending its output to its parent logger.
Logger,info(String msg),void,Log an INFO message.
Logger,info(Supplier<String> msgSupplier),void,"Log a INFO message, which is only to be constructed if the logging level is such that the message will actually be logged."
Logger,isLoggable(Level level),boolean,Check if a message of the given level would actually be logged by this logger.
Logger,"log(Level level, String msg)",void,"Log a message, with no arguments."
Logger,"log(Level level, String msg, Object param1)",void,"Log a message, with one object parameter."
Logger,"log(Level level, String msg, Object[] params)",void,"Log a message, with an array of object arguments."
Logger,"log(Level level, String msg, Throwable thrown)",void,"Log a message, with associated Throwable information."
Logger,"log(Level level, Supplier<String> msgSupplier)",void,"Log a message, which is only to be constructed if the logging level is such that the message will actually be logged."
Logger,"log(Level level, Throwable thrown, Supplier<String> msgSupplier)",void,"Log a lazily constructed message, with associated Throwable information."
Logger,log(LogRecord record),void,Log a LogRecord.
Logger,"logp(Level level, String sourceClass, String sourceMethod, String msg)",void,"Log a message, specifying source class and method, with no arguments."
Logger,"logp(Level level, String sourceClass, String sourceMethod, String msg, Object param1)",void,"Log a message, specifying source class and method, with a single object parameter to the log message."
Logger,"logp(Level level, String sourceClass, String sourceMethod, String msg, Object[] params)",void,"Log a message, specifying source class and method, with an array of object arguments."
Logger,"logp(Level level, String sourceClass, String sourceMethod, String msg, Throwable thrown)",void,"Log a message, specifying source class and method, with associated Throwable information."
Logger,"logp(Level level, String sourceClass, String sourceMethod, Supplier<String> msgSupplier)",void,"Log a lazily constructed message, specifying source class and method, with no arguments."
Logger,"logp(Level level, String sourceClass, String sourceMethod, Throwable thrown, Supplier<String> msgSupplier)",void,"Log a lazily constructed message, specifying source class and method, with associated Throwable information."
Logger,"logrb(Level level, String sourceClass, String sourceMethod, ResourceBundle bundle, String msg, Object... params)",void,"Log a message, specifying source class, method, and resource bundle, with an optional list of message parameters."
Logger,"logrb(Level level, String sourceClass, String sourceMethod, ResourceBundle bundle, String msg, Throwable thrown)",void,"Log a message, specifying source class, method, and resource bundle, with associated Throwable information."
Logger,"logrb(Level level, String sourceClass, String sourceMethod, String bundleName, String msg)",void,"Deprecated. Use logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Object...) instead."
Logger,"logrb(Level level, String sourceClass, String sourceMethod, String bundleName, String msg, Object param1)",void,"Deprecated. Use logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Object...) instead"
Logger,"logrb(Level level, String sourceClass, String sourceMethod, String bundleName, String msg, Object[] params)",void,"Deprecated. Use logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Object...) instead."
Logger,"logrb(Level level, String sourceClass, String sourceMethod, String bundleName, String msg, Throwable thrown)",void,"Deprecated. Use logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Throwable) instead."
Logger,removeHandler(Handler handler),void,Remove a log Handler.
Logger,setFilter(Filter newFilter),void,Set a filter to control output on this Logger.
Logger,setLevel(Level newLevel),void,Set the log level specifying which message levels will be logged by this logger.
Logger,setParent(Logger parent),void,Set the parent for this Logger.
Logger,setResourceBundle(ResourceBundle bundle),void,Sets a resource bundle on this logger.
Logger,setUseParentHandlers(boolean useParentHandlers),void,Specify whether or not this logger should send its output to its parent Logger.
Logger,severe(String msg),void,Log a SEVERE message.
Logger,severe(Supplier<String> msgSupplier),void,"Log a SEVERE message, which is only to be constructed if the logging level is such that the message will actually be logged."
Logger,"throwing(String sourceClass, String sourceMethod, Throwable thrown)",void,Log throwing an exception.
Logger,warning(String msg),void,Log a WARNING message.
Logger,warning(Supplier<String> msgSupplier),void,"Log a WARNING message, which is only to be constructed if the logging level is such that the message will actually be logged."
LogManager,addLogger(Logger logger),boolean,Add a named logger.
LogManager,addPropertyChangeListener(PropertyChangeListener l),void,Deprecated. The dependency on PropertyChangeListener creates a significant impediment to future modularization of the Java platform. This method will be removed in a future release. The global LogManager can detect changes to the logging configuration by overridding the readConfiguration method.
LogManager,checkAccess(),void,Check that the current context is trusted to modify the logging configuration.
LogManager,getLogger(String name),Logger,Method to find a named logger.
LogManager,getLoggerNames(),Enumeration<String>,Get an enumeration of known logger names.
LogManager,getLoggingMXBean(),static LoggingMXBean,Returns LoggingMXBean for managing loggers.
LogManager,getLogManager(),static LogManager,Returns the global LogManager object.
LogManager,getProperty(String name),String,Get the value of a logging property.
LogManager,readConfiguration(),void,Reinitialize the logging properties and reread the logging configuration.
LogManager,readConfiguration(InputStream ins),void,"Reinitialize the logging properties and reread the logging configuration from the given stream, which should be in java.util.Properties format."
LogManager,removePropertyChangeListener(PropertyChangeListener l),void,Deprecated. The dependency on PropertyChangeListener creates a significant impediment to future modularization of the Java platform. This method will be removed in a future release. The global LogManager can detect changes to the logging configuration by overridding the readConfiguration method.
LogManager,reset(),void,Reset the logging configuration.
LogRecord,getLevel(),Level,"Get the logging message level, for example Level.SEVERE."
LogRecord,getLoggerName(),String,Get the source Logger's name.
LogRecord,getMessage(),String,"Get the ""raw"" log message, before localization or formatting."
LogRecord,getMillis(),long,Get event time in milliseconds since 1970.
LogRecord,getParameters(),Object[],Get the parameters to the log message.
LogRecord,getResourceBundle(),ResourceBundle,Get the localization resource bundle
LogRecord,getResourceBundleName(),String,Get the localization resource bundle name
LogRecord,getSequenceNumber(),long,Get the sequence number.
LogRecord,getSourceClassName(),String,Get the name of the class that (allegedly) issued the logging request.
LogRecord,getSourceMethodName(),String,Get the name of the method that (allegedly) issued the logging request.
LogRecord,getThreadID(),int,Get an identifier for the thread where the message originated.
LogRecord,getThrown(),Throwable,Get any throwable associated with the log record.
LogRecord,setLevel(Level level),void,"Set the logging message level, for example Level.SEVERE."
LogRecord,setLoggerName(String name),void,Set the source Logger's name.
LogRecord,setMessage(String message),void,"Set the ""raw"" log message, before localization or formatting."
LogRecord,setMillis(long millis),void,Set event time.
LogRecord,setParameters(Object[] parameters),void,Set the parameters to the log message.
LogRecord,setResourceBundle(ResourceBundle bundle),void,Set the localization resource bundle.
LogRecord,setResourceBundleName(String name),void,Set the localization resource bundle name.
LogRecord,setSequenceNumber(long seq),void,Set the sequence number.
LogRecord,setSourceClassName(String sourceClassName),void,Set the name of the class that (allegedly) issued the logging request.
LogRecord,setSourceMethodName(String sourceMethodName),void,Set the name of the method that (allegedly) issued the logging request.
LogRecord,setThreadID(int threadID),void,Set an identifier for the thread where the message originated.
LogRecord,setThrown(Throwable thrown),void,Set a throwable associated with the log event.
MemoryHandler,close(),void,Close the Handler and free all associated resources.
MemoryHandler,flush(),void,Causes a flush on the target Handler.
MemoryHandler,getPushLevel(),Level,Get the pushLevel.
MemoryHandler,isLoggable(LogRecord record),boolean,Check if this Handler would actually log a given LogRecord into its internal buffer.
MemoryHandler,publish(LogRecord record),void,Store a LogRecord in an internal buffer.
MemoryHandler,push(),void,Push any buffered output to the target Handler.
MemoryHandler,setPushLevel(Level newLevel),void,Set the pushLevel.
SimpleFormatter,format(LogRecord record),String,Format the given LogRecord.
SocketHandler,close(),void,Close this output stream.
SocketHandler,publish(LogRecord record),void,Format and publish a LogRecord.
StreamHandler,close(),void,Close the current output stream.
StreamHandler,flush(),void,Flush any buffered messages.
StreamHandler,isLoggable(LogRecord record),boolean,Check if this Handler would actually log a given LogRecord.
StreamHandler,publish(LogRecord record),void,Format and publish a LogRecord.
StreamHandler,setEncoding(String encoding),void,Set (or change) the character encoding used by this Handler.
StreamHandler,setOutputStream(OutputStream out),protected void,Change the output stream.
XMLFormatter,format(LogRecord record),String,Format the given message to XML.
XMLFormatter,getHead(Handler h),String,Return the header string for a set of XML formatted records.
XMLFormatter,getTail(Handler h),String,Return the tail string for a set of XML formatted records.
