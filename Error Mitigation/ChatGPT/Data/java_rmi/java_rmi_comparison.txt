Sample: 0 MarshalledObject
----------------------------------------------------------------
1. `Object get()`: This method returns the object contained in the MarshalledObject.
2. `byte[] getBytes()`: This method returns the byte array representing the serialized object.
3. `boolean equals(Object obj)`: This method compares this MarshalledObject to another object for equality.
4. `int hashCode()`: This method returns the hash code value for this MarshalledObject.
5. `String toString()`: This method returns a string representation of the MarshalledObject.
================================================================

Sample: 1 Naming
----------------------------------------------------------------
1. `T lookup(String name)`: This method looks up and returns the remote object bound to the specified name.
2. `void bind(String name, Remote obj)`: This method binds the specified name to a remote object.
3. `void rebind(String name, Remote obj)`: This method rebinds the specified name to a new remote object.
4. `void unbind(String name)`: This method removes the binding for the specified name.
5. `String[] list(String name)`: This method returns an array of the names bound in the registry.
================================================================

Sample: 2 RMISecurityManager
----------------------------------------------------------------
1. `void checkAccept(String host, int port)`: This method checks if the calling thread is allowed to accept incoming connections from the specified host and port.
2. `void checkConnect(String host, int port)`: This method checks if the calling thread is allowed to open a socket connection to the specified host and port.
3. `void checkListen(int port)`: This method checks if the calling thread is allowed to listen on the specified port for incoming connections.
4. `void checkPropertiesAccess()`: This method checks if the calling thread is allowed to access system properties.
5. `void checkAccept(String host, int port, Class<?> cl)`: This method checks if the calling thread is allowed to accept incoming connections from the specified host and port for the specified class.
================================================================

