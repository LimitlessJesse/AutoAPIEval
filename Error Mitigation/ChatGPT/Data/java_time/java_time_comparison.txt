Sample: 0 Clock
----------------------------------------------------------------
1. `ZoneId getZone()`: This method returns the time-zone of the clock.
2. `Instant instant()`: This method returns the current instant of the clock.
3. `long millis()`: This method returns the current milliseconds from the epoch of the clock.
4. `Clock withZone(ZoneId zone)`: This method returns a copy of the clock with a different time-zone.
5. `static Clock systemUTC()`: This method returns a clock that uses the best available system clock in the UTC time-zone.
================================================================

Sample: 1 Duration
----------------------------------------------------------------
1. `static Duration ofSeconds(long seconds)`: This method creates a Duration representing the specified number of seconds.
2. `static Duration ofMinutes(long minutes)`: This method creates a Duration representing the specified number of minutes.
3. `static Duration ofHours(long hours)`: This method creates a Duration representing the specified number of hours.
4. `static Duration ofDays(long days)`: This method creates a Duration representing the specified number of days.
5. `Duration plus(Duration duration)`: This method adds the specified duration to this duration and returns the result.
================================================================

Sample: 2 Instant
----------------------------------------------------------------
1. `static Instant now()`: This method returns the current instant from the system clock.
2. `static Instant ofEpochSecond(long epochSecond)`: This method obtains an instance of Instant using seconds from the epoch of 1970-01-01T00:00:00Z.
3. `static Instant ofEpochSecond(long epochSecond, long nanoAdjustment)`: This method obtains an instance of Instant using seconds from the epoch of 1970-01-01T00:00:00Z and an adjustment in nanoseconds.
4. `static Instant parse(CharSequence text)`: This method obtains an instance of Instant from a text string such as "2011-12-03T10:15:30.00Z".
5. `Instant plus(Duration amountToAdd)`: This method returns a copy of this Instant with the specified duration added.
================================================================

Sample: 3 LocalDate
----------------------------------------------------------------
1. `LocalDate now()`: This method returns the current date.
2. `LocalDate of(int year, int month, int dayOfMonth)`: This method returns a LocalDate instance representing the specified year, month, and day of the month.
3. `LocalDate parse(CharSequence text)`: This method parses a string in the ISO-8601 format and returns a LocalDate instance.
4. `LocalDate plusDays(long daysToAdd)`: This method returns a LocalDate instance with the specified number of days added.
5. `LocalDate minusDays(long daysToSubtract)`: This method returns a LocalDate instance with the specified number of days subtracted.
================================================================

Sample: 4 LocalDateTime
----------------------------------------------------------------
1. `LocalDateTime now()`: Returns the current date and time.
2. `LocalDateTime of(int year, int month, int dayOfMonth, int hour, int minute)`: Returns a LocalDateTime instance representing the specified year, month, day, hour, and minute.
3. `LocalDateTime parse(CharSequence text)`: Parses the specified text into a LocalDateTime instance.
4. `LocalDateTime plusDays(long daysToAdd)`: Returns a copy of this LocalDateTime with the specified number of days added.
5. `LocalDateTime minusHours(long hoursToSubtract)`: Returns a copy of this LocalDateTime with the specified number of hours subtracted.
================================================================

Sample: 5 LocalTime
----------------------------------------------------------------
1. `int getHour()`: Returns the hour-of-day field as an int.
2. `int getMinute()`: Returns the minute-of-hour field as an int.
3. `int getSecond()`: Returns the second-of-minute field as an int.
4. `LocalTime plusHours(long hoursToAdd)`: Returns a copy of this LocalTime with the specified number of hours added.
5. `LocalTime minusMinutes(long minutesToSubtract)`: Returns a copy of this LocalTime with the specified number of minutes subtracted.
================================================================

Sample: 6 MonthDay
----------------------------------------------------------------
1. `int getMonthValue()`: This method returns the month-of-year, from 1 to 12.
2. `Month getMonth()`: This method returns the month enum constant.
3. `boolean isValidYear(int year)`: This method checks if the month-day is valid for the specified year.
4. `String toString()`: This method returns a String representation of the MonthDay in the format --MM-DD.
5. `LocalDate atYear(int year)`: This method combines this MonthDay with a year to create a LocalDate.
================================================================

Sample: 7 OffsetDateTime
----------------------------------------------------------------
1. `OffsetDateTime plusDays(long days)`: This method returns a copy of this OffsetDateTime with the specified number of days added.
2. `OffsetDateTime minusHours(long hours)`: This method returns a copy of this OffsetDateTime with the specified number of hours subtracted.
3. `OffsetDateTime withYear(int year)`: This method returns a copy of this OffsetDateTime with the year altered.
4. `OffsetDateTime withOffsetSameInstant(ZoneOffset offset)`: This method returns a copy of this OffsetDateTime with the specified offset ensuring that the result is at the same instant.
5. `OffsetDateTime truncatedTo(TemporalUnit unit)`: This method returns a copy of this OffsetDateTime with the time truncated to the specified unit.
================================================================

Sample: 8 OffsetTime
----------------------------------------------------------------
1. `OffsetTime withHour(int hour)`: This method returns a copy of this OffsetTime with the hour-of-day altered.
2. `OffsetTime withMinute(int minute)`: This method returns a copy of this OffsetTime with the minute-of-hour altered.
3. `OffsetTime withSecond(int second)`: This method returns a copy of this OffsetTime with the second-of-minute altered.
4. `OffsetTime withOffsetSameLocal(ZoneOffset offset)`: This method returns a copy of this OffsetTime with the specified offset ensuring that the result has the same local time.
5. `OffsetTime truncatedTo(TemporalUnit unit)`: This method returns a copy of this OffsetTime with the time truncated.
================================================================

Sample: 9 Period
----------------------------------------------------------------
1. `Period between(LocalDate startDateInclusive, LocalDate endDateExclusive)`: This method returns a Period representing the amount of time between the two specified dates.
2. `Period parse(CharSequence text)`: This method parses a text string to produce a Period.
3. `Period of(int years, int months, int days)`: This method creates a Period representing a specific number of years, months, and days.
4. `Period ofDays(int days)`: This method creates a Period representing a specific number of days.
5. `Period ofMonths(int months)`: This method creates a Period representing a specific number of months.
================================================================

Sample: 10 Year
----------------------------------------------------------------
1. `int getValue()`: This method returns the value of the year as an int.
2. `boolean isLeap()`: This method checks if the year is a leap year and returns a boolean.
3. `Year minusYears(long years)`: This method returns a Year object with the specified number of years subtracted.
4. `Year plusYears(long years)`: This method returns a Year object with the specified number of years added.
5. `LocalDate atDay(int dayOfYear)`: This method returns a LocalDate representing the specified day of the year in this year.
================================================================

Sample: 11 YearMonth
----------------------------------------------------------------
1. `int lengthOfMonth()`: Returns the length of the month in days.
2. `YearMonth plusYears(long years)`: Returns a copy of this YearMonth with the specified number of years added.
3. `YearMonth minusYears(long years)`: Returns a copy of this YearMonth with the specified number of years subtracted.
4. `YearMonth plusMonths(long months)`: Returns a copy of this YearMonth with the specified number of months added.
5. `YearMonth minusMonths(long months)`: Returns a copy of this YearMonth with the specified number of months subtracted.
================================================================

Sample: 12 ZonedDateTime
----------------------------------------------------------------
1. `LocalDateTime toLocalDateTime()`: This method returns a LocalDateTime object representing the date and time without the time-zone information.
2. `ZoneId getZone()`: This method returns the time-zone associated with this ZonedDateTime.
3. `ZonedDateTime withZoneSameInstant(ZoneId zone)`: This method returns a copy of this ZonedDateTime with a different time-zone, retaining the same instant.
4. `ZonedDateTime withZoneSameLocal(ZoneId zone)`: This method returns a copy of this ZonedDateTime with a different time-zone, adjusting the local date-time to retain the same local time.
5. `OffsetDateTime toOffsetDateTime()`: This method converts this ZonedDateTime to an OffsetDateTime, which includes the offset from UTC/Greenwich.
================================================================

Sample: 13 ZoneId
----------------------------------------------------------------
1. `static ZoneId of(String zoneId)`: This method returns the ZoneId identified by the specified zone ID.
2. `static Set<String> getAvailableZoneIds()`: This method returns a set of all available zone IDs.
3. `static ZoneId systemDefault()`: This method returns the system default time-zone.
4. `ZoneRules getRules()`: This method returns the rules for this time-zone at the specified instant.
5. `String getId()`: This method returns the ID of this time-zone.
================================================================

Sample: 14 ZoneOffset
----------------------------------------------------------------
1. `int compareTo(ZoneOffset other)`: This method compares this ZoneOffset to another ZoneOffset.
2. `boolean equals(Object obj)`: This method checks if this ZoneOffset is equal to another object.
3. `int get(ChronoField field)`: This method gets the value of the specified field from this ZoneOffset.
4. `String getId()`: This method gets the normalized ZoneOffset ID.
5. `ZoneOffset normalized()`: This method normalizes this ZoneOffset, returning a ZoneOffset with a whole seconds value and within the range +/-18 hours.
================================================================

