Sample: 0 Certificate
----------------------------------------------------------------
1. `PublicKey getPublicKey()`: This method returns the public key of the certificate.
2. `byte[] getEncoded()`: This method returns the encoded form of the certificate.
3. `String toString()`: This method returns a string representation of the certificate.
4. `boolean equals(Object other)`: This method checks if the certificate is equal to another object.
5. `int hashCode()`: This method returns the hash code value for the certificate.
================================================================

Sample: 1 Certificate.CertificateRep
----------------------------------------------------------------
1. `byte[] getEncoded()`: This method returns the encoded form of the certificate.
2. `String getType()`: This method returns the type of the certificate.
3. `PublicKey getPublicKey()`: This method returns the public key of the certificate.
4. `String toString()`: This method returns a string representation of the certificate.
5. `boolean equals(Object other)`: This method checks if the specified object is equal to this certificate.
================================================================

Sample: 2 CertificateFactory
----------------------------------------------------------------
1. `Certificate generateCertificate(InputStream inStream)`: This method generates a certificate object from the provided input stream.
2. `CertPath generateCertPath(InputStream inStream)`: This method generates a certification path object from the provided input stream.
3. `CRL generateCRL(InputStream inStream)`: This method generates a certificate revocation list object from the provided input stream.
4. `Collection<? extends Certificate> generateCertificates(InputStream inStream)`: This method generates a collection of certificate objects from the provided input stream.
5. `Collection<? extends CRL> generateCRLs(InputStream inStream)`: This method generates a collection of certificate revocation list objects from the provided input stream.
================================================================

Sample: 3 CertificateFactorySpi
----------------------------------------------------------------
1. `Certificate engineGenerateCertificate(InputStream inStream)`: This method generates a certificate from the provided input stream.
2. `Certificate[] engineGenerateCertificates(InputStream inStream)`: This method generates a collection of certificates from the provided input stream.
3. `CRL engineGenerateCRL(InputStream inStream)`: This method generates a certificate revocation list (CRL) from the provided input stream.
4. `Collection<? extends CRL> engineGenerateCRLs(InputStream inStream)`: This method generates a collection of certificate revocation lists (CRLs) from the provided input stream.
5. `CertPath engineGenerateCertPath(InputStream inStream)`: This method generates a certification path from the provided input stream.
================================================================

Sample: 4 CertPath
----------------------------------------------------------------
1. `List<? extends Certificate> getCertificates()`: This method returns the list of certificates in this certification path.
2. `String getType()`: This method returns the type of the certification path (e.g., "X.509").
3. `byte[] getEncoded()`: This method returns the encoded form of the certification path.
4. `CertPathValidator getCertPathValidator(Provider provider)`: This method returns a CertPathValidator that implements the specified validation algorithm.
5. `CertPathBuilder getCertPathBuilder(Provider provider)`: This method returns a CertPathBuilder that implements the specified certification path building algorithm.
================================================================

Sample: 5 CertPath.CertPathRep
----------------------------------------------------------------
1. `Object readResolve()`
2. `void writeReplace()`
3. `CertPathRep(String type, byte[] data)`
4. `String getType()`
5. `byte[] getData()`
================================================================

Sample: 6 CertPathBuilder
----------------------------------------------------------------
1. `CertPathBuilderResult build(CertPathParameters params)`: This method builds a certification path using the specified parameters and returns the result.
2. `void addCertStore(CertStore store)`: This method adds a CertStore to the list of CertStores that will be searched for certificates and CRLs during the certification path building process.
3. `void setRevocationEnabled(boolean revocationEnabled)`: This method sets whether revocation checking is enabled during the certification path building process.
4. `void setTargetCertConstraints(CertSelector selector)`: This method sets the constraints for the target certificate that the certification path must end with.
5. `void setAlgorithmConstraints(AlgorithmConstraints constraints)`: This method sets the algorithm constraints for the certification path building process.
================================================================

Sample: 7 CertPathBuilderSpi
----------------------------------------------------------------
1. `CertPathBuilderResult engineBuild(CertPathParameters params)`: This method builds and validates a certification path using the specified algorithm parameters.
2. `CertPathChecker engineGetRevocationChecker()`: This method returns a CertPathChecker that checks the revocation status of certificates in a certification path.
3. `CertPathBuilderSpi clone()`: This method creates a copy of this CertPathBuilderSpi instance.
4. `void engineInit(CertPathBuilderParameters params)`: This method initializes the CertPathBuilderSpi with the specified algorithm parameters.
5. `CertPathBuilderResult engineValidate(CertPath certPath, CertPathParameters params)`: This method validates the specified certification path using the specified algorithm parameters.
================================================================

Sample: 8 CertPathValidator
----------------------------------------------------------------
1. `CertPathValidatorResult validate(CertPath certPath, CertPathParameters params)`: This method validates the specified certification path using the specified parameters and returns the result of the validation.
2. `void setRevocationEnabled(boolean val)`: This method sets whether revocation checking is enabled for the certification path validation.
3. `CertPathValidatorException getException(): This method returns the certification path validator exception that was thrown during the validation process.
4. `void setCertPathCheckers(List<PKIXCertPathChecker> checkers)`: This method sets the list of certification path checkers to be used during the validation process.
5. `void setCertStores(List<CertStore> stores)`: This method sets the list of certificate stores to be used during the validation process.
================================================================

Sample: 9 CertPathValidatorSpi
----------------------------------------------------------------
1. `CertPathValidatorResult engineValidate(CertPath certPath, CertPathParameters params)`: This method validates the specified certification path using the specified algorithm parameters.
2. `void engineInit(ValidatorSpiParameters params)`: This method initializes the CertPathValidatorSpi implementation with the specified algorithm parameters.
3. `CertPathChecker engineGetRevocationChecker()`: This method returns the CertPathChecker used for checking revocation status during the validation process.
4. `CertPathValidatorSpi clone()`: This method creates a copy of this CertPathValidatorSpi instance.
5. `void engineSetParameter(String param, Object value)`: This method sets a parameter for the CertPathValidatorSpi implementation.
================================================================

Sample: 10 CertStore
----------------------------------------------------------------
1. `Collection<? extends Certificate> getCertificates(CertSelector selector)`: This method returns a Collection of Certificates that match the specified selector.
2. `Collection<? extends CRL> getCRLs(CRLSelector selector)`: This method returns a Collection of CRLs that match the specified selector.
3. `Collection<? extends Certificate> engineGetCertificates(CertSelector selector)`: This method returns a Collection of Certificates that match the specified selector for the engine implementation.
4. `Collection<? extends CRL> engineGetCRLs(CRLSelector selector)`: This method returns a Collection of CRLs that match the specified selector for the engine implementation.
5. `void engineInit(CertStoreParameters params) throws InvalidAlgorithmParameterException`: This method initializes the CertStore with the specified parameters for the engine implementation.
================================================================

Sample: 11 CertStoreSpi
----------------------------------------------------------------
1. `Collection<? extends X509CRL> engineGetCRLs(CRLSelector selector)`: This method returns a collection of CRLs that match the specified selector.
2. `Collection<? extends Certificate> engineGetCertificates(CertSelector selector)`: This method returns a collection of certificates that match the specified selector.
3. `void engineInit(CertStoreParameters params) throws InvalidAlgorithmParameterException`: This method initializes the CertStoreSpi implementation with the specified parameters.
4. `Collection<? extends Certificate> engineGetCertificates(X509CertSelector selector) throws CertStoreException`: This method returns a collection of certificates that match the specified X509CertSelector.
5. `Collection<? extends CRL> engineGetCRLs(X509CRLSelector selector) throws CertStoreException`: This method returns a collection of CRLs that match the specified X509CRLSelector.
================================================================

Sample: 12 CollectionCertStoreParameters
----------------------------------------------------------------
1. `CollectionCertStoreParameters(Collection<? extends Certificate> coll)`: This constructor creates a new instance of CollectionCertStoreParameters with the specified collection of certificates as input.
2. `Collection<? extends Certificate> getCollection()`: This method returns the collection of certificates used as input for the Collection CertStore algorithm.
3. `boolean equals(Object obj)`: This method compares this CollectionCertStoreParameters object with the specified object for equality.
4. `int hashCode()`: This method returns a hash code value for the object.
5. `String toString()`: This method returns a string representation of the object.
================================================================

Sample: 13 CRL
----------------------------------------------------------------
1. `X509CRL getLatestCRL()`: This method returns the most recent X.509 CRL in this CRL object.
2. `X509CRLEntry getRevokedCertificate(X509Certificate cert)`: This method returns the X.509 CRL entry for the specified revoked certificate.
3. `boolean isRevoked(X509Certificate cert)`: This method checks if the specified certificate is revoked in this CRL object.
4. `Date getThisUpdate()`: This method returns the date and time when this CRL was issued.
5. `Date getNextUpdate()`: This method returns the date and time when the next CRL update is expected.
================================================================

Sample: 14 LDAPCertStoreParameters
----------------------------------------------------------------
1. `String getServerName()`: This method returns the LDAP server name.
2. `int getPort()`: This method returns the port number of the LDAP server.
3. `String getContextName()`: This method returns the context name for the LDAP server.
4. `String getAttribute()`: This method returns the attribute name used for searching in the LDAP server.
5. `String getFilter()`: This method returns the filter used for searching in the LDAP server.
================================================================

Sample: 15 PKIXBuilderParameters
----------------------------------------------------------------
1. `void setCertStores(List<CertStore> stores)`: This method sets the List of CertStores to be used for finding certificates and CRLs.
2. `void setTargetCertConstraints(CertSelector selector)`: This method sets the CertSelector that defines the constraints for the target certificate.
3. `void setInitialPolicies(Set<String> initialPolicies)`: This method sets the initial policy identifiers that will be used for certification path validation.
4. `void setDate(Date date)`: This method sets the date and time for which the validity of the certification path is determined.
5. `void setRevocationEnabled(boolean val)`: This method sets whether revocation checking is enabled during the certification path validation.
================================================================

Sample: 16 PKIXCertPathBuilderResult
----------------------------------------------------------------
1. `CertPath getCertPath()`: This method returns the certification path that was successfully built.
2. `PublicKey getPublicKey()`: This method returns the public key of the subject that the certification path ends with.
3. `TrustAnchor getTrustAnchor()`: This method returns the trust anchor that was used to validate the certification path.
4. `PolicyNode getPolicyTree()`: This method returns the policy tree that was built while validating the certification path.
5. `List<? extends Certificate> getCertificates()`: This method returns a list of certificates in the certification path.
================================================================

Sample: 17 PKIXCertPathChecker
----------------------------------------------------------------
1. `void init(boolean forward)`: Initializes the internal state of this PKIXCertPathChecker.
2. `boolean isForwardCheckingSupported()`: Returns whether forward checking is supported by this PKIXCertPathChecker.
3. `Set<String> getSupportedExtensions()`: Returns a Set of String objects representing the extensions supported by this PKIXCertPathChecker.
4. `void check(Certificate cert, Collection<String> unresolvedCritExts)`: Performs the check(s) on the specified certificate using its internal state.
5. `Object clone()`: Returns a copy of this PKIXCertPathChecker.
================================================================

Sample: 18 PKIXCertPathValidatorResult
----------------------------------------------------------------
1. `PKIXCertPath getCertPath()`: This method returns the certification path that was successfully validated.
2. `PolicyNode getPolicyTree()`: This method returns the root node of the valid policy tree.
3. `PublicKey getPublicKey()`: This method returns the public key of the subject that was validated.
4. `String toString()`: This method returns a string representation of the PKIXCertPathValidatorResult object.
5. `Object clone()`: This method creates and returns a copy of this PKIXCertPathValidatorResult object.
================================================================

Sample: 19 PKIXParameters
----------------------------------------------------------------
1. `void setInitialPolicies(Set<PolicyNode> initialPolicies)`: Sets the initial policy set to be used for certification path validation.
2. `void setCertStores(List<CertStore> stores)`: Sets the list of CertStores to be used in the PKIX certification path validation algorithm.
3. `void setDate(Date date)`: Sets the date and time at which the validity of the certification path should be determined.
4. `void setRevocationEnabled(boolean val)`: Sets the revocation checking enabled/disabled flag.
5. `void setSigProvider(String sigProvider)`: Sets the signature provider's name.
================================================================

Sample: 20 PKIXRevocationChecker
----------------------------------------------------------------
1. `void setOcspResponses(List<OCSPResponse> responses)`: This method sets the list of OCSP responses to be used for checking revocation status.
2. `void setOptions(Set<Option> options)`: This method sets the options for the revocation checker.
3. `void setOcspExtensions(Map<String, Extension> extensions)`: This method sets the OCSP extensions to be included in the OCSP request.
4. `void setOcspExtensionsOverride(Map<String, Extension> extensions)`: This method sets the OCSP extensions to be included in the OCSP request, overriding any extensions specified in the certificate.
5. `void setOcspResponder(URI uri)`: This method sets the URI of the OCSP responder to be used for checking revocation status.
================================================================

Sample: 21 PolicyQualifierInfo
----------------------------------------------------------------
1. `String getPolicyQualifierId()`
2. `byte[] getPolicyQualifier()` 
3. `PolicyQualifierInfo[] getPolicyQualifiers()` 
4. `String toString()` 
5. `boolean equals(Object other)`
================================================================

Sample: 22 TrustAnchor
----------------------------------------------------------------
1. `PublicKey getTrustedCert()`: This method returns the public key of the trusted certificate associated with this TrustAnchor.
2. `String getNameConstraints()`: This method returns the name constraints of the TrustAnchor.
3. `X500Principal getCA()` : This method returns the X.500 Principal of the CA associated with this TrustAnchor.
4. `Set<String> getPolicyQualifiers()`: This method returns the set of policy qualifiers associated with this TrustAnchor.
5. `byte[] getNameConstraintsEncoded()`: This method returns the encoded form of the name constraints associated with this TrustAnchor.
================================================================

Sample: 23 X509Certificate
----------------------------------------------------------------
1. `PublicKey getPublicKey()`: Returns the public key from this X.509 certificate.
2. `Collection<List<?>> getSubjectAlternativeNames()`: Returns a Collection of List objects representing the subject alternative names extension of this X.509 certificate.
3. `boolean hasUnsupportedCriticalExtension()`: Checks if this X.509 certificate has any unsupported critical extensions.
4. `byte[] getEncoded()`: Returns the encoded form of this X.509 certificate.
5. `void checkValidity(Date date)`: Checks if this X.509 certificate is currently valid based on the specified date.
================================================================

Sample: 24 X509CertSelector
----------------------------------------------------------------
1. `void setSubject(String subject)`: Sets the subject distinguished name criteria for selecting X509Certificates.
2. `void setIssuer(String issuer)`: Sets the issuer distinguished name criteria for selecting X509Certificates.
3. `void setSerialNumber(BigInteger serialNumber)`: Sets the serial number criteria for selecting X509Certificates.
4. `void setCertificateValid(Date date)`: Sets the certificate valid criteria for selecting X509Certificates.
5. `void setKeyUsage(boolean[] keyUsage)`: Sets the key usage criteria for selecting X509Certificates.
================================================================

Sample: 25 X509CRL
----------------------------------------------------------------
1. `X509CRLEntry getRevokedCertificate(X509Certificate certificate)`: This method returns the X.509 CRL entry for the specified revoked certificate.
2. `Set<? extends X509CRLEntry> getRevokedCertificates()`: This method returns a set view of the X.509 CRL entries contained in this CRL.
3. `X500Principal getIssuerDN()`: This method returns the issuer (X500Principal) of this X.509 CRL.
4. `Date getNextUpdate()`: This method returns the date of the next update for this X.509 CRL.
5. `X509CRLEntry getRevokedCertificate(BigInteger serialNumber)`: This method returns the X.509 CRL entry for the specified revoked certificate serial number.
================================================================

Sample: 26 X509CRLEntry
----------------------------------------------------------------
1. `byte[] getEncoded()`: This method returns the ASN.1 DER-encoded form of this CRL entry.
2. `BigInteger getSerialNumber()`: This method returns the serial number of the revoked certificate.
3. `Date getRevocationDate()`: This method returns the date on which the certificate was revoked.
4. `boolean hasExtensions()`: This method checks if this CRL entry has extensions.
5. `String toString()`: This method returns a string representation of this CRL entry.
================================================================

Sample: 27 X509CRLSelector
----------------------------------------------------------------
1. `void setIssuers(Collection<X500Principal> issuers)`: This method sets the issuers criterion. Parameters: Collection of X500Principal issuers.
2. `void setDateAndTime(Date dateAndTime)`: This method sets the date and time criterion. Parameters: Date dateAndTime.
3. `void setCertificateChecking(X509Certificate cert)`: This method sets the certificate checking criterion. Parameters: X509Certificate cert.
4. `void addIssuer(X500Principal issuer)`: This method adds an issuer criterion. Parameters: X500Principal issuer.
5. `void addIssuerName(String issuerName)`: This method adds an issuer name criterion. Parameters: String issuerName.
================================================================

