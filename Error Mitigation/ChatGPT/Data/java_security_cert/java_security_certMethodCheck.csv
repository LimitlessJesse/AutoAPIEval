Sample Number,ClassName,Snippet Number,Method,Exist,Description
0,Certificate,1,PublicKey getPublicKey(),True
0,Certificate,2,byte[] getEncoded(),True
0,Certificate,3,String toString(),True
0,Certificate,4,boolean equals(Object other),True
0,Certificate,5,int hashCode(),True
1,Certificate.CertificateRep,1,byte[] getEncoded(),False
1,Certificate.CertificateRep,2,String getType(),False
1,Certificate.CertificateRep,3,PublicKey getPublicKey(),False
1,Certificate.CertificateRep,4,String toString(),False
1,Certificate.CertificateRep,5,boolean equals(Object other),False
2,CertificateFactory,1,Certificate generateCertificate(InputStream inStream),True
2,CertificateFactory,2,CertPath generateCertPath(InputStream inStream),True
2,CertificateFactory,3,CRL generateCRL(InputStream inStream),True
2,CertificateFactory,4,Collection<? extends Certificate> generateCertificates(InputStream inStream),True
2,CertificateFactory,5,Collection<? extends CRL> generateCRLs(InputStream inStream),True
3,CertificateFactorySpi,1,Certificate engineGenerateCertificate(InputStream inStream),True
3,CertificateFactorySpi,2,Certificate[] engineGenerateCertificates(InputStream inStream),False
3,CertificateFactorySpi,3,CRL engineGenerateCRL(InputStream inStream),True
3,CertificateFactorySpi,4,Collection<? extends CRL> engineGenerateCRLs(InputStream inStream),True
3,CertificateFactorySpi,5,CertPath engineGenerateCertPath(InputStream inStream),True
4,CertPath,1,List<? extends Certificate> getCertificates(),True
4,CertPath,2,String getType(),True
4,CertPath,3,byte[] getEncoded(),True
4,CertPath,4,CertPathValidator getCertPathValidator(Provider provider),False
4,CertPath,5,CertPathBuilder getCertPathBuilder(Provider provider),False
5,CertPath.CertPathRep,1,Object readResolve(),True
5,CertPath.CertPathRep,2,void writeReplace(),False
5,CertPath.CertPathRep,3,"CertPathRep(String type, byte[] data)",False
5,CertPath.CertPathRep,4,String getType(),False
5,CertPath.CertPathRep,5,byte[] getData(),False
6,CertPathBuilder,1,CertPathBuilderResult build(CertPathParameters params),True
6,CertPathBuilder,2,void addCertStore(CertStore store),False
6,CertPathBuilder,3,void setRevocationEnabled(boolean revocationEnabled),False
6,CertPathBuilder,4,void setTargetCertConstraints(CertSelector selector),False
6,CertPathBuilder,5,void setAlgorithmConstraints(AlgorithmConstraints constraints),False
7,CertPathBuilderSpi,1,CertPathBuilderResult engineBuild(CertPathParameters params),True
7,CertPathBuilderSpi,2,CertPathChecker engineGetRevocationChecker(),True
7,CertPathBuilderSpi,3,CertPathBuilderSpi clone(),False
7,CertPathBuilderSpi,4,void engineInit(CertPathBuilderParameters params),False
7,CertPathBuilderSpi,5,"CertPathBuilderResult engineValidate(CertPath certPath, CertPathParameters params)",False
8,CertPathValidator,1,"CertPathValidatorResult validate(CertPath certPath, CertPathParameters params)",True
8,CertPathValidator,2,void setRevocationEnabled(boolean val),False
8,CertPathValidator,3,void setCertPathCheckers(List<PKIXCertPathChecker> checkers),False
8,CertPathValidator,4,void setCertStores(List<CertStore> stores),False
9,CertPathValidatorSpi,1,"CertPathValidatorResult engineValidate(CertPath certPath, CertPathParameters params)",True
9,CertPathValidatorSpi,2,void engineInit(ValidatorSpiParameters params),False
9,CertPathValidatorSpi,3,CertPathChecker engineGetRevocationChecker(),True
9,CertPathValidatorSpi,4,CertPathValidatorSpi clone(),False
9,CertPathValidatorSpi,5,"void engineSetParameter(String param, Object value)",False
10,CertStore,1,Collection<? extends Certificate> getCertificates(CertSelector selector),True
10,CertStore,2,Collection<? extends CRL> getCRLs(CRLSelector selector),True
10,CertStore,3,Collection<? extends Certificate> engineGetCertificates(CertSelector selector),False
10,CertStore,4,Collection<? extends CRL> engineGetCRLs(CRLSelector selector),False
10,CertStore,5,void engineInit(CertStoreParameters params) throws InvalidAlgorithmParameterException,False
11,CertStoreSpi,1,Collection<? extends X509CRL> engineGetCRLs(CRLSelector selector),False
11,CertStoreSpi,2,Collection<? extends Certificate> engineGetCertificates(CertSelector selector),True
11,CertStoreSpi,3,void engineInit(CertStoreParameters params) throws InvalidAlgorithmParameterException,False
11,CertStoreSpi,4,Collection<? extends Certificate> engineGetCertificates(X509CertSelector selector) throws CertStoreException,False
11,CertStoreSpi,5,Collection<? extends CRL> engineGetCRLs(X509CRLSelector selector) throws CertStoreException,False
12,CollectionCertStoreParameters,1,CollectionCertStoreParameters(Collection<? extends Certificate> coll),False
12,CollectionCertStoreParameters,2,Collection<? extends Certificate> getCollection(),False
12,CollectionCertStoreParameters,3,boolean equals(Object obj),False
12,CollectionCertStoreParameters,4,int hashCode(),False
12,CollectionCertStoreParameters,5,String toString(),True
13,CRL,1,X509CRL getLatestCRL(),False
13,CRL,2,X509CRLEntry getRevokedCertificate(X509Certificate cert),False
13,CRL,3,boolean isRevoked(X509Certificate cert),False
13,CRL,4,Date getThisUpdate(),False
13,CRL,5,Date getNextUpdate(),False
14,LDAPCertStoreParameters,1,String getServerName(),True
14,LDAPCertStoreParameters,2,int getPort(),True
14,LDAPCertStoreParameters,3,String getContextName(),False
14,LDAPCertStoreParameters,4,String getAttribute(),False
14,LDAPCertStoreParameters,5,String getFilter(),False
15,PKIXBuilderParameters,1,void setCertStores(List<CertStore> stores),False
15,PKIXBuilderParameters,2,void setTargetCertConstraints(CertSelector selector),False
15,PKIXBuilderParameters,3,void setInitialPolicies(Set<String> initialPolicies),False
15,PKIXBuilderParameters,4,void setDate(Date date),False
15,PKIXBuilderParameters,5,void setRevocationEnabled(boolean val),False
16,PKIXCertPathBuilderResult,1,CertPath getCertPath(),True
16,PKIXCertPathBuilderResult,2,PublicKey getPublicKey(),False
16,PKIXCertPathBuilderResult,3,TrustAnchor getTrustAnchor(),False
16,PKIXCertPathBuilderResult,4,PolicyNode getPolicyTree(),False
16,PKIXCertPathBuilderResult,5,List<? extends Certificate> getCertificates(),False
17,PKIXCertPathChecker,1,void init(boolean forward),True
17,PKIXCertPathChecker,2,boolean isForwardCheckingSupported(),True
17,PKIXCertPathChecker,3,Set<String> getSupportedExtensions(),True
17,PKIXCertPathChecker,4,"void check(Certificate cert, Collection<String> unresolvedCritExts)",True
17,PKIXCertPathChecker,5,Object clone(),True
18,PKIXCertPathValidatorResult,1,PKIXCertPath getCertPath(),False
18,PKIXCertPathValidatorResult,2,PolicyNode getPolicyTree(),True
18,PKIXCertPathValidatorResult,3,PublicKey getPublicKey(),True
18,PKIXCertPathValidatorResult,4,String toString(),True
18,PKIXCertPathValidatorResult,5,Object clone(),True
19,PKIXParameters,1,void setInitialPolicies(Set<PolicyNode> initialPolicies),False
19,PKIXParameters,2,void setCertStores(List<CertStore> stores),True
19,PKIXParameters,3,void setDate(Date date),True
19,PKIXParameters,4,void setRevocationEnabled(boolean val),True
19,PKIXParameters,5,void setSigProvider(String sigProvider),True
20,PKIXRevocationChecker,1,void setOcspResponses(List<OCSPResponse> responses),False
20,PKIXRevocationChecker,2,void setOptions(Set<Option> options),False
20,PKIXRevocationChecker,3,"void setOcspExtensions(Map<String, Extension> extensions)",False
20,PKIXRevocationChecker,4,"void setOcspExtensionsOverride(Map<String, Extension> extensions)",False
20,PKIXRevocationChecker,5,void setOcspResponder(URI uri),True
21,PolicyQualifierInfo,1,String getPolicyQualifierId(),True
21,PolicyQualifierInfo,2,byte[] getPolicyQualifier(),True
21,PolicyQualifierInfo,3,PolicyQualifierInfo[] getPolicyQualifiers(),False
21,PolicyQualifierInfo,4,String toString(),True
21,PolicyQualifierInfo,5,boolean equals(Object other),False
22,TrustAnchor,1,PublicKey getTrustedCert(),False
22,TrustAnchor,2,String getNameConstraints(),False
22,TrustAnchor,3,X500Principal getCA(),True
22,TrustAnchor,4,Set<String> getPolicyQualifiers(),False
22,TrustAnchor,5,byte[] getNameConstraintsEncoded(),False
23,X509Certificate,1,PublicKey getPublicKey(),False
23,X509Certificate,2,Collection<List<?>> getSubjectAlternativeNames(),True
23,X509Certificate,3,boolean hasUnsupportedCriticalExtension(),False
23,X509Certificate,4,byte[] getEncoded(),False
23,X509Certificate,5,void checkValidity(Date date),True
24,X509CertSelector,1,void setSubject(String subject),True
24,X509CertSelector,2,void setIssuer(String issuer),True
24,X509CertSelector,3,void setSerialNumber(BigInteger serialNumber),True
24,X509CertSelector,4,void setCertificateValid(Date date),True
24,X509CertSelector,5,void setKeyUsage(boolean[] keyUsage),True
25,X509CRL,1,X509CRLEntry getRevokedCertificate(X509Certificate certificate),True
25,X509CRL,2,Set<? extends X509CRLEntry> getRevokedCertificates(),True
25,X509CRL,3,X500Principal getIssuerDN(),False
25,X509CRL,4,Date getNextUpdate(),True
25,X509CRL,5,X509CRLEntry getRevokedCertificate(BigInteger serialNumber),True
26,X509CRLEntry,1,byte[] getEncoded(),True
26,X509CRLEntry,2,BigInteger getSerialNumber(),True
26,X509CRLEntry,3,Date getRevocationDate(),True
26,X509CRLEntry,4,boolean hasExtensions(),True
26,X509CRLEntry,5,String toString(),True
27,X509CRLSelector,1,void setIssuers(Collection<X500Principal> issuers),True
27,X509CRLSelector,2,void setDateAndTime(Date dateAndTime),True
27,X509CRLSelector,3,void setCertificateChecking(X509Certificate cert),True
27,X509CRLSelector,4,void addIssuer(X500Principal issuer),True
27,X509CRLSelector,5,void addIssuerName(String issuerName),True
