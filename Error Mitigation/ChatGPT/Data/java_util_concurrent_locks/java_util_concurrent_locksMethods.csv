ClassName,Method,Return Type,Description
AbstractOwnableSynchronizer,getExclusiveOwnerThread(),protected Thread,"Returns the thread last set by setExclusiveOwnerThread, or null if never set."
AbstractOwnableSynchronizer,setExclusiveOwnerThread(Thread thread),protected void,Sets the thread that currently owns exclusive access.
AbstractQueuedLongSynchronizer,acquire(long arg),void,"Acquires in exclusive mode, ignoring interrupts."
AbstractQueuedLongSynchronizer,acquireInterruptibly(long arg),void,"Acquires in exclusive mode, aborting if interrupted."
AbstractQueuedLongSynchronizer,acquireShared(long arg),void,"Acquires in shared mode, ignoring interrupts."
AbstractQueuedLongSynchronizer,acquireSharedInterruptibly(long arg),void,"Acquires in shared mode, aborting if interrupted."
AbstractQueuedLongSynchronizer,"compareAndSetState(long expect, long update)",protected boolean,Atomically sets synchronization state to the given updated value if the current state value equals the expected value.
AbstractQueuedLongSynchronizer,getExclusiveQueuedThreads(),Collection<Thread>,Returns a collection containing threads that may be waiting to acquire in exclusive mode.
AbstractQueuedLongSynchronizer,getFirstQueuedThread(),Thread,"Returns the first (longest-waiting) thread in the queue, or null if no threads are currently queued."
AbstractQueuedLongSynchronizer,getQueuedThreads(),Collection<Thread>,Returns a collection containing threads that may be waiting to acquire.
AbstractQueuedLongSynchronizer,getQueueLength(),int,Returns an estimate of the number of threads waiting to acquire.
AbstractQueuedLongSynchronizer,getSharedQueuedThreads(),Collection<Thread>,Returns a collection containing threads that may be waiting to acquire in shared mode.
AbstractQueuedLongSynchronizer,getState(),protected long,Returns the current value of synchronization state.
AbstractQueuedLongSynchronizer,getWaitingThreads(AbstractQueuedLongSynchronizer.ConditionObject condition),Collection<Thread>,Returns a collection containing those threads that may be waiting on the given condition associated with this synchronizer.
AbstractQueuedLongSynchronizer,getWaitQueueLength(AbstractQueuedLongSynchronizer.ConditionObject condition),int,Returns an estimate of the number of threads waiting on the given condition associated with this synchronizer.
AbstractQueuedLongSynchronizer,hasContended(),boolean,Queries whether any threads have ever contended to acquire this synchronizer; that is if an acquire method has ever blocked.
AbstractQueuedLongSynchronizer,hasQueuedPredecessors(),boolean,Queries whether any threads have been waiting to acquire longer than the current thread.
AbstractQueuedLongSynchronizer,hasQueuedThreads(),boolean,Queries whether any threads are waiting to acquire.
AbstractQueuedLongSynchronizer,hasWaiters(AbstractQueuedLongSynchronizer.ConditionObject condition),boolean,Queries whether any threads are waiting on the given condition associated with this synchronizer.
AbstractQueuedLongSynchronizer,isHeldExclusively(),protected boolean,Returns true if synchronization is held exclusively with respect to the current (calling) thread.
AbstractQueuedLongSynchronizer,isQueued(Thread thread),boolean,Returns true if the given thread is currently queued.
AbstractQueuedLongSynchronizer,owns(AbstractQueuedLongSynchronizer.ConditionObject condition),boolean,Queries whether the given ConditionObject uses this synchronizer as its lock.
AbstractQueuedLongSynchronizer,release(long arg),boolean,Releases in exclusive mode.
AbstractQueuedLongSynchronizer,releaseShared(long arg),boolean,Releases in shared mode.
AbstractQueuedLongSynchronizer,setState(long newState),protected void,Sets the value of synchronization state.
AbstractQueuedLongSynchronizer,toString(),String,"Returns a string identifying this synchronizer, as well as its state."
AbstractQueuedLongSynchronizer,tryAcquire(long arg),protected boolean,Attempts to acquire in exclusive mode.
AbstractQueuedLongSynchronizer,"tryAcquireNanos(long arg, long nanosTimeout)",boolean,"Attempts to acquire in exclusive mode, aborting if interrupted, and failing if the given timeout elapses."
AbstractQueuedLongSynchronizer,tryAcquireShared(long arg),protected long,Attempts to acquire in shared mode.
AbstractQueuedLongSynchronizer,"tryAcquireSharedNanos(long arg, long nanosTimeout)",boolean,"Attempts to acquire in shared mode, aborting if interrupted, and failing if the given timeout elapses."
AbstractQueuedLongSynchronizer,tryRelease(long arg),protected boolean,Attempts to set the state to reflect a release in exclusive mode.
AbstractQueuedLongSynchronizer,tryReleaseShared(long arg),protected boolean,Attempts to set the state to reflect a release in shared mode.
AbstractQueuedSynchronizer,acquire(int arg),void,"Acquires in exclusive mode, ignoring interrupts."
AbstractQueuedSynchronizer,acquireInterruptibly(int arg),void,"Acquires in exclusive mode, aborting if interrupted."
AbstractQueuedSynchronizer,acquireShared(int arg),void,"Acquires in shared mode, ignoring interrupts."
AbstractQueuedSynchronizer,acquireSharedInterruptibly(int arg),void,"Acquires in shared mode, aborting if interrupted."
AbstractQueuedSynchronizer,"compareAndSetState(int expect, int update)",protected boolean,Atomically sets synchronization state to the given updated value if the current state value equals the expected value.
AbstractQueuedSynchronizer,getExclusiveQueuedThreads(),Collection<Thread>,Returns a collection containing threads that may be waiting to acquire in exclusive mode.
AbstractQueuedSynchronizer,getFirstQueuedThread(),Thread,"Returns the first (longest-waiting) thread in the queue, or null if no threads are currently queued."
AbstractQueuedSynchronizer,getQueuedThreads(),Collection<Thread>,Returns a collection containing threads that may be waiting to acquire.
AbstractQueuedSynchronizer,getQueueLength(),int,Returns an estimate of the number of threads waiting to acquire.
AbstractQueuedSynchronizer,getSharedQueuedThreads(),Collection<Thread>,Returns a collection containing threads that may be waiting to acquire in shared mode.
AbstractQueuedSynchronizer,getState(),protected int,Returns the current value of synchronization state.
AbstractQueuedSynchronizer,getWaitingThreads(AbstractQueuedSynchronizer.ConditionObject condition),Collection<Thread>,Returns a collection containing those threads that may be waiting on the given condition associated with this synchronizer.
AbstractQueuedSynchronizer,getWaitQueueLength(AbstractQueuedSynchronizer.ConditionObject condition),int,Returns an estimate of the number of threads waiting on the given condition associated with this synchronizer.
AbstractQueuedSynchronizer,hasContended(),boolean,Queries whether any threads have ever contended to acquire this synchronizer; that is if an acquire method has ever blocked.
AbstractQueuedSynchronizer,hasQueuedPredecessors(),boolean,Queries whether any threads have been waiting to acquire longer than the current thread.
AbstractQueuedSynchronizer,hasQueuedThreads(),boolean,Queries whether any threads are waiting to acquire.
AbstractQueuedSynchronizer,hasWaiters(AbstractQueuedSynchronizer.ConditionObject condition),boolean,Queries whether any threads are waiting on the given condition associated with this synchronizer.
AbstractQueuedSynchronizer,isHeldExclusively(),protected boolean,Returns true if synchronization is held exclusively with respect to the current (calling) thread.
AbstractQueuedSynchronizer,isQueued(Thread thread),boolean,Returns true if the given thread is currently queued.
AbstractQueuedSynchronizer,owns(AbstractQueuedSynchronizer.ConditionObject condition),boolean,Queries whether the given ConditionObject uses this synchronizer as its lock.
AbstractQueuedSynchronizer,release(int arg),boolean,Releases in exclusive mode.
AbstractQueuedSynchronizer,releaseShared(int arg),boolean,Releases in shared mode.
AbstractQueuedSynchronizer,setState(int newState),protected void,Sets the value of synchronization state.
AbstractQueuedSynchronizer,toString(),String,"Returns a string identifying this synchronizer, as well as its state."
AbstractQueuedSynchronizer,tryAcquire(int arg),protected boolean,Attempts to acquire in exclusive mode.
AbstractQueuedSynchronizer,"tryAcquireNanos(int arg, long nanosTimeout)",boolean,"Attempts to acquire in exclusive mode, aborting if interrupted, and failing if the given timeout elapses."
AbstractQueuedSynchronizer,tryAcquireShared(int arg),protected int,Attempts to acquire in shared mode.
AbstractQueuedSynchronizer,"tryAcquireSharedNanos(int arg, long nanosTimeout)",boolean,"Attempts to acquire in shared mode, aborting if interrupted, and failing if the given timeout elapses."
AbstractQueuedSynchronizer,tryRelease(int arg),protected boolean,Attempts to set the state to reflect a release in exclusive mode.
AbstractQueuedSynchronizer,tryReleaseShared(int arg),protected boolean,Attempts to set the state to reflect a release in shared mode.
LockSupport,getBlocker(Thread t),static Object,"Returns the blocker object supplied to the most recent invocation of a park method that has not yet unblocked, or null if not blocked."
LockSupport,park(),static void,Disables the current thread for thread scheduling purposes unless the permit is available.
LockSupport,park(Object blocker),static void,Disables the current thread for thread scheduling purposes unless the permit is available.
LockSupport,parkNanos(long nanos),static void,"Disables the current thread for thread scheduling purposes, for up to the specified waiting time, unless the permit is available."
LockSupport,"parkNanos(Object blocker, long nanos)",static void,"Disables the current thread for thread scheduling purposes, for up to the specified waiting time, unless the permit is available."
LockSupport,parkUntil(long deadline),static void,"Disables the current thread for thread scheduling purposes, until the specified deadline, unless the permit is available."
LockSupport,"parkUntil(Object blocker, long deadline)",static void,"Disables the current thread for thread scheduling purposes, until the specified deadline, unless the permit is available."
LockSupport,unpark(Thread thread),static void,"Makes available the permit for the given thread, if it was not already available."
ReentrantLock,getHoldCount(),int,Queries the number of holds on this lock by the current thread.
ReentrantLock,getOwner(),protected Thread,"Returns the thread that currently owns this lock, or null if not owned."
ReentrantLock,getQueuedThreads(),protected Collection<Thread>,Returns a collection containing threads that may be waiting to acquire this lock.
ReentrantLock,getQueueLength(),int,Returns an estimate of the number of threads waiting to acquire this lock.
ReentrantLock,getWaitingThreads(Condition condition),protected Collection<Thread>,Returns a collection containing those threads that may be waiting on the given condition associated with this lock.
ReentrantLock,getWaitQueueLength(Condition condition),int,Returns an estimate of the number of threads waiting on the given condition associated with this lock.
ReentrantLock,hasQueuedThread(Thread thread),boolean,Queries whether the given thread is waiting to acquire this lock.
ReentrantLock,hasQueuedThreads(),boolean,Queries whether any threads are waiting to acquire this lock.
ReentrantLock,hasWaiters(Condition condition),boolean,Queries whether any threads are waiting on the given condition associated with this lock.
ReentrantLock,isFair(),boolean,Returns true if this lock has fairness set true.
ReentrantLock,isHeldByCurrentThread(),boolean,Queries if this lock is held by the current thread.
ReentrantLock,isLocked(),boolean,Queries if this lock is held by any thread.
ReentrantLock,lock(),void,Acquires the lock.
ReentrantLock,lockInterruptibly(),void,Acquires the lock unless the current thread is interrupted.
ReentrantLock,newCondition(),Condition,Returns a Condition instance for use with this Lock instance.
ReentrantLock,toString(),String,"Returns a string identifying this lock, as well as its lock state."
ReentrantLock,tryLock(),boolean,Acquires the lock only if it is not held by another thread at the time of invocation.
ReentrantLock,"tryLock(long timeout, TimeUnit unit)",boolean,Acquires the lock if it is not held by another thread within the given waiting time and the current thread has not been interrupted.
ReentrantLock,unlock(),void,Attempts to release this lock.
ReentrantReadWriteLock,getOwner(),protected Thread,"Returns the thread that currently owns the write lock, or null if not owned."
ReentrantReadWriteLock,getQueuedReaderThreads(),protected Collection<Thread>,Returns a collection containing threads that may be waiting to acquire the read lock.
ReentrantReadWriteLock,getQueuedThreads(),protected Collection<Thread>,Returns a collection containing threads that may be waiting to acquire either the read or write lock.
ReentrantReadWriteLock,getQueuedWriterThreads(),protected Collection<Thread>,Returns a collection containing threads that may be waiting to acquire the write lock.
ReentrantReadWriteLock,getQueueLength(),int,Returns an estimate of the number of threads waiting to acquire either the read or write lock.
ReentrantReadWriteLock,getReadHoldCount(),int,Queries the number of reentrant read holds on this lock by the current thread.
ReentrantReadWriteLock,getReadLockCount(),int,Queries the number of read locks held for this lock.
ReentrantReadWriteLock,getWaitingThreads(Condition condition),protected Collection<Thread>,Returns a collection containing those threads that may be waiting on the given condition associated with the write lock.
ReentrantReadWriteLock,getWaitQueueLength(Condition condition),int,Returns an estimate of the number of threads waiting on the given condition associated with the write lock.
ReentrantReadWriteLock,getWriteHoldCount(),int,Queries the number of reentrant write holds on this lock by the current thread.
ReentrantReadWriteLock,hasQueuedThread(Thread thread),boolean,Queries whether the given thread is waiting to acquire either the read or write lock.
ReentrantReadWriteLock,hasQueuedThreads(),boolean,Queries whether any threads are waiting to acquire the read or write lock.
ReentrantReadWriteLock,hasWaiters(Condition condition),boolean,Queries whether any threads are waiting on the given condition associated with the write lock.
ReentrantReadWriteLock,isFair(),boolean,Returns true if this lock has fairness set true.
ReentrantReadWriteLock,isWriteLocked(),boolean,Queries if the write lock is held by any thread.
ReentrantReadWriteLock,isWriteLockedByCurrentThread(),boolean,Queries if the write lock is held by the current thread.
ReentrantReadWriteLock,readLock(),ReentrantReadWriteLock.ReadLock,Returns the lock used for reading.
ReentrantReadWriteLock,toString(),String,"Returns a string identifying this lock, as well as its lock state."
ReentrantReadWriteLock,writeLock(),ReentrantReadWriteLock.WriteLock,Returns the lock used for writing.
ReentrantReadWriteLock.ReadLock,lock(),void,Acquires the read lock.
ReentrantReadWriteLock.ReadLock,lockInterruptibly(),void,Acquires the read lock unless the current thread is interrupted.
ReentrantReadWriteLock.ReadLock,newCondition(),Condition,Throws UnsupportedOperationException because ReadLocks do not support conditions.
ReentrantReadWriteLock.ReadLock,toString(),String,"Returns a string identifying this lock, as well as its lock state."
ReentrantReadWriteLock.ReadLock,tryLock(),boolean,Acquires the read lock only if the write lock is not held by another thread at the time of invocation.
ReentrantReadWriteLock.ReadLock,"tryLock(long timeout, TimeUnit unit)",boolean,Acquires the read lock if the write lock is not held by another thread within the given waiting time and the current thread has not been interrupted.
ReentrantReadWriteLock.ReadLock,unlock(),void,Attempts to release this lock.
ReentrantReadWriteLock.WriteLock,getHoldCount(),int,Queries the number of holds on this write lock by the current thread.
ReentrantReadWriteLock.WriteLock,isHeldByCurrentThread(),boolean,Queries if this write lock is held by the current thread.
ReentrantReadWriteLock.WriteLock,lock(),void,Acquires the write lock.
ReentrantReadWriteLock.WriteLock,lockInterruptibly(),void,Acquires the write lock unless the current thread is interrupted.
ReentrantReadWriteLock.WriteLock,newCondition(),Condition,Returns a Condition instance for use with this Lock instance.
ReentrantReadWriteLock.WriteLock,toString(),String,"Returns a string identifying this lock, as well as its lock state."
ReentrantReadWriteLock.WriteLock,tryLock(),boolean,Acquires the write lock only if it is not held by another thread at the time of invocation.
ReentrantReadWriteLock.WriteLock,"tryLock(long timeout, TimeUnit unit)",boolean,Acquires the write lock if it is not held by another thread within the given waiting time and the current thread has not been interrupted.
ReentrantReadWriteLock.WriteLock,unlock(),void,Attempts to release this lock.
StampedLock,asReadLock(),Lock,"Returns a plain Lock view of this StampedLock in which the Lock.lock() method is mapped to readLock(), and similarly for other methods."
StampedLock,asReadWriteLock(),ReadWriteLock,"Returns a ReadWriteLock view of this StampedLock in which the ReadWriteLock.readLock() method is mapped to asReadLock(), and ReadWriteLock.writeLock() to asWriteLock()."
StampedLock,asWriteLock(),Lock,"Returns a plain Lock view of this StampedLock in which the Lock.lock() method is mapped to writeLock(), and similarly for other methods."
StampedLock,getReadLockCount(),int,Queries the number of read locks held for this lock.
StampedLock,isReadLocked(),boolean,Returns true if the lock is currently held non-exclusively.
StampedLock,isWriteLocked(),boolean,Returns true if the lock is currently held exclusively.
StampedLock,readLock(),long,"Non-exclusively acquires the lock, blocking if necessary until available."
StampedLock,readLockInterruptibly(),long,"Non-exclusively acquires the lock, blocking if necessary until available or the current thread is interrupted."
StampedLock,toString(),String,"Returns a string identifying this lock, as well as its lock state."
StampedLock,tryConvertToOptimisticRead(long stamp),long,"If the lock state matches the given stamp then, if the stamp represents holding a lock, releases it and returns an observation stamp."
StampedLock,tryConvertToReadLock(long stamp),long,"If the lock state matches the given stamp, performs one of the following actions."
StampedLock,tryConvertToWriteLock(long stamp),long,"If the lock state matches the given stamp, performs one of the following actions."
StampedLock,tryOptimisticRead(),long,"Returns a stamp that can later be validated, or zero if exclusively locked."
StampedLock,tryReadLock(),long,Non-exclusively acquires the lock if it is immediately available.
StampedLock,"tryReadLock(long time, TimeUnit unit)",long,Non-exclusively acquires the lock if it is available within the given time and the current thread has not been interrupted.
StampedLock,tryUnlockRead(),boolean,"Releases one hold of the read lock if it is held, without requiring a stamp value."
StampedLock,tryUnlockWrite(),boolean,"Releases the write lock if it is held, without requiring a stamp value."
StampedLock,tryWriteLock(),long,Exclusively acquires the lock if it is immediately available.
StampedLock,"tryWriteLock(long time, TimeUnit unit)",long,Exclusively acquires the lock if it is available within the given time and the current thread has not been interrupted.
StampedLock,unlock(long stamp),void,"If the lock state matches the given stamp, releases the corresponding mode of the lock."
StampedLock,unlockRead(long stamp),void,"If the lock state matches the given stamp, releases the non-exclusive lock."
StampedLock,unlockWrite(long stamp),void,"If the lock state matches the given stamp, releases the exclusive lock."
StampedLock,validate(long stamp),boolean,Returns true if the lock has not been exclusively acquired since issuance of the given stamp.
StampedLock,writeLock(),long,"Exclusively acquires the lock, blocking if necessary until available."
StampedLock,writeLockInterruptibly(),long,"Exclusively acquires the lock, blocking if necessary until available or the current thread is interrupted."
