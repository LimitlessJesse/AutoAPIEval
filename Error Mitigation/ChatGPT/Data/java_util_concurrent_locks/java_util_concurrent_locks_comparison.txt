Sample: 0 AbstractOwnableSynchronizer
----------------------------------------------------------------
1. void acquire(int arg): This method acquires the lock if it is available, setting the owner to the current thread and setting the lock state to the given argument.
2. boolean isHeldExclusively(): This method returns true if the current thread is the owner of the synchronizer.
3. void release(int arg): This method releases the lock, setting the lock state to the given argument.
4. boolean tryAcquire(int arg): This method attempts to acquire the lock if it is available, setting the owner to the current thread and setting the lock state to the given argument.
5. boolean tryRelease(int arg): This method attempts to release the lock, setting the lock state to the given argument.
================================================================

Sample: 1 AbstractQueuedLongSynchronizer
----------------------------------------------------------------
1. `void setState(long newState)`: Sets the synchronization state to the given new state.
2. `long getState()`: Returns the current synchronization state.
3. `boolean compareAndSetState(long expect, long update)`: Atomically sets the synchronization state to the given update value if the current state equals the expected value.
4. `void acquire(long arg)`: Acquires the lock if it is available, or waits until it is available.
5. `boolean release(long arg)`: Releases the lock and wakes up waiting threads if necessary.
================================================================

Sample: 2 AbstractQueuedSynchronizer
----------------------------------------------------------------
1. `void acquire(int permits)`: This method acquires the given number of permits, blocking if necessary until all permits are available.
2. `boolean tryAcquireNanos(int permits, long nanosTimeout)`: This method acquires the given number of permits if they are available and returns true, waiting up to the specified wait time if necessary.
3. `void release(int permits)`: This method releases the given number of permits.
4. `int getQueueLength()`: This method returns an estimate of the number of threads waiting to acquire.
5. `boolean hasQueuedThreads()`: This method returns true if there are any threads waiting to acquire.
================================================================

Sample: 3 LockSupport
----------------------------------------------------------------
1. void park(): This method disables the current thread for thread scheduling purposes.
2. void unpark(Thread thread): This method makes available the permit for the given thread, if it was not already available.
3. void parkNanos(long nanos): This method disables the current thread for thread scheduling purposes, for up to the specified waiting time.
4. void parkUntil(long deadline): This method disables the current thread for thread scheduling purposes, until the specified deadline.
5. void parkUntil(Object blocker, long deadline): This method disables the current thread for thread scheduling purposes, until the specified deadline, or until interrupted.
================================================================

Sample: 4 ReentrantLock
----------------------------------------------------------------
1. `void lock()`: This method acquires the lock.
2. `void unlock()`: This method releases the lock.
3. `Condition newCondition()`: This method returns a new Condition instance that is bound to this Lock instance.
4. `boolean tryLock()`: This method acquires the lock only if it is not held by another thread at the time of invocation.
5. `boolean isHeldByCurrentThread()`: This method queries if the current thread holds the lock.
================================================================

Sample: 5 ReentrantReadWriteLock
----------------------------------------------------------------
1. `ReadWriteLock readWriteLock()`: Returns the lock used for reading and writing operations.
2. `Lock readLock()`: Returns the lock used for reading operations.
3. `Lock writeLock()`: Returns the lock used for writing operations.
4. `int getReadHoldCount()`: Returns the number of read locks held by the current thread.
5. `int getWriteHoldCount()`: Returns the number of write locks held by the current thread.
================================================================

Sample: 6 ReentrantReadWriteLock.ReadLock
----------------------------------------------------------------
1. `void lock()`: This method acquires the lock.
2. `void unlock()`: This method releases the lock.
3. `int getHoldCount()`: This method returns the hold count of the lock by the current thread.
4. `boolean isHeldByCurrentThread()`: This method returns true if the lock is held by the current thread.
5. `int getQueueLength()`: This method returns the number of threads waiting for the lock.
================================================================

Sample: 7 ReentrantReadWriteLock.WriteLock
----------------------------------------------------------------
1. void lock(): Acquires the lock.
2. void unlock(): Releases the lock.
3. int getHoldCount(): Returns the number of holds on this lock by the current thread.
4. boolean isHeldByCurrentThread(): Queries if this lock is held by the current thread.
5. boolean tryLock(long timeout, TimeUnit unit): Acquires the lock if it is not held by another thread within the given waiting time.
================================================================

Sample: 8 StampedLock
----------------------------------------------------------------
1. long tryOptimisticRead(): This method attempts to acquire a read lock optimistically.
2. long tryReadLock(): This method attempts to acquire a read lock.
3. long tryWriteLock(): This method attempts to acquire a write lock.
4. long tryConvertToReadLock(long stamp): This method attempts to convert the lock to a read lock.
5. long tryConvertToWriteLock(long stamp): This method attempts to convert the lock to a write lock.
================================================================

