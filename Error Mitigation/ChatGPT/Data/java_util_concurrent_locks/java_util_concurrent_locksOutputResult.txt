Sample: AbstractQueuedLongSynchronizer_1
----------------------------------------------------------------
output:
./Data/java_util_concurrent_locks/javaFiles/AbstractQueuedLongSynchronizer_1.java:5: error: AbstractQueuedLongSynchronizer is abstract; cannot be instantiated
        AbstractQueuedLongSynchronizer synchronizer = new AbstractQueuedLongSynchronizer();
                                                      ^
./Data/java_util_concurrent_locks/javaFiles/AbstractQueuedLongSynchronizer_1.java:6: error: setState(long) has protected access in AbstractQueuedLongSynchronizer
        synchronizer.setState(10);
                    ^
./Data/java_util_concurrent_locks/javaFiles/AbstractQueuedLongSynchronizer_1.java:7: error: getState() has protected access in AbstractQueuedLongSynchronizer
        System.out.println("State set to: " + synchronizer.getState());
                                                          ^
3 errors


================================================================

Sample: AbstractQueuedLongSynchronizer_2
----------------------------------------------------------------
output:
./Data/java_util_concurrent_locks/javaFiles/AbstractQueuedLongSynchronizer_2.java:6: error: getState() has protected access in AbstractQueuedLongSynchronizer
        long state = customSync.getState();
                               ^
1 error


================================================================

Sample: AbstractQueuedLongSynchronizer_3
----------------------------------------------------------------
output:
./Data/java_util_concurrent_locks/javaFiles/AbstractQueuedLongSynchronizer_3.java:5: error: AbstractQueuedLongSynchronizer is abstract; cannot be instantiated
        AbstractQueuedLongSynchronizer synchronizer = new AbstractQueuedLongSynchronizer();
                                                      ^
./Data/java_util_concurrent_locks/javaFiles/AbstractQueuedLongSynchronizer_3.java:8: error: compareAndSetState(long,long) has protected access in AbstractQueuedLongSynchronizer
        boolean result = synchronizer.compareAndSetState(expect, update);
                                     ^
2 errors


================================================================

Sample: AbstractQueuedLongSynchronizer_4
----------------------------------------------------------------
================================================================

Sample: AbstractQueuedLongSynchronizer_5
----------------------------------------------------------------
stdout:
Release successful: true

================================================================

Sample: AbstractQueuedSynchronizer_1
----------------------------------------------------------------
output:
./Data/java_util_concurrent_locks/javaFiles/AbstractQueuedSynchronizer_1.java:10: error: acquire(int) in MySync cannot override acquire(int) in AbstractQueuedSynchronizer
        public void acquire(int permits) {
                    ^
  overridden method is final
1 error


================================================================

Sample: AbstractQueuedSynchronizer_2
----------------------------------------------------------------
output:
./Data/java_util_concurrent_locks/javaFiles/AbstractQueuedSynchronizer_2.java:6: error: unreported exception InterruptedException; must be caught or declared to be thrown
        boolean acquired = sync.tryAcquireNanos(1, 1000);
                                               ^
1 error


================================================================

Sample: AbstractQueuedSynchronizer_4
----------------------------------------------------------------
stdout:
0

================================================================

Sample: AbstractQueuedSynchronizer_5
----------------------------------------------------------------
stdout:
Are there any queued threads? false

================================================================

Sample: ReentrantLock_1
----------------------------------------------------------------
================================================================

Sample: ReentrantLock_2
----------------------------------------------------------------
================================================================

Sample: ReentrantLock_3
----------------------------------------------------------------
timeout: process took too long
================================================================

Sample: ReentrantLock_4
----------------------------------------------------------------
stdout:
Lock acquired successfully

================================================================

Sample: ReentrantLock_5
----------------------------------------------------------------
stdout:
Is lock held by current thread? false

================================================================

Sample: ReentrantReadWriteLock_4
----------------------------------------------------------------
stdout:
Read hold count: 0

================================================================

Sample: ReentrantReadWriteLock_5
----------------------------------------------------------------
output:
./Data/java_util_concurrent_locks/javaFiles/ReentrantReadWriteLock_5.java:6: error: cannot find symbol
        int writeHoldCount = lock.writeLock().getWriteHoldCount();
                                             ^
  symbol:   method getWriteHoldCount()
  location: class WriteLock
1 error


================================================================

Sample: ReentrantReadWriteLock_ReadLock_1
----------------------------------------------------------------
================================================================

Sample: ReentrantReadWriteLock_ReadLock_2
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.IllegalMonitorStateException: attempt to unlock read lock, not locked by current thread
	at java.base/java.util.concurrent.locks.ReentrantReadWriteLock$Sync.unmatchedUnlockException(ReentrantReadWriteLock.java:448)
	at java.base/java.util.concurrent.locks.ReentrantReadWriteLock$Sync.tryReleaseShared(ReentrantReadWriteLock.java:432)
	at java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer.releaseShared(AbstractQueuedSynchronizer.java:1094)
	at java.base/java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock.unlock(ReentrantReadWriteLock.java:897)
	at ReentrantReadWriteLock_ReadLock_2.main(ReentrantReadWriteLock_ReadLock_2.java:8)

================================================================

