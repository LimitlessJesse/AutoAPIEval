Sample: 0 AtomicBoolean
----------------------------------------------------------------
1. `boolean compareAndSet(boolean expect, boolean update)`: This method atomically sets the value to the given updated value if the current value equals the expected value.
2. `boolean get()`: This method gets the current value.
3. `void set(boolean newValue)`: This method sets the given value.
4. `boolean getAndSet(boolean newValue)`: This method atomically sets the value to the given updated value and returns the old value.
5. `boolean weakCompareAndSet(boolean expect, boolean update)`: This method atomically sets the value to the given updated value if the current value equals the expected value, may fail spuriously and does not provide ordering guarantees.
================================================================

Sample: 1 AtomicInteger
----------------------------------------------------------------
1. int get(): This method returns the current value of the AtomicInteger.
2. void set(int newValue): This method sets the value of the AtomicInteger to the specified new value.
3. int incrementAndGet(): This method atomically increments the current value by one and returns the updated value.
4. int decrementAndGet(): This method atomically decrements the current value by one and returns the updated value.
5. boolean compareAndSet(int expect, int update): This method atomically sets the value to the given updated value if the current value equals the expected value, and returns true if successful.
================================================================

Sample: 2 AtomicIntegerArray
----------------------------------------------------------------
1. `int get(int i)`: This method returns the current value at the specified index in the array.
2. `void set(int i, int newValue)`: This method sets the element at the specified index to the given new value.
3. `int length()`: This method returns the length of the array.
4. `boolean compareAndSet(int i, int expect, int update)`: This method atomically sets the element at the specified index to the given update value if the current value equals the expect value.
5. `int incrementAndGet(int i)`: This method atomically increments the element at the specified index by one and returns the updated value.
================================================================

Sample: 3 AtomicIntegerFieldUpdater
----------------------------------------------------------------
1. `int getAndAdd(Object obj, int delta)`: This method atomically adds the given value to the current value of the field of the given object.
2. `int getAndIncrement(Object obj)`: This method atomically increments by one the current value of the field of the given object.
3. `int getAndSet(Object obj, int newValue)`: This method atomically sets the field of the given object to the given updated value and returns the old value.
4. `boolean compareAndSet(Object obj, int expect, int update)`: This method atomically sets the field of the given object to the given updated value if the current value equals the expected value.
5. `int get(Object obj)`: This method gets the current value of the field of the given object.
================================================================

Sample: 4 AtomicLong
----------------------------------------------------------------
1. `long get()`: This method returns the current value of the AtomicLong.
2. `void set(long newValue)`: This method sets the value of the AtomicLong to the given new value.
3. `long incrementAndGet()`: This method increments the current value of the AtomicLong by one and returns the updated value.
4. `long decrementAndGet()`: This method decrements the current value of the AtomicLong by one and returns the updated value.
5. `long getAndAdd(long delta)`: This method adds the given value to the current value of the AtomicLong and returns the previous value before the addition.
================================================================

Sample: 5 AtomicLongArray
----------------------------------------------------------------
1. `int length()`: Returns the length of the array.
2. `long get(int i)`: Returns the current value at the specified index.
3. `void set(int i, long newValue)`: Sets the element at the specified index to the given value.
4. `boolean compareAndSet(int i, long expect, long update)`: Atomically sets the element at the specified index to the given updated value if the current value equals the expected value.
5. `long getAndAdd(int i, long delta)`: Atomically adds the given value to the element at the specified index and returns the previous value.
================================================================

Sample: 6 AtomicLongFieldUpdater
----------------------------------------------------------------
1. `long get(Object obj)`: This method returns the current value of the field in the given object.
2. `void set(Object obj, long newValue)`: This method sets the field in the given object to the new specified value.
3. `long getAndSet(Object obj, long newValue)`: This method atomically sets the field in the given object to the new specified value and returns the old value.
4. `boolean compareAndSet(Object obj, long expect, long update)`: This method atomically sets the field in the given object to the new specified value if the current value equals the expected value.
5. `long getAndIncrement(Object obj)`: This method atomically increments the field in the given object by one and returns the old value.
================================================================

Sample: 7 AtomicMarkableReference
----------------------------------------------------------------
1. `boolean attemptMark(Object expectedReference, boolean newMark)`: This method atomically sets the value of the mark to the given update value if the current reference is equal to the expected reference.
2. `boolean compareAndSet(Object expectedReference, Object newReference, boolean expectedMark, boolean newMark)`: This method atomically sets the value of both the reference and the mark to the given update values if the current reference is equal to the expected reference and the current mark is equal to the expected mark.
3. `Object getReference()`: This method returns the current value of the reference.
4. `boolean isMarked()`: This method returns the current value of the mark.
5. `void set(Object newReference, boolean newMark)`: This method sets the value of both the reference and the mark to the given update values.
================================================================

Sample: 8 AtomicReference
----------------------------------------------------------------
1. `void set(V newValue)`: This method atomically sets the value to the given updated value.
2. `V get()`: This method gets the current value held by this AtomicReference.
3. `boolean compareAndSet(V expect, V update)`: This method atomically sets the value to the given updated value if the current value equals the expected value.
4. `V getAndSet(V newValue)`: This method atomically sets the value to the given updated value and returns the old value.
5. `boolean weakCompareAndSet(V expect, V update)`: This method atomically sets the value to the given updated value if the current value equals the expected value, using a weak compare-and-set operation.
================================================================

Sample: 9 AtomicReferenceArray
----------------------------------------------------------------
1. E get(int index)
2. void set(int index, E newValue)
3. boolean compareAndSet(int index, E expect, E update)
4. E getAndSet(int index, E newValue)
5. int length()
================================================================

Sample: 10 AtomicReferenceFieldUpdater
----------------------------------------------------------------
1. `void compareAndSet(Object obj, V expect, V update)`: This method atomically sets the field of the given object to the new value if the current value equals the expected value.
2. `V get(Object obj)`: This method gets the current value of the field of the given object.
3. `void lazySet(Object obj, V newValue)`: This method eventually sets the field of the given object to the new value, but does not guarantee visibility to other threads.
4. `void set(Object obj, V newValue)`: This method sets the field of the given object to the new value.
5. `boolean weakCompareAndSet(Object obj, V expect, V update)`: This method atomically sets the field of the given object to the new value if the current value equals the expected value, but may fail spuriously.
================================================================

Sample: 11 AtomicStampedReference
----------------------------------------------------------------
1. `boolean compareAndSet(V expectedReference, V newReference, int expectedStamp, int newStamp)`: This method atomically sets the value of both the reference and the stamp to the given update values if the current reference is equal to the expected reference and the current stamp is equal to the expected stamp.
2. `V getReference()`: This method returns the current value of the reference.
3. `int getStamp()`: This method returns the current value of the stamp.
4. `void set(V newReference, int newStamp)`: This method sets the value of both the reference and the stamp to the given update values.
5. `String toString()`: This method returns a string representation of the AtomicStampedReference.
================================================================

Sample: 12 DoubleAccumulator
----------------------------------------------------------------
1. `void accumulate(double x)`: This method updates the current value by applying the given function to the current value and the given update value.
2. `double get()`: This method returns the current value of the accumulator.
3. `void reset()`: This method resets the value of the accumulator to the identity value.
4. `double getThenReset()`: This method returns the current value and then resets the value to the identity.
5. `void accumulateAndGet(double x, DoubleBinaryOperator accumulatorFunction)`: This method updates the current value by applying the given function to the current value and the given update value, and returns the updated value.
================================================================

Sample: 13 DoubleAdder
----------------------------------------------------------------
1. `void add(double x)`: This method adds the given value to the sum.
2. `void increment()`: This method increments the sum by 1.
3. `void sumThenReset()`: This method returns the current sum, then resets the sum to zero.
4. `double sum()`: This method returns the current sum.
5. `void reset()`: This method resets the sum to zero.
================================================================

Sample: 14 LongAccumulator
----------------------------------------------------------------
1. `void accumulate(long x)`: This method updates the current value by applying the given function to the current value and the given update value.
2. `long get()`: This method returns the current value of the accumulator.
3. `void reset()`: This method resets the value of the accumulator to the identity value.
4. `long getThenReset()`: This method returns the current value and then resets the accumulator to the identity value.
5. `void accumulate(long x, LongBinaryOperator accumulatorFunction)`: This method updates the current value by applying the given function to the current value and the given update value.
================================================================

Sample: 15 LongAdder
----------------------------------------------------------------
1. `void add(long x)`: This method adds the given value to the sum.
2. `void increment()`: This method increments the sum by one.
3. `void decrement()`: This method decrements the sum by one.
4. `long sum()`: This method returns the current sum.
5. `void reset()`: This method resets the sum to zero.
================================================================

