Sample: 0 Instrument
----------------------------------------------------------------
1. `Soundbank getSoundbank()`: This method returns the Soundbank that contains this Instrument.
2. `Patch getPatch()`: This method returns the Patch object that specifies the bank and program number.
3. `String getName()`: This method returns the name of the instrument.
4. `String toString()`: This method returns a string representation of the instrument.
5. `int getPolyphony()`: This method returns the maximum number of simultaneous notes that this instrument can sound.
================================================================

Sample: 1 MetaMessage
----------------------------------------------------------------
1. `int getType()`: This method returns the type of this MetaMessage.
2. `byte[] getData()`: This method returns a copy of the data for this MetaMessage.
3. `void setMessage(int type, byte[] data, int length)`: This method sets the contents of the MetaMessage.
4. `void setMessage(byte[] data, int length)`: This method sets the contents of the MetaMessage without specifying a type.
5. `Object clone()`: This method creates a new object that is a copy of this MetaMessage.
================================================================

Sample: 2 MidiDevice.Info
----------------------------------------------------------------
1. String getName(): This method returns the name of the MidiDevice.
2. String getVendor(): This method returns the name of the company who created the MidiDevice.
3. String getDescription(): This method returns a description of the MidiDevice.
4. boolean isReceiver(): This method returns true if the MidiDevice is capable of receiving MIDI data.
5. boolean isTransmitter(): This method returns true if the MidiDevice is capable of transmitting MIDI data.
================================================================

Sample: 3 MidiEvent
----------------------------------------------------------------
1. `MidiMessage getMessage()`: This method returns the MIDI message associated with this MIDI event.
2. `long getTick()`: This method returns the tick value of this MIDI event.
3. `void setMessage(MidiMessage message, long tick)`: This method sets the MIDI message and tick value for this MIDI event.
4. `int compareTo(MidiEvent e)`: This method compares this MIDI event to another MIDI event based on their tick values.
5. `String toString()`: This method returns a string representation of this MIDI event.
================================================================

Sample: 4 MidiFileFormat
----------------------------------------------------------------
1. `int getType()`: This method returns the type of the MIDI file.
2. `long getByteLength()`: This method returns the length of the MIDI file in bytes.
3. `long getMicrosecondLength()`: This method returns the length of the MIDI file in microseconds.
4. `int getResolution()`: This method returns the timing resolution of the MIDI file.
5. `int getDivisionType()`: This method returns the division type of the MIDI file.
================================================================

Sample: 5 MidiMessage
----------------------------------------------------------------
1. `int getStatus()`: This method returns the status byte of the MIDI message.
2. `int getLength()`: This method returns the length of the MIDI message in bytes.
3. `byte[] getMessage()`: This method returns a byte array containing the complete MIDI message data.
4. `Object clone()`: This method creates and returns a copy of this MidiMessage object.
5. `String toString()`: This method returns a string representation of the MIDI message.
================================================================

Sample: 6 MidiSystem
----------------------------------------------------------------
1. `Sequencer getSequencer()`: This method returns the default Sequencer.
2. `Synthesizer getSynthesizer()`: This method returns the default Synthesizer.
3. `Receiver getReceiver()`: This method returns the default Receiver.
4. `Transmitter getTransmitter()`: This method returns the default Transmitter.
5. `MidiDevice.Info[] getMidiDeviceInfo()`: This method returns an array of MidiDevice.Info objects representing the available MIDI devices.
================================================================

Sample: 7 Patch
----------------------------------------------------------------
1. `int getBank()`: This method returns the bank index of the Patch.
2. `int getProgram()`: This method returns the program number of the Patch.
3. `boolean equals(Object obj)`: This method compares this Patch to the specified object.
4. `int hashCode()`: This method returns a hash code value for the Patch.
5. `String toString()`: This method returns a string representation of the Patch.
================================================================

Sample: 8 Sequence
----------------------------------------------------------------
1. `Track createTrack()`: This method creates a new Track object and adds it to the Sequence.
2. `long getMicrosecondLength()`: This method returns the length of the sequence in microseconds.
3. `int getResolution()`: This method returns the timing resolution of the sequence.
4. `float getDivisionType()`: This method returns the division type of the sequence.
5. `void deleteTrack(Track track)`: This method deletes the specified Track from the Sequence.
================================================================

Sample: 9 Sequencer.SyncMode
----------------------------------------------------------------
1. `boolean canPulse`: This method returns a boolean value indicating whether the sequencer can be synchronized to an external pulse.
2. `boolean canStart`: This method returns a boolean value indicating whether the sequencer can be started.
3. `boolean canStop`: This method returns a boolean value indicating whether the sequencer can be stopped.
4. `boolean canSync`: This method returns a boolean value indicating whether the sequencer can be synchronized to a master device.
5. `boolean canTempo`: This method returns a boolean value indicating whether the sequencer can set its tempo.
================================================================

Sample: 10 ShortMessage
----------------------------------------------------------------
1. `int getChannel()`: This method returns the MIDI channel associated with this ShortMessage.
2. `int getCommand()`: This method returns the MIDI command associated with this ShortMessage.
3. `int getData1()`: This method returns the first data byte of the MIDI message.
4. `int getData2()`: This method returns the second data byte of the MIDI message.
5. `int getLength()`: This method returns the length of the MIDI message in bytes.
================================================================

Sample: 11 SoundbankResource
----------------------------------------------------------------
1. `String getDescription()`: This method returns a description of the SoundbankResource.
2. `InputStream openStream()`: This method opens an input stream for the SoundbankResource.
3. `boolean isLooping()`: This method returns true if the SoundbankResource is set to loop.
4. `void setLooping(boolean looping)`: This method sets whether the SoundbankResource should loop.
5. `long getLength()`: This method returns the length of the SoundbankResource in bytes.
================================================================

Sample: 12 SysexMessage
----------------------------------------------------------------
1. `int getLength()`: This method returns the length of the system exclusive message in bytes.
2. `byte[] getData()`: This method returns a byte array containing the system exclusive message data.
3. `void setMessage(byte[] data, int length)`: This method sets the data for the system exclusive message.
4. `SysexMessage clone()`: This method creates and returns a copy of this SysexMessage object.
5. `String toString()`: This method returns a string representation of the SysexMessage object.
================================================================

Sample: 13 Track
----------------------------------------------------------------
1. `void add(MidiEvent event)`: This method adds a MIDI event to the end of the track.
2. `MidiEvent get(int index)`: This method returns the MIDI event at the specified index in the track.
3. `int size()`: This method returns the number of MIDI events in the track.
4. `void remove(MidiEvent event)`: This method removes the specified MIDI event from the track.
5. `void clear()`: This method removes all MIDI events from the track.
================================================================

Sample: 14 VoiceStatus
----------------------------------------------------------------
1. `int getVoice()`: This method returns the index of the voice.
2. `int getChannel()`: This method returns the MIDI channel of the voice.
3. `boolean isActive()`: This method returns true if the voice is currently active.
4. `int getBank()`: This method returns the bank of the voice.
5. `int getProgram()`: This method returns the program number of the voice.
================================================================

