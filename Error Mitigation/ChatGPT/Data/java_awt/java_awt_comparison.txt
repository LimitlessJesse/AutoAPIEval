Sample: 0 AlphaComposite
----------------------------------------------------------------
1. `AlphaComposite derive(float alpha)`: This method creates a new AlphaComposite object with the specified alpha value.
2. `AlphaComposite derive(int rule)`: This method creates a new AlphaComposite object with the specified compositing rule.
3. `AlphaComposite derive(float alpha, int rule)`: This method creates a new AlphaComposite object with the specified alpha value and compositing rule.
4. `AlphaComposite derive(float alpha, int rule, AlphaComposite ac2)`: This method creates a new AlphaComposite object with the specified alpha value, compositing rule, and another AlphaComposite object for combining.
5. `int getRule()`: This method returns the compositing rule of this AlphaComposite object.
================================================================

Sample: 1 AWTEvent
----------------------------------------------------------------
1. `int getID()`: This method returns the event type.
2. `long getWhen()`: This method returns the timestamp of when the event occurred.
3. `void consume()`: This method marks the event as consumed.
4. `boolean isConsumed()`: This method checks if the event has been consumed.
5. `String paramString()`: This method returns a parameter string identifying this event.
================================================================

Sample: 2 AWTEventMulticaster
----------------------------------------------------------------
1. `void remove(AWTEventListener listener)`: This method removes the specified AWTEventListener from the list of listeners.
2. `void eventDispatched(AWTEvent event)`: This method dispatches the specified AWTEvent to the appropriate listener.
3. `AWTEventListener add(AWTEventListener a, AWTEventListener b)`: This method adds two AWTEventListeners to be notified when events occur.
4. `void remove(AWTEventListener oldl, AWTEventListener l)`: This method removes the old AWTEventListener and replaces it with a new one.
5. `void remove(AWTEventListener oldl)`: This method removes the specified AWTEventListener from the list of listeners.
================================================================

Sample: 3 AWTKeyStroke
----------------------------------------------------------------
1. `AWTKeyStroke getAWTKeyStroke(char keyChar)`: This method returns an AWTKeyStroke for a keyChar.
2. `AWTKeyStroke getAWTKeyStroke(int keyCode, int modifiers)`: This method returns an AWTKeyStroke for a keyCode and modifiers.
3. `char getKeyChar()`: This method returns the character associated with this key stroke.
4. `int getKeyCode()`: This method returns the key code associated with this key stroke.
5. `int getModifiers()`: This method returns the modifiers associated with this key stroke.
================================================================

Sample: 4 AWTPermission
----------------------------------------------------------------
1. void checkPermission(java.security.Permission perm): This method checks if the specified permission is allowed.
2. java.security.PermissionCollection newPermissionCollection(): This method creates a new PermissionCollection object for storing permissions.
3. boolean equals(Object obj): This method compares this AWTPermission object to the specified object.
4. int hashCode(): This method returns the hash code value for this AWTPermission object.
5. String getActions(): This method returns the actions of the AWTPermission object.
================================================================

Sample: 5 BasicStroke
----------------------------------------------------------------
1. `float getLineWidth()`: This method returns the line width of this BasicStroke.
2. `int getEndCap()`: This method returns the end cap style of this BasicStroke.
3. `int getStartCap()`: This method returns the start cap style of this BasicStroke.
4. `int getLineJoin()`: This method returns the line join style of this BasicStroke.
5. `float getMiterLimit()`: This method returns the miter limit of this BasicStroke.
================================================================

Sample: 6 BorderLayout
----------------------------------------------------------------
1. `void addLayoutComponent(Component comp, Object constraints)`: This method adds the specified component to the layout, using the specified constraint object.
2. `void addLayoutComponent(String name, Component comp)`: This method adds the specified component to the layout, using the specified constraint object.
3. `Component getLayoutComponent(Container target, Object constraints)`: This method returns the component that corresponds to the given constraint location.
4. `Object getConstraints(Component comp)`: This method returns the constraints for the specified component.
5. `void removeLayoutComponent(Component comp)`: This method removes the specified component from the layout.
================================================================

Sample: 7 BufferCapabilities
----------------------------------------------------------------
1. `ImageCapabilities getImageCapabilities()`: This method returns the ImageCapabilities object associated with this BufferCapabilities.
2. `boolean isFullScreenRequired()`: This method returns true if full-screen exclusive mode is required for this BufferCapabilities.
3. `boolean isPageFlipping()`: This method returns true if page flipping is supported by this BufferCapabilities.
4. `boolean isMultiBufferAvailable()`: This method returns true if multiple buffers are available for this BufferCapabilities.
5. `boolean isFullScreenRequired()`: This method returns true if full-screen exclusive mode is required for this BufferCapabilities.
================================================================

Sample: 8 BufferCapabilities.FlipContents
----------------------------------------------------------------
1. `boolean isPageFlipping()`: This method returns true if the back buffer contents include page flipping, false otherwise.
2. `boolean isUndefined()`: This method returns true if the back buffer contents are undefined, false otherwise.
3. `boolean isBackgroundOpaque()`: This method returns true if the back buffer contents include an opaque background, false otherwise.
4. `boolean isFgAccelerated()`: This method returns true if the back buffer contents include foreground acceleration, false otherwise.
5. `boolean isBgAccelerated()`: This method returns true if the back buffer contents include background acceleration, false otherwise.
================================================================

Sample: 9 Button
----------------------------------------------------------------
1. `String getLabel()`: This method returns the label of the button.
2. `void setLabel(String label)`: This method sets the label of the button to the specified string.
3. `void addActionListener(ActionListener l)`: This method adds an ActionListener to the button.
4. `void removeActionListener(ActionListener l)`: This method removes the specified ActionListener from the button.
5. `void setEnabled(boolean enabled)`: This method enables or disables the button based on the boolean parameter provided.
================================================================

Sample: 10 Canvas
----------------------------------------------------------------
1. `void paint(Graphics g)`: This method is called to draw on the canvas using the specified Graphics object.
2. `void update(Graphics g)`: This method is called to update the canvas using the specified Graphics object.
3. `void createBufferStrategy(int numBuffers)`: This method creates a new buffer strategy for this canvas with the specified number of buffers.
4. `BufferStrategy getBufferStrategy()`: This method returns the buffer strategy used by this canvas for buffering strategy.
5. `void setIgnoreRepaint(boolean ignore)`: This method sets whether this canvas should ignore repaint requests.
================================================================

Sample: 11 CardLayout
----------------------------------------------------------------
1. `void show(Container parent, String name)`: This method displays the component that was added with the specified name.
2. `void first(Container parent)`: This method displays the first component in the layout.
3. `void last(Container parent)`: This method displays the last component in the layout.
4. `void next(Container parent)`: This method displays the next component in the layout.
5. `void previous(Container parent)`: This method displays the previous component in the layout.
================================================================

Sample: 12 Checkbox
----------------------------------------------------------------
1. `void setLabel(String label)`: This method sets the label of the Checkbox.
2. `void setState(boolean state)`: This method sets the state of the Checkbox to either "on" (true) or "off" (false).
3. `String getLabel()`: This method returns the label of the Checkbox.
4. `boolean getState()`: This method returns the state of the Checkbox, either "on" (true) or "off" (false).
5. `void addItemListener(ItemListener l)`: This method adds an ItemListener to the Checkbox to listen for item events.
================================================================

Sample: 13 CheckboxGroup
----------------------------------------------------------------
1. `CheckboxGroup()`: Constructor for creating a new CheckboxGroup object.
2. `Checkbox getCurrent()`: Returns the currently selected Checkbox in the group.
3. `void setSelectedCheckbox(Checkbox box)`: Sets the specified Checkbox as the currently selected Checkbox in the group.
4. `Checkbox getSelectedCheckbox()`: Returns the currently selected Checkbox in the group.
5. `void setSelectedCheckbox(String name)`: Sets the Checkbox with the specified name as the currently selected Checkbox in the group.
================================================================

Sample: 14 CheckboxMenuItem
----------------------------------------------------------------
1. `void setState(boolean state)`: This method sets the state of the checkbox menu item to either checked (true) or unchecked (false).
2. `boolean getState()`: This method returns the current state of the checkbox menu item, true if checked and false if unchecked.
3. `void addItemListener(ItemListener l)`: This method adds the specified item listener to receive item events from this checkbox menu item.
4. `void removeItemListener(ItemListener l)`: This method removes the specified item listener so that it no longer receives item events from this checkbox menu item.
5. `String paramString()`: This method returns a string representation of the checkbox menu item, including its label and state.
================================================================

Sample: 15 Choice
----------------------------------------------------------------
1. `void addItem(String item)`: This method adds an item to the Choice menu.
2. `void remove(int index)`: This method removes the item at the specified index from the Choice menu.
3. `String getItem(int index)`: This method returns the item at the specified index in the Choice menu.
4. `int getItemCount()`: This method returns the number of items in the Choice menu.
5. `void select(int index)`: This method selects the item at the specified index in the Choice menu.
================================================================

Sample: 16 Color
----------------------------------------------------------------
1. `int getRed()`: This method returns the red component in the range 0-255.
2. `int getGreen()`: This method returns the green component in the range 0-255.
3. `int getBlue()`: This method returns the blue component in the range 0-255.
4. `int getRGB()`: This method returns the RGB value representing the color in the default sRGB ColorModel.
5. `Color brighter()`: This method creates a new Color that is a brighter version of this Color.
================================================================

Sample: 17 Component
----------------------------------------------------------------
1. `void paint(Graphics g)`: This method paints the component to the specified graphics context.
2. `Dimension getPreferredSize()`: This method returns the preferred size of the component.
3. `void setSize(int width, int height)`: This method sets the size of the component to the specified width and height.
4. `void setLocation(int x, int y)`: This method sets the location of the component to the specified x and y coordinates.
5. `void setVisible(boolean visible)`: This method sets the visibility of the component to the specified boolean value.
================================================================

Sample: 18 ComponentOrientation
----------------------------------------------------------------
1. `ComponentOrientation getOrientation()`: This method returns the orientation of the component.
2. `boolean isLeftToRight()`: This method returns true if the orientation is left-to-right, false otherwise.
3. `ComponentOrientation opposite()`: This method returns the opposite orientation of the component.
4. `ComponentOrientation rightToLeft()`: This method returns the right-to-left orientation.
5. `ComponentOrientation leftToRight()`: This method returns the left-to-right orientation.
================================================================

Sample: 19 Container
----------------------------------------------------------------
1. `void add(Component comp)`: This method adds the specified component to this container.
2. `void remove(Component comp)`: This method removes the specified component from this container.
3. `Component getComponent(int n)`: This method returns the nth component in this container.
4. `void removeAll()`: This method removes all components from this container.
5. `void setLayout(LayoutManager mgr)`: This method sets the layout manager for this container.
================================================================

Sample: 20 ContainerOrderFocusTraversalPolicy
----------------------------------------------------------------
1. `Component getComponentAfter(Container focusCycleRoot, Component aComponent)`: This method returns the Component that should receive the focus after aComponent in the traversal cycle.
   
2. `Component getComponentBefore(Container focusCycleRoot, Component aComponent)`: This method returns the Component that should receive the focus before aComponent in the traversal cycle.

3. `Component getDefaultComponent(Container focusCycleRoot)`: This method returns the default Component to focus on when the focus traversal policy determines that no Component in the traversal cycle is a valid focus target.

4. `Component getLastComponent(Container focusCycleRoot)`: This method returns the last Component in the traversal cycle.

5. `Component getFirstComponent(Container focusCycleRoot)`: This method returns the first Component in the traversal cycle.
================================================================

Sample: 21 Cursor
----------------------------------------------------------------
1. `int getType()`: This method returns the type of the cursor.
2. `int getHotSpotX()`: This method returns the x-coordinate of the cursor's hot spot.
3. `int getHotSpotY()`: This method returns the y-coordinate of the cursor's hot spot.
4. `Image getImage()`: This method returns the image representation of the cursor.
5. `String getName()`: This method returns the name of the cursor.
================================================================

Sample: 22 DefaultFocusTraversalPolicy
----------------------------------------------------------------
1. `Component getComponentAfter(Container focusCycleRoot, Component aComponent)`: This method returns the Component that should receive the focus after aComponent in the given focusCycleRoot Container.
2. `Component getComponentBefore(Container focusCycleRoot, Component aComponent)`: This method returns the Component that should receive the focus before aComponent in the given focusCycleRoot Container.
3. `Component getDefaultComponent(Container focusCycleRoot)`: This method returns the default Component to focus on in the given focusCycleRoot Container.
4. `Component getFirstComponent(Container focusCycleRoot)`: This method returns the first Component in the traversal cycle for the given focusCycleRoot Container.
5. `Component getLastComponent(Container focusCycleRoot)`: This method returns the last Component in the traversal cycle for the given focusCycleRoot Container.
================================================================

Sample: 23 DefaultKeyboardFocusManager
----------------------------------------------------------------
1. `void upFocusCycle(Component aComponent)`: Moves the focus cycle root forward from aComponent.
2. `void downFocusCycle(Container aContainer)`: Moves the focus cycle root down to aContainer.
3. `void setDefaultFocusTraversalKeys(int id, Set<? extends AWTKeyStroke> keystrokes)`: Sets the default focus traversal keys for a given traversal operation.
4. `void setDefaultFocusTraversalPolicy(FocusTraversalPolicy policy)`: Sets the default focus traversal policy for this KeyboardFocusManager.
5. `void setGlobalCurrentFocusCycleRoot(Container newFocusCycleRoot)`: Sets the current focus cycle root.
================================================================

Sample: 24 Desktop
----------------------------------------------------------------
1. `boolean isDesktopSupported()`: This method returns a boolean value indicating whether the Desktop API is supported on the current platform.
2. `void open(File file)`: This method opens the specified file with the default associated application.
3. `void edit(File file)`: This method edits the specified file with the default associated application.
4. `void browse(URI uri)`: This method opens the specified URI in the user's default web browser.
5. `void mail(URI mailtoURI)`: This method launches the user's default mail client to compose a new email with the specified mailto URI.
================================================================

Sample: 25 Dialog
----------------------------------------------------------------
1. `void setTitle(String title)`: This method sets the title of the Dialog window.
2. `void setResizable(boolean resizable)`: This method sets whether the Dialog window is resizable or not.
3. `void setModal(boolean modal)`: This method sets whether the Dialog window is modal or not.
4. `void setUndecorated(boolean undecorated)`: This method sets whether the Dialog window should have decorations such as a title bar and borders.
5. `void setAlwaysOnTop(boolean alwaysOnTop)`: This method sets whether the Dialog window should always be on top of other windows.
================================================================

Sample: 26 Dimension
----------------------------------------------------------------
1. `int getWidth()`: This method returns the width value of the Dimension object.
2. `int getHeight()`: This method returns the height value of the Dimension object.
3. `void setSize(int width, int height)`: This method sets the size of the Dimension object to the specified width and height values.
4. `Dimension getSize()`: This method returns a new Dimension object with the same width and height values as the original Dimension object.
5. `String toString()`: This method returns a string representation of the Dimension object in the format "Dimension[width, height]".
================================================================

Sample: 27 DisplayMode
----------------------------------------------------------------
1. `int getWidth()`: Returns the width of the display mode.
2. `int getHeight()`: Returns the height of the display mode.
3. `int getBitDepth()`: Returns the bit depth of the display mode.
4. `int getRefreshRate()`: Returns the refresh rate of the display mode.
5. `boolean equals(Object obj)`: Indicates whether some other object is "equal to" this one.
================================================================

Sample: 28 Event
----------------------------------------------------------------
1. `int id`: This method returns the ID of the event.
2. `long when`: This method returns the time when the event occurred.
3. `int x`: This method returns the x-coordinate of the event.
4. `int y`: This method returns the y-coordinate of the event.
5. `int key`: This method returns the key code of the event.
================================================================

Sample: 29 EventQueue
----------------------------------------------------------------
1. void postEvent(AWTEvent theEvent): This method posts the specified event to the EventQueue.
2. AWTEvent getNextEvent(): This method retrieves the next event from the EventQueue.
3. void push(EventQueue newEventQueue): This method pushes a new EventQueue onto the stack.
4. void pop(): This method pops the current EventQueue from the stack.
5. void dispatchEvent(AWTEvent theEvent): This method dispatches an event.
================================================================

Sample: 30 FileDialog
----------------------------------------------------------------
1. `void setMode(int mode)`: This method sets the mode of the FileDialog, either LOAD or SAVE.
2. `void setDirectory(String dir)`: This method sets the directory of the FileDialog to the specified directory.
3. `void setFile(String file)`: This method sets the file name of the FileDialog to the specified file name.
4. `String getDirectory()`: This method returns the current directory of the FileDialog.
5. `String getFile()`: This method returns the selected file name from the FileDialog.
================================================================

Sample: 31 FlowLayout
----------------------------------------------------------------
1. `void setAlignment(int align)`: This method sets the alignment of components within the flow layout.
2. `void setHgap(int hgap)`: This method sets the horizontal gap between components.
3. `void setVgap(int vgap)`: This method sets the vertical gap between components.
4. `int getAlignment()`: This method returns the alignment of components within the flow layout.
5. `int getHgap()`: This method returns the horizontal gap between components.
================================================================

Sample: 32 FocusTraversalPolicy
----------------------------------------------------------------
1. `Component getComponentAfter(Container focusCycleRoot, Component aComponent)`: This method returns the Component that should receive the focus after aComponent in the traversal cycle.
2. `Component getComponentBefore(Container focusCycleRoot, Component aComponent)`: This method returns the Component that should receive the focus before aComponent in the traversal cycle.
3. `Component getDefaultComponent(Container focusCycleRoot)`: This method returns the default Component to focus on.
4. `Component getLastComponent(Container focusCycleRoot)`: This method returns the last Component in the traversal cycle.
5. `Component getFirstComponent(Container focusCycleRoot)`: This method returns the first Component in the traversal cycle.
================================================================

Sample: 33 Font
----------------------------------------------------------------
1. `String getFamily()`: This method returns the family name of the font.
2. `int getSize()`: This method returns the point size of the font.
3. `int getStyle()`: This method returns the style of the font.
4. `boolean isBold()`: This method returns true if the font is bold, false otherwise.
5. `boolean isItalic()`: This method returns true if the font is italic, false otherwise.
================================================================

Sample: 34 FontMetrics
----------------------------------------------------------------
1. `int charWidth(char ch)`: This method returns the advance width of the specified character in the current Font.
2. `int stringWidth(String str)`: This method returns the total advance width for the specified string in the current Font.
3. `int getHeight()`: This method returns the height of the font in pixels.
4. `int getAscent()`: This method returns the ascent of the font in pixels.
5. `int getDescent()`: This method returns the descent of the font in pixels.
================================================================

Sample: 35 Frame
----------------------------------------------------------------
1. `void setTitle(String title)`: This method sets the title of the Frame.
2. `void setSize(int width, int height)`: This method sets the size of the Frame.
3. `void setVisible(boolean visible)`: This method sets the visibility of the Frame.
4. `void setBackground(Color color)`: This method sets the background color of the Frame.
5. `void setResizable(boolean resizable)`: This method sets whether the Frame is resizable or not.
================================================================

Sample: 36 GradientPaint
----------------------------------------------------------------
1. `Color getColor1()`: This method returns the starting color of the gradient.
2. `Color getColor2()`: This method returns the ending color of the gradient.
3. `Point2D getPoint1()`: This method returns the starting point of the gradient.
4. `Point2D getPoint2()`: This method returns the ending point of the gradient.
5. `boolean isCyclic()`: This method returns true if the gradient cycles repeatedly between the starting and ending colors.
================================================================

Sample: 37 Graphics
----------------------------------------------------------------
1. `void clearRect(int x, int y, int width, int height)`: This method clears the specified rectangle by filling it with the background color of the current drawing surface.
2. `void drawLine(int x1, int y1, int x2, int y2)`: This method draws a line between the points (x1, y1) and (x2, y2) using the current color and stroke.
3. `void fillRect(int x, int y, int width, int height)`: This method fills the specified rectangle with the current color.
4. `void setColor(Color c)`: This method sets the current color to the specified Color object.
5. `void setFont(Font font)`: This method sets the current font to the specified Font object.
================================================================

Sample: 38 Graphics2D
----------------------------------------------------------------
1. `void draw(Shape s)`: This method draws the specified Shape using the current Graphics2D context.
2. `void fill(Shape s)`: This method fills the interior of the specified Shape using the current paint.
3. `void setPaint(Paint paint)`: This method sets the Paint attribute for the Graphics2D context.
4. `void setStroke(Stroke s)`: This method sets the Stroke for the Graphics2D context.
5. `void setRenderingHint(RenderingHints.Key hintKey, Object hintValue)`: This method sets the value of a single preference for the rendering algorithms.
================================================================

Sample: 39 GraphicsConfigTemplate
----------------------------------------------------------------
1. `GraphicsConfiguration getDefaultConfiguration()`: This method returns the default GraphicsConfiguration for the system.
2. `GraphicsConfiguration getBestConfiguration(GraphicsConfigTemplate gct)`: This method returns the best GraphicsConfiguration that passes the criteria defined by the specified GraphicsConfigTemplate.
3. `GraphicsConfiguration[] getConfigurations()`: This method returns an array of all GraphicsConfigurations that match the criteria defined by the GraphicsConfigTemplate.
4. `GraphicsConfiguration getBestConfiguration(VolatileImage vi)`: This method returns the best GraphicsConfiguration for rendering the specified VolatileImage.
5. `BufferCapabilities getBufferCapabilities()`: This method returns the BufferCapabilities for this GraphicsConfiguration.
================================================================

Sample: 40 GraphicsConfiguration
----------------------------------------------------------------
1. `GraphicsDevice[] getDevices()`: This method returns an array of all graphics devices associated with this GraphicsConfiguration.
2. `Rectangle getBounds()`: This method returns the bounds of the graphics configuration.
3. `BufferCapabilities getBufferCapabilities()`: This method returns the buffer capabilities of the graphics configuration.
4. `ImageCapabilities getImageCapabilities()`: This method returns the image capabilities of the graphics configuration.
5. `GraphicsConfiguration getDeviceConfiguration(GraphicsDevice gd)`: This method returns the GraphicsConfiguration associated with the specified GraphicsDevice.
================================================================

Sample: 41 GraphicsDevice
----------------------------------------------------------------
1. `GraphicsConfiguration[] getConfigurations()`: This method returns an array of all of the GraphicsConfiguration objects associated with this GraphicsDevice.
2. `DisplayMode getDisplayMode()`: This method returns the current display mode of this GraphicsDevice.
3. `DisplayMode[] getDisplayModes()`: This method returns an array of all of the display modes available for this GraphicsDevice.
4. `GraphicsConfiguration getDefaultConfiguration()`: This method returns the default GraphicsConfiguration associated with this GraphicsDevice.
5. `void setFullScreenWindow(Window w)`: This method sets the window to full-screen mode on this GraphicsDevice.
================================================================

Sample: 42 GraphicsEnvironment
----------------------------------------------------------------
1. `GraphicsDevice[] getScreenDevices()`: This method returns an array of all the screen devices available.
2. `GraphicsDevice getDefaultScreenDevice()`: This method returns the default screen device.
3. `Font[] getAllFonts()`: This method returns an array of all the available fonts on the system.
4. `GraphicsConfiguration getDefaultConfiguration()`: This method returns the default GraphicsConfiguration of the default screen device.
5. `String[] getAvailableFontFamilyNames()`: This method returns an array of all the available font family names on the system.
================================================================

Sample: 43 GridBagConstraints
----------------------------------------------------------------
1. `int getAnchor()`: This method returns the anchor property value.
2. `double getWeightX()`: This method returns the weightX property value.
3. `double getWeightY()`: This method returns the weightY property value.
4. `void setFill(int fill)`: This method sets the fill property to the specified value.
5. `void setInsets(Insets insets)`: This method sets the insets property to the specified Insets object.
================================================================

Sample: 44 GridBagLayout
----------------------------------------------------------------
1. `void setConstraints(Component comp, GridBagConstraints constraints)`: This method sets the constraints for the specified component in the layout.
2. `void setLayoutDimensions(GridBagLayoutInfo info, int[] minWidth, int[] minHeight, int[] weightX, int[] weightY, Container parent)`: This method sets the layout dimensions for the specified components.
3. `void setLayoutOrigin(int x, int y)`: This method sets the origin of the layout.
4. `void setConstraints(Component comp, GridBagConstraints constraints)`: This method sets the constraints for the specified component in the layout.
5. `void setConstraints(Component comp, GridBagConstraints constraints)`: This method sets the constraints for the specified component in the layout.
================================================================

Sample: 45 GridBagLayoutInfo
----------------------------------------------------------------
1. `int getGridX()`: This method returns the gridx value of the GridBagLayoutInfo.
2. `int getGridY()`: This method returns the gridy value of the GridBagLayoutInfo.
3. `int getGridWidth()`: This method returns the gridwidth value of the GridBagLayoutInfo.
4. `int getGridHeight()`: This method returns the gridheight value of the GridBagLayoutInfo.
5. `double getWeightX()`: This method returns the weightx value of the GridBagLayoutInfo.
================================================================

Sample: 46 GridLayout
----------------------------------------------------------------
1. `void setRows(int rows)`: Sets the number of rows in this layout.
2. `void setColumns(int cols)`: Sets the number of columns in this layout.
3. `void setHgap(int hgap)`: Sets the horizontal gap between components.
4. `void setVgap(int vgap)`: Sets the vertical gap between components.
5. `void layoutContainer(Container parent)`: Lays out the specified container using this layout.
================================================================

Sample: 47 Image
----------------------------------------------------------------
1. `int getWidth(null)`: This method returns the width of the image.
2. `int getHeight(null)`: This method returns the height of the image.
3. `Image getScaledInstance(int width, int height, int hints)`: This method scales the image to the specified width and height.
4. `Graphics getGraphics()`: This method returns a Graphics object that can be used to draw on the image.
5. `void flush()`: This method frees up resources associated with the image.
================================================================

Sample: 48 ImageCapabilities
----------------------------------------------------------------
1. `boolean isTrueVolatile()`: This method returns true if the image is volatile, false otherwise.
2. `boolean isAccelerated()`: This method returns true if the image is accelerated, false otherwise.
3. `boolean isSemiTranslucent()`: This method returns true if the image is semi-translucent, false otherwise.
4. `boolean isTrueVolatile()`: This method returns true if the image is volatile, false otherwise.
5. `boolean isAccelerated()`: This method returns true if the image is accelerated, false otherwise.
================================================================

Sample: 49 Insets
----------------------------------------------------------------
1. `int top()`: This method returns the top inset.
2. `int bottom()`: This method returns the bottom inset.
3. `int left()`: This method returns the left inset.
4. `int right()`: This method returns the right inset.
5. `boolean equals(Object obj)`: This method compares this Insets object to the specified object.
================================================================

Sample: 50 JobAttributes
----------------------------------------------------------------
1. `java.awt.JobAttributes`(): This method creates a new JobAttributes object with default values.
2. `java.awt.JobAttributes(java.awt.JobAttributes obj)`: This method creates a new JobAttributes object that is a copy of the specified JobAttributes object.
3. `java.awt.JobAttributes(java.awt.JobAttributes obj, java.awt.PageAttributes pageAttributes)`: This method creates a new JobAttributes object that is a copy of the specified JobAttributes object, with the specified PageAttributes object.
4. `java.awt.PageAttributes getPageAttributes()`: This method returns the PageAttributes object associated with this JobAttributes object.
5. `void setPageAttributes(java.awt.PageAttributes pageAttributes)`: This method sets the PageAttributes object for this JobAttributes object.
================================================================

Sample: 51 JobAttributes.DefaultSelectionType
----------------------------------------------------------------
1. `java.awt.JobAttributes.DefaultSelectionType getDefaultSelection()`: This method returns the default selection type.
2. `java.awt.JobAttributes.DefaultSelectionType[] values()`: This method returns an array containing the constants of this enum type.
3. `java.awt.JobAttributes.DefaultSelectionType valueOf(String name)`: This method returns the enum constant of the specified name.
4. `int ordinal()`: This method returns the ordinal of this enumeration constant.
5. `String toString()`: This method returns the name of this enumeration constant.
================================================================

Sample: 52 JobAttributes.DestinationType
----------------------------------------------------------------
1. `java.awt.JobAttributes.DestinationType[] values()`: This method returns an array containing the constants of this enum type.
2. `java.awt.JobAttributes.DestinationType valueOf(String name)`: This method returns the enum constant of the specified name.
3. `int ordinal()`: This method returns the ordinal of this enumeration constant.
4. `String toString()`: This method returns the name of this enum constant, as contained in the declaration.
5. `boolean equals(Object other)`: This method compares this enum constant to the specified object.
================================================================

Sample: 53 JobAttributes.DialogType
----------------------------------------------------------------
1. `DialogType[] values()`: This method returns an array containing the constants of this enum type.
2. `DialogType valueOf(String name)`: This method returns the enum constant of the specified name.
3. `String toString()`: This method returns the name of this enum constant, as contained in the declaration.
4. `int ordinal()`: This method returns the ordinal of this enumeration constant.
5. `boolean equals(Object obj)`: This method compares this enum with the specified object for equality.
================================================================

Sample: 54 JobAttributes.MultipleDocumentHandlingType
----------------------------------------------------------------
1. `java.awt.JobAttributes.MultipleDocumentHandlingType[] values()`: This method returns an array containing the constants of this enum type.
2. `java.awt.JobAttributes.MultipleDocumentHandlingType valueOf(String name)`: This method returns the enum constant of this type with the specified name.
3. `int ordinal()`: This method returns the ordinal of this enumeration constant.
4. `String toString()`: This method returns the name of this enum constant, as contained in the declaration.
5. `boolean equals(Object obj)`: This method returns true if the specified object is equal to this enum constant.
================================================================

Sample: 55 JobAttributes.SidesType
----------------------------------------------------------------
1. `java.awt.JobAttributes.SidesType getOpposite()`: This method returns the opposite SidesType value.
2. `boolean isOneSided()`: This method returns true if the SidesType is ONE_SIDED, false otherwise.
3. `boolean isTwoSided()`: This method returns true if the SidesType is TWO_SIDED, false otherwise.
4. `boolean isTumble()`: This method returns true if the SidesType is TUMBLE, false otherwise.
5. `java.awt.JobAttributes.SidesType valueOf(java.lang.String name)`: This method returns the enum constant with the specified name.
================================================================

Sample: 56 KeyboardFocusManager
----------------------------------------------------------------
1. `void clearGlobalFocusOwner()`: This method clears the global focus owner.
2. `Component getCurrentFocusCycleRoot()`: This method returns the current focus cycle root.
3. `void setGlobalFocusOwner(Component comp)`: This method sets the global focus owner to the specified component.
4. `void clearFocusOwner()`: This method clears the focus owner.
5. `void clearGlobalPermanentFocusOwner()`: This method clears the global permanent focus owner.
================================================================

Sample: 57 Label
----------------------------------------------------------------
1. `String getText()`: This method returns the text of the Label.
2. `void setText(String text)`: This method sets the text of the Label to the specified text.
3. `void setAlignment(int alignment)`: This method sets the alignment of the Label text.
4. `void setBackground(Color color)`: This method sets the background color of the Label.
5. `void setFont(Font font)`: This method sets the font of the Label text.
================================================================

Sample: 58 LinearGradientPaint
----------------------------------------------------------------
1. `Color getColor1()`: This method returns the starting color of the gradient.
2. `Color getColor2()`: This method returns the ending color of the gradient.
3. `Point2D getStartPoint()`: This method returns the starting point of the gradient.
4. `Point2D getEndPoint()`: This method returns the ending point of the gradient.
5. `CycleMethod getCycleMethod()`: This method returns the cycle method of the gradient.
================================================================

Sample: 59 List
----------------------------------------------------------------
1. `void add(String item)`: This method adds the specified item to the end of the list.
2. `void add(String item, int index)`: This method inserts the specified item at the specified index in the list.
3. `void remove(int index)`: This method removes the item at the specified index from the list.
4. `String getItem(int index)`: This method returns the item at the specified index in the list.
5. `int getItemCount()`: This method returns the number of items in the list.
================================================================

Sample: 60 MediaTracker
----------------------------------------------------------------
1. `void addImage(Image image, int id)`: This method adds an image to the list of images being tracked.
2. `void removeImage(Image image)`: This method removes the specified image from the list of images being tracked.
3. `int checkAll()`: This method checks the status of all tracked images and returns the bitwise OR of all the individual image load statuses.
4. `boolean checkID(int id)`: This method checks the status of the specified image ID and returns true if the image has finished loading.
5. `void waitForAll() throws InterruptedException`: This method waits for all tracked images to finish loading before returning.
================================================================

Sample: 61 Menu
----------------------------------------------------------------
1. `void add(MenuComponent m)`: This method adds the specified menu component to this menu.
2. `void insert(MenuComponent m, int index)`: This method inserts the specified menu component at the specified position in this menu.
3. `void remove(int index)`: This method removes the menu item at the specified index from this menu.
4. `void removeAll()`: This method removes all menu items from this menu.
5. `MenuComponent getItem(int index)`: This method returns the menu item at the specified index in this menu.
================================================================

Sample: 62 MenuBar
----------------------------------------------------------------
1. `void add(Menu m)`: This method adds a menu to the menu bar.
2. `void remove(int index)`: This method removes the menu at the specified index from the menu bar.
3. `Menu getMenu(int index)`: This method returns the menu at the specified index in the menu bar.
4. `int getMenuCount()`: This method returns the number of menus in the menu bar.
5. `void setHelpMenu(Menu m)`: This method sets the specified menu as the help menu for the menu bar.
================================================================

Sample: 63 MenuComponent
----------------------------------------------------------------
1. void dispatchEvent(AWTEvent e)
2. AccessibleContext getAccessibleContext()
3. Font getFont()
4. void postEvent(Event evt)
5. void removeNotify()
================================================================

Sample: 64 MenuItem
----------------------------------------------------------------
1. `void setLabel(String label)`: This method sets the label for the menu item.
2. `String getLabel()`: This method returns the label of the menu item.
3. `void setEnabled(boolean enabled)`: This method sets whether the menu item is enabled or disabled.
4. `boolean isEnabled()`: This method returns true if the menu item is enabled, false otherwise.
5. `void addActionListener(ActionListener l)`: This method adds an ActionListener to the menu item.
================================================================

Sample: 65 MenuShortcut
----------------------------------------------------------------
1. `char getKey()`: This method returns the character representing the key of the MenuShortcut.
2. `int getModifiers()`: This method returns the modifier key for the MenuShortcut.
3. `MenuShortcut(MenuShortcut shortcut)`: This method creates a new MenuShortcut with the same key and modifiers as the specified MenuShortcut.
4. `MenuItem getMenuShortcutMenuItem()`: This method returns the MenuItem associated with this MenuShortcut.
5. `String toString()`: This method returns a string representation of the MenuShortcut.
================================================================

Sample: 66 MouseInfo
----------------------------------------------------------------
1. `Point getPointerInfo()`: This method returns the current location of the mouse pointer.
2. `int getNumberOfButtons()`: This method returns the number of buttons on the mouse.
3. `boolean isButtonPressed(int button)`: This method returns true if the specified mouse button is currently pressed.
4. `int getButtonCount()`: This method returns the number of mouse buttons available on the system.
5. `boolean isMouseButtonDown(int button)`: This method returns true if the specified mouse button is currently down.
================================================================

Sample: 67 MultipleGradientPaint
----------------------------------------------------------------
1. `Color[] getColors()`: This method returns an array of colors used by this MultipleGradientPaint.
2. `float[] getFractions()`: This method returns an array of floats representing the distribution of colors along the gradient.
3. `CycleMethod getCycleMethod()`: This method returns the CycleMethod used by this MultipleGradientPaint.
4. `ColorSpaceType getColorSpace()`: This method returns the ColorSpaceType used by this MultipleGradientPaint.
5. `Point2D getStartPoint()`: This method returns the starting point for the gradient.
================================================================

Sample: 68 PageAttributes
----------------------------------------------------------------
1. `void setMedia(java.awt.PrinterResolution resolution)`: Sets the media type for the page.
2. `void setOrientation(int orientation)`: Sets the orientation of the page.
3. `void setOrigin(int x, int y)`: Sets the origin of the page.
4. `void setPrintQuality(int quality)`: Sets the print quality for the page.
5. `void setPrinterResolution(java.awt.PrinterResolution resolution)`: Sets the printer resolution for the page.
================================================================

Sample: 69 PageAttributes.ColorType
----------------------------------------------------------------
1. `int getNumColorComponents()`: This method returns the number of components in this ColorType.
2. `int getValue()`: This method returns the value of this ColorType.
3. `static ColorType valueOf(String name)`: This method returns the enum constant of the specified name.
4. `static ColorType[] values()`: This method returns an array containing the constants of this enum type.
5. `String toString()`: This method returns the name of this ColorType.
================================================================

Sample: 70 PageAttributes.MediaType
----------------------------------------------------------------
1. `boolean equals(Object obj)`: This method compares this MediaType with the specified object for equality.
2. `int hashCode()`: This method returns a hash code value for the object.
3. `String toString()`: This method returns a string representation of the object.
4. `int getValue()`: This method returns the value of the MediaType.
5. `static MediaType[] values()`: This method returns an array containing the constants of this enum type.
================================================================

Sample: 71 PageAttributes.OrientationRequestedType
----------------------------------------------------------------
1. `java.awt.PageAttributes.OrientationRequestedType getNext()`
2. `java.awt.PageAttributes.OrientationRequestedType getPrevious()`
3. `boolean equals(Object obj)`
4. `int hashCode()`
5. `String toString()`
================================================================

Sample: 72 PageAttributes.OriginType
----------------------------------------------------------------
1. `int getValue()`: This method returns the integer value of the OriginType.
2. `OriginType valueOf(String name)`: This method returns the enum constant with the specified name.
3. `OriginType[] values()`: This method returns an array containing the constants of this enum type.
4. `String toString()`: This method returns the name of the enum constant.
5. `boolean equals(Object obj)`: This method compares this enum constant to the specified object.
================================================================

Sample: 73 PageAttributes.PrintQualityType
----------------------------------------------------------------
1. `int getValue()`: This method returns the integer value of the PrintQualityType.
2. `PrintQualityType[] values()`: This method returns an array containing the constants of this enum type.
3. `PrintQualityType valueOf(String name)`: This method returns the enum constant of the specified name.
4. `boolean equals(Object obj)`: This method compares this enum with the specified object for equality.
5. `String toString()`: This method returns the name of this enum constant, as contained in the declaration.
================================================================

Sample: 74 Panel
----------------------------------------------------------------
1. `void add(Component comp)`: This method adds the specified component to this panel.
2. `void remove(Component comp)`: This method removes the specified component from this panel.
3. `Dimension getPreferredSize()`: This method returns the preferred size of this panel.
4. `void paint(Graphics g)`: This method paints this panel.
5. `void setBackground(Color color)`: This method sets the background color of this panel.
================================================================

Sample: 75 Point
----------------------------------------------------------------
1. `int getX()`: Returns the X coordinate of this Point.
2. `int getY()`: Returns the Y coordinate of this Point.
3. `void setLocation(int x, int y)`: Sets the location of this Point to the specified X and Y coordinates.
4. `double distance(double x, double y)`: Returns the distance between this Point and a specified point with coordinates x and y.
5. `Point getLocation()`: Returns a new Point object with the same X and Y coordinates as this Point.
================================================================

Sample: 76 PointerInfo
----------------------------------------------------------------
1. `Point getLocation()`: This method returns the current coordinates of the pointer.
2. `GraphicsDevice getDevice()`: This method returns the GraphicsDevice of the pointer.
3. `Component getComponent()`: This method returns the Component on which the pointer is located.
4. `boolean isConfined()`: This method returns true if the pointer is confined to a particular area.
5. `boolean isResting()`: This method returns true if the pointer is not moving.
================================================================

Sample: 77 Polygon
----------------------------------------------------------------
1. `void addPoint(int x, int y)`: This method adds a new point to the polygon with the specified x and y coordinates.
2. `Rectangle getBounds()`: This method returns the bounding box of the polygon.
3. `boolean contains(int x, int y)`: This method checks if the specified point is contained within the polygon.
4. `void translate(int deltaX, int deltaY)`: This method translates the polygon by the specified amount in the x and y directions.
5. `Polygon getBounds2D()`: This method returns a copy of the polygon.
================================================================

Sample: 78 PopupMenu
----------------------------------------------------------------
1. `void add(MenuItem item)`: This method adds the specified MenuItem to the end of this PopupMenu.
2. `void insert(MenuItem item, int index)`: This method inserts the specified MenuItem at the specified position in this PopupMenu.
3. `void remove(int index)`: This method removes the MenuItem at the specified index from this PopupMenu.
4. `void removeAll()`: This method removes all MenuItems from this PopupMenu.
5. `MenuItem getItem(int index)`: This method returns the MenuItem at the specified index in this PopupMenu.
================================================================

Sample: 79 PrintJob
----------------------------------------------------------------
1. `Graphics getGraphics()`: This method returns a Graphics object that can be used to draw on the printer.
2. `int getPageDimension()`: This method returns the size of the page in pixels.
3. `int getPageResolution()`: This method returns the resolution of the printer in dots per inch.
4. `void end()`: This method ends the print job and releases any system resources associated with it.
5. `void finalize()`: This method cleans up any resources associated with the print job before it is garbage collected.
================================================================

Sample: 80 RadialGradientPaint
----------------------------------------------------------------
1. `Color getCenterColor()`: This method returns the center color of the radial gradient.
2. `Point2D getFocus()`: This method returns the focus point of the radial gradient.
3. `float[] getFractions()`: This method returns the fractions array that specifies how colors are distributed along the gradient.
4. `Color[] getColors()`: This method returns an array of colors that make up the gradient.
5. `Point2D getCenterPoint()`: This method returns the center point of the radial gradient.
================================================================

Sample: 81 Rectangle
----------------------------------------------------------------
1. `double getHeight()`: This method returns the height of the Rectangle.
2. `double getWidth()`: This method returns the width of the Rectangle.
3. `void setRect(double x, double y, double width, double height)`: This method sets the location and size of the Rectangle to the specified double values.
4. `boolean intersects(Rectangle r)`: This method checks if the specified Rectangle intersects with this Rectangle.
5. `Rectangle createIntersection(Rectangle r)`: This method creates a new Rectangle that represents the intersection of this Rectangle with the specified Rectangle.
================================================================

Sample: 82 RenderingHints
----------------------------------------------------------------
1. `Object put(Object key, Object value)`: This method sets a rendering hint for the specified key to the specified value.
2. `Object get(Object key)`: This method returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.
3. `void addRenderingHints(Map<?, ?> hints)`: This method adds all of the keys and corresponding values from the specified Map to this RenderingHints object.
4. `void clear()`: This method clears all of the keys and values from this RenderingHints object.
5. `boolean containsKey(Object key)`: This method returns true if this RenderingHints object contains a mapping for the specified key.
================================================================

Sample: 83 RenderingHints.Key
----------------------------------------------------------------
1. `Object clone()`: This method creates and returns a copy of this RenderingHints.Key.
2. `boolean equals(Object o)`: This method compares this RenderingHints.Key with the specified object for equality.
3. `int hashCode()`: This method returns a hash code value for this RenderingHints.Key.
4. `String toString()`: This method returns a string representation of this RenderingHints.Key.
5. `String getKey()`: This method returns the name of the key.
================================================================

Sample: 84 Robot
----------------------------------------------------------------
1. `void keyPress(int keycode)`: This method presses a given key on the keyboard.
2. `void keyRelease(int keycode)`: This method releases a given key on the keyboard.
3. `void mouseMove(int x, int y)`: This method moves the mouse pointer to the specified screen coordinates.
4. `void mousePress(int buttons)`: This method presses one or more mouse buttons.
5. `void mouseRelease(int buttons)`: This method releases one or more mouse buttons.
================================================================

Sample: 85 Scrollbar
----------------------------------------------------------------
1. `void setValues(int value, int visible, int minimum, int maximum)`: This method sets the current value, visible amount, minimum and maximum values for the Scrollbar.
2. `int getValue()`: This method returns the current value of the Scrollbar.
3. `int getVisible()`: This method returns the visible amount of the Scrollbar.
4. `int getMinimum()`: This method returns the minimum value of the Scrollbar.
5. `int getMaximum()`: This method returns the maximum value of the Scrollbar.
================================================================

Sample: 86 ScrollPane
----------------------------------------------------------------
1. `void setScrollPosition(int x, int y)`: This method sets the current scroll position of the ScrollPane to the specified x and y coordinates.
2. `Dimension getViewportSize()`: This method returns the size of the visible area of the ScrollPane.
3. `void setScrollbars(int hsbPolicy, int vsbPolicy)`: This method sets the scrollbar policies for the ScrollPane.
4. `void setRowHeader(Component rhs)`: This method sets the component to use as the row header for the ScrollPane.
5. `void setColumnHeader(Component ch): This method sets the component to use as the column header for the ScrollPane.
================================================================

Sample: 87 ScrollPaneAdjustable
----------------------------------------------------------------
1. int getUnitIncrement(): This method returns the unit increment value for the scrollbar.
2. int getBlockIncrement(): This method returns the block increment value for the scrollbar.
3. void setUnitIncrement(int unitIncrement): This method sets the unit increment value for the scrollbar.
4. void setBlockIncrement(int blockIncrement): This method sets the block increment value for the scrollbar.
5. void setValue(int newValue): This method sets the current value of the scrollbar.
================================================================

Sample: 88 SplashScreen
----------------------------------------------------------------
1. `void close()`: This method closes the splash screen.
2. `Dimension getSize()`: This method returns the size of the splash screen image.
3. `Graphics2D createGraphics()`: This method creates a graphics context for the splash screen.
4. `void update()`: This method updates the splash screen with any changes that have been made.
5. `boolean isVisible()`: This method returns true if the splash screen is visible, false otherwise.
================================================================

Sample: 89 SystemColor
----------------------------------------------------------------
1. `Color getControl()`: This method returns the color that represents the control color.
2. `Color getControlDkShadow()`: This method returns the color that represents the dark shadow color of controls.
3. `Color getControlHighlight()`: This method returns the color that represents the highlight color of controls.
4. `Color getControlLtHighlight()`: This method returns the color that represents the light highlight color of controls.
5. `Color getControlShadow()`: This method returns the color that represents the shadow color of controls.
================================================================

Sample: 90 SystemTray
----------------------------------------------------------------
1. `boolean isSupported()`: This method returns a boolean value indicating whether the system tray is supported on the current platform.
2. `TrayIcon[] getTrayIcons()`: This method returns an array of TrayIcon objects currently displayed in the system tray.
3. `void add(TrayIcon trayIcon)`: This method adds a TrayIcon to the system tray.
4. `void remove(TrayIcon trayIcon)`: This method removes the specified TrayIcon from the system tray.
5. `void setTrayIcons(TrayIcon[] icons)`: This method sets the array of TrayIcon objects to be displayed in the system tray.
================================================================

Sample: 91 TextArea
----------------------------------------------------------------
1. `String getText()`: This method returns the text contained in the TextArea.
2. `void setText(String text)`: This method sets the text of the TextArea to the specified text.
3. `void append(String str)`: This method appends the specified text to the end of the TextArea.
4. `void insert(String str, int pos)`: This method inserts the specified text at the specified position in the TextArea.
5. `void replaceRange(String str, int start, int end)`: This method replaces the text within the specified range with the specified text in the TextArea.
================================================================

Sample: 92 TextComponent
----------------------------------------------------------------
1. `void setEditable(boolean editable)`: This method sets whether or not this TextComponent is editable.
2. `String getText()`: This method returns the text contained in this TextComponent.
3. `void setText(String text)`: This method sets the text of this TextComponent to the specified text.
4. `void setSelectionStart(int selectionStart)`: This method sets the selection start for the text in this TextComponent.
5. `void setSelectionEnd(int selectionEnd)`: This method sets the selection end for the text in this TextComponent.
================================================================

Sample: 93 TextField
----------------------------------------------------------------
1. `String getText()`: This method returns the text contained in the TextField.
2. `void setText(String text)`: This method sets the text of the TextField to the specified text.
3. `int getColumns()`: This method returns the number of columns in the TextField.
4. `void setColumns(int columns)`: This method sets the number of columns in the TextField.
5. `void setEditable(boolean editable)`: This method sets whether the TextField is editable or not.
================================================================

Sample: 94 TexturePaint
----------------------------------------------------------------
1. `BufferedImage getImage()`: This method returns the BufferedImage used as the texture for this TexturePaint.
2. `Rectangle getAnchorRect()`: This method returns the Rectangle that defines the anchor rectangle for this TexturePaint.
3. `PaintContext createContext(ColorModel cm, Rectangle deviceBounds, Rectangle2D userBounds, AffineTransform xform, RenderingHints hints)`: This method creates a context for the TexturePaint to use for painting.
4. `int getTransparency()`: This method returns the transparency mode of the TexturePaint.
5. `Shape getAnchorShape()`: This method returns the Shape that defines the anchor shape for this TexturePaint.
================================================================

Sample: 95 Toolkit
----------------------------------------------------------------
1. `Dimension getScreenSize()`: This method returns the size of the screen in pixels.
2. `Image createImage(ImageProducer producer)`: This method creates an image from the specified image producer.
3. `ColorModel getColorModel()`: This method returns the color model used by this toolkit.
4. `FontMetrics getFontMetrics(Font font)`: This method returns the font metrics for the specified font.
5. `EventQueue getSystemEventQueue()`: This method returns the system event queue for this toolkit.
================================================================

Sample: 96 TrayIcon
----------------------------------------------------------------
1. `void displayMessage(String caption, String text, TrayIcon.MessageType messageType)`: This method displays a message in the system tray.
2. `void setImage(Image image)`: This method sets the image for the tray icon.
3. `void setPopupMenu(PopupMenu popup)`: This method sets the popup menu for the tray icon.
4. `void setToolTip(String tooltip)`: This method sets the tooltip text for the tray icon.
5. `void addActionListener(ActionListener listener)`: This method adds an ActionListener to the tray icon.
================================================================

Sample: 97 Window
----------------------------------------------------------------
1. `void setLocation(int x, int y)`: Sets the location of the window to the specified coordinates.
2. `void setSize(int width, int height)`: Sets the size of the window to the specified dimensions.
3. `void setTitle(String title)`: Sets the title of the window to the specified string.
4. `void setVisible(boolean visible)`: Sets the visibility of the window based on the specified boolean value.
5. `void dispose()`: Releases all of the native screen resources used by this window, its subcomponents, and all of its owned windows.
================================================================

