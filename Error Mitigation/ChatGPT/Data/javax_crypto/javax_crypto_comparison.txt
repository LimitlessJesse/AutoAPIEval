Sample: 0 Cipher
----------------------------------------------------------------
1. `void init(int opmode, Key key)`: This method initializes the cipher with the specified operation mode and key.
2. `byte[] doFinal()`: This method finishes the encryption or decryption operation.
3. `int update(byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset)`: This method processes input data and returns the number of bytes written to the output buffer.
4. `void updateAAD(byte[] src)`: This method updates the additional authenticated data (AAD) used in authenticated encryption modes.
5. `AlgorithmParameters getParameters()`: This method returns the algorithm parameters used by the cipher.
================================================================

Sample: 1 CipherInputStream
----------------------------------------------------------------
1. `int read()`: This method reads the next byte of data from the input stream.
2. `int read(byte[] b)`: This method reads up to b.length bytes of data from the input stream into an array of bytes.
3. `int read(byte[] b, int off, int len)`: This method reads up to len bytes of data from the input stream into an array of bytes, starting at the specified offset off.
4. `long skip(long n)`: This method skips over and discards n bytes of data from the input stream.
5. `void close()`: This method closes the input stream and releases any system resources associated with it.
================================================================

Sample: 2 CipherOutputStream
----------------------------------------------------------------
1. `void write(int b)`: This method writes the specified byte to the output stream.
2. `void write(byte[] b)`: This method writes b.length bytes from the specified byte array to the output stream.
3. `void write(byte[] b, int off, int len)`: This method writes len bytes from the specified byte array starting at offset off to the output stream.
4. `void flush()`: This method flushes this output stream and forces any buffered output bytes to be written out.
5. `void close()`: This method closes this output stream and releases any system resources associated with it.
================================================================

Sample: 3 CipherSpi
----------------------------------------------------------------
1. `void engineInit(int opmode, Key key)`: Initializes this cipher with a key and a mode of operation.
2. `byte[] engineUpdate(byte[] input, int inputOffset, int inputLen)`: Continues a multiple-part encryption or decryption operation.
3. `int engineDoFinal(byte[] output, int outputOffset)`: Finishes a multiple-part encryption or decryption operation.
4. `int engineGetBlockSize()`: Returns the block size of this cipher.
5. `int engineGetOutputSize(int inputLen)`: Returns the maximum number of bytes needed to accommodate a given input length.
================================================================

Sample: 4 EncryptedPrivateKeyInfo
----------------------------------------------------------------
1. `byte[] getEncryptedData()`: This method returns the encrypted data contained in this EncryptedPrivateKeyInfo object.
2. `String getAlgName()`: This method returns the algorithm name used to encrypt the private key.
3. `AlgorithmParameters getAlgParameters()`: This method returns the algorithm parameters used for encryption.
4. `byte[] getEncoded()`: This method returns the ASN.1 encoding of this EncryptedPrivateKeyInfo object.
5. `PrivateKey decryptPrivateKey(Key key)`: This method decrypts the encrypted private key using the specified key and returns the decrypted PrivateKey object.
================================================================

Sample: 5 ExemptionMechanism
----------------------------------------------------------------
1. `String getName()`: This method returns the name of the exemption mechanism.
2. `byte[] getOutput()`: This method returns the output of the exemption mechanism.
3. `int getOutputSize(int inputLen)`: This method returns the length of the output buffer required to hold the output of the exemption mechanism for a given input length.
4. `void init(Key key)`: This method initializes the exemption mechanism with the specified key.
5. `void init(Key key, AlgorithmParameterSpec params)`: This method initializes the exemption mechanism with the specified key and algorithm parameters.
================================================================

Sample: 6 ExemptionMechanismSpi
----------------------------------------------------------------
1. `void engineInit(int opmode, Key key, AlgorithmParameters params)`: Initializes this ExemptionMechanismSpi object with the specified key and algorithm parameters.
2. `byte[] engineGenExemptionBlob()`: Generates the exemption mechanism output.
3. `int engineGenExemptionBlob(byte[] output, int outputOffset)`: Generates the exemption mechanism output and stores it in the provided output array starting at the specified offset.
4. `void engineInit(Key key, AlgorithmParameters params)`: Initializes this ExemptionMechanismSpi object with the specified key and algorithm parameters.
5. `void engineInit(Key key, AlgorithmParameterSpec params)`: Initializes this ExemptionMechanismSpi object with the specified key and algorithm parameters.
================================================================

Sample: 7 KeyAgreement
----------------------------------------------------------------
1. `void init(Key key)`: This method initializes this key agreement with the given key.
2. `void doPhase(Key key, boolean lastPhase)`: This method performs one round of the key agreement algorithm.
3. `byte[] generateSecret()`: This method generates the shared secret.
4. `String getAlgorithm()`: This method returns the algorithm name of this KeyAgreement object.
5. `Key doPhase(Key key, boolean lastPhase)`: This method performs one round of the key agreement algorithm and returns the shared secret key.
================================================================

Sample: 8 KeyAgreementSpi
----------------------------------------------------------------
1. `void engineInit(Key key, SecureRandom random)`: Initializes this key agreement with the given key and source of randomness.
2. `void engineInit(Key key, AlgorithmParameterSpec params, SecureRandom random)`: Initializes this key agreement with the given key, algorithm parameters, and source of randomness.
3. `byte[] engineGenerateSecret()`: Generates the shared secret.
4. `int engineGenerateSecret(byte[] sharedSecret, int offset)`: Generates the shared secret and stores it in the provided byte array starting at the specified offset.
5. `SecretKey engineGenerateSecret(String algorithm)`: Generates the shared secret as a SecretKey object using the specified algorithm.
================================================================

Sample: 9 KeyGenerator
----------------------------------------------------------------
1. `KeyGenerator getInstance(String algorithm)`: This method returns a KeyGenerator object that generates secret keys for the specified algorithm.
2. `void init(int keysize)`: This method initializes the key generator for a certain key size.
3. `SecretKey generateKey()`: This method generates a secret key.
4. `void init(AlgorithmParameterSpec params)`: This method initializes the key generator with the specified algorithm parameters.
5. `void init(AlgorithmParameterSpec params, SecureRandom random)`: This method initializes the key generator with the specified algorithm parameters and a source of randomness.
================================================================

Sample: 10 KeyGeneratorSpi
----------------------------------------------------------------
1. `Key generateKey()`: This method generates a secret key.
2. `void init(int keysize, SecureRandom random)`: This method initializes the key generator with the specified key size and random number generator.
3. `void init(AlgorithmParameterSpec params, SecureRandom random)`: This method initializes the key generator with the specified algorithm parameters and random number generator.
4. `void init(SecureRandom random)`: This method initializes the key generator with the specified random number generator.
5. `KeyGeneratorSpi clone()`: This method creates a copy of this KeyGeneratorSpi object.
================================================================

Sample: 11 Mac
----------------------------------------------------------------
1. `void init(Key key)`: Initializes the MAC with the given key.
2. `void update(byte[] input)`: Updates the MAC with the given input data.
3. `void reset()`: Resets the MAC for further use.
4. `byte[] doFinal()`: Computes the MAC and returns the result.
5. `int getMacLength()`: Returns the length of the MAC in bytes.
================================================================

Sample: 12 MacSpi
----------------------------------------------------------------
1. `void engineInit(Key key, AlgorithmParameterSpec params)`: Initializes this MacSpi with the specified key and algorithm parameters.
2. `void engineUpdate(byte input)`: Updates the MAC computation with the specified byte.
3. `void engineReset()`: Resets the MAC computation.
4. `byte[] engineDoFinal()`: Completes the MAC computation and returns the result.
5. `int engineGetMacLength()`: Returns the length of the MAC in bytes.
================================================================

Sample: 13 NullCipher
----------------------------------------------------------------
1. `void init(int opmode, Key key)`: This method initializes the cipher with a key and the encryption/decryption operation mode.
2. `byte[] doFinal()`: This method completes the encryption or decryption operation.
3. `int update(byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset)`: This method processes input data and returns the number of bytes written to the output buffer.
4. `int getBlockSize()`: This method returns the block size of the cipher.
5. `String getAlgorithm()`: This method returns the algorithm name of the cipher.
================================================================

Sample: 14 SealedObject
----------------------------------------------------------------
1. `SealedObject(byte[] sealedData, String algorithm)`: This method creates a SealedObject from the specified sealed data and algorithm.
2. `Object getObject(Key key)`: This method returns the original object (unsealed) using the specified key.
3. `String getAlgorithm()`: This method returns the algorithm used to seal the object.
4. `byte[] getEncoded()`: This method returns the encoded representation of the sealed object.
5. `boolean equals(Object obj)`: This method compares this SealedObject to the specified object.
================================================================

Sample: 15 SecretKeyFactory
----------------------------------------------------------------
1. `SecretKey generateSecret(SecretKeySpec keySpec)`: This method generates a SecretKey object from the provided SecretKeySpec.
2. `String getAlgorithm()`: This method returns the algorithm name of the SecretKeyFactory.
3. `SecretKey translateKey(SecretKey key)`: This method translates a key object into a SecretKey object.
4. `int getKeyLength(SecretKey key)`: This method returns the length of the provided SecretKey in bits.
5. `SecretKey generateSecret(KeySpec keySpec)`: This method generates a SecretKey object from the provided KeySpec.
================================================================

Sample: 16 SecretKeyFactorySpi
----------------------------------------------------------------
1. `SecretKey engineGenerateSecret(KeySpec keySpec)`: This method generates a SecretKey object from the provided KeySpec.
2. `KeySpec engineGetKeySpec(SecretKey key, Class keySpec)`: This method returns the KeySpec for the specified SecretKey object.
3. `SecretKey engineTranslateKey(SecretKey key)`: This method translates the specified SecretKey object into a new SecretKey object of this type.
4. `void engineInit(Key key, AlgorithmParameterSpec params)`: This method initializes the SecretKeyFactorySpi implementation with the specified Key and AlgorithmParameterSpec.
5. `SecretKey engineGenerateSecret(String algorithm)`: This method generates a SecretKey object for the specified algorithm.
================================================================

