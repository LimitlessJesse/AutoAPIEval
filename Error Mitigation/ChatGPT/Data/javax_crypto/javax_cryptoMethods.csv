ClassName,Method,Return Type,Description
Cipher,doFinal(),byte[],"Finishes a multiple-part encryption or decryption operation, depending on how this cipher was initialized."
Cipher,doFinal(byte[] input),byte[],"Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation."
Cipher,"doFinal(byte[] output, int outputOffset)",int,"Finishes a multiple-part encryption or decryption operation, depending on how this cipher was initialized."
Cipher,"doFinal(byte[] input, int inputOffset, int inputLen)",byte[],"Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation."
Cipher,"doFinal(byte[] input, int inputOffset, int inputLen, byte[] output)",int,"Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation."
Cipher,"doFinal(byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset)",int,"Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation."
Cipher,"doFinal(ByteBuffer input, ByteBuffer output)",int,"Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation."
Cipher,getAlgorithm(),String,Returns the algorithm name of this Cipher object.
Cipher,getBlockSize(),int,Returns the block size (in bytes).
Cipher,getExemptionMechanism(),ExemptionMechanism,Returns the exemption mechanism object used with this cipher.
Cipher,getInstance(String transformation),static Cipher,Returns a Cipher object that implements the specified transformation.
Cipher,"getInstance(String transformation, Provider provider)",static Cipher,Returns a Cipher object that implements the specified transformation.
Cipher,"getInstance(String transformation, String provider)",static Cipher,Returns a Cipher object that implements the specified transformation.
Cipher,getIV(),byte[],Returns the initialization vector (IV) in a new buffer.
Cipher,getMaxAllowedKeyLength(String transformation),static int,Returns the maximum key length for the specified transformation according to the installed JCE jurisdiction policy files.
Cipher,getMaxAllowedParameterSpec(String transformation),static AlgorithmParameterSpec,Returns an AlgorithmParameterSpec object which contains the maximum cipher parameter value according to the jurisdiction policy file.
Cipher,getOutputSize(int inputLen),int,"Returns the length in bytes that an output buffer would need to be in order to hold the result of the next update or doFinal operation, given the input length inputLen (in bytes)."
Cipher,getParameters(),AlgorithmParameters,Returns the parameters used with this cipher.
Cipher,getProvider(),Provider,Returns the provider of this Cipher object.
Cipher,"init(int opmode, Certificate certificate)",void,Initializes this cipher with the public key from the given certificate.
Cipher,"init(int opmode, Certificate certificate, SecureRandom random)",void,Initializes this cipher with the public key from the given certificate and a source of randomness.
Cipher,"init(int opmode, Key key)",void,Initializes this cipher with a key.
Cipher,"init(int opmode, Key key, AlgorithmParameters params)",void,Initializes this cipher with a key and a set of algorithm parameters.
Cipher,"init(int opmode, Key key, AlgorithmParameterSpec params)",void,Initializes this cipher with a key and a set of algorithm parameters.
Cipher,"init(int opmode, Key key, AlgorithmParameterSpec params, SecureRandom random)",void,"Initializes this cipher with a key, a set of algorithm parameters, and a source of randomness."
Cipher,"init(int opmode, Key key, AlgorithmParameters params, SecureRandom random)",void,"Initializes this cipher with a key, a set of algorithm parameters, and a source of randomness."
Cipher,"init(int opmode, Key key, SecureRandom random)",void,Initializes this cipher with a key and a source of randomness.
Cipher,"unwrap(byte[] wrappedKey, String wrappedKeyAlgorithm, int wrappedKeyType)",Key,Unwrap a previously wrapped key.
Cipher,update(byte[] input),byte[],"Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part."
Cipher,"update(byte[] input, int inputOffset, int inputLen)",byte[],"Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part."
Cipher,"update(byte[] input, int inputOffset, int inputLen, byte[] output)",int,"Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part."
Cipher,"update(byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset)",int,"Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part."
Cipher,"update(ByteBuffer input, ByteBuffer output)",int,"Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part."
Cipher,updateAAD(byte[] src),void,Continues a multi-part update of the Additional Authentication Data (AAD).
Cipher,"updateAAD(byte[] src, int offset, int len)",void,"Continues a multi-part update of the Additional Authentication Data (AAD), using a subset of the provided buffer."
Cipher,updateAAD(ByteBuffer src),void,Continues a multi-part update of the Additional Authentication Data (AAD).
Cipher,wrap(Key key),byte[],Wrap a key.
CipherInputStream,available(),int,Returns the number of bytes that can be read from this input stream without blocking.
CipherInputStream,close(),void,Closes this input stream and releases any system resources associated with the stream.
CipherInputStream,markSupported(),boolean,"Tests if this input stream supports the mark and reset methods, which it does not."
CipherInputStream,read(),int,Reads the next byte of data from this input stream.
CipherInputStream,read(byte[] b),int,Reads up to b.length bytes of data from this input stream into an array of bytes.
CipherInputStream,"read(byte[] b, int off, int len)",int,Reads up to len bytes of data from this input stream into an array of bytes.
CipherInputStream,skip(long n),long,Skips n bytes of input from the bytes that can be read from this input stream without blocking.
CipherOutputStream,close(),void,Closes this output stream and releases any system resources associated with this stream.
CipherOutputStream,flush(),void,Flushes this output stream by forcing any buffered output bytes that have already been processed by the encapsulated cipher object to be written out.
CipherOutputStream,write(byte[] b),void,Writes b.length bytes from the specified byte array to this output stream.
CipherOutputStream,"write(byte[] b, int off, int len)",void,Writes len bytes from the specified byte array starting at offset off to this output stream.
CipherOutputStream,write(int b),void,Writes the specified byte to this output stream.
CipherSpi,"engineDoFinal(byte[] input, int inputOffset, int inputLen)",protected abstract byte[],"Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation."
CipherSpi,"engineDoFinal(byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset)",protected abstract int,"Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation."
CipherSpi,"engineDoFinal(ByteBuffer input, ByteBuffer output)",protected int,"Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation."
CipherSpi,engineGetBlockSize(),protected abstract int,Returns the block size (in bytes).
CipherSpi,engineGetIV(),protected abstract byte[],Returns the initialization vector (IV) in a new buffer.
CipherSpi,engineGetKeySize(Key key),protected int,Returns the key size of the given key object in bits.
CipherSpi,engineGetOutputSize(int inputLen),protected abstract int,"Returns the length in bytes that an output buffer would need to be in order to hold the result of the next update or doFinal operation, given the input length inputLen (in bytes)."
CipherSpi,engineGetParameters(),protected abstract AlgorithmParameters,Returns the parameters used with this cipher.
CipherSpi,"engineInit(int opmode, Key key, AlgorithmParameterSpec params, SecureRandom random)",protected abstract void,"Initializes this cipher with a key, a set of algorithm parameters, and a source of randomness."
CipherSpi,"engineInit(int opmode, Key key, AlgorithmParameters params, SecureRandom random)",protected abstract void,"Initializes this cipher with a key, a set of algorithm parameters, and a source of randomness."
CipherSpi,"engineInit(int opmode, Key key, SecureRandom random)",protected abstract void,Initializes this cipher with a key and a source of randomness.
CipherSpi,engineSetMode(String mode),protected abstract void,Sets the mode of this cipher.
CipherSpi,engineSetPadding(String padding),protected abstract void,Sets the padding mechanism of this cipher.
CipherSpi,"engineUnwrap(byte[] wrappedKey, String wrappedKeyAlgorithm, int wrappedKeyType)",protected Key,Unwrap a previously wrapped key.
CipherSpi,"engineUpdate(byte[] input, int inputOffset, int inputLen)",protected abstract byte[],"Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part."
CipherSpi,"engineUpdate(byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset)",protected abstract int,"Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part."
CipherSpi,"engineUpdate(ByteBuffer input, ByteBuffer output)",protected int,"Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part."
CipherSpi,"engineUpdateAAD(byte[] src, int offset, int len)",protected void,"Continues a multi-part update of the Additional Authentication Data (AAD), using a subset of the provided buffer."
CipherSpi,engineUpdateAAD(ByteBuffer src),protected void,Continues a multi-part update of the Additional Authentication Data (AAD).
CipherSpi,engineWrap(Key key),protected byte[],Wrap a key.
EncryptedPrivateKeyInfo,getAlgName(),String,Returns the encryption algorithm.
EncryptedPrivateKeyInfo,getAlgParameters(),AlgorithmParameters,Returns the algorithm parameters used by the encryption algorithm.
EncryptedPrivateKeyInfo,getEncoded(),byte[],Returns the ASN.1 encoding of this object.
EncryptedPrivateKeyInfo,getEncryptedData(),byte[],Returns the encrypted data.
EncryptedPrivateKeyInfo,getKeySpec(Cipher cipher),PKCS8EncodedKeySpec,Extract the enclosed PKCS8EncodedKeySpec object from the encrypted data and return it.
EncryptedPrivateKeyInfo,getKeySpec(Key decryptKey),PKCS8EncodedKeySpec,Extract the enclosed PKCS8EncodedKeySpec object from the encrypted data and return it.
EncryptedPrivateKeyInfo,"getKeySpec(Key decryptKey, Provider provider)",PKCS8EncodedKeySpec,Extract the enclosed PKCS8EncodedKeySpec object from the encrypted data and return it.
EncryptedPrivateKeyInfo,"getKeySpec(Key decryptKey, String providerName)",PKCS8EncodedKeySpec,Extract the enclosed PKCS8EncodedKeySpec object from the encrypted data and return it.
ExemptionMechanism,finalize(),protected void,Ensures that the key stored away by this ExemptionMechanism object will be wiped out when there are no more references to it.
ExemptionMechanism,genExemptionBlob(),byte[],Generates the exemption mechanism key blob.
ExemptionMechanism,genExemptionBlob(byte[] output),int,"Generates the exemption mechanism key blob, and stores the result in the output buffer."
ExemptionMechanism,"genExemptionBlob(byte[] output, int outputOffset)",int,"Generates the exemption mechanism key blob, and stores the result in the output buffer, starting at outputOffset inclusive."
ExemptionMechanism,getInstance(String algorithm),static ExemptionMechanism,Returns an ExemptionMechanism object that implements the specified exemption mechanism algorithm.
ExemptionMechanism,"getInstance(String algorithm, Provider provider)",static ExemptionMechanism,Returns an ExemptionMechanism object that implements the specified exemption mechanism algorithm.
ExemptionMechanism,"getInstance(String algorithm, String provider)",static ExemptionMechanism,Returns an ExemptionMechanism object that implements the specified exemption mechanism algorithm.
ExemptionMechanism,getName(),String,Returns the exemption mechanism name of this ExemptionMechanism object.
ExemptionMechanism,getOutputSize(int inputLen),int,"Returns the length in bytes that an output buffer would need to be in order to hold the result of the next genExemptionBlob operation, given the input length inputLen (in bytes)."
ExemptionMechanism,getProvider(),Provider,Returns the provider of this ExemptionMechanism object.
ExemptionMechanism,init(Key key),void,Initializes this exemption mechanism with a key.
ExemptionMechanism,"init(Key key, AlgorithmParameters params)",void,Initializes this exemption mechanism with a key and a set of algorithm parameters.
ExemptionMechanism,"init(Key key, AlgorithmParameterSpec params)",void,Initializes this exemption mechanism with a key and a set of algorithm parameters.
ExemptionMechanism,isCryptoAllowed(Key key),boolean,Returns whether the result blob has been generated successfully by this exemption mechanism.
ExemptionMechanismSpi,engineGenExemptionBlob(),protected abstract byte[],Generates the exemption mechanism key blob.
ExemptionMechanismSpi,"engineGenExemptionBlob(byte[] output, int outputOffset)",protected abstract int,"Generates the exemption mechanism key blob, and stores the result in the output buffer, starting at outputOffset inclusive."
ExemptionMechanismSpi,engineGetOutputSize(int inputLen),protected abstract int,"Returns the length in bytes that an output buffer would need to be in order to hold the result of the next engineGenExemptionBlob operation, given the input length inputLen (in bytes)."
ExemptionMechanismSpi,engineInit(Key key),protected abstract void,Initializes this exemption mechanism with a key.
ExemptionMechanismSpi,"engineInit(Key key, AlgorithmParameters params)",protected abstract void,Initializes this exemption mechanism with a key and a set of algorithm parameters.
ExemptionMechanismSpi,"engineInit(Key key, AlgorithmParameterSpec params)",protected abstract void,Initializes this exemption mechanism with a key and a set of algorithm parameters.
KeyAgreement,"doPhase(Key key, boolean lastPhase)",Key,Executes the next phase of this key agreement with the given key that was received from one of the other parties involved in this key agreement.
KeyAgreement,generateSecret(),byte[],Generates the shared secret and returns it in a new buffer.
KeyAgreement,"generateSecret(byte[] sharedSecret, int offset)",int,"Generates the shared secret, and places it into the buffer sharedSecret, beginning at offset inclusive."
KeyAgreement,generateSecret(String algorithm),SecretKey,Creates the shared secret and returns it as a SecretKey object of the specified algorithm.
KeyAgreement,getAlgorithm(),String,Returns the algorithm name of this KeyAgreement object.
KeyAgreement,getInstance(String algorithm),static KeyAgreement,Returns a KeyAgreement object that implements the specified key agreement algorithm.
KeyAgreement,"getInstance(String algorithm, Provider provider)",static KeyAgreement,Returns a KeyAgreement object that implements the specified key agreement algorithm.
KeyAgreement,"getInstance(String algorithm, String provider)",static KeyAgreement,Returns a KeyAgreement object that implements the specified key agreement algorithm.
KeyAgreement,getProvider(),Provider,Returns the provider of this KeyAgreement object.
KeyAgreement,init(Key key),void,"Initializes this key agreement with the given key, which is required to contain all the algorithm parameters required for this key agreement."
KeyAgreement,"init(Key key, AlgorithmParameterSpec params)",void,Initializes this key agreement with the given key and set of algorithm parameters.
KeyAgreement,"init(Key key, AlgorithmParameterSpec params, SecureRandom random)",void,"Initializes this key agreement with the given key, set of algorithm parameters, and source of randomness."
KeyAgreement,"init(Key key, SecureRandom random)",void,Initializes this key agreement with the given key and source of randomness.
KeyAgreementSpi,"engineDoPhase(Key key, boolean lastPhase)",protected abstract Key,Executes the next phase of this key agreement with the given key that was received from one of the other parties involved in this key agreement.
KeyAgreementSpi,engineGenerateSecret(),protected abstract byte[],Generates the shared secret and returns it in a new buffer.
KeyAgreementSpi,"engineGenerateSecret(byte[] sharedSecret, int offset)",protected abstract int,"Generates the shared secret, and places it into the buffer sharedSecret, beginning at offset inclusive."
KeyAgreementSpi,engineGenerateSecret(String algorithm),protected abstract SecretKey,Creates the shared secret and returns it as a secret key object of the requested algorithm type.
KeyAgreementSpi,"engineInit(Key key, AlgorithmParameterSpec params, SecureRandom random)",protected abstract void,"Initializes this key agreement with the given key, set of algorithm parameters, and source of randomness."
KeyAgreementSpi,"engineInit(Key key, SecureRandom random)",protected abstract void,Initializes this key agreement with the given key and source of randomness.
KeyGenerator,generateKey(),SecretKey,Generates a secret key.
KeyGenerator,getAlgorithm(),String,Returns the algorithm name of this KeyGenerator object.
KeyGenerator,getInstance(String algorithm),static KeyGenerator,Returns a KeyGenerator object that generates secret keys for the specified algorithm.
KeyGenerator,"getInstance(String algorithm, Provider provider)",static KeyGenerator,Returns a KeyGenerator object that generates secret keys for the specified algorithm.
KeyGenerator,"getInstance(String algorithm, String provider)",static KeyGenerator,Returns a KeyGenerator object that generates secret keys for the specified algorithm.
KeyGenerator,getProvider(),Provider,Returns the provider of this KeyGenerator object.
KeyGenerator,init(AlgorithmParameterSpec params),void,Initializes this key generator with the specified parameter set.
KeyGenerator,"init(AlgorithmParameterSpec params, SecureRandom random)",void,Initializes this key generator with the specified parameter set and a user-provided source of randomness.
KeyGenerator,init(int keysize),void,Initializes this key generator for a certain keysize.
KeyGenerator,"init(int keysize, SecureRandom random)",void,"Initializes this key generator for a certain keysize, using a user-provided source of randomness."
KeyGenerator,init(SecureRandom random),void,Initializes this key generator.
KeyGeneratorSpi,engineGenerateKey(),protected abstract SecretKey,Generates a secret key.
KeyGeneratorSpi,"engineInit(AlgorithmParameterSpec params, SecureRandom random)",protected abstract void,Initializes the key generator with the specified parameter set and a user-provided source of randomness.
KeyGeneratorSpi,"engineInit(int keysize, SecureRandom random)",protected abstract void,"Initializes this key generator for a certain keysize, using the given source of randomness."
KeyGeneratorSpi,engineInit(SecureRandom random),protected abstract void,Initializes the key generator.
Mac,clone(),Object,Returns a clone if the provider implementation is cloneable.
Mac,doFinal(),byte[],Finishes the MAC operation.
Mac,doFinal(byte[] input),byte[],Processes the given array of bytes and finishes the MAC operation.
Mac,"doFinal(byte[] output, int outOffset)",void,Finishes the MAC operation.
Mac,getAlgorithm(),String,Returns the algorithm name of this Mac object.
Mac,getInstance(String algorithm),static Mac,Returns a Mac object that implements the specified MAC algorithm.
Mac,"getInstance(String algorithm, Provider provider)",static Mac,Returns a Mac object that implements the specified MAC algorithm.
Mac,"getInstance(String algorithm, String provider)",static Mac,Returns a Mac object that implements the specified MAC algorithm.
Mac,getMacLength(),int,Returns the length of the MAC in bytes.
Mac,getProvider(),Provider,Returns the provider of this Mac object.
Mac,init(Key key),void,Initializes this Mac object with the given key.
Mac,"init(Key key, AlgorithmParameterSpec params)",void,Initializes this Mac object with the given key and algorithm parameters.
Mac,reset(),void,Resets this Mac object.
Mac,update(byte input),void,Processes the given byte.
Mac,update(byte[] input),void,Processes the given array of bytes.
Mac,"update(byte[] input, int offset, int len)",void,"Processes the first len bytes in input, starting at offset inclusive."
Mac,update(ByteBuffer input),void,"Processes input.remaining() bytes in the ByteBuffer input, starting at input.position()."
MacSpi,clone(),Object,Returns a clone if the implementation is cloneable.
MacSpi,engineDoFinal(),protected abstract byte[],"Completes the MAC computation and resets the MAC for further use, maintaining the secret key that the MAC was initialized with."
MacSpi,engineGetMacLength(),protected abstract int,Returns the length of the MAC in bytes.
MacSpi,"engineInit(Key key, AlgorithmParameterSpec params)",protected abstract void,Initializes the MAC with the given (secret) key and algorithm parameters.
MacSpi,engineReset(),protected abstract void,"Resets the MAC for further use, maintaining the secret key that the MAC was initialized with."
MacSpi,engineUpdate(byte input),protected abstract void,Processes the given byte.
MacSpi,"engineUpdate(byte[] input, int offset, int len)",protected abstract void,"Processes the first len bytes in input, starting at offset inclusive."
MacSpi,engineUpdate(ByteBuffer input),protected void,"Processes input.remaining() bytes in the ByteBuffer input, starting at input.position()."
SealedObject,getAlgorithm(),String,Returns the algorithm that was used to seal this object.
SealedObject,getObject(Cipher c),Object,Retrieves the original (encapsulated) object.
SealedObject,getObject(Key key),Object,Retrieves the original (encapsulated) object.
SealedObject,"getObject(Key key, String provider)",Object,Retrieves the original (encapsulated) object.
SecretKeyFactory,generateSecret(KeySpec keySpec),SecretKey,Generates a SecretKey object from the provided key specification (key material).
SecretKeyFactory,getAlgorithm(),String,Returns the algorithm name of this SecretKeyFactory object.
SecretKeyFactory,getInstance(String algorithm),static SecretKeyFactory,Returns a SecretKeyFactory object that converts secret keys of the specified algorithm.
SecretKeyFactory,"getInstance(String algorithm, Provider provider)",static SecretKeyFactory,Returns a SecretKeyFactory object that converts secret keys of the specified algorithm.
SecretKeyFactory,"getInstance(String algorithm, String provider)",static SecretKeyFactory,Returns a SecretKeyFactory object that converts secret keys of the specified algorithm.
SecretKeyFactory,"getKeySpec(SecretKey key, Class<?> keySpec)",KeySpec,Returns a specification (key material) of the given key object in the requested format.
SecretKeyFactory,getProvider(),Provider,Returns the provider of this SecretKeyFactory object.
SecretKeyFactory,translateKey(SecretKey key),SecretKey,"Translates a key object, whose provider may be unknown or potentially untrusted, into a corresponding key object of this secret-key factory."
SecretKeyFactorySpi,engineGenerateSecret(KeySpec keySpec),protected abstract SecretKey,Generates a SecretKey object from the provided key specification (key material).
SecretKeyFactorySpi,"engineGetKeySpec(SecretKey key, Class<?> keySpec)",protected abstract KeySpec,Returns a specification (key material) of the given key object in the requested format.
SecretKeyFactorySpi,engineTranslateKey(SecretKey key),protected abstract SecretKey,"Translates a key object, whose provider may be unknown or potentially untrusted, into a corresponding key object of this secret-key factory."
