Sample: 0 Boolean_1
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        Boolean boolObj = new Boolean(true);
        boolean boolValue = boolObj.booleanValue();
        System.out.println("Boolean value: " + boolValue);
    }
}
```
================================================================

Sample: 1 Boolean_2
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Boolean;

public class Main {
    public static void main(String[] args) {
        Boolean bool1 = true;
        Boolean bool2 = false;

        int result1 = bool1.compareTo(bool2);
        int result2 = bool2.compareTo(bool1);

        System.out.println("Result 1: " + result1);
        System.out.println("Result 2: " + result2);
    }
}
```
================================================================

Sample: 2 Boolean_3
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Boolean;

public class Main {
    public static void main(String[] args) {
        Boolean boolTrue = new Boolean(true);
        Boolean boolFalse = new Boolean(false);

        System.out.println("Hash code for true: " + boolTrue.hashCode());
        System.out.println("Hash code for false: " + boolFalse.hashCode());
    }
}
```
================================================================

Sample: 3 Boolean_4
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Boolean;

public class Main {
    public static void main(String[] args) {
        Boolean bool = true;
        System.out.println(bool.toString());
        
        Boolean bool2 = false;
        System.out.println(bool2.toString());
    }
}
```
================================================================

Sample: 4 Boolean_5
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        boolean boolValue = true;
        Boolean boolObj = Boolean.valueOf(boolValue);
        System.out.println("Boolean object value: " + boolObj);
    }
}
```
================================================================

Sample: 5 Byte_1
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Byte;

public class Main {
    public static void main(String[] args) {
        Byte b = new Byte((byte) 10);
        byte value = b.byteValue();
        System.out.println("Byte value: " + value);
    }
}
```
================================================================

Sample: 6 Byte_2
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Byte;

public class Main {
    public static void main(String[] args) {
        Byte byte1 = new Byte((byte) 10);
        Byte byte2 = new Byte((byte) 5);

        int result = byte1.compareTo(byte2);
        System.out.println("Comparison result: " + result);
    }
}
```
================================================================

Sample: 7 Byte_3
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Byte;

public class Main {
    public static void main(String[] args) {
        byte value = 10;
        Byte byteInstance = Byte.valueOf(value);
        System.out.println("Byte instance representing " + value + ": " + byteInstance);
    }
}
```
================================================================

Sample: 8 Byte_4
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Byte;

public class Main {
    public static void main(String[] args) {
        Byte b = new Byte((byte) 10);
        System.out.println(b.toString());
    }
}
```
================================================================

Sample: 9 Byte_5
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Byte;

public class Main {
    public static void main(String[] args) {
        String s = "10";
        Byte byteValue = Byte.valueOf(s);
        System.out.println("Byte value: " + byteValue);
    }
}
```
================================================================

Sample: 10 Character_1
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        Character ch = new Character('a');
        char value = ch.charValue();
        System.out.println("Character value: " + value);
    }
}
```
================================================================

Sample: 11 Character_2
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Character;

public class Main {
    public static void main(String[] args) {
        Character char1 = 'a';
        Character char2 = 'b';
        
        int result = char1.compareTo(char2);
        
        System.out.println("Result: " + result);
    }
}
```
================================================================

Sample: 12 Character_3
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        Character char1 = new Character('a');
        Character char2 = new Character('a');
        
        System.out.println("Are the characters equal? " + char1.equals(char2));
    }
}
```
================================================================

Sample: 13 Character_4
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Character;

public class Main {
    public static void main(String[] args) {
        Character ch = 'a';
        int hashCode = ch.hashCode();
        System.out.println("Hash code for character 'a': " + hashCode);
    }
}
```
================================================================

Sample: 14 Character_5
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        Character ch = 'a';
        String str = ch.toString();
        System.out.println("String representation of character 'a': " + str);
    }
}
```
================================================================

Sample: 15 Character_Subset_1
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Character;

public class Main {
    public static void main(String[] args) {
        Character.Subset subset1 = new Character.Subset("Latin");
        Character.Subset subset2 = new Character.Subset("Latin");

        System.out.println(subset1.equals(subset2)); // Output: true
    }
}
```
================================================================

Sample: 16 Character_Subset_2
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Character;

public class Main {
    public static void main(String[] args) {
        Character.Subset subset = new Character.Subset() {
            @Override
            public int hashCode() {
                return super.hashCode();
            }
        };
        
        int hash = subset.hashCode();
        System.out.println("Hash code: " + hash);
    }
}
```
================================================================

Sample: 17 Character_Subset_3
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Character;

public class Main {
    public static void main(String[] args) {
        Character.Subset subset = new Character.Subset() {
            @Override
            public String toString() {
                return "Latin-1 Supplement";
            }
        };
        
        System.out.println(subset.toString());
    }
}
```
================================================================

Sample: 18 Character_Subset_5
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Character;

public class Main {
    public static void main(String[] args) {
        Character.Subset subset1 = new Character.Subset("Latin");
        Character.Subset subset2 = new Character.Subset("Latin");

        System.out.println(subset1.equals(subset2)); // Output: true
    }
}
```
================================================================

Sample: 19 Class_1
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Class;

public class Main {
    public static void main(String[] args) {
        System.out.println(String.class.getName());
        System.out.println(byte.class.getName());
        System.out.println((new Object[3]).getClass().getName());
        System.out.println((new int[3][4][5][6][7][8][9]).getClass().getName());
    }
}
```
================================================================

Sample: 20 Class_2
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Class;

public class Main {
    public static void main(String[] args) {
        Class<?> clazz = String.class;
        Class<?>[] interfaces = clazz.getInterfaces();
        
        for (Class<?> inter : interfaces) {
            System.out.println(inter.getName());
        }
    }
}
```
================================================================

Sample: 21 Class_4
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Class;

public class Main {
    public static void main(String[] args) {
        Class<?> cls = String.class;
        System.out.println(cls.isInterface()); // false
    }
}
```
================================================================

Sample: 22 ClassLoader_1
----------------------------------------------------------------
Code snippet:
```java
import java.lang.ClassLoader;

public class Main {
    public static void main(String[] args) {
        ClassLoader classLoader = Main.class.getClassLoader();
        try {
            Class<?> clazz = classLoader.loadClass("java.lang.String");
            System.out.println("Class loaded: " + clazz.getName());
        } catch (ClassNotFoundException e) {
            System.out.println("Class not found");
        }
    }
}
```
================================================================

Sample: 23 ClassLoader_2
----------------------------------------------------------------
Code snippet:
```java
import java.lang.ClassLoader;

public class Main {
    public static void main(String[] args) {
        ClassLoader classLoader = Main.class.getClassLoader();
        try {
            Class<?> clazz = classLoader.loadClass("java.lang.String");
            System.out.println("Class loaded successfully: " + clazz.getName());
        } catch (ClassNotFoundException e) {
            System.out.println("Class not found: " + e.getMessage());
        }
    }
}
```
================================================================

Sample: 24 ClassLoader_3
----------------------------------------------------------------
`URL getResource(String name)`: This method finds the resource with the given name.

Code snippet:
```java
import java.net.URL;

public class Main {
    public static void main(String[] args) {
        ClassLoader classLoader = Main.class.getClassLoader();
        URL resource = classLoader.getResource("example.txt");
        
        if (resource != null) {
            System.out.println("Resource found: " + resource);
        } else {
            System.out.println("Resource not found.");
        }
    }
}
```
================================================================

Sample: 25 ClassLoader_4
----------------------------------------------------------------
Code snippet:
```java
import java.io.IOException;
import java.net.URL;
import java.util.Enumeration;

public class Main {
    public static void main(String[] args) {
        ClassLoader classLoader = Main.class.getClassLoader();
        try {
            Enumeration<URL> resources = classLoader.getResources("example.txt");
            while (resources.hasMoreElements()) {
                URL url = resources.nextElement();
                System.out.println(url);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```
================================================================

Sample: 26 ClassLoader_5
----------------------------------------------------------------
Code snippet:
```java
import java.lang.ClassLoader;

public class Main {
    public static void main(String[] args) {
        ClassLoader classLoader = Main.class.getClassLoader();
        byte[] classData = {0xCAFEBABE, 0x00000034, 0x00000000, 0x00000017, 0x0000000A, 0x00000001, 0x00000006, 0x00000001, 0x00000007, 0x00000000, 0x00000008, 0x00000001, 0x00000009, 0x00000000, 0x0000000A, 0x00000001, 0x0000000B, 0x00000000, 0x0000000C, 0x00000001, 0x0000000D, 0x00000000, 0x0000000E, 0x00000001, 0x0000000F, 0x00000000, 0x00000010, 0x00000001, 0x00000011, 0x00000000, 0x00000012, 0x00000001, 0x00000013, 0x00000000, 0x00000014, 0x00000001, 0x00000015, 0x00000000, 0x00000016, 0x00000001, 0x00000017, 0x00000000, 0x00000018, 0x00000001, 0x00000019, 0x00000000, 0x0000001A, 0x00000001, 0x0000001B, 0x00000000, 0x0000001C, 0x00000001, 0x0000001D, 0x00000000, 0x0000001E, 0x00000001, 0x0000001F, 0x00000000, 0x00000020, 0x00000001, 0x00000021, 0x00000000, 0x00000022, 0x00000001, 0x00000023, 0x00000000, 0x00000024, 0x00000001, 0x00000025, 0x00000000, 0x00000026, 0x00000001, 0x00000027, 0x00000000, 0x00000028, 0x00000001, 0x00000029, 0x00000000, 0x0000002A, 0x00000001, 0x0000002B, 0x00000000, 0x0000002C, 0x00000001, 0x0000002D, 0x00000000, 0x0000002E, 0x00000001, 0x0000002F, 0x00000000, 0x00000030, 0x00000001, 0x00000031, 0x00000000, 0x00000032, 0x00000001, 0x00000033, 0x00000000, 0x00000034, 0x000000
================================================================

Sample: 27 ClassValue_2
----------------------------------------------------------------
`void remove(Class<?> type)`: This method removes the associated value for the given class.

Code snippet:
```java
import java.lang.ClassValue;

public class Main {
    public static void main(String[] args) {
        ClassValue<String> classValue = new ClassValue<String>() {
            @Override
            protected String computeValue(Class<?> type) {
                return "Value for " + type.getName();
            }
        };

        Class<?> myClass = Main.class;
        System.out.println("Initial value for " + myClass.getName() + ": " + classValue.get(myClass));

        // Remove the associated value for the class
        classValue.remove(myClass);

        // Try to get the value again after removal
        System.out.println("Value after removal: " + classValue.get(myClass));
    }
}
```
================================================================

Sample: 28 ClassValue_5
----------------------------------------------------------------
`void remove(Class<?> type)`: This method removes the associated value for the given class.

Code snippet:
```java
import java.lang.ClassValue;

public class Main {
    public static void main(String[] args) {
        ClassValue<String> classValue = new ClassValue<String>() {
            @Override
            protected String computeValue(Class<?> type) {
                return "Value for " + type.getName();
            }
        };

        Class<?> myClass = Main.class;
        System.out.println(classValue.get(myClass)); // Output: Value for Main

        classValue.remove(myClass);
        System.out.println(classValue.get(myClass)); // Output: Value for Main (reinitialized)
    }
}
```
================================================================

Sample: 29 Double_1
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Double;

public class Main {
    public static void main(String[] args) {
        Double num1 = 10.5;
        Double num2 = 5.5;

        int result = num1.compareTo(num2);

        if (result == 0) {
            System.out.println("num1 is equal to num2");
        } else if (result < 0) {
            System.out.println("num1 is less than num2");
        } else {
            System.out.println("num1 is greater than num2");
        }
    }
}
```
================================================================

Sample: 30 Double_2
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Double;

public class Main {
    public static void main(String[] args) {
        Double num1 = new Double(Double.NaN);
        Double num2 = new Double(10.0);

        System.out.println("Is num1 NaN? " + num1.isNaN()); // Output: true
        System.out.println("Is num2 NaN? " + num2.isNaN()); // Output: false
    }
}
```
================================================================

Sample: 31 Double_3
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Double;

public class Main {
    public static void main(String[] args) {
        Double myDouble = new Double(10.5);
        System.out.println("Double value: " + myDouble.doubleValue());
    }
}
```
================================================================

Sample: 32 Double_4
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Double;

public class Main {
    public static void main(String[] args) {
        Double myDouble = new Double(10.5);
        int intValue = myDouble.intValue();
        System.out.println("Double value: " + myDouble);
        System.out.println("Int value: " + intValue);
    }
}
```
================================================================

Sample: 33 Double_5
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        Double number = new Double(10.5);
        String numberString = number.toString();
        System.out.println("String representation of the Double object: " + numberString);
    }
}
```
================================================================

Sample: 34 Enum_1
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Enum;

enum Color {
    RED, GREEN, BLUE;
}

public class Main {
    public static void main(String[] args) {
        System.out.println(Color.RED.name());
        System.out.println(Color.GREEN.name());
        System.out.println(Color.BLUE.name());
    }
}
```
================================================================

Sample: 35 Enum_2
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Enum;

public class Main {
    public enum ExampleEnum {
        FIRST,
        SECOND,
        THIRD
    }

    public static void main(String[] args) {
        ExampleEnum example = ExampleEnum.SECOND;
        System.out.println("Ordinal of SECOND: " + example.ordinal());
    }
}
```
================================================================

Sample: 36 Enum_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.Arrays;

public class Main {
    public enum ExampleEnum {
        FIRST, SECOND, THIRD
    }

    public static void main(String[] args) {
        ExampleEnum first = ExampleEnum.FIRST;
        ExampleEnum second = ExampleEnum.SECOND;

        int result = first.compareTo(second);
        System.out.println(result); // Output: -1
    }
}
```
================================================================

Sample: 37 Float_1
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Float;

public class Main {
    public static void main(String[] args) {
        Float float1 = new Float(10.5f);
        Float float2 = new Float(5.5f);

        int result = float1.compareTo(float2);
        System.out.println("Comparison result: " + result);
    }
}
```
================================================================

Sample: 38 Float_2
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Float;

public class Main {
    public static void main(String[] args) {
        Float floatValue = new Float(3.14f);
        System.out.println("Is NaN: " + floatValue.isNaN());
        
        Float nanValue = new Float(Float.NaN);
        System.out.println("Is NaN: " + nanValue.isNaN());
    }
}
```
================================================================

Sample: 39 Float_3
----------------------------------------------------------------
`int intValue()`: This method returns the value of the Float object as an int after a narrowing primitive conversion.

Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        Float floatValue = new Float(10.5f);
        int intValue = floatValue.intValue();
        System.out.println("Float value: " + floatValue);
        System.out.println("Int value: " + intValue);
    }
}
```
================================================================

Sample: 40 Float_4
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Float;

public class Main {
    public static void main(String[] args) {
        Float floatValue = new Float(10.5f);
        System.out.println("Float value: " + floatValue.floatValue());
    }
}
```
================================================================

Sample: 41 Float_5
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Float;

public class Main {
    public static void main(String[] args) {
        Float floatValue = new Float(10.5f);
        String floatString = floatValue.toString();
        System.out.println("Float value as string: " + floatString);
    }
}
```
================================================================

Sample: 42 Integer_1
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Integer;

public class Main {
    public static void main(String[] args) {
        Integer num = new Integer(10);
        int value = num.intValue();
        System.out.println("Integer value: " + value);
    }
}
```
================================================================

Sample: 43 Integer_2
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Integer;

public class Main {
    public static void main(String[] args) {
        int num = 10;
        Integer integer = Integer.valueOf(num);
        System.out.println("Integer value: " + integer);
    }
}
```
================================================================

Sample: 44 Integer_3
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Integer;

public class Main {
    public static void main(String[] args) {
        String number = "123";
        Integer result = Integer.valueOf(number);
        System.out.println("Integer value: " + result);
    }
}
```
================================================================

Sample: 45 Integer_4
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Integer;

public class Main {
    public static void main(String[] args) {
        String number = "10";
        int radix = 2;
        
        Integer result = Integer.valueOf(number, radix);
        
        System.out.println("Result: " + result);
    }
}
```
================================================================

Sample: 46 Integer_5
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Integer;

public class Main {
    public static void main(String[] args) {
        String number1 = "10";
        String number2 = "0x1A";
        String number3 = "#FF";
        String number4 = "012";

        Integer int1 = Integer.decode(number1);
        Integer int2 = Integer.decode(number2);
        Integer int3 = Integer.decode(number3);
        Integer int4 = Integer.decode(number4);

        System.out.println("Decoded Integer 1: " + int1);
        System.out.println("Decoded Integer 2: " + int2);
        System.out.println("Decoded Integer 3: " + int3);
        System.out.println("Decoded Integer 4: " + int4);
    }
}
```
================================================================

Sample: 47 Long_1
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Long;

public class Main {
    public static void main(String[] args) {
        Long long1 = new Long(10);
        Long long2 = new Long(5);
        
        int result = long1.compareTo(long2);
        
        System.out.println("Comparison result: " + result);
    }
}
```
================================================================

Sample: 48 Long_2
----------------------------------------------------------------
`int intValue()`: This method returns the value of the Long object as an int after a narrowing primitive conversion.

Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        Long longValue = new Long(123456789);
        int intValue = longValue.intValue();
        System.out.println("Long value: " + longValue);
        System.out.println("Int value: " + intValue);
    }
}
```
================================================================

Sample: 49 Long_3
----------------------------------------------------------------
`long longValue()`: This method returns the value of the Long object as a long value.

Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        Long value = new Long(100);
        long result = value.longValue();
        System.out.println("Long value as long: " + result);
    }
}
```
================================================================

Sample: 50 Long_4
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        long value = 100L;
        Long longValue = Long.valueOf(value);
        System.out.println("Long value: " + longValue);
    }
}
```
================================================================

Sample: 51 Long_5
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        Long value = 123456789L;
        String stringValue = value.toString();
        System.out.println("String representation of Long value: " + stringValue);
    }
}
```
================================================================

Sample: 52 Math_1
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        double num = -10.5;
        double absValue = Math.abs(num);
        System.out.println("Absolute value of " + num + " is: " + absValue);
    }
}
```
================================================================

Sample: 53 Math_2
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        double base = 2.0;
        double exponent = 3.0;
        
        double result = Math.pow(base, exponent);
        
        System.out.println("Result of " + base + " raised to the power of " + exponent + " is: " + result);
    }
}
```
================================================================

Sample: 54 Math_3
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        double angle = Math.PI / 4; // angle in radians
        double sineValue = Math.sin(angle);
        System.out.println("Sine of " + angle + " is: " + sineValue);
    }
}
```
================================================================

Sample: 55 Math_4
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        double angle = Math.PI / 4; // angle in radians
        double cosine = Math.cos(angle);
        System.out.println("Cosine of " + angle + " radians is: " + cosine);
    }
}
```
================================================================

Sample: 56 Math_5
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        double a = 16.0;
        double result = Math.sqrt(a);
        System.out.println("Square root of " + a + " is: " + result);
    }
}
```
================================================================

Sample: 57 Number_1
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Number;

public class Main {
    public static void main(String[] args) {
        Number num = 10.5;
        int intValue = num.intValue();
        System.out.println("Integer value: " + intValue);
    }
}
```
================================================================

Sample: 58 Number_2
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Number;

public class Main {
    public static void main(String[] args) {
        Number num = 10.5;
        long result = num.longValue();
        System.out.println("Long value: " + result);
    }
}
```
================================================================

Sample: 59 Number_3
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Number;

public class Main {
    public static void main(String[] args) {
        Number num = 10;
        float floatValue = num.floatValue();
        System.out.println("Float value: " + floatValue);
    }
}
```
================================================================

Sample: 60 Number_4
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Number;

public class Main {
    public static void main(String[] args) {
        Number num = 10;
        double result = num.doubleValue();
        System.out.println("Double value: " + result);
    }
}
```
================================================================

Sample: 61 Number_5
----------------------------------------------------------------
`short shortValue()`: This method returns the value of the specified number as a short, which may involve rounding or truncation.

Code snippet:
```java
import java.lang.Number;

public class Main {
    public static void main(String[] args) {
        Integer num = 10;
        Number number = num;
        short result = number.shortValue();
        System.out.println("Short value: " + result);
    }
}
```
================================================================

Sample: 62 Object_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Objects;

public class Main {
    public static void main(String[] args) {
        String str1 = "Hello";
        String str2 = "Hello";
        
        boolean result1 = str1.equals(str2);
        System.out.println("Result 1: " + result1); // Output: true
        
        String str3 = new String("Hello");
        
        boolean result2 = str1.equals(str3);
        System.out.println("Result 2: " + result2); // Output: true
    }
}
```
================================================================

Sample: 63 Object_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.HashMap;

public class Main {
    public static void main(String[] args) {
        HashMap<String, Integer> map = new HashMap<>();
        map.put("key1", 1);
        map.put("key2", 2);
        
        System.out.println("Hash code for key1: " + map.get("key1").hashCode());
        System.out.println("Hash code for key2: " + map.get("key2").hashCode());
    }
}
```
================================================================

Sample: 64 Object_3
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        Object obj = new Object();
        System.out.println(obj.toString());
    }
}
```
================================================================

Sample: 65 Object_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        Number n = 0;
        Class<? extends Number> c = n.getClass();
        System.out.println(c);
    }
}
```
================================================================

Sample: 66 Object_5
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        Object obj = new Object();
        
        synchronized(obj) {
            obj.notify();
        }
    }
}
```
================================================================

Sample: 67 Package_1
----------------------------------------------------------------
`String getName()`: This method returns the fully-qualified name of the package.

Code snippet:
```java
import java.lang.Package;

public class Main {
    public static void main(String[] args) {
        Package pkg = Main.class.getPackage();
        String packageName = pkg.getName();
        System.out.println("Package name: " + packageName);
    }
}
```
================================================================

Sample: 68 Package_2
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Package;

public class Main {
    public static void main(String[] args) {
        Package pkg = Main.class.getPackage();
        String title = pkg.getImplementationTitle();
        System.out.println("Implementation Title: " + title);
    }
}
```
================================================================

Sample: 69 Package_3
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Package;

public class Main {
    public static void main(String[] args) {
        Package pkg = Main.class.getPackage();
        String version = pkg.getImplementationVersion();
        System.out.println("Implementation version: " + version);
    }
}
```
================================================================

Sample: 70 Package_4
----------------------------------------------------------------
`String getSpecificationTitle()`: This method returns the title of the specification that this package implements.

Code snippet:
```java
import java.lang.Package;

public class Main {
    public static void main(String[] args) {
        Package pkg = Main.class.getPackage();
        String specificationTitle = pkg.getSpecificationTitle();
        System.out.println("Specification Title: " + specificationTitle);
    }
}
```
================================================================

Sample: 71 Package_5
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Package;

public class Main {
    public static void main(String[] args) {
        Package pkg = Main.class.getPackage();
        String version = pkg.getSpecificationVersion();
        System.out.println("Specification Version: " + version);
    }
}
```
================================================================

Sample: 72 Process_1
----------------------------------------------------------------
`void destroy()`: This method kills the subprocess. Whether the subprocess represented by this Process object is forcibly terminated or not is implementation dependent.

Code snippet:
```java
import java.lang.Process;

public class Main {
    public static void main(String[] args) {
        Process process = new ProcessBuilder("notepad.exe").start();
        process.destroy();
    }
}
```
================================================================

Sample: 73 Process_2
----------------------------------------------------------------
`int exitValue()`: This method returns the exit value for the subprocess.

Code snippet:
```java
import java.io.IOException;

public class Main {
    public static void main(String[] args) {
        try {
            Process process = Runtime.getRuntime().exec("ls");
            int exitValue = process.exitValue();
            System.out.println("Exit Value: " + exitValue);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```
================================================================

Sample: 74 Process_3
----------------------------------------------------------------
`InputStream getErrorStream()`: This method returns the input stream connected to the error output of the subprocess.

Code snippet:
```java
import java.io.InputStream;

public class Main {
    public static void main(String[] args) {
        ProcessBuilder processBuilder = new ProcessBuilder("command");
        try {
            Process process = processBuilder.start();
            InputStream errorStream = process.getErrorStream();
            // Use errorStream to read error output from the subprocess
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```
================================================================

Sample: 75 Process_4
----------------------------------------------------------------
`OutputStream getOutputStream()`: This method returns the output stream connected to the normal input of the subprocess. Output to the stream is piped into the standard input of the process represented by this Process object.

Code snippet:
```java
import java.io.OutputStream;
import java.io.IOException;

public class Main {
    public static void main(String[] args) {
        try {
            Process process = Runtime.getRuntime().exec("echo Hello");
            OutputStream outputStream = process.getOutputStream();
            outputStream.write("World".getBytes());
            outputStream.flush();
            outputStream.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```
================================================================

Sample: 76 Process_5
----------------------------------------------------------------
Code snippet:
```java
import java.io.IOException;

public class Main {
    public static void main(String[] args) {
        try {
            Process process = Runtime.getRuntime().exec("notepad.exe");
            int exitValue = process.waitFor();
            System.out.println("Exit value: " + exitValue);
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }
}
```
================================================================

Sample: 77 ProcessBuilder_1
----------------------------------------------------------------
`inheritIO()`: This method sets the source and destination for subprocess standard I/O to be the same as those of the current Java process.

Code snippet:
```java
import java.lang.ProcessBuilder;

public class Main {
    public static void main(String[] args) {
        ProcessBuilder pb = new ProcessBuilder("ls");
        pb.inheritIO();
    }
}
```
================================================================

Sample: 78 ProcessBuilder_2
----------------------------------------------------------------
`Process start()`: This method starts a new process using the attributes of the ProcessBuilder.

Code snippet:
```java
import java.io.IOException;

public class Main {
    public static void main(String[] args) {
        ProcessBuilder processBuilder = new ProcessBuilder("command");
        
        try {
            Process process = processBuilder.start();
            System.out.println("Process started successfully");
        } catch (IOException e) {
            System.out.println("Error starting process: " + e.getMessage());
        }
    }
}
```
================================================================

Sample: 79 ProcessBuilder_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.List;
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ProcessBuilder processBuilder = new ProcessBuilder("ls", "-l");
        List<String> command = processBuilder.command();
        System.out.println(command);
    }
}
```
================================================================

Sample: 80 ProcessBuilder_4
----------------------------------------------------------------
Code snippet:
```java
import java.lang.ProcessBuilder;
import java.util.ArrayList;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        ProcessBuilder processBuilder = new ProcessBuilder();
        List<String> command = new ArrayList<>();
        command.add("ls");
        command.add("-l");
        processBuilder.command(command);
    }
}
```
================================================================

Sample: 81 Runtime_1
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Runtime;

public class Main {
    public static void main(String[] args) {
        Runtime runtime = Runtime.getRuntime();
        System.out.println("Runtime object: " + runtime);
    }
}
```
================================================================

Sample: 82 Runtime_2
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Runtime;

public class Main {
    public static void main(String[] args) {
        Runtime.getRuntime().exit(0);
    }
}
```
================================================================

Sample: 83 Runtime_3
----------------------------------------------------------------
Code snippet:
```java
import java.io.IOException;

public class Main {
    public static void main(String[] args) {
        try {
            Process process = Runtime.getRuntime().exec("ls -l");
            process.waitFor();
            System.out.println("Command executed successfully.");
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }
}
```
================================================================

Sample: 84 Runtime_4
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Runtime;

public class Main {
    public static void main(String[] args) {
        Runtime runtime = Runtime.getRuntime();
        long freeMemory = runtime.freeMemory();
        System.out.println("Free memory in JVM: " + freeMemory + " bytes");
    }
}
```
================================================================

Sample: 85 Runtime_5
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Runtime;

public class Main {
    public static void main(String[] args) {
        Runtime rt = Runtime.getRuntime();
        rt.gc();
    }
}
```
================================================================

Sample: 86 SecurityManager_1
----------------------------------------------------------------
Code snippet:
```java
import java.security.Permission;
import java.lang.SecurityManager;

public class Main {
    public static void main(String[] args) {
        SecurityManager securityManager = new SecurityManager();
        Permission permission = new Permission("example_permission");
        
        try {
            securityManager.checkPermission(permission);
            System.out.println("Permission granted");
        } catch (SecurityException e) {
            System.out.println("Permission denied");
        } catch (NullPointerException e) {
            System.out.println("Permission argument is null");
        }
    }
}
```
================================================================

Sample: 87 SecurityManager_2
----------------------------------------------------------------
Code snippet:
```java
import java.lang.SecurityManager;

public class Main {
    public static void main(String[] args) {
        SecurityManager securityManager = new SecurityManager();
        securityManager.checkCreateClassLoader();
    }
}
```
================================================================

Sample: 88 SecurityManager_3
----------------------------------------------------------------
Code snippet:
```java
import java.lang.SecurityManager;

public class Main {
    public static void main(String[] args) {
        SecurityManager securityManager = new SecurityManager();
        try {
            securityManager.checkExit(0);
            System.out.println("Exiting with status 0");
        } catch (SecurityException e) {
            System.out.println("SecurityException: " + e.getMessage());
        }
    }
}
```
================================================================

Sample: 89 SecurityManager_4
----------------------------------------------------------------
Code snippet:
```java
import java.lang.SecurityManager;

public class Main {
    public static void main(String[] args) {
        SecurityManager securityManager = new SecurityManager();
        try {
            securityManager.checkRead("example.txt");
            System.out.println("File read permission granted");
        } catch (SecurityException e) {
            System.out.println("SecurityException: File read permission denied");
        } catch (NullPointerException e) {
            System.out.println("NullPointerException: File argument is null");
        }
    }
}
```
================================================================

Sample: 90 SecurityManager_5
----------------------------------------------------------------
Code snippet:
```java
import java.io.FileDescriptor;
import java.lang.SecurityManager;

public class Main {
    public static void main(String[] args) {
        SecurityManager securityManager = new SecurityManager();
        FileDescriptor fd = new FileDescriptor();
        
        try {
            securityManager.checkWrite(fd);
            System.out.println("Allowed to write to the specified file descriptor");
        } catch (SecurityException e) {
            System.out.println("Not allowed to write to the specified file descriptor");
        } catch (NullPointerException e) {
            System.out.println("File descriptor argument is null");
        }
    }
}
```
================================================================

Sample: 91 Short_1
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Short;

public class Main {
    public static void main(String[] args) {
        String number = "123";
        try {
            short result = Short.parseShort(number);
            System.out.println("Parsed short value: " + result);
        } catch (NumberFormatException e) {
            System.out.println("Error parsing short value: " + e.getMessage());
        }
    }
}
```
================================================================

Sample: 92 Short_2
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Short;

public class Main {
    public static void main(String[] args) {
        String number = "10";
        Short shortObj = Short.valueOf(number);
        System.out.println("Short value: " + shortObj);
    }
}
```
================================================================

Sample: 93 Short_3
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Short;

public class Main {
    public static void main(String[] args) {
        Short short1 = 10;
        Short short2 = 5;
        
        int result = short1.compareTo(short2);
        
        System.out.println("Comparison result: " + result);
    }
}
```
================================================================

Sample: 94 Short_4
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Short;

public class Main {
    public static void main(String[] args) {
        Short value = 10;
        String stringValue = value.toString();
        System.out.println("String representation of Short value: " + stringValue);
    }
}
```
================================================================

Sample: 95 Short_5
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Short;

public class Main {
    public static void main(String[] args) {
        Short myShort = 10;
        int hashCode = myShort.hashCode();
        System.out.println("Hash code for myShort: " + hashCode);
    }
}
```
================================================================

Sample: 96 StackTraceElement_1
----------------------------------------------------------------
Code snippet:
```java
import java.lang.StackTraceElement;

public class Main {
    public static void main(String[] args) {
        StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();
        for (StackTraceElement element : stackTrace) {
            System.out.println("Class Name: " + element.getClassName());
        }
    }
}
```
================================================================

Sample: 97 StackTraceElement_2
----------------------------------------------------------------
`String getFileName()`: This method returns the name of the source file containing the execution point represented by this stack trace element.

Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        StackTraceElement[] stackTrace = new Exception().getStackTrace();
        for (StackTraceElement element : stackTrace) {
            System.out.println("File Name: " + element.getFileName());
        }
    }
}
```
================================================================

Sample: 98 StackTraceElement_3
----------------------------------------------------------------
Code snippet:
```java
import java.lang.StackTraceElement;

public class Main {
    public static void main(String[] args) {
        StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();
        
        for (StackTraceElement element : stackTrace) {
            System.out.println("Class Name: " + element.getClassName());
            System.out.println("Method Name: " + element.getMethodName());
            System.out.println("File Name: " + element.getFileName());
            System.out.println("Line Number: " + element.getLineNumber());
            System.out.println();
        }
    }
}
```
================================================================

Sample: 99 StackTraceElement_4
----------------------------------------------------------------
Code snippet:
```java
import java.lang.StackTraceElement;

public class Main {
    public static void main(String[] args) {
        StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();
        for (StackTraceElement element : stackTrace) {
            System.out.println("Method Name: " + element.getMethodName());
        }
    }
}
```
================================================================

Sample: 100 StackTraceElement_5
----------------------------------------------------------------
`boolean isNativeMethod()`: This method returns true if the method containing the execution point represented by this stack trace element is a native method.

Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();
        
        for (StackTraceElement element : stackTrace) {
            System.out.println("Method: " + element.getMethodName());
            System.out.println("Is Native Method: " + element.isNativeMethod());
        }
    }
}
```
================================================================

Sample: 101 StrictMath_1
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        double result = StrictMath.exp(2.0);
        System.out.println(result);
    }
}
```
================================================================

Sample: 102 StrictMath_2
----------------------------------------------------------------
Code snippet:
```java
import java.lang.StrictMath;

public class Main {
    public static void main(String[] args) {
        double result = StrictMath.log(10.0);
        System.out.println("Natural logarithm of 10: " + result);
    }
}
```
================================================================

Sample: 103 StrictMath_3
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        double a = 16.0;
        double result = StrictMath.sqrt(a);
        System.out.println("Square root of " + a + " is: " + result);
    }
}
```
================================================================

Sample: 104 StrictMath_4
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        double angle = Math.PI / 2; // 90 degrees in radians
        double sineValue = StrictMath.sin(angle);
        System.out.println("Sine of " + angle + " radians is: " + sineValue);
    }
}
```
================================================================

Sample: 105 StrictMath_5
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        double angle = Math.PI / 4; // angle in radians
        double cosine = StrictMath.cos(angle);
        System.out.println("Cosine of " + angle + " radians: " + cosine);
    }
}
```
================================================================

Sample: 106 String_1
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        String str = "Hello, World!";
        int length = str.length();
        System.out.println("Length of the string: " + length);
    }
}
```
================================================================

Sample: 107 String_2
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        String str = "Hello";
        char result = str.charAt(1);
        System.out.println("Character at index 1: " + result);
    }
}
```
================================================================

Sample: 108 String_3
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        String str1 = "unhappy";
        String str2 = "Harbison";
        String str3 = "emptiness";

        System.out.println(str1.substring(2)); // Output: happy
        System.out.println(str2.substring(3)); // Output: bison
        System.out.println(str3.substring(9)); // Output: ""
    }
}
```
================================================================

Sample: 109 String_4
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        String str = "Hello, World!";
        int index = str.indexOf("World");
        System.out.println("Index of 'World' in the string: " + index);
    }
}
```
================================================================

Sample: 110 String_5
----------------------------------------------------------------
Code snippet:
```java
import java.lang.String;

public class Main {
    public static void main(String[] args) {
        String str1 = "Hello";
        String str2 = "Hello";
        
        boolean result1 = str1.equals(str2);
        System.out.println(result1); // Output: true
        
        String str3 = "World";
        
        boolean result2 = str1.equals(str3);
        System.out.println(result2); // Output: false
    }
}
```
================================================================

Sample: 111 StringBuffer_1
----------------------------------------------------------------
Code snippet:
```java
import java.lang.StringBuffer;

public class Main {
    public static void main(String[] args) {
        StringBuffer sb = new StringBuffer("Hello");
        System.out.println("Length of StringBuffer: " + sb.length());
    }
}
```
================================================================

Sample: 112 StringBuffer_2
----------------------------------------------------------------
Code snippet:
```java
import java.lang.StringBuffer;

public class Main {
    public static void main(String[] args) {
        StringBuffer sb = new StringBuffer("Hello");
        System.out.println("Before setLength: " + sb.toString());
        
        sb.setLength(8);
        System.out.println("After setLength: " + sb.toString());
    }
}
```
================================================================

Sample: 113 StringBuffer_3
----------------------------------------------------------------
Code snippet:
```java
import java.lang.StringBuffer;

public class Main {
    public static void main(String[] args) {
        StringBuffer sb = new StringBuffer("Hello");
        System.out.println("Before ensureCapacity: " + sb.capacity());
        
        sb.ensureCapacity(20);
        System.out.println("After ensureCapacity: " + sb.capacity());
    }
}
```
================================================================

Sample: 114 StringBuffer_4
----------------------------------------------------------------
Code snippet:
```java
import java.lang.StringBuffer;

public class Main {
    public static void main(String[] args) {
        StringBuffer sb = new StringBuffer("Hello");
        System.out.println("Before trimToSize(): " + sb.capacity());
        
        sb.trimToSize();
        
        System.out.println("After trimToSize(): " + sb.capacity());
    }
}
```
================================================================

Sample: 115 StringBuffer_5
----------------------------------------------------------------
Code snippet:
```java
import java.lang.StringBuffer;

public class Main {
    public static void main(String[] args) {
        StringBuffer sb = new StringBuffer("Hello");
        String str = sb.toString();
        System.out.println(str);
    }
}
```
================================================================

Sample: 116 StringBuilder_1
----------------------------------------------------------------
Code snippet:
```java
import java.lang.StringBuilder;

public class Main {
    public static void main(String[] args) {
        StringBuilder sb = new StringBuilder("Hello");
        sb.append(" World");
        System.out.println(sb.toString());
    }
}
```
================================================================

Sample: 117 StringBuilder_2
----------------------------------------------------------------
Code snippet:
```java
import java.lang.StringBuilder;

public class Main {
    public static void main(String[] args) {
        StringBuilder sb = new StringBuilder("Hello");
        System.out.println("Before insert: " + sb);

        sb.insert(2, "Java");
        System.out.println("After insert: " + sb);
    }
}
```
================================================================

Sample: 118 StringBuilder_3
----------------------------------------------------------------
Code snippet:
```java
import java.lang.StringBuilder;

public class Main {
    public static void main(String[] args) {
        StringBuilder sb = new StringBuilder("Hello World");
        System.out.println("Before deletion: " + sb);

        sb.delete(6, 11);
        System.out.println("After deletion: " + sb);
    }
}
```
================================================================

Sample: 119 StringBuilder_4
----------------------------------------------------------------
Code snippet:
```java
import java.lang.StringBuilder;

public class Main {
    public static void main(String[] args) {
        StringBuilder sb = new StringBuilder("Hello");
        int length = sb.length();
        System.out.println("Length of StringBuilder: " + length);
    }
}
```
================================================================

Sample: 120 StringBuilder_5
----------------------------------------------------------------
Code snippet:
```java
import java.lang.StringBuilder;

public class Main {
    public static void main(String[] args) {
        StringBuilder sb = new StringBuilder("Hello");
        String str = sb.toString();
        System.out.println(str);
    }
}
```
================================================================

Sample: 121 System_1
----------------------------------------------------------------
Code snippet:
```java
import java.lang.System;

public class Main {
    public static void main(String[] args) {
        System.exit(0);
    }
}
```
================================================================

Sample: 122 System_2
----------------------------------------------------------------
Code snippet:
```java
import java.lang.System;

public class Main {
    public static void main(String[] args) {
        long currentTime = System.currentTimeMillis();
        System.out.println("Current time in milliseconds: " + currentTime);
    }
}
```
================================================================

Sample: 123 System_3
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        System.gc();
    }
}
```
================================================================

Sample: 124 System_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Properties;

public class Main {
    public static void main(String[] args) {
        String javaVersion = System.getProperty("java.version");
        System.out.println("Java Version: " + javaVersion);
    }
}
```
================================================================

Sample: 125 System_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        int[] srcArray = {1, 2, 3, 4, 5};
        int[] destArray = new int[5];
        
        System.arraycopy(srcArray, 0, destArray, 0, 5);
        
        System.out.println("Source Array: " + Arrays.toString(srcArray));
        System.out.println("Destination Array: " + Arrays.toString(destArray));
    }
}
```
================================================================

Sample: 126 Thread_1
----------------------------------------------------------------
`void start()`: Causes this thread to begin execution; the Java Virtual Machine calls the run method of this thread.

Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        Thread thread = new Thread(() -> {
            System.out.println("Thread is running");
        });
        
        thread.start();
    }
}
```
================================================================

Sample: 127 Thread_2
----------------------------------------------------------------
`void run()`: If this thread was constructed using a separate Runnable run object, then that Runnable object's run method is called; otherwise, this method does nothing and returns.

Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        Thread thread = new Thread(new MyRunnable());
        thread.start();
    }

    static class MyRunnable implements Runnable {
        @Override
        public void run() {
            System.out.println("This is a separate thread");
        }
    }
}
```
================================================================

Sample: 128 Thread_3
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Thread;

public class Main {
    public static void main(String[] args) {
        try {
            System.out.println("Thread is going to sleep for 2 seconds");
            Thread.sleep(2000);
            System.out.println("Thread woke up after sleeping for 2 seconds");
        } catch (InterruptedException e) {
            System.out.println("Thread was interrupted while sleeping");
        }
    }
}
```
================================================================

Sample: 129 Thread_4
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Thread;

public class Main {
    public static void main(String[] args) {
        Thread thread = new Thread();
        
        try {
            thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
```
================================================================

Sample: 130 Thread_5
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Thread;

public class Main {
    public static void main(String[] args) {
        Thread currentThread = Thread.currentThread();
        System.out.println("Current thread: " + currentThread);
    }
}
```
================================================================

Sample: 131 ThreadGroup_2
----------------------------------------------------------------
Code snippet:
```java
import java.lang.ThreadGroup;

public class Main {
    public static void main(String[] args) {
        ThreadGroup group = new ThreadGroup("ExampleGroup");
        Thread thread1 = new Thread(group, () -> {
            System.out.println("Thread 1 is running");
        });
        Thread thread2 = new Thread(group, () -> {
            System.out.println("Thread 2 is running");
        });
        
        thread1.start();
        thread2.start();
        
        System.out.println("Active thread count: " + group.activeCount());
    }
}
```
================================================================

Sample: 132 ThreadGroup_4
----------------------------------------------------------------
`void interrupt()`: This method interrupts all threads in this thread group.

Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        ThreadGroup group = new ThreadGroup("ExampleGroup");
        
        Thread thread1 = new Thread(group, () -> {
            while (!Thread.currentThread().isInterrupted()) {
                System.out.println("Thread 1 is running");
            }
        });
        
        Thread thread2 = new Thread(group, () -> {
            while (!Thread.currentThread().isInterrupted()) {
                System.out.println("Thread 2 is running");
            }
        });
        
        thread1.start();
        thread2.start();
        
        group.interrupt();
    }
}
```
================================================================

Sample: 133 ThreadGroup_5
----------------------------------------------------------------
`void list()`: This method prints information about the thread group to the standard output. This method is useful only for debugging.

Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        ThreadGroup group = new ThreadGroup("ExampleGroup");
        group.list();
    }
}
```
================================================================

Sample: 134 ThreadLocal_3
----------------------------------------------------------------
`void remove()`: This method removes the current thread's value for this thread-local variable.

Code snippet:
```java
import java.lang.ThreadLocal;

public class Main {
    public static void main(String[] args) {
        ThreadLocal<String> threadLocal = new ThreadLocal<>();
        threadLocal.set("Value");
        
        System.out.println("Before removal: " + threadLocal.get());
        
        threadLocal.remove();
        
        System.out.println("After removal: " + threadLocal.get());
    }
}
```
================================================================

Sample: 135 Throwable_1
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Throwable;

public class Main {
    public static void main(String[] args) {
        try {
            throw new Exception("This is an example exception");
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
}
```
================================================================

Sample: 136 Throwable_2
----------------------------------------------------------------
`void printStackTrace()`: This method prints this throwable and its backtrace to the standard error stream.

Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        try {
            throw new NullPointerException("Custom exception message");
        } catch (NullPointerException e) {
            e.printStackTrace();
        }
    }
}
```
================================================================

Sample: 137 Throwable_3
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Throwable;

public class Main {
    public static void main(String[] args) {
        try {
            throw new NullPointerException("Custom exception");
        } catch (NullPointerException e) {
            Throwable cause = e.getCause();
            System.out.println("Cause: " + cause);
        }
    }
}
```
================================================================

Sample: 138 Throwable_4
----------------------------------------------------------------
`String toString()`: This method returns a short description of the throwable object.

Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        try {
            throw new NullPointerException("Custom message");
        } catch (NullPointerException e) {
            System.out.println(e.toString());
        }
    }
}
```
================================================================

Sample: 139 Throwable_5
----------------------------------------------------------------
`void addSuppressed(Throwable exception)`: This method appends the specified exception to the list of suppressed exceptions.

Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        try {
            throw new NullPointerException("Null Pointer Exception");
        } catch (Exception e) {
            Throwable throwable = new IllegalArgumentException("Illegal Argument Exception");
            throwable.addSuppressed(e);
            System.out.println("Suppressed exception: " + throwable.getSuppressed()[0]);
        }
    }
}
```
================================================================

