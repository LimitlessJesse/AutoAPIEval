ClassName,Method,Return Type,Description
Boolean,booleanValue(),boolean,Returns the value of this Boolean object as a boolean primitive.
Boolean,"compare(boolean x, boolean y)",static int,Compares two boolean values.
Boolean,compareTo(Boolean b),int,Compares this Boolean instance with another.
Boolean,equals(Object obj),boolean,Returns true if and only if the argument is not null and is a Boolean object that represents the same boolean value as this object.
Boolean,getBoolean(String name),static boolean,"Returns true if and only if the system property named by the argument exists and is equal to the string ""true""."
Boolean,hashCode(),int,Returns a hash code for this Boolean object.
Boolean,hashCode(boolean value),static int,Returns a hash code for a boolean value; compatible with Boolean.hashCode().
Boolean,"logicalAnd(boolean a, boolean b)",static boolean,Returns the result of applying the logical AND operator to the specified boolean operands.
Boolean,"logicalOr(boolean a, boolean b)",static boolean,Returns the result of applying the logical OR operator to the specified boolean operands.
Boolean,"logicalXor(boolean a, boolean b)",static boolean,Returns the result of applying the logical XOR operator to the specified boolean operands.
Boolean,parseBoolean(String s),static boolean,Parses the string argument as a boolean.
Boolean,toString(),String,Returns a String object representing this Boolean's value.
Boolean,toString(boolean b),static String,Returns a String object representing the specified boolean.
Boolean,valueOf(boolean b),static Boolean,Returns a Boolean instance representing the specified boolean value.
Boolean,valueOf(String s),static Boolean,Returns a Boolean with a value represented by the specified string.
Byte,byteValue(),byte,Returns the value of this Byte as a byte.
Byte,"compare(byte x, byte y)",static int,Compares two byte values numerically.
Byte,compareTo(Byte anotherByte),int,Compares two Byte objects numerically.
Byte,decode(String nm),static Byte,Decodes a String into a Byte.
Byte,doubleValue(),double,Returns the value of this Byte as a double after a widening primitive conversion.
Byte,equals(Object obj),boolean,Compares this object to the specified object.
Byte,floatValue(),float,Returns the value of this Byte as a float after a widening primitive conversion.
Byte,hashCode(),int,Returns a hash code for this Byte; equal to the result of invoking intValue().
Byte,hashCode(byte value),static int,Returns a hash code for a byte value; compatible with Byte.hashCode().
Byte,intValue(),int,Returns the value of this Byte as an int after a widening primitive conversion.
Byte,longValue(),long,Returns the value of this Byte as a long after a widening primitive conversion.
Byte,parseByte(String s),static byte,Parses the string argument as a signed decimal byte.
Byte,"parseByte(String s, int radix)",static byte,Parses the string argument as a signed byte in the radix specified by the second argument.
Byte,shortValue(),short,Returns the value of this Byte as a short after a widening primitive conversion.
Byte,toString(),String,Returns a String object representing this Byte's value.
Byte,toString(byte b),static String,Returns a new String object representing the specified byte.
Byte,toUnsignedInt(byte x),static int,Converts the argument to an int by an unsigned conversion.
Byte,toUnsignedLong(byte x),static long,Converts the argument to a long by an unsigned conversion.
Byte,valueOf(byte b),static Byte,Returns a Byte instance representing the specified byte value.
Byte,valueOf(String s),static Byte,Returns a Byte object holding the value given by the specified String.
Byte,"valueOf(String s, int radix)",static Byte,Returns a Byte object holding the value extracted from the specified String when parsed with the radix given by the second argument.
Character,charCount(int codePoint),static int,Determines the number of char values needed to represent the specified character (Unicode code point).
Character,charValue(),char,Returns the value of this Character object.
Character,"codePointAt(char[] a, int index)",static int,Returns the code point at the given index of the char array.
Character,"codePointAt(char[] a, int index, int limit)",static int,"Returns the code point at the given index of the char array, where only array elements with index less than limit can be used."
Character,"codePointAt(CharSequence seq, int index)",static int,Returns the code point at the given index of the CharSequence.
Character,"codePointBefore(char[] a, int index)",static int,Returns the code point preceding the given index of the char array.
Character,"codePointBefore(char[] a, int index, int start)",static int,"Returns the code point preceding the given index of the char array, where only array elements with index greater than or equal to start can be used."
Character,"codePointBefore(CharSequence seq, int index)",static int,Returns the code point preceding the given index of the CharSequence.
Character,"codePointCount(char[] a, int offset, int count)",static int,Returns the number of Unicode code points in a subarray of the char array argument.
Character,"codePointCount(CharSequence seq, int beginIndex, int endIndex)",static int,Returns the number of Unicode code points in the text range of the specified char sequence.
Character,"compare(char x, char y)",static int,Compares two char values numerically.
Character,compareTo(Character anotherCharacter),int,Compares two Character objects numerically.
Character,"digit(char ch, int radix)",static int,Returns the numeric value of the character ch in the specified radix.
Character,"digit(int codePoint, int radix)",static int,Returns the numeric value of the specified character (Unicode code point) in the specified radix.
Character,equals(Object obj),boolean,Compares this object against the specified object.
Character,"forDigit(int digit, int radix)",static char,Determines the character representation for a specific digit in the specified radix.
Character,getDirectionality(char ch),static byte,Returns the Unicode directionality property for the given character.
Character,getDirectionality(int codePoint),static byte,Returns the Unicode directionality property for the given character (Unicode code point).
Character,getName(int codePoint),static String,"Returns the Unicode name of the specified character codePoint, or null if the code point is unassigned."
Character,getNumericValue(char ch),static int,Returns the int value that the specified Unicode character represents.
Character,getNumericValue(int codePoint),static int,Returns the int value that the specified character (Unicode code point) represents.
Character,getType(char ch),static int,Returns a value indicating a character's general category.
Character,getType(int codePoint),static int,Returns a value indicating a character's general category.
Character,hashCode(),int,Returns a hash code for this Character; equal to the result of invoking charValue().
Character,hashCode(char value),static int,Returns a hash code for a char value; compatible with Character.hashCode().
Character,highSurrogate(int codePoint),static char,Returns the leading surrogate (a high surrogate code unit) of the surrogate pair representing the specified supplementary character (Unicode code point) in the UTF-16 encoding.
Character,isAlphabetic(int codePoint),static boolean,Determines if the specified character (Unicode code point) is an alphabet.
Character,isBmpCodePoint(int codePoint),static boolean,Determines whether the specified character (Unicode code point) is in the Basic Multilingual Plane (BMP).
Character,isDefined(char ch),static boolean,Determines if a character is defined in Unicode.
Character,isDefined(int codePoint),static boolean,Determines if a character (Unicode code point) is defined in Unicode.
Character,isDigit(char ch),static boolean,Determines if the specified character is a digit.
Character,isDigit(int codePoint),static boolean,Determines if the specified character (Unicode code point) is a digit.
Character,isHighSurrogate(char ch),static boolean,Determines if the given char value is a Unicode high-surrogate code unit (also known as leading-surrogate code unit).
Character,isIdentifierIgnorable(char ch),static boolean,Determines if the specified character should be regarded as an ignorable character in a Java identifier or a Unicode identifier.
Character,isIdentifierIgnorable(int codePoint),static boolean,Determines if the specified character (Unicode code point) should be regarded as an ignorable character in a Java identifier or a Unicode identifier.
Character,isIdeographic(int codePoint),static boolean,"Determines if the specified character (Unicode code point) is a CJKV (Chinese, Japanese, Korean and Vietnamese) ideograph, as defined by the Unicode Standard."
Character,isISOControl(char ch),static boolean,Determines if the specified character is an ISO control character.
Character,isISOControl(int codePoint),static boolean,Determines if the referenced character (Unicode code point) is an ISO control character.
Character,isJavaIdentifierPart(char ch),static boolean,Determines if the specified character may be part of a Java identifier as other than the first character.
Character,isJavaIdentifierPart(int codePoint),static boolean,Determines if the character (Unicode code point) may be part of a Java identifier as other than the first character.
Character,isJavaIdentifierStart(char ch),static boolean,Determines if the specified character is permissible as the first character in a Java identifier.
Character,isJavaIdentifierStart(int codePoint),static boolean,Determines if the character (Unicode code point) is permissible as the first character in a Java identifier.
Character,isJavaLetter(char ch),static boolean,Deprecated. Replaced by isJavaIdentifierStart(char).
Character,isJavaLetterOrDigit(char ch),static boolean,Deprecated. Replaced by isJavaIdentifierPart(char).
Character,isLetter(char ch),static boolean,Determines if the specified character is a letter.
Character,isLetter(int codePoint),static boolean,Determines if the specified character (Unicode code point) is a letter.
Character,isLetterOrDigit(char ch),static boolean,Determines if the specified character is a letter or digit.
Character,isLetterOrDigit(int codePoint),static boolean,Determines if the specified character (Unicode code point) is a letter or digit.
Character,isLowerCase(char ch),static boolean,Determines if the specified character is a lowercase character.
Character,isLowerCase(int codePoint),static boolean,Determines if the specified character (Unicode code point) is a lowercase character.
Character,isLowSurrogate(char ch),static boolean,Determines if the given char value is a Unicode low-surrogate code unit (also known as trailing-surrogate code unit).
Character,isMirrored(char ch),static boolean,Determines whether the character is mirrored according to the Unicode specification.
Character,isMirrored(int codePoint),static boolean,Determines whether the specified character (Unicode code point) is mirrored according to the Unicode specification.
Character,isSpace(char ch),static boolean,Deprecated. Replaced by isWhitespace(char).
Character,isSpaceChar(char ch),static boolean,Determines if the specified character is a Unicode space character.
Character,isSpaceChar(int codePoint),static boolean,Determines if the specified character (Unicode code point) is a Unicode space character.
Character,isSupplementaryCodePoint(int codePoint),static boolean,Determines whether the specified character (Unicode code point) is in the supplementary character range.
Character,isSurrogate(char ch),static boolean,Determines if the given char value is a Unicode surrogate code unit.
Character,"isSurrogatePair(char high, char low)",static boolean,Determines whether the specified pair of char values is a valid Unicode surrogate pair.
Character,isTitleCase(char ch),static boolean,Determines if the specified character is a titlecase character.
Character,isTitleCase(int codePoint),static boolean,Determines if the specified character (Unicode code point) is a titlecase character.
Character,isUnicodeIdentifierPart(char ch),static boolean,Determines if the specified character may be part of a Unicode identifier as other than the first character.
Character,isUnicodeIdentifierPart(int codePoint),static boolean,Determines if the specified character (Unicode code point) may be part of a Unicode identifier as other than the first character.
Character,isUnicodeIdentifierStart(char ch),static boolean,Determines if the specified character is permissible as the first character in a Unicode identifier.
Character,isUnicodeIdentifierStart(int codePoint),static boolean,Determines if the specified character (Unicode code point) is permissible as the first character in a Unicode identifier.
Character,isUpperCase(char ch),static boolean,Determines if the specified character is an uppercase character.
Character,isUpperCase(int codePoint),static boolean,Determines if the specified character (Unicode code point) is an uppercase character.
Character,isValidCodePoint(int codePoint),static boolean,Determines whether the specified code point is a valid Unicode code point value.
Character,isWhitespace(char ch),static boolean,Determines if the specified character is white space according to Java.
Character,isWhitespace(int codePoint),static boolean,Determines if the specified character (Unicode code point) is white space according to Java.
Character,lowSurrogate(int codePoint),static char,Returns the trailing surrogate (a low surrogate code unit) of the surrogate pair representing the specified supplementary character (Unicode code point) in the UTF-16 encoding.
Character,"offsetByCodePoints(char[] a, int start, int count, int index, int codePointOffset)",static int,Returns the index within the given char subarray that is offset from the given index by codePointOffset code points.
Character,"offsetByCodePoints(CharSequence seq, int index, int codePointOffset)",static int,Returns the index within the given char sequence that is offset from the given index by codePointOffset code points.
Character,reverseBytes(char ch),static char,Returns the value obtained by reversing the order of the bytes in the specified char value.
Character,toChars(int codePoint),static char[],Converts the specified character (Unicode code point) to its UTF-16 representation stored in a char array.
Character,"toChars(int codePoint, char[] dst, int dstIndex)",static int,Converts the specified character (Unicode code point) to its UTF-16 representation.
Character,"toCodePoint(char high, char low)",static int,Converts the specified surrogate pair to its supplementary code point value.
Character,toLowerCase(char ch),static char,Converts the character argument to lowercase using case mapping information from the UnicodeData file.
Character,toLowerCase(int codePoint),static int,Converts the character (Unicode code point) argument to lowercase using case mapping information from the UnicodeData file.
Character,toString(),String,Returns a String object representing this Character's value.
Character,toString(char c),static String,Returns a String object representing the specified char.
Character,toTitleCase(char ch),static char,Converts the character argument to titlecase using case mapping information from the UnicodeData file.
Character,toTitleCase(int codePoint),static int,Converts the character (Unicode code point) argument to titlecase using case mapping information from the UnicodeData file.
Character,toUpperCase(char ch),static char,Converts the character argument to uppercase using case mapping information from the UnicodeData file.
Character,toUpperCase(int codePoint),static int,Converts the character (Unicode code point) argument to uppercase using case mapping information from the UnicodeData file.
Character,valueOf(char c),static Character,Returns a Character instance representing the specified char value.
Character.Subset,equals(Object obj),boolean,Compares two Subset objects for equality.
Character.Subset,hashCode(),int,Returns the standard hash code as defined by the Object.hashCode() method.
Character.Subset,toString(),String,Returns the name of this subset.
Character.UnicodeBlock,forName(String blockName),static Character.UnicodeBlock,Returns the UnicodeBlock with the given name.
Character.UnicodeBlock,of(char c),static Character.UnicodeBlock,"Returns the object representing the Unicode block containing the given character, or null if the character is not a member of a defined block."
Character.UnicodeBlock,of(int codePoint),static Character.UnicodeBlock,"Returns the object representing the Unicode block containing the given character (Unicode code point), or null if the character is not a member of a defined block."
Class,asSubclass(Class<U> clazz),<U> Class<? extends U>,Casts this Class object to represent a subclass of the class represented by the specified class object.
Class,cast(Object obj),T,Casts an object to the class or interface represented by this Class object.
Class,desiredAssertionStatus(),boolean,Returns the assertion status that would be assigned to this class if it were to be initialized at the time this method is invoked.
Class,forName(String className),static Class<?>,Returns the Class object associated with the class or interface with the given string name.
Class,"forName(String name, boolean initialize, ClassLoader loader)",static Class<?>,"Returns the Class object associated with the class or interface with the given string name, using the given class loader."
Class,getAnnotatedInterfaces(),AnnotatedType[],Returns an array of AnnotatedType objects that represent the use of types to specify superinterfaces of the entity represented by this Class object.
Class,getAnnotatedSuperclass(),AnnotatedType,Returns an AnnotatedType object that represents the use of a type to specify the superclass of the entity represented by this Class object.
Class,getAnnotation(Class<A> annotationClass),<A extends Annotation>A,"Returns this element's annotation for the specified type if such an annotation is present, else null."
Class,getAnnotations(),Annotation[],Returns annotations that are present on this element.
Class,getAnnotationsByType(Class<A> annotationClass),<A extends Annotation>A[],Returns annotations that are associated with this element.
Class,getCanonicalName(),String,Returns the canonical name of the underlying class as defined by the Java Language Specification.
Class,getClasses(),Class<?>[],Returns an array containing Class objects representing all the public classes and interfaces that are members of the class represented by this Class object.
Class,getClassLoader(),ClassLoader,Returns the class loader for the class.
Class,getComponentType(),Class<?>,Returns the Class representing the component type of an array.
Class,getConstructor(Class<?>... parameterTypes),Constructor<T>,Returns a Constructor object that reflects the specified public constructor of the class represented by this Class object.
Class,getConstructors(),Constructor<?>[],Returns an array containing Constructor objects reflecting all the public constructors of the class represented by this Class object.
Class,getDeclaredAnnotation(Class<A> annotationClass),<A extends Annotation>A,"Returns this element's annotation for the specified type if such an annotation is directly present, else null."
Class,getDeclaredAnnotations(),Annotation[],Returns annotations that are directly present on this element.
Class,getDeclaredAnnotationsByType(Class<A> annotationClass),<A extends Annotation>A[],Returns this element's annotation(s) for the specified type if such annotations are either directly present or indirectly present.
Class,getDeclaredClasses(),Class<?>[],Returns an array of Class objects reflecting all the classes and interfaces declared as members of the class represented by this Class object.
Class,getDeclaredConstructor(Class<?>... parameterTypes),Constructor<T>,Returns a Constructor object that reflects the specified constructor of the class or interface represented by this Class object.
Class,getDeclaredConstructors(),Constructor<?>[],Returns an array of Constructor objects reflecting all the constructors declared by the class represented by this Class object.
Class,getDeclaredField(String name),Field,Returns a Field object that reflects the specified declared field of the class or interface represented by this Class object.
Class,getDeclaredFields(),Field[],Returns an array of Field objects reflecting all the fields declared by the class or interface represented by this Class object.
Class,"getDeclaredMethod(String name, Class<?>... parameterTypes)",Method,Returns a Method object that reflects the specified declared method of the class or interface represented by this Class object.
Class,getDeclaredMethods(),Method[],"Returns an array containing Method objects reflecting all the declared methods of the class or interface represented by this Class object, including public, protected, default (package) access, and private methods, but excluding inherited methods."
Class,getDeclaringClass(),Class<?>,"If the class or interface represented by this Class object is a member of another class, returns the Class object representing the class in which it was declared."
Class,getEnclosingClass(),Class<?>,Returns the immediately enclosing class of the underlying class.
Class,getEnclosingConstructor(),Constructor<?>,"If this Class object represents a local or anonymous class within a constructor, returns a Constructor object representing the immediately enclosing constructor of the underlying class."
Class,getEnclosingMethod(),Method,"If this Class object represents a local or anonymous class within a method, returns a Method object representing the immediately enclosing method of the underlying class."
Class,getEnumConstants(),T[],Returns the elements of this enum class or null if this Class object does not represent an enum type.
Class,getField(String name),Field,Returns a Field object that reflects the specified public member field of the class or interface represented by this Class object.
Class,getFields(),Field[],Returns an array containing Field objects reflecting all the accessible public fields of the class or interface represented by this Class object.
Class,getGenericInterfaces(),Type[],Returns the Types representing the interfaces directly implemented by the class or interface represented by this object.
Class,getGenericSuperclass(),Type,"Returns the Type representing the direct superclass of the entity (class, interface, primitive type or void) represented by this Class."
Class,getInterfaces(),Class<?>[],Determines the interfaces implemented by the class or interface represented by this object.
Class,"getMethod(String name, Class<?>... parameterTypes)",Method,Returns a Method object that reflects the specified public member method of the class or interface represented by this Class object.
Class,getMethods(),Method[],"Returns an array containing Method objects reflecting all the public methods of the class or interface represented by this Class object, including those declared by the class or interface and those inherited from superclasses and superinterfaces."
Class,getModifiers(),int,"Returns the Java language modifiers for this class or interface, encoded in an integer."
Class,getName(),String,"Returns the name of the entity (class, interface, array class, primitive type, or void) represented by this Class object, as a String."
Class,getPackage(),Package,Gets the package for this class.
Class,getProtectionDomain(),ProtectionDomain,Returns the ProtectionDomain of this class.
Class,getResource(String name),URL,Finds a resource with a given name.
Class,getResourceAsStream(String name),InputStream,Finds a resource with a given name.
Class,getSigners(),Object[],Gets the signers of this class.
Class,getSimpleName(),String,Returns the simple name of the underlying class as given in the source code.
Class,getSuperclass(),Class<? super T>,"Returns the Class representing the superclass of the entity (class, interface, primitive type or void) represented by this Class."
Class,getTypeName(),String,Return an informative string for the name of this type.
Class,getTypeParameters(),TypeVariable<Class<T>>[],"Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order."
Class,isAnnotation(),boolean,Returns true if this Class object represents an annotation type.
Class,isAnnotationPresent(Class<? extends Annotation> annotationClass),boolean,"Returns true if an annotation for the specified type is present on this element, else false."
Class,isAnonymousClass(),boolean,Returns true if and only if the underlying class is an anonymous class.
Class,isArray(),boolean,Determines if this Class object represents an array class.
Class,isAssignableFrom(Class<?> cls),boolean,"Determines if the class or interface represented by this Class object is either the same as, or is a superclass or superinterface of, the class or interface represented by the specified Class parameter."
Class,isEnum(),boolean,Returns true if and only if this class was declared as an enum in the source code.
Class,isInstance(Object obj),boolean,Determines if the specified Object is assignment-compatible with the object represented by this Class.
Class,isInterface(),boolean,Determines if the specified Class object represents an interface type.
Class,isLocalClass(),boolean,Returns true if and only if the underlying class is a local class.
Class,isMemberClass(),boolean,Returns true if and only if the underlying class is a member class.
Class,isPrimitive(),boolean,Determines if the specified Class object represents a primitive type.
Class,isSynthetic(),boolean,Returns true if this class is a synthetic class; returns false otherwise.
Class,newInstance(),T,Creates a new instance of the class represented by this Class object.
Class,toGenericString(),String,"Returns a string describing this Class, including information about modifiers and type parameters."
Class,toString(),String,Converts the object to a string.
ClassLoader,clearAssertionStatus(),void,Sets the default assertion status for this class loader to false and discards any package defaults or class assertion status settings associated with the class loader.
ClassLoader,"defineClass(byte[] b, int off, int len)",protected Class<?>,"Deprecated. Replaced by defineClass(String, byte[], int, int)"
ClassLoader,"defineClass(String name, byte[] b, int off, int len)",protected Class<?>,Converts an array of bytes into an instance of class Class.
ClassLoader,"defineClass(String name, byte[] b, int off, int len, ProtectionDomain protectionDomain)",protected Class<?>,"Converts an array of bytes into an instance of class Class, with an optional ProtectionDomain."
ClassLoader,"defineClass(String name, ByteBuffer b, ProtectionDomain protectionDomain)",protected Class<?>,"Converts a ByteBuffer into an instance of class Class, with an optional ProtectionDomain."
ClassLoader,"definePackage(String name, String specTitle, String specVersion, String specVendor, String implTitle, String implVersion, String implVendor, URL sealBase)",protected Package,Defines a package by name in this ClassLoader.
ClassLoader,findClass(String name),protected Class<?>,Finds the class with the specified binary name.
ClassLoader,findLibrary(String libname),protected String,Returns the absolute path name of a native library.
ClassLoader,findLoadedClass(String name),protected Class<?>,Returns the class with the given binary name if this loader has been recorded by the Java virtual machine as an initiating loader of a class with that binary name.
ClassLoader,findResource(String name),protected URL,Finds the resource with the given name.
ClassLoader,findResources(String name),protected Enumeration<URL>,Returns an enumeration of URL objects representing all the resources with the given name.
ClassLoader,findSystemClass(String name),protected Class<?>,"Finds a class with the specified binary name, loading it if necessary."
ClassLoader,getClassLoadingLock(String className),protected Object,Returns the lock object for class loading operations.
ClassLoader,getPackage(String name),protected Package,Returns a Package that has been defined by this class loader or any of its ancestors.
ClassLoader,getPackages(),protected Package[],Returns all of the Packages defined by this class loader and its ancestors.
ClassLoader,getParent(),ClassLoader,Returns the parent class loader for delegation.
ClassLoader,getResource(String name),URL,Finds the resource with the given name.
ClassLoader,getResourceAsStream(String name),InputStream,Returns an input stream for reading the specified resource.
ClassLoader,getResources(String name),Enumeration<URL>,Finds all the resources with the given name.
ClassLoader,getSystemClassLoader(),static ClassLoader,Returns the system class loader for delegation.
ClassLoader,getSystemResource(String name),static URL,Find a resource of the specified name from the search path used to load classes.
ClassLoader,getSystemResourceAsStream(String name),static InputStream,"Open for reading, a resource of the specified name from the search path used to load classes."
ClassLoader,getSystemResources(String name),static Enumeration<URL>,Finds all resources of the specified name from the search path used to load classes.
ClassLoader,loadClass(String name),Class<?>,Loads the class with the specified binary name.
ClassLoader,"loadClass(String name, boolean resolve)",protected Class<?>,Loads the class with the specified binary name.
ClassLoader,registerAsParallelCapable(),protected static boolean,Registers the caller as parallel capable.
ClassLoader,resolveClass(Class<?> c),protected void,Links the specified class.
ClassLoader,"setClassAssertionStatus(String className, boolean enabled)",void,Sets the desired assertion status for the named top-level class in this class loader and any nested classes contained therein.
ClassLoader,setDefaultAssertionStatus(boolean enabled),void,Sets the default assertion status for this class loader.
ClassLoader,"setPackageAssertionStatus(String packageName, boolean enabled)",void,Sets the package default assertion status for the named package.
ClassLoader,"setSigners(Class<?> c, Object[] signers)",protected void,Sets the signers of a class.
ClassValue,computeValue(Class<?> type),protected abstract T,Computes the given class's derived value for this ClassValue.
ClassValue,get(Class<?> type),T,Returns the value for the given class.
ClassValue,remove(Class<?> type),void,Removes the associated value for the given class.
Compiler,command(Object any),static Object,Examines the argument type and its fields and perform some documented operation.
Compiler,compileClass(Class<?> clazz),static boolean,Compiles the specified class.
Compiler,compileClasses(String string),static boolean,Compiles all classes whose name matches the specified string.
Compiler,disable(),static void,Cause the Compiler to cease operation.
Compiler,enable(),static void,Cause the Compiler to resume operation.
Double,byteValue(),byte,Returns the value of this Double as a byte after a narrowing primitive conversion.
Double,"compare(double d1, double d2)",static int,Compares the two specified double values.
Double,compareTo(Double anotherDouble),int,Compares two Double objects numerically.
Double,doubleToLongBits(double value),static long,"Returns a representation of the specified floating-point value according to the IEEE 754 floating-point ""double format"" bit layout."
Double,doubleToRawLongBits(double value),static long,"Returns a representation of the specified floating-point value according to the IEEE 754 floating-point ""double format"" bit layout, preserving Not-a-Number (NaN) values."
Double,doubleValue(),double,Returns the double value of this Double object.
Double,equals(Object obj),boolean,Compares this object against the specified object.
Double,floatValue(),float,Returns the value of this Double as a float after a narrowing primitive conversion.
Double,hashCode(),int,Returns a hash code for this Double object.
Double,hashCode(double value),static int,Returns a hash code for a double value; compatible with Double.hashCode().
Double,intValue(),int,Returns the value of this Double as an int after a narrowing primitive conversion.
Double,isFinite(double d),static boolean,Returns true if the argument is a finite floating-point value; returns false otherwise (for NaN and infinity arguments).
Double,isInfinite(),boolean,"Returns true if this Double value is infinitely large in magnitude, false otherwise."
Double,isInfinite(double v),static boolean,"Returns true if the specified number is infinitely large in magnitude, false otherwise."
Double,isNaN(),boolean,"Returns true if this Double value is a Not-a-Number (NaN), false otherwise."
Double,isNaN(double v),static boolean,"Returns true if the specified number is a Not-a-Number (NaN) value, false otherwise."
Double,longBitsToDouble(long bits),static double,Returns the double value corresponding to a given bit representation.
Double,longValue(),long,Returns the value of this Double as a long after a narrowing primitive conversion.
Double,"max(double a, double b)",static double,Returns the greater of two double values as if by calling Math.max.
Double,"min(double a, double b)",static double,Returns the smaller of two double values as if by calling Math.min.
Double,parseDouble(String s),static double,"Returns a new double initialized to the value represented by the specified String, as performed by the valueOf method of class Double."
Double,shortValue(),short,Returns the value of this Double as a short after a narrowing primitive conversion.
Double,"sum(double a, double b)",static double,Adds two double values together as per the + operator.
Double,toHexString(double d),static String,Returns a hexadecimal string representation of the double argument.
Double,toString(),String,Returns a string representation of this Double object.
Double,toString(double d),static String,Returns a string representation of the double argument.
Double,valueOf(double d),static Double,Returns a Double instance representing the specified double value.
Double,valueOf(String s),static Double,Returns a Double object holding the double value represented by the argument string s.
Enum,clone(),protected Object,Throws CloneNotSupportedException.
Enum,compareTo(E o),int,Compares this enum with the specified object for order.
Enum,equals(Object other),boolean,Returns true if the specified object is equal to this enum constant.
Enum,finalize(),protected void,enum classes cannot have finalize methods.
Enum,getDeclaringClass(),Class<E>,Returns the Class object corresponding to this enum constant's enum type.
Enum,hashCode(),int,Returns a hash code for this enum constant.
Enum,name(),String,"Returns the name of this enum constant, exactly as declared in its enum declaration."
Enum,ordinal(),int,"Returns the ordinal of this enumeration constant (its position in its enum declaration, where the initial constant is assigned an ordinal of zero)."
Enum,toString(),String,"Returns the name of this enum constant, as contained in the declaration."
Enum,"valueOf(Class<T> enumType, String name)",static <T extends Enum<T>>T,Returns the enum constant of the specified enum type with the specified name.
Float,byteValue(),byte,Returns the value of this Float as a byte after a narrowing primitive conversion.
Float,"compare(float f1, float f2)",static int,Compares the two specified float values.
Float,compareTo(Float anotherFloat),int,Compares two Float objects numerically.
Float,doubleValue(),double,Returns the value of this Float as a double after a widening primitive conversion.
Float,equals(Object obj),boolean,Compares this object against the specified object.
Float,floatToIntBits(float value),static int,"Returns a representation of the specified floating-point value according to the IEEE 754 floating-point ""single format"" bit layout."
Float,floatToRawIntBits(float value),static int,"Returns a representation of the specified floating-point value according to the IEEE 754 floating-point ""single format"" bit layout, preserving Not-a-Number (NaN) values."
Float,floatValue(),float,Returns the float value of this Float object.
Float,hashCode(),int,Returns a hash code for this Float object.
Float,hashCode(float value),static int,Returns a hash code for a float value; compatible with Float.hashCode().
Float,intBitsToFloat(int bits),static float,Returns the float value corresponding to a given bit representation.
Float,intValue(),int,Returns the value of this Float as an int after a narrowing primitive conversion.
Float,isFinite(float f),static boolean,Returns true if the argument is a finite floating-point value; returns false otherwise (for NaN and infinity arguments).
Float,isInfinite(),boolean,"Returns true if this Float value is infinitely large in magnitude, false otherwise."
Float,isInfinite(float v),static boolean,"Returns true if the specified number is infinitely large in magnitude, false otherwise."
Float,isNaN(),boolean,"Returns true if this Float value is a Not-a-Number (NaN), false otherwise."
Float,isNaN(float v),static boolean,"Returns true if the specified number is a Not-a-Number (NaN) value, false otherwise."
Float,longValue(),long,Returns value of this Float as a long after a narrowing primitive conversion.
Float,"max(float a, float b)",static float,Returns the greater of two float values as if by calling Math.max.
Float,"min(float a, float b)",static float,Returns the smaller of two float values as if by calling Math.min.
Float,parseFloat(String s),static float,"Returns a new float initialized to the value represented by the specified String, as performed by the valueOf method of class Float."
Float,shortValue(),short,Returns the value of this Float as a short after a narrowing primitive conversion.
Float,"sum(float a, float b)",static float,Adds two float values together as per the + operator.
Float,toHexString(float f),static String,Returns a hexadecimal string representation of the float argument.
Float,toString(),String,Returns a string representation of this Float object.
Float,toString(float f),static String,Returns a string representation of the float argument.
Float,valueOf(float f),static Float,Returns a Float instance representing the specified float value.
Float,valueOf(String s),static Float,Returns a Float object holding the float value represented by the argument string s.
InheritableThreadLocal,childValue(T parentValue),protected T,Computes the child's initial value for this inheritable thread-local variable as a function of the parent's value at the time the child thread is created.
Integer,bitCount(int i),static int,Returns the number of one-bits in the two's complement binary representation of the specified int value.
Integer,byteValue(),byte,Returns the value of this Integer as a byte after a narrowing primitive conversion.
Integer,"compare(int x, int y)",static int,Compares two int values numerically.
Integer,compareTo(Integer anotherInteger),int,Compares two Integer objects numerically.
Integer,"compareUnsigned(int x, int y)",static int,Compares two int values numerically treating the values as unsigned.
Integer,decode(String nm),static Integer,Decodes a String into an Integer.
Integer,"divideUnsigned(int dividend, int divisor)",static int,Returns the unsigned quotient of dividing the first argument by the second where each argument and the result is interpreted as an unsigned value.
Integer,doubleValue(),double,Returns the value of this Integer as a double after a widening primitive conversion.
Integer,equals(Object obj),boolean,Compares this object to the specified object.
Integer,floatValue(),float,Returns the value of this Integer as a float after a widening primitive conversion.
Integer,getInteger(String nm),static Integer,Determines the integer value of the system property with the specified name.
Integer,"getInteger(String nm, int val)",static Integer,Determines the integer value of the system property with the specified name.
Integer,"getInteger(String nm, Integer val)",static Integer,Returns the integer value of the system property with the specified name.
Integer,hashCode(),int,Returns a hash code for this Integer.
Integer,hashCode(int value),static int,Returns a hash code for a int value; compatible with Integer.hashCode().
Integer,highestOneBit(int i),static int,"Returns an int value with at most a single one-bit, in the position of the highest-order (""leftmost"") one-bit in the specified int value."
Integer,intValue(),int,Returns the value of this Integer as an int.
Integer,longValue(),long,Returns the value of this Integer as a long after a widening primitive conversion.
Integer,lowestOneBit(int i),static int,"Returns an int value with at most a single one-bit, in the position of the lowest-order (""rightmost"") one-bit in the specified int value."
Integer,"max(int a, int b)",static int,Returns the greater of two int values as if by calling Math.max.
Integer,"min(int a, int b)",static int,Returns the smaller of two int values as if by calling Math.min.
Integer,numberOfLeadingZeros(int i),static int,"Returns the number of zero bits preceding the highest-order (""leftmost"") one-bit in the two's complement binary representation of the specified int value."
Integer,numberOfTrailingZeros(int i),static int,"Returns the number of zero bits following the lowest-order (""rightmost"") one-bit in the two's complement binary representation of the specified int value."
Integer,parseInt(String s),static int,Parses the string argument as a signed decimal integer.
Integer,"parseInt(String s, int radix)",static int,Parses the string argument as a signed integer in the radix specified by the second argument.
Integer,parseUnsignedInt(String s),static int,Parses the string argument as an unsigned decimal integer.
Integer,"parseUnsignedInt(String s, int radix)",static int,Parses the string argument as an unsigned integer in the radix specified by the second argument.
Integer,"remainderUnsigned(int dividend, int divisor)",static int,Returns the unsigned remainder from dividing the first argument by the second where each argument and the result is interpreted as an unsigned value.
Integer,reverse(int i),static int,Returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified int value.
Integer,reverseBytes(int i),static int,Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified int value.
Integer,"rotateLeft(int i, int distance)",static int,Returns the value obtained by rotating the two's complement binary representation of the specified int value left by the specified number of bits.
Integer,"rotateRight(int i, int distance)",static int,Returns the value obtained by rotating the two's complement binary representation of the specified int value right by the specified number of bits.
Integer,shortValue(),short,Returns the value of this Integer as a short after a narrowing primitive conversion.
Integer,signum(int i),static int,Returns the signum function of the specified int value.
Integer,"sum(int a, int b)",static int,Adds two integers together as per the + operator.
Integer,toBinaryString(int i),static String,Returns a string representation of the integer argument as an unsigned integer in base 2.
Integer,toHexString(int i),static String,Returns a string representation of the integer argument as an unsigned integer in base 16.
Integer,toOctalString(int i),static String,Returns a string representation of the integer argument as an unsigned integer in base 8.
Integer,toString(),String,Returns a String object representing this Integer's value.
Integer,toString(int i),static String,Returns a String object representing the specified integer.
Integer,"toString(int i, int radix)",static String,Returns a string representation of the first argument in the radix specified by the second argument.
Integer,toUnsignedLong(int x),static long,Converts the argument to a long by an unsigned conversion.
Integer,toUnsignedString(int i),static String,Returns a string representation of the argument as an unsigned decimal value.
Integer,"toUnsignedString(int i, int radix)",static String,Returns a string representation of the first argument as an unsigned integer value in the radix specified by the second argument.
Integer,valueOf(int i),static Integer,Returns an Integer instance representing the specified int value.
Integer,valueOf(String s),static Integer,Returns an Integer object holding the value of the specified String.
Integer,"valueOf(String s, int radix)",static Integer,Returns an Integer object holding the value extracted from the specified String when parsed with the radix given by the second argument.
Long,bitCount(long i),static int,Returns the number of one-bits in the two's complement binary representation of the specified long value.
Long,byteValue(),byte,Returns the value of this Long as a byte after a narrowing primitive conversion.
Long,"compare(long x, long y)",static int,Compares two long values numerically.
Long,compareTo(Long anotherLong),int,Compares two Long objects numerically.
Long,"compareUnsigned(long x, long y)",static int,Compares two long values numerically treating the values as unsigned.
Long,decode(String nm),static Long,Decodes a String into a Long.
Long,"divideUnsigned(long dividend, long divisor)",static long,Returns the unsigned quotient of dividing the first argument by the second where each argument and the result is interpreted as an unsigned value.
Long,doubleValue(),double,Returns the value of this Long as a double after a widening primitive conversion.
Long,equals(Object obj),boolean,Compares this object to the specified object.
Long,floatValue(),float,Returns the value of this Long as a float after a widening primitive conversion.
Long,getLong(String nm),static Long,Determines the long value of the system property with the specified name.
Long,"getLong(String nm, long val)",static Long,Determines the long value of the system property with the specified name.
Long,"getLong(String nm, Long val)",static Long,Returns the long value of the system property with the specified name.
Long,hashCode(),int,Returns a hash code for this Long.
Long,hashCode(long value),static int,Returns a hash code for a long value; compatible with Long.hashCode().
Long,highestOneBit(long i),static long,"Returns a long value with at most a single one-bit, in the position of the highest-order (""leftmost"") one-bit in the specified long value."
Long,intValue(),int,Returns the value of this Long as an int after a narrowing primitive conversion.
Long,longValue(),long,Returns the value of this Long as a long value.
Long,lowestOneBit(long i),static long,"Returns a long value with at most a single one-bit, in the position of the lowest-order (""rightmost"") one-bit in the specified long value."
Long,"max(long a, long b)",static long,Returns the greater of two long values as if by calling Math.max.
Long,"min(long a, long b)",static long,Returns the smaller of two long values as if by calling Math.min.
Long,numberOfLeadingZeros(long i),static int,"Returns the number of zero bits preceding the highest-order (""leftmost"") one-bit in the two's complement binary representation of the specified long value."
Long,numberOfTrailingZeros(long i),static int,"Returns the number of zero bits following the lowest-order (""rightmost"") one-bit in the two's complement binary representation of the specified long value."
Long,parseLong(String s),static long,Parses the string argument as a signed decimal long.
Long,"parseLong(String s, int radix)",static long,Parses the string argument as a signed long in the radix specified by the second argument.
Long,parseUnsignedLong(String s),static long,Parses the string argument as an unsigned decimal long.
Long,"parseUnsignedLong(String s, int radix)",static long,Parses the string argument as an unsigned long in the radix specified by the second argument.
Long,"remainderUnsigned(long dividend, long divisor)",static long,Returns the unsigned remainder from dividing the first argument by the second where each argument and the result is interpreted as an unsigned value.
Long,reverse(long i),static long,Returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified long value.
Long,reverseBytes(long i),static long,Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified long value.
Long,"rotateLeft(long i, int distance)",static long,Returns the value obtained by rotating the two's complement binary representation of the specified long value left by the specified number of bits.
Long,"rotateRight(long i, int distance)",static long,Returns the value obtained by rotating the two's complement binary representation of the specified long value right by the specified number of bits.
Long,shortValue(),short,Returns the value of this Long as a short after a narrowing primitive conversion.
Long,signum(long i),static int,Returns the signum function of the specified long value.
Long,"sum(long a, long b)",static long,Adds two long values together as per the + operator.
Long,toBinaryString(long i),static String,Returns a string representation of the long argument as an unsigned integer in base 2.
Long,toHexString(long i),static String,Returns a string representation of the long argument as an unsigned integer in base 16.
Long,toOctalString(long i),static String,Returns a string representation of the long argument as an unsigned integer in base 8.
Long,toString(),String,Returns a String object representing this Long's value.
Long,toString(long i),static String,Returns a String object representing the specified long.
Long,"toString(long i, int radix)",static String,Returns a string representation of the first argument in the radix specified by the second argument.
Long,toUnsignedString(long i),static String,Returns a string representation of the argument as an unsigned decimal value.
Long,"toUnsignedString(long i, int radix)",static String,Returns a string representation of the first argument as an unsigned integer value in the radix specified by the second argument.
Long,valueOf(long l),static Long,Returns a Long instance representing the specified long value.
Long,valueOf(String s),static Long,Returns a Long object holding the value of the specified String.
Long,"valueOf(String s, int radix)",static Long,Returns a Long object holding the value extracted from the specified String when parsed with the radix given by the second argument.
Math,abs(double a),static double,Returns the absolute value of a double value.
Math,abs(float a),static float,Returns the absolute value of a float value.
Math,abs(int a),static int,Returns the absolute value of an int value.
Math,abs(long a),static long,Returns the absolute value of a long value.
Math,acos(double a),static double,Returns the arc cosine of a value; the returned angle is in the range 0.0 through pi.
Math,"addExact(int x, int y)",static int,"Returns the sum of its arguments, throwing an exception if the result overflows an int."
Math,"addExact(long x, long y)",static long,"Returns the sum of its arguments, throwing an exception if the result overflows a long."
Math,asin(double a),static double,Returns the arc sine of a value; the returned angle is in the range -pi/2 through pi/2.
Math,atan(double a),static double,Returns the arc tangent of a value; the returned angle is in the range -pi/2 through pi/2.
Math,"atan2(double y, double x)",static double,"Returns the angle theta from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta)."
Math,cbrt(double a),static double,Returns the cube root of a double value.
Math,ceil(double a),static double,Returns the smallest (closest to negative infinity) double value that is greater than or equal to the argument and is equal to a mathematical integer.
Math,"copySign(double magnitude, double sign)",static double,Returns the first floating-point argument with the sign of the second floating-point argument.
Math,"copySign(float magnitude, float sign)",static float,Returns the first floating-point argument with the sign of the second floating-point argument.
Math,cos(double a),static double,Returns the trigonometric cosine of an angle.
Math,cosh(double x),static double,Returns the hyperbolic cosine of a double value.
Math,decrementExact(int a),static int,"Returns the argument decremented by one, throwing an exception if the result overflows an int."
Math,decrementExact(long a),static long,"Returns the argument decremented by one, throwing an exception if the result overflows a long."
Math,exp(double a),static double,Returns Euler's number e raised to the power of a double value.
Math,expm1(double x),static double,Returns ex -1.
Math,floor(double a),static double,Returns the largest (closest to positive infinity) double value that is less than or equal to the argument and is equal to a mathematical integer.
Math,"floorDiv(int x, int y)",static int,Returns the largest (closest to positive infinity) int value that is less than or equal to the algebraic quotient.
Math,"floorDiv(long x, long y)",static long,Returns the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient.
Math,"floorMod(int x, int y)",static int,Returns the floor modulus of the int arguments.
Math,"floorMod(long x, long y)",static long,Returns the floor modulus of the long arguments.
Math,getExponent(double d),static int,Returns the unbiased exponent used in the representation of a double.
Math,getExponent(float f),static int,Returns the unbiased exponent used in the representation of a float.
Math,"hypot(double x, double y)",static double,Returns sqrt(x2 +y2) without intermediate overflow or underflow.
Math,"IEEEremainder(double f1, double f2)",static double,Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard.
Math,incrementExact(int a),static int,"Returns the argument incremented by one, throwing an exception if the result overflows an int."
Math,incrementExact(long a),static long,"Returns the argument incremented by one, throwing an exception if the result overflows a long."
Math,log(double a),static double,Returns the natural logarithm (base e) of a double value.
Math,log10(double a),static double,Returns the base 10 logarithm of a double value.
Math,log1p(double x),static double,Returns the natural logarithm of the sum of the argument and 1.
Math,"max(double a, double b)",static double,Returns the greater of two double values.
Math,"max(float a, float b)",static float,Returns the greater of two float values.
Math,"max(int a, int b)",static int,Returns the greater of two int values.
Math,"max(long a, long b)",static long,Returns the greater of two long values.
Math,"min(double a, double b)",static double,Returns the smaller of two double values.
Math,"min(float a, float b)",static float,Returns the smaller of two float values.
Math,"min(int a, int b)",static int,Returns the smaller of two int values.
Math,"min(long a, long b)",static long,Returns the smaller of two long values.
Math,"multiplyExact(int x, int y)",static int,"Returns the product of the arguments, throwing an exception if the result overflows an int."
Math,"multiplyExact(long x, long y)",static long,"Returns the product of the arguments, throwing an exception if the result overflows a long."
Math,negateExact(int a),static int,"Returns the negation of the argument, throwing an exception if the result overflows an int."
Math,negateExact(long a),static long,"Returns the negation of the argument, throwing an exception if the result overflows a long."
Math,"nextAfter(double start, double direction)",static double,Returns the floating-point number adjacent to the first argument in the direction of the second argument.
Math,"nextAfter(float start, double direction)",static float,Returns the floating-point number adjacent to the first argument in the direction of the second argument.
Math,nextDown(double d),static double,Returns the floating-point value adjacent to d in the direction of negative infinity.
Math,nextDown(float f),static float,Returns the floating-point value adjacent to f in the direction of negative infinity.
Math,nextUp(double d),static double,Returns the floating-point value adjacent to d in the direction of positive infinity.
Math,nextUp(float f),static float,Returns the floating-point value adjacent to f in the direction of positive infinity.
Math,"pow(double a, double b)",static double,Returns the value of the first argument raised to the power of the second argument.
Math,random(),static double,"Returns a double value with a positive sign, greater than or equal to 0.0 and less than 1.0."
Math,rint(double a),static double,Returns the double value that is closest in value to the argument and is equal to a mathematical integer.
Math,round(double a),static long,"Returns the closest long to the argument, with ties rounding to positive infinity."
Math,round(float a),static int,"Returns the closest int to the argument, with ties rounding to positive infinity."
Math,"scalb(double d, int scaleFactor)",static double,Returns d × 2scaleFactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the double value set.
Math,"scalb(float f, int scaleFactor)",static float,Returns f × 2scaleFactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the float value set.
Math,signum(double d),static double,"Returns the signum function of the argument; zero if the argument is zero, 1.0 if the argument is greater than zero, -1.0 if the argument is less than zero."
Math,signum(float f),static float,"Returns the signum function of the argument; zero if the argument is zero, 1.0f if the argument is greater than zero, -1.0f if the argument is less than zero."
Math,sin(double a),static double,Returns the trigonometric sine of an angle.
Math,sinh(double x),static double,Returns the hyperbolic sine of a double value.
Math,sqrt(double a),static double,Returns the correctly rounded positive square root of a double value.
Math,"subtractExact(int x, int y)",static int,"Returns the difference of the arguments, throwing an exception if the result overflows an int."
Math,"subtractExact(long x, long y)",static long,"Returns the difference of the arguments, throwing an exception if the result overflows a long."
Math,tan(double a),static double,Returns the trigonometric tangent of an angle.
Math,tanh(double x),static double,Returns the hyperbolic tangent of a double value.
Math,toDegrees(double angrad),static double,Converts an angle measured in radians to an approximately equivalent angle measured in degrees.
Math,toIntExact(long value),static int,Returns the value of the long argument; throwing an exception if the value overflows an int.
Math,toRadians(double angdeg),static double,Converts an angle measured in degrees to an approximately equivalent angle measured in radians.
Math,ulp(double d),static double,Returns the size of an ulp of the argument.
Math,ulp(float f),static float,Returns the size of an ulp of the argument.
Number,byteValue(),byte,"Returns the value of the specified number as a byte, which may involve rounding or truncation."
Number,doubleValue(),abstract double,"Returns the value of the specified number as a double, which may involve rounding."
Number,floatValue(),abstract float,"Returns the value of the specified number as a float, which may involve rounding."
Number,intValue(),abstract int,"Returns the value of the specified number as an int, which may involve rounding or truncation."
Number,longValue(),abstract long,"Returns the value of the specified number as a long, which may involve rounding or truncation."
Number,shortValue(),short,"Returns the value of the specified number as a short, which may involve rounding or truncation."
Object,clone(),protected Object,Creates and returns a copy of this object.
Object,equals(Object obj),boolean,"Indicates whether some other object is ""equal to"" this one."
Object,finalize(),protected void,Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
Object,getClass(),Class<?>,Returns the runtime class of this Object.
Object,hashCode(),int,Returns a hash code value for the object.
Object,notify(),void,Wakes up a single thread that is waiting on this object's monitor.
Object,notifyAll(),void,Wakes up all threads that are waiting on this object's monitor.
Object,toString(),String,Returns a string representation of the object.
Object,wait(),void,Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
Object,wait(long timeout),void,"Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
Object,"wait(long timeout, int nanos)",void,"Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
Package,getAnnotation(Class<A> annotationClass),<A extends Annotation>A,"Returns this element's annotation for the specified type if such an annotation is present, else null."
Package,getAnnotations(),Annotation[],Returns annotations that are present on this element.
Package,getAnnotationsByType(Class<A> annotationClass),<A extends Annotation>A[],Returns annotations that are associated with this element.
Package,getDeclaredAnnotation(Class<A> annotationClass),<A extends Annotation>A,"Returns this element's annotation for the specified type if such an annotation is directly present, else null."
Package,getDeclaredAnnotations(),Annotation[],Returns annotations that are directly present on this element.
Package,getDeclaredAnnotationsByType(Class<A> annotationClass),<A extends Annotation>A[],Returns this element's annotation(s) for the specified type if such annotations are either directly present or indirectly present.
Package,getImplementationTitle(),String,Return the title of this package.
Package,getImplementationVendor(),String,"Returns the name of the organization, vendor or company that provided this implementation."
Package,getImplementationVersion(),String,Return the version of this implementation.
Package,getName(),String,Return the name of this package.
Package,getPackage(String name),static Package,Find a package by name in the callers ClassLoader instance.
Package,getPackages(),static Package[],Get all the packages currently known for the caller's ClassLoader instance.
Package,getSpecificationTitle(),String,Return the title of the specification that this package implements.
Package,getSpecificationVendor(),String,"Return the name of the organization, vendor, or company that owns and maintains the specification of the classes that implement this package."
Package,getSpecificationVersion(),String,Returns the version number of the specification that this package implements.
Package,hashCode(),int,Return the hash code computed from the package name.
Package,isAnnotationPresent(Class<? extends Annotation> annotationClass),boolean,"Returns true if an annotation for the specified type is present on this element, else false."
Package,isCompatibleWith(String desired),boolean,Compare this package's specification version with a desired version.
Package,isSealed(),boolean,Returns true if this package is sealed.
Package,isSealed(URL url),boolean,Returns true if this package is sealed with respect to the specified code source url.
Package,toString(),String,Returns the string representation of this Package.
Process,destroy(),abstract void,Kills the subprocess.
Process,destroyForcibly(),Process,Kills the subprocess.
Process,exitValue(),abstract int,Returns the exit value for the subprocess.
Process,getErrorStream(),abstract InputStream,Returns the input stream connected to the error output of the subprocess.
Process,getInputStream(),abstract InputStream,Returns the input stream connected to the normal output of the subprocess.
Process,getOutputStream(),abstract OutputStream,Returns the output stream connected to the normal input of the subprocess.
Process,isAlive(),boolean,Tests whether the subprocess represented by this Process is alive.
Process,waitFor(),abstract int,"Causes the current thread to wait, if necessary, until the process represented by this Process object has terminated."
Process,"waitFor(long timeout, TimeUnit unit)",boolean,"Causes the current thread to wait, if necessary, until the subprocess represented by this Process object has terminated, or the specified waiting time elapses."
ProcessBuilder,command(),List<String>,Returns this process builder's operating system program and arguments.
ProcessBuilder,command(List<String> command),ProcessBuilder,Sets this process builder's operating system program and arguments.
ProcessBuilder,command(String... command),ProcessBuilder,Sets this process builder's operating system program and arguments.
ProcessBuilder,directory(),File,Returns this process builder's working directory.
ProcessBuilder,directory(File directory),ProcessBuilder,Sets this process builder's working directory.
ProcessBuilder,environment(),"Map<String,String>",Returns a string map view of this process builder's environment.
ProcessBuilder,inheritIO(),ProcessBuilder,Sets the source and destination for subprocess standard I/O to be the same as those of the current Java process.
ProcessBuilder,redirectError(),ProcessBuilder.Redirect,Returns this process builder's standard error destination.
ProcessBuilder,redirectError(File file),ProcessBuilder,Sets this process builder's standard error destination to a file.
ProcessBuilder,redirectError(ProcessBuilder.Redirect destination),ProcessBuilder,Sets this process builder's standard error destination.
ProcessBuilder,redirectErrorStream(),boolean,Tells whether this process builder merges standard error and standard output.
ProcessBuilder,redirectErrorStream(boolean redirectErrorStream),ProcessBuilder,Sets this process builder's redirectErrorStream property.
ProcessBuilder,redirectInput(),ProcessBuilder.Redirect,Returns this process builder's standard input source.
ProcessBuilder,redirectInput(File file),ProcessBuilder,Sets this process builder's standard input source to a file.
ProcessBuilder,redirectInput(ProcessBuilder.Redirect source),ProcessBuilder,Sets this process builder's standard input source.
ProcessBuilder,redirectOutput(),ProcessBuilder.Redirect,Returns this process builder's standard output destination.
ProcessBuilder,redirectOutput(File file),ProcessBuilder,Sets this process builder's standard output destination to a file.
ProcessBuilder,redirectOutput(ProcessBuilder.Redirect destination),ProcessBuilder,Sets this process builder's standard output destination.
ProcessBuilder,start(),Process,Starts a new process using the attributes of this process builder.
ProcessBuilder.Redirect,appendTo(File file),static ProcessBuilder.Redirect,Returns a redirect to append to the specified file.
ProcessBuilder.Redirect,equals(Object obj),boolean,Compares the specified object with this Redirect for equality.
ProcessBuilder.Redirect,file(),File,"Returns the File source or destination associated with this redirect, or null if there is no such file."
ProcessBuilder.Redirect,from(File file),static ProcessBuilder.Redirect,Returns a redirect to read from the specified file.
ProcessBuilder.Redirect,hashCode(),int,Returns a hash code value for this Redirect.
ProcessBuilder.Redirect,to(File file),static ProcessBuilder.Redirect,Returns a redirect to write to the specified file.
ProcessBuilder.Redirect,type(),abstract ProcessBuilder.Redirect.Type,Returns the type of this Redirect.
Runtime,addShutdownHook(Thread hook),void,Registers a new virtual-machine shutdown hook.
Runtime,availableProcessors(),int,Returns the number of processors available to the Java virtual machine.
Runtime,exec(String command),Process,Executes the specified string command in a separate process.
Runtime,exec(String[] cmdarray),Process,Executes the specified command and arguments in a separate process.
Runtime,"exec(String[] cmdarray, String[] envp)",Process,Executes the specified command and arguments in a separate process with the specified environment.
Runtime,"exec(String[] cmdarray, String[] envp, File dir)",Process,Executes the specified command and arguments in a separate process with the specified environment and working directory.
Runtime,"exec(String command, String[] envp)",Process,Executes the specified string command in a separate process with the specified environment.
Runtime,"exec(String command, String[] envp, File dir)",Process,Executes the specified string command in a separate process with the specified environment and working directory.
Runtime,exit(int status),void,Terminates the currently running Java virtual machine by initiating its shutdown sequence.
Runtime,freeMemory(),long,Returns the amount of free memory in the Java Virtual Machine.
Runtime,gc(),void,Runs the garbage collector.
Runtime,getLocalizedInputStream(InputStream in),InputStream,"Deprecated. As of JDK 1.1, the preferred way to translate a byte stream in the local encoding into a character stream in Unicode is via the InputStreamReader and BufferedReader classes."
Runtime,getLocalizedOutputStream(OutputStream out),OutputStream,"Deprecated. As of JDK 1.1, the preferred way to translate a Unicode character stream into a byte stream in the local encoding is via the OutputStreamWriter, BufferedWriter, and PrintWriter classes."
Runtime,getRuntime(),static Runtime,Returns the runtime object associated with the current Java application.
Runtime,halt(int status),void,Forcibly terminates the currently running Java virtual machine.
Runtime,load(String filename),void,Loads the native library specified by the filename argument.
Runtime,loadLibrary(String libname),void,Loads the native library specified by the libname argument.
Runtime,maxMemory(),long,Returns the maximum amount of memory that the Java virtual machine will attempt to use.
Runtime,removeShutdownHook(Thread hook),boolean,De-registers a previously-registered virtual-machine shutdown hook.
Runtime,runFinalization(),void,Runs the finalization methods of any objects pending finalization.
Runtime,runFinalizersOnExit(boolean value),static void,"Deprecated. This method was originally designed to enable or disable running finalizers on exit. Running finalizers on exit was disabled by default. If enabled, then the finalizers of all objects whose finalizers had not yet been automatically invoked were to be run before the Java runtime exits. That behavior is inherently unsafe. It may result in finalizers being called on live objects while other threads are concurrently manipulating those objects, resulting in erratic behavior or deadlock."
Runtime,totalMemory(),long,Returns the total amount of memory in the Java virtual machine.
Runtime,traceInstructions(boolean on),void,Enables/Disables tracing of instructions.
Runtime,traceMethodCalls(boolean on),void,Enables/Disables tracing of method calls.
SecurityManager,"checkAccept(String host, int port)",void,Throws a SecurityException if the calling thread is not permitted to accept a socket connection from the specified host and port number.
SecurityManager,checkAccess(Thread t),void,Throws a SecurityException if the calling thread is not allowed to modify the thread argument.
SecurityManager,checkAccess(ThreadGroup g),void,Throws a SecurityException if the calling thread is not allowed to modify the thread group argument.
SecurityManager,checkAwtEventQueueAccess(),void,Deprecated. The dependency on AWTPermission creates an impediment to future modularization of the Java platform. Users of this method should instead invoke checkPermission(java.security.Permission) directly. This method will be changed in a future release to check the permission java.security.AllPermission.
SecurityManager,"checkConnect(String host, int port)",void,Throws a SecurityException if the calling thread is not allowed to open a socket connection to the specified host and port number.
SecurityManager,"checkConnect(String host, int port, Object context)",void,Throws a SecurityException if the specified security context is not allowed to open a socket connection to the specified host and port number.
SecurityManager,checkCreateClassLoader(),void,Throws a SecurityException if the calling thread is not allowed to create a new class loader.
SecurityManager,checkDelete(String file),void,Throws a SecurityException if the calling thread is not allowed to delete the specified file.
SecurityManager,checkExec(String cmd),void,Throws a SecurityException if the calling thread is not allowed to create a subprocess.
SecurityManager,checkExit(int status),void,Throws a SecurityException if the calling thread is not allowed to cause the Java Virtual Machine to halt with the specified status code.
SecurityManager,checkLink(String lib),void,Throws a SecurityException if the calling thread is not allowed to dynamic link the library code specified by the string argument file.
SecurityManager,checkListen(int port),void,Throws a SecurityException if the calling thread is not allowed to wait for a connection request on the specified local port number.
SecurityManager,"checkMemberAccess(Class<?> clazz, int which)",void,Deprecated. This method relies on the caller being at a stack depth of 4 which is error-prone and cannot be enforced by the runtime. Users of this method should instead invoke checkPermission(java.security.Permission) directly. This method will be changed in a future release to check the permission java.security.AllPermission.
SecurityManager,checkMulticast(InetAddress maddr),void,Throws a SecurityException if the calling thread is not allowed to use (join/leave/send/receive) IP multicast.
SecurityManager,"checkMulticast(InetAddress maddr, byte ttl)",void,Deprecated. Use #checkPermission(java.security.Permission) instead
SecurityManager,checkPackageAccess(String pkg),void,Throws a SecurityException if the calling thread is not allowed to access the package specified by the argument.
SecurityManager,checkPackageDefinition(String pkg),void,Throws a SecurityException if the calling thread is not allowed to define classes in the package specified by the argument.
SecurityManager,checkPermission(Permission perm),void,"Throws a SecurityException if the requested access, specified by the given permission, is not permitted based on the security policy currently in effect."
SecurityManager,"checkPermission(Permission perm, Object context)",void,Throws a SecurityException if the specified security context is denied access to the resource specified by the given permission.
SecurityManager,checkPrintJobAccess(),void,Throws a SecurityException if the calling thread is not allowed to initiate a print job request.
SecurityManager,checkPropertiesAccess(),void,Throws a SecurityException if the calling thread is not allowed to access or modify the system properties.
SecurityManager,checkPropertyAccess(String key),void,Throws a SecurityException if the calling thread is not allowed to access the system property with the specified key name.
SecurityManager,checkRead(FileDescriptor fd),void,Throws a SecurityException if the calling thread is not allowed to read from the specified file descriptor.
SecurityManager,checkRead(String file),void,Throws a SecurityException if the calling thread is not allowed to read the file specified by the string argument.
SecurityManager,"checkRead(String file, Object context)",void,Throws a SecurityException if the specified security context is not allowed to read the file specified by the string argument.
SecurityManager,checkSecurityAccess(String target),void,Determines whether the permission with the specified permission target name should be granted or denied.
SecurityManager,checkSetFactory(),void,"Throws a SecurityException if the calling thread is not allowed to set the socket factory used by ServerSocket or Socket, or the stream handler factory used by URL."
SecurityManager,checkSystemClipboardAccess(),void,Deprecated. The dependency on AWTPermission creates an impediment to future modularization of the Java platform. Users of this method should instead invoke checkPermission(java.security.Permission) directly. This method will be changed in a future release to check the permission java.security.AllPermission.
SecurityManager,checkTopLevelWindow(Object window),boolean,Deprecated. The dependency on AWTPermission creates an impediment to future modularization of the Java platform. Users of this method should instead invoke checkPermission(java.security.Permission) directly. This method will be changed in a future release to check the permission java.security.AllPermission.
SecurityManager,checkWrite(FileDescriptor fd),void,Throws a SecurityException if the calling thread is not allowed to write to the specified file descriptor.
SecurityManager,checkWrite(String file),void,Throws a SecurityException if the calling thread is not allowed to write to the file specified by the string argument.
SecurityManager,classDepth(String name),protected int,Deprecated. This type of security checking is not recommended. It is recommended that the checkPermission call be used instead.
SecurityManager,classLoaderDepth(),protected int,Deprecated. This type of security checking is not recommended. It is recommended that the checkPermission call be used instead.
SecurityManager,currentClassLoader(),protected ClassLoader,Deprecated. This type of security checking is not recommended. It is recommended that the checkPermission call be used instead.
SecurityManager,currentLoadedClass(),protected Class<?>,Deprecated. This type of security checking is not recommended. It is recommended that the checkPermission call be used instead.
SecurityManager,getClassContext(),protected Class[],Returns the current execution stack as an array of classes.
SecurityManager,getInCheck(),boolean,Deprecated. This type of security checking is not recommended. It is recommended that the checkPermission call be used instead.
SecurityManager,getSecurityContext(),Object,Creates an object that encapsulates the current execution environment.
SecurityManager,getThreadGroup(),ThreadGroup,Returns the thread group into which to instantiate any new thread being created at the time this is being called.
SecurityManager,inClass(String name),protected boolean,Deprecated. This type of security checking is not recommended. It is recommended that the checkPermission call be used instead.
SecurityManager,inClassLoader(),protected boolean,Deprecated. This type of security checking is not recommended. It is recommended that the checkPermission call be used instead.
Short,byteValue(),byte,Returns the value of this Short as a byte after a narrowing primitive conversion.
Short,"compare(short x, short y)",static int,Compares two short values numerically.
Short,compareTo(Short anotherShort),int,Compares two Short objects numerically.
Short,decode(String nm),static Short,Decodes a String into a Short.
Short,doubleValue(),double,Returns the value of this Short as a double after a widening primitive conversion.
Short,equals(Object obj),boolean,Compares this object to the specified object.
Short,floatValue(),float,Returns the value of this Short as a float after a widening primitive conversion.
Short,hashCode(),int,Returns a hash code for this Short; equal to the result of invoking intValue().
Short,hashCode(short value),static int,Returns a hash code for a short value; compatible with Short.hashCode().
Short,intValue(),int,Returns the value of this Short as an int after a widening primitive conversion.
Short,longValue(),long,Returns the value of this Short as a long after a widening primitive conversion.
Short,parseShort(String s),static short,Parses the string argument as a signed decimal short.
Short,"parseShort(String s, int radix)",static short,Parses the string argument as a signed short in the radix specified by the second argument.
Short,reverseBytes(short i),static short,Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified short value.
Short,shortValue(),short,Returns the value of this Short as a short.
Short,toString(),String,Returns a String object representing this Short's value.
Short,toString(short s),static String,Returns a new String object representing the specified short.
Short,toUnsignedInt(short x),static int,Converts the argument to an int by an unsigned conversion.
Short,toUnsignedLong(short x),static long,Converts the argument to a long by an unsigned conversion.
Short,valueOf(short s),static Short,Returns a Short instance representing the specified short value.
Short,valueOf(String s),static Short,Returns a Short object holding the value given by the specified String.
Short,"valueOf(String s, int radix)",static Short,Returns a Short object holding the value extracted from the specified String when parsed with the radix given by the second argument.
StackTraceElement,equals(Object obj),boolean,Returns true if the specified object is another StackTraceElement instance representing the same execution point as this instance.
StackTraceElement,getClassName(),String,Returns the fully qualified name of the class containing the execution point represented by this stack trace element.
StackTraceElement,getFileName(),String,Returns the name of the source file containing the execution point represented by this stack trace element.
StackTraceElement,getLineNumber(),int,Returns the line number of the source line containing the execution point represented by this stack trace element.
StackTraceElement,getMethodName(),String,Returns the name of the method containing the execution point represented by this stack trace element.
StackTraceElement,hashCode(),int,Returns a hash code value for this stack trace element.
StackTraceElement,isNativeMethod(),boolean,Returns true if the method containing the execution point represented by this stack trace element is a native method.
StackTraceElement,toString(),String,Returns a string representation of this stack trace element.
StrictMath,abs(double a),static double,Returns the absolute value of a double value.
StrictMath,abs(float a),static float,Returns the absolute value of a float value.
StrictMath,abs(int a),static int,Returns the absolute value of an int value.
StrictMath,abs(long a),static long,Returns the absolute value of a long value.
StrictMath,acos(double a),static double,Returns the arc cosine of a value; the returned angle is in the range 0.0 through pi.
StrictMath,"addExact(int x, int y)",static int,"Returns the sum of its arguments, throwing an exception if the result overflows an int."
StrictMath,"addExact(long x, long y)",static long,"Returns the sum of its arguments, throwing an exception if the result overflows a long."
StrictMath,asin(double a),static double,Returns the arc sine of a value; the returned angle is in the range -pi/2 through pi/2.
StrictMath,atan(double a),static double,Returns the arc tangent of a value; the returned angle is in the range -pi/2 through pi/2.
StrictMath,"atan2(double y, double x)",static double,"Returns the angle theta from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta)."
StrictMath,cbrt(double a),static double,Returns the cube root of a double value.
StrictMath,ceil(double a),static double,Returns the smallest (closest to negative infinity) double value that is greater than or equal to the argument and is equal to a mathematical integer.
StrictMath,"copySign(double magnitude, double sign)",static double,Returns the first floating-point argument with the sign of the second floating-point argument.
StrictMath,"copySign(float magnitude, float sign)",static float,Returns the first floating-point argument with the sign of the second floating-point argument.
StrictMath,cos(double a),static double,Returns the trigonometric cosine of an angle.
StrictMath,cosh(double x),static double,Returns the hyperbolic cosine of a double value.
StrictMath,exp(double a),static double,Returns Euler's number e raised to the power of a double value.
StrictMath,expm1(double x),static double,Returns ex -1.
StrictMath,floor(double a),static double,Returns the largest (closest to positive infinity) double value that is less than or equal to the argument and is equal to a mathematical integer.
StrictMath,"floorDiv(int x, int y)",static int,Returns the largest (closest to positive infinity) int value that is less than or equal to the algebraic quotient.
StrictMath,"floorDiv(long x, long y)",static long,Returns the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient.
StrictMath,"floorMod(int x, int y)",static int,Returns the floor modulus of the int arguments.
StrictMath,"floorMod(long x, long y)",static long,Returns the floor modulus of the long arguments.
StrictMath,getExponent(double d),static int,Returns the unbiased exponent used in the representation of a double.
StrictMath,getExponent(float f),static int,Returns the unbiased exponent used in the representation of a float.
StrictMath,"hypot(double x, double y)",static double,Returns sqrt(x2 +y2) without intermediate overflow or underflow.
StrictMath,"IEEEremainder(double f1, double f2)",static double,Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard.
StrictMath,log(double a),static double,Returns the natural logarithm (base e) of a double value.
StrictMath,log10(double a),static double,Returns the base 10 logarithm of a double value.
StrictMath,log1p(double x),static double,Returns the natural logarithm of the sum of the argument and 1.
StrictMath,"max(double a, double b)",static double,Returns the greater of two double values.
StrictMath,"max(float a, float b)",static float,Returns the greater of two float values.
StrictMath,"max(int a, int b)",static int,Returns the greater of two int values.
StrictMath,"max(long a, long b)",static long,Returns the greater of two long values.
StrictMath,"min(double a, double b)",static double,Returns the smaller of two double values.
StrictMath,"min(float a, float b)",static float,Returns the smaller of two float values.
StrictMath,"min(int a, int b)",static int,Returns the smaller of two int values.
StrictMath,"min(long a, long b)",static long,Returns the smaller of two long values.
StrictMath,"multiplyExact(int x, int y)",static int,"Returns the product of the arguments, throwing an exception if the result overflows an int."
StrictMath,"multiplyExact(long x, long y)",static long,"Returns the product of the arguments, throwing an exception if the result overflows a long."
StrictMath,"nextAfter(double start, double direction)",static double,Returns the floating-point number adjacent to the first argument in the direction of the second argument.
StrictMath,"nextAfter(float start, double direction)",static float,Returns the floating-point number adjacent to the first argument in the direction of the second argument.
StrictMath,nextDown(double d),static double,Returns the floating-point value adjacent to d in the direction of negative infinity.
StrictMath,nextDown(float f),static float,Returns the floating-point value adjacent to f in the direction of negative infinity.
StrictMath,nextUp(double d),static double,Returns the floating-point value adjacent to d in the direction of positive infinity.
StrictMath,nextUp(float f),static float,Returns the floating-point value adjacent to f in the direction of positive infinity.
StrictMath,"pow(double a, double b)",static double,Returns the value of the first argument raised to the power of the second argument.
StrictMath,random(),static double,"Returns a double value with a positive sign, greater than or equal to 0.0 and less than 1.0."
StrictMath,rint(double a),static double,Returns the double value that is closest in value to the argument and is equal to a mathematical integer.
StrictMath,round(double a),static long,"Returns the closest long to the argument, with ties rounding to positive infinity."
StrictMath,round(float a),static int,"Returns the closest int to the argument, with ties rounding to positive infinity."
StrictMath,"scalb(double d, int scaleFactor)",static double,Returns d × 2scaleFactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the double value set.
StrictMath,"scalb(float f, int scaleFactor)",static float,Returns f × 2scaleFactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the float value set.
StrictMath,signum(double d),static double,"Returns the signum function of the argument; zero if the argument is zero, 1.0 if the argument is greater than zero, -1.0 if the argument is less than zero."
StrictMath,signum(float f),static float,"Returns the signum function of the argument; zero if the argument is zero, 1.0f if the argument is greater than zero, -1.0f if the argument is less than zero."
StrictMath,sin(double a),static double,Returns the trigonometric sine of an angle.
StrictMath,sinh(double x),static double,Returns the hyperbolic sine of a double value.
StrictMath,sqrt(double a),static double,Returns the correctly rounded positive square root of a double value.
StrictMath,"subtractExact(int x, int y)",static int,"Returns the difference of the arguments, throwing an exception if the result overflows an int."
StrictMath,"subtractExact(long x, long y)",static long,"Returns the difference of the arguments, throwing an exception if the result overflows a long."
StrictMath,tan(double a),static double,Returns the trigonometric tangent of an angle.
StrictMath,tanh(double x),static double,Returns the hyperbolic tangent of a double value.
StrictMath,toDegrees(double angrad),static double,Converts an angle measured in radians to an approximately equivalent angle measured in degrees.
StrictMath,toIntExact(long value),static int,Returns the value of the long argument; throwing an exception if the value overflows an int.
StrictMath,toRadians(double angdeg),static double,Converts an angle measured in degrees to an approximately equivalent angle measured in radians.
StrictMath,ulp(double d),static double,Returns the size of an ulp of the argument.
StrictMath,ulp(float f),static float,Returns the size of an ulp of the argument.
String,charAt(int index),char,Returns the char value at the specified index.
String,codePointAt(int index),int,Returns the character (Unicode code point) at the specified index.
String,codePointBefore(int index),int,Returns the character (Unicode code point) before the specified index.
String,"codePointCount(int beginIndex, int endIndex)",int,Returns the number of Unicode code points in the specified text range of this String.
String,compareTo(String anotherString),int,Compares two strings lexicographically.
String,compareToIgnoreCase(String str),int,"Compares two strings lexicographically, ignoring case differences."
String,concat(String str),String,Concatenates the specified string to the end of this string.
String,contains(CharSequence s),boolean,Returns true if and only if this string contains the specified sequence of char values.
String,contentEquals(CharSequence cs),boolean,Compares this string to the specified CharSequence.
String,contentEquals(StringBuffer sb),boolean,Compares this string to the specified StringBuffer.
String,copyValueOf(char[] data),static String,Equivalent to valueOf(char[]).
String,"copyValueOf(char[] data, int offset, int count)",static String,"Equivalent to valueOf(char[], int, int)."
String,endsWith(String suffix),boolean,Tests if this string ends with the specified suffix.
String,equals(Object anObject),boolean,Compares this string to the specified object.
String,equalsIgnoreCase(String anotherString),boolean,"Compares this String to another String, ignoring case considerations."
String,"format(Locale l, String format, Object... args)",static String,"Returns a formatted string using the specified locale, format string, and arguments."
String,"format(String format, Object... args)",static String,Returns a formatted string using the specified format string and arguments.
String,getBytes(),byte[],"Encodes this String into a sequence of bytes using the platform's default charset, storing the result into a new byte array."
String,getBytes(Charset charset),byte[],"Encodes this String into a sequence of bytes using the given charset, storing the result into a new byte array."
String,"getBytes(int srcBegin, int srcEnd, byte[] dst, int dstBegin)",void,"Deprecated. This method does not properly convert characters into bytes. As of JDK 1.1, the preferred way to do this is via the getBytes() method, which uses the platform's default charset."
String,getBytes(String charsetName),byte[],"Encodes this String into a sequence of bytes using the named charset, storing the result into a new byte array."
String,"getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)",void,Copies characters from this string into the destination character array.
String,hashCode(),int,Returns a hash code for this string.
String,indexOf(int ch),int,Returns the index within this string of the first occurrence of the specified character.
String,"indexOf(int ch, int fromIndex)",int,"Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index."
String,indexOf(String str),int,Returns the index within this string of the first occurrence of the specified substring.
String,"indexOf(String str, int fromIndex)",int,"Returns the index within this string of the first occurrence of the specified substring, starting at the specified index."
String,intern(),String,Returns a canonical representation for the string object.
String,isEmpty(),boolean,"Returns true if, and only if, length() is 0."
String,"join(CharSequence delimiter, CharSequence... elements)",static String,Returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified delimiter.
String,"join(CharSequence delimiter, Iterable<? extends CharSequence> elements)",static String,Returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified delimiter.
String,lastIndexOf(int ch),int,Returns the index within this string of the last occurrence of the specified character.
String,"lastIndexOf(int ch, int fromIndex)",int,"Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index."
String,lastIndexOf(String str),int,Returns the index within this string of the last occurrence of the specified substring.
String,"lastIndexOf(String str, int fromIndex)",int,"Returns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index."
String,length(),int,Returns the length of this string.
String,matches(String regex),boolean,Tells whether or not this string matches the given regular expression.
String,"offsetByCodePoints(int index, int codePointOffset)",int,Returns the index within this String that is offset from the given index by codePointOffset code points.
String,"regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len)",boolean,Tests if two string regions are equal.
String,"regionMatches(int toffset, String other, int ooffset, int len)",boolean,Tests if two string regions are equal.
String,"replace(char oldChar, char newChar)",String,Returns a string resulting from replacing all occurrences of oldChar in this string with newChar.
String,"replace(CharSequence target, CharSequence replacement)",String,Replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence.
String,"replaceAll(String regex, String replacement)",String,Replaces each substring of this string that matches the given regular expression with the given replacement.
String,"replaceFirst(String regex, String replacement)",String,Replaces the first substring of this string that matches the given regular expression with the given replacement.
String,split(String regex),String[],Splits this string around matches of the given regular expression.
String,"split(String regex, int limit)",String[],Splits this string around matches of the given regular expression.
String,startsWith(String prefix),boolean,Tests if this string starts with the specified prefix.
String,"startsWith(String prefix, int toffset)",boolean,Tests if the substring of this string beginning at the specified index starts with the specified prefix.
String,"subSequence(int beginIndex, int endIndex)",CharSequence,Returns a character sequence that is a subsequence of this sequence.
String,substring(int beginIndex),String,Returns a string that is a substring of this string.
String,"substring(int beginIndex, int endIndex)",String,Returns a string that is a substring of this string.
String,toCharArray(),char[],Converts this string to a new character array.
String,toLowerCase(),String,Converts all of the characters in this String to lower case using the rules of the default locale.
String,toLowerCase(Locale locale),String,Converts all of the characters in this String to lower case using the rules of the given Locale.
String,toString(),String,This object (which is already a string!) is itself returned.
String,toUpperCase(),String,Converts all of the characters in this String to upper case using the rules of the default locale.
String,toUpperCase(Locale locale),String,Converts all of the characters in this String to upper case using the rules of the given Locale.
String,trim(),String,"Returns a string whose value is this string, with any leading and trailing whitespace removed."
String,valueOf(boolean b),static String,Returns the string representation of the boolean argument.
String,valueOf(char c),static String,Returns the string representation of the char argument.
String,valueOf(char[] data),static String,Returns the string representation of the char array argument.
String,"valueOf(char[] data, int offset, int count)",static String,Returns the string representation of a specific subarray of the char array argument.
String,valueOf(double d),static String,Returns the string representation of the double argument.
String,valueOf(float f),static String,Returns the string representation of the float argument.
String,valueOf(int i),static String,Returns the string representation of the int argument.
String,valueOf(long l),static String,Returns the string representation of the long argument.
String,valueOf(Object obj),static String,Returns the string representation of the Object argument.
StringBuffer,append(boolean b),StringBuffer,Appends the string representation of the boolean argument to the sequence.
StringBuffer,append(char c),StringBuffer,Appends the string representation of the char argument to this sequence.
StringBuffer,append(char[] str),StringBuffer,Appends the string representation of the char array argument to this sequence.
StringBuffer,"append(char[] str, int offset, int len)",StringBuffer,Appends the string representation of a subarray of the char array argument to this sequence.
StringBuffer,append(CharSequence s),StringBuffer,Appends the specified CharSequence to this sequence.
StringBuffer,"append(CharSequence s, int start, int end)",StringBuffer,Appends a subsequence of the specified CharSequence to this sequence.
StringBuffer,append(double d),StringBuffer,Appends the string representation of the double argument to this sequence.
StringBuffer,append(float f),StringBuffer,Appends the string representation of the float argument to this sequence.
StringBuffer,append(int i),StringBuffer,Appends the string representation of the int argument to this sequence.
StringBuffer,append(long lng),StringBuffer,Appends the string representation of the long argument to this sequence.
StringBuffer,append(Object obj),StringBuffer,Appends the string representation of the Object argument.
StringBuffer,append(String str),StringBuffer,Appends the specified string to this character sequence.
StringBuffer,append(StringBuffer sb),StringBuffer,Appends the specified StringBuffer to this sequence.
StringBuffer,appendCodePoint(int codePoint),StringBuffer,Appends the string representation of the codePoint argument to this sequence.
StringBuffer,capacity(),int,Returns the current capacity.
StringBuffer,charAt(int index),char,Returns the char value in this sequence at the specified index.
StringBuffer,codePointAt(int index),int,Returns the character (Unicode code point) at the specified index.
StringBuffer,codePointBefore(int index),int,Returns the character (Unicode code point) before the specified index.
StringBuffer,"codePointCount(int beginIndex, int endIndex)",int,Returns the number of Unicode code points in the specified text range of this sequence.
StringBuffer,"delete(int start, int end)",StringBuffer,Removes the characters in a substring of this sequence.
StringBuffer,deleteCharAt(int index),StringBuffer,Removes the char at the specified position in this sequence.
StringBuffer,ensureCapacity(int minimumCapacity),void,Ensures that the capacity is at least equal to the specified minimum.
StringBuffer,"getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)",void,Characters are copied from this sequence into the destination character array dst.
StringBuffer,indexOf(String str),int,Returns the index within this string of the first occurrence of the specified substring.
StringBuffer,"indexOf(String str, int fromIndex)",int,"Returns the index within this string of the first occurrence of the specified substring, starting at the specified index."
StringBuffer,"insert(int offset, boolean b)",StringBuffer,Inserts the string representation of the boolean argument into this sequence.
StringBuffer,"insert(int offset, char c)",StringBuffer,Inserts the string representation of the char argument into this sequence.
StringBuffer,"insert(int offset, char[] str)",StringBuffer,Inserts the string representation of the char array argument into this sequence.
StringBuffer,"insert(int index, char[] str, int offset, int len)",StringBuffer,Inserts the string representation of a subarray of the str array argument into this sequence.
StringBuffer,"insert(int dstOffset, CharSequence s)",StringBuffer,Inserts the specified CharSequence into this sequence.
StringBuffer,"insert(int dstOffset, CharSequence s, int start, int end)",StringBuffer,Inserts a subsequence of the specified CharSequence into this sequence.
StringBuffer,"insert(int offset, double d)",StringBuffer,Inserts the string representation of the double argument into this sequence.
StringBuffer,"insert(int offset, float f)",StringBuffer,Inserts the string representation of the float argument into this sequence.
StringBuffer,"insert(int offset, int i)",StringBuffer,Inserts the string representation of the second int argument into this sequence.
StringBuffer,"insert(int offset, long l)",StringBuffer,Inserts the string representation of the long argument into this sequence.
StringBuffer,"insert(int offset, Object obj)",StringBuffer,Inserts the string representation of the Object argument into this character sequence.
StringBuffer,"insert(int offset, String str)",StringBuffer,Inserts the string into this character sequence.
StringBuffer,lastIndexOf(String str),int,Returns the index within this string of the rightmost occurrence of the specified substring.
StringBuffer,"lastIndexOf(String str, int fromIndex)",int,Returns the index within this string of the last occurrence of the specified substring.
StringBuffer,length(),int,Returns the length (character count).
StringBuffer,"offsetByCodePoints(int index, int codePointOffset)",int,Returns the index within this sequence that is offset from the given index by codePointOffset code points.
StringBuffer,"replace(int start, int end, String str)",StringBuffer,Replaces the characters in a substring of this sequence with characters in the specified String.
StringBuffer,reverse(),StringBuffer,Causes this character sequence to be replaced by the reverse of the sequence.
StringBuffer,"setCharAt(int index, char ch)",void,The character at the specified index is set to ch.
StringBuffer,setLength(int newLength),void,Sets the length of the character sequence.
StringBuffer,"subSequence(int start, int end)",CharSequence,Returns a new character sequence that is a subsequence of this sequence.
StringBuffer,substring(int start),String,Returns a new String that contains a subsequence of characters currently contained in this character sequence.
StringBuffer,"substring(int start, int end)",String,Returns a new String that contains a subsequence of characters currently contained in this sequence.
StringBuffer,toString(),String,Returns a string representing the data in this sequence.
StringBuffer,trimToSize(),void,Attempts to reduce storage used for the character sequence.
StringBuilder,append(boolean b),StringBuilder,Appends the string representation of the boolean argument to the sequence.
StringBuilder,append(char c),StringBuilder,Appends the string representation of the char argument to this sequence.
StringBuilder,append(char[] str),StringBuilder,Appends the string representation of the char array argument to this sequence.
StringBuilder,"append(char[] str, int offset, int len)",StringBuilder,Appends the string representation of a subarray of the char array argument to this sequence.
StringBuilder,append(CharSequence s),StringBuilder,Appends the specified character sequence to this Appendable.
StringBuilder,"append(CharSequence s, int start, int end)",StringBuilder,Appends a subsequence of the specified CharSequence to this sequence.
StringBuilder,append(double d),StringBuilder,Appends the string representation of the double argument to this sequence.
StringBuilder,append(float f),StringBuilder,Appends the string representation of the float argument to this sequence.
StringBuilder,append(int i),StringBuilder,Appends the string representation of the int argument to this sequence.
StringBuilder,append(long lng),StringBuilder,Appends the string representation of the long argument to this sequence.
StringBuilder,append(Object obj),StringBuilder,Appends the string representation of the Object argument.
StringBuilder,append(String str),StringBuilder,Appends the specified string to this character sequence.
StringBuilder,append(StringBuffer sb),StringBuilder,Appends the specified StringBuffer to this sequence.
StringBuilder,appendCodePoint(int codePoint),StringBuilder,Appends the string representation of the codePoint argument to this sequence.
StringBuilder,capacity(),int,Returns the current capacity.
StringBuilder,charAt(int index),char,Returns the char value in this sequence at the specified index.
StringBuilder,codePointAt(int index),int,Returns the character (Unicode code point) at the specified index.
StringBuilder,codePointBefore(int index),int,Returns the character (Unicode code point) before the specified index.
StringBuilder,"codePointCount(int beginIndex, int endIndex)",int,Returns the number of Unicode code points in the specified text range of this sequence.
StringBuilder,"delete(int start, int end)",StringBuilder,Removes the characters in a substring of this sequence.
StringBuilder,deleteCharAt(int index),StringBuilder,Removes the char at the specified position in this sequence.
StringBuilder,ensureCapacity(int minimumCapacity),void,Ensures that the capacity is at least equal to the specified minimum.
StringBuilder,"getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)",void,Characters are copied from this sequence into the destination character array dst.
StringBuilder,indexOf(String str),int,Returns the index within this string of the first occurrence of the specified substring.
StringBuilder,"indexOf(String str, int fromIndex)",int,"Returns the index within this string of the first occurrence of the specified substring, starting at the specified index."
StringBuilder,"insert(int offset, boolean b)",StringBuilder,Inserts the string representation of the boolean argument into this sequence.
StringBuilder,"insert(int offset, char c)",StringBuilder,Inserts the string representation of the char argument into this sequence.
StringBuilder,"insert(int offset, char[] str)",StringBuilder,Inserts the string representation of the char array argument into this sequence.
StringBuilder,"insert(int index, char[] str, int offset, int len)",StringBuilder,Inserts the string representation of a subarray of the str array argument into this sequence.
StringBuilder,"insert(int dstOffset, CharSequence s)",StringBuilder,Inserts the specified CharSequence into this sequence.
StringBuilder,"insert(int dstOffset, CharSequence s, int start, int end)",StringBuilder,Inserts a subsequence of the specified CharSequence into this sequence.
StringBuilder,"insert(int offset, double d)",StringBuilder,Inserts the string representation of the double argument into this sequence.
StringBuilder,"insert(int offset, float f)",StringBuilder,Inserts the string representation of the float argument into this sequence.
StringBuilder,"insert(int offset, int i)",StringBuilder,Inserts the string representation of the second int argument into this sequence.
StringBuilder,"insert(int offset, long l)",StringBuilder,Inserts the string representation of the long argument into this sequence.
StringBuilder,"insert(int offset, Object obj)",StringBuilder,Inserts the string representation of the Object argument into this character sequence.
StringBuilder,"insert(int offset, String str)",StringBuilder,Inserts the string into this character sequence.
StringBuilder,lastIndexOf(String str),int,Returns the index within this string of the rightmost occurrence of the specified substring.
StringBuilder,"lastIndexOf(String str, int fromIndex)",int,Returns the index within this string of the last occurrence of the specified substring.
StringBuilder,length(),int,Returns the length (character count).
StringBuilder,"offsetByCodePoints(int index, int codePointOffset)",int,Returns the index within this sequence that is offset from the given index by codePointOffset code points.
StringBuilder,"replace(int start, int end, String str)",StringBuilder,Replaces the characters in a substring of this sequence with characters in the specified String.
StringBuilder,reverse(),StringBuilder,Causes this character sequence to be replaced by the reverse of the sequence.
StringBuilder,"setCharAt(int index, char ch)",void,The character at the specified index is set to ch.
StringBuilder,setLength(int newLength),void,Sets the length of the character sequence.
StringBuilder,"subSequence(int start, int end)",CharSequence,Returns a new character sequence that is a subsequence of this sequence.
StringBuilder,substring(int start),String,Returns a new String that contains a subsequence of characters currently contained in this character sequence.
StringBuilder,"substring(int start, int end)",String,Returns a new String that contains a subsequence of characters currently contained in this sequence.
StringBuilder,toString(),String,Returns a string representing the data in this sequence.
StringBuilder,trimToSize(),void,Attempts to reduce storage used for the character sequence.
System,"arraycopy(Object src, int srcPos, Object dest, int destPos, int length)",static void,"Copies an array from the specified source array, beginning at the specified position, to the specified position of the destination array."
System,clearProperty(String key),static String,Removes the system property indicated by the specified key.
System,console(),static Console,"Returns the unique Console object associated with the current Java virtual machine, if any."
System,currentTimeMillis(),static long,Returns the current time in milliseconds.
System,exit(int status),static void,Terminates the currently running Java Virtual Machine.
System,gc(),static void,Runs the garbage collector.
System,getenv(),"static Map<String,String>",Returns an unmodifiable string map view of the current system environment.
System,getenv(String name),static String,Gets the value of the specified environment variable.
System,getProperties(),static Properties,Determines the current system properties.
System,getProperty(String key),static String,Gets the system property indicated by the specified key.
System,"getProperty(String key, String def)",static String,Gets the system property indicated by the specified key.
System,getSecurityManager(),static SecurityManager,Gets the system security interface.
System,identityHashCode(Object x),static int,"Returns the same hash code for the given object as would be returned by the default method hashCode(), whether or not the given object's class overrides hashCode()."
System,inheritedChannel(),static Channel,Returns the channel inherited from the entity that created this Java virtual machine.
System,lineSeparator(),static String,Returns the system-dependent line separator string.
System,load(String filename),static void,Loads the native library specified by the filename argument.
System,loadLibrary(String libname),static void,Loads the native library specified by the libname argument.
System,mapLibraryName(String libname),static String,Maps a library name into a platform-specific string representing a native library.
System,nanoTime(),static long,"Returns the current value of the running Java Virtual Machine's high-resolution time source, in nanoseconds."
System,runFinalization(),static void,Runs the finalization methods of any objects pending finalization.
System,runFinalizersOnExit(boolean value),static void,"Deprecated. This method was originally designed to enable or disable running finalizers on exit. Running finalizers on exit was disabled by default. If enabled, then the finalizers of all objects whose finalizers had not yet been automatically invoked were to be run before the Java runtime exits. That behavior is inherently unsafe. It may result in finalizers being called on live objects while other threads are concurrently manipulating those objects, resulting in erratic behavior or deadlock."
System,setErr(PrintStream err),static void,"Reassigns the ""standard"" error output stream."
System,setIn(InputStream in),static void,"Reassigns the ""standard"" input stream."
System,setOut(PrintStream out),static void,"Reassigns the ""standard"" output stream."
System,setProperties(Properties props),static void,Sets the system properties to the Properties argument.
System,"setProperty(String key, String value)",static String,Sets the system property indicated by the specified key.
System,setSecurityManager(SecurityManager s),static void,Sets the System security.
Thread,activeCount(),static int,Returns an estimate of the number of active threads in the current thread's thread group and its subgroups.
Thread,checkAccess(),void,Determines if the currently running thread has permission to modify this thread.
Thread,clone(),protected Object,Throws CloneNotSupportedException as a Thread can not be meaningfully cloned.
Thread,countStackFrames(),int,"Deprecated. The definition of this call depends on suspend(), which is deprecated. Further, the results of this call were never well-defined."
Thread,currentThread(),static Thread,Returns a reference to the currently executing thread object.
Thread,destroy(),void,"Deprecated. This method was originally designed to destroy this thread without any cleanup. Any monitors it held would have remained locked. However, the method was never implemented. If if were to be implemented, it would be deadlock-prone in much the manner of suspend(). If the target thread held a lock protecting a critical system resource when it was destroyed, no thread could ever access this resource again. If another thread ever attempted to lock this resource, deadlock would result. Such deadlocks typically manifest themselves as ""frozen"" processes. For more information, see Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?."
Thread,dumpStack(),static void,Prints a stack trace of the current thread to the standard error stream.
Thread,enumerate(Thread[] tarray),static int,Copies into the specified array every active thread in the current thread's thread group and its subgroups.
Thread,getAllStackTraces(),"static Map<Thread,StackTraceElement[]>",Returns a map of stack traces for all live threads.
Thread,getContextClassLoader(),ClassLoader,Returns the context ClassLoader for this Thread.
Thread,getDefaultUncaughtExceptionHandler(),static Thread.UncaughtExceptionHandler,Returns the default handler invoked when a thread abruptly terminates due to an uncaught exception.
Thread,getId(),long,Returns the identifier of this Thread.
Thread,getName(),String,Returns this thread's name.
Thread,getPriority(),int,Returns this thread's priority.
Thread,getStackTrace(),StackTraceElement[],Returns an array of stack trace elements representing the stack dump of this thread.
Thread,getState(),Thread.State,Returns the state of this thread.
Thread,getThreadGroup(),ThreadGroup,Returns the thread group to which this thread belongs.
Thread,getUncaughtExceptionHandler(),Thread.UncaughtExceptionHandler,Returns the handler invoked when this thread abruptly terminates due to an uncaught exception.
Thread,holdsLock(Object obj),static boolean,Returns true if and only if the current thread holds the monitor lock on the specified object.
Thread,interrupt(),void,Interrupts this thread.
Thread,interrupted(),static boolean,Tests whether the current thread has been interrupted.
Thread,isAlive(),boolean,Tests if this thread is alive.
Thread,isDaemon(),boolean,Tests if this thread is a daemon thread.
Thread,isInterrupted(),boolean,Tests whether this thread has been interrupted.
Thread,join(),void,Waits for this thread to die.
Thread,join(long millis),void,Waits at most millis milliseconds for this thread to die.
Thread,"join(long millis, int nanos)",void,Waits at most millis milliseconds plus nanos nanoseconds for this thread to die.
Thread,resume(),void,"Deprecated. This method exists solely for use with suspend(), which has been deprecated because it is deadlock-prone. For more information, see Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?."
Thread,run(),void,"If this thread was constructed using a separate Runnable run object, then that Runnable object's run method is called; otherwise, this method does nothing and returns."
Thread,setContextClassLoader(ClassLoader cl),void,Sets the context ClassLoader for this Thread.
Thread,setDaemon(boolean on),void,Marks this thread as either a daemon thread or a user thread.
Thread,setDefaultUncaughtExceptionHandler(Thread.UncaughtExceptionHandler eh),static void,"Set the default handler invoked when a thread abruptly terminates due to an uncaught exception, and no other handler has been defined for that thread."
Thread,setName(String name),void,Changes the name of this thread to be equal to the argument name.
Thread,setPriority(int newPriority),void,Changes the priority of this thread.
Thread,setUncaughtExceptionHandler(Thread.UncaughtExceptionHandler eh),void,Set the handler invoked when this thread abruptly terminates due to an uncaught exception.
Thread,sleep(long millis),static void,"Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds, subject to the precision and accuracy of system timers and schedulers."
Thread,"sleep(long millis, int nanos)",static void,"Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds plus the specified number of nanoseconds, subject to the precision and accuracy of system timers and schedulers."
Thread,start(),void,Causes this thread to begin execution; the Java Virtual Machine calls the run method of this thread.
Thread,stop(),void,"Deprecated. This method is inherently unsafe. Stopping a thread with Thread.stop causes it to unlock all of the monitors that it has locked (as a natural consequence of the unchecked ThreadDeath exception propagating up the stack). If any of the objects previously protected by these monitors were in an inconsistent state, the damaged objects become visible to other threads, potentially resulting in arbitrary behavior. Many uses of stop should be replaced by code that simply modifies some variable to indicate that the target thread should stop running. The target thread should check this variable regularly, and return from its run method in an orderly fashion if the variable indicates that it is to stop running. If the target thread waits for long periods (on a condition variable, for example), the interrupt method should be used to interrupt the wait. For more information, see Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?."
Thread,stop(Throwable obj),void,"Deprecated. This method was originally designed to force a thread to stop and throw a given Throwable as an exception. It was inherently unsafe (see stop() for details), and furthermore could be used to generate exceptions that the target thread was not prepared to handle. For more information, see Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?."
Thread,suspend(),void,"Deprecated. This method has been deprecated, as it is inherently deadlock-prone. If the target thread holds a lock on the monitor protecting a critical system resource when it is suspended, no thread can access this resource until the target thread is resumed. If the thread that would resume the target thread attempts to lock this monitor prior to calling resume, deadlock results. Such deadlocks typically manifest themselves as ""frozen"" processes. For more information, see Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?."
Thread,toString(),String,"Returns a string representation of this thread, including the thread's name, priority, and thread group."
Thread,yield(),static void,A hint to the scheduler that the current thread is willing to yield its current use of a processor.
ThreadGroup,activeCount(),int,Returns an estimate of the number of active threads in this thread group and its subgroups.
ThreadGroup,activeGroupCount(),int,Returns an estimate of the number of active groups in this thread group and its subgroups.
ThreadGroup,allowThreadSuspension(boolean b),boolean,"Deprecated. The definition of this call depends on suspend(), which is deprecated. Further, the behavior of this call was never specified."
ThreadGroup,checkAccess(),void,Determines if the currently running thread has permission to modify this thread group.
ThreadGroup,destroy(),void,Destroys this thread group and all of its subgroups.
ThreadGroup,enumerate(Thread[] list),int,Copies into the specified array every active thread in this thread group and its subgroups.
ThreadGroup,"enumerate(Thread[] list, boolean recurse)",int,Copies into the specified array every active thread in this thread group.
ThreadGroup,enumerate(ThreadGroup[] list),int,Copies into the specified array references to every active subgroup in this thread group and its subgroups.
ThreadGroup,"enumerate(ThreadGroup[] list, boolean recurse)",int,Copies into the specified array references to every active subgroup in this thread group.
ThreadGroup,getMaxPriority(),int,Returns the maximum priority of this thread group.
ThreadGroup,getName(),String,Returns the name of this thread group.
ThreadGroup,getParent(),ThreadGroup,Returns the parent of this thread group.
ThreadGroup,interrupt(),void,Interrupts all threads in this thread group.
ThreadGroup,isDaemon(),boolean,Tests if this thread group is a daemon thread group.
ThreadGroup,isDestroyed(),boolean,Tests if this thread group has been destroyed.
ThreadGroup,list(),void,Prints information about this thread group to the standard output.
ThreadGroup,parentOf(ThreadGroup g),boolean,Tests if this thread group is either the thread group argument or one of its ancestor thread groups.
ThreadGroup,resume(),void,"Deprecated. This method is used solely in conjunction with Thread.suspend and ThreadGroup.suspend, both of which have been deprecated, as they are inherently deadlock-prone. See Thread.suspend() for details."
ThreadGroup,setDaemon(boolean daemon),void,Changes the daemon status of this thread group.
ThreadGroup,setMaxPriority(int pri),void,Sets the maximum priority of the group.
ThreadGroup,stop(),void,Deprecated. This method is inherently unsafe. See Thread.stop() for details.
ThreadGroup,suspend(),void,Deprecated. This method is inherently deadlock-prone. See Thread.suspend() for details.
ThreadGroup,toString(),String,Returns a string representation of this Thread group.
ThreadGroup,"uncaughtException(Thread t, Throwable e)",void,"Called by the Java Virtual Machine when a thread in this thread group stops because of an uncaught exception, and the thread does not have a specific Thread.UncaughtExceptionHandler installed."
ThreadLocal,get(),T,Returns the value in the current thread's copy of this thread-local variable.
ThreadLocal,initialValue(),protected T,"Returns the current thread's ""initial value"" for this thread-local variable."
ThreadLocal,remove(),void,Removes the current thread's value for this thread-local variable.
ThreadLocal,set(T value),void,Sets the current thread's copy of this thread-local variable to the specified value.
ThreadLocal,withInitial(Supplier<? extends S> supplier),static <S> ThreadLocal<S>,Creates a thread local variable.
Throwable,addSuppressed(Throwable exception),void,Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.
Throwable,fillInStackTrace(),Throwable,Fills in the execution stack trace.
Throwable,getCause(),Throwable,Returns the cause of this throwable or null if the cause is nonexistent or unknown.
Throwable,getLocalizedMessage(),String,Creates a localized description of this throwable.
Throwable,getMessage(),String,Returns the detail message string of this throwable.
Throwable,getStackTrace(),StackTraceElement[],Provides programmatic access to the stack trace information printed by printStackTrace().
Throwable,getSuppressed(),Throwable[],"Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception."
Throwable,initCause(Throwable cause),Throwable,Initializes the cause of this throwable to the specified value.
Throwable,printStackTrace(),void,Prints this throwable and its backtrace to the standard error stream.
Throwable,printStackTrace(PrintStream s),void,Prints this throwable and its backtrace to the specified print stream.
Throwable,printStackTrace(PrintWriter s),void,Prints this throwable and its backtrace to the specified print writer.
Throwable,setStackTrace(StackTraceElement[] stackTrace),void,Sets the stack trace elements that will be returned by getStackTrace() and printed by printStackTrace() and related methods.
Throwable,toString(),String,Returns a short description of this throwable.
