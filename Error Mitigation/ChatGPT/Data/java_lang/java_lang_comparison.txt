Sample: 0 Boolean
----------------------------------------------------------------
1. `boolean booleanValue()`: This method returns the value of this Boolean object as a boolean primitive.
2. `int compareTo(Boolean b)`: This method compares this Boolean object with another Boolean object.
3. `int hashCode()`: This method returns a hash code for this Boolean object.
4. `String toString()`: This method returns a String representation of this Boolean object.
5. `static Boolean valueOf(boolean b)`: This method returns a Boolean instance representing the specified boolean value.
================================================================

Sample: 1 Byte
----------------------------------------------------------------
1. `byte byteValue()`: This method returns the value of this Byte as a byte.
2. `int compareTo(Byte anotherByte)`: This method compares two Byte objects numerically.
3. `static Byte valueOf(byte b)`: This method returns a Byte instance representing the specified byte value.
4. `String toString()`: This method returns a String object representing this Byte's value.
5. `static Byte valueOf(String s)`: This method returns a Byte object holding the value of the specified String.
================================================================

Sample: 2 Character
----------------------------------------------------------------
1. `char charValue()`: This method returns the value of this Character object as a char primitive.
2. `int compareTo(Character anotherChar)`: This method compares two Character objects numerically.
3. `boolean equals(Object obj)`: This method compares this object to the specified object.
4. `int hashCode()`: This method returns a hash code for this Character.
5. `String toString()`: This method returns a String object representing this Character's value.
================================================================

Sample: 3 Character.Subset
----------------------------------------------------------------
1. `boolean equals(Object obj)`: This method compares this subset to the specified object.
2. `int hashCode()`: This method returns a hash code for this subset.
3. `String toString()`: This method returns a string representation of this subset.
4. `int compareTo(Character.Subset o)`: This method compares this subset to another subset.
5. `boolean equals(Object obj)`: This method compares this subset to the specified object for equality.
================================================================

Sample: 4 Character.UnicodeBlock
----------------------------------------------------------------
1. `boolean of(int codePoint)`: This method returns the Unicode block containing the given code point.
2. `String toString()`: This method returns the name of this Unicode block.
3. `static UnicodeBlock forName(String blockName)`: This method returns the Unicode block with the given name.
4. `int getEnd()`: This method returns the end range of the Unicode block.
5. `int getStart()`: This method returns the start range of the Unicode block.
================================================================

Sample: 5 Class
----------------------------------------------------------------
1. `String getName()`: This method returns the name of the entity (class, interface, array class, primitive type, or void) represented by this Class object.
2. `Class<?>[] getInterfaces()`: This method returns an array of Class objects representing the interfaces implemented by the class or interface represented by this object.
3. `Class<?> getSuperclass()`: This method returns the Class representing the superclass of the entity (class, interface, primitive type or void) represented by this Class.
4. `boolean isInterface()`: This method determines if the specified Class object represents an interface type.
5. `Object newInstance()`: This method creates a new instance of the class represented by this Class object.
================================================================

Sample: 6 ClassLoader
----------------------------------------------------------------
1. `Class<?> loadClass(String name)`: This method loads the class with the specified binary name.
2. `Class<?> findClass(String name)`: This method finds the class with the specified binary name.
3. `URL getResource(String name)`: This method finds the resource with the specified name.
4. `Enumeration<URL> getResources(String name)`: This method finds all resources with the specified name.
5. `Class<?> defineClass(String name, byte[] b, int off, int len)`: This method converts an array of bytes into an instance of class Class.
================================================================

Sample: 7 ClassValue
----------------------------------------------------------------
1. `Object get(Class<?> type)`: This method returns the value associated with the given type.
2. `void remove(Class<?> type)`: This method removes the value associated with the given type.
3. `void put(Class<?> type, Object value)`: This method associates the specified value with the specified type.
4. `boolean isPresent(Class<?> type)`: This method returns true if a value is associated with the given type.
5. `void remove(Class<?> type)`: This method removes the value associated with the given type.
================================================================

Sample: 8 Compiler
----------------------------------------------------------------
1. void compileClass(String name): This method compiles the specified class.
2. Object command(Object... command): This method invokes a Java compiler tool with the specified arguments.
3. Object compileClasses(String... classNames): This method compiles the specified classes.
4. void enable(): This method enables the compiler.
5. void disable(): This method disables the compiler.
================================================================

Sample: 9 Double
----------------------------------------------------------------
1. `int compareTo(Double anotherDouble)`: This method compares two Double objects numerically.
2. `boolean isNaN()`: This method returns true if the specified number is a Not-a-Number (NaN) value.
3. `double doubleValue()`: This method returns the double value represented by this Double object.
4. `int intValue()`: This method returns the value of this Double as an int.
5. `String toString()`: This method returns a String representation of the Double object.
================================================================

Sample: 10 Enum
----------------------------------------------------------------
1. `String name()`: This method returns the name of this enumeration constant, exactly as declared in its enum declaration.
2. `int ordinal()`: This method returns the ordinal of this enumeration constant (its position in its enum declaration, where the initial constant is assigned an ordinal of zero).
3. `T valueOf(Class<T> enumType, String name)`: This method returns the enumeration constant of the specified enum type with the specified name.
4. `Enum<E> clone()`: This method creates a shallow copy of this enumeration constant.
5. `int compareTo(E o)`: This method compares this enumeration constant to another object.
================================================================

Sample: 11 Float
----------------------------------------------------------------
1. `int compareTo(Float anotherFloat)`: Compares two Float objects numerically.
2. `boolean isNaN()`: Returns true if this Float value is Not-a-Number (NaN).
3. `int intValue()`: Returns the value of this Float as an int.
4. `float floatValue()`: Returns the value of this Float as a float.
5. `String toString()`: Returns a string representation of this Float object.
================================================================

Sample: 12 InheritableThreadLocal
----------------------------------------------------------------
1. `void set(T value)`: This method sets the value of this thread-local variable for the current thread.
2. `T get()`: This method returns the value of this thread-local variable for the current thread.
3. `void remove()`: This method removes the value of this thread-local variable for the current thread.
4. `void childValue(T parentValue)`: This method returns the value that should be used to initialize the child thread's copy of this thread-local variable.
5. `void initialValue()`: This method returns the initial value for this thread-local variable.
================================================================

Sample: 13 Integer
----------------------------------------------------------------
1. `int intValue()`: This method returns the value of this Integer as an int.
2. `static Integer valueOf(int i)`: This method returns an Integer instance representing the specified int value.
3. `static Integer valueOf(String s)`: This method returns an Integer object holding the value of the specified String.
4. `static Integer valueOf(String s, int radix)`: This method returns an Integer object holding the value extracted from the specified String when parsed with the specified radix.
5. `static Integer decode(String nm)`: This method decodes a String into an Integer.
================================================================

Sample: 14 Long
----------------------------------------------------------------
1. `int compareTo(Long anotherLong)`: This method compares two Long objects numerically.
2. `int intValue()`: This method returns the value of this Long as an int.
3. `long longValue()`: This method returns the value of this Long as a long.
4. `static Long valueOf(long l)`: This method returns a Long instance representing the specified long value.
5. `String toString()`: This method returns a String object representing this Long's value.
================================================================

Sample: 15 Math
----------------------------------------------------------------
1. `double abs(double a)`: Returns the absolute value of a double value.
2. `double pow(double a, double b)`: Returns the value of the first argument raised to the power of the second argument.
3. `double sin(double a)`: Returns the trigonometric sine of an angle.
4. `double cos(double a)`: Returns the trigonometric cosine of an angle.
5. `double sqrt(double a)`: Returns the correctly rounded positive square root of a double value.
================================================================

Sample: 16 Number
----------------------------------------------------------------
1. `int intValue()`: This method returns the numeric value of the Number object as an int.
2. `long longValue()`: This method returns the numeric value of the Number object as a long.
3. `float floatValue()`: This method returns the numeric value of the Number object as a float.
4. `double doubleValue()`: This method returns the numeric value of the Number object as a double.
5. `short shortValue()`: This method returns the numeric value of the Number object as a short.
================================================================

Sample: 17 Object
----------------------------------------------------------------
1. `boolean equals(Object obj)`: This method compares this object with the specified object for equality.
2. `int hashCode()`: This method returns a hash code value for the object.
3. `String toString()`: This method returns a string representation of the object.
4. `Class<?> getClass()`: This method returns the runtime class of this Object.
5. `void notify()`: This method wakes up a single thread that is waiting on this object's monitor.
================================================================

Sample: 18 Package
----------------------------------------------------------------
1. `String getName()`: This method returns the name of the package.
2. `String getImplementationTitle()`: This method returns the title of the implementation of the package.
3. `String getImplementationVersion()`: This method returns the version of the implementation of the package.
4. `String getSpecificationTitle()`: This method returns the title of the specification of the package.
5. `String getSpecificationVersion()`: This method returns the version of the specification of the package.
================================================================

Sample: 19 Process
----------------------------------------------------------------
1. `void destroy()`: This method destroys the process.
2. `int exitValue()`: This method returns the exit value of the process.
3. `InputStream getErrorStream()`: This method returns the input stream connected to the error output of the process.
4. `OutputStream getOutputStream()`: This method returns the output stream connected to the input of the process.
5. `int waitFor()`: This method causes the current thread to wait, if necessary, until the process represented by this Process object has terminated.
================================================================

Sample: 20 ProcessBuilder
----------------------------------------------------------------
1. `ProcessBuilder inheritIO()`: This method returns a new ProcessBuilder with the redirected error stream and output stream of the current process.
2. `Process start()`: This method starts a new process using the attributes of this ProcessBuilder.
3. `List<String> command()`: This method returns the command to be executed by this ProcessBuilder.
4. `ProcessBuilder command(List<String> command)`: This method sets the command to be executed by this ProcessBuilder.
5. `Map<String, String> environment()`: This method returns a copy of the environment of this ProcessBuilder.
================================================================

Sample: 21 ProcessBuilder.Redirect
----------------------------------------------------------------
1. `static Redirect from(File file)`: This method returns a Redirect object with the specified file as the destination.
2. `static Redirect to(File file)`: This method returns a Redirect object with the specified file as the source.
3. `static Redirect appendTo(File file)`: This method returns a Redirect object with the specified file as the destination, appending to the existing content.
4. `static Redirect inherit()`: This method returns a Redirect object that uses the standard input, output, or error streams of the current Java process.
5. `static Redirect discar()`: This method returns a Redirect object that discards the input or output.
================================================================

Sample: 22 Runtime
----------------------------------------------------------------
1. `Runtime getRuntime()`: This method returns the runtime object associated with the current Java application.
2. `void exit(int status)`: This method terminates the currently running Java virtual machine with the specified status code.
3. `Process exec(String command)`: This method executes the specified command in a separate process.
4. `long freeMemory()`: This method returns the amount of free memory in the Java Virtual Machine.
5. `void gc()`: This method requests the Java Virtual Machine to run the garbage collector.
================================================================

Sample: 23 RuntimePermission
----------------------------------------------------------------
1. `void checkPermission(Permission perm)`: This method checks if the specified permission is allowed.
2. `void checkPermission(Permission perm, Object context)`: This method checks if the specified permission is allowed in the given context.
3. `void checkPermission(String permission)`: This method checks if the specified permission is allowed.
4. `void checkPermission(String permission, Object context)`: This method checks if the specified permission is allowed in the given context.
5. `boolean implies(Permission permission)`: This method checks if this permission object implies the specified permission.
================================================================

Sample: 24 SecurityManager
----------------------------------------------------------------
1. `void checkPermission(Permission perm)`: This method checks the permission required by the specified permission object.
2. `void checkCreateClassLoader()`: This method checks if the calling thread is allowed to create a class loader.
3. `void checkExit(int status)`: This method checks if the calling thread is allowed to terminate the currently running Java virtual machine with the specified status code.
4. `void checkRead(String file)`: This method checks if the calling thread is allowed to read the specified file.
5. `void checkWrite(FileDescriptor fd)`: This method checks if the calling thread is allowed to write to the specified file descriptor.
================================================================

Sample: 25 Short
----------------------------------------------------------------
1. `short parseShort(String s)`: This method parses the string argument as a signed decimal short.
2. `Short valueOf(String s)`: This method returns a Short object holding the value of the specified String.
3. `int compareTo(Short anotherShort)`: This method compares two Short objects numerically.
4. `String toString()`: This method returns a String object representing the specified short value.
5. `int hashCode()`: This method returns a hash code for this Short object.
================================================================

Sample: 26 StackTraceElement
----------------------------------------------------------------
1. `String getClassName()`: This method returns the fully qualified name of the class containing the execution point represented by this stack trace element.

2. `String getFileName()`: This method returns the name of the source file containing the execution point represented by this stack trace element.

3. `int getLineNumber()`: This method returns the line number in the source file at which the execution point represented by this stack trace element occurs.

4. `String getMethodName()`: This method returns the name of the method containing the execution point represented by this stack trace element.

5. `boolean isNativeMethod()`: This method returns true if the execution point represented by this stack trace element is in a native method, false otherwise.
================================================================

Sample: 27 StrictMath
----------------------------------------------------------------
1. `double exp(double a)`: Returns the base of the natural logarithm, e, raised to the power of the specified double value.
2. `double log(double a)`: Returns the natural logarithm (base e) of a double value.
3. `double sqrt(double a)`: Returns the correctly rounded positive square root of a double value.
4. `double sin(double a)`: Returns the trigonometric sine of an angle.
5. `double cos(double a)`: Returns the trigonometric cosine of an angle.
================================================================

Sample: 28 String
----------------------------------------------------------------
1. `int length()`: This method returns the length of the string.
2. `char charAt(int index)`: This method returns the character at the specified index.
3. `String substring(int beginIndex)`: This method returns a new string that is a substring of this string.
4. `int indexOf(String str)`: This method returns the index within this string of the first occurrence of the specified substring.
5. `boolean equals(Object anObject)`: This method compares this string to the specified object.
================================================================

Sample: 29 StringBuffer
----------------------------------------------------------------
1. `int length()`: This method returns the length (character count) of the StringBuffer.
2. `void setLength(int newLength)`: This method sets the length of the StringBuffer to the specified new length.
3. `void ensureCapacity(int minimumCapacity)`: This method ensures that the capacity of the StringBuffer is at least equal to the specified minimum capacity.
4. `void trimToSize()`: This method reduces the capacity of the StringBuffer to be equal to its current length.
5. `String toString()`: This method returns a string representing the data in the StringBuffer.
================================================================

Sample: 30 StringBuilder
----------------------------------------------------------------
1. `StringBuilder append(String str)`: This method appends the specified string to the end of the StringBuilder.
2. `StringBuilder insert(int offset, String str)`: This method inserts the specified string at the specified position in the StringBuilder.
3. `StringBuilder delete(int start, int end)`: This method deletes the characters in a substring of the StringBuilder.
4. `int length()`: This method returns the length (number of characters) of the StringBuilder.
5. `String toString()`: This method returns a string representation of the StringBuilder.
================================================================

Sample: 31 System
----------------------------------------------------------------
1. `void exit(int status)`: This method terminates the currently running Java Virtual Machine with the specified status code.
2. `long currentTimeMillis()`: This method returns the current time in milliseconds.
3. `void gc()`: This method runs the garbage collector.
4. `String getProperty(String key)`: This method gets the system property indicated by the specified key.
5. `void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)`: This method copies an array from the specified source array, beginning at the specified position, to the specified position of the destination array.
================================================================

Sample: 32 Thread
----------------------------------------------------------------
1. `void start()`: This method starts the thread, causing the object's run method to be called in a separate thread of execution.
2. `void run()`: This method is the entry point for the thread and is where the code to be executed by the thread is defined.
3. `static void sleep(long millis) throws InterruptedException`: This method causes the currently executing thread to sleep for the specified number of milliseconds.
4. `void join() throws InterruptedException`: This method waits for this thread to die.
5. `static Thread currentThread()`: This method returns a reference to the currently executing thread object.
================================================================

Sample: 33 ThreadGroup
----------------------------------------------------------------
1. `ThreadGroup(String name)`: This method creates a new thread group with the specified name.
2. `int activeCount()`: This method returns an estimate of the number of active threads in this thread group and its subgroups.
3. `Thread[] activeGroupCount()`: This method returns an estimate of the number of active groups in this thread group.
4. `void interrupt()`: This method interrupts all threads in this thread group.
5. `void list()`: This method prints information about this thread group to the standard output.
================================================================

Sample: 34 ThreadLocal
----------------------------------------------------------------
1. `void set(Object value)`: This method sets the current thread's copy of this thread-local variable to the specified value.
2. `Object get()`: This method returns the value in the current thread's copy of this thread-local variable.
3. `void remove()`: This method removes the current thread's value for this thread-local variable.
4. `protected Object initialValue()`: This method returns the initial value for this thread-local variable.
5. `void setInitialValue(Object value)`: This method sets the initial value for this thread-local variable.
================================================================

Sample: 35 Throwable
----------------------------------------------------------------
1. `String getMessage()`: This method returns the detail message string of this throwable.
2. `void printStackTrace()`: This method prints this throwable and its backtrace to the standard error stream.
3. `Throwable getCause()`: This method returns the cause of this throwable or null if the cause is nonexistent or unknown.
4. `String toString()`: This method returns a short description of this throwable.
5. `void addSuppressed(Throwable exception)`: This method appends the specified exception to the exceptions that were suppressed in order to deliver this exception.
================================================================

Sample: 36 Void
----------------------------------------------------------------
1. `Class<Void> getClass()`: This method returns the Class object representing the class or interface that declares the method.
2. `int hashCode()`: This method returns a hash code value for the object.
3. `boolean equals(Object obj)`: This method indicates whether some other object is "equal to" this one.
4. `String toString()`: This method returns a string representation of the object.
5. `Void getVoid()`: This method returns a reference to the Void object.
================================================================

