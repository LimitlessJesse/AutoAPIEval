Sample: 0 Activatable
----------------------------------------------------------------
1. `Remote register(ActivationDesc desc)`: This method registers the activation descriptor for the object.
2. `void unregister(ActivationID id)`: This method unregisters the object with the specified activation identifier.
3. `ActivationID exportObject(Remote obj, String location, MarshalledObject data, boolean restart)` : This method exports the remote object with the specified activation properties.
4. `Remote activate(ActivationID id, boolean force)` : This method activates the object with the specified activation identifier.
5. `ActivationDesc setActivationDesc(ActivationID id, ActivationDesc desc)`: This method sets the activation descriptor for the object with the specified activation identifier.
================================================================

Sample: 1 ActivationDesc
----------------------------------------------------------------
1. `String getClassName()`: This method returns the fully-qualified class name of the object.
2. `String getLocation()`: This method returns the code location (the location of the class) of the object.
3. `String getCodebase()`: This method returns the codebase URL path of the object.
4. `int getRestartMode()`: This method returns the restart "mode" of the object.
5. `MarshalledObject getData()`: This method returns the "marshalled" object that contains object specific initialization data.
================================================================

Sample: 2 ActivationGroup
----------------------------------------------------------------
1. `void activeObject(ActivationID id, Remote obj)`: This method activates the object associated with the specified activation identifier in the group.
2. `ActivationDesc setActivationDesc(ActivationID id, ActivationDesc desc)`: This method sets the activation descriptor for the specified activation identifier in the group.
3. `ActivationGroupID getID()`: This method returns the identifier for this activation group.
4. `void inactiveObject(ActivationID id)`: This method deactivates the object associated with the specified activation identifier in the group.
5. `void activeObject(ActivationID id, MarshalledObject<? extends Remote> mobj)`: This method activates the object associated with the specified activation identifier in the group using a marshalled object.
================================================================

Sample: 3 ActivationGroup_Stub
----------------------------------------------------------------
1. `void activeObject(ActivationID id, Remote obj)`: This method activates the object associated with the specified activation identifier.
2. `ActivationDesc setActivationDesc(ActivationID id, ActivationDesc desc)`: This method sets the activation descriptor for the specified activation identifier.
3. `ActivationGroupDesc setActivationGroupDesc(ActivationGroupID id, ActivationGroupDesc desc)`: This method sets the activation group descriptor for the specified activation group identifier.
4. `ActivationGroupID getActivationGroupID()`: This method returns the activation group identifier for this activation group.
5. `ActivationMonitor setActivationMonitor(ActivationMonitor monitor)`: This method sets the activation monitor for this activation group.
================================================================

Sample: 4 ActivationGroupDesc
----------------------------------------------------------------
1. `ActivationGroupDesc(java.rmi.activation.ActivationGroupID groupID, String className, String codebase, MarshalledObject data)`: This constructor creates an activation group descriptor with the specified group ID, class name, codebase, and data.
2. `ActivationGroupDesc clone()`: This method creates and returns a copy of this activation group descriptor.
3. `ActivationGroupDesc.CommandEnvironment getCommandEnvironment()`: This method returns the command environment for the activation group.
4. `ActivationGroupDesc setCommandEnvironment(ActivationGroupDesc.CommandEnvironment env)`: This method sets the command environment for the activation group.
5. `ActivationGroupDesc setSystem(boolean system)`: This method sets whether the activation group is a system group or not.
================================================================

Sample: 5 ActivationGroupDesc.CommandEnvironment
----------------------------------------------------------------
1. `String getCommandPath()`: This method returns the command path for the activation group.
2. `String[] getCommandOptions()`: This method returns the command options for the activation group.
3. `void setCommandPath(String commandPath)`: This method sets the command path for the activation group.
4. `void setCommandOptions(String[] commandOptions)`: This method sets the command options for the activation group.
5. `ActivationGroupDesc.CommandEnvironment clone()`: This method creates and returns a copy of this CommandEnvironment object.
================================================================

Sample: 6 ActivationGroupID
----------------------------------------------------------------
1. `ActivationGroupID createGroupID(ActivationSystem system)`: This method creates a new unique activation group identifier with a reference to the specified activation system.
2. `ActivationGroupID currentGroupID()`: This method returns the activation group identifier for the current group.
3. `boolean equals(Object obj)`: This method compares this activation group identifier to the specified object.
4. `int hashCode()`: This method returns a hash code value for the activation group identifier.
5. `String toString()`: This method returns a string representation of the activation group identifier.
================================================================

Sample: 7 ActivationID
----------------------------------------------------------------
1. `Remote activate(boolean force)`: This method activates the object associated with this ActivationID.
2. `boolean equals(Object obj)`: This method compares this ActivationID for equality with the specified object.
3. `int hashCode()`: This method returns a hash code value for the object.
4. `String toString()`: This method returns a string representation of the object.
5. `UID getUID()`: This method returns the unique identifier for the object.
================================================================

