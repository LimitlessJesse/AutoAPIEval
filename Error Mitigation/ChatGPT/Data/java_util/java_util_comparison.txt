Sample: 0 AbstractCollection
----------------------------------------------------------------
1. `boolean remove(Object o)`: This method removes the specified element from this collection if it is present.
2. `boolean removeAll(Collection<?> c)`: This method removes all of this collection's elements that are also contained in the specified collection.
3. `boolean retainAll(Collection<?> c)`: This method retains only the elements in this collection that are contained in the specified collection.
4. `void clear()`: This method removes all of the elements from this collection.
5. `boolean isEmpty()`: This method returns true if this collection contains no elements.
================================================================

Sample: 1 AbstractList
----------------------------------------------------------------
1. `void ensureCapacity(int minCapacity)`: This method increases the capacity of this list, if necessary, to ensure that it can hold at least the number of elements specified by the minimum capacity argument.
2. `void trimToSize()`: This method trims the capacity of this list to be the list's current size.
3. `void clear()`: This method removes all of the elements from this list.
4. `List<E> subList(int fromIndex, int toIndex)`: This method returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.
5. `int indexOf(Object o)`: This method returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.
================================================================

Sample: 2 AbstractMap
----------------------------------------------------------------
1. `Set<Map.Entry<K, V>> entrySet()`: This method returns a Set view of the mappings contained in this map.
2. `V get(Object key)`: This method returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.
3. `Set<K> keySet()`: This method returns a Set view of the keys contained in this map.
4. `V put(K key, V value)`: This method associates the specified value with the specified key in this map.
5. `Collection<V> values()`: This method returns a Collection view of the values contained in this map.
================================================================

Sample: 3 AbstractMap.SimpleEntry
----------------------------------------------------------------
1. `K getKey()`: This method returns the key corresponding to this entry.
2. `V getValue()`: This method returns the value corresponding to this entry.
3. `V setValue(V value)`: This method sets the value of this entry to the specified value and returns the previous value.
4. `boolean equals(Object obj)`: This method compares the specified object with this entry for equality.
5. `int hashCode()`: This method returns the hash code value for this entry.
================================================================

Sample: 4 AbstractMap.SimpleImmutableEntry
----------------------------------------------------------------
1. `K getKey()`: This method returns the key corresponding to this entry.
2. `V getValue()`: This method returns the value corresponding to this entry.
3. `boolean equals(Object obj)`: This method compares the specified object with this entry for equality.
4. `int hashCode()`: This method returns the hash code value for this entry.
5. `String toString()`: This method returns a string representation of this entry.
================================================================

Sample: 5 AbstractQueue
----------------------------------------------------------------
1. `boolean offer(E e)`: This method inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available.
2. `E poll()`: This method retrieves and removes the head of this queue, or returns null if this queue is empty.
3. `E peek()`: This method retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.
4. `boolean remove(Object o)`: This method removes a single instance of the specified element from this queue, if it is present.
5. `boolean contains(Object o)`: This method returns true if this queue contains the specified element.
================================================================

Sample: 6 AbstractSequentialList
----------------------------------------------------------------
1. `void addFirst(E e)`: This method inserts the specified element at the beginning of this list.
2. `void addLast(E e)`: This method appends the specified element to the end of this list.
3. `E getFirst()`: This method returns the first element in this list.
4. `E getLast()`: This method returns the last element in this list.
5. `E removeFirst()`: This method removes and returns the first element from this list.
================================================================

Sample: 7 AbstractSet
----------------------------------------------------------------
1. `Iterator<E> iterator()`: This method returns an iterator over the elements in this set.
2. `int size()`: This method returns the number of elements in this set.
3. `boolean isEmpty()`: This method returns true if this set contains no elements.
4. `boolean contains(Object o)`: This method returns true if this set contains the specified element.
5. `boolean remove(Object o)`: This method removes the specified element from this set if it is present.
================================================================

Sample: 8 ArrayDeque
----------------------------------------------------------------
1. `void addFirst(E e)`: This method inserts the specified element at the front of the deque.
2. `void addLast(E e)`: This method inserts the specified element at the end of the deque.
3. `E getFirst()`: This method retrieves, but does not remove, the first element of the deque.
4. `E getLast()`: This method retrieves, but does not remove, the last element of the deque.
5. `E removeFirst()`: This method retrieves and removes the first element of the deque.
================================================================

Sample: 9 ArrayList
----------------------------------------------------------------
1. `void ensureCapacity(int minCapacity)`: This method increases the capacity of this ArrayList instance, if necessary, to ensure that it can hold at least the number of elements specified by the minCapacity parameter.
2. `void trimToSize()`: This method trims the capacity of this ArrayList instance to be the list's current size.
3. `int size()`: This method returns the number of elements in this list.
4. `E get(int index)`: This method returns the element at the specified position in this list.
5. `boolean isEmpty()`: This method returns true if this list contains no elements.
================================================================

Sample: 10 Arrays
----------------------------------------------------------------
1. `void sort(int[] a)`: This method sorts the specified array of integers into ascending numerical order.
2. `int binarySearch(int[] a, int key)`: This method searches the specified array of integers for the specified value using the binary search algorithm.
3. `boolean equals(int[] a, int[] a2)`: This method compares the specified arrays of integers for equality.
4. `String toString(int[] a)`: This method returns a string representation of the specified array of integers.
5. `int hashCode(int[] a)`: This method returns a hash code for the specified array of integers.
================================================================

Sample: 11 Base64
----------------------------------------------------------------
1. `Base64.Encoder getEncoder()`: This method returns a Base64 encoder for encoding data.
2. `Base64.Decoder getDecoder()`: This method returns a Base64 decoder for decoding data.
3. `String encodeToString(byte[] src)`: This method encodes the specified byte array into a Base64 encoded string.
4. `byte[] encode(byte[] src)`: This method encodes the specified byte array into a Base64 encoded byte array.
5. `byte[] decode(String src)`: This method decodes the specified Base64 encoded string into a byte array.
================================================================

Sample: 12 Base64.Decoder
----------------------------------------------------------------
1. `byte[] decode(String src)`: This method decodes a Base64 encoded String into a byte array.
2. `ByteBuffer decode(ByteBuffer buffer)`: This method decodes all bytes from the input buffer into a newly-allocated ByteBuffer.
3. `InputStream wrap(InputStream is)`: This method wraps an InputStream, decoding the data read from it on the fly.
4. `int decode(byte[] src, byte[] dst)`: This method decodes a Base64 encoded byte array into a newly-allocated byte array.
5. `int decode(byte[] src, int off, int len, byte[] dst)`: This method decodes a Base64 encoded byte array into a newly-allocated byte array.
================================================================

Sample: 13 Base64.Encoder
----------------------------------------------------------------
1. `String encodeToString(byte[] src)`: This method encodes the specified byte array into a Base64 encoded string.
2. `byte[] encode(byte[] src)`: This method encodes the specified byte array into a Base64 encoded byte array.
3. `int encode(byte[] src, byte[] dst)`: This method encodes the specified byte array into a Base64 encoded byte array and stores the result in the destination byte array.
4. `String withoutPadding().encodeToString(byte[] src)`: This method encodes the specified byte array into a Base64 encoded string without padding.
5. `Base64.Encoder wrap(OutputStream os)`: This method returns a Base64 encoder that encodes data to the specified output stream.
================================================================

Sample: 14 BitSet
----------------------------------------------------------------
1. `void set(int bitIndex)`: This method sets the bit at the specified index to true.
2. `void clear(int bitIndex)`: This method sets the bit at the specified index to false.
3. `boolean get(int bitIndex)`: This method returns the value of the bit at the specified index.
4. `int length()`: This method returns the number of bits in the BitSet.
5. `void flip(int bitIndex)`: This method flips the bit at the specified index.
================================================================

Sample: 15 Calendar
----------------------------------------------------------------
1. `void add(int field, int amount)`: This method adds or subtracts the specified amount of time to the given calendar field.
2. `int get(int field)`: This method returns the value of the given calendar field.
3. `void set(int field, int value)`: This method sets the value of the given calendar field.
4. `int getActualMaximum(int field)`: This method returns the maximum value that the specified calendar field could have.
5. `void roll(int field, boolean up)`: This method adds or subtracts one unit of time to the given calendar field without changing larger fields.
================================================================

Sample: 16 Calendar.Builder
----------------------------------------------------------------
1. `Calendar.Builder set(int field, int value)`: This method sets the value of the given calendar field.
2. `Calendar build()`: This method creates a new Calendar instance based on the parameters set in the builder.
3. `Calendar.Builder setDate(int year, int month, int day)`: This method sets the date fields of the calendar.
4. `Calendar.Builder setTimeOfDay(int hour, int minute, int second)`: This method sets the time fields of the calendar.
5. `Calendar.Builder setLocale(Locale locale)`: This method sets the locale for the calendar.
================================================================

Sample: 17 Collections
----------------------------------------------------------------
1. `void reverse(List<?> list)`: This method reverses the order of the elements in the specified list.
2. `void shuffle(List<?> list)`: This method randomly permutes the specified list using a default source of randomness.
3. `int binarySearch(List<? extends Comparable<? super T>> list, T key)`: This method searches the specified list for the specified object using the binary search algorithm.
4. `void sort(List<T> list)`: This method sorts the specified list into ascending order, according to the natural ordering of its elements.
5. `int frequency(Collection<?> c, Object o)`: This method returns the number of elements in the specified collection equal to the specified object.
================================================================

Sample: 18 Currency
----------------------------------------------------------------
1. `Currency getInstance(String currencyCode)`: This method returns the Currency instance for the given currency code.
2. `String getCurrencyCode()`: This method returns the ISO 4217 currency code of this currency.
3. `int getDefaultFractionDigits()`: This method returns the default number of fraction digits used with this currency.
4. `String getDisplayName()`: This method returns the symbol of this currency for the default locale.
5. `String getSymbol()`: This method returns the symbol of this currency for the default locale.
================================================================

Sample: 19 Date
----------------------------------------------------------------
1. `long getTime()`: This method returns the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this Date object.
2. `void setTime(long time)`: This method sets this Date object to represent a point in time that is time milliseconds after January 1, 1970 00:00:00 GMT.
3. `boolean before(Date when)`: This method returns true if this Date is before the specified Date when.
4. `boolean after(Date when)`: This method returns true if this Date is after the specified Date when.
5. `int compareTo(Date anotherDate)`: This method compares this Date with another Date. It returns a value less than 0 if this Date is before the specified Date, 0 if they are equal, and a value greater than 0 if this Date is after the specified Date.
================================================================

Sample: 20 Dictionary
----------------------------------------------------------------
1. `V get(Object key)`: This method returns the value to which the specified key is mapped in this dictionary.
2. `V put(K key, V value)`: This method maps the specified key to the specified value in this dictionary.
3. `V remove(Object key)`: This method removes the key (and its corresponding value) from this dictionary.
4. `Enumeration<V> elements()`: This method returns an enumeration of the values in this dictionary.
5. `Enumeration<K> keys()`: This method returns an enumeration of the keys in this dictionary.
================================================================

Sample: 21 DoubleSummaryStatistics
----------------------------------------------------------------
1. `long getCount()`: This method returns the count of values added to the DoubleSummaryStatistics object.
2. `double getSum()`: This method returns the sum of values added to the DoubleSummaryStatistics object.
3. `double getAverage()`: This method returns the average of values added to the DoubleSummaryStatistics object.
4. `double getMin()`: This method returns the minimum value added to the DoubleSummaryStatistics object.
5. `double getMax()`: This method returns the maximum value added to the DoubleSummaryStatistics object.
================================================================

Sample: 22 EnumMap
----------------------------------------------------------------
1. `V put(K key, V value)`: This method associates the specified value with the specified key in this map.
2. `V get(Object key)`: This method returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.
3. `void clear()`: This method removes all mappings from this map.
4. `Set<Map.Entry<K, V>> entrySet()`: This method returns a Set view of the mappings contained in this map.
5. `Collection<V> values()`: This method returns a Collection view of the values contained in this map.
================================================================

Sample: 23 EnumSet
----------------------------------------------------------------
1. `static <E extends Enum<E>> EnumSet<E> allOf(Class<E> elementType)`: This method creates an enum set containing all of the elements in the specified enum type.
2. `static <E extends Enum<E>> EnumSet<E> complementOf(EnumSet<E> s)`: This method creates an enum set with the same element type as the specified enum set, but with the elements that are not present in the specified set.
3. `static <E extends Enum<E>> EnumSet<E> copyOf(Collection<E> c)`: This method creates an enum set initialized from the specified collection.
4. `static <E extends Enum<E>> EnumSet<E> noneOf(Class<E> elementType)`: This method creates an empty enum set with the specified element type.
5. `static <E extends Enum<E>> EnumSet<E> range(E from, E to)`: This method creates an enum set with the range of elements from the specified start element to the specified end element, inclusive.
================================================================

Sample: 24 EventListenerProxy
----------------------------------------------------------------
1. `EventListenerProxy getProxy()`
   - Return type: EventListenerProxy
   - Parameters: None

2. `void setListener(EventListener l)`
   - Return type: void
   - Parameters: EventListener l

3. `EventListener getListener()`
   - Return type: EventListener
   - Parameters: None

4. `void setParameter(Object parameter)`
   - Return type: void
   - Parameters: Object parameter

5. `Object getParameter()`
   - Return type: Object
   - Parameters: None
================================================================

Sample: 25 EventObject
----------------------------------------------------------------
1. `Object getSource()`: This method returns the object on which the Event initially occurred.
2. `String toString()`: This method returns a String representation of the EventObject.
3. `long getWhen()`: This method returns the timestamp when the Event occurred.
4. `void setSource(Object newSource)`: This method sets the object on which the Event initially occurred.
5. `void setWhen(long when)`: This method sets the timestamp when the Event occurred.
================================================================

Sample: 26 FormattableFlags
----------------------------------------------------------------
1. `boolean isLeftJustify()`: This method returns true if the output should be left-justified.
2. `boolean isUppercase()`: This method returns true if the output should be in uppercase.
3. `boolean isAlternate()`: This method returns true if the alternate form should be used for the output.
4. `boolean isZeroPad()`: This method returns true if zero padding should be used for the output.
5. `boolean isGroup()`: This method returns true if grouping separators should be used for the output.
================================================================

Sample: 27 Formatter
----------------------------------------------------------------
1. `java.util.Formatter format(String format, Object... args)`: This method writes a formatted string to the output using the specified format string and arguments.
2. `java.util.Locale locale()`: This method returns the locale set on this formatter.
3. `java.lang.Appendable out()`: This method returns the destination for the output.
4. `java.util.Formatter parse(String s)`: This method parses the format string and returns a new formatter.
5. `java.util.Formatter format(Locale l, String format, Object... args)`: This method writes a formatted string to the output using the specified locale, format string, and arguments.
================================================================

Sample: 28 GregorianCalendar
----------------------------------------------------------------
1. `void set(int field, int value)`: This method sets the value of the given calendar field.
2. `int get(int field)`: This method returns the value of the given calendar field.
3. `void add(int field, int amount)`: This method adds or subtracts the specified amount of time to the given calendar field.
4. `boolean isLeapYear(int year)`: This method checks if the given year is a leap year.
5. `int getActualMaximum(int field)`: This method returns the maximum value that the specified calendar field could have.
================================================================

Sample: 29 HashMap
----------------------------------------------------------------
1. `V get(Object key)`: This method returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.
2. `V put(K key, V value)`: This method associates the specified value with the specified key in this map.
3. `V remove(Object key)`: This method removes the mapping for a key from this map if it is present.
4. `boolean containsKey(Object key)`: This method returns true if this map contains a mapping for the specified key.
5. `int size()`: This method returns the number of key-value mappings in this map.
================================================================

Sample: 30 HashSet
----------------------------------------------------------------
1. `boolean add(E e)`: This method adds the specified element to this set if it is not already present.
2. `boolean remove(Object o)`: This method removes the specified element from this set if it is present.
3. `int size()`: This method returns the number of elements in this set.
4. `boolean contains(Object o)`: This method returns true if this set contains the specified element.
5. `void clear()`: This method removes all of the elements from this set.
================================================================

Sample: 31 Hashtable
----------------------------------------------------------------
1. `void clear()`: This method removes all of the mappings from this hashtable.
2. `boolean contains(Object value)`: This method returns true if this hashtable maps one or more keys to the specified value.
3. `Object get(Object key)`: This method returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.
4. `boolean isEmpty()`: This method returns true if this hashtable contains no mappings.
5. `Object remove(Object key)`: This method removes the mapping for the specified key from this map if present.
================================================================

Sample: 32 IdentityHashMap
----------------------------------------------------------------
1. `V put(K key, V value)`: This method associates the specified value with the specified key in this map.
2. `V get(Object key)`: This method returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.
3. `boolean containsKey(Object key)`: This method returns true if this map contains a mapping for the specified key.
4. `V remove(Object key)`: This method removes the mapping for a key from this map if it is present.
5. `int size()`: This method returns the number of key-value mappings in this map.
================================================================

Sample: 33 IntSummaryStatistics
----------------------------------------------------------------
1. `long getCount()`: This method returns the count of values added to the IntSummaryStatistics object.
2. `long getSum()`: This method returns the sum of values added to the IntSummaryStatistics object.
3. `double getAverage()`: This method returns the average of values added to the IntSummaryStatistics object.
4. `int getMin()`: This method returns the minimum value added to the IntSummaryStatistics object.
5. `int getMax()`: This method returns the maximum value added to the IntSummaryStatistics object.
================================================================

Sample: 34 LinkedHashMap
----------------------------------------------------------------
1. `V get(Object key)`: This method returns the value to which the specified key is mapped in this map.
2. `V put(K key, V value)`: This method associates the specified value with the specified key in this map.
3. `boolean removeEldestEntry(Map.Entry<K,V> eldest)`: This method returns true if the eldest entry should be removed from the map.
4. `void clear()`: This method removes all of the mappings from this map.
5. `Set<K> keySet()`: This method returns a Set view of the keys contained in this map.
================================================================

Sample: 35 LinkedHashSet
----------------------------------------------------------------
1. `boolean add(E e)`: This method adds the specified element to this set if it is not already present.
2. `void clear()`: This method removes all of the elements from this set.
3. `boolean contains(Object o)`: This method returns true if this set contains the specified element.
4. `boolean isEmpty()`: This method returns true if this set contains no elements.
5. `int size()`: This method returns the number of elements in this set.
================================================================

Sample: 36 LinkedList
----------------------------------------------------------------
1. `void addFirst(E e)`: This method inserts the specified element at the beginning of this list.
2. `void addLast(E e)`: This method appends the specified element to the end of this list.
3. `E getFirst()`: This method returns the first element in this list.
4. `E getLast()`: This method returns the last element in this list.
5. `E removeFirst()`: This method removes and returns the first element from this list.
================================================================

Sample: 37 ListResourceBundle
----------------------------------------------------------------
1. `Object[][] getContents()`: This method returns an array of key-value pairs that represent the resources managed by this ListResourceBundle.
2. `Enumeration<String> getKeys()`: This method returns an enumeration of the keys contained in this ListResourceBundle.
3. `Object handleGetObject(String key)`: This method retrieves the object for the given key from the resource bundle.
4. `Set<String> keySet()`: This method returns a set of all the keys contained in this ListResourceBundle.
5. `String getString(String key)`: This method retrieves the string for the given key from the resource bundle.
================================================================

Sample: 38 Locale
----------------------------------------------------------------
1. `String getCountry()`: This method returns the country/region code for this locale.
2. `String getDisplayCountry()`: This method returns the name of the country/region for this locale in the default locale's language.
3. `String getLanguage()`: This method returns the language code for this locale.
4. `String getDisplayLanguage()`: This method returns the name of the language for this locale in the default locale's language.
5. `String getDisplayName()`: This method returns a name for the locale that is appropriate for display to the user.
================================================================

Sample: 39 Locale.Builder
----------------------------------------------------------------
1. `Locale.Builder setLanguage(String language)`: This method sets the language for the Locale being built.
2. `Locale.Builder setRegion(String region)`: This method sets the region for the Locale being built.
3. `Locale.Builder setScript(String script)`: This method sets the script for the Locale being built.
4. `Locale.Builder setExtension(char key, String value)`: This method sets an extension for the Locale being built.
5. `Locale.Builder clear()`: This method resets the builder to its initial state.
================================================================

Sample: 40 Locale.LanguageRange
----------------------------------------------------------------
1. `String getRange()`: This method returns the language range string.
2. `double getWeight()`: This method returns the weight associated with the language range.
3. `int hashCode()`: This method returns the hash code value for the language range.
4. `boolean matches(Locale locale)`: This method checks if the language range matches the specified locale.
5. `String toString()`: This method returns a string representation of the language range.
================================================================

Sample: 41 LongSummaryStatistics
----------------------------------------------------------------
1. `long getCount()`: This method returns the count of values added to the LongSummaryStatistics object.
2. `long getSum()`: This method returns the sum of values added to the LongSummaryStatistics object.
3. `long getMin()`: This method returns the minimum value added to the LongSummaryStatistics object.
4. `long getMax()`: This method returns the maximum value added to the LongSummaryStatistics object.
5. `double getAverage()`: This method returns the average of values added to the LongSummaryStatistics object.
================================================================

Sample: 42 Objects
----------------------------------------------------------------
1. `boolean deepEquals(Object a, Object b)`: This method compares two objects for deep equality.
2. `int hashCode(Object o)`: This method returns the hash code of a non-null argument and 0 for a null argument.
3. `boolean isNull(Object obj)`: This method checks if the specified object reference is null.
4. `String toString(Object o)`: This method returns the string representation of the object or "null" if the object is null.
5. `<T> T requireNonNull(T obj)`: This method checks that the specified object reference is not null.
================================================================

Sample: 43 Observable
----------------------------------------------------------------
1. `void addObserver(Observer o)`: This method adds an observer to the set of observers for this object.
2. `void deleteObserver(Observer o)`: This method deletes an observer from the set of observers of this object.
3. `void notifyObservers()`: This method marks this object as having been changed and notifies all of its observers.
4. `void notifyObservers(Object arg)`: This method marks this object as having been changed and notifies all of its observers with the specified argument.
5. `int countObservers()`: This method returns the number of observers of this object.
================================================================

Sample: 44 Optional
----------------------------------------------------------------
1. `boolean isPresent()`: This method returns true if there is a value present, otherwise false.
2. `T get()`: This method returns the value if present, otherwise throws NoSuchElementException.
3. `void ifPresent(Consumer<? super T> consumer)`: This method performs the given action if a value is present.
4. `T orElse(T other)`: This method returns the value if present, otherwise returns the specified value.
5. `Optional<T> filter(Predicate<? super T> predicate)`: This method returns an Optional describing the value if it is present and matches the given predicate, otherwise returns an empty Optional.
================================================================

Sample: 45 OptionalDouble
----------------------------------------------------------------
1. `OptionalDouble empty()`: This method returns an empty OptionalDouble instance.
2. `OptionalDouble of(double value)`: This method returns an OptionalDouble with the specified value.
3. `boolean isPresent()`: This method returns true if there is a value present, otherwise false.
4. `double getAsDouble()`: This method returns the value if present, otherwise throws NoSuchElementException.
5. `double orElse(double other)`: This method returns the value if present, otherwise returns the specified other value.
================================================================

Sample: 46 OptionalInt
----------------------------------------------------------------
1. `OptionalInt empty()`: This method returns an empty OptionalInt instance.
2. `OptionalInt of(int value)`: This method returns an OptionalInt with the specified value.
3. `boolean isPresent()`: This method returns true if there is a value present, otherwise false.
4. `int orElse(int other)`: This method returns the value if present, otherwise returns the specified value.
5. `int orElseGet(IntSupplier other)`: This method returns the value if present, otherwise returns the result of invoking the specified supplier.
================================================================

Sample: 47 OptionalLong
----------------------------------------------------------------
1. `OptionalLong empty()`: This method returns an empty OptionalLong instance.
2. `OptionalLong of(long value)`: This method returns an OptionalLong with the specified value.
3. `boolean isPresent()`: This method returns true if there is a value present, otherwise false.
4. `long getAsLong()`: This method returns the value if present, otherwise throws NoSuchElementException.
5. `long orElse(long other)`: This method returns the value if present, otherwise returns the specified value.
================================================================

Sample: 48 PriorityQueue
----------------------------------------------------------------
1. `boolean offer(E e)`: This method inserts the specified element into this priority queue.
2. `E peek()`: This method retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.
3. `E poll()`: This method retrieves and removes the head of this queue, or returns null if this queue is empty.
4. `Comparator<? super E> comparator()`: This method returns the comparator used to order the elements in this queue, or null if this queue is sorted according to the natural ordering of its elements.
5. `int size()`: This method returns the number of elements in this priority queue.
================================================================

Sample: 49 Properties
----------------------------------------------------------------
1. `String getProperty(String key)`: This method retrieves the value corresponding to the specified key from the Properties object.
2. `void setProperty(String key, String value)`: This method sets the value of the specified key in the Properties object.
3. `Enumeration<?> propertyNames()`: This method returns an enumeration of all the keys in the Properties object.
4. `void store(OutputStream out, String comments)`: This method writes this property list (key and element pairs) in this Properties table to the output stream in a format suitable for loading into a Properties object using the load(InputStream) method.
5. `void load(InputStream inStream)`: This method reads a property list (key and element pairs) from the input stream.
================================================================

Sample: 50 PropertyPermission
----------------------------------------------------------------
1. `void checkPermission(java.security.Permission perm)`: This method checks if the specified permission is permitted.
2. `java.security.PermissionCollection newPermissionCollection()`: This method creates a new PermissionCollection object for storing permissions.
3. `boolean implies(java.security.Permission permission)`: This method checks if the specified permission is implied by this PropertyPermission object.
4. `java.lang.String getActions()`: This method returns the actions associated with this PropertyPermission object.
5. `java.lang.String getName()`: This method returns the name of the property associated with this PropertyPermission object.
================================================================

Sample: 51 PropertyResourceBundle
----------------------------------------------------------------
1. `String getString(String key)`: This method returns the string for the given key in the resource bundle.
2. `Enumeration<String> getKeys()`: This method returns an enumeration of the keys in the resource bundle.
3. `Set<String> keySet()`: This method returns a set of all keys contained in the resource bundle.
4. `Object handleGetObject(String key)`: This method returns the object for the given key in the resource bundle.
5. `Locale getLocale()`: This method returns the locale of the resource bundle.
================================================================

Sample: 52 Random
----------------------------------------------------------------
1. `int nextInt(int bound)`: This method returns a pseudorandom, uniformly distributed int value between 0 (inclusive) and the specified bound (exclusive).
2. `long nextLong()`: This method returns a pseudorandom long value.
3. `float nextFloat()`: This method returns a pseudorandom float value between 0.0 and 1.0.
4. `double nextGaussian()`: This method returns the next pseudorandom, Gaussian ("normally") distributed double value with mean 0.0 and standard deviation 1.0.
5. `void setSeed(long seed)`: This method sets the seed of the random number generator using a single long seed.
================================================================

Sample: 53 ResourceBundle
----------------------------------------------------------------
1. `String getString(String key)`: This method returns the string for the given key from this resource bundle.
2. `Enumeration<String> getKeys()`: This method returns an enumeration of the keys contained in this resource bundle.
3. `Locale getLocale()`: This method returns the locale of this resource bundle.
4. `Object getObject(String key)`: This method returns the object for the given key from this resource bundle.
5. `Set<String> keySet()`: This method returns a set of all keys in this resource bundle.
================================================================

Sample: 54 ResourceBundle.Control
----------------------------------------------------------------
1. `List<String> getCandidateLocales(String baseName, Locale locale)`: This method returns a list of candidate locales for the given base name and locale.
2. `Locale getFallbackLocale(String baseName, Locale locale)`: This method returns the fallback locale for the given base name and locale.
3. `List<Locale> getCandidateLocales(String baseName, Locale locale)`: This method returns a list of candidate locales for the given base name and locale.
4. `List<String> getFormats(String baseName)`: This method returns a list of resource bundle formats for the given base name.
5. `List<Locale> getCandidateLocales(String baseName, Locale locale)`: This method returns a list of candidate locales for the given base name and locale.
================================================================

Sample: 55 Scanner
----------------------------------------------------------------
1. `String next()`: This method finds and returns the next complete token from this scanner.
2. `int nextInt()`: This method scans the next token of the input as an int.
3. `double nextDouble()`: This method scans the next token of the input as a double.
4. `boolean hasNext()`: This method returns true if this scanner has another token in its input.
5. `void close()`: This method closes this scanner.
================================================================

Sample: 56 ServiceLoader
----------------------------------------------------------------
1. `Iterator<S> iterator()`: This method returns an iterator over the elements of the provider.
2. `void reload()`: This method clears the provider cache and reloads all provider configurations.
3. `S load()`: This method loads and returns the first available service provider.
4. `Stream<S> stream()`: This method returns a sequential stream of the provider instances.
5. `void forEach(Consumer<? super S> action)`: This method performs the given action for each provider instance.
================================================================

Sample: 57 SimpleTimeZone
----------------------------------------------------------------
1. `void setStartRule(int month, int dayOfWeekInMonth, int dayOfWeek, int time)`: Sets the start rule for daylight savings time.
2. `void setEndRule(int month, int dayOfWeekInMonth, int dayOfWeek, int time)`: Sets the end rule for daylight savings time.
3. `void setStartYear(int year)`: Sets the start year for daylight savings time.
4. `void setEndYear(int year)`: Sets the end year for daylight savings time.
5. `void setDSTSavings(int milliseconds)`: Sets the amount of time in milliseconds that the clock is advanced during daylight savings time.
================================================================

Sample: 58 Spliterators
----------------------------------------------------------------
1. `Spliterator<T> spliterator()`: This method returns a Spliterator over the elements described by this Spliterator.
2. `Spliterator<T> trySplit()`: This method attempts to split this Spliterator into two parts.
3. `long estimateSize()`: This method returns an estimate of the number of elements that would be encountered by a forEachRemaining() traversal.
4. `int characteristics()`: This method returns a set of characteristics of this Spliterator and its elements.
5. `Comparator<? super T> getComparator()`: This method returns the Comparator describing how elements of this Spliterator are ordered.
================================================================

Sample: 59 Spliterators.AbstractDoubleSpliterator
----------------------------------------------------------------
1. `long estimateSize()`: Returns an estimate of the number of elements that would be encountered by a forEachRemaining() traversal.
2. `int characteristics()`: Returns a set of characteristics of this Spliterator and its elements.
3. `OfDouble trySplit()`: If this spliterator can be partitioned, returns a Spliterator covering elements, or null if this spliterator cannot be further partitioned.
4. `void forEachRemaining(DoubleConsumer action)`: Performs the given action for each remaining element, sequentially in the current thread, until all elements have been processed or the action throws an exception.
5. `boolean tryAdvance(DoubleConsumer action)`: If a remaining element exists, performs the given action on it, returning true; else returns false.
================================================================

Sample: 60 Spliterators.AbstractIntSpliterator
----------------------------------------------------------------
1. `int characteristics()`
2. `long estimateSize()`
3. `void forEachRemaining(IntConsumer action)`
4. `boolean tryAdvance(IntConsumer action)`
5. `Spliterator.OfInt trySplit()`
================================================================

Sample: 61 Spliterators.AbstractLongSpliterator
----------------------------------------------------------------
1. `long estimateSize()`: Returns an estimate of the number of elements that would be encountered by a forEachRemaining() traversal.
2. `boolean tryAdvance(LongConsumer action)`: Performs the given action for each remaining element, sequentially in the current thread, until all elements have been processed or the action throws an exception.
3. `Spliterator.OfLong trySplit()`: If this spliterator can be partitioned, returns a Spliterator covering elements, or null if this spliterator cannot be further partitioned.
4. `long getExactSizeIfKnown()`: Returns the exact size of elements that would be encountered by a forEachRemaining() traversal, if known.
5. `Comparator<? super Long> getComparator()`: Returns the comparator used to compare elements, or null if elements are not comparable or the spliterator does not have a defined encounter order.
================================================================

Sample: 62 Spliterators.AbstractSpliterator
----------------------------------------------------------------
1. `long estimateSize()`: Returns an estimate of the number of elements that would be encountered by a forEachRemaining action.
2. `int characteristics()`: Returns a set of characteristics of this Spliterator and its elements.
3. `Spliterator<T> trySplit()`: If this Spliterator can be partitioned, returns a Spliterator covering elements, or null if this Spliterator cannot be further partitioned.
4. `void forEachRemaining(Consumer<? super T> action)`: Performs the given action for each remaining element, sequentially in the current thread.
5. `Comparator<? super T> getComparator()`: If this Spliterator's source is SORTED by a Comparator, returns that Comparator.
================================================================

Sample: 63 SplittableRandom
----------------------------------------------------------------
1. `int nextInt(int bound)`: This method returns a pseudorandom integer value between 0 (inclusive) and the specified bound (exclusive).
2. `long nextLong()`: This method returns a pseudorandom long value.
3. `double nextDouble()`: This method returns a pseudorandom double value between 0.0 (inclusive) and 1.0 (exclusive).
4. `void setSeed(long seed)`: This method sets the seed of the random number generator.
5. `SplittableRandom split()`: This method returns a new SplittableRandom instance that shares no mutable state with the original instance.
================================================================

Sample: 64 Stack
----------------------------------------------------------------
1. `E push(E item)`: This method pushes an item onto the top of this stack.
2. `E pop()`: This method removes the object at the top of this stack and returns that object.
3. `E peek()`: This method looks at the object at the top of this stack without removing it from the stack.
4. `boolean empty()`: This method tests if this stack is empty.
5. `int search(Object o)`: This method searches for the specified object in this stack and returns its position relative to the top of the stack.
================================================================

Sample: 65 StringJoiner
----------------------------------------------------------------
1. `StringJoiner add(String newElement)`: This method adds a new element to the StringJoiner.
2. `StringJoiner setEmptyValue(String emptyValue)`: This method sets the default value to return if the StringJoiner is empty.
3. `int length()`: This method returns the length of the current StringJoiner.
4. `String toString()`: This method returns the StringJoiner as a String.
5. `StringJoiner merge(StringJoiner other)`: This method merges the contents of the specified StringJoiner into this StringJoiner.
================================================================

Sample: 66 StringTokenizer
----------------------------------------------------------------
1. `String nextToken()`: This method returns the next token from this string tokenizer.
2. `boolean hasMoreTokens()`: This method tests if there are more tokens available from this string tokenizer's string.
3. `int countTokens()`: This method returns the number of tokens remaining in the string tokenizer.
4. `String nextToken(String delim)`: This method returns the next token from this string tokenizer, using the specified delimiter.
5. `void reset(String str)`: This method resets this string tokenizer's state by setting the string to a new input string.
================================================================

Sample: 67 Timer
----------------------------------------------------------------
1. `void schedule(TimerTask task, long delay)`: This method schedules the specified task for future execution after the specified delay.
2. `void schedule(TimerTask task, Date time)`: This method schedules the specified task for future execution at the specified time.
3. `void schedule(TimerTask task, long delay, long period)`: This method schedules the specified task for repeated future execution after the specified delay and with the specified period.
4. `void scheduleAtFixedRate(TimerTask task, long delay, long period)`: This method schedules the specified task for repeated future execution after the specified delay and with the specified period, regardless of the task's execution time.
5. `void cancel()`: This method cancels the timer and discards any scheduled tasks.
================================================================

Sample: 68 TimerTask
----------------------------------------------------------------
1. `void run()`: This method is called by the Timer when the scheduled time has arrived.
2. `boolean cancel()`: This method cancels the TimerTask, if it has not already been executed.
3. `long scheduledExecutionTime()`: This method returns the scheduled execution time of the most recent actual execution of this task.
4. `boolean scheduledExecutionTime(Date time)`: This method sets the time at which this task is scheduled to be executed.
5. `boolean cancel(boolean mayInterruptIfRunning)`: This method cancels the TimerTask and optionally may interrupt the executing thread.
================================================================

Sample: 69 TimeZone
----------------------------------------------------------------
1. `String getDisplayName(boolean daylight, int style)`: This method returns the name of this time zone suitable for presentation to the user.
2. `int getOffset(long date)`: This method returns the offset of this time zone from UTC at the specified date.
3. `String getID()`: This method returns the ID of this time zone.
4. `boolean useDaylightTime()`: This method returns true if this time zone uses daylight savings time.
5. `static String[] getAvailableIDs()`: This method returns an array of IDs for the available time zones.
================================================================

Sample: 70 TreeMap
----------------------------------------------------------------
1. `Map.Entry<K,V> ceilingEntry(K key)`: Returns a key-value mapping associated with the least key greater than or equal to the given key.
2. `K ceilingKey(K key)`: Returns the least key greater than or equal to the given key, or null if there is no such key.
3. `Map.Entry<K,V> floorEntry(K key)`: Returns a key-value mapping associated with the greatest key less than or equal to the given key.
4. `K floorKey(K key)`: Returns the greatest key less than or equal to the given key, or null if there is no such key.
5. `SortedMap<K,V> headMap(K toKey)`: Returns a view of the portion of this map whose keys are strictly less than toKey.
================================================================

Sample: 71 TreeSet
----------------------------------------------------------------
1. `E ceiling(E e)`: Returns the least element in this set greater than or equal to the given element, or null if there is no such element.
2. `E floor(E e)`: Returns the greatest element in this set less than or equal to the given element, or null if there is no such element.
3. `NavigableSet<E> headSet(E toElement, boolean inclusive)`: Returns a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toElement.
4. `NavigableSet<E> tailSet(E fromElement, boolean inclusive)`: Returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive is true) fromElement.
5. `E pollFirst()`: Retrieves and removes the first (lowest) element, or returns null if this set is empty.
================================================================

Sample: 72 UUID
----------------------------------------------------------------
1. `static UUID randomUUID()`: This method returns a randomly generated UUID.
2. `static UUID nameUUIDFromBytes(byte[] name)`: This method creates a UUID from the specified byte array.
3. `long getMostSignificantBits()`: This method returns the most significant bits of this UUID.
4. `long getLeastSignificantBits()`: This method returns the least significant bits of this UUID.
5. `int version()`: This method returns the version number of this UUID.
================================================================

Sample: 73 Vector
----------------------------------------------------------------
1. `void addElement(Object obj)`: This method appends the specified element to the end of this Vector.
2. `void insertElementAt(Object obj, int index)`: This method inserts the specified element at the specified position in this Vector.
3. `Object elementAt(int index)`: This method returns the element at the specified position in this Vector.
4. `void removeElement(Object obj)`: This method removes the first occurrence of the specified element from this Vector.
5. `int indexOf(Object obj)`: This method returns the index of the first occurrence of the specified element in this Vector.
================================================================

Sample: 74 WeakHashMap
----------------------------------------------------------------
1. `void clear()`: This method removes all of the mappings from this map.
2. `boolean containsKey(Object key)`: This method returns true if this map contains a mapping for the specified key.
3. `boolean containsValue(Object value)`: This method returns true if this map maps one or more keys to the specified value.
4. `Object get(Object key)`: This method returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.
5. `Object remove(Object key)`: This method removes the mapping for a key from this map if it is present.
================================================================

