ClassName,Method,Return Type,Description
AbstractCollection,add(E e),boolean,Ensures that this collection contains the specified element (optional operation).
AbstractCollection,addAll(Collection<? extends E> c),boolean,Adds all of the elements in the specified collection to this collection (optional operation).
AbstractCollection,clear(),void,Removes all of the elements from this collection (optional operation).
AbstractCollection,contains(Object o),boolean,Returns true if this collection contains the specified element.
AbstractCollection,containsAll(Collection<?> c),boolean,Returns true if this collection contains all of the elements in the specified collection.
AbstractCollection,isEmpty(),boolean,Returns true if this collection contains no elements.
AbstractCollection,iterator(),abstract Iterator<E>,Returns an iterator over the elements contained in this collection.
AbstractCollection,remove(Object o),boolean,"Removes a single instance of the specified element from this collection, if it is present (optional operation)."
AbstractCollection,removeAll(Collection<?> c),boolean,Removes all of this collection's elements that are also contained in the specified collection (optional operation).
AbstractCollection,retainAll(Collection<?> c),boolean,Retains only the elements in this collection that are contained in the specified collection (optional operation).
AbstractCollection,size(),abstract int,Returns the number of elements in this collection.
AbstractCollection,toArray(),Object[],Returns an array containing all of the elements in this collection.
AbstractCollection,toArray(T[] a),<T> T[],Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array.
AbstractCollection,toString(),String,Returns a string representation of this collection.
AbstractList,add(E e),boolean,Appends the specified element to the end of this list (optional operation).
AbstractList,"add(int index, E element)",void,Inserts the specified element at the specified position in this list (optional operation).
AbstractList,"addAll(int index, Collection<? extends E> c)",boolean,Inserts all of the elements in the specified collection into this list at the specified position (optional operation).
AbstractList,clear(),void,Removes all of the elements from this list (optional operation).
AbstractList,equals(Object o),boolean,Compares the specified object with this list for equality.
AbstractList,get(int index),abstract E,Returns the element at the specified position in this list.
AbstractList,hashCode(),int,Returns the hash code value for this list.
AbstractList,indexOf(Object o),int,"Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element."
AbstractList,iterator(),Iterator<E>,Returns an iterator over the elements in this list in proper sequence.
AbstractList,lastIndexOf(Object o),int,"Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element."
AbstractList,listIterator(),ListIterator<E>,Returns a list iterator over the elements in this list (in proper sequence).
AbstractList,listIterator(int index),ListIterator<E>,"Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list."
AbstractList,remove(int index),E,Removes the element at the specified position in this list (optional operation).
AbstractList,"removeRange(int fromIndex, int toIndex)",protected void,"Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive."
AbstractList,"set(int index, E element)",E,Replaces the element at the specified position in this list with the specified element (optional operation).
AbstractList,"subList(int fromIndex, int toIndex)",List<E>,"Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive."
AbstractMap,clear(),void,Removes all of the mappings from this map (optional operation).
AbstractMap,clone(),protected Object,Returns a shallow copy of this AbstractMap instance: the keys and values themselves are not cloned.
AbstractMap,containsKey(Object key),boolean,Returns true if this map contains a mapping for the specified key.
AbstractMap,containsValue(Object value),boolean,Returns true if this map maps one or more keys to the specified value.
AbstractMap,entrySet(),"abstract Set<Map.Entry<K,V>>",Returns a Set view of the mappings contained in this map.
AbstractMap,equals(Object o),boolean,Compares the specified object with this map for equality.
AbstractMap,get(Object key),V,"Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key."
AbstractMap,hashCode(),int,Returns the hash code value for this map.
AbstractMap,isEmpty(),boolean,Returns true if this map contains no key-value mappings.
AbstractMap,keySet(),Set<K>,Returns a Set view of the keys contained in this map.
AbstractMap,"put(K key, V value)",V,Associates the specified value with the specified key in this map (optional operation).
AbstractMap,"putAll(Map<? extends K,? extends V> m)",void,Copies all of the mappings from the specified map to this map (optional operation).
AbstractMap,remove(Object key),V,Removes the mapping for a key from this map if it is present (optional operation).
AbstractMap,size(),int,Returns the number of key-value mappings in this map.
AbstractMap,toString(),String,Returns a string representation of this map.
AbstractMap,values(),Collection<V>,Returns a Collection view of the values contained in this map.
AbstractMap.SimpleEntry,equals(Object o),boolean,Compares the specified object with this entry for equality.
AbstractMap.SimpleEntry,getKey(),K,Returns the key corresponding to this entry.
AbstractMap.SimpleEntry,getValue(),V,Returns the value corresponding to this entry.
AbstractMap.SimpleEntry,hashCode(),int,Returns the hash code value for this map entry.
AbstractMap.SimpleEntry,setValue(V value),V,Replaces the value corresponding to this entry with the specified value.
AbstractMap.SimpleEntry,toString(),String,Returns a String representation of this map entry.
AbstractMap.SimpleImmutableEntry,equals(Object o),boolean,Compares the specified object with this entry for equality.
AbstractMap.SimpleImmutableEntry,getKey(),K,Returns the key corresponding to this entry.
AbstractMap.SimpleImmutableEntry,getValue(),V,Returns the value corresponding to this entry.
AbstractMap.SimpleImmutableEntry,hashCode(),int,Returns the hash code value for this map entry.
AbstractMap.SimpleImmutableEntry,setValue(V value),V,Replaces the value corresponding to this entry with the specified value (optional operation).
AbstractMap.SimpleImmutableEntry,toString(),String,Returns a String representation of this map entry.
AbstractQueue,add(E e),boolean,"Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available."
AbstractQueue,addAll(Collection<? extends E> c),boolean,Adds all of the elements in the specified collection to this queue.
AbstractQueue,clear(),void,Removes all of the elements from this queue.
AbstractQueue,element(),E,"Retrieves, but does not remove, the head of this queue."
AbstractQueue,remove(),E,Retrieves and removes the head of this queue.
AbstractSequentialList,"add(int index, E element)",void,Inserts the specified element at the specified position in this list (optional operation).
AbstractSequentialList,"addAll(int index, Collection<? extends E> c)",boolean,Inserts all of the elements in the specified collection into this list at the specified position (optional operation).
AbstractSequentialList,get(int index),E,Returns the element at the specified position in this list.
AbstractSequentialList,iterator(),Iterator<E>,Returns an iterator over the elements in this list (in proper sequence).
AbstractSequentialList,listIterator(int index),abstract ListIterator<E>,Returns a list iterator over the elements in this list (in proper sequence).
AbstractSequentialList,remove(int index),E,Removes the element at the specified position in this list (optional operation).
AbstractSequentialList,"set(int index, E element)",E,Replaces the element at the specified position in this list with the specified element (optional operation).
AbstractSet,equals(Object o),boolean,Compares the specified object with this set for equality.
AbstractSet,hashCode(),int,Returns the hash code value for this set.
AbstractSet,removeAll(Collection<?> c),boolean,Removes from this set all of its elements that are contained in the specified collection (optional operation).
ArrayDeque,add(E e),boolean,Inserts the specified element at the end of this deque.
ArrayDeque,addFirst(E e),void,Inserts the specified element at the front of this deque.
ArrayDeque,addLast(E e),void,Inserts the specified element at the end of this deque.
ArrayDeque,clear(),void,Removes all of the elements from this deque.
ArrayDeque,clone(),ArrayDeque<E>,Returns a copy of this deque.
ArrayDeque,contains(Object o),boolean,Returns true if this deque contains the specified element.
ArrayDeque,descendingIterator(),Iterator<E>,Returns an iterator over the elements in this deque in reverse sequential order.
ArrayDeque,element(),E,"Retrieves, but does not remove, the head of the queue represented by this deque."
ArrayDeque,getFirst(),E,"Retrieves, but does not remove, the first element of this deque."
ArrayDeque,getLast(),E,"Retrieves, but does not remove, the last element of this deque."
ArrayDeque,isEmpty(),boolean,Returns true if this deque contains no elements.
ArrayDeque,iterator(),Iterator<E>,Returns an iterator over the elements in this deque.
ArrayDeque,offer(E e),boolean,Inserts the specified element at the end of this deque.
ArrayDeque,offerFirst(E e),boolean,Inserts the specified element at the front of this deque.
ArrayDeque,offerLast(E e),boolean,Inserts the specified element at the end of this deque.
ArrayDeque,peek(),E,"Retrieves, but does not remove, the head of the queue represented by this deque, or returns null if this deque is empty."
ArrayDeque,peekFirst(),E,"Retrieves, but does not remove, the first element of this deque, or returns null if this deque is empty."
ArrayDeque,peekLast(),E,"Retrieves, but does not remove, the last element of this deque, or returns null if this deque is empty."
ArrayDeque,poll(),E,"Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty."
ArrayDeque,pollFirst(),E,"Retrieves and removes the first element of this deque, or returns null if this deque is empty."
ArrayDeque,pollLast(),E,"Retrieves and removes the last element of this deque, or returns null if this deque is empty."
ArrayDeque,pop(),E,Pops an element from the stack represented by this deque.
ArrayDeque,push(E e),void,Pushes an element onto the stack represented by this deque.
ArrayDeque,remove(),E,Retrieves and removes the head of the queue represented by this deque.
ArrayDeque,remove(Object o),boolean,Removes a single instance of the specified element from this deque.
ArrayDeque,removeFirst(),E,Retrieves and removes the first element of this deque.
ArrayDeque,removeFirstOccurrence(Object o),boolean,Removes the first occurrence of the specified element in this deque (when traversing the deque from head to tail).
ArrayDeque,removeLast(),E,Retrieves and removes the last element of this deque.
ArrayDeque,removeLastOccurrence(Object o),boolean,Removes the last occurrence of the specified element in this deque (when traversing the deque from head to tail).
ArrayDeque,size(),int,Returns the number of elements in this deque.
ArrayDeque,spliterator(),Spliterator<E>,Creates a late-binding and fail-fast Spliterator over the elements in this deque.
ArrayDeque,toArray(),Object[],Returns an array containing all of the elements in this deque in proper sequence (from first to last element).
ArrayDeque,toArray(T[] a),<T> T[],Returns an array containing all of the elements in this deque in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.
ArrayList,add(E e),boolean,Appends the specified element to the end of this list.
ArrayList,"add(int index, E element)",void,Inserts the specified element at the specified position in this list.
ArrayList,addAll(Collection<? extends E> c),boolean,"Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator."
ArrayList,"addAll(int index, Collection<? extends E> c)",boolean,"Inserts all of the elements in the specified collection into this list, starting at the specified position."
ArrayList,clear(),void,Removes all of the elements from this list.
ArrayList,clone(),Object,Returns a shallow copy of this ArrayList instance.
ArrayList,contains(Object o),boolean,Returns true if this list contains the specified element.
ArrayList,ensureCapacity(int minCapacity),void,"Increases the capacity of this ArrayList instance, if necessary, to ensure that it can hold at least the number of elements specified by the minimum capacity argument."
ArrayList,forEach(Consumer<? super E> action),void,Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.
ArrayList,get(int index),E,Returns the element at the specified position in this list.
ArrayList,indexOf(Object o),int,"Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element."
ArrayList,isEmpty(),boolean,Returns true if this list contains no elements.
ArrayList,iterator(),Iterator<E>,Returns an iterator over the elements in this list in proper sequence.
ArrayList,lastIndexOf(Object o),int,"Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element."
ArrayList,listIterator(),ListIterator<E>,Returns a list iterator over the elements in this list (in proper sequence).
ArrayList,listIterator(int index),ListIterator<E>,"Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list."
ArrayList,remove(int index),E,Removes the element at the specified position in this list.
ArrayList,remove(Object o),boolean,"Removes the first occurrence of the specified element from this list, if it is present."
ArrayList,removeAll(Collection<?> c),boolean,Removes from this list all of its elements that are contained in the specified collection.
ArrayList,removeIf(Predicate<? super E> filter),boolean,Removes all of the elements of this collection that satisfy the given predicate.
ArrayList,"removeRange(int fromIndex, int toIndex)",protected void,"Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive."
ArrayList,replaceAll(UnaryOperator<E> operator),void,Replaces each element of this list with the result of applying the operator to that element.
ArrayList,retainAll(Collection<?> c),boolean,Retains only the elements in this list that are contained in the specified collection.
ArrayList,"set(int index, E element)",E,Replaces the element at the specified position in this list with the specified element.
ArrayList,size(),int,Returns the number of elements in this list.
ArrayList,sort(Comparator<? super E> c),void,Sorts this list according to the order induced by the specified Comparator.
ArrayList,spliterator(),Spliterator<E>,Creates a late-binding and fail-fast Spliterator over the elements in this list.
ArrayList,"subList(int fromIndex, int toIndex)",List<E>,"Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive."
ArrayList,toArray(),Object[],Returns an array containing all of the elements in this list in proper sequence (from first to last element).
ArrayList,toArray(T[] a),<T> T[],Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.
ArrayList,trimToSize(),void,Trims the capacity of this ArrayList instance to be the list's current size.
Arrays,asList(T... a),static <T> List<T>,Returns a fixed-size list backed by the specified array.
Arrays,"binarySearch(byte[] a, byte key)",static int,Searches the specified array of bytes for the specified value using the binary search algorithm.
Arrays,"binarySearch(byte[] a, int fromIndex, int toIndex, byte key)",static int,Searches a range of the specified array of bytes for the specified value using the binary search algorithm.
Arrays,"binarySearch(char[] a, char key)",static int,Searches the specified array of chars for the specified value using the binary search algorithm.
Arrays,"binarySearch(char[] a, int fromIndex, int toIndex, char key)",static int,Searches a range of the specified array of chars for the specified value using the binary search algorithm.
Arrays,"binarySearch(double[] a, double key)",static int,Searches the specified array of doubles for the specified value using the binary search algorithm.
Arrays,"binarySearch(double[] a, int fromIndex, int toIndex, double key)",static int,Searches a range of the specified array of doubles for the specified value using the binary search algorithm.
Arrays,"binarySearch(float[] a, float key)",static int,Searches the specified array of floats for the specified value using the binary search algorithm.
Arrays,"binarySearch(float[] a, int fromIndex, int toIndex, float key)",static int,Searches a range of the specified array of floats for the specified value using the binary search algorithm.
Arrays,"binarySearch(int[] a, int key)",static int,Searches the specified array of ints for the specified value using the binary search algorithm.
Arrays,"binarySearch(int[] a, int fromIndex, int toIndex, int key)",static int,Searches a range of the specified array of ints for the specified value using the binary search algorithm.
Arrays,"binarySearch(long[] a, int fromIndex, int toIndex, long key)",static int,Searches a range of the specified array of longs for the specified value using the binary search algorithm.
Arrays,"binarySearch(long[] a, long key)",static int,Searches the specified array of longs for the specified value using the binary search algorithm.
Arrays,"binarySearch(Object[] a, int fromIndex, int toIndex, Object key)",static int,Searches a range of the specified array for the specified object using the binary search algorithm.
Arrays,"binarySearch(Object[] a, Object key)",static int,Searches the specified array for the specified object using the binary search algorithm.
Arrays,"binarySearch(short[] a, int fromIndex, int toIndex, short key)",static int,Searches a range of the specified array of shorts for the specified value using the binary search algorithm.
Arrays,"binarySearch(short[] a, short key)",static int,Searches the specified array of shorts for the specified value using the binary search algorithm.
Arrays,"binarySearch(T[] a, int fromIndex, int toIndex, T key, Comparator<? super T> c)",static <T> int,Searches a range of the specified array for the specified object using the binary search algorithm.
Arrays,"binarySearch(T[] a, T key, Comparator<? super T> c)",static <T> int,Searches the specified array for the specified object using the binary search algorithm.
Arrays,"copyOf(boolean[] original, int newLength)",static boolean[],"Copies the specified array, truncating or padding with false (if necessary) so the copy has the specified length."
Arrays,"copyOf(byte[] original, int newLength)",static byte[],"Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length."
Arrays,"copyOf(char[] original, int newLength)",static char[],"Copies the specified array, truncating or padding with null characters (if necessary) so the copy has the specified length."
Arrays,"copyOf(double[] original, int newLength)",static double[],"Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length."
Arrays,"copyOf(float[] original, int newLength)",static float[],"Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length."
Arrays,"copyOf(int[] original, int newLength)",static int[],"Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length."
Arrays,"copyOf(long[] original, int newLength)",static long[],"Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length."
Arrays,"copyOf(short[] original, int newLength)",static short[],"Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length."
Arrays,"copyOf(T[] original, int newLength)",static <T> T[],"Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length."
Arrays,"copyOf(U[] original, int newLength, Class<? extends T[]> newType)","static <T,U> T[]","Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length."
Arrays,"copyOfRange(boolean[] original, int from, int to)",static boolean[],Copies the specified range of the specified array into a new array.
Arrays,"copyOfRange(byte[] original, int from, int to)",static byte[],Copies the specified range of the specified array into a new array.
Arrays,"copyOfRange(char[] original, int from, int to)",static char[],Copies the specified range of the specified array into a new array.
Arrays,"copyOfRange(double[] original, int from, int to)",static double[],Copies the specified range of the specified array into a new array.
Arrays,"copyOfRange(float[] original, int from, int to)",static float[],Copies the specified range of the specified array into a new array.
Arrays,"copyOfRange(int[] original, int from, int to)",static int[],Copies the specified range of the specified array into a new array.
Arrays,"copyOfRange(long[] original, int from, int to)",static long[],Copies the specified range of the specified array into a new array.
Arrays,"copyOfRange(short[] original, int from, int to)",static short[],Copies the specified range of the specified array into a new array.
Arrays,"copyOfRange(T[] original, int from, int to)",static <T> T[],Copies the specified range of the specified array into a new array.
Arrays,"copyOfRange(U[] original, int from, int to, Class<? extends T[]> newType)","static <T,U> T[]",Copies the specified range of the specified array into a new array.
Arrays,"deepEquals(Object[] a1, Object[] a2)",static boolean,Returns true if the two specified arrays are deeply equal to one another.
Arrays,deepHashCode(Object[] a),static int,"Returns a hash code based on the ""deep contents"" of the specified array."
Arrays,deepToString(Object[] a),static String,"Returns a string representation of the ""deep contents"" of the specified array."
Arrays,"equals(boolean[] a, boolean[] a2)",static boolean,Returns true if the two specified arrays of booleans are equal to one another.
Arrays,"equals(byte[] a, byte[] a2)",static boolean,Returns true if the two specified arrays of bytes are equal to one another.
Arrays,"equals(char[] a, char[] a2)",static boolean,Returns true if the two specified arrays of chars are equal to one another.
Arrays,"equals(double[] a, double[] a2)",static boolean,Returns true if the two specified arrays of doubles are equal to one another.
Arrays,"equals(float[] a, float[] a2)",static boolean,Returns true if the two specified arrays of floats are equal to one another.
Arrays,"equals(int[] a, int[] a2)",static boolean,Returns true if the two specified arrays of ints are equal to one another.
Arrays,"equals(long[] a, long[] a2)",static boolean,Returns true if the two specified arrays of longs are equal to one another.
Arrays,"equals(Object[] a, Object[] a2)",static boolean,Returns true if the two specified arrays of Objects are equal to one another.
Arrays,"equals(short[] a, short[] a2)",static boolean,Returns true if the two specified arrays of shorts are equal to one another.
Arrays,"fill(boolean[] a, boolean val)",static void,Assigns the specified boolean value to each element of the specified array of booleans.
Arrays,"fill(boolean[] a, int fromIndex, int toIndex, boolean val)",static void,Assigns the specified boolean value to each element of the specified range of the specified array of booleans.
Arrays,"fill(byte[] a, byte val)",static void,Assigns the specified byte value to each element of the specified array of bytes.
Arrays,"fill(byte[] a, int fromIndex, int toIndex, byte val)",static void,Assigns the specified byte value to each element of the specified range of the specified array of bytes.
Arrays,"fill(char[] a, char val)",static void,Assigns the specified char value to each element of the specified array of chars.
Arrays,"fill(char[] a, int fromIndex, int toIndex, char val)",static void,Assigns the specified char value to each element of the specified range of the specified array of chars.
Arrays,"fill(double[] a, double val)",static void,Assigns the specified double value to each element of the specified array of doubles.
Arrays,"fill(double[] a, int fromIndex, int toIndex, double val)",static void,Assigns the specified double value to each element of the specified range of the specified array of doubles.
Arrays,"fill(float[] a, float val)",static void,Assigns the specified float value to each element of the specified array of floats.
Arrays,"fill(float[] a, int fromIndex, int toIndex, float val)",static void,Assigns the specified float value to each element of the specified range of the specified array of floats.
Arrays,"fill(int[] a, int val)",static void,Assigns the specified int value to each element of the specified array of ints.
Arrays,"fill(int[] a, int fromIndex, int toIndex, int val)",static void,Assigns the specified int value to each element of the specified range of the specified array of ints.
Arrays,"fill(long[] a, int fromIndex, int toIndex, long val)",static void,Assigns the specified long value to each element of the specified range of the specified array of longs.
Arrays,"fill(long[] a, long val)",static void,Assigns the specified long value to each element of the specified array of longs.
Arrays,"fill(Object[] a, int fromIndex, int toIndex, Object val)",static void,Assigns the specified Object reference to each element of the specified range of the specified array of Objects.
Arrays,"fill(Object[] a, Object val)",static void,Assigns the specified Object reference to each element of the specified array of Objects.
Arrays,"fill(short[] a, int fromIndex, int toIndex, short val)",static void,Assigns the specified short value to each element of the specified range of the specified array of shorts.
Arrays,"fill(short[] a, short val)",static void,Assigns the specified short value to each element of the specified array of shorts.
Arrays,hashCode(boolean[] a),static int,Returns a hash code based on the contents of the specified array.
Arrays,hashCode(byte[] a),static int,Returns a hash code based on the contents of the specified array.
Arrays,hashCode(char[] a),static int,Returns a hash code based on the contents of the specified array.
Arrays,hashCode(double[] a),static int,Returns a hash code based on the contents of the specified array.
Arrays,hashCode(float[] a),static int,Returns a hash code based on the contents of the specified array.
Arrays,hashCode(int[] a),static int,Returns a hash code based on the contents of the specified array.
Arrays,hashCode(long[] a),static int,Returns a hash code based on the contents of the specified array.
Arrays,hashCode(Object[] a),static int,Returns a hash code based on the contents of the specified array.
Arrays,hashCode(short[] a),static int,Returns a hash code based on the contents of the specified array.
Arrays,"parallelPrefix(double[] array, DoubleBinaryOperator op)",static void,"Cumulates, in parallel, each element of the given array in place, using the supplied function."
Arrays,"parallelPrefix(double[] array, int fromIndex, int toIndex, DoubleBinaryOperator op)",static void,"Performs parallelPrefix(double[], DoubleBinaryOperator) for the given subrange of the array."
Arrays,"parallelPrefix(int[] array, IntBinaryOperator op)",static void,"Cumulates, in parallel, each element of the given array in place, using the supplied function."
Arrays,"parallelPrefix(int[] array, int fromIndex, int toIndex, IntBinaryOperator op)",static void,"Performs parallelPrefix(int[], IntBinaryOperator) for the given subrange of the array."
Arrays,"parallelPrefix(long[] array, int fromIndex, int toIndex, LongBinaryOperator op)",static void,"Performs parallelPrefix(long[], LongBinaryOperator) for the given subrange of the array."
Arrays,"parallelPrefix(long[] array, LongBinaryOperator op)",static void,"Cumulates, in parallel, each element of the given array in place, using the supplied function."
Arrays,"parallelPrefix(T[] array, BinaryOperator<T> op)",static <T> void,"Cumulates, in parallel, each element of the given array in place, using the supplied function."
Arrays,"parallelPrefix(T[] array, int fromIndex, int toIndex, BinaryOperator<T> op)",static <T> void,"Performs parallelPrefix(Object[], BinaryOperator) for the given subrange of the array."
Arrays,"parallelSetAll(double[] array, IntToDoubleFunction generator)",static void,"Set all elements of the specified array, in parallel, using the provided generator function to compute each element."
Arrays,"parallelSetAll(int[] array, IntUnaryOperator generator)",static void,"Set all elements of the specified array, in parallel, using the provided generator function to compute each element."
Arrays,"parallelSetAll(long[] array, IntToLongFunction generator)",static void,"Set all elements of the specified array, in parallel, using the provided generator function to compute each element."
Arrays,"parallelSetAll(T[] array, IntFunction<? extends T> generator)",static <T> void,"Set all elements of the specified array, in parallel, using the provided generator function to compute each element."
Arrays,parallelSort(byte[] a),static void,Sorts the specified array into ascending numerical order.
Arrays,"parallelSort(byte[] a, int fromIndex, int toIndex)",static void,Sorts the specified range of the array into ascending numerical order.
Arrays,parallelSort(char[] a),static void,Sorts the specified array into ascending numerical order.
Arrays,"parallelSort(char[] a, int fromIndex, int toIndex)",static void,Sorts the specified range of the array into ascending numerical order.
Arrays,parallelSort(double[] a),static void,Sorts the specified array into ascending numerical order.
Arrays,"parallelSort(double[] a, int fromIndex, int toIndex)",static void,Sorts the specified range of the array into ascending numerical order.
Arrays,parallelSort(float[] a),static void,Sorts the specified array into ascending numerical order.
Arrays,"parallelSort(float[] a, int fromIndex, int toIndex)",static void,Sorts the specified range of the array into ascending numerical order.
Arrays,parallelSort(int[] a),static void,Sorts the specified array into ascending numerical order.
Arrays,"parallelSort(int[] a, int fromIndex, int toIndex)",static void,Sorts the specified range of the array into ascending numerical order.
Arrays,parallelSort(long[] a),static void,Sorts the specified array into ascending numerical order.
Arrays,"parallelSort(long[] a, int fromIndex, int toIndex)",static void,Sorts the specified range of the array into ascending numerical order.
Arrays,parallelSort(short[] a),static void,Sorts the specified array into ascending numerical order.
Arrays,"parallelSort(short[] a, int fromIndex, int toIndex)",static void,Sorts the specified range of the array into ascending numerical order.
Arrays,parallelSort(T[] a),static <T extends Comparable<? super T>>void,"Sorts the specified array of objects into ascending order, according to the natural ordering of its elements."
Arrays,"parallelSort(T[] a, Comparator<? super T> cmp)",static <T> void,Sorts the specified array of objects according to the order induced by the specified comparator.
Arrays,"parallelSort(T[] a, int fromIndex, int toIndex)",static <T extends Comparable<? super T>>void,"Sorts the specified range of the specified array of objects into ascending order, according to the natural ordering of its elements."
Arrays,"parallelSort(T[] a, int fromIndex, int toIndex, Comparator<? super T> cmp)",static <T> void,Sorts the specified range of the specified array of objects according to the order induced by the specified comparator.
Arrays,"setAll(double[] array, IntToDoubleFunction generator)",static void,"Set all elements of the specified array, using the provided generator function to compute each element."
Arrays,"setAll(int[] array, IntUnaryOperator generator)",static void,"Set all elements of the specified array, using the provided generator function to compute each element."
Arrays,"setAll(long[] array, IntToLongFunction generator)",static void,"Set all elements of the specified array, using the provided generator function to compute each element."
Arrays,"setAll(T[] array, IntFunction<? extends T> generator)",static <T> void,"Set all elements of the specified array, using the provided generator function to compute each element."
Arrays,sort(byte[] a),static void,Sorts the specified array into ascending numerical order.
Arrays,"sort(byte[] a, int fromIndex, int toIndex)",static void,Sorts the specified range of the array into ascending order.
Arrays,sort(char[] a),static void,Sorts the specified array into ascending numerical order.
Arrays,"sort(char[] a, int fromIndex, int toIndex)",static void,Sorts the specified range of the array into ascending order.
Arrays,sort(double[] a),static void,Sorts the specified array into ascending numerical order.
Arrays,"sort(double[] a, int fromIndex, int toIndex)",static void,Sorts the specified range of the array into ascending order.
Arrays,sort(float[] a),static void,Sorts the specified array into ascending numerical order.
Arrays,"sort(float[] a, int fromIndex, int toIndex)",static void,Sorts the specified range of the array into ascending order.
Arrays,sort(int[] a),static void,Sorts the specified array into ascending numerical order.
Arrays,"sort(int[] a, int fromIndex, int toIndex)",static void,Sorts the specified range of the array into ascending order.
Arrays,sort(long[] a),static void,Sorts the specified array into ascending numerical order.
Arrays,"sort(long[] a, int fromIndex, int toIndex)",static void,Sorts the specified range of the array into ascending order.
Arrays,sort(Object[] a),static void,"Sorts the specified array of objects into ascending order, according to the natural ordering of its elements."
Arrays,"sort(Object[] a, int fromIndex, int toIndex)",static void,"Sorts the specified range of the specified array of objects into ascending order, according to the natural ordering of its elements."
Arrays,sort(short[] a),static void,Sorts the specified array into ascending numerical order.
Arrays,"sort(short[] a, int fromIndex, int toIndex)",static void,Sorts the specified range of the array into ascending order.
Arrays,"sort(T[] a, Comparator<? super T> c)",static <T> void,Sorts the specified array of objects according to the order induced by the specified comparator.
Arrays,"sort(T[] a, int fromIndex, int toIndex, Comparator<? super T> c)",static <T> void,Sorts the specified range of the specified array of objects according to the order induced by the specified comparator.
Arrays,spliterator(double[] array),static Spliterator.OfDouble,Returns a Spliterator.OfDouble covering all of the specified array.
Arrays,"spliterator(double[] array, int startInclusive, int endExclusive)",static Spliterator.OfDouble,Returns a Spliterator.OfDouble covering the specified range of the specified array.
Arrays,spliterator(int[] array),static Spliterator.OfInt,Returns a Spliterator.OfInt covering all of the specified array.
Arrays,"spliterator(int[] array, int startInclusive, int endExclusive)",static Spliterator.OfInt,Returns a Spliterator.OfInt covering the specified range of the specified array.
Arrays,spliterator(long[] array),static Spliterator.OfLong,Returns a Spliterator.OfLong covering all of the specified array.
Arrays,"spliterator(long[] array, int startInclusive, int endExclusive)",static Spliterator.OfLong,Returns a Spliterator.OfLong covering the specified range of the specified array.
Arrays,spliterator(T[] array),static <T> Spliterator<T>,Returns a Spliterator covering all of the specified array.
Arrays,"spliterator(T[] array, int startInclusive, int endExclusive)",static <T> Spliterator<T>,Returns a Spliterator covering the specified range of the specified array.
Arrays,stream(double[] array),static DoubleStream,Returns a sequential DoubleStream with the specified array as its source.
Arrays,"stream(double[] array, int startInclusive, int endExclusive)",static DoubleStream,Returns a sequential DoubleStream with the specified range of the specified array as its source.
Arrays,stream(int[] array),static IntStream,Returns a sequential IntStream with the specified array as its source.
Arrays,"stream(int[] array, int startInclusive, int endExclusive)",static IntStream,Returns a sequential IntStream with the specified range of the specified array as its source.
Arrays,stream(long[] array),static LongStream,Returns a sequential LongStream with the specified array as its source.
Arrays,"stream(long[] array, int startInclusive, int endExclusive)",static LongStream,Returns a sequential LongStream with the specified range of the specified array as its source.
Arrays,stream(T[] array),static <T> Stream<T>,Returns a sequential Stream with the specified array as its source.
Arrays,"stream(T[] array, int startInclusive, int endExclusive)",static <T> Stream<T>,Returns a sequential Stream with the specified range of the specified array as its source.
Arrays,toString(boolean[] a),static String,Returns a string representation of the contents of the specified array.
Arrays,toString(byte[] a),static String,Returns a string representation of the contents of the specified array.
Arrays,toString(char[] a),static String,Returns a string representation of the contents of the specified array.
Arrays,toString(double[] a),static String,Returns a string representation of the contents of the specified array.
Arrays,toString(float[] a),static String,Returns a string representation of the contents of the specified array.
Arrays,toString(int[] a),static String,Returns a string representation of the contents of the specified array.
Arrays,toString(long[] a),static String,Returns a string representation of the contents of the specified array.
Arrays,toString(Object[] a),static String,Returns a string representation of the contents of the specified array.
Arrays,toString(short[] a),static String,Returns a string representation of the contents of the specified array.
Base64,getDecoder(),static Base64.Decoder,Returns a Base64.Decoder that decodes using the Basic type base64 encoding scheme.
Base64,getEncoder(),static Base64.Encoder,Returns a Base64.Encoder that encodes using the Basic type base64 encoding scheme.
Base64,getMimeDecoder(),static Base64.Decoder,Returns a Base64.Decoder that decodes using the MIME type base64 decoding scheme.
Base64,getMimeEncoder(),static Base64.Encoder,Returns a Base64.Encoder that encodes using the MIME type base64 encoding scheme.
Base64,"getMimeEncoder(int lineLength, byte[] lineSeparator)",static Base64.Encoder,Returns a Base64.Encoder that encodes using the MIME type base64 encoding scheme with specified line length and line separators.
Base64,getUrlDecoder(),static Base64.Decoder,Returns a Base64.Decoder that decodes using the URL and Filename safe type base64 encoding scheme.
Base64,getUrlEncoder(),static Base64.Encoder,Returns a Base64.Encoder that encodes using the URL and Filename safe type base64 encoding scheme.
Base64.Decoder,decode(byte[] src),byte[],"Decodes all bytes from the input byte array using the Base64 encoding scheme, writing the results into a newly-allocated output byte array."
Base64.Decoder,"decode(byte[] src, byte[] dst)",int,"Decodes all bytes from the input byte array using the Base64 encoding scheme, writing the results into the given output byte array, starting at offset 0."
Base64.Decoder,decode(ByteBuffer buffer),ByteBuffer,"Decodes all bytes from the input byte buffer using the Base64 encoding scheme, writing the results into a newly-allocated ByteBuffer."
Base64.Decoder,decode(String src),byte[],Decodes a Base64 encoded String into a newly-allocated byte array using the Base64 encoding scheme.
Base64.Decoder,wrap(InputStream is),InputStream,Returns an input stream for decoding Base64 encoded byte stream.
Base64.Encoder,encode(byte[] src),byte[],Encodes all bytes from the specified byte array into a newly-allocated byte array using the Base64 encoding scheme.
Base64.Encoder,"encode(byte[] src, byte[] dst)",int,"Encodes all bytes from the specified byte array using the Base64 encoding scheme, writing the resulting bytes to the given output byte array, starting at offset 0."
Base64.Encoder,encode(ByteBuffer buffer),ByteBuffer,Encodes all remaining bytes from the specified byte buffer into a newly-allocated ByteBuffer using the Base64 encoding scheme.
Base64.Encoder,encodeToString(byte[] src),String,Encodes the specified byte array into a String using the Base64 encoding scheme.
Base64.Encoder,withoutPadding(),Base64.Encoder,"Returns an encoder instance that encodes equivalently to this one, but without adding any padding character at the end of the encoded byte data."
Base64.Encoder,wrap(OutputStream os),OutputStream,Wraps an output stream for encoding byte data using the Base64 encoding scheme.
BitSet,and(BitSet set),void,Performs a logical AND of this target bit set with the argument bit set.
BitSet,andNot(BitSet set),void,Clears all of the bits in this BitSet whose corresponding bit is set in the specified BitSet.
BitSet,cardinality(),int,Returns the number of bits set to true in this BitSet.
BitSet,clear(),void,Sets all of the bits in this BitSet to false.
BitSet,clear(int bitIndex),void,Sets the bit specified by the index to false.
BitSet,"clear(int fromIndex, int toIndex)",void,Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to false.
BitSet,clone(),Object,Cloning this BitSet produces a new BitSet that is equal to it.
BitSet,equals(Object obj),boolean,Compares this object against the specified object.
BitSet,flip(int bitIndex),void,Sets the bit at the specified index to the complement of its current value.
BitSet,"flip(int fromIndex, int toIndex)",void,Sets each bit from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to the complement of its current value.
BitSet,get(int bitIndex),boolean,Returns the value of the bit with the specified index.
BitSet,"get(int fromIndex, int toIndex)",BitSet,Returns a new BitSet composed of bits from this BitSet from fromIndex (inclusive) to toIndex (exclusive).
BitSet,hashCode(),int,Returns the hash code value for this bit set.
BitSet,intersects(BitSet set),boolean,Returns true if the specified BitSet has any bits set to true that are also set to true in this BitSet.
BitSet,isEmpty(),boolean,Returns true if this BitSet contains no bits that are set to true.
BitSet,length(),int,"Returns the ""logical size"" of this BitSet: the index of the highest set bit in the BitSet plus one."
BitSet,nextClearBit(int fromIndex),int,Returns the index of the first bit that is set to false that occurs on or after the specified starting index.
BitSet,nextSetBit(int fromIndex),int,Returns the index of the first bit that is set to true that occurs on or after the specified starting index.
BitSet,or(BitSet set),void,Performs a logical OR of this bit set with the bit set argument.
BitSet,previousClearBit(int fromIndex),int,Returns the index of the nearest bit that is set to false that occurs on or before the specified starting index.
BitSet,previousSetBit(int fromIndex),int,Returns the index of the nearest bit that is set to true that occurs on or before the specified starting index.
BitSet,set(int bitIndex),void,Sets the bit at the specified index to true.
BitSet,"set(int bitIndex, boolean value)",void,Sets the bit at the specified index to the specified value.
BitSet,"set(int fromIndex, int toIndex)",void,Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to true.
BitSet,"set(int fromIndex, int toIndex, boolean value)",void,Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to the specified value.
BitSet,size(),int,Returns the number of bits of space actually in use by this BitSet to represent bit values.
BitSet,stream(),IntStream,Returns a stream of indices for which this BitSet contains a bit in the set state.
BitSet,toByteArray(),byte[],Returns a new byte array containing all the bits in this bit set.
BitSet,toLongArray(),long[],Returns a new long array containing all the bits in this bit set.
BitSet,toString(),String,Returns a string representation of this bit set.
BitSet,valueOf(byte[] bytes),static BitSet,Returns a new bit set containing all the bits in the given byte array.
BitSet,valueOf(ByteBuffer bb),static BitSet,Returns a new bit set containing all the bits in the given byte buffer between its position and limit.
BitSet,valueOf(long[] longs),static BitSet,Returns a new bit set containing all the bits in the given long array.
BitSet,valueOf(LongBuffer lb),static BitSet,Returns a new bit set containing all the bits in the given long buffer between its position and limit.
BitSet,xor(BitSet set),void,Performs a logical XOR of this bit set with the bit set argument.
Calendar,"add(int field, int amount)",abstract void,"Adds or subtracts the specified amount of time to the given calendar field, based on the calendar's rules."
Calendar,after(Object when),boolean,Returns whether this Calendar represents a time after the time represented by the specified Object.
Calendar,before(Object when),boolean,Returns whether this Calendar represents a time before the time represented by the specified Object.
Calendar,clear(),void,Sets all the calendar field values and the time value (millisecond offset from the Epoch) of this Calendar undefined.
Calendar,clear(int field),void,Sets the given calendar field value and the time value (millisecond offset from the Epoch) of this Calendar undefined.
Calendar,clone(),Object,Creates and returns a copy of this object.
Calendar,compareTo(Calendar anotherCalendar),int,Compares the time values (millisecond offsets from the Epoch) represented by two Calendar objects.
Calendar,complete(),protected void,Fills in any unset fields in the calendar fields.
Calendar,computeFields(),protected abstract void,Converts the current millisecond time value time to calendar field values in fields[].
Calendar,computeTime(),protected abstract void,Converts the current calendar field values in fields[] to the millisecond time value time.
Calendar,equals(Object obj),boolean,Compares this Calendar to the specified Object.
Calendar,get(int field),int,Returns the value of the given calendar field.
Calendar,getActualMaximum(int field),int,"Returns the maximum value that the specified calendar field could have, given the time value of this Calendar."
Calendar,getActualMinimum(int field),int,"Returns the minimum value that the specified calendar field could have, given the time value of this Calendar."
Calendar,getAvailableCalendarTypes(),static Set<String>,Returns an unmodifiable Set containing all calendar types supported by Calendar in the runtime environment.
Calendar,getAvailableLocales(),static Locale[],Returns an array of all locales for which the getInstance methods of this class can return localized instances.
Calendar,getCalendarType(),String,Returns the calendar type of this Calendar.
Calendar,"getDisplayName(int field, int style, Locale locale)",String,Returns the string representation of the calendar field value in the given style and locale.
Calendar,"getDisplayNames(int field, int style, Locale locale)","Map<String,Integer>",Returns a Map containing all names of the calendar field in the given style and locale and their corresponding field values.
Calendar,getFirstDayOfWeek(),int,"Gets what the first day of the week is; e.g., SUNDAY in the U.S., MONDAY in France."
Calendar,getGreatestMinimum(int field),abstract int,Returns the highest minimum value for the given calendar field of this Calendar instance.
Calendar,getInstance(),static Calendar,Gets a calendar using the default time zone and locale.
Calendar,getInstance(Locale aLocale),static Calendar,Gets a calendar using the default time zone and specified locale.
Calendar,getInstance(TimeZone zone),static Calendar,Gets a calendar using the specified time zone and default locale.
Calendar,"getInstance(TimeZone zone, Locale aLocale)",static Calendar,Gets a calendar with the specified time zone and locale.
Calendar,getLeastMaximum(int field),abstract int,Returns the lowest maximum value for the given calendar field of this Calendar instance.
Calendar,getMaximum(int field),abstract int,Returns the maximum value for the given calendar field of this Calendar instance.
Calendar,getMinimalDaysInFirstWeek(),int,"Gets what the minimal days required in the first week of the year are; e.g., if the first week is defined as one that contains the first day of the first month of a year, this method returns 1."
Calendar,getMinimum(int field),abstract int,Returns the minimum value for the given calendar field of this Calendar instance.
Calendar,getTime(),Date,"Returns a Date object representing this Calendar's time value (millisecond offset from the Epoch"")."
Calendar,getTimeInMillis(),long,Returns this Calendar's time value in milliseconds.
Calendar,getTimeZone(),TimeZone,Gets the time zone.
Calendar,getWeeksInWeekYear(),int,Returns the number of weeks in the week year represented by this Calendar.
Calendar,getWeekYear(),int,Returns the week year represented by this Calendar.
Calendar,hashCode(),int,Returns a hash code for this calendar.
Calendar,internalGet(int field),protected int,Returns the value of the given calendar field.
Calendar,isLenient(),boolean,Tells whether date/time interpretation is to be lenient.
Calendar,isSet(int field),boolean,"Determines if the given calendar field has a value set, including cases that the value has been set by internal fields calculations triggered by a get method call."
Calendar,isWeekDateSupported(),boolean,Returns whether this Calendar supports week dates.
Calendar,"roll(int field, boolean up)",abstract void,Adds or subtracts (up/down) a single unit of time on the given time field without changing larger fields.
Calendar,"roll(int field, int amount)",void,Adds the specified (signed) amount to the specified calendar field without changing larger fields.
Calendar,"set(int field, int value)",void,Sets the given calendar field to the given value.
Calendar,"set(int year, int month, int date)",void,"Sets the values for the calendar fields YEAR, MONTH, and DAY_OF_MONTH."
Calendar,"set(int year, int month, int date, int hourOfDay, int minute)",void,"Sets the values for the calendar fields YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY, and MINUTE."
Calendar,"set(int year, int month, int date, int hourOfDay, int minute, int second)",void,"Sets the values for the fields YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY, MINUTE, and SECOND."
Calendar,setFirstDayOfWeek(int value),void,"Sets what the first day of the week is; e.g., SUNDAY in the U.S., MONDAY in France."
Calendar,setLenient(boolean lenient),void,Specifies whether or not date/time interpretation is to be lenient.
Calendar,setMinimalDaysInFirstWeek(int value),void,"Sets what the minimal days required in the first week of the year are; For example, if the first week is defined as one that contains the first day of the first month of a year, call this method with value 1."
Calendar,setTime(Date date),void,Sets this Calendar's time with the given Date.
Calendar,setTimeInMillis(long millis),void,Sets this Calendar's current time from the given long value.
Calendar,setTimeZone(TimeZone value),void,Sets the time zone with the given time zone value.
Calendar,"setWeekDate(int weekYear, int weekOfYear, int dayOfWeek)",void,"Sets the date of this Calendar with the the given date specifiers - week year, week of year, and day of week."
Calendar,toInstant(),Instant,Converts this object to an Instant.
Calendar,toString(),String,Return a string representation of this calendar.
Calendar.Builder,build(),Calendar,Returns a Calendar built from the parameters set by the setter methods.
Calendar.Builder,"set(int field, int value)",Calendar.Builder,Sets the field parameter to the given value.
Calendar.Builder,setCalendarType(String type),Calendar.Builder,Sets the calendar type parameter to the given type.
Calendar.Builder,"setDate(int year, int month, int dayOfMonth)",Calendar.Builder,"Sets the date field parameters to the values given by year, month, and dayOfMonth."
Calendar.Builder,setFields(int... fieldValuePairs),Calendar.Builder,Sets field parameters to their values given by fieldValuePairs that are pairs of a field and its value.
Calendar.Builder,setInstant(Date instant),Calendar.Builder,Sets the instant parameter to the instant value given by a Date.
Calendar.Builder,setInstant(long instant),Calendar.Builder,Sets the instant parameter to the given instant value that is a millisecond offset from the Epoch.
Calendar.Builder,setLenient(boolean lenient),Calendar.Builder,Sets the lenient mode parameter to the value given by lenient.
Calendar.Builder,setLocale(Locale locale),Calendar.Builder,Sets the locale parameter to the given locale.
Calendar.Builder,"setTimeOfDay(int hourOfDay, int minute, int second)",Calendar.Builder,"Sets the time of day field parameters to the values given by hourOfDay, minute, and second."
Calendar.Builder,"setTimeOfDay(int hourOfDay, int minute, int second, int millis)",Calendar.Builder,"Sets the time of day field parameters to the values given by hourOfDay, minute, second, and millis."
Calendar.Builder,setTimeZone(TimeZone zone),Calendar.Builder,Sets the time zone parameter to the given zone.
Calendar.Builder,"setWeekDate(int weekYear, int weekOfYear, int dayOfWeek)",Calendar.Builder,"Sets the week-based date parameters to the values with the given date specifiers - week year, week of year, and day of week."
Calendar.Builder,"setWeekDefinition(int firstDayOfWeek, int minimalDaysInFirstWeek)",Calendar.Builder,Sets the week definition parameters to the values given by firstDayOfWeek and minimalDaysInFirstWeek that are used to determine the first week of a year.
Collections,"addAll(Collection<? super T> c, T... elements)",static <T> boolean,Adds all of the specified elements to the specified collection.
Collections,asLifoQueue(Deque<T> deque),static <T> Queue<T>,Returns a view of a Deque as a Last-in-first-out (Lifo) Queue.
Collections,"binarySearch(List<? extends Comparable<? super T>> list, T key)",static <T> int,Searches the specified list for the specified object using the binary search algorithm.
Collections,"binarySearch(List<? extends T> list, T key, Comparator<? super T> c)",static <T> int,Searches the specified list for the specified object using the binary search algorithm.
Collections,"checkedCollection(Collection<E> c, Class<E> type)",static <E> Collection<E>,Returns a dynamically typesafe view of the specified collection.
Collections,"checkedList(List<E> list, Class<E> type)",static <E> List<E>,Returns a dynamically typesafe view of the specified list.
Collections,"checkedMap(Map<K,V> m, Class<K> keyType, Class<V> valueType)","static <K,V> Map<K,V>",Returns a dynamically typesafe view of the specified map.
Collections,"checkedNavigableMap(NavigableMap<K,V> m, Class<K> keyType, Class<V> valueType)","static <K,V> NavigableMap<K,V>",Returns a dynamically typesafe view of the specified navigable map.
Collections,"checkedNavigableSet(NavigableSet<E> s, Class<E> type)",static <E> NavigableSet<E>,Returns a dynamically typesafe view of the specified navigable set.
Collections,"checkedQueue(Queue<E> queue, Class<E> type)",static <E> Queue<E>,Returns a dynamically typesafe view of the specified queue.
Collections,"checkedSet(Set<E> s, Class<E> type)",static <E> Set<E>,Returns a dynamically typesafe view of the specified set.
Collections,"checkedSortedMap(SortedMap<K,V> m, Class<K> keyType, Class<V> valueType)","static <K,V> SortedMap<K,V>",Returns a dynamically typesafe view of the specified sorted map.
Collections,"checkedSortedSet(SortedSet<E> s, Class<E> type)",static <E> SortedSet<E>,Returns a dynamically typesafe view of the specified sorted set.
Collections,"copy(List<? super T> dest, List<? extends T> src)",static <T> void,Copies all of the elements from one list into another.
Collections,"disjoint(Collection<?> c1, Collection<?> c2)",static boolean,Returns true if the two specified collections have no elements in common.
Collections,emptyEnumeration(),static <T> Enumeration<T>,Returns an enumeration that has no elements.
Collections,emptyIterator(),static <T> Iterator<T>,Returns an iterator that has no elements.
Collections,emptyList(),static <T> List<T>,Returns an empty list (immutable).
Collections,emptyListIterator(),static <T> ListIterator<T>,Returns a list iterator that has no elements.
Collections,emptyMap(),"static <K,V> Map<K,V>",Returns an empty map (immutable).
Collections,emptyNavigableMap(),"static <K,V> NavigableMap<K,V>",Returns an empty navigable map (immutable).
Collections,emptyNavigableSet(),static <E> NavigableSet<E>,Returns an empty navigable set (immutable).
Collections,emptySet(),static <T> Set<T>,Returns an empty set (immutable).
Collections,emptySortedMap(),"static <K,V> SortedMap<K,V>",Returns an empty sorted map (immutable).
Collections,emptySortedSet(),static <E> SortedSet<E>,Returns an empty sorted set (immutable).
Collections,enumeration(Collection<T> c),static <T> Enumeration<T>,Returns an enumeration over the specified collection.
Collections,"fill(List<? super T> list, T obj)",static <T> void,Replaces all of the elements of the specified list with the specified element.
Collections,"frequency(Collection<?> c, Object o)",static int,Returns the number of elements in the specified collection equal to the specified object.
Collections,"indexOfSubList(List<?> source, List<?> target)",static int,"Returns the starting position of the first occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence."
Collections,"lastIndexOfSubList(List<?> source, List<?> target)",static int,"Returns the starting position of the last occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence."
Collections,list(Enumeration<T> e),static <T> ArrayList<T>,Returns an array list containing the elements returned by the specified enumeration in the order they are returned by the enumeration.
Collections,max(Collection<? extends T> coll),static <T extends Object & Comparable<? super T>>T,"Returns the maximum element of the given collection, according to the natural ordering of its elements."
Collections,"max(Collection<? extends T> coll, Comparator<? super T> comp)",static <T> T,"Returns the maximum element of the given collection, according to the order induced by the specified comparator."
Collections,min(Collection<? extends T> coll),static <T extends Object & Comparable<? super T>>T,"Returns the minimum element of the given collection, according to the natural ordering of its elements."
Collections,"min(Collection<? extends T> coll, Comparator<? super T> comp)",static <T> T,"Returns the minimum element of the given collection, according to the order induced by the specified comparator."
Collections,"nCopies(int n, T o)",static <T> List<T>,Returns an immutable list consisting of n copies of the specified object.
Collections,"newSetFromMap(Map<E,Boolean> map)",static <E> Set<E>,Returns a set backed by the specified map.
Collections,"replaceAll(List<T> list, T oldVal, T newVal)",static <T> boolean,Replaces all occurrences of one specified value in a list with another.
Collections,reverse(List<?> list),static void,Reverses the order of the elements in the specified list.
Collections,reverseOrder(),static <T> Comparator<T>,Returns a comparator that imposes the reverse of the natural ordering on a collection of objects that implement the Comparable interface.
Collections,reverseOrder(Comparator<T> cmp),static <T> Comparator<T>,Returns a comparator that imposes the reverse ordering of the specified comparator.
Collections,"rotate(List<?> list, int distance)",static void,Rotates the elements in the specified list by the specified distance.
Collections,shuffle(List<?> list),static void,Randomly permutes the specified list using a default source of randomness.
Collections,"shuffle(List<?> list, Random rnd)",static void,Randomly permute the specified list using the specified source of randomness.
Collections,singleton(T o),static <T> Set<T>,Returns an immutable set containing only the specified object.
Collections,singletonList(T o),static <T> List<T>,Returns an immutable list containing only the specified object.
Collections,"singletonMap(K key, V value)","static <K,V> Map<K,V>","Returns an immutable map, mapping only the specified key to the specified value."
Collections,sort(List<T> list),static <T extends Comparable<? super T>>void,"Sorts the specified list into ascending order, according to the natural ordering of its elements."
Collections,"sort(List<T> list, Comparator<? super T> c)",static <T> void,Sorts the specified list according to the order induced by the specified comparator.
Collections,"swap(List<?> list, int i, int j)",static void,Swaps the elements at the specified positions in the specified list.
Collections,synchronizedCollection(Collection<T> c),static <T> Collection<T>,Returns a synchronized (thread-safe) collection backed by the specified collection.
Collections,synchronizedList(List<T> list),static <T> List<T>,Returns a synchronized (thread-safe) list backed by the specified list.
Collections,"synchronizedMap(Map<K,V> m)","static <K,V> Map<K,V>",Returns a synchronized (thread-safe) map backed by the specified map.
Collections,"synchronizedNavigableMap(NavigableMap<K,V> m)","static <K,V> NavigableMap<K,V>",Returns a synchronized (thread-safe) navigable map backed by the specified navigable map.
Collections,synchronizedNavigableSet(NavigableSet<T> s),static <T> NavigableSet<T>,Returns a synchronized (thread-safe) navigable set backed by the specified navigable set.
Collections,synchronizedSet(Set<T> s),static <T> Set<T>,Returns a synchronized (thread-safe) set backed by the specified set.
Collections,"synchronizedSortedMap(SortedMap<K,V> m)","static <K,V> SortedMap<K,V>",Returns a synchronized (thread-safe) sorted map backed by the specified sorted map.
Collections,synchronizedSortedSet(SortedSet<T> s),static <T> SortedSet<T>,Returns a synchronized (thread-safe) sorted set backed by the specified sorted set.
Collections,unmodifiableCollection(Collection<? extends T> c),static <T> Collection<T>,Returns an unmodifiable view of the specified collection.
Collections,unmodifiableList(List<? extends T> list),static <T> List<T>,Returns an unmodifiable view of the specified list.
Collections,"unmodifiableMap(Map<? extends K,? extends V> m)","static <K,V> Map<K,V>",Returns an unmodifiable view of the specified map.
Collections,"unmodifiableNavigableMap(NavigableMap<K,? extends V> m)","static <K,V> NavigableMap<K,V>",Returns an unmodifiable view of the specified navigable map.
Collections,unmodifiableNavigableSet(NavigableSet<T> s),static <T> NavigableSet<T>,Returns an unmodifiable view of the specified navigable set.
Collections,unmodifiableSet(Set<? extends T> s),static <T> Set<T>,Returns an unmodifiable view of the specified set.
Collections,"unmodifiableSortedMap(SortedMap<K,? extends V> m)","static <K,V> SortedMap<K,V>",Returns an unmodifiable view of the specified sorted map.
Collections,unmodifiableSortedSet(SortedSet<T> s),static <T> SortedSet<T>,Returns an unmodifiable view of the specified sorted set.
Currency,getAvailableCurrencies(),static Set<Currency>,Gets the set of available currencies.
Currency,getCurrencyCode(),String,Gets the ISO 4217 currency code of this currency.
Currency,getDefaultFractionDigits(),int,Gets the default number of fraction digits used with this currency.
Currency,getDisplayName(),String,Gets the name that is suitable for displaying this currency for the default DISPLAY locale.
Currency,getDisplayName(Locale locale),String,Gets the name that is suitable for displaying this currency for the specified locale.
Currency,getInstance(Locale locale),static Currency,Returns the Currency instance for the country of the given locale.
Currency,getInstance(String currencyCode),static Currency,Returns the Currency instance for the given currency code.
Currency,getNumericCode(),int,Returns the ISO 4217 numeric code of this currency.
Currency,getSymbol(),String,Gets the symbol of this currency for the default DISPLAY locale.
Currency,getSymbol(Locale locale),String,Gets the symbol of this currency for the specified locale.
Currency,toString(),String,Returns the ISO 4217 currency code of this currency.
Date,after(Date when),boolean,Tests if this date is after the specified date.
Date,before(Date when),boolean,Tests if this date is before the specified date.
Date,clone(),Object,Return a copy of this object.
Date,compareTo(Date anotherDate),int,Compares two Dates for ordering.
Date,equals(Object obj),boolean,Compares two dates for equality.
Date,from(Instant instant),static Date,Obtains an instance of Date from an Instant object.
Date,getDate(),int,"Deprecated. As of JDK version 1.1, replaced by Calendar.get(Calendar.DAY_OF_MONTH)."
Date,getDay(),int,"Deprecated. As of JDK version 1.1, replaced by Calendar.get(Calendar.DAY_OF_WEEK)."
Date,getHours(),int,"Deprecated. As of JDK version 1.1, replaced by Calendar.get(Calendar.HOUR_OF_DAY)."
Date,getMinutes(),int,"Deprecated. As of JDK version 1.1, replaced by Calendar.get(Calendar.MINUTE)."
Date,getMonth(),int,"Deprecated. As of JDK version 1.1, replaced by Calendar.get(Calendar.MONTH)."
Date,getSeconds(),int,"Deprecated. As of JDK version 1.1, replaced by Calendar.get(Calendar.SECOND)."
Date,getTime(),long,"Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this Date object."
Date,getTimezoneOffset(),int,"Deprecated. As of JDK version 1.1, replaced by -(Calendar.get(Calendar.ZONE_OFFSET) + Calendar.get(Calendar.DST_OFFSET)) / (60 * 1000)."
Date,getYear(),int,"Deprecated. As of JDK version 1.1, replaced by Calendar.get(Calendar.YEAR) - 1900."
Date,hashCode(),int,Returns a hash code value for this object.
Date,parse(String s),static long,"Deprecated. As of JDK version 1.1, replaced by DateFormat.parse(String s)."
Date,setDate(int date),void,"Deprecated. As of JDK version 1.1, replaced by Calendar.set(Calendar.DAY_OF_MONTH, int date)."
Date,setHours(int hours),void,"Deprecated. As of JDK version 1.1, replaced by Calendar.set(Calendar.HOUR_OF_DAY, int hours)."
Date,setMinutes(int minutes),void,"Deprecated. As of JDK version 1.1, replaced by Calendar.set(Calendar.MINUTE, int minutes)."
Date,setMonth(int month),void,"Deprecated. As of JDK version 1.1, replaced by Calendar.set(Calendar.MONTH, int month)."
Date,setSeconds(int seconds),void,"Deprecated. As of JDK version 1.1, replaced by Calendar.set(Calendar.SECOND, int seconds)."
Date,setTime(long time),void,"Sets this Date object to represent a point in time that is time milliseconds after January 1, 1970 00:00:00 GMT."
Date,setYear(int year),void,"Deprecated. As of JDK version 1.1, replaced by Calendar.set(Calendar.YEAR, year + 1900)."
Date,toGMTString(),String,"Deprecated. As of JDK version 1.1, replaced by DateFormat.format(Date date), using a GMT TimeZone."
Date,toInstant(),Instant,Converts this Date object to an Instant.
Date,toLocaleString(),String,"Deprecated. As of JDK version 1.1, replaced by DateFormat.format(Date date)."
Date,toString(),String,Converts this Date object to a String of the form:
Date,"UTC(int year, int month, int date, int hrs, int min, int sec)",static long,"Deprecated. As of JDK version 1.1, replaced by Calendar.set(year + 1900, month, date, hrs, min, sec) or GregorianCalendar(year + 1900, month, date, hrs, min, sec), using a UTC TimeZone, followed by Calendar.getTime().getTime()."
Dictionary,elements(),abstract Enumeration<V>,Returns an enumeration of the values in this dictionary.
Dictionary,get(Object key),abstract V,Returns the value to which the key is mapped in this dictionary.
Dictionary,isEmpty(),abstract boolean,Tests if this dictionary maps no keys to value.
Dictionary,keys(),abstract Enumeration<K>,Returns an enumeration of the keys in this dictionary.
Dictionary,"put(K key, V value)",abstract V,Maps the specified key to the specified value in this dictionary.
Dictionary,remove(Object key),abstract V,Removes the key (and its corresponding value) from this dictionary.
Dictionary,size(),abstract int,Returns the number of entries (distinct keys) in this dictionary.
DoubleSummaryStatistics,accept(double value),void,Records another value into the summary information.
DoubleSummaryStatistics,combine(DoubleSummaryStatistics other),void,Combines the state of another DoubleSummaryStatistics into this one.
DoubleSummaryStatistics,getAverage(),double,"Returns the arithmetic mean of values recorded, or zero if no values have been recorded."
DoubleSummaryStatistics,getCount(),long,Return the count of values recorded.
DoubleSummaryStatistics,getMax(),double,"Returns the maximum recorded value, Double.NaN if any recorded value was NaN or Double.NEGATIVE_INFINITY if no values were recorded."
DoubleSummaryStatistics,getMin(),double,"Returns the minimum recorded value, Double.NaN if any recorded value was NaN or Double.POSITIVE_INFINITY if no values were recorded."
DoubleSummaryStatistics,getSum(),double,"Returns the sum of values recorded, or zero if no values have been recorded."
DoubleSummaryStatistics,toString(),String,Returns a string representation of the object.
EnumMap,clear(),void,Removes all mappings from this map.
EnumMap,clone(),"EnumMap<K,V>",Returns a shallow copy of this enum map.
EnumMap,containsKey(Object key),boolean,Returns true if this map contains a mapping for the specified key.
EnumMap,containsValue(Object value),boolean,Returns true if this map maps one or more keys to the specified value.
EnumMap,entrySet(),"Set<Map.Entry<K,V>>",Returns a Set view of the mappings contained in this map.
EnumMap,equals(Object o),boolean,Compares the specified object with this map for equality.
EnumMap,get(Object key),V,"Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key."
EnumMap,hashCode(),int,Returns the hash code value for this map.
EnumMap,keySet(),Set<K>,Returns a Set view of the keys contained in this map.
EnumMap,"put(K key, V value)",V,Associates the specified value with the specified key in this map.
EnumMap,"putAll(Map<? extends K,? extends V> m)",void,Copies all of the mappings from the specified map to this map.
EnumMap,remove(Object key),V,Removes the mapping for this key from this map if present.
EnumMap,size(),int,Returns the number of key-value mappings in this map.
EnumMap,values(),Collection<V>,Returns a Collection view of the values contained in this map.
EnumSet,allOf(Class<E> elementType),static <E extends Enum<E>>EnumSet<E>,Creates an enum set containing all of the elements in the specified element type.
EnumSet,clone(),EnumSet<E>,Returns a copy of this set.
EnumSet,complementOf(EnumSet<E> s),static <E extends Enum<E>>EnumSet<E>,"Creates an enum set with the same element type as the specified enum set, initially containing all the elements of this type that are not contained in the specified set."
EnumSet,copyOf(Collection<E> c),static <E extends Enum<E>>EnumSet<E>,Creates an enum set initialized from the specified collection.
EnumSet,copyOf(EnumSet<E> s),static <E extends Enum<E>>EnumSet<E>,"Creates an enum set with the same element type as the specified enum set, initially containing the same elements (if any)."
EnumSet,noneOf(Class<E> elementType),static <E extends Enum<E>>EnumSet<E>,Creates an empty enum set with the specified element type.
EnumSet,of(E e),static <E extends Enum<E>>EnumSet<E>,Creates an enum set initially containing the specified element.
EnumSet,"of(E first, E... rest)",static <E extends Enum<E>>EnumSet<E>,Creates an enum set initially containing the specified elements.
EnumSet,"of(E e1, E e2)",static <E extends Enum<E>>EnumSet<E>,Creates an enum set initially containing the specified elements.
EnumSet,"of(E e1, E e2, E e3)",static <E extends Enum<E>>EnumSet<E>,Creates an enum set initially containing the specified elements.
EnumSet,"of(E e1, E e2, E e3, E e4)",static <E extends Enum<E>>EnumSet<E>,Creates an enum set initially containing the specified elements.
EnumSet,"of(E e1, E e2, E e3, E e4, E e5)",static <E extends Enum<E>>EnumSet<E>,Creates an enum set initially containing the specified elements.
EnumSet,"range(E from, E to)",static <E extends Enum<E>>EnumSet<E>,Creates an enum set initially containing all of the elements in the range defined by the two specified endpoints.
EventListenerProxy,getListener(),T,Returns the listener associated with the proxy.
EventObject,getSource(),Object,The object on which the Event initially occurred.
EventObject,toString(),String,Returns a String representation of this EventObject.
Formatter,close(),void,Closes this formatter.
Formatter,flush(),void,Flushes this formatter.
Formatter,"format(Locale l, String format, Object... args)",Formatter,"Writes a formatted string to this object's destination using the specified locale, format string, and arguments."
Formatter,"format(String format, Object... args)",Formatter,Writes a formatted string to this object's destination using the specified format string and arguments.
Formatter,ioException(),IOException,Returns the IOException last thrown by this formatter's Appendable.
Formatter,locale(),Locale,Returns the locale set by the construction of this formatter.
Formatter,out(),Appendable,Returns the destination for the output.
Formatter,toString(),String,Returns the result of invoking toString() on the destination for the output.
GregorianCalendar,"add(int field, int amount)",void,"Adds the specified (signed) amount of time to the given calendar field, based on the calendar's rules."
GregorianCalendar,clone(),Object,Creates and returns a copy of this object.
GregorianCalendar,computeFields(),protected void,Converts the time value (millisecond offset from the Epoch) to calendar field values.
GregorianCalendar,computeTime(),protected void,Converts calendar field values to the time value (millisecond offset from the Epoch).
GregorianCalendar,equals(Object obj),boolean,Compares this GregorianCalendar to the specified Object.
GregorianCalendar,from(ZonedDateTime zdt),static GregorianCalendar,Obtains an instance of GregorianCalendar with the default locale from a ZonedDateTime object.
GregorianCalendar,getActualMaximum(int field),int,"Returns the maximum value that this calendar field could have, taking into consideration the given time value and the current values of the getFirstDayOfWeek, getMinimalDaysInFirstWeek, getGregorianChange and getTimeZone methods."
GregorianCalendar,getActualMinimum(int field),int,"Returns the minimum value that this calendar field could have, taking into consideration the given time value and the current values of the getFirstDayOfWeek, getMinimalDaysInFirstWeek, getGregorianChange and getTimeZone methods."
GregorianCalendar,getCalendarType(),String,"Returns ""gregory"" as the calendar type."
GregorianCalendar,getGreatestMinimum(int field),int,Returns the highest minimum value for the given calendar field of this GregorianCalendar instance.
GregorianCalendar,getGregorianChange(),Date,Gets the Gregorian Calendar change date.
GregorianCalendar,getLeastMaximum(int field),int,Returns the lowest maximum value for the given calendar field of this GregorianCalendar instance.
GregorianCalendar,getMaximum(int field),int,Returns the maximum value for the given calendar field of this GregorianCalendar instance.
GregorianCalendar,getMinimum(int field),int,Returns the minimum value for the given calendar field of this GregorianCalendar instance.
GregorianCalendar,getTimeZone(),TimeZone,Gets the time zone.
GregorianCalendar,getWeeksInWeekYear(),int,Returns the number of weeks in the week year represented by this GregorianCalendar.
GregorianCalendar,getWeekYear(),int,Returns the week year represented by this GregorianCalendar.
GregorianCalendar,hashCode(),int,Generates the hash code for this GregorianCalendar object.
GregorianCalendar,isLeapYear(int year),boolean,Determines if the given year is a leap year.
GregorianCalendar,isWeekDateSupported(),boolean,Returns true indicating this GregorianCalendar supports week dates.
GregorianCalendar,"roll(int field, boolean up)",void,Adds or subtracts (up/down) a single unit of time on the given time field without changing larger fields.
GregorianCalendar,"roll(int field, int amount)",void,Adds a signed amount to the specified calendar field without changing larger fields.
GregorianCalendar,setGregorianChange(Date date),void,Sets the GregorianCalendar change date.
GregorianCalendar,setTimeZone(TimeZone zone),void,Sets the time zone with the given time zone value.
GregorianCalendar,"setWeekDate(int weekYear, int weekOfYear, int dayOfWeek)",void,"Sets this GregorianCalendar to the date given by the date specifiers - weekYear, weekOfYear, and dayOfWeek."
GregorianCalendar,toZonedDateTime(),ZonedDateTime,Converts this object to a ZonedDateTime that represents the same point on the time-line as this GregorianCalendar.
HashMap,clear(),void,Removes all of the mappings from this map.
HashMap,clone(),Object,Returns a shallow copy of this HashMap instance: the keys and values themselves are not cloned.
HashMap,"compute(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)",V,Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).
HashMap,"computeIfAbsent(K key, Function<? super K,? extends V> mappingFunction)",V,"If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null."
HashMap,"computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)",V,"If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value."
HashMap,containsKey(Object key),boolean,Returns true if this map contains a mapping for the specified key.
HashMap,containsValue(Object value),boolean,Returns true if this map maps one or more keys to the specified value.
HashMap,entrySet(),"Set<Map.Entry<K,V>>",Returns a Set view of the mappings contained in this map.
HashMap,"forEach(BiConsumer<? super K,? super V> action)",void,Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.
HashMap,get(Object key),V,"Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key."
HashMap,"getOrDefault(Object key, V defaultValue)",V,"Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key."
HashMap,isEmpty(),boolean,Returns true if this map contains no key-value mappings.
HashMap,keySet(),Set<K>,Returns a Set view of the keys contained in this map.
HashMap,"merge(K key, V value, BiFunction<? super V,? super V,? extends V> remappingFunction)",V,"If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value."
HashMap,"put(K key, V value)",V,Associates the specified value with the specified key in this map.
HashMap,"putAll(Map<? extends K,? extends V> m)",void,Copies all of the mappings from the specified map to this map.
HashMap,"putIfAbsent(K key, V value)",V,"If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value."
HashMap,remove(Object key),V,Removes the mapping for the specified key from this map if present.
HashMap,"remove(Object key, Object value)",boolean,Removes the entry for the specified key only if it is currently mapped to the specified value.
HashMap,"replace(K key, V value)",V,Replaces the entry for the specified key only if it is currently mapped to some value.
HashMap,"replace(K key, V oldValue, V newValue)",boolean,Replaces the entry for the specified key only if currently mapped to the specified value.
HashMap,"replaceAll(BiFunction<? super K,? super V,? extends V> function)",void,Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.
HashMap,size(),int,Returns the number of key-value mappings in this map.
HashMap,values(),Collection<V>,Returns a Collection view of the values contained in this map.
HashSet,add(E e),boolean,Adds the specified element to this set if it is not already present.
HashSet,clear(),void,Removes all of the elements from this set.
HashSet,clone(),Object,Returns a shallow copy of this HashSet instance: the elements themselves are not cloned.
HashSet,contains(Object o),boolean,Returns true if this set contains the specified element.
HashSet,isEmpty(),boolean,Returns true if this set contains no elements.
HashSet,iterator(),Iterator<E>,Returns an iterator over the elements in this set.
HashSet,remove(Object o),boolean,Removes the specified element from this set if it is present.
HashSet,size(),int,Returns the number of elements in this set (its cardinality).
HashSet,spliterator(),Spliterator<E>,Creates a late-binding and fail-fast Spliterator over the elements in this set.
Hashtable,clear(),void,Clears this hashtable so that it contains no keys.
Hashtable,clone(),Object,Creates a shallow copy of this hashtable.
Hashtable,"compute(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)",V,Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).
Hashtable,"computeIfAbsent(K key, Function<? super K,? extends V> mappingFunction)",V,"If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null."
Hashtable,"computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)",V,"If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value."
Hashtable,contains(Object value),boolean,Tests if some key maps into the specified value in this hashtable.
Hashtable,containsKey(Object key),boolean,Tests if the specified object is a key in this hashtable.
Hashtable,containsValue(Object value),boolean,Returns true if this hashtable maps one or more keys to this value.
Hashtable,elements(),Enumeration<V>,Returns an enumeration of the values in this hashtable.
Hashtable,entrySet(),"Set<Map.Entry<K,V>>",Returns a Set view of the mappings contained in this map.
Hashtable,equals(Object o),boolean,"Compares the specified Object with this Map for equality, as per the definition in the Map interface."
Hashtable,"forEach(BiConsumer<? super K,? super V> action)",void,Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.
Hashtable,get(Object key),V,"Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key."
Hashtable,"getOrDefault(Object key, V defaultValue)",V,"Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key."
Hashtable,hashCode(),int,Returns the hash code value for this Map as per the definition in the Map interface.
Hashtable,isEmpty(),boolean,Tests if this hashtable maps no keys to values.
Hashtable,keys(),Enumeration<K>,Returns an enumeration of the keys in this hashtable.
Hashtable,keySet(),Set<K>,Returns a Set view of the keys contained in this map.
Hashtable,"merge(K key, V value, BiFunction<? super V,? super V,? extends V> remappingFunction)",V,"If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value."
Hashtable,"put(K key, V value)",V,Maps the specified key to the specified value in this hashtable.
Hashtable,"putAll(Map<? extends K,? extends V> t)",void,Copies all of the mappings from the specified map to this hashtable.
Hashtable,"putIfAbsent(K key, V value)",V,"If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value."
Hashtable,rehash(),protected void,"Increases the capacity of and internally reorganizes this hashtable, in order to accommodate and access its entries more efficiently."
Hashtable,remove(Object key),V,Removes the key (and its corresponding value) from this hashtable.
Hashtable,"remove(Object key, Object value)",boolean,Removes the entry for the specified key only if it is currently mapped to the specified value.
Hashtable,"replace(K key, V value)",V,Replaces the entry for the specified key only if it is currently mapped to some value.
Hashtable,"replace(K key, V oldValue, V newValue)",boolean,Replaces the entry for the specified key only if currently mapped to the specified value.
Hashtable,"replaceAll(BiFunction<? super K,? super V,? extends V> function)",void,Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.
Hashtable,size(),int,Returns the number of keys in this hashtable.
Hashtable,toString(),String,"Returns a string representation of this Hashtable object in the form of a set of entries, enclosed in braces and separated by the ASCII characters "", "" (comma and space)."
Hashtable,values(),Collection<V>,Returns a Collection view of the values contained in this map.
IdentityHashMap,clear(),void,Removes all of the mappings from this map.
IdentityHashMap,clone(),Object,Returns a shallow copy of this identity hash map: the keys and values themselves are not cloned.
IdentityHashMap,containsKey(Object key),boolean,Tests whether the specified object reference is a key in this identity hash map.
IdentityHashMap,containsValue(Object value),boolean,Tests whether the specified object reference is a value in this identity hash map.
IdentityHashMap,entrySet(),"Set<Map.Entry<K,V>>",Returns a Set view of the mappings contained in this map.
IdentityHashMap,equals(Object o),boolean,Compares the specified object with this map for equality.
IdentityHashMap,"forEach(BiConsumer<? super K,? super V> action)",void,Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.
IdentityHashMap,get(Object key),V,"Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key."
IdentityHashMap,hashCode(),int,Returns the hash code value for this map.
IdentityHashMap,isEmpty(),boolean,Returns true if this identity hash map contains no key-value mappings.
IdentityHashMap,keySet(),Set<K>,Returns an identity-based set view of the keys contained in this map.
IdentityHashMap,"put(K key, V value)",V,Associates the specified value with the specified key in this identity hash map.
IdentityHashMap,"putAll(Map<? extends K,? extends V> m)",void,Copies all of the mappings from the specified map to this map.
IdentityHashMap,remove(Object key),V,Removes the mapping for this key from this map if present.
IdentityHashMap,"replaceAll(BiFunction<? super K,? super V,? extends V> function)",void,Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.
IdentityHashMap,size(),int,Returns the number of key-value mappings in this identity hash map.
IdentityHashMap,values(),Collection<V>,Returns a Collection view of the values contained in this map.
IntSummaryStatistics,accept(int value),void,Records a new value into the summary information
IntSummaryStatistics,combine(IntSummaryStatistics other),void,Combines the state of another IntSummaryStatistics into this one.
IntSummaryStatistics,getAverage(),double,"Returns the arithmetic mean of values recorded, or zero if no values have been recorded."
IntSummaryStatistics,getCount(),long,Returns the count of values recorded.
IntSummaryStatistics,getMax(),int,"Returns the maximum value recorded, or Integer.MIN_VALUE if no values have been recorded."
IntSummaryStatistics,getMin(),int,"Returns the minimum value recorded, or Integer.MAX_VALUE if no values have been recorded."
IntSummaryStatistics,getSum(),long,"Returns the sum of values recorded, or zero if no values have been recorded."
IntSummaryStatistics,toString(),String,Returns a string representation of the object.
LinkedHashMap,clear(),void,Removes all of the mappings from this map.
LinkedHashMap,containsValue(Object value),boolean,Returns true if this map maps one or more keys to the specified value.
LinkedHashMap,entrySet(),"Set<Map.Entry<K,V>>",Returns a Set view of the mappings contained in this map.
LinkedHashMap,"forEach(BiConsumer<? super K,? super V> action)",void,Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.
LinkedHashMap,get(Object key),V,"Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key."
LinkedHashMap,"getOrDefault(Object key, V defaultValue)",V,"Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key."
LinkedHashMap,keySet(),Set<K>,Returns a Set view of the keys contained in this map.
LinkedHashMap,"removeEldestEntry(Map.Entry<K,V> eldest)",protected boolean,Returns true if this map should remove its eldest entry.
LinkedHashMap,"replaceAll(BiFunction<? super K,? super V,? extends V> function)",void,Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.
LinkedHashMap,values(),Collection<V>,Returns a Collection view of the values contained in this map.
LinkedHashSet,spliterator(),Spliterator<E>,Creates a late-binding and fail-fast Spliterator over the elements in this set.
LinkedList,add(E e),boolean,Appends the specified element to the end of this list.
LinkedList,"add(int index, E element)",void,Inserts the specified element at the specified position in this list.
LinkedList,addAll(Collection<? extends E> c),boolean,"Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator."
LinkedList,"addAll(int index, Collection<? extends E> c)",boolean,"Inserts all of the elements in the specified collection into this list, starting at the specified position."
LinkedList,addFirst(E e),void,Inserts the specified element at the beginning of this list.
LinkedList,addLast(E e),void,Appends the specified element to the end of this list.
LinkedList,clear(),void,Removes all of the elements from this list.
LinkedList,clone(),Object,Returns a shallow copy of this LinkedList.
LinkedList,contains(Object o),boolean,Returns true if this list contains the specified element.
LinkedList,descendingIterator(),Iterator<E>,Returns an iterator over the elements in this deque in reverse sequential order.
LinkedList,element(),E,"Retrieves, but does not remove, the head (first element) of this list."
LinkedList,get(int index),E,Returns the element at the specified position in this list.
LinkedList,getFirst(),E,Returns the first element in this list.
LinkedList,getLast(),E,Returns the last element in this list.
LinkedList,indexOf(Object o),int,"Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element."
LinkedList,lastIndexOf(Object o),int,"Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element."
LinkedList,listIterator(int index),ListIterator<E>,"Returns a list-iterator of the elements in this list (in proper sequence), starting at the specified position in the list."
LinkedList,offer(E e),boolean,Adds the specified element as the tail (last element) of this list.
LinkedList,offerFirst(E e),boolean,Inserts the specified element at the front of this list.
LinkedList,offerLast(E e),boolean,Inserts the specified element at the end of this list.
LinkedList,peek(),E,"Retrieves, but does not remove, the head (first element) of this list."
LinkedList,peekFirst(),E,"Retrieves, but does not remove, the first element of this list, or returns null if this list is empty."
LinkedList,peekLast(),E,"Retrieves, but does not remove, the last element of this list, or returns null if this list is empty."
LinkedList,poll(),E,Retrieves and removes the head (first element) of this list.
LinkedList,pollFirst(),E,"Retrieves and removes the first element of this list, or returns null if this list is empty."
LinkedList,pollLast(),E,"Retrieves and removes the last element of this list, or returns null if this list is empty."
LinkedList,pop(),E,Pops an element from the stack represented by this list.
LinkedList,push(E e),void,Pushes an element onto the stack represented by this list.
LinkedList,remove(),E,Retrieves and removes the head (first element) of this list.
LinkedList,remove(int index),E,Removes the element at the specified position in this list.
LinkedList,remove(Object o),boolean,"Removes the first occurrence of the specified element from this list, if it is present."
LinkedList,removeFirst(),E,Removes and returns the first element from this list.
LinkedList,removeFirstOccurrence(Object o),boolean,Removes the first occurrence of the specified element in this list (when traversing the list from head to tail).
LinkedList,removeLast(),E,Removes and returns the last element from this list.
LinkedList,removeLastOccurrence(Object o),boolean,Removes the last occurrence of the specified element in this list (when traversing the list from head to tail).
LinkedList,"set(int index, E element)",E,Replaces the element at the specified position in this list with the specified element.
LinkedList,size(),int,Returns the number of elements in this list.
LinkedList,spliterator(),Spliterator<E>,Creates a late-binding and fail-fast Spliterator over the elements in this list.
LinkedList,toArray(),Object[],Returns an array containing all of the elements in this list in proper sequence (from first to last element).
LinkedList,toArray(T[] a),<T> T[],Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.
ListResourceBundle,getContents(),protected abstract Object[][],Returns an array in which each item is a pair of objects in an Object array.
ListResourceBundle,getKeys(),Enumeration<String>,Returns an Enumeration of the keys contained in this ResourceBundle and its parent bundles.
ListResourceBundle,handleGetObject(String key),Object,Gets an object for the given key from this resource bundle.
ListResourceBundle,handleKeySet(),protected Set<String>,Returns a Set of the keys contained only in this ResourceBundle.
Locale,clone(),Object,Overrides Cloneable.
Locale,equals(Object obj),boolean,Returns true if this Locale is equal to another object.
Locale,"filter(List<Locale.LanguageRange> priorityList, Collection<Locale> locales)",static List<Locale>,Returns a list of matching Locale instances using the filtering mechanism defined in RFC 4647.
Locale,"filter(List<Locale.LanguageRange> priorityList, Collection<Locale> locales, Locale.FilteringMode mode)",static List<Locale>,Returns a list of matching Locale instances using the filtering mechanism defined in RFC 4647.
Locale,"filterTags(List<Locale.LanguageRange> priorityList, Collection<String> tags)",static List<String>,Returns a list of matching languages tags using the basic filtering mechanism defined in RFC 4647.
Locale,"filterTags(List<Locale.LanguageRange> priorityList, Collection<String> tags, Locale.FilteringMode mode)",static List<String>,Returns a list of matching languages tags using the basic filtering mechanism defined in RFC 4647.
Locale,forLanguageTag(String languageTag),static Locale,Returns a locale for the specified IETF BCP 47 language tag string.
Locale,getAvailableLocales(),static Locale[],Returns an array of all installed locales.
Locale,getCountry(),String,"Returns the country/region code for this locale, which should either be the empty string, an uppercase ISO 3166 2-letter code, or a UN M.49 3-digit code."
Locale,getDefault(),static Locale,Gets the current value of the default locale for this instance of the Java Virtual Machine.
Locale,getDefault(Locale.Category category),static Locale,Gets the current value of the default locale for the specified Category for this instance of the Java Virtual Machine.
Locale,getDisplayCountry(),String,Returns a name for the locale's country that is appropriate for display to the user.
Locale,getDisplayCountry(Locale inLocale),String,Returns a name for the locale's country that is appropriate for display to the user.
Locale,getDisplayLanguage(),String,Returns a name for the locale's language that is appropriate for display to the user.
Locale,getDisplayLanguage(Locale inLocale),String,Returns a name for the locale's language that is appropriate for display to the user.
Locale,getDisplayName(),String,Returns a name for the locale that is appropriate for display to the user.
Locale,getDisplayName(Locale inLocale),String,Returns a name for the locale that is appropriate for display to the user.
Locale,getDisplayScript(),String,Returns a name for the the locale's script that is appropriate for display to the user.
Locale,getDisplayScript(Locale inLocale),String,Returns a name for the locale's script that is appropriate for display to the user.
Locale,getDisplayVariant(),String,Returns a name for the locale's variant code that is appropriate for display to the user.
Locale,getDisplayVariant(Locale inLocale),String,Returns a name for the locale's variant code that is appropriate for display to the user.
Locale,getExtension(char key),String,"Returns the extension (or private use) value associated with the specified key, or null if there is no extension associated with the key."
Locale,getExtensionKeys(),Set<Character>,"Returns the set of extension keys associated with this locale, or the empty set if it has no extensions."
Locale,getISO3Country(),String,Returns a three-letter abbreviation for this locale's country.
Locale,getISO3Language(),String,Returns a three-letter abbreviation of this locale's language.
Locale,getISOCountries(),static String[],Returns a list of all 2-letter country codes defined in ISO 3166.
Locale,getISOLanguages(),static String[],Returns a list of all 2-letter language codes defined in ISO 639.
Locale,getLanguage(),String,Returns the language code of this Locale.
Locale,getScript(),String,"Returns the script for this locale, which should either be the empty string or an ISO 15924 4-letter script code."
Locale,getUnicodeLocaleAttributes(),Set<String>,"Returns the set of unicode locale attributes associated with this locale, or the empty set if it has no attributes."
Locale,getUnicodeLocaleKeys(),Set<String>,"Returns the set of Unicode locale keys defined by this locale, or the empty set if this locale has none."
Locale,getUnicodeLocaleType(String key),String,Returns the Unicode locale type associated with the specified Unicode locale key for this locale.
Locale,getVariant(),String,Returns the variant code for this locale.
Locale,hasExtensions(),boolean,Returns true if this Locale has any extensions.
Locale,hashCode(),int,Override hashCode.
Locale,"lookup(List<Locale.LanguageRange> priorityList, Collection<Locale> locales)",static Locale,Returns a Locale instance for the best-matching language tag using the lookup mechanism defined in RFC 4647.
Locale,"lookupTag(List<Locale.LanguageRange> priorityList, Collection<String> tags)",static String,Returns the best-matching language tag using the lookup mechanism defined in RFC 4647.
Locale,"setDefault(Locale.Category category, Locale newLocale)",static void,Sets the default locale for the specified Category for this instance of the Java Virtual Machine.
Locale,setDefault(Locale newLocale),static void,Sets the default locale for this instance of the Java Virtual Machine.
Locale,stripExtensions(),Locale,Returns a copy of this Locale with no extensions.
Locale,toLanguageTag(),String,Returns a well-formed IETF BCP 47 language tag representing this locale.
Locale,toString(),String,"Returns a string representation of this Locale object, consisting of language, country, variant, script, and extensions as below: language + ""_"" + country + ""_"" + (variant + ""_#"" | ""#"") + script + ""-"" + extensions Language is always lower case, country is always upper case, script is always title case, and extensions are always lower case."
Locale.Builder,addUnicodeLocaleAttribute(String attribute),Locale.Builder,"Adds a unicode locale attribute, if not already present, otherwise has no effect."
Locale.Builder,build(),Locale,Returns an instance of Locale created from the fields set on this builder.
Locale.Builder,clear(),Locale.Builder,"Resets the builder to its initial, empty state."
Locale.Builder,clearExtensions(),Locale.Builder,"Resets the extensions to their initial, empty state."
Locale.Builder,removeUnicodeLocaleAttribute(String attribute),Locale.Builder,"Removes a unicode locale attribute, if present, otherwise has no effect."
Locale.Builder,"setExtension(char key, String value)",Locale.Builder,Sets the extension for the given key.
Locale.Builder,setLanguage(String language),Locale.Builder,Sets the language.
Locale.Builder,setLanguageTag(String languageTag),Locale.Builder,Resets the Builder to match the provided IETF BCP 47 language tag.
Locale.Builder,setLocale(Locale locale),Locale.Builder,Resets the Builder to match the provided locale.
Locale.Builder,setRegion(String region),Locale.Builder,Sets the region.
Locale.Builder,setScript(String script),Locale.Builder,Sets the script.
Locale.Builder,"setUnicodeLocaleKeyword(String key, String type)",Locale.Builder,Sets the Unicode locale keyword type for the given key.
Locale.Builder,setVariant(String variant),Locale.Builder,Sets the variant.
Locale.LanguageRange,equals(Object obj),boolean,Compares this object to the specified object.
Locale.LanguageRange,getRange(),String,Returns the language range of this LanguageRange.
Locale.LanguageRange,getWeight(),double,Returns the weight of this LanguageRange.
Locale.LanguageRange,hashCode(),int,Returns a hash code value for the object.
Locale.LanguageRange,"mapEquivalents(List<Locale.LanguageRange> priorityList, Map<String,List<String>> map)",static List<Locale.LanguageRange>,Generates a new customized Language Priority List using the given priorityList and map.
Locale.LanguageRange,parse(String ranges),static List<Locale.LanguageRange>,Parses the given ranges to generate a Language Priority List.
Locale.LanguageRange,"parse(String ranges, Map<String,List<String>> map)",static List<Locale.LanguageRange>,"Parses the given ranges to generate a Language Priority List, and then customizes the list using the given map."
LongSummaryStatistics,accept(int value),void,Records a new int value into the summary information.
LongSummaryStatistics,accept(long value),void,Records a new long value into the summary information.
LongSummaryStatistics,combine(LongSummaryStatistics other),void,Combines the state of another LongSummaryStatistics into this one.
LongSummaryStatistics,getAverage(),double,"Returns the arithmetic mean of values recorded, or zero if no values have been recorded."
LongSummaryStatistics,getCount(),long,Returns the count of values recorded.
LongSummaryStatistics,getMax(),long,"Returns the maximum value recorded, or Long.MIN_VALUE if no values have been recorded"
LongSummaryStatistics,getMin(),long,"Returns the minimum value recorded, or Long.MAX_VALUE if no values have been recorded."
LongSummaryStatistics,getSum(),long,"Returns the sum of values recorded, or zero if no values have been recorded."
LongSummaryStatistics,toString(),String,Returns a string representation of the object.
Objects,"compare(T a, T b, Comparator<? super T> c)",static <T> int,"Returns 0 if the arguments are identical and c.compare(a, b) otherwise."
Objects,"deepEquals(Object a, Object b)",static boolean,Returns true if the arguments are deeply equal to each other and false otherwise.
Objects,"equals(Object a, Object b)",static boolean,Returns true if the arguments are equal to each other and false otherwise.
Objects,hash(Object... values),static int,Generates a hash code for a sequence of input values.
Objects,hashCode(Object o),static int,Returns the hash code of a non-null argument and 0 for a null argument.
Objects,isNull(Object obj),static boolean,Returns true if the provided reference is null otherwise returns false.
Objects,nonNull(Object obj),static boolean,Returns true if the provided reference is non-null otherwise returns false.
Objects,requireNonNull(T obj),static <T> T,Checks that the specified object reference is not null.
Objects,"requireNonNull(T obj, String message)",static <T> T,Checks that the specified object reference is not null and throws a customized NullPointerException if it is.
Objects,"requireNonNull(T obj, Supplier<String> messageSupplier)",static <T> T,Checks that the specified object reference is not null and throws a customized NullPointerException if it is.
Objects,toString(Object o),static String,"Returns the result of calling toString for a non-null argument and ""null"" for a null argument."
Objects,"toString(Object o, String nullDefault)",static String,Returns the result of calling toString on the first argument if the first argument is not null and returns the second argument otherwise.
Observable,addObserver(Observer o),void,"Adds an observer to the set of observers for this object, provided that it is not the same as some observer already in the set."
Observable,clearChanged(),protected void,"Indicates that this object has no longer changed, or that it has already notified all of its observers of its most recent change, so that the hasChanged method will now return false."
Observable,countObservers(),int,Returns the number of observers of this Observable object.
Observable,deleteObserver(Observer o),void,Deletes an observer from the set of observers of this object.
Observable,deleteObservers(),void,Clears the observer list so that this object no longer has any observers.
Observable,hasChanged(),boolean,Tests if this object has changed.
Observable,notifyObservers(),void,"If this object has changed, as indicated by the hasChanged method, then notify all of its observers and then call the clearChanged method to indicate that this object has no longer changed."
Observable,notifyObservers(Object arg),void,"If this object has changed, as indicated by the hasChanged method, then notify all of its observers and then call the clearChanged method to indicate that this object has no longer changed."
Observable,setChanged(),protected void,Marks this Observable object as having been changed; the hasChanged method will now return true.
Optional,empty(),static <T> Optional<T>,Returns an empty Optional instance.
Optional,equals(Object obj),boolean,"Indicates whether some other object is ""equal to"" this Optional."
Optional,filter(Predicate<? super T> predicate),Optional<T>,"If a value is present, and the value matches the given predicate, return an Optional describing the value, otherwise return an empty Optional."
Optional,"flatMap(Function<? super T,Optional<U>> mapper)",<U> Optional<U>,"If a value is present, apply the provided Optional-bearing mapping function to it, return that result, otherwise return an empty Optional."
Optional,get(),T,"If a value is present in this Optional, returns the value, otherwise throws NoSuchElementException."
Optional,hashCode(),int,"Returns the hash code value of the present value, if any, or 0 (zero) if no value is present."
Optional,ifPresent(Consumer<? super T> consumer),void,"If a value is present, invoke the specified consumer with the value, otherwise do nothing."
Optional,isPresent(),boolean,"Return true if there is a value present, otherwise false."
Optional,"map(Function<? super T,? extends U> mapper)",<U> Optional<U>,"If a value is present, apply the provided mapping function to it, and if the result is non-null, return an Optional describing the result."
Optional,of(T value),static <T> Optional<T>,Returns an Optional with the specified present non-null value.
Optional,ofNullable(T value),static <T> Optional<T>,"Returns an Optional describing the specified value, if non-null, otherwise returns an empty Optional."
Optional,orElse(T other),T,"Return the value if present, otherwise return other."
Optional,orElseGet(Supplier<? extends T> other),T,"Return the value if present, otherwise invoke other and return the result of that invocation."
Optional,orElseThrow(Supplier<? extends X> exceptionSupplier),<X extends Throwable>T,"Return the contained value, if present, otherwise throw an exception to be created by the provided supplier."
Optional,toString(),String,Returns a non-empty string representation of this Optional suitable for debugging.
OptionalDouble,empty(),static OptionalDouble,Returns an empty OptionalDouble instance.
OptionalDouble,equals(Object obj),boolean,"Indicates whether some other object is ""equal to"" this OptionalDouble."
OptionalDouble,getAsDouble(),double,"If a value is present in this OptionalDouble, returns the value, otherwise throws NoSuchElementException."
OptionalDouble,hashCode(),int,"Returns the hash code value of the present value, if any, or 0 (zero) if no value is present."
OptionalDouble,ifPresent(DoubleConsumer consumer),void,"Have the specified consumer accept the value if a value is present, otherwise do nothing."
OptionalDouble,isPresent(),boolean,"Return true if there is a value present, otherwise false."
OptionalDouble,of(double value),static OptionalDouble,Return an OptionalDouble with the specified value present.
OptionalDouble,orElse(double other),double,"Return the value if present, otherwise return other."
OptionalDouble,orElseGet(DoubleSupplier other),double,"Return the value if present, otherwise invoke other and return the result of that invocation."
OptionalDouble,orElseThrow(Supplier<X> exceptionSupplier),<X extends Throwable>double,"Return the contained value, if present, otherwise throw an exception to be created by the provided supplier."
OptionalDouble,toString(),String,Returns a string representation of the object.
OptionalInt,empty(),static OptionalInt,Returns an empty OptionalInt instance.
OptionalInt,equals(Object obj),boolean,"Indicates whether some other object is ""equal to"" this OptionalInt."
OptionalInt,getAsInt(),int,"If a value is present in this OptionalInt, returns the value, otherwise throws NoSuchElementException."
OptionalInt,hashCode(),int,"Returns the hash code value of the present value, if any, or 0 (zero) if no value is present."
OptionalInt,ifPresent(IntConsumer consumer),void,"Have the specified consumer accept the value if a value is present, otherwise do nothing."
OptionalInt,isPresent(),boolean,"Return true if there is a value present, otherwise false."
OptionalInt,of(int value),static OptionalInt,Return an OptionalInt with the specified value present.
OptionalInt,orElse(int other),int,"Return the value if present, otherwise return other."
OptionalInt,orElseGet(IntSupplier other),int,"Return the value if present, otherwise invoke other and return the result of that invocation."
OptionalInt,orElseThrow(Supplier<X> exceptionSupplier),<X extends Throwable>int,"Return the contained value, if present, otherwise throw an exception to be created by the provided supplier."
OptionalInt,toString(),String,Returns a string representation of the object.
OptionalLong,empty(),static OptionalLong,Returns an empty OptionalLong instance.
OptionalLong,equals(Object obj),boolean,"Indicates whether some other object is ""equal to"" this OptionalLong."
OptionalLong,getAsLong(),long,"If a value is present in this OptionalLong, returns the value, otherwise throws NoSuchElementException."
OptionalLong,hashCode(),int,"Returns the hash code value of the present value, if any, or 0 (zero) if no value is present."
OptionalLong,ifPresent(LongConsumer consumer),void,"Have the specified consumer accept the value if a value is present, otherwise do nothing."
OptionalLong,isPresent(),boolean,"Return true if there is a value present, otherwise false."
OptionalLong,of(long value),static OptionalLong,Return an OptionalLong with the specified value present.
OptionalLong,orElse(long other),long,"Return the value if present, otherwise return other."
OptionalLong,orElseGet(LongSupplier other),long,"Return the value if present, otherwise invoke other and return the result of that invocation."
OptionalLong,orElseThrow(Supplier<X> exceptionSupplier),<X extends Throwable>long,"Return the contained value, if present, otherwise throw an exception to be created by the provided supplier."
OptionalLong,toString(),String,Returns a string representation of the object.
PriorityQueue,add(E e),boolean,Inserts the specified element into this priority queue.
PriorityQueue,clear(),void,Removes all of the elements from this priority queue.
PriorityQueue,comparator(),Comparator<? super E>,"Returns the comparator used to order the elements in this queue, or null if this queue is sorted according to the natural ordering of its elements."
PriorityQueue,contains(Object o),boolean,Returns true if this queue contains the specified element.
PriorityQueue,iterator(),Iterator<E>,Returns an iterator over the elements in this queue.
PriorityQueue,offer(E e),boolean,Inserts the specified element into this priority queue.
PriorityQueue,peek(),E,"Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty."
PriorityQueue,poll(),E,"Retrieves and removes the head of this queue, or returns null if this queue is empty."
PriorityQueue,remove(Object o),boolean,"Removes a single instance of the specified element from this queue, if it is present."
PriorityQueue,size(),int,Returns the number of elements in this collection.
PriorityQueue,spliterator(),Spliterator<E>,Creates a late-binding and fail-fast Spliterator over the elements in this queue.
PriorityQueue,toArray(),Object[],Returns an array containing all of the elements in this queue.
PriorityQueue,toArray(T[] a),<T> T[],Returns an array containing all of the elements in this queue; the runtime type of the returned array is that of the specified array.
Properties,getProperty(String key),String,Searches for the property with the specified key in this property list.
Properties,"getProperty(String key, String defaultValue)",String,Searches for the property with the specified key in this property list.
Properties,list(PrintStream out),void,Prints this property list out to the specified output stream.
Properties,list(PrintWriter out),void,Prints this property list out to the specified output stream.
Properties,load(InputStream inStream),void,Reads a property list (key and element pairs) from the input byte stream.
Properties,load(Reader reader),void,Reads a property list (key and element pairs) from the input character stream in a simple line-oriented format.
Properties,loadFromXML(InputStream in),void,Loads all of the properties represented by the XML document on the specified input stream into this properties table.
Properties,propertyNames(),Enumeration<?>,"Returns an enumeration of all the keys in this property list, including distinct keys in the default property list if a key of the same name has not already been found from the main properties list."
Properties,"save(OutputStream out, String comments)",void,"Deprecated. This method does not throw an IOException if an I/O error occurs while saving the property list. The preferred way to save a properties list is via the store(OutputStream out, String comments) method or the storeToXML(OutputStream os, String comment) method."
Properties,"setProperty(String key, String value)",Object,Calls the Hashtable method put.
Properties,"store(OutputStream out, String comments)",void,Writes this property list (key and element pairs) in this Properties table to the output stream in a format suitable for loading into a Properties table using the load(InputStream) method.
Properties,"store(Writer writer, String comments)",void,Writes this property list (key and element pairs) in this Properties table to the output character stream in a format suitable for using the load(Reader) method.
Properties,"storeToXML(OutputStream os, String comment)",void,Emits an XML document representing all of the properties contained in this table.
Properties,"storeToXML(OutputStream os, String comment, String encoding)",void,"Emits an XML document representing all of the properties contained in this table, using the specified encoding."
Properties,stringPropertyNames(),Set<String>,"Returns a set of keys in this property list where the key and its corresponding value are strings, including distinct keys in the default property list if a key of the same name has not already been found from the main properties list."
PropertyPermission,equals(Object obj),boolean,Checks two PropertyPermission objects for equality.
PropertyPermission,getActions(),String,"Returns the ""canonical string representation"" of the actions."
PropertyPermission,hashCode(),int,Returns the hash code value for this object.
PropertyPermission,implies(Permission p),boolean,"Checks if this PropertyPermission object ""implies"" the specified permission."
PropertyPermission,newPermissionCollection(),PermissionCollection,Returns a new PermissionCollection object for storing PropertyPermission objects.
PropertyResourceBundle,getKeys(),Enumeration<String>,Returns an Enumeration of the keys contained in this ResourceBundle and its parent bundles.
PropertyResourceBundle,handleGetObject(String key),Object,Gets an object for the given key from this resource bundle.
PropertyResourceBundle,handleKeySet(),protected Set<String>,Returns a Set of the keys contained only in this ResourceBundle.
Random,doubles(),DoubleStream,"Returns an effectively unlimited stream of pseudorandom double values, each between zero (inclusive) and one (exclusive)."
Random,"doubles(double randomNumberOrigin, double randomNumberBound)",DoubleStream,"Returns an effectively unlimited stream of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive)."
Random,doubles(long streamSize),DoubleStream,"Returns a stream producing the given streamSize number of pseudorandom double values, each between zero (inclusive) and one (exclusive)."
Random,"doubles(long streamSize, double randomNumberOrigin, double randomNumberBound)",DoubleStream,"Returns a stream producing the given streamSize number of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive)."
Random,ints(),IntStream,Returns an effectively unlimited stream of pseudorandom int values.
Random,"ints(int randomNumberOrigin, int randomNumberBound)",IntStream,"Returns an effectively unlimited stream of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive)."
Random,ints(long streamSize),IntStream,Returns a stream producing the given streamSize number of pseudorandom int values.
Random,"ints(long streamSize, int randomNumberOrigin, int randomNumberBound)",IntStream,"Returns a stream producing the given streamSize number of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive)."
Random,longs(),LongStream,Returns an effectively unlimited stream of pseudorandom long values.
Random,longs(long streamSize),LongStream,Returns a stream producing the given streamSize number of pseudorandom long values.
Random,"longs(long randomNumberOrigin, long randomNumberBound)",LongStream,"Returns an effectively unlimited stream of pseudorandom long values, each conforming to the given origin (inclusive) and bound (exclusive)."
Random,"longs(long streamSize, long randomNumberOrigin, long randomNumberBound)",LongStream,"Returns a stream producing the given streamSize number of pseudorandom long, each conforming to the given origin (inclusive) and bound (exclusive)."
Random,next(int bits),protected int,Generates the next pseudorandom number.
Random,nextBoolean(),boolean,"Returns the next pseudorandom, uniformly distributed boolean value from this random number generator's sequence."
Random,nextBytes(byte[] bytes),void,Generates random bytes and places them into a user-supplied byte array.
Random,nextDouble(),double,"Returns the next pseudorandom, uniformly distributed double value between 0.0 and 1.0 from this random number generator's sequence."
Random,nextFloat(),float,"Returns the next pseudorandom, uniformly distributed float value between 0.0 and 1.0 from this random number generator's sequence."
Random,nextGaussian(),double,"Returns the next pseudorandom, Gaussian (""normally"") distributed double value with mean 0.0 and standard deviation 1.0 from this random number generator's sequence."
Random,nextInt(),int,"Returns the next pseudorandom, uniformly distributed int value from this random number generator's sequence."
Random,nextInt(int bound),int,"Returns a pseudorandom, uniformly distributed int value between 0 (inclusive) and the specified value (exclusive), drawn from this random number generator's sequence."
Random,nextLong(),long,"Returns the next pseudorandom, uniformly distributed long value from this random number generator's sequence."
Random,setSeed(long seed),void,Sets the seed of this random number generator using a single long seed.
ResourceBundle,clearCache(),static void,Removes all resource bundles from the cache that have been loaded using the caller's class loader.
ResourceBundle,clearCache(ClassLoader loader),static void,Removes all resource bundles from the cache that have been loaded using the given class loader.
ResourceBundle,containsKey(String key),boolean,Determines whether the given key is contained in this ResourceBundle or its parent bundles.
ResourceBundle,getBaseBundleName(),String,"Returns the base name of this bundle, if known, or null if unknown."
ResourceBundle,getBundle(String baseName),static ResourceBundle,"Gets a resource bundle using the specified base name, the default locale, and the caller's class loader."
ResourceBundle,"getBundle(String baseName, Locale locale)",static ResourceBundle,"Gets a resource bundle using the specified base name and locale, and the caller's class loader."
ResourceBundle,"getBundle(String baseName, Locale locale, ClassLoader loader)",static ResourceBundle,"Gets a resource bundle using the specified base name, locale, and class loader."
ResourceBundle,"getBundle(String baseName, Locale targetLocale, ClassLoader loader, ResourceBundle.Control control)",static ResourceBundle,"Returns a resource bundle using the specified base name, target locale, class loader and control."
ResourceBundle,"getBundle(String baseName, Locale targetLocale, ResourceBundle.Control control)",static ResourceBundle,"Returns a resource bundle using the specified base name, target locale and control, and the caller's class loader."
ResourceBundle,"getBundle(String baseName, ResourceBundle.Control control)",static ResourceBundle,"Returns a resource bundle using the specified base name, the default locale and the specified control."
ResourceBundle,getKeys(),abstract Enumeration<String>,Returns an enumeration of the keys.
ResourceBundle,getLocale(),Locale,Returns the locale of this resource bundle.
ResourceBundle,getObject(String key),Object,Gets an object for the given key from this resource bundle or one of its parents.
ResourceBundle,getString(String key),String,Gets a string for the given key from this resource bundle or one of its parents.
ResourceBundle,getStringArray(String key),String[],Gets a string array for the given key from this resource bundle or one of its parents.
ResourceBundle,handleGetObject(String key),protected abstract Object,Gets an object for the given key from this resource bundle.
ResourceBundle,handleKeySet(),protected Set<String>,Returns a Set of the keys contained only in this ResourceBundle.
ResourceBundle,keySet(),Set<String>,Returns a Set of all keys contained in this ResourceBundle and its parent bundles.
ResourceBundle,setParent(ResourceBundle parent),protected void,Sets the parent bundle of this bundle.
ResourceBundle.Control,"getCandidateLocales(String baseName, Locale locale)",List<Locale>,Returns a List of Locales as candidate locales for baseName and locale.
ResourceBundle.Control,getControl(List<String> formats),static ResourceBundle.Control,Returns a ResourceBundle.Control in which the getFormats method returns the specified formats.
ResourceBundle.Control,"getFallbackLocale(String baseName, Locale locale)",Locale,Returns a Locale to be used as a fallback locale for further resource bundle searches by the ResourceBundle.getBundle factory method.
ResourceBundle.Control,getFormats(String baseName),List<String>,Returns a List of Strings containing formats to be used to load resource bundles for the given baseName.
ResourceBundle.Control,getNoFallbackControl(List<String> formats),static ResourceBundle.Control,Returns a ResourceBundle.Control in which the getFormats method returns the specified formats and the getFallbackLocale method returns null.
ResourceBundle.Control,"getTimeToLive(String baseName, Locale locale)",long,Returns the time-to-live (TTL) value for resource bundles that are loaded under this ResourceBundle.Control.
ResourceBundle.Control,"needsReload(String baseName, Locale locale, String format, ClassLoader loader, ResourceBundle bundle, long loadTime)",boolean,Determines if the expired bundle in the cache needs to be reloaded based on the loading time given by loadTime or some other criteria.
ResourceBundle.Control,"newBundle(String baseName, Locale locale, String format, ClassLoader loader, boolean reload)",ResourceBundle,"Instantiates a resource bundle for the given bundle name of the given format and locale, using the given class loader if necessary."
ResourceBundle.Control,"toBundleName(String baseName, Locale locale)",String,Converts the given baseName and locale to the bundle name.
ResourceBundle.Control,"toResourceName(String bundleName, String suffix)",String,Converts the given bundleName to the form required by the ClassLoader.getResource method by replacing all occurrences of '.' in bundleName with '/' and appending a '.' and the given file suffix.
Scanner,close(),void,Closes this scanner.
Scanner,delimiter(),Pattern,Returns the Pattern this Scanner is currently using to match delimiters.
Scanner,findInLine(Pattern pattern),String,Attempts to find the next occurrence of the specified pattern ignoring delimiters.
Scanner,findInLine(String pattern),String,"Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters."
Scanner,"findWithinHorizon(Pattern pattern, int horizon)",String,Attempts to find the next occurrence of the specified pattern.
Scanner,"findWithinHorizon(String pattern, int horizon)",String,"Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters."
Scanner,hasNext(),boolean,Returns true if this scanner has another token in its input.
Scanner,hasNext(Pattern pattern),boolean,Returns true if the next complete token matches the specified pattern.
Scanner,hasNext(String pattern),boolean,Returns true if the next token matches the pattern constructed from the specified string.
Scanner,hasNextBigDecimal(),boolean,Returns true if the next token in this scanner's input can be interpreted as a BigDecimal using the nextBigDecimal() method.
Scanner,hasNextBigInteger(),boolean,Returns true if the next token in this scanner's input can be interpreted as a BigInteger in the default radix using the nextBigInteger() method.
Scanner,hasNextBigInteger(int radix),boolean,Returns true if the next token in this scanner's input can be interpreted as a BigInteger in the specified radix using the nextBigInteger() method.
Scanner,hasNextBoolean(),boolean,"Returns true if the next token in this scanner's input can be interpreted as a boolean value using a case insensitive pattern created from the string ""true|false""."
Scanner,hasNextByte(),boolean,Returns true if the next token in this scanner's input can be interpreted as a byte value in the default radix using the nextByte() method.
Scanner,hasNextByte(int radix),boolean,Returns true if the next token in this scanner's input can be interpreted as a byte value in the specified radix using the nextByte() method.
Scanner,hasNextDouble(),boolean,Returns true if the next token in this scanner's input can be interpreted as a double value using the nextDouble() method.
Scanner,hasNextFloat(),boolean,Returns true if the next token in this scanner's input can be interpreted as a float value using the nextFloat() method.
Scanner,hasNextInt(),boolean,Returns true if the next token in this scanner's input can be interpreted as an int value in the default radix using the nextInt() method.
Scanner,hasNextInt(int radix),boolean,Returns true if the next token in this scanner's input can be interpreted as an int value in the specified radix using the nextInt() method.
Scanner,hasNextLine(),boolean,Returns true if there is another line in the input of this scanner.
Scanner,hasNextLong(),boolean,Returns true if the next token in this scanner's input can be interpreted as a long value in the default radix using the nextLong() method.
Scanner,hasNextLong(int radix),boolean,Returns true if the next token in this scanner's input can be interpreted as a long value in the specified radix using the nextLong() method.
Scanner,hasNextShort(),boolean,Returns true if the next token in this scanner's input can be interpreted as a short value in the default radix using the nextShort() method.
Scanner,hasNextShort(int radix),boolean,Returns true if the next token in this scanner's input can be interpreted as a short value in the specified radix using the nextShort() method.
Scanner,ioException(),IOException,Returns the IOException last thrown by this Scanner's underlying Readable.
Scanner,locale(),Locale,Returns this scanner's locale.
Scanner,match(),MatchResult,Returns the match result of the last scanning operation performed by this scanner.
Scanner,next(),String,Finds and returns the next complete token from this scanner.
Scanner,next(Pattern pattern),String,Returns the next token if it matches the specified pattern.
Scanner,next(String pattern),String,Returns the next token if it matches the pattern constructed from the specified string.
Scanner,nextBigDecimal(),BigDecimal,Scans the next token of the input as a BigDecimal.
Scanner,nextBigInteger(),BigInteger,Scans the next token of the input as a BigInteger.
Scanner,nextBigInteger(int radix),BigInteger,Scans the next token of the input as a BigInteger.
Scanner,nextBoolean(),boolean,Scans the next token of the input into a boolean value and returns that value.
Scanner,nextByte(),byte,Scans the next token of the input as a byte.
Scanner,nextByte(int radix),byte,Scans the next token of the input as a byte.
Scanner,nextDouble(),double,Scans the next token of the input as a double.
Scanner,nextFloat(),float,Scans the next token of the input as a float.
Scanner,nextInt(),int,Scans the next token of the input as an int.
Scanner,nextInt(int radix),int,Scans the next token of the input as an int.
Scanner,nextLine(),String,Advances this scanner past the current line and returns the input that was skipped.
Scanner,nextLong(),long,Scans the next token of the input as a long.
Scanner,nextLong(int radix),long,Scans the next token of the input as a long.
Scanner,nextShort(),short,Scans the next token of the input as a short.
Scanner,nextShort(int radix),short,Scans the next token of the input as a short.
Scanner,radix(),int,Returns this scanner's default radix.
Scanner,remove(),void,The remove operation is not supported by this implementation of Iterator.
Scanner,reset(),Scanner,Resets this scanner.
Scanner,skip(Pattern pattern),Scanner,"Skips input that matches the specified pattern, ignoring delimiters."
Scanner,skip(String pattern),Scanner,Skips input that matches a pattern constructed from the specified string.
Scanner,toString(),String,Returns the string representation of this Scanner.
Scanner,useDelimiter(Pattern pattern),Scanner,Sets this scanner's delimiting pattern to the specified pattern.
Scanner,useDelimiter(String pattern),Scanner,Sets this scanner's delimiting pattern to a pattern constructed from the specified String.
Scanner,useLocale(Locale locale),Scanner,Sets this scanner's locale to the specified locale.
Scanner,useRadix(int radix),Scanner,Sets this scanner's default radix to the specified radix.
ServiceLoader,iterator(),Iterator<S>,Lazily loads the available providers of this loader's service.
ServiceLoader,load(Class<S> service),static <S> ServiceLoader<S>,"Creates a new service loader for the given service type, using the current thread's context class loader."
ServiceLoader,"load(Class<S> service, ClassLoader loader)",static <S> ServiceLoader<S>,Creates a new service loader for the given service type and class loader.
ServiceLoader,loadInstalled(Class<S> service),static <S> ServiceLoader<S>,"Creates a new service loader for the given service type, using the extension class loader."
ServiceLoader,reload(),void,Clear this loader's provider cache so that all providers will be reloaded.
ServiceLoader,toString(),String,Returns a string describing this service.
SimpleTimeZone,clone(),Object,Returns a clone of this SimpleTimeZone instance.
SimpleTimeZone,equals(Object obj),boolean,Compares the equality of two SimpleTimeZone objects.
SimpleTimeZone,getDSTSavings(),int,Returns the amount of time in milliseconds that the clock is advanced during daylight saving time.
SimpleTimeZone,"getOffset(int era, int year, int month, int day, int dayOfWeek, int millis)",int,"Returns the difference in milliseconds between local time and UTC, taking into account both the raw offset and the effect of daylight saving, for the specified date and time."
SimpleTimeZone,getOffset(long date),int,Returns the offset of this time zone from UTC at the given time.
SimpleTimeZone,getRawOffset(),int,Gets the GMT offset for this time zone.
SimpleTimeZone,hashCode(),int,Generates the hash code for the SimpleDateFormat object.
SimpleTimeZone,hasSameRules(TimeZone other),boolean,Returns true if this zone has the same rules and offset as another zone.
SimpleTimeZone,inDaylightTime(Date date),boolean,Queries if the given date is in daylight saving time.
SimpleTimeZone,observesDaylightTime(),boolean,Returns true if this SimpleTimeZone observes Daylight Saving Time.
SimpleTimeZone,setDSTSavings(int millisSavedDuringDST),void,Sets the amount of time in milliseconds that the clock is advanced during daylight saving time.
SimpleTimeZone,"setEndRule(int endMonth, int endDay, int endTime)",void,Sets the daylight saving time end rule to a fixed date within a month.
SimpleTimeZone,"setEndRule(int endMonth, int endDay, int endDayOfWeek, int endTime)",void,Sets the daylight saving time end rule.
SimpleTimeZone,"setEndRule(int endMonth, int endDay, int endDayOfWeek, int endTime, boolean after)",void,"Sets the daylight saving time end rule to a weekday before or after the given date within a month, e.g., the first Monday on or after the 8th."
SimpleTimeZone,setRawOffset(int offsetMillis),void,Sets the base time zone offset to GMT.
SimpleTimeZone,"setStartRule(int startMonth, int startDay, int startTime)",void,Sets the daylight saving time start rule to a fixed date within a month.
SimpleTimeZone,"setStartRule(int startMonth, int startDay, int startDayOfWeek, int startTime)",void,Sets the daylight saving time start rule.
SimpleTimeZone,"setStartRule(int startMonth, int startDay, int startDayOfWeek, int startTime, boolean after)",void,"Sets the daylight saving time start rule to a weekday before or after the given date within a month, e.g., the first Monday on or after the 8th."
SimpleTimeZone,setStartYear(int year),void,Sets the daylight saving time starting year.
SimpleTimeZone,toString(),String,Returns a string representation of this time zone.
SimpleTimeZone,useDaylightTime(),boolean,Queries if this time zone uses daylight saving time.
Spliterators,emptyDoubleSpliterator(),static Spliterator.OfDouble,Creates an empty Spliterator.OfDouble
Spliterators,emptyIntSpliterator(),static Spliterator.OfInt,Creates an empty Spliterator.OfInt
Spliterators,emptyLongSpliterator(),static Spliterator.OfLong,Creates an empty Spliterator.OfLong
Spliterators,emptySpliterator(),static <T> Spliterator<T>,Creates an empty Spliterator
Spliterators,iterator(Spliterator.OfDouble spliterator),static PrimitiveIterator.OfDouble,Creates an PrimitiveIterator.OfDouble from a Spliterator.OfDouble.
Spliterators,iterator(Spliterator.OfInt spliterator),static PrimitiveIterator.OfInt,Creates an PrimitiveIterator.OfInt from a Spliterator.OfInt.
Spliterators,iterator(Spliterator.OfLong spliterator),static PrimitiveIterator.OfLong,Creates an PrimitiveIterator.OfLong from a Spliterator.OfLong.
Spliterators,iterator(Spliterator<? extends T> spliterator),static <T> Iterator<T>,Creates an Iterator from a Spliterator.
Spliterators,"spliterator(Collection<? extends T> c, int characteristics)",static <T> Spliterator<T>,"Creates a Spliterator using the given collection's Collection.iterator() as the source of elements, and reporting its Collection.size() as its initial size."
Spliterators,"spliterator(double[] array, int additionalCharacteristics)",static Spliterator.OfDouble,"Creates a Spliterator.OfDouble covering the elements of a given array, using a customized set of spliterator characteristics."
Spliterators,"spliterator(double[] array, int fromIndex, int toIndex, int additionalCharacteristics)",static Spliterator.OfDouble,"Creates a Spliterator.OfDouble covering a range of elements of a given array, using a customized set of spliterator characteristics."
Spliterators,"spliterator(int[] array, int additionalCharacteristics)",static Spliterator.OfInt,"Creates a Spliterator.OfInt covering the elements of a given array, using a customized set of spliterator characteristics."
Spliterators,"spliterator(int[] array, int fromIndex, int toIndex, int additionalCharacteristics)",static Spliterator.OfInt,"Creates a Spliterator.OfInt covering a range of elements of a given array, using a customized set of spliterator characteristics."
Spliterators,"spliterator(Iterator<? extends T> iterator, long size, int characteristics)",static <T> Spliterator<T>,"Creates a Spliterator using a given Iterator as the source of elements, and with a given initially reported size."
Spliterators,"spliterator(long[] array, int additionalCharacteristics)",static Spliterator.OfLong,"Creates a Spliterator.OfLong covering the elements of a given array, using a customized set of spliterator characteristics."
Spliterators,"spliterator(long[] array, int fromIndex, int toIndex, int additionalCharacteristics)",static Spliterator.OfLong,"Creates a Spliterator.OfLong covering a range of elements of a given array, using a customized set of spliterator characteristics."
Spliterators,"spliterator(Object[] array, int additionalCharacteristics)",static <T> Spliterator<T>,"Creates a Spliterator covering the elements of a given array, using a customized set of spliterator characteristics."
Spliterators,"spliterator(Object[] array, int fromIndex, int toIndex, int additionalCharacteristics)",static <T> Spliterator<T>,"Creates a Spliterator covering a range of elements of a given array, using a customized set of spliterator characteristics."
Spliterators,"spliterator(PrimitiveIterator.OfDouble iterator, long size, int characteristics)",static Spliterator.OfDouble,"Creates a Spliterator.OfDouble using a given DoubleStream.DoubleIterator as the source of elements, and with a given initially reported size."
Spliterators,"spliterator(PrimitiveIterator.OfInt iterator, long size, int characteristics)",static Spliterator.OfInt,"Creates a Spliterator.OfInt using a given IntStream.IntIterator as the source of elements, and with a given initially reported size."
Spliterators,"spliterator(PrimitiveIterator.OfLong iterator, long size, int characteristics)",static Spliterator.OfLong,"Creates a Spliterator.OfLong using a given LongStream.LongIterator as the source of elements, and with a given initially reported size."
Spliterators,"spliteratorUnknownSize(Iterator<? extends T> iterator, int characteristics)",static <T> Spliterator<T>,"Creates a Spliterator using a given Iterator as the source of elements, with no initial size estimate."
Spliterators,"spliteratorUnknownSize(PrimitiveIterator.OfDouble iterator, int characteristics)",static Spliterator.OfDouble,"Creates a Spliterator.OfDouble using a given DoubleStream.DoubleIterator as the source of elements, with no initial size estimate."
Spliterators,"spliteratorUnknownSize(PrimitiveIterator.OfInt iterator, int characteristics)",static Spliterator.OfInt,"Creates a Spliterator.OfInt using a given IntStream.IntIterator as the source of elements, with no initial size estimate."
Spliterators,"spliteratorUnknownSize(PrimitiveIterator.OfLong iterator, int characteristics)",static Spliterator.OfLong,"Creates a Spliterator.OfLong using a given LongStream.LongIterator as the source of elements, with no initial size estimate."
Spliterators.AbstractDoubleSpliterator,characteristics(),int,Returns a set of characteristics of this Spliterator and its elements.
Spliterators.AbstractDoubleSpliterator,estimateSize(),long,"Returns an estimate of the number of elements that would be encountered by a Spliterator.forEachRemaining(java.util.function.Consumer<? super T>) traversal, or returns Long.MAX_VALUE if infinite, unknown, or too expensive to compute."
Spliterators.AbstractDoubleSpliterator,trySplit(),Spliterator.OfDouble,"If this spliterator can be partitioned, returns a Spliterator covering elements, that will, upon return from this method, not be covered by this Spliterator."
Spliterators.AbstractIntSpliterator,characteristics(),int,Returns a set of characteristics of this Spliterator and its elements.
Spliterators.AbstractIntSpliterator,estimateSize(),long,"Returns an estimate of the number of elements that would be encountered by a Spliterator.forEachRemaining(java.util.function.Consumer<? super T>) traversal, or returns Long.MAX_VALUE if infinite, unknown, or too expensive to compute."
Spliterators.AbstractIntSpliterator,trySplit(),Spliterator.OfInt,"If this spliterator can be partitioned, returns a Spliterator covering elements, that will, upon return from this method, not be covered by this Spliterator."
Spliterators.AbstractLongSpliterator,characteristics(),int,Returns a set of characteristics of this Spliterator and its elements.
Spliterators.AbstractLongSpliterator,estimateSize(),long,"Returns an estimate of the number of elements that would be encountered by a Spliterator.forEachRemaining(java.util.function.Consumer<? super T>) traversal, or returns Long.MAX_VALUE if infinite, unknown, or too expensive to compute."
Spliterators.AbstractLongSpliterator,trySplit(),Spliterator.OfLong,"If this spliterator can be partitioned, returns a Spliterator covering elements, that will, upon return from this method, not be covered by this Spliterator."
Spliterators.AbstractSpliterator,characteristics(),int,Returns a set of characteristics of this Spliterator and its elements.
Spliterators.AbstractSpliterator,estimateSize(),long,"Returns an estimate of the number of elements that would be encountered by a Spliterator.forEachRemaining(java.util.function.Consumer<? super T>) traversal, or returns Long.MAX_VALUE if infinite, unknown, or too expensive to compute."
Spliterators.AbstractSpliterator,trySplit(),Spliterator<T>,"If this spliterator can be partitioned, returns a Spliterator covering elements, that will, upon return from this method, not be covered by this Spliterator."
SplittableRandom,doubles(),DoubleStream,Returns an effectively unlimited stream of pseudorandom double values from this generator and/or one split from it; each value is between zero (inclusive) and one (exclusive).
SplittableRandom,"doubles(double randomNumberOrigin, double randomNumberBound)",DoubleStream,Returns an effectively unlimited stream of pseudorandom double values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).
SplittableRandom,doubles(long streamSize),DoubleStream,Returns a stream producing the given streamSize number of pseudorandom double values from this generator and/or one split from it; each value is between zero (inclusive) and one (exclusive).
SplittableRandom,"doubles(long streamSize, double randomNumberOrigin, double randomNumberBound)",DoubleStream,Returns a stream producing the given streamSize number of pseudorandom double values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).
SplittableRandom,ints(),IntStream,Returns an effectively unlimited stream of pseudorandom int values from this generator and/or one split from it.
SplittableRandom,"ints(int randomNumberOrigin, int randomNumberBound)",IntStream,Returns an effectively unlimited stream of pseudorandom int values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).
SplittableRandom,ints(long streamSize),IntStream,Returns a stream producing the given streamSize number of pseudorandom int values from this generator and/or one split from it.
SplittableRandom,"ints(long streamSize, int randomNumberOrigin, int randomNumberBound)",IntStream,Returns a stream producing the given streamSize number of pseudorandom int values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).
SplittableRandom,longs(),LongStream,Returns an effectively unlimited stream of pseudorandom long values from this generator and/or one split from it.
SplittableRandom,longs(long streamSize),LongStream,Returns a stream producing the given streamSize number of pseudorandom long values from this generator and/or one split from it.
SplittableRandom,"longs(long randomNumberOrigin, long randomNumberBound)",LongStream,Returns an effectively unlimited stream of pseudorandom long values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).
SplittableRandom,"longs(long streamSize, long randomNumberOrigin, long randomNumberBound)",LongStream,Returns a stream producing the given streamSize number of pseudorandom long values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).
SplittableRandom,nextBoolean(),boolean,Returns a pseudorandom boolean value.
SplittableRandom,nextDouble(),double,Returns a pseudorandom double value between zero (inclusive) and one (exclusive).
SplittableRandom,nextDouble(double bound),double,Returns a pseudorandom double value between 0.0 (inclusive) and the specified bound (exclusive).
SplittableRandom,"nextDouble(double origin, double bound)",double,Returns a pseudorandom double value between the specified origin (inclusive) and bound (exclusive).
SplittableRandom,nextInt(),int,Returns a pseudorandom int value.
SplittableRandom,nextInt(int bound),int,Returns a pseudorandom int value between zero (inclusive) and the specified bound (exclusive).
SplittableRandom,"nextInt(int origin, int bound)",int,Returns a pseudorandom int value between the specified origin (inclusive) and the specified bound (exclusive).
SplittableRandom,nextLong(),long,Returns a pseudorandom long value.
SplittableRandom,nextLong(long bound),long,Returns a pseudorandom long value between zero (inclusive) and the specified bound (exclusive).
SplittableRandom,"nextLong(long origin, long bound)",long,Returns a pseudorandom long value between the specified origin (inclusive) and the specified bound (exclusive).
SplittableRandom,split(),SplittableRandom,Constructs and returns a new SplittableRandom instance that shares no mutable state with this instance.
Stack,empty(),boolean,Tests if this stack is empty.
Stack,peek(),E,Looks at the object at the top of this stack without removing it from the stack.
Stack,pop(),E,Removes the object at the top of this stack and returns that object as the value of this function.
Stack,push(E item),E,Pushes an item onto the top of this stack.
Stack,search(Object o),int,Returns the 1-based position where an object is on this stack.
StringJoiner,add(CharSequence newElement),StringJoiner,Adds a copy of the given CharSequence value as the next element of the StringJoiner value.
StringJoiner,length(),int,Returns the length of the String representation of this StringJoiner.
StringJoiner,merge(StringJoiner other),StringJoiner,Adds the contents of the given StringJoiner without prefix and suffix as the next element if it is non-empty.
StringJoiner,setEmptyValue(CharSequence emptyValue),StringJoiner,"Sets the sequence of characters to be used when determining the string representation of this StringJoiner and no elements have been added yet, that is, when it is empty."
StringJoiner,toString(),String,"Returns the current value, consisting of the prefix, the values added so far separated by the delimiter, and the suffix, unless no elements have been added in which case, the prefix + suffix or the emptyValue characters are returned"
StringTokenizer,countTokens(),int,Calculates the number of times that this tokenizer's nextToken method can be called before it generates an exception.
StringTokenizer,hasMoreElements(),boolean,Returns the same value as the hasMoreTokens method.
StringTokenizer,hasMoreTokens(),boolean,Tests if there are more tokens available from this tokenizer's string.
StringTokenizer,nextElement(),Object,"Returns the same value as the nextToken method, except that its declared return value is Object rather than String."
StringTokenizer,nextToken(),String,Returns the next token from this string tokenizer.
StringTokenizer,nextToken(String delim),String,Returns the next token in this string tokenizer's string.
Timer,cancel(),void,"Terminates this timer, discarding any currently scheduled tasks."
Timer,purge(),int,Removes all cancelled tasks from this timer's task queue.
Timer,"schedule(TimerTask task, Date time)",void,Schedules the specified task for execution at the specified time.
Timer,"schedule(TimerTask task, Date firstTime, long period)",void,"Schedules the specified task for repeated fixed-delay execution, beginning at the specified time."
Timer,"schedule(TimerTask task, long delay)",void,Schedules the specified task for execution after the specified delay.
Timer,"schedule(TimerTask task, long delay, long period)",void,"Schedules the specified task for repeated fixed-delay execution, beginning after the specified delay."
Timer,"scheduleAtFixedRate(TimerTask task, Date firstTime, long period)",void,"Schedules the specified task for repeated fixed-rate execution, beginning at the specified time."
Timer,"scheduleAtFixedRate(TimerTask task, long delay, long period)",void,"Schedules the specified task for repeated fixed-rate execution, beginning after the specified delay."
TimerTask,cancel(),boolean,Cancels this timer task.
TimerTask,run(),abstract void,The action to be performed by this timer task.
TimerTask,scheduledExecutionTime(),long,Returns the scheduled execution time of the most recent actual execution of this task.
TimeZone,clone(),Object,Creates a copy of this TimeZone.
TimeZone,getAvailableIDs(),static String[],Gets all the available IDs supported.
TimeZone,getAvailableIDs(int rawOffset),static String[],Gets the available IDs according to the given time zone offset in milliseconds.
TimeZone,getDefault(),static TimeZone,Gets the default TimeZone of the Java virtual machine.
TimeZone,getDisplayName(),String,Returns a long standard time name of this TimeZone suitable for presentation to the user in the default locale.
TimeZone,"getDisplayName(boolean daylight, int style)",String,Returns a name in the specified style of this TimeZone suitable for presentation to the user in the default locale.
TimeZone,"getDisplayName(boolean daylight, int style, Locale locale)",String,Returns a name in the specified style of this TimeZone suitable for presentation to the user in the specified locale.
TimeZone,getDisplayName(Locale locale),String,Returns a long standard time name of this TimeZone suitable for presentation to the user in the specified locale.
TimeZone,getDSTSavings(),int,Returns the amount of time to be added to local standard time to get local wall clock time.
TimeZone,getID(),String,Gets the ID of this time zone.
TimeZone,"getOffset(int era, int year, int month, int day, int dayOfWeek, int milliseconds)",abstract int,"Gets the time zone offset, for current date, modified in case of daylight savings."
TimeZone,getOffset(long date),int,Returns the offset of this time zone from UTC at the specified date.
TimeZone,getRawOffset(),abstract int,Returns the amount of time in milliseconds to add to UTC to get standard time in this time zone.
TimeZone,getTimeZone(String ID),static TimeZone,Gets the TimeZone for the given ID.
TimeZone,getTimeZone(ZoneId zoneId),static TimeZone,Gets the TimeZone for the given zoneId.
TimeZone,hasSameRules(TimeZone other),boolean,Returns true if this zone has the same rule and offset as another zone.
TimeZone,inDaylightTime(Date date),abstract boolean,Queries if the given date is in Daylight Saving Time in this time zone.
TimeZone,observesDaylightTime(),boolean,"Returns true if this TimeZone is currently in Daylight Saving Time, or if a transition from Standard Time to Daylight Saving Time occurs at any future time."
TimeZone,setDefault(TimeZone zone),static void,Sets the TimeZone that is returned by the getDefault method.
TimeZone,setID(String ID),void,Sets the time zone ID.
TimeZone,setRawOffset(int offsetMillis),abstract void,Sets the base time zone offset to GMT.
TimeZone,toZoneId(),ZoneId,Converts this TimeZone object to a ZoneId.
TimeZone,useDaylightTime(),abstract boolean,Queries if this TimeZone uses Daylight Saving Time.
TreeMap,ceilingEntry(K key),"Map.Entry<K,V>","Returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such key."
TreeMap,ceilingKey(K key),K,"Returns the least key greater than or equal to the given key, or null if there is no such key."
TreeMap,clear(),void,Removes all of the mappings from this map.
TreeMap,clone(),Object,Returns a shallow copy of this TreeMap instance.
TreeMap,comparator(),Comparator<? super K>,"Returns the comparator used to order the keys in this map, or null if this map uses the natural ordering of its keys."
TreeMap,containsKey(Object key),boolean,Returns true if this map contains a mapping for the specified key.
TreeMap,containsValue(Object value),boolean,Returns true if this map maps one or more keys to the specified value.
TreeMap,descendingKeySet(),NavigableSet<K>,Returns a reverse order NavigableSet view of the keys contained in this map.
TreeMap,descendingMap(),"NavigableMap<K,V>",Returns a reverse order view of the mappings contained in this map.
TreeMap,entrySet(),"Set<Map.Entry<K,V>>",Returns a Set view of the mappings contained in this map.
TreeMap,firstEntry(),"Map.Entry<K,V>","Returns a key-value mapping associated with the least key in this map, or null if the map is empty."
TreeMap,firstKey(),K,Returns the first (lowest) key currently in this map.
TreeMap,floorEntry(K key),"Map.Entry<K,V>","Returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key."
TreeMap,floorKey(K key),K,"Returns the greatest key less than or equal to the given key, or null if there is no such key."
TreeMap,"forEach(BiConsumer<? super K,? super V> action)",void,Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.
TreeMap,get(Object key),V,"Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key."
TreeMap,headMap(K toKey),"SortedMap<K,V>",Returns a view of the portion of this map whose keys are strictly less than toKey.
TreeMap,"headMap(K toKey, boolean inclusive)","NavigableMap<K,V>","Returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey."
TreeMap,higherEntry(K key),"Map.Entry<K,V>","Returns a key-value mapping associated with the least key strictly greater than the given key, or null if there is no such key."
TreeMap,higherKey(K key),K,"Returns the least key strictly greater than the given key, or null if there is no such key."
TreeMap,keySet(),Set<K>,Returns a Set view of the keys contained in this map.
TreeMap,lastEntry(),"Map.Entry<K,V>","Returns a key-value mapping associated with the greatest key in this map, or null if the map is empty."
TreeMap,lastKey(),K,Returns the last (highest) key currently in this map.
TreeMap,lowerEntry(K key),"Map.Entry<K,V>","Returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key."
TreeMap,lowerKey(K key),K,"Returns the greatest key strictly less than the given key, or null if there is no such key."
TreeMap,navigableKeySet(),NavigableSet<K>,Returns a NavigableSet view of the keys contained in this map.
TreeMap,pollFirstEntry(),"Map.Entry<K,V>","Removes and returns a key-value mapping associated with the least key in this map, or null if the map is empty."
TreeMap,pollLastEntry(),"Map.Entry<K,V>","Removes and returns a key-value mapping associated with the greatest key in this map, or null if the map is empty."
TreeMap,"put(K key, V value)",V,Associates the specified value with the specified key in this map.
TreeMap,"putAll(Map<? extends K,? extends V> map)",void,Copies all of the mappings from the specified map to this map.
TreeMap,remove(Object key),V,Removes the mapping for this key from this TreeMap if present.
TreeMap,"replace(K key, V value)",V,Replaces the entry for the specified key only if it is currently mapped to some value.
TreeMap,"replace(K key, V oldValue, V newValue)",boolean,Replaces the entry for the specified key only if currently mapped to the specified value.
TreeMap,"replaceAll(BiFunction<? super K,? super V,? extends V> function)",void,Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.
TreeMap,size(),int,Returns the number of key-value mappings in this map.
TreeMap,"subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)","NavigableMap<K,V>",Returns a view of the portion of this map whose keys range from fromKey to toKey.
TreeMap,"subMap(K fromKey, K toKey)","SortedMap<K,V>","Returns a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive."
TreeMap,tailMap(K fromKey),"SortedMap<K,V>",Returns a view of the portion of this map whose keys are greater than or equal to fromKey.
TreeMap,"tailMap(K fromKey, boolean inclusive)","NavigableMap<K,V>","Returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey."
TreeMap,values(),Collection<V>,Returns a Collection view of the values contained in this map.
TreeSet,add(E e),boolean,Adds the specified element to this set if it is not already present.
TreeSet,addAll(Collection<? extends E> c),boolean,Adds all of the elements in the specified collection to this set.
TreeSet,ceiling(E e),E,"Returns the least element in this set greater than or equal to the given element, or null if there is no such element."
TreeSet,clear(),void,Removes all of the elements from this set.
TreeSet,clone(),Object,Returns a shallow copy of this TreeSet instance.
TreeSet,comparator(),Comparator<? super E>,"Returns the comparator used to order the elements in this set, or null if this set uses the natural ordering of its elements."
TreeSet,contains(Object o),boolean,Returns true if this set contains the specified element.
TreeSet,descendingIterator(),Iterator<E>,Returns an iterator over the elements in this set in descending order.
TreeSet,descendingSet(),NavigableSet<E>,Returns a reverse order view of the elements contained in this set.
TreeSet,first(),E,Returns the first (lowest) element currently in this set.
TreeSet,floor(E e),E,"Returns the greatest element in this set less than or equal to the given element, or null if there is no such element."
TreeSet,headSet(E toElement),SortedSet<E>,Returns a view of the portion of this set whose elements are strictly less than toElement.
TreeSet,"headSet(E toElement, boolean inclusive)",NavigableSet<E>,"Returns a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toElement."
TreeSet,higher(E e),E,"Returns the least element in this set strictly greater than the given element, or null if there is no such element."
TreeSet,isEmpty(),boolean,Returns true if this set contains no elements.
TreeSet,iterator(),Iterator<E>,Returns an iterator over the elements in this set in ascending order.
TreeSet,last(),E,Returns the last (highest) element currently in this set.
TreeSet,lower(E e),E,"Returns the greatest element in this set strictly less than the given element, or null if there is no such element."
TreeSet,pollFirst(),E,"Retrieves and removes the first (lowest) element, or returns null if this set is empty."
TreeSet,pollLast(),E,"Retrieves and removes the last (highest) element, or returns null if this set is empty."
TreeSet,remove(Object o),boolean,Removes the specified element from this set if it is present.
TreeSet,size(),int,Returns the number of elements in this set (its cardinality).
TreeSet,spliterator(),Spliterator<E>,Creates a late-binding and fail-fast Spliterator over the elements in this set.
TreeSet,"subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)",NavigableSet<E>,Returns a view of the portion of this set whose elements range from fromElement to toElement.
TreeSet,"subSet(E fromElement, E toElement)",SortedSet<E>,"Returns a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive."
TreeSet,tailSet(E fromElement),SortedSet<E>,Returns a view of the portion of this set whose elements are greater than or equal to fromElement.
TreeSet,"tailSet(E fromElement, boolean inclusive)",NavigableSet<E>,"Returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive is true) fromElement."
UUID,clockSequence(),int,The clock sequence value associated with this UUID.
UUID,compareTo(UUID val),int,Compares this UUID with the specified UUID.
UUID,equals(Object obj),boolean,Compares this object to the specified object.
UUID,fromString(String name),static UUID,Creates a UUID from the string standard representation as described in the toString() method.
UUID,getLeastSignificantBits(),long,Returns the least significant 64 bits of this UUID's 128 bit value.
UUID,getMostSignificantBits(),long,Returns the most significant 64 bits of this UUID's 128 bit value.
UUID,hashCode(),int,Returns a hash code for this UUID.
UUID,nameUUIDFromBytes(byte[] name),static UUID,Static factory to retrieve a type 3 (name based) UUID based on the specified byte array.
UUID,node(),long,The node value associated with this UUID.
UUID,randomUUID(),static UUID,Static factory to retrieve a type 4 (pseudo randomly generated) UUID.
UUID,timestamp(),long,The timestamp value associated with this UUID.
UUID,toString(),String,Returns a String object representing this UUID.
UUID,variant(),int,The variant number associated with this UUID.
UUID,version(),int,The version number associated with this UUID.
Vector,add(E e),boolean,Appends the specified element to the end of this Vector.
Vector,"add(int index, E element)",void,Inserts the specified element at the specified position in this Vector.
Vector,addAll(Collection<? extends E> c),boolean,"Appends all of the elements in the specified Collection to the end of this Vector, in the order that they are returned by the specified Collection's Iterator."
Vector,"addAll(int index, Collection<? extends E> c)",boolean,Inserts all of the elements in the specified Collection into this Vector at the specified position.
Vector,addElement(E obj),void,"Adds the specified component to the end of this vector, increasing its size by one."
Vector,capacity(),int,Returns the current capacity of this vector.
Vector,clear(),void,Removes all of the elements from this Vector.
Vector,clone(),Object,Returns a clone of this vector.
Vector,contains(Object o),boolean,Returns true if this vector contains the specified element.
Vector,containsAll(Collection<?> c),boolean,Returns true if this Vector contains all of the elements in the specified Collection.
Vector,copyInto(Object[] anArray),void,Copies the components of this vector into the specified array.
Vector,elementAt(int index),E,Returns the component at the specified index.
Vector,elements(),Enumeration<E>,Returns an enumeration of the components of this vector.
Vector,ensureCapacity(int minCapacity),void,"Increases the capacity of this vector, if necessary, to ensure that it can hold at least the number of components specified by the minimum capacity argument."
Vector,equals(Object o),boolean,Compares the specified Object with this Vector for equality.
Vector,firstElement(),E,Returns the first component (the item at index 0) of this vector.
Vector,forEach(Consumer<? super E> action),void,Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.
Vector,get(int index),E,Returns the element at the specified position in this Vector.
Vector,hashCode(),int,Returns the hash code value for this Vector.
Vector,indexOf(Object o),int,"Returns the index of the first occurrence of the specified element in this vector, or -1 if this vector does not contain the element."
Vector,"indexOf(Object o, int index)",int,"Returns the index of the first occurrence of the specified element in this vector, searching forwards from index, or returns -1 if the element is not found."
Vector,"insertElementAt(E obj, int index)",void,Inserts the specified object as a component in this vector at the specified index.
Vector,isEmpty(),boolean,Tests if this vector has no components.
Vector,iterator(),Iterator<E>,Returns an iterator over the elements in this list in proper sequence.
Vector,lastElement(),E,Returns the last component of the vector.
Vector,lastIndexOf(Object o),int,"Returns the index of the last occurrence of the specified element in this vector, or -1 if this vector does not contain the element."
Vector,"lastIndexOf(Object o, int index)",int,"Returns the index of the last occurrence of the specified element in this vector, searching backwards from index, or returns -1 if the element is not found."
Vector,listIterator(),ListIterator<E>,Returns a list iterator over the elements in this list (in proper sequence).
Vector,listIterator(int index),ListIterator<E>,"Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list."
Vector,remove(int index),E,Removes the element at the specified position in this Vector.
Vector,remove(Object o),boolean,"Removes the first occurrence of the specified element in this Vector If the Vector does not contain the element, it is unchanged."
Vector,removeAll(Collection<?> c),boolean,Removes from this Vector all of its elements that are contained in the specified Collection.
Vector,removeAllElements(),void,Removes all components from this vector and sets its size to zero.
Vector,removeElement(Object obj),boolean,Removes the first (lowest-indexed) occurrence of the argument from this vector.
Vector,removeElementAt(int index),void,Deletes the component at the specified index.
Vector,removeIf(Predicate<? super E> filter),boolean,Removes all of the elements of this collection that satisfy the given predicate.
Vector,"removeRange(int fromIndex, int toIndex)",protected void,"Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive."
Vector,replaceAll(UnaryOperator<E> operator),void,Replaces each element of this list with the result of applying the operator to that element.
Vector,retainAll(Collection<?> c),boolean,Retains only the elements in this Vector that are contained in the specified Collection.
Vector,"set(int index, E element)",E,Replaces the element at the specified position in this Vector with the specified element.
Vector,"setElementAt(E obj, int index)",void,Sets the component at the specified index of this vector to be the specified object.
Vector,setSize(int newSize),void,Sets the size of this vector.
Vector,size(),int,Returns the number of components in this vector.
Vector,sort(Comparator<? super E> c),void,Sorts this list according to the order induced by the specified Comparator.
Vector,spliterator(),Spliterator<E>,Creates a late-binding and fail-fast Spliterator over the elements in this list.
Vector,"subList(int fromIndex, int toIndex)",List<E>,"Returns a view of the portion of this List between fromIndex, inclusive, and toIndex, exclusive."
Vector,toArray(),Object[],Returns an array containing all of the elements in this Vector in the correct order.
Vector,toArray(T[] a),<T> T[],Returns an array containing all of the elements in this Vector in the correct order; the runtime type of the returned array is that of the specified array.
Vector,toString(),String,"Returns a string representation of this Vector, containing the String representation of each element."
Vector,trimToSize(),void,Trims the capacity of this vector to be the vector's current size.
WeakHashMap,clear(),void,Removes all of the mappings from this map.
WeakHashMap,containsKey(Object key),boolean,Returns true if this map contains a mapping for the specified key.
WeakHashMap,containsValue(Object value),boolean,Returns true if this map maps one or more keys to the specified value.
WeakHashMap,entrySet(),"Set<Map.Entry<K,V>>",Returns a Set view of the mappings contained in this map.
WeakHashMap,"forEach(BiConsumer<? super K,? super V> action)",void,Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.
WeakHashMap,get(Object key),V,"Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key."
WeakHashMap,isEmpty(),boolean,Returns true if this map contains no key-value mappings.
WeakHashMap,keySet(),Set<K>,Returns a Set view of the keys contained in this map.
WeakHashMap,"put(K key, V value)",V,Associates the specified value with the specified key in this map.
WeakHashMap,"putAll(Map<? extends K,? extends V> m)",void,Copies all of the mappings from the specified map to this map.
WeakHashMap,remove(Object key),V,Removes the mapping for a key from this weak hash map if it is present.
WeakHashMap,"replaceAll(BiFunction<? super K,? super V,? extends V> function)",void,Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.
WeakHashMap,size(),int,Returns the number of key-value mappings in this map.
WeakHashMap,values(),Collection<V>,Returns a Collection view of the values contained in this map.
