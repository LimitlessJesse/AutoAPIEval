Sample: 0 AbstractCollection_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("Hello");
        System.out.println(list);

        // Using remove method
        boolean removed = list.remove("Hello");
        System.out.println("Element removed: " + removed);
        System.out.println(list);
    }
}
```
================================================================

Sample: 1 AbstractCollection_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list1 = new ArrayList<>();
        list1.add("Hello");
        list1.add("World");

        ArrayList<String> list2 = new ArrayList<>();
        list2.add("Hello");
        list2.add("Java");

        System.out.println("List 1 before removeAll: " + list1);
        System.out.println("List 2: " + list2);

        boolean result = list1.removeAll(list2);

        System.out.println("List 1 after removeAll: " + list1);
        System.out.println("Elements removed: " + result);
    }
}
```
================================================================

Sample: 2 AbstractCollection_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list1 = new ArrayList<>();
        list1.add("Hello");
        list1.add("World");

        ArrayList<String> list2 = new ArrayList<>();
        list2.add("Hello");
        list2.add("Java");

        boolean result = list1.retainAll(list2);
        System.out.println("Elements retained: " + result);
        System.out.println("List 1 after retainAll: " + list1);
    }
}
```
================================================================

Sample: 3 AbstractCollection_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("Hello");
        System.out.println("List before clear: " + list);
        
        list.clear();
        System.out.println("List after clear: " + list);
    }
}
```
================================================================

Sample: 4 AbstractCollection_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        System.out.println("Is the list empty? " + list.isEmpty());
        
        list.add("Hello");
        System.out.println("Is the list empty? " + list.isEmpty());
    }
}
```
================================================================

Sample: 5 AbstractList_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("Hello");
        System.out.println("List before clear: " + list);
        
        list.clear();
        System.out.println("List after clear: " + list);
    }
}
```
================================================================

Sample: 6 AbstractList_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("Hello");
        list.add("World");
        list.add("Java");
        
        List<String> subList = list.subList(1, 3);
        System.out.println(subList);
    }
}
```
================================================================

Sample: 7 AbstractList_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("Hello");
        list.add("World");
        list.add("Java");
        
        int index = list.indexOf("World");
        System.out.println("Index of 'World': " + index);
    }
}
```
================================================================

Sample: 8 AbstractMap_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.AbstractMap;

public class Main {
    public static void main(String[] args) {
        AbstractMap<String, Integer> map = new AbstractMap<String, Integer>() {
            @Override
            public Integer get(Object key) {
                // Implementation of the get method
                return null;
            }
        };
        
        // Using the get method
        Integer value = map.get("key");
        System.out.println("Value: " + value);
    }
}
```
================================================================

Sample: 9 AbstractMap_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.AbstractMap;
import java.util.Map;
import java.util.Set;

public class Main {
    public static void main(String[] args) {
        Map<String, Integer> map = new AbstractMap<String, Integer>() {
            @Override
            public Set<String> keySet() {
                return super.keySet();
            }
        };

        map.put("One", 1);
        map.put("Two", 2);

        Set<String> keySet = map.keySet();
        System.out.println("Keys in the map: " + keySet);
    }
}
```
================================================================

Sample: 10 AbstractMap_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.AbstractMap;

public class Main {
    public static void main(String[] args) {
        AbstractMap<String, Integer> map = new AbstractMap<String, Integer>() {
            @Override
            public Integer put(String key, Integer value) {
                // Custom implementation goes here
                return super.put(key, value);
            }
        };

        map.put("key1", 1);
        map.put("key2", 2);

        System.out.println(map);
    }
}
```
================================================================

Sample: 11 AbstractMap_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Map;

public class Main {
    public static void main(String[] args) {
        // Create a sample map
        Map<String, Integer> map = new AbstractMap<String, Integer>() {
            @Override
            public Set<Entry<String, Integer>> entrySet() {
                return null;
            }
        };

        // Get the collection view of values
        Collection<Integer> values = map.values();

        // Add some values to the map
        map.put("A", 1);
        map.put("B", 2);

        // Print the values
        System.out.println("Values in the map: " + values);
    }
}
```
================================================================

Sample: 12 AbstractMap_SimpleEntry_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.AbstractMap;

public class Main {
    public static void main(String[] args) {
        AbstractMap.SimpleEntry<String, Integer> entry = new AbstractMap.SimpleEntry<>("key", 10);
        String key = entry.getKey();
        System.out.println("Key: " + key);
    }
}
```
================================================================

Sample: 13 AbstractMap_SimpleEntry_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.AbstractMap;

public class Main {
    public static void main(String[] args) {
        AbstractMap.SimpleEntry<String, Integer> entry = new AbstractMap.SimpleEntry<>("key", 10);
        System.out.println("Value: " + entry.getValue());
    }
}
```
================================================================

Sample: 14 AbstractMap_SimpleEntry_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.AbstractMap;

public class Main {
    public static void main(String[] args) {
        AbstractMap.SimpleEntry<String, Integer> entry = new AbstractMap.SimpleEntry<>("key", 10);
        System.out.println("Old value: " + entry.setValue(20));
        System.out.println("New value: " + entry.getValue());
    }
}
```
================================================================

Sample: 15 AbstractMap_SimpleEntry_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.AbstractMap;

public class Main {
    public static void main(String[] args) {
        AbstractMap.SimpleEntry<String, Integer> entry1 = new AbstractMap.SimpleEntry<>("key1", 1);
        AbstractMap.SimpleEntry<String, Integer> entry2 = new AbstractMap.SimpleEntry<>("key1", 1);
        
        System.out.println("Entry 1: " + entry1);
        System.out.println("Entry 2: " + entry2);
        
        System.out.println("Are entries equal? " + entry1.equals(entry2));
    }
}
```
================================================================

Sample: 16 AbstractMap_SimpleEntry_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.AbstractMap;

public class Main {
    public static void main(String[] args) {
        AbstractMap.SimpleEntry<String, Integer> entry = new AbstractMap.SimpleEntry<>("key", 10);
        int hashCode = entry.hashCode();
        System.out.println("Hash code value for the map entry: " + hashCode);
    }
}
```
================================================================

Sample: 17 AbstractMap_SimpleImmutableEntry_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.AbstractMap;

public class Main {
    public static void main(String[] args) {
        AbstractMap.SimpleImmutableEntry<String, Integer> entry = new AbstractMap.SimpleImmutableEntry<>("key", 10);
        String key = entry.getKey();
        System.out.println("Key: " + key);
    }
}
```
================================================================

Sample: 18 AbstractMap_SimpleImmutableEntry_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.AbstractMap;

public class Main {
    public static void main(String[] args) {
        AbstractMap.SimpleImmutableEntry<String, Integer> entry = new AbstractMap.SimpleImmutableEntry<>("key", 10);
        System.out.println("Value: " + entry.getValue());
    }
}
```
================================================================

Sample: 19 AbstractMap_SimpleImmutableEntry_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.AbstractMap;

public class Main {
    public static void main(String[] args) {
        AbstractMap.SimpleImmutableEntry<String, Integer> entry1 = new AbstractMap.SimpleImmutableEntry<>("key", 1);
        AbstractMap.SimpleImmutableEntry<String, Integer> entry2 = new AbstractMap.SimpleImmutableEntry<>("key", 1);

        System.out.println(entry1.equals(entry2)); // Output: true
    }
}
```
================================================================

Sample: 20 AbstractMap_SimpleImmutableEntry_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.AbstractMap;

public class Main {
    public static void main(String[] args) {
        AbstractMap.SimpleImmutableEntry<String, Integer> entry = new AbstractMap.SimpleImmutableEntry<>("key", 10);
        int hashCode = entry.hashCode();
        System.out.println("Hash code value for the map entry: " + hashCode);
    }
}
```
================================================================

Sample: 21 AbstractMap_SimpleImmutableEntry_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.AbstractMap;

public class Main {
    public static void main(String[] args) {
        AbstractMap.SimpleImmutableEntry<String, Integer> entry = new AbstractMap.SimpleImmutableEntry<>("key", 10);
        System.out.println(entry.toString());
    }
}
```
================================================================

Sample: 22 ArrayDeque_1
----------------------------------------------------------------
`void addFirst(E e)`: This method inserts the specified element at the front of the deque.

Code snippet:
```java
import java.util.ArrayDeque;

public class Main {
    public static void main(String[] args) {
        ArrayDeque<String> deque = new ArrayDeque<>();
        deque.addFirst("Hello");
        System.out.println(deque);
    }
}
```
================================================================

Sample: 23 ArrayDeque_2
----------------------------------------------------------------
`void addLast(E e)`: This method inserts the specified element at the end of the deque.

Code snippet:
```java
import java.util.ArrayDeque;

public class Main {
    public static void main(String[] args) {
        ArrayDeque<String> deque = new ArrayDeque<>();
        deque.addLast("Hello");
        System.out.println(deque);
    }
}
```
================================================================

Sample: 24 ArrayDeque_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayDeque;
import java.util.NoSuchElementException;

public class Main {
    public static void main(String[] args) {
        ArrayDeque<String> deque = new ArrayDeque<>();
        deque.add("First");
        deque.add("Second");
        
        try {
            String firstElement = deque.getFirst();
            System.out.println("First element: " + firstElement);
        } catch (NoSuchElementException e) {
            System.out.println("Deque is empty");
        }
    }
}
```
================================================================

Sample: 25 ArrayDeque_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayDeque;

public class Main {
    public static void main(String[] args) {
        ArrayDeque<String> deque = new ArrayDeque<>();
        deque.add("First");
        deque.add("Second");
        
        System.out.println("Deque: " + deque);
        
        String lastElement = deque.getLast();
        System.out.println("Last element: " + lastElement);
    }
}
```
================================================================

Sample: 26 ArrayDeque_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayDeque;

public class Main {
    public static void main(String[] args) {
        ArrayDeque<String> deque = new ArrayDeque<>();
        deque.add("First");
        deque.add("Second");
        
        System.out.println("Deque before removeFirst: " + deque);
        
        String removedElement = deque.removeFirst();
        
        System.out.println("Removed element: " + removedElement);
        System.out.println("Deque after removeFirst: " + deque);
    }
}
```
================================================================

Sample: 27 ArrayList_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        
        System.out.println("Before ensureCapacity: " + list.size());
        
        ((ArrayList<Integer>) list).ensureCapacity(10);
        
        System.out.println("After ensureCapacity: " + list.size());
    }
}
```
================================================================

Sample: 28 ArrayList_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("Hello");
        list.trimToSize();
        System.out.println(list);
    }
}
```
================================================================

Sample: 29 ArrayList_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("Hello");
        System.out.println("Initial list: " + list);
        
        int size = list.size();
        System.out.println("Size of the list: " + size);
    }
}
```
================================================================

Sample: 30 ArrayList_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("Hello");
        list.add("World");
        
        System.out.println("Elements in the list:");
        for (int i = 0; i < list.size(); i++) {
            System.out.println(list.get(i));
        }
    }
}
```
================================================================

Sample: 31 ArrayList_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        System.out.println("Is list empty? " + list.isEmpty());
    }
}
```
================================================================

Sample: 32 Arrays_1
----------------------------------------------------------------
`void sort(int[] a)`: This method sorts the specified array into ascending numerical order.

Code snippet:
```java
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        int[] arr = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};
        
        System.out.println("Before sorting: " + Arrays.toString(arr));
        
        Arrays.sort(arr);
        
        System.out.println("After sorting: " + Arrays.toString(arr));
    }
}
```
================================================================

Sample: 33 Arrays_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        int[] arr = {2, 4, 6, 8, 10};
        int key = 6;
        
        int index = Arrays.binarySearch(arr, key);
        
        if (index >= 0) {
            System.out.println("Element found at index: " + index);
        } else {
            int insertionPoint = -(index) - 1;
            System.out.println("Element not found. Insertion point would be: " + insertionPoint);
        }
    }
}
```
================================================================

Sample: 34 Arrays_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        int[] arr1 = {1, 2, 3};
        int[] arr2 = {1, 2, 3};
        
        boolean result = Arrays.equals(arr1, arr2);
        System.out.println("Are the arrays equal? " + result);
    }
}
```
================================================================

Sample: 35 Arrays_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        int[] array = {1, 2, 3, 4, 5};
        String arrayString = Arrays.toString(array);
        System.out.println(arrayString);
    }
}
```
================================================================

Sample: 36 Arrays_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        int[] array = {1, 2, 3, 4, 5};
        int hashCode = Arrays.hashCode(array);
        System.out.println("Hash code of the array: " + hashCode);
    }
}
```
================================================================

Sample: 37 Base64_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Base64;

public class Main {
    public static void main(String[] args) {
        Base64.Encoder encoder = Base64.getEncoder();
        String original = "Hello, World!";
        String encoded = encoder.encodeToString(original.getBytes());
        System.out.println("Encoded: " + encoded);
    }
}
```
================================================================

Sample: 38 Base64_2
----------------------------------------------------------------
`Base64.Decoder getDecoder()`: This method returns a Base64 decoder that decodes using the Basic type base64 encoding scheme.

Code snippet:
```java
import java.util.Base64;

public class Main {
    public static void main(String[] args) {
        Base64.Decoder decoder = Base64.getDecoder();
        String encodedString = "SGVsbG8gV29ybGQ=";
        byte[] decodedBytes = decoder.decode(encodedString);
        String decodedString = new String(decodedBytes);
        System.out.println(decodedString);
    }
}
```
================================================================

Sample: 39 Base64_Decoder_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Base64;

public class Main {
    public static void main(String[] args) {
        String encodedString = "SGVsbG8gV29ybGQh"; // "Hello World!" encoded in Base64
        Base64.Decoder decoder = Base64.getDecoder();
        byte[] decodedBytes = decoder.decode(encodedString);
        
        String decodedString = new String(decodedBytes);
        System.out.println(decodedString); // Output: Hello World!
    }
}
```
================================================================

Sample: 40 Base64_Decoder_2
----------------------------------------------------------------
Code snippet:
```java
import java.nio.ByteBuffer;
import java.util.Base64;

public class Main {
    public static void main(String[] args) {
        ByteBuffer inputBuffer = ByteBuffer.wrap("SGVsbG8gV29ybGQh".getBytes());
        
        Base64.Decoder decoder = Base64.getDecoder();
        ByteBuffer outputBuffer = decoder.decode(inputBuffer);
        
        byte[] decodedBytes = new byte[outputBuffer.remaining()];
        outputBuffer.get(decodedBytes);
        
        System.out.println(new String(decodedBytes));
    }
}
```
================================================================

Sample: 41 Base64_Decoder_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Base64;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.IOException;

public class Main {
    public static void main(String[] args) {
        byte[] encodedBytes = Base64.getEncoder().encode("Hello, World!".getBytes());
        InputStream inputStream = new ByteArrayInputStream(encodedBytes);
        
        Base64.Decoder decoder = Base64.getDecoder();
        InputStream decodedStream = decoder.wrap(inputStream);
        
        try {
            int data;
            while ((data = decodedStream.read()) != -1) {
                System.out.print((char) data);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```
================================================================

Sample: 42 Base64_Decoder_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Base64;

public class Main {
    public static void main(String[] args) {
        Base64.Decoder decoder = Base64.getDecoder();
        byte[] src = "SGVsbG8gV29ybGQh".getBytes();
        byte[] dst = new byte[10]; // Ensure dst has enough space for decoding
        
        int numBytesDecoded = decoder.decode(src, dst);
        
        System.out.println("Number of bytes decoded: " + numBytesDecoded);
        System.out.println("Decoded data: " + new String(dst, 0, numBytesDecoded));
    }
}
```
================================================================

Sample: 43 Base64_Encoder_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Base64;

public class Main {
    public static void main(String[] args) {
        byte[] src = "Hello, World!".getBytes();
        
        Base64.Encoder encoder = Base64.getEncoder();
        String encodedString = encoder.encodeToString(src);
        
        System.out.println("Encoded String: " + encodedString);
    }
}
```
================================================================

Sample: 44 Base64_Encoder_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Base64;

public class Main {
    public static void main(String[] args) {
        byte[] src = "Hello, World!".getBytes();
        
        Base64.Encoder encoder = Base64.getEncoder();
        byte[] encodedBytes = encoder.encode(src);
        
        System.out.println("Encoded bytes: " + new String(encodedBytes));
    }
}
```
================================================================

Sample: 45 Base64.Encoder_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Base64;

public class Main {
    public static void main(String[] args) {
        byte[] src = "Hello, World!".getBytes();
        byte[] dst = new byte[Base64.getEncoder().encode(src, src)];
        System.out.println("Encoded bytes: " + new String(dst));
    }
}
```
================================================================

Sample: 46 BitSet_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.BitSet;

public class Main {
    public static void main(String[] args) {
        BitSet bs = new BitSet();
        bs.set(0);
        bs.set(2);
        bs.set(4);
        
        System.out.println("BitSet after setting bits at index 0, 2, and 4: " + bs);
    }
}
```
================================================================

Sample: 47 BitSet_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.BitSet;

public class Main {
    public static void main(String[] args) {
        BitSet bs = new BitSet(8);
        bs.set(2);
        System.out.println("Before clearing: " + bs);
        
        bs.clear(2);
        System.out.println("After clearing: " + bs);
    }
}
```
================================================================

Sample: 48 BitSet_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.BitSet;

public class Main {
    public static void main(String[] args) {
        BitSet bs = new BitSet();
        bs.set(0);
        bs.set(2);
        
        System.out.println("Bit at index 0: " + bs.get(0)); // Output: true
        System.out.println("Bit at index 1: " + bs.get(1)); // Output: false
        System.out.println("Bit at index 2: " + bs.get(2)); // Output: true
    }
}
```
================================================================

Sample: 49 BitSet_4
----------------------------------------------------------------
`int length()`: This method returns the "logical size" of the BitSet, which is the index of the highest set bit in the BitSet plus one. It returns zero if the BitSet contains no set bits.

Code snippet:
```java
import java.util.BitSet;

public class Main {
    public static void main(String[] args) {
        BitSet bitSet = new BitSet();
        bitSet.set(0);
        bitSet.set(2);
        bitSet.set(4);
        
        int logicalSize = bitSet.length();
        System.out.println("Logical size of BitSet: " + logicalSize);
    }
}
```
================================================================

Sample: 50 BitSet_5
----------------------------------------------------------------
`void flip(int bitIndex)`: This method sets the bit at the specified index to the complement of its current value.

Code snippet:
```java
import java.util.BitSet;

public class Main {
    public static void main(String[] args) {
        BitSet bitSet = new BitSet();
        bitSet.set(2); // Set bit at index 2 to true
        System.out.println("Before flipping: " + bitSet);
        
        bitSet.flip(2); // Flip the bit at index 2
        System.out.println("After flipping: " + bitSet);
    }
}
```
================================================================

Sample: 51 Calendar_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Calendar;

public class Main {
    public static void main(String[] args) {
        Calendar calendar = Calendar.getInstance();
        System.out.println("Current date: " + calendar.getTime());

        // Adding 5 days to the current date
        calendar.add(Calendar.DAY_OF_MONTH, 5);
        System.out.println("Date after adding 5 days: " + calendar.getTime());

        // Subtracting 2 months from the current date
        calendar.add(Calendar.MONTH, -2);
        System.out.println("Date after subtracting 2 months: " + calendar.getTime());
    }
}
```
================================================================

Sample: 52 Calendar_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Calendar;

public class Main {
    public static void main(String[] args) {
        Calendar calendar = Calendar.getInstance();
        int year = calendar.get(Calendar.YEAR);
        int month = calendar.get(Calendar.MONTH);
        int dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH);
        
        System.out.println("Year: " + year);
        System.out.println("Month: " + month);
        System.out.println("Day of Month: " + dayOfMonth);
    }
}
```
================================================================

Sample: 53 Calendar_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Calendar;

public class Main {
    public static void main(String[] args) {
        Calendar calendar = Calendar.getInstance();
        
        // Set the year to 2022
        calendar.set(Calendar.YEAR, 2022);
        
        // Set the month to January (Note: January is represented as 0)
        calendar.set(Calendar.MONTH, 0);
        
        // Set the day of the month to 15
        calendar.set(Calendar.DAY_OF_MONTH, 15);
        
        // Print the updated calendar
        System.out.println(calendar.getTime());
    }
}
```
================================================================

Sample: 54 Calendar_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Calendar;

public class Main {
    public static void main(String[] args) {
        Calendar calendar = Calendar.getInstance();
        int maxMonth = calendar.getActualMaximum(Calendar.MONTH);
        System.out.println("Maximum value for MONTH field: " + maxMonth);
    }
}
```
================================================================

Sample: 55 Calendar_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.Calendar;

public class Main {
    public static void main(String[] args) {
        Calendar calendar = Calendar.getInstance();
        System.out.println("Current date: " + calendar.getTime());

        // Roll the current date up by one day
        calendar.roll(Calendar.DATE, true);
        System.out.println("Rolled date: " + calendar.getTime());
    }
}
```
================================================================

Sample: 56 Calendar_Builder_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Calendar;

public class Main {
    public static void main(String[] args) {
        Calendar.Builder builder = new Calendar.Builder();
        builder.set(Calendar.DAY_OF_MONTH, 15);
        System.out.println(builder.build());
    }
}
```
================================================================

Sample: 57 Calendar_Builder_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Calendar;

public class Main {
    public static void main(String[] args) {
        Calendar.Builder builder = new Calendar.Builder();
        Calendar calendar = builder.build();
        System.out.println(calendar.getTime());
    }
}
```
================================================================

Sample: 58 Calendar_Builder_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Calendar;

public class Main {
    public static void main(String[] args) {
        Calendar.Builder builder = new Calendar.Builder();
        builder.setDate(2022, 0, 1); // January 1, 2022
        Calendar calendar = builder.build();
        System.out.println(calendar.getTime());
    }
}
```
================================================================

Sample: 59 Calendar_Builder_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Calendar;

public class Main {
    public static void main(String[] args) {
        Calendar.Builder builder = new Calendar.Builder();
        builder.setTimeOfDay(10, 30, 45);
        Calendar calendar = builder.build();
        System.out.println(calendar.getTime());
    }
}
```
================================================================

Sample: 60 Calendar_Builder_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.Calendar;
import java.util.Locale;

public class Main {
    public static void main(String[] args) {
        Calendar.Builder builder = new Calendar.Builder();
        Locale locale = new Locale("en", "US");
        builder.setLocale(locale);
        System.out.println("Locale set to: " + builder.toString());
    }
}
```
================================================================

Sample: 61 Collections_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Collections;
import java.util.ArrayList;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("Hello");
        list.add("World");
        
        System.out.println("Before reversing: " + list);
        
        Collections.reverse(list);
        
        System.out.println("After reversing: " + list);
    }
}
```
================================================================

Sample: 62 Collections_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Collections;
import java.util.ArrayList;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        List<String> list = new ArrayList<>();
        list.add("Apple");
        list.add("Banana");
        list.add("Orange");

        System.out.println("Before shuffling: " + list);

        Collections.shuffle(list);

        System.out.println("After shuffling: " + list);
    }
}
```
================================================================

Sample: 63 Collections_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;
import java.util.Collections;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("Hello");
        list.add("World");
        list.add("Hello");
        
        int frequency = Collections.frequency(list, "Hello");
        System.out.println("Frequency of 'Hello' in the list: " + frequency);
    }
}
```
================================================================

Sample: 64 Currency_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Currency;

public class Main {
    public static void main(String[] args) {
        Currency currency = Currency.getInstance("USD");
        System.out.println(currency.getCurrencyCode());
    }
}
```
================================================================

Sample: 65 Currency_2
----------------------------------------------------------------
`String getCurrencyCode()`: This method gets the ISO 4217 currency code of this currency.

Code snippet:
```java
import java.util.Currency;

public class Main {
    public static void main(String[] args) {
        Currency currency = Currency.getInstance("USD");
        String currencyCode = currency.getCurrencyCode();
        System.out.println("Currency Code: " + currencyCode);
    }
}
```
================================================================

Sample: 66 Currency_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Currency;

public class Main {
    public static void main(String[] args) {
        Currency euro = Currency.getInstance("EUR");
        int fractionDigits = euro.getDefaultFractionDigits();
        System.out.println("Default fraction digits for Euro: " + fractionDigits);
        
        Currency yen = Currency.getInstance("JPY");
        fractionDigits = yen.getDefaultFractionDigits();
        System.out.println("Default fraction digits for Japanese Yen: " + fractionDigits);
        
        Currency imf = Currency.getInstance("XDR");
        fractionDigits = imf.getDefaultFractionDigits();
        System.out.println("Default fraction digits for IMF Special Drawing Rights: " + fractionDigits);
    }
}
```
================================================================

Sample: 67 Currency_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Currency;

public class Main {
    public static void main(String[] args) {
        Currency currency = Currency.getInstance("USD");
        String displayName = currency.getDisplayName();
        System.out.println("Display Name: " + displayName);
    }
}
```
================================================================

Sample: 68 Currency_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.Currency;

public class Main {
    public static void main(String[] args) {
        Currency currency = Currency.getInstance("USD");
        String symbol = currency.getSymbol();
        System.out.println("Symbol for USD currency: " + symbol);
    }
}
```
================================================================

Sample: 69 Date_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Date;

public class Main {
    public static void main(String[] args) {
        Date date = new Date();
        long milliseconds = date.getTime();
        System.out.println("Number of milliseconds since January 1, 1970: " + milliseconds);
    }
}
```
================================================================

Sample: 70 Date_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Date;

public class Main {
    public static void main(String[] args) {
        Date date = new Date();
        System.out.println("Current date: " + date);

        long timeInMillis = 1000000000; // 1 billion milliseconds
        date.setTime(timeInMillis);
        System.out.println("Date after setting time: " + date);
    }
}
```
================================================================

Sample: 71 Date_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Date;

public class Main {
    public static void main(String[] args) {
        Date date1 = new Date();
        Date date2 = new Date(System.currentTimeMillis() + 1000); // Creating a date 1 second ahead of the current time
        
        boolean isBefore = date1.before(date2);
        System.out.println("Is date1 before date2? " + isBefore);
    }
}
```
================================================================

Sample: 72 Date_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Date;

public class Main {
    public static void main(String[] args) {
        Date date1 = new Date();
        Date date2 = new Date(System.currentTimeMillis() + 1000); // Adding 1 second to current time
        
        boolean isAfter = date1.after(date2);
        System.out.println("Is date1 after date2? " + isAfter);
    }
}
```
================================================================

Sample: 73 Date_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.Date;

public class Main {
    public static void main(String[] args) {
        Date date1 = new Date();
        Date date2 = new Date();
        
        int comparison = date1.compareTo(date2);
        
        if(comparison == 0) {
            System.out.println("Dates are equal");
        } else if(comparison < 0) {
            System.out.println("Date 1 is before Date 2");
        } else {
            System.out.println("Date 1 is after Date 2");
        }
    }
}
```
================================================================

Sample: 74 Dictionary_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Dictionary;
import java.util.Hashtable;

public class Main {
    public static void main(String[] args) {
        Dictionary<String, String> dictionary = new Hashtable<>();
        dictionary.put("key1", "value1");
        dictionary.put("key2", "value2");

        String value1 = dictionary.get("key1");
        String value3 = dictionary.get("key3");

        System.out.println("Value for key1: " + value1);
        System.out.println("Value for key3: " + value3);
    }
}
```
================================================================

Sample: 75 Dictionary_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Dictionary;
import java.util.Hashtable;

public class Main {
    public static void main(String[] args) {
        Dictionary<String, String> dictionary = new Hashtable<>();
        
        // Adding key-value pairs to the dictionary
        String previousValue1 = dictionary.put("key1", "value1");
        String previousValue2 = dictionary.put("key2", "value2");
        
        System.out.println("Previous value for key1: " + previousValue1);
        System.out.println("Previous value for key2: " + previousValue2);
    }
}
```
================================================================

Sample: 76 Dictionary_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Dictionary;
import java.util.Hashtable;

public class Main {
    public static void main(String[] args) {
        Dictionary<String, String> dictionary = new Hashtable<>();
        dictionary.put("key1", "value1");
        dictionary.put("key2", "value2");

        System.out.println("Before removal: " + dictionary);

        String removedValue = dictionary.remove("key1");

        System.out.println("Removed value: " + removedValue);
        System.out.println("After removal: " + dictionary);
    }
}
```
================================================================

Sample: 77 Dictionary_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Dictionary;
import java.util.Enumeration;
import java.util.Hashtable;

public class Main {
    public static void main(String[] args) {
        Dictionary<Integer, String> dictionary = new Hashtable<>();
        dictionary.put(1, "One");
        dictionary.put(2, "Two");
        
        Enumeration<String> values = dictionary.elements();
        while (values.hasMoreElements()) {
            System.out.println(values.nextElement());
        }
    }
}
```
================================================================

Sample: 78 Dictionary_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.Dictionary;
import java.util.Enumeration;
import java.util.Hashtable;

public class Main {
    public static void main(String[] args) {
        Dictionary<String, String> dictionary = new Hashtable<>();
        dictionary.put("key1", "value1");
        dictionary.put("key2", "value2");
        
        Enumeration<String> keys = dictionary.keys();
        while (keys.hasMoreElements()) {
            String key = keys.nextElement();
            System.out.println("Key: " + key);
        }
    }
}
```
================================================================

Sample: 79 DoubleSummaryStatistics_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.DoubleSummaryStatistics;

public class Main {
    public static void main(String[] args) {
        DoubleSummaryStatistics stats = new DoubleSummaryStatistics();
        stats.accept(10.5);
        stats.accept(20.3);
        stats.accept(30.7);
        
        long count = stats.getCount();
        System.out.println("Count of values: " + count);
    }
}
```
================================================================

Sample: 80 DoubleSummaryStatistics_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.DoubleSummaryStatistics;

public class Main {
    public static void main(String[] args) {
        DoubleSummaryStatistics stats = new DoubleSummaryStatistics();
        stats.accept(10.5);
        stats.accept(20.3);
        stats.accept(30.7);
        
        double sum = stats.getSum();
        System.out.println("Sum: " + sum);
    }
}
```
================================================================

Sample: 81 DoubleSummaryStatistics_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.DoubleSummaryStatistics;

public class Main {
    public static void main(String[] args) {
        DoubleSummaryStatistics stats = new DoubleSummaryStatistics();
        stats.accept(10.5);
        stats.accept(20.3);
        stats.accept(15.7);
        
        double average = stats.getAverage();
        System.out.println("Average: " + average);
    }
}
```
================================================================

Sample: 82 DoubleSummaryStatistics_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.DoubleSummaryStatistics;

public class Main {
    public static void main(String[] args) {
        DoubleSummaryStatistics stats = new DoubleSummaryStatistics();
        stats.accept(10.5);
        stats.accept(20.3);
        stats.accept(5.7);
        
        double min = stats.getMin();
        System.out.println("Minimum value: " + min);
    }
}
```
================================================================

Sample: 83 DoubleSummaryStatistics_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.DoubleSummaryStatistics;

public class Main {
    public static void main(String[] args) {
        DoubleSummaryStatistics stats = new DoubleSummaryStatistics();
        stats.accept(10.5);
        stats.accept(20.3);
        stats.accept(15.7);
        
        double max = stats.getMax();
        System.out.println("Maximum recorded value: " + max);
    }
}
```
================================================================

Sample: 84 EnumMap_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.EnumMap;

public class Main {
    public static void main(String[] args) {
        EnumMap<Day, String> enumMap = new EnumMap<>(Day.class);
        
        enumMap.put(Day.MONDAY, "First day of the week");
        enumMap.put(Day.TUESDAY, "Second day of the week");
        
        System.out.println(enumMap);
    }
}

enum Day {
    MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY
}
```
================================================================

Sample: 85 EnumMap_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.EnumMap;

public class Main {
    public static void main(String[] args) {
        EnumMap<Day, String> enumMap = new EnumMap<>(Day.class);
        enumMap.put(Day.MONDAY, "First day of the week");
        enumMap.put(Day.TUESDAY, "Second day of the week");

        System.out.println(enumMap.get(Day.MONDAY)); // Output: First day of the week
        System.out.println(enumMap.get(Day.WEDNESDAY)); // Output: null
    }

    enum Day {
        MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY
    }
}
```
================================================================

Sample: 86 EnumMap_3
----------------------------------------------------------------
`void clear()`: This method removes all mappings from this map.

Code snippet:
```java
import java.util.EnumMap;

public class Main {
    public static void main(String[] args) {
        EnumMap<Day, String> enumMap = new EnumMap<>(Day.class);
        enumMap.put(Day.MONDAY, "Monday");
        enumMap.put(Day.TUESDAY, "Tuesday");
        
        System.out.println("Before clear: " + enumMap);
        
        enumMap.clear();
        
        System.out.println("After clear: " + enumMap);
    }
}

enum Day {
    MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY
}
```
================================================================

Sample: 87 EnumMap_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.EnumMap;
import java.util.Collection;

public class Main {
    public static void main(String[] args) {
        EnumMap<MyEnum, String> enumMap = new EnumMap<>(MyEnum.class);
        enumMap.put(MyEnum.ONE, "One");
        enumMap.put(MyEnum.TWO, "Two");
        
        Collection<String> values = enumMap.values();
        for (String value : values) {
            System.out.println(value);
        }
    }
}

enum MyEnum {
    ONE, TWO, THREE
}
```
================================================================

Sample: 88 EventObject_1
----------------------------------------------------------------
`Object getSource()`: This method returns the object on which the Event initially occurred.

Code snippet:
```java
import java.util.EventObject;

public class Main {
    public static void main(String[] args) {
        EventObject event = new EventObject(new Object());
        Object source = event.getSource();
        System.out.println("Event initially occurred on: " + source);
    }
}
```
================================================================

Sample: 89 EventObject_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.EventObject;

public class Main {
    public static void main(String[] args) {
        EventObject event = new EventObject(new Object());
        System.out.println(event.toString());
    }
}
```
================================================================

Sample: 90 GregorianCalendar_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.GregorianCalendar;

public class Main {
    public static void main(String[] args) {
        GregorianCalendar calendar = new GregorianCalendar();
        System.out.println("Before adding: " + calendar.getTime());

        // Adding 1 month to the calendar
        calendar.add(GregorianCalendar.MONTH, 1);

        System.out.println("After adding: " + calendar.getTime());
    }
}
```
================================================================

Sample: 91 GregorianCalendar_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.GregorianCalendar;

public class Main {
    public static void main(String[] args) {
        GregorianCalendar calendar = new GregorianCalendar();
        int year = 2024;
        boolean isLeapYear = calendar.isLeapYear(year);
        System.out.println("Is " + year + " a leap year? " + isLeapYear);
    }
}
```
================================================================

Sample: 92 GregorianCalendar_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.GregorianCalendar;

public class Main {
    public static void main(String[] args) {
        GregorianCalendar calendar = new GregorianCalendar();
        int maxDayOfMonth = calendar.getActualMaximum(GregorianCalendar.DAY_OF_MONTH);
        System.out.println("Maximum day of month: " + maxDayOfMonth);
    }
}
```
================================================================

Sample: 93 HashMap_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.HashMap;

public class Main {
    public static void main(String[] args) {
        HashMap<String, Integer> map = new HashMap<>();
        map.put("One", 1);
        map.put("Two", 2);
        
        System.out.println("Value for key 'One': " + map.get("One"));
        System.out.println("Value for key 'Two': " + map.get("Two"));
        System.out.println("Value for key 'Three': " + map.get("Three"));
    }
}
```
================================================================

Sample: 94 HashMap_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.HashMap;

public class Main {
    public static void main(String[] args) {
        HashMap<String, Integer> map = new HashMap<>();
        
        // Associates the specified value with the specified key in this map
        map.put("One", 1);
        map.put("Two", 2);
        
        // Replaces the old value if the key already exists
        map.put("One", 10);
        
        // Prints the previous value associated with key
        System.out.println(map.put("One", 100)); // Output: 10
        System.out.println(map.put("Three", 3)); // Output: null
    }
}
```
================================================================

Sample: 95 HashMap_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.HashMap;

public class Main {
    public static void main(String[] args) {
        HashMap<String, Integer> map = new HashMap<>();
        map.put("A", 1);
        map.put("B", 2);
        
        System.out.println("Initial HashMap: " + map);
        
        Integer removedValue = map.remove("A");
        
        System.out.println("HashMap after removing key 'A': " + map);
        System.out.println("Value associated with key 'A' was: " + removedValue);
    }
}
```
================================================================

Sample: 96 HashMap_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.HashMap;

public class Main {
    public static void main(String[] args) {
        HashMap<String, Integer> map = new HashMap<>();
        map.put("A", 1);
        map.put("B", 2);
        
        System.out.println(map.containsKey("A")); // Output: true
        System.out.println(map.containsKey("C")); // Output: false
    }
}
```
================================================================

Sample: 97 HashMap_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.HashMap;

public class Main {
    public static void main(String[] args) {
        HashMap<String, Integer> map = new HashMap<>();
        map.put("A", 1);
        map.put("B", 2);
        map.put("C", 3);
        
        System.out.println("Size of the map: " + map.size());
    }
}
```
================================================================

Sample: 98 HashSet_1
----------------------------------------------------------------
`boolean add(E e)`: This method adds the specified element to this set if it is not already present.

Code snippet:
```java
import java.util.HashSet;

public class Main {
    public static void main(String[] args) {
        HashSet<String> set = new HashSet<>();
        System.out.println(set.add("Hello")); // Output: true
        System.out.println(set.add("Hello")); // Output: false
        System.out.println(set); // Output: [Hello]
    }
}
```
================================================================

Sample: 99 HashSet_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.HashSet;

public class Main {
    public static void main(String[] args) {
        HashSet<String> set = new HashSet<>();
        set.add("Hello");
        set.add("World");
        
        System.out.println("Set before removal: " + set);
        
        boolean isRemoved = set.remove("Hello");
        
        System.out.println("Element 'Hello' removed: " + isRemoved);
        System.out.println("Set after removal: " + set);
    }
}
```
================================================================

Sample: 100 HashSet_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.HashSet;

public class Main {
    public static void main(String[] args) {
        HashSet<String> set = new HashSet<>();
        set.add("Hello");
        set.add("World");
        System.out.println("Size of set: " + set.size());
    }
}
```
================================================================

Sample: 101 HashSet_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.HashSet;

public class Main {
    public static void main(String[] args) {
        HashSet<String> set = new HashSet<>();
        set.add("Hello");
        
        boolean containsElement = set.contains("Hello");
        System.out.println("Set contains 'Hello': " + containsElement);
    }
}
```
================================================================

Sample: 102 HashSet_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.HashSet;

public class Main {
    public static void main(String[] args) {
        HashSet<String> set = new HashSet<>();
        set.add("Hello");
        set.add("World");
        
        System.out.println("Set before clear: " + set);
        
        set.clear();
        
        System.out.println("Set after clear: " + set);
    }
}
```
================================================================

Sample: 103 Hashtable_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Hashtable;

public class Main {
    public static void main(String[] args) {
        Hashtable<Integer, String> hashtable = new Hashtable<>();
        hashtable.put(1, "One");
        hashtable.put(2, "Two");
        
        System.out.println("Hashtable before clearing: " + hashtable);
        
        hashtable.clear();
        
        System.out.println("Hashtable after clearing: " + hashtable);
    }
}
```
================================================================

Sample: 104 Hashtable_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Hashtable;

public class Main {
    public static void main(String[] args) {
        Hashtable<Integer, String> hashtable = new Hashtable<>();
        hashtable.put(1, "One");
        hashtable.put(2, "Two");
        
        boolean result = hashtable.contains("One");
        System.out.println(result); // Output: true
    }
}
```
================================================================

Sample: 105 Hashtable_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Hashtable;

public class Main {
    public static void main(String[] args) {
        Hashtable<String, String> hashtable = new Hashtable<>();
        System.out.println("Is hashtable empty? " + hashtable.isEmpty());
    }
}
```
================================================================

Sample: 106 IdentityHashMap_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.IdentityHashMap;

public class Main {
    public static void main(String[] args) {
        IdentityHashMap<Integer, String> map = new IdentityHashMap<>();
        
        // Associates the specified value with the specified key
        map.put(1, "One");
        map.put(2, "Two");
        
        // Replaces the old value if the key already exists
        map.put(1, "New One");
        
        // Prints the previous value associated with key
        System.out.println(map.put(1, "New One")); // Output: One
    }
}
```
================================================================

Sample: 107 IdentityHashMap_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.IdentityHashMap;

public class Main {
    public static void main(String[] args) {
        IdentityHashMap<String, Integer> map = new IdentityHashMap<>();
        map.put("key1", 1);
        map.put("key2", 2);

        Integer value = map.get("key1");
        System.out.println("Value for key1: " + value);

        value = map.get("key3");
        System.out.println("Value for key3: " + value);
    }
}
```
================================================================

Sample: 108 IdentityHashMap_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.IdentityHashMap;

public class Main {
    public static void main(String[] args) {
        IdentityHashMap<String, Integer> map = new IdentityHashMap<>();
        map.put("key1", 1);
        map.put("key2", 2);

        boolean containsKey = map.containsKey("key1");
        System.out.println("Contains key 'key1': " + containsKey);
    }
}
```
================================================================

Sample: 109 IdentityHashMap_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.IdentityHashMap;

public class Main {
    public static void main(String[] args) {
        IdentityHashMap<String, Integer> map = new IdentityHashMap<>();
        map.put("One", 1);
        map.put("Two", 2);
        
        System.out.println("Map before removal: " + map);
        
        Integer removedValue = map.remove("One");
        
        System.out.println("Removed value: " + removedValue);
        System.out.println("Map after removal: " + map);
    }
}
```
================================================================

Sample: 110 IdentityHashMap_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.IdentityHashMap;

public class Main {
    public static void main(String[] args) {
        IdentityHashMap<String, Integer> map = new IdentityHashMap<>();
        map.put("One", 1);
        map.put("Two", 2);
        
        System.out.println("Size of the IdentityHashMap: " + map.size());
    }
}
```
================================================================

Sample: 111 IntSummaryStatistics_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.IntSummaryStatistics;

public class Main {
    public static void main(String[] args) {
        IntSummaryStatistics stats = new IntSummaryStatistics();
        stats.accept(10);
        stats.accept(20);
        stats.accept(30);
        
        long count = stats.getCount();
        System.out.println("Count of values: " + count);
    }
}
```
================================================================

Sample: 112 IntSummaryStatistics_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.IntSummaryStatistics;

public class Main {
    public static void main(String[] args) {
        IntSummaryStatistics stats = new IntSummaryStatistics();
        stats.accept(10);
        stats.accept(20);
        stats.accept(30);
        
        long sum = stats.getSum();
        System.out.println("Sum: " + sum);
    }
}
```
================================================================

Sample: 113 IntSummaryStatistics_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.IntSummaryStatistics;

public class Main {
    public static void main(String[] args) {
        IntSummaryStatistics stats = new IntSummaryStatistics();
        stats.accept(10);
        stats.accept(20);
        stats.accept(30);
        
        double average = stats.getAverage();
        System.out.println("Average: " + average);
    }
}
```
================================================================

Sample: 114 IntSummaryStatistics_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.IntSummaryStatistics;

public class Main {
    public static void main(String[] args) {
        IntSummaryStatistics stats = new IntSummaryStatistics();
        stats.accept(10);
        stats.accept(5);
        stats.accept(15);
        
        int min = stats.getMin();
        System.out.println("Minimum value: " + min);
    }
}
```
================================================================

Sample: 115 IntSummaryStatistics_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.IntSummaryStatistics;

public class Main {
    public static void main(String[] args) {
        IntSummaryStatistics stats = new IntSummaryStatistics();
        stats.accept(10);
        stats.accept(20);
        stats.accept(30);
        
        int max = stats.getMax();
        System.out.println("Max value: " + max);
    }
}
```
================================================================

Sample: 116 LinkedHashMap_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.LinkedHashMap;

public class Main {
    public static void main(String[] args) {
        LinkedHashMap<String, Integer> map = new LinkedHashMap<>();
        map.put("One", 1);
        map.put("Two", 2);
        
        System.out.println("Value for key 'One': " + map.get("One"));
        System.out.println("Value for key 'Three': " + map.get("Three"));
    }
}
```
================================================================

Sample: 117 LinkedHashMap_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.LinkedHashMap;
import java.util.Map;

public class Main {
    public static void main(String[] args) {
        LinkedHashMap<String, Integer> map = new LinkedHashMap<String, Integer>(16, 0.75f, true) {
            private static final int MAX_ENTRIES = 100;

            @Override
            protected boolean removeEldestEntry(Map.Entry<String, Integer> eldest) {
                return size() > MAX_ENTRIES;
            }
        };

        // Adding elements to the LinkedHashMap
        map.put("One", 1);
        map.put("Two", 2);
        map.put("Three", 3);

        // Printing the LinkedHashMap
        System.out.println(map);

        // Adding more elements to trigger removeEldestEntry
        for (int i = 4; i <= 110; i++) {
            map.put("Key" + i, i);
        }

        // Printing the LinkedHashMap after adding more elements
        System.out.println(map);
    }
}
```
================================================================

Sample: 118 LinkedHashMap_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.LinkedHashMap;

public class Main {
    public static void main(String[] args) {
        LinkedHashMap<String, Integer> map = new LinkedHashMap<>();
        map.put("A", 1);
        map.put("B", 2);
        System.out.println("Map before clear: " + map);

        map.clear();
        System.out.println("Map after clear: " + map);
    }
}
```
================================================================

Sample: 119 LinkedHashMap_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.LinkedHashMap;
import java.util.Set;

public class Main {
    public static void main(String[] args) {
        LinkedHashMap<String, Integer> map = new LinkedHashMap<>();
        map.put("One", 1);
        map.put("Two", 2);
        map.put("Three", 3);
        
        Set<String> keySet = map.keySet();
        
        System.out.println("Keys in the map:");
        for(String key : keySet) {
            System.out.println(key);
        }
    }
}
```
================================================================

Sample: 120 LinkedList_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.LinkedList;

public class Main {
    public static void main(String[] args) {
        LinkedList<String> list = new LinkedList<>();
        list.add("World");
        System.out.println("Initial LinkedList: " + list);

        list.addFirst("Hello");
        System.out.println("LinkedList after adding element at the beginning: " + list);
    }
}
```
================================================================

Sample: 121 LinkedList_2
----------------------------------------------------------------
`void addLast(E e)`: This method appends the specified element to the end of this list.

Code snippet:
```java
import java.util.LinkedList;

public class Main {
    public static void main(String[] args) {
        LinkedList<String> list = new LinkedList<>();
        list.addLast("Hello");
        System.out.println(list);
    }
}
```
================================================================

Sample: 122 LinkedList_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.LinkedList;

public class Main {
    public static void main(String[] args) {
        LinkedList<String> list = new LinkedList<>();
        list.add("First");
        list.add("Second");
        list.add("Third");

        System.out.println("First element: " + list.getFirst());
    }
}
```
================================================================

Sample: 123 LinkedList_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.LinkedList;

public class Main {
    public static void main(String[] args) {
        LinkedList<String> list = new LinkedList<>();
        list.add("Hello");
        list.add("World");
        
        System.out.println("List: " + list);
        
        String lastElement = list.getLast();
        System.out.println("Last Element: " + lastElement);
    }
}
```
================================================================

Sample: 124 LinkedList_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.LinkedList;

public class Main {
    public static void main(String[] args) {
        LinkedList<String> list = new LinkedList<>();
        list.add("First");
        list.add("Second");
        list.add("Third");

        System.out.println("Initial LinkedList: " + list);

        String removedElement = list.removeFirst();
        System.out.println("Removed Element: " + removedElement);
        System.out.println("Updated LinkedList: " + list);
    }
}
```
================================================================

Sample: 125 ListResourceBundle_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.ListResourceBundle;

public class MyResourceBundle extends ListResourceBundle {
    protected Object[][] getContents() {
        return new Object[][] {
            {"key1", "value1"},
            {"key2", "value2"},
            {"key3", "value3"}
        };
    }

    public static void main(String[] args) {
        MyResourceBundle bundle = new MyResourceBundle();
        Object[][] contents = bundle.getContents();
        
        for (Object[] pair : contents) {
            System.out.println(pair[0] + ": " + pair[1]);
        }
    }
}
```
================================================================

Sample: 126 ListResourceBundle_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Enumeration;
import java.util.ResourceBundle;

public class Main {
    public static void main(String[] args) {
        ListResourceBundle bundle = new ListResourceBundle() {
            @Override
            protected Object[][] getContents() {
                return new Object[][] {
                    {"key1", "value1"},
                    {"key2", "value2"}
                };
            }
        };
        
        Enumeration<String> keys = bundle.getKeys();
        while (keys.hasMoreElements()) {
            String key = keys.nextElement();
            System.out.println("Key: " + key);
        }
    }
}
```
================================================================

Sample: 127 ListResourceBundle_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.ListResourceBundle;
import java.util.ResourceBundle;

public class MyResourceBundle extends ListResourceBundle {
    protected Object[][] getContents() {
        return new Object[][] {
            {"key1", "value1"},
            {"key2", "value2"}
        };
    }
}

public class Main {
    public static void main(String[] args) {
        ResourceBundle bundle = ResourceBundle.getBundle("MyResourceBundle");
        System.out.println(bundle.getString("key1"));
    }
}
```
================================================================

Sample: 128 Locale_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Locale;

public class Main {
    public static void main(String[] args) {
        Locale locale = new Locale("en", "US");
        String country = locale.getCountry();
        System.out.println("Country/Region Code: " + country);
    }
}
```
================================================================

Sample: 129 Locale_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Locale;

public class Main {
    public static void main(String[] args) {
        Locale locale = new Locale("en", "US");
        String displayCountry = locale.getDisplayCountry();
        System.out.println("Display Country: " + displayCountry);
    }
}
```
================================================================

Sample: 130 Locale_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Locale;

public class Main {
    public static void main(String[] args) {
        Locale locale = new Locale("en", "US");
        String languageCode = locale.getLanguage();
        System.out.println("Language code: " + languageCode);
    }
}
```
================================================================

Sample: 131 Locale_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Locale;

public class Main {
    public static void main(String[] args) {
        Locale locale = new Locale("fr", "FR");
        String displayLanguage = locale.getDisplayLanguage();
        System.out.println("Display Language: " + displayLanguage);
    }
}
```
================================================================

Sample: 132 Locale_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.Locale;

public class Main {
    public static void main(String[] args) {
        Locale locale = new Locale("en", "US");
        String displayName = locale.getDisplayName();
        System.out.println("Display Name: " + displayName);
    }
}
```
================================================================

Sample: 133 Locale_Builder_1
----------------------------------------------------------------
`Locale.Builder setLanguage(String language)`: This method sets the language in the Locale.Builder instance.

Code snippet:
```java
import java.util.Locale;

public class Main {
    public static void main(String[] args) {
        Locale.Builder builder = new Locale.Builder();
        builder.setLanguage("en");
        Locale locale = builder.build();
        System.out.println("Language: " + locale.getLanguage());
    }
}
```
================================================================

Sample: 134 Locale_Builder_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Locale;

public class Main {
    public static void main(String[] args) {
        Locale.Builder builder = new Locale.Builder();
        builder.setRegion("US");
        Locale locale = builder.build();
        System.out.println(locale.getCountry());
    }
}
```
================================================================

Sample: 135 Locale_Builder_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Locale;

public class Main {
    public static void main(String[] args) {
        Locale.Builder builder = new Locale.Builder();
        builder.setScript("Latn");
        Locale locale = builder.build();
        System.out.println(locale.getScript());
    }
}
```
================================================================

Sample: 136 Locale_Builder_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Locale;

public class Main {
    public static void main(String[] args) {
        Locale.Builder builder = new Locale.Builder();
        builder.setExtension('u', "ca-japanese");
        Locale locale = builder.build();
        System.out.println(locale.toLanguageTag());
    }
}
```
================================================================

Sample: 137 Locale_Builder_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.Locale;

public class Main {
    public static void main(String[] args) {
        Locale.Builder builder = new Locale.Builder();
        builder.setLanguage("en").setRegion("US");
        System.out.println("Before clear: " + builder.build());
        
        builder.clear();
        System.out.println("After clear: " + builder.build());
    }
}
```
================================================================

Sample: 138 Locale_LanguageRange_1
----------------------------------------------------------------
`String getRange()`: This method returns the language range of the Locale.LanguageRange object.

Code snippet:
```java
import java.util.Locale;

public class Main {
    public static void main(String[] args) {
        Locale.LanguageRange languageRange = Locale.LanguageRange.parse("en-US");
        String range = languageRange.getRange();
        System.out.println("Language Range: " + range);
    }
}
```
================================================================

Sample: 139 Locale_LanguageRange_2
----------------------------------------------------------------
`double getWeight()`: This method returns the weight of the LanguageRange.

Code snippet:
```java
import java.util.Locale;

public class Main {
    public static void main(String[] args) {
        Locale.LanguageRange languageRange = Locale.LanguageRange.parse("en;q=0.8");
        double weight = languageRange.getWeight();
        System.out.println("Weight of Language Range: " + weight);
    }
}
```
================================================================

Sample: 140 Locale_LanguageRange_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Locale;

public class Main {
    public static void main(String[] args) {
        Locale.LanguageRange languageRange = Locale.LanguageRange.parse("en-US");
        int hashCode = languageRange.hashCode();
        System.out.println("Hash code for language range: " + hashCode);
    }
}
```
================================================================

Sample: 141 LongSummaryStatistics_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.LongSummaryStatistics;

public class Main {
    public static void main(String[] args) {
        LongSummaryStatistics stats = new LongSummaryStatistics();
        stats.accept(10);
        stats.accept(20);
        stats.accept(30);
        
        long count = stats.getCount();
        System.out.println("Count of values: " + count);
    }
}
```
================================================================

Sample: 142 LongSummaryStatistics_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.LongSummaryStatistics;

public class Main {
    public static void main(String[] args) {
        LongSummaryStatistics stats = new LongSummaryStatistics();
        stats.accept(10);
        stats.accept(20);
        stats.accept(30);
        
        long sum = stats.getSum();
        System.out.println("Sum: " + sum);
    }
}
```
================================================================

Sample: 143 LongSummaryStatistics_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.LongSummaryStatistics;

public class Main {
    public static void main(String[] args) {
        LongSummaryStatistics stats = new LongSummaryStatistics();
        stats.accept(10);
        stats.accept(20);
        stats.accept(5);
        
        long min = stats.getMin();
        System.out.println("Minimum value: " + min);
    }
}
```
================================================================

Sample: 144 LongSummaryStatistics_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.LongSummaryStatistics;

public class Main {
    public static void main(String[] args) {
        LongSummaryStatistics stats = new LongSummaryStatistics();
        stats.accept(10);
        stats.accept(20);
        stats.accept(30);
        
        long max = stats.getMax();
        System.out.println("Max value: " + max);
    }
}
```
================================================================

Sample: 145 LongSummaryStatistics_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.LongSummaryStatistics;

public class Main {
    public static void main(String[] args) {
        LongSummaryStatistics stats = new LongSummaryStatistics();
        stats.accept(10);
        stats.accept(20);
        stats.accept(30);
        
        double average = stats.getAverage();
        System.out.println("Average: " + average);
    }
}
```
================================================================

Sample: 146 Objects_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Objects;

public class Main {
    public static void main(String[] args) {
        Object obj1 = "Hello";
        Object obj2 = "Hello";
        
        boolean result = Objects.deepEquals(obj1, obj2);
        System.out.println("Are obj1 and obj2 deeply equal? " + result);
    }
}
```
================================================================

Sample: 147 Objects_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Objects;

public class Main {
    public static void main(String[] args) {
        Object obj = new Object();
        int hashCode = Objects.hashCode(obj);
        System.out.println("Hash code: " + hashCode);
    }
}
```
================================================================

Sample: 148 Objects_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Objects;

public class Main {
    public static void main(String[] args) {
        Object obj = null;
        boolean result = Objects.isNull(obj);
        System.out.println("Is object null? " + result);
    }
}
```
================================================================

Sample: 149 Objects_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Objects;

public class Main {
    public static void main(String[] args) {
        Object obj = "Hello";
        System.out.println(Objects.toString(obj));
        
        Object nullObj = null;
        System.out.println(Objects.toString(nullObj));
    }
}
```
================================================================

Sample: 150 Objects_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.Objects;

public class Main {
    public static void main(String[] args) {
        String str = "Hello";
        String result = Objects.requireNonNull(str);
        System.out.println(result);
    }
}
```
================================================================

Sample: 151 Observable_1
----------------------------------------------------------------
`void addObserver(Observer o)`: This method adds an observer to the set of observers for this object, provided that it is not the same as some observer already in the set.

Code snippet:
```java
import java.util.Observable;
import java.util.Observer;

public class Main {
    public static void main(String[] args) {
        MyObservableObject observable = new MyObservableObject();
        MyObserver observer1 = new MyObserver();
        MyObserver observer2 = new MyObserver();
        
        observable.addObserver(observer1);
        observable.addObserver(observer2);
    }
}

class MyObservableObject extends Observable {
    // Your implementation here
}

class MyObserver implements Observer {
    // Your implementation here
}
```
================================================================

Sample: 152 Observable_2
----------------------------------------------------------------
`void deleteObserver(Observer o)`: This method deletes an observer from the set of observers of this object.

Code snippet:
```java
import java.util.Observable;
import java.util.Observer;

public class Main {
    public static void main(String[] args) {
        Observable observable = new Observable();
        Observer observer = new Observer() {
            @Override
            public void update(Observable o, Object arg) {
                System.out.println("Observer updated");
            }
        };
        
        observable.addObserver(observer);
        observable.deleteObserver(observer);
    }
}
```
================================================================

Sample: 153 Observable_3
----------------------------------------------------------------
`void notifyObservers()`: This method notifies all observers that this object has changed and then clears the changed status.

Code snippet:
```java
import java.util.Observable;
import java.util.Observer;

public class Main {
    public static void main(String[] args) {
        MyObservable observable = new MyObservable();
        MyObserver observer = new MyObserver();

        observable.addObserver(observer);
        observable.setChanged();
        observable.notifyObservers();
    }

    static class MyObservable extends Observable {
        public void setChanged() {
            super.setChanged();
        }
    }

    static class MyObserver implements Observer {
        @Override
        public void update(Observable o, Object arg) {
            System.out.println("Object has changed");
        }
    }
}
```
================================================================

Sample: 154 Observable_4
----------------------------------------------------------------
`void notifyObservers(Object arg)`: This method notifies all observers that this object has changed and passes an argument to the observers.

Code snippet:
```java
import java.util.Observable;
import java.util.Observer;

public class Main {
    public static void main(String[] args) {
        MyObservable observable = new MyObservable();
        MyObserver observer = new MyObserver();

        observable.addObserver(observer);
        observable.notifyObservers("Hello World");
    }

    static class MyObservable extends Observable {
        public void notifyObservers(Object arg) {
            setChanged();
            super.notifyObservers(arg);
            clearChanged();
        }
    }

    static class MyObserver implements Observer {
        public void update(Observable o, Object arg) {
            System.out.println("Received update: " + arg);
        }
    }
}
```
================================================================

Sample: 155 Observable_5
----------------------------------------------------------------
`int countObservers()`: This method returns the number of observers of this Observable object.

Code snippet:
```java
import java.util.Observable;

public class Main {
    public static void main(String[] args) {
        Observable observable = new Observable();
        observable.addObserver((o, arg) -> {
            // do something when observer is notified
        });
        
        int numObservers = observable.countObservers();
        System.out.println("Number of observers: " + numObservers);
    }
}
```
================================================================

Sample: 156 Optional_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Optional;

public class Main {
    public static void main(String[] args) {
        Optional<String> optional = Optional.of("Value");
        
        System.out.println("Is value present? " + optional.isPresent());
    }
}
```
================================================================

Sample: 157 Optional_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Optional;
import java.util.NoSuchElementException;

public class Main {
    public static void main(String[] args) {
        Optional<String> optional = Optional.of("Value");
        
        try {
            String value = optional.get();
            System.out.println("Value: " + value);
        } catch (NoSuchElementException e) {
            System.out.println("No value present");
        }
    }
}
```
================================================================

Sample: 158 Optional_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Optional;

public class Main {
    public static void main(String[] args) {
        Optional<String> optional = Optional.of("Value");
        
        optional.ifPresent(value -> System.out.println("Value is present: " + value));
    }
}
```
================================================================

Sample: 159 Optional_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Optional;

public class Main {
    public static void main(String[] args) {
        Optional<String> optional = Optional.of("Value");
        
        String result = optional.orElse("Default");
        System.out.println(result); // Output: Value
        
        Optional<String> emptyOptional = Optional.empty();
        
        String result2 = emptyOptional.orElse("Default");
        System.out.println(result2); // Output: Default
    }
}
```
================================================================

Sample: 160 Optional_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.Optional;
import java.util.function.Predicate;

public class Main {
    public static void main(String[] args) {
        Optional<String> optional = Optional.of("Hello");
        
        Optional<String> result = optional.filter(s -> s.startsWith("H"));
        
        if(result.isPresent()) {
            System.out.println("Value starts with 'H': " + result.get());
        } else {
            System.out.println("Value does not start with 'H'");
        }
    }
}
```
================================================================

Sample: 161 OptionalDouble_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.OptionalDouble;

public class Main {
    public static void main(String[] args) {
        OptionalDouble optionalDouble = OptionalDouble.empty();
        System.out.println("Is value present: " + optionalDouble.isPresent());
    }
}
```
================================================================

Sample: 162 OptionalDouble_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.OptionalDouble;

public class Main {
    public static void main(String[] args) {
        OptionalDouble optionalDouble = OptionalDouble.of(3.14);
        if (optionalDouble.isPresent()) {
            System.out.println("Value is present: " + optionalDouble.getAsDouble());
        } else {
            System.out.println("Value is not present");
        }
    }
}
```
================================================================

Sample: 163 OptionalDouble_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.OptionalDouble;

public class Main {
    public static void main(String[] args) {
        OptionalDouble optionalDouble = OptionalDouble.of(10.5);
        
        System.out.println("Is value present? " + optionalDouble.isPresent());
    }
}
```
================================================================

Sample: 164 OptionalDouble_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.OptionalDouble;
import java.util.NoSuchElementException;

public class Main {
    public static void main(String[] args) {
        OptionalDouble optionalDouble = OptionalDouble.of(10.5);
        
        try {
            double value = optionalDouble.getAsDouble();
            System.out.println("Value: " + value);
        } catch (NoSuchElementException e) {
            System.out.println("No value present");
        }
    }
}
```
================================================================

Sample: 165 OptionalDouble_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.OptionalDouble;

public class Main {
    public static void main(String[] args) {
        OptionalDouble optionalDouble = OptionalDouble.of(10.5);
        
        double result = optionalDouble.orElse(0.0);
        System.out.println("Value present: " + result);
        
        OptionalDouble emptyOptional = OptionalDouble.empty();
        double result2 = emptyOptional.orElse(5.0);
        System.out.println("No value present, returned other value: " + result2);
    }
}
```
================================================================

Sample: 166 OptionalInt_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.OptionalInt;

public class Main {
    public static void main(String[] args) {
        OptionalInt optionalInt = OptionalInt.empty();
        System.out.println("Is value present: " + optionalInt.isPresent());
    }
}
```
================================================================

Sample: 167 OptionalInt_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.OptionalInt;

public class Main {
    public static void main(String[] args) {
        OptionalInt optionalInt = OptionalInt.of(10);
        if (optionalInt.isPresent()) {
            System.out.println("Value present: " + optionalInt.getAsInt());
        } else {
            System.out.println("No value present");
        }
    }
}
```
================================================================

Sample: 168 OptionalInt_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.OptionalInt;

public class Main {
    public static void main(String[] args) {
        OptionalInt optionalInt = OptionalInt.of(10);
        
        System.out.println("Is value present? " + optionalInt.isPresent());
    }
}
```
================================================================

Sample: 169 OptionalInt_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.OptionalInt;

public class Main {
    public static void main(String[] args) {
        OptionalInt optionalInt = OptionalInt.of(5);
        
        int result = optionalInt.orElse(10);
        System.out.println("Result: " + result);
        
        OptionalInt emptyOptionalInt = OptionalInt.empty();
        int result2 = emptyOptionalInt.orElse(10);
        System.out.println("Result2: " + result2);
    }
}
```
================================================================

Sample: 170 OptionalInt_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.OptionalInt;
import java.util.function.IntSupplier;

public class Main {
    public static void main(String[] args) {
        OptionalInt optionalInt = OptionalInt.empty();
        
        // Using orElseGet method
        int result = optionalInt.orElseGet(() -> 10);
        System.out.println("Result: " + result);
    }
}
```
================================================================

Sample: 171 OptionalLong_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.OptionalLong;

public class Main {
    public static void main(String[] args) {
        OptionalLong optionalLong = OptionalLong.empty();
        System.out.println("Is value present? " + optionalLong.isPresent());
    }
}
```
================================================================

Sample: 172 OptionalLong_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.OptionalLong;

public class Main {
    public static void main(String[] args) {
        OptionalLong optionalLong = OptionalLong.of(10);
        if (optionalLong.isPresent()) {
            System.out.println("Value present: " + optionalLong.getAsLong());
        } else {
            System.out.println("No value present");
        }
    }
}
```
================================================================

Sample: 173 OptionalLong_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.OptionalLong;

public class Main {
    public static void main(String[] args) {
        OptionalLong optionalLong = OptionalLong.of(10);
        
        System.out.println("Is value present? " + optionalLong.isPresent());
    }
}
```
================================================================

Sample: 174 OptionalLong_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.OptionalLong;
import java.util.NoSuchElementException;

public class Main {
    public static void main(String[] args) {
        OptionalLong optionalLong = OptionalLong.of(10);
        
        try {
            long value = optionalLong.getAsLong();
            System.out.println("Value: " + value);
        } catch (NoSuchElementException e) {
            System.out.println("No value present");
        }
    }
}
```
================================================================

Sample: 175 OptionalLong_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.OptionalLong;

public class Main {
    public static void main(String[] args) {
        OptionalLong optionalLong = OptionalLong.of(10);
        
        long result = optionalLong.orElse(5);
        System.out.println("Result: " + result);
        
        OptionalLong emptyOptionalLong = OptionalLong.empty();
        long result2 = emptyOptionalLong.orElse(5);
        System.out.println("Result2: " + result2);
    }
}
```
================================================================

Sample: 176 PriorityQueue_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.PriorityQueue;

public class Main {
    public static void main(String[] args) {
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        pq.offer(5);
        pq.offer(3);
        pq.offer(8);
        
        System.out.println("Priority Queue: " + pq);
    }
}
```
================================================================

Sample: 177 PriorityQueue_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.PriorityQueue;

public class Main {
    public static void main(String[] args) {
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        pq.add(5);
        pq.add(3);
        pq.add(8);
        
        System.out.println("Head of the queue: " + pq.peek());
    }
}
```
================================================================

Sample: 178 PriorityQueue_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.PriorityQueue;

public class Main {
    public static void main(String[] args) {
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        pq.add(3);
        pq.add(1);
        pq.add(2);
        
        System.out.println("Priority Queue: " + pq);
        
        System.out.println("Polling from the queue: " + pq.poll());
        System.out.println("Priority Queue after polling: " + pq);
    }
}
```
================================================================

Sample: 179 PriorityQueue_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Comparator;
import java.util.PriorityQueue;

public class Main {
    public static void main(String[] args) {
        // Create a priority queue with a custom comparator
        PriorityQueue<Integer> pq = new PriorityQueue<>(Comparator.reverseOrder());
        
        // Add elements to the priority queue
        pq.add(3);
        pq.add(1);
        pq.add(2);
        
        // Print the elements in the priority queue
        while (!pq.isEmpty()) {
            System.out.println(pq.poll());
        }
    }
}
```
================================================================

Sample: 180 PriorityQueue_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.PriorityQueue;

public class Main {
    public static void main(String[] args) {
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        pq.add(5);
        pq.add(10);
        pq.add(3);
        
        System.out.println("Size of PriorityQueue: " + pq.size());
    }
}
```
================================================================

Sample: 181 Properties_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Properties;

public class Main {
    public static void main(String[] args) {
        Properties prop = new Properties();
        prop.setProperty("key1", "value1");
        prop.setProperty("key2", "value2");

        String value1 = prop.getProperty("key1");
        String value2 = prop.getProperty("key2");
        
        System.out.println("Value for key1: " + value1);
        System.out.println("Value for key2: " + value2);
    }
}
```
================================================================

Sample: 182 Properties_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Properties;
import java.util.Enumeration;

public class Main {
    public static void main(String[] args) {
        Properties properties = new Properties();
        properties.setProperty("key1", "value1");
        properties.setProperty("key2", "value2");

        Enumeration<?> keys = properties.propertyNames();
        while (keys.hasMoreElements()) {
            String key = (String) keys.nextElement();
            System.out.println("Key: " + key + ", Value: " + properties.getProperty(key));
        }
    }
}
```
================================================================

Sample: 183 Properties_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Properties;
import java.io.OutputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class Main {
    public static void main(String[] args) {
        Properties properties = new Properties();
        properties.setProperty("key1", "value1");
        properties.setProperty("key2", "value2");

        try (OutputStream output = new FileOutputStream("output.properties")) {
            properties.store(output, "Sample Properties");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```
================================================================

Sample: 184 Properties_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.Properties;
import java.io.InputStream;
import java.io.IOException;

public class Main {
    public static void main(String[] args) {
        Properties properties = new Properties();
        
        try {
            InputStream inputStream = Main.class.getResourceAsStream("example.properties");
            properties.load(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```
================================================================

Sample: 185 PropertyResourceBundle_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Enumeration;
import java.util.PropertyResourceBundle;
import java.util.ResourceBundle;

public class Main {
    public static void main(String[] args) {
        PropertyResourceBundle bundle = (PropertyResourceBundle) ResourceBundle.getBundle("example");
        Enumeration<String> keys = bundle.getKeys();
        
        while(keys.hasMoreElements()) {
            String key = keys.nextElement();
            String value = bundle.getString(key);
            System.out.println(key + " = " + value);
        }
    }
}
```
================================================================

Sample: 186 PropertyResourceBundle_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.PropertyResourceBundle;
import java.util.ResourceBundle;

public class Main {
    public static void main(String[] args) {
        PropertyResourceBundle bundle = (PropertyResourceBundle) ResourceBundle.getBundle("example");
        Object obj = bundle.handleGetObject("key");
        System.out.println(obj);
    }
}
```
================================================================

Sample: 187 Random_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Random;

public class Main {
    public static void main(String[] args) {
        Random random = new Random();
        int bound = 10;
        int randomNumber = random.nextInt(bound);
        System.out.println("Random number between 0 and " + bound + ": " + randomNumber);
    }
}
```
================================================================

Sample: 188 Random_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Random;

public class Main {
    public static void main(String[] args) {
        Random random = new Random();
        long randomNumber = random.nextLong();
        System.out.println("Random Long Number: " + randomNumber);
    }
}
```
================================================================

Sample: 189 Random_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Random;

public class Main {
    public static void main(String[] args) {
        Random random = new Random();
        float randomFloat = random.nextFloat();
        System.out.println("Random float value between 0.0 and 1.0: " + randomFloat);
    }
}
```
================================================================

Sample: 190 Random_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Random;

public class Main {
    public static void main(String[] args) {
        Random random = new Random();
        double gaussianValue = random.nextGaussian();
        System.out.println("Random Gaussian value: " + gaussianValue);
    }
}
```
================================================================

Sample: 191 Random_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.Random;

public class Main {
    public static void main(String[] args) {
        Random random = new Random();
        long seed = 123456789L;
        random.setSeed(seed);
        System.out.println("Seed set successfully.");
    }
}
```
================================================================

Sample: 192 ResourceBundle_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.ResourceBundle;

public class Main {
    public static void main(String[] args) {
        ResourceBundle bundle = ResourceBundle.getBundle("MyResources");
        String greeting = bundle.getString("greeting");
        System.out.println(greeting);
    }
}
```
================================================================

Sample: 193 ResourceBundle_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Enumeration;
import java.util.ResourceBundle;

public class Main {
    public static void main(String[] args) {
        ResourceBundle bundle = ResourceBundle.getBundle("MyResources");
        Enumeration<String> keys = bundle.getKeys();
        
        while(keys.hasMoreElements()) {
            String key = keys.nextElement();
            String value = bundle.getString(key);
            System.out.println(key + ": " + value);
        }
    }
}
```
================================================================

Sample: 194 ResourceBundle_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Locale;
import java.util.ResourceBundle;

public class Main {
    public static void main(String[] args) {
        ResourceBundle bundle = ResourceBundle.getBundle("MyResources", Locale.US);
        Locale locale = bundle.getLocale();
        System.out.println("Locale: " + locale);
    }
}
```
================================================================

Sample: 195 ResourceBundle_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.ResourceBundle;

public class Main {
    public static void main(String[] args) {
        ResourceBundle bundle = ResourceBundle.getBundle("MyResources");
        Object obj = bundle.getObject("key");
        System.out.println(obj);
    }
}
```
================================================================

Sample: 196 ResourceBundle_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.ResourceBundle;
import java.util.Set;

public class Main {
    public static void main(String[] args) {
        ResourceBundle bundle = ResourceBundle.getBundle("MyResources");
        Set<String> keys = bundle.keySet();
        
        for (String key : keys) {
            System.out.println(key + ": " + bundle.getString(key));
        }
    }
}
```
================================================================

Sample: 197 ResourceBundle_Control_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Locale;
import java.util.ResourceBundle;

public class Main {
    public static void main(String[] args) {
        ResourceBundle.Control control = new ResourceBundle.Control() {
            @Override
            public Locale getFallbackLocale(String baseName, Locale locale) {
                // Custom implementation for getFallbackLocale method
                return super.getFallbackLocale(baseName, locale);
            }
        };
        
        // Example usage of getFallbackLocale method
        Locale fallbackLocale = control.getFallbackLocale("exampleBaseName", Locale.US);
        System.out.println("Fallback Locale: " + fallbackLocale);
    }
}
```
================================================================

Sample: 198 ResourceBundle_Control_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;

public class Main {
    public static void main(String[] args) {
        ResourceBundle.Control control = new ResourceBundle.Control() {
            @Override
            public List<Locale> getCandidateLocales(String baseName, Locale locale) {
                // Implementation of the getCandidateLocales method
                return super.getCandidateLocales(baseName, locale);
            }
        };
        
        // Example usage
        List<Locale> candidateLocales = control.getCandidateLocales("Messages", new Locale("ja", "", "XX"));
        for (Locale loc : candidateLocales) {
            System.out.println(loc);
        }
    }
}
```
================================================================

Sample: 199 ResourceBundle_Control_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.List;
import java.util.ResourceBundle;

public class Main {
    public static void main(String[] args) {
        ResourceBundle.Control control = new ResourceBundle.Control() {
            @Override
            public List<String> getFormats(String baseName) {
                List<String> formats = new ArrayList<>();
                formats.add("java.class");
                formats.add("java.properties");
                return formats;
            }
        };

        List<String> formats = control.getFormats("example.base.name");
        System.out.println(formats);
    }
}
```
================================================================

Sample: 200 ResourceBundle_Control_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;

public class Main {
    public static void main(String[] args) {
        ResourceBundle.Control control = new ResourceBundle.Control() {
            @Override
            public List<Locale> getCandidateLocales(String baseName, Locale locale) {
                // Implementation of the getCandidateLocales method
                return super.getCandidateLocales(baseName, locale);
            }
        };
        
        // Example usage
        List<Locale> candidateLocales = control.getCandidateLocales("Messages", new Locale("ja", "", "XX"));
        for (Locale loc : candidateLocales) {
            System.out.println(loc);
        }
    }
}
```
================================================================

Sample: 201 Scanner_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Scanner;
import java.util.NoSuchElementException;

public class Main {
    public static void main(String[] args) {
        String input = "Hello World";
        Scanner scanner = new Scanner(input);
        
        String token = scanner.next();
        System.out.println(token);
        
        scanner.close();
    }
}
```
================================================================

Sample: 202 Scanner_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.println("Enter an integer:");
        int num = scanner.nextInt();
        
        System.out.println("You entered: " + num);
        
        scanner.close();
    }
}
```
================================================================

Sample: 203 Scanner_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.println("Enter a double value:");
        double value = scanner.nextDouble();
        
        System.out.println("Double value entered: " + value);
    }
}
```
================================================================

Sample: 204 Scanner_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.println("Enter a string: ");
        String input = scanner.next();
        
        boolean hasNextToken = scanner.hasNext();
        System.out.println("Has next token: " + hasNextToken);
        
        scanner.close();
    }
}
```
================================================================

Sample: 205 Scanner_5
----------------------------------------------------------------
`void close()`: This method closes the scanner.

Code snippet:
```java
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Close the scanner
        scanner.close();
    }
}
```
================================================================

Sample: 206 ServiceLoader_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.ServiceLoader;
import java.util.Iterator;

public class Main {
    public static void main(String[] args) {
        ServiceLoader<MyService> loader = ServiceLoader.load(MyService.class);
        Iterator<MyService> iterator = loader.iterator();
        
        while (iterator.hasNext()) {
            MyService service = iterator.next();
            // Do something with the service
        }
    }
}

interface MyService {
    // Define methods for the service
}
```
================================================================

Sample: 207 ServiceLoader_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.ServiceLoader;

public class Main {
    public static void main(String[] args) {
        ServiceLoader<?> loader = ServiceLoader.load(Service.class);
        loader.reload();
    }
}
```
================================================================

Sample: 208 SimpleTimeZone_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.SimpleTimeZone;
import java.util.Calendar;

public class Main {
    public static void main(String[] args) {
        SimpleTimeZone timeZone = new SimpleTimeZone();
        timeZone.setStartRule(Calendar.APRIL, 1, Calendar.SUNDAY, 2*60*60*1000);
    }
}
```
================================================================

Sample: 209 SimpleTimeZone_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.SimpleTimeZone;

public class Main {
    public static void main(String[] args) {
        SimpleTimeZone timeZone = new SimpleTimeZone(0, "GMT");
        timeZone.setEndRule(10, -1, 1, 2*60*60*1000);
        System.out.println("Daylight saving time end rule set successfully.");
    }
}
```
================================================================

Sample: 210 SimpleTimeZone_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.SimpleTimeZone;

public class Main {
    public static void main(String[] args) {
        SimpleTimeZone timeZone = new SimpleTimeZone();
        timeZone.setStartYear(2022);
        System.out.println("Daylight saving time starting year set to: " + timeZone.getStartYear());
    }
}
```
================================================================

Sample: 211 SimpleTimeZone_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.SimpleTimeZone;

public class Main {
    public static void main(String[] args) {
        SimpleTimeZone timeZone = new SimpleTimeZone();
        timeZone.setDSTSavings(3600000); // Setting the daylight saving time savings to one hour
    }
}
```
================================================================

Sample: 212 Spliterators_AbstractDoubleSpliterator_1
----------------------------------------------------------------
`long estimateSize()`: This method returns an estimate of the number of elements that would be encountered by a Spliterator traversal.

Code snippet:
```java
import java.util.Spliterators;

public class Main {
    public static void main(String[] args) {
        Spliterators.AbstractDoubleSpliterator spliterator = new Spliterators.AbstractDoubleSpliterator() {
            @Override
            public long estimateSize() {
                return 100; // Example estimate size
            }
        };

        long estimatedSize = spliterator.estimateSize();
        System.out.println("Estimated size: " + estimatedSize);
    }
}
```
================================================================

Sample: 213 Spliterators.AbstractDoubleSpliterator_2
----------------------------------------------------------------
`int characteristics()`: This method returns a set of characteristics of the Spliterator and its elements.

Code snippet:
```java
import java.util.Spliterator;
import java.util.Spliterators;

public class Main {
    public static void main(String[] args) {
        Spliterator.OfDouble spliterator = Spliterators.emptyDoubleSpliterator();
        int characteristics = spliterator.characteristics();
        System.out.println("Characteristics: " + characteristics);
    }
}
```
================================================================

Sample: 214 Spliterators.AbstractIntSpliterator_1
----------------------------------------------------------------
`int characteristics()`: This method returns a set of characteristics of the Spliterator and its elements.

Code snippet:
```java
import java.util.Spliterator;
import java.util.Spliterators;

public class Main {
    public static void main(String[] args) {
        Spliterator.OfInt spliterator = Spliterators.emptyIntSpliterator();
        int characteristics = spliterator.characteristics();
        System.out.println("Characteristics: " + characteristics);
    }
}
```
================================================================

Sample: 215 Spliterators_AbstractIntSpliterator_2
----------------------------------------------------------------
`long estimateSize()`: This method returns an estimate of the number of elements that would be encountered by a Spliterator.forEachRemaining traversal.

Code snippet:
```java
import java.util.Spliterators;

public class Main {
    public static void main(String[] args) {
        Spliterators.AbstractIntSpliterator spliterator = new Spliterators.AbstractIntSpliterator() {
            @Override
            public long estimateSize() {
                return 100; // Return an estimated size of 100
            }
        };

        long estimatedSize = spliterator.estimateSize();
        System.out.println("Estimated size: " + estimatedSize);
    }
}
```
================================================================

Sample: 216 Spliterators.AbstractIntSpliterator_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.Spliterator;
import java.util.Spliterators;

public class Main {
    public static void main(String[] args) {
        Spliterator.OfInt spliterator = Spliterators.emptyIntSpliterator();
        Spliterator.OfInt splitSpliterator = spliterator.trySplit();
        if (splitSpliterator != null) {
            System.out.println("Spliterator successfully split.");
        } else {
            System.out.println("Spliterator cannot be split.");
        }
    }
}
```
================================================================

Sample: 217 Spliterators_AbstractLongSpliterator_1
----------------------------------------------------------------
`long estimateSize()`: This method returns an estimate of the number of elements that would be encountered by a Spliterator traversal.

Code snippet:
```java
import java.util.Spliterators;

public class Main {
    public static void main(String[] args) {
        Spliterators.AbstractLongSpliterator spliterator = new Spliterators.AbstractLongSpliterator() {
            @Override
            public long estimateSize() {
                return 100; // Return an estimated size of 100
            }
        };

        long estimatedSize = spliterator.estimateSize();
        System.out.println("Estimated size: " + estimatedSize);
    }
}
```
================================================================

Sample: 218 Spliterators.AbstractLongSpliterator_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Spliterator;
import java.util.Spliterators;

public class Main {
    public static void main(String[] args) {
        Spliterator.OfLong spliterator = Spliterators.emptyLongSpliterator();
        Spliterator.OfLong splitSpliterator = spliterator.trySplit();
        if (splitSpliterator != null) {
            System.out.println("Spliterator successfully split.");
        } else {
            System.out.println("Spliterator cannot be split.");
        }
    }
}
```
================================================================

Sample: 219 Spliterators_AbstractSpliterator_1
----------------------------------------------------------------
`long estimateSize()`: This method returns an estimate of the number of elements that would be encountered by a Spliterator.forEachRemaining traversal.

Code snippet:
```java
import java.util.Spliterators;

public class Main {
    public static void main(String[] args) {
        Spliterators.AbstractSpliterator<String> spliterator = new Spliterators.AbstractSpliterator<String>(0, 0) {
            @Override
            public boolean tryAdvance(java.util.function.Consumer<? super String> action) {
                return false;
            }
        };
        
        long estimatedSize = spliterator.estimateSize();
        System.out.println("Estimated size: " + estimatedSize);
    }
}
```
================================================================

Sample: 220 Spliterators.AbstractSpliterator_2
----------------------------------------------------------------
`int characteristics()`: This method returns a set of characteristics of the Spliterator and its elements.

Code snippet:
```java
import java.util.Spliterator;
import java.util.Spliterators;

public class Main {
    public static void main(String[] args) {
        Spliterator<Integer> spliterator = Spliterators.emptySpliterator();
        int characteristics = spliterator.characteristics();
        System.out.println("Characteristics: " + characteristics);
    }
}
```
================================================================

Sample: 221 Spliterators.AbstractSpliterator_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Spliterator;
import java.util.Spliterators;

public class Main {
    public static void main(String[] args) {
        Spliterator<Integer> spliterator = Spliterators.spliterator(new Integer[]{1, 2, 3, 4, 5}, Spliterator.ORDERED);
        
        Spliterator<Integer> splitSpliterator = spliterator.trySplit();
        
        System.out.println("Original Spliterator:");
        spliterator.forEachRemaining(System.out::println);
        
        System.out.println("Split Spliterator:");
        splitSpliterator.forEachRemaining(System.out::println);
    }
}
```
================================================================

Sample: 222 SplittableRandom_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.SplittableRandom;

public class Main {
    public static void main(String[] args) {
        SplittableRandom random = new SplittableRandom();
        int bound = 10;
        int randomNumber = random.nextInt(bound);
        System.out.println("Random number between 0 and " + bound + ": " + randomNumber);
    }
}
```
================================================================

Sample: 223 SplittableRandom_2
----------------------------------------------------------------
`long nextLong()`: This method returns a pseudorandom long value.

Code snippet:
```java
import java.util.SplittableRandom;

public class Main {
    public static void main(String[] args) {
        SplittableRandom random = new SplittableRandom();
        long randomLong = random.nextLong();
        System.out.println("Random long value: " + randomLong);
    }
}
```
================================================================

Sample: 224 SplittableRandom_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.SplittableRandom;

public class Main {
    public static void main(String[] args) {
        SplittableRandom random = new SplittableRandom();
        double randomValue = random.nextDouble();
        System.out.println("Random double value: " + randomValue);
    }
}
```
================================================================

Sample: 225 SplittableRandom_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.SplittableRandom;

public class Main {
    public static void main(String[] args) {
        SplittableRandom random = new SplittableRandom();
        SplittableRandom splitRandom = random.split();
        System.out.println(random.nextDouble());
        System.out.println(splitRandom.nextDouble());
    }
}
```
================================================================

Sample: 226 Stack_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Stack;

public class Main {
    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();
        stack.push(1);
        stack.push(2);
        stack.push(3);
        
        System.out.println("Stack: " + stack);
    }
}
```
================================================================

Sample: 227 Stack_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Stack;
import java.util.EmptyStackException;

public class Main {
    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();
        stack.push(1);
        stack.push(2);
        stack.push(3);
        
        try {
            int poppedElement = stack.pop();
            System.out.println("Popped element: " + poppedElement);
            System.out.println("Stack after pop: " + stack);
        } catch (EmptyStackException e) {
            System.out.println("Stack is empty");
        }
    }
}
```
================================================================

Sample: 228 Stack_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Stack;
import java.util.EmptyStackException;

public class Main {
    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();
        stack.push(1);
        stack.push(2);
        stack.push(3);
        
        try {
            System.out.println("Top element of the stack: " + stack.peek());
        } catch (EmptyStackException e) {
            System.out.println("Stack is empty");
        }
    }
}
```
================================================================

Sample: 229 Stack_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Stack;

public class Main {
    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();
        
        System.out.println("Is stack empty? " + stack.empty());
        
        stack.push(1);
        System.out.println("Is stack empty? " + stack.empty());
    }
}
```
================================================================

Sample: 230 Stack_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.Stack;

public class Main {
    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();
        stack.push(10);
        stack.push(20);
        stack.push(30);
        
        int position = stack.search(20);
        System.out.println("Position of 20 in the stack: " + position);
        
        position = stack.search(40);
        System.out.println("Position of 40 in the stack: " + position);
    }
}
```
================================================================

Sample: 231 StringJoiner_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.StringJoiner;

public class Main {
    public static void main(String[] args) {
        StringJoiner sj = new StringJoiner(",");
        sj.add("John");
        sj.add("Doe");
        
        System.out.println("Length of StringJoiner: " + sj.length());
    }
}
```
================================================================

Sample: 232 StringJoiner_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.StringJoiner;

public class Main {
    public static void main(String[] args) {
        StringJoiner sj = new StringJoiner(",");
        sj.add("John");
        sj.add("Doe");
        sj.add("Jane");
        
        System.out.println(sj.toString());
    }
}
```
================================================================

Sample: 233 StringJoiner_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.StringJoiner;

public class Main {
    public static void main(String[] args) {
        StringJoiner sj1 = new StringJoiner(",");
        sj1.add("Apple");
        sj1.add("Banana");

        StringJoiner sj2 = new StringJoiner(",");
        sj2.add("Orange");
        sj2.add("Grapes");

        System.out.println("StringJoiner 1: " + sj1.toString());
        System.out.println("StringJoiner 2: " + sj2.toString());

        sj1.merge(sj2);

        System.out.println("Merged StringJoiner: " + sj1.toString());
    }
}
```
================================================================

Sample: 234 StringTokenizer_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) {
        String str = "Hello World";
        StringTokenizer tokenizer = new StringTokenizer(str);

        while (tokenizer.hasMoreTokens()) {
            String token = tokenizer.nextToken();
            System.out.println(token);
        }
    }
}
```
================================================================

Sample: 235 StringTokenizer_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) {
        String str = "Hello World";
        StringTokenizer tokenizer = new StringTokenizer(str);
        
        boolean hasMoreTokens = tokenizer.hasMoreTokens();
        System.out.println("Has more tokens: " + hasMoreTokens);
    }
}
```
================================================================

Sample: 236 StringTokenizer_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) {
        StringTokenizer st = new StringTokenizer("This is a sample sentence");
        int tokensRemaining = st.countTokens();
        System.out.println("Number of tokens remaining: " + tokensRemaining);
    }
}
```
================================================================

Sample: 237 StringTokenizer_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) {
        String str = "Hello, World! This is a test.";
        StringTokenizer tokenizer = new StringTokenizer(str, " ,!");
        
        while (tokenizer.hasMoreTokens()) {
            String token = tokenizer.nextToken();
            System.out.println(token);
        }
    }
}
```
================================================================

Sample: 238 Timer_1
----------------------------------------------------------------
`void schedule(TimerTask task, long delay)`: Schedules the specified task for execution after the specified delay.

Code snippet:
```java
import java.util.Timer;
import java.util.TimerTask;

public class Main {
    public static void main(String[] args) {
        Timer timer = new Timer();
        
        TimerTask task = new TimerTask() {
            @Override
            public void run() {
                System.out.println("Task executed after delay");
            }
        };
        
        long delay = 2000; // 2 seconds delay
        
        timer.schedule(task, delay);
    }
}
```
================================================================

Sample: 239 Timer_2
----------------------------------------------------------------
`void schedule(TimerTask task, Date time)`: This method schedules the specified task for execution at the specified time. If the time is in the past, the task is scheduled for immediate execution.

Code snippet:
```java
import java.util.Timer;
import java.util.TimerTask;
import java.util.Date;

public class Main {
    public static void main(String[] args) {
        Timer timer = new Timer();
        
        TimerTask task = new TimerTask() {
            @Override
            public void run() {
                System.out.println("Task executed at: " + new Date());
            }
        };
        
        Date time = new Date(System.currentTimeMillis() + 5000); // Schedule task to run after 5 seconds
        
        timer.schedule(task, time);
    }
}
```
================================================================

Sample: 240 Timer_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Timer;
import java.util.TimerTask;

public class Main {
    public static void main(String[] args) {
        Timer timer = new Timer();
        
        TimerTask task = new TimerTask() {
            @Override
            public void run() {
                System.out.println("Task executed at regular intervals");
            }
        };
        
        long delay = 1000; // 1 second delay before first execution
        long period = 2000; // 2 second interval between executions
        
        timer.schedule(task, delay, period);
    }
}
```
================================================================

Sample: 241 Timer_4
----------------------------------------------------------------
`void scheduleAtFixedRate(TimerTask task, long delay, long period)`: This method schedules the specified task for repeated fixed-rate execution, beginning after the specified delay. Subsequent executions take place at approximately regular intervals, separated by the specified period.

Code snippet:
```java
import java.util.Timer;
import java.util.TimerTask;

public class Main {
    public static void main(String[] args) {
        Timer timer = new Timer();
        
        TimerTask task = new TimerTask() {
            @Override
            public void run() {
                System.out.println("Task executed at fixed rate");
            }
        };
        
        long delay = 1000; // 1 second delay
        long period = 2000; // 2 second interval
        
        timer.scheduleAtFixedRate(task, delay, period);
    }
}
```
================================================================

Sample: 242 Timer_5
----------------------------------------------------------------
`void cancel()`: Terminates this timer, discarding any currently scheduled tasks.

Code snippet:
```java
import java.util.Timer;

public class Main {
    public static void main(String[] args) {
        Timer timer = new Timer();
        timer.cancel();
    }
}
```
================================================================

Sample: 243 TimerTask_1
----------------------------------------------------------------
`void run()`: This method defines the action to be performed by a TimerTask.

Code snippet:
```java
import java.util.TimerTask;

public class Main {
    public static void main(String[] args) {
        TimerTask task = new TimerTask() {
            @Override
            public void run() {
                System.out.println("Task is being executed");
            }
        };

        task.run();
    }
}
```
================================================================

Sample: 244 TimerTask_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.TimerTask;

public class Main {
    public static void main(String[] args) {
        TimerTask task = new TimerTask() {
            @Override
            public void run() {
                System.out.println("Task is running");
            }
        };

        boolean isCancelled = task.cancel();
        System.out.println("Task is cancelled: " + isCancelled);
    }
}
```
================================================================

Sample: 245 TimerTask_3
----------------------------------------------------------------
`long scheduledExecutionTime()`: This method returns the scheduled execution time of the most recent actual execution of the task.

Code snippet:
```java
import java.util.TimerTask;

public class Main {
    public static void main(String[] args) {
        TimerTask task = new TimerTask() {
            @Override
            public void run() {
                long executionTime = scheduledExecutionTime();
                System.out.println("Scheduled execution time: " + executionTime);
            }
        };
    }
}
```
================================================================

Sample: 246 TimeZone_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.TimeZone;

public class Main {
    public static void main(String[] args) {
        TimeZone timeZone = TimeZone.getDefault();
        String displayName = timeZone.getDisplayName(true, TimeZone.LONG);
        System.out.println("Display Name: " + displayName);
    }
}
```
================================================================

Sample: 247 TimeZone_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.TimeZone;

public class Main {
    public static void main(String[] args) {
        TimeZone timeZone = TimeZone.getDefault();
        long date = System.currentTimeMillis();
        int offset = timeZone.getOffset(date);
        System.out.println("Offset from UTC at date " + date + " is: " + offset + " milliseconds");
    }
}
```
================================================================

Sample: 248 TimeZone_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.TimeZone;

public class Main {
    public static void main(String[] args) {
        TimeZone timeZone = TimeZone.getDefault();
        String id = timeZone.getID();
        System.out.println("Time zone ID: " + id);
    }
}
```
================================================================

Sample: 249 TimeZone_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.TimeZone;

public class Main {
    public static void main(String[] args) {
        TimeZone timeZone = TimeZone.getDefault();
        boolean usesDaylightTime = timeZone.useDaylightTime();
        System.out.println("Uses Daylight Saving Time: " + usesDaylightTime);
    }
}
```
================================================================

Sample: 250 TimeZone_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.TimeZone;

public class Main {
    public static void main(String[] args) {
        String[] availableIDs = TimeZone.getAvailableIDs();
        for (String id : availableIDs) {
            System.out.println(id);
        }
    }
}
```
================================================================

Sample: 251 TreeMap_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.TreeMap;
import java.util.Map;

public class Main {
    public static void main(String[] args) {
        TreeMap<Integer, String> treeMap = new TreeMap<>();
        treeMap.put(1, "One");
        treeMap.put(2, "Two");
        treeMap.put(3, "Three");

        Map.Entry<Integer, String> entry = treeMap.ceilingEntry(2);
        System.out.println("Ceiling Entry for key 2: " + entry.getKey() + " - " + entry.getValue());
    }
}
```
================================================================

Sample: 252 TreeMap_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.TreeMap;

public class Main {
    public static void main(String[] args) {
        TreeMap<Integer, String> treeMap = new TreeMap<>();
        treeMap.put(1, "One");
        treeMap.put(2, "Two");
        treeMap.put(3, "Three");

        Integer key = 2;
        Integer ceilingKey = treeMap.ceilingKey(key);

        System.out.println("Ceiling key for " + key + " is: " + ceilingKey);
    }
}
```
================================================================

Sample: 253 TreeMap_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.TreeMap;
import java.util.Map;

public class Main {
    public static void main(String[] args) {
        TreeMap<Integer, String> treeMap = new TreeMap<>();
        treeMap.put(1, "One");
        treeMap.put(2, "Two");
        treeMap.put(3, "Three");

        Map.Entry<Integer, String> floorEntry = treeMap.floorEntry(2);
        System.out.println("Floor Entry: " + floorEntry);
    }
}
```
================================================================

Sample: 254 TreeMap_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.TreeMap;

public class Main {
    public static void main(String[] args) {
        TreeMap<Integer, String> treeMap = new TreeMap<>();
        treeMap.put(1, "One");
        treeMap.put(2, "Two");
        treeMap.put(3, "Three");

        Integer key = 2;
        Integer floorKey = treeMap.floorKey(key);

        System.out.println("Floor key for " + key + " is: " + floorKey);
    }
}
```
================================================================

Sample: 255 TreeMap_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.SortedMap;
import java.util.TreeMap;

public class Main {
    public static void main(String[] args) {
        TreeMap<Integer, String> treeMap = new TreeMap<>();
        treeMap.put(1, "One");
        treeMap.put(2, "Two");
        treeMap.put(3, "Three");
        
        SortedMap<Integer, String> headMap = treeMap.headMap(3);
        
        System.out.println("Head Map: " + headMap);
    }
}
```
================================================================

Sample: 256 TreeSet_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.NavigableSet;
import java.util.TreeSet;

public class Main {
    public static void main(String[] args) {
        NavigableSet<Integer> set = new TreeSet<>();
        set.add(1);
        set.add(3);
        set.add(5);
        
        System.out.println("Ceiling for 2: " + set.ceiling(2));
        System.out.println("Ceiling for 3: " + set.ceiling(3));
        System.out.println("Ceiling for 6: " + set.ceiling(6));
    }
}
```
================================================================

Sample: 257 TreeSet_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.NavigableSet;
import java.util.TreeSet;

public class Main {
    public static void main(String[] args) {
        NavigableSet<Integer> set = new TreeSet<>();
        set.add(1);
        set.add(3);
        set.add(5);
        
        System.out.println("Floor of 2: " + set.floor(2)); // Output: 1
        System.out.println("Floor of 4: " + set.floor(4)); // Output: 3
        System.out.println("Floor of 6: " + set.floor(6)); // Output: 5
    }
}
```
================================================================

Sample: 258 TreeSet_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.NavigableSet;
import java.util.TreeSet;

public class Main {
    public static void main(String[] args) {
        NavigableSet<Integer> set = new TreeSet<>();
        set.add(1);
        set.add(2);
        set.add(3);
        
        NavigableSet<Integer> headSet = set.headSet(3, true);
        
        System.out.println("Head set elements: " + headSet);
    }
}
```
================================================================

Sample: 259 TreeSet_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.NavigableSet;
import java.util.TreeSet;

public class Main {
    public static void main(String[] args) {
        NavigableSet<Integer> set = new TreeSet<>();
        set.add(1);
        set.add(2);
        set.add(3);
        
        NavigableSet<Integer> tailSet = set.tailSet(2, true);
        
        System.out.println("Original Set: " + set);
        System.out.println("Tail Set: " + tailSet);
    }
}
```
================================================================

Sample: 260 TreeSet_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.NavigableSet;
import java.util.TreeSet;

public class Main {
    public static void main(String[] args) {
        NavigableSet<Integer> set = new TreeSet<>();
        set.add(3);
        set.add(1);
        set.add(2);
        
        System.out.println("Set before pollFirst: " + set);
        
        Integer firstElement = set.pollFirst();
        
        System.out.println("First element removed: " + firstElement);
        System.out.println("Set after pollFirst: " + set);
    }
}
```
================================================================

Sample: 261 UUID_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.UUID;

public class Main {
    public static void main(String[] args) {
        UUID uuid = UUID.randomUUID();
        System.out.println("Random UUID: " + uuid);
    }
}
```
================================================================

Sample: 262 UUID_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.UUID;

public class Main {
    public static void main(String[] args) {
        byte[] name = "example".getBytes();
        UUID uuid = UUID.nameUUIDFromBytes(name);
        System.out.println(uuid);
    }
}
```
================================================================

Sample: 263 UUID_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.UUID;

public class Main {
    public static void main(String[] args) {
        UUID uuid = UUID.randomUUID();
        long mostSignificantBits = uuid.getMostSignificantBits();
        System.out.println("Most Significant Bits: " + mostSignificantBits);
    }
}
```
================================================================

Sample: 264 UUID_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.UUID;

public class Main {
    public static void main(String[] args) {
        UUID uuid = UUID.randomUUID();
        long leastSignificantBits = uuid.getLeastSignificantBits();
        System.out.println("Least Significant Bits: " + leastSignificantBits);
    }
}
```
================================================================

Sample: 265 UUID_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.UUID;

public class Main {
    public static void main(String[] args) {
        UUID uuid = UUID.randomUUID();
        int version = uuid.version();
        System.out.println("UUID Version: " + version);
    }
}
```
================================================================

Sample: 266 Vector_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.Vector;

public class Main {
    public static void main(String[] args) {
        Vector<String> vector = new Vector<>();
        vector.add("Apple");
        vector.add("Banana");
        vector.add("Orange");

        int index = vector.indexOf("Banana");
        System.out.println("Index of 'Banana': " + index);

        index = vector.indexOf("Grapes");
        System.out.println("Index of 'Grapes': " + index);
    }
}
```
================================================================

Sample: 267 WeakHashMap_1
----------------------------------------------------------------
`void clear()`: This method removes all of the mappings from this map.

Code snippet:
```java
import java.util.WeakHashMap;

public class Main {
    public static void main(String[] args) {
        WeakHashMap<Integer, String> map = new WeakHashMap<>();
        map.put(1, "One");
        map.put(2, "Two");
        
        System.out.println("Map before clear: " + map);
        
        map.clear();
        
        System.out.println("Map after clear: " + map);
    }
}
```
================================================================

Sample: 268 WeakHashMap_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.WeakHashMap;

public class Main {
    public static void main(String[] args) {
        WeakHashMap<String, Integer> map = new WeakHashMap<>();
        map.put("key1", 1);
        map.put("key2", 2);
        
        System.out.println("Contains key 'key1': " + map.containsKey("key1"));
        System.out.println("Contains key 'key3': " + map.containsKey("key3"));
    }
}
```
================================================================

Sample: 269 WeakHashMap_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.WeakHashMap;

public class Main {
    public static void main(String[] args) {
        WeakHashMap<String, Integer> map = new WeakHashMap<>();
        map.put("A", 1);
        map.put("B", 2);
        
        boolean containsValue = map.containsValue(2);
        System.out.println("Contains value 2: " + containsValue);
    }
}
```
================================================================

