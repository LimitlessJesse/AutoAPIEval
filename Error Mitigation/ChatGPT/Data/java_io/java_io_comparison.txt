Sample: 0 BufferedInputStream
----------------------------------------------------------------
1. `int read()`: This method reads the next byte of data from the input stream.
2. `int read(byte[] b)`: This method reads up to b.length bytes of data from the input stream into an array of bytes.
3. `long skip(long n)`: This method skips over and discards n bytes of data from the input stream.
4. `void mark(int readlimit)`: This method marks the current position in the input stream.
5. `void reset()`: This method resets the input stream to the last marked position.
================================================================

Sample: 1 BufferedOutputStream
----------------------------------------------------------------
1. `void write(int b)`: This method writes the specified byte to the output stream.
2. `void write(byte[] b)`: This method writes b.length bytes from the specified byte array to the output stream.
3. `void write(byte[] b, int off, int len)`: This method writes len bytes from the specified byte array starting at offset off to the output stream.
4. `void flush()`: This method flushes this output stream and forces any buffered output bytes to be written out.
5. `void close()`: This method closes this output stream and releases any system resources associated with the stream.
================================================================

Sample: 2 BufferedReader
----------------------------------------------------------------
1. `String readLine()`: This method reads a line of text. A line is considered to be terminated by any one of a line feed ('\n'), a carriage return ('\r'), or a carriage return followed immediately by a linefeed.
2. `int read()`: This method reads a single character.
3. `int read(char[] cbuf, int off, int len)`: This method reads characters into a portion of an array.
4. `boolean ready()`: This method tells whether this stream is ready to be read.
5. `void close()`: This method closes the stream and releases any system resources associated with it.
================================================================

Sample: 3 BufferedWriter
----------------------------------------------------------------
1. `void write(String str)`: This method writes a string to the output stream.
2. `void newLine()`: This method writes a line separator to the output stream.
3. `void flush()`: This method flushes the stream.
4. `void close()`: This method closes the stream, flushing it first.
5. `void write(char[] cbuf, int off, int len)`: This method writes a portion of an array of characters.
================================================================

Sample: 4 ByteArrayInputStream
----------------------------------------------------------------
1. `int read()`: This method reads the next byte of data from the input stream.
2. `int read(byte[] b, int off, int len)`: This method reads up to len bytes of data from the input stream into an array of bytes.
3. `long skip(long n)`: This method skips over and discards n bytes of data from the input stream.
4. `int available()`: This method returns the number of bytes that can be read from the input stream without blocking.
5. `void reset()`: This method resets the input stream to begin reading from the beginning of the internal buffer.
================================================================

Sample: 5 ByteArrayOutputStream
----------------------------------------------------------------
1. `void write(int b)`: This method writes the specified byte to this output stream.
2. `void write(byte[] b)`: This method writes b.length bytes from the specified byte array to this output stream.
3. `void write(byte[] b, int off, int len)`: This method writes len bytes from the specified byte array starting at offset off to this output stream.
4. `void writeTo(OutputStream out)`: This method writes the complete contents of this byte array output stream to the specified output stream.
5. `byte[] toByteArray()`: This method creates a newly allocated byte array containing the current contents of this output stream.
================================================================

Sample: 6 CharArrayReader
----------------------------------------------------------------
1. `int read()`: This method reads a single character from the input stream.
2. `int read(char[] cbuf, int off, int len)`: This method reads characters into a portion of an array.
3. `boolean ready()`: This method tells whether this stream is ready to be read.
4. `void close()`: This method closes the stream and releases any system resources associated with it.
5. `void mark(int readAheadLimit)`: This method marks the present position in the stream.
================================================================

Sample: 7 CharArrayWriter
----------------------------------------------------------------
1. `void write(int c)`: This method writes a single character.
2. `void write(char[] cbuf, int off, int len)`: This method writes a portion of an array of characters.
3. `void writeTo(Writer out)`: This method writes the contents of the buffer to another writer.
4. `void reset()`: This method resets the buffer so that it is empty and its internal character array can be reused.
5. `char[] toCharArray()`: This method returns a copy of the input data in the form of a character array.
================================================================

Sample: 8 Console
----------------------------------------------------------------
1. `String readLine()`: This method reads a single line of text from the console.
2. `char[] readPassword()`: This method reads a password or passphrase from the console with echoing disabled.
3. `Writer writer()`: This method returns the writer associated with this console.
4. `Reader reader()`: This method returns the reader associated with this console.
5. `void flush()`: This method flushes the console and forces any buffered output to be written immediately.
================================================================

Sample: 9 DataInputStream
----------------------------------------------------------------
1. int readInt(): This method reads a signed 32-bit integer from the input stream.
2. long readLong(): This method reads a signed 64-bit integer from the input stream.
3. float readFloat(): This method reads a 32-bit floating point number from the input stream.
4. double readDouble(): This method reads a 64-bit floating point number from the input stream.
5. String readUTF(): This method reads a string in modified UTF-8 format from the input stream.
================================================================

Sample: 10 DataOutputStream
----------------------------------------------------------------
1. `void write(int b)`: This method writes the specified byte to the output stream.
2. `void write(byte[] b)`: This method writes b.length bytes from the specified byte array to the output stream.
3. `void writeBoolean(boolean v)`: This method writes a boolean to the output stream as a 1-byte value.
4. `void writeInt(int v)`: This method writes an int to the output stream as four bytes, high byte first.
5. `void writeUTF(String str)`: This method writes a string to the output stream using modified UTF-8 encoding.
================================================================

Sample: 11 File
----------------------------------------------------------------
1. `boolean createNewFile()`: This method creates a new, empty file at the specified path.
2. `boolean mkdir()`: This method creates the directory specified by this pathname.
3. `String[] list()`: This method returns an array of strings naming the files and directories in the directory specified by this pathname.
4. `boolean delete()`: This method deletes the file or directory specified by this pathname.
5. `boolean exists()`: This method tests whether the file or directory specified by this pathname exists.
================================================================

Sample: 12 FileDescriptor
----------------------------------------------------------------
1. `FileDescriptor dup()`: This method creates a new FileDescriptor object that represents the same underlying file, socket, or other source or sink of bytes as this FileDescriptor.
2. `void sync()`: This method forces any changes made to this file descriptor's file to be written to the storage device.
3. `void valid()`: This method tests if this file descriptor object is valid.
4. `int hashCode()`: This method returns a hash code value for the object.
5. `String toString()`: This method returns a string representation of the object.
================================================================

Sample: 13 FileInputStream
----------------------------------------------------------------
1. `int read()`: This method reads a byte of data from the input stream.
2. `int read(byte[] b)`: This method reads up to b.length bytes of data from the input stream into an array of bytes.
3. `int read(byte[] b, int off, int len)`: This method reads up to len bytes of data from the input stream into an array of bytes, starting at the specified offset off.
4. `long skip(long n)`: This method skips over and discards n bytes of data from the input stream.
5. `void close()`: This method closes the input stream and releases any system resources associated with it.
================================================================

Sample: 14 FileOutputStream
----------------------------------------------------------------
1. `void write(int b)`: This method writes the specified byte to the output stream.
2. `void write(byte[] b)`: This method writes b.length bytes from the specified byte array to the output stream.
3. `void write(byte[] b, int off, int len)`: This method writes len bytes from the specified byte array starting at offset off to the output stream.
4. `void flush()`: This method flushes this output stream and forces any buffered output bytes to be written out.
5. `void close()`: This method closes this output stream and releases any system resources associated with the stream.
================================================================

Sample: 15 FilePermission
----------------------------------------------------------------
1. `void checkPermission(java.security.Permission perm)`: This method checks if the specified permission is permitted.
2. `java.security.PermissionCollection newPermissionCollection()`: This method creates a new PermissionCollection object for storing permissions.
3. `boolean implies(java.security.Permission permission)`: This method checks if the specified permission is implied by this FilePermission object.
4. `java.lang.String getActions()`: This method returns the actions for the specified permission.
5. `java.security.PermissionCollection getPermissionCollection()`: This method returns the PermissionCollection object associated with this FilePermission object.
================================================================

Sample: 16 FileReader
----------------------------------------------------------------
1. `int read()`: This method reads a single character from the file and returns it as an integer.
2. `int read(char[] cbuf)`: This method reads characters into an array and returns the number of characters read.
3. `int read(char[] cbuf, int off, int len)`: This method reads characters into a portion of an array and returns the number of characters read.
4. `boolean ready()`: This method checks if the input stream is ready to be read.
5. `void close()`: This method closes the FileReader and releases any system resources associated with it.
================================================================

Sample: 17 FileWriter
----------------------------------------------------------------
1. `void write(int c)`: This method writes a single character.
2. `void write(char[] cbuf)`: This method writes an array of characters.
3. `void write(String str)`: This method writes a string.
4. `void write(String str, int off, int len)`: This method writes a portion of a string.
5. `void flush()`: This method flushes the stream.
================================================================

Sample: 18 FilterInputStream
----------------------------------------------------------------
1. `int read()`: This method reads the next byte of data from the input stream.
2. `int read(byte[] b)`: This method reads up to b.length bytes of data from the input stream into an array of bytes.
3. `int read(byte[] b, int off, int len)`: This method reads up to len bytes of data from the input stream into an array of bytes, starting at the specified offset off.
4. `long skip(long n)`: This method skips over and discards n bytes of data from the input stream.
5. `int available()`: This method returns an estimate of the number of bytes that can be read from the input stream without blocking.
================================================================

Sample: 19 FilterOutputStream
----------------------------------------------------------------
1. `void write(int b)`: This method writes the specified byte to the output stream.
2. `void write(byte[] b)`: This method writes b.length bytes from the specified byte array to the output stream.
3. `void write(byte[] b, int off, int len)`: This method writes len bytes from the specified byte array starting at offset off to the output stream.
4. `void flush()`: This method flushes the output stream.
5. `void close()`: This method closes the output stream.
================================================================

Sample: 20 FilterReader
----------------------------------------------------------------
1. `int read()`: This method reads a single character.
2. `int read(char[] cbuf, int off, int len)`: This method reads characters into a portion of an array.
3. `boolean ready()`: This method tells whether this stream is ready to be read.
4. `void mark(int readAheadLimit)`: This method marks the present position in the stream.
5. `void reset()`: This method resets the stream.
================================================================

Sample: 21 FilterWriter
----------------------------------------------------------------
1. `void write(int c)`: This method writes a single character.
2. `void write(char[] cbuf, int off, int len)`: This method writes a portion of an array of characters.
3. `void write(String str, int off, int len)`: This method writes a portion of a string.
4. `void write(String str)`: This method writes a string.
5. `void flush()`: This method flushes the stream.
================================================================

Sample: 22 InputStream
----------------------------------------------------------------
1. `int read()`: This method reads the next byte of data from the input stream.
2. `int read(byte[] b)`: This method reads up to b.length bytes of data from the input stream into an array of bytes.
3. `long skip(long n)`: This method skips over and discards n bytes of data from the input stream.
4. `int available()`: This method returns the number of bytes that can be read from the input stream without blocking.
5. `void close()`: This method closes the input stream and releases any system resources associated with it.
================================================================

Sample: 23 InputStreamReader
----------------------------------------------------------------
1. `void close()`: This method closes the stream and releases any system resources associated with it.
2. `String getEncoding()`: This method returns the name of the character encoding being used by this InputStreamReader.
3. `int read()`: This method reads a single character from the input stream.
4. `int read(char[] cbuf, int offset, int length)`: This method reads characters into a portion of an array.
5. `boolean ready()`: This method tells whether this stream is ready to be read.
================================================================

Sample: 24 LineNumberInputStream
----------------------------------------------------------------
1. `int read()`: This method reads the next byte of data from the input stream.
2. `int read(byte[] b, int off, int len)`: This method reads up to len bytes of data from the input stream into an array of bytes.
3. `long skip(long n)`: This method skips over and discards n bytes of data from the input stream.
4. `int available()`: This method returns the number of bytes that can be read from the input stream without blocking.
5. `void mark(int readlimit)`: This method marks the current position in the input stream.
================================================================

Sample: 25 LineNumberReader
----------------------------------------------------------------
1. `int getLineNumber()`: This method returns the current line number.
2. `void setLineNumber(int lineNumber)`: This method sets the current line number.
3. `String readLine()`: This method reads a line of text.
4. `long skip(long n)`: This method skips characters.
5. `void mark(int readAheadLimit)`: This method marks the present position in the stream.
================================================================

Sample: 26 ObjectInputStream
----------------------------------------------------------------
1. `Object readObject()`: This method reads an object from the ObjectInputStream.
2. `int readInt()`: This method reads a 4-byte int value from the input stream.
3. `double readDouble()`: This method reads an 8-byte double value from the input stream.
4. `String readUTF()`: This method reads a string in UTF format from the input stream.
5. `void close()`: This method closes the input stream.
================================================================

Sample: 27 ObjectInputStream.GetField
----------------------------------------------------------------
1. `boolean defaulted(String name)`: This method returns true if the field with the specified name is defaulted.
2. `boolean get(String name, boolean def)`: This method returns the boolean value of the field with the specified name.
3. `byte get(String name, byte def)`: This method returns the byte value of the field with the specified name.
4. `char get(String name, char def)`: This method returns the char value of the field with the specified name.
5. `double get(String name, double def)`: This method returns the double value of the field with the specified name.
================================================================

Sample: 28 ObjectOutputStream
----------------------------------------------------------------
1. `void writeObject(Object obj)`: This method writes the specified object to the ObjectOutputStream.
2. `void writeInt(int value)`: This method writes an int value to the ObjectOutputStream.
3. `void writeUTF(String str)`: This method writes a String in UTF format to the ObjectOutputStream.
4. `void flush()`: This method flushes the ObjectOutputStream, forcing any buffered output bytes to be written out.
5. `void close()`: This method closes the ObjectOutputStream.
================================================================

Sample: 29 ObjectOutputStream.PutField
----------------------------------------------------------------
1. `void put(String name, boolean value)`: This method sets the value of the named boolean field.
2. `void put(String name, byte value)`: This method sets the value of the named byte field.
3. `void put(String name, char value)`: This method sets the value of the named char field.
4. `void put(String name, double value)`: This method sets the value of the named double field.
5. `void put(String name, float value)`: This method sets the value of the named float field.
================================================================

Sample: 30 ObjectStreamClass
----------------------------------------------------------------
1. `String getName()`: Returns the name of the class described by this ObjectStreamClass.
2. `ObjectStreamField getField(String name)`: Returns the ObjectStreamField object for the field with the specified name in the class described by this ObjectStreamClass.
3. `long getSerialVersionUID()`: Returns the serialVersionUID for the class described by this ObjectStreamClass.
4. `ObjectStreamClass getSuperclass()`: Returns the ObjectStreamClass representing the superclass of the class described by this ObjectStreamClass.
5. `ObjectStreamField[] getFields()`: Returns an array of ObjectStreamField objects representing the fields of the class described by this ObjectStreamClass.
================================================================

Sample: 31 ObjectStreamField
----------------------------------------------------------------
1. `String getName()`: Returns the name of the field represented by this ObjectStreamField.
2. `Class<?> getType()`: Returns the type of the field represented by this ObjectStreamField.
3. `char getTypeCode()`: Returns the type code for the field represented by this ObjectStreamField.
4. `String toString()`: Returns a string representation of this ObjectStreamField.
5. `long getOffset()`: Returns the byte offset of the field from the beginning of the Object.
================================================================

Sample: 32 OutputStream
----------------------------------------------------------------
1. `void write(int b)`: This method writes the specified byte to the output stream.
2. `void write(byte[] b)`: This method writes b.length bytes from the specified byte array to the output stream.
3. `void flush()`: This method flushes the output stream, ensuring all buffered data is written out.
4. `void close()`: This method closes the output stream, releasing any system resources associated with it.
5. `void write(byte[] b, int off, int len)`: This method writes len bytes from the specified byte array starting at offset off to the output stream.
================================================================

Sample: 33 OutputStreamWriter
----------------------------------------------------------------
1. `void write(int c)`: This method writes a single character.
2. `void write(char[] cbuf)`: This method writes an array of characters.
3. `void write(String str)`: This method writes a string.
4. `void flush()`: This method flushes the stream.
5. `void close()`: This method closes the stream.
================================================================

Sample: 34 PipedInputStream
----------------------------------------------------------------
1. `void connect(PipedOutputStream src)`: This method connects this piped input stream to a piped output stream.
2. `int read()`: This method reads the next byte of data from the input stream.
3. `int read(byte[] b, int off, int len)`: This method reads up to len bytes of data from the input stream into an array of bytes.
4. `int available()`: This method returns the number of bytes that can be read from the input stream without blocking.
5. `void close()`: This method closes the input stream and releases any system resources associated with it.
================================================================

Sample: 35 PipedOutputStream
----------------------------------------------------------------
1. `void connect(PipedInputStream snk)`: This method connects this piped output stream to a receiver.
2. `void write(int b)`: This method writes the specified byte to the piped output stream.
3. `void write(byte[] b, int off, int len)`: This method writes len bytes from the specified byte array starting at offset off to the piped output stream.
4. `void flush()`: This method flushes this output stream and forces any buffered output bytes to be written out.
5. `void close()`: This method closes this output stream and releases any system resources associated with it.
================================================================

Sample: 36 PipedReader
----------------------------------------------------------------
1. `void connect(PipedWriter src)`: This method connects this piped reader to a piped writer.
2. `int read()`: This method reads a single character from the input stream.
3. `int read(char[] cbuf, int off, int len)`: This method reads characters into a portion of an array.
4. `boolean ready()`: This method tells whether this stream is ready to be read.
5. `void close()`: This method closes the stream.
================================================================

Sample: 37 PipedWriter
----------------------------------------------------------------
1. `void connect(PipedReader snk)`: This method connects this piped writer to a receiver.
2. `void flush()`: This method flushes this writer and forces any buffered output characters to be written out.
3. `void write(char[] cbuf, int off, int len)`: This method writes a portion of an array of characters.
4. `void write(int c)`: This method writes a single character.
5. `void close()`: This method closes this writer and releases any system resources associated with it.
================================================================

Sample: 38 PrintStream
----------------------------------------------------------------
1. `void print(boolean b)`: This method prints a boolean value.
2. `void print(char c)`: This method prints a character.
3. `void print(double d)`: This method prints a double value.
4. `void print(int i)`: This method prints an integer value.
5. `void println(String x)`: This method prints a string and then terminates the line.
================================================================

Sample: 39 PrintWriter
----------------------------------------------------------------
1. `void print(String s)`: This method prints a string to the output stream.
2. `void println(String x)`: This method prints a string followed by a newline character to the output stream.
3. `void printf(String format, Object... args)`: This method writes a formatted string to the output stream using the specified format string and arguments.
4. `void write(char[] buf, int off, int len)`: This method writes a portion of an array of characters to the output stream.
5. `void flush()`: This method flushes the output stream.
================================================================

Sample: 40 PushbackInputStream
----------------------------------------------------------------
1. `int read()`: This method reads the next byte of data from the input stream.
2. `int read(byte[] b, int off, int len)`: This method reads up to len bytes of data from the input stream into an array of bytes.
3. `void unread(int b)`: This method pushes back a byte by copying it to the front of the pushback buffer.
4. `void unread(byte[] b, int off, int len)`: This method pushes back an array of bytes by copying it to the front of the pushback buffer.
5. `boolean markSupported()`: This method tests if this input stream supports the mark and reset methods.
================================================================

Sample: 41 PushbackReader
----------------------------------------------------------------
1. `int read()`: This method reads a single character from the input stream.
2. `int read(char[] cbuf, int off, int len)`: This method reads characters into a portion of an array.
3. `void unread(char[] cbuf, int off, int len)`: This method pushes back a portion of an array of characters.
4. `void unread(int c)`: This method pushes back a single character.
5. `boolean ready()`: This method tells whether this stream is ready to be read.
================================================================

Sample: 42 RandomAccessFile
----------------------------------------------------------------
1. `void seek(long pos)`: This method sets the file-pointer offset, measured from the beginning of this file, at which the next read or write occurs.
2. `int read()`: This method reads a byte of data from this file.
3. `void write(int b)`: This method writes the specified byte to this file.
4. `long length()`: This method returns the length of this file.
5. `void setLength(long newLength)`: This method sets the length of this file.
================================================================

Sample: 43 Reader
----------------------------------------------------------------
1. `int read()`: This method reads a single character from the input stream and returns it as an integer.
2. `int read(char[] cbuf)`: This method reads characters into an array and returns the number of characters read.
3. `int read(char[] cbuf, int off, int len)`: This method reads characters into a portion of an array and returns the number of characters read.
4. `boolean ready()`: This method checks whether the input stream is ready to be read.
5. `void close()`: This method closes the input stream.
================================================================

Sample: 44 SequenceInputStream
----------------------------------------------------------------
1. `int read()`: This method reads the next byte of data from the input stream.
2. `int read(byte[] b, int off, int len)`: This method reads up to len bytes of data from the input stream into an array of bytes.
3. `int available()`: This method returns an estimate of the number of bytes that can be read from the input stream without blocking.
4. `void close()`: This method closes the input stream and releases any system resources associated with it.
5. `int skip(long n)`: This method skips over and discards n bytes of data from the input stream.
================================================================

Sample: 45 SerializablePermission
----------------------------------------------------------------
1. `String getActions()`: This method returns the actions of the permission.
2. `boolean implies(Permission permission)`: This method checks if the specified permission is implied by this permission.
3. `void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException`: This method reads the object from the input stream.
4. `void writeObject(ObjectOutputStream out) throws IOException`: This method writes the object to the output stream.
5. `SerializablePermission(String name, String actions)`: Constructor for creating a new SerializablePermission with the specified name and actions.
================================================================

Sample: 46 StreamTokenizer
----------------------------------------------------------------
1. `int nextToken()`: This method parses the next token from the input stream and returns its type.
2. `String sval()`: This method returns the string value of the current token if it is a string.
3. `double nval()`: This method returns the numeric value of the current token if it is a number.
4. `void eolIsSignificant(boolean flag)`: This method specifies whether end-of-line characters are significant tokens.
5. `void resetSyntax()`: This method resets the syntax table to the default settings.
================================================================

Sample: 47 StringBufferInputStream
----------------------------------------------------------------
1. `int read()`: This method reads the next byte of data from the input stream.
2. `int read(byte[] b)`: This method reads up to b.length bytes of data from the input stream into an array of bytes.
3. `int read(byte[] b, int off, int len)`: This method reads up to len bytes of data from the input stream into an array of bytes, starting at the specified offset off.
4. `long skip(long n)`: This method skips over and discards n bytes of data from the input stream.
5. `void close()`: This method closes the input stream and releases any system resources associated with it.
================================================================

Sample: 48 StringReader
----------------------------------------------------------------
1. `int read()`: This method reads a single character from the input stream.
2. `int read(char[] cbuf, int off, int len)`: This method reads characters into a portion of an array.
3. `boolean ready()`: This method tells whether this stream is ready to be read.
4. `void close()`: This method closes the stream and releases any system resources associated with it.
5. `long skip(long n)`: This method skips over and discards n characters of data from the input stream.
================================================================

Sample: 49 StringWriter
----------------------------------------------------------------
1. `void write(int c)`: This method writes a single character.
2. `void write(char[] cbuf, int off, int len)`: This method writes a portion of an array of characters.
3. `void write(String str)`: This method writes a string.
4. `void write(String str, int off, int len)`: This method writes a portion of a string.
5. `String toString()`: This method returns the buffer's current value as a string.
================================================================

Sample: 50 Writer
----------------------------------------------------------------
1. `void write(char[] cbuf)`: This method writes an array of characters.
2. `void write(String str)`: This method writes a string.
3. `void write(String str, int off, int len)`: This method writes a portion of a string.
4. `void write(int c)`: This method writes a single character.
5. `void flush()`: This method flushes the stream.
================================================================

