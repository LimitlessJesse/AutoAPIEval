Sample: 0 PhantomReference
----------------------------------------------------------------
1. `T get()`: This method returns the referent object of the phantom reference.
2. `boolean isEnqueued()`: This method returns true if this reference has been enqueued, false otherwise.
3. `void clear()`: This method clears the reference object.
4. `ReferenceQueue<? super T> queue()`: This method returns the reference queue with which this reference is registered.
5. `void finalize()`: This method is called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
================================================================

Sample: 1 Reference
----------------------------------------------------------------
1. `Object get()`: This method returns the referent object of this reference.
2. `boolean isEnqueued()`: This method returns true if this reference has been enqueued, false otherwise.
3. `void clear()`: This method clears this reference object.
4. `boolean enqueue()`: This method adds this reference to the queue with which it is registered, if it is not already enqueued.
5. `ReferenceQueue<? super T> queue()`: This method returns the queue with which this reference is registered, or null if it is not registered with any queue.
================================================================

Sample: 2 ReferenceQueue
----------------------------------------------------------------
1. `Reference poll()`: This method retrieves and removes the next reference object from the reference queue, or returns null if the queue is empty.
2. `Reference remove()`: This method retrieves and removes the next reference object from the reference queue, waiting if necessary until an element becomes available.
3. `Reference remove(long timeout)`: This method retrieves and removes the next reference object from the reference queue, waiting up to the specified timeout if necessary for an element to become available.
4. `int drainTo(Collection<? super T> c)`: This method removes all available reference objects from this queue and adds them to the given collection.
5. `int drainTo(Collection<? super T> c, int maxElements)`: This method removes at most the given number of available reference objects from this queue and adds them to the given collection.
================================================================

Sample: 3 SoftReference
----------------------------------------------------------------
1. `T get()`: This method returns the referent object of this soft reference.
2. `void clear()`: This method clears the reference to the referent object.
3. `boolean isEnqueued()`: This method returns true if this soft reference has been enqueued by the garbage collector.
4. `void enqueue()`: This method adds this soft reference to the appropriate reference queue.
5. `boolean isCleared()`: This method returns true if the referent object has been cleared.
================================================================

Sample: 4 WeakReference
----------------------------------------------------------------
1. `Object get()`: This method returns the referent object of this weak reference.
2. `void clear()`: This method clears the reference to the referent object.
3. `boolean enqueue()`: This method adds this reference to the queue with which it is registered, if it is not already enqueued.
4. `boolean isEnqueued()`: This method returns true if this reference has been enqueued, false otherwise.
5. `ReferenceQueue<? super T> queue()`: This method returns the reference queue with which this reference is registered, or null if it is not registered with a queue.
================================================================

