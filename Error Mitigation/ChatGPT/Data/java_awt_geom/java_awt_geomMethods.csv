ClassName,Method,Return Type,Description
AffineTransform,clone(),Object,Returns a copy of this AffineTransform object.
AffineTransform,concatenate(AffineTransform Tx),void,Concatenates an AffineTransform Tx to this AffineTransform Cx in the most commonly useful way to provide a new user space that is mapped to the former user space by Tx.
AffineTransform,createInverse(),AffineTransform,Returns an AffineTransform object representing the inverse transformation.
AffineTransform,createTransformedShape(Shape pSrc),Shape,Returns a new Shape object defined by the geometry of the specified Shape after it has been transformed by this transform.
AffineTransform,"deltaTransform(double[] srcPts, int srcOff, double[] dstPts, int dstOff, int numPts)",void,Transforms an array of relative distance vectors by this transform.
AffineTransform,"deltaTransform(Point2D ptSrc, Point2D ptDst)",Point2D,Transforms the relative distance vector specified by ptSrc and stores the result in ptDst.
AffineTransform,equals(Object obj),boolean,Returns true if this AffineTransform represents the same affine coordinate transform as the specified argument.
AffineTransform,getDeterminant(),double,Returns the determinant of the matrix representation of the transform.
AffineTransform,getMatrix(double[] flatmatrix),void,Retrieves the 6 specifiable values in the 3x3 affine transformation matrix and places them into an array of double precisions values.
AffineTransform,getQuadrantRotateInstance(int numquadrants),static AffineTransform,Returns a transform that rotates coordinates by the specified number of quadrants.
AffineTransform,"getQuadrantRotateInstance(int numquadrants, double anchorx, double anchory)",static AffineTransform,Returns a transform that rotates coordinates by the specified number of quadrants around the specified anchor point.
AffineTransform,getRotateInstance(double theta),static AffineTransform,Returns a transform representing a rotation transformation.
AffineTransform,"getRotateInstance(double vecx, double vecy)",static AffineTransform,Returns a transform that rotates coordinates according to a rotation vector.
AffineTransform,"getRotateInstance(double theta, double anchorx, double anchory)",static AffineTransform,Returns a transform that rotates coordinates around an anchor point.
AffineTransform,"getRotateInstance(double vecx, double vecy, double anchorx, double anchory)",static AffineTransform,Returns a transform that rotates coordinates around an anchor point according to a rotation vector.
AffineTransform,"getScaleInstance(double sx, double sy)",static AffineTransform,Returns a transform representing a scaling transformation.
AffineTransform,getScaleX(),double,Returns the X coordinate scaling element (m00) of the 3x3 affine transformation matrix.
AffineTransform,getScaleY(),double,Returns the Y coordinate scaling element (m11) of the 3x3 affine transformation matrix.
AffineTransform,"getShearInstance(double shx, double shy)",static AffineTransform,Returns a transform representing a shearing transformation.
AffineTransform,getShearX(),double,Returns the X coordinate shearing element (m01) of the 3x3 affine transformation matrix.
AffineTransform,getShearY(),double,Returns the Y coordinate shearing element (m10) of the 3x3 affine transformation matrix.
AffineTransform,"getTranslateInstance(double tx, double ty)",static AffineTransform,Returns a transform representing a translation transformation.
AffineTransform,getTranslateX(),double,Returns the X coordinate of the translation element (m02) of the 3x3 affine transformation matrix.
AffineTransform,getTranslateY(),double,Returns the Y coordinate of the translation element (m12) of the 3x3 affine transformation matrix.
AffineTransform,getType(),int,Retrieves the flag bits describing the conversion properties of this transform.
AffineTransform,hashCode(),int,Returns the hashcode for this transform.
AffineTransform,"inverseTransform(double[] srcPts, int srcOff, double[] dstPts, int dstOff, int numPts)",void,Inverse transforms an array of double precision coordinates by this transform.
AffineTransform,"inverseTransform(Point2D ptSrc, Point2D ptDst)",Point2D,Inverse transforms the specified ptSrc and stores the result in ptDst.
AffineTransform,invert(),void,Sets this transform to the inverse of itself.
AffineTransform,isIdentity(),boolean,Returns true if this AffineTransform is an identity transform.
AffineTransform,preConcatenate(AffineTransform Tx),void,Concatenates an AffineTransform Tx to this AffineTransform Cx in a less commonly used way such that Tx modifies the coordinate transformation relative to the absolute pixel space rather than relative to the existing user space.
AffineTransform,quadrantRotate(int numquadrants),void,Concatenates this transform with a transform that rotates coordinates by the specified number of quadrants.
AffineTransform,"quadrantRotate(int numquadrants, double anchorx, double anchory)",void,Concatenates this transform with a transform that rotates coordinates by the specified number of quadrants around the specified anchor point.
AffineTransform,rotate(double theta),void,Concatenates this transform with a rotation transformation.
AffineTransform,"rotate(double vecx, double vecy)",void,Concatenates this transform with a transform that rotates coordinates according to a rotation vector.
AffineTransform,"rotate(double theta, double anchorx, double anchory)",void,Concatenates this transform with a transform that rotates coordinates around an anchor point.
AffineTransform,"rotate(double vecx, double vecy, double anchorx, double anchory)",void,Concatenates this transform with a transform that rotates coordinates around an anchor point according to a rotation vector.
AffineTransform,"scale(double sx, double sy)",void,Concatenates this transform with a scaling transformation.
AffineTransform,setToIdentity(),void,Resets this transform to the Identity transform.
AffineTransform,setToQuadrantRotation(int numquadrants),void,Sets this transform to a rotation transformation that rotates coordinates by the specified number of quadrants.
AffineTransform,"setToQuadrantRotation(int numquadrants, double anchorx, double anchory)",void,Sets this transform to a translated rotation transformation that rotates coordinates by the specified number of quadrants around the specified anchor point.
AffineTransform,setToRotation(double theta),void,Sets this transform to a rotation transformation.
AffineTransform,"setToRotation(double vecx, double vecy)",void,Sets this transform to a rotation transformation that rotates coordinates according to a rotation vector.
AffineTransform,"setToRotation(double theta, double anchorx, double anchory)",void,Sets this transform to a translated rotation transformation.
AffineTransform,"setToRotation(double vecx, double vecy, double anchorx, double anchory)",void,Sets this transform to a rotation transformation that rotates coordinates around an anchor point according to a rotation vector.
AffineTransform,"setToScale(double sx, double sy)",void,Sets this transform to a scaling transformation.
AffineTransform,"setToShear(double shx, double shy)",void,Sets this transform to a shearing transformation.
AffineTransform,"setToTranslation(double tx, double ty)",void,Sets this transform to a translation transformation.
AffineTransform,setTransform(AffineTransform Tx),void,Sets this transform to a copy of the transform in the specified AffineTransform object.
AffineTransform,"setTransform(double m00, double m10, double m01, double m11, double m02, double m12)",void,Sets this transform to the matrix specified by the 6 double precision values.
AffineTransform,"shear(double shx, double shy)",void,Concatenates this transform with a shearing transformation.
AffineTransform,toString(),String,Returns a String that represents the value of this Object.
AffineTransform,"transform(double[] srcPts, int srcOff, double[] dstPts, int dstOff, int numPts)",void,Transforms an array of double precision coordinates by this transform.
AffineTransform,"transform(double[] srcPts, int srcOff, float[] dstPts, int dstOff, int numPts)",void,Transforms an array of double precision coordinates by this transform and stores the results into an array of floats.
AffineTransform,"transform(float[] srcPts, int srcOff, double[] dstPts, int dstOff, int numPts)",void,Transforms an array of floating point coordinates by this transform and stores the results into an array of doubles.
AffineTransform,"transform(float[] srcPts, int srcOff, float[] dstPts, int dstOff, int numPts)",void,Transforms an array of floating point coordinates by this transform.
AffineTransform,"transform(Point2D[] ptSrc, int srcOff, Point2D[] ptDst, int dstOff, int numPts)",void,Transforms an array of point objects by this transform.
AffineTransform,"transform(Point2D ptSrc, Point2D ptDst)",Point2D,Transforms the specified ptSrc and stores the result in ptDst.
AffineTransform,"translate(double tx, double ty)",void,Concatenates this transform with a translation transformation.
Arc2D,"contains(double x, double y)",boolean,Determines whether or not the specified point is inside the boundary of the arc.
Arc2D,"contains(double x, double y, double w, double h)",boolean,Determines whether or not the interior of the arc entirely contains the specified rectangle.
Arc2D,contains(Rectangle2D r),boolean,Determines whether or not the interior of the arc entirely contains the specified rectangle.
Arc2D,containsAngle(double angle),boolean,Determines whether or not the specified angle is within the angular extents of the arc.
Arc2D,equals(Object obj),boolean,Determines whether or not the specified Object is equal to this Arc2D.
Arc2D,getAngleExtent(),abstract double,Returns the angular extent of the arc.
Arc2D,getAngleStart(),abstract double,Returns the starting angle of the arc.
Arc2D,getArcType(),int,"Returns the arc closure type of the arc: OPEN, CHORD, or PIE."
Arc2D,getBounds2D(),Rectangle2D,Returns the high-precision framing rectangle of the arc.
Arc2D,getEndPoint(),Point2D,Returns the ending point of the arc.
Arc2D,getPathIterator(AffineTransform at),PathIterator,Returns an iteration object that defines the boundary of the arc.
Arc2D,getStartPoint(),Point2D,Returns the starting point of the arc.
Arc2D,hashCode(),int,Returns the hashcode for this Arc2D.
Arc2D,"intersects(double x, double y, double w, double h)",boolean,Determines whether or not the interior of the arc intersects the interior of the specified rectangle.
Arc2D,"makeBounds(double x, double y, double w, double h)",protected abstract Rectangle2D,Constructs a Rectangle2D of the appropriate precision to hold the parameters calculated to be the framing rectangle of this arc.
Arc2D,setAngleExtent(double angExt),abstract void,Sets the angular extent of this arc to the specified double value.
Arc2D,"setAngles(double x1, double y1, double x2, double y2)",void,Sets the starting angle and angular extent of this arc using two sets of coordinates.
Arc2D,"setAngles(Point2D p1, Point2D p2)",void,Sets the starting angle and angular extent of this arc using two points.
Arc2D,setAngleStart(double angSt),abstract void,Sets the starting angle of this arc to the specified double value.
Arc2D,setAngleStart(Point2D p),void,Sets the starting angle of this arc to the angle that the specified point defines relative to the center of this arc.
Arc2D,setArc(Arc2D a),void,Sets this arc to be the same as the specified arc.
Arc2D,"setArc(double x, double y, double w, double h, double angSt, double angExt, int closure)",abstract void,"Sets the location, size, angular extents, and closure type of this arc to the specified double values."
Arc2D,"setArc(Point2D loc, Dimension2D size, double angSt, double angExt, int closure)",void,"Sets the location, size, angular extents, and closure type of this arc to the specified values."
Arc2D,"setArc(Rectangle2D rect, double angSt, double angExt, int closure)",void,"Sets the location, size, angular extents, and closure type of this arc to the specified values."
Arc2D,"setArcByCenter(double x, double y, double radius, double angSt, double angExt, int closure)",void,"Sets the position, bounds, angular extents, and closure type of this arc to the specified values."
Arc2D,"setArcByTangent(Point2D p1, Point2D p2, Point2D p3, double radius)",void,"Sets the position, bounds, and angular extents of this arc to the specified value."
Arc2D,setArcType(int type),void,"Sets the closure type of this arc to the specified value: OPEN, CHORD, or PIE."
Arc2D,"setFrame(double x, double y, double w, double h)",void,Sets the location and size of the framing rectangle of this Shape to the specified rectangular values.
Arc2D.Double,getAngleExtent(),double,Returns the angular extent of the arc.
Arc2D.Double,getAngleStart(),double,Returns the starting angle of the arc.
Arc2D.Double,getHeight(),double,Returns the height of the framing rectangle in double precision.
Arc2D.Double,getWidth(),double,Returns the width of the framing rectangle in double precision.
Arc2D.Double,getX(),double,Returns the X coordinate of the upper-left corner of the framing rectangle in double precision.
Arc2D.Double,getY(),double,Returns the Y coordinate of the upper-left corner of the framing rectangle in double precision.
Arc2D.Double,isEmpty(),boolean,Determines whether the RectangularShape is empty.
Arc2D.Double,"makeBounds(double x, double y, double w, double h)",protected Rectangle2D,Constructs a Rectangle2D of the appropriate precision to hold the parameters calculated to be the framing rectangle of this arc.
Arc2D.Double,setAngleExtent(double angExt),void,Sets the angular extent of this arc to the specified double value.
Arc2D.Double,setAngleStart(double angSt),void,Sets the starting angle of this arc to the specified double value.
Arc2D.Double,"setArc(double x, double y, double w, double h, double angSt, double angExt, int closure)",void,"Sets the location, size, angular extents, and closure type of this arc to the specified double values."
Arc2D.Float,getAngleExtent(),double,Returns the angular extent of the arc.
Arc2D.Float,getAngleStart(),double,Returns the starting angle of the arc.
Arc2D.Float,getHeight(),double,Returns the height of the framing rectangle in double precision.
Arc2D.Float,getWidth(),double,Returns the width of the framing rectangle in double precision.
Arc2D.Float,getX(),double,Returns the X coordinate of the upper-left corner of the framing rectangle in double precision.
Arc2D.Float,getY(),double,Returns the Y coordinate of the upper-left corner of the framing rectangle in double precision.
Arc2D.Float,isEmpty(),boolean,Determines whether the RectangularShape is empty.
Arc2D.Float,"makeBounds(double x, double y, double w, double h)",protected Rectangle2D,Constructs a Rectangle2D of the appropriate precision to hold the parameters calculated to be the framing rectangle of this arc.
Arc2D.Float,setAngleExtent(double angExt),void,Sets the angular extent of this arc to the specified double value.
Arc2D.Float,setAngleStart(double angSt),void,Sets the starting angle of this arc to the specified double value.
Arc2D.Float,"setArc(double x, double y, double w, double h, double angSt, double angExt, int closure)",void,"Sets the location, size, angular extents, and closure type of this arc to the specified double values."
Area,add(Area rhs),void,Adds the shape of the specified Area to the shape of this Area.
Area,clone(),Object,Returns an exact copy of this Area object.
Area,"contains(double x, double y)",boolean,"Tests if the specified coordinates are inside the boundary of the Shape, as described by the definition of insideness."
Area,"contains(double x, double y, double w, double h)",boolean,Tests if the interior of the Shape entirely contains the specified rectangular area.
Area,contains(Point2D p),boolean,"Tests if a specified Point2D is inside the boundary of the Shape, as described by the definition of insideness."
Area,contains(Rectangle2D r),boolean,Tests if the interior of the Shape entirely contains the specified Rectangle2D.
Area,createTransformedArea(AffineTransform t),Area,Creates a new Area object that contains the same geometry as this Area transformed by the specified AffineTransform.
Area,equals(Area other),boolean,Tests whether the geometries of the two Area objects are equal.
Area,exclusiveOr(Area rhs),void,"Sets the shape of this Area to be the combined area of its current shape and the shape of the specified Area, minus their intersection."
Area,getBounds(),Rectangle,Returns a bounding Rectangle that completely encloses this Area.
Area,getBounds2D(),Rectangle2D,Returns a high precision bounding Rectangle2D that completely encloses this Area.
Area,getPathIterator(AffineTransform at),PathIterator,Creates a PathIterator for the outline of this Area object.
Area,"getPathIterator(AffineTransform at, double flatness)",PathIterator,Creates a PathIterator for the flattened outline of this Area object.
Area,intersect(Area rhs),void,Sets the shape of this Area to the intersection of its current shape and the shape of the specified Area.
Area,"intersects(double x, double y, double w, double h)",boolean,Tests if the interior of the Shape intersects the interior of a specified rectangular area.
Area,intersects(Rectangle2D r),boolean,Tests if the interior of the Shape intersects the interior of a specified Rectangle2D.
Area,isEmpty(),boolean,Tests whether this Area object encloses any area.
Area,isPolygonal(),boolean,Tests whether this Area consists entirely of straight edged polygonal geometry.
Area,isRectangular(),boolean,Tests whether this Area is rectangular in shape.
Area,isSingular(),boolean,Tests whether this Area is comprised of a single closed subpath.
Area,reset(),void,Removes all of the geometry from this Area and restores it to an empty area.
Area,subtract(Area rhs),void,Subtracts the shape of the specified Area from the shape of this Area.
Area,transform(AffineTransform t),void,Transforms the geometry of this Area using the specified AffineTransform.
CubicCurve2D,clone(),Object,Creates a new object of the same class as this object.
CubicCurve2D,"contains(double x, double y)",boolean,"Tests if the specified coordinates are inside the boundary of the Shape, as described by the definition of insideness."
CubicCurve2D,"contains(double x, double y, double w, double h)",boolean,Tests if the interior of the Shape entirely contains the specified rectangular area.
CubicCurve2D,contains(Point2D p),boolean,"Tests if a specified Point2D is inside the boundary of the Shape, as described by the definition of insideness."
CubicCurve2D,contains(Rectangle2D r),boolean,Tests if the interior of the Shape entirely contains the specified Rectangle2D.
CubicCurve2D,getBounds(),Rectangle,Returns an integer Rectangle that completely encloses the Shape.
CubicCurve2D,getCtrlP1(),abstract Point2D,Returns the first control point.
CubicCurve2D,getCtrlP2(),abstract Point2D,Returns the second control point.
CubicCurve2D,getCtrlX1(),abstract double,Returns the X coordinate of the first control point in double precision.
CubicCurve2D,getCtrlX2(),abstract double,Returns the X coordinate of the second control point in double precision.
CubicCurve2D,getCtrlY1(),abstract double,Returns the Y coordinate of the first control point in double precision.
CubicCurve2D,getCtrlY2(),abstract double,Returns the Y coordinate of the second control point in double precision.
CubicCurve2D,getFlatness(),double,Returns the flatness of this curve.
CubicCurve2D,"getFlatness(double[] coords, int offset)",static double,Returns the flatness of the cubic curve specified by the control points stored in the indicated array at the indicated index.
CubicCurve2D,"getFlatness(double x1, double y1, double ctrlx1, double ctrly1, double ctrlx2, double ctrly2, double x2, double y2)",static double,Returns the flatness of the cubic curve specified by the indicated control points.
CubicCurve2D,getFlatnessSq(),double,Returns the square of the flatness of this curve.
CubicCurve2D,"getFlatnessSq(double[] coords, int offset)",static double,Returns the square of the flatness of the cubic curve specified by the control points stored in the indicated array at the indicated index.
CubicCurve2D,"getFlatnessSq(double x1, double y1, double ctrlx1, double ctrly1, double ctrlx2, double ctrly2, double x2, double y2)",static double,Returns the square of the flatness of the cubic curve specified by the indicated control points.
CubicCurve2D,getP1(),abstract Point2D,Returns the start point.
CubicCurve2D,getP2(),abstract Point2D,Returns the end point.
CubicCurve2D,getPathIterator(AffineTransform at),PathIterator,Returns an iteration object that defines the boundary of the shape.
CubicCurve2D,"getPathIterator(AffineTransform at, double flatness)",PathIterator,Return an iteration object that defines the boundary of the flattened shape.
CubicCurve2D,getX1(),abstract double,Returns the X coordinate of the start point in double precision.
CubicCurve2D,getX2(),abstract double,Returns the X coordinate of the end point in double precision.
CubicCurve2D,getY1(),abstract double,Returns the Y coordinate of the start point in double precision.
CubicCurve2D,getY2(),abstract double,Returns the Y coordinate of the end point in double precision.
CubicCurve2D,"intersects(double x, double y, double w, double h)",boolean,Tests if the interior of the Shape intersects the interior of a specified rectangular area.
CubicCurve2D,intersects(Rectangle2D r),boolean,Tests if the interior of the Shape intersects the interior of a specified Rectangle2D.
CubicCurve2D,setCurve(CubicCurve2D c),void,Sets the location of the end points and control points of this curve to the same as those in the specified CubicCurve2D.
CubicCurve2D,"setCurve(double[] coords, int offset)",void,Sets the location of the end points and control points of this curve to the double coordinates at the specified offset in the specified array.
CubicCurve2D,"setCurve(double x1, double y1, double ctrlx1, double ctrly1, double ctrlx2, double ctrly2, double x2, double y2)",abstract void,Sets the location of the end points and control points of this curve to the specified double coordinates.
CubicCurve2D,"setCurve(Point2D[] pts, int offset)",void,Sets the location of the end points and control points of this curve to the coordinates of the Point2D objects at the specified offset in the specified array.
CubicCurve2D,"setCurve(Point2D p1, Point2D cp1, Point2D cp2, Point2D p2)",void,Sets the location of the end points and control points of this curve to the specified Point2D coordinates.
CubicCurve2D,solveCubic(double[] eqn),static int,"Solves the cubic whose coefficients are in the eqn array and places the non-complex roots back into the same array, returning the number of roots."
CubicCurve2D,"solveCubic(double[] eqn, double[] res)",static int,"Solve the cubic whose coefficients are in the eqn array and place the non-complex roots into the res array, returning the number of roots."
CubicCurve2D,"subdivide(CubicCurve2D left, CubicCurve2D right)",void,Subdivides this cubic curve and stores the resulting two subdivided curves into the left and right curve parameters.
CubicCurve2D,"subdivide(CubicCurve2D src, CubicCurve2D left, CubicCurve2D right)",static void,Subdivides the cubic curve specified by the src parameter and stores the resulting two subdivided curves into the left and right curve parameters.
CubicCurve2D,"subdivide(double[] src, int srcoff, double[] left, int leftoff, double[] right, int rightoff)",static void,Subdivides the cubic curve specified by the coordinates stored in the src array at indices srcoff through (srcoff + 7) and stores the resulting two subdivided curves into the two result arrays at the corresponding indices.
CubicCurve2D.Double,getBounds2D(),Rectangle2D,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.
CubicCurve2D.Double,getCtrlP1(),Point2D,Returns the first control point.
CubicCurve2D.Double,getCtrlP2(),Point2D,Returns the second control point.
CubicCurve2D.Double,getCtrlX1(),double,Returns the X coordinate of the first control point in double precision.
CubicCurve2D.Double,getCtrlX2(),double,Returns the X coordinate of the second control point in double precision.
CubicCurve2D.Double,getCtrlY1(),double,Returns the Y coordinate of the first control point in double precision.
CubicCurve2D.Double,getCtrlY2(),double,Returns the Y coordinate of the second control point in double precision.
CubicCurve2D.Double,getP1(),Point2D,Returns the start point.
CubicCurve2D.Double,getP2(),Point2D,Returns the end point.
CubicCurve2D.Double,getX1(),double,Returns the X coordinate of the start point in double precision.
CubicCurve2D.Double,getX2(),double,Returns the X coordinate of the end point in double precision.
CubicCurve2D.Double,getY1(),double,Returns the Y coordinate of the start point in double precision.
CubicCurve2D.Double,getY2(),double,Returns the Y coordinate of the end point in double precision.
CubicCurve2D.Double,"setCurve(double x1, double y1, double ctrlx1, double ctrly1, double ctrlx2, double ctrly2, double x2, double y2)",void,Sets the location of the end points and control points of this curve to the specified double coordinates.
CubicCurve2D.Float,getBounds2D(),Rectangle2D,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.
CubicCurve2D.Float,getCtrlP1(),Point2D,Returns the first control point.
CubicCurve2D.Float,getCtrlP2(),Point2D,Returns the second control point.
CubicCurve2D.Float,getCtrlX1(),double,Returns the X coordinate of the first control point in double precision.
CubicCurve2D.Float,getCtrlX2(),double,Returns the X coordinate of the second control point in double precision.
CubicCurve2D.Float,getCtrlY1(),double,Returns the Y coordinate of the first control point in double precision.
CubicCurve2D.Float,getCtrlY2(),double,Returns the Y coordinate of the second control point in double precision.
CubicCurve2D.Float,getP1(),Point2D,Returns the start point.
CubicCurve2D.Float,getP2(),Point2D,Returns the end point.
CubicCurve2D.Float,getX1(),double,Returns the X coordinate of the start point in double precision.
CubicCurve2D.Float,getX2(),double,Returns the X coordinate of the end point in double precision.
CubicCurve2D.Float,getY1(),double,Returns the Y coordinate of the start point in double precision.
CubicCurve2D.Float,getY2(),double,Returns the Y coordinate of the end point in double precision.
CubicCurve2D.Float,"setCurve(double x1, double y1, double ctrlx1, double ctrly1, double ctrlx2, double ctrly2, double x2, double y2)",void,Sets the location of the end points and control points of this curve to the specified double coordinates.
CubicCurve2D.Float,"setCurve(float x1, float y1, float ctrlx1, float ctrly1, float ctrlx2, float ctrly2, float x2, float y2)",void,Sets the location of the end points and control points of this curve to the specified float coordinates.
Dimension2D,clone(),Object,Creates a new object of the same class as this object.
Dimension2D,getHeight(),abstract double,Returns the height of this Dimension in double precision.
Dimension2D,getWidth(),abstract double,Returns the width of this Dimension in double precision.
Dimension2D,setSize(Dimension2D d),void,Sets the size of this Dimension2D object to match the specified size.
Dimension2D,"setSize(double width, double height)",abstract void,Sets the size of this Dimension object to the specified width and height.
Ellipse2D,"contains(double x, double y)",boolean,"Tests if the specified coordinates are inside the boundary of the Shape, as described by the definition of insideness."
Ellipse2D,"contains(double x, double y, double w, double h)",boolean,Tests if the interior of the Shape entirely contains the specified rectangular area.
Ellipse2D,equals(Object obj),boolean,Determines whether or not the specified Object is equal to this Ellipse2D.
Ellipse2D,getPathIterator(AffineTransform at),PathIterator,Returns an iteration object that defines the boundary of this Ellipse2D.
Ellipse2D,hashCode(),int,Returns the hashcode for this Ellipse2D.
Ellipse2D,"intersects(double x, double y, double w, double h)",boolean,Tests if the interior of the Shape intersects the interior of a specified rectangular area.
Ellipse2D.Double,getBounds2D(),Rectangle2D,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.
Ellipse2D.Double,getHeight(),double,Returns the height of the framing rectangle in double precision.
Ellipse2D.Double,getWidth(),double,Returns the width of the framing rectangle in double precision.
Ellipse2D.Double,getX(),double,Returns the X coordinate of the upper-left corner of the framing rectangle in double precision.
Ellipse2D.Double,getY(),double,Returns the Y coordinate of the upper-left corner of the framing rectangle in double precision.
Ellipse2D.Double,isEmpty(),boolean,Determines whether the RectangularShape is empty.
Ellipse2D.Double,"setFrame(double x, double y, double w, double h)",void,Sets the location and size of the framing rectangle of this Shape to the specified rectangular values.
Ellipse2D.Float,getBounds2D(),Rectangle2D,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.
Ellipse2D.Float,getHeight(),double,Returns the height of the framing rectangle in double precision.
Ellipse2D.Float,getWidth(),double,Returns the width of the framing rectangle in double precision.
Ellipse2D.Float,getX(),double,Returns the X coordinate of the upper-left corner of the framing rectangle in double precision.
Ellipse2D.Float,getY(),double,Returns the Y coordinate of the upper-left corner of the framing rectangle in double precision.
Ellipse2D.Float,isEmpty(),boolean,Determines whether the RectangularShape is empty.
Ellipse2D.Float,"setFrame(double x, double y, double w, double h)",void,Sets the location and size of the framing rectangle of this Shape to the specified rectangular values.
Ellipse2D.Float,"setFrame(float x, float y, float w, float h)",void,Sets the location and size of the framing rectangle of this Shape to the specified rectangular values.
FlatteningPathIterator,currentSegment(double[] coords),int,Returns the coordinates and type of the current path segment in the iteration.
FlatteningPathIterator,currentSegment(float[] coords),int,Returns the coordinates and type of the current path segment in the iteration.
FlatteningPathIterator,getFlatness(),double,Returns the flatness of this iterator.
FlatteningPathIterator,getRecursionLimit(),int,Returns the recursion limit of this iterator.
FlatteningPathIterator,getWindingRule(),int,Returns the winding rule for determining the interior of the path.
FlatteningPathIterator,isDone(),boolean,Tests if the iteration is complete.
FlatteningPathIterator,next(),void,Moves the iterator to the next segment of the path forwards along the primary direction of traversal as long as there are more points in that direction.
Line2D,clone(),Object,Creates a new object of the same class as this object.
Line2D,"contains(double x, double y)",boolean,Tests if a specified coordinate is inside the boundary of this Line2D.
Line2D,"contains(double x, double y, double w, double h)",boolean,Tests if the interior of this Line2D entirely contains the specified set of rectangular coordinates.
Line2D,contains(Point2D p),boolean,Tests if a given Point2D is inside the boundary of this Line2D.
Line2D,contains(Rectangle2D r),boolean,Tests if the interior of this Line2D entirely contains the specified Rectangle2D.
Line2D,getBounds(),Rectangle,Returns an integer Rectangle that completely encloses the Shape.
Line2D,getP1(),abstract Point2D,Returns the start Point2D of this Line2D.
Line2D,getP2(),abstract Point2D,Returns the end Point2D of this Line2D.
Line2D,getPathIterator(AffineTransform at),PathIterator,Returns an iteration object that defines the boundary of this Line2D.
Line2D,"getPathIterator(AffineTransform at, double flatness)",PathIterator,Returns an iteration object that defines the boundary of this flattened Line2D.
Line2D,getX1(),abstract double,Returns the X coordinate of the start point in double precision.
Line2D,getX2(),abstract double,Returns the X coordinate of the end point in double precision.
Line2D,getY1(),abstract double,Returns the Y coordinate of the start point in double precision.
Line2D,getY2(),abstract double,Returns the Y coordinate of the end point in double precision.
Line2D,"intersects(double x, double y, double w, double h)",boolean,Tests if the interior of the Shape intersects the interior of a specified rectangular area.
Line2D,intersects(Rectangle2D r),boolean,Tests if the interior of the Shape intersects the interior of a specified Rectangle2D.
Line2D,"intersectsLine(double x1, double y1, double x2, double y2)",boolean,"Tests if the line segment from (x1,y1) to (x2,y2) intersects this line segment."
Line2D,intersectsLine(Line2D l),boolean,Tests if the specified line segment intersects this line segment.
Line2D,"linesIntersect(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4)",static boolean,"Tests if the line segment from (x1,y1) to (x2,y2) intersects the line segment from (x3,y3) to (x4,y4)."
Line2D,"ptLineDist(double px, double py)",double,Returns the distance from a point to this line.
Line2D,"ptLineDist(double x1, double y1, double x2, double y2, double px, double py)",static double,Returns the distance from a point to a line.
Line2D,ptLineDist(Point2D pt),double,Returns the distance from a Point2D to this line.
Line2D,"ptLineDistSq(double px, double py)",double,Returns the square of the distance from a point to this line.
Line2D,"ptLineDistSq(double x1, double y1, double x2, double y2, double px, double py)",static double,Returns the square of the distance from a point to a line.
Line2D,ptLineDistSq(Point2D pt),double,Returns the square of the distance from a specified Point2D to this line.
Line2D,"ptSegDist(double px, double py)",double,Returns the distance from a point to this line segment.
Line2D,"ptSegDist(double x1, double y1, double x2, double y2, double px, double py)",static double,Returns the distance from a point to a line segment.
Line2D,ptSegDist(Point2D pt),double,Returns the distance from a Point2D to this line segment.
Line2D,"ptSegDistSq(double px, double py)",double,Returns the square of the distance from a point to this line segment.
Line2D,"ptSegDistSq(double x1, double y1, double x2, double y2, double px, double py)",static double,Returns the square of the distance from a point to a line segment.
Line2D,ptSegDistSq(Point2D pt),double,Returns the square of the distance from a Point2D to this line segment.
Line2D,"relativeCCW(double px, double py)",int,"Returns an indicator of where the specified point (px,py) lies with respect to this line segment."
Line2D,"relativeCCW(double x1, double y1, double x2, double y2, double px, double py)",static int,"Returns an indicator of where the specified point (px,py) lies with respect to the line segment from (x1,y1) to (x2,y2)."
Line2D,relativeCCW(Point2D p),int,Returns an indicator of where the specified Point2D lies with respect to this line segment.
Line2D,"setLine(double x1, double y1, double x2, double y2)",abstract void,Sets the location of the end points of this Line2D to the specified double coordinates.
Line2D,setLine(Line2D l),void,Sets the location of the end points of this Line2D to the same as those end points of the specified Line2D.
Line2D,"setLine(Point2D p1, Point2D p2)",void,Sets the location of the end points of this Line2D to the specified Point2D coordinates.
Line2D.Double,getBounds2D(),Rectangle2D,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.
Line2D.Double,getP1(),Point2D,Returns the start Point2D of this Line2D.
Line2D.Double,getP2(),Point2D,Returns the end Point2D of this Line2D.
Line2D.Double,getX1(),double,Returns the X coordinate of the start point in double precision.
Line2D.Double,getX2(),double,Returns the X coordinate of the end point in double precision.
Line2D.Double,getY1(),double,Returns the Y coordinate of the start point in double precision.
Line2D.Double,getY2(),double,Returns the Y coordinate of the end point in double precision.
Line2D.Double,"setLine(double x1, double y1, double x2, double y2)",void,Sets the location of the end points of this Line2D to the specified double coordinates.
Line2D.Float,getBounds2D(),Rectangle2D,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.
Line2D.Float,getP1(),Point2D,Returns the start Point2D of this Line2D.
Line2D.Float,getP2(),Point2D,Returns the end Point2D of this Line2D.
Line2D.Float,getX1(),double,Returns the X coordinate of the start point in double precision.
Line2D.Float,getX2(),double,Returns the X coordinate of the end point in double precision.
Line2D.Float,getY1(),double,Returns the Y coordinate of the start point in double precision.
Line2D.Float,getY2(),double,Returns the Y coordinate of the end point in double precision.
Line2D.Float,"setLine(double x1, double y1, double x2, double y2)",void,Sets the location of the end points of this Line2D to the specified double coordinates.
Line2D.Float,"setLine(float x1, float y1, float x2, float y2)",void,Sets the location of the end points of this Line2D to the specified float coordinates.
Path2D,"append(PathIterator pi, boolean connect)",abstract void,"Appends the geometry of the specified PathIterator object to the path, possibly connecting the new geometry to the existing path segments with a line segment."
Path2D,"append(Shape s, boolean connect)",void,"Appends the geometry of the specified Shape object to the path, possibly connecting the new geometry to the existing path segments with a line segment."
Path2D,clone(),abstract Object,Creates a new object of the same class as this object.
Path2D,closePath(),void,Closes the current subpath by drawing a straight line back to the coordinates of the last moveTo.
Path2D,"contains(double x, double y)",boolean,"Tests if the specified coordinates are inside the boundary of the Shape, as described by the definition of insideness."
Path2D,"contains(double x, double y, double w, double h)",boolean,Tests if the interior of the Shape entirely contains the specified rectangular area.
Path2D,"contains(PathIterator pi, double x, double y)",static boolean,Tests if the specified coordinates are inside the closed boundary of the specified PathIterator.
Path2D,"contains(PathIterator pi, double x, double y, double w, double h)",static boolean,Tests if the specified rectangular area is entirely inside the closed boundary of the specified PathIterator.
Path2D,"contains(PathIterator pi, Point2D p)",static boolean,Tests if the specified Point2D is inside the closed boundary of the specified PathIterator.
Path2D,"contains(PathIterator pi, Rectangle2D r)",static boolean,Tests if the specified Rectangle2D is entirely inside the closed boundary of the specified PathIterator.
Path2D,contains(Point2D p),boolean,"Tests if a specified Point2D is inside the boundary of the Shape, as described by the definition of insideness."
Path2D,contains(Rectangle2D r),boolean,Tests if the interior of the Shape entirely contains the specified Rectangle2D.
Path2D,createTransformedShape(AffineTransform at),Shape,Returns a new Shape representing a transformed version of this Path2D.
Path2D,"curveTo(double x1, double y1, double x2, double y2, double x3, double y3)",abstract void,"Adds a curved segment, defined by three new points, to the path by drawing a Bézier curve that intersects both the current coordinates and the specified coordinates (x3,y3), using the specified points (x1,y1) and (x2,y2) as Bézier control points."
Path2D,getBounds(),Rectangle,Returns an integer Rectangle that completely encloses the Shape.
Path2D,getCurrentPoint(),Point2D,Returns the coordinates most recently added to the end of the path as a Point2D object.
Path2D,"getPathIterator(AffineTransform at, double flatness)",PathIterator,Returns an iterator object that iterates along the Shape boundary and provides access to a flattened view of the Shape outline geometry.
Path2D,getWindingRule(),int,Returns the fill style winding rule.
Path2D,"intersects(double x, double y, double w, double h)",boolean,Tests if the interior of the Shape intersects the interior of a specified rectangular area.
Path2D,"intersects(PathIterator pi, double x, double y, double w, double h)",static boolean,Tests if the interior of the specified PathIterator intersects the interior of a specified set of rectangular coordinates.
Path2D,"intersects(PathIterator pi, Rectangle2D r)",static boolean,Tests if the interior of the specified PathIterator intersects the interior of a specified Rectangle2D.
Path2D,intersects(Rectangle2D r),boolean,Tests if the interior of the Shape intersects the interior of a specified Rectangle2D.
Path2D,"lineTo(double x, double y)",abstract void,Adds a point to the path by drawing a straight line from the current coordinates to the new specified coordinates specified in double precision.
Path2D,"moveTo(double x, double y)",abstract void,Adds a point to the path by moving to the specified coordinates specified in double precision.
Path2D,"quadTo(double x1, double y1, double x2, double y2)",abstract void,"Adds a curved segment, defined by two new points, to the path by drawing a Quadratic curve that intersects both the current coordinates and the specified coordinates (x2,y2), using the specified point (x1,y1) as a quadratic parametric control point."
Path2D,reset(),void,Resets the path to empty.
Path2D,setWindingRule(int rule),void,Sets the winding rule for this path to the specified value.
Path2D,transform(AffineTransform at),abstract void,Transforms the geometry of this path using the specified AffineTransform.
Path2D.Double,"append(PathIterator pi, boolean connect)",void,"Appends the geometry of the specified PathIterator object to the path, possibly connecting the new geometry to the existing path segments with a line segment."
Path2D.Double,clone(),Object,Creates a new object of the same class as this object.
Path2D.Double,"curveTo(double x1, double y1, double x2, double y2, double x3, double y3)",void,"Adds a curved segment, defined by three new points, to the path by drawing a Bézier curve that intersects both the current coordinates and the specified coordinates (x3,y3), using the specified points (x1,y1) and (x2,y2) as Bézier control points."
Path2D.Double,getBounds2D(),Rectangle2D,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.
Path2D.Double,getPathIterator(AffineTransform at),PathIterator,Returns an iterator object that iterates along the Shape boundary and provides access to the geometry of the Shape outline.
Path2D.Double,"lineTo(double x, double y)",void,Adds a point to the path by drawing a straight line from the current coordinates to the new specified coordinates specified in double precision.
Path2D.Double,"moveTo(double x, double y)",void,Adds a point to the path by moving to the specified coordinates specified in double precision.
Path2D.Double,"quadTo(double x1, double y1, double x2, double y2)",void,"Adds a curved segment, defined by two new points, to the path by drawing a Quadratic curve that intersects both the current coordinates and the specified coordinates (x2,y2), using the specified point (x1,y1) as a quadratic parametric control point."
Path2D.Double,transform(AffineTransform at),void,Transforms the geometry of this path using the specified AffineTransform.
Path2D.Float,"append(PathIterator pi, boolean connect)",void,"Appends the geometry of the specified PathIterator object to the path, possibly connecting the new geometry to the existing path segments with a line segment."
Path2D.Float,clone(),Object,Creates a new object of the same class as this object.
Path2D.Float,"curveTo(double x1, double y1, double x2, double y2, double x3, double y3)",void,"Adds a curved segment, defined by three new points, to the path by drawing a Bézier curve that intersects both the current coordinates and the specified coordinates (x3,y3), using the specified points (x1,y1) and (x2,y2) as Bézier control points."
Path2D.Float,"curveTo(float x1, float y1, float x2, float y2, float x3, float y3)",void,"Adds a curved segment, defined by three new points, to the path by drawing a Bézier curve that intersects both the current coordinates and the specified coordinates (x3,y3), using the specified points (x1,y1) and (x2,y2) as Bézier control points."
Path2D.Float,getBounds2D(),Rectangle2D,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.
Path2D.Float,getPathIterator(AffineTransform at),PathIterator,Returns an iterator object that iterates along the Shape boundary and provides access to the geometry of the Shape outline.
Path2D.Float,"lineTo(double x, double y)",void,Adds a point to the path by drawing a straight line from the current coordinates to the new specified coordinates specified in double precision.
Path2D.Float,"lineTo(float x, float y)",void,Adds a point to the path by drawing a straight line from the current coordinates to the new specified coordinates specified in float precision.
Path2D.Float,"moveTo(double x, double y)",void,Adds a point to the path by moving to the specified coordinates specified in double precision.
Path2D.Float,"moveTo(float x, float y)",void,Adds a point to the path by moving to the specified coordinates specified in float precision.
Path2D.Float,"quadTo(double x1, double y1, double x2, double y2)",void,"Adds a curved segment, defined by two new points, to the path by drawing a Quadratic curve that intersects both the current coordinates and the specified coordinates (x2,y2), using the specified point (x1,y1) as a quadratic parametric control point."
Path2D.Float,"quadTo(float x1, float y1, float x2, float y2)",void,"Adds a curved segment, defined by two new points, to the path by drawing a Quadratic curve that intersects both the current coordinates and the specified coordinates (x2,y2), using the specified point (x1,y1) as a quadratic parametric control point."
Path2D.Float,transform(AffineTransform at),void,Transforms the geometry of this path using the specified AffineTransform.
Point2D,clone(),Object,Creates a new object of the same class and with the same contents as this object.
Point2D,"distance(double px, double py)",double,Returns the distance from this Point2D to a specified point.
Point2D,"distance(double x1, double y1, double x2, double y2)",static double,Returns the distance between two points.
Point2D,distance(Point2D pt),double,Returns the distance from this Point2D to a specified Point2D.
Point2D,"distanceSq(double px, double py)",double,Returns the square of the distance from this Point2D to a specified point.
Point2D,"distanceSq(double x1, double y1, double x2, double y2)",static double,Returns the square of the distance between two points.
Point2D,distanceSq(Point2D pt),double,Returns the square of the distance from this Point2D to a specified Point2D.
Point2D,equals(Object obj),boolean,Determines whether or not two points are equal.
Point2D,getX(),abstract double,Returns the X coordinate of this Point2D in double precision.
Point2D,getY(),abstract double,Returns the Y coordinate of this Point2D in double precision.
Point2D,hashCode(),int,Returns the hashcode for this Point2D.
Point2D,"setLocation(double x, double y)",abstract void,Sets the location of this Point2D to the specified double coordinates.
Point2D,setLocation(Point2D p),void,Sets the location of this Point2D to the same coordinates as the specified Point2D object.
Point2D.Double,getX(),double,Returns the X coordinate of this Point2D in double precision.
Point2D.Double,getY(),double,Returns the Y coordinate of this Point2D in double precision.
Point2D.Double,"setLocation(double x, double y)",void,Sets the location of this Point2D to the specified double coordinates.
Point2D.Double,toString(),String,Returns a String that represents the value of this Point2D.
Point2D.Float,getX(),double,Returns the X coordinate of this Point2D in double precision.
Point2D.Float,getY(),double,Returns the Y coordinate of this Point2D in double precision.
Point2D.Float,"setLocation(double x, double y)",void,Sets the location of this Point2D to the specified double coordinates.
Point2D.Float,"setLocation(float x, float y)",void,Sets the location of this Point2D to the specified float coordinates.
Point2D.Float,toString(),String,Returns a String that represents the value of this Point2D.
QuadCurve2D,clone(),Object,Creates a new object of the same class and with the same contents as this object.
QuadCurve2D,"contains(double x, double y)",boolean,"Tests if the specified coordinates are inside the boundary of the Shape, as described by the definition of insideness."
QuadCurve2D,"contains(double x, double y, double w, double h)",boolean,Tests if the interior of the Shape entirely contains the specified rectangular area.
QuadCurve2D,contains(Point2D p),boolean,"Tests if a specified Point2D is inside the boundary of the Shape, as described by the definition of insideness."
QuadCurve2D,contains(Rectangle2D r),boolean,Tests if the interior of the Shape entirely contains the specified Rectangle2D.
QuadCurve2D,getBounds(),Rectangle,Returns an integer Rectangle that completely encloses the Shape.
QuadCurve2D,getCtrlPt(),abstract Point2D,Returns the control point.
QuadCurve2D,getCtrlX(),abstract double,Returns the X coordinate of the control point in double precision.
QuadCurve2D,getCtrlY(),abstract double,Returns the Y coordinate of the control point in double precision.
QuadCurve2D,getFlatness(),double,"Returns the flatness, or maximum distance of a control point from the line connecting the end points, of this QuadCurve2D."
QuadCurve2D,"getFlatness(double[] coords, int offset)",static double,"Returns the flatness, or maximum distance of a control point from the line connecting the end points, of the quadratic curve specified by the control points stored in the indicated array at the indicated index."
QuadCurve2D,"getFlatness(double x1, double y1, double ctrlx, double ctrly, double x2, double y2)",static double,"Returns the flatness, or maximum distance of a control point from the line connecting the end points, of the quadratic curve specified by the indicated control points."
QuadCurve2D,getFlatnessSq(),double,"Returns the square of the flatness, or maximum distance of a control point from the line connecting the end points, of this QuadCurve2D."
QuadCurve2D,"getFlatnessSq(double[] coords, int offset)",static double,"Returns the square of the flatness, or maximum distance of a control point from the line connecting the end points, of the quadratic curve specified by the control points stored in the indicated array at the indicated index."
QuadCurve2D,"getFlatnessSq(double x1, double y1, double ctrlx, double ctrly, double x2, double y2)",static double,"Returns the square of the flatness, or maximum distance of a control point from the line connecting the end points, of the quadratic curve specified by the indicated control points."
QuadCurve2D,getP1(),abstract Point2D,Returns the start point.
QuadCurve2D,getP2(),abstract Point2D,Returns the end point.
QuadCurve2D,getPathIterator(AffineTransform at),PathIterator,Returns an iteration object that defines the boundary of the shape of this QuadCurve2D.
QuadCurve2D,"getPathIterator(AffineTransform at, double flatness)",PathIterator,Returns an iteration object that defines the boundary of the flattened shape of this QuadCurve2D.
QuadCurve2D,getX1(),abstract double,Returns the X coordinate of the start point in double in precision.
QuadCurve2D,getX2(),abstract double,Returns the X coordinate of the end point in double precision.
QuadCurve2D,getY1(),abstract double,Returns the Y coordinate of the start point in double precision.
QuadCurve2D,getY2(),abstract double,Returns the Y coordinate of the end point in double precision.
QuadCurve2D,"intersects(double x, double y, double w, double h)",boolean,Tests if the interior of the Shape intersects the interior of a specified rectangular area.
QuadCurve2D,intersects(Rectangle2D r),boolean,Tests if the interior of the Shape intersects the interior of a specified Rectangle2D.
QuadCurve2D,"setCurve(double[] coords, int offset)",void,Sets the location of the end points and control points of this QuadCurve2D to the double coordinates at the specified offset in the specified array.
QuadCurve2D,"setCurve(double x1, double y1, double ctrlx, double ctrly, double x2, double y2)",abstract void,Sets the location of the end points and control point of this curve to the specified double coordinates.
QuadCurve2D,"setCurve(Point2D[] pts, int offset)",void,Sets the location of the end points and control points of this QuadCurve2D to the coordinates of the Point2D objects at the specified offset in the specified array.
QuadCurve2D,"setCurve(Point2D p1, Point2D cp, Point2D p2)",void,Sets the location of the end points and control point of this QuadCurve2D to the specified Point2D coordinates.
QuadCurve2D,setCurve(QuadCurve2D c),void,Sets the location of the end points and control point of this QuadCurve2D to the same as those in the specified QuadCurve2D.
QuadCurve2D,solveQuadratic(double[] eqn),static int,"Solves the quadratic whose coefficients are in the eqn array and places the non-complex roots back into the same array, returning the number of roots."
QuadCurve2D,"solveQuadratic(double[] eqn, double[] res)",static int,"Solves the quadratic whose coefficients are in the eqn array and places the non-complex roots into the res array, returning the number of roots."
QuadCurve2D,"subdivide(double[] src, int srcoff, double[] left, int leftoff, double[] right, int rightoff)",static void,Subdivides the quadratic curve specified by the coordinates stored in the src array at indices srcoff through srcoff + 5 and stores the resulting two subdivided curves into the two result arrays at the corresponding indices.
QuadCurve2D,"subdivide(QuadCurve2D left, QuadCurve2D right)",void,Subdivides this QuadCurve2D and stores the resulting two subdivided curves into the left and right curve parameters.
QuadCurve2D,"subdivide(QuadCurve2D src, QuadCurve2D left, QuadCurve2D right)",static void,Subdivides the quadratic curve specified by the src parameter and stores the resulting two subdivided curves into the left and right curve parameters.
QuadCurve2D.Double,getBounds2D(),Rectangle2D,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.
QuadCurve2D.Double,getCtrlPt(),Point2D,Returns the control point.
QuadCurve2D.Double,getCtrlX(),double,Returns the X coordinate of the control point in double precision.
QuadCurve2D.Double,getCtrlY(),double,Returns the Y coordinate of the control point in double precision.
QuadCurve2D.Double,getP1(),Point2D,Returns the start point.
QuadCurve2D.Double,getP2(),Point2D,Returns the end point.
QuadCurve2D.Double,getX1(),double,Returns the X coordinate of the start point in double in precision.
QuadCurve2D.Double,getX2(),double,Returns the X coordinate of the end point in double precision.
QuadCurve2D.Double,getY1(),double,Returns the Y coordinate of the start point in double precision.
QuadCurve2D.Double,getY2(),double,Returns the Y coordinate of the end point in double precision.
QuadCurve2D.Double,"setCurve(double x1, double y1, double ctrlx, double ctrly, double x2, double y2)",void,Sets the location of the end points and control point of this curve to the specified double coordinates.
QuadCurve2D.Float,getBounds2D(),Rectangle2D,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.
QuadCurve2D.Float,getCtrlPt(),Point2D,Returns the control point.
QuadCurve2D.Float,getCtrlX(),double,Returns the X coordinate of the control point in double precision.
QuadCurve2D.Float,getCtrlY(),double,Returns the Y coordinate of the control point in double precision.
QuadCurve2D.Float,getP1(),Point2D,Returns the start point.
QuadCurve2D.Float,getP2(),Point2D,Returns the end point.
QuadCurve2D.Float,getX1(),double,Returns the X coordinate of the start point in double in precision.
QuadCurve2D.Float,getX2(),double,Returns the X coordinate of the end point in double precision.
QuadCurve2D.Float,getY1(),double,Returns the Y coordinate of the start point in double precision.
QuadCurve2D.Float,getY2(),double,Returns the Y coordinate of the end point in double precision.
QuadCurve2D.Float,"setCurve(double x1, double y1, double ctrlx, double ctrly, double x2, double y2)",void,Sets the location of the end points and control point of this curve to the specified double coordinates.
QuadCurve2D.Float,"setCurve(float x1, float y1, float ctrlx, float ctrly, float x2, float y2)",void,Sets the location of the end points and control point of this curve to the specified float coordinates.
Rectangle2D,"add(double newx, double newy)",void,"Adds a point, specified by the double precision arguments newx and newy, to this Rectangle2D."
Rectangle2D,add(Point2D pt),void,Adds the Point2D object pt to this Rectangle2D.
Rectangle2D,add(Rectangle2D r),void,Adds a Rectangle2D object to this Rectangle2D.
Rectangle2D,"contains(double x, double y)",boolean,"Tests if the specified coordinates are inside the boundary of the Shape, as described by the definition of insideness."
Rectangle2D,"contains(double x, double y, double w, double h)",boolean,Tests if the interior of the Shape entirely contains the specified rectangular area.
Rectangle2D,createIntersection(Rectangle2D r),abstract Rectangle2D,Returns a new Rectangle2D object representing the intersection of this Rectangle2D with the specified Rectangle2D.
Rectangle2D,createUnion(Rectangle2D r),abstract Rectangle2D,Returns a new Rectangle2D object representing the union of this Rectangle2D with the specified Rectangle2D.
Rectangle2D,equals(Object obj),boolean,Determines whether or not the specified Object is equal to this Rectangle2D.
Rectangle2D,getBounds2D(),Rectangle2D,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.
Rectangle2D,getPathIterator(AffineTransform at),PathIterator,Returns an iteration object that defines the boundary of this Rectangle2D.
Rectangle2D,"getPathIterator(AffineTransform at, double flatness)",PathIterator,Returns an iteration object that defines the boundary of the flattened Rectangle2D.
Rectangle2D,hashCode(),int,Returns the hashcode for this Rectangle2D.
Rectangle2D,"intersect(Rectangle2D src1, Rectangle2D src2, Rectangle2D dest)",static void,Intersects the pair of specified source Rectangle2D objects and puts the result into the specified destination Rectangle2D object.
Rectangle2D,"intersects(double x, double y, double w, double h)",boolean,Tests if the interior of the Shape intersects the interior of a specified rectangular area.
Rectangle2D,"intersectsLine(double x1, double y1, double x2, double y2)",boolean,Tests if the specified line segment intersects the interior of this Rectangle2D.
Rectangle2D,intersectsLine(Line2D l),boolean,Tests if the specified line segment intersects the interior of this Rectangle2D.
Rectangle2D,"outcode(double x, double y)",abstract int,Determines where the specified coordinates lie with respect to this Rectangle2D.
Rectangle2D,outcode(Point2D p),int,Determines where the specified Point2D lies with respect to this Rectangle2D.
Rectangle2D,"setFrame(double x, double y, double w, double h)",void,Sets the location and size of the outer bounds of this Rectangle2D to the specified rectangular values.
Rectangle2D,"setRect(double x, double y, double w, double h)",abstract void,Sets the location and size of this Rectangle2D to the specified double values.
Rectangle2D,setRect(Rectangle2D r),void,Sets this Rectangle2D to be the same as the specified Rectangle2D.
Rectangle2D,"union(Rectangle2D src1, Rectangle2D src2, Rectangle2D dest)",static void,Unions the pair of source Rectangle2D objects and puts the result into the specified destination Rectangle2D object.
Rectangle2D.Double,createIntersection(Rectangle2D r),Rectangle2D,Returns a new Rectangle2D object representing the intersection of this Rectangle2D with the specified Rectangle2D.
Rectangle2D.Double,createUnion(Rectangle2D r),Rectangle2D,Returns a new Rectangle2D object representing the union of this Rectangle2D with the specified Rectangle2D.
Rectangle2D.Double,getBounds2D(),Rectangle2D,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.
Rectangle2D.Double,getHeight(),double,Returns the height of the framing rectangle in double precision.
Rectangle2D.Double,getWidth(),double,Returns the width of the framing rectangle in double precision.
Rectangle2D.Double,getX(),double,Returns the X coordinate of the upper-left corner of the framing rectangle in double precision.
Rectangle2D.Double,getY(),double,Returns the Y coordinate of the upper-left corner of the framing rectangle in double precision.
Rectangle2D.Double,isEmpty(),boolean,Determines whether the RectangularShape is empty.
Rectangle2D.Double,"outcode(double x, double y)",int,Determines where the specified coordinates lie with respect to this Rectangle2D.
Rectangle2D.Double,"setRect(double x, double y, double w, double h)",void,Sets the location and size of this Rectangle2D to the specified double values.
Rectangle2D.Double,setRect(Rectangle2D r),void,Sets this Rectangle2D to be the same as the specified Rectangle2D.
Rectangle2D.Double,toString(),String,Returns the String representation of this Rectangle2D.
Rectangle2D.Float,createIntersection(Rectangle2D r),Rectangle2D,Returns a new Rectangle2D object representing the intersection of this Rectangle2D with the specified Rectangle2D.
Rectangle2D.Float,createUnion(Rectangle2D r),Rectangle2D,Returns a new Rectangle2D object representing the union of this Rectangle2D with the specified Rectangle2D.
Rectangle2D.Float,getBounds2D(),Rectangle2D,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.
Rectangle2D.Float,getHeight(),double,Returns the height of the framing rectangle in double precision.
Rectangle2D.Float,getWidth(),double,Returns the width of the framing rectangle in double precision.
Rectangle2D.Float,getX(),double,Returns the X coordinate of the upper-left corner of the framing rectangle in double precision.
Rectangle2D.Float,getY(),double,Returns the Y coordinate of the upper-left corner of the framing rectangle in double precision.
Rectangle2D.Float,isEmpty(),boolean,Determines whether the RectangularShape is empty.
Rectangle2D.Float,"outcode(double x, double y)",int,Determines where the specified coordinates lie with respect to this Rectangle2D.
Rectangle2D.Float,"setRect(double x, double y, double w, double h)",void,Sets the location and size of this Rectangle2D to the specified double values.
Rectangle2D.Float,"setRect(float x, float y, float w, float h)",void,Sets the location and size of this Rectangle2D to the specified float values.
Rectangle2D.Float,setRect(Rectangle2D r),void,Sets this Rectangle2D to be the same as the specified Rectangle2D.
Rectangle2D.Float,toString(),String,Returns the String representation of this Rectangle2D.
RectangularShape,clone(),Object,Creates a new object of the same class and with the same contents as this object.
RectangularShape,contains(Point2D p),boolean,"Tests if a specified Point2D is inside the boundary of the Shape, as described by the definition of insideness."
RectangularShape,contains(Rectangle2D r),boolean,Tests if the interior of the Shape entirely contains the specified Rectangle2D.
RectangularShape,getBounds(),Rectangle,Returns an integer Rectangle that completely encloses the Shape.
RectangularShape,getCenterX(),double,Returns the X coordinate of the center of the framing rectangle of the Shape in double precision.
RectangularShape,getCenterY(),double,Returns the Y coordinate of the center of the framing rectangle of the Shape in double precision.
RectangularShape,getFrame(),Rectangle2D,Returns the framing Rectangle2D that defines the overall shape of this object.
RectangularShape,getHeight(),abstract double,Returns the height of the framing rectangle in double precision.
RectangularShape,getMaxX(),double,Returns the largest X coordinate of the framing rectangle of the Shape in double precision.
RectangularShape,getMaxY(),double,Returns the largest Y coordinate of the framing rectangle of the Shape in double precision.
RectangularShape,getMinX(),double,Returns the smallest X coordinate of the framing rectangle of the Shape in double precision.
RectangularShape,getMinY(),double,Returns the smallest Y coordinate of the framing rectangle of the Shape in double precision.
RectangularShape,"getPathIterator(AffineTransform at, double flatness)",PathIterator,Returns an iterator object that iterates along the Shape object's boundary and provides access to a flattened view of the outline of the Shape object's geometry.
RectangularShape,getWidth(),abstract double,Returns the width of the framing rectangle in double precision.
RectangularShape,getX(),abstract double,Returns the X coordinate of the upper-left corner of the framing rectangle in double precision.
RectangularShape,getY(),abstract double,Returns the Y coordinate of the upper-left corner of the framing rectangle in double precision.
RectangularShape,intersects(Rectangle2D r),boolean,Tests if the interior of the Shape intersects the interior of a specified Rectangle2D.
RectangularShape,isEmpty(),abstract boolean,Determines whether the RectangularShape is empty.
RectangularShape,"setFrame(double x, double y, double w, double h)",abstract void,Sets the location and size of the framing rectangle of this Shape to the specified rectangular values.
RectangularShape,"setFrame(Point2D loc, Dimension2D size)",void,"Sets the location and size of the framing rectangle of this Shape to the specified Point2D and Dimension2D, respectively."
RectangularShape,setFrame(Rectangle2D r),void,Sets the framing rectangle of this Shape to be the specified Rectangle2D.
RectangularShape,"setFrameFromCenter(double centerX, double centerY, double cornerX, double cornerY)",void,Sets the framing rectangle of this Shape based on the specified center point coordinates and corner point coordinates.
RectangularShape,"setFrameFromCenter(Point2D center, Point2D corner)",void,Sets the framing rectangle of this Shape based on a specified center Point2D and corner Point2D.
RectangularShape,"setFrameFromDiagonal(double x1, double y1, double x2, double y2)",void,Sets the diagonal of the framing rectangle of this Shape based on the two specified coordinates.
RectangularShape,"setFrameFromDiagonal(Point2D p1, Point2D p2)",void,Sets the diagonal of the framing rectangle of this Shape based on two specified Point2D objects.
RoundRectangle2D,"contains(double x, double y)",boolean,"Tests if the specified coordinates are inside the boundary of the Shape, as described by the definition of insideness."
RoundRectangle2D,"contains(double x, double y, double w, double h)",boolean,Tests if the interior of the Shape entirely contains the specified rectangular area.
RoundRectangle2D,equals(Object obj),boolean,Determines whether or not the specified Object is equal to this RoundRectangle2D.
RoundRectangle2D,getArcHeight(),abstract double,Gets the height of the arc that rounds off the corners.
RoundRectangle2D,getArcWidth(),abstract double,Gets the width of the arc that rounds off the corners.
RoundRectangle2D,getPathIterator(AffineTransform at),PathIterator,Returns an iteration object that defines the boundary of this RoundRectangle2D.
RoundRectangle2D,hashCode(),int,Returns the hashcode for this RoundRectangle2D.
RoundRectangle2D,"intersects(double x, double y, double w, double h)",boolean,Tests if the interior of the Shape intersects the interior of a specified rectangular area.
RoundRectangle2D,"setFrame(double x, double y, double w, double h)",void,Sets the location and size of the framing rectangle of this Shape to the specified rectangular values.
RoundRectangle2D,"setRoundRect(double x, double y, double w, double h, double arcWidth, double arcHeight)",abstract void,"Sets the location, size, and corner radii of this RoundRectangle2D to the specified double values."
RoundRectangle2D,setRoundRect(RoundRectangle2D rr),void,Sets this RoundRectangle2D to be the same as the specified RoundRectangle2D.
RoundRectangle2D.Double,getArcHeight(),double,Gets the height of the arc that rounds off the corners.
RoundRectangle2D.Double,getArcWidth(),double,Gets the width of the arc that rounds off the corners.
RoundRectangle2D.Double,getBounds2D(),Rectangle2D,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.
RoundRectangle2D.Double,getHeight(),double,Returns the height of the framing rectangle in double precision.
RoundRectangle2D.Double,getWidth(),double,Returns the width of the framing rectangle in double precision.
RoundRectangle2D.Double,getX(),double,Returns the X coordinate of the upper-left corner of the framing rectangle in double precision.
RoundRectangle2D.Double,getY(),double,Returns the Y coordinate of the upper-left corner of the framing rectangle in double precision.
RoundRectangle2D.Double,isEmpty(),boolean,Determines whether the RectangularShape is empty.
RoundRectangle2D.Double,"setRoundRect(double x, double y, double w, double h, double arcw, double arch)",void,"Sets the location, size, and corner radii of this RoundRectangle2D to the specified double values."
RoundRectangle2D.Double,setRoundRect(RoundRectangle2D rr),void,Sets this RoundRectangle2D to be the same as the specified RoundRectangle2D.
RoundRectangle2D.Float,getArcHeight(),double,Gets the height of the arc that rounds off the corners.
RoundRectangle2D.Float,getArcWidth(),double,Gets the width of the arc that rounds off the corners.
RoundRectangle2D.Float,getBounds2D(),Rectangle2D,Returns a high precision and more accurate bounding box of the Shape than the getBounds method.
RoundRectangle2D.Float,getHeight(),double,Returns the height of the framing rectangle in double precision.
RoundRectangle2D.Float,getWidth(),double,Returns the width of the framing rectangle in double precision.
RoundRectangle2D.Float,getX(),double,Returns the X coordinate of the upper-left corner of the framing rectangle in double precision.
RoundRectangle2D.Float,getY(),double,Returns the Y coordinate of the upper-left corner of the framing rectangle in double precision.
RoundRectangle2D.Float,isEmpty(),boolean,Determines whether the RectangularShape is empty.
RoundRectangle2D.Float,"setRoundRect(double x, double y, double w, double h, double arcw, double arch)",void,"Sets the location, size, and corner radii of this RoundRectangle2D to the specified double values."
RoundRectangle2D.Float,"setRoundRect(float x, float y, float w, float h, float arcw, float arch)",void,"Sets the location, size, and corner radii of this RoundRectangle2D to the specified float values."
RoundRectangle2D.Float,setRoundRect(RoundRectangle2D rr),void,Sets this RoundRectangle2D to be the same as the specified RoundRectangle2D.
