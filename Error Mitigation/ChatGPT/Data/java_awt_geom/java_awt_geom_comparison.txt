Sample: 0 AffineTransform
----------------------------------------------------------------
1. `void translate(double tx, double ty)`: This method translates the coordinate system by the specified x and y distances.
2. `void rotate(double theta)`: This method rotates the coordinate system by the specified angle in radians.
3. `void scale(double sx, double sy)`: This method scales the coordinate system by the specified factors along the x and y axes.
4. `void shear(double shx, double shy)`: This method shears the coordinate system by the specified factors.
5. `Point2D transform(Point2D ptSrc, Point2D ptDst)`: This method applies this transform to the specified point and stores the result in the second specified point.
================================================================

Sample: 1 Arc2D
----------------------------------------------------------------
1. `double getAngleExtent()`: This method returns the angular extent of the arc in degrees.
2. `double getAngleStart()`: This method returns the starting angle of the arc in degrees.
3. `double getHeight()`: This method returns the height of the framing rectangle of the arc.
4. `double getWidth()`: This method returns the width of the framing rectangle of the arc.
5. `int getArcType()`: This method returns the closure type of the arc (OPEN, CHORD, or PIE).
================================================================

Sample: 2 Arc2D.Double
----------------------------------------------------------------
1. `double getAngleExtent()`: This method returns the angular extent of the arc in degrees.
2. `double getAngleStart()`: This method returns the starting angle of the arc in degrees.
3. `double getHeight()`: This method returns the height of the framing rectangle of the arc.
4. `double getWidth()`: This method returns the width of the framing rectangle of the arc.
5. `void setFrame(double x, double y, double w, double h)`: This method sets the location, size, and angular extents of the arc.
================================================================

Sample: 3 Arc2D.Float
----------------------------------------------------------------
1. `double getAngleExtent()`: This method returns the angular extent of the arc in degrees.
2. `double getAngleStart()`: This method returns the starting angle of the arc in degrees.
3. `Point2D getEndPoint()`: This method returns the end point of the arc.
4. `Point2D getStartPoint()`: This method returns the start point of the arc.
5. `void setAngleExtent(double extent)`: This method sets the angular extent of the arc in degrees.
================================================================

Sample: 4 Area
----------------------------------------------------------------
1. `void add(Area rhs)`: This method adds the shape of the specified Area to the shape of this Area.
2. `void subtract(Area rhs)`: This method subtracts the shape of the specified Area from the shape of this Area.
3. `void intersect(Area rhs)`: This method sets the shape of this Area to the intersection of its current shape and the shape of the specified Area.
4. `void exclusiveOr(Area rhs)`: This method sets the shape of this Area to the exclusive OR of its current shape and the shape of the specified Area.
5. `Rectangle2D getBounds2D()`: This method returns a high precision bounding box of the Area.
================================================================

Sample: 5 CubicCurve2D
----------------------------------------------------------------
1. `double getX1()`: Returns the X coordinate of the start point of the cubic curve.
2. `double getY1()`: Returns the Y coordinate of the start point of the cubic curve.
3. `double getCtrlX1()`: Returns the X coordinate of the first control point of the cubic curve.
4. `double getCtrlY1()`: Returns the Y coordinate of the first control point of the cubic curve.
5. `double getCtrlX2()`: Returns the X coordinate of the second control point of the cubic curve.
================================================================

Sample: 6 CubicCurve2D.Double
----------------------------------------------------------------
1. `double getX1()`: Returns the X coordinate of the start point of the cubic curve.
2. `double getY1()`: Returns the Y coordinate of the start point of the cubic curve.
3. `double getCtrlX1()`: Returns the X coordinate of the first control point of the cubic curve.
4. `double getCtrlY1()`: Returns the Y coordinate of the first control point of the cubic curve.
5. `double getCtrlX2()`: Returns the X coordinate of the second control point of the cubic curve.
================================================================

Sample: 7 CubicCurve2D.Float
----------------------------------------------------------------
1. `double getX1()`: Returns the X coordinate of the start point of the cubic curve.
2. `double getY1()`: Returns the Y coordinate of the start point of the cubic curve.
3. `double getCtrlX1()`: Returns the X coordinate of the first control point of the cubic curve.
4. `double getCtrlY1()`: Returns the Y coordinate of the first control point of the cubic curve.
5. `double getCtrlX2()`: Returns the X coordinate of the second control point of the cubic curve.
================================================================

Sample: 8 Dimension2D
----------------------------------------------------------------
1. `double getWidth()`: This method returns the width dimension of the Dimension2D object.
2. `double getHeight()`: This method returns the height dimension of the Dimension2D object.
3. `void setSize(double width, double height)`: This method sets the size of the Dimension2D object to the specified width and height dimensions.
4. `void setSize(Dimension2D d)`: This method sets the size of the Dimension2D object to the dimensions of the specified Dimension2D object.
5. `void setSize(double width, double height)`: This method sets the size of the Dimension2D object to the specified width and height dimensions.
================================================================

Sample: 9 Ellipse2D
----------------------------------------------------------------
1. `double getHeight()`: This method returns the height of the framing rectangle of the ellipse.
2. `double getWidth()`: This method returns the width of the framing rectangle of the ellipse.
3. `double getX()`: This method returns the x-coordinate of the upper-left corner of the framing rectangle of the ellipse.
4. `double getY()`: This method returns the y-coordinate of the upper-left corner of the framing rectangle of the ellipse.
5. `void setFrame(double x, double y, double w, double h)`: This method sets the framing rectangle of the ellipse to the specified coordinates and dimensions.
================================================================

Sample: 10 Ellipse2D.Double
----------------------------------------------------------------
1. `double getX()`: This method returns the X coordinate of the upper-left corner of the framing rectangle of the ellipse.
2. `double getY()`: This method returns the Y coordinate of the upper-left corner of the framing rectangle of the ellipse.
3. `double getWidth()`: This method returns the width of the framing rectangle of the ellipse.
4. `double getHeight()`: This method returns the height of the framing rectangle of the ellipse.
5. `Rectangle2D getBounds2D()`: This method returns the framing rectangle of the ellipse as a Rectangle2D object.
================================================================

Sample: 11 Ellipse2D.Float
----------------------------------------------------------------
1. `double getHeight()`: This method returns the height of the ellipse.
2. `double getWidth()`: This method returns the width of the ellipse.
3. `double getX()`: This method returns the x-coordinate of the upper-left corner of the framing rectangle of the ellipse.
4. `double getY()`: This method returns the y-coordinate of the upper-left corner of the framing rectangle of the ellipse.
5. `void setFrame(double x, double y, double w, double h)`: This method sets the location and size of the framing rectangle of the ellipse.
================================================================

Sample: 12 FlatteningPathIterator
----------------------------------------------------------------
1. `int getWindingRule()`: This method returns the winding rule for determining the interior of the path.
2. `boolean isDone()`: This method returns true if the iteration has no more segments.
3. `void next()`: This method moves the iterator to the next segment of the path.
4. `int currentSegment(float[] coords)`: This method retrieves the coordinates and type of the current path segment into the specified array.
5. `int currentSegment(double[] coords)`: This method retrieves the coordinates and type of the current path segment into the specified array.
================================================================

Sample: 13 GeneralPath
----------------------------------------------------------------
1. `void moveTo(float x, float y)`: This method moves the current point to the specified coordinates.
2. `void lineTo(float x, float y)`: This method adds a straight line segment to the path from the current point to the specified coordinates.
3. `void quadTo(float x1, float y1, float x2, float y2)`: This method adds a quadratic curve segment to the path from the current point using the specified control point and end point.
4. `void curveTo(float x1, float y1, float x2, float y2, float x3, float y3)`: This method adds a cubic curve segment to the path from the current point using the specified control points and end point.
5. `void closePath()`: This method closes the current subpath by drawing a straight line back to the starting point.
================================================================

Sample: 14 Line2D
----------------------------------------------------------------
1. `double getX1()`: This method returns the X coordinate of the starting point of the line segment.
2. `double getY1()`: This method returns the Y coordinate of the starting point of the line segment.
3. `double getX2()`: This method returns the X coordinate of the ending point of the line segment.
4. `double getY2()`: This method returns the Y coordinate of the ending point of the line segment.
5. `void setLine(double x1, double y1, double x2, double y2)`: This method sets the line segment to the specified coordinates.
================================================================

Sample: 15 Line2D.Double
----------------------------------------------------------------
1. `double getX1()`: This method returns the X coordinate of the starting point of the line segment.
2. `double getY1()`: This method returns the Y coordinate of the starting point of the line segment.
3. `double getX2()`: This method returns the X coordinate of the ending point of the line segment.
4. `double getY2()`: This method returns the Y coordinate of the ending point of the line segment.
5. `void setLine(double x1, double y1, double x2, double y2)`: This method sets the line segment to the specified coordinates.
================================================================

Sample: 16 Line2D.Float
----------------------------------------------------------------
1. `double getX1()`: Returns the X coordinate of the starting point of the line segment.
2. `double getY1()`: Returns the Y coordinate of the starting point of the line segment.
3. `double getX2()`: Returns the X coordinate of the ending point of the line segment.
4. `double getY2()`: Returns the Y coordinate of the ending point of the line segment.
5. `void setLine(double x1, double y1, double x2, double y2)`: Sets the line segment to the specified coordinates.
================================================================

Sample: 17 Path2D
----------------------------------------------------------------
1. `void moveTo(double x, double y)`: This method moves the current point to the specified coordinates.
2. `void lineTo(double x, double y)`: This method adds a straight line segment to the path from the current point to the specified coordinates.
3. `void quadTo(double x1, double y1, double x2, double y2)`: This method adds a quadratic curve segment to the path from the current point using the specified control point and end point.
4. `void curveTo(double x1, double y1, double x2, double y2, double x3, double y3)`: This method adds a cubic curve segment to the path from the current point using the specified control points and end point.
5. `void closePath()`: This method closes the current subpath by drawing a straight line back to the starting point.
================================================================

Sample: 18 Path2D.Double
----------------------------------------------------------------
1. `void moveTo(double x, double y)`: This method moves the current point to the specified coordinates.
2. `void lineTo(double x, double y)`: This method adds a straight line segment to the path from the current point to the specified coordinates.
3. `void quadTo(double x1, double y1, double x2, double y2)`: This method adds a quadratic curve segment to the path from the current point to the specified coordinates.
4. `void curveTo(double x1, double y1, double x2, double y2, double x3, double y3)`: This method adds a cubic curve segment to the path from the current point to the specified coordinates.
5. `void closePath()`: This method closes the current subpath by drawing a straight line back to the starting point.
================================================================

Sample: 19 Path2D.Float
----------------------------------------------------------------
1. `void moveTo(float x, float y)`: This method moves the current point to the specified coordinates.
2. `void lineTo(float x, float y)`: This method adds a straight line segment to the path from the current point to the specified coordinates.
3. `void quadTo(float x1, float y1, float x2, float y2)`: This method adds a quadratic curve segment to the path from the current point to the specified coordinates.
4. `void curveTo(float x1, float y1, float x2, float y2, float x3, float y3)`: This method adds a cubic curve segment to the path from the current point to the specified coordinates.
5. `void closePath()`: This method closes the current subpath by drawing a straight line back to the starting point.
================================================================

Sample: 20 Point2D
----------------------------------------------------------------
1. `double getX()`: This method returns the x-coordinate of this Point2D.
2. `double getY()`: This method returns the y-coordinate of this Point2D.
3. `void setLocation(double x, double y)`: This method sets the location of this Point2D to the specified x and y coordinates.
4. `double distance(double x, double y)`: This method calculates the distance between this Point2D and the specified coordinates.
5. `Point2D clone()`: This method creates a new Point2D object that is a copy of this Point2D.
================================================================

Sample: 21 Point2D.Double
----------------------------------------------------------------
1. `double getX()`: This method returns the X coordinate of this Point2D.
2. `double getY()`: This method returns the Y coordinate of this Point2D.
3. `void setLocation(double x, double y)`: This method sets the location of this Point2D to the specified double coordinates.
4. `Point2D.Double clone()`: This method creates a new object that is a copy of this Point2D.
5. `double distance(double x, double y)`: This method calculates the distance between this Point2D and a specified point with double coordinates.
================================================================

Sample: 22 Point2D.Float
----------------------------------------------------------------
1. `float getX()`: This method returns the X coordinate of this Point2D in float precision.
2. `float getY()`: This method returns the Y coordinate of this Point2D in float precision.
3. `void setLocation(float x, float y)`: This method sets the location of this Point2D to the specified float coordinates.
4. `Point2D.Float clone()`: This method creates a new object that is a copy of this Point2D.
5. `String toString()`: This method returns a string representation of this Point2D.
================================================================

Sample: 23 QuadCurve2D
----------------------------------------------------------------
1. `double getX1()`: Returns the X coordinate of the start point of the quadratic curve.
2. `double getY1()`: Returns the Y coordinate of the start point of the quadratic curve.
3. `double getCtrlX()`: Returns the X coordinate of the control point of the quadratic curve.
4. `double getCtrlY()`: Returns the Y coordinate of the control point of the quadratic curve.
5. `double getX2()`: Returns the X coordinate of the end point of the quadratic curve.
================================================================

Sample: 24 QuadCurve2D.Double
----------------------------------------------------------------
1. `double getX1()`: Returns the X coordinate of the start point of the quadratic curve.
2. `double getY1()`: Returns the Y coordinate of the start point of the quadratic curve.
3. `double getCtrlX()`: Returns the X coordinate of the control point of the quadratic curve.
4. `double getCtrlY()`: Returns the Y coordinate of the control point of the quadratic curve.
5. `double getX2()`: Returns the X coordinate of the end point of the quadratic curve.
================================================================

Sample: 25 QuadCurve2D.Float
----------------------------------------------------------------
1. `double getX1()`: Returns the X coordinate of the start point of the quadratic curve.
2. `double getY1()`: Returns the Y coordinate of the start point of the quadratic curve.
3. `double getCtrlX()`: Returns the X coordinate of the control point of the quadratic curve.
4. `double getCtrlY()`: Returns the Y coordinate of the control point of the quadratic curve.
5. `double getX2()`: Returns the X coordinate of the end point of the quadratic curve.
================================================================

Sample: 26 Rectangle2D
----------------------------------------------------------------
1. `double getHeight()`: This method returns the height of the rectangle.
2. `double getWidth()`: This method returns the width of the rectangle.
3. `void setRect(double x, double y, double w, double h)`: This method sets the location and size of the rectangle.
4. `Rectangle2D createIntersection(Rectangle2D r)`: This method returns a new Rectangle2D object representing the intersection of this rectangle with the specified rectangle.
5. `boolean contains(double x, double y)`: This method checks if the specified point is inside the rectangle.
================================================================

Sample: 27 Rectangle2D.Double
----------------------------------------------------------------
1. `double getX()`: This method returns the X coordinate of the upper-left corner of the rectangle.
2. `double getY()`: This method returns the Y coordinate of the upper-left corner of the rectangle.
3. `double getWidth()`: This method returns the width of the rectangle.
4. `double getHeight()`: This method returns the height of the rectangle.
5. `void setFrame(double x, double y, double w, double h)`: This method sets the location and size of the rectangle to the specified double values.
================================================================

Sample: 28 Rectangle2D.Float
----------------------------------------------------------------
1. `float getX()`: This method returns the X coordinate of the upper-left corner of the rectangle.
2. `float getY()`: This method returns the Y coordinate of the upper-left corner of the rectangle.
3. `float getWidth()`: This method returns the width of the rectangle.
4. `float getHeight()`: This method returns the height of the rectangle.
5. `void setFrame(float x, float y, float w, float h)`: This method sets the location and size of the rectangle to the specified float values.
================================================================

Sample: 29 RectangularShape
----------------------------------------------------------------
1. `double getHeight()`: This method returns the height of the rectangular shape.
2. `double getWidth()`: This method returns the width of the rectangular shape.
3. `void setFrame(double x, double y, double w, double h)`: This method sets the location and size of the rectangular shape.
4. `void setFrameFromDiagonal(double x1, double y1, double x2, double y2)`: This method sets the location and size of the rectangular shape based on the coordinates of two diagonally opposite corners.
5. `void setFrameFromDiagonal(Point2D p1, Point2D p2)`: This method sets the location and size of the rectangular shape based on the coordinates of two diagonally opposite corners specified as Point2D objects.
================================================================

Sample: 30 RoundRectangle2D
----------------------------------------------------------------
1. `double getArcWidth()`: This method returns the width of the arc that defines the rounded corners of the RoundRectangle2D.
2. `double getArcHeight()`: This method returns the height of the arc that defines the rounded corners of the RoundRectangle2D.
3. `void setRoundRect(double x, double y, double w, double h, double arcWidth, double arcHeight)`: This method sets the location, size, and corner radii of this RoundRectangle2D.
4. `void setFrame(double x, double y, double w, double h)`: This method sets the location and size of the RoundRectangle2D.
5. `boolean contains(double x, double y)`: This method checks whether the specified point (x, y) is inside the RoundRectangle2D.
================================================================

Sample: 31 RoundRectangle2D.Double
----------------------------------------------------------------
1. `double getArcWidth()`: This method returns the width of the arc that defines the shape of the rounded corners.
2. `double getArcHeight()`: This method returns the height of the arc that defines the shape of the rounded corners.
3. `void setRoundRect(double x, double y, double w, double h, double arcWidth, double arcHeight)`: This method sets the location, size, and corner radii of this RoundRectangle2D to the specified double values.
4. `void setFrame(double x, double y, double w, double h)`: This method sets the location and size of the framing rectangle of this RoundRectangle2D to the specified double values.
5. `void setFrameFromDiagonal(double x1, double y1, double x2, double y2)`: This method sets the location and size of the framing rectangle of this RoundRectangle2D based on the two specified points.
================================================================

Sample: 32 RoundRectangle2D.Float
----------------------------------------------------------------
1. `double getArcWidth()`: This method returns the width of the arc that defines the shape of the rounded corners.
2. `double getArcHeight()`: This method returns the height of the arc that defines the shape of the rounded corners.
3. `void setRoundRect(double x, double y, double w, double h, double arcWidth, double arcHeight)`: This method sets the location, size, and corner radii of this RoundRectangle2D to the specified double values.
4. `void setFrame(double x, double y, double w, double h)`: This method sets the location and size of the framing rectangle of this RoundRectangle2D to the specified double values.
5. `void setFrameFromDiagonal(double x1, double y1, double x2, double y2)`: This method sets the framing rectangle of this RoundRectangle2D to be the smallest rectangle that contains the two specified points.
================================================================

