Sample: 0 Annotation
----------------------------------------------------------------
1. `void setValue(String value)`: This method sets the value of the annotation.
2. `String getValue()`: This method returns the value of the annotation.
3. `void setAttribute(String key, Object value)`: This method sets the specified attribute with the given value.
4. `Object getAttribute(String key)`: This method returns the value of the specified attribute.
5. `Set<String> getKeys()`: This method returns a set of all the keys in the annotation.
================================================================

Sample: 1 AttributedCharacterIterator.Attribute
----------------------------------------------------------------
1. `String getName()`: This method returns the name of this attribute.
2. `boolean equals(Object obj)`: This method compares this attribute to the specified object.
3. `int hashCode()`: This method returns a hash code value for this attribute.
4. `String toString()`: This method returns a string representation of this attribute.
5. `static AttributedCharacterIterator.Attribute readResolve()`: This method ensures that deserialized instances are replaced with a unique instance.
================================================================

Sample: 2 AttributedString
----------------------------------------------------------------
1. `void addAttribute(AttributedCharacterIterator.Attribute attribute, Object value)`: This method adds an attribute to the entire string.
2. `void addAttribute(AttributedCharacterIterator.Attribute attribute, Object value, int beginIndex, int endIndex)`: This method adds an attribute to a subrange of the string.
3. `void addAttributes(Map<? extends AttributedCharacterIterator.Attribute, ?> attributes, int beginIndex, int endIndex)`: This method adds a set of attributes to a subrange of the string.
4. `AttributedCharacterIterator getIterator()`: This method returns an iterator on the entire attributed text.
5. `AttributedCharacterIterator getIterator(AttributedCharacterIterator.Attribute[] attributes)`: This method returns an iterator on the entire attributed text with the specified attributes.
================================================================

Sample: 3 Bidi
----------------------------------------------------------------
1. `int getLength()`: This method returns the length of the text.
2. `int getLevelAt(int offset)`: This method returns the level of the character at the specified offset.
3. `int getRunCount()`: This method returns the number of level runs.
4. `int getRunLevel(int run)`: This method returns the level of the specified run.
5. `String getParagraph(int paraIndex)`: This method returns the paragraph containing the specified index.
================================================================

Sample: 4 BreakIterator
----------------------------------------------------------------
1. `int first()`: This method returns the first boundary.
2. `int last()`: This method returns the last boundary.
3. `int next()`: This method returns the next boundary.
4. `int previous()`: This method returns the previous boundary.
5. `int following(int offset)`: This method returns the boundary that follows the specified offset.
================================================================

Sample: 5 ChoiceFormat
----------------------------------------------------------------
1. `void applyPattern(String newPattern)`: This method sets the pattern used by this ChoiceFormat.
2. `double[] getLimits()`: This method returns the limits for the ranges in this ChoiceFormat.
3. `void setChoices(double[] limits, String[] formats)`: This method sets the choices for the ChoiceFormat.
4. `String toPattern()`: This method returns the pattern string of this ChoiceFormat.
5. `Object clone()`: This method creates a copy of this ChoiceFormat.
================================================================

Sample: 6 CollationElementIterator
----------------------------------------------------------------
1. `int next()`: This method returns the next collation element in the iterator.
2. `int previous()`: This method returns the previous collation element in the iterator.
3. `int getMaxExpansion(int ce)`: This method returns the maximum length of any expansion sequence that ends with the specified collation element.
4. `int getOffset()`: This method returns the offset of the current collation element in the original string being iterated.
5. `int primaryOrder(int ce)`: This method returns the primary order of the specified collation element.
================================================================

Sample: 7 CollationKey
----------------------------------------------------------------
1. `int compareTo(CollationKey target)`: This method compares this CollationKey to another CollationKey.
2. `String getSourceString()`: This method returns the source string that this CollationKey represents.
3. `byte[] toByteArray()`: This method converts the CollationKey to a byte array for storage or transmission.
4. `int compareTo(Object target)`: This method compares this CollationKey to another object.
5. `CollationKey clone()`: This method creates a copy of this CollationKey.
================================================================

Sample: 8 Collator
----------------------------------------------------------------
1. `int compare(String source, String target)`: Compares the two specified String objects.
2. `CollationKey getCollationKey(String source)`: Transforms the specified String into a CollationKey that can be compared to other CollationKeys.
3. `Locale getLocale()`: Gets the locale used for the comparison.
4. `RuleBasedCollator clone()`: Creates a new object that is a copy of this Collator.
5. `int hashCode()`: Returns the hash code value for this Collator.
================================================================

Sample: 9 DateFormat
----------------------------------------------------------------
1. `String format(Date date)`: This method formats the given Date object into a date/time string.
2. `Date parse(String source) throws ParseException`: This method parses the given string to produce a Date object.
3. `void setLenient(boolean lenient)`: This method sets whether the parsing is lenient or not.
4. `void setTimeZone(TimeZone zone)`: This method sets the time zone for the date/time formatting.
5. `DateFormat getInstance()`: This method returns a default date/time formatter for the default locale.
================================================================

Sample: 10 DateFormat.Field
----------------------------------------------------------------
1. `int getCalendarField()`: This method returns the calendar field constant for this Field.
2. `static DateFormat.Field ofCalendarField(int calendarField)`: This method returns the Field instance for the specified calendar field.
3. `static DateFormat.Field ofLocalizedTime(DateFormat.Field field)`: This method returns the Field instance for the specified localized time field.
4. `static DateFormat.Field ofPattern(String pattern)`: This method returns the Field instance for the specified pattern.
5. `static DateFormat.Field ofTime(DateFormat.Field field)`: This method returns the Field instance for the specified time field.
================================================================

Sample: 11 DateFormatSymbols
----------------------------------------------------------------
1. `String[] getMonths()`: This method returns an array of strings containing the names of the months.
2. `String[] getShortMonths()`: This method returns an array of strings containing the abbreviated names of the months.
3. `String[] getWeekdays()`: This method returns an array of strings containing the names of the days of the week.
4. `String[] getShortWeekdays()`: This method returns an array of strings containing the abbreviated names of the days of the week.
5. `String[] getZoneStrings()`: This method returns a two-dimensional array of strings containing the time zone data.
================================================================

Sample: 12 DecimalFormat
----------------------------------------------------------------
1. `String format(double number)`: This method formats a double into a string.
2. `StringBuffer format(double number, StringBuffer toAppendTo, FieldPosition pos)`: This method formats a double into a StringBuffer.
3. `AttributedCharacterIterator formatToCharacterIterator(Object obj)`: This method formats an object into an AttributedCharacterIterator.
4. `Number parse(String text, ParsePosition pos)`: This method parses a string to produce a Number.
5. `void setDecimalFormatSymbols(DecimalFormatSymbols newSymbols)`: This method sets the DecimalFormatSymbols for this DecimalFormat instance.
================================================================

Sample: 13 DecimalFormatSymbols
----------------------------------------------------------------
1. `char getDecimalSeparator()`: This method returns the character used as the decimal separator.
2. `char getGroupingSeparator()`: This method returns the character used as the grouping separator.
3. `char getMinusSign()`: This method returns the character used as the minus sign.
4. `char getPatternSeparator()`: This method returns the character used as the pattern separator.
5. `char getPercent()`: This method returns the character used as the percent sign.
================================================================

Sample: 14 FieldPosition
----------------------------------------------------------------
1. `int getBeginIndex()`: This method returns the index of the beginning of the field.
2. `int getEndIndex()`: This method returns the index of the end of the field.
3. `FieldPosition clone()`: This method creates a copy of this FieldPosition.
4. `void setBeginIndex(int bi)`: This method sets the index of the beginning of the field.
5. `void setEndIndex(int ei)`: This method sets the index of the end of the field.
================================================================

Sample: 15 Format
----------------------------------------------------------------
1. `String format(Object obj)`: This method formats the specified object into a string representation.
2. `Object parseObject(String source)`: This method parses the specified string and returns an object.
3. `StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos)`: This method formats the specified object and appends the result to a StringBuffer at the specified position.
4. `Object parseObject(String source, ParsePosition pos)`: This method parses the specified string starting at the specified position and returns an object.
5. `AttributedCharacterIterator formatToCharacterIterator(Object obj)`: This method formats the specified object into an attributed character iterator.
================================================================

Sample: 16 Format.Field
----------------------------------------------------------------
1. `Format.Field[] getFields()`: This method returns an array of all Field constants defined in the Format class.
2. `int hashCode()`: This method returns the hash code value for the Field object.
3. `String toString()`: This method returns a string representation of the Field object.
4. `boolean equals(Object obj)`: This method compares the specified object with this Field object for equality.
5. `String getKey()`: This method returns the key associated with the Field object.
================================================================

Sample: 17 MessageFormat
----------------------------------------------------------------
1. `String format(Object... arguments)`: This method formats a message using the given arguments.
2. `static String format(String pattern, Object... arguments)`: This method formats a message using the given pattern and arguments.
3. `void setLocale(Locale newLocale)`: This method sets the locale to be used when creating or parsing messages.
4. `void applyPattern(String pattern)`: This method sets the pattern to be used for formatting messages.
5. `void setFormatsByArgumentIndex(Format[] newFormats)`: This method sets the formats to be used for each argument index when formatting messages.
================================================================

Sample: 18 MessageFormat.Field
----------------------------------------------------------------
1. `static MessageFormat.Field[] values()`: This method returns an array containing the constants of this enum type.
2. `static MessageFormat.Field valueOf(String name)`: This method returns the enum constant of this type with the specified name.
3. `int hashCode()`: This method returns a hash code for this Field.
4. `String toString()`: This method returns the name of this Field.
5. `boolean equals(Object obj)`: This method compares this Field to the specified object.
================================================================

Sample: 19 Normalizer
----------------------------------------------------------------
1. `String normalize(CharSequence src, Normalizer.Form form)`: This method normalizes the given Unicode text into the specified form.
2. `boolean isNormalized(CharSequence src, Normalizer.Form form)`: This method checks if the given Unicode text is normalized in the specified form.
3. `int compare(CharSequence s1, CharSequence s2)`: This method compares two Unicode strings for canonical equivalence.
4. `String compose(CharSequence src, boolean compat)`: This method composes the given Unicode text into its fully composed form.
5. `String decompose(CharSequence src, boolean compat)`: This method decomposes the given Unicode text into its fully decomposed form.
================================================================

Sample: 20 NumberFormat
----------------------------------------------------------------
1. `static NumberFormat getInstance()`: This method returns a NumberFormat instance for the default locale.
2. `static NumberFormat getCurrencyInstance()`: This method returns a NumberFormat instance for formatting currencies for the default locale.
3. `static NumberFormat getNumberInstance()`: This method returns a NumberFormat instance for formatting numbers for the default locale.
4. `static NumberFormat getPercentInstance()`: This method returns a NumberFormat instance for formatting percentages for the default locale.
5. `Number parse(String source) throws ParseException`: This method parses the text from the beginning of the given string to produce a number.
================================================================

Sample: 21 NumberFormat.Field
----------------------------------------------------------------
1. `int getAttribute()`: This method returns the attribute constant associated with this Field.
2. `static NumberFormat.Field ofAttribute(int attribute)`: This method returns the Field instance for the specified attribute constant.
3. `static NumberFormat.Field[] values()`: This method returns an array containing the constants of this enum type, in the order they are declared.
4. `static NumberFormat.Field valueOf(String name)`: This method returns the enum constant of this type with the specified name.
5. `static NumberFormat.Field[] values()`: This method returns an array containing the constants of this enum type, in the order they are declared.
================================================================

Sample: 22 ParsePosition
----------------------------------------------------------------
1. int getIndex(): This method returns the current index in the parsed string.
   
2. void setIndex(int index): This method sets the current index in the parsed string to the specified value.

3. boolean equals(Object obj): This method compares this ParsePosition with the specified object for equality.

4. int hashCode(): This method returns a hash code value for the object.

5. String toString(): This method returns a string representation of the object.
================================================================

Sample: 23 RuleBasedCollator
----------------------------------------------------------------
1. `RuleBasedCollator clone()`: This method creates a copy of this RuleBasedCollator.
2. `int getStrength()`: This method returns the current comparison level.
3. `void setStrength(int newStrength)`: This method sets the comparison level.
4. `String getRules()`: This method returns the collation rules.
5. `int getDecomposition()`: This method returns the decomposition mode.
================================================================

Sample: 24 SimpleDateFormat
----------------------------------------------------------------
1. `String format(Date date)`: This method formats the given Date object into a date/time string.
2. `Date parse(String source) throws ParseException`: This method parses the given string to produce a Date object.
3. `void applyPattern(String pattern)`: This method applies the given pattern to the date format.
4. `String toPattern()`: This method returns the current pattern used by the date format.
5. `void setLenient(boolean lenient)`: This method sets whether the date parsing is lenient or not.
================================================================

Sample: 25 StringCharacterIterator
----------------------------------------------------------------
1. `char first()`: Returns the first character in the iteration.
2. `char last()`: Returns the last character in the iteration.
3. `char current()`: Returns the current character.
4. `char next()`: Increments the iterator's index by one and returns the character at the new index.
5. `char previous()`: Decrements the iterator's index by one and returns the character at the new index.
================================================================

