Sample: 0 IIOImage
----------------------------------------------------------------
1. `ImageReader getImageReader()`: This method returns the ImageReader associated with this IIOImage.
2. `ImageWriter getImageWriter()`: This method returns the ImageWriter associated with this IIOImage.
3. `IIOMetadata getMetadata()`: This method returns the metadata associated with this IIOImage.
4. `Raster getRaster()`: This method returns the Raster object representing the image data.
5. `void setRaster(Raster raster)`: This method sets the Raster object representing the image data.
================================================================

Sample: 1 IIOParam
----------------------------------------------------------------
1. `void setSourceRegion(Rectangle sourceRegion)`: This method sets the region of the image to be read.
2. `Rectangle getSourceRegion()`: This method returns the region of the image to be read.
3. `void setSourceRenderSize(Dimension size)`: This method sets the size at which the image should be rendered.
4. `Dimension getSourceRenderSize()`: This method returns the size at which the image should be rendered.
5. `void setSourceBands(int[] sourceBands)`: This method sets the indices of the source bands to be used.
================================================================

Sample: 2 ImageIO
----------------------------------------------------------------
1. `ImageReader getImageReaderByFormatName(String formatName)`: This method returns an ImageReader object that supports the given format name.
2. `ImageWriter getImageWriterByFormatName(String formatName)`: This method returns an ImageWriter object that supports the given format name.
3. `String[] getReaderFormatNames()`: This method returns an array of strings listing the format names supported by the available ImageReaders.
4. `String[] getWriterFormatNames()`: This method returns an array of strings listing the format names supported by the available ImageWriters.
5. `boolean write(RenderedImage im, String formatName, OutputStream output)`: This method encodes a RenderedImage and writes the output to the specified OutputStream using the given format name.
================================================================

Sample: 3 ImageReader
----------------------------------------------------------------
1. `int getNumImages(boolean allowSearch)`: This method returns the number of images in the input source, optionally allowing searching for more images.
2. `ImageReadParam getDefaultReadParam()`: This method returns the default ImageReadParam object for this ImageReader.
3. `IIOMetadata getImageMetadata(int imageIndex)`: This method returns the metadata associated with the specified image.
4. `ImageTypeSpecifier getImageType(int imageIndex)`: This method returns an ImageTypeSpecifier indicating the image type of the specified image.
5. `Iterator<ImageTypeSpecifier> getImageTypes(int imageIndex)`: This method returns an Iterator containing ImageTypeSpecifier objects that specify the legal image types for the specified image.
================================================================

Sample: 4 ImageReadParam
----------------------------------------------------------------
1. `void setSourceRegion(Rectangle sourceRegion)`: Sets the region of the source image to be decoded.
2. `Rectangle getSourceRegion()`: Returns the region of the source image to be decoded.
3. `void setSourceRenderSize(Dimension size)`: Sets the size at which the source image data should be rendered.
4. `Dimension getSourceRenderSize()`: Returns the size at which the source image data should be rendered.
5. `void setSourceSubsampling(int sourceXSubsampling, int sourceYSubsampling, int subsamplingXOffset, int subsamplingYOffset)`: Sets the subsampling factors and offsets for the source image.
================================================================

Sample: 5 ImageTypeSpecifier
----------------------------------------------------------------
1. `int getNumBands()`: This method returns the number of bands in the image.
2. `ColorModel getColorModel()`: This method returns the ColorModel of the image.
3. `SampleModel getSampleModel()`: This method returns the SampleModel of the image.
4. `int getBufferedImageType()`: This method returns the BufferedImage type for the image.
5. `boolean isCompatible(ImageTypeSpecifier type)`: This method checks if the specified ImageTypeSpecifier is compatible with this ImageTypeSpecifier.
================================================================

Sample: 6 ImageWriteParam
----------------------------------------------------------------
1. `void setCompressionMode(int mode)`: This method sets the compression mode to be used.
2. `int getCompressionMode()`: This method returns the compression mode that is currently set.
3. `void setCompressionQuality(float quality)`: This method sets the compression quality to be used.
4. `float getCompressionQuality()`: This method returns the compression quality that is currently set.
5. `void setProgressiveMode(String mode)`: This method sets the progressive mode to be used.
================================================================

Sample: 7 ImageWriter
----------------------------------------------------------------
1. `void setOutput(Object output)`: This method sets the output destination to the given object.
2. `void setLocale(Locale locale)`: This method sets the locale to be used by this ImageWriter.
3. `void setOutput(Object output, boolean seekForwardOnly)`: This method sets the output destination to the given object and optionally allows seeking forward only.
4. `void setOutput(ImageOutputStream stream)`: This method sets the output destination to the given ImageOutputStream.
5. `void setOutput(ImageOutputStream stream, boolean seekForwardOnly)`: This method sets the output destination to the given ImageOutputStream and optionally allows seeking forward only.
================================================================

