Sample: 0 ActionMapUIResource
----------------------------------------------------------------
1. void setParent(ActionMap map)
2. ActionMap getParent()
3. void setDefaultAction(Action defaultAction)
4. Action getDefaultAction()
5. void setParent(ActionMap map)
================================================================

Sample: 1 BorderUIResource
----------------------------------------------------------------
1. `BorderUIResource getBorderUIResource()`: This method returns a BorderUIResource object.
2. `ColorUIResource getHighlightColor()`: This method returns a ColorUIResource object representing the highlight color.
3. `DimensionUIResource getMaximumSize(JComponent c)`: This method returns a DimensionUIResource object representing the maximum size of the specified component.
4. `void installColorsAndFont(JComponent c, String uiClassName)`: This method installs the colors and font for the specified component based on the given UI class name.
5. `void installUI(JComponent c)`: This method installs the UI for the specified component.
================================================================

Sample: 2 BorderUIResource.BevelBorderUIResource
----------------------------------------------------------------
1. `int getHighlightOuterColor()`
2. `int getHighlightInnerColor()`
3. `int getShadowOuterColor()`
4. `int getShadowInnerColor()`
5. `int getHighlight()`
================================================================

Sample: 3 BorderUIResource.CompoundBorderUIResource
----------------------------------------------------------------
1. `BorderUIResource getOutsideBorder()`: This method returns the outside border of the CompoundBorderUIResource.
2. `BorderUIResource getInsideBorder()`: This method returns the inside border of the CompoundBorderUIResource.
3. `InsetsUIResource getOutsideBorderInsets(Component c)`: This method returns the outside border insets of the CompoundBorderUIResource for the specified component.
4. `InsetsUIResource getInsideBorderInsets(Component c)`: This method returns the inside border insets of the CompoundBorderUIResource for the specified component.
5. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the CompoundBorderUIResource for the specified component with the specified graphics context and bounds.
================================================================

Sample: 4 BorderUIResource.EmptyBorderUIResource
----------------------------------------------------------------
1. `Insets getBorderInsets(Component c)`: This method returns the border insets for the specified component.
2. `boolean isBorderOpaque()`: This method returns whether or not the border is opaque.
3. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component.
4. `void setBorderInsets(Component c, Insets insets)`: This method sets the border insets for the specified component.
5. `void updateBorderUIResource(Border border)`: This method updates the border UI resource.
================================================================

Sample: 5 BorderUIResource.EtchedBorderUIResource
----------------------------------------------------------------
1. `BorderUIResource.EtchedBorderUIResource(int type)`: This method creates a new EtchedBorderUIResource with the specified type.
2. `int getEtchType()`: This method returns the type of etch for this border.
3. `Color getHighlightColor(Component c)`: This method returns the highlight color for the specified component.
4. `Color getShadowColor(Component c)`: This method returns the shadow color for the specified component.
5. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component with the specified position and size.
================================================================

Sample: 6 BorderUIResource.LineBorderUIResource
----------------------------------------------------------------
1. `Color getLineColor()`: This method returns the color of the line border.
2. `int getThickness()`: This method returns the thickness of the line border.
3. `void setLineColor(Color color)`: This method sets the color of the line border.
4. `void setThickness(int thickness)`: This method sets the thickness of the line border.
5. `boolean isBorderOpaque()`: This method returns true if the border is opaque, false otherwise.
================================================================

Sample: 7 BorderUIResource.MatteBorderUIResource
----------------------------------------------------------------
1. `int getTop()`: This method returns the top inset value of the MatteBorderUIResource.
2. `int getLeft()`: This method returns the left inset value of the MatteBorderUIResource.
3. `int getBottom()`: This method returns the bottom inset value of the MatteBorderUIResource.
4. `int getRight()`: This method returns the right inset value of the MatteBorderUIResource.
5. `Color getMatteColor()`: This method returns the matte color of the MatteBorderUIResource.
================================================================

Sample: 8 BorderUIResource.TitledBorderUIResource
----------------------------------------------------------------
1. `String getTitle()`: This method returns the title of the titled border.
2. `void setTitle(String title)`: This method sets the title of the titled border.
3. `int getTitleJustification()`: This method returns the justification for the title.
4. `void setTitleJustification(int titleJustification)`: This method sets the justification for the title.
5. `int getTitlePosition()`: This method returns the position of the title.
================================================================

Sample: 9 ButtonUI
----------------------------------------------------------------
1. ButtonUI createUI(JComponent c)
2. void installUI(JComponent c)
3. void uninstallUI(JComponent c)
4. void paint(Graphics g, JComponent c)
5. Dimension getPreferredSize(JComponent c)
================================================================

Sample: 10 ColorChooserUI
----------------------------------------------------------------
1. ColorSelectionModel getColorSelectionModel()
   - Return type: ColorSelectionModel

2. void installUI(JComponent c)
   - Return type: void
   - Parameters: JComponent c

3. void uninstallUI(JComponent c)
   - Return type: void
   - Parameters: JComponent c

4. void installChooserPanel(JColorChooser enclosingChooser)
   - Return type: void
   - Parameters: JColorChooser enclosingChooser

5. void uninstallChooserPanel(JColorChooser enclosingChooser)
   - Return type: void
   - Parameters: JColorChooser enclosingChooser
================================================================

Sample: 11 ColorUIResource
----------------------------------------------------------------
1. `ColorUIResource(int rgb)`: This constructor creates a ColorUIResource with the specified RGB value.
2. `void setRGB(int rgb)`: This method sets the RGB value of the ColorUIResource.
3. `int getRGB()`: This method returns the RGB value of the ColorUIResource.
4. `void setAlpha(int alpha)`: This method sets the alpha value of the ColorUIResource.
5. `int getAlpha()`: This method returns the alpha value of the ColorUIResource.
================================================================

Sample: 12 ComboBoxUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI delegate for the specified component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI delegate for the specified component.
3. `void setPopupVisible(ComboBoxEditor editor, boolean v)`: This method sets the visibility of the popup.
4. `boolean isPopupVisible(ComboBoxEditor editor)`: This method returns true if the popup is visible.
5. `void setEditable(boolean aFlag)`: This method sets whether the combo box should be editable.
================================================================

Sample: 13 ComponentInputMapUIResource
----------------------------------------------------------------
1. void setParent(ComponentInputMap parent)
2. void put(KeyStroke keyStroke, Object actionMapKey)
3. void remove(KeyStroke key)
4. void clear()
5. Object get(KeyStroke keyStroke)
================================================================

Sample: 14 ComponentUI
----------------------------------------------------------------
1. ComponentUI createUI(JComponent c)
   - Return type: ComponentUI
   - Parameters: JComponent c

2. void installUI(JComponent c)
   - Return type: void
   - Parameters: JComponent c

3. void uninstallUI(JComponent c)
   - Return type: void
   - Parameters: JComponent c

4. void update(Graphics g, JComponent c)
   - Return type: void
   - Parameters: Graphics g, JComponent c

5. boolean contains(JComponent c, int x, int y)
   - Return type: boolean
   - Parameters: JComponent c, int x, int y
================================================================

Sample: 15 DesktopIconUI
----------------------------------------------------------------
1. `void setIcon(Icon icon)`: Sets the icon for the JDesktopIcon.
2. `Icon getIcon()`: Returns the icon for the JDesktopIcon.
3. `void setUI(DesktopIconUI ui)`: Sets the DesktopIconUI for the JDesktopIcon.
4. `DesktopIconUI getUI()`: Returns the DesktopIconUI for the JDesktopIcon.
5. `void updateUI()`: Updates the UI for the JDesktopIcon.
================================================================

Sample: 16 DesktopPaneUI
----------------------------------------------------------------
1. `ComponentUI createUI(JComponent c)`: This method creates a new UI object for the specified component.
2. `void installUI(JComponent c)`: This method installs the UI for a component.
3. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
4. `void update(Graphics g, JComponent c)`: This method updates the specified component.
5. `void paint(Graphics g, JComponent c)`: This method paints the specified component.
================================================================

Sample: 17 DimensionUIResource
----------------------------------------------------------------
1. `int width()`: Returns the width value of the DimensionUIResource.
2. `int height()`: Returns the height value of the DimensionUIResource.
3. `DimensionUIResource getSize()`: Returns a DimensionUIResource object representing the size of this DimensionUIResource.
4. `void setSize(int width, int height)`: Sets the size of this DimensionUIResource to the specified width and height values.
5. `void setSize(Dimension d)`: Sets the size of this DimensionUIResource to the specified Dimension object.
================================================================

Sample: 18 FileChooserUI
----------------------------------------------------------------
1. `void ensureFileIsVisible(JFileChooser fc, File f)`: Ensures that the file is visible in the file chooser.
2. `File getDirectory()`: Returns the current directory of the file chooser.
3. `File getSelectedFile()`: Returns the selected file in the file chooser.
4. `File[] getSelectedFiles()`: Returns an array of selected files in the file chooser.
5. `void rescanCurrentDirectory(JFileChooser fc)`: Rescans the current directory in the file chooser.
================================================================

Sample: 19 FontUIResource
----------------------------------------------------------------
1. `FontUIResource deriveFont(int style)`: This method creates a new FontUIResource object with the specified style.
2. `FontUIResource deriveFont(float size)`: This method creates a new FontUIResource object with the specified size.
3. `FontUIResource deriveFont(int style, float size)`: This method creates a new FontUIResource object with the specified style and size.
4. `FontUIResource deriveFont(Map<? extends AttributedCharacterIterator.Attribute, ?> attributes)`: This method creates a new FontUIResource object with the specified attributes.
5. `FontUIResource deriveFont(AffineTransform trans)`: This method creates a new FontUIResource object with the specified AffineTransform.
================================================================

Sample: 20 IconUIResource
----------------------------------------------------------------
1. IconUIResource getIcon(): This method returns the Icon object wrapped by this IconUIResource.
2. void setIcon(Icon icon): This method sets the Icon object to be wrapped by this IconUIResource.
3. int getIconWidth(): This method returns the width of the Icon object wrapped by this IconUIResource.
4. int getIconHeight(): This method returns the height of the Icon object wrapped by this IconUIResource.
5. void paintIcon(Component c, Graphics g, int x, int y): This method paints the Icon object wrapped by this IconUIResource on the specified component at the specified position.
================================================================

Sample: 21 InputMapUIResource
----------------------------------------------------------------
1. void setParent(InputMap parent)
2. void setUI(InputMapUI ui)
3. void setResolveParent(boolean resolveParent)
4. boolean getResolveParent()
5. void setDefaultActionMap(ActionMap map)
================================================================

Sample: 22 InsetsUIResource
----------------------------------------------------------------
1. `int getTop()`: This method returns the top inset value.
2. `int getLeft()`: This method returns the left inset value.
3. `int getBottom()`: This method returns the bottom inset value.
4. `int getRight()`: This method returns the right inset value.
5. `InsetsUIResource deriveInsets(int top, int left, int bottom, int right)`: This method returns a new InsetsUIResource object with the specified inset values.
================================================================

Sample: 23 InternalFrameUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
3. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size for the component.
4. `Dimension getMinimumSize(JComponent c)`: This method returns the minimum size for the component.
5. `Dimension getMaximumSize(JComponent c)`: This method returns the maximum size for the component.
================================================================

Sample: 24 LabelUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
3. `void paint(Graphics g, JComponent c)`: This method paints the specified component.
4. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size for the specified component.
5. `Dimension getMinimumSize(JComponent c)`: This method returns the minimum size for the specified component.
================================================================

Sample: 25 LayerUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI delegate for the specified component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI delegate for the specified component.
3. `void paint(Graphics g, JComponent c)`: This method paints the specified component.
4. `void update(Graphics g, JComponent c)`: This method updates the specified component.
5. `void applyPropertyChange(PropertyChangeEvent pce, JLayer l)`: This method applies a property change to the specified JLayer component.
================================================================

Sample: 26 ListUI
----------------------------------------------------------------
1. `int locationToIndex(Point location)`: This method returns the index of the cell at the specified coordinates.
2. `Rectangle getCellBounds(int index1, int index2)`: This method returns the bounding rectangle for the range of cells specified by the two indices.
3. `void updateLayoutState()`: This method updates the layout state of the list.
4. `void paint(Graphics g, JComponent c)`: This method paints the list.
5. `int getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction)`: This method returns the scrollable unit increment for the specified parameters.
================================================================

Sample: 27 MenuBarUI
----------------------------------------------------------------
1. MenuBarUI createUI(JComponent c)
   - Return type: MenuBarUI
   - Parameters: JComponent c

2. void installUI(JComponent c)
   - Return type: void
   - Parameters: JComponent c

3. void uninstallUI(JComponent c)
   - Return type: void
   - Parameters: JComponent c

4. boolean isFocusTraversable(JMenuBar c)
   - Return type: boolean
   - Parameters: JMenuBar c

5. Dimension getPreferredSize(JComponent c)
   - Return type: Dimension
   - Parameters: JComponent c
================================================================

Sample: 28 MenuItemUI
----------------------------------------------------------------
1. `MenuItemUI createUI(JComponent c)`: This method creates a new instance of the MenuItemUI for a specified JComponent.
2. `void update(Graphics g, JComponent c)`: This method updates the specified JComponent with the provided Graphics object.
3. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the specified JComponent.
4. `void paint(Graphics g, JComponent c)`: This method paints the specified JComponent using the provided Graphics object.
5. `void installUI(JComponent c)`: This method installs the UI for the specified JComponent.
================================================================

Sample: 29 OptionPaneUI
----------------------------------------------------------------
1. `void selectInitialValue(JOptionPane optionPane)`: This method sets the initial value that is to be selected when the option pane is first displayed.
2. `void updateOptionPane(JOptionPane optionPane)`: This method updates the option pane based on the current look and feel.
3. `void installUI(JComponent c)`: This method installs the UI for a component.
4. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
5. `void showMessageDialog(Component parentComponent, Object message)`: This method displays a modal dialog with the specified message.
================================================================

Sample: 30 PanelUI
----------------------------------------------------------------
1. `ComponentUI createUI(JComponent c)`: This method creates a new instance of the PanelUI for a specified JComponent.
2. `void installUI(JComponent c)`: This method installs the PanelUI for a specified JComponent.
3. `void uninstallUI(JComponent c)`: This method uninstalls the PanelUI for a specified JComponent.
4. `void paint(Graphics g, JComponent c)`: This method paints the PanelUI for a specified JComponent using the provided Graphics object.
5. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the PanelUI for a specified JComponent.
================================================================

Sample: 31 PopupMenuUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
3. `boolean isPopupTrigger(MouseEvent e)`: This method returns true if the mouse event is a popup trigger.
4. `void update(Graphics g, JComponent c)`: This method updates the specified component.
5. `boolean isFocusTraversable(JPopupMenu popup)`: This method returns true if the popup menu is focus traversable.
================================================================

Sample: 32 ProgressBarUI
----------------------------------------------------------------
1. `void paintDeterminate(Graphics g, JComponent c)`: This method paints the progress bar for the determinate mode.
2. `void paintIndeterminate(Graphics g, JComponent c)`: This method paints the progress bar for the indeterminate mode.
3. `Rectangle getBox(Rectangle r)`: This method returns the bounding box for the indeterminate animation.
4. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size for the progress bar.
5. `void setBorder(Border border)`: This method sets the border of the progress bar.
================================================================

Sample: 33 RootPaneUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
3. `void update(Graphics g, JComponent c)`: This method updates the graphics of a component.
4. `boolean contains(JComponent c, int x, int y)`: This method checks if a component contains the specified point.
5. `void paint(Graphics g, JComponent c)`: This method paints the UI for a component.
================================================================

Sample: 34 ScrollBarUI
----------------------------------------------------------------
1. `void paintTrack(Graphics g, JComponent c, Rectangle trackBounds)`: This method paints the track of the scrollbar.
2. `void paintThumb(Graphics g, JComponent c, Rectangle thumbBounds)`: This method paints the thumb of the scrollbar.
3. `void paintDecreaseHighlight(Graphics g)`: This method paints the decrease highlight of the scrollbar.
4. `void paintIncreaseHighlight(Graphics g)`: This method paints the increase highlight of the scrollbar.
5. `void layoutContainer(Container scrollbar)`: This method lays out the scrollbar components within the specified container.
================================================================

Sample: 35 ScrollPaneUI
----------------------------------------------------------------
1. void installUI(JComponent c): Installs the UI for a component.
2. void uninstallUI(JComponent c): Uninstalls the UI for a component.
3. boolean contains(JComponent c): Checks if the UI is installed for a component.
4. Dimension getMaximumSize(JComponent c): Returns the maximum size of the viewport for a component.
5. void syncScrollPaneWithViewport(JScrollPane sp): Synchronizes the scroll pane with its viewport.
================================================================

Sample: 36 SeparatorUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
3. `void paint(Graphics g, JComponent c)`: This method paints the separator.
4. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the separator.
5. `Dimension getMinimumSize(JComponent c)`: This method returns the minimum size of the separator.
================================================================

Sample: 37 SliderUI
----------------------------------------------------------------
1. `void paintThumb(Graphics g)`: This method paints the thumb.
2. `void paintTrack(Graphics g)`: This method paints the track.
3. `void paintTicks(Graphics g)`: This method paints the ticks.
4. `void paintLabels(Graphics g)`: This method paints the labels.
5. `void paintFocus(Graphics g)`: This method paints the focus.
================================================================

Sample: 38 SpinnerUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI delegate for the specified component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI delegate for the specified component.
3. `void paint(Graphics g, JComponent c)`: This method paints the specified component using the specified graphics context.
4. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the specified component.
5. `void layout(JComponent c)`: This method lays out the specified component.
================================================================

Sample: 39 SplitPaneUI
----------------------------------------------------------------
1. `BasicSplitPaneUI createUI(JComponent x)`: This method creates a new instance of BasicSplitPaneUI for the specified component.
2. `void finishedPaintingChildren(JSplitPane jc, Graphics g)`: This method is called after the JSplitPane's children have been painted.
3. `int getDividerLocation(JSplitPane jc)`: This method returns the location of the divider.
4. `int getMaximumDividerLocation(JSplitPane jc)`: This method returns the maximum location of the divider.
5. `void resetToPreferredSizes(JSplitPane jc)`: This method resets the sizes of the JSplitPane's children to their preferred sizes.
================================================================

Sample: 40 TabbedPaneUI
----------------------------------------------------------------
1. `Rectangle getTabBounds(JTabbedPane tabbedPane, int index)`: This method returns the bounds of the specified tab in the tabbed pane.
2. `int getTabRunCount(JTabbedPane tabbedPane)`: This method returns the number of tab runs in the tabbed pane.
3. `int tabForCoordinate(JTabbedPane tabbedPane, int x, int y)`: This method returns the index of the tab at the specified coordinates in the tabbed pane.
4. `void paintTab(Graphics g, int tabPlacement, Rectangle[] rects, int tabIndex, Rectangle iconRect, Rectangle textRect)`: This method paints the specified tab in the tabbed pane.
5. `void scrollTabLayout(JTabbedPane tabbedPane, int tabPlacement, int selectedIndex, int x, int y, int width, int height)`: This method scrolls the tab layout in the tabbed pane.
================================================================

Sample: 41 TableHeaderUI
----------------------------------------------------------------
1. `TableCellRenderer getCellRenderer(int columnIndex)`: Returns the cell renderer for the specified column index.
2. `void setCellRenderer(TableCellRenderer renderer)`: Sets the cell renderer for this table header.
3. `void setReorderingAllowed(boolean reorderingAllowed)`: Sets whether the user can rearrange the columns by dragging their headers.
4. `void setResizingAllowed(boolean resizingAllowed)`: Sets whether the user can resize the columns by dragging their borders.
5. `void setUI(TableHeaderUI ui)`: Sets the look and feel object for this table header.
================================================================

Sample: 42 TableUI
----------------------------------------------------------------
1. TableUI createUI(JComponent c)
   - Return type: TableUI
   - Parameters: JComponent c

2. TableCellRenderer getDefaultRenderer(Class<?> columnClass)
   - Return type: TableCellRenderer
   - Parameters: Class<?> columnClass

3. TableCellEditor getDefaultEditor(Class<?> columnClass)
   - Return type: TableCellEditor
   - Parameters: Class<?> columnClass

4. void installUI(JComponent c)
   - Return type: void
   - Parameters: JComponent c

5. void uninstallUI(JComponent c)
   - Return type: void
   - Parameters: JComponent c
================================================================

Sample: 43 TextUI
----------------------------------------------------------------
1. `int modelToView(int pos)`: This method converts the given location in the model to a place in the view coordinate system.
2. `int viewToModel(Point pt)`: This method converts the given point in the view coordinate system to the nearest representative location in the model.
3. `void damageRange(JTextComponent t, int p0, int p1)`: This method marks a range of text as needing a new View object to be created.
4. `void installUI(JComponent c)`: This method installs the UI for a component.
5. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
================================================================

Sample: 44 ToolBarUI
----------------------------------------------------------------
1. `void setRollover(boolean rollover)`: Sets whether or not the toolbar should be in rollover mode.
2. `void setFloatable(boolean floatable)`: Sets whether the toolbar can be dragged around by the user.
3. `void setOrientation(int orientation)`: Sets the orientation of the toolbar (either HORIZONTAL or VERTICAL).
4. `void setBorderPainted(boolean borderPainted)`: Sets whether the toolbar border should be painted.
5. `void setMargin(Insets m)`: Sets the margin between the toolbar border and its contents.
================================================================

Sample: 45 ToolTipUI
----------------------------------------------------------------
1. void installUI(JComponent c): Installs the UI for a component.
2. void uninstallUI(JComponent c): Uninstalls the UI for a component.
3. Dimension getPreferredSize(JComponent c): Returns the preferred size for the specified component.
4. Dimension getMinimumSize(JComponent c): Returns the minimum size for the specified component.
5. Dimension getMaximumSize(JComponent c): Returns the maximum size for the specified component.
================================================================

Sample: 46 TreeUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
3. `void paint(Graphics g, JComponent c)`: This method paints the specified component.
4. `Rectangle getPathBounds(JTree tree, TreePath path)`: This method returns the bounding rectangle, in the tree's coordinate system, for the node specified by the given path.
5. `TreePath getClosestPathForLocation(JTree tree, int x, int y)`: This method returns the path for the node at the specified location.
================================================================

Sample: 47 ViewportUI
----------------------------------------------------------------
1. ViewportUI createUI(JComponent c)
   - Return type: ViewportUI
   - Parameters: JComponent c

2. void installUI(JComponent c)
   - Return type: void
   - Parameters: JComponent c

3. void uninstallUI(JComponent c)
   - Return type: void
   - Parameters: JComponent c

4. void paint(Graphics g, JComponent c)
   - Return type: void
   - Parameters: Graphics g, JComponent c

5. Dimension getPreferredSize(JComponent c)
   - Return type: Dimension
   - Parameters: JComponent c
================================================================

