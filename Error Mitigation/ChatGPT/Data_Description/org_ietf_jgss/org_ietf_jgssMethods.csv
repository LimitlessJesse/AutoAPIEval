ClassName,Method,Return Type,Description,Full Description
ChannelBinding,equals(Object obj),boolean,Compares two instances of ChannelBinding.,"

equals
public boolean equals(Object obj)
Compares two instances of ChannelBinding.

Overrides:
equals in class Object
Parameters:
obj - another ChannelBinding to compare this one with
Returns:
true if the two ChannelBinding's contain
 the same values for the initiator and acceptor addresses and the
 application data.
See Also:
Object.hashCode(), 
HashMap


"
ChannelBinding,getAcceptorAddress(),InetAddress,Get the acceptor's address for this channel binding.,"

getAcceptorAddress
public InetAddress getAcceptorAddress()
Get the acceptor's address for this channel binding.

Returns:
the acceptor's address. null is returned if the address has
 not been set.


"
ChannelBinding,getApplicationData(),byte[],Get the application specified data for this channel binding.,"

getApplicationData
public byte[] getApplicationData()
Get the application specified data for this channel binding.

Returns:
the application data being used as part of the
 ChannelBinding. null is returned if no application data
 has been specified for the channel binding.


"
ChannelBinding,getInitiatorAddress(),InetAddress,Get the initiator's address for this channel binding.,"

getInitiatorAddress
public InetAddress getInitiatorAddress()
Get the initiator's address for this channel binding.

Returns:
the initiator's address. null is returned if
 the address has not been set.


"
ChannelBinding,hashCode(),int,Returns a hashcode value for this ChannelBinding object.,"

hashCode
public int hashCode()
Returns a hashcode value for this ChannelBinding object.

Overrides:
hashCode in class Object
Returns:
a hashCode value
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
GSSManager,"addProviderAtEnd(Provider p, Oid mech)",abstract void,This method is used to indicate to the GSSManager that the application would like a particular provider to be used if no other provider can be found that supports the given mechanism.,"

addProviderAtEnd
public abstract void addProviderAtEnd(Provider p,
                                      Oid mech)
                               throws GSSException
This method is used to indicate to the GSSManager that the
 application would like a particular provider to be used if no other
 provider can be found that supports the given mechanism. When a value
 of null is used instead of an Oid for the mechanism, the GSSManager
 must use the indicated provider for any mechanism.

 Calling this method repeatedly preserves the older settings but
 raises them above newer ones in preference thus forming an ordered
 list of providers and Oid pairs that grows at the bottom. Thus the
 older provider settings will be utilized first before this one is.

 If there are any previously existing preferences that conflict with
 the preference being set here, then the GSSManager should ignore this
 request.

 If the GSSManager implementation does not support an SPI with a
 pluggable provider architecture it should throw a GSSException with
 the status code GSSException.UNAVAILABLE to indicate that the
 operation is unavailable.

 Suppose an application desired that when a mechanism of Oid m1 is
 needed the system default providers always be checked first, and only
 when they do not support m1 should a provider A be checked. It would
 then make the call:

         GSSManager mgr = GSSManager.getInstance();
         mgr.addProviderAtEnd(A, m1);
 
 Now, if it also desired that for all mechanisms the provider B be
 checked after all configured providers have been checked, it would
 then call:

         mgr.addProviderAtEnd(B, null);
 
 Effectively the list of preferences now becomes {..., (A, m1), (B,
 null)}.

 Suppose at a later time the following call is made to the same
 GSSManager instance:

         mgr.addProviderAtEnd(B, m2)
 
 then the previous setting with the pair (B, null) subsumes this and
 therefore this request should be ignored. The same would happen if a
 request is made for the already existing pairs of (A, m1) or (B,
 null).

 Please note, however, that the following call:

         mgr.addProviderAtEnd(A, null)
 
 is not subsumed by the previous setting of (A, m1) and the list will
 effectively become {..., (A, m1), (B, null), (A, null)}

Parameters:
p - the provider instance that should be used whenever support
 is needed for mech.
mech - the mechanism for which the provider is being set
Throws:
GSSException - containing the following
 major error codes:
    GSSException.UNAVAILABLE,
    GSSException.FAILURE


"
GSSManager,"addProviderAtFront(Provider p, Oid mech)",abstract void,This method is used to indicate to the GSSManager that the application would like a particular provider to be used ahead of all others when support is desired for the given mechanism.,"

addProviderAtFront
public abstract void addProviderAtFront(Provider p,
                                        Oid mech)
                                 throws GSSException
This method is used to indicate to the GSSManager that the
 application would like a particular provider to be used ahead of all
 others when support is desired for the given mechanism. When a value
 of null is used instead of an Oid for the mechanism,
 the GSSManager must use the indicated provider ahead of all others
 no matter what the mechanism is. Only when the indicated provider
 does not support the needed mechanism should the GSSManager move on
 to a different provider.

 Calling this method repeatedly preserves the older settings but
 lowers them in preference thus forming an ordered list of provider
 and Oid pairs that grows at the top.

 Calling addProviderAtFront with a null Oid will remove
 all previous preferences that were set for this provider in the
 GSSManager instance. Calling addProviderAtFront with a non-null
 Oid will remove any previous preference that was set
 using this mechanism and this provider together.

 If the GSSManager implementation does not support an SPI with a
 pluggable provider architecture it should throw a GSSException with
 the status code GSSException.UNAVAILABLE to indicate that the
 operation is unavailable.

 Suppose an application desired that the provider A always be checked
 first when any mechanism is needed, it would call:

         GSSManager mgr = GSSManager.getInstance();
         // mgr may at this point have its own pre-configured list
         // of provider preferences. The following will prepend to
         // any such list:

         mgr.addProviderAtFront(A, null);
 
 Now if it also desired that the mechanism of Oid m1 always be
 obtained from the provider B before the previously set A was checked,
 it would call:

         mgr.addProviderAtFront(B, m1);
 
 The GSSManager would then first check with B if m1 was needed. In
 case B did not provide support for m1, the GSSManager would continue
 on to check with A.  If any mechanism m2 is needed where m2 is
 different from m1 then the GSSManager would skip B and check with A
 directly.

 Suppose at a later time the following call is made to the same
 GSSManager instance:

         mgr.addProviderAtFront(B, null)
 
 then the previous setting with the pair (B, m1) is subsumed by this
 and should be removed. Effectively the list of preferences now
 becomes {(B, null), (A, null),
         ... //followed by the pre-configured list.

 Please note, however, that the following call:
 
         mgr.addProviderAtFront(A, m3)
 
 does not subsume the previous setting of (A, null) and the list will
 effectively become {(A, m3), (B, null), (A, null), ...}

Parameters:
p - the provider instance that should be used whenever support
 is needed for mech.
mech - the mechanism for which the provider is being set
Throws:
GSSException - containing the following
 major error codes:
    GSSException.UNAVAILABLE,
    GSSException.FAILURE


"
GSSManager,createContext(byte[] interProcessToken),abstract GSSContext,Factory method for creating a previously exported context.,"

createContext
public abstract GSSContext createContext(byte[] interProcessToken)
                                  throws GSSException
Factory method for creating a previously exported context.  The
 context properties will be determined from the input token and
 cannot be modified through the set methods.

 Implementations are not required to support the inter-process
 transfer of security contexts.  Before exporting a context, calling
 the GSSContext.isTransferable
 will indicate if the context is transferable. Calling this method in
 an implementation that does not support it will result in a
 GSSException with the error
 code GSSException.UNAVAILABLE.

 Some mechanism providers might require that the caller be granted
 permission to initiate or accept a security context. A failed
 permission check might cause a SecurityException to be thrown from this method.

Parameters:
interProcessToken - the token previously emitted from the
 export method.
Returns:
the previously established GSSContext
Throws:
GSSException - containing the following
 major error codes:
    GSSException.NO_CONTEXT,
    GSSException.DEFECTIVE_TOKEN,
    GSSException.UNAVAILABLE,
    GSSException.UNAUTHORIZED,
    GSSException.FAILURE
See Also:
GSSContext


"
GSSManager,createContext(GSSCredential myCred),abstract GSSContext,Factory method for creating a context on the acceptor' side.,"

createContext
public abstract GSSContext createContext(GSSCredential myCred)
                                  throws GSSException
Factory method for creating a context on the acceptor' side.  The
 context's properties will be determined from the input token supplied
 to the accept method.

 Some mechanism providers might require that the caller be granted
 permission to accept a security context. A failed permission check
 might cause a SecurityException
 to be thrown from this method.

Parameters:
myCred - the credentials for the acceptor.  Use
 null to act as a default acceptor principal.
Returns:
an unestablished GSSContext
Throws:
GSSException - containing the following
 major error codes:
    GSSException.NO_CRED
GSSException.CREDENTIALS_EXPIRED
GSSException.BAD_MECH
GSSException.FAILURE
See Also:
GSSContext


"
GSSManager,"createContext(GSSName peer, Oid mech, GSSCredential myCred, int lifetime)",abstract GSSContext,Factory method for creating a context on the initiator's side.,"

createContext
public abstract GSSContext createContext(GSSName peer,
                                         Oid mech,
                                         GSSCredential myCred,
                                         int lifetime)
                                  throws GSSException
Factory method for creating a context on the initiator's
 side.

 Some mechanism providers might require that the caller be granted
 permission to initiate a security context. A failed permission check
 might cause a SecurityException
 to be thrown from this method.

 Non-default values for lifetime cannot always be honored by the
 underlying mechanism, thus applications should be prepared to call
 getLifetime on the returned
 context.

Parameters:
peer - the name of the target peer.
mech - the Oid of the desired mechanism.  Use null
 to request the default mechanism.
myCred - the credentials of the initiator.  Use
 null to act as the default initiator principal.
lifetime - the lifetime, in seconds, requested for the
 context. Use GSSContext.INDEFINITE_LIFETIME to request that the context have the
 maximum permitted lifetime. Use GSSContext.DEFAULT_LIFETIME to request a default lifetime for the
 context.
Returns:
an unestablished GSSContext
Throws:
GSSException - containing the following
 major error codes:
    GSSException.NO_CRED
GSSException.CREDENTIALS_EXPIRED
GSSException.BAD_NAMETYPE
GSSException.BAD_MECH
GSSException.FAILURE
See Also:
GSSContext


"
GSSManager,"createCredential(GSSName name, int lifetime, Oid[] mechs, int usage)",abstract GSSCredential,Factory method for acquiring credentials over a set of mechanisms.,"

createCredential
public abstract GSSCredential createCredential(GSSName name,
                                               int lifetime,
                                               Oid[] mechs,
                                               int usage)
                                        throws GSSException
Factory method for acquiring credentials over a set of
 mechanisms. This method attempts to acquire credentials for
 each of the mechanisms specified in the array called mechs.  To
 determine the list of mechanisms for which the acquisition of
 credentials succeeded, the caller should use the GSSCredential.getMechs method.

 GSS-API mechanism providers must impose a local access-control
 policy on callers to prevent unauthorized callers from acquiring
 credentials to which they are not entitled. The kinds of permissions
 needed by different mechanism providers will be documented on a
 per-mechanism basis. A failed permission check might cause a SecurityException to be thrown from
 this method.

 Non-default values for lifetime cannot always be honored by the
 underlying mechanisms, thus applications should be prepared to call
 getRemainingLifetime
 on the returned credential.

Parameters:
name - the name of the principal for whom this credential is to
 be acquired.  Use null to specify the default
 principal.
lifetime - The number of seconds that credentials should remain
 valid.  Use GSSCredential.INDEFINITE_LIFETIME to request that the credentials
 have the maximum permitted lifetime.  Use GSSCredential.DEFAULT_LIFETIME to
 request default credential lifetime.
mechs - an array of Oid's indicating the mechanisms over which
 the credential is to be acquired.  Use (Oid[]) null for
 requesting a system specific default set of mechanisms.
usage - The intended usage for this credential object. The value
 of this parameter must be one of:
 GSSCredential.INITIATE_AND_ACCEPT,
 GSSCredential.ACCEPT_ONLY, and
 GSSCredential.INITIATE_ONLY.
Returns:
a GSSCredential of the requested type.
Throws:
GSSException - containing the following
 major error codes:
    GSSException.BAD_MECH,
    GSSException.BAD_NAMETYPE,
    GSSException.BAD_NAME,
    GSSException.CREDENTIALS_EXPIRED,
    GSSException.NO_CRED,
    GSSException.FAILURE
See Also:
GSSCredential


"
GSSManager,"createCredential(GSSName name, int lifetime, Oid mech, int usage)",abstract GSSCredential,Factory method for acquiring a single mechanism credential.,"

createCredential
public abstract GSSCredential createCredential(GSSName name,
                                               int lifetime,
                                               Oid mech,
                                               int usage)
                                        throws GSSException
Factory method for acquiring a single mechanism credential.

 GSS-API mechanism providers must impose a local access-control
 policy on callers to prevent unauthorized callers from acquiring
 credentials to which they are not entitled. The kinds of permissions
 needed by different mechanism providers will be documented on a
 per-mechanism basis. A failed permission check might cause a SecurityException to be thrown from
 this method. 

 Non-default values for lifetime cannot always be honored by the
 underlying mechanisms, thus applications should be prepared to call
 getRemainingLifetime
 on the returned credential.

Parameters:
name - the name of the principal for whom this credential is to be
 acquired.  Use null to specify the default principal.
lifetime - The number of seconds that credentials should remain
 valid.  Use GSSCredential.INDEFINITE_LIFETIME to request that the credentials
 have the maximum permitted lifetime.  Use GSSCredential.DEFAULT_LIFETIME to
 request default credential lifetime.
mech - the Oid of the desired mechanism.  Use (Oid) null
  to request the default mechanism.
usage - The intended usage for this credential object. The value
 of this parameter must be one of:
 GSSCredential.INITIATE_AND_ACCEPT,
 GSSCredential.ACCEPT_ONLY, and
 GSSCredential.INITIATE_ONLY.
Returns:
a GSSCredential of the requested type.
Throws:
GSSException - containing the following
 major error codes:
    GSSException.BAD_MECH,
    GSSException.BAD_NAMETYPE,
    GSSException.BAD_NAME,
    GSSException.CREDENTIALS_EXPIRED,
    GSSException.NO_CRED,
    GSSException.FAILURE
See Also:
GSSCredential


"
GSSManager,createCredential(int usage),abstract GSSCredential,Factory method for acquiring default credentials.,"

createCredential
public abstract GSSCredential createCredential(int usage)
                                        throws GSSException
Factory method for acquiring default credentials.  This will cause
 the GSS-API to use system specific defaults for the set of mechanisms,
 name, and lifetime.

 GSS-API mechanism providers must impose a local access-control
 policy on callers to prevent unauthorized callers from acquiring
 credentials to which they are not entitled. The kinds of permissions
 needed by different mechanism providers will be documented on a
 per-mechanism basis. A failed permission check might cause a SecurityException to be thrown from
 this method.

Parameters:
usage - The intended usage for this credential object. The value
 of this parameter must be one of:
 GSSCredential.INITIATE_AND_ACCEPT,
 GSSCredential.ACCEPT_ONLY, and
 GSSCredential.INITIATE_ONLY.
Returns:
a GSSCredential of the requested type.
Throws:
GSSException - containing the following
 major error codes:
    GSSException.BAD_MECH,
    GSSException.BAD_NAMETYPE,
    GSSException.BAD_NAME,
    GSSException.CREDENTIALS_EXPIRED,
    GSSException.NO_CRED,
    GSSException.FAILURE
See Also:
GSSCredential


"
GSSManager,"createName(byte[] name, Oid nameType)",abstract GSSName,Factory method to convert a byte array containing a name from the specified namespace to a GSSName object.,"

createName
public abstract GSSName createName(byte[] name,
                                   Oid nameType)
                            throws GSSException
Factory method to convert a byte array containing a
 name from the specified namespace to a GSSName object. In general,
 the GSSName object created  will contain multiple
 representations of the name, one for each mechanism that is
 supported; two examples that are exceptions to this are when the
 namespace type parameter indicates NT_EXPORT_NAME or when the
 GSS-API implementation is not multi-mechanism. The bytes that are
 passed in are interpreted by each underlying mechanism according to
 some encoding scheme of its choice for the given nametype.

Parameters:
name - the byte array containing the name to create
nameType - the Oid specifying the namespace of the name supplied
 in the byte array. null can be used to specify that a
 mechanism specific default syntax should be assumed by each mechanism
 that examines the byte array.
Returns:
a GSSName representing the indicated principal
Throws:
GSSException - containing the following
 major error codes:
    GSSException.BAD_NAMETYPE,
    GSSException.BAD_NAME,
    GSSException.BAD_MECH,
    GSSException.FAILURE
See Also:
GSSName, 
GSSName.NT_EXPORT_NAME


"
GSSManager,"createName(byte[] name, Oid nameType, Oid mech)",abstract GSSName,Factory method to convert a byte array containing a name from the specified namespace to a GSSName object and canonicalize it at the same time for a mechanism.,"

createName
public abstract GSSName createName(byte[] name,
                                   Oid nameType,
                                   Oid mech)
                            throws GSSException
Factory method to convert a byte array containing a
 name from the specified namespace to a GSSName object and canonicalize
 it at the same time for a mechanism. In other words, this method is a
 utility that does the equivalent of two steps: the createName and then also GSSName.canonicalize.

Parameters:
name - the byte array containing the name to create
nameType - the Oid specifying the namespace of the name supplied
 in the byte array. null can be used to specify that a
 mechanism specific default syntax should be assumed by each mechanism
 that examines the byte array.
mech - Oid specifying the mechanism for which the name should be
 canonicalized
Returns:
a GSSName representing the indicated principal
Throws:
GSSException - containing the following
 major error codes:
    GSSException.BAD_NAMETYPE,
    GSSException.BAD_NAME,
    GSSException.BAD_MECH,
    GSSException.FAILURE
See Also:
GSSName.canonicalize(Oid), 
GSSName.NT_EXPORT_NAME


"
GSSManager,"createName(String nameStr, Oid nameType)",abstract GSSName,Factory method to convert a string name from the specified namespace to a GSSName object.,"

createName
public abstract GSSName createName(String nameStr,
                                   Oid nameType)
                            throws GSSException
Factory method to convert a string name from the
 specified namespace to a GSSName object. In general, the
 GSSName object created  will contain multiple
 representations of the name, one for each mechanism that is
 supported; two examples that are exceptions to this are when
 the namespace type parameter indicates NT_EXPORT_NAME or when the
 GSS-API implementation is not multi-mechanism. It is
 not recommended to use this method with a NT_EXPORT_NAME type because
 representing a previously exported name consisting of arbitrary bytes
 as a String might cause problems with character encoding schemes. In
 such cases it is recommended that the bytes be passed in directly to
 the overloaded form of this method createName.

Parameters:
nameStr - the string representing a printable form of the name to
 create.
nameType - the Oid specifying the namespace of the printable name
 supplied. null can be used to specify
 that a mechanism specific default printable syntax should
 be assumed by each mechanism that examines nameStr.
 It is not advisable to use the nametype NT_EXPORT_NAME with this
 method.
Returns:
a GSSName representing the indicated principal
Throws:
GSSException - containing the following
 major error codes:
    GSSException.BAD_NAMETYPE,
    GSSException.BAD_NAME,
    GSSException.BAD_MECH,
    GSSException.FAILURE
See Also:
GSSName, 
GSSName.NT_EXPORT_NAME


"
GSSManager,"createName(String nameStr, Oid nameType, Oid mech)",abstract GSSName,Factory method to convert a string name from the specified namespace to a GSSName object and canonicalize it at the same time for a mechanism.,"

createName
public abstract GSSName createName(String nameStr,
                                   Oid nameType,
                                   Oid mech)
                            throws GSSException
Factory method to convert a string name from the
 specified namespace to a GSSName object and canonicalize it at the
 same time for a mechanism. In other words, this method is
 a utility that does the equivalent of two steps: the createName and then also the GSSName.canonicalize.

Parameters:
nameStr - the string representing a printable form of the name to
 create.
nameType - the Oid specifying the namespace of the printable name
 supplied. null can be used to specify
 that a mechanism specific default printable syntax should
 be assumed by each mechanism that examines nameStr.
 It is not advisable to use the nametype NT_EXPORT_NAME with this
 method.
mech - Oid specifying the mechanism for which the name should be
 canonicalized
Returns:
a GSSName representing the indicated principal
Throws:
GSSException - containing the following
 major error codes:
    GSSException.BAD_NAMETYPE,
    GSSException.BAD_NAME,
    GSSException.BAD_MECH,
    GSSException.FAILURE
See Also:
GSSName.canonicalize(Oid), 
GSSName.NT_EXPORT_NAME


"
GSSManager,getInstance(),static GSSManager,Returns the default GSSManager implementation.,"

getInstance
public static GSSManager getInstance()
Returns the default GSSManager implementation.

Returns:
a GSSManager implementation


"
GSSManager,getMechs(),abstract Oid[],Returns a list of mechanisms that are available to GSS-API callers through this GSSManager.,"

getMechs
public abstract Oid[] getMechs()
Returns a list of mechanisms that are available to GSS-API callers
 through this GSSManager. The default GSSManager obtained from the
 getInstance() method includes the Oid
 ""1.2.840.113554.1.2.2"" in its list. This Oid identifies the Kerberos
 v5 GSS-API mechanism that is defined in RFC 1964.

Returns:
an array of Oid objects corresponding to the mechanisms that
 are available. A null value is returned when no
 mechanism are available (an example of this would be when mechanism
 are dynamically configured, and currently no mechanisms are
 installed).


"
GSSManager,getMechsForName(Oid nameType),abstract Oid[],Returns a list of mechanisms that support the indicated name type.,"

getMechsForName
public abstract Oid[] getMechsForName(Oid nameType)
Returns a list of mechanisms that support the indicated name type.

 The Kerberos v5 mechanism (""1.2.840.113554.1.2.2"") will always be
 returned in this list when the indicated nametype is one of
 GSSName.NT_HOSTBASED_SERVICE,
 GSSName.NT_EXPORT_NAME, or
 ""1.2.840.113554.1.2.2.1"".

Parameters:
nameType - the Oid of the name type to look for
Returns:
an array of Oid objects corresponding to the mechanisms that
 support the specified name type.  null is returned when no
 mechanisms are found to support the specified name type.
See Also:
getNamesForMech(Oid)


"
GSSManager,getNamesForMech(Oid mech),abstract Oid[],Returns then name types supported by the indicated mechanism.,"

getNamesForMech
public abstract Oid[] getNamesForMech(Oid mech)
                               throws GSSException
Returns then name types supported by the indicated mechanism.

 The default GSSManager instance includes support for the Kerberos v5
 mechanism. When this mechanism (""1.2.840.113554.1.2.2"") is indicated,
 the returned list will contain at least the following nametypes:
 GSSName.NT_HOSTBASED_SERVICE,
 GSSName.NT_EXPORT_NAME, and the
 Kerberos v5 specific Oid ""1.2.840.113554.1.2.2.1"". The namespace for
 the Oid ""1.2.840.113554.1.2.2.1"" is defined in RFC 1964.

Parameters:
mech - the Oid of the mechanism to query
Returns:
an array of Oid objects corresponding to the name types that
 the mechanism supports.
Throws:
GSSException - containing the following
 major error codes:
    GSSException.BAD_MECH
GSSException.FAILURE
See Also:
getMechsForName(Oid)


"
MessageProp,getMinorStatus(),int,Retrieves the minor status code that the underlying mechanism might have set for this per-message operation.,"

getMinorStatus
public int getMinorStatus()
Retrieves the minor status code that the underlying mechanism might
 have set for this per-message operation.

Returns:
the int minor status


"
MessageProp,getMinorString(),String,Retrieves a string explaining the minor status code.,"

getMinorString
public String getMinorString()
Retrieves a string explaining the minor status code.

Returns:
a String corresponding to the minor status
 code. null will be returned when no minor status code
 has been set.


"
MessageProp,getPrivacy(),boolean,Retrieves the privacy state.,"

getPrivacy
public boolean getPrivacy()
Retrieves the privacy state.

Returns:
true if the privacy (i.e., confidentiality) state is true,
 false otherwise.
See Also:
setPrivacy(boolean)


"
MessageProp,getQOP(),int,Retrieves the QOP value.,"

getQOP
public int getQOP()
Retrieves the QOP value.

Returns:
an int representing the QOP value
See Also:
setQOP(int)


"
MessageProp,isDuplicateToken(),boolean,Tests if this is a duplicate of an earlier token.,"

isDuplicateToken
public boolean isDuplicateToken()
Tests if this is a duplicate of an earlier token.

Returns:
true if this is a duplicate, false otherwise.


"
MessageProp,isGapToken(),boolean,"Tests if an expected token was not received, i.e., one or more predecessor tokens have not yet been successfully processed.","

isGapToken
public boolean isGapToken()
Tests if an expected token was not received, i.e., one or more
 predecessor tokens have not yet been successfully processed.

Returns:
true if an expected per-message token was not received,
 false otherwise.


"
MessageProp,isOldToken(),boolean,"Tests if this token's validity period has expired, i.e., the token is too old to be checked for duplication.","

isOldToken
public boolean isOldToken()
Tests if this token's validity period has expired, i.e., the token
 is too old to be checked for duplication.

Returns:
true if the token's validity period has expired, false
 otherwise.


"
MessageProp,isUnseqToken(),boolean,Tests if a later token had already been processed.,"

isUnseqToken
public boolean isUnseqToken()
Tests if a later token had already been processed.

Returns:
true if a later token had already been processed, false otherwise.


"
MessageProp,setPrivacy(boolean privState),void,Sets the privacy state.,"

setPrivacy
public void setPrivacy(boolean privState)
Sets the privacy state.

Parameters:
privState - true is the privacy (i.e., confidentiality) state
 is true, false otherwise.
See Also:
getPrivacy()


"
MessageProp,setQOP(int qop),void,Sets the QOP value.,"

setQOP
public void setQOP(int qop)
Sets the QOP value.

Parameters:
qop - the int value to set the QOP to
See Also:
getQOP()


"
MessageProp,"setSupplementaryStates(boolean duplicate, boolean old, boolean unseq, boolean gap, int minorStatus, String minorString)",void,This method sets the state for the supplementary information flags and the minor status in MessageProp.,"

setSupplementaryStates
public void setSupplementaryStates(boolean duplicate,
                                   boolean old,
                                   boolean unseq,
                                   boolean gap,
                                   int minorStatus,
                                   String minorString)
This method sets the state for the supplementary information flags
 and the minor status in MessageProp.  It is not used by the
 application but by the GSS implementation to return this information
 to the caller of a per-message context method.

Parameters:
duplicate - true if the token was a duplicate of an earlier
 token, false otherwise
old - true if the token's validity period has expired, false
 otherwise
unseq - true if a later token has already been processed, false
 otherwise
gap - true if one or more predecessor tokens have not yet been
 successfully processed, false otherwise
minorStatus - the int minor status code for the per-message
 operation
minorString - the textual representation of the minorStatus value


"
Oid,containedIn(Oid[] oids),boolean,A utility method to test if this Oid value is contained within the supplied Oid array.,"

containedIn
public boolean containedIn(Oid[] oids)
A utility method to test if this Oid value is contained within the
 supplied Oid array.

Parameters:
oids - the array of Oid's to search
Returns:
true if the array contains this Oid value, false otherwise


"
Oid,equals(Object other),boolean,Tests if two Oid objects represent the same Object identifier value.,"

equals
public boolean equals(Object other)
Tests if two Oid objects represent the same Object identifier
 value.

Overrides:
equals in class Object
Parameters:
other - the Oid object that has to be compared to this one
Returns:
true if the two Oid objects represent the same
 value, false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
Oid,getDER(),byte[],"Returns the full ASN.1 DER encoding for this oid object, which includes the tag and length.","

getDER
public byte[] getDER()
              throws GSSException
Returns the full ASN.1 DER encoding for this oid object, which
 includes the tag and length.

Returns:
byte array containing the DER encoding of this oid object.
Throws:
GSSException - may be thrown when the oid can't be encoded


"
Oid,hashCode(),int,Returns a hashcode value for this Oid.,"

hashCode
public int hashCode()
Returns a hashcode value for this Oid.

Overrides:
hashCode in class Object
Returns:
a hashCode value
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Oid,toString(),String,Returns a string representation of the oid's integer components in dot separated notation.,"

toString
public String toString()
Returns a string representation of the oid's integer components
 in dot separated notation.

Overrides:
toString in class Object
Returns:
string representation in the following format: ""1.2.3.4.5""


"
