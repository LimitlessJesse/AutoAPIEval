Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,Clipboard,1,"void setContents(Transferable contents, ClipboardOwner owner)",True,,"

setContents
public void setContents(Transferable contents,
                        ClipboardOwner owner)
Sets the current contents of the clipboard to the specified
 transferable object and registers the specified clipboard owner
 as the owner of the new contents.
 
 If there is an existing owner different from the argument
 owner, that owner is notified that it no longer
 holds ownership of the clipboard contents via an invocation
 of ClipboardOwner.lostOwnership() on that owner.
 An implementation of setContents() is free not
 to invoke lostOwnership() directly from this method.
 For example, lostOwnership() may be invoked later on
 a different thread. The same applies to FlavorListeners
 registered on this clipboard.
 
 The method throws IllegalStateException if the clipboard
 is currently unavailable. For example, on some platforms, the system
 clipboard is unavailable while it is accessed by another application.

Parameters:
contents - the transferable object representing the
                 clipboard content
owner - the object which owns the clipboard content
Throws:
IllegalStateException - if the clipboard is currently unavailable
See Also:
Toolkit.getSystemClipboard()


"
0,Clipboard,2,Transferable getContents(Object requestor),True,,"

getContents
public Transferable getContents(Object requestor)
Returns a transferable object representing the current contents
 of the clipboard.  If the clipboard currently has no contents,
 it returns null. The parameter Object requestor is
 not currently used.  The method throws
 IllegalStateException if the clipboard is currently
 unavailable.  For example, on some platforms, the system clipboard is
 unavailable while it is accessed by another application.

Parameters:
requestor - the object requesting the clip data  (not used)
Returns:
the current transferable object on the clipboard
Throws:
IllegalStateException - if the clipboard is currently unavailable
See Also:
Toolkit.getSystemClipboard()


"
0,Clipboard,3,void addFlavorListener(FlavorListener listener),True,,"

addFlavorListener
public void addFlavorListener(FlavorListener listener)
Registers the specified FlavorListener to receive
 FlavorEvents from this clipboard.
 If listener is null, no exception
 is thrown and no action is performed.

Parameters:
listener - the listener to be added
Since:
1.5
See Also:
removeFlavorListener(java.awt.datatransfer.FlavorListener), 
getFlavorListeners(), 
FlavorListener, 
FlavorEvent


"
0,Clipboard,4,void removeFlavorListener(FlavorListener listener),True,,"

removeFlavorListener
public void removeFlavorListener(FlavorListener listener)
Removes the specified FlavorListener so that it no longer
 receives FlavorEvents from this Clipboard.
 This method performs no function, nor does it throw an exception, if
 the listener specified by the argument was not previously added to this
 Clipboard.
 If listener is null, no exception
 is thrown and no action is performed.

Parameters:
listener - the listener to be removed
Since:
1.5
See Also:
addFlavorListener(java.awt.datatransfer.FlavorListener), 
getFlavorListeners(), 
FlavorListener, 
FlavorEvent


"
0,Clipboard,5,boolean isDataFlavorAvailable(DataFlavor flavor),True,,"

isDataFlavorAvailable
public boolean isDataFlavorAvailable(DataFlavor flavor)
Returns whether or not the current contents of this clipboard can be
 provided in the specified DataFlavor.

Parameters:
flavor - the requested DataFlavor for the contents
Returns:
true if the current contents of this clipboard
         can be provided in the specified DataFlavor;
         false otherwise
Throws:
NullPointerException - if flavor is null
IllegalStateException - if this clipboard is currently unavailable
Since:
1.5


"
1,DataFlavor,1,Class<?> getRepresentationClass(),True,,"

getRepresentationClass
public Class<?> getRepresentationClass()
Returns the Class which objects supporting this
 DataFlavor will return when this DataFlavor
 is requested.

Returns:
the Class which objects supporting this
 DataFlavor will return when this DataFlavor
 is requested


"
1,DataFlavor,2,String getMimeType(),True,,"

getMimeType
public String getMimeType()
Returns the MIME type string for this DataFlavor.

Returns:
the MIME type string for this flavor


"
1,DataFlavor,3,boolean isMimeTypeEqual(String mimeType),True,,"

isMimeTypeEqual
public boolean isMimeTypeEqual(String mimeType)
Returns whether the string representation of the MIME type passed in
 is equivalent to the MIME type of this DataFlavor.
 Parameters are not included in the comparison.

Parameters:
mimeType - the string representation of the MIME type
Returns:
true if the string representation of the MIME type passed in is
         equivalent to the MIME type of this DataFlavor;
         false otherwise
Throws:
NullPointerException - if mimeType is null


"
1,DataFlavor,4,boolean isFlavorSerializedObjectType(),True,,"

isFlavorSerializedObjectType
public boolean isFlavorSerializedObjectType()
Returns true if the DataFlavor specified represents
 a serialized object.

Returns:
true if the DataFlavor specified represents
   a Serialized Object


"
1,DataFlavor,5,boolean isMimeTypeSerializedObject(),True,,"

isMimeTypeSerializedObject
public boolean isMimeTypeSerializedObject()
Does the DataFlavor represent a serialized object?

"
2,FlavorEvent,1,DataFlavor[] getChangedDataFlavors(),False,,NULL
2,FlavorEvent,2,boolean isConsumed(),False,,NULL
2,FlavorEvent,3,FlavorListener[] getListeners(),False,,NULL
2,FlavorEvent,4,void consume(),False,,NULL
2,FlavorEvent,5,void setSource(Object newSource),False,,NULL
3,StringSelection,1,String getTransferDataFlavors(),False,,NULL
3,StringSelection,2,boolean isDataFlavorSupported(DataFlavor flavor),True,,"

isDataFlavorSupported
public boolean isDataFlavorSupported(DataFlavor flavor)
Returns whether the requested flavor is supported by this
 Transferable.

Specified by:
isDataFlavorSupported in interface Transferable
Parameters:
flavor - the requested flavor for the data
Returns:
true if flavor is equal to
   DataFlavor.stringFlavor or
   DataFlavor.plainTextFlavor; false if flavor
   is not one of the above flavors
Throws:
NullPointerException - if flavor is null


"
3,StringSelection,3,void setString(String data),False,,NULL
3,StringSelection,4,String toString(),False,,NULL
3,StringSelection,5,Object getTransferData(DataFlavor flavor),True,,"

getTransferData
public Object getTransferData(DataFlavor flavor)
                       throws UnsupportedFlavorException,
                              IOException
Returns the Transferable's data in the requested
 DataFlavor if possible. If the desired flavor is
 DataFlavor.stringFlavor, or an equivalent flavor,
 the String representing the selection is
 returned. If the desired flavor is
 DataFlavor.plainTextFlavor,
 or an equivalent flavor, a Reader is returned.
 Note: The behavior of this method for
 DataFlavor.plainTextFlavor
 and equivalent DataFlavors is inconsistent with the
 definition of DataFlavor.plainTextFlavor.

Specified by:
getTransferData in interface Transferable
Parameters:
flavor - the requested flavor for the data
Returns:
the data in the requested flavor, as outlined above
Throws:
UnsupportedFlavorException - if the requested data flavor is
         not equivalent to either DataFlavor.stringFlavor
         or DataFlavor.plainTextFlavor
IOException - if an IOException occurs while retrieving the data.
         By default, StringSelection never throws this exception, but a
         subclass may.
NullPointerException - if flavor is null
See Also:
Reader


"
4,SystemFlavorMap,1,"void addFlavorForUnencodedNative(String nat, DataFlavor flav)",True,,"

addFlavorForUnencodedNative
public void addFlavorForUnencodedNative(String nat,
                                        DataFlavor flav)
Adds a mapping from a single String native to a single
 DataFlavor. Unlike getFlavorsForNative, the
 mapping will only be established in one direction, and the native will
 not be encoded. To establish a two-way mapping, call
 addUnencodedNativeForFlavor as well. The new mapping will
 be of lower priority than any existing mapping.
 This method has no effect if a mapping from the specified
 String native to the specified or equal
 DataFlavor already exists.

Parameters:
nat - the String native key for the mapping
flav - the DataFlavor value for the mapping
Throws:
NullPointerException - if nat or flav is null
Since:
1.4
See Also:
addUnencodedNativeForFlavor(java.awt.datatransfer.DataFlavor, java.lang.String)


"
4,SystemFlavorMap,2,"void addUnencodedNativeForFlavor(DataFlavor flav, String nat)",True,,"

addUnencodedNativeForFlavor
public void addUnencodedNativeForFlavor(DataFlavor flav,
                                        String nat)
Adds a mapping from the specified DataFlavor (and all
 DataFlavors equal to the specified DataFlavor)
 to the specified String native.
 Unlike getNativesForFlavor, the mapping will only be
 established in one direction, and the native will not be encoded. To
 establish a two-way mapping, call
 addFlavorForUnencodedNative as well. The new mapping will
 be of lower priority than any existing mapping.
 This method has no effect if a mapping from the specified or equal
 DataFlavor to the specified String native
 already exists.

Parameters:
flav - the DataFlavor key for the mapping
nat - the String native value for the mapping
Throws:
NullPointerException - if flav or nat is null
Since:
1.4
See Also:
addFlavorForUnencodedNative(java.lang.String, java.awt.datatransfer.DataFlavor)


"
4,SystemFlavorMap,3,void clear():,False,,NULL
4,SystemFlavorMap,4,DataFlavor[] getFlavorsForNative(String nat),False,,NULL
4,SystemFlavorMap,5,String[] getNativesForFlavor(DataFlavor flav),False,,NULL
