Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,DocumentBuilder,1,org.w3c.dom.Document parse(java.io.File f),False,,NULL
0,DocumentBuilder,2,org.w3c.dom.Document parse(java.io.InputStream is),False,,NULL
0,DocumentBuilder,3,org.w3c.dom.Document parse(java.io.Reader r),False,,NULL
0,DocumentBuilder,4,org.w3c.dom.Document newDocument(),False,,NULL
0,DocumentBuilder,5,org.w3c.dom.Document parse(java.lang.String uri),False,,NULL
1,DocumentBuilderFactory,1,javax.xml.parsers.DocumentBuilder newDocumentBuilder(),False,,NULL
1,DocumentBuilderFactory,2,void setNamespaceAware(boolean awareness),True,,"

setNamespaceAware
public void setNamespaceAware(boolean awareness)
Specifies that the parser produced by this code will
 provide support for XML namespaces. By default the value of this is set
 to false

Parameters:
awareness - true if the parser produced will provide support
                  for XML namespaces; false otherwise.


"
1,DocumentBuilderFactory,3,void setValidating(boolean validating),True,,"

setValidating
public void setValidating(boolean validating)
Specifies that the parser produced by this code will
 validate documents as they are parsed. By default the value of this
 is set to false.

 
 Note that ""the validation"" here means
 a validating
 parser as defined in the XML recommendation.
 In other words, it essentially just controls the DTD validation.
 (except the legacy two properties defined in JAXP 1.2.)
 

 To use modern schema languages such as W3C XML Schema or
 RELAX NG instead of DTD, you can configure your parser to be
 a non-validating parser by leaving the setValidating(boolean)
 method false, then use the setSchema(Schema)
 method to associate a schema to a parser.
 

Parameters:
validating - true if the parser produced will validate documents
                   as they are parsed; false otherwise.


"
1,DocumentBuilderFactory,4,void setIgnoringElementContentWhitespace(boolean whitespace),True,,"

setIgnoringElementContentWhitespace
public void setIgnoringElementContentWhitespace(boolean whitespace)
Specifies that the parsers created by this  factory must eliminate
 whitespace in element content (sometimes known loosely as
 'ignorable whitespace') when parsing XML documents (see XML Rec
 2.10). Note that only whitespace which is directly contained within
 element content that has an element only content model (see XML
 Rec 3.2.1) will be eliminated. Due to reliance on the content model
 this setting requires the parser to be in validating mode. By default
 the value of this is set to false.

Parameters:
whitespace - true if the parser created must eliminate whitespace
                   in the element content when parsing XML documents;
                   false otherwise.


"
1,DocumentBuilderFactory,5,void setExpandEntityReferences(boolean expandEntityRef),True,,"

setExpandEntityReferences
public void setExpandEntityReferences(boolean expandEntityRef)
Specifies that the parser produced by this code will
 expand entity reference nodes. By default the value of this is set to
 true

Parameters:
expandEntityRef - true if the parser produced will expand entity
                        reference nodes; false otherwise.


"
2,SAXParser,1,"void setFeature(String name, boolean value)",False,,NULL
2,SAXParser,2,"void setProperty(String name, Object value)",True,,"

setProperty
public abstract void setProperty(String name,
                                 Object value)
                          throws SAXNotRecognizedException,
                                 SAXNotSupportedException
Sets the particular property in the underlying implementation of
 XMLReader.
 A list of the core features and properties can be found at
 
 http://sax.sourceforge.net/?selected=get-set.

 All implementations that implement JAXP 1.5 or newer are required to
 support the XMLConstants.ACCESS_EXTERNAL_DTD and
 XMLConstants.ACCESS_EXTERNAL_SCHEMA properties.
 



      Setting the XMLConstants.ACCESS_EXTERNAL_DTD property
      restricts the access to external DTDs, external Entity References to
      the protocols specified by the property.  If access is denied during parsing
      due to the restriction of this property, SAXException
      will be thrown by the parse methods defined by SAXParser.
      

      Setting the XMLConstants.ACCESS_EXTERNAL_SCHEMA property
      restricts the access to external Schema set by the schemaLocation attribute to
      the protocols specified by the property.  If access is denied during parsing
      due to the restriction of this property, SAXException
      will be thrown by the parse methods defined by the SAXParser.
      



Parameters:
name - The name of the property to be set.
value - The value of the property to be set.
Throws:
SAXNotRecognizedException - When the underlying XMLReader does
   not recognize the property name.
SAXNotSupportedException - When the underlying XMLReader
  recognizes the property name but doesn't support the property.
See Also:
XMLReader.setProperty(java.lang.String, java.lang.Object)


"
2,SAXParser,3,void setEntityResolver(EntityResolver resolver),False,,NULL
2,SAXParser,4,void setErrorHandler(ErrorHandler handler),False,,NULL
2,SAXParser,5,void parse(InputSource input),False,,NULL
3,SAXParserFactory,1,SAXParser newSAXParser(),True,,"

newSAXParser
public abstract SAXParser newSAXParser()
                                throws ParserConfigurationException,
                                       SAXException
Creates a new instance of a SAXParser using the currently
 configured factory parameters.

Returns:
A new instance of a SAXParser.
Throws:
ParserConfigurationException - if a parser cannot
   be created which satisfies the requested configuration.
SAXException - for SAX errors.


"
3,SAXParserFactory,2,void setNamespaceAware(boolean awareness),True,,"

setNamespaceAware
public void setNamespaceAware(boolean awareness)
Specifies that the parser produced by this code will
 provide support for XML namespaces. By default the value of this is set
 to false.

Parameters:
awareness - true if the parser produced by this code will
                  provide support for XML namespaces; false otherwise.


"
3,SAXParserFactory,3,void setValidating(boolean validating),True,,"

setValidating
public void setValidating(boolean validating)
Specifies that the parser produced by this code will
 validate documents as they are parsed. By default the value of this is
 set to false.

 
 Note that ""the validation"" here means
 a validating
 parser as defined in the XML recommendation.
 In other words, it essentially just controls the DTD validation.
 (except the legacy two properties defined in JAXP 1.2.)
 

 To use modern schema languages such as W3C XML Schema or
 RELAX NG instead of DTD, you can configure your parser to be
 a non-validating parser by leaving the setValidating(boolean)
 method false, then use the setSchema(Schema)
 method to associate a schema to a parser.
 

Parameters:
validating - true if the parser produced by this code will
                   validate documents as they are parsed; false otherwise.


"
3,SAXParserFactory,4,"void setFeature(String name, boolean value)",True,,"

setFeature
public abstract void setFeature(String name,
                                boolean value)
                         throws ParserConfigurationException,
                                SAXNotRecognizedException,
                                SAXNotSupportedException
Sets the particular feature in the underlying implementation of
 org.xml.sax.XMLReader.
 A list of the core features and properties can be found at
 http://www.saxproject.org/
All implementations are required to support the XMLConstants.FEATURE_SECURE_PROCESSING feature.
 When the feature is


true: the implementation will limit XML processing to conform to implementation limits.
     Examples include entity expansion limits and XML Schema constructs that would consume large amounts of resources.
     If XML processing is limited for security reasons, it will be reported via a call to the registered
     ErrorHandler.fatalError(SAXParseException exception).
     See SAXParser parse methods for handler specification.
   

     When the feature is false, the implementation will processing XML according to the XML specifications without
     regard to possible implementation limits.
   


Parameters:
name - The name of the feature to be set.
value - The value of the feature to be set.
Throws:
ParserConfigurationException - if a parser cannot
     be created which satisfies the requested configuration.
SAXNotRecognizedException - When the underlying XMLReader does
            not recognize the property name.
SAXNotSupportedException - When the underlying XMLReader
            recognizes the property name but doesn't support the
            property.
NullPointerException - If the name parameter is null.
See Also:
XMLReader.setFeature(java.lang.String, boolean)


"
3,SAXParserFactory,5,"void setProperty(String name, Object value)",False,,NULL
